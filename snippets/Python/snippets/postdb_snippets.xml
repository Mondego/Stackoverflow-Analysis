<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>17331328</id><snippet>str(n) == str(n)[::-1]
</snippet></ROW><ROW><id>17331328</id><snippet>n</snippet></ROW><ROW><id>17331328</id><snippet>n</snippet></ROW><ROW><id>17331328</id><snippet>[::-1]</snippet></ROW><ROW><id>17331328</id><snippet>==</snippet></ROW><ROW><id>17331486</id><snippet>first f=...</snippet></ROW><ROW><id>17331486</id><snippet>MyClass() # and __del__ is called here
MyClass() # f is closed
ValueError: I/O operation on closed file
</snippet></ROW><ROW><id>17331486</id><snippet>__init__</snippet></ROW><ROW><id>17331490</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>17331490</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(animals))
['dog', 'cat', 'mouse', 'bird']
</snippet></ROW><ROW><id>17331490</id><snippet>list comprehension</snippet></ROW><ROW><id>17331490</id><snippet>&gt;&gt;&gt; [anim for item in animals for anim in item]
['dog', 'cat', 'mouse', 'bird']
</snippet></ROW><ROW><id>17331490</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>17331490</id><snippet>&gt;&gt;&gt; animals = [('dog', 'cat'), ('mouse', 'bird')]
&gt;&gt;&gt; %timeit list(chain.from_iterable(animals))
100000 loops, best of 3: 2.31 us per loop
&gt;&gt;&gt; %timeit [anim for item in animals for anim in item]
1000000 loops, best of 3: 1.13 us per loop

&gt;&gt;&gt; animals = [('dog', 'cat'), ('mouse', 'bird')]*100
&gt;&gt;&gt; %timeit list(chain.from_iterable(animals))
10000 loops, best of 3: 31.5 us per loop
&gt;&gt;&gt; %timeit [anim for item in animals for anim in item]
10000 loops, best of 3: 73.7 us per loop

&gt;&gt;&gt; animals = [('dog', 'cat'), ('mouse', 'bird')]*1000
&gt;&gt;&gt; %timeit list(chain.from_iterable(animals))
1000 loops, best of 3: 296 us per loop
&gt;&gt;&gt; %timeit [anim for item in animals for anim in item]
1000 loops, best of 3: 733 us per loop
</snippet></ROW><ROW><id>17331547</id><snippet>print("This program 'is' designed to find the average of n numbers you input\n") #print statement that introduces the average finder

counter = 0 #this counter will count how many numbers the user has inserted into the     program and will be used as denominator 
sum_of_numbers = 0 #this number is set as 0 as currently the sum is 0, as more numbers are inputed, they will be added together

first_question = input('''Would you like to enter a number? Type "yes" if you do, and "no" if you don't. \n\n''') #takes input of yes or no to see whether user wants to find average of numbers

while first_question == "yes" :
    ent_num = int(input("Enter your number here:"))
    sum_of_numbers = sum_of_numbers + ent_num
    counter = counter + 1
    first_question = input('''Would you like to enter another number after this? Type "yes" if you do, and "no" if you don't. \n''')

print("Your average is " + str(sum_of_numbers/counter))
</snippet></ROW><ROW><id>17332195</id><snippet>table_file</snippet></ROW><ROW><id>17332195</id><snippet>table_data = {'Serial Number':[],
              'Name':{'First': [],
                      'Middle': []
                      'Last': []},
              'Marks': []}

with open(table_file, 'r') as table:
    # skip first 3 rows
    for _ in range(3):
        table.next()

    for row in table:
        row = row.strip('\n').split('|')
        values = [r.strip() for r in row if r != '']
        assert len(values) == 5
        table_data['Serial Number'].append(int(values[0]))
        table_data['Name']['First'].append(values[1])
        table_data['Name']['Middle'].append(values[2])
        table_data['Name']['Last'].append(values[3])
        table_data['Marks'].append(values[4])
</snippet></ROW><ROW><id>17332195</id><snippet>pos_list</snippet></ROW><ROW><id>17332195</id><snippet>name_list</snippet></ROW><ROW><id>17332195</id><snippet>for itertools import tee, izip
def pairwise(iterable):
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)

def create_table_dict(pos_list, name_list):
    intervals = []
    for sub_list in pos_list:
        intervals.append(list(pairwise(sub_list)))

    items = []
    for interval, name in zip(intervals, name_list):
        items.append([ (i, n) for i, n in zip(interval, name) ])

    names = []
    for int1, name1 in items[0]:
        past_names = []
            for int2, name2 in items[1]:
        if int1[0] == int2[0]:
            if int1[1] == int2[1]:
                names.append(' '.join((name1, name2)).strip())
        elif int2[1] &lt; int1[1]:
                past_names.append(name2)
        elif int1[0] &lt; int2[0]:
            if int2[1] &lt; int1[1]:
            past_names.append(name2)
            elif int1[1] == int2[1]:
            names.append('{0}:{1}'.format(name1, 
                                          ','.join(past_names + [name2])))

    table = {}
    for name in names:
        if ':' not in name:
            table[name] = []
        else:
            upper, nested = name.split(':')
            nested = nested.split(',')
            table[upper] = {}
            for n in nested:
                table[upper][n] = []

    print table
</snippet></ROW><ROW><id>17332440</id><snippet>{{ result }}</snippet></ROW><ROW><id>17332440</id><snippet>&lt;script&gt;&lt;/script&gt;</snippet></ROW><ROW><id>17332440</id><snippet>result</snippet></ROW><ROW><id>17332440</id><snippet>JSON.parse(result)</snippet></ROW><ROW><id>17332440</id><snippet>&lt;script type="text/javascript"&gt;
var data = JSON.parse("{{ result }}");
run_d3_stuff(data);
&lt;/script&gt;
</snippet></ROW><ROW><id>17332691</id><snippet>timeit</snippet></ROW><ROW><id>17332691</id><snippet>def test(message):
    return message + message

testanon = lambda message: message + message
</snippet></ROW><ROW><id>17332691</id><snippet>timeit</snippet></ROW><ROW><id>17332691</id><snippet>&gt;&gt;&gt; timeit.repeat("test('test')", setup="from __main__ import test")
[0.16360807418823242, 0.1602180004119873, 0.15763211250305176]
&gt;&gt;&gt; timeit.repeat("testanon('test')", setup="from __main__ import testanon")
[0.15949010848999023, 0.15913081169128418, 0.17438983917236328]
</snippet></ROW><ROW><id>17332741</id><snippet>pyglet</snippet></ROW><ROW><id>17332741</id><snippet>pyglet</snippet></ROW><ROW><id>17332741</id><snippet>pyglet</snippet></ROW><ROW><id>17332741</id><snippet>PyOpenGL</snippet></ROW><ROW><id>17332833</id><snippet>distance = [mouse.x - player.x, mouse.y - player.y]
</snippet></ROW><ROW><id>17332833</id><snippet>norm = math.sqrt(distance[0] ** 2 + distance[1] ** 2)
direction = [distance[0] / norm, distance[1] / norm]
</snippet></ROW><ROW><id>17332833</id><snippet>[1, 1]</snippet></ROW><ROW><id>17332833</id><snippet>sqrt(2)</snippet></ROW><ROW><id>17332833</id><snippet>bullet_vector = [direction[0] * math.sqrt(2), direction[1] * math.sqrt(2)]
</snippet></ROW><ROW><id>17332833</id><snippet>[10.0, 25.0]</snippet></ROW><ROW><id>17332833</id><snippet>[30.0, 70.0]</snippet></ROW><ROW><id>17332833</id><snippet>bullet_vector</snippet></ROW><ROW><id>17332833</id><snippet>[0.5743665268941905, 1.2923246855119288]</snippet></ROW><ROW><id>17332833</id><snippet>sqrt(2)</snippet></ROW><ROW><id>17332833</id><snippet>mouse = Point(30.0, 45.0)</snippet></ROW><ROW><id>17332994</id><snippet>__new__</snippet></ROW><ROW><id>17332994</id><snippet>__init__</snippet></ROW><ROW><id>17332994</id><snippet>__new__</snippet></ROW><ROW><id>17332994</id><snippet>__init__</snippet></ROW><ROW><id>17332994</id><snippet>__new__</snippet></ROW><ROW><id>17332994</id><snippet>__new__</snippet></ROW><ROW><id>17332994</id><snippet>__new__</snippet></ROW><ROW><id>17332994</id><snippet>object.__new__</snippet></ROW><ROW><id>17333045</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as BS4 # Version 4
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as BS3 # Version 3
&gt;&gt;&gt; bs3soup = BS3("""&lt;table cellspacing="0" cellpadding="4"&gt;
... 
... stuff
... 
... &lt;/table&gt;""")
&gt;&gt;&gt; bs4soup = BS4("""&lt;table cellspacing="0" cellpadding="4"&gt;
... 
... stuff
... 
... &lt;/table&gt;""")
&gt;&gt;&gt; bs3soup.find('table', cellpadding = 4, cellspacing = 0) # None
&gt;&gt;&gt; bs4soup.find('table', cellpadding = 4, cellspacing = 0)
&lt;table cellpadding="4" cellspacing="0"&gt;

stuff

&lt;/table&gt;
</snippet></ROW><ROW><id>17333045</id><snippet>&gt;&gt;&gt; soup.find('table', cellpaddin="4", cellspacing="0") # Notice how the integers are now strings, like in the HTML.
</snippet></ROW><ROW><id>17333045</id><snippet>from bs4 import BeautifulSoup</snippet></ROW><ROW><id>17333108</id><snippet>user_input = raw_input("Enter an integer, string or float:")
input_type = type(user_input)
</snippet></ROW><ROW><id>17333108</id><snippet>raw_input</snippet></ROW><ROW><id>17333108</id><snippet>input_type</snippet></ROW><ROW><id>17333108</id><snippet>str</snippet></ROW><ROW><id>17333108</id><snippet>if input_type == "str":
    print "Your string was %s." % user_input
</snippet></ROW><ROW><id>17333108</id><snippet>input_type</snippet></ROW><ROW><id>17333108</id><snippet>str</snippet></ROW><ROW><id>17333108</id><snippet>"str"</snippet></ROW><ROW><id>17333108</id><snippet>if "str" in input_type:
</snippet></ROW><ROW><id>17333108</id><snippet>input_type</snippet></ROW><ROW><id>17333108</id><snippet>"str"</snippet></ROW><ROW><id>17333108</id><snippet>input_type = int(input_type)
</snippet></ROW><ROW><id>17333108</id><snippet>input_type</snippet></ROW><ROW><id>17333108</id><snippet>str</snippet></ROW><ROW><id>17333108</id><snippet>int</snippet></ROW><ROW><id>17333108</id><snippet>print "Your integer was %d." % user_input
</snippet></ROW><ROW><id>17333108</id><snippet>int</snippet></ROW><ROW><id>17333108</id><snippet>%s</snippet></ROW><ROW><id>17333108</id><snippet>%d</snippet></ROW><ROW><id>17333108</id><snippet>print "Your float was %d." % user_input
</snippet></ROW><ROW><id>17333108</id><snippet>%d</snippet></ROW><ROW><id>17333108</id><snippet>isinstance(user_input, str)</snippet></ROW><ROW><id>17333108</id><snippet>type(user_input) == str</snippet></ROW><ROW><id>17333108</id><snippet>try:
    int_value = int(user_input)
    print "Your integer was %d." % int_value
except ValueError:
    # it's not an int
</snippet></ROW><ROW><id>17333228</id><snippet>writerow</snippet></ROW><ROW><id>17333228</id><snippet>c.writerow([time, icount])
</snippet></ROW><ROW><id>17333228</id><snippet>'a'</snippet></ROW><ROW><id>17333228</id><snippet>w</snippet></ROW><ROW><id>17333228</id><snippet>open('trend.csv', 'a')
</snippet></ROW><ROW><id>17333501</id><snippet>Heat Index</snippet></ROW><ROW><id>17333501</id><snippet>data = []
with open('weather.txt') as weather_file:
    for line in weather_file:
        if line.startswith('Heat Index'):
            words = line.rstrip().split()
            heat_index = int(words[-4])
            report_time = int(words[-2])
            data.append([heat_index, report_time])
</snippet></ROW><ROW><id>17333501</id><snippet>import re
with open('weather.txt') as weather_file:
    data = re.findall(r'Heat Index.*?(\d+).*?(\d+).*?', weather_file.read())
data = [map(int, row) for row in data]
</snippet></ROW><ROW><id>17333509</id><snippet>listC = [ [ ('T' if b in a else b) for b in listB ] for a in listA ]
</snippet></ROW><ROW><id>17333509</id><snippet>x if cond else y</snippet></ROW><ROW><id>17333509</id><snippet>[ f(x) for x in xs ]</snippet></ROW><ROW><id>17333509</id><snippet>f</snippet></ROW><ROW><id>17333509</id><snippet>xs</snippet></ROW><ROW><id>17333739</id><snippet>&gt;&gt;&gt; df
         date Country Type  Val
0  2013-01-01     USA    x   23
1  2013-01-01     USA    y   13
2  2013-01-01      MX    x   11
3  2013-01-01      MX    y   14
4  2013-01-02     USA    x   20
5  2013-01-02     USA    y   19
6  2013-01-02      MX    x   14
7  2013-01-02      MX    y   16

&gt;&gt;&gt; df.set_index(['date', 'Country', 'Type']).unstack('Type').reset_index()
            date Country  Val
Type                        x   y
0     2013-01-01      MX   11  14
1     2013-01-01     USA   23  13
2     2013-01-02      MX   14  16
3     2013-01-02     USA   20  19
</snippet></ROW><ROW><id>17333739</id><snippet>&gt;&gt;&gt; cols = [c for c in df.columns if c not in {'Type', 'Val'}]
&gt;&gt;&gt; df2 = df.set_index(cols + ['Type']).unstack('Type')
&gt;&gt;&gt; df2
                    Val
Type                  x   y
date       Country
2013-01-01 MX        11  14
           USA       23  13
2013-01-02 MX        14  16
           USA       20  19
&gt;&gt;&gt; df2.columns = df2.columns.levels[1]
&gt;&gt;&gt; df2.columns.name = None
&gt;&gt;&gt; df2
                     x   y
date       Country
2013-01-01 MX       11  14
           USA      23  13
2013-01-02 MX       14  16
           USA      20  19
&gt;&gt;&gt; df2.reset_index()
         date Country   x   y
0  2013-01-01      MX  11  14
1  2013-01-01     USA  23  13
2  2013-01-02      MX  14  16
3  2013-01-02     USA  20  19
</snippet></ROW><ROW><id>17333819</id><snippet>CountVectorizer</snippet></ROW><ROW><id>17333819</id><snippet>ngram_range=(3, 3)</snippet></ROW><ROW><id>17333819</id><snippet>MultinomialNB</snippet></ROW><ROW><id>17334055</id><snippet>distinct_dates = list(session.query(cast(Test_Table.test_time, DATE)).distinct())
</snippet></ROW><ROW><id>17334055</id><snippet>distinct_dates = list(session.query(func.DATE(Test_Table.test_time)).distinct())
</snippet></ROW><ROW><id>17334104</id><snippet>cursor.execute("create table " + config.table + " (" + ", ".join(config.cols) + ")")
</snippet></ROW><ROW><id>17334232</id><snippet>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; deque(range(10000),8)
deque([9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999], maxlen=8)
</snippet></ROW><ROW><id>17334232</id><snippet>import csv
from collections import deque

with open('/tmp/trend.csv','rb') as fin:
    deq=deque(csv.reader(fin),8)

for sub_list in deq:
    print sub_list
</snippet></ROW><ROW><id>17334232</id><snippet>['2013-06-25 20:06', '8']
['2013-06-26 20:06', '7']
['2013-06-26 20:06', '6']
['2013-06-26 20:06', '5']
['2013-06-26 20:06', '4']
['2013-06-26 20:06', '3']
['2013-06-26 20:06', '2']
['2013-06-26 20:08', '1']
</snippet></ROW><ROW><id>17334639</id><snippet>z = []
for y in x:
    if y&gt;256:
        z.append(y-256)
    else:
        z.append(y)
</snippet></ROW><ROW><id>17334639</id><snippet>if/else</snippet></ROW><ROW><id>17334639</id><snippet>z = []
for y in x:
    z.append(y-256 if y&gt;256 else y)
</snippet></ROW><ROW><id>17334639</id><snippet>z = [y-256 if y &gt; 256 else y for y in x]
</snippet></ROW><ROW><id>17335025</id><snippet>defaultdict</snippet></ROW><ROW><id>17335025</id><snippet>from collections import defaultdict

dict1 = defaultdict(list)
dict1['x1'] = ['y1','y2']
dict1['x2'] = ['y2','y3','y4']
dict2 = defaultdict(list)
dict2['y1'] = ['x1']
dict2['y2'] = ['x1','x2']
dict2['y3'] = ['x2']
</snippet></ROW><ROW><id>17335025</id><snippet>'x3':[y2,y4]</snippet></ROW><ROW><id>17335025</id><snippet>dict1['x3'] = set(dict1['x3']+[y2,y4])
for y in dict1['x3']:
    dict2[y] = set(dict2[y]+'x3')
</snippet></ROW><ROW><id>17335025</id><snippet>set</snippet></ROW><ROW><id>17335721</id><snippet>import serial
com = serial.Serial('/dev/ttyUSB0',baudrate=115200)

print "Waiting for message"

char = com.read(1)
print char

com.close()
</snippet></ROW><ROW><id>17335935</id><snippet>date_hierarchy = 'created' 
</snippet></ROW><ROW><id>17335951</id><snippet>.parse</snippet></ROW><ROW><id>17335951</id><snippet>header=None</snippet></ROW><ROW><id>17335951</id><snippet>df = xl.parse("Sheet1", header=None)
</snippet></ROW><ROW><id>17336342</id><snippet>&gt;&gt;&gt; def group(l, size):
...     return [l[i:i+size] for i in range(0, len(l), size)]
... 
&gt;&gt;&gt; group([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</snippet></ROW><ROW><id>17336523</id><snippet>raw_input()</snippet></ROW><ROW><id>17336523</id><snippet>int</snippet></ROW><ROW><id>17336523</id><snippet>float</snippet></ROW><ROW><id>17336523</id><snippet>def distance_from_zero(n):
    try:
        n = int(n)
    except ValueError:
        try:
            n = float(n)
        except ValueError:
            print "Not a number!"
            n = float("NaN")
    return abs(n)
</snippet></ROW><ROW><id>17336523</id><snippet>1</snippet></ROW><ROW><id>17336523</id><snippet>1.0</snippet></ROW><ROW><id>17336523</id><snippet>def distance_from_zero(n):
    try:
        return abs(float(n))
    except ValueError:
        print "Not a number!"
        return float("NaN")  # or remove this line to return None
</snippet></ROW><ROW><id>17336523</id><snippet>var = raw_input("Enter number: ")
print distance_from_zero(var)
</snippet></ROW><ROW><id>17336787</id><snippet>&gt;&gt;&gt; X[np.ix_(idx,idx)]
array([[ 1,  4],
       [13, 16]])
</snippet></ROW><ROW><id>17337167</id><snippet>any</snippet></ROW><ROW><id>17337167</id><snippet>all</snippet></ROW><ROW><id>17337167</id><snippet>#Define Key Words
##################################
#System Requirements Definitions
sysReq1 = ['system requirements', '?']
sysReq2 = [['can']
          ,['handle', 'play', 'run']
          ,['netbook', 'notebook', 'pc', 'mac', 'macbook', 'laptop', 'comp', 'computer']
          ,['?']
          ]
def test(testString):
    lowerTestString = testString.lower()
    return all(i in lowerTestString for i in sysReq1) or all(any(j in lowerTestString for j in i) for i in sysReq2)
#System Requirements Response
sysReqResponse = 'PROGRESS'
##################################
testString1 = "i hate this"
#intended result for 1: nothing
testString2 = "is that real?"
#intended result for 2: nothing
testString3 = "What are the system requirements?"
#intended result for 3: 'PROGRESS'
print testString1
if test(testString1):
    print sysReqResponse
print testString2
if test(testString2):
    print sysReqResponse
print testString3
if test(testString3):
    print sysReqResponse
</snippet></ROW><ROW><id>17337167</id><snippet>sysReq1</snippet></ROW><ROW><id>17337167</id><snippet>sysReq2</snippet></ROW><ROW><id>17337167</id><snippet>any</snippet></ROW><ROW><id>17337167</id><snippet>all</snippet></ROW><ROW><id>17337167</id><snippet>lower</snippet></ROW><ROW><id>17337167</id><snippet>sysReq1</snippet></ROW><ROW><id>17337167</id><snippet>all</snippet></ROW><ROW><id>17337167</id><snippet>True</snippet></ROW><ROW><id>17337167</id><snippet>all</snippet></ROW><ROW><id>17337167</id><snippet>True</snippet></ROW><ROW><id>17337167</id><snippet>False</snippet></ROW><ROW><id>17337167</id><snippet>or.</snippet></ROW><ROW><id>17337167</id><snippet>sysReq2</snippet></ROW><ROW><id>17337167</id><snippet>any</snippet></ROW><ROW><id>17337167</id><snippet>any</snippet></ROW><ROW><id>17337167</id><snippet>True</snippet></ROW><ROW><id>17337167</id><snippet>True</snippet></ROW><ROW><id>17337167</id><snippet>True</snippet></ROW><ROW><id>17337167</id><snippet>any</snippet></ROW><ROW><id>17337167</id><snippet>all</snippet></ROW><ROW><id>17337167</id><snippet>'Play can netbook kuguekf ugifugfj ugufsgjf nugjfgjfgj?'</snippet></ROW><ROW><id>17337167</id><snippet>any</snippet></ROW><ROW><id>17337167</id><snippet>all</snippet></ROW><ROW><id>17337167</id><snippet>split</snippet></ROW><ROW><id>17337167</id><snippet>set</snippet></ROW><ROW><id>17337167</id><snippet>list</snippet></ROW><ROW><id>17337167</id><snippet>or</snippet></ROW><ROW><id>17337167</id><snippet>#Define Key Words
##################################
#System Requirements Definitions
sysReq1 = set(['system', 'requirements'])
sysReq2 = [set(['can'])
          ,set(['handle', 'play', 'run'])
          ,set(['netbook', 'notebook', 'pc', 'mac', 'macbook', 'laptop', 'comp', 'computer'])
          ]
def test(testString):
    if not testString.endswith('?'):
        return False

    lowerTestString = set(testString.rstrip('?').lower().split())
    return  lowerTestString.issuperset(sysReq1) or all(not lowerTestString.isdisjoint(i) for i in sysReq2)
#System Requirements Response
sysReqResponse = 'PROGRESS'
##################################
testString1 = "i hate this"
#intended result for 1: nothing
testString2 = "is that real?"
#intended result for 2: nothing
testString3 = "What are the system requirements?"
#intended result for 3: 'PROGRESS'
testString4 = "Can my PC handle it?"
#intended result for 4: 'PROGRESS'
print testString1
if test(testString1):
    print sysReqResponse
print testString2
if test(testString2):
    print sysReqResponse
print testString3
if test(testString3):
    print sysReqResponse
print testString4
if test(testString4):
    print sysReqResponse
</snippet></ROW><ROW><id>17337167</id><snippet>set</snippet></ROW><ROW><id>17337167</id><snippet>rstrip</snippet></ROW><ROW><id>17337402</id><snippet>text1.readlines</snippet></ROW><ROW><id>17337402</id><snippet>()</snippet></ROW><ROW><id>17337402</id><snippet>data = text1.readlines()
</snippet></ROW><ROW><id>17337402</id><snippet>text1</snippet></ROW><ROW><id>17337402</id><snippet>.readlines()</snippet></ROW><ROW><id>17337402</id><snippet>text1</snippet></ROW><ROW><id>17337402</id><snippet>.readlines()</snippet></ROW><ROW><id>17337402</id><snippet>text1</snippet></ROW><ROW><id>17337402</id><snippet>for line in text1:
     new_string = ''.join(ch for ch in line if ch.isdigit())
     print(data, '=', new_string)
</snippet></ROW><ROW><id>17337402</id><snippet>ch</snippet></ROW><ROW><id>17337402</id><snippet>.isdigit()</snippet></ROW><ROW><id>17337438</id><snippet>django.contrib.auth.views.login</snippet></ROW><ROW><id>17337438</id><snippet>django.contrib.auth.forms.AuthenticationForm</snippet></ROW><ROW><id>17337438</id><snippet>error_messages = {
    'invalid_login': _("Please enter a correct %(username)s and password. "
                       "Note that both fields may be case-sensitive."),
    'inactive': _("This account is inactive."),
}
</snippet></ROW><ROW><id>17337438</id><snippet>django.contrib.auth.forms.AuthenticationForm</snippet></ROW><ROW><id>17337438</id><snippet>error_messages</snippet></ROW><ROW><id>17337438</id><snippet>authentication_form</snippet></ROW><ROW><id>17337566</id><snippet>to_json()</snippet></ROW><ROW><id>17337566</id><snippet>json.dumps()</snippet></ROW><ROW><id>17337566</id><snippet>to_json()</snippet></ROW><ROW><id>17337566</id><snippet>dict</snippet></ROW><ROW><id>17337566</id><snippet>json.dumps()</snippet></ROW><ROW><id>17337566</id><snippet>class ArtistSearchResult(JsonAble):

    def to_json_dict(self):
        return {'name': self.name, 'descr': self.descr,
                'url': self.url, 'genres': self.genres}
</snippet></ROW><ROW><id>17337613</id><snippet>import re
a = 'lkdfhisoe78347834 (())&amp;/&amp;745  '
result = re.sub('[^0-9]','', a)

print result
&gt;&gt;&gt; '78347834745'
</snippet></ROW><ROW><id>17337717</id><snippet>'0c a8 f0 d6 02 00 00 00 00 d0 1c d1 10 d2 00 d3 00 d7 01 d4 78 20 ff'.replace(' ', '').decode('hex')
</snippet></ROW><ROW><id>17337831</id><snippet>sed -n 's/^\(\.\/create\.pl\)\s*\(.*\)\.out$/\1 \2.out\nmv complex.* \2/p' s.txt
</snippet></ROW><ROW><id>17337831</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>17337831</id><snippet>./create.pl</snippet></ROW><ROW><id>17337831</id><snippet>mv</snippet></ROW><ROW><id>17337831</id><snippet>./create.pl</snippet></ROW><ROW><id>17337831</id><snippet>sed -n 's/^\(\.\/create\.pl\)\s*\(.*\)\.out$/\1 \2.out \&amp;\&amp; mv complex.* \2/p' s.txt
</snippet></ROW><ROW><id>17337831</id><snippet>./create.pl 1eaj.out &amp;&amp; mv complex.* 1eaj
./create.pl 1ezg.out &amp;&amp; mv complex.* 1ezg
./create.pl 1f41.out &amp;&amp; mv complex.* 1f41
</snippet></ROW><ROW><id>17338365</id><snippet>x[np.array([0,1,2])]
</snippet></ROW><ROW><id>17338365</id><snippet>x[np.array([0,0],[1,1],[2,2]])]
</snippet></ROW><ROW><id>17338365</id><snippet>x[np.array([0,1,2]), np.array([0,1,2])]
</snippet></ROW><ROW><id>17338365</id><snippet>x[np.array([0,1,2]), np.array([0,1,2])] = 1
</snippet></ROW><ROW><id>17338365</id><snippet>x[np.array([0,1,2]), np.array([1,2,0])]
</snippet></ROW><ROW><id>17338420</id><snippet>importr('nlme')</snippet></ROW><ROW><id>17338420</id><snippet>corAR1()</snippet></ROW><ROW><id>17338420</id><snippet>nlme</snippet></ROW><ROW><id>17338420</id><snippet>fit = nlme.gls(fmla, cor=nlme.corAR1(value=c(0.5)))  
</snippet></ROW><ROW><id>17338620</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>17338620</id><snippet>concurrent.futures.ProcessPoolExecutor</snippet></ROW><ROW><id>17338620</id><snippet>close</snippet></ROW><ROW><id>17338620</id><snippet>del</snippet></ROW><ROW><id>17338620</id><snippet>None</snippet></ROW><ROW><id>17338620</id><snippet>destroy</snippet></ROW><ROW><id>17338620</id><snippet>PhotoImage</snippet></ROW><ROW><id>17338620</id><snippet>gc</snippet></ROW><ROW><id>17338620</id><snippet>print(gc.get_count())
gc.collect()
print(gc.get_count())
</snippet></ROW><ROW><id>17338620</id><snippet>gc.getobjects()</snippet></ROW><ROW><id>17338620</id><snippet>gc.garbage</snippet></ROW><ROW><id>17338620</id><snippet>weakref</snippet></ROW><ROW><id>17338986</id><snippet>&gt;&gt;&gt; from collections import Iterable
&gt;&gt;&gt; from itertools import chain
</snippet></ROW><ROW><id>17338986</id><snippet>&gt;&gt;&gt; list(chain.from_iterable(item if isinstance(item,Iterable) and
                    not isinstance(item, basestring) else [item] for item in lis))
[1, 2, 3, 4, 5, 6, 7, 8]
</snippet></ROW><ROW><id>17338986</id><snippet>&gt;&gt;&gt; def func(x):                                         #use `str` in py3.x 
...     if isinstance(x, Iterable) and not isinstance(x, basestring): 
...         return x
...     return [x]
... 
&gt;&gt;&gt; list(chain.from_iterable(func(x) for x in lis))
[1, 2, 3, 4, 5, 6, 7, 8]
#works for strings as well
&gt;&gt;&gt; lis = [[1, 2, 3], [4, 5, 6], 7, 8, "foobar"]
&gt;&gt;&gt; list(chain.from_iterable(func(x) for x in lis))                                                                
[1, 2, 3, 4, 5, 6, 7, 8, 'foobar']
</snippet></ROW><ROW><id>17338986</id><snippet>itertools.chain</snippet></ROW><ROW><id>17338986</id><snippet>&gt;&gt;&gt; [ele for item in (func(x) for x in lis) for ele in item]
[1, 2, 3, 4, 5, 6, 7, 8, 'foobar']
</snippet></ROW><ROW><id>17339457</id><snippet>for option in xrange(num_options):
    for criteria in xrange(num_criteria):
        # read input
        Matrix[option][criteria] = score
</snippet></ROW><ROW><id>17339457</id><snippet>[0]*num_options
</snippet></ROW><ROW><id>17339608</id><snippet>&gt;&gt;&gt; ["{} ({})".format(x,y) for x,y in zip(Countries, Base)]
['Germany (2005)', 'UK (1298)', 'France (1222)', 'Italy (3990)']
</snippet></ROW><ROW><id>17339608</id><snippet>str.join</snippet></ROW><ROW><id>17339608</id><snippet>&gt;&gt;&gt; print ", ".join('"{} ({})"'.format(x,y) for x,y in zip(Countries, Base))
"Germany (2005)", "UK (1298)", "France (1222)", "Italy (3990)"
</snippet></ROW><ROW><id>17339608</id><snippet>itertools.izip</snippet></ROW><ROW><id>17339886</id><snippet>url(r'^$', 'avicenna.home.views', name='home'),
</snippet></ROW><ROW><id>17339886</id><snippet>url(r'^$', 'home.views.home', name='home'),
</snippet></ROW><ROW><id>17339886</id><snippet>avicenna.home.views</snippet></ROW><ROW><id>17339886</id><snippet>urlpatterns = patterns('home.views',
  url(r'^$', 'home', name='home'),
  url(r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>17339886</id><snippet>manage.py</snippet></ROW><ROW><id>17339886</id><snippet>avicenna</snippet></ROW><ROW><id>17339886</id><snippet>avicenna.home...</snippet></ROW><ROW><id>17339886</id><snippet>home</snippet></ROW><ROW><id>17339886</id><snippet>home</snippet></ROW><ROW><id>17339886</id><snippet>home</snippet></ROW><ROW><id>17339981</id><snippet>list_of_objects = [Obj1, Obj2, ... ObjN]
" and ".join([obj.name for obj in list_of_objects])
</snippet></ROW><ROW><id>17340354</id><snippet>&gt;&gt;&gt; lis = [[(2L,)], [(3L,)]]
&gt;&gt;&gt; [ y[0] for x in lis for y in x]
[2L, 3L]
</snippet></ROW><ROW><id>17340354</id><snippet>&gt;&gt;&gt; [z for x in lis for y in x for z in y]
[2L, 3L]
</snippet></ROW><ROW><id>17340354</id><snippet>from collections import Iterable
def flatten(collection):
  for element in collection:
    if isinstance(element, Iterable) and not isinstance(element, basestring):
      for x in flatten(element):
        yield x
    else:
      yield element
&gt;&gt;&gt; list(flatten(lis))
[2L, 3L]
&gt;&gt;&gt; lis = [[(2L,)], [(3L,(4,(5,)))]]
&gt;&gt;&gt; list(flatten(lis))
[2L, 3L, 4, 5]
</snippet></ROW><ROW><id>17340682</id><snippet>SRate</snippet></ROW><ROW><id>17340682</id><snippet>for i,(x,y,z) in enumerate(zip(analysisValues, \
                               analysisValues[SRate::SRate], \
                               analysisValues[2 * SRate::SRate])):
</snippet></ROW><ROW><id>17340891</id><snippet>{iface}</snippet></ROW><ROW><id>17340891</id><snippet>iface</snippet></ROW><ROW><id>17340891</id><snippet>iface</snippet></ROW><ROW><id>17340891</id><snippet>iface</snippet></ROW><ROW><id>17340891</id><snippet>t.substitute(iface=i)</snippet></ROW><ROW><id>17340891</id><snippet>string.Template</snippet></ROW><ROW><id>17340891</id><snippet>$iface</snippet></ROW><ROW><id>17340891</id><snippet>${iface}</snippet></ROW><ROW><id>17340891</id><snippet>$iface</snippet></ROW><ROW><id>17340891</id><snippet>str.format</snippet></ROW><ROW><id>17341041</id><snippet>#Just an example how the dictionary may look like
myDict = {'age': ['12'], 'address': ['34 Main Street, 212 First Avenue'],
      'firstName': ['Alan', 'Mary-Ann'], 'lastName': ['Stone', 'Lee']}

def search(values, searchFor):
    for k in values:
        for v in values[k]:
            if searchFor in v:
                return k
    return None

#Checking if string 'Mary' exists in dictionary value
print search(myDict, 'Mary') #prints firstName
</snippet></ROW><ROW><id>17341388</id><snippet>contents = f.read()
print contents                 # prints '22 test 333'
print data.findall(contents)   # outputs ['22'] 
</snippet></ROW><ROW><id>17341388</id><snippet>print f.read()                 # prints '22 test 333'
f.seek(0)
print data.findall(f.read())   # outputs ['22'] 
</snippet></ROW><ROW><id>17341725</id><snippet>HTMLParser.HTMLParser()</snippet></ROW><ROW><id>17341725</id><snippet>&gt;&gt;&gt; from HTMLParser import HTMLParser
&gt;&gt;&gt; parser = HTMLParser()
&gt;&gt;&gt; parser.unescape('опа')
u'\u043e\u043f\u0430'
&gt;&gt;&gt; print parser.unescape('опа')
опа
</snippet></ROW><ROW><id>17341753</id><snippet>__init__.py</snippet></ROW><ROW><id>17341851</id><snippet>getopt</snippet></ROW><ROW><id>17341851</id><snippet>parser = argparse.ArgumentParser(add_help=True)
parser.add_argument('infile', nargs=1, help='input file name')
parser.add_argument('outfile', nargs='?', help='output file name')
</snippet></ROW><ROW><id>17341851</id><snippet>outfile</snippet></ROW><ROW><id>17341851</id><snippet>parser.add_argument('outfile', nargs='?', help='output file name', default='out.txt')
</snippet></ROW><ROW><id>17341851</id><snippet>getopt</snippet></ROW><ROW><id>17341851</id><snippet>argparse</snippet></ROW><ROW><id>17341851</id><snippet>getopt</snippet></ROW><ROW><id>17341851</id><snippet>GNU mode</snippet></ROW><ROW><id>17341851</id><snippet>gnu_getopt</snippet></ROW><ROW><id>17341851</id><snippet>import getopt
import sys

output_name = 'out.txt'
input_name = ''

print 'ARGV      :', sys.argv[1:]

options, remainder = getopt.gnu_getopt(sys.argv[1:], 'o:', ['input-path',
                                                           'output-name=',
                                                          ])
print 'OPTIONS   :', options

for opt, arg in options:
    if opt in ('-o', '--output-name'):
        output_name = arg
    else: 
        pass

# Get input name by yourself...
input_name = remainder[0]

print 'OUTPUTNAME  :', output_name
print 'REMAINING   :', remainder
print 'INPUTNAME   :', input_name
</snippet></ROW><ROW><id>17341851</id><snippet>python parse_flv.py input -o output
</snippet></ROW><ROW><id>17341851</id><snippet>python parse_flv.py -o output input
</snippet></ROW><ROW><id>17341851</id><snippet>ARGV      : ['-o', 'output', 'input']
OPTIONS   : [('-o', 'output')]
OUTPUTNAME  : output
REMAINING   : ['input']
INPUTNAME   : input
</snippet></ROW><ROW><id>17341851</id><snippet>remaining</snippet></ROW><ROW><id>17341936</id><snippet>import re
data = open('database.txt', 'r')
fileout = open("fileout.txt","w+")

with open('listtosearch.txt', 'r') as f:
    keywords = [line.strip() for line in f]

# one big pattern can take time to match, so you have a list of them
patterns = [re.compile(keyword) for keyword in keywords]

for line in data:

    for pattern in patterns:
        if not pattern.search(line):
            break
    else:
        fileout.write(line)
</snippet></ROW><ROW><id>17341936</id><snippet>"Name jhon" (1995)
"Name foo" (2000)
"Name fake" (3000)
"Name george" (2000)
"Name george" (2500)
</snippet></ROW><ROW><id>17341936</id><snippet>"Name (george)"
\(2000\)
</snippet></ROW><ROW><id>17341936</id><snippet>"Name george" (2000)
</snippet></ROW><ROW><id>17342080</id><snippet>count</snippet></ROW><ROW><id>17342080</id><snippet>lenRecur</snippet></ROW><ROW><id>17342080</id><snippet>nonlocal</snippet></ROW><ROW><id>17342080</id><snippet>count</snippet></ROW><ROW><id>17342080</id><snippet>def lenRecur(s): 

    count = [0]

    # ...

    def leng(s):
        if len(s)==0:
            return count[0]
        else:
            count[0] += 1
            return lenIter(s[1:])
</snippet></ROW><ROW><id>17342080</id><snippet>count</snippet></ROW><ROW><id>17342080</id><snippet>count</snippet></ROW><ROW><id>17342080</id><snippet>count</snippet></ROW><ROW><id>17342080</id><snippet>def lenRecur(s): 

    # ...

    def leng(s):
        if len(s)==0:
            return leng.count
        else:
            leng.count += 1
            return lenIter(s[1:])

    leng.count = 0
</snippet></ROW><ROW><id>17342080</id><snippet>count</snippet></ROW><ROW><id>17342080</id><snippet>lenRecur()</snippet></ROW><ROW><id>17342080</id><snippet>lenRecur()</snippet></ROW><ROW><id>17342080</id><snippet>def lenRecur(s):
    def characters_only(s):
        return ''.join([c for c in s if c.isalpha()])

    def len_recursive(s):
        if not s:
            return 0
        return 1 + len_recursive(s[1:])

    return len_recursive(characters_only(s))
</snippet></ROW><ROW><id>17342080</id><snippet>&gt;&gt;&gt; def lenRecur(s):
...     def characters_only(s):
...         return ''.join([c for c in s if c.isalpha()])
...     def len_recursive(s):
...         if not s:
...             return 0
...         return 1 + len_recursive(s[1:])
...     return len_recursive(characters_only(s))
... 
&gt;&gt;&gt; lenRecur('The Quick Brown Fox')
16
</snippet></ROW><ROW><id>17342223</id><snippet>DATA</snippet></ROW><ROW><id>17342223</id><snippet>LABELS</snippet></ROW><ROW><id>17342223</id><snippet>O(1)</snippet></ROW><ROW><id>17342223</id><snippet>&gt;&gt;&gt; DATA = [ [2,5,8], [2,4,3], [5,5,7], [9,8,4] ]
&gt;&gt;&gt; LABELS = [ "AAA", "BBB", "AAA", "CCC" ]
&gt;&gt;&gt; get_labels = {tuple(x):y for x,y in zip(DATA,LABELS)} 
&gt;&gt;&gt; get_labels[5,5,7]
'AAA'
&gt;&gt;&gt; get_labels[9,8,4]
'CCC'
</snippet></ROW><ROW><id>17342484</id><snippet>web.redirect</snippet></ROW><ROW><id>17342484</id><snippet>Redirect</snippet></ROW><ROW><id>17342484</id><snippet>Exception</snippet></ROW><ROW><id>17342484</id><snippet>web.redirect</snippet></ROW><ROW><id>17342614</id><snippet>while flag:
    # do code
</snippet></ROW><ROW><id>17342614</id><snippet>from threading import Thread
from Queue import Queue
import sys
import time

class Performer():
    def __init__(self):
        self.active = False
        self.queue = Queue()

    def action(self, line):
        pass # your code should be here

    def operate(self, text_file, threads=5):
        with open(text_file) as f:
            for line in f:
                self.queue.put(line)

        self.active = True
        thread_pool = []
        for i in range(threads):
            t = Thread(target=self.__thread, name=('worker-%d' % i))
            t.daemon = True
            t.start()
            thread_pool.append(t)

        while self.active:
            try:
                if self.queue.empty():
                    break
            except KeyboardInterrupt:
                self.active = False
                sys.exit('user + keyboard = byebye')
            else:
                time.sleep(1)

    def __thread(self):
        while self.active:
            if not self.queue.empty():
                try:
                    self.action(self.queue.get())
                except Exception:
                    pass # do something here
</snippet></ROW><ROW><id>17343093</id><snippet>[servers] 
server_list = localhost:1111, localhost:2222, localhost:3333, someserver:2222, someserver:3333
</snippet></ROW><ROW><id>17343093</id><snippet>from ConfigParser import ConfigParser

cp = ConfigParser()
cp.read('derp.config')
print cp.items('servers')[0][1].split(', ')
</snippet></ROW><ROW><id>17343093</id><snippet>['localhost:1111', 'localhost:2222', 'localhost:3333', 'someserver:2222', 'someserver:3333']
</snippet></ROW><ROW><id>17343178</id><snippet>&gt;&gt;&gt; common_id = [i for i in a_id if i in b_id]
&gt;&gt;&gt; common_id
[1, 4, 9]
&gt;&gt;&gt; common_a_val = [a_val[a_id.index(i)] for i in common_id]
&gt;&gt;&gt; common_a_val
[13.0, 5.0, 32.0]
&gt;&gt;&gt; common_b_val = [b_val[b_id.index(i)] for i in common_id]
&gt;&gt;&gt; common_b_val
[12.0, 1.0, 19.0]
</snippet></ROW><ROW><id>17343339</id><snippet>&lt;img src="static.example.com/jinja-templating"/&gt;
</snippet></ROW><ROW><id>17343339</id><snippet>&lt;img src="static.example.com/&lt;a href='/glossary?word=jinja'&gt;jinja&lt;/a&gt;-templating"/&gt;
</snippet></ROW><ROW><id>17343339</id><snippet>import re

html = '&lt;div id="term"&gt;&lt;span style="term:10px"&gt;term&lt;/span&gt;&lt;img src="static.example.com/term"/&gt;&lt;/div&gt;&lt;div&gt;the technology term is amazing&lt;/div&gt;'
glossaried = re.sub(r'&gt;([^&lt;&gt;]*)term([^&lt;&gt;]*)&lt;',r'&gt;\1&lt;a href="/glossary?word=term"&gt;term&lt;/a&gt;\2&lt;', html)
print glossaried
</snippet></ROW><ROW><id>17343339</id><snippet>'&lt;div id="term"&gt;&lt;span style="term:10px"&gt;&lt;a href="/glossary?word=term"&gt;term&lt;/a&gt;&lt;/span&gt;&lt;img src="static.example.com/term"/&gt;&lt;/div&gt;&lt;div&gt;the technology &lt;a href="/glossary?word=term"&gt;term&lt;/a&gt; is amazing&lt;/div&gt;'
</snippet></ROW><ROW><id>17343368</id><snippet>María</snippet></ROW><ROW><id>17343368</id><snippet>'Mar\xc3\xada'</snippet></ROW><ROW><id>17343599</id><snippet>sys.stdout</snippet></ROW><ROW><id>17343599</id><snippet>import sys

class Null:
    def write(self, text):
        pass

    def flush(self):
        pass

print "One"            # This gets output OK
old_stdout = sys.stdout
sys.stdout = Null()
print "Two"            # This disappears
sys.stdout = old_stdout
print "Three"          # Output, back to normal
</snippet></ROW><ROW><id>17343760</id><snippet>print</snippet></ROW><ROW><id>17343760</id><snippet>def test_print():
    import time
    import sys
    for i in range(5):
        time.sleep(2)
        print i,  time.time()
        sys.stdout.flush()
</snippet></ROW><ROW><id>17343933</id><snippet>        # else check next line for 'Call Trace:'
        # check next lines for mainName and get the linenumber
        # callSomething(linenumber, error)
</snippet></ROW><ROW><id>17343933</id><snippet>    match = stackframe_re.match(fullline)
    if match and error: # if error is defined from earlier when you matched ERROR_RE
        path, line = match.group('path'), match.group('line')
        if path.endsWith(mainName):
            callSomething(line, error)
            error = None # don't report this error again if you see main again
</snippet></ROW><ROW><id>17343933</id><snippet>error = None</snippet></ROW><ROW><id>17343933</id><snippet>error = None</snippet></ROW><ROW><id>17343933</id><snippet>callSomething</snippet></ROW><ROW><id>17343933</id><snippet>    &lt;C:\Includes\Library2.inc:789&gt;
</snippet></ROW><ROW><id>17344015</id><snippet>attrdict["test%s"%i]= types.MethodType(lambda self: i)
</snippet></ROW><ROW><id>17344015</id><snippet>lambda</snippet></ROW><ROW><id>17344015</id><snippet>lambda</snippet></ROW><ROW><id>17344015</id><snippet>i</snippet></ROW><ROW><id>17344015</id><snippet>i</snippet></ROW><ROW><id>17344015</id><snippet>lambda</snippet></ROW><ROW><id>17344015</id><snippet>i</snippet></ROW><ROW><id>17344015</id><snippet>2</snippet></ROW><ROW><id>17344015</id><snippet>for i in range(3)</snippet></ROW><ROW><id>17344015</id><snippet>i</snippet></ROW><ROW><id>17344015</id><snippet>lambda</snippet></ROW><ROW><id>17344015</id><snippet>attrdict["test%s"%i]= types.MethodType(lambda self, i=i: i)
</snippet></ROW><ROW><id>17344036</id><snippet>reset_index</snippet></ROW><ROW><id>17344036</id><snippet>In [130]: df2 = df.set_index('month_year')

In [131]: df2 = df2.sort_index()

In [132]: df2
Out[132]: 
            customer_id   sales
month_year                     
2011-07              12   33.14
2011-11              12  182.06
2012-01              12   71.24
2012-03              12  155.32
2012-05              12    2.58

In [133]: df2.reindex(pd.period_range(df2.index[0],df2.index[-1],freq='M'))
Out[133]: 
         customer_id   sales
2011-07           12   33.14
2011-08          NaN     NaN
2011-09          NaN     NaN
2011-10          NaN     NaN
2011-11           12  182.06
2011-12          NaN     NaN
2012-01           12   71.24
2012-02          NaN     NaN
2012-03           12  155.32
2012-04          NaN     NaN
2012-05           12    2.58

In [135]: df2['customer_id'] = 12

In [136]: df2.fillna(0.0)
Out[136]: 
         customer_id   sales
2011-07           12   33.14
2011-08           12    0.00
2011-09           12    0.00
2011-10           12    0.00
2011-11           12  182.06
2011-12           12    0.00
2012-01           12   71.24
2012-02           12    0.00
2012-03           12  155.32
2012-04           12    0.00
2012-05           12    2.58
</snippet></ROW><ROW><id>17344371</id><snippet>__index__(self)</snippet></ROW><ROW><id>17344371</id><snippet>int</snippet></ROW><ROW><id>17344371</id><snippet>long</snippet></ROW><ROW><id>17344371</id><snippet>field</snippet></ROW><ROW><id>17344374</id><snippet>time.sleep</snippet></ROW><ROW><id>17344374</id><snippet>import time
...
    while self.track:
        time.sleep(1)
</snippet></ROW><ROW><id>17344374</id><snippet>...
while self.track:
    start = time.time()
    # Do things here
    sleep_time = start-time.time() + 1
    if sleep_time &gt; 0:
        time.sleep(sleep_time)
</snippet></ROW><ROW><id>17344374</id><snippet>self.track</snippet></ROW><ROW><id>17344374</id><snippet>True</snippet></ROW><ROW><id>17344374</id><snippet>class A(object):

    def __init__(self, player):
        self._track = False
        self.player = player
        self._track_condition = threading.Condition()
    @property
    def track(self):
        return self._track
    @track.setter(self, value):
        if value:
            self._track_condition.acquire()
            self._track_condition.notify_all()
            self._track_condition.release()
        self._track = value
   def baz(self):
       self._track_condition.acquire()
       self._track_condition.wait()
       self._track_condition.release()
       while self.track:
           # Do stuff
   def spam(self):
       player_thread = threading.Thread(target=self.baz)
       player_thread.start()
</snippet></ROW><ROW><id>17344374</id><snippet>threading</snippet></ROW><ROW><id>17344374</id><snippet>threading.Thread</snippet></ROW><ROW><id>17344374</id><snippet>multiprocessing</snippet></ROW><ROW><id>17344978</id><snippet>audio</snippet></ROW><ROW><id>17344978</id><snippet>EasyMP3</snippet></ROW><ROW><id>17344978</id><snippet>from mutagen.mp3 import EasyMP3 as MP3
audio = MP3("example.mp3")
audio["title"] = "An example"
audio.pprint()
</snippet></ROW><ROW><id>17344978</id><snippet>from mutagen.easyid3 import EasyID3
print '\n'.join(EasyID3.valid_keys.keys())
</snippet></ROW><ROW><id>17344978</id><snippet>ID3v2.3</snippet></ROW><ROW><id>17344978</id><snippet>TPE2</snippet></ROW><ROW><id>17344978</id><snippet>import mutagen.id3 as id3
import mutagen.mp3 as mp3

audio = mp3.MP3("example.mp3")
audio.add(id3.TPE2(encoding=3, text=u"An example"))
audio.save()
</snippet></ROW><ROW><id>17344978</id><snippet>encoding</snippet></ROW><ROW><id>17345175</id><snippet>if-else</snippet></ROW><ROW><id>17345175</id><snippet>&gt;&gt;&gt; c = [x/y if y else 0 for x,y in zip(a,b)]
</snippet></ROW><ROW><id>17345218</id><snippet>In [151]: df = DataFrame(randn(10,3),columns=list('ABC'))

In [152]: df
Out[152]: 
          A         B         C
0 -0.071947 -0.243518 -0.188782
1 -1.028449  0.525397  1.629097
2  0.302620 -0.530769 -2.039222
3  0.484875 -0.840589 -1.006550
4  0.915714  0.631991  0.044289
5 -1.444943 -0.603629  0.552810
6 -0.113523  0.242165  1.309373
7 -0.676176  2.827214  0.223679
8 -0.467043  0.324336 -0.704214
9  0.329897 -0.121696  1.810813

In [153]: df[['A','B']].apply(sum)
Out[153]: 
A   -1.768975
B    2.210902
dtype: float64

In [154]: df[['A','B']].apply(lambda x: x.sum())
Out[154]: 
A   -1.768975
B    2.210902
dtype: float64
</snippet></ROW><ROW><id>17345218</id><snippet>In [21]: df = DataFrame(dict(A = 'foo', B = 'bar', C = 'bah'),index=range(5))

In [22]: df.loc[[3,4],'C'] = 'bah2'

In [23]: df
Out[23]: 
     A    B     C
0  foo  bar   bah
1  foo  bar   bah
2  foo  bar   bah
3  foo  bar  bah2
4  foo  bar  bah2

In [24]: df.apply(lambda x: x['A'] + x['B'] if x['C'] == 'bah' else x['A'] + x['C'],axis=1)
Out[24]: 
0     foobar
1     foobar
2     foobar
3    foobah2
4    foobah2
dtype: object
</snippet></ROW><ROW><id>17345394</id><snippet>all_data = []
all_topics = Topic.objects.all()
categorie_posts = Post.objects.filter(categorie=categories)
for each_topic in all_topics:
    current_data = {}
    current_posts = []
    current_posts.append(categorie_posts.filter(Q(topic=each_topic)) 
    # append more posts based on query here like Q(categorie__topic = each_topic) or something
    current_data['topic']=each_topic
    current_data['posts'] = current_posts
    all_data.append(current_data)
</snippet></ROW><ROW><id>17345394</id><snippet> {% for each_item in all_data %}
     {% each_item.topic %}
     {% for each_post in each_item.posts %}
         {% each_post.title %}
         {% each_post.content %}
     {% endfor %}
 {% endfor %}
</snippet></ROW><ROW><id>17345604</id><snippet>from gimpfu import*</snippet></ROW><ROW><id>17345604</id><snippet>*</snippet></ROW><ROW><id>17345604</id><snippet>~/.gimp-2.8/plug-ins/</snippet></ROW><ROW><id>17345604</id><snippet>/usr/lib[64]/gimp/2.0/plug-ins</snippet></ROW><ROW><id>17345604</id><snippet>src</snippet></ROW><ROW><id>17345665</id><snippet>import logging
from mock import Mock, patch

my_mock = Mock()
my_mock.id = 'i-12341234'

with patch('logging.PlaceHolder', new=my_mock) as mockobj:
    mockobj.return_value = mockobj # &lt;-- added this line.
    print mockobj.id
    newobj = logging.PlaceHolder(None)
    print newobj.id
</snippet></ROW><ROW><id>17345665</id><snippet>import logging
from mock import Mock, patch

my_mock = Mock()
my_mock.id = 'i-12341234'
my_mock.return_value = my_mock # &lt;---

with patch('logging.PlaceHolder', new=my_mock) as mockobj:
    assert mockobj.id == 'i-12341234'
    newobj = logging.PlaceHolder(None)
    assert newobj.id == 'i-12341234'
</snippet></ROW><ROW><id>17345740</id><snippet>dict(kwargs, **morekwargs)</snippet></ROW><ROW><id>17345740</id><snippet>&gt;&gt;&gt; d = {'foo':'bar'}
&gt;&gt;&gt; kwargs = {'bar':'baz'}
&gt;&gt;&gt; dict(d,**kwargs)
{'foo': 'bar', 'bar': 'baz'}
</snippet></ROW><ROW><id>17345740</id><snippet>curry</snippet></ROW><ROW><id>17345740</id><snippet>_curried</snippet></ROW><ROW><id>17345740</id><snippet>_curried_func</snippet></ROW><ROW><id>17345768</id><snippet>driver.execute_script()
</snippet></ROW><ROW><id>17345768</id><snippet>element = driver.find_element_by_xpath("//div[@class='WB_feed_type SW_fun S_line2']") #which is created by js
wbHTML = driver.execute_script("return arguments[0].innerHTML;", element)
</snippet></ROW><ROW><id>17345897</id><snippet>import logging
import Queue
import threading
logger = logging.getLogger(__name__)
N = 100
sentinel = object()

def worker(jobs):
    name = threading.current_thread().name
    for task in iter(jobs.get, sentinel):
        logger.info(task)
    logger.info('Done')


def main():
    logging.basicConfig(level=logging.DEBUG,
                            format='[%(asctime)s %(threadName)s] %(message)s',
                            datefmt='%H:%M:%S')

    jobs = Queue.Queue()
    # put tasks in the jobs Queue
    for task in range(N):
        jobs.put(task)

    threads = [threading.Thread(target=worker, args=(jobs,))
               for thread_number in range (5)]
    for t in threads:
        t.start()
        jobs.put(sentinel)     # Send a sentinel to terminate worker
    for t in threads:
        t.join()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17346063</id><snippet>len=*</snippet></ROW><ROW><id>17346063</id><snippet>f2py</snippet></ROW><ROW><id>17346063</id><snippet>out</snippet></ROW><ROW><id>17346063</id><snippet>len=3</snippet></ROW><ROW><id>17346063</id><snippet>      !f2py character(len=256),intent(out):: chid
      character(len=*),intent(out):: chid          ! char. identifier
</snippet></ROW><ROW><id>17346090</id><snippet>mode</snippet></ROW><ROW><id>17346090</id><snippet>.to_csv</snippet></ROW><ROW><id>17346090</id><snippet>In [5]: df = DataFrame({'A': ['foo', 'foo', 'foo', 'bar', 'bar'],
                'B': ['one', 'two', 'three', 'one', 'two'],
                'C': np.random.randn(5)})


In [6]: with open('test.txt', 'w') as f:
    ...:     f.write('Testing\n')
    ...:     


In [7]: !cat 'test.txt'
Testing


In [11]: df.to_csv('test.txt', mode='a')

In [12]: !cat 'test.txt'
Testing
,A,B,C
0,foo,one,0.42364430570326805
1,foo,two,1.1992467813307852
2,foo,three,0.4302171615562164
3,bar,one,0.6837252733791036
4,bar,two,0.16800783901724345
</snippet></ROW><ROW><id>17346193</id><snippet>class A:
    def __init__(self,value):
        self.value=value
        self.cache = {}
    def function(self,a):
        """function returns a+1 and caches the value for future calls."""

        # Add a default value of empty string to avoid key errors,
        # check if we already have the value cached
        if self.cache.get(a,''):
            return self.cache[a]
        else:
            result = a + 1
            self.cache[a] = result
            return result
</snippet></ROW><ROW><id>17346193</id><snippet>class A:
    def __init__(self,value):
        self.value=value

    def function(self,a):
        """function returns a+1 and caches the value for future calls."""
        # Add a default value of empty string to avoid key errors,
        # check if we already have the value cached
        if self.function.cache.get(a,''):
            return self.function.cache[a]
        else:
            result = a + 1
            self.function.cache[a] = result
            return result
    function.cache = {}


a=A(12)
print(a.function(12))
print(a.function.cache)
</snippet></ROW><ROW><id>17346348</id><snippet>.format()</snippet></ROW><ROW><id>17346348</id><snippet>def load(filename):
    ngrams = {}
    for line in open(filename):
        if line[0] == '\\':
            pass  # just ignore all these lines
        else:
            first, rest = line.split(None, 1)
            middle, last = rest.rsplit(None, 1)
            ngrams[middle] = first, last
    return ngrams

ngrams = load("ngrams.txt")
</snippet></ROW><ROW><id>17346348</id><snippet>int(first), int(last)</snippet></ROW><ROW><id>17346348</id><snippet>first, last</snippet></ROW><ROW><id>17346491</id><snippet>first_with_id_or_none = \
    next((value for value in dictionary['items'] if value['id'] == 1), None)
</snippet></ROW><ROW><id>17346582</id><snippet>float('-inf')</snippet></ROW><ROW><id>17346582</id><snippet>max_value = float('-inf')
</snippet></ROW><ROW><id>17346582</id><snippet>float('inf')</snippet></ROW><ROW><id>17346582</id><snippet>min_value = float('inf')
response = input("Please enter a number. If ready to calculate, type 'done'\n")
while response != 'done':
    if int(response) &lt; min_value:
        min_value = int(response)
    response = input("Please enter a number. If ready to calculate, type 'done'\n")

print(min_value)
</snippet></ROW><ROW><id>17346661</id><snippet>save()</snippet></ROW><ROW><id>17346661</id><snippet>pending()</snippet></ROW><ROW><id>17346661</id><snippet>class Job(models.Model):
    accepted = ...
    reject = ...
    pending = ... (Boolean Fields)

    def save(self, *args, **kwargs):
        self.pending = (not self.accepted) and (not self.rejected)
        super(Job, self).save(*args, **kwargs) # Call the "real" save() method.
</snippet></ROW><ROW><id>17346992</id><snippet>struct</snippet></ROW><ROW><id>17346992</id><snippet>import struct
year, month, day = struct.unpack('&gt;HBB', "\x07\xdb\x0c\x01")
</snippet></ROW><ROW><id>17346992</id><snippet>&gt;HBB</snippet></ROW><ROW><id>17346992</id><snippet>struct</snippet></ROW><ROW><id>17346992</id><snippet>datetime.date()</snippet></ROW><ROW><id>17346992</id><snippet>from datetime import date
import struct

somedate = date(*struct.unpack('&gt;HBB', "\x07\xdb\x0c\x01"))
</snippet></ROW><ROW><id>17346992</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; date(*struct.unpack('&gt;HBB', "\x07\xdb\x0c\x01"))
datetime.date(2011, 12, 1)
</snippet></ROW><ROW><id>17346992</id><snippet>&gt;&gt;&gt; '{2:02d}-{1:02d}-{0}'.format(*struct.unpack('&gt;HBB', "\x07\xdb\x0c\x01"))
'01-12-2011'
</snippet></ROW><ROW><id>17347126</id><snippet>j</snippet></ROW><ROW><id>17347126</id><snippet>int</snippet></ROW><ROW><id>17347126</id><snippet>"L"</snippet></ROW><ROW><id>17347126</id><snippet>item = 'bytes_recv=3829381938203L'</snippet></ROW><ROW><id>17347126</id><snippet>j</snippet></ROW><ROW><id>17347126</id><snippet>int</snippet></ROW><ROW><id>17347126</id><snippet>item  = 'bytes_recv=1302'</snippet></ROW><ROW><id>17347126</id><snippet>long()</snippet></ROW><ROW><id>17347126</id><snippet>int()</snippet></ROW><ROW><id>17347126</id><snippet>"L"</snippet></ROW><ROW><id>17347126</id><snippet>if</snippet></ROW><ROW><id>17347126</id><snippet>j = long(j[0:len(j)])
</snippet></ROW><ROW><id>17347226</id><snippet>sys.path.insert(0, path_to_your_module_dir)
</snippet></ROW><ROW><id>17347226</id><snippet>from module import function
</snippet></ROW><ROW><id>17347274</id><snippet>./foo.py</snippet></ROW><ROW><id>17347274</id><snippet>python foo.py</snippet></ROW><ROW><id>17347274</id><snippet>#!</snippet></ROW><ROW><id>17347274</id><snippet>head sys</snippet></ROW><ROW><id>17347274</id><snippet>man import</snippet></ROW><ROW><id>17347274</id><snippet>import</snippet></ROW><ROW><id>17347274</id><snippet>/usr/bin/import</snippet></ROW><ROW><id>17347274</id><snippet>import sys
import random
import os
import time
import signal

def main():
    sys.stdout.write('foo\n')

if (__name__ == "__main__"):
    main()
</snippet></ROW><ROW><id>17347274</id><snippet>./foo.py 
./foo.py: line 8: syntax error near unexpected token `('
./foo.py: line 8: `def main():'
</snippet></ROW><ROW><id>17347274</id><snippet>$ ls
total 25096
-rwxr-xr-x 1 doug doug     146 2013-06-27 10:31 foo.py
-rw-r--r-- 1 doug doug 7291759 2013-06-27 10:12 os
-rw-r--r-- 1 doug doug 7291763 2013-06-27 10:12 random
-rw-r--r-- 1 doug doug 1903418 2013-06-27 10:32 signal
-rw-r--r-- 1 doug doug 1903415 2013-06-27 10:32 sys
-rw-r--r-- 1 doug doug 7291761 2013-06-27 10:12 time
</snippet></ROW><ROW><id>17347274</id><snippet>$ head sys
%!PS-Adobe-3.0
%%Creator: (ImageMagick)
%%Title: (sys)
%%CreationDate: (2013-06-27T10:32:20-05:00)
%%BoundingBox: 0 0 663 471
%%HiResBoundingBox: 0 0 663 471
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Orientation: Portrait
%%PageOrder: Ascend
</snippet></ROW><ROW><id>17347455</id><snippet>ServerProxy.system.listMethods()</snippet></ROW><ROW><id>17347455</id><snippet>&gt;&gt;&gt; s = xmlrpclib.ServerProxy("http://192.168.1.72:8888")
&gt;&gt;&gt; s.system.listMethods()
</snippet></ROW><ROW><id>17347477</id><snippet>map</snippet></ROW><ROW><id>17347477</id><snippet>set</snippet></ROW><ROW><id>17347477</id><snippet>multimap</snippet></ROW><ROW><id>17347477</id><snippet>multiset</snippet></ROW><ROW><id>17347477</id><snippet>lower_bound</snippet></ROW><ROW><id>17347631</id><snippet>%f</snippet></ROW><ROW><id>17347631</id><snippet>%g</snippet></ROW><ROW><id>17347631</id><snippet>&gt;&gt;&gt; '%08.3f'%(8.8)
'0008.800'
</snippet></ROW><ROW><id>17347631</id><snippet>&gt;&gt;&gt; "{:08.3f}".format(8.8)
'0008.800'
</snippet></ROW><ROW><id>17347743</id><snippet>d = {}
for obj in object_list:
    d[obj.thing] = obj
desired_list = d.values()
</snippet></ROW><ROW><id>17347794</id><snippet>&gt;&gt;&gt; a = '‵‷ㄱㄠ″㜱ㄠ‹㌲㈠‹ㄳ㌠‷ㄴ㐠'
&gt;&gt;&gt; a.decode('UTF-8').encode('UTF-16LE')
'5 7 11 13 17 19 23 29 31 37 41 4'
</snippet></ROW><ROW><id>17347794</id><snippet>txt.write(u'\uFEFF'.encode('UTF-8'))
</snippet></ROW><ROW><id>17347958</id><snippet>body = json.dumps(...)

print "Status: 200 OK"
print "Content-Type: application/json"
print "Length:", len(body)
print ""
print body
</snippet></ROW><ROW><id>17348001</id><snippet>sprites</snippet></ROW><ROW><id>17348001</id><snippet>frames</snippet></ROW><ROW><id>17348001</id><snippet>slef</snippet></ROW><ROW><id>17348001</id><snippet>self</snippet></ROW><ROW><id>17348001</id><snippet>class Player(pygame.sprite.Sprite):
    def __init__ (self, frames, *groups):
        super(player,self).__init__(*groups)
        frame = 0
        self.image = frames[frame]
        ...


class Game(object):

    def main(self, screen):
        sprite = pygame.image.load('test.png')
        frames = sprite_system().slice_sheet(sprite,0,0,64,64,4)
        sprites = pygame.sprite.Group()
        self.player = Player(frames, sprites)
        ...
</snippet></ROW><ROW><id>17348001</id><snippet>player</snippet></ROW><ROW><id>17348001</id><snippet>Player</snippet></ROW><ROW><id>17348001</id><snippet>frames</snippet></ROW><ROW><id>17348001</id><snippet>frames</snippet></ROW><ROW><id>17348001</id><snippet>Player</snippet></ROW><ROW><id>17348001</id><snippet>class Player(pygame.sprite.Sprite):
    def __init__ (self, frames, *groups):
        super(player,self).__init__(*groups)
        self.frame = 0
        self.frames = frames
        ...

    def update(self):
        ...  # code to select the current frame

        self.frame = frame
        self.image = self.frames[self.frame]
</snippet></ROW><ROW><id>17348317</id><snippet>N_z_values = N_x_values * N_y_values</snippet></ROW><ROW><id>17348317</id><snippet>N_x_values</snippet></ROW><ROW><id>17348317</id><snippet>N_x_values = 27</snippet></ROW><ROW><id>17348317</id><snippet>N_y_values = 28</snippet></ROW><ROW><id>17348317</id><snippet>import numpy as np
data = []
N_x_values, N_y_values = 0, 0
with open(file_name, 'r') as in_file:
    # skip 2 lines, grab N_X, grab N_Y
    [in_file.next() for _ in range(2)]
    N_x_values = int(in_file.next().strip())
    N_y_values = int(in_file.next().strip())

    for line in in_file:
        line = line.strip().split(' ')
        data.append(map(float, line))

data = np.array(data)
data = data.reshape(np.prod(data.shape))
x_cutoff = N_x_values
y_cutoff = N_y_values
x = data[:x_cutoff]
y = data[x_cutoff:y_cutoff]
z = data[y_cutoff:].reshape(N_x_values, N_y_values)
</snippet></ROW><ROW><id>17348317</id><snippet>x.shape = (27, )
y.shape = (28, )
z.shape = (27, 28)
</snippet></ROW><ROW><id>17348317</id><snippet>matplotlib.pyplot.contour</snippet></ROW><ROW><id>17348317</id><snippet>import matplotlib.pyplot as plt
f = plt.figure()
ax = f.add_suplot(111)
ax.contourf(x, y, z)
ax.colorbar()
plt.show()
</snippet></ROW><ROW><id>17348367</id><snippet>bisect.insort()</snippet></ROW><ROW><id>17348367</id><snippet>bisect.insort(L, X)
</snippet></ROW><ROW><id>17348367</id><snippet>L.remove(X)</snippet></ROW><ROW><id>17348367</id><snippet>X</snippet></ROW><ROW><id>17348367</id><snippet>del L[bisect.bisect_left(L, X)]</snippet></ROW><ROW><id>17348367</id><snippet>X</snippet></ROW><ROW><id>17348367</id><snippet>L</snippet></ROW><ROW><id>17348638</id><snippet>enumerate</snippet></ROW><ROW><id>17348638</id><snippet>for i, bit in enumerate('110'):
     print (i, bit)
</snippet></ROW><ROW><id>17348638</id><snippet>(0, 1), (1, 1), (2, 0)</snippet></ROW><ROW><id>17348638</id><snippet>(0, 0), (1, 1), (2, 1)</snippet></ROW><ROW><id>17348638</id><snippet>;</snippet></ROW><ROW><id>17348638</id><snippet>Compound statements</snippet></ROW><ROW><id>17348638</id><snippet>multiply</snippet></ROW><ROW><id>17348638</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>17348638</id><snippet>multiply</snippet></ROW><ROW><id>17348638</id><snippet>def multiply(a,b):
    bitsa = reversed("{0:b}".format(a))
    g = [(b&lt;&lt;i)*int(bit) for i,bit in enumerate(bitsa)]
    return reduce(lambda x,y: x+y,g)    
</snippet></ROW><ROW><id>17348638</id><snippet>a*b</snippet></ROW><ROW><id>17348638</id><snippet>"{0:b}".format(a*b)</snippet></ROW><ROW><id>17348940</id><snippet>print ("the current weather in urbandale is %s with a temperature of %d") % (ob['weather'].lower(), ob['tempF']
</snippet></ROW><ROW><id>17348940</id><snippet>print ("the current weather in urbandale is %s with a temperature of %d" % (ob['weather'].lower(), ob['tempF']))
</snippet></ROW><ROW><id>17348940</id><snippet>else</snippet></ROW><ROW><id>17348940</id><snippet>:</snippet></ROW><ROW><id>17348940</id><snippet>print</snippet></ROW><ROW><id>17348940</id><snippet>print("An error occurred: %s" % (json['error']['description']))
</snippet></ROW><ROW><id>17348940</id><snippet>close()</snippet></ROW><ROW><id>17348940</id><snippet>request()</snippet></ROW><ROW><id>17348940</id><snippet>request.close()
</snippet></ROW><ROW><id>17348940</id><snippet>urllib</snippet></ROW><ROW><id>17348940</id><snippet>respnose</snippet></ROW><ROW><id>17348940</id><snippet>ob = json['response']['ob']
</snippet></ROW><ROW><id>17348940</id><snippet>from urllib.request import urlopen
import json

request = urlopen("http://api.aerisapi.com/observations/Urbandale,IA?client_id=QD2ToJ2o7MKAX47vrBcsC&amp;client_secret=0968kxX4DWybMkA9GksQREwBlBlC4njZw9jQNqdO")
response = request.read().decode("utf-8")
json = json.loads(response)
if json['success']:
    ob = json['response']['ob']
    print("the current weather in urbandale is %s with a temperature of %d" % (ob['weather'].lower(), ob['tempF']))
else:
    print("An error occurred: %s" % (json['error']['description']))
</snippet></ROW><ROW><id>17349039</id><snippet>reset_index()</snippet></ROW><ROW><id>17349039</id><snippet>In [24]: df1 = DataFrame([['ID1','ID2',1],['ID1','ID3',1],['ID2','ID4',1]],columns=['id1','id2','value']).set_index(['id1','id2'])

In [25]: df2 = DataFrame([['ID1','ID2',1],['ID1','ID3',1],['ID1','ID4',1]],columns=['id1','id2','value']).set_index(['id1','id2'])

In [26]: df1
Out[26]: 
         value
id1 id2       
ID1 ID2      1
    ID3      1
ID2 ID4      1

In [27]: df2
Out[27]: 
         value
id1 id2       
ID1 ID2      1
    ID3      1
    ID4      1
</snippet></ROW><ROW><id>17349039</id><snippet>In [35]: joined_index = df1.index+df2.index
</snippet></ROW><ROW><id>17349039</id><snippet>In [36]: df1.reindex(joined_index,fill_value=0) + df2.reindex(joined_index,fill_value=0)
Out[36]: 
         value
id1 id2       
ID1 ID2      2
    ID3      2
    ID4      1
ID2 ID4      1
</snippet></ROW><ROW><id>17349039</id><snippet>join</snippet></ROW><ROW><id>17349039</id><snippet>In [41]: a1, a2 = df1.align(df2, fill_value=0)

In [42]: a1 + a2
Out[42]: 
         value
id1 id2       
ID1 ID2      2
    ID3      2
    ID4      1
ID2 ID4      1
</snippet></ROW><ROW><id>17349263</id><snippet>try:
    import settings
except ImportError,err:
    import sys
    sys.path.append("../")
    import settings


def foo_bar_op():
    print settings.PROPERTY

if __name__ == "__main__":
    foo_bar_op()
</snippet></ROW><ROW><id>17349265</id><snippet>word = re.compile("[a-zA-Z\']+")
not_word = re.compile("[^a-zA-Z\']+")

for line in file.split('\n'):
    matched_words = re.findall(word, line)
    non_matching_words = re.findall(not_word, line)
    print " ".join(matched_words)
    print " ".join(non_matching_words)
</snippet></ROW><ROW><id>17349265</id><snippet>\s+</snippet></ROW><ROW><id>17349320</id><snippet>cleaned = df.reset_index().drop_duplicates(df.index.names)
cleaned.set_index(df.index.names, inplace=True)
</snippet></ROW><ROW><id>17349320</id><snippet>duplicated</snippet></ROW><ROW><id>17349399</id><snippet>class Foobar(object):
    def __init__(self, value):
        self.value = value

class FoobarMixin(object):
    def __init__(self, **kwargs):
        foobar = kwargs['foobar']
        if isinstance(foobar, Foobar):
            self.foobar = foobar
        else:
            self.foobar = Foobar(foobar)

class Foo(FoobarMixin):
    def __init__(self, value, **kwargs):
        super(Foo, self).__init__(**kwargs)
        self.value = value
        print self.value, self.foobar

class Bar(FoobarMixin):
    def __init__(self, value, **kwargs):
        super(Bar, self).__init__(**kwargs)
        self.value = value
        print self.value, self.foobar

foo = Foo('foo', foobar='foobar')
bar = Bar('bar', foobar=Foobar('foobar'))
</snippet></ROW><ROW><id>17349399</id><snippet>foo &lt;__main__.Foobar object at 0x7fa0fedf6050&gt;
bar &lt;__main__.Foobar object at 0x7fa0fedeaf10&gt;
</snippet></ROW><ROW><id>17349423</id><snippet>"alert.html"</snippet></ROW><ROW><id>17349423</id><snippet>{% include "alert.html" with connotation="error" error_code=err_code %}
</snippet></ROW><ROW><id>17349423</id><snippet>alert.html</snippet></ROW><ROW><id>17349423</id><snippet>{% if error_code == "404" %}
  &lt;strong&gt;{% trans "Not Found!" %}&lt;/strong&gt;
{% endif %}
</snippet></ROW><ROW><id>17349541</id><snippet>d = {1: ['Spices', 39],
     2: ['Cannons', 43],
     3: ['Tea', 31],
     4: ['Contraband', 46],
     5: ['Fruit', 38],
     6: ['Textiles', 44],
     7: ['Odds and Ends', 100, 9999],
     8: ['Candies', 9999, 'It\'s CANDY!']} 
d_max = []

# Iterate over keys of d
for k in d:
    # Length of the key
    if len(d_max) &lt;= 0:
        d_max.append(len(str(k)) + 1)
    elif len(str(k))+ 1 &gt; d_max[0]:
        d_max[0] = len(str(k)) + 1 

    # Iterate over the length of the value
    for i in range(len(d[k])):
        # If the index isn't in d_max then this must be the longest
        # Add one to index because index 0 is the key's length
        if len(d_max) &lt;= i+1:
            d_max.append(len(str(d[k][i])))
            continue
        # This is longer than the current one
        elif len(str(d[k][i])) + 1 &gt; d_max[i+1]:
            d_max[i+1] = len(str(d[k][i])) + 1

for k,v in d.items():
    list_var = [k] + v

    # A list of values to unpack into the string
    vals = []
    # Add the value then the length of the space
    for i in range(len(list_var)):
        vals.append(list_var[i])
        vals.append(d_max[i])

    print(("{:&lt;{}} " * len(list_var)).format(*vals))
</snippet></ROW><ROW><id>17349541</id><snippet>1  Spices         39    
2  Cannons        43    
3  Tea            31    
4  Contraband     46    
5  Fruit          38    
6  Textiles       44    
7  Odds and Ends  100   9999         
8  Candies        9999  It's CANDY! 
</snippet></ROW><ROW><id>17349612</id><snippet>hexdump(1)</snippet></ROW><ROW><id>17349612</id><snippet>xxd(1)</snippet></ROW><ROW><id>17349612</id><snippet>$ xxd 123.bin
0000000: 0000 0001                                ....
</snippet></ROW><ROW><id>17349612</id><snippet>-C</snippet></ROW><ROW><id>17349612</id><snippet>hexdump(1)</snippet></ROW><ROW><id>17349612</id><snippet>$ hexdump -C 123.bin
00000000  00 00 00 01                                       |....|
00000004
</snippet></ROW><ROW><id>17349612</id><snippet>hd</snippet></ROW><ROW><id>17349733</id><snippet>&gt;&gt;&gt; l = [[0]]*2
&gt;&gt;&gt; [id(x) for x in l]
[145328716, 145328716]             #same IDs
&gt;&gt;&gt; l[0].append(4)
&gt;&gt;&gt; l
[[0, 4], [0, 4]]
</snippet></ROW><ROW><id>17349733</id><snippet>&gt;&gt;&gt; l = [[0] for _ in xrange(2)]
&gt;&gt;&gt; [id(x) for x in l]           #Different IDs 
[145327372, 145327500]
&gt;&gt;&gt; l[0].append(4)
&gt;&gt;&gt; l
[[0, 4], [0]]
</snippet></ROW><ROW><id>17349769</id><snippet>In [3]: df = DataFrame(dict(A = 'foo', B = 'bar', value = 1),index=range(5)).set_index(['A','B'])

In [4]: df
Out[4]: 
         value
A   B         
foo bar      1
    bar      1
    bar      1
    bar      1
    bar      1

In [5]: df.to_csv('test.csv')

In [6]: !cat test.csv
A,B,value
foo,bar,1
foo,bar,1
foo,bar,1
foo,bar,1
foo,bar,1

In [7]: pd.read_csv('test.csv',index_col=[0,1])
Out[7]: 
         value
A   B         
foo bar      1
    bar      1
    bar      1
    bar      1
    bar      1
</snippet></ROW><ROW><id>17349769</id><snippet>In [27]: x = df.reset_index()

In [28]: mask = df.index.to_series().duplicated()

In [29]: mask
Out[29]: 
A    B  
foo  bar    False
     bar     True
     bar     True
     bar     True
     bar     True
dtype: bool

In [30]: x.loc[mask.values,['A','B']] = ''

In [31]: x
Out[31]: 
     A    B  value
0  foo  bar      1
1                1
2                1
3                1
4                1

In [32]: x.to_csv('test.csv')

In [33]: !cat test.csv
,A,B,value
0,foo,bar,1
1,,,1
2,,,1
3,,,1
4,,,1
</snippet></ROW><ROW><id>17349769</id><snippet>In [37]: pd.read_csv('test.csv',index_col=0).ffill().set_index(['A','B'])
Out[37]: 
         value
A   B         
foo bar      1
    bar      1
    bar      1
    bar      1
    bar      1
</snippet></ROW><ROW><id>17350190</id><snippet>datetime</snippet></ROW><ROW><id>17350190</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; strs = '2013-06-28 15:30:00'
&gt;&gt;&gt; d = datetime.strptime(strs, "%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>17350190</id><snippet>datetime.strptime</snippet></ROW><ROW><id>17350190</id><snippet>&gt;&gt;&gt; d
datetime.datetime(2013, 6, 28, 15, 30)
&gt;&gt;&gt; d.hour
15
&gt;&gt;&gt; d.month
6
</snippet></ROW><ROW><id>17350190</id><snippet>d</snippet></ROW><ROW><id>17350190</id><snippet>timedelta</snippet></ROW><ROW><id>17350190</id><snippet>&gt;&gt;&gt; d1 = d - timedelta(hours = 4)
</snippet></ROW><ROW><id>17350190</id><snippet>datetime.strftime</snippet></ROW><ROW><id>17350190</id><snippet>&gt;&gt;&gt; datetime.strftime(d1,"%Y-%m-%d %H:%M:%S")
'2013-06-28 11:30:00'
</snippet></ROW><ROW><id>17350244</id><snippet>sets</snippet></ROW><ROW><id>17350244</id><snippet>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; [ [y for y in x if y not in seen and not seen.add(y)] for x in a]
[[('bring', 'VBG'), ('puffy', 'NN'), ('eyes', 'NNS'), ('back', 'RB')], [('droopy', 'NN')]]
</snippet></ROW><ROW><id>17350244</id><snippet>&gt;&gt;&gt; a = [[('bring', 'VBG'), ('puffy', 'NN'), ('eyes', 'NNS'), ('back', 'RB')], [('droopy','NN'), ('eyes', 'NNS')]]
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; out_lis = []
for x in a:
    temp = []
    for y in x:
        if y not in seen:
            seen.add(y)
            temp.append(y)
    out_lis.append(temp)
...     
&gt;&gt;&gt; out_lis
[[('bring', 'VBG'), ('puffy', 'NN'), ('eyes', 'NNS'), ('back', 'RB')], [('droopy', 'NN')]]
</snippet></ROW><ROW><id>17350294</id><snippet>reader.py</snippet></ROW><ROW><id>17350294</id><snippet>corpus</snippet></ROW><ROW><id>17350294</id><snippet>corpus</snippet></ROW><ROW><id>17350294</id><snippet>reader.py</snippet></ROW><ROW><id>17350294</id><snippet>from nltk.corpus import PlaintextCorpusReader
import os.path
import sys

basepath = os.path.dirname(__file__)
corpus_root= os.path.abspath(os.path.join(basepath, "corpus"))
wordlists=PlaintextCorpusReader(corpus_root, '.*')
</snippet></ROW><ROW><id>17350294</id><snippet>basepath = os.path.dirname(__file__)</snippet></ROW><ROW><id>17350294</id><snippet>reader.py</snippet></ROW><ROW><id>17350800</id><snippet>reduce</snippet></ROW><ROW><id>17350800</id><snippet>set.intersection</snippet></ROW><ROW><id>17350800</id><snippet>&gt;&gt;&gt; reduce(set.intersection, map(set, nested_list))
set([2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])
</snippet></ROW><ROW><id>17350800</id><snippet>itertools.imap</snippet></ROW><ROW><id>17350800</id><snippet>&gt;&gt;&gt; lis = [[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0],
              [2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0],
              [1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0],
              [2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0]]
&gt;&gt;&gt; %timeit set.intersection(*map(set, lis))
100000 loops, best of 3: 12.5 us per loop
&gt;&gt;&gt; %timeit set.intersection(*(set(e) for e in lis))
10000 loops, best of 3: 14.4 us per loop
&gt;&gt;&gt; %timeit reduce(set.intersection, map(set, lis))
10000 loops, best of 3: 12.8 us per loop
&gt;&gt;&gt; %timeit reduce(set.intersection, imap(set, lis))
100000 loops, best of 3: 13.1 us per loop
&gt;&gt;&gt; %timeit set.intersection(set(lis[0]), *islice(lis, 1, None))
100000 loops, best of 3: 10.6 us per loop


&gt;&gt;&gt; lis = [[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0],
              [2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0],
              [1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0],
              [2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0]]*1000
&gt;&gt;&gt; %timeit set.intersection(*map(set, lis))
10 loops, best of 3: 16.4 ms per loop
&gt;&gt;&gt; %timeit set.intersection(*(set(e) for e in lis))
10 loops, best of 3: 15.8 ms per loop
&gt;&gt;&gt; %timeit reduce(set.intersection, map(set, lis))
100 loops, best of 3: 16.3 ms per loop
&gt;&gt;&gt; %timeit reduce(set.intersection, imap(set, lis))
10 loops, best of 3: 13.8 ms per loop
&gt;&gt;&gt; %timeit set.intersection(set(lis[0]), *islice(lis, 1, None))
100 loops, best of 3: 8.4 ms per loop


&gt;&gt;&gt; lis = [[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0],              [2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0],
              [1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0],
              [2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0]]*10**5
&gt;&gt;&gt; %timeit set.intersection(*map(set, lis))  
1 loops, best of 3: 1.92 s per loop
&gt;&gt;&gt; %timeit set.intersection(*(set(e) for e in lis))
1 loops, best of 3: 2.17 s per loop
&gt;&gt;&gt; %timeit reduce(set.intersection, map(set, lis))
1 loops, best of 3: 2.14 s per loop
&gt;&gt;&gt; %timeit reduce(set.intersection, imap(set, lis))
1 loops, best of 3: 1.52 s per loop
&gt;&gt;&gt; %timeit set.intersection(set(lis[0]), *islice(lis, 1, None))
1 loops, best of 3: 913 ms per loop
</snippet></ROW><ROW><id>17350806</id><snippet>sub</snippet></ROW><ROW><id>17350806</id><snippet>str = re.sub(r'\s+$', '', str)
</snippet></ROW><ROW><id>17350806</id><snippet>str = re.sub(r'\s+$', '', str, 0, re.M)
str = re.sub(r'\s+$', '', str, flags=re.M)
</snippet></ROW><ROW><id>17350806</id><snippet>0</snippet></ROW><ROW><id>17350806</id><snippet>count</snippet></ROW><ROW><id>17350806</id><snippet>0</snippet></ROW><ROW><id>17350806</id><snippet>re.M</snippet></ROW><ROW><id>17350806</id><snippet>$</snippet></ROW><ROW><id>17350806</id><snippet>flags</snippet></ROW><ROW><id>17350806</id><snippet>flags</snippet></ROW><ROW><id>17350806</id><snippet>r</snippet></ROW><ROW><id>17350806</id><snippet>rstrip</snippet></ROW><ROW><id>17350806</id><snippet>str = str.rstrip()
</snippet></ROW><ROW><id>17351018</id><snippet>print colors.rgb_to_hsv(image / 255)
</snippet></ROW><ROW><id>17351115</id><snippet>python -m http.server
</snippet></ROW><ROW><id>17351115</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>17351115</id><snippet>http.server</snippet></ROW><ROW><id>17351242</id><snippet>   If args is a tuple of exactly one item, apply repr to args[0].
   This is done so that e.g. the exception raised by {}[''] prints
     KeyError: ''
   rather than the confusing
     KeyError
   alone.  The downside is that if KeyError is raised with an explanatory
   string, that string will be displayed in quotes.  Too bad.
   If args is anything else, use the default BaseException__str__().
</snippet></ROW><ROW><id>17351242</id><snippet>class X(str):
    def __repr__(self):
        return "'%s'" % self

raise KeyError(X('\x1b[31m ERROR \x1b[0m'))
</snippet></ROW><ROW><id>17351388</id><snippet>import numpy as np
A=np.matrix((4,4,3,4,4,3,4,2,5,4,5,3,5,4,5,4,4,5,5,5,2,4,4,4,3,4,5))
A=A.reshape((3,9)).T
</snippet></ROW><ROW><id>17351388</id><snippet>matrix([[4, 4, 5],
        [4, 5, 5],
        [3, 3, 2],
        [4, 5, 4],
        [4, 4, 4],
        [3, 5, 4],
        [4, 4, 3],
        [2, 4, 4],
        [5, 5, 5]])
</snippet></ROW><ROW><id>17351388</id><snippet>U, s, V = np.linalg.svd(A)
</snippet></ROW><ROW><id>17351388</id><snippet>s</snippet></ROW><ROW><id>17351388</id><snippet>array([ 21.11673273,   2.0140035 ,   1.423864  ])
</snippet></ROW><ROW><id>17351388</id><snippet>A</snippet></ROW><ROW><id>17351388</id><snippet>U</snippet></ROW><ROW><id>17351388</id><snippet>V</snippet></ROW><ROW><id>17351388</id><snippet>U[:,0]*s[0]*V[0,:]
</snippet></ROW><ROW><id>17351388</id><snippet>matrix([[ 3.95411864,  4.64939923,  4.34718814],
        [ 4.28153222,  5.03438425,  4.70714912],
        [ 2.42985854,  2.85711772,  2.67140498],
        [ 3.97540054,  4.67442327,  4.37058562],
        [ 3.64798696,  4.28943826,  4.01062464],
        [ 3.69694905,  4.3470097 ,  4.06445393],
        [ 3.34185528,  3.92947728,  3.67406114],
        [ 3.09108399,  3.63461111,  3.39836128],
        [ 4.5599837 ,  5.36179782,  5.0132808 ]])
</snippet></ROW><ROW><id>17351388</id><snippet>U[:,0]</snippet></ROW><ROW><id>17351388</id><snippet>V[0,:]</snippet></ROW><ROW><id>17351388</id><snippet>U</snippet></ROW><ROW><id>17351388</id><snippet>V</snippet></ROW><ROW><id>17351617</id><snippet>'NoneType'</snippet></ROW><ROW><id>17351617</id><snippet>None</snippet></ROW><ROW><id>17351617</id><snippet>None</snippet></ROW><ROW><id>17351617</id><snippet>get</snippet></ROW><ROW><id>17351617</id><snippet>None</snippet></ROW><ROW><id>17351617</id><snippet>ae</snippet></ROW><ROW><id>17351617</id><snippet>be</snippet></ROW><ROW><id>17351617</id><snippet>ce</snippet></ROW><ROW><id>17351617</id><snippet>None</snippet></ROW><ROW><id>17351617</id><snippet>None</snippet></ROW><ROW><id>17351617</id><snippet>x=a().b()</snippet></ROW><ROW><id>17351617</id><snippet>b()</snippet></ROW><ROW><id>17351617</id><snippet>ae</snippet></ROW><ROW><id>17351617</id><snippet>grid(...)</snippet></ROW><ROW><id>17351617</id><snippet>None</snippet></ROW><ROW><id>17351617</id><snippet>ae = Entry(...)
be = Entry(...)
ce = Entry(...)
...
ae.grid(...)
be.grid(...)
ce.grid(...)
</snippet></ROW><ROW><id>17351762</id><snippet>game.select().where(game.created_at.between(
    datetime.date.today(),
    datetime.date.today() + datetime.timedelta(days=1))
</snippet></ROW><ROW><id>17351933</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r"\.(\d\d\d(\D|$))", r"\1", "200.000.5")
'200000.5'
</snippet></ROW><ROW><id>17351933</id><snippet>\d</snippet></ROW><ROW><id>17351933</id><snippet>\D</snippet></ROW><ROW><id>17352002</id><snippet>&gt;&gt;&gt; [[y for y in x if y[0] in common_values] for x in nested_list]
[[[4.0, 15.633, 0.015], [8.0, 14.097, 0.023]], [[4.0, 19.634, 0.025], [8.0, 10.097, 0.023]], [[4.0, 13.633, 0.015], [8.0, 12.097, 0.023]]]
</snippet></ROW><ROW><id>17352002</id><snippet>common_values</snippet></ROW><ROW><id>17352002</id><snippet>O(1)</snippet></ROW><ROW><id>17352002</id><snippet>&gt;&gt;&gt; out_put = []
for x in nested_list:
   temp = []
   for y in x:
       if y[0] in common_values: #check if first item is present in common_keys
           temp.append(y)
   out_put.append(temp)
...    
&gt;&gt;&gt; out_put
[[[4.0, 15.633, 0.015], [8.0, 14.097, 0.023]], [[4.0, 19.634, 0.025], [8.0, 10.097, 0.023]], [[4.0, 13.633, 0.015], [8.0, 12.097, 0.023]]]
</snippet></ROW><ROW><id>17352188</id><snippet>&gt;&gt;&gt; vars_of_interest
('AA_PYTHON', 'GG_POST_DEV_ELMO', 'GG_DEBUG_ELMO')

&gt;&gt;&gt; import os

&gt;&gt;&gt; [(var, os.getenv(var, 0)) for var in vars_of_interest]
[('AA_PYTHON', 0), ('GG_POST_DEV_ELMO', 0), ('GG_DEBUG_ELMO', 0)]

&gt;&gt;&gt; env = dict((var, os.getenv(var, 0)) for var in vars_of_interest)
&gt;&gt;&gt; env
{'AA_PYTHON': 0, 'GG_DEBUG_ELMO': 0, 'GG_POST_DEV_ELMO': 0}
</snippet></ROW><ROW><id>17352188</id><snippet>env = dict(...)</snippet></ROW><ROW><id>17352188</id><snippet>env</snippet></ROW><ROW><id>17352188</id><snippet>dict</snippet></ROW><ROW><id>17352188</id><snippet>&gt;&gt;&gt; type(env)
dict
</snippet></ROW><ROW><id>17352188</id><snippet>dict</snippet></ROW><ROW><id>17352188</id><snippet>env</snippet></ROW><ROW><id>17352188</id><snippet>'AA_PYTHON'</snippet></ROW><ROW><id>17352188</id><snippet>0</snippet></ROW><ROW><id>17352188</id><snippet>var</snippet></ROW><ROW><id>17352188</id><snippet>((var, os.getenv(var, 0)) for var in vars_of_interest)
</snippet></ROW><ROW><id>17352188</id><snippet>for var in vars_of_interest</snippet></ROW><ROW><id>17352188</id><snippet>vars_of_interest</snippet></ROW><ROW><id>17352188</id><snippet>var</snippet></ROW><ROW><id>17352188</id><snippet>(var, os.getenv(var, 0))</snippet></ROW><ROW><id>17352188</id><snippet>var</snippet></ROW><ROW><id>17352188</id><snippet>(var, os.getenv(var, 0))</snippet></ROW><ROW><id>17352188</id><snippet>var</snippet></ROW><ROW><id>17352188</id><snippet>os.getenv(var, 0)</snippet></ROW><ROW><id>17352188</id><snippet>var</snippet></ROW><ROW><id>17352188</id><snippet>'AA_PYTHON'</snippet></ROW><ROW><id>17352188</id><snippet>dict</snippet></ROW><ROW><id>17352188</id><snippet>dict((var, os.getenv(var, 0)) for var in vars_of_interest)
</snippet></ROW><ROW><id>17352188</id><snippet>dict</snippet></ROW><ROW><id>17352286</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17352286</id><snippet>bisect</snippet></ROW><ROW><id>17352286</id><snippet>b</snippet></ROW><ROW><id>17352286</id><snippet>[10, 40, 60, 90, 100]
</snippet></ROW><ROW><id>17352286</id><snippet>bisect</snippet></ROW><ROW><id>17352286</id><snippet>bisect.bisect_right</snippet></ROW><ROW><id>17352286</id><snippet>bisect.bisect_right</snippet></ROW><ROW><id>17352286</id><snippet>L_b = 2* len(b)
L_a = len(a)
L_b1 = len(b1)
</snippet></ROW><ROW><id>17352286</id><snippet>max ( L_b log L_b , L_a log L_b1  )</snippet></ROW><ROW><id>17352286</id><snippet>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; b=[(10,40),(40,60),(60,90),(90,100)]
&gt;&gt;&gt; b1 = sorted( set(z for x in b for z in x))
&gt;&gt;&gt; b1
[10, 40, 60, 90, 100]
&gt;&gt;&gt; dic = defaultdict(list)
for x,y in a:
    #Now  find the index where the value from the list can fit in the 
    #b1 list, bisect uses binary search so this is an O(log n ) step.
    # use this returned index as key and append the list to that key.
    ind = bisect.bisect_right(b1,int(x))
    dic[ind].append([x,y])
...     
&gt;&gt;&gt; dic.values()
[[['10', 'name_1']], [['50', 'name_2'], ['40', 'name_3']], [['80', 'name_N']]]
</snippet></ROW><ROW><id>17352286</id><snippet>&gt;&gt;&gt; [dic[k] for k in sorted(dic)]
[[['10', 'name_1']], [['50', 'name_2'], ['40', 'name_3']], [['80', 'name_N']]]
</snippet></ROW><ROW><id>17352308</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>17352394</id><snippet>fping</snippet></ROW><ROW><id>17352651</id><snippet>messages</snippet></ROW><ROW><id>17352651</id><snippet>"django.contrib.messages.context_processors.messages"
"django.core.context_processors.request",
</snippet></ROW><ROW><id>17352651</id><snippet>"django.contrib.messages.context_processors.messages",
"django.core.context_processors.request",
</snippet></ROW><ROW><id>17352726</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>17352726</id><snippet>zip</snippet></ROW><ROW><id>17352726</id><snippet>&gt;&gt;&gt; data = [1,2,3,4] 
&gt;&gt;&gt; tweets = ['a','b','c','d']
&gt;&gt;&gt; list(chain.from_iterable(zip(data,tweets)))
[1, 'a', 2, 'b', 3, 'c', 4, 'd']
</snippet></ROW><ROW><id>17352726</id><snippet>itertools.izip</snippet></ROW><ROW><id>17352755</id><snippet>ls</snippet></ROW><ROW><id>17352755</id><snippet>grep</snippet></ROW><ROW><id>17352934</id><snippet>   result = zip(list_1,list_2)
</snippet></ROW><ROW><id>17353074</id><snippet>__init__()</snippet></ROW><ROW><id>17353074</id><snippet>setup_info()</snippet></ROW><ROW><id>17353074</id><snippet>NotImplementedError</snippet></ROW><ROW><id>17353074</id><snippet>PeriodicTask</snippet></ROW><ROW><id>17353085</id><snippet>import itertools

# this list of languages could be longer and should read from a file
languages = ["English", "Spanish", "Italian", "Japanese", "French",
             "Standard Chinese", "Chinese", "Hindi", "Standard Arabic", "Russian"]

languages = [language.lower() for language in languages]

# Loop through US.txt and format it. Download from geonames.org.
cities = []
with open('US.txt', 'r') as us_data:
    for line in us_data:
        line_split = line.split("\t")
        cities.append("{}:{}".format(line_split[4], line_split[2]))

# This is the dataset
with open('state-teachers.txt', 'r') as teachers:
    next(teachers)  # skip header

    for line in teachers:
        # Replace all double spaces with single spaces
        while line.find("  ") != -1:
            line = line.replace("  ", " ")

        line_split = line.split(" ")

        # Lat/Lon are the last 2 items
        longitude = line_split.pop().strip()
        latitude = line_split.pop().strip()

        # Search for potential languages and trim off the line as we find them
        teacher_languages = []

        while True:
            language_check = line_split[-1]
            if language_check.lower().replace(",", "").strip() in languages:
                teacher_languages.append(language_check)
                del line_split[-1]
            else:
                break

        # Rejoin everything and then use phone number as the special key to split on
        line = " ".join(line_split)

        phone_start = line.find("(")
        phone = line[phone_start:phone_start+14].strip()

        after_phone = line[phone_start+15:]

        # Certifications can be recognized as acronyms
        # Anything else is assumed to be an area of practice
        certifications = []
        areas_of_practice = []

        specialties = after_phone.split(",")
        for specialty in specialties:
            specialty = specialty.strip()
            if specialty[0:2].upper() == specialty[0:2]:
                certifications.append(specialty)
            else:
                areas_of_practice.append(specialty)

        before_phone = line[0:phone_start-1]
        line_split = before_phone.split(" ")

        # State is the last column before phone
        state = line_split.pop()

        # Name should be the first 2 columns, at least. This is a basic guess.
        name = line_split[0] + " " + line_split[1]

        line_split = line_split[2:]

        # Add initials
        if len(line_split[0].strip()) == 1:
            name += " " + line_split[0].strip()
            line_split = line_split[1:]

        # Combo of all potential word combinations to see if we're dealing with a city or a name
        combos = [" ".join(combo) for combo in set(itertools.permutations(line_split))] + line_split

        line = " ".join(line_split)
        city = ""

        # See if the state:city combo is valid. If so, set it and let everything else be the name
        for combo in combos:
            if "{}:{}".format(state, combo) in cities:
                city = combo
                line = line.replace(combo, "")
                break

        # Remaining data must be a name
        if line.strip() != "":
            name += " " + line

        # Clean up names
        last_name, first_name = [piece.strip() for piece in name.split(",")]

        print first_name, last_name
</snippet></ROW><ROW><id>17353372</id><snippet>... id &gt;= %d ...</snippet></ROW><ROW><id>17353372</id><snippet>... id &gt;= %s ...</snippet></ROW><ROW><id>17353597</id><snippet>csv</snippet></ROW><ROW><id>17353597</id><snippet>with open('myfile.csv', 'w') as f:
        w = csv.writer(f, dialect = 'excel-tab') #use `delimiter = ','` for ',' in file
        for item in data:
            lis = [item[0]] +   [y for x in item[1] for y in x]
            w.writerow(lis)
</snippet></ROW><ROW><id>17353690</id><snippet>.__enter__()</snippet></ROW><ROW><id>17353690</id><snippet>.__exit__()</snippet></ROW><ROW><id>17353690</id><snippet>with</snippet></ROW><ROW><id>17353690</id><snippet>file.close()</snippet></ROW><ROW><id>17353690</id><snippet>.__exit__()</snippet></ROW><ROW><id>17353690</id><snippet>with</snippet></ROW><ROW><id>17353690</id><snippet>try:</snippet></ROW><ROW><id>17353690</id><snippet>finally:</snippet></ROW><ROW><id>17353690</id><snippet>csvfile = open(sys.argv[1], 'rb')
try:

    # do things with csvfile

finally:
    csvfile.close()
</snippet></ROW><ROW><id>17353690</id><snippet>csvfile</snippet></ROW><ROW><id>17353944</id><snippet>any()</snippet></ROW><ROW><id>17353944</id><snippet>all()</snippet></ROW><ROW><id>17353944</id><snippet>if(array_filter($array) == $array)</snippet></ROW><ROW><id>17353944</id><snippet>if(array_filter($array) == $array &amp;&amp; $array)</snippet></ROW><ROW><id>17354158</id><snippet>yield</snippet></ROW><ROW><id>17354158</id><snippet>101</snippet></ROW><ROW><id>17354158</id><snippet>def p(n):
  is_p=[False]*2 + [True]*(n-1)
  for i in range(2, int(n**0.5)):
    if is_p[i]:
        for j in range(i*i, n, i):
            is_p[j] = False
  for i in range(2, n):
    if is_p[i]:
      yield i

print list(p(102))
</snippet></ROW><ROW><id>17354158</id><snippet>101</snippet></ROW><ROW><id>17354186</id><snippet>CACHE MANIFEST
/static/style.css
/static/script.js
</snippet></ROW><ROW><id>17354186</id><snippet>url_for</snippet></ROW><ROW><id>17354186</id><snippet>CACHE MANIFEST
{{ url_for('static', filename='style.css') }}
{{ url_for('static', filename='script.js') }}
</snippet></ROW><ROW><id>17354186</id><snippet>&lt;html manifest="{{ url_for('manifest') }}"&gt;
</snippet></ROW><ROW><id>17354186</id><snippet>from flask import make_response

@app.route('/manifest')
def manifest():
    res = make_response(render_template('manifest.appcache'), 200)
    res.headers["Content-Type"] = "text/cache-manifest"
    return res
</snippet></ROW><ROW><id>17354257</id><snippet>(c + x) % 256</snippet></ROW><ROW><id>17354369</id><snippet>&gt;&gt;&gt; lis = ((1, 'foo'), (2, 'bar'), (3, 'baz'))
&gt;&gt;&gt; [x[0] for x in lis if x[1]=='bar' ]
[2]
</snippet></ROW><ROW><id>17354369</id><snippet>&gt;&gt;&gt; next((x[0] for x in lis if x[1]=='bar'), None)
2
</snippet></ROW><ROW><id>17354369</id><snippet>&gt;&gt;&gt; d = {v:k for k,v in ((1, 'foo'), (2, 'bar'), (3, 'baz'))}
&gt;&gt;&gt; d['bar']
2
&gt;&gt;&gt; d['foo']
1
</snippet></ROW><ROW><id>17354504</id><snippet>RequestClient</snippet></ROW><ROW><id>17354504</id><snippet>follow</snippet></ROW><ROW><id>17354504</id><snippet>True</snippet></ROW><ROW><id>17354504</id><snippet>redirect_chain</snippet></ROW><ROW><id>17354504</id><snippet>python
response = client.post("/app/mymodel/create/", follow=True)
</snippet></ROW><ROW><id>17354567</id><snippet>&gt;&gt;&gt; dic = {                                      
1 : ("1200", "Walnut St", 919822),
2: ("1300", "Adam Dr", 919823),
3: ("1200", "Rodeo Dr", 919823),
}
&gt;&gt;&gt; [k for k,v in dic.iteritems() if "1200" in v]
[1, 3]
</snippet></ROW><ROW><id>17354567</id><snippet>&gt;&gt;&gt; [k for k,v in dic.items() if "1200" in v]
[1, 3]
</snippet></ROW><ROW><id>17354567</id><snippet>&gt;&gt;&gt; d = {}
for k,v in dic.iteritems():
    d.setdefault(v[0],[]).append(k)

&gt;&gt;&gt; d
{'1300': [2], '1200': [1, 3]}

&gt;&gt;&gt; d["1200"]
[1, 3]
&gt;&gt;&gt; d["1300"]
[2]
</snippet></ROW><ROW><id>17354567</id><snippet>list</snippet></ROW><ROW><id>17354695</id><snippet>Cluster 0:
    Brucella(2)
        melitensis(1)
            Brucellaceae(1)
        neotomae(1)
            Brucellaceae(1)
    Streptomyces(1)
        neotomae(1)
            Brucellaceae(1)
Cluster 1:
    Streptomyces(2)
        geysiriensis(1)
            Streptomycetaceae(1)
        minutiscleroticus(1)
            Streptomycetaceae(1)
Cluster 2:
    Mycobacterium(1)
        phocaicum(1)
            Mycobacteriaceae(1)
Cluster 7:
    Mycobacterium(2)
        gastri(1)
            Mycobacteriaceae(1)
        kansasii(1)
            Mycobacteriaceae(1)
Cluster 9:
    Hyphomicrobium(2)
        facile(2)
            Hyphomicrobiaceae(2)
Cluster 10:
    Streptomyces(2)
        niger(1)
            Streptomycetaceae(1)
        olivaceiscleroticus(1)
            Streptomycetaceae(1)
</snippet></ROW><ROW><id>17354695</id><snippet># Sys for stdio stuff
import sys
# re for the re.split -- this can go if you find another way to parse your data
import re


# A global (shame on me) for storing the data we're going to parse from stdin
data = []

# read lines from standard input until it's empty (end-of-file)
for line in sys.stdin:
    # Split lines on spaces (gobbling multiple spaces for robustness)
    # and trim whitespace off the beginning and end of input (strip)
    entry = re.split("\s+", line.strip())

    # Throw the array into my global data array, it'll look like this:
    # [ "0", "Brucella", "melitensis", "Brucellaceae" ]
    # A lot of this code assumes that the first field is an integer, what
    # you call "cluster" in your problem description
    data.append(entry)

# Sort, first key is expected to be an integer, and we want a numerical
# sort rather than a string sort, so convert to int, then sort by
# each subsequent column. The lamba is a function that returns a tuple
# of keys we care about for each item
data.sort(key=lambda item: (int(item[0]), item[1], item[2], item[3]))


# Our recursive function -- we're basically going to treat "data" as a tree,
# even though it's not.
# parameters:
#    start - an integer telling us what line to begin working from so we needn't
#            walk the whole tree each time to figure out where we are.
#    super - An array that captures where we are in the search. This array
#            will have more elements in it as we deepen our traversal of the "tree"
#            Initially, it will be []
#            In the next ply of the tree, it will be [ '0' ]
#            Then something like [ '0', 'Brucella' ] and so on.
#    data -  The global data structure -- this never mutates after the sort above,
#            I could have just used the global directly
def groupedReport(start, super, data):
    # Figure out what ply we're on in our depth-first traversal of the tree
    depth =  len(super)
    # Count entries in the super class, starting from "start" index in the array:
    count = 0

    # For the few records in the data file that match our "super" exactly, we count
    # occurrences.
    if depth != 0:
        for i in range(start, len(data)):
            if (data[i][0:depth] == data[start][0:depth]):
                count = count + 1
            else:
                break; # We can stop counting as soon as a match fails,
                   # because of the way our input data is sorted
    else:
        count = len(data)


    # At depth == 1, we're reporting about clusters -- this is the only piece of
    # the algorithm that's not truly abstract, and it's only for presentation
    if (depth == 1):
        sys.stdout.write("Cluster " + super[0] + ":\n")
    elif (depth &gt; 0):
        # Every other depth: indent with 4 spaces for every ply of depth, then
        # output the unique field we just counted, and its count
        sys.stdout.write((' ' * ((depth - 1) * 4)) +
                         data[start][depth - 1] + '(' + str(count) + ')\n')

    # Recursion: we're going to figure out a new depth and a new "super"
    # and then call ourselves again. We break out on depth == 4 because
    # of one other assumption (I lied before about the abstract thing) I'm
    # making about our input data here. This could
    # be made more robust/flexible without a lot of work
    subsuper = None
    substart = start
    for i in range(start, start + count):
        record = data[i]  # The original record from our data
        newdepth = depth + 1
        if (newdepth &gt; 4): break;

        # array splice creates a new copy
        newsuper = record[0:newdepth]
        if newsuper != subsuper:
            # Recursion here!
            groupedReport(substart, newsuper, data)
            # Track our new "subsuper" for subsequent comparisons
            # as we loop through matches
            subsuper = newsuper

        # Track position in the data for next recursion, so we can start on
        # the right line
        substart = substart + 1

# First call to groupedReport starts the recursion
groupedReport(0, [], data)
</snippet></ROW><ROW><id>17354695</id><snippet>cat input.txt | python classifier.py
</snippet></ROW><ROW><id>17354729</id><snippet>&lt;span class="green_box" onmouseover="I am Green and today is {% now "d-n-Y" %}"&gt;
</snippet></ROW><ROW><id>17354744</id><snippet>&gt;&gt;&gt; data = np.arange(24).reshape(2, 3, 4)
&gt;&gt;&gt; for dim_0_slice in data: # the first dimension is easy
...     print dim_0_slice
... 
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[[12 13 14 15]
 [16 17 18 19]
 [20 21 22 23]]
&gt;&gt;&gt; for dim_1_slice in np.rollaxis(data, 1): # for the others, roll it to the front
...     print dim_1_slice
... 
[[ 0  1  2  3]
 [12 13 14 15]]
[[ 4  5  6  7]
 [16 17 18 19]]
[[ 8  9 10 11]
 [20 21 22 23]]
&gt;&gt;&gt; for dim_2_slice in np.rollaxis(data, 2):
...     print dim_2_slice
... 
[[ 0  4  8]
 [12 16 20]]
[[ 1  5  9]
 [13 17 21]]
[[ 2  6 10]
 [14 18 22]]
[[ 3  7 11]
 [15 19 23]]
</snippet></ROW><ROW><id>17354744</id><snippet>In [7]: a = np.arange(200*100*300).reshape(200, 100, 300)

In [8]: %timeit for j in xrange(100): a[:, j]
10000 loops, best of 3: 60.2 us per loop

In [9]: %timeit for j in xrange(100): a[:, j, :]
10000 loops, best of 3: 82.8 us per loop

In [10]: %timeit for j in np.rollaxis(a, 1): j
10000 loops, best of 3: 28.2 us per loop

In [11]: %timeit for j in np.swapaxes(a, 0, 1): j
10000 loops, best of 3: 26.7 us per loop
</snippet></ROW><ROW><id>17354755</id><snippet>lst[:] = (item for item if item != "")</snippet></ROW><ROW><id>17354755</id><snippet>reversed()</snippet></ROW><ROW><id>17354755</id><snippet>try:
     while True:
         lst.remove('')   # deletes first empty string
except ValueError:        # no more empty strings
     pass
</snippet></ROW><ROW><id>17354771</id><snippet>copy=False</snippet></ROW><ROW><id>17354771</id><snippet>copy=False</snippet></ROW><ROW><id>17354910</id><snippet>&gt;</snippet></ROW><ROW><id>17354910</id><snippet>shell=True</snippet></ROW><ROW><id>17354910</id><snippet>subprocess.call("echo hello world &gt; some.txt",shell=True)</snippet></ROW><ROW><id>17354910</id><snippet>with open("redirected_output.txt") as f:
    subprocess.call("/home/bin/cat some_file.txt",stdout=f)
</snippet></ROW><ROW><id>17355009</id><snippet>import os
os.environ["HOME"]
os.environ["mytime"]
</snippet></ROW><ROW><id>17355009</id><snippet>file = "%s/my/path/Text%s*"%(os.environ["HOME"], os.environ["mytime"])
</snippet></ROW><ROW><id>17355029</id><snippet>str.split()</snippet></ROW><ROW><id>17355029</id><snippet>re.split</snippet></ROW><ROW><id>17355029</id><snippet>re.split(r'\s+(?=[a-zA-Z]+=)', str)
</snippet></ROW><ROW><id>17355029</id><snippet>=</snippet></ROW><ROW><id>17355079</id><snippet># ...
# for ...

    if heading == 'mail':
        headers[index] = "Username"
    elif heading == 'data1':
        data_1_index = index

headers.insert(data_1_index, 'data1')
</snippet></ROW><ROW><id>17355079</id><snippet>for row in r:
    row.insert(data_1_index, row[data_1_index])
    w.writerow(row)
</snippet></ROW><ROW><id>17355079</id><snippet>import csv

with open('test.csv', 'rb') as infile, open('out.csv', 'wb') as outfile:
    r = csv.reader(infile, delimiter=',', quotechar='"')
    headers=r.next()
    for index, heading in enumerate(headers):
        if heading == 'mail':
            headers[index] = "Username"
        elif heading == 'data1':
            data_1_index = index
    headers.insert(data_1_index, 'data1')

    w = csv.writer(outfile, delimiter=',', quotechar='"')
    w.writerow(headers)
    for row in r:
        row.insert(data_1_index, row[data_1_index])
        w.writerow(row)
</snippet></ROW><ROW><id>17355199</id><snippet>message.eml</snippet></ROW><ROW><id>17355199</id><snippet>import email.parser
import StringIO
import zipfile

with open('message.eml') as f:
    msg = email.parser.Parser().parse(f)
attachment = msg.get_payload(1)
zipf = StringIO.StringIO(attachment.get_payload())
zip = zipfile.ZipFile(zipf)
filenames = zip.namelist()
</snippet></ROW><ROW><id>17355215</id><snippet>test.py</snippet></ROW><ROW><id>17355215</id><snippet>#!/usr/bin/python -t -O -v
</snippet></ROW><ROW><id>17355215</id><snippet>./test.py</snippet></ROW><ROW><id>17355215</id><snippet>/usr/bin/python '-t -O -V' ./test.py
</snippet></ROW><ROW><id>17355215</id><snippet>-tOv</snippet></ROW><ROW><id>17355265</id><snippet>c = csv.writer(open("\\data\loc\\scripts\trend.csv", "ab"))
</snippet></ROW><ROW><id>17355265</id><snippet>\t</snippet></ROW><ROW><id>17355265</id><snippet>\\</snippet></ROW><ROW><id>17355265</id><snippet>\l</snippet></ROW><ROW><id>17355265</id><snippet>\data\loc\scripts   rend.csv
</snippet></ROW><ROW><id>17355265</id><snippet>c = csv.writer(open(r"\\data\loc\\scripts\trend.csv", "ab"))
</snippet></ROW><ROW><id>17355265</id><snippet>data</snippet></ROW><ROW><id>17355265</id><snippet>loc</snippet></ROW><ROW><id>17355265</id><snippet>scripts</snippet></ROW><ROW><id>17355265</id><snippet>smb://data/loc</snippet></ROW><ROW><id>17355265</id><snippet>/mnt/data-loc</snippet></ROW><ROW><id>17355265</id><snippet>c = csv.writer(open(r"/mnt/data-loc/scripts/trend.csv", "ab"))
</snippet></ROW><ROW><id>17355265</id><snippet>libsmbclient</snippet></ROW><ROW><id>17355265</id><snippet>smbclient</snippet></ROW><ROW><id>17355265</id><snippet>import smbclient

smb = smbclient.SambaClient(server='DATA', share='LOC', domain='WORKGROUP',
                            username='me', password='swordfish')
smb.chdir('scripts')
with smb.open('trend.csv', 'rb') as f:
    data = f.read()
sio = StringIO.StringIO(data)
c = csv.writer(sio)
c.writerow([time, icount-1])
with smb.open('trend.csv', 'wb') as f:
    f.write(sio.getvalue())
smb.close()
</snippet></ROW><ROW><id>17355373</id><snippet>Text</snippet></ROW><ROW><id>17355373</id><snippet>Text</snippet></ROW><ROW><id>17355373</id><snippet>StringVar</snippet></ROW><ROW><id>17355373</id><snippet>trace</snippet></ROW><ROW><id>17355373</id><snippet>class MyThread(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        time.sleep(5)
        with app.text_lock:
            text_value = app.text_value

class MyApp(Frame):
    def __init__(self, master):
        Frame.__init__(self, master)
        self.text_value = ''
        self.text_lock = threading.Lock()
        self.my_widgets()

    def my_widgets(self):
        # ...

    def my_function(self):
        self.text.insert(1.0,"Step one")

        with self.text_lock:
            self.text_value = "Step one" + self.text_value
        # ...

# ...
</snippet></ROW><ROW><id>17355373</id><snippet>mtTkinter</snippet></ROW><ROW><id>17355373</id><snippet>MyThread.run</snippet></ROW><ROW><id>17355373</id><snippet>app.text</snippet></ROW><ROW><id>17355373</id><snippet>class MyApp(Frame):
    # ...

    def my_function(self):
        self.text.insert(1.0,"Step one") 

        self.after(5000, self.my_thing_to_do_later)

    def my_thing_to_do_later(self):
        # same code you would put in MyThread.run, but now
        # you're on the main thread, so you can just access 
        # self.text directly
</snippet></ROW><ROW><id>17355373</id><snippet>MyThread.start</snippet></ROW><ROW><id>17355373</id><snippet>MyThread.run</snippet></ROW><ROW><id>17355373</id><snippet>__init__()</snippet></ROW><ROW><id>17355373</id><snippet>run()</snippet></ROW><ROW><id>17355373</id><snippet>start</snippet></ROW><ROW><id>17355373</id><snippet>self.run()</snippet></ROW><ROW><id>17355373</id><snippet>self.run</snippet></ROW><ROW><id>17355373</id><snippet>start</snippet></ROW><ROW><id>17355373</id><snippet>start</snippet></ROW><ROW><id>17355373</id><snippet>run</snippet></ROW><ROW><id>17355373</id><snippet>App</snippet></ROW><ROW><id>17355373</id><snippet>def update_clock(self):
    self.clock.configure(text=time.strftime('%H:%M:%S'))
    self.after(1000, self.update_clock)
</snippet></ROW><ROW><id>17355373</id><snippet>create_widgets</snippet></ROW><ROW><id>17355373</id><snippet>self.clock = Label(self)
self.clock.grid(row=2, column=1)
self.update_clock()
</snippet></ROW><ROW><id>17355535</id><snippet>some_text</snippet></ROW><ROW><id>17355535</id><snippet>unicode</snippet></ROW><ROW><id>17355535</id><snippet>html1, html2 = html.split(some_text) # this line spits out the error
</snippet></ROW><ROW><id>17355535</id><snippet>split</snippet></ROW><ROW><id>17355535</id><snippet>str</snippet></ROW><ROW><id>17355535</id><snippet>unicode</snippet></ROW><ROW><id>17355535</id><snippet>str</snippet></ROW><ROW><id>17355535</id><snippet>unicode</snippet></ROW><ROW><id>17355535</id><snippet>unicode</snippet></ROW><ROW><id>17355535</id><snippet>str</snippet></ROW><ROW><id>17355535</id><snippet>html1, html2 = unicode(html).split(some_text) # this line spits out the error
</snippet></ROW><ROW><id>17355535</id><snippet>html1, html2 = html.decode(sys.getdefaultencoding()).split(some_text) # this line spits out the error
</snippet></ROW><ROW><id>17355535</id><snippet>html</snippet></ROW><ROW><id>17355535</id><snippet>some_text</snippet></ROW><ROW><id>17355535</id><snippet>html1, html2 = html.split(some_text.encode('utf-8'))
</snippet></ROW><ROW><id>17355535</id><snippet>str</snippet></ROW><ROW><id>17355535</id><snippet>decode</snippet></ROW><ROW><id>17355535</id><snippet>encode</snippet></ROW><ROW><id>17355535</id><snippet>unicode</snippet></ROW><ROW><id>17355635</id><snippet>newsletter.models.Subscription</snippet></ROW><ROW><id>17355635</id><snippet>newsletter.models.Newsletter</snippet></ROW><ROW><id>17355635</id><snippet>Subscriber</snippet></ROW><ROW><id>17355635</id><snippet>Subscription</snippet></ROW><ROW><id>17355635</id><snippet>newsletter.models.Newsletter</snippet></ROW><ROW><id>17355635</id><snippet>subscribe</snippet></ROW><ROW><id>17355744</id><snippet>import bpy

scene = bpy.context.scene

# Create new lamp datablock
lamp_data = bpy.data.lamps.new(name="New Lamp", type='POINT')

# Create new object with our lamp datablock
lamp_object = bpy.data.objects.new(name="New Lamp", object_data=lamp_data)

# Link lamp object to the scene so it'll appear in this scene
scene.objects.link(lamp_object)

# Place lamp to a specified location
lamp_object.location = (5.0, 5.0, 5.0)

# And finally select it make active
lamp_object.select = True
scene.objects.active = lamp_object
</snippet></ROW><ROW><id>17355795</id><snippet>self</snippet></ROW><ROW><id>17355795</id><snippet>class someClass:
    someList = []
    def sendMessage(self, message):
        someList.append(message)

messageSender = someClass()

listToSend = [] #loaded elswhere 

someClass.sendMessage(listToSend[1])
</snippet></ROW><ROW><id>17355900</id><snippet>
for (x &lt;- list if x != somevalue) yield x
</snippet></ROW><ROW><id>17355900</id><snippet>filter</snippet></ROW><ROW><id>17355900</id><snippet>
list.filter(_ != somevalue)
</snippet></ROW><ROW><id>17355900</id><snippet>
list.filterNot(_ == somevalue)
</snippet></ROW><ROW><id>17356044</id><snippet>newlist = [number for number in numbers if number &gt; 0]
</snippet></ROW><ROW><id>17356044</id><snippet>newlist</snippet></ROW><ROW><id>17356044</id><snippet>[None, None, None, None, None]</snippet></ROW><ROW><id>17356044</id><snippet>newlist.append(number)</snippet></ROW><ROW><id>17356044</id><snippet>None</snippet></ROW><ROW><id>17356044</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; x = a.append(1)
&gt;&gt;&gt; print x
None
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17356044</id><snippet>&gt;&gt;&gt; numbers = [34.6, -203.4, 44.9, 68.3, -12.2, 44.6, 12.7]
&gt;&gt;&gt; newlist = [number for number in numbers if number &gt; 0]
&gt;&gt;&gt; newlist
[34.6, 44.9, 68.3, 44.6, 12.7]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17356246</id><snippet>&gt;&gt;&gt; re.sub(r'&amp;.*?(?=;)','REPL','cat&amp;345;')           # including
'catREPL;'
&gt;&gt;&gt; re.sub(r'(?&lt;=&amp;).*?(?=;)','REPL','bat &amp;#hut;')    # not including
'bat &amp;REPL;'
</snippet></ROW><ROW><id>17356246</id><snippet>r'raw string'</snippet></ROW><ROW><id>17356246</id><snippet>.*?</snippet></ROW><ROW><id>17356246</id><snippet>(?=;)</snippet></ROW><ROW><id>17356246</id><snippet>(?&lt;=&amp;)</snippet></ROW><ROW><id>17356286</id><snippet>client</snippet></ROW><ROW><id>17356286</id><snippet>servers</snippet></ROW><ROW><id>17356286</id><snippet>s.connect((host, port))</snippet></ROW><ROW><id>17356286</id><snippet>host</snippet></ROW><ROW><id>17356286</id><snippet>servers</snippet></ROW><ROW><id>17356286</id><snippet>client</snippet></ROW><ROW><id>17356286</id><snippet>hostname</snippet></ROW><ROW><id>17356286</id><snippet>host = "the ip found from the server's network settings"
</snippet></ROW><ROW><id>17356388</id><snippet>data = [['dog', 'a'], ['mouse', 'a'], ['dog', 'b'], ['mouse', 'c'], ['dog', 'c']]
animals = {}

for animal, letter in data:
    animals.setdefault(animal, {})[letter] = 0
</snippet></ROW><ROW><id>17356388</id><snippet>setdefault</snippet></ROW><ROW><id>17356388</id><snippet>for animal, letter in data:
    if animal in animals:
        animals[animal][letter] = 0
    else:
        animals[animal] = {letter: 0}
</snippet></ROW><ROW><id>17356388</id><snippet>defaultdict</snippet></ROW><ROW><id>17356388</id><snippet>from collections import defaultdict:

animals = defaultdict(dict) # creates a dict when the key doesn't exist

for animal, letter in data:
    animals.[animal][letter] = 0
</snippet></ROW><ROW><id>17356483</id><snippet>lda.show_topics(topics=-1)</snippet></ROW><ROW><id>17356483</id><snippet>logfile = open('.../yourfile.txt', 'a')
print&gt;&gt;logfile, lda.show_topics(topics=-1, topn=10)
</snippet></ROW><ROW><id>17356544</id><snippet>&lt;\w+(?=\s|&gt;)(?:[^&gt;=]|='[^']*'|="[^"]*"|=[^'"][^\s&gt;]*)*?&gt;</snippet></ROW><ROW><id>17356544</id><snippet>\s\w+=(?:'[^']*'|"[^"]*"|[^'"][^\s&gt;]*)(?=\s|&gt;)</snippet></ROW><ROW><id>17356544</id><snippet>import re

string = """
&lt;a href="i.like.kittens.com" NotRealAttribute=' true="4&gt;2"' class=Fonzie&gt;text&lt;/a&gt;
""";

for matchElementObj in re.finditer( r'&lt;\w+(?=\s|&gt;)(?:[^&gt;=]|=\'[^\']*\'|="[^"]*"|=[^\'"][^\s&gt;]*)*?&gt;', string, re.M|re.I|re.S):
    print "-------"
    print "matchElementObj.group(0) : ", matchElementObj.group(0)

    for matchAttributesObj in re.finditer( r'\s\w+=(?:\'[^\']*\'|"[^"]*"|[^\'"][^\s&gt;]*)(?=\s|&gt;)', string, re.M|re.I|re.S):
        print "matchAttributesObj.group(0) : ", matchAttributesObj.group(0)
</snippet></ROW><ROW><id>17356544</id><snippet>-------
matchElementObj.group(0) :  &lt;a href="i.like.kittens.com" NotRealAttribute=' true="4&gt;2"' class=Fonzie&gt;
matchAttributesObj.group(0) :   href="i.like.kittens.com"
matchAttributesObj.group(0) :   NotRealAttribute=' true="4&gt;2"'
matchAttributesObj.group(0) :   class=Fonzie
</snippet></ROW><ROW><id>17356575</id><snippet>dreampie python3.2</snippet></ROW><ROW><id>17356582</id><snippet>import re
class MathOperations:
      def id(_self, lst): #returns modulus 2 (1,0,0,1,1,....) for input lists
            return [int(lst[i])%2 for i in range(len(lst))]
</snippet></ROW><ROW><id>17356582</id><snippet>obj = MathOperations()
obj.id([1, 2])
</snippet></ROW><ROW><id>17356609</id><snippet>sys.stdin.readline()</snippet></ROW><ROW><id>17356609</id><snippet>1,this,is\n</snippet></ROW><ROW><id>17356609</id><snippet>import csv
import itertools
import operator
import sys

def main():
    reader = csv.reader(sys.stdin)
    for key, bloc in itertools.groupby(reader, key=operator.itemgetter(0)):
        print '-----' + key
        print list(bloc)

if __name__ == '__main__':    
    main()
</snippet></ROW><ROW><id>17356665</id><snippet>transtable = { ord("0"):u'零', ord("1"):u'壹', ....}
unicodestr = u"314"
print unicodestr.translate(transtable)
</snippet></ROW><ROW><id>17356709</id><snippet>glob</snippet></ROW><ROW><id>17356840</id><snippet>plt.figure.Figure()
</snippet></ROW><ROW><id>17356840</id><snippet>plt.figure
</snippet></ROW><ROW><id>17356927</id><snippet>sprite_system().slice_sheet()</snippet></ROW><ROW><id>17356927</id><snippet>    pygame.sprite.Group.sprites
</snippet></ROW><ROW><id>17357298</id><snippet>'@'.join map(...</snippet></ROW><ROW><id>17357298</id><snippet>'@'.join(map(...</snippet></ROW><ROW><id>17357298</id><snippet>.upper</snippet></ROW><ROW><id>17357298</id><snippet>.upper()</snippet></ROW><ROW><id>17357298</id><snippet>''.join(re.findall("@(.{1})",'@'.join(map(lambda x: x[::-1], ['where are you a@', 'cruise queen mary on', 'morgtage ninjitsu', 'maritimes', 'professional analyst', 'blue ma', 'therapist or', 'forget-me-not'])))).upper()
</snippet></ROW><ROW><id>17357428</id><snippet>def unique(s):
    return len(set(s)) == len(s)
</snippet></ROW><ROW><id>17357428</id><snippet>set()</snippet></ROW><ROW><id>17357428</id><snippet>uchars</snippet></ROW><ROW><id>17357428</id><snippet>c in uchars</snippet></ROW><ROW><id>17357428</id><snippet>uchars</snippet></ROW><ROW><id>17357428</id><snippet>def unique(s):
    uchars = set()
    for c in s:
        if c in uchars:
            return False
        uchars.add(c)
    return True
</snippet></ROW><ROW><id>17357488</id><snippet>python
&gt;&gt;&gt; import cherrypy
&gt;&gt;&gt; help(cherrypy)
</snippet></ROW><ROW><id>17357516</id><snippet>app2</snippet></ROW><ROW><id>17357552</id><snippet>import requests
import json

def goo_shorten_url(url):
    post_url = 'https://www.googleapis.com/urlshortener/v1/url'
    payload = {'longUrl': url}
    headers = {'content-type': 'application/json'}
    r = requests.post(post_url, data=json.dumps(payload), headers=headers)
    print r.text
</snippet></ROW><ROW><id>17357552</id><snippet>def goo_shorten_url(url):
    post_url = 'https://www.googleapis.com/urlshortener/v1/url'
    postdata = {'longUrl':url}
    headers = {'Content-Type':'application/json'}
    req = urllib2.Request(
        post_url,
        json.dumps(postdata),
        headers
    )
    ret = urllib2.urlopen(req).read()
    print ret
    return json.loads(ret)['id']
</snippet></ROW><ROW><id>17357579</id><snippet>widget_name.focus()
</snippet></ROW><ROW><id>17357603</id><snippet> echo %username%
</snippet></ROW><ROW><id>17357603</id><snippet>  whoami
</snippet></ROW><ROW><id>17357603</id><snippet>‘C:\users\%username%\file‘
</snippet></ROW><ROW><id>17357603</id><snippet>whoami</snippet></ROW><ROW><id>17357603</id><snippet>l=`whoami`
echo $l
</snippet></ROW><ROW><id>17357628</id><snippet>ref_category</snippet></ROW><ROW><id>17357628</id><snippet>Product</snippet></ROW><ROW><id>17357628</id><snippet>db.ReferenceProperty</snippet></ROW><ROW><id>17357628</id><snippet>db.Key</snippet></ROW><ROW><id>17357628</id><snippet>Category</snippet></ROW><ROW><id>17357628</id><snippet>def post(self):
    product = Product()
    product.ref_category = db.get(self.request.get('ref_category'))
    product.put()
</snippet></ROW><ROW><id>17357849</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>17357849</id><snippet>eval()</snippet></ROW><ROW><id>17357849</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; all_odds['-5.00'] = ast.literal_eval(all_odds['-5.00'])
</snippet></ROW><ROW><id>17357849</id><snippet>&gt;&gt;&gt; if blocked.keys() == all_odds.keys():
...     print {blocked.keys()[0] : {k:v for k, v in all_odds.values()[0].iteritems() if k not in blocked.values()[0]}}
... 
{'-5.00': {'18': [2.12, 1.79], '16': [2.18, 1.61]}}
</snippet></ROW><ROW><id>17357849</id><snippet>-5.00</snippet></ROW><ROW><id>17357849</id><snippet>&gt;&gt;&gt; {blocked.keys()[0]:str({k: v for k, v in all_odds.values()[0].iteritems() if k not in blocked.values()[0]})}
{'-5.00': "{'18': [2.12, 1.79], '16': [2.18, 1.61]}"}
</snippet></ROW><ROW><id>17358327</id><snippet>(1, asset)</snippet></ROW><ROW><id>17358327</id><snippet>..., key=lambda pair: pair[1].value_per_unit)
</snippet></ROW><ROW><id>17358327</id><snippet>Asset = namedtuple('Asset_Desc', 'value weight value_per_unit')

assets = []

for i in range(items):
    assets.append(Asset(values[i], weights[i], values[i]/weights[i]))
</snippet></ROW><ROW><id>17358327</id><snippet>enumerate()</snippet></ROW><ROW><id>17358327</id><snippet>sorted_assets = sorted(enumerate(assets), key=lambda pair: pair[1].value_per_unit)
</snippet></ROW><ROW><id>17358327</id><snippet>attrgetter</snippet></ROW><ROW><id>17358327</id><snippet>from operator import attrgetter

sorted_assets = sorted(assets, key=attrgetter('value_per_unit'))
</snippet></ROW><ROW><id>17358717</id><snippet>os.system('matlab -nojvm -nodisplay -nosplash -r "ReadFates5mm;quit"')
OR
os.system("matlab -nojvm -nodisplay -nosplash -r 'ReadFates5mm;quit'")
</snippet></ROW><ROW><id>17358717</id><snippet>os.system("matlab -nojvm -nodisplay -nosplash -r \"ReadFates5mm;quit\"")
</snippet></ROW><ROW><id>17358717</id><snippet> os.system("matlab -nojvm -nodisplay -nosplash -r "ReadFates5mm;quit"")
           1                                      1'                22'
</snippet></ROW><ROW><id>17358717</id><snippet>1</snippet></ROW><ROW><id>17358717</id><snippet>1'</snippet></ROW><ROW><id>17358717</id><snippet>2</snippet></ROW><ROW><id>17358717</id><snippet>2'</snippet></ROW><ROW><id>17358717</id><snippet>"</snippet></ROW><ROW><id>17358717</id><snippet>1'</snippet></ROW><ROW><id>17358717</id><snippet>2</snippet></ROW><ROW><id>17358717</id><snippet>\"</snippet></ROW><ROW><id>17358717</id><snippet>'</snippet></ROW><ROW><id>17360308</id><snippet>settings.py</snippet></ROW><ROW><id>17360308</id><snippet>eScraperInterface/eScraper/settings.py</snippet></ROW><ROW><id>17360308</id><snippet>CUR_DIR = os.path.dirname(os.path.realpath(__file__))
IMAGES_STORE = os.path.join(CUR_DIR, '..', 'images')
</snippet></ROW><ROW><id>17360351</id><snippet>raw_input</snippet></ROW><ROW><id>17360351</id><snippet>int</snippet></ROW><ROW><id>17360351</id><snippet>if int(day) &lt; 10:
</snippet></ROW><ROW><id>17360405</id><snippet>base</snippet></ROW><ROW><id>17360405</id><snippet>child</snippet></ROW><ROW><id>17360405</id><snippet>Base</snippet></ROW><ROW><id>17360405</id><snippet>import base</snippet></ROW><ROW><id>17360405</id><snippet>x</snippet></ROW><ROW><id>17360405</id><snippet>y</snippet></ROW><ROW><id>17360405</id><snippet>z</snippet></ROW><ROW><id>17360405</id><snippet>Base</snippet></ROW><ROW><id>17360405</id><snippet>base.x</snippet></ROW><ROW><id>17360405</id><snippet>base.y</snippet></ROW><ROW><id>17360405</id><snippet>base.z</snippet></ROW><ROW><id>17360405</id><snippet>base.Base</snippet></ROW><ROW><id>17360548</id><snippet>db.collection.aggregate([{$group: {_id: "$_country_code", count: {$sum: 1}}}])
</snippet></ROW><ROW><id>17360548</id><snippet>{
    "result" : [
        {
            "_id" : "US",
            "count" : 302000
        },
        {
            "_id" : "CA",
            "count" : 180000
        },
        ...
    ],
    "ok" : 1
}
</snippet></ROW><ROW><id>17360548</id><snippet>db.command('aggregate', 'collection', pipeline=[{"$group": {"_id": "$_country_code", "count": {"$sum": 1}}}])
</snippet></ROW><ROW><id>17360611</id><snippet>df['letters'] = df['another_id'].map(letters)

        some_data another_id letters
id                                  
312871          5        abc       x
312977          6        def       y
</snippet></ROW><ROW><id>17360835</id><snippet>any</snippet></ROW><ROW><id>17360835</id><snippet>all</snippet></ROW><ROW><id>17360835</id><snippet>1 if 2 else 3</snippet></ROW><ROW><id>17361298</id><snippet>File.objects.exclude(id___in=s3_keys).delete()
Node.objects.exclude(id___in=s3_keys).delete()
</snippet></ROW><ROW><id>17361298</id><snippet>#Bring all entries and make them to a set:
db_keys = set(File.objects.all().values_list('key',flat=True))
# find the new keys
new_db_keys = set(s3_keys) - db_keys
</snippet></ROW><ROW><id>17361298</id><snippet>new_nodes = []
new_files = []
for key in new db_keys:
   new_nodes.append(Node(key=key))
   new_files.append(File(key=key))
Node.objects.bulk_create(new_nodes)
File.objects.bulk_create(new_files)
</snippet></ROW><ROW><id>17361353</id><snippet>import fabric.api</snippet></ROW><ROW><id>17361353</id><snippet>fabric.py</snippet></ROW><ROW><id>17361353</id><snippet>fabric.py</snippet></ROW><ROW><id>17361353</id><snippet>api</snippet></ROW><ROW><id>17361353</id><snippet>fabric.py</snippet></ROW><ROW><id>17361353</id><snippet>fabric</snippet></ROW><ROW><id>17361539</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; root = logging.getLogger()
&gt;&gt;&gt; root.setLevel(logging.INFO)
&gt;&gt;&gt; root.addHandler(logging.StreamHandler())
&gt;&gt;&gt; logging.error("test")
test
&gt;&gt;&gt; logging.debug("test")
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17361539</id><snippet>logging/__init__.py</snippet></ROW><ROW><id>17361539</id><snippet>class Logger(Filterer):
    ...
    def debug(self, msg, *args, **kwargs):
        """
        Log 'msg % args' with severity 'DEBUG'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.debug("Houston, we have a %s", "thorny problem", exc_info=1)
        """
        if self.isEnabledFor(DEBUG):
            self._log(DEBUG, msg, args, **kwargs)
</snippet></ROW><ROW><id>17361560</id><snippet>raw_input</snippet></ROW><ROW><id>17361560</id><snippet>if x&gt;0 and y&gt;0 and z&gt;0:</snippet></ROW><ROW><id>17361560</id><snippet>&gt;&gt;&gt; "-1" &gt; 0
True
&gt;&gt;&gt; "" &gt; 0
True
</snippet></ROW><ROW><id>17361560</id><snippet>z&gt;(x+y)</snippet></ROW><ROW><id>17361560</id><snippet>int()</snippet></ROW><ROW><id>17361560</id><snippet>a = int(raw_input('side 1 \n'))
b = int(raw_input('side 2 \n'))
c = int(raw_input('side 3 \n'))
</snippet></ROW><ROW><id>17361560</id><snippet>$ python so.py
side 1 
3
side 2 
4
side 3 
5
possible
</snippet></ROW><ROW><id>17361781</id><snippet>import csv

Pt_names = []
Hz_angles = []
Vz_angles = []
Slope_Dists = []
Reference_Hts = []
Instrument_Heights = []
with open(csv_file, 'r') as fh:
    reader = csv.reader(fh)
    for row in reader:
        Pt_name = row[0]
        # list comprehension for float conversion
        Hz_angle, Vz_angle, Slope_Dist, Reference_Ht, Instrument_Height = [float(value) for value in row[1:]]
        Pt_names.append(Pt_name)
        Hz_angles.append(Hz_angle)
        Vz_angles.append(Vz_angle)
        Slope_Dists.append(Slope_Dist)
        Reference_Hts.append(Reference_Ht)
        Instrument_Heights.append(Instrument_Height)
</snippet></ROW><ROW><id>17361798</id><snippet>class scraper():
    def somefunc(self):
        self.host = "intranet.ku.dk"
        self.url = "https://intranet.ku.dk/Selvbetjening/Sider/default.aspx"
        self.data = urllib.urlencode(postDataDict)
        self.headers = {   #You can fill these values by looking into what the browser sends.
            'Accept': 'text/html; */*',
            'Accept-Language': '',
            'Accept-Encoding': 'identity',
            'Connection': 'keep-alive',
            'Content-Type': 'application/x-www-form-urlencoded'}
        response = makeRequest(host,url,data)
        if (response.status == 302):
            url = '/'+response.getheader("Location").split('/')[3]
            response = makeRequest(host,url,{})

    def makeRequest(self,host,url,data):
        cookies = ''
        for key in self.cookies:
            cookies = cookies + key + '=' + self.cookies[key] + '; '
        self.headers['Cookie'] = cookies
        conn = httplib.HTTPSConnection(host)
        conn.request("POST", url, data, self.headers)
        response = conn.getresponse()
        self.saveCookies(response.getheader("Set-Cookie"))
        responseVal = response.read()
        conn.close()
        self.headers['Referer'] = fullUrl #setting header for next request
        return response

    def saveCookies(self,cookies):
        if cookies is not None:
            values = cookies.split()
            for value in values:
                parts = value.split('=')
                if(len(parts) &gt; 1):
                    if((parts[0] != 'expires') and (parts[0] != 'Max-Age') and (parts[0] != 'Path') and (parts[0] != 'path') and (parts[0] != 'Domain')):
                        self.cookies[parts[0]] = parts[1].rstrip(';')
</snippet></ROW><ROW><id>17362035</id><snippet>ProxyPass /app2 http://localhost/app2
ProxyPassReverse /app2 http://localhost:9091/app2
</snippet></ROW><ROW><id>17362035</id><snippet>http://localhost:9091
</snippet></ROW><ROW><id>17362035</id><snippet>http://localhost:9091/app2
</snippet></ROW><ROW><id>17362096</id><snippet>itertools.product()</snippet></ROW><ROW><id>17362096</id><snippet>import itertools

for i, j, k, l, m, n, o, p, q in itertools.product(xrange(1, 5), repeat=9):
    ...
</snippet></ROW><ROW><id>17362096</id><snippet>repeat</snippet></ROW><ROW><id>17362096</id><snippet>product()</snippet></ROW><ROW><id>17362096</id><snippet>for i in xrange(1,5):
    for j in xrange(1,5):
        for k in xrange(1,5):
            for l in xrange(1,5):
                for m in xrange(1,5):
                    inner_loops(i, j, k, l, m)

def inner_loops(i, j, k, l, m):
    for n in xrange(1,5):
        for o in xrange(1,5):
            for p in xrange(1,5):
                for q in xrange(1,5):
                    pass
</snippet></ROW><ROW><id>17362096</id><snippet>product()</snippet></ROW><ROW><id>17362120</id><snippet>str.split</snippet></ROW><ROW><id>17362120</id><snippet>text.split(' ', 2)
</snippet></ROW><ROW><id>17362246</id><snippet>realloc()</snippet></ROW><ROW><id>17362246</id><snippet>int</snippet></ROW><ROW><id>17362246</id><snippet>NULL</snippet></ROW><ROW><id>17362246</id><snippet>512</snippet></ROW><ROW><id>17362246</id><snippet>/* Don't do this:

       base = realloc(base, 512);

   because if realloc() fails it returns NULL
   and does not free(base), resulting in memory
   remaining allocated and the code having no way
   to free it: a memory leak.
*/

char* tmp = realloc(base, 512);
if (tmp)
{
    base = tmp;
}
</snippet></ROW><ROW><id>17362294</id><snippet>#abc.html
{{HEADER}}
{{ CONTENT }}
{{FOOTER}}

#in view
html_content =TemplateResponse(request,"abc.html {'CONTENT':html_content,'HEADER':html_header,'FOOTER':html_footer})
</snippet></ROW><ROW><id>17362294</id><snippet>finalhtml = html.replace('{{HEADER}}',html_header).replace('{{FOOTER}}',html_footer)
html_content =TemplateResponse(request,"abc.html {'html':finalhtml})
</snippet></ROW><ROW><id>17362294</id><snippet>from django.template import Context, Template
t = Template(html)
c = Context({'HEADER':html_header,'FOOTER':html_footer})
return HttpResponse(t.render(c))
</snippet></ROW><ROW><id>17362666</id><snippet>tree = ('b', ('a', None, None), ('z', ('c', None, None), ('zz', None, None)))

def breadth_first(tree):
    root, left_sub_tree, right_sub_tree = tree
    yield root
    for subtree in (left_sub_tree, right_sub_tree):
        if subtree is not None:
            for element in breadth_first(subtree):
                yield element


    print list(breadth_first(tree))
</snippet></ROW><ROW><id>17362666</id><snippet>['b', 'a', 'z', 'c', 'zz']
</snippet></ROW><ROW><id>17362960</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>17362960</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda item: len(item[1])))
OrderedDict([('category_3', ['z']), ('category_1', ['a', 'b']), ('category_2', ['c', 'd', 'e'])])
</snippet></ROW><ROW><id>17362960</id><snippet>sorted()</snippet></ROW><ROW><id>17362960</id><snippet>key</snippet></ROW><ROW><id>17363029</id><snippet>%</snippet></ROW><ROW><id>17363029</id><snippet>%</snippet></ROW><ROW><id>17363029</id><snippet>url</snippet></ROW><ROW><id>17363029</id><snippet>self.success_url</snippet></ROW><ROW><id>17363029</id><snippet>"hello %s"</snippet></ROW><ROW><id>17363029</id><snippet>self.object.__dict__</snippet></ROW><ROW><id>17363029</id><snippet>{"test": "three"}</snippet></ROW><ROW><id>17363029</id><snippet>hello {'test': 'three'}
</snippet></ROW><ROW><id>17363029</id><snippet>.format()</snippet></ROW><ROW><id>17363029</id><snippet>&gt;&gt;&gt; d = {'baby':'bebe'}
&gt;&gt;&gt; "hello {[baby]}".format(d)
'hello bebe'
</snippet></ROW><ROW><id>17363290</id><snippet>def compose_contents(self, *lines):
    self.contents = '\n'.join([line for line in lines if line.strip()])
    return self.contents
</snippet></ROW><ROW><id>17363290</id><snippet>*args</snippet></ROW><ROW><id>17363418</id><snippet>def post(self, request, *args, **kwargs):
    self.object = None
    evt_session = get_object_or_404(
        EventSession, pk=int(self.request.POST['session']))
    form_class = self.get_form_class()
    form = self.get_form(form_class)

    form.instance.session = evt_session

    if form.is_valid():
        return self.form_valid(form)
    else:
        return self.form_invalid(form)
</snippet></ROW><ROW><id>17363873</id><snippet>#!/usr/bin/env python

#standard module, needed as we deal with command line args
import sys

from fractions import Fraction
import pyexiv2


#checking whether we got enough args, if not, tell how to use, and exits
#if len(sys.argv) != 2 :
#    print "incorrect argument, usage: " + sys.argv[0] + ' &lt;filename&gt;'
#    sys.exit(1)

#so the argument seems to be ok, we use it as an imagefile 
imagefilename = sys.argv[1]



#trying to catch the exceptions in case of problem with the file reading
try:
    metadata = pyexiv2.metadata.ImageMetadata(imagefilename)
    metadata.read();

#trying to catch the exceptions in case of problem with the GPS data reading
    try:
        latitude = metadata.__getitem__("Exif.GPSInfo.GPSLatitude")
        latitudeRef = metadata.__getitem__("Exif.GPSInfo.GPSLatitudeRef")
        longitude = metadata.__getitem__("Exif.GPSInfo.GPSLongitude")
        longitudeRef = metadata.__getitem__("Exif.GPSInfo.GPSLongitudeRef")

        # get the value of the tag, and make it float number
        alt = float(metadata.__getitem__("Exif.GPSInfo.GPSAltitude").value)


        # get human readable values
        latitude = str(latitude).split("=")[1][1:-1].split(" ");
        latitude = map(lambda f: str(float(Fraction(f))), latitude)
        latitude = latitude[0] + u"\u00b0" + latitude[1] + "'" + latitude[2] + '"' + " " + str(latitudeRef).split("=")[1][1:-1]

        longitude = str(longitude).split("=")[1][1:-1].split(" ");
        longitude = map(lambda f: str(float(Fraction(f))), longitude)
        longitude = longitude[0] + u"\u00b0" + longitude[1] + "'" + longitude[2] + '"' + " " + str(longitudeRef).split("=")[1][1:-1]

        ## Printing out, might need to be modified if other format needed
        ## i just simple put tabs here to make nice columns
        print " \n A text file has been created with the following information \n"
        print "GPS EXIF data for " + imagefilename    
        print "Latitude:\t" + latitude 
        print "Longitude:\t" + longitude
        print "Altitude:\t" + str(alt) + " m"
    except Exception, e:  # complain if the GPS reading went wrong, and print the exception
        print "Missing GPS info for " + imagefilename
        print e

    # Create a new file or **overwrite an existing file**
    text_file = open('textfile.txt', 'w')
    text_file.write("Latitude" + latitude)
    # Close the output file
    text_file.close()


except Exception, e:   # complain if the GPS reading went wrong, and print the exception
    print "Error processing image " + imagefilename
    print e;
</snippet></ROW><ROW><id>17363947</id><snippet>p = 2
for i in range(10):
    if p &lt;= 0:
        break
    print i+1 , p
    p-=1
</snippet></ROW><ROW><id>17364886</id><snippet>repr()</snippet></ROW><ROW><id>17364886</id><snippet>print repr("""Hello!
this is a test string
yay.""")
</snippet></ROW><ROW><id>17364886</id><snippet>'Hello!\nthis is a test string\nyay.'
</snippet></ROW><ROW><id>17364886</id><snippet>[0][2]</snippet></ROW><ROW><id>17365399</id><snippet>from cStringIO import StringIO
from flask import make_response

from somewhere import generate_wav_file  # TODO your code here

@app.route('/path')
def view_method():

    buf = StringIO()

    # generate_wav_file should take a file as parameter and write a wav in it
    generate_wav_file(buf) 

    response = make_response(buf.getvalue())
    buf.close()
    response.headers['Content-Type'] = 'audio/wav'
    response.headers['Content-Disposition'] = 'attachment; filename=sound.wav'
    return response
</snippet></ROW><ROW><id>17365399</id><snippet>from flask import send_file

@app.route('/path')
def view_method():
     path_to_file = "/test.wav"

     send_file(
         path_to_file, 
         mimetype="audio/wav", 
         as_attachment=True, 
         attachment_filename="test.wav")
</snippet></ROW><ROW><id>17365738</id><snippet>import pandas as pd
import io

text = '''\
    user    date        value
    1       01-2000     5
    1       02-2000     6
    1       03-2000     7
    1       04-2000     8
    2       01-2000     3
    2       02-2000     4
    2       03-2000     5
    2       04-2000     6
    3       01-2000     10
    3       02-2000     11
    3       03-2000     12
    3       04-2000     13'''

df = pd.read_table(io.BytesIO(text), sep='\s+')
df['new_col'] = df.groupby('user')['value'].apply(lambda grp: grp.shift())
print(df)
</snippet></ROW><ROW><id>17365738</id><snippet>    user     date  value  new_col
0      1  01-2000      5      NaN
1      1  02-2000      6        5
2      1  03-2000      7        6
3      1  04-2000      8        7
4      2  01-2000      3      NaN
5      2  02-2000      4        3
6      2  03-2000      5        4
7      2  04-2000      6        5
8      3  01-2000     10      NaN
9      3  02-2000     11       10
10     3  03-2000     12       11
11     3  04-2000     13       12
</snippet></ROW><ROW><id>17366038</id><snippet>fin= open('words.txt')
wordList = fin.readlines()
u=97
v=97
...
for line in wordList
...
</snippet></ROW><ROW><id>17366091</id><snippet>infile = open(YourFilename)
for line in infile.read():
    (A, B) = line.split(':')
    As = [eval(a).strip() for a in A.split(',')]
    Bs = [eval(b).strip() for b in B.split(',')]
    Com = [A for A in As if A in Bs]
    print As, ':', Bs, '::', Com
</snippet></ROW><ROW><id>17366091</id><snippet>&gt;&gt;&gt; infile = open("temp.txt")
&gt;&gt;&gt; for line in infile:
...     if len(line) &gt; 2:
...         (A, B) = line.split(':')
...         As = [eval(a).strip() for a in A.split(',')]
...         Bs = [eval(b).strip() for b in B.split(',')]
...         Com = [A for A in As if A in Bs]
...         print As, ':', Bs, '::', Com
... 
['P08588'] : ['P08172', 'P11229', 'P20309'] :: []
['P15121'] : ['P10145', 'P15121', 'P23219', 'P35354', 'P41222', 'P43116'] :: ['P15121']
['P08588'] : ['P23219', 'Q8TCC7'] :: []
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17366111</id><snippet>from facepy import GraphAPI

graph = GraphAPI("CAAErZAZAHDByABAHtXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
graph.get('me/posts')

#if you want to get someone else's post: graph.get('{id}/posts')
</snippet></ROW><ROW><id>17366141</id><snippet>autocomplete</snippet></ROW><ROW><id>17366141</id><snippet>$(document).ready(function() {
    $.ajax({
        url: '{{ url_for("autocomplete") }}'
    }).done(function (data) {
        $('#function_name').autocomplete({
            source: data,
            minLength: 2
        });
    });
}
</snippet></ROW><ROW><id>17366141</id><snippet>[[["string1"], ["string2"], ... ["stringn"]]]
</snippet></ROW><ROW><id>17366141</id><snippet>import itertools
flattened = list(itertools.chain.from_iterable(result[0]))
</snippet></ROW><ROW><id>17366146</id><snippet>insert</snippet></ROW><ROW><id>17366146</id><snippet>None</snippet></ROW><ROW><id>17366146</id><snippet>[[n] + v for n, v in zip(nums, values) ]
</snippet></ROW><ROW><id>17366152</id><snippet>line</snippet></ROW><ROW><id>17366152</id><snippet>for line in derp:
</snippet></ROW><ROW><id>17366661</id><snippet>def sample(n, m):
    d = set()
    while len(d) &lt; m:
        d.add(randrange(n))
    return d

&gt;&gt;&gt; sample(100000000000000000000000000000000000, 10)
set([5577049102993258248888250482046894L, 86044086231860190654588187118815513L, 2021737354726858669049814270580972L, 6253501639432326715043836478191628L, 5306460388221333758367322518700483L, 62195356583363524099133566314034473L, 376650426515181012918370326724858L, 80588135672357701239461833469588557L, 1978959860575617450893346333245569L, 41904683348442252013350548717573039L])
</snippet></ROW><ROW><id>17366661</id><snippet>{randrange(n) for _ in range(m)}</snippet></ROW><ROW><id>17366767</id><snippet>re.search(u"\(\d{3}\) \d{3}-\d{4}",string)
</snippet></ROW><ROW><id>17366841</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>17366841</id><snippet>from itertools import groupby
from operator import itemgetter

for letter, words in groupby(sorted(somelist), key=itemgetter(0)):
    print letter
    for word in words:
        print word
    print
</snippet></ROW><ROW><id>17366841</id><snippet>sorted()</snippet></ROW><ROW><id>17366841</id><snippet>itemgetter(0)</snippet></ROW><ROW><id>17366841</id><snippet>groupby()</snippet></ROW><ROW><id>17366841</id><snippet>words</snippet></ROW><ROW><id>17366841</id><snippet>&gt;&gt;&gt; somelist = ['About', 'Absolutely', 'After', 'Aint', 'Alabama', 'AlabamaBill', 'All', 'Also', 'Amos', 'And', 'Anyhow', 'Are', 'As', 'At', 'Aunt', 'Aw', 'Bedlam', 'Behind', 'Besides', 'Biblical', 'Bill', 'Billgone']
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; 
&gt;&gt;&gt; for letter, words in groupby(sorted(somelist), key=itemgetter(0)):
...     print letter
...     for word in words:
...         print word
...     print
... 
A
About
Absolutely
After
Aint
Alabama
AlabamaBill
All
Also
Amos
And
Anyhow
Are
As
At
Aunt
Aw

B
Bedlam
Behind
Besides
Biblical
Bill
Billgone
</snippet></ROW><ROW><id>17366893</id><snippet>all</snippet></ROW><ROW><id>17366893</id><snippet>all</snippet></ROW><ROW><id>17366893</id><snippet>&gt;&gt;&gt; int('foo')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'foo'
</snippet></ROW><ROW><id>17366908</id><snippet>C = [obj.Bar for obj in (A, B)]
</snippet></ROW><ROW><id>17366908</id><snippet>from operator import attrgetter
C = map(attrgetter('Bar'), (A, B))
</snippet></ROW><ROW><id>17366908</id><snippet>Bar</snippet></ROW><ROW><id>17366908</id><snippet>getattr</snippet></ROW><ROW><id>17366908</id><snippet>C = [getattr(obj, 'Bar', None) for obj in (A, B)]
</snippet></ROW><ROW><id>17366908</id><snippet>C = [obj.Bar for obj in (A, B) if hasattr(obj, 'Bar')]
</snippet></ROW><ROW><id>17367020</id><snippet>subprocess.call</snippet></ROW><ROW><id>17367020</id><snippet>cwd</snippet></ROW><ROW><id>17367020</id><snippet>for i in xrange(1, 100):
    subprocess.call(["./task.sh", arg1], cwd=("/some%d" % i))
</snippet></ROW><ROW><id>17367020</id><snippet>Popen</snippet></ROW><ROW><id>17367020</id><snippet>cwd</snippet></ROW><ROW><id>17367020</id><snippet>Popen</snippet></ROW><ROW><id>17367721</id><snippet>import csv
columns = []                        #save the columns in this list
with open('myfile.csv','r') as f:
 reader = csv.reader(f, delimiter='\t')
 ind = next(reader).index('Default')   #find the index of 'Default' in the header
 for row in reader:
     columns.append(row[ind])
</snippet></ROW><ROW><id>17368030</id><snippet>hex</snippet></ROW><ROW><id>17368030</id><snippet>&gt;&gt;&gt; b = 0x346
&gt;&gt;&gt; hex(b)
'0x346'
&gt;&gt;&gt; len(hex(b))-2
3
</snippet></ROW><ROW><id>17368030</id><snippet>&gt;&gt;&gt; len("{:x}".format(b))
3
</snippet></ROW><ROW><id>17368206</id><snippet>set</snippet></ROW><ROW><id>17368206</id><snippet>&gt;&gt;&gt; dicts = {'met_293': ['81.0175','4','7','7','29.76','23','1','0','22','28.57','2','[KG]EHY'],'met_394': ['79.9579','4','7','7','29.76','18','3','0','15','28.57','2','EHY[ILV]'],'met_309': ['81.0175','4','7','7','29.76','23','1','0','22','28.57','2','[KG]EHY'],'met_387': ['79.9579','4','7','7','29.76','18','3','0','15','28.57','2','EHY[ILV]']}
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; {k:v for k,v in dicts.iteritems() 
                                 if v[11] not in seen and not seen.add(v[11])}
{'met_394': ['79.9579', '4', '7', '7', '29.76', '18', '3', '0', '15', '28.57', '2', 'EHY[ILV]'],
 'met_293': ['81.0175', '4', '7', '7', '29.76', '23', '1', '0', '22', '28.57', '2', '[KG]EHY']}
</snippet></ROW><ROW><id>17368206</id><snippet>&gt;&gt;&gt; dic = {}
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; for k,v in dicts.iteritems():
...     if v[11] not in seen:
...         dic[k] = v
...         seen.add(v[11])
...         
&gt;&gt;&gt; dic
{'met_394': ['79.9579', '4', '7', '7', '29.76', '18', '3', '0', '15', '28.57', '2', 'EHY[ILV]'],
 'met_293': ['81.0175', '4', '7', '7', '29.76', '23', '1', '0', '22', '28.57', '2', '[KG]EHY']}
</snippet></ROW><ROW><id>17368230</id><snippet>\Seen</snippet></ROW><ROW><id>17368230</id><snippet>tag UID STORE -FLAGS (\Seen)
</snippet></ROW><ROW><id>17368230</id><snippet>\Seen</snippet></ROW><ROW><id>17368230</id><snippet>\Seen</snippet></ROW><ROW><id>17368230</id><snippet>BODY.PEEK</snippet></ROW><ROW><id>17368230</id><snippet>BODY</snippet></ROW><ROW><id>17368230</id><snippet>STORE</snippet></ROW><ROW><id>17368230</id><snippet>connection.uid('STORE', '-FLAGS', '(\Seen)')
</snippet></ROW><ROW><id>17368249</id><snippet># Fit function given by:
fit_fn=pl.poly1d(fit)

x_fit = pl.linspace(x_min, x_max, n) 
y_fit = fit_fn(x_fit)
</snippet></ROW><ROW><id>17368249</id><snippet>x_min</snippet></ROW><ROW><id>17368249</id><snippet>x_max</snippet></ROW><ROW><id>17368249</id><snippet>n</snippet></ROW><ROW><id>17368249</id><snippet>x</snippet></ROW><ROW><id>17368344</id><snippet>Content-Type</snippet></ROW><ROW><id>17368344</id><snippet>application/json</snippet></ROW><ROW><id>17368344</id><snippet>JSON.stringify()</snippet></ROW><ROW><id>17368344</id><snippet>Y.io('/savedata', {
  method: 'POST',
  data: Y.JSON.stringify(jData),
  headers: {
    'Content-Type': 'application/json'
  },
  on: {
    success: function (id, response) {
      // do something with the response from the server, for example
      Y.one('#some-node').set('text', response.responseText);
    }
  }
});
</snippet></ROW><ROW><id>17368608</id><snippet>adData</snippet></ROW><ROW><id>17368608</id><snippet>adFile</snippet></ROW><ROW><id>17368608</id><snippet>matchName()</snippet></ROW><ROW><id>17368608</id><snippet>adData</snippet></ROW><ROW><id>17368608</id><snippet>adData.next()</snippet></ROW><ROW><id>17368608</id><snippet>print</snippet></ROW><ROW><id>17368608</id><snippet>adFile.seek(0)</snippet></ROW><ROW><id>17368608</id><snippet>matchName()</snippet></ROW><ROW><id>17368608</id><snippet>adData</snippet></ROW><ROW><id>17368609</id><snippet>datetime</snippet></ROW><ROW><id>17368609</id><snippet>__format__</snippet></ROW><ROW><id>17368609</id><snippet>datetime.strftime</snippet></ROW><ROW><id>17368609</id><snippet>'&gt;25'</snippet></ROW><ROW><id>17368609</id><snippet>dt.strftime('&gt;25')</snippet></ROW><ROW><id>17368609</id><snippet>'&gt;25'</snippet></ROW><ROW><id>17368609</id><snippet>!s</snippet></ROW><ROW><id>17368609</id><snippet>import datetime
dt = datetime.datetime(2013, 6, 26, 9, 0)
l = [dt, dt]
template = "{0!s:&gt;25} {1!s:&gt;25} " 
out = template.format(*l)
print out
</snippet></ROW><ROW><id>17368718</id><snippet>dump_svmlight_file</snippet></ROW><ROW><id>17368912</id><snippet>for index, row in enumerate(info):
    dict_info[index] = [row[1], row[4]]
</snippet></ROW><ROW><id>17368945</id><snippet>write</snippet></ROW><ROW><id>17368945</id><snippet>w+</snippet></ROW><ROW><id>17368945</id><snippet>f = open("foo", "w+")  # file does not exist
f.write("samething")
f.seek(1)
f.write("o")
f.seek(0)
print f.read() # prints "something"
</snippet></ROW><ROW><id>17368945</id><snippet>r+</snippet></ROW><ROW><id>17369007</id><snippet>__dict__</snippet></ROW><ROW><id>17369007</id><snippet>MyClass.__dict__['x']
</snippet></ROW><ROW><id>17369007</id><snippet>def __get__(self, obj, objtype):
    print 'Retrieving', self.name
    if obj is None:  # accessed as class attribute
        return self  # return the descriptor itself
    else:  # accessed as instance attribute
        return self.val  # return a value
</snippet></ROW><ROW><id>17369007</id><snippet>Retrieving var "x"
('__weakref__', &lt;attribute '__weakref__' of 'MyClass' objects&gt;)
('x', &lt;__main__.RevealAccess object at 0x7f32ef989890&gt;)
</snippet></ROW><ROW><id>17369151</id><snippet>N x N</snippet></ROW><ROW><id>17369151</id><snippet>import numpy as np
N = 5
x = np.arange(N**2).reshape(N, N)
upper = x[np.triu_indices(N, 0)]
</snippet></ROW><ROW><id>17369151</id><snippet>k</snippet></ROW><ROW><id>17369151</id><snippet>upper = x[np.triu_indices(N, k)]
</snippet></ROW><ROW><id>17369242</id><snippet>operator.methodcaller()</snippet></ROW><ROW><id>17369242</id><snippet>map(operator.methodcaller('method_name'), sequence)
</snippet></ROW><ROW><id>17369393</id><snippet>config.write(open("settings.conf","w"))
</snippet></ROW><ROW><id>17369393</id><snippet>with open("settings.conf","w") as settings_file:
    config.write(settings_file)
</snippet></ROW><ROW><id>17369468</id><snippet>_id</snippet></ROW><ROW><id>17369716</id><snippet>collections.Counter</snippet></ROW><ROW><id>17369716</id><snippet>itertools.count</snippet></ROW><ROW><id>17369716</id><snippet>&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; lis = ['a','a','a','b','b','c']
&gt;&gt;&gt; c = Counter(lis)
&gt;&gt;&gt; dic = {k: count(1) for k in c}
&gt;&gt;&gt; [x + ( str(next(dic[x])) if c[x]&gt;1 else '') for x in lis]
['a1', 'a2', 'a3', 'b1', 'b2', 'c']
</snippet></ROW><ROW><id>17369716</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17369716</id><snippet>&gt;&gt;&gt; def solve(lis):
        for k,g in groupby(lis):
            le = list(g)
            if len(le) &gt; 1:
                for i, x in enumerate(le, 1):
                    yield x+str(i)
            else:        
                yield k
...             
&gt;&gt;&gt; list(solve(lis))
['a1', 'a2', 'a3', 'b1', 'b2', 'c']
</snippet></ROW><ROW><id>17369736</id><snippet>plot_surface</snippet></ROW><ROW><id>17369736</id><snippet>np.meshgrid</snippet></ROW><ROW><id>17369736</id><snippet>plot_trisurf</snippet></ROW><ROW><id>17369867</id><snippet>hexstring = "1234567890deadbeef"
values = [int(digit, 16) for digit in hexstring]
</snippet></ROW><ROW><id>17369867</id><snippet>digitindex = 2
bitindex = 3
values[digitindex] ^= 1 &lt;&lt; bitindex
</snippet></ROW><ROW><id>17369867</id><snippet>result = "".join("0123456789abcdef"[val] for val in values)
</snippet></ROW><ROW><id>17370057</id><snippet>subArray = []
newRow = []
for row in data:
    for i in xrange(0,len(row)):
        if (i % 3 == 0):
            continue
        newRow.append(row[i])
    subArray.append(newRow)
    newRow = []
</snippet></ROW><ROW><id>17370078</id><snippet>zipped = None
</snippet></ROW><ROW><id>17370078</id><snippet>zipped = []
</snippet></ROW><ROW><id>17370078</id><snippet>zipped[:] = []
</snippet></ROW><ROW><id>17370078</id><snippet>zipped</snippet></ROW><ROW><id>17370138</id><snippet>SELECT</snippet></ROW><ROW><id>17370168</id><snippet>if reg.search(strs)
</snippet></ROW><ROW><id>17370168</id><snippet>return reg.search(strs)</snippet></ROW><ROW><id>17370368</id><snippet>$return</snippet></ROW><ROW><id>17370368</id><snippet>import sys
def func():
  print ('Hello')
  return 21
sys.exit(func())
</snippet></ROW><ROW><id>17370510</id><snippet>plt.xticks(rotation=90).
</snippet></ROW><ROW><id>17370510</id><snippet>plt.xticks(&lt;certain range of values&gt;)
plt.xticklabels(&lt;labels for those values&gt;)
</snippet></ROW><ROW><id>17370510</id><snippet>f = plt.figure()
ax = f.add_subplot(111)

ax.plot(&lt;stuff&gt;)
ax.tick_params(axis='x', labelsize='8')

plt.setp( ax.xaxis.get_majorticklabels(), rotation=90 )
# OR
xlabels = ax.get_xticklabels()
for label in xlabels:
    label.set_rotation(90)

plt.show()
</snippet></ROW><ROW><id>17370537</id><snippet>FileType()</snippet></ROW><ROW><id>17370537</id><snippet>argparse</snippet></ROW><ROW><id>17370537</id><snippet>def csvParser(f):
   with f:
       csv.reader(f)
</snippet></ROW><ROW><id>17370537</id><snippet>argparse</snippet></ROW><ROW><id>17370537</id><snippet>argparse</snippet></ROW><ROW><id>17370537</id><snippet>FileType</snippet></ROW><ROW><id>17370537</id><snippet>mode=</snippet></ROW><ROW><id>17370537</id><snippet>bufsize=</snippet></ROW><ROW><id>17370537</id><snippet>encoding=</snippet></ROW><ROW><id>17370537</id><snippet>errors=</snippet></ROW><ROW><id>17370537</id><snippet>open()</snippet></ROW><ROW><id>17370537</id><snippet>&gt;&gt;&gt;
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('bar', type=argparse.FileType('w'))
&gt;&gt;&gt; parser.parse_args(['out.txt'])
Namespace(bar=&lt;_io.TextIOWrapper name='out.txt' encoding='UTF-8'&gt;)
</snippet></ROW><ROW><id>17370537</id><snippet>FileType()</snippet></ROW><ROW><id>17370537</id><snippet>FileType</snippet></ROW><ROW><id>17370537</id><snippet>open()</snippet></ROW><ROW><id>17370610</id><snippet>python-pyqt4</snippet></ROW><ROW><id>17370610</id><snippet>python3-pyqt4</snippet></ROW><ROW><id>17370882</id><snippet>pair[0]*'\t'</snippet></ROW><ROW><id>17370882</id><snippet>pair[0]</snippet></ROW><ROW><id>17370882</id><snippet>&gt;&gt;&gt; x = [(1, u'Category'), (2, u'Item'), (3, u'SubItem'), (4, u'N/A'), (1, u'Features'), (2, u'Tool Baseline')]
&gt;&gt;&gt; for pair in x:
...   print pair[0]*'\t' + pair[1]
...
    Category
            Item
                    SubItem
                            N/A
    Features
            Tool Baseline
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17370882</id><snippet>file.write('\t'*tup[0])
file.write(tup[1])
</snippet></ROW><ROW><id>17371094</id><snippet>&gt;&gt;&gt; matches = re.findall(r'"([^"]*)".=."([^"]*)"', line)
&gt;&gt;&gt; matches
[('string1', 'string2')]
</snippet></ROW><ROW><id>17371096</id><snippet>tmp_fpath = tempfile.mkstemp()
try:
    with open(tmp_fpath, "wb") as f:
        f.write("\n".join(file_list) + "\n")
    ... subprocess stuff ...
finally:
    os.remove(tmp_fpath)
</snippet></ROW><ROW><id>17371151</id><snippet>np.array</snippet></ROW><ROW><id>17371151</id><snippet>np.asarray</snippet></ROW><ROW><id>17371151</id><snippet>In [11]: np.fromiter(xrange(10), count=10, dtype='float')
Out[11]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
</snippet></ROW><ROW><id>17371151</id><snippet>np.fromiter</snippet></ROW><ROW><id>17371151</id><snippet>np.fromiter</snippet></ROW><ROW><id>17371151</id><snippet>reshape</snippet></ROW><ROW><id>17371151</id><snippet>np.fromfunction</snippet></ROW><ROW><id>17371151</id><snippet>np.frombuffer</snippet></ROW><ROW><id>17371151</id><snippet>np.fromfile</snippet></ROW><ROW><id>17371151</id><snippet>np.loadtxt</snippet></ROW><ROW><id>17371151</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>17371151</id><snippet>np.fromstring</snippet></ROW><ROW><id>17371151</id><snippet>np.zeros</snippet></ROW><ROW><id>17371151</id><snippet>np.empty</snippet></ROW><ROW><id>17371151</id><snippet>np.ones</snippet></ROW><ROW><id>17371163</id><snippet>#pseudocode

buf = read(1024)
while True:
   if re.match(regexp, buf):
        buf = re.sub(regexp, do_stuff, buf)
   else:
        buf += read(1024)
</snippet></ROW><ROW><id>17371163</id><snippet>do_stuff</snippet></ROW><ROW><id>17371163</id><snippet>''</snippet></ROW><ROW><id>17371440</id><snippet>return</snippet></ROW><ROW><id>17371440</id><snippet>pHit</snippet></ROW><ROW><id>17371440</id><snippet>pMiss</snippet></ROW><ROW><id>17371440</id><snippet>world</snippet></ROW><ROW><id>17371440</id><snippet>def sense(p, z):
    pHit = 0.6
    pMiss = 0.2
    world = ['green','red','red','green','green']

    q = []
    for i in range(len(p)):
        hit = (z==world[i])
        q.append(p[i] * (hit * pHit + (1 - hit) * pMiss))
    return q

p = [0.2,0.2,0.2,0.2,0.2]
z = 'red'
print sense(p,z)
</snippet></ROW><ROW><id>17371453</id><snippet>numpy</snippet></ROW><ROW><id>17371453</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(12).reshape(3,4)
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&gt;&gt;&gt; a[:, [1,2,3]]
array([[ 1,  2,  3],
       [ 5,  6,  7],
       [ 9, 10, 11]])
&gt;&gt;&gt; a[:, [1,3]]
array([[ 1,  3],
       [ 5,  7],
       [ 9, 11]])
</snippet></ROW><ROW><id>17371453</id><snippet>&gt;&gt;&gt; a.tolist()
[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]
&gt;&gt;&gt; a.tolist()[:,[1,2,3]]
Traceback (most recent call last):
  File "&lt;ipython-input-17-7d77de02047a&gt;", line 1, in &lt;module&gt;
    a.tolist()[:,[1,2,3]]
TypeError: list indices must be integers, not tuple
</snippet></ROW><ROW><id>17371704</id><snippet>dict</snippet></ROW><ROW><id>17371704</id><snippet>with open("wordsandnumbers.txt", "r") as file1:
    numbers = {k:v.strip() for k,v in (line.split(';') for line in file1)}
</snippet></ROW><ROW><id>17371704</id><snippet>with open("wordsonly.txt", "r") as f:
    with open("finalfile.txt", "w") as nf:
        for line in f:
            line = line.strip():
            if line in numbers:
                nf.write('{}; {}\n'.format(line, numbers[line])
            else:
                nf.write('{}\n'.format(line))
</snippet></ROW><ROW><id>17371832</id><snippet>#tables.py
import django_tables2 as tables
from ticker.apps.ticket.models import Tickets
from django_tables2.utils import A

class TicketsTable(tables.Table):
id = tables.LinkColumn('ticket_detail', args={A("slug")})
subject =tables.Column()
</snippet></ROW><ROW><id>17371868</id><snippet>new_dict = dict([(attr,self.__dict__[attr]) for attr in self.__dict__ if self.__dict__[attr]])
return json.dumps(new_dict, default=lambda obj: obj.__dict__, indent=4)
</snippet></ROW><ROW><id>17371877</id><snippet>TypeError</snippet></ROW><ROW><id>17371877</id><snippet>Python 3.2 (r32:88445, May 11 2011, 09:23:22) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; [2] &gt; (1,)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: list() &gt; tuple()
</snippet></ROW><ROW><id>17372091</id><snippet>list_1 = ['TK123','TK221','TK132'] 
list_2 = ['TK123A','TK1124B','TK221L','TK132P']

ans = []
for itm1 in list_1:
    for itm2 in list_2:
        if itm1 in itm2:
            break
        if itm2 in itm1:
            break
    else:
        ans.append(itm1)

for itm2 in list_2:
    for itm1 in list_1:
        if itm1 in itm2:
            break
        if itm2 in itm1:
            break
    else:
        ans.append(itm2)

print ans
&gt;&gt;&gt; ['TK1124B']
</snippet></ROW><ROW><id>17372187</id><snippet>p.voltage</snippet></ROW><ROW><id>17372187</id><snippet>p.voltage()</snippet></ROW><ROW><id>17372187</id><snippet>100()</snippet></ROW><ROW><id>17372292</id><snippet>import dis

def foo():
  a = 2

dis.dis(foo)
</snippet></ROW><ROW><id>17372292</id><snippet>  6           0 LOAD_CONST               1 (2)
              3 STORE_FAST               0 (a)
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE        
</snippet></ROW><ROW><id>17372310</id><snippet>.//</snippet></ROW><ROW><id>17372310</id><snippet>item['title'] = site.select('.//thead/th/a/text()').extract()
item['link'] = site.select('.//thead/th/a/@href').extract()
</snippet></ROW><ROW><id>17372310</id><snippet>def parse(self, response):
    xhs = XmlXPathSelector(response)

    columns = hxs.select('//table[3]/header/column'')
    for column in columns:
        item = CarrierItem()
        item['title'] = column.select('.//text()').extract()
        item['link'] = column.select('.//@uri').extract()
        yield item
</snippet></ROW><ROW><id>17372371</id><snippet>&gt;&gt;&gt; from django.core.paginator import Paginator
&gt;&gt;&gt; objects = ['john', 'paul', 'george', 'ringo']
&gt;&gt;&gt; p = Paginator(objects, 2)

&gt;&gt;&gt; p.count
4
&gt;&gt;&gt; p.num_pages
2
&gt;&gt;&gt; p.page_range
[1, 2]
</snippet></ROW><ROW><id>17372371</id><snippet>Paginator</snippet></ROW><ROW><id>17372374</id><snippet>y</snippet></ROW><ROW><id>17372374</id><snippet>y</snippet></ROW><ROW><id>17372374</id><snippet>circs</snippet></ROW><ROW><id>17372374</id><snippet>circs</snippet></ROW><ROW><id>17372374</id><snippet>y</snippet></ROW><ROW><id>17372374</id><snippet>y</snippet></ROW><ROW><id>17372374</id><snippet>circs</snippet></ROW><ROW><id>17372374</id><snippet>y</snippet></ROW><ROW><id>17372374</id><snippet>y</snippet></ROW><ROW><id>17372374</id><snippet>def getcircs(mylist):
    circs=[]
    x=mylist
    y=list(x)
    dig=len(x)-1
    j=0

    circs.append(x)

    while j &lt; dig:
        temp = y[:]
        for i in range(0,dig):
            r=i+1
            g=x[r]
            temp[i]=g
        temp[dig]=x[0]        
        print temp
        circs.append(temp)
        x=list(temp)
        j+=1

    print circs
    return circs
</snippet></ROW><ROW><id>17372374</id><snippet>temp = y[:]</snippet></ROW><ROW><id>17372411</id><snippet>match=gene.match(line, re.IGNORECASE)
</snippet></ROW><ROW><id>17372411</id><snippet>match()</snippet></ROW><ROW><id>17372411</id><snippet>pos</snippet></ROW><ROW><id>17372411</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>17372411</id><snippet>2</snippet></ROW><ROW><id>17372411</id><snippet>"[^\s]*"</snippet></ROW><ROW><id>17372411</id><snippet>r"\S*"</snippet></ROW><ROW><id>17372491</id><snippet>shlex.split</snippet></ROW><ROW><id>17372491</id><snippet>import shlex
call(shlex.split('./tango_x86_64_release VTS1 ct="N" nt="N" ph="7.2" te="303" io="0.02" seq="MKHPYEEFPTGSKSPYNMSRGAHPGAV"'))
</snippet></ROW><ROW><id>17372491</id><snippet>shell=True</snippet></ROW><ROW><id>17372725</id><snippet>NULL</snippet></ROW><ROW><id>17372725</id><snippet>None</snippet></ROW><ROW><id>17372725</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; class TestStruct(Structure):
...  _fields_ = [("voidField", c_void_p)]
...
&gt;&gt;&gt; x.voidField = 0
&gt;&gt;&gt; print repr(x.voidField)
None
</snippet></ROW><ROW><id>17372725</id><snippet>int</snippet></ROW><ROW><id>17372725</id><snippet>long</snippet></ROW><ROW><id>17372725</id><snippet>&gt;&gt;&gt; x.voidField = 123
&gt;&gt;&gt; print repr(x.voidField)
123
</snippet></ROW><ROW><id>17372725</id><snippet>void *</snippet></ROW><ROW><id>17372725</id><snippet>void* ptr = malloc(1000);
printf("%ld\n", (long) ptr);
</snippet></ROW><ROW><id>17372794</id><snippet>HumanName</snippet></ROW><ROW><id>17372794</id><snippet>)</snippet></ROW><ROW><id>17372794</id><snippet>name = HumanName(s.get('name','')
</snippet></ROW><ROW><id>17372794</id><snippet>name = HumanName(s.get('name',''))
</snippet></ROW><ROW><id>17372880</id><snippet>&gt;&gt;&gt; sum(sum(x) for x in hostel.itervalues())
285.3
</snippet></ROW><ROW><id>17372880</id><snippet>(sum(x) for x in hostel.itervalues())</snippet></ROW><ROW><id>17372880</id><snippet>&gt;&gt;&gt; gen = (sum(x) for x in hostel.itervalues())
&gt;&gt;&gt; gen
&lt;generator object &lt;genexpr&gt; at 0xa51e644&gt;
</snippet></ROW><ROW><id>17372880</id><snippet>genexp</snippet></ROW><ROW><id>17372880</id><snippet>&gt;&gt;&gt; list(gen)
[36.0, 36.0, 35.3, 36.0, 36.0, 30, 76.0]
</snippet></ROW><ROW><id>17372880</id><snippet>#due to list call above the generator got consumed, so we've to create a new generator again
&gt;&gt;&gt; gen = (sum(x) for x in hostel.itervalues())
&gt;&gt;&gt; sum(gen)
285.3
</snippet></ROW><ROW><id>17372883</id><snippet>def myfunc():
    for i in range(10):
        foo(bar(i))
</snippet></ROW><ROW><id>17372883</id><snippet>foo</snippet></ROW><ROW><id>17372883</id><snippet>bar</snippet></ROW><ROW><id>17372883</id><snippet>bar</snippet></ROW><ROW><id>17372883</id><snippet>foo</snippet></ROW><ROW><id>17372883</id><snippet>foo</snippet></ROW><ROW><id>17372883</id><snippet>bar</snippet></ROW><ROW><id>17372883</id><snippet>foo</snippet></ROW><ROW><id>17372883</id><snippet>bar</snippet></ROW><ROW><id>17372883</id><snippet>len</snippet></ROW><ROW><id>17372883</id><snippet> def myfunc():
     f = foo
     b = bar
     for i in range(10):
         f(b(i))
</snippet></ROW><ROW><id>17372883</id><snippet>f</snippet></ROW><ROW><id>17372883</id><snippet>b</snippet></ROW><ROW><id>17372883</id><snippet>myfunc</snippet></ROW><ROW><id>17372883</id><snippet>f</snippet></ROW><ROW><id>17372883</id><snippet>b</snippet></ROW><ROW><id>17372883</id><snippet>def myfunc(x, sin=math.sin):
    ...
</snippet></ROW><ROW><id>17372883</id><snippet>sin</snippet></ROW><ROW><id>17372883</id><snippet>math</snippet></ROW><ROW><id>17372883</id><snippet>sin</snippet></ROW><ROW><id>17372883</id><snippet>math</snippet></ROW><ROW><id>17372963</id><snippet>x.strip() for x in each_line.split(',')</snippet></ROW><ROW><id>17372963</id><snippet>output.write</snippet></ROW><ROW><id>17372963</id><snippet>with open('out.txt', 'w+') as output:
    for each_line in fileinput.input(input_file):
        output.write("\n".join(x.strip() for x in each_line.split(',')))
</snippet></ROW><ROW><id>17372998</id><snippet>&gt;&gt;&gt; try: assert 1==2
... except Exception as e: print type(e)
...
&lt;type 'exceptions.AssertionError'&gt;
</snippet></ROW><ROW><id>17372998</id><snippet>&gt;&gt;&gt; try: assert 1==2, "They Are Not Equal!!"
... except Exception as e: print e
...
They Are Not Equal!!
</snippet></ROW><ROW><id>17372998</id><snippet>__str__</snippet></ROW><ROW><id>17372998</id><snippet>print</snippet></ROW><ROW><id>17373105</id><snippet>def dbset(self, name, value):
    self.transaction.append((name, self.database.get(name)))
    self.database[name]=value

def rollback(self):
    # undo all changes
    while self.transaction:
        name, old_value = self.transaction.pop()
        self.database[name] = old_value

def commit(self):
    # everything went fine, drop undo information
    self.transaction = []
</snippet></ROW><ROW><id>17373237</id><snippet>my_set = {'foo', 'bar', 'baz'}
</snippet></ROW><ROW><id>17373237</id><snippet>{}</snippet></ROW><ROW><id>17373259</id><snippet>class ChatServer(Protocol):
    def connectionMade(self):
        print("A Client Has Connected")

factory = Factory()
reactor.listenTCP(80,factory)
</snippet></ROW><ROW><id>17373259</id><snippet>factory</snippet></ROW><ROW><id>17373259</id><snippet>ChatServer</snippet></ROW><ROW><id>17373259</id><snippet>factory.protocol = ChatServer
</snippet></ROW><ROW><id>17373259</id><snippet>Factory</snippet></ROW><ROW><id>17373259</id><snippet>class ChatServer(Protocol):
    def connectionMade(self):
        print("A Client Has Connected")

reactor.listenTCP(80, Factory.forProtocol(ChatServer))
</snippet></ROW><ROW><id>17373385</id><snippet>prevLine = ""
for line in file:
    # do some work here
    prevLine = line
</snippet></ROW><ROW><id>17373385</id><snippet>prevLine</snippet></ROW><ROW><id>17373463</id><snippet>ctype</snippet></ROW><ROW><id>17373463</id><snippet>Cell</snippet></ROW><ROW><id>17373463</id><snippet>sh.cell(1,col).ctype
</snippet></ROW><ROW><id>17373463</id><snippet>xlrd.XL_CELL_DATE</snippet></ROW><ROW><id>17373592</id><snippet>pip search [package-name]</snippet></ROW><ROW><id>17373675</id><snippet>ast</snippet></ROW><ROW><id>17373675</id><snippet>compile()</snippet></ROW><ROW><id>17373675</id><snippet>ast.parse()</snippet></ROW><ROW><id>17373675</id><snippet>import ast

with open(sourcefilename, 'r') as source:
    tree = ast.parse(source.read(), sourcefilename)
</snippet></ROW><ROW><id>17373694</id><snippet>up.user = u
u.save()
</snippet></ROW><ROW><id>17373694</id><snippet>up</snippet></ROW><ROW><id>17373694</id><snippet>u.save()</snippet></ROW><ROW><id>17373694</id><snippet>up.save()</snippet></ROW><ROW><id>17373694</id><snippet>u.save()
up.user = u
up.save()
</snippet></ROW><ROW><id>17373944</id><snippet>parser = argparse.ArgumentParser(....)

for element in configuration_elements:
     parser.add_argument('--' + element, type=float, ...)
</snippet></ROW><ROW><id>17373944</id><snippet>argparse.ArgumentParser()</snippet></ROW><ROW><id>17373944</id><snippet>parser.parse_known_args()</snippet></ROW><ROW><id>17373944</id><snippet>argparse</snippet></ROW><ROW><id>17373944</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--foo')
_StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.parse_known_args(['--foo', '42', '--spam', 'eggs'])
(Namespace(foo='42'), ['--spam', 'eggs'])
</snippet></ROW><ROW><id>17373944</id><snippet>.parse_known_args()</snippet></ROW><ROW><id>17373944</id><snippet>'--spam'</snippet></ROW><ROW><id>17373944</id><snippet>'eggs'</snippet></ROW><ROW><id>17373944</id><snippet>--foo 42</snippet></ROW><ROW><id>17374077</id><snippet>\s</snippet></ROW><ROW><id>17374077</id><snippet>re.DOTALL</snippet></ROW><ROW><id>17374077</id><snippet>.</snippet></ROW><ROW><id>17374077</id><snippet>\s*</snippet></ROW><ROW><id>17374077</id><snippet>//</snippet></ROW><ROW><id>17374077</id><snippet>\s*</snippet></ROW><ROW><id>17374077</id><snippet>.*?</snippet></ROW><ROW><id>17374077</id><snippet>$</snippet></ROW><ROW><id>17374077</id><snippet>\s*</snippet></ROW><ROW><id>17374077</id><snippet>1</snippet></ROW><ROW><id>17374077</id><snippet>//</snippet></ROW><ROW><id>17374077</id><snippet>.*?</snippet></ROW><ROW><id>17374077</id><snippet>[ \t]</snippet></ROW><ROW><id>17374077</id><snippet>\s</snippet></ROW><ROW><id>17374077</id><snippet>//.*?$</snippet></ROW><ROW><id>17374077</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>17374077</id><snippet>re.DOTALL</snippet></ROW><ROW><id>17374391</id><snippet>command_stack</snippet></ROW><ROW><id>17374391</id><snippet>In [17]: p.hset('blah', 'meh', 1)
Out[17]: &lt;redis.client.StrictPipeline at 0x10d4dde90&gt;

In [18]: p.hset('foo', 'bar', 1)
Out[18]: &lt;redis.client.StrictPipeline at 0x10d4dde90&gt;

In [19]: p.command_stack
Out[19]: [(('HSET', 'blah', 'meh', 1), {}), (('HSET', 'foo', 'bar', 1), {})]
</snippet></ROW><ROW><id>17374525</id><snippet>substring($string, $start, $len)
substring(//td[@class="show_content"]/text(), 16, 16)
</snippet></ROW><ROW><id>17374525</id><snippet>substring-before($string, $needle)
substring-after($string, $needle)
substring-before(
  substring-after(//td[@class="show_content"]/text(), 'on '), ' Read')
</snippet></ROW><ROW><id>17374629</id><snippet>tree.xpath("//*[local-name() = 'SecureToken']")[0].text
</snippet></ROW><ROW><id>17374765</id><snippet>else:
    ssid[emp] = [hashes[1]]
</snippet></ROW><ROW><id>17374765</id><snippet>    ssid[emp].add(hashes[1])
else:
    ssid[emp] = set([hashes[1]])
</snippet></ROW><ROW><id>17374860</id><snippet>.ini</snippet></ROW><ROW><id>17374860</id><snippet>.ini</snippet></ROW><ROW><id>17374860</id><snippet>.ini</snippet></ROW><ROW><id>17374860</id><snippet>myapp0-0.tar.gz.</snippet></ROW><ROW><id>17374860</id><snippet>$ python setup.py sdist upload
</snippet></ROW><ROW><id>17374860</id><snippet>(envprod)$ pip install -i http://my.mirr.or/path $PACKAGE
</snippet></ROW><ROW><id>17374860</id><snippet>.ini</snippet></ROW><ROW><id>17374860</id><snippet>requirements.txt</snippet></ROW><ROW><id>17374860</id><snippet>Makefiles</snippet></ROW><ROW><id>17374860</id><snippet>virtualenv</snippet></ROW><ROW><id>17374860</id><snippet>pip</snippet></ROW><ROW><id>17374973</id><snippet>&gt;&gt;&gt; urllib.quote('an Immunodeficiency Virus-1 replication by inhibiting acetylation of NF-\xce\xbaB')
'an%20Immunodeficiency%20Virus-1%20replication%20by%20inhibiting%20acetylation%20of%20NF-%CE%BAB'
</snippet></ROW><ROW><id>17374973</id><snippet>params = {'query' : 'title(' + title_string + ')'}
api_call = 'http://some_api/index:ABCDE?' + urllib.urlencode(params)
</snippet></ROW><ROW><id>17374980</id><snippet>divisors = [2,3,4,5,6,7,8,9,10]
for i in range (10,10000,10):
    if all(i % x == 0 for x in divisors):
         print(i)
         break
</snippet></ROW><ROW><id>17374980</id><snippet>all()</snippet></ROW><ROW><id>17374980</id><snippet>True</snippet></ROW><ROW><id>17374980</id><snippet>i</snippet></ROW><ROW><id>17374980</id><snippet>divisors</snippet></ROW><ROW><id>17375059</id><snippet>import os</snippet></ROW><ROW><id>17375059</id><snippet>os</snippet></ROW><ROW><id>17375203</id><snippet>unsorted_insert</snippet></ROW><ROW><id>17375203</id><snippet>Z1</snippet></ROW><ROW><id>17375203</id><snippet>Z2</snippet></ROW><ROW><id>17375203</id><snippet>sort_idx = np.argsort(Z1[:, 0])
sorted_insert = np.searchsorted(Z1[:, 0], Z2[:, 0], sorter=sort_idx)
# The following is equivalent to unsorted_insert = sort_idx[sorted_insert] but faster
unsorted_insert = np.take(sort_idx, sorted_insert)
</snippet></ROW><ROW><id>17375203</id><snippet>Z2</snippet></ROW><ROW><id>17375203</id><snippet>new_Z2 = np.hstack((Z2, Z1[unsorted_insert, 1:]))
</snippet></ROW><ROW><id>17375203</id><snippet>import numpy as np

z1_rows, z1_cols = 300000, 3
z2_rows, z2_cols = 200000, 300

z1 = np.arange(z1_rows*z1_cols).reshape(z1_rows, z1_cols)

z2 = np.random.randint(10000, size=(z2_rows, z2_cols))
z2[:, 0] = z1[np.random.randint(z1_rows, size=(z2_rows,)), 0]

sort_idx = np.argsort(z1[:, 0])
sorted_insert = np.searchsorted(z1[:, 0], z2[:, 0], sorter=sort_idx)
# The following is equivalent to unsorted_insert = sort_idx[sorted_insert] but faster
unsorted_insert = np.take(sort_idx, sorted_insert)
new_z2 = np.hstack((z2, z1[unsorted_insert, 1:]))
</snippet></ROW><ROW><id>17375403</id><snippet>import sys 
sys.setrecursionlimit(10000)
</snippet></ROW><ROW><id>17375444</id><snippet>. script.sh</snippet></ROW><ROW><id>17375569</id><snippet>import csv
from itertools import izip_longest

with open('/tmp/line.csv','r') as fin:
    cr=csv.reader(fin)
    n=10
    data=izip_longest(*[iter(list(cr)[0])]*n,fillvalue='')
    print '\n'.join(', '.join(t) for t in data)
</snippet></ROW><ROW><id>17375569</id><snippet>CLB, HNRG, LPI, MTDR, MVO, NRGY, PSE, PVR, RRC, WES
ACMP, ATLS, ATW, BP, BWP, COG, DGAS, DNR, EPB, EPL
EXLP, NOV, OIS, PNRG, SEP, APL, ARP, CVX, DMLP, DRQ
DWSN, EC, ECA, FTI, GLOG, IMO, LINE, NFX, OILT, PNG
QRE, RGP, RRMS, SDRL, SNP, TLP, VNR, XOM, XTXI, AHGP
</snippet></ROW><ROW><id>17375569</id><snippet>import csv
from itertools import zip_longest

n=10
with open('/tmp/rawdata.txt','r') as fin, open('/tmp/out.csv','w') as fout:
    reader=csv.reader(fin)
    writer=csv.writer(fout) 
    source=(e for line in reader for e in line)             
    for t in zip_longest(*[source]*n):
        writer.writerow(list(e for e in t if e))
</snippet></ROW><ROW><id>17375569</id><snippet>n</snippet></ROW><ROW><id>17375569</id><snippet>n</snippet></ROW><ROW><id>17375851</id><snippet>or</snippet></ROW><ROW><id>17375851</id><snippet>if x == "monkey" or x == "monkeys":
    print "You're right, they are awesome!!"
else:
    print "I'm sorry, you're incorrect.", x[0].upper() + x[1:], "is not the right animal."
</snippet></ROW><ROW><id>17375851</id><snippet>else</snippet></ROW><ROW><id>17375851</id><snippet>elif x != "monkey" and x != "monkeys"
</snippet></ROW><ROW><id>17375969</id><snippet>$ echo '{"first_key": "value", "second_key": "value2"}' | python -c 'import sys, json; print json.load(sys.stdin)[sys.argv[1]]' first_key
value
</snippet></ROW><ROW><id>17376003</id><snippet>update()</snippet></ROW><ROW><id>17376003</id><snippet>self</snippet></ROW><ROW><id>17376003</id><snippet>slef</snippet></ROW><ROW><id>17376030</id><snippet>collections.Counter</snippet></ROW><ROW><id>17376030</id><snippet>import collections

def remove_common(x,y):
    count = lambda x: collections.Counter(c for c in x.lower() if c.isalpha())
    cx, cy = count(x), count(y)
    diff  = cx - cy
    rev_diff = cy - cx
    assert len(rev_diff) == 0, "%s in y and not x" % "".join(rev_diff.elements())

    return "".join(sorted(diff.elements()))
</snippet></ROW><ROW><id>17376030</id><snippet>&gt;&gt;&gt; c1 = collections.Counter("hello world")
&gt;&gt;&gt; c2 = collections.Counter("hey worlds")
&gt;&gt;&gt; c1 - c2
Counter({'l': 2, 'o': 1})
&gt;&gt; (c1 - c2).elements()
['l', 'l', 'o']
</snippet></ROW><ROW><id>17376296</id><snippet>if</snippet></ROW><ROW><id>17376296</id><snippet>Time = Time - Sub
FGA = FGA + 1
</snippet></ROW><ROW><id>17376296</id><snippet>pos=random.randint(0,4)
Sub = random.randint(4,24)

chances = [[num1HC, num2HC, num3HC],
           [num1HPF, num2HPF, num3HPF],
           [num1HSF, num2HSF, num2HSF],
           [num1HSG, num2HSG, num3HSG],
           [num1HPG, num2HPG, num3HPG]]

messages = [["hits a three!", "misses from deep."]
            ["nails the long two.", "comes up short from mid range."],
            [["backs down " + AT[pos][14] + "and lays it in for two.",
              "misses from close range."]]
points = [3, 2, 2]

sht=random.randint(1,3)
chance=random.randint(1,100)

if chance &lt;= chances[pos][sht]:
    print HT[pos][14], messages[sht][0]
    HTS = HTS + points[sht]
else:
    print HT[pos][14], messages[sht][1]
</snippet></ROW><ROW><id>17376296</id><snippet>HT</snippet></ROW><ROW><id>17376296</id><snippet>AT</snippet></ROW><ROW><id>17376296</id><snippet>teams = [HT, AT]
team_scores = [HTS, ATS]
</snippet></ROW><ROW><id>17376296</id><snippet>HT</snippet></ROW><ROW><id>17376296</id><snippet>teams[t]</snippet></ROW><ROW><id>17376296</id><snippet>HTS</snippet></ROW><ROW><id>17376296</id><snippet>team_scores[t]</snippet></ROW><ROW><id>17376296</id><snippet>t</snippet></ROW><ROW><id>17376296</id><snippet>for t in range(2):
    # all your logic here
</snippet></ROW><ROW><id>17376296</id><snippet>Team</snippet></ROW><ROW><id>17376296</id><snippet>Player</snippet></ROW><ROW><id>17376384</id><snippet>import unittest
from getpass import getpass

class TestCommon(unittest.TestCase):
    pwd = getpass()

class test_A(TestCommon):
    def test_a(self):
        self.assertEqual(self.pwd, 'secret')

class test_B(TestCommon):
    def test_b(self):
        reversed_pwd = self.pwd[::-1]
        self.assertEqual(reversed_pwd, 'terces')
</snippet></ROW><ROW><id>17376384</id><snippet>self.pwd</snippet></ROW><ROW><id>17376384</id><snippet>TestCommon.pwd</snippet></ROW><ROW><id>17376723</id><snippet>from Tkinter import *
from ttk import *
import time

root = Tk()
root.geometry('1000x900')
root.title("Astronomical Observing Recording Program")
frame1 = Frame(root, name='frame1')
frame1.pack(fill=BOTH)


welcome_message = "Hi" #shortened


root.protocol("WM_DELETE_WINDOW", frame1.quit)
nb = Notebook(frame1, name='nb')
nb.pack(fill=BOTH, padx=2, pady=3)

welcome_screen = Frame(nb, name='welcome_screen')
Label(welcome_screen, text=welcome_message).pack(side=LEFT)
nb.add(welcome_screen, text='Welcome')

time_screen = Frame(frame1, name='time_screen')
lb_current_time = Label(time_screen)
lb_current_time.pack(side=TOP)
lb_gmt_time = Label(time_screen)
lb_gmt_time.pack(side=TOP)
nb.add(time_screen, text='Time Bar')

def update_time():
    localtime = time.asctime(time.localtime(time.time()))
    gmttime = time.asctime(time.gmtime(time.time()))
    current_time = "The current time is: " + localtime
    gmt_time = "The current GMT time is: " + gmttime
    lb_current_time['text'] = current_time
    lb_gmt_time['text'] = gmt_time
    root.after(1000, update_time)
update_time()


frame1.mainloop()
</snippet></ROW><ROW><id>17377101</id><snippet>app = create_flask_app()
response = app.test_client().get('/test/url')
# test response
</snippet></ROW><ROW><id>17377101</id><snippet>current_app</snippet></ROW><ROW><id>17377101</id><snippet>g</snippet></ROW><ROW><id>17377101</id><snippet>url_for</snippet></ROW><ROW><id>17377101</id><snippet>app = create_flask_app()
with app.app_context():
    # test your app context code
</snippet></ROW><ROW><id>17377101</id><snippet>request</snippet></ROW><ROW><id>17377101</id><snippet>session</snippet></ROW><ROW><id>17377101</id><snippet>with current_app.test_request_context():
    # test your request context code
</snippet></ROW><ROW><id>17377101</id><snippet>flask-testing</snippet></ROW><ROW><id>17377425</id><snippet>project_name</snippet></ROW><ROW><id>17377425</id><snippet>InstituteForm.project_name</snippet></ROW><ROW><id>17377425</id><snippet>form = InstituteForm(institue_name="cambridge",
                     project_name=dict(name="test name"),
                     email=["email@gmail", "email@gmail"])
</snippet></ROW><ROW><id>17377425</id><snippet>class Project(object):
    name = "test"
    workflow = ["test1", "test2"]

form = InstituteForm(institue_name="cambridge",
                     project_name=Project(),
                     email=["email@gmail", "email@gmail"])
</snippet></ROW><ROW><id>17377425</id><snippet>class Project(object):
    name = "test"
    workflow = ["test1", "test2"]

class Institute(object):
    institue_name = "cambridge"
    project_name = Project()
    email = ["email@gmail", "email@gmail"]

form = InstituteForm(obj=Institute())
</snippet></ROW><ROW><id>17377425</id><snippet>obj</snippet></ROW><ROW><id>17377425</id><snippet>**kwargs</snippet></ROW><ROW><id>17377680</id><snippet>&gt;&gt;&gt;new_dict[0][1], new_dict[0][3] 
('R', 'S')
</snippet></ROW><ROW><id>17377680</id><snippet>&gt;&gt;&gt;new_dict[1][5], new_dict[1][7]
IndexError: list index out of range
</snippet></ROW><ROW><id>17377680</id><snippet>&gt;&gt;&gt;new_dict[1]
['p3', 'R', 'p4', 'P']
</snippet></ROW><ROW><id>17377680</id><snippet>&gt;&gt;&gt;new_dict[1][0],new_dict[1][1],new_dict[1][2],new_dict[1][3]
('p3', 'R', 'p4', 'P')
</snippet></ROW><ROW><id>17377683</id><snippet>header</snippet></ROW><ROW><id>17377683</id><snippet>SMTP.sendmail(..., to_addrs, ...)</snippet></ROW><ROW><id>17377919</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; L = [
... "/path1/path2/path3/example_1.edf", 
... "/path1/path2/path3/example_1.v",
... "/path1/path2/path3/exa_4mple_1.sv", 
... "/path1/path2/path3/example_1.vh" ]
&gt;&gt;&gt; for mypath in L:
...     if mypath.split('.')[-1] in ('v', 'sv', 'vh'):
...             print os.path.split(mypath)[1]
... 
example_1.v
exa_4mple_1.sv
example_1.vh
</snippet></ROW><ROW><id>17377919</id><snippet>&gt;&gt;&gt; [os.path.split(mypath)[1] 
... for mypath in L 
... if mypath.split('.')[-1] in ('v', 'sv', 'vh')]
['example_1.v', 'exa_4mple_1.sv', 'example_1.vh']
</snippet></ROW><ROW><id>17378042</id><snippet>'</snippet></ROW><ROW><id>17378042</id><snippet>&lt;li&gt;&lt;a href="{% address foo %}"&gt;foo&lt;/a&gt;&lt;/li&gt;
</snippet></ROW><ROW><id>17378150</id><snippet>1 becomes 01
</snippet></ROW><ROW><id>17378150</id><snippet>key = lambda x: '.'.join(x.split('_')[1:3]).replace('job','').replace('q','')

a[np.argsort([float(key(i)) for i in a[:,0]])]
</snippet></ROW><ROW><id>17378150</id><snippet>key()</snippet></ROW><ROW><id>17378150</id><snippet>key('BFT_job10_q0') --&gt; 10.
key('BFT_job1_q0')  --&gt; 1.
key('BFT_job13_q1') --&gt; 13.1
key('BFT_job13_q0') --&gt; 13.
</snippet></ROW><ROW><id>17378235</id><snippet>fifo.flush()</snippet></ROW><ROW><id>17378235</id><snippet>print</snippet></ROW><ROW><id>17378235</id><snippet>file.readline()</snippet></ROW><ROW><id>17378235</id><snippet>os.write()</snippet></ROW><ROW><id>17378235</id><snippet>os.read()</snippet></ROW><ROW><id>17378235</id><snippet>select()</snippet></ROW><ROW><id>17378332</id><snippet>#</snippet></ROW><ROW><id>17378332</id><snippet>&gt;&gt;&gt; import urllib3
&gt;&gt;&gt; urllib3.util.parse_url(fql_url)
Url(scheme='https', auth=None, host='graph.facebook.com', port=None, path='/fql',
    query='q={"user_sex":"SELECT sex FROM user WHERE uid=me()","friends":"SELECT uid, name FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1 = me()) AND not (sex in (SELECT sex FROM ',
    fragment='user_sex))  ORDER BY name"}')
</snippet></ROW><ROW><id>17378332</id><snippet>import requests
s = requests.Session()
s.params = {'access_token': 'foobarbaz'} # so you don't have to specify it every time
query = ('{"user_sex":"SELECT sex FROM user WHERE uid=me()",'
         '"friends":"SELECT uid, name FROM user WHERE uid IN '
         '(SELECT uid2 FROM friend WHERE uid1 = me()) '
         'AND not (sex in (SELECT sex FROM #user_sex)) '
         ' ORDER BY name"}')
s.get('https://graph.facebook.com/fql', params={'q': query})
</snippet></ROW><ROW><id>17378560</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>17378560</id><snippet>import ast

def load_sections(filename):
    with open(filename, 'r') as infile:
        for line in infile:
            if not line.startswith('header'):
                continue  # skip to the next line until we find a header

            sectionname = line.split(None, 1)[-1].strip()
            section = {}
            for line in infile:
                if line.startswith('header'):
                    break  # end of section
                line = line.strip()               
                key, value = line.split(' = ', 1)
                section[key] = ast.literal_eval(value)

            yield sectionname, section
</snippet></ROW><ROW><id>17378560</id><snippet>(name, section_dict)</snippet></ROW><ROW><id>17378560</id><snippet>for name, section in load_sections(somefilename):
    print name, section
</snippet></ROW><ROW><id>17378560</id><snippet>&gt;&gt;&gt; for name, section in load_sections('/tmp/example'):
...     print name, section
... 
one {'last_name': 'this is my last name', 'name': 'this is my name', 'addr_no': 35, 'addr': 'somewhere'}
two {'first_var': 0.001002, 'second_var': -2.002e-08}
</snippet></ROW><ROW><id>17378816</id><snippet>#define</snippet></ROW><ROW><id>17378816</id><snippet>STDIN_BASEADDRESS = 0x40600000
STDOUT_BASEADDRESS = 0x40600000

# ******************************************************************

# Definitions for driver UARTLITE
XPAR_XUARTLITE_NUM_INSTANCES = 1
</snippet></ROW><ROW><id>17378816</id><snippet>#define</snippet></ROW><ROW><id>17378816</id><snippet>=</snippet></ROW><ROW><id>17378816</id><snippet>import re
from functools import partial

replacements = (
    partial(re.compile(r'\s*#define ([A-Z_]+) (.*)').sub, r'\1 = \2'),
    partial(re.compile(r'\s*/\*\s*(.*?)\s*\*/').sub, r'# \1'),
)   

for line in inputsequence:
    for transform in replacements:
        line = transform(line)
    print line
</snippet></ROW><ROW><id>17378816</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; replacements = (
...     partial(re.compile(r'\s*#define ([A-Z_]+) (.*)').sub, r'\1 = \2'),
...     partial(re.compile(r'\s*/\*\s*(.*?)\s*\*/').sub, r'# \1'),
... )   
&gt;&gt;&gt; for line in inputsequence:
...     for transform in replacements:
...         line = transform(line)
...     print line
... 
STDIN_BASEADDRESS = 0x40600000
STDOUT_BASEADDRESS = 0x40600000

# ****************************************************************

# Definitions for driver UARTLITE
XPAR_XUARTLITE_NUM_INSTANCES = 1
</snippet></ROW><ROW><id>17378816</id><snippet>partial(re.compile(r'\s*#define ([A-Z_]+) (.*)').sub, r'def \1():\n    return \2'),
</snippet></ROW><ROW><id>17378816</id><snippet>def STDIN_BASEADDRESS():
    return 0x40600000
def STDOUT_BASEADDRESS():
    return 0x40600000

# ****************************************************************

# Definitions for driver UARTLITE
def XPAR_XUARTLITE_NUM_INSTANCES():
    return 1
</snippet></ROW><ROW><id>17378859</id><snippet>raise SyntaxError('%s/%s does not define class %s' % (__name__, py, clsn))
</snippet></ROW><ROW><id>17378879</id><snippet>freetds-dev</snippet></ROW><ROW><id>17378879</id><snippet>pymssql</snippet></ROW><ROW><id>17378879</id><snippet>$ sudo apt-get install freetds-dev
</snippet></ROW><ROW><id>17378879</id><snippet>$ pip install pymssql
</snippet></ROW><ROW><id>17379074</id><snippet>''.join</snippet></ROW><ROW><id>17379074</id><snippet>map</snippet></ROW><ROW><id>17379074</id><snippet>map</snippet></ROW><ROW><id>17379074</id><snippet>initial = ['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h', 'i', 'j']]
result = map(''.join, initial)
</snippet></ROW><ROW><id>17379074</id><snippet>initial = ['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h', 'i', 'j']]
result = [''.join(sublist) for sublist in initial]
</snippet></ROW><ROW><id>17379248</id><snippet>self.request.write(json.dumps(some_data))</snippet></ROW><ROW><id>17379248</id><snippet>application/json</snippet></ROW><ROW><id>17379557</id><snippet>"django.core.context_processors.static"</snippet></ROW><ROW><id>17379557</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>17379557</id><snippet>("django.contrib.auth.context_processors.auth",
"django.core.context_processors.debug",
"django.core.context_processors.i18n",
"django.core.context_processors.media",
"django.core.context_processors.static",
"django.core.context_processors.tz",
"django.contrib.messages.context_processors.messages")
</snippet></ROW><ROW><id>17379623</id><snippet>trTab</snippet></ROW><ROW><id>17379623</id><snippet>frame</snippet></ROW><ROW><id>17379623</id><snippet>import numpy as np
from numpy import subtract as s
fancy_indices = np.absolute(s.outer(frame[:,0],trTab[0,:])).argmin(axis=1)
frame[:,0] = trTab[1,:][fancy_indices]
</snippet></ROW><ROW><id>17379680</id><snippet>\d+</snippet></ROW><ROW><id>17379680</id><snippet>\d</snippet></ROW><ROW><id>17379680</id><snippet>re.compile(r'foo/(?P&lt;id&gt;\d+)/')
</snippet></ROW><ROW><id>17379907</id><snippet>x</snippet></ROW><ROW><id>17379907</id><snippet>y</snippet></ROW><ROW><id>17379907</id><snippet>np.array</snippet></ROW><ROW><id>17379907</id><snippet>import numpy as np
x = np.array(x)
y = np.array(y)
cond = (x&gt;=10) &amp; (x&lt;=20)
xFit = x[ cond ]
yFit = y[ cond ]
</snippet></ROW><ROW><id>17379926</id><snippet>form</snippet></ROW><ROW><id>17379926</id><snippet>enctype</snippet></ROW><ROW><id>17379926</id><snippet>post</snippet></ROW><ROW><id>17379926</id><snippet>&lt;form enctype="multipart/form-data" method="post" ...
</snippet></ROW><ROW><id>17380137</id><snippet>tkMessageBox</snippet></ROW><ROW><id>17380137</id><snippet>import Tkinter 
import tkMessageBox
</snippet></ROW><ROW><id>17380203</id><snippet>accents = [u'\u064b', u'\u064c', u'\u064d', u'\u064e', u'\u064f', u'\u0650', u'\u0651', u'\u0652']
alnum = r'([\w%s]+)' % re.escape(''.join(accents))
pattern = re.compile(alnum, re.UNICODE)
</snippet></ROW><ROW><id>17380203</id><snippet>&gt;&gt;&gt; test_str = "...foo" + ''.join(accents) + "...bar"
&gt;&gt;&gt; test_str
'...fooًٌٍَُِّْ...bar'
&gt;&gt;&gt; pattern.findall(test_str)
['fooًٌٍَُِّْ', 'bar']
&gt;&gt;&gt; len(_)
2
</snippet></ROW><ROW><id>17380203</id><snippet>&gt;&gt;&gt; ' '.join(filter(None, pattern.split(test_str)))
'... fooًٌٍَُِّْ ... bar'
&gt;&gt;&gt; len(_.split())
4
</snippet></ROW><ROW><id>17380217</id><snippet>==</snippet></ROW><ROW><id>17380217</id><snippet>!=</snippet></ROW><ROW><id>17380217</id><snippet>&lt;</snippet></ROW><ROW><id>17380217</id><snippet>&gt;</snippet></ROW><ROW><id>17380217</id><snippet>1 &lt; "2"</snippet></ROW><ROW><id>17380217</id><snippet>__lt__</snippet></ROW><ROW><id>17380217</id><snippet>__gt__</snippet></ROW><ROW><id>17380217</id><snippet>&gt;&gt;&gt; np.array([1, 2, 3]) &lt; np.array([1, 2])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: operands could not be broadcast together with shapes (3) (2) 
</snippet></ROW><ROW><id>17380217</id><snippet>1 &lt; "2"</snippet></ROW><ROW><id>17380217</id><snippet>TypeError</snippet></ROW><ROW><id>17380217</id><snippet>==</snippet></ROW><ROW><id>17380217</id><snippet>!=</snippet></ROW><ROW><id>17380308</id><snippet>m = re.search('href="(/profile/[^"]+)"', newp, re.IGNORECASE)
</snippet></ROW><ROW><id>17380387</id><snippet>dir(module)</snippet></ROW><ROW><id>17380387</id><snippet>getattr</snippet></ROW><ROW><id>17380387</id><snippet>callable</snippet></ROW><ROW><id>17380387</id><snippet>for name in dir(your_module):
    might_be_function = getattr(your_module, name)
    if callable(might_be_function):
        print might_be_function(your_parameters)
</snippet></ROW><ROW><id>17380387</id><snippet>try</snippet></ROW><ROW><id>17380426</id><snippet>data = re.sub(r'\n(?!\d{8})', '', data)
</snippet></ROW><ROW><id>17380426</id><snippet>import re
data = '''
12345678 foo
bar
baz
12345678 foo
'''
data = re.sub(r'\n(?!\d{8})', '', data)

print(data)
</snippet></ROW><ROW><id>17380426</id><snippet>12345678 foobarbaz
12345678 foo
</snippet></ROW><ROW><id>17380593</id><snippet>import os
os.path.realpath(__file__)
</snippet></ROW><ROW><id>17380603</id><snippet>list()</snippet></ROW><ROW><id>17380603</id><snippet>&gt;&gt;&gt; list('1111')
['1', '1', '1', '1']
</snippet></ROW><ROW><id>17380603</id><snippet>map()</snippet></ROW><ROW><id>17380603</id><snippet>&gt;&gt;&gt; map(None, '1111')
['1', '1', '1', '1']
</snippet></ROW><ROW><id>17380603</id><snippet>$ python -m timeit "list('1111')"
1000000 loops, best of 3: 0.483 usec per loop
$ python -m timeit "map(None, '1111')"
1000000 loops, best of 3: 0.431 usec per loop
</snippet></ROW><ROW><id>17380627</id><snippet>Tools &gt; Preferences &gt; Console &gt; Advanced Settings &gt; Python Executable</snippet></ROW><ROW><id>17380627</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>17380627</id><snippet>visual</snippet></ROW><ROW><id>17380696</id><snippet>bisect</snippet></ROW><ROW><id>17380696</id><snippet>def index(a, x):
    'Locate the leftmost value exactly equal to x'
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    raise ValueError
</snippet></ROW><ROW><id>17380748</id><snippet>__file__</snippet></ROW><ROW><id>17380748</id><snippet>bar.py</snippet></ROW><ROW><id>17380748</id><snippet>from os import path
open(path.join(path.dirname(__file__), "database.db"))
</snippet></ROW><ROW><id>17380838</id><snippet>In [18]: df.set_index(['x','b']).to_panel()
Out[18]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 3 (items) x 1 (major_axis) x 2 (minor_axis)
Items axis: a to d
Major_axis axis: x to x
Minor_axis axis: 1 to 2

In [19]: p1 = df.set_index(['x','b']).to_panel()
</snippet></ROW><ROW><id>17380838</id><snippet>In [20]: p1._data
Out[20]: 
BlockManager
Items: Index([u'a', u'c', u'd'], dtype=object)
Axis 1: Index([u'x'], dtype=object)
Axis 2: Int64Index([1, 2], dtype=int64)
DatetimeBlock: [c], 1 x 1 x 2, dtype datetime64[ns]
ObjectBlock: [d], 1 x 1 x 2, dtype object
IntBlock: [a], 1 x 1 x 2, dtype int64
</snippet></ROW><ROW><id>17380838</id><snippet>iloc</snippet></ROW><ROW><id>17380838</id><snippet>In [21]: p1.iloc[0].dtypes
Out[21]: 
b
1    int64
2    int64
dtype: object

In [22]: p1.iloc[:,0].dtypes
Out[22]: 
a             int64
c    datetime64[ns]
d            object
dtype: object

In [23]: p1.iloc[:,:,0].dtypes
Out[23]: 
a             int64
c    datetime64[ns]
d            object
dtype: object

In [24]: p1.iloc[:,:,0]
Out[24]: 
                  a                          c  d
x                                                
x  1371215933513120 2013-06-14 09:18:53.513120  h
</snippet></ROW><ROW><id>17380863</id><snippet>In [1079]: data = 'word,length\nTr\xe4umen,7\nGr\xfc\xdfe,5'

In [1080]: df = pd.read_csv(StringIO(data), encoding='latin-1')

In [1081]: df

      word  length
0  Träumen       7
1    Grüße       5

In [1082]: df['word'][1]
u'Gr\xfc\xdfe'
</snippet></ROW><ROW><id>17380885</id><snippet>np.einsum</snippet></ROW><ROW><id>17380885</id><snippet># arrays
EIG2D           --&gt; A
displ_red_FAN2  --&gt; B
fan_corrQ       --&gt; C

# indices
ikpt    --&gt; i
iband   --&gt; j
idir1   --&gt; k
iatom1  --&gt; l
idir2   --&gt; m
iatom2  --&gt; n
imode   --&gt; o
</snippet></ROW><ROW><id>17380885</id><snippet>np.einsum</snippet></ROW><ROW><id>17380885</id><snippet>...
fan_corrQ[imode,ikpt,iband] += EIG2D[ikpt,iband,idir1,iatom1,idir2,iatom2]*\
    displ_red_FAN2[imode,iatom1,iatom2,idir1,idir2]
...
</snippet></ROW><ROW><id>17380885</id><snippet>C = np.einsum('ijklmn,olnkm-&gt;oij',A,B)
</snippet></ROW><ROW><id>17380885</id><snippet>sgpc</snippet></ROW><ROW><id>17380953</id><snippet>import lxml.html as LH

content = '''\
&lt;div id="all-stories" class="book"&gt; 
&lt;ul&gt;

&lt;li title="Book1"  &gt;&lt;a href="book1_url"&gt;Book1&lt;/a&gt;&lt;/li&gt;

&lt;li title="Book2"  &gt;&lt;a href="book2_url"&gt;Book2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
'''
root = LH.fromstring(content)
for atag in root.xpath('//div[@id="all-stories"]//li/a'):
    print(atag.attrib['href'], atag.text_content())
</snippet></ROW><ROW><id>17380953</id><snippet>('book1_url', 'Book1')
('book2_url', 'Book2')
</snippet></ROW><ROW><id>17380953</id><snippet>//div[@id="all-stories"]/div</snippet></ROW><ROW><id>17380953</id><snippet>div</snippet></ROW><ROW><id>17380953</id><snippet>div</snippet></ROW><ROW><id>17380953</id><snippet>//div[@id="all-stories"]/li</snippet></ROW><ROW><id>17380953</id><snippet>li</snippet></ROW><ROW><id>17380953</id><snippet>div</snippet></ROW><ROW><id>17380953</id><snippet>//div[@id="all-stories"]//li</snippet></ROW><ROW><id>17380953</id><snippet>li</snippet></ROW><ROW><id>17380953</id><snippet>//</snippet></ROW><ROW><id>17380953</id><snippet>li</snippet></ROW><ROW><id>17380953</id><snippet>li</snippet></ROW><ROW><id>17380953</id><snippet>a</snippet></ROW><ROW><id>17380953</id><snippet>'//div[@id="all-stories"]//li/a'</snippet></ROW><ROW><id>17380953</id><snippet>a</snippet></ROW><ROW><id>17380953</id><snippet>href</snippet></ROW><ROW><id>17380953</id><snippet>atag.attrib['href']</snippet></ROW><ROW><id>17380953</id><snippet>atag.text_content()</snippet></ROW><ROW><id>17381075</id><snippet>^</snippet></ROW><ROW><id>17381075</id><snippet>&gt;&gt;&gt; 2^3
1
</snippet></ROW><ROW><id>17381075</id><snippet>BitVec</snippet></ROW><ROW><id>17381075</id><snippet>x = BitVec('x', 32)
y = BitVec('y', 32)

solve(x^y==2, show=True)
</snippet></ROW><ROW><id>17381095</id><snippet>snap.split(' ')</snippet></ROW><ROW><id>17381095</id><snippet>snap, err = epoch.communicate()
print "\nEpoch\t\tTime"
for stamp,_,_,_,snaptime,_ in zip(*[iter(snap.split(' '))]*6):
    print('{}\t{}'.format(stamp, snaptime))
</snippet></ROW><ROW><id>17381095</id><snippet>zip(*[iter(s)]*n)</snippet></ROW><ROW><id>17381095</id><snippet>n</snippet></ROW><ROW><id>17381144</id><snippet>*args</snippet></ROW><ROW><id>17381144</id><snippet>function func (a, b /*, *args*/) {
    var star_args = Array.prototype.slice.call (arguments, func.length);
    /* now star_args[0] is the first undeclared argument */
}
</snippet></ROW><ROW><id>17381144</id><snippet>Function.length</snippet></ROW><ROW><id>17381144</id><snippet>function get_star_args (func, args) {
    return Array.prototype.slice.call (args, func.length);
}
</snippet></ROW><ROW><id>17381144</id><snippet>function func (a, b /*, *args*/) {
    var star_args = get_star_args (func, arguments);
    /* now star_args[0] is the first undeclared argument */
}
</snippet></ROW><ROW><id>17381144</id><snippet>function argsify(fn){
    return function(){
        var args_in   = Array.prototype.slice.call (arguments); //args called with
        var required  = args_in.slice (0,fn.length-1);     //take first n   
        var optional  = args_in.slice (fn.length-1);       //take remaining optional
        var args_out  = required;                          //args to call with
        args_out.push (optional);                          //with optionals as array
        return fn.apply (0, args_out);
    };
}
</snippet></ROW><ROW><id>17381144</id><snippet>// original function
function myfunc (a, b, star_args) {
     console.log (a, b, star_args[0]); // will display 1, 2, 3
}

// argsify it
function argsified_myfunc = argsify (myfunc);

// call argsified function
argsified_myfunc (1, 2, 3);
</snippet></ROW><ROW><id>17381144</id><snippet>myfunc (1, 2, [3]);
</snippet></ROW><ROW><id>17381144</id><snippet>**kwargs</snippet></ROW><ROW><id>17381144</id><snippet>function myfunc (a, b, starstar_kwargs) {
    console.log (a, b, starstar_kwargs.x);
}

myfunc (1, 2, {x:3};
</snippet></ROW><ROW><id>17381209</id><snippet>Object.keys()</snippet></ROW><ROW><id>17381209</id><snippet>&gt; Object.keys(window)
["top", "window", "location", "external", "chrome", "Intl", "v8Intl", "document", "$", "jQuery", "MSIsPlayback", "i", "prepareEditor", "StackExchange", "scriptSrc", "careers_adurl", "careers_cssurl", "careers_leaderboardcssurl", "careers_companycssurl", "careers_adselector", "_gaq", "_qevents", "jQuery171008060155878774822", "__qc", "quantserve", "uh", "_gat", "gaGlobal", "gauth", "genuwine", "moveScroller", "styleCode", "sanitizeAndSplitTags", "initTagRenderer", "showFadingHelpText", "initFadingHelpText", "profileLink", "EventEmitter", "votesCast", "tagRendererRaw", "tagRenderer", "ytCinema", "IN_GLOBAL_SCOPE", "prettyPrintOne", "prettyPrint", "PR_SHOULD_USE_CONTINUATION", "PR", "Markdown", "apiCallbacks"]
</snippet></ROW><ROW><id>17381471</id><snippet>confidence = int(p[1].strip())
</snippet></ROW><ROW><id>17381476</id><snippet>def checkio(stones):
    def subcheckio(stones, left, rite):
        if len(stones) == 0:
            return abs(left - rite)

        scores = []
        nstones = stones[1:]
        scores.append(subcheckio(nstones, left + stones[0], rite))
        scores.append(subcheckio(nstones, left, rite + stones[0]))

        return min(scores)

    return subcheckio(stones, 0, 0)
</snippet></ROW><ROW><id>17381476</id><snippet>import itertools

def checkio(data):
    s = reduce(lambda x,y:x+y,data) # s is the sum, you don't need a loop
    half_sum = s / 2

    # instead of random.sample, using itertools to find all possible combinations
    # of all possibles lenghts
    perms = []
    for i in range(len(data) + 1):
        p = itertools.combinations(data, i)
        perms += p

    # min of a list comprehension to find the minimal sum &gt;= half_sum
    m = min([a for a in map(sum, perms) if a &gt;= half_sum])
    # that's the sum of "what's left", members of the list no in the choosen sum
    n = s - m
    # we want the difference between the two
    return abs(n - m)
</snippet></ROW><ROW><id>17381529</id><snippet>In [4]: mapper = dict(a = 'ac', b = 'bd', c = 'ac', d = 'bd')

In [5]: df['C'] = [ mapper[x] for x in df['A'] ]

In [6]: df
Out[6]: 
   A  B   C
0  a  1  ac
1  b  2  bd
2  c  3  ac
3  a  5  ac
4  d  6  bd
</snippet></ROW><ROW><id>17381655</id><snippet>render_template</snippet></ROW><ROW><id>17381655</id><snippet>def render_template(template_name_or_list, **context):

    # get  request context
    ctx = _request_ctx_stack.top

    # check request context
    # if function called without request context
    # then call with `test_tequest_context`
    # this because I send email from celery tasks
    if ctx is None:
        with current_app.test_request_context():
            return render_template(template_name_or_list, **context)

    # I have specific locale detection (from url)
    # and also use `lang` variable in template for `url_for` links
    # so you can just pass language parameter without context parameter
    # and always set `babel_locate` with passed language
    locale = getattr(ctx, 'babel_locale', None)
    if locale is None:
        ctx.babel_locale = Locale.parse(context['lang'])

    # render template without additinals context processor
    # because I don't need this context for emails
    # (compare with default flask `render_template` function)
    return _render(ctx.app.jinja_env.get_or_select_template(
        template_name_or_list), context, ctx.app)
</snippet></ROW><ROW><id>17381655</id><snippet>get_locale</snippet></ROW><ROW><id>17381655</id><snippet>def set_langauge(lang)
    ctx = _request_ctx_stack.top
    ctx.babel_locale = Locale.parse(lang)
</snippet></ROW><ROW><id>17381731</id><snippet>e.pdf</snippet></ROW><ROW><id>17381731</id><snippet>m.pdf</snippet></ROW><ROW><id>17381731</id><snippet>a.pdf</snippet></ROW><ROW><id>17381731</id><snippet>a.pdf</snippet></ROW><ROW><id>17381936</id><snippet>from tkinter import *
from tkinter.ttk import *

def isPrime(num):
    return all(num % i for i in range(2, num))

def startSearching():
    primes = []
    for i in range(100000):
        if isPrime(i):
            primes.append(i)
            displayedText.set(len(primes))
            label.update_idletasks()
    displayedText.set('Scan is done.')

root = Tk()

displayedText = StringVar()

label = Label(root, textvariable=displayedText)
label.grid()

root.after(0, startSearching)
root.mainloop()
</snippet></ROW><ROW><id>17382155</id><snippet>url_for</snippet></ROW><ROW><id>17382155</id><snippet>import urlparse

def image_repo_url_for(filename):
    if app.config['PRODUCTION']:
       return urlparse.urljoin(app.config['IMG_HOST_PROD'], filename)
    else:
       return urlparse.urljoin(app.config['IMG_HOST_DEV'], filename)
</snippet></ROW><ROW><id>17382155</id><snippet>app.jinja_env.globals.update(image_repo_url_for=image_repo_url_for)
</snippet></ROW><ROW><id>17382363</id><snippet>shutdown</snippet></ROW><ROW><id>17382363</id><snippet>serve_forever</snippet></ROW><ROW><id>17382363</id><snippet>serve_forever</snippet></ROW><ROW><id>17382363</id><snippet>while True:
    httpd.serve_forever()
</snippet></ROW><ROW><id>17382363</id><snippet>True</snippet></ROW><ROW><id>17382363</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>17382363</id><snippet>False</snippet></ROW><ROW><id>17382363</id><snippet>httpd.shutdown()</snippet></ROW><ROW><id>17382372</id><snippet>etalone = "String to find"
etalone_length = len(etalone)
counter = 0
for symbol in your_line:
    if symbol == etalone[counter]:
        counter += 1
        if counter == etalone_length:
            print("String matches")
            break
    elif symbol != " " and sybmol != "#":
        # Bad char found
        print("Does not match!")
else:  # exited 'for' before full etalone matched
    print("Does not match!")
</snippet></ROW><ROW><id>17382372</id><snippet>a#b##ca#d#f</snippet></ROW><ROW><id>17382372</id><snippet>adf</snippet></ROW><ROW><id>17382372</id><snippet>a</snippet></ROW><ROW><id>17382372</id><snippet>a</snippet></ROW><ROW><id>17382372</id><snippet>break</snippet></ROW><ROW><id>17382483</id><snippet>:memory:</snippet></ROW><ROW><id>17382483</id><snippet>:memory:</snippet></ROW><ROW><id>17382483</id><snippet>:memory:</snippet></ROW><ROW><id>17382483</id><snippet>ramfs</snippet></ROW><ROW><id>17382483</id><snippet>:memory:</snippet></ROW><ROW><id>17382504</id><snippet>plt.xticks(())
plt.yticks(())
</snippet></ROW><ROW><id>17382665</id><snippet>str()</snippet></ROW><ROW><id>17382665</id><snippet>unicode()</snippet></ROW><ROW><id>17382665</id><snippet>print jsonline[key].encode('utf-8')
</snippet></ROW><ROW><id>17382665</id><snippet>print unicode(jsonline[key]).encode('utf-8')
</snippet></ROW><ROW><id>17382665</id><snippet>str()</snippet></ROW><ROW><id>17382665</id><snippet>ascii</snippet></ROW><ROW><id>17382665</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>17382665</id><snippet>unicode()</snippet></ROW><ROW><id>17382667</id><snippet>b = re.compile('\/\*(.*?)\*/', re.M|re.S)
</snippet></ROW><ROW><id>17382983</id><snippet>include()</snippet></ROW><ROW><id>17382983</id><snippet>urls.py</snippet></ROW><ROW><id>17382983</id><snippet>myblog.views.getLatest</snippet></ROW><ROW><id>17382983</id><snippet>urlpatterns = patterns('',
    (r'^login/', include(admin.site.urls)),
    (r'^$', 'myblog.views.getLatest'),
)
</snippet></ROW><ROW><id>17382983</id><snippet>include()</snippet></ROW><ROW><id>17383140</id><snippet>True</snippet></ROW><ROW><id>17383140</id><snippet>1</snippet></ROW><ROW><id>17383140</id><snippet>False</snippet></ROW><ROW><id>17383140</id><snippet>0</snippet></ROW><ROW><id>17383140</id><snippet>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; False == 0
True
</snippet></ROW><ROW><id>17383140</id><snippet>&gt;&gt;&gt; issubclass(bool, int)
True
&gt;&gt;&gt; True * 5
5
</snippet></ROW><ROW><id>17383140</id><snippet>is</snippet></ROW><ROW><id>17383140</id><snippet>True</snippet></ROW><ROW><id>17383140</id><snippet>1</snippet></ROW><ROW><id>17383206</id><snippet>workQueue</snippet></ROW><ROW><id>17383206</id><snippet>Queue</snippet></ROW><ROW><id>17383336</id><snippet>matplotlib.patches.ConnectionPatch</snippet></ROW><ROW><id>17383336</id><snippet>for</snippet></ROW><ROW><id>17383336</id><snippet>xys_bot = []
xys_top = []
</snippet></ROW><ROW><id>17383336</id><snippet>for</snippet></ROW><ROW><id>17383336</id><snippet>for i in Wells:
    #
    #...
    #
    xys_bot.append( ((x.max() - x.min())/2., 15) )
    xys_top.append( ((x.max() - x.min())/2., zone) )
    if i &gt; 0:
        # bottom line
        p = ConnectionPatch(xyA = xys_bot[i-1], xyB = xys_bot[i],
               coordsA='data', coordsB='data',
               axesA=fig.axes[i-1], axesB=ax,
               arrowstyle='-')
        ax.add_artist(p)
        # top line
        p = ConnectionPatch(xyA = xys_top[i-1], xyB = xys_top[i],
               coordsA='data', coordsB='data',
               axesA=fig.axes[i-1], axesB=ax,
               arrowstyle='-')
        ax.add_artist(p)

plt.draw()
plt.show()
</snippet></ROW><ROW><id>17383359</id><snippet>\r</snippet></ROW><ROW><id>17383359</id><snippet>r''</snippet></ROW><ROW><id>17383359</id><snippet>right_fin = image.load('C:\\Users\\Ben\\Pictures\\right.png').convert()
right_fin = image.load('C:/Users/Ben/Pictures/right.png').convert()
right_fin = image.load(r'C:\Users\Ben\Pictures\right.png').convert()
</snippet></ROW><ROW><id>17383415</id><snippet>In [140]: df = pd.DataFrame({'a': [1,2,3,4,5,6], 'b': ['y','x','y','x','y', 'y']})

In [141]: df
Out[141]: 
   a  b
0  1  y
1  2  x
2  3  y
3  4  x
4  5  y
5  6  y
</snippet></ROW><ROW><id>17383415</id><snippet>In [142]: df['c'] = df.loc[df['b']=='x','a'].apply(lambda v: v if v &lt; len(df) else np.nan)
</snippet></ROW><ROW><id>17383415</id><snippet>In [143]: df['c'] = df['c'].ffill().fillna(0)

In [144]: df
Out[144]: 
   a  b  c
0  1  y  0
1  2  x  2
2  3  y  2
3  4  x  4
4  5  y  4
5  6  y  4
</snippet></ROW><ROW><id>17383481</id><snippet>sys.argv</snippet></ROW><ROW><id>17383481</id><snippet>int()</snippet></ROW><ROW><id>17383481</id><snippet>num1 = int(argv[1])
num2 = int(argv[2])
</snippet></ROW><ROW><id>17383481</id><snippet>num1, num2 = int(num1), int(num2)
</snippet></ROW><ROW><id>17383481</id><snippet>int()</snippet></ROW><ROW><id>17383736</id><snippet>class A(object):
    parent = None


class B(object):
    def __init__(self, child):
        self.child = child
        child.parent = self
</snippet></ROW><ROW><id>17383736</id><snippet>A</snippet></ROW><ROW><id>17383736</id><snippet>self.parent</snippet></ROW><ROW><id>17383736</id><snippet>None</snippet></ROW><ROW><id>17383736</id><snippet>B</snippet></ROW><ROW><id>17383736</id><snippet>self.child</snippet></ROW><ROW><id>17383736</id><snippet>A</snippet></ROW><ROW><id>17383736</id><snippet>B</snippet></ROW><ROW><id>17383776</id><snippet>ITEM_PIPELINES</snippet></ROW><ROW><id>17383776</id><snippet>process_item</snippet></ROW><ROW><id>17383776</id><snippet>def process_item(self, item, spider): 
    if spider.name not in ['spider1', 'spider2']: 
        return item  

    # process item
</snippet></ROW><ROW><id>17383776</id><snippet>ITEM_PIPELINES</snippet></ROW><ROW><id>17383776</id><snippet>crawler.configure()</snippet></ROW><ROW><id>17384164</id><snippet>GetFriends</snippet></ROW><ROW><id>17384164</id><snippet>users = [u.id for u in api.GetFriends()]
for userID in UserIDs:
    if userID not in users:
        api.CreateFriendship(userID)
</snippet></ROW><ROW><id>17384164</id><snippet>try/except</snippet></ROW><ROW><id>17384164</id><snippet>for userID in UserIDs:
    try:
        api.CreateFriendship(userID)
    except TwitterError:
        continue
</snippet></ROW><ROW><id>17384192</id><snippet>python: 2.6.2 (r262:71605, Apr 14 2009, 22:40:02) [MSC v.1500 32 bit (Intel)]
sqlalchemy: 0.7.8
Value stored as Boolean:
SqlAlchemy ORM: Total time for 40000 records 8.84400010109 secs
SqlAlchemy Core: Total time for 40000 records 0.725000143051 secs
Value stored as Integer:
SqlAlchemy ORM: Total time for 40000 records 8.0680000782 secs
SqlAlchemy Core: Total time for 40000 records 0.443000078201 secs
</snippet></ROW><ROW><id>17384192</id><snippet>python: 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)]
sqlalchemy: 0.8.1
Value stored as Boolean:
SqlAlchemy ORM: Total time for 40000 records 9.69299983978 secs
SqlAlchemy Core: Total time for 40000 records 0.572000026703 secs
Value stored as Integer:
SqlAlchemy ORM: Total time for 40000 records 9.35899996758 secs
SqlAlchemy Core: Total time for 40000 records 0.40700006485 secs
</snippet></ROW><ROW><id>17384192</id><snippet>python: 3.2.3 (default, Apr 11 2012, 07:15:24) [MSC v.1500 32 bit (Intel)]
sqlalchemy: 0.8.1
Value stored as Boolean:
SqlAlchemy ORM: Total time for 40000 records 8.531000137329102 secs
SqlAlchemy Core: Total time for 40000 records 0.7139999866485596 secs
Value stored as Integer:
SqlAlchemy ORM: Total time for 40000 records 8.023000001907349 secs
SqlAlchemy Core: Total time for 40000 records 0.44099998474121094 secs
</snippet></ROW><ROW><id>17384304</id><snippet>&lt;xsl:value-of select="header"/&gt;</snippet></ROW><ROW><id>17384304</id><snippet>&lt;Text&gt;</snippet></ROW><ROW><id>17384304</id><snippet>&lt;xsl:when test="@nav_info='foo'"&gt;
    &lt;xsl:for-each select="Text/*"&gt;
       &lt;xsl:value-of select="."&gt;
    &lt;/xsl:for-each&gt;
&lt;/xsl:when&gt;
</snippet></ROW><ROW><id>17384304</id><snippet>&lt;header&gt;</snippet></ROW><ROW><id>17384304</id><snippet>&lt;para&gt;</snippet></ROW><ROW><id>17384304</id><snippet>&lt;xsl:when test="@nav_info='foo'"&gt;
    &lt;xsl:for-each select="Text/header | Text/para"&gt;
       &lt;xsl:value-of select="."&gt;
    &lt;/xsl:for-each&gt;
&lt;/xsl:when&gt;
</snippet></ROW><ROW><id>17384304</id><snippet>|</snippet></ROW><ROW><id>17384325</id><snippet>class SmartList(list):
    def __init__(self, *args, **kwargs):
        super(SmartList, self).__init__(*args, **kwargs)
        self.iterators = []

    def __iter__(self):
        return SmartListIter(self)

    def __delitem__(self, index):
        super(SmartList, self).__delitem__(index)
        for iterator in self.iterators:
            iterator.item_deleted(index)
</snippet></ROW><ROW><id>17384325</id><snippet>list</snippet></ROW><ROW><id>17384325</id><snippet>item_deleted</snippet></ROW><ROW><id>17384325</id><snippet>self.iterators</snippet></ROW><ROW><id>17384325</id><snippet>SmartListIter</snippet></ROW><ROW><id>17384325</id><snippet>class SmartListIter(object):
    def __init__(self, smartlist, index=0):
        self.smartlist = smartlist
        smartlist.iterators.append(self)
        self.index = index

    def __iter__(self):
        return self

    def next(self):
        try:
            item = self.smartlist[self.index]
        except IndexError:
            self.smartlist.iterators.remove(self)
            raise StopIteration
        index = self.index
        self.index += 1
        return (index, item)

    def item_deleted(self, index):
        if index &gt;= self.index:
            return
        self.index -= 1
</snippet></ROW><ROW><id>17384325</id><snippet>next</snippet></ROW><ROW><id>17384325</id><snippet>(index, item)</snippet></ROW><ROW><id>17384325</id><snippet>enumerate</snippet></ROW><ROW><id>17384325</id><snippet>class LinePair(object):
    def __init__(self, pair):
        self.pair = pair
        self.sets = [set(line.split()) for line in pair]
        self.c = len(self.sets[0]) * len(self.sets[1])

    def overlap(self, other):
        ab = float(len(self.sets[0] &amp; other.sets[0]) * \
            len(self.sets[1] &amp; other.sets[1]))
        overlap = ab / (self.c + other.c - ab)
        return overlap

    def __str__(self):
        return "".join(self.pair)
</snippet></ROW><ROW><id>17384325</id><snippet>pair</snippet></ROW><ROW><id>17384325</id><snippet>c</snippet></ROW><ROW><id>17384325</id><snippet>d</snippet></ROW><ROW><id>17384325</id><snippet>c</snippet></ROW><ROW><id>17384325</id><snippet>from itertools import izip

with open("iuputfile.txt") as fileobj:
    pairs = SmartList([LinePair(pair) for pair in izip(fileobj, fileobj)])

for first_index, first_pair in pairs:
    for second_index, second_pair in SmartListIter(pairs, first_index + 1):
        if first_pair.overlap(second_pair) &gt; 0.25:
            del pairs[second_index]

with open("outputfile.txt", "w") as fileobj:
    for index, pair in pairs:
        fileobj.write(str(pair))
</snippet></ROW><ROW><id>17384325</id><snippet>izip</snippet></ROW><ROW><id>17384403</id><snippet>get_success_url</snippet></ROW><ROW><id>17384403</id><snippet>def get_success_url(self):
    return reverse('profile-list')
</snippet></ROW><ROW><id>17384403</id><snippet>reverse</snippet></ROW><ROW><id>17384403</id><snippet>urls.py</snippet></ROW><ROW><id>17384457</id><snippet>global</snippet></ROW><ROW><id>17384457</id><snippet>nonlocal</snippet></ROW><ROW><id>17384457</id><snippet>x=3
class A:
    def __init__(self):
        A.x = 5

    def foo(self):
        print(x)

a=A()
a.foo()
</snippet></ROW><ROW><id>17384457</id><snippet>A.x</snippet></ROW><ROW><id>17384457</id><snippet>print(x)</snippet></ROW><ROW><id>17384457</id><snippet>a.foo()</snippet></ROW><ROW><id>17384457</id><snippet>A.x</snippet></ROW><ROW><id>17384457</id><snippet>classvar</snippet></ROW><ROW><id>17384457</id><snippet>global</snippet></ROW><ROW><id>17384457</id><snippet>nonlocal</snippet></ROW><ROW><id>17384457</id><snippet>nonlocal classvar</snippet></ROW><ROW><id>17384502</id><snippet>$str = "[hello [world]] abc [123] [xyz jkl]";

my @matches = $str =~ /[^\[\]\s]+ | \[ (?: (?R) | [^\[\]]+ )+ \] /gx;

foreach (@matches) {
    print "$_\n";
}
</snippet></ROW><ROW><id>17384502</id><snippet>pyparsing</snippet></ROW><ROW><id>17384504</id><snippet>patch</snippet></ROW><ROW><id>17384504</id><snippet>data = cellfun(@(x) textscan(x, '%f')', importdata('data.txt', sprintf('\n')));
rowLen = cellfun(@numel, data);
nPoints = sum(rowLen);

centerCells = arrayfun(@(l,r) [(-l+1:2:l-1)'*sin(pi/3) -r*1.5*ones(l,1)], ...
    rowLen', 1:numel(rowLen), 'UniformOutput', false);
centers = vertcat(centerCells{:});

hx = linspace(0,2*pi,7)'; 
vertices = reshape(...
            bsxfun(@plus, permute(sin([hx pi/2+hx]), [1 3 2]), ...
                          permute(centers, [3 1 2])), 7 * nPoints, 2);
faces = reshape(1:7*nPoints, 7, nPoints)';
colorData = vertcat(data{:});

patch('Vertices', vertices, 'Faces', faces, ...
    'FaceColor', 'flat', 'FaceVertexCData', colorData); 
axis equal
</snippet></ROW><ROW><id>17384757</id><snippet>etc/init</snippet></ROW><ROW><id>17384757</id><snippet>myfile.conf</snippet></ROW><ROW><id>17384757</id><snippet>description "watch folder service"
author      "Jonathan Topf"

start on startup

stop on shutdown

# Automatically Respawn:
respawn
respawn limit 99 5

script
    HOST=`hostname`
    chdir /home/ubuntu/Dropbox/Render\ Farm\ 1/appleseed/bin
    exec /usr/bin/python ./watchfolder.py -t ./appleseed.cli -u $HOST ../../data/  &gt;&gt; /home/ubuntu/bin/ec2_server.log 2&gt;&amp;1
    echo "watch_folder started"
end script
</snippet></ROW><ROW><id>17384815</id><snippet>.values</snippet></ROW><ROW><id>17384815</id><snippet>.values</snippet></ROW><ROW><id>17384815</id><snippet>np.unique</snippet></ROW><ROW><id>17384815</id><snippet>In [169]: x = df_mwe.drop_duplicates(cols='one', take_last = True)

In [170]: x
Out[170]: 
   one two
0    1   a
2    2   c
3    3   d
4    4   d
5    5   d

In [171]: np.unique(x['two'],return_inverse=True)
Out[171]: 
(two
0        a
1      NaN
2        c
3        d
Name: two, dtype: object,
 array([0, 1, 2, 3, 3]))

In [172]: np.unique(x['two'].values,return_inverse=True)
Out[172]: (array(['a', 'c', 'd'], dtype=object), array([0, 1, 2, 2, 2]))
</snippet></ROW><ROW><id>17384815</id><snippet>In [182]: Index(x['two'].unique()).get_indexer_non_unique(x['two'])
Out[182]: (Int64Index([0, 1, 2, 2, 2], dtype=int64), array([], dtype=int64))
</snippet></ROW><ROW><id>17384843</id><snippet>BaseMenu</snippet></ROW><ROW><id>17384843</id><snippet>hasattr()</snippet></ROW><ROW><id>17384910</id><snippet>numpy.save</snippet></ROW><ROW><id>17384910</id><snippet>numpy.array_str(array[i], max_line_width=1000000)
</snippet></ROW><ROW><id>17385091</id><snippet>.readlines()</snippet></ROW><ROW><id>17385091</id><snippet>str.strip()</snippet></ROW><ROW><id>17385091</id><snippet>filename = input("Please enter file name to extract data from: ")
with open(filename) as f:
    tickers_list = f.readlines()    # .readlines() returns a list *already*

print(tickers_list[0].strip())
url = "http://ichart.finance.yahoo.com/table.csv?s=%s&amp;a=00&amp;b=1&amp;c=2011&amp;d=05&amp;e=28&amp;f=2013&amp;g=d&amp;ignore=.csv" % tickers_list[0].strip()
print(url)

response = urllib.request.urlopen(url)
html = response.read()
print(html)
</snippet></ROW><ROW><id>17385091</id><snippet>str()</snippet></ROW><ROW><id>17385091</id><snippet>tickers_list[0]</snippet></ROW><ROW><id>17385091</id><snippet>%s</snippet></ROW><ROW><id>17385091</id><snippet>\n</snippet></ROW><ROW><id>17385091</id><snippet>repr()</snippet></ROW><ROW><id>17385091</id><snippet>&gt;&gt;&gt; url = "http://ichart.finance.yahoo.com/table.csv?s=%s&amp;a=00&amp;b=1&amp;c=2011&amp;d=05&amp;e=28&amp;f=2013&amp;g=d&amp;ignore=.csv" % 'GOOG\n'
&gt;&gt;&gt; print(repr(url))
'http://ichart.finance.yahoo.com/table.csv?s=GOOG\n&amp;a=00&amp;b=1&amp;c=2011&amp;d=05&amp;e=28&amp;f=2013&amp;g=d&amp;ignore=.csv'
&gt;&gt;&gt; urllib.request.urlopen(url)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Libraries/buildout.python/parts/opt/lib/python3.3/urllib/request.py", line 156, in urlopen
    return opener.open(url, data, timeout)
  File "/Users/mj/Development/Libraries/buildout.python/parts/opt/lib/python3.3/urllib/request.py", line 467, in open
    req = meth(req)
  File "/Users/mj/Development/Libraries/buildout.python/parts/opt/lib/python3.3/urllib/request.py", line 1172, in do_request_
    raise URLError('no host given')
urllib.error.URLError: &lt;urlopen error no host given&gt;
</snippet></ROW><ROW><id>17385091</id><snippet>f.readline()</snippet></ROW><ROW><id>17385091</id><snippet>with open(filename) as f:
    for ticker_name in f:
        ticker_name = ticker_name.strip()
        url = "http://ichart.finance.yahoo.com/table.csv?s=%s&amp;a=00&amp;b=1&amp;c=2011&amp;d=05&amp;e=28&amp;f=2013&amp;g=d&amp;ignore=.csv" % ticker_name

        # etc.
</snippet></ROW><ROW><id>17385222</id><snippet>import module2</snippet></ROW><ROW><id>17385222</id><snippet>module1.module2.myFunct</snippet></ROW><ROW><id>17385222</id><snippet>module1</snippet></ROW><ROW><id>17385222</id><snippet>module1a</snippet></ROW><ROW><id>17385222</id><snippet>module2</snippet></ROW><ROW><id>17385222</id><snippet>import module2</snippet></ROW><ROW><id>17385222</id><snippet>module1.module2.myFunct</snippet></ROW><ROW><id>17385222</id><snippet>from module2 import *</snippet></ROW><ROW><id>17385222</id><snippet>from numpy import *</snippet></ROW><ROW><id>17385222</id><snippet>sum</snippet></ROW><ROW><id>17385222</id><snippet>min</snippet></ROW><ROW><id>17385222</id><snippet>max</snippet></ROW><ROW><id>17385222</id><snippet>any</snippet></ROW><ROW><id>17385222</id><snippet>all</snippet></ROW><ROW><id>17385222</id><snippet>abs</snippet></ROW><ROW><id>17385222</id><snippet>round</snippet></ROW><ROW><id>17385251</id><snippet>my_function()
</snippet></ROW><ROW><id>17385251</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>17385251</id><snippet>from inspect import getargspec

defaults = getargspec(my_function).defaults
my_variable = defaults[0]
my_function(my_variable)
</snippet></ROW><ROW><id>17385251</id><snippet>argspec = getargspec(my_function)
keyword_args = dict(zip(argspec.args[-len(argspec.defaults):], argspec.defaults))
positional_args = [None] * (len(argspec.args) - len(argspec.defaults))  # set all positionals to None
my_function(*positional_args, **keyword_args)
</snippet></ROW><ROW><id>17385251</id><snippet>&gt;&gt;&gt; from inspect import getargspec
&gt;&gt;&gt; defaults = getargspec(my_function).defaults
&gt;&gt;&gt; my_variable = defaults[0]
&gt;&gt;&gt; my_function(my_variable)
default_value
&gt;&gt;&gt; argspec = getargspec(my_function)
&gt;&gt;&gt; keyword_args = dict(zip(argspec.args[-len(argspec.defaults):], argspec.defaults))
&gt;&gt;&gt; positional_args = [None] * (len(argspec.args) - len(argspec.defaults))  # set all positionals to None
&gt;&gt;&gt; my_function(*positional_args, **keyword_args)
default_value
&gt;&gt;&gt; keyword_args
{'a': 'default_value'}
</snippet></ROW><ROW><id>17385346</id><snippet>America/New_York</snippet></ROW><ROW><id>17385346</id><snippet>2013-06-30T04:00:00Z</snippet></ROW><ROW><id>17385455</id><snippet>val</snippet></ROW><ROW><id>17385455</id><snippet>[(index, row.index(val)) for index, row in enumerate(mymatrix) if val in row]
</snippet></ROW><ROW><id>17385455</id><snippet>&gt;&gt;&gt; mymatrix=[[1,2,9],[4,9,6],[7,8,9]]
&gt;&gt;&gt; val = 9
&gt;&gt;&gt; [(index, row.index(val)) for index, row in enumerate(mymatrix) if val in row]
[(0, 2), (1, 1), (2, 2)]
</snippet></ROW><ROW><id>17385511</id><snippet>collections</snippet></ROW><ROW><id>17385511</id><snippet>from collections import OrderedDict
</snippet></ROW><ROW><id>17385511</id><snippet>d = {"a":[2,1],"b":(4,7),"c":(5,3,9,7)}
l = sorted(d.items(), key=lambda pair: (len(pair[1]), sum(pair[1])), reverse=True)
</snippet></ROW><ROW><id>17385511</id><snippet>ordered_d = OrderedDict(l)
</snippet></ROW><ROW><id>17385663</id><snippet>re.findall()</snippet></ROW><ROW><id>17385663</id><snippet>link.replace()</snippet></ROW><ROW><id>17385663</id><snippet>link</snippet></ROW><ROW><id>17385663</id><snippet>link</snippet></ROW><ROW><id>17385663</id><snippet>links = re.findall(pattern,htmltext)
downloadlinks = []

for link in links:
    downloadlinks.append(link.replace("*text to replace*", "*replace with*"))

print(downloadlinks)
</snippet></ROW><ROW><id>17385663</id><snippet>links = re.findall(pattern,htmltext)
downloadlinks = ''

for i, link in enumerate(links):
    if i == 0:
        downloadlinks += link
    else:
        downloadlinks += ' - ' + link

print(downloadlinks)
</snippet></ROW><ROW><id>17385678</id><snippet>stock_data[10+6*7]</snippet></ROW><ROW><id>17385678</id><snippet>closing_prices = stock_data[10::6]
</snippet></ROW><ROW><id>17385678</id><snippet>stock_data[a:b:c]</snippet></ROW><ROW><id>17385678</id><snippet>stock_data</snippet></ROW><ROW><id>17385678</id><snippet>a</snippet></ROW><ROW><id>17385678</id><snippet>c</snippet></ROW><ROW><id>17385678</id><snippet>b</snippet></ROW><ROW><id>17385678</id><snippet>a=0</snippet></ROW><ROW><id>17385678</id><snippet>c=1</snippet></ROW><ROW><id>17385678</id><snippet>b=(length of the list)</snippet></ROW><ROW><id>17385776</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def cut_array2d(array, shape):
    arr_shape = np.shape(array)
    xcut = np.linspace(0,arr_shape[0],shape[0]+1).astype(np.int)
    ycut = np.linspace(0,arr_shape[1],shape[1]+1).astype(np.int)
    blocks = [];    xextent = [];    yextent = []
    for i in range(shape[0]):
        for j in range(shape[1]):
            blocks.append(array[xcut[i]:xcut[i+1],ycut[j]:ycut[j+1]])
            xextent.append([xcut[i],xcut[i+1]])
            yextent.append([ycut[j],ycut[j+1]])
    return xextent,yextent,blocks

nx = 900; ny = 650
X, Y = np.meshgrid(np.linspace(-5,5,nx), np.linspace(-5,5,ny))
arr = X**2+Y**2

x,y,blocks = cut_array2d(arr,(10,10))

n = 0

for x,y,block in zip(x,y,blocks):
    n += 1
    plt.imshow(block,extent=[y[0],y[1],x[0],x[1]],
               interpolation='nearest',origin='lower',
               vmin = arr.min(), vmax=arr.max(),
               cmap=plt.cm.Blues_r)
    plt.text(0.5*(y[0]+y[1]),0.5*(x[0]+x[1]),str(n),
             horizontalalignment='center',
             verticalalignment='center')

plt.xlim([0,900])
plt.ylim([0,650])
plt.savefig("blocks.png",dpi=72)
plt.show()
</snippet></ROW><ROW><id>17385908</id><snippet>import os, os.path, sys

class MyApp:

    _plugins = []

    def __init__(self):
        self.myVar = 0

    def loadPlugins(self):
        scriptDir = os.path.join ( os.path.dirname(os.path.abspath(__file__)), "plugin" )   
        sys.path.insert(0,scriptDir)
        for plug in os.listdir(scriptDir):
            if (plug[-3:].lower() == ".py"):
                m = __import__(os.path.basename(plug)[:-3])
                self._plugins.append(m.Plugin(self))

    def runTests(self):
        for p in self._plugins:
            p.test()

if (__name__ == "__main__"):
    app = MyApp()
    app.loadPlugins()
    app.runTests()
</snippet></ROW><ROW><id>17385908</id><snippet>class Plugin:

    def __init__(self, host):
        self.host = host

    def test(self):
        print "from p1: myVar = %d" % self.host.myVar
</snippet></ROW><ROW><id>17385908</id><snippet>class Plugin:

    def __init__(self, host):
        self.host = host

    def test(self):
        print "from p2: variable set"
        self.host.myVar = 1
        print "from p2: myVar = %d" % self.host.myVar
</snippet></ROW><ROW><id>17386013</id><snippet>O(N)</snippet></ROW><ROW><id>17386013</id><snippet>O(N^2)</snippet></ROW><ROW><id>17386013</id><snippet>top</snippet></ROW><ROW><id>17386013</id><snippet>     10000000000000001
    +10000000000000001
</snippet></ROW><ROW><id>17386013</id><snippet>                10
</snippet></ROW><ROW><id>17386013</id><snippet>  0000000000000010
</snippet></ROW><ROW><id>17386013</id><snippet>100000000000000010
</snippet></ROW><ROW><id>17386013</id><snippet>O(N)</snippet></ROW><ROW><id>17386055</id><snippet>from BeautifulSoup import BeautifulSoup as bs
import re

soup = bs(open('html.html'))

form = soup.find(id="form1")

labels = form.findAll('label', text=re.compile("Character \d+") )
labels = labels[:3]

for label in labels:
    print(label.string)

--output:--
Character 5  
Character 6  
Character 7  
</snippet></ROW><ROW><id>17386317</id><snippet>extent=(left, right, bottom, top)</snippet></ROW><ROW><id>17386317</id><snippet>imshow</snippet></ROW><ROW><id>17386317</id><snippet>left</snippet></ROW><ROW><id>17386317</id><snippet>right</snippet></ROW><ROW><id>17386317</id><snippet>bottom</snippet></ROW><ROW><id>17386317</id><snippet>top</snippet></ROW><ROW><id>17386317</id><snippet>import matplotlib.pyplot as plt
import matplotlib.image as mimage
import matplotlib.cbook as cbook
datafile = cbook.get_sample_data('logo2.png', asfileobj=False)
im = mimage.imread(datafile)
fig, ax = plt.subplots(figsize=(5.,5.))
myaximage = ax.imshow(im,
                      aspect='auto',
                      extent=(20, 80, 20, 80),
                      alpha=0.5)
ax.plot(range(100))
plt.show()
</snippet></ROW><ROW><id>17386556</id><snippet>&lt;a href='([^']+)' class="next"&gt;
</snippet></ROW><ROW><id>17386556</id><snippet>class = "next"</snippet></ROW><ROW><id>17386556</id><snippet>.+?</snippet></ROW><ROW><id>17386556</id><snippet>[^']+</snippet></ROW><ROW><id>17386631</id><snippet>lines</snippet></ROW><ROW><id>17386631</id><snippet>i = len(lines)
i = -1 if i &gt; 1 else i
for fullName in lines[:i]:
    dostuff()
</snippet></ROW><ROW><id>17386668</id><snippet>if randint(0, 1):
    print("Merch weapon: {} , Stats: {}".format(merch_weapon,weapon_dict[merch_weapon]))
    print("Merch armor: {} , Stats: {}".format(merch_armor, armor_dict[merch_armor]))
</snippet></ROW><ROW><id>17386668</id><snippet>merch_weapon</snippet></ROW><ROW><id>17386668</id><snippet>self.merch_weapon()</snippet></ROW><ROW><id>17386668</id><snippet>merch_weapon</snippet></ROW><ROW><id>17386668</id><snippet>def merch_weapon(self):
    if self.merchstate == 'buy':
      return random.choice(weapon_dict.keys()) # list() isn't needed here
</snippet></ROW><ROW><id>17386668</id><snippet>if randint(0, 1):
    temp_wpn = merch_weapon()
    temo_armr = merch_armor()
    print("Merch weapon: {} , Stats: {}".format(temp_wpn, weapon_dict[temp_wpn]))
    print("Merch armor: {} , Stats: {}".format(temo_armr, armor_dict[temo_armr]))
</snippet></ROW><ROW><id>17387004</id><snippet>content = a[1]</snippet></ROW><ROW><id>17387205</id><snippet>a</snippet></ROW><ROW><id>17387205</id><snippet>tab</snippet></ROW><ROW><id>17387205</id><snippet>a = '1\t.\t.\t3\t.'
</snippet></ROW><ROW><id>17387205</id><snippet>from re import *
def Seek():
   a = '1\t.\t.\t3\t\.'
   re = compile(r'(?&lt;=\t)\.(?=\t)');
   return len(re.findall(a))
print Seek()
</snippet></ROW><ROW><id>17387205</id><snippet>tab</snippet></ROW><ROW><id>17387205</id><snippet>\t.\t.\t</snippet></ROW><ROW><id>17387205</id><snippet>\.</snippet></ROW><ROW><id>17387205</id><snippet>\t\.\t</snippet></ROW><ROW><id>17387205</id><snippet>\.</snippet></ROW><ROW><id>17387205</id><snippet>2</snippet></ROW><ROW><id>17387241</id><snippet>|</snippet></ROW><ROW><id>17387241</id><snippet>|</snippet></ROW><ROW><id>17387241</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; char_set = u'\u0041-\u005A|\u00C0-\u00D6|\u00D8-\u00DE|\u0100|\u0102|\u0104|\u0106|\u0108|\u010A|\u010C|\u010E|\u0110|\u0112|\u0114|\u0116|\u0118|\u011A|\u011C|\u011E|\u0120|\u0122|\u0124|\u0126|\u0128|\u012A|\u012C|\u012E|\u0130|\u0132|\u0134|\u0136|\u0139|\u013B|\u013D|\u013F|\u0141|\u0143|\u0145|\u0147|\u014A|\u014C|\u014E|\u0150|\u0152|\u0154|\u0156|\u0158|\u015A|\u015C|\u015E|\u0160|\u0162|\u0164|\u0166|\u0168|\u016A|\u016C|\u016E|\u0170|\u0172|\u0174|\u0176|\u0178|\u0179|\u017B|\u017D'
&gt;&gt;&gt; fixed_char_set = char_set.replace("|", "")   # remove the unneeded vertical bars
&gt;&gt;&gt; pattern = ur"\A[{}]".format(fixed_char_set)  # create a pattern string
&gt;&gt;&gt; regex = re.compile(pattern) # compile the pattern into a regex object
&gt;&gt;&gt; print regex.match("%foo")   # "%" is not in the character set, so match returns None
None
</snippet></ROW><ROW><id>17387241</id><snippet>"%foo"</snippet></ROW><ROW><id>17387259</id><snippet>threading.local()</snippet></ROW><ROW><id>17387476</id><snippet>global</snippet></ROW><ROW><id>17387476</id><snippet>test1.py</snippet></ROW><ROW><id>17387476</id><snippet>BranchName</snippet></ROW><ROW><id>17387476</id><snippet>main</snippet></ROW><ROW><id>17387476</id><snippet>test</snippet></ROW><ROW><id>17387476</id><snippet>import os
import sys

import test

def main():
    ScriptDir = os.getcwd()
    print ScriptDir
    BranchName  = sys.argv[1]
    print "BranchName"
    print BranchName
    #Update input file with external gerrits, if any
    print "Before running test1"
    test.main(BranchName) # here I am passing the variable
    print "After running test1"

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17387476</id><snippet>test.py</snippet></ROW><ROW><id>17387476</id><snippet>def main(branch_name):
    print('In test.py, the value is: {0}', branch_name)
</snippet></ROW><ROW><id>17387479</id><snippet>from Tkinter import *

raiz = Tk()
frame = Frame(raiz)
out = []

def cadastro():
    form = Toplevel(raiz)

    Label(form, text='Nome: ').grid(column=0, row=0, sticky=E)
    Label(form, text='Celular: ').grid(column=0, row=1, sticky=E)

    nome = StringVar()
    celular = StringVar()

    a=Entry(form, textvariable=nome, width=15)
    a.grid(column=1, row=0, sticky=W)
    Entry(form, textvariable=celular, width=15).grid(column=1, row=1, sticky=W)

    def onCancel():
        form.destroy()

    def onOk():
        with open('outt.txt','w') as txt:
            txt.write('Name : ' + str(nome.get()) + '  ' + 'Telephone No. : ' + str(celular.get()))
        onCancel()

    Button(form, text='OK', command=onOk).grid(column=0, row=2, sticky=E)
    Button(form, text='Cancel', command=onCancel).grid(column=1, row=2, sticky=W)

def listar():
    with open('outt.txt','r') as txt_read:
        print txt_read.read()




w = Button(raiz, text='Cadastrar',command=cadastro).grid()
x = Button(raiz, text='Listar' , command=listar).grid()


raiz.mainloop()
</snippet></ROW><ROW><id>17387479</id><snippet>with as</snippet></ROW><ROW><id>17387514</id><snippet>Q(slug__iexact='topic1') and Q(slug__iexact='topic2') &lt;==&gt; False
Q(slug__iexact='topic1') and Q(slug__iexact='topic1') &lt;==&gt; Q(slug__iexact='topic1')
</snippet></ROW><ROW><id>17387514</id><snippet>ops = set(query.keys())</snippet></ROW><ROW><id>17387539</id><snippet>127.0.0.1    helloflask.mydomain.com    helloflask
</snippet></ROW><ROW><id>17387539</id><snippet>http://helloflask.mydomain.com
</snippet></ROW><ROW><id>17387604</id><snippet>$$$$</snippet></ROW><ROW><id>17387604</id><snippet>DB_SCHEMA</snippet></ROW><ROW><id>17387604</id><snippet>db = MySQLdb.connect(host=DB_HOST, user=DB_USER, passwd=DB_PASSWORD, db=DB_SCHEMA)
</snippet></ROW><ROW><id>17387644</id><snippet>break</snippet></ROW><ROW><id>17387644</id><snippet>break</snippet></ROW><ROW><id>17387644</id><snippet>while</snippet></ROW><ROW><id>17387644</id><snippet>for</snippet></ROW><ROW><id>17387644</id><snippet>return</snippet></ROW><ROW><id>17387644</id><snippet>return None</snippet></ROW><ROW><id>17387644</id><snippet>if d &gt; 0:
    back_word(m)
    d - 1
else:
    return
</snippet></ROW><ROW><id>17387644</id><snippet>d - 1</snippet></ROW><ROW><id>17387644</id><snippet>d</snippet></ROW><ROW><id>17387644</id><snippet>d -= 1</snippet></ROW><ROW><id>17387644</id><snippet>d = d - 1</snippet></ROW><ROW><id>17387644</id><snippet>raw_input()</snippet></ROW><ROW><id>17387644</id><snippet>str(raw_input(...</snippet></ROW><ROW><id>17387644</id><snippet>RuntimeError</snippet></ROW><ROW><id>17387644</id><snippet>if d &gt; 0:
    back_word(m[:-1])
    d -= 1
else:
    return
</snippet></ROW><ROW><id>17387747</id><snippet>self</snippet></ROW><ROW><id>17387747</id><snippet>self</snippet></ROW><ROW><id>17387747</id><snippet>me()</snippet></ROW><ROW><id>17387747</id><snippet>api.followers("DaysInnCanada")</snippet></ROW><ROW><id>17387747</id><snippet>api.get_user("DaysInnCanada")</snippet></ROW><ROW><id>17387747</id><snippet>followers</snippet></ROW><ROW><id>17387803</id><snippet>sg</snippet></ROW><ROW><id>17387803</id><snippet>def MyContext(BaseContext):
    def OnInit(self):
        self.sg = ... load your scene graph here ...

    def OnRender(self, mode):
        return
</snippet></ROW><ROW><id>17387804</id><snippet>#how does this work?
return sum(
    pattern == [ row[ j:j + ncols ] for row in area[ i:i + nrows ] ]
    for i in xrange( len( area ) - nrows + 1 )
    for j in xrange( len( area[i] ) - ncols + 1 )
)
</snippet></ROW><ROW><id>17387804</id><snippet>count = 0
for i in xrange( len( area ) - nrows + 1 ):
    for j in xrange( len( area[i] ) - ncols + 1 ):
        count += (pattern == [ row[ j:j + ncols ]
                              for row in area[ i:i + nrows ] ])
return count
</snippet></ROW><ROW><id>17387804</id><snippet>pattern == ..</snippet></ROW><ROW><id>17387804</id><snippet>count += all(pattern_row == row[j:j + ncols]
             for pattern_row, row in zip(pattern, area[i:i + nrows]))
</snippet></ROW><ROW><id>17387804</id><snippet>for pattern_row, row in zip(pattern, area[i:i + nrows]):
    if pattern_row != row[j:j + ncols]:
       break # no match (the count stays the same)
else: # matched (no break)
    count += 1 # all rows are equal
</snippet></ROW><ROW><id>17387886</id><snippet>def smallestKSum(xs, k):
    xs = sorted(xs)
    return max(
        abs(sum(xs[k:]) - sum(xs[:k])),
        abs(sum(xs[-k:]) - sum(xs[:-k]))
    )
</snippet></ROW><ROW><id>17387899</id><snippet>g_len = len(g)
a = "rea: {}".format((g_len + 1) * 100)
b = "ref: "
for i, g_i in enumerate(g):
    b += ' "{}": {{"sds": {}}},'.format(g_i, (i+2) * 100)
</snippet></ROW><ROW><id>17387992</id><snippet>np.matrix</snippet></ROW><ROW><id>17387992</id><snippet>m</snippet></ROW><ROW><id>17387992</id><snippet>col = 1
m[np.array(m[:,col].argsort(axis=0).tolist()).ravel()]
</snippet></ROW><ROW><id>17387992</id><snippet>np.ndarray</snippet></ROW><ROW><id>17387992</id><snippet>a</snippet></ROW><ROW><id>17387992</id><snippet>col = 1
a[a[:,col].argsort(axis=0)]
</snippet></ROW><ROW><id>17387992</id><snippet>def mysort(data, col_name, key=None):
    d = data.copy()
    cols = [i[0] for i in eval(str(d.dtype))]
    if key:
        argsort = np.array([key(i) for i in d[col_name]]).argsort()
    else:
        argsort = d[col_name].argsort()
    for col in cols:
        d[col] = d[col][argsort]
    return d
</snippet></ROW><ROW><id>17387992</id><snippet>key</snippet></ROW><ROW><id>17387992</id><snippet>def key(x):
    x = ''.join([i for i in x if i.isdigit() or i=='_'])
    return '{1:{f}{a}10}_{2:{f}{a}10}_{3:{f}{a}10}'.format(*x.split('_'), f='0', a='&gt;')

d = mysort(data, 'MyColumn', key)
</snippet></ROW><ROW><id>17388130</id><snippet>.find_previous_sibling</snippet></ROW><ROW><id>17388130</id><snippet>&gt;&gt;&gt; for divtag in div_Blocks:
...     print divtag.find_previous_sibling('img')
... 
&lt;img class="outer" id="first"/&gt;
&lt;img class="outer" id="first"/&gt;
&lt;img class="outer" id="first"/&gt;
&lt;img class="outer" id="second"/&gt;
&lt;img class="outer" id="second"/&gt;
&lt;img class="outer" id="third"/&gt;
&lt;img class="outer" id="third"/&gt;
</snippet></ROW><ROW><id>17388274</id><snippet>line.translate(None, string.punctuation)
</snippet></ROW><ROW><id>17388274</id><snippet>line = line.translate(None, string.punctuation)
</snippet></ROW><ROW><id>17388274</id><snippet>translate()</snippet></ROW><ROW><id>17388501</id><snippet>render</snippet></ROW><ROW><id>17388501</id><snippet>template_globals = {}
render_partial = template.render(template_dir, globals=template_globals)
render = template.render(template_dir, globals=template_globals,
                         base='layout')
template_globals.update(render=render_partial)
</snippet></ROW><ROW><id>17388501</id><snippet>$:render.nested.template()
</snippet></ROW><ROW><id>17388505</id><snippet>from difflib import SequenceMatcher

def similar(a, b):
    return SequenceMatcher(None, a, b).ratio()
</snippet></ROW><ROW><id>17388505</id><snippet>&gt;&gt;&gt; similar("Apple","Appel")
0.8
&gt;&gt;&gt; similar("Apple","Mango")
0.0
</snippet></ROW><ROW><id>17388676</id><snippet> from matplotlib import pylab
 import networkx as nx

 def save_graph(graph,file_name):
    #initialze Figure
    plt.figure(num=None, figsize=(20, 20), dpi=80)
    plt.axis('off')
    fig = plt.figure(1)
    pos = nx.spring_layout(graph)
    nx.draw_networkx_nodes(graph,pos)
    nx.draw_networkx_edges(graph,pos)
    nx.draw_networkx_labels(graph,pos)

    cut = 1.00
    xmax = cut * max(xx for xx, yy in pos.values())
    ymax = cut * max(yy for xx, yy in pos.values())
    plt.xlim(0, xmax)
    plt.ylim(0, ymax)

    plt.savefig(file_name,bbox_inches="tight")
    pylab.close()
    del fig

#Assuming that the graph g has nodes and edges entered
save_graph(g,"my_graph.pdf")

#it can also be saved in .svg, .png. or .ps formats
</snippet></ROW><ROW><id>17388798</id><snippet>project/calcucaltion_app/management/commands/calculate_data.py</snippet></ROW><ROW><id>17388798</id><snippet>from django.core.management.base import BaseCommand
from calculation_app.models import my_model

class Command(BaseCommand):
    args = "No arguments needed"
    help = "This script calculates financial data and caches it"

    def handle(self, *args, **options):
        # TODO code here
</snippet></ROW><ROW><id>17388798</id><snippet>__init__.py</snippet></ROW><ROW><id>17388798</id><snippet>management</snippet></ROW><ROW><id>17388798</id><snippet>commands</snippet></ROW><ROW><id>17388798</id><snippet>./manage.py calculate_data</snippet></ROW><ROW><id>17388798</id><snippet>crontab -e</snippet></ROW><ROW><id>17388798</id><snippet>*/3 * * * * /path/to/django/manage.py calculate_data
</snippet></ROW><ROW><id>17388798</id><snippet>virtualenv</snippet></ROW><ROW><id>17388941</id><snippet>from operator import itemgetter
from difflib import SequenceMatcher

class Corrector(object):

    def __init__(self, possibilities):
        self.possibilities = possibilities
        self.sums = sum(self.possibilities.values())

    def correct(self, word):
        corrections = {}
        sm = SequenceMatcher(None, word, '')
        for w, t in self.possibilities.iteritems():
            sm.b = w
            corrections[w] = sm.ratio() * t/self.sums
        return max(corrections.iteritems(),key=itemgetter(1))[0]
</snippet></ROW><ROW><id>17388981</id><snippet>partial</snippet></ROW><ROW><id>17388981</id><snippet>import timeit
import types


# http://stackoverflow.com/questions/6527633/how-can-i-make-a-deepcopy-of-a-function-in-python
def copy_func(f, name=None):
    return types.FunctionType(f.func_code, f.func_globals, name or f.func_name,
        f.func_defaults, f.func_closure)


def f(a, b, c):
    return a + b + c


i = copy_func(f, 'i')
i.func_defaults = (4, 5, 3)


print timeit.timeit('f(4,5,3)', setup = 'from __main__ import f', number=100000)
print timeit.timeit('i()', setup = 'from __main__ import i', number=100000)
</snippet></ROW><ROW><id>17388981</id><snippet>0.0257439613342
0.0221881866455
</snippet></ROW><ROW><id>17389036</id><snippet>$PYTHON/site-packages/…</snippet></ROW><ROW><id>17389036</id><snippet>pip install pyglfw</snippet></ROW><ROW><id>17389051</id><snippet>myfile = open("test.out", "w")

for tstep in arange (1,500,1):
    Intensity=np.sum(Itarray*detarray)
    myfile.write(str(tstep*t*10**9) + '\t' + str(Intensity.real) + '\n')

myfile.close()
</snippet></ROW><ROW><id>17389132</id><snippet>^(\w+\b)(.*\b\1$|$)
</snippet></ROW><ROW><id>17389198</id><snippet>&gt;&gt;&gt; from netaddr import *
&gt;&gt;&gt;
&gt;&gt;&gt; ip = IPNetwork('192.168.1.130/26')
&gt;&gt;&gt; supernet = ip.supernet(24)[0]
&gt;&gt;&gt; print list(supernet.subnet(26))
[IPNetwork('192.168.1.0/26'), IPNetwork('192.168.1.64/26'), IPNetwork('192.168.1.128/26'), IPNetwork('192.168.1.192/26')]
</snippet></ROW><ROW><id>17389881</id><snippet>session.execute()</snippet></ROW><ROW><id>17389881</id><snippet>PRAGMA table_info(forum_forum)</snippet></ROW><ROW><id>17389881</id><snippet>&gt;&gt;&gt; res = session.execute("PRAGMA table_info(forum_forum)")
&gt;&gt;&gt; res.keys()
[u'cid', u'name', u'type', u'notnull', u'dflt_value', u'pk']
&gt;&gt;&gt; for row in res:
...     print row
... 
(0, u'id', u'integer', 0, None, 1)
(1, u'category_id', u'integer', 0, None, 0)
(2, u'name', u'varchar(100)', 1, None, 0)
(3, u'description', u'varchar(200)', 1, None, 0)
(4, u'locked', u'bool', 1, None, 0)
</snippet></ROW><ROW><id>17390210</id><snippet>bak.append(x[:])
</snippet></ROW><ROW><id>17390210</id><snippet>bak.append(list(x))
</snippet></ROW><ROW><id>17390210</id><snippet>[:]</snippet></ROW><ROW><id>17390229</id><snippet>print()</snippet></ROW><ROW><id>17390229</id><snippet>None</snippet></ROW><ROW><id>17390229</id><snippet>list1 = [random.randint(1,6) for _ in range(100)]
print(list1)
</snippet></ROW><ROW><id>17390229</id><snippet>list1 = [random.randint(1,6) for _ in range(100)]
list1.sort()
print(list1)
</snippet></ROW><ROW><id>17390266</id><snippet>childNode</snippet></ROW><ROW><id>17390266</id><snippet>childNodes</snippet></ROW><ROW><id>17390266</id><snippet>NAME</snippet></ROW><ROW><id>17390266</id><snippet>&lt;servers&gt;
  &lt;server&gt;
    &lt;host&gt; HOST1 &lt;/host&gt;
    &lt;port&gt; 6667 &lt;/port&gt;
    &lt;channel&gt;
      &lt;name&gt; CHANNAME1&lt;/name&gt;
    &lt;/channel&gt;
    &lt;channel&gt;
      &lt;name&gt; CHANNAME2 &lt;/name&gt;
    &lt;/channel&gt;
  &lt;/server&gt;
  &lt;server&gt;
    &lt;host&gt; HOST2 &lt;/host&gt;
    &lt;port&gt; 6667 &lt;/port&gt;
    &lt;channel&gt;
      &lt;name&gt; CHANNAME3 &lt;/name&gt;
    &lt;/channel&gt;
  &lt;/server&gt;
&lt;/servers&gt;
</snippet></ROW><ROW><id>17390614</id><snippet>class   ircServer:
   HOST = ""
   PORT = 0
   CHAN = []
</snippet></ROW><ROW><id>17390614</id><snippet>__init__</snippet></ROW><ROW><id>17390614</id><snippet>class   ircServer:
   def __init__(self, HOST, PORT):
       self.HOST = HOST
       self.PORT = PORT
       self.CHAN = []
</snippet></ROW><ROW><id>17390614</id><snippet>class ircServer:
    DEFAULT_PORT = 44100
    def __init__(self, HOST, PORT = DEFAULT_PORT):
        self.HOST = HOST
        self.PORT = PORT
        self.CHAN = []
</snippet></ROW><ROW><id>17390757</id><snippet>exec</snippet></ROW><ROW><id>17390757</id><snippet>&gt;&gt;&gt; a = 3
&gt;&gt;&gt; b = 4
&gt;&gt;&gt; c = 5
&gt;&gt;&gt; def add():
...     d = a+b+c
... 
&gt;&gt;&gt; exec add.func_code
</snippet></ROW><ROW><id>17390757</id><snippet>d</snippet></ROW><ROW><id>17390757</id><snippet>STORE_FAST</snippet></ROW><ROW><id>17390757</id><snippet>STORE_DEREF</snippet></ROW><ROW><id>17390778</id><snippet>int(g) if g.isdigit() else g</snippet></ROW><ROW><id>17390847</id><snippet>btn = wx.Button(self, wx.ID_ANY, 'Start', size=(25,-1))
btn.SetMinSize(wx.Size(25,25))

self.Layout()
</snippet></ROW><ROW><id>17390851</id><snippet> with open('dictionary','r') as d:
     sites = set(l.strip() for l in d)
</snippet></ROW><ROW><id>17390851</id><snippet>with open('bigfile.log','r') as inF:
   for line in inF:
       elements = line.split()
       if sites.intersection(elements):
           count += 1
</snippet></ROW><ROW><id>17391119</id><snippet>for i in idxs[m:]:
    av, aw = v[i], w[i]
    print av
    print aw
</snippet></ROW><ROW><id>17391165</id><snippet>In [40]: %timeit np.einsum('ij,ij -&gt; i', d, d)
1000000 loops, best of 3: 1.79 us per loop
</snippet></ROW><ROW><id>17391165</id><snippet>In [46]: from numpy.core.umath_tests import inner1d

In [48]: %timeit inner1d(d, d)
100000 loops, best of 3: 1.97 us per loop
</snippet></ROW><ROW><id>17391165</id><snippet>In [44]: %timeit np.sum(d*d, axis=1)
100000 loops, best of 3: 5.39 us per loop
</snippet></ROW><ROW><id>17391165</id><snippet>In [41]: %timeit np.diag(np.dot(d,d.T)) 
100000 loops, best of 3: 7.2 us per loop
</snippet></ROW><ROW><id>17391165</id><snippet>In [42]: %timeit np.array([np.dot(d[i,:],d[i,:]) for i in range(d.shape[0])])
10000 loops, best of 3: 26.1 us per loop
</snippet></ROW><ROW><id>17391235</id><snippet>import os
import sys

# Import System libraries
import re
import urllib2

# Import Custom libraries
from BeautifulSoup import BeautifulSoup, Tag

job_location = lambda x: x.name == "div" and set([(u"id", u"content")]) &lt;= set(x.attrs)
job_title_location = lambda x: set([(u"class", u"schema_title"), (u"itemprop", u"title")]) &lt;= set(x.attrs)
organ_location = lambda x: set([(u"class", u"schema_hiringorganization"), (u"itemprop", u"name")]) &lt;= set(x.attrs)
details_key_location = lambda x: x.name == "div" and bool(re.search("s.*heading", dict(x.attrs).get(u"class", "")))

def coll_up(ilist,base=0,count=0):
    '''
    Recursively collapse nested lists at depth base and above
    '''
    tlist = []
    if(isinstance(ilist,list) or isinstance(ilist,tuple)):
        for q in ilist:
            tlist += coll_up(q,base,count+1)
    else:
        if(base &gt; count):
            tlist = ilist
        else:
            tlist = [ilist]
    return [tlist] if((count != 0) and (base &gt; count)) else tlist

def info_extract(ilist, count=0):
    '''
    Recursively walk a nested list and upon finding a non iterable, return its string
    '''
    tlist = []
    if(isinstance(ilist, list)):
        for q in ilist:
            if(isinstance(q, Tag)):
                tlist += info_extract(q.contents, count+1)
            else:
                extracted_str = q.strip()
                if(extracted_str):
                    tlist += [extracted_str]
    return [tlist] if(count != 0) else tlist

def main():
    url = "http://www.sarkari-naukri.in/jobs-by-qualification/b-tech/sub-centre-manager.html"
    data = urllib2.urlopen(url).read()
    soup = BeautifulSoup(data)

    job_tags = soup.findAll(job_location)
    if(job_tags):
        job_tag = job_tags[0]
        job_title = info_extract(job_tag.findAll(job_title_location))[0]
        organ = info_extract(job_tag.findAll(organ_location))[0]
        details = coll_up(info_extract(job_tag.findAll(details_key_location)), 2)

        combined_dict = dict([tuple(["Job Title:"] + job_title)] + [tuple(["Organisation:"] + organ)] + [tuple(detail) for detail in details])
        combined_list = [["Job Title:"] + job_title, ["Organisation:"] + organ] + details
        postdata = [" ".join(x) for x in combined_list]
        print postdata

        fname = "postdata.txt"
        with open(fname, "w") as outf:
            outf.write("\n".join(postdata).encode("utf8"))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>17391307</id><snippet>urllib2</snippet></ROW><ROW><id>17391307</id><snippet>werkzeug</snippet></ROW><ROW><id>17391307</id><snippet>werkzeug</snippet></ROW><ROW><id>17391307</id><snippet>try:
    from urllib2 import parse_http_list as _parse_list_header
except ImportError: # pragma: no cover
    from urllib.request import parse_http_list as _parse_list_header
</snippet></ROW><ROW><id>17391307</id><snippet>from urllib2 import parse_http_list as _parse_list_header</snippet></ROW><ROW><id>17391307</id><snippet>ImportError</snippet></ROW><ROW><id>17391307</id><snippet>urllib2.py</snippet></ROW><ROW><id>17391307</id><snippet>urllib2/__init__.py</snippet></ROW><ROW><id>17391307</id><snippet>ImportError</snippet></ROW><ROW><id>17391307</id><snippet>urllib.request</snippet></ROW><ROW><id>17391307</id><snippet>import urllib2
print urllib2.__file__
</snippet></ROW><ROW><id>17391307</id><snippet>from urllib2 import parse_http_list as _parse_list_header
</snippet></ROW><ROW><id>17391307</id><snippet>urllib2</snippet></ROW><ROW><id>17391307</id><snippet>urllib2</snippet></ROW><ROW><id>17391307</id><snippet>from urlib import ...</snippet></ROW><ROW><id>17391307</id><snippet>urllib</snippet></ROW><ROW><id>17391307</id><snippet>from flask import Flask</snippet></ROW><ROW><id>17391709</id><snippet>print df[df.Resource.str.contains('pdf',na=False)][['IP', 'Time', 'Resource']][0:5]
</snippet></ROW><ROW><id>17391814</id><snippet>&gt;&gt;&gt; "10" &lt; "2"
True
</snippet></ROW><ROW><id>17391814</id><snippet>if int(s.get("home")) &lt; int(s.get("away"))
</snippet></ROW><ROW><id>17391814</id><snippet>dict.get</snippet></ROW><ROW><id>17391814</id><snippet>None</snippet></ROW><ROW><id>17391814</id><snippet>home_score = int(s.get("home", 0))  # or choose some other default value
away_score = int(s.get("away", 0))

if home_score &lt; away_score:
     #do something
</snippet></ROW><ROW><id>17391814</id><snippet>&gt;&gt;&gt; int("10") &lt; int("2")
False
</snippet></ROW><ROW><id>17391821</id><snippet>for element in dictionary.values():
    print(element)
    my_writer.writerow(element)
</snippet></ROW><ROW><id>17391821</id><snippet>writerow</snippet></ROW><ROW><id>17391821</id><snippet>my_writer.writerow("alpha")</snippet></ROW><ROW><id>17391821</id><snippet>a,l,p,h,a</snippet></ROW><ROW><id>17391821</id><snippet>my_writer.writerow(element.values())
</snippet></ROW><ROW><id>17391821</id><snippet>alpha, beta, gamma</snippet></ROW><ROW><id>17391821</id><snippet>['aplha',' beta',' gamma',]</snippet></ROW><ROW><id>17391821</id><snippet>strip()</snippet></ROW><ROW><id>17391995</id><snippet>    menubar = tk.Menu(root)
    root.configure(menu=menubar)
    fileMenu = tk.Menu(menubar)
    menubar.add_cascade(label="File", menu=fileMenu)
    ...
</snippet></ROW><ROW><id>17392084</id><snippet>import urllib2
import re

htmlfile = urllib2.urlopen('http://www.kino.de/rss/neu-im-kino/')
htmltext = htmlfile.read()
regex = '&lt;link&gt;(.+?)&lt;/link&gt;'
pattern = re.compile(regex)
links = re.findall(pattern,htmltext)

print( ' '.join(links) ) # or print( '\n'.join(links) )


for link in links:
    htmlfile_2 = urllib2.urlopen(link)
    htmltext_2 = htmlfile_2.read()
    regex_2 = '&lt;meta itemprop="contentURL" content="(.+?)" /&gt;'
    pattern_2 = re.compile(regex_2)
    links_2 = re.findall(pattern_2,htmltext_2)

    print( ' '.join(links_2) ) # or print( '\n'.join(links_2) )
</snippet></ROW><ROW><id>17392470</id><snippet>from collections import deque
def find_minimal_length_subarr(arr, k):
   # assume k is positive
   sumBefore = [0]
   for x in arr: sumBefore.append(sumBefore[-1] + x)
   bestStart = -1
   bestEnd = len(arr)
   startPoints = deque()
   start = 0
   for end in range(len(arr)):
      totalToEnd = sumBefore[end+1]
      while startPoints and totalToEnd - sumBefore[startPoints[0]] &gt;= k: # adjust start
         start = startPoints.popleft()
      if totalToEnd - sumBefore[start] &gt;= k and end-start &lt; bestEnd-bestStart:
         bestStart,bestEnd = start,end
      while startPoints and totalToEnd &lt;= sumBefore[startPoints[-1]]: # remove bad candidates
         startPoints.pop()
      startPoints.append(end+1) # end+1 is a new candidate
   return (bestStart,bestEnd)
</snippet></ROW><ROW><id>17392470</id><snippet>for end in 0..N-1
   for start in 0..end
      check the segment from start to end
</snippet></ROW><ROW><id>17392515</id><snippet>result.item()[20].key()=str(line)
</snippet></ROW><ROW><id>17392515</id><snippet>result</snippet></ROW><ROW><id>17392515</id><snippet>result.item()[20]</snippet></ROW><ROW><id>17392515</id><snippet>result.item()[20][str(line)] = score
</snippet></ROW><ROW><id>17392696</id><snippet>v = 42
query = ('what is ' + v)
</snippet></ROW><ROW><id>17392696</id><snippet>TypeError: cannot concatenate 'str' and 'int' objects
</snippet></ROW><ROW><id>17392696</id><snippet>str</snippet></ROW><ROW><id>17392696</id><snippet>query = ('what is ' + str(v))
</snippet></ROW><ROW><id>17392696</id><snippet>str(query)</snippet></ROW><ROW><id>17392814</id><snippet>path = _os.environ['PATH'].split(_os.pathsep)
for extra in (r'C:\Intel\DAL', r'C:\intel\dal', _lakemore_path, plugin_path):
    if extra not in path:
        _os.environ['PATH'] = _os.pathsep.join(extra, _os.environ['PATH'])
</snippet></ROW><ROW><id>17392858</id><snippet>test.py</snippet></ROW><ROW><id>17392858</id><snippet>test1.py</snippet></ROW><ROW><id>17392858</id><snippet>test1.py</snippet></ROW><ROW><id>17392858</id><snippet>test.main()</snippet></ROW><ROW><id>17392858</id><snippet>test.py</snippet></ROW><ROW><id>17392858</id><snippet>__main__</snippet></ROW><ROW><id>17392858</id><snippet>branch_name</snippet></ROW><ROW><id>17392858</id><snippet>$ python test1.py ab_mr1
/private/tmp
BranchName
ab_mr1
Before running test1
('In test.py, the value is: {0}', 'ab_mr1')
After running test1
</snippet></ROW><ROW><id>17393219</id><snippet>result = sorted(result.iteritems(), key=operator.itemgetter(1))
</snippet></ROW><ROW><id>17393219</id><snippet>result</snippet></ROW><ROW><id>17393219</id><snippet>lines</snippet></ROW><ROW><id>17393219</id><snippet>result = sorted({(calculate_score(line), line) for line in lines})
print(result[:20])
</snippet></ROW><ROW><id>17393299</id><snippet>url(r'^hello/$','article.views.hello', name="hello"),
</snippet></ROW><ROW><id>17393299</id><snippet>{% url 'hello' %}
</snippet></ROW><ROW><id>17393438</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>17393438</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def foo(bar, baz):
...     pass
... 
&gt;&gt;&gt; inspect.getargspec(foo)
ArgSpec(args=['bar', 'baz'], varargs=None, keywords=None, defaults=None)
</snippet></ROW><ROW><id>17393525</id><snippet>table1.pk = 'long-string-key'</snippet></ROW><ROW><id>17393554</id><snippet>mmap()</snippet></ROW><ROW><id>17393554</id><snippet>mmap()</snippet></ROW><ROW><id>17393554</id><snippet>ftruncate()</snippet></ROW><ROW><id>17393554</id><snippet>mmap()</snippet></ROW><ROW><id>17393578</id><snippet>def load_object(d):
    if 'songid' in d:
        return d['label']
    keys = sorted(d)
    return namedtuple('X', keys)(*(d[k] for k in keys))

resultObject = json.loads(resultQuery, object_hook=load_object)
</snippet></ROW><ROW><id>17393578</id><snippet>&gt;&gt;&gt; json.loads(t, object_hook=load_object)
X(id=u'dynamicQuery', jsonrpc=u'2.0', result=X(limits=X(end=149, start=0, total=149), songs=[u'Lake of Fire (unplugged)', u'Rape Me']))
</snippet></ROW><ROW><id>17393583</id><snippet>__prepare__</snippet></ROW><ROW><id>17393583</id><snippet>def log_docstring(fn):
    print('docstring for %r is %r' % (fn, fn.__doc__))
    return fn

class InheritableDocstrings(type):
    def __prepare__(name, bases):
        classdict = dict()

        # Construct temporary dummy class to figure out MRO
        mro = type('K', bases, {}).__mro__[1:]
        assert mro[-1] == object
        mro = mro[:-1]

        def inherit_docstring(fn):
            if fn.__doc__ is not None:
                raise RuntimeError('Function already has docstring')

            # Search for docstring in superclass
            for cls in mro:
                super_fn = getattr(cls, fn.__name__, None)
                if super_fn is None:
                    continue
                fn.__doc__ = super_fn.__doc__
                break
            else:
                raise RuntimeError("Can't inherit docstring for %s: method does not "
                                   "exist in superclass" % fn.__name__)

            return fn

        classdict['inherit_docstring'] = inherit_docstring
        return classdict

class Animal():
    def move_to(self, dest):
        '''Move to *dest*'''
        pass

class Bird(Animal, metaclass=InheritableDocstrings):
    @log_docstring
    @inherit_docstring
    def move_to(self, dest):
        self._fly_to(dest)

assert Animal.move_to.__doc__ == Bird.move_to.__doc__
</snippet></ROW><ROW><id>17393583</id><snippet>docstring for &lt;function Bird.move_to at 0x7f6286b9a200&gt; is 'Move to *dest*'
</snippet></ROW><ROW><id>17393583</id><snippet>inherit_docstring</snippet></ROW><ROW><id>17393583</id><snippet>ABCMeta</snippet></ROW><ROW><id>17393647</id><snippet>DictWriter</snippet></ROW><ROW><id>17393647</id><snippet>OrderedDict</snippet></ROW><ROW><id>17393647</id><snippet>popitem</snippet></ROW><ROW><id>17393725</id><snippet>setuptools</snippet></ROW><ROW><id>17393746</id><snippet>Place</snippet></ROW><ROW><id>17393746</id><snippet>NPC</snippet></ROW><ROW><id>17393746</id><snippet>Place</snippet></ROW><ROW><id>17393746</id><snippet>class Npc:
    def __init__(self, place):
        self.place = place

    def move(self, destination):
        self.place.matrix[self.position[0]][self.position[1]] = False        
        ...

place = SomePlace()
npc = Npc(place)
npc.move("foo")
npc.place = SomeOtherPlace()
npc.move("bar")
</snippet></ROW><ROW><id>17393746</id><snippet>exec</snippet></ROW><ROW><id>17393746</id><snippet>sql.routines</snippet></ROW><ROW><id>17393746</id><snippet>add</snippet></ROW><ROW><id>17393746</id><snippet>instanceof</snippet></ROW><ROW><id>17393879</id><snippet>Value</snippet></ROW><ROW><id>17393879</id><snippet>ctypes</snippet></ROW><ROW><id>17393879</id><snippet>RLock</snippet></ROW><ROW><id>17393879</id><snippet>Manager</snippet></ROW><ROW><id>17393879</id><snippet>SynManager</snippet></ROW><ROW><id>17393879</id><snippet>manager = Manager()
for i in range(5):
    new_value = manager.Value('i', 0)
</snippet></ROW><ROW><id>17393879</id><snippet>Manager</snippet></ROW><ROW><id>17393879</id><snippet>Value</snippet></ROW><ROW><id>17393879</id><snippet>Value</snippet></ROW><ROW><id>17393879</id><snippet>import time
from multiprocessing import Process, Manager, Value

def foo(data, name=''):
    print type(data), data.value, name
    data.value += 1

if __name__ == "__main__":
    manager = Manager()
    x = manager.Value('i', 0)
    y = Value('i', 0)

    for i in range(5):
        Process(target=foo, args=(x, 'x')).start()
        Process(target=foo, args=(y, 'y')).start()

    print 'Before waiting: '
    print 'x = {0}'.format(x.value)
    print 'y = {0}'.format(y.value)

    time.sleep(5.0)
    print 'After waiting: '
    print 'x = {0}'.format(x.value)
    print 'y = {0}'.format(y.value)
</snippet></ROW><ROW><id>17393879</id><snippet>Manager</snippet></ROW><ROW><id>17393879</id><snippet>Manager</snippet></ROW><ROW><id>17393879</id><snippet>Value</snippet></ROW><ROW><id>17393879</id><snippet>Array</snippet></ROW><ROW><id>17393879</id><snippet>ctypes</snippet></ROW><ROW><id>17393879</id><snippet>Value</snippet></ROW><ROW><id>17393879</id><snippet>Manager</snippet></ROW><ROW><id>17393879</id><snippet>foo</snippet></ROW><ROW><id>17393879</id><snippet>def foo(data, name=''):
    print type(data), data.value, name
    for j in range(1000):
        data.value += 1
</snippet></ROW><ROW><id>17393879</id><snippet>Lock</snippet></ROW><ROW><id>17394042</id><snippet>dict</snippet></ROW><ROW><id>17394042</id><snippet>&gt;&gt;&gt; card_vals = {"Jack" : 5, "Queen": 15, "King": 20, "Ace":10}
&gt;&gt;&gt; card_vals.update({ x:x for x in range(2,11)})
&gt;&gt;&gt; card_vals["Jack"]
5
&gt;&gt;&gt; card_vals["Jack"]
5
&gt;&gt;&gt; card_vals[2]
2
&gt;&gt;&gt; card_vals[5]
5
</snippet></ROW><ROW><id>17394064</id><snippet>numexpr</snippet></ROW><ROW><id>17394064</id><snippet>In [41]: from pandas.core import expressions as expr

In [42]: expr.set_use_numexpr(False)

In [43]: %timeit df1+df2+df3+df4
1 loops, best of 3: 349 ms per loop
</snippet></ROW><ROW><id>17394064</id><snippet>numexpr</snippet></ROW><ROW><id>17394064</id><snippet>numexpr</snippet></ROW><ROW><id>17394064</id><snippet>In [44]: expr.set_use_numexpr(True)

In [45]: %timeit df1+df2+df3+df4
10 loops, best of 3: 173 ms per loop
</snippet></ROW><ROW><id>17394064</id><snippet>numexpr</snippet></ROW><ROW><id>17394064</id><snippet>In [34]: import numexpr as ne

In [46]: %timeit  DataFrame(ne.evaluate('df1+df2+df3+df4'),columns=df1.columns,index=df1.index,dtype='float32')
10 loops, best of 3: 47.7 ms per loop
</snippet></ROW><ROW><id>17394064</id><snippet>numexpr</snippet></ROW><ROW><id>17394064</id><snippet>((df1+df2)+df3)+df4</snippet></ROW><ROW><id>17394064</id><snippet>numexpr</snippet></ROW><ROW><id>17394064</id><snippet>df1 + df2</snippet></ROW><ROW><id>17394064</id><snippet>numexpr</snippet></ROW><ROW><id>17394064</id><snippet>ne.evaluate(...)</snippet></ROW><ROW><id>17394064</id><snippet>pd.eval</snippet></ROW><ROW><id>17394064</id><snippet>In [5]: %timeit pd.eval('df1+df2+df3+df4')
10 loops, best of 3: 50.9 ms per loop
</snippet></ROW><ROW><id>17394064</id><snippet>cython</snippet></ROW><ROW><id>17394064</id><snippet>numexpr</snippet></ROW><ROW><id>17394133</id><snippet> qs = qs.annotate(number_of_supporters=Count('supporters'))
 qs = qs.order_by('-number_of_supporters')
</snippet></ROW><ROW><id>17394275</id><snippet>request.raw_post_data</snippet></ROW><ROW><id>17394510</id><snippet>raw_input</snippet></ROW><ROW><id>17394510</id><snippet>&gt;&gt;&gt; 1 &lt;= "4" &lt;= 20
False
</snippet></ROW><ROW><id>17394510</id><snippet>int()</snippet></ROW><ROW><id>17394510</id><snippet>i = int(raw_input('&gt;&gt; '))
</snippet></ROW><ROW><id>17394510</id><snippet>if</snippet></ROW><ROW><id>17394510</id><snippet>if 1 &lt;= i &lt;= 20 :
    print "Ok adding %d to numbers set: " % i 
    numbers.append(i)

    print "Okay the numbers set is now: " , numbers
</snippet></ROW><ROW><id>17394510</id><snippet>while</snippet></ROW><ROW><id>17394510</id><snippet>i = int(raw_input('&gt;&gt; '))
numbers = []

while 1 &lt;= i &lt;= 20 :
    print "Ok adding %d to numbers set: " % i 
    numbers.append(i)
    i = int(raw_input('&gt;&gt; '))                   #asks for input again
print "Okay the numbers set is now: " , numbers
</snippet></ROW><ROW><id>17395035</id><snippet>python -m site --user-site
</snippet></ROW><ROW><id>17395035</id><snippet>$HOME/.local/lib/python&lt;version&gt;/site-packages</snippet></ROW><ROW><id>17395035</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>17395041</id><snippet>&lt;Popup_Up&gt;:</snippet></ROW><ROW><id>17395041</id><snippet>Pop_Up</snippet></ROW><ROW><id>17395041</id><snippet>popup_cost = ObjectProperty(Pop_Up())
popup_people = ObjectProperty(Pop_Up())
</snippet></ROW><ROW><id>17395041</id><snippet>Pop_Up()</snippet></ROW><ROW><id>17395041</id><snippet>class ShoppersApp(App, BoxLayout):
    popup_cost = ObjectProperty(Pop_Up())
    popup_people = ObjectProperty(Pop_Up())
    def __init__(self,*args,**kwargs):
        super(ShoppersApp,self).__init__(*args,**kwargs)
        self.popup_cost = Pop_Up()
        self.popup_people = Pop_Up()
    def build(self):
        return self
</snippet></ROW><ROW><id>17395128</id><snippet>&gt;&gt;&gt; m
array([[0, 0, 0, 0],
       [1, 0, 0, 0],
       [2, 3, 0, 0],
       [4, 5, 6, 0]])
&gt;&gt;&gt; np.rot90(m,2)
array([[0, 6, 5, 4],
       [0, 0, 3, 2],
       [0, 0, 0, 1],
       [0, 0, 0, 0]])
&gt;&gt;&gt; m + np.rot90(m, 2)
array([[0, 6, 5, 4],
       [1, 0, 3, 2],
       [2, 3, 0, 1],
       [4, 5, 6, 0]])
</snippet></ROW><ROW><id>17395128</id><snippet>fliplr(m)[::-1]</snippet></ROW><ROW><id>17395131</id><snippet>raw_input</snippet></ROW><ROW><id>17395131</id><snippet>sys.stdin</snippet></ROW><ROW><id>17395131</id><snippet>while True:
    text = raw_input("What is the text?")
    if text == "a":
        print "Correct"
    elif text == "stop":
        print "Bye"
        break
    else:
        print "Not correct text"
</snippet></ROW><ROW><id>17395131</id><snippet>sys.stdin</snippet></ROW><ROW><id>17395131</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>17395131</id><snippet>import subprocess

text = "This is the text"

data = subprocess.Popen(['python', 'other_script.py'], stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate(input=text)
print data[0]
</snippet></ROW><ROW><id>17395175</id><snippet>open(file2, 'r', encoding='*correct encoding for file2*', newline='') as src
</snippet></ROW><ROW><id>17395175</id><snippet>newline=''</snippet></ROW><ROW><id>17395175</id><snippet>csv.reader()</snippet></ROW><ROW><id>17395175</id><snippet>sys.argv</snippet></ROW><ROW><id>17395175</id><snippet>if __name__ == '__main__':
    from sys import argv
    if 5 &lt;= len(argv) &lt;=7:
        my_function(*argv[1:])
    else:
        print("Invalid number of arguments")
    print("Done")
</snippet></ROW><ROW><id>17395319</id><snippet>else</snippet></ROW><ROW><id>17395319</id><snippet>if</snippet></ROW><ROW><id>17395319</id><snippet>else</snippet></ROW><ROW><id>17395319</id><snippet>else</snippet></ROW><ROW><id>17395319</id><snippet>relations = [x[0] or x[1] for x in tuples if 0 in x]
</snippet></ROW><ROW><id>17395319</id><snippet>&gt;&gt;&gt; tuples = [(0,1), (2,0), (3,4), (1,2)]
&gt;&gt;&gt; [x[0] or x[1] for x in tuples if 0 in x]
[1, 2]
</snippet></ROW><ROW><id>17395353</id><snippet>from subprocess import Popen, PIPE, STDOUT
cmd = 'rsync --rsh=ssh -rv thisdir/ servername:folder/'
p = Popen(cmd.split(), stdout=PIPE, stderr=STDOUT)
for line in p.stdout:
    print line
</snippet></ROW><ROW><id>17395353</id><snippet>p.stdout</snippet></ROW><ROW><id>17395353</id><snippet>for line in iter(p.stdout.readline,''):
    print line
</snippet></ROW><ROW><id>17395356</id><snippet>make_adder</snippet></ROW><ROW><id>17395356</id><snippet>adder()</snippet></ROW><ROW><id>17395356</id><snippet>return adder</snippet></ROW><ROW><id>17395356</id><snippet>adder</snippet></ROW><ROW><id>17395356</id><snippet>make_adder(5)</snippet></ROW><ROW><id>17395356</id><snippet>()</snippet></ROW><ROW><id>17395356</id><snippet>def make_adder(x):
       def adder(y):
           return x+y
       return adder
... 
&gt;&gt;&gt; make_adder(5)             #returns the function object adder
&lt;function adder at 0x9fefa74&gt;
</snippet></ROW><ROW><id>17395356</id><snippet>make_adder</snippet></ROW><ROW><id>17395356</id><snippet>make_addr</snippet></ROW><ROW><id>17395356</id><snippet>adder</snippet></ROW><ROW><id>17395356</id><snippet>x</snippet></ROW><ROW><id>17395356</id><snippet>x</snippet></ROW><ROW><id>17395356</id><snippet>nonlocal</snippet></ROW><ROW><id>17395356</id><snippet>&gt;&gt;&gt; make_adder(5)(10)          
15
</snippet></ROW><ROW><id>17395356</id><snippet>&gt;&gt;&gt; def make_addr(x):
        def adder(y):
                nonlocal x
                x += 1
                return x+y
        return adder
... 
&gt;&gt;&gt; f = make_addr(5)
&gt;&gt;&gt; f(5)               #with each call x gets incremented
11
&gt;&gt;&gt; f(5)
12

#g gets it's own closure, it is not related to f anyhow. i.e each call to 
# make_addr returns a new closure.
&gt;&gt;&gt; g = make_addr(5)  
&gt;&gt;&gt; g(5)
11 
&gt;&gt;&gt; g(6)
13
</snippet></ROW><ROW><id>17395389</id><snippet>&gt;&gt;&gt; m
array([[0, 0, 0, 0],
       [1, 0, 0, 0],
       [2, 3, 0, 0],
       [4, 5, 6, 0]])
&gt;&gt;&gt; m + m.T
array([[0, 1, 2, 4],
       [1, 0, 3, 5],
       [2, 3, 0, 6],
       [4, 5, 6, 0]])
</snippet></ROW><ROW><id>17395400</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; data = [1,2,3]
&gt;&gt;&gt; a = np.empty([len(data),2], dtype=object)
&gt;&gt;&gt; a
array([[None, None],
       [None, None],
       [None, None]], dtype=object)
&gt;&gt;&gt; a[:,0]='a'
&gt;&gt;&gt; a
array([[a, None],
       [a, None],
       [a, None]], dtype=object)
&gt;&gt;&gt; a[:,1]=data
&gt;&gt;&gt; a
array([[a, 1],
       [a, 2],
       [a, 3]], dtype=object)
&gt;&gt;&gt; data2=np.array([[1,2],[3,4],[5,6]])
&gt;&gt;&gt; data2
array([[1, 2],
       [3, 4],
       [5, 6]])
&gt;&gt;&gt; b = np.empty([len(data2),3],dtype=object)
&gt;&gt;&gt; b
array([[None, None, None],
       [None, None, None],
       [None, None, None]], dtype=object)
&gt;&gt;&gt; b[:,0]='a'
&gt;&gt;&gt; b
array([[a, None, None],
       [a, None, None],
       [a, None, None]], dtype=object)
&gt;&gt;&gt; b[:,1:]=data2
&gt;&gt;&gt; b
array([[a, 1, 2],
       [a, 3, 4],
       [a, 5, 6]], dtype=object)
</snippet></ROW><ROW><id>17395400</id><snippet>&gt;&gt;&gt; data2=np.array([[1,2],[3,4],[5,6]])
&gt;&gt;&gt; c = zip('a'*len(data2),data2[:,0],data2[:,1])
&gt;&gt;&gt; c
[('a', 1, 2), ('a', 3, 4), ('a', 5, 6)]
&gt;&gt;&gt; d = np.array(c,dtype=[('A', 'a1'),('Odd Numbers',int),('Even Numbers',int)])

&gt;&gt;&gt; d
array([('a', 1, 2), ('a', 3, 4), ('a', 5, 6)],
      dtype=[('A', '|S1'), ('Odd Numbers', '&lt;i4'), ('Even Numbers', '&lt;i4')])
&gt;&gt;&gt; d['Odd Numbers']
array([1, 3, 5])
</snippet></ROW><ROW><id>17395400</id><snippet>('A', str)</snippet></ROW><ROW><id>17395400</id><snippet>''</snippet></ROW><ROW><id>17395400</id><snippet>('A', 'a1')</snippet></ROW><ROW><id>17395503</id><snippet>line</snippet></ROW><ROW><id>17395503</id><snippet>total</snippet></ROW><ROW><id>17395503</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>17395503</id><snippet>re.findall()</snippet></ROW><ROW><id>17395503</id><snippet>import re
from urllib.request import urlopen

def get_image(url):

    total  = 0
    page   = urlopen(url).readlines()

    for line in page:

        hit   = re.findall('&lt;img.*?&gt;', str(line))
        total += len(hit)

    print('{0} Images total: {1}'.format(url, total))

get_image("http://google.com")
get_image("http://flickr.com")
</snippet></ROW><ROW><id>17395518</id><snippet>\n</snippet></ROW><ROW><id>17395518</id><snippet>print()</snippet></ROW><ROW><id>17395518</id><snippet>&gt;&gt;&gt; print(b'Newline\nAnother line')
b'Newline\nAnother line'
&gt;&gt;&gt; print(b'Newline\nAnother line'.decode('utf8'))
Newline
Another line
</snippet></ROW><ROW><id>17395547</id><snippet>def methodA(self):
    if doc['flag']:
        self.anotherMethod()

def anotherMethod(self):
    self.method1()      
    self.method2()
</snippet></ROW><ROW><id>17395547</id><snippet>def methodB(self, flag=False, execute_anyways=False):
    if not flag and not execute_anyways:
        return #Note that while calling, you would be sending True, or False. If flag=None, it would execute. 
    self.method1()      
    self.method2()

def methodA(self):
    self.methodB(flag=doc['flag'])
</snippet></ROW><ROW><id>17395547</id><snippet>self.methodB(execute_anyways=True) #Now, the flag would have the default value of None, and would execute. 
</snippet></ROW><ROW><id>17395568</id><snippet>0</snippet></ROW><ROW><id>17395568</id><snippet>&gt;&gt;&gt; import numpy as np 
&gt;&gt;&gt; complete_matrix = np.array([
...     [0, 1, 2, 4],
...     [1, 0, 3, 5],
...     [2, 3, 0, 6],
...     [4, 5, 6, 0]])
&gt;&gt;&gt; np.argmax(np.mean(complete_matrix, axis=1))
3
</snippet></ROW><ROW><id>17395568</id><snippet>numpy.mean</snippet></ROW><ROW><id>17395568</id><snippet>numpy.argmax</snippet></ROW><ROW><id>17395594</id><snippet>def tipCalc(meal, tax, tip):

    def convertInput(meal, tax, tip):
        try:
            retMeal = int(meal)
            retTax = int(tax)
            retTip = int(tip)
        except ValueError:
            retMeal = float(meal)
            retTax = float(tax)
            retTip = float(tip)
        return retMeal, retTax, retTip

    retMeal, retTax, retTip = convertInput(meal, tax, tip)

    retTax = retTax / 100
    retTip = retTip / 100
    total = retMeal + retTax + retTip
    print total

tipCalc(meal, tax, tip)
</snippet></ROW><ROW><id>17395594</id><snippet>retTax = retTax / 100</snippet></ROW><ROW><id>17395660</id><snippet>**</snippet></ROW><ROW><id>17395660</id><snippet>args = dict(ee311=3, cpre281=3, math207=3.67, ee332=3, jlmc101=4)
cumulative(**args)
print "Your semester 5 gpa is:", sem_5(**args)[0]
</snippet></ROW><ROW><id>17395696</id><snippet>d = {'a': 5, 'aa': 5, 'c': 1, 'b': 7}
result = sorted(d.items(), key=lambda x: (x[1], x[0]))
print(result)
</snippet></ROW><ROW><id>17395696</id><snippet>[('c', 1), ('a', 5), ('aa', 5), ('b', 7)]
</snippet></ROW><ROW><id>17395696</id><snippet>d = {'a': 5, 'aa': 5, 'c': 1, 'b': 7}
result = sorted(d.items(), reverse=True, key=lambda x: (-x[1], x[0]))
print(result)
</snippet></ROW><ROW><id>17395696</id><snippet>[('c', 1), ('aa', 5), ('a', 5), ('b', 7)]
</snippet></ROW><ROW><id>17395696</id><snippet>l = [('foo', 'bar'), ('foo', 'spam'), ('baz', 'egg')]

result = sorted(l, key=lambda x: (x[0], [-ord(c) for c in x[1]]))
print(result)
</snippet></ROW><ROW><id>17395696</id><snippet>[('baz', 'egg'), ('foo', 'spam'), ('foo', 'bar')]
</snippet></ROW><ROW><id>17395785</id><snippet>StringIO</snippet></ROW><ROW><id>17395785</id><snippet>cStringIO</snippet></ROW><ROW><id>17395785</id><snippet>from StringIO import StringIO

fake_file = StringIO()
thing.save(fake_file)  # Acts like a file handle
contents = fake_file.getvalue()
fake_file.close()
</snippet></ROW><ROW><id>17395785</id><snippet>import contextlib
from StringIO import StringIO

with contextlib.closing(StringIO()) as handle:
    thing.save(handle)
    contents = handle.getvalue()
</snippet></ROW><ROW><id>17395868</id><snippet>add = Reoccurring(Username=request.user.username, Day=strip(day.Day), Summary=strip(day.N), Start=strip(day.S), End-strip(day.E))
</snippet></ROW><ROW><id>17395891</id><snippet>&gt;&gt;&gt; re.compile(r'(?&lt;!\\)(?:(\')|")(?(1)(\\\'|[^\'\r])+?\'|(\\"|[^\r"])+?")')
&lt;_sre.SRE_Pattern object at 0x242aa60&gt;
</snippet></ROW><ROW><id>17396100</id><snippet>__eq__()</snippet></ROW><ROW><id>17396100</id><snippet>__cmp__()</snippet></ROW><ROW><id>17396130</id><snippet>uuidmap = {}
for d in L:
  if d['color'] not in uuidmap:
    uuidmap[d['color']] = generateUUID()
  d['UUID'] = uuidmap[d['color']]
</snippet></ROW><ROW><id>17396136</id><snippet>shutdown()</snippet></ROW><ROW><id>17396136</id><snippet>class MyClientHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        ...
        # if we're supposed to shut down the server, do that
        if somecond:
            self.server.shutdown()
</snippet></ROW><ROW><id>17396136</id><snippet>process_request</snippet></ROW><ROW><id>17396136</id><snippet>ThreadingMixIn</snippet></ROW><ROW><id>17396136</id><snippet>SocketServer.py</snippet></ROW><ROW><id>17396136</id><snippet>max_children</snippet></ROW><ROW><id>17396136</id><snippet>ForkingMixIn</snippet></ROW><ROW><id>17396223</id><snippet>In [71]: %timeit np.column_stack((np.linspace(o,f,npts) for o,f in zip(origin,final)))
10000 loops, best of 3: 45 us per loop
</snippet></ROW><ROW><id>17396223</id><snippet>In [77]: %timeit np.array([origin + i*delta for i in np.linspace(0,1,npts)])
10000 loops, best of 3: 138 us per loop
</snippet></ROW><ROW><id>17396223</id><snippet>In [92]: %timeit origin + (final-origin)*np.linspace(0, 1, npts)[:, np.newaxis]
10000 loops, best of 3: 21.1 us per loop
</snippet></ROW><ROW><id>17396334</id><snippet>IDE Settings
    |
    Editor
       |
       Colors &amp; Fonts
           |
           General
              |
              Caret Row
</snippet></ROW><ROW><id>17396392</id><snippet>bar(np.array([7,8]), *fu())
</snippet></ROW><ROW><id>17396392</id><snippet>fu()</snippet></ROW><ROW><id>17396590</id><snippet>for prime in get_primes(2):
    if meets_condition(prime):
        return prime
</snippet></ROW><ROW><id>17396590</id><snippet>primeList = primes(1000)
for prime in primeList:
    if meets_condition(prime):
        return prime
</snippet></ROW><ROW><id>17396810</id><snippet>open()</snippet></ROW><ROW><id>17396810</id><snippet>open()</snippet></ROW><ROW><id>17396810</id><snippet>strace</snippet></ROW><ROW><id>17396892</id><snippet>&gt;&gt;&gt; lis = [['foo', 'foot', 'oot'],
['foo', 'foot', 'oot'],
['bar', 'bart', 'art'],
['bar', 'bart', 'art']]
&gt;&gt;&gt; dic = { 'foo' : 1, 'bar' :2, 'foot':34, 'bart':54, 'oot':123}
&gt;&gt;&gt; nan = float('nan')
&gt;&gt;&gt; [[dic.get(y,nan) for y in x] for x in lis]
[[1, 34, 123], [1, 34, 123], [2, 54, nan], [2, 54, nan]]
</snippet></ROW><ROW><id>17396892</id><snippet>dict.get(key, default_value)</snippet></ROW><ROW><id>17396892</id><snippet>key</snippet></ROW><ROW><id>17396892</id><snippet>default_value</snippet></ROW><ROW><id>17396892</id><snippet>NaN</snippet></ROW><ROW><id>17396892</id><snippet>float('nan')</snippet></ROW><ROW><id>17396927</id><snippet>x:0 y:0</snippet></ROW><ROW><id>17396927</id><snippet>from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.lang import Builder

Builder.load_string("""
&lt;ButtonsApp&gt;:
    orientation: "vertical"
    Button:
        text: "B1"
        Image:
            source: 'kivy.png'
            y: self.parent.y + self.parent.height - 250
            x: self.parent.x
            size: 250, 250
            allow_stretch: True
    Label:
        text: "A label"
""")

class ButtonsApp(App, BoxLayout):
    def build(self):
        return self

if __name__ == "__main__":
    ButtonsApp().run()
</snippet></ROW><ROW><id>17397058</id><snippet>self.c</snippet></ROW><ROW><id>17397058</id><snippet>import module1
myinst = module1.classA()
myinst.method1()
print myinst.c
</snippet></ROW><ROW><id>17397203</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from itertools import count

def newton_fractal(xmin, xmax, ymin, ymax, xres, yres):
    yarr, xarr = np.meshgrid(np.linspace(xmin, xmax, xres), \
                             np.linspace(ymin, ymax, yres) * 1j)
    arr = yarr + xarr
    ydim, xdim = arr.shape
    arr = arr.flatten()
    f = np.poly1d([1,0,0,-1]) # x^3 - 1
    fp = np.polyder(f)
    counts = np.zeros(shape=arr.shape)
    unconverged = np.ones(shape=arr.shape, dtype=bool)
    indices = np.arange(len(arr))
    for i in count():
        f_g = f(arr[unconverged])
        new_unconverged = np.abs(f_g) &gt; 0.00001
        counts[indices[unconverged][~new_unconverged]] = i
        if not np.any(new_unconverged):
            return counts.reshape((ydim, xdim))
        unconverged[unconverged] = new_unconverged
        arr[unconverged] -= f_g[new_unconverged] / fp(arr[unconverged])

N = 1000
pic = newton_fractal(-10, 10, -10, 10, N, N)

plt.imshow(pic)
plt.show()
</snippet></ROW><ROW><id>17397295</id><snippet>w = "This is the song that doesn't end; yes it goes on and on my friend."
max_letter = w[0]
min_letter = w[0]
max = w.count(w[0])
min = w.count(w[0])
for c in w:
    if c is not " ":
        if w.count(c) &gt; max:
            max_letter = c
            max = w.count(c)
        if w.count(c) &lt; min:
            max_letter = c
            max = w.count(c)

print max, max_letter
print min, min_letter

&gt;&gt;&gt; 7 n
&gt;&gt;&gt; 1 T
</snippet></ROW><ROW><id>17397295</id><snippet>max_letter = w[0]
min_letter = w[0]
</snippet></ROW><ROW><id>17397295</id><snippet>min</snippet></ROW><ROW><id>17397295</id><snippet>max</snippet></ROW><ROW><id>17397295</id><snippet>max = w.count(w[0])
min = w.count(w[0])
</snippet></ROW><ROW><id>17397295</id><snippet>for c in w:
</snippet></ROW><ROW><id>17397295</id><snippet>    if c is not " ":
</snippet></ROW><ROW><id>17397295</id><snippet>        if w.count(c) &gt; max:
            max_letter = c
            max = w.count(c)
</snippet></ROW><ROW><id>17397295</id><snippet>        if w.count(c) &lt; min:
            max_letter = c
            max = w.count(c)
</snippet></ROW><ROW><id>17397295</id><snippet>print max, max_letter
print min, min_letter
</snippet></ROW><ROW><id>17397295</id><snippet>'n'</snippet></ROW><ROW><id>17397461</id><snippet>In [14]: x = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])

In [16]: x.reshape((x.shape[0], -1)).mean(axis=1)
Out[16]: array([ 2.5,  6.5])
</snippet></ROW><ROW><id>17398190</id><snippet>\plugins\org.python.pydev_2.7.6\pysrc\pydev_sitecustomize\sitecustomize.py</snippet></ROW><ROW><id>17398381</id><snippet>DictWriter</snippet></ROW><ROW><id>17398381</id><snippet>writer</snippet></ROW><ROW><id>17398381</id><snippet>write.writeheader()
</snippet></ROW><ROW><id>17398408</id><snippet>RepoInitCmd = ['repo', 'init', '-u', 'git://git.company.com/platform/manifest.git']
RepoInitCmd.extend(['-b', Branch_Name])
proc = subprocess.Popen(RepoInitCmd, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>17398408</id><snippet>proc  = subprocess.Popen(RepoInitCmd, shell=True, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>17398576</id><snippet>class Post(Model)
  @property
  def age(self):
    return now() - self.timestamp
</snippet></ROW><ROW><id>17398863</id><snippet>$.post("/home", function(dataFromServer) {
  $('#mydiv').html(dataFromServer);
}
</snippet></ROW><ROW><id>17398878</id><snippet>XYZ = [ 
    ["Mac", "char", "list","one"],
    ["John", "char", "list","three"],
    ...
    ...
]
</snippet></ROW><ROW><id>17398878</id><snippet>XYZ = [ 
    {"name": "Mac", "type": "char", "link": "list", "level": "one"},
    {"name": "John", "type": "char", "link": "list", "level": "three"},
    ...
    ...
]
</snippet></ROW><ROW><id>17398878</id><snippet>import csv

XYZ = []
with open("data.csv") as csv_data:
    entries = csv.reader(csv_data, delimiter=",")
    # This can be done with list comprehension, but will be difficult to read
    for entry in entries:
        XYZ.append({
            "name": entry[0],
            "type": entry[1],
            "link": entry[2],
            "level": entry[3]
        })
</snippet></ROW><ROW><id>17399180</id><snippet>Text(self.tk,width=60,height=40)</snippet></ROW><ROW><id>17399496</id><snippet>.readlines()</snippet></ROW><ROW><id>17399496</id><snippet>with</snippet></ROW><ROW><id>17399496</id><snippet>with codecs.open(somefile, 'r','utf8') as reader:
    lines = reader.readlines()
</snippet></ROW><ROW><id>17399496</id><snippet>with</snippet></ROW><ROW><id>17399496</id><snippet>return</snippet></ROW><ROW><id>17399496</id><snippet>continue</snippet></ROW><ROW><id>17399496</id><snippet>break</snippet></ROW><ROW><id>17399496</id><snippet>reader</snippet></ROW><ROW><id>17399496</id><snippet>with codecs.open(somefile, 'r','utf8') as reader:
    lines = list(reader)
</snippet></ROW><ROW><id>17399637</id><snippet>import csv

students = {}

with open(inputcsvfile, 'rb') as scoressource:
    reader = csv.reader(scoressource)
    for name, score in reader:
        if score &lt; students.get(name, 'Z'):
            students[name] = score

with open(outputcsvfile, 'wb') as scoresdest:
    writer = csv.writer(scoresdest)
    for name, score in students.iteritems():
        writer.writerow([name, score])
</snippet></ROW><ROW><id>17399727</id><snippet>shell=True</snippet></ROW><ROW><id>17399727</id><snippet>command_line = 'mail -s "おお様からの天気予報" abc@gmail.com &lt; foo'
process = subprocess.Popen(command_line, shell=True)
</snippet></ROW><ROW><id>17399727</id><snippet>command_line = 'mail -s "おお様からの天気予報" abc@gmail.com &lt; foo'
li = command_line.split()
process = subprocess.Popen(li)
</snippet></ROW><ROW><id>17400126</id><snippet>0</snippet></ROW><ROW><id>17400126</id><snippet>0</snippet></ROW><ROW><id>17400126</id><snippet>def heap_sort(nos):
    size = len(nos)
    build_heap(size,nos)
    for i in range(size-1,0,-1):
        nums[0],nums[i] = nums[i],nums[0]
        size -= 1
        heapify(nos, 0, size) # &lt;--- i -&gt; 0
</snippet></ROW><ROW><id>17400255</id><snippet>String()</snippet></ROW><ROW><id>17400255</id><snippet>length</snippet></ROW><ROW><id>17400255</id><snippet>String()</snippet></ROW><ROW><id>17400255</id><snippet>length</snippet></ROW><ROW><id>17400255</id><snippet>class sqlalchemy.types.String(length=None, collation=None, convert_unicode=False, unicode_error=None, _warn_on_bytestring=False)
</snippet></ROW><ROW><id>17400991</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; op = subprocess.check_output(["ls","-lrt"])
&gt;&gt;&gt; print(op)
total 0
drwxr-xr-x+   4 henry  staff   136 16 Jun 11:20 Public
drwx------+   3 henry  staff   102 16 Jun 11:20 Movies
drwx------+   4 henry  staff   136 16 Jun 12:54 Pictures
drwx------@  48 henry  staff  1632 25 Jun 21:35 Library
drwx------+  39 henry  staff  1326 28 Jun 09:15 Desktop
drwx------+   8 henry  staff   272 28 Jun 12:24 Documents
drwx------+  19 henry  staff   646 29 Jun 15:15 Music
drwx------+ 146 henry  staff  4964 30 Jun 17:49 Downloads
</snippet></ROW><ROW><id>17401034</id><snippet>2D-array</snippet></ROW><ROW><id>17401034</id><snippet>a[~np.all(np.isnan(a),axis=1)]
</snippet></ROW><ROW><id>17401034</id><snippet>def remove_nan(a, split=True):
    cols = [i[0] for i in eval(str(a.dtype))]
    col = cols[0]
    test = ~np.isnan(a[col])
    if not split:
        new_len = len(a[col][test])
        new = np.empty((new_len,), dtype=a.dtype)
        for col in cols:
            new[col] = a[col][~np.isnan(a[col])]
        return new
    else:
        indices = [i for i in xrange(len(a)-1) if test[i+1]!=test[i]]
        return [i for i in np.split(a, indices) if not np.isnan(i[col][0])]
</snippet></ROW><ROW><id>17401034</id><snippet>nan</snippet></ROW><ROW><id>17401034</id><snippet>split=False</snippet></ROW><ROW><id>17401034</id><snippet>a = np.array([(1,2),(2,2),(nan,nan),(nan,nan),(4,4),(4,3)], dtype=[('test',float),('col2',float)])

remove_nan(a)

#[array([(1.0, 2.0), (2.0, 2.0)],
#      dtype=[('test', '&lt;f8'), ('col2', '&lt;f8')]),
# array([(4.0, 4.0), (4.0, 3.0)],
#      dtype=[('test', '&lt;f8'), ('col2', '&lt;f8')])]
</snippet></ROW><ROW><id>17401095</id><snippet>graphicsItem</snippet></ROW><ROW><id>17401095</id><snippet>setGraphicsItem</snippet></ROW><ROW><id>17401095</id><snippet>graphicsItem</snippet></ROW><ROW><id>17401095</id><snippet>setGraphicsItem</snippet></ROW><ROW><id>17401397</id><snippet>:code:</snippet></ROW><ROW><id>17401397</id><snippet>code</snippet></ROW><ROW><id>17401397</id><snippet>code-block</snippet></ROW><ROW><id>17401397</id><snippet>:code:</snippet></ROW><ROW><id>17401397</id><snippet>:code:</snippet></ROW><ROW><id>17401397</id><snippet>:code:`sentiment`
</snippet></ROW><ROW><id>17401397</id><snippet>`sentiment`
</snippet></ROW><ROW><id>17401509</id><snippet>.extend()</snippet></ROW><ROW><id>17401509</id><snippet>&gt;&gt;&gt; table.extend(get_foo_bar())
&gt;&gt;&gt; table.append(get_apple())
&gt;&gt;&gt; [table]
[['foo', 'bar', 'apple']]
</snippet></ROW><ROW><id>17401509</id><snippet>&gt;&gt;&gt; table = []
&gt;&gt;&gt; table.append(get_foo_bar() + (get_apple(),))
&gt;&gt;&gt; table
[('foo', 'bar', 'apple')]
</snippet></ROW><ROW><id>17401942</id><snippet>get_value_for_datastore</snippet></ROW><ROW><id>17401942</id><snippet>prop = getattr(foo.__class__,"the_property_name")
obj_key = prop.get_value_for_datastore(foo)
</snippet></ROW><ROW><id>17401942</id><snippet>KindError</snippet></ROW><ROW><id>17402049</id><snippet>nodes = dom.getElementsByTagName('Node')
nodes.sort(key=lambda x: int(x.attributes['Position'].value))
</snippet></ROW><ROW><id>17402197</id><snippet>iter()</snippet></ROW><ROW><id>17402197</id><snippet>iter()</snippet></ROW><ROW><id>17402197</id><snippet>dict</snippet></ROW><ROW><id>17402197</id><snippet>for</snippet></ROW><ROW><id>17402197</id><snippet>iter()</snippet></ROW><ROW><id>17402197</id><snippet>.next()</snippet></ROW><ROW><id>17402197</id><snippet>.__next__()</snippet></ROW><ROW><id>17402197</id><snippet>for</snippet></ROW><ROW><id>17402197</id><snippet>for</snippet></ROW><ROW><id>17402197</id><snippet>iter()</snippet></ROW><ROW><id>17402197</id><snippet>iter()</snippet></ROW><ROW><id>17402282</id><snippet>New Entity Put (per entity, regardless of entity size) = 2 writes + 2 writes per indexed property value + 1 write per composite index value</snippet></ROW><ROW><id>17402282</id><snippet>Streams</snippet></ROW><ROW><id>17402326</id><snippet>d = {'name': 'bob', 'email': 'whatever', 'x': 'y'}
print str(d)
</snippet></ROW><ROW><id>17402326</id><snippet>import json
print json.dumps (d)
</snippet></ROW><ROW><id>17402424</id><snippet>toprettyxml</snippet></ROW><ROW><id>17402424</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>17402424</id><snippet>def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="\t")
</snippet></ROW><ROW><id>17402424</id><snippet>Element</snippet></ROW><ROW><id>17402424</id><snippet>toprettyxml</snippet></ROW><ROW><id>17402483</id><snippet>with open(source) as fin, open(destination, 'w') as fout:
   reader = csv.reader(fin, delimiter=delim)
   writer = csv.writer(fout, delimiter=delim)
   for line in reader:
      line[0] = 42   # manipulate existing the column
      line.append('new column')  # Add a new column
      writer.writerow(line)
</snippet></ROW><ROW><id>17402587</id><snippet>--pause</snippet></ROW><ROW><id>17402587</id><snippet>import getopt
import msvcrt

opts, args = getopt.getopt(sys.argv[1:], '...', ['pause', ...])
for opt, arg in opts:
    if opt == "--pause":
        promptForKeypress = True
    ...
...
if promptForKeypress:
    msvcrt.getch()      # note: Windows-only
# End of Script
</snippet></ROW><ROW><id>17402587</id><snippet>@echo off

if not "%1"=="" (
  python %*
  pause
)
</snippet></ROW><ROW><id>17402587</id><snippet>pyrunner.cmd script.py {options}
</snippet></ROW><ROW><id>17402642</id><snippet>A</snippet></ROW><ROW><id>17402642</id><snippet>from abc import ABCMeta, abstractmethod

class A(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def do_some_cool_stuff():
        ''' To override '''
        pass

    def do_some_boring_stuff():
        return 2 + 2
</snippet></ROW><ROW><id>17402642</id><snippet>A</snippet></ROW><ROW><id>17402642</id><snippet>do_some_cool_stuff()</snippet></ROW><ROW><id>17402642</id><snippet>&gt;&gt;&gt; from abc import ABCMeta, abstractmethod
&gt;&gt;&gt; class A(object):
...     __metaclass__ = ABCMeta
...     @abstractmethod
...     def do_some_cool_stuff():
...         ''' To override '''
...         pass
...     def do_some_boring_stuff():
...         return 2 + 2
... 
&gt;&gt;&gt; class B(A):
...     def do_stuff():
...         return 4
... 
&gt;&gt;&gt; B()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class B with abstract methods do_some_cool_stuff
</snippet></ROW><ROW><id>17402676</id><snippet>stdeb</snippet></ROW><ROW><id>17402676</id><snippet>apt-get install python-stdeb
</snippet></ROW><ROW><id>17402676</id><snippet>myscript.py</snippet></ROW><ROW><id>17402676</id><snippet>def main():
    print "Hello world, says myscript!"
    # wait for input from the user
    raw_input()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17402676</id><snippet>somewhere/myscript/
    setup.py
    myscript/
        __init__.py
        myscript.py
</snippet></ROW><ROW><id>17402676</id><snippet>import os
from setuptools import setup
from nvpy import nvpy

setup(
    name = "myscript",
    version = "1.0",
    author = "Charl P. Botha",
    author_email = "cpbotha@vxlabs.com",
    description = "Demo of packaging a Python script as DEB",
    license = "BSD",
    url = "https://github.com/cpbotha/nvpy",
    packages=['myscript'],
    entry_points = {
        'console_scripts' : ['myscript = myscript.myscript:main']
    },
    data_files = [
        ('share/applications/', ['vxlabs-myscript.desktop'])
    ],
    classifiers=[
        "License :: OSI Approved :: BSD License",
    ],
)
</snippet></ROW><ROW><id>17402676</id><snippet>console_scripts</snippet></ROW><ROW><id>17402676</id><snippet>my_script</snippet></ROW><ROW><id>17402676</id><snippet>tkinter</snippet></ROW><ROW><id>17402676</id><snippet>wxpython</snippet></ROW><ROW><id>17402676</id><snippet>gui_scripts</snippet></ROW><ROW><id>17402676</id><snippet>console_scripts</snippet></ROW><ROW><id>17402676</id><snippet>data_files</snippet></ROW><ROW><id>17402676</id><snippet>/usr/share/applications</snippet></ROW><ROW><id>17402676</id><snippet>myscript</snippet></ROW><ROW><id>17402676</id><snippet>vxlabs-myscript.desktop</snippet></ROW><ROW><id>17402676</id><snippet>[Desktop Entry]
Version=1.0
Type=Application
Name=myscript
Comment=Minimal stdeb example
# myscript should wait for user input at the end, else the terminal
# window will disappear immediately.
Exec=myscript
Icon=/usr/share/icons/gnome/48x48/apps/file-manager.png
Categories=Utility;
# desktop should run this in a terminal application
Terminal=true
StartupNotify=true
StartupWMClass=myscript
</snippet></ROW><ROW><id>17402676</id><snippet>myscript</snippet></ROW><ROW><id>17402676</id><snippet>python setup.py --command-packages=stdeb.command bdist_deb
</snippet></ROW><ROW><id>17402676</id><snippet>myscript</snippet></ROW><ROW><id>17402833</id><snippet>train = os.path.join('c:/Documents and Settings', train)
</snippet></ROW><ROW><id>17402850</id><snippet>(2/2)</snippet></ROW><ROW><id>17402850</id><snippet>1</snippet></ROW><ROW><id>17402850</id><snippet>(6-(1))</snippet></ROW><ROW><id>17402850</id><snippet>5</snippet></ROW><ROW><id>17402850</id><snippet>(5)+5</snippet></ROW><ROW><id>17402850</id><snippet>10</snippet></ROW><ROW><id>17402937</id><snippet>import datetime as DT
import numpy as np
import pandas as pd

np.random.seed(2013)
N = 10**4
df = pd.DataFrame(
    np.cumsum(np.random.random(N) - 0.5),
    index=pd.date_range('2010-8-31', freq='10T', periods=N))
#                             0
# 2010-08-31 00:00:00  0.175448
# 2010-08-31 00:10:00  0.631796
# 2010-08-31 00:20:00  0.399373
# 2010-08-31 00:30:00  0.499184
# 2010-08-31 00:40:00  0.631005
# ...
# 2010-11-08 09:50:00 -3.474801
# 2010-11-08 10:00:00 -3.172819
# 2010-11-08 10:10:00 -2.988451
# 2010-11-08 10:20:00 -3.101262
# 2010-11-08 10:30:00 -3.477685

eight_to_five = df.ix[df.index.indexer_between_time(DT.time(8), DT.time(17))]
#                             0
# 2010-08-31 08:00:00  1.440543
# 2010-08-31 08:10:00  1.450957
# 2010-08-31 08:20:00  1.746454
# 2010-08-31 08:30:00  1.443941
# 2010-08-31 08:40:00  1.845446
# ...
# 2010-11-08 09:50:00 -3.474801
# 2010-11-08 10:00:00 -3.172819
# 2010-11-08 10:10:00 -2.988451
# 2010-11-08 10:20:00 -3.101262
# 2010-11-08 10:30:00 -3.477685

# daily_mean = eight_to_five.groupby()
daily_mean = eight_to_five.resample('D', how='mean')
#                    0
# 2010-08-31  0.754004
# 2010-09-01  0.203610
# 2010-09-02  5.219528
# 2010-09-03  6.337688
# 2010-09-04  2.765504

monthly_mean = daily_mean.resample('M', how='mean')
#                    0
# 2010-08-31  0.754004
# 2010-09-30 -0.437582
# 2010-10-31  3.533525
# 2010-11-30  4.356728

yearly_mean = daily_mean.groupby(daily_mean.index.year).mean()
#              0
# 2010  1.885995
</snippet></ROW><ROW><id>17402937</id><snippet>groupby</snippet></ROW><ROW><id>17403030</id><snippet>object</snippet></ROW><ROW><id>17403030</id><snippet>import numpy as np
o = ['x','y','z','a','b']
a = np.zeros((len(o),len(o)),dtype=object)
s  =[('x',{'y':'1,3','z':'2'}), ('y',{'a':'4'}), ('z',{'b':'2,3'})]
for vi in s:
    i = o.index(vi[0])
    for vj in vi[1].items():
        j = o.index(vj[0])
        a[i,j] = vj[1]
        a[j,i] = a[i,j]

# building the structured array
b = np.zeros((len(o),), dtype=[(i,object) for i in o])
for i,vi in enumerate(o):
    b[vi] = a[i,:]

# building a dictionary to access the values
d = dict(( (vi, dict(( (vj, a[i,j]) for j,vj in enumerate(o) ))) for i,vi in enumerate(o) ))
</snippet></ROW><ROW><id>17403130</id><snippet>globals()</snippet></ROW><ROW><id>17403130</id><snippet>for i in xrange(len(games)):
    globals()[games[i][1].__name__] = route(games[i][0])(games[i][1])
</snippet></ROW><ROW><id>17403130</id><snippet>include()</snippet></ROW><ROW><id>17403130</id><snippet>include()</snippet></ROW><ROW><id>17403130</id><snippet>for member in dir(module):
    member = getattr(module, member)
    if isinstance(member, type) and issubclass(member, web.RequestHandler) and hasattr(member, 'routes'):
        # ...
    elif isinstance(member, type) and issubclass(member, web.RequestHandler) and hasattr(member, 'route_path'):
        # ...
    elif isinstance(member, type) and issubclass(member, web.RequestHandler) and hasattr(member, 'rest_route_path'):
        # ...
</snippet></ROW><ROW><id>17403130</id><snippet>dir(module)</snippet></ROW><ROW><id>17403499</id><snippet>line</snippet></ROW><ROW><id>17403499</id><snippet>line</snippet></ROW><ROW><id>17403499</id><snippet>import collections

answer = collections.defaultdict(list)
with open('out3.txt', 'r+') as istream:
    for line in istream:
        line = line.strip()
        try:
            k, v = line.split(',', 1)
            answer[k.strip()].append(v.strip())
        except ValueError:
            print('Ignoring: malformed line: "{}"'.format(line))

print(answer)
</snippet></ROW><ROW><id>17403499</id><snippet>1</snippet></ROW><ROW><id>17403499</id><snippet>str.split()</snippet></ROW><ROW><id>17403499</id><snippet>v</snippet></ROW><ROW><id>17403521</id><snippet>pip install cython
pip install git+https://github.com/surfly/gevent.git
</snippet></ROW><ROW><id>17403601</id><snippet>with open("foo.txt" , 'r') as foo:
    listme = foo.read()

string =  listme.strip().split(',')
new_string = ''


for words in string:
    if words not in new_string:
        if '@hotmail.com' in words:
            new_string+=words


print new_string
</snippet></ROW><ROW><id>17403601</id><snippet>@hotmail.com</snippet></ROW><ROW><id>17403601</id><snippet>'zurunet@hotmail.com' 'zaiker_8@hotmail.com'
</snippet></ROW><ROW><id>17403843</id><snippet>\xf6</snippet></ROW><ROW><id>17403843</id><snippet>ö</snippet></ROW><ROW><id>17403964</id><snippet>import re
def get_name_and_number(text):
    return re.match(r'(\D+)(\d+).*', text).groups()
</snippet></ROW><ROW><id>17403964</id><snippet>&gt;&gt;&gt; get_name_and_number('storm000045.tiff')
('storm', '000045')
</snippet></ROW><ROW><id>17403964</id><snippet>def extract_numbers(text):
    return ''.join([x for x in text if x.isdigit()])
</snippet></ROW><ROW><id>17403964</id><snippet>&gt;&gt;&gt; extract_numbers('storm000045.tiff')
'000045'
</snippet></ROW><ROW><id>17403972</id><snippet>foo.bar.baz</snippet></ROW><ROW><id>17403972</id><snippet>Spam</snippet></ROW><ROW><id>17403972</id><snippet>ham</snippet></ROW><ROW><id>17403972</id><snippet>foo.bar.baz.Spam.ham</snippet></ROW><ROW><id>17403972</id><snippet>ham</snippet></ROW><ROW><id>17404077</id><snippet>stdin</snippet></ROW><ROW><id>17404077</id><snippet>tmpfs</snippet></ROW><ROW><id>17404077</id><snippet>/proc/self/fd</snippet></ROW><ROW><id>17404077</id><snippet>/dev/fd/*</snippet></ROW><ROW><id>17404077</id><snippet>stdin</snippet></ROW><ROW><id>17404077</id><snippet>stdin</snippet></ROW><ROW><id>17404077</id><snippet>/proc/self/fd</snippet></ROW><ROW><id>17404077</id><snippet>/dev/fd</snippet></ROW><ROW><id>17404342</id><snippet>homogenous</snippet></ROW><ROW><id>17404342</id><snippet>True</snippet></ROW><ROW><id>17404342</id><snippet>homogenous</snippet></ROW><ROW><id>17404342</id><snippet>structure = gtk.Table(6, 2, True)
</snippet></ROW><ROW><id>17404342</id><snippet>HBox</snippet></ROW><ROW><id>17404342</id><snippet>VBox</snippet></ROW><ROW><id>17404342</id><snippet>VBox</snippet></ROW><ROW><id>17404342</id><snippet>HBox</snippet></ROW><ROW><id>17404342</id><snippet>VBox</snippet></ROW><ROW><id>17404342</id><snippet>HBox</snippet></ROW><ROW><id>17404827</id><snippet>binascii.unhexlify()</snippet></ROW><ROW><id>17404827</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>17404827</id><snippet>&gt;&gt;&gt; from binascii import unhexlify, hexlify
&gt;&gt;&gt; s1 = "48656c6c6f"
&gt;&gt;&gt; s2 = "61736b"
&gt;&gt;&gt; hexlify(''.join(chr(ord(c1) ^ ord(c2)) for c1, c2 in zip(unhexlify(s1[-len(s2):]), unhexlify(s2))))
'0d1f04'
</snippet></ROW><ROW><id>17404827</id><snippet>ord()</snippet></ROW><ROW><id>17404827</id><snippet>chr()</snippet></ROW><ROW><id>17404827</id><snippet>s1</snippet></ROW><ROW><id>17404827</id><snippet>s2</snippet></ROW><ROW><id>17404827</id><snippet>s1</snippet></ROW><ROW><id>17404827</id><snippet>s1</snippet></ROW><ROW><id>17404827</id><snippet>s2</snippet></ROW><ROW><id>17404827</id><snippet>&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; hexlify(''.join(chr(ord(c1) ^ ord(c2)) for c1, c2 in zip(unhexlify(s1), cycle(unhexlify(s2)))))
'2916070d1c'
</snippet></ROW><ROW><id>17404827</id><snippet>unhexlify()</snippet></ROW><ROW><id>17404827</id><snippet>s1</snippet></ROW><ROW><id>17404827</id><snippet>s2</snippet></ROW><ROW><id>17404827</id><snippet>int(twocharacters, 16)</snippet></ROW><ROW><id>17405121</id><snippet>accumarray</snippet></ROW><ROW><id>17405121</id><snippet>&gt;&gt; r = accumarray( A(:,1), A(:,2), [], @(x) {x'} ); %//'
 r = 
  [1x3 double]
  [1x2 double]
&gt;&gt; r{1}
 ans =
  1     3     9
&gt;&gt; r{2}
 ans =
  4     7
</snippet></ROW><ROW><id>17405121</id><snippet>r</snippet></ROW><ROW><id>17405121</id><snippet>B</snippet></ROW><ROW><id>17405121</id><snippet>&gt;&gt; [U ix iu] = unique( A(:,1) ); % see EitantT's comment
&gt;&gt; r = accumarray( iu, A(:,2), [], @(x) {x'} ); 
&gt;&gt; n = cellfun( @numel, r ); % fund num elements in each row - need for max
&gt;&gt; mx = max(n);
&gt;&gt; pad = 555555; % padding value
&gt;&gt; r = cellfun( @(x) [x pad*ones(1,mx - numel(x))], r, 'uni', 0 );
&gt;&gt; B = vertcat( r{:} ); % construct B from padded rows of r
</snippet></ROW><ROW><id>17405142</id><snippet>&gt;&gt;&gt; A.func.__func__ is A.func.__func__
True
</snippet></ROW><ROW><id>17405142</id><snippet>self</snippet></ROW><ROW><id>17405228</id><snippet>browser.find_element_by_xpath('//input[contains(@name, "user")]')
browser.find_element_by_xpath('//input[@name="user" or @name="username"]')
</snippet></ROW><ROW><id>17405451</id><snippet>if __name__ == '__main__':
    "Testing - Accept a single connection"
    class TNS(SocketServer.TCPServer):
        allow_reuse_address = True

    class TNH(TelnetHandler):
        def cmdECHO(self, params):
            """ [&lt;arg&gt; ...]
            Echo parameters
            Echo command line parameters back to user, one per line.
            """
            self.writeline("Parameters:")
            for item in params:
                self.writeline("\t%s" % item)
        def cmdTIME(self, params):
            """
            Print Time
            Added by dilbert
            """
            self.writeline(time.ctime())

    logging.getLogger('').setLevel(logging.DEBUG)

    tns = TNS(("0.0.0.0", 8023), TNH)
    tns.serve_forever()
</snippet></ROW><ROW><id>17405493</id><snippet>decimal</snippet></ROW><ROW><id>17405493</id><snippet>float</snippet></ROW><ROW><id>17405493</id><snippet># instead of if float1==float2:, use this:
if abs(float1-float2) &lt;= sys.float_info.epsilon: 
    print "equal"
</snippet></ROW><ROW><id>17405768</id><snippet>import unittest
class Wordnet():

    def __init__(self):
        # self.graph = Graph()
        self.before_at = ''
        self.after_at = ''
        self.word_part = ''
        self.gloss_part = ''
        self.lex_filenum = ''

    def process_file(self):
        self.file = open("testing_line.txt", "r")
        return self.file

    def line_for_loop(self, file):
        for line in file:
            self.split_pointer_part(line)
            self.split_word_part(line)
            self.split_gloss_part(line)
            self.process_lex_filenum(self.word_part) 

    def split_pointer_part(self, line):
        self.before_at, self.after_at = line.split('@', 1)
        return self.before_at, self.after_at    

    def split_word_part(self, line):
        self.word_part = line.split()
        return self.word_part

    def split_gloss_part(self, line):
        self.gloss_part = line.strip().split('|')
        return self.gloss_part

    def process_lex_filenum(self, word_part):
        self.lex_filenum = word_part[1]
        return self.lex_filenum


class WordnetTestCase(unittest.TestCase):
    def setUp(self):
        self.wn = Wordnet()

    def test_split_pointer_part(self):
        line = 'foo@bar'
        result = self.wn.split_pointer_part(line)
        answer = ('foo', 'bar')
        self.assertEqual(len(result), 2)
        for r, a in zip(result, answer):
            self.assertEqual(r, a) 

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>17405870</id><snippet>__file__</snippet></ROW><ROW><id>17405870</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; print(math.__file__)
/usr/lib/python2.7/lib-dynload/math.so
</snippet></ROW><ROW><id>17405870</id><snippet>.so</snippet></ROW><ROW><id>17406225</id><snippet>prog</snippet></ROW><ROW><id>17406225</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>17406225</id><snippet>%(prog)s</snippet></ROW><ROW><id>17406225</id><snippet>prog</snippet></ROW><ROW><id>17406225</id><snippet>ArgumentParser()</snippet></ROW><ROW><id>17406225</id><snippet>parser = argparse.ArgumentParser('some_other_name')
</snippet></ROW><ROW><id>17406225</id><snippet>.prog</snippet></ROW><ROW><id>17406225</id><snippet>print parser.prog  # prints "some_other_name"
</snippet></ROW><ROW><id>17406225</id><snippet>argparse</snippet></ROW><ROW><id>17406225</id><snippet>os.path.basename()</snippet></ROW><ROW><id>17406247</id><snippet>wrapper</snippet></ROW><ROW><id>17406247</id><snippet>    def __init__(self, *args, **kwargs):
    if not self.doc_type:
        self.doc_type = self.__class__.__name__
    for attr_name in dir(self):
        if not attr_name.startswith("_") and attr_name not in ["id", "rev"]:
            attr_val = getattr(self, attr_name)
            if isinstance(attr_val, CouchView):
                setattr(self, attr_name, ViewDefinition(self.doc_type, attr_name, attr_val.template.render(self.__dict__), wrapper=self))
</snippet></ROW><ROW><id>17406247</id><snippet>user = User()
manager.add_document(user)
</snippet></ROW><ROW><id>17406247</id><snippet>_data = {}</snippet></ROW><ROW><id>17406315</id><snippet>python my_program.py</snippet></ROW><ROW><id>17406315</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>17406595</id><snippet>"default"</snippet></ROW><ROW><id>17406595</id><snippet>def g(y, z = None):
    if z is None:
        z = "default"
    print y, z

def f(y, z = None):
    g(y, z)
</snippet></ROW><ROW><id>17406646</id><snippet>u</snippet></ROW><ROW><id>17406646</id><snippet>&gt;&gt;&gt; unicode_string = u'my unicode string'
&gt;&gt;&gt; type(unicode_string)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; ascii_string = 'my ascii string'
&gt;&gt;&gt; type(ascii_string)
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>17406646</id><snippet>str</snippet></ROW><ROW><id>17406646</id><snippet>&gt;&gt;&gt; converted_string = str(unicode_string)
&gt;&gt;&gt; type(converted_string)
</snippet></ROW><ROW><id>17406646</id><snippet>&gt;&gt;&gt; unicode_string = u'ö'
&gt;&gt;&gt; converted_string = str(unicode_string)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>17406656</id><snippet>data</snippet></ROW><ROW><id>17406656</id><snippet>.post</snippet></ROW><ROW><id>17406656</id><snippet>request.form</snippet></ROW><ROW><id>17406656</id><snippet>print rv.status_code
print rv.location #None if not a redirect
</snippet></ROW><ROW><id>17407140</id><snippet>absolute path</snippet></ROW><ROW><id>17407140</id><snippet>settings.py</snippet></ROW><ROW><id>17407140</id><snippet>XMLFILES_FOLDER</snippet></ROW><ROW><id>17407140</id><snippet>settings.py</snippet></ROW><ROW><id>17407140</id><snippet>import os
settings_dir = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.dirname(settings_dir))
XMLFILES_FOLDER = os.path.join(PROJECT_ROOT, 'xml_files/')
</snippet></ROW><ROW><id>17407140</id><snippet>xml_files</snippet></ROW><ROW><id>17407140</id><snippet>xml_files</snippet></ROW><ROW><id>17407140</id><snippet>XMLFILES_FOLDER = os.path.join(PROJECT_ROOT, 'f1/f2/xml_files/')
</snippet></ROW><ROW><id>17407140</id><snippet>from settings import XMLFILES_FOLDER
path = XMLFILES_FOLDER+'area.xml'
</snippet></ROW><ROW><id>17407252</id><snippet>"</snippet></ROW><ROW><id>17407252</id><snippet>text="""&lt;script type="text/javascript" language="JavaScript"&gt;
ArtistName = "FUN.";
SongName = "We Are Young";
&lt;/script&gt; """

import re

print dict(re.findall(r'((?:Artist|Song)Name)\s=\s"([^"]*)"', text))
# {'ArtistName': 'FUN.', 'SongName': 'We Are Young'}
</snippet></ROW><ROW><id>17407257</id><snippet>inspect.stack()</snippet></ROW><ROW><id>17407257</id><snippet>sys._getframe(1)</snippet></ROW><ROW><id>17407257</id><snippet>.f_back</snippet></ROW><ROW><id>17407257</id><snippet>context</snippet></ROW><ROW><id>17407257</id><snippet>0</snippet></ROW><ROW><id>17407257</id><snippet>inspect.stack(0)
</snippet></ROW><ROW><id>17407318</id><snippet>''</snippet></ROW><ROW><id>17407318</id><snippet>import re
split = re.compile(r"'\w{2}'")

with open("file2","w") as fw:
    for word in split.findall(open("file","r").read()):
            fw.write(word.strip("'")+"\n")
</snippet></ROW><ROW><id>17407319</id><snippet>`nan</snippet></ROW><ROW><id>17407333</id><snippet>str.translate</snippet></ROW><ROW><id>17407333</id><snippet>&gt;&gt;&gt; from string import punctuation,whitespace
&gt;&gt;&gt; strs = "(251) 342-7344"
&gt;&gt;&gt; strs.translate(None, punctuation+whitespace)
'2513427344'
</snippet></ROW><ROW><id>17407333</id><snippet>str.isdigit</snippet></ROW><ROW><id>17407333</id><snippet>str.join</snippet></ROW><ROW><id>17407333</id><snippet>&gt;&gt;&gt; "".join([x for x in strs if x.isdigit()])
'2513427344'
</snippet></ROW><ROW><id>17407333</id><snippet>&gt;&gt;&gt; strs = "(251) 342-7344"*1000
&gt;&gt;&gt; %timeit strs.translate(None, punctuation+whitespace)
10000 loops, best of 3: 116 us per loop                   #clear winner
&gt;&gt;&gt; %timeit "".join([x for x in strs if x.isdigit()])
100 loops, best of 3: 4.42 ms per loop
&gt;&gt;&gt; %timeit re.sub(r'[^\d]', '', strs)
100 loops, best of 3: 2.19 ms per loop
</snippet></ROW><ROW><id>17407341</id><snippet>bin/</snippet></ROW><ROW><id>17407341</id><snippet>Scripts\</snippet></ROW><ROW><id>17407363</id><snippet>import lxml.html
import urllib2

html = urllib2.urlopen("http://http://environmentalchemistry.com/yogi/periodic/W.html").read()
doc = lxml.html.document_fromstring(html)
result = doc.xpath("/html/body/div[2]/div[2]/div[1]/div[1]/ul[7]/li[8]")
</snippet></ROW><ROW><id>17407429</id><snippet>/Library/Python/2.7/site-packages</snippet></ROW><ROW><id>17407636</id><snippet>yourapp/yourapp/</snippet></ROW><ROW><id>17407636</id><snippet>settings</snippet></ROW><ROW><id>17407636</id><snippet>__init__.py</snippet></ROW><ROW><id>17407636</id><snippet>base.py</snippet></ROW><ROW><id>17407636</id><snippet>development.py</snippet></ROW><ROW><id>17407636</id><snippet>production.py</snippet></ROW><ROW><id>17407636</id><snippet>yourapp/
       yourapp/
              settings/
                      __init__.py
                      base.py
                      production.py
                      development.py
</snippet></ROW><ROW><id>17407636</id><snippet>common.txt</snippet></ROW><ROW><id>17407636</id><snippet>dev.txt</snippet></ROW><ROW><id>17407636</id><snippet>-r common.txt
</snippet></ROW><ROW><id>17407676</id><snippet>after_at</snippet></ROW><ROW><id>17407676</id><snippet>''</snippet></ROW><ROW><id>17407676</id><snippet>before_at, after_at = line.partition('@')[::2]
</snippet></ROW><ROW><id>17407805</id><snippet> //div[@class="overview"]/div
</snippet></ROW><ROW><id>17407805</id><snippet> re.sub('&lt;[^&gt;]*&gt;', '', mystring)
</snippet></ROW><ROW><id>17407925</id><snippet>pattern = re.compile(r'(?:review: )?(http://url.com/(\d+))\s?', re.IGNORECASE)
</snippet></ROW><ROW><id>17407925</id><snippet>&gt;&gt;&gt; match = pattern.findall('this is the message. review: http://url.com/123 http://url.com/456')
&gt;&gt;&gt; match
[('http://url.com/123', '123'), ('http://url.com/456', '456')]
</snippet></ROW><ROW><id>17408027</id><snippet>lift</snippet></ROW><ROW><id>17408027</id><snippet>lower</snippet></ROW><ROW><id>17408027</id><snippet>self.lift(self.text, self.bar)
</snippet></ROW><ROW><id>17408032</id><snippet>for</snippet></ROW><ROW><id>17408032</id><snippet>def find_dirty_cells(board):
    return ((enum, enumrow) for enum, row in enumerate(board) for enumrow, cell in enumerate(row) if cell == 'd')
</snippet></ROW><ROW><id>17408032</id><snippet>enumerate(board)</snippet></ROW><ROW><id>17408032</id><snippet>enumerate(row)</snippet></ROW><ROW><id>17408032</id><snippet>row</snippet></ROW><ROW><id>17408032</id><snippet>yield</snippet></ROW><ROW><id>17408032</id><snippet>dirty_cells.append()</snippet></ROW><ROW><id>17408032</id><snippet>def find_dirty_cells(board):
    for enum, row in enumerate(board):
        for enumrow, cell in enumerate(row):
            if cell == 'd':
                yield enum, enumrow
</snippet></ROW><ROW><id>17408528</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse('interface_range_test.xml')
root = tree.getroot()

for command in root.iter("{http://clish.sourceforge.net/XMLSchema}COMMAND"):
    subs = list(command.iter('{http://clish.sourceforge.net/XMLSchema}CONFIG'))
    if len(subs） &gt; 0: #we found CONFIG
        print command.tag, command.attrib, subs[0].tag, subs[0].attrib
</snippet></ROW><ROW><id>17408528</id><snippet>{http://clish.sourceforge.net/XMLSchema}COMMAND {'name': 'shutdown', 'help': 'Shutdown the selected interface'} {http://clish.sourceforge.net/XMLSchema}CONFIG {'priority': '0x7F01'}
{http://clish.sourceforge.net/XMLSchema}COMMAND {'name': 'no shutdown', 'help': 'Enable the selected interface'} {http://clish.sourceforge.net/XMLSchema}CONFIG {'pattern': 'shutdown', 'operation': 'unset'}
</snippet></ROW><ROW><id>17408556</id><snippet>globals()</snippet></ROW><ROW><id>17408556</id><snippet>object_instance.__dict__</snippet></ROW><ROW><id>17408596</id><snippet>pip install regex
</snippet></ROW><ROW><id>17408596</id><snippet>import regex
from pprint import pprint


thestr = '{CGPoint={CGPoint=d{CGPoint=dd}}}{CGSize=dd}dd{CSize=aa}'

theregex = r'''
    (
        {
            (?&lt;match&gt;
                [^{}]*
                (?:
                    (?1)
                    [^{}]*
                )+
                |
                [^{}]+
            )
        }
        |
        (?&lt;match&gt;
            [^{}]+
        )
    )
'''

matches = regex.findall(theregex, thestr, regex.X)

print 'all matches:\n'
pprint(matches)

print '\ndesired matches:\n'
print [match[1] for match in matches]
</snippet></ROW><ROW><id>17408596</id><snippet>all matches:

[('{CGPoint={CGPoint=d{CGPoint=dd}}}', 'CGPoint={CGPoint=d{CGPoint=dd}}'),
 ('{CGSize=dd}', 'CGSize=dd'),
 ('dd', 'dd'),
 ('{CSize=aa}', 'CSize=aa')]

desired matches:

['CGPoint={CGPoint=d{CGPoint=dd}}', 'CGSize=dd', 'dd', 'CSize=aa']
</snippet></ROW><ROW><id>17408628</id><snippet>edges = g.es.select(name="Route69")
</snippet></ROW><ROW><id>17408628</id><snippet>vertices = set()
for edge in edges:
    vertices.update(edge.tuple)
</snippet></ROW><ROW><id>17408628</id><snippet>Route69</snippet></ROW><ROW><id>17408628</id><snippet>vertices = g.vs[sorted(vertices)]
</snippet></ROW><ROW><id>17408792</id><snippet>with codecs.open("testcodec.txt", "r","utf-8") as f3:
    s = f3.read()

# modify s here

with codecs.open("testcodec.txt", "w","utf-8") as f3:
    f3.write(s)
</snippet></ROW><ROW><id>17408792</id><snippet>s = 'asdf'</snippet></ROW><ROW><id>17408792</id><snippet>str</snippet></ROW><ROW><id>17408792</id><snippet>type(s)</snippet></ROW><ROW><id>17408792</id><snippet>s2 = u'asdf'</snippet></ROW><ROW><id>17408792</id><snippet>unicode</snippet></ROW><ROW><id>17408792</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>17408792</id><snippet>s = 'asdf'</snippet></ROW><ROW><id>17408792</id><snippet>unicode</snippet></ROW><ROW><id>17408831</id><snippet>divmod</snippet></ROW><ROW><id>17408895</id><snippet>any()</snippet></ROW><ROW><id>17408895</id><snippet>True</snippet></ROW><ROW><id>17408895</id><snippet>False</snippet></ROW><ROW><id>17408895</id><snippet>True</snippet></ROW><ROW><id>17408895</id><snippet>False</snippet></ROW><ROW><id>17408895</id><snippet>any()</snippet></ROW><ROW><id>17408895</id><snippet>int()</snippet></ROW><ROW><id>17408925</id><snippet>+'</snippet></ROW><ROW><id>17408925</id><snippet>*'</snippet></ROW><ROW><id>17408925</id><snippet>-'</snippet></ROW><ROW><id>17408925</id><snippet>inc'</snippet></ROW><ROW><id>17408925</id><snippet>dec'</snippet></ROW><ROW><id>17408990</id><snippet>&gt;&gt;&gt; '%.5s' % ('1234567890',)
'12345'
</snippet></ROW><ROW><id>17408993</id><snippet>am</snippet></ROW><ROW><id>17408993</id><snippet>am = [1, 2, 3, 3, 3]
</snippet></ROW><ROW><id>17409030</id><snippet>A = 1
B = some_other_value
if B != 0:
    A /= B
</snippet></ROW><ROW><id>17409030</id><snippet>try</snippet></ROW><ROW><id>17409030</id><snippet>execpt</snippet></ROW><ROW><id>17409030</id><snippet>try</snippet></ROW><ROW><id>17409030</id><snippet>try</snippet></ROW><ROW><id>17409030</id><snippet>except</snippet></ROW><ROW><id>17409030</id><snippet>else</snippet></ROW><ROW><id>17409030</id><snippet>finally</snippet></ROW><ROW><id>17409119</id><snippet>import subprocess

ppid = '7773'
subprocess.call(['pkill', '-STOP', '-P', ppid])
</snippet></ROW><ROW><id>17409119</id><snippet>import os
ppid = os.getppid()
</snippet></ROW><ROW><id>17409135</id><snippet>(?&lt;=XYZ\s)(\w[^\d]+\d+\s\d+)</snippet></ROW><ROW><id>17409135</id><snippet>(\w[^\d]+\d+\s\d+)</snippet></ROW><ROW><id>17409135</id><snippet>XYZ</snippet></ROW><ROW><id>17409144</id><snippet>numpy.argmax(numpy.average(complete_matrix,axis=0, weights=complete_matrix!=0))
</snippet></ROW><ROW><id>17409175</id><snippet>In [107]: pd.DataFrame(np.diag(s),index=s.index,columns=s.index)
Out[107]: 
          a         b         c         d         e
a  0.630529  0.000000  0.000000  0.000000  0.000000
b  0.000000  0.360884  0.000000  0.000000  0.000000
c  0.000000  0.000000  0.345719  0.000000  0.000000
d  0.000000  0.000000  0.000000  0.796625  0.000000
e  0.000000  0.000000  0.000000  0.000000 -0.176848
</snippet></ROW><ROW><id>17409197</id><snippet>render</snippet></ROW><ROW><id>17409197</id><snippet>render</snippet></ROW><ROW><id>17409410</id><snippet>import urllib
import urllib2
import shutil
import urlparse
import os
import sys
import re
import string
import unicodedata
import traceback
from titlecase import titlecase

class PubMedObject:
    doi = ''
    pmid = False
    pubmed_url = ''
    external_url = ''
    local_file = ''
    html_file = ''

    journal = ''
    authors = []
    title = ''
    pages = ''
    pub_year = ''
    volume = ''

    def __init__(self, doi_or_pmid):
        doi_or_pmid = doi_or_pmid.strip()
        self.pmid = (doi_or_pmid[:4] == 'pmid')

        #initialize URL for downloading
        if self.pmid:
            self.doi = doi_or_pmid[5:]
            self.pubmed_url = 'http://www.ncbi.nlm.nih.gov/pubmed/' + self.doi
            self.external_url = 'http://www.ncbi.nlm.nih.gov/pubmed/' + self.doi
        else:
            self.doi = doi_or_pmid
            self.pubmed_url = 'http://www.ncbi.nlm.nih.gov/pubmed/?term=' + self.doi
            self.external_url = 'http://dx.doi.org/' + self.doi

        #initialize name of local file
        self.local_file = getproperfilename(urllib.quote_plus(self.doi)) + '.html'

        #delete the local file if it already exists
        if os.path.isfile(self.local_file):
            os.remove(self.local_file)

    #call this before using anything in the object
    def download(self):
        response = urllib2.urlopen(urllib2.Request(self.pubmed_url))
        try:
            with open(self.local_file, 'wb') as f:
                self.html_file = response.read()
                f.write(self.html_file)
                f.close()
                #shutil.copyfileobj(response, f)

            #self.html_file = open(self.local_file,'r').read()
        except:
            print "Tried to download " + self.pubmed_url + ", but got this error."
            print sys.exc_info()[0]
        finally:
            response.close()

    #auths is the string that has the list of authors to return
    def get_authors(self, auths):
        result = []
        authors = re.sub(r'&lt;[^&lt;]+?&gt;', '', auths[:-1]).split(', ')
        for author in authors:
            lname, name = author.split(' ')
            #add periods after each letter in the first name
            fname = ''
            for c in name:
                fname += c + '.'
            result.append(lname + ', ' + fname)
        self.authors = result
        return self.authors

    #call this after downloading the object
    def fill_data(self):
        try:
            matches = re.search('&lt;div class="rprt_all"&gt;&lt;div class="rprt abstract"&gt;&lt;div class="cit"&gt;' +
                                '&lt;a.*&gt;(?P&lt;journal&gt;.*)&lt;/a&gt; (?P&lt;bib_year&gt;\d{4}).*?;(?P&lt;bib_volume&gt;.*?):' +
                                '(?P&lt;bib_pages&gt;.*?)\..*&lt;/div&gt;&lt;h1&gt;(?P&lt;title&gt;.*?)&lt;/h1&gt;&lt;div class="auths"&gt;(?P&lt;auths&gt;.*?)&lt;/div&gt;' +
                                '&lt;div class="aff"&gt;.*&lt;p&gt;(?P&lt;aff&gt;.*?)&lt;/p&gt;&lt;/div&gt;', self.html_file)

            self.title = titlecase(matches.group('title'))
            #print "Title: " + self.title
            self.get_authors(matches.group('auths'))
            #print "Authors: %s" % ', '.join(self.authors)
            self.journal = matches.group('journal')
            #print "Journal: " + self.journal
            self.pub_year = matches.group('bib_year')
            #print "Pub_year: " + self.pub_year
            self.volume = matches.group('bib_volume')
            #print "Volume: " + self.volume
            self.pages = matches.group('bib_pages')
            #print "Pages: " + self.pages
        except AttributeError as e:
            print "Not enough information was found for\n\t" + self.pubmed_url
            pass

    def get_formatted(self):
        new_file = ''
        new_file += ('\t&lt;tr&gt;\n\t\t&lt;td valign="top" class="resourcesICO"&gt;')
        new_file +=     ('&lt;a href="%s" target="_blank"&gt;&lt;img src="../../image/ico_sitelink.gif" width="24" height="24" /&gt;&lt;/a&gt;&lt;/td&gt;\n') % (self.external_url)
        new_file += ('\t\t&lt;td&gt;&lt;a href="%s" target="_blank"&gt;%s&lt;/a&gt;&lt;br /&gt;\n') % (self.external_url, self.title)
        new_file += ('\t\t%s&lt;br /&gt;\n') % (', '.join(self.authors))
        new_file += ('\t\t&lt;em&gt;%s, %s, %s, %s.&lt;/em&gt;&lt;/td&gt;\n') % (self.journal, self.pub_year, self.volume, self.pages)
        new_file += ('\t&lt;/tr&gt;\n')
        return new_file


def getproperfilename(s):
    validFilenameChars = "-_.() %s%s" % (string.ascii_letters, string.digits)
    return ''.join(c for c in s if c in validFilenameChars)    

def process_doi(doi):
    doi_object = PubMedObject(doi)
    try:
        #print "Downloading " + doi_object.pubmed_url + "..."
        doi_object.download()
        doi_object.fill_data()
        return doi_object.get_formatted()
    except urllib2.HTTPError:
        print "Skipping " + doi_object.pubmed_url + "..."
        return ''

def main(args):
    try:
        # program's main code here
        # You can also enter a PubMed id using the syntax pmid:xxxxxxxx
        print "Enter the doi to process.  Leave blank to use the dois.txt file."
        print "You can also enter a PubMed id using the syntax pmid:xxxxxxxx"
        doi = raw_input()
        if doi == '':
            with open('dois.txt','r') as doi_file:
                for doi in doi_file:
                    with open('simple.html','a') as sum_file:
                        sum_file.write(process_doi(doi))
                doi_file.close()
        else:
            print process_doi(doi)

    except BaseException as e:
        print traceback.format_exc()
        print "Error: %s %s" % (sys.exc_info()[0], e.args)
        return 1
    except:
        # error handling code here
        print "Error: %s" % sys.exc_info()[0]
        return 1  # exit on error
    else:
        return 0  # exit errorlessly

if __name__ == '__main__':
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>17409720</id><snippet>np.ascontiguousarray</snippet></ROW><ROW><id>17409720</id><snippet>&gt;&gt;&gt; f = np.array([[10,11,11,12,13],[20,21,21,22,23]]).T
&gt;&gt;&gt; f = np.ascontiguousarray(f)
&gt;&gt;&gt; f.view([('',f.dtype)]*f.shape[1])
array([[(10, 20)],
       [(11, 21)],
       [(11, 21)],
       [(12, 22)],
       [(13, 23)]], 
      dtype=[('f0', '&lt;i4'), ('f1', '&lt;i4')])
</snippet></ROW><ROW><id>17409723</id><snippet>dt.datetime.strptime('2000', '%Y').date() == myRecalledDbObj.dateFieldVal
</snippet></ROW><ROW><id>17409852</id><snippet>from google.appengine.api import runtime

runtime.memory_usage().current()
</snippet></ROW><ROW><id>17409935</id><snippet>print "Random numbers are: "
for _ in xrange(500):
    print rn(), rn(), rn(), rn(), rn(), rn()
</snippet></ROW><ROW><id>17409935</id><snippet>with open('Output.txt', 'w') as f:
    f.write("Random numbers are: \n")
    for _ in xrange(500):
        f.write("%s,%s,%s,%s,%s,%s\n" % (rn(), rn(), rn(), rn(), rn(), rn()))
</snippet></ROW><ROW><id>17409955</id><snippet>db.cursor.execute("insert into person (company_id, first, last, type) values (%d, '%s', '%s', %d);", (company_id, name[0], name[1], type))
</snippet></ROW><ROW><id>17409955</id><snippet>db.cursor.execute("insert into person (company_id, first, last, type) values (%s, %s, %s, %s);", (company_id, name[0], name[1], type))
</snippet></ROW><ROW><id>17410348</id><snippet>if/elif</snippet></ROW><ROW><id>17410348</id><snippet>if/if</snippet></ROW><ROW><id>17410348</id><snippet>if turns &lt; 5: print "..."
if turns &lt; 4: print "..."
if turns &lt; 3: print "..."
if turns &lt; 2: print "..."
if turns &lt; 1: print "..."
</snippet></ROW><ROW><id>17410348</id><snippet>turns=0</snippet></ROW><ROW><id>17410348</id><snippet>1</snippet></ROW><ROW><id>17410348</id><snippet>5</snippet></ROW><ROW><id>17410348</id><snippet>if</snippet></ROW><ROW><id>17410348</id><snippet>elif</snippet></ROW><ROW><id>17410348</id><snippet>==</snippet></ROW><ROW><id>17410348</id><snippet>&lt;</snippet></ROW><ROW><id>17410494</id><snippet>with open('abc') as f, open('out.txt','w') as f2:
    seen = False                         #initialize `seen` to False
    for line in f:        #iterate over each line in f
        spl = line.split()               #split the line at  whitespaces
        if seen:                         #if seen is True then :
            spl[1] = '10'                   #set spl[1] to '10'
            seen = False                    #set seen to False
            line = " ".join(spl) + '\n'     #join the list using `str.join`
        elif not seen and spl[1] == '2': #else if seen is False and spl[1] is '2', then
            seen = True                     #set seen to True
        f2.write(line)                   #write the line to file
</snippet></ROW><ROW><id>17410494</id><snippet>&gt;&gt;&gt; print open('out.txt').read()
1 2 3 4 5
2 10 6 7 8
3 2 6 3 8
4 10 4 5 6
5 3 5 7 8
6 8 7 5 4
7 2 6 8 4
8 10 6 9 7
</snippet></ROW><ROW><id>17410620</id><snippet>make_pw_h()</snippet></ROW><ROW><id>17410620</id><snippet>name</snippet></ROW><ROW><id>17410620</id><snippet>pw</snippet></ROW><ROW><id>17410620</id><snippet>salt</snippet></ROW><ROW><id>17410620</id><snippet>None</snippet></ROW><ROW><id>17410620</id><snippet>def make_pw_h(name, pw, salt = None):
    if salt:
        salt = make_salt()
    return "%s,%s" % (salt, hashlib.sha256(name + pw + salt).hexdigest())
</snippet></ROW><ROW><id>17410620</id><snippet>if salt:</snippet></ROW><ROW><id>17410620</id><snippet>False</snippet></ROW><ROW><id>17410620</id><snippet>None</snippet></ROW><ROW><id>17410620</id><snippet>hashlib.sha256</snippet></ROW><ROW><id>17410620</id><snippet>salt</snippet></ROW><ROW><id>17410620</id><snippet>def make_pw_h(name, pw, salt=None):
    if salt is None:
        salt = make_salt()
    return "%s,%s" % (salt, hashlib.sha256(name + pw + salt).hexdigest())
</snippet></ROW><ROW><id>17410883</id><snippet>rcParams['figure.figsize'] = 16, 12
</snippet></ROW><ROW><id>17410883</id><snippet>df_analyze.hist()</snippet></ROW><ROW><id>17410883</id><snippet>rcParams['figure.figsize'] = 16, 12
df_analyze.hist()
plt.savefig('hist.png')
</snippet></ROW><ROW><id>17410974</id><snippet>python</snippet></ROW><ROW><id>17410974</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; spl = "TO"
&gt;&gt;&gt; strs = "TO YOUDate : 06/12/2013 09:52:55 AMHi can u pls pick up some bread from the store. TO :   Contact NameDate : 06/12/2013 10:00:10 AMI can in about 15 minutes. I'm still in a meeting."
&gt;&gt;&gt; lis = re.split(r'\bTO\b',strs)[1:]
for x in lis:
    print "{}{}".format(spl,x)
...     
TO YOUDate : 06/12/2013 09:52:55 AMHi can u pls pick up some bread from the store. 
TO :   Contact NameDate : 06/12/2013 10:00:10 AMI can in about 15 minutes. I'm still in a meeting.
</snippet></ROW><ROW><id>17410979</id><snippet>&gt;&gt;&gt; s = scatter(X,Y, s=75, c=T, alpha=.5)
&gt;&gt;&gt; colorbar(s)
&gt;&gt;&gt; show()
</snippet></ROW><ROW><id>17411042</id><snippet>import os

fd = os.open('filename', os.O_CREAT|os.O_EXCL)
with os.fdopen(fd, 'w') as f:
    ....
</snippet></ROW><ROW><id>17411042</id><snippet>with open('filename', 'x') as f:
    ....
</snippet></ROW><ROW><id>17411076</id><snippet>deck[1][0]</snippet></ROW><ROW><id>17411076</id><snippet>&gt;&gt;&gt; deck = [[6, "club"], [8, "diamond"], [3, "spade"]]
&gt;&gt;&gt; deck[1][0]
8
</snippet></ROW><ROW><id>17411158</id><snippet>from collections import Iterable
def flatten(collection):
  for element in collection:
    if isinstance(element, Iterable):
      for x in flatten(element):
        yield x
    else:
      yield element
</snippet></ROW><ROW><id>17411158</id><snippet>&gt;&gt;&gt; lis = [1, [1, [2, [3]]]]
&gt;&gt;&gt; sum(flatten(lis))
7
&gt;&gt;&gt; lis = [1, [1, 2, 3]]
&gt;&gt;&gt; sum(flatten(lis))
7
&gt;&gt;&gt; lis = [1, [1, [2, 3]]]
&gt;&gt;&gt; sum(flatten(lis))
7
</snippet></ROW><ROW><id>17411187</id><snippet># Create the desired destination directory for GMP, MPFR, and MPC.
$ mkdir /home/case/local
# Download and un-tar the GMP source code. Change to GMP source directory and compile GMP.
$ cd ~/src/gmp-5.1.0
$ ./configure --prefix=/home/case/local
$ make
$ make check
$ make install
# Download and un-tar the MPFR source code. Change to MPFR source directory and compile MPFR.
$ cd ~/src/mpfr-3.1.1
$ ./configure --prefix=/home/case/local --with-gmp=/home/case/local
$ make
$ make check
$ make install
# Download and un-tar the MPC source code. Change to MPC source directory and compile MPC.
$ cd ~/src/mpc-1.0.1
$ ./configure --prefix=/home/case/local --with-gmp=/home/case/local --with-mpfr=/home/case/local
$ make
$ make check
$ make install
</snippet></ROW><ROW><id>17411187</id><snippet>py27 setup.py build_ext -I/home/case/local/include -L/home/case/local/lib -R/home/case/local/lib install
</snippet></ROW><ROW><id>17411218</id><snippet>maxsplit</snippet></ROW><ROW><id>17411218</id><snippet>split()</snippet></ROW><ROW><id>17411218</id><snippet>var1, var2, var3, var4, var5, var6, var7 = stringone.split(',', 6)
</snippet></ROW><ROW><id>17411290</id><snippet>cur.execute("SELECT * FROM Posts ORDER BY date ASC")
</snippet></ROW><ROW><id>17411300</id><snippet>pidlist</snippet></ROW><ROW><id>17411300</id><snippet>for proc_id in pidlist:
   os.kill(int(proc_id), signal.SIGTERM)
</snippet></ROW><ROW><id>17411316</id><snippet>patterns</snippet></ROW><ROW><id>17411316</id><snippet>FORMS = {
    'foo': FooForm,
    'bar': BarForm,
}

validate_patterns = [url(r'^validate/%s' % label, 'validate', {'form_class': FORMS[label]}, name='validate-form-%s' % label) for label in FORMS.iterkeys()]

urlpatterns = patterns('ajax_validation.views', *validate_patterns)
</snippet></ROW><ROW><id>17411316</id><snippet>urlpatterns = patterns('myapp.views',
    url(r'^validate/(?P&lt;label&gt;[^/]+)$', 'validate_by_label', name='validate-form'),
)

views.py:
# appropriate imports for Http404, your forms, and the third party plugin validate view

FORMS = {
    'foo': FooForm,
    'bar': BarForm,
}

def validate_by_label(request, label):
    form_class = FORMS.get(label)
    if form_class is None:
        raise Http404
    else:
        return ajax_validation.views.validate(request, form_class=form_class)
</snippet></ROW><ROW><id>17411339</id><snippet>split</snippet></ROW><ROW><id>17411339</id><snippet>result = txt.split(";")
</snippet></ROW><ROW><id>17411339</id><snippet>result = re.findall('[^;]+', str)
</snippet></ROW><ROW><id>17411414</id><snippet>&gt;&gt;&gt; def getVolume(length, width, height):
...     return length*width*height;
... 
&gt;&gt;&gt; print(getVolume(height=3, width=3));
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: getVolume() missing 1 required positional argument: 'length'
</snippet></ROW><ROW><id>17412128</id><snippet>Request.from_response</snippet></ROW><ROW><id>17412128</id><snippet>delta.com</snippet></ROW><ROW><id>17412128</id><snippet>from scrapy.item import Item, Field
from scrapy.http import FormRequest
from scrapy.spider import BaseSpider


class DeltaItem(Item):
    title = Field()
    link = Field()
    desc = Field()


class DmozSpider(BaseSpider):
    name = "delta"
    allowed_domains = ["delta.com"]
    start_urls = ["http://www.delta.com"]

    def parse(self, response):
        yield FormRequest.from_response(response,
                                        formname='flightSearchForm',
                                        formdata={'departureCity[0]': 'JFK',
                                                  'destinationCity[0]': 'SFO',
                                                  'departureDate[0]': '07.20.2013',
                                                  'departureDate[1]': '07.28.2013'},
                                        callback=self.parse1)

    def parse1(self, response):
        print response.status
</snippet></ROW><ROW><id>17412128</id><snippet>allowed_domains</snippet></ROW><ROW><id>17412128</id><snippet>delta.com</snippet></ROW><ROW><id>17412128</id><snippet>response</snippet></ROW><ROW><id>17412128</id><snippet>parse1</snippet></ROW><ROW><id>17412128</id><snippet>AWAY WE GO. ARRIVING AT YOUR FLIGHTS SOON
</snippet></ROW><ROW><id>17412128</id><snippet>scrapy</snippet></ROW><ROW><id>17412183</id><snippet>tp_as_sequence.sq_contains</snippet></ROW><ROW><id>17412294</id><snippet>scatter</snippet></ROW><ROW><id>17412294</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>17412294</id><snippet>scatterpoints=1</snippet></ROW><ROW><id>17412294</id><snippet>numpoints=1</snippet></ROW><ROW><id>17412294</id><snippet>import matplotlib.pyplot as plt
from numpy.random import random

colors = ['b', 'c', 'y', 'm', 'r']

lo = plt.scatter(random(10), random(10), marker='x', color=colors[0])
ll = plt.scatter(random(10), random(10), marker='o', color=colors[0])
l  = plt.scatter(random(10), random(10), marker='o', color=colors[1])
a  = plt.scatter(random(10), random(10), marker='o', color=colors[2])
h  = plt.scatter(random(10), random(10), marker='o', color=colors[3])
hh = plt.scatter(random(10), random(10), marker='o', color=colors[4])
ho = plt.scatter(random(10), random(10), marker='x', color=colors[4])

plt.legend((lo, ll, l, a, h, hh, ho),
           ('Low Outlier', 'LoLo', 'Lo', 'Average', 'Hi', 'HiHi', 'High Outlier'),
           scatterpoints=1,
           loc='lower left',
           ncol=3,
           fontsize=8)

plt.show()
</snippet></ROW><ROW><id>17412294</id><snippet>plot</snippet></ROW><ROW><id>17412294</id><snippet>Patch3DCollection</snippet></ROW><ROW><id>17412294</id><snippet>scatter</snippet></ROW><ROW><id>17412294</id><snippet>Axes3D</snippet></ROW><ROW><id>17412294</id><snippet>linestyle</snippet></ROW><ROW><id>17412294</id><snippet>marker</snippet></ROW><ROW><id>17412294</id><snippet>import matplotlib.pyplot as plt
from numpy.random import random
from mpl_toolkits.mplot3d import Axes3D

colors=['b', 'c', 'y', 'm', 'r']

ax = plt.subplot(111, projection='3d')

ax.plot(random(10), random(10), random(10), 'x', color=colors[0], label='Low Outlier')
ax.plot(random(10), random(10), random(10), 'o', color=colors[0], label='LoLo')
ax.plot(random(10), random(10), random(10), 'o', color=colors[1], label='Lo')
ax.plot(random(10), random(10), random(10), 'o', color=colors[2], label='Average')
ax.plot(random(10), random(10), random(10), 'o', color=colors[3], label='Hi')
ax.plot(random(10), random(10), random(10), 'o', color=colors[4], label='HiHi')
ax.plot(random(10), random(10), random(10), 'x', color=colors[4], label='High Outlier')

plt.legend(loc='upper left', numpoints=1, ncol=3, fontsize=8, bbox_to_anchor=(0, 0))

plt.show()
</snippet></ROW><ROW><id>17412305</id><snippet>import sys

if sys.version_info[:2] == (2, 7):
    try:
        pass
    except:
        # Use 2.7 compatible exception
        pass
elif sys.version_info[:2] == (2, 5):
    try:
        pass
    except:
        # Use 2.5 compatible exception
        pass
</snippet></ROW><ROW><id>17412782</id><snippet>try:
    ins = MyClass()
except Exception as e: 
    print "Cant initiate MyClass"
else:
    with ins:
        pass
</snippet></ROW><ROW><id>17412782</id><snippet>with spawnResource() as res, MyClass(res) as y:
    print x,y
</snippet></ROW><ROW><id>17412950</id><snippet>elif</snippet></ROW><ROW><id>17412950</id><snippet>elif data[0]==data[-1]:
    is_palindrome(data[1:-1])
</snippet></ROW><ROW><id>17412950</id><snippet>elif data[0]==data[-1]:
    return is_palindrome(data[1:-1])
</snippet></ROW><ROW><id>17412950</id><snippet>is_palindrome</snippet></ROW><ROW><id>17412950</id><snippet>def is_palindrome(data): 
    return data == data[::-1]
</snippet></ROW><ROW><id>17412990</id><snippet>Applications/Postgres.app/Contents/MacOS/bin/</snippet></ROW><ROW><id>17412990</id><snippet>psql</snippet></ROW><ROW><id>17412990</id><snippet>alias psql="Applications/Postgres.app/Contents/MacOS/bin/psql"</snippet></ROW><ROW><id>17412990</id><snippet>brew doctor</snippet></ROW><ROW><id>17412990</id><snippet>"config" scripts exist outside your system or Homebrew directories.
`./configure` scripts often look for *-config scripts to determine if
software packages are installed, and what additional flags to use when
compiling and linking.

Having additional scripts in your path can confuse software installed via
Homebrew if the config script overrides a system or Homebrew provided
script of the same name. We found the following "config" scripts:
</snippet></ROW><ROW><id>17413045</id><snippet>subprocess</snippet></ROW><ROW><id>17413045</id><snippet>p = subprocess.Popen(some_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
# Grab stdout line by line as it becomes available.  This will loop until 
# p terminates.
while p.poll() is None:
    l = p.stdout.readline() # This blocks until it receives a newline.
    print l
# When the subprocess terminates there might be unconsumed output 
# that still needs to be processed.
(out, err) = p.communicate()
print out
</snippet></ROW><ROW><id>17413045</id><snippet>p = subprocess.Popen(some_cmd, stdout=subprocess.PIPE, 
                               stderr=subprocess.PIPE, 
                               stdin=subprocess.PIPE)
# Send input to p.
p.stdin.write("some input\n")
# Now start grabbing output.
while p.poll() is None:
    l = p.stdout.readline()
    print l
(out, err) = p.communicate()
print out
</snippet></ROW><ROW><id>17413111</id><snippet>items = [line.split('|')]
</snippet></ROW><ROW><id>17413111</id><snippet>items = line.split('|')
</snippet></ROW><ROW><id>17413111</id><snippet>teams[team].add(name)
</snippet></ROW><ROW><id>17413111</id><snippet>teams[team].add(name.strip())
</snippet></ROW><ROW><id>17413111</id><snippet>for line in file_in:
    items = line.split('|')
    team = items[0]
    name = items[1]
    teams[team].add(name.strip())
</snippet></ROW><ROW><id>17413111</id><snippet>&gt;&gt;&gt; for team, players in teams.iteritems():
...    print '{}|{}'.format(team, '|'.join(players))
... 
Yankees (1994)|Abbot, Jim
Yankees (1993)|Assenmacher, Paul|Abbot, Jim
Yankees (2000)|Canseco, Jose|Buddies, Mike
</snippet></ROW><ROW><id>17413153</id><snippet>platform.architecture()</snippet></ROW><ROW><id>17413153</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('64bit', '')
</snippet></ROW><ROW><id>17413153</id><snippet>Note</snippet></ROW><ROW><id>17413153</id><snippet>sys.maxsize</snippet></ROW><ROW><id>17413153</id><snippet>&gt;&gt;&gt; sys.maxsize &gt; 2**32
True
</snippet></ROW><ROW><id>17413153</id><snippet>False</snippet></ROW><ROW><id>17413212</id><snippet>#!/usr/bin/python3</snippet></ROW><ROW><id>17413212</id><snippet>python myscript.py</snippet></ROW><ROW><id>17413212</id><snippet>python3 myscripy.py</snippet></ROW><ROW><id>17413266</id><snippet>re.sub('(?&lt;![0-9])\.(?![0-9])', '. ', some_string)
</snippet></ROW><ROW><id>17413266</id><snippet>.</snippet></ROW><ROW><id>17413266</id><snippet>.</snippet></ROW><ROW><id>17413266</id><snippet>+</snippet></ROW><ROW><id>17413329</id><snippet>flush</snippet></ROW><ROW><id>17413329</id><snippet>close</snippet></ROW><ROW><id>17413329</id><snippet>with</snippet></ROW><ROW><id>17413329</id><snippet>with open("test.txt","wb") as fo:
   fo.write("This is Test Data")
</snippet></ROW><ROW><id>17413333</id><snippet>fieldnames</snippet></ROW><ROW><id>17413333</id><snippet>my_reader = csv.DictReader(src)
print(my_reader.fieldnames)
</snippet></ROW><ROW><id>17413333</id><snippet>keys</snippet></ROW><ROW><id>17413333</id><snippet>my_reader</snippet></ROW><ROW><id>17413333</id><snippet>for row in my_reader:
    print(row.keys())
</snippet></ROW><ROW><id>17413351</id><snippet>import random

with open("datafile.txt", "rb") as f:
    data = f.read().split('\n')

random.shuffle(data)

train_data = data[:50]
test_data = data[50:]
</snippet></ROW><ROW><id>17413414</id><snippet>named groups</snippet></ROW><ROW><id>17413414</id><snippet>urls.py</snippet></ROW><ROW><id>17413414</id><snippet>(r'^links/(?P&lt;value&gt;\w+)/$', display)
</snippet></ROW><ROW><id>17413414</id><snippet>def display(request, value=None):
    print value
</snippet></ROW><ROW><id>17413414</id><snippet>&lt;td&gt;&lt;a href="links/{{ status.rootgroup }}/"&gt; {{ status.rootgroup }} &lt;/a&gt;&lt;/td&gt;
</snippet></ROW><ROW><id>17413471</id><snippet>&gt;&gt;&gt; len(range(2,2001))
1999
</snippet></ROW><ROW><id>17413471</id><snippet>range()</snippet></ROW><ROW><id>17413471</id><snippet>for x in range (p*p, len(primes), p):
</snippet></ROW><ROW><id>17413471</id><snippet>x</snippet></ROW><ROW><id>17413471</id><snippet>len(primes)</snippet></ROW><ROW><id>17413471</id><snippet>limit = 2001
primes=list(range(limit))

# ...

for x in range (p*p, limit, p):
</snippet></ROW><ROW><id>17413471</id><snippet>while p&lt;len(primes):</snippet></ROW><ROW><id>17413471</id><snippet>primes</snippet></ROW><ROW><id>17413471</id><snippet>try:
    primes.remove(x)
except ValueError:
    # already removed
    pass
</snippet></ROW><ROW><id>17413471</id><snippet>while</snippet></ROW><ROW><id>17413510</id><snippet>class Wrapper(object):
    def __init__(self, *funcs):
        self.funcs = funcs
    def call_funcs(self, *args):
        for func, args in zip(self.funcs, args):
            func(*args[0], **args[1])

def foo(*args, **kwargs):
    print 'foo(args={}, kwargs={})'.format(args, kwargs)

def bar(*args, **kwargs):
    print 'bar(args={}, kwargs={})'.format(args, kwargs)

def baz(*args, **kwargs):
    print 'baz(args={}, kwargs={})'.format(args, kwargs)

def bork(*args, **kwargs):
    print 'bork(args={}, kwargs={})'.format(args, kwargs)

wrapper = Wrapper(foo, bar, baz, bork)
wrapper.call_funcs(((), {}), ((1,), {}), ((), {'spam':3}), ((42,), {'dent':17}))
print

# to make using it easier and nicer looking, optionally include this:
params = lambda *args, **kwargs: (args, kwargs)

# then the same thing can be written:
wrapper.call_funcs(params(), params(1), params(spam=3), params(42, dent=17))
</snippet></ROW><ROW><id>17413510</id><snippet>foo(args=(), kwargs={})
bar(args=(1,), kwargs={})
baz(args=(), kwargs={'spam': 3})
bork(args=(42,), kwargs={'dent': 17})

foo(args=(), kwargs={})
bar(args=(1,), kwargs={})
baz(args=(), kwargs={'spam': 3})
bork(args=(42,), kwargs={'dent': 17})
</snippet></ROW><ROW><id>17413520</id><snippet>raw_input</snippet></ROW><ROW><id>17413520</id><snippet>input</snippet></ROW><ROW><id>17413520</id><snippet>eval(raw_input)</snippet></ROW><ROW><id>17413520</id><snippet>&gt;&gt;&gt; type(raw_input())
23
&lt;type 'str'&gt;
&gt;&gt;&gt; type(input())
12
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>17413520</id><snippet>n</snippet></ROW><ROW><id>17413520</id><snippet>input</snippet></ROW><ROW><id>17413520</id><snippet>n</snippet></ROW><ROW><id>17413520</id><snippet>&gt;&gt;&gt; input()
n
Traceback (most recent call last):
  File "&lt;ipython-input-30-5c7a218085ef&gt;", line 1, in &lt;module&gt;
    type(input())
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'n' is not defined
</snippet></ROW><ROW><id>17413520</id><snippet>raw_input</snippet></ROW><ROW><id>17413520</id><snippet>&gt;&gt;&gt; raw_input()
n
'n'
</snippet></ROW><ROW><id>17413520</id><snippet>raw_input</snippet></ROW><ROW><id>17413520</id><snippet>&gt;&gt;&gt; print raw_input.__doc__
raw_input([prompt]) -&gt; string

Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.
</snippet></ROW><ROW><id>17413520</id><snippet>input</snippet></ROW><ROW><id>17413520</id><snippet>&gt;&gt;&gt; print input.__doc__
input([prompt]) -&gt; value

Equivalent to eval(raw_input(prompt)).
</snippet></ROW><ROW><id>17413681</id><snippet>processFunc</snippet></ROW><ROW><id>17413681</id><snippet>collapse</snippet></ROW><ROW><id>17413681</id><snippet>collapse = False</snippet></ROW><ROW><id>17413681</id><snippet>processFunc</snippet></ROW><ROW><id>17413681</id><snippet>processFunc =</snippet></ROW><ROW><id>17413681</id><snippet>&gt;&gt;&gt; collapse = True
&gt;&gt;&gt; processFunc = collapse and (lambda s: " ".join(s.split())) or (lambda s: s)
&gt;&gt;&gt; processFunc("this   is\na\ttest")
'this is a test'
&gt;&gt;&gt; collapse = False
&gt;&gt;&gt; processFunc = collapse and (lambda s: " ".join(s.split())) or (lambda s: s)
&gt;&gt;&gt; processFunc("this   is\na\ttest")
'this   is\na\ttest'
</snippet></ROW><ROW><id>17413681</id><snippet>processFunc</snippet></ROW><ROW><id>17413681</id><snippet>&gt;&gt;&gt; collapse = True
&gt;&gt;&gt; processFunc = lambda: collapse and (lambda s: " ".join(s.split())) or (lambda s: s)
&gt;&gt;&gt; processFunc()("this is\na\ttest")
'this is a test'
&gt;&gt;&gt; collapse = False
&gt;&gt;&gt; processFunc()("this is\na\ttest")
'this is\na\ttest'
</snippet></ROW><ROW><id>17413681</id><snippet>processFunc()</snippet></ROW><ROW><id>17413681</id><snippet>processFunc</snippet></ROW><ROW><id>17413681</id><snippet>collapse</snippet></ROW><ROW><id>17413896</id><snippet>&gt;&gt;&gt; np.digitize(avgs,bins) #Returns which bin an average belongs
array([1, 6, 2, 3, 5, 4, 1, 4, 6, 6, 2, 3, 5, 6, 3, 1, 2, 3, 5, 7, 5, 3, 4])

&gt;&gt;&gt; np.where(binplace==1)
(array([ 0,  6, 15]),)
&gt;&gt;&gt; np.where(binplace==2)
(array([ 2, 10, 16]),)

&gt;&gt;&gt; avgs[np.where(binplace==1)]
array([ 11.02,  11.3 ,  11.01])
</snippet></ROW><ROW><id>17413910</id><snippet>for i in (2, 3, 4, 5, 6, 7, 8, 9, 0, 1):
</snippet></ROW><ROW><id>17413910</id><snippet>for i in range(2, 10) + range(2):
</snippet></ROW><ROW><id>17413910</id><snippet>for i in itertools.chain(xrange(2, 10), xrange(2)):
</snippet></ROW><ROW><id>17413910</id><snippet>for i in (x % 10 for x in xrange(2, 12)):
</snippet></ROW><ROW><id>17413978</id><snippet>import filesystem.directory

class File(object):

   def __init__(self):
       self._Directory = filesystem.directory.Directory

   def foo(self):
       some_dir = self._Directory(...)
</snippet></ROW><ROW><id>17414066</id><snippet>"city"</snippet></ROW><ROW><id>17414066</id><snippet>location_info</snippet></ROW><ROW><id>17414066</id><snippet>location_info</snippet></ROW><ROW><id>17414066</id><snippet>city</snippet></ROW><ROW><id>17414066</id><snippet>location_info</snippet></ROW><ROW><id>17414066</id><snippet>location_info = {}
</snippet></ROW><ROW><id>17414066</id><snippet>if row.city in location_info:
</snippet></ROW><ROW><id>17414066</id><snippet>location_info</snippet></ROW><ROW><id>17414066</id><snippet>location_info[row.city] = d
</snippet></ROW><ROW><id>17414129</id><snippet>url = "https://coinbase.com/api/v1/transactions/send_money?access_token=XXX"
headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
params = {
             "transaction": { 
                 "to": "1G8f9pRvgprVMUymuQugZrhYSqBNXuwzNt", 
                 "amount": "0.011", 
                 "notes": "Testing transaction" 
             }
         }

r = requests.post(url, data=json.dumps(postData), headers=headers)
</snippet></ROW><ROW><id>17414286</id><snippet>(df['Date2']-df['Date1']).apply(lambda x: x/np.timedelta64(1,'M'))
</snippet></ROW><ROW><id>17414286</id><snippet>np.timedelta64(1,'D')</snippet></ROW><ROW><id>17414303</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)

t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = ax.plot(t, s, lw=2)

coords_to_annote = [(2,1),(3,1),(4,1)]

for coords in coords_to_annote:
    ax.annotate('local max', xy=coords, xytext=(3, 1.5),
                arrowprops=dict(facecolor='black', shrink=0.05),
                )


ax.set_ylim(-2,2)
plt.show()
</snippet></ROW><ROW><id>17414386</id><snippet>matplotlib</snippet></ROW><ROW><id>17414386</id><snippet>zip</snippet></ROW><ROW><id>17414386</id><snippet>pos1 = np.array([[0,0,0],[2,2,2]])
pos2 = np.array([[1,1,1],[3,3,3]])

for point_pairs in zip(pos1, pos2):
    xs, ys, zs = zip(*point_pairs)
    ax.plot(xs, ys, zs)
</snippet></ROW><ROW><id>17414418</id><snippet>Map</snippet></ROW><ROW><id>17414418</id><snippet>scenes = {
    'central_corridor': CentralCorridor(),
    'laser_weapon_armory': LaserWeaponArmory(),
    'the_bridge': TheBridge(),
    'escape_pod': EscapePod(),
    'death': Death()
}
</snippet></ROW><ROW><id>17414418</id><snippet>def __init__(self, start_scene):
    self.start_scene = start_scene
</snippet></ROW><ROW><id>17414418</id><snippet>Map</snippet></ROW><ROW><id>17414418</id><snippet>start_scene</snippet></ROW><ROW><id>17414418</id><snippet>Map</snippet></ROW><ROW><id>17414418</id><snippet># This one returns a scene based on its name or key in the scenes array
def next_scene(self, scene_name):
    return Map.scenes.get(scene_name)


# And this one  returns the opening scene which is set when you create the map.
def opening_scene(self):
    return self.next_scene(self.start_scene)
</snippet></ROW><ROW><id>17414418</id><snippet>Engine</snippet></ROW><ROW><id>17414418</id><snippet># When creating an Engine object you give the map containing scenes to its constructor
def __init__(self, scene_map):
        self.scene_map = scene_map

# The method which starts playing the scenes
def play(self):

    # the opening scene from the map is selected as the current scene
    current_scene = self.scene_map.opening_scene()

     # You loop all the scenes probably, conditions of this loop are unknown because you haven't posted it entirely.
     while True:
         print "\n--------"
         # It seems the next scene name is known in the current scene
         next_scene_name = current_scene.enter()

         # It replaces current scene with the next scene from the map
         current_scene = self.scene_map.next_scene(next_scene_name)
</snippet></ROW><ROW><id>17414596</id><snippet>function_table = {}

def add_to_table(name):
    def dec(func):
        def inner_func(*args, **kwargs):
            return func(*args, **kwargs)
        function_table[name] = inner_func
        return inner_func
    return dec

@add_to_table("my_addition_function")
def myfunction(a, b):
    return a + b

@add_to_table("my_subtraction_function")
def myfunction2(a, b):
    return a - b

print myfunction(1, 3)
# 4
print function_table["my_addition_function"](1, 4)
# 5
print function_table["my_subtraction_function"](1, 4)
# -3
</snippet></ROW><ROW><id>17414876</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>17414927</id><snippet>if scalar then</snippet></ROW><ROW><id>17414927</id><snippet>def step_mask2(x,limit=+1):
    b = np.broadcast(x, limit)
    out=np.zeros(b.shape)

    out[np.where(x&gt;0)]=1

    zeroindices=np.where(x==0)
    check=out[zeroindices]

    check=np.where(limit&gt;0,1,check)
    check=np.where(limit==0,.5,check)
    check=np.where(limit&lt;0,0,check)
    out[zeroindices]=check

    return out
</snippet></ROW><ROW><id>17414927</id><snippet>Yours took 0.0330839157104 seconds.
Mine took 0.0210998058319 seconds.
</snippet></ROW><ROW><id>17414927</id><snippet>def step_mask_improved(x, limit=+1):
    b = np.broadcast(x, limit)
    out=np.atleast_1d(np.zeros(b.shape))
    out[np.where(x&gt;0)]=1

    zeroindices=np.where(x==0)
    check=out[zeroindices]

    check=np.where(limit&gt;0,1,check)
    check=np.where(limit==0,.5,check)
    check=np.where(limit&lt;0,0,check)
    out[zeroindices]=check

    return out
</snippet></ROW><ROW><id>17414927</id><snippet>    return np.atleast_1d(out.reshape(b.shape))
</snippet></ROW><ROW><id>17414956</id><snippet>def leaf_dirs(dirlist):
    """Given a list of directories, find leaf directories"""
    parents = {}
    for path in dirlist:
        parts = path.split('/')
        if parts[0] == '':
            raise ValueError("can't handle rooted directory %s" % path)
        parent = '/'.join(parts[:-1])
        parents[parent] = True
    return [path for path in dirlist if path not in parents]
</snippet></ROW><ROW><id>17414956</id><snippet>parts[:-1]</snippet></ROW><ROW><id>17414956</id><snippet>        while parts:
            parts.pop() # strip last path component
            parent = '/'.join(parts)
            parents[parent] = True
</snippet></ROW><ROW><id>17415085</id><snippet>is_text_present</snippet></ROW><ROW><id>17415085</id><snippet>def is_text_present(self, text):
    try:
        body = self.driver.find_element_by_tag_name("body") # find body tag element
    except NoSuchElementException, e:
        return False
    return text in body.text # check if the text is in body's text
</snippet></ROW><ROW><id>17415085</id><snippet>is_element_present</snippet></ROW><ROW><id>17415085</id><snippet>By.ID</snippet></ROW><ROW><id>17415085</id><snippet>self.assertTrue(self.is_element_present(By.ID, "the id of your image"))
# alternatively, there are others like CSS_SELECTOR, XPATH, etc.
# self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "the css selector of your image"))
</snippet></ROW><ROW><id>17415138</id><snippet>38 - 0 = 38
98 - 1 = 97
110 - 2 = 108
111 - 3 = 108
112 - 4 = 108
120 - 5 = 115
121 - 6 = 115
898 - 7 = 891
</snippet></ROW><ROW><id>17415138</id><snippet>&gt;&gt;&gt; from itertools import groupby, count
&gt;&gt;&gt; L = [38, 98, 110, 111, 112, 120, 121, 898]
&gt;&gt;&gt; groups = groupby(L, key=lambda item, c=count():item-next(c))
&gt;&gt;&gt; tmp = [list(g) for k, g in groups]
</snippet></ROW><ROW><id>17415138</id><snippet>&gt;&gt;&gt; tmp
[[38], [98], [110, 111, 112], [120, 121], [898]]
</snippet></ROW><ROW><id>17415138</id><snippet>&gt;&gt;&gt; [str(x[0]) if len(x) == 1 else "{},{}".format(x[0],x[-1]) for x in tmp]
['38', '98', '110,112', '120,121', '898']
</snippet></ROW><ROW><id>17415221</id><snippet>for</snippet></ROW><ROW><id>17415221</id><snippet>for i in xrange(3, int(math.sqrt(n)), 2):  # use 'range' in Python 3
    if n % i == 0:
        return False
</snippet></ROW><ROW><id>17415221</id><snippet>all(n % i for i in xrange(3, int(math.sqrt(n)), 2))
</snippet></ROW><ROW><id>17415221</id><snippet>return true</snippet></ROW><ROW><id>17415221</id><snippet>for</snippet></ROW><ROW><id>17415221</id><snippet>xrange</snippet></ROW><ROW><id>17415221</id><snippet>all</snippet></ROW><ROW><id>17415283</id><snippet>csv</snippet></ROW><ROW><id>17415283</id><snippet>csv</snippet></ROW><ROW><id>17415283</id><snippet>with open('testdata.txt', newline='') as csvinput:
    with open('testdata2.txt', 'w', newline='') as csvoutput:
</snippet></ROW><ROW><id>17415298</id><snippet>if (K==0)
</snippet></ROW><ROW><id>17415298</id><snippet>if (k==0)
</snippet></ROW><ROW><id>17415298</id><snippet>if</snippet></ROW><ROW><id>17415389</id><snippet>plt.show()</snippet></ROW><ROW><id>17415389</id><snippet>plt.show()</snippet></ROW><ROW><id>17415389</id><snippet>show(block=False)</snippet></ROW><ROW><id>17415511</id><snippet>xrange (3, int(math.sqrt(x)) + 1, 2)</snippet></ROW><ROW><id>17415511</id><snippet>xrange</snippet></ROW><ROW><id>17415511</id><snippet>x</snippet></ROW><ROW><id>17415511</id><snippet>xrange (3, 3, 2)</snippet></ROW><ROW><id>17415634</id><snippet>/bin/sh</snippet></ROW><ROW><id>17415634</id><snippet>usePTY</snippet></ROW><ROW><id>17415634</id><snippet>PTY</snippet></ROW><ROW><id>17415723</id><snippet>&gt;&gt;&gt; L = [1, 1, 2, 2, 3, 3]
&gt;&gt;&gt; for x in L:
...     print x
...     if x == 2:
...         L.remove(2)
... 
1
1
2
3
3
</snippet></ROW><ROW><id>17415723</id><snippet>.remove</snippet></ROW><ROW><id>17415723</id><snippet>list1</snippet></ROW><ROW><id>17415723</id><snippet>import os
list1 = ['myfile.v', 'myfile2.sv', 'myfile3.vhd', 'etcfile.v', 'randfile.sv']
list2 = ['myfile', 'myfile2', 'myfile3']
set2 = set(list2)  # Use a set for O(1) lookups
list1 = [x for x in list1 if os.path.splitext(x)[0] not in set2]
</snippet></ROW><ROW><id>17415723</id><snippet>list1[:] = [x for x in list1 if os.path.splitext(x)[0] not in set2]
</snippet></ROW><ROW><id>17415723</id><snippet>&gt;&gt;&gt; list1 = ['myfile.v', 'myfile2.sv', 'myfile3.vhd', 'etcfile.v', 'randfile.sv']
&gt;&gt;&gt; p = 0
&gt;&gt;&gt; for x in list1:
...     if os.path.splitext(x)[0] not in set2:
...         list1[p] = x
...         p += 1
... 
&gt;&gt;&gt; del(list1[p:])
&gt;&gt;&gt; list1
['etcfile.v', 'randfile.sv']
</snippet></ROW><ROW><id>17415761</id><snippet>1</snippet></ROW><ROW><id>17415761</id><snippet>1</snippet></ROW><ROW><id>17415761</id><snippet>0</snippet></ROW><ROW><id>17415761</id><snippet>0</snippet></ROW><ROW><id>17415761</id><snippet>|</snippet></ROW><ROW><id>17415761</id><snippet>set</snippet></ROW><ROW><id>17415826</id><snippet>@pin = "FB"</snippet></ROW><ROW><id>17415826</id><snippet>@pin="FB"</snippet></ROW><ROW><id>17415826</id><snippet>xml.etree.parse</snippet></ROW><ROW><id>17415826</id><snippet>xml.etree.ElementTree.parse</snippet></ROW><ROW><id>17415826</id><snippet>IndentationError</snippet></ROW><ROW><id>17415826</id><snippet>__location__</snippet></ROW><ROW><id>17415826</id><snippet>**</snippet></ROW><ROW><id>17415826</id><snippet>SyntaxError</snippet></ROW><ROW><id>17415826</id><snippet>device</snippet></ROW><ROW><id>17415826</id><snippet>deviceset</snippet></ROW><ROW><id>17415826</id><snippet>root.find('deviceset')</snippet></ROW><ROW><id>17415826</id><snippet>None</snippet></ROW><ROW><id>17415826</id><snippet>&lt;deviceset&gt;
&lt;devices&gt;
&lt;device name=""&gt;
&lt;connects&gt;
&lt;connect gate="G$1" pin="+15V_DC" pad="7"/&gt;
&lt;connect gate="G$1" pin="FB" pad="3"/&gt;
&lt;connect gate="G$1" pin="ICOM" pad="4"/&gt;
&lt;connect gate="G$1" pin="IN+" pad="5"/&gt;
&lt;connect gate="G$1" pin="IN-" pad="6"/&gt;
&lt;connect gate="G$1" pin="OUT_HI" pad="1"/&gt;
&lt;connect gate="G$1" pin="OUT_LO" pad="9"/&gt;
&lt;connect gate="G$1" pin="PWRCOM" pad="2"/&gt;
&lt;/connects&gt;&lt;/device&gt;
&lt;/devices&gt;
&lt;/deviceset&gt;'''
</snippet></ROW><ROW><id>17415826</id><snippet>import os.path
from xml.etree import ElementTree as ET

file = open('foo.xml')
tree = ET.parse(file)
root = tree.getroot()
deviceset = root
connects = deviceset.find('devices').find('device').find('connects')
# Here we could print out stuff about connects to find out what's wrong.
nodes = connects.findall("./connect[@pin='FB']")
print(nodes[0].get('gate'))
</snippet></ROW><ROW><id>17415826</id><snippet>G$1
</snippet></ROW><ROW><id>17415848</id><snippet>str.splitlines()</snippet></ROW><ROW><id>17415848</id><snippet>readlines()</snippet></ROW><ROW><id>17415848</id><snippet>numberInput = []
with open('input.txt') as file:
     numberInput = file.read().splitlines()
print numberInput
</snippet></ROW><ROW><id>17415848</id><snippet>\r\n</snippet></ROW><ROW><id>17415999</id><snippet>f</snippet></ROW><ROW><id>17415999</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; plc_real = "1234"
&gt;&gt;&gt; struct.unpack("f", plc_real)[0]
1.6688933612840628e-07
</snippet></ROW><ROW><id>17415999</id><snippet>&lt;</snippet></ROW><ROW><id>17415999</id><snippet>&gt;</snippet></ROW><ROW><id>17416070</id><snippet>utf-8</snippet></ROW><ROW><id>17416070</id><snippet>self.content = self.content.encode("iso-8859-1")
</snippet></ROW><ROW><id>17416230</id><snippet>Popen</snippet></ROW><ROW><id>17416230</id><snippet>mpg123</snippet></ROW><ROW><id>17416230</id><snippet>Terminal control enabled, press 'h' for listing of keys and functions.
</snippet></ROW><ROW><id>17416230</id><snippet>Popen</snippet></ROW><ROW><id>17416230</id><snippet>subprocess</snippet></ROW><ROW><id>17416230</id><snippet>pty</snippet></ROW><ROW><id>17416230</id><snippet>os.forkpty</snippet></ROW><ROW><id>17416230</id><snippet>import os
import pty
import sys
import time

pid, fd = os.forkpty()
if pid:
    time.sleep(5)
    os.write(fd, 'q')
else:
    os.spawnl(os.P_WAIT, # mode
              '/usr/local/bin/mpg123', # path
              '/usr/local/bin/mpg123', '-C', sys.argv[1]) # args
</snippet></ROW><ROW><id>17416230</id><snippet>os.spawnl</snippet></ROW><ROW><id>17416230</id><snippet>PATH</snippet></ROW><ROW><id>17416230</id><snippet>spawnlp</snippet></ROW><ROW><id>17416230</id><snippet>spawnl</snippet></ROW><ROW><id>17416230</id><snippet>spawn</snippet></ROW><ROW><id>17416230</id><snippet>spawn</snippet></ROW><ROW><id>17416230</id><snippet>exec</snippet></ROW><ROW><id>17416230</id><snippet>execl</snippet></ROW><ROW><id>17416230</id><snippet>execlp</snippet></ROW><ROW><id>17416230</id><snippet>spawnl</snippet></ROW><ROW><id>17416230</id><snippet>subprocess</snippet></ROW><ROW><id>17416230</id><snippet>fork</snippet></ROW><ROW><id>17416230</id><snippet>mpg123</snippet></ROW><ROW><id>17416230</id><snippet>argv[0]</snippet></ROW><ROW><id>17416230</id><snippet>mpg123</snippet></ROW><ROW><id>17416230</id><snippet>ps</snippet></ROW><ROW><id>17416230</id><snippet>argv[0]</snippet></ROW><ROW><id>17416230</id><snippet>-C</snippet></ROW><ROW><id>17416230</id><snippet>argv[0]</snippet></ROW><ROW><id>17416230</id><snippet>-C</snippet></ROW><ROW><id>17416230</id><snippet>-C</snippet></ROW><ROW><id>17416230</id><snippet>pty</snippet></ROW><ROW><id>17416287</id><snippet>n, o</snippet></ROW><ROW><id>17416287</id><snippet>iteritems()</snippet></ROW><ROW><id>17416287</id><snippet>class SomeClass:
    class_dict = {0:0,1:1,2:2,3:3}

newClass = SomeClass()

for n, o in newClass.class_dict.iteritems():
    print(o)
</snippet></ROW><ROW><id>17416300</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "(5, 42) (20, -32)"
&gt;&gt;&gt; x1, y1, x2, y2 = map(int, re.match(r"\((.*), (.*)\) \((.*), (.*)\)", s).groups())
&gt;&gt;&gt; x1, y1
(5, 42)
&gt;&gt;&gt; x2, y2
(20, -32)
</snippet></ROW><ROW><id>17416300</id><snippet>&gt;&gt;&gt; x1, y1, x2, y2 = (int(x.strip("(),")) for x in s.split())
</snippet></ROW><ROW><id>17416364</id><snippet>key = next(lst for lst in d.values() if 'b' in lst)
</snippet></ROW><ROW><id>17416364</id><snippet>for lst in d.values():
    if 'b' in lst:
        key = let
        break
</snippet></ROW><ROW><id>17416364</id><snippet>valmap = {val:lst for lst in d.values() for val in lst}
</snippet></ROW><ROW><id>17416364</id><snippet>'b'</snippet></ROW><ROW><id>17416364</id><snippet>valmap['b']
</snippet></ROW><ROW><id>17416364</id><snippet>map</snippet></ROW><ROW><id>17416364</id><snippet>map</snippet></ROW><ROW><id>17416364</id><snippet>for</snippet></ROW><ROW><id>17416364</id><snippet>map</snippet></ROW><ROW><id>17416364</id><snippet>'b'</snippet></ROW><ROW><id>17416364</id><snippet>False</snippet></ROW><ROW><id>17416364</id><snippet>True</snippet></ROW><ROW><id>17416364</id><snippet>filter</snippet></ROW><ROW><id>17416364</id><snippet>key = next(filter(lambda lst: 'b' in lst, d.values()))
</snippet></ROW><ROW><id>17416449</id><snippet>ioctl()</snippet></ROW><ROW><id>17416449</id><snippet>TIOCMIWAIT</snippet></ROW><ROW><id>17416449</id><snippet>TIOCMIWAIT</snippet></ROW><ROW><id>17416449</id><snippet>TIOCMIWAIT</snippet></ROW><ROW><id>17416449</id><snippet>TIOCMIWAIT</snippet></ROW><ROW><id>17416449</id><snippet>TIOCMIWAIT</snippet></ROW><ROW><id>17416449</id><snippet>int serial_fd = open(cmdline.device_name, O_RDWR | O_NONBLOCK | O_NOCTTY);
static const unsigned int ri_flag = TIOCM_RNG;

/* Set up serial port here using tcsetattr.  Set CRTSCTS | CLOCAL to ensure status interrupts
 * are generated.
 */

while (1) {
        /* Wait for positive RI transition.  TIOCMIWAIT takes a mask
         * as argument, only returning when the appropriate signal has changed.
         */
        if (ioctl(serial_fd, TIOCMIWAIT, ri_flag)) {
            fprintf(stderr, "ioctl() failed waiting for RI edge [%s]\n", strerror(errno));
            break;
        }

        /* Do sensor sampling here.  You could use TIOCMGET to first verify that
         * the clock line is in the expected state, eg high, before continuing.
         */
}
</snippet></ROW><ROW><id>17416489</id><snippet>path_map={'foo':'a','bar':'b','baz':'c'}

@app.route('/&lt;path&gt;')
def switch(path)
    return path_map[path]
</snippet></ROW><ROW><id>17416531</id><snippet>123</snippet></ROW><ROW><id>17416531</id><snippet>23X</snippet></ROW><ROW><id>17416531</id><snippet>(i,j)</snippet></ROW><ROW><id>17416531</id><snippet>(m,n)</snippet></ROW><ROW><id>17416684</id><snippet>SELECT w0.urlid, w0.location, w1.location
FROM wordlocation w0
JOIN wordlocation w1 ON w0.urlid = w1.urlid
WHERE w0.wordid = 10
AND w1.wordid = 17
</snippet></ROW><ROW><id>17416684</id><snippet>SELECT w0.urlid, w0.location, w1.location, w2.location, w3.location, w4.location
FROM wordlocation w0
JOIN wordlocation w1 ON w0.urlid = w1.urlid
JOIN wordlocation w2 ON w0.urlid = w2.urlid
JOIN wordlocation w3 ON w0.urlid = w3.urlid
JOIN wordlocation w4 ON w0.urlid = w4.urlid
WHERE w0.wordid = 10
AND w1.wordid = 17
AND w2.wordid = 101
AND w3.wordid = 25
AND w4.wordid = 4
</snippet></ROW><ROW><id>17416698</id><snippet>QtGui.QMainWindow</snippet></ROW><ROW><id>17416698</id><snippet>from PyQt4 import QtGui, QtCore
import sys
from twisted.internet.protocol import Factory, Protocol
_fromUtf8 = QtCore.QString.fromUtf8

class Ui_MainWindow(QtGui.QMainWindow):

    def __init__(self,reactor, parent=None):
        super(Ui_MainWindow,self).__init__(parent)
        self.reactor=reactor
        self.pf = Factory()
        self.pf.protocol = Protocol
        self.reactor.listenTCP(3609, self.pf) # listen on port 1234

    def setupUi(self,MainWindow):
        #MainWindow=QtGui.QMainWindow() # &lt;-- Just use passed MainWindow.
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(903, 677)
        self.centralwidget = QtGui.QWidget(MainWindow)
        #then rest of the ui components.

if  __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)

    try:
        import qt4reactor
    except ImportError:
        from twisted.internet import qt4reactor
    qt4reactor.install()

    from twisted.internet import reactor
    MainWindow = QtGui.QMainWindow() # &lt;-- Instantiate QMainWindow object.
    ui = Ui_MainWindow(reactor)
    ui.setupUi(MainWindow)
    MainWindow.show()

    reactor.run()
</snippet></ROW><ROW><id>17416712</id><snippet>def safe_multiply(x, y):
    try:
        return x * y
    except TypeError:
        return x

[safe_multiply(x, 20) for x in ll]
</snippet></ROW><ROW><id>17416712</id><snippet>[x * 20 if hasattr(x, "__mul__") else x for x in ll]
</snippet></ROW><ROW><id>17416712</id><snippet>*</snippet></ROW><ROW><id>17416712</id><snippet>print("foo" * 3)  # prints "foofoofoo"
</snippet></ROW><ROW><id>17416712</id><snippet>[x * 20 if isinstance(x, int) else x for x in ll]
</snippet></ROW><ROW><id>17416818</id><snippet>from Tkinter import *
from OpenGL.Tk import *

b=Opengl(height=100,width=100)
root = b.master
f = Frame(root, width=100, bg='blue')
f.pack(side='left', fill='y')
b.pack(side='right', expand=1, fill='both')

root.mainloop()
</snippet></ROW><ROW><id>17416850</id><snippet>&gt;&gt;&gt; uar[np.bincount(inv).argsort()[::-1]]
array([('B', 3), ('A', 2), ('A', 1)],
      dtype=[('c1', '|S1'), ('c2', '&lt;i4')])
</snippet></ROW><ROW><id>17416850</id><snippet>&gt;&gt;&gt; np.bincount(inv).argsort()
array([0, 1, 2])
&gt;&gt;&gt; np.bincount(inv).argsort()[::-1] #Reverse.
array([2, 1, 0])
</snippet></ROW><ROW><id>17416850</id><snippet>uar[np.lexsort((uar['c2'],np.bincount(inv)*-1))]
array([('B', 3), ('A', 1), ('A', 2)],
      dtype=[('c1', '|S1'), ('c2', '&lt;i4')])
</snippet></ROW><ROW><id>17416870</id><snippet>&gt;&gt;&gt; li=[1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; it=iter(li)
&gt;&gt;&gt; print [x for x in it], [x for x in it]
[1, 2, 3, 4, 5, 6, 7, 8, 9], []
</snippet></ROW><ROW><id>17416870</id><snippet>&gt;&gt;&gt; it_copy=list(it)
&gt;&gt;&gt; print [x for x in it_copy],[x for x in it_copy]
[1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>17416887</id><snippet>import sys
sys.stdout = open('file.txt', 'w')
</snippet></ROW><ROW><id>17416887</id><snippet>file.txt</snippet></ROW><ROW><id>17416887</id><snippet>import sys
sys.stdout = open("file.txt", 'w')

for n in xrange(100):
    print n

#I bet you can guess what you're going to see in file.txt
</snippet></ROW><ROW><id>17416887</id><snippet>file.txt</snippet></ROW><ROW><id>17416927</id><snippet>plt.axis([min(x), max(x), min(y), max(y)])
</snippet></ROW><ROW><id>17416927</id><snippet>from StringIO import StringIO
import matplotlib.pyplot as plt
import pylab, csv, re

data = '''0,11.87772978,65.2269997,7.103221875,6.324708559
1.34E-08,17.65605321,75.09093444,8.309697828,14.87524308
2.69E-08,15.19155521,77.12878487,12.31291774,9.457125362
4.03E-08,23.85118853,88.76138941,20.10571063,8.041540228
5.38E-08,18.77440037,87.15681445,14.53884458,13.36609689
6.72E-08,19.54841939,117.9766076,16.87197928,18.50902666
8.06E-08,33.37595782,102.2086995,40.59474863,9.451430137'''

x=[]
y=[]

file_ = StringIO(data)

reader = csv.reader(file_, delimiter=',')
for row in reader:
        if re.search("\d",row[0]):
            x.append(float(row[0]))
            y.append(float(row[1]))

print x
print y

plt.plot(x, y)
plt.axis([min(x), max(x), min(y), max(y)])
plt.show()
</snippet></ROW><ROW><id>17416962</id><snippet>max_page</snippet></ROW><ROW><id>17416962</id><snippet>&gt;&gt;&gt; 1 &lt; '0'
True
</snippet></ROW><ROW><id>17417077</id><snippet>QWebView</snippet></ROW><ROW><id>17417299</id><snippet>format</snippet></ROW><ROW><id>17417299</id><snippet>&gt;&gt;&gt; format(5.2, '.6f')
'5.200000'
</snippet></ROW><ROW><id>17417299</id><snippet>.6</snippet></ROW><ROW><id>17417299</id><snippet>f</snippet></ROW><ROW><id>17417299</id><snippet>lambda</snippet></ROW><ROW><id>17417299</id><snippet>map</snippet></ROW><ROW><id>17417299</id><snippet>str</snippet></ROW><ROW><id>17417299</id><snippet>print('The sum is=' + ":".join(map(lambda n: format(n, '.6f'), t4)))
</snippet></ROW><ROW><id>17417299</id><snippet>map</snippet></ROW><ROW><id>17417299</id><snippet>print('The sum is=' + ":".join(format(n, '.6f') for n in t4))
</snippet></ROW><ROW><id>17417404</id><snippet>tileurl = tile.replace(t1, "") ## Removing the parameters from the url
p = urlparse.parse_qs(t1) ## decoding the parameter
tileparam = urllib.urlencode(p) ## encoding the parameter...
</snippet></ROW><ROW><id>17417527</id><snippet>t = Task("Task_{0}".format(i), "FUNCTION", id2, "task{0}_types".format(i), None)
</snippet></ROW><ROW><id>17417527</id><snippet>*args</snippet></ROW><ROW><id>17417527</id><snippet>params = []
params.append("Task_{0}".format(i))
# ...
params.append("task{0}_types".format(i))
params.append(None)
t = Task(*params)
</snippet></ROW><ROW><id>17417527</id><snippet>**kwargs</snippet></ROW><ROW><id>17417527</id><snippet>params = {}
params['something'] = "Task_{0}".format(i)
params['something_else'] = "task{0}_types".format(i)
# ...
params['last_thing'] = None
t = Task(**params)
</snippet></ROW><ROW><id>17417531</id><snippet>ftp.retrbinary('RETR %s' % filename, file.write)
</snippet></ROW><ROW><id>17417531</id><snippet>ftp.retrbinary('RETR %s' % filename, open(filename, 'wb').write)
</snippet></ROW><ROW><id>17417845</id><snippet>import sys
import argparse

class AbsAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if len(values) % 2 == 0:
            # If valid, store the values.
            setattr(namespace, self.dest, values)

            # You could convert the flat list to a list of 2-tuples, if needed:
            #   zip(values[::2], values[1::2])
        else:
            # Otherwise, invoke a parser error with a message.
            parser.error('abs must be supplied as pairs')


ap = argparse.ArgumentParser()
ap.add_argument('z')
ap.add_argument('abs', nargs = '+', action = AbsAction)
opt = ap.parse_args()
print opt
</snippet></ROW><ROW><id>17417851</id><snippet>./bin/python</snippet></ROW><ROW><id>17417851</id><snippet>source bin/activate
</snippet></ROW><ROW><id>17417851</id><snippet>python</snippet></ROW><ROW><id>17418163</id><snippet>&lt;link rel="stylesheet" type="text/css"  href="css/style201306.css" /&gt;
</snippet></ROW><ROW><id>17418163</id><snippet>&lt;link rel="stylesheet" type="text/css"  href="/css/style201306.css" /&gt;
</snippet></ROW><ROW><id>17418163</id><snippet>/help</snippet></ROW><ROW><id>17418163</id><snippet>/help/css/style201306.css
</snippet></ROW><ROW><id>17418273</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.subtract((10, 10), (4, 4))
array([6, 6])
</snippet></ROW><ROW><id>17418273</id><snippet>&gt;&gt;&gt; tuple(numpy.subtract((10, 10), (4, 4)))
(6, 6)
</snippet></ROW><ROW><id>17418365</id><snippet>sparse.vstack</snippet></ROW><ROW><id>17418365</id><snippet>from scipy import sparse
from numpy import random
N=3
x = sparse.lil_matrix( (N,N) )
for _ in xrange(N):
    x[random.randint(0,N-1),random.randint(0,N-1)]=random.randint(1,100)

x = sparse.vstack([x, sparse.lil_matrix((1,3))])
</snippet></ROW><ROW><id>17418365</id><snippet>sparse.bmat</snippet></ROW><ROW><id>17418365</id><snippet>sparse.vstack</snippet></ROW><ROW><id>17418365</id><snippet>x = sparse.bmat([ [x, None], [None,sparse.lil_matrix((1,1))] ])
</snippet></ROW><ROW><id>17418507</id><snippet>&gt;&gt;&gt; x = [[(u'reads_2.fq',), (u'reads_2.fq',), (u'reads_2.fq',), (u'reads_2.fq',), (u'reads_2.fq',)]]
&gt;&gt;&gt; [y[0] for y in x[0]]
[u'reads_2.fq', u'reads_2.fq', u'reads_2.fq', u'reads_2.fq', u'reads_2.fq']
</snippet></ROW><ROW><id>17418507</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>17418507</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(x[0]))
[u'reads_2.fq', u'reads_2.fq', u'reads_2.fq', u'reads_2.fq', u'reads_2.fq']
</snippet></ROW><ROW><id>17418552</id><snippet>#include "widget.h"
#include &lt;QMenuBar&gt;

Widget::Widget(QWidget *parent)
    : QWidget(parent)
{
    QMenuBar *mb = new QMenuBar(this);
    mb-&gt;addAction("Hello");
}

Widget::~Widget()
{

}
</snippet></ROW><ROW><id>17418594</id><snippet>def draw_circle(t):
    t.forward(100)
    t.left(91)
</snippet></ROW><ROW><id>17418594</id><snippet>t = turtle.Pen()
command = input()

if command == "circle":
    draw_circle(t)
elif command = "stuff":
    ...
</snippet></ROW><ROW><id>17418594</id><snippet>commands = {
    "circle": draw_circle,
    "square": draw_square
}
</snippet></ROW><ROW><id>17418594</id><snippet>t = turtle.Pen()
turtle_command = input()
command = commands[turtle_command]

command(t)
</snippet></ROW><ROW><id>17418707</id><snippet>print</snippet></ROW><ROW><id>17418707</id><snippet>print (ascii("c"))
</snippet></ROW><ROW><id>17418707</id><snippet>&gt;&gt;&gt; print (ascii("c"))
'c'
&gt;&gt;&gt; print ascii("c")
  File "&lt;ipython-input-3-c44db7d0eada&gt;", line 1
    print ascii("c")
              ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>17418764</id><snippet>__init__.py</snippet></ROW><ROW><id>17418764</id><snippet>import os
import importlib
try:
    # Do a dynamic 'from DJANGO_SETTINGS_MODULE import *'
    settings = importlib.import_module(os.environ['DJANGO_SETTINGS_MODULE'])
    for v in dir(settings):
        if v.startswith("__"): continue
        globals()[v] = getattr(settings, v)
except ImportError, KeyError:
    # default to the production settings if environment variable not set or improperly specified
    from production import *
</snippet></ROW><ROW><id>17418764</id><snippet>import settings == import settings.xxx</snippet></ROW><ROW><id>17418764</id><snippet>settings.xxx</snippet></ROW><ROW><id>17418844</id><snippet>ascii</snippet></ROW><ROW><id>17418844</id><snippet>&gt;&gt;&gt; ascii('cat')
"'cat'"
</snippet></ROW><ROW><id>17418844</id><snippet>'cat'</snippet></ROW><ROW><id>17418844</id><snippet>ascii</snippet></ROW><ROW><id>17418844</id><snippet>repr</snippet></ROW><ROW><id>17418844</id><snippet>eval</snippet></ROW><ROW><id>17418844</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17418844</id><snippet>&gt;&gt;&gt; eval (ascii('cat'))
'cat'
&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval(ascii('cat'))
'cat'
</snippet></ROW><ROW><id>17418844</id><snippet>str()</snippet></ROW><ROW><id>17418844</id><snippet>repr()</snippet></ROW><ROW><id>17418844</id><snippet>SyntaxError</snippet></ROW><ROW><id>17418844</id><snippet>str()</snippet></ROW><ROW><id>17418844</id><snippet>repr()</snippet></ROW><ROW><id>17418877</id><snippet>ReadDirectoryChangesW</snippet></ROW><ROW><id>17418943</id><snippet>import os</snippet></ROW><ROW><id>17418943</id><snippet>os.chdir(r"\where\the\file\should\go")</snippet></ROW><ROW><id>17418943</id><snippet>#!/usr/bin/python
import ftplib
import os
filename = "filename"
ftp = ftplib.FTP("xx.xxx.xxx.xxx")
ftp.login("uid", "psw")
ftp.cwd("/my/location")
os.chdir(r"c:\somewhere")
print filename
ftp.retrbinary('RETR %s' % filename, open(filename, 'w').write)
</snippet></ROW><ROW><id>17418956</id><snippet>print</snippet></ROW><ROW><id>17418956</id><snippet>replace_with_import</snippet></ROW><ROW><id>17418956</id><snippet>try</snippet></ROW><ROW><id>17418956</id><snippet>try</snippet></ROW><ROW><id>17419188</id><snippet>nc -l 8888</snippet></ROW><ROW><id>17419188</id><snippet>import requests

requests.post('http://localhost:8888', data={u'post': u'Andr\xe9 T\xe9chin\xe9'})
</snippet></ROW><ROW><id>17419188</id><snippet>POST / HTTP/1.1
Host: localhost:8888
Content-Length: 33
Content-Type: application/x-www-form-urlencoded
Accept-Encoding: gzip, deflate, compress
Accept: */*
User-Agent: python-requests/1.2.3 CPython/2.7.3

post=Andr%C3%A9+T%C3%A9chin%C3%A9
</snippet></ROW><ROW><id>17419188</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.unquote_plus(b"Andr%C3%A9+T%C3%A9chin%C3%A9").decode('utf-8')
u'Andr\xe9 T\xe9chin\xe9'
</snippet></ROW><ROW><id>17419188</id><snippet>headers = {"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"}
</snippet></ROW><ROW><id>17419188</id><snippet>x-www-form-urlencoded</snippet></ROW><ROW><id>17419466</id><snippet>print</snippet></ROW><ROW><id>17419466</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>17419466</id><snippet>'ascii'</snippet></ROW><ROW><id>17419466</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>17419466</id><snippet>print mystring</snippet></ROW><ROW><id>17419466</id><snippet>print(mystring)</snippet></ROW><ROW><id>17419718</id><snippet>i['month']</snippet></ROW><ROW><id>17419718</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17419718</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; example = u'2013-06-01 00:00:00'
&gt;&gt;&gt; example = datetime.datetime.strptime(example, "%Y-%m-%d %H:%M:%S")
&gt;&gt;&gt; example = datetime.datetime.strptime(example, "%Y-%m-%d %H:%M:%S")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: must be string, not datetime.datetime
</snippet></ROW><ROW><id>17419718</id><snippet>report</snippet></ROW><ROW><id>17419718</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17419718</id><snippet>datetime</snippet></ROW><ROW><id>17419718</id><snippet>datetime</snippet></ROW><ROW><id>17419883</id><snippet>*</snippet></ROW><ROW><id>17419883</id><snippet>def foo(a, b, *c):
  print a, b, c

foo(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>17420005</id><snippet>\w</snippet></ROW><ROW><id>17420005</id><snippet>.</snippet></ROW><ROW><id>17420005</id><snippet>.png</snippet></ROW><ROW><id>17420005</id><snippet>.</snippet></ROW><ROW><id>17420005</id><snippet>uploads_url_patterns = patterns('',
    url(r'^uploads/view/(?P&lt;file_name&gt;[\w.]{0,256})$', ShowImageView.as_view(), name='show'),
)
</snippet></ROW><ROW><id>17420005</id><snippet>uploads/view/</snippet></ROW><ROW><id>17420005</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(r'^uploads/view/(?P&lt;file_name&gt;[\w.]{0,256})$', 'uploads/view/test_filename.png')
&lt;_sre.SRE_Match object at 0x103aa5828&gt;
&gt;&gt;&gt; re.search(r'^uploads/view/(?P&lt;file_name&gt;[\w.]{0,256})$', 'uploads/view/test_filename.png').groupdict()
{'file_name': 'test_filename.png'}
</snippet></ROW><ROW><id>17420386</id><snippet>' g'</snippet></ROW><ROW><id>17420386</id><snippet>import mechanize 

br = mechanize.Browser()
br.open("http://localhost:8080/1.htm")
br.select_form(name='frmentermemorableinformation1') 

select = br.form.find_control("frmentermemorableinformation1:strEnterMemorableInformation_memInfo1", 
                     type='select')

for item in select.items:
    print item.attrs['value']

--output:--
-
 a
 b
 c
 d
 e
 f
 g
...
...
</snippet></ROW><ROW><id>17420386</id><snippet>&lt;</snippet></ROW><ROW><id>17420386</id><snippet>&amp;</snippet></ROW><ROW><id>17420386</id><snippet> </snippet></ROW><ROW><id>17420386</id><snippet> </snippet></ROW><ROW><id>17420386</id><snippet>&amp;  (represented by an html entity as required)
</snippet></ROW><ROW><id>17420386</id><snippet>nbsp;g
</snippet></ROW><ROW><id>17420583</id><snippet>self</snippet></ROW><ROW><id>17420583</id><snippet>class Rectangle:
   def __init__(self):
       self.x = 0
       self.y = 0
       self.width = 50
       self.height = 30

   # may I recommend to make the moveRect function
   # a method of Rectangle, like so:
   def move(self, dx, dy):
       self.x += dx
       self.y += dy
</snippet></ROW><ROW><id>17420583</id><snippet> r = Rectangle()
 r.x = 5
 r.y = 10
 r.width = 50
 r.height = 10
 r.move(25, 10)
</snippet></ROW><ROW><id>17421457</id><snippet>foo_list</snippet></ROW><ROW><id>17421467</id><snippet>from random import randint

def rn():
    return randint(1,49)

with open('Output.txt', 'w') as f:
    f.write("Random numbers are: \n")
    for _ in xrange(10):
        s = sorted(rn() for _ in xrange(6))
        f.write("{},{},{},{},{},{}\n".format(*s))
</snippet></ROW><ROW><id>17421754</id><snippet>search</snippet></ROW><ROW><id>17421754</id><snippet>$</snippet></ROW><ROW><id>17421754</id><snippet>if re.search(r".*\s\D+\s$", string):
    print string
</snippet></ROW><ROW><id>17421762</id><snippet>try:
    #stuff
except KeyboardInterrupt:
    raise #rethrow to a higher handler
except:
    #everything else
</snippet></ROW><ROW><id>17421860</id><snippet>x = arange(1,5,0.01)
yarr = vstack((x,))
y = sin(x)

imshow(yarr, extent=(min(x),max(x), min(y),max(y)), cmap=cm.hot)
plot(x, y, color='cornflowerblue',lw=4)
</snippet></ROW><ROW><id>17422035</id><snippet>while</snippet></ROW><ROW><id>17422035</id><snippet>def askUser():
    while True:
        try:
            choice = int(input("Do you want to: \n(1) Go to stack overflow \n(2) Import from phone \n(3) Import from camcorder \n(4) Import from camcorder?"))
        except ValueError:
            print("Please input a number")
            continue
        if 0 &lt; choice &lt; 5:
            break
        else:
            print("That is not between 1 and 4! Try again:")
    print ("You entered: {} ".format(choice)) # Good to use format instead of string formatting with %
    mydict = {1:go_to_stackoverflow, 2:import_from_phone, 3:import_from_camcorder, 4:import_from_camcorder}
    mydict[choice]()
</snippet></ROW><ROW><id>17422035</id><snippet>try/except</snippet></ROW><ROW><id>17422035</id><snippet>continue</snippet></ROW><ROW><id>17422035</id><snippet>.get()</snippet></ROW><ROW><id>17422035</id><snippet>mydict</snippet></ROW><ROW><id>17422035</id><snippet>()</snippet></ROW><ROW><id>17422066</id><snippet>  render_to_response('template.html'....)
</snippet></ROW><ROW><id>17422066</id><snippet>  HttpResponse(json.dumps(value))
</snippet></ROW><ROW><id>17422145</id><snippet>sorted</snippet></ROW><ROW><id>17422145</id><snippet>List</snippet></ROW><ROW><id>17422145</id><snippet>sorted</snippet></ROW><ROW><id>17422145</id><snippet>&gt;&gt;&gt; lis = [('a', Decimal('1420.3345345278832575')), ('b', Decimal('380.0000000000000000')),('c', Decimal('382.0000000000000000'))]
&gt;&gt;&gt; new_lis = sorted(lis, key=itemgetter(1))
&gt;&gt;&gt; new_lis
[('b', Decimal('380.0000000000000000')), ('c', Decimal('382.0000000000000000')), ('a', Decimal('1420.3345345278832575'))]
</snippet></ROW><ROW><id>17422145</id><snippet>list.sort</snippet></ROW><ROW><id>17422145</id><snippet>&gt;&gt;&gt; lis = [('a', Decimal('1420.3345345278832575')), ('b', Decimal('380.0000000000000000')),('c', Decimal('382.0000000000000000'))]
&gt;&gt;&gt; lis.sort(key=itemgetter(1))
&gt;&gt;&gt; lis
[('b', Decimal('380.0000000000000000')), ('c', Decimal('382.0000000000000000')), ('a', Decimal('1420.3345345278832575'))]
</snippet></ROW><ROW><id>17422431</id><snippet>.items()</snippet></ROW><ROW><id>17422431</id><snippet>result.popitem(last=False)
</snippet></ROW><ROW><id>17422431</id><snippet>OrderedDict.popitem()</snippet></ROW><ROW><id>17422431</id><snippet>last</snippet></ROW><ROW><id>17422431</id><snippet>False</snippet></ROW><ROW><id>17422431</id><snippet>if result.values()[0] &lt; score:
</snippet></ROW><ROW><id>17422431</id><snippet>.update()</snippet></ROW><ROW><id>17422431</id><snippet>result[str(line)] = score  # instead of temp=str(line); result.update({temp:score})
</snippet></ROW><ROW><id>17422504</id><snippet>'\n'</snippet></ROW><ROW><id>17422504</id><snippet>agent = '"'+(line.split('\t')[9]).rstrip('\r\n')+'"'
</snippet></ROW><ROW><id>17422504</id><snippet>fo.write(ip + ' - - ' + time + ' ' + method + ' ' + status + ' 0 ' + referrer + ' ' + agent)
</snippet></ROW><ROW><id>17422504</id><snippet>fo.write("{0} - - {1} {2} {3} {4} 0 {5} {6}".format(ip, time, method, status, referrer, agent)
</snippet></ROW><ROW><id>17422683</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyTableWidget(QtGui.QTableWidget):
    focusIn = QtCore.pyqtSignal(QtCore.QObject)

    def __init__(self, parent=None):
        super(MyTableWidget, self).__init__(parent)

    def focusInEvent(self, event):
        self.focusIn.emit(self)

        return super(MyTableWidget, self).focusInEvent(event)

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)      

        self.lastFocusedTableWidget = None

        self.tableWidgetFirst  = MyTableWidget(self)
        self.tableWidgetFirst.setObjectName("tableWidgetFirst")
        self.tableWidgetFirst.focusIn.connect(self.on_tableWidget_focusIn)

        self.tableWidgetSecond = MyTableWidget(self)
        self.tableWidgetSecond.setObjectName("tableWidgetSecond")
        self.tableWidgetSecond.focusIn.connect(self.on_tableWidget_focusIn)

        self.pushButtonLastFocused = QtGui.QPushButton(self)
        self.pushButtonLastFocused.setText("Print the last focused QTableWidget!")
        self.pushButtonLastFocused.clicked.connect(self.on_pushButtonLastFocused_clicked)

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.tableWidgetFirst)
        self.layoutVertical.addWidget(self.tableWidgetSecond)
        self.layoutVertical.addWidget(self.pushButtonLastFocused)

    @QtCore.pyqtSlot(QtCore.QObject)
    def on_tableWidget_focusIn(self, obj):
        self.lastFocusedTableWidget = obj

    @QtCore.pyqtSlot()
    def on_pushButtonLastFocused_clicked(self):
        print self.lastFocusedTableWidget.objectName()

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.resize(333, 111)
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>17422848</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter()
with open('abc') as f:
    reader = csv.reader(f, delimiter = ',', skipinitialspace = True)
    for row in reader:
        c[row[1]] += int(row[-1])
...         
&gt;&gt;&gt; c
Counter({'2': 21, '3': 9})
</snippet></ROW><ROW><id>17422848</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17422848</id><snippet>&gt;&gt;&gt; with open('abc') as f:
    reader = csv.reader(f, delimiter = ',', skipinitialspace = True)
    for k,g in groupby(enumerate(reader), key = lambda x:x[1][1]):
        print k," was common on the rows :",",".join(str(x[0]) for x in g)
...         
2  was common on the rows : 0,1
3  was common on the rows : 2,3
</snippet></ROW><ROW><id>17423053</id><snippet>interp</snippet></ROW><ROW><id>17423053</id><snippet>fluxvalues = np.interp(wavelist, wave_tg, flux_tg)
</snippet></ROW><ROW><id>17423053</id><snippet>wave_tg = crval_tg + np.arange(len(flux_tg))*cdel_tg
</snippet></ROW><ROW><id>17423130</id><snippet>hg clone https://bitbucket.org/secdev/scapy
cd scapy
hg update -r v2.2.0
</snippet></ROW><ROW><id>17423130</id><snippet>packages=['scapy','scapy/arch', 'scapy/arch/windows', 
'scapy/layers','scapy/asn1','scapy/tools','scapy/modules', 'scapy/crypto', 
'scapy/contrib' ]
</snippet></ROW><ROW><id>17423130</id><snippet>python setup.py install</snippet></ROW><ROW><id>17423130</id><snippet>contrib</snippet></ROW><ROW><id>17423180</id><snippet>from dateutil.parser import parse
from datetime import timedelta
import psycopg2
import psycopg2.extras

def function(param1, ...):
    """     
    Returns:
        2 element list, each a list by itself
    """ 
    cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    nsclist = [0]*param2_count
    naclist = [0]*param2_count  
    for i in range(param2_count):
        table1_query = "select sum(count)from table1 where column1= '{0}' and column2&gt;'{1}'::TIMESTAMP WITH TIME ZONE and column2&lt;='{2}'::TIMESTAMP WITH TIME ZONE"
        cur.execute(sched_query.format(param1,stime,etime))
        nsclist[i] = cur.fetchone()[0]
        if(nsclist[i] == []):
            nsclist[i] = 0
        table2_query = "select sum(count)from table2 where column1 = '{0}' and column2 &gt;'{1}'::TIMESTAMP WITH TIME ZONE and column2 &lt;='{2}'::TIMESTAMP WITH TIME ZONE"
        cur.execute(table2_query .format(param1,stime,etime))
        naclist[i] = cur.fetchone()[0]
        if(naclist[i] == []):
            naclist[i] = 0
    cur.close()
    return nsclist, naclist

def db_close():
    conn.close()

intervalPeriod = 5 #minutes
conn = psycopg2.connect(cs.local_connstr)
</snippet></ROW><ROW><id>17423468</id><snippet>'+'</snippet></ROW><ROW><id>17423468</id><snippet>'*'</snippet></ROW><ROW><id>17423468</id><snippet>operator</snippet></ROW><ROW><id>17423468</id><snippet>B</snippet></ROW><ROW><id>17423468</id><snippet>ops</snippet></ROW><ROW><id>17423468</id><snippet>&gt;&gt;&gt; from operator import add,sub,mul,div,pow
&gt;&gt;&gt; ops = {'+':add,'-':sub,'/':div, '*':mul,'**':pow}
&gt;&gt;&gt; B = ['+','-','/','*','**']
&gt;&gt;&gt; A = 1
&gt;&gt;&gt; [ops[item](A,100) for item in B]
[101, -99, 0, 100, 1]
</snippet></ROW><ROW><id>17423468</id><snippet>'/': operator.truediv</snippet></ROW><ROW><id>17423468</id><snippet>ops['/'](1,100)</snippet></ROW><ROW><id>17423468</id><snippet>0.01</snippet></ROW><ROW><id>17423468</id><snippet>0</snippet></ROW><ROW><id>17423468</id><snippet>&gt;&gt;&gt; A = [1,2,3,4,5]
&gt;&gt;&gt; B = ['a','b','something','nothing','cat']
&gt;&gt;&gt; c = {x:y for x,y in zip(A,B)}
&gt;&gt;&gt; c[1]
'a'
&gt;&gt;&gt; c[2]
'b'
&gt;&gt;&gt; c[5]
'cat
</snippet></ROW><ROW><id>17423468</id><snippet>globals()</snippet></ROW><ROW><id>17423468</id><snippet>for x,y in zip(A,B):
    globals()['C'+str(x)] =y
...     
&gt;&gt;&gt; C1
'a'
&gt;&gt;&gt; C2
'b'
</snippet></ROW><ROW><id>17423510</id><snippet> import winsound

 while True:
    winsound.Beep(100, 100)
</snippet></ROW><ROW><id>17423510</id><snippet>winsound.PlaySound(sound, flags)</snippet></ROW><ROW><id>17423756</id><snippet>build/${build_target}/${your_binary}</snippet></ROW><ROW><id>17423756</id><snippet>def configure(ctx):
    ctx.load(...)
    ctx.env.appname = APPNAME
    ctx.env.version = VERSION

    ctx.define(...)

    ctx.check_cc(...)


    ctx.setenv('debug', env=ctx.env.derive())
    ctx.env.CFLAGS = ['-ggdb', '-Wall']
    ctx.define('DEBUG',1)

    ctx.setenv('release', env=ctx.env.derive())
    ctx.env.CFLAGS = ['-O2', '-Wall']
    ctx.define('RELEASE',1)


def build(bld):
            ### subdirs :) under build are usually related to build variant or command
            print ("&gt;&gt;&gt;&gt;&gt; "+bld.cmd)
            print ("&gt;&gt;&gt;&gt;&gt; "+bld.variant)
        bin = bld.program(...)



from waflib.Build import BuildContext

class release(BuildContext):
      cmd = 'release'
      variant = 'release'

class debug(BuildContext):
      cmd = 'debug'
      variant = 'debug'
</snippet></ROW><ROW><id>17423809</id><snippet>gen_num_pointers()</snippet></ROW><ROW><id>17423809</id><snippet>gen_num_words()</snippet></ROW><ROW><id>17423809</id><snippet>zip()</snippet></ROW><ROW><id>17423809</id><snippet>zip()</snippet></ROW><ROW><id>17423809</id><snippet>def test_get_num_words(self):
    word_part = ['13797906', '23', 'n', '04', 'flood', '0', 'inundation', '0', 'deluge', '0', 'torrent', '0', '005', '@', '13796604', 'n', '0000', '+', '00603894', 'a', '0401', '+', '00753137', 'v', '0302', '+', '01527311', 'v', '0203', '+', '02361703', 'v', '0101', '|', 'an', 'overwhelming', 'number', 'or', 'amount;', '"a', 'flood', 'of', 'requests";', '"a', 'torrent', 'of', 'abuse"']
    self.assertEqual(4, self.wn.get_num_words(word_part))

def test_get_num_pointers(self):
    before_at = '13797906 23 n 04 flood 0 inundation 0 deluge 0 torrent 0 005'
    self.assertEqual(5, self.wn.get_num_pointers(before_at))
</snippet></ROW><ROW><id>17423809</id><snippet>0</snippet></ROW><ROW><id>17423809</id><snippet>04</snippet></ROW><ROW><id>17423809</id><snippet>&gt;&gt;&gt; 010
8
&gt;&gt;&gt; 08
  File "&lt;stdin&gt;", line 1
    08
     ^
SyntaxError: invalid token
</snippet></ROW><ROW><id>17423953</id><snippet>grep</snippet></ROW><ROW><id>17423953</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>17423953</id><snippet>rsync</snippet></ROW><ROW><id>17423953</id><snippet>rsync</snippet></ROW><ROW><id>17423953</id><snippet>drwxr-xr-x        4096 2013/06/14 17:19:13 tmp/t
-rwxrwxr-x       14532 2013/06/14 17:17:23 tmp/t/a.out
-rwxrwxr-x       14539 2013/06/14 17:19:13 tmp/t/static-order
</snippet></ROW><ROW><id>17423953</id><snippet>d</snippet></ROW><ROW><id>17423953</id><snippet>-</snippet></ROW><ROW><id>17423953</id><snippet>rsync</snippet></ROW><ROW><id>17423953</id><snippet>foo/dir</snippet></ROW><ROW><id>17423953</id><snippet>foo/dir-bar</snippet></ROW><ROW><id>17423953</id><snippet>foo/dir/bar</snippet></ROW><ROW><id>17423953</id><snippet>rsync</snippet></ROW><ROW><id>17423953</id><snippet>rsync</snippet></ROW><ROW><id>17423953</id><snippet>import subprocess

cmdline = ["rsync", "-e", "ssh", "-r", "user@host:/dir"]
proc = subprocess.Popen(cmdline, stdout=subprocess.PIPE)
for entry in proc.stdout:
    items = entry.strip().split(None, 4)
    if not items[0].startswith("d") and "." in items[4]:
        print items[4]
</snippet></ROW><ROW><id>17423953</id><snippet>rsync</snippet></ROW><ROW><id>17423953</id><snippet>ssh</snippet></ROW><ROW><id>17423953</id><snippet>sshpass</snippet></ROW><ROW><id>17423953</id><snippet>user</snippet></ROW><ROW><id>17423953</id><snippet>host</snippet></ROW><ROW><id>17423953</id><snippet>/dir</snippet></ROW><ROW><id>17423953</id><snippet>/dir</snippet></ROW><ROW><id>17423953</id><snippet>yield</snippet></ROW><ROW><id>17423953</id><snippet>subprocess</snippet></ROW><ROW><id>17423953</id><snippet>rsync</snippet></ROW><ROW><id>17423953</id><snippet>items</snippet></ROW><ROW><id>17423953</id><snippet>strptime()</snippet></ROW><ROW><id>17423953</id><snippet>rsync</snippet></ROW><ROW><id>17423953</id><snippet>from datetime import datetime
import os
import subprocess

def find_remote_files(hostspec):
    cmdline = ["rsync", "-e", "ssh", "-r", hostspec]
    with open(os.devnull, "w") as devnull:
        proc = subprocess.Popen(cmdline, stdout=subprocess.PIPE, stderr=devnull)
        try:
            for entry in proc.stdout:
                items = entry.strip().split(None, 4)
                if not items[0].startswith("d"):
                    dt = datetime.strptime(" ".join(items[2:4]),
                                           "%Y/%m/%d %H:%M:%S")
                    yield (int(items[1]), dt, items[4])
            proc.wait()
        except:
            # On any exception, terminate process and re-raise exception.
            proc.terminate()
            proc.wait()
            raise

for filesize, filedate, filename in find_remote_files("user@host:/dir"):
    print "Filename: %s" % (filename,)
    print "(%d bytes, modified %s)" % (filesize, filedate.strftime("%Y-%m-%d"))
</snippet></ROW><ROW><id>17423953</id><snippet>find_remote_files()</snippet></ROW><ROW><id>17424139</id><snippet>s = "012345678910"
a = 7
b = 4
c = 1
print s[a:b: -c]
</snippet></ROW><ROW><id>17424139</id><snippet>765
</snippet></ROW><ROW><id>17424275</id><snippet>&lt;form method="POST" &gt;
    {% csrf_token %}
    {{form.recipient}}
    {{form.subject}}
    {{form.message}}
    &lt;input type="submit" value="send" name="_send" /&gt;
    &lt;input type="submit" value="save" name="_save" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17424275</id><snippet>if request.POST.get('_save', False):
    # save
elif request.POST.get('_send', False):
    # send
else:
    return HttpResponseBadRequest()
</snippet></ROW><ROW><id>17424338</id><snippet>&lt;?php
   exec("C:/Python27/python c:/scripts/qwer.py 2&gt;&amp;1", $output);
   print_r($output);
?&gt;
</snippet></ROW><ROW><id>17424443</id><snippet>from .Courses import Courses
from .Fridge import Fridge
</snippet></ROW><ROW><id>17424443</id><snippet>Courses</snippet></ROW><ROW><id>17424443</id><snippet>Courses</snippet></ROW><ROW><id>17424480</id><snippet>series.groupby(pd.TimeGrouper('D')).apply(pd.Series.ffill)
</snippet></ROW><ROW><id>17424564</id><snippet>enumerate</snippet></ROW><ROW><id>17424564</id><snippet>&gt;&gt;&gt; lis = [3,5,6,2]
&gt;&gt;&gt; for ind, item in enumerate(lis):
...     print "{}:{}".format(ind, item)
...     
0:3
1:5
2:6
3:2
</snippet></ROW><ROW><id>17424702</id><snippet>None</snippet></ROW><ROW><id>17424702</id><snippet>types.NoneType</snippet></ROW><ROW><id>17424702</id><snippet>types.NoneType</snippet></ROW><ROW><id>17424702</id><snippet>from types import NoneType

class InvalidKeyNone(NoneType):
    pass

foo = InvalidKeyNone()
print(type(foo))
</snippet></ROW><ROW><id>17424702</id><snippet>NoneType</snippet></ROW><ROW><id>17424702</id><snippet>NoneType</snippet></ROW><ROW><id>17424855</id><snippet>In [11]: data['Value'] == True
Out[11]:
0     True
1    False
2     True
3     True
4    False
Name: Value, dtype: bool
</snippet></ROW><ROW><id>17424855</id><snippet>In [12]: data[data['Value'] == True]
Out[12]:
   Position Letter Value
0         1      a  True
2         3      c  True
3         4      d  True
</snippet></ROW><ROW><id>17424855</id><snippet>'TRUE'</snippet></ROW><ROW><id>17424855</id><snippet>'FALSE'</snippet></ROW><ROW><id>17424855</id><snippet>data['Value'] == 'TRUE'
</snippet></ROW><ROW><id>17424916</id><snippet>def add_nodes(root, nodes):
    if nodes:
        node = nodes.pop(0)
        root.setdefault(node, {})
        add_nodes(root[node], nodes)
</snippet></ROW><ROW><id>17424916</id><snippet>&gt;&gt;&gt; addresses = ['www.example.com/a/b/c/d', 'www.example.com/a/b/e/f', 'www.example.com/a/c/d/f']
&gt;&gt;&gt; elts = [addr.split('/')[1:] for addr in addresses]
&gt;&gt;&gt; tree = {}
&gt;&gt;&gt; for elt in elts:
...     add_nodes(tree, elt)
... 
&gt;&gt;&gt; tree
{'a': {'b': {'c': {'d': {}}, 'e': {'f': {}}}, 'c': {'d': {'f': {}}}}}
</snippet></ROW><ROW><id>17425214</id><snippet>re.findall()</snippet></ROW><ROW><id>17425214</id><snippet>values = re.findall(r'someinteger(.+?)withanother(.+?)', html)
</snippet></ROW><ROW><id>17425214</id><snippet>values.sort()
</snippet></ROW><ROW><id>17425214</id><snippet>x</snippet></ROW><ROW><id>17425214</id><snippet>&gt;&gt;&gt; s = "someinteger5withanother1someinteger4withanother2someinteger3withanother3"
&gt;&gt;&gt; values = re.findall(r'someinteger(.+?)withanother(.+?)', s)
&gt;&gt;&gt; values
[('5', '1'), ('4', '2'), ('3', '3')]
&gt;&gt;&gt; values.sort()
&gt;&gt;&gt; values
[('3', '3'), ('4', '2'), ('5', '1')]
</snippet></ROW><ROW><id>17425214</id><snippet>values = [(int(x), int(y)) for x,y in values]
</snippet></ROW><ROW><id>17425214</id><snippet>values.sort(key=lambda x: int(x[0]))
</snippet></ROW><ROW><id>17425676</id><snippet>from PyQt4 import QtGui, QtCore
from functools import partial


class Window(QtGui.QWidget):
    def __init__(self, mapping):
        QtGui.QWidget.__init__(self)
        layout = QtGui.QVBoxLayout(self)
        self.buttons = []
        for key, value in mapping.items():
            self.buttons.append(QtGui.QPushButton(key, self))
            self.buttons[-1].clicked.connect(partial(handleButton, data=value))
            layout.addWidget(self.buttons[-1])



def handleButton(self, data="\n"):
    print (data)


if __name__ == '__main__':
    import sys

    buttons = {'foo': 'bar', 'something': 'other'}
    app = QtGui.QApplication(sys.argv)
    window = Window(buttons)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>17425962</id><snippet>int</snippet></ROW><ROW><id>17425962</id><snippet>&gt;&gt;&gt; strs = 'test'
&gt;&gt;&gt; int(strs,36)
1372205
</snippet></ROW><ROW><id>17425962</id><snippet>def func(strs):
    numerals="0123456789abcdefghijklmnopqrstuvwxyz"
    return sum(numerals.index(x)*36**i for i,x in enumerate(strs[::-1]))
... 
&gt;&gt;&gt; func(strs)
1372205
</snippet></ROW><ROW><id>17425971</id><snippet>self.board_fields = [[Field() for j in range(self.height)] for i in range(self.width)]
</snippet></ROW><ROW><id>17426234</id><snippet>calendar</snippet></ROW><ROW><id>17426234</id><snippet>calendar.monthrange()</snippet></ROW><ROW><id>17426234</id><snippet>(weekday, number_of_days)</snippet></ROW><ROW><id>17426234</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; print calendar.monthrange(2012, 2)[1]
29
</snippet></ROW><ROW><id>17426234</id><snippet>datetime</snippet></ROW><ROW><id>17426234</id><snippet>import datetime
year = datetime.date.today().year
</snippet></ROW><ROW><id>17426234</id><snippet>import datetime
import calendar

def main():
    year = datetime.date.today().year
    userin = int(raw_input("Enter a month as number: "))  # Python 3: `int(input(...))` 
    print '{}, {}'.format(calendar.month_abbr[userin], calendar.monthrange(year, userin)[1])
</snippet></ROW><ROW><id>17426234</id><snippet>Enter a month as number: 2
Feb, 28
</snippet></ROW><ROW><id>17426255</id><snippet>TfidfVectorizer</snippet></ROW><ROW><id>17426255</id><snippet>token_pattern : string</snippet></ROW><ROW><id>17426255</id><snippet>i</snippet></ROW><ROW><id>17426255</id><snippet>1</snippet></ROW><ROW><id>17426255</id><snippet>label.i_don't_knowa and</snippet></ROW><ROW><id>17426417</id><snippet>str.join()</snippet></ROW><ROW><id>17426417</id><snippet>&gt;&gt;&gt; mystring = ' '.join(map(str, (34.2424, -64.2344, 76.3534, 45.2344)))
&gt;&gt;&gt; print mystring
34.2424 -64.2344 76.3534 45.2344
</snippet></ROW><ROW><id>17426417</id><snippet>TypeError</snippet></ROW><ROW><id>17426417</id><snippet>map()</snippet></ROW><ROW><id>17426417</id><snippet>map(str, (34.2424, -64.2344, 76.3534, 45.2344)</snippet></ROW><ROW><id>17426417</id><snippet>[str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344)]</snippet></ROW><ROW><id>17426417</id><snippet>$ python -m timeit "map(str, (34.2424, -64.2344, 76.3534, 45.2344))"
1000000 loops, best of 3: 1.93 usec per loop
$ python -m timeit "[str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344)]"
100000 loops, best of 3: 2.02 usec per loop
</snippet></ROW><ROW><id>17426417</id><snippet>str.join()</snippet></ROW><ROW><id>17426417</id><snippet>' '.join(itertools.imap(str, (34.2424, -64.2344, 76.3534, 45.2344)))
</snippet></ROW><ROW><id>17426417</id><snippet>map()</snippet></ROW><ROW><id>17426417</id><snippet>imap()</snippet></ROW><ROW><id>17426417</id><snippet>map()</snippet></ROW><ROW><id>17426417</id><snippet>''.join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
</snippet></ROW><ROW><id>17426465</id><snippet>add_password</snippet></ROW><ROW><id>17426465</id><snippet>proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'})
proxy_auth_handler = urllib2.ProxyBasicAuthHandler()
proxy_auth_handler.add_password('realm', 'host', 'username', 'password')

opener = urllib2.build_opener(proxy_handler, proxy_auth_handler)
# This time, rather than install the OpenerDirector, we use it directly:
opener.open('http://www.example.com/login.html')
</snippet></ROW><ROW><id>17426498</id><snippet>AttributeError: 'NoneType' object has no attribute 'group'</snippet></ROW><ROW><id>17426498</id><snippet>re.search()</snippet></ROW><ROW><id>17426498</id><snippet>None</snippet></ROW><ROW><id>17426498</id><snippet>import re
with open('text.txt', 'r') as myfile:
    for line in myfile:
        m = re.search('(.*)(?&lt;=Dog)Food(.*)', line)
        if m is not None:
            m.group(0)
            print "Found it."
            break # Break out of the loop
</snippet></ROW><ROW><id>17426498</id><snippet>with/as</snippet></ROW><ROW><id>17426500</id><snippet>In [9]: Series(df.Letter.values,index=df.Position).to_dict()
Out[9]: {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}
</snippet></ROW><ROW><id>17426500</id><snippet>In [6]: df = DataFrame(randint(0,10,10000).reshape(5000,2),columns=list('AB'))

In [7]: %timeit dict(zip(df.A,df.B))
1000 loops, best of 3: 1.27 ms per loop

In [8]: %timeit Series(df.A.values,index=df.B).to_dict()
1000 loops, best of 3: 987 us per loop
</snippet></ROW><ROW><id>17426515</id><snippet>ax.set_xticks()</snippet></ROW><ROW><id>17426515</id><snippet>ax.set_xticks((10,100,1000))
</snippet></ROW><ROW><id>17426515</id><snippet>ax.set_xticks((10,100,1000),('$10^1$','$10^2$','$10^3$'))
</snippet></ROW><ROW><id>17426635</id><snippet>INSERT</snippet></ROW><ROW><id>17426635</id><snippet>()</snippet></ROW><ROW><id>17426635</id><snippet>cur.execute('INSERT INTO "table#{}" (data) VALUES (%s)'.format(t), (row[a],))
</snippet></ROW><ROW><id>17426635</id><snippet>row[a]</snippet></ROW><ROW><id>17426635</id><snippet>while</snippet></ROW><ROW><id>17426635</id><snippet>t &lt; 10</snippet></ROW><ROW><id>17426635</id><snippet>a = 2
t = 1
while t &lt; 10:
    for date, row in dr.iterrows():
        cur.execute('INSERT INTO "table#{}" (data) VALUES (%s)'.format(t), (row[a],))
    a += 1
    t += 1
</snippet></ROW><ROW><id>17426635</id><snippet>for</snippet></ROW><ROW><id>17426635</id><snippet>range()</snippet></ROW><ROW><id>17426635</id><snippet>for t in range(1, 10):
    a = t + 1
    for date, row in dr.iterrows():
        cur.execute('INSERT INTO "table#{}" (data) VALUES (%s)'.format(t), (row[a],))
</snippet></ROW><ROW><id>17426673</id><snippet>for line in openfile:</snippet></ROW><ROW><id>17426673</id><snippet>openfile.seek(0)</snippet></ROW><ROW><id>17426673</id><snippet>Collections.Counter</snippet></ROW><ROW><id>17426673</id><snippet>from collections import Counter
with open("total data", "r") as openfile:
   c = Counter()
   for line in openfile:
      words = line.split()
      c.update(words)
</snippet></ROW><ROW><id>17427245</id><snippet>from lxml import etree

content = '''
YOUR XML HERE
'''

root = etree.fromstring(content)

# search for all "top level" resources
resources = root.xpath("//Resource[not(ancestor::Resource)]")
for resource in resources:
    # copy resource attributes in a dict
    mashup = dict(resource.attrib)
    # find child resource elements
    subresources = resource.xpath("./Resource")
    # if we find only one resource, add it to the mashup
    if len(subresources) == 1:
        mashup['resource'] = dict(subresources[0].attrib)
    # else... not idea what the OP wants...

    print mashup
</snippet></ROW><ROW><id>17427245</id><snippet>{'resource': {'DisplayName': 'VM', 'type': 'vm', 'name': 'charlie', 'baseHost': 'tango'}, 'DisplayName': 'Host', 'type': 'h', 'name': 'tango'}
</snippet></ROW><ROW><id>17427401</id><snippet>EvalType.objects.filter(customform__author=my_author)
</snippet></ROW><ROW><id>17427856</id><snippet>fork(2)</snippet></ROW><ROW><id>17427856</id><snippet>pthread_create(3)</snippet></ROW><ROW><id>17427856</id><snippet>join()</snippet></ROW><ROW><id>17427856</id><snippet>import os
import time

def main():
    for i in range(100):
        pid = os.fork()
        if pid:
            #print 'created new process %d' % pid
            continue
        else:
            time.sleep(1)
            return

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17427856</id><snippet>import thread
import time

def dummy():
    time.sleep(1)

def main():
    for i in range(100):
        tid = thread.start_new_thread(dummy, ())
        #print 'created new thread %d' % tid

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17427856</id><snippet>$ time python fork.py
real    0m0.035s
user    0m0.008s
sys     0m0.024s

$ time python thread.py
real    0m0.032s
user    0m0.012s
sys     0m0.024s
</snippet></ROW><ROW><id>17427862</id><snippet>import urllib
import urllib2

url = 'http://www.someserver.com/cgi-bin/register.cgi'
values = {'name' : 'Michael Foord',
          'location' : 'Northampton',
          'language' : 'Python' }

data = urllib.urlencode(values)
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
the_page = response.read()
</snippet></ROW><ROW><id>17427862</id><snippet>url</snippet></ROW><ROW><id>17427862</id><snippet>values</snippet></ROW><ROW><id>17428030</id><snippet>SELECT field1 FROM table1 ORDER BY id Limit 1000;
</snippet></ROW><ROW><id>17428122</id><snippet>from Tkinter import *

master = Tk()

listbox = Listbox(master)
listbox.pack()

listbox.insert(END, "a list entry")

for item in ["one", "two", "three", "four"]:
    listbox.insert(END, item)

mainloop()
</snippet></ROW><ROW><id>17428122</id><snippet>from Tkinter import *

master = Tk()

listbox = Listbox(master)
listbox.pack()

listbox2 = Listbox(master)

def moveDown():

    move_text = listbox.selection_get()
    curindex = int(listbox.curselection()[0])
    listbox.delete(curindex)
    listbox2.insert(END, move_text)

moveBtn = Button(master, text="Move Down", command=moveDown)
moveBtn.pack()


listbox2.pack()

for item in ["one", "two", "three", "four"]:
    listbox.insert(END, item)

mainloop()
</snippet></ROW><ROW><id>17428134</id><snippet>Authorization</snippet></ROW><ROW><id>17428134</id><snippet>r.headers['Authorization'] = b"Basic " + base64.b64encode(auth_string)
</snippet></ROW><ROW><id>17428134</id><snippet>auth</snippet></ROW><ROW><id>17428134</id><snippet>requests.get(url, auth=(username+"/token", token))
</snippet></ROW><ROW><id>17428264</id><snippet>sudo apt-cache search numpy | grep 3</snippet></ROW><ROW><id>17428264</id><snippet>sudo apt-get install python3-numpy</snippet></ROW><ROW><id>17428477</id><snippet>&lt;COMMAND&gt;</snippet></ROW><ROW><id>17428477</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse('interface_range_test.xml')
root = tree.getroot()
# note the explicit namespaces
commands = root.findall('{http://clish.sourceforge.net/XMLSchema}'
                        'VIEW/{http://clish.sourceforge.net/XMLSchema}COMMAND')
for command in commands:
  if 'shutdown' in command.get('name'):
    ET.dump(command) # modify to taste
</snippet></ROW><ROW><id>17428700</id><snippet>Workflow</snippet></ROW><ROW><id>17428700</id><snippet>Node</snippet></ROW><ROW><id>17428700</id><snippet>pickle</snippet></ROW><ROW><id>17428704</id><snippet>format()</snippet></ROW><ROW><id>17428704</id><snippet>&gt;&gt;&gt; format(234, '02x')
'ea'
</snippet></ROW><ROW><id>17428704</id><snippet>.__format__()</snippet></ROW><ROW><id>17428704</id><snippet>field_name</snippet></ROW><ROW><id>17428704</id><snippet>field_name</snippet></ROW><ROW><id>17428704</id><snippet>.__format__()</snippet></ROW><ROW><id>17428704</id><snippet>!r</snippet></ROW><ROW><id>17428704</id><snippet>!s</snippet></ROW><ROW><id>17428704</id><snippet>!r</snippet></ROW><ROW><id>17428704</id><snippet>.__format__()</snippet></ROW><ROW><id>17428704</id><snippet>.__repr__()</snippet></ROW><ROW><id>17428704</id><snippet>!s</snippet></ROW><ROW><id>17428704</id><snippet>.__str__()</snippet></ROW><ROW><id>17428704</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __repr__(self): return '&lt;Foo repr&gt;'
...     def __str__(self): return 'Foo as string'
...     def __format__(self, spec): return 'Formatting Foo as {}'.format(spec)
... 
&gt;&gt;&gt; '{:02x}'.format(Foo())
'Formatting Foo as 02x'
&gt;&gt;&gt; '{!s}'.format(Foo())
'Foo as string'
&gt;&gt;&gt; '{!r}'.format(Foo())
'&lt;Foo repr&gt;'
</snippet></ROW><ROW><id>17428859</id><snippet>&gt;&gt;&gt; a = np.array([1, 2, 3])
&gt;&gt;&gt; a
array([1, 2, 3])
&gt;&gt;&gt; a.transpose()
array([1, 2, 3])
&gt;&gt;&gt; a.dot(a.transpose())
14
</snippet></ROW><ROW><id>17428859</id><snippet>&gt;&gt;&gt; a.shape = (3,1)
&gt;&gt;&gt; a
array([[1],
       [2],
       [3]])
&gt;&gt;&gt; a.transpose()
array([[1, 2, 3]])
&gt;&gt;&gt; a.dot(a.transpose())
array([[1, 2, 3],
       [2, 4, 6],
       [3, 6, 9]])
</snippet></ROW><ROW><id>17428859</id><snippet>&gt;&gt;&gt; a = np.array([1, 2, 3])
&gt;&gt;&gt; a
array([1, 2, 3])
&gt;&gt;&gt; a[:, np.newaxis]
array([[1],
       [2],
       [3]])
&gt;&gt;&gt; a[np.newaxis, :]
array([[1, 2, 3]])
</snippet></ROW><ROW><id>17428908</id><snippet>else</snippet></ROW><ROW><id>17428908</id><snippet>for item in list:
    if item[0] == "t_done":
        return int(item[1])
else:
    raise Error(...)
</snippet></ROW><ROW><id>17428908</id><snippet>for</snippet></ROW><ROW><id>17428908</id><snippet>if</snippet></ROW><ROW><id>17429194</id><snippet>chuid</snippet></ROW><ROW><id>17429194</id><snippet>start-stop-daemon</snippet></ROW><ROW><id>17429194</id><snippet> start-stop-daemon \
      --start \
      --chuid daemonuser \
      --name testdaemon \
      --pidfile /var/run/testdaemon/test.pid \
      --startas /tmp/testdaemon.py \
     -- \
      --pidfile /var/run/testdaemon/test.pid \
      --logfile=/var/log/testdaemon/testdaemon.log
</snippet></ROW><ROW><id>17429194</id><snippet>/var/run/testdaemon</snippet></ROW><ROW><id>17429194</id><snippet>/var/log/testdaemon</snippet></ROW><ROW><id>17429395</id><snippet>class SomeClass(models.Model):
    @property
    def is_complete(self):
        if not hasattr(self, '_is_complete'):
            related_objects = self.do_complicated_database_lookup()
            self._is_complete = len(related_objects) == 0
        return self._is_complete
</snippet></ROW><ROW><id>17429576</id><snippet>{% url consultant_service_detail consultant_id=consultant.id %}
</snippet></ROW><ROW><id>17429576</id><snippet>url</snippet></ROW><ROW><id>17429576</id><snippet>{% url 'consultant_service_detail' consultant_id=consultant.id %}
</snippet></ROW><ROW><id>17429576</id><snippet>{% load url from future %}
{% url 'view_name' ... %}
</snippet></ROW><ROW><id>17429576</id><snippet>url(r'^admin/detail_consultant_service/(?P&lt;consultant_id&gt;[\w.%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4})/$',
    'admin_tool.views.consultant_service_detail',
    name="consultant_service_detail"),
</snippet></ROW><ROW><id>17429576</id><snippet>foo.com/admin/detail_consultant_service/email.address@here.com/
</snippet></ROW><ROW><id>17429659</id><snippet>from datetime import datetime
from flask import g
from sqlalchemy import Column, DateTime, String
from sqlalchemy.orm import MapperExtension


class AuditColumns(object):

    created_dt = Column(DateTime,
                        default=datetime.utcnow(),
                        nullable=False)

    created_by = Column(String(64),
                        nullable=False)

    updated_dt = Column(DateTime,
                        default=datetime.utcnow(),
                        nullable=False,
                        onupdate=datetime.utcnow())

    updated_by = Column(String(64),
                        nullable=False)


class AuditExtension(MapperExtension):

    def before_insert(self, mapper, connection, instance):
        """ Make sure the audit fields are set correctly  """
        instance.created_dt = datetime.utcnow()
        instance.created_by = g.username

        instance.updated_dt = datetime.utcnow()
        instance.updated_by = g.username

    def before_update(self, mapper, connection, instance):
        """ Make sure when we update this record the created fields stay unchanged!  """
        instance.created_dt = instance.created_dt
        instance.created_by = instance.created_by

        instance.updated_dt = datetime.utcnow()
        instance.updated_by = g.username
</snippet></ROW><ROW><id>17429659</id><snippet>class Roles(db.Model, AuditColumns):

    id = Column(BigInteger, primary_key=True)
    username = Column(String(64), nullable=False, unique=True)
    password = Column(String(255), nullable=False)

    __mapper_args__ = {
        'extension': AuditExtension()}

    def __repr__(self):
        return self.username
</snippet></ROW><ROW><id>17429750</id><snippet>cairo_surface_t</snippet></ROW><ROW><id>17429750</id><snippet>gtk_widget_draw</snippet></ROW><ROW><id>17429750</id><snippet>gtk_widget_draw</snippet></ROW><ROW><id>17429750</id><snippet>dest</snippet></ROW><ROW><id>17429750</id><snippet>def draw_render_to_file(dest, Widget, Surface = PDFSurface, width = 100, height = 100)
  widget = Widget(Surface)
  surface = widget.Surface(dest, width, height)
  widget.draw(Context(surface), width, height)
  surface.finish()
</snippet></ROW><ROW><id>17429908</id><snippet>load_stage()</snippet></ROW><ROW><id>17429908</id><snippet>database.json</snippet></ROW><ROW><id>17429908</id><snippet>stage['level']</snippet></ROW><ROW><id>17429908</id><snippet>stage = data.get('stage', {})</snippet></ROW><ROW><id>17429908</id><snippet>stage = stage.get('stage', {})</snippet></ROW><ROW><id>17429908</id><snippet>data.get</snippet></ROW><ROW><id>17429908</id><snippet>stage.get</snippet></ROW><ROW><id>17430028</id><snippet>while abs(P - P_old) &gt; accuracy or (loop_limit and count &gt; limit):
</snippet></ROW><ROW><id>17430028</id><snippet>max()</snippet></ROW><ROW><id>17430280</id><snippet>sys.stdout</snippet></ROW><ROW><id>17430280</id><snippet>sys.stdout</snippet></ROW><ROW><id>17430280</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>17430281</id><snippet>import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

x, y = np.array([[np.random.randint(0,20) + np.random.random()
                  for i in xrange(100)] for j in xrange(2)])
z = 112*x/2 + 2**.15*y + 109

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')

plt.show()
</snippet></ROW><ROW><id>17430281</id><snippet>x, y = np.random.rand(2, 100) * 20
</snippet></ROW><ROW><id>17430281</id><snippet>x, y = np.random.randint(20, size=(2, 100)) + np.random.rand(2, 100)
</snippet></ROW><ROW><id>17430437</id><snippet>def getRoot(file=None):
  if file is None:
      file='.'
  me=os.path.abspath(file)
  drive,path=os.path.splitdrive(me)
  while 1:
    path,folder=os.path.split(path)
    if not folder:
       break
  return drive+path

 os.path.join(getRoot(), 'etc', 'init.d')
</snippet></ROW><ROW><id>17430530</id><snippet>dir_to_serve = os.path.abspath(dir_to_serve) # get full path
if not dir_to_serve.startswith(media_dir): # maybe settings.MEDIA_DIR here?
    return # don't ever serve this

# code to serve from path
</snippet></ROW><ROW><id>17430740</id><snippet>T=int(raw_input())
import sys
from itertools import imap
lines=sys.stdin.readlines()
lis=imap(str,sorted(imap(int,lines)))
print "\n".join(lis)
</snippet></ROW><ROW><id>17430740</id><snippet>import sys
T =raw_input()           
lines = sys.stdin.readlines() #fetch all lines from the STDIN
lines.sort(key = int)         #sort the list in-place(faster than sorted) 
print "\n".join(lines)        #use `str.join` instead of a for-loop
</snippet></ROW><ROW><id>17430992</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17430992</id><snippet>import StringIO
import csv
import itertools

data = """CITY,AMOUNT,AMOUNT2,AMOUNTn
London,20,21,22
Tokyo,45,46,47
London,55,56,57
New York,25,26,27"""

# I use StringIO to create a file like object for demo purposes
f = StringIO.StringIO(data) 
fieldnames = f.readline().strip().split(',')
key = lambda x: x[0] # the first column will be a grouping key
# rows must be sorted by city before passing to itertools.groupby
rows_sorted = sorted(csv.reader(f), key=key)
outfile = StringIO.StringIO('')
writer = csv.DictWriter(outfile, fieldnames=fieldnames, lineterminator='\n')
writer.writeheader()
for city, rows in itertools.groupby(rows_sorted, key=key):
    # remove city column for aggregation, convert to ints
    rows = [[int(x) for x in row[1:]] for row in rows] 
    agg = [sum(column) for column in zip(*rows)]
    writer.writerow(dict(zip(fieldnames, [city] + agg)))

print outfile.getvalue()

# CITY,AMOUNT,AMOUNT2,AMOUNTn
# London,75,77,79
# New York,25,26,27
# Tokyo,45,46,47
</snippet></ROW><ROW><id>17431012</id><snippet>autofmt_xdate</snippet></ROW><ROW><id>17431012</id><snippet>autofmt_xdate</snippet></ROW><ROW><id>17431012</id><snippet>plt.setp(plt.xticks()[1], rotation=30, ha='right') # ha is the same as horizontalalignment
</snippet></ROW><ROW><id>17431012</id><snippet>autofmt_xdate</snippet></ROW><ROW><id>17431054</id><snippet>MoreComments type has no attribute body</snippet></ROW><ROW><id>17431054</id><snippet>if "Cricketbot"</snippet></ROW><ROW><id>17431054</id><snippet>try:
    if "Cricketbot..."
        ...
except AttributeError:
    pass
</snippet></ROW><ROW><id>17431054</id><snippet>body</snippet></ROW><ROW><id>17431054</id><snippet>for comment in flat_comments:
    if not hasattr(comment, 'body'):
        continue
    ...
</snippet></ROW><ROW><id>17431054</id><snippet>Comment</snippet></ROW><ROW><id>17431054</id><snippet>MoreComments</snippet></ROW><ROW><id>17431054</id><snippet>for comment in flat_comments:
    if not isinstance(comment, praw.objects.Comment):
        continue
    ...
</snippet></ROW><ROW><id>17431054</id><snippet>MoreComments</snippet></ROW><ROW><id>17431054</id><snippet>MoreComments</snippet></ROW><ROW><id>17431054</id><snippet>replace_more_comments</snippet></ROW><ROW><id>17431054</id><snippet>submission = r.get_submission(submission_id=subid[i])
submission.replace_more_comments(limit=16, threshold=10)
flat_comments = praw.helpers.flatten_tree(submission.comments)
</snippet></ROW><ROW><id>17431054</id><snippet>limit=16</snippet></ROW><ROW><id>17431054</id><snippet>threshold=10</snippet></ROW><ROW><id>17431248</id><snippet>with open('abc') as f:
    keys = map(str.strip, next(f).split('Key      ')[1].split('  '))
    vals = map(str.strip, next(f).split('Word     ')[1].split('\t'))
    print dict(zip(keys,vals))
...     
{'d 4': 'dig', 'b 2': 'box', 'a 1': 'as', 'c 3': 'cow'}
</snippet></ROW><ROW><id>17431716</id><snippet>dict.values()</snippet></ROW><ROW><id>17431716</id><snippet>dict.keys()</snippet></ROW><ROW><id>17431716</id><snippet>dict.items()</snippet></ROW><ROW><id>17431716</id><snippet>view</snippet></ROW><ROW><id>17431716</id><snippet>dict.values()</snippet></ROW><ROW><id>17431716</id><snippet>list</snippet></ROW><ROW><id>17431716</id><snippet>v = list(d.values())
{names[i]:v[i] for i in range(len(names))}
</snippet></ROW><ROW><id>17431749</id><snippet>scipy.optimize.minimize</snippet></ROW><ROW><id>17431749</id><snippet>jac=True</snippet></ROW><ROW><id>17431749</id><snippet>class MemoizeJac(object):
    """ Decorator that caches the value gradient of function each time it
    is called. """
    def __init__(self, fun):
        self.fun = fun
        self.jac = None
        self.x = None

    def __call__(self, x, *args):
        self.x = numpy.asarray(x).copy()
        fg = self.fun(x, *args)
        self.jac = fg[1]
        return fg[0]

    def derivative(self, x, *args):
        if self.jac is not None and numpy.alltrue(x == self.x):
            return self.jac
        else:
            self(x, *args)
            return self.jac
</snippet></ROW><ROW><id>17431749</id><snippet>fmemo = MemoizeJac(f, fprime)
xopt = fmin_cg(fmemo, x0, fmemo.derivative)
</snippet></ROW><ROW><id>17431749</id><snippet>f</snippet></ROW><ROW><id>17431749</id><snippet>scipy.optimize</snippet></ROW><ROW><id>17431749</id><snippet>class MemoizeJac(object):
    def __init__(self, fun):
        self.fun = fun
        self.value, self.jac = None, None
        self.x = None

    def _compute(self, x, *args):
        self.x = numpy.asarray(x).copy()
        self.value, self.jac = self.fun(x, *args)

    def __call__(self, x, *args):
        if self.value is not None and numpy.alltrue(x == self.x):
            return self.value
        else:
            self._compute(x, *args)
            return self.value

    def derivative(self, x, *args):
        if self.jac is not None and numpy.alltrue(x == self.x):
            return self.jac
        else:
            self._compute(x, *args)
            return self.jac
</snippet></ROW><ROW><id>17431751</id><snippet>for row in r:
    summary = dict(zip(columns, row))
    results.append(summary)
</snippet></ROW><ROW><id>17431751</id><snippet>row</snippet></ROW><ROW><id>17431751</id><snippet>Summary</snippet></ROW><ROW><id>17431751</id><snippet>results</snippet></ROW><ROW><id>17431991</id><snippet>@csrf_exempt
def save(request):
    if request.method == 'POST':
        rawdata1 = request.body
        rawdata2 = json.loads(rawdata1)
        length = len(rawdata2)
        for i in range(0,length,1):
            x = meterdata(time_elapsed=rawdata2[i]['time_elapsed'], volts=rawdata2[i]['volts'], amps=rawdata2[i]['amps'], kW=rawdata2[i]['kW'], kWh=rawdata2[i]['kWh'], session=rawdata2[i]['session'])
            x.save()        
    return HttpResponse("Success!")
</snippet></ROW><ROW><id>17432137</id><snippet>any</snippet></ROW><ROW><id>17432137</id><snippet>return any(val in x for x in lst)
</snippet></ROW><ROW><id>17432137</id><snippet>&gt;&gt;&gt; lst = ['aaa','dfbbsd','sdfdee']
&gt;&gt;&gt; val = 'bb'
&gt;&gt;&gt; any(val in x  for x in lst)
True
&gt;&gt;&gt; val = "foo"
&gt;&gt;&gt; any(val in x  for x in lst)
False
&gt;&gt;&gt; val = "fde"
&gt;&gt;&gt; any(val in x  for x in lst)
True
</snippet></ROW><ROW><id>17432480</id><snippet>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; s1 = [x for x in a if x[0] not in seen and not seen.add(x[0])]
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; s2 = [x for x in b if x[0] not in seen and not seen.add(x[0])]
&gt;&gt;&gt; s1
[(1, 2), (2, 3), (4, 5)]
&gt;&gt;&gt; s2
[(5, 2), (6, 3), (4, 5), (1, 9)]
</snippet></ROW><ROW><id>17432480</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; [x for x in chain(s1,s2) if x[0] not in seen and not seen.add(x[0])]
[(1, 2), (2, 3), (4, 5), (5, 2), (6, 3)]
</snippet></ROW><ROW><id>17432480</id><snippet>&gt;&gt;&gt; se1 = set(x[0] for x in s1)
&gt;&gt;&gt; se2 = set(x[0] for x in s2)
&gt;&gt;&gt; inter = se1 &amp; se2
&gt;&gt;&gt; inter
set([1, 4])
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; [x for x in chain(s1,s2) if x[0] in inter and x[0] not in seen
                                                          and not seen.add(x[0])]
[(1, 2), (4, 5)]
</snippet></ROW><ROW><id>17432500</id><snippet>ssl</snippet></ROW><ROW><id>17432500</id><snippet>ssl</snippet></ROW><ROW><id>17432500</id><snippet>VerifiedHTTPSConnection.connect</snippet></ROW><ROW><id>17432500</id><snippet>HTTPSConnectionPool</snippet></ROW><ROW><id>17432500</id><snippet>socket.create_connection</snippet></ROW><ROW><id>17432500</id><snippet>create_connection</snippet></ROW><ROW><id>17432500</id><snippet>connect</snippet></ROW><ROW><id>17432500</id><snippet>self.sock = socket.socket()
self.sock.settimeout(self.timeout)
self.sock.connect((self.host, self.port))
</snippet></ROW><ROW><id>17432500</id><snippet>create_connection</snippet></ROW><ROW><id>17432500</id><snippet>urllib3.connectionpool.VerifiedHTTPConnection.connect</snippet></ROW><ROW><id>17432500</id><snippet>create_connection</snippet></ROW><ROW><id>17432500</id><snippet>urllib3.connectionpool.VerifiedHTTPConnection.connect</snippet></ROW><ROW><id>17432500</id><snippet>socket</snippet></ROW><ROW><id>17432500</id><snippet>create_connection</snippet></ROW><ROW><id>17432541</id><snippet>from time import sleep
import sys
print 'L',
sys.stdout.flush()
sleep(0.1)
</snippet></ROW><ROW><id>17432541</id><snippet>for-loop</snippet></ROW><ROW><id>17432541</id><snippet>from time import sleep
import sys

def print_slowly(text):
    for c in text:
        print c,
        sys.stdout.flush()
        sleep(0.5)

print_slowly('LOA')
</snippet></ROW><ROW><id>17432541</id><snippet>print c,
</snippet></ROW><ROW><id>17432541</id><snippet>print(c, end='')
</snippet></ROW><ROW><id>17432641</id><snippet>zorder</snippet></ROW><ROW><id>17432641</id><snippet>scatter</snippet></ROW><ROW><id>17432641</id><snippet>zorder=1</snippet></ROW><ROW><id>17432641</id><snippet>zorder=-1</snippet></ROW><ROW><id>17432641</id><snippet>zorder</snippet></ROW><ROW><id>17432641</id><snippet>import numpy as np
import matplotlib.cm as cm
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt

delta = 0.025
x = np.arange(-3.0, 3.0, delta)
y = np.arange(-2.0, 2.0, delta)
X, Y = np.meshgrid(x, y)
Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
Z = 10.0 * (Z2 - Z1)

norm = cm.colors.Normalize(vmax=abs(Z).max(), vmin=-abs(Z).max())
cmap = cm.PRGn

levels = np.arange(-2.0, 1.601, 0.4)

fig, axes = plt.subplots(1,2, sharey=True)

for ax, zord in zip(axes, [1, -1]):
    ax.contourf(X, Y, Z, levels,
                cmap=cm.get_cmap(cmap, len(levels)-1),
                norm=norm)
    ax.autoscale(False) # To avoid that the scatter changes limits
    ax.scatter(np.random.uniform(-3,3,10),
               np.random.uniform(-2,2,10),
               zorder=zord)
    ax.set_title('Scatter with zorder={0}'.format(zord))
</snippet></ROW><ROW><id>17433149</id><snippet>class XmlMixin(list):
    """
    simple class that provides rudimentary
    xml serialisation capabiities. The class 
    class uses attribute child that is a list
    for recursing the structure.
    """
    def __init__(self, *children):
        list.__init__(self, children)

    def to_xml(self):
        data = '&lt;%(tag)s&gt;%(internal)s&lt;/%(tag)s&gt;'
        tag = self.__class__.__name__.lower()
        internal = ''
        for child in self:
            try:
                internal += child.to_xml()
            except:
                internal += str(child)
        return data % locals()


# some example classes these could have 
# some implementation details
class Root(XmlMixin):
    pass

class View(XmlMixin):
    pass

class Config(XmlMixin):
    pass

class A_Header(XmlMixin):
    pass


root =  Root(
            View(
                Config('my config'),
                A_Header('cool stuff')
            )
       )

#add stuff to the hierarchy
root.append( 
        View(
           Config('other config'),
           A_Header('not so cool')
           )
        )

print root.to_xml()
</snippet></ROW><ROW><id>17433159</id><snippet>VertexDendrogram</snippet></ROW><ROW><id>17433159</id><snippet>VertexClustering</snippet></ROW><ROW><id>17433159</id><snippet>VertexDendrogram</snippet></ROW><ROW><id>17433159</id><snippet>community_fastgreedy()</snippet></ROW><ROW><id>17433159</id><snippet>as_clustering()</snippet></ROW><ROW><id>17433159</id><snippet>VertexDendrogram</snippet></ROW><ROW><id>17433159</id><snippet>as_clustering()</snippet></ROW><ROW><id>17433159</id><snippet>cl = g.community_fastgreedy().as_clustering()
comm1 = cl[0]
comm2 = cl[1]
edges_between = g.es.select(_between=(comm1, comm2))
print 2.0 * len(edges_between) / len(comm1) * len(comm2)
</snippet></ROW><ROW><id>17433198</id><snippet>pyuic4</snippet></ROW><ROW><id>17433198</id><snippet>QDialog</snippet></ROW><ROW><id>17433198</id><snippet>QDialog</snippet></ROW><ROW><id>17433198</id><snippet>def my_func(self):
   form = QtGui.QDialog()
   ui_form = Form_UI.Custom_Dialog()
   ui_form.setupUi(form)     

   if form.exec_():
       print "successfully opened"
</snippet></ROW><ROW><id>17433243</id><snippet>in</snippet></ROW><ROW><id>17433243</id><snippet>if ',' in s['name']:
</snippet></ROW><ROW><id>17433292</id><snippet>jquery</snippet></ROW><ROW><id>17433292</id><snippet>&lt;script src="http://code.jquery.com/jquery-1.6.1.min.js"&gt;&lt;/script&gt;
&lt;script src="{{ STATIC_URL }}js/bootstrap.min.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>17433441</id><snippet>myText = nltk.Text(...)
</snippet></ROW><ROW><id>17433441</id><snippet>.concordance()</snippet></ROW><ROW><id>17433499</id><snippet>import datetime
filename = "log_{}.log".format(datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
# filename should be something like : 'log_2013-07-02_20-47-06.log'
f = open(filename, 'w')
</snippet></ROW><ROW><id>17433499</id><snippet>os.joinpath</snippet></ROW><ROW><id>17433499</id><snippet>\\</snippet></ROW><ROW><id>17433727</id><snippet>&gt;&gt;&gt; strs =  "/forums/support/"
&gt;&gt;&gt; spl =strs.strip('/').split('/')
&gt;&gt;&gt; a,b,c,d,e = spl + [None]*(5-len(spl))
&gt;&gt;&gt; a,b,c,d,e
('forums', 'support', None, None, None)

&gt;&gt;&gt; strs = "/forums/support/windows/"
&gt;&gt;&gt; spl =strs.strip('/').split('/')
&gt;&gt;&gt; a,b,c,d,e = spl + [None]*(5-len(spl))
&gt;&gt;&gt; a,b,c,d,e
('forums', 'support', 'windows', None, None)

&gt;&gt;&gt; strs = "/forums/support/windows/help_i_deleted_sys32/6/"
&gt;&gt;&gt; spl =strs.strip('/').split('/')
&gt;&gt;&gt; a,b,c,d,e = spl + [None]*(5-len(spl))
&gt;&gt;&gt; a,b,c,d,e
('forums', 'support', 'windows', 'help_i_deleted_sys32', '6')
</snippet></ROW><ROW><id>17433820</id><snippet>name</snippet></ROW><ROW><id>17433820</id><snippet>name = HumanName(name)
</snippet></ROW><ROW><id>17433820</id><snippet>name</snippet></ROW><ROW><id>17433820</id><snippet>name</snippet></ROW><ROW><id>17433820</id><snippet>if</snippet></ROW><ROW><id>17433820</id><snippet>for word in split_name_deg:
    for deg in degrees:
        if deg == word:
            degrees_list.append(split_name_deg.pop())
            name = ' '.join(split_name_deg)
</snippet></ROW><ROW><id>17433820</id><snippet>deg == word</snippet></ROW><ROW><id>17433820</id><snippet>name</snippet></ROW><ROW><id>17433820</id><snippet>a = parse_ieca_gc(s)</snippet></ROW><ROW><id>17433820</id><snippet>None</snippet></ROW><ROW><id>17433820</id><snippet>a</snippet></ROW><ROW><id>17433820</id><snippet>return</snippet></ROW><ROW><id>17433820</id><snippet>Diane Grant Albrecht M.S.           
</snippet></ROW><ROW><id>17433879</id><snippet>for l in activ:
    print(l, end=" ")
    sys.__stdout__.flush()
    sleep(0.1)
</snippet></ROW><ROW><id>17433896</id><snippet>data= request.POST.get('data','')</snippet></ROW><ROW><id>17433896</id><snippet>data</snippet></ROW><ROW><id>17433896</id><snippet>request.POST</snippet></ROW><ROW><id>17433996</id><snippet>for student in students_list:
    # perform calculation
</snippet></ROW><ROW><id>17433996</id><snippet>def get_class_average(student_list):
    total = 0
    for student in students_list:
        total += get_average(student)
    return total / len(student_list)
</snippet></ROW><ROW><id>17433996</id><snippet>map</snippet></ROW><ROW><id>17433996</id><snippet>sum</snippet></ROW><ROW><id>17433996</id><snippet>def get_class_average(student_list):
    return sum(map(get_average, student_list)) / len(student_list)
</snippet></ROW><ROW><id>17434095</id><snippet>itertools.permutations</snippet></ROW><ROW><id>17434095</id><snippet>&gt;&gt;&gt; stuff = [1, 2, 3]
&gt;&gt;&gt; for L in range(0, len(stuff)+1):
        for subset in itertools.permutations(stuff, L):
                print(subset)
...         
()
(1,)
(2,)
(3,)
(1, 2)
(1, 3)
(2, 1)
(2, 3)
(3, 1)
....
</snippet></ROW><ROW><id>17434095</id><snippet>itertools.permutations</snippet></ROW><ROW><id>17434095</id><snippet>permutations(iterable[, r]) --&gt; permutations object

Return successive r-length permutations of elements in the iterable.

permutations(range(3), 2) --&gt; (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17434445</id><snippet>class MyItem(Item):
    value = Field()


class MySpider(BaseSpider):
    ...

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        items = hxs.select('//table[@class="tablehd"]/td')

        for item in items:
            my_item = MyItem()
            my_item['value'] = item.select('.//text()').extract()
            yield my_item
</snippet></ROW><ROW><id>17434582</id><snippet>gethostbyname</snippet></ROW><ROW><id>17434582</id><snippet>connect</snippet></ROW><ROW><id>17434582</id><snippet>join</snippet></ROW><ROW><id>17434582</id><snippet>Condition</snippet></ROW><ROW><id>17434582</id><snippet>Event</snippet></ROW><ROW><id>17434582</id><snippet>select</snippet></ROW><ROW><id>17434582</id><snippet>pipe</snippet></ROW><ROW><id>17434582</id><snippet>join</snippet></ROW><ROW><id>17434582</id><snippet>daemon</snippet></ROW><ROW><id>17434582</id><snippet>join</snippet></ROW><ROW><id>17434582</id><snippet>Event</snippet></ROW><ROW><id>17434582</id><snippet>event = threading.Event()

def blocking_dns():
    socket.gethostbyname(host)
    event.set()

thread = threading.Thread(target=blocking_dns)
thread.daemon = True
thread.start()
success = event.wait(timeout)
</snippet></ROW><ROW><id>17434582</id><snippet>def run_with_timeout(timeout, func, *args, **kwargs):
    event = threading.Event()
    def wrapper():
        func(*args, **kwargs)
        event.set()
    thread = threading.Thread(target=wrapper, args=args, kwargs=kwargs)
    thread.daemon = True
    thread.start()
    return event.wait(timeout)
</snippet></ROW><ROW><id>17434582</id><snippet>dns_works = run_with_timeout(5.0, socket.gethostbyname, 'www.google.com')
</snippet></ROW><ROW><id>17434582</id><snippet>Event</snippet></ROW><ROW><id>17434582</id><snippet>set</snippet></ROW><ROW><id>17434582</id><snippet>set</snippet></ROW><ROW><id>17434582</id><snippet>Event</snippet></ROW><ROW><id>17434582</id><snippet>Condition</snippet></ROW><ROW><id>17434618</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17434618</id><snippet>/home/theuser/data/projects</snippet></ROW><ROW><id>17434618</id><snippet>/home/theuser/data/projects/mypack</snippet></ROW><ROW><id>17434618</id><snippet>import mypack</snippet></ROW><ROW><id>17434618</id><snippet>mypack.py</snippet></ROW><ROW><id>17434618</id><snippet>mypack</snippet></ROW><ROW><id>17434618</id><snippet>__init__.py</snippet></ROW><ROW><id>17434618</id><snippet>.../projects</snippet></ROW><ROW><id>17434618</id><snippet>mypack/__init__.py</snippet></ROW><ROW><id>17434618</id><snippet>''</snippet></ROW><ROW><id>17434618</id><snippet>sys.path</snippet></ROW><ROW><id>17434618</id><snippet>mypack/__init__.py</snippet></ROW><ROW><id>17434618</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17434636</id><snippet>import mpl_toolkits.basemap as mp
Zg = mp.interp(dataIN,lonIN,latIN,lonOUT,latOUT,
               checkbounds=False, masked=False, order=1)
</snippet></ROW><ROW><id>17434636</id><snippet>x=np.arange(-180,180,1)
y=np.arange(-90,90,1)
lonOUT,latOUT=np.meshgrid(x,y)
</snippet></ROW><ROW><id>17434839</id><snippet>data[1+j*22][3]</snippet></ROW><ROW><id>17434880</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>17434880</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>17434880</id><snippet>rows = hxs.select('//tr')
for row in rows:
    print row.select('td/text()').extract()
</snippet></ROW><ROW><id>17434880</id><snippet>rows</snippet></ROW><ROW><id>17434880</id><snippet>HtmlXPathSelector</snippet></ROW><ROW><id>17434880</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>17434880</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>17434880</id><snippet>row.select('td/text()').extract()</snippet></ROW><ROW><id>17434880</id><snippet>[u'MON, NOV 11', u'Item', u'Item', u'Item']
[u' Item ', u' Item ', u' Item ', u' Item ']
[u' Item ', u' Item ', u' Item ', u' Item ']
</snippet></ROW><ROW><id>17434905</id><snippet>def mytest():
    s1 = 'thing1'
    s2 = 'a_number'
    s3 = ['personA','GenderA','personB','GenderB','personC','GenderC','personD','GenderD','personE','GenderE',]
    s4 = ['comment by F','comm_F_gender','comment','ano_num','comment by G','comm_G_gender','comment','ano_num','comment by H','comm_H_gender','comment','ano_num']      
    with open('mytestfb.csv', 'a') as csvfile:
        spamwriter = csv.writer(csvfile, delimiter=',',
                            quotechar='|', quoting=csv.QUOTE_MINIMAL)
        exportlist=[s1,s2]
        for count in range(len(s3)/2):
            exportlist+=s3[count*2-1:count*2]
            try:
                exportlist+=s4[count*4-1+count*4]
            except IndexError:
                pass
        spamwriter.writerow(exportlist.encode('utf-8'))
</snippet></ROW><ROW><id>17435016</id><snippet>pydoc.py</snippet></ROW><ROW><id>17435016</id><snippet>def pipepager(text, cmd):
    """Page through text by feeding it to another program."""
    pipe = os.popen(cmd, 'w')
    try:
        pipe.write(text)
        pipe.close()
    except IOError:
        pass # Ignore broken pipes caused by quitting the pager program.
</snippet></ROW><ROW><id>17435016</id><snippet>pipe.write(text)</snippet></ROW><ROW><id>17435016</id><snippet>def pipepager(text, cmd):
    """Page through text by feeding it to another program."""
    import subprocess
    pipe = subprocess.Popen(cmd, stdin=subprocess.PIPE, shell=True).stdin
    try:
        pipe.write(text)
        pipe.close()
    except IOError:
        pass # Ignore broken pipes caused by quitting the pager program.
</snippet></ROW><ROW><id>17435016</id><snippet>strace(1)</snippet></ROW><ROW><id>17435058</id><snippet>re.compile('SRR.*?\d{1,3}', re.DOTALL)
</snippet></ROW><ROW><id>17435058</id><snippet>\d</snippet></ROW><ROW><id>17435058</id><snippet>{1,3}</snippet></ROW><ROW><id>17435058</id><snippet>SRR</snippet></ROW><ROW><id>17435058</id><snippet>re.compile('SRR.*?(?:[1-9]|[1-9]\d|1\d{2}|200)', re.DOTALL)
</snippet></ROW><ROW><id>17435058</id><snippet>\b</snippet></ROW><ROW><id>17435058</id><snippet>re.compile('SRR.*?\d{1,3}\b', re.DOTALL)
</snippet></ROW><ROW><id>17435058</id><snippet>length=</snippet></ROW><ROW><id>17435058</id><snippet>re.compile('SRR.*?length=(?:[1-9]|[1-9]\d|1\d{2}|200)', re.DOTALL)
</snippet></ROW><ROW><id>17435116</id><snippet>export test1
</snippet></ROW><ROW><id>17435116</id><snippet>import os
print os.environ["test1"]
</snippet></ROW><ROW><id>17435247</id><snippet>sleep(5)
</snippet></ROW><ROW><id>17435433</id><snippet>print a[0][0:2]
</snippet></ROW><ROW><id>17435433</id><snippet>print [d[0] for d in a]
</snippet></ROW><ROW><id>17435524</id><snippet>if</snippet></ROW><ROW><id>17435524</id><snippet>(n == n[::-1]) and (n[::-1] is True)
</snippet></ROW><ROW><id>17435524</id><snippet>False</snippet></ROW><ROW><id>17435524</id><snippet>'0' is True</snippet></ROW><ROW><id>17435524</id><snippet>True</snippet></ROW><ROW><id>17435524</id><snippet>&gt;&gt;&gt; n = str(0)
&gt;&gt;&gt; n[::-1] == n is True
False
&gt;&gt;&gt; n[::-1] == n 
True
</snippet></ROW><ROW><id>17435524</id><snippet>x &lt; y &lt;= z</snippet></ROW><ROW><id>17435524</id><snippet>x &lt; y and y &lt;= z</snippet></ROW><ROW><id>17435524</id><snippet>y</snippet></ROW><ROW><id>17435524</id><snippet>z</snippet></ROW><ROW><id>17435524</id><snippet>x &lt; y</snippet></ROW><ROW><id>17435524</id><snippet>is True</snippet></ROW><ROW><id>17435524</id><snippet>if</snippet></ROW><ROW><id>17435524</id><snippet>if n == n[::-1]:
</snippet></ROW><ROW><id>17435524</id><snippet>n</snippet></ROW><ROW><id>17435524</id><snippet>'0'</snippet></ROW><ROW><id>17435524</id><snippet>for</snippet></ROW><ROW><id>17435524</id><snippet>xrange(1000)</snippet></ROW><ROW><id>17435524</id><snippet>n</snippet></ROW><ROW><id>17435524</id><snippet>def palin_generator():
    """Generates palindromic numbers."""

    palindromes=[]

    for count in xrange(10000):
        n = str(count)
        if n == n[::-1]:
            palindromes.append(n)

    print palindromes  
</snippet></ROW><ROW><id>17435524</id><snippet>&gt;&gt;&gt; palin_generator()
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '11', '22', '33', '44', '55', '66', '77', '88', '99', '101', '111', '121', '131', '141', '151', '161', '171', '181', '191', '202', '212', '222', '232', '242', '252', '262', '272', '282', '292', '303', '313', '323', '333', '343', '353', '363', '373', '383', '393', '404', '414', '424', '434', '444', '454', '464', '474', '484', '494', '505', '515', '525', '535', '545', '555', '565', '575', '585', '595', '606', '616', '626', '636', '646', '656', '666', '676', '686', '696', '707', '717', '727', '737', '747', '757', '767', '777', '787', '797', '808', '818', '828', '838', '848', '858', '868', '878', '888', '898', '909', '919', '929', '939', '949', '959', '969', '979', '989', '999', '1001', '1111', '1221', '1331', '1441', '1551', '1661', '1771', '1881', '1991', '2002', '2112', '2222', '2332', '2442', '2552', '2662', '2772', '2882', '2992', '3003', '3113', '3223', '3333', '3443', '3553', '3663', '3773', '3883', '3993', '4004', '4114', '4224', '4334', '4444', '4554', '4664', '4774', '4884', '4994', '5005', '5115', '5225', '5335', '5445', '5555', '5665', '5775', '5885', '5995', '6006', '6116', '6226', '6336', '6446', '6556', '6666', '6776', '6886', '6996', '7007', '7117', '7227', '7337', '7447', '7557', '7667', '7777', '7887', '7997', '8008', '8118', '8228', '8338', '8448', '8558', '8668', '8778', '8888', '8998', '9009', '9119', '9229', '9339', '9449', '9559', '9669', '9779', '9889', '9999']
</snippet></ROW><ROW><id>17435621</id><snippet>X-Sendfile</snippet></ROW><ROW><id>17435621</id><snippet>sendfile</snippet></ROW><ROW><id>17435621</id><snippet>run</snippet></ROW><ROW><id>17435621</id><snippet>run_simple</snippet></ROW><ROW><id>17435621</id><snippet>flaskapp.run(host='0.0.0.0', debug=True, static_files={'/static': '/path/to/static'})
</snippet></ROW><ROW><id>17435916</id><snippet>def main():
    #do stuff
    f()
    g()
    ...
</snippet></ROW><ROW><id>17435916</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17435926</id><snippet>applicationDidFinishLaunching_</snippet></ROW><ROW><id>17435926</id><snippet>setTitle_</snippet></ROW><ROW><id>17435926</id><snippet>performSelectorOnMainThread_withObject_waitUntilDone_</snippet></ROW><ROW><id>17435926</id><snippet>class MyApplicationAppDelegate(NSObject):

    var = 1

    def background_work(self):
        global ngmail

        while var == 1 :  
            ngmail2 = gmail();
            if  ngmail2 !=ngmail:
                self.statusItem.setTitle_("loading")
                self.statusItem.performSelectorOnMainThread_withObject_waitUntilDone_('setTitle:', ngmail2, False)
            time.sleep(6)

    def applicationDidFinishLaunching_(self, sender):
        NSLog("Application did finish launching.")
        self.statusItem = NSStatusBar.systemStatusBar().statusItemWithLength_(NSVariableStatusItemLength)
        self.background_worker = threading.Thread(target=self.background_work)
        self.background_worker.start()    
</snippet></ROW><ROW><id>17435926</id><snippet>setTitle:</snippet></ROW><ROW><id>17435926</id><snippet>setTitle_</snippet></ROW><ROW><id>17435926</id><snippet>var</snippet></ROW><ROW><id>17435926</id><snippet>sleep(6)</snippet></ROW><ROW><id>17435926</id><snippet>var</snippet></ROW><ROW><id>17435926</id><snippet>Condition</snippet></ROW><ROW><id>17435926</id><snippet>class MyApplicationAppDelegate(NSObject):

    var = 1
    condition = threading.Condition()

    def background_work(self):
        global ngmail

        with condition:
            while var == 1:
                ngmail2 = gmail();
                if ngmail2 != ngmail:
                    self.statusItem.performSelectorOnMainThread_withObject_waitUntilDone_('setTitle:', ngmail2, False)
                condition.wait(6)

    @classmethod
    def shutdown_background_threads(cls):
        with condition:
            var = 0
            condition.notify_all()
</snippet></ROW><ROW><id>17435926</id><snippet>var</snippet></ROW><ROW><id>17436194</id><snippet>url_for</snippet></ROW><ROW><id>17436194</id><snippet>{{ url_for('static', filename='css/main.css') }}
</snippet></ROW><ROW><id>17436194</id><snippet>filename='...')</snippet></ROW><ROW><id>17436194</id><snippet>external=True 
</snippet></ROW><ROW><id>17436237</id><snippet>cd dir-a &amp;&amp; getfacl -R . &gt; /permissions.acl
cd dir-b &amp;&amp; setfacl --restore=/permissions.acl
</snippet></ROW><ROW><id>17436302</id><snippet>&gt;&gt;&gt; FWHM, volume, key, numTrials, min_timing = 'a', 'b', 'c', 'd', 'e'
&gt;&gt;&gt; print('matlab -nodisplay -nosplash -r \"processFates;dlmwrite(\'' + FWHM + ' ' + volume      + ' ' + key + ' ' + str(numTrials) + '\", min_timing)\"')
matlab -nodisplay -nosplash -r "processFates;dlmwrite('a b c d", min_timing)"
</snippet></ROW><ROW><id>17436302</id><snippet>d</snippet></ROW><ROW><id>17436302</id><snippet>min_timing</snippet></ROW><ROW><id>17436302</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17436302</id><snippet>os.system</snippet></ROW><ROW><id>17436302</id><snippet>command = "processFates; dlmwrite('%s %s %s %s', %s)" % (FWHM, volume, key, numTrials, min_timing)
proc = subprocess.Popen(['matlab', '-nodisplay', '-nosplash', '-r', command])
</snippet></ROW><ROW><id>17436444</id><snippet>for i in length:
    for j in (length -1):
</snippet></ROW><ROW><id>17436444</id><snippet>for i in range(length):
    for j in range(length -1):
</snippet></ROW><ROW><id>17436444</id><snippet>range()</snippet></ROW><ROW><id>17436444</id><snippet>length</snippet></ROW><ROW><id>17436444</id><snippet>vals[j], vals[j+1] = vals[j+1], vals[j]
</snippet></ROW><ROW><id>17436444</id><snippet>i = 0</snippet></ROW><ROW><id>17436444</id><snippet>j = 0</snippet></ROW><ROW><id>17436444</id><snippet>temp = 0</snippet></ROW><ROW><id>17436578</id><snippet>for</snippet></ROW><ROW><id>17436578</id><snippet>map</snippet></ROW><ROW><id>17436578</id><snippet>page_titles = raw_input("Enter a list of page titles separated by commas: ").split(",")
</snippet></ROW><ROW><id>17436578</id><snippet>for page_title in page_titles:
    # All the stuff that has to be done for each single title goes here.
    # I'm not entirely clear on what you're doing, but I think that's this part:
    parent = None
    if selection is not None:
        parent = feed.entry[selection - 1]

    new_entry = self.client.CreatePage(
        'webpage', page_title, '&lt;b&gt;Your html content&lt;/b&gt;',
        parent=parent)
    if new_entry.GetAlternateLink():
        print 'Created. View it at: %s' % new_entry.GetAlternateLink().href
</snippet></ROW><ROW><id>17436662</id><snippet>datetime.today()</snippet></ROW><ROW><id>17436662</id><snippet>def get_start_end_time_for(user, year, month):
    today = get_today()
    ...

def get_today():
    return datetime.today()
</snippet></ROW><ROW><id>17436662</id><snippet>test.py</snippet></ROW><ROW><id>17436662</id><snippet>getToday()</snippet></ROW><ROW><id>17436662</id><snippet>@patch('get_today')
def test_get_start_end_time_for(user, year, month, get_today_mock):
    get_today_mock.return_value = #whatever date you want to use for your test
</snippet></ROW><ROW><id>17436663</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17436663</id><snippet>lxml</snippet></ROW><ROW><id>17436663</id><snippet>soupparser</snippet></ROW><ROW><id>17436663</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17436663</id><snippet>urllib2</snippet></ROW><ROW><id>17436663</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17436663</id><snippet>urllib2</snippet></ROW><ROW><id>17436663</id><snippet>urllib2</snippet></ROW><ROW><id>17436663</id><snippet>urllib2</snippet></ROW><ROW><id>17436756</id><snippet>intermediate = some.long.statement
multiline = intermediate.with.multiline(obj.runtime_attr)
more = multiline.more()
</snippet></ROW><ROW><id>17436756</id><snippet>some.long.statement.with.multiline(
    obj.runtime_attr).more()
</snippet></ROW><ROW><id>17436756</id><snippet>(some.long.statement.
 with.multiline(obj.runtime_attr).more())
</snippet></ROW><ROW><id>17436999</id><snippet>nums = [1, 2, 3, 4]
newarray = sum(zip(reversed(nums), nums), ())[:len(nums)]

&gt;&gt;&gt; print(newarray)
(4, 1, 3, 2)
</snippet></ROW><ROW><id>17436999</id><snippet>&gt;&gt;&gt; list(reversed(nums))
[4, 3, 2, 1]
</snippet></ROW><ROW><id>17436999</id><snippet>&gt;&gt;&gt; list(zip([4, 3, 2, 1], [1, 2, 3, 4]))
[(4, 1), (3, 2), (2, 3), (1, 4)]
</snippet></ROW><ROW><id>17436999</id><snippet>&gt;&gt;&gt; (4, 1) + (3, 2) + (2, 3) + (1, 4)
(4, 1, 3, 2, 2, 3, 1, 4)
</snippet></ROW><ROW><id>17436999</id><snippet>sum()</snippet></ROW><ROW><id>17436999</id><snippet>()</snippet></ROW><ROW><id>17436999</id><snippet>&gt;&gt;&gt; sum([(4, 1), (3, 2), (2, 3), (1, 4)], ())
(4, 1, 3, 2, 2, 3, 1, 4)
</snippet></ROW><ROW><id>17436999</id><snippet>&gt;&gt;&gt; (4, 1, 3, 2, 2, 3, 1, 4)[:len(nums)]
(4, 1, 3, 2)
</snippet></ROW><ROW><id>17436999</id><snippet>from itertools import chain, islice
a = list(islice(chain.from_iterable(zip(nums, reversed(nums))), len(nums)))
</snippet></ROW><ROW><id>17437153</id><snippet>findall</snippet></ROW><ROW><id>17437153</id><snippet>elem = tree.findall('bbox')
</snippet></ROW><ROW><id>17437153</id><snippet>elem</snippet></ROW><ROW><id>17437153</id><snippet>Element</snippet></ROW><ROW><id>17437153</id><snippet>elem.txt = '40.5,41.5,-12.0,-1.2'
</snippet></ROW><ROW><id>17437153</id><snippet>AttributeError: 'list' object has no attribute 'txt'
</snippet></ROW><ROW><id>17437153</id><snippet>elems = tree.findall('bbox')
for elem in elems:
    elem.txt = '40.5,41.5,-12.0,-1.2'
</snippet></ROW><ROW><id>17437231</id><snippet>return</snippet></ROW><ROW><id>17437231</id><snippet>def rec_mult(x, y, tot=0, inc=0):
    if int(x) ==  0:
        return tot
    else:
        x = str(x)
        tot += int(x[(-1+inc):]) * y
        x = x[:(-1+inc)] + "0"; inc -= 1
        return rec_mult(x, y, tot, inc)  # &lt;-- return here

print rec_mult(2, 10)  # 20
</snippet></ROW><ROW><id>17437486</id><snippet>virtualenv -p C:\Python33\python.exe venv
</snippet></ROW><ROW><id>17437486</id><snippet>python hello_world.py
</snippet></ROW><ROW><id>17437519</id><snippet>or_</snippet></ROW><ROW><id>17437519</id><snippet>and_</snippet></ROW><ROW><id>17437519</id><snippet>or_(*or_args)</snippet></ROW><ROW><id>17437519</id><snippet># First I split each term in the scope list.
scope_list = [term.split() for term in scope_list]
# Then the query is built.
or_args = [and_(
    my_table.product == scope[0], 
    my_table.release.in_(scope[1:])) for scope in scope_list]
results = session.query(my_table).filter(or_(*or_args)).all()
</snippet></ROW><ROW><id>17437600</id><snippet>.pyw</snippet></ROW><ROW><id>17437600</id><snippet>.pyc</snippet></ROW><ROW><id>17437687</id><snippet>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;
#include &lt;boost/math/special_functions/binomial.hpp&gt;
#include &lt;boost/numeric/conversion/cast.hpp&gt;

using namespace std;

vector&lt;vector&lt;size_t&gt;&gt; gen_matrix(unsigned int n, unsigned int r)
{
    vector&lt;vector&lt;size_t&gt;&gt; res;
    if(r &lt; 1) return res;
    // reserve memory space
    // this will throw positive_overflow if size is too big to be represented as size_t
    // this can also throw out_of_memory if this is size_t-representable but memory is too small.
    double result_size = boost::math::binomial_coefficient&lt;double&gt;(n + r - 1, r - 1);
    res.reserve(boost::numeric_cast&lt;size_t&gt;(result_size));
    vector&lt;size_t&gt; current(r, 0);
    current.front() = n;
    res.push_back(current);
    vector&lt;size_t&gt;::iterator inc = next(current.begin()); // what we increment
    while(inc != current.end())
    {
        while(current.front() != 0)
        {
            (*inc)++;
            current.front()--;
            res.push_back(current);
            while(prev(inc) != current.begin())
                inc--;
        }
        swap(current.front(), *inc++);
    }
    return move(res);
}

int main()
{
    auto r = gen_matrix(6, 4);
    for(auto v : r)
    {
        copy(v.begin(), v.end(), ostream_iterator&lt;int&gt;(cout, ", "));
        cout &lt;&lt; endl;
    }
}
</snippet></ROW><ROW><id>17437687</id><snippet>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;
#include &lt;stdexcept&gt;
#include &lt;boost/math/special_functions/binomial.hpp&gt;
#include &lt;boost/numeric/conversion/cast.hpp&gt;


struct sum_list_generator
{
    typedef vector&lt;unsigned int&gt; result_type;

    sum_list_generator(unsigned int n, unsigned int r):
        current(r, 0),
        inc(current.begin())
    {
        if(inc != current.end()) *inc++ = n;
    }

    result_type operator()()
    {
        if(inc == current.end())
            throw out_of_range("end of iteration");
        result_type res = current;
        if(current.front() == 0)
            swap(current.front(), *inc++);
        if(inc != current.end())
        {
            (*inc)++;
            current.front()--;
            if(current.front() != 0)
                while(prev(inc) != current.begin())
                    inc--;
        }
        return move(res);
    }

    // helper function : number of outputed vectors
    static size_t count(unsigned int n, unsigned int r)
    {
        return boost::numeric_cast&lt;size_t&gt;(
            boost::math::binomial_coefficient&lt;double&gt;(n + r - 1, r - 1)
            );
    }

    private:
        result_type current;
        result_type::iterator inc;
};

int main()
{
    sum_list_generator g(6, 4);
    try
    {
        while(true)
        {
            auto v = g();
            copy(v.begin(), v.end(), ostream_iterator&lt;int&gt;(cout, ", "));
            cout &lt;&lt; endl;
        }
    }
    catch(out_of_range const&amp;) {}
}
</snippet></ROW><ROW><id>17437687</id><snippet>count()</snippet></ROW><ROW><id>17437777</id><snippet>multiprocessing</snippet></ROW><ROW><id>17437777</id><snippet>from sys import *
from subprocess import *
import multiprocessing

class ProcessNAS(multiprocessing.Process):
    def __init__ (self, name):
        self.name_ = name
        self.status = False
        self.process = None
        super(ProcessNAS, self).__init__(target=self.StartCheck)

    def StartCheck(self):
        print "Checking for NAS..."
        stdout.flush()
        self.process = Popen( ["dns-sd", "-B", "_ssh._tcp", "."], stdout=PIPE )

        while True:
            line = self.process.stdout.readline()[:-1]
            print line
            if "Add" in line and self.name_ in line:
                self.status = True
                print "NAS '" + self.name_ + "' is available."
            elif "Rmv" in line and self.name_ in line:
                self.status = False
                print "NAS '" + self.name_ + "' is unavailable."

newCheckNAS = ProcessNAS("Drobo-FS")
newCheckNAS.start()  # &lt;-- instead of StartCheck(), call start()

import time
time.sleep(4)
newCheckNAS.terminate()  # &lt;-- now have two processes - able to kill the child
</snippet></ROW><ROW><id>17437827</id><snippet>a</snippet></ROW><ROW><id>17437827</id><snippet>%if "courseware" in request.url:
&lt;a href="${request.url[:request.url.find('courseware')+len('courseware')+1]+datum['url']}"&gt;
%else:
    &lt;a href="${request.host + '/courses/' + datum['org'] + '/' + datum['course_ids'] + '/#/courseware/' + datum['url']}"&gt;
%endif
</snippet></ROW><ROW><id>17437827</id><snippet>&lt;%def name="courseware_link(datum)"&gt;
    &lt;%    
    if "courseware" in request.url:
        url = request.url[:request.url.find("courseware")+len("courseware")+1]
        url += datum["url"]
    else:
        url = request.host + "/courses/" + datum["org"] + "/"
        url += datum["course_ids"] + "/#/courseware/" + datum["url"]
    %&gt;
    &lt;a href="${url}"&gt;
&lt;/%def&gt;
</snippet></ROW><ROW><id>17437860</id><snippet>myenemy = Enemy()
myenemy.Dragon()
</snippet></ROW><ROW><id>17437860</id><snippet>self.enemy</snippet></ROW><ROW><id>17437860</id><snippet>self.enemy = Enemy.Dragon(self)</snippet></ROW><ROW><id>17437860</id><snippet>self.enemy = self.enemy.Dragon(self)</snippet></ROW><ROW><id>17437860</id><snippet>Commands = {'explore': Player.explore}</snippet></ROW><ROW><id>17437860</id><snippet>Commands = {'explore': p.explore}</snippet></ROW><ROW><id>17437860</id><snippet>p</snippet></ROW><ROW><id>17437860</id><snippet>Dragon</snippet></ROW><ROW><id>17437860</id><snippet>enemy = m.Dragon</snippet></ROW><ROW><id>17437860</id><snippet>enemy.name</snippet></ROW><ROW><id>17437860</id><snippet>enemy</snippet></ROW><ROW><id>17437860</id><snippet>class Dragon:
    self.name = "Dragon"
    self.health = 20

class Goblin:
    name = "Goblin"
    health = 5
</snippet></ROW><ROW><id>17437885</id><snippet>einsum</snippet></ROW><ROW><id>17437885</id><snippet>&gt;&gt;&gt; a = np.random.randint(0, 10, (3,3))
&gt;&gt;&gt; b = np.random.randint(0, 10, (3,3))
&gt;&gt;&gt; a
array([[9, 2, 8],
       [5, 4, 0],
       [8, 0, 6]])
&gt;&gt;&gt; b
array([[5, 5, 0],
       [3, 5, 5],
       [9, 4, 3]])
&gt;&gt;&gt; a.dot(b)
array([[123,  87,  34],
       [ 37,  45,  20],
       [ 94,  64,  18]])
&gt;&gt;&gt; np.diagonal(a.dot(b))
array([123,  45,  18])
&gt;&gt;&gt; np.einsum('ij,ji-&gt;i', a,b)
array([123,  45,  18])
</snippet></ROW><ROW><id>17437885</id><snippet>&gt;&gt;&gt; a = np.random.randint(0, 10, (1000,1000))
&gt;&gt;&gt; b = np.random.randint(0, 10, (1000,1000))
&gt;&gt;&gt; %timeit np.diagonal(a.dot(b))
1 loops, best of 3: 7.04 s per loop
&gt;&gt;&gt; %timeit np.einsum('ij,ji-&gt;i', a, b)
100 loops, best of 3: 7.49 ms per loop
</snippet></ROW><ROW><id>17437885</id><snippet>ii,ii-&gt;i</snippet></ROW><ROW><id>17437885</id><snippet>einsum</snippet></ROW><ROW><id>17437982</id><snippet>LiveServerTestCase</snippet></ROW><ROW><id>17438088</id><snippet>mfrac</snippet></ROW><ROW><id>17438088</id><snippet>mmlinput = "&lt;math&gt; &lt;mrow&gt; &lt;mfrac&gt; &lt;mrow&gt; &lt;mn&gt;3&lt;/mn&gt; &lt;/mrow&gt; &lt;mrow&gt; &lt;mn&gt;5&lt;/mn&gt; &lt;/mrow&gt; &lt;/mfrac&gt; &lt;/mrow&gt; &lt;/math&gt;"

def parseMML(mmlinput):
    from lxml import etree
    from StringIO import *
    from lxml import objectify
    exppy=[]
    events = ("start", "end")
    level = 0
    context = etree.iterparse(StringIO(mmlinput),events=events)
    for action, elem in context:
        if (action=='start') and (elem.tag=='mfrac'):
            level += 1
            mmlaux=etree.tostring(elem[0])
            exppy+=parseMML(mmlaux)
            exppy+='/'
            mmlaux=etree.tostring(elem[1])
            exppy+=parseMML(mmlaux)
        if (action=='end') and (elem.tag=='mfrac'):
            level -= 1
        if level:
            continue
        if (action=='start') and (elem.tag=='mrow'):
            exppy+='('
        if (action=='end') and (elem.tag=='mrow'):
            exppy+=')'
        if action=='start' and elem.tag=='mn': #this is a number
            exppy+=elem.text
    return (exppy)
</snippet></ROW><ROW><id>17438088</id><snippet>elem.tag</snippet></ROW><ROW><id>17438088</id><snippet>+=</snippet></ROW><ROW><id>17438088</id><snippet>+</snippet></ROW><ROW><id>17438088</id><snippet>extend</snippet></ROW><ROW><id>17438088</id><snippet>&gt;&gt;&gt; lst = []
&gt;&gt;&gt; lst += 'spam'
&gt;&gt;&gt; lst
['s', 'p', 'a', 'm']
</snippet></ROW><ROW><id>17438193</id><snippet>ftp.storlines("STOR " + filename, open(filename, 'r'))
</snippet></ROW><ROW><id>17438351</id><snippet>B.py</snippet></ROW><ROW><id>17438351</id><snippet>foo()</snippet></ROW><ROW><id>17438351</id><snippet>var = 0

def foo():
    global var
    #use var here
</snippet></ROW><ROW><id>17438351</id><snippet>foo()</snippet></ROW><ROW><id>17438351</id><snippet>foo.var</snippet></ROW><ROW><id>17438351</id><snippet>def foo():
    'use foo.var here'
    # things

foo.var = 0
</snippet></ROW><ROW><id>17438405</id><snippet>id(MainClass)</snippet></ROW><ROW><id>17438405</id><snippet>FileA</snippet></ROW><ROW><id>17438405</id><snippet>__init__</snippet></ROW><ROW><id>17438405</id><snippet>FileB</snippet></ROW><ROW><id>17438470</id><snippet>from bs4 import BeautifulSoup

doc = ...
soup = BeautifulSoup(doc, "xml")  # Directs bs to use lxml
</snippet></ROW><ROW><id>17438470</id><snippet>content:encoded</snippet></ROW><ROW><id>17438470</id><snippet>encoded</snippet></ROW><ROW><id>17438470</id><snippet>&gt;&gt;&gt; print soup
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;item&gt;
&lt;title&gt;Foobartitle&lt;/title&gt;
&lt;link&gt;http://www.acme.com/blah/blah.html&lt;/link&gt;
&lt;category&gt;mycategory&lt;/category&gt;
&lt;description&gt;The quick brown fox jumps over the lazy dog&lt;/description&gt;
&lt;encoded&gt;
        &lt;p&gt;&lt;img class="feature" src="http://www.acme.com/images/image.jpg" alt="" /&gt;&lt;/p&gt;
    &lt;/encoded&gt;
&lt;/item&gt;
</snippet></ROW><ROW><id>17438470</id><snippet>for encoded_content in soup.findAll("encoded"):
    for child in encoded_content.children:
        print child
</snippet></ROW><ROW><id>17438470</id><snippet>&lt;p&gt;&lt;img class="feature" src="http://www.acme.com/images/image.jpg" alt="" /&gt;&lt;/p&gt;</snippet></ROW><ROW><id>17438470</id><snippet>bs4.element.NavigableString</snippet></ROW><ROW><id>17438494</id><snippet>raw_input()</snippet></ROW><ROW><id>17438494</id><snippet>input()</snippet></ROW><ROW><id>17438494</id><snippet>print</snippet></ROW><ROW><id>17438494</id><snippet>print("Well, {0}, I am thinking of a number between 1 and 20")
</snippet></ROW><ROW><id>17438511</id><snippet>groupby</snippet></ROW><ROW><id>17438511</id><snippet>apply</snippet></ROW><ROW><id>17438511</id><snippet>reset_index</snippet></ROW><ROW><id>17438511</id><snippet>unstack</snippet></ROW><ROW><id>17438511</id><snippet>import pandas as pd
s = pd.Series(range(10,17), index=['a','a','b','b','c','c','c'])
df = s.groupby(level=0).apply(pd.Series.reset_index, drop=True).unstack(0)
print df
</snippet></ROW><ROW><id>17438511</id><snippet>   a   b   c
0  10  12  14
1  11  13  15
2 NaN NaN  16
</snippet></ROW><ROW><id>17438524</id><snippet>import Tkinter as tk
import TkMessageBox as messagebox

board = [ [None]*10 for _ in range(10) ]

counter = 0
root = tk.Tk()

def check_board():
    freespaces = 0
    redspaces = 0
    greenspaces = 0
    for i,row in enumerate(board):
        for j,column in enumerate(row):
            if board[i][j] == "red":
                redspaces += 1
            elif board[i][j] == "green":
                greenspaces += 1
            elif board[i][j] == None:
                freespaces += 1

    if freespaces == 0:
        if greenspaces &gt; redspaces:
            winner = "green"
        elif greenspaces &lt; redspaces:
            winner = "red"
        else:
            winner = "draw"

        if winner != "draw":
            messagebox.showinfo("Game Over!",winner+" wins!")
        else:
            messagebox.showinfo("Game Over!","The game was a draw!")




def on_click(i,j,event):
    global counter
    if counter &lt; 100:
        if board[i][j] == None:
            color = "green" if counter%2 else "red"
            enemycolor = "red" if counter%2 else "green"
            event.widget.config(bg=color)
            board[i][j] = color
            for k in range(-1,2):
                for l in range(-1,2):
                    try:
                        if board[i+k][j+l] == enemycolor:
                            board[i+k][j+l] = color
                    except IndexError:
                        pass
            counter += 1
            global gameframe
            gameframe.destroy()
            redraw()
            root.wm_title(enemycolor+"'s turn")
        else:
            messagebox.showinfo("Alert","This square is already occupied!")
        check_board()


def redraw():
    global gameframe
    gameframe = tk.Frame(root)
    gameframe.pack()

    for i,row in enumerate(board):

        for j,column in enumerate(row):
            name = str(i)+str(j)
            L = tk.Label(gameframe,text='    ',bg= "grey" if board[i][j] == None else board[i][j])
            L.grid(row=i,column=j,padx='3',pady='3')
            L.bind('&lt;Button-1&gt;',lambda e,i=i,j=j:on_click(i,j,e))


redraw()
root.mainloop()
</snippet></ROW><ROW><id>17438524</id><snippet>global counter
whosturn = "Green" if counter%2 else "Red"
turnLbl = tk.Label(gameframe,text=color+"'s Turn")
turnLbl.grid(row=11,column = 0,columnspan = 10)
</snippet></ROW><ROW><id>17438730</id><snippet>Text</snippet></ROW><ROW><id>17438730</id><snippet>Listbox</snippet></ROW><ROW><id>17438730</id><snippet>Text</snippet></ROW><ROW><id>17438730</id><snippet>wrap</snippet></ROW><ROW><id>17438730</id><snippet>from Tkinter import *

root = Tk()
root.title("Help")

scrollbar = Scrollbar(root)
scrollbar.pack(side=RIGHT, fill=Y)

help_message = 'This is the help menu. Please scroll through the menu to find the answer to your question'

txt = Text(root, wrap=WORD) # wrap=CHAR, wrap=NONE
txt.pack(expand=1, fill=BOTH)
txt.insert(END, help_message)

txt.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=txt.yview)

mainloop()
</snippet></ROW><ROW><id>17438781</id><snippet>Roster</snippet></ROW><ROW><id>17438904</id><snippet>Builder.load_string()</snippet></ROW><ROW><id>17438904</id><snippet>InputTexts</snippet></ROW><ROW><id>17438904</id><snippet>Sum</snippet></ROW><ROW><id>17438904</id><snippet>Product</snippet></ROW><ROW><id>17438904</id><snippet>from kivy.app import App
from kivy.lang import Builder
from kivy.uix.floatlayout import FloatLayout

Builder.load_string("""
&lt;Calc&gt;:
    # This are attributes of the class Calc now
    a: _a
    b: _b
    result: _result
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'top'
        ScreenManager:
            size_hint: 1, .9
            id: _screen_manager
            Screen:
                name: 'screen1'
                GridLayout:
                    cols:1
                    TextInput:
                        id: _a
                        text: '3'
                    TextInput:
                        id: _b
                        text: '5'
                    Label:
                        id: _result
                    Button:
                        text: 'sum'
                        # You can do the opertion directly
                        on_press: _result.text = str(int(_a.text) + int(_b.text))
                    Button:
                        text: 'product'
                        # Or you can call a method from the root class (instance of calc)
                        on_press: root.product(*args)
            Screen:
                name: 'screen2'
                Label: 
                    text: 'The second screen'
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'bottom'
        BoxLayout:
            orientation: 'horizontal'
            size_hint: 1, .1
            Button:
                text: 'Go to Screen 1'
                on_press: _screen_manager.current = 'screen1'
            Button:
                text: 'Go to Screen 2'
                on_press: _screen_manager.current = 'screen2'""")

class Calc(FloatLayout):
    # define the multiplication of a function
    def product(self, instance):
        # self.result, self.a and self.b where defined explicitely in the kv
        self.result.text = str(int(self.a.text) * int(self.b.text))

class TestApp(App):
    def build(self):
        return Calc()

if __name__ == '__main__':
    TestApp().run()
</snippet></ROW><ROW><id>17438932</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>17438932</id><snippet>.decode('string_escape')</snippet></ROW><ROW><id>17438957</id><snippet>%o</snippet></ROW><ROW><id>17438957</id><snippet>%o</snippet></ROW><ROW><id>17438957</id><snippet>&gt;&gt;&gt; print "%o" % 011
11
&gt;&gt;&gt; print "%o" % 8
10 # Because 010 == 8
</snippet></ROW><ROW><id>17438998</id><snippet>range(0, len(a), n)</snippet></ROW><ROW><id>17438998</id><snippet>a[i:i+n]</snippet></ROW><ROW><id>17438998</id><snippet>def group(a, n):
    return [tuple(a[i:i+n]) for i in range(0, len(a), n)]


print group([1, 2, 3, 4, 5, 6], 2)
# [(1, 2), (3, 4), (5, 6)]

print group([1, 2, 3, 4, 5, 6], 3)
# [(1, 2, 3), (4, 5, 6)]

print group([1, 2, 3, 4, 5, 6, 7, 8], 4)
# [(1, 2, 3, 4), (5, 6, 7, 8)]
</snippet></ROW><ROW><id>17439159</id><snippet>pip install</snippet></ROW><ROW><id>17439159</id><snippet>numpy</snippet></ROW><ROW><id>17439159</id><snippet>scipy</snippet></ROW><ROW><id>17439159</id><snippet>easy_install</snippet></ROW><ROW><id>17439159</id><snippet>wget http://www.python.org/ftp/python/2.7.5/Python-2.7.5.tgz
tar -zxvf Python-2.7.5.tgz
mkdir ~/Python-2.7
cd Python-2.7.5
make clean
./configure --help #get to know the options in configure
./configure --help | grep -i ucs $get to know the UCS options
./configure --prefix=/home/org/username/Python-2.7 #install Python in the Python-2.7 directory
make
make install
</snippet></ROW><ROW><id>17439159</id><snippet>cd virtualenv-1.9.1/
~/Python-2.7/bin/python setup.py install #this installs virtualenv in the new Python directory
cd ..
</snippet></ROW><ROW><id>17439159</id><snippet>mkdir ~/virtualenv-1.9.1/myVE_Python2.7
cd ~/virtualenv-1.9.1/myVE_Python2.7
~/Python-2.7/bin/virtualenv py2.7 --python=/home/org/username/Python-2.7/bin/python2.7
</snippet></ROW><ROW><id>17439159</id><snippet>ls -l virtualenv-1.9.1/myVE_Python2.7/py2.7/bin/
. virtualenv-1.9.1/myVE_Python2.7/py2.7/bin/activate
</snippet></ROW><ROW><id>17439159</id><snippet>ls -l virtualenv-1.9.1/myVE_Python2.7/py2.7/bin/
easy_install -U setuptools
</snippet></ROW><ROW><id>17439159</id><snippet>easy_install numpy
easy_install scipy
ls -l /home/org/username/virtualenv-1.9.1/myVE_Python2.7/py2.7/lib/python2.7/site-packages
</snippet></ROW><ROW><id>17439198</id><snippet>for i in range(10):
    sys.stdout.write("\rCountdown: %d" % i)
    sys.stdout.flush()
    time.sleep(1)
print ''
</snippet></ROW><ROW><id>17439198</id><snippet>print '\n' ,</snippet></ROW><ROW><id>17439513</id><snippet>import datetime
time_string = "17:48:12,98"
t = datetime.datetime.strptime(time_string, "%H:%M:%S,%f")
seconds = 60 * t.minute * t.hour

print (seconds, t.microsecond)
</snippet></ROW><ROW><id>17439554</id><snippet>def unscramble(A_shuf,ind_shuf):
    order = np.lexsort(ind_shuf[::-1])
    return A_shuf.flat[order].reshape(A_shuf.shape)
</snippet></ROW><ROW><id>17439554</id><snippet>numpy.ravel_multi_index</snippet></ROW><ROW><id>17439693</id><snippet>&gt;&gt;&gt; df
              val1  val2  val3
city_id                       
houston,tx       1     2     0
houston,tx       0     0     1
houston,tx       2     1     1
somewhere,ew     4     3     7
</snippet></ROW><ROW><id>17439693</id><snippet>&gt;&gt;&gt; df.groupby(df.index).sum()
              val1  val2  val3
city_id                       
houston,tx       3     3     2
somewhere,ew     4     3     7
</snippet></ROW><ROW><id>17439693</id><snippet>&gt;&gt;&gt; df.reset_index().groupby("city_id").sum()
              val1  val2  val3
city_id                       
houston,tx       3     3     2
somewhere,ew     4     3     7
</snippet></ROW><ROW><id>17439693</id><snippet>city_id</snippet></ROW><ROW><id>17439693</id><snippet>groupby</snippet></ROW><ROW><id>17439693</id><snippet>city_id</snippet></ROW><ROW><id>17439693</id><snippet>DataFrameGroupBy</snippet></ROW><ROW><id>17439693</id><snippet>&gt;&gt;&gt; df.groupby(df.index)
&lt;pandas.core.groupby.DataFrameGroupBy object at 0x1045a1790&gt;
&gt;&gt;&gt; df.groupby(df.index).max()
              val1  val2  val3
city_id                       
houston,tx       2     2     1
somewhere,ew     4     3     7
&gt;&gt;&gt; df.groupby(df.index).mean()
              val1  val2      val3
city_id                           
houston,tx       1     1  0.666667
somewhere,ew     4     3  7.000000
</snippet></ROW><ROW><id>17439817</id><snippet>import os
import sys
import timeit

setup_str = \
'''
from __main__ import setup, handler

setup()
'''
def setup():
    global grid
    grid = [[9 for col in range(25)] for row in range(25)]

    global start
    start = [12, 12]
    grid[start[0]][start[1]] = 0
    global numRips
    numRips = 8

def handler():
    global grid
    global start
    global numRips
    allExpanded = [start]
    expanded = [start]
    num = 1
    for r in range(numRips):
        toExpand = []
        for n in expanded:
            toExpand = toExpand + (getUnvisitedNeighbors(n, allExpanded))
        expanded = []
        for u in toExpand:
            grid[u[0]][u[1]] = num
            expanded.append(u)
            allExpanded.append(u)
        num += 1

def getUnvisitedNeighbors(loc, visitedCells):
    global grid
    x, y = loc[0], loc[1]

    neighbors = [[x - 1, y], [x + 1, y], [x, y - 1], [x, y + 1], \
                 [x - 1, y - 1], [x - 1, y + 1], [x + 1, y - 1], [x + 1, y + 1]]

    f = lambda p: p[0] &gt;=0 and p[0] &lt; len(grid) and \
                    p[1] &gt;= 0 and p[1] &lt; len(grid[0]) and \
                    not p in visitedCells

    unvisitedNeighbors = filter(f, neighbors)

    return unvisitedNeighbors

print timeit.repeat(stmt="handler()", setup=setup_str, repeat=3, number=1)
for i in range(len(grid)):
    print grid[i]
</snippet></ROW><ROW><id>17439817</id><snippet>import os
import sys
import timeit

setup_str = \
'''
from __main__ import setup, handler

setup()
'''

dirs = \
(
    ( - 1,   0),
    ( + 1,   0),
    (   0, - 1),
    (   0, + 1),
    ( - 1, - 1),
    ( - 1, + 1),
    ( + 1, - 1),
    ( + 1, + 1)
)

def setup():
    global grid_max_x
    grid_max_x = 25
    global grid_max_y
    grid_max_y = 25
    global grid
    grid = [[9 for col in range(grid_max_y)] for row in range(grid_max_x)]

    global start
    start = (12, 12)
    grid[start[0]][start[1]] = 0
    global numRips
    numRips = 8

def handler():
    global grid
    global start
    global numRips
    border_expanded = set([start])
    allExpanded = set([start])
    num = 1
    for r in range(numRips):
        toExpand = set([])
        map(lambda x: toExpand.update(x), [(getUnvisitedNeighbors(n, allExpanded)) for n in border_expanded])
        border_expanded = toExpand
        allExpanded.update(toExpand)
        for u in toExpand:
            grid[u[0]][u[1]] = num
        num += 1

def getUnvisitedNeighbors(loc, visitedCells):
    global grid_max_x
    global grid_max_y
    global dirs

    x, y = loc

    neighbors = set([((x + dx) % grid_max_x, (y + dy) % grid_max_y) for (dx, dy) in dirs])

    unvisitedNeighbors = neighbors - visitedCells

    return unvisitedNeighbors

print timeit.repeat(stmt="handler()", setup=setup_str, repeat=3, number=1)
for i in range(len(grid)):
    print grid[i]
</snippet></ROW><ROW><id>17439972</id><snippet>display</snippet></ROW><ROW><id>17439972</id><snippet>div</snippet></ROW><ROW><id>17439972</id><snippet>class ListOfStrings(object):
    def __init__(self, *strings):
        self.strings = strings

    def _repr_html_(self):
        return ''.join( [
           "&lt;span class='listofstr'&gt;%s&lt;/span&gt;" % s
           for s in self.strings
           ])

display(ListOfStrings("hi", "hello", "hello there"))
</snippet></ROW><ROW><id>17440095</id><snippet>/home/guest/virtualenv/django-env/bin/pip install &lt;package&gt;</snippet></ROW><ROW><id>17440095</id><snippet>pip -E</snippet></ROW><ROW><id>17440095</id><snippet>pip -E /home/guest/virtualenv/django-env/
</snippet></ROW><ROW><id>17440272</id><snippet>x[hours - 4:hours]
</snippet></ROW><ROW><id>17440453</id><snippet>query</snippet></ROW><ROW><id>17440453</id><snippet>raw_dataset_1</snippet></ROW><ROW><id>17440453</id><snippet># list containing the number of lines with 0,1,2,3... occurrances of query words.
wordcount = [0,0,0,0,0]    
for line in file("raw_dataset_1").readlines():
    # loop over each query word, see if it occurs in the given line, and just count them. 
    # The bracket inside will create a list of elements (query_word) from your query word list (query)
    # but add only those words which occur in the line (if  query_word in line). [See list comprehension]
    # E.g. if your line contain three query words those three will be in the list.
    # You are not interested in what those words are, so you just take the length of the list (len). 
    # Finally, number_query_words_found is the number of query words present in the current line of text. 
    number_query_words_found = len([query_word for query_word in query if query_word in line])  
    if number_query_words_found&lt;5:
        # increase the line-number by one. The index corresponds to the number of query-words present
        wordcount[number_query_words_found] += 1

print "Number of lines with 2 query words: ", wordcount[2]
print "Number of lines with 3 query words: ", wordcount[3]
</snippet></ROW><ROW><id>17440453</id><snippet>wordcount</snippet></ROW><ROW><id>17440679</id><snippet>&gt;&gt;&gt; [a for b in x for c in b for a in c]
[u'reads_2.fq', u'README.txt']
</snippet></ROW><ROW><id>17440679</id><snippet>compiler</snippet></ROW><ROW><id>17440679</id><snippet>&gt;&gt;&gt; from compiler.ast import flatten
&gt;&gt;&gt; flatten(x)
[u'reads_2.fq', u'README.txt']
</snippet></ROW><ROW><id>17440882</id><snippet>&gt;&gt;&gt; re.findall('(?m)&lt;.*?&gt;',s) # See the ? after .*
['&lt;a&gt;', '&lt;/a&gt;', '&lt;div id="something"&gt;', '&lt;p style="background-color:#f00"&gt;', '&lt;/p&gt;', '&lt;/div&gt;']
</snippet></ROW><ROW><id>17440882</id><snippet>*?</snippet></ROW><ROW><id>17440882</id><snippet>.</snippet></ROW><ROW><id>17440887</id><snippet>with open('MyText.txt', 'r') as f:
  lineArr=f.read().split('\n')
  if 'Sample Text' in lineArr:
    timeTaken = [s for s in lineArr if "Time Taken" in s]
    print timeTaken[0]
</snippet></ROW><ROW><id>17441571</id><snippet>return 1 + solve(number * formula 1)
</snippet></ROW><ROW><id>17441571</id><snippet>result = 1 + solve(number * formula 1)
cache[number] = result
return result
</snippet></ROW><ROW><id>17441806</id><snippet>defaultdict(dict)</snippet></ROW><ROW><id>17441806</id><snippet>dic_response['d']</snippet></ROW><ROW><id>17441806</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>17441806</id><snippet>new_list['DisplayStatusList']</snippet></ROW><ROW><id>17441937</id><snippet>r'^accounts/ ^reset/(?P&lt;uidb36&gt;[0-9A-Za-z]{1,13})-(?P&lt;token&gt;[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$  '
</snippet></ROW><ROW><id>17441937</id><snippet>r'^accounts/reset/(?P&lt;uidb36&gt;[0-9A-Za-z]{1,13})-(?P&lt;token&gt;[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$'
</snippet></ROW><ROW><id>17442046</id><snippet>result</snippet></ROW><ROW><id>17442046</id><snippet>AsyncResult</snippet></ROW><ROW><id>17442046</id><snippet>results will be a list of celery AsyncResult objects that you may ignore, or use to check the status of the email delivery task, or even wait for it to complete if want. You have to enable a result backend and set ignore_result to False in CELERY_EMAIL_TASK_CONFIG if you want to use these. See the Celery docs for more info.</snippet></ROW><ROW><id>17442046</id><snippet>Task is waiting for execution or unknown. Any task id that is not known is implied to be in the pending state</snippet></ROW><ROW><id>17442046</id><snippet>./manage.py celeryd -B
</snippet></ROW><ROW><id>17442114</id><snippet>try</snippet></ROW><ROW><id>17442114</id><snippet>IndexError</snippet></ROW><ROW><id>17442114</id><snippet>pxa[4]</snippet></ROW><ROW><id>17442114</id><snippet>marker_array</snippet></ROW><ROW><id>17442114</id><snippet>for pxa in marker_array:
  try:
    d1[pxa[1]].extend(pxa[:1])
    d2[pxa[1]].extend(pxa[2] + ' ')
    d3[pxa[1]].extend(pxa[3] + ' ')
    d4[pxa[1]].extend(pxa[4] + ' ')
  except IndexError:
    pass
</snippet></ROW><ROW><id>17442114</id><snippet>''.join()</snippet></ROW><ROW><id>17442114</id><snippet>strip()</snippet></ROW><ROW><id>17442114</id><snippet>rstrip()</snippet></ROW><ROW><id>17442114</id><snippet>strip(''.join(d2[x]))</snippet></ROW><ROW><id>17442171</id><snippet>fillPoly()</snippet></ROW><ROW><id>17442171</id><snippet>import cv2
import numpy as np
rect = [[634, 547],[353, 504],[436, -41],[717,   1]]
poly = np.array([rect], dtype=np.int32)
img = np.zeros((800, 800), np.int8)
cv2.fillPoly(img, poly, 255)
imshow(img, cmap="gray")
</snippet></ROW><ROW><id>17442224</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>17442224</id><snippet>USE_TZ</snippet></ROW><ROW><id>17442224</id><snippet>USE_TZ</snippet></ROW><ROW><id>17442224</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>17442224</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>17442224</id><snippet>print datetime.datetime.now()</snippet></ROW><ROW><id>17442224</id><snippet>manage.py shell</snippet></ROW><ROW><id>17442321</id><snippet>"cpt." + arg + ".\d+"</snippet></ROW><ROW><id>17442321</id><snippet>arg</snippet></ROW><ROW><id>17442321</id><snippet>"cpt.133131313"</snippet></ROW><ROW><id>17442321</id><snippet>"cpt.cpt.133131313.\d+"</snippet></ROW><ROW><id>17442321</id><snippet>arg</snippet></ROW><ROW><id>17442321</id><snippet>arg</snippet></ROW><ROW><id>17442321</id><snippet>"......."</snippet></ROW><ROW><id>17442321</id><snippet>cpt.</snippet></ROW><ROW><id>17442321</id><snippet>.d\</snippet></ROW><ROW><id>17442321</id><snippet>"cpt"</snippet></ROW><ROW><id>17442321</id><snippet>.</snippet></ROW><ROW><id>17442321</id><snippet>"cpt\.\d+"
</snippet></ROW><ROW><id>17442321</id><snippet>"cpt."</snippet></ROW><ROW><id>17442321</id><snippet>\.</snippet></ROW><ROW><id>17442321</id><snippet>re.escape()</snippet></ROW><ROW><id>17442429</id><snippet>printTime()</snippet></ROW><ROW><id>17442429</id><snippet>return</snippet></ROW><ROW><id>17442429</id><snippet>None</snippet></ROW><ROW><id>17442429</id><snippet>printTime()</snippet></ROW><ROW><id>17442429</id><snippet>formatTime()</snippet></ROW><ROW><id>17442429</id><snippet>def formatTime(time):
    return '{0.hours}:{0.minutes}:{0.seconds}'.format(time)
</snippet></ROW><ROW><id>17442429</id><snippet>print "total time now is:",formatTime(time)
</snippet></ROW><ROW><id>17442429</id><snippet>str.format()</snippet></ROW><ROW><id>17442429</id><snippet>0</snippet></ROW><ROW><id>17442429</id><snippet>time</snippet></ROW><ROW><id>17442429</id><snippet>def formatTime(time):
    return '{0.hours:02d}:{0.minutes:02d}:{0.seconds:02d}'.format(time)
</snippet></ROW><ROW><id>17442575</id><snippet>import sys
try:
    sudo(...)
except SystemExit():
    print "You should fix this with..." # you can use logging here
    sys.exit()
</snippet></ROW><ROW><id>17442663</id><snippet>mkvirtualenv mypackage</snippet></ROW><ROW><id>17442663</id><snippet>mkvirtualenv --distribute mypackage</snippet></ROW><ROW><id>17442663</id><snippet>https://github.com/user/project/archive/commit.zip</snippet></ROW><ROW><id>17442663</id><snippet>setup.py</snippet></ROW><ROW><id>17442663</id><snippet>install_requires=[],
dependency_links=['https://github.com/chrisglass/xhtml2pdf/archive/28d12fcaafc4c47b13f1f6f42c2bfb73f90cc947.zip',],
</snippet></ROW><ROW><id>17442663</id><snippet>install_requires=['xhtml2pdf',],
dependency_links=['https://github.com/chrisglass/xhtml2pdf/archive/28d12fcaafc4c47b13f1f6f42c2bfb73f90cc947.zip#egg=xhtml2pdf',],
</snippet></ROW><ROW><id>17442663</id><snippet>install_requires=['xhtml2pdf==0.0.5',],
dependency_links=['https://github.com/chrisglass/xhtml2pdf/archive/28d12fcaafc4c47b13f1f6f42c2bfb73f90cc947.zip#egg=xhtml2pdf-0.0.5',],
</snippet></ROW><ROW><id>17442663</id><snippet>install_requires=['xhtml2pdf==0.0.6',],
dependency_links=['https://github.com/chrisglass/xhtml2pdf/archive/28d12fcaafc4c47b13f1f6f42c2bfb73f90cc947.zip#egg=xhtml2pdf-0.0.6',],
</snippet></ROW><ROW><id>17442663</id><snippet>install_requires=['xhtml2pdf&lt;=0.0.6',],
dependency_links=['https://github.com/chrisglass/xhtml2pdf/archive/28d12fcaafc4c47b13f1f6f42c2bfb73f90cc947.zip#egg=xhtml2pdf-0.0.6',],
</snippet></ROW><ROW><id>17442663</id><snippet>requirements.txt</snippet></ROW><ROW><id>17442663</id><snippet>setup.py</snippet></ROW><ROW><id>17442663</id><snippet>https://github.com/chrisglass/xhtml2pdf/archive/28d12fcaafc4c47b13f1f6f42c2bfb73f90cc947.zip#egg=xhtml2pdf-0.0.6</snippet></ROW><ROW><id>17442663</id><snippet>requirements.txt</snippet></ROW><ROW><id>17442663</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>17442670</id><snippet>start_requests</snippet></ROW><ROW><id>17442670</id><snippet>zip</snippet></ROW><ROW><id>17442670</id><snippet>request.meta</snippet></ROW><ROW><id>17442670</id><snippet>from scrapy.http import Request
from scrapy.spider import BaseSpider
from scrapy.selector import XmlXPathSelector
from scrapy.item import Item, Field
import csv


class Road(Item):
    RoadNum = Field()
    RoadName = Field()
    PostNum = Field()


def unicode_csv_reader(utf8_data, dialect=csv.excel, **kwargs):
    csv_reader = csv.reader(utf8_data, dialect=dialect, **kwargs)
    for row in csv_reader:
        yield [unicode(cell, 'utf-8') for cell in row]


class Geospider(BaseSpider):
    name = 'Geospider'
    allowed_domains = ["http://kortforsyningen.kms.dk/"]
    start_urls = []

    def start_requests(self):
        reader = unicode_csv_reader(open('AddressesAndZipcodes.csv'))
        for row in reader:
            address, zip_code = row[:2]
            url = 'http://kortforsyningen.kms.dk/service?ServiceName=geoV&amp;soegemetode=0&amp;vejnavn=%s&amp;kommunepost=%s&amp;format=XML&amp;max_hits=10&amp;login=xxx&amp;password=xxx' % (address, zip_code)

            yield Request(url=url, meta={'zip_code': zip_code})

    def parse(self, response):
        xxs = XmlXPathSelector(response)
        sites = xxs.select('//dokument/forekomst')

        item = Road()
        item['RoadNum'] = sites.select("vejkode/text()").extract()
        item['RoadName'] = sites.select("vejnavn/text()").extract()
        item['PostNum'] = response.meta['zip_code']

        yield item
</snippet></ROW><ROW><id>17442793</id><snippet>_</snippet></ROW><ROW><id>17442793</id><snippet>r, x, x, x = color()
</snippet></ROW><ROW><id>17442793</id><snippet>r, *x = color()
</snippet></ROW><ROW><id>17442793</id><snippet>r = color()[0]
</snippet></ROW><ROW><id>17443140</id><snippet>E2_alt = piecewise(w, [w &lt;= 2*b/hbar, w &gt; 2*b/hbar], [0, E2_func(w, b)])
</snippet></ROW><ROW><id>17443140</id><snippet>[0, E2_func(w, b)]</snippet></ROW><ROW><id>17443140</id><snippet>E2_func(w, b)</snippet></ROW><ROW><id>17443140</id><snippet>E2</snippet></ROW><ROW><id>17443140</id><snippet>lambda</snippet></ROW><ROW><id>17443140</id><snippet>w</snippet></ROW><ROW><id>17443140</id><snippet>E2_alt</snippet></ROW><ROW><id>17443140</id><snippet>E2_func(w, b)[0]</snippet></ROW><ROW><id>17443140</id><snippet>E2_func(w, b)[1]</snippet></ROW><ROW><id>17443140</id><snippet>E2_alt = piecewise(w, [w &lt;= 2*b/hbar, w &gt; 2*b/hbar], [0, E2_func(w, b)[where(w &gt; 2*b/hbar)]])
</snippet></ROW><ROW><id>17443272</id><snippet>df.iloc[1:4,1:4].values</snippet></ROW><ROW><id>17443299</id><snippet>Student</snippet></ROW><ROW><id>17443299</id><snippet>class Student:

    # Constructor
    def __init__(self, name, homework, quizzes, tests):
        self.name = name
        self.homework = homework
        self.quizzes = quizzes
        self.tests = tests

    # Function to return average for this student
    def get_average(self):
        h = average(self.homework)
        ...
        return total_average
</snippet></ROW><ROW><id>17443328</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; samp = """&lt;sitemap xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
...     &lt;loc&gt;http://www.some_page.com/sitemap-page-2010-11.xml&lt;/loc&gt;
...     &lt;lastmod&gt;2011-12-22T15:46:17+00:00&lt;/lastmod&gt;
... &lt;/sitemap&gt;"""
&gt;&gt;&gt; re.findall(r'&lt;loc&gt;(.*)&lt;/loc&gt;', samp)
['http://www.some_page.com/sitemap-page-2010-11.xml']
</snippet></ROW><ROW><id>17443578</id><snippet>final</snippet></ROW><ROW><id>17443578</id><snippet>content</snippet></ROW><ROW><id>17443578</id><snippet>final = np.empty_like(content)
</snippet></ROW><ROW><id>17443578</id><snippet>TypeError: integer argument expected, got float</snippet></ROW><ROW><id>17443578</id><snippet>origin : scalar, optional
    The `origin` parameter controls the placement of the filter.
    Default 0.0.
</snippet></ROW><ROW><id>17443578</id><snippet>origin</snippet></ROW><ROW><id>17443578</id><snippet>import scipy.ndimage as ndimage
import numpy as np

# content = np.genfromtxt('Data.dat')
content = np.asarray(np.arange(750))
weights = np.array([1, 2, 4, 2, 1])
final = np.empty_like(content)
ndimage.convolve1d(content, weights, axis=-1, output=final, mode='reflect', cval=0.0,
                   origin=0
                   # origin=0.0  # This raises TypeError
                   )
print(final)
</snippet></ROW><ROW><id>17443578</id><snippet>origin=0.0</snippet></ROW><ROW><id>17443578</id><snippet>with open("Data.dat", "r+") as f:
    content = f.readlines()
    content = [s.strip() for s in content]
    content = np.asarray(content)
</snippet></ROW><ROW><id>17443578</id><snippet>content</snippet></ROW><ROW><id>17443578</id><snippet>content = np.genfromtxt('Data.dat')
</snippet></ROW><ROW><id>17443664</id><snippet>solr = Solr(base_url='http://localhost:8080/solr/products', version=4)
</snippet></ROW><ROW><id>17443778</id><snippet>n = 6

# generate some data
gdp = np.array(np.random.randint(10,500,n))
countries = np.array(['Country%i' % (i+1) for i in range(n)])
matr = np.random.randint(0,10,(n,n))

# get the x and y arrays
y = np.insert(gdp.cumsum(),0,0)
xx,yy = np.meshgrid(np.arange(n+1),y)

# plot the matrix
fig, axs = plt.subplots(figsize=(6,6))

axs.pcolormesh(xx,yy,matr.T, cmap=plt.cm.Reds, edgecolors='k')

axs.set_ylim(y.min(),y.max())

# set the yticks + labels
axs.set_yticks(y[1:] - np.diff(y) / 2)
axs.set_yticklabels(countries)

#set xticks + labels
axs.xaxis.set_ticks_position('top')
axs.set_xticks(np.arange(n)+0.5)
axs.set_xticklabels(np.arange(n))
</snippet></ROW><ROW><id>17443778</id><snippet>print countries
['Country1' 'Country2' 'Country3' 'Country4' 'Country5' 'Country6']

print gdp
[421 143 134 388 164 420]
</snippet></ROW><ROW><id>17443988</id><snippet>null</snippet></ROW><ROW><id>17443988</id><snippet>import re
from itertools import count

def _gen_id(match, count=count()):
    return '{1}"generated_id_{0}":{2}'.format(next(count), *match.groups())

_no_key = re.compile(r'(,)({)')

def fix_json(json_data):
    return _no_key.sub(_gen_id, json_data)
</snippet></ROW><ROW><id>17443988</id><snippet>,{</snippet></ROW><ROW><id>17443988</id><snippet>&gt;&gt;&gt; json_data = '{"id": null,{"version": "1.1","result": "9QtirjtH9b","error": null}}'
&gt;&gt;&gt; fix_json(json_data)
'{"id": null,"generated_id_0":{"version": "1.1","result": "9QtirjtH9b","error": null}}'
&gt;&gt;&gt; json.loads(fix_json(json_data))
{u'id': None, u'generated_id_1': {u'version': u'1.1', u'result': u'9QtirjtH9b', u'error': None}}
</snippet></ROW><ROW><id>17444167</id><snippet>root.destroy()</snippet></ROW><ROW><id>17444236</id><snippet>supervisord</snippet></ROW><ROW><id>17444236</id><snippet>priority</snippet></ROW><ROW><id>17444236</id><snippet>A</snippet></ROW><ROW><id>17444236</id><snippet>B</snippet></ROW><ROW><id>17444236</id><snippet>B</snippet></ROW><ROW><id>17444236</id><snippet>priority</snippet></ROW><ROW><id>17444236</id><snippet>999</snippet></ROW><ROW><id>17444236</id><snippet>PROCESS_STATE</snippet></ROW><ROW><id>17444236</id><snippet>STARTING</snippet></ROW><ROW><id>17444236</id><snippet>RUNNING</snippet></ROW><ROW><id>17444236</id><snippet>STOPPING</snippet></ROW><ROW><id>17444236</id><snippet>A</snippet></ROW><ROW><id>17444236</id><snippet>supervisord</snippet></ROW><ROW><id>17444236</id><snippet>B</snippet></ROW><ROW><id>17444236</id><snippet>A</snippet></ROW><ROW><id>17444236</id><snippet>B</snippet></ROW><ROW><id>17444308</id><snippet>fields</snippet></ROW><ROW><id>17444780</id><snippet>next</snippet></ROW><ROW><id>17444780</id><snippet>with open('your_file.csv') as f:
    reader = csv.reader(f)
    header = next(reader)
</snippet></ROW><ROW><id>17444799</id><snippet>import csv

def getstuff(filename, criterion):
    with open(filename, "rb") as csvfile:
        datareader = csv.reader(csvfile)
        count = 0
        for row in datareader:
            if row[3] in ("column header", criterion):
                yield row
                count += 1
            elif count &lt; 2:
                continue
            else:
                return
</snippet></ROW><ROW><id>17444799</id><snippet>getstuff()</snippet></ROW><ROW><id>17444799</id><snippet>getdata()</snippet></ROW><ROW><id>17444799</id><snippet>def getdata(filename, criteria):
    for criterion in criteria:
        for row in getstuff(filename, criterion):
            yield row
</snippet></ROW><ROW><id>17444799</id><snippet>getdata()</snippet></ROW><ROW><id>17444799</id><snippet>for row in getdata(somefilename, sequence_of_criteria):
    # process row
</snippet></ROW><ROW><id>17444799</id><snippet>yield</snippet></ROW><ROW><id>17444967</id><snippet>python setup.py install</snippet></ROW><ROW><id>17444967</id><snippet>python setup.py develop</snippet></ROW><ROW><id>17445082</id><snippet>[{
        'Id': '30',
        'File': 'Overstock_com-US_Catalog_NonMedia.xml.gz',
        'Section': 'beauty',
        'name': 'Overstock.com',
        'Logo': 'overstock.png',
        'FtpId': '91567',
        'Pool': 'CJ'
 },
 {
        'Id': '31',
        'File': 'Zappos_com-Product_Catalog_1.xml.gz',
        'Section': 'beauty',
        'name': 'Zappos.com',
        'Logo': 'zappos.png',
        'FtpId': '91567',
        'Pool': 'CJ'
 }
]
</snippet></ROW><ROW><id>17445339</id><snippet>data_pkd = ctypes.c_int32(data_in.value)
</snippet></ROW><ROW><id>17445339</id><snippet>x = ctypes.c_int16(...)
y = ctypes.c_int32(...)
data_pkd = ctypes.c_int32(x.value | y.value)
</snippet></ROW><ROW><id>17445437</id><snippet>import</snippet></ROW><ROW><id>17445437</id><snippet>.pyc</snippet></ROW><ROW><id>17445991</id><snippet>('name','age')</snippet></ROW><ROW><id>17445991</id><snippet>read()</snippet></ROW><ROW><id>17445991</id><snippet>read</snippet></ROW><ROW><id>17445997</id><snippet>from random import choice


class A(object):
    def __init__(self):
        self.name = 'in A'


class B(object):
    def __init__(self):
        self.name = 'in B'


class C(object):
    def __init__(self):
        self.name = 'in C'

if __name__ == "__main__":
    classes = ['A', 'B', 'C']
    class_name = choice(classes)
    print class_name

    # 1st way
    obj = globals()[class_name]()
    print obj.name

    # 2nd way
    import sys
    obj = getattr(sys.modules['__main__'], class_name)()
    print obj.name

    # 3rd way - not recommended
    obj = eval(class_name)()
    print obj.name
</snippet></ROW><ROW><id>17446003</id><snippet>number.real</snippet></ROW><ROW><id>17446003</id><snippet>number.imag</snippet></ROW><ROW><id>17446003</id><snippet>In [13]: a = n.arange(5) + 1j*n.arange(6,11)

In [14]: a
Out[14]: array([ 0. +6.j,  1. +7.j,  2. +8.j,  3. +9.j,  4.+10.j])
</snippet></ROW><ROW><id>17446003</id><snippet>In [15]: fig,ax = subplots()

In [16]: ax.scatter(a.real,a.imag)
</snippet></ROW><ROW><id>17446003</id><snippet>from matplotlib.pyplot import *</snippet></ROW><ROW><id>17446215</id><snippet>blank=True</snippet></ROW><ROW><id>17446215</id><snippet>form</snippet></ROW><ROW><id>17446215</id><snippet>null</snippet></ROW><ROW><id>17446215</id><snippet>null=True</snippet></ROW><ROW><id>17446215</id><snippet>null=True</snippet></ROW><ROW><id>17446850</id><snippet>from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.mime.application import MIMEApplication
from email.MIMEImage import MIMEImage
import io
import gzip

msg = MIMEMultipart()
msg['Subject'] = 'ANALYSIS REPORT'

msg.attach(MIMEText('report attached'))

filename = "report.txt"
with open(filename, 'rb') as f, io.BytesIO() as b:
    g = gzip.GzipFile(mode='wb', fileobj=b)
    g.writelines(f)
    g.close()
    attachment = MIMEApplication(b.getvalue(), 'x-gzip')
    attachment['Content-Disposition'] = 'attachment; filename=report.txt.gz'
msg.attach(attachment)

smtpObj = smtplib.SMTP('mail.my-domain.com', 25)
print smtpObj.sendmail(sender, receivers, msg.as_string())         
print "e-mail Successfully Sent!" 
</snippet></ROW><ROW><id>17447451</id><snippet>raise facebook.GraphAPIError
</snippet></ROW><ROW><id>17447451</id><snippet>GraphAPIError</snippet></ROW><ROW><id>17447451</id><snippet>raise facebook.GraphAPIError(whatever)
</snippet></ROW><ROW><id>17447451</id><snippet>raise</snippet></ROW><ROW><id>17447451</id><snippet>raise facebook.GraphAPIError, whatever
</snippet></ROW><ROW><id>17447451</id><snippet>TypeError</snippet></ROW><ROW><id>17447451</id><snippet>raise</snippet></ROW><ROW><id>17447494</id><snippet>if</snippet></ROW><ROW><id>17447494</id><snippet>class</snippet></ROW><ROW><id>17448018</id><snippet>lib.lib</snippet></ROW><ROW><id>17448018</id><snippet>lip.py</snippet></ROW><ROW><id>17448018</id><snippet>lib</snippet></ROW><ROW><id>17448018</id><snippet>lib</snippet></ROW><ROW><id>17448018</id><snippet>__init__.py</snippet></ROW><ROW><id>17448018</id><snippet># [find a loader and load the module object, setting sys.modules[name]]
module = sys.modules[name]
if parent:
    # Set the module as an attribute on its parent.
    parent_module = sys.modules[parent]
    setattr(parent_module, name.rpartition('.')[2], module)
</snippet></ROW><ROW><id>17448018</id><snippet>sys</snippet></ROW><ROW><id>17448018</id><snippet>email</snippet></ROW><ROW><id>17448018</id><snippet>email.mime</snippet></ROW><ROW><id>17448018</id><snippet>email.mime.text</snippet></ROW><ROW><id>17448180</id><snippet>from binary_search import binary_search

# Test a basic case
inlist = [0] * 256
inlist[123] = 1
assert binary_search(inlist) == 123

# Test a case with odd len
inlist = [0] * 99
inlist[20] = 1
assert binary_search(inlist, 20)

# Test the case with no 1s
inlist = [0] * 256
assert binary_search(inlist) == -1

# It's good to test corner cases just in case
inlist = [0] * 256
inlist[0] = 1
assert binary_search(inlist) == 0
inlist = [0] * 256
inlist[255] = 1
assert binary_search(inlist) == 255
</snippet></ROW><ROW><id>17448180</id><snippet>any</snippet></ROW><ROW><id>17448180</id><snippet>inlist.index(1)</snippet></ROW><ROW><id>17448180</id><snippet>def binary_search(inList):
    low = 0
    high = len(inList)
    while low &lt; high:
        mid = (low + high) // 2
        upper = inList[mid:high]
        lower = inList[low:mid]
        if any(lower):
            high = mid
        elif any(upper):
            low = mid + 1
        else:
            # Neither side has a 1
            return -1

    assert low == high
    return mid
</snippet></ROW><ROW><id>17448258</id><snippet>dtype</snippet></ROW><ROW><id>17448258</id><snippet>np.int32</snippet></ROW><ROW><id>17448258</id><snippet>np.uint8</snippet></ROW><ROW><id>17448258</id><snippet>np.uint16</snippet></ROW><ROW><id>17448258</id><snippet>np.int32</snippet></ROW><ROW><id>17448258</id><snippet>new_data = numpy.array([0,0], dtype=stereo_data)
</snippet></ROW><ROW><id>17448258</id><snippet>new_data = numpy.zeros((1, 2), dtype=stereo_data.dtype)
</snippet></ROW><ROW><id>17448258</id><snippet>sr, stereo_data = sciwav.read('filename')
nparts = 100
part_length = len(stereo_data) // nparts 

stereo_parts = numpy.split(stereo_data[:part_length*nparts], nparts)

new_data = numpy.vstack([numpy.zeros((1, 2), dtype=stereo_data.dtype)] +
                        stereo_parts)

sciwav.write('new_filename', sr, new_data)
</snippet></ROW><ROW><id>17448447</id><snippet>import os
from collections import Counter,defaultdict
d2 = defaultdict(dict)
word_list = ['vs', 'mln', 'money']
for fil in d.values():
    with open(fil[0]) as f:
       path, name = os.path.split(fil[0])
       words_c = Counter([word for line in f for word in line.split()])
       for word in word_list:
           d2[word][name] = words_c[word]
</snippet></ROW><ROW><id>17448447</id><snippet>d2['vs']['5.txt']
</snippet></ROW><ROW><id>17448608</id><snippet>import os
import pwd

admdetails = pwd.getpwnam('adm')
rootdetails = pwd.getpwnam('root')

for fname in ['name1', ,,,]:
   os.chown(fname, rootdetails.pw_uid, admdetails.pr_gid)
</snippet></ROW><ROW><id>17448965</id><snippet>DocA.objects(id=someid, user=logged_in_user).update_one(push__strings="New String")
</snippet></ROW><ROW><id>17449054</id><snippet>row.select('td/a/@href').extract()
</snippet></ROW><ROW><id>17449063</id><snippet>data = [[1,2,3,4],[4,5,6,7,8]]
data_arr = np.array(data)

data_arr
array([[1,2,3,4],
       [5,6,7,8]])
</snippet></ROW><ROW><id>17449624</id><snippet>import pandas as pd
from StringIO import StringIO

infile = StringIO("""datetime,user,event
2013-01-01 11:15:23,A,error
2013-01-02 11:15:23,C,warning
2013-01-03 11:15:23,C,message
2013-02-01 11:15:23,A,error
2013-02-02 11:15:23,B,warning
2013-02-03 11:15:23,A,message""")

df = pd.read_csv(infile, parse_dates=True, index_col='datetime')

                    user    event
datetime                         
2013-01-01 11:15:23    A    error
2013-01-02 11:15:23    C  warning
2013-01-03 11:15:23    C  message
2013-02-01 11:15:23    A    error
2013-02-02 11:15:23    B  warning
2013-02-03 11:15:23    A  message
</snippet></ROW><ROW><id>17449624</id><snippet>df.groupby([lambda x: x.strftime('%Y-%b'), 'user']).count()['event']

          user
2013-Feb  A       2
          B       1
2013-Jan  A       1
          C       2
</snippet></ROW><ROW><id>17449736</id><snippet>PIPE_BUF</snippet></ROW><ROW><id>17449819</id><snippet>mkdir BeautifulSoup
pip install BeautifulSoup -d BeautifulSoup/
</snippet></ROW><ROW><id>17449819</id><snippet>sudo pip install -t . BeautifulSoup
</snippet></ROW><ROW><id>17449883</id><snippet>&gt;&gt;&gt; data = ['1,2','3,4']
&gt;&gt;&gt; arr2=[ map(float,x.split(',')) for x in data]
&gt;&gt;&gt; arr2 = np.asarray(arr2)
&gt;&gt;&gt; A = np.asmatrix(arr2)
&gt;&gt;&gt; A.I
matrix([[-2. ,  1. ],
        [ 1.5, -0.5]])
</snippet></ROW><ROW><id>17449931</id><snippet>FilteredData = AllData[my_dict.keys()]
</snippet></ROW><ROW><id>17450032</id><snippet>int</snippet></ROW><ROW><id>17450032</id><snippet>int</snippet></ROW><ROW><id>17450032</id><snippet>for line in fidNNC:
    temp = [int(i) for i in line.strip().split()]
    temp.insert(0,0)
    CC.append(temp[0:7])
</snippet></ROW><ROW><id>17450196</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; with open('ruby-Ne008.csv') as f:
    reader = csv.reader(f, delimiter = ';' )
    lis = list(chain.from_iterable(map(float,row[1:]) for row in reader))
    print lis
...     
[6774.64, 210.0]
</snippet></ROW><ROW><id>17450292</id><snippet>import urllib2

proxy = urllib2.ProxyHandler({'http': '123.96.220.2:81'})
opener = urllib2.build_opener(proxy)
urllib2.install_opener(opener)

with open('filename','wb') as f:
    f.write(urllib2.urlopen(URL).read())
    f.close()
</snippet></ROW><ROW><id>17450292</id><snippet>urllib2</snippet></ROW><ROW><id>17450292</id><snippet>urlretrieve</snippet></ROW><ROW><id>17450292</id><snippet>urlopen</snippet></ROW><ROW><id>17450292</id><snippet>urllib2</snippet></ROW><ROW><id>17450292</id><snippet>FancyURLopener</snippet></ROW><ROW><id>17450292</id><snippet>urllib2</snippet></ROW><ROW><id>17450389</id><snippet>import pprint

pp = pprint.PrettyPrinter(indent=4)

dict1 = { 'Person' : { 'Male' : {'Boys' : {'Roger' : {'age' : 20},
                                           'Rafa' : {'age' : 25}
                                          }
                                },
                       'Female' : { 'Girls' : {'Serena' : {'age' : 23},
                                               'Maria' : {'age' : 15}
                                              }
                                  }

                     },
          'Animal' : { 'Huge' : {'Elephant' : {'color' : 'black' }
                                }
                     }
        }
'''
dict2 = { 'Person' : { 'Male' : {'Boys' : {'Roger' : {'age' : 20}
                                          }
                                },
                       'Female' : { 'Girls' : {'Serena' : {'age' : 23},
                                               'Maria' : {'age' : 1}
                                              }
                                  }
                     }
        }

dict2 = { 'Person' : { 'Male' : {'Boys' : {'Roger' : {'age' : 20},
                                           'Rafa' : {'age' : 2}
                                          }
                                }
                     }
        }
'''

dict2 = { 'Person' : { 'Male' : {'Boys' : {'Roger' : {'age' : 2}}},
                       'Female' : 'Serena'}
        }


key_list = []
err_list = {}
def comp(exp,act):
    for key in exp:
        key_list.append(key)
        exp_val = exp[key]
        try:
            act_val = act[key]
            is_dict_exp = isinstance(exp_val,__builtins__.dict)
            is_dict_act = isinstance(act_val,__builtins__.dict)

            if is_dict_exp == is_dict_act == True:
                comp(exp_val,act_val)
            elif is_dict_exp == is_dict_act == False:
                if not exp_val == act_val:
                    temp = {"Exp" : exp_val,"Act" : act_val}
                    err_key = "--&gt;".join(key_list)
                    if err_list.has_key(key):
                        err_list[err_key].update(temp)
                    else:
                        err_list.update({err_key : temp})
            else:
                temp = {"Exp" : exp_val, "Act" : act_val}
                err_key = "--&gt;".join(key_list)
                if err_list.has_key(key):
                    err_list[err_key].update(temp)
                else:
                    err_list.update({err_key : temp})

        except KeyError:
            temp = {"Exp" : exp_val,"Act" : "NOT_FOUND"}
            err_key = "--&gt;".join(key_list)
            if err_list.has_key(key):
                err_list[err_key].update(temp)
            else:
                err_list.update({err_key : temp})
        key_list.pop()

comp(dict1,dict2)

pp.pprint(err_list)
</snippet></ROW><ROW><id>17450389</id><snippet>{   'Animal': {   'Act': 'NOT_FOUND',
                  'Exp': {   'Huge': {   'Elephant': {   'color': 'black'}}}},
    'Person--&gt;Female': {   'Act': 'Serena',
                           'Exp': {   'Girls': {   'Maria': {   'age': 15},
                                                   'Serena': {   'age': 23}}}},
    'Person--&gt;Male--&gt;Boys--&gt;Rafa': {   'Act': 'NOT_FOUND', 'Exp': {   'age': 25}},
    'Person--&gt;Male--&gt;Boys--&gt;Roger--&gt;age': {   'Act': 2, 'Exp': 20}
}
</snippet></ROW><ROW><id>17450389</id><snippet>comp(dict2,dict1)
</snippet></ROW><ROW><id>17450515</id><snippet>rgx = re.compile(r'^Date: .+?\n+(.+?)(?:^diff |\Z)', re.MULTILINE | re.DOTALL)
comments = rgx.findall(txt)
</snippet></ROW><ROW><id>17450515</id><snippet>(?:...)</snippet></ROW><ROW><id>17450515</id><snippet>.+?</snippet></ROW><ROW><id>17450515</id><snippet>\Z</snippet></ROW><ROW><id>17450519</id><snippet>In [9]: df.groupby('binned_a').describe().unstack()
Out[9]:               a                                                   \
                  count      mean       std       min       25%       50%   
binned_a                                                                    
(-0.113, 0.109]       2  0.025114  0.010264  0.017856  0.021485  0.025114   
(-0.337, -0.113]      2 -0.282838  0.056445 -0.322751 -0.302794 -0.282838   
(0.109, 0.563]        3  0.354481  0.214402  0.134978  0.250027  0.365076   
[-1.842, -0.337]      3 -1.003969  0.765167 -1.841622 -1.335073 -0.828523   


                   75%       max  
binned_a                              
(-0.113, 0.109]   0.028742  0.032371  
(-0.337, -0.113] -0.262882 -0.242925  
(0.109, 0.563]    0.464233  0.563390  
[-1.842, -0.337] -0.585142 -0.341762  
</snippet></ROW><ROW><id>17450850</id><snippet>import inputbox</snippet></ROW><ROW><id>17450850</id><snippet>inp = int(inputbox.ask(screen, 'Message')) #inp will equal whatever the input is
</snippet></ROW><ROW><id>17450850</id><snippet>raw_input</snippet></ROW><ROW><id>17451021</id><snippet>In [26]: df = Series(randn(500), index=pd.date_range('2012-01-01', periods=500))

In [31]: s2 = df.groupby([lambda x: x.year, lambda x: x.month]).sum()

In [32]: s2
Out[32]: 
2012  1      3.853775
      2      4.259941
      3      4.629546
      4    -10.812505
      5    -16.383818
      6     -5.255475
      7      5.901344
      8     13.375258
      9      1.758670
      10     6.570200
      11     6.299812
      12     7.237049
2013  1     -1.331835
      2      3.399223
      3      2.011031
      4      7.905396
      5      1.127362
dtype: float64
</snippet></ROW><ROW><id>17451067</id><snippet>merge</snippet></ROW><ROW><id>17451067</id><snippet>df2.merge(df1)
</snippet></ROW><ROW><id>17451075</id><snippet>from apns import APNs,Payload
result = execute("SELECT token_hex FROM `Users`")
apns = APNs(use_sandbox=False, cert_file='Cert.pem', key_file='CertKey.pem')
payload = Payload(alert="Message",badge=1,sound='default')
for row in result:
    token_hex = row['token_hex']
    apns.gateway_server.send_notification(token_hex, payload)
</snippet></ROW><ROW><id>17451081</id><snippet>&gt;&gt;&gt; b=[1,2,3,4]
&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; [x for x in b if x not in a]
[4]
</snippet></ROW><ROW><id>17451314</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>17451314</id><snippet>action</snippet></ROW><ROW><id>17451314</id><snippet>action</snippet></ROW><ROW><id>17451314</id><snippet>action</snippet></ROW><ROW><id>17451314</id><snippet>request.POST['input1']</snippet></ROW><ROW><id>17451323</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>17451323</id><snippet>alert</snippet></ROW><ROW><id>17451477</id><snippet>matplotlib.pyplot.switch_backend('Agg')
</snippet></ROW><ROW><id>17451495</id><snippet>a</snippet></ROW><ROW><id>17451495</id><snippet>b</snippet></ROW><ROW><id>17451495</id><snippet>np.cos(np.arctan(theta))</snippet></ROW><ROW><id>17451495</id><snippet>1 / np.sqrt(1 + theta**2)</snippet></ROW><ROW><id>17451495</id><snippet>(xnew * c + ynew * s)**2/a2</snippet></ROW><ROW><id>17451753</id><snippet>str(soup.findAll('p')[4]).replace</snippet></ROW><ROW><id>17451753</id><snippet>soup.findAll('p')[4]</snippet></ROW><ROW><id>17451753</id><snippet>hrphp</snippet></ROW><ROW><id>17451762</id><snippet>plt.hist</snippet></ROW><ROW><id>17451762</id><snippet>bins=range(1,7)</snippet></ROW><ROW><id>17451762</id><snippet>align=left</snippet></ROW><ROW><id>17451762</id><snippet>bins</snippet></ROW><ROW><id>17451762</id><snippet>[1,2], [2,3], [3,4], ..., [5, 6]</snippet></ROW><ROW><id>17451762</id><snippet>rwidth!=1</snippet></ROW><ROW><id>17451762</id><snippet>matplotlib.pyplot.hist</snippet></ROW><ROW><id>17451762</id><snippet>rwidth=1</snippet></ROW><ROW><id>17451762</id><snippet>plt.hist(l, bins=range(1,7), align='left', rwidth=1, normed=True)
</snippet></ROW><ROW><id>17451810</id><snippet>Image</snippet></ROW><ROW><id>17451810</id><snippet>import Image</snippet></ROW><ROW><id>17451810</id><snippet>from PIL import Image</snippet></ROW><ROW><id>17451810</id><snippet>from PIL import Image

logo = Image.open("my_image.png")
logo = logo.resize((100, 100), Image.ANTIALIAS)
logo.save("my_image_resized.png")
</snippet></ROW><ROW><id>17451878</id><snippet>permission='logged_in'</snippet></ROW><ROW><id>17451878</id><snippet>(Allow, Authenticated, 'logged_in')</snippet></ROW><ROW><id>17452041</id><snippet>string.join(current_string,"")
</snippet></ROW><ROW><id>17452041</id><snippet>"".join(current_string)
</snippet></ROW><ROW><id>17452041</id><snippet>", ".join(['a','b','c'])
</snippet></ROW><ROW><id>17452088</id><snippet>root.Show()</snippet></ROW><ROW><id>17452088</id><snippet>HelpBox.root.deiconify()</snippet></ROW><ROW><id>17452099</id><snippet>{}</snippet></ROW><ROW><id>17452099</id><snippet>[]</snippet></ROW><ROW><id>17452099</id><snippet>[range(x) for x in [1,2,4]]
</snippet></ROW><ROW><id>17452099</id><snippet>range()</snippet></ROW><ROW><id>17452099</id><snippet>range(2)</snippet></ROW><ROW><id>17452099</id><snippet>[0, 1]</snippet></ROW><ROW><id>17452099</id><snippet>[1, 2]</snippet></ROW><ROW><id>17452099</id><snippet>&gt;&gt;&gt; [range(1, x+1) for x in [1, 2, 4]]
[[1], [1, 2], [1, 2, 3, 4]]
</snippet></ROW><ROW><id>17452237</id><snippet>.ix</snippet></ROW><ROW><id>17452237</id><snippet>.loc</snippet></ROW><ROW><id>17452237</id><snippet>In [48]: nm = mult.reset_index().set_index('level_2')

In [49]: nm
Out[49]: 
         level_0  level_1  one  two three four
level_2                                       
a             10        1  NaN  NaN   NaN  NaN
b             10        1  NaN  NaN   NaN  NaN
a             10        2  NaN  NaN   NaN  NaN
b             10        2  NaN  NaN   NaN  NaN
a             20        1  NaN  NaN   NaN  NaN
b             20        1  NaN  NaN   NaN  NaN
a             20        2  NaN  NaN   NaN  NaN
b             20        2  NaN  NaN   NaN  NaN
</snippet></ROW><ROW><id>17452237</id><snippet>In [50]: nm.loc['a',sngl.columns] = sngl.loc['a'].values

In [51]: nm
Out[51]: 
         level_0  level_1        one        two     three        four
level_2                                                              
a             10        1  0.3738456 -0.2261926 -1.205177  0.08448757
b             10        1        NaN        NaN       NaN         NaN
a             10        2  0.3738456 -0.2261926 -1.205177  0.08448757
b             10        2        NaN        NaN       NaN         NaN
a             20        1  0.3738456 -0.2261926 -1.205177  0.08448757
b             20        1        NaN        NaN       NaN         NaN
a             20        2  0.3738456 -0.2261926 -1.205177  0.08448757
b             20        2        NaN        NaN       NaN         NaN

In [52]: nm.reset_index().set_index(['level_0','level_1','level_2'])
Out[52]: 
                               one        two     three        four
level_0 level_1 level_2                                            
10      1       a        0.3738456 -0.2261926 -1.205177  0.08448757
                b              NaN        NaN       NaN         NaN
        2       a        0.3738456 -0.2261926 -1.205177  0.08448757
                b              NaN        NaN       NaN         NaN
20      1       a        0.3738456 -0.2261926 -1.205177  0.08448757
                b              NaN        NaN       NaN         NaN
        2       a        0.3738456 -0.2261926 -1.205177  0.08448757
                b              NaN        NaN       NaN         NaN
</snippet></ROW><ROW><id>17452405</id><snippet>interval</snippet></ROW><ROW><id>17452405</id><snippet>DateLocator</snippet></ROW><ROW><id>17452405</id><snippet>interval=5</snippet></ROW><ROW><id>17452405</id><snippet>autofmt_xdate()</snippet></ROW><ROW><id>17452405</id><snippet>bar</snippet></ROW><ROW><id>17452405</id><snippet>import datetime as dt
from matplotlib import pyplot as plt 
import matplotlib.dates as mdates
x = []
d = dt.datetime(2013, 7, 4)
for i in range(30):
        d = d+dt.timedelta(days=1)
        x.append(d)

y = range(len(x))
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d-%m-%Y'))
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=5))
plt.bar(x, y, align='center') # center the bars on their x-values
plt.title('DateLocator with interval=5')
plt.gcf().autofmt_xdate()
plt.show()
</snippet></ROW><ROW><id>17452405</id><snippet>interval=3</snippet></ROW><ROW><id>17452451</id><snippet>for</snippet></ROW><ROW><id>17452451</id><snippet>for</snippet></ROW><ROW><id>17452451</id><snippet>s</snippet></ROW><ROW><id>17452451</id><snippet>s = []
</snippet></ROW><ROW><id>17452451</id><snippet>for</snippet></ROW><ROW><id>17452451</id><snippet>    s.extend(re.findall(pattern, htmltext))
</snippet></ROW><ROW><id>17452451</id><snippet>s += re.findall(pattern, htmltext)</snippet></ROW><ROW><id>17452619</id><snippet>try: 
    urllib.request.urlretrieve(myUrl['link'],str(count)+'.jpg')
except URLError as e:
    print(e.reason)
except KeyboardInterrupt as ki:
    raise ki
except:
    print("Unknown Error")
</snippet></ROW><ROW><id>17452651</id><snippet>rows</snippet></ROW><ROW><id>17452651</id><snippet>rows</snippet></ROW><ROW><id>17452651</id><snippet>inner_list = [0] * columns
m = [inner_list] * rows
</snippet></ROW><ROW><id>17452651</id><snippet>*</snippet></ROW><ROW><id>17452651</id><snippet>0</snippet></ROW><ROW><id>17452651</id><snippet>matrix = []
for row in rows:
    matrix.append([0] * columns)
</snippet></ROW><ROW><id>17452969</id><snippet>print 'a.py is currently running as module {0}'.format(__name__)
import b
print 'a.py as module {0} is done'.format(__name__)
</snippet></ROW><ROW><id>17452969</id><snippet>print 'b.py is running in module {0}'.format(__name__)
import a
print 'b.py as module {0} is done'.format(__name__)
</snippet></ROW><ROW><id>17452969</id><snippet>python a.py</snippet></ROW><ROW><id>17452969</id><snippet>a.py is currently running as module __main__
b.py is running in module b
a.py is currently running as module a
a.py is done
a.py is done
</snippet></ROW><ROW><id>17452969</id><snippet>a.py</snippet></ROW><ROW><id>17452969</id><snippet>__main__</snippet></ROW><ROW><id>17452969</id><snippet>a.py</snippet></ROW><ROW><id>17452969</id><snippet>application</snippet></ROW><ROW><id>17452969</id><snippet>db</snippet></ROW><ROW><id>17452969</id><snippet>a</snippet></ROW><ROW><id>17452969</id><snippet>__main__</snippet></ROW><ROW><id>17452969</id><snippet>b.py</snippet></ROW><ROW><id>17452969</id><snippet>a</snippet></ROW><ROW><id>17452969</id><snippet>a</snippet></ROW><ROW><id>17452969</id><snippet>a.py</snippet></ROW><ROW><id>17452969</id><snippet>a</snippet></ROW><ROW><id>17452969</id><snippet>a.py</snippet></ROW><ROW><id>17452969</id><snippet>b.py</snippet></ROW><ROW><id>17452969</id><snippet>a</snippet></ROW><ROW><id>17452969</id><snippet>a.py</snippet></ROW><ROW><id>17452969</id><snippet>application.run()</snippet></ROW><ROW><id>17452969</id><snippet>from gwg import application
application.run()
</snippet></ROW><ROW><id>17452969</id><snippet>python main.py</snippet></ROW><ROW><id>17453101</id><snippet>000892834     13.663      0.098      0.871      0.093      0.745      4.611       4795
</snippet></ROW><ROW><id>17453101</id><snippet>0</snippet></ROW><ROW><id>17453101</id><snippet>lstrip()</snippet></ROW><ROW><id>17453101</id><snippet>0</snippet></ROW><ROW><id>17453101</id><snippet>0</snippet></ROW><ROW><id>17453101</id><snippet>mergedData = {}
with open('file1.txt', 'r') as file1, open('file2.txt', 'r') as file2, open('mergedData.txt', 'w') as outfile:
    for line in file1:
        mergedData[line.split()[0].lstrip('0')] = [line]
    for line in file2:
        mergedData[line.split()[0]].append(" ".join(line.split()[:4]))
    for k in mergedData:
        outfile.write("\n".join(mergedData[k]) + "\n")
</snippet></ROW><ROW><id>17453101</id><snippet>defaultdict</snippet></ROW><ROW><id>17453101</id><snippet>mergedData</snippet></ROW><ROW><id>17453101</id><snippet>from collections import defaultdict
mergedData = defaultdict(list)
with open('file1.txt', 'r') as file1, open('file2.txt', 'r') as file2, open('mergedData.txt', 'w') as outfile:
    for line in file1:
        mergedData[line.split()[0].lstrip('0')].append(line)
    for line in file2:
        mergedData[line.split()[0]].append(" ".join(line.split()[:4]))
    ...
</snippet></ROW><ROW><id>17453101</id><snippet>filter()</snippet></ROW><ROW><id>17453101</id><snippet>filter()</snippet></ROW><ROW><id>17453101</id><snippet>True</snippet></ROW><ROW><id>17453101</id><snippet>   ...
   filteredMergedData = filter(lambda x: (len(x[1]) == 2) and (int(x[1][0].split()[1]) &gt; 15 and int(x[1][1].split()[1]) &gt; 15), mergedData.iteritems()
   for d in filteredMergedData:
       outfile.write("\n".join(d[1]) + "\n")
</snippet></ROW><ROW><id>17453101</id><snippet>(key, value)</snippet></ROW><ROW><id>17453101</id><snippet>True</snippet></ROW><ROW><id>17453101</id><snippet>int</snippet></ROW><ROW><id>17453101</id><snippet>int</snippet></ROW><ROW><id>17453101</id><snippet>from collections import defaultdict

def mergeData(file1name, file2name, outfilename, a_filter_func):
    """ Merge the data of two files. """
    mergedData = defaultdict(list)
    with open(file1name, 'r') as file1, open(file2name, 'r') as file2, open(outfilename, 'w') as outfile:
        for line in file1:
            mergedData[line.split()[0].lstrip('0')].append(line)
        for line in file2:
            mergedData[line.split()[0]].append(" ".join(line.split()[:4]))
        filteredMergedData = filter(a_filter_func, mergedData.iteritems())
        for d in filteredMergedData:
            outfile.write("\n".join(d[1]) + "\n")

# finally, call the function.
filter_func = lambda x: (len(x[1]) == 2) and (int(x[1][0].split()[1]) &gt; 15 and int(x[1][1].split()[1]) &gt; 15)
mergeData('file1.txt', 'file2.txt', 'mergedData.txt', filter_func)
</snippet></ROW><ROW><id>17453101</id><snippet>filter_func</snippet></ROW><ROW><id>17453101</id><snippet>def</snippet></ROW><ROW><id>17453101</id><snippet>def foo(x):</snippet></ROW><ROW><id>17453101</id><snippet>foo</snippet></ROW><ROW><id>17453101</id><snippet>True</snippet></ROW><ROW><id>17453101</id><snippet>False</snippet></ROW><ROW><id>17453101</id><snippet>def mergeData(file1name, file2name, outfilename, a_filter_func):
    """ Merge the data of two files. """
    mergedData = defaultdict(list)
    with open(file1name, 'r') as file1, open(file2name, 'r') as file2, open(outfilename, 'w') as outfile:
        for line in file1:
            splt = line.split()
            if a_filter_func(splt[1]):
                mergedData[splt[0].lstrip('0')].append(line)
        for line in file2:
            splt = line.split()
            if a_filter_func(splt[1]):
                mergedData[splt[0]].append(" ".join(splt[:4]))
        for k in mergedData:
            outfile.write("\n".join(mergedData[k]) + "\n")
</snippet></ROW><ROW><id>17453101</id><snippet>a_filter_func</snippet></ROW><ROW><id>17453101</id><snippet>lambda x: x &gt; 15
</snippet></ROW><ROW><id>17453101</id><snippet>filter()</snippet></ROW><ROW><id>17453167</id><snippet>json</snippet></ROW><ROW><id>17453167</id><snippet>None</snippet></ROW><ROW><id>17453167</id><snippet>null</snippet></ROW><ROW><id>17453167</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; null_list = [None]*10
&gt;&gt;&gt; null_list
[None, None, None, None, None, None, None, None, None, None]
&gt;&gt;&gt; json.dumps(null_list)
'[null, null, null, null, null, null, null, null, null, null]'
</snippet></ROW><ROW><id>17453393</id><snippet>repr()</snippet></ROW><ROW><id>17453393</id><snippet>str()</snippet></ROW><ROW><id>17453393</id><snippet>collatz.Collatz()</snippet></ROW><ROW><id>17453393</id><snippet>__repr__</snippet></ROW><ROW><id>17453393</id><snippet>dict</snippet></ROW><ROW><id>17453393</id><snippet>str()</snippet></ROW><ROW><id>17453393</id><snippet>repr()</snippet></ROW><ROW><id>17453393</id><snippet>__repr__</snippet></ROW><ROW><id>17453393</id><snippet>collatz.Collatz.__repr__ = collatz.Collatz.__str__
</snippet></ROW><ROW><id>17453393</id><snippet>__repr__</snippet></ROW><ROW><id>17453551</id><snippet>list.append(1)
list.append(2)
list.append(3)
# list = [1, 2, 3]

valid_values = (2, 3)

list = [item for item in list if item in valid_values]
# list = [2, 3] now
</snippet></ROW><ROW><id>17453551</id><snippet>list.append(inString)</snippet></ROW><ROW><id>17453551</id><snippet>list.extend(other_list)</snippet></ROW><ROW><id>17453551</id><snippet>list + other_list</snippet></ROW><ROW><id>17453551</id><snippet>inString</snippet></ROW><ROW><id>17453551</id><snippet>in_string</snippet></ROW><ROW><id>17453576</id><snippet>In [84]: df = DataFrame(dict(event = randint(10,100,(100)), yes = ['foo','bar']*50))

In [85]: df.loc[[2,3,5,10,15],'yes'] = np.nan

In [86]: df.head(10)
Out[86]: 
   event  yes
0     47  foo
1     94  bar
2     71  NaN
3     62  NaN
4     43  foo
5     60  NaN
6     90  foo
7     43  bar
8     15  foo
9     16  bar

In [87]: mini = df[:20]

In [88]: mini
Out[88]: 
    event  yes
0      47  foo
1      94  bar
2      71  NaN
3      62  NaN
4      43  foo
5      60  NaN
6      90  foo
7      43  bar
8      15  foo
9      16  bar
10     26  NaN
11     64  bar
12     82  foo
13     63  bar
14     16  foo
15     78  NaN
16     49  foo
17     32  bar
18     34  foo
19     46  bar

In [89]: Series(mini.yes.values,mini.event).iloc[:10]
Out[89]: 
event
47       foo
94       bar
71       NaN
62       NaN
43       foo
60       NaN
90       foo
43       bar
15       foo
16       bar
dtype: object
</snippet></ROW><ROW><id>17453576</id><snippet>.ix</snippet></ROW><ROW><id>17453576</id><snippet>.iloc</snippet></ROW><ROW><id>17453576</id><snippet>In [92]: df.set_index('event').iloc[:10].loc[:,'yes']
Out[92]: 
event
47       foo
94       bar
71       NaN
62       NaN
43       foo
60       NaN
90       foo
43       bar
15       foo
16       bar
Name: yes, dtype: object
</snippet></ROW><ROW><id>17453598</id><snippet>
print y.shape
</snippet></ROW><ROW><id>17453598</id><snippet>
Shape.0
</snippet></ROW><ROW><id>17453598</id><snippet>
y.shape.eval()
</snippet></ROW><ROW><id>17453598</id><snippet>
y.shape.eval(x=numpy.random.rand(...))
</snippet></ROW><ROW><id>17453678</id><snippet>str.isdigit</snippet></ROW><ROW><id>17453678</id><snippet>str.isalpha</snippet></ROW><ROW><id>17453678</id><snippet>if a.isalpha():
   #do something
elif a.isdigit():
   #do something
</snippet></ROW><ROW><id>17453678</id><snippet>str.isdigit</snippet></ROW><ROW><id>17453678</id><snippet>&gt;&gt;&gt; print str.isdigit.__doc__
S.isdigit() -&gt; bool

Return True if all characters in S are digits
and there is at least one character in S, False otherwise.
</snippet></ROW><ROW><id>17453678</id><snippet>str.isalpha</snippet></ROW><ROW><id>17453678</id><snippet>&gt;&gt;&gt; print str.isalpha.__doc__
S.isalpha() -&gt; bool

Return True if all characters in S are alphabetic
and there is at least one character in S, False otherwise.
</snippet></ROW><ROW><id>17453734</id><snippet>flip()</snippet></ROW><ROW><id>17453734</id><snippet>picture</snippet></ROW><ROW><id>17453734</id><snippet>scope</snippet></ROW><ROW><id>17453734</id><snippet>picture</snippet></ROW><ROW><id>17453734</id><snippet>newPicture</snippet></ROW><ROW><id>17453734</id><snippet>picture</snippet></ROW><ROW><id>17453734</id><snippet>d()</snippet></ROW><ROW><id>17453734</id><snippet>newPicture</snippet></ROW><ROW><id>17453734</id><snippet>flip()</snippet></ROW><ROW><id>17453734</id><snippet>picture</snippet></ROW><ROW><id>17453734</id><snippet>newPicture</snippet></ROW><ROW><id>17453734</id><snippet>picture</snippet></ROW><ROW><id>17453734</id><snippet>newPicture</snippet></ROW><ROW><id>17453734</id><snippet>scope</snippet></ROW><ROW><id>17453734</id><snippet>def flip(picture)
    # Create newPicture
    # Modify newPicture (using the information from the "picture" parameter)
    setColor(newPicture, ...)
    ...
    return newPicture

def d():
    file = PickAFile()
    original_pic = makePicture(file) 
    finalNewPicture = flip(original_pic)     # {1}
    show(finalNewPicture)
</snippet></ROW><ROW><id>17453734</id><snippet>newPicture</snippet></ROW><ROW><id>17453734</id><snippet>finalNewPicture</snippet></ROW><ROW><id>17453734</id><snippet>picture</snippet></ROW><ROW><id>17453734</id><snippet>picture</snippet></ROW><ROW><id>17453734</id><snippet>def flip(picture)
    # Simply modify the variable "picture", given as a parameter
    setColor(picture, ...)
    ...
    # Do not return anything

def d():
    file = PickAFile()
    original_pic = makePicture(file) 
    flip(original_pic)                     # {1}
    show(original_pic)
</snippet></ROW><ROW><id>17453734</id><snippet>original_pic</snippet></ROW><ROW><id>17453734</id><snippet>def flip(picture):
  height = getHeight(picture)
  width = getWidth(picture)

  x2=width-1
  for x in range(0, width/2):   # Only process the half way
    y2=0
    for y in range(0, height):
      # swap pix and pix2
      pxl = getPixel(picture, x, y)
      pxl2 = getPixel(picture, x2, y2)
      color = getColor(pxl)
      color2 = getColor(pxl2)
      setColor(pxl2, color)
      setColor(pxl, color2)
      y2=y2+1
    x2=x2-1  

def d():    
  f = pickAFile()
  original_picture = makePicture(f)        
  flip2(original_picture)        
  show(original_picture)

d()
</snippet></ROW><ROW><id>17453734</id><snippet>def flip2(picture):
  height = getHeight(picture)
  width = getWidth(picture)

  for x in range(0, width/2):   # Only process the half way
    for y in range(0, height):
      # swap pix and pix2
      pxl = getPixel(picture, x, y)
      pxl2 = getPixel(picture, width-1-x, y)
      color = getColor(pxl)
      color2 = getColor(pxl2)
      setColor(pxl2, color)
      setColor(pxl, color2)
</snippet></ROW><ROW><id>17453783</id><snippet>key</snippet></ROW><ROW><id>17453783</id><snippet>sorted(root, key=lambda x: x[0], reverse=True)
</snippet></ROW><ROW><id>17453783</id><snippet>f = lambda x: x[0]</snippet></ROW><ROW><id>17453783</id><snippet>lambda arguments: expression</snippet></ROW><ROW><id>17453783</id><snippet>expression</snippet></ROW><ROW><id>17453783</id><snippet>x</snippet></ROW><ROW><id>17453783</id><snippet>x[0]</snippet></ROW><ROW><id>17453901</id><snippet>class ClientThread(threading.Thread):

    def __init__(self, ip, port, socket):
        threading.Thread.__init__(self)
        self.ip = ip
        self.port = port
        self.socket = socket
        print "[+] New thread started for "+ip+":"+str(port)

    def __run__(self):
        # use self.socket to send/receive

...
(clientsock, (ip, port)) = tcpsock.accept()
newthread = ClientThread(ip, port, clientsock)
...
</snippet></ROW><ROW><id>17453940</id><snippet>datalist[3] = datalist[3][:31] + '11' + datalist[3][33:]
</snippet></ROW><ROW><id>17454022</id><snippet># If you're on a POSIX compliant system, and this script is marked as 
# executable, the following line will make this file be automatically 
# run by the Python interpreter rather than interpreted as a shell script
#!/usr/bin/env python

# We need the sys module to read arguments from the terminal
import sys

# Open the input file, default mode is 'r', readonly, which is a safe default
infile = open(sys.argv[1])

# Prepare a variable for the cluster number to be used within the loop
cluster = ''

# loop through all lines in the file, but first set up a list comprehension
# that strips the newline character off the line for each line that is read
for line in (line.strip() for line in infile):
    if line.startswith('&gt;'):
        # string.split() splits on whitespace by default
        # we want the cluster number at index 1
        cluster = line.split()[1]

        # output this line to stdout unmodified
        print line

    else:
        # output any other line modified by adding the cluster number
        print cluster + ' ' + line
</snippet></ROW><ROW><id>17454022</id><snippet>$ python cluster_format.py input.txt &gt; output.txt
</snippet></ROW><ROW><id>17454085</id><snippet>_A__configure</snippet></ROW><ROW><id>17454085</id><snippet>#!/usr/bin/python

class A(object):

    def __init__(self):
        self.configured = []
        self.set_up = []

    def __configure(self):
        self.configured.append("A")

    def setup(self):
        self.__configure()
        self.set_up.append("A")

class B(A):

    def __configure(self):
        self.configured.append("B")

    def setup(self):
        super(B, self).setup()
        self.__configure()
        self.set_up.append("B")

class Z(B):
    pass

if __name__ == "__main__":
    z = Z()
    z.setup()
    print "configured: %s" % z.configured
    print "set up: %s" % z.set_up
</snippet></ROW><ROW><id>17454085</id><snippet>me@here:~$ ./t.py 
configured: ['A', 'B']
set up: ['A', 'B']
me@here:~$
</snippet></ROW><ROW><id>17454134</id><snippet>smtplib</snippet></ROW><ROW><id>17454134</id><snippet>smtplib</snippet></ROW><ROW><id>17454134</id><snippet>        self.sock = ssl.wrap_socket(self.sock, keyfile, certfile)
</snippet></ROW><ROW><id>17454134</id><snippet>        self.sock = ssl.wrap_socket(self.sock, keyfile, certfile, ssl_version=ssl.PROTOCOL_SSLv3)
</snippet></ROW><ROW><id>17454134</id><snippet>Python 2.7.3 (default, Jan  2 2013, 13:56:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import smtplib
&gt;&gt;&gt; s = smtplib.SMTP()
&gt;&gt;&gt; s.connect('smtp.live.com:587') 
(220, 'BLU0-SMTP418.blu0.hotmail.com Microsoft ESMTP MAIL Service, Version: 6.0.3790.4675 ready at  Wed, 3 Jul 2013 09:59:32 -0700')
&gt;&gt;&gt; s.ehlo()
(250, 'BLU0-SMTP418.blu0.hotmail.com Hello [24.143.227.254]\nTURN\nSIZE 41943040\nETRN\nPIPELINING\nDSN\nENHANCEDSTATUSCODES\n8bitmime\nBINARYMIME\nCHUNKING\nVRFY\nTLS\nSTARTTLS\nOK')
&gt;&gt;&gt; s.starttls()
(220, '2.0.0 SMTP server ready')
&gt;&gt;&gt; s.ehlo()
(250, 'BLU0-SMTP418.blu0.hotmail.com Hello [24.143.227.254]\nTURN\nSIZE 41943040\nETRN\nPIPELINING\nDSN\nENHANCEDSTATUSCODES\n8bitmime\nBINARYMIME\nCHUNKING\nVRFY\nAUTH LOGIN PLAIN\nOK')
&gt;&gt;&gt; s.login('my.email@hotmail.com','MyPaSsW0rD')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "smtplib.py", line 615, in login
    raise SMTPAuthenticationError(code, resp)
smtplib.SMTPAuthenticationError: (535, '5.0.0 Authentication Failed')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17454175</id><snippet>]</snippet></ROW><ROW><id>17454175</id><snippet>mysheet_list[rowvalue+1['email']
                       ^
                       |
</snippet></ROW><ROW><id>17454175</id><snippet>mysheet_list[rowvalue+1]['email']
</snippet></ROW><ROW><id>17454361</id><snippet>json_encode($arr)</snippet></ROW><ROW><id>17454361</id><snippet>json_decode($arr)</snippet></ROW><ROW><id>17454787</id><snippet>In [1]: import pandas as pd

In [2]: s = pd.Series([1, 2, 3, np.NaN, np.NaN, 5, 6])

In [3]: s.isnull()
Out[3]: 
0    False
1    False
2    False
3     True
4     True
5    False
6    False
dtype: bool

In [4]: s[s.isnull()]
Out[4]: 
3   NaN
4   NaN
dtype: float64

In [5]: s.index[s.isnull()]
Out[5]: Int64Index([3, 4], dtype=int64)
</snippet></ROW><ROW><id>17454860</id><snippet>from sqlalchemy.orm import reconstructor
class Cmd(Base):
    __tablename__ = "commands"
    dbid = Column(Integer, Sequence("commands_seq"), primary_key = True)
    cmd_id = Column(SmallInteger)
    instance_dbid =  Column(Integer, ForeignKey("instances.dbid"))
    type = Column(String(20))

    __mapper_args__ = {
    "polymorphic_on" : type,
    "polymorphic_identity" : "Cmd"
    }

    def __init__(self, cmd_id):
        self.cmd_id = cmd_id
        self.cmd_name = event_names[self.cmd_id]

    @reconstructor
    def init_db_load(self):
        self.cmd_name = event_names[self.cmd_id]
</snippet></ROW><ROW><id>17454979</id><snippet>items = [1, 2, 3, 4, 5]

for item in items:
    if item == 2:
        items.remove(item)

    print item
</snippet></ROW><ROW><id>17455029</id><snippet>print "A. Create Username"
print "B. Edit Username"
input = raw_input("Enter your choice")

if input == "A":
    print "A was given" 
if input == "B":
    print "B was given"
</snippet></ROW><ROW><id>17455187</id><snippet>py2exe</snippet></ROW><ROW><id>17455187</id><snippet>cx_Freeze</snippet></ROW><ROW><id>17455187</id><snippet>py2exe</snippet></ROW><ROW><id>17455187</id><snippet>py2exe-0.6.9.win32-py2.7.exe</snippet></ROW><ROW><id>17455187</id><snippet>cx_Freeze</snippet></ROW><ROW><id>17455387</id><snippet>HTTP</snippet></ROW><ROW><id>17455387</id><snippet>HTTPSConnectionPool</snippet></ROW><ROW><id>17455387</id><snippet>client_args = {'proxies': {'https': 'http://proxy.company.com:10080'}}
</snippet></ROW><ROW><id>17455457</id><snippet>with tarfile.TarFile('package.tgz', 'w:gz') as tar:
    for pathname in pathnames:
        tar.add(pathname)
</snippet></ROW><ROW><id>17455457</id><snippet>tarfile</snippet></ROW><ROW><id>17455457</id><snippet>.xml</snippet></ROW><ROW><id>17455457</id><snippet>.class</snippet></ROW><ROW><id>17455457</id><snippet>def package_filter(info):
    if info.isdir() or os.path.splitext(info.name)[-1] in ('.xml', '.class'):
        return info
    else:
        return None

with tarfile.TarFile('package.tgz', 'w:gz', filter=package_filter) as tar:
    for pathname in sys.argv[1:]:
        tar.add(pathname)
</snippet></ROW><ROW><id>17455457</id><snippet>TarFile</snippet></ROW><ROW><id>17455457</id><snippet>open</snippet></ROW><ROW><id>17455485</id><snippet>LuaRuntime</snippet></ROW><ROW><id>17455485</id><snippet>os.execute("rm -rf *")</snippet></ROW><ROW><id>17455485</id><snippet>setfenv</snippet></ROW><ROW><id>17455485</id><snippet>getfenv</snippet></ROW><ROW><id>17455485</id><snippet>import lupa
L = lupa.LuaRuntime()
sandbox = L.eval("{}")
setfenv = L.eval("setfenv")

sandbox.print   = L.globals().print
sandbox.math    = L.globals().math
sandbox.string  = L.globals().string
sandbox.foobar  = foobar
# etc...

setfenv(0, sandbox)
</snippet></ROW><ROW><id>17455485</id><snippet>L.execute("os.execute('rm -rf *')")</snippet></ROW><ROW><id>17455551</id><snippet>int(5/9)
</snippet></ROW><ROW><id>17455551</id><snippet>5/9</snippet></ROW><ROW><id>17455551</id><snippet>0.555</snippet></ROW><ROW><id>17455551</id><snippet>int()</snippet></ROW><ROW><id>17455551</id><snippet>0</snippet></ROW><ROW><id>17455551</id><snippet>print((int(Fvalue) - 32) * 5/9)
</snippet></ROW><ROW><id>17456268</id><snippet>MultipleChoiceField</snippet></ROW><ROW><id>17456268</id><snippet>choices</snippet></ROW><ROW><id>17456268</id><snippet>queryset</snippet></ROW><ROW><id>17456268</id><snippet>ModelMultipleChoiceField</snippet></ROW><ROW><id>17456268</id><snippet>evalTypes = forms.ModelMultipleChoiceField(label="Default Evaluation Forms", widget=forms.SelectMultiple, queryset=None)
</snippet></ROW><ROW><id>17456284</id><snippet>class Quantity(object):

    def __init__(self, value, unit):
        self.unit = unit
        self.value = value

    def __getitem__(self, key):
        return Quantity(self.value[key], unit=self.unit)

    def __len__(self):
        return len(self.value)

    def __array__(self):
        return self.value
</snippet></ROW><ROW><id>17456284</id><snippet>np.array</snippet></ROW><ROW><id>17456284</id><snippet>__array__</snippet></ROW><ROW><id>17456284</id><snippet>In [11]: q
Out[11]: &lt;__main__.Quantity at 0x1042bdf90&gt;

In [12]: np.array(q)
Out[12]: array([ 1.,  2.,  3.])

In [13]: print(repr(np.array(q)))
array([ 1.,  2.,  3.])

In [14]: len(q)
Out[14]: 3

In [15]: q[1]
Out[15]: &lt;__main__.Quantity at 0x1042bdd50&gt;

In [16]: q[0]
Out[16]: &lt;__main__.Quantity at 0x1042bdd90&gt;

In [17]: q[0].value
Out[17]: 1.0
</snippet></ROW><ROW><id>17456294</id><snippet>inspect.stack()</snippet></ROW><ROW><id>17456294</id><snippet>from inspect import stack

print stack()[1][1]
</snippet></ROW><ROW><id>17456294</id><snippet>stack</snippet></ROW><ROW><id>17456294</id><snippet>(frame, filename, lineno, function, code_context, index)</snippet></ROW><ROW><id>17456294</id><snippet>stack()[0]</snippet></ROW><ROW><id>17456294</id><snippet>[1]</snippet></ROW><ROW><id>17456294</id><snippet>code_context</snippet></ROW><ROW><id>17456294</id><snippet>stack()</snippet></ROW><ROW><id>17456294</id><snippet># print 5 lines of context, 3rd line will be the 'current' line.
print stack(5)[1][-2]
</snippet></ROW><ROW><id>17456294</id><snippet>0</snippet></ROW><ROW><id>17456294</id><snippet>$ cat a.py 
import d
d.init()
$ cp a.py b.py; cp a.py c.py
$ cat d.py
import inspect

def init():
    print inspect.stack(0)[1][1]
$ python a.py
a.py
$ python b.py
b.py
</snippet></ROW><ROW><id>17456327</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; a='ASD456'
&gt;&gt;&gt; b='ASF456'
&gt;&gt;&gt; seq=difflib.SequenceMatcher(a=a.lower(), b=b.lower())
&gt;&gt;&gt; seq.ratio()
0.83333333333333337
</snippet></ROW><ROW><id>17456409</id><snippet>cr.save()
cr.scale(scale_xy, scale_xy)
cr.xxx_place_image(...)
cr.restore()
</snippet></ROW><ROW><id>17456410</id><snippet>ax.set_xlim</snippet></ROW><ROW><id>17456410</id><snippet>ax.set_ylim</snippet></ROW><ROW><id>17456410</id><snippet>x</snippet></ROW><ROW><id>17456410</id><snippet>y</snippet></ROW><ROW><id>17456410</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

filename = '/tmp/graph.png'
G = nx.complete_graph(10)
pos = nx.spring_layout(G)
xy = np.row_stack([point for key, point in pos.iteritems()])
x, y = np.median(xy, axis=0)
fig, ax = plt.subplots()
nx.draw(G, pos, with_labels=False, node_size=1)
ax.set_xlim(x-0.25, x+0.25)
ax.set_ylim(y-0.25, y+0.25)
plt.savefig(filename, bbox_inches=0, orientation='landscape', pad_inches=0.1)
</snippet></ROW><ROW><id>17456410</id><snippet>ax.set_xlim</snippet></ROW><ROW><id>17456410</id><snippet>ax.set_ylim</snippet></ROW><ROW><id>17456410</id><snippet>&gt;&gt;&gt; ax.get_xlim()
(-0.20000000000000001, 1.2000000000000002)

ax.get_ylim()
(-0.20000000000000001, 1.2000000000000002)
</snippet></ROW><ROW><id>17456549</id><snippet>{e&lt;=1}</snippet></ROW><ROW><id>17456549</id><snippet>format</snippet></ROW><ROW><id>17456549</id><snippet>{e&lt;=1}</snippet></ROW><ROW><id>17456549</id><snippet>print regex.search(test_1 + '{e&lt;=1}', statement).group(0)
</snippet></ROW><ROW><id>17456549</id><snippet>print regex.search('{}{{e&lt;=1}}'.format(test_1), statement).group(0)
</snippet></ROW><ROW><id>17456549</id><snippet>print regex.search('{}{{e&lt;={}}}'.format(test_1, num_of_errors), statement).group(0)
</snippet></ROW><ROW><id>17456583</id><snippet>screen</snippet></ROW><ROW><id>17456583</id><snippet>my_image = load_my_image()
screen.blit(my_image, position)
screen.blit(my_image, another_position)
</snippet></ROW><ROW><id>17456583</id><snippet>pygame.draw.circle(screen, COLOR, POS, RADIUS, WIDTH)
</snippet></ROW><ROW><id>17456583</id><snippet>circle_surface = pygame.draw.circle(COLOR, RADIUS, WIDTH)
screen.blit(circle_surface, POS)
</snippet></ROW><ROW><id>17456583</id><snippet>pygame.draw.circle()</snippet></ROW><ROW><id>17456583</id><snippet>render()</snippet></ROW><ROW><id>17456775</id><snippet>from BeautifulSoup import BeautifulStoneSoup
soup = BeautifulStoneSoup(xml_string)
whatyouwant = soup.find('second-tag')['status']
</snippet></ROW><ROW><id>17456811</id><snippet>check_call</snippet></ROW><ROW><id>17456811</id><snippet>check_call</snippet></ROW><ROW><id>17456811</id><snippet>convert_image</snippet></ROW><ROW><id>17456811</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>17456811</id><snippet>def check_call(args):
    subprocess.check_call(args)
</snippet></ROW><ROW><id>17456811</id><snippet>check_call</snippet></ROW><ROW><id>17456811</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>17456811</id><snippet>import unittest

class ConvertImageTest(unittest.TestCase):

    def test_convert_image(self):

        # Test version of check_call to do the assertion
        def assert_check_call(args):
            expected = ['convert', '/tmp/myimage.png', '-quality', 100, '/tmp/myimage.jpg']
            self.assertEquals(expected, args)

        # Replace check_call with our test version
        my.module.check_call = assert_check_call

        # Perform the test
        convert_image('/tmp/myimage.png')
</snippet></ROW><ROW><id>17456811</id><snippet>my.module.check_call</snippet></ROW><ROW><id>17456982</id><snippet>row['phone']</snippet></ROW><ROW><id>17456982</id><snippet>None</snippet></ROW><ROW><id>17456982</id><snippet>row['phone'] = row['phone'].split() if row['phone'] else []
row['email'] = row['email'].split() if row['email'] else []
row['website'] = row['website'].split() if row['website'] else []
</snippet></ROW><ROW><id>17456982</id><snippet>[]</snippet></ROW><ROW><id>17456982</id><snippet>None</snippet></ROW><ROW><id>17456982</id><snippet>""</snippet></ROW><ROW><id>17456982</id><snippet>row['phone'] = row['phone'].split() if row.get('phone') else []
row['email'] = row['email'].split() if row.get('email') else []
row['website'] = row['website'].split() if row.get('website') else []
</snippet></ROW><ROW><id>17457555</id><snippet>webapps(root directory)
    nichesite
        static
        django_project_name
            --&gt; myproject.wsgi
            --&gt; settings.py
            --&gt; urls.py
            --&gt; views.py
        manage.py
</snippet></ROW><ROW><id>17457612</id><snippet>&gt;&gt;&gt; def show_table(multiplicand, product_limit):
    multiplier = 1
    while True:
        product = multiplicand * multiplier
        if product &gt; product_limit:
            break
        print(multiplicand, 'x', multiplier, '=', product)
        multiplier += 1


&gt;&gt;&gt; show_table(5, 100)
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50
5 x 11 = 55
5 x 12 = 60
5 x 13 = 65
5 x 14 = 70
5 x 15 = 75
5 x 16 = 80
5 x 17 = 85
5 x 18 = 90
5 x 19 = 95
5 x 20 = 100
&gt;&gt;&gt; def show_table(multiplicand, product_limit):
    for multiplier in range(1, product_limit // multiplicand + 1):
        print(multiplicand, 'x', multiplier, '=', multiplicand * multiplier)


&gt;&gt;&gt; show_table(5, 100)
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50
5 x 11 = 55
5 x 12 = 60
5 x 13 = 65
5 x 14 = 70
5 x 15 = 75
5 x 16 = 80
5 x 17 = 85
5 x 18 = 90
5 x 19 = 95
5 x 20 = 100
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17457833</id><snippet>C:\RPS\python\epd32</snippet></ROW><ROW><id>17457833</id><snippet>C:\RPS\python\epd32\opencv\build\python\2.7</snippet></ROW><ROW><id>17457833</id><snippet>.pth</snippet></ROW><ROW><id>17457833</id><snippet>C:\Users\rsignell\AppData\Local\Enthought\Canopy32\User\Lib\site-packages\opencv.pth</snippet></ROW><ROW><id>17457833</id><snippet>import cv2</snippet></ROW><ROW><id>17457833</id><snippet>&lt;opencv&gt;\build\python\2.7\cv2.pyd</snippet></ROW><ROW><id>17457833</id><snippet>site-packages</snippet></ROW><ROW><id>17457833</id><snippet>&lt;opencv&gt;\build\python\2.7\cv2.pyd</snippet></ROW><ROW><id>17457833</id><snippet>site-packages</snippet></ROW><ROW><id>17457843</id><snippet>self.canvas = Canvas(...)
self.canvas.bind_all("&lt;MouseWheel&gt;", self._on_mousewheel)
...
def _on_mousewheel(self, event):
    self.canvas.yview_scroll(-1*(event.delta/120), "units")
</snippet></ROW><ROW><id>17457843</id><snippet>self.canvas.bind_all</snippet></ROW><ROW><id>17457843</id><snippet>root.bind_all</snippet></ROW><ROW><id>17457843</id><snippet>&lt;MouseWheel&gt;</snippet></ROW><ROW><id>17457843</id><snippet>event.delta</snippet></ROW><ROW><id>17457843</id><snippet>&lt;MouseWheel&gt;</snippet></ROW><ROW><id>17457843</id><snippet>event.delta</snippet></ROW><ROW><id>17457843</id><snippet>&lt;Button-4&gt;</snippet></ROW><ROW><id>17457843</id><snippet>&lt;Button-5&gt;</snippet></ROW><ROW><id>17457843</id><snippet>event.delta</snippet></ROW><ROW><id>17457858</id><snippet>windowed_contents.c.row_number</snippet></ROW><ROW><id>17457858</id><snippet>label()</snippet></ROW><ROW><id>17457858</id><snippet>select_entity_from()</snippet></ROW><ROW><id>17457858</id><snippet>select_from()</snippet></ROW><ROW><id>17457858</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Content(Base):
    __tablename__ = 'contents'

    grandma_id = Column(Integer, primary_key=True)
    author_id = Column(Integer, primary_key=True)


s = Session()

unique_users_contents = s.query(Content).distinct(
                            Content.grandma_id, Content.author_id).\
                            subquery('c')

q = s.query(
        Content,
        func.row_number().over(
                partition_by=Content.grandma_id,
                order_by=func.random()).label("row_number")
    ).select_entity_from(unique_users_contents).subquery()

q = s.query(Content).select_entity_from(q).filter(q.c.row_number &lt;= 4)

print q
</snippet></ROW><ROW><id>17457875</id><snippet>row</snippet></ROW><ROW><id>17457875</id><snippet> write_file.writerow(row)
</snippet></ROW><ROW><id>17457875</id><snippet>OrderedDict</snippet></ROW><ROW><id>17457875</id><snippet>from collections import OrderedDict

people = OrderedDict()
with(open("ieca_first_col_fake_text.txt", "rU")) as f:
    sheet = csv.DictReader(f,delimiter="\t")
    for row in sheet:
        name = row.get('name')
        if name:
            contact_information = people.setdefault(name, {})
            contact_information.setdefault('phone', set()).add(row.get('phone'))
            contact_information.setdefault('email', set()).add(row.get('email'))
            contact_information.setdefault('website', set()).add(row.get('website'))

    write_file = csv.DictWriter(open('duplicates_deleted.csv','w'), ['name','phone','email','website'], restval='', delimiter = '\t')
    for name, contact_information in people:
        row_dict = {'name': name}.update({list(contact_field) for contact_field in contact_information.values()})
        write_file.writerow(row_dict)
</snippet></ROW><ROW><id>17457875</id><snippet>set</snippet></ROW><ROW><id>17457875</id><snippet>OrderedSet</snippet></ROW><ROW><id>17457875</id><snippet>OrderedDict</snippet></ROW><ROW><id>17457950</id><snippet>random.random()</snippet></ROW><ROW><id>17457950</id><snippet>random</snippet></ROW><ROW><id>17457950</id><snippet>random</snippet></ROW><ROW><id>17457950</id><snippet>random</snippet></ROW><ROW><id>17457950</id><snippet>randint</snippet></ROW><ROW><id>17457950</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.random()
0.376462621569017
</snippet></ROW><ROW><id>17457950</id><snippet>random.random</snippet></ROW><ROW><id>17457950</id><snippet>random(...)
    random() -&gt; x in the interval [0, 1).
</snippet></ROW><ROW><id>17457950</id><snippet>random()</snippet></ROW><ROW><id>17457950</id><snippet>&gt;&gt;&gt; from random import random  #imports only random() from random module
&gt;&gt;&gt; random()                   #now use random() directly,
0.7979255998231091
</snippet></ROW><ROW><id>17458010</id><snippet>regex</snippet></ROW><ROW><id>17458010</id><snippet>import regex
sequence = 'aaaaaaaaaaaabbbbbbbbbbbbcccccccccccc' #being searched
query = 'aaabbbbbbbbbbbbccc' #100% coverage
query_1 = 'aaaabbbbbbbbcbbbcccc' #95% coverage
query_2 = 'aaabbbbcbbbbbcbccc' #90% coverage
threshold = 0.97
queries = (query, query_1, query_2)
for q in queries:
    error = int(len(q) - (len(q)*threshold))
    m = regex.search(r'(%s){e&lt;=%d}'%(q,error), sequence)
    print 'match' if m else 'nomatch'
</snippet></ROW><ROW><id>17458033</id><snippet>import numpy as np
df = DataFrame({
'k1': ['na'] * 3 + ['two'] * 4,
'k2': [1, 'na', 2, 'na', 3, 4, 4]})

print df

df = df.replace('na', np.nan)

print df
</snippet></ROW><ROW><id>17458090</id><snippet>s</snippet></ROW><ROW><id>17458090</id><snippet>sorted(s)</snippet></ROW><ROW><id>17458090</id><snippet>s</snippet></ROW><ROW><id>17458090</id><snippet>&gt;&gt;&gt; s = set(['0.000000000', '0.009518000', '10.277200999', '0.030810999', '0.018384000', '4.918560000'])
&gt;&gt;&gt; sorted(s)
['0.000000000', '0.009518000', '0.018384000', '0.030810999', '10.277200999', '4.918560000']
</snippet></ROW><ROW><id>17458090</id><snippet>sorted</snippet></ROW><ROW><id>17458090</id><snippet>list</snippet></ROW><ROW><id>17458090</id><snippet>set</snippet></ROW><ROW><id>17458090</id><snippet>{1, 2}</snippet></ROW><ROW><id>17458090</id><snippet>{2, 1}</snippet></ROW><ROW><id>17458090</id><snippet>key</snippet></ROW><ROW><id>17458090</id><snippet>&gt;&gt;&gt; sorted(s, key=float)
['0.000000000', '0.009518000', '0.018384000', '0.030810999', '4.918560000', '10.277200999']
</snippet></ROW><ROW><id>17458107</id><snippet>wtype=np.dtype([('x',x.dtype),('y',y.dtype),('z',z.dtype)])
w=empty(len(x),dtype=wtype)
w['x']=x
w['y']=y
w['z']=z
</snippet></ROW><ROW><id>17458187</id><snippet>Requests are throttled by the server to one per second per IP address. Your application should (but doesnt have to) take this into account and throttle requests locally, too.</snippet></ROW><ROW><id>17458187</id><snippet>def _response(self):
    if not self._cached_response:
        self._cached_response=self._load_response_from_disk()
    if not self._cached_response:
        if not self._check_user_agent():
            raise UserAgentError("Invalid or no User-Agent set.")
        self._cached_response = requests.get(self._uri, params=self._params, headers=self._headers)
        self._save_response_to_disk()

    return self._cached_response
</snippet></ROW><ROW><id>17458187</id><snippet>_uri, _params, and _headers</snippet></ROW><ROW><id>17458449</id><snippet>import multiprocessing

def f(x): return x**2

P = multiprocessing.Pool()
for n in xrange(2000):
    sol = list(P.imap(f, range(20)))
</snippet></ROW><ROW><id>17458578</id><snippet>'''something'''
</snippet></ROW><ROW><id>17458578</id><snippet>'something'
</snippet></ROW><ROW><id>17458578</id><snippet>sh</snippet></ROW><ROW><id>17458578</id><snippet>sh</snippet></ROW><ROW><id>17458578</id><snippet>#</snippet></ROW><ROW><id>17458578</id><snippet>sh</snippet></ROW><ROW><id>17458578</id><snippet>sh</snippet></ROW><ROW><id>17458578</id><snippet>''</snippet></ROW><ROW><id>17458578</id><snippet>''</snippet></ROW><ROW><id>17458578</id><snippet>exec python -u -- "$0" ${1+"$@"}</snippet></ROW><ROW><id>17458578</id><snippet># '''</snippet></ROW><ROW><id>17458578</id><snippet>'exec python -u -- "$0" ${1+"$@"} #</snippet></ROW><ROW><id>17458578</id><snippet>sh</snippet></ROW><ROW><id>17458578</id><snippet>python -u --</snippet></ROW><ROW><id>17458578</id><snippet>__main__</snippet></ROW><ROW><id>17458605</id><snippet>timeit</snippet></ROW><ROW><id>17458605</id><snippet>timeit</snippet></ROW><ROW><id>17458605</id><snippet>time.time()</snippet></ROW><ROW><id>17458605</id><snippet>from time import time

t0 = time()
myfunc()
t1 = time()
print t1 - t0
</snippet></ROW><ROW><id>17458605</id><snippet>time.clock()</snippet></ROW><ROW><id>17458640</id><snippet>everyone</snippet></ROW><ROW><id>17458640</id><snippet>everyone=[]</snippet></ROW><ROW><id>17458640</id><snippet>for</snippet></ROW><ROW><id>17458640</id><snippet>everyone</snippet></ROW><ROW><id>17458640</id><snippet>import csv

with open('gradebook.csv','rb') as g:
    gr=csv.reader(g)
    everyone=[]  # declare everyone here
    for row in gr:
        if row[0]=='User ID':
            pass
        else:
            studentid=row[0]
            individualassignments=[]               
            for element in row[1:]:
                if element=='':
                    pass
                else:
                    individualassignments.append(element)

            individualassignments.append(studentid)
            everyone.append(individualassignments)
</snippet></ROW><ROW><id>17458658</id><snippet>import io
import pandas as pd

text = '''\
sample_date                            metric_name  sample
2012-10-03 21:30:18.742307+00:00  linkedin_profile     257
2012-10-03 21:30:25.132189+00:00   twitter_profile     972
2012-10-03 21:30:26.063389+00:00     youtube_video   10393
2012-10-03 21:30:26.178347+00:00     youtube_video    2866
2012-10-03 21:30:26.215093+00:00     youtube_video    5877
'''        
df = pd.read_table(io.BytesIO(text), sep='\s{2,}', parse_dates=[0,1])
</snippet></ROW><ROW><id>17458658</id><snippet>sample</snippet></ROW><ROW><id>17458658</id><snippet>dates = df['sample_date'].apply(lambda x: x.date())
total = df.groupby([dates, 'metric_name']).sum()
print(total)
#                               sample
# sample_date metric_name             
# 2012-10-03  linkedin_profile     257
#             twitter_profile      972
#             youtube_video      19136
</snippet></ROW><ROW><id>17458658</id><snippet>metric_name</snippet></ROW><ROW><id>17458658</id><snippet>'youtube_video'</snippet></ROW><ROW><id>17458658</id><snippet>youtube_df = (df[df['metric_name'] == 'youtube_video'])
</snippet></ROW><ROW><id>17458658</id><snippet>dates = youtube_df['sample_date'].apply(lambda x: x.date())
youtube_total = youtube_df.groupby([dates]).sum()
print(youtube_total)
# sample_date        
# 2012-10-03    19136
</snippet></ROW><ROW><id>17458811</id><snippet>title_data['1']</snippet></ROW><ROW><id>17458811</id><snippet>title_data['1'][1]</snippet></ROW><ROW><id>17458811</id><snippet>&gt;&gt;&gt; title_data = {'1':['City','State','Town']}
&gt;&gt;&gt; title_data['1'][1]
'State'
</snippet></ROW><ROW><id>17458811</id><snippet>__getitem__</snippet></ROW><ROW><id>17458811</id><snippet>_getitem_</snippet></ROW><ROW><id>17458811</id><snippet>AttributeError</snippet></ROW><ROW><id>17458811</id><snippet>&gt;&gt;&gt; title_data['1'].__getitem__(1)
'State'
</snippet></ROW><ROW><id>17458811</id><snippet>KeyError</snippet></ROW><ROW><id>17458811</id><snippet>title_data[1].__getitem__(1)</snippet></ROW><ROW><id>17458825</id><snippet>in</snippet></ROW><ROW><id>17458825</id><snippet>mystring.startswith()</snippet></ROW><ROW><id>17458825</id><snippet>mystring.endswith()</snippet></ROW><ROW><id>17458832</id><snippet>import          curses

stdScr = curses.initscr()
myInput = stdScr.getstr()
curses.endwin()
print(myInput.decode('utf-8'))
</snippet></ROW><ROW><id>17458921</id><snippet>&gt;&gt;&gt; fid = open('filename.bin', 'rb')
&gt;&gt;&gt; dim = np.fromfile(fid, dtype='&gt;u4')
</snippet></ROW><ROW><id>17458921</id><snippet>dtype</snippet></ROW><ROW><id>17458923</id><snippet>
     from django.code.urlresolvers import reverse


     def unsub_view(request, viewid):
         if request.method == 'POST':
            if user_is_subscribed:
                #Unsubscribe the user.
                submit_url = reverse('unsub_view', viewid)
                return direct_to_template(request, '/app/unsub.html', {'user': user, 'submit_url'})
            else:
                #Show error meessage.

</snippet></ROW><ROW><id>17458923</id><snippet>...
&lt;form method='post' action='{{ submit_url }}'&gt;
     {% csrf_token %}
     &lt;input type="hidden" value="{{ user_id }}" name="user_id" /&gt;
     &lt;input type="submit" value="unsubscribe"/&gt;
&lt;/form&gt;
...
</snippet></ROW><ROW><id>17459015</id><snippet>def __init__(self, database = None):
    if database is None:
        self.db = SQLEngine('etc.db')
    else:
        self.db = database
</snippet></ROW><ROW><id>17459182</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>17459182</id><snippet>&gt;&gt;&gt; string_list = ["PII", "AZO", "CVCO", "MOD"]
&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; for a, b in combinations(string_list, 2):
...     print(a, b)
... 
PII AZO
PII CVCO
PII MOD
AZO CVCO
AZO MOD
CVCO MOD
</snippet></ROW><ROW><id>17459258</id><snippet>os.devnull</snippet></ROW><ROW><id>17459258</id><snippet>import os, sys
for _name in ('stdin', 'stdout', 'stderr'):
    if getattr(sys, _name) is None:
        setattr(sys, _name, open(os.devnull, 'r' if _name == 'stdin' else 'w'))
del _name # clean up this module's name space a little (optional)
from wsgiref.handlers ...
</snippet></ROW><ROW><id>17459295</id><snippet>f</snippet></ROW><ROW><id>17459295</id><snippet>print</snippet></ROW><ROW><id>17459295</id><snippet>f</snippet></ROW><ROW><id>17459295</id><snippet>print</snippet></ROW><ROW><id>17459295</id><snippet>double precision x
....
x = f(xs(1))
print *, x
</snippet></ROW><ROW><id>17459295</id><snippet>result</snippet></ROW><ROW><id>17459295</id><snippet>subroutine stack2(f,xs,result,nf,nxs)
    implicit none
    integer,          intent(in)  :: nf, nxs
    double precision, intent(in)  :: xs(nxs)
    double precision, intent(out) :: result(nf)
    external f
    ...
end subroutine stack2
</snippet></ROW><ROW><id>17459295</id><snippet>result</snippet></ROW><ROW><id>17459295</id><snippet>f2py</snippet></ROW><ROW><id>17459295</id><snippet>result</snippet></ROW><ROW><id>17459295</id><snippet>stack2</snippet></ROW><ROW><id>17459295</id><snippet>xs</snippet></ROW><ROW><id>17459295</id><snippet>do</snippet></ROW><ROW><id>17459295</id><snippet>xs</snippet></ROW><ROW><id>17459295</id><snippet>f</snippet></ROW><ROW><id>17459295</id><snippet>ELEMENTAL</snippet></ROW><ROW><id>17459295</id><snippet>f2py</snippet></ROW><ROW><id>17459295</id><snippet>f2py</snippet></ROW><ROW><id>17459295</id><snippet>ELEMENTAL</snippet></ROW><ROW><id>17459295</id><snippet>result = result + f(xs(I))</snippet></ROW><ROW><id>17459295</id><snippet>result</snippet></ROW><ROW><id>17459295</id><snippet>subroutine stack2(f,xs,result,nf,nxs)
    implicit none
    integer,          intent(in)  :: nf, nxs
    double precision, intent(in)  :: xs(nxs)
    double precision, intent(out) :: result(nf)
    double precision :: x
    integer          :: I
    external f
    result = 0.0d0 ! Make this a double constant since result is double
    do I = 1,nxs
        x = f(xs(I))
        result = result + x
        print *, x
    end do
    print *, xs
    return ! Not needed in Fortran 90
end subroutine stack2
</snippet></ROW><ROW><id>17459295</id><snippet>f2py</snippet></ROW><ROW><id>17459295</id><snippet>result</snippet></ROW><ROW><id>17459295</id><snippet>import numpy as np
from stack2 import stack2
def func(x):
    return x**2

if __name__ == '__main__':
    xs = np.linspace(0.,10.,10)
    ans =  stack2(func,xs,5) # This was changed
    print 'ans:',ans
</snippet></ROW><ROW><id>17459370</id><snippet>reduce()</snippet></ROW><ROW><id>17459370</id><snippet>foo = reduce(getattr, fields, bundle.obj)
</snippet></ROW><ROW><id>17459370</id><snippet>foo = bundle.obj
for field in fields:
    foo = getattr(foo, field)
</snippet></ROW><ROW><id>17459389</id><snippet>import signal

def print_linenum(signum, frame):
    print "Currently at line", frame.f_lineno

signal.signal(signal.SIGINT, print_linenum)
</snippet></ROW><ROW><id>17459389</id><snippet>kill</snippet></ROW><ROW><id>17459389</id><snippet>signal.alarm()</snippet></ROW><ROW><id>17459389</id><snippet>frame</snippet></ROW><ROW><id>17459635</id><snippet>tkFileDialog.askopenfile()</snippet></ROW><ROW><id>17459635</id><snippet>FileObject.read()</snippet></ROW><ROW><id>17459635</id><snippet>def choosefile():
filec = tkFileDialog.askopenfile()
filecontents = filec.read()
</snippet></ROW><ROW><id>17459641</id><snippet>import urllib2

with open('filename','wb') as f:
    f.write(urllib2.urlopen(URL).read())
    f.close()
print "Download Complete!"
---------------------------------------
import requests

r = requests.get(URL)
with open("filename", "wb") as code:
    code.write(r.content)
print "Download Complete!"
---------------------------------------

import urllib

urllib.urlretrieve(URL, "filename")
print "Download Complete!"
</snippet></ROW><ROW><id>17459641</id><snippet>filename</snippet></ROW><ROW><id>17459641</id><snippet>URL</snippet></ROW><ROW><id>17459666</id><snippet>dict</snippet></ROW><ROW><id>17459666</id><snippet>from nltk.tokenize import word_tokenize, sent_tokenize
from collections import defaultdict
import numpy as np
text = "Barbara is good. Barbara is friends with Benny. Benny is bad."

sparse_matrix = defaultdict(lambda: defaultdict(lambda: 0))

for sent in sent_tokenize(text):
    words = word_tokenize(sent)
    for word1 in words:
        for word2 in words:
            sparse_matrix[word1][word2]+=1

print sparse_matrix
&gt;&gt; defaultdict(&lt;function &lt;lambda&gt; at 0x7f46bc3587d0&gt;, {
'good': defaultdict(&lt;function &lt;lambda&gt; at 0x3504320&gt;, 
    {'is': 1, 'good': 1, 'Barbara': 1, '.': 1}), 
'friends': defaultdict(&lt;function &lt;lambda&gt; at 0x3504410&gt;, 
    {'friends': 1, 'is': 1, 'Benny': 1, '.': 1, 'Barbara': 1, 'with': 1}), etc..
</snippet></ROW><ROW><id>17459666</id><snippet>sparse_matrix['good']['Barbara']</snippet></ROW><ROW><id>17459666</id><snippet>1</snippet></ROW><ROW><id>17459666</id><snippet>sparse_matrix['bad']['Barbara']</snippet></ROW><ROW><id>17459666</id><snippet>0</snippet></ROW><ROW><id>17459666</id><snippet>0</snippet></ROW><ROW><id>17459666</id><snippet>defaultdict</snippet></ROW><ROW><id>17459666</id><snippet>lexicon_size=len(sparse_matrix)
def mod_hash(x, m):
    return hash(x) % m
dense_matrix = np.zeros((lexicon_size, lexicon_size))

for k in sparse_matrix.iterkeys():
    for k2 in sparse_matrix[k].iterkeys():
        dense_matrix[mod_hash(k, lexicon_size)][mod_hash(k2, lexicon_size)] = \
            sparse_matrix[k][k2]

print dense_matrix
&gt;&gt;
[[ 0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  1.  1.  1.  1.  0.  1.]
 [ 0.  0.  1.  1.  1.  0.  0.  1.]
 [ 0.  0.  1.  1.  1.  1.  0.  1.]
 [ 0.  0.  1.  0.  1.  2.  0.  2.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  1.  1.  1.  2.  0.  3.]]
</snippet></ROW><ROW><id>17459738</id><snippet>print "Enter how many numbers you will enter."
print "Maximum amount is 10: "
</snippet></ROW><ROW><id>17459738</id><snippet>general</snippet></ROW><ROW><id>17459738</id><snippet>aon = raw_input()
try:
    aon = int(aon)
    if aon &gt;= 10:
        print "I cannot average more than 10 numbers."
        general()
    else:
        start_average()
except ValueError:
    print "You entered an invalid input, try again."
    general()
</snippet></ROW><ROW><id>17459738</id><snippet>def foo():
    bar()

def bar():
    print('Hi!')

foo()
</snippet></ROW><ROW><id>17459738</id><snippet>bar</snippet></ROW><ROW><id>17459738</id><snippet>bar</snippet></ROW><ROW><id>17459738</id><snippet>bar</snippet></ROW><ROW><id>17459738</id><snippet>bar</snippet></ROW><ROW><id>17459738</id><snippet>elif aon == 2:
    def first_number():
        print "First number: "
        first_ni = raw_input()
        second_number()
    first_number()
    def second_number():
        print "Second number: "
        second_ni = raw_input()
        ans_two = first_ni / second_ni
    second_number()
    final_two()
</snippet></ROW><ROW><id>17459738</id><snippet>first_ni</snippet></ROW><ROW><id>17459738</id><snippet>first_number</snippet></ROW><ROW><id>17459738</id><snippet>first_number</snippet></ROW><ROW><id>17459738</id><snippet>first_ni</snippet></ROW><ROW><id>17459738</id><snippet>second_number</snippet></ROW><ROW><id>17459738</id><snippet>second_number</snippet></ROW><ROW><id>17459738</id><snippet>first_ni</snippet></ROW><ROW><id>17459738</id><snippet>locals()</snippet></ROW><ROW><id>17459738</id><snippet>globals()</snippet></ROW><ROW><id>17459738</id><snippet>dir()</snippet></ROW><ROW><id>17459874</id><snippet>elif</snippet></ROW><ROW><id>17459874</id><snippet>if choice == "1":
    ...
elif choice == "2":
    ...
else: # choice != "1" and choice != "2"
    ...
</snippet></ROW><ROW><id>17459874</id><snippet>if</snippet></ROW><ROW><id>17459874</id><snippet>if choice == "1":
    ...

if choice == "2":
    ...
else: # choice != 2
    ...
</snippet></ROW><ROW><id>17459875</id><snippet>time.time ()</snippet></ROW><ROW><id>17459898</id><snippet>if losttwice &lt;= 2:
    bet = random.choice((startingbet, bet*2))
</snippet></ROW><ROW><id>17459899</id><snippet>type :: A
  real :: value
  integer :: descriptor
contains
  procedure :: writetype
  generic :: write(formatted) =&gt; writetype
end type A
...
subroutine writetype(dtv, unit, iotype, v_list, iostat, iomsg)
  ! Argument names here from the std, but you can name them differently.
  class(A), intent(in) :: dtv         ! Object to write.
  integer, intent(in) :: unit         ! Internal unit to write to.
  character(*), intent(in) :: iotype  ! LISTDIRECTED or DTxxx
  integer, intent(in) :: v_list(:)    ! parameters from fmt spec.
  integer, intent(out) :: iostat      ! non zero on error, etc.
  character(*), intent(inout) :: iomsg  ! define if iostat non zero.
  ...
  write (unit, "(F9.4,1X,A)", IOSTAT=iostat, IOMSG=iomsg)  &amp;
      dtv%value, describe_foo(dtv%descriptor)
end subroutine writetype
</snippet></ROW><ROW><id>17459915</id><snippet>f.close()</snippet></ROW><ROW><id>17459915</id><snippet>break</snippet></ROW><ROW><id>17459915</id><snippet>continue</snippet></ROW><ROW><id>17459915</id><snippet>return</snippet></ROW><ROW><id>17459915</id><snippet>try:</snippet></ROW><ROW><id>17459915</id><snippet>finally:</snippet></ROW><ROW><id>17459915</id><snippet>f = open(filename)
try:
    # My Code
finally:
    f.close()
</snippet></ROW><ROW><id>17459915</id><snippet>close</snippet></ROW><ROW><id>17459915</id><snippet>__enter__</snippet></ROW><ROW><id>17459915</id><snippet>__exit__</snippet></ROW><ROW><id>17459915</id><snippet>f = open()
f.__enter__()
try:
    # My Code
finally:
    f.__exit__()
</snippet></ROW><ROW><id>17459915</id><snippet>open</snippet></ROW><ROW><id>17459915</id><snippet>file</snippet></ROW><ROW><id>17459915</id><snippet>io</snippet></ROW><ROW><id>17459915</id><snippet>def __exit__(self):
    self.close()
</snippet></ROW><ROW><id>17459915</id><snippet>close</snippet></ROW><ROW><id>17459915</id><snippet>close</snippet></ROW><ROW><id>17459915</id><snippet>close</snippet></ROW><ROW><id>17460000</id><snippet>import os
import sys

# Import Custom libraries
from BeautifulSoup import BeautifulStoneSoup

xml_str = \
'''
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;first-tag&gt;
      &lt;second-tag&gt;
        &lt;events-data&gt;
           &lt;event-date&gt;
                &lt;date&gt;20040913&lt;/date&gt;
           &lt;/event-date&gt;
        &lt;/events-data&gt;

      &lt;events-data&gt;
         &lt;event-date&gt;
           &lt;date&gt;20040913&lt;/date&gt;
         &lt;/event-date&gt;
      &lt;/events-data&gt; 
     &lt;/second-tag&gt;
   &lt;/first-tag&gt;
'''
soup = BeautifulStoneSoup(xml_str)

event_data_location = lambda x: x.name == "events-data"

events = soup.findAll(event_data_location)
if(events):
    # The last event-data
    print events[-1].text
</snippet></ROW><ROW><id>17460020</id><snippet>upper</snippet></ROW><ROW><id>17460020</id><snippet>{{ listing.listing|upper }}
</snippet></ROW><ROW><id>17460020</id><snippet>class Listing(models.Model):
    def uppercase_listing(self):
       return self.listing.upper()
</snippet></ROW><ROW><id>17460020</id><snippet>{{ listing.uppercase_listing }}
</snippet></ROW><ROW><id>17460055</id><snippet>yesterday</snippet></ROW><ROW><id>17460055</id><snippet>&gt;&gt;&gt;import datetime
&gt;&gt;&gt;yesterday = datetime.date.today() - datetime.timedelta(1)
&gt;&gt;&gt;unix_time= yesterday.strftime("%s") #Second as a decimal number [00,61] (or Unix Timestamp)
&gt;&gt;&gt;print unix_time
'1372737600'
</snippet></ROW><ROW><id>17460104</id><snippet>property</snippet></ROW><ROW><id>17460104</id><snippet>&gt;&gt;&gt; b = Boo(1)
&gt;&gt;&gt; '__x' in dir(b)
False
&gt;&gt;&gt; '_Boo__x' in dir(b)
True
</snippet></ROW><ROW><id>17460104</id><snippet>&gt;&gt;&gt; b.__x = 2
</snippet></ROW><ROW><id>17460104</id><snippet>getx</snippet></ROW><ROW><id>17460104</id><snippet>_x</snippet></ROW><ROW><id>17460104</id><snippet>getx</snippet></ROW><ROW><id>17460104</id><snippet>x</snippet></ROW><ROW><id>17460204</id><snippet>item.key.id</snippet></ROW><ROW><id>17460204</id><snippet>(r'^edit/(\d+)$', 'views.edit'), 
</snippet></ROW><ROW><id>17460204</id><snippet>(r'^edit/(\d*)$', 'views.edit'),
</snippet></ROW><ROW><id>17460286</id><snippet>import re
import numpy as np
import scipy.interpolate as interpolate
import matplotlib.pyplot as plt

text = '--1--4-----5-3-22---55-'
parts = [c for c in re.split(r'(-|\d+)', text) if c]
data = np.array([(x, int(y)) for x, y in enumerate(parts) if y != '-'])
x, y = data.T
f = interpolate.interp1d(x, y, kind='cubic')

newx = np.linspace(x.min(), x.max())
newy = f(newx)
plt.plot(newx, newy)
plt.scatter(x, y, s=20)
plt.show()
</snippet></ROW><ROW><id>17460299</id><snippet>input()</snippet></ROW><ROW><id>17460359</id><snippet>from __future__ import division
num = [1,2,3,4,5,6,3,31,1,0,120,0,0]
divisor = 10
print [divisor/x for x in num if x != 0]
</snippet></ROW><ROW><id>17460359</id><snippet>[10.0, 5.0, 3.3333333333333335, 2.5, 2.0, 1.6666666666666667, 3.3333333333333335, 0.3225806451612903, 10.0, 0.08333333333333333]
</snippet></ROW><ROW><id>17460425</id><snippet>contour</snippet></ROW><ROW><id>17460425</id><snippet>levels=[0]</snippet></ROW><ROW><id>17460425</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def g(R, r):
    return (np.sqrt(2.0 * (R + r) / (r * R)) - (1 + np.sqrt(R)) / np.sqrt(R) -
            np.sqrt(2.0 / (r * (1 + r))) * (1 - r) -
            (1.0 / np.sqrt(R) - np.sqrt(2.0) * (1 - R) / np.sqrt(R * (1 + R))
             - 1))

R, r = np.mgrid[1:30:200j, 1:100:200j]
Z = g(R,r)
plt.contour(R, r, Z, colors='k', levels=[0]) 
plt.show()
</snippet></ROW><ROW><id>17460453</id><snippet>import urllib
xml_file= urllib.urlopen("somefileID.xml")
</snippet></ROW><ROW><id>17460453</id><snippet>xml_file= urllib.urlopen("http://site.com/xml-download")</snippet></ROW><ROW><id>17460533</id><snippet>reflect_x</snippet></ROW><ROW><id>17460533</id><snippet>p1</snippet></ROW><ROW><id>17460533</id><snippet>p2</snippet></ROW><ROW><id>17460533</id><snippet>p2 = p1.reflect_x()
</snippet></ROW><ROW><id>17460533</id><snippet>p2 = p1.reflect_x
</snippet></ROW><ROW><id>17460533</id><snippet>p2</snippet></ROW><ROW><id>17460533</id><snippet>p1</snippet></ROW><ROW><id>17460533</id><snippet>reflect_x</snippet></ROW><ROW><id>17460591</id><snippet>drawrect(0, 0, top, -1)
drawrect(top, 0, bottom, left)
drawrect(top, 0, bottom, right)
drawrect(bottom, 0, -1, -1)
</snippet></ROW><ROW><id>17460761</id><snippet>~</snippet></ROW><ROW><id>17460761</id><snippet>os.path.expanduser</snippet></ROW><ROW><id>17460761</id><snippet>&gt;&gt;&gt; with open('~/.FDSA', 'w') as f:
...     f.write('hi')
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 2] No such file or directory: '~/.FDSA'
&gt;&gt;&gt; 
&gt;&gt;&gt; import os
&gt;&gt;&gt; with open(os.path.expanduser('~/.FDSA'), 'w') as f:
...     f.write('hi')
... 
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17460943</id><snippet>class Room:
    def __init__(self,description,items,monsters,paths):
        self.description=description
        self.items=items
        self.monsters=monsters
        self.paths=paths
    def interact(self):
        #player interactions here, return number of room player travels to
        pass

list_of_rooms=[
    Room("An easy room with no monsters",["Potion"],[],[1])
    Room("A hard room with some lemons",["Lemon","Lemon"],["Monster"],[0])]

current_room=0
game_over=False
while not game_over:
    current_room=list_of_rooms[current_room].interact()
</snippet></ROW><ROW><id>17460973</id><snippet>doc = open("C:/...").read().split()
</snippet></ROW><ROW><id>17460973</id><snippet>for word in doc:</snippet></ROW><ROW><id>17461038</id><snippet>mylist = ['"5" is a magic number.', ..., '"8" is a magic number.']
print [i for i in mylist if "is a magic number" in i]
</snippet></ROW><ROW><id>17461038</id><snippet>['"5" is a magic number.', '"6" is a magic number.', '"7" is a magic number.', '"8" is a magic number.']
</snippet></ROW><ROW><id>17461038</id><snippet>import re
mylist = ['"5" is a magic number.',
'"6" is a magic number.',
'"7" is a magic number.',
'This line is extra...',
'This line is extra...',
'"8" is a magic number.']
print re.findall(r'"\d+" is a magic number', ' '.join(mylist))
</snippet></ROW><ROW><id>17461313</id><snippet>import pickle
import unittest

pickle_file = open("temp" + ".pickle", 'wb')
u = unittest.TestResult()
for k, v in vars(u).items():
    if isinstance(v, file): # if not picklable(v):
        setattr(u, k, None)
pickle.dump(u, pickle_file)
</snippet></ROW><ROW><id>17461313</id><snippet>import pickle
import unittest

class SafePickler(pickle.Pickler):
    def save(self, obj):
        try:
            pickle.Pickler.save(self, obj)
        except TypeError, e:
            pickle.Pickler.save(self, None)

pickle_file = open("temp" + ".pickle", 'wb')
u = unittest.TestResult()
SafePickler(pickle_file).dump(u)
</snippet></ROW><ROW><id>17461470</id><snippet>list = [{1,2,3},{2,3,4},{3,4,5},{4,5,6}]
b = []
[b.append(x) for c in list for x in c if x not in b]
print b # or set(b)
</snippet></ROW><ROW><id>17461470</id><snippet>[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>17461470</id><snippet>b = set([])
[b.add(x) for c in list for x in c if x not in b]
print b
</snippet></ROW><ROW><id>17461470</id><snippet>set([1, 2, 3, 4, 5, 6]) #or {1, 2, 3, 4, 5, 6}
</snippet></ROW><ROW><id>17461470</id><snippet>def Union(L):
    b = []
    [b.append(x) for c in L for x in c if x not in b]
    return set(b)
</snippet></ROW><ROW><id>17461608</id><snippet>for stuff in listofstrings:
    dictionary["key"] = dictionary.get("key",defaultvalueforkey) + stuff
</snippet></ROW><ROW><id>17461713</id><snippet>vtkPolyMapper2D</snippet></ROW><ROW><id>17461713</id><snippet>import vtk
extents = [[0,0],[620,0],[620,220],[0,220]]

polyPoints = vtk.vtkPoints()

for x, y in extents:
    polyPoints.InsertNextPoint(x, y, 0)

num_corners = len(extents)
polyCells = vtk.vtkCellArray()
polyCells.InsertNextCell(num_corners + 1)

for i in range(0, num_corners):
    polyCells.InsertCellPoint(i)

polyCells.InsertCellPoint(0) ## Rejoin at the end

poly_profile = vtk.vtkPolyData()
poly_profile.SetPoints(polyPoints)
poly_profile.SetPolys(polyCells) ## Goes solid

cut_triangles = vtk.vtkTriangleFilter()
cut_triangles.SetInput(poly_profile)

_poly_mapper = vtk.vtkPolyDataMapper2D()
_poly_mapper.SetInput(poly_profile)
_poly_mapper.SetInputConnection(cut_triangles.GetOutputPort())

_actor = vtk.vtkActor2D()
_actor.SetMapper(_poly_mapper)
_actor.GetProperty().SetColor([0.1,0.1,0.1])
_actor.GetProperty().SetOpacity(0.5)
#Add to renderer as normal  
</snippet></ROW><ROW><id>17461829</id><snippet>factors(4)</snippet></ROW><ROW><id>17461829</id><snippet>[1,2]</snippet></ROW><ROW><id>17461829</id><snippet>[1]</snippet></ROW><ROW><id>17461829</id><snippet>factors</snippet></ROW><ROW><id>17461876</id><snippet>list</snippet></ROW><ROW><id>17461876</id><snippet>class SMS_store(list):

    def add_new_arrival(self, from_number, time_arrived, text_of_SMS):
        self.append((False, from_number, time_arrived, text_of_SMS))    #append tuple to self

    def message_count(self):
        return len(self)
</snippet></ROW><ROW><id>17461876</id><snippet>__init__</snippet></ROW><ROW><id>17461876</id><snippet>()</snippet></ROW><ROW><id>17461876</id><snippet>[]</snippet></ROW><ROW><id>17462100</id><snippet>drawing = np.zeros(img.shape)
for i in xrange(len(contours)):
    if (cv2.contourArea(contours[i]) &gt; 15000): # just a condition
        cv2.drawContours(drawing, contours, i, (255, 255, 255), 1, 8, hierarchy)
</snippet></ROW><ROW><id>17462124</id><snippet>d = {}

keyList1 = ["Person", "Male", "Boy", "Student", "id_123", "Name"]
keyList2 = ["Person", "Male", "Boy", "Student", "id_123", "Age"]
value1 = "Roger"
value2 = 3

def insert(cur, list, value):
    if len(list) == 1:
        cur[list[0]] = value
        return
    if not cur.has_key(list[0]):
        cur[list[0]] = {}
    insert(cur[list[0]], list[1:], value)

insert(d, keyList1, value1)
insert(d, keyList2, value2)

{'Person': {'Male': {'Boy': {'Student': {'id_123': {'Age': 3, 'Name': 'Roger'}}}}}}
</snippet></ROW><ROW><id>17462254</id><snippet>request.user</snippet></ROW><ROW><id>17462254</id><snippet>{{user}}</snippet></ROW><ROW><id>17462254</id><snippet>RequestContext</snippet></ROW><ROW><id>17462254</id><snippet>HttpResponse</snippet></ROW><ROW><id>17462254</id><snippet>REDIRECT_FIELD_NAME</snippet></ROW><ROW><id>17462254</id><snippet>__init__.py</snippet></ROW><ROW><id>17462254</id><snippet>"next"</snippet></ROW><ROW><id>17462254</id><snippet>@login_required</snippet></ROW><ROW><id>17462254</id><snippet>@login_required</snippet></ROW><ROW><id>17462254</id><snippet>/login_test/</snippet></ROW><ROW><id>17462254</id><snippet>{{next}}</snippet></ROW><ROW><id>17462254</id><snippet>/login_test/</snippet></ROW><ROW><id>17462254</id><snippet>&lt;input type="hidden" name="next" value="{{ next }}" /&gt;</snippet></ROW><ROW><id>17462254</id><snippet>REDIRECT_FIELD_NAME</snippet></ROW><ROW><id>17462254</id><snippet>settings.LOGIN_URL</snippet></ROW><ROW><id>17462254</id><snippet>login/</snippet></ROW><ROW><id>17462567</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; G = nx.Graph()
&gt;&gt;&gt; G.add_node(1)
&gt;&gt;&gt; G.node[1]
{}
&gt;&gt;&gt; G.add_node(1,name='firstNode')
&gt;&gt;&gt; G.node[1]
{'name': 'firstNode'}
&gt;&gt;&gt; G.add_node(1,name='changed')
&gt;&gt;&gt; G.node[1]
{'name': 'changed'}
&gt;&gt;&gt; G.add_node(1,name='changed',attribute='new')
&gt;&gt;&gt; G.node[1]
{'attribute': 'new', 'name': 'changed'}
&gt;&gt;&gt; G.add_node(1,name='changed',attribute='new')
&gt;&gt;&gt; G.node[1]
{'attribute': 'new', 'name': 'changed'}
&gt;&gt;&gt; G.add_node(1)
&gt;&gt;&gt; G.node[1]
{'attribute': 'new', 'name': 'changed'}
&gt;&gt;&gt; nx.nodes(G)
[1]
</snippet></ROW><ROW><id>17462669</id><snippet>&gt;&gt;&gt; re.S
16
</snippet></ROW><ROW><id>17462669</id><snippet>flags=re.S</snippet></ROW><ROW><id>17462669</id><snippet>flags=16</snippet></ROW><ROW><id>17463020</id><snippet>list</snippet></ROW><ROW><id>17463020</id><snippet>str</snippet></ROW><ROW><id>17463020</id><snippet>&gt;&gt;&gt; d = {'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt; ['{}_{}'.format(k,v) for k,v in d.iteritems()]
['key2_value2', 'key1_value1']
</snippet></ROW><ROW><id>17463020</id><snippet>&gt;&gt;&gt; ', '.join(['{}_{}'.format(k,v) for k,v in d.iteritems()])
'key2_value2, key1_value1'
</snippet></ROW><ROW><id>17463020</id><snippet>def checkCommonNodes(id, rs):
    id_key, id_value = id.split('_')
    for r in rs:
        try:
            if r[id_key] == id_value:
                print "".join('{}_{}'.format(k,v) for k,v in r.iteritems())
        except KeyError:
            continue
</snippet></ROW><ROW><id>17463020</id><snippet>break</snippet></ROW><ROW><id>17463020</id><snippet>print</snippet></ROW><ROW><id>17463035</id><snippet>pip install http://prdownloads.sourceforge.net/gnuplot-py/gnuplot-py-1.8.tar.gz?download
</snippet></ROW><ROW><id>17463413</id><snippet>echo htmlentities('Wählen', 0, 'utf-8');
</snippet></ROW><ROW><id>17463413</id><snippet>// does not encode quotes
echo htmlentities('"Wählen"', 0, 'utf-8');
// encodes quotes
echo htmlentities('"Wählen"', ENT_QUOTES, 'utf-8');
</snippet></ROW><ROW><id>17463566</id><snippet>pprint.pformat</snippet></ROW><ROW><id>17463566</id><snippet>&gt;&gt;&gt; my_dict = dict((i, i) for i in range(30))
&gt;&gt;&gt; pp.pformat(my_dict)
'{0: 0,\n 1: 1,\n 2: 2,\n 3: 3,\n 4: 4,\n 5: 5,\n 6: 6,\n 7: 7,\n 8: 8,\n 9: 9,\n 10: 10,\n 11: 11,\n 12: 12,\n 13: 13,\n 14: 14,\n 15: 15,\n 16: 16,\n 17: 17,\n 18: 18,\n 19: 19,\n 20: 20,\n 21: 21,\n 22: 22,\n 23: 23,\n 24: 24,\n 25: 25,\n 26: 26,\n 27: 27,\n 28: 28,\n 29: 29}'
&gt;&gt;&gt; print(pp.pformat(my_dict))
{0: 0,
 1: 1,
 2: 2,
 3: 3,
 4: 4,
 5: 5,
 6: 6,
 7: 7,
 8: 8,
 9: 9,
 10: 10,
 11: 11,
 12: 12,
 13: 13,
 14: 14,
 15: 15,
 16: 16,
 17: 17,
 18: 18,
 19: 19,
 20: 20,
 21: 21,
 22: 22,
 23: 23,
 24: 24,
 25: 25,
 26: 26,
 27: 27,
 28: 28,
 29: 29}
</snippet></ROW><ROW><id>17464241</id><snippet>GetTemp()</snippet></ROW><ROW><id>17464241</id><snippet>_thread</snippet></ROW><ROW><id>17464241</id><snippet>Tkinter</snippet></ROW><ROW><id>17464241</id><snippet>after()</snippet></ROW><ROW><id>17464241</id><snippet>GetTemp()</snippet></ROW><ROW><id>17464241</id><snippet>import tkinter
import tkinter.messagebox
import time
import random
import _thread

class Menu:

    def __init__(self):    

        self.main_window = tkinter.Tk()
        self.main_window.title("Room Light System")
        self.main_window.geometry("1200x600")


        #Frames
        self.frame_2 = tkinter.Frame(self.main_window, bg='Orange') # Receiving DATAs



        #ReceiveLabel
        self.ReceiveLabel = tkinter.Label(self.frame_2,\
                                       text = 'Received DATAs',\
                                       bg = 'White',\
                                       height = 2, width = 20)


        #Temperature
        self.GetTempLabel = tkinter.Label(self.frame_2,\
                                       text='Temperature :')
        self.TempValue = tkinter.StringVar()

        self.GetTempValueLabel = tkinter.Label(self.frame_2,bg = 'Green',\
                                               textvariable = self.TempValue
                                               )



        #PACKING!!! F2

        self.frame_2.pack()
        self.frame_2.place(x=410, y=0, height=300, width=400)
        #ReceiveLabel
        self.ReceiveLabel.pack()
        self.ReceiveLabel.place(x=100, y=10)
        #Temperature
        self.GetTempLabel.pack()
        self.GetTempLabel.place(x=50, y=80, height=20, width=120)
        self.GetTempValueLabel.pack()
        self.GetTempValueLabel.place(x=200, y=80, height=20, width=50)


        #main loop and quit
        self.quitButton = tkinter.Button(self.main_window,\
                                          text = 'Quit',
                                          command = self.main_window.destroy,\
                                          height = 2, width = 6)
        self.quitButton.pack() 

        self.quitButton.place(x=200, y=500)


        self.main_window.after(2000, _thread.start_new_thread, self.GetTemp, ())
        tkinter.mainloop()

    def GetTemp(self):

        while(1):
            value = random.random()
            self.TempValue.set(str(value))
            time.sleep(0.5)

gui = Menu()
</snippet></ROW><ROW><id>17464630</id><snippet>chat.Members</snippet></ROW><ROW><id>17464630</id><snippet>chat.MemberObjects</snippet></ROW><ROW><id>17464630</id><snippet>CREATOR</snippet></ROW><ROW><id>17464630</id><snippet>MASTER</snippet></ROW><ROW><id>17464630</id><snippet>CREATOR</snippet></ROW><ROW><id>17464630</id><snippet>CREATOR</snippet></ROW><ROW><id>17464881</id><snippet>&gt;&gt;&gt; L = [1, 2, 3]
&gt;&gt;&gt; def bar():
...     return 'shenanigan', [4]
... 
&gt;&gt;&gt; myVar, L[len(L):] = bar()
&gt;&gt;&gt; L
[1, 2, 3, 4]
</snippet></ROW><ROW><id>17465063</id><snippet>import os
from lxml import etree

ROOT_PATH = os.path.abspath(os.path.dirname(__file__))
file_path = ROOT_PATH + "/" + "file.xml"
doc1 = etree.parse(file_path)
</snippet></ROW><ROW><id>17465167</id><snippet>jsonschema</snippet></ROW><ROW><id>17465167</id><snippet>extend</snippet></ROW><ROW><id>17465167</id><snippet>#!/usr/bin/env python2

from jsonschema import Draft3Validator
from jsonschema.exceptions import ValidationError
from jsonschema.validators import extend
import json
import sys

schema = {
    "type": "object",
    "required": True,
    "additinalProperties": False,
    "properties": {
        "id": {
            "type": "integer",
            "required": True
        },
        "name": {
            "type": "string",
            "required": True,
            "minLength": 5,
            "maxLength": 10
        },
        "hobbies": {
            "type": "array",
            "customvalidator": "hobbies",
            "required": True,
            "items": {
                "type": "string"
            }
        }
    }
}


def hobbiesValidator(validator, value, instance, schema):
    if 'Foo' not in instance:
        yield ValidationError("You need to like Foo")

    for field in instance:
        if not validator.is_type(instance, "string"):
            yield ValidationError("A hobby needs to be a string")
        elif len(field) &lt; 5:
            err = "I like only hobbies which are len() &gt;= 5, {} doesn't"
            yield ValidationError(err.format(value))


def anotherHobbiesValidator(validator, value, instance, schema):
    pass


myCustomValidators = {
    'hobbies': hobbiesValidator,
    'anotherHobbies': anotherHobbiesValidator
}


def customValidatorDispatch(validator, value, instance, schema):
    if value not in myCustomValidators:
        err = '{} is unknown, we only know about: {}'
        yield ValidationError(err.format(value, ', '.join(myCustomValidators.keys())))
    else:
        errors = myCustomValidators[value](validator, value, instance, schema)
        for error in errors:
            yield error


def myMethod(input_dict):
    customValidator = extend(Draft3Validator, {'customvalidator': customValidatorDispatch}, 'MySchema')
    validator = customValidator(schema)

    errors = [e for e in validator.iter_errors(input_dict)]
    if len(errors):
        return errors

    # do further processing here
    return []

if __name__ == '__main__':
    data = None
    try:
        f = open(sys.argv[1], 'r')
        data = json.loads(f.read())
    except Exception, e:
        print "Failed to parse input: {}".format(e)
        sys.exit(-1)

    errors = myMethod(data)

    if not len(errors):
        print "Input is valid!"
    else:
        print "Input is not valid, errors:"
        for error in errors:
            print "Err: ", error
</snippet></ROW><ROW><id>17465167</id><snippet>$ cat invalid-input.json
{
    "id": "hello",
    "name": "Dhruv",
    "hobbies": [
        1, 2, 3
    ]
}

$ ./validate.py invalid-input.json
Input is not valid, errors:
Err:  1 is not of type 'string'

Failed validating 'type' in schema['properties']['hobbies']['items']:
    {'type': 'string'}

On instance['hobbies'][0]:
    1
Err:  2 is not of type 'string'

Failed validating 'type' in schema['properties']['hobbies']['items']:
    {'type': 'string'}

On instance['hobbies'][1]:
    2
Err:  3 is not of type 'string'

Failed validating 'type' in schema['properties']['hobbies']['items']:
    {'type': 'string'}

On instance['hobbies'][2]:
    3
Err:  You need to like Foo

Failed validating 'customvalidator' in schema['properties']['hobbies']:
    {'customvalidator': 'hobbies',
     'items': {'type': 'string'},
     'required': True,
     'type': 'array'}

On instance['hobbies']:
    [1, 2, 3]
Err:  A hobby needs to be a string

Failed validating 'customvalidator' in schema['properties']['hobbies']:
    {'customvalidator': 'hobbies',
     'items': {'type': 'string'},
     'required': True,
     'type': 'array'}

On instance['hobbies']:
     [1, 2, 3]
Err:  A hobby needs to be a string

Failed validating 'customvalidator' in schema['properties']['hobbies']:
    {'customvalidator': 'hobbies',
     'items': {'type': 'string'},
     'required': True,
     'type': 'array'}

On instance['hobbies']:
    [1, 2, 3]
Err:  A hobby needs to be a string

Failed validating 'customvalidator' in schema['properties']['hobbies']:
    {'customvalidator': 'hobbies',
     'items': {'type': 'string'},
     'required': True,
     'type': 'array'}

On instance['hobbies']:
    [1, 2, 3]
Err:  u'hello' is not of type 'integer'

Failed validating 'type' in schema['properties']['id']:
    {'required': True, 'type': 'integer'}

On instance['id']:
    u'hello'
</snippet></ROW><ROW><id>17465208</id><snippet>ID\d+_\d+_\d+
</snippet></ROW><ROW><id>17465208</id><snippet>ID</snippet></ROW><ROW><id>17465208</id><snippet>&gt; import re
&gt; str = "https://10.0.4.3/myrepos/Projects/ID87_070_138"
&gt; print re.findall(r"ID\d+_\d+_\d+", str)
</snippet></ROW><ROW><id>17465208</id><snippet>['ID87_070_138']
</snippet></ROW><ROW><id>17465336</id><snippet>[5, 2]</snippet></ROW><ROW><id>17465336</id><snippet>while j (&gt;0)</snippet></ROW><ROW><id>17465336</id><snippet>while j &gt;= 0 and a[ j ] &gt; key:
</snippet></ROW><ROW><id>17465782</id><snippet>f[i]</snippet></ROW><ROW><id>17465782</id><snippet>csv</snippet></ROW><ROW><id>17465782</id><snippet>import csv

with open('C:/tsg3.txt', 'rb') as f:
    reader = csv.reader(f, delimiter='\t')
    for row in reader:
        # `row` is a list of columns.
</snippet></ROW><ROW><id>17465782</id><snippet>csv.DictReader</snippet></ROW><ROW><id>17465782</id><snippet>with open('C:/tsg3.txt', 'rb') as f:
    reader = csv.DictReader(f, delimiter='\t')
    for row in reader:
        # `row` is a dictionary of columns.
</snippet></ROW><ROW><id>17465782</id><snippet>range()</snippet></ROW><ROW><id>17465782</id><snippet>for i in f:
    # do something with the individual elements of `f`, assigned to `i` each iteration.
</snippet></ROW><ROW><id>17465822</id><snippet>if</snippet></ROW><ROW><id>17465822</id><snippet>elif</snippet></ROW><ROW><id>17465822</id><snippet>def relations(v, vtype='a'):
    functions = {
        'a': lambda x: x, 'b': lambda x: x-1,
        'c': lambda x: x * 2, 'd': lambda x: x**2
    }

    a = functions[vtype](v)
    b = 1 + a
    c = 0.5 * a
    d = a ** 0.5
    return a,b,c,d
</snippet></ROW><ROW><id>17465822</id><snippet>lambda</snippet></ROW><ROW><id>17465822</id><snippet>values = {'a': v, 'b': v-1, 'c': v * 2, 'd': v**2}
a = values[vtype]
</snippet></ROW><ROW><id>17465822</id><snippet>vtype</snippet></ROW><ROW><id>17465822</id><snippet>**kwargs</snippet></ROW><ROW><id>17465822</id><snippet>def relations(**kwargs):
    if len(kwargs) != 1 or not set('abcd').intersection(kwargs):
        raise ValueError('Invalid parameters')
    vtype, v = kwargs.popitem()
    functions = {
        'a': lambda x: x, 'b': lambda x: x-1,
        'c': lambda x: x * 2, 'd': lambda x: x**2
    }

    a = functions[vtype](v)
    b = 1 + a
    c = 0.5 * a
    d = a ** 0.5
    return a,b,c,d
</snippet></ROW><ROW><id>17465822</id><snippet>relations(a=...)
relations(b=...)
</snippet></ROW><ROW><id>17466289</id><snippet>itertools.product</snippet></ROW><ROW><id>17466289</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; row1 = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; row2 = ['s', 'c', 'e', 'd', 'a']
&gt;&gt;&gt; seen = set()             #keep a track of already visited pairs in this set
&gt;&gt;&gt; for x,y in product(row1, row2):
        if (x,y) not in seen and (y,x) not in seen:
            print x,y
            seen.add((x,y))
            seen.add((y,x))
...         
a s
a c
a e
a d
a a
b s
b c
b e
b d
b a
c s
c c
c e
c d
d s
</snippet></ROW><ROW><id>17466289</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; for x,y in combinations(row1, 2):
...     print x,y
...     
a b
a c
a d
b c
b d
c d
</snippet></ROW><ROW><id>17466722</id><snippet>PythonInterpreter.initialize(System.getProperties(), System.getProperties(), new String[0]);
</snippet></ROW><ROW><id>17467594</id><snippet>d1= set()
map(d1.add, dict['key1'])
map(d1.add, dict['key3'])
</snippet></ROW><ROW><id>17467703</id><snippet>&gt;&gt;&gt; re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')
['a 1 a', 'a 2 a', 'a 3 a', 'a 4 a']
</snippet></ROW><ROW><id>17467703</id><snippet>re.findall</snippet></ROW><ROW><id>17468012</id><snippet>parse_dates=True</snippet></ROW><ROW><id>17468012</id><snippet>parse_dates=['column name']</snippet></ROW><ROW><id>17468012</id><snippet>dateparse = lambda x: pd.datetime.strptime(x, '%Y-%m-%d %H:%M:%S')

df = pd.read_csv(infile, parse_dates=['datetime'], date_parser=dateparse)
</snippet></ROW><ROW><id>17468012</id><snippet>dateparse = lambda x: pd.datetime.strptime(x, '%Y-%m-%d %H:%M:%S')

df = pd.read_csv(infile, parse_dates={'datetime': ['date', 'time']}, date_parser=dateparse)
</snippet></ROW><ROW><id>17468027</id><snippet># -*- coding: UTF-8 -*-
a_list = [u"ááááá", u"eééééée"]
input = '\xc3\x85 i \xc3\xa5a \xc3\xa4 e \xc3\xb6'
obj = input.decode("utf-8")
print type(obj)
print obj
a_list.append(obj)
for elem in a_list:
    print type(elem)
</snippet></ROW><ROW><id>17468027</id><snippet>&lt;type 'unicode'&gt;
Å i åa ä e ö
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>17468027</id><snippet>input</snippet></ROW><ROW><id>17468027</id><snippet>obj</snippet></ROW><ROW><id>17468170</id><snippet>def __init__(self, est):
   self.est = est
def predict(self, X):
    return self.est.predict_proba(X)[:, 1]
def fit(self, X, y):
    self.est.fit(X, y)
</snippet></ROW><ROW><id>17468220</id><snippet>for i, o in enumerate(objs):
    o.attr = i
</snippet></ROW><ROW><id>17468220</id><snippet>enumerate(objs)</snippet></ROW><ROW><id>17468220</id><snippet>zip(range(len(objs)), objs)</snippet></ROW><ROW><id>17468220</id><snippet>for i, o in zip(sequence, objs):
    o.attr = i
</snippet></ROW><ROW><id>17468245</id><snippet>std::string getName()
{
    //return this-&gt;get_override("getName")();
    return boost::python::call&lt;std::string&gt;(this-&gt;get_override("getName")());
}
</snippet></ROW><ROW><id>17468260</id><snippet>(//site[@type="qa"])[1]/link/text()</snippet></ROW><ROW><id>17468260</id><snippet>//site[@type="qa"][position()=1]/link/text()
</snippet></ROW><ROW><id>17468260</id><snippet>http://stackoverflow.com</snippet></ROW><ROW><id>17468785</id><snippet>:</snippet></ROW><ROW><id>17468785</id><snippet>if line in analysis == x:
                        ^
                        |
</snippet></ROW><ROW><id>17468785</id><snippet>c_count = {"c1":0, "c2":0, "c3":0, "c4":0, "c5":0}
with open("myInputFileName") as analysis:
    for line in analysis:            #read lines one by one
       line = line.strip()           #strip white-spaces
       if line in c_count:           #if line is found in c_count, increase it's count
          c_count[line] += 1
</snippet></ROW><ROW><id>17468811</id><snippet>1&gt;2# : ^
'''
@echo off
echo normal 
echo batch code
echo Switch to python
python "%~f0"
exit /b
rem ^
'''
print "This is Python code"
</snippet></ROW><ROW><id>17468811</id><snippet>'''</snippet></ROW><ROW><id>17468811</id><snippet>1&gt;2</snippet></ROW><ROW><id>17468811</id><snippet>#</snippet></ROW><ROW><id>17468811</id><snippet>1&gt;2#</snippet></ROW><ROW><id>17468811</id><snippet>1</snippet></ROW><ROW><id>17468811</id><snippet>2#</snippet></ROW><ROW><id>17468811</id><snippet>:</snippet></ROW><ROW><id>17468811</id><snippet>'''</snippet></ROW><ROW><id>17469047</id><snippet>&gt;&gt;&gt; from itertools import groupby
#filter items that contain '00:00'
&gt;&gt;&gt; mylist = [x for x in mylist if x[-2] != '00:00' ]

#now group lists based on the the second last item
for k,g in groupby(mylist, key = lambda x :x [-2]):
    #find the min among the grouped lists based on the last item
    minn = min(g, key = lambda x : map(int,x[-1].split(':'))) 
    print minn
...     
['20120903', 'melon', 'shelf1', '05:31', '08:01']
['20120903', 'melon', 'shelf1', '10:18', '14:01']
['20120904', 'melon', 'shelf1', '05:32', '14:02']
['20120903', 'apple', 'shelf5', '05:34', '14:02']
['20120904', 'apple', 'shelf5', '05:33', '14:02']
</snippet></ROW><ROW><id>17469047</id><snippet>from itertools import groupby
def solve(lis):
    mylist = [x for x in lis if x[-2] != '00:00' ]
    for k,g in groupby(mylist, key = lambda x :x [-2]):
            #find the min among the grouped lists based on the last item
            minn = min(g, key = lambda x : map(int,x[-1].split(':'))) 
            yield minn
...         
&gt;&gt;&gt; list(solve(mylist))
[['20120903', 'melon', 'shelf1', '05:31', '08:01'],
 ['20120903', 'melon', 'shelf1', '10:18', '14:01'],
 ['20120904', 'melon', 'shelf1', '05:32', '14:02'],
 ['20120903', 'apple', 'shelf5', '05:34', '14:02'],
 ['20120904', 'apple', 'shelf5', '05:33', '14:02']]
</snippet></ROW><ROW><id>17469292</id><snippet>&gt;&gt;&gt; a = np.array([1,2,3,4,5,6])
&gt;&gt;&gt; a[1:4] = a[1:4][::-1]
&gt;&gt;&gt; a
array([1, 4, 3, 2, 5, 6])
</snippet></ROW><ROW><id>17469463</id><snippet>def randomInput(list):
    randIdx = random.randint(0, len(list)-1)
    in = input(list[randIdx])
    list.remove(randIdx)
    return in, list

inputs = [random.choice(defi), random.choice(defi), line28]
x, inputs = randomInput(inputs)
x, inputs = randomInput(inputs)
x, inputs = randomInput(inputs)
</snippet></ROW><ROW><id>17469463</id><snippet>x == 'b' or x == 'a'
</snippet></ROW><ROW><id>17469510</id><snippet>@property
def path_from_root(self):
    if self.parent:
        return self.parent.path_from_root + [self]
    return [self]
</snippet></ROW><ROW><id>17469511</id><snippet>as_view</snippet></ROW><ROW><id>17469511</id><snippet>url(r'^(?P&lt;pk&gt;\d+)/$', views.DetailView.as_view(), name='detail')
</snippet></ROW><ROW><id>17469511</id><snippet>PollDetailView</snippet></ROW><ROW><id>17469511</id><snippet>detail()</snippet></ROW><ROW><id>17469511</id><snippet>get_queryset()</snippet></ROW><ROW><id>17470013</id><snippet>/foo?lsCanWid=3&amp;lsCanHei=4</snippet></ROW><ROW><id>17470107</id><snippet>readonly_fields</snippet></ROW><ROW><id>17470107</id><snippet>save</snippet></ROW><ROW><id>17470107</id><snippet>save</snippet></ROW><ROW><id>17470107</id><snippet>None</snippet></ROW><ROW><id>17470290</id><snippet>class SecurityCondition(univ.Choice):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('authId', univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))),
        namedtype.NamedType('not', univ.Any()),  # just a placeholder
        namedtype.NamedType('and', univ.Any()),  # just a placeholder
        namedtype.NamedType('or', univ.Any())    # just a placeholder
    )

SecurityCondition.componentType[1]._NamedType__type = SecurityCondition().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))
SecurityCondition.componentType[2]._NamedType__type =  univ.SequenceOf(componentType=SecurityCondition()).subtype(implicitTag=tag.Tag(tag.tagClass.ontext, tag.tagFormatSimple, 1), subtypeSpec=constraint.ValueSizeConstraint(2, 255))
SecurityCondition.componentType[3]._NamedType__type =  univ.SequenceOf(componentType=SecurityCondition()).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2), subtypeSpec=constraint.ValueSizeConstraint(2, 255))

# Initialize an instance of SecurityCondition

top = SecurityCondition() # SecurityCondition
top['and'] = None         # SecurityCondition-&gt;SequenceOf
top['and'][0] = None      # SecurityCondition-&gt;SequenceOf-&gt;SecurityCondition
top['and'][0]['authId'] = "\x02"
top['and'][1] = None      # SecurityCondition-&gt;SequenceOf-&gt;SecurityCondition
top['and'][1]['authId'] = "\x03"

print(top.prettyPrint())
</snippet></ROW><ROW><id>17470666</id><snippet>execfile()</snippet></ROW><ROW><id>17470666</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['__main__']
&lt;module '__main__' (built-in)&gt;
</snippet></ROW><ROW><id>17470666</id><snippet>inspect.getsource()</snippet></ROW><ROW><id>17470666</id><snippet>&gt;&gt;&gt; sys.modules['__main__'].__file__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute '__file__'
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getfile(sys.modules['__main__'])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/inspect.py", line 403, in getfile
    raise TypeError('{!r} is a built-in module'.format(object))
TypeError: &lt;module '__main__' (built-in)&gt; is a built-in module
</snippet></ROW><ROW><id>17470666</id><snippet>execfile</snippet></ROW><ROW><id>17470666</id><snippet>inspect.getsource()</snippet></ROW><ROW><id>17470666</id><snippet>execfile()</snippet></ROW><ROW><id>17470666</id><snippet>$ cat test.py
execfile('classes.py')
$ python test.py
Traceback (most recent call last):
  File "test.py", line 1, in &lt;module&gt;
    execfile('classes.py')
  File "classes.py", line 13, in &lt;module&gt;
    class ParentModel(object):
  File "classes.py", line 9, in __init__
    setattr(cls, "source", inspect.getsource(cls))
  File "/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/inspect.py", line 701, in getsource
    lines, lnum = getsourcelines(object)
  File "/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/inspect.py", line 690, in getsourcelines
    lines, lnum = findsource(object)
  File "/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/inspect.py", line 564, in findsource
    raise IOError('could not find class definition')
IOError: could not find class definition
</snippet></ROW><ROW><id>17470666</id><snippet>execfile('classes.py', globals())</snippet></ROW><ROW><id>17470666</id><snippet>execfile</snippet></ROW><ROW><id>17470666</id><snippet>__file__</snippet></ROW><ROW><id>17470666</id><snippet>sys.modules</snippet></ROW><ROW><id>17470666</id><snippet>__file__</snippet></ROW><ROW><id>17470666</id><snippet>classes.py</snippet></ROW><ROW><id>17470666</id><snippet>execfile()</snippet></ROW><ROW><id>17470666</id><snippet>__name__</snippet></ROW><ROW><id>17470666</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import types
&gt;&gt;&gt; sys.modules['fake_classes'] = types.ModuleType('fake_classes')
&gt;&gt;&gt; sys.modules['fake_classes'].__file__='classes.py'
&gt;&gt;&gt; ns = {'__name__': 'fake_classes'}
&gt;&gt;&gt; execfile('classes.py', ns)
&gt;&gt;&gt; &gt;&gt;&gt; ns.keys()
['__module__', 'ChildA', '__builtins__', 'inspect', '__package__', 'met', 'ChildB', 'ChildC', 'ParentModel', '__name__', 'test_str']
</snippet></ROW><ROW><id>17470666</id><snippet>globals()</snippet></ROW><ROW><id>17470666</id><snippet>execfile()</snippet></ROW><ROW><id>17470666</id><snippet>execfile()</snippet></ROW><ROW><id>17470837</id><snippet>for s in allsets:
   for item in s:
     file_out.write("%s|" % item)
   file_out.write("\n")
</snippet></ROW><ROW><id>17470842</id><snippet># Use Tkinter for python 2, tkinter for python 3
import Tkinter as tk

class MainApplication(tk.Frame):
    def __init__(self, root, *args, **kwargs):
        tk.Frame.__init__(self, root, *args, **kwargs)
        self.root = root
        # &lt;create the rest of your GUI here&gt;

if __name__ == "__main__":
    root = tk.Tk()
    MainApplication(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>17470842</id><snippet>tk.</snippet></ROW><ROW><id>17470842</id><snippet>tk.Frame</snippet></ROW><ROW><id>17470842</id><snippet>tk.Toplevel</snippet></ROW><ROW><id>17470842</id><snippet>class Navbar(tk.Frame): ...
class Toolbar(tk.Frame): ...
class Statusbar(tk.Frame): ...
class Main(tk.Frame): ...

class MainApplication(tk.Frame):
    def __init__(self, root, *args, **kwargs):
        tk.Frame.__init__(self, root, *args, **kwargs)
        self.statusbar = Statusbar(self, ...)
        self.toolbar = Toolbar(self, ...)
        self.navbar = Navbar(self, ...)
        self.main = Main(self, ...)

        self.statusbar.pack(side="bottom", fill="x")
        self.toolbar.pack(side="top", fill="x")
        self.navbar.pack(side="left", fill="y")
        self.main.pack(side="right", fill="both", expand=True)
</snippet></ROW><ROW><id>17470842</id><snippet>self.parent.statusbar.set("Hello, world")</snippet></ROW><ROW><id>17470886</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17470886</id><snippet>from collections import defaultdict
with open('abc') as f:
    dic = defaultdict(dict)
    for line in f:
        cmp, val, col = line.split()
        dic[cmp][col] = val
print dic
# defaultdict(&lt;type 'dict'&gt;,
 #{'cmp1': {'val_5': '0.127', 'val_4': '0.809', 'val_1': '0.277', 'val_3': '0.795', 'val_2': '0.097'},
 # 'cmp2': {'val_5': '0.148', 'val_4': '0.909', 'val_7': '0.599', 'val_6': '0.938', 'val_3': '0.839'}})

#get a sroted list of all val_i from the dic        
vals = sorted(set(y for x in dic.itervalues() for y in x))

keys = sorted(dic)
print "name    {}".format("\t".join(vals))
for key in keys:
    print "{}    {}".format(key, "\t".join(dic[key].get(v,'0')  for v in vals)  )
</snippet></ROW><ROW><id>17470886</id><snippet>name    val_1   val_2   val_3   val_4   val_5   val_6   val_7
cmp1    0.277   0.097   0.795   0.809   0.127   0   0
cmp2    0   0   0.839   0.909   0.148   0.938   0.599
</snippet></ROW><ROW><id>17470886</id><snippet>print "name    {}".format("\t".join(vals))
for key in keys:
    strs = "\t".join(str(int(round(float(dic[key][v])))) if v in dic[key] else '0'  for v in vals)
    print "{}    {}".format(key, strs )
</snippet></ROW><ROW><id>17470886</id><snippet>name    val_1   val_2   val_3   val_4   val_5   val_6   val_7
cmp1    0   0   1   1   0   0   0
cmp2    0   0   1   1   0   1   1
</snippet></ROW><ROW><id>17471190</id><snippet>PyFrame_GetLineNumber(PyFrameObject *f)</snippet></ROW><ROW><id>17471190</id><snippet>frameobject.c</snippet></ROW><ROW><id>17471222</id><snippet>from matplotlib import pyplot as pl
import numpy as np

x = np.linspace(0, 5, 10)
y = np.sin(x)
pl.plot(x, y, 'o')
pl.plot(x[:5], y[:5], 'g-')
pl.plot(x[5:], y[5:], 'g-')
pl.show()
</snippet></ROW><ROW><id>17471239</id><snippet>tables_to_join = [..]

if (len(tables_to_join) &gt; 1):
    query = session.query(eval(tables_to_join[0]))

    for table in tables_to_join[1:]:
        query = query.join(eval(table))
</snippet></ROW><ROW><id>17471509</id><snippet>locals()</snippet></ROW><ROW><id>17471509</id><snippet>s="svn cp {root_dir}/{trunk}/ {root_dir}/{tag}/".format(**locals())
</snippet></ROW><ROW><id>17471664</id><snippet>xml</snippet></ROW><ROW><id>17471664</id><snippet>n3</snippet></ROW><ROW><id>17471664</id><snippet>ntriples</snippet></ROW><ROW><id>17471664</id><snippet>trix</snippet></ROW><ROW><id>17471664</id><snippet>ntriples</snippet></ROW><ROW><id>17471664</id><snippet>&lt;http://bigasterisk.com/foaf.rdf#drewp&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .
&lt;http://bigasterisk.com/foaf.rdf#drewp&gt; &lt;http://example.com/says&gt; "Hello world" .
</snippet></ROW><ROW><id>17471664</id><snippet>format</snippet></ROW><ROW><id>17471664</id><snippet>parse()</snippet></ROW><ROW><id>17471664</id><snippet>rdflib.util.guess_format()</snippet></ROW><ROW><id>17471664</id><snippet>xml</snippet></ROW><ROW><id>17471664</id><snippet>&gt;&gt;&gt; g.parse("demo.rdf", format="xml")
</snippet></ROW><ROW><id>17471738</id><snippet>a op b</snippet></ROW><ROW><id>17471738</id><snippet>b</snippet></ROW><ROW><id>17471738</id><snippet>a</snippet></ROW><ROW><id>17471738</id><snippet>b</snippet></ROW><ROW><id>17471738</id><snippet>op</snippet></ROW><ROW><id>17471738</id><snippet>__eq__</snippet></ROW><ROW><id>17471738</id><snippet>np.array(10) == a</snippet></ROW><ROW><id>17472094</id><snippet>isinstance</snippet></ROW><ROW><id>17472094</id><snippet>&gt;&gt;&gt; val = { 'sum':'10', 'sub':'5', 'mul':'25', 'div':'1' }
&gt;&gt;&gt; isinstance(val, list)
False
&gt;&gt;&gt; isinstance(val, dict)
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17472262</id><snippet>reset_index</snippet></ROW><ROW><id>17472262</id><snippet>In [25]: x = data_3levels.reset_index(level=2,drop=True)*data_2levels
</snippet></ROW><ROW><id>17472262</id><snippet>In [26]: x.index=data_3levels.index

In [27]: x
Out[27]: 
l1  l2   l3  
0   100  1000    2
         1001    2
         1002    2
1   101  1001    3
dtype: int64
</snippet></ROW><ROW><id>17472341</id><snippet>for i in range(20):
 fin = open('{dir}/ions{i}'.format(dir=self.locDir,i=i)).readlines()
 y = lambda(x:eval(x.strip().split()[1]),fin) 
 if len(y) &gt; len(self.Y): self.Y = self.Y + [0]* (len(y) - len(self.Y))
 elif len(y) &lt; len(self.Y): y = y + [0]*(len(self.Y) - len(y))
 self.Y = [ a+b for (a,b) in zip(self.Y,y)]
</snippet></ROW><ROW><id>17472416</id><snippet>and</snippet></ROW><ROW><id>17472416</id><snippet>result=[(i,j,k) for i in S for j in S for k in S if sum([i,j,k])==0 and (i,j,k)!=(0,0,0)]
</snippet></ROW><ROW><id>17472416</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>17472750</id><snippet>pickle</snippet></ROW><ROW><id>17472750</id><snippet>dbm</snippet></ROW><ROW><id>17472750</id><snippet>dbm.ndbm</snippet></ROW><ROW><id>17472750</id><snippet>gdbm</snippet></ROW><ROW><id>17472750</id><snippet>anydbm</snippet></ROW><ROW><id>17472750</id><snippet>sqlite3</snippet></ROW><ROW><id>17472796</id><snippet>sum</snippet></ROW><ROW><id>17472796</id><snippet>&gt;&gt;&gt; sum(range(49999951,50000000))
2449998775L
</snippet></ROW><ROW><id>17472796</id><snippet>sum</snippet></ROW><ROW><id>17472796</id><snippet>&gt;&gt;&gt; total = 0
&gt;&gt;&gt; for i in range(49999951,50000000):
    total += i

&gt;&gt;&gt; total
2449998775L
</snippet></ROW><ROW><id>17472796</id><snippet>Reduce</snippet></ROW><ROW><id>17472796</id><snippet>&gt;&gt;&gt; reduce(lambda x,y: x+y, range(49999951,50000000))
2449998775L
</snippet></ROW><ROW><id>17472901</id><snippet>WWW-Authenticate: Negotiate
WWW-Authenticate: NTLM
</snippet></ROW><ROW><id>17472928</id><snippet>string(/)</snippet></ROW><ROW><id>17472928</id><snippet>&lt;p&gt;&lt;i&gt;Hello&lt;/i&gt;!&lt;/p&gt;</snippet></ROW><ROW><id>17472928</id><snippet>"Hello!"</snippet></ROW><ROW><id>17472928</id><snippet>"Hello !"</snippet></ROW><ROW><id>17472996</id><snippet>{% autoescape false %}...{% endautoescape %}
</snippet></ROW><ROW><id>17473147</id><snippet>def check_word_type(self, filename):
    words = ['noun','verb','vrb','adj','adv'] #I am not sure if adj and adv are variables
    for i in words:
        if i in filename:
            self.word_type = str(i) #just make sure its string
        else:
            self.word_type = ''
    return self.word_type
</snippet></ROW><ROW><id>17473165</id><snippet>import h5py
import numpy

arr1 = numpy.random.random((2000,2000))

with h5py.File("Plot0.h5", "w") as f:
    dset = f.create_dataset("Plot", data = arr1, maxshape=(None,None))

dsetX, dsetY = 2000,2000
go = ""
while go == "":
    go = raw_input("Current Size: " + str(dsetX) + "  " + str(dsetY) + "  Continue?")
    arr2 = numpy.random.random((2000,2000))

    with h5py.File("Plot0.h5", "r+") as f:
        dset = f["Plot"]
        print len(arr2[:])
        print len(arr2[0][:])
        change = "column"

        dsetX, dsetY = dset.shape

        if change == "column":

            x1 = dsetX
            x2 = len(arr2[:]) + dsetX

            y1 = 0
            y2 = len(arr2[0][:])

            dset.shape = (x2, y2)
        else:
            x1 = 0
            x2 = len(arr2[:])

            y1 = dsetY
            y2 = len(arr2[0][:]) + dsetY

            dset.shape = (x2, y2)
        print "x1", x1
        print "x2", x2
        print "y1", y1
        print "y2", y2

        print dset.shape

        dset[x1:x2,y1:y2] = arr2

        print arr2
        print "\n"
        print dset[x1:x2,y1:y2]

        dsetX, dsetY = dset.shape
</snippet></ROW><ROW><id>17473238</id><snippet>from Tkinter import *

sentence = [ 'this', 'is', 'an', 'example' ]
result   = [ 'x.Det', 'be.V', 'a.Det', 'example.N' ]

line_start = [0, len(sentence)] # Used to split the sentence into lines no longer than line_len
line_len = 20 # Max characters in each line, including extra spaces
segment_len = 0

for i in range(len(sentence)):
    s_len = len(sentence[i])
    r_len = len(result[i])

    # Pad words (or word groups) so the segments of sentence and result have the same width
    if s_len &gt; r_len:
        result[i] += ' ' * s_len - r_len
    elif s_len &lt; r_len:
        sentence[i] += ' ' * (r_len - s_len)

    segment_len += max(r_len, s_len) + 1

    # Check the line length
    if segment_len &gt; line_len:
        segment_len = 0
        line_start.insert(1, i)

root = Tk()

for i in range(len(line_start)-1):
    sentence_segment = ' '.join( sentence[line_start[i]:line_start[i+1]] )
    ts = Text(root, font='TkFixedFont', width = line_len, height = 1)
    ts.insert(END, sentence_segment)
    ts.pack()

    result_segment = ' '.join( result[line_start[i]:line_start[i+1]] )
    tr = Text(root, font='TkFixedFont', width = line_len, height = 1, foreground='grey')
    tr.insert(END, result_segment)
    tr.pack()

root.mainloop()
</snippet></ROW><ROW><id>17473307</id><snippet>return</snippet></ROW><ROW><id>17473307</id><snippet>else:
    a = a/b
    return is_power(a,b)
</snippet></ROW><ROW><id>17473307</id><snippet>return</snippet></ROW><ROW><id>17473307</id><snippet>None</snippet></ROW><ROW><id>17473307</id><snippet>return</snippet></ROW><ROW><id>17473307</id><snippet>&gt;&gt;&gt; def is_power(a,b):
...     if not a%b==0:
...         return a%b==0
...     elif a/b==1:
...        return a/b==1
...     else:
...         a = a/b
...         return is_power(a, b)
... 
&gt;&gt;&gt; print is_power(10, 3)
False
&gt;&gt;&gt; print is_power(8, 2)
True
</snippet></ROW><ROW><id>17473353</id><snippet>L</snippet></ROW><ROW><id>17473353</id><snippet>long</snippet></ROW><ROW><id>17473353</id><snippet>&gt;&gt;&gt; a = sum(range(49999951,50000000))
&gt;&gt;&gt; a
2449998775L
&gt;&gt;&gt; print a
2449998775
</snippet></ROW><ROW><id>17473353</id><snippet>L</snippet></ROW><ROW><id>17473353</id><snippet>repr</snippet></ROW><ROW><id>17473353</id><snippet>L</snippet></ROW><ROW><id>17473460</id><snippet>droplevel</snippet></ROW><ROW><id>17473460</id><snippet>uniquify=True</snippet></ROW><ROW><id>17473460</id><snippet>In [77]: MultiIndex.from_tuples(index_3levels.droplevel('l3').unique())
Out[77]: 
MultiIndex
[(0, 100), (1, 101)]
</snippet></ROW><ROW><id>17473460</id><snippet>In [226]: def f(i):
            return [(i,100,1000),(i,100,1001),(i,100,1002),(i+1,101,1001)]

In [227]: l = []

In [228]: for i in range(1000000):
             l.extend(f(i))

In [229]: index_3levels=pd.MultiIndex.from_tuples(l,names=["l1","l2","l3"])

In [230]: len(index_3levels)
Out[230]: 4000000
</snippet></ROW><ROW><id>17473460</id><snippet>In [238]: %timeit MultiIndex.from_tuples(index_3levels.droplevel(level='l3').unique())
1 loops, best of 3: 2.26 s per loop
</snippet></ROW><ROW><id>17473460</id><snippet>In [249]: l2 = index_3levels.droplevel(level='l3').droplevel(level='l1').unique()

In [250]: %timeit index_3levels.droplevel(level='l3').droplevel(level='l1').unique()
10 loops, best of 3: 35.3 ms per loop

In [251]: l1 = index_3levels.droplevel(level='l3').droplevel(level='l2').unique()

In [252]: %timeit index_3levels.droplevel(level='l3').droplevel(level='l2').unique()
10 loops, best of 3: 52.2 ms per loop

In [253]: len(l1)
Out[253]: 1000001

In [254]: len(l2)
Out[254]: 2
</snippet></ROW><ROW><id>17473460</id><snippet>In [255]: %timeit MultiIndex.from_arrays([ np.repeat(l1,len(l2)), np.repeat(l2,len(l1)) ])
10 loops, best of 3: 183 ms per loop
</snippet></ROW><ROW><id>17473467</id><snippet>import ConfigParser

config = ConfigParser.ConfigParser()
config.read('abc.txt')

dic = {}

for section in config.sections():
    for option in config.options(section):
        res = config.get(section, option)
        if res == '':
            continue
        dic.update({section: res})

print dic
</snippet></ROW><ROW><id>17473467</id><snippet>{'DestURL': 'some_URL', 'URLNAME': 'https://', 'CustDetails': 'NOthing', 'DirName': 'TEST', 'General': 'C:\\Work\\July\\abc'}
</snippet></ROW><ROW><id>17473565</id><snippet>.........................
for link in links:
    htmlfile_2 = urllib2.urlopen(link)
    htmltext_2 = htmlfile_2.read()
    htmltext_3 = htmltext_2.replace("/forum/", "http://www.computerbase.de/forum/")
    regex_2 = '&lt;a href="(.+?)" id="comments-link"'
    pattern_2 = re.compile(regex_2)
    links_2 = re.findall(pattern_2,htmltext_3)
    print( ' '.join(links_2) )
    for link_neu in links_2:
        htmlfile_neu = urllib2.urlopen(link_neu)
        htmltext_neu = htmlfile_neu.read()
        regex_neu = 'class="postcounter"&gt;#(.+?)&lt;'
        pattern_neu = re.compile(regex_neu)
        links_neu = re.findall(pattern_neu,htmltext_neu)
        print( ' '.join(links_neu) )
</snippet></ROW><ROW><id>17473565</id><snippet>http://www.computerbase.de/
http://www.computerbase.de/
http://www.computerbase.de/news/2013-07/simcity-koennte-offline-modus-erhalten/
http://www.computerbase.de/news/2013-07/das-motorola-moto-x-wird-individualisierbar-sein/
http://www.computerbase.de/news/2013-07/goty-version-von-borderlands-2-kuendigt-sich-an/
http://www.computerbase.de/news/2013-07/monitor-laesst-nutzer-3d-objekte-erfuehlen/
http://www.computerbase.de/news/2013-07/quadratisch-und-flexibel-be-quiet-shadow-rock-2/
http://www.computerbase.de/news/2013-07/schwere-android-sicherheitsluecke-betrifft-alle-geraete/
http://www.computerbase.de/artikel/handys/2013/nokia-lumia-925-im-test/
http://www.computerbase.de/news/2013-07/amds-radeon-hd-7730-steht-kurz-vor-marktstart/
http://www.computerbase.de/news/2013-07/apple-stellt-ceo-der-marke-yves-saint-laurent-ein/
http://www.computerbase.de/news/2013-07/zwoelf-22-nm-atom-celeron-und-pentium-benannt/
http://www.computerbase.de/news/2013-07/das-nokia-lumia-1020-mit-41-mp-kamera-zeigt-sich/
http://www.computerbase.de/news/2013-07/nikon-kuendigt-450-mm-wafer-scanner-fuer-2015-an/
http://www.computerbase.de/news/2013-07/prism-regierung-gibt-sich-immer-noch-ahnungslos/
http://www.computerbase.de/news/2013-07/cooler-master-bringt-schlichte-mechanische-tastatur/
http://www.computerbase.de/news/2013-07/spieleklassiker-outcast-soll-wiederbelebt-werden/
http://www.computerbase.de/news/2013-07/opera-15-macht-vieles-anders/
http://www.computerbase.de/news/2013-07/htc-schliesst-android-4.2-fuer-one-s-aus/
http://www.computerbase.de/news/2013-07/erneut-faelschungen-von-office-2010-im-umlauf/
http://www.computerbase.de/news/2013-07/libreoffice-will-mit-amd-die-gpu-unterstuetzung-verbessern/
http://www.computerbase.de/news/2013-07/tablets-mit-firefox-os-in-vorbereitung/
http://www.computerbase.de/news/2013-07/nokia-bringt-feature-phones-mit-umts-fuer-70-dollar/
http://www.computerbase.de/news/2013-07/erstes-benchmarkergebnis-von-intels-bay-trail-t-aufgetaucht/
http://www.computerbase.de/news/2013-07/broken-age-wird-in-zwei-teilen-veroeffentlicht/
http://www.computerbase.de/news/2013-07/amd-plant-sparsame-t-modelle-von-richland/
http://www.computerbase.de/news/2013-07/fm2-mainboard-von-biostar-fuer-audiophile-mit-amd-apus/


http://www.computerbase.de/forum/showthread.php?t=1227204
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226943
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227135
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227123
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227120
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227113
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227077
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227036
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227062
1 2 3 4 5 6 7 8 9 10 11 12 13 14
http://www.computerbase.de/forum/showthread.php?t=1227058
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227047
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1227037
1 2 3 4
http://www.computerbase.de/forum/showthread.php?t=1227016
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226986
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226977
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226962
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226946
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226913
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226872
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226820
1 2 3 4 5 6 7 8 9
http://www.computerbase.de/forum/showthread.php?t=1226818
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226753
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226693
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226652
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
http://www.computerbase.de/forum/showthread.php?t=1226624
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
</snippet></ROW><ROW><id>17473620</id><snippet>repr()</snippet></ROW><ROW><id>17473620</id><snippet>__repr__</snippet></ROW><ROW><id>17473620</id><snippet>for elem in sworm:
    print(elem)
</snippet></ROW><ROW><id>17473620</id><snippet>print(', '.join(map(str, sworm)))
</snippet></ROW><ROW><id>17473620</id><snippet>__str__</snippet></ROW><ROW><id>17473620</id><snippet>def __str__(self):
    return "Critter object\n{}\n{}\n{}".format(self.name, self.hunger, self.boredom)
</snippet></ROW><ROW><id>17473620</id><snippet>print()</snippet></ROW><ROW><id>17473795</id><snippet>open()</snippet></ROW><ROW><id>17473795</id><snippet>ENOMEM</snippet></ROW><ROW><id>17473795</id><snippet>ENOMEM</snippet></ROW><ROW><id>17473795</id><snippet>ENOMEM</snippet></ROW><ROW><id>17473795</id><snippet>strace</snippet></ROW><ROW><id>17473795</id><snippet>strace -eopen -f python myscript.py myarg1 myarg2 2&gt;strace.log
</snippet></ROW><ROW><id>17473795</id><snippet>-f</snippet></ROW><ROW><id>17473795</id><snippet>jpeginfo</snippet></ROW><ROW><id>17473795</id><snippet>-eopen</snippet></ROW><ROW><id>17473795</id><snippet>open()</snippet></ROW><ROW><id>17473795</id><snippet>strace</snippet></ROW><ROW><id>17473795</id><snippet>open("/path/to/file name.jpg", O_RDONLY) = -1 ENOMEM (Cannot allocate memory)
</snippet></ROW><ROW><id>17473795</id><snippet>open()</snippet></ROW><ROW><id>17473795</id><snippet>jpeginfo</snippet></ROW><ROW><id>17473795</id><snippet>open()</snippet></ROW><ROW><id>17473795</id><snippet>strace</snippet></ROW><ROW><id>17473795</id><snippet>.py</snippet></ROW><ROW><id>17473795</id><snippet>.pyc</snippet></ROW><ROW><id>17473995</id><snippet>&gt;&gt;&gt; my_dict = {'full_name1' : 1, 'full_name2' : 2, 'full_name3' : 3}
&gt;&gt;&gt; another_dict = {'name1' : 'x', 'name2' : 'y', 'name3' : 'z'}
&gt;&gt;&gt; {key:value for S, key in my_dict.iteritems() for s, value in another_dict.iteritems() if s in S}
{1: 'x', 2: 'y', 3: 'z'}
</snippet></ROW><ROW><id>17474065</id><snippet>res_list.sort(key=lambda x: (float(x[1]), -float(x[2])))
</snippet></ROW><ROW><id>17474065</id><snippet>B</snippet></ROW><ROW><id>17474065</id><snippet>A</snippet></ROW><ROW><id>17474065</id><snippet>sorted()</snippet></ROW><ROW><id>17474065</id><snippet>res_list = sorted(res, key=lambda x: (float(x[1]), -float(x[2]))
</snippet></ROW><ROW><id>17474158</id><snippet>python -tt</snippet></ROW><ROW><id>17474196</id><snippet>\[\[(?:(?&lt;uid&gt;\w+)::)?(?!.*::)(?&lt;page&gt;[^|\t\n\r\f\v]+)(?:\|(?&lt;alias&gt;[^|\t\n\r\f\v]+))?\]\]
                      ^^^^^^^^
</snippet></ROW><ROW><id>17474196</id><snippet>uid</snippet></ROW><ROW><id>17474196</id><snippet>\[\[(?:(\w+)::)?(?!.*::)([^|\t\n\r\f\v]+)(?:\|([^|\t\n\r\f\v]+))?\]\]
</snippet></ROW><ROW><id>17474264</id><snippet>float</snippet></ROW><ROW><id>17474264</id><snippet>&gt;&gt;&gt; b = ["949.0","1099.0"]
&gt;&gt;&gt; b.sort(key=float)
&gt;&gt;&gt; b
['949.0', '1099.0']
</snippet></ROW><ROW><id>17475039</id><snippet> for a in zip(root.findall("DrillHoles/description/hole/hole/@collar"),
              root.findall("DrillHoles/description/hole/hole/@toe"),
              root.findall("DrillHoles/description/hole/hole/@cost")):
   writer.writerow([x.text for x in a])
</snippet></ROW><ROW><id>17475039</id><snippet> for a in zip(root.findall("DrillHoles/description/hole/hole[@collar]"),
              root.findall("DrillHoles/description/hole/hole[@toe]"),
              root.findall("DrillHoles/description/hole/hole[@cost]")):
   writer.writerow([x[0].get('collar'), x[1].get('toe'), x[2].get('cost')])
</snippet></ROW><ROW><id>17475039</id><snippet>for a in root.findall("DrillHoles/description/hole"):
  writer.writerow([a.find("hole[@"+attr+"]").get(attr) for attr in ("collar", "toe", "cost")])
</snippet></ROW><ROW><id>17475204</id><snippet>def modified(self, event):
    self.txt.see(END)  # tkinter.END if you use namespaces
</snippet></ROW><ROW><id>17475204</id><snippet>self.txt.bind('&lt;&lt;Modified&gt;&gt;', self.modified)
</snippet></ROW><ROW><id>17475273</id><snippet>Braintree</snippet></ROW><ROW><id>17475273</id><snippet>requirements.txt</snippet></ROW><ROW><id>17475273</id><snippet>Braintree==&lt;verson_here&gt;
</snippet></ROW><ROW><id>17475273</id><snippet>requirements.txt</snippet></ROW><ROW><id>17475273</id><snippet>pip freeze
</snippet></ROW><ROW><id>17475273</id><snippet>pip freeze</snippet></ROW><ROW><id>17475369</id><snippet>2</snippet></ROW><ROW><id>17475369</id><snippet>&gt;&gt;&gt; def func(x):
    pass
... 
&gt;&gt;&gt; def func(x = 2):
    pass
... 
</snippet></ROW><ROW><id>17475369</id><snippet>&gt;&gt;&gt; def func(2):
    pass
  File "&lt;ipython-input-234-dc2d2489d3d8&gt;", line 1
    def func(2):
             ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>17475369</id><snippet>run_cointoss</snippet></ROW><ROW><id>17475627</id><snippet>|</snippet></ROW><ROW><id>17475627</id><snippet>Ab Initio...</snippet></ROW><ROW><id>17475627</id><snippet>re.search(r'(?&lt;=[|])[^|]*(?=[|]Ab Initio Software)', name, re.IGNORECASE).group()
</snippet></ROW><ROW><id>17475627</id><snippet>(.*?)</snippet></ROW><ROW><id>17475627</id><snippet>[^|]*</snippet></ROW><ROW><id>17475627</id><snippet>re.search(r'[|]([^|]*)[|]Ab Initio Software', name, re.IGNORECASE).group(1)
</snippet></ROW><ROW><id>17475738</id><snippet>temp_type</snippet></ROW><ROW><id>17475738</id><snippet>self.temp_type()</snippet></ROW><ROW><id>17475738</id><snippet>TemporaryFile(self)</snippet></ROW><ROW><id>17475738</id><snippet>temp_type = staticmethod(tempfile.TemporaryFile)
</snippet></ROW><ROW><id>17475878</id><snippet>d = {'x': f.bar}</snippet></ROW><ROW><id>17475878</id><snippet>'x'</snippet></ROW><ROW><id>17475878</id><snippet>f.bar</snippet></ROW><ROW><id>17475878</id><snippet>f.bar</snippet></ROW><ROW><id>17475878</id><snippet>f.bar</snippet></ROW><ROW><id>17475878</id><snippet>f.bar</snippet></ROW><ROW><id>17475878</id><snippet>f.bar</snippet></ROW><ROW><id>17475878</id><snippet>d['x'] = 2</snippet></ROW><ROW><id>17475878</id><snippet>f.bar = 2</snippet></ROW><ROW><id>17475878</id><snippet>getattr</snippet></ROW><ROW><id>17475878</id><snippet>setattr</snippet></ROW><ROW><id>17475878</id><snippet>d = {'x': 'bar'}
getattr(f, d['x']) # gives the value of f.bar
setattr(f, d['x'], 2) # sets f.bar = 2
</snippet></ROW><ROW><id>17475982</id><snippet>import sys

first  = sys.argv[1]
second = sys.argv[2]
</snippet></ROW><ROW><id>17475982</id><snippet>import os
import sys

if __name__ == '__main__':

    if len(sys.argv) &lt; 2:
        print('USAGE: python %s [image-paths]' % sys.argv[0])
        sys.exit(1)

    image_paths = sys.argv[1:]

    for image_path in image_paths:
        if not os.path.exists(image_path):
            print('Your path does not exist, probably a typo. Try again.')
            sys.exit(1)
        if image_path.endswith('.img'):
            print('You did not give a .img file, try running again.')
            sys.exit(1)
</snippet></ROW><ROW><id>17475982</id><snippet>__name__</snippet></ROW><ROW><id>17475982</id><snippet>'__main__'</snippet></ROW><ROW><id>17475982</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>17475982</id><snippet>sys.argv</snippet></ROW><ROW><id>17475982</id><snippet>len(sys.argv) &lt; 2</snippet></ROW><ROW><id>17475982</id><snippet>len(sys.argv) != 3</snippet></ROW><ROW><id>17475982</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>17475982</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>17475982</id><snippet>sys.argv[2]</snippet></ROW><ROW><id>17475982</id><snippet>if os.path.exists(...)==True</snippet></ROW><ROW><id>17475982</id><snippet>if string.endswith(...)==True</snippet></ROW><ROW><id>17475982</id><snippet>if os.path.exists</snippet></ROW><ROW><id>17475982</id><snippet>if string.endswith(...)</snippet></ROW><ROW><id>17475982</id><snippet>exit()</snippet></ROW><ROW><id>17475982</id><snippet>exit(0)</snippet></ROW><ROW><id>17475982</id><snippet>exit(1)</snippet></ROW><ROW><id>17476077</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>17476077</id><snippet>import sys
import hashlib

file_path = sys.argv[0]
with open(file_path, 'rb') as file_handle:
    file_contents = file_handle.read()
    print('MD5 - ' + hashlib.md5(file_contents).hexdigest())
</snippet></ROW><ROW><id>17476077</id><snippet>hashlib.md5(open(file_name, 'rb').read())</snippet></ROW><ROW><id>17476092</id><snippet>start</snippet></ROW><ROW><id>17476092</id><snippet>&gt;&gt;&gt; x = [1,2,3,4,5]
&gt;&gt;&gt; y = x[1:3]
&gt;&gt;&gt; z = [2,3]
&gt;&gt;&gt; y == z
True
</snippet></ROW><ROW><id>17476092</id><snippet>z</snippet></ROW><ROW><id>17476092</id><snippet>x</snippet></ROW><ROW><id>17476092</id><snippet>y</snippet></ROW><ROW><id>17476092</id><snippet>x</snippet></ROW><ROW><id>17476092</id><snippet>y</snippet></ROW><ROW><id>17476092</id><snippet>x</snippet></ROW><ROW><id>17476092</id><snippet>x</snippet></ROW><ROW><id>17476092</id><snippet>x</snippet></ROW><ROW><id>17476092</id><snippet>y</snippet></ROW><ROW><id>17476092</id><snippet>y</snippet></ROW><ROW><id>17476092</id><snippet>x</snippet></ROW><ROW><id>17476092</id><snippet>y</snippet></ROW><ROW><id>17476373</id><snippet>DeleteView</snippet></ROW><ROW><id>17476373</id><snippet>POST</snippet></ROW><ROW><id>17476373</id><snippet>GET</snippet></ROW><ROW><id>17476373</id><snippet>GET</snippet></ROW><ROW><id>17476373</id><snippet>POST</snippet></ROW><ROW><id>17476373</id><snippet>POST</snippet></ROW><ROW><id>17476373</id><snippet>&lt;form method="POST" action="{% url "your_delete_url_name" %}"&gt;
   {% csrf_token %}&lt;input type="submit" value="DELETE"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17476373</id><snippet>GET</snippet></ROW><ROW><id>17476373</id><snippet>get</snippet></ROW><ROW><id>17476373</id><snippet>post</snippet></ROW><ROW><id>17476373</id><snippet>def get(self, *args, **kwargs):
    return self.post(*args, **kwargs)
</snippet></ROW><ROW><id>17476407</id><snippet>namedtuple()</snippet></ROW><ROW><id>17476407</id><snippet>import collections

MyCustomType = collections.namedtuple('MyCustomType', 'a, b')
</snippet></ROW><ROW><id>17476407</id><snippet>MyCustomType</snippet></ROW><ROW><id>17476407</id><snippet>import somemodule

def NewFunction(param):

    a = ...
    b = ...

    return somemodule.MyCustomType(a, b)
</snippet></ROW><ROW><id>17476418</id><snippet>new_list[new_list.index(x)]=variable</snippet></ROW><ROW><id>17476418</id><snippet>x</snippet></ROW><ROW><id>17476418</id><snippet>x</snippet></ROW><ROW><id>17476418</id><snippet>import random

def condition_manipulate(value):
    list_set=[]
    for i in range(value):
        new_list=initial_conditions[:]
        i=random.choice(range(len(initial_conditions)))
        new_list[i]=new_sum(new_list[i])
        list_set.append(new_list)
    return list_set
</snippet></ROW><ROW><id>17476418</id><snippet>x</snippet></ROW><ROW><id>17476509</id><snippet>'DEFAULT'</snippet></ROW><ROW><id>17476509</id><snippet>'DEFAULT'</snippet></ROW><ROW><id>17476509</id><snippet>out = [i[key] for i in lis_dic if key in i] or ['DEFAULT']
</snippet></ROW><ROW><id>17476585</id><snippet>from django import forms

class NewProjAccount(forms.Form):
    #form attributes

    def clean(self):
        cleaned_data = super(NewProjAccount, self).clean()
        perforce_depot = cleaned_data.get("perforce_depot")
        perforce_depot_size = cleaned_data.get("perforce_depot_size")

        if perforce_depot and not perforce_depot_size:
            raise forms.ValidationError("perforce_depot_size needs to be set to true.")

        # Always return the full collection of cleaned data.
        return cleaned_data
</snippet></ROW><ROW><id>17476626</id><snippet>import random

def condition_manipulate(value):
    list_set=[]
    for i in range(value):
        new_list=initial_conditions[:]
        i=random.choice(range(len(initial_conditions)))
        new_list[i]=new_sum(new_list[i])
        list_set.append(new_list)
    return list_set
</snippet></ROW><ROW><id>17476793</id><snippet>.+?</snippet></ROW><ROW><id>17476793</id><snippet>title = re.sub(r'^\s*(\[.+?\])?\s*(.*)', r'\1&lt;br&gt;&lt;strong&gt;\2&lt;/strong&gt;', title)
</snippet></ROW><ROW><id>17476793</id><snippet>try:
    title = re.sub(r'^\s*(\[.+?\])?\s*(.*)', r'\1&lt;br&gt;&lt;strong&gt;\2&lt;/strong&gt;', title)
except re.error:
    title = re.sub(r'^\s*(.*)', r'&lt;strong&gt;\1&lt;/strong&gt;', title)
</snippet></ROW><ROW><id>17476793</id><snippet>def title_sub(match):
    if match.group(1):
        return '{}&lt;br&gt;&lt;strong&gt;{}&lt;/strong&gt;'.format(*match.groups())
    return '&lt;strong&gt;{}&lt;/strong&gt;'.format(match.group(2))

title = re.sub(r'^\s*(\[.+?\])?\s*(.*)', title_sub, title)
</snippet></ROW><ROW><id>17476793</id><snippet>&gt;&gt;&gt; re.sub(r'^\s*(\[.+?\])?\s*(.*)', title_sub, '[user] John Marshal')
'[user]&lt;br&gt;&lt;strong&gt;John Marshal&lt;/strong&gt;'
&gt;&gt;&gt; re.sub(r'^\s*(\[.+?\])?\s*(.*)', title_sub, 'John Marshal')
'&lt;strong&gt;John Marshal&lt;/strong&gt;'
</snippet></ROW><ROW><id>17476924</id><snippet>x</snippet></ROW><ROW><id>17476924</id><snippet>0,0</snippet></ROW><ROW><id>17476924</id><snippet>y</snippet></ROW><ROW><id>17476924</id><snippet>y</snippet></ROW><ROW><id>17476924</id><snippet>width = 500
root.geometry('500x{}'.format(width))
</snippet></ROW><ROW><id>17476924</id><snippet>20,12</snippet></ROW><ROW><id>17476924</id><snippet>500,500</snippet></ROW><ROW><id>17476924</id><snippet>x</snippet></ROW><ROW><id>17476924</id><snippet>y</snippet></ROW><ROW><id>17476924</id><snippet>translated_y = width - 12  # which will be: 500 - 12 = 488
</snippet></ROW><ROW><id>17476953</id><snippet>eval</snippet></ROW><ROW><id>17476953</id><snippet>my_dict = eval(Cell("Data Sheet", "A1").value)
</snippet></ROW><ROW><id>17476953</id><snippet>my_dict</snippet></ROW><ROW><id>17477108</id><snippet>np.newaxis</snippet></ROW><ROW><id>17477108</id><snippet>&gt;&gt;&gt; a = np.array([1,2,3,4] 
array([1, 2, 3, 4])
&gt;&gt;&gt; a[:,np.newaxis]
array([[1],
       [2],
       [3],
       [4]])
</snippet></ROW><ROW><id>17477289</id><snippet>xml:</snippet></ROW><ROW><id>17477289</id><snippet>from lxml import etree

root = etree.Element("root")
root.set("{http://www.w3.org/XML/1998/namespace}space", "preserve")

print etree.tostring(root)
</snippet></ROW><ROW><id>17477289</id><snippet>&lt;root xml:space="preserve"/&gt;    
</snippet></ROW><ROW><id>17477658</id><snippet>topichandler</snippet></ROW><ROW><id>17477658</id><snippet>deleteMediaParent</snippet></ROW><ROW><id>17477658</id><snippet>mediahandler</snippet></ROW><ROW><id>17477658</id><snippet>mediahandler</snippet></ROW><ROW><id>17477658</id><snippet>deletefromS3</snippet></ROW><ROW><id>17477658</id><snippet>topichandler</snippet></ROW><ROW><id>17477658</id><snippet>topichandler</snippet></ROW><ROW><id>17477658</id><snippet>foo.py</snippet></ROW><ROW><id>17477658</id><snippet>#!/usr/bin/env python2.7

x = 3

from bar import y

print x, y
</snippet></ROW><ROW><id>17477658</id><snippet>bar.py</snippet></ROW><ROW><id>17477658</id><snippet>from foo import x

y = x
</snippet></ROW><ROW><id>17477658</id><snippet>#!/usr/bin/env python2.7

x = 3

from bar import y

print x, y()
</snippet></ROW><ROW><id>17477658</id><snippet>bar.py</snippet></ROW><ROW><id>17477658</id><snippet>def y():
    from foo import x
    return x
</snippet></ROW><ROW><id>17477658</id><snippet>print</snippet></ROW><ROW><id>17477780</id><snippet>result = musicbrainzngs.get_releases_by_discid(disc.id, includes=["artists", "recordings"])
</snippet></ROW><ROW><id>17477833</id><snippet>EnumProcessModules</snippet></ROW><ROW><id>17477833</id><snippet>EnumProcessModulesEx</snippet></ROW><ROW><id>17477833</id><snippet>dwFilterFlag=LIST_MODULES_ALL</snippet></ROW><ROW><id>17477833</id><snippet>win32api</snippet></ROW><ROW><id>17477833</id><snippet>EnumProcessModulesEx</snippet></ROW><ROW><id>17477833</id><snippet>from ctypes import byref, create_unicode_buffer, sizeof, WinDLL
from ctypes.wintypes import DWORD, HMODULE, MAX_PATH

Psapi = WinDLL('Psapi.dll')
Kernel32 = WinDLL('kernel32.dll')

PROCESS_QUERY_INFORMATION = 0x0400
PROCESS_VM_READ = 0x0010

LIST_MODULES_ALL = 0x03

def EnumProcesses():
    buf_count = 256
    while True:
        buf = (DWORD * buf_count)()
        buf_size = sizeof(buf)
        res_size = DWORD()
        if not Psapi.EnumProcesses(byref(buf), buf_size, byref(res_size)):
            raise OSError('EnumProcesses failed')
        if res_size.value &gt;= buf_size:
            buf_count *= 2
            continue
        count = res_size.value // (buf_size // buf_count)
        return buf[:count]

def EnumProcessModulesEx(hProcess):
    buf_count = 256
    while True:
        buf = (HMODULE * buf_count)()
        buf_size = sizeof(buf)
        needed = DWORD()
        if not Psapi.EnumProcessModulesEx(hProcess, byref(buf), buf_size,
                                          byref(needed), LIST_MODULES_ALL):
            raise OSError('EnumProcessModulesEx failed')
        if buf_size &lt; needed.value:
            buf_count = needed.value // (buf_size // buf_count)
            continue
        count = needed.value // (buf_size // buf_count)
        return map(HMODULE, buf[:count])

def GetModuleFileNameEx(hProcess, hModule):
    buf = create_unicode_buffer(MAX_PATH)
    nSize = DWORD()
    if not Psapi.GetModuleFileNameExW(hProcess, hModule,
                                      byref(buf), byref(nSize)):
        raise OSError('GetModuleFileNameEx failed')
    return buf.value

def get_process_modules(pid):
    hProcess = Kernel32.OpenProcess(
        PROCESS_QUERY_INFORMATION | PROCESS_VM_READ,
        False, pid)
    if not hProcess:
        raise OSError('Could not open PID %s' % pid)
    try:
        return [
            GetModuleFileNameEx(hProcess, hModule)
            for hModule in EnumProcessModulesEx(hProcess)]
    finally:
        Kernel32.CloseHandle(hProcess)

for pid in EnumProcesses():
    try:
        dll_list = get_process_modules(pid)
        print('dll_list: ', dll_list)
    except OSError as ose:
        print(str(ose))
    print('-' * 14)
</snippet></ROW><ROW><id>17477840</id><snippet>from bs4 import BeautifulSoup
import lxml

html_doc = open('bestellingen.html', 'r')
soup = BeautifulSoup(html_doc,'lxml')

orderId = soup.select('.orderId')
customerName = soup.select('.customerName')
orderAmount = soup.select('.orderAmount')

print orderId
print customerName
print orderAmount
</snippet></ROW><ROW><id>17478058</id><snippet>import thread

d = dict()
m = thread.allocate_lock()

def foo():
    m.acquire_lock()
    print(d['key'])

def bar():
    d['key'] = 'value'
    m.release_lock()

if __name__ == '__main__':

    m.acquire_lock()
    t1 = thread.start_new_thread(foo,())
    t2 = thread.start_new_thread(bar,())
</snippet></ROW><ROW><id>17478058</id><snippet>m</snippet></ROW><ROW><id>17478058</id><snippet>foo</snippet></ROW><ROW><id>17478058</id><snippet>bar</snippet></ROW><ROW><id>17478058</id><snippet>foo</snippet></ROW><ROW><id>17478058</id><snippet>import multiprocessing

def foo(m, d):
    m.acquire()
    print(d['key'])

def bar(m, d):
    d['key'] = 'value'
    m.release()

if __name__ == '__main__':

    manager = multiprocessing.Manager()

    m = multiprocessing.Lock()
    m.acquire()

    d = manager.dict()

    p1 = multiprocessing.Process(target=foo, args=(m, d))
    p2 = multiprocessing.Process(target=bar, args=(m, d))

    p1.start()
    p2.start()
</snippet></ROW><ROW><id>17478058</id><snippet>Lock</snippet></ROW><ROW><id>17478058</id><snippet>Manager</snippet></ROW><ROW><id>17478068</id><snippet>import re
r = re.compile(r'(?&lt;=PDFObject).*?url:.*?(http.*?)"', re.DOTALL)
s = '''var myPDF = new PDFObject({
url: "http://www.site.com/doc55.pdf",
  id: "pdfObjectContainer",
  width: "100%",
  height: "700px",
  pdfOpenParams: {
    navpanes: 0,
    statusbar: 1,
    toolbar: 1,
    view: "FitH"
  }
}).embed("pdf_placeholder"); '''

print r.findall(s)
</snippet></ROW><ROW><id>17478068</id><snippet>r = re.compile(         compile regular expression
    r'                  treat this string as a regular expression
    (?&lt;=PDFObject)      the match I want happens right after PDFObject
    .*?                 then there may be some other characters...
    url:                followed by the string url:
    .*?                 then match whatever follows until you get to the first instance (`?` : non-greedy match of
    (http:.*?)"         match the string http: up to (but not including) the first "
    ',                  end of regex string, but there's more...
    re.DOTALL)          set the DOTALL flag - this means the dot matches all characters
                        including newlines. This allows the match to continue from one line
                        to the next in the .*? right after the lookbehind
</snippet></ROW><ROW><id>17478151</id><snippet>mod_wsgi</snippet></ROW><ROW><id>17478151</id><snippet>fcgi</snippet></ROW><ROW><id>17478151</id><snippet>uwsgi</snippet></ROW><ROW><id>17478151</id><snippet>server = make_server('0.0.0.0', 8080, app)
server.serve_forever()
</snippet></ROW><ROW><id>17478151</id><snippet>app</snippet></ROW><ROW><id>17478227</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def axis_to_fig(axis):
    def transform(coord):
        return fig.transFigure.inverted().transform(
            axis.transAxes.transform(coord))
    return transform

def add_sub_axes(axis, rect):
    fig = axis.figure
    left, bottom, width, height = rect
    trans = axis_to_fig(axis)
    figleft, figbottom = trans((left, bottom))
    figwidth, figheight = trans([width,height]) - trans([0,0])
    return fig.add_axes([figleft, figbottom, figwidth, figheight])

x = np.linspace(-np.pi,np.pi)
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10,10))

for axis in axes.ravel():
    axis.set_xlim(-np.pi, np.pi)
    axis.set_ylim(-1, 3)
    axis.plot(x, np.sin(x))
    subaxis = add_sub_axes(axis, [0.2, 0.6, 0.3, 0.3])
    subaxis.plot(x, np.cos(x))

plt.show()
</snippet></ROW><ROW><id>17478237</id><snippet>#!/usr/bin/python
import json
import sys
import numpy as np
from numpy import matrix
print json.loads(sys.argv[1])
arr=json.loads(sys.argv[1])
arr1=arr[0]
arr2=arr[1]
print arr1
print arr2
A=np.asmatrix(arr1)
print A
B=np.asmatrix(arr2)
print B
Z1 = A*B
print Z1
print json.dumps(Z1.tolist())
</snippet></ROW><ROW><id>17478237</id><snippet>./matrix_multiply.py "[[[2,0],[0,1]],[[1,3],[2,4]]]"
[[[2, 0], [0, 1]], [[1, 3], [2, 4]]]
[[2, 0], [0, 1]]
[[1, 3], [2, 4]]
[[2 0]
 [0 1]]
[[1 3]
 [2 4]]
[[2 6]
 [2 4]]
[[2, 6], [2, 4]]
</snippet></ROW><ROW><id>17478302</id><snippet>board[x][y]</snippet></ROW><ROW><id>17478302</id><snippet>__getitem__</snippet></ROW><ROW><id>17478302</id><snippet>[x]</snippet></ROW><ROW><id>17478302</id><snippet>[y]</snippet></ROW><ROW><id>17478302</id><snippet>__getitem__</snippet></ROW><ROW><id>17478302</id><snippet>board[x]</snippet></ROW><ROW><id>17478302</id><snippet>[y]</snippet></ROW><ROW><id>17478302</id><snippet>__getitem__</snippet></ROW><ROW><id>17478302</id><snippet>def __getitem__(self, tup):
    y, x = tup
    return self.board[y][x]
</snippet></ROW><ROW><id>17478302</id><snippet>board[x, y]
</snippet></ROW><ROW><id>17478302</id><snippet>__getitem__</snippet></ROW><ROW><id>17478302</id><snippet>board[x][y]</snippet></ROW><ROW><id>17478489</id><snippet>login:password@www.google.co.uk:80
</snippet></ROW><ROW><id>17478489</id><snippet>["login:password", "www.google.co.uk:80"]</snippet></ROW><ROW><id>17478489</id><snippet>["www.google.co.uk", "80"]</snippet></ROW><ROW><id>17478489</id><snippet>urlparse</snippet></ROW><ROW><id>17478493</id><snippet>utcnow()</snippet></ROW><ROW><id>17478493</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17478493</id><snippet>strptime</snippet></ROW><ROW><id>17478493</id><snippet>#!/usr/bin/env python2.7

import datetime

import jinja2

def format_isodate(timestamp):
    """Format a ISODate time stamp for display."""
    date = datetime.datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S.%f")
    return date.strftime('%Y-%m-%d @ %H:%M:%S')

e = jinja2.Environment()
e.filters['isodateformat'] = format_isodate

t = e.from_string('{{ change.submit_date|isodateformat }}')
print t.render(change={'submit_date': "2013-07-04 20:06:05.088000"})
print t.render(change={'submit_date': datetime.datetime.now()})
</snippet></ROW><ROW><id>17478493</id><snippet>TypeError: must be string, not datetime.datetime</snippet></ROW><ROW><id>17478495</id><snippet>replace</snippet></ROW><ROW><id>17478495</id><snippet>df.replace([np.inf, -np.inf], np.nan)
</snippet></ROW><ROW><id>17478495</id><snippet>dropna</snippet></ROW><ROW><id>17478495</id><snippet>df.replace([np.inf, -np.inf], np.nan).dropna(subset=["col1", "col2"], how="all")
</snippet></ROW><ROW><id>17478495</id><snippet>In [11]: df = pd.DataFrame([1, 2, np.inf, -np.inf])

In [12]: df.replace([np.inf, -np.inf], np.nan)
Out[12]:
    0
0   1
1   2
2 NaN
3 NaN
</snippet></ROW><ROW><id>17478685</id><snippet>if any([orderinput == x[0] for x in order]):
</snippet></ROW><ROW><id>17478742</id><snippet>uniquePaths</snippet></ROW><ROW><id>17478742</id><snippet>uniquePaths</snippet></ROW><ROW><id>17478742</id><snippet>uniquePaths.extend(uniqueTreePaths)</snippet></ROW><ROW><id>17478742</id><snippet>visited</snippet></ROW><ROW><id>17478742</id><snippet>visited</snippet></ROW><ROW><id>17478742</id><snippet>visited</snippet></ROW><ROW><id>17478742</id><snippet>uniqueTreePaths</snippet></ROW><ROW><id>17478742</id><snippet>visited</snippet></ROW><ROW><id>17478742</id><snippet>uniqueTreePaths.append(list(visited))</snippet></ROW><ROW><id>17478742</id><snippet>list</snippet></ROW><ROW><id>17478742</id><snippet>visited</snippet></ROW><ROW><id>17478742</id><snippet>uniqueTreePaths.append(tuple(visited))</snippet></ROW><ROW><id>17478866</id><snippet>x,y = zip(*s)
plt.scatter(x,y)
</snippet></ROW><ROW><id>17478866</id><snippet>plt.scatter(*zip(*a))
</snippet></ROW><ROW><id>17478866</id><snippet>zip()</snippet></ROW><ROW><id>17478866</id><snippet>method(*list_or_tuple)</snippet></ROW><ROW><id>17479019</id><snippet>import re
mystring = '* Text1'
print re.sub(r'\* (.*)',r'\\begin{itemize} \n\\item \1 \n\\end{itemize}',mystring)
</snippet></ROW><ROW><id>17479019</id><snippet>\begin{itemize} 
\item Text1 
\end{itemize}
</snippet></ROW><ROW><id>17479379</id><snippet>text</snippet></ROW><ROW><id>17479379</id><snippet>translate</snippet></ROW><ROW><id>17479379</id><snippet>unicode</snippet></ROW><ROW><id>17479379</id><snippet>s.send("Bing translation: " + text + "\r")
</snippet></ROW><ROW><id>17479412</id><snippet>import numpy as np
from matplotlib import pylab as plt

A = np.fromfile(filename, dtype='int16', sep="")
A = A.reshape([1024, 1024])
plt.imshow(A)
</snippet></ROW><ROW><id>17479468</id><snippet>append</snippet></ROW><ROW><id>17479468</id><snippet>append</snippet></ROW><ROW><id>17479468</id><snippet>+=</snippet></ROW><ROW><id>17479468</id><snippet>+</snippet></ROW><ROW><id>17479468</id><snippet>+=</snippet></ROW><ROW><id>17479468</id><snippet>timeit</snippet></ROW><ROW><id>17479468</id><snippet>&gt;&gt;&gt; timeit.timeit(stmt="l = l + j", setup="l=[1,2,3,4]; j = [5,6,7,8]", number=10000)
0.5794978141784668
&gt;&gt;&gt; timeit.timeit(stmt="l += j", setup="l=[1,2,3,4]; j = [5,6,7,8]", number=10000)
0.0013298988342285156
</snippet></ROW><ROW><id>17479468</id><snippet>+=</snippet></ROW><ROW><id>17479468</id><snippet>extend</snippet></ROW><ROW><id>17479468</id><snippet>l.extend(l2)</snippet></ROW><ROW><id>17479468</id><snippet>&gt;&gt;&gt; timeit.timeit(stmt="l.extend(j)", setup="l=[1,2,3,4]; j = [5,6,7,8]", number=10000)
0.0016009807586669922
&gt;&gt;&gt; timeit.timeit(stmt="for e in j: l.append(e)", setup="l=[1,2,3,4]; j = [5,6,7,8]", number=10000)
0.00805807113647461
</snippet></ROW><ROW><id>17479468</id><snippet>+</snippet></ROW><ROW><id>17479468</id><snippet>+</snippet></ROW><ROW><id>17479468</id><snippet>extend</snippet></ROW><ROW><id>17479468</id><snippet>+=</snippet></ROW><ROW><id>17479468</id><snippet>extend</snippet></ROW><ROW><id>17479543</id><snippet>[mydict[k] if k in mydict else 'NOT PRESENT' for mydict in dlist]
</snippet></ROW><ROW><id>17479543</id><snippet>get(k[,d])</snippet></ROW><ROW><id>17479543</id><snippet>[mydict.get(k, 'NOT PRESENT') for mydict in dlist]
</snippet></ROW><ROW><id>17479577</id><snippet>from .plus import *
from .minus import *
from .multiply import *
from .divide import *
</snippet></ROW><ROW><id>17479605</id><snippet>str.center</snippet></ROW><ROW><id>17479605</id><snippet>assert '^^' + 'Longer String'.center(19) + '^^' == '^^   Longer String   ^^'
assert '^^' + 'Short'.center(19) + '^^'         == '^^       Short       ^^'
</snippet></ROW><ROW><id>17479667</id><snippet>list1</snippet></ROW><ROW><id>17479667</id><snippet>Null = None
list1 = [(12, "AB"), (12, "AB"), (12, "CD"), (13, Null), (13, "DE"), (13, "DE")]

keys = []
for k,v in list1:
    if k not in keys:
        keys.append(k)
list2 = []
for k in keys:
    values = []
    for k2, v in list1:
        if k2 == k:
            if v not in values:
                values.append(v)
    list2.append([k] + values)

print(list2)
</snippet></ROW><ROW><id>17479667</id><snippet>list1</snippet></ROW><ROW><id>17479667</id><snippet>from collections import defaultdict 
Null = None
list1 = [(12, "AB"), (12, "AB"), (12, "CD"), (13, Null), (13, "DE"), (13, "DE")]

keys = []
for k,v in list1:
    if k not in keys:
        keys.append(k)

intermediate = defaultdict(list)
for k, v  in list1:
    if v not in intermediate[k]:
        intermediate[k].append(v)

list2 = []
for k in keys:
    list2.append([k] + intermediate[k])

print(list2)
</snippet></ROW><ROW><id>17479677</id><snippet>def paren_matcher(string, opens, closes):
    """Yield (in order) the parts of a string that are contained
    in matching parentheses.  That is, upon encounting an "open
    parenthesis" character (one in &lt;opens&gt;), we require a
    corresponding "close parenthesis" character (the corresponding
    one from &lt;closes&gt;) to close it.

    If there are embedded &lt;open&gt;s they increment the count and
    also require corresponding &lt;close&gt;s.  If an &lt;open&gt; is closed
    by the wrong &lt;close&gt;, we raise a ValueError.
    """
    stack = []
    if len(opens) != len(closes):
        raise TypeError("opens and closes must have the same length")
    # could make sure that no closes[i] is present in opens, but
    # won't bother here...

    result = []
    for char in string:
        # If it's an open parenthesis, push corresponding closer onto stack.
        pos = opens.find(char)
        if pos &gt;= 0:
            if result and not stack: # yield accumulated pre-paren stuff
               yield ''.join(result)
               result = []
            result.append(char)
            stack.append(closes[pos])
            continue
        result.append(char)
        # If it's a close parenthesis, match it up.
        pos = closes.find(char)
        if pos &gt;= 0:
            if not stack or stack[-1] != char:
                raise ValueError("unbalanced parentheses: %s" %
                    ''.join(result))
            stack.pop()
            if not stack: # final paren closed
                yield ''.join(result)
                result = []
    if stack:
        raise ValueError("unclosed parentheses: %s" % ''.join(result))
    if result:
        yield ''.join(result)

print list(paren_matcher('(([a] b) c ) [d] (e) f', '([', ')]'))
print list(paren_matcher('foo (bar (baz))', '(', ')'))
</snippet></ROW><ROW><id>17479804</id><snippet>n</snippet></ROW><ROW><id>17479804</id><snippet>while</snippet></ROW><ROW><id>17479804</id><snippet>1</snippet></ROW><ROW><id>17479804</id><snippet>enumerate</snippet></ROW><ROW><id>17479804</id><snippet>m</snippet></ROW><ROW><id>17479804</id><snippet>N</snippet></ROW><ROW><id>17479804</id><snippet>strlist</snippet></ROW><ROW><id>17479804</id><snippet>e</snippet></ROW><ROW><id>17479804</id><snippet>strlist</snippet></ROW><ROW><id>17479804</id><snippet>split()</snippet></ROW><ROW><id>17479804</id><snippet>e.split()</snippet></ROW><ROW><id>17479804</id><snippet>N</snippet></ROW><ROW><id>17479804</id><snippet>m</snippet></ROW><ROW><id>17479804</id><snippet>N</snippet></ROW><ROW><id>17479804</id><snippet>len(e.split())</snippet></ROW><ROW><id>17479804</id><snippet>m</snippet></ROW><ROW><id>17479804</id><snippet>m</snippet></ROW><ROW><id>17479804</id><snippet>while (n &lt; len(strList)):
    for word in numStrList[n][1].split():
        if word not in dictionary:
            dictionary[word] = {numStrList[n][0]}
        elif {numStrList[n][0]} not in dictionary[word]:
            dictionary[word]|={numStrList[n][0]} 
    n = n+1         
</snippet></ROW><ROW><id>17479804</id><snippet>while</snippet></ROW><ROW><id>17479804</id><snippet>n &lt; len(strlist)</snippet></ROW><ROW><id>17479920</id><snippet>telnetlib</snippet></ROW><ROW><id>17480300</id><snippet>urllib2</snippet></ROW><ROW><id>17480300</id><snippet>from multiprocessing import Pool
# Use the following if you prefer to use threads over processes.
# from multiprocessing.pool import ThreadPool as Pool

urls = ['https://someurl', 'https://someurl', ...]

def download_json(url):
    req2 = urllib2.Request(url)
    req2.add_header('cookie', cookie)
    response = urllib2.urlopen(req2)
    data = response.read()
    return json.loads(data)

pool = Pool()
vals = pool.map(download_json, urls)
</snippet></ROW><ROW><id>17480304</id><snippet>print</snippet></ROW><ROW><id>17480304</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>17480304</id><snippet>sys.stdout</snippet></ROW><ROW><id>17480304</id><snippet>print</snippet></ROW><ROW><id>17480418</id><snippet>class met(type):
    def __init__(cls, name, bases, dct):
        super(met, cls).__init__(name, bases, dct)
        cls._test_member = "test_value"

object = met('object', (object,), {})

class A(object):
    pass

print(A._test_member)
</snippet></ROW><ROW><id>17480418</id><snippet>test_value
</snippet></ROW><ROW><id>17480418</id><snippet>met</snippet></ROW><ROW><id>17480418</id><snippet>class met(type):
    def __init__(cls, name, bases, dct):
        super(met, cls).__init__(name, bases, dct)
        cls._test_member = "test_value"

object = met('object', (object,), {})

class someothertype(type): pass

class B(object):
    __metaclass__ = someothertype
</snippet></ROW><ROW><id>17480418</id><snippet>TypeError: Error when calling the metaclass bases
    metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
</snippet></ROW><ROW><id>17480667</id><snippet>any()</snippet></ROW><ROW><id>17480667</id><snippet>for i in location_hw_map: # Loops through every key in the dictionary
    if i in testString: # If the key is in the test string (if "123456789" is in "uyrfr..."
        print location_hw_map[i] # Print the value of the key
        break # We break out of the loop incase of multiple keys that are in the test string 
</snippet></ROW><ROW><id>17480667</id><snippet>lounge
</snippet></ROW><ROW><id>17480724</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; filter(string.printable.__contains__, '\x00\x01XYZ\x00\x10')
'XYZ'
</snippet></ROW><ROW><id>17480742</id><snippet>_Classname</snippet></ROW><ROW><id>17480742</id><snippet>Classname</snippet></ROW><ROW><id>17480799</id><snippet>question = "Is this a question?"

# Render the text:
font = pygame.font.SysFont("Arial", 20)
text_surface = font.render(question, true, (0,0,0))

# Blit the text to the screen
text_rect = text_surface.get_rect()
text_rect.center = (100,100)
screen.blit(text_surface, text_rect.topleft)
</snippet></ROW><ROW><id>17480908</id><snippet>print "**", '{0:^48}'.format(Message), "**"
</snippet></ROW><ROW><id>17481059</id><snippet>line</snippet></ROW><ROW><id>17481059</id><snippet>\n</snippet></ROW><ROW><id>17481059</id><snippet>link = "http://somewebsite.com/application?number="+line.rstrip('\n')+"&amp;tab=main&amp;xml=ab14"
</snippet></ROW><ROW><id>17481459</id><snippet>__module__</snippet></ROW><ROW><id>17481459</id><snippet>class A(object):
    __module__ = 'b'
</snippet></ROW><ROW><id>17481459</id><snippet>getmodule</snippet></ROW><ROW><id>17481459</id><snippet>b</snippet></ROW><ROW><id>17481459</id><snippet>getmodule(A)</snippet></ROW><ROW><id>17481459</id><snippet>b</snippet></ROW><ROW><id>17481681</id><snippet>na_values=-99.9
</snippet></ROW><ROW><id>17481693</id><snippet>empty = {'151': {'1': 'empty', '0': 'empty', '2': '2.30'}}
full = {'151': {'1': 3.4, '0': 3.6, '2': 2}}

def repl(a, b):
    clean = {}
    for k, v in a.items():
        # This is the case where we want to replace what we have in b if we have something.  Just in case, use the dict.get method and provide a default.
        if v == 'empty': 
            clean[k] = b.get(k, 'Not there')
        # If the value is another dict, then call this function with the value, and put the return as the value for our current key
        elif isinstance(v, dict):
            v_clean = repl(v, b.get(k, {}))
            clean[k] = v_clean
        # The value isn't equal to 'empty', and it isn't another dict, so just keep the current value.
        else:
            clean[k] = v
    # Finally, return the cleaned up dictionary.
    return clean

print repl(empty, full)
</snippet></ROW><ROW><id>17481693</id><snippet>{'151': {'1': 3.4, '0': 3.6, '2': '2.30'}}
</snippet></ROW><ROW><id>17481693</id><snippet>empty = {'151': {'1': 'empty', '0': 'empty', '2': '2.30', '8': ['empty', 'empty', 5, {"foo2": "bar2", "1": "empty"}]}}
full = {'151': {'1': 3.4, '0': 3.6, '2': 2, '8': ['foo', 'bar', 'baz', {"foo3": "bar3", "1": "2"}]}}

def repl(a, b):
    if isinstance(a, dict) and isinstance(b, dict):
        clean = {}
        for k, v in a.items():
            # This is the case where we want to replace what we have in b if we have something.  Just in case, use the dict.get method and provide a default.
            if v == 'empty':
                clean[k] = b.get(k, 'Not there')
            # If the value is another dict, then call this function with the value, and put the return as the value for our current key
            elif isinstance(v, dict):
                v_clean = repl(v, b.get(k, {}))
                clean[k] = v_clean
            # The value isn't equal to 'empty', and it isn't another dict, so just keep the current value.
            elif isinstance(v, list):
                v_clean = repl(v, b.get(k, []))
                clean[k] = v_clean
            else:
                clean[k] = v
        # Finally, return the cleaned up dictionary.
    elif isinstance(a, list) and isinstance(b, list):
        clean = []
        for item_a, item_b in zip(a, b):
            if item_a == 'empty':
                clean.append(item_b)
            elif isinstance(item_a, dict):
                clean_a = repl(item_a, item_b)
                clean.append(clean_a)
            else:
                clean.append(item_a)
    return clean

print repl(empty, full)
</snippet></ROW><ROW><id>17481693</id><snippet>{'151': {'1': 3.4, '0': 3.6, '2': '2.30', '8': ['foo', 'bar', 5, {'1': '2', 'foo2': 'bar2'}]}}
</snippet></ROW><ROW><id>17481881</id><snippet>&gt;&gt;&gt; jsonurl = urlopen('http://www.reddit.com/r/funny/hot.json?limit=16')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py", line 126, in urlopen
    return _opener.open(url, data, timeout)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py", line 406, in open
    response = meth(req, response)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py", line 519, in http_response
    'http', request, response, code, msg, hdrs)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py", line 444, in error
    return self._call_chain(*args)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py", line 378, in _call_chain
    result = func(*args)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py", line 527, in http_error_default
    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)
urllib2.HTTPError: HTTP Error 429: Unknown
</snippet></ROW><ROW><id>17481881</id><snippet>try</snippet></ROW><ROW><id>17481881</id><snippet>except</snippet></ROW><ROW><id>17481881</id><snippet>jsonurl</snippet></ROW><ROW><id>17481881</id><snippet>print jsourl</snippet></ROW><ROW><id>17481881</id><snippet>jsonurl.__repr__()</snippet></ROW><ROW><id>17481881</id><snippet>&gt;&gt;&gt; jsonurl.__repr__()
'&lt;addinfourl at 4393153672 whose fp = &lt;socket._fileobject object at 0x105978450&gt;&gt;'
</snippet></ROW><ROW><id>17481881</id><snippet>&gt;&gt;&gt; jsonurl.getcode()
200
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17481941</id><snippet>datetime</snippet></ROW><ROW><id>17481941</id><snippet>pytz</snippet></ROW><ROW><id>17481941</id><snippet>import pytz
import datetime
s = '2013:07:04:14:00'
mydate = datetime.datetime.strptime(s, '%Y:%m:%d:%H:%M')
mydate = mydate.replace(tzinfo=timezone('Australia/Sydney'))
print mydate
</snippet></ROW><ROW><id>17481941</id><snippet>2013-07-04 14:00:00+10:00
</snippet></ROW><ROW><id>17482823</id><snippet>=</snippet></ROW><ROW><id>17482823</id><snippet>client.get('/tracks', q='Harry Connick Jr', tags!='Rock and Roll')
</snippet></ROW><ROW><id>17482823</id><snippet>q='Harry Connick Jr'</snippet></ROW><ROW><id>17482823</id><snippet>tags!='Rock and Roll'</snippet></ROW><ROW><id>17482823</id><snippet>True</snippet></ROW><ROW><id>17482823</id><snippet>False</snippet></ROW><ROW><id>17483041</id><snippet>arr[i] = 0   # zeroes out row i
arr[:,i] = 0 # zeroes out column i
</snippet></ROW><ROW><id>17483175</id><snippet># In models.py, add as_dict() method to all models
# Example for class Book
def as_dict(self):
    d = {
        "id": self.id,
        "publisher": self.publisher.as_dict(), # avoid this
        "title": self.title,        
        "publication_date": str(self.publication_date),  
        "publisher": self.publisher,  
        "authors": [author.as_dict() for author in self.authors.all()] # avoid this
    }

# then in views.py
def getAllBooks(request):
    book_list = [book.as_dict() for book in Book.objects.all().select_related()]
    return HttpResponse(simplejson.dumps(book_list), 
                        content_type="application/json")
</snippet></ROW><ROW><id>17483221</id><snippet>T=numpy.ndarray((5,10))
for t in T:
print t.shape
</snippet></ROW><ROW><id>17483221</id><snippet>double_vec = zip(img_vec,img_pix_vec)
result_row = np.array([tfidf(x[0],x[1],img_total) for x in double_vec])
</snippet></ROW><ROW><id>17483221</id><snippet>result_row=np.array([tfidf(img_vec[i],img_pix_vec[i],img_total) for i in xrange(len(img_vec))])
</snippet></ROW><ROW><id>17483248</id><snippet>set</snippet></ROW><ROW><id>17483656</id><snippet>def chunks(l, n):
    return [l[i:i+n] for i in range(0, len(l), n)]

mylist = [1,2,3,4,5,6,7,8]
while 1:
    try:
        size = int(raw_input('What size? ')) # Or input() if python 3.x
        break
    except ValueError:
        print "Numbers only please"

print chunks(yourlist, size)
</snippet></ROW><ROW><id>17483656</id><snippet>[[1, 2], [3, 4], [5, 6], [7, 8]] # Assuming 2 was the input
</snippet></ROW><ROW><id>17483656</id><snippet>&gt;&gt;&gt; zip(*[iter(l)]*size) # Assuming 2 was the input
[(1, 2), (3, 4), (5, 6), (7, 8)]
</snippet></ROW><ROW><id>17483756</id><snippet>[[(1, 2), (3, 4), (2, 3)]]
</snippet></ROW><ROW><id>17483756</id><snippet>[(1, 2, 3, 4)]
</snippet></ROW><ROW><id>17483756</id><snippet>import collections

# build an adjacency list representation of your input
graph = collections.defaultdict(set)
for l in ListA:
    for first, second in l:
        graph[first].add(second)
        graph[second].add(first)

# breadth-first search the graph to produce the output
output = []
marked = set() # a set of all nodes whose connected component is known
for node in graph:
    if node not in marked:
        # this node is not in any previously seen connected component
        # run a breadth-first search to determine its connected component
        frontier = set([node])
        connected_component = []
        while frontier:
            marked |= frontier
            connected_component.extend(frontier)

            # find all unmarked nodes directly connected to frontier nodes
            # they will form the new frontier
            new_frontier = set()
            for node in frontier:
                new_frontier |= graph[node] - marked
            frontier = new_frontier
        output.append(tuple(connected_component))
</snippet></ROW><ROW><id>17483756</id><snippet>import collections

clusterer = collections.defaultdict(list)

for l in ListA:
    for k, v in l:
        clusterer[k].append(v)

output = clusterer.values()
</snippet></ROW><ROW><id>17483756</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>17483756</id><snippet>dict</snippet></ROW><ROW><id>17483756</id><snippet>list</snippet></ROW><ROW><id>17483817</id><snippet>collections.Iterable</snippet></ROW><ROW><id>17483817</id><snippet>&gt;&gt;&gt; from collections import Iterable
&gt;&gt;&gt; def flat(lst):
...     for parent in lst:
...         if not isinstance(parent, Iterable):
...             yield parent
...         else:
...             for child in flat(parent):
...                 yield child
...
&gt;&gt;&gt; list(flat(t))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>17484055</id><snippet>&gt;&gt;&gt; [i for i in A if not any(i[0] == k for k, _ in B)]
[['3', '2']]
</snippet></ROW><ROW><id>17484055</id><snippet>any()</snippet></ROW><ROW><id>17484055</id><snippet>B</snippet></ROW><ROW><id>17484055</id><snippet>not any(...)</snippet></ROW><ROW><id>17484099</id><snippet>urllib3</snippet></ROW><ROW><id>17484099</id><snippet>def __init__(self, user, pw, authurl, *args, **kwargs):
    """
    authurl is a random URL on the server that is protected by NTLM.
    user is the Windows user, probably in the DOMAIN\username format.
    pw is the password for the user.
    """
</snippet></ROW><ROW><id>17484099</id><snippet>\u</snippet></ROW><ROW><id>17484099</id><snippet>import requests</snippet></ROW><ROW><id>17484099</id><snippet>import requests.packages.urllib3</snippet></ROW><ROW><id>17484099</id><snippet>import requests.packages.urllib3.contrib.ntlmpool</snippet></ROW><ROW><id>17484099</id><snippet>ntlmpool</snippet></ROW><ROW><id>17484099</id><snippet>urllib</snippet></ROW><ROW><id>17484099</id><snippet>requests</snippet></ROW><ROW><id>17484099</id><snippet>pip install git+https://github.com/kennethreitz/requests</snippet></ROW><ROW><id>17484099</id><snippet>/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/requests/packages/urllib3/contrib/ntlmpool.py</snippet></ROW><ROW><id>17484099</id><snippet>def __init__(self, user, pw, authurl, *args, **kwargs):
    """
    authurl is a random URL on the server that is protected by NTLM.
    user is the Windows user, probably in the DOMAIN\\username format.
    pw is the password for the user.
    """
</snippet></ROW><ROW><id>17484269</id><snippet>IMAP4_SSL</snippet></ROW><ROW><id>17484269</id><snippet>IMAP4</snippet></ROW><ROW><id>17484269</id><snippet>import imaplib
imap_server = imaplib.IMAP4_SSL("imap.server.com")
print "\n".join(i for i in imap_server.capabilities if i.startswith("AUTH="))
</snippet></ROW><ROW><id>17484269</id><snippet>imap_server.authenticate()</snippet></ROW><ROW><id>17484348</id><snippet>reverse</snippet></ROW><ROW><id>17484348</id><snippet>/helpdesk/tickets/</snippet></ROW><ROW><id>17484348</id><snippet>404</snippet></ROW><ROW><id>17484348</id><snippet>urlpatterns = i18n_patterns('', 
    (_(r'^helpdesk/tickets/$', HelpdeskView.as_view(), name='tickets')
    (_(r'^support/$'), RedirectView.as_view(url=reverse_lazy('tickets'))
)
</snippet></ROW><ROW><id>17484531</id><snippet>pip install html5lib==0.95
</snippet></ROW><ROW><id>17484575</id><snippet>-s/--socket-name SOCKET -- Unix socket name for client (default "zdsock")
</snippet></ROW><ROW><id>17484575</id><snippet>sudo zdaemon -p "python write_ips_from_asa_log_to_file.py" -d -s ~/write_ips start
</snippet></ROW><ROW><id>17484665</id><snippet>format(12345678.46, ',').replace(',', ' ').replace('.', ',')
</snippet></ROW><ROW><id>17484665</id><snippet>str.format</snippet></ROW><ROW><id>17484665</id><snippet>format</snippet></ROW><ROW><id>17484665</id><snippet>'{:,}'.format(12345678.46)
</snippet></ROW><ROW><id>17484665</id><snippet>n</snippet></ROW><ROW><id>17484665</id><snippet>locale.format</snippet></ROW><ROW><id>17484665</id><snippet>&gt;&gt;&gt; locale.setlocale(locale.LC_NUMERIC, 'pl_PL')
&gt;&gt;&gt; format(12345678, 'n')
12 345 678
&gt;&gt;&gt; locale.format('%.2f' 12345678.12, grouping=True)
12 345 678,46
&gt;&gt;&gt; locale.setlocale(locale.LC_NUMERIC, 'fr_FR')
&gt;&gt;&gt; locale.format('%.2f' 12345678.12, grouping=True)
12345678,46
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'en_AU')
&gt;&gt;&gt; locale.format('%.2f' 12345678.12, grouping=True)
12,345,678.46
</snippet></ROW><ROW><id>17484665</id><snippet>pl_PL</snippet></ROW><ROW><id>17484665</id><snippet>locale.setlocale(locale.LC_NUMERIC)</snippet></ROW><ROW><id>17484665</id><snippet>locale.setlocale(locale.LC_ALL)</snippet></ROW><ROW><id>17484734</id><snippet>__builtins__</snippet></ROW><ROW><id>17484734</id><snippet>__builtin__</snippet></ROW><ROW><id>17484734</id><snippet>import __builtin__</snippet></ROW><ROW><id>17485115</id><snippet>str.translate</snippet></ROW><ROW><id>17485115</id><snippet>&gt;&gt;&gt; from string import letters, digits, whitespace, punctuation
&gt;&gt;&gt; s = "aaa; sf = fa = bla http://wa"
&gt;&gt;&gt; s.translate(None, letters+digits+whitespace)
';==://'
</snippet></ROW><ROW><id>17485115</id><snippet>regex</snippet></ROW><ROW><id>17485115</id><snippet>&gt;&gt;&gt; re.sub(r'[^{}]+'.format(punctuation),'',s)
';==://'
</snippet></ROW><ROW><id>17485115</id><snippet>&gt;&gt;&gt; s = "aaa; sf = fa = bla http://wa"*1000
&gt;&gt;&gt; %timeit s.translate(None,letters+digits+whitespace)
10000 loops, best of 3: 171 us per loop                  #winner
&gt;&gt;&gt; r1 = re.compile(r'[^{}]+'.format(punctuation))
&gt;&gt;&gt; r2 = re.compile(r'[\w\s]+')
&gt;&gt;&gt; %timeit r1.sub('',s)
100 loops, best of 3: 2.64 ms per loop
&gt;&gt;&gt; %timeit r2.sub('',s)
100 loops, best of 3: 3.31 ms per loop
</snippet></ROW><ROW><id>17485307</id><snippet>PATH</snippet></ROW><ROW><id>17485307</id><snippet>/opt/mystuff/bin/my_script_command</snippet></ROW><ROW><id>17485307</id><snippet>my_script_command</snippet></ROW><ROW><id>17485357</id><snippet>class ParentForm(forms.Form):
     media = forms.ModelChoiceField(Media.objects.none(), widget=forms.Select())
     def __init__(self, *args, **kwargs):
         parent = kwargs.pop('parent')
         super(ParentForm, self).__init__(*args, **kwargs)
         self.fields['media'].queryset = parent.media.all()

def my_view(request):
    parent = Parent.objects.filter(name=request.session['current_parent'])
    form = ParentForm(parent=parent)
    return render_to_response('tab.html', {'media_form': form}) 
</snippet></ROW><ROW><id>17485357</id><snippet> &lt;select name='media'&gt;
 {% for media in parent.media.all %}
     &lt;option value='{{ media.ident }}'&gt;{{ media.name }}&lt;/option&gt;
 {% endfor %}
 &lt;/select&gt;
</snippet></ROW><ROW><id>17485480</id><snippet>QCoreApplication::aboutToQuit</snippet></ROW><ROW><id>17485480</id><snippet>lastWindowClosed</snippet></ROW><ROW><id>17485480</id><snippet>QApplication::quit</snippet></ROW><ROW><id>17485586</id><snippet>text_widget.get('1.0', 'end-1c')</snippet></ROW><ROW><id>17485586</id><snippet>str.splitlines()</snippet></ROW><ROW><id>17485586</id><snippet>from tkinter import *

def iterate_lines():
    for line in t.get('1.0', 'end-1c').splitlines():
        # Iterate lines
        if line:
            print('path: {}'.format(line))

root = Tk()
t = Text(root)
t.insert(END, '/path/to/file/1.txt\n/path/to/file/2.txt\n/path/to/file3.txt\n')
t.pack()
Button(root, text='iterate', command=iterate_lines).pack()
root.mainloop()
</snippet></ROW><ROW><id>17485658</id><snippet>datetime</snippet></ROW><ROW><id>17485658</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; date1 = datetime.strptime(date1, "%d/%m/%Y")
&gt;&gt;&gt; date2 = datetime.strptime(date2, "%d/%m/%Y")
&gt;&gt;&gt; date3 = datetime.strptime(date3, "%d/%m/%Y")
&gt;&gt;&gt; date4 = datetime.strptime(date4, "%d/%m/%Y")
&gt;&gt;&gt; datelist = [date1, date2, date3]
&gt;&gt;&gt; for j in datelist:
...      if j &lt;= date4:
...           print(j.strftime('%d/%m/%Y'))
... 
20/06/2013
25/06/2013
01/07/2013
</snippet></ROW><ROW><id>17485730</id><snippet>for line in file.split('\n'):
    # Replace multiple dots with space
    line = re.sub('\.\.+', ' ', line) 
    # Remove single dots
    line = re.sub('\.', '', line)
    print line
</snippet></ROW><ROW><id>17485785</id><snippet>itertools.chain</snippet></ROW><ROW><id>17485785</id><snippet>[1,[2,2,2],4]</snippet></ROW><ROW><id>17485785</id><snippet>1</snippet></ROW><ROW><id>17485785</id><snippet>4</snippet></ROW><ROW><id>17485785</id><snippet>&gt;&gt;&gt; from collections import Iterable
def flatten(lis):
     for item in lis:
         if isinstance(item, Iterable) and not isinstance(item, basestring):
             for x in flatten(item):
                 yield x
         else:        
             yield item

&gt;&gt;&gt; lis = [1,[2,2,2],4]
&gt;&gt;&gt; list(flatten(lis))
[1, 2, 2, 2, 4]
&gt;&gt;&gt; list(flatten([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>17485785</id><snippet>&gt;&gt;&gt; a = [1,[2,2,[2]],4]
&gt;&gt;&gt; list(flatten(a))
[1, 2, 2, 2, 4]
</snippet></ROW><ROW><id>17485785</id><snippet>&gt;&gt;&gt; lis = [1,[2,2,2],"456"]
&gt;&gt;&gt; list(flatten(lis))
[1, 2, 2, 2, '456']
</snippet></ROW><ROW><id>17485969</id><snippet>[item for item in list]</snippet></ROW><ROW><id>17485969</id><snippet>list</snippet></ROW><ROW><id>17485969</id><snippet>3</snippet></ROW><ROW><id>17485969</id><snippet>if a in list:
    print(sth)
</snippet></ROW><ROW><id>17485969</id><snippet>if any(a == item for item in list):
    print(sth)
</snippet></ROW><ROW><id>17485969</id><snippet>list</snippet></ROW><ROW><id>17485969</id><snippet>dict</snippet></ROW><ROW><id>17486008</id><snippet>u = db.GqlQuery("SELECT username FROM Users WHERE username='self.username'")
</snippet></ROW><ROW><id>17486008</id><snippet>u = db.GqlQuery("SELECT username FROM Users WHERE username = :1", self.username)
</snippet></ROW><ROW><id>17486109</id><snippet>def build_tree(l):
    exists = set(map(lambda x : x['id'], l))

    tops = []
    children = {}
    for e in l:
        parent = e['parent']
        if not parent:
            tops.append(e)
            continue

        parent = int(parent[1:])
        if parent not in exists:
            tops.append(e)
            continue

        if parent in children:
            children[parent].append(e)
        else:
            children[parent] = [ e ]

    return children, tops
</snippet></ROW><ROW><id>17486109</id><snippet>def build_list(children, top):
    l = [ top ]
    if top['id'] in children:
        for child in children[top['id']]:
            l += build_list(children, child)
    return l
</snippet></ROW><ROW><id>17486109</id><snippet>l = [{'parent': u'#5963','id': 5962},{'parent': u'','id': 5963},
{'parent': u'#5963', 'id': 5964}, {'parent': u'#5966', 'id': 5967},
{'parent': u'#5963','id': 5966}, {'parent': u'#5962','id': 5968} ]
children, tops = build_tree(l)
for top in tops:
    print build_list(children, top)
# outputs : [{'id': 5963, 'parent': u''}, {'id': 5962, 'parent': u'#5963'},
# {'id': 5968, 'parent': u'#5962'}, {'id': 5964, 'parent': u'#5963'},
# {'id': 5966, 'parent': u'#5963'}, {'id': 5967, 'parent': u'#5966'}]
</snippet></ROW><ROW><id>17486109</id><snippet>[{'id': 5962, 'parent': u'#5963'}, {'id': 5968, 'parent': u'#5962'}]
[{'id': 5964, 'parent': u'#5963'}]
[{'id': 5966, 'parent': u'#5963'}, {'id': 5967, 'parent': u'#5966'}]
</snippet></ROW><ROW><id>17486208</id><snippet>regex</snippet></ROW><ROW><id>17486208</id><snippet>str.translate</snippet></ROW><ROW><id>17486208</id><snippet>&gt;&gt;&gt; from string import punctuation
&gt;&gt;&gt; punctuation
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'

&gt;&gt;&gt; strs = "fo@#$%sf*&amp;"

&gt;&gt;&gt; re.sub(r'[{}]'.format(punctuation),'',strs)
'fosf'

&gt;&gt;&gt; strs.translate(None,punctuation)
'fosf'
</snippet></ROW><ROW><id>17486398</id><snippet>random.choice()</snippet></ROW><ROW><id>17486398</id><snippet>IndexError</snippet></ROW><ROW><id>17486398</id><snippet>filenames</snippet></ROW><ROW><id>17486398</id><snippet>&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; choice([])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Libraries/buildout.python/parts/opt/lib/python2.7/random.py", line 274, in choice
    return seq[int(self.random() * len(seq))]  # raises IndexError if seq is empty
IndexError: list index out of range
</snippet></ROW><ROW><id>17486398</id><snippet>filenames</snippet></ROW><ROW><id>17486398</id><snippet>py2exe</snippet></ROW><ROW><id>17486398</id><snippet>py2exe</snippet></ROW><ROW><id>17486584</id><snippet>sort_index</snippet></ROW><ROW><id>17486584</id><snippet>In [11]: df
Out[11]:
                TGC               FEF              FAF
                bid      ask      bid      ask     bid     ask
date
18/06/2013  34.8400  34.8400  14.9179  14.9179  6.6780  6.6780
17/06/2013  34.4900  34.4900  14.8712  14.8712  6.6510  6.6570

In [12]: df.index = pd.to_datetime(df.index)

In [13]: df
Out[13]:
                TGC               FEF              FAF
                bid      ask      bid      ask     bid     ask
2013-06-18  34.8400  34.8400  14.9179  14.9179  6.6780  6.6780
2013-06-17  34.4900  34.4900  14.8712  14.8712  6.6510  6.6570

In [14]: df.sort_index()  # you can also do this inplace=True
Out[14]:
                TGC               FEF              FAF
                bid      ask      bid      ask     bid     ask
2013-06-17  34.4900  34.4900  14.8712  14.8712  6.6510  6.6570
2013-06-18  34.8400  34.8400  14.9179  14.9179  6.6780  6.6780
</snippet></ROW><ROW><id>17486785</id><snippet>'</snippet></ROW><ROW><id>17486785</id><snippet>''</snippet></ROW><ROW><id>17486785</id><snippet>"</snippet></ROW><ROW><id>17486785</id><snippet>""</snippet></ROW><ROW><id>17486785</id><snippet>'\'</snippet></ROW><ROW><id>17486785</id><snippet>rule = re.compile(r"^[^*$&lt;,&gt;?!']*$")
</snippet></ROW><ROW><id>17486785</id><snippet>&gt;&gt;&gt; strs = 'can\'t'
&gt;&gt;&gt; print strs
can't
&gt;&gt;&gt; strs = "can't"
&gt;&gt;&gt; print strs
can't
&gt;&gt;&gt; 'can't'  #wrong, SyntaxError: invalid syntax

&gt;&gt;&gt; "can"t"  #wrong, SyntaxError: invalid syntax
</snippet></ROW><ROW><id>17486857</id><snippet>class ValidEntryManager(models.Manager):
    def get_query_set(self):
        today = datetime.today()
        start_date = datetime(today.year, today.month, today.day)
        end_date = datetime(today.year, today.month, today.day+1)
        return super(ValidEntryManager, self).get_query_set().filter(timestamp__gte=start_date, timestamp__lte=end_date)
</snippet></ROW><ROW><id>17487092</id><snippet>@task
def add(x,x):
    return x+y
</snippet></ROW><ROW><id>17487092</id><snippet>from mytasks import add

metadata1 = 1
metadata2 = 2
myasyncresult = add.delay(1,2)
myasyncresult.get() == 3
</snippet></ROW><ROW><id>17487206</id><snippet>_corrections = {}

def autocorrect(sequence):
    normalized = () # used as keys into _autocorrection_dict
    corrected = []  # values from _autocorrection_dict
    for item in sequence:
        if isinstance(item, str):
            normalized += (item.lower(),)
            corrected = _corrections.setdefault(normalized, corrected + [item])

        elif isinstance(item, tuple):
            sub_norm = tuple(subitem.lower() for subitem in item)
            if normalized + (sub_norm,) not in _corrections:
                sub_corrected = ()
                for subitem in item:
                    sub_result = _corrections.setdefault(normalized + (subitem.lower(),),
                                                         corrected + [subitem])
                    sub_corrected += (sub_result[-1],)
                _corrections[normalized + (sub_norm,)] = corrected + [sub_corrected]
            normalized += (sub_norm,)
            corrected = _corrections[normalized]

        else:
            raise TypeError("Unexpected item type: {}".format(type(item).__name__))

    return corrected
</snippet></ROW><ROW><id>17487206</id><snippet>if</snippet></ROW><ROW><id>17487206</id><snippet>_corrections</snippet></ROW><ROW><id>17487206</id><snippet>setdefault</snippet></ROW><ROW><id>17487206</id><snippet>elif</snippet></ROW><ROW><id>17487206</id><snippet>["foo", ("BAR", "BAZ")]</snippet></ROW><ROW><id>17487206</id><snippet>"BAR"</snippet></ROW><ROW><id>17487206</id><snippet>"BAZ"</snippet></ROW><ROW><id>17487206</id><snippet>["foo", "bar"]</snippet></ROW><ROW><id>17487206</id><snippet>["foo", "baz"]</snippet></ROW><ROW><id>17487206</id><snippet>&gt;&gt;&gt; autocorrect(['Abc',  ('Def',  'Ghi'),  'Jkl'])
['Abc', ('Def', 'Ghi'), 'Jkl']
&gt;&gt;&gt; autocorrect(['ABC', ("DEF", "GGGG"), "JKL"])
['Abc', ('Def', 'GGGG'), 'JKL']
&gt;&gt;&gt; autocorrect(['abC', 'gggg', 'jkL'])
['Abc', 'GGGG', 'jkL']
</snippet></ROW><ROW><id>17487206</id><snippet>"Abc"</snippet></ROW><ROW><id>17487206</id><snippet>"Def"</snippet></ROW><ROW><id>17487206</id><snippet>"GGGG"</snippet></ROW><ROW><id>17487206</id><snippet>"Jkl"</snippet></ROW><ROW><id>17487228</id><snippet>identifier ::=  (letter|"_") (letter | digit | "_")*
</snippet></ROW><ROW><id>17487228</id><snippet>module          ::=  (identifier ".")* identifier
</snippet></ROW><ROW><id>17487228</id><snippet>__init__.py</snippet></ROW><ROW><id>17487228</id><snippet>import</snippet></ROW><ROW><id>17487228</id><snippet>importlib</snippet></ROW><ROW><id>17487228</id><snippet>__import__</snippet></ROW><ROW><id>17487613</id><snippet>__getattr__</snippet></ROW><ROW><id>17487613</id><snippet>__dir__</snippet></ROW><ROW><id>17487613</id><snippet>werkzeug.utils.cached_property</snippet></ROW><ROW><id>17487613</id><snippet>_missing = object()

class cached_property(object):
    """A decorator that converts a function into a lazy property.  The
    function wrapped is called the first time to retrieve the result
    and then that calculated result is used the next time you access
    the value::

        class Foo(object):

            @cached_property
            def foo(self):
                # calculate something important here
                return 42

    The class has to have a `__dict__` in order for this property to
    work.
    """

    # implementation detail: this property is implemented as non-data
    # descriptor.  non-data descriptors are only invoked if there is
    # no entry with the same name in the instance's __dict__.
    # this allows us to completely get rid of the access function call
    # overhead.  If one choses to invoke __get__ by hand the property
    # will still work as expected because the lookup logic is replicated
    # in __get__ for manual invocation.

    def __init__(self, func, name=None, doc=None):
        self.__name__ = name or func.__name__
        self.__module__ = func.__module__
        self.__doc__ = doc or func.__doc__
        self.func = func

    def __get__(self, obj, type=None):
        if obj is None:
            return self
        value = obj.__dict__.get(self.__name__, _missing)
        if value is _missing:
            value = self.func(obj)
            obj.__dict__[self.__name__] = value
        return value
</snippet></ROW><ROW><id>17487647</id><snippet>--pylab</snippet></ROW><ROW><id>17487647</id><snippet>import_all</snippet></ROW><ROW><id>17487697</id><snippet>clean_&lt;fieldname&gt;()</snippet></ROW><ROW><id>17487697</id><snippet>ModelForm</snippet></ROW><ROW><id>17487697</id><snippet>clean()</snippet></ROW><ROW><id>17487697</id><snippet>ModelForm</snippet></ROW><ROW><id>17487697</id><snippet>save()</snippet></ROW><ROW><id>17487697</id><snippet>image.py</snippet></ROW><ROW><id>17487697</id><snippet>from PIL import Image
from django.conf import settings


def autoresize_image(image_path):
    image = Image.open(image_path)
    width = image.size[0]
    if width &gt; settings.IMAGE_MAX_WIDTH:
        height = image.size[1]
        reduce_factor = settings.IMAGE_MAX_WIDTH / float(width)
        reduced_width = int(width * reduce_factor)
        reduced_height = int(height * reduce_factor)
        image = image.resize((reduced_width, reduced_height), Image.ANTIALIAS)
        image.save(image_path)
</snippet></ROW><ROW><id>17487697</id><snippet>save()</snippet></ROW><ROW><id>17487697</id><snippet>ImageField</snippet></ROW><ROW><id>17487697</id><snippet>super()</snippet></ROW><ROW><id>17487697</id><snippet>ImageField</snippet></ROW><ROW><id>17487697</id><snippet>def save(self, *args, **kwargs):
    super(Startup, self).save(*args, **kwargs)
    if self.logo:
        autoresize_image(self.logo.path)
</snippet></ROW><ROW><id>17488029</id><snippet>get_ticks</snippet></ROW><ROW><id>17488029</id><snippet>set_timer</snippet></ROW><ROW><id>17488029</id><snippet>next_line_time = 0

while True:

    while time.time.get_ticks() &gt;= next_line_time:
        start_points.append(self.get_random_pixel())
        next_line_time += 1000
</snippet></ROW><ROW><id>17488029</id><snippet>range(len(foo))</snippet></ROW><ROW><id>17488029</id><snippet>foo</snippet></ROW><ROW><id>17488029</id><snippet>foo[i]</snippet></ROW><ROW><id>17488029</id><snippet>enumerate(foo)</snippet></ROW><ROW><id>17488029</id><snippet>for i, old_coord in enumerate(start_points):
    new_coord = self.nearest_neighbor(old_coord)
    pygame.draw.line(screen, self.get_col(old_coord), old_coord, new_coord, 2)
    start_points[i] = new_coord
    pygame.display.flip()
</snippet></ROW><ROW><id>17488029</id><snippet>flip</snippet></ROW><ROW><id>17488250</id><snippet>def copyAndPaste(picture):
  height = getHeight(picture)
  width = getWidth(picture)
  newPicture = makeEmptyPicture(width+100, height+100)
  for x in range(width):
    for y in range(height):
      pxl = getPixel(picture,x,y)
      color = getColor(pxl)
      if (x&gt;48 and x&lt;59) and (y&gt;58 and y&lt;71):
        newPxl =getPixel(newPicture, x+100,y+100)
        setColor(newPxl,color)
      newPxl = getPixel(newPicture, x,y)
      setColor(newPxl,color)
</snippet></ROW><ROW><id>17488250</id><snippet>      if (x&gt;48 and x&lt;59) and (y&gt;58 and y&lt;71):
        newPxl =getPixel(newPicture, (x-49)*2+49+100,(y-59)*2+59+100)
        setColor(newPxl,color)
</snippet></ROW><ROW><id>17488424</id><snippet>sudo port uninstall python27</snippet></ROW><ROW><id>17488467</id><snippet>PyEval_FrameEx</snippet></ROW><ROW><id>17488467</id><snippet>format_exc_check_arg()</snippet></ROW><ROW><id>17488467</id><snippet>ceval.c</snippet></ROW><ROW><id>17488467</id><snippet>format_exc_check_arg()</snippet></ROW><ROW><id>17488467</id><snippet>prnt</snippet></ROW><ROW><id>17488467</id><snippet>PyErr_Format</snippet></ROW><ROW><id>17488467</id><snippet>errors.c</snippet></ROW><ROW><id>17488467</id><snippet>NAME_ERROR_MSG</snippet></ROW><ROW><id>17488467</id><snippet>format_exc_check_arg()</snippet></ROW><ROW><id>17488467</id><snippet>prnt('Line1')
</snippet></ROW><ROW><id>17488467</id><snippet>PyEval_FrameEx</snippet></ROW><ROW><id>17488467</id><snippet>    TARGET(LOAD_NAME)
        w = GETITEM(names, oparg);
        if ((v = f-&gt;f_locals) == NULL) {
            PyErr_Format(PyExc_SystemError,
                         "no locals when loading %R", w);
            why = WHY_EXCEPTION;
            break;
        }
        if (PyDict_CheckExact(v)) {
            x = PyDict_GetItem(v, w);
            Py_XINCREF(x);
        }
        else {
            x = PyObject_GetItem(v, w);
            if (x == NULL &amp;&amp; PyErr_Occurred()) {
                if (!PyErr_ExceptionMatches(
                                PyExc_KeyError))
                    break;
                PyErr_Clear();
            }
        }
        if (x == NULL) {
            x = PyDict_GetItem(f-&gt;f_globals, w);
            Py_XINCREF(x);
            if (x == NULL) {
                if (PyDict_CheckExact(f-&gt;f_builtins)) {
                    x = PyDict_GetItem(f-&gt;f_builtins, w);
                    if (x == NULL) {
// below is the line where the PyExc_NameError will be properly formatted.
                        format_exc_check_arg(
                                    PyExc_NameError,
                                    NAME_ERROR_MSG, w);
                        break;
                    }
                    Py_INCREF(x);
                }
                else {
                    x = PyObject_GetItem(f-&gt;f_builtins, w);
                    if (x == NULL) {
                        if (PyErr_ExceptionMatches(PyExc_KeyError))
                            format_exc_check_arg(
                                        PyExc_NameError,
                                        NAME_ERROR_MSG, w);
                        break;
                    }
                }
            }
        }
        PUSH(x);
        DISPATCH();
</snippet></ROW><ROW><id>17488467</id><snippet>PyDict_GetItem(...)</snippet></ROW><ROW><id>17488467</id><snippet>prnt</snippet></ROW><ROW><id>17488467</id><snippet>f-&gt;builtins</snippet></ROW><ROW><id>17488467</id><snippet>w</snippet></ROW><ROW><id>17488467</id><snippet>w</snippet></ROW><ROW><id>17488467</id><snippet>x == NULL</snippet></ROW><ROW><id>17488467</id><snippet>NameError</snippet></ROW><ROW><id>17488830</id><snippet>Course</snippet></ROW><ROW><id>17488830</id><snippet>Course.Course</snippet></ROW><ROW><id>17488841</id><snippet>Tool1</snippet></ROW><ROW><id>17488841</id><snippet>Tool2</snippet></ROW><ROW><id>17488841</id><snippet>Tools/__init__.py</snippet></ROW><ROW><id>17488841</id><snippet>import Tool1, Tool2
</snippet></ROW><ROW><id>17488841</id><snippet>Tools</snippet></ROW><ROW><id>17488841</id><snippet>import Tools.Tool1, Tools.Tool2
from Tools import *
</snippet></ROW><ROW><id>17488912</id><snippet>text = re.sub('&lt;span class=love&gt;.*?&lt;/span&gt;', '', text)
</snippet></ROW><ROW><id>17488912</id><snippet>&lt;span class=love&gt;.*?(?=&lt;/span&gt;)</snippet></ROW><ROW><id>17488912</id><snippet>(?=&lt;/span&gt;)</snippet></ROW><ROW><id>17488912</id><snippet>&lt;span class=love&gt;.*?(?=&lt;/span&gt;)&lt;/span&gt;</snippet></ROW><ROW><id>17488912</id><snippet>.*?</snippet></ROW><ROW><id>17488912</id><snippet>.*?&lt;/span&gt;</snippet></ROW><ROW><id>17488912</id><snippet>.*?</snippet></ROW><ROW><id>17489229</id><snippet>first,last,age
John,Smith,20
Jane,Smith,19
Frank,Jones,30
</snippet></ROW><ROW><id>17489229</id><snippet>In [1]: import csv
In [2]: from operator import *
In [3]: with open('foo.csv') as f: people = list(csv.DictReader(f))
In [4]: [p['age'] for p in sorted(people, key=itemgetter('first')) if p['last'] == 'Smith']
Out[4]: ['19', '20']
</snippet></ROW><ROW><id>17489229</id><snippet>p['age']</snippet></ROW><ROW><id>17489229</id><snippet>sorted(people, itemgetter('first'))</snippet></ROW><ROW><id>17489229</id><snippet>if p['last'] == 'Smith'</snippet></ROW><ROW><id>17489229</id><snippet>In [5]: def orderby(table, column): return sorted(table, key=itemgetter(column))
In [6]: [p['age'] for p in orderby(people, 'first') if p['last'] == 'Smith']
Out[6]: ['19', '20']
</snippet></ROW><ROW><id>17489229</id><snippet>group by</snippet></ROW><ROW><id>17489229</id><snippet>itertools</snippet></ROW><ROW><id>17489229</id><snippet>In [7]: from itertools import *
In [8]: def ilen(iterable): return sum(1 for _ in iterable)
In [9]: def group(table, column): return groupby(table, itemgetter(column))
In [10]: [(k, ilen(g)) for k, g in group(people, 'last')]
Out[10]: [('Smith', 2), ('Jones', 1)]
In [11]: def glen(kg): return kg[0], sum(1 for _ in kg[1])
In [12]: [glen(g) for g in group(people, 'last')]
Out[12]: [('Smith', 2), ('Jones', 1)]
In [13]: def gsum(kg, column): return kg[0], sum(int(x[column]) for x in kg[1])
In [14]: [gsum(g, 'age') for g in group(people, 'last')]
Out[14]: [('Smith', 39), ('Jones', 30)]
</snippet></ROW><ROW><id>17489415</id><snippet>round</snippet></ROW><ROW><id>17489415</id><snippet>isinstance</snippet></ROW><ROW><id>17489415</id><snippet>&gt;&gt;&gt; {k:round(v,2) if isinstance(v,float) else v for k,v in d.iteritems()}
{'a': 'Ali', 'p': 3.14, 'c': 0.24, 'b': 2341}
</snippet></ROW><ROW><id>17489415</id><snippet>round</snippet></ROW><ROW><id>17489415</id><snippet>&gt;&gt;&gt; print round.__doc__
round(number[, ndigits]) -&gt; floating point number

Round a number to a given precision in decimal digits (default 0 digits).
This always returns a floating point number.  Precision may be negative.
</snippet></ROW><ROW><id>17489415</id><snippet>dict</snippet></ROW><ROW><id>17489415</id><snippet>__str__</snippet></ROW><ROW><id>17489415</id><snippet>class my_dict(dict):                                              
    def __str__(self):
        return str({k:round(v,2) if isinstance(v,float) else v 
                                                    for k,v in self.iteritems()})
...     
&gt;&gt;&gt; d = my_dict({'a':'Ali', 'b':2341, 'c':0.2424242421, 'p':3.141592})
&gt;&gt;&gt; print d
{'a': 'Ali', 'p': 3.14, 'c': 0.24, 'b': 2341}
&gt;&gt;&gt; "{}".format(d)
"{'a': 'Ali', 'p': 3.14, 'c': 0.24, 'b': 2341}"
&gt;&gt;&gt; d
{'a': 'Ali', 'p': 3.141592, 'c': 0.2424242421, 'b': 2341}
</snippet></ROW><ROW><id>17489494</id><snippet>http://pypi.python.org/simple</snippet></ROW><ROW><id>17489494</id><snippet>[buildout]</snippet></ROW><ROW><id>17489494</id><snippet>index</snippet></ROW><ROW><id>17489494</id><snippet>collective.eggproxy</snippet></ROW><ROW><id>17489536</id><snippet>float</snippet></ROW><ROW><id>17489536</id><snippet>mais_mais = input("Quanto mais deseja? \n")
total_float = float(mais_mais)
total_total = quantidade_restante + mais_mais
</snippet></ROW><ROW><id>17489536</id><snippet>mais_mais</snippet></ROW><ROW><id>17489536</id><snippet>mais_mais</snippet></ROW><ROW><id>17489536</id><snippet>mais_mais = input("Quanto mais deseja? \n")
mais_mais = float(mais_mais)
total_total = quantidade_restante + mais_mais
</snippet></ROW><ROW><id>17489690</id><snippet>plt.quiver(uin[::5], vin[::5], scale=200)
</snippet></ROW><ROW><id>17489690</id><snippet>print lon[::5].shape, lat[::5].shape, uin[::5].shape, vin[::5].shape
</snippet></ROW><ROW><id>17489690</id><snippet>plt.quiver(lon[::5], lat[::5], uin[::5, ::5], vin[::5, ::5], scale=200)
</snippet></ROW><ROW><id>17489709</id><snippet>(modify-syntax-entry ?_ "w")
</snippet></ROW><ROW><id>17489709</id><snippet>(modify-syntax-entry  ?_ "w" standard-syntax-table)
</snippet></ROW><ROW><id>17489770</id><snippet>import re
with open('abc') as f:
    for line in f:
        if line.startswith('Key'):
            keys = re.search(r'Key\s+(.*)',line).group(1).split("\t")
        elif line.startswith(('Word','Letter')):
            vals = re.search(r'(Word|Letter)\s+(.*)',line).group(2).split("\t")

    print dict(zip(keys,vals))
</snippet></ROW><ROW><id>17489770</id><snippet>LineHere  w    x    y    z
Key       a 1  b 2  c 3  d 4
OrHere    00   01   10   11
Word      as   box  cow  dig
</snippet></ROW><ROW><id>17489770</id><snippet>{'d 4': 'dig', 'b 2': 'box', 'a 1': 'as', 'c 3': 'cow'}
</snippet></ROW><ROW><id>17489770</id><snippet>LineHere  w    x    y    z
Key       a 1  b 2  c 3  d 4
OrHere    00   01   10   11
Letter    A    B    C    D
</snippet></ROW><ROW><id>17489770</id><snippet>{'d 4': 'D', 'b 2': 'B', 'a 1': 'A', 'c 3': 'C'}
</snippet></ROW><ROW><id>17489909</id><snippet>__exit__</snippet></ROW><ROW><id>17489909</id><snippet>class Foo(object):
    _close_on_exit = False

    def __init__(self, file_to_process):
        if isinstance(file_to_process, str):
            self._underlying_stream = open(file_to_process, "rb") # it's the path to a file
            self._close_on_exit = True
        elif isinstance(file_to_process, io.IOBase):
            self._underlying_stream = file_to_process # its the file itself
        else:
             raise TypeError()

    def __exit__(self, exc_type, exc_value, traceback):
        if self._close_on_exit:
            self._underlying_stream.close()
</snippet></ROW><ROW><id>17490428</id><snippet>followers_count</snippet></ROW><ROW><id>17490428</id><snippet>import tweepy

auth = tweepy.OAuthHandler(..., ...)
auth.set_access_token(..., ...)

api = tweepy.API(auth)

for user in tweepy.Cursor(api.followers, screen_name="twitter").items():
    print user.screen_name, user.followers_count
</snippet></ROW><ROW><id>17490428</id><snippet>...
pizzerialoso 0
Mario98Y 0
sumankumarjana 1
realattorneylaw 3056
JaluSeptyan 10
andhita_khanza 18
...
</snippet></ROW><ROW><id>17490499</id><snippet>color = '#eeefff'
</snippet></ROW><ROW><id>17490523</id><snippet>def openFileDialog(self):
    import os
    path, _ = QtGui.QFileDialog.getOpenFileName(self, "Open File", os.getcwd())
    self.label.setText(path)
    return path
</snippet></ROW><ROW><id>17490523</id><snippet>path = testWindow.openFileDialog()
</snippet></ROW><ROW><id>17490523</id><snippet>print path
</snippet></ROW><ROW><id>17490523</id><snippet>testWindow</snippet></ROW><ROW><id>17490523</id><snippet>openFileDialog</snippet></ROW><ROW><id>17490523</id><snippet>x = testWindow()
path = x.openFileDialog()
</snippet></ROW><ROW><id>17490717</id><snippet>frozenset</snippet></ROW><ROW><id>17490717</id><snippet>{frozenset(n[word]) for word in n if word in words}
</snippet></ROW><ROW><id>17490717</id><snippet>set()</snippet></ROW><ROW><id>17490717</id><snippet>frozenset()</snippet></ROW><ROW><id>17490717</id><snippet>set</snippet></ROW><ROW><id>17490717</id><snippet>tuple</snippet></ROW><ROW><id>17490717</id><snippet>list</snippet></ROW><ROW><id>17490717</id><snippet>set().union(*(n[word] for word in n if word in words))
</snippet></ROW><ROW><id>17490717</id><snippet>&gt;&gt;&gt; n = {'corporal': {35}, 'moral': {34}, 'purpose': {33, 34, 14, 49}, 'simulations': {42}, 'consultant': {16, 40, 38}, 'Indies': {3}, 'murdered': {10}}
&gt;&gt;&gt; words = ['moral', 'Indies'] 
&gt;&gt;&gt; {frozenset(n[word]) for word in n if word in words}
set([frozenset([34]), frozenset([3])])
&gt;&gt;&gt; set().union(*(n[word] for word in n if word in words))
set([34, 3])
</snippet></ROW><ROW><id>17490717</id><snippet>n</snippet></ROW><ROW><id>17490717</id><snippet>&gt;&gt;&gt; set().union(*(n[k] for k in n.viewkeys() &amp; words))
set([34, 3])
</snippet></ROW><ROW><id>17490717</id><snippet>.keys()</snippet></ROW><ROW><id>17490717</id><snippet>&gt;&gt;&gt; set().union(*(n[k] for k in n.keys() &amp; words))
set([34, 3])
</snippet></ROW><ROW><id>17490816</id><snippet>import time
import tweepy

auth = tweepy.OAuthHandler(..., ...)
auth.set_access_token(..., ...)

api = tweepy.API(auth)

ids = []
for page in tweepy.Cursor(api.followers_ids, screen_name="McDonalds").pages():
    ids.extend(page)
    time.sleep(60)

print len(ids)
</snippet></ROW><ROW><id>17490840</id><snippet>from tweepy import OAuthHandler
from tweepy import Stream
from tweepy.streaming import StreamListener

from myproject.myapp.utils import do_something_with_tweet

class StdOutListener(StreamListener):

    def on_data(self, data):
        do_something_with_tweet(data)
        return True

def main():
    listener = StdOutListener()

    auth = OAuthHandler(
        TWITTER_CONSUMER_KEY,
        TWITTER_CONSUMER_SECRET)

    auth.set_access_token(
        TWITTER_ACCESS_TOKEN,
        TWITTER_ACCESS_SECRET)

    try:
        stream = Stream(auth, listener)
        stream.filter(track=['#something', ])
    except (KeyboardInterrupt, SystemExit):
        print 'Stopping Twitter Streaming Client'


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17491410</id><snippet>SELECT
  AcctNum,
  MAX(Val1)   AS Val1,
  MAX(Val2)   AS Val2,
  MAX(Val3)   AS Val3
FROM
  yourTable
GROUP BY
  AcctNum
</snippet></ROW><ROW><id>17491410</id><snippet>NULL</snippet></ROW><ROW><id>17491410</id><snippet>MAX()</snippet></ROW><ROW><id>17491410</id><snippet>MIN()</snippet></ROW><ROW><id>17491410</id><snippet>NULL</snippet></ROW><ROW><id>17491410</id><snippet>NULL</snippet></ROW><ROW><id>17491410</id><snippet>MAX()</snippet></ROW><ROW><id>17491410</id><snippet>MIN()</snippet></ROW><ROW><id>17491410</id><snippet>NULL</snippet></ROW><ROW><id>17491693</id><snippet>import random
import itertools

def arrivalGenerator(rate):
    t = 0
    while True:
        t += random.expovariate(rate)
        yield t

rates = [10, 1, 15, 4, 2]
t = [(i, 0) for i in range(0, len(rates))]
arrivals = []
for i in range(len(rates)):
    t = 0
    generator = arrivalGenerator(rates[i])
    arrivals += [(i, arrival) \
                 for arrival in itertools.takewhile(lambda t: t &lt; 100, generator)]


sorted_arrivals = sorted(arrivals, key=lambda x: x[1])
for arrival in sorted_arrivals:
    print arrival[0], arrival[1]
</snippet></ROW><ROW><id>17491920</id><snippet>list1 = [[1,'c','d'], [2,'a','b'], [3, 'e','f']]
list2 = [[2,'g','g','t'], [1,'alpha', 'beta', 'gamma'], [1,'t','y','u'], [3,'dog', 'cat', 'fish']]
</snippet></ROW><ROW><id>17491920</id><snippet>result = [i+j[1:] for i in list1 for j in list2 if i[0]==j[0]]
</snippet></ROW><ROW><id>17491920</id><snippet>[[1, 'c', 'd', 'alpha', 'beta', 'gamma'],
 [1, 'c', 'd', 't', 'y', 'u'],
 [2, 'a', 'b', 'g', 'g', 't'],
 [3, 'e', 'f', 'dog', 'cat', 'fish']]
</snippet></ROW><ROW><id>17491951</id><snippet>with open("test2.xls") as w:
    w.next()  # skip over header row
    for row in w:
        (date, time, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t,
         u, LZA, SZA, LAM) = row.split("\t")  # split columns into fields

        A = [(float(a) + float(b) + float(c))/3,
             (float(d) + float(e) + float(f))/3,
             (float(g) + float(h) + float(i))/3,
             (float(j) + float(k) + float(l))/3,
             (float(m) + float(n) + float(o))/3,
             (float(p) + float(q) + float(r))/3,
             (float(s) + float(t) + float(u))/3]
        print ('['+ ', '.join(['{:.6f}']*len(A)) + ']').format(*A)
        avg = sum(A)/len(A)
        print avg
</snippet></ROW><ROW><id>17491951</id><snippet>avg = lambda nums: sum(nums)/float(len(nums))

with open("test2.xls") as w:
    w.next()  # skip over header row
    for row in w:
        cols = row.split("\t")  # split into columns
        # then split that into fields
        date, time, values, LZA, SZA, LAM = (cols[0], cols[1],
                                             map(float, cols[2:23]), 
                                             cols[23], cols[24], cols[25])
        A = [avg(values[i:i+3]) for i in xrange(0, 21, 3)]
        print ('['+ ', '.join(['{:.6f}']*len(A)) + ']').format(*A)
        print avg(A)
</snippet></ROW><ROW><id>17492295</id><snippet>try:
  # do your urllib.urlretrieve() call here.
except: 
  pass
</snippet></ROW><ROW><id>17492562</id><snippet>SELECT x, y, 'valid_field_name' FROM literal_table
WHERE 'valid_field_name' &gt; 0 AND (some other conditions)
GROUP BY x, y
</snippet></ROW><ROW><id>17492575</id><snippet>n = int(round(input*(math.log(input,2))))</snippet></ROW><ROW><id>17492575</id><snippet>n</snippet></ROW><ROW><id>17492575</id><snippet>input = 5</snippet></ROW><ROW><id>17492575</id><snippet>n</snippet></ROW><ROW><id>17492575</id><snippet>x_list</snippet></ROW><ROW><id>17492575</id><snippet>5</snippet></ROW><ROW><id>17492575</id><snippet>IndexError</snippet></ROW><ROW><id>17492575</id><snippet>return x_list[-1]</snippet></ROW><ROW><id>17492575</id><snippet>input</snippet></ROW><ROW><id>17492575</id><snippet>def s_prime(n, inp):
    print n
    #you code here....
    print x_list[inp-1] 

def main(argv):
     #your code
        n = int(round(input*(math.log(input,2))))
        s_prime(n, input) #pass input here
</snippet></ROW><ROW><id>17492624</id><snippet>\D</snippet></ROW><ROW><id>17492624</id><snippet>.*</snippet></ROW><ROW><id>17492624</id><snippet>t_pat = re.compile(r".*\[\s?(\d+/\D+?/.*?)\]")
</snippet></ROW><ROW><id>17492624</id><snippet>&gt;&gt;&gt; re.compile(r".*\[\s?(\d+/\D+?/.*?)\]").search(line).group(1)
'1/Jul/2013 03:27:12.818'
</snippet></ROW><ROW><id>17492624</id><snippet>t_pat = re.compile(r".*\[\s?(\d{1,2}/[A-Z][a-z]{2}/\d{4} \d{2}:\d{2}:[\d.]{2,})\]")
</snippet></ROW><ROW><id>17492849</id><snippet>$meta_arr = array(
   'array1' =&gt; $array_number_one,
   'array2' =&gt; $array_number_two
);
echo json_encode($meta_arr);
</snippet></ROW><ROW><id>17492940</id><snippet>def fizz_count(x):
    if not x:
        return 0
    return (1 if x[0] == 'fizz' else 0) + fizz_count(x[1:])
</snippet></ROW><ROW><id>17492940</id><snippet>def fizz_count(x):
    lenx = len(x)
    if not lenx:
        return 0
    if lenx == 1:
        return (1 if x[0] == 'fizz' else 0)
    return fizz_count(x[:lenx//2]) + fizz_count(x[lenx//2:])
</snippet></ROW><ROW><id>17492940</id><snippet>count</snippet></ROW><ROW><id>17492940</id><snippet>def fizz_count(x):
    count = 0
    for a in x:
        if a == 'fizz':
            count += 1
    return count
</snippet></ROW><ROW><id>17492940</id><snippet>list.count()</snippet></ROW><ROW><id>17492940</id><snippet>def fizz_count(x):
    return x.count('fizz')
</snippet></ROW><ROW><id>17493187</id><snippet>next</snippet></ROW><ROW><id>17493187</id><snippet>enumerate</snippet></ROW><ROW><id>17493187</id><snippet>&gt;&gt;&gt; list1 = [(12, "AB", "CD"), (13, "EF", "GH"), (14, "IJ", "KL")]
&gt;&gt;&gt; next(i for i,x in enumerate(list1) if 13 in x)
1
</snippet></ROW><ROW><id>17493187</id><snippet>for i, item in enumerate(list1):
     if 13 in item:
         print i
         break
...         
1
</snippet></ROW><ROW><id>17493187</id><snippet>O(1)</snippet></ROW><ROW><id>17493187</id><snippet>O(N)</snippet></ROW><ROW><id>17493187</id><snippet>&gt;&gt;&gt; list1 = [(12, "AB", "CD"), (13, "EF", "GH"), (14, "IJ", "KL")]
&gt;&gt;&gt; dic = {x[0]:x[1:]  for x in list1}
</snippet></ROW><ROW><id>17493187</id><snippet>&gt;&gt;&gt; dic[12]
('AB', 'CD')
&gt;&gt;&gt; dic[14]
('IJ', 'KL')
#checking key existence
&gt;&gt;&gt; if 17 in dic:          #if a key exists in dic then do something
       #then do something
</snippet></ROW><ROW><id>17493242</id><snippet>&gt;&gt;&gt; ((12.0 / 5) - (12 / 5)) * 5
1.9999999999999996
</snippet></ROW><ROW><id>17493242</id><snippet>print</snippet></ROW><ROW><id>17493431</id><snippet>for root, dirs, files in os.walk('site_dump'):
  nested_levels = root.split('/')
  if len(nested_levels) == 5:
    del dirs[:]
    # Eventually do stuff with the file here
</snippet></ROW><ROW><id>17493431</id><snippet>del dirs[:]</snippet></ROW><ROW><id>17493431</id><snippet>topdown</snippet></ROW><ROW><id>17493431</id><snippet>os.walk</snippet></ROW><ROW><id>17493431</id><snippet>True</snippet></ROW><ROW><id>17493442</id><snippet>__eq__</snippet></ROW><ROW><id>17493442</id><snippet>__hash__</snippet></ROW><ROW><id>17493442</id><snippet>GlobeLearningTable</snippet></ROW><ROW><id>17493442</id><snippet>class GlobeLearningTable(object):
    def __init__(self,mac,port,dpid):
        self.mac = mac
        self.port = port
        self.dpid = dpid

    def __hash__(self):
        return hash((self.mac, self.port, self.dpid))

    def __eq__(self, other):
        if not isinstance(other, type(self)): return NotImplemented
        return self.mac == other.mac and self.port == other.port and self.dpid == other.dpid
</snippet></ROW><ROW><id>17493442</id><snippet>__hash__</snippet></ROW><ROW><id>17493442</id><snippet>set</snippet></ROW><ROW><id>17493442</id><snippet>dict</snippet></ROW><ROW><id>17493442</id><snippet>&gt;&gt;&gt; demo = set([GlobeLearningTable('a', 10, 'b')])
&gt;&gt;&gt; GlobeLearningTable('a', 10, 'b') in demo
True
</snippet></ROW><ROW><id>17493530</id><snippet>collections.Counter</snippet></ROW><ROW><id>17493530</id><snippet>from collections import Counter
def main():
    #use open() for opening file.
    #Always use `with` statement as it'll automatically close the file for you.
    with open(r'C:\Data\test.txt') as f:
        #create a list of all words fetched from the file using a list comprehension
        words = [word for line in f for word in line.split()]
        print "The total word count is:", len(words)
        #now use collections.Counter
        c = Counter(words)
        for word, count in c.most_common():
           print word, count
main()
</snippet></ROW><ROW><id>17493530</id><snippet>collections.Counter</snippet></ROW><ROW><id>17493530</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter('aaaaabbbdddeeegggg')
</snippet></ROW><ROW><id>17493530</id><snippet>&gt;&gt;&gt; for word, count in c.most_common(): 
...     print word,count
...     
a 5
g 4
b 3
e 3
d 3
</snippet></ROW><ROW><id>17493754</id><snippet>In [11]: read_csv("2069_ALL_YEAR=2008.csv", skiprows=2, parse_dates={"Datetime" : [1,2]}, na_values=["-99.9"])
Out[11]:
             Datetime  Site Id  WTEQ.I-1
0 2008-01-19 06:00:00     2069       NaN
1 2008-01-19 07:00:00     2069       NaN
</snippet></ROW><ROW><id>17493754</id><snippet>date_parser=True</snippet></ROW><ROW><id>17493812</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>17493894</id><snippet>\</snippet></ROW><ROW><id>17493894</id><snippet>\</snippet></ROW><ROW><id>17493894</id><snippet>'\t'</snippet></ROW><ROW><id>17493894</id><snippet>r'C:\Data\test.txt'
</snippet></ROW><ROW><id>17493894</id><snippet>&gt;&gt;&gt; print 'C:\Data\test.txt'
C:\Data est.txt                 #\t is converted to tab
&gt;&gt;&gt; print r'C:\Data\test.txt'   
C:\Data\test.txt                #here it is fine

&gt;&gt;&gt; print 'C:\\Data\\test.txt'  #same as raw string, but manual escaping
C:\Data\test.txt
</snippet></ROW><ROW><id>17493964</id><snippet>select DBMS_METADATA.GET_DDL('TABLE','&lt;table_name&gt;') from DUAL;
</snippet></ROW><ROW><id>17493964</id><snippet>select text from all_source where name = '&lt;procedure name&gt;'
</snippet></ROW><ROW><id>17493964</id><snippet>all_source</snippet></ROW><ROW><id>17493964</id><snippet>get_ddl</snippet></ROW><ROW><id>17493964</id><snippet>user_source</snippet></ROW><ROW><id>17494037</id><snippet>the_string = "this is a very long string, here is a very long word, f" + ("o" * 50) + " good bye, string, "
filename_string = the_string
if len(the_string) &gt; 100:  
    # if the 100th character is not a space or a comma
    if the_string[99] != " " and the_string[99] != ",":
        # split the string by words, and rejoin all but the last
        # if it ends with a comma, remove it (it won't end in a space because of split())
        filename_string = " ".join(stripped_string[:99].split()[:-1]).rstrip(",")
    else:
        # just remove the last space (and if there is one, a comma)
        filename_string = stripped_string[:100].rstrip(", ")
with open(filename_string, 'w') as outfile:
    outfile.write(the_string)
</snippet></ROW><ROW><id>17494037</id><snippet>this is a very long string, here is a very long word</snippet></ROW><ROW><id>17494037</id><snippet>this is a very long string, here is a very long word foooooooooooooooooooooooooooooooooooooooooooooooooo good bye, string,</snippet></ROW><ROW><id>17494037</id><snippet>the_string</snippet></ROW><ROW><id>17494037</id><snippet>raw_input()</snippet></ROW><ROW><id>17494037</id><snippet>argparse</snippet></ROW><ROW><id>17494306</id><snippet>from Tkinter import *  # or tkinter if you use Python3

root = Tk()

label_1 = Label(master=root, text='Name 1')
label_2 = Label(master=root, text='Name 2')
label_3 = Label(master=root, text='Name 3')
label_4 = Label(master=root, text='Name 4')

label_1.grid(row=0)
label_2.grid(row=1)
label_3.grid(row=2)  # this is the 2nd
label_4.grid(row=4)  # this is the 4th

root.rowconfigure(index=3, weight=1)  # add weight to the 3rd!
root.mainloop()
</snippet></ROW><ROW><id>17494306</id><snippet>pack</snippet></ROW><ROW><id>17494306</id><snippet>grid</snippet></ROW><ROW><id>17494306</id><snippet>from Tkinter import *  # or tkinter if you use Python3

root = Tk()

label_1 = Label(master=root, text='Name 1')
label_2 = Label(master=root, text='Name 2')
label_3 = Label(master=root, text='Name 3')
label_4 = Label(master=root, text='Name 4')

label_1.pack()
label_2.pack()
label_3.pack()
label_4.pack(side=BOTTOM)

root.mainloop()
</snippet></ROW><ROW><id>17494329</id><snippet>newx = (x1 - xorigin)*cos(45 * pi / 180)
newy = (y1 - yorigin)*sin(45 * pi / 180)
</snippet></ROW><ROW><id>17494384</id><snippet>from struct import pack

for i, token in enumerate(b"foo bar bazq".split()):
    print(pack('@B%ds' % len(token), i, token))
</snippet></ROW><ROW><id>17494384</id><snippet>b'\x00foo'
b'\x01bar'
b'\x02bazq'
</snippet></ROW><ROW><id>17494384</id><snippet>print</snippet></ROW><ROW><id>17494384</id><snippet>    print(pack('@B3s', i, token))
</snippet></ROW><ROW><id>17494441</id><snippet>self.buttonBox.button(QtGui.QDialogButtonBox.Reset).clicked.connect(foo)
</snippet></ROW><ROW><id>17494618</id><snippet>%z</snippet></ROW><ROW><id>17494618</id><snippet>from datetime import timedelta,datetime
strs = "2012-05-12T13:04:35.347-07:00"
#replace the last ':' with an empty string, as python UTC offset format is +HHMM
strs = strs[::-1].replace(':','',1)[::-1]
</snippet></ROW><ROW><id>17494618</id><snippet>datetime.striptime</snippet></ROW><ROW><id>17494618</id><snippet>%z</snippet></ROW><ROW><id>17494618</id><snippet>#Snippet taken from http://stackoverflow.com/a/526450/846892
try:
    offset = int(strs[-5:])
except:
    print "Error"

delta = timedelta(hours = offset / 100)
</snippet></ROW><ROW><id>17494618</id><snippet>'2012-05-12T13:04:35.347'</snippet></ROW><ROW><id>17494618</id><snippet>time = datetime.strptime(strs[:-5], "%Y-%m-%dT%H:%M:%S.%f")
time -= delta                #reduce the delta from this time object
print time
#2012-05-12 20:04:35.347000
</snippet></ROW><ROW><id>17494746</id><snippet>def random_letter(letters):
    while True:
        x = raw_input('Press enter for a random letter...')
        if x == 'done':
            break
        print random.choice(letters)

random_letter('abcdef')
</snippet></ROW><ROW><id>17494746</id><snippet>raw_input</snippet></ROW><ROW><id>17494746</id><snippet>done</snippet></ROW><ROW><id>17494746</id><snippet>break</snippet></ROW><ROW><id>17494746</id><snippet>def random_letter(letters):
    print random.choice(letters)

while True:
    x = raw_input('Press enter for a random letter...')
    if x == 'done':
        break
    random_letter('abcdef')
</snippet></ROW><ROW><id>17494845</id><snippet>math.ceil</snippet></ROW><ROW><id>17494845</id><snippet>&gt;&gt;&gt; from math import ceil
&gt;&gt;&gt; ceil(8.3)
9.0
&gt;&gt;&gt; ceil(8.48237)
9.0
</snippet></ROW><ROW><id>17494845</id><snippet>ceil</snippet></ROW><ROW><id>17494845</id><snippet>ceil(...)
    ceil(x)

    Return the ceiling of x as a float.
    This is the smallest integral value &gt;= x.
</snippet></ROW><ROW><id>17494927</id><snippet>def Something(somedict):
    return '.'.join(['%s and %s' % (key, value) for key, value in somedict.iteritems()])
</snippet></ROW><ROW><id>17494927</id><snippet>&gt;&gt;&gt; Something(somedict)
'dog and bone.cat and nip.'
</snippet></ROW><ROW><id>17495104</id><snippet>blueprint.route</snippet></ROW><ROW><id>17495104</id><snippet>def index():
    return render_template('index.html')
index = blueprint.route('/')(index)
index = admin_required(index)
</snippet></ROW><ROW><id>17495104</id><snippet>blueprint.route</snippet></ROW><ROW><id>17495104</id><snippet>index</snippet></ROW><ROW><id>17495104</id><snippet>admin_required</snippet></ROW><ROW><id>17495104</id><snippet>admin_required</snippet></ROW><ROW><id>17495104</id><snippet>index</snippet></ROW><ROW><id>17495104</id><snippet>index</snippet></ROW><ROW><id>17495213</id><snippet>lower_name = course_name.lower()
matches = [x for x in user_courses if x.split('.')[0].lower() == lower_name]
if matches:
    match = matches[0]
    # match is the matched name
</snippet></ROW><ROW><id>17495213</id><snippet>course_name.lower()</snippet></ROW><ROW><id>17495213</id><snippet>course_name.lower()</snippet></ROW><ROW><id>17495213</id><snippet>course_name.lower()</snippet></ROW><ROW><id>17495233</id><snippet>dic = {'previous_f_key': {'1g': ['33725.7', '-70.29'],
                               '2g': ['35613.3', '108.83'],
                               '3g': ['32080.9', '-69.86']},
            'f_key': {'1g': ['8880.8', '-66.99'],
                      '2g': ['6942.6', '114.79'],
                      '3g': ['12300.3', '-70.34']}}

maxx = float('-inf')
for d,v in dic.iteritems():
    for k,v1 in v.iteritems():
        loc_max = float(max(v1, key = float))
        if loc_max &gt; maxx:
            outer_key = d
            header = k
            maxx = loc_max

print outer_key, header, maxx
</snippet></ROW><ROW><id>17495233</id><snippet>previous_f_key 2g 35613.3
</snippet></ROW><ROW><id>17495274</id><snippet>set.intersection</snippet></ROW><ROW><id>17495274</id><snippet>&gt;&gt;&gt; lis = [set((0,1,3)), set((1,3))]
&gt;&gt;&gt; set.intersection(*lis)
set([1, 3])
</snippet></ROW><ROW><id>17495274</id><snippet>set.union</snippet></ROW><ROW><id>17495274</id><snippet>&gt;&gt;&gt; set.union(*lis)
set([0, 1, 3])
</snippet></ROW><ROW><id>17495274</id><snippet>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; set.intersection(set(lis[0]), *islice(lis, 1, None))
set([1, 3])
</snippet></ROW><ROW><id>17495296</id><snippet>"abc"</snippet></ROW><ROW><id>17495296</id><snippet>a</snippet></ROW><ROW><id>17495296</id><snippet>b</snippet></ROW><ROW><id>17495296</id><snippet>c</snippet></ROW><ROW><id>17495296</id><snippet>str</snippet></ROW><ROW><id>17495296</id><snippet>array</snippet></ROW><ROW><id>17495296</id><snippet>numpy</snippet></ROW><ROW><id>17495296</id><snippet>mmap</snippet></ROW><ROW><id>17495296</id><snippet>re</snippet></ROW><ROW><id>17495317</id><snippet>diff(conjugate(x), x)</snippet></ROW><ROW><id>17495317</id><snippet>diff(x,x.conjugate())</snippet></ROW><ROW><id>17495317</id><snippet>x</snippet></ROW><ROW><id>17495317</id><snippet>conjugate(x)</snippet></ROW><ROW><id>17495317</id><snippet>x</snippet></ROW><ROW><id>17495317</id><snippet>conjugate(x)</snippet></ROW><ROW><id>17495317</id><snippet>diff(f(x)**2, f(x))</snippet></ROW><ROW><id>17495317</id><snippet>f = Function('f')</snippet></ROW><ROW><id>17495317</id><snippet>diff(x, conjugate(x))</snippet></ROW><ROW><id>17495317</id><snippet>diff(x.subs(conjugate(x), dummy), dummy).subs(dummy, conjugate(x))</snippet></ROW><ROW><id>17495317</id><snippet>conjugate(x).diff(x)</snippet></ROW><ROW><id>17495513</id><snippet>&gt;&gt;&gt; s = 'attachment;filename="ã\x80\x90å\x8a¨æ¼«ä¹\x8bå®¶æ±\x89å\x8c\x96ç»\x84ã\x80\x91[æ\x9c\x80å¼ºä¼\x9aé\x95¿é»\x91ç¥\x9e][ç¬¬192è¯\x9d][é»\x91ç¥\x9eç\x9b®æ³·ä¾\x9dç\x84¶å\x81¥å\x9c¨][END].zip"'
&gt;&gt;&gt; s = s.encode('latin-1').decode('utf-8')
&gt;&gt;&gt; s
'attachment;filename="【动漫之家汉化组】[最强会长黑神][第192话][黑神目泷依然健在][END].zip"'
</snippet></ROW><ROW><id>17495615</id><snippet># define your flags
class sec(FlagType):
  admin = 1
  read = 2
  write = 4
  usage = 8

flags = +sec.read -sec.write +sec.usage

flags.read
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>17495619</id><snippet>def andSearch(inverseIndex, query):
    pepp = set()

    for y in (inverseIndex[x] for x in query):
        if not pepp:
            pepp.update(y)
        else:
            pepp &amp;= y

    return pepp

L =  {'Cats':{1}, 'Dogs':{2}, 'Cat':{0,4}, 'Dog':{0,4}, 'Pigs':{3}, 'Animal':{4}}

for query in [['Dog', 'Cat', 'Animal'],
              ['Dog', 'Cat'],
              ['Dog', 'Dogs'],
              [],]:

    print('query = {} ----&gt; {}'.format(query, andSearch(L, query)))
</snippet></ROW><ROW><id>17495619</id><snippet>query = ['Dog', 'Cat', 'Animal'] ----&gt; set([4])
query = ['Dog', 'Cat'] ----&gt; set([0, 4])
query = ['Dog', 'Dogs'] ----&gt; set([])
query = [] ----&gt; set([])
</snippet></ROW><ROW><id>17495619</id><snippet>query = ['Dog', 'Cat', 'Animal'] ----&gt; {4}
query = ['Dog', 'Cat'] ----&gt; {0, 4}
query = ['Dog', 'Dogs'] ----&gt; set()
query = [] ----&gt; set()
</snippet></ROW><ROW><id>17495619</id><snippet>scipy</snippet></ROW><ROW><id>17495700</id><snippet>sum()</snippet></ROW><ROW><id>17495700</id><snippet>..sum..()</snippet></ROW><ROW><id>17495785</id><snippet>multi=True</snippet></ROW><ROW><id>17495785</id><snippet>cursor.execute()</snippet></ROW><ROW><id>17495785</id><snippet>iterable = b.execute('SELECT * FROM accounts; SELECT * FROM profile', multi=True)
for item in iterable:
    print(item.fetchall())
</snippet></ROW><ROW><id>17495785</id><snippet>multi</snippet></ROW><ROW><id>17495785</id><snippet>b.execute('SELECT * FROM profile')
print(b.fetchall())
</snippet></ROW><ROW><id>17495787</id><snippet>xticks</snippet></ROW><ROW><id>17495787</id><snippet>&gt;&gt;&gt; listHours = ['00:00:000-10:00:000', '10:00:000-20:00:000', '20:00:000-30:00:000','30:00:000-40:00:000', '40:00:000-50:00:000', '50:00:000-00:00:000']
&gt;&gt;&gt; listNumbers = ['0.01', '0.02', '0.03', '0.05', '0.05', '0.03']
&gt;&gt;&gt; listNumbers = [float(elem) for elem in listNumbers]  # Convert to a list of floats.
&gt;&gt;&gt; plt.plot(listNumbers)
&gt;&gt;&gt; plt.xticks(range(len(listHours)), listHours, size='small')
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>17495806</id><snippet>enumerate</snippet></ROW><ROW><id>17495806</id><snippet>set</snippet></ROW><ROW><id>17495806</id><snippet>a b c
b x y
a c b
</snippet></ROW><ROW><id>17495806</id><snippet>index = {}
with open('myfile.txt') as F:
    for line_num, line in enumerate(F):
        for word in line.split():
            index.setdefault(word, set()).add(line_num)

index
=&gt; {'a': set([0, 2]),
 'b': set([0, 1, 2]),
 'c': set([0, 2]),
 'x': set([1]),
 'y': set([1])}
</snippet></ROW><ROW><id>17495936</id><snippet>hex()</snippet></ROW><ROW><id>17495936</id><snippet>&gt;&gt;&gt; testNum = 0xa1b2c3
&gt;&gt;&gt; hex(testNum)
    '0xa1b2c3'
&gt;&gt;&gt; test = hex(testNum)
&gt;&gt;&gt; isinstance(test, str)
    True
</snippet></ROW><ROW><id>17495936</id><snippet>hex</snippet></ROW><ROW><id>17495936</id><snippet>help(hex)</snippet></ROW><ROW><id>17495936</id><snippet>hex(...)
    hex(number) -&gt; string

    Return the hexadecimal representation of an integer or long integer.
</snippet></ROW><ROW><id>17496048</id><snippet>*</snippet></ROW><ROW><id>17496096</id><snippet>melt</snippet></ROW><ROW><id>17496096</id><snippet>In [11]: from pandas.core.reshape import melt

In [12]: melt(df)
Out[12]:
  variable     value
0        a  1.067683
1        a -1.321405
2        a -0.807333
3        b -1.110463
4        b  0.368915
5        b  0.082980
6        c  0.208670
7        c -1.055342
8        c -0.873361
</snippet></ROW><ROW><id>17496305</id><snippet>select</snippet></ROW><ROW><id>17496305</id><snippet>import socket
import select
import Queue
import time

TIMEOUT = 0.1   # 100ms


def process_queue_item(item):
    print 'Got queue item: %r' % item


def process_socket_data(data):
    print 'Got socket data: %r' % data


def main():

    # Build queue
    queue = Queue.Queue()
    for i in range(10):
        queue.put(i)
    queue.put(None)   # Using None to indicate no more data on queue
    queue_active = True

    # Build socket
    sock = socket.socket()
    sock.connect(('www.google.com', 80))
    sock.send('GET / HTTP/1.0\r\n\r\n')
    socket_active = True

    # Main event loop
    while 1:

        # If there's nothing to read, bail out
        if not (socket_active or queue_active):
            break

        # By default, sleep at the end of the loop
        do_sleep = True

        # Get data from socket without blocking if possible
        if socket_active:
            r, w, x = select.select([sock], [], [], TIMEOUT)
            if r:
                data = sock.recv(64)
                if not data:    # Hit EOF
                    socket_active = False
                else:
                    do_sleep = False
                    process_socket_data(data)

        # Get item from queue without blocking if possible
        if queue_active:
            try:
                item = queue.get_nowait()
                if item is None:  # Hit end of queue
                    queue_active = False
                else:
                    do_sleep = False
                    process_queue_item(item)
            except Queue.Empty:
                pass

        # If we didn't get anything on this loop, sleep for a bit so we
        # don't max out CPU time
        if do_sleep:
            time.sleep(TIMEOUT)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17496305</id><snippet>Got socket data: 'HTTP/1.0 302 Found\r\nLocation: http://www.google.co.uk/\r\nCache-Co'
Got queue item: 0
Got socket data: 'ntrol: private\r\nContent-Type: text/html; charset=UTF-8\r\nSet-Cook'
Got queue item: 1
Got socket data: 'ie: PREF=ID=a192ab09b4c13176:FF=0:TM=1373055330:LM=1373055330:S='
Got queue item: 2
etc.
</snippet></ROW><ROW><id>17496626</id><snippet> info["table"] = ET.tostring(table, encoding="utf8")
</snippet></ROW><ROW><id>17496626</id><snippet>bytes</snippet></ROW><ROW><id>17496626</id><snippet>str</snippet></ROW><ROW><id>17496626</id><snippet> info["table"] = ET.tostring(table, encoding="unicode")
</snippet></ROW><ROW><id>17496706</id><snippet>random.shuffle(arr)
</snippet></ROW><ROW><id>17496893</id><snippet>try</snippet></ROW><ROW><id>17496893</id><snippet>try:
    x = int(x)
except ValueError:
    print "{} is not an integer".format(x)
</snippet></ROW><ROW><id>17496893</id><snippet>float()</snippet></ROW><ROW><id>17496893</id><snippet>int()</snippet></ROW><ROW><id>17496952</id><snippet>for urls in new_keywords:
    if urls not in old_keywords:
        upload_keywords.append(urls)
</snippet></ROW><ROW><id>17497049</id><snippet>treasure</snippet></ROW><ROW><id>17497049</id><snippet>treasure = "Success!"

def primary(input):
    def second():
        print "something"

    def third():
        print treasure
</snippet></ROW><ROW><id>17497049</id><snippet>treasure</snippet></ROW><ROW><id>17497049</id><snippet>global</snippet></ROW><ROW><id>17497049</id><snippet>treasure = "Success!"

def primary(input):
    def second():
        print "something"

    def third():
        global treasure
        treasure = 'changed!'
        print treasure

    third()
</snippet></ROW><ROW><id>17497086</id><snippet>b = a[:]</snippet></ROW><ROW><id>17497086</id><snippet>a</snippet></ROW><ROW><id>17497086</id><snippet>b</snippet></ROW><ROW><id>17497086</id><snippet>a</snippet></ROW><ROW><id>17497086</id><snippet>a</snippet></ROW><ROW><id>17497086</id><snippet>b</snippet></ROW><ROW><id>17497086</id><snippet>a is not b</snippet></ROW><ROW><id>17497086</id><snippet>b[0][0] = 1</snippet></ROW><ROW><id>17497086</id><snippet>a</snippet></ROW><ROW><id>17497086</id><snippet>id()</snippet></ROW><ROW><id>17497086</id><snippet>&gt;&gt;&gt; a = [[0,0],[0,0]]
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; id(a)
2917280                    # &lt;----+
&gt;&gt;&gt; id(b)                  #      |----- different!
2771584                    # &lt;----+
&gt;&gt;&gt; id(a[0]), id(a[1])
(2917320, 2917360)         # &lt;----+
&gt;&gt;&gt; id(b[0]), id(b[1])     #      |----- same!
(2917320, 2917360)         # &lt;----+
</snippet></ROW><ROW><id>17497098</id><snippet>"."</snippet></ROW><ROW><id>17497098</id><snippet>argv[0]</snippet></ROW><ROW><id>17497098</id><snippet>main</snippet></ROW><ROW><id>17497098</id><snippet>sys.path.append</snippet></ROW><ROW><id>17497098</id><snippet>chdir</snippet></ROW><ROW><id>17497098</id><snippet>"."</snippet></ROW><ROW><id>17497098</id><snippet>sys.path.append</snippet></ROW><ROW><id>17497098</id><snippet>chdir</snippet></ROW><ROW><id>17497098</id><snippet>main</snippet></ROW><ROW><id>17497454</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17497454</id><snippet>from itertools import groupby

for key, group in groupby(line.split(';'), key=lambda i: int(i) &gt; 4):
    if key:
        for i in group:
            print(i)
    else:
        print(';'.join(group))
</snippet></ROW><ROW><id>17497454</id><snippet>&gt;&gt;&gt; for key, group in groupby(line.split(';'), key=lambda i: int(i) &gt; 4):
...     if key:
...         for i in group:
...             print(i)
...     else:
...         print(';'.join(group))
... 
4;4;4
8
4;4;4
9
9
4;4
</snippet></ROW><ROW><id>17497454</id><snippet>groupby</snippet></ROW><ROW><id>17497540</id><snippet>htons</snippet></ROW><ROW><id>17497540</id><snippet>htonl</snippet></ROW><ROW><id>17497540</id><snippet>socket</snippet></ROW><ROW><id>17497737</id><snippet>import re 

def find_subs(line):
    match = re.findall("&gt;([aA-zZ\s]*)&lt;",line)
    if len(match) != 0:
        new_line = '&lt;ul class="bar"&gt;'
        for m in match:
            new_line += "&lt;li&gt;"+m+"&lt;/li&gt;"
        new_line += "&lt;/ul&gt;"
        return new_line
    else:
        return None

line = "&lt;stats&gt;Some line&lt;br&gt;Other line&lt;/stats&gt;"
new = find_subs(line)
print new
</snippet></ROW><ROW><id>17497840</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('&lt;option value="BC"&gt;BRITISH COLUMBIA&lt;/option&gt;')
&gt;&gt;&gt; soup.find('option')['selected'] = ''
&gt;&gt;&gt; print soup
&lt;html&gt;&lt;body&gt;&lt;option selected="" value="BC"&gt;BRITISH COLUMBIA&lt;/option&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>17497840</id><snippet>{'value':'BC'}</snippet></ROW><ROW><id>17497840</id><snippet>dict[key] = value</snippet></ROW><ROW><id>17497894</id><snippet>requests</snippet></ROW><ROW><id>17497894</id><snippet>urllib2</snippet></ROW><ROW><id>17497894</id><snippet>import urllib2


def get_anon_content(url):
    anon_url = 'http://anonymouse.org/cgi-bin/anon-www.cgi/%s' % url
    req = urllib2.Request(anon_url)
    response = urllib2.urlopen(req)
    content = response.read()
    return content


url = 'http://www.google.ca'
print get_anon_content(url)
</snippet></ROW><ROW><id>17497895</id><snippet>print &gt;&gt; file, line
</snippet></ROW><ROW><id>17497895</id><snippet>print</snippet></ROW><ROW><id>17497895</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>17497895</id><snippet>print &gt;&gt; file, line,
</snippet></ROW><ROW><id>17497895</id><snippet>itertools.islice</snippet></ROW><ROW><id>17497895</id><snippet>from itertools import islice

with open('input') as fin, open('output', 'w') as fout:
    fout.writelines(islice(fin, None, None, 2))
</snippet></ROW><ROW><id>17497895</id><snippet>non_blanks = (line for line in fin if line.strip())
fout.writelines(islice(non_blanks, None, None, 2))
</snippet></ROW><ROW><id>17498092</id><snippet>def htmlentities(string):
  def char_htmlentities(c):
    return '&amp;#%d;' % ord(c) if c in html_symbols else c

  html_symbols =  set(',\'".&lt;&gt;?;:')
  return ''.join(map(char_htmlentities, string))
</snippet></ROW><ROW><id>17498220</id><snippet>arr.view('i8')</snippet></ROW><ROW><id>17498220</id><snippet>np.int64</snippet></ROW><ROW><id>17498220</id><snippet>In [94]: DATETIME_DATE_ZERO_VIEW = DATETIME64_DATE_ZERO.view('i8')

In [95]: DATETIME_DATE_ZERO_VIEW
Out[95]: -2209161600000000000

In [96]: DATETIME64_ONE_DAY_VALUE = DATETIME64_ONE_DAY.astype('m8[ns]').item()

In [97]: DATETIME64_ONE_DAY_VALUE
Out[97]: 86400000000000L

In [106]: def vect(x):
   .....:     return (x-DATETIME_DATE_ZERO_VIEW)/DATETIME64_ONE_DAY_VALUE
   .....: 

In [107]: f = np.vectorize(vect)
</snippet></ROW><ROW><id>17498220</id><snippet>In [109]: f(datetimes.view('i8'))
Out[109]: array([41407, 41408, 41409, 41410, 41411, 41414])
</snippet></ROW><ROW><id>17498220</id><snippet>In [98]: Series(datetimes).apply(lambda x: (x.value-DATETIME_DATE_ZERO_VIEW)/DATETIME64_ONE_DAY_VALUE)
Out[98]: 
0    41407
1    41408
2    41409
3    41410
4    41411
5    41414
dtype: int64
</snippet></ROW><ROW><id>17498239</id><snippet>time.clock</snippet></ROW><ROW><id>17498239</id><snippet>time.time</snippet></ROW><ROW><id>17498239</id><snippet>time.time()</snippet></ROW><ROW><id>17498239</id><snippet>time.clock()</snippet></ROW><ROW><id>17498239</id><snippet>clock()</snippet></ROW><ROW><id>17498345</id><snippet>from django.http import HttpResponseRedirect
from pygooglechart import PieChart3D


def pytest(request):
    chart = PieChart3D(250, 100)
    chart.add_data([20, 10])
    chart.set_pie_labels(['Hello', 'World'])
    return HttpResponseRedirect(chart.get_url())
</snippet></ROW><ROW><id>17498345</id><snippet>from django.template import RequestContext
from django.shortcuts import render_to_response
from pygooglechart import PieChart3D


def pytest(request):
    chart = PieChart3D(250, 100)
    chart.add_data([20, 10])
    chart.set_pie_labels(['Hello', 'World'])
    context = RequestContext(request, {
        'url_to_chart': chart.get_url()
    })
    template = 'path/to/template.html'
    return render_to_response(template, context)
</snippet></ROW><ROW><id>17498345</id><snippet>&lt;img src="{{ url_to_chart }}" alt="" /&gt;
</snippet></ROW><ROW><id>17498630</id><snippet>&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; list1 = ['a','b','c']
&gt;&gt;&gt; list2 = ['1','2','3','4','5']
&gt;&gt;&gt; zip(list2, cycle(list1))
[('1', 'a'), ('2', 'b'), ('3', 'c'), ('4', 'a'), ('5', 'b')]
</snippet></ROW><ROW><id>17498630</id><snippet>&gt;&gt;&gt; from itertools import islice, izip
&gt;&gt;&gt; list(islice(izip(cycle(list2), cycle(list1)), 5))
[('1', 'a'), ('2', 'b'), ('3', 'c'), ('4', 'a'), ('5', 'b')]
</snippet></ROW><ROW><id>17498666</id><snippet>myHandler</snippet></ROW><ROW><id>17498673</id><snippet>loc</snippet></ROW><ROW><id>17498673</id><snippet>floc=0</snippet></ROW><ROW><id>17498673</id><snippet>f0=1</snippet></ROW><ROW><id>17498673</id><snippet>&gt;&gt;&gt; stats.exponweib.fit(data, floc=0, f0=1)
[1, 1.8553346917584836, 0, 6.8820748596850905]
&gt;&gt;&gt; stats.weibull_min.fit(data, floc=0)
[1.8553346917584836, 0, 6.8820748596850549]
</snippet></ROW><ROW><id>17498673</id><snippet>&gt;&gt;&gt; from scipy import stats
&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; plt.plot(x, stats.exponweib.pdf(x, *stats.exponweib.fit(data, 1, 1, scale=02, loc=0)))
&gt;&gt;&gt; _ = plt.hist(data, bins=np.linspace(0, 16, 33), normed=True, alpha=0.5);
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>17498681</id><snippet>import re
tag = 'unique'
# p = re.compile("&lt;" + tag + "&gt;([aA-zZ0-9\-\s:]*)&lt;/" + tag + "&gt;")
# aA-zZ means a, range A-z and Z. this includes some sign like '[', '^' ... .
# the last '-' in character group( inside [ and ] ) matches '-' self.
p = re.compile("&lt;" + tag + "&gt;([a-zA-Z0-9\s:-]*)&lt;/" + tag + "&gt;")

ml = "&lt;unique&gt;UNIQUE Passive - Maim:&lt;/unique&gt; Basic attacks deal 10 bonus magic damage to monsters on hit.&lt;br&gt;&lt;unique&gt;UNIQUE Passive - Butcher:&lt;/unique&gt; Damage dealt to monsters increased by 10%.&lt;br&gt;&lt;br&gt;&lt;i&gt;ique Passives with the same name don't stack.)&lt;/i&gt;"
m = p.search(ml)
print m.group()
print

print p.findall(ml)
print

for m in p.finditer(ml):
    print m.group()
</snippet></ROW><ROW><id>17498681</id><snippet>&lt;unique&gt;UNIQUE Passive - Maim:&lt;/unique&gt;

['UNIQUE Passive - Maim:', 'UNIQUE Passive - Butcher:']

&lt;unique&gt;UNIQUE Passive - Maim:&lt;/unique&gt;
&lt;unique&gt;UNIQUE Passive - Butcher:&lt;/unique&gt;
</snippet></ROW><ROW><id>17498705</id><snippet>import subprocess
p = subprocess.Popen([path.join('C:\users\fakepath','image1.jpg')], shell=True)
...
#When you want the program to close
p.kill()
</snippet></ROW><ROW><id>17498705</id><snippet>subprocess.Popen(['path_to_adobe_reader', 'path_to_pdf_file']...
</snippet></ROW><ROW><id>17498717</id><snippet>return browser.page_source()
</snippet></ROW><ROW><id>17498717</id><snippet>return browser.page_source
</snippet></ROW><ROW><id>17498951</id><snippet>vector&lt;vector&lt;int&gt; &gt; ret;

int upper = 10;
vector&lt;int&gt; v(entry, upper);
ret.push_back(v);

typedef vector&lt;int&gt;::iterator iter_t;

iter_t it = v.begin();
int count=0;
int c = 0;
while(v.back() != 6) {
  v = ret[count+c];
  while(it != v.end()) {
    --(*it);
    ++it;
    ret.push_back(v);
    ++c;
  }
  it = v.begin();
  c=0;
  ++count;
}
</snippet></ROW><ROW><id>17498951</id><snippet>c</snippet></ROW><ROW><id>17498951</id><snippet>it</snippet></ROW><ROW><id>17498951</id><snippet>int count=0;
while(v.back() != 6) {
  iter_t it = v.begin();
  int c = 0;
  v = ret[count+c];
  while(it != v.end()) {
    --(*it);
    ++it;
    ret.push_back(v);
    ++c;
  }
  ++count;
}
</snippet></ROW><ROW><id>17498951</id><snippet>c</snippet></ROW><ROW><id>17498951</id><snippet>it</snippet></ROW><ROW><id>17498951</id><snippet>v</snippet></ROW><ROW><id>17498951</id><snippet>v</snippet></ROW><ROW><id>17498951</id><snippet>it</snippet></ROW><ROW><id>17498951</id><snippet>vector&lt;int&gt; v(n,6);

vector&lt;int&gt;::iterator itr1;
do{
  ret.push_back(v);

  itr1 = v.begin();

  while(++(*itr1)&gt;10){
      if(++itr1==v.end())
        break;
  }
  for(vector&lt;int&gt;::iterator itr2 = v.begin(); itr2!=itr1; ++itr2)
    *itr2 = *itr1;
}
while(itr1!=v.end());
</snippet></ROW><ROW><id>17499059</id><snippet>with open('Input_file_1.txt', 'r') as myfile1:
    tuples1 = myfile1.readlines()

with open('Input_file_2.txt', 'r') as myfile2:
    tuples2 = myfile2.readlines()
</snippet></ROW><ROW><id>17499059</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17499059</id><snippet>import ast
tuples1 = map(ast.literal_eval, tuples1)
tuples2 = map(ast.literal_eval, tuples2)
</snippet></ROW><ROW><id>17499059</id><snippet>for tuple2 in tuples2:
    for tuple1 in tuples1:
        if tuple1[0] == tuple2[0]:
            print tuple2
</snippet></ROW><ROW><id>17499059</id><snippet>('126871', 'mmomo', 'qqlqlqlq')
</snippet></ROW><ROW><id>17499158</id><snippet>input("Are you thinking of " + str(number2) + " ?") 
</snippet></ROW><ROW><id>17499158</id><snippet>str()</snippet></ROW><ROW><id>17499158</id><snippet>.format()</snippet></ROW><ROW><id>17499158</id><snippet>input("Are you thinking of {} ?".format(number2)) 
</snippet></ROW><ROW><id>17499324</id><snippet>type</snippet></ROW><ROW><id>17499324</id><snippet>type(n) is int</snippet></ROW><ROW><id>17499324</id><snippet>n</snippet></ROW><ROW><id>17499324</id><snippet>map</snippet></ROW><ROW><id>17499324</id><snippet>def Squares(n):
    squareList = []

    if type(n) is int and n &gt; 0:
        mapResult = map(square, range(1, n+1))

    return squareList
</snippet></ROW><ROW><id>17499365</id><snippet>import csv

f = file("file.csv", 'a')
csv_writer = csv.writer(f)

my_record = ["This", "is", "a", "row", "of", "data"]

csv_writer.writerow(my_record)
</snippet></ROW><ROW><id>17499647</id><snippet>$3</snippet></ROW><ROW><id>17499647</id><snippet>$6</snippet></ROW><ROW><id>17499647</id><snippet>@</snippet></ROW><ROW><id>17499647</id><snippet>awk '{split($3, a, "@"); split($6, b, "@");if (a[1] == b[1]) print}'
</snippet></ROW><ROW><id>17499647</id><snippet>awk '{split($3, a, "@"); split($6, b, "@")}; a[1] == b[1]' 
</snippet></ROW><ROW><id>17499647</id><snippet>from __future__ import print_function
with open('testfile.txt') as f:
    for line in f:
            fields = line.split()
            fields3 = fields[2].split('@')
            fields6 = fields[5].split('@')
            if fields3[0] == fields6[0]:
                    print(line, end='')
</snippet></ROW><ROW><id>17499696</id><snippet>str.split()</snippet></ROW><ROW><id>17499696</id><snippet>str.join()</snippet></ROW><ROW><id>17499696</id><snippet>&gt;&gt;&gt; s = "31/12/9999"
&gt;&gt;&gt; L = s.split('/') # L now contains ['31', '12', '9999']
&gt;&gt;&gt; print '/'.join(L[::-1]) # Reverse the list, then print all the content in the list joined by a /
9999/12/31
</snippet></ROW><ROW><id>17499696</id><snippet>&gt;&gt;&gt; print '/'.join(s.split('/')[::-1])
</snippet></ROW><ROW><id>17499696</id><snippet>datetime</snippet></ROW><ROW><id>17499696</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; s = "31/12/9999"
&gt;&gt;&gt; date = datetime.datetime.strptime(s, '%d/%m/%Y')
&gt;&gt;&gt; print date.strftime('%Y/%m/%d')
9999/12/31
</snippet></ROW><ROW><id>17499696</id><snippet>$ python -m timeit 's = "31/12/9999"' "'/'.join(s.split('/')[::-1])"
1000000 loops, best of 3: 0.799 usec per loop
$ python -m timeit 's = "31/12/9999"' "'/'.join(reversed(s.split('/')))"
1000000 loops, best of 3: 1.53 usec per loop
</snippet></ROW><ROW><id>17499842</id><snippet>conn.commit()</snippet></ROW><ROW><id>17499842</id><snippet>conn.close()</snippet></ROW><ROW><id>17499842</id><snippet>isolation_level=None</snippet></ROW><ROW><id>17499842</id><snippet>db.connect()</snippet></ROW><ROW><id>17500057</id><snippet>request.json</snippet></ROW><ROW><id>17500057</id><snippet>try:
    myInt = request.json['myInt']
    myArray = request.json['myArray']
</snippet></ROW><ROW><id>17500057</id><snippet>content-type</snippet></ROW><ROW><id>17500057</id><snippet>application/json</snippet></ROW><ROW><id>17500749</id><snippet>socket.send('\xa5')
socket.send('Hello, world!')
</snippet></ROW><ROW><id>17500749</id><snippet>chr()</snippet></ROW><ROW><id>17500749</id><snippet>socket.send(chr(0xa5))
</snippet></ROW><ROW><id>17500762</id><snippet>fun! ReverseComplement()
    exec ":'&lt;,'&gt;! python -c \"import sys, Bio.Seq; print Bio.Seq.reverse_complement(sys.stdin.read().rstrip())\""
endfun

vnoremap &lt;F5&gt; :call ReverseComplement()&lt;CR&gt;
</snippet></ROW><ROW><id>17500762</id><snippet>vnoremap &lt;F5&gt; d:let @a=system('python -c "import sys, Bio.Seq; sys.stdout.write(Bio.Seq.reverse_complement(\"' . @" . '\"))"')&lt;CR&gt;"aP
</snippet></ROW><ROW><id>17500762</id><snippet>"</snippet></ROW><ROW><id>17500762</id><snippet>@"</snippet></ROW><ROW><id>17500762</id><snippet>"</snippet></ROW><ROW><id>17500762</id><snippet>.</snippet></ROW><ROW><id>17500762</id><snippet>let @a = system(..)</snippet></ROW><ROW><id>17500762</id><snippet>a</snippet></ROW><ROW><id>17500762</id><snippet>a</snippet></ROW><ROW><id>17500867</id><snippet>for</snippet></ROW><ROW><id>17500867</id><snippet>    value = []
    for rompe in stringo.split():
        for asigna in vocabulary:
            for encuentra in asigna:
                if encuentra[1] == rompe:
                    value.append(encuentra)
</snippet></ROW><ROW><id>17500867</id><snippet>encuentra</snippet></ROW><ROW><id>17500867</id><snippet>vocabulary = {
    'direction': 'north east south west up down left right back'.split(),
    'noun': 'bear princess door cabinet'.split(),
    'stop': 'the in of from at it'.split(),
    'verb': 'go kill eat stop'.split(),
}

'''
This creates a lookup using a dictionary-comprehension:
{'at': 'stop',
# [...]
 'up': 'direction',
 'west': 'direction'}
'''
classifications = {i: k for k, v in vocabulary.iteritems() for i in v}


def classify(word):
    try:
        return 'number', int(word)
    except ValueError:
        return classifications.get(word, 'error'), word


def scan(words):
    return [classify(word) for word in words.split()]
</snippet></ROW><ROW><id>17501210</id><snippet>file = ''</snippet></ROW><ROW><id>17501210</id><snippet>file</snippet></ROW><ROW><id>17501210</id><snippet>filename</snippet></ROW><ROW><id>17501334</id><snippet>:.2f</snippet></ROW><ROW><id>17501334</id><snippet>In [1]: exampleInt = 123.456789

In [2]: print('{:.2f}'.format(exampleInt))
123.46
</snippet></ROW><ROW><id>17501334</id><snippet>SyntaxError</snippet></ROW><ROW><id>17501595</id><snippet>sharedposts</snippet></ROW><ROW><id>17501595</id><snippet>#going through each of your posts one by one
for post in g['data']:

    #getting the ID of the post
    id = post['id']        #gives USERID_POSTID
    id[-17:]               #we know that a post ID is represented by 17 numerals

    #another Graph request to get the shared posts
    shares = graph.get(id + '?fields=sharedposts')  

    print(id, 'shared by:')

    #displays the name of each sharer
    for share in shares['data']:
        print(share['from']['name'])
</snippet></ROW><ROW><id>17501668</id><snippet>if</snippet></ROW><ROW><id>17501668</id><snippet>SyntaxError</snippet></ROW><ROW><id>17501668</id><snippet>:</snippet></ROW><ROW><id>17501668</id><snippet>filecmp</snippet></ROW><ROW><id>17501668</id><snippet>keyfile</snippet></ROW><ROW><id>17501668</id><snippet>file1</snippet></ROW><ROW><id>17501668</id><snippet>i</snippet></ROW><ROW><id>17501668</id><snippet>file1</snippet></ROW><ROW><id>17501668</id><snippet>file2</snippet></ROW><ROW><id>17501668</id><snippet>with open("keyfile") as k:
    keyfile = k.read()
    for i in range(100, 0, -1):
        file1 = # generate data based on the value of i
        if keyfile == file1:
            file2 = # generate data based on the value of i
            with open("file1", "w") as p, open("file2", "w") as q:
                # write file1 and file2 to actual files
            print "%d is the correct value of it" % i
            break
</snippet></ROW><ROW><id>17501696</id><snippet>chunk</snippet></ROW><ROW><id>17501696</id><snippet>message</snippet></ROW><ROW><id>17501696</id><snippet>recv</snippet></ROW><ROW><id>17502213</id><snippet>MasterRelease</snippet></ROW><ROW><id>17502213</id><snippet>id</snippet></ROW><ROW><id>17502213</id><snippet>for masterrelease in thereleases:
    print masterrelease.id
</snippet></ROW><ROW><id>17502213</id><snippet>.versions</snippet></ROW><ROW><id>17502213</id><snippet>.title</snippet></ROW><ROW><id>17502243</id><snippet>function! CopyToClipboard()
    py &lt;&lt; EOF
import vim, os
# evaluate a vim expression and save its value to a variable
path_line = vim.eval('expand("%") . ":" . line(".")')
# copy the string to the clipboard
os.system("echo '%s' | pbcopy" % path_line)

# do additional stuff with path_line here

EOF
endfunction
</snippet></ROW><ROW><id>17502243</id><snippet>nnoremap ,c :call CopyToClipboard()&lt;CR&gt;
</snippet></ROW><ROW><id>17502243</id><snippet>:h python</snippet></ROW><ROW><id>17502243</id><snippet>:h pyfile
</snippet></ROW><ROW><id>17502244</id><snippet>minute</snippet></ROW><ROW><id>17502244</id><snippet>now</snippet></ROW><ROW><id>17502244</id><snippet>now.minute</snippet></ROW><ROW><id>17502244</id><snippet>minute</snippet></ROW><ROW><id>17502244</id><snippet>while minute &lt; 46 :
    print "test"
    time.sleep(5)
    now = datetime.datetime.now()
    minute = now.minute
</snippet></ROW><ROW><id>17502572</id><snippet>def animate(...):
    &lt;move the widget one or two pixels&gt;
    &lt;if the widget needs to move some more&gt;:
        self.canvas.after(100, animate)
</snippet></ROW><ROW><id>17502778</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>17502778</id><snippet>open()</snippet></ROW><ROW><id>17502778</id><snippet>delete=False</snippet></ROW><ROW><id>17502778</id><snippet>.seek(0)</snippet></ROW><ROW><id>17502989</id><snippet>drem</snippet></ROW><ROW><id>17502989</id><snippet>remainder</snippet></ROW><ROW><id>17502989</id><snippet>round</snippet></ROW><ROW><id>17502989</id><snippet>round</snippet></ROW><ROW><id>17502989</id><snippet>drem</snippet></ROW><ROW><id>17502989</id><snippet>def drem(x, y):
    n = round(x / y)
    return x - n * y
</snippet></ROW><ROW><id>17502989</id><snippet>import decimal

def drem(x, y):
    xd = decimal.Decimal(x)
    yd = decimal.Decimal(y)

    return float(xd.remainder_near(yd))
</snippet></ROW><ROW><id>17503068</id><snippet>factory = Site(ScaledImage(load_config(...)))
</snippet></ROW><ROW><id>17503068</id><snippet>ScaledImage</snippet></ROW><ROW><id>17503068</id><snippet>ScaledImage</snippet></ROW><ROW><id>17503068</id><snippet>config = load_config(...)
scaleFactor = getScaleFactorFromConfig(config)
factory = Site(ScaledImage(scaleFactor))
</snippet></ROW><ROW><id>17503159</id><snippet>def nestedvalueget(*keys):
    ob = nesteddict
    for key in keys:
        ob = ob[key]
    return ob
</snippet></ROW><ROW><id>17503159</id><snippet>functools.reduce()</snippet></ROW><ROW><id>17503159</id><snippet>from functools import reduce
from operator import getitem

def nestedvalueget(*keys):
    return reduce(getitem, keys, nesteddict)
</snippet></ROW><ROW><id>17503159</id><snippet>nestedvalueget('c', 'cn')
</snippet></ROW><ROW><id>17503159</id><snippet>&gt;&gt;&gt; nesteddict = {'a':'a1','b':'b1','c':{'cn':'cn1'}}
&gt;&gt;&gt; def nestedvalueget(*keys):
...     ob = nesteddict
...     for key in keys:
...         ob = ob[key]
...     return ob
... 
&gt;&gt;&gt; nestedvalueget('c', 'cn')
'cn1'
&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; from operator import getitem
&gt;&gt;&gt; def nestedvalueget(*keys):
...     return reduce(getitem, keys, nesteddict)
... 
&gt;&gt;&gt; nestedvalueget('c', 'cn')
'cn1'
</snippet></ROW><ROW><id>17503159</id><snippet>['n']['cn']</snippet></ROW><ROW><id>17503159</id><snippet>['n']</snippet></ROW><ROW><id>17503159</id><snippet>'cn'</snippet></ROW><ROW><id>17503159</id><snippet>&gt;&gt;&gt; ['n']['cn']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: list indices must be integers, not str
&gt;&gt;&gt; ['n'][0]
'n'
</snippet></ROW><ROW><id>17503307</id><snippet>StringIO()</snippet></ROW><ROW><id>17503307</id><snippet>StringIO()</snippet></ROW><ROW><id>17503347</id><snippet>import re

soup.find_all(text=re.compile('^\s*Text Start:.*'))
</snippet></ROW><ROW><id>17503347</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''\
... &lt;div class="class"&gt;
... &lt;div class="time"&gt;
... &lt;span class="date"&gt;07/02/13&lt;/span&gt;
... &lt;span class="sep"&gt;|&lt;/span&gt;
... &lt;span class="duration"&gt;02:15&lt;/span&gt;
... &lt;div class="clear"&gt;&lt;/div&gt;
... &lt;/div&gt;
... Text Start: This text changes each time, 5-4
... &lt;/div&gt;
... ''')
&gt;&gt;&gt; import re
&gt;&gt;&gt; soup.find_all(text=re.compile('^\s*Text Start:.*'))
[u'\nText Start: This text changes each time, 5-4\n']
</snippet></ROW><ROW><id>17503511</id><snippet>origninal</snippet></ROW><ROW><id>17503511</id><snippet>original</snippet></ROW><ROW><id>17503511</id><snippet>if len(original) &gt; 0:
    print original
else:
    print "empty"
</snippet></ROW><ROW><id>17504023</id><snippet>sqlite3</snippet></ROW><ROW><id>17504057</id><snippet>mp.Process(...)</snippet></ROW><ROW><id>17504057</id><snippet>blah = importlib.import_module("math")
</snippet></ROW><ROW><id>17504057</id><snippet>if __name__ == '__main__':
</snippet></ROW><ROW><id>17504057</id><snippet>blah</snippet></ROW><ROW><id>17504057</id><snippet>importlib.import_module</snippet></ROW><ROW><id>17504057</id><snippet>import importlib
import multiprocessing as mp
blah = None

def f(a, b, name):
    blah = importlib.import_module(name)
    print blah.hypot(a,b)

if __name__ == '__main__':
    a = 1
    b = 2
    p = mp.Process(target=f, args=(a, b, "math"))
    p.start()
    p.join()
</snippet></ROW><ROW><id>17504158</id><snippet>"</snippet></ROW><ROW><id>17504158</id><snippet>'</snippet></ROW><ROW><id>17504158</id><snippet>“</snippet></ROW><ROW><id>17504158</id><snippet>”</snippet></ROW><ROW><id>17504158</id><snippet>’</snippet></ROW><ROW><id>17504158</id><snippet>raw = urlopen(url).read()
original = raw.decode('utf-8')
replacement = original.replace('\u201c', '"').replace('\u201d', '"').replace('\u2019', "'")
soup = BeautifulSoup(replacement)  # Don't need fromEncoding if we're passing in Unicode
</snippet></ROW><ROW><id>17504313</id><snippet>if random.randrange == some_range</snippet></ROW><ROW><id>17504313</id><snippet>randrange</snippet></ROW><ROW><id>17504313</id><snippet>stop</snippet></ROW><ROW><id>17504313</id><snippet>randrange()</snippet></ROW><ROW><id>17504313</id><snippet>False</snippet></ROW><ROW><id>17504313</id><snippet>3</snippet></ROW><ROW><id>17504313</id><snippet>[3]</snippet></ROW><ROW><id>17504313</id><snippet>if random_value in some_range</snippet></ROW><ROW><id>17504313</id><snippet>in</snippet></ROW><ROW><id>17504313</id><snippet>if range_start &lt;= random_value &lt; range_end</snippet></ROW><ROW><id>17504313</id><snippet>&lt;=</snippet></ROW><ROW><id>17504313</id><snippet>&lt;</snippet></ROW><ROW><id>17504313</id><snippet>random.randrange()</snippet></ROW><ROW><id>17504313</id><snippet>random_value = random.randrange()
if mackerel_start &lt;= random_value &lt; mackerel_end:
    print "Mackerel"
elif cod_start &lt;= random_value &lt; cod_end:
    print "Cod"
    # Etc.
else:
    print "Nothing"
</snippet></ROW><ROW><id>17504313</id><snippet>inventory</snippet></ROW><ROW><id>17504313</id><snippet>action_function()</snippet></ROW><ROW><id>17504313</id><snippet>if</snippet></ROW><ROW><id>17504313</id><snippet>if ... elif ... elif ... else</snippet></ROW><ROW><id>17504313</id><snippet>action_function()</snippet></ROW><ROW><id>17504313</id><snippet>while</snippet></ROW><ROW><id>17504313</id><snippet>def action_function():
    while True:
        action = raw_input("Do you want to 'sell' or 'fish' or 'inventory' or 'quit'?")
        if action == "quit":
            break  # This ends the while loop
        if action == "sell":
            sell_function()
        if action == "fish":
            fish_function()
        if action == "inventory":
            print inventory
</snippet></ROW><ROW><id>17504313</id><snippet>action_function()</snippet></ROW><ROW><id>17504313</id><snippet>Ctrl-C</snippet></ROW><ROW><id>17504415</id><snippet>.py</snippet></ROW><ROW><id>17504415</id><snippet>exercise1&lt;b&gt;.py&lt;/b&gt;</snippet></ROW><ROW><id>17504663</id><snippet>with lock:
    print(something)
</snippet></ROW><ROW><id>17504686</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>17504686</id><snippet>from operator import itemgetter

max(g, key=itemgetter(0))
</snippet></ROW><ROW><id>17504686</id><snippet>max(g, key=lambda k: int(k[0]))
</snippet></ROW><ROW><id>17504686</id><snippet>'4'</snippet></ROW><ROW><id>17504686</id><snippet>'30'</snippet></ROW><ROW><id>17504686</id><snippet>&gt;&gt;&gt; g = (['42', '50'], ['30', '4'])
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; max(g, key=itemgetter(0))
['42', '50']
&gt;&gt;&gt; g = (['20', '10'], ['10', '74'])
&gt;&gt;&gt; max(g, key=itemgetter(0))
['20', '10']
</snippet></ROW><ROW><id>17504686</id><snippet>itemgetter()</snippet></ROW><ROW><id>17504686</id><snippet>lambda</snippet></ROW><ROW><id>17504686</id><snippet>int()</snippet></ROW><ROW><id>17504686</id><snippet>&gt;&gt;&gt; max((['30', '10'], ['4', '10']), key=lambda k: int(k[0]))
['30', '10']
&gt;&gt;&gt; max((['30', '10'], ['4', '10']), key=itemgetter(0))
['4', '10']
</snippet></ROW><ROW><id>17504989</id><snippet>lines</snippet></ROW><ROW><id>17504989</id><snippet>line</snippet></ROW><ROW><id>17504989</id><snippet>lines[3]</snippet></ROW><ROW><id>17504989</id><snippet>lines = file.readlines()
for line in lines:
   line = re.split("\s\s+", line)  #This thing won't affect original list
</snippet></ROW><ROW><id>17504989</id><snippet>lines = file.readlines()
for i,line in enumerate(lines):
   lines[i] = re.split("\s\s+", line)
</snippet></ROW><ROW><id>17504989</id><snippet>import re
with open('abc') as f:
    lines = [re.split("\s\s+", line) for line in f]
    lines.sort(key = lambda x: float(x[3]), reverse = True)    
    print lis
</snippet></ROW><ROW><id>17505027</id><snippet>for entry in inputlist:
    entry['r'] = min(mxr, calculateRange(x, entry['x'], y, entry['y']))
</snippet></ROW><ROW><id>17505027</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; def calculateRange (x1, x2, y1, y2):
...   squareNumber = math.sqrt(math.pow ((x1-x2),2) + math.pow((y1-y2),2))
...   return round(squareNumber, 1)
...
&gt;&gt;&gt; x = 2
&gt;&gt;&gt; y = 3
&gt;&gt;&gt; mxr = 30
&gt;&gt;&gt; inputlist = [
...    {'town':'A', 'x':12, 'y':13},
...    {'town':'B', 'x':100, 'y':43},
...    {'town':'C', 'x':19, 'y':5}
... ]
&gt;&gt;&gt; for entry in inputlist:
...     entry['r'] = min(mxr, calculateRange(x, entry['x'], y, entry['y']))
... 
&gt;&gt;&gt; inputlist
[{'town': 'A', 'x': 12, 'r': 14.1, 'y': 13}, {'town': 'B', 'x': 100, 'r': 30, 'y': 43}, {'town': 'C', 'x': 19, 'r': 17.1, 'y': 5}]
</snippet></ROW><ROW><id>17505108</id><snippet>xpcounter = "UPDATE CharactersDB SET Exp=%s WHERE %s"
cur.execute(xpcounter, (xp, name,))
</snippet></ROW><ROW><id>17505236</id><snippet>c1 = Choice(poll=p.id, choice_text=request.POST['c1'], votes=0)
</snippet></ROW><ROW><id>17505236</id><snippet>c1 = Choice(poll=p, choice_text=request.POST['c1'], votes=0)
</snippet></ROW><ROW><id>17505375</id><snippet>Show</snippet></ROW><ROW><id>17505375</id><snippet>ShowDialog</snippet></ROW><ROW><id>17505375</id><snippet>&lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="AboutWindow" Height="300" Width="300"&gt;
    &lt;Grid&gt;
        &lt;TextBlock Text="AboutWindow" /&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;
</snippet></ROW><ROW><id>17505375</id><snippet>import wpf

from System.Windows import Window

class AboutWindow(Window):
    def __init__(selfAbout):        
        wpf.LoadComponent(selfAbout, 'AboutWindow.xaml')
</snippet></ROW><ROW><id>17505375</id><snippet>&lt;Window 
       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
       Title="IronPythonWPF" Height="300" Width="300"&gt;
    &lt;StackPanel&gt;
        &lt;Menu&gt;
            &lt;MenuItem Header="About" Click="MenuItem_Click" /&gt;
        &lt;/Menu&gt;
        &lt;TextBlock Text="MainWindow" /&gt;
    &lt;/StackPanel&gt;
&lt;/Window&gt; 
</snippet></ROW><ROW><id>17505375</id><snippet>import wpf

from System.Windows import Application, Window
from AboutWindow import *

class MyWindow(Window):
    def __init__(self):
        wpf.LoadComponent(self, 'IronPythonWPF.xaml')

    def MenuItem_Click(self, sender, e):   
        form = AboutWindow()
        form.Show()        

if __name__ == '__main__':
    Application().Run(MyWindow())
</snippet></ROW><ROW><id>17505387</id><snippet>.execute()</snippet></ROW><ROW><id>17505387</id><snippet>c.execute("insert into Raw_JSONs values(NULL,DATETIME('now'),?)", (y,))
</snippet></ROW><ROW><id>17505387</id><snippet>.execute()</snippet></ROW><ROW><id>17505387</id><snippet>db.commit()
</snippet></ROW><ROW><id>17505387</id><snippet>with db:
    # inserts executed here will automatically commit if no exceptions are raised.
</snippet></ROW><ROW><id>17505775</id><snippet>data[bold_time]</snippet></ROW><ROW><id>17505775</id><snippet>    if td.find('strong'):
        bold_time = cur_time
        data[bold_time] = ????? # whatever it should be
    cur_time += datetime.timedelta(hours=1)
</snippet></ROW><ROW><id>17505775</id><snippet>NameError</snippet></ROW><ROW><id>17505775</id><snippet>KeyError</snippet></ROW><ROW><id>17505775</id><snippet>strong</snippet></ROW><ROW><id>17505858</id><snippet>~</snippet></ROW><ROW><id>17505858</id><snippet>cd('/home/vagrant/foo')</snippet></ROW><ROW><id>17505858</id><snippet>def func():
    with cd("/home/vagrant/foo"):
        stuff()
        with cd("bar"): # cd /home/vagrant/foo/bar
            more_stuff()
</snippet></ROW><ROW><id>17505858</id><snippet>cd('bar')</snippet></ROW><ROW><id>17505858</id><snippet>cd</snippet></ROW><ROW><id>17505858</id><snippet>fab</snippet></ROW><ROW><id>17506054</id><snippet>Item</snippet></ROW><ROW><id>17506054</id><snippet>parse</snippet></ROW><ROW><id>17506054</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from Belray_oil.items import BelrayOilItem 


class BelraySpider(BaseSpider):
    name = "Belray_oil"
    allowed_domains = ["mxdirtrider.com"]
    start_urls = [
        "http://www.mxdirtrider.com/h-products/bel-ray/2011-02/pr-bel-ray-accessories-lubricant-oil-2-stroke-2t-mineral-engine.htm?ref=search"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        item = BelrayOilItem()
        item['name'] = hxs.select("//div[@id='product-title']/h1/span/text()").extract()
        item['MSRP'] = hxs.select("//div[@id='price']/span[1]/text()").extract()
        item['Sale'] = hxs.select("//div[@id='price']/span[2]/strong/text()").extract()
        return item
</snippet></ROW><ROW><id>17506054</id><snippet>items.csv</snippet></ROW><ROW><id>17506054</id><snippet>name,msrp,sale
Bel-Ray 2T Mineral Engine 2-Stroke  ,MSRP $9.75,$8.13
</snippet></ROW><ROW><id>17506107</id><snippet>cur.execute</snippet></ROW><ROW><id>17506107</id><snippet>logincheck = cur.execute(loadname, login)
</snippet></ROW><ROW><id>17506107</id><snippet>MySQLdb</snippet></ROW><ROW><id>17506107</id><snippet>0L</snippet></ROW><ROW><id>17506107</id><snippet>cur.execute(loadname, login)
logincheck = cur.fetchone()
</snippet></ROW><ROW><id>17506107</id><snippet>logincheck</snippet></ROW><ROW><id>17506107</id><snippet>None</snippet></ROW><ROW><id>17506107</id><snippet>login</snippet></ROW><ROW><id>17506107</id><snippet>ID</snippet></ROW><ROW><id>17506107</id><snippet>CharactersDB</snippet></ROW><ROW><id>17506107</id><snippet>logincheck</snippet></ROW><ROW><id>17506107</id><snippet>(login, )</snippet></ROW><ROW><id>17506107</id><snippet>login</snippet></ROW><ROW><id>17506107</id><snippet>login</snippet></ROW><ROW><id>17506107</id><snippet>logincheck</snippet></ROW><ROW><id>17506107</id><snippet>if-statement</snippet></ROW><ROW><id>17506107</id><snippet>if logincheck is None:
    print("Sorry, could not find you in the database\nOr it just isn't working")
else:
    print("pass\nSuccessfully loaded {} from the database".format(login))
</snippet></ROW><ROW><id>17506133</id><snippet>brew tap homebrew/science
brew install opencv
</snippet></ROW><ROW><id>17506133</id><snippet>open ~/.bash_profile
</snippet></ROW><ROW><id>17506133</id><snippet>export PYTHONPATH=/usr/local/Cellar/opencv/2.4.5/lib/python2.7/site-packages:$PYTHONPATH
</snippet></ROW><ROW><id>17506133</id><snippet>source ~/.bash_profile
</snippet></ROW><ROW><id>17506182</id><snippet>astype</snippet></ROW><ROW><id>17506182</id><snippet>y.astype(int)</snippet></ROW><ROW><id>17506182</id><snippet>&gt;&gt;&gt; x
array([ True, False,  True], dtype=bool)
&gt;&gt;&gt; x + [1, 2, 3]
array([2, 2, 4])
</snippet></ROW><ROW><id>17506255</id><snippet>set</snippet></ROW><ROW><id>17506307</id><snippet>self.printit(**somedict)</snippet></ROW><ROW><id>17506307</id><snippet>printit</snippet></ROW><ROW><id>17506307</id><snippet>self</snippet></ROW><ROW><id>17506307</id><snippet>def printit(distances, labels):
</snippet></ROW><ROW><id>17506307</id><snippet>distances</snippet></ROW><ROW><id>17506307</id><snippet>self</snippet></ROW><ROW><id>17506307</id><snippet>somedict</snippet></ROW><ROW><id>17506307</id><snippet>distances</snippet></ROW><ROW><id>17506307</id><snippet>distances</snippet></ROW><ROW><id>17506307</id><snippet>TypeError</snippet></ROW><ROW><id>17506307</id><snippet>def printit(distances,lables):  
</snippet></ROW><ROW><id>17506307</id><snippet>lables</snippet></ROW><ROW><id>17506307</id><snippet>labels</snippet></ROW><ROW><id>17506307</id><snippet>lables</snippet></ROW><ROW><id>17506307</id><snippet>labels</snippet></ROW><ROW><id>17506307</id><snippet>self</snippet></ROW><ROW><id>17506307</id><snippet>printit</snippet></ROW><ROW><id>17506307</id><snippet>def printit(self, distances, labels): 
</snippet></ROW><ROW><id>17506307</id><snippet>self</snippet></ROW><ROW><id>17506307</id><snippet>self.printit(...)</snippet></ROW><ROW><id>17506307</id><snippet>printit(self, ...)</snippet></ROW><ROW><id>17506307</id><snippet>import numpy as np
class Foo(object):
    def printit(self, distances, labels): 
            print distances
            print labels

somedict = {'distances': np.array([ 870.99793539]), 'labels': np.array([2])}
self = Foo()
self.printit(**somedict)
</snippet></ROW><ROW><id>17506307</id><snippet>[ 870.99793539]
[2]
</snippet></ROW><ROW><id>17506358</id><snippet>HOST</snippet></ROW><ROW><id>17506358</id><snippet>PORT</snippet></ROW><ROW><id>17506429</id><snippet>import BeautifulSoup
import re
import urllib

data = urllib.urlopen('http://listadecasamento.fastshop.com.br/ListaCasamento/ListaCasamentoBusca.aspx?Data=2013-06-07').read()
soup = BeautifulSoup.BeautifulSoup(data)
element = soup.find('span', attrs={'class': re.compile(r".*\btxt_resultad_busca_casamento\b.*")})
print element.text
</snippet></ROW><ROW><id>17506429</id><snippet>span</snippet></ROW><ROW><id>17506429</id><snippet>txt_resultad_busca_casamento</snippet></ROW><ROW><id>17506429</id><snippet>.text</snippet></ROW><ROW><id>17506429</id><snippet>element = soup.find('div', attrs={'id': 'ctl00_body_uppBusca'}).find('span')
</snippet></ROW><ROW><id>17506471</id><snippet>SQLAlchemy.create_all()</snippet></ROW><ROW><id>17506471</id><snippet>from yourapplication import db
db.create_all()
</snippet></ROW><ROW><id>17506586</id><snippet>os.path.relpath()</snippet></ROW><ROW><id>17506586</id><snippet>&gt;&gt;&gt; os.path.join(os.path.relpath(os.path.dirname('foo/bar/bar_file.txt'),
        os.path.dirname('foo/foo_file.txt')),
        os.path.basename('foo/bar/bar_file.txt'))
'bar/bar_file.txt'
</snippet></ROW><ROW><id>17506617</id><snippet>strings = raw_input("type something")
while(True):
    MyString = ""
    if strings == "stop": break
    for string in strings.split():
        for char in string:
            if(char.isalnum()): MyString += char
        MyString += " "
    print MyString
    strings = raw_input("continue : ")
</snippet></ROW><ROW><id>17506617</id><snippet>$ python Test.py
type somethingWelcome to$%^ Python
Welcome to Python 
continue : I love numbers 1234 but not !@#$
I love numbers 1234 but not  
continue : stop
</snippet></ROW><ROW><id>17506617</id><snippet>strings = input("type something : ")
while(True):
    MyString = []
    if strings == "stop": break
    for string in strings.split():
        for char in string:
            if(char.isalnum()): MyString.append(char)
        MyString.append(" ")
    print (''.join(MyString))
    strings = input("continue : ")
</snippet></ROW><ROW><id>17506617</id><snippet>$ python3 Test.py
type something : abcd
abcd 
continue : I love Python 123
I love Python 123 
continue : I hate !@#
I hate  
continue : stop
</snippet></ROW><ROW><id>17506974</id><snippet>count +=1</snippet></ROW><ROW><id>17506974</id><snippet>count</snippet></ROW><ROW><id>17506974</id><snippet>if count == 3:</snippet></ROW><ROW><id>17506974</id><snippet>global</snippet></ROW><ROW><id>17506974</id><snippet>def three_upper(s): #check for 3 upper letter
    global count
    for i in s:
</snippet></ROW><ROW><id>17507006</id><snippet>i = 0</snippet></ROW><ROW><id>17507006</id><snippet>i</snippet></ROW><ROW><id>17507006</id><snippet>N</snippet></ROW><ROW><id>17507006</id><snippet>print hello
i = i + 1; // i = 1
</snippet></ROW><ROW><id>17507006</id><snippet>i = 1;</snippet></ROW><ROW><id>17507006</id><snippet>` is less than</snippet></ROW><ROW><id>17507006</id><snippet>print hello
i = i + 1; // i = 2
</snippet></ROW><ROW><id>17507006</id><snippet>i = 2;</snippet></ROW><ROW><id>17507006</id><snippet>i</snippet></ROW><ROW><id>17507006</id><snippet>N (3)</snippet></ROW><ROW><id>17507006</id><snippet>print hello
i = i + 1; // i = 3
</snippet></ROW><ROW><id>17507006</id><snippet>i = 3;</snippet></ROW><ROW><id>17507006</id><snippet>i</snippet></ROW><ROW><id>17507006</id><snippet>N (3)</snippet></ROW><ROW><id>17507189</id><snippet>shell script</snippet></ROW><ROW><id>17507189</id><snippet>osx</snippet></ROW><ROW><id>17507189</id><snippet>python</snippet></ROW><ROW><id>17507189</id><snippet>python.command</snippet></ROW><ROW><id>17507189</id><snippet>#!/bin/bash</snippet></ROW><ROW><id>17507189</id><snippet>python</snippet></ROW><ROW><id>17507189</id><snippet>IDLE Standalone App</snippet></ROW><ROW><id>17507189</id><snippet>#!/bin/bash</snippet></ROW><ROW><id>17507189</id><snippet>open -a /Applications/Python\ 2.7/IDLE.app</snippet></ROW><ROW><id>17507297</id><snippet>amount_of_raise = amount_of_raise * 0.01
years = years - 1
</snippet></ROW><ROW><id>17507297</id><snippet>x = x * y</snippet></ROW><ROW><id>17507297</id><snippet>x *= y</snippet></ROW><ROW><id>17507297</id><snippet>-</snippet></ROW><ROW><id>17507297</id><snippet>amount_of_raise *= 0.01
years -= 1
</snippet></ROW><ROW><id>17507297</id><snippet>while years &gt; 1:
    years = years - 1
</snippet></ROW><ROW><id>17507297</id><snippet>range</snippet></ROW><ROW><id>17507297</id><snippet>for year in range(1, years + 1):
    print('Looks like you will be making', new_salary,' in ', years,'years.')
</snippet></ROW><ROW><id>17507297</id><snippet>new_salary = current_salary + (current_salary * amount_of_raise)
current_salary = new_salary
</snippet></ROW><ROW><id>17507297</id><snippet>current_salary += current_salary * amount_of_raise
</snippet></ROW><ROW><id>17507297</id><snippet>current_salary *= 1 + amount_of_raise
</snippet></ROW><ROW><id>17507369</id><snippet>import numpy as np
def NN(A, start):
    """Nearest neighbor algorithm.
    A is an NxN array indicating distance between N locations
    start is the index of the starting location
    Returns the path and cost of the found solution
    """
    path = [start]
    cost = 0
    N = A.shape[0]
    mask = np.ones(N, dtype=bool)  # boolean values indicating which 
                                   # locations have not been visited
    mask[start] = False

    for i in range(N-1):
        last = path[-1]
        next_ind = np.argmin(A[last][mask]) # find minimum of remaining locations
        next_loc = np.arange(N)[mask][next_ind] # convert to original location
        path.append(next_loc)
        mask[next_loc] = False
        cost += A[last, next_loc]

    return path, cost
</snippet></ROW><ROW><id>17507369</id><snippet># Expected order is 0,2,3,1,4
A = np.array([
    [0, 2, 1, 2, 2],
    [2, 0, 2, 1, 1],
    [1, 2, 0, 1, 2],
    [2, 1, 1, 0, 2],
    [2, 1, 2, 2, 0]])
print NN(A,0)
</snippet></ROW><ROW><id>17507397</id><snippet>*</snippet></ROW><ROW><id>17507397</id><snippet>class TimerTest:
    def __init__(self, interval, autoreset, fun, *args):
        # ...
        self.my_function = fun
        self.my_args = args
        # ...

    def run_timer(self):
        # ...
        def on_timed_event(s, e):
            # ...
            self.my_function(*self.my_args)
            # ...
</snippet></ROW><ROW><id>17507397</id><snippet>&gt;&gt;&gt; t1 = TimerTest(1000, True, fun1, 10, 20)
&gt;&gt;&gt; t2 = TimerTest(1000, True, fun2)
</snippet></ROW><ROW><id>17507397</id><snippet>+=</snippet></ROW><ROW><id>17507397</id><snippet>timer = Timer()

def on_timed_event(s, e):
    print "Hello form my event handler"

timer.Elapsed += on_timed_event
timer.Elapsed += on_timed_event

timer.Start()
</snippet></ROW><ROW><id>17507397</id><snippet>"Hello form my event handler"</snippet></ROW><ROW><id>17507397</id><snippet>__init__</snippet></ROW><ROW><id>17507397</id><snippet>run_timer</snippet></ROW><ROW><id>17507397</id><snippet>def run_timer(self):
     self.Timer.Start()
</snippet></ROW><ROW><id>17507397</id><snippet>def set_interval(self, interval):
     self.Timer.Interval = interval
</snippet></ROW><ROW><id>17507397</id><snippet>TimerCallback</snippet></ROW><ROW><id>17507397</id><snippet>Timer</snippet></ROW><ROW><id>17507397</id><snippet>public Timer(
    TimerCallback callback
)
</snippet></ROW><ROW><id>17507397</id><snippet>void</snippet></ROW><ROW><id>17507397</id><snippet>Object</snippet></ROW><ROW><id>17507397</id><snippet>public delegate void TimerCallback(
    Object state
)
</snippet></ROW><ROW><id>17507397</id><snippet>*</snippet></ROW><ROW><id>17507397</id><snippet>def foo(a, b, *args):
    print a
    print b
    print args

&gt;&gt;&gt; foo(1, 2, 3, 4, 5)
1
2
(3, 4, 5)

&gt;&gt;&gt; args = (1, 2, 3)
&gt;&gt;&gt; foo(1, 2, *args)
1
2
(1, 2, 3)
</snippet></ROW><ROW><id>17507397</id><snippet>TimerCallback</snippet></ROW><ROW><id>17507397</id><snippet>def my_func(state, a, b):
    pass
</snippet></ROW><ROW><id>17507397</id><snippet>t1 = Timer(lambda state: my_func(state, 1, 2))
</snippet></ROW><ROW><id>17507397</id><snippet>def time_proc(state):
     my_func(state, 1, 2)

t2 = Timer(time_proc)
</snippet></ROW><ROW><id>17507463</id><snippet>{{ request.user.userreferralprofile.y }}
</snippet></ROW><ROW><id>17507463</id><snippet>related_name</snippet></ROW><ROW><id>17507463</id><snippet>class UserReferralProfile(models.Model):
    x = models.OneToOneField(User, related_name='referal')
    y = models.CharField()
</snippet></ROW><ROW><id>17507463</id><snippet>{{ request.user.referal.y }}
</snippet></ROW><ROW><id>17507550</id><snippet>1.0</snippet></ROW><ROW><id>17507550</id><snippet>1.0000000000000002</snippet></ROW><ROW><id>17507550</id><snippet>10**1.0000000000000002</snippet></ROW><ROW><id>17507550</id><snippet>10.000000000000005</snippet></ROW><ROW><id>17507550</id><snippet>10.0</snippet></ROW><ROW><id>17507550</id><snippet>10.000000000000005</snippet></ROW><ROW><id>17507550</id><snippet>10.000000000000002</snippet></ROW><ROW><id>17507550</id><snippet>10.000000000000004</snippet></ROW><ROW><id>17507550</id><snippet>Decimal</snippet></ROW><ROW><id>17507550</id><snippet>&gt;&gt;&gt; float(10 ** Decimal('1'))
10.0
&gt;&gt;&gt; float(10 ** Decimal('1.0000000000000001'))
10.000000000000002
&gt;&gt;&gt; float(10 ** Decimal('1.00000000000000015'))
10.000000000000004
&gt;&gt;&gt; float(10 ** Decimal('1.0000000000000002'))
10.000000000000005
</snippet></ROW><ROW><id>17507550</id><snippet>arbitrary</snippet></ROW><ROW><id>17507550</id><snippet>Decimal</snippet></ROW><ROW><id>17507550</id><snippet>import sys, random
from decimal import Decimal

def _random_decimal(minval, maxval, added_prec):
    # generate a Decimal in the range [minval, maxval) with the
    # precision of additional ADDED_PREC binary digits
    rangelen = maxval - minval
    denom = rangelen &lt;&lt; added_prec
    return minval + Decimal(rangelen) * random.randrange(denom) / denom

def arbitrary():
    min_exp = sys.float_info.min_exp - sys.float_info.mant_dig
    max_exp = sys.float_info.max_exp
    return float(2 ** _random_decimal(min_exp, max_exp, 64))
</snippet></ROW><ROW><id>17507562</id><snippet>python setup.py sdist upload</snippet></ROW><ROW><id>17507583</id><snippet>generator.send</snippet></ROW><ROW><id>17507583</id><snippet>import sublime

def prompt_sequence(g):
    def progress(result):
        try:
            progress.caption, progress.initial_text = g.send(result)
            sublime.active_window().show_input_panel(
                progress.caption,
                progress.initial_text,
                progress, None, None
            )
        except StopIteration:
            pass

    progress(None)

def foo():
    first_answer = yield ('First question', '')
    second_answer = yield ('Second question', '')
    third_answer = yield ('Thirdquestion', '')

    sublime.message_dialog('Your answers: ' + answers)

prompt_sequence(foo())
</snippet></ROW><ROW><id>17507583</id><snippet>def self_referencing(gen_func):
    @functools.wraps(gen_func)
    def wrapped(*args, **kwargs):
        g = gen_func(lambda: g, *args, **kwargs)
        return g
    return wrapped



class SampleCommand(sublime_plugin.TextCommand):
    @self_referencing
    def get_things(gen_self, self):
        sublime.active_window().show_input_panel(
            'First question', '',
            gen_self().send, None, None
        )
        result_a = yield
        sublime.active_window().show_input_panel(
            'Second question', '',
            gen_self().send, None, None
        )
        result_b = yield
        sublime.active_window().show_input_panel(
            'Third question', '',
            gen_self().send, None, None
        )
        result_c = yield
</snippet></ROW><ROW><id>17507614</id><snippet>cur.execute</snippet></ROW><ROW><id>17507614</id><snippet>cur.fetchone()</snippet></ROW><ROW><id>17507614</id><snippet>xp</snippet></ROW><ROW><id>17507614</id><snippet>gainxp</snippet></ROW><ROW><id>17507857</id><snippet>itertools.permutations()</snippet></ROW><ROW><id>17507857</id><snippet>from itertools import permutations

if any(tuple(perm) in yourdictionary for perm in permutations(yourlist)):
    # match found
</snippet></ROW><ROW><id>17507857</id><snippet>frozenset()</snippet></ROW><ROW><id>17507857</id><snippet>if frozenset(yourlist) in yourdictionary:
    # match found
</snippet></ROW><ROW><id>17507857</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; yourdictionary = {(1,3,2):'text',(3,1,2):'text'}
&gt;&gt;&gt; yourlist = [1, 2, 3]
&gt;&gt;&gt; print any(tuple(perm) in yourdictionary for perm in permutations(yourlist))
True
&gt;&gt;&gt; yourdictionary = {frozenset([1, 2, 3]): 'text', frozenset([4, 5, 6]): 'othertext'}
&gt;&gt;&gt; frozenset(yourlist) in yourdictionary
True
&gt;&gt;&gt; frozenset([2, 3]) in yourdictionary
False
</snippet></ROW><ROW><id>17507898</id><snippet>strs = "Johnny.Appleseed!is:a*good&amp;farmer"
lis = []
for c in strs:
    if c.isalnum() or c.isspace():
        lis.append(c)
    else:
        lis.append(' ')

new_strs = "".join(lis)
print new_strs           #print 'Johnny Appleseed is a good farmer'
new_strs.split()         #prints ['Johnny', 'Appleseed', 'is', 'a', 'good', 'farmer']
</snippet></ROW><ROW><id>17507898</id><snippet>regex</snippet></ROW><ROW><id>17507898</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from string import punctuation
&gt;&gt;&gt; strs = "Johnny.Appleseed!is:a*good&amp;farmer"
&gt;&gt;&gt; r = re.compile(r'[{}]'.format(punctuation))
&gt;&gt;&gt; new_strs = r.sub(' ',strs)
&gt;&gt;&gt; len(new_strs.split())
6
#using `re.split`:
&gt;&gt;&gt; strs = "Johnny.Appleseed!is:a*good&amp;farmer"
&gt;&gt;&gt; re.split(r'[^0-9A-Za-z]+',strs)
['Johnny', 'Appleseed', 'is', 'a', 'good', 'farmer']
</snippet></ROW><ROW><id>17507987</id><snippet>import sys

class MyForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.ui = Ui_Form()
        self.ui.setupUi(self)
    def execute_event(self):
        pass
    def execute_all_event(self):
        pass
    def reload_event(self):
        pass

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = MyForm()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>17508078</id><snippet>enumerate</snippet></ROW><ROW><id>17508078</id><snippet>for index, degrees in enumerate(weather):
    if degrees &gt; 25:
        weather[index] = 'hot'
    else:
        weather[index] = 'cold'
</snippet></ROW><ROW><id>17508078</id><snippet>temp = temp + [whatever]
</snippet></ROW><ROW><id>17508078</id><snippet>temp</snippet></ROW><ROW><id>17508078</id><snippet>temp += [whatever]
</snippet></ROW><ROW><id>17508078</id><snippet>temp.append(whatever)
</snippet></ROW><ROW><id>17508078</id><snippet>temp</snippet></ROW><ROW><id>17508118</id><snippet>Venues = relation('Venue', primaryjoin='EventType.id==Event.event_type_id', secondary=Event, secondaryjoin='Event.venue_id==Venue.id')
</snippet></ROW><ROW><id>17508118</id><snippet>Venues = relation('Venue', primaryjoin='EventType.id==Event.event_type_id', secondary=Event.__table__, secondaryjoin='Event.venue_id==Venue.id')
</snippet></ROW><ROW><id>17508175</id><snippet>&gt;&gt;&gt; m = re.match("Duplicate entry '(?P&lt;value&gt;.*)' for key '(?P&lt;key&gt;.*)'", "Duplicate entry 'blah@gmail.com' for key 'email'")
&gt;&gt;&gt; m.group('value')
'blah@gmail.com'
&gt;&gt;&gt; m.group('key')
'email'
</snippet></ROW><ROW><id>17508441</id><snippet>None</snippet></ROW><ROW><id>17508441</id><snippet>if word in text:</snippet></ROW><ROW><id>17508441</id><snippet>censor(new_word,word)</snippet></ROW><ROW><id>17508631</id><snippet>myDict = {}
for (num, strn) in enumerate(dlist):
    for w in strn.split():
        if w not in myDict:
            myDict[w] = {num}
        else:
            myDict[w].add(num)
</snippet></ROW><ROW><id>17508710</id><snippet>ajax</snippet></ROW><ROW><id>17508710</id><snippet>$(function(){
    $('#subscribe-email-form').on('submit', function(e){
        e.preventDefault();
        $.ajax({
            url: url, //this is the submit URL
            type: 'GET', //or POST
            data: $('#subscribe-email-form').serialize(),
            success: function(data){
                 alert('successfully submitted')
            }
        });
    });
});
</snippet></ROW><ROW><id>17508710</id><snippet>&lt;form&gt;
    &lt;div class="modal-body"&gt;
        &lt;input type="email" placeholder="email"/&gt;
        &lt;p&gt;This service will notify you by email should any issue arise that affects your plivo service.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="modal-footer"&gt;
        &lt;input type="submit" value="SUBMIT" class="btn"/&gt;
    &lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17508710</id><snippet>{{form}}</snippet></ROW><ROW><id>17508761</id><snippet>import re
def open_delimited(filename, delimiter, chunksize=1024, *args, **kwargs):
    with open(filename, *args, **kwargs) as infile:
        remainder = ''
        for chunk in iter(lambda: infile.read(chunksize), ''):
            pieces = re.split(delimiter, remainder+chunk)
            for piece in pieces[:-1]:
                yield piece
            remainder = pieces[-1]
        if remainder:
            yield remainder

for line in open_delimited("log.txt", delimiter='/'):
    print(repr(line))
</snippet></ROW><ROW><id>17508825</id><snippet># s is a socket.socket object
s.shutdown(socket.SHUT_RDWR)
s.close()
</snippet></ROW><ROW><id>17508825</id><snippet>flags</snippet></ROW><ROW><id>17508825</id><snippet>send</snippet></ROW><ROW><id>17508825</id><snippet>MSG_OOB</snippet></ROW><ROW><id>17508825</id><snippet>MSG_DONTROUTE</snippet></ROW><ROW><id>17508825</id><snippet>man send</snippet></ROW><ROW><id>17508825</id><snippet>s.send(data, flags=socket.MSG_OOB | socket.MSG_DONTROUTE)
</snippet></ROW><ROW><id>17508876</id><snippet>import math
def perfect_sq(n):
    return n == int(math.sqrt(n)) * int(math.sqrt(n))
</snippet></ROW><ROW><id>17508876</id><snippet>import math
def perfect_sq(n):
    return n == int(math.sqrt(n)) ** 2
</snippet></ROW><ROW><id>17508900</id><snippet>sock.recv</snippet></ROW><ROW><id>17508900</id><snippet>sock.recv</snippet></ROW><ROW><id>17508900</id><snippet>''.join()</snippet></ROW><ROW><id>17508900</id><snippet>b''.join()</snippet></ROW><ROW><id>17508900</id><snippet>StringIO</snippet></ROW><ROW><id>17508900</id><snippet>cStringIO</snippet></ROW><ROW><id>17508900</id><snippet>io.BytesIO</snippet></ROW><ROW><id>17508900</id><snippet>sock.recv_into</snippet></ROW><ROW><id>17508900</id><snippet>StringIO</snippet></ROW><ROW><id>17508900</id><snippet>bytesIO</snippet></ROW><ROW><id>17508968</id><snippet>def download_image(url):
    # code to get image goes here
    # save image to disk
    # get file size or check if it exists
    if file_ok:
        return True
    else:
        return False
</snippet></ROW><ROW><id>17508968</id><snippet>def main():
    url = 'http://www.reddit.com/images/logo.png'
    if download_image(url):
        print('script successful!')
    else:
        print('download failed...')
</snippet></ROW><ROW><id>17509045</id><snippet>eq = 'x^10+6x^4-5x^2+x-11'

patt = r'(?P&lt;sign&gt;[-+]?)(?P&lt;coeff&gt;\d*)(?P&lt;x&gt;x?)(?:\^(?P&lt;exp&gt;\d+))?'
rgx = re.compile(patt)

eq_parts = [m.groupdict() for m in rgx.finditer(eq)][0:-1]

for eqp in eq_parts:
    print eqp
</snippet></ROW><ROW><id>17509045</id><snippet>{'x': 'x', 'coeff': '', 'exp': '10', 'sign': ''}
{'x': 'x', 'coeff': '6', 'exp': '4', 'sign': '+'}
{'x': 'x', 'coeff': '5', 'exp': '2', 'sign': '-'}
{'x': 'x', 'coeff': '', 'exp': None, 'sign': '+'}
{'x': '', 'coeff': '11', 'exp': None, 'sign': '-'}
</snippet></ROW><ROW><id>17509095</id><snippet>Traceback (most recent call last):
    File "/usr/lib/python2.7/dist-packages/gevent/pywsgi.py", line 438, in handle_one_response
        self.run_application()
</snippet></ROW><ROW><id>17509095</id><snippet>yield</snippet></ROW><ROW><id>17509095</id><snippet>tornado</snippet></ROW><ROW><id>17509111</id><snippet>eid, iid = -1,-1
search_for='Up_MemRd_Unaligned_mburst_ge_0x8'
with open("input") as f:
    for line in f:
        line = line.rstrip()
        if 'Event ID' in line: eid = line.split(':')[1].strip()
        elif 'InterView ID' in line and name:
            iid = line.split(':')[1].strip()
            print "1.", eid
            print "2.", iid
        elif 'Event Name' in line:
            name = line.split(':')[1].strip(" *")
            if name != search_for: name = ""
</snippet></ROW><ROW><id>17509302</id><snippet>drawing = np.zeros([500, 500, 3])
</snippet></ROW><ROW><id>17509302</id><snippet>drawing = np.zeros([500, 500, 3], np.uint8)
</snippet></ROW><ROW><id>17509419</id><snippet>t = ['is', 'are', 'was', 'the', 'he', 'she', 'fox', 'jumped']
s = "He was walking down the road."
new = []
for word in phrase.split(): 
    if word.lower() in filters:
            new.append(word)
    else:
            new.extend(word)
    new.append(' ')

print new[:-1] # We slice the last element because it is ' '.
</snippet></ROW><ROW><id>17509419</id><snippet>['He', ' ', 'was', ' ', 'w', 'a', 'l', 'k', 'i', 'n', 'g', ' ', 'd', 'o', 'w', 'n', ' ', 'the', ' ', 'r', 'o', 'a', 'd', '.']
</snippet></ROW><ROW><id>17509419</id><snippet>def filter_down(phrase, filters):
    new = []
    for word in phrase.split(): 
        if word.lower() in filters:
                new.append(word)
        else:
                new.extend(list(word)) # list(word) is ['w', 'a', 'l', 'k', 'i', 'n', 'g']
        new.append(' ')
    return new
</snippet></ROW><ROW><id>17509879</id><snippet>q</snippet></ROW><ROW><id>17509879</id><snippet>requests</snippet></ROW><ROW><id>17509879</id><snippet>params</snippet></ROW><ROW><id>17509879</id><snippet>data</snippet></ROW><ROW><id>17509879</id><snippet>r = requests.get('http://stackoverflow.com', params=data)
</snippet></ROW><ROW><id>17509879</id><snippet>POST</snippet></ROW><ROW><id>17509879</id><snippet>r = requests.post('http://stackoverflow.com/search', data=data)
</snippet></ROW><ROW><id>17509879</id><snippet>GET</snippet></ROW><ROW><id>17509938</id><snippet>self.__class__</snippet></ROW><ROW><id>17509938</id><snippet>super</snippet></ROW><ROW><id>17509938</id><snippet>class A(object):
   def foo(self):
      pass

class B(A):
   def foo(self):
      super(self.__class__, self)

class C(B):
   def foo(self):
      super(self.__class__, self)

c = C()
</snippet></ROW><ROW><id>17509938</id><snippet>c.__class__</snippet></ROW><ROW><id>17509938</id><snippet>C</snippet></ROW><ROW><id>17509938</id><snippet>c.foo()</snippet></ROW><ROW><id>17509938</id><snippet>super(self.__class__, self)</snippet></ROW><ROW><id>17509938</id><snippet>super(C, self)</snippet></ROW><ROW><id>17509938</id><snippet>B.foo</snippet></ROW><ROW><id>17509938</id><snippet>super(self.__class__, self)</snippet></ROW><ROW><id>17509938</id><snippet>super(C, self)</snippet></ROW><ROW><id>17509938</id><snippet>self</snippet></ROW><ROW><id>17509938</id><snippet>self.__class__</snippet></ROW><ROW><id>17509938</id><snippet>C</snippet></ROW><ROW><id>17509938</id><snippet>B.foo</snippet></ROW><ROW><id>17509938</id><snippet>super(classThatDefinedTheImplementationThatIsCurrentlyExecuting, self)</snippet></ROW><ROW><id>17509938</id><snippet>super()</snippet></ROW><ROW><id>17509938</id><snippet>super().foo()</snippet></ROW><ROW><id>17509938</id><snippet>super(self)</snippet></ROW><ROW><id>17509938</id><snippet>super()</snippet></ROW><ROW><id>17509938</id><snippet>super(type)</snippet></ROW><ROW><id>17509938</id><snippet>super(type1, type2)</snippet></ROW><ROW><id>17510026</id><snippet>requests.get(url)</snippet></ROW><ROW><id>17510026</id><snippet>with open("somefile.jpg","wb") as f:
     f.write(file.content)
</snippet></ROW><ROW><id>17510026</id><snippet>pip</snippet></ROW><ROW><id>17510026</id><snippet>pip install requests</snippet></ROW><ROW><id>17510026</id><snippet>requests</snippet></ROW><ROW><id>17510026</id><snippet>get</snippet></ROW><ROW><id>17510026</id><snippet>post</snippet></ROW><ROW><id>17510260</id><snippet>import weakref

class A(object):
    def __init__(self, parent)
        self.parent = weakref.proxy(parent)
</snippet></ROW><ROW><id>17510291</id><snippet>NULL</snippet></ROW><ROW><id>17510291</id><snippet>NULL</snippet></ROW><ROW><id>17510291</id><snippet>Null</snippet></ROW><ROW><id>17510291</id><snippet>save</snippet></ROW><ROW><id>17510328</id><snippet>self.add_event_handler("changed_status", self.my_callback_function)
</snippet></ROW><ROW><id>17510328</id><snippet>sleekxmpp.ClientXMPP</snippet></ROW><ROW><id>17510328</id><snippet>import sleekxmpp
from ConfigParser import ConfigParser

class StatusWatcher(sleekxmpp.ClientXMPP):
    def __init__(self, jid_to_watch):
        self._jid_to_watch = jid_to_watch
        config = ConfigParser()
        config.read("config.ini")
        jid = config.get("general", "jid")
        resource = config.get("general", "resource")
        password = config.get("general", "password")
        sleekxmpp.ClientXMPP.__init__(self, jid + "/" + resource, password)

        self.add_event_handler("session_start", self.handle_XMPP_connected)
        self.add_event_handler("changed_status", self.handle_changed_status)

    def handle_XMPP_connected(self, event):
        print "connected"
        self.sendPresence(pstatus="I'm just a Bot.")
        self.get_roster()

    def handle_changed_status(self, pres):
        if pres['from'].bare == self._jid_to_watch:
            print pres['status']


xmpp = StatusWatcher("login@gmail.com") # The account to monitor
xmpp.register_plugin('xep_0030')
xmpp.register_plugin('xep_0199')
if xmpp.connect():
    xmpp.process(threaded=False)
</snippet></ROW><ROW><id>17510328</id><snippet>config.ini</snippet></ROW><ROW><id>17510328</id><snippet>[general]
jid=jid@host.org
resource=presence_watcher
password=yourpwd
</snippet></ROW><ROW><id>17510425</id><snippet>./manage.py migrate</snippet></ROW><ROW><id>17510954</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>17510954</id><snippet>QGraphicsView</snippet></ROW><ROW><id>17510954</id><snippet>scene-&gt;addPixmap</snippet></ROW><ROW><id>17510954</id><snippet>QRubberBand</snippet></ROW><ROW><id>17510954</id><snippet>view-&gt;mapToScene</snippet></ROW><ROW><id>17510954</id><snippet>QRubberBand</snippet></ROW><ROW><id>17510954</id><snippet>scene-&gt;addLine</snippet></ROW><ROW><id>17510954</id><snippet>scene-&gt;addEllipse</snippet></ROW><ROW><id>17510954</id><snippet>QGraphicsEllipseItem*</snippet></ROW><ROW><id>17510954</id><snippet>item-&gt;setPos</snippet></ROW><ROW><id>17510954</id><snippet>item-&gt;setFlag(QGraphicsItem::ItemIsSelectable)</snippet></ROW><ROW><id>17510954</id><snippet>view-&gt;dragMode(QGraphicsView::RubberBandDrag)</snippet></ROW><ROW><id>17510954</id><snippet>QRubberBand</snippet></ROW><ROW><id>17510954</id><snippet>QGraphicsScene::selectedItems</snippet></ROW><ROW><id>17510954</id><snippet>item-&gt;pos()</snippet></ROW><ROW><id>17511281</id><snippet>D = {}</snippet></ROW><ROW><id>17511281</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; type(d)
&lt;type 'dict'&gt;
</snippet></ROW><ROW><id>17511281</id><snippet>D =  set()</snippet></ROW><ROW><id>17511281</id><snippet>&gt;&gt;&gt; d = set()
&gt;&gt;&gt; type(d)
&lt;type 'set'&gt;
&gt;&gt;&gt; d.update({1})
&gt;&gt;&gt; d.add(2)
&gt;&gt;&gt; d.update([3,3,3])
&gt;&gt;&gt; d
set([1, 2, 3])
</snippet></ROW><ROW><id>17511482</id><snippet>str.capitalize</snippet></ROW><ROW><id>17511482</id><snippet>&gt;&gt;&gt; "CAN'T".title()
"Can'T"

&gt;&gt;&gt; "CAN'T".capitalize()
"Can't"
</snippet></ROW><ROW><id>17511482</id><snippet>&gt;&gt;&gt; strs = """What i would also like to do is have those exception words not capitalised as 
stated above but also have that any word that already has capitals letters
( For e.g. CHINA, NSW etc. ) that those letters will be retained."""
&gt;&gt;&gt; words = {'a','of','etc.','e.g.'}  #set of words that shouldn't be changed
&gt;&gt;&gt; lis = []
for word in strs.split():
    if word not in words and not word.isupper(): 
        lis.append(word.capitalize())
    else:    
        lis.append(word)
...         
&gt;&gt;&gt; print " ".join(lis)
What I Would Also Like To Do Is Have Those Exception Words Not Capitalised As Stated Above But Also Have That Any Word That Already Has Capitals Letters ( For e.g. CHINA, NSW etc. ) That Those Letters Will Be Retained.
</snippet></ROW><ROW><id>17511542</id><snippet>elif</snippet></ROW><ROW><id>17511542</id><snippet>if</snippet></ROW><ROW><id>17511542</id><snippet>  if (y&lt;h/3): 
     ...

  elif (y&gt;(h*2/3)):  #&lt;-- change if to elif
     ...

  else:  
     ...
</snippet></ROW><ROW><id>17511542</id><snippet>else</snippet></ROW><ROW><id>17511542</id><snippet>y &lt; h/3</snippet></ROW><ROW><id>17511714</id><snippet>to_cstring_array</snippet></ROW><ROW><id>17511714</id><snippet>from libc.stdlib cimport malloc, free
from libc.string cimport strcmp
from cpython.string cimport PyString_AsString

cdef char ** to_cstring_array(list_str):
    cdef char **ret = &lt;char **&gt;malloc(len(list_str) * sizeof(char *))
    for i in xrange(len(list_str)):
        ret[i] = PyString_AsString(list_str[i])
    return ret

def foo(list_str1, list_str2):
    cdef unsigned int i, j
    cdef char **c_arr1 = to_cstring_array(list_str1)
    cdef char **c_arr2 = to_cstring_array(list_str2)

    for i in xrange(len(list_str1)):
        for j in xrange(len(list_str2)):
            if i != j and strcmp(c_arr1[i], c_arr2[j]) == 0:
                print i, j, list_str1[i]
    free(c_arr1)
    free(c_arr2)

foo(['hello', 'python', 'world'], ['python', 'rules'])
</snippet></ROW><ROW><id>17511715</id><snippet>if</snippet></ROW><ROW><id>17511715</id><snippet>if</snippet></ROW><ROW><id>17511715</id><snippet>False</snippet></ROW><ROW><id>17511715</id><snippet>  if (y&lt;h/3):
     #some code
</snippet></ROW><ROW><id>17511715</id><snippet>  if (y&gt;(h*2/3)):
      #some code
  else:
      #some code
</snippet></ROW><ROW><id>17511715</id><snippet>&gt;&gt;&gt; x = 2

if x == 2:
     x += 1      
if x == 3:       #due to the modification done by previous if, this condition
                 #also becomes True, and you modify x again 
     x += 1
else:    
     x+=100
&gt;&gt;&gt; x            
4
</snippet></ROW><ROW><id>17511715</id><snippet>if-elif-else</snippet></ROW><ROW><id>17511715</id><snippet>True</snippet></ROW><ROW><id>17511715</id><snippet>  if (y&lt;h/3):
      #some code
  elif (y&gt;(h*2/3)):
      #some code
  else:
     #some code
</snippet></ROW><ROW><id>17511715</id><snippet>&gt;&gt;&gt; x = 2
if x == 2:
    x += 1
elif x == 3:    
    x += 1
else:    
    x+=100
...     
&gt;&gt;&gt; x             # only the first-if changed the value of x, rest of them
                  # were not checked
3
</snippet></ROW><ROW><id>17511950</id><snippet>.readline()</snippet></ROW><ROW><id>17511950</id><snippet>next()</snippet></ROW><ROW><id>17511954</id><snippet>class GameOfLife(object):
    def __init__(self, initial):
        self.state = initial
    def step(self):
        # TODO: Game of Life implementation goes here
        # Either assign a new value to self.state, or modify it
    def plot_step(self):
        self.step()
        # TODO: Plot here

# TODO: Initialize matplotlib here
initial = [(0,0), (0,1), (0,2)]
game = GameOfLife(initial)
ani = animation.FuncAnimation(fig, game.plot_step)
plt.show()
</snippet></ROW><ROW><id>17511954</id><snippet>def step(state):
    newstate = state[:] # TODO Game of Life implementation goes here
    return newstate
def plot(state):
    # TODO: Plot here
def play_game(state):
    while True:
         yield state
         state = step(state)

initial = [(0,0), (0,1), (0,2)]
game = play_game(initial)
ani = animation.FuncAnimation(fig, lambda: next(game))
plt.show()
</snippet></ROW><ROW><id>17512044</id><snippet>import re

su = '''hello world
xxxx hello world yyyy
&lt;!--
_+]!yuyu*@&amp;^}@?!hello world[@%]^@}$[*a*$&amp;^!@(&amp;bc??,=hello'''

print su

pat = '([a-z]+)(?![a-z])(?&lt;!world)'
print "\nexcluding all the words 'world'\n%s" % pat
print re.findall(pat,su)

pat = '([a-z]+)(?![a-z])(?&lt;!\Ahello world)'
print "\nexcluding the word 'world' of the starting string 'hello world'\n%s" % pat
print re.findall(pat,su)

pat = '([a-z]+)(?![a-z])(?&lt;!hello world)'
print "\nexcluding all the words 'world' of a string 'hello world'\n%s" % pat
print re.findall(pat,su)

print '\n-----------'

pat = '([a-z]+)(?![a-z])(?&lt;!hello)'
print "\nexcluding all the words 'hello'\n%s" % pat
print re.findall(pat,su)

pat = '([a-z]+)(?![a-z])(?&lt;!\Ahello)'
print "\nexcluding the starting word 'hello'\n%s" % pat
print re.findall(pat,su)

pat = '([a-z]+)(?![a-z])(?&lt;!hello(?= world))'
print "\nexcluding all the words 'hello' of a string 'hello world'\n%s" % pat
print re.findall(pat,su)

print '\n-----------'

pat = '([a-z]+)(?![a-z])(?&lt;!hello|world)'
print "\nexcluding all the words 'hello' and 'world'\n%s" % pat
print re.findall(pat,su)

pat = '([a-z]+)(?![a-z])(?&lt;!hello(?= world))(?&lt;!hello world)'
print "\nexcluding all the words of a string 'hello world'\n%s" % pat
print re.findall(pat,su)

pat = '([a-z]+)(?![a-z])(?&lt;!\Ahello(?= world))(?&lt;!\Ahello world)'
print "\nexcluding all the words of the starting string 'hello world'\n%s" % pat
print re.findall(pat,su)
</snippet></ROW><ROW><id>17512044</id><snippet>hello world
xxxx hello world yyyy
&lt;!--
_+]!yuyu*@&amp;^}@?!hello world[@%]^@}$[*a*$&amp;^!@(&amp;bc??,=hello

excluding all the words 'world'
([a-z]+)(?![a-z])(?&lt;!world)
['hello', 'xxxx', 'hello', 'yyyy', 'yuyu', 'hello', 'a', 'bc', 'hello']

excluding the word 'world' of the starting string 'hello world'
([a-z]+)(?![a-z])(?&lt;!\Ahello world)
['hello', 'xxxx', 'hello', 'world', 'yyyy', 'yuyu', 'hello', 'world', 'a', 'bc', 'hello']

excluding all the words 'world' of a string 'hello world'
([a-z]+)(?![a-z])(?&lt;!hello world)
['hello', 'xxxx', 'hello', 'yyyy', 'yuyu', 'hello', 'a', 'bc', 'hello']

-----------

excluding all the words 'hello'
([a-z]+)(?![a-z])(?&lt;!hello)
['world', 'xxxx', 'world', 'yyyy', 'yuyu', 'world', 'a', 'bc']

excluding the starting word 'hello'
([a-z]+)(?![a-z])(?&lt;!\Ahello)
['world', 'xxxx', 'hello', 'world', 'yyyy', 'yuyu', 'hello', 'world', 'a', 'bc', 'hello']

excluding all the words 'hello' of a string 'hello world'
([a-z]+)(?![a-z])(?&lt;!hello(?= world))
['world', 'xxxx', 'world', 'yyyy', 'yuyu', 'world', 'a', 'bc', 'hello']

-----------

excluding all the words 'hello' and 'world'
([a-z]+)(?![a-z])(?&lt;!hello|world)
['xxxx', 'yyyy', 'yuyu', 'a', 'bc']

excluding all the words of a string 'hello world'
([a-z]+)(?![a-z])(?&lt;!hello(?= world))(?&lt;!hello world)
['xxxx', 'yyyy', 'yuyu', 'a', 'bc', 'hello']

excluding all the words of the starting string 'hello world'
([a-z]+)(?![a-z])(?&lt;!\Ahello(?= world))(?&lt;!\Ahello world)
['xxxx', 'hello', 'world', 'yyyy', 'yuyu', 'hello', 'world', 'a', 'bc', 'hello']
</snippet></ROW><ROW><id>17512044</id><snippet>print su

print "\ncatching all the lettered strings after &lt;!--"
print "re.compile('^.+?&lt;!--|([a-z]+)',re.DOTALL)"
rgx = re.compile('^.+?&lt;!--|([a-z]+)',re.DOTALL)
print [x.group(1) for x in rgx.finditer(su) if x.group(1)]

print ("\ncatching all the lettered strings after &lt;!--\n"
       "excluding all the words 'world'")
print "re.compile('^.+?&lt;!--|([a-z]+)(?&lt;!world)',re.DOTALL)"
rgx = re.compile('^.+?&lt;!--|([a-z]+)(?![a-z])(?&lt;!world)',re.DOTALL)
print [x.group(1) for x in rgx.finditer(su) if x.group(1)]

print ("\ncatching all the lettered strings after &lt;!--\n"
       "excluding all the words 'hello'")
print "re.compile('^.+?&lt;!--|([a-z]+)(?&lt;!hello)',re.DOTALL)"
rgx = re.compile('^.+?&lt;!--|([a-z]+)(?![a-z])(?&lt;!hello)',re.DOTALL)
print [x.group(1) for x in rgx.finditer(su) if x.group(1)]

print ("\ncatching all the lettered strings after &lt;!--\n"
       "excluding all the words 'hello' belonging to a string 'hello world'")
print "re.compile('^.+?&lt;!--|([a-z]+)(?&lt;!hello(?= world))',re.DOTALL)"
rgx = re.compile('^.+?&lt;!--|([a-z]+)(?![a-z])(?&lt;!hello(?= world))',re.DOTALL)
print [x.group(1) for x in rgx.finditer(su) if x.group(1)]
</snippet></ROW><ROW><id>17512044</id><snippet>hello world
xxxx hello world yyyy
&lt;!--
_+]!yuyu*@&amp;^}@?!hello world[@%]^@}$[*a*$&amp; &lt;!-- ^!@(&amp;bc??,=hello

catching all the lettered strings after first &lt;!--
re.compile('.+?&lt;!--|([a-z]+)',re.DOTALL)
['yuyu', 'hello', 'world', 'a', 'bc', 'hello']

catching all the lettered strings after first &lt;!--
excluding all the words 'world'
re.compile('.+?&lt;!--|([a-z]+)(?&lt;!world)',re.DOTALL)
['yuyu', 'hello', 'a', 'bc', 'hello']

catching all the lettered strings after first &lt;!--
excluding all the words 'hello'
re.compile('.+?&lt;!--|([a-z]+)(?&lt;!hello)',re.DOTALL)
['yuyu', 'world', 'a', 'bc']

catching all the lettered strings after first &lt;!--
excluding all the words 'hello' belonging to a string 'hello world'
re.compile('.+?&lt;!--|([a-z]+)(?&lt;!hello(?= world))',re.DOTALL)
['yuyu', 'world', 'a', 'bc', 'hello']
</snippet></ROW><ROW><id>17512061</id><snippet>.group()</snippet></ROW><ROW><id>17512061</id><snippet>&gt;&gt;&gt; print(x.group(0))
YP_001405731.1
</snippet></ROW><ROW><id>17512061</id><snippet>print(x)</snippet></ROW><ROW><id>17512061</id><snippet>None</snippet></ROW><ROW><id>17512093</id><snippet>&gt;&gt;&gt; from sklearn.externals import joblib
&gt;&gt;&gt; joblib.dump(clf, 'my_model.pkl', compress=9)
</snippet></ROW><ROW><id>17512093</id><snippet>&gt;&gt;&gt; from sklearn.externals import joblib
&gt;&gt;&gt; model_clone = joblib.load('my_model.pkl')
</snippet></ROW><ROW><id>17512227</id><snippet>avg_length = dict((x, float(STRlen[x])/count[x]) for x in STRlen)
</snippet></ROW><ROW><id>17512460</id><snippet>newButton = Button(newtop, command=lambda top=newtop: top.destroy())
</snippet></ROW><ROW><id>17512460</id><snippet>None</snippet></ROW><ROW><id>17512460</id><snippet>newButton</snippet></ROW><ROW><id>17512460</id><snippet>newbutton = Button(...).pack()</snippet></ROW><ROW><id>17512460</id><snippet>newbutton</snippet></ROW><ROW><id>17512460</id><snippet>pack()</snippet></ROW><ROW><id>17512460</id><snippet>class MyToplevel(Toplevel):
    def __init__(self, parent, filename, *args, **kwargs):
        Toplevel.__init__(self, parent, *args, **kwargs)
        self.filename = filename
        self.savebutton = Button(..., command=self.save)
        ...
    def save(self):
        print "saving...", self.filename
        ...
        self.destroy()
...
openfiles = filedialog.askopenfilenames()
if not openfiles:
    return 
for file in openfiles:
    newtop = MyToplevel(nGui, file, height=100, width=100)
</snippet></ROW><ROW><id>17512569</id><snippet>comment</snippet></ROW><ROW><id>17512569</id><snippet>is_valid</snippet></ROW><ROW><id>17512569</id><snippet>ModelForm</snippet></ROW><ROW><id>17512569</id><snippet>from django import forms
from blog.models import comment

class CommentForm(forms.ModelForm):        
    class Meta:
        model=comment
</snippet></ROW><ROW><id>17512569</id><snippet>CommentForm</snippet></ROW><ROW><id>17512569</id><snippet>comment</snippet></ROW><ROW><id>17512569</id><snippet>ModelForm</snippet></ROW><ROW><id>17512802</id><snippet>try:
    win32api.SetCursorPos((int(x1 + var_x + i*(float(dis_x)/n)),
                           int(y1 + var_y + i*(float(dis_y)/n))))
except:
    print "error in SetCursorPos() with x1", x1, "y1", y1, "var_x", var_x, "var_y", var_y, "dis_x", dis_x, "dis_y", dis_y, "n", n
    raise
</snippet></ROW><ROW><id>17512860</id><snippet>pprint.pprint()</snippet></ROW><ROW><id>17512860</id><snippet>print next((key, dictionary[key] for key in dictionary if 'some_search' in key), None)
</snippet></ROW><ROW><id>17512860</id><snippet>some_search</snippet></ROW><ROW><id>17512928</id><snippet>autoscale()</snippet></ROW><ROW><id>17512928</id><snippet>xticks()</snippet></ROW><ROW><id>17513133</id><snippet>a</snippet></ROW><ROW><id>17513133</id><snippet>b</snippet></ROW><ROW><id>17513133</id><snippet>global</snippet></ROW><ROW><id>17513133</id><snippet>recalculateIntermediateParameters</snippet></ROW><ROW><id>17513133</id><snippet>global recalculateIntermediateParameters</snippet></ROW><ROW><id>17513133</id><snippet>def foo():
    a = 10
</snippet></ROW><ROW><id>17513133</id><snippet>def foo():
    global a
    a = 10
</snippet></ROW><ROW><id>17513133</id><snippet>a</snippet></ROW><ROW><id>17513447</id><snippet>for row in reader[1:]:
</snippet></ROW><ROW><id>17513447</id><snippet>csv.reader()</snippet></ROW><ROW><id>17513447</id><snippet>def read_csv(inputfile):
    reader = csv.reader(inputfile)
    next(reader)
    return list(reader)
</snippet></ROW><ROW><id>17513447</id><snippet>reader</snippet></ROW><ROW><id>17513447</id><snippet>next()</snippet></ROW><ROW><id>17513447</id><snippet>.next()</snippet></ROW><ROW><id>17513447</id><snippet>.__next__()</snippet></ROW><ROW><id>17513447</id><snippet>for row in reader.next()</snippet></ROW><ROW><id>17513447</id><snippet>.next()</snippet></ROW><ROW><id>17513447</id><snippet>csv.reader()</snippet></ROW><ROW><id>17513553</id><snippet>$.ajax({
    url: "RPC2",
    type: 'post',
    dataType: 'json',
    data : JSON.stringify({jsonrpc: "2.0", method: "secret", params: {book: {book_dict}}, "id": 1}),
    success: function( data ) {
        console.info(data);
        $( "#temp" ).html( "&lt;strong&gt;" + data + "&lt;/strong&gt; degrees" );
    }
});
</snippet></ROW><ROW><id>17513573</id><snippet>pixels_array()</snippet></ROW><ROW><id>17513573</id><snippet>image.save()</snippet></ROW><ROW><id>17513573</id><snippet>del alphas</snippet></ROW><ROW><id>17513573</id><snippet>image.save()</snippet></ROW><ROW><id>17513573</id><snippet>del alphas</snippet></ROW><ROW><id>17513662</id><snippet>is_valid</snippet></ROW><ROW><id>17513662</id><snippet>def login(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid(): # &lt;&lt;&lt;&lt; Correct!
            print "coming"
        return render_to_response('html/index.html')
</snippet></ROW><ROW><id>17513743</id><snippet>DecisionId</snippet></ROW><ROW><id>17513743</id><snippet>Choice</snippet></ROW><ROW><id>17513743</id><snippet>Status</snippet></ROW><ROW><id>17513743</id><snippet>Decision</snippet></ROW><ROW><id>17513897</id><snippet>form</snippet></ROW><ROW><id>17513897</id><snippet>invitees</snippet></ROW><ROW><id>17513897</id><snippet>invitees = form.invitees.data</snippet></ROW><ROW><id>17513947</id><snippet>multiprocessing</snippet></ROW><ROW><id>17513947</id><snippet>Pool</snippet></ROW><ROW><id>17513947</id><snippet>import multiprocessing

def calculate(line):
    # ... calculate the hash ...
    return (line, 'calculated_result')

pool = multiprocessing.Pool(multiprocessing.cpu_count())

with open('input.txt') as inputfile:
    result = pool.map(calculate, inputfile)

print(result)
# compare results
</snippet></ROW><ROW><id>17513947</id><snippet>ThreadClass.list_len</snippet></ROW><ROW><id>17513947</id><snippet>import threading
import datetime

lns = []
class ThreadClass(threading.Thread):
    hash_list=0
    list_len= 10000

    def run(self):
        while ThreadClass.list_len&gt;0:
            ThreadClass.list_len=ThreadClass.list_len-1
            ln = ThreadClass.list_len        # copy for later use ...
            lns.append(ln)

threads = []
for i in range(20):
    t = ThreadClass()
    t.start()
    threads.append(t)

for t in threads:
    t.join()

print len(lns), len(set(lns)), min(lns)
</snippet></ROW><ROW><id>17513947</id><snippet>13473 9999 -1
10000 10000 0
10000 10000 0
12778 10002 -2
10140 10000 0
10000 10000 0
15579 10000 -1
10866 9996 0
10000 10000 0
10164 9999 -1
</snippet></ROW><ROW><id>17513947</id><snippet>&gt;&gt;&gt; dis.dis(ThreadClass.run)
 11           0 SETUP_LOOP              57 (to 60)
        &gt;&gt;    3 LOAD_GLOBAL              0 (ThreadClass)
              6 LOAD_ATTR                1 (list_len)
              9 LOAD_CONST               1 (0)
             12 COMPARE_OP               4 (&gt;)
             15 POP_JUMP_IF_FALSE       59

 12          18 LOAD_GLOBAL              0 (ThreadClass)
             21 LOAD_ATTR                1 (list_len)
             24 LOAD_CONST               2 (1)
             27 BINARY_SUBTRACT     
             28 LOAD_GLOBAL              0 (ThreadClass)
             31 STORE_ATTR               1 (list_len)

 13          34 LOAD_GLOBAL              0 (ThreadClass)
             37 LOAD_ATTR                1 (list_len)
             40 STORE_FAST               1 (ln)

 14          43 LOAD_GLOBAL              2 (lns)
             46 LOAD_ATTR                3 (append)
             49 LOAD_FAST                1 (ln)
             52 CALL_FUNCTION            1
             55 POP_TOP             
             56 JUMP_ABSOLUTE            3
        &gt;&gt;   59 POP_BLOCK           
        &gt;&gt;   60 LOAD_CONST               0 (None)
             63 RETURN_VALUE    
</snippet></ROW><ROW><id>17513947</id><snippet>threading.Lock</snippet></ROW><ROW><id>17513947</id><snippet>class ThreadClass(threading.Thread):
    # ...
    lock = threading.Lock()

    def run(self):
        while True:
            with self.lock:
                # code accessing shared variables inside lock
                if ThreadClass.list_len &lt;= 0:
                    return
                ThreadClass.list_len -= 1
                list_len = ThreadClass.list_len   # store for later use...
            # not accessing shared state, outside of lock
</snippet></ROW><ROW><id>17513951</id><snippet>enumerate</snippet></ROW><ROW><id>17513951</id><snippet>&gt;&gt;&gt; L = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; {letter: i for i,letter in enumerate(L, start=1)}
{'a': 1, 'c': 3, 'b': 2, 'd': 4}
</snippet></ROW><ROW><id>17513951</id><snippet>&gt;&gt;&gt; dict(enumerate(L, start=1))
{1: 'a', 2: 'b', 3: 'c', 4: 'd'}
</snippet></ROW><ROW><id>17514455</id><snippet>WebKit.WebView</snippet></ROW><ROW><id>17514455</id><snippet>Gtk.Button</snippet></ROW><ROW><id>17514455</id><snippet>clicked</snippet></ROW><ROW><id>17514455</id><snippet>webview.connect('navigation-policy-decision-requested', _on_navigation)
webview.connect('new-window-policy-decision-requested', _on_navigation)

def _on_navigation(webview, frame, request, action, decision):
    print 'Tried to navigate to {}'.format(request.props.uri)
    return False  # not handled, proceed with default action
</snippet></ROW><ROW><id>17514534</id><snippet>D.update((myDictionary[query[i]])
# 2 open ^ but only one close ---^
</snippet></ROW><ROW><id>17514534</id><snippet>else:</snippet></ROW><ROW><id>17514534</id><snippet>D.update(myDictionary[query[i]])
</snippet></ROW><ROW><id>17514534</id><snippet>.keys()</snippet></ROW><ROW><id>17514534</id><snippet>if query[i] in myDictionary:
</snippet></ROW><ROW><id>17514534</id><snippet>query</snippet></ROW><ROW><id>17514534</id><snippet>enumerate()</snippet></ROW><ROW><id>17514534</id><snippet>for i, q in enumerate(query):
    if q in myDictionary:
        if not i:
            D.update(myDictionary[q])
        else:
            D.intersection_update(myDictionary[q])
</snippet></ROW><ROW><id>17514534</id><snippet>def myFunction(myDictionary, query):
    matches = (myDictionary[q] for q in myDictionary.viewkeys() &amp; query)
    try:
        D = {next(matches)}  # start with the first match
    except StopIteration:
        # Nothing matched
        return set()
    D.intersection_update(*matches)
    return D
</snippet></ROW><ROW><id>17514534</id><snippet>.keys()</snippet></ROW><ROW><id>17514534</id><snippet>.viewkeys()</snippet></ROW><ROW><id>17514534</id><snippet>.keys()</snippet></ROW><ROW><id>17514552</id><snippet>def get_function_arg_data(func):
    import inspect
    func = getattr(func, '_original_f', func) # use saved original if decorated
    func_data = inspect.getargspec(func)
    args_name = func_data.args #func argument list
    args_default = func_data.defaults #funcargument default data list
    return args_name, args_default

def showduration(user_function):
    '''show time duration decorator'''
    import time
    def wrapped_f(*args, **kwargs):
        t1 = time.clock()
        result = user_function(*args, **kwargs)
        print "%s()_Time: %0.5f"%(user_function.__name__, time.clock()-t1)
        return result
    wrapped_f._original_f = user_function  # save original function
    return wrapped_f

def foo(para1, para2=5, para3=7):
    for i in range(1000):
        s = para1+para2+para3
    return s

@showduration
def bar(para1, para2, para3):
    for i in range(1000):
        s=para1+para2+para3
    return s

print 'get_function_arg_data(foo):', get_function_arg_data(foo)
print 'get_function_arg_data(bar):', get_function_arg_data(bar)
</snippet></ROW><ROW><id>17514552</id><snippet>_original_f</snippet></ROW><ROW><id>17514552</id><snippet>get_function_arg_data()</snippet></ROW><ROW><id>17514552</id><snippet>get_function_arg_data(foo): (['para1', 'para2', 'para3'], (5, 7))
get_function_arg_data(bar): (['para1', 'para2', 'para3'], None)
</snippet></ROW><ROW><id>17514725</id><snippet>(data2+data3)==0</snippet></ROW><ROW><id>17514725</id><snippet>mask = numpy.not_equal((data2+data3), 0)
ndvi = numpy.choose(mask,(-99, (data3-data2)/(data2 + data3)))
</snippet></ROW><ROW><id>17514725</id><snippet>mask = (data2+data3)==0
ndvi = np.zeros(data2.shape)
ndvi[  mask ] = -99
ndvi[ ~mask ] = ((data3-data2)/(data2+data3))[ ~mask ]
</snippet></ROW><ROW><id>17514797</id><snippet>from calendar import month_abbr

month_to_index = {month.upper(): i for i, month in enumerate(month_abbr[1:])}
</snippet></ROW><ROW><id>17514797</id><snippet>sorted(mylist, key=lambda d: month_to_index[d['month'][:3]])
</snippet></ROW><ROW><id>17514797</id><snippet>&gt;&gt;&gt; from calendar import month_abbr
&gt;&gt;&gt; month_to_index = {month.upper(): i for i, month in enumerate(month_abbr[1:])}
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(sorted(mylist, key=lambda d: month_to_index[d['month'][:3]]))
[{'amount': 760, 'month': 'FEB 2013'},
 {'amount': 90, 'month': 'MAR2011'},
 {'amount': 190, 'month': 'MAR2013'},
 {'amount': 50, 'month': 'APR2013'},
 {'amount': 290, 'month': 'JUN2011'},
 {'amount': 930, 'month': 'AUG2011'},
 {'amount': 330, 'month': 'SEP 2012'},
 {'amount': 450, 'month': 'OCT 2012'},
 {'amount': 40, 'month': 'NOV2010'},
 {'amount': 450, 'month': 'NOV 2011'},
 {'amount': 30, 'month': 'DEC2011'}]
</snippet></ROW><ROW><id>17514797</id><snippet>sorted(mylist, key=lambda d: (month_to_index[d['month'][:3]], d['month'][-4:]))
</snippet></ROW><ROW><id>17514797</id><snippet>&gt;&gt;&gt; pprint.pprint(sorted(mylist, key=lambda d: (month_to_index[d['month'][:3]], d['month'][-4:])))
[{'amount': 760, 'month': 'FEB 2013'},
 {'amount': 90, 'month': 'MAR2011'},
 {'amount': 190, 'month': 'MAR2013'},
 {'amount': 50, 'month': 'APR2013'},
 {'amount': 290, 'month': 'JUN2011'},
 {'amount': 930, 'month': 'AUG2011'},
 {'amount': 330, 'month': 'SEP 2012'},
 {'amount': 450, 'month': 'OCT 2012'},
 {'amount': 40, 'month': 'NOV2010'},
 {'amount': 450, 'month': 'NOV 2011'},
 {'amount': 30, 'month': 'DEC2011'}]
</snippet></ROW><ROW><id>17514867</id><snippet>arr = ser.readlines()
</snippet></ROW><ROW><id>17514867</id><snippet>import serial
if __name__ == '__main__':
    with serial.Serial(port='/dev/ttyUSB0', baudrate=9600, timeout=1,
                       xonxoff=False, rtscts=False, dsrdtr=True) as s:
        for line in s:
            print(s)
</snippet></ROW><ROW><id>17515033</id><snippet>stringdata = "&lt;myroot&gt;%s&lt;/myroot&gt;" % stringdata
</snippet></ROW><ROW><id>17515033</id><snippet>from xml.etree import ElementTree
stringdata = "&lt;myroot&gt;%s&lt;/myroot&gt;" % stringdata
tree = ElementTree.fromstring(stringdata)
</snippet></ROW><ROW><id>17515122</id><snippet>parse_items</snippet></ROW><ROW><id>17515122</id><snippet>link</snippet></ROW><ROW><id>17515122</id><snippet>title</snippet></ROW><ROW><id>17515122</id><snippet>Item</snippet></ROW><ROW><id>17515122</id><snippet>Item</snippet></ROW><ROW><id>17515122</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.http import Request
from scrapy.selector import *

from scrapy.item import Item, Field


class CraiglistSampleItem(Item):
    title = Field()
    link = Field()
    description = Field()


class MySpider(CrawlSpider):
    name = "craigs"
    allowed_domains = ["craigslist.org"]
    start_urls = ["http://minneapolis.craigslist.org/moa/"]

    rules = (Rule(SgmlLinkExtractor(allow=("index\d00\.html", ), restrict_xpaths=('//p[@class="nextpage"]',))
        , callback="parse_items", follow=True),
    )

    def parse_items(self, response):
        hxs = HtmlXPathSelector(response)

        titles = hxs.select("//span[@class='pl']")
        for title in titles:
            item = CraiglistSampleItem()
            item["title"] = title.select("a/text()").extract()[0]
            item["link"] = title.select("a/@href").extract()[0]

            url = "http://minneapolis.craigslist.org%s" % item["link"]
            yield Request(url=url, meta={'item': item}, callback=self.parse_item_page)

    def parse_item_page(self, response):
        hxs = HtmlXPathSelector(response)

        item = response.meta['item']
        item['description'] = hxs.select('//section[@id="postingbody"]/text()').extract()
        return item
</snippet></ROW><ROW><id>17515122</id><snippet>description</snippet></ROW><ROW><id>17515136</id><snippet>"/a/pushItem/?item=" + escape(g("youtube-url").value)
   + "&amp;el=na&amp;bf=" + getBF()
   + "&amp;r="+ (new Date()).getTime();
</snippet></ROW><ROW><id>17515136</id><snippet>"/a/itemInfo/?video_id=" + video_id + "&amp;ac=www&amp;t=grp&amp;r=" + a.getTime();
</snippet></ROW><ROW><id>17515136</id><snippet>import time

videoid = requests.get("http://www.youtube-mp3.org/a/pushItem/",
                 params={
                      "item": "your youtube video url",
                      "el": "na",
                      "bf": "false",
                      "r": int(time.time() * 1000000)   # JS timestamps are in microseconds
                 }).text


info = requests.get("http://www.youtube-mp3.org/a/itemInfo/",
                   params={
                       "video_id": videoid,
                       "ac": "www",
                       "t": "grp",
                       "r": int(time.time() * 1000000)
                   }).text
</snippet></ROW><ROW><id>17515136</id><snippet>info</snippet></ROW><ROW><id>17515150</id><snippet>import re
from bs4 import BeautifulSoup

svg = open("/path/to/file.svg", "r").read()
soup = BeautifulSoup(svg)
paths = soup.findAll("path")

raphael = []

for p in paths:
    splitData = p['d'].split(",")
    for line in splitData:
        # Remove ".000000" part
        line = re.sub("\.\d*", "", line)
        line = line.replace(" ", "")
        raphael.append(line)

d = ",\n".join(raphael)
</snippet></ROW><ROW><id>17515259</id><snippet>sed -e "s|$i|$k|" $1 &gt; temp.html;
</snippet></ROW><ROW><id>17515259</id><snippet>echo "s|$i|$k|" &gt; foo.sed
sed -f foo.sed "$1" &gt; temp.html
</snippet></ROW><ROW><id>17515267</id><snippet>models.py</snippet></ROW><ROW><id>17515267</id><snippet>db</snippet></ROW><ROW><id>17515267</id><snippet>db/
    __init__.py
    user.py
    customer.py
    role.py
</snippet></ROW><ROW><id>17515267</id><snippet>__init__.py</snippet></ROW><ROW><id>17515267</id><snippet>models.py</snippet></ROW><ROW><id>17515318</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17515318</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; lis = [[10, 0], [30, 0], [40, 2], [20, 2], [90, 0], [80, 0]]
&gt;&gt;&gt; [list(g) for k,g in groupby(lis, key=itemgetter(1))]
[[[10, 0], [30, 0]],
 [[40, 2], [20, 2]],
 [[90, 0], [80, 0]]]
</snippet></ROW><ROW><id>17515318</id><snippet>&gt;&gt;&gt; ans = []
for k,g in groupby(lis, key=itemgetter(1)):
    l = list(g)
    ans.append(l)
    if len(ans) &gt; 1:
        ans[-2].append(l[0])
...         
&gt;&gt;&gt; ans
[[[10, 0], [30, 0], [40, 2]],
 [[40, 2], [20, 2], [90, 0]],
 [[90, 0], [80, 0]]]
</snippet></ROW><ROW><id>17515318</id><snippet>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; lis = [[[10, 0], [30, 0]],
 [[40, 2], [20, 2]],
 [[90, 0], [80, 0]]]
&gt;&gt;&gt; [x + ([y[0]] if y else []) for x,y in 
                                        zip_longest(lis,lis[1:])]
[[[10, 0], [30, 0], [40, 2]],
 [[40, 2], [20, 2], [90, 0]],
 [[90, 0], [80, 0]]]
</snippet></ROW><ROW><id>17515359</id><snippet>raw_input</snippet></ROW><ROW><id>17515359</id><snippet>&gt;&gt;&gt; x = raw_input("Enter number: ")
Enter number: 10
&gt;&gt;&gt; type(x)
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>17515359</id><snippet>for i in inp:
    if largest is None or i &gt; largest:
        largest = i
print 'Largest',largest
# Gets smallest number
for i in inp:
    if smallest is None or i &lt; smallest:
        smallest = i
print 'Smallest', smallest
</snippet></ROW><ROW><id>17515359</id><snippet>for</snippet></ROW><ROW><id>17515359</id><snippet>1</snippet></ROW><ROW><id>17515359</id><snippet>0</snippet></ROW><ROW><id>17515359</id><snippet>'1' &gt; '0'</snippet></ROW><ROW><id>17515359</id><snippet>1</snippet></ROW><ROW><id>17515359</id><snippet>0</snippet></ROW><ROW><id>17515359</id><snippet>&gt;&gt;&gt; '1' &gt; '0'
True
</snippet></ROW><ROW><id>17515359</id><snippet>count = 0
largest = None
smallest = None

while True:
    inp = raw_input('Please enter a number: ')
    # Kills the program
    if inp == 'done' : break
    if len(inp) &lt; 1 : break

    # Gets the work done
    try:
        num = float(inp)
    except:
        print 'Invalid input, please enter a number'
        continue
    # The numbers for count, largest and smallest
    count = count + 1
    # Gets largest number
    if largest is None or num &gt; largest:  # Change 1
        largest = num
    print 'Largest',largest
    # Gets smallest number
    if smallest is None or num &lt; smallest:  # Change 2
       smallest = num
    print 'Smallest', smallest

print 'Count:', count, 'Largest:', largest, 'Smallest:', smallest
</snippet></ROW><ROW><id>17515359</id><snippet>done</snippet></ROW><ROW><id>17515359</id><snippet>max()</snippet></ROW><ROW><id>17515359</id><snippet>min()</snippet></ROW><ROW><id>17515447</id><snippet>player</snippet></ROW><ROW><id>17515447</id><snippet>for player in playerList</snippet></ROW><ROW><id>17515447</id><snippet>player</snippet></ROW><ROW><id>17515447</id><snippet>Player</snippet></ROW><ROW><id>17515447</id><snippet>player</snippet></ROW><ROW><id>17515986</id><snippet>for month, days in zip(monthNames, daysInMonth):
    for day in range(1, days + 1):
        print "%3s %8d" % (month, day)
</snippet></ROW><ROW><id>17516127</id><snippet>print r.encode('utf-8')
</snippet></ROW><ROW><id>17516161</id><snippet>% (miles, km)</snippet></ROW><ROW><id>17516161</id><snippet>print</snippet></ROW><ROW><id>17516161</id><snippet>print</snippet></ROW><ROW><id>17516161</id><snippet>None</snippet></ROW><ROW><id>17516161</id><snippet>None % (miles, km)
</snippet></ROW><ROW><id>17516161</id><snippet>&gt;&gt;&gt; for miles in range (10, 70, 10):
...      km=miles*1.609
...      print ("%d miles --&gt; %3.2f kilometers" % (miles, km))
...     
10 miles --&gt; 16.09 kilometers
20 miles --&gt; 32.18 kilometers
30 miles --&gt; 48.27 kilometers
40 miles --&gt; 64.36 kilometers
50 miles --&gt; 80.45 kilometers
60 miles --&gt; 96.54 kilometers
</snippet></ROW><ROW><id>17516161</id><snippet>&gt;&gt;&gt; for miles in range (10, 70, 10):
        km=miles*1.609
        print ("{:d} miles --&gt; {:3.2f} kilometers".format(miles, km))
...     
10 miles --&gt; 16.09 kilometers
20 miles --&gt; 32.18 kilometers
30 miles --&gt; 48.27 kilometers
40 miles --&gt; 64.36 kilometers
50 miles --&gt; 80.45 kilometers
60 miles --&gt; 96.54 kilometers
</snippet></ROW><ROW><id>17516224</id><snippet>dict.setdefault</snippet></ROW><ROW><id>17516224</id><snippet>def makeInverseIndex(s):
    dic={}
    for index, line in enumerate(s):  #use enumerate() for getting index as well as item
        words = line.split()
        for palabra in words:
            dic.setdefault(palabra,set()).add(index)
</snippet></ROW><ROW><id>17516224</id><snippet>set</snippet></ROW><ROW><id>17516224</id><snippet>set()</snippet></ROW><ROW><id>17516231</id><snippet>cv2.imwrite()</snippet></ROW><ROW><id>17516231</id><snippet>import os
dirname = 'test'
os.mkdir(dirname)
</snippet></ROW><ROW><id>17516231</id><snippet>cv2.imwrite(os.path.join(dirname, face_file_name), image)
</snippet></ROW><ROW><id>17516231</id><snippet>os.chdir(dirname)
cv2.imwrite(face_file_name, image)
</snippet></ROW><ROW><id>17516366</id><snippet>os.path.split(os.getcwd())[1]
</snippet></ROW><ROW><id>17516366</id><snippet>os.path.split</snippet></ROW><ROW><id>17516628</id><snippet>raw_input</snippet></ROW><ROW><id>17516628</id><snippet>no1 = float(raw_input('Your first number'))
no2 = float(raw_input('Your second number'))
</snippet></ROW><ROW><id>17516628</id><snippet>input</snippet></ROW><ROW><id>17516628</id><snippet>raw_input</snippet></ROW><ROW><id>17516628</id><snippet>&gt;&gt;&gt; print raw_input.__doc__
raw_input([prompt]) -&gt; string

Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.
</snippet></ROW><ROW><id>17516628</id><snippet>input</snippet></ROW><ROW><id>17516628</id><snippet>&gt;&gt;&gt; print input.__doc__
input([prompt]) -&gt; value

Equivalent to eval(raw_input(prompt)).
</snippet></ROW><ROW><id>17516667</id><snippet>def __getattr__(self, name):
    if hasattr(self.st, name):
        return getattr(self.st, name)
    else:
        raise AttributeError
</snippet></ROW><ROW><id>17516720</id><snippet>sudo apt-get install supervisord</snippet></ROW><ROW><id>17516720</id><snippet>/etc/supervisord/conf.d</snippet></ROW><ROW><id>17516720</id><snippet>[program:django-webserver]
directory = /user/foo/my-project
user = foo
command = /user/foo/.virtualenvs/my-project/bin/python /user/foo/my-project/manage.py runserver
stdout_logfile = /user/foo/my-project/logs/supervisord/webserver.out.log
stderr_logfile = /user/foo/my-project/logs/supervisord/webserver.err.log
autostart = true
autorestart = true
environment = DJANGO_SETTINGS_MODULE="myproject.settings.production"
</snippet></ROW><ROW><id>17516720</id><snippet>/etc/supervisord/conf.d/</snippet></ROW><ROW><id>17516720</id><snippet>myproject.conf</snippet></ROW><ROW><id>17516720</id><snippet>sudo supervisorctl</snippet></ROW><ROW><id>17516720</id><snippet>reload</snippet></ROW><ROW><id>17516720</id><snippet>start django-webserver</snippet></ROW><ROW><id>17516720</id><snippet>django-webserver</snippet></ROW><ROW><id>17516720</id><snippet>[program:&lt;name&gt;]</snippet></ROW><ROW><id>17516720</id><snippet>sudo apt-get install nginx</snippet></ROW><ROW><id>17516720</id><snippet>nginx</snippet></ROW><ROW><id>17516720</id><snippet>django-webserver</snippet></ROW><ROW><id>17516720</id><snippet>/etc/nginx/sites-available</snippet></ROW><ROW><id>17516720</id><snippet>server {
    listen 80;
    access_log /home/foo/myproject/nginx/access.log;
    error_log /home/foo/myproject/nginx/error.log;

    location /statics/ {
        gzip on;
        root /home/foo/myproject/collected_static;
        rewrite ^/statics/(.*)$ /$1 break;
        autoindex off;
        expires 60d;
    }

    location / {
        fastcgi_pass 127.0.0.1:8000;
        fastcgi_param PATH_INFO $fastcgi_script_name;
        fastcgi_param REQUEST_METHOD $request_method;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_param CONTENT_TYPE $content_type;
        fastcgi_param CONTENT_LENGTH $content_length;
        fastcgi_param SERVER_PROTOCOL $server_protocol;
        fastcgi_param SERVER_PORT $server_port;
        fastcgi_param SERVER_NAME $server_name;

        fastcgi_pass_header Authorization;
        fastcgi_intercept_errors off;
    }
}
</snippet></ROW><ROW><id>17516720</id><snippet>flup</snippet></ROW><ROW><id>17516720</id><snippet>pip install flup</snippet></ROW><ROW><id>17516720</id><snippet>python manage.py runfcgi host=127.0.0.1 port=8000 daemonize=false</snippet></ROW><ROW><id>17516720</id><snippet>daemonize=false</snippet></ROW><ROW><id>17516720</id><snippet>/etc/nginx/sites-available</snippet></ROW><ROW><id>17516720</id><snippet>/etc/nginx/sites-enabled</snippet></ROW><ROW><id>17516720</id><snippet>cd /etc/nginx/sites-enabled
ln -s /etc/nginx/sites-available/myproject.conf myproject.conf
</snippet></ROW><ROW><id>17516720</id><snippet>sudo /etc/init.d/nginx restart</snippet></ROW><ROW><id>17516727</id><snippet>itertools.permutations</snippet></ROW><ROW><id>17516727</id><snippet>&gt;&gt;&gt; from itertools import permutations
for p in permutations('AAAAAA'+'LL'):
    print ("".join(p))
...
</snippet></ROW><ROW><id>17516727</id><snippet>sets</snippet></ROW><ROW><id>17516727</id><snippet>unique=set(i for  i in permutations('AAAAAA'+'LL'))
</snippet></ROW><ROW><id>17516727</id><snippet>sum</snippet></ROW><ROW><id>17516727</id><snippet>sum('LL' in "".join(i) for i in permutations('AAAAAA'+'LL'))
</snippet></ROW><ROW><id>17516740</id><snippet>[word,num]</snippet></ROW><ROW><id>17516740</id><snippet>min</snippet></ROW><ROW><id>17516740</id><snippet>key</snippet></ROW><ROW><id>17516740</id><snippet>min</snippet></ROW><ROW><id>17516740</id><snippet>with open('abc') as f:
    lis = [[line.strip(),next(f).strip()] for line in f]
    minn = min(lis, key = lambda x: float(x[1]))
    print "\n".join(minn)
...     
Over
0.5678
</snippet></ROW><ROW><id>17516740</id><snippet>lis</snippet></ROW><ROW><id>17516740</id><snippet>[['3.6-band', '6238'], ['Over', '0.5678'], ['Over', '0.6874'], ['Over', '0.7680'], ['Over', '0.7834']]
</snippet></ROW><ROW><id>17516763</id><snippet>string = open('file.txt').read()

for word in string.split():
    print len(word)
</snippet></ROW><ROW><id>17516925</id><snippet>http://www.youtube.com/results?search_query=test
</snippet></ROW><ROW><id>17516925</id><snippet>results</snippet></ROW><ROW><id>17517146</id><snippet>  http://yourserver/auth_callback
</snippet></ROW><ROW><id>17517146</id><snippet>  FLOW = OAuth2WebServerFlow(
    client_id='67490467925.apps.googleusercontent.com',
    ...
    redirect_uri='http://yourserver/auth_callback')
</snippet></ROW><ROW><id>17517146</id><snippet>auth_uri</snippet></ROW><ROW><id>17517146</id><snippet>  self.redirect(auth_uri,...)
</snippet></ROW><ROW><id>17517146</id><snippet>code</snippet></ROW><ROW><id>17517146</id><snippet>error</snippet></ROW><ROW><id>17517146</id><snippet>  code = self.request.get("code")
  credentials = FLOW.step2_exchange(code)
</snippet></ROW><ROW><id>17517178</id><snippet>all()</snippet></ROW><ROW><id>17517178</id><snippet>with open(r'd:\lista.txt', 'r') as inF:
    l = input("Buscar: ")
    for line in inF:
        if all(c in line for c in l)
          #code
</snippet></ROW><ROW><id>17517178</id><snippet>&gt;&gt;&gt; strs = "goi"
&gt;&gt;&gt; line = "morning"
&gt;&gt;&gt; all(c in line for c in strs)
True
&gt;&gt;&gt; line = "soiberg"
&gt;&gt;&gt; all(c in line for c in strs)
True
&gt;&gt;&gt; line = "sea"
&gt;&gt;&gt; all(c in line for c in strs)
False
</snippet></ROW><ROW><id>17517178</id><snippet>'\t'</snippet></ROW><ROW><id>17517178</id><snippet>r'd:\lista.txt'
</snippet></ROW><ROW><id>17517204</id><snippet>data = {
    "Mrs Dodgson": {
        "Rosie": [1,123.8,5],
        "James": [2,122.6,7],
        "Chris": [3,120.4,12]
    },
    "Dr Clement": {
        "Hannah": [1,126.9,2.56],
        "Gill": [2,124.54,6.89],
        "Jack": [3,122.04,15.62],
        "Jamie": [4,121.09,20.91]
    }
}

to_remove = ["Jamie", "Rosie"]

# Mrs. Dodgson's class data, initially.
print data["Mrs Dodgson"]

# Now remove the student data.
for cls_data in data.values():
    for student in to_remove:
        try:
            del cls_data[student]
        except KeyError:
            pass

print data["Mrs Dodgson"]
</snippet></ROW><ROW><id>17517330</id><snippet>which python</snippet></ROW><ROW><id>17517330</id><snippet>which -a python</snippet></ROW><ROW><id>17517330</id><snippet>which</snippet></ROW><ROW><id>17517330</id><snippet>python -V</snippet></ROW><ROW><id>17517370</id><snippet>beer_archive.csv</snippet></ROW><ROW><id>17517370</id><snippet>C:\Users\Knute\Python\projects\Kivy_Stuff\Cellar</snippet></ROW><ROW><id>17517370</id><snippet>os.chdir()</snippet></ROW><ROW><id>17517370</id><snippet>with open(os.path.join(folder_path, 'beer_archive.csv'), 'rb', 1) as beer_csv:
</snippet></ROW><ROW><id>17517370</id><snippet>folder_path</snippet></ROW><ROW><id>17517370</id><snippet>beer_archive.csv</snippet></ROW><ROW><id>17517370</id><snippet>self.beer_list</snippet></ROW><ROW><id>17517370</id><snippet>class BeerCellar(ScrollView):
    def __init__(self, **kwargs):
        super(BeerCellar, self).__init__(**kwargs)
        with open(os.path.join(folder_path, 'beer_archive.csv'), 'rb', 1) as beer_csv:
            self.beer_list = list(csv.DictReader(beer_csv))
</snippet></ROW><ROW><id>17517748</id><snippet>str.split</snippet></ROW><ROW><id>17517748</id><snippet>with open('Input_file_1.txt') as f:
    for line in f:
        print tuple(line.split())

('126871', 'test')
('126262', 'value', 'test')
</snippet></ROW><ROW><id>17517748</id><snippet>str</snippet></ROW><ROW><id>17517748</id><snippet>with open('Input_file_1.txt') as f, open('result.txt','w') as f1 :
    for line in f:
        f1.write(str(tuple(line.split())) + '\n')

&gt;&gt;&gt; !cat result.txt
('126871', 'test')
('126262', 'value', 'test')
</snippet></ROW><ROW><id>17517978</id><snippet>a=open('owlcreek.txt').read().split()
lengths=dict()
for word in a:
    length = len(word)
    # if the key is not present, add it
    if not lengths.has_key(length):
        # the value should be the list of words
        lengths[length] = []
    # append the word to the list for length key
    lengths[length].append(word)

# print them out as length, count(words of that length)
for length, wrds in lengths.items():
    print "Words of length %d: %d" % (length, len(wrds))
</snippet></ROW><ROW><id>17518130</id><snippet>print_this</snippet></ROW><ROW><id>17518130</id><snippet>  File "./t.py", line 4
    def __init__(self,parent):
      ^
IndentationError: expected an indented block
</snippet></ROW><ROW><id>17518330</id><snippet>matrix = { (v1,v2):val}</snippet></ROW><ROW><id>17518330</id><snippet>&gt;&gt;&gt; m = {((1,2,3,4),(9,8,8,2)):"info"}
&gt;&gt;&gt; m[((1,2,3,4),(9,8,8,2))]
'info'
</snippet></ROW><ROW><id>17518330</id><snippet>matrix = { v1: { v2:val }}</snippet></ROW><ROW><id>17518330</id><snippet>deafultdict</snippet></ROW><ROW><id>17518330</id><snippet>&gt;&gt;&gt; matrix = defaultdict(dict)
&gt;&gt;&gt; matrix[(1,2,3,4)][(9,8,8,2)] = "info"
&gt;&gt;&gt; matrix
defaultdict(&lt;type 'dict'&gt;, {(1, 2, 3, 4): {(9, 8, 8, 2): 'info'}})
&gt;&gt;&gt; matrix[(1,2,3,4)][(9,8,8,2)]
'info'
</snippet></ROW><ROW><id>17518399</id><snippet>REPLACE</snippet></ROW><ROW><id>17518399</id><snippet>UNIQUE</snippet></ROW><ROW><id>17518399</id><snippet>id</snippet></ROW><ROW><id>17518399</id><snippet>Name</snippet></ROW><ROW><id>17518399</id><snippet>Age</snippet></ROW><ROW><id>17518422</id><snippet>import os
execfile(os.path.expanduser('~/Python_Codes/my_code.py'))
</snippet></ROW><ROW><id>17518422</id><snippet>execfile</snippet></ROW><ROW><id>17518422</id><snippet>import os
with open(os.path.expanduser('~/Python_Codes/my_code.py')) as f:
    exec(f.read())
</snippet></ROW><ROW><id>17518495</id><snippet>with open(input_path, 'r') as infile, open(output_path, 'w') as outfile:
  for line in infile:
    line_name, line_id = line.split(':')
    line_name = line_name.strip().replace(' ', '_')
    print('{} = ["{}"]'.format(line_name, line_id.strip()))
</snippet></ROW><ROW><id>17518557</id><snippet>lambda</snippet></ROW><ROW><id>17518557</id><snippet>sorted(re.finditer(...,text),key=attrgetter('group'),reverse=True):
</snippet></ROW><ROW><id>17518557</id><snippet>for i in reversed(list(re.finditer('id (.+?) result (.+)', text))): 
</snippet></ROW><ROW><id>17518580</id><snippet>def recursive_thing(calls=1):
    # "calls" argument keeps track of recursion depth
    if keep_recursing():
        # pass a higher count to the recursive call
        recursive_thing(calls + 1)
    else:
        print calls
        return
</snippet></ROW><ROW><id>17518607</id><snippet>$("table[id]").each(function(i,item){
  var $table = $(item)
  var table_id = $table.attr('id')
  $table.find(".refresh-button").on("click", function() {
    $table.load(location.href + " " + table_id);
  })
})
</snippet></ROW><ROW><id>17518607</id><snippet>$table.load("/_tables/my_table/ " + table_id);
</snippet></ROW><ROW><id>17518699</id><snippet>==</snippet></ROW><ROW><id>17518699</id><snippet>=</snippet></ROW><ROW><id>17518699</id><snippet>current = x
</snippet></ROW><ROW><id>17518734</id><snippet>pip -e install &lt;path-to-package&gt;</snippet></ROW><ROW><id>17518734</id><snippet>virtualenv</snippet></ROW><ROW><id>17518750</id><snippet>server_name quickerhub.com;
</snippet></ROW><ROW><id>17518750</id><snippet>http://www.quickerhub.com/?code=4/bzqKIpj3UA3bBiyJfQzi3svzPBLZ.QoB_rXWZ6hUbmmS0T3UFEsPMOFF4fwI
</snippet></ROW><ROW><id>17518750</id><snippet>quickerhub.com</snippet></ROW><ROW><id>17518750</id><snippet>www.quickerhub.com</snippet></ROW><ROW><id>17518750</id><snippet>server_name www.quickerhub.com quickerhub.com;
</snippet></ROW><ROW><id>17518750</id><snippet>server {
    server_name www.quickerhub.com;

    expires epoch;
    add_header Cache-Control "no-cache, public, must-revalidate, proxy-revalidate";
    rewrite ^ http://quickerhub.com$request_uri permanent;
}
</snippet></ROW><ROW><id>17518805</id><snippet>(username, password, host) = ("user","psw","isntance") 
conn_string = " %s/%s@%s "% (username,password,host)
session = Popen(['sqlplus','-S', conn_string], stdin=PIPE, stdout=PIPE, stderr=PIPE)
sql_file = '%s/%s' % ('/my/folder', 'File.sql')
with open(sql_file) as f:
    stdout, stderr = session.communicate(f.read())
print 'output: %s' % stdout
print 'error: %s' % stderr
</snippet></ROW><ROW><id>17518813</id><snippet>    print "Setting size in scale..."
    #unbind Size Event
    self.UnBind(wx.EVT_SIZE)

    self.current_size = (wW, wH)
    print self.current_size
    self.SetSize((wW, wH))
    print time.time()
    self.Update() #force update so it does not trigger after rebind
    #rebind Size Event
    self.Bind(wx.EVT_SIZE, self.OnSize, self)
</snippet></ROW><ROW><id>17519306</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Thread(Base):
    __tablename__ = 'thread'

    id = Column(Integer, primary_key=True)


class Post(Base):
    __tablename__ = 'post'

    id = Column(Integer, primary_key=True)
    thread_id = Column(Integer, ForeignKey('thread.id'))
    posted_at = Column(String)

s = Session()

scalar = select([func.max(Post.posted_at)]).where(Post.thread_id == Thread.id).as_scalar()

q = s.query(Thread).order_by(scalar.desc())

print q
</snippet></ROW><ROW><id>17519306</id><snippet>SELECT thread.id AS thread_id 
FROM thread ORDER BY (SELECT max(post.posted_at) AS max_1 
FROM post 
WHERE post.thread_id = thread.id) DESC
</snippet></ROW><ROW><id>17519337</id><snippet>userInput = str(input("Enter The Sentense: "))
truncatedInput = userInput[:140]
</snippet></ROW><ROW><id>17519368</id><snippet>mayavi</snippet></ROW><ROW><id>17519602</id><snippet>import hashlib
import brypt
def myhash(word):
    salt = "$2a$06$" + hashlib.sha1(word).hexdigest()[0:22] + "$"
    return bcrypt.hashpw(word, salt)
</snippet></ROW><ROW><id>17519857</id><snippet>salt=os.urandom(32)

db_session.execute('insert into posUsers values (?,unhex("sjg"),?, ?)',[usern,salt,row.clientId])
</snippet></ROW><ROW><id>17520226</id><snippet>true_function()</snippet></ROW><ROW><id>17520226</id><snippet>print "Welcome to the English to Pig Latin translator!"

def true_function():
    original = raw_input("tell me your secrets")
    if len(original)&gt;= 1:
        print(original)
    else:
        print("empty")
true_function()
</snippet></ROW><ROW><id>17520226</id><snippet>true_function()</snippet></ROW><ROW><id>17520415</id><snippet>self.block_name()</snippet></ROW><ROW><id>17520415</id><snippet>dumps</snippet></ROW><ROW><id>17520415</id><snippet>{
    "copy" : {{ dumps(self.copy()) | safe }},
    "title" : {{ dumps(self.title()) | safe }}
}
</snippet></ROW></DATA>