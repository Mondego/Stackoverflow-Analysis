<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>17708696</id><snippet>sched</snippet></ROW><ROW><id>17708696</id><snippet>Timer</snippet></ROW><ROW><id>17708696</id><snippet>threading</snippet></ROW><ROW><id>17708696</id><snippet>cron</snippet></ROW><ROW><id>17708696</id><snippet>time.sleep(15*60)</snippet></ROW><ROW><id>17708696</id><snippet>time.time()</snippet></ROW><ROW><id>17708983</id><snippet>&gt;&gt;&gt; num_days = 3
&gt;&gt;&gt; current_date = datetime.datetime.now()
&gt;&gt;&gt; current_date
datetime.datetime(2013, 7, 17, 12, 44, 57, 557000)
&gt;&gt;&gt; future_date = current_date.replace(day=current_date.day + num_days)
&gt;&gt;&gt; future_date
datetime.datetime(2013, 7, 20, 12, 44, 57, 557000)
</snippet></ROW><ROW><id>17709201</id><snippet>NewPdb._NewPdb__get_except_lines(...)
</snippet></ROW><ROW><id>17709224</id><snippet>fruits = ["apple", "mango", "strawberry", "cherry", "peach","peach pie"]
allergies = ["cherry", "peach"]

okay = [fruit for fruit in fruits if not any(allergy in fruit.split() for allergy in allergies)]
# ['apple', 'mango', 'strawberry']
</snippet></ROW><ROW><id>17709313</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17709313</id><snippet>rowTitle</snippet></ROW><ROW><id>17709313</id><snippet>EPS (Basic)</snippet></ROW><ROW><id>17709313</id><snippet>valueCell</snippet></ROW><ROW><id>17709313</id><snippet>from urllib import urlopen
from BeautifulSoup import BeautifulSoup

url = 'http://www.marketwatch.com/investing/stock/goog/financials'
text_soup = BeautifulSoup(urlopen(url).read()) #read in

titles = text_soup.findAll('td', {'class': 'rowTitle'})
for title in titles:
    if 'EPS (Basic)' in title.text:
        print [td.text for td in title.findNextSiblings(attrs={'class': 'valueCell'}) if td.text]
</snippet></ROW><ROW><id>17709313</id><snippet>['13.46', '20.62', '26.69', '30.17', '32.81']
</snippet></ROW><ROW><id>17709756</id><snippet>[[int(start), int(stop), float(value)] for start, stop, value in bins]
</snippet></ROW><ROW><id>17709756</id><snippet>bn</snippet></ROW><ROW><id>17710028</id><snippet>def getNGramBeginsWords(nGram, length):
    # dict is the name of a builtin function, which you are confusingly overwriting
    # dict = open('/home/will/workspace/Genie/src/resources/TWL06.txt', 'r')
    wlist = open('/home/will/workspace/Genie/src/resources/TWL06.txt', 'r')
    nGram = nGram.upper()
    words = []
    for line in wlist:
        # an empty string evaluates to False in a binary context; also no need for those brackets
        stripline = line.strip().upper() # you keep doing this; I added the upper here.
        # you don't need this if, because you immediately test length
        #if stripline: #I know I changed this, but you only refer to the stripped version below 
        # pipe | is bitwise OR. I bet you don't want that
        if len(nGram)&gt;len(stripline) or len(stripline)!= length:
            continue
        # s = stripline[:len(nGram)] #you only use this once
        # you don't need to check that stripline is of length again; you already did that
        # also, you can just use `endswith` instead of slicing
        if stripline.endswith(nGram):
            words.append(stripline)
    return words
</snippet></ROW><ROW><id>17710028</id><snippet>def getNGramBeginsWords(nGram, length):
    wlist = open('/home/will/workspace/Genie/src/resources/TWL06.txt', 'r')
    nGram = nGram.upper()
    words = []
    for line in wlist:
        stripline = line.strip() # you keep doing this
        # you can merge these two ifs
        if len(nGram)&gt;len(stripline) or len(stripline)!= length:
            continue
        if stripline.endswith(nGram):
            words.append(stripline)
    return words
</snippet></ROW><ROW><id>17710028</id><snippet>def getNGramBeginsWords(nGram, length):
    wlist = open('/home/will/workspace/Genie/src/resources/TWL06.txt', 'r')
    nGram = nGram.upper()
    words = []
    for line in wlist:
        stripline = line.strip().upper() # you keep doing this
        # you can merge these two ifs
        # also this renders the comparison of ngram and stripline lengths redundant
        if (len(stripline) == length) and stripline.endswith(nGram):
            words.append(stripline)
    return words
</snippet></ROW><ROW><id>17710028</id><snippet>length</snippet></ROW><ROW><id>17710028</id><snippet>def getNGramBeginsWords(nGram, length):
    wlist = open('/home/will/workspace/Genie/src/resources/TWL06.txt', 'r')
    nGram = nGram.upper()
    words = []
    length = int(length) # force to an int
    assert isinstance(n, int) # or do this if you prefer to get an exception on all invalid input
    for line in wlist:
        stripline = line.strip().upper() # you keep doing this
        # you can merge these two ifs
        if (len(stripline) == length) and stripline.endswith(nGram):
            words.append(stripline)
    return words
</snippet></ROW><ROW><id>17710028</id><snippet>with</snippet></ROW><ROW><id>17710028</id><snippet>def getNGramBeginsWords(nGram, length):
    with open('/home/will/workspace/Genie/src/resources/TWL06.txt', 'r') as wlist:
        nGram = nGram.upper()
        words = []
        length = int(length) # force to an int
        assert isinstance(n, int) # or do this if you prefer to get an exception on all invalid input
        for line in wlist:
            stripline = line.strip().upper() # you keep doing this
            #you should be using `endswith` instead of the slice
            if (len(stripline) == length) and stripline.endswith(nGram):
                words.append(stripline)
        return words
</snippet></ROW><ROW><id>17710275</id><snippet>logger.getLogger([name])</snippet></ROW><ROW><id>17710275</id><snippet>__name__</snippet></ROW><ROW><id>17710275</id><snippet>DEBUG()</snippet></ROW><ROW><id>17710275</id><snippet>LOG_MODULE_NAME = logging.getLogger(__name__)

def DEBUG(msg):
    global LOG_MODULE_NAME
    LOG_MODULE_NAME.debug(msg)
</snippet></ROW><ROW><id>17710275</id><snippet>LOG_MODULE_NAME</snippet></ROW><ROW><id>17710275</id><snippet>DEBUG:my_module:Entering function
WARN:my_module:I thought it would be 1
DEBUG:my_module:Exiting function
DEBUG:root:Exiting main.py
</snippet></ROW><ROW><id>17710275</id><snippet>inpsect</snippet></ROW><ROW><id>17710275</id><snippet>getEffectiveLevel()</snippet></ROW><ROW><id>17710275</id><snippet>LOG_MODULE_NAME = logging.getLogger(__name__)
MODULE_LOG_LEVEL = log.LVL_WARN

def DEBUG(msg):
    if MODULE_LOG_LEVEL = log.LVL_DEBUG:
        global LOG_MODULE_NAME
        LOG_MODULE_NAME.debug(msg)
</snippet></ROW><ROW><id>17710275</id><snippet>logging</snippet></ROW><ROW><id>17710394</id><snippet>import matplotlib.pyplot as plt
import matplotlib.dates as md
import dateutil

datestrings = ['2012-02-21 11:28:17.980000', '2012-02-21 12:15:32.453000', '2012-02-21 23:26:23.734000', '2012-02-26 17:42:15.804000']
dates = [dateutil.parser.parse(s) for s in datestrings]

plt_data = range(5,9)
plt.subplots_adjust(bottom=0.2)
plt.xticks( rotation=25 )

ax=plt.gca()
ax.set_xticks(dates)

xfmt = md.DateFormatter('%Y-%m-%d %H:%M:%S')
ax.xaxis.set_major_formatter(xfmt)
plt.plot(dates,plt_data, "o-")
plt.show()
</snippet></ROW><ROW><id>17710495</id><snippet>within</snippet></ROW><ROW><id>17710495</id><snippet>find("needle", within="haystack")</snippet></ROW><ROW><id>17710730</id><snippet>globals()</snippet></ROW><ROW><id>17710730</id><snippet>&gt;&gt;&gt; foo = 'value'
&gt;&gt;&gt; def change(name):
...    globals()[name] = 'changed'
... 
&gt;&gt;&gt; change('foo')
&gt;&gt;&gt; foo
'changed'
</snippet></ROW><ROW><id>17710730</id><snippet>alive = {}
def sub_listener(conn, key): #listens for kill from main 
    while True:
         data = conn.recv()
         if data == "kill":
         alive[key] = False #value for kill 
         break
</snippet></ROW><ROW><id>17710730</id><snippet>from multiprocessing import Process, Pipe
from threading import Thread
import time

alive = {
    'sub': 1,
    'test': 1,
}

def listener_factory(key):
    def listener(conn): #listens for kill from main
        while True:
            data = conn.recv()
            if data == "kill":
                alive[key] = False #value for kill
                break
    return listener

def process_factory(key):
    listener = listener_factory(key)
    def subprocess(conn, threadNum):
        t = Thread(target=listener, args=(conn,))
        count = 0
        threadVal = threadNum
        t.start()
        while alive[key]:
            print "Thread[%s] %d Run number = %d" % (key, threadVal, count)
            count = count + 1
    return subprocess

def main():
    sub_parent, sub_child = Pipe()
    test_parent, test_child = Pipe()
    runNum = int(raw_input("Enter a number: "))
    threadNum = int(raw_input("Enter number of threads: "))
    print "Starting threads"
    for i in range(threadNum):
        p = Process(target=process_factory('sub'), args=(sub_child, i))
        p.start()
    print "Subprocess started"
    for i in range(threadNum):
        p2 = Process(target=process_factory('test'), args=(test_child, i))
        p2.start()
    print "Testproccess started"
    print "Starting run"
    time.sleep(runNum)
    print "Terminating Subprocess run"
    for i in range(threadNum):
        sub_parent.send("kill") #sends kill to listener
    print "Terminating Testprocess run"
    for i in range(threadNum):
        test_parent.send("kill") #sends kill to listener
    p.join()
    p2.join()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17710855</id><snippet>for line in f:</snippet></ROW><ROW><id>17710855</id><snippet>read</snippet></ROW><ROW><id>17710855</id><snippet>data = f.read()
process(data)
</snippet></ROW><ROW><id>17710855</id><snippet>while True:
    data = f.read(8192)
    if not data:
        break
    process(data)
</snippet></ROW><ROW><id>17710855</id><snippet>def chunks(f):
    while True:
        data = f.read(8192)
        if not data:
            break
        yield data
</snippet></ROW><ROW><id>17710855</id><snippet>for chunk in chunks(f):
    process(chunk)
</snippet></ROW><ROW><id>17710855</id><snippet>iter</snippet></ROW><ROW><id>17710855</id><snippet>for chunk in iter(partial(f.read, 8192), b''):
    process(chunk)
</snippet></ROW><ROW><id>17710855</id><snippet>mmap</snippet></ROW><ROW><id>17710855</id><snippet>data = b''
while True:
    buf = f.read(8192)
    if not buf:
        process(data)
        break
    data += buf
    chunks = data.split(b'\0')
    for chunk in chunks[:-1]:
        process(chunk)
    data = chunks[-1]
</snippet></ROW><ROW><id>17710855</id><snippet>sockets</snippet></ROW><ROW><id>17710855</id><snippet>mmap</snippet></ROW><ROW><id>17710855</id><snippet>with mmap.mmap(f.fileno(), access=mmap.ACCESS_READ) as m:
    process(m)
</snippet></ROW><ROW><id>17710855</id><snippet>m</snippet></ROW><ROW><id>17710855</id><snippet>bytes</snippet></ROW><ROW><id>17710855</id><snippet>read()</snippet></ROW><ROW><id>17710855</id><snippet>windowsize = 8*1024*1024
size = os.fstat(f.fileno()).st_size
for start in range(0, size, window size):
    with mmap.mmap(f.fileno(), access=mmap.ACCESS_READ, 
                   length=windowsize, offset=start) as m:
        process(m)
</snippet></ROW><ROW><id>17710887</id><snippet>np.vstack((tp, fp)).T</snippet></ROW><ROW><id>17710887</id><snippet>np.vstack((tp, fp))</snippet></ROW><ROW><id>17710887</id><snippet>T</snippet></ROW><ROW><id>17710887</id><snippet>&gt;&gt;&gt; tp = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&gt;&gt;&gt; tp.ndim
1
&gt;&gt;&gt; tp.shape
(10,)

&gt;&gt;&gt; fp = np.array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
&gt;&gt;&gt; fp.ndim
1
&gt;&gt;&gt; fp.shape
(10,)

&gt;&gt;&gt; combined = np.vstack((tp, fp)).T
&gt;&gt;&gt; combined
array([[ 0, 10],
       [ 1, 11],
       [ 2, 12],
       [ 3, 13],
       [ 4, 14],
       [ 5, 15],
       [ 6, 16],
       [ 7, 17],
       [ 8, 18],
       [ 9, 19]])

&gt;&gt;&gt; combined.ndim
2
&gt;&gt;&gt; combined.shape
(10, 2)
</snippet></ROW><ROW><id>17710896</id><snippet>try:
    ...
except (KeyError, ValuesError) as e :
    cleanup_a()
    cleanup_b()
    cleanup_c()
    if type(e) is KeyError:
        handle_keyerror()
    else:
        handle_valueerror()
</snippet></ROW><ROW><id>17710982</id><snippet>pip</snippet></ROW><ROW><id>17710982</id><snippet>$ pip install git+git://github.com/scikit-learn/scikit-learn@master
</snippet></ROW><ROW><id>17710995</id><snippet>count = itertools.count()
</snippet></ROW><ROW><id>17710995</id><snippet>Button(root, text = "example", command = self.example_action).grid(row = count.next())
</snippet></ROW><ROW><id>17711041</id><snippet>x=6

for words in foo:
  if "bar" in words:
    x = -x;
</snippet></ROW><ROW><id>17711055</id><snippet>c = [re.sub(r'$?_[^A-Z_]+', "", x) for x in a]
</snippet></ROW><ROW><id>17711055</id><snippet>?</snippet></ROW><ROW><id>17711055</id><snippet>&gt;&gt;&gt; [re.sub(r'_?[^A-Z_]+$', "", x) for x in a]
['SDFSD_SFSDF', 'SDFSDF_SDFSDF', 'TSFSD_SDF']
</snippet></ROW><ROW><id>17711055</id><snippet>$</snippet></ROW><ROW><id>17711267</id><snippet>for k, v in dct.iteritems():
    print repr(k)+ ":(" + ", ".join("Country{}:{}".format(i,c) for i,c in enumerate(v, start=1)) + ")"
</snippet></ROW><ROW><id>17711267</id><snippet>'Europe':(Country1:Germany, Country2:France, Country3:Italy)
'Asia':(Country1:India, Country2:China, Country3:Malaysia)
</snippet></ROW><ROW><id>17711267</id><snippet>repr()</snippet></ROW><ROW><id>17711267</id><snippet>"'" + str(k) + "'"</snippet></ROW><ROW><id>17711267</id><snippet>:</snippet></ROW><ROW><id>17711267</id><snippet>d = {'a':'b'}</snippet></ROW><ROW><id>17711267</id><snippet>print 'a':'b'</snippet></ROW><ROW><id>17711267</id><snippet>dict</snippet></ROW><ROW><id>17711501</id><snippet>local</snippet></ROW><ROW><id>17711501</id><snippet>local</snippet></ROW><ROW><id>17711501</id><snippet>local</snippet></ROW><ROW><id>17711501</id><snippet>import threading as t

locs = t.local()
locs.x = 1
print locs.x
</snippet></ROW><ROW><id>17711521</id><snippet>operator.itemgetter(1, 3, 5)

operator.itemgetter((1, 3, 5))
</snippet></ROW><ROW><id>17711521</id><snippet>itemgetter(columns)</snippet></ROW><ROW><id>17711521</id><snippet>operator.itemgetter(*columns)
</snippet></ROW><ROW><id>17711666</id><snippet>your_list.sort(key=lambda e: (-e[1], e[0]))
</snippet></ROW><ROW><id>17711666</id><snippet>&gt;&gt;&gt; your_list = [('IL', 36), ('NJ', 81), ('CA', 81), ('DC', 52), ('TX', 39)]
&gt;&gt;&gt; your_list.sort(key=lambda e: (-e[1], e[0]))
&gt;&gt;&gt; your_list
[('CA', 81), ('NJ', 81), ('DC', 52), ('TX', 39), ('IL', 36)]
</snippet></ROW><ROW><id>17711666</id><snippet>sorted</snippet></ROW><ROW><id>17711666</id><snippet>def your_sort(your_list):
    return sorted(your_list, key=lambda e: (-e[1], e[0]))
</snippet></ROW><ROW><id>17711732</id><snippet>allowed_classes = {
    'A': ClassA,
    'B': ClassB
}

def load_class(class_name, *args, **kwdargs):
    return allowed_classes[class_name](*args, **kwdargs)

new_class_obj = load_class('B', 'Jan 1st')
</snippet></ROW><ROW><id>17711808</id><snippet>class DoNothing(object):
    def __getattr__(self, name):
        return lambda *args, **kwargs: None
</snippet></ROW><ROW><id>17711808</id><snippet>None</snippet></ROW><ROW><id>17711808</id><snippet>logger = DoNothing()
logger.info("Stuff is being done")  # does nothing
</snippet></ROW><ROW><id>17711808</id><snippet>__getattr__()</snippet></ROW><ROW><id>17711808</id><snippet>__getattribute__()</snippet></ROW><ROW><id>17711808</id><snippet>class LoggerNot(DoNothing):
    loglevel = 0
</snippet></ROW><ROW><id>17711808</id><snippet>loglevel</snippet></ROW><ROW><id>17711935</id><snippet>from collections import defaultdict
indexed_sums = defaultdict(int)
for o in xbs:
    indexed_sums[(o.W, o.X, o.Y)] += o.Z
</snippet></ROW><ROW><id>17711935</id><snippet>xb</snippet></ROW><ROW><id>17711935</id><snippet>xbs = [xb(1, 2, 3, 4, 5),
       xb(1, 2, 3, 4, 5),
       xb(1, 2, 3, 4, 5),
       xb(1, 4, 3, 4, 5),
       xb(1, 4, 3, 4, 3),
       xb(1, 2, 3, 9, 3)]
</snippet></ROW><ROW><id>17711935</id><snippet>print dict(indexed_sums)
# {(4, 3, 4): 8, (2, 3, 4): 15, (2, 3, 9): 3}
</snippet></ROW><ROW><id>17711935</id><snippet>indexed_sums[(2, 3, 4)]
# 15
</snippet></ROW><ROW><id>17711935</id><snippet>defaultdict</snippet></ROW><ROW><id>17711935</id><snippet>(o.W, o.X, o.Y)</snippet></ROW><ROW><id>17711935</id><snippet>defaultdict</snippet></ROW><ROW><id>17711935</id><snippet>indexed_sums = {}
for o in xbs:
    if (o.W, o.X, o.Y) not in indexed_sums:
        indexed_sums[(o.W, o.X, o.Y)] = 0
    indexed_sums[(o.W, o.X, o.Y)] += o.Z
</snippet></ROW><ROW><id>17711935</id><snippet>defaultdict</snippet></ROW><ROW><id>17712140</id><snippet>mysite_categories = Category.objects.all()
</snippet></ROW><ROW><id>17712140</id><snippet>python manage.py startapp myapp
</snippet></ROW><ROW><id>17712140</id><snippet>inspectdb</snippet></ROW><ROW><id>17712140</id><snippet>mysite_categories</snippet></ROW><ROW><id>17712161</id><snippet>void</snippet></ROW><ROW><id>17712161</id><snippet>CONTEXT *</snippet></ROW><ROW><id>17712161</id><snippet>CONTEXT *</snippet></ROW><ROW><id>17712161</id><snippet>CONTEXT</snippet></ROW><ROW><id>17712161</id><snippet>tmp[1]</snippet></ROW><ROW><id>17712161</id><snippet>2.15880221124e-314</snippet></ROW><ROW><id>17712161</id><snippet>0.0</snippet></ROW><ROW><id>17712161</id><snippet>def runner():
    kk = (1,2,3)
    n = 3
    mm = n + 1
    wts = (c_double * n)(1, 1, 1)
    res = (c_double * mm)(0)
    kks = (c_int * len(kk))(*kk)
    n = c_int(n)
    ex = c_double(0)

    libc.cprogram.restype = None

    libc.cprogram(wts, res, kks, n, ex)

    print wts[1]
</snippet></ROW><ROW><id>17712161</id><snippet>1.0</snippet></ROW><ROW><id>17712161</id><snippet>CONTEXT</snippet></ROW><ROW><id>17712161</id><snippet>ctypes</snippet></ROW><ROW><id>17712161</id><snippet>#include &lt;stdlib.h&gt;

typedef struct {
  double *wts;
  double res;
  int kks;
  int n;
  double ex;
} CONTEXT;

CONTEXT *cprogram(double *wts, double *res, int *kks, int n, double *ex) {
  int m;
  m=n+1;
  res[0]=1.0;
  kks[0]=1.0;

  CONTEXT *contexts = malloc(sizeof(CONTEXT) * 4);
  for (int i=0; i!=4; ++i) {
    double *wtsses = malloc(sizeof(double) * 5);
    for (int j=0; j!=4; ++j) {
      wtsses[j] = i + j;
    }
    CONTEXT context = { wtsses, *res, *kks, m, *ex };
    contexts[i] = context;
  }
  return contexts;
}
</snippet></ROW><ROW><id>17712161</id><snippet>print tmp[1].wts[1]</snippet></ROW><ROW><id>17712161</id><snippet>2.0</snippet></ROW><ROW><id>17712161</id><snippet>int *n</snippet></ROW><ROW><id>17712161</id><snippet>*n</snippet></ROW><ROW><id>17712161</id><snippet>void cprogram(double *wts, double *res, int *kks, int *n, double *ex) {
  int m;
  m=*n+1;
  res[0]=1.0;
  kks[0]=1.0;}
</snippet></ROW><ROW><id>17712161</id><snippet>c_int</snippet></ROW><ROW><id>17712161</id><snippet>argtypes</snippet></ROW><ROW><id>17712161</id><snippet>libc.cprogram(wts, res, kks, pointer(n), ex)
</snippet></ROW><ROW><id>17712161</id><snippet>n</snippet></ROW><ROW><id>17712161</id><snippet>n</snippet></ROW><ROW><id>17712161</id><snippet>byref</snippet></ROW><ROW><id>17712161</id><snippet>libc.cprogram(wts, res, kks, byref(n), ex)
</snippet></ROW><ROW><id>17712324</id><snippet>getsizeof</snippet></ROW><ROW><id>17712324</id><snippet>sys.getsizeof(L)
</snippet></ROW><ROW><id>17712324</id><snippet>total_size(L)
</snippet></ROW><ROW><id>17712324</id><snippet>L</snippet></ROW><ROW><id>17712324</id><snippet>0</snippet></ROW><ROW><id>17712324</id><snippet>0</snippet></ROW><ROW><id>17712324</id><snippet>L</snippet></ROW><ROW><id>17712324</id><snippet>gc</snippet></ROW><ROW><id>17712440</id><snippet>mean</snippet></ROW><ROW><id>17712440</id><snippet>order</snippet></ROW><ROW><id>17712440</id><snippet>In [11]: df = pd.DataFrame(np.random.randn(4,4), columns=list('ABCD'))

In [12]: df
Out[12]:
          A         B         C         D
0  0.933069  1.432486  0.288637 -1.867853
1 -0.455952 -0.725268  0.339908  1.318175
2 -0.894331  0.573868  1.116137  0.508845
3  0.661572  0.819360 -0.527327 -0.925478

In [13]: df.mean()
Out[13]:
A    0.061089
B    0.525112
C    0.304339
D   -0.241578
dtype: float64

In [14]: df.mean().order()
Out[14]:
D   -0.241578
A    0.061089
C    0.304339
B    0.525112
dtype: float64
</snippet></ROW><ROW><id>17712440</id><snippet>reindex_axis</snippet></ROW><ROW><id>17712440</id><snippet>In [15]: df.reindex_axis(df.mean().order().index, axis=1)
Out[15]:
          D         A         C         B
0 -1.867853  0.933069  0.288637  1.432486
1  1.318175 -0.455952  0.339908 -0.725268
2  0.508845 -0.894331  1.116137  0.573868
3 -0.925478  0.661572 -0.527327  0.819360
</snippet></ROW><ROW><id>17712451</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>17712451</id><snippet>collections</snippet></ROW><ROW><id>17712451</id><snippet>from collections import defaultdict

d = defaultdict(int)

with open("data.txt") as f:
    for line in f:
        tokens = [t.strip() for t in line.split(",")]
        try:
            sid = int(tokens[3])
            mark = int(tokens[4])
        except ValueError:
            continue
        d[sid] += mark

print d
</snippet></ROW><ROW><id>17712451</id><snippet>defaultdict(&lt;type 'int'&gt;, {217387: 21, 216757: 116, 218382: 78, 216351: 185})
</snippet></ROW><ROW><id>17712451</id><snippet>csvreader</snippet></ROW><ROW><id>17712451</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>17712451</id><snippet>d[sid] += mark
</snippet></ROW><ROW><id>17712752</id><snippet>copy_tree</snippet></ROW><ROW><id>17712752</id><snippet>distutils.log</snippet></ROW><ROW><id>17712752</id><snippet>INFO</snippet></ROW><ROW><id>17712752</id><snippet>from distutils import log
log.set_verbosity(log.INFO)
log.set_threshold(log.INFO)
</snippet></ROW><ROW><id>17712752</id><snippet>sys.stderr</snippet></ROW><ROW><id>17712752</id><snippet>WARN</snippet></ROW><ROW><id>17712752</id><snippet>ERROR</snippet></ROW><ROW><id>17712752</id><snippet>FATAL</snippet></ROW><ROW><id>17712752</id><snippet>sys.stdout</snippet></ROW><ROW><id>17712752</id><snippet>DEBUG</snippet></ROW><ROW><id>17712752</id><snippet>INFO</snippet></ROW><ROW><id>17712752</id><snippet>import logging
logging.basicConfig(level=logging.INFO)
</snippet></ROW><ROW><id>17712818</id><snippet>subAlive</snippet></ROW><ROW><id>17712818</id><snippet>run = alive['subAlive']
</snippet></ROW><ROW><id>17712889</id><snippet>from threading import Thread

t = Thread(target=http_server)
t.start()
</snippet></ROW><ROW><id>17712889</id><snippet>start()</snippet></ROW><ROW><id>17712889</id><snippet>daemon=True</snippet></ROW><ROW><id>17713141</id><snippet>def iterate_my_objects_if_something(self):
    if self.my_objects:
        for x in self.my_objects:
            if x.something:
                yield x
</snippet></ROW><ROW><id>17713327</id><snippet>&gt;&gt;&gt; def phi_m(x, m):
...   rtn = []
...   for n2 in range(0, len(x) * m - 2:
...     n = n2 / m
...     r = n2 - n * m
...     rtn.append(m * x[n] + r * (x[n + 1] - x[n]))
...     print 'n2 =', n2, ': n =', n, ' r =' , r, ' rtn =', rtn
...   rtn    
...
&gt;&gt;&gt; x = [0, 1, 1, 2, 3, 3]
&gt;&gt;&gt; phi_m(x, 2)
n2 = 0 : n = 0  r = 0  rtn = [0]
n2 = 1 : n = 0  r = 1  rtn = [0, 1]
n2 = 2 : n = 1  r = 0  rtn = [0, 1, 2]
n2 = 3 : n = 1  r = 1  rtn = [0, 1, 2, 2]
n2 = 4 : n = 2  r = 0  rtn = [0, 1, 2, 2, 2]
n2 = 5 : n = 2  r = 1  rtn = [0, 1, 2, 2, 2, 3]
n2 = 6 : n = 3  r = 0  rtn = [0, 1, 2, 2, 2, 3, 4]
n2 = 7 : n = 3  r = 1  rtn = [0, 1, 2, 2, 2, 3, 4, 5]
n2 = 8 : n = 4  r = 0  rtn = [0, 1, 2, 2, 2, 3, 4, 5, 6]
n2 = 9 : n = 4  r = 1  rtn = [0, 1, 2, 2, 2, 3, 4, 5, 6, 6]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17713327</id><snippet>m * len(x) - 2</snippet></ROW><ROW><id>17713385</id><snippet>virtualenv test/test -p /usr/bin/my_2.7.5_directory/python2.7
</snippet></ROW><ROW><id>17713502</id><snippet>def check_shallow_copy(lst1, lst2):
    return lst1 is not lst2 and 
           all([x is y for x, y in zip(lst1, lst2)])
</snippet></ROW><ROW><id>17713502</id><snippet>def check_hard_copy(lst1, lst2):
    return lst1 is not lst2 and 
           all([x is not y and x == y for x, y in zip(lst1, lst2)])
</snippet></ROW><ROW><id>17713578</id><snippet>import datetime as DT

s1 = '00:02:25'
s2 = '00:04:40'
FMT = '%M:%S:%f'

d1 = DT.datetime.strptime(s1, FMT)
d2 = DT.datetime.strptime(s2, FMT)

delta = (d2-d1)/2
mid = d1 + delta
print(mid)
</snippet></ROW><ROW><id>17713578</id><snippet>1900-01-01 00:00:03.325000
</snippet></ROW><ROW><id>17713787</id><snippet>def query(id):
    for line in file:
        table = {}
        (table["ID"],table["name"],table["city"]) = line.split(";")
        if id == int(table["ID"]):
             file.close()
             return table
    # ID not found; close file and return empty dict
    file.close()
    return {}
</snippet></ROW><ROW><id>17713993</id><snippet>matplotlib</snippet></ROW><ROW><id>17713993</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax1 = fig.add_subplot(111)
t = np.arange(0.01, 10.0, 0.01)
s1 = np.exp(t)
ax1.plot(t, s1, 'b-')
ax1.set_xlabel('time (s)')
# Make the y-axis label and tick labels match the line color.
ax1.set_ylabel('exp', color='b')
for tl in ax1.get_yticklabels():
    tl.set_color('b')


ax2 = ax1.twinx()
s2 = np.sin(2*np.pi*t)
ax2.plot(t, s2, 'r.')
ax2.set_ylabel('sin', color='r')
for tl in ax2.get_yticklabels():
    tl.set_color('r')
plt.show()
</snippet></ROW><ROW><id>17714080</id><snippet>coo_matrix</snippet></ROW><ROW><id>17714080</id><snippet>col</snippet></ROW><ROW><id>17714080</id><snippet>row</snippet></ROW><ROW><id>17714080</id><snippet>data</snippet></ROW><ROW><id>17714080</id><snippet>from scipy.sparse import coo_matrix
nele=30
nbus=40
col    = [ 2, 3, 6]
row    = [ 5, 5, 5]
val    = [ 0.1 + 0.1j, 0.1 - 0.2j, 0.1 - 0.4j]
test = coo_matrix((val, (row,col)), shape=(nele, nbus), dtype=complex)

print test.col
#[2 3 6]
print test.row
#[5 5 5]
print test.data
#[ 0.1+0.1j  0.1-0.2j  0.1-0.4j]
</snippet></ROW><ROW><id>17714423</id><snippet>album field</snippet></ROW><ROW><id>17714882</id><snippet>wx.App</snippet></ROW><ROW><id>17715300</id><snippet>&lt;input type="file" name="multiple_file_field" multiple&gt;</snippet></ROW><ROW><id>17715614</id><snippet>Type myType = myVariable.GetType();
</snippet></ROW><ROW><id>17715614</id><snippet>String typeName = "My String".GetType().Name; // &lt;- "String"
</snippet></ROW><ROW><id>17715800</id><snippet>f.write("\n" * l)
</snippet></ROW><ROW><id>17716182</id><snippet>&lt;key&gt;EnvironmentVariables&lt;/key&gt;
    &lt;dict&gt;
    &lt;key&gt;PATH&lt;/key&gt;&lt;string&gt;/Users/user/.virtualenvs/oraenv/lib/python2.7/site-packages/&lt;/string&gt;
    &lt;key&gt;PYTHONPATH&lt;/key&gt;&lt;string&gt;/Users/user/.virtualenvs/oraenv/lib/python2.7/site-package/&lt;/string&gt;
    &lt;/dict&gt;
</snippet></ROW><ROW><id>17716745</id><snippet>context_list</snippet></ROW><ROW><id>17716745</id><snippet>success()</snippet></ROW><ROW><id>17716745</id><snippet>console</snippet></ROW><ROW><id>17716745</id><snippet>$.load()</snippet></ROW><ROW><id>17716745</id><snippet>$.getJSON()</snippet></ROW><ROW><id>17716745</id><snippet>#Django
def search_view(keyword, request):
   search_result = SearchModel.objects.filter(some_field=keyword)
   t = loader.get_template("some_result_template.html")                
   c = Context({'search_results':search_result})
   return render(t.render(c))

#jQuery
$("#result").load("url_to_your_search", { 'keyword': 'search_me' } );
</snippet></ROW><ROW><id>17716745</id><snippet>#Django
from django.core import serializers

def search_view(keyword, request):
    search_result = SearchModel.objects.filter(some_field=keyword)
    json_data = serializers.serialize('json', search_result)
    return HttpResponse(json_data, mimetype='application/json')

#jQuery
$.getJSON('url_to_your_search_view', { keyword: "search_me" }, function(json_data) {
  var items = [];

  $.each(json_data, function(key, val) {
    items.push('&lt;li id="' + key + '"&gt;' + val + '&lt;/li&gt;');
  });

  $('&lt;ul/&gt;', {
    'class': 'my-new-list',
    html: items.join('')
  }).appendTo('body');
});
</snippet></ROW><ROW><id>17716829</id><snippet>import</snippet></ROW><ROW><id>17716829</id><snippet>*</snippet></ROW><ROW><id>17717548</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match(r"^(?P&lt;username&gt;[\w.@+-_]+)/$", "foobar/changepassword/")
&lt;_sre.SRE_Match object at 0x7f949c54be40&gt;
</snippet></ROW><ROW><id>17717548</id><snippet>\w</snippet></ROW><ROW><id>17717548</id><snippet>&gt;&gt;&gt; re.match(r"\w", "foobar/changepassword/")
&lt;_sre.SRE_Match object at 0x7f949c5a1d30&gt;
</snippet></ROW><ROW><id>17717690</id><snippet>Q</snippet></ROW><ROW><id>17717690</id><snippet>from django.db.models import Q
MyModel.objects.filter(Q(arg1=value) | Q(arg2=value))
</snippet></ROW><ROW><id>17718093</id><snippet>list1=[[['B', 10], 1], [['C', 15], 1], [['F', 30], 1]]
list2=[[['G', 20], 2], [['D', 25], 1]]

list2_iter = iter(list2)
for item1 in list1:
    in_list2 = False
    for item2 in list2_iter:
        if item1[1] == item2[1]:
            print "Match" if item1 == item2 else "Modified", item1, item2
            in_list2 = True
            break
        else:
            print "Inserted", item2
    if not in_list2:
        print "Deleted", item1
</snippet></ROW><ROW><id>17718093</id><snippet>list2</snippet></ROW><ROW><id>17718093</id><snippet>list2</snippet></ROW><ROW><id>17718093</id><snippet>Inserted [['G', 20], 2]
Modified [['B', 10], 1] [['D', 25], 1]
Deleted [['C', 15], 1]
Deleted [['F', 30], 1]
</snippet></ROW><ROW><id>17718093</id><snippet>list1</snippet></ROW><ROW><id>17718093</id><snippet>list2</snippet></ROW><ROW><id>17718093</id><snippet>import operator

def diff(s1, s2, match=operator.eq, neutral="*", subst=2):
    """s1, s2: the two strings or lists to match
    match: function to determine whether two elements match up
    neutral: 'neutral' element for padding
    subst: substitution costs
    """
    s1, s2 = neutral + s1, neutral + s2

    # calculate edit distance / sequence match with DP
    A = [[0] * len(s2) for i in range(len(s1))]
    for i in range(len(s1)):
        for k in range(len(s2)):
            if min(i, k) == 0:
                A[i][k] = max(i, k)
            else:
                diag = 0 if match(s1[i], s2[k]) else subst
                A[i][k] = min(A[i-1][k-1] + diag,
                              A[i  ][k-1] + 1,
                              A[i-1][k  ] + 1)

    # reconstruct path
    path, i, k = [], len(s1)-1, len(s2)-1
    while i or k:
        if A[i][k] == A[i-1][k] + 1:
            path, i = [-1] + path, i-1
        elif A[i][k] == A[i][k-1] + 1:
            path, k = [1] + path, k-1
        else:
            path, i, k = [0] + path, i-1, k-1

    return A[len(s1)-1][len(s2)-1], path


def print_match(list1, list2, path):
    i1, i2 = iter(list1), iter(list2)
    for p in path:
        if p == -1: print "DEL %20r"      %  next(i1)
        if p ==  0: print "EQ  %20r %20r" % (next(i1), next(i2))
        if p == +1: print "INS %41r"      %            next(i2)

# with strings
word1, word2 = "INTENTION", "EXECUTION"
x, path = diff(word1, word2)
print_match(word1, word2, path)

# with your lists of lists
list1 = [[['B', 10], 1], [['C', 15], 1], [['F', 30], 1]]
list2 = [[['G', 20], 2], [['D', 25], 1]]
x, path = diff(list1, list2, match=lambda x, y: x[1] == y[1], neutral=[[None, -1]])
print_match(list1, list2, path)
</snippet></ROW><ROW><id>17718183</id><snippet>imp.reload</snippet></ROW><ROW><id>17718328</id><snippet>import string

result = [fdist.get(l, 0) for l in string.letters]
</snippet></ROW><ROW><id>17718328</id><snippet>result = [fdist.get(l, 0) for l in string.ascii_lowercase]
</snippet></ROW><ROW><id>17718354</id><snippet>&gt;&gt;&gt; list = [['foobar', 'a', 'b'], ['x', 'c'], ['y', 'd', 'e', 'foobar'], ['z', 'f']]
&gt;&gt;&gt; sum(x.count('foobar') for x in list)
2
</snippet></ROW><ROW><id>17718363</id><snippet>default_value</snippet></ROW><ROW><id>17718363</id><snippet>NameError: global name 'default_value' is not defined
</snippet></ROW><ROW><id>17718363</id><snippet>default_value = None
</snippet></ROW><ROW><id>17718711</id><snippet>result_dict = [u.__dict__ for u in my_query.all()]
</snippet></ROW><ROW><id>17718711</id><snippet>result_dict</snippet></ROW><ROW><id>17718711</id><snippet>for</snippet></ROW><ROW><id>17718742</id><snippet>string name="ID"</snippet></ROW><ROW><id>17718742</id><snippet>string</snippet></ROW><ROW><id>17718742</id><snippet>string</snippet></ROW><ROW><id>17718742</id><snippet>....
dom = parseString(data)
for s in dom.getElementsByTagName('string'):
    if s.getAttribute('name') == 'ID':
        print s.childNodes[0].data
</snippet></ROW><ROW><id>17718742</id><snippet>import lxml.html
dom = lxml.html.fromstring(data)
for s in dom.cssselect('string[name=ID]'):
    print s.text
</snippet></ROW><ROW><id>17718746</id><snippet>/proc/meminfo</snippet></ROW><ROW><id>17718746</id><snippet>MemTotal</snippet></ROW><ROW><id>17718746</id><snippet>/proc/sysinfo</snippet></ROW><ROW><id>17718971</id><snippet>max</snippet></ROW><ROW><id>17718971</id><snippet>min</snippet></ROW><ROW><id>17718971</id><snippet>min()</snippet></ROW><ROW><id>17718971</id><snippet>max()</snippet></ROW><ROW><id>17719039</id><snippet>グ</snippet></ROW><ROW><id>17719039</id><snippet>1</snippet></ROW><ROW><id>17719039</id><snippet>re.UNICODE</snippet></ROW><ROW><id>17719039</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>17719039</id><snippet>グ</snippet></ROW><ROW><id>17719039</id><snippet>ã[control char]°</snippet></ROW><ROW><id>17719561</id><snippet>webapp2</snippet></ROW><ROW><id>17719561</id><snippet>webapp</snippet></ROW><ROW><id>17719561</id><snippet>lang</snippet></ROW><ROW><id>17719561</id><snippet>lang</snippet></ROW><ROW><id>17719561</id><snippet>request.GET</snippet></ROW><ROW><id>17719561</id><snippet>GET</snippet></ROW><ROW><id>17719561</id><snippet>POST</snippet></ROW><ROW><id>17719561</id><snippet>/lang?hl=en_US</snippet></ROW><ROW><id>17719561</id><snippet>request.GET</snippet></ROW><ROW><id>17719561</id><snippet>/lang/en_US</snippet></ROW><ROW><id>17719561</id><snippet>&lt;lang&gt;</snippet></ROW><ROW><id>17719561</id><snippet>strict_slash</snippet></ROW><ROW><id>17719672</id><snippet>axis</snippet></ROW><ROW><id>17719672</id><snippet>set_tick_params()</snippet></ROW><ROW><id>17719672</id><snippet>pad</snippet></ROW><ROW><id>17719672</id><snippet>import datetime
import random
import matplotlib.pyplot as plt
import matplotlib.dates as dates

# make up some data
x = [datetime.datetime.now() + datetime.timedelta(hours=i) for i in range(100)]
y = [i+random.gauss(0,1) for i,_ in enumerate(x)]

# plot
plt.plot(x,y)
# beautify the x-labels
plt.gcf().autofmt_xdate()

ax = plt.gca()
# set date ticks to something sensible:
xax = ax.get_xaxis()
xax.set_major_locator(dates.DayLocator())
xax.set_major_formatter(dates.DateFormatter('%d/%b'))

xax.set_minor_locator(dates.HourLocator(byhour=range(0,24,3)))
xax.set_minor_formatter(dates.DateFormatter('%H'))
xax.set_tick_params(which='major', pad=15)

plt.show()
</snippet></ROW><ROW><id>17719774</id><snippet>def</snippet></ROW><ROW><id>17719774</id><snippet>def do_stuff_with_files(infile, outfile):
    out = open(infile,'w')
    infile = open(outfile,'r')
    # the rest of your script
</snippet></ROW><ROW><id>17719774</id><snippet>do_stuff_with_files('/home/directory/a.sam', '/home/directory/a.out')
</snippet></ROW><ROW><id>17719774</id><snippet>glob</snippet></ROW><ROW><id>17719774</id><snippet>import glob
indir, outdir = '/home/directory/', '/home/directory/out/'
files = glob.glob1(indir, '*.sam')
infiles  = [indir  + f              for f in files]
outfiles = [outdir + f[:-3] + "out" for f in files]
for infile, outfile in zip(infiles, outfiles):
    do_stuff_with_files(infile, outfile)
</snippet></ROW><ROW><id>17720593</id><snippet>yield self._test_validate_helper_eq, {}, {'price', -1}, 'price', -1`
</snippet></ROW><ROW><id>17720593</id><snippet>{'price', -1}</snippet></ROW><ROW><id>17720593</id><snippet>{'price': -1}</snippet></ROW><ROW><id>17720833</id><snippet>json.dumps</snippet></ROW><ROW><id>17720833</id><snippet>dateutil.parser.parse</snippet></ROW><ROW><id>17720833</id><snippet>In [6]: json.dumps(datetime.now().isoformat())
Out[6]: '"2013-07-18T12:21:30.278886"'
</snippet></ROW><ROW><id>17720833</id><snippet>json.dumps</snippet></ROW><ROW><id>17720833</id><snippet>In [7]: dateutil.parser.parse(datetime.now().isoformat())
Out[7]: datetime.datetime(2013, 7, 18, 12, 21, 56, 894926)
</snippet></ROW><ROW><id>17720996</id><snippet>In [11]: xl = pd.ExcelFile("C:\GreenCSV\Calgary\CWater.xlsx")

In [12]: xl.sheet_names  # in your example it may be different
Out[12]: [u'Sheet1', u'Sheet2', u'Sheet3']

In [13]: dfs = {sheet: xl.parse(sheet) for sheet in xl.sheet_names}

In [14]: dfs['Sheet1'] # access DataFrame by sheet name
</snippet></ROW><ROW><id>17720996</id><snippet>parse</snippet></ROW><ROW><id>17720996</id><snippet>skiprows</snippet></ROW><ROW><id>17721373</id><snippet>PYTHONPAH</snippet></ROW><ROW><id>17721373</id><snippet>sys.path</snippet></ROW><ROW><id>17721373</id><snippet>os.environ</snippet></ROW><ROW><id>17721539</id><snippet>screen_name</snippet></ROW><ROW><id>17721539</id><snippet>statuses = api.GetUserTimeline(screen_name="@gvanrossum")
</snippet></ROW><ROW><id>17722134</id><snippet>sessionObj = requests.session()
sessionOj.get(...) # Do whatever ...
</snippet></ROW><ROW><id>17722134</id><snippet>login.php</snippet></ROW><ROW><id>17722134</id><snippet>files</snippet></ROW><ROW><id>17722134</id><snippet>import requests

sessionObj = requests.session()
url1='http://www.abc.com/login.php'
r = sessionObj.post(url1, params={'username':'usernamehere' , 'password':'password here'})
print r.status_code //msg:'200'


filehandle = open('./tmp.txt')
url2='http://www.abc.com/uploader.php'
r = sessionObj.post(url2, data={},files = {'upload':filehandle})
print r.text
</snippet></ROW><ROW><id>17722201</id><snippet>finally</snippet></ROW><ROW><id>17722201</id><snippet>open</snippet></ROW><ROW><id>17722354</id><snippet>1 * * * * python /home/prkumar/Desktop/python/sample.py &gt;&gt; /home/prkumar/Desktop/python/output.log
</snippet></ROW><ROW><id>17722635</id><snippet>html2text</snippet></ROW><ROW><id>17722635</id><snippet>from scrapy.selector import HtmlXPathSelector
from scrapy.spider import BaseSpider
import html2text


class WikiSpider(BaseSpider):
    name = "wiki_spider"
    allowed_domains = ["www.wikipedia.org"]
    start_urls = ["http://en.wikipedia.org/wiki/Python_(programming_language)"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        sample = hxs.select("//div[@id='mw-content-text']/p[1]").extract()[0]

        converter = html2text.HTML2Text()
        converter.ignore_links = True
        print converter.handle(sample)
</snippet></ROW><ROW><id>17722682</id><snippet>urllib.quote()</snippet></ROW><ROW><id>17722682</id><snippet>urllib.quote_plus()</snippet></ROW><ROW><id>17722682</id><snippet>-</snippet></ROW><ROW><id>17722682</id><snippet>%xx</snippet></ROW><ROW><id>17722682</id><snippet>'_.-'</snippet></ROW><ROW><id>17722682</id><snippet>&gt;&gt;&gt; from urllib import quote
&gt;&gt;&gt; quote('abc-def')
'abc-def'
&gt;&gt;&gt; quote('some data that needs quoting!')
'some%20data%20that%20needs%20quoting%21'
</snippet></ROW><ROW><id>17722682</id><snippet>quote</snippet></ROW><ROW><id>17722682</id><snippet>quote_plus</snippet></ROW><ROW><id>17722682</id><snippet>urllib.parse</snippet></ROW><ROW><id>17722704</id><snippet>fruit = set(("apple", "banana"))
green = set(("apple", "sometree", "someplant", "otherplant"))
nature = set(("apple", "banana", "sometree", "someplant", "otherplant"))
tree = set (("sometree",))
wood = set (("sometree", "someplant", "otherplant"))

In [90]: fruit.intersection(nature)
Out[90]: set(['apple', 'banana'])

In [91]: fruit.intersection(nature).intersection(green)
Out[91]: set(['apple'])

In [92]: green.intersection(wood).intersection(nature)
Out[92]: set(['sometree', 'someplant', 'otherplant'])

In [93]: green.intersection(wood).intersection(nature).intersection(tree)
Out[93]: set(['sometree'])
</snippet></ROW><ROW><id>17722704</id><snippet>In [90]: reduce(set.intersection, [fruit, nature])
Out[90]: set(['apple', 'banana'])

In [91]: reduce(set.intersection, [fruit, nature, green])
Out[91]: set(['apple'])

In [92]: reduce(set.intersection, [green, wood, nature])
Out[92]: set(['sometree', 'someplant', 'otherplant'])

In [93]: reduce(set.intersection, [green, wood, nature, tree])
Out[93]: set(['sometree'])
</snippet></ROW><ROW><id>17722873</id><snippet>import sys

from hive import ThriftHive
from hive.ttypes import HiveServerException

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

try:
  transport = TSocket.TSocket('localhost', 10000)
  transport = TTransport.TBufferedTransport(transport)
  protocol = TBinaryProtocol.TBinaryProtocol(transport)
  client = ThriftHive.Client(protocol)
  transport.open()
  client.execute("CREATE TABLE r(a STRING, b INT, c DOUBLE)")
  client.execute("LOAD TABLE LOCAL INPATH '/path' INTO TABLE r")
  client.execute("SELECT * FROM r")
  while (1):
    row = client.fetchOne()
    if (row == None):
       break
    print row

  client.execute("SELECT * FROM r")
  print client.fetchAll()
  transport.close()
except Thrift.TException, tx:
  print '%s' % (tx.message)
</snippet></ROW><ROW><id>17722921</id><snippet>int num = 1234;
double sum = num.ToString().Sum(s =&gt; Char.GetNumericValue(s));
</snippet></ROW><ROW><id>17723037</id><snippet>itertools.product()</snippet></ROW><ROW><id>17723037</id><snippet>repeat=n</snippet></ROW><ROW><id>17723037</id><snippet>&gt;&gt;&gt; list(itertools.product(range(2), repeat=3))
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]
</snippet></ROW><ROW><id>17723037</id><snippet>help(itertools)</snippet></ROW><ROW><id>17723435</id><snippet>tone</snippet></ROW><ROW><id>17723435</id><snippet>tone</snippet></ROW><ROW><id>17723435</id><snippet>parser.parse_args()</snippet></ROW><ROW><id>17723435</id><snippet>__main__</snippet></ROW><ROW><id>17723435</id><snippet>if __name__ == '__main__':
    # run as a script, not imported as a module
    args = parser.parse_args()
</snippet></ROW><ROW><id>17723481</id><snippet>querystring = "curl -D- -u fred:fred -X GET -H "Content-Type: application/json"      http://kelpie9:8081/rest/api/2/search?jql=project=QA+order+by+duedate&amp;fields=id,key"
</snippet></ROW><ROW><id>17723481</id><snippet>querystring = """curl -D- -u fred:fred -X GET -H "Content-Type: application/json" http://kelpie9:8081/rest/api/2/search?jql=project=QA+order+by+duedate&amp;fields=id,key"""
</snippet></ROW><ROW><id>17723673</id><snippet>dir()</snippet></ROW><ROW><id>17723673</id><snippet>getattr()</snippet></ROW><ROW><id>17723673</id><snippet>hasattr()</snippet></ROW><ROW><id>17723673</id><snippet>dir()</snippet></ROW><ROW><id>17723673</id><snippet>dir()</snippet></ROW><ROW><id>17723673</id><snippet>dir()</snippet></ROW><ROW><id>17723673</id><snippet>metaclass</snippet></ROW><ROW><id>17723673</id><snippet>hasattr()</snippet></ROW><ROW><id>17723673</id><snippet>dir()</snippet></ROW><ROW><id>17723673</id><snippet>hasattr()</snippet></ROW><ROW><id>17723673</id><snippet>&gt;&gt;&gt; class Meta(type):
...     foo = 'bar'
... 
&gt;&gt;&gt; class Foo(metaclass=Meta):
...     pass
... 
&gt;&gt;&gt; hasattr(Foo, 'foo')
True
&gt;&gt;&gt; 'foo' in dir(Foo)
False
</snippet></ROW><ROW><id>17723673</id><snippet>__dir__()</snippet></ROW><ROW><id>17723673</id><snippet>hasattr()</snippet></ROW><ROW><id>17723673</id><snippet>dir()</snippet></ROW><ROW><id>17723673</id><snippet>.__dir__()</snippet></ROW><ROW><id>17723673</id><snippet>hasattr()</snippet></ROW><ROW><id>17723783</id><snippet>**kwargs</snippet></ROW><ROW><id>17723975</id><snippet>a = 4
b = a
</snippet></ROW><ROW><id>17723975</id><snippet>4</snippet></ROW><ROW><id>17723975</id><snippet>b = 9
</snippet></ROW><ROW><id>17723975</id><snippet>b</snippet></ROW><ROW><id>17723975</id><snippet>a = []
b = a
b = [9]
</snippet></ROW><ROW><id>17723975</id><snippet>b</snippet></ROW><ROW><id>17723975</id><snippet>a</snippet></ROW><ROW><id>17723975</id><snippet>list</snippet></ROW><ROW><id>17723975</id><snippet>a = []
b = a  # the same list
c = [] # another empty one

a.append(3)
print a, b, c # a as well as b = [3], c = [] as it is a different one

d = a[:] # copy it completely
b.append(9)
# now a = b = [3, 9], c = [], d = [3], a copy of the old a resp. b
</snippet></ROW><ROW><id>17724082</id><snippet>cPickle</snippet></ROW><ROW><id>17724082</id><snippet>import cPickle as pickle</snippet></ROW><ROW><id>17724135</id><snippet>@command
def build():
    """ Builds this site.
    """
    print("Building website...")
    app.debug = False
    app.testing = True
    asset_manager.config['ASSETS_DEBUG'] = False
    freezer.freeze()
    local("cp ./static/*.ico ./build/")
    local("cp ./static/*.txt ./build/")
    local("cp ./static/*.xml ./build/")
    print("Done.")
</snippet></ROW><ROW><id>17724135</id><snippet>app.test_client()</snippet></ROW><ROW><id>17724266</id><snippet>&lt;script src="/static/js/endless_on_scroll.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/static/js/endless-pagination.js" type="text/javascript"&gt;&lt;/script&gt;   
</snippet></ROW><ROW><id>17724266</id><snippet>&lt;link rel="stylesheet" type="text/css" href="/static/css/style.css"&gt;
</snippet></ROW><ROW><id>17724295</id><snippet>timeout = Timeout(10)

def downloadSite(url):
    with Timeout(10):
        downloadUrl(url)

urls = ["url1", "url2", "url3"]

workers = []
limit = 5
counter = 0
for i in urls:
    # limit to 5 URL requests at a time
    if counter &lt; limit:
        workers.append(gevent.spawn(downloadSite, i))
        counter += 1
    else:
        gevent.joinall(workers)
        workers = [i,]
        counter = 0
gevent.joinall(workers)
</snippet></ROW><ROW><id>17724702</id><snippet>l = [my_string]
</snippet></ROW><ROW><id>17724774</id><snippet>.is_superuser</snippet></ROW><ROW><id>17724774</id><snippet>.is_primary_user</snippet></ROW><ROW><id>17724774</id><snippet>from django.db.models.signals import pre_save
from django.contrib.auth import User

# method for updating
def update_primary_user(sender, instance, **kwargs):
     if instance.pk:
          return
     if instance.is_superuser and not instance.userprofile.is_primary_user:
          instance.userprofile.is_primary_user = True
          instance.userprofile.save()

# register the signal
pre_save.connect(update_primary_user, sender=User)
</snippet></ROW><ROW><id>17725145</id><snippet>retweeted_by</snippet></ROW><ROW><id>17725145</id><snippet>retweets</snippet></ROW><ROW><id>17725145</id><snippet>results = api.retweets(firstTweet.id)
</snippet></ROW><ROW><id>17725770</id><snippet>monthInput == "january" or monthInput == "1"</snippet></ROW><ROW><id>17725770</id><snippet>monthInput in ["january", "1"]</snippet></ROW><ROW><id>17725770</id><snippet>True</snippet></ROW><ROW><id>17725770</id><snippet>False</snippet></ROW><ROW><id>17725770</id><snippet>mothInput</snippet></ROW><ROW><id>17725770</id><snippet>&gt;&gt;&gt; monthInput = "1"
&gt;&gt;&gt; monthInput == "january" or monthInput == "1"
True
&gt;&gt;&gt; monthInput in ["january", "1"]
True
</snippet></ROW><ROW><id>17725770</id><snippet>monthInput in {'january', '1'}
</snippet></ROW><ROW><id>17725770</id><snippet>or</snippet></ROW><ROW><id>17726024</id><snippet>scselect</snippet></ROW><ROW><id>17726024</id><snippet>if choice == 1</snippet></ROW><ROW><id>17726024</id><snippet>b</snippet></ROW><ROW><id>17726024</id><snippet>c</snippet></ROW><ROW><id>17726024</id><snippet>scselect SRN</snippet></ROW><ROW><id>17726024</id><snippet>scselect HOME</snippet></ROW><ROW><id>17726024</id><snippet>subprocess</snippet></ROW><ROW><id>17726024</id><snippet>if</snippet></ROW><ROW><id>17726024</id><snippet>if choice == 1:
    print "\nSwitching to HOME...\n"
    output = subprocess.Popen(home, shell=True, stdout=subprocess.PIPE)
    print output
</snippet></ROW><ROW><id>17726418</id><snippet>boxplot(x, notch=False, sym='+', vert=True, whis=1.5,
        positions=None, widths=None, patch_artist=False,
        bootstrap=None, usermedians=None, conf_intervals=None)
</snippet></ROW><ROW><id>17726428</id><snippet>.coveragerc</snippet></ROW><ROW><id>17726428</id><snippet>pytest-cov</snippet></ROW><ROW><id>17726428</id><snippet>[run]
exclude_lines =

    raise NoSuchElementException
</snippet></ROW><ROW><id>17726428</id><snippet>py.test --cov-config .coveragerc [other parameters]</snippet></ROW><ROW><id>17726428</id><snippet>--cov-config</snippet></ROW><ROW><id>17726428</id><snippet>.coveragerc</snippet></ROW><ROW><id>17726428</id><snippet>coverage.py</snippet></ROW><ROW><id>17726428</id><snippet>pytest-cov</snippet></ROW><ROW><id>17726428</id><snippet>main.py</snippet></ROW><ROW><id>17726428</id><snippet>def main():
    try:
        print 1 / 0
    except:
        raise Exception('test')
</snippet></ROW><ROW><id>17726428</id><snippet>test_main.py</snippet></ROW><ROW><id>17726428</id><snippet>import unittest
import main

def test_main():
    main.main()


if __name__ == '__main__':
    testcase = unittest.FunctionTestCase(test_main)
    unittest.main()
</snippet></ROW><ROW><id>17726428</id><snippet>py.test --cov main.py</snippet></ROW><ROW><id>17726432</id><snippet>class Foo(models.Model):
    ...

class Bar(models.Model):
    ...
    foo = models.ForeignKey(Foo, related_name="related_bars")
</snippet></ROW><ROW><id>17726432</id><snippet>bar.foo</snippet></ROW><ROW><id>17726432</id><snippet>foo.related_bars</snippet></ROW><ROW><id>17726432</id><snippet>foo.bar_set</snippet></ROW><ROW><id>17726432</id><snippet>Task.maintenance</snippet></ROW><ROW><id>17726432</id><snippet>Maintenance</snippet></ROW><ROW><id>17726432</id><snippet>Template</snippet></ROW><ROW><id>17726432</id><snippet>maintenance</snippet></ROW><ROW><id>17726443</id><snippet>b = zip(*a)
</snippet></ROW><ROW><id>17726443</id><snippet>&gt;&gt;&gt; a = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]
&gt;&gt;&gt; zip(*a)
[(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]
</snippet></ROW><ROW><id>17726443</id><snippet>zip()</snippet></ROW><ROW><id>17726443</id><snippet>a</snippet></ROW><ROW><id>17726443</id><snippet>*</snippet></ROW><ROW><id>17726443</id><snippet>a</snippet></ROW><ROW><id>17726443</id><snippet>zip()</snippet></ROW><ROW><id>17726443</id><snippet>b = map(list, zip(*a))
</snippet></ROW><ROW><id>17726453</id><snippet>44100</snippet></ROW><ROW><id>17726453</id><snippet>[ 1, 2147483647 ]</snippet></ROW><ROW><id>17726453</id><snippet>44100</snippet></ROW><ROW><id>17726453</id><snippet>get_value()</snippet></ROW><ROW><id>17726453</id><snippet>your_tuple[0].get_value("rate")
</snippet></ROW><ROW><id>17726551</id><snippet>strLst = 'I am student'.split()
</snippet></ROW><ROW><id>17726551</id><snippet>sortedLst = sorted(strLst, key=str.lower)
</snippet></ROW><ROW><id>17726551</id><snippet>keylambda = lambda s: str.lower(s[2])
sortedList = sorted(strLst, key=keylambda)
</snippet></ROW><ROW><id>17726567</id><snippet>index-url</snippet></ROW><ROW><id>17726567</id><snippet>$ pip install --index-url http://pypi.beastcraft.net/ numpy</snippet></ROW><ROW><id>17726877</id><snippet>ymin</snippet></ROW><ROW><id>17726877</id><snippet>import matplotlib.pyplot as plt
import numpy as np

var = [[25.00, 35.68, 29.02, 25.46, 30.58, 30.86, 38.08, 38.63,
        25.19, 32.11, 26.57, 37.23, 37.97, 27.38, 27.25, 33.33,
        31.41, 26.93, 28.42, 25.99, 30.09, 31.87, 34.40, 33.46,
        31.76, 34.03, 27.01, 27.52, 30.41, 25.84, 25.84]]
fig, ax = plt.subplots()#figsize = (10, 10))
ax.hist(var[0],histtype = 'step')
plt.ylim(ymin=0)
plt.show()
</snippet></ROW><ROW><id>17726877</id><snippet>v1.3</snippet></ROW><ROW><id>17726877</id><snippet>&gt;&gt;&gt; matplotlib.__version__
'1.1.1rc'
</snippet></ROW><ROW><id>17726905</id><snippet>if ocrText == errorMsg:
</snippet></ROW><ROW><id>17726905</id><snippet>if text == errorMsg:
</snippet></ROW><ROW><id>17726905</id><snippet>cb.OpenClipboard()
cb.EmptyClipboard()
cb.SetClipboardText(errorMsg)
cb.CloseClipboard()
</snippet></ROW><ROW><id>17726905</id><snippet>EmptyClipboard</snippet></ROW><ROW><id>17726929</id><snippet>cPickle.dump((train_set,valid_set,test_set), f, 0) 
</snippet></ROW><ROW><id>17726929</id><snippet>with gzip.open(outfile, 'wb') as f:
    # ...
    cPickle.dump((train_set,valid_set,test_set), f, 0) 
</snippet></ROW><ROW><id>17726929</id><snippet>open(outfile)</snippet></ROW><ROW><id>17726929</id><snippet>IOError: File not open for writing</snippet></ROW><ROW><id>17727081</id><snippet>lst = [{'score': 5, 'tally': 6},
       {'score': 1, 'tally': None},
       {'score': None, 'tally': None}]

[v for m in lst for v in m.values() if v is not None]
=&gt; [6, 5, 1]
</snippet></ROW><ROW><id>17727195</id><snippet> g(*[4,6,7])
</snippet></ROW><ROW><id>17727195</id><snippet>sum</snippet></ROW><ROW><id>17727195</id><snippet>&gt;&gt;&gt; g = lambda *arg: sum(arg)
&gt;&gt;&gt; print g(4, 5, 6)
15
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17727195</id><snippet>g = lambda alist: sum(alist)
print g([4,6,7])
</snippet></ROW><ROW><id>17727266</id><snippet>class Test:
    def __init__(self):
        self._var = 1

    @property
    def var(self):
        return self._var

    @var.setter
    def var(self, value):
        # add stuff here that you want to happen on var assignment
        self._var = value
</snippet></ROW><ROW><id>17727275</id><snippet>git_path = "C:\\Program Files (x86)\\Git\\bin\\"
os.environ["PATH"} += git_path + ';'
</snippet></ROW><ROW><id>17727285</id><snippet>Suspected Terms of Service Abuse ...... responseStatus:403
</snippet></ROW><ROW><id>17727349</id><snippet>$ curl -D - -o /dev/null http://www.dn.se
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Server: Microsoft-IIS/7.5
X-Powered-By: ASP.NET
Cache-Control: public, max-age=49
Date: Thu, 18 Jul 2013 15:09:37 GMT
Transfer-Encoding:  chunked
Connection: keep-alive
Connection: Transfer-Encoding
Expires: Tue, 01 January 2013 01:00:00 GMT

100  511k    0  511k    0     0  1664k      0 --:--:-- --:--:-- --:--:-- 1809k
</snippet></ROW><ROW><id>17727349</id><snippet>Set-Cookie</snippet></ROW><ROW><id>17727349</id><snippet>Set-Cookie</snippet></ROW><ROW><id>17727349</id><snippet>Set-Cookie</snippet></ROW><ROW><id>17727473</id><snippet>distutils</snippet></ROW><ROW><id>17727473</id><snippet>pip</snippet></ROW><ROW><id>17727473</id><snippet>setup.py</snippet></ROW><ROW><id>17727473</id><snippet>setuptools</snippet></ROW><ROW><id>17727473</id><snippet>setuptools</snippet></ROW><ROW><id>17727473</id><snippet>install_requires</snippet></ROW><ROW><id>17727473</id><snippet>setup(name='MyStuff',
      version='1.0',
      install_requires=['progressbar'],
      # ...
)
</snippet></ROW><ROW><id>17727473</id><snippet>os</snippet></ROW><ROW><id>17727473</id><snippet>sys</snippet></ROW><ROW><id>17727785</id><snippet>#!/usr/local/bin/python2.7
</snippet></ROW><ROW><id>17727785</id><snippet>-bash: ./test.py: /usr/local/bin/python2.7^M: bad interpreter: No such file or directory.
</snippet></ROW><ROW><id>17727817</id><snippet>&gt;&gt;&gt; data = """4. A drawer locli:ing device for locl@.ing ,t  
         15 tier of draivers, one of which is lock controllecl, comprising

         twc, drawer retainina m--mbe , rs loica@ted at the front of th-. 
         drawer@' oiie acljacept each side of the tier of dra,-wers ar,d
          arranged to 
         overlap the front of the,"""
</snippet></ROW><ROW><id>17727817</id><snippet>&gt;&gt;&gt; import re
</snippet></ROW><ROW><id>17727817</id><snippet>&gt;&gt;&gt; r = re.split(r'\n\s*\n', data) # for more than 2 newlines: r'\n[\s\n]*\n'
</snippet></ROW><ROW><id>17727817</id><snippet>&gt;&gt;&gt; r[0]
'4. A drawer locli:ing device for locl@.ing ,t  \n         15 tier of draivers, one of which is lock controllecl, comprising'
&gt;&gt;&gt; r[1]
"         twc, drawer retainina m--mbe , rs loica@ted at the front of th-. \n         drawer@' oiie acljacept each side of the tier of dra,-wers ar,d\n          arranged to \n         overlap the front of the,"
</snippet></ROW><ROW><id>17727860</id><snippet>or</snippet></ROW><ROW><id>17727860</id><snippet>|</snippet></ROW><ROW><id>17727860</id><snippet>or</snippet></ROW><ROW><id>17727860</id><snippet>|</snippet></ROW><ROW><id>17727860</id><snippet>str</snippet></ROW><ROW><id>17727860</id><snippet>if myjson[row]['languages'] in ['', 'english']: pass</snippet></ROW><ROW><id>17727989</id><snippet>for f in /var/log/wtmp*; do last -f $f reboot;done
</snippet></ROW><ROW><id>17728053</id><snippet>u</snippet></ROW><ROW><id>17728053</id><snippet>help u</snippet></ROW><ROW><id>17728053</id><snippet>u(p)
Move the current frame one level up in the stack trace
(to an older frame).
</snippet></ROW><ROW><id>17728053</id><snippet>d(own)</snippet></ROW><ROW><id>17728053</id><snippet>w(here)</snippet></ROW><ROW><id>17728053</id><snippet>d(own)
Move the current frame one level down in the stack trace
(to a newer frame).
w(here)
Print a stack trace, with the most recent frame at the bottom.
An arrow indicates the "current frame", which determines the
context of most commands.  'bt' is an alias for this command.
</snippet></ROW><ROW><id>17728053</id><snippet>u</snippet></ROW><ROW><id>17728053</id><snippet>!</snippet></ROW><ROW><id>17728053</id><snippet>!u
!u.url
</snippet></ROW><ROW><id>17728053</id><snippet>print()</snippet></ROW><ROW><id>17728053</id><snippet>print(u)
</snippet></ROW><ROW><id>17728053</id><snippet>help pdb</snippet></ROW><ROW><id>17728053</id><snippet>Oldest frame</snippet></ROW><ROW><id>17728053</id><snippet>Newest frame</snippet></ROW><ROW><id>17728053</id><snippet>c(ontinue)</snippet></ROW><ROW><id>17728053</id><snippet>&gt;&gt;&gt; def foo():
...     foo()
... 
&gt;&gt;&gt; import pdb
&gt;&gt;&gt; pdb.run('foo()')
&gt; &lt;string&gt;(1)&lt;module&gt;()
(Pdb) s
--Call--
&gt; &lt;stdin&gt;(1)foo()
(Pdb) s
&gt; &lt;stdin&gt;(2)foo()
(Pdb) s
--Call--
&gt; &lt;stdin&gt;(1)foo()
(Pdb) s
&gt; &lt;stdin&gt;(2)foo()
(Pdb) s
--Call--
&gt; &lt;stdin&gt;(1)foo()
(Pdb) w
  /Users/mj/Development/Libraries/buildout.python/parts/opt/lib/python2.7/bdb.py(400)run()
-&gt; exec cmd in globals, locals
  &lt;string&gt;(1)&lt;module&gt;()
  &lt;stdin&gt;(2)foo()
  &lt;stdin&gt;(2)foo()
&gt; &lt;stdin&gt;(1)foo()
(Pdb) u
&gt; &lt;stdin&gt;(2)foo()
(Pdb) u
&gt; &lt;stdin&gt;(2)foo()
(Pdb) u
&gt; &lt;string&gt;(1)&lt;module&gt;()
(Pdb) u
&gt; /Users/mj/Development/Libraries/buildout.python/parts/opt/lib/python2.7/bdb.py(400)run()
-&gt; exec cmd in globals, locals
(Pdb) u
*** Oldest frame
</snippet></ROW><ROW><id>17728058</id><snippet>medalDict[code] = medal_count
</snippet></ROW><ROW><id>17728058</id><snippet>medalDict[code] = tuple(medal_count.split(','))
</snippet></ROW><ROW><id>17728058</id><snippet>medalDict[code] = tuple([int(ele) for ele in medal_count.split(',')])
</snippet></ROW><ROW><id>17728073</id><snippet>import pyqtgraph as pg
import numpy as np

x = np.arange(0,1,0.1)
y = [0,0,0,2,2,8,9,2,0,0]
print len(x), len(y)

plt = pg.plot(x,y,pen='r')
curve2 = pg.PlotCurveItem(x,y[:-1],pen='b',stepMode=True)
plt.addItem(curve2)
</snippet></ROW><ROW><id>17728098</id><snippet>float *px, *pz;    &lt;-- this doesn't exist
int lx = LX; /* constant defined somewhere else */
int lz = LZ; /* constant defined somewhere else */
px = &amp;(table[kx[i]][0][0])+lx;
pz = &amp;(table[kz[i]][0][0])+lz;
^    ^                      ^
|    |                      |
+----+----------------------+---- Therefore none of this makes any sense...
</snippet></ROW><ROW><id>17728098</id><snippet>table</snippet></ROW><ROW><id>17728098</id><snippet>px</snippet></ROW><ROW><id>17728098</id><snippet>pz</snippet></ROW><ROW><id>17728261</id><snippet>x/numtests</snippet></ROW><ROW><id>17728261</id><snippet>1/2</snippet></ROW><ROW><id>17728261</id><snippet>float(x)/numtests</snippet></ROW><ROW><id>17728261</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>17728261</id><snippet>&gt;&gt;&gt; [1/2, 3/2, 5/2]
[0, 1, 2]

&gt;&gt;&gt; from __future__ import division

&gt;&gt;&gt; [1/2, 3/2, 5/2]
[0.5, 1.5, 2.5]
</snippet></ROW><ROW><id>17728320</id><snippet>metavar</snippet></ROW><ROW><id>17728320</id><snippet>parser.add_argument("-p", "--parameter", type=str, default=None, nargs='+',
                    help="some option",
                    choices=allValues.keys(),
                    metavar='PARAMETER'
                    )
</snippet></ROW><ROW><id>17728320</id><snippet>-p PARAMETER, --parameter PARAMETER some option
</snippet></ROW><ROW><id>17728320</id><snippet>''</snippet></ROW><ROW><id>17728320</id><snippet>metavar</snippet></ROW><ROW><id>17728320</id><snippet>ArgumentParser</snippet></ROW><ROW><id>17728662</id><snippet>num</snippet></ROW><ROW><id>17728662</id><snippet>cumsum</snippet></ROW><ROW><id>17728662</id><snippet>plot</snippet></ROW><ROW><id>17728662</id><snippet>xlim</snippet></ROW><ROW><id>17728662</id><snippet>number_of_times = [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90]
cumsum = [0.01, 0.02, 0.03, 0.04, 0.09, 0.16, 0.3, 0.46, 0.74, 0.89, 0.95, 0.99, 1.0]

plt.plot(number_of_times, cumsum)
plt.xlim(0, 100)

plt.show()
</snippet></ROW><ROW><id>17728729</id><snippet>cwd</snippet></ROW><ROW><id>17728729</id><snippet>C:\Program Files\Python33</snippet></ROW><ROW><id>17728729</id><snippet>cwd</snippet></ROW><ROW><id>17728729</id><snippet>cwd</snippet></ROW><ROW><id>17728729</id><snippet>cwd</snippet></ROW><ROW><id>17728729</id><snippet>cd D:
cd D:\my_python_dir\
python test.py
</snippet></ROW><ROW><id>17728729</id><snippet>test.py</snippet></ROW><ROW><id>17728729</id><snippet>os.getcwd()</snippet></ROW><ROW><id>17728729</id><snippet>D:/my_python_dir</snippet></ROW><ROW><id>17728729</id><snippet>os</snippet></ROW><ROW><id>17728729</id><snippet>os.chdir(path)</snippet></ROW><ROW><id>17728931</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>17728931</id><snippet>Images</snippet></ROW><ROW><id>17728931</id><snippet>&lt;img src="{{ STATIC_URL }}livestream/helloworld.jpg" alt="helloWorld" width="590" height="269"&gt;
</snippet></ROW><ROW><id>17729444</id><snippet>tmp</snippet></ROW><ROW><id>17729444</id><snippet>k1 = v1</snippet></ROW><ROW><id>17729444</id><snippet>result = {}
for result in query:
    key, value = result.split('=', 1)
    result[key.strip()] = value.strip()
</snippet></ROW><ROW><id>17729444</id><snippet>'key1=value1'</snippet></ROW><ROW><id>17729444</id><snippet>result.update()</snippet></ROW><ROW><id>17729557</id><snippet>OutputNameDict</snippet></ROW><ROW><id>17729557</id><snippet>OutputNameDict = {'h18_84pp_3A_MVP.*FIX': 1, 'p18_84pp_2B_MVP.*FIX': 2, 'g18_84pp_2A_MVP.*MIX': 0}
</snippet></ROW><ROW><id>17729557</id><snippet>re</snippet></ROW><ROW><id>17729557</id><snippet>mydict</snippet></ROW><ROW><id>17729557</id><snippet>output_dicts</snippet></ROW><ROW><id>17729557</id><snippet>import collections
import re
output_dicts = collections.defaultdict(dict)

for k, v in mydict.iteritems():
    for pattern, suffix in OutputNameDict.iteritems():
        if re.match(pattern,k):
            output_dicts['mydict' + str(suffix)][k] = v
            break
    else:
        output_dicts['not matched'][k] = v
</snippet></ROW><ROW><id>17729557</id><snippet>output_dicts</snippet></ROW><ROW><id>17729557</id><snippet>for k, v in output_dicts.iteritems():
    print k
    print v
    print
</snippet></ROW><ROW><id>17729557</id><snippet>mydict1
{'h18_84pp_3A_MVP2_GoodiesT1-HKJ-DFG-CMVP2_Y1000-FIX.txt': 8, 
 'h18_84pp_3A_MVP3_GoodiesT1-HKJ-DFG-CMVP3_Y1000-FIX.txt': 9, 
 'h18_84pp_3A_MVP1_GoodiesT1-HKJ-DFG-CMVP1_Y1000-FIX.txt': 6}

mydict0
{'g18_84pp_2A_MVP1_GoodiesT0-HKJ-DFG_MIX-CMVP1_Y1000-MIX.txt': 0,
 'g18_84pp_2A_MVP2_GoodiesT0-HKJ-DFG_MIX-CMVP2_Y1000-MIX.txt': 1, 
 'g18_84pp_2A_MVP4_GoodiesT0-HKJ-DFG_MIX-CMVP4_Y1000-MIX.txt': 3, 
 'g18_84pp_2A_MVP5_GoodiesT0-HKJ-DFG_MIX-CMVP5_Y1000-MIX.txt': 4, 
 'g18_84pp_2A_MVP3_GoodiesT0-HKJ-DFG_MIX-CMVP3_Y1000-MIX.txt': 2, 
 'g18_84pp_2A_MVP6_GoodiesT0-HKJ-DFG_MIX-CMVP6_Y1000-MIX.txt': 5, 
 'g18_84pp_2A_MVP7_GoodiesT0-HKJ-DFG_MIX-CMVP7_Y1000-MIX.txt': 7}

mydict2
{'p18_84pp_2B_MVP1_GoodiesT2-HKJ-DFG-CMVP3_Y1000-FIX.txt': 10}
</snippet></ROW><ROW><id>17729572</id><snippet>a[i, j, k]</snippet></ROW><ROW><id>17729572</id><snippet>a[(i, j, k)]</snippet></ROW><ROW><id>17729572</id><snippet>s.set((1, 1), [2, 2])
print s.get((1, 1))
</snippet></ROW><ROW><id>17729572</id><snippet>__getitem__()</snippet></ROW><ROW><id>17729572</id><snippet>__setitem__()</snippet></ROW><ROW><id>17729583</id><snippet>def pprint(x, *headers, sub=False):
    pass
</snippet></ROW><ROW><id>17729583</id><snippet>&gt;&gt;&gt; def pprint(x, *headers, sub=False):
...     print(x, headers, sub)
... 
&gt;&gt;&gt; pprint('foo', 'bar', 'baz', sub=True)
foo ('bar', 'baz') True
&gt;&gt;&gt; pprint('foo', 'bar', 'baz')
foo ('bar', 'baz') False
</snippet></ROW><ROW><id>17729583</id><snippet>sub</snippet></ROW><ROW><id>17729583</id><snippet>pprint()</snippet></ROW><ROW><id>17729939</id><snippet>import os

with zipfile.ZipFile(tDir + mainapk[0]) as z:
    with open(os.path.join(tDir, os.path.basename(icon[1])), 'wb') as f:
        f.write(z.read(icon[1]))
</snippet></ROW><ROW><id>17729939</id><snippet>import os
import shutil
with zipfile.ZipFile(tDir + mainapk[0]) as z:
    with z.open(icon[1]) as zf, open(os.path.join(tDir, os.path.basename(icon[1])), 'wb') as f:
        shutil.copyfileobj(zf, f)
</snippet></ROW><ROW><id>17729985</id><snippet>In [7]: d.sales[d.sales==24] = 100

In [8]: d
Out[8]: 
   day     flavour  sales  year
0  sat  strawberry     10  2008
1  sun  strawberry     12  2008
2  sat      banana     22  2008
3  sun      banana     23  2008
4  sat  strawberry     11  2009
5  sun  strawberry     13  2009
6  sat      banana     23  2009
7  sun      banana    100  2009
</snippet></ROW><ROW><id>17729985</id><snippet>In [26]: d.loc[d.sales == 12, 'sales'] = 99

In [27]: d
Out[27]: 
   day     flavour  sales  year
0  sat  strawberry     10  2008
1  sun  strawberry     99  2008
2  sat      banana     22  2008
3  sun      banana     23  2008
4  sat  strawberry     11  2009
5  sun  strawberry     13  2009
6  sat      banana     23  2009
7  sun      banana    100  2009
</snippet></ROW><ROW><id>17729985</id><snippet>In [28]: d.sales = d.sales.replace(23, 24)

In [29]: d
Out[29]: 
   day     flavour  sales  year
0  sat  strawberry     10  2008
1  sun  strawberry     99  2008
2  sat      banana     22  2008
3  sun      banana     24  2008
4  sat  strawberry     11  2009
5  sun  strawberry     13  2009
6  sat      banana     24  2009
7  sun      banana    100  2009
</snippet></ROW><ROW><id>17730059</id><snippet>def distswith(fn='fit'):
    """prints out distributions with '.fit' methods. 
    where any class with a '._pdf' method is considered a distribution
    """
    import scipy.stats
    for fn in dir(scipy.stats):
        fns=eval('dir(scipy.stats.'+fn+')')
        if '_pdf' in fns and 'fit' in fns: 
            print fn
</snippet></ROW><ROW><id>17730089</id><snippet>def _create_file(n, t):
    try:
        n = int(n)
    except:
        n = 1
    ...

@app.route('/create')
def create_file():
    n = request.args.get('n')
    t = request.args.get('t')
    return _create_file(n, t)

@app.route('/create', methods = ['POST'])
def create_file_form():
    n = request.form.get('n')
    t = request.form.get('t')
    return _create_file(n, t)

@app.route('/api/create', methods = ['POST'])
def create_file_json():
    if not request.json:
        abort(400); # bad request
    n = request.json.get('n')
    t = request.json.get('t')
    return _create_file(n, t)
</snippet></ROW><ROW><id>17730107</id><snippet>folder_name_to_create = 'whatever'

if os.path.exists(folder_name_to_create):
    folder_name_to_create += '_1'
</snippet></ROW><ROW><id>17730247</id><snippet>os.path.realpath(os.path.join(root,name))
</snippet></ROW><ROW><id>17730247</id><snippet>import os
for root, dirs, files in os.walk('.'):
    for name in files:
        if name == 'foo':
           name = str(name)
           name = os.path.realpath(os.path.join(root,name))
           print name
</snippet></ROW><ROW><id>17730247</id><snippet>test
  + foo
  + test2
     + foo
</snippet></ROW><ROW><id>17730250</id><snippet>pattern</snippet></ROW><ROW><id>17730250</id><snippet>list1</snippet></ROW><ROW><id>17730250</id><snippet>list2</snippet></ROW><ROW><id>17730250</id><snippet>list1 = ['&lt;p&gt;Text ([0-9]):(.*)&lt;/p&gt;' ,'&lt;p&gt;Text2 ([0-9]):(.*)&lt;/p&gt;','&lt;p&gt;Text3 ([0-9]):(.*)&lt;/p&gt;']
list2 = ["&lt;p class='text'&gt;Text \1:\2&lt;/p&gt;" ,"&lt;p class='text'&gt;Text \1:\2&lt;/p&gt;","&lt;p class='text'&gt;TEXT ([0-9]):(.*)&lt;/p&gt;"]
translation = dict(zip(list1, list2))
pattern = re.compile('(%s)' % '|'.join(dicts.list1))

def translate(m): 
    for x,v in translation.items(): 
        if re.search(x,m.group()): 
            return re.sub(x,v,m.group())

for line in book:
    m = pattern.findall(line)
    ret = translate(m)
    if ret is not None: 
        output.write(ret)
    else: 
        #No match. Echo back original line
        output.write(line)
</snippet></ROW><ROW><id>17730250</id><snippet>&lt;p&gt;Text 1:1-1&lt;/p&gt;
</snippet></ROW><ROW><id>17730250</id><snippet>&lt;p class='text'&gt;Text 1:1-1&lt;/p&gt;
</snippet></ROW><ROW><id>17730477</id><snippet>def find_lcm_of_numbers_in_range(start, stop):
    count = count_factors_of_numbers_in_range(start, stop)
    lcm = 1
    for key in count:
        total = count[key] * key
        lcm = total * lcm
    return lcm
</snippet></ROW><ROW><id>17730477</id><snippet>total</snippet></ROW><ROW><id>17730477</id><snippet>2 ** 4</snippet></ROW><ROW><id>17730477</id><snippet>def find_lcm_of_numbers_in_range(start, stop):
    count = count_factors_of_numbers_in_range(start, stop)
    lcm = 1
    for key in count:
        total = key ** count[key]
        lcm = total * lcm
    return lcm
</snippet></ROW><ROW><id>17730490</id><snippet>package/
    __init__.py
    scripts/
        web/
            __init__.py
            script1.py
        tests/
            __init__.py
            script2.py
    common/
        __init__.py
        utils.py
</snippet></ROW><ROW><id>17730490</id><snippet>__init__.py</snippet></ROW><ROW><id>17730490</id><snippet> from package.common import utils
</snippet></ROW><ROW><id>17730490</id><snippet> import package.common.utils as utils
</snippet></ROW><ROW><id>17730490</id><snippet>package</snippet></ROW><ROW><id>17730490</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17730490</id><snippet>from ....common import utils
</snippet></ROW><ROW><id>17730824</id><snippet>location.py</snippet></ROW><ROW><id>17730824</id><snippet>views.py</snippet></ROW><ROW><id>17730824</id><snippet>location_view.py</snippet></ROW><ROW><id>17730929</id><snippet>TData_Pre_Out = map(itemgetter(0, 7, 8), HDU_DATA) 
</snippet></ROW><ROW><id>17730929</id><snippet>!=</snippet></ROW><ROW><id>17731056</id><snippet>join()</snippet></ROW><ROW><id>17731056</id><snippet>&gt;&gt;&gt; "".join(set(['T','h', 'i', 's']))
'ihsT'
</snippet></ROW><ROW><id>17731056</id><snippet>itertools.permutations</snippet></ROW><ROW><id>17731056</id><snippet>&gt;&gt;&gt; list(permutations("".join(set("Thisss"))))
[('i', 'h', 's', 'T'), ('i', 'h', 'T', 's'), ('i', 's', 'h', 'T'), ('i', 's', 'T', 'h'),
  ... ]
</snippet></ROW><ROW><id>17731056</id><snippet>join</snippet></ROW><ROW><id>17731056</id><snippet>&gt;&gt;&gt; list(permutations(set("Thisss")))
</snippet></ROW><ROW><id>17731443</id><snippet>sr</snippet></ROW><ROW><id>17731443</id><snippet>validate_on_submit</snippet></ROW><ROW><id>17731443</id><snippet>validate</snippet></ROW><ROW><id>17731443</id><snippet>request.method == 'POST'</snippet></ROW><ROW><id>17731443</id><snippet>@app.route('/sr', methods=['POST'])    
def sr():
    form = subReddit()
    if not form.validate_on_submit():
        return render_template('index.html',form=form)
    g.db.execute("UPDATE subreddit SET sr=(?)", [form.subreddit.data])      
    return redirect(url_for('index'))
</snippet></ROW><ROW><id>17731443</id><snippet>SubReddit</snippet></ROW><ROW><id>17731443</id><snippet>subReddit</snippet></ROW><ROW><id>17731443</id><snippet>sr</snippet></ROW><ROW><id>17731443</id><snippet>index()</snippet></ROW><ROW><id>17731443</id><snippet>url_for('index')</snippet></ROW><ROW><id>17731512</id><snippet>/Library/Python/2.7/site-packages/PySide/QtCore.so</snippet></ROW><ROW><id>17731512</id><snippet>QtCore.framework/Versions/4/QtCore</snippet></ROW><ROW><id>17731512</id><snippet>QtCore.so</snippet></ROW><ROW><id>17731512</id><snippet>/usr/lib</snippet></ROW><ROW><id>17731512</id><snippet>ln -vis /usr/lib/&lt;insert subfolder&gt;/QtCore.framework /Library/Python/2.7/site-packages/PySide/QtCore.framework
</snippet></ROW><ROW><id>17731512</id><snippet>QtCore.so</snippet></ROW><ROW><id>17731521</id><snippet>PyObject_IsInstance</snippet></ROW><ROW><id>17731521</id><snippet>Objects/abstract.c</snippet></ROW><ROW><id>17731521</id><snippet>int
PyObject_IsInstance(PyObject *inst, PyObject *cls)
{
    static PyObject *name = NULL;

    /* Quick test for an exact match */
    if (Py_TYPE(inst) == (PyTypeObject *)cls)
        return 1;
// ...
</snippet></ROW><ROW><id>17731521</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; def isinstance(a, b):
...     class tmp(type(a)):
...          pass
...     return __builtin__.isinstance(tmp(), b)
... 
&gt;&gt;&gt; __builtin__.isinstance(a, A)
True
&gt;&gt;&gt; isinstance(a, A)
__instancecheck__
True
</snippet></ROW><ROW><id>17731579</id><snippet>In [41]: loc_dict = {301 : 1, 302 : 7, 303 : 3}

In [42]: ind_dict = {1 : 4, 2: 8, 3: 10}

In [198]: df2 = df2.reset_index()

In [199]: df2
Out[199]: 
   index  id  location  ind_var  loc_var
0      0   1       301        4        1
1      1   1       302      NaN      NaN
2      2   1       303      NaN      NaN
3      3   2       301        8        1
4      4   2       302      NaN      NaN
5      5   2       303      NaN      NaN
6      6   3       301      NaN      NaN
7      7   3       302       10        7
8      8   3       303      NaN      NaN

In [200]: df2['ind_var'] = df2.id.map(ind_dict)

In [201]: df2['loc_var'] = df2.location.map(loc_dict)

In [202]: df2
Out[202]: 
   index  id  location  ind_var  loc_var
0      0   1       301        4        1
1      1   1       302        4        7
2      2   1       303        4        3
3      3   2       301        8        1
4      4   2       302        8        7
5      5   2       303        8        3
6      6   3       301       10        1
7      7   3       302       10        7
8      8   3       303       10        3

In [203]: df2 = df2.set_index(['id', 'location'])

In [204]: df2
Out[204]: 
             index  ind_var  loc_var
id location                         
1  301           0        4        1
   302           1        4        7
   303           2        4        3
2  301           3        8        1
   302           4        8        7
   303           5        8        3
3  301           6       10        1
   302           7       10        7
   303           8       10        3
</snippet></ROW><ROW><id>17731763</id><snippet>request.body</snippet></ROW><ROW><id>17731763</id><snippet>request.POST</snippet></ROW><ROW><id>17731763</id><snippet>request.body</snippet></ROW><ROW><id>17731763</id><snippet>JSON</snippet></ROW><ROW><id>17731763</id><snippet>json.loads(request.body)</snippet></ROW><ROW><id>17731789</id><snippet>else:
</snippet></ROW><ROW><id>17731898</id><snippet>raise TypeError()</snippet></ROW><ROW><id>17731909</id><snippet>some_function()</snippet></ROW><ROW><id>17731909</id><snippet>labels</snippet></ROW><ROW><id>17731909</id><snippet>def some_function():
    instance = module.Foo()
    print instance.labels
    return instance.method()
</snippet></ROW><ROW><id>17731909</id><snippet>module.py</snippet></ROW><ROW><id>17731909</id><snippet>class Foo(object):

    labels = [5, 6, 7]

    def method(self):
        return 'some'
</snippet></ROW><ROW><id>17731909</id><snippet>with patch('module.Foo') as mock:
    instance = mock.return_value
    instance.method.return_value = 'the result'
    instance.labels = [1,2,3,4,5]
    result = some_function()
    assert result == 'the result
</snippet></ROW><ROW><id>17731909</id><snippet>&gt;&gt;&gt; from mock import patch
&gt;&gt;&gt; import module
&gt;&gt;&gt; 
&gt;&gt;&gt; def some_function():
...     instance = module.Foo()
...     print instance.labels
...     return instance.method()
... 
&gt;&gt;&gt; some_function()
[5, 6, 7]
'some'
&gt;&gt;&gt; 
&gt;&gt;&gt; with patch('module.Foo') as mock:
...     instance = mock.return_value
...     instance.method.return_value = 'the result'
...     instance.labels = [1,2,3,4,5]
...     result = some_function()
...     assert result == 'the result'
...     
... 
[1, 2, 3, 4, 5]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17732139</id><snippet>stdout</snippet></ROW><ROW><id>17732139</id><snippet>for sourcefile in sortedsourcefiles:
    MsgBody += sourceFile
    print "Checking %s" % MsgBody
</snippet></ROW><ROW><id>17732139</id><snippet>for sourcefile in sortedsourcefiles:
    MsgBody += sourceFile
</snippet></ROW><ROW><id>17732202</id><snippet>val = hex(reduce(lambda total, wall: total &lt;&lt; 1 | wall, walls, 0))
</snippet></ROW><ROW><id>17732202</id><snippet>val = 0
for wall in walls:
    val &lt;&lt;= 1 # add one 0 bit at the "end"
    val |= wall # set this bit to 1 if wall is True, otherwise leave it at 0

val = hex(val) # get a hex string in the end
val = format(val, 'x') # or without the leading 0x if it's undesired
</snippet></ROW><ROW><id>17732351</id><snippet>OneHotEncoder</snippet></ROW><ROW><id>17732351</id><snippet>n_values</snippet></ROW><ROW><id>17732372</id><snippet>input_string = ("""The cat in the hat 
Red fish blue fish """)

words = [i.split(" ") for i in  input_string.split('\n')]
</snippet></ROW><ROW><id>17732372</id><snippet>[['The', 'cat', 'in', 'the', 'hat', ''], ['Red', 'fish', 'blue', 'fish', '']]
</snippet></ROW><ROW><id>17732508</id><snippet>outerfield1.innerField</snippet></ROW><ROW><id>17732508</id><snippet>sort({'outerField1.innerField': -1})
</snippet></ROW><ROW><id>17732508</id><snippet>sort([("outerField1.innerField": -1)])
</snippet></ROW><ROW><id>17732564</id><snippet>supervisorctl restart &lt;service name&gt;</snippet></ROW><ROW><id>17732564</id><snippet>sudo</snippet></ROW><ROW><id>17732564</id><snippet>supervisorctl update</snippet></ROW><ROW><id>17732576</id><snippet>dict1 = {1: 3, 2:  2, 3:  4 }
dict2 = {1: 8, 2: 10, 3: 13 }
dict3 = { k: [ dict1[k], dict2[k] ] for k in dict1 }
# Result:
# dict3 = {1: [3, 8], 2: [2, 10], 3: [4, 13]}
</snippet></ROW><ROW><id>17732869</id><snippet>positives = [b for b in A if b &gt;= 0]</snippet></ROW><ROW><id>17732869</id><snippet>b</snippet></ROW><ROW><id>17732869</id><snippet>import numpy as np
import numpy.ma as ma
A = [[-9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0],
    [-9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0],
    [0.040896, 0.018690, 0.005620, -9999.0, 0.038722, 0.018323, -9999.0],
    [0.039443, 0.017517, 0.003460, -9999.0, 0.035526, 0.011692, -9999.0],
    [-9999.0, 0.017963, 0.005264, -9999.0, 0.03788, 0.014316, -9999.0]]
A = np.array(A)

sigmas = []
for b in A:
    bmask=ma.masked_array(b,mask=np.greater_equal(b,0))
    b=b[bmask.mask]
    print b
    sigmas.append(np.std(b))
</snippet></ROW><ROW><id>17732869</id><snippet>[]
[]
[ 0.040896  0.01869   0.00562   0.038722  0.018323]
[ 0.039443  0.017517  0.00346   0.035526  0.011692]
[ 0.017963  0.005264  0.03788   0.014316]

&gt;&gt;&gt; sigmas
[0.0, 0.0, 0.013412289355661845, 0.013828802328473713, 0.011917047544903896]
</snippet></ROW><ROW><id>17732869</id><snippet>&gt;&gt;&gt; A=[[1,2,3,4,5,6,7],[2,-3,4,-3,2,1,-9]]
&gt;&gt;&gt; [b for b in A if b&gt;=0]
[[1, 2, 3, 4, 5, 6, 7], [2, -3, 4, -3, 2, 1, -9]]
</snippet></ROW><ROW><id>17732869</id><snippet>b</snippet></ROW><ROW><id>17732869</id><snippet>0</snippet></ROW><ROW><id>17732869</id><snippet>b</snippet></ROW><ROW><id>17732869</id><snippet>&gt;&gt;&gt; bool(b)
True
&gt;&gt;&gt; True &gt;= 0
True
</snippet></ROW><ROW><id>17732869</id><snippet>b</snippet></ROW><ROW><id>17732869</id><snippet>True &gt;= 0</snippet></ROW><ROW><id>17732869</id><snippet>True</snippet></ROW><ROW><id>17732869</id><snippet>G = map(sigma, zip(*A))</snippet></ROW><ROW><id>17732869</id><snippet>G = map(sigma, A)</snippet></ROW><ROW><id>17732869</id><snippet>i</snippet></ROW><ROW><id>17732869</id><snippet>diff</snippet></ROW><ROW><id>17732869</id><snippet>def sigma(A):
    positives = [b for b in A if b &gt;= 0]
    if positives:
        mean = sum(positives) / len(positives)
        diff = ((sum([abs(i - mean)**2 for i in positives]))/(len(positives)))**(0.5)
        for i in positives:
            if (abs(i - mean)) &gt; (diff*3):
                return -9999.00
        return diff
    else:
        return -9999.00

A = [[-9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0],
    [-9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0],
    [0.040896, 0.018690, 0.005620, -9999.0, 0.038722, 0.018323, -9999.0],
    [0.039443, 0.017517, 0.003460, -9999.0, 0.035526, 0.011692, -9999.0],
    [-9999.0, 0.017963, 0.005264, -9999.0, 0.03788, 0.014316, -9999.0]]

G = map(sigma, A)
</snippet></ROW><ROW><id>17732869</id><snippet>&gt;&gt;&gt; G
[-9999.0, -9999.0, 0.013412289355661845, 0.013828802328473713, 0.011917047544903896]
</snippet></ROW><ROW><id>17732869</id><snippet>def sigma(A):
    positives = [b for b in A if b &gt;= 0]
    sq_err=[]
    if positives:
        mean = sum(positives) / len(positives)
        diff = ((sum([abs(i - mean)**2 for i in positives]))/(len(positives)))**(0.5)
        for i in positives:
            if (abs(i - mean)) &gt; (diff*3):
                sq_err.append(-9999.00)
            else:
                sq_err.append(i)
    else:
        return [-9999.00]
    return sq_err

A = [[-9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0],
    [-9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0, -9999.0],
    [0.040896, 0.018690, 0.005620, -9999.0, 0.038722, 0.018323, -9999.0],
    [0.039443, 0.017517, 0.003460, -9999.0, 0.035526, 0.011692, -9999.0],
    [-9999.0, 0.017963, 0.005264, -9999.0, 0.03788, 0.014316, -9999.0]]

G = map(sigma, A)
</snippet></ROW><ROW><id>17732869</id><snippet>&gt;&gt;&gt; G
[[-9999.0], [-9999.0], [0.040896, 0.01869, 0.00562, 0.038722, 0.018323], [0.039443, 0.017517, 0.00346, 0.035526, 0.011692], [0.017963, 0.005264, 0.03788, 0.014316]]
</snippet></ROW><ROW><id>17732931</id><snippet>hostname='myapp.appspot.com'</snippet></ROW><ROW><id>17732931</id><snippet>https</snippet></ROW><ROW><id>17732931</id><snippet>https://myapp.appspot.com/_ah/api/.*
</snippet></ROW><ROW><id>17732931</id><snippet>https</snippet></ROW><ROW><id>17733026</id><snippet>import ctypes

_decref = ctypes.pythonapi.Py_DecRef
_decref.argtypes = [ctypes.py_object]
_decref.restype = None

_decref(a_python_object)
</snippet></ROW><ROW><id>17733120</id><snippet>print x</snippet></ROW><ROW><id>17733120</id><snippet>str(x)</snippet></ROW><ROW><id>17733120</id><snippet>print unicode(x)
</snippet></ROW><ROW><id>17733120</id><snippet>print x.encode('ascii')
</snippet></ROW><ROW><id>17733425</id><snippet>constant</snippet></ROW><ROW><id>17733425</id><snippet>from module import GLOBAL_CONST</snippet></ROW><ROW><id>17733425</id><snippet>module</snippet></ROW><ROW><id>17733425</id><snippet>GLOBAL_CONST</snippet></ROW><ROW><id>17733491</id><snippet>range</snippet></ROW><ROW><id>17733491</id><snippet>range</snippet></ROW><ROW><id>17733491</id><snippet>try:
        sys.stdout.write("") # any call capable of raising an exception will do
except:
        pass
</snippet></ROW><ROW><id>17733491</id><snippet>%exception</snippet></ROW><ROW><id>17733901</id><snippet>reader = csv.reader(f1)
rows = list(reader)
cols = zip(*rows)
Min = cols[1]
Mean = cols[2]
Max = cols[3]


# or if you really want numpy.arrays
Min = numpy.array(cols[1]) #dtype will be auto-assigned
Mean = numpy.array(cols[2]) #dtype will be auto-assigned
Max = numpy.array(cols[3]) #dtype will be auto-assigned
</snippet></ROW><ROW><id>17733957</id><snippet>tests</snippet></ROW><ROW><id>17733957</id><snippet>tests</snippet></ROW><ROW><id>17733957</id><snippet>bin</snippet></ROW><ROW><id>17733957</id><snippet>mypackage</snippet></ROW><ROW><id>17733957</id><snippet>bin</snippet></ROW><ROW><id>17733957</id><snippet>check_output</snippet></ROW><ROW><id>17733957</id><snippet>import subprocess
output = subprocess.check_output("cat /etc/services", shell=True)
</snippet></ROW><ROW><id>17733957</id><snippet>test command-line scripts</snippet></ROW><ROW><id>17734552</id><snippet>subprocess.call(';'.join([cdwrite, exec]), shell=True)
</snippet></ROW><ROW><id>17734552</id><snippet>cd</snippet></ROW><ROW><id>17734583</id><snippet>phone = TextField(label='Phone',
                  validator=twc.Required,
                  css_class='MyTextFieldClass',
                  attrs=dict(style='display:block;width:8em', maxlength='12'))
</snippet></ROW><ROW><id>17734583</id><snippet>BaseLayout</snippet></ROW><ROW><id>17734583</id><snippet>from itertools import groupby
from tw2.core import Param
from tw2.forms.widgets import BaseLayout

class FloatLayout(BaseLayout):

    template = "widgets.templates.float_layout"

    aside = Param('All fields aside', default=False)

    def rows(self, children):
        """Create the rows."""
        def row_no(child, no=[0]):
            if not self.aside and not getattr(child, 'aside', False):
                no[0] += 1
            return no[0]
        return groupby(children, row_no)
</snippet></ROW><ROW><id>17734583</id><snippet>from tw2.core import Variable
from tw2.forms import Form

class FloatForm(Form):
    """Form using floating divisions allowing multiple fields per row.

    Fields having the 'aside' attribute set appear on the same row.

    Something like the following should be included in the site CSS file:

    form.floatform {
        margin-bottom: 1ex;
    }
    form.floatform div.row {
        clear: left;
        overflow: hidden;
        height: 100%;
        margin-top: 1.5ex;
    }
    form.floatform div.field {
        float: left;
        margin-right: 1em;
    }
    form.floatform label.fieldlabel {
        display: block;
    }
    form.floatform div.submit {
        margin-top: 3ex;
    }

    """

    template = "widgets.templates.float_form"

    child = Variable(default=FloatLayout)

    css_class = "floatform"
</snippet></ROW><ROW><id>17734583</id><snippet>&lt;div xmlns:py="http://genshi.edgewall.org/" py:attrs="w.attrs" py:strip="True"&gt;
    &lt;div py:for="row_no, row in w.rows(w.children_non_hidden)"
            class="${row_no % 2 and 'odd' or 'even'} row"&gt;
        &lt;div py:for="child in row" py:attrs="child.container_attrs"
            class="field${child.validator and
                getattr(child.validator, 'required', None) and ' required' or ''}"
            title="${w.hover_help and w.help_text or ''}"&gt;
            &lt;label py:if="child.label" for="${child.attrs.get('id')}"
                class="fieldlabel" py:content="child.label"/&gt;
            &lt;span py:replace="child.display()"/&gt;
            &lt;span py:if="not w.hover_help and child.help_text"
                class="fieldhelp" py:content="child.help_text"/&gt;
            &lt;span py:if="child.error_msg"
                class="fielderror" py:content="child.error_msg"/&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div py:if="w.children_hidden" style="display:none"&gt;
        &lt;div py:for="child in w.children_hidden" py:replace="child.display()"/&gt;
    &lt;/div&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>17734583</id><snippet>&lt;form xmlns:py="http://genshi.edgewall.org/"
    class="floatform" py:attrs="w.attrs"&gt;
    &lt;div py:if="w.error_msg" class="formerror" py:content="w.error_msg"/&gt;
    &lt;div py:if="w.help_msg" class="formhelp"&gt;&lt;p py:content="w.help_msg"/&gt;&lt;/div&gt;
    &lt;div py:replace="w.child.display()"/&gt;
    &lt;div py:for="button in w.buttons" class="field" py:content="button.display()"/&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17734583</id><snippet>class UserForm(FloatForm):
    action = url('save_user')
    submit = SubmitButton('Save user')
    user_id = HiddenField(validator=IntValidator())
    user_name = TextField(validator=UserNameValidator(max=16),
        size=20, maxlength=16, label=u'User name:')
    remote_account = CheckBox(validator=BoolValidator(),
        label=u'Remote account:', aside=True)
    new_password = PasswordField(
        validator=PasswordValidator(required=False),
        size=20, maxlength=16, label=u'Password:', aside=True)
    group_id = CheckBoxList(item_validator=IntValidator(),
        label=u'Roles:', css_class='inline')
    display_name = TextField(validator=NameValidator(max=255),
        size=64, maxlength=255, label=u'Real name:')
    mail = TextField(validator=EmailIfLocalValidator(),
        size=64, maxlength=255, label=u'Email address:')
</snippet></ROW><ROW><id>17734583</id><snippet>remote_account</snippet></ROW><ROW><id>17734583</id><snippet>new_password</snippet></ROW><ROW><id>17734583</id><snippet>aside</snippet></ROW><ROW><id>17734583</id><snippet>user_name</snippet></ROW><ROW><id>17734692</id><snippet>getattr(obj, t[i])(*args)
</snippet></ROW><ROW><id>17734692</id><snippet>getattr(sys.modules[__name__], t[i])(*args)
</snippet></ROW><ROW><id>17734692</id><snippet>args</snippet></ROW><ROW><id>17734692</id><snippet>self</snippet></ROW><ROW><id>17734692</id><snippet>obj</snippet></ROW><ROW><id>17734692</id><snippet>obj.x</snippet></ROW><ROW><id>17734692</id><snippet>getattr(obj, 'x')</snippet></ROW><ROW><id>17734692</id><snippet>setattr</snippet></ROW><ROW><id>17734692</id><snippet>hasattr</snippet></ROW><ROW><id>17734692</id><snippet>delattr</snippet></ROW><ROW><id>17734743</id><snippet>import re

s = '"text" "some"'
res = re.subn('"([^"]*)"', '&lt;em&gt;\\1&lt;/em&gt;', s)[0]
</snippet></ROW><ROW><id>17734816</id><snippet> query = "INSERT INTO universitats (universitat) VALUES ('%s')" % (lloc)
 cursor.execute(query)
</snippet></ROW><ROW><id>17734816</id><snippet>query = "INSERT INTO universitats (universitat) VALUES (%s)"  
cursor.execute(query,(lloc,))
</snippet></ROW><ROW><id>17734866</id><snippet>users.sort(key=lambda x: order.index(x['id']))
</snippet></ROW><ROW><id>17735070</id><snippet>any</snippet></ROW><ROW><id>17735070</id><snippet>&gt;&gt;&gt; any(7 == i[0] for i in a)
True
</snippet></ROW><ROW><id>17735163</id><snippet>Tree</snippet></ROW><ROW><id>17735163</id><snippet>AllWords</snippet></ROW><ROW><id>17735163</id><snippet>AllWords</snippet></ROW><ROW><id>17735163</id><snippet>blob</snippet></ROW><ROW><id>17735163</id><snippet>Tree.count()</snippet></ROW><ROW><id>17735163</id><snippet>tout.my_tree.count(tout)</snippet></ROW><ROW><id>17735163</id><snippet>tout = Searching.AllWords()</snippet></ROW><ROW><id>17735163</id><snippet>Tree</snippet></ROW><ROW><id>17735171</id><snippet>funcdef: 'def' NAME parameters ':' suite
</snippet></ROW><ROW><id>17735171</id><snippet>suite</snippet></ROW><ROW><id>17735171</id><snippet>suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
</snippet></ROW><ROW><id>17735171</id><snippet>stmt</snippet></ROW><ROW><id>17735171</id><snippet>expr_stmt</snippet></ROW><ROW><id>17735171</id><snippet>testlist</snippet></ROW><ROW><id>17735171</id><snippet>test</snippet></ROW><ROW><id>17735171</id><snippet>atom</snippet></ROW><ROW><id>17735171</id><snippet>STRING</snippet></ROW><ROW><id>17735171</id><snippet>stmt: simple_stmt | compound_stmt
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | exec_stmt | assert_stmt)
expr_stmt: testlist (augassign (yield_expr|testlist) |
                     ('=' (yield_expr|testlist))*)
testlist: test (',' test)* [',']
test: or_test ['if' or_test 'else' test] | lambdef
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
comp_op: '&lt;'|'&gt;'|'=='|'&gt;='|'&lt;='|'&lt;&gt;'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&amp;' shift_expr)*
shift_expr: arith_expr (('&lt;&lt;'|'&gt;&gt;') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: atom trailer* ['**' factor]
atom: ('(' [yield_expr|testlist_comp] ')' |
       '[' [listmaker] ']' |
       '{' [dictorsetmaker] '}' |
       '`' testlist1 '`' |
       NAME | NUMBER | STRING+)
</snippet></ROW><ROW><id>17735268</id><snippet>patterns = (
    #(&lt;pattern&gt;, &lt;function&gt;, &lt;do_continue&gt;)
    ('ab', lambda a: a, True),
    ('abc', lambda a: a, False),
)

def MatchAndDo(string, patterns):
    for p in patterns:
        res = re.match(p[0], string)
        if res is None:
            continue

        print "Matched '{}'".format(p[0])
        p[1](p[0]) # Do stuff
        if not p[2]:
            return

MatchAndDo('abc', patterns)
</snippet></ROW><ROW><id>17735268</id><snippet>re.match()</snippet></ROW><ROW><id>17735284</id><snippet>d = dict(zip(your_list, range(len(your_list)))
</snippet></ROW><ROW><id>17735396</id><snippet> &gt;&gt;&gt; generator_fn.__code__.co_flags
 &gt;&gt;&gt; 99
 &gt;&gt;&gt; normal_fn.__code__.co_flags
 &gt;&gt;&gt; 67
</snippet></ROW><ROW><id>17735444</id><snippet>seq</snippet></ROW><ROW><id>17735444</id><snippet>for x in seq</snippet></ROW><ROW><id>17735444</id><snippet>for x in range(0, L-y):</snippet></ROW><ROW><id>17735529</id><snippet>multiprocessing.pool.ThreadPool</snippet></ROW><ROW><id>17735529</id><snippet>multiprocessing.pool.Pool</snippet></ROW><ROW><id>17735529</id><snippet>from multiprocessing.pool import ThreadPool

n_threads = 5
pool = ThreadPool(processes=n_threads)

threads = [pool.apply_async(some_function, args=(arg1,)) for arg1 in args]

pool.close()
pool.join()

results = [result.get() for result in threads]
</snippet></ROW><ROW><id>17735716</id><snippet>&gt;&gt;&gt; obj.__class__.my_property
&lt;property object at 0xb74bd16c&gt;
</snippet></ROW><ROW><id>17735716</id><snippet>&gt;&gt;&gt; type(obj).my_property
&lt;property object at 0xb720b93c&gt;
</snippet></ROW><ROW><id>17735716</id><snippet>&gt;&gt;&gt; isinstance(type(obj).my_property, property)
True
</snippet></ROW><ROW><id>17735846</id><snippet>with open(filename) as f:
    for line in f:
        # This will iterate over the lines in the file rather than read them all at once
</snippet></ROW><ROW><id>17735846</id><snippet>for line in f:
</snippet></ROW><ROW><id>17735846</id><snippet>lines=f.readlines()
</snippet></ROW><ROW><id>17736075</id><snippet>translate()</snippet></ROW><ROW><id>17736075</id><snippet>None</snippet></ROW><ROW><id>17736075</id><snippet>"Agh#$%#%2341- -!zdrkfd".translate(table, delete_table)</snippet></ROW><ROW><id>17736075</id><snippet>delete_table</snippet></ROW><ROW><id>17736075</id><snippet>table</snippet></ROW><ROW><id>17736075</id><snippet>delete_table</snippet></ROW><ROW><id>17736075</id><snippet>string.maketrans()</snippet></ROW><ROW><id>17736075</id><snippet>&gt;&gt;&gt; delete_table = string.maketrans(string.ascii_lowercase, ' '*len(string.ascii_lowercase))
&gt;&gt;&gt; delete_table
'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&amp;\'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`                          {|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
&gt;&gt;&gt; ''.join(c for c in map(chr, range(0, 256)) if c not in delete_table)
'abcdefghijklmnopqrstuvwxyz'
</snippet></ROW><ROW><id>17736075</id><snippet>table</snippet></ROW><ROW><id>17736075</id><snippet>string.maketrans('', '')</snippet></ROW><ROW><id>17736110</id><snippet>def numToWords(self, numStr):
    words = []
    if int(numStr) == 0:
        words.append("zero")
    else:
        # no longer needed, it's already a string
        # numStr = "%d" % num
        numStrLen = len(numStr)
        groups = (numStrLen + 2) /
        ...
</snippet></ROW><ROW><id>17736151</id><snippet>class B(A):
  def __init__(self, other):
    # Copy attributes only if other is of good type
    if isintance(other, A):
      self.__dict__  = other.__dict__.copy()
  def hello(self):
    print('Hello, I am an object of type B')
</snippet></ROW><ROW><id>17736151</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.hello()
Hello, I am an object of type A
&gt;&gt;&gt; a = B(a)
&gt;&gt;&gt; a.hello()
Hello, I am an object of type B
</snippet></ROW><ROW><id>17736414</id><snippet>requirements.txt</snippet></ROW><ROW><id>17736414</id><snippet>pip</snippet></ROW><ROW><id>17736414</id><snippet>requirements.txt</snippet></ROW><ROW><id>17736548</id><snippet>.000397</snippet></ROW><ROW><id>17736548</id><snippet>create_date = datetime.strptime(str(CRItem['CR Created Date']).split(".")[0], '%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>17736725</id><snippet>from collections import Counter
a = [1,2,5,5,8,8,5,7,8]
</snippet></ROW><ROW><id>17736725</id><snippet>max(Counter(a).iteritems(), key=lambda (k,v): (v,-k))[0]
=&gt; 5
</snippet></ROW><ROW><id>17736725</id><snippet>max(Counter(a).items(), key=lambda p: (p[1],-p[0]))[0]
=&gt; 5
</snippet></ROW><ROW><id>17736772</id><snippet>(2&lt;&lt;16) - 1</snippet></ROW><ROW><id>17736772</id><snippet>(1&lt;&lt;16) - 1</snippet></ROW><ROW><id>17736780</id><snippet>import csv

mydict = {('c4:7d:4f:53:24:be', 'ac:81:12:62:91:df'):
          [5.998999999999998, 0.0013169999, 4.0000000000000972],
          ('a8:5b:4f:2e:fe:09', 'de:62:ef:4e:21:de'):
          [7.89899999, 0.15647999999675390, 8.764380000972, 9.200000000]}

with open('dict.csv', 'wb') as file:
    writer = csv.writer(file, delimiter='\t')
    writer.writerow(mydict.keys())
    for row in zip(*mydict.values()):
        writer.writerow(list(row))
</snippet></ROW><ROW><id>17736780</id><snippet>('c4:7d:4f:53:24:be', 'ac:81:12:62:91:df')  ('a8:5b:4f:2e:fe:09', 'de:62:ef:4e:21:de')
5.998999999999998   7.89899999
0.0013169999    0.1564799999967539
4.000000000000097   8.764380000972
</snippet></ROW><ROW><id>17736930</id><snippet>print l[-2:]
</snippet></ROW><ROW><id>17736930</id><snippet>&gt;&gt;&gt; l = ['h','e','l','l','o']
&gt;&gt;&gt; print l[-2:]
['l', 'o']
&gt;&gt;&gt; print l[-5:]
['h', 'e', 'l', 'l', 'o']
&gt;&gt;&gt; print l[-6:]
['h', 'e', 'l', 'l', 'o']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17736943</id><snippet>&gt;&gt;&gt; L = [2,4,8,9,4,2]
&gt;&gt;&gt; [sum(i) for i in itertools.zip_longest(*[iter(L)]*2, fillvalue=0)]
[6, 17, 6]
</snippet></ROW><ROW><id>17737155</id><snippet>random.sample()</snippet></ROW><ROW><id>17737155</id><snippet>import random
for index in random.sample(xrange(len(vector)), y): # len(vector) is "x"
    vector[index] = 1
</snippet></ROW><ROW><id>17737155</id><snippet>x</snippet></ROW><ROW><id>17737155</id><snippet>y</snippet></ROW><ROW><id>17737155</id><snippet>import random
vector = [0]*(x-y) + [1]*y  # We can do this because numbers are immutable
vector.shuffle()
</snippet></ROW><ROW><id>17737169</id><snippet>delta = min(date_1_end,date_base_end)-max(date_1_start,date_base_start)
#
# Check if delta is negative, 
#
if delta.seconds &lt; 0:
         print 0
else:
         print delta.seconds/60.0
</snippet></ROW><ROW><id>17737187</id><snippet>for x in (i for i in ids if i!=12345):
    # do stuff

In [37]: ids
Out[37]: [12343, 12344, 12345, 12346, 12347, 12348]

In [38]: for x in (i for i in ids if i!=12345):
   ....:     print x
   ....:     
12343
12344
12346
12347
12348
</snippet></ROW><ROW><id>17737306</id><snippet>for rn in rn_base
Print rn.string
</snippet></ROW><ROW><id>17737306</id><snippet>find()</snippet></ROW><ROW><id>17737306</id><snippet>find_all()</snippet></ROW><ROW><id>17737365</id><snippet>In [33]: filename = "sciPHOTOf105w0.fits"

In [34]: filename.rpartition('.')[0]
Out[34]: 'sciPHOTOf105w0'

In [35]: filename.rsplit('.', 1)[0]
Out[35]: 'sciPHOTOf105w0'
</snippet></ROW><ROW><id>17737475</id><snippet>get_information</snippet></ROW><ROW><id>17737475</id><snippet>return ','.join([date, weather, str(temp_f)]) + '\n'</snippet></ROW><ROW><id>17737475</id><snippet>#Source : http://www.wunderground.com/weather/api/d/docs?d=resources/code-samples
import urllib2
import json
import time
import csv
from datetime import datetime#set the time

def get_information(url):
  try:
    wunder_url_obj = urllib2.urlopen(url)
  except:
    print 'Could not open URL'
    return None

  else:
    now = datetime.now()
    current_year = now.year
    current_day = now.day
    current_month = now.month
    current_hour = now.hour
    current_minute = now.minute
    current_second = now.second
    json_string = wunder_url_obj.read()
    parsed_json = json.loads(json_string)
    temp_f = parsed_json['current_observation']['temp_f']
    weather = parsed_json['current_observation']['weather']
    date = str(now.month) + "/" + str(now.day) +  "/" + str(now.year) + " " +     str(now.hour) + ":" + str(now.minute) + ":" + str(now.second)
    now = datetime.now()    
    header = "Datetime,current condition,Temperature,\n" 

    f = open('out.csv','a')
    prev_data = open('out.csv', 'r').read()



  # Add a header only if the file is empty
  if prev_data == '':
    f.write(header)

  f.write(','.join([date,str(temp_f),weather]))
  f.write('\n')
  f.close()

get_information('http://api.wunderground.com/api/8d3b5d3fa03ddb6f/conditions/weather/q/China/Beijing.json')
</snippet></ROW><ROW><id>17737475</id><snippet>bash$ cat out.csv 
Datetime,current condition,Temperature,
7/18/2013 23:14:6,82,Haze
7/18/2013 23:14:7,82,Haze
</snippet></ROW><ROW><id>17737759</id><snippet>pylab_img[::-1,:,::-1] == cv_img
</snippet></ROW><ROW><id>17737817</id><snippet>with open(someFile) as inputFile:
    myListofTuples = [tuple(line.split(',')) for line in inputFile.readlines()]
</snippet></ROW><ROW><id>17737817</id><snippet>with</snippet></ROW><ROW><id>17737817</id><snippet>with</snippet></ROW><ROW><id>17737817</id><snippet>with</snippet></ROW><ROW><id>17737817</id><snippet>as</snippet></ROW><ROW><id>17737817</id><snippet>open()</snippet></ROW><ROW><id>17737817</id><snippet>for i in whatever</snippet></ROW><ROW><id>17737817</id><snippet>i</snippet></ROW><ROW><id>17737817</id><snippet>with</snippet></ROW><ROW><id>17737817</id><snippet>myListofTuples</snippet></ROW><ROW><id>17737817</id><snippet>with</snippet></ROW><ROW><id>17737817</id><snippet>with</snippet></ROW><ROW><id>17737817</id><snippet>[something, another_thing, etc, ...]</snippet></ROW><ROW><id>17737817</id><snippet>[x*x for x in range(100) if x % 2]</snippet></ROW><ROW><id>17737817</id><snippet>for line in inputFile.readlines()</snippet></ROW><ROW><id>17737817</id><snippet>line.split(',')</snippet></ROW><ROW><id>17737817</id><snippet>tuple()</snippet></ROW><ROW><id>17737817</id><snippet>myListofTuples = list()
for line in inputfile.readlines():
    myListofTuples.append(line.split(','))
</snippet></ROW><ROW><id>17737849</id><snippet>grep</snippet></ROW><ROW><id>17737849</id><snippet>np.genfromtxt()</snippet></ROW><ROW><id>17737849</id><snippet>grep -P '^[-.0123456789]+ [-.0123456789]+ [-.0123456789]+ [-.0123456789]+$'
</snippet></ROW><ROW><id>17737849</id><snippet>wrapper = (i for i in fh if re.match(r'^[-.1234567890]+ [-.1234567890]+ [-.1234567890]+ [-.1234567890]+$',i))
np.genfromtxt(wrapper,...)
</snippet></ROW><ROW><id>17737901</id><snippet>for key in prices:
    if key in stock:
        print(prices[key] * stock[key])
</snippet></ROW><ROW><id>17737901</id><snippet>prices</snippet></ROW><ROW><id>17737901</id><snippet>stock</snippet></ROW><ROW><id>17737901</id><snippet>print(sum(prices[key] * stock[key] for key in prices))
</snippet></ROW><ROW><id>17737901</id><snippet>print(sum(prices[key] * stock[key] for key in prices if key in stock))
</snippet></ROW><ROW><id>17737901</id><snippet>total = 0

for key in prices:
    total += prices[key] * stock[key]

print(total)
</snippet></ROW><ROW><id>17737980</id><snippet>pip</snippet></ROW><ROW><id>17737980</id><snippet>pip</snippet></ROW><ROW><id>17737980</id><snippet>virtualenv</snippet></ROW><ROW><id>17737980</id><snippet>pip install virtualenv
</snippet></ROW><ROW><id>17737997</id><snippet>tbody</snippet></ROW><ROW><id>17737997</id><snippet>div#player-game_log-season</snippet></ROW><ROW><id>17737997</id><snippet>raws</snippet></ROW><ROW><id>17737997</id><snippet>rows</snippet></ROW><ROW><id>17737997</id><snippet>table</snippet></ROW><ROW><id>17737997</id><snippet>tr</snippet></ROW><ROW><id>17737997</id><snippet>...
tr = soup.find(id='player-game_log-season').find_all('tr')

for rows in tr:
    data = rows.find_all("td")
    print data
</snippet></ROW><ROW><id>17738048</id><snippet>import random
import string

def index(request):
    registerform = UserRegisterForm()
    if request.method == 'POST':
        if 'password' in request.POST:
            registerform = UserRegisterForm(request.POST)    
            if registerform.is_valid():
                username = ''.join(random.choice(string.ascii_uppercase + string.digits) for x in range(10))
                result = registerform.save(commit=False)
                result.set_password(request.POST['password'])
                result.username = username       
                result.save()
                member.user_id = user.id
                member.member_id = result.id
                member.save() 
          ''''
    return render(request,'index.html',{'registerform': registerform,})
</snippet></ROW><ROW><id>17738178</id><snippet>random.choice</snippet></ROW><ROW><id>17738178</id><snippet>()</snippet></ROW><ROW><id>17738178</id><snippet>[]</snippet></ROW><ROW><id>17738178</id><snippet>[]</snippet></ROW><ROW><id>17738178</id><snippet>()</snippet></ROW><ROW><id>17738178</id><snippet>return random.choice[herb_dict("")]</snippet></ROW><ROW><id>17738178</id><snippet>return random.choice(herb_dict)</snippet></ROW><ROW><id>17738178</id><snippet>herb_dict</snippet></ROW><ROW><id>17738178</id><snippet>print "You find some %s." % herb.name
player.hasHerb()
</snippet></ROW><ROW><id>17738178</id><snippet>if random.choice([0, 1]):</snippet></ROW><ROW><id>17738178</id><snippet>if random.randint(0,1) == 1:</snippet></ROW><ROW><id>17738277</id><snippet>datetime.strptime(install['click_date'],'%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>17738277</id><snippet>time.mktime(datetime.datetime.strptime(install['click_date'], '%Y-%m-%d %H:%M:%S %Z').timetuple()) + time.timezone
</snippet></ROW><ROW><id>17738277</id><snippet>&gt;&gt;&gt; time.mktime(datetime.datetime.strptime('2013-07-07 00:33:02', '%Y-%m-%d %H:%M:%S').timetuple()) 

1373128382.0

&gt;&gt;&gt; time.mktime(datetime.datetime.strptime('2013-07-07 00:33:02', '%Y-%m-%d %H:%M:%S').timetuple()) + time.timezone

1373099582.0
</snippet></ROW><ROW><id>17738686</id><snippet>def title():
    text = """
     A children song
    """
    print(text)

def verse1():
    text = """
    There was an old lady who swallowed a fly.
    I don't know why she swallowed the fly.
    Perhaps she'll die.
    """
    print(text)

def verse2():
    text = """
    There was an old lady who swallowed a spider,
    That wriggled and jiggled and tickled inside her.
    She swallowed the spider to catch the fly.
    I don't know why she swallowed the fly.
    Perhaps she'll die.
    """
    print(text)
def verse3():
    text = """
    There was an old lady who swallowed a bird.
    How absurd to swallow a bird.
    She swallowed the bird to catch the spider,
    That wriggled and jiggled and tickled inside her.
    She swallowed the spider to catch the fly.
    I don't know why she swallowed the fly.
    Perhaps she'll die.
    """
    print(text)

def verse4():
    text = """
    There was an old lady who swallowed a cat.
    Imagine that to swallow a cat.
    She swallowed the cat to catch the bird.
    She swallowed the bird to catch the spider,
    That wriggled and jiggled and tickled inside her.
    She swallowed the spider to catch the fly.
    I don't know why she swallowed the fly.
    Perhaps she'll die.
    """
    print(text)
def verse5():
    text = """
    There was an old lady who swallowed a dog.
    My, what a hog, to swallow a dog.
    She swallowed the dog to catch the cat.
    She swallowed the cat to catch the bird.
    She swallowed the bird to catch the spider,
    That wriggled and jiggled and tickled inside her.
    She swallowed the spider to catch the fly.
    I don't know why she swallowed the fly.
    Perhaps she'll die.
    """
    print(text)

def lastverse():
    text = """
    There was an old lady who swallowed a horse.
    She's dead, of course.
    """
    print(text)

def main():
    title()  # print the title
    verse1()  # fly verse
    verse2()  # spider verse
    verse3()  # bird verse
    verse4()  # cat verse
    verse5()  # dog verse
    lastverse()  # horse verse

main()
</snippet></ROW><ROW><id>17738912</id><snippet>x</snippet></ROW><ROW><id>17738912</id><snippet>c*x</snippet></ROW><ROW><id>17738912</id><snippet>y</snippet></ROW><ROW><id>17738912</id><snippet>x*s + m</snippet></ROW><ROW><id>17738912</id><snippet>def calc(N, m):
    x = 1.0
    y = 2.0
    container = np.zeros((N, 2))
    nm = N*m
    gamma_vals = np.random.gamma(3, 1, size=(nm,))
    norm_vals = np.random.normal(0, 1, size=(nm,))
    for i in xrange(N):
        for j in xrange(m):
            ij = i*j
            x = gamma_vals[ij] / (y*y+4)
            y = norm_vals[ij]/np.sqrt(x+1) + 1/(x+1)
        container[i, 0] = x
        container[i, 1] = y
    return container
</snippet></ROW><ROW><id>17738912</id><snippet>np.cumprod</snippet></ROW><ROW><id>17739135</id><snippet>$.ajax({
    url: '/login',
    type: 'POST',
    data: {akey:akey,sakey:sakey,pname:pname},
    success: function(response){
        alert(response.status);
    }
});
</snippet></ROW><ROW><id>17739135</id><snippet>&lt;form action="" method="POST"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17739135</id><snippet>akey = request.form['akey']
sakey = request.form['sakey']
pname = request.form['pname']
</snippet></ROW><ROW><id>17739186</id><snippet>import re
my_text = open("some.html").read()
my_list = re.findall("ONLY_REQUIRED\d.JPG",my_text)
print my_list
</snippet></ROW><ROW><id>17739225</id><snippet>Import</snippet></ROW><ROW><id>17739225</id><snippet>If</snippet></ROW><ROW><id>17739225</id><snippet>print stationlist[0][2]</snippet></ROW><ROW><id>17739225</id><snippet>L += 1</snippet></ROW><ROW><id>17739225</id><snippet>L = L + 1</snippet></ROW><ROW><id>17739225</id><snippet>radius = 1000</snippet></ROW><ROW><id>17739225</id><snippet>for station in stationlist: # Notice the lowercase
    if calculateDistance(eastingbase, northingbase, station[1], station[2]) &lt; radius:
        print station[0]
</snippet></ROW><ROW><id>17739613</id><snippet>plot_surface</snippet></ROW><ROW><id>17739613</id><snippet>import gdal
from mpl_toolkits.mplot3d import Axes3D

ds = gdal.Open('gmted_small.tif')

dem = ds.ReadAsArray()
gt = ds.GetGeoTransform()

ds = None


fig, ax = plt.subplots(figsize=(16,8), subplot_kw={'projection': '3d'})

xres = gt[1]
yres = gt[5]

X = np.arange(gt[0], gt[0] + dem.shape[1]*xres, xres)
Y = np.arange(gt[3], gt[3] + dem.shape[0]*yres, yres)

X, Y = np.meshgrid(X, Y)

surf = ax.plot_surface(X,Y,dem, rstride=1, cstride=1, cmap=plt.cm.RdYlBu_r, vmin=0, vmax=4000, linewidth=0, antialiased=True)

ax.set_zlim(0, 60000) # to make it stand out less
ax.view_init(60,-105)

fig.colorbar(surf, shrink=0.4, aspect=20)
</snippet></ROW><ROW><id>17739755</id><snippet>print 'hello\n'
print 'hi'
</snippet></ROW><ROW><id>17739755</id><snippet>hello

hi
</snippet></ROW><ROW><id>17739755</id><snippet>print</snippet></ROW><ROW><id>17739755</id><snippet>name = raw_input("What is your name?\n&gt; ")
print "Hello {}!".format(name)
</snippet></ROW><ROW><id>17739755</id><snippet>What is your name?
&gt; Haidro
Hello Haidro!
</snippet></ROW><ROW><id>17739868</id><snippet>date_objects = np.array([datetime.datetime.strptime(row[0] + row[1], "%Y-%m-%d%H:%M") 
                    for row in arr])
</snippet></ROW><ROW><id>17740167</id><snippet>open ... close</snippet></ROW><ROW><id>17740167</id><snippet>with open('out.csv', 'a') as f:
    f.seek(0, 2) # os.SEEK_END, on Windows file position set to 0 even in append mode.
    if f.tell() == 0:
        f.write(header)
    f.write(','.join([date, str(temp_f), weather]))
    f.write('\n')
</snippet></ROW><ROW><id>17740252</id><snippet>if vmtype not in ("VHD", "VMDK"):
</snippet></ROW><ROW><id>17740252</id><snippet>if (vmtype is not ("VHD")) or ("VMDK"):
</snippet></ROW><ROW><id>17740252</id><snippet>("VMDK")</snippet></ROW><ROW><id>17740252</id><snippet>if</snippet></ROW><ROW><id>17740252</id><snippet>if vmtype is not "VHD":
</snippet></ROW><ROW><id>17740252</id><snippet>is</snippet></ROW><ROW><id>17740252</id><snippet>if vmtype != "VHD":
</snippet></ROW><ROW><id>17740350</id><snippet>def adminhome():
    row1 =''
    try:
        db = connect_db()
        rows=g.db.query("SELECT * FROM `auth_user` order by id DESC ")
        rows1 = list(rows)
        data=''
        if len(rows1) &gt; 0:
            users = rows1
        #close_db(db)
    except Exception as e:
        users = e
    return users

@app.context_processor
def inject():
    return dict(adminhome=adminhome)
</snippet></ROW><ROW><id>17740366</id><snippet>length</snippet></ROW><ROW><id>17740366</id><snippet>&gt;&gt;&gt; sorted(d, key=lambda k: -len(d[k]))
['Gross', 'Ugly', 'Random', 'Stupid']
&gt;&gt;&gt; sorted(d, key=lambda k: len(d[k]), reverse=True)
['Gross', 'Ugly', 'Random', 'Stupid']
</snippet></ROW><ROW><id>17740757</id><snippet>t = A[t] = A.count(3)
</snippet></ROW><ROW><id>17740757</id><snippet>t = A.count(3)</snippet></ROW><ROW><id>17740757</id><snippet>t</snippet></ROW><ROW><id>17740757</id><snippet>A.count(3)</snippet></ROW><ROW><id>17740757</id><snippet>A</snippet></ROW><ROW><id>17740757</id><snippet>t</snippet></ROW><ROW><id>17740757</id><snippet>A.count(3)</snippet></ROW><ROW><id>17741419</id><snippet>Tkinter.Scrollbar</snippet></ROW><ROW><id>17741419</id><snippet>ttk.Scrollbar</snippet></ROW><ROW><id>17741525</id><snippet>from Tkinter import *
import random


class BubbleFrame:

    def __init__(self, root):
        root.title("Math Bubbles")
        self.bubbles = {}  # this will hold bubbles ids, positions and velocities
        self.score = 0
        Button(root, text="Start", width=8, command=self.initialize_bubbles).pack()  # This button starts the game, making the bubbles move across the screen
        Button(root, text="Quit", width=8, command=quit).pack()
        self.canvas = Canvas(root, width=800, height=650, bg='#afeeee')
        self.canvas.create_text(400, 30, fill="darkblue", font="Times 20 italic bold", text="Click the bubbles that are multiples of two.")
        self.canvas.pack()

    def initialize_bubbles(self):
        for each_no in xrange(1, 21):
            xval = random.randint(5, 765)
            yval = random.randint(5, 615)
            oval_id = self.canvas.create_oval(xval, yval, xval + 30, yval + 30,
                                              fill="#00ffff", outline="#00bfff",
                                              width=5, tags="bubble")
            text_id = self.canvas.create_text(xval + 15, yval + 15, text=each_no, tags="bubble")
            self.canvas.tag_bind("bubble", "&lt;Button-1&gt;", lambda x: self.click(x))
            self.bubbles[oval_id] = (xval, yval, 0, 0, each_no, text_id)  # add bubbles to dictionary

    def click(self, event):
        if self.canvas.find_withtag(CURRENT):
            item_uid = event.widget.find_closest(event.x, event.y)[0]
            is_even = False
            try:  # clicked oval
                self.bubbles[item_uid]
            except KeyError:  # clicked the text
                for key, value in self.bubbles.iteritems():
                    if item_uid == value[5]:  # comparing to text_id
                        if value[4] % 2 == 0:
                            is_even = True
                        self.canvas.delete(key)  # deleting oval
                        self.canvas.delete(item_uid)  # deleting text
            else:
                if self.bubbles[item_uid][4] % 2 == 0:
                    is_even = True
                self.canvas.delete(item_uid)  # deleting oval
                self.canvas.delete(self.bubbles[item_uid][5])  # deleting text
            if is_even:
                self.score += 1
            else:
                self.score -= 1
            print self.score

    def loop(self, root):
        for oval_id, (x, y, dx, dy, each_no, text_id) in self.bubbles.items():
            # update velocities and positions
            dx += random.randint(-1, 1)
            dy += random.randint(-1, 1)
            # dx and dy should not be too large
            dx, dy = max(-5, min(dx, 5)), max(-5, min(dy, 5))
            # bounce off walls
            if not 0 &lt; x &lt; 770:
                dx = -dx
            if not 0 &lt; y &lt; 620:
                dy = -dy
            # apply new velocities
            self.canvas.move(oval_id, dx, dy)
            self.canvas.move(text_id, dx, dy)
            self.bubbles[oval_id] = (x + dx, y + dy, dx, dy, each_no, text_id)
        # have mainloop repeat this after 100 ms
        root.after(100, self.loop, root)

if __name__ == "__main__":
    root = Tk()
    frame = BubbleFrame(root)
    frame.loop(root)
    root.mainloop()
</snippet></ROW><ROW><id>17741527</id><snippet>file_content = file_content.readlines()
for lines in file_content[0:]:
     #stuff
</snippet></ROW><ROW><id>17741633</id><snippet>lst = [[3, 4.6575, 7.3725], 
       [3, 3.91, 5.694],
       [2, 3.986666666666667, 6.6433333333333335],
       [1, 3.9542857142857137, 5.674285714285714]]

# group the values in a dictionary
import collections
d = collections.defaultdict(list)
for item in lst:
    d[item[0]].append(item)
# find sum of values
for key, value in d.items():
    print [key] + map(sum, zip(*value)[1:])
</snippet></ROW><ROW><id>17741633</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17741633</id><snippet>import itertools
groups = itertools.groupby(lst, lambda i: i[0])
for key, value in groups:
    print [key] + map(sum, zip(*value)[1:])
</snippet></ROW><ROW><id>17741633</id><snippet>[1, 3.9542857142857137, 5.674285714285714]
[2, 3.986666666666667, 6.6433333333333335]
[3, 8.567499999999999, 13.0665]
</snippet></ROW><ROW><id>17741633</id><snippet>mean</snippet></ROW><ROW><id>17741633</id><snippet>sum</snippet></ROW><ROW><id>17741633</id><snippet>map</snippet></ROW><ROW><id>17741633</id><snippet>mean = lambda x: sum(x) / float(len(x))
map(mean, zip...)
</snippet></ROW><ROW><id>17741656</id><snippet>get_or_create</snippet></ROW><ROW><id>17741656</id><snippet>instance = Model.objects.get(name='firstName',surname='lastName')

print instance.birthday
print instance.name
print instance.surname
</snippet></ROW><ROW><id>17741656</id><snippet>Model</snippet></ROW><ROW><id>17741656</id><snippet>primary_key</snippet></ROW><ROW><id>17741656</id><snippet>pk</snippet></ROW><ROW><id>17741656</id><snippet>name="firstName"</snippet></ROW><ROW><id>17741656</id><snippet>Model.objects.get</snippet></ROW><ROW><id>17741681</id><snippet>lst</snippet></ROW><ROW><id>17741681</id><snippet>seq</snippet></ROW><ROW><id>17741681</id><snippet>def sequence_in_list(seq, lst):
    m, n = len(lst), len(seq)
    for i in xrange(m):
        for j in xrange(n):
            if lst[i:i+3] == seq[j:j+3]:
                return lst[i+3]
</snippet></ROW><ROW><id>17741681</id><snippet>lst[i:i+3] == list(seq[j:j+3])</snippet></ROW><ROW><id>17741681</id><snippet>seq</snippet></ROW><ROW><id>17741681</id><snippet>lst</snippet></ROW><ROW><id>17741681</id><snippet>all</snippet></ROW><ROW><id>17741681</id><snippet>def sequence_in_list(seq, lst):
    m, n = len(lst), len(seq)
    for i in xrange(m):
        for j in xrange(n):
            if all(lst[i+k] == seq[j+k] for k in range(3)):
                return lst[i+3]
</snippet></ROW><ROW><id>17741681</id><snippet>range(3)</snippet></ROW><ROW><id>17741681</id><snippet>range(10)</snippet></ROW><ROW><id>17741681</id><snippet>IndexError</snippet></ROW><ROW><id>17741681</id><snippet>list[i+1]</snippet></ROW><ROW><id>17741681</id><snippet>i</snippet></ROW><ROW><id>17741681</id><snippet>len(list) - 1</snippet></ROW><ROW><id>17741681</id><snippet>seq[j:j+3]</snippet></ROW><ROW><id>17741681</id><snippet>list</snippet></ROW><ROW><id>17742131</id><snippet>f</snippet></ROW><ROW><id>17742131</id><snippet>with open(...) as f:
</snippet></ROW><ROW><id>17742131</id><snippet>as myfile</snippet></ROW><ROW><id>17742131</id><snippet>TypeError: 'file' object does not support item assignment</snippet></ROW><ROW><id>17742171</id><snippet>self.herb = []
foundHerb = 'something'
self.herb.append(foundHerb)
self.herb.append('another thing')
self.herb.append('more stuff')

print 'You have: ' + ', '.join(self.herb)
# You have: something, another thing, more stuff
</snippet></ROW><ROW><id>17742171</id><snippet>foundHerb</snippet></ROW><ROW><id>17742171</id><snippet>foundHerb = random.choice(herb_dict)
</snippet></ROW><ROW><id>17742171</id><snippet>herb_dict</snippet></ROW><ROW><id>17742171</id><snippet>herb_dict = [
    ("Aloe Vera", Player().health == Player().health + 2),
    ("Cannabis", Player().state == 'high'),
    ("Ergot", Player().state == 'tripping')
]
</snippet></ROW><ROW><id>17742171</id><snippet>=</snippet></ROW><ROW><id>17742171</id><snippet>==</snippet></ROW><ROW><id>17742171</id><snippet>self.herb.append(foundHerb[0])
</snippet></ROW><ROW><id>17742407</id><snippet>b</snippet></ROW><ROW><id>17742407</id><snippet>def test():
    print("I'm called only once")
    return False

def foo(b=5 if test() else 10):
    print(b)

foo()
foo()
</snippet></ROW><ROW><id>17742407</id><snippet>I'm called only once
10
10
</snippet></ROW><ROW><id>17742407</id><snippet>None</snippet></ROW><ROW><id>17742407</id><snippet>def foo(b=None):
    if b is None:
        b = 5 if test() else 10

    print b
</snippet></ROW><ROW><id>17742448</id><snippet>row</snippet></ROW><ROW><id>17742448</id><snippet>import csv

data = csv.reader(open('test.csv', 'r'), delimiter='"')
for row in data:
    for item in row:
        if '.jpg' in item:
            print(item)
</snippet></ROW><ROW><id>17742448</id><snippet>assfgs.jpg
erqwer.jpg
</snippet></ROW><ROW><id>17742528</id><snippet>if entryx == answerx and entryy == answery:
</snippet></ROW><ROW><id>17742528</id><snippet>e1</snippet></ROW><ROW><id>17742528</id><snippet>e2</snippet></ROW><ROW><id>17742696</id><snippet>.append()</snippet></ROW><ROW><id>17742696</id><snippet>None</snippet></ROW><ROW><id>17742696</id><snippet>l_two</snippet></ROW><ROW><id>17742696</id><snippet>None</snippet></ROW><ROW><id>17742696</id><snippet>l</snippet></ROW><ROW><id>17742696</id><snippet>l_two = list(set(l_one))
</snippet></ROW><ROW><id>17742696</id><snippet>l_one = [x for x in someList]
l_two = []
for i in l_one:
    if i not in l_two:
        l_two.append(i)
</snippet></ROW><ROW><id>17742696</id><snippet>from itertools import groupby
l_two = [key for key, value in groupby(l_one)]
</snippet></ROW><ROW><id>17742750</id><snippet>numpy.histogram2d</snippet></ROW><ROW><id>17743099</id><snippet>read()</snippet></ROW><ROW><id>17743099</id><snippet>output = open('new_data.txt', 'r') # See the r
output_list = output.read().strip().split('.')
</snippet></ROW><ROW><id>17743145</id><snippet>[1,2,3][True]</snippet></ROW><ROW><id>17743145</id><snippet>[]</snippet></ROW><ROW><id>17743145</id><snippet>[]</snippet></ROW><ROW><id>17743145</id><snippet>a</snippet></ROW><ROW><id>17743145</id><snippet>&gt;&gt;&gt; [1,2,3]
[1, 2, 3]
&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17743145</id><snippet>[]</snippet></ROW><ROW><id>17743145</id><snippet>&gt;&gt;&gt; a[0]
1
&gt;&gt;&gt; a[1]
2
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17743145</id><snippet>&gt;&gt;&gt; [1,2,3][0]
1
&gt;&gt;&gt; [1,2,3][1]
2
</snippet></ROW><ROW><id>17743145</id><snippet>True</snippet></ROW><ROW><id>17743145</id><snippet>False</snippet></ROW><ROW><id>17743145</id><snippet>[1,2,3][True]</snippet></ROW><ROW><id>17743145</id><snippet>[1,2,3][1]</snippet></ROW><ROW><id>17743182</id><snippet>mytable</snippet></ROW><ROW><id>17743182</id><snippet>autocommit</snippet></ROW><ROW><id>17743330</id><snippet>data</snippet></ROW><ROW><id>17743330</id><snippet>arr1.shape</snippet></ROW><ROW><id>17743330</id><snippet>(3,)</snippet></ROW><ROW><id>17743330</id><snippet>arr1</snippet></ROW><ROW><id>17743330</id><snippet>arr2</snippet></ROW><ROW><id>17743330</id><snippet>(3,3)</snippet></ROW><ROW><id>17743330</id><snippet>dtype=desired_type</snippet></ROW><ROW><id>17743330</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>17743330</id><snippet>desired_type</snippet></ROW><ROW><id>17743330</id><snippet>z1 = arr1['Date'] + arr1['Time'] 
</snippet></ROW><ROW><id>17743330</id><snippet>'2012-04-01 00:10'</snippet></ROW><ROW><id>17743330</id><snippet>z1 = [d + ' ' + t for d,t in zip(arr1['Date'],arr1['Time'])]
</snippet></ROW><ROW><id>17743330</id><snippet>datetime</snippet></ROW><ROW><id>17743330</id><snippet>dts = np.array(z1,dtype=np.datetime64)
</snippet></ROW><ROW><id>17743330</id><snippet>matplotlib.dates.strpdate2num</snippet></ROW><ROW><id>17743330</id><snippet>plot_date()</snippet></ROW><ROW><id>17743330</id><snippet>from matplotlib import dates
from matplotlib import pyplot as pp

# convert date and time strings to matplotlib datenums
dtconv = dates.strpdate2num('%Y-%m-%d%H:%M')
datenums = [dtconv(d+t) for d,t in zip(arr1['Date'],arr1['Time'])]

# use plot_date to plot timeseries
pp.plot_date(datenums,arr1['Speed'],'-ob')
</snippet></ROW><ROW><id>17743330</id><snippet>names</snippet></ROW><ROW><id>17743330</id><snippet>arr2</snippet></ROW><ROW><id>17743572</id><snippet>book.py</snippet></ROW><ROW><id>17743572</id><snippet>book.py</snippet></ROW><ROW><id>17743572</id><snippet>corpus</snippet></ROW><ROW><id>17743572</id><snippet>Text</snippet></ROW><ROW><id>17743572</id><snippet>from nltk.corpus import PlaintextCorpusReader
from nltk.text import Text

# For example, I create an example text file
text1 = '''
This is a story about a foo bar. Foo likes to go to the bar and his last name is also bar. At home, he kept a lot of gold chocolate bars.
'''
text2 = '''
One day, foo went to the bar in his neighborhood and was shot down by a sheep, a blah blah black sheep.
'''
texts = ['text1','text2']
corpusdir = './mycorpus' # the directory where you keep the corpus
for i, t in enumerate(texts):
    outfilename = 'text'+str(i)+'.txt'
    print&gt;&gt;open(corpusdir+outfilename,'w'), t

# Read the the example corpus into NLTK's corpus class.
mycorpus = PlaintextCorpusReader(corpusdir, '.*')

# Read the NLTK's corpus into NLTK's text class, 
# where your book-like concoordance search is available
mytext = Text(mycorpus.words())

mytext.concoordance('foo')
</snippet></ROW><ROW><id>17743732</id><snippet>for i in reversed(range(NumElements)):
    if not A[i]:
        del A[i], B[i], C[i], D[i]
</snippet></ROW><ROW><id>17743732</id><snippet>list.pop()</snippet></ROW><ROW><id>17743732</id><snippet>0</snippet></ROW><ROW><id>17743732</id><snippet>del</snippet></ROW><ROW><id>17743732</id><snippet>reversed(range(NumElements))</snippet></ROW><ROW><id>17743732</id><snippet>range(NumElements - 1, -1, -1)</snippet></ROW><ROW><id>17743732</id><snippet>reversed()</snippet></ROW><ROW><id>17743732</id><snippet>xrange()</snippet></ROW><ROW><id>17743732</id><snippet>for i in reversed(xrange(NumElements)):
</snippet></ROW><ROW><id>17743732</id><snippet>&gt;&gt;&gt; A = [1, 2, 0, 4, 5, 0]
&gt;&gt;&gt; B = [2, 4, 0, 10, 9, 0]
&gt;&gt;&gt; C = [5, 3, 0, 10, 8, 0]
&gt;&gt;&gt; D = [10, 3, 0, 1, 34, 0]
&gt;&gt;&gt; for i in reversed(range(NumElements)):
...     if not A[i]:
...         del A[i], B[i], C[i], D[i]
... 
&gt;&gt;&gt; A, B, C, D
([1, 2, 4, 5], [2, 4, 10, 9], [5, 3, 10, 8], [10, 3, 1, 34])
</snippet></ROW><ROW><id>17743866</id><snippet>IntroView</snippet></ROW><ROW><id>17743866</id><snippet>symbol_list</snippet></ROW><ROW><id>17743866</id><snippet>class IntroView(generic.DetailView):
    model = Book
    template_name = 'books/intro.html'

    def get_context_data(self, **kwargs):
        context = super(IntroView, self).get_context_data(**kwargs)
        context['symbol_list'] = Symbol.objects.all().order_by('name')
        return context
</snippet></ROW><ROW><id>17744065</id><snippet>s.intersection(l)
</snippet></ROW><ROW><id>17744065</id><snippet>&gt;&gt;&gt; s = set(['Facebook', 'Yahoo', 'Gmail'])
&gt;&gt;&gt; l = ['Yahoo', 'Google', 'MySpace', 'Apple', 'Gmail']
&gt;&gt;&gt; s.intersection(l)
set(['Yahoo', 'Gmail'])
</snippet></ROW><ROW><id>17744065</id><snippet>for</snippet></ROW><ROW><id>17744144</id><snippet>set</snippet></ROW><ROW><id>17744144</id><snippet>def getlist(file):
    content = {}
    with open(file, newline = '') as inp:
        my_reader = reader(inp, delimiter = ' ')
        for col in zip(*my_reader):
            content[col[0]] = l = []
            seen = set()
            for k in col[1:]:
                if k not in seen:
                    l.append(k)
                    seen.add(k)
    return content
</snippet></ROW><ROW><id>17744144</id><snippet>print()</snippet></ROW><ROW><id>17744144</id><snippet>,</snippet></ROW><ROW><id>17744144</id><snippet>{'a,b,c,d': ['0,1,2,3', '1,2,3,4']}
</snippet></ROW><ROW><id>17744144</id><snippet>{'d': ['3', '4'], 'c': ['2', '3'], 'b': ['1', '2'], 'a': ['0', '1']}
</snippet></ROW><ROW><id>17744218</id><snippet>endswith</snippet></ROW><ROW><id>17744218</id><snippet>full_url.endswith('/en/') or full_url.endswith('/ru/')
</snippet></ROW><ROW><id>17744218</id><snippet>any</snippet></ROW><ROW><id>17744218</id><snippet>any(s.endswith(ext) for ext in ['/ru/', '/en/'])
</snippet></ROW><ROW><id>17744279</id><snippet>points</snippet></ROW><ROW><id>17744279</id><snippet>newpoints = numpy.array([x.split(',') for x in points], dtype=numpy.float)
</snippet></ROW><ROW><id>17744323</id><snippet>setup</snippet></ROW><ROW><id>17744323</id><snippet>teardown</snippet></ROW><ROW><id>17744323</id><snippet>pytest</snippet></ROW><ROW><id>17744323</id><snippet>setup_method</snippet></ROW><ROW><id>17744323</id><snippet>teardown_method</snippet></ROW><ROW><id>17744323</id><snippet>class TestSomething(object):

    def setup_method(self, method):
        print "\n%s:%s" % (type(self).__name__, method.__name__)

    def teardown_method(self, method):
        pass

    def test_the_power(self):
        assert "foo" != "bar"

    def test_something_else(self):
        assert True
</snippet></ROW><ROW><id>17744323</id><snippet>py.test -s</snippet></ROW><ROW><id>17744323</id><snippet>============================= test session starts ==============================
platform linux2 -- Python 2.7.3 -- pytest-2.3.3
plugins: cov
collected 2 items 

test_pytest.py 
TestSomething:test_the_power
.
TestSomething:test_something_else
.

=========================== 2 passed in 0.03 seconds ===========================
</snippet></ROW><ROW><id>17744371</id><snippet>d = {
    "sum": lambda: doSum(2, 4),
    "prod": lambda: doProd(2, 4),
    }
d["sum"]()
</snippet></ROW><ROW><id>17744792</id><snippet>MyMethod</snippet></ROW><ROW><id>17744792</id><snippet>VMPast.MyMethod()
</snippet></ROW><ROW><id>17744792</id><snippet>class VariableManagerClass:
    def __getattr__(self, attr):
        return AttributeSetter(self, attr)
</snippet></ROW><ROW><id>17744792</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>17744792</id><snippet>.__deepcopy__()</snippet></ROW><ROW><id>17744792</id><snippet>__getattr__</snippet></ROW><ROW><id>17744792</id><snippet>AttributeSetter</snippet></ROW><ROW><id>17744792</id><snippet>attr</snippet></ROW><ROW><id>17744792</id><snippet>class VariableManagerClass:
    def __getattr__(self, attr):
        if attr.startswith('_'):
            raise AttributeError(attr)
        return AttributeSetter(self, attr)
</snippet></ROW><ROW><id>17744969</id><snippet>list1 = []

for port in portlist1:
    l = [[port.getname(),port.getsize()],
         [[register.getaddress(), register.getdirection()]
          for register in port.getregisters()]]
    list1.append(l)
</snippet></ROW><ROW><id>17744969</id><snippet>dict1 = {}
for port in portlist1:
    dict1[port.getname()] = {"size": port.getsize(),
                             "registers": {register.getaddress(): register.getdirection()
                                           for register in port.getregisters}}
</snippet></ROW><ROW><id>17745053</id><snippet>plot_box()</snippet></ROW><ROW><id>17745053</id><snippet>plot_hist()</snippet></ROW><ROW><id>17745053</id><snippet>plt.figure()
plot_hist(plot_data, 'platform') # plot the boxplot for platforms
plt.figure()
plot_box(plot_data, 'platform') # plot the boxplot for platforms
</snippet></ROW><ROW><id>17745053</id><snippet>AxesSubplot</snippet></ROW><ROW><id>17745053</id><snippet>def plot_box(ax, plot_data, top_key):
</snippet></ROW><ROW><id>17745053</id><snippet>plt.hist()
plt.boxplot()
</snippet></ROW><ROW><id>17745053</id><snippet>ax.hist()
plt.boxplot()
</snippet></ROW><ROW><id>17745249</id><snippet>n/2</snippet></ROW><ROW><id>17745249</id><snippet>let n = 36
=&gt; factors(n) : (1x36, 2x18, 3x12, 4x9, 6x6, 9x4, 12x3, 18x2, 36x1)
</snippet></ROW><ROW><id>17745249</id><snippet>import math

def get_factors(n):
    return sum(2 for i in range(1, round(math.sqrt(n)+1)) if not n % i)
</snippet></ROW><ROW><id>17745249</id><snippet>def generate_triangles(limit):
    l = 1
    while l &lt;= limit:
        yield sum(range(l + 1))
        l += 1
</snippet></ROW><ROW><id>17745249</id><snippet>def test_triangles():
    triangles = generate_triangles(100000)
    for i in triangles:
        if get_factors(i) &gt; 499:
            return i
</snippet></ROW><ROW><id>17745249</id><snippet>$ python3 -m cProfile euler12.py 

361986 function calls in 8.006 seconds
</snippet></ROW><ROW><id>17745249</id><snippet>get_factors(n)</snippet></ROW><ROW><id>17745484</id><snippet>import csv

import lxml.etree

x = u'''&lt;!-- MoneyMate (tm) XMLPerfs Application version 1.0.1.1 - Copyright 2000 MoneyMate Limited. All Rights Reserved. MoneyMate --&gt;
&lt;!-- Discrete Perfs for 180 periods for Monthly frequency --&gt;
&lt;MONEYMATE_XML_FEED xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://mmia2.moneymate.com/xml/MoneyMateComplete.xsd" version="1.0" calcCurrency="SEK"&gt;
    &lt;TYPES&gt;
        &lt;TYPE typeCountry="SE" typeId="85" typeName="string" calcToDate="2013-07-16"&gt;
            &lt;COMPANIES&gt;
                &lt;COMPANY companyId="25000068" companyName="string"/&gt;
                &lt;CATEGORIES&gt;
                    &lt;CATEGORY categoryId="1101" categoryName="Aktie -- Asien"&gt;
                        &lt;FUNDS&gt;
                            &lt;FUND fundId="6201" fundName="string" fundCurrency="GBP" fundCompanyId="25000068"&gt;
                                &lt;PERFORMANCES&gt;
                                    &lt;MONTHLYPERFS&gt;
                                        &lt;PERFORMANCEMONTH perfEndMonth="2006-05-31" perfMonth="-0.087670"/&gt;
                                    &lt;/MONTHLYPERFS&gt;
                                &lt;/PERFORMANCES&gt;
                            &lt;/FUND&gt;
                        &lt;/FUNDS&gt;
                    &lt;/CATEGORY&gt;
                    &lt;CATEGORY categoryId="13" categoryName="Rntefonder"&gt;
                        &lt;FUNDS&gt;&lt;/FUNDS&gt;
                    &lt;/CATEGORY&gt;
                &lt;/CATEGORIES&gt;
            &lt;/COMPANIES&gt;
        &lt;/TYPE&gt;
    &lt;/TYPES&gt;
&lt;/MONEYMATE_XML_FEED&gt;
'''

with open('output.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerow(('fundid', 'fundName', 'fundCurrency', 'fundCompanyId', 'perfEndMonth', 'perfMonth'))
    root = lxml.etree.fromstring(x)
    for fund in root.iter('FUND'):
        perf = fund.find('.//PERFORMANCEMONTH')
        row = fund.get('fundId'), fund.get('fundName'), fund.get('fundCurrency'), fund.get('fundCompanyId'), perf.get('perfEndMonth'), perf.get('perfMonth')
        writer.writerow(row)
</snippet></ROW><ROW><id>17745487</id><snippet>coo_matrix</snippet></ROW><ROW><id>17745487</id><snippet>from scipy.sparse import coo_matrix
import scipy
nrows = 100000
ncols = 100000
row = scipy.array([1,3,5,7,9])
col = scipy.array([2,4,6,8,10])
values = scipy.ones(col.size)
m = coo_matrix((values, (row,col)), shape=(nrows, ncols), dtype=float)
</snippet></ROW><ROW><id>17745762</id><snippet>cmd</snippet></ROW><ROW><id>17745762</id><snippet>readline</snippet></ROW><ROW><id>17745762</id><snippet>Tab</snippet></ROW><ROW><id>17745762</id><snippet>None</snippet></ROW><ROW><id>17745762</id><snippet>readline</snippet></ROW><ROW><id>17745762</id><snippet>readline</snippet></ROW><ROW><id>17745762</id><snippet>self.do_help()</snippet></ROW><ROW><id>17745762</id><snippet>self.help_&lt;cmd&gt;()</snippet></ROW><ROW><id>17745843</id><snippet>break</snippet></ROW><ROW><id>17745843</id><snippet>&gt;&gt;&gt; for i in numbers:
...     if i % 2 == 0:
...         print i
...     if i == 980:
...         break
... 
402
984
360
408
980
</snippet></ROW><ROW><id>17745865</id><snippet>np.where</snippet></ROW><ROW><id>17745865</id><snippet>ind = np.where( flow_direction_np==32 )
</snippet></ROW><ROW><id>17745865</id><snippet>ind</snippet></ROW><ROW><id>17745865</id><snippet>flow_direction_np</snippet></ROW><ROW><id>17745865</id><snippet>i-1</snippet></ROW><ROW><id>17745865</id><snippet>j-1</snippet></ROW><ROW><id>17745865</id><snippet>ind_32 = (ind[0]-1, ind[1]-1)
</snippet></ROW><ROW><id>17745865</id><snippet>elevation_gain[ ind_32 ] += sediment_transport_np[ ind ]
</snippet></ROW><ROW><id>17745865</id><snippet>lookup = {32: (-1, -1),
          16: ( 0, -1),
           8: (+1, -1),
           4: (+1,  0),
          64: (-1,  0),
         128: (-1, +1),
           1: ( 0, +1),
           2: (+1, +1)}

for num, shift in lookup.iteritems():
    ind = np.where( flow_direction_np==num )
    ind_num = ind[0] + shift[0], ind[1] + shift[1]
    elevation_gain[ ind_num] += sediment_transport_np[ ind ]
</snippet></ROW><ROW><id>17745953</id><snippet>A</snippet></ROW><ROW><id>17745953</id><snippet>a = A()
for msg in ["hey", "there"]:
    a.p(msg)
</snippet></ROW><ROW><id>17745953</id><snippet>_get_logger</snippet></ROW><ROW><id>17745953</id><snippet>def _get_logger(self):
    loglevel = logging.INFO
    l = logging.getLogger(__name__)
    if not getattr(l, 'handler_set', None):
        l.setLevel(logging.INFO)
        h = logging.StreamHandler()
        f = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        h.setFormatter(f)
        l.addHandler(h)
        l.setLevel(loglevel)
        l.handler_set = True
    return l  
</snippet></ROW><ROW><id>17746172</id><snippet>date('hai')</snippet></ROW><ROW><id>17746172</id><snippet>output: 'hai'</snippet></ROW><ROW><id>17746172</id><snippet>date.now()</snippet></ROW><ROW><id>17746172</id><snippet>'now'</snippet></ROW><ROW><id>17746172</id><snippet>date.now</snippet></ROW><ROW><id>17746172</id><snippet>'now'</snippet></ROW><ROW><id>17746172</id><snippet>date.now.hour</snippet></ROW><ROW><id>17746172</id><snippet>'hour'</snippet></ROW><ROW><id>17746172</id><snippet>date.now</snippet></ROW><ROW><id>17746172</id><snippet>class Now(object):
    def __str__(self): return ...
    def __call__(self): return ...
    hour = property(lambda self: 'hour')
</snippet></ROW><ROW><id>17746172</id><snippet>class Date</snippet></ROW><ROW><id>17746172</id><snippet>now</snippet></ROW><ROW><id>17746172</id><snippet>class Date</snippet></ROW><ROW><id>17746172</id><snippet>class Now</snippet></ROW><ROW><id>17746172</id><snippet>class Date(object):
    def __call__ # as before
    @property
    def now(self):
        return Now()
</snippet></ROW><ROW><id>17746308</id><snippet>a</snippet></ROW><ROW><id>17746308</id><snippet>href</snippet></ROW><ROW><id>17746308</id><snippet>.get('href')</snippet></ROW><ROW><id>17746308</id><snippet>None</snippet></ROW><ROW><id>17746308</id><snippet>link_domain = tldextract.extract(href.get('href', ''))
</snippet></ROW><ROW><id>17746308</id><snippet>href = href.get('href')
if not href:
    continue

link_domain = tldextract.extract(href)
</snippet></ROW><ROW><id>17746431</id><snippet>def dict_to_key(d):
    return tuple(sorted(d.items()))
</snippet></ROW><ROW><id>17746431</id><snippet>dict_to_key()</snippet></ROW><ROW><id>17746431</id><snippet>CombinedDict = {dict_to_key(Dict1[v]): k for k, v in Dict0.items()}
</snippet></ROW><ROW><id>17746431</id><snippet>&gt;&gt;&gt; Dict0 = {'a':0, 'b':1, 'c':2}
&gt;&gt;&gt; Dict1 = {0 : {'a0' : 0,'a1' : 1,'a2' : 2},
...          1 : {'b0' : 0,'b1' : 1,'b2' : 2},
...          2 : {'c0' : 0,'c1' : 1,'c2' : 2}}
&gt;&gt;&gt; def dict_to_key(d):
...     return tuple(sorted(d.items()))
... 
&gt;&gt;&gt; {dict_to_key(Dict1[v]): k for k, v in Dict0.items()}
{(('b0', 0), ('b1', 1), ('b2', 2)): 'b', (('a0', 0), ('a1', 1), ('a2', 2)): 'a', (('c0', 0), ('c1', 1), ('c2', 2)): 'c'}
</snippet></ROW><ROW><id>17746584</id><snippet>numpy.apply_along_axis(lambda a: a.searchsorted(950), axis = 1, arr = air_pr)
</snippet></ROW><ROW><id>17746585</id><snippet>ans = raw_input('Enter: ')
if not ans:
    print "You entered nothing!"
else:
    print "You entered something!"
</snippet></ROW><ROW><id>17746585</id><snippet>ans</snippet></ROW><ROW><id>17746585</id><snippet>''</snippet></ROW><ROW><id>17746585</id><snippet>''</snippet></ROW><ROW><id>17746585</id><snippet>False</snippet></ROW><ROW><id>17746585</id><snippet>True</snippet></ROW><ROW><id>17746585</id><snippet>not False</snippet></ROW><ROW><id>17746585</id><snippet>ans = ''
while not ans: # While the input given is an empty string
    ans = raw_input('Enter: ')
</snippet></ROW><ROW><id>17746748</id><snippet>for</snippet></ROW><ROW><id>17746748</id><snippet>for each in results[0]:
    ...
</snippet></ROW><ROW><id>17746748</id><snippet>a, b, c, d, e, f, g = results[0]
</snippet></ROW><ROW><id>17746934</id><snippet>readline()</snippet></ROW><ROW><id>17746934</id><snippet>import serial
import time 
port="/dev/ttyUSB0"
serialArduino= serial.Serial(port,9600)
serialArduino.flushInput()

while True:
    inputs = serialArduion.readline().rstrip()
    if inputs == "DOWN":
        print "APPLES"
    elif inputs == "UP"
        print "Bannana"
</snippet></ROW><ROW><id>17747152</id><snippet>def clickOrEnterSubmit(self, *args):
    #code goes here
</snippet></ROW><ROW><id>17747152</id><snippet>args</snippet></ROW><ROW><id>17747152</id><snippet>event</snippet></ROW><ROW><id>17747152</id><snippet>from Tkinter import *

def frob(*args):
    print "frob called with {} arguments".format(len(args))

root = Tk()
root.bind("&lt;Return&gt;", frob)
Button(root, text="Click Me", command=frob).pack()
root.mainloop()
</snippet></ROW><ROW><id>17747152</id><snippet>frob called with 1 arguments
frob called with 0 arguments
</snippet></ROW><ROW><id>17747152</id><snippet>from Tkinter import *

def frob():
    print "frob was called"

root = Tk()
#the callback will pass in the `event` variable, but we won't send it to `frob`
root.bind("&lt;Return&gt;", lambda event: frob())
Button(root, text="Click Me", command=frob).pack()
root.mainloop()
</snippet></ROW><ROW><id>17747293</id><snippet>-(0.13905775075987842 ** 0.2)</snippet></ROW><ROW><id>17747293</id><snippet>(-0.13905775075987842) ** 0.2</snippet></ROW><ROW><id>17747293</id><snippet>&gt;&gt;&gt; -0.13905775075987842 ** 0.2
-0.6739676327771593
&gt;&gt;&gt; (-0.13905775075987842) ** 0.2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: negative number cannot be raised to a fractional power
</snippet></ROW><ROW><id>17747293</id><snippet>(-3.66/26.32 + 0j)**0.2</snippet></ROW><ROW><id>17747293</id><snippet>&gt;&gt;&gt; (-3.66/26.32 + 0j)**0.2
(0.5452512685753758+0.39614823506888347j)
</snippet></ROW><ROW><id>17747595</id><snippet>save</snippet></ROW><ROW><id>17747595</id><snippet>File</snippet></ROW><ROW><id>17747595</id><snippet>save</snippet></ROW><ROW><id>17747595</id><snippet>models.Model</snippet></ROW><ROW><id>17747614</id><snippet>os.stat</snippet></ROW><ROW><id>17747614</id><snippet>try:
    if os.stat(filename).st_size &gt; 0:
       print "All good"
    else:
       print "empty file"
except OSError:
    print "No file"
</snippet></ROW><ROW><id>17747893</id><snippet>100 (one hundred)</snippet></ROW><ROW><id>17747893</id><snippet>'hundred', 'and'</snippet></ROW><ROW><id>17747893</id><snippet>one</snippet></ROW><ROW><id>17747893</id><snippet>and</snippet></ROW><ROW><id>17747893</id><snippet>d = ['hundred', 'thousand', 'and']
e = a + b + c + d

sum_0 = 0
for i in e:
    sum_0 += len(i)
</snippet></ROW><ROW><id>17747893</id><snippet># 100, 200.. 900
sum_2 = 0
for i in a:
    sum_2 += len(i + d[0])
</snippet></ROW><ROW><id>17747943</id><snippet>autoescape</snippet></ROW><ROW><id>17747943</id><snippet># sessionscheduler.html

{% autoescape off %}
    {{ your_string }}
{% endautoescape %}
</snippet></ROW><ROW><id>17748140</id><snippet>fileinput</snippet></ROW><ROW><id>17748140</id><snippet>import fileinput

for line in fileinput.input(filename, inplace=True):
    if phrase in line:
        continue
    print(line, end='')
</snippet></ROW><ROW><id>17748199</id><snippet>results = cursor.fetchone()
</snippet></ROW><ROW><id>17748199</id><snippet>results</snippet></ROW><ROW><id>17748199</id><snippet>('192.168.0.15',)</snippet></ROW><ROW><id>17748199</id><snippet>results[0]</snippet></ROW><ROW><id>17748199</id><snippet>mysql_target_host = results[0]
</snippet></ROW><ROW><id>17748199</id><snippet>cnx = mysql.connector.connect(host=mysql_target_host, user=user, password=password, database=database)
</snippet></ROW><ROW><id>17748199</id><snippet>mysql_localhost</snippet></ROW><ROW><id>17748306</id><snippet>import os
import glob
files = glob.glob('year*.jpg')
for file in files:
    os.rename(file, 'year_{}'.format(file.split('_')[1]))
</snippet></ROW><ROW><id>17748306</id><snippet>for file in files:
    parts = file.split('_') #[abc, 2000.jpg]
    new_name = 'year_{}'.format(parts[1]) #year_2000.jpg
    os.rename(file, new_name)
</snippet></ROW><ROW><id>17748422</id><snippet>x.append(int(xAndY[0]))
y.append(int(xAndY[1]))
</snippet></ROW><ROW><id>17748422</id><snippet>x.append(int(float(xAndY[0])))
y.append(int(float(xAndY[1])))
</snippet></ROW><ROW><id>17748422</id><snippet>int</snippet></ROW><ROW><id>17748422</id><snippet>base=10</snippet></ROW><ROW><id>17748422</id><snippet>.</snippet></ROW><ROW><id>17748422</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>17748422</id><snippet>x, y = np.loadtxt('temp.txt',     # Load values from the file 'temp.txt'
                  dtype=int,      # Convert values to integers
                  delimiter=',',  # Comma separated values
                  unpack=True,    # Unpack to several variables
                  usecols=(0,1))  # Use only columns 0 and 1
</snippet></ROW><ROW><id>17748422</id><snippet>x</snippet></ROW><ROW><id>17748422</id><snippet>y</snippet></ROW><ROW><id>17748422</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x, y = np.loadtxt('temp.txt', dtype=int, delimiter=',',
                  unpack=True, usecols=(0,1))

plt.plot(x, y)

plt.title('example 1')
plt.xlabel('D')
plt.ylabel('Frequency')

plt.show()
</snippet></ROW><ROW><id>17748465</id><snippet>100ms</snippet></ROW><ROW><id>17748465</id><snippet>from tkinter import *

class Run:
    def __init__(self):
        self.root = Tk()
        self.root.overrideredirect(True)
    def put_back(self):
        # this method will put the window to the background
        self.root.lower()
        # recursive calling of put_back method
        self.root.after(100, self.put_back)

app = Run()
# Start the recursion
app.put_back()
app.root.mainloop()
</snippet></ROW><ROW><id>17748475</id><snippet>b.append</snippet></ROW><ROW><id>17748475</id><snippet>b</snippet></ROW><ROW><id>17748475</id><snippet>&gt;&gt;&gt; b = [1,2,3]
&gt;&gt;&gt; id(b)
36586568L
&gt;&gt;&gt; b.append(4)
&gt;&gt;&gt; id(b)
36586568L
</snippet></ROW><ROW><id>17748640</id><snippet>int</snippet></ROW><ROW><id>17748640</id><snippet>row = Base(r[0], *map(int, r[1:])) 
</snippet></ROW><ROW><id>17748640</id><snippet>r[0]</snippet></ROW><ROW><id>17748640</id><snippet>int()</snippet></ROW><ROW><id>17748640</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Base = namedtuple('Base', ['Locus', 'Total_Depth', 'Average_Depth_sample', 'Depth_for_17'])
&gt;&gt;&gt; r = ['chr1:6484996', '1030', '1030', '1030']
&gt;&gt;&gt; Base(r[0], *map(int, r[1:]))
Base(Locus='chr1:6484996', Total_Depth=1030, Average_Depth_sample=1030, Depth_for_17=1030)
</snippet></ROW><ROW><id>17748640</id><snippet>Base</snippet></ROW><ROW><id>17748640</id><snippet>if row.Total_Depth &gt;= 15:
</snippet></ROW><ROW><id>17748903</id><snippet>results</snippet></ROW><ROW><id>17748903</id><snippet>json_str = { ...other key-values, "results": [{"listing_id":114179207,"state":"active"},{"listing_id":11344567,"state":"active"}, ...and so on] }
results = json_str['results']  # this gives you a list of dicts

# iterate through this list
for result in results:
    if result['state'] == 'active':
        do_something_with( result['listing_id']
    else:
        do_someotherthing_with( result['listing_id']  # or none at all
</snippet></ROW><ROW><id>17748948</id><snippet>&gt;&gt;&gt; s = ['p=011', 'or=artificial', 'pc=3718']
&gt;&gt;&gt; dict(x.split('=') for x in s)
{'p': '011', 'or': 'artificial', 'pc': '3718'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17748968</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; mychar = 'd'
&gt;&gt;&gt; np.array(list(np.binary_repr(ord(mychar), width=4))).astype('bool')
array([ True,  True, False, False,  True, False, False], dtype=bool)
</snippet></ROW><ROW><id>17748991</id><snippet>dd = [{1: ['a', 'b'], 2: ['a', 'c'], 3: ['d', 'e']}, {1: ['f', 'g', 'l'], 2: ['h', 'i'], 4: ['j', 'k', 'm']}, ...]
</snippet></ROW><ROW><id>17748991</id><snippet>itertools.product()</snippet></ROW><ROW><id>17748991</id><snippet>from itertools import product

for key in dd[0]:
    for combination in product(*(d[key] for d in dd)):
        print ' '.join(combination)
</snippet></ROW><ROW><id>17748991</id><snippet>dd2[3]</snippet></ROW><ROW><id>17748991</id><snippet>dd3[2]</snippet></ROW><ROW><id>17748991</id><snippet>&gt;&gt;&gt; for key in dd[0]:
...     for combination in product(*(d[key] for d in dd)):
...         print ' '.join(combination)
... 
handler entrenador mister
handler entrenador allenatorecoach
handler míster mister
handler míster allenatorecoach
handler entrenadora mister
handler entrenadora allenatorecoach
coach entrenador mister
coach entrenador allenatorecoach
coach míster mister
coach míster allenatorecoach
coach entrenadora mister
coach entrenadora allenatorecoach
manager entrenador mister
manager entrenador allenatorecoach
manager míster mister
manager míster allenatorecoach
manager entrenadora mister
manager entrenadora allenatorecoach
</snippet></ROW><ROW><id>17749159</id><snippet>&gt;&gt;&gt; p1 = Polygon([(0, 0), (1, 0), (1, 1)])
&gt;&gt;&gt; p2 = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)])
&gt;&gt;&gt; p3 = Polygon([(2, 0), (3, 0), (3, 1), (2, 1)])
&gt;&gt;&gt; g = GeoSeries([p1, p2, p3])
&gt;&gt;&gt; g
0    POLYGON ((0.0000000000000000 0.000000000000000...
1    POLYGON ((0.0000000000000000 0.000000000000000...
2    POLYGON ((2.0000000000000000 0.000000000000000...
dtype: object
</snippet></ROW><ROW><id>17749159</id><snippet>&gt;&gt;&gt; boros = GeoDataFrame.from_file('nybb.shp')
&gt;&gt;&gt; boros.set_index('BoroCode', inplace=True)
&gt;&gt;&gt; boros.sort()
&gt;&gt;&gt; boros
               BoroName    Shape_Area     Shape_Leng  \
BoroCode
1             Manhattan  6.364422e+08  358532.956418
2                 Bronx  1.186804e+09  464517.890553
3              Brooklyn  1.959432e+09  726568.946340
4                Queens  3.049947e+09  861038.479299
5         Staten Island  1.623853e+09  330385.036974

                                                   geometry
BoroCode
1         (POLYGON ((981219.0557861328125000 188655.3157...
2         (POLYGON ((1012821.8057861328125000 229228.264...
3         (POLYGON ((1021176.4790039062500000 151374.796...
4         (POLYGON ((1029606.0765991210937500 156073.814...
5         (POLYGON ((970217.0223999023437500 145643.3322...
</snippet></ROW><ROW><id>17749333</id><snippet>t = Tk() # new window
t.update()
t.attributes("-alpha", 00)
t.state('zoomed') # maximize the window
height= t.winfo_height() # ...
width= t.winfo_width()
</snippet></ROW><ROW><id>17749339</id><snippet>import glob

read_files = glob.glob("*.txt")

with open("result.txt", "wb") as outfile:
    for f in read_files:
        with open(f, "rb") as infile:
            outfile.write(infile.read())
</snippet></ROW><ROW><id>17749385</id><snippet>'1'</snippet></ROW><ROW><id>17749385</id><snippet>'10'</snippet></ROW><ROW><id>17749385</id><snippet>'7'</snippet></ROW><ROW><id>17749385</id><snippet>'9'</snippet></ROW><ROW><id>17749385</id><snippet>with open('info.txt', 'r') as f:
      data = [line.split(',') for line in f]
print(sorted(data, key=lambda x: int(x[2])))
</snippet></ROW><ROW><id>17749445</id><snippet>decobar</snippet></ROW><ROW><id>17749445</id><snippet>decobar</snippet></ROW><ROW><id>17749445</id><snippet>__module__</snippet></ROW><ROW><id>17749445</id><snippet>__name__</snippet></ROW><ROW><id>17749445</id><snippet>functools.wraps</snippet></ROW><ROW><id>17749445</id><snippet>import functools

class decobar(object):
    registry = set()

    @classmethod
    def _func_key(cls, f):
        return '.'.join((f.__module__, f.func_name))

    @classmethod
    def present(cls, f):
        return cls._func_key(f) in cls.registry

    def __call__(self, f):
        self.registry.add(self._func_key(f))

        @functools.wraps(f)
        def wrap():
            return f() + "bar"
        return wrap

# Make the decorator singleton
decobar = decobar()

def decofu(f):
    @functools.wraps(f)
    def wrap():
        print decobar.present(f) # Tells me whether decobar was also applied
        return f() + "fu"
    return wrap

@decofu
@decobar
def important_task():
    return "abc"
</snippet></ROW><ROW><id>17749445</id><snippet>decobar</snippet></ROW><ROW><id>17749445</id><snippet>registry</snippet></ROW><ROW><id>17749445</id><snippet>present()</snippet></ROW><ROW><id>17749560</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>17749560</id><snippet>import shutil

with open(outfilename, 'wb') as outfile:
    for filename in glob.glob('*.txt'):
        with open(filename) as readfile:
            shutil.copyfileobj(readfile, outfile)
</snippet></ROW><ROW><id>17749560</id><snippet>shutil</snippet></ROW><ROW><id>17749560</id><snippet>readfile</snippet></ROW><ROW><id>17749560</id><snippet>outfile</snippet></ROW><ROW><id>17749560</id><snippet>readline()</snippet></ROW><ROW><id>17749677</id><snippet>rand_list = [randrange(700, 1500) for _ in xrange(100)]
</snippet></ROW><ROW><id>17749768</id><snippet>*</snippet></ROW><ROW><id>17749768</id><snippet>=</snippet></ROW><ROW><id>17749768</id><snippet>print '{} * {} = 1'.format(x, y)
</snippet></ROW><ROW><id>17749768</id><snippet>x</snippet></ROW><ROW><id>17749768</id><snippet>y</snippet></ROW><ROW><id>17749768</id><snippet>*</snippet></ROW><ROW><id>17749768</id><snippet>=</snippet></ROW><ROW><id>17749868</id><snippet>exec</snippet></ROW><ROW><id>17749868</id><snippet>configparser</snippet></ROW><ROW><id>17749868</id><snippet>[CONFIG]
name = "Webserver"
version = "0.0"
python_version = "Python 33"
database_type = "SQLite 3"
</snippet></ROW><ROW><id>17749868</id><snippet>import configparser
config = configparser.ConfigParser()
config.read("settings.cfg")
settingscfg = config["CONFIG"]
</snippet></ROW><ROW><id>17749868</id><snippet>settingscfg</snippet></ROW><ROW><id>17749931</id><snippet>&gt;&gt;&gt; lst = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
&gt;&gt;&gt; nchunks = 4
&gt;&gt;&gt; chunksize,remainder = divmod(len(lst),nchunks)
&gt;&gt;&gt; sizes = [chunksize]*nchunks
&gt;&gt;&gt; if remainder:
...     sizes[-remainder:] = [chunksize+1 for x in xrange(remainder)]
&gt;&gt;&gt; sizes
[2, 2, 3, 3]
&gt;&gt;&gt; idx = 0
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for s in sizes:
...     result.append(lst[idx:idx+s])
...     idx += s
... 
&gt;&gt;&gt; print result
[[0, 0], [0, 0], [0, 0, 0], [0, 0, 0]]
</snippet></ROW><ROW><id>17749936</id><snippet>igraph_get_eids_multi</snippet></ROW><ROW><id>17749936</id><snippet>g</snippet></ROW><ROW><id>17749936</id><snippet>weight</snippet></ROW><ROW><id>17749936</id><snippet>gt</snippet></ROW><ROW><id>17749936</id><snippet>g.es.select(weight_gt=10).delete()
</snippet></ROW><ROW><id>17749936</id><snippet>g.es</snippet></ROW><ROW><id>17749936</id><snippet>select</snippet></ROW><ROW><id>17749936</id><snippet>EdgeSeq.select</snippet></ROW><ROW><id>17749936</id><snippet>EdgeSeq</snippet></ROW><ROW><id>17749936</id><snippet>delete()</snippet></ROW><ROW><id>17749956</id><snippet>SELECT f_nombre, SUM(f_monto)
FROM t_proyecto, t_informe, t_gasto 
WHERE t_gasto.f_informe==t_informe.id
AND t_proyecto.id==t_informe.f_proyecto 
GROUP BY t_proyecto.f_nombre;
</snippet></ROW><ROW><id>17749956</id><snippet>db((db.t_proyecto.id==db.t_informe.f_proyecto) &amp;
   (db.t_informe.id==db.t_gasto.f_informe)).select(db.t_gasto.f_monto.sum(), db.t_proyecto.f_nombre, groupby=db.t_proyecto.f_nombre)
</snippet></ROW><ROW><id>17750065</id><snippet>view</snippet></ROW><ROW><id>17750065</id><snippet>/* TODO(guido): The views objects are not complete:

 * support more set operations
 * support arbitrary mappings?
   - either these should be static or exported in dictobject.h
   - if public then they should probably be in builtins
*/
</snippet></ROW><ROW><id>17750065</id><snippet>support arbitrary mappings</snippet></ROW><ROW><id>17750065</id><snippet>&gt;&gt;&gt; type({}.viewkeys())({})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot create 'dict_keys' instances
&gt;&gt;&gt; class MyView(type({}.viewkeys())): pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    type 'dict_keys' is not an acceptable base type
</snippet></ROW><ROW><id>17750065</id><snippet>class DictKeys(object):
    def __init__(self, parent):
        self.parent = parent

    def __len__(self):
        return len(self.parent)

    def __contains__(self, key):
        return key in self.parent

    def __iter__(self):
        return iter(self.parent)
</snippet></ROW><ROW><id>17750065</id><snippet>&gt;&gt;&gt; dir({}.viewkeys())
['__and__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__']
</snippet></ROW><ROW><id>17750065</id><snippet>__and__</snippet></ROW><ROW><id>17750065</id><snippet>__or__</snippet></ROW><ROW><id>17750065</id><snippet>__sub__</snippet></ROW><ROW><id>17750065</id><snippet>__xor__</snippet></ROW><ROW><id>17750065</id><snippet>__rand__</snippet></ROW><ROW><id>17750065</id><snippet>__ror__</snippet></ROW><ROW><id>17750065</id><snippet>__rsub__</snippet></ROW><ROW><id>17750065</id><snippet>__rxor__</snippet></ROW><ROW><id>17750065</id><snippet>&amp;</snippet></ROW><ROW><id>17750065</id><snippet>|</snippet></ROW><ROW><id>17750065</id><snippet>^</snippet></ROW><ROW><id>17750290</id><snippet>numpy.ma</snippet></ROW><ROW><id>17750290</id><snippet>import numpy.ma as ma

mask1 = ma.where(y1&gt;=y2)
mask2 = ma.where(y2&gt;=y1)

p1 = plt.bar(x1[mask1], y1[mask1], color='r', alpha=1, edgecolor='none',linewidth=0,width=0.5, log=False)
p2 = plt.bar(x2, y2, color='b', alpha=1, edgecolor='none', linewidth=0,width=0.5, log=False)
p3 = plt.bar(x1[mask2], y1[mask2], color='r', alpha=1, edgecolor='none',linewidth=0,width=0.5, log=False)
</snippet></ROW><ROW><id>17750290</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import numpy.ma as ma

x1 = x2 = np.arange(5)
y1 = np.array([1,4,25,2,4])
y2 = np.array([4,2,3,32,6])

mask1 = ma.where(y1&gt;=y2)
mask2 = ma.where(y2&gt;=y1)

p1 = plt.bar(x1[mask1], y1[mask1], color='r', alpha=1, edgecolor='none',linewidth=0,width=0.5, log=False)
p2 = plt.bar(x2, y2, color='b', alpha=1, edgecolor='none', linewidth=0,width=0.5, log=False)
p3 = plt.bar(x1[mask2], y1[mask2], color='r', alpha=1, edgecolor='none',linewidth=0,width=0.5, log=False)
</snippet></ROW><ROW><id>17750311</id><snippet>l1 = [1, 2, 3]
l2 = ['a', 'b', 'c']

lol = [l1, l2]
lol[0][0] = 0

print(l1)  # prints [0, 2, 3]
</snippet></ROW><ROW><id>17750311</id><snippet>%timeit</snippet></ROW><ROW><id>17750311</id><snippet>&gt;&gt;&gt; list_of_lists = [[1,2,3,4] for _ in xrange(10000)]
&gt;&gt;&gt; list_of_tuples = map(tuple, list_of_lists)
&gt;&gt;&gt; def modify_lol():
...     for x in list_of_lists:
...         x[0] = 0
...         
&gt;&gt;&gt; def modify_lot():
...     for i, x in enumerate(list_of_tuples):
...         list_of_tuples[i] = (0,) + x[1:]
...         
&gt;&gt;&gt; %timeit modify_lol()
100 loops, best of 3: 6.56 ms per loop
&gt;&gt;&gt; %timeit modify_lot()
100 loops, best of 3: 17 ms per loop
</snippet></ROW><ROW><id>17750472</id><snippet>with open('/full/path/to/file', 'wb') as f:
    pickle.dump(object, f)
</snippet></ROW><ROW><id>17750505</id><snippet>data= csv.reader(open('outfile.tsv','rb'), delimiter = "\t")
fields=data.next()
for row in data:
         tsid=row[0]
         full_list.append(tsid)
print [(g[0],len(list(g[1]))) for g in itertools.groupby(full_list)]
</snippet></ROW><ROW><id>17750535</id><snippet>Notebook.tab</snippet></ROW><ROW><id>17750535</id><snippet>text</snippet></ROW><ROW><id>17750535</id><snippet>notebook.tab(0, text="New text")
</snippet></ROW><ROW><id>17750539</id><snippet>get_cookies()</snippet></ROW><ROW><id>17750539</id><snippet>all_cookies[0]['name']  # returns 'JSESSIONID'
all_cookies[0]['value']  # returns '8430c050201161b5404d52194a5445561a02'
</snippet></ROW><ROW><id>17750618</id><snippet>ButtonRetire</snippet></ROW><ROW><id>17750618</id><snippet>ButtonSelectRetire</snippet></ROW><ROW><id>17750618</id><snippet>class ButtonSelectRetire(object):

  def __init__(self, button_retire):
    self.enabled = True
    self.checked = False
    self.button_retire = button_retire

  def onClick(self):        
    self.button_retire.off()


&gt;&gt;&gt; buttonRetire = ButtonRetire()
&gt;&gt;&gt; buttonSelectRetire = ButtonSelectRetire(buttonRetire)
</snippet></ROW><ROW><id>17750618</id><snippet>buttonSelectRetire.onClick</snippet></ROW><ROW><id>17750618</id><snippet>buttonRetire.off()</snippet></ROW><ROW><id>17750618</id><snippet>self.buttonSelectRetire.onClick.connect(self.buttonRetire.off)
</snippet></ROW><ROW><id>17750623</id><snippet>def Identify():
    global _portlist1
    _portlist1 = ["a", "b"]
</snippet></ROW><ROW><id>17750773</id><snippet>in</snippet></ROW><ROW><id>17750773</id><snippet>xlrd.cell</snippet></ROW><ROW><id>17750773</id><snippet>if parent_list[i] in actual_link:
</snippet></ROW><ROW><id>17750773</id><snippet>if parent_list[i].value in actual_link:
</snippet></ROW><ROW><id>17750773</id><snippet>feature_list</snippet></ROW><ROW><id>17750773</id><snippet>epic_list</snippet></ROW><ROW><id>17750773</id><snippet>check_link</snippet></ROW><ROW><id>17750773</id><snippet>check_link</snippet></ROW><ROW><id>17750825</id><snippet>sudo</snippet></ROW><ROW><id>17750825</id><snippet>supervisord</snippet></ROW><ROW><id>17750825</id><snippet>uid</snippet></ROW><ROW><id>17750825</id><snippet>user</snippet></ROW><ROW><id>17750825</id><snippet>[program:x]</snippet></ROW><ROW><id>17750825</id><snippet>environment</snippet></ROW><ROW><id>17750919</id><snippet>console_scripts</snippet></ROW><ROW><id>17750919</id><snippet>console_script</snippet></ROW><ROW><id>17750919</id><snippet>setuptools</snippet></ROW><ROW><id>17750929</id><snippet>def setupUi(self, Form):
  ...
  self.pushButton.clicked.connect(self.setTableWidgetItem)

def setTableWidgetItem(self):
  self.tableWidget.setItem(0,0,QtGui.QTableWidgetItem("test"))
</snippet></ROW><ROW><id>17751002</id><snippet>for line in sys.stdin
    process(line)
</snippet></ROW><ROW><id>17751250</id><snippet>dir</snippet></ROW><ROW><id>17751250</id><snippet>&gt;&gt;&gt; xmin,xmax = 3,5
&gt;&gt;&gt; ymin,ymax = 2, 6
&gt;&gt;&gt; my_slice = np.s_[ymin:ymax+1, xmin:xmax+1]
&gt;&gt;&gt; my_slice
(slice(2, 7, None), slice(3, 6, None))
&gt;&gt;&gt; my_slice[0]
slice(2, 7, None)
&gt;&gt;&gt; dir(my_slice[0])
['__class__', '__cmp__', '__delattr__', '__doc__', '__format__', 
'__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', 
'__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', 
'__subclasshook__', 'indices', 'start', 'step', 'stop']
</snippet></ROW><ROW><id>17751250</id><snippet>start</snippet></ROW><ROW><id>17751250</id><snippet>step</snippet></ROW><ROW><id>17751250</id><snippet>stop</snippet></ROW><ROW><id>17751250</id><snippet>&gt;&gt;&gt; my_slice[0].start
2
&gt;&gt;&gt; my_slice[0].stop
7
</snippet></ROW><ROW><id>17751250</id><snippet>dir</snippet></ROW><ROW><id>17751250</id><snippet>my_slice</snippet></ROW><ROW><id>17751250</id><snippet>&gt;&gt;&gt; [(sl.start, sl.stop) for sl in my_slice]
[(2, 7), (3, 6)]
</snippet></ROW><ROW><id>17751349</id><snippet>strip()</snippet></ROW><ROW><id>17751349</id><snippet>list</snippet></ROW><ROW><id>17751349</id><snippet>&gt;&gt;&gt; 'strip' in dir(str)
True
&gt;&gt;&gt; 'strip' in dir(list)
False
</snippet></ROW><ROW><id>17751349</id><snippet>&gt;&gt;&gt; l = ['Facebook;Google+;MySpace', 'Apple;Android']
&gt;&gt;&gt; l1 = [elem.strip().split(';') for elem in l]
&gt;&gt;&gt; print l1
[['Facebook', 'Google+', 'MySpace'], ['Apple', 'Android']]
</snippet></ROW><ROW><id>17751349</id><snippet>&gt;&gt;&gt; l1 = []
&gt;&gt;&gt; for elem in l:
        l1.extend(elem.strip().split(';'))  
&gt;&gt;&gt; l1
['Facebook', 'Google+', 'MySpace', 'Apple', 'Android']
</snippet></ROW><ROW><id>17751349</id><snippet>itertools.chain</snippet></ROW><ROW><id>17751349</id><snippet>&gt;&gt;&gt; l1 = [elem.strip().split(';') for elem in l]
&gt;&gt;&gt; print l1
[['Facebook', 'Google+', 'MySpace'], ['Apple', 'Android']]
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain(*l1))
['Facebook', 'Google+', 'MySpace', 'Apple', 'Android']
</snippet></ROW><ROW><id>17751566</id><snippet>plt.axis('scaled')</snippet></ROW><ROW><id>17751566</id><snippet>axis('image')</snippet></ROW><ROW><id>17751566</id><snippet>import matplotlib.pyplot as plt
import numpy as np

xs = np.arange(50)
ys = (np.random.random(50)*70) + 15

plt.scatter(xs,ys)

plt.axis('image')
plt.axis([0, 50, 0, 70])

plt.show()
</snippet></ROW><ROW><id>17751566</id><snippet>ys</snippet></ROW><ROW><id>17751718</id><snippet>keys = set([y for x in dicts1 for y in x.keys() ] + [y for x in dicts2 for y in x.keys() ])

for key in keys:
    valsDicts1 = set([x[key] for x in dicts1 if key in x])
    valsDicts2 = set([x[key] for x in dicts2 if key in x])
    print key, list(valsDicts1 &amp; valsDicts2)
</snippet></ROW><ROW><id>17751718</id><snippet>a [3]
c [33, 99]
b [89, 42]
d [2]
</snippet></ROW><ROW><id>17751719</id><snippet>iter</snippet></ROW><ROW><id>17751719</id><snippet>for number in iter(lambda: int(input('Choose a number: ')), 5):
    print number # prints it if it wasn't 5...
</snippet></ROW><ROW><id>17751784</id><snippet>Step 1. Generate bindings -- Run generateDS.py.
Step 2. Extract simpleType definitions from schema -- Run
gends_extract_simple_types.py.
Step 3. Generate models.py and forms.py -- Run gends_generate_django.py.
</snippet></ROW><ROW><id>17752054</id><snippet>192.168.56.1</snippet></ROW><ROW><id>17752054</id><snippet>mysql&gt; CREATE USER 'monty'@'localhost' IDENTIFIED BY 'some_pass';
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'monty'@'localhost'
    -&gt;     WITH GRANT OPTION;
mysql&gt; CREATE USER 'monty'@'%' IDENTIFIED BY 'some_pass';
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'monty'@'%'
    -&gt;     WITH GRANT OPTION;
</snippet></ROW><ROW><id>17752127</id><snippet>&gt;&gt;&gt; for i, ch in enumerate(str):
        print i, ch

Would print

0 I
1 
2 a
...
</snippet></ROW><ROW><id>17752127</id><snippet>str</snippet></ROW><ROW><id>17752220</id><snippet>self.index</snippet></ROW><ROW><id>17752220</id><snippet>## within __init__
    self.UPDATE_TIME = 60 # or whatever works
    self.timer = 0

def update(self):
    self.timer += 1
    if self.timer = self.UPDATE_TIME:
        self.timer = 0
        self.index += 1

    # unmodified below here
    if self.index &gt;= 2:
        self.index = 0
    if self.direction == DIRECTIONS['down']:
        self.image = self.down_anim[self.index]
    elif self.direction == DIRECTIONS['up']:
        self.image = self.up_anim[self.index]
    elif self.direction == DIRECTIONS['left']:
        self.image = self.left_anim[self.index]
    elif self.direction == DIRECTIONS['right']:
        self.image = self.right_anim[self.index]
</snippet></ROW><ROW><id>17752241</id><snippet>eval(cond_string)</snippet></ROW><ROW><id>17752241</id><snippet>for i in conditions:
     if eval(i):
           print(i)
</snippet></ROW><ROW><id>17752241</id><snippet>eval</snippet></ROW><ROW><id>17752241</id><snippet>eval</snippet></ROW><ROW><id>17752241</id><snippet>unittest</snippet></ROW><ROW><id>17752341</id><snippet>l2 = [x[11:20] for x in l1]
</snippet></ROW><ROW><id>17752341</id><snippet>l1</snippet></ROW><ROW><id>17752466</id><snippet>[ ]</snippet></ROW><ROW><id>17752717</id><snippet>f = request.form
for key in f.keys():
    for value in f.getlist(key):
        print key,":",value
</snippet></ROW><ROW><id>17752904</id><snippet>np.genfromtxt(..., dtype=None)</snippet></ROW><ROW><id>17752904</id><snippet>genfromtxt</snippet></ROW><ROW><id>17752904</id><snippet>dtype='str'</snippet></ROW><ROW><id>17752904</id><snippet>import csv
import numpy as np
import itertools as IT
my_files = ['fileA.txt', 'fileB.txt']

vals = None
for num, filename in enumerate(my_files, 1):
    arr = np.genfromtxt(filename, dtype=None, delimiter='\t', skiprows=1, usecols=(2,))
    print(arr)
    if vals is None:
        vals = arr
    else:
        vals += arr

meanvals = vals / num

with open(my_files[0], 'rb') as fin, open('/tmp/test.csv', 'wb') as fout:
    # skip first row
    next(fin)
    writer = csv.writer(fout, delimiter='\t', lineterminator='\n')
    for row, val in IT.izip(csv.reader(fin, delimiter='\t'), meanvals):
        row[2] = val
        writer.writerow(row)
</snippet></ROW><ROW><id>17752904</id><snippet>/tmp/test.csv</snippet></ROW><ROW><id>17752904</id><snippet>0.003   0.0003  2   Active
0.003   0.0004  3   Active
</snippet></ROW><ROW><id>17752954</id><snippet>SafeConfigParser</snippet></ROW><ROW><id>17752954</id><snippet>foo</snippet></ROW><ROW><id>17752954</id><snippet>bar</snippet></ROW><ROW><id>17752954</id><snippet>object</snippet></ROW><ROW><id>17752954</id><snippet>&gt;&gt;&gt; type(ConfigParser.SafeConfigParser)
&lt;type 'classobj'&gt;

&gt;&gt;&gt; type(foo)
&lt;type 'classobj'&gt;

&gt;&gt;&gt; type(bar)
&lt;type 'type'&gt;
</snippet></ROW><ROW><id>17752954</id><snippet>SafeConfigParser</snippet></ROW><ROW><id>17752954</id><snippet>class baz:    # old-style class in Python 2.x where x &gt;= 2
    def __getitem__(self, option):
        return option

c = baz()
print c[:]    # slice(0, 2147483647, None)
</snippet></ROW><ROW><id>17752954</id><snippet>ConfigParser</snippet></ROW><ROW><id>17752954</id><snippet>configparser</snippet></ROW><ROW><id>17752998</id><snippet>TypeError</snippet></ROW><ROW><id>17752998</id><snippet>x</snippet></ROW><ROW><id>17752998</id><snippet>s[x]=ord(s[x])</snippet></ROW><ROW><id>17752998</id><snippet>s</snippet></ROW><ROW><id>17752998</id><snippet>encrypt()</snippet></ROW><ROW><id>17752998</id><snippet>s</snippet></ROW><ROW><id>17752998</id><snippet>def encrypt(s):
    lenStr=len(s)
    s=list(s) # convert the string to a list
    for i in range(lenStr):
        s[i]=ord(s[i])
        s[i]=chr(s[i])
</snippet></ROW><ROW><id>17752998</id><snippet>%</snippet></ROW><ROW><id>17752998</id><snippet>def encrypt(s):
    lenStr = len(s)
    s = list(s) # convert the string to a list
    for i in range(lenStr):
        s[i] = chr((ord(s[i]) + lenStr) % 256)
    return ''.join(s) # convert list back into a string
</snippet></ROW><ROW><id>17752998</id><snippet>def decrypt(s):
    lenStr = len(s)
    s = list(s) # convert the string to a list
    for i in range(lenStr):
        s[i] = chr((ord(s[i]) - lenStr) % 256)
    return ''.join(s) # convert list back into a string

enc = encrypt('Gnomorian')
print('encrypted:', enc)
dec = decrypt(enc)
print('decrypted:', dec)
</snippet></ROW><ROW><id>17752998</id><snippet>encrypted: Pwxvx{rjw
decrypted: Gnomorian
</snippet></ROW><ROW><id>17752998</id><snippet>ord()</snippet></ROW><ROW><id>17753151</id><snippet>do ... while(0)</snippet></ROW><ROW><id>17753151</id><snippet>goto</snippet></ROW><ROW><id>17753151</id><snippet>goto</snippet></ROW><ROW><id>17753151</id><snippet>break</snippet></ROW><ROW><id>17753151</id><snippet>do ... while(0)</snippet></ROW><ROW><id>17753151</id><snippet>do ... while(0)</snippet></ROW><ROW><id>17753151</id><snippet>def do_checks():
    if not check1():
        return False
    if not check2():
        return False
    if not check3():
        return False
    return True

if do_checks():
    do_something()
</snippet></ROW><ROW><id>17753151</id><snippet>do ... while(0)</snippet></ROW><ROW><id>17753151</id><snippet>for x in range(1):
    if not check1():
        break
    if not check2():
        break
    if not check3():
        break
    do_something()
</snippet></ROW><ROW><id>17753260</id><snippet>Decimal</snippet></ROW><ROW><id>17753260</id><snippet>dec = Number.objects.get(id=1).decimal
dec = float(dec)
</snippet></ROW><ROW><id>17753260</id><snippet>dec = str(dec) #Please note this converts to  a string type. 
</snippet></ROW><ROW><id>17753260</id><snippet>dec = format(dec, '.2f') #Or change the precision to cater to your needs
</snippet></ROW><ROW><id>17753260</id><snippet>decimal</snippet></ROW><ROW><id>17753310</id><snippet>from nltk.corpora import wordnet as wn
    for synset in list(wn.all_synsets('n'))
        print synset
</snippet></ROW><ROW><id>17753347</id><snippet>Excel</snippet></ROW><ROW><id>17753347</id><snippet>ttest_rel</snippet></ROW><ROW><id>17753347</id><snippet>In [15]: import scipy.stats as stats

In [20]: stats.ttest_rel(a, b)
Out[20]: (array(0.9677712267394081), 0.35844406902161985)
</snippet></ROW><ROW><id>17753347</id><snippet>stats.ttest_rel</snippet></ROW><ROW><id>17753347</id><snippet>a</snippet></ROW><ROW><id>17753347</id><snippet>b</snippet></ROW><ROW><id>17753347</id><snippet>a</snippet></ROW><ROW><id>17753347</id><snippet>b</snippet></ROW><ROW><id>17753388</id><snippet>start = '&gt;\$'
</snippet></ROW><ROW><id>17753416</id><snippet>for</snippet></ROW><ROW><id>17753416</id><snippet>for grph in [graphA, graphB]:
    grph.#edit features here
</snippet></ROW><ROW><id>17753416</id><snippet>for</snippet></ROW><ROW><id>17753416</id><snippet>graphAry = [graphA, graphB]
for ind in range(len(graphAry)):
    grph = graphAry[ind]
    grph.plot(listItems1, someList[ind])
#etc
</snippet></ROW><ROW><id>17753416</id><snippet>for</snippet></ROW><ROW><id>17753416</id><snippet>for ind in range(6):
    ax = subplot(6,1,ind)
    #do all your plotting code once!
</snippet></ROW><ROW><id>17753416</id><snippet>for</snippet></ROW><ROW><id>17753471</id><snippet>MyProject/
|- films/
   |- __init__.py
   |- urls.py
   |- models/
      |- __init__.py
      |- genre.py
      |- actor.py
      |- title.py
      |- actorrole.py //M2M through with actors and their roles in specific titles
   |- admin/
      |- __init__.py
      |- genre.py
      |- actor.py
      |- title.py
   |- views/
      |- __init__.py
      |- someview.py
|- myproject/
   |- __init__.py
   |- urls.py
   |- wsgi.py
   |- settings/
      |- __init__.py
      |- production.py
      |- staging.py
      |- local.py
</snippet></ROW><ROW><id>17753471</id><snippet>__init__.py</snippet></ROW><ROW><id>17753471</id><snippet>class Genre(models.Model):
    ...
    class Meta:
        app_label = _(u'films') #app's name
        ...
</snippet></ROW><ROW><id>17753471</id><snippet>title = models.ForeignKey("films.Title")
</snippet></ROW><ROW><id>17753471</id><snippet>films/models/__init__.py</snippet></ROW><ROW><id>17753471</id><snippet>from films.models.genre import Genre
from films.models.actor import Actor
from films.models.title import Title
from films.models.actorrole import ActorRole
</snippet></ROW><ROW><id>17753471</id><snippet>films/admin/__init__.py</snippet></ROW><ROW><id>17753471</id><snippet>from django.contrib import admin
from lottery.models import Genre, Actor, Title
from lottery.admin.actor import ActorAdmin

admin.site.register(Actor, ActorAdmin)
...
</snippet></ROW><ROW><id>17753512</id><snippet>dict.items()</snippet></ROW><ROW><id>17753512</id><snippet>dict_view</snippet></ROW><ROW><id>17753512</id><snippet>list</snippet></ROW><ROW><id>17753512</id><snippet>Objects/dictobject.c</snippet></ROW><ROW><id>17753512</id><snippet>dict_items(register PyDictObject *mp) 
{
    ...
    /* Preallocate the list of tuples, to avoid allocations during
     * the loop over the items, which could trigger GC, which
     * could resize the dict. :-(
     */
    ...

    if (n != mp-&gt;ma_used) {
        /* Durnit.  The allocations caused the dict to resize.
         * Just start over, this shouldn't normally happen.
         */
        Py_DECREF(v);
        goto again;
    }
    ...
}
</snippet></ROW><ROW><id>17753512</id><snippet>static int
dictresize(PyDictObject *mp, Py_ssize_t minused)
{
    ...
}
</snippet></ROW><ROW><id>17753512</id><snippet>dict_view</snippet></ROW><ROW><id>17753512</id><snippet>list</snippet></ROW><ROW><id>17753512</id><snippet>if isinstance(s, dict):
    new = {}
    items = [i for i in s.items()]
    for k,v in items:
        new[k] = filterCharacters(v)
    return new
</snippet></ROW><ROW><id>17753543</id><snippet>America/Chicago</snippet></ROW><ROW><id>17753577</id><snippet>myspecialconnect</snippet></ROW><ROW><id>17753803</id><snippet>random</snippet></ROW><ROW><id>17753803</id><snippet>Random</snippet></ROW><ROW><id>17753803</id><snippet>Random</snippet></ROW><ROW><id>17753803</id><snippet>Planet</snippet></ROW><ROW><id>17753803</id><snippet>Planet</snippet></ROW><ROW><id>17753803</id><snippet>joebob</snippet></ROW><ROW><id>17753803</id><snippet>evil_overlord_bob</snippet></ROW><ROW><id>17753803</id><snippet>good_guy_joe</snippet></ROW><ROW><id>17753803</id><snippet>class Bob(object):
    def slaughter_everything(self):
        print "Muahahaha! Die for my amusement!"
class Joe(object):
    def stop_bob(self):
        print "I won't let you hurt those innocents!"
evil_overlord_bob = Bob()
good_guy_joe = Joe()
</snippet></ROW><ROW><id>17753803</id><snippet>slaughter_everything</snippet></ROW><ROW><id>17753803</id><snippet>stop_bob</snippet></ROW><ROW><id>17753803</id><snippet>joebob.slaughter_everything()
joebob.stop_bob()
</snippet></ROW><ROW><id>17753803</id><snippet>evil_overlord_bob.slaughter_everything()
good_guy_joe.stop_bob()
</snippet></ROW><ROW><id>17753803</id><snippet>greg_the_fleshripper</snippet></ROW><ROW><id>17753957</id><snippet>&gt;&gt;&gt; a
array([[[ 1,  2],
        [ 3,  4],
        [ 5,  6]],

       [[ 7,  8],
        [ 9, 10],
        [11, 12]]])

&gt;&gt;&gt; a.swapaxes(0,1)
array([[[ 1,  2],
        [ 7,  8]],

       [[ 3,  4],
        [ 9, 10]],

       [[ 5,  6],
        [11, 12]]])
</snippet></ROW><ROW><id>17754041</id><snippet>pos</snippet></ROW><ROW><id>17754041</id><snippet>pos</snippet></ROW><ROW><id>17754041</id><snippet> # the " + [10,]" forces the rightmost bin edge to == 10
 uvals = np.unique(pos+[10,])
 hist, bins = np.histogram(pos,bins=uvals)
 plt.bar(bins[:-1],hist,width=np.diff(bins))
</snippet></ROW><ROW><id>17754180</id><snippet>from Tkinter import *

class App(Tk):

    def __init__(self):
        Tk.__init__(self)
        # self.x and self.y are the current mouse position
        # They are set to None here because nobody has clicked anywhere yet.
        self.x = None
        self.y = None
        self.makeCanvas()
        self.bind("&lt;Any KeyPress&gt;", lambda event: self.drawText(event.keysym))

    def makeCanvas(self):
        self.canvas = Canvas(self)
        self.canvas.pack()
        self.canvas.bind("&lt;Button-1&gt;", self.mouseDown)

    def mouseDown(self, event):
        # Set self.x and self.y to the current mouse position
        self.x = event.x
        self.y = event.y

    def drawText(self, newkey):
        # The if statement makes sure we have clicked somewhere.
        if None not in {self.x, self.y}:
            self.canvas.create_text(self.x, self.y, text=newkey)
            # I set x to increase by 5 each time (it looked the nicest).
            # 4 smashed the letters and 6 left gaps.
            self.x += 5

App().mainloop()
</snippet></ROW><ROW><id>17754192</id><snippet>git add path/to/file</snippet></ROW><ROW><id>17754192</id><snippet>git add</snippet></ROW><ROW><id>17754192</id><snippet>git add path/to/folder path/to/folder2</snippet></ROW><ROW><id>17754335</id><snippet>fastboot getvar all</snippet></ROW><ROW><id>17754335</id><snippet>stderr</snippet></ROW><ROW><id>17754335</id><snippet>stdout</snippet></ROW><ROW><id>17754335</id><snippet>print subprocess.check_output(['fastboot', 'getvar', 'all'], stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>17754367</id><snippet>xmin</snippet></ROW><ROW><id>17754367</id><snippet>xmax</snippet></ROW><ROW><id>17754367</id><snippet>fig=plt.figure()
ax=fig.add_subplot(111)
ax.plot(x_data,y_data)
ax.set_xlim(xmin=0.0, xmax=1000)
plt.savefig(filename)
</snippet></ROW><ROW><id>17754494</id><snippet>fill_betweenx</snippet></ROW><ROW><id>17754494</id><snippet>ax.fill_betweenx(mass, inner_edge, outer_edge, facecolor='b')
</snippet></ROW><ROW><id>17754494</id><snippet>import matplotlib.pyplot as plt
import numpy as np

inner_edge = np.linspace(0.1, 5.0, 10)
outer_edge = inner_edge * 0.3
mass = np.linspace(0.1, 1.2, 10)

ax = plt.subplot(111)
plt.ylim(0.1, 1.2)
plt.xlim(0.03, 5.0)

ax.fill_betweenx(mass, inner_edge, outer_edge, facecolor='b')

plt.loglog(inner_edge, mass, 'r-')
plt.loglog(outer_edge, mass, 'r-')

plt.show()
</snippet></ROW><ROW><id>17754666</id><snippet>years = [lp.LpVariable(str(2011+i), 0, None, lp.LpInteger) for i in xrange(n)]
</snippet></ROW><ROW><id>17754666</id><snippet>year_1</snippet></ROW><ROW><id>17754666</id><snippet>years[0]</snippet></ROW><ROW><id>17754666</id><snippet>for year, next_year in zip(years[:-1], years[1:]):
    prob += next_year - year &gt;= 0
</snippet></ROW><ROW><id>17754846</id><snippet>##</snippet></ROW><ROW><id>17754846</id><snippet>from tkinter import *
import random
##
from tkinter.messagebox import showinfo

class BubbleFrame:

    def __init__(self, root):
        root.title("Math Bubbles")
        self.bubbles = {}
        self.score = 0
        Button(root, text="Start", width=8, command=self.initialize_bubbles).pack()  # This button starts the game, making the bubbles move across the screen
        Button(root, text="Quit", width=8, command=quit).pack()
        self.canvas = Canvas(root, width=800, height=650, bg='#afeeee')
        self.canvas.create_text(400, 30, fill="darkblue", font="Times 20 italic bold", text="Click the bubbles that are multiples of two.")
        ##
        self.current_score = self.canvas.create_text(200, 60, fill="darkblue", font="Times 15 italic bold", text="Your score is:")
        self.canvas.pack()

    def initialize_bubbles(self):
        for each_no in range(1, 21):
            xval = random.randint(5, 765)
            yval = random.randint(5, 615)
            oval_id = self.canvas.create_oval(xval, yval, xval + 30, yval + 30,fill="#00ffff", outline="#00bfff", width=5, tags="bubble")
            text_id = self.canvas.create_text(xval + 15, yval + 15, text=each_no, tags="bubble")
            self.canvas.tag_bind("bubble", "&lt;Button-1&gt;", lambda x: self.click(x))
            self.bubbles[oval_id] = (xval, yval, 0, 0, each_no, text_id)  

    def click(self, event):
        if self.canvas.find_withtag(CURRENT):
            item_uid = event.widget.find_closest(event.x, event.y)[0]
            is_even = False
            try:  
                self.bubbles[item_uid]
            except KeyError:  
                for key, value in self.bubbles.iteritems():
                    if item_uid == value[5]:  
                        if value[4] % 2 == 0:
                            is_even = True
                        self.canvas.delete(key)
                        self.canvas.delete(item_uid)
            else:
                if self.bubbles[item_uid][4] % 2 == 0:
                    is_even = True
                self.canvas.delete(item_uid)
                self.canvas.delete(self.bubbles[item_uid][5])
            if is_even:
                self.score += 1
            else:
                self.score -= 1

            if self.score == 10:
                ##
                showinfo("Winner", "You won!")
        ##
        self.canvas.delete(self.current_score)
        ##
        self.current_score = self.canvas.create_text(200, 60, fill="darkblue", font="Times 15 italic bold", text="Your score is: %s"%self.score)

    def loop(self, root):
        for oval_id, (x, y, dx, dy, each_no, text_id) in self.bubbles.items():
            dx += random.randint(-1, 1)
            dy += random.randint(-1, 1)
            dx, dy = max(-5, min(dx, 5)), max(-5, min(dy, 5))
            if not 0 &lt; x &lt; 770:
                dx = -dx
            if not 0 &lt; y &lt; 620:
                dy = -dy
            self.canvas.move(oval_id, dx, dy)
            self.canvas.move(text_id, dx, dy)
            self.bubbles[oval_id] = (x + dx, y + dy, dx, dy, each_no, text_id)
        root.after(100, self.loop, root)

if __name__ == "__main__":
    root = Tk()
    frame = BubbleFrame(root)
    frame.loop(root)
    root.mainloop()
</snippet></ROW><ROW><id>17754857</id><snippet>sys.argv</snippet></ROW><ROW><id>17754857</id><snippet>from sys import argv
quiet = '-d' in argv # True if '-d' in argv else False
</snippet></ROW><ROW><id>17754857</id><snippet>'-d'</snippet></ROW><ROW><id>17754857</id><snippet>argv</snippet></ROW><ROW><id>17754857</id><snippet>quiet = '-d' in argv and (argv.remove('-d') or True)
</snippet></ROW><ROW><id>17754857</id><snippet>getArg = lambda x: x in argv and (argv.remove(x) or True)
quiet = getArg('-d')
interactive = getArg('-i')
</snippet></ROW><ROW><id>17755016</id><snippet>from __future__ import division</snippet></ROW><ROW><id>17755016</id><snippet>float()</snippet></ROW><ROW><id>17755016</id><snippet>int()</snippet></ROW><ROW><id>17755016</id><snippet>answer = float(x) / y * 100
</snippet></ROW><ROW><id>17755039</id><snippet>cdef class PatternTree:

    # NO ATTRIBUTE DECLARATIONS!

    def __init__(self, name, parent=None, nodeType=XML):
        # Some code

    cpdef int isExpressions(self):
        # Some code

    cpdef MatchResult isMatch(self, PatternTree other):
        # More code
</snippet></ROW><ROW><id>17755039</id><snippet>cdef class PatternTree:
    cdef public PatternTree previous
    cdef public PatternTree next
    cdef public PatternTree parent
    cdef public list children

    cdef public int type
    cdef public unicode name
    cdef public dict attributes
    cdef public list categories
    cdef public unicode output

    # Functions
    cpdef int isExpressions(self)
    cpdef MatchResult isMatch(self, PatternTree other)
</snippet></ROW><ROW><id>17755039</id><snippet>cimport pattern_tree
from pattern_tree cimport PatternTree
</snippet></ROW><ROW><id>17755079</id><snippet>#!/usr/bin/env python

import sqlite3

dbc = sqlite3.connect('test.db')
c   = dbc.cursor()

name  = "george's"
query = "select * from names where name = ?"

c.execute(query, (name,))

for row in c.fetchall():
    print row
</snippet></ROW><ROW><id>17755079</id><snippet>(1, u"george's")
</snippet></ROW><ROW><id>17755079</id><snippet>sqlite&gt; .schema names
CREATE TABLE names(id integer primary key asc, name char);

sqlite&gt; select * from names;
1|george's
2|dave
3|george
</snippet></ROW><ROW><id>17755259</id><snippet>foo, bar = map(d.get, ('foo', 'bar'))
</snippet></ROW><ROW><id>17755259</id><snippet>foo, bar = itemgetter('foo', 'bar')(d)
</snippet></ROW><ROW><id>17755372</id><snippet>rect</snippet></ROW><ROW><id>17755372</id><snippet>axes()</snippet></ROW><ROW><id>17755372</id><snippet>(left,bottom,right,top)</snippet></ROW><ROW><id>17755372</id><snippet> import matplotlib.pyplot as pp
 fig = pp.figure()
 ax = fig.add_axes((0,0,1,1))
 ax.plot(range(10))
</snippet></ROW><ROW><id>17755434</id><snippet>class _JobTableReader(_TableReader):
  """A TableReader that reads from a completed job."""

  def __init__(self, local_apiclient, project_id, job_id):
    self.job_id = job_id
    self.project_id = project_id
    self._apiclient = local_apiclient

  def ReadSchemaAndRows(self, max_rows=None):
    """Read at most max_rows rows from a table and the schema.

    Args:
      max_rows: maximum number of rows to return.

    Raises:
      BigqueryInterfaceError: when bigquery returns something unexpected.

    Returns:
      A tuple where the first item is the list of fields and the
      second item a list of rows.
    """
    page_token = None
    rows = []
    schema = {}
    max_rows = max_rows if max_rows is not None else sys.maxint
    while len(rows) &lt; max_rows:
      (more_rows, page_token, total_rows, current_schema) = self._ReadOnePage(
          max_rows=max_rows - len(rows),
          page_token=page_token)
      if not schema and current_schema:
        schema = current_schema.get('fields', {})

      max_rows = min(max_rows, total_rows)
      for row in more_rows:
        rows.append([entry.get('v', '') for entry in row.get('f', [])])
      if not page_token and len(rows) != max_rows:
          raise BigqueryInterfaceError(
            'PageToken missing for %r' % (self,))
      if not more_rows and len(rows) != max_rows:
        raise BigqueryInterfaceError(
            'Not enough rows returned by server for %r' % (self,))
    return (schema, rows)

  def _ReadOnePage(self, max_rows, page_token=None):
    data = self._apiclient.jobs().getQueryResults(
        maxResults=max_rows,
        pageToken=page_token,
        # Sets the timeout to 0 because we assume the table is already ready.
        timeoutMs=0,
        projectId=self.project_id,
        jobId=self.job_id).execute()
    if not data['jobComplete']:
      raise BigqueryError('Job %s is not done' % (self,))
    page_token = data.get('pageToken', None)
    total_rows = int(data['totalRows'])
    schema = data.get('schema', None)
    rows = data.get('rows', [])
    return (rows, page_token, total_rows, schema)
</snippet></ROW><ROW><id>17755449</id><snippet>mock_class.a</snippet></ROW><ROW><id>17755449</id><snippet>a</snippet></ROW><ROW><id>17755449</id><snippet>mock_class</snippet></ROW><ROW><id>17755449</id><snippet>mock_class = MagicMock(spec=[u'a'])
mock_class.a = MagicMock(spec=[u'a'])
hasattr(mock_class.a, u'c')  # returns False
</snippet></ROW><ROW><id>17755622</id><snippet>def smallest_value_greater_than_0(numbers):
    return min(num for num in numbers if num &gt; 0)
</snippet></ROW><ROW><id>17755622</id><snippet>def smallest_value_greater_than_0(numbers):
    value, key = min((v, k) for k, v in numbers.iteritems() if v &gt; 0)
    return key, value

numbs = dict(A=2, B=3, C=0)
key, value = smallest_value_greater_than_0(numbs)     # key="A", value=2
</snippet></ROW><ROW><id>17755622</id><snippet>numbers.items()</snippet></ROW><ROW><id>17755622</id><snippet>numbers.iteritems()</snippet></ROW><ROW><id>17755741</id><snippet>json.loads()</snippet></ROW><ROW><id>17755741</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>17755741</id><snippet>import shutil

response=urllib2.urlopen('http://www.diffbot.com/api/article?token='+token+'&amp;url='+url).read()
with open(file_out,'w') as outfile:
    shutil.copyfileobj(response, outfile)
</snippet></ROW><ROW><id>17755798</id><snippet>os.environ</snippet></ROW><ROW><id>17755798</id><snippet>SPYDER_ENCODING</snippet></ROW><ROW><id>17755798</id><snippet>SPYDER_SHELL_ID</snippet></ROW><ROW><id>17755798</id><snippet>'PYTHONSTARTUP'</snippet></ROW><ROW><id>17755798</id><snippet>if any('SPYDER' in name for name in os.environ)
    # use alternative
else:        
    # use getpass
</snippet></ROW><ROW><id>17755798</id><snippet>str.startswith</snippet></ROW><ROW><id>17755798</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; s = timeit.Timer("[name.startswith('SPYDER') for name in os.environ]", "import os")
&gt;&gt;&gt; i = timeit.Timer("['SPYDER' in name for name in os.environ]", "import os")
&gt;&gt;&gt; s.timeit()
16.18333065883474
&gt;&gt;&gt; i.timeit()
6.156869294143846
</snippet></ROW><ROW><id>17755798</id><snippet>sys.executable</snippet></ROW><ROW><id>17755798</id><snippet>sys.executable.find('WinPy') == -1</snippet></ROW><ROW><id>17755798</id><snippet>getpass</snippet></ROW><ROW><id>17755798</id><snippet>sys.executable.find('pythonw.exe') == -1</snippet></ROW><ROW><id>17755798</id><snippet>sys.executable</snippet></ROW><ROW><id>17755798</id><snippet>if sys.executable.find('pythonw.exe') == sys.executable.find('WinPy') == -1:
    # use getpass
else:        
    # use alternative
</snippet></ROW><ROW><id>17755798</id><snippet>sys.executable</snippet></ROW><ROW><id>17755798</id><snippet>os.environ</snippet></ROW><ROW><id>17755798</id><snippet>if any('SPYDER' in name for name in os.environ) \
   or 'pythonw.exe' in sys.executable:
    password = raw_input('WARNING: PASSWORD WILL BE SHOWN ON SCREEN\n\n' * 3
                         + 'Please enter your password: ')
else:        
    password = getpass.getpass("Please enter your password: ")
</snippet></ROW><ROW><id>17755798</id><snippet>str.find(substr)</snippet></ROW><ROW><id>17755798</id><snippet>substr in str</snippet></ROW><ROW><id>17755878</id><snippet>newimg = img[..., 0]
</snippet></ROW><ROW><id>17755878</id><snippet>img = img[..., 0].copy()
</snippet></ROW><ROW><id>17755911</id><snippet>from collections import defaultdict

dct = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
</snippet></ROW><ROW><id>17755911</id><snippet>for a, b, c, d, e in ts:
    dct[a][b][c].append((d, e))
</snippet></ROW><ROW><id>17755911</id><snippet>a</snippet></ROW><ROW><id>17755911</id><snippet>b</snippet></ROW><ROW><id>17755911</id><snippet>c</snippet></ROW><ROW><id>17756000</id><snippet>--upgrade</snippet></ROW><ROW><id>17756000</id><snippet>-U</snippet></ROW><ROW><id>17756000</id><snippet>pip install -U jsonschema
</snippet></ROW><ROW><id>17756000</id><snippet>iter_errors</snippet></ROW><ROW><id>17756000</id><snippet>from jsonschema import Draft3Validator
</snippet></ROW><ROW><id>17756005</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17756005</id><snippet>list</snippet></ROW><ROW><id>17756005</id><snippet>from collections import defaultdict
dct = defaultdict(list)
</snippet></ROW><ROW><id>17756005</id><snippet>dct[key].append(some_value)
</snippet></ROW><ROW><id>17756005</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17756005</id><snippet>dict</snippet></ROW><ROW><id>17756005</id><snippet>dict</snippet></ROW><ROW><id>17756005</id><snippet>dict</snippet></ROW><ROW><id>17756005</id><snippet>dict.setdefault()</snippet></ROW><ROW><id>17756005</id><snippet>dct[key]</snippet></ROW><ROW><id>17756005</id><snippet>.append()</snippet></ROW><ROW><id>17756005</id><snippet>&gt;&gt;&gt; dct = {}
&gt;&gt;&gt; dct.setdefault('foo', []).append('bar')  # returns None!
&gt;&gt;&gt; dct
{'foo': ['bar']}
</snippet></ROW><ROW><id>17756005</id><snippet>dct[key] = dct.get(...).append()</snippet></ROW><ROW><id>17756005</id><snippet>dct[key]</snippet></ROW><ROW><id>17756005</id><snippet>.append()</snippet></ROW><ROW><id>17756005</id><snippet>None</snippet></ROW><ROW><id>17756026</id><snippet>students = [lloyd, alice, tyler]
for student in students:
    for value in student:
        print value, "is", student[value]
</snippet></ROW><ROW><id>17756026</id><snippet>for student in students:
    print "Name is", student["name"]
    print "Homework is", student["homework"]
    # same for 'quizzes' and 'tests'
</snippet></ROW><ROW><id>17756026</id><snippet>pprint</snippet></ROW><ROW><id>17756026</id><snippet>import pprint
for student in students:
    pprint.pprint(student)
</snippet></ROW><ROW><id>17756178</id><snippet>fnmatch</snippet></ROW><ROW><id>17756178</id><snippet>*.jpg</snippet></ROW><ROW><id>17756178</id><snippet>\w+[.]jpeg</snippet></ROW><ROW><id>17756239</id><snippet>c = csv.writer(open("//DATA/loc" + csv_file + ".csv", "a+b"))
c.writerow([format_time, icount])
</snippet></ROW><ROW><id>17756239</id><snippet>c = csv.writer(open("//DATA/loc" + csv_file + ".csv", "ab"))
c.writerow([format_time, icount])
</snippet></ROW><ROW><id>17756552</id><snippet>import os, glob
files = glob.glob('*.jpg')
files = [os.path.join("C:\\data", file) for file in files]
result = "( " + " ".join(files) + " )"
print result  # Prints ( C:\data\a.jpg C:\data\b.jpg C:\data\c.jpg )
</snippet></ROW><ROW><id>17756552</id><snippet>os.getcwd()</snippet></ROW><ROW><id>17756552</id><snippet>"C:\\data"</snippet></ROW><ROW><id>17756644</id><snippet>myData</snippet></ROW><ROW><id>17756644</id><snippet>accnt</snippet></ROW><ROW><id>17756644</id><snippet>for accnt in myData:
  print( " myName: %s  myType: %s " % ( myData[accnt][u'myName'], myData[accnt][u'myType'] ) )
</snippet></ROW><ROW><id>17756644</id><snippet>values()</snippet></ROW><ROW><id>17756644</id><snippet>myData</snippet></ROW><ROW><id>17756644</id><snippet>for accnt in myData.values():
  print( " myName: %s  myType: %s " % ( accnt[u'myName'], accnt[u'myType'] ) )
</snippet></ROW><ROW><id>17756652</id><snippet>os.umask(0000)
</snippet></ROW><ROW><id>17756652</id><snippet>umask(0000)
</snippet></ROW><ROW><id>17756652</id><snippet>creat()</snippet></ROW><ROW><id>17756652</id><snippet>mkdir()</snippet></ROW><ROW><id>17756652</id><snippet>umask</snippet></ROW><ROW><id>17756652</id><snippet>0666</snippet></ROW><ROW><id>17756652</id><snippet>0777</snippet></ROW><ROW><id>17756652</id><snippet>umask</snippet></ROW><ROW><id>17756652</id><snippet>022</snippet></ROW><ROW><id>17756652</id><snippet>umask</snippet></ROW><ROW><id>17756773</id><snippet>export</snippet></ROW><ROW><id>17756773</id><snippet>import</snippet></ROW><ROW><id>17756773</id><snippet>env = Environment(tools=['default', 'qt4'])
Export('env')
</snippet></ROW><ROW><id>17756909</id><snippet>self.cursor = delta['cursor']</snippet></ROW><ROW><id>17756909</id><snippet>self.cursor = delt['cursor']</snippet></ROW><ROW><id>17756969</id><snippet>import numpy as np
from pylab import *
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

def randrange(n, vmin, vmax):
    return (vmax-vmin)*np.random.rand(n) + vmin

fig = plt.figure(figsize=(8,6))

ax = fig.add_subplot(111,projection='3d')
n = 100

xs = randrange(n, 23, 32)
ys = randrange(n, 0, 100)
zs = randrange(n, 0, 100)

colmap = cm.ScalarMappable(cmap=cm.hsv)
colmap.set_array(zs)

yg = ax.scatter(xs, ys, zs, c=cm.hsv(zs/max(zs)), marker='o')
cb = fig.colorbar(colmap)

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')


plt.show()
</snippet></ROW><ROW><id>17756969</id><snippet>import numpy as np
from pylab import *
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

def randrange(n, vmin, vmax):
    return (vmax-vmin)*np.random.rand(n) + vmin

fig = plt.figure(figsize=(8,6))

ax = fig.add_subplot(111,projection='3d')
n = 100

xs = randrange(n, 0, 100)
ys = randrange(n, 0, 100)
zs = randrange(n, 0, 100)
the_fourth_dimension = randrange(n,0,100)

colors = cm.hsv(the_fourth_dimension/max(the_fourth_dimension))

colmap = cm.ScalarMappable(cmap=cm.hsv)
colmap.set_array(the_fourth_dimension)

yg = ax.scatter(xs, ys, zs, c=colors, marker='o')
cb = fig.colorbar(colmap)

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')


plt.show()
</snippet></ROW><ROW><id>17757004</id><snippet>def open_storage():
    global my_process
    my_process = subprocess.Popen("waffles.exe")
</snippet></ROW><ROW><id>17757022</id><snippet> self.to_min() == other.to_min()
</snippet></ROW><ROW><id>17757022</id><snippet> self.__hash__() == other.__hash__()
</snippet></ROW><ROW><id>17757022</id><snippet>class Time(object):
'''
classdocs
'''


def __init__(self, h, m):
    if isinstance(h, int) and isinstance(h, int):
        self.m = m
        self.h = h
        if(self.m &gt;= 60):
            self.h += self.m // 60
            self.m %= 60
def __add__(self, m):

    return Time(self.h, self.m + m)
def to_min(self):
    return self.h * 60 + self.m
def __cmp__(self, other):
    print "__cmp__"
    if isinstance(other, Time):
        if self.to_min() &gt; other.to_min():
            return 1
        else:
            if self.__hash__() == other.__hash__():
                return 0
            else:
                return -1
def __eq__(self, other):
    print "__eq__"
    if isinstance(other, Time):
        if self.to_min() == other.to_min():
            return True
        else:
            return False
def __gt__(self, other):
    return self.to_min() &gt; other.to_min()
def __ge__(self, other):
    return self.to_min() &gt;= other.to_min()
def __lt__(self, other):
    return self.to_min() &lt; other.to_min()
def __le__(self, other):
    return self.to_min() &lt;= other.to_min()
def __str__ (self):
    return str(self.h) + ":" + str(self.m)
def __hash__(self):
    print "__hash__"
    return self.to_min()
    # return 1
def __ne__(self, other):
    print "__ne__"
    return not self == other



# a = set([Time(10,10), Time(10,20)])
# b = set([Time(10,10)])
# print a in set([b])
a = {Time(10,10)} 
print {Time(10,10)}.issubset(a) 
# print b.issubset( a)
# for i in a:
#     print i in a
</snippet></ROW><ROW><id>17757135</id><snippet>hashs</snippet></ROW><ROW><id>17757135</id><snippet>if hashs == 1:</snippet></ROW><ROW><id>17757135</id><snippet>'1'</snippet></ROW><ROW><id>17757135</id><snippet>'1'</snippet></ROW><ROW><id>17757135</id><snippet>if</snippet></ROW><ROW><id>17757135</id><snippet>counter</snippet></ROW><ROW><id>17757135</id><snippet>while</snippet></ROW><ROW><id>17757135</id><snippet>import hashlib

def main():
    hashs = 0

    read = str(raw_input('Please enter filename for input : '))
    output = str(raw_input('Please enter filename for output : ' ))
    hashs = int(raw_input('Select a Hash to convert to : '))

    if (output != ''):
        fileObj = open(output,"a")

    if (read != ''):
        numlines = 0
        for line in open(read):
            numlines +=1

        print ('Found ', numlines, ' lines to convert\n') 

        fp = open(read)

        for i, line in enumerate(fp):

            if hashs == 1:
                line = line.encode('UTF-8')
                hashc = hashlib.md5(line).hexdigest()

            if hashs == 2:
                line = line.encode('UTF-8')
                hashc = hashlib.sha1(line).hexdigest()

            if hashs == 3:
                line = line.encode('UTF-8')
                hashc = hashlib.sha224(line).hexdigest()

            if hashs == 4:
                line = line.encode('UTF-8')
                hashc = hashlib.sha256(line).hexdigest()

            if hashs == 5:
                line = line.encode('UTF-8')
                hashc = hashlib.sha384(line).hexdigest()

            if hashs == 6:
                line.encode('UTF-8')
                hashc = hashlib.sha512(line).hexdigest()

            fileObj.write(hashc)
            fileObj.write('\n')
main()
</snippet></ROW><ROW><id>17757135</id><snippet>test file hash this yo
come on and hash, if you want to jam
mankind is to be surpassed
</snippet></ROW><ROW><id>17757135</id><snippet>Please enter filename for input : input
Please enter filename for output : outf 
Select a Hash to convert to : 2
('Found ', 3, ' lines to convert\n')
</snippet></ROW><ROW><id>17757135</id><snippet>222bc2522767626e27c64bb2b68a787f9e4758cd
f3ac7272e6d681c331580368e4b189445b9a9451
fdca95f9c68df6216af6d2eeb950a3344812bd62
</snippet></ROW><ROW><id>17757135</id><snippet>raw_input</snippet></ROW><ROW><id>17757135</id><snippet>input</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict</snippet></ROW><ROW><id>17757174</id><snippet>__init__</snippet></ROW><ROW><id>17757174</id><snippet>self.enemy</snippet></ROW><ROW><id>17757174</id><snippet>&gt;&gt;&gt; t = (1,2,3)
&gt;&gt;&gt; t[1] = 4
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
</snippet></ROW><ROW><id>17757174</id><snippet>list</snippet></ROW><ROW><id>17757174</id><snippet>tuple</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict = [["sprite", 5], ...]</snippet></ROW><ROW><id>17757174</id><snippet>enemy</snippet></ROW><ROW><id>17757174</id><snippet>self.enemy</snippet></ROW><ROW><id>17757174</id><snippet>Enemy</snippet></ROW><ROW><id>17757174</id><snippet>.keys()</snippet></ROW><ROW><id>17757174</id><snippet>.values()</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict</snippet></ROW><ROW><id>17757174</id><snippet>dict</snippet></ROW><ROW><id>17757174</id><snippet>['sprite', 'thief']</snippet></ROW><ROW><id>17757174</id><snippet>[5, 10]</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict</snippet></ROW><ROW><id>17757174</id><snippet>Enemy</snippet></ROW><ROW><id>17757174</id><snippet>__init__</snippet></ROW><ROW><id>17757174</id><snippet>def __init__(self, name, health):
    self.name = name
    self.health = values
</snippet></ROW><ROW><id>17757174</id><snippet>an_enemy = Enemy(enemy_dict[0][0], enemy_dict[0][1])</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict = {
    "sprite": 5,
    "thief": 10
}
</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict[name]</snippet></ROW><ROW><id>17757174</id><snippet>if name in enemy_dict.keys()</snippet></ROW><ROW><id>17757174</id><snippet>an_enemy = Enemy(name, enemy_dict[name])</snippet></ROW><ROW><id>17757174</id><snippet>random</snippet></ROW><ROW><id>17757174</id><snippet>random.choice</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict.keys()</snippet></ROW><ROW><id>17757174</id><snippet>self.enemy = random.choice(enemy_dict.keys())
</snippet></ROW><ROW><id>17757174</id><snippet>enemy</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict[self.enemy]</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict</snippet></ROW><ROW><id>17757174</id><snippet>"sprite"</snippet></ROW><ROW><id>17757174</id><snippet>enemy_dict</snippet></ROW><ROW><id>17757174</id><snippet>self.enemy_name = random.choice(enemy_dict.keys())
self.enemy_health = enemy_dict[self.enemy_name]
</snippet></ROW><ROW><id>17757174</id><snippet>enemy_health</snippet></ROW><ROW><id>17757207</id><snippet>import re
import subprocess
website = "google.com"
try:
    ping = subprocess.Popen(["ping", "-n", "-c 5", website], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, error = ping.communicate()
    if out:
        try:
            minimum = int(re.findall(r"Minimum = (\d+)", out)[0])
            maximum = int(re.findall(r"Maximum = (\d+)", out)[0])
            average = int(re.findall(r"Average = (\d+)", out)[0])
            packet = int(re.findall(r"Lost = (\d+)", out)[0])
            if packet &gt; 1:
                packet = 5 / packet * 100
        except:
            print "no data for one of minimum,maximum,average,packet"
    else:
        print 'No ping'

except subprocess.CalledProcessError:
    print "Couldn't get a ping"
</snippet></ROW><ROW><id>17757250</id><snippet>$PATH</snippet></ROW><ROW><id>17757250</id><snippet>stdin</snippet></ROW><ROW><id>17757250</id><snippet>ProcessBuilder</snippet></ROW><ROW><id>17757250</id><snippet>Process</snippet></ROW><ROW><id>17757252</id><snippet>shelve</snippet></ROW><ROW><id>17757252</id><snippet>dict</snippet></ROW><ROW><id>17757252</id><snippet>dict</snippet></ROW><ROW><id>17757252</id><snippet>.keys()</snippet></ROW><ROW><id>17757252</id><snippet>list</snippet></ROW><ROW><id>17757252</id><snippet>keylist = list(db.keys())
</snippet></ROW><ROW><id>17757440</id><snippet>def getTimes(aliens):
    n = len(aliens)
    dp = [0] * n #your s array. I'm just used to using dp for dp tables
    parent = [-1] * n
    dp[1] = 1
    for i in range(2, n):
        max = 0; #assuming there can't be a negative number of aliens. 
        for j in range(0, i):
            x = dp[j] + min(int(aliens[i]), (i - j) * (i - j))
            if(x &gt;= max):
                max = x
                parent[i] = j
        dp[i] = max;
    times = getTimesRec(n - 1, [], parent)
    return times

def getTimesRec(i, times, parent):
    if(i == -1):
        return times
    getTimesRec(parent[i], times, parent)
    times.append(i)
    return times
</snippet></ROW><ROW><id>17757440</id><snippet>parent[23] = 19
parent[19] = 4
parent[4] = -1
</snippet></ROW><ROW><id>17757523</id><snippet>./fabfile.py
from fabric.api import run, env

env.user = "root"
env.key_filename = "/home/ubuntu/.ssh/id_rsa"
def test():
    run("mkdir -p /home/ubuntu/")

---
fabric:~$ fab test -H 111.111.111.111
&gt;&gt;&gt;[192.168.99.20] Executing task 'test'
&gt;&gt;&gt;[192.168.99.20] run: mkdir -p /home/ubuntu/
&gt;&gt;&gt;
&gt;&gt;&gt;Done.
</snippet></ROW><ROW><id>17757523</id><snippet>./fabfile.py
def setenv(host=None):
    if host is not None:
        env.hosts= [host]
    env.user = "ubuntu"
    env.key_filename = "/home/ubuntu/.ssh/id_rsa"

def test():
    run("mkdir -p /home/ubuntu/")

---
fabric:~$ fab setenv:web01 test
(snip)
</snippet></ROW><ROW><id>17757574</id><snippet>self.button_id</snippet></ROW><ROW><id>17757574</id><snippet>lambda i=i: do_something_with(i)</snippet></ROW><ROW><id>17757574</id><snippet>def Create_Widgets(self):
    for i in range(1, 11):
        self.newmessage = Button(self, text= "Button ID: %d" % i, anchor=W,
                                 command = lambda i=i: self.access(i))
        self.newmessage.config(height = 3, width = 100)
        self.newmessage.grid(column = 0, row = i, sticky = NW)
</snippet></ROW><ROW><id>17757601</id><snippet>INSTALLED_APPS = (
    ...
    'tinymce',
)
</snippet></ROW><ROW><id>17757601</id><snippet>urlpatterns = patterns('',
    ...
    (r'^tinymce/', include('tinymce.urls')),
)
</snippet></ROW><ROW><id>17757601</id><snippet>#form = ArticleModelAdminForm
</snippet></ROW><ROW><id>17757601</id><snippet>    class Media:
        js = ('/static/tiny_mce/tiny_mce.js', 
              '/static/tiny_mce/my_advanced_editor.js')
</snippet></ROW><ROW><id>17757601</id><snippet>class Article(models.Model):
    content = models.TextField() # Normal textfields (Don't load Tiny)
    about = models.TextField()
</snippet></ROW><ROW><id>17757601</id><snippet>class ArticleAdmin(admin.ModelAdmin):
    class Media:
        js = ('/static/tiny_mce/tiny_mce.js', 
              '/path/to/my_advanced_editor.js') # Add js to head of admin.
</snippet></ROW><ROW><id>17757601</id><snippet>   tinyMCE.init({
        mode: "textareas",  // This applies Tiny to all textareas.
        theme: "advanced",          
        ...
    });
</snippet></ROW><ROW><id>17757601</id><snippet>mode : "exact",
elements : "id_content,id_about",
</snippet></ROW><ROW><id>17757601</id><snippet>    mode: "textareas",  // All textareas except...
editor_deselector : "NoEditor" // deselects class="NoEditor"
</snippet></ROW><ROW><id>17757601</id><snippet>    widget=forms.TextInput(attrs={'class':'NoEditor'})
</snippet></ROW><ROW><id>17757839</id><snippet>&gt;&gt;&gt; '\data\file.txt'
'\\data\x0cile.txt'
</snippet></ROW><ROW><id>17757839</id><snippet>\f</snippet></ROW><ROW><id>17757839</id><snippet>\f</snippet></ROW><ROW><id>17757839</id><snippet>&gt;&gt;&gt; '\\data\\file.txt'
'\\data\\file.txt'
</snippet></ROW><ROW><id>17757839</id><snippet>&gt;&gt;&gt; r'\data\file.txt'
'\\data\\file.txt'
</snippet></ROW><ROW><id>17757839</id><snippet>Run</snippet></ROW><ROW><id>17757839</id><snippet>import subprocess
import time

def Run(path='\\data\\file.txt'):
  flag = '-f%s' % path
  subprocess.call(['C:\\folder\\program', flag])
</snippet></ROW><ROW><id>17757839</id><snippet>import os.path
script_dir = os.path.abspath(os.path.dirname(__file__))
cmd = os.path.join(script_dir, '\\relative\\path\\to\\program.exe')
</snippet></ROW><ROW><id>17757926</id><snippet>&gt;&gt;&gt; chainpos.append((chainid,x, y, z))
&gt;&gt;&gt; chainpos 
[('A', 1.719, -25.217, 8.694), ('A', 2.934, -21.997, 7.084)]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for id, coor in itertools.groupby(chainpos,lambda x:x[0]):
...     print(id, [c[1:] for c in coor])
</snippet></ROW><ROW><id>17757935</id><snippet>Python 2.7                        -- Python version
(r27:82525, Jul 4 2010, 07:43:08) -- The build date and revision from src trunk 
                                     that was used to build this.
[MSC v.1500 64 bit (AMD64)]       -- Compiled with MSVC compiler targeting 64-bit
on win32                          -- Obviously for windows platform
</snippet></ROW><ROW><id>17758199</id><snippet>[int(x) for x in str(reduce(lambda x, y: x * y, range(1, 11)))]
</snippet></ROW><ROW><id>17758199</id><snippet>reduce(lambda x, y: x + y, [int(x) for x in str(reduce(lambda x, y: x * y, range(1, 11)))])
</snippet></ROW><ROW><id>17758251</id><snippet>combinations = itertools.combinations(extensionHeader, 1)
</snippet></ROW><ROW><id>17758251</id><snippet>combinations()</snippet></ROW><ROW><id>17758251</id><snippet>all_combinations()</snippet></ROW><ROW><id>17758251</id><snippet>combs = itertools.combinations(extensionHeader, 1)
</snippet></ROW><ROW><id>17758251</id><snippet>all_combinations()</snippet></ROW><ROW><id>17758251</id><snippet>itertools.combinations</snippet></ROW><ROW><id>17758251</id><snippet>combinations</snippet></ROW><ROW><id>17758251</id><snippet>def all_combinations(input):
  return itertools.chain(*map(lambda y: itertools.combinations(input, y), range(0, len(input)+1)))
</snippet></ROW><ROW><id>17758475</id><snippet>from bottle import post, request

...

@route('/login', method='POST') # or @post('/login')
def login_submit():
  name = request.forms.get('name')
  password = request.forms.get('password')
  if check_login(name, password):
    return "&lt;p&gt;Your login was correct&lt;/p&gt;"
  else:
    return "&lt;p&gt;Login failed&lt;/p&gt;"
</snippet></ROW><ROW><id>17758617</id><snippet>import numpy as np
import scipy.optimize as opt

#Returns the distance from a point to the list of spheres
def calc_distance(point):
    return np.power(np.sum(np.power(centers-point,2),axis=1),.5)-rad

#Latitude/longitude to carteisan
def geo2cart(lat,lon):
    lat=np.deg2rad(lat)
    lon=np.deg2rad(lon)
    points=np.vstack((earth_radius*np.cos(lat)*np.cos(lon),
           earth_radius*np.cos(lat)*np.sin(lon),
           earth_radius*np.sin(lat))).T
    return points

#Cartesian to lat/lon
def cart2geo(xyz):
    if xyz.ndim==1: xyz=xyz[None,:]
    lat=np.arcsin(xyz[:,2]/earth_radius)
    lon=np.arctan2(xyz[:,1],xyz[:,0])
    return np.rad2deg(lat),np.rad2deg(lon)

#Minimization function. 
def minimize(point):
    dist= calc_distance(point)
    #Here you can change the minimization parameter, here the distances
    #from a sphere to a point is divided by its radius for linear weighting.
    err=np.linalg.norm(dist/rad)
    return err

earth_radius = 6378
p1 = (31.2297, 121.4734, 3335.65)
p2 = (34.539, 69.171, 2477.17)
p3 = (47.907, 106.91, 1719.65)
p4 = (50.43, 80.25, 1242.27)

points = np.vstack((p1,p2,p3,p4))
lat    = points[:,0]
lon    = points[:,1]
rad    = points[:,2]

centers = geo2cart(lat,lon)

out=[]
for x in range(30):
    latrand=np.average(lat/rad)*np.random.rand(1)*np.sum(rad)
    lonrand=np.average(lon/rad)*np.random.rand(1)*np.sum(rad)
    start=geo2cart(latrand,lonrand)
    end_pos=opt.fmin_powell(minimize,start)
    out.append([cart2geo(end_pos),np.linalg.norm(end_pos-geo2cart(36.989,91464))])


out = sorted(out, key=lambda x: x[1])
print 'Latitude:',out[0][0][0],'Longitude:',out[0][0][1],'Distance:',out[0][1]
</snippet></ROW><ROW><id>17758617</id><snippet>First set of points:  lat 40.1105092 lon 88.07068701
Second set of points: lat 40.36636421 lon 88.84527729
</snippet></ROW><ROW><id>17758617</id><snippet>p0=np.random.rand(2)*90+20
p1=np.random.rand(2)*-10+20+p0
p2=np.random.rand(2)*-10+20+p0
p3=np.random.rand(2)*-10+20+p0
p4=np.random.rand(2)*-10+20+p0

target=geo2cart(p0[0],p0[1])
points=np.vstack((p1,p2,p3,p4))
lat    = points[:,0]
lon    = points[:,1]

centers=geo2cart(lat,lon)
#You can change the random at the end to tune the amount of noise
rad =  np.power(np.sum(np.power(centers-target,2),axis=1),.5)#+np.random.rand(4)*10    

print '------------'
start=geo2cart(np.average(lat),np.average(lon))
end_pos=opt.fmin_powell(minimize,start)
print 'Exact',p0
print 'Start guess',cart2geo(start)
print 'Found',cart2geo(end_pos)
print 'Distance',np.linalg.norm(end_pos-target)

Exact [  45.21292244  101.85151772]
Start guess (array([ 60.63554123]), array([ 115.08426225]))
Found (array([ 45.21292244]), array([ 101.85151772]))
Distance 5.30420680512e-11
</snippet></ROW><ROW><id>17758666</id><snippet>a = [[(1, 2), (2, 1)], [(1, 2), (1, 2)], [(2, 3), (2, 2)]]
item = (1,2)
count = [sublist[0] for sublist in a].count(item)
</snippet></ROW><ROW><id>17759584</id><snippet>call(["ffmpeg", "-i", "infile.avi", "-acodec", "copy", "-vcodec", "copy", "outfile.mp4")
</snippet></ROW><ROW><id>17759771</id><snippet>/api/analysis/summarize</snippet></ROW><ROW><id>17759771</id><snippet>@app.route('/api/foo')
def foo():
    return "Foo is special!"

@app.route('/api/&lt;name&gt;')
def generic(name):
    return "Hello %s!" % name
</snippet></ROW><ROW><id>17759977</id><snippet>setup.py</snippet></ROW><ROW><id>17759977</id><snippet>setup</snippet></ROW><ROW><id>17759977</id><snippet>setup.py</snippet></ROW><ROW><id>17759977</id><snippet>bin</snippet></ROW><ROW><id>17759977</id><snippet>/usr/bin</snippet></ROW><ROW><id>17759977</id><snippet>export LD_PATH="/my/path:$LD_PATH"</snippet></ROW><ROW><id>17760207</id><snippet>1.0</snippet></ROW><ROW><id>17760207</id><snippet>end</snippet></ROW><ROW><id>17760207</id><snippet>import datetime

text.delete('1.0', 'end')
text.insert('end', datetime.datetime.now().strftime('%H:%M:%S')) # text.insert('end', label['text'])
</snippet></ROW><ROW><id>17760207</id><snippet>label['text'] = datetime.datetime.now().strftime('%H:%M:%S')
</snippet></ROW><ROW><id>17760207</id><snippet>import datetime
from Tkinter import * # from tkinter import *   # Python 3.x

root = Tk()
root.geometry('500x500')
frame = Frame(root)
frame.pack(side=BOTTOM, fill=BOTH)

entry = Entry(frame)
entry.pack(side=RIGHT)
entry.insert(END, datetime.datetime.now().strftime('%H:%M:%S'))
root.mainloop()
</snippet></ROW><ROW><id>17760207</id><snippet>def __init__(self):
    tk.Tk.__init__(self)
    self.geometry("1360x750")
    frameLabel = tk.Frame(self)
    self.text = tk.Text(frameLabel)
    frameLabel.pack(side=BOTTOM, fill=BOTH)
    self.text.pack(side=RIGHT)
    self.text.insert('end', 'TEST')
    self.queue = Queue.Queue()
    thread = SerialThread(self.queue)
    thread.start()
    self.process_serial()
</snippet></ROW><ROW><id>17760207</id><snippet>import datetime
from Tkinter import * # from tkinter import *   # Python 3.x

root = Tk()
root.geometry('500x500')
frame = Frame(root)
frame.pack(side=BOTTOM, fill=BOTH)

label = Label(frame)
label.pack(side=RIGHT)
label['text'] = datetime.datetime.now().strftime('%H:%M:%S')
root.mainloop()
</snippet></ROW><ROW><id>17760610</id><snippet>Sound</snippet></ROW><ROW><id>17760610</id><snippet>StringIO</snippet></ROW><ROW><id>17760610</id><snippet>import cStringIO
...
sound = pygame.mixer.Sound(cStringIO.StringIO(a_sound))
</snippet></ROW><ROW><id>17761049</id><snippet>def getNumeric(prompt):
    while True:
        try:
            res = int(input('Enter: '))
            break
        except (ValueError, NameError):
            print("Numbers only please!")
    return res
</snippet></ROW><ROW><id>17761049</id><snippet>&gt;&gt;&gt; getNumeric('Python 2.7: ')
Enter: hello
Numbers only please!
Enter: 123
123
</snippet></ROW><ROW><id>17761049</id><snippet>&gt;&gt;&gt; getNumeric('Python 3: ')
Enter: hello
Numbers only please!
Enter: 123
123
</snippet></ROW><ROW><id>17761049</id><snippet>NameError</snippet></ROW><ROW><id>17761049</id><snippet>ValueError</snippet></ROW><ROW><id>17761049</id><snippet>print</snippet></ROW><ROW><id>17761218</id><snippet>Tk()</snippet></ROW><ROW><id>17761218</id><snippet>main()</snippet></ROW><ROW><id>17761218</id><snippet>global</snippet></ROW><ROW><id>17761218</id><snippet>class MyCustomWindow(Tkinter.Frame):
    def __init__(self, parent):
        Tkinter.Frame.__init__(self, parent)
        Tkinter.Label(self, image=image).pack()
        self.pack(side='top')

def main():
    root = Tkinter.Tk()
    global image # make image known in global scope
    image = Tkinter.PhotoImage(file='image.gif')
    MyCustomWindow(root)
    root.mainloop()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>17761218</id><snippet>main()</snippet></ROW><ROW><id>17761218</id><snippet>class MyCustomWindow(Tkinter.Frame):
    # same as above

root = Tkinter.Tk()
image = Tkinter.PhotoImage(file='image.gif')
MyCustomWindow(root)
root.mainloop()
</snippet></ROW><ROW><id>17761218</id><snippet>__init__</snippet></ROW><ROW><id>17761218</id><snippet>self</snippet></ROW><ROW><id>17761218</id><snippet>Frame</snippet></ROW><ROW><id>17761218</id><snippet>__init__</snippet></ROW><ROW><id>17761218</id><snippet>class MyCustomWindow(Tkinter.Frame):
    def __init__(self, parent):
        Tkinter.Frame.__init__(self, parent)
        self.image = Tkinter.PhotoImage(file='image.gif')
        Tkinter.Label(self, image=self.image).pack()
        self.pack(side='top')

def main():
    # same as above, but without creating the image
</snippet></ROW><ROW><id>17761240</id><snippet>dict</snippet></ROW><ROW><id>17761240</id><snippet>has_key</snippet></ROW><ROW><id>17761240</id><snippet>has_key</snippet></ROW><ROW><id>17761240</id><snippet>&gt;&gt;&gt; hasattr({}, 'has_key')
True
&gt;&gt;&gt; {}.has_key
&lt;built-in method has_key of dict object at 0x7fa2a8461940&gt;
</snippet></ROW><ROW><id>17761240</id><snippet>dict</snippet></ROW><ROW><id>17761240</id><snippet>__getattr__()</snippet></ROW><ROW><id>17761240</id><snippet>class AttributeDict(dict):
    def __getattr__(self, name):
        if name in self:
            return self[name]
        raise AttributeError(name)
</snippet></ROW><ROW><id>17761240</id><snippet>&gt;&gt;&gt; demo = AttributeDict({'foo': 'bar'})
&gt;&gt;&gt; demo.keys()
['foo']
&gt;&gt;&gt; demo.foo
'bar'
</snippet></ROW><ROW><id>17761240</id><snippet>dict</snippet></ROW><ROW><id>17761240</id><snippet>&gt;&gt;&gt; demo['has_key'] = 'monty'
&gt;&gt;&gt; demo.has_key
&lt;built-in method has_key of AttributeDict object at 0x7fa2a8464130&gt;
</snippet></ROW><ROW><id>17761526</id><snippet>yourstring.split()</snippet></ROW><ROW><id>17761526</id><snippet>&gt;&gt;&gt; banned_string = "word1 word2 word3"
&gt;&gt;&gt; banned_string.split()
['word1', 'word2', 'word3']
</snippet></ROW><ROW><id>17761526</id><snippet>def checkmessage(msg):
    banned_words = "badword1 badword2 badword3"
    banned_list= banned_words.split()

    for word in banned_list:
         if word in msg:
             print("banned for saying: " + word)
             return
    print("not banned")


msg1 = "Nothing special here"
msg2 = "I say the badword2."

checkmessage(msg1)
checkmessage(msg2)
</snippet></ROW><ROW><id>17761526</id><snippet>not banned
banned for saying: badword2
</snippet></ROW><ROW><id>17761735</id><snippet>import sys</snippet></ROW><ROW><id>17761735</id><snippet>try</snippet></ROW><ROW><id>17761735</id><snippet>except</snippet></ROW><ROW><id>17761735</id><snippet>import sys
try:
    # ...
except ImportError:
    # ...
</snippet></ROW><ROW><id>17761735</id><snippet>import sys</snippet></ROW><ROW><id>17761735</id><snippet>sys</snippet></ROW><ROW><id>17761792</id><snippet>repr()</snippet></ROW><ROW><id>17761792</id><snippet>repr()</snippet></ROW><ROW><id>17761792</id><snippet>unicode</snippet></ROW><ROW><id>17761792</id><snippet>with open('dictionary.txt') as my_file:
    for line in my_file:   # just loop over the file
        if line.strip(): # ignoring blank lines
            key, value = line.decode('utf8').strip().split(':')
            words[key] = value
</snippet></ROW><ROW><id>17761792</id><snippet>codecs.open()</snippet></ROW><ROW><id>17761792</id><snippet>import codecs

with codecs.open('dictionary.txt', 'r', 'utf8') as my_file:
    for line in my_file:
        if line.strip(): # ignoring blank lines
            key, value = line.strip().split(':')
            words[key] = value
</snippet></ROW><ROW><id>17761792</id><snippet>repr()</snippet></ROW><ROW><id>17761792</id><snippet>u'cheese': u'K\xe4se'</snippet></ROW><ROW><id>17761792</id><snippet>\xe4</snippet></ROW><ROW><id>17761792</id><snippet>ä</snippet></ROW><ROW><id>17761792</id><snippet>print words['cheese']
</snippet></ROW><ROW><id>17761792</id><snippet>print</snippet></ROW><ROW><id>17761833</id><snippet>if taken[tmpIndex] == 0:
</snippet></ROW><ROW><id>17761893</id><snippet>collections.Counter</snippet></ROW><ROW><id>17761893</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter(['2', '5', '2', '5', '5', '3'])
&gt;&gt;&gt; counts
Counter({'5': 3, '2': 2, '3': 1})
&gt;&gt;&gt; ' * '.join(['{}^{}'.format(k, v) for k, v in counts.most_common()])
'5^3 * 2^2 * 3^1'
</snippet></ROW><ROW><id>17761893</id><snippet>1</snippet></ROW><ROW><id>17761893</id><snippet>&gt;&gt;&gt; ' * '.join(['{}^{}'.format(k, v) if v &gt; 1 else k for k, v in counts.most_common()])
'5^3 * 2^2 * 3'
</snippet></ROW><ROW><id>17761893</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>17761914</id><snippet>user = CharField(
    max_length=30,
    required=True,
    validators=[
        RegexValidator(
            regex='^[a-zA-Z0-9]*$',
            message='Username must be Alphanumeric',
            code='invalid_username'
        ),
    ]
)
</snippet></ROW><ROW><id>17762076</id><snippet>text</snippet></ROW><ROW><id>17762076</id><snippet>self.text = tk.Text(frameLabel, ...)

# ...

new = self.queue.get()     
self.text.delete(1.0, 'end')
self.text.insert('end', new)
</snippet></ROW><ROW><id>17762076</id><snippet>self.label = tk.Label(frameLabel, ...)

# ...

new = self.queue.get()     
self.label.config(text=new)
</snippet></ROW><ROW><id>17762157</id><snippet>getattr()</snippet></ROW><ROW><id>17762157</id><snippet>import myDict

list_name = 'wallet'
print getattr(myDict, list_name)
</snippet></ROW><ROW><id>17762157</id><snippet>raw_input()</snippet></ROW><ROW><id>17762157</id><snippet>wallet</snippet></ROW><ROW><id>17762157</id><snippet>numbers</snippet></ROW><ROW><id>17762157</id><snippet>import myDict

list_name = raw_input('wallet or numbers? ')
print getattr(myDict, list_name)
</snippet></ROW><ROW><id>17762157</id><snippet>try:</snippet></ROW><ROW><id>17762157</id><snippet>except AttributeError:</snippet></ROW><ROW><id>17762157</id><snippet>list_name = raw_input('wallet or numbers? ')
try:
    print getattr(myDict, list_name)
except AttributeError:
    print "Sorry, no such list"
</snippet></ROW><ROW><id>17762271</id><snippet>limit_choices_to</snippet></ROW><ROW><id>17762271</id><snippet>class Item(models.Model):

    name = name = models.CharField(max_length = 75)
    sub_category = models.ForeignKey(
        'ItemSubcategory', 
        limit_choices_to={'ItemCategory': 'Food'}
    )
</snippet></ROW><ROW><id>17762410</id><snippet>text</snippet></ROW><ROW><id>17762410</id><snippet>onOpenFile()</snippet></ROW><ROW><id>17762410</id><snippet>text</snippet></ROW><ROW><id>17762410</id><snippet>TextCtrl</snippet></ROW><ROW><id>17762410</id><snippet>text</snippet></ROW><ROW><id>17762410</id><snippet>__init__</snippet></ROW><ROW><id>17762410</id><snippet>self</snippet></ROW><ROW><id>17762410</id><snippet>def __init__(self):
    # ....
    self.text = text = wx.TextCtrl(panel, -1, "",style=wx.TE_MULTILINE|wx.HSCROLL)

def onOpenFile(self, event):
    # ....
    if dlg.ShowModal() == wx.ID_OK:
        paths = dlg.GetPaths()
        print "You chose the following file(s):"
        for path in paths:
            print path
            self.text.AppendText('path') 
</snippet></ROW><ROW><id>17762600</id><snippet>timeit</snippet></ROW><ROW><id>17762600</id><snippet>timeit</snippet></ROW><ROW><id>17762600</id><snippet>timeit</snippet></ROW><ROW><id>17762600</id><snippet>&gt;&gt;&gt; timeit.timeit('a += x', 'a = x = 1')
0.047940969467163086
&gt;&gt;&gt; timeit.timeit('a = a + x', 'a = x = 1')
0.04770612716674805
</snippet></ROW><ROW><id>17762600</id><snippet>&gt;&gt;&gt; def f(): a += x
... 
&gt;&gt;&gt; def g(): a = a + x
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_FAST                0 (a)
              3 LOAD_GLOBAL              0 (x)
              6 INPLACE_ADD         
              7 STORE_FAST               0 (a)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(g)
  1           0 LOAD_FAST                0 (a)
              3 LOAD_GLOBAL              0 (x)
              6 BINARY_ADD          
              7 STORE_FAST               0 (a)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
</snippet></ROW><ROW><id>17762683</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; a=['not','not','not','not']
&gt;&gt;&gt; b=['not','not']

&gt;&gt;&gt; c1 = collections.Counter(a)
&gt;&gt;&gt; c2 = collections.Counter(b)
</snippet></ROW><ROW><id>17762683</id><snippet>&gt;&gt;&gt; c1['not'] + c2['not']
6
</snippet></ROW><ROW><id>17762683</id><snippet>&gt;&gt;&gt; (c1 &amp; c2) ['not']
2
</snippet></ROW><ROW><id>17762787</id><snippet>import time

def make_ticker():
    start = time.time()
    def elapsed():
        now = time.time()
        return now-start
    return elapsed
</snippet></ROW><ROW><id>17762787</id><snippet>a()</snippet></ROW><ROW><id>17762787</id><snippet>a</snippet></ROW><ROW><id>17762787</id><snippet>&gt;&gt;&gt; a = make_ticker()
&gt;&gt;&gt; a()
3.3126659393310547
&gt;&gt;&gt; a()
5.144495010375977
&gt;&gt;&gt; a()
7.766999006271362
</snippet></ROW><ROW><id>17762787</id><snippet>def make_ticker(seconds):
    start = time.time()
    def elapsed():
        now = time.time()
        return (now-start)//seconds
    return elapsed

&gt;&gt;&gt; a = make_ticker(2)
&gt;&gt;&gt; a()
0.0
&gt;&gt;&gt; a()
1.0
&gt;&gt;&gt; a()
1.0
&gt;&gt;&gt; a()
2.0
</snippet></ROW><ROW><id>17762803</id><snippet>clean</snippet></ROW><ROW><id>17762803</id><snippet>def clean(self):
    if self.cant_be_sold and self.flat_price is not None:
        raise ValidationError("flat_price must be None when cant_be_sold is True")
</snippet></ROW><ROW><id>17762918</id><snippet>self.let_change.capital(name)</snippet></ROW><ROW><id>17762918</id><snippet>self.let_change.lower(name)</snippet></ROW><ROW><id>17762918</id><snippet>&gt;&gt;&gt; print(capital(name))
ΑΝΤΩΝΗΣ
&gt;&gt;&gt; print(capital(name), name)
('\xce\x91\xce\x9d\xce\xa4\xce\xa9\xce\x9d\xce\x97\xce\xa3', '\xce\x91\xce\xbd\xcf\x84\xcf\x89\xce\xbd\xce\xb7\xcf\x82')
&gt;&gt;&gt; print(capital(name))
ΑΝΤΩΝΗΣ
&gt;&gt;&gt; print(name, name)
('\xce\x91\xce\xbd\xcf\x84\xcf\x89\xce\xbd\xce\xb7\xcf\x82', '\xce\x91\xce\xbd\xcf\x84\xcf\x89\xce\xbd\xce\xb7\xcf\x82')
&gt;&gt;&gt; print(name,)
('\xce\x91\xce\xbd\xcf\x84\xcf\x89\xce\xbd\xce\xb7\xcf\x82',)
&gt;&gt;&gt; print(name)
Αντωνης
&gt;&gt;&gt; print("%s = %s" % (name, capital(name)))
Αντωνης = ΑΝΤΩΝΗΣ
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17763057</id><snippet>values[1]</snippet></ROW><ROW><id>17763057</id><snippet>values</snippet></ROW><ROW><id>17763057</id><snippet>values</snippet></ROW><ROW><id>17763057</id><snippet>values[1] = values[:]
</snippet></ROW><ROW><id>17763149</id><snippet>zipfile</snippet></ROW><ROW><id>17763149</id><snippet>import csv
import zipfile

with zipfile.ZipFile('myarchive.zip') as archive:
    with archive.open('the_zipped_file.csv') as fin:
        reader = csv.reader(fin, ...)
        for record in reader:
            # process record.
</snippet></ROW><ROW><id>17763149</id><snippet>archive.open</snippet></ROW><ROW><id>17763149</id><snippet>csv.reader</snippet></ROW><ROW><id>17763149</id><snippet>class EncodingConverter:
    def __init__(self, fobj, encoding):
        self._iter_fobj = iter(fobj)
        self._encoding = encoding
    def __iter__(self):
        return self
    def __next__(self):
        return next(self._iter_fobj).decode(self._encoding)
</snippet></ROW><ROW><id>17763149</id><snippet>import csv
import zipfile

with zipfile.ZipFile('myarchive.zip') as archive:
    with archive.open('the_zipped_file.csv') as fin:
        reader = csv.reader(EncodingConverter(fin, 'utf-8'), ...)
        for record in reader:
            # process record.
</snippet></ROW><ROW><id>17763264</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; Edges = {(1,2):8.3 , (2,3): 4, (3,1):6}
&gt;&gt;&gt; Edges_list = [(k1,k2,v) for (k1,k2),v in Edges.items() ]
&gt;&gt;&gt; Edges_list
[(1, 2, 8.3), (3, 1, 6), (2, 3, 4)]
&gt;&gt;&gt; Edges_list.sort(key=operator.itemgetter(2))
&gt;&gt;&gt; Edges_list
[(2, 3, 4), (3, 1, 6), (1, 2, 8.3)]
</snippet></ROW><ROW><id>17763264</id><snippet>&gt;&gt;&gt; for k,v in sorted(Edges, key=Edges.get):
...     # do stuff with edges
</snippet></ROW><ROW><id>17763264</id><snippet>k</snippet></ROW><ROW><id>17763264</id><snippet>v</snippet></ROW><ROW><id>17763356</id><snippet>input</snippet></ROW><ROW><id>17763356</id><snippet>name</snippet></ROW><ROW><id>17763356</id><snippet>this is a test</snippet></ROW><ROW><id>17763356</id><snippet>from bs4 import BeautifulSoup

with open('input') as fin, open('output', 'w') as fout:
    soup = BeautifulSoup(fin.read())
    for tag in soup.find_all('input', {'name': 'this is a test'}):
        tag['name'] = tag['name'].replace(' ', '')
    fout.write(str(soup))
</snippet></ROW><ROW><id>17763356</id><snippet>input</snippet></ROW><ROW><id>17763356</id><snippet>name</snippet></ROW><ROW><id>17763356</id><snippet>for tag in soup.find_all('input', {'name': True}):
    tag['name'] = tag['name'].replace(' ', '')
</snippet></ROW><ROW><id>17763366</id><snippet>action</snippet></ROW><ROW><id>17763366</id><snippet>/search</snippet></ROW><ROW><id>17763366</id><snippet>{% url 'myapp.views.search' %}</snippet></ROW><ROW><id>17763366</id><snippet>search</snippet></ROW><ROW><id>17763366</id><snippet>views</snippet></ROW><ROW><id>17763366</id><snippet>myapp</snippet></ROW><ROW><id>17763366</id><snippet>&lt;form action="{% url 'myapp.views.search' %}"&gt;
    &lt;input type="text" name="qs" placeholder="Search"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17763366</id><snippet>def search(request):
    query = request.POST.get('qs', '')
    results = SomeModel.objects.filter(name=query) # Your search algo goes here
    return render(request, 'search_results.html', dict(results=results))
</snippet></ROW><ROW><id>17763499</id><snippet>    APP_ROOT = os.path.dirname(os.path.realpath(__file__))
    PHANTOM = '/projects/phantomjs/phantomjs.exe'
    SCRIPT = os.path.join(APP_ROOT, 'iTunesScriptSingle.js')
    params = [PHANTOM, SCRIPT, song, artist]
    child = subprocess.Popen(params, shell=True, stderr=subprocess.PIPE)
    while True:
        out = child.stderr.read(1)
        return out
        if out == '' and child.poll() != None:
            break
        if out != '':
            sys.stdout.write(out)
            sys.stdout.flush()
            return out
</snippet></ROW><ROW><id>17763505</id><snippet>"date"</snippet></ROW><ROW><id>17763505</id><snippet>"type": "date"</snippet></ROW><ROW><id>17763505</id><snippet>"date": {
    "type": "date",
    "format": "date_hour_minute_second_fraction",
    "store": "yes"
}
</snippet></ROW><ROW><id>17763505</id><snippet>"boost"</snippet></ROW><ROW><id>17763505</id><snippet>"store": "yes"</snippet></ROW><ROW><id>17763505</id><snippet>"term_vector": "with_positions_offsets"</snippet></ROW><ROW><id>17763505</id><snippet>"date"</snippet></ROW><ROW><id>17763603</id><snippet>def update(self,walls):
    old_x = self.rect.x
    new_x = self.change_x + old_x
    old_y = self.rect.y
    new_y = self.change_y + old_y
    self.rect.x = new_x
    self.rect.y = new_y
    collide = pygame.sprite.spritecollide(self,walls,False)
    if collide:
            #Hit a wall go back to old position
            self.rect.x = old_x
            self.rect.y = old_y
    #updates location of x and y coordinates
</snippet></ROW><ROW><id>17763667</id><snippet>execute_script()</snippet></ROW><ROW><id>17763667</id><snippet>for name in been_cliked</snippet></ROW><ROW><id>17763667</id><snippet>check()</snippet></ROW><ROW><id>17763667</id><snippet>radio1 = Radiobutton(app, text=name, value=name, \
                     variable=relStatus, command=check(file_name, relStatus))
</snippet></ROW><ROW><id>17763667</id><snippet>radio1 = Radiobutton(app, text=name, value=name, \
                     variable=relStatus, command=check)
</snippet></ROW><ROW><id>17763667</id><snippet>check</snippet></ROW><ROW><id>17763667</id><snippet>command=check(file_name, reStatus)
</snippet></ROW><ROW><id>17763667</id><snippet>command = lambda: check(file_name, relStatus)
</snippet></ROW><ROW><id>17763667</id><snippet>pack()</snippet></ROW><ROW><id>17763667</id><snippet>for</snippet></ROW><ROW><id>17763667</id><snippet>radio1.pack(side='top')</snippet></ROW><ROW><id>17763667</id><snippet>Click Here</snippet></ROW><ROW><id>17763667</id><snippet>command = execute_script</snippet></ROW><ROW><id>17763667</id><snippet>execute_script()</snippet></ROW><ROW><id>17763667</id><snippet>import subprocessing</snippet></ROW><ROW><id>17763667</id><snippet>yield</snippet></ROW><ROW><id>17763667</id><snippet>return</snippet></ROW><ROW><id>17763667</id><snippet>execute_script()</snippet></ROW><ROW><id>17763667</id><snippet>been_clicked</snippet></ROW><ROW><id>17763677</id><snippet>div</snippet></ROW><ROW><id>17763677</id><snippet>a</snippet></ROW><ROW><id>17763677</id><snippet>from bs4 import BeautifulSoup

example = '''
&lt;div class ="foo"&gt;
     &lt;a href ="http://example.com"&gt; &lt;/a&gt;
     &lt;a href ="http://example2.com"&gt; Title here &lt;/a&gt;
&lt;/div&gt;

&lt;div class ="foo"&gt;
     &lt;a href ="http://example3.com"&gt; &lt;/a&gt;
     &lt;a href ="http://example4.com"&gt; Title 2 here &lt;/a&gt;
'''

soup = BeautifulSoup(example)
for div in soup.findAll('div', {'class': 'foo'}):
    a = div.findAll('a')[1]
    print a.text.strip(), '=&gt;', a.attrs['href']
</snippet></ROW><ROW><id>17763718</id><snippet>import itertools

xs = 'a', 'b'
for n in range(1, len(xs)+1):
    for ys in itertools.permutations(xs, n):
        print(ys)
</snippet></ROW><ROW><id>17763718</id><snippet>('a',)
('b',)
('a', 'b')
('b', 'a')
</snippet></ROW><ROW><id>17763928</id><snippet>update</snippet></ROW><ROW><id>17763928</id><snippet>s</snippet></ROW><ROW><id>17763928</id><snippet>intersect</snippet></ROW><ROW><id>17763928</id><snippet>sets</snippet></ROW><ROW><id>17763928</id><snippet>def andSearch(inverseIndex, query):
    return set.intersection(*(set(inverseIndex[word]) for word in query))
</snippet></ROW><ROW><id>17763928</id><snippet>set</snippet></ROW><ROW><id>17763928</id><snippet>&gt;&gt;&gt; [set(ii[word]) for word in query]
[set([0, 1]), set([0, 1, 4])]
</snippet></ROW><ROW><id>17763928</id><snippet>set.intersection</snippet></ROW><ROW><id>17763928</id><snippet>s</snippet></ROW><ROW><id>17763928</id><snippet>&gt;&gt;&gt; s = set()
&gt;&gt;&gt; s.intersection([1,2,3],[2,3,4])
set([])
</snippet></ROW><ROW><id>17763928</id><snippet>set.intersection</snippet></ROW><ROW><id>17763979</id><snippet>   def cartesian_product(s, dim):
        if dim == 0:
            return set()
        res = [(e,) for e in s]
        for i in range(dim - 1):
            res = [e + (f,) for e in res for f in s]
        return set(res)

    ex = {1,2,3}

    for i in range(4):
        print cartesian_product(ex, i)
</snippet></ROW><ROW><id>17763979</id><snippet>set([])
set([(2,), (3,), (1,)])
set([(1, 2), (3, 2), (1, 3), (3, 3), (3, 1), (2, 1), (2, 3), (2, 2), (1, 1)])
set([(1, 3, 2), (1, 3, 1), (3, 3, 1), (2, 3, 1), (3, 3, 3), (2, 3, 2), (3, 3, 2), (2, 3, 3), (3, 2, 2), (3, 1, 3), (3, 2, 3), (3, 1, 2), (1, 2, 1), (3, 1, 1), (3, 2, 1), (1, 2, 2), (1, 2, 3), (1, 1, 1), (2, 1, 2), (2, 2, 3), (2, 1, 3), (2, 2, 2), (2, 2, 1), (2, 1, 1), (1, 1, 2), (1, 1, 3), (1, 3, 3)])
</snippet></ROW><ROW><id>17763998</id><snippet>HTTPFound</snippet></ROW><ROW><id>17763998</id><snippet>Exception</snippet></ROW><ROW><id>17763998</id><snippet>try ... except</snippet></ROW><ROW><id>17764040</id><snippet>form_valid()</snippet></ROW><ROW><id>17764040</id><snippet>CreateView</snippet></ROW><ROW><id>17764040</id><snippet>class Registration(CreateView):
    """
    View handles user registration.
    """
    form_class = ExampleForm
    model = Example
    template_name = 'accounts/registration.html'
    success_url = reverse_lazy('accounts:registered')

    def form_valid(self, form):
        example = form.save(commit=False)
        example.extra_field = derive_data(form.cleaned_data)
        example.save()
        return super(Registration, self).form_valid(form)
</snippet></ROW><ROW><id>17764121</id><snippet>import urllib2
from xml.etree import ElementTree as ET

Main_Page = urllib2.urlopen("http://www.sec.gov/Archives/edgar/data/75829/000144530512003029/pll-20120731.xml")
for event, (name, value) in ET.iterparse(Main_Page, ['start-ns']):
    print name, ':', value
</snippet></ROW><ROW><id>17764121</id><snippet>country : http://xbrl.sec.gov/country/2011-01-31
dei : http://xbrl.sec.gov/dei/2011-01-31
iso4217 : http://www.xbrl.org/2003/iso4217
link : http://www.xbrl.org/2003/linkbase
pll : http://www.pall.com/20120731
us-gaap : http://fasb.org/us-gaap/2011-01-31
utreg : http://www.xbrl.org/2009/utr
xbrldi : http://xbrl.org/2006/xbrldi
xbrli : http://www.xbrl.org/2003/instance
xlink : http://www.w3.org/1999/xlink
</snippet></ROW><ROW><id>17764357</id><snippet>&gt;&gt;&gt; r = re.compile(r'headers="Y\d+ i\d+"&gt;(\d+)&lt;\\/td&gt;')
&gt;&gt;&gt; r.findall(s)
['112', '113', '110', '107', '105', '95', '95', '87', '77', '74', '74']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17764454</id><snippet>rv = conn.execute('''
    insert into "engine" (name, description) 
    values ('someth-new', 'New secr')
    returning *
''')
[el for el  in rv]
</snippet></ROW><ROW><id>17764482</id><snippet>from itertools import chain
def fetch_data(*args):
    return list(chain.from_iterable(zip(*args)))

a = [ [1,2,3], [4,5,6], [7, 8, 9] ]

print fetch_data(*a)
# [1, 4, 7, 2, 5, 8, 3, 6, 9]
</snippet></ROW><ROW><id>17764482</id><snippet>return map(list, zip(*args))</snippet></ROW><ROW><id>17764482</id><snippet>[[1, 4, 7], [2, 5, 8], [3, 6, 9]]</snippet></ROW><ROW><id>17764681</id><snippet>Comp_Key, x, y, z= dict((A, B, C, [x,y,z]) for A, B, C, x, y, z in result)
</snippet></ROW><ROW><id>17764681</id><snippet>final_result = dict(((A, B, C), [x, y, z]) for A, B, C, x, y, z in result)
</snippet></ROW><ROW><id>17764681</id><snippet>final_result = {(A, B, C): [x, y, z] for A, B, C, x, y, z in result}  # more readable than first one
</snippet></ROW><ROW><id>17764681</id><snippet>final_result = dict((frozenset(A, B, C), [x, y, z]) for A, B, C, x, y, z in result)
</snippet></ROW><ROW><id>17764681</id><snippet>final_result = {frozenset(A, B, C): [x, y, z] for A, B, C, x, y, z in result}  # more readable than first one
</snippet></ROW><ROW><id>17764697</id><snippet>predict</snippet></ROW><ROW><id>17764794</id><snippet>RETURNING</snippet></ROW><ROW><id>17764794</id><snippet>INSERT INTO test (...) VALUES (...) RETURNING id
</snippet></ROW><ROW><id>17765079</id><snippet>if (x&gt;=0 and x&lt;20) or (x&gt;=40 and x&lt;60)or (x&gt;=80 and x&lt;=100):
        color = getColor(p)

      else:
        color=getColor(p2)
        setColor(newPxl, color)
</snippet></ROW><ROW><id>17765079</id><snippet>setColor</snippet></ROW><ROW><id>17765341</id><snippet>for earn in rows:
        earningsAnnouncements.append(EarningsAnnouncement(earn[0], earn[1], earn[3], dateStr, earn[3]))
</snippet></ROW><ROW><id>17765341</id><snippet>earn</snippet></ROW><ROW><id>17765341</id><snippet>tag</snippet></ROW><ROW><id>17765341</id><snippet>tr</snippet></ROW><ROW><id>17765341</id><snippet>[]</snippet></ROW><ROW><id>17765341</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup('&lt;tr class="hello"&gt;aaa&lt;/tr&gt;&lt;tr&gt;bbb&lt;/tr&gt;')
&gt;&gt;&gt; trs = soup.find_all('tr')
&gt;&gt;&gt; trs[0]['class']
['hello']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17765341</id><snippet>0</snippet></ROW><ROW><id>17765341</id><snippet>earn.contents[0]</snippet></ROW><ROW><id>17765343</id><snippet>to_datetime</snippet></ROW><ROW><id>17765343</id><snippet>In [11]: df
Out[11]:
         fullts
0  1.374087e+09
1  1.374087e+09
2  1.374087e+09
3  1.374087e+09

In [12]: pd.to_datetime(df.fullts)  # default unit is ns
Out[12]:
0   1970-01-01 00:00:01.374087067
1   1970-01-01 00:00:01.374087067
2   1970-01-01 00:00:01.374087067
3   1970-01-01 00:00:01.374087067
Name: fullts, dtype: datetime64[ns]

In [13]: pd.to_datetime(df.fullts, unit='s')
Out[13]:
0   2013-07-17 18:51:07.357464
1   2013-07-17 18:51:07.256206
2   2013-07-17 18:51:07.158231
3   2013-07-17 18:51:07.074162
Name: fullts, dtype: datetime64[ns]
</snippet></ROW><ROW><id>17765343</id><snippet>unit</snippet></ROW><ROW><id>17765343</id><snippet>(D,s,ms,us,ns)</snippet></ROW><ROW><id>17765387</id><snippet>frames1, fs1, encoder1 = audiolab.wavread('audio1.wav')
frames2, fs2, encoder2 = audiolab.wavread('audio2.wav')
mixed = frames1 + frames2

audiolab.play(mixed, fs=44100)
</snippet></ROW><ROW><id>17765387</id><snippet>mixed = frames1 / 2 + frames2 / 2
</snippet></ROW><ROW><id>17765387</id><snippet>mixed = np.zeros(max(len(frames1), len(frames2)), dtype=frames1.dtype)
mixed[:len(frames1)] += frames1 / 2
mixed[:len(frames2)] += frames2 / 2
</snippet></ROW><ROW><id>17765415</id><snippet>def onchange_invoice_date(self, cr, uid, ids, payment_term_id, date_invoice):
    res = {}
    import time
    if date_invoice != time.strftime('%Y-%m-%d'):
        due_date = # calculate you'r date here
        res['due_date'] = due_date
    return {'value': res}
</snippet></ROW><ROW><id>17765470</id><snippet>def cert_rev(self, uid, arg, ids, field_name, field_args, context=None):
</snippet></ROW><ROW><id>17765647</id><snippet>class Location:
     name="a place"
     description = "A dark place.  there are exits to the North and East"
     exits = "North","East"
     def __str__(self):
         return "%s\n%s"%(self.name,self.description)


class Player:
     current_location = "Home"
     inventory = ["Blue Key","Magic Thumbtacks"]
     health = 100
     name = "Unknown"
     def __init__(self,name):
         self.name = name

player = Player("Player 1")
loc = Location()
print loc
x = input("Input:")
</snippet></ROW><ROW><id>17765647</id><snippet>class Animal:
     voice = '...'
     def speak(self):
         return "A %s Says '%s'"%(self.__class__.__name__,self.voice)

class Dog(Animal):
     voice = "Bark, Bark"

class Duck(Animal):
     voice = "Quack, Quack"

print Dog().speak()
print Duck().speak()
</snippet></ROW><ROW><id>17765681</id><snippet>&gt;&gt;&gt; "alahambra".rindex('a')
8
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17765681</id><snippet>rfind</snippet></ROW><ROW><id>17765681</id><snippet>&gt;&gt;&gt; "alahambra".rfind('a')
8
&gt;&gt;&gt; 
&gt;&gt;&gt; ''.rfind('b')
-1
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17765879</id><snippet>[[], ['water']]</snippet></ROW><ROW><id>17765879</id><snippet>&gt;&gt;&gt; corpus = [dictionary.doc2bow(text) for text in texts]
&gt;&gt;&gt; corpus
[[], [(0, 2)]]
&gt;&gt;&gt; tfidf = models.TfidfModel(corpus)
2013-07-21 09:23:31,415 : INFO : collecting document frequencies
2013-07-21 09:23:31,415 : INFO : PROGRESS: processing document #0
2013-07-21 09:23:31,415 : INFO : calculating IDF weights for 2 documents and 1 features (1 matrix non-zeros)
&gt;&gt;&gt; corpus = [[(1,)], [(0,2)]]
&gt;&gt;&gt; tfidf = models.TfidfModel(corpus)
2013-07-21 09:24:16,452 : INFO : collecting document frequencies
2013-07-21 09:24:16,452 : INFO : PROGRESS: processing document #0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/dist-packages/gensim/models/tfidfmodel.py", line 96, in __init__
    self.initialize(corpus)
  File "/usr/local/lib/python2.7/dist-packages/gensim/models/tfidfmodel.py", line 119, in initialize
    for termid, _ in bow:
ValueError: need more than 1 value to unpack
&gt;&gt;&gt; corpus = [[(1,3)], [(0,2)]]
&gt;&gt;&gt; tfidf = models.TfidfModel(corpus)
2013-07-21 09:24:26,892 : INFO : collecting document frequencies
2013-07-21 09:24:26,892 : INFO : PROGRESS: processing document #0
2013-07-21 09:24:26,892 : INFO : calculating IDF weights for 2 documents and 2 features (2 matrix non-zeros)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17765879</id><snippet>corpus</snippet></ROW><ROW><id>17765879</id><snippet>models.TfidfModel(corpus)</snippet></ROW><ROW><id>17765924</id><snippet>tags</snippet></ROW><ROW><id>17765924</id><snippet>tags = [('album', [u'Singles']), ('artist', [u'Led Zeppelin']), ('title', [u'Kashmir'])]
print ', '.join('{} {}'.format(el[0], el[1][0]) for el in tags)
# album Singles, artist Led Zeppelin, title Kashmir
</snippet></ROW><ROW><id>17766069</id><snippet>QtCore.QObject.connect([...], self.button_clicked)
</snippet></ROW><ROW><id>17766069</id><snippet>def button_clicked(self):
    x = 100 # Generate your number here
    self.label.setText("My number: {0}".format(x))
</snippet></ROW><ROW><id>17766202</id><snippet>from collections import Counter
with open('input') as fin:
    term_counts = [Counter(line.split()) for line in fin]
</snippet></ROW><ROW><id>17766202</id><snippet>.readlines()</snippet></ROW><ROW><id>17766202</id><snippet>Counter</snippet></ROW><ROW><id>17766266</id><snippet>click='"http://www.google.com"'
wsheet.write(j,8,Formula('HYPERLINK(%s;"Link")' % click))
</snippet></ROW><ROW><id>17766266</id><snippet>click='http://www.google.com'
wsheet.write(j,8,Formula('HYPERLINK("%s";"Link")' % click))
</snippet></ROW><ROW><id>17766266</id><snippet>%</snippet></ROW><ROW><id>17766315</id><snippet>stealth</snippet></ROW><ROW><id>17766315</id><snippet>arena</snippet></ROW><ROW><id>17766315</id><snippet>start</snippet></ROW><ROW><id>17766315</id><snippet>arena(stealth)</snippet></ROW><ROW><id>17766315</id><snippet>stealth</snippet></ROW><ROW><id>17766315</id><snippet>arena</snippet></ROW><ROW><id>17766315</id><snippet>def arena(stealth):
</snippet></ROW><ROW><id>17766348</id><snippet>urllib.error.HTTPError</snippet></ROW><ROW><id>17766348</id><snippet>urllib.HTTPError</snippet></ROW><ROW><id>17766434</id><snippet>Recipe</snippet></ROW><ROW><id>17766434</id><snippet>ManyToManyField</snippet></ROW><ROW><id>17766434</id><snippet>Item</snippet></ROW><ROW><id>17766434</id><snippet>recipe</snippet></ROW><ROW><id>17766434</id><snippet>ForeignKey</snippet></ROW><ROW><id>17766434</id><snippet>item</snippet></ROW><ROW><id>17766434</id><snippet>ForeignKey</snippet></ROW><ROW><id>17766434</id><snippet>item_count</snippet></ROW><ROW><id>17766434</id><snippet>unique_together</snippet></ROW><ROW><id>17766434</id><snippet>recipe</snippet></ROW><ROW><id>17766434</id><snippet>item</snippet></ROW><ROW><id>17766622</id><snippet>print ('sup').capitalize()
</snippet></ROW><ROW><id>17766622</id><snippet>print</snippet></ROW><ROW><id>17766709</id><snippet>count</snippet></ROW><ROW><id>17766709</id><snippet>from operator import itemgetter
sorted_counts = sorted(count.iteritems(), key=itemgetter(1))
for ip, cnt in sorted_counts:
    print ip, 'had', cnt, 'results'
</snippet></ROW><ROW><id>17766718</id><snippet>object</snippet></ROW><ROW><id>17766718</id><snippet>read_csv</snippet></ROW><ROW><id>17766718</id><snippet>object</snippet></ROW><ROW><id>17766718</id><snippet>In [5]: df = read_csv(StringIO(data),sep='\s+')

In [6]: df
Out[6]: 
           id     value
id       1.00 -0.422000
value   -0.42  1.000000
percent -0.72  0.100000
played   0.03 -0.043500
money   -0.22  0.337000
other     NaN       NaN
sy      -0.03  0.000219
sz      -0.33  0.383000
</snippet></ROW><ROW><id>17766718</id><snippet>object</snippet></ROW><ROW><id>17766718</id><snippet>In [7]: df.dtypes
Out[7]: 
id       float64
value    float64
dtype: object
</snippet></ROW><ROW><id>17766718</id><snippet>object</snippet></ROW><ROW><id>17766718</id><snippet>In [8]: df.astype(object)
Out[8]: 
           id     value
id          1    -0.422
value   -0.42         1
percent -0.72       0.1
played   0.03   -0.0435
money   -0.22     0.337
other     NaN       NaN
sy      -0.03  0.000219
sz      -0.33     0.383
</snippet></ROW><ROW><id>17766718</id><snippet>astype(float)</snippet></ROW><ROW><id>17766718</id><snippet>In [9]: df.astype(object).convert_objects()
Out[9]: 
           id     value
id       1.00 -0.422000
value   -0.42  1.000000
percent -0.72  0.100000
played   0.03 -0.043500
money   -0.22  0.337000
other     NaN       NaN
sy      -0.03  0.000219
sz      -0.33  0.383000
</snippet></ROW><ROW><id>17766718</id><snippet>object</snippet></ROW><ROW><id>17766718</id><snippet>In [10]: df.astype(object).dtypes
Out[10]: 
id       object
value    object
dtype: object
</snippet></ROW><ROW><id>17766756</id><snippet>my_array = []
for i in xrange(number_of_times):
    my_array.append(raw_input('Input: '))

print my_array  # Shows you the results
</snippet></ROW><ROW><id>17766756</id><snippet>for var in my_array:
   # do something with var, which is a member of my_array.
</snippet></ROW><ROW><id>17766839</id><snippet>np.intersect1d</snippet></ROW><ROW><id>17766839</id><snippet>In [15]: np.intersect1d(a, np.intersect1d(b, c))
Out[15]: array([1, 5])
</snippet></ROW><ROW><id>17766839</id><snippet>reduce</snippet></ROW><ROW><id>17766839</id><snippet>In [16]: reduce(np.intersect1d, (a, b, c))
Out[16]: array([1, 5])
</snippet></ROW><ROW><id>17766839</id><snippet>assume_unique=True</snippet></ROW><ROW><id>17766839</id><snippet>In [21]: reduce(lambda x, y: np.intersect1d(x, y, assume_unique=True), (a, b, c))
Out[21]: array([1, 5])
</snippet></ROW><ROW><id>17767010</id><snippet>&gt;=</snippet></ROW><ROW><id>17767010</id><snippet>if( ( n &gt;= 1 ) &lt;= 10)
    printf("n is between 1 and 10\n");
</snippet></ROW><ROW><id>17767010</id><snippet>( n &gt;= 1 )</snippet></ROW><ROW><id>17767010</id><snippet>result &lt;= 10</snippet></ROW><ROW><id>17767010</id><snippet>printf("n is between 1 and 10\n");</snippet></ROW><ROW><id>17767101</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = collections.defaultdict(int)
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {})
</snippet></ROW><ROW><id>17767101</id><snippet>import</snippet></ROW><ROW><id>17767354</id><snippet>&gt;&gt;&gt; import cmath
&gt;&gt;&gt; cmath.sqrt(-1)
1j
</snippet></ROW><ROW><id>17767445</id><snippet>with open(filename, 'r') as file:
    in_memory_file = file.read()
</snippet></ROW><ROW><id>17767445</id><snippet>splitlines</snippet></ROW><ROW><id>17767445</id><snippet>spamreader = csv.reader(in_memory_file.splitlines(), delimiter=' ', quotechar='|')
for row in spamreader:
    pass
</snippet></ROW><ROW><id>17767467</id><snippet>import itertools
alluis = set(itertools.chain.from_iterable(ui.split('|') for ui in pm.lsUI()))
</snippet></ROW><ROW><id>17767467</id><snippet>set</snippet></ROW><ROW><id>17767662</id><snippet>lst = [1, 5, 4]
s = sorted(lst)    
[s.index(x) for x in lst]
=&gt; [0, 2, 1]
</snippet></ROW><ROW><id>17767662</id><snippet>lst = [10, 2, 3, 9]
s = sorted(lst)    
[s.index(x) for x in lst]
=&gt; [3, 0, 1, 2]
</snippet></ROW><ROW><id>17767733</id><snippet>pre_save</snippet></ROW><ROW><id>17767733</id><snippet>None</snippet></ROW><ROW><id>17767733</id><snippet>from django.db import models
from django.db.models.signals import pre_save
from django.dispatch import receiver

class MyModel(models.Model):
    field1 = models.TextField()
    field2 = models.IntegerField()

@receiver(pre_save, sender=MyModel)
def mymodel_save_handler(sender, instance, *args, **kwargs):
     if instance.field1 is None or instance.field1 == "":
         instance.field1 = default_value
</snippet></ROW><ROW><id>17767733</id><snippet>save</snippet></ROW><ROW><id>17767733</id><snippet>model</snippet></ROW><ROW><id>17767733</id><snippet>fields</snippet></ROW><ROW><id>17767733</id><snippet>self</snippet></ROW><ROW><id>17767733</id><snippet> def save(self, *args, **kwargs):
        if self.username is None:
              self.username = some_default_value
        super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>17767758</id><snippet>import pygame
from pygame.locals import * 
#about: pygame boilerplate

class GameMain():
    # handles intialization of game and graphics, as well as game loop
    done = False

    def __init__(self, width=800, height=600):
        """Initialize PyGame window.

        variables:
            width, height = screen width, height
            screen = main video surface, to draw on

            fps_max = framerate limit to the max fps
            limit_fps = boolean toggles capping FPS, to share cpu, or let it run free.
            now = current time in Milliseconds. ( 1000ms = 1second)
        """
        pygame.init()

        # save w, h, and screen
        self.width, self.height = width, height
        self.screen = pygame.display.set_mode(( self.width, self.height ))
        pygame.display.set_caption( "pygame tutorial code" )        

        self.sprite_bg = pygame.image.load("bg.jpg").convert()
        self.sprite_ball = pygame.image.load("ball.png").convert_alpha()


    def main_loop(self):
        """Game() main loop."""
        while not self.done:
            self.handle_events()        
            self.update()
            self.draw()

    def draw(self):
        """draw screen"""
        self.screen.fill(Color('darkgrey'))

        # draw your stuff here. sprites, gui, etc....        
        self.screen.blit(self.sprite_bg, (0,0))
        self.screen.blit(self.sprite_ball, (100,100))


        pygame.display.flip()

    def update(self):
        """physics/move guys."""
        pass

    def handle_events(self):
        """handle events: keyboard, mouse, etc."""
        events = pygame.event.get()
        kmods = pygame.key.get_mods()

        for event in events:
            if event.type == pygame.QUIT:
                self.done = True
            # event: keydown
            elif event.type == KEYDOWN:
                if event.key == K_ESCAPE: self.done = True

if __name__ == "__main__":         
    game = GameMain()
    game.main_loop()    
</snippet></ROW><ROW><id>17767812</id><snippet>output.write()</snippet></ROW><ROW><id>17767812</id><snippet>str()</snippet></ROW><ROW><id>17767812</id><snippet>output.write(str(names))
</snippet></ROW><ROW><id>17767812</id><snippet>if tet_i == None:
    output = open('output.txt','a')
    output.write(str(target[0]))
    output.close()

else:
    output = open('output.txt','a')
    names = [colors[i][0] for i in tg.tets[tet_i]]
    output.write(str(target[0]))
    output.write(str(names))
    output.write(str(bcoords))
    output.close()
</snippet></ROW><ROW><id>17767812</id><snippet>output.close()</snippet></ROW><ROW><id>17767842</id><snippet>import time
import datetime
</snippet></ROW><ROW><id>17767842</id><snippet>TempDateC = time.strptime(TempDateC, "%Y-%m-%dT%H:%M:%SZ")
</snippet></ROW><ROW><id>17767842</id><snippet>TempDateC = datetime.datetime.fromtimestamp(time.mktime(time.strptime(TempdateC, "%Y-%m-%dT%H:%M:%SZ")))
</snippet></ROW><ROW><id>17767876</id><snippet>psutil</snippet></ROW><ROW><id>17767876</id><snippet>pip install psutil</snippet></ROW><ROW><id>17767876</id><snippet>&gt;&gt;&gt; psutil.virtual_memory()
vmem(total=8374149120L, available=2081050624L, percent=75.1, used=8074080256L, free=300068864L, active=3294920704, inactive=1361616896, buffers=529895424L, cached=1251086336)
&gt;&gt;&gt; psutil.swap_memory()
swap(total=2097147904L, used=296128512L, free=1801019392L, percent=14.1, sin=304193536, sout=677842944)
</snippet></ROW><ROW><id>17767876</id><snippet>percent</snippet></ROW><ROW><id>17767881</id><snippet>data</snippet></ROW><ROW><id>17767881</id><snippet>data_files = [('mylib/data', ['mylib/data/_core.pyd']),
              ..others]
</snippet></ROW><ROW><id>17767881</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>17767881</id><snippet>include</snippet></ROW><ROW><id>17767881</id><snippet>include mylib/data/*
</snippet></ROW><ROW><id>17767891</id><snippet>migrations</snippet></ROW><ROW><id>17767967</id><snippet>lists = [[i+2, i+3, i+3, i+2, i+4] for i in range(1, 101)]
</snippet></ROW><ROW><id>17767967</id><snippet>for</snippet></ROW><ROW><id>17767967</id><snippet>lists = []
for i in range(1, 101):
    lists.append([i+2, i+3, i+3, i+2, i+4])
</snippet></ROW><ROW><id>17767967</id><snippet>x1</snippet></ROW><ROW><id>17767967</id><snippet>lists[0]</snippet></ROW><ROW><id>17767967</id><snippet>lists[3][2] - lists[6][3]
</snippet></ROW><ROW><id>17767967</id><snippet>x4[2] - x7[3]
</snippet></ROW><ROW><id>17768113</id><snippet>let test = dict [for x in [1..10] do
                     if x%2 = 0 then
                         yield x.ToString(),x] //note that this is returning a (string*int)
printfn "%d" test.["5"]
</snippet></ROW><ROW><id>17768113</id><snippet>dict</snippet></ROW><ROW><id>17768113</id><snippet>dict;;
val it : (seq&lt;'a * 'b&gt; -&gt; IDictionary&lt;'a,'b&gt;) when 'a : equality = &lt;fun:clo@3&gt;
</snippet></ROW><ROW><id>17768113</id><snippet>[for x in [1..10] do
     if x%2 = 0 then
         yield x.ToString(),x]
</snippet></ROW><ROW><id>17768113</id><snippet>dict</snippet></ROW><ROW><id>17768113</id><snippet>let sim_distance prefs person1 person2 =
    let si=dict [for item in prefs.[person1] do
                     if prefs.[person2].Contains(item) then 
                         yield item,1]
    something
</snippet></ROW><ROW><id>17768264</id><snippet>&gt;&gt;&gt; sorted(some_dict.items(), key=lambda x: x[1][0])
[('a', [0, 0, 0, 0, 0]), ('c', [800, 30, 14, 14, 0]), ('b', [1400, 50, 30, 18, 0]), ('d', [5000, 100, 30, 50, 0.1]), ('for fun', [140000, 1400, 140, 140, 0.42])]
</snippet></ROW><ROW><id>17768264</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>17768264</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; mydict = OrderedDict(sorted(some_dict.items(), key=lambda x: x[1][0]))
&gt;&gt;&gt; print(mydict)
OrderedDict([('a', [0, 0, 0, 0, 0]), ('c', [800, 30, 14, 14, 0]), ('b', [1400, 50, 30, 18, 0]), ('d', [5000, 100, 30, 50, 0.1]), ('for fun', [140000, 1400, 140, 140, 0.42])])
&gt;&gt;&gt; print(mydict['a'])
[0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>17768363</id><snippet>*</snippet></ROW><ROW><id>17768363</id><snippet>?</snippet></ROW><ROW><id>17768363</id><snippet>What's</snippet></ROW><ROW><id>17768363</id><snippet>What 's</snippet></ROW><ROW><id>17768363</id><snippet> import re
 sentence1 = "What is a CEO"
 sentence2 = "What is a geisha?"
 sentence3 = "What is ``R.E.M.``?"
 sentence4 = "What's SCUBA?"

 c1 = re.compile(r"^[wW]hat(?: is| are| was| were|\'s)(?: a| an| the)? [`']{0,2}((?:[A-Z]\.)+|[A-Z]+)[`']{0,2} ?\??")

 def test(question, regex):
     if regex.match(question):
         return "Matched!"
     else:
         return "Nope!"

 test(sentence1,c1)
 &gt; "Matched!"
 test(sentence2,c1)
 &gt; "Nope!"
 test(sentence3,c1)
 &gt; "Matched!"
 test(sentence4,c1)
 &gt; "Matched!"     
</snippet></ROW><ROW><id>17768399</id><snippet>f = open('test_text.txt','wb')
for a in range(65535):
    f.write(unichr(a).encode("utf32"))
f.close()
</snippet></ROW><ROW><id>17768436</id><snippet>itertools.combinations(my_list, 2)</snippet></ROW><ROW><id>17768498</id><snippet>property="og:image"</snippet></ROW><ROW><id>17768498</id><snippet>&lt;meta(?=\s|&gt;)(?=(?:[^&gt;=]|='[^']*'|="[^"]*"|=[^'"][^\s&gt;]*)*?\sproperty=(?:'og:image|"og:image"|og:image))(?=(?:[^&gt;=]|='[^']*'|="[^"]*"|=[^'"][^\s&gt;]*)*?\scontent=('[^']*'|"[^"]*"|[^'"][^\s&gt;]*))(?:[^'"&gt;=]*|='[^']*'|="[^"]*"|=[^'"][^\s&gt;]*)*&gt;</snippet></ROW><ROW><id>17768498</id><snippet>&lt;meta info=' content="DontFindMe" ' content="http://domain.com/path/path/file1.jpg" random_attr="blah blah"      
   property="og:image"/&gt;
&lt;meta content="http://domain.com/path/path/file2.jpg" random_attr="blah blah"      
   property="og:image"/&gt;
&lt;meta random_attr="blah blah"   property='og:image' content="foo'"   /&gt;
</snippet></ROW><ROW><id>17768498</id><snippet>[0][0] = &lt;meta info=' content="DontFindMe" ' content="http://domain.com/path/path/file1.jpg" random_attr="blah blah"      
   property="og:image"/&gt;
[0][1] = "http://domain.com/path/path/file1.jpg"


[1][0] = &lt;meta content="http://domain.com/path/path/file2.jpg" random_attr="blah blah"      
   property="og:image"/&gt;
[1][1] = "http://domain.com/path/path/file2.jpg"


[2][0] = &lt;meta random_attr="blah blah"   property='og:image' content="foo'"   /&gt;
[2][1] = "foo'"
</snippet></ROW><ROW><id>17768535</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>17768535</id><snippet>import ast

ab = [1, 2, 'a', 'b', 'c']    # a list
strab = str(ab)               # the string representation of a list
strab
=&gt; "[1, 2, 'a', 'b', 'c']"

lst = ast.literal_eval(strab) # convert string representation back to list
lst
=&gt; [1, 2, 'a', 'b', 'c']

ab == lst                     # sanity check: are they equal?
=&gt; True                       # of course they are!
</snippet></ROW><ROW><id>17768535</id><snippet>eval()</snippet></ROW><ROW><id>17768535</id><snippet>eval(strab)
=&gt; [1, 2, 'a', 'b', 'c']
</snippet></ROW><ROW><id>17768579</id><snippet>__init__</snippet></ROW><ROW><id>17768579</id><snippet>class DogImageForm(ModelForm):
    dogs = forms.ModelChoiceField(queryset=Dog.objects.none())
    class Meta:
        model = ResultsUpload

    def __init__(self, user, *args, **kwargs):
        super(DogImageForm, self).__init__(*args, **kwargs)
        self.fields['dogs'].queryset = Dog.objects.filter(user=user)
</snippet></ROW><ROW><id>17768579</id><snippet>form = DogImageForm(user=request.user)
</snippet></ROW><ROW><id>17768908</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>17768908</id><snippet>multiprocessing</snippet></ROW><ROW><id>17768908</id><snippet>os.fork</snippet></ROW><ROW><id>17768908</id><snippet>fork</snippet></ROW><ROW><id>17768908</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17768908</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>17768908</id><snippet>subprocess</snippet></ROW><ROW><id>17768908</id><snippet>proc.wait()</snippet></ROW><ROW><id>17768908</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>17768908</id><snippet>fork</snippet></ROW><ROW><id>17768908</id><snippet>os.dup</snippet></ROW><ROW><id>17768908</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>17768908</id><snippet>output = open('somefile', 'a')
def somefunc(arg):
    ... do some computation, etc ...
    output.write(result)
pool = multiprocessing.Pool()
pool.map(somefunc, iterable)
</snippet></ROW><ROW><id>17768908</id><snippet>output.fileno()</snippet></ROW><ROW><id>17768908</id><snippet>Pool</snippet></ROW><ROW><id>17768908</id><snippet>initializer</snippet></ROW><ROW><id>17768908</id><snippet>proc.stdin.close</snippet></ROW><ROW><id>17768908</id><snippet>os.close</snippet></ROW><ROW><id>17768935</id><snippet>&gt;&gt;&gt; datetime.date(2013, 7, 15) &lt; datetime.date(2013, 7, 16)
True
&gt;&gt;&gt; datetime.date(2013, 7, 15) &lt;= datetime.date(2013, 7, 16)
True
&gt;&gt;&gt; datetime.date(2013, 7, 15) &gt; datetime.date(2013, 7, 16)
False
</snippet></ROW><ROW><id>17768935</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.date(2013, 7, 15) # datetime.date.today()
&gt;&gt;&gt; [d for d in dates if d &gt;= today]
[datetime.date(2013, 7, 15), datetime.date(2013, 7, 18), datetime.date(2013, 7, 22), datetime.date(2013, 7, 25)]
</snippet></ROW><ROW><id>17768993</id><snippet>&gt;&gt;&gt; def f(user, *args, **kwargs): pass
...
&gt;&gt;&gt; f('post', user='user')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() got multiple values for keyword argument 'user'
&gt;&gt;&gt; f('user', 'post')
</snippet></ROW><ROW><id>17768993</id><snippet>form = DogImageForm(request.user, request.POST, request.FILES, instance=instance)
</snippet></ROW><ROW><id>17769160</id><snippet>pdb_data = []
for line in open('input.txt'):
    line = line.split()
    if len(line)&lt;8:
        pre = line[0:2]
        post = line[3:]
        col3 = line[2][:-4]
        col4 = line[2][-4:]
        new_line = pre+[col3,col4]+post
        pdb_data.append(new_line)
    else:
        pdb_data.append(line)
</snippet></ROW><ROW><id>17769162</id><snippet>libpd_message('recvr', 'hellooo')
</snippet></ROW><ROW><id>17769162</id><snippet>libpd_float('recvr', 323.290)
</snippet></ROW><ROW><id>17769165</id><snippet>setAuthor</snippet></ROW><ROW><id>17769165</id><snippet>set_author</snippet></ROW><ROW><id>17769165</id><snippet>published_country</snippet></ROW><ROW><id>17769165</id><snippet>PublishedCountry</snippet></ROW><ROW><id>17769165</id><snippet>findAll</snippet></ROW><ROW><id>17769165</id><snippet>find_all</snippet></ROW><ROW><id>17769165</id><snippet>if len(resultNumber) == 0 : return 0
</snippet></ROW><ROW><id>17769165</id><snippet>if len(result_number) == 0:
    return 0
</snippet></ROW><ROW><id>17769165</id><snippet>if not result_number:
    return 0
</snippet></ROW><ROW><id>17769165</id><snippet>SoupStrainer</snippet></ROW><ROW><id>17769165</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17769165</id><snippet>SoupStrainer</snippet></ROW><ROW><id>17769165</id><snippet>parse_only</snippet></ROW><ROW><id>17769165</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17769165</id><snippet>decompose</snippet></ROW><ROW><id>17769165</id><snippet>decompose</snippet></ROW><ROW><id>17769165</id><snippet>Book.__init__</snippet></ROW><ROW><id>17769165</id><snippet>export</snippet></ROW><ROW><id>17769165</id><snippet>export</snippet></ROW><ROW><id>17769165</id><snippet>for book in scrape_books():
    book.export()
</snippet></ROW><ROW><id>17769165</id><snippet>os.path</snippet></ROW><ROW><id>17769165</id><snippet>destinationDirectory</snippet></ROW><ROW><id>17769165</id><snippet>os.path.join</snippet></ROW><ROW><id>17769165</id><snippet>&gt;&gt;&gt; os.path.join("/Users/robbie/Test/", "USA")
'/Users/robbie/Test/USA'
&gt;&gt;&gt; os.path.join("/Users/robbie/Test", "USA")  # still works!
'/Users/robbie/Test/USA'
&gt;&gt;&gt; # or say we were on Windows:
&gt;&gt;&gt; os.path.join(r"C:\Documents and Settings\robbie\Test", "USA")
'C:\\Documents and Settings\\robbie\\Test\\USA'
</snippet></ROW><ROW><id>17769165</id><snippet>attrs={"class":...}</snippet></ROW><ROW><id>17769165</id><snippet>class_=...</snippet></ROW><ROW><id>17769165</id><snippet>class_</snippet></ROW><ROW><id>17769165</id><snippet>attrs={"class":...}</snippet></ROW><ROW><id>17769190</id><snippet>from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome()
email = raw_input("Email: ")
password = raw_input("Password: ")
person =raw_input("Enter the messages link for the one you want to spam\n\
Example: https://www.facebook.com/messages/someone: ")
driver.get("http://www.facebook.com")
elem = driver.find_element_by_id("email")
elem.send_keys(email)
elem = driver.find_element_by_id("pass")
elem.send_keys(password)
elem.send_keys(Keys.RETURN)
driver.get("https://facebook.com/messages/"+person)
elem = driver.find_element_by_css_selector("div textarea.uiTextareaNoResize")
elem.send_keys("python test")
elem.send_keys(Keys.RETURN)
</snippet></ROW><ROW><id>17769302</id><snippet>import urllib2
out = []
for url in ["http://stackoverflow.com/", "http://stackoverflow.com/questions/"]:
    try:
        connection = urllib2.urlopen(url)
        out.append(connection.getcode())
        connection.close()
    except urllib2.HTTPError, e:
        out.append(e.getcode())
print out
</snippet></ROW><ROW><id>17769459</id><snippet>local</snippet></ROW><ROW><id>17769459</id><snippet>communicate()</snippet></ROW><ROW><id>17769459</id><snippet>warn</snippet></ROW><ROW><id>17769459</id><snippet>abort</snippet></ROW><ROW><id>17769459</id><snippet>def init():
    with settings(warn_only=True):
        local('mkdir ./www')
</snippet></ROW><ROW><id>17769459</id><snippet>abort</snippet></ROW><ROW><id>17769459</id><snippet> 10 def abort(msg):
 21     from fabric.state import output
 22     if output.aborts:
 23         sys.stderr.write("\nFatal error: %s\n" % str(msg))
 24         sys.stderr.write("\nAborting.\n")
 25     sys.exit(1)
</snippet></ROW><ROW><id>17769459</id><snippet>settings</snippet></ROW><ROW><id>17769518</id><snippet>nonzero = norms &gt; 0
x[nonzero] /= norms[nonzero]
</snippet></ROW><ROW><id>17769525</id><snippet>import json
...
data_out = [eyeSize, displacementX, ...]
print json.dumps(data_out)
</snippet></ROW><ROW><id>17769525</id><snippet>exec("python myscript.py",$return);
echo $return;
</snippet></ROW><ROW><id>17769566</id><snippet>join()</snippet></ROW><ROW><id>17769566</id><snippet>password</snippet></ROW><ROW><id>17769566</id><snippet>password.join(thelist[0])
</snippet></ROW><ROW><id>17769566</id><snippet>password = password.join(thelist[0])
</snippet></ROW><ROW><id>17769566</id><snippet>password</snippet></ROW><ROW><id>17769566</id><snippet>''</snippet></ROW><ROW><id>17769566</id><snippet>join</snippet></ROW><ROW><id>17769566</id><snippet>password += auc[0]</snippet></ROW><ROW><id>17769566</id><snippet>string</snippet></ROW><ROW><id>17769566</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; print list(string.lowercase)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
&gt;&gt;&gt; print list(string.uppercase)
['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
&gt;&gt;&gt; print list(string.punctuation)
['!', '"', '#', '$', '%', '&amp;', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '&lt;', '=', '&gt;', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~']
&gt;&gt;&gt; print list(string.digits)
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
</snippet></ROW><ROW><id>17769566</id><snippet>random.choice()</snippet></ROW><ROW><id>17769566</id><snippet>for x in pattern:
    if x == "A":
        password += random.choice(auc)
    elif ...
</snippet></ROW><ROW><id>17769972</id><snippet>from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np
# setup Lambert Conformal basemap.
m = Basemap(width=12000000,height=9000000,projection='lcc',
            resolution='c',lat_1=45.,lat_2=55,lat_0=50,lon_0=-107.)
# draw a boundary around the map, fill the background.
# this background will end up being the ocean color, since
# the continents will be drawn on top.
m.drawmapboundary(fill_color='aqua')
# fill continents, set lake color same as ocean color.
m.fillcontinents(color='coral',lake_color='aqua')
# draw parallels and meridians.
# label parallels on right and top
# meridians on bottom and left
parallels = np.arange(0.,81,10.)
# labels = [left,right,top,bottom]
m.drawparallels(parallels,labels=[False,True,True,False])
meridians = np.arange(10.,351.,20.)
m.drawmeridians(meridians,labels=[True,False,False,True])
# plot blue dot on Boulder, colorado and label it as such.
lon, lat = -104.237, 40.125 # Location of Boulder
# convert to map projection coords.
# Note that lon,lat can be scalars, lists or numpy arrays.
xpt,ypt = m(lon,lat)
# convert back to lat/lon
lonpt, latpt = m(xpt,ypt,inverse=True)
m.plot(xpt,ypt,'bo')  # plot a blue dot there
# put some text next to the dot, offset a little bit
# (the offset is in map projection coordinates)
plt.text(xpt+100000,ypt+100000,'Boulder (%5.1fW,%3.1fN)' % (lonpt,latpt))
plt.show()
</snippet></ROW><ROW><id>17770058</id><snippet>import urllib
from bs4 import*

html = urllib.urlopen('myurl.com').read()
soup = BeautifulSoup(html)
text = soup.get_text()
print text
</snippet></ROW><ROW><id>17770101</id><snippet>if</snippet></ROW><ROW><id>17770101</id><snippet>if (InputKey[0][0] == 1) or 2: 
</snippet></ROW><ROW><id>17770101</id><snippet>if (InputKey[0][0] == 1) or True: 
</snippet></ROW><ROW><id>17770101</id><snippet>True</snippet></ROW><ROW><id>17770101</id><snippet>if InputKey[0][0] == 1 or InputKey[0][0] == 2:
</snippet></ROW><ROW><id>17770101</id><snippet>if InputKey[0][0] in (1, 2):
</snippet></ROW><ROW><id>17770101</id><snippet>InputKey[0][0]</snippet></ROW><ROW><id>17770101</id><snippet>string</snippet></ROW><ROW><id>17770101</id><snippet>int</snippet></ROW><ROW><id>17770101</id><snippet>int(InputType[0][0])</snippet></ROW><ROW><id>17770101</id><snippet>1</snippet></ROW><ROW><id>17770101</id><snippet>2</snippet></ROW><ROW><id>17770101</id><snippet>for</snippet></ROW><ROW><id>17770101</id><snippet>for line in input_key.readlines():         
    # You don't need list comprehension. `line.split()` itself gives a list
    InputKey.append(line.split())  
</snippet></ROW><ROW><id>17770320</id><snippet>probdecay</snippet></ROW><ROW><id>17770320</id><snippet>substance</snippet></ROW><ROW><id>17770320</id><snippet>def __init__(self, halflife):
    self.probdecay = 1 - 0.5 ** (1.0 / halflife)
    ...
</snippet></ROW><ROW><id>17770485</id><snippet>https://github.com/kennethreitz/requests/blob/master/requests/__init__.py</snippet></ROW><ROW><id>17770485</id><snippet>__init__.py</snippet></ROW><ROW><id>17770485</id><snippet>from requests import ...</snippet></ROW><ROW><id>17770485</id><snippet>import requests</snippet></ROW><ROW><id>17770930</id><snippet>W</snippet></ROW><ROW><id>17770930</id><snippet>X</snippet></ROW><ROW><id>17770930</id><snippet>W</snippet></ROW><ROW><id>17770930</id><snippet>W</snippet></ROW><ROW><id>17770930</id><snippet>X</snippet></ROW><ROW><id>17770930</id><snippet>SequenceMatcher.ratio()</snippet></ROW><ROW><id>17770930</id><snippet>SequenceMatcher.ratio()</snippet></ROW><ROW><id>17770930</id><snippet>W</snippet></ROW><ROW><id>17770930</id><snippet>SequenceMatcher.ratio()</snippet></ROW><ROW><id>17770930</id><snippet>SequenceMatcher.ratio()</snippet></ROW><ROW><id>17770930</id><snippet>W</snippet></ROW><ROW><id>17770930</id><snippet>X</snippet></ROW><ROW><id>17770968</id><snippet>PhotoImage</snippet></ROW><ROW><id>17770968</id><snippet>canvas.create_image</snippet></ROW><ROW><id>17770968</id><snippet>global</snippet></ROW><ROW><id>17770968</id><snippet>global game
game = PhotoImage(file=imagelist[randomimage])
images = canvas.create_image(30, 65, image = game, anchor = NW)
</snippet></ROW><ROW><id>17770968</id><snippet>event.x &gt;853 and event.x &lt;957</snippet></ROW><ROW><id>17770968</id><snippet>853 &lt; event.x &lt; 957</snippet></ROW><ROW><id>17770968</id><snippet>imagelist</snippet></ROW><ROW><id>17770968</id><snippet>["%d.gif" % (i+1) for i in range(50)]</snippet></ROW><ROW><id>17770968</id><snippet>after</snippet></ROW><ROW><id>17770968</id><snippet>after(1000, ...)</snippet></ROW><ROW><id>17770968</id><snippet>while pressed == 8:</snippet></ROW><ROW><id>17770968</id><snippet>pressed</snippet></ROW><ROW><id>17770968</id><snippet>''</snippet></ROW><ROW><id>17770968</id><snippet>class GameFrame(Frame)</snippet></ROW><ROW><id>17770968</id><snippet>global</snippet></ROW><ROW><id>17770968</id><snippet>self</snippet></ROW><ROW><id>17770968</id><snippet>PhotoImage</snippet></ROW><ROW><id>17770968</id><snippet>Frame</snippet></ROW><ROW><id>17771077</id><snippet>start_value = 10;
end_value = 20;
for i in range(start_value, end_value):
  print(i)
</snippet></ROW><ROW><id>17771077</id><snippet>start_value = 10;
end_value = 20;
for i in xrange(start_value, end_value):
  print i
</snippet></ROW><ROW><id>17771143</id><snippet>def ensure_dir(f):
    d = os.path.dirname(f)
    if not os.path.exists(d):
        os.makedirs(d)
</snippet></ROW><ROW><id>17771147</id><snippet>&gt;&gt;&gt; print = 5
&gt;&gt;&gt; print = __builtins__.print
&gt;&gt;&gt; print("hello")
hello
</snippet></ROW><ROW><id>17771177</id><snippet>def split_tasks(lst, n):
    # sorts the list from largest to smallest
    sortedlst = sorted(lst, key=lambda x: x[1], reverse=True)
    # dict storing the total time for each set of tasks
    totals = dict((x, 0) for x in range(n))
    outlst = [[] for x in range(n)]
    for v in sortedlst:
        # since each v[1] is getting smaller, the place it belongs should
        # be the outlst with the minimum total time
        m = min(totals, key=totals.get)
        totals[m] += v[1]
        outlst[m].append(v)
    return outlst
</snippet></ROW><ROW><id>17771177</id><snippet>[[['file_A', 501]], [['file_B', 350]], [['file_C', 220], ['file_D', 100]]]
</snippet></ROW><ROW><id>17771872</id><snippet>ax = plt.gca()

# Make axes occupy whole canvas
ax.set_position([0,0,1,1])

# Same scale on x- and y-axes, change x- and y-limits to keep
# axes ratio and position
# 'equal' gives same scaling on x- and y-axes
# 'datalim' changes the xlim and ylim to fit the axes inside its boundary
ax.set_aspect('equal', 'datalim')

ax.xaxis.set_visible(False)
ax.yaxis.set_visible(False)
[spine.set_visible(False) for spine in ax.spines.values()]
</snippet></ROW><ROW><id>17772070</id><snippet>&gt;&gt;&gt; timeit.timeit("sum([1 for i in permutations([1, 2, 3, 4, 5])])", setup="from itertools import permutations", number=1000)
0.0829811965812155

&gt;&gt;&gt; timeit.timeit("sum([1 for i in perms([1, 2, 3, 4, 5])])", setup="from test import perms", number=1000)
0.4672438746438843
</snippet></ROW><ROW><id>17772074</id><snippet>int32</snippet></ROW><ROW><id>17772074</id><snippet>int</snippet></ROW><ROW><id>17772074</id><snippet>int</snippet></ROW><ROW><id>17772074</id><snippet>int</snippet></ROW><ROW><id>17772074</id><snippet>ZeroDivisionError</snippet></ROW><ROW><id>17772074</id><snippet>SNR[ii]/10
</snippet></ROW><ROW><id>17772074</id><snippet>In [15]: SNR
Out[15]: array([ 6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])

In [16]: SNR/10
Out[16]: array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2])
</snippet></ROW><ROW><id>17772074</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>17772074</id><snippet>variance = Es*10**(-SNR[ii]/10.0)
</snippet></ROW><ROW><id>17772074</id><snippet>0.063095734448</snippet></ROW><ROW><id>17772074</id><snippet>int</snippet></ROW><ROW><id>17772074</id><snippet>int</snippet></ROW><ROW><id>17772074</id><snippet>import numpy as np
SNR = np.arange(6, 23)
BER = np.zeros(len(SNR))
print(BER)
Es = 10

variance = Es * 10 ** (-SNR / 10.0)
std_dev = np.sqrt(variance / 2)
noise = (np.random.randn(len(SNR)) + 1j * np.random.randn(len(SNR))) * std_dev
S_noisy = SNR + noise
print(variance[-1])
</snippet></ROW><ROW><id>17772284</id><snippet>dict.items</snippet></ROW><ROW><id>17772284</id><snippet>for key, value in</snippet></ROW><ROW><id>17772284</id><snippet>(1, 2)</snippet></ROW><ROW><id>17772284</id><snippet>1</snippet></ROW><ROW><id>17772284</id><snippet>2</snippet></ROW><ROW><id>17772298</id><snippet>import sys
from pygments import highlight
from pygments.formatters.terminal import TerminalFormatter
from pygments.lexer import RegexLexer
from pygments.token import Token


class ArithmeticLexer(RegexLexer):
    tokens = {
        'root': [
            (r'[ \n]', Token.Whitespace),
            (r'\d+', Token.Number),
            (r'\+', Token.Plus),
            (r'-', Token.Minus),
            (r'\*', Token.Multiply),
            (r'/', Token.Division),
        ]
    }

COLOR_SCHEME = {
    Token.Whitespace: ('', ''),
    Token.Number: ('darkgreen', 'green'),
    Token.Plus: ('darkred', 'red'),
    Token.Minus: ('darkblue', 'blue'),
    Token.Multiply: ('darkyellow', 'yellow'),
    Token.Division: ('brown', 'fushia'),
}

if __name__ == '__main__':
    with open(sys.argv[1], 'rb') as f:
        for line in f:
            line = highlight(line, ArithmeticLexer(), TerminalFormatter(colorscheme=COLOR_SCHEME))
            print line.strip()
</snippet></ROW><ROW><id>17772298</id><snippet>&lt;script_name&gt; &lt;input_file_name&gt;</snippet></ROW><ROW><id>17772298</id><snippet>COLOR_SCHEME</snippet></ROW><ROW><id>17772298</id><snippet>(lightscheme, darkscheme)</snippet></ROW><ROW><id>17772298</id><snippet>TerminalFormatter</snippet></ROW><ROW><id>17772298</id><snippet>lightscheme</snippet></ROW><ROW><id>17772337</id><snippet>&gt;&gt;&gt; color = {'white' :'\033[1;37m', 'yellow':'\033[1;33m', 'off' : '\033[0;0m'}
&gt;&gt;&gt; print color['white'] + 'string' + color['off']
string   #this string is white in color
&gt;&gt;&gt; print color['yellow'] + 'string' + color['off']
string #this string is yellow in color
&gt;&gt;&gt; color['yellow'] = '\033[1,33m' #incorrect color code - using a , character instead of ;
&gt;&gt;&gt; print color['yellow'] + 'string' + color['off']
string   #prints the string in console default color i.e. not in yellow color
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17772565</id><snippet>import pandas as pd
source = pd.DataFrame({'Country' : ['USA', 'USA', 'Russia','USA'], 
                  'City' : ['New-York1', 'New-York', 'Sankt-Petersburg', 'New-York']})

#trim column value selecting first two symbols
def s_trim(x):
    return x.str[:2]

#make new column from two selecting first two symbols from each
def s_trim_concat(x,y):
    return '%s-%s' % (x[:2],y[:2])

features = [
    ('trim',['Country'],s_trim),
    ('trim1',['Country','City'],s_trim_concat),
    ('trim2',['City','Country'],s_trim_concat)
    ]

for feature_name, columns, func in features:
    source[feature_name] = source[columns].apply(
        func if len(columns) == 1 
        else lambda x: func(x[0],x[1]), axis=1)
print(source)
</snippet></ROW><ROW><id>17772866</id><snippet>raise</snippet></ROW><ROW><id>17772866</id><snippet>Exception</snippet></ROW><ROW><id>17772866</id><snippet>try:
    doSomething()
except:  # except by itself catches any exception
         # better to except a specific error though
    if debug:  # use implicit truth check of `if`
        raise  # re-raise the caught exception
</snippet></ROW><ROW><id>17772898</id><snippet>str</snippet></ROW><ROW><id>17772898</id><snippet>class Foo(object):
    def __str__(self):
        raise TypeError('Can not by stringified')


foo = Foo()
b = str(foo)
</snippet></ROW><ROW><id>17772898</id><snippet>TypeError</snippet></ROW><ROW><id>17772924</id><snippet>path</snippet></ROW><ROW><id>17772924</id><snippet>elif</snippet></ROW><ROW><id>17772924</id><snippet>None</snippet></ROW><ROW><id>17772924</id><snippet>None == ''</snippet></ROW><ROW><id>17772924</id><snippet>False</snippet></ROW><ROW><id>17772924</id><snippet>params.dir</snippet></ROW><ROW><id>17772924</id><snippet>None</snippet></ROW><ROW><id>17772924</id><snippet>params.dir</snippet></ROW><ROW><id>17772924</id><snippet>None</snippet></ROW><ROW><id>17773024</id><snippet>Cmd-B</snippet></ROW><ROW><id>17773024</id><snippet>char_size = 80
pieces = [my_long_str[x:x+char_size] for x in range(0,len(my_long_str),char_size)]

for piece in pieces:
    print piece
</snippet></ROW><ROW><id>17773024</id><snippet>pprint</snippet></ROW><ROW><id>17773024</id><snippet>pprint.pprint</snippet></ROW><ROW><id>17773259</id><snippet>itemgetter</snippet></ROW><ROW><id>17773259</id><snippet>from operator import itemgetter

categories = map(itemgetter('name'), things)
</snippet></ROW><ROW><id>17773294</id><snippet>_initiallist</snippet></ROW><ROW><id>17773294</id><snippet>_initiallist</snippet></ROW><ROW><id>17773294</id><snippet>_initiallist</snippet></ROW><ROW><id>17773294</id><snippet>_initiallist</snippet></ROW><ROW><id>17773294</id><snippet>_initiallist</snippet></ROW><ROW><id>17773294</id><snippet>__init__</snippet></ROW><ROW><id>17773294</id><snippet>_initiallist</snippet></ROW><ROW><id>17773294</id><snippet>class SharedObject(object):

    def __init__(self, number):
        self._inputnumber = number
        self._initiallist = []


class Client(object):

    def __init__(self, obj, current_line, new_line):
        self._sharedobj = obj
        self._thisline = current_line
        self._gohere = new_line

    def execute(self):
        self._sharedobj._initiallist.append(self._thisline + 1)
</snippet></ROW><ROW><id>17773347</id><snippet>for</snippet></ROW><ROW><id>17773347</id><snippet>&gt;&gt;&gt; def print_multiplication_table(n):
        for i in xrange(1, n+1):
            for j in xrange(1, n+1):
                print "{}x{}={}".format(i, j, i*j)


&gt;&gt;&gt; print_multiplication_table(2)
1x1=1
1x2=2
2x1=2
2x2=4
</snippet></ROW><ROW><id>17773347</id><snippet>while</snippet></ROW><ROW><id>17773347</id><snippet>count</snippet></ROW><ROW><id>17773347</id><snippet>10x1, 10x2, 10x3...</snippet></ROW><ROW><id>17773480</id><snippet>0, -1, -2...</snippet></ROW><ROW><id>17773480</id><snippet>-len(lst)</snippet></ROW><ROW><id>17773480</id><snippet>&gt;&gt;&gt; test = [1, 2, 3]
&gt;&gt;&gt; test[-1]
3
&gt;&gt;&gt; test[-2]
2
&gt;&gt;&gt; test[-4]

Traceback (most recent call last):
  File "&lt;pyshell#75&gt;", line 1, in &lt;module&gt;
    test[-4]
IndexError: list index out of range
</snippet></ROW><ROW><id>17773480</id><snippet>len(lst) - 1</snippet></ROW><ROW><id>17773480</id><snippet>index = len(test) - 1
while index &gt;=0: 
    # Do Something
</snippet></ROW><ROW><id>17773480</id><snippet>index</snippet></ROW><ROW><id>17773480</id><snippet>0</snippet></ROW><ROW><id>17773480</id><snippet>while</snippet></ROW><ROW><id>17773480</id><snippet>while index &gt; -len(fruit):
    # Do Something
</snippet></ROW><ROW><id>17773480</id><snippet>for</snippet></ROW><ROW><id>17773480</id><snippet>&gt;&gt;&gt; testList = [1, 2, 3]
&gt;&gt;&gt; for i in testList[::-1]:
        print i


3
2
1
</snippet></ROW><ROW><id>17773480</id><snippet>testList[::-1]</snippet></ROW><ROW><id>17773584</id><snippet>def sub_partition(array, start, end, idx_pivot):

    'returns the position where the pivot winds up'

    if not (start &lt;= idx_pivot &lt;= end):
        raise ValueError('idx pivot must be between start and end')

    array[start], array[idx_pivot] = array[idx_pivot], array[start]
    pivot = array[start]
    i = start + 1
    j = start + 1

    while j &lt;= end:
        if array[j] &lt;= pivot:
            array[j], array[i] = array[i], array[j]
            i += 1
        j += 1

    array[start], array[i - 1] = array[i - 1], array[start]
    return i - 1

def quicksort(array, start=0, end=None):

    if end is None:
        end = len(array) - 1

    if end - start &lt; 1:
        return

    idx_pivot = random.randint(start, end)
    i = sub_partition(array, start, end, idx_pivot)
    #print array, i, idx_pivot
    quicksort(array, start, i - 1)
    quicksort(array, i + 1, end)
</snippet></ROW><ROW><id>17773600</id><snippet>None</snippet></ROW><ROW><id>17773600</id><snippet>None</snippet></ROW><ROW><id>17773600</id><snippet>move()</snippet></ROW><ROW><id>17773600</id><snippet>&gt;&gt;&gt; def testFunc(num):
        num += 2

&gt;&gt;&gt; print testFunc(4)
None
</snippet></ROW><ROW><id>17773600</id><snippet>return</snippet></ROW><ROW><id>17773600</id><snippet>rect</snippet></ROW><ROW><id>17773600</id><snippet>def addRect(x, y, width, height, color, surface):
    rect = pygame.Rect(x, y, width, height)
    pygame.draw.rect(surface, color, rect)
    pygame.display.flip()
    return rect
</snippet></ROW><ROW><id>17774030</id><snippet>$ openssl pkcs12 -in xxxxx.p12 -nodes -nocerts &gt; privatekey.pem
</snippet></ROW><ROW><id>17774093</id><snippet>copy</snippet></ROW><ROW><id>17774189</id><snippet>port = int(os.environ.get("PORT", 5000))
app.run(host='0.0.0.0', port=port)
</snippet></ROW><ROW><id>17774430</id><snippet>[[letterlist.append(x) for x in y if x not in letterlist] for y in wordlist]</snippet></ROW><ROW><id>17774430</id><snippet>list(set([[letterlist.append(x) for x in y if x not in letterlist] for y in wordlist]))</snippet></ROW><ROW><id>17774430</id><snippet>list(set(''.join(wordlist)))</snippet></ROW><ROW><id>17774466</id><snippet>    &lt;?PHP
        if(($Players = $Query-&gt;GetPlayers()) !== false) {
            foreach($Players as $Player) {
            echo "&lt;img src=https://minotar.net/avatar/".$Player."/74.png&gt;
                  &lt;p&gt;".$Player."&lt;/p&gt;";
            }
        } 
    ?&gt;
</snippet></ROW><ROW><id>17774577</id><snippet>&gt;&gt;&gt; df
         Date   Open   High    Low  Close   Volume  Adj Close
0  2013-07-08  76.91  77.81  76.85  77.04  5106200      77.04
1  2013-07-00  77.04  79.81  71.81  72.87  1920834      77.04
2  2013-07-10  72.87  99.81  64.23  93.23  2934843      77.04
</snippet></ROW><ROW><id>17774577</id><snippet>&gt;&gt;&gt; df["Test"] = df[["Open", "Close"]].max(axis=1)
&gt;&gt;&gt; df
         Date   Open   High    Low  Close   Volume  Adj Close   Test
0  2013-07-08  76.91  77.81  76.85  77.04  5106200      77.04  77.04
1  2013-07-00  77.04  79.81  71.81  72.87  1920834      77.04  77.04
2  2013-07-10  72.87  99.81  64.23  93.23  2934843      77.04  93.23
</snippet></ROW><ROW><id>17774577</id><snippet>df.ix[:,["Open", "Close"]].max(axis=1)</snippet></ROW><ROW><id>17774577</id><snippet>.apply</snippet></ROW><ROW><id>17774577</id><snippet>&gt;&gt;&gt; df["Test"] = df.apply(lambda row: max(row["Open"], row["Close"]), axis=1)
&gt;&gt;&gt; df
         Date   Open   High    Low  Close   Volume  Adj Close   Test
0  2013-07-08  76.91  77.81  76.85  77.04  5106200      77.04  77.04
1  2013-07-00  77.04  79.81  71.81  72.87  1920834      77.04  77.04
2  2013-07-10  72.87  99.81  64.23  93.23  2934843      77.04  93.23
</snippet></ROW><ROW><id>17774577</id><snippet>&gt;&gt;&gt; df["Test"] = np.maximum(df["Open"], df["Close"])
&gt;&gt;&gt; df
         Date   Open   High    Low  Close   Volume  Adj Close   Test
0  2013-07-08  76.91  77.81  76.85  77.04  5106200      77.04  77.04
1  2013-07-00  77.04  79.81  71.81  72.87  1920834      77.04  77.04
2  2013-07-10  72.87  99.81  64.23  93.23  2934843      77.04  93.23
</snippet></ROW><ROW><id>17774577</id><snippet>if/else</snippet></ROW><ROW><id>17774577</id><snippet>if (something)</snippet></ROW><ROW><id>17774577</id><snippet>something</snippet></ROW><ROW><id>17774577</id><snippet>bool</snippet></ROW><ROW><id>17774582</id><snippet>t.value1 = 1
t.value2 = 2
t.save()
</snippet></ROW><ROW><id>17774582</id><snippet>TheForm.objects.filter(id=1).update(value=1, value2=2)
</snippet></ROW><ROW><id>17774582</id><snippet>**kwargs</snippet></ROW><ROW><id>17774733</id><snippet>myenv = parser.parse_args()
</snippet></ROW><ROW><id>17774733</id><snippet>myenv = parser.parse_args().myenv
</snippet></ROW><ROW><id>17774899</id><snippet>coords</snippet></ROW><ROW><id>17774899</id><snippet>slices = tuple(slice(None if j-1 &lt;= 0 else j-1, j+2, 1) for j in coords)
</snippet></ROW><ROW><id>17774899</id><snippet>j-2</snippet></ROW><ROW><id>17774899</id><snippet>j+3</snippet></ROW><ROW><id>17774899</id><snippet>G[slices] = np.gradient(N[slices])
</snippet></ROW><ROW><id>17775117</id><snippet>Response</snippet></ROW><ROW><id>17775117</id><snippet>Response</snippet></ROW><ROW><id>17775351</id><snippet>txt</snippet></ROW><ROW><id>17775351</id><snippet>453     Sperving_Bearing    9900
1342    Panametric_Fan      23400
9480    Converter_Exchange  93859
</snippet></ROW><ROW><id>17775351</id><snippet>&gt;&gt;&gt; newDict = {}
&gt;&gt;&gt; with open('testFile.txt', 'r') as f:
        for line in f:
            splitLine = line.split()
            newDict[int(splitLine[0])] = ",".join(splitLine[1:])


&gt;&gt;&gt; newDict
{9480: 'Converter_Exchange,93859', 453: 'Sperving_Bearing,9900', 1342: 'Panametric_Fan,23400'}
</snippet></ROW><ROW><id>17775351</id><snippet>----...</snippet></ROW><ROW><id>17775351</id><snippet>line.startswith('-----')</snippet></ROW><ROW><id>17775351</id><snippet>&gt;&gt;&gt; testDict = {"Part no.": "Description,Price"}
&gt;&gt;&gt; with open('testFile.txt', 'r') as f:
        _ = next(f)
        _ = next(f)
        for line in f:
            splitLine = line.split()
            testDict[int(splitLine[0])] = ",".join(splitLine[1:])       
&gt;&gt;&gt; testDict
{9480: 'Converter_Exchange,93859', 'Part no.': 'Description,Price', 453: 'Sperving_Bearing,9900', 1342: 'Panametric_Fan,23400'}
</snippet></ROW><ROW><id>17775351</id><snippet>testDict</snippet></ROW><ROW><id>17775457</id><snippet>cmath</snippet></ROW><ROW><id>17775457</id><snippet>BER2=(3/8)*erfc(sqrt(ebno*(2/5)))+(1/4)*erfc(3*sqrt(2/5*ebno))
</snippet></ROW><ROW><id>17775457</id><snippet>from foo import *</snippet></ROW><ROW><id>17775457</id><snippet>2/5</snippet></ROW><ROW><id>17775457</id><snippet>&gt;&gt;&gt; 2/5
0
&gt;&gt;&gt; 2./5
0.4
</snippet></ROW><ROW><id>17775457</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import scipy.special as sp
&gt;&gt;&gt; EbbyNo=np.arange(0.,16.,1)
&gt;&gt;&gt; ebno=10**(EbbyNo/10)
&gt;&gt;&gt; BER2=(3./8)*sp.erfc(np.sqrt(ebno*(2./5)))+(1./4)*sp.erfc(3*np.sqrt(2./5*ebno))
&gt;&gt;&gt; BER2
array([  1.40982603e-01,   1.18997473e-01,   9.77418560e-02,
         7.74530603e-02,   5.86237373e-02,   4.18927600e-02,
         2.78713278e-02,   1.69667344e-02,   9.24721374e-03,
         4.39033609e-03,   1.75415062e-03,   5.64706106e-04,
         1.38658689e-04,   2.42337855e-05,   2.76320800e-06,
         1.84185551e-07])
</snippet></ROW><ROW><id>17775504</id><snippet>string.rstrip('\n')</snippet></ROW><ROW><id>17775504</id><snippet>\r</snippet></ROW><ROW><id>17775504</id><snippet>POST</snippet></ROW><ROW><id>17775504</id><snippet>string.rstrip()</snippet></ROW><ROW><id>17775508</id><snippet>DOWNLOAD_DELAY</snippet></ROW><ROW><id>17775572</id><snippet>socket.getaddrinfo("example.com", None, socket.AF_INET6)
</snippet></ROW><ROW><id>17775697</id><snippet>i = 0 | x x _ _ _ _ _ _  -
i = 1 | x x x _ _ _ _ _  |
i = 2 | x x x x _ _ _ _  |
i = 3 | x x x x x _ _ _  N
i = 4 | x x x x x x _ _  |
i = 5 | x x x x x x x _  |
i = 6 | x x x x x x x x  _
       |-----N + 1-----|
</snippet></ROW><ROW><id>17775768</id><snippet>%s</snippet></ROW><ROW><id>17775768</id><snippet>str()</snippet></ROW><ROW><id>17775768</id><snippet>%r</snippet></ROW><ROW><id>17775768</id><snippet>repr()</snippet></ROW><ROW><id>17775768</id><snippet>%d</snippet></ROW><ROW><id>17775768</id><snippet>%i</snippet></ROW><ROW><id>17775768</id><snippet>%f</snippet></ROW><ROW><id>17775807</id><snippet>content = PlaceholderField(_(u'Content'), help_text="Plugins")
</snippet></ROW><ROW><id>17775807</id><snippet>content = PlaceholderField(u'content', help_text="Plugins")
</snippet></ROW><ROW><id>17775807</id><snippet>CMS_PLACEHOLDER_CONF = {
    'content': {
        'name': gettext("Content"),
    },
}
</snippet></ROW><ROW><id>17775851</id><snippet>from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome()
driver.get("http://www.python.org")
assert "Python" in driver.title
elem = driver.find_element_by_name("q")
elem.send_keys("selenium")
elem.send_keys(Keys.RETURN)
assert "Google" in driver.title
driver.close()
</snippet></ROW><ROW><id>17775950</id><snippet>list(gen)</snippet></ROW><ROW><id>17775950</id><snippet>list</snippet></ROW><ROW><id>17775950</id><snippet>&gt;&gt;&gt; def testFunc(num):
        for i in range(10, num):
            yield i


&gt;&gt;&gt; testFunc(15)
&lt;generator object testFunc at 0x02A18170&gt;
&gt;&gt;&gt; list(testFunc(15))
[10, 11, 12, 13, 14]
&gt;&gt;&gt; for elem in testFunc(15):
        print elem


10
11
12
13
14
</snippet></ROW><ROW><id>17775976</id><snippet>import pytz
cet = pytz.timezone('CET')
</snippet></ROW><ROW><id>17775976</id><snippet>dt = datetime.datetime(2010, 10, 31, 2, 12, 30)
offset = cet.utcoffset(dt)
</snippet></ROW><ROW><id>17775976</id><snippet>offset = cet.utcoffset(dt, is_dst = True)
</snippet></ROW><ROW><id>17775976</id><snippet>dt = datetime.datetime.utcfromtimestamp(1288483950)
</snippet></ROW><ROW><id>17775976</id><snippet>dt = pytz.utc.localize(dt)
</snippet></ROW><ROW><id>17775976</id><snippet>offset = dt.astimezone(cet).utcoffset()
</snippet></ROW><ROW><id>17775976</id><snippet>import tzlocal
local_tz = tzlocal.get_localzone()
</snippet></ROW><ROW><id>17776189</id><snippet>&gt;&gt;&gt; d = np.array([1, 13, 141, 2345, 51923, 691247])
&gt;&gt;&gt; np.array2string(d, formatter={'int_kind': lambda x: '{:,}'.format(x)})
'[1 13 141 2,345 51,923 691,247]'
</snippet></ROW><ROW><id>17776189</id><snippet>formatter</snippet></ROW><ROW><id>17776189</id><snippet>'{:,}'.format</snippet></ROW><ROW><id>17776189</id><snippet>numpy</snippet></ROW><ROW><id>17776189</id><snippet>&gt;&gt;&gt; ' '.join('{:,}'.format(x) for x in d)
'1 13 141 2,345 51,923 691,247'
</snippet></ROW><ROW><id>17776199</id><snippet>def mazeDetector(row,col, solution):
    c= m[row][col]
    solution.append((row, col))
    if c =="W":
        print "Wall here: "+ str(row)+ ","+ str(col)
        return False
    elif c =="V":
        print "Visited: " + str(row)+ ","+ str(col)
        return False
    elif c=="F":
        print "Found: "+ str(row)+ ","+ str(col)
        print solution
        return True

    print "visiting:"+ str(row)+ ","+ str(col) 
    m[row][col]=="V"
    if (col&gt;0 and mazeDetector(row,col-1, list(solution))):
        return True
    elif (row&lt; len(m)-1 and mazeDetector(row+1,col, list(solution))):
        return True
    elif (row&gt;0 and mazeDetector(row-1, col, list(solution))):
        return True
    elif (col&lt;=len(m)-1 and mazeDetector(row, col+1, list(solution))):
        return True
    return False
mazeDetector(1,5, [])
</snippet></ROW><ROW><id>17776199</id><snippet>def mazeDetector(row, col, solution):
    solution.append((row, col))
    if m[row][col] == "F": return True, solution
    m[row][col] = "V"
    neighbors = [(row, col - 1), (row + 1, col), (row - 1, col), (row, col + 1)]
    neighbors = filter(lambda (r, c): r &gt;= 0 and c &gt;= 0 and r &lt; len(m) and c &lt; len(m) and m[r][c] not in ("V", "W"), neighbors)
    for r, c in neighbors:
        t, sol = mazeDetector(r, c, list(solution))
        if t: return True, sol
    return False, []

print mazeDetector(1, 5, [])[1]
</snippet></ROW><ROW><id>17776211</id><snippet>DispatcherMiddleware</snippet></ROW><ROW><id>17776211</id><snippet>SCRIPT_NAME</snippet></ROW><ROW><id>17776211</id><snippet>FORCE_SCRIPT_NAME = ''</snippet></ROW><ROW><id>17776211</id><snippet>webapp2.WSGIApplication</snippet></ROW><ROW><id>17776211</id><snippet>__call__()</snippet></ROW><ROW><id>17776211</id><snippet>SCRIPT_NAME</snippet></ROW><ROW><id>17776211</id><snippet>webapp2_app.py</snippet></ROW><ROW><id>17776211</id><snippet>import webapp2

class WSGIApp(webapp2.WSGIApplication):

    def __call__(self, environ, start_response):
        environ['SCRIPT_NAME'] = ''
        return super(WSGIApp, self).__call__(environ, start_response)

# app = WSGIApp(...)
</snippet></ROW><ROW><id>17776325</id><snippet>&gt;&gt;&gt; dicts = [{'1A': 1}, {'1B': 2}, {'2A': 3}, {'2B': 4}]
&gt;&gt;&gt; for obj1, obj2 in zip(*[iter(dicts)]*2):
    print obj1, obj2


{'1A': 1} {'1B': 2}
{'2A': 3} {'2B': 4}
</snippet></ROW><ROW><id>17776555</id><snippet>fileContent = file.readlines()
fileContent =&gt; ["moon\n", "mam\n", "madam\n", "dog\n", "cat\n", "bat\n"]
</snippet></ROW><ROW><id>17776555</id><snippet>def fileInput(filename):
    palindromes = False
    for line in open(filename):
        if isPalindrome(line.strip()):
             palindromes = True
             print(line.strip(), " is a palindrome.")

    return "palindromes found in {}".format(filename) if palindromes else "no palindromes found."
</snippet></ROW><ROW><id>17776555</id><snippet>palindromes</snippet></ROW><ROW><id>17776698</id><snippet>src</snippet></ROW><ROW><id>17776698</id><snippet>img</snippet></ROW><ROW><id>17776698</id><snippet>from PIL import Image
from cStringIO import StringIO

a = Image.new('RGB', (10, 10), 'black')
# ...
buf = StringIO()
a.save(buf, 'png')
b64img = '&lt;img src="data:image/png;base64,{0}" /&gt;'.format(buf.getvalue().encode('base64'))
</snippet></ROW><ROW><id>17776698</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>17776698</id><snippet>return Response(b64img)</snippet></ROW><ROW><id>17776699</id><snippet>re.DOTALL</snippet></ROW><ROW><id>17776699</id><snippet>findall</snippet></ROW><ROW><id>17776699</id><snippet>print re.findall('&lt;hgroup&gt;(.*?)&lt;/hgroup&gt;', request, re.DOTALL)
</snippet></ROW><ROW><id>17776699</id><snippet>.</snippet></ROW><ROW><id>17776908</id><snippet>&gt;&gt;&gt; a = [(34.2424, -64.2344, 76.3534, 45.2344)]
&gt;&gt;&gt; print ' '.join(map(str, a[0]))
'34.2424 -64.2344 76.3534 45.2344'
</snippet></ROW><ROW><id>17776908</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>17776908</id><snippet>&gt;&gt;&gt; print(*a[0])
34.2424 -64.2344 76.3534 45.2344
</snippet></ROW><ROW><id>17776908</id><snippet>&gt;&gt;&gt; a = [(34.2424,), (-64.2344,), (76.3534,), (45.2344,)]
&gt;&gt;&gt; print ' '.join(str(el[0]) for el in a)
34.2424 -64.2344 76.3534 45.2344
</snippet></ROW><ROW><id>17776908</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; print(*chain.from_iterable(a))
34.2424 -64.2344 76.3534 45.2344
</snippet></ROW><ROW><id>17776908</id><snippet>&gt;&gt;&gt; tuple(chain.from_iterable(a))
(34.2424, -64.2344, 76.3534, 45.2344)
</snippet></ROW><ROW><id>17776908</id><snippet>str</snippet></ROW><ROW><id>17777001</id><snippet>class Model(models.Model):
  def save(self, *args, **kwargs):
    instance = super(Model, self).save(*args, **kwargs)
    # your logic here to change the file location
    return instance
</snippet></ROW><ROW><id>17777033</id><snippet>    def mycallback(self, response):
        print "Referer:", response.request.headers.get("Referer")
        ...
</snippet></ROW><ROW><id>17777038</id><snippet>&gt;&gt;&gt; for v in D1.values():
...     if 3 in v:
...         v.remove(3)
...
&gt;&gt;&gt; D1
{'A1': [2], 'C1': [4, 5], 'B1': [3]}
</snippet></ROW><ROW><id>17777038</id><snippet>&gt;&gt;&gt; D1 = {'A1' : [2, 3], 'B1': [3, 3], 'C1' : [4, 5]}
&gt;&gt;&gt; for k, v in D1.items():
...     D1[k] = filter(lambda x: x!=3, v)
...
&gt;&gt;&gt; D1
{'A1': [2], 'C1': [4, 5], 'B1': []}
</snippet></ROW><ROW><id>17777078</id><snippet>groupby</snippet></ROW><ROW><id>17777078</id><snippet>rank</snippet></ROW><ROW><id>17777078</id><snippet>In [11]: g = df.groupby('key1')
</snippet></ROW><ROW><id>17777078</id><snippet>In [12]: g['data1'].rank(method='min')
Out[12]:
0    1
1    2
2    2
3    1
4    4
dtype: float64

In [13]: df['RN'] = g['data1'].rank(method='min')
</snippet></ROW><ROW><id>17777078</id><snippet>In [14]: g1 = df.groupby(['key1', 'RN'])

In [15]: g1['data2'].rank(ascending=False) - 1
Out[15]:
0    0
1    0
2    1
3    0
4    0
dtype: float64

In [16]: df['RN'] += g1['data2'].rank(ascending=False) - 1

In [17]: df
Out[17]:
   data1  data2 key1  RN
0      1      1    a   1
1      2     10    a   2
2      2      2    a   3
3      3      3    b   1
4      3     30    a   4
</snippet></ROW><ROW><id>17777200</id><snippet>match</snippet></ROW><ROW><id>17777200</id><snippet>for match in root.iter("match"):
    if (match.find("localteam").get("name") == "Team A" and
        match.find("awayteam").get("name") == "Team B"):
        print match.get("id")
        break
</snippet></ROW><ROW><id>17777200</id><snippet>find</snippet></ROW><ROW><id>17777200</id><snippet>for match in root.iter("match"):
    localteam = match.find("localteam")
    awayteam = match.find("awayteam")
    if localteam is not None and awayteam is not None and ...
</snippet></ROW><ROW><id>17777215</id><snippet>&gt;&gt;&gt; map(sum, zip(*vd.values()))
[0, 1, 3]
</snippet></ROW><ROW><id>17777215</id><snippet>&gt;&gt;&gt; vd = {'A': [1,0,1], 'B': [-1,0,1], 'C': [0,1,1]}
</snippet></ROW><ROW><id>17777215</id><snippet>&gt;&gt;&gt; values = vd.values()
&gt;&gt;&gt; values
[[1, 0, 1], [-1, 0, 1], [0, 1, 1]]
</snippet></ROW><ROW><id>17777215</id><snippet>&gt;&gt;&gt; zipped = zip(*values)
&gt;&gt;&gt; zipped
[(1, -1, 0), (0, 0, 1), (1, 1, 1)]
</snippet></ROW><ROW><id>17777215</id><snippet>zip</snippet></ROW><ROW><id>17777215</id><snippet>*</snippet></ROW><ROW><id>17777215</id><snippet>&gt;&gt;&gt; sum([1, 2, 3])
6
</snippet></ROW><ROW><id>17777215</id><snippet>&gt;&gt;&gt; map(sum, zipped)
[0, 1, 3]
</snippet></ROW><ROW><id>17777215</id><snippet>&gt;&gt;&gt; map(sum, zip(*vd.values()))
[0, 1, 3]
</snippet></ROW><ROW><id>17777215</id><snippet>average</snippet></ROW><ROW><id>17777215</id><snippet>def average(numbers):
    # We have to do the float(...) so it doesn't do an integer division.
    # In Python 3, it is not necessary.
    return sum(numbers) / float(len(numbers))
</snippet></ROW><ROW><id>17777215</id><snippet>sum</snippet></ROW><ROW><id>17777215</id><snippet>average</snippet></ROW><ROW><id>17777215</id><snippet>&gt;&gt;&gt; map(average, zip(*vd.values()))
[0.0, 0.3333, 1.0]
</snippet></ROW><ROW><id>17777230</id><snippet>zip</snippet></ROW><ROW><id>17777230</id><snippet>zip</snippet></ROW><ROW><id>17777230</id><snippet>itertools.izip</snippet></ROW><ROW><id>17777230</id><snippet>zip</snippet></ROW><ROW><id>17777230</id><snippet>z = list(zip(t,t2))
</snippet></ROW><ROW><id>17777230</id><snippet>map</snippet></ROW><ROW><id>17777230</id><snippet>zip</snippet></ROW><ROW><id>17777230</id><snippet>filter</snippet></ROW><ROW><id>17777316</id><snippet>import pygtk
pygtk.require('2.0')
import gtk
import wnck
import re
import sys
import time

screen = wnck.screen_get_default()
while gtk.events_pending():
    gtk.main_iteration()

titlePattern = re.compile('.*Geany.*')

windows = screen.get_windows()
for w in windows:
  if titlePattern.match(w.get_name()):
    print w.get_name()
    w.activate(int(time.time()))
</snippet></ROW><ROW><id>17777486</id><snippet>import re

with open('yourfile') as fin:
    page_source = fin.read()

start_text = re.escape('&lt;div id="viewed"&gt;')
until_text = re.escape('&lt;div id="rated"&gt;')
match_text = re.search('{}(.*?){}'.format(start_text, until_text), page_source, flags=re.DOTALL)
if match_text:
    print match_text.group(1)
</snippet></ROW><ROW><id>17777539</id><snippet>test_project</snippet></ROW><ROW><id>17777539</id><snippet>middlewares.py</snippet></ROW><ROW><id>17777539</id><snippet>settings.py</snippet></ROW><ROW><id>17777539</id><snippet>from django.db import connection
from time import time
from operator import add
import re


class StatsMiddleware(object):

    def process_view(self, request, view_func, view_args, view_kwargs):
        '''
        In your base template, put this:
        &lt;div id="stats"&gt;
        &lt;!-- STATS: Total: %(total_time).2fs Python: %(python_time).2fs DB: %(db_time).2fs Queries: %(db_queries)d ENDSTATS --&gt;
        &lt;/div&gt;
        '''

        # Uncomment the following if you want to get stats on DEBUG=True only
        #if not settings.DEBUG:
        #    return None

        # get number of db queries before we do anything
        n = len(connection.queries)

        # time the view
        start = time()
        response = view_func(request, *view_args, **view_kwargs)
        total_time = time() - start

        # compute the db time for the queries just run
        db_queries = len(connection.queries) - n
        if db_queries:
            db_time = reduce(add, [float(q['time'])
                                   for q in connection.queries[n:]])
        else:
            db_time = 0.0

        # and backout python time
        python_time = total_time - db_time

        stats = {
            'total_time': total_time,
            'python_time': python_time,
            'db_time': db_time,
            'db_queries': db_queries,
        }

        # replace the comment if found
        if response and response.content:
            s = response.content
            regexp = re.compile(r'(?P&lt;cmt&gt;&lt;!--\s*STATS:(?P&lt;fmt&gt;.*?)ENDSTATS\s*--&gt;)')
            match = regexp.search(s)
            if match:
                s = (s[:match.start('cmt')] +
                     match.group('fmt') % stats +
                     s[match.end('cmt'):])
                response.content = s

        return response
</snippet></ROW><ROW><id>17777539</id><snippet>settings.py</snippet></ROW><ROW><id>17777539</id><snippet>MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # ... your existing middlewares ...

    # your custom middleware here
    'test_project.middlewares.StatsMiddleware',
)
</snippet></ROW><ROW><id>17777539</id><snippet>&lt;project_name&gt;.&lt;middleware_file_name&gt;.&lt;middleware_class_name&gt;
</snippet></ROW><ROW><id>17777539</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>17777539</id><snippet>base.html</snippet></ROW><ROW><id>17777539</id><snippet>&lt;div id="stats"&gt;
&lt;!-- STATS: Total: %(total_time).2fs Python: %(python_time).2fs DB: %(db_time).2fs Queries: %(db_queries)d ENDSTATS --&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>17777539</id><snippet>&lt;div id="stats"&gt;</snippet></ROW><ROW><id>17777539</id><snippet>&lt;!-- STATS: .... --&gt;</snippet></ROW><ROW><id>17777539</id><snippet>middlewares.py</snippet></ROW><ROW><id>17777543</id><snippet>producer</snippet></ROW><ROW><id>17777543</id><snippet>__main__</snippet></ROW><ROW><id>17777543</id><snippet>import sys
import subprocess
import random
import time
import threading
import Queue

class AsynchronousFileReader(threading.Thread):
    '''
    Helper class to implement asynchronous reading of a file
    in a separate thread. Pushes read lines on a queue to
    be consumed in another thread.
    '''

    def __init__(self, fd, queue):
        assert isinstance(queue, Queue.Queue)
        assert callable(fd.readline)
        threading.Thread.__init__(self)
        self._fd = fd
        self._queue = queue

    def run(self):
        '''The body of the tread: read lines and put them on the queue.'''
        for line in iter(self._fd.readline, ''):
            self._queue.put(line)

    def eof(self):
        '''Check whether there is no more content to expect.'''
        return not self.is_alive() and self._queue.empty()

def consume(command):
    '''
    Example of how to consume standard output and standard error of
    a subprocess asynchronously without risk on deadlocking.
    '''

    # Launch the command as subprocess.
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Launch the asynchronous readers of the process' stdout and stderr.
    stdout_queue = Queue.Queue()
    stdout_reader = AsynchronousFileReader(process.stdout, stdout_queue)
    stdout_reader.start()
    stderr_queue = Queue.Queue()
    stderr_reader = AsynchronousFileReader(process.stderr, stderr_queue)
    stderr_reader.start()

    # Check the queues if we received some output (until there is nothing more to get).
    while not stdout_reader.eof() or not stderr_reader.eof():
        # Show what we received from standard output.
        while not stdout_queue.empty():
            line = stdout_queue.get()
            print 'Received line on standard output: ' + repr(line)

        # Show what we received from standard error.
        while not stderr_queue.empty():
            line = stderr_queue.get()
            print 'Received line on standard error: ' + repr(line)

        # Sleep a bit before asking the readers again.
        time.sleep(.1)

    # Let's be tidy and join the threads we've started.
    stdout_reader.join()
    stderr_reader.join()

    # Close subprocess' file descriptors.
    process.stdout.close()
    process.stderr.close()

def produce(items=10):
    '''
    Dummy function to randomly render a couple of lines
    on standard output and standard error.
    '''
    for i in range(items):
        output = random.choice([sys.stdout, sys.stderr])
        output.write('Line %d on %s\n' % (i, output))
        output.flush()
        time.sleep(random.uniform(.1, 1))

if __name__ == '__main__':
    # The main flow:
    # if there is an command line argument 'produce', act as a producer
    # otherwise be a consumer (which launches a producer as subprocess).
    if len(sys.argv) == 2 and sys.argv[1] == 'produce':
        produce(10)
    else:
        consume(['python', sys.argv[0], 'produce'])
</snippet></ROW><ROW><id>17777569</id><snippet>requests</snippet></ROW><ROW><id>17777569</id><snippet>$ pip install requests</snippet></ROW><ROW><id>17777569</id><snippet>requests</snippet></ROW><ROW><id>17777569</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; url = 'http://edmonton.en.craigslist.ca/kid/'
&gt;&gt;&gt; headers = {'User-Agent': 'Mozilla/5.0'}
&gt;&gt;&gt; request = requests.get(url, headers=headers)
&gt;&gt;&gt; request.ok
True
&gt;&gt;&gt; request.text  # content in string, similar to .read() in question
...
...
</snippet></ROW><ROW><id>17777569</id><snippet>urllib2</snippet></ROW><ROW><id>17777569</id><snippet>requests</snippet></ROW><ROW><id>17777593</id><snippet>SELECT field1, field2, field3, field4 FROM TABLE1
</snippet></ROW><ROW><id>17777593</id><snippet>cur</snippet></ROW><ROW><id>17777593</id><snippet>4, 3, 2, 1
7, 3, 1, 0
8, 5, 2, 0
</snippet></ROW><ROW><id>17777593</id><snippet>4, 3, 2, 1
</snippet></ROW><ROW><id>17777593</id><snippet>10</snippet></ROW><ROW><id>17777593</id><snippet>UPDATE TABLE1 SET field5 = 10
</snippet></ROW><ROW><id>17777593</id><snippet>where</snippet></ROW><ROW><id>17777593</id><snippet>field5</snippet></ROW><ROW><id>17777593</id><snippet>where</snippet></ROW><ROW><id>17777593</id><snippet>where id = ?</snippet></ROW><ROW><id>17777593</id><snippet>update table1
set field5 = ?
where field1 = ?
and field2 = ?
and field3 = ?
and field4 = ?
</snippet></ROW><ROW><id>17777593</id><snippet>?</snippet></ROW><ROW><id>17777593</id><snippet>execute</snippet></ROW><ROW><id>17777593</id><snippet>update</snippet></ROW><ROW><id>17777593</id><snippet>cur</snippet></ROW><ROW><id>17777593</id><snippet>update</snippet></ROW><ROW><id>17777593</id><snippet>select</snippet></ROW><ROW><id>17777690</id><snippet>object</snippet></ROW><ROW><id>17777690</id><snippet>class Card(object):
    ...
</snippet></ROW><ROW><id>17777754</id><snippet>ftp.storlines('STOR ' + 'file.htm', open('file.htm','rb'))
</snippet></ROW><ROW><id>17777771</id><snippet>from itertools import groupby</snippet></ROW><ROW><id>17777771</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [len(list(g)) for k, g in groupby(s) if k == '1']
[4, 3, 1, 2, 4]
</snippet></ROW><ROW><id>17777882</id><snippet>eval</snippet></ROW><ROW><id>17777882</id><snippet>&gt;&gt;&gt; map(eval, ['9-8+7', '7-8-6'])
[8, -7]
</snippet></ROW><ROW><id>17777921</id><snippet>verb.present_participle(word)
</snippet></ROW><ROW><id>17777982</id><snippet>last_page</snippet></ROW><ROW><id>17777982</id><snippet>import requests

r_sanfran = requests.get("https://api.angel.co/1/tags/1664/jobs").json()
num_pages = r_sanfran['last_page']

for page in range(2, num_pages + 1):
    r_sanfran = requests.get("https://api.angel.co/1/tags/1664/jobs", params={'page': page).json()
    print r_sanfran['page']
    # TODO: extract the data
</snippet></ROW><ROW><id>17778005</id><snippet>from itertools import chain
from itertools import combinations
# Huge name!
from itertools import combinations_with_replacement as cwr
from itertools import starmap
from itertools import product

from operator import add

def _weird_combinations(rep, no_rep, n_from_rep, n_from_norep):
    return starmap(add, product(cwr(rep, n_from_rep),
                                combinations(no_rep, n_from_norep)))

def weird_combinations(rep, no_rep, n):
    rep, no_rep = list(rep), list(no_rep)

    # Allow Nones in the output to represent drawing less than n elements.
    # If either input has None in it, this will be confusing.
    rep.append(None)

    # We can't draw more elements from no_rep than it has.
    # However, we can draw as many from rep as we want.
    least_from_rep = max(0, n-len(no_rep))
    return chain.from_iterable(
            _weird_combinations(rep, no_rep, n_from_rep, n-n_from_rep)
            for n_from_rep in xrange(least_from_rep, n+1))
</snippet></ROW><ROW><id>17778033</id><snippet>list1.update(list2)</snippet></ROW><ROW><id>17778237</id><snippet>ompclib/m_compile.py</snippet></ROW><ROW><id>17778237</id><snippet>ompc/m_compile.py</snippet></ROW><ROW><id>17778237</id><snippet>ompc</snippet></ROW><ROW><id>17778237</id><snippet>ompclib</snippet></ROW><ROW><id>17778237</id><snippet>import __ompc__</snippet></ROW><ROW><id>17778237</id><snippet>ompc</snippet></ROW><ROW><id>17778237</id><snippet>ompc/m_compile.py</snippet></ROW><ROW><id>17778237</id><snippet>import ompc</snippet></ROW><ROW><id>17778270</id><snippet>import os.path

script_dir = os.path.dirname(os.path.abspath(__file__))
im = Image.open(os.path.join(script_dir, 'Desert.jpg'))
</snippet></ROW><ROW><id>17778270</id><snippet>__file__</snippet></ROW><ROW><id>17778270</id><snippet>os.path</snippet></ROW><ROW><id>17778270</id><snippet>/</snippet></ROW><ROW><id>17778294</id><snippet>exec('foo()')
</snippet></ROW><ROW><id>17778294</id><snippet>1</snippet></ROW><ROW><id>17778294</id><snippet>exec('print foo()')
</snippet></ROW><ROW><id>17778294</id><snippet>exec()</snippet></ROW><ROW><id>17778302</id><snippet>print</snippet></ROW><ROW><id>17778302</id><snippet>yield</snippet></ROW><ROW><id>17778302</id><snippet>def ifibonacci():
    a, b = 0, 1
    while b &lt; 3000:
        a, b = b, a + b
        yield a
</snippet></ROW><ROW><id>17778302</id><snippet>itertools.islice</snippet></ROW><ROW><id>17778302</id><snippet>import itertools

print list(itertools.islice(ifibonacci(), 10))
# prints [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

print list(itertools.islice(ifibonacci(), 6, 6+1))
# prints [13] which isn't quite right; see below
</snippet></ROW><ROW><id>17778302</id><snippet>yield</snippet></ROW><ROW><id>17778302</id><snippet>def ifibonacci():
    a, b = 0, 1
    while b &lt; 3000:
        yield a
        a, b = b, a + b

print list(itertools.islice(ifibonacci(), 6, 6+1))
# prints [8]
</snippet></ROW><ROW><id>17778308</id><snippet>XPath</snippet></ROW><ROW><id>17778308</id><snippet>lxml</snippet></ROW><ROW><id>17778308</id><snippet>html = """&lt;tr&gt;
   &lt;td&gt;CME Globex&lt;/td&gt;
   &lt;td colspan="4"&gt;
   Some text
   &lt;a target="_blank"" href="http://..."&gt;View Rollover Dates&lt;/a&gt;
   &lt;/td&gt;
&lt;/tr&gt;"""

import lxml.html

tree = lxml.html.fromstring(html)
print tree.xpath('//tr/td[@colspan="4"]/text()')
</snippet></ROW><ROW><id>17778308</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html)
for a in soup.find_all('a', text='View Rollover Dates'):
    print a.previous_element
</snippet></ROW><ROW><id>17778390</id><snippet>None</snippet></ROW><ROW><id>17778390</id><snippet>if my_var != "a" and my_var != "b":
    print  "You didn't type \"a\" or \"b\".  Try again."
    print " "
    Dat_Function()
</snippet></ROW><ROW><id>17778390</id><snippet>None</snippet></ROW><ROW><id>17778390</id><snippet>&gt;&gt;&gt; def f(x):
...     pass
&gt;&gt;&gt; print(f(20))
None
</snippet></ROW><ROW><id>17778390</id><snippet>Dat Function()</snippet></ROW><ROW><id>17778390</id><snippet>if</snippet></ROW><ROW><id>17778390</id><snippet>return</snippet></ROW><ROW><id>17778411</id><snippet>from collections import Counter
with open('path/to/file') as infile:
    counts = Counter(line.split('-', 1)[0].strip() for line in infile)
IPs = counts.most_common() # thanks @Jon Clements
# equivalent to IPs = sorted(counts, key=counts.__getitem__, reverse=True)
</snippet></ROW><ROW><id>17778411</id><snippet>IPs</snippet></ROW><ROW><id>17778416</id><snippet>else</snippet></ROW><ROW><id>17778416</id><snippet>if line == "  world: Trolling\n"</snippet></ROW><ROW><id>17778416</id><snippet>import sys
from os import listdir 
from os.path import isfile, join

onlyfiles = [ f for f in listdir() if isfile(f) and str(f)[-4:]==".yml" ]

for file in onlyfiles:
  wdata = ''
  with open(file, 'r') as a: #Lets open it make sure it is good
    for line in a: 
        if line == "  world: Trolling\n":
            line = "  world: world\n" # You already know what it should be
        print line
        wdata += line
  with open(file, 'w') as repl: 
    repl.write(wdata)
</snippet></ROW><ROW><id>17778416</id><snippet>for file in onlyfiles:
  with open(file, 'r') as f:
    d = f.read().replace('\n  world: Trolling\n','\n  world: world\n')
  with open(file, 'w') as f:
    f.write(d)
</snippet></ROW><ROW><id>17778560</id><snippet>In [49]: df = DataFrame([['1','2','3','.4',5,6.,'foo']],columns=list('ABCDEFG'))

In [50]: df
Out[50]: 
   A  B  C   D  E  F    G
0  1  2  3  .4  5  6  foo

In [51]: df.dtypes
Out[51]: 
A     object
B     object
C     object
D     object
E      int64
F    float64
G     object
dtype: object
</snippet></ROW><ROW><id>17778560</id><snippet>In [52]: for k, v in df.iloc[:,0:4].convert_objects(convert_numeric=True).iteritems():
    df[k] = v
   ....:     

In [53]: df.dtypes
Out[53]: 
A      int64
B      int64
C      int64
D    float64
E      int64
F    float64
G     object
dtype: object
</snippet></ROW><ROW><id>17778560</id><snippet>In [54]: df = DataFrame([['1','2','3','.4',5,6.,'foo']],columns=list('ABCDEFG'))

In [55]: df.convert_objects(convert_numeric=True).dtypes
Out[55]: 
A      int64
B      int64
C      int64
D    float64
E      int64
F    float64
G     object
dtype: object
</snippet></ROW><ROW><id>17778560</id><snippet>df.iloc[:,4:]</snippet></ROW><ROW><id>17778637</id><snippet>list(range(5))
=&gt; [0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>17778637</id><snippet>range()</snippet></ROW><ROW><id>17778775</id><snippet>%</snippet></ROW><ROW><id>17778775</id><snippet>def stamps(dinero):
    p5=dinero/5
    dinero=dinero%5
    p2=dinero/2
    dinero=dinero%2
    p1=dinero/1
    return tuple([p5,p2,p1])

print stamps(8)
&gt;&gt;&gt; (1,1,1)
</snippet></ROW><ROW><id>17778775</id><snippet>p5=dinero/5
</snippet></ROW><ROW><id>17778775</id><snippet>p5a=p5*5
resultado1=dinero-p5a
dinero=resultado1
</snippet></ROW><ROW><id>17778775</id><snippet>dinero=dinero%5
</snippet></ROW><ROW><id>17778775</id><snippet>divmod()</snippet></ROW><ROW><id>17778775</id><snippet>def stamps(dinero):
    p5,dinero=divmod(dinero,5)
    p2,dinero=divmod(dinero,2)
    p1=dinero
    return tuple([p5,p2,p1])

print stamps(8)
&gt;&gt;&gt; (1,1,1)
</snippet></ROW><ROW><id>17778775</id><snippet>def stamps(dinero):
    return allStamps(dinero,[5,2,1])

def allStamps(dinero=1,stamps=[]):
    vals = []
    for stamp in sorted(list(set(stamps)), reverse=True):
        val,dinero=divmod(dinero,stamp)
        vals.append(val)
    return tuple(vals)

print stamps(8)
&gt;&gt;&gt; (1,1,1)
print allStamps(8,[5,3,1])
&gt;&gt;&gt; (1,1,0)
</snippet></ROW><ROW><id>17778775</id><snippet>/</snippet></ROW><ROW><id>17778775</id><snippet>%</snippet></ROW><ROW><id>17778775</id><snippet>divmod()</snippet></ROW><ROW><id>17778775</id><snippet>&gt; python -m timeit 'a=1000;b=a/5;c=b*5;d=a-c;a=d'
 10000000 loops, best of 3: 0.156 usec per loop
&gt; python -m timeit 'a=1000;b=a/5;a=a-b*5;'
 10000000 loops, best of 3: 0.127 usec per loop
&gt; python -m timeit 'a=1000;a=a-(a/5)*5;'
 10000000 loops, best of 3: 0.121 usec per loop
&gt; python -m timeit 'a=1000/13;b=1000%13;'
 10000000 loops, best of 3: 0.0755 usec per loop
root@meteordev:~# python -m timeit 'a,b=divmod(1000,13);'
 10000000 loops, best of 3: 0.183 usec per loop
</snippet></ROW><ROW><id>17778786</id><snippet>DataFrame.values</snippet></ROW><ROW><id>17778786</id><snippet>argsort()</snippet></ROW><ROW><id>17778786</id><snippet>unstack</snippet></ROW><ROW><id>17778786</id><snippet>order</snippet></ROW><ROW><id>17778786</id><snippet>import pandas as pd
import numpy as np

shape = (50, 4460)

data = np.random.normal(size=shape)

data[:, 1000] += data[:, 2000]

df = pd.DataFrame(data)

c = df.corr().abs()

s = c.unstack()
so = s.order(kind="quicksort")

print so[-4470:-4460]
</snippet></ROW><ROW><id>17778786</id><snippet>2192  1522    0.636198
1522  2192    0.636198
3677  2027    0.641817
2027  3677    0.641817
242   130     0.646760
130   242     0.646760
1171  2733    0.670048
2733  1171    0.670048
1000  2000    0.742340
2000  1000    0.742340
dtype: float64
</snippet></ROW><ROW><id>17778883</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>17778883</id><snippet>delta = self.end_date - self.pub_date
return delta.days
</snippet></ROW><ROW><id>17778883</id><snippet>delta = self.end_date - self.pub_date
if delta.seconds / 3600 &gt;= 12:
    return delta.days + 1 # round up
else:
    return delta.days # round down
</snippet></ROW><ROW><id>17779230</id><snippet>pip install --upgrade pandas
</snippet></ROW><ROW><id>17779230</id><snippet>site-packages</snippet></ROW><ROW><id>17779230</id><snippet>apt-get update</snippet></ROW><ROW><id>17779339</id><snippet>import requests

url = 'www.targetsite.com/page/i/need/'
headers = { 'Connection' : 'keep-alive',
            'Header' : 'header-value',
            'Cookie' : 'CookieFieldName=CookieValue'
          }
r = requests.get(url, headers=headers)
print r.content
</snippet></ROW><ROW><id>17779465</id><snippet>def get_change_and_coin(coin_amount, change):
    change = round(change, 2)
    return (change % coin_amount, int(change / coin_amount))


cost = float(raw_input('How much did your meal cost? &gt; '))
payment = float(raw_input('How much did you pay? &gt; '))

change = (payment - cost)

print change

if change &lt; 0:
    print 'You need to pay $%.2f more!' %  (-change)

dollars, q, d, n, p = 0, 0, 0, 0, 0

dollars = int(change)
change = float(change*100)

(change, q) = get_change_and_coin(25, change)
(change, d) = get_change_and_coin(10, change)
(change, n) = get_change_and_coin(5, change)
(change, p) = get_change_and_coin(1, change)

print 'you get %d dollars, %d quarters, %d dimes, %d nickels, and %d pennies!' % (dollars, q, d, n, p)
</snippet></ROW><ROW><id>17779529</id><snippet>/passport/login</snippet></ROW><ROW><id>17779718</id><snippet>[True, False, True]</snippet></ROW><ROW><id>17779718</id><snippet>array([True,False,True])</snippet></ROW><ROW><id>17779718</id><snippet>[1,0,1]</snippet></ROW><ROW><id>17779718</id><snippet>&gt;&gt;&gt; a = np.arange(9).reshape(3,3)
&gt;&gt;&gt; a
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&gt;&gt;&gt; mask = np.array([True,False,True])
&gt;&gt;&gt; mask.dtype ## verify we have a bool array
dtype('bool')
&gt;&gt;&gt; a[mask,0]
array([0, 6])
</snippet></ROW><ROW><id>17779796</id><snippet>(...)</snippet></ROW><ROW><id>17779796</id><snippet>pattern = r'(?:[A-Z]\.)+'
</snippet></ROW><ROW><id>17779839</id><snippet>*args</snippet></ROW><ROW><id>17779839</id><snippet>**kwargs</snippet></ROW><ROW><id>17779839</id><snippet>namedArg=arg2</snippet></ROW><ROW><id>17779839</id><snippet>def retry(func, *args, **kwargs):
  func(*args, **kwargs)

def action(*args, **kwargs):
  do something

retry(action, arg1, namedArg=arg2)
</snippet></ROW><ROW><id>17779839</id><snippet>def action(args, kwargs):
  do something
</snippet></ROW><ROW><id>17779839</id><snippet>args</snippet></ROW><ROW><id>17779839</id><snippet>kwargs</snippet></ROW><ROW><id>17779839</id><snippet>args = [arg1]
kwargs = {'namedArg':arg2}
</snippet></ROW><ROW><id>17779857</id><snippet>package.subpackage import *</snippet></ROW><ROW><id>17779857</id><snippet>sys.path</snippet></ROW><ROW><id>17780013</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17780013</id><snippet>&gt;&gt;&gt; testList = [1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9]
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [k for k, g in groupby(testList)]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>17780334</id><snippet>import wx
class DisplayText(wx.Dialog):

    def __init__(self, parent, text="", displayMode=0):

        # Initialize dialog
        wx.Dialog.__init__(self, parent, size=(480,320), style=( wx.DIALOG_EX_METAL | wx.STAY_ON_TOP ) )

        # Center form
        self.Center()

        # (For Mac) Setup a panel
        self.panel = wx.Panel(self)

        # Create text field     
        self.txtField = wx.StaticText(self.panel, label=text, pos=(80,120), size=(320,200), style=wx.ALIGN_CENTRE_HORIZONTAL | wx.ST_NO_AUTORESIZE)
        self.txtField.SetFont(wx.Font(24, wx.DEFAULT, wx.BOLD, 0))      
        self.txtField.SetAutoLayout(False)

app = wx.App(False)

c = DisplayText(None, text="Now is the time for all good men to come to the aid of their country.")
c.Show()
app.MainLoop()
</snippet></ROW><ROW><id>17780417</id><snippet>weekNum = "week" + str(i)               #i is either 2, 3, 4, 5
query = "select {0} from golden_table where nGram = %s and hash_tag = %s".format(weekNum)
cur.execute(query, (tup[0], tup[1]))
</snippet></ROW><ROW><id>17780920</id><snippet>pointCloud = VtkPointCloud()</snippet></ROW><ROW><id>17780920</id><snippet>renderer.AddActor(pointCloud.vtkActor)</snippet></ROW><ROW><id>17781138</id><snippet>sejda-console merge -f PDFfile_1.pdf PDFfile_2.pdf -o PDFoutput.pdf
</snippet></ROW><ROW><id>17781138</id><snippet>sejda-console -h merge</snippet></ROW><ROW><id>17781492</id><snippet>(type,encoding)</snippet></ROW><ROW><id>17781492</id><snippet>guess_extension()</snippet></ROW><ROW><id>17781492</id><snippet>type</snippet></ROW><ROW><id>17781492</id><snippet>extension = guess_extension(guess_type(url))
</snippet></ROW><ROW><id>17781492</id><snippet>guess_type</snippet></ROW><ROW><id>17781492</id><snippet>guess_extension</snippet></ROW><ROW><id>17781492</id><snippet>type</snippet></ROW><ROW><id>17781492</id><snippet>extension = guess_extension(guess_type(url)[0])
</snippet></ROW><ROW><id>17781567</id><snippet>import os

searchFolder = '/Users/bubble/Desktop/pics'

with open('/Users/bubble/Desktop/workfile.txt','w') as f:
    for root, dirs, files in os.walk(searchFolder):
        for file in files:
            pathName = os.path.join(root,file)
            print pathName
            print os.path.getsize(pathName)
            print
            f.write('{}\n'.format(pathName))
            f.write('{}\n'.format(os.path.getsize(pathName)))
</snippet></ROW><ROW><id>17781904</id><snippet>import pylab as py
import numpy as np
from scipy import optimize

# Generate a 
y = np.random.standard_normal(10000)
data = py.hist(y, bins = 100)

# Equation for Gaussian
def f(x, a, b, c):
    return a * py.exp(-(x - b)**2.0 / (2 * c**2))

# Generate data from bins as a set of points 
x = [0.5 * (data[1][i] + data[1][i+1]) for i in xrange(len(data[1])-1)]
y = data[0]

popt, pcov = optimize.curve_fit(f, x, y)

x_fit = py.linspace(x[0], x[-1], 100)
y_fit = f(x_fit, *popt)

plot(x_fit, y_fit, lw=4, color="r")
</snippet></ROW><ROW><id>17781904</id><snippet>pcov</snippet></ROW><ROW><id>17781950</id><snippet>with open("filename.txt") as f:
    lines = [line.strip("\n") for line in f]
</snippet></ROW><ROW><id>17781950</id><snippet>with</snippet></ROW><ROW><id>17781950</id><snippet>with</snippet></ROW><ROW><id>17782240</id><snippet>import os, os.path, re
pathToFolder = 'jpegFiles' # edit it as per your need
os.chdir(pathToFolder)
for anypath in os.listdir():
    if os.path.isfile(anypath):
        if re.search(r'.jpe?g$', anypath):
            newname = re.sub(r'^([^\W_]+)(.*)(\d*.jpe?g)$',r'\1_\3', anypath)
            newname = re.sub(r'^(.*_)('')(.jpe?g)$',r'\g&lt;1&gt;1\3',newname)
            while os.path.isfile(newname):
                num = int(re.search(r'^.*_(\d+).jpe?g',newname).group(1))+1
                newname = re.sub(r'^(.*_)(\d+)(.jpe?g)$',r'\g&lt;1&gt;%d\3' % num,newname)
            print(newname) # use this to debug the code
            os.rename(anypath,newname)
</snippet></ROW><ROW><id>17782541</id><snippet>None</snippet></ROW><ROW><id>17782541</id><snippet>r = requests.get('http://www.justdial.com', proxies={'http': '222.255.169.74:8080'}, timeout=5);
</snippet></ROW><ROW><id>17782628</id><snippet>user = authenticate(username=email, password=password)
if user is None:
     user = User(username=email, password=password, email=email)
user_info = UserInfo.objects.get_or_create(user=user, email_id=email)
</snippet></ROW><ROW><id>17782789</id><snippet>&gt;&gt;&gt; s = 'FFFFoFob*&amp;%ar**^'
&gt;&gt;&gt; s.strip('!@#$%^&amp;*(FGHJKmn')
'oFob*&amp;%ar'
</snippet></ROW><ROW><id>17782789</id><snippet>fn.rstrip(".png")</snippet></ROW><ROW><id>17782898</id><snippet>string in l_:</snippet></ROW><ROW><id>17782898</id><snippet>l_.decode('utf-8')</snippet></ROW><ROW><id>17782959</id><snippet>java.lang.String</snippet></ROW><ROW><id>17782959</id><snippet>public int hashCode() {
    int h = hash;
    if (h == 0 &amp;&amp; count &gt; 0) {
        int off = offset;
        char val[] = value;
        int len = count;

        for (int i = 0; i &lt; len; i++) {
            h = 31*h + val[off++];
        }
        hash = h;
    }
    return h;
}
</snippet></ROW><ROW><id>17782959</id><snippet>s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
</snippet></ROW><ROW><id>17782959</id><snippet>18446744073709551615</snippet></ROW><ROW><id>17782959</id><snippet>mod</snippet></ROW><ROW><id>17782959</id><snippet>18446744073709551615</snippet></ROW><ROW><id>17783015</id><snippet>"Audio/file.midi"</snippet></ROW><ROW><id>17783015</id><snippet>"file.midi"</snippet></ROW><ROW><id>17783015</id><snippet>import os #this is a handy module with operating system functions

def getMusic(place): #where place is the name of the folder in this case "Audio/". Don't forget the slash!
    for file in os.listdir(place): #os.listdir returns a list of all the files in a directory. 
        pygame.mixer.music.load(place+file)
</snippet></ROW><ROW><id>17783016</id><snippet>FREETYPE_ROOT</snippet></ROW><ROW><id>17783016</id><snippet>FREETYPE_ROOT = "/usr/local"</snippet></ROW><ROW><id>17783463</id><snippet>logging</snippet></ROW><ROW><id>17783463</id><snippet>&gt;&gt;&gt; root = logging.getLogger()
&gt;&gt;&gt; root.manager.loggerDict.clear()
</snippet></ROW><ROW><id>17783463</id><snippet>loggerDict</snippet></ROW><ROW><id>17783463</id><snippet>manager</snippet></ROW><ROW><id>17783463</id><snippet>_private</snippet></ROW><ROW><id>17783728</id><snippet>clearSelection</snippet></ROW><ROW><id>17783765</id><snippet>unicode.translate()</snippet></ROW><ROW><id>17783765</id><snippet>None</snippet></ROW><ROW><id>17783765</id><snippet>replacements = {ord(k): ord(v) for k, v in replacements.iteritems()}
sentence = sentence.translate(replacements)
</snippet></ROW><ROW><id>17783765</id><snippet>&gt;&gt;&gt; replacements = {ord(k): ord(v) for k, v in replacements.iteritems()}
&gt;&gt;&gt; replacements
{8216: 39, 8217: 39, 8212: 45, 8221: 34, 8220: 34}
&gt;&gt;&gt; u'\u2019Hello world! \u2014 You rock!\u2018'.translate(replacements)
u"'Hello world! - You rock!'"
</snippet></ROW><ROW><id>17783797</id><snippet>\g&lt;number&gt;</snippet></ROW><ROW><id>17783797</id><snippet>\number</snippet></ROW><ROW><id>17783797</id><snippet>re.sub(r'^(\w+_)('')(\w+)$',r'\g&lt;1&gt;1\3',st)
</snippet></ROW><ROW><id>17783944</id><snippet>from collections import namedtuple
TupLeg = namedtuple('TupLeg', ['route', 'leg', 
                               'curr_time', 'min_time', 'max_time' 'cube'])

tup_legs = dict((result[0], result[1]), TupLeg(*result) for result in cur)
</snippet></ROW><ROW><id>17783944</id><snippet>tup_legs[(i,j)].curr_time
</snippet></ROW><ROW><id>17783981</id><snippet>def input_not_type_hidden(tag):
    return tag.name == 'input' and tag.get('type') != 'hidden'

soup.find_all(input_not_type_hidden)
</snippet></ROW><ROW><id>17784380</id><snippet>for i in range(0,6):
    links = browser.find_elements_by_css_selector(MENU_LINKS_CSS_SELECTOR)
    links[i].click()
</snippet></ROW><ROW><id>17784466</id><snippet>class.__subclasses__()</snippet></ROW><ROW><id>17784466</id><snippet>&gt;&gt;&gt; class Monster(object):
...     pass
... 
&gt;&gt;&gt; class Lochness(Monster):
...     pass
... 
&gt;&gt;&gt; class Yeti(Monster):
...     pass
... 
&gt;&gt;&gt; Monster.__subclasses__()
[&lt;class '__main__.Lochness'&gt;, &lt;class '__main__.Yeti'&gt;]
</snippet></ROW><ROW><id>17784466</id><snippet>.__subclasses__()</snippet></ROW><ROW><id>17784466</id><snippet>Yeti</snippet></ROW><ROW><id>17784466</id><snippet>del Yeti</snippet></ROW><ROW><id>17784466</id><snippet>.__subclasses__()</snippet></ROW><ROW><id>17784466</id><snippet>.__subclasses__()</snippet></ROW><ROW><id>17784466</id><snippet>class MonstersMeta(type):
    def __new__(metaclass, name, bases, namespace):
        cls = super(MonstersMeta, metaclass).__new__(metaclass, name, bases, namespace)
        if issubclass(cls, Monster) and not cls is Monster:
            Monster.monsters.append(cls)
        return cls

class Monster(object):
    __metaclass__ = MonstersMeta
    monsters = []

class Lochness(Monster):
    pass

class Yeti(Monster):
    pass
</snippet></ROW><ROW><id>17784466</id><snippet>&gt;&gt;&gt; class Monster(object):
...     __metaclass__ = MonstersMeta
...     monsters = []
... 
&gt;&gt;&gt; class Lochness(Monster):
...     pass
... 
&gt;&gt;&gt; class Yeti(Monster):
...     pass
... 
&gt;&gt;&gt; Monster.monsters
[&lt;class '__main__.Lochness'&gt;, &lt;class '__main__.Yeti'&gt;]
</snippet></ROW><ROW><id>17784466</id><snippet>def registered_monster(cls):
    Monster.monsters.append(cls)
    return cls

class Monster(object):
    monsters = []

@registered_monster
class Lochness(Monster):
    pass

@registered_monster
class Yeti(Monster):
    pass
</snippet></ROW><ROW><id>17784466</id><snippet>&gt;&gt;&gt; class Monster(object):
...     monsters = []
... 
&gt;&gt;&gt; @registered_monster
... class Lochness(Monster):
...     pass
... 
&gt;&gt;&gt; @registered_monster
... class Yeti(Monster):
...     pass
... 
&gt;&gt;&gt; Monster.monsters
[&lt;class '__main__.Lochness'&gt;, &lt;class '__main__.Yeti'&gt;]
</snippet></ROW><ROW><id>17784466</id><snippet>MonstersMeta</snippet></ROW><ROW><id>17784466</id><snippet>weakref</snippet></ROW><ROW><id>17784466</id><snippet>.__subclasses__()</snippet></ROW><ROW><id>17784773</id><snippet>my_window.ui</snippet></ROW><ROW><id>17784773</id><snippet>QMainWindow</snippet></ROW><ROW><id>17784773</id><snippet>MainWindow</snippet></ROW><ROW><id>17784773</id><snippet>clicked</snippet></ROW><ROW><id>17784773</id><snippet>about()</snippet></ROW><ROW><id>17784773</id><snippet>ui_my_window.py</snippet></ROW><ROW><id>17784773</id><snippet>pyuic4</snippet></ROW><ROW><id>17784773</id><snippet>$ pyuic4 my_window.ui -o ui_my_window.py
</snippet></ROW><ROW><id>17784773</id><snippet>ui_my_window.py</snippet></ROW><ROW><id>17784773</id><snippet>pyuic4</snippet></ROW><ROW><id>17784773</id><snippet>$ cat main.py

from PyQt4 import QtGui
# import the class created py pyuic4
from ui_my_window import Ui_MainWindow

class MyMainWindow(QtGui.QMainWindow):
  def __init__(self, parent=None)
    QtGui.QMainWindow.__init__(self, parent)
    self.ui = Ui_MainWindow()
    self.ui.setupUi(self)

    # Beware that all widgets are now available through the self.ui attribute
    # Getting the push button is written:
    # self.ui.pushButton

  def about(self):
    # this is the custom slot created in Designer
    QtGui.QMessageBox.about(self, "Test", "This is a test.")

if __name__ == "__main__":
  import sys
  app = QtGui.QApplication(sys.argv)
  myMainWindow = MyMainWindow()
  myMainWindow.show()
  sys.exit(app.exec_())
</snippet></ROW><ROW><id>17784773</id><snippet>      $ ls
      main.py ui_my_window.py my_window.ui
</snippet></ROW><ROW><id>17784773</id><snippet>python main.py</snippet></ROW><ROW><id>17784773</id><snippet>pyrcc4</snippet></ROW><ROW><id>17784773</id><snippet>$ cat main.py

import os
from PyQt4 import QtGui
# import the uic module
from PyQt4 import uic

class MyMainWindow(QtGui.QMainWindow):
  def __init__(self, parent=None)
    QtGui.QMainWindow.__init__(self, parent)
    # Load the ui file
    uic.loadUi(os.path.join(os.path.dirname(os.path.abspath(__file__)),"my_window.ui"), self)

    # Now in this case, all widgets can directly be accessed because the last argument
    # of loadUi is self.
    # Getting the push button is written:
    # self.pushButton

  def about(self):
    # this is the custom slot created in Designer
    QtGui.QMessageBox.about(self, "Test", "This is a test.")

if __name__ == "__main__":
  import sys
  app = QtGui.QApplication(sys.argv)
  myMainWindow = MyMainWindow()
  myMainWindow.show()
  sys.exit(app.exec_())
</snippet></ROW><ROW><id>17784773</id><snippet>      $ ls
      main.py my_window.ui
</snippet></ROW><ROW><id>17784773</id><snippet>python main.py</snippet></ROW><ROW><id>17784925</id><snippet>def search(li,ur):
    for u in li:
        if u.startswith(ur):
            return li.index(u)+1        
    return 0

def main():
    website = ['http://freshtutorial.com/install-xamp-ubuntu/', 'http://linuxg.net/how-to-install-xampp-on-ubuntu-13-04-12-10-12-04/', 'http://ubuntuforums.org/showthread.php?t=2149654', 'http://andyhat.co.uk/2012/07/installing-xampp-32bit-ubuntu-11-10-12-04/', 'http://askubuntu.com/questions/303068/error-with-tar-command-cannot-install-xampp-1-8-1-on-ubuntu-13-04', 'http://askubuntu.com/questions/73541/how-to-install-xampp']
    url = 'http://freshtutorial.com'
    print search(website,url)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17784926</id><snippet>def get_path(data, section_id):
    path = []
    while section_id is not None:
        section = next(s for s in data["sections"] if s["id"] == section_id)
        path.append(section["name"])
        section_id = section["parent_id"]
    return ", ".join(path)
</snippet></ROW><ROW><id>17784926</id><snippet>data</snippet></ROW><ROW><id>17784926</id><snippet>json.loads(json_text)</snippet></ROW><ROW><id>17784926</id><snippet>section_id</snippet></ROW><ROW><id>17784926</id><snippet>int</snippet></ROW><ROW><id>17784926</id><snippet>&gt;&gt;&gt; get_path(data, 156)
u'Add Storage Devices, Guided Configuration, Configuration'
</snippet></ROW><ROW><id>17784974</id><snippet>if __name__ == '__main__':
    init_db()  # or whatever you need to do

    import logging
    logging.basicConfig(filename='error.log',level=logging.DEBUG)

    app.run(host="0.0.0.0")
</snippet></ROW><ROW><id>17784974</id><snippet>INFO:werkzeug: * Running on http://0.0.0.0:5000/
</snippet></ROW><ROW><id>17784974</id><snippet>import logging, logging.config, yaml
logging.config.dictConfig(yaml.load(open('logging.conf')))
</snippet></ROW><ROW><id>17784974</id><snippet>logfile    = logging.getLogger('file')
logconsole = logging.getLogger('console')
logfile.debug("Debug FILE")
logconsole.debug("Debug CONSOLE")
</snippet></ROW><ROW><id>17784974</id><snippet>version: 1
formatters:
  hiformat:
    format: 'HI %(asctime)s - %(name)s - %(levelname)s - %(message)s'
  simple:
    format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: hiformat
    stream: ext://sys.stdout
  file:
    class: logging.FileHandler
    level: DEBUG
    formatter: simple
    filename: errors.log
loggers:
  console:
    level: DEBUG
    handlers: [console]
    propagate: no
  file:
    level: DEBUG
    handlers: [file]
    propagate: no
root:
  level: DEBUG
  handlers: [console,file]
</snippet></ROW><ROW><id>17784974</id><snippet>HI 2013-07-22 16:36:13,475 - console - DEBUG - Debug CONSOLE
HI 2013-07-22 16:36:13,477 - werkzeug - INFO -  * Running on http://0.0.0.0:5000/
</snippet></ROW><ROW><id>17784974</id><snippet>2013-07-22 16:36:13,475 - file - DEBUG - Debug FILE
2013-07-22 16:36:13,477 - werkzeug - INFO -  * Running on http://0.0.0.0:5000/
</snippet></ROW><ROW><id>17785098</id><snippet>try:</snippet></ROW><ROW><id>17785098</id><snippet>except Exception as inst:</snippet></ROW><ROW><id>17785098</id><snippet>inst.args</snippet></ROW><ROW><id>17785098</id><snippet>inst.args</snippet></ROW><ROW><id>17785098</id><snippet>&gt;&gt;&gt; try:
    open("epik.sjj")
except Exception as inst:
    d = inst


&gt;&gt;&gt; d
FileNotFoundError(2, 'No such file or directory')
&gt;&gt;&gt; d.args
(2, 'No such file or directory')
&gt;&gt;&gt; d.args[1]
'No such file or directory'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17785098</id><snippet>raise</snippet></ROW><ROW><id>17785098</id><snippet>sys.exit()</snippet></ROW><ROW><id>17785205</id><snippet>&gt;&gt;&gt; "{0:.2f}".format(123.678956)   # Or "{:.2f}".format(123.678956)
'123.68'
</snippet></ROW><ROW><id>17785205</id><snippet>plt.suptitle('Name:{0}, MJD:{1}, std dev &gt; {2:.2f}'.format(pname, mjd[i], rmslevel), fontsize=12, fontweight='bold')
</snippet></ROW><ROW><id>17785700</id><snippet>dirnames</snippet></ROW><ROW><id>17785700</id><snippet>def FindProjectSubfolders(masterPath, projectSubfolders):
    for currRoot, dirnames, filenames in os.walk(masterPath):
        # check if have a project subfolder
        foundMatch = False
        for dirname in dirnames:
            for projectSubfolder in projectSubfolders:
                if (dirname == projectSubfolder):
                    foundMatch = True;
                    break
        if (foundMatch == True):
            # what goes here to stop traversing "currRoot"
            # and iterate to the next one?
            dirnames[:] = []  # replace all indices in `dirnames` with the empty list
</snippet></ROW><ROW><id>17785700</id><snippet>dirnames</snippet></ROW><ROW><id>17785700</id><snippet>dirnames</snippet></ROW><ROW><id>17785812</id><snippet>eval()</snippet></ROW><ROW><id>17785812</id><snippet>vars(self)</snippet></ROW><ROW><id>17785812</id><snippet>def run_expression(self):
    return eval(self.expression, vars(self))
</snippet></ROW><ROW><id>17785812</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def run_expression(self):
...         return eval(self.expression, vars(self))
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.a = 2
&gt;&gt;&gt; f.b = 3
&gt;&gt;&gt; f.expression = 'a + b'
&gt;&gt;&gt; f.run_expression()
5
</snippet></ROW><ROW><id>17785835</id><snippet>lru_cache</snippet></ROW><ROW><id>17785835</id><snippet>&gt;&gt;&gt; def func():
...     print("foo")
...     return 1
... 
&gt;&gt;&gt; if func():
...     print(func())
...     
foo
foo
1
</snippet></ROW><ROW><id>17785835</id><snippet>func</snippet></ROW><ROW><id>17785835</id><snippet>&gt;&gt;&gt; from functools import lru_cache
&gt;&gt;&gt; func = lru_cache(1)(func)
&gt;&gt;&gt; if func():
...    print(func())
...     
foo
1
</snippet></ROW><ROW><id>17786111</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup(s)
&gt;&gt;&gt; td1 = soup.find('td', text='Current Listeners:')
&gt;&gt;&gt; td2 = td1.find_next_sibling('td')
&gt;&gt;&gt; td2.text
'28'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17786211</id><snippet>p</snippet></ROW><ROW><id>17786211</id><snippet>a = [i for i in a if i != p]
</snippet></ROW><ROW><id>17786211</id><snippet>list</snippet></ROW><ROW><id>17786237</id><snippet>^(?:(?:word1|word2|word3|word4|...)\b\s*)+\b$
</snippet></ROW><ROW><id>17786237</id><snippet>^      # Start of string
(?:    # Start of non-capturing group, first matching...
 (?:word1|word2|word3|word4|...) # ...one of these words,
 \b    # then matching the end of a word,
 \s*   # then matching zero or more whitespace
)+     # one or more times.
\b     # At the end, make sure that the end of the last word...
$      # ...is at the end of the string.
</snippet></ROW><ROW><id>17786237</id><snippet>\b</snippet></ROW><ROW><id>17786237</id><snippet>\s*</snippet></ROW><ROW><id>17786438</id><snippet>scipy.odr</snippet></ROW><ROW><id>17786438</id><snippet>scipy.odr</snippet></ROW><ROW><id>17786634</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>17786634</id><snippet>forms.py

class Form(forms.Form):
    field_1a = forms.CharField()
    field_1b = forms.CharField()
    field_2a = forms.CharField()
    field_2b = forms.CharField()

    def __init__(self, *args, **kwargs):
        super(Form, self).__init__(*args, **kwargs)
        helper1 = FormHelper()
        helper1.form_tag = False
        helper1.layout = Layout(
            Div(
                Field('field_1a'),
                Field('field_1b')
            )
        )

        helper2 = FormHelper()
        helper2.form_tag = False
        helper2.disable_csrf = True
        helper2.layout = Layout(
            Div(
                Field('field_2a'),
                Field('field_2b')
            )
        )
</snippet></ROW><ROW><id>17786634</id><snippet>&lt;body&gt;
&lt;form&gt;
{% crispy form form.helper1 %}
&lt;!-- A big bunch of other html --&gt;
{% crispy form form.helper2 %}
&lt;/form&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>17786676</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>17786676</id><snippet>Apache</snippet></ROW><ROW><id>17786676</id><snippet>nginx</snippet></ROW><ROW><id>17786803</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17786803</id><snippet>eval</snippet></ROW><ROW><id>17786803</id><snippet>from ast import literal_eval
with open('yourfile') as fin:
    your_list = literal_eval(fin.read())
</snippet></ROW><ROW><id>17786842</id><snippet>key</snippet></ROW><ROW><id>17786842</id><snippet>import re
table_data = ["vlan1", "usb0", "eth1", "vlan4", "vlan20"]

def get_key(v):
    prefix, index = re.match(r'([a-z]+)(\d+)', v).groups()
    return prefix, -int(index)

&gt;&gt;&gt; sorted(table_data, key=get_key, reverse=True)
['vlan1', 'vlan4', 'vlan20', 'usb0', 'eth1']
</snippet></ROW><ROW><id>17786842</id><snippet>def get_key(v):
    prefix, index = re.match(r'([a-z]+)(\d+)', v).groups()
    if prefix == 'vlan':
        prefix = '~'
    return prefix, -int(index)

&gt;&gt;&gt; table_data = ["vlan1", "usb0", "eth1", "vlan4", "vlan20", "wlan0"]
&gt;&gt;&gt; sorted(table_data, key=get_key, reverse=True)
['vlan1', 'vlan4', 'vlan20', 'wlan0', 'usb0', 'eth1']
</snippet></ROW><ROW><id>17786842</id><snippet>interfaces = {}
for iface in table_data:
    prefix, index = re.match(r'([a-z]+)(\d+)', iface).groups()
    interfaces.setdefault(prefix, []).append(iface)
for v in interfaces.values():
    v.sort(key=lambda x: int(re.search(r'\d+', x).group(0)))

&gt;&gt;&gt; interfaces
{'eth': ['eth1'],
 'usb': ['usb0'],
 'vlan': ['vlan1', 'vlan4', 'vlan20'],
 'wlan': ['wlan0']}

&gt;&gt;&gt; interface_types = interfaces.keys()
&gt;&gt;&gt; interface_types
['eth', 'vlan', 'wlan', 'usb']

&gt;&gt;&gt; interfaces['vlan']
['vlan1', 'vlan4', 'vlan20']
</snippet></ROW><ROW><id>17786933</id><snippet>def get_with_default(colour, L, default=''):
    temp = None
    for d in L:
        if d['color'] == colour:
            return d
        elif d['color'] == default:
            temp = d
    return temp
</snippet></ROW><ROW><id>17786933</id><snippet>&gt;&gt;&gt; get_with_default('blue', colours, 'green')
{'color': 'blue', 'owner': 'Luke'}
&gt;&gt;&gt; get_with_default('black', colours, 'green')
{'color': 'green', 'owner': 'Mark'}
</snippet></ROW><ROW><id>17787167</id><snippet>wx.StaticBox</snippet></ROW><ROW><id>17787167</id><snippet>OnPaint</snippet></ROW><ROW><id>17787275</id><snippet>class USBclient(Protocol):
    def connectionMade(self):
        global serServ
        serServ = self
        print 'Arduino device: ', serServ, ' is connected.'

    def cmdReceived(self, cmd):
        serServ.transport.write(cmd)
        print cmd, ' - sent to Arduino.'
        pass

    def dataReceived(self,data):      
        print 'USBclient.dataReceived called with:'
        print str(data)
</snippet></ROW><ROW><id>17787295</id><snippet>data.sort('COL1', inplace=True)
</snippet></ROW><ROW><id>17787497</id><snippet>the string format of the URL is an RFC-1738-style string.
</snippet></ROW><ROW><id>17787497</id><snippet>If the character corresponding to an octet is
reserved in a scheme, the octet must be encoded.  The characters ";",
"/", "?", ":", "@", "=" and "&amp;" are the characters which may be
 reserved for special meaning within a scheme.
</snippet></ROW><ROW><id>17787497</id><snippet>urlencode()</snippet></ROW><ROW><id>17787514</id><snippet>&gt;&gt;&gt; k = {'finance_pl':{'S':{'2008':45,'2009':34}}}
&gt;&gt;&gt; ui = 'finance_pl.S'
&gt;&gt;&gt; def getter(adict, key):
...     return reduce(dict.get, key.split('.'), adict)
... 
&gt;&gt;&gt; getter(k, ui)
{'2008': 45, '2009': 34}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17787593</id><snippet>link_1_parents = list(link1.parents)[::-1]
link_2_parents = list(link2.parents)[::-1]

common_parent = [x for x,y in zip(link_1_parents, link_2_parents) if x is y][-1]

print common_parent
print common_parent.name
</snippet></ROW><ROW><id>17787707</id><snippet>while True:
    try:
        num = int(input("Please enter a number: ")) # Note how I've added int()
        break # Breaks out of the loop. No need for a boolean.
    except ValueError:
        print("Wrong input. Try again.")
</snippet></ROW><ROW><id>17787707</id><snippet>list(map(int, str(num)))</snippet></ROW><ROW><id>17787707</id><snippet>int()</snippet></ROW><ROW><id>17787707</id><snippet>while</snippet></ROW><ROW><id>17787707</id><snippet>while num &gt; 9:
    num = sum(map(int, str(num)))
</snippet></ROW><ROW><id>17787707</id><snippet>[1, 0, 0]</snippet></ROW><ROW><id>17787707</id><snippet>sum()</snippet></ROW><ROW><id>17787707</id><snippet>while True:
    try:
        num = int(input("Please enter a number: ")) # Note how I've added int()
        break # Breaks out of the loop. No need for a boolean.
    except ValueError:
        print("Wrong input. Try again.")

while num &gt; 9: # While it is a two digit number
    num = sum(map(int, str(num)))
</snippet></ROW><ROW><id>17787707</id><snippet>a == True</snippet></ROW><ROW><id>17787707</id><snippet>b == False</snippet></ROW><ROW><id>17787834</id><snippet>DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.sqlite3', 
    'NAME': 'practice.db', # Just the name
    'USER': '',
    'PASSWORD': '',
    'HOST': '',             
    'PORT': '',             
        }
    }
</snippet></ROW><ROW><id>17787834</id><snippet>pwd</snippet></ROW><ROW><id>17787834</id><snippet>/Home/Development/Django/django_prac/practice/database/</snippet></ROW><ROW><id>17787875</id><snippet>package.module</snippet></ROW><ROW><id>17787875</id><snippet>anthony@claudia:~$ python
Python 2.7.3 (default, Jan  2 2013, 13:56:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join('one', 'two')
'one/two'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17787875</id><snippet>Python 2.7.3 (default, Jan  2 2013, 13:56:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.tmpfile()
&lt;open file '&lt;tmpfile&gt;', mode 'w+b' at 0x7f565495d4b0&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17787875</id><snippet>foo</snippet></ROW><ROW><id>17787962</id><snippet>rfind</snippet></ROW><ROW><id>17787962</id><snippet>rindex</snippet></ROW><ROW><id>17787962</id><snippet>&lt;</snippet></ROW><ROW><id>17787962</id><snippet>data = """[your data]"""
data_new = ""
for line in data.splitlines():
    i = line.rfind("&lt;")
    data_new += line if i == -1 else line[:i] + ". \n&lt;1&gt; " + line[i:] + "\n"
data_new = data_new.strip()
</snippet></ROW><ROW><id>17788001</id><snippet>'UID: {}\n'.format(stat(searchFolder).st_uid)</snippet></ROW><ROW><id>17788001</id><snippet>{}</snippet></ROW><ROW><id>17788001</id><snippet>{}: \n</snippet></ROW><ROW><id>17788001</id><snippet>{}</snippet></ROW><ROW><id>17788107</id><snippet>&gt;&gt;&gt; l = [10, 8, 4, 4, 13, 1, 1, 1, 1, 6, 1, 2, 1, 1, 0, 1, 5, 1, 5, 5, 2, 1, 0, 0, 4]
&gt;&gt;&gt; [1 if x &gt; 0 else 0 for x in l]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1]
</snippet></ROW><ROW><id>17788107</id><snippet>for i, x in enumerate(l):
    if x &gt;= 1: l[i] = 1
</snippet></ROW><ROW><id>17788371</id><snippet>setData</snippet></ROW><ROW><id>17788371</id><snippet>data</snippet></ROW><ROW><id>17788371</id><snippet>Dataframe</snippet></ROW><ROW><id>17788371</id><snippet>if has_panda</snippet></ROW><ROW><id>17788371</id><snippet>from PyQt4 import QtCore, QtGui

has_panda = False
try:
  import pandas as pd
  has_panda = True
except:
  pass

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, parent=None, *args):
        super(TableModel, self).__init__()
        self.datatable = None
        self.headerdata = None

    def update(self, dataIn):
        print 'Updating Model'
        self.datatable = dataIn
        print 'Datatable : {0}'.format(self.datatable)
        if has_panda:
          headers = dataIn.columns.values
        else:
          headers = dataIn.columns
        header_items = [
                    str(field)
                    for field in headers
        ]
        self.headerdata = header_items
        print 'Headers'
        print self.headerdata

    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self.datatable.index)

    def columnCount(self, parent=QtCore.QModelIndex()):
        if has_panda:
          return len(self.datatable.columns.values)
        else:
          return len(self.datatable.columns)

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if role == QtCore.Qt.DisplayRole:
            i = index.row()
            j = index.column()
            return QtCore.QVariant('{0}'.format(self.datatable.iget_value(i, j)))
        else:
            return QtCore.QVariant()

    def setData(self, index, value, role=QtCore.Qt.DisplayRole):
        if index.column() == 4:
            self.datatable.iset_value(index.row(), 4, value)
            return value
        return value

    def headerData(self, col, orientation, role):
        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:
            return '{0}'.format(self.headerdata[col])

    def flags(self, index):
        if index.column() == 4:
            return QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled
        else:
            return QtCore.Qt.ItemIsEnabled


class TableView(QtGui.QTableView):
    """
    A simple table to demonstrate the QComboBox delegate.
    """
    def __init__(self, *args, **kwargs):
        QtGui.QTableView.__init__(self, *args, **kwargs)
        self.setItemDelegateForColumn(4, CheckBoxDelegate(self))


class CheckBoxDelegate(QtGui.QStyledItemDelegate):
    """
    A delegate that places a fully functioning QCheckBox in every
    cell of the column to which it's applied
    """
    def __init__(self, parent):
        QtGui.QItemDelegate.__init__(self, parent)

    def createEditor(self, parent, option, index):
        '''
        Important, otherwise an editor is created if the user clicks in this cell.
        ** Need to hook up a signal to the model
        '''
        return None

    def paint(self, painter, option, index):
        '''
        Paint a checkbox without the label.
        '''

        checked = index.data().toBool()
        check_box_style_option = QtGui.QStyleOptionButton()

        if (index.flags() &amp; QtCore.Qt.ItemIsEditable) &gt; 0:
            check_box_style_option.state |= QtGui.QStyle.State_Enabled
        else:
            check_box_style_option.state |= QtGui.QStyle.State_ReadOnly

        if checked:
            check_box_style_option.state |= QtGui.QStyle.State_On
        else:
            check_box_style_option.state |= QtGui.QStyle.State_Off

        check_box_style_option.rect = self.getCheckBoxRect(option)

        # this will not run - hasFlag does not exist
        #if not index.model().hasFlag(index, QtCore.Qt.ItemIsEditable):
            #check_box_style_option.state |= QtGui.QStyle.State_ReadOnly

        check_box_style_option.state |= QtGui.QStyle.State_Enabled

        QtGui.QApplication.style().drawControl(QtGui.QStyle.CE_CheckBox, check_box_style_option, painter)

    def editorEvent(self, event, model, option, index):
        '''
        Change the data in the model and the state of the checkbox
        if the user presses the left mousebutton or presses
        Key_Space or Key_Select and this cell is editable. Otherwise do nothing.
        '''
        print 'Check Box editor Event detected : '
        print event.type()
        if not (index.flags() &amp; QtCore.Qt.ItemIsEditable) &gt; 0:
            return False

        print 'Check Box editor Event detected : passed first check'
        # Do not change the checkbox-state
        if event.type() == QtCore.QEvent.MouseButtonPress:
          return False
        if event.type() == QtCore.QEvent.MouseButtonRelease or event.type() == QtCore.QEvent.MouseButtonDblClick:
            if event.button() != QtCore.Qt.LeftButton or not self.getCheckBoxRect(option).contains(event.pos()):
                return False
            if event.type() == QtCore.QEvent.MouseButtonDblClick:
                return True
        elif event.type() == QtCore.QEvent.KeyPress:
            if event.key() != QtCore.Qt.Key_Space and event.key() != QtCore.Qt.Key_Select:
                return False
            else:
                return False

        # Change the checkbox-state
        self.setModelData(None, model, index)
        return True

    def setModelData (self, editor, model, index):
        '''
        The user wanted to change the old state in the opposite.
        '''
        print 'SetModelData'
        newValue = not index.data().toBool()
        print 'New Value : {0}'.format(newValue)
        model.setData(index, newValue, QtCore.Qt.EditRole)

    def getCheckBoxRect(self, option):
        check_box_style_option = QtGui.QStyleOptionButton()
        check_box_rect = QtGui.QApplication.style().subElementRect(QtGui.QStyle.SE_CheckBoxIndicator, check_box_style_option, None)
        check_box_point = QtCore.QPoint (option.rect.x() +
                            option.rect.width() / 2 -
                            check_box_rect.width() / 2,
                            option.rect.y() +
                            option.rect.height() / 2 -
                            check_box_rect.height() / 2)
        return QtCore.QRect(check_box_point, check_box_rect.size())


###############################################################################################################################
class Dataframe(dict):
  def __init__(self, columns, values):
    if len(values) != len(columns):
      raise Exception("Bad values")
    self.columns = columns
    self.values = values
    self.index = values[0]
    super(Dataframe, self).__init__(dict(zip(columns, values)))
    pass

  def iget_value(self, i, j):
    return(self.values[j][i])

  def iset_value(self, i, j, value):
    self.values[j][i] = value


if __name__=="__main__":
    from sys import argv, exit

    class Widget(QtGui.QWidget):
        """
        A simple test widget to contain and own the model and table.
        """
        def __init__(self, parent=None):
            QtGui.QWidget.__init__(self, parent)

            l=QtGui.QVBoxLayout(self)
            cdf = self.get_data_frame()
            self._tm=TableModel(self)
            self._tm.update(cdf)
            self._tv=TableView(self)
            self._tv.setModel(self._tm)
            for row in range(0, self._tm.rowCount()):
                self._tv.openPersistentEditor(self._tm.index(row, 4))
            self.setGeometry(300, 300, 550, 200)
            l.addWidget(self._tv)

        def get_data_frame(self):
            if has_panda:
              df = pd.DataFrame({'Name':['a','b','c','d'],
              'First':[2.3,5.4,3.1,7.7], 'Last':[23.4,11.2,65.3,88.8], 'Class':[1,1,2,1], 'Valid':[True, False, True, False]})
            else:
              columns = ['Name', 'First', 'Last', 'Class', 'Valid']
              values = [['a','b','c','d'], [2.3,5.4,3.1,7.7], [23.4,11.2,65.3,88.8], [1,1,2,1], [True, False, True, False]]
              df = Dataframe(columns, values)
            return df

    a=QtGui.QApplication(argv)
    w=Widget()
    w.show()
    w.raise_()
    exit(a.exec_())
</snippet></ROW><ROW><id>17788393</id><snippet>pip</snippet></ROW><ROW><id>17788393</id><snippet>git</snippet></ROW><ROW><id>17788393</id><snippet>pip install -e git+http://192.168.1.1/git/packagename#egg=packagename
</snippet></ROW><ROW><id>17788393</id><snippet>virtualenv</snippet></ROW><ROW><id>17788393</id><snippet>requirements.txt</snippet></ROW><ROW><id>17788393</id><snippet>-e git+http://192.168.1.1/git/packagename#egg=packagename
-e git+http://192.168.1.1/git/packagename2#egg=packagename2
</snippet></ROW><ROW><id>17788393</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>17788393</id><snippet>requirements.txt</snippet></ROW><ROW><id>17788393</id><snippet>virtualenv</snippet></ROW><ROW><id>17788393</id><snippet>virtualenv</snippet></ROW><ROW><id>17788393</id><snippet>virtualenv</snippet></ROW><ROW><id>17788481</id><snippet>def enter(self, person):
    unoccupied_facilities = [
        facility for facility in self.facilities
        if facility.occupied() == 0]
    if unoccupied_facilities:
        unoccupied_facilities[0].occupy(person)
    else:
        self.queue.append(person)
        Person.population.remove(person)
</snippet></ROW><ROW><id>17788481</id><snippet>.occupy()</snippet></ROW><ROW><id>17788481</id><snippet>Person.population</snippet></ROW><ROW><id>17788481</id><snippet>self.queue</snippet></ROW><ROW><id>17788481</id><snippet>Person.population</snippet></ROW><ROW><id>17788481</id><snippet>example34</snippet></ROW><ROW><id>17788481</id><snippet>queue = list(new_restroom.queue)
# Clear the queue to prepare for sorting
new_restroom.queue = []
# Take each person from the temporary queue and try adding
# them a facility
while bool(queue):
    # De-queue the person at the front of the line, place in an
    # unoccupied facility or, if none, back to the restroom queue
    new_restroom.enter(queue.pop(0))
</snippet></ROW><ROW><id>17788481</id><snippet>unoccupied_facilities[0].occupy(person)</snippet></ROW><ROW><id>17788481</id><snippet>Person.population</snippet></ROW><ROW><id>17788481</id><snippet>person</snippet></ROW><ROW><id>17788481</id><snippet>while bool(queue):
    # De-queue the person at the front of the line, place in an
    # unoccupied facility or, if none, back to the restroom queue
    person = queue.pop(0)
    Person.population.append(person)
    new_restroom.enter(person)
</snippet></ROW><ROW><id>17788481</id><snippet>$ python2.7 example34.py 
{100: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0]}
</snippet></ROW><ROW><id>17788707</id><snippet>#Modal
&lt;div class="modal hide fade" id="addBookDialog"&gt;
     &lt;div class="modal-header"&gt;
        &lt;button class="close" data-dismiss="modal"&gt;×&lt;/button&gt;
        &lt;h3 class="hdrtitle"&gt;This is the header&lt;/h3&gt;
     &lt;/div&gt;
     &lt;div class="modal-body"&gt;
         &lt;input type="text" name="nameId" id="nameId" /&gt;
         &lt;p&gt;some content&lt;/p&gt;

     &lt;/div&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>17788707</id><snippet>$('.modal .hdrtitle').html('This is the header');
</snippet></ROW><ROW><id>17788707</id><snippet>$('.modal').modal('toggle');
</snippet></ROW><ROW><id>17788777</id><snippet>execute_from_command_line</snippet></ROW><ROW><id>17788777</id><snippet>#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "&lt;package&gt;.&lt;subpackage&gt;.settings") #path to the settings py file
    from django.core.management import execute_from_command_line
    execute_from_command_line(sys.argv)
</snippet></ROW><ROW><id>17788777</id><snippet>#!/usr/bin/env python
import os

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "&lt;package&gt;.&lt;subpackage&gt;.settings") #path to the settings py file
    from django.core.management import execute_from_command_line
    execute_from_command_line() # by default sys.argv argument is taken
</snippet></ROW><ROW><id>17788777</id><snippet>execute_from_command_line</snippet></ROW><ROW><id>17788890</id><snippet>int</snippet></ROW><ROW><id>17788890</id><snippet>with open('path/to/file') as infile:
    allNums = [[int(num) for num in line.strip().split()[1:]] for line in infile]
</snippet></ROW><ROW><id>17788890</id><snippet>int</snippet></ROW><ROW><id>17788890</id><snippet>import itertools
with open('path/to/file') as infile:
    allNums = [[int(num) for num in line.strip().split()[1:]] for line in infile]
nullValue = None
allNums = list(itertools.izip.from_iterable(allNums, fillvalue=None)) # python 2.x
# allNums = list(itertools.zip.from_iterable(allNums, fillvalue=None)) # python 3.x
</snippet></ROW><ROW><id>17789129</id><snippet>from tkinter import *
import random
from tkinter.messagebox import showinfo

class BubbleFrame:
    ##############################################
    def __init__(self, root, name):
        self.name = name
    ###############################################
        root.title("Math Bubbles")
        self.bubbles = {}
        self.score = 0
        Button(root, text="Start", width=8, command=self.initialize_bubbles).pack()
        Button(root, text="Quit", width=8, command=quit).pack()
        self.canvas = Canvas(root, width=800, height=650, bg='#afeeee')
        self.canvas.create_text(400, 30, fill="darkblue", font="Times 20 italic bold", text="Click the bubbles that are multiples of two.")
        self.current_score = self.canvas.create_text(200, 60, fill="darkblue", font="Times 15 italic bold", text="Your score is: 0")
        self.canvas.pack()

    def initialize_bubbles(self):
        for each_no in range(1, 21):
            xval = random.randint(5, 765)
            yval = random.randint(5, 615)
            oval_id = self.canvas.create_oval(xval, yval, xval + 30, yval + 30,fill="#00ffff", outline="#00bfff", width=5, tags="bubble")
            text_id = self.canvas.create_text(xval + 15, yval + 15, text=each_no, tags="bubble")
            self.canvas.tag_bind("bubble", "&lt;Button-1&gt;", lambda x: self.click(x))
            self.bubbles[oval_id] = (xval, yval, 0, 0, each_no, text_id)

    def click(self, event):
        if self.canvas.find_withtag(CURRENT):
            item_uid = event.widget.find_closest(event.x, event.y)[0]
            is_even = False
            try:
                self.bubbles[item_uid]
            except KeyError:
                for key, value in self.bubbles.iteritems():
                    if item_uid == value[5]:
                        if value[4] % 2 == 0:
                            is_even = True
                        self.canvas.delete(key)
                        self.canvas.delete(item_uid)
            else:
                if self.bubbles[item_uid][4] % 2 == 0:
                    is_even = True
                self.canvas.delete(item_uid)
                self.canvas.delete(self.bubbles[item_uid][5])
            if is_even:
                self.score += 1
            else:
                self.score -= 1

            if self.score == 10:
                #########################################
                showinfo("Winner", "You won %s!" % self.name)
                #########################################

        self.canvas.delete(self.current_score)
        self.current_score = self.canvas.create_text(200, 60, fill="darkblue", font="Times 15 italic bold", text="Your score is: %s"%self.score)

    def loop(self, root):
        for oval_id, (x, y, dx, dy, each_no, text_id) in self.bubbles.items():
            dx += random.randint(-1, 1)
            dy += random.randint(-1, 1)
            dx, dy = max(-5, min(dx, 5)), max(-5, min(dy, 5))
            if not 0 &lt; x &lt; 770:
                dx = -dx
            if not 0 &lt; y &lt; 620:
                dy = -dy
            self.canvas.move(oval_id, dx, dy)
            self.canvas.move(text_id, dx, dy)
            self.bubbles[oval_id] = (x + dx, y + dy, dx, dy, each_no, text_id)
        root.after(100, self.loop, root)

if __name__ == "__main__":

    root = Tk()
    ###############################################################
    Label(root, text="Welcome to Math bubbles, what is your name?").pack()
    name = Entry(root)
    name.pack()
    def submit(name, root):
        root.destroy()
        root = Tk()
        Label(root, text="Hello %s, press the Start button to begin.\n" % name).pack()
        BubbleFrame(root, name).loop(root)
    Button(root, text="Ok", command=lambda: submit(name.get(), root)).pack()
    ######################################################################
    root.mainloop()
</snippet></ROW><ROW><id>17789129</id><snippet>name</snippet></ROW><ROW><id>17789129</id><snippet>__init__</snippet></ROW><ROW><id>17789129</id><snippet>BubbleFrame</snippet></ROW><ROW><id>17789129</id><snippet> self.name = name
</snippet></ROW><ROW><id>17789129</id><snippet>BubbleFrame</snippet></ROW><ROW><id>17789129</id><snippet>Toplevel</snippet></ROW><ROW><id>17789129</id><snippet>Toplevel</snippet></ROW><ROW><id>17789189</id><snippet>&lt;body&gt;
&lt;p&gt;{{ profile.user.username }}&lt;/p&gt;
&lt;p&gt;{{ profile.security_question }}&lt;/p&gt;
&lt;p&gt;{{ profile.work_street}}&lt;/p&gt;
&lt;p&gt;{{ profile.work_suburb}}&lt;/p&gt;
&lt;p&gt;{{ profile.work_state}}&lt;/p&gt;
&lt;p&gt;{{ profile.work_postcode}}&lt;/p&gt;
&lt;p&gt;{{ profile.work_country }}&lt;/p&gt;
..... etc

&lt;script&gt;
 var address = "{{ profile.work_street }}{{profile.work_suburb}}{{profile.work_postcode}}";
 alert(address);
&lt;/script&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>17789446</id><snippet>values = [("entry1", "value1"), ("entry2", "value2"), ("entry3", "value3")]
</snippet></ROW><ROW><id>17789607</id><snippet>bool</snippet></ROW><ROW><id>17789607</id><snippet>bool</snippet></ROW><ROW><id>17789607</id><snippet>True</snippet></ROW><ROW><id>17789607</id><snippet>1</snippet></ROW><ROW><id>17789607</id><snippet>False</snippet></ROW><ROW><id>17789607</id><snippet>0</snippet></ROW><ROW><id>17789607</id><snippet>int</snippet></ROW><ROW><id>17789607</id><snippet>np.greater()</snippet></ROW><ROW><id>17789607</id><snippet>out=</snippet></ROW><ROW><id>17789607</id><snippet>bool</snippet></ROW><ROW><id>17789607</id><snippet>[~]
|1&gt; import numpy as np

[~]
|2&gt; x = np.arange(10)

[~]
|3&gt; output = np.empty(x.shape, dtype=int)

[~]
|4&gt; np.greater(x, 5, out=output)
array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])

[~]
|5&gt; output
array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])
</snippet></ROW><ROW><id>17790011</id><snippet>from pandas import *
import numpy as np
import pylab
from matplotlib import pyplot as plt

df = pandas.DataFrame(np.random.randn(10, 8), columns=list('abcdefgh'))

print df

vals = np.around(df.values,2)
normal = plt.normalize(vals.min()-1, vals.max()+1)

fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111, frameon=True, xticks=[], yticks=[])

the_table=plt.table(cellText=vals, rowLabels=df.index, colLabels=df.columns, 
                colWidths = [0.03]*vals.shape[1], loc='center', 
                cellColours=plt.cm.RdYlGn(normal(vals)))


pylab.savefig('colorscaletest.pdf', bbox_inches=0)
</snippet></ROW><ROW><id>17790043</id><snippet> (2) statement -&gt; definition SEMICOLON
(14) definition -&gt; fn_def
</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>definition</snippet></ROW><ROW><id>17790043</id><snippet>definition</snippet></ROW><ROW><id>17790043</id><snippet>statement</snippet></ROW><ROW><id>17790043</id><snippet>SEMICOLON</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>definition</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>SEMICOLON</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>(16) fn_def -&gt; DEFN ID ARROW type invariants statement
</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>statement</snippet></ROW><ROW><id>17790043</id><snippet>definition</snippet></ROW><ROW><id>17790043</id><snippet>expression</snippet></ROW><ROW><id>17790043</id><snippet>;</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>statement</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>definition</snippet></ROW><ROW><id>17790043</id><snippet>statement</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>expression</snippet></ROW><ROW><id>17790043</id><snippet>var_def</snippet></ROW><ROW><id>17790043</id><snippet>statement</snippet></ROW><ROW><id>17790043</id><snippet>}</snippet></ROW><ROW><id>17790043</id><snippet>compound_statement</snippet></ROW><ROW><id>17790043</id><snippet>fn_def</snippet></ROW><ROW><id>17790043</id><snippet>var_def</snippet></ROW><ROW><id>17790043</id><snippet>var_def</snippet></ROW><ROW><id>17790152</id><snippet>with zipfile.ZipFile('/path/to/file', 'r') as z:
    f = z.open('member.csv')
    table = pd.io.parsers.read_table(f, ...)
</snippet></ROW><ROW><id>17790152</id><snippet>filepath_or_buffer</snippet></ROW><ROW><id>17790152</id><snippet>read_table</snippet></ROW><ROW><id>17790398</id><snippet>pow(7, 93, 13)</snippet></ROW><ROW><id>17790398</id><snippet>8</snippet></ROW><ROW><id>17790398</id><snippet>pow(7, 13, 93)</snippet></ROW><ROW><id>17790398</id><snippet>19</snippet></ROW><ROW><id>17790398</id><snippet>&gt;&gt;&gt; def ssp(b, n, m):
...     ssp = 1
...     while n&gt;0:
...         if n % 2 == 1:
...             ssp = b*ssp % m
...         b = b**2 % m
...         n = n // 2
...     return ssp
... 
&gt;&gt;&gt; ssp(7, 13, 93)
19
</snippet></ROW><ROW><id>17790438</id><snippet>&gt;&gt;&gt; 'On écrit ça dans un fichier.'.encode('utf8').decode('latin1')
'On Ã©crit Ã§a dans un fichier.'
</snippet></ROW><ROW><id>17790438</id><snippet># -*- coding: latin-1 -*-
</snippet></ROW><ROW><id>17790438</id><snippet>s='On écrit ça dans un fichier.'
</snippet></ROW><ROW><id>17790438</id><snippet>print(s.encode('unicode_escape'))</snippet></ROW><ROW><id>17790438</id><snippet>b'On \\xc3\\xa9crit \\xc3\\xa7a dans un fichier.'
</snippet></ROW><ROW><id>17790438</id><snippet>b'On \\xe9crit \\xe7a dans un fichier.'
</snippet></ROW><ROW><id>17790438</id><snippet>\uxxxx</snippet></ROW><ROW><id>17790438</id><snippet>s = 'On \u00e9crit \u007aa dans un fichier.'
</snippet></ROW><ROW><id>17790438</id><snippet>\xaa</snippet></ROW><ROW><id>17790438</id><snippet>s = 'On \xe9crit \x7aa dans un fichier.'
</snippet></ROW><ROW><id>17791393</id><snippet>c = a[:-3] + b
</snippet></ROW><ROW><id>17791393</id><snippet>[:-3]</snippet></ROW><ROW><id>17791393</id><snippet>[0:len(a) - 3]</snippet></ROW><ROW><id>17791393</id><snippet>a</snippet></ROW><ROW><id>17791393</id><snippet>a[-3:] = b
</snippet></ROW><ROW><id>17791393</id><snippet>a</snippet></ROW><ROW><id>17791393</id><snippet>b</snippet></ROW><ROW><id>17791724</id><snippet>r'''(?:        # Non-capturing group
      "[^"]*"  # A quote, followed by not-quotes, followed by a quote
      |        # or
      [^"#]    # not a quote or a hash
    )          # end group
    *          # Match quoted strings and not-quote-not-hash characters until...
    (#)        # the comment begins!
'''
</snippet></ROW><ROW><id>17791724</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>17791724</id><snippet>match.start(1)</snippet></ROW><ROW><id>17792053</id><snippet>from ilogue.fexpect import expect, expecting, run

def sample():

    private_key = "password"
    hostname = "ubuntu"
    output_dir = '/etc/ssl/' + hostname
    prompts = []
    prompts += expect('Enter pass phrase for private.key:',private_key)
    prompts += expect('Verifying - Enter pass phrase for private.key:private_key',private_key)
    prompts += expect('Enter pass phrase for %s/server.key:' % output_dir, private_key)
    prompts += expect('Country Name \(2 letter code\) \[AU\]:','AU')
    prompts += expect('State or Province Name \(full name\) \[Some-State\]:','State')
    prompts += expect('Locality Name \(eg, city\) \[\]:','City')
    prompts += expect('Organization Name \(eg, company\) \[Internet Widgits Pty Ltd\]:','Company')
    prompts += expect('Organizational Unit Name \(eg, section\) \[\]:','Section')
    prompts += expect('Common Name \(e.g. server FQDN or YOUR name\) \[\]:','FQDN')
    prompts += expect('Email Address \[\]:','email@foo.com')
    prompts += expect('A challenge password \[\]:','challenge_password')
    prompts += expect('An optional company name \[\]:','optional_company')

    with expecting(prompts):
        run('openssl genrsa -des3 -out %s/server.key 2048' % output_dir)
        run('openssl req -new -key %s/server.key -out %s/server.csr' % (output_dir, output_dir))

# fab sample -H localhost
</snippet></ROW><ROW><id>17792169</id><snippet>import os
f = open(os.path.join(os.environ['TEMP'], 'file.txt'))
</snippet></ROW><ROW><id>17792169</id><snippet>import os
f = open(os.path.expandvars(r'%TEMP%\file.txt'))
</snippet></ROW><ROW><id>17792230</id><snippet>signalgraph</snippet></ROW><ROW><id>17792230</id><snippet>vb = signalgraph.plotItem.vb
</snippet></ROW><ROW><id>17792331</id><snippet># Python 2.
# Change xrange to range for Python 3.

import time

start_time = time.time()

limit = 100000000  # 1/10 your limit.
skip  = 1000       # Batch size.

with open('numlistbegin', 'w') as fh:
    for i in xrange(0, limit, skip):
        batch = ''.join('%010d\n' % j for j in xrange(i, i + skip, 1))
        fh.write(batch)

print time.time() - start_time   # 73 sec. (106 sec. without batching).
</snippet></ROW><ROW><id>17792400</id><snippet>GridItem.setPen()</snippet></ROW><ROW><id>17792451</id><snippet>clearContents()</snippet></ROW><ROW><id>17792451</id><snippet>self.tableWidget.setItem(0,0,QtGui.QTableWidgetItem("name"))
self.tableWidget.setItem(0,1,QtGui.QTableWidgetItem("column_1"))
self.tableWidget.setItem(0,2,QtGui.QTableWidgetItem("column_2"))
self.tableWidget.setItem(0,3,QtGui.QTableWidgetItem("column_3"))
self.tableWidget.setItem(0,4,QtGui.QTableWidgetItem("column_4"))
</snippet></ROW><ROW><id>17792451</id><snippet>self.tableWidget.setHorizontalHeaderItem(0, QtGui.QTableWidgetItem("name"))
self.tableWidget.setHorizontalHeaderItem(1, QtGui.QTableWidgetItem("column_1"))
self.tableWidget.setHorizontalHeaderItem(2, QtGui.QTableWidgetItem("column_2"))
self.tableWidget.setHorizontalHeaderItem(3, QtGui.QTableWidgetItem("column_3"))
self.tableWidget.setHorizontalHeaderItem(4, QtGui.QTableWidgetItem("column_4"))
</snippet></ROW><ROW><id>17792451</id><snippet>class Ui_Form(QtGui.QDialog):

    def __init__(self, parent=None):
        super(Ui_Form, self).__init__(parent)
        self.setObjectName(_fromUtf8("Form"))
        self.resize(761, 637)
        self.pushButton = QtGui.QPushButton()
        self.pushButton.setGeometry(QtCore.QRect(0, 550, 201, 31))
        self.pushButton.setObjectName(_fromUtf8("pushButton"))
        self.connect(self.pushButton, QtCore.SIGNAL("released()"), self.get_output1_statement)

        self.tableWidget = QtGui.QTableWidget()
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 741, 551))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding,     QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setObjectName(_fromUtf8("tableWidget"))
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(50)
        self.tableWidget.setHorizontalHeaderItem(0, QtGui.QTableWidgetItem("name"))
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.tableWidget)
        layout.addWidget(self.pushButton)
        self.setLayout(layout)
        for i in range(1, 5):
            self.tableWidget.setHorizontalHeaderItem(i,     QtGui.QTableWidgetItem("column_{0}".format(i)))
        self.retranslateUi()

    def retranslateUi(self):
        self.setWindowTitle(_translate("Form", "Form", None))
        self.pushButton.setText(_translate("Form", "button1", None))

    def get_output1_statement(self):
        self.tableWidget.clearContents()
        self.tableWidget.setItem(0,0,QtGui.QTableWidgetItem("add some data"))

app = QtGui.QApplication(sys.argv)
form = Ui_Form()
form.show()
app.exec_()
</snippet></ROW><ROW><id>17792463</id><snippet>re.Unicode</snippet></ROW><ROW><id>17792463</id><snippet>URLSpec</snippet></ROW><ROW><id>17792463</id><snippet>__init__</snippet></ROW><ROW><id>17792463</id><snippet>re</snippet></ROW><ROW><id>17792463</id><snippet>(?u)</snippet></ROW><ROW><id>17792463</id><snippet>re.UNICODE</snippet></ROW><ROW><id>17792475</id><snippet>from flask.ext.testing import TestCase

from myapp import create_app, db

class MyTest(TestCase):

    SQLALCHEMY_DATABASE_URI = "sqlite://"
    TESTING = True

    def create_app(self):

        # pass in test configuration
        return create_app(self)

    def setUp(self):

        db.create_all()

    def tearDown(self):

        db.session.remove()
        db.drop_all()
</snippet></ROW><ROW><id>17792683</id><snippet>get_localizer()</snippet></ROW><ROW><id>17792683</id><snippet>Localizer.translate()</snippet></ROW><ROW><id>17792683</id><snippet>from pyramid.i18n import get_localizer

@view_config(route_name='transtest', renderer='json')
def transtest_view(request):
    message = _('temp-test', default='Temporary test', domain='myapp')
    return {'myvar': get_localizer(request).translate(message)}
</snippet></ROW><ROW><id>17792683</id><snippet>TranslationStringFactory</snippet></ROW><ROW><id>17792683</id><snippet>from pyramid.i18n import TranslationStringFactory

myapp_domain = TranslationStringFactory(domain='myapp')
</snippet></ROW><ROW><id>17792683</id><snippet>from my.project import myapp_domain as _

# ....

message = _('temp-test', default='Temporary test')
</snippet></ROW><ROW><id>17792940</id><snippet>numpoints = 1</snippet></ROW><ROW><id>17792940</id><snippet>plot[0]</snippet></ROW><ROW><id>17792940</id><snippet>import pylab as plt
from numpy import random

plots, legend_names = [], []

x1 = [10,20,30]
y1 = [10,20,30]
# some fake data
x2 = [15, 25, 35]
y2 = [15, 25, 35]
x_vars = [x1, x2]
y_vars = [y1, y2]
legend_names = ['a','b']

# create figure
plt.figure()
plt.hold(True)

plots = []
proxies = []


for x_var, y_var in zip(x_vars, y_vars):
    markerline, stemlines, baseline = plt.stem(x_var, y_var)
    plots.append((markerline, stemlines, baseline))

    c = color = random.rand(3,1)

    plt.setp(stemlines, linewidth=2, color=c)     # set stems to random colors
    plt.setp(markerline, 'markerfacecolor', 'b')    # make points blue 

    #plot proxy artist
    h, = plt.plot(1,1,color=c)
    proxies.append(h)
# hide proxies    
plt.legend(proxies, legend_names, loc='best', numpoints=1)
for h in proxies:
    h.set_visible(False)
plt.show()
</snippet></ROW><ROW><id>17793284</id><snippet>from openpyxl import Workbook
wb = Workbook(optimized_write = True)

ws = wb.create_sheet()

# now we'll fill it with 10k rows x 200 columns
for irow in xrange(10000):
    ws.append(['%d' % i for i in xrange(200)])

wb.save('new_big_file.xlsx') # don't forget to save!
</snippet></ROW><ROW><id>17793284</id><snippet>constant_memory</snippet></ROW><ROW><id>17793313</id><snippet>__init__</snippet></ROW><ROW><id>17793313</id><snippet>self</snippet></ROW><ROW><id>17793313</id><snippet>class Newsletter(Base):
    __tablename__ = 'newsletter'

    email = Column(String(255), primary_key=True)
    timestamp = Column(DateTime(timezone=False), default=datetime.utcnow,
                       server_default=expression.func.now())

   def __init__(self, email):
       self.emailID = email

    def __repr__(self):
        return '''&lt;Newsletter('{email}', registered on: '{date}')&gt;
               '''.format(email=self.email,
                          date=self.timestamp)
</snippet></ROW><ROW><id>17793313</id><snippet>NewsLetter</snippet></ROW><ROW><id>17793313</id><snippet>declarative_base</snippet></ROW><ROW><id>17793313</id><snippet>def constructorFunc(self, email):
    self.emailID = email
</snippet></ROW><ROW><id>17793313</id><snippet>Base = declarative_base(constructor = constructorFunc)</snippet></ROW><ROW><id>17793323</id><snippet>import datetime as dt

d = {0: "(oh)",
     1: "one",
     2: "two",
     3: "three",
     4: "four",
     5: "five",
     6: "six",
     7: "seven",
     8: "eight",
     9: "nine",
     10: "ten",
     11: "eleven",
     12: "twelve",
     13: "thirteen",
     14: "fourteen",
     15: "fifteen",
     16: "sixteen",
     17: "seventeen",
     18: "eighteen",
     19: "nineteen",
     20: "twenty",
     30: "thirty",
     40: "forty",
     50: "fifty",
     60: "sixty"}

def display_time(t):
    Hour = d[int( t[0:2])] if t[0:2] != "00" else d[12]
    Suffix = 'a.m.' if d[int( t[7:9])] == Hour else 'p.m.'

    if  t[3] == "0":
        if  t[4] == "0":
            Minute = ""
        else:
            Minute = d[0] + " " + d[int(t[4])]
    else:
        Minute = d[int(t[3])*10] + '-' + d[int(t[4])]
    print 'The time is', Hour, Minute, Suffix

display_time(dt.datetime.now().strftime('%I %M %H'))
display_time("07 45 19")
display_time("11 06 23")
display_time("00 00 00")
</snippet></ROW><ROW><id>17793377</id><snippet>np.diff(read_data[:, list(combinations(range(read_data.shape[1]), 2))])[..., 0]
</snippet></ROW><ROW><id>17793399</id><snippet>for key, elem in testDict.items():
    print key, elem
</snippet></ROW><ROW><id>17793399</id><snippet>for i in testDict:
     print i, testDict[i]
</snippet></ROW><ROW><id>17793557</id><snippet>input()</snippet></ROW><ROW><id>17793557</id><snippet>&gt;&gt;&gt; distance = input()
10
&gt;&gt;&gt; distance
'10' &lt;- note the quotes here
&gt;&gt;&gt; distance &lt; 10
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: str() &lt; int()
</snippet></ROW><ROW><id>17793557</id><snippet>int(string)</snippet></ROW><ROW><id>17793557</id><snippet>&gt;&gt;&gt; distance = int(distance)
&gt;&gt;&gt; distance
10 &lt;- no quotes here
&gt;&gt;&gt; distance &lt; 10
False
</snippet></ROW><ROW><id>17793635</id><snippet>class A:
    @classmethod
    def GetMembers(cls):
        return dict(vars(cls))

class B(A):
    FOO = 'foobar'
    BAR = 'barfoo'
</snippet></ROW><ROW><id>17793635</id><snippet>&gt;&gt;&gt; A.GetMembers()
{'__module__': '__main__', '__doc__': None, 'GetMembers': &lt;classmethod object at
 0x0286D130&gt;}
&gt;&gt;&gt; B.GetMembers()
{'__module__': '__main__', 'FOO': 'foobar', 'BAR': 'barfoo', '__doc__': None}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17793635</id><snippet>cls.__bases__</snippet></ROW><ROW><id>17793635</id><snippet>class A:
    @classmethod
    def GetMembers(cls):
      d = dict()
      for basecls in cls.__bases__:
        if hasattr(basecls,"GetMembers"):
          d.update(basecls.GetMembers()) #call inherited GetMembers
        else:
          d.update(dict(vars(basecls))) #no GetMembers inherited from basecls so just get its vars
      d.update( dict(vars(cls)))
      return d

&gt;&gt;&gt; class B(A):
...     FOO = 'foobar'
...     BAR = 'barfoo'
...
&gt;&gt;&gt; class C(A):
...     FOOBAR = "whatever"
...
&gt;&gt;&gt; class X(B,A):
...     FOO = 'foobar2'
...     COLOR = 'red'
...
&gt;&gt;&gt; class X(B,C):
...     FOO = 'foobar2'
...     COLOR = 'red'
...
&gt;&gt;&gt; X.GetMembers()
{'__module__': '__main__', 'BAR': 'barfoo', 'COLOR': 'red', 'FOOBAR': 'whatever'
, 'FOO': 'foobar2', '__doc__': None}
</snippet></ROW><ROW><id>17793767</id><snippet>Lib</snippet></ROW><ROW><id>17793767</id><snippet>print</snippet></ROW><ROW><id>17793767</id><snippet>$ java -jar jython-standalone-2.7-b1.jar
Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
[Java HotSpot(TM) Client VM (Oracle Corporation)] on java1.7.0_03
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print "hello"
hello
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17793784</id><snippet>0</snippet></ROW><ROW><id>17793784</id><snippet>length - 1</snippet></ROW><ROW><id>17793784</id><snippet>i = count - 1</snippet></ROW><ROW><id>17793784</id><snippet>int</snippet></ROW><ROW><id>17793784</id><snippet>while</snippet></ROW><ROW><id>17793784</id><snippet>for</snippet></ROW><ROW><id>17793784</id><snippet>for</snippet></ROW><ROW><id>17793784</id><snippet>for ch in info:
    sys.stdout.write(ch)
    sys.stdout.flush()   # as mawimawi suggests, if you don't do this, it will
                         # actually just come out all on one line at once.
    time.sleep(0.2)
</snippet></ROW><ROW><id>17793784</id><snippet>"hello world"</snippet></ROW><ROW><id>17793799</id><snippet>EF BB BF</snippet></ROW><ROW><id>17793799</id><snippet>BOM</snippet></ROW><ROW><id>17794000</id><snippet>rows, cols = 100, 100
items = 1000

rho = np.zeros((rows, cols))
rho_coeff, dt, i_frac, j_frac = np.random.rand(4, items)
pi = np.random.randint(1, rows-1, size=(items,))
pj = np.random.randint(1, cols-1, size=(items,))

# The following code assumes pi and pj have the same dtype
pij = np.column_stack((pi, pj)).view((np.void,
                                      2*pi.dtype.itemsize)).ravel()

unique_coords, indices = np.unique(pij, return_inverse=True)
unique_coords = unique_coords.view(pi.dtype).reshape(-1, 2)
data = rho_coeff*dt*i_frac*j_frac
binned_data = np.bincount(indices, weights=data)
rho[tuple(unique_coords.T)] += binned_data
</snippet></ROW><ROW><id>17794000</id><snippet>ip1_frac, jp1_frac = np.random.rand(2, items)

unique_coords[:, 0] += 1
data =  rho_coeff*dt*ip1_frac*j_frac
binned_data = np.bincount(indices, weights=data)
rho[tuple(unique_coords.T)] += binned_data

unique_coords[:, 1] += 1
data =  rho_coeff*dt*ip1_frac*jp1_frac
binned_data = np.bincount(indices, weights=data)
rho[tuple(unique_coords.T)] += binned_data

unique_coords[:, 0] -= 1
data =  rho_coeff*dt*i_frac*jp1_frac
binned_data = np.bincount(indices, weights=data)
rho[tuple(unique_coords.T)] += binned_data
</snippet></ROW><ROW><id>17794070</id><snippet>Y</snippet></ROW><ROW><id>17794070</id><snippet>x[i] &lt; y[i] x M (where M is some big number, say 10,000) for 1 in 1..25
</snippet></ROW><ROW><id>17794070</id><snippet>x=[]
y=[]

for index in range(25):
    y[index] = LpVariable("y"+str(index), 0, 1) #binary variables
    prob += x[index] &lt;= 10000 * y[index], "If x%s is non-zero, then y%s is forced to be 1",%index, %index

prob += lpSum([y[i] for i in range(25)]) &gt;= 10,"Ensuring at least 10 items are non-zero"
</snippet></ROW><ROW><id>17794201</id><snippet>from ZODB.blob import Blob
blob = Blob()
bfile = blob.open('w')
bfile.write(REQUEST.file)
bfile.close()
# save the blob somewhere now
context.myfile = blob
</snippet></ROW><ROW><id>17794493</id><snippet>\s*([^\s;]+(?:\s+[^\s;]+)*)\s+([^\s;]+)\s*(?:;|$)
</snippet></ROW><ROW><id>17794493</id><snippet>$2, $1
</snippet></ROW><ROW><id>17794543</id><snippet>$ python nosuchfile.py
python: can't open file 'nosuchfile.py': [Errno 2] No such file or directory
$ python nosuchfile.py^M
': [Errno 2] No such file or directory
</snippet></ROW><ROW><id>17794543</id><snippet>$ python verylongfilenamethatdoesnotexist.py^M
': [Errno 2] No such file or directoryamethatdoesnotexist.py
</snippet></ROW><ROW><id>17794577</id><snippet>import urllib
import httplib2

http = httplib2.Http()

url = '&lt;your post url&gt;'   
body = {'img': 'all your image bytes...'}
headers = {'Content-type': 'application/x-www-form-urlencoded'}
response, content = http.request(url, 'POST', headers=headers, body=urllib.urlencode(body))
</snippet></ROW><ROW><id>17794577</id><snippet>class Handler(webapp2.RequestHandler):
  def post(self):
    image_bytes = self.request.POST.get("img")
    logging.info(image_bytes) # output is empty string
</snippet></ROW><ROW><id>17794586</id><snippet>from lxml import etree as ET

def create_library(lines):
    library = ET.Element('LIBRARY')
    for line in lines:
        split_line = line.split(',')
        library.append(create_book(split_line))
    return library

def create_book(split_line):
    book = ET.Element('BOOK',ID=split_line[0])
    book.append(create_chapter(split_line))
    return book

def create_chapter(split_line):
    chapter = ET.Element('CHAPTER',ID=split_line[1])
    chapter.append(create_sentence(split_line))
    return chapter

def create_sentence(split_line):
    sentence = ET.Element('SENT',ID=split_line[2])
    sentence.append(create_word(split_line))
    return sentence

def create_word(split_line):
    word = ET.Element('WORD',ID=split_line[3])
    word.text = split_line[4]
    return word
</snippet></ROW><ROW><id>17794586</id><snippet>def expantree():
    lines = txtfile.readlines()
    library = create_library(lines)
    ET.ElementTree(lib).write(xmlfile)
</snippet></ROW><ROW><id>17794586</id><snippet>def expantree():
    lines = txtfile.readlines()
    f = open(xmlfile,'wb')
    f.write('&lt;LIBRARY&gt;')
    for line in lines:
        split_line = line.split(',')
        book = create_book(split_line)
        f.write(ET.tostring(book))
    f.write('&lt;/LIBRARY&gt;')
    f.close()
</snippet></ROW><ROW><id>17794596</id><snippet>z = [x] + (y if isinstance(y, list) else [y])
</snippet></ROW><ROW><id>17794596</id><snippet>y</snippet></ROW><ROW><id>17794700</id><snippet>contour</snippet></ROW><ROW><id>17794700</id><snippet>CS=contour(x, y, jres_spec,arange(min_val,max_val,(max_val-min_val)/steps))
</snippet></ROW><ROW><id>17794700</id><snippet>xlim</snippet></ROW><ROW><id>17794700</id><snippet>ylim</snippet></ROW><ROW><id>17794744</id><snippet>return</snippet></ROW><ROW><id>17794744</id><snippet>return [int(elem) for elem in s[1:-1].split(',')] # Or map(int, s[1:-1].split(',')) 
</snippet></ROW><ROW><id>17794745</id><snippet>/usr/local/bin/mpirun -np 4 /home/mike/bin/Linux-ifort_XE_openmpi-1.6_emt64/v2_0_1/Pcrystal &lt;/dev/null &gt; mgo.out 2&gt;&amp;1 &amp;
</snippet></ROW><ROW><id>17794800</id><snippet>LANGUAGE_CODE = 'en-us'
</snippet></ROW><ROW><id>17794800</id><snippet>en-us</snippet></ROW><ROW><id>17794800</id><snippet>en</snippet></ROW><ROW><id>17794827</id><snippet>def total_enrollment(a):
    total_students = 0
    all_in_all = 0
    for e in a:
        total_students = total_students + e[1]
        all_in_all += (e[1] * e[2])
    return (total_students, all_in_all)
</snippet></ROW><ROW><id>17794827</id><snippet>&gt;&gt;&gt;result = total_enrollment(usa_univs)
&gt;&gt;&gt;print result[0]
77285
&gt;&gt;&gt;print result[1]
3058581079
</snippet></ROW><ROW><id>17794903</id><snippet>item</snippet></ROW><ROW><id>17794903</id><snippet>b</snippet></ROW><ROW><id>17794903</id><snippet>for indx, item in enumerate(a):
    c.append(item + [b[indx]])
</snippet></ROW><ROW><id>17794903</id><snippet>zip()</snippet></ROW><ROW><id>17794903</id><snippet>for a_item, b_item in zip(a, b):
    c.append(a_item + [b_item])
</snippet></ROW><ROW><id>17794903</id><snippet>c</snippet></ROW><ROW><id>17794903</id><snippet>c = [a_item + [b_item] for a_item, b_item in zip(a, b)]
</snippet></ROW><ROW><id>17794903</id><snippet>&gt;&gt;&gt; a = [[2, 1, 4, 5, 0], [3, 6, 5, 4, 8], [2, 1, 4, 7, 8], [3, 4, 9, 5, 6], [7, 5, 2, 1, 1]]
&gt;&gt;&gt; b = [2, 3, 5, 0, 8]
&gt;&gt;&gt; [a_item + [b_item] for a_item, b_item in zip(a, b)]
[[2, 1, 4, 5, 0, 2], [3, 6, 5, 4, 8, 3], [2, 1, 4, 7, 8, 5], [3, 4, 9, 5, 6, 0], [7, 5, 2, 1, 1, 8]]
</snippet></ROW><ROW><id>17794991</id><snippet>myvar = b if a else c
</snippet></ROW><ROW><id>17795049</id><snippet>output1 = {...}
outputs = (output1, output2, output3)

for index, output in enumerate(outputs):
    filename = 'output_data_{0}'.format(index)

    #this will write file in directory relative to script location
    with open(filename, 'w') as f:
        f.write('Example {0}:\r\n'.format(index))

        for issue in data["issues"]:
            # assumes issue is of type dict
            # assumes issues has appropriate keys
            # assumes values are of string type
            key = issue['key']
            summary = issue['fields']['summary']

            f.writelines((key, summary, "\r\n",))
</snippet></ROW><ROW><id>17795109</id><snippet>HomeView</snippet></ROW><ROW><id>17795109</id><snippet>IndexView</snippet></ROW><ROW><id>17795109</id><snippet>IndexView</snippet></ROW><ROW><id>17795109</id><snippet>HomeView</snippet></ROW><ROW><id>17795109</id><snippet>{% include %}</snippet></ROW><ROW><id>17795109</id><snippet>HomeView</snippet></ROW><ROW><id>17795109</id><snippet>IndexView</snippet></ROW><ROW><id>17795109</id><snippet>HomeView</snippet></ROW><ROW><id>17795109</id><snippet>base_categories = "My categories are: %(categories)s."
base_right_panel = "This is the right panel.  Here are other fields before categories."
</snippet></ROW><ROW><id>17795109</id><snippet>base_right_panel = base_right_panel + base_categories
</snippet></ROW><ROW><id>17795109</id><snippet>def home_view(request):
    context = {}
    return base_right_panel % context

def index_view(request)
    context = {'categories': ['a', 'b', 'c']}
    return base_categories % context
</snippet></ROW><ROW><id>17795109</id><snippet>categories</snippet></ROW><ROW><id>17795109</id><snippet>HomeView</snippet></ROW><ROW><id>17795109</id><snippet>HomeView</snippet></ROW><ROW><id>17795109</id><snippet>get_context_data</snippet></ROW><ROW><id>17795109</id><snippet>IndexView</snippet></ROW><ROW><id>17795109</id><snippet>IndexView</snippet></ROW><ROW><id>17795160</id><snippet>characterRect= pygame.Rect(x,y,l,w)
</snippet></ROW><ROW><id>17795160</id><snippet>characterRect</snippet></ROW><ROW><id>17795160</id><snippet>characterRect</snippet></ROW><ROW><id>17795160</id><snippet>y</snippet></ROW><ROW><id>17795160</id><snippet>colliderect</snippet></ROW><ROW><id>17795160</id><snippet>if</snippet></ROW><ROW><id>17795408</id><snippet>re.sub</snippet></ROW><ROW><id>17795408</id><snippet>import re

s = "There was a cow at home. home=mary cowname=betsy date=10-jan-2013"

d = {}

def add(m):
    d[m.group(1)] = m.group(2)

s = re.sub(r'(\w+)=(\S+)', add, s)
d['theSentence'] = s.strip()

print d
</snippet></ROW><ROW><id>17795408</id><snippet>d = {}
d['theSentence'] = re.sub(r'(\w+)=(\S+)',
    lambda m: d.setdefault(m.group(1), m.group(2)) and '',
    s).strip()
</snippet></ROW><ROW><id>17795408</id><snippet>findall</snippet></ROW><ROW><id>17795408</id><snippet>rx = '(\w+)=(\S+)|(\S.+?)(?=\w+=|$)'
d = {
    a or 'theSentence': (b or c).strip()
    for a, b, c in re.findall(rx, s)
}
print d
</snippet></ROW><ROW><id>17795640</id><snippet>&gt;&gt;&gt; import md5
&gt;&gt;&gt; word="g4m3"
&gt;&gt;&gt; md5.new(word).hexdigest()        # no newline
'26e4477a0fa9cb24675379331dba9c84'
&gt;&gt;&gt; md5.new(word + '\n').hexdigest() # with a newline
'fe9c25d61e56054ea87703e30c672d91'
</snippet></ROW><ROW><id>17795640</id><snippet>.rstrip('\n')</snippet></ROW><ROW><id>17795640</id><snippet>.strip()</snippet></ROW><ROW><id>17795640</id><snippet>&gt;&gt;&gt; word = 'g4m3\n'
&gt;&gt;&gt; md5.new(word).hexdigest()
'fe9c25d61e56054ea87703e30c672d91'
&gt;&gt;&gt; word = word.strip()
&gt;&gt;&gt; md5.new(word).hexdigest()
'26e4477a0fa9cb24675379331dba9c84'
</snippet></ROW><ROW><id>17795644</id><snippet>x = y = []</snippet></ROW><ROW><id>17795644</id><snippet>x</snippet></ROW><ROW><id>17795644</id><snippet>y</snippet></ROW><ROW><id>17795644</id><snippet>&gt;&gt;&gt; x = y = []
&gt;&gt;&gt; id(x)
43842656
&gt;&gt;&gt; id(y)
43842656
</snippet></ROW><ROW><id>17795644</id><snippet>&gt;&gt;&gt; x = []
&gt;&gt;&gt; y = []
&gt;&gt;&gt; for sublist in lst:
        x.append(sublist[0])
        y.append(sublist[1])


&gt;&gt;&gt; x
[3, 3, 3]
&gt;&gt;&gt; y
[1, 2, 3]
</snippet></ROW><ROW><id>17795644</id><snippet>x,y = zip(*lst)</snippet></ROW><ROW><id>17795644</id><snippet>list</snippet></ROW><ROW><id>17795750</id><snippet>restrict_xpaths</snippet></ROW><ROW><id>17795750</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>17795750</id><snippet>restrict_xpaths=('//div[@id="content"]',) 
</snippet></ROW><ROW><id>17795994</id><snippet>*/1 * * * * /usr/local/bin/python2.7 \
            ~/webapps/Folder/Project/manage.py UpdateModels \
            &gt;&gt; ~/webapps/Folder/Project/logs/unpack.log 2&gt;&amp;1
</snippet></ROW><ROW><id>17795994</id><snippet>*/1 * * * * (cd ~/webapps/Folder/Project/; \
             /usr/local/bin/python2.7 manage.py UpdateModels) \
             &gt;&gt; ~/webapps/Folder/Project/logs/unpack.log 2&gt;&amp;1
</snippet></ROW><ROW><id>17795994</id><snippet>manage.py</snippet></ROW><ROW><id>17796186</id><snippet>source</snippet></ROW><ROW><id>17796186</id><snippet>/bin/bash/</snippet></ROW><ROW><id>17796186</id><snippet>from fabric.api import *


def init():
    local('virtualenv --no-site-packages venv')

    venv_command = '/bin/bash venv/bin/activate'
    pip_command = 'venv/bin/pip install mysql-python django South'
    local(venv_command + ' &amp;&amp; ' + pip_command)
</snippet></ROW><ROW><id>17796186</id><snippet>run/sudo</snippet></ROW><ROW><id>17796186</id><snippet>prefix</snippet></ROW><ROW><id>17796231</id><snippet>m</snippet></ROW><ROW><id>17796231</id><snippet>n</snippet></ROW><ROW><id>17796231</id><snippet>m</snippet></ROW><ROW><id>17796231</id><snippet>import numpy as np
import random

# m denotes the number of examples here, not the number of features
def gradientDescent(x, y, theta, alpha, m, numIterations):
    xTrans = x.transpose()
    for i in range(0, numIterations):
        hypothesis = np.dot(x, theta)
        loss = hypothesis - y
        # avg cost per example (the 2 in 2*m doesn't really matter here.
        # But to be consistent with the gradient, I include it)
        cost = np.sum(loss ** 2) / (2 * m)
        print("Iteration %d | Cost: %f" % (i, cost))
        # avg gradient per example
        gradient = np.dot(xTrans, loss) / m
        # update
        theta = theta - alpha * gradient
    return theta


def genData(numPoints, bias, variance):
    x = np.zeros(shape=(numPoints, 2))
    y = np.zeros(shape=numPoints)
    # basically a straight line
    for i in range(0, numPoints):
        # bias feature
        x[i][0] = 1
        x[i][1] = i
        # our target variable
        y[i] = (i + bias) + random.uniform(0, 1) * variance
    return x, y

# gen 100 points with a bias of 25 and 10 variance as a bit of noise
x, y = genData(100, 25, 10)
m, n = np.shape(x)
numIterations= 100000
alpha = 0.0005
theta = np.ones(n)
theta = gradientDescent(x, y, theta, alpha, m, numIterations)
print(theta)
</snippet></ROW><ROW><id>17796231</id><snippet>m</snippet></ROW><ROW><id>17796231</id><snippet>Iteration 99997 | Cost: 47883.706462
Iteration 99998 | Cost: 47883.706462
Iteration 99999 | Cost: 47883.706462
[ 29.25567368   1.01108458]
</snippet></ROW><ROW><id>17796265</id><snippet>OrderedDict</snippet></ROW><ROW><id>17796265</id><snippet>__missing__</snippet></ROW><ROW><id>17796265</id><snippet>from collections import OrderedDict

class DefaultOrderedDict(OrderedDict):
    def __missing__(self, key):
        self[key] = type(self)()
        return self[key]
</snippet></ROW><ROW><id>17796265</id><snippet>dict</snippet></ROW><ROW><id>17796265</id><snippet>__missing__</snippet></ROW><ROW><id>17796265</id><snippet>KeyError</snippet></ROW><ROW><id>17796265</id><snippet>defaultdict</snippet></ROW><ROW><id>17796265</id><snippet>dict</snippet></ROW><ROW><id>17796265</id><snippet>d[key]</snippet></ROW><ROW><id>17796265</id><snippet>__missing__()</snippet></ROW><ROW><id>17796265</id><snippet>d[key]</snippet></ROW><ROW><id>17796265</id><snippet>d[key]</snippet></ROW><ROW><id>17796265</id><snippet>__missing__(key)</snippet></ROW><ROW><id>17796265</id><snippet>__missing__()</snippet></ROW><ROW><id>17796265</id><snippet>__missing__()</snippet></ROW><ROW><id>17796265</id><snippet>KeyError</snippet></ROW><ROW><id>17796265</id><snippet>__missing__()</snippet></ROW><ROW><id>17796265</id><snippet>&gt;&gt;&gt; d = DefaultOrderedDict()
&gt;&gt;&gt; d['a']['b']['c'] = 'd'
&gt;&gt;&gt; d['a'][1][2] = 3
&gt;&gt;&gt; d['f']['g']['e'] = 'g'
&gt;&gt;&gt; d['f'][5][6] = 7
&gt;&gt;&gt; d['a']['foo']['bar'] = 'hello world'
&gt;&gt;&gt; [(i, j, k, d[i][j][k]) for i in d for j in d[i] for k in d[i][j]]
[('a', 'b', 'c', 'd'), ('a', 1, 2, 3), ('a', 'foo', 'bar', 'hello world'), ('f', 'g', 'e', 'g'), ('f', 5, 6, 7)]
</snippet></ROW><ROW><id>17796439</id><snippet>import xlrd

workbook = xlrd.open_workbook("input.xls")
worksheet = workbook.sheet_by_name("Sheet1")

for row in xrange(worksheet.nrows):
    value_first = worksheet.cell_value(row, 0)
    value_second = worksheet.cell_value(row, 1)
    if value_first in value_second:
        print row
    else:
        print 'no'
</snippet></ROW><ROW><id>17796511</id><snippet>result</snippet></ROW><ROW><id>17796511</id><snippet>module.save</snippet></ROW><ROW><id>17796511</id><snippet>import multiprocessing as mp
import itertools as IT
import logging

logger = mp.log_to_stderr(logging.DEBUG)
logger.setLevel(logging.DEBUG)

if __name__ == '__main__':
    pool = mp.Pool()
    for module, result in IT.izip(modules, results):
        pool.apply_async(module.save, args=(result, options))

    pool.close()
    pool.join()
</snippet></ROW><ROW><id>17796511</id><snippet>import logging    
logger = logging.getLogger(__name__)

def save():
    logger.debug('Starting save')
    ...
    logger.debug('Exiting save')
</snippet></ROW><ROW><id>17796511</id><snippet>logger.setLevel(logging.DEBUG)</snippet></ROW><ROW><id>17796511</id><snippet>logging.disable(logging.CRITICAL)
</snippet></ROW><ROW><id>17796539</id><snippet>csv</snippet></ROW><ROW><id>17796539</id><snippet>from __future__ import print_function # only for module main() test function
import csv
import sys
PY3 = sys.version_info.major &gt; 2

def read_properties(filename, delimiter=':'):
    ''' Reads a given properties file with each line of the format key=value.
        Returns a dictionary containing the pairs.
            filename -- the name of the file to be read
    '''
    open_kwargs = dict(mode='r', newline='') if PY3 else dict(mode='rb')
    with open(filename, **open_kwargs) as csvfile:
        reader = csv.reader(csvfile, delimiter=delimiter, escapechar='\\',
                            quoting=csv.QUOTE_NONE)
        return {row[0]: row[1] for row in reader}

def write_properties(filename, dictionary, delimiter=':'):
    ''' Writes the provided dictionary in key sorted order to a properties
        file with each line of the format key&lt;delimiter&gt;value
            filename -- the name of the file to be written
            dictionary -- a dictionary containing the key/value pairs.
    '''
    open_kwargs = dict(mode='w', newline='') if PY3 else dict(mode='wb')
    with open(filename, **open_kwargs) as csvfile:
        writer = csv.writer(csvfile, delimiter=delimiter, escapechar='\\',
                            quoting=csv.QUOTE_NONE)
        writer.writerows(sorted(dictionary.items()))

def main():
    data = {
        'Answer': '6*7=42',
        'Knights': 'Ni!',
        'Spam': 'Eggs',
    }

    filename='test.properties'
    write_properties(filename, data)
    newdata = read_properties(filename)

    print('Read in: ')
    print(newdata)
    print()

    with open(filename, 'rb') as propfile:
        contents = propfile.read()
    print('File contents: (%d bytes)' % len(contents))
    print(repr(contents))

    print(['Failure!', 'Success!'][data == newdata])

if __name__ == '__main__':
     main()
</snippet></ROW><ROW><id>17796570</id><snippet>In [11]: x = numpy.array([0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])

In [12]: xf = x.reshape((2, 2, 2), order='F')
</snippet></ROW><ROW><id>17796570</id><snippet>xf</snippet></ROW><ROW><id>17796570</id><snippet>2x2x2</snippet></ROW><ROW><id>17796570</id><snippet>x</snippet></ROW><ROW><id>17796570</id><snippet>x</snippet></ROW><ROW><id>17796570</id><snippet>In [22]: xf[0,:,1] = [11, 12]

In [23]: x
Out[23]: array([  0.,   1.,   2.,   3.,  11.,   5.,  12.,   7.])
</snippet></ROW><ROW><id>17796570</id><snippet>x</snippet></ROW><ROW><id>17796751</id><snippet>json</snippet></ROW><ROW><id>17796751</id><snippet>&gt;&gt;&gt; d = {"queue_time": "1374523279747", "object_id": "...", "source_bucket": "ap1-cache"}
&gt;&gt;&gt; d
{'queue_time': '1374523279747', 'source_bucket': 'ap1-cache', 'object_id': '...'}

&gt;&gt;&gt; import json
&gt;&gt;&gt; print json.dumps(d)
{"queue_time": "1374523279747", "source_bucket": "ap1-cache", "object_id": "..."}
</snippet></ROW><ROW><id>17796751</id><snippet>&gt;&gt;&gt; t = [u"Hello", ("World", "!"), u"\xa0"]
&gt;&gt;&gt; t
[u'Hello', ('World', '!'), u'\xa0']
&gt;&gt;&gt; print json.dumps(t)
["Hello", ["World", "!"], "\u00a0"]
</snippet></ROW><ROW><id>17796844</id><snippet>from google.appengine.ext import deferred
deferred.defer(yourfile.your_fetcher_method, _target='mybackend')
</snippet></ROW><ROW><id>17797034</id><snippet>&gt;&gt;&gt; print(yaml.load("{age: wise, name: wut}"))
{'name': 'wut', 'age': 'wise'}
</snippet></ROW><ROW><id>17797034</id><snippet>&gt;&gt;&gt; print(yaml.dump({'name': 'wut', 'age': 'wise'}, default_flow_style=False))
age: wise
name: wut
</snippet></ROW><ROW><id>17797058</id><snippet>data['AttrA']</snippet></ROW><ROW><id>17797058</id><snippet>sorted()</snippet></ROW><ROW><id>17797058</id><snippet>zip()</snippet></ROW><ROW><id>17797058</id><snippet>base = data['AttrA'] # keep a reference to the original sort order
for key in data:
    data[key] = [x for (y,x) in sorted(zip(base, data[key]))]
</snippet></ROW><ROW><id>17797058</id><snippet>&gt;&gt;&gt; data = {'AttrA': [2, 4, 1, 3], 'AttrB': [12, 43, 23, 25], 'AttrC': ['a', 'd', 'f', 'z']}
&gt;&gt;&gt; base = data['AttrA']
&gt;&gt;&gt; for key in data:
...     data[key] = [x for (y,x) in sorted(zip(base, data[key]))]
... 
&gt;&gt;&gt; data
{'AttrB': [23, 12, 25, 43], 'AttrC': ['f', 'a', 'z', 'd'], 'AttrA': [1, 2, 3, 4]}
</snippet></ROW><ROW><id>17797247</id><snippet>ii = np.array([1,2])</snippet></ROW><ROW><id>17797247</id><snippet>n.where((A == ii).all(axis=1))[0]
</snippet></ROW><ROW><id>17797247</id><snippet>A == ii</snippet></ROW><ROW><id>17797247</id><snippet>ii</snippet></ROW><ROW><id>17797247</id><snippet>A</snippet></ROW><ROW><id>17797247</id><snippet>.all(axis=1)</snippet></ROW><ROW><id>17797247</id><snippet>np.where</snippet></ROW><ROW><id>17797247</id><snippet>np.hstack([np.where((A == values[i]).all(axis=1))[0] for i in xrange(len(values))])
</snippet></ROW><ROW><id>17797247</id><snippet>values</snippet></ROW><ROW><id>17797247</id><snippet>np.where((np.expand_dims(A, -1) == values.T).all(axis=1).any(axis=1))[0]
</snippet></ROW><ROW><id>17797270</id><snippet>B</snippet></ROW><ROW><id>17797270</id><snippet>B.__init__</snippet></ROW><ROW><id>17797270</id><snippet>B</snippet></ROW><ROW><id>17797270</id><snippet>B</snippet></ROW><ROW><id>17797270</id><snippet>B</snippet></ROW><ROW><id>17797270</id><snippet>class A():
    def __init__(self):
        self.logger = Logger.get() #this works fine didn't include the Logger class

    def log(self):
        b = B(self.logger)

class B():
    def __init__(self, logger):  # pass the logger when instantiating B
        self.a = 'hello'
</snippet></ROW><ROW><id>17797623</id><snippet>auto_now_add=True</snippet></ROW><ROW><id>17797623</id><snippet>class Photographer(models.Model):
    # as above, but:
    likes = models.ManyToManyField('Photo', through='PhotoLikes', related_name='likedby', blank=True)

class PhotoLikes(models.Model):
    class Meta:
        db_table = 'djangoapp_photographer_likes'
        # or whatever your table is called
    photo = models.ForeignKey(Photo)
    photographer = models.ForeignKey(Photographer)
    liked = models.DateTimeField(null=True, blank=True, auto_now_add=True)
</snippet></ROW><ROW><id>17797658</id><snippet>def insert_names(self, names):
    # `names` is a list of dicts

    inserted_ids = []

    for name in names:
        name['created'] = datetime.datetime.now()
        _id = self.myorders.insert(name)
        inserted_ids.append(_id)

    return inserted_ids
</snippet></ROW><ROW><id>17797658</id><snippet>names = [
    {'name': name0, 'qty': qty0, ...}
    {'name': name1, 'qty': qty1, ...}
    {'name': name2, 'qty': qty2, ...}
    ...
]
insert_names(names)
</snippet></ROW><ROW><id>17797694</id><snippet>lineage</snippet></ROW><ROW><id>17797694</id><snippet>def family_lineage(familytree, lineage):
    trees = [familytree]
    while trees:
        tree = trees.pop()
        trees.extend(t for t in tree.values() if t)
        for name in lineage:
            if name not in tree:
                break
            tree = tree[name]
        else:
            return True
    return False
</snippet></ROW><ROW><id>17797701</id><snippet>import sys
print sys.getrecursionlimit()
</snippet></ROW><ROW><id>17797701</id><snippet>sys.setrecursionlimit(10000) # 10000 is just an example
</snippet></ROW><ROW><id>17797765</id><snippet>LoopingCall</snippet></ROW><ROW><id>17797765</id><snippet>LoopingCall</snippet></ROW><ROW><id>17797765</id><snippet>from somewhere import GPIO

from twisted.internet import reactor, task
from autobahn.websocket import WebSocketServerFactory, \
                               WebSocketServerProtocol, \
                               listenWS

class EchoServerProtocol(WebSocketServerProtocol):

    def check_movement(self):
        print "checking sensor"
        sensor_state = GPIO.input(11)
        if sensor_state == 1:
            self.send_m("sensor detected movement")

    def connectionMade(self):
        WebSocketServerProtocol.connectionMade(self)
        self.movement_checker = task.LoopingCall(self.check_movement)
        self.movement_checker.start(4)

    def onMessage(self, msg, binary):
        self.movement_checker.stop()

    def send_m(self, msg):
        self.sendMessage(msg)

if __name__ == '__main__':
   factory = WebSocketServerFactory("ws://localhost:9000")
   factory.protocol = EchoServerProtocol
   listenWS(factory)
   reactor.run()
</snippet></ROW><ROW><id>17797765</id><snippet>LoopingCall</snippet></ROW><ROW><id>17797765</id><snippet>Deferred</snippet></ROW><ROW><id>17797765</id><snippet>LoopingCall</snippet></ROW><ROW><id>17797765</id><snippet>Deferred</snippet></ROW><ROW><id>17797765</id><snippet>check_movement</snippet></ROW><ROW><id>17797765</id><snippet>def check_movement(self):
    from twisted.internet.threads import deferToThread
    def get_input():
        # this is run in a thread
        return GPIO.input(11)
    def check_input(sensor_state):
        # this is back on the main thread, and can safely call send_m
        if sensor_state == 1:
            self.send_m("sensor movement detected")
    return deferToThread(get_input).addCallback(check_input)
</snippet></ROW><ROW><id>17797982</id><snippet>os.walk</snippet></ROW><ROW><id>17797982</id><snippet>os.access</snippet></ROW><ROW><id>17797982</id><snippet>import os

def get_files(path, option_dirs, option_subdirs, option_no_ro, option_no_hid):
    outfiles = []
    for root, dirs, files in os.walk(path):
        if option_no_hid:
            # In linux, hidden files start with .
            files = [ f for f in files if not f.startswith('.') ]
        if option_no_ro:
            # Use os.path.access to check if the file is readable
            # We have to use os.path.join(root, f) to get the full path
            files = [ f for f in files if os.access(os.path.join(root, f), os.R_OK) ]
        if option_dirs:
            # Use os.path.join again
            outfiles.extend([ os.path.join(root, f) for f in files ])
        else:
            outfiles.extend(files)
        if not option_subdirs:
            # If we don't want to get subdirs, then we just exit the first
            # time through the for loop
            return outfiles
    return outfiles
</snippet></ROW><ROW><id>17798060</id><snippet>in</snippet></ROW><ROW><id>17798060</id><snippet>if fields[0] in value:
</snippet></ROW><ROW><id>17798060</id><snippet>helper_dict = {k: v for v, x in myDict.items() for k in x}
</snippet></ROW><ROW><id>17798060</id><snippet>helper_dict = {k: v for v, x in myDict.items() for k in x}
with open("input.txt") as f:
    for line in f:  
        fields = line.split("\t")
        key = fields[0]
        if key in helper_dict:
            newdict[helper_dict[key]] = len(myDict[helper_dict[key]])
</snippet></ROW><ROW><id>17798154</id><snippet>itertools.product</snippet></ROW><ROW><id>17798154</id><snippet>list1</snippet></ROW><ROW><id>17798154</id><snippet>list2</snippet></ROW><ROW><id>17798154</id><snippet>sums = []
for list1_choices in itertools.product(list1, repeat=len(list2)):
    sums.append(sum(x*y for x, y in zip(list1_choices, list2))
</snippet></ROW><ROW><id>17798154</id><snippet>[sum(x*y for x, y in zip(list1_choices, list2))
 for list1_choices in itertools.product(list1, repeat=len(list2))]
</snippet></ROW><ROW><id>17798724</id><snippet>_until</snippet></ROW><ROW><id>17798724</id><snippet>dateutil</snippet></ROW><ROW><id>17798724</id><snippet>&gt;&gt;&gt; r = rrule(DAILY,dtstart=datetime(2013,7,15,0,0,0), until=datetime.now())
&gt;&gt;&gt; list(r)
[datetime.datetime(2013, 7, 15, 0, 0),
 datetime.datetime(2013, 7, 16, 0, 0),
 datetime.datetime(2013, 7, 17, 0, 0),
 datetime.datetime(2013, 7, 18, 0, 0),
 datetime.datetime(2013, 7, 19, 0, 0),
 datetime.datetime(2013, 7, 20, 0, 0),
 datetime.datetime(2013, 7, 21, 0, 0),
 datetime.datetime(2013, 7, 22, 0, 0),
 datetime.datetime(2013, 7, 23, 0, 0)]

&gt;&gt;&gt; r._until = datetime(2013, 7, 20, 0, 0)
&gt;&gt;&gt; list(r)
[datetime.datetime(2013, 7, 15, 0, 0),
 datetime.datetime(2013, 7, 16, 0, 0),
 datetime.datetime(2013, 7, 17, 0, 0),
 datetime.datetime(2013, 7, 18, 0, 0),
 datetime.datetime(2013, 7, 19, 0, 0),
 datetime.datetime(2013, 7, 20, 0, 0)]
</snippet></ROW><ROW><id>17798827</id><snippet>"20130708"</snippet></ROW><ROW><id>17798827</id><snippet>""</snippet></ROW><ROW><id>17798827</id><snippet>20130708</snippet></ROW><ROW><id>17798827</id><snippet>""</snippet></ROW><ROW><id>17798827</id><snippet>TypeError: unorderable types: int() &lt; str()</snippet></ROW><ROW><id>17799031</id><snippet>select</snippet></ROW><ROW><id>17799031</id><snippet>select *</snippet></ROW><ROW><id>17799031</id><snippet>cur.fetchone()[0]</snippet></ROW><ROW><id>17799031</id><snippet>price</snippet></ROW><ROW><id>17799031</id><snippet>select</snippet></ROW><ROW><id>17799031</id><snippet>fetchall</snippet></ROW><ROW><id>17799031</id><snippet>fetchall</snippet></ROW><ROW><id>17799031</id><snippet>fetchone</snippet></ROW><ROW><id>17799031</id><snippet>fetchall</snippet></ROW><ROW><id>17799031</id><snippet>fetchall</snippet></ROW><ROW><id>17799031</id><snippet>fetchone</snippet></ROW><ROW><id>17799031</id><snippet>fetchall</snippet></ROW><ROW><id>17799031</id><snippet>fetchone</snippet></ROW><ROW><id>17799031</id><snippet>None</snippet></ROW><ROW><id>17799095</id><snippet>from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName(_fromUtf8("Dialog"))
        Form.resize(151, 67)
        self.verticalLayout = QtGui.QVBoxLayout(Form)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.pushButton = QtGui.QPushButton(Form)
        self.pushButton.setObjectName(_fromUtf8("pushButton"))
        self.verticalLayout.addWidget(self.pushButton)
        self.lineEdit = QtGui.QLineEdit(Form)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName(_fromUtf8("lineEdit"))
        self.verticalLayout.addWidget(self.lineEdit)

        self.retranslateUi(Form)
        QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL(_fromUtf8("clicked()")), Form.changeText)


    def retranslateUi(self, Form):
        Form.setWindowTitle(_translate("Form", "Form", None))
        self.pushButton.setText(_translate("Form", "Click me", None))
        self.lineEdit.setPlaceholderText(_translate("Form", "functionvalue", None))


class MyForm(QtGui.QDialog, Ui_Form):
    def __init__(self, z=0):
        QtGui.QDialog.__init__(self)
        self.setupUi(self)
        self.z = z

    def myfunc1(self):
        self.z+=1
        print (self.z)

    def changeText(self):
        self.myfunc1()
        self.lineEdit.setText(str(self.z))


if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    Form = MyForm()
    Form.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>17799320</id><snippet>" OR ".join(["%s branch:%s"%(line.strip(),getbranch_project(line.strip())) for line in f])
</snippet></ROW><ROW><id>17799433</id><snippet>def timedcall(fn, *args):
    "Call function with args; return the time in seconds and result."
    t0 = time.clock()
    result = fn(*args)
    t1 = time.clock()
    return t1-t0, result
</snippet></ROW><ROW><id>17799508</id><snippet>&gt;&gt;&gt; for key, (num1, num2, num3) in mydict.iteritems():
...     print key, num1, num2, num3
... 
a 0 1 2
c 6 7 8
b 3 4 5
</snippet></ROW><ROW><id>17799541</id><snippet>print i,</snippet></ROW><ROW><id>17799541</id><snippet>''.join()</snippet></ROW><ROW><id>17799541</id><snippet>string = "g fmnc wms bgblr rpylqjyrc gr zw fylb."
print string
answer = []
for i in string:
    if i.isalpha():
        if ord(i)&gt;120:
            answer.append(chr(ord(i)-24))
        else:
            answer.append(chr(ord(i)+2))
    else: 
        answer.append(i)
print ''.join(answer)
</snippet></ROW><ROW><id>17799541</id><snippet>string.translate</snippet></ROW><ROW><id>17799592</id><snippet>any()</snippet></ROW><ROW><id>17799592</id><snippet>black_list = ["ab:", "cd:", "ef:", "gh:"]

for line in some_file:
    if ":" in line and not any(x in line for x in black_list):
        pass
</snippet></ROW><ROW><id>17799592</id><snippet>all()</snippet></ROW><ROW><id>17799592</id><snippet>for line in some_file:
    if ":" in line and all(x not in line for x in black_list):
        pass
</snippet></ROW><ROW><id>17799601</id><snippet>pip</snippet></ROW><ROW><id>17799601</id><snippet>sudo pip install openpyxl
</snippet></ROW><ROW><id>17799654</id><snippet>with open('path/to/file') as infile, open('/path/to/output', 'w') as outfile:
    for line in infile:
        if line.startswith('lt="[   ]"'):
            hrefs = re.findall("\&lt;a\\s+href=.*\&lt;/a\&gt;?", line)
            for href in hrefs:
                target = href.split('=', 1)[1].split("&gt;", 1)[0].strip('"')
                outfile.write("%s\n" target)
</snippet></ROW><ROW><id>17799816</id><snippet>&gt; python -m timeit 'a = 50; b = a*12-1; c = a*b; c; c*100+10; c/100+20;'
1000000 loops, best of 3: 0.27 usec per loop
&gt; python -m timeit '50*(50*12-1); 50*(50*12-1) * 100 + 10; 50*(50*12-1) / 100 + 20'
1000000 loops, best of 3: 0.218 usec per loop
</snippet></ROW><ROW><id>17799816</id><snippet>&gt; python -m timeit 'def x(): a = 50; b = a*12-1; c = a*b; c; c*100+10; c/100+20;' 'x()'
1000000 loops, best of 3: 0.428 usec per loop
</snippet></ROW><ROW><id>17799816</id><snippet>&gt; python -m timeit -s 'def x(): a = 50; b = a*12-1; c = a*b; c; c*100+10; c/100+20;' 'x()'
1000000 loops, best of 3: 0.367 usec per loop
&gt; python -m timeit -s 'def x(): 50*(50*12-1); 50*(50*12-1) * 100 + 10; 50*(50*12-1) / 100 + 20' 'x()'
1000000 loops, best of 3: 0.278 usec per loop
</snippet></ROW><ROW><id>17799818</id><snippet>len()</snippet></ROW><ROW><id>17799818</id><snippet>IndexError</snippet></ROW><ROW><id>17799818</id><snippet>if len(sys.argv) &gt; 3:
    # all three arguments are present
    print 'arg1', sys.argv[1], 'arg2', sys.argv[2], 'arg3', sys.argv[3]
</snippet></ROW><ROW><id>17799818</id><snippet>try:
   arg1, arg2, arg3 = sys.argv[1], sys.argv[2], sys.argv[3]
except IndexError:
   # arguments are missing
</snippet></ROW><ROW><id>17799997</id><snippet>read4 = DictReader(fin4)</snippet></ROW><ROW><id>17799997</id><snippet>fin4.seek(0) # Reset iterator</snippet></ROW><ROW><id>17799997</id><snippet>DictReader</snippet></ROW><ROW><id>17800056</id><snippet>random.seed(0x87654321)  
</snippet></ROW><ROW><id>17800056</id><snippet>while</snippet></ROW><ROW><id>17800056</id><snippet>if __name__ == '__main__':    
    cnt = 0
    random.seed(0x87654321) 
    while cnt &lt; 3:     
        funcA()
        time.sleep(5) 
        cnt += 1
</snippet></ROW><ROW><id>17800124</id><snippet>try:
    var_in = int(raw_input("&gt; "))
except:
    print "Incorrect input."
else:
    if  0 &lt; var_in &lt;= 5 :
        print "between 1-5"
    elif var_in == 0: #works
        print "Zero"
    else:
        print "Greater than 5!" #works
</snippet></ROW><ROW><id>17800134</id><snippet>LOAD 2 LOAD 3 ADD LOAD 4 MULTIPLY</snippet></ROW><ROW><id>17800134</id><snippet>LOAD 4 LOAD 2 LOAD 3 ADD MULTIPLY</snippet></ROW><ROW><id>17800134</id><snippet>fold_binops_on_constants()</snippet></ROW><ROW><id>17800134</id><snippet>ADD</snippet></ROW><ROW><id>17800134</id><snippet>LOAD LOAD ADD</snippet></ROW><ROW><id>17800134</id><snippet>LOAD</snippet></ROW><ROW><id>17800134</id><snippet>MULTIPLY</snippet></ROW><ROW><id>17800134</id><snippet>ADD</snippet></ROW><ROW><id>17800134</id><snippet>MULTIPLY</snippet></ROW><ROW><id>17800134</id><snippet>L L M</snippet></ROW><ROW><id>17800134</id><snippet>LOAD 4</snippet></ROW><ROW><id>17800134</id><snippet>L L M</snippet></ROW><ROW><id>17800205</id><snippet>hello w</snippet></ROW><ROW><id>17800205</id><snippet>o</snippet></ROW><ROW><id>17800205</id><snippet>hello world</snippet></ROW><ROW><id>17800205</id><snippet>h</snippet></ROW><ROW><id>17800205</id><snippet>hello where can I find..</snippet></ROW><ROW><id>17800205</id><snippet>i</snippet></ROW><ROW><id>17800205</id><snippet>hello winston</snippet></ROW><ROW><id>17800205</id><snippet>self._ranges</snippet></ROW><ROW><id>17800205</id><snippet>self._ranges[ord('d')]</snippet></ROW><ROW><id>17800205</id><snippet>d</snippet></ROW><ROW><id>17800205</id><snippet>a</snippet></ROW><ROW><id>17800205</id><snippet>b</snippet></ROW><ROW><id>17800205</id><snippet>c</snippet></ROW><ROW><id>17800750</id><snippet>click()</snippet></ROW><ROW><id>17800750</id><snippet>send_key()</snippet></ROW><ROW><id>17800750</id><snippet>time.sleep(5)</snippet></ROW><ROW><id>17800750</id><snippet>elem.send_keys(Keys.RETURN)</snippet></ROW><ROW><id>17800750</id><snippet>print driver.title</snippet></ROW><ROW><id>17800750</id><snippet>driver.title</snippet></ROW><ROW><id>17800787</id><snippet>a = Class()
</snippet></ROW><ROW><id>17800787</id><snippet>__init__</snippet></ROW><ROW><id>17800787</id><snippet>__init__</snippet></ROW><ROW><id>17800787</id><snippet>class MyString:
    def __div__(self, sep):
        return self.str.split(sep)
m = MyString()
</snippet></ROW><ROW><id>17800787</id><snippet>class MyString:
    str = ''
    def __init__(self,str):
        MyString.str = str
    def __div__(self, sep):
        return self.str.split(sep)
m = MyString('aSAA')
print(MyString.str)
#print(m.str)
['a', 'cda', 'cda', 'cd']
</snippet></ROW><ROW><id>17800821</id><snippet>apt-get</snippet></ROW><ROW><id>17800821</id><snippet>pip</snippet></ROW><ROW><id>17800821</id><snippet>.travis.yml</snippet></ROW><ROW><id>17800821</id><snippet>language: python
python:
  - "3.3"
install: 
  - pip install --use-mirrors pyparsing
  - pip install --use-mirrors matplotlib
script: nosetests
virtualenv:
  system_site_packages: true
before_install:
  - pip install numpy
  - pip install python-dateutil
  - pip install pytz
  - pip install scipy
  - sudo apt-get update -qq
  - sudo apt-get install -qq libatlas-dev libatlas-base-dev liblapack-dev gfortran
notifications: 
  email: false
</snippet></ROW><ROW><id>17800821</id><snippet>libatlas</snippet></ROW><ROW><id>17800821</id><snippet>pip</snippet></ROW><ROW><id>17800996</id><snippet>return HttpResponse(blah)</snippet></ROW><ROW><id>17801195</id><snippet>import difflib, sys

tl=100000    # large number of lines

# create two test files (Unix directories...)

with open('/tmp/f1.txt','w') as f:
    for x in range(tl):
        f.write('line {}\n'.format(x))

with open('/tmp/f2.txt','w') as f:
    for x in range(tl+10):   # add 10 lines
        if x in (500,505,1000,tl-2):
            continue         # skip these lines
        f.write('line {}\n'.format(x))        

with open('/tmp/f1.txt','r') as f1, open('/tmp/f2.txt','r') as f2:
    diff = difflib.ndiff(f1.readlines(),f2.readlines())    
    for line in diff:
        if line.startswith('-'):
            sys.stdout.write(line)
        elif line.startswith('+'):
            sys.stdout.write('\t\t'+line)   
</snippet></ROW><ROW><id>17801195</id><snippet>- line 500
- line 505
- line 1000
- line 99998
        + line 100000
        + line 100001
        + line 100002
        + line 100003
        + line 100004
        + line 100005
        + line 100006
        + line 100007
        + line 100008
        + line 100009
</snippet></ROW><ROW><id>17801195</id><snippet>with open('/tmp/f1.txt','r') as f1, open('/tmp/f2.txt','r') as f2:
    diff = difflib.ndiff(f1.readlines(),f2.readlines())    
    for i,line in enumerate(diff):
        if line.startswith(' '):
            continue
        sys.stdout.write('My count: {}, text: {}'.format(i,line))  
</snippet></ROW><ROW><id>17801292</id><snippet>nonlocal</snippet></ROW><ROW><id>17801292</id><snippet>def Grrr():
    a = 10
    def nested():
        nonlocal a
        b = 5
        a -= b
    nested()
    return a
</snippet></ROW><ROW><id>17801410</id><snippet>A = P*D.sum(axis=1)-D.dot(P)
</snippet></ROW><ROW><id>17801443</id><snippet>/var/log/syslog</snippet></ROW><ROW><id>17801443</id><snippet>/var/log/syslog.1</snippet></ROW><ROW><id>17801443</id><snippet>re.match()</snippet></ROW><ROW><id>17801443</id><snippet>re.search()</snippet></ROW><ROW><id>17801443</id><snippet>re.match()</snippet></ROW><ROW><id>17801443</id><snippet>&gt;&gt;&gt; with open("/var/log/syslog") as f:
...     for line in f:
...         if "usb" in line.lower():
...             print line
... 
</snippet></ROW><ROW><id>17801443</id><snippet>with</snippet></ROW><ROW><id>17801443</id><snippet>f</snippet></ROW><ROW><id>17801443</id><snippet>fd</snippet></ROW><ROW><id>17801443</id><snippet>line</snippet></ROW><ROW><id>17801443</id><snippet>lines</snippet></ROW><ROW><id>17801443</id><snippet>"usb"</snippet></ROW><ROW><id>17801443</id><snippet>"USB"</snippet></ROW><ROW><id>17801613</id><snippet>letter in text_string</snippet></ROW><ROW><id>17801613</id><snippet>str.find()</snippet></ROW><ROW><id>17801613</id><snippet>letter in set(text_string)</snippet></ROW><ROW><id>17801613</id><snippet>text_string</snippet></ROW><ROW><id>17801613</id><snippet>all</snippet></ROW><ROW><id>17801613</id><snippet>def check(text, control):
    # Set both strings to lower case, since we're ignoring case
    text = text.lower()
    control = control.lower()
    # Check that each character in control is in text
    return all((c in text for c in set(control)))

&gt;&gt;&gt; check('jshdgfyrgj', 'Correo')
2: False
&gt;&gt;&gt; check('cfgotyrrtepo', 'Correo')
3: True
</snippet></ROW><ROW><id>17801635</id><snippet>if mp4_url:</snippet></ROW><ROW><id>17801991</id><snippet>$ echo foo | python -c '
&gt; if True:
&gt;  print "yes"
&gt; '
</snippet></ROW><ROW><id>17802123</id><snippet>def command(f):
    def g(filenames, **kwa):
        lines = readfiles(filenames)
        lines = (outline for line in lines for outline in f(line, **kwa))
        # lines = (line for line in lines if line is not None)
        printlines(lines)
    return g

def readfiles(filenames):
    for f in filenames:
        for line in open(f):
            yield line


def printlines(lines):
    for line in lines:
            print line.strip("\n")

@command
def grep(line, pattern):
    if pattern in line:
        yield line


if __name__ == '__main__':
    import sys
    pattern = sys.argv[1]
    filenames = sys.argv[2:]
    grep(filenames, pattern=pattern)
</snippet></ROW><ROW><id>17802252</id><snippet>getlist</snippet></ROW><ROW><id>17802252</id><snippet>request.files</snippet></ROW><ROW><id>17802252</id><snippet>werkzeug.datastructures.MultiDict</snippet></ROW><ROW><id>17802252</id><snippet>files = request.files.getlist('file')
for file in files:
    hande_file(file)
</snippet></ROW><ROW><id>17802252</id><snippet>handle_file</snippet></ROW><ROW><id>17802252</id><snippet>def handle_file(f):
    if not allowed_file(f.filename):
        return

    filename = secure_filename(f.filename)
    f.save(os.path.join(app.config['UPLOAD_FOLDER'], filename)
</snippet></ROW><ROW><id>17802352</id><snippet>BaseException</snippet></ROW><ROW><id>17802352</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>17802352</id><snippet>SystemExit</snippet></ROW><ROW><id>17802352</id><snippet>Throwable</snippet></ROW><ROW><id>17802352</id><snippet>BaseException</snippet></ROW><ROW><id>17802352</id><snippet>finally</snippet></ROW><ROW><id>17802352</id><snippet>__exit__</snippet></ROW><ROW><id>17802382</id><snippet>mysqldump --user USERNAME --password=PASSWORD dbname &gt; backup.sql
</snippet></ROW><ROW><id>17802382</id><snippet>mysql -h mysql.server -u USERNAME -p 'DBNAME' &lt; backup.sql
</snippet></ROW><ROW><id>17802532</id><snippet>try</snippet></ROW><ROW><id>17802532</id><snippet>except</snippet></ROW><ROW><id>17802532</id><snippet>def main():
    if len(argv) &lt; 2:
        print "We need at least one argument"
        return
    # Remainder of implementation goes here
</snippet></ROW><ROW><id>17802762</id><snippet>__init__</snippet></ROW><ROW><id>17802762</id><snippet>__init__</snippet></ROW><ROW><id>17802762</id><snippet>import random

class CarBase(object):
    pass

class meta_car(type):
    car_brands = {}
    def __init__(cls, cls_name, cls_bases, cls_dict):
        super(meta_car, cls).__init__(cls_name, cls_bases, cls_dict)
        if(not CarBase in cls_bases):
            meta_car.car_brands[cls_name] = cls

    def __call__(self, *args, **kwargs):
        make = kwargs.get("make", "")
        if(meta_car.car_brands.has_key(make) and not (self is meta_car.car_brands[make])):
            obj = meta_car.car_brands[make].__call__(*args, **kwargs)
            if(make == "Toyota"):
                if(random.randint(0, 100) &lt; 2):
                    obj.defect = "sticky accelerator pedal"
            elif(make == "GM"):
                if(random.randint(0, 100) &lt; 20):
                    obj.defect = "shithouse"
            elif(make == "Great Wall"):
                if(random.randint(0, 100) &lt; 101):
                    obj.defect = "cancer"
        else:
            obj = None
            if(not meta_car.car_brands.has_key(self.__name__)):
                new_class = meta_car(make, (GenericCar,), {})
                globals()[make] = new_class
                obj = new_class(*args, **kwargs)
            else:
                obj = super(meta_car, self).__call__(*args, **kwargs)
        return obj

class Car(CarBase):
    __metaclass__ = meta_car

    def __init__(self, **kwargs):
        for name, value in kwargs.items():
            setattr(self, name, value)

    def __repr__(self):
        return "&lt;%s&gt;" % self.description

    @property
    def description(self):           
        return "%s %s %s %s" % (self.color, self.year, self.make, self.model)

class GenericCar(Car):
    def __init__(self, **kwargs):
        kwargs["make"] = self.__class__.__name__
        super(GenericCar, self).__init__(**kwargs)

class Toyota(GenericCar):
    pass

colours = \
[
    "blue",
    "green",
    "red",
    "yellow",
    "orange",
    "purple",
    "silver",
    "black",
    "white"
]

def rand_colour():
    return colours[random.randint(0, len(colours) - 1)]

some_cars = \
[
    Car(make="Toyota", model="Prius", year=2005, color=rand_colour()),
    Car(make="Toyota", model="Camry", year=2007, color=rand_colour()),
    Car(make="Toyota", model="Camry Hybrid", year=2013, color=rand_colour()),
    Car(make="Toyota", model="Land Cruiser", year=2009, color=rand_colour()),
    Car(make="Toyota", model="FJ Cruiser", year=2012, color=rand_colour()),
    Car(make="Toyota", model="Corolla", year=2010, color=rand_colour()),
    Car(make="Toyota", model="Hiace", year=2006, color=rand_colour()),
    Car(make="Toyota", model="Townace", year=2003, color=rand_colour()),
    Car(make="Toyota", model="Aurion", year=2008, color=rand_colour()),
    Car(make="Toyota", model="Supra", year=2004, color=rand_colour()),
    Car(make="Toyota", model="86", year=2013, color=rand_colour()),
    Car(make="GM", model="Camaro", year=2008, color=rand_colour())
]

dodgy_vehicles = filter(lambda x: hasattr(x, "defect"), some_cars)
print dodgy_vehicles
</snippet></ROW><ROW><id>17803138</id><snippet>setup(
cmdclass = {'my_command':MyCommand},
)
</snippet></ROW><ROW><id>17803138</id><snippet>&gt;&gt;&gt; python setup.py --help-commands
</snippet></ROW><ROW><id>17803138</id><snippet>Extra Commands</snippet></ROW><ROW><id>17803378</id><snippet>whole_data = []
grab_lines = False
with open('input','r') as atom_file:
    molecule_data = ['23\n\n']
    for line in atom_file:
        if line.startswith('coordinates'):
            grab_lines = True
            continue
        elif line.startswith('velocities'):
            grab_lines = False
            if molecule_data:
                #just checks that we aren't appending an empty list.
                molecule_data.append('\n')
                whole_data.append(molecule_data)
                molecule_data = ['23\n\n']
        if grab_lines: #in python 'is True' is implicit for many types.
            molecule_data.append(line)

with open('output','w') as out_file:
    for molecule in whole_data:
        out_file.write(''.join(molecule))
</snippet></ROW><ROW><id>17803378</id><snippet>atom_file</snippet></ROW><ROW><id>17803378</id><snippet>    time: 0.2fs
coordinates
C         3.952444338331        0.353499658087        0.155475597879
C         2.898759709487        0.271561183058        2.878962426315
C         0.377507660095        1.575527713456        2.766723501812
N        -0.435656339866        0.616843403256        0.264424997127
C         1.700335308734        1.369156629701       -1.411382740946
C        -2.337147095089       -0.967913098150       -0.045537023463
C        -3.526272967903       -1.434075863003       -2.507321890479
C         1.622297308900        0.380583237194       -4.021983342405
O        -3.540891745414       -1.784144627448        2.005202557948
H         4.590691590007       -1.467822752968       -0.627674161136
H         5.486618188590        1.704246328926        0.014750183919
H         2.660849255805       -1.743362985878        3.501798747714
H         4.277029595067        1.121286334364        4.194254865266
H         0.568970284045        3.642407977900        2.660909012456
H        -1.014510536177        1.242297828699        4.266572018582
H        -3.406669591714        0.378282552422       -3.550366695442
H        -5.529437662690       -2.075200692969       -2.212384192799
H        -2.490387114770       -2.906665564518       -3.579439523150
H         1.675087738572        3.514639806992       -1.458115996333
H        -0.116965875674        1.068581149519       -5.163647181683
H         1.470748269634       -1.655673714451       -4.142927345712
H         3.361564138064        1.115048483423       -4.937771405417
H        -5.134728946067       -2.640023263298        1.567623789643
velocities
        0.000241908669        0.000039611121       -0.000250932377
       -0.000163805243       -0.000115366290       -0.000017375326
       -0.000047784448        0.000248119899       -0.000074616012
        0.000272673498       -0.000017362735        0.000399681421
       -0.000326634443       -0.000254296236        0.000120448584
       -0.000094363714        0.000239927614       -0.000271069374
        0.000122625277        0.000053803004       -0.000088144918
       -0.000112099948       -0.000143815691        0.000140925518
       -0.000020483349       -0.000161160777        0.000050721656
        0.000277228119        0.000550968890       -0.000249788972
        0.000308946542        0.000944826745        0.000083253008
       -0.001453065687        0.000249483273       -0.000194390979
        0.000370071103        0.000328142273       -0.000594811431
        0.000983242907       -0.000247664001       -0.000337676641
        0.000702749595       -0.000531050917       -0.000068247339
       -0.000913913436       -0.000822599342       -0.000519543480
        0.000657300149       -0.001239306947        0.000033192915
        0.000763780031        0.000151892085       -0.000106941733
       -0.000111349513        0.000591872099        0.000360147787
        0.000283007739        0.000537032161        0.000183614425
       -0.001766985000        0.001017499281       -0.000870068723
        0.001560592306       -0.000636221326        0.001124910644
       -0.000596019125        0.001094375746        0.000048984716

Kinetic energy    :        0.030613110934
Electronic energy :      -60.105483063648
Total energy      :      -60.074869952714
Conservation      :       -0.000000051487
self.forces:
       -0.000751933584       -0.004126331042       -0.004033882094
       -0.034302855990        0.029127675777       -0.007001211293
        0.037731564948       -0.009915059812        0.020878531238
       -0.109763802365       -0.102520873021       -0.034608644850
        0.033373305433        0.018949006487       -0.015434320612
        0.078807110369        0.101440274624        0.031960385836
        0.027868883444       -0.012844760956        0.009625682828
        0.011817203866       -0.011548503873        0.038027933611
       -0.016951256413       -0.005848802217       -0.020755575427
        0.002823354740        0.003214778324       -0.005974478408
       -0.012101005124       -0.007850077809        0.000381372379
        0.001958908572       -0.006446492464        0.003077496955
        0.005728700900       -0.005220923285       -0.001710604936
       -0.006358072353       -0.016410380723       -0.003938145281
        0.000121143012        0.012930928986       -0.005592639661
        0.008318475112        0.004530628154        0.009023640965
       -0.010548513939       -0.005006070272        0.008756275583
       -0.000601535778       -0.003075790288       -0.006209965764
       -0.002729816846       -0.003390850759       -0.001421821138
       -0.023967939963        0.000603482820       -0.016983439682
       -0.006731466272        0.010586445711       -0.001984503303
        0.009694983786        0.008555900046        0.002598629870
        0.006564564487        0.004265795793        0.001319282998
state for next step: 1

    time: 0.2fs
coordinates
C         3.952444338331        0.353499658087        0.155475597879
C         2.898759709487        0.271561183058        2.878962426315
C         0.377507660095        1.575527713456        2.766723501812
N        -0.435656339866        0.616843403256        0.264424997127
C         1.700335308734        1.369156629701       -1.411382740946
C        -2.337147095089       -0.967913098150       -0.045537023463
C        -3.526272967903       -1.434075863003       -2.507321890479
C         1.622297308900        0.380583237194       -4.021983342405
O        -3.540891745414       -1.784144627448        2.005202557948
H         4.590691590007       -1.467822752968       -0.627674161136
H         5.486618188590        1.704246328926        0.014750183919
H         2.660849255805       -1.743362985878        3.501798747714
H         4.277029595067        1.121286334364        4.194254865266
H         0.568970284045        3.642407977900        2.660909012456
H        -1.014510536177        1.242297828699        4.266572018582
H        -3.406669591714        0.378282552422       -3.550366695442
H        -5.529437662690       -2.075200692969       -2.212384192799
H        -2.490387114770       -2.906665564518       -3.579439523150
H         1.675087738572        3.514639806992       -1.458115996333
H        -0.116965875674        1.068581149519       -5.163647181683
H         1.470748269634       -1.655673714451       -4.142927345712
H         3.361564138064        1.115048483423       -4.937771405417
H        -5.134728946067       -2.640023263298        1.567623789643
velocities
        0.000241908669        0.000039611121       -0.000250932377
       -0.000163805243       -0.000115366290       -0.000017375326
       -0.000047784448        0.000248119899       -0.000074616012
        0.000272673498       -0.000017362735        0.000399681421
       -0.000326634443       -0.000254296236        0.000120448584
       -0.000094363714        0.000239927614       -0.000271069374
        0.000122625277        0.000053803004       -0.000088144918
       -0.000112099948       -0.000143815691        0.000140925518
       -0.000020483349       -0.000161160777        0.000050721656
        0.000277228119        0.000550968890       -0.000249788972
        0.000308946542        0.000944826745        0.000083253008
       -0.001453065687        0.000249483273       -0.000194390979
        0.000370071103        0.000328142273       -0.000594811431
        0.000983242907       -0.000247664001       -0.000337676641
        0.000702749595       -0.000531050917       -0.000068247339
       -0.000913913436       -0.000822599342       -0.000519543480
        0.000657300149       -0.001239306947        0.000033192915
        0.000763780031        0.000151892085       -0.000106941733
       -0.000111349513        0.000591872099        0.000360147787
        0.000283007739        0.000537032161        0.000183614425
       -0.001766985000        0.001017499281       -0.000870068723
        0.001560592306       -0.000636221326        0.001124910644
       -0.000596019125        0.001094375746        0.000048984716

Kinetic energy    :        0.030613110934
Electronic energy :      -60.105483063648
Total energy      :      -60.074869952714
Conservation      :       -0.000000051487
self.forces:
       -0.000751933584       -0.004126331042       -0.004033882094
       -0.034302855990        0.029127675777       -0.007001211293
        0.037731564948       -0.009915059812        0.020878531238
       -0.109763802365       -0.102520873021       -0.034608644850
        0.033373305433        0.018949006487       -0.015434320612
        0.078807110369        0.101440274624        0.031960385836
        0.027868883444       -0.012844760956        0.009625682828
        0.011817203866       -0.011548503873        0.038027933611
       -0.016951256413       -0.005848802217       -0.020755575427
        0.002823354740        0.003214778324       -0.005974478408
       -0.012101005124       -0.007850077809        0.000381372379
        0.001958908572       -0.006446492464        0.003077496955
        0.005728700900       -0.005220923285       -0.001710604936
       -0.006358072353       -0.016410380723       -0.003938145281
        0.000121143012        0.012930928986       -0.005592639661
        0.008318475112        0.004530628154        0.009023640965
       -0.010548513939       -0.005006070272        0.008756275583
       -0.000601535778       -0.003075790288       -0.006209965764
       -0.002729816846       -0.003390850759       -0.001421821138
       -0.023967939963        0.000603482820       -0.016983439682
       -0.006731466272        0.010586445711       -0.001984503303
        0.009694983786        0.008555900046        0.002598629870
        0.006564564487        0.004265795793        0.001319282998
state for next step: 1

    time: 0.2fs
coordinates
C         3.952444338331        0.353499658087        0.155475597879
C         2.898759709487        0.271561183058        2.878962426315
C         0.377507660095        1.575527713456        2.766723501812
N        -0.435656339866        0.616843403256        0.264424997127
C         1.700335308734        1.369156629701       -1.411382740946
C        -2.337147095089       -0.967913098150       -0.045537023463
C        -3.526272967903       -1.434075863003       -2.507321890479
C         1.622297308900        0.380583237194       -4.021983342405
O        -3.540891745414       -1.784144627448        2.005202557948
H         4.590691590007       -1.467822752968       -0.627674161136
H         5.486618188590        1.704246328926        0.014750183919
H         2.660849255805       -1.743362985878        3.501798747714
H         4.277029595067        1.121286334364        4.194254865266
H         0.568970284045        3.642407977900        2.660909012456
H        -1.014510536177        1.242297828699        4.266572018582
H        -3.406669591714        0.378282552422       -3.550366695442
H        -5.529437662690       -2.075200692969       -2.212384192799
H        -2.490387114770       -2.906665564518       -3.579439523150
H         1.675087738572        3.514639806992       -1.458115996333
H        -0.116965875674        1.068581149519       -5.163647181683
H         1.470748269634       -1.655673714451       -4.142927345712
H         3.361564138064        1.115048483423       -4.937771405417
H        -5.134728946067       -2.640023263298        1.567623789643
velocities
        0.000241908669        0.000039611121       -0.000250932377
       -0.000163805243       -0.000115366290       -0.000017375326
       -0.000047784448        0.000248119899       -0.000074616012
        0.000272673498       -0.000017362735        0.000399681421
       -0.000326634443       -0.000254296236        0.000120448584
       -0.000094363714        0.000239927614       -0.000271069374
        0.000122625277        0.000053803004       -0.000088144918
       -0.000112099948       -0.000143815691        0.000140925518
       -0.000020483349       -0.000161160777        0.000050721656
        0.000277228119        0.000550968890       -0.000249788972
        0.000308946542        0.000944826745        0.000083253008
       -0.001453065687        0.000249483273       -0.000194390979
        0.000370071103        0.000328142273       -0.000594811431
        0.000983242907       -0.000247664001       -0.000337676641
        0.000702749595       -0.000531050917       -0.000068247339
       -0.000913913436       -0.000822599342       -0.000519543480
        0.000657300149       -0.001239306947        0.000033192915
        0.000763780031        0.000151892085       -0.000106941733
       -0.000111349513        0.000591872099        0.000360147787
        0.000283007739        0.000537032161        0.000183614425
       -0.001766985000        0.001017499281       -0.000870068723
        0.001560592306       -0.000636221326        0.001124910644
       -0.000596019125        0.001094375746        0.000048984716

Kinetic energy    :        0.030613110934
Electronic energy :      -60.105483063648
Total energy      :      -60.074869952714
Conservation      :       -0.000000051487
self.forces:
       -0.000751933584       -0.004126331042       -0.004033882094
       -0.034302855990        0.029127675777       -0.007001211293
        0.037731564948       -0.009915059812        0.020878531238
       -0.109763802365       -0.102520873021       -0.034608644850
        0.033373305433        0.018949006487       -0.015434320612
        0.078807110369        0.101440274624        0.031960385836
        0.027868883444       -0.012844760956        0.009625682828
        0.011817203866       -0.011548503873        0.038027933611
       -0.016951256413       -0.005848802217       -0.020755575427
        0.002823354740        0.003214778324       -0.005974478408
       -0.012101005124       -0.007850077809        0.000381372379
        0.001958908572       -0.006446492464        0.003077496955
        0.005728700900       -0.005220923285       -0.001710604936
       -0.006358072353       -0.016410380723       -0.003938145281
        0.000121143012        0.012930928986       -0.005592639661
        0.008318475112        0.004530628154        0.009023640965
       -0.010548513939       -0.005006070272        0.008756275583
       -0.000601535778       -0.003075790288       -0.006209965764
       -0.002729816846       -0.003390850759       -0.001421821138
       -0.023967939963        0.000603482820       -0.016983439682
       -0.006731466272        0.010586445711       -0.001984503303
        0.009694983786        0.008555900046        0.002598629870
        0.006564564487        0.004265795793        0.001319282998
state for next step: 1
</snippet></ROW><ROW><id>17803378</id><snippet>out_file</snippet></ROW><ROW><id>17803378</id><snippet>23

C         3.952444338331        0.353499658087        0.155475597879
C         2.898759709487        0.271561183058        2.878962426315
C         0.377507660095        1.575527713456        2.766723501812
N        -0.435656339866        0.616843403256        0.264424997127
C         1.700335308734        1.369156629701       -1.411382740946
C        -2.337147095089       -0.967913098150       -0.045537023463
C        -3.526272967903       -1.434075863003       -2.507321890479
C         1.622297308900        0.380583237194       -4.021983342405
O        -3.540891745414       -1.784144627448        2.005202557948
H         4.590691590007       -1.467822752968       -0.627674161136
H         5.486618188590        1.704246328926        0.014750183919
H         2.660849255805       -1.743362985878        3.501798747714
H         4.277029595067        1.121286334364        4.194254865266
H         0.568970284045        3.642407977900        2.660909012456
H        -1.014510536177        1.242297828699        4.266572018582
H        -3.406669591714        0.378282552422       -3.550366695442
H        -5.529437662690       -2.075200692969       -2.212384192799
H        -2.490387114770       -2.906665564518       -3.579439523150
H         1.675087738572        3.514639806992       -1.458115996333
H        -0.116965875674        1.068581149519       -5.163647181683
H         1.470748269634       -1.655673714451       -4.142927345712
H         3.361564138064        1.115048483423       -4.937771405417
H        -5.134728946067       -2.640023263298        1.567623789643

23

C         3.952444338331        0.353499658087        0.155475597879
C         2.898759709487        0.271561183058        2.878962426315
C         0.377507660095        1.575527713456        2.766723501812
N        -0.435656339866        0.616843403256        0.264424997127
C         1.700335308734        1.369156629701       -1.411382740946
C        -2.337147095089       -0.967913098150       -0.045537023463
C        -3.526272967903       -1.434075863003       -2.507321890479
C         1.622297308900        0.380583237194       -4.021983342405
O        -3.540891745414       -1.784144627448        2.005202557948
H         4.590691590007       -1.467822752968       -0.627674161136
H         5.486618188590        1.704246328926        0.014750183919
H         2.660849255805       -1.743362985878        3.501798747714
H         4.277029595067        1.121286334364        4.194254865266
H         0.568970284045        3.642407977900        2.660909012456
H        -1.014510536177        1.242297828699        4.266572018582
H        -3.406669591714        0.378282552422       -3.550366695442
H        -5.529437662690       -2.075200692969       -2.212384192799
H        -2.490387114770       -2.906665564518       -3.579439523150
H         1.675087738572        3.514639806992       -1.458115996333
H        -0.116965875674        1.068581149519       -5.163647181683
H         1.470748269634       -1.655673714451       -4.142927345712
H         3.361564138064        1.115048483423       -4.937771405417
H        -5.134728946067       -2.640023263298        1.567623789643

23

C         3.952444338331        0.353499658087        0.155475597879
C         2.898759709487        0.271561183058        2.878962426315
C         0.377507660095        1.575527713456        2.766723501812
N        -0.435656339866        0.616843403256        0.264424997127
C         1.700335308734        1.369156629701       -1.411382740946
C        -2.337147095089       -0.967913098150       -0.045537023463
C        -3.526272967903       -1.434075863003       -2.507321890479
C         1.622297308900        0.380583237194       -4.021983342405
O        -3.540891745414       -1.784144627448        2.005202557948
H         4.590691590007       -1.467822752968       -0.627674161136
H         5.486618188590        1.704246328926        0.014750183919
H         2.660849255805       -1.743362985878        3.501798747714
H         4.277029595067        1.121286334364        4.194254865266
H         0.568970284045        3.642407977900        2.660909012456
H        -1.014510536177        1.242297828699        4.266572018582
H        -3.406669591714        0.378282552422       -3.550366695442
H        -5.529437662690       -2.075200692969       -2.212384192799
H        -2.490387114770       -2.906665564518       -3.579439523150
H         1.675087738572        3.514639806992       -1.458115996333
H        -0.116965875674        1.068581149519       -5.163647181683
H         1.470748269634       -1.655673714451       -4.142927345712
H         3.361564138064        1.115048483423       -4.937771405417
H        -5.134728946067       -2.640023263298        1.567623789643
</snippet></ROW><ROW><id>17803378</id><snippet>if grab_lines</snippet></ROW><ROW><id>17803378</id><snippet>if grab_lines: #in python 'is True' is implicit for many types.
    line = [line.split()[0]]+[str(float(element)*.529) for element in line.split()[1:]]+['\n']
    molecule_data.append('\t'.join(line))
</snippet></ROW><ROW><id>17803378</id><snippet>line</snippet></ROW><ROW><id>17803380</id><snippet>import requests

ip = requests.get('http://httpbin.org/ip').json()['origin']
</snippet></ROW><ROW><id>17803626</id><snippet>backref</snippet></ROW><ROW><id>17803626</id><snippet>SalesManager</snippet></ROW><ROW><id>17803626</id><snippet>SalesManager</snippet></ROW><ROW><id>17803626</id><snippet>class SalesManager(Model):
    __tablename__ = 'sales_manager'

    id = Column(Integer, primary_key=True)
    branches = relationship(
        'Branch', secondary=sales_manager_branches, backref="salesmanagers")
</snippet></ROW><ROW><id>17803626</id><snippet>Customer.query.\
         join(Branch).\
         join(Branch.salesmanagers).\
         filter(SalesManager.id == 1).all()
</snippet></ROW><ROW><id>17803861</id><snippet>SESSION_COOKIE_AGE</snippet></ROW><ROW><id>17803861</id><snippet>SESSION_SAVE_EVERY_REQUEST</snippet></ROW><ROW><id>17803861</id><snippet>True</snippet></ROW><ROW><id>17803861</id><snippet> SESSION_COOKIE_AGE
 Default: 1209600 (2 weeks, in seconds)
 &gt;&gt; The age of session cookies, in seconds.

 SESSION_SAVE_EVERY_REQUEST
 Default: False
 &gt;&gt; Whether to save the session data on every request. 
 If this is False (default), then the session data will only be saved if it has been modified – that is, if any of its dictionary values have been assigned or deleted.
</snippet></ROW><ROW><id>17803861</id><snippet>User</snippet></ROW><ROW><id>17804120</id><snippet>named</snippet></ROW><ROW><id>17804120</id><snippet>tuple</snippet></ROW><ROW><id>17804120</id><snippet>struct</snippet></ROW><ROW><id>17804120</id><snippet>from collections import namedtuple
IntradayData = namedtuple('IntradayData',
        ['close', 'high', 'low', 'open', 'volume', 'count'])

response = urllib2.urlopen('https://www.google.com/finance/getprices?q=AAPL')
result=response.read().split('\n')
result = result[15 :] # Your code does this, too. Not sure why.

all_data = []
for i, data in enumerate(x):
    if data == '': continue
    c, h, l, o, v, _ = map(float, data.split(','))
    all_data.append(IntradayData(c, h, l, o, v, i))
</snippet></ROW><ROW><id>17804409</id><snippet>class myVector():    
    def __init__(self, sd=(UNINITIALIZED, UNINITIALIZED)):
       try:
           self.size, self.direction = sd
       except (ValueError, TypeError) as e:
           raise ValueError('two values of size and direction must be specified')
</snippet></ROW><ROW><id>17804409</id><snippet>*args</snippet></ROW><ROW><id>17804437</id><snippet>valVar</snippet></ROW><ROW><id>17804437</id><snippet>modelObject.update(**{'unset__dictField__' + keyVar: valVar.id })
</snippet></ROW><ROW><id>17804510</id><snippet>import collections

# build an adjacency list representation of your input
graph = collections.defaultdict(set)
for l in input_list:
    if l:
        first = l[0]
        for element in l:
            graph[first].add(element)
            graph[element].add(first)

# breadth-first search the graph to produce the output
output = []
marked = set() # a set of all nodes whose connected component is known
for node in graph:
    if node not in marked:
        # this node is not in any previously seen connected component
        # run a breadth-first search to determine its connected component
        frontier = set([node])
        connected_component = []
        while frontier:
            marked |= frontier
            connected_component.extend(frontier)

            # find all unmarked nodes directly connected to frontier nodes
            # they will form the new frontier
            new_frontier = set()
            for node in frontier:
                new_frontier |= graph[node] - marked
            frontier = new_frontier
        output.append(tuple(connected_component))
</snippet></ROW><ROW><id>17805198</id><snippet>{'$group':{'_id' : { d: '$Device', u: '$UserId' } } }
</snippet></ROW><ROW><id>17805198</id><snippet>{ '$group': { '_id' : '$_id.d', 'count': { '$sum' : 1 } } }
</snippet></ROW><ROW><id>17805198</id><snippet>{ "_id" : "1234gbrghr", "Device" : "samsung", "UserId" : "12654", "Month" : "july" }
{ "_id" : "1278gbrghr", "Device" : "nokia", "UserId" : "87654", "Month" : "july" }
{ "_id" : "1239gbrghr", "Device" : "samsung", "UserId" : "12654", "Month" : "july" }
{ "_id" : "1238gbrghr", "Device" : "samsung", "UserId" : "12653", "Month" : "july" }
</snippet></ROW><ROW><id>17805198</id><snippet>db.so.aggregate( [
    { '$match' : {'Month' : 'july' } },
    { '$group' : {
        '_id' : { d: '$Device', u: '$UserId' },
        'count' : { '$sum' : 1 }
    } }, 
    { '$group': {
        '_id' : '$_id.d',
        'count': { '$sum' : 1 }
    } }
] );
</snippet></ROW><ROW><id>17805198</id><snippet>{
    "result" : [
        {
            "_id" : "nokia",
            "count" : 1
        },
        {
            "_id" : "samsung",
            "count" : 2
        }
    ],
    "ok" : 1
}
</snippet></ROW><ROW><id>17805206</id><snippet>canvas</snippet></ROW><ROW><id>17805206</id><snippet>label</snippet></ROW><ROW><id>17805206</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>17805206</id><snippet>&lt;B1-Motion&gt;</snippet></ROW><ROW><id>17805206</id><snippet>x</snippet></ROW><ROW><id>17805206</id><snippet>y</snippet></ROW><ROW><id>17805250</id><snippet>class Foo(object):
    def __init__(self):
        self.foo = None   # This masks the foo method on the instance `self`
    def foo(self):
        pass

foo = Foo()
print(foo.foo)
# None
print(foo.foo())
# TypeError: 'NoneType' object is not callable
</snippet></ROW><ROW><id>17805250</id><snippet>Foo</snippet></ROW><ROW><id>17805250</id><snippet>class Base(object):
    def common_method(self): pass

class Foo(Base):
    def foo(self): pass

class AltFoo(Base):
    def alt(self): pass

def make_foo():
    if somecondition:
        return Foo()
    eles:
        return AltFoo()
</snippet></ROW><ROW><id>17805367</id><snippet>YPoints = np.arange(gt[3] + (ds.RasterYSize-1) * gt[5], gt[3], abs(gt[5]))
</snippet></ROW><ROW><id>17805367</id><snippet>RasterPoints</snippet></ROW><ROW><id>17805674</id><snippet>parser = argparse.ArgumentParser(prog='PROG')
group = parser.add_mutually_exclusive_group()
group.add_argument('--arg1')
group.add_argument('--arg2')
</snippet></ROW><ROW><id>17805674</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG')
&gt;&gt;&gt; group = parser.add_mutually_exclusive_group()
&gt;&gt;&gt; group.add_argument('--arg1')
_StoreAction(option_strings=['--arg1'], dest='arg1', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; group.add_argument('--arg2')
_StoreAction(option_strings=['--arg2'], dest='arg2', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.parse_args(['--arg1', 'foo'])
Namespace(arg1='foo', arg2=None)
&gt;&gt;&gt; parser.parse_args(['--arg2', 'bar'])
Namespace(arg1=None, arg2='bar')
&gt;&gt;&gt; parser.parse_args(['--arg1', 'foo', '--arg2', 'bar'])
usage: PROG [-h] [--arg1 ARG1 | --arg2 ARG2]
PROG: error: argument --arg2: not allowed with argument --arg1
</snippet></ROW><ROW><id>17805856</id><snippet>twitter</snippet></ROW><ROW><id>17805856</id><snippet>python-twitter</snippet></ROW><ROW><id>17805856</id><snippet>import twitter

t = twitter.Twitter(
        auth=twitter.OAuth(OAUTH_TOKEN, OAUTH_SECRET,
                   CONSUMER_KEY, CONSUMER_SECRET)
       )
</snippet></ROW><ROW><id>17805856</id><snippet>twitter</snippet></ROW><ROW><id>17805856</id><snippet>python-twitter</snippet></ROW><ROW><id>17805856</id><snippet>python-twitter</snippet></ROW><ROW><id>17805932</id><snippet>if (j &lt; n and cost[i-1][j+1] + p[i-1][j+1] &gt; max):
  max = cost[i-1][j+1] + p[i-1][j+1]
</snippet></ROW><ROW><id>17805932</id><snippet>if (j &lt; n-1 and cost[i-1][j+1] + p[i-1][j+1] &gt; max):
  max = cost[i-1][j+1] + p[i-1][j+1]
</snippet></ROW><ROW><id>17805932</id><snippet>printsquares(w,i-1,w[i][j])
</snippet></ROW><ROW><id>17805932</id><snippet>printsquares(w,i-1,w[i-1][j])
</snippet></ROW><ROW><id>17806007</id><snippet>linedit = QtGui.QlineEdit()
linedit.setPlaceholderText("My grey text which disappear when I click on it")
linedit.setEnabled(False)
</snippet></ROW><ROW><id>17806171</id><snippet>csv</snippet></ROW><ROW><id>17806171</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17806171</id><snippet>import csv
from collections import defaultdict

result = defaultdict(dict)
fieldnames = {"ID"}

for csvfile in ("file1.csv", "file2.csv", "file3.csv"):
    with open(csvfile, newline="") as infile:
        reader = csv.DictReader(infile)
        for row in reader:
            id = row.pop("ID")
            for key in row:
                fieldnames.add(key) # wasteful, but I don't care enough
                result[id][key] = row[key]
</snippet></ROW><ROW><id>17806171</id><snippet>defaultdict</snippet></ROW><ROW><id>17806171</id><snippet>&gt;&gt;&gt; result
defaultdict(&lt;type 'dict'&gt;, 
{'001': {'SALARY': '25', 'SCHOOLS_ATTENDED': 'my Nice School', 'NAME': 'Jhon'},
'002': {'SALARY': '40', 'SCHOOLS_ATTENDED': 'His lovely school', 'NAME': 'Doe'}})
</snippet></ROW><ROW><id>17806171</id><snippet>with open("out.csv", "w", newline="") as outfile:
    writer = csv.DictWriter(outfile, sorted(fieldnames))
    writer.writeheader()
    for item in result:
        result[item]["ID"] = item
        writer.writerow(result[item])
</snippet></ROW><ROW><id>17806171</id><snippet>out.csv</snippet></ROW><ROW><id>17806171</id><snippet>ID,NAME,SALARY,SCHOOLS_ATTENDED
001,Jhon,25,my Nice School
002,Doe,40,His lovely school
</snippet></ROW><ROW><id>17806487</id><snippet>matplotlib</snippet></ROW><ROW><id>17806487</id><snippet>IPython</snippet></ROW><ROW><id>17806487</id><snippet>pip</snippet></ROW><ROW><id>17806487</id><snippet>matplotlib</snippet></ROW><ROW><id>17806487</id><snippet>IPython</snippet></ROW><ROW><id>17806487</id><snippet>matplotlib</snippet></ROW><ROW><id>17806597</id><snippet>fetchone</snippet></ROW><ROW><id>17806597</id><snippet>cursor</snippet></ROW><ROW><id>17806597</id><snippet>fetchone</snippet></ROW><ROW><id>17806597</id><snippet>None</snippet></ROW><ROW><id>17806597</id><snippet>cur1.execute("SELECT * FROM consommation WHERE zone=? AND date=?", (zone, date_p))
res = cur1.fetchone()
if res:
    abcisses += (res[0][11:13] + 'h',)
</snippet></ROW><ROW><id>17806735</id><snippet>from pandas.io import sql</snippet></ROW><ROW><id>17806735</id><snippet>sql = """...</snippet></ROW><ROW><id>17806735</id><snippet>sql</snippet></ROW><ROW><id>17806735</id><snippet>pandas</snippet></ROW><ROW><id>17806735</id><snippet>write_frame</snippet></ROW><ROW><id>17806735</id><snippet>AttributeError: 'numpy.int64' object has no attribute 'replace'</snippet></ROW><ROW><id>17806735</id><snippet>df.columns = ['COL1', 'COL2', 'COL3']
</snippet></ROW><ROW><id>17806818</id><snippet>X = numpy.zeros((50000,25)) # it's a tuple going in
C = pdist(X, 'euclidean') # euclidean with an e
</snippet></ROW><ROW><id>17806818</id><snippet>np.sqrt(np.sum(np.square(X[0])) + np.sum(np.square(X[1])))
</snippet></ROW><ROW><id>17807028</id><snippet>import  BeautifulSoup      #This is version 3 not version 4
f = open('demo.html', 'r')
html_text = f.read()
f.close()
soup = BeautifulSoup.BeautifulSoup(html_text)
print soup.contents
for a in soup.findAll('a'):
    for x in a.attrs:
        if x == 'href':
            temp = a[x]
            a[x] = "http://www.esplanade.com.sg" + temp
for a in soup.findAll('link'):
    for x in a.attrs:
        if x == 'href':
            temp = a[x]
            a[x] = "http://www.esplanade.com.sg" + temp
for a in soup.findAll('script'):
    for x in a.attrs:
        if x == 'src':
            temp = a[x]
            a[x] = "http://www.esplanade.com.sg" + temp
f = open("demo_result.html", "w")
f.write(soup.prettify().encode("utf-8"))
</snippet></ROW><ROW><id>17807390</id><snippet>twisted.application.internet.TCPServer</snippet></ROW><ROW><id>17807390</id><snippet>from twisted.application import internet

class TwoServers(TCPServer):
    def __init__(self):
        internet.TCPServer.__init__(self,9000, WebSocketFactory(factory))
        internet.TCPServer.__init__(self,80, server.Site(HandlerHTTP))
</snippet></ROW><ROW><id>17807390</id><snippet>int</snippet></ROW><ROW><id>17807390</id><snippet>list</snippet></ROW><ROW><id>17807390</id><snippet>from twisted.application import service, internet

from websocket import WebSocketFactory

factory = ...
HandleHTTP = ...

holdMyServers = service.MultiService()
internet.TCPServer(9000, WebSocketFactory(factory)).setServiceParent(holdMyServers)
internet.TCPServer(80, server.Site(HandlerHTTP).setServiceParent(holdMyServers)

...
</snippet></ROW><ROW><id>17807994</id><snippet>class _Getch:
    """Gets a single character from standard input.  Does not echo to the
screen."""
    def __init__(self):
        self.impl = _GetchUnix()
    def __call__(self): 
        return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys
    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch

getch = _Getch()
</snippet></ROW><ROW><id>17807994</id><snippet>&gt;&gt;&gt; getch()
'Y' # Here I typed Y
</snippet></ROW><ROW><id>17808124</id><snippet>str.split()</snippet></ROW><ROW><id>17808124</id><snippet>str.join()</snippet></ROW><ROW><id>17808124</id><snippet>str.split</snippet></ROW><ROW><id>17808124</id><snippet>&gt;&gt;&gt; a = '    Hello, I  am     trying  to       strip spaces  perfectly '
&gt;&gt;&gt; print ' '.join(a.split())
Hello, I am trying to strip spaces perfectly
</snippet></ROW><ROW><id>17808124</id><snippet>$ echo '    Hello, I  am\n     trying  to       strip spaces  perfectly ' | tr -s "[:space:]" " " | sed -e 's/^ *//' -e 's/ *$//'
Hello, I am trying to strip spaces perfectly
</snippet></ROW><ROW><id>17808215</id><snippet>python port_scanner.py -H 74.207.244.221 -p 21, 22, 80
</snippet></ROW><ROW><id>17808215</id><snippet>['-H', '74.207.244.221', '-p', '21,', '22,', '80']
</snippet></ROW><ROW><id>17808215</id><snippet>optparse.OptionParser</snippet></ROW><ROW><id>17808215</id><snippet>'21,'</snippet></ROW><ROW><id>17808215</id><snippet>-p</snippet></ROW><ROW><id>17808215</id><snippet>options.tgtPort</snippet></ROW><ROW><id>17808215</id><snippet>'21,'</snippet></ROW><ROW><id>17808215</id><snippet>.split(', ')</snippet></ROW><ROW><id>17808215</id><snippet>['21,']</snippet></ROW><ROW><id>17808215</id><snippet>', '</snippet></ROW><ROW><id>17808215</id><snippet>python port_scanner.py -H 74.207.244.221 -p "21, 22, 80"
</snippet></ROW><ROW><id>17808215</id><snippet>tgtPorts = [p.strip() for p in options.tgtPort.split(',')]
</snippet></ROW><ROW><id>17808215</id><snippet>.split()</snippet></ROW><ROW><id>17808215</id><snippet>&gt;&gt;&gt; 'foo'.split(',')
['foo']
</snippet></ROW><ROW><id>17808215</id><snippet>tgtPorts[0] == None</snippet></ROW><ROW><id>17808215</id><snippet>False</snippet></ROW><ROW><id>17808215</id><snippet>is</snippet></ROW><ROW><id>17808215</id><snippet>None</snippet></ROW><ROW><id>17808215</id><snippet>tgtPorts[0] is None</snippet></ROW><ROW><id>17808215</id><snippet>None</snippet></ROW><ROW><id>17808303</id><snippet>filter()</snippet></ROW><ROW><id>17808303</id><snippet>L = []
for i in lst:
    if i == y:
        L.append(i)
</snippet></ROW><ROW><id>17808303</id><snippet>[i for i in lst if i == y]
</snippet></ROW><ROW><id>17808325</id><snippet>number</snippet></ROW><ROW><id>17808325</id><snippet>data</snippet></ROW><ROW><id>17808325</id><snippet>np.bincount(data)[number]
</snippet></ROW><ROW><id>17808364</id><snippet># Encode the payload using Base64</snippet></ROW><ROW><id>17808364</id><snippet>encoders.encode_base64(msgq)</snippet></ROW><ROW><id>17808391</id><snippet>Blog.objects.filter(reader__type__name='male').annotate(reader_count=Count('reader')).filter(reader_count__gte=2)
</snippet></ROW><ROW><id>17808496</id><snippet>os.chdir(path)</snippet></ROW><ROW><id>17808901</id><snippet>set(' '.join(lst).split())
</snippet></ROW><ROW><id>17808901</id><snippet>list()</snippet></ROW><ROW><id>17809139</id><snippet>write()</snippet></ROW><ROW><id>17809139</id><snippet>import sys
import traceback

class FileTracer(object):
    def __init__(self, out):
        self.out = out

    def write(self, data):
        traceback.print_stack(None, None, sys.__stderr__)
        self.out.write(data)

    def flush(self):
        self.out.flush()

    def close(self):
        self.out.close()

sys.stderr = FileTracer(sys.stderr)

sys.stderr.write("trigger\n")
sys.stderr.flush()
</snippet></ROW><ROW><id>17809139</id><snippet>__stderr__</snippet></ROW><ROW><id>17809153</id><snippet>str.splitlines()</snippet></ROW><ROW><id>17809153</id><snippet>str.split()</snippet></ROW><ROW><id>17809153</id><snippet>'\n'.join([' '.join(line.split()) for line in ex_str.splitlines() if line.strip()])
</snippet></ROW><ROW><id>17809153</id><snippet>&gt;&gt;&gt; ex_str = u'Word   \n \t \r   \n\n\n word2    word3   \r\r\r\r\nword4\n    word5'
&gt;&gt;&gt; '\n'.join([' '.join(line.split()) for line in ex_str.splitlines() if line.strip(' ')])
u'Word\nword2 word3\nword4\nword5'
</snippet></ROW><ROW><id>17809153</id><snippet>'\n'.join([' '.join([s for s in line.split(' ') if s]) for line in ex_str.splitlines() if line.strip()])
</snippet></ROW><ROW><id>17809153</id><snippet>&gt;&gt;&gt; '\n'.join([' '.join([s for s in line.split(' ') if s]) for line in ex_str.splitlines() if line.strip(' ')])
u'Word\n\t\nword2 word3\nword4\nword5'
</snippet></ROW><ROW><id>17809251</id><snippet>&gt;&gt;&gt; bool(re.search(r'^[0-9]+$', '4444'))
True
&gt;&gt;&gt; '4444'.isdigit()    #Doesn't work for floats
True
# This will work for floats as well
&gt;&gt;&gt; bool(re.search(r'^[0-9]*(\.[0-9]+)?$', '4444.123'))
True
&gt;&gt;&gt; bool(re.search(r'^[0-9]*(\.[0-9]+)?$', '.123'))
True
</snippet></ROW><ROW><id>17809251</id><snippet>regex</snippet></ROW><ROW><id>17809251</id><snippet>&gt;&gt;&gt; bool(re.search(r'^[0-9]+%$', '23%'))
True
#To handle floats as well use this:
&gt;&gt;&gt; bool(re.search(r'^[0-9]*(\.[0-9]+)?%$', '23.15%'))
True
&gt;&gt;&gt; bool(re.search(r'^[0-9]*(\.[0-9]+)?%$', '.150%'))
True
</snippet></ROW><ROW><id>17809251</id><snippet>&gt;&gt;&gt; bool(re.search(r'^[a-z]$', 'a',re.I))
True
&gt;&gt;&gt; bool(re.search(r'^[a-z]$', 'B',re.I))
True
</snippet></ROW><ROW><id>17809251</id><snippet>^</snippet></ROW><ROW><id>17809251</id><snippet>$</snippet></ROW><ROW><id>17809251</id><snippet>^</snippet></ROW><ROW><id>17809251</id><snippet>$</snippet></ROW><ROW><id>17809345</id><snippet>stdin</snippet></ROW><ROW><id>17809345</id><snippet>stdou</snippet></ROW><ROW><id>17809536</id><snippet>self.root.after(0, animation.Animation(self.root, self.canvas, self.creature))
</snippet></ROW><ROW><id>17809536</id><snippet>Animation</snippet></ROW><ROW><id>17809536</id><snippet>after</snippet></ROW><ROW><id>17809536</id><snippet>animator = animation.Animation(self.root, self.canvas, self.creature)
self.root.after(0, animator.animate) # get things going
</snippet></ROW><ROW><id>17809536</id><snippet>for i in range(10):
    root.after(250, self.animate())
</snippet></ROW><ROW><id>17809536</id><snippet>animate</snippet></ROW><ROW><id>17809536</id><snippet>None</snippet></ROW><ROW><id>17809536</id><snippet>after</snippet></ROW><ROW><id>17809536</id><snippet>after(ms, function())
</snippet></ROW><ROW><id>17809536</id><snippet>value = function()
after(ms, value)
</snippet></ROW><ROW><id>17809536</id><snippet>self.root = root</snippet></ROW><ROW><id>17809536</id><snippet>self.root.after(250, self.animate)
</snippet></ROW><ROW><id>17809536</id><snippet>animate</snippet></ROW><ROW><id>17809536</id><snippet>after</snippet></ROW><ROW><id>17809536</id><snippet>after</snippet></ROW><ROW><id>17809536</id><snippet>animate</snippet></ROW><ROW><id>17809536</id><snippet>def animate(self, after):
    ... do animation ...
    after(250, self.animate, after)
</snippet></ROW><ROW><id>17809536</id><snippet>root.after(0, animator.animate, root.after)
</snippet></ROW><ROW><id>17809549</id><snippet>ps</snippet></ROW><ROW><id>17809718</id><snippet>PATH</snippet></ROW><ROW><id>17809718</id><snippet>if pyApp is running</snippet></ROW><ROW><id>17809718</id><snippet>$!</snippet></ROW><ROW><id>17809718</id><snippet>pgrep</snippet></ROW><ROW><id>17809718</id><snippet>pidof</snippet></ROW><ROW><id>17809718</id><snippet>app &amp; # Start a new process with your app in the background.
APP_PID=$! # Remember its PID.
kill $APP_PID # Send SIGTER to process.
</snippet></ROW><ROW><id>17809718</id><snippet>subprocess</snippet></ROW><ROW><id>17809718</id><snippet>p = subprocess.Popen(...)</snippet></ROW><ROW><id>17809718</id><snippet>import subprocess

p = subprocess.Popen(["tail", "-f", "~/.bashrc"])
print "Process ID of subprocess %s" % p.pid
# Send SIGTER (on Linux)
p.terminate()
# Wait for process to terminate
returncode = p.wait()
print "Returncode of subprocess: %s" % returncode
</snippet></ROW><ROW><id>17810089</id><snippet>stat.filemode</snippet></ROW><ROW><id>17810089</id><snippet>In [7]: import os, stat

In [8]: print(stat.filemode(os.stat('/home/soon/foo').st_mode))
-rw-r--r--

In [9]: ls -l ~/foo
-rw-r--r-- 1 soon users 0 Jul 23 18:15 /home/soon/foo
</snippet></ROW><ROW><id>17810245</id><snippet>for i in range(len(filepaths))</snippet></ROW><ROW><id>17810245</id><snippet>for i, filepath in enumerate(filepaths)</snippet></ROW><ROW><id>17810245</id><snippet>enumerate</snippet></ROW><ROW><id>17810245</id><snippet>ExcelFile(filepath)</snippet></ROW><ROW><id>17810245</id><snippet>ExcelFile(filepaths[i])</snippet></ROW><ROW><id>17810245</id><snippet>(column, label, unit)</snippet></ROW><ROW><id>17810245</id><snippet>read_csv</snippet></ROW><ROW><id>17810245</id><snippet>xlrd</snippet></ROW><ROW><id>17810245</id><snippet>In [7]: df_header = pd.read_csv('test.csv', nrows=2, index_col='three')

In [8]: df_header
Out[8]: 
               one      two    four
three                              
Timestamp  Decimal  Decimal  record
ts             ref      ref      rn

In [9]: df_data = pd.read_csv('test.csv', names=df_header.columns,
   ...:                       skiprows=4, parse_dates=True, index_col=2)

In [10]: df_data
Out[10]: 
                      one   two  four
2012-08-29 07:10:00  32.1  32.0   232
2012-08-29 09:10:00   1.1   1.2   233

In [11]: cols = pd.MultiIndex.from_tuples([tuple([x] + df_header[x].tolist())
   ....:                                   for x in df_header])

In [12]: cols
Out[12]: 
MultiIndex
[one   Decimal  ref, two   Decimal  ref, four  record   rn ]

In [14]: df_data.columns = cols

In [15]: df_data
Out[15]: 
                         one      two    four
                     Decimal  Decimal  record
                         ref      ref      rn
2012-08-29 07:10:00     32.1     32.0     232
2012-08-29 09:10:00      1.1      1.2     233
</snippet></ROW><ROW><id>17810245</id><snippet>parse_cols</snippet></ROW><ROW><id>17810245</id><snippet>df_data.columns.tolist()</snippet></ROW><ROW><id>17810344</id><snippet>import BeautifulSoup
</snippet></ROW><ROW><id>17810344</id><snippet>from BeautifulSoup import BeautifulSoup
</snippet></ROW><ROW><id>17810344</id><snippet>response</snippet></ROW><ROW><id>17810344</id><snippet>soup = BeautifulSoup(response)
</snippet></ROW><ROW><id>17810344</id><snippet>soup = BeautifulSoup(page)
</snippet></ROW><ROW><id>17810389</id><snippet>def cantor(n):
    return [0.] + cant(0., 1., n) + [1.]

def cant(x, y, n):
    if n == 0:
        return []

    new_pts = [2.*x/3. + y/3., x/3. + 2.*y/3.]
    return cant(x, new_pts[0], n-1) + new_pts + cant(new_pts[1], y, n-1)

for i in range(4):
    print(i, cantor(i))
</snippet></ROW><ROW><id>17810389</id><snippet>0 [0.0, 1.0]
1 [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]
2 [0.0, 0.1111111111111111, 0.2222222222222222, 0.3333333333333333, 0.6666666666666666,0.7777777777777777, 0.8888888888888888, 1.0]
3 [0.0, 0.037037037037037035, 0.07407407407407407, 0.1111111111111111, 0.2222222222222222, 0.25925925925925924, 0.2962962962962963, 0.3333333333333333, 0.6666666666666666, 0.7037037037037037, 0.7407407407407407, 0.7777777777777777, 0.8888888888888888, 0.9259259259259258, 0.9629629629629629, 1.0]
</snippet></ROW><ROW><id>17810403</id><snippet>for c_i in range(k):
    c[c_i] = np.mean(data[label == c_i, :], axis=0)
</snippet></ROW><ROW><id>17810403</id><snippet>label_counts = np.bincount(label)
label_sums = np.histogram2d(np.repeat(label, data_length),
                            np.tile(np.arange(data_length), k),
                            bins=(k, data_length),
                            weights=data.ravel())[0]
c = label_sums / label_count[:, None]
</snippet></ROW><ROW><id>17810466</id><snippet>pcolor(D2-D1)
</snippet></ROW><ROW><id>17810466</id><snippet>pcolor(D1)
contour(D2)
</snippet></ROW><ROW><id>17810466</id><snippet>contourf(D1,cmap='Blues')
contourf(D2,cmap='Reds', alpha=0.66)
contourf(D2,cmap='Reds', alpha=0.33)
</snippet></ROW><ROW><id>17810466</id><snippet>contour(D1,cmap='Blues')
contour(D2,cmap='Reds')
contour(D2,cmap='Reds')
</snippet></ROW><ROW><id>17810612</id><snippet>subprocess</snippet></ROW><ROW><id>17810612</id><snippet>mpg123</snippet></ROW><ROW><id>17810612</id><snippet>import subprocess
import sys

inname = 'foo.mp3'
outname = 'out.wav'
try:
    subprocess.check_call(['mpg123', '-w', outname, inname])
except CalledProcessError as e:
    print e
    sys.exit(1)
</snippet></ROW><ROW><id>17810612</id><snippet>import wave
import numpy as np

wr = wave.open('input.wav', 'r')
sz = 44100 # Read and process 1 second at a time.
da = np.fromstring(wr.readframes(sz), dtype=np.int16)
wr.close()
left, right = da[0::2], da[1::2]
</snippet></ROW><ROW><id>17810612</id><snippet>left</snippet></ROW><ROW><id>17810612</id><snippet>right</snippet></ROW><ROW><id>17810679</id><snippet>$.cookie("cookie_name")</snippet></ROW><ROW><id>17810679</id><snippet>event.preventDefault();</snippet></ROW><ROW><id>17810679</id><snippet>$(function(){
            $("#acc").submit(function(){
                username = $(this).find("#id_username").val();
                password = $(this).find("#id_password").val();
                var arr = { "csrfmiddlewaretoken": $.cookie("csrftoken"), "username": username, "password": password};
                $.post("/myaccount/", arr,function(data){
                    alert(data.test);
                }, "json");
                return false;
            });
        });
</snippet></ROW><ROW><id>17810679</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>17810679</id><snippet>&lt;input type="hidden" name="csrfmiddlewaretoken"&gt;</snippet></ROW><ROW><id>17811035</id><snippet>MySQLdb</snippet></ROW><ROW><id>17811035</id><snippet>&gt;&gt;&gt; con = MySQLdb.connect(db='test')
&gt;&gt;&gt; con.literal([1,2,3])
('1', '2', '3')
&gt;&gt;&gt; cur = con.cursor()
&gt;&gt;&gt; cur.execute("select * from test where id in %(foo)s", {'foo': [1,2,3]})
3L
&gt;&gt;&gt; cur._executed
"select * from test where id in ('1', '2', '3')"
</snippet></ROW><ROW><id>17811035</id><snippet>&gt;&gt;&gt; con.literal([1])
('1',)
</snippet></ROW><ROW><id>17811035</id><snippet>import MySQLdb.converters
conv = MySQLdb.converters.conversions.copy()

class CustomList(list):
    def __init__(self, *items):
        super(CustomList, self).__init__(items)

conv[CustomList] = lambda lst, conv: "(%s)" % ', '.join(str(item) for item in lst)

con = MySQLdb.connect(db='test', conv=conv)
cur = con.cursor()
cur.execute('select * from test where id in %(foo)s', {'foo': CustomList(0, 1, 2)})
print cur._executed
</snippet></ROW><ROW><id>17811035</id><snippet>select * from test where id in (0, 1, 2)
</snippet></ROW><ROW><id>17811035</id><snippet>list</snippet></ROW><ROW><id>17811035</id><snippet>&gt;&gt;&gt; ...
&gt;&gt;&gt; conv[list] = lambda lst, cv: "(%s)" % ', '.join(cv[type(item)](item, cv) for item in lst)
&gt;&gt;&gt; con = MySQLdb.connect(..., conv=conv)
&gt;&gt;&gt; con.literal([1, "it's working...", 2])
"(1, 'it\\'s working...', 2)"
</snippet></ROW><ROW><id>17811151</id><snippet>&gt;&gt;&gt; import site
&gt;&gt;&gt; site.USER_BASE
'C:\\Users\\ojdo\\AppData\\Roaming\\Python'
</snippet></ROW><ROW><id>17811151</id><snippet>site.USER_BASE + 'Python27/site-packages'</snippet></ROW><ROW><id>17811151</id><snippet>sys.path</snippet></ROW><ROW><id>17811151</id><snippet>C:\Users\ojdo\Documents\Python\Libs</snippet></ROW><ROW><id>17811151</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>17811151</id><snippet>C:\Python27\Lib\site-packages</snippet></ROW><ROW><id>17811151</id><snippet>import site
site.addsitedir(r'C:\Users\ojdo\Documents\Python\Libs')
</snippet></ROW><ROW><id>17811151</id><snippet>sys.path</snippet></ROW><ROW><id>17811151</id><snippet>sitecustomize</snippet></ROW><ROW><id>17811204</id><snippet>if protocol not in ['tcp','udp']:
   print "error"
   sys.exit()
</snippet></ROW><ROW><id>17811292</id><snippet>synchronized</snippet></ROW><ROW><id>17811292</id><snippet>Synchronized</snippet></ROW><ROW><id>17811292</id><snippet>synchronized</snippet></ROW><ROW><id>17811292</id><snippet>Synchronized</snippet></ROW><ROW><id>17811292</id><snippet>go</snippet></ROW><ROW><id>17811292</id><snippet>@Syncronized.synchronized.im_func</snippet></ROW><ROW><id>17811292</id><snippet>B</snippet></ROW><ROW><id>17811292</id><snippet>.im_func</snippet></ROW><ROW><id>17811292</id><snippet>class B(Synchronized):
    @Synchronized.synchronized.im_func
    def foo(self):
        return 1
</snippet></ROW><ROW><id>17811292</id><snippet>Synchronized</snippet></ROW><ROW><id>17811292</id><snippet>def synchronized(f):
    @wraps(f)
    def wrapper(self, *args, **kwargs):
        with self.lock:
            print "here"
            return f(self, *args, **kwargs)
    return wrapper

class Synchronized(object):
    def __init__(self):
        self.lock = threading.Lock()

    @synchronized
    def go(self):
        print 1

class B(Synchronized):
    @synchronized
    def foo(self):
        return 1
</snippet></ROW><ROW><id>17811384</id><snippet>star_list</snippet></ROW><ROW><id>17811384</id><snippet>star_list</snippet></ROW><ROW><id>17811384</id><snippet>self.star_list</snippet></ROW><ROW><id>17811384</id><snippet>__init__</snippet></ROW><ROW><id>17811384</id><snippet>star_list</snippet></ROW><ROW><id>17811384</id><snippet>tst = Uttenhaler_setup()
print(tst.star_list)
</snippet></ROW><ROW><id>17811384</id><snippet>star_list</snippet></ROW><ROW><id>17811384</id><snippet>print(Uttenhaler_setup.star_list)
</snippet></ROW><ROW><id>17811479</id><snippet>rack.session</snippet></ROW><ROW><id>17811479</id><snippet>rack.session</snippet></ROW><ROW><id>17811479</id><snippet>dict()</snippet></ROW><ROW><id>17811479</id><snippet>dict()</snippet></ROW><ROW><id>17811479</id><snippet>&gt;&gt;&gt; dict('val' = 'a')     
  File "&lt;ipython-input-21-1cdf9688c191&gt;", line 1
SyntaxError: keyword can't be an expression
</snippet></ROW><ROW><id>17811479</id><snippet>=</snippet></ROW><ROW><id>17811479</id><snippet>rack.session</snippet></ROW><ROW><id>17811479</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(lambda : dict(rack.session , val))
  1           0 LOAD_GLOBAL              0 (dict)
              3 LOAD_GLOBAL              1 (rack)   # load the object `rack`
              6 LOAD_ATTR                2 (session)# use the value of it's attribute
                                                    # `session`
              9 LOAD_GLOBAL              3 (val)
             12 CALL_FUNCTION            2
             15 RETURN_VALUE   
</snippet></ROW><ROW><id>17811479</id><snippet>rack.session = val</snippet></ROW><ROW><id>17811479</id><snippet>rack.session</snippet></ROW><ROW><id>17811479</id><snippet>dict</snippet></ROW><ROW><id>17811479</id><snippet>rack.session</snippet></ROW><ROW><id>17811479</id><snippet>.</snippet></ROW><ROW><id>17811479</id><snippet>dict</snippet></ROW><ROW><id>17811479</id><snippet>keyword_item   ::=  identifier "=" expression
</snippet></ROW><ROW><id>17811479</id><snippet>&gt;&gt;&gt; dict(foo = 1, bar = '2')
{'foo': 1, 'bar': '2'}
</snippet></ROW><ROW><id>17811479</id><snippet>&gt;&gt;&gt; val = 'CookieVal'
&gt;&gt;&gt; name = 'rack.session'
&gt;&gt;&gt; dict(((name,val),))
{'rack.session': 'CookieVal'}
#or
&gt;&gt;&gt; {name:val}
{'rack.session': 'CookieVal'}
</snippet></ROW><ROW><id>17811753</id><snippet>re.finditer(r'\((.*?)\)', mylist).next().groups()[0].split(', ')
['Column Percentage', 'Counts', 'Statistical Test Results']
</snippet></ROW><ROW><id>17811753</id><snippet>re.finditer</snippet></ROW><ROW><id>17811753</id><snippet>?</snippet></ROW><ROW><id>17811753</id><snippet>\(</snippet></ROW><ROW><id>17811753</id><snippet>\)</snippet></ROW><ROW><id>17811753</id><snippet>(</snippet></ROW><ROW><id>17811753</id><snippet>)</snippet></ROW><ROW><id>17811753</id><snippet>finditer</snippet></ROW><ROW><id>17811753</id><snippet>next</snippet></ROW><ROW><id>17811753</id><snippet>groups</snippet></ROW><ROW><id>17811753</id><snippet>[0]</snippet></ROW><ROW><id>17811816</id><snippet>import numpy as np

def asvoid(arr):
    """View the array as dtype np.void (bytes)
    This collapses ND-arrays to 1D-arrays, so you can perform 1D operations on them.
    http://stackoverflow.com/a/16216866/190597 (Jaime)"""    
    arr = np.ascontiguousarray(arr)
    return arr.view(np.dtype((np.void, arr.dtype.itemsize * arr.shape[-1])))

def find_index(arr, x):
    arr_as1d = asvoid(arr)
    x = asvoid(x)
    return np.nonzero(arr_as1d == x)[0]


arr = np.array([[  1,  15,   0,   0],
                [ 30,  10,   0,   0],
                [ 30,  20,   0,   0],
                [1, 2, 3, 4],
                [104, 139, 146,  75],
                [  9,  11, 146,  74],
                [  9, 138, 146,  75]], dtype='uint8')

arr = np.tile(arr,(1221488,1))
x = np.array([1,2,3,4], dtype='uint8')

print(find_index(arr, x))
</snippet></ROW><ROW><id>17811816</id><snippet>[      3      10      17 ..., 8550398 8550405 8550412]
</snippet></ROW><ROW><id>17811816</id><snippet>In [15]: x
Out[15]: 
array([^A^B^C^D], 
      dtype='|V4')
</snippet></ROW><ROW><id>17811816</id><snippet>arr_as1d == x</snippet></ROW><ROW><id>17811816</id><snippet>x</snippet></ROW><ROW><id>17811816</id><snippet>def find_index2(arr, x):
    return np.where((arr == x).all(axis=1))[0]
</snippet></ROW><ROW><id>17811816</id><snippet>In [34]: %timeit find_index(arr, x)
1 loops, best of 3: 209 ms per loop

In [35]: %timeit find_index2(arr, x)
1 loops, best of 3: 370 ms per loop
</snippet></ROW><ROW><id>17811862</id><snippet>__future__</snippet></ROW><ROW><id>17811862</id><snippet>print()</snippet></ROW><ROW><id>17811862</id><snippet>from __future__ import braces</snippet></ROW><ROW><id>17811862</id><snippet>import __hello__</snippet></ROW><ROW><id>17811862</id><snippet>import this</snippet></ROW><ROW><id>17811862</id><snippet>import antigravity</snippet></ROW><ROW><id>17811935</id><snippet>trie = [ [1, (2,),
             [2, (1,)],
             [3, [2, (2,)]],
         [2, (1,)],
         [4, (1,)]
       ]
</snippet></ROW><ROW><id>17811935</id><snippet>[1, [2, [3, ... [n, (1,)]...]]]
</snippet></ROW><ROW><id>17811935</id><snippet>[1, 2, 3, ..., n, (1,)]
</snippet></ROW><ROW><id>17811955</id><snippet>dt</snippet></ROW><ROW><id>17811955</id><snippet>dt.year</snippet></ROW><ROW><id>17811955</id><snippet>dt.month</snippet></ROW><ROW><id>17811955</id><snippet>dt.day</snippet></ROW><ROW><id>17811955</id><snippet>f=open('unity{}{}{}.txt'.format(dt.year, dt.month, dt.day), 'w')
</snippet></ROW><ROW><id>17811955</id><snippet>format</snippet></ROW><ROW><id>17812293</id><snippet>main</snippet></ROW><ROW><id>17812293</id><snippet>if __name__ == "__main__": main()   # note parentheses
</snippet></ROW><ROW><id>17812293</id><snippet>main</snippet></ROW><ROW><id>17812645</id><snippet>os</snippet></ROW><ROW><id>17812645</id><snippet>os.path</snippet></ROW><ROW><id>17812645</id><snippet>walk</snippet></ROW><ROW><id>17812645</id><snippet>listdir</snippet></ROW><ROW><id>17812645</id><snippet>abspath</snippet></ROW><ROW><id>17812645</id><snippet>basename</snippet></ROW><ROW><id>17812645</id><snippet>shutil</snippet></ROW><ROW><id>17812645</id><snippet>copyfile</snippet></ROW><ROW><id>17812645</id><snippet>dst</snippet></ROW><ROW><id>17812645</id><snippet>for subfolder_name in os.listdir(MAIN_FOLDER):
    # exercise left to reader: filter out non-folders
    subfolder_path = os.path.join(MAIN_FOLDER, subfolder_name)
    for excel_file_name in os.listdir(os.path.join(MAIN_FOLDER, subfolder_name)):
        # exercise left to reader: filter out non-excel-files
        excel_file_path = os.path.join(subfolder_path, excel_file_name)
        new_excel_file_name = extract_filename_from_excel_file(excel_file_path)
        new_excel_file_path = os.path.join(NEW_MAIN_FOLDER, subfolder_name, 
            new_excel_file_name)
        shutil.copyfile(excel_file_path, new_excel_file_path)
</snippet></ROW><ROW><id>17812645</id><snippet>extract_filename_from_excel_file</snippet></ROW><ROW><id>17812645</id><snippet>xlrd</snippet></ROW><ROW><id>17812705</id><snippet>twistd</snippet></ROW><ROW><id>17812705</id><snippet>parseOptions</snippet></ROW><ROW><id>17812705</id><snippet>argparse</snippet></ROW><ROW><id>17812788</id><snippet>[
    (x_o_r(z) for z in zip(list(a), list(b)))
    for a in x for b in x
]
</snippet></ROW><ROW><id>17812788</id><snippet>(expr for target_list in expr)</snippet></ROW><ROW><id>17812788</id><snippet>[[x_o_r(z) for z in zip(list(a), list(b))] for a in x for b in x]
</snippet></ROW><ROW><id>17812788</id><snippet>x</snippet></ROW><ROW><id>17812788</id><snippet>[x_o_r(zip(list(a), list(b))) for a in x for b in x]
</snippet></ROW><ROW><id>17812788</id><snippet>&gt;&gt;&gt; [x_o_r(zip(list(a), list(b))) for a in x for b in x]
['0000000', '1010000', '1111000', '1101100', '1100110', '1100011', '1010000', '0000000', '0101000', '0111100', '0110110', '0110011', '1111000', '0101000', '0000000', '0010100', '0011110', '0011011', '1101100', '0111100', '0010100', '0000000', '0001010', '0001111', '1100110', '0110110', '0011110', '0001010', '0000000', '0000101', '1100011', '0110011', '0011011', '0001111', '0000101', '0000000']
</snippet></ROW><ROW><id>17812788</id><snippet>itertools.product()</snippet></ROW><ROW><id>17812788</id><snippet>from itertools import product
[x_o_r(zip(list(a), list(b))) for a, b in product(x, repeat=2)]
</snippet></ROW><ROW><id>17812788</id><snippet>x_o_r</snippet></ROW><ROW><id>17812788</id><snippet>def x_o_r(a, b):
    return format(int(a, 2) ^ int(b, 2), '08b')

[x_o_r(a, b) for a, b in product(x, repeat=2)]
</snippet></ROW><ROW><id>17812788</id><snippet>&gt;&gt;&gt; timeit.timeit('[x_o_r(zip(list(a), list(b))) for a in x for b in x]', 'from __main__ import x_o_r, x', number=10000)
3.6057410949724726
&gt;&gt;&gt; timeit.timeit('[x_o_r_new(a, b) for a, b in product(x, repeat=2)]', 'from __main__ import x_o_r_new, x, product', number=10000)
0.6972788329585455
</snippet></ROW><ROW><id>17812903</id><snippet>&gt;&gt;&gt; my_list = [1, 2, 3, 4]
&gt;&gt;&gt; [str(v) for v in my_list]
['1', '2', '3', '4']
</snippet></ROW><ROW><id>17812903</id><snippet>map()</snippet></ROW><ROW><id>17812903</id><snippet>&gt;&gt;&gt; str_list = map(str, my_list)
&gt;&gt;&gt; str_list
['1', '2', '3', '4']
</snippet></ROW><ROW><id>17812903</id><snippet>list(map(str, my_list))</snippet></ROW><ROW><id>17812903</id><snippet>join()</snippet></ROW><ROW><id>17812903</id><snippet>&gt;&gt;&gt; ''.join(str_list)
'1234'
</snippet></ROW><ROW><id>17812903</id><snippet>list</snippet></ROW><ROW><id>17812903</id><snippet>list</snippet></ROW><ROW><id>17813046</id><snippet>a.py</snippet></ROW><ROW><id>17813046</id><snippet>import b

# do some stuff with b
</snippet></ROW><ROW><id>17813046</id><snippet>c.py</snippet></ROW><ROW><id>17813046</id><snippet>import a

# but you want to use b
a.b  # gives you full access to module b which was imported by a
</snippet></ROW><ROW><id>17813046</id><snippet>http</snippet></ROW><ROW><id>17813046</id><snippet>requests</snippet></ROW><ROW><id>17813046</id><snippet>http</snippet></ROW><ROW><id>17813046</id><snippet>raise requests.XX.http.WhateverError</snippet></ROW><ROW><id>17813046</id><snippet>http</snippet></ROW><ROW><id>17813067</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>17813067</id><snippet>requirements.txt</snippet></ROW><ROW><id>17813067</id><snippet>A
B
C
D
</snippet></ROW><ROW><id>17813067</id><snippet>B</snippet></ROW><ROW><id>17813067</id><snippet>B</snippet></ROW><ROW><id>17813067</id><snippet>C</snippet></ROW><ROW><id>17813067</id><snippet>D</snippet></ROW><ROW><id>17813067</id><snippet>requirements.txt</snippet></ROW><ROW><id>17813067</id><snippet>django-mediasync</snippet></ROW><ROW><id>17813067</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>17813093</id><snippet>import os
from unittest import TestCase

class MyTest(TestCase):
    def setUp(self):
        if not os.path.exists('configfile'):
            return self.skipTest('config file not found')

    def test01(self):
        # Do something with the file
        with open('configfile') as fd:
            self.assertEqual(fd.readlines().__len__(), 0)
</snippet></ROW><ROW><id>17813222</id><snippet>style</snippet></ROW><ROW><id>17813222</id><snippet>df.plot(x='col_name_1', y='col_name_2', style='o')
</snippet></ROW><ROW><id>17813222</id><snippet>style</snippet></ROW><ROW><id>17813222</id><snippet>import numpy as np
import pandas as pd

d = {'one' : np.random.rand(10),
     'two' : np.random.rand(10)}

df = pd.DataFrame(d)

df.plot(style=['o','rx'])
</snippet></ROW><ROW><id>17813323</id><snippet>import site1
import site2
def dispatch(uri):
    if uri.startswith('/site1/'):
        return site1.validate(uri)
    elif uri.startswith('/site2/):
        return site2.validate(uri)
</snippet></ROW><ROW><id>17813349</id><snippet>import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
               help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
               const=sum, default=max,
               help='sum the integers (default: find the max)')

args = parser.parse_args()
print args.accumulate(args.integers)
</snippet></ROW><ROW><id>17813352</id><snippet>easy_install python-msp430-tools
</snippet></ROW><ROW><id>17813352</id><snippet>pip</snippet></ROW><ROW><id>17813352</id><snippet>easy_install pip
</snippet></ROW><ROW><id>17813352</id><snippet>pip install python-msp430-tools
</snippet></ROW><ROW><id>17813424</id><snippet>os.system('cp item INPUT')
</snippet></ROW><ROW><id>17813424</id><snippet>os.system('cp %s INPUT' % item)
</snippet></ROW><ROW><id>17813424</id><snippet>shutil.copyfile(item, 'INPUT')
</snippet></ROW><ROW><id>17813618</id><snippet>cfg.readfp(codecs.open("myconfig", "r", "utf8"))
</snippet></ROW><ROW><id>17813952</id><snippet>with open('inputfilename.txt') as menu:
    d = {}
    for line in menu:
        key, value = line.split(None, 1)
        d[key] = value.strip()
    return d
</snippet></ROW><ROW><id>17813952</id><snippet>.split(None, 1)</snippet></ROW><ROW><id>17813952</id><snippet>' 8 Shrimp roll'</snippet></ROW><ROW><id>17813952</id><snippet>{'2': 'Green tea', '1': 'Chocolate ice cream', '8': 'Shrimp roll'}
</snippet></ROW><ROW><id>17814116</id><snippet>a+a</snippet></ROW><ROW><id>17814116</id><snippet>a+</snippet></ROW><ROW><id>17814116</id><snippet>a</snippet></ROW><ROW><id>17814116</id><snippet>\b</snippet></ROW><ROW><id>17814116</id><snippet>name='a'

import re
p = re.compile('^'+re.escape(name)+ '$')

with open('test.txt') as inpfile:
    for num, line in enumerate(inpfile):
        if p.search(line.rstrip(r'\n')):
            print num
</snippet></ROW><ROW><id>17814116</id><snippet>name='a'

with open('test.txt') as inpfile:
    for num, line in enumerate(inpfile):
        if name == line.rstrip(r'\n'):
            print num
</snippet></ROW><ROW><id>17814157</id><snippet>inrels = graph.cypher.query('START strt=node({mynode}) \
                            MATCH strt&lt;-[r:follows]-neighbor \
                            WHERE neighbor.attr = {myattr} \
                            RETURN r', {'mynode': self.eid, 'myattr': someattr})

firstrel = inrel.next()
</snippet></ROW><ROW><id>17814288</id><snippet>scipy.optimize.minimize</snippet></ROW><ROW><id>17814538</id><snippet>figure()</snippet></ROW><ROW><id>17814538</id><snippet>for col_name in ['col2','col3']:
    plt = figure() #This gives you a new figure to plot in
    x_min = min(df['col1'].min(), df[col_name].min())
    x_max = max(df['col1'].max(), df[col_name].max())
    plt.xlim([x_min,x_max])
    plt.ylim([x_min,x_max])
    plt.axes().set_aspect('equal')
    plt.scatter(df['col1'], df[col_name])
</snippet></ROW><ROW><id>17814581</id><snippet>&gt;&gt;&gt; a
array([[ 0.76303184,  0.17748702,  0.89365504,  0.07221609],
       [ 0.12267359,  0.56999037,  0.42877407,  0.8875015 ],
       [ 0.38178661,  0.57648393,  0.47056551,  0.03178402],
       [ 0.03606595,  0.93597727,  0.02199706,  0.73906879]])
&gt;&gt;&gt; a.ravel().argsort().argsort().reshape(a.shape)
array([[12,  5, 14,  3],
       [ 4,  9,  7, 13],
       [ 6, 10,  8,  1],
       [ 2, 15,  0, 11]])
</snippet></ROW><ROW><id>17814588</id><snippet>host_validation_re = re.compile(r"^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$")
</snippet></ROW><ROW><id>17814636</id><snippet>result = len(payload)
</snippet></ROW><ROW><id>17814754</id><snippet>dict</snippet></ROW><ROW><id>17814754</id><snippet>on_clicked()</snippet></ROW><ROW><id>17814754</id><snippet>import matplotlib.pyplot as plt
from matplotlib.widgets import CheckButtons

class Example:

    def onColor(self,label):
        self.cstates[label] = not self.cstates[label]
        print 'un'*(not self.cstates[label]) + 'checked %s' %label
        self.updateChart()

    def onMeasurement(self,label):
        self.mstates[label] = not self.mstates[label]
        print 'un'*(not self.mstates[label]) + 'checked %s' %label
        self.updateChart()

    def updateChart(self, event=None):
        """do something here using self.cstates and self.mstates?"""
        pass

    def __init__(self):
        colourax = plt.axes([0.5, 0.4, 0.09, 0.2])
        measurementax = plt.axes([0.5, 0.6, 0.09, 0.2])
        clabels, cvals = ('Red', 'Green', 'Blue'), (False,)*3
        mlabels, mvals = ('1', '2', '3'), (False,)*3
        self.cstates = dict(zip(clabels,cvals))
        self.mstates = dict(zip(mlabels,mvals))
        self.colours = CheckButtons(colourax, clabels, cvals)
        self.colours.on_clicked(self.onColor)
        self.measurements = CheckButtons(measurementax, mlabels, mvals)
        self.measurements.on_clicked(self.onMeasurement)

    def run(self):
        plt.show()

ex = Example()
ex.run()
</snippet></ROW><ROW><id>17814918</id><snippet>pyproj_datadir = os.sep.join([os.path.dirname(__file__), 'data'])
</snippet></ROW><ROW><id>17814918</id><snippet>if 'PROJ_DIR' in os.environ:
    pyproj_datadir = os.environ['PROJ_DIR']
else:
    pyproj_datadir = os.sep.join([os.path.dirname(__file__), 'data'])
</snippet></ROW><ROW><id>17814918</id><snippet>C:\Python27\python.exe "C:\Python27\Lib\site-packages\pyinstaller-develop\PyInstaller\main.py" --onefile --paths="C:\Python27\Lib\site-packages\mpl_toolkits\*" "C:\Documents and Settings\KAHERE\My Documents\Python code\Flood\src\root\nested\FloodRisk.py"
pause
</snippet></ROW><ROW><id>17814958</id><snippet>OrderedDict</snippet></ROW><ROW><id>17815031</id><snippet>ax.figure.canvas.draw()
bbox = x.get_window_extent()
</snippet></ROW><ROW><id>17815031</id><snippet>Bbox</snippet></ROW><ROW><id>17815031</id><snippet>draw</snippet></ROW><ROW><id>17815031</id><snippet>bbox_data = ax.transData.inverted().transform(bbox) 
</snippet></ROW><ROW><id>17815309</id><snippet>text</snippet></ROW><ROW><id>17815309</id><snippet>label</snippet></ROW><ROW><id>17815309</id><snippet>filemenu.add_command(text='Save',  command=self.onSave)
</snippet></ROW><ROW><id>17815309</id><snippet>filemenu.add_command(label='Save',  command=self.onSave)
</snippet></ROW><ROW><id>17815459</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = 'YAN300,000,000'
&gt;&gt;&gt; match = re.search(r'([\D]+)([\d,]+)', string)
&gt;&gt;&gt; output = (match.group(1), match.group(2).replace(',',''))
&gt;&gt;&gt; output
('YAN', '300000000')
</snippet></ROW><ROW><id>17815708</id><snippet>service.start()
worker_1.start()
worker_1.join()
service.terminate()
</snippet></ROW><ROW><id>17815742</id><snippet>from multiprocessing.dummy import Pool # use threads
from subprocess import call

def run(i):
    with open('log%d.txt' % i, 'wb') as file:
        return call(["cmd", str(i)], stdout=file)

return_codes = Pool(4).map(run, range(10)) # run 10 subprocesses, 4 at a time
</snippet></ROW><ROW><id>17815742</id><snippet>from functools import partial
from multiprocessing.dummy import Pool, Queue, Process # use threads
from subprocess import Popen, PIPE

def run(i, output):
    p = Popen(["cmd", str(i)], stdout=PIPE, bufsize=1)
    for line in iter(p.stdout.readline, b''):
        output((p.pid, line)) # collect the output 
    p.stdout.close()
    return p.wait()

def print_output(q):
    for pid, line in iter(q.get, None):
        print pid, line.rstrip()

q = Queue()
Process(target=print_output, args=[q]).start() # start printing thread
return_codes = Pool(4).map(partial(run, output=q.put_nowait),
                           range(10)) # run 10 subprocesses, 4 at a time
q.put(None) # exit printing thread
</snippet></ROW><ROW><id>17815742</id><snippet>from __future__ import print_function
from multiprocessing.dummy import Pool, Lock # use threads
from subprocess import Popen, PIPE

def run(i, lock=Lock()):
    p = Popen(["cmd", str(i)], stdout=PIPE, bufsize=1)
    for line in iter(p.stdout.readline, b''):
        with lock:
            print(p.pid, line.rstrip())
    p.stdout.close()
    return p.wait()

return_codes = Pool(4).map(run, range(10)) # run 10 subprocesses, 4 at a time
</snippet></ROW><ROW><id>17815742</id><snippet>print()</snippet></ROW><ROW><id>17815761</id><snippet>xpath="//a[starts-with(text(), %s)]" % category
elems = self.br.find_elements_by_xpath(xpath)
elem = elems[-1]
</snippet></ROW><ROW><id>17815761</id><snippet>starts-with</snippet></ROW><ROW><id>17815761</id><snippet>elems[-1]</snippet></ROW><ROW><id>17815817</id><snippet>mmap</snippet></ROW><ROW><id>17815817</id><snippet>np.frombuffer</snippet></ROW><ROW><id>17815817</id><snippet># `r.data` created as in the question
&gt;&gt;&gt; import mmap
&gt;&gt;&gt; with open('r.data') as f:
...   m = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
... 
&gt;&gt;&gt; r = np.frombuffer(m, dtype='int64')
&gt;&gt;&gt; r = r.reshape(shape)
&gt;&gt;&gt; r[:6, :6]
array([[7, 5, 9, 5, 3, 5],
       [2, 7, 2, 6, 7, 0],
       [9, 4, 8, 2, 5, 0],
       [7, 2, 4, 6, 6, 7],
       [2, 9, 2, 2, 2, 6],
       [5, 2, 2, 6, 1, 5]])
</snippet></ROW><ROW><id>17815817</id><snippet>r</snippet></ROW><ROW><id>17815817</id><snippet>np.fromfile</snippet></ROW><ROW><id>17815817</id><snippet>r = np.copy(r)</snippet></ROW><ROW><id>17815817</id><snippet>mmap</snippet></ROW><ROW><id>17815964</id><snippet>cdict = {c.name:c.value for c in cj}</snippet></ROW><ROW><id>17815964</id><snippet>&gt;&gt;&gt; {i:i*2 for i in range(10)}
{0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14, 8: 16, 9: 18}
</snippet></ROW><ROW><id>17815964</id><snippet>dict()</snippet></ROW><ROW><id>17815964</id><snippet>&gt;&gt;&gt; keyValList = [(i, i*2) for i in range(10)]
&gt;&gt;&gt; keyValList
[(0, 0), (1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18)]
&gt;&gt;&gt; dict(keyValList)
{0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14, 8: 16, 9: 18}
</snippet></ROW><ROW><id>17815964</id><snippet>dict()</snippet></ROW><ROW><id>17815964</id><snippet>&gt;&gt;&gt; dict((i, i*2) for i in range(10))
{0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14, 8: 16, 9: 18}
</snippet></ROW><ROW><id>17816077</id><snippet>h</snippet></ROW><ROW><id>17816077</id><snippet>bisect</snippet></ROW><ROW><id>17816077</id><snippet>In [1]: from itertools import groupby

In [2]: a=[(0,1,10), (1,2,20), (2,3,25), (0,1,15), (1,4,40), (1,4,33), (3,3,17), (2,1,19)]

In [3]: b=sorted((e[1],e[2],i) for i,e in enumerate(a)); print b
[(1, 10, 0), (1, 15, 3), (1, 19, 7), (2, 20, 1), (3, 17, 6), (3, 25, 2), (4, 33, 5), (4, 40, 4)]

In [4]: h={k:list(g) for k,g in groupby(b,lambda x: x[0])}; h
Out[4]: 
{1: [(1, 10, 0), (1, 15, 3), (1, 19, 7)],
 2: [(2, 20, 1)],
 3: [(3, 17, 6), (3, 25, 2)],
 4: [(4, 33, 5), (4, 40, 4)]}
</snippet></ROW><ROW><id>17816179</id><snippet>defaults.update(params)
params.update(defaults)
</snippet></ROW><ROW><id>17816179</id><snippet>for k in defaults:
    params.setdefault(k, defaults[k])
</snippet></ROW><ROW><id>17816420</id><snippet>os.listdir</snippet></ROW><ROW><id>17816420</id><snippet>for file_ in os.listdir(path):
    if 'Analytics Android' in file_:
        os.rename(os.path.join(path, file_), os.path.join(path, 'Android Orders.xlsx'))
</snippet></ROW><ROW><id>17816452</id><snippet>#!/usr/bin/env python

import csv    

myfile = '/path/to/untitled.csv'
newfile = '/path/to/untitled_new.csv'

reader = csv.reader(open(myfile))

remove_me = {'3270','2500'}

print('Before:')
print(open(myfile).read())

for row in reader:
    new_row = []
    for column in row:
        if column not in remove_me:
            new_row.append(column)

    csv.writer(open(newfile,'a')).writerow(new_row)

print('\n\n')
print('After:')
print(open(newfile).read())
</snippet></ROW><ROW><id>17816452</id><snippet>Before:
1950,1300,1180,48,48,400
3270,2500,1950,1300,1180



After:
1950,1300,1180,48,48,400 
1950,1300,1180 
</snippet></ROW><ROW><id>17816452</id><snippet>if</snippet></ROW><ROW><id>17816452</id><snippet>''</snippet></ROW><ROW><id>17816452</id><snippet>remove_me</snippet></ROW><ROW><id>17816547</id><snippet>xgoogle</snippet></ROW><ROW><id>17816547</id><snippet>pygoogle</snippet></ROW><ROW><id>17816550</id><snippet>from Tkinter import *
root = Tk()
canvas = Canvas(root)
canvas.pack()
rect = canvas.create_rectangle(10,10,70,70, outline="blue", fill="red")
def switch():
    # Use the itemconfig method of a Canvas to alter specific items
    canvas.itemconfig(rect, outline="green", fill="blue")
Button(root, text="switch", command=switch).pack()
root.mainloop()
</snippet></ROW><ROW><id>17816816</id><snippet>module_id = module_id

mongo_document = mongo_collection.find_one({ '_id': '%s' % module_id}, { '_id':0, 'svn_path':1 })
myvar = mongo_document
if myvar is not None:
   for key, value in myvar.iteritems():
       print value
eilf:
   print "sorry i could find that id"
</snippet></ROW><ROW><id>17816934</id><snippet>ffill</snippet></ROW><ROW><id>17816934</id><snippet>shift</snippet></ROW><ROW><id>17816934</id><snippet>In [11]: df['value'].ffill()
Out[11]:
7   NaN
6     1
4     0
5     0
1     0
0     1
8     1
2     0
3     0
9     0
Name: value, dtype: float64

In [12]: df['value'].ffill().shift(1)
Out[12]:
7   NaN
6   NaN
4     1
5     0
1     0
0     0
8     1
2     1
3     0
9     0
Name: value, dtype: float64
</snippet></ROW><ROW><id>17816934</id><snippet>In [13]: g = df.groupby('category')

In [14]: g['value'].apply(lambda x: x.ffill().shift(1))
Out[14]:
7   NaN
6   NaN
4     1
5     0
1     0
0   NaN
8     1
2     1
3     0
9     0
dtype: float64

In [15]: df['last_value'] = g['value'].apply(lambda x: x.ffill().shift(1))
</snippet></ROW><ROW><id>17817026</id><snippet>'belongings.Item'</snippet></ROW><ROW><id>17817026</id><snippet>from belongings.models import Item
</snippet></ROW><ROW><id>17817058</id><snippet>from numpy import *
import matplotlib.pylab as pl

def gibbs_sampler(alpha,delta,gamma,y,t):
    #initialize beta
    beta=1

    num_iter=100

    beta_draws=[]
    lambda_draws=[]

    for i in range(num_iter):
        #sample lambda given other lambdas and beta
        lambdas=lambda_update(alpha,beta,y,t)

        #record sample
        lambda_draws.append(lambdas)

        #sample beta given lambda samples
        beta=beta_update(alpha,gamma,delta,lambdas,y)

        #record sample
        beta_draws.append(beta)

    pl.plot(beta_draws)
    pl.show()

def lambda_update(alpha,beta,y,t):

    new_alpha=[(x+alpha) for x in y]
    new_beta=[1.0/(a+beta) for a in t]#Changed here

    #sample from this distribution 10 times
    samples=random.gamma(new_alpha,new_beta)
    return samples


def beta_update(alpha,gamma,delta,lambdas,y):
    #get sample
    sample=random.gamma(len(y)*alpha+gamma, 
                        1.0 / (delta+sum(lambdas)))#Changed here
    return sample


def main():

    y=[5,1,5,14,3,19,1,1,4,22]
    t=[94,16,63,126,5,31,1,1,2,10]

    alpha=1.8
    gamma=0.01
    delta=1

    gibbs_sampler(alpha,delta,gamma,y,t)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17817145</id><snippet>&gt;&gt;&gt; testDict = {'Mississippi': '28', 'Oklahoma': '40', 'Delaware': '10', 'Minnesota': '27', 'Illinois': '17', 'Arkansas': '05', 'New Mexico': '35', 'Indiana': '18', 'Maryland': '24'}

&gt;&gt;&gt; {k: [v] for k, v in testDict.items()}
{'Mississippi': ['28'], 'Oklahoma': ['40'], 'Delaware': ['10'], 'Minnesota': ['27'], 'Illinois': ['17'], 'Arkansas': ['05'], 'New Mexico': ['35'], 'Indiana': ['18'], 'Maryland': ['24']}
</snippet></ROW><ROW><id>17817145</id><snippet>&gt;&gt;&gt; elem = "abc"
&gt;&gt;&gt; [elem] = ['abc']
</snippet></ROW><ROW><id>17817145</id><snippet>&gt;&gt;&gt; [elem] = "abc"

Traceback (most recent call last):
  File "&lt;pyshell#64&gt;", line 1, in &lt;module&gt;
    [elem] = "abc"
ValueError: too many values to unpack
</snippet></ROW><ROW><id>17817145</id><snippet>'a', 'b', 'c'</snippet></ROW><ROW><id>17817145</id><snippet>elem</snippet></ROW><ROW><id>17817145</id><snippet>&gt;&gt;&gt; [a, b, c] = "abc"
&gt;&gt;&gt; print a, b, c
a b c
</snippet></ROW><ROW><id>17817458</id><snippet>loc</snippet></ROW><ROW><id>17817458</id><snippet>scipy.stats</snippet></ROW><ROW><id>17817458</id><snippet>loc</snippet></ROW><ROW><id>17817458</id><snippet>scale</snippet></ROW><ROW><id>17817458</id><snippet>gamma</snippet></ROW><ROW><id>17817458</id><snippet>loc</snippet></ROW><ROW><id>17817458</id><snippet>loc</snippet></ROW><ROW><id>17817458</id><snippet>scipy.stats</snippet></ROW><ROW><id>17817458</id><snippet>fit()</snippet></ROW><ROW><id>17817458</id><snippet>(shape0, shape1, ..., shapeN, loc, scale)</snippet></ROW><ROW><id>17817458</id><snippet>N</snippet></ROW><ROW><id>17817458</id><snippet>(loc, scale)</snippet></ROW><ROW><id>17817458</id><snippet>(shape, loc, scale)</snippet></ROW><ROW><id>17817622</id><snippet>line = #string

regex = re.compile(r' (\w{8})')

groups = regex.findall(line) #gives a list of the matches in order of appearance
</snippet></ROW><ROW><id>17818015</id><snippet>&gt;&gt;&gt; def foo(bar=1, baz=[2,3]):
...     print bar, baz
... 
&gt;&gt;&gt; foo()
1 [2, 3]
&gt;&gt;&gt; foo(baz=4)
1 4
&gt;&gt;&gt; foo(10, 20)
10 20
</snippet></ROW><ROW><id>17818015</id><snippet>__name__</snippet></ROW><ROW><id>17818015</id><snippet>&gt;&gt;&gt; def goo(a,b):
...     print "{}({}, {})".format(goo.__name__, a, b)
... 
&gt;&gt;&gt; goo(1,2)
goo(1, 2)
&gt;&gt;&gt; def hoo(*args):
...     print "{}({})".format(hoo.__name__, ', '.join((str(arg) for arg in args)))
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; hoo(2,3,4,5)
hoo(2, 3, 4, 5)
</snippet></ROW><ROW><id>17818015</id><snippet>partial</snippet></ROW><ROW><id>17818015</id><snippet>foo()</snippet></ROW><ROW><id>17818015</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def foo(a, b):                                                              
...     return (a if not isinstance(a, partial) else a()) + (b if not isinstance(b, partial) else b())
... 
&gt;&gt;&gt; fun = partial(foo, 1, partial(foo, partial(foo, 2, 4), partial(foo, 3, 5)))
&gt;&gt;&gt; fun()
15
&gt;&gt;&gt; fun = partial(foo, 1, partial(foo, partial(foo, 2, 4), partial(foo, 3, 5)))
&gt;&gt;&gt; def print_pfunc(pfunc):
...     return "{}({}{}{})".format(pfunc.func.__name__, ', '.join(str(arg) if not isinstance(arg, partial) else print_pfunc(arg) for arg in pfunc.args) if pfunc.args else '', ', ' if pfunc.args and pfunc.keywords else '', ', '.join('{}={}'.format(k, v if not isinstance(v, partial) else print_pfunc(v)) for k, v in pfunc.keywords) if pfunc.keywords else '')
... 
&gt;&gt;&gt; print print_pfunc(fun)
foo(1, foo(foo(2, 4), foo(3, 5)))
</snippet></ROW><ROW><id>17818015</id><snippet>format()</snippet></ROW><ROW><id>17818015</id><snippet>def print_pfunc(pfunc):
    args = ""
    if pfunc.args is not None:
        args = ', '.join(str(arg) if not isinstance(arg, partial) else print_pfunc(arg) for arg in pfunc.args)
    kwargs = ""
    if pfunc.keywords is not None:
        kwargs = ', '.join('{}={}'.format(k, v if not isinstance(v, partial) else print_pfunc(v)) for k, v in pfunc.keywords)
    return "{}({}{}{})".format(pfunc.func.__name__, args, ', ' if args and kwargs else '', kwargs)
</snippet></ROW><ROW><id>17818121</id><snippet>(m1,m2)</snippet></ROW><ROW><id>17818121</id><snippet>(x,m1)</snippet></ROW><ROW><id>17818121</id><snippet>m1</snippet></ROW><ROW><id>17818121</id><snippet>x</snippet></ROW><ROW><id>17818121</id><snippet>m2</snippet></ROW><ROW><id>17818121</id><snippet>m1</snippet></ROW><ROW><id>17818121</id><snippet>&gt;&gt;&gt; x = 2
&gt;&gt;&gt; y = 3
&gt;&gt;&gt; z = 4
&gt;&gt;&gt; x,y = y,z
&gt;&gt;&gt; x
3
&gt;&gt;&gt; y
4
</snippet></ROW><ROW><id>17818121</id><snippet>(x,m1)</snippet></ROW><ROW><id>17818121</id><snippet>x,y = y,x</snippet></ROW><ROW><id>17818121</id><snippet>x</snippet></ROW><ROW><id>17818121</id><snippet>y</snippet></ROW><ROW><id>17818156</id><snippet>print ', '.join(jvm)</snippet></ROW><ROW><id>17818177</id><snippet>import telnetlib
import os

host_ip = "1.1.1.1"
user = "user"
password = "password"

tnet_hndl = telnetlib.Telnet(host_ip)
print (tnet_hndl.read_until(b"login: "))
tnet_hndl.write(user.encode('ascii') + b"\n")
print (tnet_hndl.read_until(b"Password: "))
tnet_hndl.write(password.encode('ascii') + b"\n")
print (tnet_hndl.read_until(b"# "))
#tnet_hndl.set_debuglevel(1) #enable this if you want to debug more
tnet_hndl.write(b"&lt;enter some windows cmd here&gt;" + b"\n")
print (tnet_hndl.read_until(b"# "))
tnet_hndl.close()
</snippet></ROW><ROW><id>17818262</id><snippet>list.__len__</snippet></ROW><ROW><id>17818262</id><snippet>def CarQueue(list):
    def __len__(self):
        return something_dubious()
    # if you're going to override len, make sure to overide `__iter__`
    # and `__getitem__`

class CarWash(object):
    def __init__(self):
        self._queue = CarQueue([1, 2, 3])

    @property
    def queue(self):
        return self._queue
</snippet></ROW><ROW><id>17818404</id><snippet>brew install libmemcached</snippet></ROW><ROW><id>17818521</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; f = sys.stdout
&gt;&gt;&gt; f.write('abc')
abc
</snippet></ROW><ROW><id>17818521</id><snippet>f = sys.stdout</snippet></ROW><ROW><id>17818521</id><snippet>f = open(fileName)</snippet></ROW><ROW><id>17818521</id><snippet>f.close()</snippet></ROW><ROW><id>17818521</id><snippet>with open(fileName, 'r') as f:
    # Do Something
</snippet></ROW><ROW><id>17819093</id><snippet>import subprocess
myfile = 'data'
sort = subprocess.Popen(['sort', '--key=1,2', myfile],
    stdout=subprocess.PIPE)
for line in sort.stdout:
    your_code_here
sort.wait()
assert sort.returncode == 0, 'sort failed'
</snippet></ROW><ROW><id>17819242</id><snippet>class UserAdmin(UserAdmin):
    list_display = ('email', 'first_name', 'last_name', 'phone')
    inlines = (UserProfileInline,)

    def phone(self, obj):
        try:
            phone = obj.userprofile.phone #Or change this to how you would access the userprofile object - This was assuming that the User, Profile relationship is OneToOne
            return phone
        except:
            return ""

    phone.short_description = 'Phone'

# Re-register UserAdmin
admin.site.unregister(User)
admin.site.register(User, UserAdmin)
</snippet></ROW><ROW><id>17819242</id><snippet>list_display</snippet></ROW><ROW><id>17819261</id><snippet>table = soup.find('table', class_='views-table cols-6')                                                                                                                                                                                                                        
for row in table.find_all('tr'):                                                                                                                                                                                                                                               
    row_text = list()                                                                                                                                                                                                                                                          
    for item in row.find_all('td'):                                                                                                                                                                                                                                            
        text = item.text.strip()                                                                                                                                                                                                                                               
        row_text.append(text.encode('utf8'))                                                                                                                                                                                                                                   
    print row_text
</snippet></ROW><ROW><id>17819274</id><snippet>time.sleep(n)</snippet></ROW><ROW><id>17819274</id><snippet>n</snippet></ROW><ROW><id>17819274</id><snippet>import time.sleep as sleep
import sys

try:
    while True:
        # code to find the latest file

        # code to copy it to another location

        sleep(3600)
except KeyboardInterrupt:
    print("Quitting the program.")
except:
    print("Unexpected error: "+sys.exc_info()[0])
    raise
</snippet></ROW><ROW><id>17819274</id><snippet>try</snippet></ROW><ROW><id>17819274</id><snippet>except</snippet></ROW><ROW><id>17819410</id><snippet>printf</snippet></ROW><ROW><id>17819410</id><snippet>String.Format</snippet></ROW><ROW><id>17819410</id><snippet>printf</snippet></ROW><ROW><id>17819410</id><snippet>format</snippet></ROW><ROW><id>17819415</id><snippet>raise visa_exceptions.VisaIOError(status)
</snippet></ROW><ROW><id>17819494</id><snippet>pack</snippet></ROW><ROW><id>17819494</id><snippet>grid</snippet></ROW><ROW><id>17819494</id><snippet>from Tkinter import *

def super_function():
    fen1.quit

fen1 = Tk()
entr = []
for i in xrange(10):
    entr.append(Entry(fen1))
    entr[i].grid(row=i)
# Use grid instead of pack here
Button(fen1,text='store everything in a list',command=super_function).grid()
fen1.mainloop()
</snippet></ROW><ROW><id>17819622</id><snippet>integrate.quad</snippet></ROW><ROW><id>17819622</id><snippet>tuple</snippet></ROW><ROW><id>17819622</id><snippet># import scipy.integrate
from scipy import integrate

# define the function we wish to integrate
f = lambda x: x**2

# do the integration on f over the interval [0, 10]
results = integrate.quad(f, 0, 10)

# print out the integral result, not the error
print 'the result of the integration is %lf' % results[0]
</snippet></ROW><ROW><id>17819722</id><snippet>SEA</snippet></ROW><ROW><id>17819722</id><snippet>player_radar = SEA</snippet></ROW><ROW><id>17819722</id><snippet>SEA</snippet></ROW><ROW><id>17819722</id><snippet>player_radar</snippet></ROW><ROW><id>17819722</id><snippet>SEA</snippet></ROW><ROW><id>17819722</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>17819722</id><snippet>player_radar = [sublist[:] for sublist in SEA]
</snippet></ROW><ROW><id>17819722</id><snippet>[:]</snippet></ROW><ROW><id>17819869</id><snippet>out.write("Added "+line.strip()) # Or out.write("Added {}".format(line.strip()))
</snippet></ROW><ROW><id>17819869</id><snippet>&gt;&gt;&gt; "Added "+"abc\n".strip()
'Added abc'
</snippet></ROW><ROW><id>17819869</id><snippet>help()</snippet></ROW><ROW><id>17819869</id><snippet>write(...)
    write(str) -&gt; None.  Write string str to file.
</snippet></ROW><ROW><id>17819869</id><snippet>write()</snippet></ROW><ROW><id>17819870</id><snippet>g.username = user.name
</snippet></ROW><ROW><id>17819870</id><snippet>You are logged in as {{ g.username }}
</snippet></ROW><ROW><id>17819981</id><snippet>from lxml import etree

def validate(xmlparser, xmlfilename):
    try:
        with open(xmlfilename, 'r') as f:
            etree.fromstring(f.read(), xmlparser) 
        return True
    except:
        return False

with open(schema_file, 'r') as f:
    schema_root = etree.XML(f.read())

schema = etree.XMLSchema(schema_root)
xmlparser = etree.XMLParser(schema=schema)

filenames = ['input1.xml', 'input2.xml', 'input3.xml']
for filename in filenames:
    if validate(xmlparser, filename):
        print "%s validates" % filename
    else:
        print "%s doesn't validate" % filename
</snippet></ROW><ROW><id>17819999</id><snippet>def run(self):              
    while True:
        self.buffer += self.ser.read(self.ser.inWaiting()) #read all char in buffer
        while '\n' in self.buffer: #split data line by line and store it in var
            var, self.buffer = self.buffer.split('\n', 1)
            self.queue.put(var) #put received line in the queue
        time.sleep(0.01)   #do not monopolize CPU
</snippet></ROW><ROW><id>17819999</id><snippet>class mySerial(threading.Thread):
    def __init__(self, queue):
        super(mySerial, self).__init__()
        self.queue = queue #the received data is put in a queue
        self.buffer = ''
        #configure serial connection
        self.ser = serial.Serial(port = 3, baudrate=9600)

    def run(self):              
        while True:
            self.buffer += self.ser.read(self.ser.inWaiting() or 1) #read all char in buffer
            while '\n' in self.buffer: #split data line by line and store it in var
                var, self.buffer = self.buffer.split('\n', 1)
                self.queue.put(var) #put received line in the queue
</snippet></ROW><ROW><id>17820256</id><snippet>In [1]: df = DataFrame(np.random.randn(8,3))

In [2]: store = HDFStore('test.h5')

In [3]: store['df'] = df

# you can store an arbitrary python object via pickle
In [4]: store.get_storer('df').attrs.my_attribute = dict(A = 10)

In [5]: store.get_storer('df').attrs.my_attribute
{'A': 10}
</snippet></ROW><ROW><id>17820274</id><snippet>datetime</snippet></ROW><ROW><id>17820274</id><snippet>from datetime import datetime
...
source.date = datetime.now()
</snippet></ROW><ROW><id>17820274</id><snippet>datetime.utcnow()</snippet></ROW><ROW><id>17820274</id><snippet>CURRENT_TIMESTAMP</snippet></ROW><ROW><id>17820274</id><snippet>datetime.now()</snippet></ROW><ROW><id>17820361</id><snippet>__getitem__</snippet></ROW><ROW><id>17820361</id><snippet>A</snippet></ROW><ROW><id>17820361</id><snippet>cimport cython
from numpy cimport ndarray as ar
from cython.parallel import prange
@cython.boundscheck(False)
@cython.wraparound(False)
cpdef cysumpar(ar[double] A):
    cdef double tot
    cdef int i, n=A.size
    for i in prange(n, nogil=True):
        tot += A[i]
    return tot
</snippet></ROW><ROW><id>17820361</id><snippet>vector</snippet></ROW><ROW><id>17820452</id><snippet>def OnOver(event):
   if len(ax.lines) &gt; 1 :
      ax.lines[-1].remove()
      ax.lines[-1].remove()
   ax.axhline(event.ydata)
   ax.axvline(event.xdata)
   plt.draw()
</snippet></ROW><ROW><id>17820452</id><snippet>lhor = ax.axhline (0.5)
lver = ax.axvline (1)
def OnOver2(event):
   lhor.set_ydata(event.ydata)
   lver.set_xdata(event.xdata)
   plt.draw()
</snippet></ROW><ROW><id>17820489</id><snippet>sed</snippet></ROW><ROW><id>17820489</id><snippet>sed -i '
  s/10\.0\.0\.1/10.0.0.3/
  s/10\.0\.0\.2/10.0.0.4/
' /etc/resolv.conf
</snippet></ROW><ROW><id>17820489</id><snippet>s//</snippet></ROW><ROW><id>17820489</id><snippet>-i</snippet></ROW><ROW><id>17820489</id><snippet>sed</snippet></ROW><ROW><id>17820489</id><snippet>.</snippet></ROW><ROW><id>17820489</id><snippet>sed</snippet></ROW><ROW><id>17820489</id><snippet>.</snippet></ROW><ROW><id>17820489</id><snippet>cp /etc/resolv.conf.config1 /etc/resolv.conf
</snippet></ROW><ROW><id>17820511</id><snippet>http://earth.google.com/kml/2.2</snippet></ROW><ROW><id>17820511</id><snippet>&lt;kml xmlns="http://earth.google.com/kml/2.2"&gt;
</snippet></ROW><ROW><id>17820511</id><snippet>Document</snippet></ROW><ROW><id>17820511</id><snippet>{http://earth.google.com/kml/2.2}Document</snippet></ROW><ROW><id>17820511</id><snippet>document = kmlData.find('Document')
</snippet></ROW><ROW><id>17820511</id><snippet>document = kmlData.find('{http://earth.google.com/kml/2.2}Document')
</snippet></ROW><ROW><id>17820511</id><snippet>gx:altitudeMode</snippet></ROW><ROW><id>17820511</id><snippet>gx</snippet></ROW><ROW><id>17820511</id><snippet>gx:</snippet></ROW><ROW><id>17820511</id><snippet>gx</snippet></ROW><ROW><id>17820511</id><snippet>gx</snippet></ROW><ROW><id>17820511</id><snippet>http://www.google.com/kml/ext/2.2</snippet></ROW><ROW><id>17820511</id><snippet>&lt;kml xmlns="http://earth.google.com/kml/2.2" xmlns:gx="http://www.google.com/kml/ext/2.2"&gt;
</snippet></ROW><ROW><id>17820511</id><snippet>In [1]: from xml.etree import ElementTree as ET

In [2]: kmlData = ET.parse("kml2.xml")

In [3]: document = kmlData.find('{http://earth.google.com/kml/2.2}Document')

In [4]: document
Out[4]: &lt;Element '{http://earth.google.com/kml/2.2}Document' at 0x1895810&gt;

In [5]:
</snippet></ROW><ROW><id>17820606</id><snippet>In [172]: df = DataFrame(randn(200,1),columns=['A'],index=pd.date_range('2000',periods=200,freq='M'))

In [173]: df['month'] = df.index.month

In [174]: df['year'] = df.index.year

In [175]: df = df.reset_index(drop=True).set_index(['year','month'])

In [176]: df
Out[176]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 200 entries, (2000, 7) to (2017, 2)
Data columns (total 1 columns):
A    200  non-null values
dtypes: float64(1)

In [177]: df.head()
Out[177]: 
                   A
year month          
2000 7      0.084256
     8      2.507213
     9     -0.642151
     10     1.972307
     11     0.926586
</snippet></ROW><ROW><id>17820606</id><snippet>In [179]: pd.PeriodIndex([ pd.Period(year=year,month=month,freq='M') for year, month in df.index ])
Out[179]: 
&lt;class 'pandas.tseries.period.PeriodIndex'&gt;
freq: M
[2000-07, ..., 2017-02]
length: 200
</snippet></ROW><ROW><id>17820606</id><snippet>In [180]: new_index = pd.PeriodIndex([ pd.Period(year=year,month=month,freq='M') for year, month in df.index ]).to_timestamp()
Out[180]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2000-07-01 00:00:00, ..., 2017-02-01 00:00:00]
Length: 200, Freq: MS, Timezone: None
</snippet></ROW><ROW><id>17820606</id><snippet>In [182]: df.index = new_index

In [183]: df
Out[183]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 200 entries, 2000-07-01 00:00:00 to 2017-02-01 00:00:00
Freq: MS
Data columns (total 1 columns):
A    200  non-null values
dtypes: float64(1)

In [184]: df.head()
Out[184]: 
                   A
2000-07-01  0.084256
2000-08-01  2.507213
2000-09-01 -0.642151
2000-10-01  1.972307
2000-11-01  0.926586
</snippet></ROW><ROW><id>17820606</id><snippet>to_timestamp</snippet></ROW><ROW><id>17820606</id><snippet>how='e'</snippet></ROW><ROW><id>17820606</id><snippet>In [1]: pr = pd.period_range('200001',periods=20,freq='M')

In [2]: pr
Out[2]: 
&lt;class 'pandas.tseries.period.PeriodIndex'&gt;
freq: M
[2000-01, ..., 2001-08]
length: 20

In [3]: pr.to_timestamp()
Out[3]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2000-01-01 00:00:00, ..., 2001-08-01 00:00:00]
Length: 20, Freq: MS, Timezone: None

In [4]: pr.to_timestamp(how='e')
Out[4]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2000-01-31 00:00:00, ..., 2001-08-31 00:00:00]
Length: 20, Freq: M, Timezone: None
</snippet></ROW><ROW><id>17820623</id><snippet>def erase(string, positions):
    return "".join([y for x,y in enumerate(string) if x not in positions])
</snippet></ROW><ROW><id>17820623</id><snippet>&gt;&gt;&gt; s='xx22xx_1x_xxxx-xxxx'
&gt;&gt;&gt; erase(s, (0,1,7))
'22xx_x_xxxx-xxxx'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17820741</id><snippet>.app</snippet></ROW><ROW><id>17820741</id><snippet>xattr</snippet></ROW><ROW><id>17820741</id><snippet>u'com.apple.FinderInfo'</snippet></ROW><ROW><id>17820741</id><snippet>Finder.h</snippet></ROW><ROW><id>17820741</id><snippet>kHasBundle</snippet></ROW><ROW><id>17820741</id><snippet>attrs = xattr.getxattr('/path/to/dir', u'com.apple.FinderInfo')
ispackage = bool(ord(attrs[8]) &amp; 0x20)  # I *think* this is correct; works for hidden dirs and &amp; 0x40
</snippet></ROW><ROW><id>17820783</id><snippet> - (ind2+1 &lt; nsteps) take ind2+1 and, in any place that ind2+1 
   is greater than nsteps, replace by nsteps. 
 - (ind2-1 &gt; 0) take ind2-1 and, in any place that ind2-1 is 
   less than zero, put zero instead. 
</snippet></ROW><ROW><id>17820949</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17820949</id><snippet>list</snippet></ROW><ROW><id>17820949</id><snippet>import csv
from collections import defaultdict

# Gather the data from the CSV file
d = defaultdict(list)
with open('data.csv', 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter='\t')
    for row in reader:
        d[float(row[0])].append(float(row[1]))

# Print the mean.
for k in d.keys():
    print k, sum(d[k])/len(d[k])
</snippet></ROW><ROW><id>17821292</id><snippet>url(r'^com/', include('com.urls', namespace="com")),
</snippet></ROW><ROW><id>17821292</id><snippet>{% url 'com:location_detail' pk=location.id %}
</snippet></ROW><ROW><id>17821312</id><snippet>for func in (something, something1, something2):
    try:
        func()
    except Keyerror as e:
        print e
</snippet></ROW><ROW><id>17821745</id><snippet>import csv
import json
data = {}
with open('proteins.csv','rb') as f:
    reader = csv.reader(f)
    for row in reader:
        name = row[0]
        sequence = row[1]
        mod_sequence = row[2]
        mod_indeces = map(int,row[3].split(', '))
        spectral_count = int(row[4])
        peptide = {'sequence':sequence,'mod_sequence':mod_sequence,
                   'mod_indeces':mod_indeces,'spectral_count':spectral_count}
        if name in data:
            data[name]['peptides'].append(peptide)
        else:
            data[name] = {'peptides':[peptide]}
    f.close()

f = open('output.txt','wb')
for protein in data:
    f.write(protein)
    f.write(',')
    f.write(json.dumps(data[protein]))
    f.write('\n')
f.close()
</snippet></ROW><ROW><id>17821745</id><snippet>import csv
import json
data = {}
rows_to_skip = 1
rows_read = 0
with open('proteins.csv','rb') as f:
    reader = csv.reader(f)
    for row in reader:
        if rows_read &gt;= rows_to_skip:
            name = row[0]
            sequence = row[1]
            mod_sequence = row[2]
            mod_indeces = map(int,row[3].split(', '))
            spectral_count = int(row[4])
            peptide = {'sequence':sequence,'mod_sequence':mod_sequence,
                       'mod_indeces':mod_indeces,'spectral_count':spectral_count}
            if name in data:
                data[name]['peptides'].append(peptide)
            else:
                data[name] = {'peptides':[peptide]}
        rows_read += 1
    f.close()

f = open('output.txt','wb')
for protein in data:
    f.write(protein)
    f.write(',')
    f.write(json.dumps(data[protein]))
    f.write('\n')
f.close()
</snippet></ROW><ROW><id>17821745</id><snippet>peptide = OrderedDict([('sequence',sequence),
                       ('mod_sequence',mod_sequence),
                       ('mod_indeces',mod_indeces),
                       ('spectral_count',spectral_count)])
</snippet></ROW><ROW><id>17821745</id><snippet>sequence</snippet></ROW><ROW><id>17821745</id><snippet>mod_sequence</snippet></ROW><ROW><id>17821745</id><snippet>mod_indeces</snippet></ROW><ROW><id>17821745</id><snippet>spectral_count</snippet></ROW><ROW><id>17821745</id><snippet>from collections import OrderedDict</snippet></ROW><ROW><id>17821780</id><snippet>else:
        if listA[0] &lt;= listA[1]:
             return sorted(listA[1:])
</snippet></ROW><ROW><id>17821780</id><snippet>return  listA[0] &lt;= listA[1] and sorted(listA[1:])
</snippet></ROW><ROW><id>17821860</id><snippet>data</snippet></ROW><ROW><id>17821860</id><snippet>project/
   settings.py
   ...
myapp/
   __init__.py
   data.py
   huge_static_data.json
   models.py
   ...
</snippet></ROW><ROW><id>17821860</id><snippet>myapp/data.py</snippet></ROW><ROW><id>17821860</id><snippet>with file(os.path.join(os.dirname(__file__), "huge_static_data.json")) as in_f:
  something_large = json.load(in_f)
</snippet></ROW><ROW><id>17821860</id><snippet>myapp/models.py</snippet></ROW><ROW><id>17821860</id><snippet>from myapp.data import something_large
</snippet></ROW><ROW><id>17821962</id><snippet>print("%s" % x) 
</snippet></ROW><ROW><id>17821980</id><snippet>'http://{}:{}@{}:{}'.format(username, password, server, port)
</snippet></ROW><ROW><id>17821980</id><snippet>'http://{username}:{password}@{server}:{port}'.format(
    username=username,
    password=password,
    server=server,
    port=port
)
</snippet></ROW><ROW><id>17821980</id><snippet>locals()</snippet></ROW><ROW><id>17821980</id><snippet>'http://{username}:{password}@{server}:{port}'.format(**locals())
</snippet></ROW><ROW><id>17822099</id><snippet>rotated_small = photo_small.rotate(angle, resample=Image.BICUBIC, expand=True)
</snippet></ROW><ROW><id>17822103</id><snippet>from Tkinter import *

def super_function():
    out = map(Entry.get, entr)
    fen1.destroy()
    print out

fen1 = Tk()
entr = []
for i in xrange(10):
    entr.append(Entry(fen1))
    entr[i].grid(row=i+1)

Button(fen1, text = 'store everything in a list', command = super_function).grid()

fen1.mainloop()
</snippet></ROW><ROW><id>17822200</id><snippet>try:
    x = 1 / 0
except Exception as e:
    print e
</snippet></ROW><ROW><id>17822200</id><snippet>traceback</snippet></ROW><ROW><id>17822200</id><snippet>logging</snippet></ROW><ROW><id>17822200</id><snippet>import traceback

try:
    x = 1 / 0
except Exception as e:
    print traceback.format_exc()  # I prefer this to traceback.print_exc()


import logging

try:
    x = 1 / 0
except Exception as e:
    logging.exception(e)
</snippet></ROW><ROW><id>17822210</id><snippet>np.random.choice</snippet></ROW><ROW><id>17822210</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data = np.random.normal(size=1000)
hist, bins = np.histogram(data, bins=50)

bin_midpoints = bins[:-1] + np.diff(bins)/2
cdf = np.cumsum(hist)
cdf = cdf / cdf[-1]
values = np.random.rand(10000)
value_bins = np.searchsorted(cdf, values)
random_from_cdf = bin_midpoints[value_bins]

plt.subplot(121)
plt.hist(data, 50)
plt.subplot(122)
plt.hist(random_from_cdf, 50)
plt.show()
</snippet></ROW><ROW><id>17822210</id><snippet>data = np.column_stack((np.random.normal(scale=10, size=1000),
                        np.random.normal(scale=20, size=1000)))
x, y = data.T                        
hist, x_bins, y_bins = np.histogram2d(x, y, bins=(50, 50))
x_bin_midpoints = x_bins[:-1] + np.diff(x_bins)/2
y_bin_midpoints = y_bins[:-1] + np.diff(y_bins)/2
cdf = np.cumsum(hist.ravel())
cdf = cdf / cdf[-1]

values = np.random.rand(10000)
value_bins = np.searchsorted(cdf, values)
x_idx, y_idx = np.unravel_index(value_bins,
                                (len(x_bin_midpoints),
                                 len(y_bin_midpoints)))
random_from_cdf = np.column_stack((x_bin_midpoints[x_idx],
                                   y_bin_midpoints[y_idx]))
new_x, new_y = random_from_cdf.T

plt.subplot(121, aspect='equal')
plt.hist2d(x, y, bins=(50, 50))
plt.subplot(122, aspect='equal')
plt.hist2d(new_x, new_y, bins=(50, 50))
plt.show()
</snippet></ROW><ROW><id>17822217</id><snippet>inflate()</snippet></ROW><ROW><id>17822217</id><snippet>Z_STREAM_END</snippet></ROW><ROW><id>17822217</id><snippet>inflateEnd()</snippet></ROW><ROW><id>17822217</id><snippet>Z_OK</snippet></ROW><ROW><id>17822217</id><snippet>inflate()</snippet></ROW><ROW><id>17822217</id><snippet>Z_STREAM_END</snippet></ROW><ROW><id>17822217</id><snippet>Z_BUF_ERROR</snippet></ROW><ROW><id>17822217</id><snippet>inflate()</snippet></ROW><ROW><id>17822217</id><snippet>Z_STREAM_END</snippet></ROW><ROW><id>17822217</id><snippet>/* ...
Z_BUF_ERROR if no progress is possible or if there was not enough room in the
output buffer when Z_FINISH is used.  Note that Z_BUF_ERROR is not fatal, and
inflate() can be called again with more input and more output space to
continue decompressing.
... */
</snippet></ROW><ROW><id>17822217</id><snippet>unsigned</snippet></ROW><ROW><id>17822217</id><snippet>z_stream</snippet></ROW><ROW><id>17822217</id><snippet>NSUInteger</snippet></ROW><ROW><id>17822217</id><snippet>unsigned</snippet></ROW><ROW><id>17822217</id><snippet>inflate()</snippet></ROW><ROW><id>17822217</id><snippet>nil</snippet></ROW><ROW><id>17822217</id><snippet>return nil;</snippet></ROW><ROW><id>17822217</id><snippet>- (NSData *) gzipInflate
{
    z_stream strm;

    // Initialize input
    strm.next_in = (Bytef *)[self bytes];
    NSUInteger left = [self length];        // input left to decompress
    if (left == 0)
        return nil;                         // incomplete gzip stream

    // Create starting space for output (guess double the input size, will grow
    // if needed -- in an extreme case, could end up needing more than 1000
    // times the input size)
    NSUInteger space = left &lt;&lt; 1;
    if (space &lt; left)
        space = NSUIntegerMax;
    NSMutableData *decompressed = [NSMutableData dataWithLength: space];
    space = [decompressed length];

    // Initialize output
    strm.next_out = (Bytef *)[decompressed mutableBytes];
    NSUInteger have = 0;                    // output generated so far

    // Set up for gzip decoding
    strm.avail_in = 0;
    strm.zalloc = Z_NULL;
    strm.zfree = Z_NULL;
    strm.opaque = Z_NULL;
    int status = inflateInit2(&amp;strm, (15+16));
    if (status != Z_OK)
        return nil;                         // out of memory

    // Decompress all of self
    do {
        // Allow for concatenated gzip streams (per RFC 1952)
        if (status == Z_STREAM_END)
            (void)inflateReset(&amp;strm);

        // Provide input for inflate
        if (strm.avail_in == 0) {
            strm.avail_in = left &gt; UINT_MAX ? UINT_MAX : (unsigned)left;
            left -= strm.avail_in;
        }

        // Decompress the available input
        do {
            // Allocate more output space if none left
            if (space == have) {
                // Double space, handle overflow
                space &lt;&lt;= 1;
                if (space &lt; have) {
                    space = NSUIntegerMax;
                    if (space == have) {
                        // space was already maxed out!
                        (void)inflateEnd(&amp;strm);
                        return nil;         // output exceeds integer size
                    }
                }

                // Increase space
                [decompressed setLength: space];
                space = [decompressed length];

                // Update output pointer (might have moved)
                strm.next_out = (Bytef *)[decompressed mutableBytes] + have;
            }

            // Provide output space for inflate
            strm.avail_out = space - have &gt; UINT_MAX ? UINT_MAX :
                             (unsigned)(space - have);
            have += strm.avail_out;

            // Inflate and update the decompressed size
            status = inflate (&amp;strm, Z_SYNC_FLUSH);
            have -= strm.avail_out;

            // Bail out if any errors
            if (status != Z_OK &amp;&amp; status != Z_BUF_ERROR &amp;&amp;
                status != Z_STREAM_END) {
                (void)inflateEnd(&amp;strm);
                return nil;                 // invalid gzip stream
            }

            // Repeat until all output is generated from provided input (note
            // that even if strm.avail_in is zero, there may still be pending
            // output -- we're not done until the output buffer isn't filled)
        } while (strm.avail_out == 0);

        // Continue until all input consumed
    } while (left || strm.avail_in);

    // Free the memory allocated by inflateInit2()
    (void)inflateEnd(&amp;strm);

    // Verify that the input is a valid gzip stream
    if (status != Z_STREAM_END)
        return nil;                         // incomplete gzip stream

    // Set the actual length and return the decompressed data
    [decompressed setLength: have];
    return decompressed;
}
</snippet></ROW><ROW><id>17822273</id><snippet>from datetime import datetime, timezone
datetime.now(timezone.utc).strftime("%Y%m%d")
</snippet></ROW><ROW><id>17822273</id><snippet>from datetime import datetime
datetime.utcnow().strftime("%Y%m%d")
</snippet></ROW><ROW><id>17822301</id><snippet>+</snippet></ROW><ROW><id>17822301</id><snippet>In [1]: import pandas as pd

In [2]: df = pd.DataFrame({'year':['2012', '2012'], 'month':['01', '02']})

In [3]: df
Out[3]:
  month  year
0    01  2012
1    02  2012

In [4]: df['concatenated'] = df['year'] + df['month']

In [5]: df
Out[5]:
  month  year concatenated
0    01  2012       201201
1    02  2012       201202
</snippet></ROW><ROW><id>17822301</id><snippet>set_index</snippet></ROW><ROW><id>17822301</id><snippet>In [6]: df = df.set_index('concatenated')

In [7]: df
Out[7]:
             month  year
concatenated
201201          01  2012
201202          02  2012
</snippet></ROW><ROW><id>17822301</id><snippet>pd.concat</snippet></ROW><ROW><id>17822335</id><snippet>testList = list()
testList.append({"_id": aList["_id"], "stuff": aList["stuff"], "stuff2": aCount, "stuff3": anotherList, "stuff4": aList["stuff2"]})
</snippet></ROW><ROW><id>17822343</id><snippet>login_required</snippet></ROW><ROW><id>17822343</id><snippet>login_url</snippet></ROW><ROW><id>17822343</id><snippet>login_required</snippet></ROW><ROW><id>17822343</id><snippet>from django.contrib.auth.views import redirect_to_login
from django.core.urlresolvers import reverse
import functools

def login_required(fn):
    @functools.wraps(fn)
    def _decorated(request, *args, **kwargs):
        if request.user.is_authenticated():
            return fn(request, *args, **kwargs)

        path = request.get_full_path()
        login_url = reverse('login')
        return redirect_to_login(path, login_url)
</snippet></ROW><ROW><id>17822343</id><snippet>urls.py</snippet></ROW><ROW><id>17822502</id><snippet>rem_btn = QtGui.QPushButton("X")
rem_btn.clicked.connect(self.remove_item)
layout.addRow(string, rem_btn)
</snippet></ROW><ROW><id>17822502</id><snippet> sending_button = self.sender() 
</snippet></ROW><ROW><id>17822502</id><snippet>labelWidget = self.layout.labelForField(sending_button)
</snippet></ROW><ROW><id>17822502</id><snippet>sending_button.deleteLater()
if labelWidget:
   labelWidget.deleteLater()
</snippet></ROW><ROW><id>17822815</id><snippet>str</snippet></ROW><ROW><id>17822815</id><snippet>np.str_</snippet></ROW><ROW><id>17822815</id><snippet>object</snippet></ROW><ROW><id>17822815</id><snippet>S4</snippet></ROW><ROW><id>17822815</id><snippet>object</snippet></ROW><ROW><id>17822815</id><snippet>df['year'].astype(object)</snippet></ROW><ROW><id>17822870</id><snippet># Python Variables
USR = 'user_here'
PWD = 'pass_here'
</snippet></ROW><ROW><id>17822870</id><snippet>#!/bin/python -B
from auth import *
print('Username:', USR)
print('Password:', PWD)
</snippet></ROW><ROW><id>17822961</id><snippet>html5lib</snippet></ROW><ROW><id>17822961</id><snippet>import requests
from bs4 import BeautifulSoup

html = requests.get('http://www.atlasdermatologico.com.br/listar.asp?acao=indice').text
soup = BeautifulSoup(html, 'html5lib')

for a in soup.find_all('a'):
    href = a.get('href')

    if '\\' in repr(href):
        print(repr(href))
</snippet></ROW><ROW><id>17822961</id><snippet>\xb4</snippet></ROW><ROW><id>17823038</id><snippet>^[a-z0-9]+\.[a-z0-9]{1,4}$
</snippet></ROW><ROW><id>17823267</id><snippet>split()</snippet></ROW><ROW><id>17823267</id><snippet>one_row = {'Birth Year': '1990', 'Hobby': 'tenis,piano', 'Surname': 'Smith', 'Firstname': 'John'}
one_row['Hobby'] = one_row['Hobby'].split(',')
one_row
Out[7]: 
{'Birth Year': '1990',
 'Firstname': 'John',
 'Hobby': ['tenis', 'piano'],
 'Surname': 'Smith'}
</snippet></ROW><ROW><id>17823267</id><snippet>for p  in csvdr:
    p['Hobby'] = p['Hobby'].split(',')
    print p
    Person(**p)
</snippet></ROW><ROW><id>17823267</id><snippet>__str__</snippet></ROW><ROW><id>17823267</id><snippet>str</snippet></ROW><ROW><id>17823267</id><snippet>def __str__(self):
    s=""
    for k,v in self.__dict__.items():
        s += k + ": " + str(v) + ", "
    return s
</snippet></ROW><ROW><id>17823273</id><snippet>from remainder import xy
def GCD(x,y): 
    #gives the Greatest Common Divisor of two values.
    while y != 0:
        r = xy(x,y)
        x = y
        y = r 
    print x
</snippet></ROW><ROW><id>17823273</id><snippet>def xy(x, y):
#Gives the remainder of the division of x by y. Outputs as r.
   while x &gt;= y:
       x -= y
   return x
</snippet></ROW><ROW><id>17823426</id><snippet>kernel</snippet></ROW><ROW><id>17823426</id><snippet>#Compute the point below which to integrate
iso = kernel((x1,y1))

#Sample from your KDE distribution
sample = kernel.resample(size=10000)

#Filter the sample
insample = kernel(sample) &lt; iso

#The integral you want is equivalent to the probability of drawing a point 
#that gets through the filter
integral = insample.sum() / float(insample.shape[0])
print integral
</snippet></ROW><ROW><id>17823473</id><snippet>-sin(theta1)**2/cos(theta1) + 1/cos(theta1)</snippet></ROW><ROW><id>17823473</id><snippet>cos(theta1)</snippet></ROW><ROW><id>17823473</id><snippet>1 - sin(theta1)**2 = cos(theta1)**2</snippet></ROW><ROW><id>17823473</id><snippet>sympy</snippet></ROW><ROW><id>17823473</id><snippet>trigsimp</snippet></ROW><ROW><id>17823473</id><snippet>&gt;&gt;&gt; Q
[cos(theta1), -sin(theta1), 0,   0],
[sin(theta1),  cos(theta1), 0,   0],
[          0,            0, 1, 980],
[          0,            0, 0,   1]
&gt;&gt;&gt; Q.inv()
[-sin(theta1)**2/cos(theta1) + 1/cos(theta1), sin(theta1), 0,    0],
[                               -sin(theta1), cos(theta1), 0,    0],
[                                          0,           0, 1, -980],
[                                          0,           0, 0,    1]
&gt;&gt;&gt; 
&gt;&gt;&gt; sympy.trigsimp(Q.inv())
[ cos(theta1), sin(theta1), 0,    0],
[-sin(theta1), cos(theta1), 0,    0],
[           0,           0, 1, -980],
[           0,           0, 0,    1]
</snippet></ROW><ROW><id>17823764</id><snippet>with open("tokens.txt", "r") as f:
    tokens = f.readlines()

....
stream.filter(track=tokens)
</snippet></ROW><ROW><id>17823764</id><snippet>class StdOutListener(StreamListener):        
        """ A listener handles tweets are the received from the stream.
        This is a basic listener that just prints received tweets to stdout.

        """        
    def on_status(self, data):            
        try:                
            print '%s , %s , %s , %s' % (data.text,\ &lt;-- change to data.csv?               
            data.author.screen_name,data.created_at,data.source)
            with open("data.csv", 'a+') as f:
                f.write("{text},{name},{created},{source}\n"
                        .format(text=str(data.text), 
                                name=str(data.author.screen_name), 
                                created=str(data.created_at), 
                                source=str(data.source)))               
            return True            
        except Exception, e:                
            print &gt;&gt; sys.stderr, 'Encountered Exception:', e                
            pass        

    def on_error(self, status):            
        return True
</snippet></ROW><ROW><id>17823809</id><snippet>import contextlib
import datetime
import urllib2

with contextlib.closing(urllib2.urlopen(urllib2.Request(
        "http://www.w3schools.com/html/",
        headers={"If-Modified-Since": last_access_time}))) as u:
    if u.getcode() != 304:
        cached_html = lxml.html.parse(u)
        last_access_time = datetime.datetime.now()
html = cached_html
</snippet></ROW><ROW><id>17823809</id><snippet>last_access_time</snippet></ROW><ROW><id>17823809</id><snippet>cached_html</snippet></ROW><ROW><id>17823978</id><snippet>def func(obj):
    if not isinstance(obj,list):
        obj = [obj]
    for o in obj:
        print o
</snippet></ROW><ROW><id>17824011</id><snippet>sys.path</snippet></ROW><ROW><id>17824011</id><snippet>sys.path</snippet></ROW><ROW><id>17824011</id><snippet>sys.path</snippet></ROW><ROW><id>17824011</id><snippet>site</snippet></ROW><ROW><id>17824011</id><snippet>sys.path</snippet></ROW><ROW><id>17824011</id><snippet>.pyd</snippet></ROW><ROW><id>17824011</id><snippet>.dll</snippet></ROW><ROW><id>17824011</id><snippet>.py</snippet></ROW><ROW><id>17824011</id><snippet>.py[co]</snippet></ROW><ROW><id>17824011</id><snippet>.pyd</snippet></ROW><ROW><id>17824011</id><snippet>.so</snippet></ROW><ROW><id>17824123</id><snippet>a = 1
b = 2 
assert a==b, "A does not Equal B"
</snippet></ROW><ROW><id>17824123</id><snippet> if(condition_not_met):
     raise ValueError("You did not enter a correct option")
</snippet></ROW><ROW><id>17824123</id><snippet>class MyInputError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)
</snippet></ROW><ROW><id>17824123</id><snippet>if(condition_not_met):
    raise MyInputError("Wrong input. Please try again")
</snippet></ROW><ROW><id>17824146</id><snippet>after</snippet></ROW><ROW><id>17824146</id><snippet>canvas.after(time, dosomething) #the first parameter is how many milliseconds it will wait before it will call the second parameter.
</snippet></ROW><ROW><id>17824147</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17824147</id><snippet>Popen(args, bufsize=0, ...)
</snippet></ROW><ROW><id>17824147</id><snippet>args</snippet></ROW><ROW><id>17824147</id><snippet>git</snippet></ROW><ROW><id>17824147</id><snippet>bufsize</snippet></ROW><ROW><id>17824147</id><snippet>log</snippet></ROW><ROW><id>17824147</id><snippet>bufsize</snippet></ROW><ROW><id>17824147</id><snippet>gerritlog = Popen(['git','log','--grep','gerrit_commitmsg'], stdout=PIPE, stderr=PIPE)
</snippet></ROW><ROW><id>17824187</id><snippet>&gt;&gt;&gt; A = {(3,'x'):-2, (6,'y'):3, (8, 'b'):9}
&gt;&gt;&gt; B = {(3,'y'):4, (6,'y'):6}
&gt;&gt;&gt; {k: A.get(k,0) + B.get(k,0) for k in A.keys() | B.keys()}
{(8, 'b'): 9, (3, 'x'): -2, (6, 'y'): 9, (3, 'y'): 4}
</snippet></ROW><ROW><id>17824187</id><snippet>.keys()</snippet></ROW><ROW><id>17824187</id><snippet>dict_keys</snippet></ROW><ROW><id>17824187</id><snippet>|</snippet></ROW><ROW><id>17824187</id><snippet>A.keys() + B.keys()</snippet></ROW><ROW><id>17824187</id><snippet>Counter</snippet></ROW><ROW><id>17824318</id><snippet>f = open("myfile.csv", 'r')
data = f.read().split('\n') #separates the contents into lines with while leaving out the newline characters
myDict = {}
for x in range(len(data)):
    data[x] = data[x].split(',') #makes each line a list of variables. If the data is contain extra white spaces use the strip() method
    myDict[data[x][0]] = (data[x][1], data[x][2]) #this will make the dictionary like you described in the question
</snippet></ROW><ROW><id>17824318</id><snippet>with</snippet></ROW><ROW><id>17824410</id><snippet>#include &lt;iostream&gt;
#include &lt;string&gt;

#define f(x) substr(true?x, false?x)

int main () {
  std::string s = "Hello, world";
  std::string y = s.f(1:4);
  std::cout &lt;&lt; y &lt;&lt; "\n";
}
</snippet></ROW><ROW><id>17824616</id><snippet>df.convert_objects(convert_numeric=True)</snippet></ROW><ROW><id>17824616</id><snippet>nan</snippet></ROW><ROW><id>17824644</id><snippet>log_after_request</snippet></ROW><ROW><id>17824644</id><snippet>AccessLogMiddleware.__call__</snippet></ROW><ROW><id>17824644</id><snippet>import datetime
import bottle
from bottle import route, static_file, get, post, error, request, template, redirect, response, hook

# unchanged from OP
@route('/index.html')
def index_handler():
    return '&lt;h1&gt;Hello, world!&lt;/h1&gt;'

# unchanged from OP
def log_after_request():
    try:
        length = response.content_length
    except:
        try:
            length = len(response.body)
        except:
            length = '???'
    print 'MYLOG:', '{ip} - - [{time}] "{method} {uri} {protocol}" {status} {length}'.format(
        ip=request.environ.get('REMOTE_ADDR'),
        time=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        method=request.environ.get('REQUEST_METHOD'),
        uri=request.environ.get('REQUEST_URI'),
        protocol=request.environ.get('SERVER_PROTOCOL'),
        status=response.status_code,
        length=length,
    )

# code I've added begins here
class AccessLogMiddleware(object):
    def __init__(self, app):
        self.app = app

    def __call__(self, e, h):
        # call bottle and store the return value
        ret_val = self.app(e, h)

        # log the request
        log_after_request()

        # return bottle's return value
        return ret_val


app = bottle.app()
logged_app = AccessLogMiddleware(app)
bottle.run(host='0.0.0.0', port='8000', app=logged_app)
</snippet></ROW><ROW><id>17824849</id><snippet>5.0</snippet></ROW><ROW><id>17824849</id><snippet>4.999...</snippet></ROW><ROW><id>17824849</id><snippet>int()</snippet></ROW><ROW><id>17824849</id><snippet>actual = 25
paid = 26.65
cents = int(round(paid*100)) #Turns 26.65 into 2665 before you do any float math
dollars = cents / 100
cents %= 100
quarters = cents / 25
cents %= 25
dimes = cents / 10
cents %= 10
nickels = cents / 5
print quarters, dimes, nickels,cents
print 5.0/5,int(5.0/5)
</snippet></ROW><ROW><id>17824849</id><snippet>int()</snippet></ROW><ROW><id>17824849</id><snippet>round()</snippet></ROW><ROW><id>17824881</id><snippet> rdr = csv.reader(open(filename))

 tables = []
 this_table = []
 tables.append(this_table)
 for row in rdr:
      if row[0] is None:
         this_table = []
         tables.append(this_table)
      this_table.append(row)
</snippet></ROW><ROW><id>17825068</id><snippet>900.4.3</snippet></ROW><ROW><id>17825068</id><snippet>birth_date="[678]\d\d\.\d+\.\d+"</snippet></ROW><ROW><id>17825068</id><snippet>birth_date="451.1.1"</snippet></ROW><ROW><id>17825068</id><snippet>birth_date="900\.1\.1"</snippet></ROW><ROW><id>17825068</id><snippet>6</snippet></ROW><ROW><id>17825068</id><snippet>7</snippet></ROW><ROW><id>17825068</id><snippet>8</snippet></ROW><ROW><id>17825068</id><snippet>900</snippet></ROW><ROW><id>17825074</id><snippet>textContent.replace(word, '')</snippet></ROW><ROW><id>17825074</id><snippet>replace</snippet></ROW><ROW><id>17825074</id><snippet>textContent</snippet></ROW><ROW><id>17825074</id><snippet>textContent</snippet></ROW><ROW><id>17825074</id><snippet>textContent.replace(word, '')
</snippet></ROW><ROW><id>17825074</id><snippet>textContent = textContent.replace(word, '')
</snippet></ROW><ROW><id>17825090</id><snippet>os.path.exists</snippet></ROW><ROW><id>17825090</id><snippet>os.path.isfile</snippet></ROW><ROW><id>17825090</id><snippet>try...except: pass</snippet></ROW><ROW><id>17825090</id><snippet>for i in range (1,18):
   if os.path.isfile("galmasksciPHOTOf105w"+str(i)+".fits") and os.path.exists("fittedsciPHOTOf105w"+str(i)+".fits"):
       img1= pf.getdata("galmasksciPHOTOf105w"+str(i)+".fits")
       img2= pf.getdata("fittedsciPHOTOf105w"+str(i)+".fits")
       img3=(img2)[2]
       newimg=img1/img3
       pf.writeto("dividedsciPHOTOf105w"+str(i)+".fits",newimg, clobber=True)
</snippet></ROW><ROW><id>17825090</id><snippet>for i in range (1,18):
   try:
       img1= pf.getdata("galmasksciPHOTOf105w"+str(i)+".fits")
       img2= pf.getdata("fittedsciPHOTOf105w"+str(i)+".fits")
       img3=(img2)[2]
       newimg=img1/img3
       pf.writeto("dividedsciPHOTOf105w"+str(i)+".fits",newimg, clobber=True)
   except IOError:
       pass
</snippet></ROW><ROW><id>17825513</id><snippet>- url: /_ah/start
  script: colors.handler.app
</snippet></ROW><ROW><id>17825513</id><snippet>handlers:</snippet></ROW><ROW><id>17825704</id><snippet>def</snippet></ROW><ROW><id>17825704</id><snippet>yield</snippet></ROW><ROW><id>17825704</id><snippet>yield</snippet></ROW><ROW><id>17825704</id><snippet>func(...)</snippet></ROW><ROW><id>17825722</id><snippet>&gt;&gt;&gt; numpy.nan is numpy.NaN is numpy.NAN
True
</snippet></ROW><ROW><id>17825970</id><snippet>var1, var2, var3, var4 = l
</snippet></ROW><ROW><id>17825970</id><snippet>l</snippet></ROW><ROW><id>17825970</id><snippet>var1, var2, var3, var4 = l[:4]
</snippet></ROW><ROW><id>17825984</id><snippet>import os

path = 'Root'
for root, dirnames, filenames in os.walk(path):
    print root
    for filename in filenames:
        print filename
    if not filenames:
        print 'No File Found'
    print
</snippet></ROW><ROW><id>17826063</id><snippet>dropna</snippet></ROW><ROW><id>17826063</id><snippet>In [11]: df.dropna(subset=['Value1', 'Value2', 'Value3'])
Out[11]:
   Num     Date  Value1  Value2  Value3
0    1  7/29/11       1       2       3
3    4   7/6/11      -1       0       2
</snippet></ROW><ROW><id>17826063</id><snippet>notnull</snippet></ROW><ROW><id>17826063</id><snippet>notnull</snippet></ROW><ROW><id>17826063</id><snippet>In [21]: df.loc[:, ['Value1', 'Value2', 'Value3']].apply(pd.notnull)
Out[21]:
  Value1 Value2 Value3
0   True   True   True
1  False   True   True
2   True  False  False
3   True   True   True

In [22]: df.loc[:, ['Value1', 'Value2', 'Value3']].apply(pd.notnull).all(1)
Out[22]:
0     True
1    False
2    False
3     True
dtype: bool
</snippet></ROW><ROW><id>17826063</id><snippet>In [23]: df[df.loc[:, ['Value1', 'Value2', 'Value3']].apply(pd.notnull).all(1)]
Out[23]:
   Num     Date  Value1  Value2  Value3
0    1  7/29/11       1       2       3
3    4   7/6/11      -1       0       2

In [24]: df = df[df.loc[:, ['Value1', 'Value2', 'Value3']].apply(pd.notnull).all(1)]
</snippet></ROW><ROW><id>17826262</id><snippet>install_opener</snippet></ROW><ROW><id>17826262</id><snippet>open</snippet></ROW><ROW><id>17826262</id><snippet>opener</snippet></ROW><ROW><id>17826262</id><snippet>self.p_handler = urllib.request.ProxyHandler({'http' : self.proxy})
self.opener = urllib.request.build_opener(self.p_handler)
result = self.opener.open(url)
with open(filename, 'wb') as f:
    for chunk in iter(lambda: result.read(1024), ''):
        f.write(chunk)
</snippet></ROW><ROW><id>17826262</id><snippet>result = self.opener.open(url)
with open(filename, 'wb') as f:
    f.write(result.read())
</snippet></ROW><ROW><id>17826664</id><snippet>seen = {}   # Key prefixes already processed
while True:
    k0 = None  # Current prefix
    for L in all_the_data:
        k = L[0][:2]
        if k not in seen:
            if k0 is None:
                k0 = k
            if k0 == k:
                store_into_database(L)
    if k0 is None:
        break
    seen.append(k0)
</snippet></ROW><ROW><id>17826664</id><snippet>n+1</snippet></ROW><ROW><id>17826664</id><snippet>n</snippet></ROW><ROW><id>17826792</id><snippet>$(function () {
    $filterArgs = $("ul li").filter(function () {
        var txt = $(this).text();
        return txt.indexOf("Filter") &lt; 0;
    });
    $filterArgs.click(function () {
        $(this).toggleClass('active');
        $("table tr").hide();
        $("table tr td").each(function () {
            $rowData = $(this);
            $filterArgs.filter(".active").each(function () {
                if ($rowData.text() == $(this).text()) {
                    $rowData.parent().show();
                    return false;
                }
            });
        });
    });
});
</snippet></ROW><ROW><id>17826934</id><snippet>with open('datafile') as fin:
    lines = list(fin)
    lines.sort(key=lambda line: line.split()[1])

with open('outfile','w') as fout:
    fout.writelines(lines)
</snippet></ROW><ROW><id>17826934</id><snippet>field1 "field 2" field3</snippet></ROW><ROW><id>17826934</id><snippet>csv</snippet></ROW><ROW><id>17827023</id><snippet>setdefault</snippet></ROW><ROW><id>17827023</id><snippet>defaultdict</snippet></ROW><ROW><id>17827023</id><snippet>mydictionary = {"OuterKey1": {"InnerKey1": "Value1", "InnerKey2": "Value2"}, "OuterKey2": {"InnerKey1": "Value3", "InnerKey2": "Value4"}}
d = {}
for k, v in mydictionary.items():
    for ik, iv in v.items():
            d.setdefault(ik, {})[k] = iv

# result:
# d == {'InnerKey2': {'OuterKey2': 'Value4', 'OuterKey1': 'Value2'}, 'InnerKey1': {'OuterKey2': 'Value3', 'OuterKey1': 'Value1'}}
</snippet></ROW><ROW><id>17827023</id><snippet>defaultdict</snippet></ROW><ROW><id>17827023</id><snippet>from collections import defaultdict
d = defaultdict(dict)
for k, v in mydictionary.items():
    for ik, iv in v.items():
            d[ik][k] = iv
</snippet></ROW><ROW><id>17827330</id><snippet>from collections import deque

# The number 5 indicates for how many iterations the actors should be rendered.
rendered_actors = deque([None] * 5, maxlen=5)

for point_and_mag in pm.points_mag:
    if rendered_actors[-1] is not None:
        renderer.removeActor(rendered_actors[-1])
        renderer.ResetCamera()
        renderWindow.Render()

    time.sleep(0.5)
    mag = point_and_mag[1]
    point = point_and_mag[0]
    if mag &gt; 2:
        pointCloud = VtkPointCloud(pm)
        pointCloud.addPoint(point, math.log(mag)*10)
        rendered_actors.appendleft(pointcloud.vtkActor)
        renderer.AddActor(pointCloud.vtkActor)
        renderer.ResetCamera()
        renderWindow.Render()
    else:
        rendered_actors.appendleft(None)
</snippet></ROW><ROW><id>17827330</id><snippet>deque</snippet></ROW><ROW><id>17827330</id><snippet>for point_and_mag in pm.points_mag:
    mag = point_and_mag[1]
    point = point_and_mag[0]
</snippet></ROW><ROW><id>17827330</id><snippet>for point, mag in pm.points_mag:
    # ...
    if mag &gt; 2:
        # ...
</snippet></ROW><ROW><id>17827690</id><snippet>updatedb</snippet></ROW><ROW><id>17827926</id><snippet>import module
fname = module.__file__
with open(fname) as fin:
    shebang = next(fin)
</snippet></ROW><ROW><id>17827926</id><snippet>.py</snippet></ROW><ROW><id>17827926</id><snippet>.pyc</snippet></ROW><ROW><id>17827926</id><snippet>__file__</snippet></ROW><ROW><id>17827926</id><snippet>inspect.getsourcelines</snippet></ROW><ROW><id>17827926</id><snippet> shebang = inspect.getsourcelines(module)[0]
 if not shebang.startswith('#!'):
    pass #Not a shebang :)
</snippet></ROW><ROW><id>17828015</id><snippet>echo $PATH</snippet></ROW><ROW><id>17828015</id><snippet>which ifconfig</snippet></ROW><ROW><id>17828015</id><snippet>stdin, stdout, stderr = dssh.exec_command('/abs/path/to/ifconfig')
</snippet></ROW><ROW><id>17828015</id><snippet>echo $PATH</snippet></ROW><ROW><id>17828015</id><snippet>/usr/bin:/bin</snippet></ROW><ROW><id>17828015</id><snippet>/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin</snippet></ROW><ROW><id>17828015</id><snippet>ifconfig</snippet></ROW><ROW><id>17828015</id><snippet>/usr/sbin</snippet></ROW><ROW><id>17828113</id><snippet>var productNameUrl = info.split('productNameUrl:"')[1];

ProductNameUrl = productNameUrl.split('"')[0];
</snippet></ROW><ROW><id>17828204</id><snippet>Rect</snippet></ROW><ROW><id>17828204</id><snippet>Rect</snippet></ROW><ROW><id>17828204</id><snippet>def collide_top(a, b):
    return a.top &lt;= b.bottom &lt;= a.bottom and (a.left &lt;= b.left &lt;= a.right or b.left &lt;= a.left &lt;= b.right)
def collide_bottom(a, b):
    return a.bottom &gt;= b.top &gt;= a.top and (a.left &lt;= b.left &lt;= a.right or b.left &lt;= a.left &lt;= b.right)
def collide_left(a, b):
    return a.left &lt;= b.right &lt;= a.right and (a.top &lt;= b.top &lt;= a.bottom or b.top &lt;= a.top &lt;= b.bottom)
def collide_right(a, b):
    return a.right &gt;= b.left &gt;= a.left and (a.top &lt;= b.top &lt;= a.bottom or b.top &lt;= a.top &lt;= b.bottom)

import pygame
from pygame.locals import *

pygame.init()
screen = pygame.display.set_mode((300, 300))
clock = pygame.time.Clock()

center = Rect((100, 100, 100, 100))
player = Rect((10, 0, 75, 75))

move = {K_UP:    ( 0, -1),
        K_DOWN:  ( 0,  1),
        K_LEFT:  (-1,  0),
        K_RIGHT: ( 1,  0)}

while True:
    screen.fill((0, 0 ,0))
    pressed = pygame.key.get_pressed()
    for d in [m for (k, m) in move.items() if pressed[k]]:
      player.move_ip(*d)
    pygame.draw.rect(screen, (120, 0, 120), center, 3)
    pygame.draw.rect(screen, (0, 200, 55), player, 2)
    # check if 'player' collides with the bottom of 'center'
    print collide_bottom(center, player)
    pygame.display.flip()
    if pygame.event.get(QUIT): break
    pygame.event.poll()
    clock.tick(60)
</snippet></ROW><ROW><id>17828204</id><snippet>player</snippet></ROW><ROW><id>17828204</id><snippet>center</snippet></ROW><ROW><id>17828204</id><snippet>def collide_top(a, b):
    return a.top == b.bottom and (a.left &lt;= b.left &lt;= a.right or b.left &lt;= a.left &lt;= b.right)
def collide_bottom(a, b):
    return a.bottom == b.top and (a.left &lt;= b.left &lt;= a.right or b.left &lt;= a.left &lt;= b.right)
def collide_left(a, b):
    return a.left == b.right and (a.top &lt;= b.top &lt;= a.bottom or b.top &lt;= a.top &lt;= b.bottom)
def collide_right(a, b):
    return a.right == b.left and (a.top &lt;= b.top &lt;= a.bottom or b.top &lt;= a.top &lt;= b.bottom)
</snippet></ROW><ROW><id>17828260</id><snippet>plt.setp(xtickNames, rotation=45, fontsize=8)
</snippet></ROW><ROW><id>17828260</id><snippet>ax.set_ticklabels(range(N), rotation=45, fontsize=8)</snippet></ROW><ROW><id>17828260</id><snippet>import matplotlib.pyplot as plt
N =100
menMeans = range(N)
ind = range(N)  
ticks = ind 
fig = plt.figure()
ax = fig.add_subplot(111)
rects1 = ax.bar(ind, menMeans, align = 'center')
ax.set_xticks(range(0,N,10))
ax.set_xticklabels( range(0,N,10), rotation=45 )
plt.show()
</snippet></ROW><ROW><id>17828513</id><snippet>with open('fileName', 'w') as f:
    f.write(yourString)
</snippet></ROW><ROW><id>17828513</id><snippet>&gt;&gt;&gt; yourString = """MY_FILE = E:\test.jpg

BAND_SUBSET = ( 1 0 0 )

SPATIAL_SUBSET1 = ( 25.0 50.0 )
SPATIAL_SUBSET2 = ( 25.0 50.0 )

PARA1 = (
 0.0 0.0 0.0
 0.0 0.0 0.0 )

END = END"""
</snippet></ROW><ROW><id>17828513</id><snippet>with open('fileName', 'w') as f:
    f.write(yourString.format(band_subset, spatial_subset_1, spatial_subset_2, para1))
</snippet></ROW><ROW><id>17828513</id><snippet>yourString = """MY_FILE = E:\test.jpg

BAND_SUBSET = {}

SPATIAL_SUBSET1 = {}
SPATIAL_SUBSET2 = {}

PARA1 = {}

END = END"""
</snippet></ROW><ROW><id>17828513</id><snippet>help</snippet></ROW><ROW><id>17828513</id><snippet>write(...)
    write(str) -&gt; None.  Write string str to file.
</snippet></ROW><ROW><id>17829039</id><snippet>print df

     product  quantity
0  Product A         1
1  Product A         4
2  Product A         3
3  Product A         8
4  Product B         1
5  Product B         2
6  Product B         9
7  Product C         1
8  Product C         2
</snippet></ROW><ROW><id>17829039</id><snippet>df.groupby('product').sum()

           quantity
product            
Product A        16
Product B        12
Product C         3
</snippet></ROW><ROW><id>17829088</id><snippet>(?P&lt;country&gt;[\w-]+)
</snippet></ROW><ROW><id>17829088</id><snippet>def pest_report_create(request):
</snippet></ROW><ROW><id>17829088</id><snippet>def pest_report_create(request, country):
</snippet></ROW><ROW><id>17829088</id><snippet>form = PestReportForm(inital={'country': country}
</snippet></ROW><ROW><id>17829100</id><snippet>datawriter.writerow(each[:2] + each[3] + each[4])
</snippet></ROW><ROW><id>17829100</id><snippet>for fp1, fp2, lst1, lst2 in zip(lonwgs84 , latwgs84, col1s, col2s):
    datawriter.writerow([fp1, fp2] + lst1 + lst2)
</snippet></ROW><ROW><id>17829100</id><snippet>&gt;&gt;&gt; [fp1, fp2] + lst1 + lst2
[51.821336803, 11.6756790532, '~11:16:05.833', '$GPGGA', '091607.00', '5149.28020818', 'N', '01140.54074319', 'E', '', '', '000.01']
</snippet></ROW><ROW><id>17829100</id><snippet>+</snippet></ROW><ROW><id>17829100</id><snippet>cols = each[0], each[1], each[2] + each[3]
</snippet></ROW><ROW><id>17829100</id><snippet>(each[0], each[1], [elements of each[2] and each[3]])</snippet></ROW><ROW><id>17829188</id><snippet>def round_gt_05(x):
    try:
        num = float(x)
        if num &gt; 0.5:
            return str(int(round(num)))
    except ValueError:
        pass
    return x

mylist = ["34.59","0.32","-","39.29","E","0.13","*"]
newlist = map(round_gt_05, mylist)
print newlist
</snippet></ROW><ROW><id>17829433</id><snippet>post = Posts（）</snippet></ROW><ROW><id>17829433</id><snippet>post.save()</snippet></ROW><ROW><id>17829433</id><snippet>post = Posts（）

# now set up the post (title, name, etc.)

post.save() # adds a new entry to the Posts table

post.post_tagid.add(tag) # now that your post exists in the DB this should work
</snippet></ROW><ROW><id>17829578</id><snippet>map(float, s[7:-1].split())</snippet></ROW><ROW><id>17829578</id><snippet>&gt;&gt;&gt; s = "POINT (174.29635 -41.60557)"
&gt;&gt;&gt; longitude, latitude = map(float, s[7:-1].split())
</snippet></ROW><ROW><id>17829820</id><snippet>error = mycharacters.count() &gt;= 5
if not error:
    ...
</snippet></ROW><ROW><id>17829820</id><snippet>error = mycharacters.count() &gt;= 5
if error:
    to_json = {"incorrect":"Excedeed maximum"}
else:
    # Save to DB
</snippet></ROW><ROW><id>17829932</id><snippet>implicit waiting</snippet></ROW><ROW><id>17829932</id><snippet>implicit wait</snippet></ROW><ROW><id>17829932</id><snippet>explicit waiting</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17829932</id><snippet>implicit wait</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17829932</id><snippet>implicit wait</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17829932</id><snippet>implicit wait</snippet></ROW><ROW><id>17829932</id><snippet>.FindElement</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17829932</id><snippet>driver.Manage().Timeouts().SetImplicitWait(TimeSpan.FromSeconds(10));
WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(20));
wait.Until(w =&gt; 
{
    return w.FindElement(By.Id("something")).Displayed;
}
</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17829932</id><snippet>implicit wait</snippet></ROW><ROW><id>17829932</id><snippet>return w.FindElement(By.Id("something")).Displayed;
</snippet></ROW><ROW><id>17829932</id><snippet>.FindElement</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17829932</id><snippet>.Displayed</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17829932</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17830184</id><snippet>norm</snippet></ROW><ROW><id>17830184</id><snippet>NORM_L1</snippet></ROW><ROW><id>17830184</id><snippet>double res = cv::norm(img1, img2, cv::NORM_L1);
</snippet></ROW><ROW><id>17830274</id><snippet>from Tkinter import *

root = Tk()
t = Text(root)
t.pack()
t.insert(END, '''\
blah blah blah Failed blah blah
blah blah blah Passed blah blah
blah blah blah Failed blah blah
blah blah blah Failed blah blah
''')
t.tag_config('failed', background='red')
t.tag_config('passed', background='blue')

def search(text_widget, keyword, tag):
    pos = '1.0'
    while True:
        idx = text_widget.search(keyword, pos, END)
        if not idx:
            break
        pos = '{}+{}c'.format(idx, len(keyword))
        text_widget.tag_add(tag, idx, pos)

search(t, 'Failed', 'failed')
search(t, 'Passed', 'passed')

#t.tag_delete('failed')
#t.tag_delete('passed')

root.mainloop()
</snippet></ROW><ROW><id>17830347</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
from mayavi import mlab

import random

def draw_graph3d(graph, graph_colormap='winter', bgcolor = (1, 1, 1),
                 node_size=0.03,
                 edge_color=(0.8, 0.8, 0.8), edge_size=0.002,
                 text_size=0.008, text_color=(0, 0, 0)):

    H=nx.Graph()

    # add edges
    for node, edges in graph.items():
        for edge, val in edges.items():
            if val == 1:
                H.add_edge(node, edge)

    G=nx.convert_node_labels_to_integers(H)

    graph_pos=nx.spring_layout(G, dim=3)

    # numpy array of x,y,z positions in sorted node order
    xyz=np.array([graph_pos[v] for v in sorted(G)])

    # scalar colors
    scalars=np.array(G.nodes())+5
    mlab.figure(1, bgcolor=bgcolor)
    mlab.clf()

    #----------------------------------------------------------------------------
    # the x,y, and z co-ordinates are here
    # manipulate them to obtain the desired projection perspective 
    pts = mlab.points3d(xyz[:,0], xyz[:,1], xyz[:,2],
                        scalars,
                        scale_factor=node_size,
                        scale_mode='none',
                        colormap=graph_colormap,
                        resolution=20)
    #----------------------------------------------------------------------------

    for i, (x, y, z) in enumerate(xyz):
        label = mlab.text(x, y, str(i), z=z,
                          width=text_size, name=str(i), color=text_color)
        label.property.shadow = True

    pts.mlab_source.dataset.lines = np.array(G.edges())
    tube = mlab.pipeline.tube(pts, tube_radius=edge_size)
    mlab.pipeline.surface(tube, color=edge_color)

    mlab.show() # interactive window

# create tangled hypercube
def make_graph(nodes):

    def make_link(graph, i1, i2):
        graph[i1][i2] = 1
        graph[i2][i1] = 1

    n = len(nodes)

    if n == 1: return {nodes[0]:{}}

    nodes1 = nodes[0:n/2]
    nodes2 = nodes[n/2:]
    G1 = make_graph(nodes1)
    G2 = make_graph(nodes2)

    # merge G1 and G2 into a single graph
    G = dict(G1.items() + G2.items())

    # link G1 and G2
    random.shuffle(nodes1)
    random.shuffle(nodes2)
    for i in range(len(nodes1)):
        make_link(G, nodes1[i], nodes2[i])

    return G

# graph example
nodes = range(10)
graph = make_graph(nodes)
draw_graph3d(graph)
</snippet></ROW><ROW><id>17830394</id><snippet>re.escape()</snippet></ROW><ROW><id>17830394</id><snippet>pattern = re.compile(re.escape(motif))
</snippet></ROW><ROW><id>17830394</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; motif = r"\section"
&gt;&gt;&gt; txt = r"abcd\sectiondefghi"
&gt;&gt;&gt; pattern = re.compile(re.escape(motif))
&gt;&gt;&gt; txt = r"abcd\sectiondefghi"
&gt;&gt;&gt; print pattern.findall(txt)
['\\section']
</snippet></ROW><ROW><id>17830394</id><snippet>re.escape()</snippet></ROW><ROW><id>17830394</id><snippet>&gt;&gt;&gt; re.escape(motif)
'\\\\section'
&gt;&gt;&gt; re.escape('\n [hello world!]')
'\\\n\\ \\[hello\\ world\\!\\]'
</snippet></ROW><ROW><id>17830441</id><snippet>multiprocessing</snippet></ROW><ROW><id>17830441</id><snippet>multiprocessing</snippet></ROW><ROW><id>17830441</id><snippet>multiprocessing</snippet></ROW><ROW><id>17830441</id><snippet>fork()</snippet></ROW><ROW><id>17830441</id><snippet>multiprocessing</snippet></ROW><ROW><id>17830441</id><snippet>multiprocessing</snippet></ROW><ROW><id>17830692</id><snippet>[[[a,b,c],[d,e,f]]]</snippet></ROW><ROW><id>17830692</id><snippet>courses = []
comp_course = []
for payment in transactions:
    if payment.payment_type == "1":
        unit = Units.objects.get(webducate_id=str(payment.course))

        comp_course.append(str(unit.course.webducate_id))

        units = Units.objects.filter(course=unit.course)
        unit_list = []
        for unit in units:
            if unit.webducate_id == payment.course and payment.successfull == "1":
                courses.append([str(unit.course.webducate_id),'1',str(unit.webducate_id)])
            else:
                courses.append([str(unit.course.webducate_id),'0',str(unit.webducate_id)])
comp_course = list(set(comp_course))
return render_to_response('student-account.html', {'Courses': courses, 'Comp_Course': comp_course,'Message': "", 'Transactions': transactions}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>17830802</id><snippet>for key, role in relatives:
</snippet></ROW><ROW><id>17830802</id><snippet>dict.items()</snippet></ROW><ROW><id>17830802</id><snippet>for key, role in relatives.items():
</snippet></ROW><ROW><id>17830802</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>17830802</id><snippet>for key, role in relatives.iteritems():
</snippet></ROW><ROW><id>17830953</id><snippet>File "C:\Python27\lib\site-packages\django\template\loaders\filesystem.py" in load_template_source
  38.                     return (fp.read().decode(settings.FILE_CHARSET), filepath)
</snippet></ROW><ROW><id>17830953</id><snippet>Exception Value: 'utf8' codec can't decode byte 0x85 in position 702
</snippet></ROW><ROW><id>17830953</id><snippet>students.html</snippet></ROW><ROW><id>17831141</id><snippet>csv.writer()</snippet></ROW><ROW><id>17831141</id><snippet>writer = csv.writer(stringIO)
headers = ['HEADING1', 'HEADING2']
writer.writerow(headers)

writer = csv.writer(stringIO, quotechar='"', quoting=csv.QUOTE_ALL)
values=['value1', 'value2']
writer.writerow(values)
</snippet></ROW><ROW><id>17831141</id><snippet>csv.writer()</snippet></ROW><ROW><id>17831668</id><snippet>a = ['name', '2', 3, 4, 5, 'a', 'b', 'c', 'd', 10, 4, 'lol', '3']
n = len(a)
print(n)
mid = n // 2
list1, list2 = a[:mid], a[mid:]
print(list1)
print(list2)
</snippet></ROW><ROW><id>17831798</id><snippet>db.delete(db.GqlQuery("SELECT __key__ FROM TEST WHERE type = :1", "TEST"))</snippet></ROW><ROW><id>17831798</id><snippet>testList = Test.all(keys_only=True)
db.delete(testList.filter("type = ", "TEST"))
</snippet></ROW><ROW><id>17831948</id><snippet>def test_timeout_defaults_to_twice_distance_when_none(self):
    Track.objects.create(name='Test Track', distance=10)
    track = Track.objects.get(1) # Should've been get(id=1)
    self.assertEqual(20, track.timeout)
</snippet></ROW><ROW><id>17831956</id><snippet>metadata_changed</snippet></ROW><ROW><id>17831956</id><snippet>Event</snippet></ROW><ROW><id>17832287</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17832287</id><snippet>from collections import defaultdict

newDict = defaultdict(int)
for x, y in M:
    newDict[x] += M[x, y] * v.get(x, 0)
</snippet></ROW><ROW><id>17832287</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; v = {1: 1, 2: 8, 3: 0}
&gt;&gt;&gt; M = {(1, 2): 2, (3, 1): 1, (3, 3): 7, (2, 1): -1}
&gt;&gt;&gt; newDict = defaultdict(int)
&gt;&gt;&gt; for x, y in M:
...     newDict[x] += M[x, y] * v.get(x, 0)
... 
&gt;&gt;&gt; newDict
defaultdict(&lt;type 'int'&gt;, {1: 2, 2: -8, 3: 0})
</snippet></ROW><ROW><id>17832461</id><snippet>setuptools</snippet></ROW><ROW><id>17832461</id><snippet>pip</snippet></ROW><ROW><id>17832461</id><snippet>-s/--system-site-packages</snippet></ROW><ROW><id>17832461</id><snippet>pip</snippet></ROW><ROW><id>17832461</id><snippet>easy_install</snippet></ROW><ROW><id>17832461</id><snippet>pip</snippet></ROW><ROW><id>17832461</id><snippet>site-packages</snippet></ROW><ROW><id>17832498</id><snippet>{% for k, v in a.items %}
    {{ v }}
{% endfor %}
</snippet></ROW><ROW><id>17832526</id><snippet>&gt;&gt;&gt; a = 'aaa,bbb,ccc'
&gt;&gt;&gt; b = a.split(',')
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.permutations(b))
&gt;&gt;&gt; [('aaa', 'bbb', 'ccc'), ('aaa', 'ccc', 'bbb'), ('bbb', 'aaa', 'ccc'), ('bbb', 'c
cc', 'aaa'), ('ccc', 'aaa', 'bbb'), ('ccc', 'bbb', 'aaa')]
</snippet></ROW><ROW><id>17832568</id><snippet>import re
s = u'List(1234abcd-1234-1234-1234-1234abcd1234, 1.374650647E9, 13312, 4321abcd-4321-4321-4321-4321abcd4321)'
re.findall(r'List\(([a-z0-9-]+), ([0-9.E]+), (\d+), ([a-z0-9-]+)\)', s)
</snippet></ROW><ROW><id>17832568</id><snippet>[(u'1234abcd-1234-1234-1234-1234abcd1234',
  u'1.374650647E9',
  u'13312',
  u'4321abcd-4321-4321-4321-4321abcd4321')]
</snippet></ROW><ROW><id>17832691</id><snippet>gc</snippet></ROW><ROW><id>17832691</id><snippet>a</snippet></ROW><ROW><id>17832691</id><snippet>Foo()</snippet></ROW><ROW><id>17832691</id><snippet>class Foo(object):
    def __init__(self):
         self.bar = Bar(self)

class Bar(object):
    def __init__(self, foo):
        self.foo = foo
</snippet></ROW><ROW><id>17832899</id><snippet>cmap = matplotlib.cm.coolwarm
cnorm=matplotlib.colors.Normalize(cmap,clip=False)
cmap.set_under(color=cmap(0.0),alpha=1.0)
cmap.set_over(color=cmap(1.0),alpha=1.0)
</snippet></ROW><ROW><id>17832899</id><snippet>clevs = [-3.,-2.,-1.,1.,2.,3.]
</snippet></ROW><ROW><id>17832899</id><snippet>cw=matplotlib.cm.get_cmap('coolwarm',8*(len(clevs)+1))
cw_vals=cw(np.arange(8*(len(clevs)+1)))
new_cw_vals=np.zeros([len(clevs),cw_vals.shape[1]],dtype=np.float128)
new_cw_vals_t = np.float128(cw_vals[4::8,:])
new_cw_vals_b = np.float128(cw_vals[12::8,:])
for i in np.arange(new_cw_vals.shape[0]):
    if clevs[i] &lt; 0.0:
        new_cw_vals[i,:]=np.float32(new_cw_vals_t[i,:])
    else:
        new_cw_vals[i,:]=np.float32(new_cw_vals_b[i,:])
newcmap = matplotlib.colors.LinearSegmentedColormap.from_list("newcw", new_cw_vals)
newcnorm=matplotlib.colors.Normalize(newcmap,clip=False)
</snippet></ROW><ROW><id>17832899</id><snippet>cplot=map.contour(x,y,diff,clevs,
                      cmap=newcmap,
                      norm=newcnorm,
                      vmin=vmin,vmax=vmax)
</snippet></ROW><ROW><id>17833041</id><snippet>grid_optical_depth</snippet></ROW><ROW><id>17833041</id><snippet>(1440, 399)</snippet></ROW><ROW><id>17833041</id><snippet>grid_time</snippet></ROW><ROW><id>17833041</id><snippet>range</snippet></ROW><ROW><id>17833041</id><snippet>for x in b:</snippet></ROW><ROW><id>17833041</id><snippet>import numpy as np
import netCDF4
rootgrp = netCDF4.Dataset('test.cdf', 'r', format='NETCDF4')
f = open('testoutput.csv','wb')

np.set_printoptions(threshold='nan')
f.write(str(rootgrp.variables['grid_optical_depth'][:]))
f.close()
rootgrp.close()
</snippet></ROW><ROW><id>17833083</id><snippet>from importlib import import_module # Awesome line! :)

for i in range(1000):
    test_include = import_module("Test_include_%s" % i)
    model = test_include.aDefinedFunction
</snippet></ROW><ROW><id>17833083</id><snippet>__import__</snippet></ROW><ROW><id>17833083</id><snippet>from bla import blubb</snippet></ROW><ROW><id>17833083</id><snippet>import bla</snippet></ROW><ROW><id>17833083</id><snippet>importlib.import_module</snippet></ROW><ROW><id>17833083</id><snippet>__import__</snippet></ROW><ROW><id>17833083</id><snippet>sys.modules</snippet></ROW><ROW><id>17833083</id><snippet>imp.reload</snippet></ROW><ROW><id>17833083</id><snippet>imp.load_module</snippet></ROW><ROW><id>17833083</id><snippet>load_module</snippet></ROW><ROW><id>17833083</id><snippet>imp.reload</snippet></ROW><ROW><id>17833083</id><snippet>imp.find_module</snippet></ROW><ROW><id>17833564</id><snippet>f1()</snippet></ROW><ROW><id>17833564</id><snippet>lambda</snippet></ROW><ROW><id>17833564</id><snippet>&gt;&gt;&gt; f = lambda x: x   # Assign reference to lambda function to f.
# Now you can call lambda function using `f`  
&gt;&gt;&gt; f(1)
1
</snippet></ROW><ROW><id>17833564</id><snippet>if</snippet></ROW><ROW><id>17833564</id><snippet>f = f1(100)
</snippet></ROW><ROW><id>17833564</id><snippet>f = lambda x: x + 100  # Replace `n` with `100` in return statment in `f1`.
</snippet></ROW><ROW><id>17833564</id><snippet>print f(1)  # returns `1 + 100` = 101 (Replace `x` with `1`.
print f(3)  # returns `3 + 100` = 103
</snippet></ROW><ROW><id>17833564</id><snippet>x</snippet></ROW><ROW><id>17833564</id><snippet>n</snippet></ROW><ROW><id>17833564</id><snippet>f</snippet></ROW><ROW><id>17833564</id><snippet>f1</snippet></ROW><ROW><id>17833564</id><snippet>f1()</snippet></ROW><ROW><id>17833564</id><snippet>&gt;&gt;&gt; def func():
        return 5

&gt;&gt;&gt; func
&lt;function func at 0x021F0F30&gt;
</snippet></ROW><ROW><id>17833564</id><snippet>func</snippet></ROW><ROW><id>17833564</id><snippet>lambda</snippet></ROW><ROW><id>17833564</id><snippet>f1</snippet></ROW><ROW><id>17833564</id><snippet>f</snippet></ROW><ROW><id>17833564</id><snippet>f(10)</snippet></ROW><ROW><id>17833564</id><snippet>f</snippet></ROW><ROW><id>17833564</id><snippet>lambda x: x + 100</snippet></ROW><ROW><id>17833564</id><snippet>105</snippet></ROW><ROW><id>17833564</id><snippet>f1</snippet></ROW><ROW><id>17833564</id><snippet>print type(f1)
</snippet></ROW><ROW><id>17834803</id><snippet>inspect</snippet></ROW><ROW><id>17834803</id><snippet>import logging # of course you have this
import inspect

# some lines to set logger 
log = logging.getLogger('some_loger')
log.addHandler(logging.StreamHandler())

class SomeClass:
    def log_it(self, log_text):
        log.warn("DEPRECATION WARNING: {0[3]} was called from {1[3]} at line {1[2]} in {1[1]}".format(*inspect.stack()[:2]))
</snippet></ROW><ROW><id>17834803</id><snippet>from a import SomeClass

class MyOtherClass(SomeClass):
    def some_method(self):
        self.log_it('let me log this text')~

b = MyOtherClass()
b.some_method()
</snippet></ROW><ROW><id>17834803</id><snippet>&gt; python b.py
DEPRECATION WARNING: log_it was called from some_method at line 5 in b.py
</snippet></ROW><ROW><id>17835184</id><snippet>k.reshape(k.shape + (1,))
</snippet></ROW><ROW><id>17835184</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>17835184</id><snippet>import numpy as np
k = k[..., np.newaxis]
</snippet></ROW><ROW><id>17835184</id><snippet>k = k[..., None]
</snippet></ROW><ROW><id>17835482</id><snippet>range</snippet></ROW><ROW><id>17835482</id><snippet>range</snippet></ROW><ROW><id>17835896</id><snippet>last_run</snippet></ROW><ROW><id>17835896</id><snippet>run_every</snippet></ROW><ROW><id>17836175</id><snippet>ServerName = jvmList2[choice] 
</snippet></ROW><ROW><id>17836175</id><snippet>choice</snippet></ROW><ROW><id>17836175</id><snippet>int</snippet></ROW><ROW><id>17836175</id><snippet>choice = int(raw_input("\nEnter your choice [1-%s] : " % (S)))
</snippet></ROW><ROW><id>17836219</id><snippet>collections.py</snippet></ROW><ROW><id>17836284</id><snippet>/etc/init</snippet></ROW><ROW><id>17836284</id><snippet>&lt;service-name&gt;.conf</snippet></ROW><ROW><id>17836284</id><snippet>description "My chat server"
author "your@email-address.com"

start on runlevel [2345]
stop on runlevel [!2345]

env AN_ENVIRONMENTAL_VARIABLE=i-want-to-set

respawn

exec /srv/applications/chat.py
</snippet></ROW><ROW><id>17836284</id><snippet>chat.py</snippet></ROW><ROW><id>17836284</id><snippet>service chat start 
service chat stop
</snippet></ROW><ROW><id>17836284</id><snippet>chat</snippet></ROW><ROW><id>17836284</id><snippet>.conf</snippet></ROW><ROW><id>17836284</id><snippet>/etc/init</snippet></ROW><ROW><id>17836284</id><snippet>man upstart</snippet></ROW><ROW><id>17836285</id><snippet>~df.col3.str.contains('u|z')
</snippet></ROW><ROW><id>17836285</id><snippet>(~df.col3.str.contains('u|z')).sum()
</snippet></ROW><ROW><id>17836394</id><snippet>heroku config:add PORT=33507
</snippet></ROW><ROW><id>17836394</id><snippet>if __name__ == '__main__':
        import os  
        port = int(os.environ.get('PORT', 33507)) 
        app.run(host='0.0.0.0', port=port)
</snippet></ROW><ROW><id>17836639</id><snippet>from flask import Flask
import user
app = Flask(__name__)
app.register_blueprint(user.bp)
</snippet></ROW><ROW><id>17836639</id><snippet>from base_model import BaseModel
class User(BaseModel):
    username = CharField(primary_key=True)
    password = CharField(null=False)

bp = Blueprint('user', __name__)

@bp.route('/user/method', method=['GET'])
def method()
#method stuff
</snippet></ROW><ROW><id>17836669</id><snippet>def strip_quotes(iterable):
    for line in iterable:
        yield line.rstrip('\n').strip('"') + '\n'
</snippet></ROW><ROW><id>17836669</id><snippet>fileReads = csv.reader(strip_quotes(csvfile), delimiter=',')
</snippet></ROW><ROW><id>17836669</id><snippet>csv.reader()</snippet></ROW><ROW><id>17836669</id><snippet>strip_quotes()</snippet></ROW><ROW><id>17837181</id><snippet>open</snippet></ROW><ROW><id>17837181</id><snippet>import urllib

try:
    r = opener.open(config.get_url(), data=urllib.urlencode(json_data))
except urllib2.HTTPError as e:
   print "..."
</snippet></ROW><ROW><id>17837181</id><snippet>OpenerDirector.open(url[, data][, timeout])</snippet></ROW><ROW><id>17837181</id><snippet>opener</snippet></ROW><ROW><id>17837181</id><snippet>urllib2.OpenDirector</snippet></ROW><ROW><id>17837181</id><snippet>&gt;&gt;&gt; opener
&lt;urllib2.OpenerDirector instance at 0x1011acef0&gt;
</snippet></ROW><ROW><id>17837181</id><snippet>help(opener)</snippet></ROW><ROW><id>17837181</id><snippet>class OpenerDirector
 |  Methods defined here:
 |  
 |  __init__(self)
 |  
 |  add_handler(self, handler)
 |  
 |  close(self)
 |  
 |  error(self, proto, *args)
 |  
 |  open(self, fullurl, data=None, timeout=&lt;object object&gt;)
</snippet></ROW><ROW><id>17837288</id><snippet>df.plot(kind='barh', stacked=True)
</snippet></ROW><ROW><id>17837346</id><snippet>i</snippet></ROW><ROW><id>17837346</id><snippet>for</snippet></ROW><ROW><id>17837346</id><snippet>while</snippet></ROW><ROW><id>17837346</id><snippet>while i &lt; 10:
    i += 1
    if i == 2:
        i += 3
</snippet></ROW><ROW><id>17837346</id><snippet>from itertools import islice

numbers = iter(range(10))
for i in numbers:
    if i == 2:
        next(islice(numbers, 3, 3), None)  # consume 3
</snippet></ROW><ROW><id>17837346</id><snippet>iter()</snippet></ROW><ROW><id>17837346</id><snippet>next()</snippet></ROW><ROW><id>17837346</id><snippet>itertools</snippet></ROW><ROW><id>17837346</id><snippet>for</snippet></ROW><ROW><id>17837346</id><snippet>iter()</snippet></ROW><ROW><id>17837508</id><snippet>d = {'Jordan':'Amman',
    'Kazhakstan':'Akmola',
    'Vietnam':'Hanoi',
    'Azerbaijan':'Baku',
    'Hungary':'Budapest'}
</snippet></ROW><ROW><id>17837508</id><snippet>import random

countries = list(d)
random.shuffle(countries)

for country in countries:
    # Here your game code...
    print("Capital of {0} is {1}".format(country, d[country]))
</snippet></ROW><ROW><id>17837573</id><snippet>./brian</snippet></ROW><ROW><id>17837573</id><snippet>brian</snippet></ROW><ROW><id>17837600</id><snippet>imshow</snippet></ROW><ROW><id>17837600</id><snippet>set_data</snippet></ROW><ROW><id>17837600</id><snippet>myobj = imshow(first_image)
for pixel in pixels:
    addpixel(pixel)
    myobj.set_data(segmentedimg)
    draw()
</snippet></ROW><ROW><id>17837600</id><snippet>draw()</snippet></ROW><ROW><id>17837600</id><snippet>import numpy as np
from matplotlib import pyplot as plt
from matplotlib import animation

nx = 150
ny = 50

fig = plt.figure()
im = imshow(data, cmap='gist_gray_r', vmin=0, vmax=1)
data = np.zeros((nx, ny))

def init():
    im.set_data(np.zeros((nx, ny)))

def animate(i):
    xi = i // ny
    yi = i % ny
    data[xi, yi] = 1
    im.set_data(data)
    return im

anim = animation.FuncAnimation(fig, animate, init_func=init, frames=nx * ny,
                               interval=50)
</snippet></ROW><ROW><id>17837627</id><snippet>product_list</snippet></ROW><ROW><id>17837627</id><snippet>@register.inclusion_tag("tags/products_list.html")
def all_products():
    return {'product_list': Product.objects.order_by('name') }
</snippet></ROW><ROW><id>17837627</id><snippet>{% for product in products_list %} 
   ...
{% empty %}
  Empty list
{% endfor %}
</snippet></ROW><ROW><id>17837627</id><snippet>{% all_products %}
</snippet></ROW><ROW><id>17837690</id><snippet>A = defaultdict(list)
B = defaultdict(list)
filename = sys.argv[1]

with open(filename) as fin:
    for line in fin:
      vals = line.split()
      vals[2] = int(vals[2])
      A[vals[1]].append(vals[2])
      B[vals[0]].append(vals[2])

for v in A.itervalues():
    v.sort();
for v in B.itervalues():
    v.sort()
</snippet></ROW><ROW><id>17837894</id><snippet>TK</snippet></ROW><ROW><id>17837894</id><snippet>TK</snippet></ROW><ROW><id>17837894</id><snippet>plt</snippet></ROW><ROW><id>17837894</id><snippet>matplotlib</snippet></ROW><ROW><id>17837894</id><snippet>pyplot</snippet></ROW><ROW><id>17837894</id><snippet>pyplot</snippet></ROW><ROW><id>17837894</id><snippet>mpl</snippet></ROW><ROW><id>17838396</id><snippet>np.lstsq</snippet></ROW><ROW><id>17838396</id><snippet>import numpy as np

def calc_plane(x, y, z):
    a = np.column_stack((x, y, np.ones_like(x)))
    return np.linalg.lstsq(a, z)[0]

&gt;&gt;&gt; x = np.random.rand(1000)
&gt;&gt;&gt; y = np.random.rand(1000)
&gt;&gt;&gt; z = 4*x + 5*y + 7 + np.random.rand(1000)*.1
&gt;&gt;&gt; calc_plane(x, y, z)
array([ 3.99795126,  5.00233364,  7.05007326])
</snippet></ROW><ROW><id>17838396</id><snippet>z</snippet></ROW><ROW><id>17838396</id><snippet>a*x + b*y + c*z = 1</snippet></ROW><ROW><id>17838396</id><snippet>a</snippet></ROW><ROW><id>17838396</id><snippet>b</snippet></ROW><ROW><id>17838396</id><snippet>c</snippet></ROW><ROW><id>17838396</id><snippet>def calc_plane_bis(x, y, z):
    a = np.column_stack((x, y, z))
    return np.linalg.lstsq(a, np.ones_like(x))[0]
&gt;&gt;&gt; calc_plane_bis(x, y, z)
array([-0.56732299, -0.70949543,  0.14185393])
</snippet></ROW><ROW><id>17838396</id><snippet>(a, b, c)</snippet></ROW><ROW><id>17838396</id><snippet>(a, b, c) / (a**2+b**2+c**2)</snippet></ROW><ROW><id>17838396</id><snippet>def project_points(x, y, z, a, b, c):
    """
    Projects the points with coordinates x, y, z onto the plane
    defined by a*x + b*y + c*z = 1
    """
    vector_norm = a*a + b*b + c*c
    normal_vector = np.array([a, b, c]) / np.sqrt(vector_norm)
    point_in_plane = np.array([a, b, c]) / vector_norm

    points = np.column_stack((x, y, z))
    points_from_point_in_plane = points - point_in_plane
    proj_onto_normal_vector = np.dot(points_from_point_in_plane,
                                     normal_vector)
    proj_onto_plane = (points_from_point_in_plane -
                       proj_onto_normal_vector[:, None]*normal_vector)

    return point_in_plane + proj_onto_plane
</snippet></ROW><ROW><id>17838396</id><snippet>&gt;&gt;&gt; project_points(x, y, z, *calc_plane_bis(x, y, z))
array([[  0.13138012,   0.76009389,  11.37555123],
       [  0.71096929,   0.68711773,  13.32843506],
       [  0.14889398,   0.74404116,  11.36534936],
       ..., 
       [  0.85975642,   0.4827624 ,  12.90197969],
       [  0.48364383,   0.2963717 ,  10.46636903],
       [  0.81596472,   0.45273681,  12.57679188]])
</snippet></ROW><ROW><id>17838767</id><snippet>zoom</snippet></ROW><ROW><id>17838767</id><snippet>self.Flag_Zoom</snippet></ROW><ROW><id>17838767</id><snippet>root.destroy()</snippet></ROW><ROW><id>17838767</id><snippet>Exe.destroy()</snippet></ROW><ROW><id>17838767</id><snippet># ---------- Imports ------------------------------------- #
from Tkinter import *
import matplotlib
import numpy as np
# ---------- Settings ------------------------------------ #
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
# ---------- Classes  ------------------------------------ #
class App(Frame):
    def __init__(self,master=None):
        Frame.__init__(self, master)
        self._job = None
        self.canvas = None
        self.Flag_Zoom = False
        self.pack()
        self._GUI_Design()
        self._GenData()
        self._Figure(self.Arm)
        # Load the figure Window
        # Send to TK           
        self.canvas = FigureCanvasTkAgg(self.f, master=self.LF_Graph)

    def _GUI_Design(self):
        # Initial Frames        
        self.LF_Control = LabelFrame(self, text='Angle Controls', width=400, height=100, )
        self.LF_Graph = LabelFrame(self, text='Figure', width=400, height=400)
        self.LF_Control.grid(row=0, column=1, padx=5,pady=1)
        self.LF_Graph.grid(row=1, column=0,columnspan=2,padx=5,pady=3)

        # Insert Controls
        # Labels
        self.LB_Info = Label(self,text="Reduced Code", justify=LEFT)
        self.LB_SP = Label(self.LF_Control, text="Spoiler:")        

        #   Slider
        self.SpScale = Scale(self.LF_Control, from_=0, to=120, orient=HORIZONTAL, length=300, resolution=1, command=self._UpdateCanvas, tickinterval=10)      

        #   Buttons
        self.Zoomb = Button(self.LF_Control, text="Zoom", command=self._Zoom)
        self.Quit = Button(self.LF_Control, text="Quit", command=self.quit)

        # Grid Layout
        self.LB_Info.grid(row=0, column=0,padx=5,pady=1)
        self.LB_SP.grid(row=0, column=0,padx=10,pady=1)
        self.SpScale.grid(row=0, column=1,padx=10,pady=1)
        self.Zoomb.grid(row=0, column=3 ,padx=10,pady=1)
        self.Quit.grid(row=1, column=3 ,padx=10,pady=1)

    def _GenData(self):
        self.Arm     = [[0,10,184.533],[0,153.734,164.932]]                 

    def _UpdateCanvas(self, event):
        self._job = self.after(100, self._Execute(self.Flag_Zoom))  #miliseconds
        if self._job:
            self.after_cancel(self._job)

    def _Figure(self,Arm):
        # Gen Figure
        self.f = plt.figure(1,figsize=(10,10))
        self.f.frame = False
        plt.clf()
        if not self.Flag_Zoom:
            print 'no zoom'
            plt.axis([-500,2000,-1500,1000])
        else:
            print 'zoom'
            plt.axis([-100,500,-100,500])                
        plt.axes().set_aspect('equal', 'datalim')
        plt.plot(Arm[0],Arm[1],"g")

    def _Zoom(self):
        if self.Flag_Zoom:
            self.Flag_Zoom = False
        else:
            self.Flag_Zoom = True
        self._UpdateCanvas
        RotA = self.RotateNO(self.Arm,self.SpScale.get(),[0,0])
        self._Figure(RotA)
        self.canvas.draw()
        self.canvas.show()

    def RotateNO(self,List,Angle,Orig):       
        # Angle: deg2rad
        th = -1.*float(Angle)/180*np.pi
        Rot = [[],[]]
        # Loop through
        for i in xrange(0,len(List[0])):
            X1 = (List[0][i]-Orig[0])*np.cos(th) - (List[1][i]-Orig[1])*np.sin(th)+Orig[0]
            Y1 = (List[0][i]-Orig[0])*np.sin(th) + (List[1][i]-Orig[1])*np.cos(th)+Orig[1]
            Rot[0].append(X1)
            Rot[1].append(Y1)
        return Rot

    def _Execute(self,Zoom):
        RotA = self.RotateNO(self.Arm,self.SpScale.get(),[0,0])
        self._Figure(RotA)
        self.canvas.draw()
        self.canvas.show()
        if self.canvas:
            self.canvas.get_tk_widget().grid(row=0, column=0)

# ---------- Execute Application ------------------------- #
root = Tk()
root.title("Rotation")
Exe = App(master=root)
Exe.mainloop()
Exe.destroy()
</snippet></ROW><ROW><id>17838767</id><snippet>plt.xticks([])
plt.yticks([])
plt.tight_layout(pad=0.0, w_pad=0.0, h_pad=0)
</snippet></ROW><ROW><id>17838767</id><snippet>_Figure(self,Arm)</snippet></ROW><ROW><id>17838804</id><snippet>.drop</snippet></ROW><ROW><id>17838804</id><snippet>df = df.drop(['A', 'B'], axis=1)
</snippet></ROW><ROW><id>17838927</id><snippet>meshgrid</snippet></ROW><ROW><id>17838927</id><snippet>x</snippet></ROW><ROW><id>17838927</id><snippet>y</snippet></ROW><ROW><id>17838927</id><snippet>import numpy as np
x = np.arange(m+1)
y = np.arange(n+1)
X, Y = np.meshgrid(x, y)
</snippet></ROW><ROW><id>17838927</id><snippet>np.sqrt((X - m/2.)**2 + (Y - n/2.)**2) - R
</snippet></ROW><ROW><id>17838927</id><snippet>meshgrid</snippet></ROW><ROW><id>17838927</id><snippet>0</snippet></ROW><ROW><id>17838927</id><snippet>m</snippet></ROW><ROW><id>17838927</id><snippet>0</snippet></ROW><ROW><id>17838927</id><snippet>n</snippet></ROW><ROW><id>17838927</id><snippet>linspace</snippet></ROW><ROW><id>17838941</id><snippet>ThreadedClient1</snippet></ROW><ROW><id>17838941</id><snippet>class ThreadedClient1(threading.Thread):
    # ...
    def run(self):
        time.sleep(1)
        self.queue.put(lambda: self.fcn)
</snippet></ROW><ROW><id>17838941</id><snippet>slxl.runImportAndCoordAdder()</snippet></ROW><ROW><id>17838941</id><snippet>class ThreadedClient1(threading.Thread):
    # ...
    def run(self):
        time.sleep(1)
        self.queue.put(self.fcn())
</snippet></ROW><ROW><id>17838941</id><snippet>def spawnthread(self):
    self.updatebttn.config(state="disabled")
    self.thread = ThreadedClient1(self.queue, slxl.runImportAndCoordAdder)
    self.thread.start()
    self.periodiccall()

class ThreadedClient1(threading.Thread):
    # ...
    def run(self):
        time.sleep(1)
        self.queue.put(self.fcn())
</snippet></ROW><ROW><id>17838947</id><snippet>--add</snippet></ROW><ROW><id>17838947</id><snippet>parser.add_argument('--add', action='store_true', help="Adds the set of numbers")
</snippet></ROW><ROW><id>17838947</id><snippet>dest</snippet></ROW><ROW><id>17838947</id><snippet>args.add</snippet></ROW><ROW><id>17838947</id><snippet>args.sum</snippet></ROW><ROW><id>17838947</id><snippet>get_args()</snippet></ROW><ROW><id>17838947</id><snippet>parser.parse_args()</snippet></ROW><ROW><id>17838947</id><snippet>def get_args(args):
    # ....
    return parser.parse_args()
</snippet></ROW><ROW><id>17838947</id><snippet>args.a</snippet></ROW><ROW><id>17838947</id><snippet>args.add</snippet></ROW><ROW><id>17838947</id><snippet>args. integers</snippet></ROW><ROW><id>17838947</id><snippet>args</snippet></ROW><ROW><id>17838947</id><snippet>if args.add:
    print sum(args.integers)
</snippet></ROW><ROW><id>17838947</id><snippet>args.integers</snippet></ROW><ROW><id>17838947</id><snippet>if args.add:
    result = 0
    for value in arg.integers:
        result += value
    print result
</snippet></ROW><ROW><id>17839007</id><snippet>':'.join('%02x' % (i&gt;&gt;(8*j) &amp; 0xFF) for j in reversed(range(6)))
</snippet></ROW><ROW><id>17839213</id><snippet> str(TermGeneDic[Term])
</snippet></ROW><ROW><id>17839213</id><snippet> " ".join(TermGeneDic[Term])
</snippet></ROW><ROW><id>17839242</id><snippet>conn.close()
</snippet></ROW><ROW><id>17839242</id><snippet>&gt; dbListTables(foo)
[1] "foo"
</snippet></ROW><ROW><id>17839368</id><snippet>ans = []
for g in games:
    if not g.score_ratio_h1:
        ans.append(g.score_ratio_h1) # we're appending the results
</snippet></ROW><ROW><id>17839368</id><snippet>g.score_ratio_h1 = avg_score_ratio_h1
</snippet></ROW><ROW><id>17839368</id><snippet>lst = [[0], [0], [0]]
[a[0] = 1 for a in lst]
      ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>17839417</id><snippet>def parse_description(description):
  '''
   there is parse function
   It is example for parsing messages like this:

   Name: John
   Phone: +100500
  '''
  fields=['name','phone']
  _dict={}
  description=description.lower()
  for line in description.split('\n'):
    for field in fields:
        if field in line:
            split_line=line.split(':')
            if len(split_line)&gt;1:
                _dict[field]=split_line[1]
  return _dict
</snippet></ROW><ROW><id>17839417</id><snippet>fields</snippet></ROW><ROW><id>17839417</id><snippet>description.lower()</snippet></ROW><ROW><id>17839417</id><snippet>pre_dict[field]=line.split(':')[1]</snippet></ROW><ROW><id>17839417</id><snippet>split_line=line.split(':')</snippet></ROW><ROW><id>17839417</id><snippet>pre_dict</snippet></ROW><ROW><id>17839417</id><snippet>pre_dict[field]=split_line[1]</snippet></ROW><ROW><id>17839417</id><snippet>pre_dict</snippet></ROW><ROW><id>17839417</id><snippet>_dict</snippet></ROW><ROW><id>17839417</id><snippet>_dict[field]=split_line[1]</snippet></ROW><ROW><id>17839417</id><snippet>dict</snippet></ROW><ROW><id>17839417</id><snippet>_dict</snippet></ROW><ROW><id>17839417</id><snippet>&lt;type 'dict'&gt;</snippet></ROW><ROW><id>17839417</id><snippet>parse_description</snippet></ROW><ROW><id>17839581</id><snippet>any(x &gt; 10 for x in l)
</snippet></ROW><ROW><id>17839581</id><snippet>&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; any(x &gt; 10 for x in l)
False
&gt;&gt;&gt; l = range(20)
&gt;&gt;&gt; any(x &gt; 10 for x in l)
True
</snippet></ROW><ROW><id>17839581</id><snippet>any()</snippet></ROW><ROW><id>17839581</id><snippet>True</snippet></ROW><ROW><id>17839581</id><snippet>&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; endless_counter = count()
&gt;&gt;&gt; any(x &gt; 10 for x in endless_counter)
True
&gt;&gt;&gt; # endless_counter last yielded 11, the first value over 10:
...
&gt;&gt;&gt; next(endless_counter)
12
</snippet></ROW><ROW><id>17839678</id><snippet>my_bool = '01'[my_boolean]
</snippet></ROW><ROW><id>17839678</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit("'01'[b]", "b = False")
0.10460775769296968
&gt;&gt;&gt; timeit("str(int(b))", "b = False")
0.8879351199904466
</snippet></ROW><ROW><id>17839775</id><snippet>File_Name</snippet></ROW><ROW><id>17839775</id><snippet>File_Name = inspect.getfile(f)
</snippet></ROW><ROW><id>17839775</id><snippet>inspect.getfile()</snippet></ROW><ROW><id>17839775</id><snippet>f</snippet></ROW><ROW><id>17839776</id><snippet>import</snippet></ROW><ROW><id>17839947</id><snippet>access_token = facebook.get_app_access_token(APP_ID, APP_SECRET)
graph = facebook.GraphAPI(access_token)
request = graph.get_object("%s_%s" % (request_id, recipient_id))
inviter_id = request["from"]["id"]
</snippet></ROW><ROW><id>17840040</id><snippet>actor.animatev(Clutter.AnimationMode.LINEAR, 1000, ["x"], [280])
actor.animatev(Clutter.AnimationMode.LINEAR, 1000, ["x"], [20])
</snippet></ROW><ROW><id>17840040</id><snippet>actor.animatev(Clutter.AnimationMode.LINEAR, 1000, ["x"], [20])
</snippet></ROW><ROW><id>17840040</id><snippet>completed</snippet></ROW><ROW><id>17840040</id><snippet>ClutterAnimation</snippet></ROW><ROW><id>17840040</id><snippet>connect_after</snippet></ROW><ROW><id>17840040</id><snippet>def moveLeft (animation, actor):
    actor.animatev(Clutter.AnimationMode.LINEAR, 1000, ["x"], [20])

actor.animatev(Clutter.AnimationMode.LINEAR, 1000, ["x"], [280]).connect_after('completed', moveLeft)
</snippet></ROW><ROW><id>17840040</id><snippet>animatev()</snippet></ROW><ROW><id>17840040</id><snippet>ClutterAnimation</snippet></ROW><ROW><id>17840040</id><snippet>Clutter.KeyframeTransition</snippet></ROW><ROW><id>17840040</id><snippet>from gi.repository import Clutter

Clutter.init(None)

stage = Clutter.Stage()
stage.connect('destroy', lambda x: Clutter.main_quit())

actor = Clutter.Actor()
actor.set_background_color(Clutter.Color.get_static(Clutter.StaticColor.RED))
actor.set_reactive(True)
actor.set_size(32, 32)
stage.add_child(actor)
actor.set_position(82, 82)

def moveLeft(actor):
    actor.set_x(20)

def moveRight(actor):

    actor.set_easing_duration(1000)
    actor.set_easing_mode(Clutter.AnimationMode.LINEAR)
    actor.set_x(280)
    actor.connect('transition-stopped::x', lambda a, n, t: moveLeft(actor))

actor.connect('button-press-event', lambda a, e: moveRight(actor))

stage.show()
Clutter.main()
</snippet></ROW><ROW><id>17840040</id><snippet>transition-stopped::x</snippet></ROW><ROW><id>17840051</id><snippet>for a, b in sub.iteritems():
    # Do Something.
</snippet></ROW><ROW><id>17840051</id><snippet>for a, b in sub:
    #...
</snippet></ROW><ROW><id>17840051</id><snippet>(a, b)</snippet></ROW><ROW><id>17840051</id><snippet>sub</snippet></ROW><ROW><id>17840059</id><snippet>aceptar_piezas</snippet></ROW><ROW><id>17840059</id><snippet>def aceptar_piezas(self):
    num_piezas = self.entrypiezas.get()
    print num_piezas

    self.piezastext.grid_remove()
    self.entrypiezas.grid_remove()
    self.aceptarnumpiezas.grid_remove()
    # Create a list of tuples to hold the dynamically created Optionmenus
    # The first item in the tuple is the menu, the second is its variable
    self.optionmenus = list()
    n = 1
    while n &lt;= int(num_piezas):
        self.textopieza = Label(self.frameOne, text = "Pieza", justify="left")
        self.textopieza.grid(row=n, column=0)

        # Variable for the Optionmenu
        var = StringVar()
        # The menu
        menu = OptionMenu(self.frameOne, var, "a","b","c")
        menu.grid(row=n, column=1)
        # Set the variable to "a" as default
        var.set("a")
        # Add the menu to the list of Optionmenus
        self.optionmenus.append((menu, var))

        n += 1
    def clicked():
        """This function was made just to demonstrate.  It is hooked up to the button"""
        for optionmenu in self.optionmenus:
            print optionmenu[1].get()
        print self.optionmenus
    # This button doesn't need to be in the while loop
    self.aceptarpiezas = Button(self.frameOne, text="Aceptar", command=clicked, width=8)
    self.aceptarpiezas.grid(row=int(num_piezas)+1, column=0)
</snippet></ROW><ROW><id>17840069</id><snippet>file_name =  ('slide'+each_slide.get('page_number')+'.xml')
</snippet></ROW><ROW><id>17840173</id><snippet>import Tkinter as tk

class Application(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        self.text = tk.Text(self, wrap="word", height=20)
        self.vsb = tk.Scrollbar(self, orient="vertical", command=self.text.yview)
        self.text.configure(yscrollcommand=self.vsb.set)
        self.vsb.pack(side="right", fill="y")
        self.text.pack(side="left", fill="both", expand=True)

        self.text.bind("&lt;Return&gt;", self.process_input)
        self.prompt = "&gt;&gt;&gt; "

        self.insert_prompt()

    def insert_prompt(self):
        # make sure the last line ends with a newline; remember that
        # tkinter guarantees a trailing newline, so we get the
        # character before this trailing newline ('end-1c' gets the
        # trailing newline, 'end-2c' gets the char before that)
        c = self.text.get("end-2c")
        if c != "\n":
            self.text.insert("end", "\n")
        self.text.insert("end", self.prompt, ("prompt",))

        # this mark lets us find the end of the prompt, and thus
        # the beggining of the user input
        self.text.mark_set("end-of-prompt", "end-1c")
        self.text.mark_gravity("end-of-prompt", "left")

    def process_input(self, event=None):
        # if there is an event, it happened before the class binding,
        # thus before the newline actually got inserted; we'll
        # do that here, then skip the class binding.
        self.text.insert("end", "\n")
        command = self.text.get("end-of-prompt", "end-1c")
        self.text.insert("end", "output of the command '%s'...!" % command)
        self.text.see("end")
        self.insert_prompt()

        # this prevents the class binding from firing, since we 
        # inserted the newline in this method
        return "break"

root = tk.Tk()
root.wm_geometry("400x100")
app = Application(root).pack(side="top", fill="both", expand=True)

root.mainloop()
</snippet></ROW><ROW><id>17840195</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'A': [a], 'B': [b]})
&gt;&gt;&gt; df
   A  B
0  2  3
</snippet></ROW><ROW><id>17840195</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'A': a, 'B': b}, index=[0])
&gt;&gt;&gt; df
   A  B
0  2  3
</snippet></ROW><ROW><id>17840216</id><snippet>b = a</snippet></ROW><ROW><id>17840216</id><snippet>a</snippet></ROW><ROW><id>17840216</id><snippet>b</snippet></ROW><ROW><id>17840216</id><snippet>b.remove(2)</snippet></ROW><ROW><id>17840216</id><snippet>b = a[:]
</snippet></ROW><ROW><id>17840216</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b.remove(2)
&gt;&gt;&gt; print a,b
[1, 2, 3] [1, 3]
</snippet></ROW><ROW><id>17840228</id><snippet>import re

def regexp(lo, hi):
    fmt = '%%0%dd' % len(str(hi))
    return re.compile('(%s)' % '|'.join(fmt % i for i in range(lo, hi+1)))
</snippet></ROW><ROW><id>17840228</id><snippet>\d\d</snippet></ROW><ROW><id>17840228</id><snippet>import re

def alt(*args):
    '''format regexp alternatives'''
    if len(args) == 1: return args[0]
    else: return '(%s)' % '|'.join(args)

def replace(s, c): 
     '''replace all characters in a string with a different character'''
    return ''.join(map(lambda x: c, s))

def repeat(s, n):
    '''format a regexp repeat'''
    if n == 0: return ''
    elif n == 1: return s
    else: return '%s{%d}' % (s, n)

def digits(lo, hi): 
    '''format a regexp digit range'''
    if lo == 0 and hi == 9: return r'\d'
    elif lo == hi: return str(lo)
    else: return '[%d-%d]' % (lo, hi)

def trace(f):
    '''for debugging'''
    def wrapped(lo, hi):
        result = f(lo, hi)
        print(lo, hi, result)
        return result
    return wrapped

#@trace  # uncomment to get calls traced to stdout (explains recursion when bug hunting)
def regexp(lo, hi):
    '''generate a regexp that matches integers from lo to hi only.
       assumes that inputs are zero-padded to the length of hi (like phone numbers).
       you probably want to surround with ^ and $ before using.'''

    assert lo &lt;= hi
    assert lo &gt;= 0

    slo, shi = str(lo), str(hi)
    # zero-pad to same length
    while len(slo) &lt; len(shi): slo = '0' + slo
    # first digits and length
    l, h, n = int(slo[0]), int(shi[0]), len(slo)

    if l == h:
        # extract common prefix
        common = ''
        while slo and slo[0] == shi[0]:
            common += slo[0]
            slo, shi = slo[1:], shi[1:]
        if slo: return common + regexp(int(slo), int(shi))
        else: return common

    else:
        # the core of the routine.
        # split into 'complete blocks' like 200-599 and 'edge cases' like 123-199
        # and handle each separately.

        # are these complete blocks?
        xlo = slo[1:] == replace(slo[1:], '0')
        xhi = shi[1:] == replace(shi[1:], '9')

        # edges of possible complete blocks
        mlo = int(slo[0] + replace(slo[1:], '9'))
        mhi = int(shi[0] + replace(shi[1:], '0'))

        if xlo:
            if xhi:
                # complete block on both sides
                # this is where single digits are finally handled, too.
                return digits(l, h) + repeat('\d', n-1)
            else:
                # complete block to mhi, plus extra on hi side
                prefix = '' if l or h-1 else '0'
                return alt(prefix + regexp(lo, mhi-1), regexp(mhi, hi))
        else:
            prefix = '' if l else '0'
            if xhi:
                # complete block on hi side plus extra on lo
                return alt(prefix + regexp(lo, mlo), regexp(mlo+1, hi))
            else:
                # neither side complete, so add extra on both sides
                # (and maybe a complete block in the middle, if room)
                if mlo + 1 == mhi:
                    return alt(prefix + regexp(lo, mlo), regexp(mhi, hi))
                else:
                    return alt(prefix + regexp(lo, mlo), regexp(mlo+1, mhi-1), regexp(mhi, hi))


# test a bunch of different ranges
for (lo, hi) in [(0, 0), (0, 1), (0, 2), (0, 9), (0, 10), (0, 11), (0, 101),
                 (1, 1), (1, 2), (1, 9), (1, 10), (1, 11), (1, 101),
                 (0, 123), (111, 123), (123, 222), (123, 333), (123, 444),
                 (0, 321), (111, 321), (222, 321), (321, 333), (321, 444),
                 (123, 321), (111, 121), (121, 222), (1234, 4321), (0, 999),
                 (99519000, 99519099)]:
    fmt = '%%0%dd' % len(str(hi))
    rx = regexp(lo, hi)
    print('%4s - %-4s  %s' % (fmt % lo, fmt % hi, rx))
    m = re.compile('^%s$' % rx)
    for i in range(0, 1+int(replace(str(hi), '9'))):
        if m.match(fmt % i):
            assert lo &lt;= i &lt;= hi, i
        else:
            assert i &lt; lo or i &gt; hi, i
</snippet></ROW><ROW><id>17840228</id><snippet>regexp(lo, hi)</snippet></ROW><ROW><id>17840228</id><snippet>lo</snippet></ROW><ROW><id>17840228</id><snippet>hi</snippet></ROW><ROW><id>17840228</id><snippet>^</snippet></ROW><ROW><id>17840228</id><snippet>$</snippet></ROW><ROW><id>17840228</id><snippet>[2-5]\d{2}</snippet></ROW><ROW><id>17840228</id><snippet>prefix</snippet></ROW><ROW><id>17840228</id><snippet>regexp()</snippet></ROW><ROW><id>17840228</id><snippet>   0 - 0     0
   0 - 1     [0-1]
   0 - 2     [0-2]
   0 - 9     \d
  00 - 10    (0\d|10)
  00 - 11    (0\d|1[0-1])
 000 - 101   (0\d\d|10[0-1])
   1 - 1     1
   1 - 2     [1-2]
   1 - 9     [1-9]
  01 - 10    (0[1-9]|10)
  01 - 11    (0[1-9]|1[0-1])
 001 - 101   (0(0[1-9]|[1-9]\d)|10[0-1])
 000 - 123   (0\d\d|1([0-1]\d|2[0-3]))
 111 - 123   1(1[1-9]|2[0-3])
 123 - 222   (1(2[3-9]|[3-9]\d)|2([0-1]\d|2[0-2]))
 123 - 333   (1(2[3-9]|[3-9]\d)|2\d\d|3([0-2]\d|3[0-3]))
 123 - 444   (1(2[3-9]|[3-9]\d)|[2-3]\d{2}|4([0-3]\d|4[0-4]))
 000 - 321   ([0-2]\d{2}|3([0-1]\d|2[0-1]))
 111 - 321   (1(1[1-9]|[2-9]\d)|2\d\d|3([0-1]\d|2[0-1]))
 222 - 321   (2(2[2-9]|[3-9]\d)|3([0-1]\d|2[0-1]))
 321 - 333   3(2[1-9]|3[0-3])
 321 - 444   (3(2[1-9]|[3-9]\d)|4([0-3]\d|4[0-4]))
 123 - 321   (1(2[3-9]|[3-9]\d)|2\d\d|3([0-1]\d|2[0-1]))
 111 - 121   1(1[1-9]|2[0-1])
 121 - 222   (1(2[1-9]|[3-9]\d)|2([0-1]\d|2[0-2]))
1234 - 4321  (1(2(3[4-9]|[4-9]\d)|[3-9]\d{2})|[2-3]\d{3}|4([0-2]\d{2}|3([0-1]\d|2[0-1])))
 000 - 999   \d\d{2}
99519000 - 99519099  995190\d\d
</snippet></ROW><ROW><id>17840264</id><snippet>class MyForm(ModelForm):
    my_field=forms.CharField(... error_messages={'required': 'My Field',})
</snippet></ROW><ROW><id>17840264</id><snippet>{% for field in form%}
    {% for error in field.errors %}
        &lt;li&gt;{{ error }}&lt;/li&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>17840448</id><snippet>itertools.islice()</snippet></ROW><ROW><id>17840448</id><snippet>glob.iglob()</snippet></ROW><ROW><id>17840448</id><snippet>from itertools import islice
import glob

x = 1000
limited_files = islice(glob.iglob('pattern.*'), x)
for filename in limited_files:
    #  handle filename
</snippet></ROW><ROW><id>17840675</id><snippet>directory="/path/to/fldr/with/csv"</snippet></ROW><ROW><id>17840675</id><snippet>full_name = os.path.join(directory,files)</snippet></ROW><ROW><id>17840848</id><snippet>P_get</snippet></ROW><ROW><id>17840848</id><snippet>PyLong_FromVoidPtr</snippet></ROW><ROW><id>17840848</id><snippet>long</snippet></ROW><ROW><id>17840848</id><snippet>argtypes</snippet></ROW><ROW><id>17840848</id><snippet>int</snippet></ROW><ROW><id>17840848</id><snippet>long</snippet></ROW><ROW><id>17840848</id><snippet>argtypes</snippet></ROW><ROW><id>17840848</id><snippet>c_void_p</snippet></ROW><ROW><id>17840848</id><snippet>long</snippet></ROW><ROW><id>17840848</id><snippet>from ctypes import *    

class c_void_p(c_void_p): 
    pass

c_global = CDLL(None)
c_global.malloc.restype = c_void_p

&gt;&gt;&gt; type(c_global.malloc(100))
&lt;class '__main__.c_void_p'&gt;
</snippet></ROW><ROW><id>17840848</id><snippet>libc = cdll.msvcrt
libc.malloc.restype = c_void_p 

&gt;&gt;&gt; type(libc.malloc(100))
&lt;class '__main__.c_void_p'&gt;
</snippet></ROW><ROW><id>17840919</id><snippet>virtualenv</snippet></ROW><ROW><id>17840919</id><snippet>env/bin/python2.7</snippet></ROW><ROW><id>17840919</id><snippet>env/</snippet></ROW><ROW><id>17840919</id><snippet>virtualenv</snippet></ROW><ROW><id>17840919</id><snippet>env/bin/python2.7</snippet></ROW><ROW><id>17840919</id><snippet>env/django_bookmarks/bookmarks</snippet></ROW><ROW><id>17840919</id><snippet>ImportError</snippet></ROW><ROW><id>17841047</id><snippet>400</snippet></ROW><ROW><id>17841047</id><snippet>raise endpoints.BadRequestException('A bad thing happened.')
</snippet></ROW><ROW><id>17841092</id><snippet>with open('file.text', 'r') as fp:
  for line in fp:
    match = re.search('string=([^,]+)', line)
    if match:
      print match.group(1)
</snippet></ROW><ROW><id>17841139</id><snippet>a</snippet></ROW><ROW><id>17841139</id><snippet>b</snippet></ROW><ROW><id>17841139</id><snippet>c</snippet></ROW><ROW><id>17841139</id><snippet>d</snippet></ROW><ROW><id>17841139</id><snippet>e</snippet></ROW><ROW><id>17841139</id><snippet>f</snippet></ROW><ROW><id>17841139</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17841139</id><snippet>runpy.run_module</snippet></ROW><ROW><id>17841139</id><snippet>run_module</snippet></ROW><ROW><id>17841139</id><snippet>__import__</snippet></ROW><ROW><id>17841139</id><snippet>run_module</snippet></ROW><ROW><id>17841139</id><snippet>__import__</snippet></ROW><ROW><id>17841294</id><snippet>In [4]: df = read_csv(StringIO(data),sep='\s+')

In [5]: df
Out[5]: 
   A         B       C
0  1  0.749065    This
1  2  0.301084      is
2  3  0.463468       a
3  4  0.643961  random
4  1  0.866521  string
5  2  0.120737       !

In [6]: df.dtypes
Out[6]: 
A      int64
B    float64
C     object
dtype: object
</snippet></ROW><ROW><id>17841294</id><snippet>.sum()</snippet></ROW><ROW><id>17841294</id><snippet>In [8]: df.groupby('A').apply(lambda x: x.sum())
Out[8]: 
   A         B           C
A                         
1  2  1.615586  Thisstring
2  4  0.421821         is!
3  3  0.463468           a
4  4  0.643961      random
</snippet></ROW><ROW><id>17841294</id><snippet>In [9]: df.groupby('A')['C'].apply(lambda x: x.sum())
Out[9]: 
A
1    Thisstring
2           is!
3             a
4        random
dtype: object
</snippet></ROW><ROW><id>17841294</id><snippet>In [11]: df.groupby('A')['C'].apply(lambda x: "{%s}" % ', '.join(x))
Out[11]: 
A
1    {This, string}
2           {is, !}
3               {a}
4          {random}
dtype: object
</snippet></ROW><ROW><id>17841294</id><snippet>def f(x):
     return Series(dict(A = x['A'].sum(), 
                        B = x['B'].sum(), 
                        C = "{%s}" % ', '.join(x['C'])))

In [14]: df.groupby('A').apply(f)
Out[14]: 
   A         B               C
A                             
1  2  1.615586  {This, string}
2  4  0.421821         {is, !}
3  3  0.463468             {a}
4  4  0.643961        {random}
</snippet></ROW><ROW><id>17841486</id><snippet>In [1]: import numpy as np

In [2]: a = np.random.rand(3000, 16000)

In [3]: %timeit a.min(axis=0)
1 loops, best of 3: 421 ms per loop

In [4]: %timeit a.argmin(axis=0)
1 loops, best of 3: 1.95 s per loop

In [5]: %timeit a.min(axis=1)
1 loops, best of 3: 302 ms per loop

In [6]: %timeit a.argmin(axis=1)
1 loops, best of 3: 303 ms per loop

In [7]: %timeit a.T.argmin(axis=1)
1 loops, best of 3: 1.78 s per loop

In [8]: %timeit np.asfortranarray(a).argmin(axis=0)
1 loops, best of 3: 1.97 s per loop

In [9]: b = np.asfortranarray(a)

In [10]: %timeit b.argmin(axis=0)
1 loops, best of 3: 329 ms per loop
</snippet></ROW><ROW><id>17841486</id><snippet>min</snippet></ROW><ROW><id>17841486</id><snippet>argmin</snippet></ROW><ROW><id>17841486</id><snippet>randvals</snippet></ROW><ROW><id>17841553</id><snippet>self[firstLine[i]] = line[i]
</snippet></ROW><ROW><id>17841553</id><snippet>setattr(self, firstline[i], line[i])
</snippet></ROW><ROW><id>17841553</id><snippet>newClass</snippet></ROW><ROW><id>17841553</id><snippet>Name, Date, Weight
Joe, 23-Sep, 99
...
</snippet></ROW><ROW><id>17841553</id><snippet>data = classMaker('file.csv') 
</snippet></ROW><ROW><id>17841553</id><snippet>data[0].Name == 'Joe'
</snippet></ROW><ROW><id>17841553</id><snippet>i</snippet></ROW><ROW><id>17841553</id><snippet>for attr, val in zip(firstLine, line):
  setattr(self, attr, val)
</snippet></ROW><ROW><id>17841553</id><snippet>import csv

def classMaker(filename):
  class newClass(object):
    def __init__(self, line):
      for attr, val in zip(firstLine, line):
        setattr(self, attr, val)
  with open(filename, 'rb') as csvfile:
    spamreader = csv.reader(csvfile)
    firstLine = spamreader.next()
    return [newClass(line) for line in spamreader]

x = classMaker("/tmp/x.csv")
print x[0].Name
</snippet></ROW><ROW><id>17841811</id><snippet>def find_value(needle, container):
    # Already found the object. Return.
    if needle == container:
        return True

    values = None
    if isinstance(container, dict):
        values = container.values()
    elif hasattr(container, '__iter__'):
        values = container.__iter__()

    if values is None:
        return False

    # Check deeper in the container, if needed.
    for val in values:
        if find_value(needle, val):
            return True

    # No match found.
    return False
</snippet></ROW><ROW><id>17841811</id><snippet>In [3]: d = { 'test': ['a', 'b', 'c'], 'd1': { 'd2': 'Block', 'a': 'b'} }

In [4]: find_value('Block', d)
Out[4]: True
</snippet></ROW><ROW><id>17841811</id><snippet>needle</snippet></ROW><ROW><id>17841811</id><snippet>def find_value(needle, container):
    # Already found the object. Return.
    if isinstance(container, basestring) and needle in container:
        return True

    values = None
    if isinstance(container, dict):
        values = container.values()
    elif hasattr(container, '__iter__'):
        values = container.__iter__()

    if values is None:
        return False

    # Check deeper in the container, if needed.
    for val in values:
        if find_value(needle, val):
            return True

    # No match found.
    return False
</snippet></ROW><ROW><id>17841953</id><snippet>return ciphertext</snippet></ROW><ROW><id>17841953</id><snippet>    for l in plaintext.lower():  
            if l in dic:  
                l=dic[l]  
                ciphertext+=l
            return ciphertext  # Indented to match level of `if`.
</snippet></ROW><ROW><id>17841953</id><snippet>    for l in plaintext.lower():  
        if l in dic:  
            l=dic[l]  
            ciphertext+=l
    return ciphertext
</snippet></ROW><ROW><id>17841953</id><snippet>alphabets = string.ascii_lowercase</snippet></ROW><ROW><id>17841953</id><snippet>dic[l]</snippet></ROW><ROW><id>17841953</id><snippet>ciphertext += dic[l]</snippet></ROW><ROW><id>17842051</id><snippet>print X.__array_interface__
#&lt;bound method Matrix.__array_interface__ of &lt;sprint.Matrix object at 0x107c5c320&gt;&gt;
</snippet></ROW><ROW><id>17842051</id><snippet>print X.__array_interface__
#{'shape': (5, 5), 'data': (4416696960, True), 'typestr': '&lt;f8'}
</snippet></ROW><ROW><id>17842051</id><snippet>class SprintMatrixWrapper(object):
    def __init__(self, sprint_matrix):
        self.__array_interface__ = sprint_matrix.__array_interface__()
</snippet></ROW><ROW><id>17842051</id><snippet>numpy.array(SprintMatrixWrapper(X))
</snippet></ROW><ROW><id>17842080</id><snippet># Get all the versions of a single course.
versions = Curriculum_Version.query.join(Curriculum_Version.course).filter(
    Course.course_code == "PIP-001").all()
</snippet></ROW><ROW><id>17842080</id><snippet>SELECT curriculum_versions.* FROM curriculum_versions, courses WHERE 
    courses.course_code = "PIP-001"
</snippet></ROW><ROW><id>17842080</id><snippet>SELECT curriculum_versions.* FROM curriculum_versions JOIN courses ON
    curriculum_versions.course_id = courses.id WHERE courses.course_code = "PIP-001"
</snippet></ROW><ROW><id>17842080</id><snippet>curriculum_versions.course_id = courses.id</snippet></ROW><ROW><id>17842080</id><snippet>Curriculum_Version.course</snippet></ROW><ROW><id>17842080</id><snippet>query.join()</snippet></ROW><ROW><id>17842080</id><snippet>Curriculum_Version</snippet></ROW><ROW><id>17842080</id><snippet>curriculum_versions</snippet></ROW><ROW><id>17842080</id><snippet>courses</snippet></ROW><ROW><id>17842080</id><snippet>curriculum_versions.course_id</snippet></ROW><ROW><id>17842238</id><snippet>#ajax method to retreive well data for dynamic well values, x_pos, y_pos, substance concentration
@app.route('/getWellData', methods=['GET', 'POST'])
def getWellData():
    #get all samples with that date
    date_collected = request.args.get('date_collected')
    site_id = request.args.get('site_id')
    site_map_id = request.args.get('site_map_id')
    substance_id = request.args.get('substance_id')

    well_results = wellSubstanceDataBySite(
        site_id=site_id,
        site_map_id=site_map_id,
        date_collected=date_collected,
        substance_id=substance_id)

    #return json to updateMarks ajax javascript function
    return json.dumps(well_results)
</snippet></ROW><ROW><id>17842238</id><snippet>//call the ajax endpoint for getWellData to return position, values, etc
$.ajax({
    dataType: "json",
    url: '/getWellData',
    data: data,
    success: function(data){

        //iterate over each value in the data array and append it as div element to the .landmarks div
        $.each(data, function(well_id, well){

            //create the mark element, must be all mashed into one line, wont work with multiple lines
            //sutract depth_of_water (well.value) from well.top_of_casing
            var goundwater_elevation_val = well.top_of_casing - well.value
            var mark = '&lt;div class="item mark" id="well-' + well_id + '" data-id="' + well_id + '" data-position="' + well.xpos + "," + well.ypos + '" data-value="' + goundwater_elevation_val.toFixed(4) + '" data-show-at-zoom="0"&gt;&lt;div&gt;&lt;div class="text"&gt;&lt;input class="well-checkboxes" type="checkbox" name="enable-well-' + well_id + '" checked style="margin:3px;"&gt;&lt;strong&gt;' + goundwater_elevation_val.toFixed(4) + '&lt;/strong&gt;&lt;/div&gt;&lt;img src="/static/jquery-image-viewer/example/images/mark.png" width="50px" height="50px" alt="Permanent Mark" /&gt;&lt;/div&gt;&lt;/div&gt;';
            if (well.value != 0) {
                //append the new mark to the .landmarks div
                $('.landmarks').append(mark);
            }

        });

        //refresh all landmarks to plot the new landmarks on the map with the smoothZoom API
        $('#sitemap').smoothZoom('refreshAllLandmarks');
    }
});
</snippet></ROW><ROW><id>17842428</id><snippet>from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
import datetime

#set up sqlalchemy
engine = create_engine('postgresql://&lt;username&gt;:&lt;password&gt;@localhost/flask_database')
Base = declarative_base()
metadata = Base.metadata
metadata.bind = engine
Session = sessionmaker(bind=engine, autoflush=True)
session = Session()


class User(Base):
    __tablename__ = 'user'
    id = Column(Integer, primary_key=True)
    api_owner_id = Column(Integer, ForeignKey('api.id'))
    email = Column(String(120), unique=True)
    username = Column(String(120), unique=True)
    first_name = Column(String(120))
    last_name = Column(String(120))
    business_name = Column(String(120))
    account_type = Column(String(60))
    mobile_phone = Column(String(120))
    street = Column(String(120))
    street2 = Column(String(120))
    city = Column(String(120))
    state = Column(String(120))
    zip_code = Column(String(120))
    country = Column(String(120))
    creation_date = Column(DateTime, default=datetime.datetime.now())
    password = Column(String(120))
    #github stuffs
    github_link = Column(Boolean, default=False)
    github_usn = Column(String(120))
    github_oauth_token = Column(String(160))
    #balanced stuffs
    balanced_account_uri = Column(String(120))
    ach_verified = Column(Boolean, default=False)
    active = Column(Boolean, default=True)
    profile_updated = Column(Boolean, default=False)
    account_balance = Column(Numeric(precision=10, scale=2), default=0.00)
    admin = Column(Boolean, default=False)
    devapp = relationship('DevApp', backref="user", lazy="dynamic")
    projects = relationship('Project', backref="user", lazy="dynamic")
    proposals = relationship('Proposal', backref="user", lazy="dynamic")
    transactions = relationship('Monies', backref="user", lazy="dynamic")

    def __repr__(self):
        return self.email
</snippet></ROW><ROW><id>17842443</id><snippet>place_list</snippet></ROW><ROW><id>17842443</id><snippet>Place</snippet></ROW><ROW><id>17842443</id><snippet>shopping_place</snippet></ROW><ROW><id>17842443</id><snippet>{% regroup place_list by shopping_place.shopping_cat as shopping_cat_list %}
</snippet></ROW><ROW><id>17842653</id><snippet>def liste_kontrol(liste):
    name=raw_input("Name pls:")
    if name in liste:
        print "now u seeng on list", name, liste[name]
    else:
        print "cant found."
liste= {"john":"002050505","jack":"0551282"}
liste_kontrol(liste)
</snippet></ROW><ROW><id>17842751</id><snippet>app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL')

if app.config['SQLALCHEMY_DATABASE_URI']:
    db = SQLAlchemy(app)
</snippet></ROW><ROW><id>17842907</id><snippet>from django.db.models import signals

def send_email_on_new_order(instance, created, raw, **kwargs):
    # Fixtures or updates are not interesting.
    if not created or raw:
        return

    # `instance` is your PurchaseOrder instance.
    email = EmailMessage('Purchase Order System', 'your message here', to=['youremail@gmail.com'])
    email.send()

signals.post_save.connect(send_email_on_new_order, sender=PurchaseOrder, dispatch_uid='send_email_on_new_order')
</snippet></ROW><ROW><id>17842907</id><snippet>models.py</snippet></ROW><ROW><id>17842907</id><snippet>models.py</snippet></ROW><ROW><id>17842907</id><snippet>from django.core.mail import EmailMessage
from django.db import models
from django.db.models import signals

class PurchaseOrder(models.Model):
    product = models.CharField(max_length=256)
    vendor = models.CharField(max_length=256)
    dollar_amount = models.FloatField()
    item_number = models.AutoField(primary_key=True)

def send_email_on_new_order(instance, created, raw, **kwargs):
    # Fixtures or updates are not interesting.
    if not created or raw:
        return

    # `instance` is your PurchaseOrder instance.
    email = EmailMessage('Purchase Order System', 'your message here', to=['youremail@gmail.com'])
    email.send()

signals.post_save.connect(send_email_on_new_order, sender=PurchaseOrder, dispatch_uid='send_email_on_new_order')
</snippet></ROW><ROW><id>17843025</id><snippet>@user_passes_test(lambda u: u.userprofile.is_admin_user)
</snippet></ROW><ROW><id>17843025</id><snippet>userprofile</snippet></ROW><ROW><id>17843025</id><snippet>related_name</snippet></ROW><ROW><id>17843174</id><snippet>write</snippet></ROW><ROW><id>17843174</id><snippet>self.response.write('')</snippet></ROW><ROW><id>17843174</id><snippet>self.response.headers</snippet></ROW><ROW><id>17843396</id><snippet>x</snippet></ROW><ROW><id>17843396</id><snippet>y</snippet></ROW><ROW><id>17843396</id><snippet>x = y
</snippet></ROW><ROW><id>17843396</id><snippet>x</snippet></ROW><ROW><id>17843396</id><snippet>y</snippet></ROW><ROW><id>17843396</id><snippet>x is y</snippet></ROW><ROW><id>17843396</id><snippet>True</snippet></ROW><ROW><id>17843396</id><snippet>x[:] = y
</snippet></ROW><ROW><id>17843396</id><snippet>x</snippet></ROW><ROW><id>17843396</id><snippet>int32</snippet></ROW><ROW><id>17843396</id><snippet>x is y</snippet></ROW><ROW><id>17843396</id><snippet>False</snippet></ROW><ROW><id>17843602</id><snippet>tkinter</snippet></ROW><ROW><id>17843602</id><snippet>Tkinter</snippet></ROW><ROW><id>17843602</id><snippet>tkinter</snippet></ROW><ROW><id>17843602</id><snippet>TclError: bad geometry specifier</snippet></ROW><ROW><id>17843602</id><snippet>top</snippet></ROW><ROW><id>17843602</id><snippet>frame</snippet></ROW><ROW><id>17843602</id><snippet>NameError</snippet></ROW><ROW><id>17843602</id><snippet>set_focus</snippet></ROW><ROW><id>17843602</id><snippet>focus_set</snippet></ROW><ROW><id>17843602</id><snippet>AttributeError</snippet></ROW><ROW><id>17843721</id><snippet>class CsvIterator(object)
  def __init__(self, gcs_file, chunk_size):
     self.gcs_file = gcs_file
     self.chunk_size = chunk_size
  def __iter__(self):
     return self
  def next(self):
     result = self.gcs_file.read(size=self.chunk_size)
     if not result:
        raise StopIteration()
     return result
</snippet></ROW><ROW><id>17843721</id><snippet>csv.reader(iter(gcs_file.readline, ''))
</snippet></ROW><ROW><id>17843764</id><snippet>data = {}
key = operator.itemgetter("name", "class")
for record in myjson:
    k = key(record)
    if k in data:
        data[k]["topic"].append(record["topic"])
    else:
        data[k] = record.copy()
        data[k]["topic"] = [record["topic"]]
result = data.values()
</snippet></ROW><ROW><id>17843764</id><snippet>"topic"</snippet></ROW><ROW><id>17843819</id><snippet>self</snippet></ROW><ROW><id>17843819</id><snippet>def recur(self, num):
</snippet></ROW><ROW><id>17843819</id><snippet>instance.method(arg1, arg2, arg3, ...)
</snippet></ROW><ROW><id>17843819</id><snippet>method(instance, arg1, arg2, arg3, ....)
</snippet></ROW><ROW><id>17844057</id><snippet>next(iter(s))</snippet></ROW><ROW><id>17844057</id><snippet>iter(s).next()</snippet></ROW><ROW><id>17844057</id><snippet>import random
random.sample(s, 1)[0]
</snippet></ROW><ROW><id>17844057</id><snippet>&gt;&gt;&gt; s = frozenset("kapow")
&gt;&gt;&gt; [next(iter(s)) for _ in range(10)]
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
</snippet></ROW><ROW><id>17844057</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; [random.sample(s, 1)[0] for _ in range(10)]
['w', 'a', 'o', 'o', 'w', 'o', 'k', 'k', 'p', 'k']
</snippet></ROW><ROW><id>17844207</id><snippet>import wx

app = wx.App()
aBitmap = wx.Image(name = "zimages/gato.jpg").ConvertToBitmap()
splashStyle = wx.SPLASH_CENTRE_ON_SCREEN | wx.SPLASH_TIMEOUT
splashDuration = 1000

splash = wx.SplashScreen(aBitmap, splashStyle,
                                 splashDuration, None)
splash.Show()
app.MainLoop()
</snippet></ROW><ROW><id>17844207</id><snippet>wx.Yield</snippet></ROW><ROW><id>17844207</id><snippet>app.MainLoop</snippet></ROW><ROW><id>17844207</id><snippet>Yield</snippet></ROW><ROW><id>17844207</id><snippet>wx.Yield()</snippet></ROW><ROW><id>17844421</id><snippet>columns = zip(*rows)
</snippet></ROW><ROW><id>17844421</id><snippet>rows = csv.reader(YourFile, dialect='excel')
</snippet></ROW><ROW><id>17844452</id><snippet>sys.modules</snippet></ROW><ROW><id>17844452</id><snippet>import sys

class VirtualModule(object):
    def __init__(self, name):
        self.__name__ = name.rsplit('.', 1)[-1]
        self.__package__ = name
        self.__loader__ = None

    def __getattr__(self, name):
        if name is valid:
            # Return dynamic classes here
            return VirtualClass(name)

        raise AttributeError(name)


virtual_module_name = 'myproject.myfactory.virtualmodule'
sys.modules[virtual_module_name] = VirtualModule(virtual_module_name)
</snippet></ROW><ROW><id>17844452</id><snippet>__getattr__</snippet></ROW><ROW><id>17844452</id><snippet>VirtualModule</snippet></ROW><ROW><id>17844452</id><snippet>myproject/__init__.py</snippet></ROW><ROW><id>17844452</id><snippet>myproject/myfactory/__init__.py</snippet></ROW><ROW><id>17844452</id><snippet>myproject.myfactory</snippet></ROW><ROW><id>17844452</id><snippet>myproject.myfactory.virtualmodule</snippet></ROW><ROW><id>17844468</id><snippet>'-f'</snippet></ROW><ROW><id>17844468</id><snippet>-f</snippet></ROW><ROW><id>17844468</id><snippet>argparse</snippet></ROW><ROW><id>17844468</id><snippet>--</snippet></ROW><ROW><id>17844597</id><snippet>break</snippet></ROW><ROW><id>17844597</id><snippet>while True:
    if exists ("lose.png"):
        click ("lose.png")
        print ("***** YOU LOSE! *****")
        break

    if exists ("win.png"):
        click ("win.png")
        print ("***** YOU WIN! *****")
        break
</snippet></ROW><ROW><id>17844597</id><snippet>if</snippet></ROW><ROW><id>17844597</id><snippet>True</snippet></ROW><ROW><id>17844597</id><snippet>StopIteration</snippet></ROW><ROW><id>17844597</id><snippet>raise StopIteration()</snippet></ROW><ROW><id>17844597</id><snippet>StopIteration</snippet></ROW><ROW><id>17844660</id><snippet>rand = random.randint(6, len(split_name) - 1)
search_name = name[rand:] + '*'
rqst = requests.get(name_srch % (key, search_name))
</snippet></ROW><ROW><id>17844772</id><snippet>def CompareDimensions(self):
    dims = [list(instance.GetDimensions()) for instance in self.house_list]
    dims = numpy.array(dims)
    # .... futher processing on matrix
</snippet></ROW><ROW><id>17844772</id><snippet>import numpy # Assuming you have numpy available

class Houses(object):
    def __init__(self, dimension_x=None, dimension_y=None):
        self.dimension_x = dimension_x
        self.dimension_y = dimension_y
    def GetDimensions(self):
        return (self.dimension_x,self.dimension_y)

class HouseManager(object):
    def __init__(self):
        self.house_list = []
    def PushNewHouse(self,dim_x,dim_y):
        self.house_list.append(House(dim_x,dim_y))
    def CompareDimensions(self):
        dims = [list(instance.GetDimensions()) for instance in self.house_list]
        dims = numpy.array(dims)
        # .... futher processing on matrix
</snippet></ROW><ROW><id>17844779</id><snippet>for line in lines:
    print line.split(')')[0]
</snippet></ROW><ROW><id>17844779</id><snippet>url</snippet></ROW><ROW><id>17844779</id><snippet>)</snippet></ROW><ROW><id>17844779</id><snippet>for line in lines:
    print ')'.join(line.split(')')[:-1])
</snippet></ROW><ROW><id>17844820</id><snippet>(
    one,
    two,
    three,
    four
) = range(4)
</snippet></ROW><ROW><id>17844908</id><snippet>&gt;&gt;&gt; Vertices = {'test.com': '1', 'testb.com': '2', 'testc.com': '3', '1.1.1.1': '4', '2.2.2.2': '5', '3.3.3.3': '6'}
&gt;&gt;&gt; matches = [('test.com', '1.1.1.1'), ('test.com', '3.3.3.3'), ('test.com', '2.2.2.2'), ('testb.com', '3.3.3.3'), ('testc.com', '3.3.3.3')] 
&gt;&gt;&gt; Edges = [(Vertices[v1], Vertices[v2]) for v1,v2 in matches]
&gt;&gt;&gt; Edges
[('1', '4'), ('1', '6'), ('1', '5'), ('2', '6'), ('3', '6')]
</snippet></ROW><ROW><id>17844908</id><snippet>&gt;&gt;&gt; Edges = []
&gt;&gt;&gt; for item in matches:
...     for vertex in Vertices:
...         if vertex[1] == item[0]:
...             i = vertex[0]
...             break
...     for vertex in Vertices:
...         if vertex[1] == item[1]:
...             j = vertex[0]
...             break
...     Edges.append((i,j))
...
&gt;&gt;&gt; Edges
[('1', '4'), ('1', '6'), ('1', '5'), ('2', '6'), ('3', '6')]
</snippet></ROW><ROW><id>17844938</id><snippet># content of conftest.py  (e.g. in your tests or root directory)

@pytest.fixture(scope="session", autouse=True):
def do_something(request):
    # prepare something ahead of all tests
    request.addfinalizer(finalizer_function)
</snippet></ROW><ROW><id>17844949</id><snippet>str.partition()</snippet></ROW><ROW><id>17844949</id><snippet>file.partition('Item 2')[0]
</snippet></ROW><ROW><id>17844949</id><snippet>Item 2</snippet></ROW><ROW><id>17844949</id><snippet>''.join(file.partition('Item 2')[:2])
</snippet></ROW><ROW><id>17844949</id><snippet>&gt;&gt;&gt; 'Some text with Item 2 in it'.partition('Item 2')[0]
'Some text with '
&gt;&gt;&gt; ''.join('Some text with Item 2 in it'.partition('Item 2')[:2])
'Some text with Item 2'
</snippet></ROW><ROW><id>17844972</id><snippet>argv</snippet></ROW><ROW><id>17844972</id><snippet>.split()</snippet></ROW><ROW><id>17844972</id><snippet>argstr = ' '.join(testargs)</snippet></ROW><ROW><id>17844972</id><snippet>argv</snippet></ROW><ROW><id>17844972</id><snippet>argv</snippet></ROW><ROW><id>17845080</id><snippet>http://start.csail.mit.edu/answer.php</snippet></ROW><ROW><id>17845080</id><snippet>http://start.csail.mit.edu/</snippet></ROW><ROW><id>17845080</id><snippet>?</snippet></ROW><ROW><id>17845080</id><snippet>url = 'http://start.csail.mit.edu/answer.php'
values = { 'query': 'What is the capital of China?' }

data = urllib.parse.urlencode(values)
url = '?'.join([url, data])
response = urllib.request.urlopen(url)
</snippet></ROW><ROW><id>17845198</id><snippet>sorted()</snippet></ROW><ROW><id>17845198</id><snippet>for key in sorted(index):
    print('{:&lt;20}{}'.format(key, ', '.join(str(i) for i in sorted(index[key]))))
</snippet></ROW><ROW><id>17845198</id><snippet>&gt;&gt;&gt; sorted(index)
['connected', 'depth first search', 'neighbor', 'path', 'shortest path', 'spanning tree', 'vertex']
&gt;&gt;&gt; sorted(index['connected'])
[28, 54]
&gt;&gt;&gt; for key in sorted(index):
...     print('{:&lt;20}{}'.format(key, ', '.join(str(i) for i in sorted(index[key]))))
... 
connected           28, 54
depth first search  55
neighbor            27, 64, 77
path                19, 72
shortest path       55
spanning tree       16, 99
vertex              54
</snippet></ROW><ROW><id>17845428</id><snippet>from mod_login import mod_login
</snippet></ROW><ROW><id>17845428</id><snippet>from app import app
</snippet></ROW><ROW><id>17845449</id><snippet>modified_demo = [{s[0]:s[1],'Gender':s[2], 'Team':s[3]} for s in demo]
</snippet></ROW><ROW><id>17845526</id><snippet>print</snippet></ROW><ROW><id>17845526</id><snippet>inv_powerm</snippet></ROW><ROW><id>17845526</id><snippet>m0 == 1</snippet></ROW><ROW><id>17845526</id><snippet>m1 == 1.0</snippet></ROW><ROW><id>17845526</id><snippet>m0 - m1 == 0</snippet></ROW><ROW><id>17845526</id><snippet>while</snippet></ROW><ROW><id>17845526</id><snippet>while</snippet></ROW><ROW><id>17845616</id><snippet>inspect()</snippet></ROW><ROW><id>17845616</id><snippet>&gt;&gt;&gt; from sqlalchemy import inspect
&gt;&gt;&gt; inspect(User).attrs.keys()
['addresses', 'id']
&gt;&gt;&gt; User.addresses.property.backref
'user'
</snippet></ROW><ROW><id>17845720</id><snippet>ScriptDirectory</snippet></ROW><ROW><id>17845720</id><snippet>Script</snippet></ROW><ROW><id>17845727</id><snippet>[mydict[key]**exp[key] for key in mydict.keys()]
</snippet></ROW><ROW><id>17845727</id><snippet>[mydict[key]**exp[key] for key in mydict]
</snippet></ROW><ROW><id>17845727</id><snippet>.keys()</snippet></ROW><ROW><id>17845727</id><snippet>import time
t = time.clock()
for i in range(1000):
    # your code here, for example:
    [mydict[key]**exp[key] for key in mydict.keys()]
print "time", time.clock() - t
</snippet></ROW><ROW><id>17845730</id><snippet>django/utils/_os.py</snippet></ROW><ROW><id>17845730</id><snippet>raise ValueError('The joined path (%s) is located outside of the base '
                 'path component (%s)' % (final_path, base_path))
</snippet></ROW><ROW><id>17845730</id><snippet>base_path</snippet></ROW><ROW><id>17845730</id><snippet>default_storage</snippet></ROW><ROW><id>17845730</id><snippet>settings.MEDIA_ROOT</snippet></ROW><ROW><id>17845730</id><snippet>FileSystemStorage</snippet></ROW><ROW><id>17845730</id><snippet>file_storage = FileSystemStorage(location = '/opt/django_apps/inscripcion/solicitudes/')
</snippet></ROW><ROW><id>17845730</id><snippet>contenido = "Simple code"
file_name = "filename"
path = file_storage.save(file_name, ContentFile(contenido))
</snippet></ROW><ROW><id>17845957</id><snippet>recipients</snippet></ROW><ROW><id>17845957</id><snippet>from oauth2client.appengine import StorageByKeyName
from model import Credentials

self.mirror_service = create_service(
        'mirror', 'v1',
        StorageByKeyName(Credentials, MY_USER_ID, 'credentials').get())
timeline_item = {'text': 'Test10'}
self.mirror_service.timeline().insert(body=timeline_item).execute()
</snippet></ROW><ROW><id>17845957</id><snippet>create_service</snippet></ROW><ROW><id>17845957</id><snippet>import httplib2
from apiclient.discovery import build

from model import Credentials

def create_service(service, version, creds=None):
  """Create a Google API service.

  Load an API service from a discovery document and authorize it with the
  provided credentials.

  Args:
    service: Service name (e.g 'mirror', 'oauth2').
    version: Service version (e.g 'v1').
    creds: Credentials used to authorize service.
  Returns:
    Authorized Google API service.
  """
  # Instantiate an Http instance
  http = httplib2.Http()

  if creds:
    # Authorize the Http instance with the passed credentials
    creds.authorize(http)

  return build(service, version, http=http)
</snippet></ROW><ROW><id>17846150</id><snippet>dict.pop()</snippet></ROW><ROW><id>17846150</id><snippet>del</snippet></ROW><ROW><id>17846150</id><snippet>self.books = {}</snippet></ROW><ROW><id>17846150</id><snippet>shelf</snippet></ROW><ROW><id>17846150</id><snippet>__init__</snippet></ROW><ROW><id>17846150</id><snippet>books</snippet></ROW><ROW><id>17846150</id><snippet>__init__</snippet></ROW><ROW><id>17846150</id><snippet>library</snippet></ROW><ROW><id>17846150</id><snippet>shelves</snippet></ROW><ROW><id>17846150</id><snippet>book</snippet></ROW><ROW><id>17846150</id><snippet>shelf_number</snippet></ROW><ROW><id>17846150</id><snippet>library</snippet></ROW><ROW><id>17846150</id><snippet>enshelf</snippet></ROW><ROW><id>17846150</id><snippet>unshelf</snippet></ROW><ROW><id>17846150</id><snippet>SPL</snippet></ROW><ROW><id>17846150</id><snippet>SPL</snippet></ROW><ROW><id>17846150</id><snippet>SPL</snippet></ROW><ROW><id>17846150</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>17846150</id><snippet>class book(object)</snippet></ROW><ROW><id>17846150</id><snippet>class shelf(object)</snippet></ROW><ROW><id>17846150</id><snippet>class library(object)</snippet></ROW><ROW><id>17846150</id><snippet>super()</snippet></ROW><ROW><id>17846150</id><snippet>get_books()</snippet></ROW><ROW><id>17846150</id><snippet>return [self.books[k].get_title() for k in self.books.iterkeys()]</snippet></ROW><ROW><id>17846150</id><snippet>report_all_books()</snippet></ROW><ROW><id>17846150</id><snippet>return [shlf.get_books() for shlf in self.shelves]</snippet></ROW><ROW><id>17846150</id><snippet>for c in "foobar": print(c)</snippet></ROW><ROW><id>17846151</id><snippet>gs_bucket_name</snippet></ROW><ROW><id>17846151</id><snippet>create_upload_url</snippet></ROW><ROW><id>17846226</id><snippet>class YEncoder(json.JSONEncoder):
    def encode(self, obj):
        return json.dumps({ 'm': json.dumps({ k: json.dumps(v, cls=XEncoder) for k, v in obj.m.items()})})

class YDecoder(json.JSONDecoder):
    def decode(self, json_string):
        y.m = {k: json.loads(v, cls=XDecoder) for k, v in json.loads(json.loads(json_string)['m']).items()}
        return y
</snippet></ROW><ROW><id>17846328</id><snippet>ImageField</snippet></ROW><ROW><id>17846328</id><snippet>url</snippet></ROW><ROW><id>17846328</id><snippet>{% block content %}
    &lt;img src="{{ carx.photo.url }}"&gt;
{% endblock %}
</snippet></ROW><ROW><id>17846380</id><snippet>If-Modified-Since</snippet></ROW><ROW><id>17846380</id><snippet>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
</snippet></ROW><ROW><id>17846380</id><snippet>timestamp = time.time()
...
time.strftime('%a, %d %b %Y %H:%M:%S GMT', time.gmtime(timestamp))
</snippet></ROW><ROW><id>17846380</id><snippet>If-modified-since</snippet></ROW><ROW><id>17846380</id><snippet>  c) If the variant has not been modified since a valid If-
     Modified-Since date, the server SHOULD return a 304 (Not
     Modified) response.
</snippet></ROW><ROW><id>17846455</id><snippet>b</snippet></ROW><ROW><id>17846455</id><snippet>def proc4(a, b): # line 1
    if test(a):  # line 2
        return b # line 3
    return a     # line 4
</snippet></ROW><ROW><id>17846455</id><snippet>test(a)</snippet></ROW><ROW><id>17846455</id><snippet>True</snippet></ROW><ROW><id>17846455</id><snippet>if</snippet></ROW><ROW><id>17846455</id><snippet>return b</snippet></ROW><ROW><id>17846455</id><snippet>b</snippet></ROW><ROW><id>17846455</id><snippet>test(a)</snippet></ROW><ROW><id>17846455</id><snippet>False</snippet></ROW><ROW><id>17846455</id><snippet>if</snippet></ROW><ROW><id>17846455</id><snippet>a</snippet></ROW><ROW><id>17846455</id><snippet>proc4</snippet></ROW><ROW><id>17846455</id><snippet>finally</snippet></ROW><ROW><id>17846471</id><snippet>ScalarFormatter</snippet></ROW><ROW><id>17846471</id><snippet># Set limits to x &lt; 10^1 and x &gt; 10^-1 
# (overlapping, thus all inclusive, hopefully)
gca().get_yaxis().get_major_formatter().set_powerlimits((0, 0))
</snippet></ROW><ROW><id>17846568</id><snippet>result = {k: d2.get(v) for k, v in d1.items()}
</snippet></ROW><ROW><id>17846624</id><snippet>MySQLdb</snippet></ROW><ROW><id>17846624</id><snippet>import MySQLdb

db = MySQLdb.connect(user="username", db="dbname")
cursor = db.cursor()

batch_queries = '''
    SELECT * FROM posts WHERE id=1;
    SELECT * FROM posts WHERE id=2;
'''
cursor.execute(batch_queries)

print cursor.fetchone()
while cursor.nextset():  # iterate to next result set if there is any
    print cursor.fetchone()

cursor.close()
</snippet></ROW><ROW><id>17846776</id><snippet>&gt;&gt;&gt; a=np.random.randint(0,5,(3,3))
&gt;&gt;&gt; a
array([[0, 1, 4],
       [0, 2, 4],
       [2, 4, 0]])
&gt;&gt;&gt; ua,uind=np.unique(a,return_inverse=True)
&gt;&gt;&gt; count=np.bincount(uind)
&gt;&gt;&gt; ua
array([0, 1, 2, 4]) 
&gt;&gt;&gt; count
array([3, 1, 2, 3]) 
</snippet></ROW><ROW><id>17846776</id><snippet>ua</snippet></ROW><ROW><id>17846776</id><snippet>count</snippet></ROW><ROW><id>17846776</id><snippet>import numpy as np

def mask_fewest(arr,thresh,replace):
    ua,uind=np.unique(arr,return_inverse=True)
    count=np.bincount(uind)
    #Here ua has all of the unique elements, count will have the number of times 
    #each appears.


    #@Jamie's suggestion to make the rep_mask faster.
    rep_mask = np.in1d(uind, np.where(count &lt; thresh))
    #Find which elements do not appear at least `thresh` times and create a mask

    arr.flat[rep_mask]=replace 
    #Replace elements based on above mask.

    return arr


&gt;&gt;&gt; a=np.random.randint(2,8,(4,4))
[[6 7 7 3]
 [7 5 4 3]
 [3 5 2 3]
 [3 3 7 7]]


&gt;&gt;&gt; mask_fewest(a,5,50)
[[10  7  7  3]
 [ 7  5 10  3]
 [ 3  5 10  3]
 [ 3  3  7  7]]
</snippet></ROW><ROW><id>17846776</id><snippet>&gt;&gt;&gt; a
[[[2] [2, 3] [3, 34]]
 [[3] [4, 5] [3, 34]]
 [[3] [2, 3] [3, 4]]]


&gt;&gt;&gt; mask_fewest(a,2,10)
[[10 [2, 3] [3, 34]]
 [[3] 10 [3, 34]]
 [[3] [2, 3] 10]]
</snippet></ROW><ROW><id>17846946</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>17846946</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>17846946</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>17846946</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>17846946</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>17846973</id><snippet>lower_right_lat = lower_left_lat = min_lat
</snippet></ROW><ROW><id>17846975</id><snippet># Go through each possibility in the branch until one solution is found
clone = deepcopy(puzzle)
values = clone[index / 9][index % 9]
for value in values:
    clone[index / 9][index % 9] = value
    branch = solvePuzzle(clone)
    # If a list is returned, it worked! Otherwise, try the next possibility
    if isinstance(branch, list):
        return branch
</snippet></ROW><ROW><id>17846975</id><snippet>clone</snippet></ROW><ROW><id>17846975</id><snippet># Go through each possibility in the branch until one solution is found
values = puzzle[index / 9][index % 9]
for value in values:
    clone = deepcopy(puzzle)
    clone[index / 9][index % 9] = value
    branch = solvePuzzle(clone)
    # If a list is returned, it worked! Otherwise, try the next possibility
    if isinstance(branch, list):
        return branch
</snippet></ROW><ROW><id>17847337</id><snippet>th = threading.Thread(target=rcon.RconProtocol(serverAddress, rconPort, rconPass, serverName))
</snippet></ROW><ROW><id>17847337</id><snippet>th = threading.Thread(target=rcon.RconProtocol, args=(serverAddress, rconPort, rconPass, serverName))
</snippet></ROW><ROW><id>17847376</id><snippet>def signature_seq(signature, limit):
  products = set((1,))
  for factor in signature:
    new_products = set()
    for prod in products:
      x = factor * prod
      while x &lt;= limit:
        new_products.add(x)
        x *= factor
    products.update(new_products)

  products.remove(1)
  return products
</snippet></ROW><ROW><id>17847376</id><snippet>&gt;&gt;&gt; print(sorted(signature_seq((2, 3, 11), 10)))
[2, 3, 4, 6, 8, 9]
&gt;&gt;&gt; print(sorted(signature_seq((5, 7, 13), 30)))
[5, 7, 13, 25]
</snippet></ROW><ROW><id>17847395</id><snippet>sql = """SELECT avg(downloadtime) FROM tb_npp where date(date) = %s 
         and substring(host,6,3) in ({c})""".format(
            c=', '.join(['%s']*len(dc)))    
args = ['2013-07-01'] + dc
cursor3.execute(sql, args)
</snippet></ROW><ROW><id>17847532</id><snippet>tarfile.py</snippet></ROW><ROW><id>17847532</id><snippet># Skip if somebody tries to archive the archive...
if self.name is not None and os.path.abspath(name) == self.name:
    self._dbg(2, "tarfile: Skipped %r" % name)
    return
</snippet></ROW><ROW><id>17847612</id><snippet>re</snippet></ROW><ROW><id>17847612</id><snippet>import re
s = 'JHDKFksdKSJDsGGGG'
print re.sub('[A-Z]+','_',s)
</snippet></ROW><ROW><id>17847612</id><snippet>[A-Z]+</snippet></ROW><ROW><id>17847612</id><snippet>[A-Z]</snippet></ROW><ROW><id>17847612</id><snippet>A</snippet></ROW><ROW><id>17847612</id><snippet>Z</snippet></ROW><ROW><id>17847612</id><snippet>+</snippet></ROW><ROW><id>17847612</id><snippet>[A-Z]+</snippet></ROW><ROW><id>17847612</id><snippet>re.sub</snippet></ROW><ROW><id>17847664</id><snippet>pygame.display.flip()</snippet></ROW><ROW><id>17847809</id><snippet>@tracer
def spam(...)
   ...
</snippet></ROW><ROW><id>17847809</id><snippet>def spam(...)
   ...
spam = tracer(spam)
</snippet></ROW><ROW><id>17847809</id><snippet>tracer(spam)</snippet></ROW><ROW><id>17847809</id><snippet>tracer</snippet></ROW><ROW><id>17847809</id><snippet>spam</snippet></ROW><ROW><id>17847809</id><snippet>self.func</snippet></ROW><ROW><id>17847809</id><snippet>class tracer:
            def __init__(self, func):  #tracer(spam), func is assigned spam
               self.calls = 0
               self.func = func
</snippet></ROW><ROW><id>17847809</id><snippet>spam</snippet></ROW><ROW><id>17847809</id><snippet>tracer</snippet></ROW><ROW><id>17847809</id><snippet>__call__</snippet></ROW><ROW><id>17847809</id><snippet>tracer</snippet></ROW><ROW><id>17847809</id><snippet>def __call__(self, *args):
   self.calls += 1
   print('call %s to %s' % (self.calls, self.func.__name__))
</snippet></ROW><ROW><id>17847809</id><snippet>__call__</snippet></ROW><ROW><id>17847809</id><snippet>spam</snippet></ROW><ROW><id>17847809</id><snippet>tracer</snippet></ROW><ROW><id>17847809</id><snippet>def __call__(self, *args):
               self.calls += 1
               print('call %s to %s' % (self.calls, self.func.__name__))
               self.func(*args)
</snippet></ROW><ROW><id>17847809</id><snippet>&gt;&gt;&gt; 
call 1 to spam
6
</snippet></ROW><ROW><id>17847882</id><snippet>now_playing_object</snippet></ROW><ROW><id>17847882</id><snippet>PlayingObject</snippet></ROW><ROW><id>17847882</id><snippet>now_playing_object = None
</snippet></ROW><ROW><id>17847882</id><snippet>#maybe needs parameters or simple use now_playing_object = ObjectProperty(None)
now_playing_object = Sound() 
</snippet></ROW><ROW><id>17847882</id><snippet>cls.now_playing_object != None</snippet></ROW><ROW><id>17847882</id><snippet>@classmethod</snippet></ROW><ROW><id>17847882</id><snippet>@classmethod</snippet></ROW><ROW><id>17847882</id><snippet>Gumb</snippet></ROW><ROW><id>17847882</id><snippet>Gumb</snippet></ROW><ROW><id>17847882</id><snippet>soundfile</snippet></ROW><ROW><id>17847882</id><snippet>sound</snippet></ROW><ROW><id>17847882</id><snippet>now_playing_object</snippet></ROW><ROW><id>17847882</id><snippet>Gumb</snippet></ROW><ROW><id>17847882</id><snippet>soundfile</snippet></ROW><ROW><id>17847882</id><snippet>sound</snippet></ROW><ROW><id>17847882</id><snippet>now_playing_object</snippet></ROW><ROW><id>17847882</id><snippet>class Gumb(Button):
    # Constructor. 
    def __init__(self,  **kwargs):
        super(Gump, self).__init__(**kwargs)
        #This became attributes of the 
        self.soundfile = StringProperty(None)\
        self.sound = ObjectProperty(None)
        self.now_playing_object = ObjectProperty(None) 

    def on_soundfile(self, instance, value):
        self.sound = SoundLoader.load(value)

    def on_press(self):
        if self.sound:
            self.play_sound()

    def play_sound(self):
        if self.now_playing_object.state != 'stop':
            self.now_playing_object.stop()

        # self.sound was your new_playing_object, since it is part of the instance
        # you don't need to send it as parameter
        self.now_playing_object = self.sound
        self.now_playing_object.play()
</snippet></ROW><ROW><id>17848075</id><snippet>sys.stdin</snippet></ROW><ROW><id>17848075</id><snippet>sys.stdout</snippet></ROW><ROW><id>17848075</id><snippet>sys.stderr</snippet></ROW><ROW><id>17848075</id><snippet>foo = sys.stdin.read(1024)
</snippet></ROW><ROW><id>17848280</id><snippet>reader = csv.reader(cfeature, delimiter=';', skipinitialspace=True)
for row in reader:
    print '\n'.join(row)
</snippet></ROW><ROW><id>17848280</id><snippet>row</snippet></ROW><ROW><id>17848280</id><snippet>reader = csv.reader(cfeature, delimiter=';', skipinitialspace=True)
for data in reader:
    for row in data:
        #do something with row
</snippet></ROW><ROW><id>17848303</id><snippet>string.Formatter</snippet></ROW><ROW><id>17848303</id><snippet>myformatter.format('{user!u} did la-dee-dah on {date}, and {pronoun!l} liked it. ',
                      user=x, date=y, pronoun=z)
</snippet></ROW><ROW><id>17848369</id><snippet>def show(level):
    logger = logging.getLogger()
    logger.setLevel(level)
    logging.info('info')
    ....
</snippet></ROW><ROW><id>17848517</id><snippet>httpd_user_script_exec_t</snippet></ROW><ROW><id>17848517</id><snippet>httpd_selinux(8)</snippet></ROW><ROW><id>17848517</id><snippet>chcon(1)</snippet></ROW><ROW><id>17848545</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "left)garbage|right"
&gt;&gt;&gt; re.sub(r'(?&lt;=\)).*?(?=\|)', '', s)
'left)|right'

&gt;&gt;&gt; re.sub(r'\).*?\|', r')|', s)
'left)|right'
</snippet></ROW><ROW><id>17848603</id><snippet>regex_string = r'= (.*? per contract)'
</snippet></ROW><ROW><id>17848603</id><snippet>'625 dollars per contract'
</snippet></ROW><ROW><id>17848603</id><snippet>&gt;&gt;&gt;regex_string = r'= (.*?) per contract'
&gt;&gt;&gt;matchobj = re.search(regex_string, "(.0025 = 625 dollars per contract)")
&gt;&gt;&gt;matchobj.groups()
('625 dollars',)
</snippet></ROW><ROW><id>17848699</id><snippet>a[:2, 1:] = 1
</snippet></ROW><ROW><id>17848952</id><snippet>pip search socketio</snippet></ROW><ROW><id>17848960</id><snippet>BEGIN TRANSACTION</snippet></ROW><ROW><id>17848960</id><snippet>COMMIT</snippet></ROW><ROW><id>17848960</id><snippet>ROLLBACK</snippet></ROW><ROW><id>17848967</id><snippet>&gt;&gt;&gt; list_of_folders = [
...     u'Magazines/testfolder1',
...     u'Magazines/testfolder1/folder1/folder2/folder3',
...     u'Magazines/testfolder1/folder1/',
...     u'Magazines/testfolder1/folder1/folder2/',
...     u'Magazines/testfolder2',
...     u'Magazines/testfolder2/folder1/folder2/folder3',
...     u'Magazines/testfolder2/folder1/',
...     u'Magazines/testfolder2/folder1/folder2/',
...     u'Magazines/testfolder3',
...     u'Magazines/testfolder3/folder1/folder2/folder3',
...     u'Magazines/testfolder3/folder1/',
...     u'Magazines/testfolder3/folder1/folder2/',
... ]
&gt;&gt;&gt; result = set()
&gt;&gt;&gt; for folder in list_of_folders:
...     for parent in result:
...         if folder.startswith(parent):
...             break
...     else:
...         result.add(folder)
... 
&gt;&gt;&gt; result
{'Magazines/testfolder3', 'Magazines/testfolder2', 'Magazines/testfolder1'}
</snippet></ROW><ROW><id>17848967</id><snippet>list_of_folders = [
    ...
]
result = set()
for folder in list_of_folders:
    if all(not folder.startswith(parent) for parent in result):
        result.add(folder)
print result
</snippet></ROW><ROW><id>17849118</id><snippet>for playerhand in pHands:
    for card in playerhand:
        print card[1]
</snippet></ROW><ROW><id>17849118</id><snippet>def suits(player):
    for card in pHands[player]:
        print card[1]
</snippet></ROW><ROW><id>17849118</id><snippet>suits(1)</snippet></ROW><ROW><id>17849118</id><snippet>def remove_suits():
    newhands = [] # temporary variable that will replace pHands
    for playerhand in pHands: # for each hand
        newhand = [] # temporary variable for what their new hand will be
        for card in playerhand:
            newcard = card[0] # make the card equal to only the first character in the hand, in this case, the number
            newhand.append(newcard) # store this card to the temporary variable
        newhands.append(newhand) # push this hand to the temporary variable for the new set of hands
    global pHands # if you're working with globals
    pHands = newhands # now change pHands to be equal to your new list
</snippet></ROW><ROW><id>17849547</id><snippet>is</snippet></ROW><ROW><id>17849547</id><snippet>str(...)</snippet></ROW><ROW><id>17849547</id><snippet>is</snippet></ROW><ROW><id>17849547</id><snippet>==</snippet></ROW><ROW><id>17849547</id><snippet>is</snippet></ROW><ROW><id>17849889</id><snippet>__*item__()</snippet></ROW><ROW><id>17850130</id><snippet>&gt;&gt;&gt; re.match(r"(\d+)?(\D+)?$", '5mins').groups()
('5', 'mins')
&gt;&gt;&gt; re.match(r"(\d+)?(\D+)?$", 'now').groups()
(None, 'now')
</snippet></ROW><ROW><id>17850278</id><snippet>&lt;link rel="stylesheet" href="/theme/css/main.css"&gt;</snippet></ROW><ROW><id>17850278</id><snippet>&lt;link rel="stylesheet" href="theme/css/main.css"&gt;</snippet></ROW><ROW><id>17850519</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; date_str = '20130723'
&gt;&gt;&gt; datetime.datetime.strptime(date_str, '%Y%m%d') - datetime.timedelta(days=1)
datetime.datetime(2013, 7, 22, 0, 0)
</snippet></ROW><ROW><id>17850788</id><snippet>def dictify(ul):
    result = {}
    for li in ul.find_all("li", recursive=False):
        key = next(li.stripped_strings)
        ul = li.find("ul")
        if ul:
            result[key] = dictify(ul)
        else:
            result[key] = None
    return result
</snippet></ROW><ROW><id>17850788</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup("""
... &lt;ul&gt;
...   &lt;li&gt;Operating System
...     &lt;ul&gt;
...       &lt;li&gt;Linux
...         &lt;ul&gt;
...           &lt;li&gt;Debian&lt;/li&gt;
...           &lt;li&gt;Fedora&lt;/li&gt;
...           &lt;li&gt;Ubuntu&lt;/li&gt;
...         &lt;/ul&gt;
...       &lt;/li&gt;
...       &lt;li&gt;Windows&lt;/li&gt;
...       &lt;li&gt;OS X&lt;/li&gt;
...     &lt;/ul&gt;
...   &lt;/li&gt;
...   &lt;li&gt;Programming Languages
...     &lt;ul&gt;
...       &lt;li&gt;Python&lt;/li&gt;
...       &lt;li&gt;C#&lt;/li&gt;
...       &lt;li&gt;Ruby&lt;/li&gt;
...     &lt;/ul&gt;
...   &lt;/li&gt;
... &lt;/ul&gt;
... """)
&gt;&gt;&gt; ul = soup.body.ul
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(dictify(ul), width=1)
{u'Operating System': {u'Linux': {u'Debian': None,
                                  u'Fedora': None,
                                  u'Ubuntu': None},
                       u'OS X': None,
                       u'Windows': None},
 u'Programming Languages': {u'C#': None,
                            u'Python': None,
                            u'Ruby': None}}
</snippet></ROW><ROW><id>17851295</id><snippet>self.driver.title.lower().startswith('Checkout')</snippet></ROW><ROW><id>17851295</id><snippet>Checkout</snippet></ROW><ROW><id>17851295</id><snippet>C</snippet></ROW><ROW><id>17851295</id><snippet>wait.until(lambda driver:self.driver.title.lower().startswith('checkout'))
</snippet></ROW><ROW><id>17851467</id><snippet>root</snippet></ROW><ROW><id>17851467</id><snippet>self</snippet></ROW><ROW><id>17851467</id><snippet>Toplevel</snippet></ROW><ROW><id>17851467</id><snippet>Toplevel(root)</snippet></ROW><ROW><id>17851467</id><snippet>Toplevel()</snippet></ROW><ROW><id>17851467</id><snippet>from tkinter import *
import random

player_dice = []

class App:
    def __init__(self, master):
        for i in range(1,6):
            x = random.randint(1,6)
            player_dice.append(x)
            self.label = Label(master, text = x , fg = "red").grid(row =0, column =i+1)
        self.label = Label(master, text = "Dice:" , fg = "red").grid(row =0, column =1)
        self.hi_one = Button(master, text="one", command=self.say_one).grid(row = 1, column = 1)

    def say_one(self):
        print ("1")
        window = Toplevel(root) # self -&gt; root
        self.label = Label(window, text = "you selected one" , fg = "red").grid(row =3, column =3)

root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>17851809</id><snippet>Crontab</snippet></ROW><ROW><id>17851970</id><snippet># create sample data
from datetime import datetime, timedelta
d = datetime.now()
data = [d + timedelta(minutes=i) for i in xrange(100)]

# prepare and group the data
from itertools import groupby

def get_key(d):
    # group by 30 minutes
    k = d + timedelta(minutes=-(d.minute % 30)) 
    return datetime(k.year, k.month, k.day, k.hour, k.minute, 0)

g = groupby(sorted(data), key=get_key)

# print data
for key, items in g:
    print key
    for item in items:
        print '-', item
</snippet></ROW><ROW><id>17851970</id><snippet>def add_missing_empty_frames(g):
    last_key = None
    for key, items in g:
        if last_key:
            while (key-last_key).seconds &gt; 30*60:
                empty_key = last_key + timedelta(minutes=30)
                yield (empty_key, [])
                last_key = empty_key
        yield (key, items)
        last_key = key

for key, items in add_missing_empty_frames(g):
    ...
</snippet></ROW><ROW><id>17851989</id><snippet>*</snippet></ROW><ROW><id>17851989</id><snippet>*</snippet></ROW><ROW><id>17851989</id><snippet>unpack(*(1,2,3))
</snippet></ROW><ROW><id>17851989</id><snippet>(1,2,3)</snippet></ROW><ROW><id>17851989</id><snippet>unpack(1,2,3)
</snippet></ROW><ROW><id>17851989</id><snippet>1</snippet></ROW><ROW><id>17851989</id><snippet>first</snippet></ROW><ROW><id>17851989</id><snippet>2</snippet></ROW><ROW><id>17851989</id><snippet>3</snippet></ROW><ROW><id>17851989</id><snippet>rest</snippet></ROW><ROW><id>17852334</id><snippet>ImportError: No module named zlib
</snippet></ROW><ROW><id>17852496</id><snippet>range()</snippet></ROW><ROW><id>17852496</id><snippet>xrange()</snippet></ROW><ROW><id>17852496</id><snippet>xrange(2, 10)</snippet></ROW><ROW><id>17852496</id><snippet>2</snippet></ROW><ROW><id>17852496</id><snippet>9</snippet></ROW><ROW><id>17852496</id><snippet>n + 1</snippet></ROW><ROW><id>17852496</id><snippet>n</snippet></ROW><ROW><id>17852496</id><snippet>eratosthenes(7)</snippet></ROW><ROW><id>17852496</id><snippet>eratosthenes(11)</snippet></ROW><ROW><id>17852978</id><snippet>import glob
import os

files = glob.glob("D:\\myfolder\\a.b*.c0[589].jpg")
files = [f for f in files if 2001003 &lt;= int(os.path.basename(f)[3:10]) &lt;= 2001050]
</snippet></ROW><ROW><id>17852988</id><snippet>                  Home_team Away_team  Home_score  Away_score
GameID Date                                                  
1      2013-01-23    Team A    Team B           5           1
2      2013-01-23    Team C    Team D           3           3
3      2013-01-30    Team A    Team C           1           2
4      2013-01-30    Team B    Team D           2           3
</snippet></ROW><ROW><id>17852988</id><snippet>start = pd.datetime(2013,1,20)
end = pd.datetime(2013,1,25)

selection = (df.index.get_level_values('Date') &gt;= start) &amp; (df.index.get_level_values('Date') &lt;= end)

df[selection]

                  Home_team Away_team  Home_score  Away_score
GameID Date                                                  
1      2013-01-23    Team A    Team B           5           1
2      2013-01-23    Team C    Team D           3           3
</snippet></ROW><ROW><id>17852988</id><snippet>team = ['Team C']

df[df.apply(lambda x: x.isin(team)).max(axis=1)]
</snippet></ROW><ROW><id>17852988</id><snippet>team = ['Team A','Team C']

df[df.apply(lambda x: x.isin(team)).max(axis=1)]

                  Home_team Away_team  Home_score  Away_score
GameID Date                                                  
1      2013-01-23    Team A    Team B           5           1
2      2013-01-23    Team C    Team D           3           3
3      2013-01-30    Team A    Team C           1           2
</snippet></ROW><ROW><id>17853370</id><snippet>numpy</snippet></ROW><ROW><id>17853370</id><snippet>list</snippet></ROW><ROW><id>17853370</id><snippet>[index]</snippet></ROW><ROW><id>17853370</id><snippet>[1][42]</snippet></ROW><ROW><id>17853370</id><snippet>numpy</snippet></ROW><ROW><id>17853370</id><snippet>[index]</snippet></ROW><ROW><id>17853370</id><snippet>index</snippet></ROW><ROW><id>17853370</id><snippet>array</snippet></ROW><ROW><id>17853370</id><snippet>numpy</snippet></ROW><ROW><id>17854083</id><snippet>elem.click()
</snippet></ROW><ROW><id>17854092</id><snippet>import sys
print(sys.path)
</snippet></ROW><ROW><id>17854476</id><snippet>itertools</snippet></ROW><ROW><id>17854476</id><snippet>consume()</snippet></ROW><ROW><id>17854476</id><snippet>itertools</snippet></ROW><ROW><id>17854476</id><snippet>from itertools import islice
import collections

def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
</snippet></ROW><ROW><id>17854476</id><snippet>with open("file.txt") as file:
    for i, line in enumerate(file, 1):
        ...
        if not i % 2:
            consume(file, 2)  # Skip 2 lines ahead.
</snippet></ROW><ROW><id>17854476</id><snippet>enumerate()</snippet></ROW><ROW><id>17854476</id><snippet>enumerate()</snippet></ROW><ROW><id>17854760</id><snippet>on_text</snippet></ROW><ROW><id>17854760</id><snippet>class NumericInput(TextInput):

    def insert_text(self, substring, from_undo=False):
        if not from_undo:
            try:
                int(substring)
            except ValueError:
                return
        super(NumericInput, self).insert_text(substring, from_undo)
</snippet></ROW><ROW><id>17854760</id><snippet>class CustomInput(TextInput):

    max_chars = NumericProperty(10)

    def insert_text(self, substring, from_undo=False):
        if not from_undo and (len(self.text)+len(substring) &gt; self.max_chars):
            return
        super(CustomInput, self).insert_text(substring, from_undo)
</snippet></ROW><ROW><id>17855068</id><snippet>(age difference)^2 + (diploma difference)^2</snippet></ROW><ROW><id>17855068</id><snippet>age_groups</snippet></ROW><ROW><id>17855068</id><snippet>dip_groups</snippet></ROW><ROW><id>17855068</id><snippet>dict</snippet></ROW><ROW><id>17855068</id><snippet>(20, 25) -&gt; (minage, maxage)</snippet></ROW><ROW><id>17855068</id><snippet>for individual in table1:
    age, diploma = individual
    for age_bucket, dip_bucket in iterate_buckets(age, diploma):
        matches = age_bucket.intersection(dip_bucket)
        if matches:
            match = get_best_match(matches, age, diploma)
            all_matches.append((individual, match))
            remove_individual(age_groups, match)
            remove_individual(dip_groups, match)
</snippet></ROW><ROW><id>17855068</id><snippet>iterate_buckets()</snippet></ROW><ROW><id>17855068</id><snippet>get_best_match()</snippet></ROW><ROW><id>17855068</id><snippet>age_groups = [(18, 20), (21, 23), (24, 26), ... ]
dip_groups = [(1, 2), (3, 4), (5, 6) ... ]
group_combinations = [(ag, dg) for ag in age_groups for dp in dip_groups]

def iter_key(age_grp, dip_group, age, dip):
    age_av = sum(age_grp) / 2.0
    dip_av = sum(dip_grp) / 2.0
    return pow(age - age_av, 2) + pow(dip - dip_av, 2)

def iterate_buckets(age, dip):
    combs = sorted(group_combinations, key=lambda grp: iter_key(*grp, age, dip))
    for c in combs:
        yield c

def match_key(indiv1, indiv2):
    age1, dip1 = indiv1
    age2, dip2 = indiv2
    return pow(age1 - age2, 2) + pow(dip1 - dip2, 2)

def get_best_match(matches, age, dip):
    sorted_matches = sorted(key=match_key, zip(matches, [(age, dip)] * len(matches)))
    return sorted_matches[0]
</snippet></ROW><ROW><id>17855129</id><snippet>from tkinter import *
import random

class App:
    def __init__(self, master):
        self.say_one()

    def say_one(self):
        v = IntVar()
        window = Toplevel(root)

        for i in range(1,11):
            self.label = Radiobutton(
                window, text = i , fg = "red", 
                value = i, variable = v
            ).grid(row =i, column =0)

        # error is occurring in the next line
        self.report = Button(
            window, text="submit", command=lambda: num(v) 
        ).grid(row = 12, column = 0)        

def num(var):
    print(var.get())

root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>17855129</id><snippet>num</snippet></ROW><ROW><id>17855145</id><snippet>python -tt scriptname.py</snippet></ROW><ROW><id>17855413</id><snippet>json</snippet></ROW><ROW><id>17855413</id><snippet>json.loads(inputstring)
</snippet></ROW><ROW><id>17855413</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; print json.loads('"Golden Globe Award for Best Motion Picture \u2013 Drama"')
Golden Globe Award for Best Motion Picture – Drama
</snippet></ROW><ROW><id>17855413</id><snippet>u''</snippet></ROW><ROW><id>17855413</id><snippet>&gt;&gt;&gt; json.loads('"Golden Globe Award for Best Motion Picture \u2013 Drama"')
u'Golden Globe Award for Best Motion Picture \u2013 Drama'
</snippet></ROW><ROW><id>17855719</id><snippet>x is None</snippet></ROW><ROW><id>17855719</id><snippet>Object</snippet></ROW><ROW><id>17855719</id><snippet>x</snippet></ROW><ROW><id>17855719</id><snippet>None</snippet></ROW><ROW><id>17855844</id><snippet>input</snippet></ROW><ROW><id>17855844</id><snippet>input</snippet></ROW><ROW><id>17855844</id><snippet>var1 = [ '1', '2', '3', '4' , '5']
x = int(input('Enter the number of sites'))
print('The values are', var1[1:x])
</snippet></ROW><ROW><id>17855844</id><snippet>to_print = ', '.join(var[1: x]))
print('The values are', to_print)
</snippet></ROW><ROW><id>17855916</id><snippet>class One(ttk.Frame):
    def __init__(self, master, other_class):
        self.other_class = other_class
        ...
        self.lbl.bind('&lt;&lt;ListboxSelect&gt;&gt;`, self.other_class.lb2_lookup)

two = Two(...)
one = One(..., other_class = two)
</snippet></ROW><ROW><id>17855916</id><snippet>class One(...):
    ...
    def set_target(self, other_class):
        self.other_class = other_class
class Two(...):
    ...
one = One(...)
two = Two(...)
one.set_target(two)
</snippet></ROW><ROW><id>17855916</id><snippet>class One(...):
    ...
    self.lb1.bind('&lt;&lt;ListboxSelect&gt;&gt;', self.other_class.lookup)
</snippet></ROW><ROW><id>17855916</id><snippet>Two</snippet></ROW><ROW><id>17855916</id><snippet>lookup</snippet></ROW><ROW><id>17855916</id><snippet>lookup</snippet></ROW><ROW><id>17855916</id><snippet>lookup</snippet></ROW><ROW><id>17855916</id><snippet>lb2</snippet></ROW><ROW><id>17855916</id><snippet>foobar</snippet></ROW><ROW><id>17855916</id><snippet>lookup</snippet></ROW><ROW><id>17855916</id><snippet>One</snippet></ROW><ROW><id>17855916</id><snippet>Two</snippet></ROW><ROW><id>17855984</id><snippet>ids = set(B)
L = [obj for obj in A if obj.id in ids]
</snippet></ROW><ROW><id>17855984</id><snippet>item in a_set</snippet></ROW><ROW><id>17855984</id><snippet>a_set</snippet></ROW><ROW><id>17855984</id><snippet>item in a_list</snippet></ROW><ROW><id>17855984</id><snippet>a_list</snippet></ROW><ROW><id>17856076</id><snippet>jinja_environment = jinja2.Environment(
    loader=jinja2.FileSystemLoader('%s/templates/' % os.path.dirname(__file__))
)
</snippet></ROW><ROW><id>17856212</id><snippet>values()</snippet></ROW><ROW><id>17856212</id><snippet>&gt;&gt;&gt; d = {'day': 1,'custtypeA_nondp': 50.99574423351457,'delfeeA_dp_cost': 0.45111124745572373}
&gt;&gt;&gt; d.values()
[0.45111124745572373, 1, 50.995744233514571]
</snippet></ROW><ROW><id>17856212</id><snippet>keys()</snippet></ROW><ROW><id>17856212</id><snippet>&gt;&gt;&gt; d.keys()
['delfeeA_dp_cost', 'day', 'custtypeA_nondp']
</snippet></ROW><ROW><id>17856212</id><snippet>custtypeA_nondp</snippet></ROW><ROW><id>17856212</id><snippet>vals = list(x['custtypeA_nondp'] for x in s)
</snippet></ROW><ROW><id>17856303</id><snippet>dummytuple = collision_list[numbers[tiles[int(tile)]]]
collision_list[numbers[tiles[int(tile)]]] = dummytuple, tiles[int(tile)].rect
</snippet></ROW><ROW><id>17856303</id><snippet>dummytuple = collision_list[numbers[tiles[int(tile)]]]
collision_list[numbers[tiles[int(tile)]]] = dummytuple + (tiles[int(tile)].rect,)
</snippet></ROW><ROW><id>17856303</id><snippet>if numbers[tiles[int(tile)]] not in collision_list:
    collision_list[numbers[tiles[int(tile)]]] = (tiles[int(tile)].rect,)
else:
    dummytuple = collision_list[numbers[tiles[int(tile)]]]
    collision_list[numbers[tiles[int(tile)]]] = dummytuple + (tiles[int(tile)].rect,)
</snippet></ROW><ROW><id>17856303</id><snippet>if numbers[tiles[int(tile)]] not in collision_list:
    collision_list[numbers[tiles[int(tile)]]] = [tiles[int(tile)].rect]
else:
    collision_list[numbers[tiles[int(tile)]]].append(tiles[int(tile)].rect)
</snippet></ROW><ROW><id>17856303</id><snippet>collision_list</snippet></ROW><ROW><id>17856303</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17856303</id><snippet>from collections import defaultdict

collision_list = defaultdict(list)

# ....

# No `if numbers[tiles[int(tile)]] not in collision_list` needed
collision_list[numbers[tiles[int(tile)]]].append(tiles[int(tile)].rect)
</snippet></ROW><ROW><id>17856433</id><snippet>template = Template(
            "{{ name }} ;"
            "{{ ' 'if age }}{{age if age }}{{' 'if age}};"
            "{{ ' ' if email}};{{ email if email}}{{ ' ' if email}};")

for item in mylist:
    people_tag =template.render(
                    name= item['name'],
                    age = item.get('age'),
                    email= item.get('email'))
</snippet></ROW><ROW><id>17856617</id><snippet>ImageDraw.text</snippet></ROW><ROW><id>17856617</id><snippet>img = Image.new('RGB', (200, 100))
d = ImageDraw.Draw(img)
d.text((20, 20), 'Hello', fill=(255, 0, 0))
</snippet></ROW><ROW><id>17856617</id><snippet>text_width, text_height = d.textsize('Hello')
</snippet></ROW><ROW><id>17856617</id><snippet>img = Image.new('RGB', (200, 100), (255, 255, 255))
</snippet></ROW><ROW><id>17856617</id><snippet>Image.save</snippet></ROW><ROW><id>17856617</id><snippet>import cStringIO
s = cStringIO.StringIO()
img.save(s, 'png')
in_memory_file = s.getvalue()
</snippet></ROW><ROW><id>17856617</id><snippet>raw_img_data = img.tostring()
</snippet></ROW><ROW><id>17856633</id><snippet>Button(fen1,text='Done', command=lambda : get_payoff(entr)).grid()
</snippet></ROW><ROW><id>17856633</id><snippet># a is a string variable
a = StrVar()
# which is linked to the Entry "test"
test = Entry(window, textvariable = a)
# get the variable in Entry "test"
b = test.get()
# print on screen the result
print b
</snippet></ROW><ROW><id>17856814</id><snippet>ll &lt;- list( c( list(c(12,14)),4) , c(list(c(2,1)),5),c(list(c(42,11)),13))

str( ll )
List of 3
 $ :List of 2
  ..$ : num [1:2] 12 14
  ..$ : num 4
 $ :List of 2
  ..$ : num [1:2] 2 1
  ..$ : num 5
 $ :List of 2
  ..$ : num [1:2] 42 11
  ..$ : num 13
</snippet></ROW><ROW><id>17856814</id><snippet>[[</snippet></ROW><ROW><id>17856814</id><snippet>#  Second list element of first top-level list element
ll[[1]][[2]]
#[1] 4

#  First list element of third top-level list element
ll[[3]][[1]]
#[1] 42 11
</snippet></ROW><ROW><id>17857046</id><snippet>Rect.collidelist</snippet></ROW><ROW><id>17857046</id><snippet>from pygame import Rect

class QuadTree(object):
    """An implementation of a quad-tree.

    This QuadTree started life as a version of [1] but found a life of its own
    when I realised it wasn't doing what I needed. It is intended for static
    geometry, ie, items such as the landscape that don't move.

    This implementation inserts items at the current level if they overlap all
    4 sub-quadrants, otherwise it inserts them recursively into the one or two
    sub-quadrants that they overlap.

    Items being stored in the tree must be a pygame.Rect or have have a
    .rect (pygame.Rect) attribute that is a pygame.Rect
        ...and they must be hashable.

    Acknowledgements:
    [1] http://mu.arete.cc/pcr/syntax/quadtree/1/quadtree.py
    """

    def __init__(self, items, depth=8, bounding_rect=None):
        """Creates a quad-tree.

        @param items:
            A sequence of items to store in the quad-tree. Note that these
            items must be a pygame.Rect or have a .rect attribute.

        @param depth:
            The maximum recursion depth.

        @param bounding_rect:
            The bounding rectangle of all of the items in the quad-tree. For
            internal use only.
        """

        # The sub-quadrants are empty to start with.
        self.nw = self.ne = self.se = self.sw = None

        # If we've reached the maximum depth then insert all items into this
        # quadrant.
        depth -= 1
        if depth == 0 or not items:
            self.items = items
            return

        # Find this quadrant's centre.
        if bounding_rect:
            bounding_rect = Rect( bounding_rect )
        else:
            # If there isn't a bounding rect, then calculate it from the items.
            bounding_rect = Rect( items[0] )
            for item in items[1:]:
                bounding_rect.union_ip( item )
        cx = self.cx = bounding_rect.centerx
        cy = self.cy = bounding_rect.centery

        self.items = []
        nw_items = []
        ne_items = []
        se_items = []
        sw_items = []

        for item in items:
            # Which of the sub-quadrants does the item overlap?
            in_nw = item.rect.left &lt;= cx and item.rect.top &lt;= cy
            in_sw = item.rect.left &lt;= cx and item.rect.bottom &gt;= cy
            in_ne = item.rect.right &gt;= cx and item.rect.top &lt;= cy
            in_se = item.rect.right &gt;= cx and item.rect.bottom &gt;= cy

            # If it overlaps all 4 quadrants then insert it at the current
            # depth, otherwise append it to a list to be inserted under every
            # quadrant that it overlaps.
            if in_nw and in_ne and in_se and in_sw:
                self.items.append(item)
            else:
                if in_nw: nw_items.append(item)
                if in_ne: ne_items.append(item)
                if in_se: se_items.append(item)
                if in_sw: sw_items.append(item)

        # Create the sub-quadrants, recursively.
        if nw_items:
            self.nw = QuadTree(nw_items, depth, (bounding_rect.left, bounding_rect.top, cx, cy))
        if ne_items:
            self.ne = QuadTree(ne_items, depth, (cx, bounding_rect.top, bounding_rect.right, cy))
        if se_items:
            self.se = QuadTree(se_items, depth, (cx, cy, bounding_rect.right, bounding_rect.bottom))
        if sw_items:
            self.sw = QuadTree(sw_items, depth, (bounding_rect.left, cy, cx, bounding_rect.bottom))


    def hit(self, rect):
        """Returns the items that overlap a bounding rectangle.

        Returns the set of all items in the quad-tree that overlap with a
        bounding rectangle.

        @param rect:
            The bounding rectangle being tested against the quad-tree. This
            must possess left, top, right and bottom attributes.
        """

        # Find the hits at the current level.
        hits = set( [ self.items[n] for n in rect.collidelistall( self.items ) ] )

        # Recursively check the lower quadrants.
        if self.nw and rect.left &lt;= self.cx and rect.top &lt;= self.cy:
            hits |= self.nw.hit(rect)
        if self.sw and rect.left &lt;= self.cx and rect.bottom &gt;= self.cy:
            hits |= self.sw.hit(rect)
        if self.ne and rect.right &gt;= self.cx and rect.top &lt;= self.cy:
            hits |= self.ne.hit(rect)
        if self.se and rect.right &gt;= self.cx and rect.bottom &gt;= self.cy:
            hits |= self.se.hit(rect)

        return hits
</snippet></ROW><ROW><id>17857243</id><snippet>daemon</snippet></ROW><ROW><id>17857243</id><snippet>FirstThread</snippet></ROW><ROW><id>17857243</id><snippet>SecondThread</snippet></ROW><ROW><id>17857340</id><snippet>import re
websites = re.findall(r'(\S+[.]com)', text)
# ['maangobar22.com', 'myapplesite22.com', 'berrymine22.com']
</snippet></ROW><ROW><id>17857427</id><snippet># -*- coding: cp1252 -*-
</snippet></ROW><ROW><id>17857427</id><snippet>#!python3</snippet></ROW><ROW><id>17857427</id><snippet>print</snippet></ROW><ROW><id>17857427</id><snippet>chcp</snippet></ROW><ROW><id>17857427</id><snippet>cmd</snippet></ROW><ROW><id>17857427</id><snippet>main()</snippet></ROW><ROW><id>17857427</id><snippet>print(ascii(fileList))
</snippet></ROW><ROW><id>17857489</id><snippet>public class FWrapper&lt;TChild, TResult&gt;{

    private int childCount;
    private string name;
    private Func&lt;TChild, TResult&gt; function;

    public Func&lt;TChild, TResult&gt; Function { get { return function; } }

    public FWrapper(Func&lt;TChild, TResult&gt; Function, int ChildCount, string Name){
        this.childCount = ChildCount;
        this.name = Name;
        this.function = Function;
   }
}

public class Node&lt;TChild, TResult&gt;{

    private FWrapper&lt;TChild, TResult&gt; fw;
    private IEnumerable&lt;TChild&gt; children;

    public Node(FWrapper&lt;TChild, TResult&gt; FW, IEnumerable&lt;TChild&gt; Children){
        this.fw = FW;
        this.children = Children;
    }

    public IEnumerable&lt;TResult&gt; Evaluate(){

        var results = new List&lt;TResult&gt;();

        foreach(var c in children){
            results.Add(fw.Function(c));
        }

        return results;
    }
}
</snippet></ROW><ROW><id>17857489</id><snippet>//Generic function that takes an int and returns a string
var func = new Func&lt;int, string&gt;(childInt =&gt; {
    var str = "'" + childInt.ToString() + "'";
    return str;
});

var fw = new FWrapper&lt;int, string&gt;(func, 10, "Foobar");
var children = new List&lt;int&gt;(){ 1,2,3,4,5,6,7,8,9,10 };

var node = new Node&lt;int, string&gt;(fw, children);
var results = node.Evaluate();

foreach(var r in results){
    Console.WriteLine(r);
}

//'1'
//'2'
//..
//..
//'9'
//'10'
</snippet></ROW><ROW><id>17857491</id><snippet># Rotates the model 90 degrees around its own up axis
model.setH(model, 90)
</snippet></ROW><ROW><id>17857491</id><snippet>pivotNode = render.attachNewNode("environ-pivot")
pivotNode.setPos(...) # Set location of pivot point
environ.wrtReparentTo(pivotNode) # Preserve absolute position
pivotNode.setHpr(...) # Rotates environ around pivot
</snippet></ROW><ROW><id>17857650</id><snippet>dict</snippet></ROW><ROW><id>17857650</id><snippet>set</snippet></ROW><ROW><id>17857736</id><snippet>re.findall(pattern, string, flags=0)</snippet></ROW><ROW><id>17857736</id><snippet>affiliates = re.findall('var affiliates = (.*?);\s*$', result.read(), re.M)
</snippet></ROW><ROW><id>17857766</id><snippet>create_window</snippet></ROW><ROW><id>17857766</id><snippet>pack</snippet></ROW><ROW><id>17857766</id><snippet>place</snippet></ROW><ROW><id>17857766</id><snippet>grid</snippet></ROW><ROW><id>17858114</id><snippet>psutil</snippet></ROW><ROW><id>17858114</id><snippet>p = psutil.Process(pid)
p.terminate()  #or p.kill()
</snippet></ROW><ROW><id>17858114</id><snippet>os</snippet></ROW><ROW><id>17858114</id><snippet>import os
import signal

os.kill(pid, signal.SIGQUIT) #or signal.SIGKILL 
</snippet></ROW><ROW><id>17858114</id><snippet>python StripCore.py</snippet></ROW><ROW><id>17858114</id><snippet>psutil</snippet></ROW><ROW><id>17858114</id><snippet>import psutil
from subprocess import Popen

for process in psutil.process_iter():
    if process.cmdline == ['python', 'StripCore.py']:
        print('Process found. Terminating it.')
        process.terminate()
        break
else:
    print('Process not found: starting it.')
    Popen(['python', 'StripCore.py'])
</snippet></ROW><ROW><id>17858114</id><snippet>$python test_strip.py   #test_strip.py contains the code above
Process not found: starting it.
$python test_strip.py 
Process found. Terminating it.
$python test_strip.py 
Process not found: starting it.
$killall python
$python test_strip.py 
Process not found: starting it.
$python test_strip.py 
Process found. Terminating it.
$python test_strip.py 
Process not found: starting it.
</snippet></ROW><ROW><id>17858161</id><snippet>plt.xlim(x_low, x_high)</snippet></ROW><ROW><id>17858161</id><snippet>ax = plt.subplot(111) # Create axis instance
ax.scatter(x, y1, color='k') # Same as you have above but use ax instead of plt
ax.set_xlim(0.0, ax.get_xlim()[1])
</snippet></ROW><ROW><id>17858161</id><snippet>ax.get_xlim()</snippet></ROW><ROW><id>17858161</id><snippet>(x_low, x_high)</snippet></ROW><ROW><id>17858161</id><snippet>[1]</snippet></ROW><ROW><id>17858288</id><snippet>and</snippet></ROW><ROW><id>17858288</id><snippet>17</snippet></ROW><ROW><id>17858288</id><snippet>stringList</snippet></ROW><ROW><id>17858288</id><snippet>and</snippet></ROW><ROW><id>17858288</id><snippet>&gt;&gt;&gt; "M.txt" and "17"
'17'
</snippet></ROW><ROW><id>17858288</id><snippet>True</snippet></ROW><ROW><id>17858288</id><snippet>M.txt</snippet></ROW><ROW><id>17858288</id><snippet>True</snippet></ROW><ROW><id>17858288</id><snippet>17</snippet></ROW><ROW><id>17858288</id><snippet>stringList</snippet></ROW><ROW><id>17858288</id><snippet>and</snippet></ROW><ROW><id>17858288</id><snippet>True</snippet></ROW><ROW><id>17858288</id><snippet>False</snippet></ROW><ROW><id>17858288</id><snippet>False</snippet></ROW><ROW><id>17858288</id><snippet>True</snippet></ROW><ROW><id>17858288</id><snippet>if "M.txt" in stringList and "17" in stringList:
    #...
</snippet></ROW><ROW><id>17858288</id><snippet>all()</snippet></ROW><ROW><id>17858288</id><snippet>if all(elem in stringList for elem in ["M.txt", "17"]):
    #...
</snippet></ROW><ROW><id>17858764</id><snippet>%for item in rows['orders']:
  &lt;td&gt;{{item}}&lt;/td&gt;
%end
</snippet></ROW><ROW><id>17858764</id><snippet>%if backorder:
  &lt;span&gt;This item is frequently on backorder&lt;/span&gt;
%end
</snippet></ROW><ROW><id>17858779</id><snippet>try</snippet></ROW><ROW><id>17858779</id><snippet>except</snippet></ROW><ROW><id>17858779</id><snippet>def add_email_to_mailing_list(request):
    if request.POST['email'] and len(request.POST['email']) &gt; 4:
        email_address = request.POST['email']
        fname = request.POST['fname']
        lname = request.POST['lname']
        #If two next lines are failure return to '/mailing_list_failure/'
        try:
            list = utils.get_connection().get_list_by_id(MAILCHIMP_LIST_ID)
            list.subscribe(email_address, {'EMAIL': email_address, 'FNAME': fname, 'LNAME': lname})
            return HttpResponseRedirect('/mailing_list_success/')
        except:
            return HttpResponseRedirect('/mailing_list_failure/')
</snippet></ROW><ROW><id>17858824</id><snippet>cKDTree</snippet></ROW><ROW><id>17858824</id><snippet>import numpy as np
from scipy.spatial import cKDTree

n_voronoi, n_test = 100, 1000

voronoi_points = np.random.rand(n_voronoi, 2)
test_points = np.random.rand(n_test, 2)

voronoi_kdtree = cKDTree(voronoi_points)

test_point_dist, test_point_regions = voronoi_kdtree.query(test_points, k=1)
</snippet></ROW><ROW><id>17858824</id><snippet>test_point_regions</snippet></ROW><ROW><id>17858824</id><snippet>(n_test, 1)</snippet></ROW><ROW><id>17858824</id><snippet>voronoi_points</snippet></ROW><ROW><id>17858824</id><snippet>test_points</snippet></ROW><ROW><id>17858904</id><snippet>array</snippet></ROW><ROW><id>17858904</id><snippet>dict</snippet></ROW><ROW><id>17858904</id><snippet>result = {}
last_indentation = 0
for l in f.xreadlines():
   (c, i) = parse(l) # create parse to return character and indentation
   if i==last_indentation:
   # sibling to last
   elif i&gt;last_indentation:
   # child to last
   else:
   # end of children, back to a higher level
</snippet></ROW><ROW><id>17858904</id><snippet>result = {}
parents = {}
last_indentation = 1 # start with 1 so 0 is the root of tree
parents[0] = result
for l in f.xreadlines():
   (c, i) = parse(l) # create parse to return character and indentation
   if i==last_indentation:
       new_el = {}
       parents[i-1][c] = new_el
       parents[i] = new_el
   elif i&gt;last_indentation:
   # child to last
   else:
   # end of children, back to a higher level
</snippet></ROW><ROW><id>17858953</id><snippet>ValueError</snippet></ROW><ROW><id>17858953</id><snippet>&gt;&gt;&gt; foo = 3
&gt;&gt;&gt; if foo == 1:
    pass
elif foo == 2:
    pass
else:
    raise ValueError('foo is unexpected value: %s' % foo)


Traceback (most recent call last):
  File "&lt;pyshell#41&gt;", line 6, in &lt;module&gt;
    raise ValueError('foo is unexpected value: %s' % foo)
ValueError: foo is unexpected value: 3
</snippet></ROW><ROW><id>17858962</id><snippet>image = choice(enemyArray)
</snippet></ROW><ROW><id>17858962</id><snippet>self.image = choice(enemyArray)
</snippet></ROW><ROW><id>17858962</id><snippet> for i in enemyArray:
     image = choice(enemyArray)
</snippet></ROW><ROW><id>17858962</id><snippet>image = choice(enemyArray)
</snippet></ROW><ROW><id>17859166</id><snippet>traceback</snippet></ROW><ROW><id>17859166</id><snippet>traceback</snippet></ROW><ROW><id>17859221</id><snippet>print "Warning: Url load error " + str(e) + " for url " + url
</snippet></ROW><ROW><id>17859221</id><snippet>print('Warning: Url load error {} for url {}'.format(e, url))
</snippet></ROW><ROW><id>17859301</id><snippet>.get(attrName1=attr1)
</snippet></ROW><ROW><id>17859301</id><snippet>attrName1</snippet></ROW><ROW><id>17859301</id><snippet>.get(**{attrName1: attr1})
</snippet></ROW><ROW><id>17859393</id><snippet>with open('Koala.jpg', 'r') as f:</snippet></ROW><ROW><id>17859393</id><snippet>with open('Koala.jpg', 'rb') as f:</snippet></ROW><ROW><id>17859393</id><snippet>loadFromData</snippet></ROW><ROW><id>17859526</id><snippet>ask</snippet></ROW><ROW><id>17859526</id><snippet>if __name__ == '__main__': 
    p1 = Process(target = writeFiles)   
    p1.start()
    ask()
</snippet></ROW><ROW><id>17859526</id><snippet>import threading
import multiprocessing as mp
import sys

def ask(stdin):
    print 'Your name? ',
    a = stdin.readline().strip()
    if a == 'Tester':
        print 'Hello'
    else:
        print 'Bye'   
    stdin.close()

def writeFiles():
    pass

if __name__ == '__main__': 
    p1 = mp.Process(target=writeFiles)   
    p1.start()
    t1 = threading.Thread(target=ask, args=(sys.stdin,))
    t1.start()
    p1.join()
    t1.join()
</snippet></ROW><ROW><id>17859526</id><snippet>os.dup</snippet></ROW><ROW><id>17859526</id><snippet>import multiprocessing as mp
import sys
import os

def ask(stdin):
    print 'Your name? ',
    a = stdin.readline().strip()
    if a == 'Tester':
        print 'Hello'
    else:
        print 'Bye'   
    stdin.close()

def writeFiles():
    pass

newstdin = os.fdopen(os.dup(sys.stdin.fileno()))

if __name__ == '__main__': 
    p1 = mp.Process(target=writeFiles)   
    p1.start()
    p2 = mp.Process(target=ask, args=(newstdin,))
    p2.start()
    p1.join()
    p2.join()
</snippet></ROW><ROW><id>17859633</id><snippet>distribute_setup.yp</snippet></ROW><ROW><id>17859930</id><snippet>file.readlines</snippet></ROW><ROW><id>17859930</id><snippet>import os
with open('input.txt') as f1, open('output.txt', 'w') as f2,\
                                                  open('temp_file','w') as f3:
    lines = []       # store lines between two `&gt;` in this list
    for line in f1:
        if line.startswith('&gt;'):
            if lines:
                f3.writelines(lines)
                lines = [line]
            else:
                lines.append(line)
        elif line.rstrip('\n') == 'Sequence unavailable':
            f2.writelines(lines + [line])
            lines = []
        else:
            lines.append(line)

    f3.writelines(lines)

os.remove('input.txt')
os.rename('temp_file', 'input.txt')
</snippet></ROW><ROW><id>17859930</id><snippet>$ cat input.txt
&gt;E8|E2|E9D
Football is a good game
Its good for health
you can play it every day
&gt;E8|E2|E10D
Sequence unavailable
&gt;E8|E2|EKB
Cricket

$ python so.py

$ cat input.txt
&gt;E8|E2|E9D
Football is a good game
Its good for health
you can play it every day
&gt;E8|E2|EKB
Cricket
$ cat output.txt
&gt;E8|E2|E10D
Sequence unavailable
</snippet></ROW><ROW><id>17859930</id><snippet>tempfile</snippet></ROW><ROW><id>17859930</id><snippet>import fileinput
with open('output.txt', 'w') as f2:
    lines = []
    for line in fileinput.input('input.txt', inplace = True):
        if line.startswith('&gt;'):
             if lines:
                 print "".join(lines),
                 lines = [line]
             else:
                 lines.append(line)
        elif line.rstrip('\n') == 'Sequence unavailable':
             f2.writelines(lines + [line])
             lines = []
        else:
             lines.append(line)

    with open('input.txt','a') as f:
        f.writelines(lines)
</snippet></ROW><ROW><id>17860065</id><snippet>import Tkinter as tk

root = tk.Tk()

entry = tk.Entry(root, width=40)
entry.pack()
# Put text in the entrybox with the insert method.
# The 0 means "at the begining".
entry.insert(0, 'Please set the path of the file you want...')

text = tk.Text(root, width=45, height=5)
text.pack()
# Textboxes also have an insert.
# However, since they have a height and a width, you need to
# put 0.0 to spcify the beginning.  That is basically the same as
# x=0, y=0.
text.insert(0.0, 'Please set the path of the file you want...')

root.mainloop()
</snippet></ROW><ROW><id>17860379</id><snippet>&gt;&gt;&gt; my_list = [['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K'], ['T=-40F A=10K','T=-15F A=10K','T=59F A=10K','T=98F A=10K','T=120F A=10K']]
&gt;&gt;&gt;
&gt;&gt;&gt; [y for x in my_list for y in x]
['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K', 'T=-40F A=10K', 'T=-15F A=10K', 'T=59F A=10K', 'T=98F A=10K', 'T=120F A=10K']
</snippet></ROW><ROW><id>17860379</id><snippet>list</snippet></ROW><ROW><id>17860529</id><snippet>capital = {
    'UK': 'London',
    'Austria': 'Vienna'
}

if ans == capital[country]:
    # it's correct
</snippet></ROW><ROW><id>17860529</id><snippet>import random    

number = int(raw_input())
countries = random.sample(capital, number)
for country in countries:
    guess = raw_input('What is the capital of {}?'.format(country))
    if guess == capital[country]:
        print 'Correct!'
</snippet></ROW><ROW><id>17860686</id><snippet>sys.set_trace()</snippet></ROW><ROW><id>17860686</id><snippet>timeit</snippet></ROW><ROW><id>17860987</id><snippet>try:
    try:
        output_var = some_magical_function()
    except IntegrityError as zde:
        integrity_error_handling()
        raise
except ALLExceptions as ae: # all exceptions INCLUDING the IntregityError
    shared_exception_handling_function(ae) # could be error reporting
</snippet></ROW><ROW><id>17860987</id><snippet>raise</snippet></ROW><ROW><id>17860987</id><snippet>IntegrityError</snippet></ROW><ROW><id>17860987</id><snippet>AllExceptions</snippet></ROW><ROW><id>17860987</id><snippet>try:
    output_var = some_magical_function()
except ALLExceptions as ae: # all exceptions INCLUDING the IntregityError
    if isinstance(ae, IntegrityError):
        integrity_error_handling()
    shared_exception_handling_function(ae) # could be error reporting
</snippet></ROW><ROW><id>17861162</id><snippet>python.app</snippet></ROW><ROW><id>17861162</id><snippet>pythonw</snippet></ROW><ROW><id>17861162</id><snippet>python</snippet></ROW><ROW><id>17861162</id><snippet>pyqtgraph</snippet></ROW><ROW><id>17861162</id><snippet>#!/path/to/anaconda/bin/python.app/Contents/MacOS/python</snippet></ROW><ROW><id>17861337</id><snippet>redirect</snippet></ROW><ROW><id>17861337</id><snippet>redirect_to</snippet></ROW><ROW><id>17861337</id><snippet>return redirect('/auth/login')
</snippet></ROW><ROW><id>17861853</id><snippet>MySQLdb.cursors.Cursor</snippet></ROW><ROW><id>17861853</id><snippet>cursor.execute()</snippet></ROW><ROW><id>17861853</id><snippet>for row in cursor:
</snippet></ROW><ROW><id>17861853</id><snippet>self._rows</snippet></ROW><ROW><id>17861853</id><snippet>import MySQLdb
import MySQLdb.cursors as cursors

conn = MySQLdb.connect(..., cursorclass=cursors.SSCursor)
</snippet></ROW><ROW><id>17861853</id><snippet>cursor = conn.cursor()
cursor.execute('SELECT * FROM HUGETABLE')
for row in cursor:
    print(row)
</snippet></ROW><ROW><id>17861853</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>17861853</id><snippet>list(cursor)</snippet></ROW><ROW><id>17861870</id><snippet>sum(v[1] for d in myList for v in d.itervalues())
</snippet></ROW><ROW><id>17861870</id><snippet>d.itervalues()</snippet></ROW><ROW><id>17861870</id><snippet>d.values()</snippet></ROW><ROW><id>17861870</id><snippet>&gt;&gt;&gt; sum(v[1] for d in myList for v in d.itervalues())
100
</snippet></ROW><ROW><id>17862059</id><snippet>from bs4 import BeautifulSoup

import urllib2
html = urllib2.urlopen ("http://www.beppegrillo.it")
prova = html.read()
soup = BeautifulSoup(prova.replace('ISO-8859-1', 'utf-8'))
print soup
</snippet></ROW><ROW><id>17862111</id><snippet>string</snippet></ROW><ROW><id>17862111</id><snippet>&gt;&gt;&gt; string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.digits
'0123456789'
&gt;&gt;&gt; string.punctuation
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17862111</id><snippet>[\u4e00-\u9fa5]</snippet></ROW><ROW><id>17862111</id><snippet>&gt;&gt;&gt; s = u"En g茅n茅ral un tr猫s bon hotel La terrasse du bar pr猫s du lobby"
&gt;&gt;&gt; s
u'En g\u8305n\u8305ral un tr\u732bs bon hotel La terrasse du bar pr\u732bs du lobby'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(ur'[\u4e00-\u9fa5]', '', s)
u'En gnral un trs bon hotel La terrasse du bar prs du lobby'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17862336</id><snippet>def decorator_factory(value):
    def msg_decorator(f):
        def inner_dec(*args, **kwargs):
            g = f.func_globals
            sentinel = object()

            oldvalue = g.get('var', sentinel)
            g['var'] = value

            try:
                res = f(*args, **kwargs)
            finally:
                if oldvalue is sentinel:
                    del g['var']
                else:
                    g['var'] = oldvalue

            return res
        return inner_dec
    return msg_decorator
</snippet></ROW><ROW><id>17862336</id><snippet>f.func_globals</snippet></ROW><ROW><id>17862336</id><snippet>var</snippet></ROW><ROW><id>17862336</id><snippet>&gt;&gt;&gt; c = 'Message'
&gt;&gt;&gt; @decorator_factory(c)
... def msg_printer():
...     print var
... 
&gt;&gt;&gt; msg_printer()
Message
&gt;&gt;&gt; 'var' in globals()
False
</snippet></ROW><ROW><id>17862336</id><snippet>var</snippet></ROW><ROW><id>17862387</id><snippet>import Tkinter as tk
import time

def Draw():
    global text

    frame=tk.Frame(root,width=100,height=100,relief='solid',bd=1)
    frame.place(x=10,y=10)
    text=tk.Label(frame,text='HELLO')
    text.pack()

def Refresher():
    global text
    text.configure(text=time.asctime())
    root.after(1000, Refresher) # every second...

root=tk.Tk()
Draw()
Refresher()
root.mainloop()
</snippet></ROW><ROW><id>17862387</id><snippet>after</snippet></ROW><ROW><id>17862387</id><snippet>after</snippet></ROW><ROW><id>17862456</id><snippet>from selenium import webdriver

webdriver.DesiredCapabilities.PHANTOMJS['phantomjs.page.customHeaders.Accept-Language'] = 'ru-RU'
driver = webdriver.PhantomJS()
driver.get('http://httpbin.org/headers')
print(driver.page_source)
</snippet></ROW><ROW><id>17862456</id><snippet>...
{
  "headers": {
    "Connection": "close",
    "Host": "httpbin.org",
    "Accept-Encoding": "gzip",
    "Accept-Language": "ru-RU",
    "User-Agent": "Mozilla/5.0 (Unknown; Linux i686) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.10.0 (development) Safari/534.34",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
  }
 ...
</snippet></ROW><ROW><id>17862686</id><snippet>dictionary = {}
file_data.readline()   # skip the first line         
for key in file_data:
    key = key.replace('"', '').strip()
    k = key.split(",")
    dictionary[k[0]] = k[1]
</snippet></ROW><ROW><id>17862728</id><snippet>&gt;&gt;&gt; w = "Fa1/1                           connected    42         a-full  a-100 10/100BaseTX"
&gt;&gt;&gt; firstList = ['Port', 'Status', 'VLAN', 'Duplex', 'Speed', 'Type']
&gt;&gt;&gt; testList = zip(firstList, w.split())
&gt;&gt;&gt; for a, b in testList:
        print a, b


Port Fa1/1
Status connected
VLAN 42
Duplex a-full
Speed a-100
Type 10/100BaseTX
</snippet></ROW><ROW><id>17862807</id><snippet>raw_input</snippet></ROW><ROW><id>17862809</id><snippet>+--docProps
|  +  app.xml
|  \  core.xml
+  res.log
+--word //this folder contains most of the files that control the content of the document
|  +  document.xml //Is the actual content of the document
|  +  endnotes.xml
|  +  fontTable.xml
|  +  footer1.xml //Containst the elements in the footer of the document
|  +  footnotes.xml
|  +--media //This folder contains all images embedded in the word
|  |  \  image1.jpeg
|  +  settings.xml
|  +  styles.xml
|  +  stylesWithEffects.xml
|  +--theme
|  |  \  theme1.xml
|  +  webSettings.xml
|  \--_rels
|     \  document.xml.rels //this document tells word where the images are situated
+  [Content_Types].xml
\--_rels
   \  .rels
</snippet></ROW><ROW><id>17862809</id><snippet>def opendocx(file):
    '''Open a docx file, return a document XML tree'''
    mydoc = zipfile.ZipFile(file)
    xmlcontent = mydoc.read('word/document.xml')
    document = etree.fromstring(xmlcontent)
    return document
</snippet></ROW><ROW><id>17863024</id><snippet>datetime.date</snippet></ROW><ROW><id>17863052</id><snippet>$ free -m</snippet></ROW><ROW><id>17863147</id><snippet>textwrap</snippet></ROW><ROW><id>17863147</id><snippet>from textwrap import wrap

wrapped_lines = wrap(record, 100)
indented_lines = ('\n' + ' ' * 11).join(wrapped_lines)
</snippet></ROW><ROW><id>17863147</id><snippet>record</snippet></ROW><ROW><id>17863245</id><snippet>==</snippet></ROW><ROW><id>17863245</id><snippet>if lineA == lineOne:
    print 'they match!'
</snippet></ROW><ROW><id>17863245</id><snippet>lines = [lineOne, lineTwo, lineThree, ..., lineFifty]
</snippet></ROW><ROW><id>17863245</id><snippet>matches = [line for line in lines if line == lineA]
</snippet></ROW><ROW><id>17863245</id><snippet>O(n)</snippet></ROW><ROW><id>17863245</id><snippet>bisect</snippet></ROW><ROW><id>17863245</id><snippet>O(log n)</snippet></ROW><ROW><id>17863245</id><snippet>lineB, lineC, lineZ</snippet></ROW><ROW><id>17863245</id><snippet>lines</snippet></ROW><ROW><id>17863245</id><snippet>O(n * log n)</snippet></ROW><ROW><id>17863440</id><snippet>if (char_loc &gt;= 11 and char_loc &lt;= 15):
if (char_loc &gt;= 21 and char_loc &lt;= 25):
if (char_loc &gt;= 31 and char_loc &lt;= 35):
if (char_loc &gt;= 41 and char_loc &lt;= 45):
if (char_loc &gt;= 51 and char_loc &lt;= 55):
else:
</snippet></ROW><ROW><id>17863440</id><snippet>if (char_loc &gt;= 11 and char_loc &lt;= 15):
elif (char_loc &gt;= 21 and char_loc &lt;= 25):
elif (char_loc &gt;= 31 and char_loc &lt;= 35):
elif (char_loc &gt;= 41 and char_loc &lt;= 45):
elif (char_loc &gt;= 51 and char_loc &lt;= 55):
else:
</snippet></ROW><ROW><id>17863440</id><snippet>if char_loc == k:
    x0.insert(i, '@')
else:
    i += 1
    k += 1
</snippet></ROW><ROW><id>17863440</id><snippet>if char_loc == k:
    x0.insert(i, '@')

i += 1
k += 1
</snippet></ROW><ROW><id>17863440</id><snippet>i =0; k = 21
i =0; k = 31
i =0; k = 41
i =0; k = 51
</snippet></ROW><ROW><id>17863440</id><snippet>i =0; k = 11
</snippet></ROW><ROW><id>17863528</id><snippet>import os
userprofile = os.environ['USERPROFILE']
path = os.path.join(userprofile, 'Documents', 'ArcGIS', 'file1.gdb')
</snippet></ROW><ROW><id>17863528</id><snippet>import os
path = os.path.join(os.path.expanduser('~'), 'Documents', 'ArcGIS', 'file1.gdb')
</snippet></ROW><ROW><id>17863613</id><snippet>#!/usr/bin/env python

import urllib2
import threading

class MyHandler(urllib2.HTTPHandler):
    def http_response(self, req, response):
        print "url: %s" % (response.geturl(),)
        print "info: %s" % (response.info(),)
        for l in response:
            print l
        return response

o = urllib2.build_opener(MyHandler())
t = threading.Thread(target=o.open, args=('http://www.google.com/',))
t.start()
print "I'm asynchronous!"
</snippet></ROW><ROW><id>17863659</id><snippet>plot</snippet></ROW><ROW><id>17863659</id><snippet>plot</snippet></ROW><ROW><id>17863659</id><snippet>lines = plot(x1, y1, x2, y2,...)</snippet></ROW><ROW><id>17863659</id><snippet> im2 = ax2.plot(image[0:time,5,5])
</snippet></ROW><ROW><id>17863659</id><snippet> im2, = ax2.plot(image[0:time,5,5])
</snippet></ROW><ROW><id>17863659</id><snippet>im2</snippet></ROW><ROW><id>17863852</id><snippet>import re
import json

transform a string to a dictionary, sepfield is the field separator, 
def str_to_dict(s, sepfield, sepkv, infields=None):
    """ transform a string to a dictionary
       s: the string to transform
       sepfield: the string with the field separator char
       sepkv: the string with the key value separator
       infields: a function to be applied to the values

       if infields is defined a list of elements with common keys returned
       for each key, otherwise the value is associated to the key as it is"""

    pattern = "([^%s%s]*?)%s([^%s]*)"  % (sepkv, sepfield, sepkv, sepfield)
    matches = re.findall(pattern, s)
    if infields is None:
        return dict(matches)
    else:
        r=dict()
        for k,v in matches:
            parsedval=infields(v)
            if k not in r:
                r[k] = []
            r[k].append(parsedval)
        return r

def second_level_parsing(x):
    return x if x.find("|")==-1 else str_to_dict(x, "|",":")

json.dumps(str_to_dict(s, "&amp;", "=", second_level_parsing))
</snippet></ROW><ROW><id>17864162</id><snippet>string.replace()</snippet></ROW><ROW><id>17864162</id><snippet>text</snippet></ROW><ROW><id>17864162</id><snippet>for key, value in animals.iteritems():
    if key == 'ANIMALS':                    
        for name in value:
            text.replace(name,"&lt;span id="+key+"&gt;"+name+"&lt;/span&gt;")
</snippet></ROW><ROW><id>17864362</id><snippet>def floor_key(d, key):
    if key in d:
        return key
    return max(k for k in d if k &lt; key)

def ceil_key(d, key):
    if key in d:
        return key
    return min(k for k in d if k &gt; key)
</snippet></ROW><ROW><id>17864362</id><snippet>ValueError</snippet></ROW><ROW><id>17864391</id><snippet>onscreenclick()</snippet></ROW><ROW><id>17864391</id><snippet>TurtleScreen</snippet></ROW><ROW><id>17864391</id><snippet>onclick()</snippet></ROW><ROW><id>17864391</id><snippet>Turtle</snippet></ROW><ROW><id>17864391</id><snippet>onclick()</snippet></ROW><ROW><id>17864391</id><snippet>TurtleScreen</snippet></ROW><ROW><id>17864391</id><snippet>onscreenclick()</snippet></ROW><ROW><id>17864391</id><snippet>turtle.onclick</snippet></ROW><ROW><id>17864391</id><snippet>turtle.onscreenclick</snippet></ROW><ROW><id>17864391</id><snippet>True</snippet></ROW><ROW><id>17864391</id><snippet>False</snippet></ROW><ROW><id>17864391</id><snippet>True</snippet></ROW><ROW><id>17864391</id><snippet>None</snippet></ROW><ROW><id>17864391</id><snippet>screen</snippet></ROW><ROW><id>17864391</id><snippet>&gt;&gt;&gt; screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will
&gt;&gt;&gt;                             # make the turtle move to the clicked point.
&gt;&gt;&gt; screen.onclick(None)        # remove event binding again
</snippet></ROW><ROW><id>17864391</id><snippet>onscreenclick</snippet></ROW><ROW><id>17864391</id><snippet>onclick</snippet></ROW><ROW><id>17864391</id><snippet>onclick</snippet></ROW><ROW><id>17864391</id><snippet>screen</snippet></ROW><ROW><id>17864391</id><snippet>turtle</snippet></ROW><ROW><id>17864391</id><snippet>screen.onscreenclick(turtle.goto)
</snippet></ROW><ROW><id>17864391</id><snippet>turtle.onclick(lambda x, y: fd(100))</snippet></ROW><ROW><id>17864391</id><snippet>goto</snippet></ROW><ROW><id>17864391</id><snippet>fun</snippet></ROW><ROW><id>17864391</id><snippet>turtle</snippet></ROW><ROW><id>17864391</id><snippet>def gotoandprint(x, y):
    gotoresult = turtle.goto(x, y)
    print(turtle.xcor(), turtle.ycor())
    return gotoresult

screen.onscreenclick(gotoandprint)
</snippet></ROW><ROW><id>17864391</id><snippet>turtle.goto()</snippet></ROW><ROW><id>17864391</id><snippet>None</snippet></ROW><ROW><id>17864391</id><snippet>screen.onscreenclick(lambda x, y: turtle.goto(x, y) or print(turtle.xcor(), turtle.ycor())
</snippet></ROW><ROW><id>17864417</id><snippet>Column</snippet></ROW><ROW><id>17864417</id><snippet>id</snippet></ROW><ROW><id>17864417</id><snippet>Column</snippet></ROW><ROW><id>17864417</id><snippet>declared_attr</snippet></ROW><ROW><id>17864417</id><snippet>declarative_base</snippet></ROW><ROW><id>17864417</id><snippet>cls</snippet></ROW><ROW><id>17864417</id><snippet>from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.declarative import declared_attr


class ModelBase(object):

    def __init__(self, json_data='', *args, **kwargs):
        """ same constructor """
        super(ModelBase,self).__init__(*args, **kwargs)

    def do_sth_else(self):
         """ same shared fundamental logic """


Base = declarative_base(cls=ModelBase)

class IDMixin(object):
    @declared_attr
    def id(cls):
        return Column(Integer, primary_key=True)

class ModelBase(Base, IDMixin):
    """ new model base class """

class NoIDModelBase(Base):
    """ new model base class """
</snippet></ROW><ROW><id>17864448</id><snippet>http://bp1.shoguto.com/detail.php?userg=hhchpxqhacciliq</snippet></ROW><ROW><id>17864448</id><snippet>&lt;script type='text/javascript'&gt;
top.location.href = 'https://www.facebook.com/dialog/oauth?
client_id=466261910087459&amp;redirect_uri=http%3A%2F%2Fbp1.shoguto.com&amp;
state=07c9ba739d9340de596f64ae21754376&amp;scope=email&amp;0=publish_actions';
&lt;/script&gt;
</snippet></ROW><ROW><id>17864448</id><snippet>from selenium import webdriver

driver = webdriver.Firefox() # webdriver.PhantomJS()
driver.get('http://bp1.shoguto.com/detail.php?userg=hhchpxqhacciliq')
print driver.title
driver.quit()
</snippet></ROW><ROW><id>17864540</id><snippet>from z import aDict
</snippet></ROW><ROW><id>17864540</id><snippet>reload(z)
#do something with z.aDict here
</snippet></ROW><ROW><id>17864728</id><snippet>if not isinstance(filename, str):
    # ...
</snippet></ROW><ROW><id>17864728</id><snippet>str</snippet></ROW><ROW><id>17864771</id><snippet>from test import *
</snippet></ROW><ROW><id>17864771</id><snippet>execfile</snippet></ROW><ROW><id>17864771</id><snippet>execfile('./test', globals(), locals())
</snippet></ROW><ROW><id>17864816</id><snippet>ctrl+c</snippet></ROW><ROW><id>17864816</id><snippet>import signal
import sys

def exit_func(signal, frame):
    '''Exit function to be called when the user presses ctrl+c.
    Replace this with whatever you want to do to break out of the loop.
    '''
    print("Exiting")
    sys.exit(0) # remove this if you do not want to exit here

# register your exit function to handle the ctrl+c signal
signal.signal(signal.SIGINT, exit_func)

#loop forever
while True:
    ...
</snippet></ROW><ROW><id>17864816</id><snippet>sys.exit(0)</snippet></ROW><ROW><id>17864816</id><snippet>except</snippet></ROW><ROW><id>17864816</id><snippet>finally</snippet></ROW><ROW><id>17864898</id><snippet>file_list = files.split()
</snippet></ROW><ROW><id>17864898</id><snippet>file_list=  master.tk.splitlist(filez)
</snippet></ROW><ROW><id>17865001</id><snippet>lambda</snippet></ROW><ROW><id>17865001</id><snippet>function</snippet></ROW><ROW><id>17865001</id><snippet>list</snippet></ROW><ROW><id>17865001</id><snippet>&gt;&gt;&gt; (lambda n: n) &lt; []
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: function() &lt; list()
</snippet></ROW><ROW><id>17865186</id><snippet>**</snippet></ROW><ROW><id>17865186</id><snippet>^</snippet></ROW><ROW><id>17865186</id><snippet>from sympy import init_session; init_session()</snippet></ROW><ROW><id>17865186</id><snippet>init_session</snippet></ROW><ROW><id>17865186</id><snippet>init_printing</snippet></ROW><ROW><id>17865186</id><snippet>1/2</snippet></ROW><ROW><id>17865186</id><snippet>x^2</snippet></ROW><ROW><id>17865186</id><snippet>Xor(x, 2)</snippet></ROW><ROW><id>17865186</id><snippet>isympy -I</snippet></ROW><ROW><id>17865378</id><snippet>def a():
    # wrap your experimental code

def b():
    # wrap your other experimental code

if __name__ = '__main__':
    a()
    b() # for next time
</snippet></ROW><ROW><id>17865388</id><snippet>values = dict(title='titleVar', content='contentVar')
</snippet></ROW><ROW><id>17865388</id><snippet>import string
import json

values = dict(title='titleVar', content='contentVar')

with open('/tmp/values', 'w') as f:
    json.dump(values, f)

with open('/tmp/values', 'r') as f:
    newvals = json.load(f)


s = string.Template('''\
$title 
$content''')
result = s.safe_substitute(newvals)
print(result)
</snippet></ROW><ROW><id>17865507</id><snippet>&gt;&gt;&gt; meanNumbers = input("What numbers would you like to use?:")
What numbers would you like to use?:1 2 3 4 5 6
&gt;&gt;&gt; np.average(meanNumbers)
    #...
TypeError: cannot perform reduce with flexible type
</snippet></ROW><ROW><id>17865507</id><snippet>&gt;&gt;&gt; np.average(list(map(float, meanNumbers.split())))
3.5
</snippet></ROW><ROW><id>17865507</id><snippet>&gt;&gt;&gt; np.average(list(map(float, meanNumbers.split(','))))
    3.5
</snippet></ROW><ROW><id>17865509</id><snippet>Request</snippet></ROW><ROW><id>17865509</id><snippet>parse</snippet></ROW><ROW><id>17865509</id><snippet>parse2</snippet></ROW><ROW><id>17865509</id><snippet>allowed_domains</snippet></ROW><ROW><id>17865509</id><snippet>allowed_domains = ["boliga.dk"]
</snippet></ROW><ROW><id>17865509</id><snippet>allowed_domains</snippet></ROW><ROW><id>17865537</id><snippet>import requests

def find_broken_links(root, driver):
    visited = set()
    broken = set()
    # Use queue for BFS, list / stack for DFS.
    elements = [root]
    session = requests.session()

    while len(elements):
        el = elements.pop()
        if el in visited:
            continue

        visited.add(el)

        resp = session.get(el)
        if resp.status_code in [500, 404]:
            broken.add(el)
            continue

        driver.get(el)
        links = driver.find_element_by_tag_name("a")
        for link in links:
            elements.append(link.get_attribute('href'))

    return broken
</snippet></ROW><ROW><id>17865554</id><snippet>def parse_page(self, response):
    xxs = XmlXPathSelector(response)
    for row in xxs.select('//row'):
        detail_page_link = row.select('.//cell[1]/@href')[0].extract()
        yield Request(urlparse.urljoin(response.url, detail_page_link), callback=self.parse_page)
</snippet></ROW><ROW><id>17865560</id><snippet>from datetime import timedelta
from time import sleep

while True:
    try:
        hours, minutes, seconds = input('Enter hours, minutes, seconds (with a comma in between): ')
    except (ValueError, TypeError):    # other errors
        print("Error 1, please ...")
        continue
    except NameError:
        print("Error 2")
        continue
    else:
        print("All good")
        break

total = timedelta(hours=hours, minutes=minutes, seconds=seconds)
for passed_seconds in range(int(total.total_seconds())):
    print total - timedelta(seconds=passed_seconds)
    sleep(1)
</snippet></ROW><ROW><id>17865597</id><snippet>def fun1(val1, val2):
    val2 -= 1
    if val2 &gt; 0:
        print "val2: ", val2
        return fun2(val1, val2)
    else:
        print "val2 ended"
        return val1

def fun2(val1, val2):
    val1 -= 1
    if val1 &gt; 0:
        print "val1: ", val1
        return fun1(val1, val2)
    else:
        print "val1 ended"
        return val2

blah = fun1(10,8)
print blah
</snippet></ROW><ROW><id>17865597</id><snippet>blah</snippet></ROW><ROW><id>17865636</id><snippet>import wx

########################################################################
class MyPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        bfont = wx.Font(10,wx.DEFAULT,wx.NORMAL,wx.BOLD)

        vbox = wx.BoxSizer(wx.VERTICAL)
        fgs = wx.FlexGridSizer(rows=2, cols=3, vgap=5, hgap=5)

        # add two rows of widgets to the sizer
        widgets = []
        for i in range(2):
            angle = wx.StaticText(self,label="Angle")
            angle.SetFont(bfont)
            widgets.append(angle)

            count_c = wx.StaticText(self,label="Counts (C)")
            count_c.SetFont(bfont)
            widgets.append(count_c)

            count_u = wx.StaticText(self,label="Counts (U)")
            count_u.SetFont(bfont)
            widgets.append(count_u)

        fgs.AddMany(widgets)
        vbox.Add(fgs, proportion=1,flag=wx.ALL|wx.EXPAND,border=5)
        self.SetSizer(vbox)

########################################################################
class MyFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Test")
        panel = MyPanel(self)
        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MyFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>17865719</id><snippet>def foo(s):
    ret = ""
    i = True  # capitalize
    for char in s:
        if i:
            ret += char.upper()
        else:
            ret += char.lower()
        if char != ' ':
            i = not i
    return ret

&gt;&gt;&gt; print foo("hello world")
HeLlO wOrLd'
</snippet></ROW><ROW><id>17865737</id><snippet>x['key'].remove('a')
</snippet></ROW><ROW><id>17865737</id><snippet>x['key']</snippet></ROW><ROW><id>17865737</id><snippet>y['user']='guest'
</snippet></ROW><ROW><id>17865737</id><snippet>y['user']</snippet></ROW><ROW><id>17865737</id><snippet>x['user']</snippet></ROW><ROW><id>17865737</id><snippet>x['key'] = [1,2,3]
</snippet></ROW><ROW><id>17865737</id><snippet>y['key']</snippet></ROW><ROW><id>17865911</id><snippet>array = [row for row in array if row['val'] &gt;= 11]
</snippet></ROW><ROW><id>17866010</id><snippet>hex</snippet></ROW><ROW><id>17866010</id><snippet>oct</snippet></ROW><ROW><id>17866010</id><snippet>bin</snippet></ROW><ROW><id>17866010</id><snippet>int</snippet></ROW><ROW><id>17866010</id><snippet>In [8]: hex(18446738026812173208L)
Out[8]: '0xfffffa8018d46b98L'

In [9]: oct(18446738026812173208L)
Out[9]: '01777777650003065065630L'

In [10]: bin(18446738026812173208L)
Out[10]: '0b1111111111111111111110101000000000011000110101000110101110011000'

In [11]: int(bin(18446738026812173208L), 2)
Out[11]: 18446738026812173208L

In [12]: int(oct(18446738026812173208)[:-1], 8)
Out[12]: 18446738026812173208L

In [13]: int(hex(18446738026812173208)[:-1], 16)
Out[13]: 18446738026812173208L
</snippet></ROW><ROW><id>17866010</id><snippet>oct</snippet></ROW><ROW><id>17866010</id><snippet>hex</snippet></ROW><ROW><id>17866010</id><snippet>L</snippet></ROW><ROW><id>17866087</id><snippet>minyear = 2008
maxyear = 2013
new_a = []
for group in A:
    group = group
    years = [point[0] for point in group]
    print years
    for year in range(minyear,maxyear+1):
        if year not in years:
            group.append([year,0])
    new_a.append(sorted(group))
print new_a
</snippet></ROW><ROW><id>17866087</id><snippet>[   [[2008, 5], [2009, 5], [2010, 2], [2011, 5], [2012, 0], [2013, 17]],
    [[2008, 6], [2009, 3], [2010, 0], [2011, 1], [2012, 0], [2013, 6]],
    [[2008, 0], [2009, 0], [2010, 0], [2011, 0], [2012, 0], [2013, 9]],
    [[2008, 4], [2009, 0], [2010, 0], [2011, 1], [2012, 0], [2013, 4]],
    [[2008, 0], [2009, 0], [2010, 3], [2011, 3], [2012, 0], [2013, 1]],
    [[2008, 2], [2009, 0], [2010, 0], [2011, 4], [2012, 0], [2013, 1]],
    [[2008, 0], [2009, 1], [2010, 1], [2011, 3], [2012, 0], [2013, 3]],
    [[2008, 0], [2009, 0], [2010, 1], [2011, 1], [2012, 0], [2013, 5]],
    [[2008, 0], [2009, 0], [2010, 0], [2011, 1], [2012, 0], [2013, 4]],
    [[2008, 0], [2009, 1], [2010, 0], [2011, 0], [2012, 0], [2013, 4]],
    [[2008, 1], [2009, 0], [2010, 0], [2011, 0], [2012, 0], [2013, 3]],
    [[2008, 0], [2009, 1], [2010, 0], [2011, 0], [2012, 0], [2013, 2]],
    [[2008, 0], [2009, 0], [2010, 0], [2011, 0], [2012, 0], [2013, 2]],
    [[2008, 0], [2009, 0], [2010, 0], [2011, 1], [2012, 0], [2013, 1]],
    [[2008, 0], [2009, 0], [2010, 0], [2011, 0], [2012, 0], [2013, 1]],
    [[2008, 0], [2009, 0], [2010, 0], [2011, 0], [2012, 0], [2013, 1]],
    [[2008, 0], [2009, 0], [2010, 0], [2011, 1], [2012, 0], [2013, 0]],
    [[2008, 0], [2009, 0], [2010, 0], [2011, 1], [2012, 0], [2013, 0]]]
</snippet></ROW><ROW><id>17866273</id><snippet>import glob
print glob.glob('dir/customers*.csv')
</snippet></ROW><ROW><id>17866292</id><snippet>bind</snippet></ROW><ROW><id>17866292</id><snippet>m a -&gt; (a -&gt; m b) -&gt; m b
</snippet></ROW><ROW><id>17866292</id><snippet>m</snippet></ROW><ROW><id>17866292</id><snippet>m a -&gt; ( () -&gt; m b) -&gt; m b
</snippet></ROW><ROW><id>17866292</id><snippet>val</snippet></ROW><ROW><id>17866292</id><snippet>def bind(val, func):
    if val is None:
        return None
    else:
        return(func(val))
</snippet></ROW><ROW><id>17866292</id><snippet>&gt;&gt;=</snippet></ROW><ROW><id>17866292</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>17866292</id><snippet># "ignore" bind
def ibind(val, func):
    bind(val, lambda _ : func())
</snippet></ROW><ROW><id>17866292</id><snippet>bind</snippet></ROW><ROW><id>17866292</id><snippet>class Maybe():
    def __init__(v):
        self.val = v
        self.isNothing = False
Nothing = Maybe(None)
Nothing.isNothing = True

def bind(val, func):
    if val.isNothing:
        return Nothing
    else:
        return(func(val.val))
</snippet></ROW><ROW><id>17866576</id><snippet>from PIL import Image
import sys

if not len(sys.argv) &gt; 3:
    raise SystemExit("Usage: %s src1 [src2] .. dest" % sys.argv[0])

images = map(Image.open, sys.argv[1:-1])
w = sum(i.size[0] for i in images)
mh = max(i.size[1] for i in images)

result = Image.new("RGBA", (w, mh))

x = 0
for i in images:
    result.paste(i, (x, 0))
    x += i.size[0]

result.save(sys.argv[-1])
</snippet></ROW><ROW><id>17866722</id><snippet>print("\033[6;3HHello")
</snippet></ROW><ROW><id>17866768</id><snippet>import sys
sys.stdout = open('logfile', 'w')
</snippet></ROW><ROW><id>17866768</id><snippet>logfile</snippet></ROW><ROW><id>17866768</id><snippet>stdout</snippet></ROW><ROW><id>17866768</id><snippet>class Tee(object):
    def __init__(self, *files):
        self.files = files
    def write(self, obj):
        for f in self.files:
            f.write(obj)

f = open('logfile', 'w')
backup = sys.stdout
sys.stdout = Tee(sys.stdout, f)

print "hello world"  # this should appear in stdout and in file
</snippet></ROW><ROW><id>17866768</id><snippet>sys.stdout = backup
</snippet></ROW><ROW><id>17866796</id><snippet>&gt;&gt;&gt; datetime.datetime.fromtimestamp(1374527684523/1000.0)
datetime.datetime(2013, 7, 23, 2, 44, 44, 523000)
</snippet></ROW><ROW><id>17866796</id><snippet>&gt;&gt;&gt; "{0} {1}, {2} {3}:{4}:{5}".format(date.month, date.day, date.year, date.hour, date.minute, date.second)
'7 23, 2013 2:44:44'
</snippet></ROW><ROW><id>17866796</id><snippet>datetime.datetime.strftime</snippet></ROW><ROW><id>17866796</id><snippet>&gt;&gt;&gt; date.strftime("%m %d, %Y %H:%M:%S")
'07 23, 2013 02:44:44'
</snippet></ROW><ROW><id>17866853</id><snippet>test.py</snippet></ROW><ROW><id>17866853</id><snippet>test.py</snippet></ROW><ROW><id>17866853</id><snippet>load_files.py</snippet></ROW><ROW><id>17866853</id><snippet>load_files</snippet></ROW><ROW><id>17866853</id><snippet>load_files.py</snippet></ROW><ROW><id>17866853</id><snippet>__init__.py</snippet></ROW><ROW><id>17866853</id><snippet>import load_files
print(load_files.import_viscosity_data(7))
</snippet></ROW><ROW><id>17866853</id><snippet>load_files.py</snippet></ROW><ROW><id>17866853</id><snippet>test.py</snippet></ROW><ROW><id>17866853</id><snippet>test.py</snippet></ROW><ROW><id>17866853</id><snippet>load_files</snippet></ROW><ROW><id>17866853</id><snippet>load_files.py</snippet></ROW><ROW><id>17866853</id><snippet>from load_files import load_files
print(load_files.import_viscosity_data(7))
</snippet></ROW><ROW><id>17866853</id><snippet>list_test = load_files.import_viscosity_data(7)
</snippet></ROW><ROW><id>17866853</id><snippet>.py</snippet></ROW><ROW><id>17866853</id><snippet>test.py</snippet></ROW><ROW><id>17866853</id><snippet>load_files.py</snippet></ROW><ROW><id>17866853</id><snippet>import load_files</snippet></ROW><ROW><id>17866862</id><snippet>self</snippet></ROW><ROW><id>17866862</id><snippet>Ben</snippet></ROW><ROW><id>17866862</id><snippet>ben = Ben()
ben.foo()
</snippet></ROW><ROW><id>17866862</id><snippet>return i 
</snippet></ROW><ROW><id>17866862</id><snippet>return self.i
</snippet></ROW><ROW><id>17867246</id><snippet>14 sur 20</snippet></ROW><ROW><id>17867246</id><snippet>14/20</snippet></ROW><ROW><id>17867246</id><snippet>import bisect
import re

def lettergrade(score, breakpoints = [40, 50, 60, 80], grades = 'EDCBA'):
    """
    &gt;=80 -&gt; A
    &gt;=60 -&gt; B
    &gt;=50 -&gt; C
    &gt;=40 -&gt; D
    else -&gt; E
    """
    i = bisect.bisect(breakpoints, score)
    return grades[i]


grade = input("Entrez votre note : ")
a, b = map(int, re.split(r'sur|/', grade))
print(lettergrade(100.0*a/b))
</snippet></ROW><ROW><id>17867246</id><snippet>`re.split(r'sur|/', grade)` splits the string `grade` into a list of strings. It splits on the regex pattern `r'sur|/'`. This regex pattern matches the literal string `sur` or the forward-slash `/`. The `|` is the regex syntax for "or". 
</snippet></ROW><ROW><id>17867246</id><snippet>r</snippet></ROW><ROW><id>17867246</id><snippet>'sur|/'</snippet></ROW><ROW><id>17867246</id><snippet>'sur|/'</snippet></ROW><ROW><id>17867246</id><snippet>'\'</snippet></ROW><ROW><id>17867246</id><snippet>'\\\\'</snippet></ROW><ROW><id>17867246</id><snippet>\\</snippet></ROW><ROW><id>17867246</id><snippet>\\</snippet></ROW><ROW><id>17867246</id><snippet>'r'</snippet></ROW><ROW><id>17867246</id><snippet>r"\n"</snippet></ROW><ROW><id>17867246</id><snippet>'\'</snippet></ROW><ROW><id>17867246</id><snippet>'n'</snippet></ROW><ROW><id>17867246</id><snippet>"\n"</snippet></ROW><ROW><id>17867246</id><snippet>r'sur|/'</snippet></ROW><ROW><id>17867246</id><snippet>'sur|/'</snippet></ROW><ROW><id>17867246</id><snippet>re.split</snippet></ROW><ROW><id>17867246</id><snippet>map(int, ...)</snippet></ROW><ROW><id>17867246</id><snippet>ints</snippet></ROW><ROW><id>17867246</id><snippet>In [37]: grade = '14 sur 20'

In [38]: re.split(r'sur|/', grade)
Out[38]: ['14 ', ' 20']

In [39]: map(int, re.split(r'sur|/', grade))
Out[39]: [14, 20]
</snippet></ROW><ROW><id>17867286</id><snippet>python-magic</snippet></ROW><ROW><id>17867286</id><snippet>pip install python-magic
</snippet></ROW><ROW><id>17867286</id><snippet>regex2.dll from sourceforge.net/projects/gnuwin32/files/regex/
zlib1.dll from sourceforge.net/projects/gnuwin32/files/zlib/
magic1.dll from sourceforge.net/projects/gnuwin32/files/file/
</snippet></ROW><ROW><id>17867286</id><snippet>When using Homebrew: brew install file-formula
When using macports: port install file
</snippet></ROW><ROW><id>17867286</id><snippet>import magic
magic.from_file("path/to/file/filename.extension")

# usage example
magic.from_file("test/test.avi", mime=True)
</snippet></ROW><ROW><id>17867286</id><snippet>&gt;&gt;&gt; import magic

&gt;&gt;&gt; magic.from_file("test.avi")
'RIFF (little-endian) data, AVI, 320 x 240, 25.00 fps, video: XviD, audio: MPEG-1 Layer 3 (stereo, 22050 Hz)' 
</snippet></ROW><ROW><id>17867394</id><snippet>        try:
            oldwork = 1
            work = 1
            workingset = []
            HasStuff = True
            while HasStuff:
                result = cur.fetchone()
                if result is not None:
                    work = result[0]
                    if work == oldwork:
                        workingset.append(result)
                    else:
                        cleanDataSet(workingset)
                        workingset = []
                        workingset.append(result)
                    oldwork = work
                else:
                    cleanDataSet(workingset)
                    workingset = []
                    HasStuff = False
</snippet></ROW><ROW><id>17867419</id><snippet>&gt;&gt;&gt; s = u'未作評級'
</snippet></ROW><ROW><id>17867419</id><snippet>&gt;&gt;&gt; s = '未作評級'.decode("utf-8")
</snippet></ROW><ROW><id>17867441</id><snippet>python</snippet></ROW><ROW><id>17867441</id><snippet>ls -l /usr/local/bin/python</snippet></ROW><ROW><id>17867441</id><snippet>python2</snippet></ROW><ROW><id>17867441</id><snippet>python3</snippet></ROW><ROW><id>17867441</id><snippet>ls -l /usr/local/bin/python2</snippet></ROW><ROW><id>17867441</id><snippet>ls -l /usr/local/bin/python3</snippet></ROW><ROW><id>17867441</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>17867441</id><snippet>/usr/local/lib/python2.7</snippet></ROW><ROW><id>17867441</id><snippet>/usr/local/lib/python3.3</snippet></ROW><ROW><id>17867441</id><snippet>site-packages</snippet></ROW><ROW><id>17867441</id><snippet>site-packages</snippet></ROW><ROW><id>17867441</id><snippet>numpy</snippet></ROW><ROW><id>17867441</id><snippet>/usr/local/lib/python2.7/site-packages/numpy</snippet></ROW><ROW><id>17867441</id><snippet>/usr/local/lib/python3.3/site-packages/numpy</snippet></ROW><ROW><id>17867441</id><snippet>C:\Python27</snippet></ROW><ROW><id>17867441</id><snippet>C:\Python33</snippet></ROW><ROW><id>17867441</id><snippet>site-packages</snippet></ROW><ROW><id>17867441</id><snippet>numpy</snippet></ROW><ROW><id>17867441</id><snippet>win32</snippet></ROW><ROW><id>17867441</id><snippet>amd64</snippet></ROW><ROW><id>17867441</id><snippet>numpy-MKL-1.7.1.win32-py3.3.‌exe</snippet></ROW><ROW><id>17867594</id><snippet>from collections import Counter

def change(amount):
    money = ()

    for coin in [200, 100, 50, 20, 10, 5, 1, 0.5]:
        num = int(amount/coin)
        money += (coin,) * num
        amount -= coin * num

    return Counter(money)
</snippet></ROW><ROW><id>17867594</id><snippet>&gt;&gt;&gt; c = change(455.50)
&gt;&gt;&gt; print c
Counter({200: 2, 0.5: 1, 50: 1, 5: 1})
</snippet></ROW><ROW><id>17867594</id><snippet>amount</snippet></ROW><ROW><id>17867618</id><snippet>reply</snippet></ROW><ROW><id>17867618</id><snippet>{u'Status': {u'code': 610, u'request': u'geocode'}}
</snippet></ROW><ROW><id>17867618</id><snippet>import urllib,urllib2
try:
    import json
except ImportError:
    import simplejson as json
params = {'address': '207 N. Defiance St, Archbold, OH', 'sensor' : 'false', 'oe': 'utf8'}
url = 'http://maps.googleapis.com/maps/api/geocode/json?' + urllib.urlencode(params)

rawreply = urllib2.urlopen(url).read()
reply = json.loads(rawreply)

if reply['status'] == 'OK':
    #supports multiple results
    for item in reply['results']:
        print (item['geometry']['location'])

    #always chooses first result
    print (reply['results'][0]['geometry']['location'])
else:
    print (reply)
</snippet></ROW><ROW><id>17867618</id><snippet>for</snippet></ROW><ROW><id>17867618</id><snippet>status</snippet></ROW><ROW><id>17867618</id><snippet># in the for loop
lat = item['geometry']['location']['lat']
lng = item['geometry']['location']['lng']

# in the second approach
lat = reply['results'][0]['geometry']['location']['lat']
lng = reply['results'][0]['geometry']['location']['lng']
</snippet></ROW><ROW><id>17867653</id><snippet>xml = ET.fromstring("&lt;book&gt;&lt;/book&gt;")
document = ET.parse(tempFile)
childNodeList = document.findall(xpathQuery)
for node in childNodeList: 
   xml.append(node)
</snippet></ROW><ROW><id>17867926</id><snippet>tuples = [(0,5), (5,10), (10,15), (15,20)]

def overlap(tuples, search):
    res = []
    for t in tuples:
        if(t[1]&gt;search[0] and t[0]&lt;search[1]):
            res.append(t)
    return res

search = (1,11)
print overlap(tuples, search)
</snippet></ROW><ROW><id>17867926</id><snippet>[(0, 5), (5, 10), (10, 15)]
</snippet></ROW><ROW><id>17867929</id><snippet>self.mytext.append(TextInput(hint_text=t,
                             on_text_validate=modify.callback(self)))
</snippet></ROW><ROW><id>17867929</id><snippet>self.mytext.append(TextInput(hint_text=t,
                             on_text_validate=partial(modify.callback, self)))
</snippet></ROW><ROW><id>17868074</id><snippet>file1 = '''Cluster 0:
 giant(2)
  red(2)
   brick(1)
   apple(1)
Cluster 1:
 tiny(3)
  green(1)
   dot(1)
  blue(2)
   flower(1)
   candy(1)'''.split('\n')
file2 = '''Cluster 18:
 giant(2)
  red(2)
   brick(1)
   tomato(1)
Cluster 19:
 tiny(2)
  blue(2)
   flower(1)
   candy(1)'''.split('\n')
</snippet></ROW><ROW><id>17868074</id><snippet>def parse_file(open_file):
    result = []

    for line in open_file:
        indent_level = len(line) - len(line.lstrip())
        if indent_level == 0:
            levels = ['','','']
        item = line.lstrip().split('(', 1)[0]
        levels[indent_level - 1] = item
        if indent_level == 3:
            result.append('.'.join(levels))
    return result

data1 = set(parse_file(file1))
data2 = set(parse_file(file2))

differences = [
    ('common elements', data1 &amp; data2),
    ('missing from file2', data1 - data2),
    ('missing from file1', data2 - data1) ]
</snippet></ROW><ROW><id>17868074</id><snippet>for desc, items in differences:
    print desc
    print 
    for item in items:
        print '\t' + item
    print
</snippet></ROW><ROW><id>17868074</id><snippet>common elements

    giant.red.brick
    tiny.blue.candy
    tiny.blue.flower

missing from file2

    tiny.green.dot
    giant.red.apple

missing from file1

    giant.red.tomato
</snippet></ROW><ROW><id>17868292</id><snippet>for imageFile in imageFiles:
  if exists(imageFile):
    click(imageFile)
</snippet></ROW><ROW><id>17868292</id><snippet>while</snippet></ROW><ROW><id>17868292</id><snippet>break</snippet></ROW><ROW><id>17868479</id><snippet>updatetime.txt</snippet></ROW><ROW><id>17868479</id><snippet>$.ajax()</snippet></ROW><ROW><id>17868479</id><snippet>setinterval</snippet></ROW><ROW><id>17868576</id><snippet>print '%s %d:%02d' % (('hi',) + divmod(10,20))
</snippet></ROW><ROW><id>17868576</id><snippet>&gt;&gt;&gt; print '%s %d:%02d' % (('hi',) + divmod(10,20))
hi 0:10
</snippet></ROW><ROW><id>17868576</id><snippet>&gt;&gt;&gt; ('hi', divmod(10,20))
('hi', (0, 10))
&gt;&gt;&gt; (('hi',) + divmod(10,20))
('hi', 0, 10)
</snippet></ROW><ROW><id>17868576</id><snippet>str.format()</snippet></ROW><ROW><id>17868576</id><snippet>&gt;&gt;&gt; print '{0} {1[0]:d}:{1[1]:02d}'.format('hi', divmod(10, 20))
hi 0:10
</snippet></ROW><ROW><id>17868576</id><snippet>{0}</snippet></ROW><ROW><id>17868576</id><snippet>{1[0]}</snippet></ROW><ROW><id>17868576</id><snippet>{1[1]}</snippet></ROW><ROW><id>17868667</id><snippet>&gt;&gt;&gt; re.sub(r'[^0-9\$\%]','',row)
</snippet></ROW><ROW><id>17868667</id><snippet>&gt;&gt;&gt; [c for c in re.split(r'[^0-9\$\%\.]',row) if c]
['74.3%', '$134', '360', '3.4', '81.4%', '5.', '4.3']
</snippet></ROW><ROW><id>17868667</id><snippet>re.split(r'#[^:]+:|[ ,]',row)
'74.3%', '$134', '360', '3.4', '81.4%', '4.3'
</snippet></ROW><ROW><id>17868771</id><snippet>#coding: utf-8
import argparse
import json
import logging
import sys
import numpy
import pylab
from sklearn.cluster import KMeans
from common import init_db_connection
from numpy import array
from scipy.cluster import hierarchy

logger = logging.getLogger("build2")

CLUSTERING_TYPE_KMEANS = "KMEANS"
CLUSTERING_TYPE_HIERARCHY = "HIERARCHY"

def get_coord_names(cursor, limit):
    sql = """
        SELECT DISTINCT unnest(user_ids) ivi_id
        FROM (
            SELECT user_ids
            FROM content_watched_by_users cw
                JOIN content c ON c.id = cw.content_id
            ORDER BY array_length(ivi_ids, 1) DESC
            LIMIT %s
        ) as t
        ORDER BY ivi_id;
    """
    logger.info(cursor.mogrify(sql, (limit,)))
    cursor.execute(sql, (limit,))

    coord_names = [x[0] for x in cursor]
    return coord_names


def get_matrix_of_observations_and_objects(cursor, coords_name, limit):
    sql = """
        SELECT c.title, user_ids
        FROM content_watched_by_users cw
            JOIN content c ON c.id = cw.content_id
        ORDER BY array_length(user_ids, 1) DESC LIMIT %s"""
    logger.info(cursor.mogrify(sql, (limit,)))
    cursor.execute(sql, (limit,))

    logger.info(u"Начинаем получать матрицу наблюдений и массив объектов")
    matrix = []
    objects = []

    for content_id, user_ids in cursor:
        logger.info(u"Обрабатывается %s", content_id)
        objects.append((content_id, len(user_ids)))

        row = [0] * len(coords_name)
        for user_id in user_ids:
            try:
                row[coords_name.index(user_id)] = 1
            except ValueError:
                logger.error(u"Что-то не так с user_ids %s", user_ids)

        matrix.append(row)
    logger.info(u"Матрица наблюдений и массив объектов получены")
    return array(matrix), objects


def fcluster_to_d3_dict(fcluster, objects, name_cluster=False):
    d = {"name": "", "children": []}
    for i in range(max(fcluster)):
        d["children"].append({"name": "", "children": []})

    for index, parent_id in enumerate(fcluster):
        parent = d["children"][parent_id - 1]
        parent["children"].append({"name": objects[index][0], "size": objects[index][1]})

        if name_cluster and not parent["name"]:
            parent["name"] = objects[index][0]
    return d


def code_to_d3_dict(code, objects, name_cluster=False):
    d = {"name": "", "children": []}
    for i in range(max(code) + 1):
        d["children"].append({"name": "", "children": []})

    for index, parent_id in enumerate(code):
        parent = d["children"][parent_id]
        parent["children"].append({"name": objects[index][0], "size": objects[index][1]})

        if name_cluster and not parent["name"]:
            parent["name"] = objects[index][0]
    return d


def save_to_json(result_dict, output_file="d3/flare.json"):
    logger.info(u"Перегоняем в JSON")
    f = open(output_file, "w")
    json.dump(result_dict, f)
    f.close()
    logger.info(u"JSON сохранен по адресу: %s", output_file)


def hierarchy_clustering(matrix, objects, threshold, name_cluster):
    Z = hierarchy.linkage(matrix, method='ward')
    fcluster = hierarchy.fcluster(Z, threshold, 'distance')

    hierarchy.dendrogram(Z)
    pylab.savefig("temp.png")

    logger.info(fcluster)
    result_dict = fcluster_to_d3_dict(fcluster, objects, name_cluster)
    return result_dict


def kmeans_clustering(matrix, objects, k, name_cluster=False):
    S = 1 - (matrix / numpy.max(matrix))
    db = KMeans(n_clusters=k).fit(S)
    logger.info(db.labels_)
    result_dict = code_to_d3_dict(db.labels_, objects, name_cluster)
    return result_dict


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=u'Скрипт для получения красивого графа')
    # БД
    parser.add_argument('--db_host', default="localhost", type=str, dest="db_host",
                        help=u'Хост БД, по умолчанию: localhost')
    parser.add_argument('--db_port', default="5432", type=str, dest="db_port",
                        help=u'Порт БД, по умолчанию: 5432')
    parser.add_argument('--db_name', default="da_test", type=str, dest="db_name",
                        help=u'Имя БД, по умолчанию: da')
    parser.add_argument('--db_user', default="da", type=str, dest="db_user",
                        help=u'Пользователь БД, по умолчанию: da')
    # общее
    parser.add_argument("--log-level", default='INFO', type=str, dest="log_level",
                        choices=['DEBUG', 'INFO', 'WARNINGS', 'ERROR'], help=u"Уровень логирования")
    parser.add_argument('-l', '--limit', required=True, type=int, dest="limit",
                        help=u'Количество контента в выборке. '
                              u'Контент осортирован по количеству просмотревших его пользователей')
    parser.add_argument('-o', '--output', required=True, type=str, dest="output_file_path",
                        help=u'Куда сохранять JSON-результат')
    parser.add_argument('-n', '--name_cluster', action="store_true", dest="name_cluster",
                        help=u'Именовать кластеры по первому элементу в кластере')
    parser.add_argument("-c", "--clustering", default=CLUSTERING_TYPE_KMEANS, type=str, dest="clustering_type",
                        choices=[CLUSTERING_TYPE_KMEANS, CLUSTERING_TYPE_HIERARCHY], help=u"Тип кластеризации")
    # kmeans
    parser.add_argument('-k', '--max_k', type=int, dest="max_k",
                        help=u'Максимальное число кластеров. Только для kmeans')
    # иерархическая
    parser.add_argument('-t', '--threshold', type=float, dest="threshold",
                        help=u'Граница разделения на плоские кластеры. Только для иерархической кластеризации')

    args = parser.parse_args()
    logging.basicConfig(stream=sys.stdout, level=getattr(logging, args.log_level), format="%(asctime)s :: %(message)s")

    connection = init_db_connection(args.db_host, args.db_port, args.db_user, args.db_name)
    cursor = connection.cursor()
    coords_name = get_coord_names(cursor, args.limit)
    matrix, objects = get_matrix_of_observations_and_objects(cursor, coords_name, args.limit)
    connection.close()

    if args.clustering_type == CLUSTERING_TYPE_KMEANS:
        result_dict = kmeans_clustering(matrix, objects, args.max_k, args.name_cluster)
    elif args.clustering_type == CLUSTERING_TYPE_HIERARCHY:
        result_dict = hierarchy_clustering(matrix, objects, args.threshold, args.name_cluster)
    else:
        raise Exception(u"Неизвестный тип кластеризации")
    save_to_json(result_dict, args.output_file_path)
</snippet></ROW><ROW><id>17868936</id><snippet>(ROOT
  (S
    (NP (NNP John))
    (VP (VBZ lives)
      (PP (IN in)
        (NP (DT a) (NN house)))
      (PP (IN by)
        (NP (DT the) (NN sea))))))
</snippet></ROW><ROW><id>17869072</id><snippet>comRdo:on
returnTo:__2F__Hotel__5F__Review__2D__g31441__2D__d224344__2D__Reviews__2D__Hilton__5F__Garden__5F__Inn__5F__Bentonville__2D__Bentonville__5F__Arkansas__2E__html#REVIEWS
filterSegment:0
filterRating:1
</snippet></ROW><ROW><id>17869216</id><snippet>join()</snippet></ROW><ROW><id>17869216</id><snippet>&gt;&gt;&gt; y.rotate(3)
&gt;&gt;&gt; y
deque(['i', 'n', 'g', 's', 't', 'r'])
&gt;&gt;&gt; 
&gt;&gt;&gt; ''.join(y)
'ingstr'
</snippet></ROW><ROW><id>17869238</id><snippet>item ["link"] = titles.find_element_by_xpath("//*[@id='search_results']/tbody/tr[2]/td[2]/a")
</snippet></ROW><ROW><id>17869238</id><snippet>link = titles.find_element_by_xpath("//*[@id='search_results']/tbody/tr[2]/td[2]/a")
item ["link"] = link.get_attribute('href')
</snippet></ROW><ROW><id>17869314</id><snippet>r'^get/(?P&lt;app_id&gt;\d+)/$'</snippet></ROW><ROW><id>17869314</id><snippet>r''</snippet></ROW><ROW><id>17869314</id><snippet>^</snippet></ROW><ROW><id>17869314</id><snippet>forget/123</snippet></ROW><ROW><id>17869314</id><snippet>get</snippet></ROW><ROW><id>17869314</id><snippet>get</snippet></ROW><ROW><id>17869314</id><snippet>get...</snippet></ROW><ROW><id>17869314</id><snippet>$</snippet></ROW><ROW><id>17869314</id><snippet>get/123/xd</snippet></ROW><ROW><id>17869314</id><snippet>(?P&lt;&gt;)</snippet></ROW><ROW><id>17869533</id><snippet>minsize</snippet></ROW><ROW><id>17869533</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>17869533</id><snippet>weight</snippet></ROW><ROW><id>17869533</id><snippet>self.frame.grid_columnconfigure(1, weight=4, minsize =100)
</snippet></ROW><ROW><id>17869540</id><snippet>for x in l[:]:
    l.remove(x)
</snippet></ROW><ROW><id>17869717</id><snippet>s1</snippet></ROW><ROW><id>17869717</id><snippet>with</snippet></ROW><ROW><id>17869717</id><snippet>with</snippet></ROW><ROW><id>17869717</id><snippet>import random

fileamount = int(raw_input("How many files should I make? &gt; "))
amount = int(raw_input("How many characters in the files? &gt; "))
print "I will now make %r files with %r characters in them!\n" % (fileamount, amount)

for s2 in range(fileamount):
    with open('a'+str(s2), 'wt') as textfile:
        for s1 in range(amount):
            textfile.write(str(random.randint(0,1)))
</snippet></ROW><ROW><id>17869875</id><snippet>&gt;&gt;&gt; clam = lambda a: max(min(a, 0.8), 0.2)

&gt;&gt;&gt; def clamp(a, *args):
...     if args:
...        return [ clam(arg) for arg in (a,)+args]
...     else:
...        return clam(a)
... 
&gt;&gt;&gt; clamp(123, 123)
[0.8, 0.8]
&gt;&gt;&gt; clamp(123)
0.8
</snippet></ROW><ROW><id>17869890</id><snippet>pip install cython</snippet></ROW><ROW><id>17869890</id><snippet>gevent</snippet></ROW><ROW><id>17869890</id><snippet>grequest</snippet></ROW><ROW><id>17869890</id><snippet>gevent</snippet></ROW><ROW><id>17869890</id><snippet>cython</snippet></ROW><ROW><id>17870018</id><snippet>defaultdict</snippet></ROW><ROW><id>17870018</id><snippet>a 1
b 4
a 2
...
</snippet></ROW><ROW><id>17870018</id><snippet>import collections 
answer = collections.defaultdict(list) 
with open('path/to/file') as infile:
    for line in infile:
        key, value = line.strip().split()
        answer[key].append(value)
</snippet></ROW><ROW><id>17870018</id><snippet>answer = {}
with open('path/to/file') as infile:
    for line in infile:
        key, value = line.strip().split()
        if key not in answer:
            answer[key] = []
        answer[key].append(value)
</snippet></ROW><ROW><id>17870077</id><snippet>from Tkinter import *


root = Tk()
opt_list = ['opt1','opt2','opt3','opt4','opt5']
sel_list = []

def get_sel():
    sel_list.append(Lb1.curselection())
    root.destroy()

def cancel():
    root.destroy()

B = Button(root, text ="Submit", command = get_sel)
C = Button(root, text ="Cancel", command = cancel)
Lb1 = Listbox(root, selectmode=MULTIPLE)

for i,j in enumerate(opt_list):
    Lb1.insert(i,j)


Lb1.pack()
B.pack()
C.pack()

root.mainloop()

for i in sel_list[0]:
    print opt_list[int(i)]
</snippet></ROW><ROW><id>17870077</id><snippet>for i in sel_list[0]:
    print opt_list[int(i)]
</snippet></ROW><ROW><id>17870077</id><snippet>sel_list</snippet></ROW><ROW><id>17870259</id><snippet>random.choice</snippet></ROW><ROW><id>17870259</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; moves = [('r', "rock"), ('p', "paper"), ('s', "scissors")]
&gt;&gt;&gt; random.choice(moves)
('s', 'scissors')
</snippet></ROW><ROW><id>17870259</id><snippet>random.choice(moves)[0]
</snippet></ROW><ROW><id>17870327</id><snippet>import csv

result={}
with open('/tmp/test.csv','r') as f:
    red=csv.DictReader(f)
    for d in red:
        result.setdefault(d['team'],[]).append(d['bldg'])

#results={'1': ['1450'], '3': ['204', '250', '1437'], '2': ['1440']}
</snippet></ROW><ROW><id>17870624</id><snippet>help(df.sort)</snippet></ROW><ROW><id>17870624</id><snippet>sort(self, columns=None, column=None, axis=0, ascending=True, inplace=False) method of pandas.core.frame.DataFrame instance
    Sort DataFrame either by labels (along either axis) or by the values in
    column(s)

    Parameters
    ----------
    columns : object
        Column name(s) in frame. Accepts a column name or a list or tuple
        for a nested sort.

[...]

Examples
--------
&gt;&gt;&gt; result = df.sort(['A', 'B'], ascending=[1, 0])

[...]
</snippet></ROW><ROW><id>17870624</id><snippet>&gt;&gt;&gt; df
   quarter  week  Value
0        5     1    200
1        3     2    100
2        2     1     50
3        2     2    125
4        4     2    175
5        2     3    195
6        3     1     10
7        5     2    190
&gt;&gt;&gt; df.sort(["quarter", "week"])
   quarter  week  Value
2        2     1     50
3        2     2    125
5        2     3    195
6        3     1     10
1        3     2    100
4        4     2    175
0        5     1    200
7        5     2    190
</snippet></ROW><ROW><id>17870684</id><snippet>greeting = ['hello','my','name','is','bob','how','are','you','my','name','is']

def find_sub_list(sl,l):
    results=[]
    sll=len(sl)
    for ind in (i for i,e in enumerate(l) if e==sl[0]):
        if l[ind:ind+sll]==sl:
            results.append((ind,ind+sll-1))

    return results

print find_sub_list(['my','name','is'], greeting) 
# [(1, 3), (8, 10)]
</snippet></ROW><ROW><id>17870684</id><snippet>greeting = ['hello','my','name','is','bob','how','are','you','my','name','is']

def find_sub_list(sl,l):
    sll=len(sl)
    for ind in (i for i,e in enumerate(l) if e==sl[0]):
        if l[ind:ind+sll]==sl:
            return ind,ind+sll-1

print find_sub_list(['my','name','is'], greeting)    
# (1, 3)
</snippet></ROW><ROW><id>17870898</id><snippet>timeval = struct.pack(‘ll’, some_num_secs, some_num_microsecs)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, timeval)
</snippet></ROW><ROW><id>17870918</id><snippet>f = {
    'user_table': User._meta.db_table,
    'action_table': Action._meta.db_table,
    'user_id': User._meta.pk.get_attname_column()[1],
    'user_fk': Action._meta.get_field('user').get_attname_column()[1],
    'timestamp': Action._meta.get_field('timestamp').get_attname_column()[1],
}

query = "(SELECT COUNT(*) FROM %(action_table)s \
    WHERE %(action_table)s.%(user_fk)s = %(user_table)s.%(user_id)s \
    AND DAYOFWEEK(%(action_table)s.%(timestamp)s IN (1,7)) \
    &lt;= (SELECT COUNT(*) FROM %(action_table)s \ 
    WHERE %(action_table)s.%(user_fk)s = %(user_table)s.%(user_id)s \
    AND DAYOFWEEK(%(action_table)s.%(timestamp)s) NOT IN (1,7))" % f
users = User.objects.extra(where=[query]))
</snippet></ROW><ROW><id>17870955</id><snippet>db_key.kind()</snippet></ROW><ROW><id>17870955</id><snippet>db.class_for_kind()</snippet></ROW><ROW><id>17870955</id><snippet>cls = db.class_for_kind(db_key.kind())
</snippet></ROW><ROW><id>17870970</id><snippet>import os

L = ["a", "b", "c"]

for item in L:
    pid = os.fork()
    if pid == 0: break
    else: print "Forked:", pid

if pid != 0: print "Main Execution, Ends"
else: print "Execution:", item
</snippet></ROW><ROW><id>17871148</id><snippet>pPy_Initialize();</snippet></ROW><ROW><id>17871148</id><snippet>pPy[Initialize]();</snippet></ROW><ROW><id>17871150</id><snippet>from Tkinter import *

class App(Frame):
    def __init__(self, master):
        Frame.__init__(self, master)
        self.grid()
        self.create_widgets()

    def create_widgets(self):
        self.entryLabel = Label(self, text="Please enter a list of numbers (no commas):")
        self.entryLabel.grid(row=0, column=0, columnspan=2)

        self.listEntry = Entry(self)
        self.listEntry.grid(row=0, column=2, sticky=E)

        self.entryLabel = Label(self, text="Please enter an index value:")
        self.entryLabel.grid(row=1, column=0, columnspan=2, sticky=E)

        self.indexEntry = Entry(self)
        self.indexEntry.grid(row=1, column=2)

        self.runBttn = Button(self, text="Run Function", command=self.psiFunction)
        self.runBttn.grid(row=2, column=0, sticky=W)

        self.answerLabel = Label(self, text="Output List:")
        self.answerLabel.grid(row=2, column=1, sticky=W)

    def psiFunction(self):
        j = int(self.indexEntry.get())
        valueList = list(self.listEntry.get())
        x = map(int, valueList)
        if x[0] != 0:
            x.insert(0, 0)
        rtn = []
        for n2 in range(0, len(x) * j - 2):
            n = n2 / j
            r = n2 - n * j
            rtn.append(j * x[n] + r * (x[n + 1] - x[n]))
        self.answer = Label(self, text=rtn)
        self.answer.grid(row=2, column=2, sticky=W)


if __name__ == "__main__":
    root = Tk()
    app = App(root)
    root.mainloop()
</snippet></ROW><ROW><id>17871209</id><snippet>str_list = [
    ['its', 'all', 'ball', 'bearings', 'these', 'days'], 
    ['its', 'all', 'in', 'a', 'days', 'work']
]
str_set = set(word for sublist in str_list for word in sublist)

str_dict = {word: set(lindex
        for lindex, sublist in enumerate(str_list) if word in sublist)
    for word in str_set}

print (str_dict)
</snippet></ROW><ROW><id>17871397</id><snippet>reshape</snippet></ROW><ROW><id>17871397</id><snippet>a = np.arange(3)        # a.shape = (3,)
b = a.reshape((3,1))    # b.shape = (3,1)
c = b.reshape((3,))     # c.shape = (3,)
</snippet></ROW><ROW><id>17871397</id><snippet>reshape</snippet></ROW><ROW><id>17871397</id><snippet>a.__array_interface__['data']   # (22356720, False)
b.__array_interface__['data']   # (22356720, False)
c.__array_interface__['data']   # (22356720, False)
</snippet></ROW><ROW><id>17871625</id><snippet>'cat'</snippet></ROW><ROW><id>17871625</id><snippet>&gt;&gt;&gt; cells = ['Cat', 'Dog', 'Snake', 'Lion']
&gt;&gt;&gt; filter(lambda x: not 'cat' in x.lower(), cells)
['Dog', 'Snake', 'Lion']
</snippet></ROW><ROW><id>17871625</id><snippet>'cat'</snippet></ROW><ROW><id>17871625</id><snippet>not</snippet></ROW><ROW><id>17871625</id><snippet>&gt;&gt;&gt; filter(lambda x: 'cat' in x.lower(), cells)
['Cat']
</snippet></ROW><ROW><id>17871625</id><snippet>&gt;&gt;&gt; [elem for elem in cells if 'cat' in elem.lower()]
['Cat']
</snippet></ROW><ROW><id>17872068</id><snippet>import re
try:
    # py3
    from urllib.request import Request, urlopen
    from urllib.parse import urlencode
except ImportError:
    # py2
    from urllib2 import Request, urlopen
    from urllib import urlencode

def _request(symbol, stat):
    url = 'http://finance.yahoo.com/d/quotes.csv?s=%s&amp;f=%s' % (symbol, stat)
    req = Request(url)
    resp = urlopen(req)
    return str(resp.read().decode('utf-8').strip())

def get_price(symbol):
    return _request(symbol, 'l1')

def get_market_cap(symbol):
    return _request(symbol, 'j1')

symbols = open("symbolslist.txt")
readsymbols = symbols.read()
NewSymbolsList = readsymbols.split("\n")

with open('symbolslist.txt') as ifp, open('intermediateresults.csv', 'a') as results_fp:
    for row in ifp:
        row = row.strip()
        api = [ get_price(row), get_market_cap(row) ]
        api = re.sub("\[\'|\'|\]", "", str(api))
        results_fp.write(str(row) +"," +str(api) +"\n")
        print row, api
</snippet></ROW><ROW><id>17872068</id><snippet>Marks-MBP:~ mroberts$ python aa.py
AAAE 0.005, 171K
RENT 22.07, 262.4M
</snippet></ROW><ROW><id>17872195</id><snippet>import email
msg = email.message_from_string(email_string)
msg['from']  # 'root@a1.local.tld'
msg['to']    # 'ooo@a1.local.tld'
</snippet></ROW><ROW><id>17872410</id><snippet>--merge</snippet></ROW><ROW><id>17872546</id><snippet>a</snippet></ROW><ROW><id>17872546</id><snippet>def replace_spy(a):
    a[2] += 1
</snippet></ROW><ROW><id>17872724</id><snippet>Number</snippet></ROW><ROW><id>17872724</id><snippet>ABC</snippet></ROW><ROW><id>17872892</id><snippet>import functools</snippet></ROW><ROW><id>17872934</id><snippet>sqlite3</snippet></ROW><ROW><id>17872934</id><snippet>SQLITE_MAX_COLUMN</snippet></ROW><ROW><id>17872934</id><snippet>import sqlite3

def max_columns():
    db = sqlite3.connect(':memory:')
    low = 1
    high = 32767  # hard limit &lt;http://www.sqlite.org/limits.html&gt;
    while low &lt; high - 1:
        guess = (low + high) // 2
        try:
            db.execute('CREATE TABLE T%d (%s)' % (
                guess, ','.join('C%d' % i for i in range(guess))
            ))
        except sqlite3.DatabaseError as ex:
            if 'too many columns' in str(ex):
                high = guess
            else:
                raise
        else:
            low = guess
    return low
</snippet></ROW><ROW><id>17872934</id><snippet>timeit.repeat()</snippet></ROW><ROW><id>17872934</id><snippet>&gt;&gt;&gt; max_columns()
2000
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.repeat(
...     "max_columns()", 
...     setup="from __main__ import max_columns",
...     number=50
... )
[10.347190856933594, 10.0917809009552, 10.320987939834595]
</snippet></ROW><ROW><id>17873166</id><snippet>\n</snippet></ROW><ROW><id>17873166</id><snippet>&gt;&gt;&gt; msg = email.message_from_string(aaa.strip())
&gt;&gt;&gt; msg.keys()
['Received', 'Received', 'From', 'Subject', 'To', 'Cc', 'X-Originating-IP', 'X-Mailer', 'Message-Id', 'Date', 'MIME-Version', 'Content-Type']
&gt;&gt;&gt; msg['From']
'root@a1.local.tld'
</snippet></ROW><ROW><id>17873179</id><snippet>defaultdict</snippet></ROW><ROW><id>17873179</id><snippet>from collections import defaultdict

y = defaultdict(list)

for key, values in x.items():  # .iteritems() in Python 2
    for value in values:
        y[value].append(key)
</snippet></ROW><ROW><id>17873185</id><snippet>()</snippet></ROW><ROW><id>17873185</id><snippet>or</snippet></ROW><ROW><id>17873185</id><snippet>{%if newreport_tab and reportperson and incident.manual_date and media  and followup and incident.other_location or location and incident.other_incident_type and types%}&lt;a href="{% url incident.views.savereport %}"&gt;{% include "buttons/saveandclose.html" %}&lt;/a&gt;{%else%}{% include "buttons/saveandclose.html" %}{%endif%}
</snippet></ROW><ROW><id>17873185</id><snippet>or</snippet></ROW><ROW><id>17873185</id><snippet>{%if newreport_tab and reportperson and incident.manual_date and media  and followup and someresult and incident.other_incident_type and types%}&lt;a href="{% url incident.views.savereport %}"&gt;{% include "buttons/saveandclose.html" %}&lt;/a&gt;{%else%}{% include "buttons/saveandclose.html" %}{%endif%}
</snippet></ROW><ROW><id>17873397</id><snippet>E0_copy</snippet></ROW><ROW><id>17873397</id><snippet>list()</snippet></ROW><ROW><id>17873397</id><snippet>list(...)</snippet></ROW><ROW><id>17873397</id><snippet>testList[:]</snippet></ROW><ROW><id>17873397</id><snippet>copy.deepcopy(...)</snippet></ROW><ROW><id>17873397</id><snippet>deepcopy(x, memo=None, _nil=[])
    Deep copy operation on arbitrary Python objects.
</snippet></ROW><ROW><id>17873397</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; b = list(a)
&gt;&gt;&gt; a
[[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; b
[[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; a[0][1] = 10
&gt;&gt;&gt; a
[[1, 10, 3], [4, 5, 6]]
&gt;&gt;&gt; b   # b changes too -&gt; Not a deepcopy.
[[1, 10, 3], [4, 5, 6]]
</snippet></ROW><ROW><id>17873397</id><snippet>deepcopy</snippet></ROW><ROW><id>17873397</id><snippet>&gt;&gt;&gt; b = copy.deepcopy(a)
&gt;&gt;&gt; a
[[1, 10, 3], [4, 5, 6]]
&gt;&gt;&gt; b
[[1, 10, 3], [4, 5, 6]]
&gt;&gt;&gt; a[0][1] = 9
&gt;&gt;&gt; a
[[1, 9, 3], [4, 5, 6]]
&gt;&gt;&gt; b    # b doesn't change -&gt; Deep Copy
[[1, 10, 3], [4, 5, 6]]
</snippet></ROW><ROW><id>17873434</id><snippet>np.ix_()</snippet></ROW><ROW><id>17873434</id><snippet>np.sum()</snippet></ROW><ROW><id>17873434</id><snippet>axis=-1</snippet></ROW><ROW><id>17873434</id><snippet>import numpy as np

### original code
def f(a, b, arr):
    X = a * np.exp(-arr**2 / b)
    return np.sum(a * np.log(X) - arr)

A_axis = np.linspace(1, 5, 8)
B_axis = np.linspace(1, 2, 9)
XX, YY = np.meshgrid(A_axis, B_axis)
arr = np.arange(10)
ZZ = np.empty_like(XX)
for i in range(XX.shape[0]):
    for j in range(YY.shape[1]):
        ZZ[i,j] = f(XX[i,j], YY[i,j], arr)

### use broadcast        
def f(a, b, arr):
    X = a * np.exp(-arr**2 / b)
    return np.sum(a * np.log(X) - arr, axis=-1)
B, A, C = np.ix_(B_axis, A_axis, arr)
result = f(A, B, C)

print np.allclose(ZZ, result)
</snippet></ROW><ROW><id>17873551</id><snippet>\r</snippet></ROW><ROW><id>17873551</id><snippet>\</snippet></ROW><ROW><id>17873551</id><snippet>'data\\report.jpg'
</snippet></ROW><ROW><id>17873551</id><snippet>r'data\report.jpg'
</snippet></ROW><ROW><id>17873622</id><snippet>import yaml

config_file = open('myFile', 'r')
config = yaml.read(config_file)

keys = config.keys()
values = config.values()

for key,val in zip(keys,values):
    if key not in locals():
        locals()[key] = val
    else:
        locals()[key+"_yaml"] = val
</snippet></ROW><ROW><id>17873675</id><snippet>class Sparring():
    def __init__(self, mywins = 0, hiswins = 0):
        self.mywins = mywins
        self.hiswins = hiswins

    def my_score(self):
        self.mywins += 1

    def his_score(self):
        self.hiswins += 1

    @property
    def best (self):
        return max ( [self.mywins, self.hiswins] )
</snippet></ROW><ROW><id>17873675</id><snippet>def fight_match():
    print "Okay you're in the ring, ready to go three rounds with this dude"
    print "He throws a left hook, which way will you dodge?"

    dodge = raw_input()
    fight1 = Sparring()

    while fight1.best != 2:
        if 'right' in dodge:
            print "Nice job, you knocked him out!"
            fight1.my_score()
        else:
            print 'Oh no he knocked you out'
            fight1.his_score()
</snippet></ROW><ROW><id>17873675</id><snippet>    fight1 = Sparring()

    while fight1.best != 2:
        dodge = raw_input()
        if 'right' in dodge:
            print "Nice job, you knocked him out!"
            fight1.my_score()
        else:
            print 'Oh no he knocked you out'
            fight1.his_score()
</snippet></ROW><ROW><id>17873675</id><snippet>import random

class Fight:
        def __init__ (self): self.scores = [0, 0]
        def heScores (self): self.scores [1] += 1
        def youScore (self): self.scores [0] += 1

        @property
        def best (self): return max (self.scores)

        @property
        def winner (self): return 'You win.' if self.scores [0] &gt; self.scores [1] else 'He wins.'

fight = Fight ()
print ('Fight begins.')
question, answer = 'left', 'right'
while fight.best != 2:
    if random.randint (0, 1): question, answer = answer, question
    if answer in input ('He throws a {} hook, which way will you dodge? '.format (question) ):
        print ('Nice job, you knocked him out.')
        fight.youScore ()
    else:
        print ('Oh no, he knocked you out.')
        fight.heScores ()
print (fight.winner)
</snippet></ROW><ROW><id>17873675</id><snippet>_ = [print ('Fight!'), print ('You won.' if (lambda a, b: (lambda a, *b: a (a, *b) ) ( (lambda a, b, c, d, e: e if max (e) == 2 else a (a, b, c, c (b), [print ('Nice job, you knocked him out.'), (1 + e [0], 0 + e [1] )] [1] if d [1] in input ('He throws a {} hook, which way will you dodge? '.format (d [0] ) ) else [print ('Oh no, he knocked you out.'), (0 + e [0], 1 + e [1] )] [1] ) ), b, a, a (b), (0, 0) ) ) ( (lambda a: ('left', 'right') if a.randint (0, 1) else ('right', 'left') ), __import__ ('random') ) [0] == 2 else 'He won.') ]
</snippet></ROW><ROW><id>17873868</id><snippet>past_val</snippet></ROW><ROW><id>17874286</id><snippet>new_user = User()
user_settings = UserSettings()
user_settings.default_cal = resp['calendar']
new_user.settings = user_settings
# more stuff
new_user.save()
</snippet></ROW><ROW><id>17874286</id><snippet>settings = db.EmbeddedDocumentField(UserSettings, default=UserSettings)
</snippet></ROW><ROW><id>17874427</id><snippet>b = email.message_from_string(a)
if b.is_multipart():
    for payload in b.get_payload():
        # if payload.is_multipart(): ...
        print payload.get_payload()
else:
    print payload.get_payload()
</snippet></ROW><ROW><id>17874761</id><snippet>def values_to_insert(self, a, b):
</snippet></ROW><ROW><id>17874820</id><snippet>minutes = row[1]/1000/60
seconds = row[1]/1000 - minutes * 60
result = str(minutes) + ":" + str(seconds)
</snippet></ROW><ROW><id>17874820</id><snippet>&gt;&gt;&gt; millis = 343000
&gt;&gt;&gt; minutes = millis/1000/60
&gt;&gt;&gt; seconds = millis/1000 - minutes * 60
&gt;&gt;&gt; result = str(minutes) + ":" + str(seconds)
&gt;&gt;&gt; print result
5:43
</snippet></ROW><ROW><id>17875036</id><snippet>&gt;&gt;&gt; d = {1:[1,6,16],2:[1],7:[6]}
&gt;&gt;&gt; for lst in d.values(): lst[:] = [x for x in lst if x &gt;= 16]
... 
&gt;&gt;&gt; d
{1: [16], 2: [], 7: []}
&gt;&gt;&gt; for k in list(d):
...     if not d[k]:
...         del d[k]
... 
&gt;&gt;&gt; d
{1: [16]}
</snippet></ROW><ROW><id>17875036</id><snippet>&gt;&gt;&gt; d = {1:[1,6,16],2:[1],7:[6]}
&gt;&gt;&gt; tmp = [(k, [x for x in lst if x &gt;= 16]) for k, lst in d.items()]
&gt;&gt;&gt; d = {k: v for k, v in tmp if v}
&gt;&gt;&gt; d
{1: [16]}
</snippet></ROW><ROW><id>17875036</id><snippet>&gt;&gt;&gt; d = {1:[1,6,16],2:[1],7:[6]}
&gt;&gt;&gt; for k in list(d):
...     d[k] = d[k][bisect.bisect_left(d[k], 16):]
...     if not d[k]:
...         del d[k]
... 
&gt;&gt;&gt; d
{1: [16]}
</snippet></ROW><ROW><id>17875079</id><snippet>y</snippet></ROW><ROW><id>17875079</id><snippet>y</snippet></ROW><ROW><id>17875079</id><snippet>def parse_file(x):
    y = []
    with open(x, 'r') as f:
        for line in f:
            if (line.strip()).isdigit():
                y.append(int(line.strip()))
    return y

y = parse_file(x)
</snippet></ROW><ROW><id>17875113</id><snippet>&lt;</snippet></ROW><ROW><id>17875113</id><snippet>&gt;</snippet></ROW><ROW><id>17875113</id><snippet>current_time = datetime.datetime.utcnow()

ten_weeks_ago = current_time - datetime.timedelta(weeks=10)

subjects_within_the_last_ten_weeks = session.query(Subject).filter(
    Subject.time &gt; ten_weeks_ago).all()
</snippet></ROW><ROW><id>17875113</id><snippet>WHERE</snippet></ROW><ROW><id>17875443</id><snippet>type nul&gt;running.ind
rem here is the code of your abat
del running.ind
</snippet></ROW><ROW><id>17875443</id><snippet>:loop
if not exist running.ind goto :main
rem wait fife seconds
ping -n 6 localhost &gt;nul
goto :loop
:main
rem more code here
</snippet></ROW><ROW><id>17875702</id><snippet>import urllib
from bs4 import BeautifulSoup

url = 'http://biology.burke.washington.edu/conus/recordview/description.php?ID=1l9l0l421l55llll&amp;tabs=21100111&amp;frms=1&amp;pglimit=A&amp;offset=&amp;res=&amp;srt=&amp;sql2='

html = urllib.urlopen(url).read()
soup = BeautifulSoup(html)
tables = soup.find_all('table')
#print(tables)
</snippet></ROW><ROW><id>17875702</id><snippet>from selenium import webdriver
from bs4 import BeautifulSoup

url = "http://biology.burke.washington.edu/conus/accounts/../recordview/record.php?ID=1ll&amp;tabs=21100111&amp;frms=1&amp;res=&amp;pglimit=A"

driver = webdriver.Firefox()
driver.get(url)
driver.switch_to_frame(driver.find_elements_by_tag_name('iframe')[0])
soup = BeautifulSoup(driver.page_source)
tables = soup.find_all('table')
#print(tables)
driver.quit()
</snippet></ROW><ROW><id>17875950</id><snippet>diff = list(difflib.unified_diff(fromlines, tolines, n=0))
if diff:
    ...
    sys.stdout.writelines(diff)
else:
    ...
</snippet></ROW><ROW><id>17875950</id><snippet>diff = difflib.unified_diff(fromlines, tolines, n=0)
f = False
for line in diff:
    if not f:
        print("Differences found!")
        f = True
    sys.stdout.write(line)

if not f:
    print("OK!")
</snippet></ROW><ROW><id>17875965</id><snippet>EquipmentAdmin</snippet></ROW><ROW><id>17875965</id><snippet>Equipment</snippet></ROW><ROW><id>17875965</id><snippet>from django import forms
from django.contrib import admin
from flightdeck.models import Equipment

class EquipmentAdminForm(forms.ModelForm):
    reason = forms.CharField()

    class Meta:
        model = Equipment
</snippet></ROW><ROW><id>17875965</id><snippet>django.db.models.get_model('app', 'model')</snippet></ROW><ROW><id>17876094</id><snippet>imp</snippet></ROW><ROW><id>17876094</id><snippet>import imp
foo = imp.load_source('filename', 'File\Directory\filename.py')
</snippet></ROW><ROW><id>17876094</id><snippet>foo</snippet></ROW><ROW><id>17876094</id><snippet>foo.method()
</snippet></ROW><ROW><id>17876094</id><snippet>import sys
sys.path.append('folder_name')
</snippet></ROW><ROW><id>17876174</id><snippet>collections.deque</snippet></ROW><ROW><id>17876174</id><snippet>popleft</snippet></ROW><ROW><id>17876174</id><snippet>1000000</snippet></ROW><ROW><id>17876174</id><snippet>maxlen</snippet></ROW><ROW><id>17876203</id><snippet>random.sample(population, k)</snippet></ROW><ROW><id>17876203</id><snippet>population</snippet></ROW><ROW><id>17876203</id><snippet>k</snippet></ROW><ROW><id>17876203</id><snippet>population</snippet></ROW><ROW><id>17876203</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; population=[1,2,3,4,5,6,7,8,9,10,11,12,]
&gt;&gt;&gt; ls=random.sample(population,5)
&gt;&gt;&gt; ls
[1, 11, 7, 12, 6]
</snippet></ROW><ROW><id>17876203</id><snippet>ls</snippet></ROW><ROW><id>17876203</id><snippet>&gt;&gt;&gt; ls[:3]
[1, 11, 7]
</snippet></ROW><ROW><id>17876203</id><snippet>ls</snippet></ROW><ROW><id>17876203</id><snippet>[1,6,7,11,12]
</snippet></ROW><ROW><id>17876203</id><snippet>[1, 6, 7]</snippet></ROW><ROW><id>17876298</id><snippet>BaseException</snippet></ROW><ROW><id>17876298</id><snippet>SystemExit</snippet></ROW><ROW><id>17876298</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>17876298</id><snippet>GeneratorExit</snippet></ROW><ROW><id>17876298</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>17876298</id><snippet>try: ... except: ...</snippet></ROW><ROW><id>17876526</id><snippet>breakAtDateLine=TRUE</snippet></ROW><ROW><id>17876526</id><snippet>gcIntermediate()</snippet></ROW><ROW><id>17876526</id><snippet>gg</snippet></ROW><ROW><id>17876526</id><snippet>library(mapdata)
library(geosphere)
lon_nj&lt;-118.7969
lat_nj&lt;-32.06025
location&lt;-structure(list(Index = 1:8, lon = c(2.352222, -72.922343, 108.926694, 
-79.944163, -117.328119, -79.953423, -84.396285, -95.712891), 
    lat = c(48.85661, 41.31632, 34.25005, 40.44306, 33.97329, 
    40.4442, 33.77562, 37.09024)), .Names = c("Index", "lon", 
"lat"), class = "data.frame", row.names = c(NA, -8L))

gg&lt;-lapply(1:length(location$lon),function(j) {
  gcIntermediate(c(lon_nj, lat_nj), c(location$lon[j], 
                                      location$lat[j]), n=100,
                 breakAtDateLine=TRUE,
                 addStartEnd=TRUE)
})
</snippet></ROW><ROW><id>17876526</id><snippet>gg2&lt;-unlist(lapply(gg, function(x) 
  if (class(x) == "list") x else list(x)), recursive=FALSE)
</snippet></ROW><ROW><id>17876526</id><snippet>lapply()</snippet></ROW><ROW><id>17876526</id><snippet>map("world)</snippet></ROW><ROW><id>17876526</id><snippet>map("world")
lapply(gg2,lines)
</snippet></ROW><ROW><id>17876526</id><snippet>map('world2Hires')</snippet></ROW><ROW><id>17876526</id><snippet>x</snippet></ROW><ROW><id>17876526</id><snippet>map('world2Hires')
lapply(gg2,function(x) lines(ifelse(x[,1]&gt;0,x[,1],x[,1]+360),x[,2]))
</snippet></ROW><ROW><id>17876639</id><snippet>ax = fig.add_subplot(111)

ax.plot(x1, np.zeros(x1.shape), 'b+', ms=20)  # rug plot
x_eval = np.linspace(-10, 10, num=200)
ax.plot(x_eval, kde1(x_eval), 'k-', label="Scott's Rule")
ax.plot(x_eval, kde1(x_eval), 'r-', label="Silverman's Rule")
</snippet></ROW><ROW><id>17876798</id><snippet>class CaptchaFormBase(forms.Form):  # or forms.ModelForm, if appropriate

    captcha = CaptchaField()

    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request')  
        # this is the same as assigning to self request then deleting the key

        super(CaptchaFormBase, self).__init__(*args, **kwargs)


    def clean(self):
        cleaned_data = super(CaptchaFormBase, self).clean()

        success = self.is_valid()
        utils.update_captcha_access(self.request, success)

        if not success:
            # this will put things in non_field_errors, you may want to put it in self.errors['captcha']
            raise forms.ValidationError("Captcha validation failed")

        # always make it easy to see that you're returning cleaned_data
        return self.cleaned_data


class PostCaptchaForm(PostForm, CaptchaFormBase):
    pass


class ThreadCaptchaForm(ThreadForm, CaptchaFormBase):
    pass
</snippet></ROW><ROW><id>17876835</id><snippet>(\d{2,3}\.)+\d{2,3}</snippet></ROW><ROW><id>17876835</id><snippet>"111.11"</snippet></ROW><ROW><id>17877339</id><snippet>#urls.py

urlpatterns = patterns('',

    url(r'^downloads/(?P&lt;parent_id&gt;\d+)/$', ParentView.as_view(), name='parents_list'),
    url(r'^downloads/(?P&lt;parent_id&gt;\d+)/(?P&lt;child_id&gt;\d+)/$', ChildView.as_view(),
                                    name='childs_list'),
)
</snippet></ROW><ROW><id>17878080</id><snippet>str.encode('string-escape')</snippet></ROW><ROW><id>17878080</id><snippet>&gt;&gt;&gt; '12\t34\n'.encode('string-escape')
'12\\t34\\n'
&gt;&gt;&gt; '12\\t34\\n'.decode('string-escape')
'12\t34\n'
</snippet></ROW><ROW><id>17878080</id><snippet>str.encode('unicode-escape')</snippet></ROW><ROW><id>17878080</id><snippet>str.encode('unicode-escape').decode('utr-8")</snippet></ROW><ROW><id>17878080</id><snippet>&gt;&gt;&gt; '12\t34\n'.encode('unicode-escape')
b'12\\t34\\n'
&gt;&gt;&gt; b'12\\t34\\n'.decode('unicode-escape')
'12\t34\n'

&gt;&gt;&gt; '12\t34\n'.encode('unicode-escape').decode('utf-8')
'12\\t34\\n'
&gt;&gt;&gt; '12\\t34\\n'.encode('utf-8').decode('unicode-escape')
'12\t34\n'
</snippet></ROW><ROW><id>17878135</id><snippet>pd.read_csv('test.csv', sep='\s+#\s+', header=None).set_index(0)
</snippet></ROW><ROW><id>17878866</id><snippet>data = []
with open("file.txt") as f:
    for line in f:
        lineData = {}
        lineSplit = line.split()
        for i in range(1,len(lineSplit)-1,2):
            lineData[lineSplit[i]] = lineSplit[i+1]
        data.append(lineData)
print data
</snippet></ROW><ROW><id>17878866</id><snippet>[{'Origin': 'Time', 'D': '65.33383', 'BAZ': '308.1043', 'Long': '126.58', 'Month': '01', 'Mag': '6.4', 'Year': '2001', 'Lat': '6.90', 'Day': '01'}]
</snippet></ROW><ROW><id>17878943</id><snippet>query</snippet></ROW><ROW><id>17878943</id><snippet>PyArg_ParseTupleAndKeywords</snippet></ROW><ROW><id>17878943</id><snippet>&amp;parent_slug,</snippet></ROW><ROW><id>17878943</id><snippet>if (!PyArg_ParseTupleAndKeywords(
        args, kwargs, "OO!O!O!ii|iOOO!O!", kwlist,
        &amp;page_slug, &amp;PyList_Type, &amp;keys,
        &amp;PyDict_Type, &amp;facets, &amp;PyDict_Type, &amp;categories, 
        &amp;max_level, &amp;current_level, &amp;level, &amp;parent_slug,
        &amp;query, &amp;PyBool_Type, &amp;include_category, 
        &amp;PyBool_Type, &amp;include_ancestor)) {
    return NULL;
}
</snippet></ROW><ROW><id>17878943</id><snippet>O   &amp;page_slug
O!  &amp;PyList_Type, &amp;keys
O!  &amp;PyDict_Type, &amp;facets
O!  &amp;PyDict_Type, &amp;categories
i   &amp;max_level
i|  &amp;current_level
i   &amp;level
O   &amp;parent_slug
O   ---
O!  &amp;PyBool_Type, &amp;include_category
O!  &amp;PyBool_Type, &amp;include_ancestor
</snippet></ROW><ROW><id>17879173</id><snippet>240 / 2 = 120</snippet></ROW><ROW><id>17879173</id><snippet>blue_lower=np.array([100,150,0],np.uint8)
blue_upper=np.array([140,255,255],np.uint8)
</snippet></ROW><ROW><id>17879176</id><snippet>round(error, 2)</snippet></ROW><ROW><id>17879176</id><snippet>&gt;&gt;&gt; round(0.43233213213232, 2)
0.43
</snippet></ROW><ROW><id>17879176</id><snippet>&gt;&gt;&gt; format(round(0.43233213213232, 2), '.15f')
'0.430000000000000'
&gt;&gt;&gt; format(0.43233213213232, '.15f')
'0.432332132132320'
</snippet></ROW><ROW><id>17879176</id><snippet>elem_rounded = int(round(float(elem[0])))
if int(array_Y[counter2]) == elem_rounded:
    if not elem_rounded:
        negatiu_verdader += 1
    elif elem_rounded == 1:
        positiu_verdader += 1
        counter += 1
        counter2 += 1

    error =  1.0 - (1.0 * counter / counter2)
    print "        ERROR!!!!!!!!!!!!!!!!!!!!!!!! :{0:.15f}".format(error)
</snippet></ROW><ROW><id>17879471</id><snippet>TypeError: m &gt;= (kx+1)(ky+1) must hold
</snippet></ROW><ROW><id>17879471</id><snippet>m</snippet></ROW><ROW><id>17879471</id><snippet>len(X)</snippet></ROW><ROW><id>17879471</id><snippet>len(Y)</snippet></ROW><ROW><id>17879471</id><snippet>len(Z)</snippet></ROW><ROW><id>17879471</id><snippet>kx</snippet></ROW><ROW><id>17879471</id><snippet>ky</snippet></ROW><ROW><id>17879471</id><snippet>x</snippet></ROW><ROW><id>17879471</id><snippet>y</snippet></ROW><ROW><id>17879471</id><snippet>z</snippet></ROW><ROW><id>17879471</id><snippet>import scipy.interpolate as interpolate

x = [1,2,1,2,1,3,2,3,3]
y = [1,2,2,1,3,1,3,2,3]
z = [1,2,1,2,0,0,0,0,0]

kx, ky = 2, 2  # spline order
tck = interpolate.bisplrep(x, y, z, kx=kx, ky=ky)
print(interpolate.bisplev(1.5,1.5,tck))
</snippet></ROW><ROW><id>17879471</id><snippet>2.109375
</snippet></ROW><ROW><id>17879786</id><snippet>[data2]</snippet></ROW><ROW><id>17879786</id><snippet>data3 = []
for i in range(len(data1)):
    for j in range(len(data2)):
        if data1[i][1]['code'][0] in data2[j][0]:
            data3.append([data1[i][0], data2[j][1], data2[j][2]])
</snippet></ROW><ROW><id>17879786</id><snippet>data3 = []
for i in data1:
    for j in data2:
        if i[1]['code'][0] in j[0]:
            data3.append([i[0], j[1], j[2]])
</snippet></ROW><ROW><id>17880239</id><snippet>Examples
--------

-   

    Given an XML-file note.xml, which contains:

    ::

        &lt;note&gt;
            &lt;to&gt;Tove&lt;/to&gt;
            &lt;from&gt;Jani&lt;/from&gt;
            &lt;heading&gt;Reminder&lt;/heading&gt;
            &lt;body&gt;Don't forget me this weekend!&lt;/body&gt;
        &lt;/note&gt;

    After executing the following code:

    ::

        xml = loadxml ("&lt;your path to file&gt;/note.xml");
        parent = xpath(xml, "//note"); //get main node
        addsubnode (parent, "&lt;comment&gt;Comments are welcome.&lt;/comment&gt;");
</snippet></ROW><ROW><id>17880376</id><snippet>from lru.views import *</snippet></ROW><ROW><id>17880376</id><snippet>urlpatterns = patterns('',
    url(r'^$', index, name='index')
</snippet></ROW><ROW><id>17880376</id><snippet>from lru import views</snippet></ROW><ROW><id>17880376</id><snippet>urlpatterns = patterns('',
    url(r'^$', 'views.index', name='index')
</snippet></ROW><ROW><id>17880822</id><snippet>if x == [3,5,7,10,47,5,11]:
    print 'match'
</snippet></ROW><ROW><id>17880855</id><snippet>random.shuffle()</snippet></ROW><ROW><id>17880855</id><snippet>import random

words = ["python", "java", "constant", "immutable"]
random.shuffle(words)
print(*words)

input('')
</snippet></ROW><ROW><id>17880855</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; words = ["python", "java", "constant", "immutable"]
&gt;&gt;&gt; random.shuffle(words)
&gt;&gt;&gt; words
['python', 'java', 'constant', 'immutable']
</snippet></ROW><ROW><id>17880855</id><snippet>words</snippet></ROW><ROW><id>17880855</id><snippet>sorted()</snippet></ROW><ROW><id>17880855</id><snippet>words = ["python", "java", "constant", "immutable"]
print(*sorted(words, key=lambda k: random.random()))
</snippet></ROW><ROW><id>17880855</id><snippet>words</snippet></ROW><ROW><id>17880855</id><snippet>&gt;&gt;&gt; words = ["python", "java", "constant", "immutable"]
&gt;&gt;&gt; sorted(words, key=lambda k: random.random())
['immutable', 'java', 'constant', 'python']
&gt;&gt;&gt; words
['python', 'java', 'constant', 'immutable']
</snippet></ROW><ROW><id>17880857</id><snippet>[list(i) + j for i, j in dict([(tuple(x[:2]), x[2:]) for x in sorted(thing, key=lambda x:len(x))]).items()]
</snippet></ROW><ROW><id>17880857</id><snippet>thing = [[20,0,1],[20,0,2],[20,1,1],[20,0],[30,1,1]]
dico = {}
for x in thing:
    if not tuple(x[:2]) in dico:
        dico[tuple(x[:2])] = x[2:]
        continue
    if tuple(x[:2])[1] &lt; x[1]:
        dico[tuple(x[:2])] = x[2:]

new_thing = []
for i, j in dico.items():
    new_thing.append(list(i) + j)
</snippet></ROW><ROW><id>17880895</id><snippet>shell=True</snippet></ROW><ROW><id>17880895</id><snippet>subprocess.call</snippet></ROW><ROW><id>17880895</id><snippet>subprocess.call('cp -r ./testdir1/* ./testdir2/', shell=True)
</snippet></ROW><ROW><id>17880895</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17880895</id><snippet>subprocess.call</snippet></ROW><ROW><id>17881014</id><snippet>&gt;&gt;&gt; def f():
...     a, b = self.mytuple
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_GLOBAL              0 (self) 
              3 LOAD_ATTR                1 (mytuple) 
              6 UNPACK_SEQUENCE          2 
              9 STORE_FAST               0 (a) 
             12 STORE_FAST               1 (b) 
             15 LOAD_CONST               0 (None) 
             18 RETURN_VALUE         
</snippet></ROW><ROW><id>17881014</id><snippet>self.mytuple</snippet></ROW><ROW><id>17881014</id><snippet>tuple</snippet></ROW><ROW><id>17881014</id><snippet>mytuple</snippet></ROW><ROW><id>17881014</id><snippet>__getitem__</snippet></ROW><ROW><id>17881278</id><snippet>for i, line in enumerate(report['ipconfig']):
    report['ipconfig'][i] = line.decode('cp866') 
</snippet></ROW><ROW><id>17881328</id><snippet>&gt;&gt;&gt; min('603', '94')
'603'
</snippet></ROW><ROW><id>17881328</id><snippet>'6'</snippet></ROW><ROW><id>17881328</id><snippet>'9'</snippet></ROW><ROW><id>17881328</id><snippet>int()</snippet></ROW><ROW><id>17881328</id><snippet>vals = re.findall(r'&lt;td&gt;(\d+)&lt;/td&gt;&lt;td&gt;(\w+)&lt;/td&gt;&lt;td&gt;(\w+)&lt;/td&gt;', f)
for n, m, f in vals:
    n = int(n)
    # ...
</snippet></ROW><ROW><id>17881328</id><snippet>repr()</snippet></ROW><ROW><id>17881328</id><snippet>str()</snippet></ROW><ROW><id>17881328</id><snippet>repr()</snippet></ROW><ROW><id>17881328</id><snippet>'94'</snippet></ROW><ROW><id>17881328</id><snippet>94</snippet></ROW><ROW><id>17881859</id><snippet>df.dropna(subset=['colname'])
</snippet></ROW><ROW><id>17881859</id><snippet>df[df['colname'].notnull()]
</snippet></ROW><ROW><id>17881881</id><snippet>layout_frame</snippet></ROW><ROW><id>17881881</id><snippet>grid</snippet></ROW><ROW><id>17881881</id><snippet>grid</snippet></ROW><ROW><id>17881881</id><snippet>layout_frame = tk.Frame(master, bg="red")
layout_frame.grid(row=1, column=2, rowspan=9, sticky=tk.N+tk.S+tk.W+tk.E)
inner_frame = tk.Frame(master=layout_frame, bg="red")
inner_frame.grid(row=0, column=0, rowspan=9, sticky=tk.N+tk.S+tk.W+tk.E)
</snippet></ROW><ROW><id>17881986</id><snippet>.txt</snippet></ROW><ROW><id>17881986</id><snippet>r[2]</snippet></ROW><ROW><id>17881986</id><snippet>wtr.writerow((r[2] + '.txt', r[3]))
</snippet></ROW><ROW><id>17881986</id><snippet>csv.writer()</snippet></ROW><ROW><id>17881986</id><snippet>wtr = csv.writer(result, delimiter=' ')
</snippet></ROW><ROW><id>17882232</id><snippet>numpy</snippet></ROW><ROW><id>17882232</id><snippet>[(:, i)]</snippet></ROW><ROW><id>17882232</id><snippet>numpy</snippet></ROW><ROW><id>17882232</id><snippet>:</snippet></ROW><ROW><id>17882232</id><snippet>i</snippet></ROW><ROW><id>17882232</id><snippet>numpy</snippet></ROW><ROW><id>17882383</id><snippet>dtype.descr</snippet></ROW><ROW><id>17882383</id><snippet>&gt;&gt;&gt; d = np.dtype([('value1','&lt;f8'),('value2','&lt;f8')])
&gt;&gt;&gt; [x[0] for x in d.descr]
['value1', 'value2']
</snippet></ROW><ROW><id>17882383</id><snippet>&gt;&gt;&gt; [x[1] for x in d.descr]
['&lt;f8', '&lt;f8']
</snippet></ROW><ROW><id>17882408</id><snippet>autoescape</snippet></ROW><ROW><id>17882408</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>17882408</id><snippet>linebreaksbr</snippet></ROW><ROW><id>17882408</id><snippet>{% autoescape on %}
    {{ contact.info | linebreaksbr }}
{% endautoescape %}
</snippet></ROW><ROW><id>17882633</id><snippet>%div{:id =&gt; "id___all__"}
</snippet></ROW><ROW><id>17882633</id><snippet>$('#non_field_errors');
</snippet></ROW><ROW><id>17882633</id><snippet>jQuery.each(errors, function(i, error) {
    if (field != '__all__') {
        $fieldId = $('#id_'+field);
    } else {
        $fieldId = $('#non_field_errors');
    }

    $fieldId.closest('.control-group').addClass('error');
    $fieldId.parent().append(
        $('&lt;span class="error_span"&gt;').addClass('help-inline').append(error));
    })
</snippet></ROW><ROW><id>17882633</id><snippet>$('#non_field_errors'); 
</snippet></ROW><ROW><id>17882633</id><snippet>$('#id___all__');
</snippet></ROW><ROW><id>17882928</id><snippet>import time

tenminutes = 600

while true:
  time.sleep(tenminutes)
  print "This is a reminder"
</snippet></ROW><ROW><id>17882939</id><snippet>re.compile(r'NSLocalizedString\(@"(?:\\.|[^"\\]*)",\s*@"(?:\\.|[^"\\]*)"\s*\)', re.DOTALL)
</snippet></ROW><ROW><id>17882939</id><snippet>r</snippet></ROW><ROW><id>17883573</id><snippet>res = []
my_initial_dict = {'aa':1,'bb':1}
for i in range(4):
    d = my_initial_dict.copy()
    d['aa'] = i + 4
    print d
    res.append(d)
print res
</snippet></ROW><ROW><id>17883716</id><snippet>url_pattern = 'ftp://ftp.cdc.noaa.gov/Datasets/ncep.reanalysis/surface/air.sig995.{}.nc'
for year in range(2006, 2012+1):
    url = url_pattern.format(year)
    print(url)
</snippet></ROW><ROW><id>17884008</id><snippet>import sys
import os
import random


class GrammarNaziError(SyntaxError):
    pass


class GrammarNaziImporter(object):
    def find_module(self, module_name, package_path):
        if package_path:
            search_paths = package_path
            module_name = module_name.split('.')[-1]

        else:
            search_paths = sys.path + [ '.' ]

        for i in search_paths:
            path = os.path.join(i, module_name)
            if os.path.isdir(path):
                path = os.path.join(path, '__init__.py')
            else:
                path += '.py'

            if os.path.exists(path):
                if not self.valid_syntax(path):
                    raise GrammarNaziError(
                        "The module %s failed Grammar Nazi Inspection" % path)

                break

    def valid_syntax(self, path):
        return random.randint(0, 10) # substitute with logic of your choice

rest = GrammarNaziImporter()
sys.meta_path.insert(0, rest)
</snippet></ROW><ROW><id>17884784</id><snippet>any()</snippet></ROW><ROW><id>17884784</id><snippet>if any(someList[0] in v for v in someDictionary.itervalues()):
    # item found
</snippet></ROW><ROW><id>17884784</id><snippet>someDictionary.values()</snippet></ROW><ROW><id>17884784</id><snippet>any()</snippet></ROW><ROW><id>17884784</id><snippet>True</snippet></ROW><ROW><id>17884784</id><snippet>next()</snippet></ROW><ROW><id>17884784</id><snippet>next((k for k, v in someDictionary.iteritems() if someList[0] in v), None)
</snippet></ROW><ROW><id>17884784</id><snippet>None</snippet></ROW><ROW><id>17884962</id><snippet># spell out the args that were passed to the Matlab function
N=10
Fc=40
Fs=1600
# provide them to firwin
h=scipy.signal.firwin( numtaps=N, cutoff=40, nyq=Fs/2)

y=scipy.signal.lfiter( h, 1.0, x) # 'x' is the time-series data you are filtering
</snippet></ROW><ROW><id>17884962</id><snippet>design</snippet></ROW><ROW><id>17884962</id><snippet>scipy</snippet></ROW><ROW><id>17884962</id><snippet>Hd.Numerator</snippet></ROW><ROW><id>17884962</id><snippet>h</snippet></ROW><ROW><id>17885133</id><snippet>if d['national_rank'] is not None:
    print d['national_rank'].span.text
</snippet></ROW><ROW><id>17885133</id><snippet>row.find("span", 'rankings-score')</snippet></ROW><ROW><id>17885133</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>17885152</id><snippet>def func1(*args, **kwargs)
    print args, kwargs
</snippet></ROW><ROW><id>17885152</id><snippet>() {}
</snippet></ROW><ROW><id>17885152</id><snippet>def func2(): pass
</snippet></ROW><ROW><id>17885152</id><snippet>func2(*(), **{})
</snippet></ROW><ROW><id>17885152</id><snippet>args</snippet></ROW><ROW><id>17885152</id><snippet>kwargs</snippet></ROW><ROW><id>17885207</id><snippet>canvas.postscript(file="tmp.ps", colormode='color')
process = subprocess.Popen(["ps2pdf", "tmp.ps", "result.pdf"], shell=True)
</snippet></ROW><ROW><id>17885207</id><snippet>addPostScriptCommand</snippet></ROW><ROW><id>17885207</id><snippet>"""
Setup for Ghostscript 9.07:

Download it from http://www.ghostscript.com/GPL_Ghostscript_9.07.html
and add `/path/to/gs9.07/bin/` and `/path/to/gs9.07/lib/` to your path.
"""

import Tkinter as tk
import subprocess
import os

class App(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.title("Canvas2PDF")
        self.line_start = None
        self.canvas = tk.Canvas(self, width=300, height=300, bg="white")
        self.canvas.bind("&lt;Button-1&gt;", lambda e: self.draw(e.x, e.y))
        self.button = tk.Button(self, text="Generate PDF",
                                command=self.generate_pdf)
        self.canvas.pack()
        self.button.pack(pady=10)

    def draw(self, x, y):
        if self.line_start:
            x_origin, y_origin = self.line_start
            self.canvas.create_line(x_origin, y_origin, x, y)
            self.line_start = None
        else:
            self.line_start = (x, y)

    def generate_pdf(self):
        self.canvas.postscript(file="tmp.ps", colormode='color')
        process = subprocess.Popen(["ps2pdf", "tmp.ps", "result.pdf"], shell=True)
        process.wait()
        os.remove("tmp.ps")
        self.destroy()

app = App()
app.mainloop()
</snippet></ROW><ROW><id>17885568</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.path.abspath(os.curdir)
C:\Python27
&gt;&gt;&gt; os.chdir("..")
&gt;&gt;&gt; print os.path.abspath(os.curdir)
C:\
</snippet></ROW><ROW><id>17885685</id><snippet>other_dictionary = defaultdict(list, ((k, v) for k, v in other_dictionary.iteritems() if k not in some_dictionary))
</snippet></ROW><ROW><id>17885685</id><snippet>defaultdict</snippet></ROW><ROW><id>17885685</id><snippet>list</snippet></ROW><ROW><id>17885685</id><snippet>iteritems()</snippet></ROW><ROW><id>17885788</id><snippet>strip</snippet></ROW><ROW><id>17885788</id><snippet>for line in itertools.islice(infile, 9, None):
    print line
</snippet></ROW><ROW><id>17885871</id><snippet>Unfortunately posts have a "expiration" date which after a while they no longer 
are turned by the API. The exact expiration date is in flux at the moment. The 
reason for that is to give the API users a "snapshop" view of the company instead 
of a lifetime view, thus keeping applications light and agile.

Thanks,
-Lee
</snippet></ROW><ROW><id>17885996</id><snippet>sum((a-b)**2)</snippet></ROW><ROW><id>17885996</id><snippet>sum(a**2) + sum(b**2) - 2*sum(a*b)</snippet></ROW><ROW><id>17885996</id><snippet>def sumsqdiff3(input_image, template):
    window_size = template.shape
    y = as_strided(input_image,
                    shape=(input_image.shape[0] - window_size[0] + 1,
                           input_image.shape[1] - window_size[1] + 1,) +
                          window_size,
                    strides=input_image.strides * 2)
    ssd = np.einsum('ijkl,kl-&gt;ij', y, template)
    ssd *= - 2
    ssd += np.einsum('ijkl, ijkl-&gt;ij', y, y)
    ssd += np.einsum('ij, ij', template, template)

    return ssd

In [288]: img = np.random.rand(500, 500)

In [289]: template = np.random.rand(3, 3)

In [290]: %timeit a = sumsqdiff2(img, template) # Warren's function
10 loops, best of 3: 59.4 ms per loop

In [291]: %timeit b = sumsqdiff3(img, template)
100 loops, best of 3: 18.2 ms per loop

In [292]: np.allclose(a, b)
Out[292]: True
</snippet></ROW><ROW><id>17885996</id><snippet>valid_mask</snippet></ROW><ROW><id>17885996</id><snippet>template</snippet></ROW><ROW><id>17885996</id><snippet>input_image</snippet></ROW><ROW><id>17886303</id><snippet>pi@raspberrypi ~ $ aptitude install bluetooth
pi@raspberrypi ~ $ hcitool dev
Devices:
   hci0   00:07:80:54:CA:E2

pi@raspberrypi ~ $ hcitool scan
Scanning ...
        00:07:80:54:CA:E2   BGWT11i

pi@raspberrypi ~ $ bluez-simple-agent hci0 00:07:80:54:CA:E2
Enter PIN Code: 1234
</snippet></ROW><ROW><id>17886303</id><snippet>pi@raspberrypi ~ $ python rfcomm-client.py 00:07:80:54:CA:E2
</snippet></ROW><ROW><id>17886314</id><snippet>def setQuery(self, query):
</snippet></ROW><ROW><id>17886314</id><snippet>QtSql.QSqlTableModel.setQuery</snippet></ROW><ROW><id>17886314</id><snippet>results = QtSql.QSqlTableModel.setQuery(self, query)
</snippet></ROW><ROW><id>17886499</id><snippet>def computer_guess(num):
    low = 1
    high = 100
    guess = 50
    while guess != num:
        guess = (low+high)//2
        print("The computer takes a guess...", guess)
        if guess &gt; num:
            high = guess
        elif guess &lt; num:
            low = guess + 1

    print("The computer guessed", guess, "and it was correct!")


def main():
    num = int(input("Enter a number: "))
    if num &lt; 1 or num &gt; 100:
        print("Must be in range [1, 100]")
    else:
        computer_guess(num)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17886499</id><snippet>Enter a number: 82
The computer takes a guess... 50
The computer takes a guess... 75
The computer takes a guess... 88
The computer takes a guess... 82
The computer guessed 82 and it was correct!
</snippet></ROW><ROW><id>17886499</id><snippet>low = 1</snippet></ROW><ROW><id>17886499</id><snippet>high = 100</snippet></ROW><ROW><id>17886499</id><snippet>guess = 50</snippet></ROW><ROW><id>17886499</id><snippet>low = 51</snippet></ROW><ROW><id>17886499</id><snippet>low = 51</snippet></ROW><ROW><id>17886499</id><snippet>high = 100</snippet></ROW><ROW><id>17886499</id><snippet>guess = 75</snippet></ROW><ROW><id>17886499</id><snippet>low = 76</snippet></ROW><ROW><id>17886499</id><snippet>low = 76</snippet></ROW><ROW><id>17886499</id><snippet>high = 100</snippet></ROW><ROW><id>17886499</id><snippet>guess = 88</snippet></ROW><ROW><id>17886499</id><snippet>high = 88</snippet></ROW><ROW><id>17886499</id><snippet>low = 76</snippet></ROW><ROW><id>17886499</id><snippet>high = 88</snippet></ROW><ROW><id>17886499</id><snippet>guess = 82</snippet></ROW><ROW><id>17886499</id><snippet>O(lg(N))</snippet></ROW><ROW><id>17886615</id><snippet>robots.txt</snippet></ROW><ROW><id>17886615</id><snippet>/xml/</snippet></ROW><ROW><id>17886737</id><snippet>from Tkinter import Button, END, Listbox, Tk
from time import sleep

root = Tk()

# My version of Tkinter doesn't have a MultiListbox
# So, I use its closest alternative, a regular Listbox
listbox = Listbox(root)
listbox.pack()

def start():
    """This is where your loop would go"""

    for i in xrange(100):
        # The sleeping here represents a time consuming process
        # such as making a PDF
        sleep(2)

        listbox.insert(END, i)

        # You must update the listbox after each entry
        listbox.update()

# You must create a button to call a function that will start the loop
# Otherwise, the display won't appear until after the loop exits
Button(root, text="Start", command=start).pack()

root.mainloop()
</snippet></ROW><ROW><id>17886802</id><snippet>strings</snippet></ROW><ROW><id>17886802</id><snippet>replace()</snippet></ROW><ROW><id>17886802</id><snippet>&gt;&gt;&gt; def letter_replace(strng, letter, replace):
    replace = str(replace)
    for char in strng:
        if char == letter.upper() or char == letter.lower():
            strng = strng.replace(char, replace)
            return strng   # Or just do return strng.replace(char, replace)
        else:
            return "Sorry, the letter could not be replaced."


&gt;&gt;&gt; letter_replace('abc', 'a', 'f')
'fbc'
</snippet></ROW><ROW><id>17887078</id><snippet>--</snippet></ROW><ROW><id>17887078</id><snippet>-cdef</snippet></ROW><ROW><id>17887078</id><snippet>-c -d -e -f</snippet></ROW><ROW><id>17887078</id><snippet>--cdef</snippet></ROW><ROW><id>17887078</id><snippet>argparse</snippet></ROW><ROW><id>17887078</id><snippet>ls -la</snippet></ROW><ROW><id>17887078</id><snippet>ls -l -a</snippet></ROW><ROW><id>17887078</id><snippet>ls --color</snippet></ROW><ROW><id>17887530</id><snippet>import tkinter.messagebox</snippet></ROW><ROW><id>17887711</id><snippet>30 - (len(Word1) + len(Word2)) ## note that you were also missing a closing paren
</snippet></ROW><ROW><id>17887711</id><snippet>DotAmount</snippet></ROW><ROW><id>17887711</id><snippet> name = value
</snippet></ROW><ROW><id>17887711</id><snippet>DotAmount =  30 - (len(Word1) + len(Word2))
</snippet></ROW><ROW><id>17887711</id><snippet>a == b</snippet></ROW><ROW><id>17887711</id><snippet>a</snippet></ROW><ROW><id>17887711</id><snippet>b</snippet></ROW><ROW><id>17887711</id><snippet>True</snippet></ROW><ROW><id>17887711</id><snippet>False</snippet></ROW><ROW><id>17887762</id><snippet>'a' in 'ab' == True
</snippet></ROW><ROW><id>17887762</id><snippet>'a' in 'ab' and 'ab' == True
</snippet></ROW><ROW><id>17887762</id><snippet>&gt;&gt;&gt; 'a' in 'ab' == True
False
&gt;&gt;&gt; ('a' in 'ab') == True
True
&gt;&gt;&gt; 'a' in ('ab' == True)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: argument of type 'bool' is not iterable
&gt;&gt;&gt; 'a' in 'ab' and 'ab' == True
False
</snippet></ROW><ROW><id>17887762</id><snippet>a &lt; b &lt; c</snippet></ROW><ROW><id>17887762</id><snippet>b</snippet></ROW><ROW><id>17887762</id><snippet>a</snippet></ROW><ROW><id>17887762</id><snippet>c</snippet></ROW><ROW><id>17887762</id><snippet>0 &lt; x &lt; 5</snippet></ROW><ROW><id>17887762</id><snippet>0 &lt; x and x &lt; 5</snippet></ROW><ROW><id>17888002</id><snippet>&gt;&gt;&gt; ", ".join(["=".join([key, str(val)]) for key, val in data.items()])
'foo=1, bar=2'
</snippet></ROW><ROW><id>17888240</id><snippet>import re
try:
    print int(re.compile("(\d+)").match('12//').group(1))
except:
    print "there was no number"
</snippet></ROW><ROW><id>17888240</id><snippet>\d</snippet></ROW><ROW><id>17888240</id><snippet>\d+</snippet></ROW><ROW><id>17888240</id><snippet>(\d+)</snippet></ROW><ROW><id>17888263</id><snippet>boto.message.RawMessage</snippet></ROW><ROW><id>17888263</id><snippet>boto.message.Message</snippet></ROW><ROW><id>17888300</id><snippet>def GetByName(self):
    lname = self.txtlname.GetValue() or None
    fname = self.txtfname.GetValue() or None
    result = self.emplu.GetEmpID(lname, fname)
</snippet></ROW><ROW><id>17888432</id><snippet>command</snippet></ROW><ROW><id>17888432</id><snippet>command</snippet></ROW><ROW><id>17888432</id><snippet>bind</snippet></ROW><ROW><id>17888592</id><snippet>self.rfile.read(self.headers.getheader('content-length'))</snippet></ROW><ROW><id>17888592</id><snippet>- rfile is a file object open for reading positioned at the
start of the optional input data part;
</snippet></ROW><ROW><id>17888620</id><snippet>superclass.__init__(self,*args,**kwargs)
</snippet></ROW><ROW><id>17888620</id><snippet>super(Myclass,self).__init__(*args,**kwargs)
</snippet></ROW><ROW><id>17888620</id><snippet>super()</snippet></ROW><ROW><id>17888627</id><snippet>avg_img = Image.new('L', img.size, 'black')
</snippet></ROW><ROW><id>17889137</id><snippet>import kate
from kate import documentManager as dm
from PyKDE4.kdecore import KUrl


text = "Lorem ipsum dolor sit amet"

# Open a new empty document
doc = dm.openUrl(KUrl())
# Open an existing file
doc = dm.openUrl(KUrl('/path/to/file.ext'))

# Activate view
kate.application.activeMainWindow().activateView(doc)

# Insert text
pos = kate.activeView().cursorPosition()
doc.insertText(pos, text)
</snippet></ROW><ROW><id>17889232</id><snippet>changeEvent</snippet></ROW><ROW><id>17889232</id><snippet>QTextEdit::textChanged()</snippet></ROW><ROW><id>17889322</id><snippet>In [26]: index = pd.DatetimeIndex(['20130101 12:00:00','20130101 18:01:01','20130102 9:00:00','20130102 23:00:05'])

In [27]: index
Out[27]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-01-01 12:00:00, ..., 2013-01-02 23:00:05]
Length: 4, Freq: None, Timezone: None

In [28]: for x in index:
   ....:     print type(x)
   ....:     
&lt;class 'pandas.tslib.Timestamp'&gt;
&lt;class 'pandas.tslib.Timestamp'&gt;
&lt;class 'pandas.tslib.Timestamp'&gt;
&lt;class 'pandas.tslib.Timestamp'&gt;
</snippet></ROW><ROW><id>17889322</id><snippet>In [29]: td = index.to_series().diff()

In [30]: td
Out[30]: 
2013-01-01 12:00:00        NaT
2013-01-01 18:01:01   06:01:01
2013-01-02 09:00:00   14:58:59
2013-01-02 23:00:05   14:00:05
dtype: timedelta64[ns]
</snippet></ROW><ROW><id>17889322</id><snippet>In [31]: td.apply(lambda x: x/np.timedelta64(6,'h'))
Out[31]: 
2013-01-01 12:00:00         NaN
2013-01-01 18:01:01    1.002824
2013-01-02 09:00:00    2.497176
2013-01-02 23:00:05    2.333565
dtype: float64
</snippet></ROW><ROW><id>17889412</id><snippet>indeces</snippet></ROW><ROW><id>17889412</id><snippet>list_to_return</snippet></ROW><ROW><id>17889412</id><snippet>def foo(start_index, lista_tuples,list_to_return=list()):

    indeces=[x[1] for x in lista_tuples if x[0]==start_index]
    new_values = list(set(indeces) - set(list_to_return))
    list_to_return.extend(indeces)
    for index in new_values:
              foo(index,lista_tuples,list_to_return)
    return list_to_return
</snippet></ROW><ROW><id>17889436</id><snippet>import os
def isLink(a, b):
    return os.path.islink(a) and os.path.realpath(a) == os.path.realpath(b)
</snippet></ROW><ROW><id>17889436</id><snippet>a</snippet></ROW><ROW><id>17889436</id><snippet>b</snippet></ROW><ROW><id>17889436</id><snippet>b</snippet></ROW><ROW><id>17889436</id><snippet>os.path.realpath(a) == os.path.realpath(b)
</snippet></ROW><ROW><id>17889436</id><snippet>os.path.realpath(a) == os.path.abspath(b)
</snippet></ROW><ROW><id>17889436</id><snippet>a</snippet></ROW><ROW><id>17889436</id><snippet>b</snippet></ROW><ROW><id>17889436</id><snippet>b</snippet></ROW><ROW><id>17889436</id><snippet>c</snippet></ROW><ROW><id>17889436</id><snippet>isLink(a, b)</snippet></ROW><ROW><id>17889436</id><snippet>os.readlink(a)</snippet></ROW><ROW><id>17889436</id><snippet>os.path.realpath(a)</snippet></ROW><ROW><id>17889436</id><snippet>def isLink(a, b):
    return os.path.islink(a) and os.path.abspath(os.readlink(a)) == os.path.abspath(b)
</snippet></ROW><ROW><id>17889436</id><snippet>os.readlink(a)</snippet></ROW><ROW><id>17889436</id><snippet>b</snippet></ROW><ROW><id>17889436</id><snippet>a</snippet></ROW><ROW><id>17889436</id><snippet>os.path.realpath(a)</snippet></ROW><ROW><id>17889436</id><snippet>c</snippet></ROW><ROW><id>17889436</id><snippet>a</snippet></ROW><ROW><id>17889436</id><snippet>In [129]: !touch z

In [130]: !ln -s z x

In [131]: !touch w

In [132]: !ln -s w y

In [138]: isLink('x', 'z')
Out[138]: True

In [139]: isLink('y', 'z')
Out[139]: False

In [140]: isLink('z', 'z')
Out[140]: False
</snippet></ROW><ROW><id>17889631</id><snippet>with open("strcpy.c") as infile:
    l = list(infile)
</snippet></ROW><ROW><id>17889631</id><snippet>try/except</snippet></ROW><ROW><id>17889631</id><snippet>with</snippet></ROW><ROW><id>17889631</id><snippet>infile</snippet></ROW><ROW><id>17889643</id><snippet>import flask

app = flask.Flask(__name__)

@app.route('/')
def index():
    flask.session['post_token'] = MakeToken()
    return '...Content...'

@app.route('/poster', methods=['POST'])
def poster():
    if flask.session['post_token']:
        DO STUFF HERE


# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr98j/3yX R~XHH!jxxxRT'
</snippet></ROW><ROW><id>17889725</id><snippet>datetime</snippet></ROW><ROW><id>17889725</id><snippet>timedelta</snippet></ROW><ROW><id>17889725</id><snippet>In [14]: deadline = pd.to_datetime(df['Deadline Date'] + ' ' + df['Deadline Time'])

In [15]: completed = pd.to_datetime(df['Task Completed Date'] + ' ' + df['Task Completed Time'])

In [16]: completed - deadline
Out[16]: 
0   00:34:00
1   00:24:00
2   00:21:00
3   00:19:00
4   00:37:00
5   00:58:00
6   00:56:00
7   00:11:00
8   00:19:00
9   00:24:00
dtype: timedelta64[ns]
</snippet></ROW><ROW><id>17889841</id><snippet>cursor.execute ("insert into incoming set  raw='" 
+ f2 + 
"',  from_em='" 
+ a2 + 
"', to2='" 
+ a1 + "'")
</snippet></ROW><ROW><id>17889841</id><snippet>\</snippet></ROW><ROW><id>17889841</id><snippet>s = "insert into incoming set raw='{0}', from_em='{1}', to2='{2}'"
cursor.execute(s.format(f2, a2, a1))
</snippet></ROW><ROW><id>17889985</id><snippet>ip_hash={}; # the dictionary is made
</snippet></ROW><ROW><id>17889985</id><snippet>ip_hash[ip] = 1; # the dictionary is incorrectly accessed
</snippet></ROW><ROW><id>17889985</id><snippet>if ip in ip_hash:
    print " repeat " + ip;
else:
    ip_hash[ip] = 1;
</snippet></ROW><ROW><id>17890003</id><snippet>processors_info = "\n\t\t\t".join(machine_info['processors'])
print "Processor(s):\t{}".format(processors_info)
</snippet></ROW><ROW><id>17890003</id><snippet>&gt;&gt;&gt; info = ['processor_1_info', 'processor_2_info']
&gt;&gt;&gt; processors_info = "\n\t\t\t".join(info)
&gt;&gt;&gt; print "Processor(s):\t{}".format(processors_info)
Processor(s):   processor_1_info
                processor_2_info
</snippet></ROW><ROW><id>17890003</id><snippet>info = ['processor_1_info', 'processor_2_info', 'processor_3_info']
#info = machine_info['processors'] for your code.
print "Processor(s):{:&gt;20s}".format(info[0])
for item in info[1:]:
    print "{:&gt;33s}".format(item)
</snippet></ROW><ROW><id>17890003</id><snippet>Processor(s):    processor_1_info
                 processor_2_info
                 processor_3_info
</snippet></ROW><ROW><id>17890051</id><snippet>import abc
from Queue import Empty, Queue
from threading import Thread

class AbstractTask(object):
    """
        The base task
    """
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def run_task(self):
        pass

class TaskRunner(object):

    def __init__(self, queue_size, num_threads=1, stop_on_exception=False):
        super(TaskRunner, self).__init__()
        self.queue              = Queue(queue_size)
        self.execute_tasks      = True
        self.stop_on_exception  = stop_on_exception

        # create a worker
        def _worker():
            while self.execute_tasks:

                # get a task
                task = None
                try:
                    task = self.queue.get(False, 1)
                except Empty:
                    continue

                # execute the task
                failed = True
                try:
                    task.run_task()
                    failed = False
                finally:
                    if failed and self.stop_on_exception:
                        print('Stopping due to exception')
                        self.execute_tasks = False
                    self.queue.task_done()

        # start threads
        for i in range(0, int(num_threads)):
            t = Thread(target=_worker)
            t.daemon = True
            t.start()


    def add_task(self, task, block=True, timeout=None):
        """
            Adds a task
        """
        if not self.execute_tasks:
            raise Exception('TaskRunner is not accepting tasks')
        self.queue.put(task, block, timeout)


    def wait_for_tasks(self):
        """
            Waits for tasks to complete
        """
        if not self.execute_tasks:
            raise Exception('TaskRunner is not accepting tasks')
        self.queue.join()
</snippet></ROW><ROW><id>17890065</id><snippet>     C = float(input("Temperature in Celsius:")
</snippet></ROW><ROW><id>17890313</id><snippet>img = None
for f in files:
    im=pl.imread(f)
    if img is None:
        img = pl.imshow(im)
    else:
        img.set_data(im)
    pl.pause(.1)
    pl.draw()
</snippet></ROW><ROW><id>17890315</id><snippet>1, 2, 3, 4, 5, 6, 4, 2, 3, 2, 1, 4, 6, 7, 4, 3, 4, 8, 9, 0, 0, 0
</snippet></ROW><ROW><id>17890315</id><snippet>import numpy as np
# split it in to a list of values and get rid of the newline
a = open('k.txt','r').read().replace('\n','').split(',') 
np.unique(a) # returns unique values and sorts it for you :)
</snippet></ROW><ROW><id>17890315</id><snippet>a = np.random.randint(0,100,size=(100000))
&gt;&gt;&gt; b = time(); set(a); print time()-b
set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])
0.0197851657867
&gt;&gt;&gt; b = time(); np.unique(a); print time()-b
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])
0.00981211662292
</snippet></ROW><ROW><id>17890328</id><snippet>values</snippet></ROW><ROW><id>17890328</id><snippet>import os, re
values = ['alpha','123']

BASE_PATH = '/Users/name/Desktop/'
OUTPUT_FILE_NAME = 'output.txt'

query_file = os.path.join(BASE_PATH, 'query.txt') # 'a\nb\nc\nd\n4\n5\n6\n'

def func(query_file, reading_files):
    with open(query_file,'r') as f:
        query = f.read().split('\n')

    # TODO: check query

    for fbase in reading_files:
        in_file_name = os.path.join(BASE_PATH, '{}.txt'.format(fbase))
        out_dir = os.path.join(BASE_PATH, fbase)
        out_file_name = os.path.join(out_dir, OUTPUT_FILE_NAME)

        # TODO: check if out_dir exists but is regular file
        if not os.path.isdir(out_dir):
            os.mkdir(out_dir)

        with open(in_file_name, 'r') as in_file, open(out_file_name, 'w') as out_file:
            reading = in_file.read()

            for line in query:
                m = re.search(line, reading)
                if m is not None:
                    out_file.write("{}\n".format(str(m.start())))


print(func(query_file, values))
</snippet></ROW><ROW><id>17890328</id><snippet>with</snippet></ROW><ROW><id>17890393</id><snippet>from subprocess import Popen, PIPE

f = open(FILENAME, 'wb')
args = ['mysqldump', '-u', 'UNAME', '-pPASSWORD', '--add-drop-database', '--databases', 'DB']

p1 = Popen(args, stdout=PIPE)
P2 = Popen('gzip', stdin=p1.stdout, stdout=f)
p2.wait()
p1.wait()
</snippet></ROW><ROW><id>17890522</id><snippet>Parameter</snippet></ROW><ROW><id>17890522</id><snippet>array</snippet></ROW><ROW><id>17890522</id><snippet>x = np.array([0,0])
params.add('x', x)
</snippet></ROW><ROW><id>17890522</id><snippet>params.add('x0', 0)
params.add('x1', 0)
</snippet></ROW><ROW><id>17890522</id><snippet>def residual(params, A, y, eps_y=1):
    x0 = params['x0'].value
    x1 = params['x1'].value
    y_hat = np.dot(A, [x0, x1])
    return (y - y_hat)/eps_y
</snippet></ROW><ROW><id>17890570</id><snippet>multiprocessing</snippet></ROW><ROW><id>17890773</id><snippet>lResults = list()
with open("text.txt", 'r') as oFile:
    for line in oFile:
        sNewLine = line.replace(" ", "\n")
        lResults.append(sNewLine)

with open("results.txt", "w") as oFile:
    for line in lResults:
        oFile.write(line)
</snippet></ROW><ROW><id>17890773</id><snippet>with open("text.txt", 'r') as oFile:
    lResults = [line.replace(" ", "\n") for line in oFile]

with open("results.txt", "w") as oFile:
    oFile.writelines(lResults)
</snippet></ROW><ROW><id>17891188</id><snippet>print</snippet></ROW><ROW><id>17891188</id><snippet>import lxml.etree as ET

tree = ET.parse('VimKeys.xml')
root = tree.getroot()

newroot = ET.Element('root')
for i, child in enumerate(root):
    table = ET.Element('table')
    newroot.insert(i, table)
    caption = ET.Element('caption')
    caption.text = child.attrib['title']
    table.insert(0, caption)
    for j, c in enumerate(child, 1):
        tr = ET.Element('tr')
        table.insert(j, tr)
        th = ET.Element('th')
        th.text = c.text
        tr.insert(0, th)

        td = ET.Element('td')
        td.text = c.attrib['description']
        tr.insert(1, td)

print(ET.tostring(newroot, pretty_print=True))
</snippet></ROW><ROW><id>17891188</id><snippet>import lxml.etree as ET
import lxml.builder as builder

tree = ET.parse('VimKeys.xml')
root = tree.getroot()

E = builder.E
tables = []
for child in root:
    trs = []
    for c in child:
        trs.append(E('tr',
                     E('th', c.text),
                     E('td', c.attrib['description'])))
    tables.append(E('table',
                    E('caption', child.attrib['title']),
                    *trs))

newroot = E('root', *tables)
print(ET.tostring(newroot, pretty_print=True))
</snippet></ROW><ROW><id>17891195</id><snippet>time</snippet></ROW><ROW><id>17891195</id><snippet>timeit</snippet></ROW><ROW><id>17891195</id><snippet>clock</snippet></ROW><ROW><id>17891195</id><snippet>time</snippet></ROW><ROW><id>17891332</id><snippet>re.compile('([\d,.]+)')
</snippet></ROW><ROW><id>17891332</id><snippet>...</snippet></ROW><ROW><id>17891332</id><snippet>,,,</snippet></ROW><ROW><id>17891332</id><snippet>re.compile('([\d,]+.?\d*)')
</snippet></ROW><ROW><id>17891332</id><snippet>.5</snippet></ROW><ROW><id>17891332</id><snippet>0.5</snippet></ROW><ROW><id>17891402</id><snippet>&lt;w:p&gt;</snippet></ROW><ROW><id>17891402</id><snippet>import zipfile #Import the zip Module
from lxml import etree #Useful to transform string into xml, and xml into string
templateDocx = zipfile.ZipFile("C:/Template.docx") #Here is the path to the file you want to import
newDocx = zipfile.ZipFile("C:/NewDocument.docx", "a") #This is the name of the outputed file

#Open the document.xml file, the file that contains the content 
with open(templateDocx.extract("word/document.xml", "C:/") as tempXmlFile:
    tempXmlStr = tempXmlFile.read()  


tempXmlXml= etree.fromstring(tempXmlStr)   #Convert the string into XML
############
# Algorithm detailled at the bottom, 
# You have to write here the code to select all &lt;w:p&gt; tags, look if there is a &lt;w:t&gt; tag.
############

tempXmlStr = etree.tostring(tempXmlXml, pretty_print=True) # Convert the changed XML into a string

with open("C:/temp.xml", "w+") as tempXmlFile:
    tempXmlFile.write(tempXmlStr) #Write the changed file

for file in templateDocx.filelist:
    if not file.filename == "word/document.xml":
        newDocx.writestr(file.filename, templateDocx.read(file)) #write all files except the changed ones in the zipArchive

newDocx.write("C:/temp.xml", "word/document.xml") #write the document.xml file

templateDocx.close() #Close both template And new Docx
newDocx.close() # Close
</snippet></ROW><ROW><id>17891402</id><snippet> &lt;w:p w:rsidR="006C517B" w:rsidRDefault="00761A87"&gt;
         &lt;w:bookmarkStart w:id="0" w:name="_GoBack" /&gt;
         &lt;w:bookmarkEnd w:id="0" /&gt;
         &lt;w:r&gt;
            &lt;w:t&gt;First Line&lt;/w:t&gt;
         &lt;/w:r&gt;
      &lt;/w:p&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87" /&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87"&gt;
         &lt;w:proofErr w:type="spellStart" /&gt;
         &lt;w:r&gt;
            &lt;w:t&gt;Third&lt;/w:t&gt;
         &lt;/w:r&gt;
         &lt;w:proofErr w:type="spellEnd" /&gt;
         &lt;w:r&gt;
            &lt;w:t xml:space="preserve"&gt; Line&lt;/w:t&gt;
         &lt;/w:r&gt;
      &lt;/w:p&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87" /&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87" /&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87"&gt;
         &lt;w:r&gt;
            &lt;w:t&gt;Six Line&lt;/w:t&gt;
         &lt;/w:r&gt;
      &lt;/w:p&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87" /&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87" /&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87" /&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87"&gt;
         &lt;w:proofErr w:type="spellStart" /&gt;
         &lt;w:r&gt;
            &lt;w:t&gt;Ten&lt;/w:t&gt;
         &lt;/w:r&gt;
         &lt;w:proofErr w:type="spellEnd" /&gt;
         &lt;w:r&gt;
            &lt;w:t xml:space="preserve"&gt; Line&lt;/w:t&gt;
         &lt;/w:r&gt;
      &lt;/w:p&gt;
      &lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87"&gt;
         &lt;w:proofErr w:type="spellStart" /&gt;
         &lt;w:r&gt;
            &lt;w:t&gt;Eleven&lt;/w:t&gt;
         &lt;/w:r&gt;
         &lt;w:proofErr w:type="spellEnd" /&gt;
         &lt;w:r&gt;
            &lt;w:t xml:space="preserve"&gt; Line&lt;/w:t&gt;
         &lt;/w:r&gt;
      &lt;/w:p&gt;
</snippet></ROW><ROW><id>17891402</id><snippet>&lt;w:p&gt;</snippet></ROW><ROW><id>17891402</id><snippet>&lt;w:p w:rsidR="00761A87" w:rsidRDefault="00761A87" /&gt;
</snippet></ROW><ROW><id>17891402</id><snippet>&lt;w:p&gt;</snippet></ROW><ROW><id>17891421</id><snippet>db.foobars.insert(foo)</snippet></ROW><ROW><id>17891421</id><snippet>Foo</snippet></ROW><ROW><id>17891421</id><snippet>insert</snippet></ROW><ROW><id>17891421</id><snippet>encoded</snippet></ROW><ROW><id>17891421</id><snippet>foo = Foo("bar")
encoded = json.dumps(foo, cls=Encoder)
db.foobars.insert(json.loads(encoded))
</snippet></ROW><ROW><id>17891421</id><snippet>__dict__</snippet></ROW><ROW><id>17891421</id><snippet>db.foobars.insert(foo.__dict__)
</snippet></ROW><ROW><id>17891483</id><snippet>import os
NewFilePath = "A:\test.txt"
Acceptable_Values = ('Apple','Banana')
#Main
def main():
    if os.path.isfile(NewFilePath):
        os.remove(NewFilePath)
    NewFile = open (NewFilePath, 'w')
    NewFile.write('Header 1,','Name Header,','Header 3,','Header 4)
    OldFile_Loc=raw_input("Input File for Program:")
    OldFile = open(OldFile_Loc,"r")
    for line in OldFile:
        LineParts = line.split()
        if (LineParts[0].find(\$W)) or (LineParts[0].find(\$S)):
            if LineParts[3] in Acceptable_Values:
                print(LineParts[1], ' is accepted')
                #This Line is acceptable!
                NewFile.write(LineParts[1],',',LineParts[0],',',LineParts[2],',',LineParts[3])
    OldFile.close()
    NewFile.close()
main()
</snippet></ROW><ROW><id>17891495</id><snippet>'.zip'</snippet></ROW><ROW><id>17891495</id><snippet>s = 'test.zip.zyz'
s = s.split('.zip', 1)[0] + '.zip'
</snippet></ROW><ROW><id>17891495</id><snippet>'.zip'</snippet></ROW><ROW><id>17891495</id><snippet>4</snippet></ROW><ROW><id>17891495</id><snippet>len('.zip')</snippet></ROW><ROW><id>17891495</id><snippet>s = s[:s.index('.zip')+4]
</snippet></ROW><ROW><id>17891495</id><snippet>import re
s = re.match(r'^.*?\.zip', s).group(0)
</snippet></ROW><ROW><id>17891721</id><snippet>from operator import itemgetter

&gt;&gt;&gt; a = np.array([[2, 7], [1, 4]])
array([[2, 7],
       [1, 4]])

&gt;&gt;&gt; sorted(np.ndenumerate(a), key=itemgetter(1), reverse=True)
[((0, 1), 7), 
 ((1, 1), 4), 
 ((0, 0), 2), 
 ((1, 0), 1)]
</snippet></ROW><ROW><id>17891721</id><snippet>sorted</snippet></ROW><ROW><id>17891721</id><snippet>np.ndenumerate(a)</snippet></ROW><ROW><id>17891721</id><snippet>itemgetter(1)</snippet></ROW><ROW><id>17891721</id><snippet>itemgetter</snippet></ROW><ROW><id>17891721</id><snippet>((0, 1), 7), ((1, 1), 4),</snippet></ROW><ROW><id>17891721</id><snippet>np.ndenumerate(a)</snippet></ROW><ROW><id>17891739</id><snippet>scratch = [None] * (_input + _outputs)
</snippet></ROW><ROW><id>17891739</id><snippet>_input + _outputs</snippet></ROW><ROW><id>17891739</id><snippet>None</snippet></ROW><ROW><id>17891739</id><snippet>scratch</snippet></ROW><ROW><id>17891866</id><snippet>.move</snippet></ROW><ROW><id>17891866</id><snippet>.after</snippet></ROW><ROW><id>17892078</id><snippet>int</snippet></ROW><ROW><id>17892078</id><snippet>int</snippet></ROW><ROW><id>17892078</id><snippet>getAttributes()</snippet></ROW><ROW><id>17892078</id><snippet>getAttributes()</snippet></ROW><ROW><id>17892078</id><snippet>class bound_int(int):
    def __new__(cls, value, obj):
        val = int.__new__(cls, value)
        val.obj = obj
        return val
    def getAttributes(self):
        return self.obj.somePyClassProp
</snippet></ROW><ROW><id>17892078</id><snippet>c.somePyClassProp</snippet></ROW><ROW><id>17892078</id><snippet>bound_int</snippet></ROW><ROW><id>17892078</id><snippet>getAttributes()</snippet></ROW><ROW><id>17892078</id><snippet>self</snippet></ROW><ROW><id>17892078</id><snippet>@property
def somePyClassProp(self):
   return bound_int(42, self)
</snippet></ROW><ROW><id>17892078</id><snippet>c.somePyPclassProp</snippet></ROW><ROW><id>17892078</id><snippet>int</snippet></ROW><ROW><id>17892078</id><snippet>int</snippet></ROW><ROW><id>17892078</id><snippet>getAttributes()</snippet></ROW><ROW><id>17892100</id><snippet>sudo apt-get install python-setuptools
</snippet></ROW><ROW><id>17892100</id><snippet>curl -O http://python-distribute.org/distribute_setup.py
python distribute_setup.py
easy_install pip
</snippet></ROW><ROW><id>17892100</id><snippet>which python
which pip
which easy_install
</snippet></ROW><ROW><id>17892107</id><snippet>&lt;/a&gt;</snippet></ROW><ROW><id>17892107</id><snippet>.*?</snippet></ROW><ROW><id>17892107</id><snippet>match = re.findall(r'&lt;a.*?&gt;(.*?)&lt;/a&gt;', s)
                             ^
</snippet></ROW><ROW><id>17892107</id><snippet>from bs4 import BeautifulSoup

s = '&lt;div&gt;&lt;a href="page1.html" title="page1"&gt;Go to 1&lt;/a&gt;, &lt;a href="page2.html" title="page2"&gt;Go to page 2&lt;/a&gt;&lt;a href="page3.html" title="page3"&gt;Go to page 3&lt;/a&gt;, &lt;a href="page4.html" title="page4"&gt;Go to page 4&lt;/a&gt;&lt;/div&gt;'
soup = BeautifulSoup(s)
print [el.string for el in soup('a')]
# [u'Go to 1', u'Go to page 2', u'Go to page 3', u'Go to page 4']
</snippet></ROW><ROW><id>17892107</id><snippet>print [[el.string, el['href'] ]for el in soup('a', href=True)]
# [[u'Go to 1', 'page1.html'], [u'Go to page 2', 'page2.html'], [u'Go to page 3', 'page3.html'], [u'Go to page 4', 'page4.html']]
</snippet></ROW><ROW><id>17892230</id><snippet>set</snippet></ROW><ROW><id>17892230</id><snippet>site = "http://genes.mit.edu/cgi-bin/fas-ess.pl"
def getinfo(info):
    form_data = {'sequence':info, 'set':'FAS-hex2'}
</snippet></ROW><ROW><id>17892306</id><snippet>&gt;&gt;&gt; def mymkdir(*args):
...         print "mkdir", args
... 
&gt;&gt;&gt; os.mkdir = mymkdir # monkey patching os
&gt;&gt;&gt; os.mkdir("toto")
mkdir ('toto',)
</snippet></ROW><ROW><id>17892306</id><snippet>os = myos</snippet></ROW><ROW><id>17892427</id><snippet>def getHostsFromList(master):
    p1 = subprocess.Popen(['get_hosts_from_master', master], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(['grep', '-v', '\['], stdin=p1.stdout, stdout=subprocess.PIPE)
    return p2.communicate()[0]

for master in getMasterList():
    for host in getHostsFromList(master):
        doStuff(host)
</snippet></ROW><ROW><id>17892464</id><snippet>lst</snippet></ROW><ROW><id>17892464</id><snippet>function</snippet></ROW><ROW><id>17892464</id><snippet>Months</snippet></ROW><ROW><id>17892464</id><snippet>for start_end in Months:
    func(start_end)
</snippet></ROW><ROW><id>17892464</id><snippet>def func(tup):
    print """
    Start %s
    End %s
    """ % tup
</snippet></ROW><ROW><id>17892464</id><snippet>&gt;&gt;&gt; tup = ('2011-01-01', '2011-02-01')
&gt;&gt;&gt; print """
...     Start %s
...     End %s
...     """ % tup

    Start 2011-01-01
    End 2011-02-01
</snippet></ROW><ROW><id>17892464</id><snippet>str.format()</snippet></ROW><ROW><id>17892464</id><snippet>def func(tup):
    print """
    Start {0[0]}
    End {0[0]}
    """.format(tup)
</snippet></ROW><ROW><id>17892464</id><snippet>for start, end in Months:
    print 'Start {}\nEnd'.format(start, end)
</snippet></ROW><ROW><id>17892518</id><snippet>NE</snippet></ROW><ROW><id>17892518</id><snippet>SW</snippet></ROW><ROW><id>17892518</id><snippet>0</snippet></ROW><ROW><id>17892518</id><snippet>self.basic_map=[['NW',1,0,1,'SW'],
           [1,0,0,0,1],
           [1,0,0,0,1],
           [1,0,0,0,1],
           ['NE',1,0,1,'SE']]
</snippet></ROW><ROW><id>17892518</id><snippet>0</snippet></ROW><ROW><id>17892518</id><snippet>0</snippet></ROW><ROW><id>17892533</id><snippet>PYTHONHOME</snippet></ROW><ROW><id>17892533</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17892538</id><snippet>dict</snippet></ROW><ROW><id>17892538</id><snippet>dict</snippet></ROW><ROW><id>17892538</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>17892555</id><snippet>get_shortest_paths</snippet></ROW><ROW><id>17892555</id><snippet>igraph_get_shortest_paths_bellman_ford</snippet></ROW><ROW><id>17892555</id><snippet>igraph_get_shortest_paths_dijkstra</snippet></ROW><ROW><id>17892555</id><snippet>igraph_get_shortest_paths_dijkstra</snippet></ROW><ROW><id>17892555</id><snippet>igraph_get_shortest_paths</snippet></ROW><ROW><id>17892555</id><snippet>shortest_paths</snippet></ROW><ROW><id>17892555</id><snippet>igraph_shortest_paths_bellman_ford</snippet></ROW><ROW><id>17892555</id><snippet>igraph_get_shortest_paths_bellman_ford</snippet></ROW><ROW><id>17892979</id><snippet>places = {"LA": 0, "San Jose": 1, "NY": 2}
friends = {"John": [0, 0, 0], "Carter": [0, 0, 0], "Bill": [0, 0, 0]}
</snippet></ROW><ROW><id>17892979</id><snippet>friends["John"][places["NY"]] += 1
</snippet></ROW><ROW><id>17893072</id><snippet>def run(self):
    for i in range(self._delay):
        print "thread running..."
        time.sleep(1)
        if self._want_abort:
            self.work_done(None)
            return
    self.work_done("My result")

def work_done(self, result):
    self.result = result
    wx.PostEvent(self._notify_window, ResultEvent(result))
</snippet></ROW><ROW><id>17893072</id><snippet>frame.worker.join()
frame.OnResult(ResultEvent(frame.worker.result))
</snippet></ROW><ROW><id>17893349</id><snippet>getHeader.js</snippet></ROW><ROW><id>17893349</id><snippet>STATIC_URL</snippet></ROW><ROW><id>17893349</id><snippet>&lt;script type="text/javascript"&gt;
    DJANGO_STATIC_URL = '{{ STATIC_URL }}';
&lt;/script&gt;
</snippet></ROW><ROW><id>17893349</id><snippet>Django Compressor</snippet></ROW><ROW><id>17893365</id><snippet>import html_form
</snippet></ROW><ROW><id>17893374</id><snippet>re</snippet></ROW><ROW><id>17893374</id><snippet>regex = r"""
(                # Capture in group #1
    "[\w\s]+"    # Three sequences of quoted letters and white space characters
    \s+          # followed by one or more white space characters
    "[\w\s]+"
    \s+
    "[\w\s]+"
    \s+
)
"(\d{10,})"      # Match a quoted set of at least 10 integers into group #2
(^^\s+\.\s+)     # Match by two circumflex characters, whitespace and a period
                 # into group #3
(.*)             # Followed by anything at all into group #4
"""

COMPILED_REGEX = re.compile(regex, re.VERBOSE)
</snippet></ROW><ROW><id>17893374</id><snippet>re.RegexObject.sub</snippet></ROW><ROW><id>17893374</id><snippet>def replace_callback(matches):
    full_line = matches.group(0)
    number_text = matches.group(2)
    number_of_interest = int(number_text, base=10)
    if number_of_interest &gt; 2147483647:
        return full_line.replace(number_of_interest, number_text[:3])
    else:
        return full_line
</snippet></ROW><ROW><id>17893374</id><snippet>fixed_data = COMPILED_REGEX.sub(replace_callback, YOUR_DATA)
</snippet></ROW><ROW><id>17893374</id><snippet># Given the above
def process_data():
    with open("path/to/your/file") as data_file,
         open("path/to/output/file", "w") as output_file:
         for line in data_file:
             fixed_data = COMPILED_REGEX.sub(replace_callback, line)
             output_file.write(fixed_data)
</snippet></ROW><ROW><id>17893390</id><snippet>settings.py</snippet></ROW><ROW><id>17893390</id><snippet>DEBUG</snippet></ROW><ROW><id>17893390</id><snippet>False</snippet></ROW><ROW><id>17893458</id><snippet>self.update()</snippet></ROW><ROW><id>17893458</id><snippet>self</snippet></ROW><ROW><id>17893460</id><snippet>re.sub("\\xe2\\x89\\xba.*\\xe2\\x89\\xbb","",eleInfo)
</snippet></ROW><ROW><id>17893460</id><snippet>eleInfo = unicode("Leave ≺random text here≻Other text")
</snippet></ROW><ROW><id>17893460</id><snippet>re.sub(u"[\u227a].*[\u227b]","",eleInfo) works too.
</snippet></ROW><ROW><id>17893464</id><snippet>for i in l1:
    if not("{}" in i):
        l2.append(i)
</snippet></ROW><ROW><id>17893520</id><snippet>from django.forms import ModelForm
from Scanner.models import Tld

class SubmitDomainForm(ModelForm):
    class Meta:
        model = Tld
        fields = ['domainNm']

    def clean_domainName(self):
        val = self.cleaned_data.get('domainNm')
        if Tld.objects.filter(domainNm=val).count() &gt; 0:
            raise forms.ValidationError(u'Sorry that domain already
                exists, etc, etc')
        return val
</snippet></ROW><ROW><id>17893520</id><snippet>from django.shortcuts import render
from Scanner.forms import SubmitDomainForm

def scan(request):  # functions should start with a lowercase letter
    # Bind the post data to the form, if it exists.
    # No need for a separate if statement here
    form = SubmitDomainForm(request.POST or None)

    if request.method == 'POST':
        if form.is_valid():
            # save your model form, or do something else

    return render(request, 'your-template.html', {'form': form})
</snippet></ROW><ROW><id>17893709</id><snippet>.all</snippet></ROW><ROW><id>17893709</id><snippet>.all</snippet></ROW><ROW><id>17893709</id><snippet>.all</snippet></ROW><ROW><id>17893709</id><snippet>list_of_games = session.query(Game_Table).all()
list_of_games.filter(name=="stuff").all()
</snippet></ROW><ROW><id>17893709</id><snippet>list_of_games = session.query(Game_Table)
list_of_games.all()
list_of_games.filter(name=="stuff").all()
</snippet></ROW><ROW><id>17893709</id><snippet># old school lisper style.
sorted(list_of_games, key=lambda x: x.name)
filter(lambda x: x.name=='stuff', list_of_games)
# new style
[x for x in list_of_games if x.name=='stuff']
</snippet></ROW><ROW><id>17893709</id><snippet>for game in (x for x in list_of_games if x.name=='stuff'):
    print_score(game)
</snippet></ROW><ROW><id>17893800</id><snippet>'\r\n'</snippet></ROW><ROW><id>17893800</id><snippet>'\r'</snippet></ROW><ROW><id>17893800</id><snippet>'b'</snippet></ROW><ROW><id>17893834</id><snippet>def __init__(self,screen,x_location='center',y_location='center',writeable,color,size=12):
</snippet></ROW><ROW><id>17893834</id><snippet>def __init__(self,screen,writeable,color,x_location='center',y_location='center',size=12):
</snippet></ROW><ROW><id>17893999</id><snippet>viewKeysCanvas.create_window((0,0), window=tab3)
</snippet></ROW><ROW><id>17893999</id><snippet>viewKeysCanvas.create_window((0,0), window=viewKeysGroup)
</snippet></ROW><ROW><id>17893999</id><snippet># viewKeysGroup.pack(padx=10, pady=10)
</snippet></ROW><ROW><id>17893999</id><snippet>tab3</snippet></ROW><ROW><id>17893999</id><snippet>viewKeysGroup</snippet></ROW><ROW><id>17893999</id><snippet>viewKeysGroup</snippet></ROW><ROW><id>17893999</id><snippet>import Tkinter as tk
import ttk

class Tab1(tk.Frame):
    def __init__(self, root):
        tk.Frame.__init__(self, root)
        tk.Label(self, text="Test label1").pack()

class Tab2(tk.Frame):
    def __init__(self, root):
        tk.Frame.__init__(self, root)
        tk.Label(self, text="Test label2").pack()

class Tab3(tk.Frame):
    def __init__(self, root):
        tk.Frame.__init__(self, root)
        self.viewKeysCanvas = tk.Canvas(self)
        self.viewKeysGroup = tk.Frame(self.viewKeysCanvas)
        self.viewKeysScrollbar = tk.Scrollbar(self, orient="vertical",
                                command=self.viewKeysCanvas.yview)
        self.viewKeysCanvas.configure(yscrollcommand=self.viewKeysScrollbar.set)
        self.viewKeysScrollbar.pack(side="right", fill="y")
        self.viewKeysCanvas.pack(fill="both", expand=True)
        self.viewKeysCanvas.create_window(0, 0, window=self.viewKeysGroup, anchor="nw")
        self.viewKeysGroup.bind("&lt;Configure&gt;", self.on_frame_configure)
        self.populate()

    def populate(self):
        for x in range(0, 9):
            aKeyGroup = tk.LabelFrame(self.viewKeysGroup, text="number: " + str(x))
            buttonFrame = tk.Frame(aKeyGroup)
            tk.Button(buttonFrame, text="Action 1").pack(padx=10, side="left")
            tk.Button(buttonFrame, text="Action 2").pack(padx=10, side="left")
            tk.Label(aKeyGroup, text="Public key: ").pack(side="top")
            tk.Label(aKeyGroup, text="Private key: ").pack(side="top")
            buttonFrame.pack(padx=10, pady=10)
            aKeyGroup.pack()

    def on_frame_configure(self, event):
        """Reset the scroll region to encompass the inner frame"""
        self.viewKeysCanvas.configure(scrollregion=self.viewKeysCanvas.bbox("all"))

root = tk.Tk()
sizex, sizey, posx, posy = 800, 500, 100, 100
root.wm_geometry("%dx%d+%d+%d" % (sizex, sizey, posx, posy))
root.title('Scroll Test')

note = ttk.Notebook(root)
tab1 = Tab1(note)
tab2 = Tab2(note)
tab3 = Tab3(note)

note.add(tab1, text="Test tab 1")
note.add(tab2, text="Test tab 2")
note.add(tab3, text="Test tab 3")

note.pack(expand=True, fill="both")
root.mainloop()
</snippet></ROW><ROW><id>17894155</id><snippet>*.py</snippet></ROW><ROW><id>17894155</id><snippet>*.py</snippet></ROW><ROW><id>17894155</id><snippet>*.pyw</snippet></ROW><ROW><id>17894218</id><snippet>&gt;&gt;&gt; a = [1]
&gt;&gt;&gt; b = [3, 2]
&gt;&gt;&gt; c = [5, 1, 6]
&gt;&gt;&gt; d = [7, 4, 18]
&gt;&gt;&gt;
&gt;&gt;&gt; max_len = len(max([a,b,c,d], key=len)) # max(map(len, [a,b,c,d]))
&gt;&gt;&gt; lists = {
...     'a': a,
...     'b': b,
...     'c': c,
...     'd': d,
... }
&gt;&gt;&gt; names = [name for name in lists if len(lists[name]) == max_len]
&gt;&gt;&gt; print '{} contain the longest list(s).'.format(', '.join(names))
c, d contain the longest list(s).
</snippet></ROW><ROW><id>17894218</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = [3, 2]
&gt;&gt;&gt; c = [5, 1, 6]
&gt;&gt;&gt; d = [7, 4, 18]
&gt;&gt;&gt; 
&gt;&gt;&gt; max_len = len(max([a,b,c,d], key=len)) # max(map(len, [a,b,c,d]))
&gt;&gt;&gt; lists = {
...     'a': a,
...     'b': b,
...     'c': c,
...     'd': d,
... }
&gt;&gt;&gt; names = [name for name in lists if len(lists[name]) == max_len]
&gt;&gt;&gt; print '{} contain the longest list(s).'.format(', '.join(names))
a contain the longest list(s).
</snippet></ROW><ROW><id>17894218</id><snippet>books = [
    [1],
    [3, 2],
    [5, 1, 6],
    [7, 4, 18],
]

max_len = len(max(books, key=len)) # max(map(len, books))
names = [str(i+1) for i, bs in enumerate(books) if len(bs) == max_len]
print 'Book {} contain the longest list(s).'.format(', '.join(names))

# =&gt; Book 3, 4 contain the longest list(s).
</snippet></ROW><ROW><id>17894278</id><snippet>hxs.select("//a/@href")</snippet></ROW><ROW><id>17894278</id><snippet>HtmlXPathSelector</snippet></ROW><ROW><id>17894278</id><snippet>engines = hxs.select("//a/@href").extract()
print engines
</snippet></ROW><ROW><id>17894278</id><snippet>&gt;&gt;&gt; a = HtmlXPathSelector(text=s)
&gt;&gt;&gt; a
&lt;HtmlXPathSelector xpath=None data=u'&lt;html&gt;&lt;body&gt;&lt;a href="JavaScript:ShowPart'&gt;
&gt;&gt;&gt; a.select("//a/@href")
[&lt;HtmlXPathSelector xpath='//a/@href' data=u"JavaScript:ShowParts('1','58537','RP45%2"&gt;]
&gt;&gt;&gt; a.select("//a/@href").extract()
[u"JavaScript:ShowParts('1','58537','RP45%2C+RP60+Compactors+w%2FHatz+1D81S+Eng%2E');"]
</snippet></ROW><ROW><id>17894377</id><snippet>bar = lambda y: foo (0, y)
</snippet></ROW><ROW><id>17894377</id><snippet>def foo (x, y): return x + y

bar = (lambda f: lambda y: f (0, y) ) (foo)
print (bar (4) )
del foo
print (bar (4) )
</snippet></ROW><ROW><id>17894546</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'))
144
</snippet></ROW><ROW><id>17894546</id><snippet>&gt;&gt;&gt; reduce(lambda a,b:a*b, range(1,12+1)) # 12!
479001600
</snippet></ROW><ROW><id>17894546</id><snippet>144 * 479001600 = 68,976,230,400
</snippet></ROW><ROW><id>17894546</id><snippet>import itertools

with open('permutations.txt', 'wb') as f:
    f.writelines(''.join(xs) + '\n' for xs in itertools.permutations('abcdefghijkl'))
</snippet></ROW><ROW><id>17894983</id><snippet>using System;
using System.Text;

class Test
{
    static void Main()
    {
        // Avoid encoding issues in the source file itself...
        string firstLevel = "\u00c3\u00a2\u00c2\u0080\u00c2\u0099";
        string secondLevel = HackDecode(firstLevel);
        string thirdLevel = HackDecode(secondLevel);
        Console.WriteLine("{0:x}", (int) thirdLevel[0]); // 2019
    }

    // Converts a string to a byte array using ISO-8859-1, then *decodes*
    // it using UTF-8. Any use of this method indicates broken data to start
    // with. Ideally, the source of the error should be fixed.
    static string HackDecode(string input)
    {
        byte[] bytes = Encoding.GetEncoding(28591)
                               .GetBytes(input);
        return Encoding.UTF8.GetString(bytes);
    }
}
</snippet></ROW><ROW><id>17895241</id><snippet>  with open("myNewFile", "a") as file:
  file.write('\n')
  file.write("\n" + status.text + "\n")
  file.write('\n')
</snippet></ROW><ROW><id>17895241</id><snippet>with</snippet></ROW><ROW><id>17895241</id><snippet>format()</snippet></ROW><ROW><id>17895241</id><snippet>  import os
  with open("myNewFile", "a") as file:
      file.write('{0}{0} {1} {0}{0}'.format(os.linesep, status.text)
      #file.write('\n')
      #file.write("\n" + status.text + "\n")
      #file.write('\n')
</snippet></ROW><ROW><id>17895241</id><snippet>os.linesep</snippet></ROW><ROW><id>17895241</id><snippet>linesep</snippet></ROW><ROW><id>17895241</id><snippet>file.write('{0} {1} {0}'.format(os.linesep * 2, status.text)
</snippet></ROW><ROW><id>17895415</id><snippet>with open('input.txt') as f:
    indent = 8
    prev_depth = -1
    closes = []
    for line in f:
        line = line.strip()
        if not line: continue

        depth = line.count('|')
        while prev_depth &gt;= depth:
            prev_depth -= 1
            print(closes.pop())
        pad = ' ' * (depth*indent)
        print(pad + 'If ({})'.format(line.lstrip('| ').split(':', 1)[0]))
        print(pad + '{')
        closes.append(pad + '}')
        if ':' in line:
            pad2 = ' ' * ((depth+1)*indent)
            print(pad2 + 'Return {}'.format(line[line.find(':')+1:].strip()))
        prev_depth = depth
    while closes:
        print(closes.pop())
</snippet></ROW><ROW><id>17895523</id><snippet>%autoreload 2
</snippet></ROW><ROW><id>17895844</id><snippet>{...}</snippet></ROW><ROW><id>17895844</id><snippet>.format()</snippet></ROW><ROW><id>17895844</id><snippet>"{0} {1}".format(10, 20)
</snippet></ROW><ROW><id>17895844</id><snippet>{}</snippet></ROW><ROW><id>17895844</id><snippet>"{} {}".format(10, 20) 
</snippet></ROW><ROW><id>17895844</id><snippet>"{1} {ham} {0} {spam} {1}".format(10, 20, foo='bar', ham='spam')
</snippet></ROW><ROW><id>17895844</id><snippet>**keywords</snippet></ROW><ROW><id>17895844</id><snippet>import csv

fields = ('category', 'code', 'price', 'description', 'link', 'picture', 'plans')
table_row = '''\
    &lt;tr&gt;
      &lt;td&gt;&lt;img src="{picture}"&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href="{link}"&gt;{description}&lt;/a&gt; ({price:.2f})&lt;/td&gt;
   &lt;/tr&gt;
'''

with open(filename, 'rb') as infile:
    reader = csv.DictReader(infile, fieldnames=fields, delimiter='\t')
    for row in reader:
        row['price'] = float(row['price'])  # needed to make `.2f` formatting work
        print table_row.format(**row)
</snippet></ROW><ROW><id>17895844</id><snippet>picture</snippet></ROW><ROW><id>17895844</id><snippet>link</snippet></ROW><ROW><id>17895844</id><snippet>description</snippet></ROW><ROW><id>17895844</id><snippet>price</snippet></ROW><ROW><id>17895844</id><snippet>row</snippet></ROW><ROW><id>17895844</id><snippet>row</snippet></ROW><ROW><id>17896029</id><snippet>&gt;&gt;&gt; data = pd.read_csv('1.csv', parse_dates=[0,1])
&gt;&gt;&gt; data['time_delay'] = data['completed'] - data['deadline']
&gt;&gt;&gt; print data['time_delay']
0   -00:05:00
1    00:05:00
2    00:05:00
3   -00:26:00
4   -00:02:00
Name: time_delay, dtype: timedelta64[ns]
&gt;&gt;&gt; data.to_csv(sys.stdout)
,completed,deadline,time_delay
0,2013-07-15 23:10:00,2013-07-15 23:15:00,-300000000000
1,2013-07-16 00:20:00,2013-07-16 00:15:00,300000000000
2,2013-07-16 00:20:00,2013-07-16 00:15:00,300000000000
3,2013-07-16 21:04:00,2013-07-16 21:30:00,-1560000000000
4,2013-07-16 21:58:00,2013-07-16 22:00:00,-120000000000
&gt;&gt;&gt; data['time_delay'] = data['time_delay'].apply(pd.lib.repr_timedelta64)
&gt;&gt;&gt; data.to_csv(sys.stdout)
,completed,deadline,time_delay
0,2013-07-15 23:10:00,2013-07-15 23:15:00,-00:05:00
1,2013-07-16 00:20:00,2013-07-16 00:15:00,00:05:00
2,2013-07-16 00:20:00,2013-07-16 00:15:00,00:05:00
3,2013-07-16 21:04:00,2013-07-16 21:30:00,-00:26:00
4,2013-07-16 21:58:00,2013-07-16 22:00:00,-00:02:00
</snippet></ROW><ROW><id>17896029</id><snippet>pandas.lib.repr_timedelta64</snippet></ROW><ROW><id>17896095</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; s = '''&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB" lang="en"&gt;&lt;/html&gt;'''
&gt;&gt;&gt; root = lxml.html.fromstring(s)
&gt;&gt;&gt; root.get('xml:lang')
'en-GB'
</snippet></ROW></DATA>