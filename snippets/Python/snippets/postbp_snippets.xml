<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>9758014</id><snippet>filename = unicodedata.normalize('NFC', unicode(filename, 'utf-8')).encode('utf-8')
</snippet></ROW><ROW><id>9758077</id><snippet>text1</snippet></ROW><ROW><id>9758077</id><snippet>text2</snippet></ROW><ROW><id>9758077</id><snippet>occurrences</snippet></ROW><ROW><id>9758077</id><snippet>if c == char c in "string2":
</snippet></ROW><ROW><id>9758077</id><snippet>char</snippet></ROW><ROW><id>9758139</id><snippet>a = Product.objects.filter(price_history__date = somedate_x)
</snippet></ROW><ROW><id>9758139</id><snippet>if a.count() == 1:
    pass
else:
    do something else here
</snippet></ROW><ROW><id>9758139</id><snippet>b = Product.objects.filter(price_history__date__lt = somedate, price_history__price__gt=a[0].price)
</snippet></ROW><ROW><id>9758193</id><snippet>test_foo</snippet></ROW><ROW><id>9758193</id><snippet>@patch.object(os, 'listdir')
class TestPackage(unittest.TestCase):
    @patch.object(sys, 'exit')
    def test_foo(self, sys_exit, os_listdir):
        os_listdir.return_value = ['file1', 'file2']
        # ... Test logic
        sys_exit.assert_called_with(1)
</snippet></ROW><ROW><id>9758376</id><snippet>dict</snippet></ROW><ROW><id>9758376</id><snippet>dict.keys()</snippet></ROW><ROW><id>9758376</id><snippet>dict.values()</snippet></ROW><ROW><id>9758531</id><snippet>ceil()</snippet></ROW><ROW><id>9758531</id><snippet>0.5 * ceil(2.0 * x)
</snippet></ROW><ROW><id>9758662</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(filehandle.read())
titleTag = soup.html.head.title
</snippet></ROW><ROW><id>9758728</id><snippet>ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(host, username=username, password=password, timeout=10)
sftp = ssh.open_sftp()
sftp.get(remotepath, localpath)
sftp.close()
</snippet></ROW><ROW><id>9758867</id><snippet>plugins.foo</snippet></ROW><ROW><id>9758867</id><snippet>plugins</snippet></ROW><ROW><id>9758867</id><snippet>sys.modules</snippet></ROW><ROW><id>9758867</id><snippet>del sys.modules['plugins']</snippet></ROW><ROW><id>9758867</id><snippet>bar</snippet></ROW><ROW><id>9758867</id><snippet>plugins</snippet></ROW><ROW><id>9758867</id><snippet>sys.path.append ('lib2')
import plugins
reload(plugins)
import plugins.bar
</snippet></ROW><ROW><id>9758867</id><snippet>sys.path</snippet></ROW><ROW><id>9759042</id><snippet>ORDER BY</snippet></ROW><ROW><id>9759042</id><snippet>SELECT temperature FROM temperatures ORDER BY temperature ASC;  -- ascending order
SELECT temperature FROM temperatures ORDER BY temperature DESC; -- descending order
</snippet></ROW><ROW><id>9759042</id><snippet>templist = [25, 50, 100, 150, 200, 250, 300, 33]
sorted(templist, key=int)               # ascending order
&gt; [25, 33, 50, 100, 150, 200, 250, 300]
sorted(templist, key=int, reverse=True) # descending order
&gt; [300, 250, 200, 150, 100, 50, 33, 25]
</snippet></ROW><ROW><id>9759042</id><snippet>int</snippet></ROW><ROW><id>9759042</id><snippet>float</snippet></ROW><ROW><id>9759042</id><snippet>string</snippet></ROW><ROW><id>9759383</id><snippet>/var/log/httpd/error_log</snippet></ROW><ROW><id>9759383</id><snippet>tail -f</snippet></ROW><ROW><id>9759383</id><snippet>$ tail -f /var/log/httpd/error_log
</snippet></ROW><ROW><id>9759383</id><snippet>cgi</snippet></ROW><ROW><id>9759383</id><snippet>cgitb</snippet></ROW><ROW><id>9759623</id><snippet>connect</snippet></ROW><ROW><id>9759623</id><snippet>from sqlite3 import connect

conn = connect("/path/to/your/sqlite.db")
# Do what you need to with the database here
# Changes (inserts, updates, etc) will be persisted
# to disk whenever you commit a transaction.
</snippet></ROW><ROW><id>9759623</id><snippet>ATTATCH DATABASE</snippet></ROW><ROW><id>9759623</id><snippet>sqlite3</snippet></ROW><ROW><id>9759623</id><snippet>Connection.iterdump</snippet></ROW><ROW><id>9759623</id><snippet>sqlite3.Cursor.executescript</snippet></ROW><ROW><id>9759706</id><snippet>sorted</snippet></ROW><ROW><id>9759706</id><snippet>list</snippet></ROW><ROW><id>9759842</id><snippet>print [item for item in dir(adfix) if not item.startswith("__")]
</snippet></ROW><ROW><id>9759911</id><snippet>25000*2000*2/1000000 = 100 MB
</snippet></ROW><ROW><id>9759911</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.zeros((25000,2000),dtype=int)
</snippet></ROW><ROW><id>9759911</id><snippet>scipy.sparse</snippet></ROW><ROW><id>9759911</id><snippet>np.array</snippet></ROW><ROW><id>9759911</id><snippet>with open(..., "wb") as f:
    f = csv.writer(f)
    for instance in instances:
        f.writerow(instance.data)
</snippet></ROW><ROW><id>9759911</id><snippet>np.loadtxt</snippet></ROW><ROW><id>9759911</id><snippet>numpy.loadtxt(open(..., "rb"), delimiter=",")
</snippet></ROW><ROW><id>9759963</id><snippet>isinstance</snippet></ROW><ROW><id>9759963</id><snippet>if isinstance(e, list):
</snippet></ROW><ROW><id>9759982</id><snippet>from django.db.models import Count

Expiration.objects.annotate(num_profiles=Count('profile')).order_by('num_profiles')[0]
</snippet></ROW><ROW><id>9760006</id><snippet>imaplib.error: [AUTHENTICATIONFAILED] Authentication failed.
</snippet></ROW><ROW><id>9760006</id><snippet>Python 2.7.2 (default, Nov 14 2011, 19:37:59) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import imaplib
&gt;&gt;&gt; imaplib.IMAP4.error
&lt;class 'imaplib.error'&gt;
</snippet></ROW><ROW><id>9760006</id><snippet>Python 2.7.2 (default, Nov 14 2011, 19:37:59) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class foo(object):
...   class bar(object):
...     pass
...   def b(self):
...     return bar()
... 
&gt;&gt;&gt; bar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'bar' is not defined
&gt;&gt;&gt; foo.bar
&lt;class '__main__.bar'&gt;
&gt;&gt;&gt; foo().bar()
&lt;__main__.bar object at 0x10048dd10&gt;
</snippet></ROW><ROW><id>9760006</id><snippet>imaplib.IMAP4.error</snippet></ROW><ROW><id>9760177</id><snippet>&gt;&gt;&gt; print 7 - 0.35 * 20
0.0
&gt;&gt;&gt; print 7 - 35 * 0.01 * 20
-8.881784197e-16
</snippet></ROW><ROW><id>9760591</id><snippet>x</snippet></ROW><ROW><id>9760591</id><snippet>[]</snippet></ROW><ROW><id>9760591</id><snippet>x=[]</snippet></ROW><ROW><id>9760591</id><snippet>x</snippet></ROW><ROW><id>9760591</id><snippet>[]</snippet></ROW><ROW><id>9760591</id><snippet>name = [x]*4
</snippet></ROW><ROW><id>9760591</id><snippet>_temp = x
name = [_temp, _temp, _temp, _temp]
</snippet></ROW><ROW><id>9760591</id><snippet>&gt;&gt;&gt; x = []
&gt;&gt;&gt; y = [x]*4
&gt;&gt;&gt; y[0].append(1)
&gt;&gt;&gt; y
[[1], [1], [1], [1]]
</snippet></ROW><ROW><id>9760591</id><snippet>y=[x]*4]</snippet></ROW><ROW><id>9760591</id><snippet>.append(1)</snippet></ROW><ROW><id>9760591</id><snippet>name = [[]]*4
</snippet></ROW><ROW><id>9760591</id><snippet>_temp = []
name = [_temp, _temp, _temp, _temp]
</snippet></ROW><ROW><id>9760591</id><snippet>[]</snippet></ROW><ROW><id>9760591</id><snippet>[]</snippet></ROW><ROW><id>9760591</id><snippet>[[] for _ in range(4)]
</snippet></ROW><ROW><id>9760591</id><snippet>_</snippet></ROW><ROW><id>9760660</id><snippet>&gt;&gt;&gt; myString = "This is a link http://www.google.com"
&gt;&gt;&gt; print re.search("(?P&lt;url&gt;https?://[^\s]+)", myString).group("url")
http://www.google.com
</snippet></ROW><ROW><id>9760660</id><snippet>&gt;&gt;&gt; myString = "These are the links http://www.google.com  and http://stackoverflow.com/questions/839994/extracting-a-url-in-python"
&gt;&gt;&gt; print re.findall(r'(https?://[^\s]+)', myString)
['http://www.google.com', 'http://stackoverflow.com/questions/839994/extracting-a-url-in-python']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9760696</id><snippet>class</snippet></ROW><ROW><id>9760696</id><snippet>type</snippet></ROW><ROW><id>9760696</id><snippet>&gt;&gt;&gt; def inherit_attribute(name, f):
...     def decorator(cls):
...             old_value = getattr(cls, name)
...             new_value = f([getattr(base, name) for base in cls.__bases__], old_value)
...             setattr(cls, name, new_value)
...             return cls
...     return decorator
... 
&gt;&gt;&gt; def update_x(base_values, my_value):
...    return sum(base_values + [my_value], tuple())
... 
&gt;&gt;&gt; class Foo: x = (1,)
... 
&gt;&gt;&gt; @inherit_attribute('x', update_x)
... class Bar(Foo): x = (2,)
... 
&gt;&gt;&gt; Bar.x
(1, 2)
</snippet></ROW><ROW><id>9760696</id><snippet>x</snippet></ROW><ROW><id>9760696</id><snippet>(2,)</snippet></ROW><ROW><id>9760696</id><snippet>Bar</snippet></ROW><ROW><id>9760696</id><snippet>Bar</snippet></ROW><ROW><id>9760696</id><snippet>x</snippet></ROW><ROW><id>9760696</id><snippet>update_x</snippet></ROW><ROW><id>9760696</id><snippet>update_x([(1,)], (2,))
</snippet></ROW><ROW><id>9760696</id><snippet>x</snippet></ROW><ROW><id>9760709</id><snippet>grid</snippet></ROW><ROW><id>9760709</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>9760838</id><snippet>dist-packages</snippet></ROW><ROW><id>9760838</id><snippet>.deb</snippet></ROW><ROW><id>9760838</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>9760838</id><snippet>site-packages</snippet></ROW><ROW><id>9760838</id><snippet>.so</snippet></ROW><ROW><id>9760838</id><snippet>ldd /usr/lib/python2.7/site-packages/yourlibrary.so</snippet></ROW><ROW><id>9760855</id><snippet>os.walk</snippet></ROW><ROW><id>9760855</id><snippet>files = next(os.walk('somedir'))[2]
</snippet></ROW><ROW><id>9760914</id><snippet>In [151]: def foo(): pass

In [152]: {foo:1}
Out[152]: {&lt;function __main__.foo&gt;: 1}

In [153]: {foo:1, Fake(): 2}
Out[153]: {&lt;__main__.Fake at 0x3e04160&gt;: 2, &lt;function __main__.foo&gt;: 1}

In [154]: Fake
Out[154]: __main__.Fake

In [155]: type(Fake)
Out[155]: type
</snippet></ROW><ROW><id>9760992</id><snippet>%</snippet></ROW><ROW><id>9760992</id><snippet>f.write('%s,%s,%s,%s \n' % (numSt,x,y,z))
                         ^
</snippet></ROW><ROW><id>9760992</id><snippet>with open("file_name", "w") as f:
    for row in coordSt:
        f.write("%s,%s,%s,%s\n" % row[-4:])
</snippet></ROW><ROW><id>9761206</id><snippet>^(?:(?! - ).)*(?: - )?(?P&lt;series&gt;(?:(?! - ).)*)
</snippet></ROW><ROW><id>9761206</id><snippet>^(?:(?! - ).)*</snippet></ROW><ROW><id>9761206</id><snippet>(?: - )?</snippet></ROW><ROW><id>9761206</id><snippet>(?:(?! - ).)*</snippet></ROW><ROW><id>9761206</id><snippet>(?P&lt;series&gt;...)</snippet></ROW><ROW><id>9761206</id><snippet>@parts = split $title, / - /, 3;
$series = ((@parts &gt; 1) ? $parts[1] : '');
</snippet></ROW><ROW><id>9761290</id><snippet>In [3]: numSt = []

In [4]: numSti = 0

In [5]: for i in xrange(0,2):
...:         for j in xrange(0,2):
...:             numSti += 1
...:             numSt.append(numSti)
...: 

In [6]: numSt
Out[6]: [1, 2, 3, 4]
</snippet></ROW><ROW><id>9761303</id><snippet>__class__</snippet></ROW><ROW><id>9761487</id><snippet>int()</snippet></ROW><ROW><id>9761487</id><snippet>&gt;&gt;&gt; int('5')
5
</snippet></ROW><ROW><id>9761487</id><snippet>'C'</snippet></ROW><ROW><id>9761487</id><snippet>int()</snippet></ROW><ROW><id>9761487</id><snippet>&gt;&gt;&gt; int('C')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'C'
</snippet></ROW><ROW><id>9761598</id><snippet>html = urllib.urlopen(page).read()
soup = BeautifulSoup(html)
</snippet></ROW><ROW><id>9761598</id><snippet>print html</snippet></ROW><ROW><id>9761614</id><snippet>%</snippet></ROW><ROW><id>9761614</id><snippet>1</snippet></ROW><ROW><id>9761614</id><snippet>n</snippet></ROW><ROW><id>9761614</id><snippet>append</snippet></ROW><ROW><id>9761614</id><snippet>def factors(n):
    result = []

    for i in range(1, n + 1):
        if n % i == 0:
            result.append(i)

    return result
</snippet></ROW><ROW><id>9761614</id><snippet>def factors(n):
    return filter(lambda i: n % i == 0, range(1, n + 1))
</snippet></ROW><ROW><id>9761754</id><snippet>'\xa0'</snippet></ROW><ROW><id>9761754</id><snippet>&gt;&gt;&gt; x = u'[9:16 PM\xa0Erica: with images, \xa0\xa0and that seemed long to me anyway, 9:17 PM\xa0me: yeah, \xa0Erica: so feel free to make it shorter, \xa0\xa0or rather, please do,  9:18 PM\xa0nobody wants to read about that shit for 2 pages, \xa0me: :), \xa0Erica: while  browsing their site, \xa0me: srsly, \xa0Erica: unless of course your writing is magic,  \xa0me: My writing saves drowning puppies, \xa0\xa0Just plucks him right out and gives  them a scratch behind the ears and some kibble, \xa0Erica: Maine is weird, \xa0me: haha]'
&gt;&gt;&gt; x.encode('ascii', 'ignore')
'[9:16 PMErica: with images, and that seemed long to me anyway, 9:17 PMme: yeah, Erica: so feel free to make it shorter, or rather, please do,  9:18 PMnobody wants to read about that shit for 2 pages, me: :), Erica: while  browsing their site, me: srsly, Erica: unless of course your writing is magic,  me: My writing saves drowning puppies, Just plucks him right out and gives  them a scratch behind the ears and some kibble, Erica: Maine is weird, me: haha]'
</snippet></ROW><ROW><id>9761822</id><snippet>logout</snippet></ROW><ROW><id>9762084</id><snippet>subset = data_set[['data_date', 'data_1', 'data_2']]
tuples = [tuple(x) for x in subset.values]
</snippet></ROW><ROW><id>9762515</id><snippet>def pctSame(s1,s2):
    # Make sorted arrays of string chars
    s1c = [x for x in s1]
    s1c.sort()
    s2c = [x for x in s2]
    s2c.sort()
    i1 = 0
    i2 = 0
    same = 0
    # "merge" strings, counting matches
    while ( i1&lt;len(s1c) and i2&lt;len(s2c) ):
        if s1c[i1]==s2c[i2]:
            same += 2
            i1 += 1
            i2 += 1
        elif s1c[i1] &lt; s2c[i2]:
            i1 += 1
        else:
            i2 += 1
    # Return ratio of # of matching chars to total chars
    return same/float(len(s1c)+len(s2c))
</snippet></ROW><ROW><id>9762583</id><snippet>In [17]: idf = df.set_index(['tag', 'epochTimeMS'], verify_integrity=False).sort_index()

In [18]: idf
Out[18]: 
                     event  timeTakenMS
tag  epochTimeMS                       
tag1 1331782842381  event2          436
     1331782842801  event1           16
     1331782842801  event1           17
tag2 1331782841535  event1         1278

In [20]: idf.ix['tag1']
Out[20]: 
                event  timeTakenMS
epochTimeMS                       
1331782842381  event2          436
1331782842801  event1           16
1331782842801  event1           17
</snippet></ROW><ROW><id>9762739</id><snippet>class Sim(object):
    def __init__(self, name):
        self.name = name

names = ['tim','dave','jane']
sims = {}
for name in names:
    sims[name] = Sim(name)
</snippet></ROW><ROW><id>9762820</id><snippet>def DeleteRun(event):
    Click(1250, 741)
    time.sleep(0.1)
    [...]
    return True
</snippet></ROW><ROW><id>9763133</id><snippet>&gt;&gt;&gt; from ast import literal_eval as make_tuple
&gt;&gt;&gt; make_tuple("(1,2,3,4,5)")
(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>9763133</id><snippet>&gt;&gt;&gt; make_tuple("(1)")
1
&gt;&gt;&gt; make_tuple("(1,)")
(1,)
</snippet></ROW><ROW><id>9763133</id><snippet>tuple(int(x) for x in tup_string[1:-1].split(','))</snippet></ROW><ROW><id>9763333</id><snippet>str.format()</snippet></ROW><ROW><id>9763333</id><snippet>%</snippet></ROW><ROW><id>9763333</id><snippet>templet</snippet></ROW><ROW><id>9763333</id><snippet>from templet import stringfunction

def get_val():
    return 100

@stringfunction
def testcode(get_val):
    """
    This is a sample string
    that references a function whose value is: ${ get_val() }
    Incrementing the value: ${ get_val() + 1 }
    """

print(testcode(get_val))
</snippet></ROW><ROW><id>9763333</id><snippet>This is a sample string
that references a function whose value is: 100
Incrementing the value: 101
</snippet></ROW><ROW><id>9763652</id><snippet>double</snippet></ROW><ROW><id>9763652</id><snippet>audioop.rms()</snippet></ROW><ROW><id>9763652</id><snippet>d = np.frombuffer(data, np.int16).astype(np.float)
</snippet></ROW><ROW><id>9763652</id><snippet>&gt;&gt;&gt; import audioop, numpy as np
&gt;&gt;&gt; data = 'abcdefgh'
&gt;&gt;&gt; audioop.rms(data, 2)
25962
&gt;&gt;&gt; d = np.frombuffer(data, np.int16)
&gt;&gt;&gt; np.sqrt((d*d).sum()/(1.*len(d)))
80.131142510262507
&gt;&gt;&gt; d = np.frombuffer(data, np.int16).astype(np.float)
&gt;&gt;&gt; np.sqrt((d*d).sum()/len(d))
25962.360851817772
</snippet></ROW><ROW><id>9763705</id><snippet>w+</snippet></ROW><ROW><id>9763936</id><snippet>hosts</snippet></ROW><ROW><id>9763936</id><snippet>hosts</snippet></ROW><ROW><id>9763968</id><snippet>import itertools

class MyClass(object):
    get_next_id = itertools.count().next

    def __init__(self):
        self.id = self.get_next_id()
</snippet></ROW><ROW><id>9763968</id><snippet>&gt;&gt;&gt; MyClass().id
0
&gt;&gt;&gt; MyClass().id
1
&gt;&gt;&gt; MyClass().id
2
&gt;&gt;&gt; MyClass().id
3
</snippet></ROW><ROW><id>9764261</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>9764261</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>9764261</id><snippet>!=</snippet></ROW><ROW><id>9764261</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>9764301</id><snippet>model = self.treeview.get_model()
</snippet></ROW><ROW><id>9764301</id><snippet>model[0]
</snippet></ROW><ROW><id>9764364</id><snippet>zip</snippet></ROW><ROW><id>9764364</id><snippet>&gt;&gt;&gt; list1 = [3,2,4,1, 1]
&gt;&gt;&gt; list2 = ['three', 'two', 'four', 'one', 'one2']
&gt;&gt;&gt; list1, list2 = zip(*sorted(zip(list1, list2)))
&gt;&gt;&gt; list1
(1, 1, 2, 3, 4)
&gt;&gt;&gt; list2 
('one', 'one2', 'two', 'three', 'four')
</snippet></ROW><ROW><id>9764364</id><snippet>&gt;&gt;&gt; list1, list2 = (list(t) for t in zip(*sorted(zip(list1, list2))))
&gt;&gt;&gt; list1
[1, 1, 2, 3, 4]
&gt;&gt;&gt; list2
['one', 'one2', 'two', 'three', 'four']
</snippet></ROW><ROW><id>9764364</id><snippet>&gt;&gt;&gt; %timeit zip(*sorted(zip(list1, list2)))
100000 loops, best of 3: 3.3 us per loop
&gt;&gt;&gt; %timeit tups = zip(list1, list2); tups.sort(); zip(*tups)
100000 loops, best of 3: 2.84 us per loop
</snippet></ROW><ROW><id>9764418</id><snippet>&gt;&gt;&gt; from nltk.stem.wordnet import WordNetLemmatizer
&gt;&gt;&gt; lemmatizer = WordNetLemmatizer()
&gt;&gt;&gt; lemmatizer.lemmatize('is', 'v')
'be'
&gt;&gt;&gt; lemmatizer.lemmatize('provided', 'v')
'provide'
&gt;&gt;&gt; lemmatizer.lemmatize('using', 'v')
'use'
</snippet></ROW><ROW><id>9764781</id><snippet>username</snippet></ROW><ROW><id>9764781</id><snippet>import sqlite3
conn = sqlite3.connect(":memory:")
conn.execute ("""
              CREATE TABLE users (
                  uid INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE,
                  email TEXT UNIQUE );
             """)

test_users = (
    {'username':"Alice",    'email':"Alice@mail.com"},
    {'username':"Billy",    'email':"Billy@mail.com"},
    {'username':"Charles",  'email':"Charles@mail.com"},
    {'username':"Dick",     'email':"Dick@mail.com"},
    {'username':"Emily",    'email':"Emily@mail.com"},
    {'username':"Faramir",  'email':"Faramir@mail.com"},
)

for user in test_users:
    conn.execute("INSERT INTO users (username, email) VALUES (?,?)",
                 (user['username'],user['email'])
                )

result = conn.execute("SELECT COUNT(*) FROM users WHERE username='Alice'")
number_of_Alices = result.next()[0] # number_of_Alices will be 1
</snippet></ROW><ROW><id>9764781</id><snippet>COUNT</snippet></ROW><ROW><id>9764781</id><snippet>UNIQUE</snippet></ROW><ROW><id>9764781</id><snippet>PRIMARY KEY</snippet></ROW><ROW><id>9764781</id><snippet>"Alice", "alice@wonderland.com"</snippet></ROW><ROW><id>9764781</id><snippet>&gt;&gt;&gt; conn.execute("""INSERT INTO users (username, email)
...                     VALUES ("Alice", "alice@wonderland.com");""")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
sqlite3.IntegrityError: column username is not unique
</snippet></ROW><ROW><id>9764781</id><snippet>INSERT</snippet></ROW><ROW><id>9764781</id><snippet>try:
    conn.execute("""INSERT INTO users (username, email)
                    VALUES ("Alice", "alice@wonderland.com");""")
except sqlite3.IntegrityError:
    print ("Username 'Alice' was already taken.")
</snippet></ROW><ROW><id>9764781</id><snippet>"Главное в новостях".lower()</snippet></ROW><ROW><id>9764781</id><snippet>(?,?,?,?,...)</snippet></ROW><ROW><id>9764781</id><snippet>(%s,%s) % (var1, var2)</snippet></ROW><ROW><id>9764781</id><snippet>Robert Menzies; DROP TABLE users;</snippet></ROW><ROW><id>9764855</id><snippet>class MODULEENTRY32(Structure):
    _fields_ = [( 'dwSize' , DWORD ) , 
                ( 'th32ModuleID' , DWORD ),
                ( 'th32ProcessID' , DWORD ),
                ( 'GlblcntUsage' , DWORD ),
                ( 'ProccntUsage' , DWORD ) ,
                ( 'modBaseAddr' , POINTER(BYTE) ) ,
                ( 'modBaseSize' , DWORD ) , 
                ( 'hModule' , HMODULE ) ,
                ( 'szModule' , c_char * 256 ),
                ( 'szExePath' , c_char * 260 ) ]
</snippet></ROW><ROW><id>9765018</id><snippet>def SD():

  # b is empty
  b= []
  a = 5.0 

  #this will always be 0
  r = len(b) 

  # range(r-1) == [] because it is range(-1)
  # whole loop is skipped
  for n in range(r-1):
      b.append((r[n] -a)**2)

  # float(b) should throw an error, maybe sum(b) ?
  m = (float(b)/r)**0.5
  print("The standard deviation is", m)
main()
</snippet></ROW><ROW><id>9765018</id><snippet>b</snippet></ROW><ROW><id>9765018</id><snippet>SD()</snippet></ROW><ROW><id>9765018</id><snippet>read()</snippet></ROW><ROW><id>9765018</id><snippet>split()</snippet></ROW><ROW><id>9765018</id><snippet>int()</snippet></ROW><ROW><id>9765239</id><snippet>commit()</snippet></ROW><ROW><id>9765266</id><snippet>ZopeTransactionExtension</snippet></ROW><ROW><id>9765266</id><snippet>execute</snippet></ROW><ROW><id>9765266</id><snippet>mark_changed</snippet></ROW><ROW><id>9765266</id><snippet>from zope.sqlalchemy import mark_changed
session = DBSession()
mark_changed(session)
</snippet></ROW><ROW><id>9765266</id><snippet>import transaction
transaction.commit()
</snippet></ROW><ROW><id>9765608</id><snippet>from itertools import product
n = 10

a = [[1 if i==0 or j==0 else 0 for i in range(n)] for j in range(n)]

for i,j in product(range(1, n), repeat=2):
         a[i][j] = a[i-1][j] + a[i][j-1]
</snippet></ROW><ROW><id>9765608</id><snippet>a</snippet></ROW><ROW><id>9765608</id><snippet>a = [[1 - (i &gt; 0 &lt; j) for i in range(n)] for j in range(n)]
</snippet></ROW><ROW><id>9765929</id><snippet>for file in listfiles:
        fn = f+str(count)    # what is this supposed to do?
        fn = open(file,'w')  # old file handle gets garbage collected and closed
        fn.write('hello')
        print 'file=',file
        count = count + 1
</snippet></ROW><ROW><id>9765929</id><snippet>fn</snippet></ROW><ROW><id>9765929</id><snippet>import os
listfiles = os.listdir('/tmp/files')
count = 0
f = ''
fn = []
for file in listfiles:
        fn.append(open(file,'w'))
        fn[-1].write('hello')
        print 'file=',file
        count = count + 1

print count
</snippet></ROW><ROW><id>9766428</id><snippet>__iadd__</snippet></ROW><ROW><id>9766428</id><snippet>__add__</snippet></ROW><ROW><id>9766428</id><snippet>x += y</snippet></ROW><ROW><id>9766428</id><snippet>__iadd__</snippet></ROW><ROW><id>9766428</id><snippet>__add__</snippet></ROW><ROW><id>9766428</id><snippet>list</snippet></ROW><ROW><id>9766428</id><snippet>__iadd__</snippet></ROW><ROW><id>9766485</id><snippet>import os
import gevent

def follow(filename):
    fd = os.open(filename, os.O_RDONLY|os.O_NONBLOCK)
    os.lseek(fd, 0, os.SEEK_END)
    while True:
        lines = os.read(fd, 4096).splitlines()
        if not lines:
            gevent.sleep(.5)
            continue
        else:
            for line in lines:
                print "%s:%s" % (filename, line)

    os.close(fd)

if __name__ == '__main__':
    job1 = gevent.spawn(follow, '/var/log/syslog')
    job2 = gevent.spawn(follow, '/var/log/messages')

    gevent.joinall([job1, job2])
</snippet></ROW><ROW><id>9766647</id><snippet>list_c = [ f(a,b) for (a,b) in zip(list_a,list_b) ] 
</snippet></ROW><ROW><id>9766753</id><snippet>number = ['0','1','2']
def foo(psswd):
    psswd = number[:]

if __name__ == '__main__':
    psswd = []
    foo(psswd)
    print psswd
</snippet></ROW><ROW><id>9766753</id><snippet>psswd = number[:]</snippet></ROW><ROW><id>9766753</id><snippet>psswd</snippet></ROW><ROW><id>9766753</id><snippet>foo(psswd)</snippet></ROW><ROW><id>9766753</id><snippet>foo</snippet></ROW><ROW><id>9766753</id><snippet>passwd</snippet></ROW><ROW><id>9766753</id><snippet>psswd = &lt;something&gt;</snippet></ROW><ROW><id>9766753</id><snippet>foo</snippet></ROW><ROW><id>9766753</id><snippet>&lt;something&gt;</snippet></ROW><ROW><id>9766753</id><snippet>psswd</snippet></ROW><ROW><id>9766753</id><snippet>psswd</snippet></ROW><ROW><id>9766753</id><snippet>psswd[:] = &lt;smething&gt;</snippet></ROW><ROW><id>9766753</id><snippet>psswd.__setitem__</snippet></ROW><ROW><id>9766753</id><snippet>psswd</snippet></ROW><ROW><id>9767324</id><snippet>find()</snippet></ROW><ROW><id>9767324</id><snippet>id=test</snippet></ROW><ROW><id>9767324</id><snippet>markup = '&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'
soup = BeautifulSoup(markup)

tag = soup.a
tag.string = "New link text."
tag
# &lt;a href="http://example.com/"&gt;New link text.&lt;/a&gt;
</snippet></ROW><ROW><id>9767422</id><snippet>round = 42
</snippet></ROW><ROW><id>9767422</id><snippet>round((a/b)*0.9*c)
</snippet></ROW><ROW><id>9767422</id><snippet>round</snippet></ROW><ROW><id>9767422</id><snippet>int</snippet></ROW><ROW><id>9767422</id><snippet>int</snippet></ROW><ROW><id>9767422</id><snippet>round</snippet></ROW><ROW><id>9768190</id><snippet>\n</snippet></ROW><ROW><id>9768339</id><snippet> # assuming that mydata is an numpy array
 ax.hist(mydata, weights=np.zeros_like(data) + 1. / data.size)
 # this will give you fractions
</snippet></ROW><ROW><id>9768382</id><snippet>def loop(f, n):         #f repeats n times
    if n&lt;=0:
        return
    else:
        f()             # don't forget to call f()
        loop(f, n-1)
</snippet></ROW><ROW><id>9768888</id><snippet>hi</snippet></ROW><ROW><id>9768888</id><snippet>loop()</snippet></ROW><ROW><id>9768888</id><snippet>hi()</snippet></ROW><ROW><id>9768888</id><snippet>None</snippet></ROW><ROW><id>9768888</id><snippet>hi()</snippet></ROW><ROW><id>9768888</id><snippet>&gt;&gt;&gt; loop(hi, 5)
hi
hi
hi
hi
hi
</snippet></ROW><ROW><id>9768888</id><snippet>&gt;&gt;&gt; print hi()
hi
None
&gt;&gt;&gt; print hi
&lt;function hi at 0x0000000002422648&gt;
</snippet></ROW><ROW><id>9768957</id><snippet>import math

def distance(row_a, row_b, weights):
    diffs = [math.fabs(a-b) for a,b in zip(row_a, row_b)]
    return sum([v*w for v,w in zip(diffs, weights)])

def get_nearest_neighbour(data, criteria, weights):
    def sort_func(row):
        return distance(row, criteria, weights)
    return min(data, key=sort_func)
</snippet></ROW><ROW><id>9768957</id><snippet>KDTree</snippet></ROW><ROW><id>9769411</id><snippet>CreateView</snippet></ROW><ROW><id>9769411</id><snippet>t</snippet></ROW><ROW><id>9769411</id><snippet>id</snippet></ROW><ROW><id>9769411</id><snippet>createview = CreateView('viewname', t.select().where(t.c.id&gt;5))
engine.execute(createview)

v = Table('viewname', metadata, autoload=True)
for r in engine.execute(v.select()):
    print r
</snippet></ROW><ROW><id>9769411</id><snippet>from sqlalchemy import Table
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.sql.expression import Executable, ClauseElement

class CreateView(Executable, ClauseElement):
    def __init__(self, name, select):
        self.name = name
        self.select = select

@compiles(CreateView)
def visit_create_view(element, compiler, **kw):
    return "CREATE VIEW %s AS %s" % (
         element.name,
         compiler.process(element.select, literal_binds=True)
         )

# test data
from sqlalchemy import MetaData, Column, Integer
from sqlalchemy.engine import create_engine
engine = create_engine('sqlite://')
metadata = MetaData(engine)
t = Table('t',
          metadata,
          Column('id', Integer, primary_key=True),
          Column('number', Integer))
t.create()
engine.execute(t.insert().values(id=1, number=3))
engine.execute(t.insert().values(id=9, number=-3))

# create view
createview = CreateView('viewname', t.select().where(t.c.id&gt;5))
engine.execute(createview)

# reflect view and print result
v = Table('viewname', metadata, autoload=True)
for r in engine.execute(v.select()):
    print r
</snippet></ROW><ROW><id>9769411</id><snippet>@compiles(CreateView, 'sqlite')
def visit_create_view(element, compiler, **kw):
    return "CREATE VIEW IF NOT EXISTS %s AS %s" % (
         element.name,
         compiler.process(element.select, literal_binds=True)
         )
</snippet></ROW><ROW><id>9769454</id><snippet>import jinja2

def include_file(name):
    return jinja2.Markup(loader.get_source(env, name)[0])

loader = jinja2.PackageLoader(__name__, 'templates')
env = jinja2.Environment(loader=loader)
env.globals['include_file'] = include_file

def render():
    return env.get_template('page.html').render()

if __name__ == '__main__':
    print render()
</snippet></ROW><ROW><id>9769454</id><snippet>{{ include_file('file.txt') }}
</snippet></ROW><ROW><id>9769596</id><snippet>for line in file:
    result = re.finditer(regex, line)
    # do something...
</snippet></ROW><ROW><id>9769596</id><snippet>re.py</snippet></ROW><ROW><id>9769596</id><snippet>.match()</snippet></ROW><ROW><id>9769631</id><snippet>del</snippet></ROW><ROW><id>9769631</id><snippet>gc</snippet></ROW><ROW><id>9769631</id><snippet>del</snippet></ROW><ROW><id>9769631</id><snippet>def load():
    return some_huge_data_structure

def process(ds):
    do_whatever_to(ds)

process(load())  # after this, the huge DS will be gone
</snippet></ROW><ROW><id>9769705</id><snippet>celery.registry.TaskRegistry</snippet></ROW><ROW><id>9769705</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9769705</id><snippet>celeryd --loglevel=INFO --settings=celeryconfig
</snippet></ROW><ROW><id>9769705</id><snippet>--loglevel=DEBUG</snippet></ROW><ROW><id>9769833</id><snippet>[char]\n\s*[char]</snippet></ROW><ROW><id>9769833</id><snippet># -*- coding: utf-8 -*-
import re

# Whitespace in Chinese HTML
## Used this solution to create regexp: http://stackoverflow.com/a/2718268/267781
## \s+
fixwhitespace2 = re.compile(u'[\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u3005\u3007\u3021-\u3029\u3038-\u303a\u303b\u3400-\u4db5\u4e00-\u9fc3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\U00020000-\U0002a6d6\U0002f800-\U0002fa1d](\s+)[\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u3005\u3007\u3021-\u3029\u3038-\u303a\u303b\u3400-\u4db5\u4e00-\u9fc3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\U00020000-\U0002a6d6\U0002f800-\U0002fa1d]',re.M)
## \n\s*
fixwhitespace = re.compile(u'[\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u3005\u3007\u3021-\u3029\u3038-\u303a\u303b\u3400-\u4db5\u4e00-\u9fc3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\U00020000-\U0002a6d6\U0002f800-\U0002fa1d](\n\s*)[\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u3005\u3007\u3021-\u3029\u3038-\u303a\u303b\u3400-\u4db5\u4e00-\u9fc3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\U00020000-\U0002a6d6\U0002f800-\U0002fa1d]',re.M)

sample = u'&lt;html&gt;&lt;body&gt;&lt;p&gt;\u795d\u4f6019\u5c81\n    \u751f\u65e5\u5feb\u4e50\u3002&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'

fixwhitespace.sub('',sample)
</snippet></ROW><ROW><id>9769833</id><snippet>&lt;html&gt;&lt;body&gt;&lt;p&gt;祝你19日快乐。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>9769833</id><snippet># -*- coding: utf-8 -*-
from lxml import etree
import re

fixwhitespace = re.compile(u'[\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u3005\u3007\u3021-\u3029\u3038-\u303a\u303b\u3400-\u4db5\u4e00-\u9fc3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\U00020000-\U0002a6d6\U0002f800-\U0002fa1d](\n\s*)[\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u3005\u3007\u3021-\u3029\u3038-\u303a\u303b\u3400-\u4db5\u4e00-\u9fc3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\U00020000-\U0002a6d6\U0002f800-\U0002fa1d]',re.M)
sample = u'&lt;html&gt;&lt;body&gt;&lt;p&gt;\u795d\u4f6019\u5c81\n    \u751f\u65e5\u5feb\u4e50\u3002&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'

doc = etree.HTML(sample)
for t in doc.xpath("//text()[contains(.,'\n')]"):
  if t.is_tail:
    t.getparent().tail = fixwhitespace.sub('',t)
  elif t.is_text:
    t.getparent().text = fixwhitespace.sub('',t)

print etree.tostring(doc)
</snippet></ROW><ROW><id>9769833</id><snippet>&lt;html&gt;&lt;body&gt;&lt;p&gt;祝你19日快乐。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>9770096</id><snippet>def walk(gen, callbacks):
    for item in gen:
        for f in callbacks:
            f(item)
</snippet></ROW><ROW><id>9770096</id><snippet>Queue.put</snippet></ROW><ROW><id>9770096</id><snippet>def source(self, *dests):
    for i in xrange(int(1e4)):
        for dest in dests:
            dest.send(i)

def sink():
    while True:
        i = yield

def t3():
    snk = sink()
    snk.next() # activate the coroutine
    source(snk)

if __name__ == '__main__':

    from timeit import Timer
    n = 1000
    t = Timer("t3()", "from __main__ import source, sink, t3")
    print "%.2f usec/pass" % (1000000 * t.timeit(number=n)/n) # 872.99 usec/pass
</snippet></ROW><ROW><id>9770328</id><snippet>del capture</snippet></ROW><ROW><id>9770328</id><snippet>cvReleaseCapture(capture)
</snippet></ROW><ROW><id>9770480</id><snippet>(level[i] &gt; level[i+1])</snippet></ROW><ROW><id>9770480</id><snippet>for i in range(1,len(list)-1)
</snippet></ROW><ROW><id>9770480</id><snippet>i = i + 1</snippet></ROW><ROW><id>9770686</id><snippet>def scrambled(orig):
    dest = orig[:]
    random.shuffle(dest)
    return dest
</snippet></ROW><ROW><id>9770686</id><snippet>import random
a = range(10)
b = scrambled(a)
print a, b
</snippet></ROW><ROW><id>9770686</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [6, 0, 2, 3, 1, 7, 8, 5, 4, 9]
</snippet></ROW><ROW><id>9770757</id><snippet>os.path.splitext</snippet></ROW><ROW><id>9770757</id><snippet>def split_name(file_name):
   '''
    Returns root_filename, 'middle tokens', and extension
   '''
   tokens = file_name.split('.')

   return (tokens[0], ".".join(tokens[1:-1]), tokens[-1]) if len(tokens) &gt;1 else file_name
</snippet></ROW><ROW><id>9770757</id><snippet>file_name = 'this.is.a.txt'
split_name(file_name)
#result is:
&gt;&gt;&gt;  ('this', 'is.a', 'txt')
</snippet></ROW><ROW><id>9770928</id><snippet>iter()</snippet></ROW><ROW><id>9770928</id><snippet>import threading
import Queue

sentinel = object()

def read_file(name, queue):
    with open(name) as f:
        for line in f:
            queue.put(line)
    queue.put(sentinel)

def process(inqueue, outqueue):
    for line in iter(inqueue.get, sentinel):
        outqueue.put(do_something(line))
    outqueue.put(sentinel)

def write_file(name, queue):
    with open(name, "w") as f:
        for line in iter(queue.get, sentinel):
            f.write(line)

inq = Queue.Queue()
outq = Queue.Queue()

threading.Thread(target=read_file, args=(source_filename, inq)).start()
threading.Thread(target=process, args=(inq, outq)).start()
write_file(target_filename, outq)
</snippet></ROW><ROW><id>9770965</id><snippet>class Client(Process):
    def __init__(self, port_push, port_sub):
        (...) # your class init code here...make sure indentation is correct
</snippet></ROW><ROW><id>9770965</id><snippet>client_class = Client(port_push, port_sub)
client_class.start()
</snippet></ROW><ROW><id>9770965</id><snippet>__call__</snippet></ROW><ROW><id>9770965</id><snippet>__init__</snippet></ROW><ROW><id>9770965</id><snippet>__init__</snippet></ROW><ROW><id>9770965</id><snippet>__call__</snippet></ROW><ROW><id>9770965</id><snippet>import zmq
import time
import sys
import random
from  multiprocessing import Process

def server_push(port="5556"):
    context = zmq.Context()
    socket = context.socket(zmq.PUSH)
    socket.bind("tcp://127.0.0.1:%s" % port)
    print "Running server on port: ", port
    time.sleep(1.0)
    # serves only 5 request and dies
    for reqnum in range(10):
        if reqnum &lt; 6:
            socket.send("Continue")
        else:
            socket.send("Exit")
            print 'Push server sent "Exit" signal'
            break
        time.sleep(0.4) 

def server_pub(port="5558"):
    context = zmq.Context()
    socket = context.socket(zmq.PUB)
    socket.bind("tcp://127.0.0.1:%s" % port)
    socket.setsockopt(zmq.HWM, 1000)
    publisher_id = random.randrange(0,9999)
    print "Running server on port: ", port
    time.sleep(1.0)
    # serves only 5 request and dies
    for reqnum in range(10):
        # Wait for next request from client
        topic = random.randrange(8,10)
        messagedata = "server#%s" % publisher_id
        print "%s %s" % (topic, messagedata)
        socket.send("%d %s" % (topic, messagedata))
        time.sleep(0.4)    


class Client:
    def __init__(self,port_push, port_sub):
        self.port_push = port_push
        self.port_sub = port_sub
        # Initialize poll set

    def __call__(self):
        time.sleep(0.5)
        print 'hello from class client!'
        context = zmq.Context()
        self.socket_pull = context.socket(zmq.PULL)
        self.socket_pull.connect ("tcp://127.0.0.1:%s" % self.port_push)
        print "Connected to server with port %s" % self.port_push
        self.socket_sub = context.socket(zmq.SUB)
        self.socket_sub.connect ("tcp://127.0.0.1:%s" % self.port_sub)
        self.socket_sub.setsockopt(zmq.SUBSCRIBE, "9")
        print "Connected to publisher with port %s" % self.port_sub

        poller = zmq.Poller()
        poller.register(self.socket_pull, zmq.POLLIN)
        poller.register(self.socket_sub, zmq.POLLIN)
        # Work on requests from both server and publisher
        should_continue = True
        print "listening"
        while should_continue:
            # print "hello"
            socks = dict(poller.poll())
            # print poller
            if self.socket_pull in socks and socks[self.socket_pull] == zmq.POLLIN:
                message = self.socket_pull.recv()
                print "Recieved control command: %s" % message
                if message == "Exit": 
                    print "Recieved exit command, client will stop recieving messages"
                    should_continue = False

            if self.socket_sub in socks and socks[self.socket_sub] == zmq.POLLIN:
                string = self.socket_sub.recv()
                topic, messagedata = string.split()
                print "Processing ... ", topic, messagedata

def client(port_push, port_sub):
    print 'hello from function client!'
    context = zmq.Context()
    socket_pull = context.socket(zmq.PULL)
    socket_pull.connect ("tcp://127.0.0.1:%s" % port_push)
    print "Connected to server with port %s" % port_push
    socket_sub = context.socket(zmq.SUB)
    socket_sub.connect ("tcp://127.0.0.1:%s" % port_sub)
    socket_sub.setsockopt(zmq.SUBSCRIBE, "9")
    print "Connected to publisher with port %s" % port_sub
    # Initialize poll set
    poller = zmq.Poller()
    poller.register(socket_pull, zmq.POLLIN)
    poller.register(socket_sub, zmq.POLLIN)
    # Work on requests from both server and publisher
    should_continue = True
    while should_continue:
        socks = dict(poller.poll(1000))
        if socket_pull in socks and socks[socket_pull] == zmq.POLLIN:
            message = socket_pull.recv()
            print "Recieved control command: %s" % message
            if message == "Exit": 
                print "Recieved exit command, client will stop recieving messages"
                should_continue = False

        if socket_sub in socks and socks[socket_sub] == zmq.POLLIN:
            string = socket_sub.recv()
            topic, messagedata = string.split()
            print "Processing ... ", topic, messagedata

if __name__ == "__main__":
    # Now we can run a few servers 
    server_push_port = "5556"
    server_pub_port = "5558"
    Process(target=server_push, args=(server_push_port,)).start()
    Process(target=server_pub, args=(server_pub_port,)).start()
    # Process(target=client,args=(server_push_port,server_pub_port)).start()
    Process(target=Client(server_push_port,server_pub_port)).start()
</snippet></ROW><ROW><id>9770965</id><snippet>import zmq
from multiprocessing import Process
import time

class ServerPubSub(Process):
    def __init__(self, port, n):
        Process.__init__(self)
        self.port = port
        self.n = n

    def run(self):
        self.context = zmq.Context()
        self.pub = self.context.socket(zmq.PUB)
        self.pub.bind('tcp://127.0.0.1:%d' % self.port)
        self.pub.setsockopt(zmq.HWM, 1000)

        time.sleep(1)

        end = False
        for i in range(self.n):
            print 'SRV: sending message %d' % i
            self.pub.send('Message %d' % i)
            print 'SRV: message %d sent' % i
            time.sleep(0.2)

        self.pub.close()

class ClientPubSub(Process):
    def __init__(self, port, n):
        Process.__init__(self)
        self.port = port
        self.n = n

    def run(self):
        self.context = zmq.Context()
        self.sub = self.context.socket(zmq.SUB)
        self.sub.connect('tcp://127.0.0.1:%d' % self.port)
        self.sub.setsockopt(zmq.SUBSCRIBE, '')
        self.poller = zmq.Poller()
        self.poller.register(self.sub, zmq.POLLIN)

        end = False
        count = 0
        while count &lt; self.n:
            ready = dict(self.poller.poll(0))
            if self.sub in ready and ready[self.sub] == zmq.POLLIN:
                msg = self.sub.recv()
                print 'CLI: received message "%s"' % msg
                count += 1

        self.sub.close()

if __name__ == "__main__":
    port = 5000
    n = 10
    server = ServerPubSub(port, n)
    client = ClientPubSub(port, n)

    server.start()
    client.start()

    server.join()
    client.join()
</snippet></ROW><ROW><id>9771041</id><snippet>0.0%</snippet></ROW><ROW><id>9771041</id><snippet>.get()</snippet></ROW><ROW><id>9771041</id><snippet>#!/usr/bin/env python
from __future__ import print_function
import os
import time
from threading import Thread
from Queue import Queue

try: import psutil # pip install psutil
except ImportError:
    psutil = None

def f(queue):
    while True:
        item = queue.get() # block until an item is available
        print("got %s" % (item,))
        break # end thread

# create threads
q = Queue()
threads = [Thread(target=f, args=(q,)) for _ in xrange(1000)]

# starts them
for t in threads:
    t.daemon = True # die with the program
    t.start()


# show cpu load while the threads are blocked on `queue.get()`
if psutil is None:
    print('Observe cpu load yourself (or install psutil and rerun the script)')
    time.sleep(10) # observe cpu load
else:
    p = psutil.Process(os.getpid())
    for _ in xrange(10):
        print("cpu %s%%" % (p.get_cpu_percent(interval=0),))
        time.sleep(1)


# finish threads
for i in range(len(threads)):
    q.put_nowait(i) #note: queue is unlimited so there is no reason to wait

for t in threads: t.join() # wait for completion
print('done')
</snippet></ROW><ROW><id>9771257</id><snippet>traceback.format_exception</snippet></ROW><ROW><id>9771257</id><snippet>traceback.format_tb</snippet></ROW><ROW><id>9771257</id><snippet>traceback</snippet></ROW><ROW><id>9771363</id><snippet>readlines()</snippet></ROW><ROW><id>9771363</id><snippet>%</snippet></ROW><ROW><id>9771363</id><snippet>rsltFile = open('buildLog.txt', 'wb')
...
rsltFile.write(line + b'\n')
</snippet></ROW><ROW><id>9771363</id><snippet>linestr = line.decode('utf8')
</snippet></ROW><ROW><id>9771363</id><snippet>line</snippet></ROW><ROW><id>9771425</id><snippet>import subprocess
def make_shells(n):
    for i in range(n):
         subprocess.Popen(["cmd.exe"])
</snippet></ROW><ROW><id>9771425</id><snippet>import paramiko
def run_ls_la():
    client = paramiko.SSHClient()
    client.connect("myssh.server.org", username="foo", password="bar")
    stdin, stdout, stderr = client.exec_command("ls -la")
    print(stdout.read())
</snippet></ROW><ROW><id>9771560</id><snippet>import Image
from scipy import *
from scipy.optimize import leastsq

# Load the picture with PIL, process if needed
pic         = asarray(Image.open("band2.png"))

# Average the pixel values along vertical axis
pic_avg     = pic.mean(axis=2)
projection  = pic_avg.sum(axis=0)

# Set the min value to zero for a nice fit
projection /= projection.mean()
projection -= projection.min()

# Fit function, two gaussians, adjust as needed
def fitfunc(p,x):
    return p[0]*exp(-(x-p[1])**2/(2.0*p[2]**2)) + \
        p[3]*exp(-(x-p[4])**2/(2.0*p[5]**2))
errfunc = lambda p, x, y: fitfunc(p,x)-y

# Use scipy to fit, p0 is inital guess
p0 = array([0,20,1,0,75,10])
X  = xrange(len(projection))
p1, success = leastsq(errfunc, p0, args=(X,projection))
Y = fitfunc(p1,X)

# Output the result
print "Mean values at: ", p1[1], p1[4]

# Plot the result
from pylab import *
subplot(211)
imshow(pic)
subplot(223)
plot(projection)
subplot(224)
plot(X,Y,'r',lw=5)
show()
</snippet></ROW><ROW><id>9771659</id><snippet>doctest</snippet></ROW><ROW><id>9771659</id><snippet>def test():
    """
    ..
    """
    import doctest
    doctest.testmod()

if __name__=="__main__": 
    test()  # if the module is called as a script then run tests
</snippet></ROW><ROW><id>9772031</id><snippet>df.join(df2)</snippet></ROW><ROW><id>9772222</id><snippet>file</snippet></ROW><ROW><id>9772222</id><snippet>&gt;&gt;&gt; class DelimitedFile(file):
...     def write(self, value):
...             super(DelimitedFile, self).write(value.replace(";", "; "))
... 
&gt;&gt;&gt; f = DelimitedFile("foo", "w")
&gt;&gt;&gt; f.write("hello;world")
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; open("foo").read()
'hello; world'
</snippet></ROW><ROW><id>9772871</id><snippet>socket.setdefaulttimeout()</snippet></ROW><ROW><id>9773151</id><snippet>&gt;&gt;&gt; sandwich = u"smörgås"
&gt;&gt;&gt; sandwich
u'sm\xf6rg\xe5s'
</snippet></ROW><ROW><id>9773151</id><snippet>\xf6</snippet></ROW><ROW><id>9773151</id><snippet>\xe5</snippet></ROW><ROW><id>9773151</id><snippet>&gt;&gt;&gt; sandwich.encode("utf-8")
'sm\xc3\xb6rg\xc3\xa5s'
</snippet></ROW><ROW><id>9773407</id><snippet>[^/]+</snippet></ROW><ROW><id>9773407</id><snippet>.+</snippet></ROW><ROW><id>9773407</id><snippet>.+?</snippet></ROW><ROW><id>9773566</id><snippet>def menu(name=None, location=None):
    if name is None:
        name = raw_input("Enter your name: ")
    if location is None:
        location = raw_input("Enter your location: ")
    print "Name: %s | Location: %s" % (name, location)
</snippet></ROW><ROW><id>9773857</id><snippet>Max</snippet></ROW><ROW><id>9773857</id><snippet>class Egg(models.Model):
    chicken = models.ForeignKey(Chicken, related_name='eggs')
    layed_on = models.DateField(auto_add_now=True)

from django.db.models import Max
Chicken.objects.annotate(last_egg=Max('eggs__layed_on'))
</snippet></ROW><ROW><id>9773891</id><snippet>&gt;&gt;&gt; mydict={'öö':1,'ää':2}
&gt;&gt;&gt; mydict
{'\xc3\xb6\xc3\xb6': 1, '\xc3\xa4\xc3\xa4': 2}
&gt;&gt;&gt; pickle.dump(mydict, open('/tmp/test.pkl', 'wb'))
&gt;&gt;&gt; pickle.load(open('/tmp/test.pkl', 'rb'))
{'\xc3\xb6\xc3\xb6': 1, '\xc3\xa4\xc3\xa4': 2}
</snippet></ROW><ROW><id>9773891</id><snippet>&gt;&gt;&gt; mydict={u'öö':1,u'ää':2}
</snippet></ROW><ROW><id>9774027</id><snippet>__dict__</snippet></ROW><ROW><id>9774027</id><snippet>self</snippet></ROW><ROW><id>9774244</id><snippet>*args</snippet></ROW><ROW><id>9774244</id><snippet>**kwargs</snippet></ROW><ROW><id>9774244</id><snippet>def __init__(self, x=None, *t):
</snippet></ROW><ROW><id>9774491</id><snippet>tarfile.is_tarfile</snippet></ROW><ROW><id>9774491</id><snippet>tarfile.open</snippet></ROW><ROW><id>9774491</id><snippet>try:
    optfile = tarfile.open(...)
except tarfile.ReadError:
    # not a tarfile
</snippet></ROW><ROW><id>9774891</id><snippet>players = db.GqlQuery("SELECT * FROM Player")

playerInfo  = []

for player in players:
    email = player.email.encode("utf-8")
    gem =  str(player.gem)

    playerInfo.append({"email" :email, "gem": gem})

b = json.dumps(playerInfo)

self.response.out.write(b)
</snippet></ROW><ROW><id>9774891</id><snippet>print</snippet></ROW><ROW><id>9774891</id><snippet>print</snippet></ROW><ROW><id>9775095</id><snippet>p</snippet></ROW><ROW><id>9775095</id><snippet>doc.createElement('p')</snippet></ROW><ROW><id>9775095</id><snippet>main.attributes['class']='memory'</snippet></ROW><ROW><id>9775095</id><snippet>from xml.dom.minidom import Document

doc = Document()
root = doc.createElement('root')
doc.appendChild(root)
for i in range(1,3):
    main = doc.createElement('item')
    main.attributes['class']='memory'
    root.appendChild(main)
    for j in range(1,3):
        p = doc.createElement('p')
        text = doc.createTextNode('DIMM Size'+str(j))
        p.appendChild(text)
        main.appendChild(p)

print (doc.toprettyxml(indent='\t'))
</snippet></ROW><ROW><id>9775095</id><snippet>from xml.etree import cElementTree as etree

root = etree.Element('root')
for i in range(1,3):
    item = etree.SubElement(root, 'item')
    item.attrib['class']='memory'
    for j in range(1,3):
        p = etree.SubElement(item, 'p')
        p.text = 'DIMM Size %s'%j

print etree.tostring(root)
</snippet></ROW><ROW><id>9775177</id><snippet>#!/usr/bin/python

import commands
import subprocess
import os
import sys

pr = subprocess.Popen( "/usr/bin/git log" , cwd = os.path.dirname( '/ext/home/rakesh.kumar/workspace/myproject/' ), shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE )
(out, error) = pr.communicate()


print "Error : " + str(error) 
print "out : " + str(out)
</snippet></ROW><ROW><id>9775378</id><snippet>In [1]: import numpy

In [2]: a = array([[1,2,3],[4,5,6]])

In [3]: b = array([[9,8,7],[6,5,4]])

In [4]: numpy.concatenate((a,b))
Out[4]: 
array([[1, 2, 3],
       [4, 5, 6],
       [9, 8, 7],
       [6, 5, 4]])
</snippet></ROW><ROW><id>9775378</id><snippet>In [1]: a = array([1,2,3])

In [2]: b = array([4,5,6])

In [3]: numpy.vstack((a,b))
Out[3]: 
array([[1, 2, 3],
       [4, 5, 6]])
</snippet></ROW><ROW><id>9775389</id><snippet>item</snippet></ROW><ROW><id>9775389</id><snippet>for row in my_list:
    for k in (1, 2, 3, 5):
        row[k] = float(row[k])
</snippet></ROW><ROW><id>9775389</id><snippet>item = float(item)
</snippet></ROW><ROW><id>9775389</id><snippet>float(item)</snippet></ROW><ROW><id>9775389</id><snippet>item</snippet></ROW><ROW><id>9775389</id><snippet>item</snippet></ROW><ROW><id>9775446</id><snippet>sql = "INSERT INTO warrent(link, content) values (\'{0}\', \'{1}\')".format(url,page)
self.curs.execute(sql)
</snippet></ROW><ROW><id>9775640</id><snippet>.</snippet></ROW><ROW><id>9775640</id><snippet>regex = re.compile(r'(?&lt;=_).*(?=\.)')
</snippet></ROW><ROW><id>9775640</id><snippet>regex = re.compile(r'_(.*)\.')
print regex.search('10.10.10.17_super-micro-100-13.txt').group(1)
# super-micro-100-13
</snippet></ROW><ROW><id>9775761</id><snippet>max(min(my_value, max_value), min_value)
</snippet></ROW><ROW><id>9775876</id><snippet>diff.py</snippet></ROW><ROW><id>9775876</id><snippet>difflib</snippet></ROW><ROW><id>9775876</id><snippet>diff.py</snippet></ROW><ROW><id>9776034</id><snippet>Text.position = rectangle.position + rectangle.size / 2
Text.position.X = Text.position.X - text.width / 2
</snippet></ROW><ROW><id>9776152</id><snippet>my_array = numpy.empty((len(huge_list_of_lists), row_length))
for i, x in enumerate(huge_list_of_lists):
    my_array[i] = create_row(x)
</snippet></ROW><ROW><id>9776152</id><snippet>create_row()</snippet></ROW><ROW><id>9776152</id><snippet>row_length</snippet></ROW><ROW><id>9776152</id><snippet>create_row()</snippet></ROW><ROW><id>9776155</id><snippet>pandas</snippet></ROW><ROW><id>9776155</id><snippet>data[['col1', 'col2', 'col3']]</snippet></ROW><ROW><id>9776155</id><snippet>import numpy as np

data = np.recfromcsv('iris.csv')

# In this case, it's just all but the last, but we could be more general
# This must be a list and not a tuple, though.
float_fields = list(data.dtype.names[:-1])

float_dat = data[float_fields]

# Now we just need to view it as a "regular" 2D array...
float_dat = float_dat.view(np.float).reshape((data.size, -1))

# And we can normalize columns as usual.
normalized = (float_dat - float_dat.min(axis=0)) / float_dat.ptp(axis=0)
</snippet></ROW><ROW><id>9776155</id><snippet>pandas</snippet></ROW><ROW><id>9776155</id><snippet>import pandas
data = pandas.read_csv('iris.csv', header=None)

float_dat = data[data.columns[:-1]]
dmin, dmax = float_dat.min(axis=0), float_dat.max(axis=0)

data[data.columns[:-1]] = (float_dat - dmin) / (dmax - dmin)
</snippet></ROW><ROW><id>9776544</id><snippet>class square_result(object):
    def __init__(self, f):
        pass

    def __call__(self, x, y):
        return (x+y)**2

class append_abc(object):
    def __init__(self, f):
        self.f = f

    def __call__(self, *args):
        return str(self.f(*args)) + "abc"

@append_abc
@square_result
def add_two_numbers(x, y):
    return x + y

print(add_two_numbers(2,5))
</snippet></ROW><ROW><id>9776544</id><snippet>class square_result(object):
    def __call__(self, x, y):
        return (x+y)**2

# this has no effect at all after the reassignment    
def add_two_numbers(x, y):
    return x + y

add_two_numbers = square_result()
</snippet></ROW><ROW><id>9776544</id><snippet>SquareResult</snippet></ROW><ROW><id>9776548</id><snippet>os.path.getsize()</snippet></ROW><ROW><id>9776548</id><snippet>os.stat()</snippet></ROW><ROW><id>9776548</id><snippet>def getsize(filename):
    """Return the size of a file, reported by os.stat()."""
    return os.stat(filename).st_size
</snippet></ROW><ROW><id>9776548</id><snippet>os.path.getsize()</snippet></ROW><ROW><id>9776548</id><snippet>&gt;&gt;&gt; os.path.getsize.__code__
&lt;code object getsize at 0x1d457b0, file "/usr/lib/python2.7/genericpath.py", line 47&gt;
</snippet></ROW><ROW><id>9777096</id><snippet>def dec(s):
    s = list(s)
    i = len(s) - 1
    myString = ""
    while (i &gt;= 0):
        if s[i] == '0':
            s[i] = '9'
            i -= 1
        else:
            s[i] = chr(int(s[i]) - 1)
            break
    return ''.join(s)
</snippet></ROW><ROW><id>9777096</id><snippet>def dec(s):
    i = len(s) - 1
    myString = ""
    while (i &gt;= 0):
        if s[i] == '0':
            s = s[:i] + "9" + s[i+1:]
            i -= 1
        else:
            s = s[:i] + chr(int(s[i]) - 1) + s[i+1:]
            break
    return s
</snippet></ROW><ROW><id>9777176</id><snippet>result = result.sort()
</snippet></ROW><ROW><id>9777176</id><snippet>result.sort()
</snippet></ROW><ROW><id>9777176</id><snippet>sort</snippet></ROW><ROW><id>9777176</id><snippet>None</snippet></ROW><ROW><id>9777176</id><snippet>None</snippet></ROW><ROW><id>9777176</id><snippet>max(len(Ancestors(T,x)) for x in OrdLeaves(T))
</snippet></ROW><ROW><id>9777176</id><snippet>max</snippet></ROW><ROW><id>9777335</id><snippet>slug</snippet></ROW><ROW><id>9777335</id><snippet>Tag</snippet></ROW><ROW><id>9777335</id><snippet>DetailView</snippet></ROW><ROW><id>9777335</id><snippet>ListView</snippet></ROW><ROW><id>9777335</id><snippet>ListView</snippet></ROW><ROW><id>9777447</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; A = np.array([[1,2,3,4],[4,5,6,7],[7,8,9,10]])
&gt;&gt;&gt; B = A[:2]
&gt;&gt;&gt; C = A[2:]
&gt;&gt;&gt; B
array([[1, 2, 3, 4],
       [4, 5, 6, 7]])
&gt;&gt;&gt; C
array([[ 7,  8,  9, 10]])
</snippet></ROW><ROW><id>9777453</id><snippet>print_sleep</snippet></ROW><ROW><id>9777453</id><snippet>True</snippet></ROW><ROW><id>9777453</id><snippet>def cancel():
    if self._job is not None:
        root.after_cancel(self._job)
        self._job = None

def goodbye_world():
    print "Stopping Feed"
    cancel()
    button.configure(text = "Start Feed", command=hello_world)

def hello_world():
    print "Starting Feed"
    button.configure(text = "Stop Feed", command=goodbye_world)
    print_sleep()

def print_sleep():
    foo = random.randint(4000,7500)
    print "Sleeping", foo
    self._job = root.after(foo,print_sleep)
</snippet></ROW><ROW><id>9777453</id><snippet>self._job</snippet></ROW><ROW><id>9777537</id><snippet>row</snippet></ROW><ROW><id>9777537</id><snippet>csv.reader</snippet></ROW><ROW><id>9777537</id><snippet>final_file.write('%s, %s' % (row,total_value) + '\n')</snippet></ROW><ROW><id>9777537</id><snippet>csv.writer</snippet></ROW><ROW><id>9777537</id><snippet>final_file = csv.writer(open('FinalLogFile.csv', 'wb'), delimiter="\t")
...
    row.append(total_value)
    final_file.writerow(row)
...
</snippet></ROW><ROW><id>9777552</id><snippet>' Grab the contents of the clipboard
Set objIE = CreateObject("InternetExplorer.Application")
objIE.Navigate("about:blank")
strClipboard = objIE.document.parentwindow.clipboardData.GetData("text")
objIE.Quit
</snippet></ROW><ROW><id>9777552</id><snippet>Set Encoder = CreateObject("System.Text.UTF8Encoding") 
strClipboardB = Encoder.GetBytes_4(strClipboard) 'get bytes
Set Encoder = Nothing
</snippet></ROW><ROW><id>9777583</id><snippet>os.system</snippet></ROW><ROW><id>9777583</id><snippet>/bin/sh</snippet></ROW><ROW><id>9777583</id><snippet>&lt;(...)</snippet></ROW><ROW><id>9777583</id><snippet>os.system('bash -c "bash &lt;(curl -s http://mysite.com/myscript.sh) World"')
</snippet></ROW><ROW><id>9777748</id><snippet>A</snippet></ROW><ROW><id>9777748</id><snippet>B</snippet></ROW><ROW><id>9777748</id><snippet>A.objects.filter(b__isnull=False)
</snippet></ROW><ROW><id>9777748</id><snippet>b__isnull=True</snippet></ROW><ROW><id>9777748</id><snippet>A</snippet></ROW><ROW><id>9777748</id><snippet>B</snippet></ROW><ROW><id>9777917</id><snippet>pdb</snippet></ROW><ROW><id>9777917</id><snippet>commands</snippet></ROW><ROW><id>9777917</id><snippet>help commands</snippet></ROW><ROW><id>9777917</id><snippet>for d in dir(request): print d
</snippet></ROW><ROW><id>9777917</id><snippet>print dir(request)</snippet></ROW><ROW><id>9777917</id><snippet>pp dir(request)</snippet></ROW><ROW><id>9777941</id><snippet>map(list, my_array)
</snippet></ROW><ROW><id>9777941</id><snippet>my_array = numpy.array(my_list, dtype=numpy.float64)
</snippet></ROW><ROW><id>9777976</id><snippet>def getpath():
    os.path.abspath(os.path.dirname(__file__))
</snippet></ROW><ROW><id>9778140</id><snippet>list1 = ['2D','  ','  ','  ','  ','  ','  ','  ','  ']
list2 = ['XX','XX','5D','4S','3D','  ','  ','  ','  ']
list3 = ['XX','XX','XX','8C','7H','6C','  ','  ','  ']

list3[3:6] = list2[2:5]

print list3
# ['XX', 'XX', 'XX', '5D', '4S', '3D', '  ', '  ', '  ']
</snippet></ROW><ROW><id>9778140</id><snippet>'XX'</snippet></ROW><ROW><id>9778140</id><snippet>from itertools import takewhile
i = sum(1 for _ in takewhile(lambda elem: elem == 'XX', list3))

list3[i:i+3] = list2[i-1:i+2]
</snippet></ROW><ROW><id>9778407</id><snippet>a, b, c = (1, 2, 3)
</snippet></ROW><ROW><id>9778486</id><snippet>concordance()</snippet></ROW><ROW><id>9778486</id><snippet>my_concordances = []
my_inputs = [elem for elem in text1 if elem.startswith(word)]
for input in my_inputs:
    my_concordances.append(text1.concordance(input))
</snippet></ROW><ROW><id>9778486</id><snippet>my_concordances</snippet></ROW><ROW><id>9778486</id><snippet>my_concordances</snippet></ROW><ROW><id>9778486</id><snippet>concordance()</snippet></ROW><ROW><id>9778486</id><snippet>my_inputs</snippet></ROW><ROW><id>9778486</id><snippet>concordance()</snippet></ROW><ROW><id>9778501</id><snippet>from subprocess import Popen, PIPE

sh = Popen("sudo %s" % bf_path, shell=True, stdout=PIPE, stderr=PIPE)
</snippet></ROW><ROW><id>9778799</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.random.random((10, 20))
x = x.cumsum(axis=1)

fig, ax = plt.subplots()
for i, row in enumerate(x):
    ax.plot(row, i * np.ones_like(row), 'ko')

ax.set_ylim([-0.5, 9.5])
ax.set_yticks(range(10))
ax.invert_yaxis()
plt.show()
</snippet></ROW><ROW><id>9778799</id><snippet>import numpy as np

data = [[(1, 2), (3, 4)],
        [(5, 6), (7, 8)]]

data = np.array(data)

x = data[:,:,0]
velocity = data[:,:,1]
</snippet></ROW><ROW><id>9778799</id><snippet>x: 
array([[1, 3],
       [5, 7]])

velocity:
array([[2, 4],
       [6, 8]])
</snippet></ROW><ROW><id>9779186</id><snippet>r.content.decode('utf-8')</snippet></ROW><ROW><id>9779293</id><snippet>del</snippet></ROW><ROW><id>9779321</id><snippet>%(name)s</snippet></ROW><ROW><id>9779656</id><snippet>sorted</snippet></ROW><ROW><id>9779656</id><snippet>sorted(({'IP1': ip1, 'IP2': k, 'val':v}
           for ip1,subdct in dct.items()
           for k,v in subdct.items()),
       key=lambda newd: newd['val'])
</snippet></ROW><ROW><id>9779656</id><snippet>dict</snippet></ROW><ROW><id>9779656</id><snippet>dct</snippet></ROW><ROW><id>9779843</id><snippet>dA = A[1:, :-1] - A[:-1, :-1]
dB = B[:-1, 1:] - B[:-1, :-1]
C = dA * dB
</snippet></ROW><ROW><id>9780115</id><snippet>webbrowser.open_new_tab</snippet></ROW><ROW><id>9780115</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9780115</id><snippet>os.fork</snippet></ROW><ROW><id>9780115</id><snippet>subprocess.Popen((sys.executable, 'main.py'))</snippet></ROW><ROW><id>9780172</id><snippet>def fun1():

    allresults = []

    # do you loop and generate objects like
    results = {
        "A": {"B":1,"C":0,"D":3},
        "B": {"A":1,"C":0,"D":3},
        "C": {"B":1,"A":0,"D":3},
        "D": {"B":1,"C":0,"A":3},
        "min": 0,
        "x": "A",
        "y": "C",
        "new": "AC" 
    }

    # and add them to your list
    allresults.append(results)

    return allresults
</snippet></ROW><ROW><id>9780172</id><snippet>data = fun1()
</snippet></ROW><ROW><id>9780173</id><snippet>featured</snippet></ROW><ROW><id>9780454</id><snippet>List = [["W", "w"], ["A", "A"], ["a", "a"]]
aValues = [[ord(e1), ord(e2)] for e1, e2 in List]
print(aValues)
</snippet></ROW><ROW><id>9780454</id><snippet>aValues = [map(ord, pair) for pair in List]
</snippet></ROW><ROW><id>9780454</id><snippet>List</snippet></ROW><ROW><id>9780454</id><snippet>def ascii(lst):
    return [[ord(element) for element in pair] for pair in lst]
</snippet></ROW><ROW><id>9780454</id><snippet>List = [["W", "w"], ["A", "A"], ["a", "a"]]
ascii(List)
&gt; [[87, 119], [65, 65], [97, 97]]
</snippet></ROW><ROW><id>9781027</id><snippet>urllib.request</snippet></ROW><ROW><id>9781027</id><snippet>'Connection: close'</snippet></ROW><ROW><id>9781027</id><snippet>http.client</snippet></ROW><ROW><id>9781027</id><snippet>keep-alive</snippet></ROW><ROW><id>9781027</id><snippet>Connection: close</snippet></ROW><ROW><id>9781027</id><snippet>http.client</snippet></ROW><ROW><id>9781027</id><snippet>conn.connect()</snippet></ROW><ROW><id>9781027</id><snippet>import time

def make_http_connection(*args, **kwargs):
    while True: # make new http connections
        h = http.client.HTTPConnection(*args, **kwargs)
        while True: # make multiple requests using a single connection
            try:
                h.request('GET', '/') # send request; make conn. on the first run
                response = h.getresponse()
                while True: # read response slooowly
                    b = response.read(1) # read 1 byte
                    if not b:
                       break
                    time.sleep(60) # wait a minute before reading next byte
                    #note: the whole minute might pass before we notice that 
                    #  the server has closed the connection already
            except Exception:
                break # make new connection on any error
</snippet></ROW><ROW><id>9781027</id><snippet>'Connection: close'</snippet></ROW><ROW><id>9781027</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>9781027</id><snippet>while threads:
    try:
        for t in threads[:]: # enumerate threads
            t.join(.1) # timeout 0.1 seconds
            if not t.is_alive():
               threads.remove(t)
    except KeyboardInterrupt:
        break
</snippet></ROW><ROW><id>9781027</id><snippet>while threading.active_count() &gt; 1:
    try:
        main_thread = threading.current_thread()
        for t in threading.enumerate(): # enumerate all alive threads
            if t is not main_thread:
               t.join(.1)
    except KeyboardInterrupt:
        break
</snippet></ROW><ROW><id>9781027</id><snippet>threading</snippet></ROW><ROW><id>9781027</id><snippet>threading</snippet></ROW><ROW><id>9781027</id><snippet>requests.async</snippet></ROW><ROW><id>9781027</id><snippet>gevent</snippet></ROW><ROW><id>9781047</id><snippet>self.dockWidgetContents.setMinimumHeight(100)
</snippet></ROW><ROW><id>9781361</id><snippet>__init__</snippet></ROW><ROW><id>9781361</id><snippet>class Chaos:
    def __init__(self):
        self.list_value = []
        self.value = "default"
</snippet></ROW><ROW><id>9781361</id><snippet>value</snippet></ROW><ROW><id>9781361</id><snippet>self.value</snippet></ROW><ROW><id>9781361</id><snippet>self.X</snippet></ROW><ROW><id>9781361</id><snippet>X</snippet></ROW><ROW><id>9781361</id><snippet>self.list_value</snippet></ROW><ROW><id>9781824</id><snippet>sqlite3</snippet></ROW><ROW><id>9782454</id><snippet>&gt;&gt;&gt; abc = [['a','EB'],['b','F8']]
&gt;&gt;&gt; for i in abc:
...    print i
...
['a', 'EB']
['b', 'F8']
</snippet></ROW><ROW><id>9782454</id><snippet>for i in abc:
    if x == i[0]:
           print(i[1])
</snippet></ROW><ROW><id>9782606</id><snippet>X = [(i-C1)/C2 for i in X]
</snippet></ROW><ROW><id>9782606</id><snippet>x = [(i-c1)/c2 for i in x]
</snippet></ROW><ROW><id>9782795</id><snippet>from itertools import groupby
from operator import itemgetter

table = '''\
field1      field2  field3                  field4  field5                  
3/16/2012   a       KONDRA I KOMANG         1       TERAPI OZON 60 MENIT    
3/16/2012   b       WARTI NI WAYAN          1       TERAPI OZON 60 MENIT    
3/16/2012   c       MARDIKA I GUSTI PUTU    1       TERAPI OZON 60 MENIT    
3/16/2012   d       DARMIASIH NI KOMANG     1       TERAPI OZON 60 MENIT    
3/19/2012   e       DARMIASIH NI KOMANG     0.5     Orbitalized 240T        
3/19/2012   e       DARMIASIH NI KOMANG     0.5     Octogenarian 240T       
3/19/2012   e       DARMIASIH NI KOMANG     1       TERAPI AKUPUNKTUR       
3/29/2012   f       ARNI NI MADE            3       Lingzhi 60C             
3/29/2012   f       ARNI NI MADE            1       Octogenarian 240T
'''

# Setup bounds for fields in fixed width table.
fields = (0,12,20,44,52,None)
bounds = zip(fields[:-1],fields[1:])

# Parse the data
data = []
for line in table.splitlines():
    data.append([line[a:b].rstrip() for a,b in bounds])

# Sort the data by field3,field2 for groupby.
data.pop(0) # remove header line
data.sort(key=itemgetter(2,1))

# Output result header
print '{:24}{}'.format('field1','field2')

# Output result lines
for field3,items in groupby(data,key=itemgetter(2)):
    result = []
    for field1,field1_items in groupby(items,key=itemgetter(0)):
        result.append(';{} ({})'.format(field1,' + '.join(' '.join(item[3:]) for item in field1_items)))
    print '{:24}{}'.format(field3,' '.join(result))
</snippet></ROW><ROW><id>9782795</id><snippet>field1                  field2
ARNI NI MADE            ;3/29/2012 (3 Lingzhi 60C + 1 Octogenarian 240T)
DARMIASIH NI KOMANG     ;3/16/2012 (1 TERAPI OZON 60 MENIT) ;3/19/2012 (0.5 Orbitalized 240T + 0.5 Octogenarian 240T + 1 TERAPI AKUPUNKTUR)
KONDRA I KOMANG         ;3/16/2012 (1 TERAPI OZON 60 MENIT)
MARDIKA I GUSTI PUTU    ;3/16/2012 (1 TERAPI OZON 60 MENIT)
WARTI NI WAYAN          ;3/16/2012 (1 TERAPI OZON 60 MENIT)
</snippet></ROW><ROW><id>9782921</id><snippet>import re
print re.findall('[A-Z][a-z]?|[0-9]+', 'Na2SO4MnO4')
</snippet></ROW><ROW><id>9782921</id><snippet>['Na', '2', 'S', 'O', '4', 'Mn', 'O', '4']
</snippet></ROW><ROW><id>9782921</id><snippet>Find everything that is either

    [A-Z]   # A,B,...Z, ie. an uppercase letter
    [a-z]   # followed by a,b,...z, ie. a lowercase latter
    ?       # which is optional
    |       # or
    [0-9]   # 0,1,2...9, ie a digit
    +       # and perhaps some more of them
</snippet></ROW><ROW><id>9782921</id><snippet>[A-Z][a-z]?</snippet></ROW><ROW><id>9782921</id><snippet>|</snippet></ROW><ROW><id>9782921</id><snippet>Ba|Na|Mn...|C|O</snippet></ROW><ROW><id>9782921</id><snippet>  8(NH4)3P4Mo12O40 + 64NaNO3 + 149NH4NO3 + 135H2O
</snippet></ROW><ROW><id>9782926</id><snippet>status</snippet></ROW><ROW><id>9782926</id><snippet>choices</snippet></ROW><ROW><id>9782926</id><snippet>get_status_display()</snippet></ROW><ROW><id>9783167</id><snippet>setup.py</snippet></ROW><ROW><id>9783167</id><snippet>--home</snippet></ROW><ROW><id>9783167</id><snippet>--user</snippet></ROW><ROW><id>9783167</id><snippet>--prefix</snippet></ROW><ROW><id>9783167</id><snippet>--install-scripts</snippet></ROW><ROW><id>9783167</id><snippet>$PATH</snippet></ROW><ROW><id>9783167</id><snippet>which</snippet></ROW><ROW><id>9783167</id><snippet>$ export WORKON_HOME='/tmp/so'
$ mkvirtualenv blah
$ python
Python 2.7.2
&gt;&gt;&gt; import os
&gt;&gt;&gt; import distutils.sysconfig
&gt;&gt;&gt; pre = distutils.sysconfig.get_config_var("prefix")
&gt;&gt;&gt; bindir = os.path.join(pre, "bin")
&gt;&gt;&gt; print bindir
/tmp/so/blah/bin
</snippet></ROW><ROW><id>9783167</id><snippet>pyflakes</snippet></ROW><ROW><id>9783167</id><snippet>pip install pyflakes</snippet></ROW><ROW><id>9783167</id><snippet>get_config_vars</snippet></ROW><ROW><id>9783167</id><snippet>&gt;&gt;&gt; [(k, v) for (k, v) in distutils.sysconfig.get_config_vars().items() if "/tmp/so" in str(v)]
[('prefix', '/private/tmp/so/blah'), ('exec_prefix', '/private/tmp/so/blah')]
</snippet></ROW><ROW><id>9783167</id><snippet>sys</snippet></ROW><ROW><id>9783167</id><snippet>sys.prefix</snippet></ROW><ROW><id>9783167</id><snippet>sys.execprefix</snippet></ROW><ROW><id>9783625</id><snippet>soup.findAll("table")</snippet></ROW><ROW><id>9783625</id><snippet>find()</snippet></ROW><ROW><id>9783625</id><snippet>decompose()</snippet></ROW><ROW><id>9783625</id><snippet>tables = soup.findAll("table")

for table in tables:
     if table.findParent("table") is None:
         print str(table)
</snippet></ROW><ROW><id>9783625</id><snippet>&lt;table&gt;table1&lt;table&gt;inner11&lt;table&gt;inner12&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;
&lt;table&gt;table2&lt;table&gt;inner2&lt;/table&gt;&lt;/table&gt;
&lt;table&gt;table3&lt;table&gt;inner3&lt;/table&gt;&lt;/table&gt;
&lt;table&gt;table4&lt;table&gt;inner4&lt;/table&gt;&lt;/table&gt;
</snippet></ROW><ROW><id>9783823</id><snippet>/usr/share/pyshared</snippet></ROW><ROW><id>9783823</id><snippet>uno.py</snippet></ROW><ROW><id>9783823</id><snippet>pyinotify.py</snippet></ROW><ROW><id>9783823</id><snippet>uno.py</snippet></ROW><ROW><id>9783823</id><snippet>pyinotify.py</snippet></ROW><ROW><id>9783823</id><snippet>chmod u+x</snippet></ROW><ROW><id>9783823</id><snippet>if __name__ == '__main__':
    command_line()
</snippet></ROW><ROW><id>9783823</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>9783949</id><snippet>ast</snippet></ROW><ROW><id>9783949</id><snippet>ast.NodeVisitor</snippet></ROW><ROW><id>9783949</id><snippet>ast.NodeTransfomer</snippet></ROW><ROW><id>9783949</id><snippet>import ast, inspect

def find_tests(module):
    # generate AST from module's source
    tree = ast.parse(inspect.getsource(module))
    # return tests in module, assuming they are top level function definitions
    return [node for node in tree.body if isinstance(node, ast.FunctionDef)]

def print_docstrings(test):
    for node in test.body:
        if isinstance(node, ast.Expr):
            # print lineno and docstring
            print node.value.lineno, node.value.s

if __name__ == '__main__':
    import test_adding
    for test in find_tests(test_adding):
        print_docstrings(test)
</snippet></ROW><ROW><id>9784166</id><snippet>chart.data = [(20.5,32.4),(0.01, 0.01)]
</snippet></ROW><ROW><id>9784281</id><snippet>IOError: Error reading file '&lt;!DOCTYPE html PUBLIC  ...
</snippet></ROW><ROW><id>9784281</id><snippet>doc = lxml.html.parse(url)</snippet></ROW><ROW><id>9784281</id><snippet>doc = lxml.html.fromstring(res.content)
</snippet></ROW><ROW><id>9784370</id><snippet>from foo import *</snippet></ROW><ROW><id>9784370</id><snippet>dir</snippet></ROW><ROW><id>9784370</id><snippet>foo = __import__('foo')
for attr in dir(foo):
    if not attr.startswith('_'):
        globals()[attr] = getattr(foo, attr)
</snippet></ROW><ROW><id>9784370</id><snippet>from foo import *</snippet></ROW><ROW><id>9784607</id><snippet>a = a + b</snippet></ROW><ROW><id>9784607</id><snippet>a += b</snippet></ROW><ROW><id>9784607</id><snippet>a.__add__(b)</snippet></ROW><ROW><id>9784607</id><snippet>a.__iadd__(b)</snippet></ROW><ROW><id>9784607</id><snippet>a</snippet></ROW><ROW><id>9784607</id><snippet>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; id(a)
34660104
&gt;&gt;&gt; a = a + [a]
&gt;&gt;&gt; id(a)
34657224
&gt;&gt;&gt; id(a[2])
34660104
</snippet></ROW><ROW><id>9784607</id><snippet>a</snippet></ROW><ROW><id>9784607</id><snippet>a</snippet></ROW><ROW><id>9784607</id><snippet>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; id(a)
34658632
&gt;&gt;&gt; a += [a]
&gt;&gt;&gt; id(a)
34658632
&gt;&gt;&gt; id(a[2])
34658632
</snippet></ROW><ROW><id>9784607</id><snippet>&gt;&gt;&gt; a = [1, 2]; a += a
&gt;&gt;&gt; a
[1, 2, 1, 2]
&gt;&gt;&gt; a = [1, 2]; a.extend(a)
&gt;&gt;&gt; a
[1, 2, 1, 2]
&gt;&gt;&gt; a = [1, 2]; a += [a]
&gt;&gt;&gt; a
[1, 2, [...]]
&gt;&gt;&gt; a = [1, 2]; a.append(a)
&gt;&gt;&gt; a
[1, 2, [...]]
</snippet></ROW><ROW><id>9784607</id><snippet>a += a</snippet></ROW><ROW><id>9784607</id><snippet>a.extend(a)</snippet></ROW><ROW><id>9784607</id><snippet>a</snippet></ROW><ROW><id>9784607</id><snippet>a</snippet></ROW><ROW><id>9784607</id><snippet>a += [a]</snippet></ROW><ROW><id>9784607</id><snippet>a.append(a)</snippet></ROW><ROW><id>9784607</id><snippet>a</snippet></ROW><ROW><id>9784607</id><snippet>a</snippet></ROW><ROW><id>9784607</id><snippet>a:    Reference to a list object at address 0xDEADBEEF
a[0]: Reference to the integer object "1"
a[1]: Reference to the integer object "2"
a[2]: Reference to the same list object at address 0xDEADBEEF
</snippet></ROW><ROW><id>9784607</id><snippet>print a</snippet></ROW><ROW><id>9784607</id><snippet>[1, 2, [1, 2, [1, 2, [1, 2, [1, 2, [1, 2, ...</snippet></ROW><ROW><id>9784607</id><snippet>[1, 2, [...]]</snippet></ROW><ROW><id>9784655</id><snippet>fields = [f.name for f in app1.EmployeeExtended._meta._fields() if f not in app1.Employee._meta._fields()]
</snippet></ROW><ROW><id>9784730</id><snippet>ir.cron</snippet></ROW><ROW><id>9784730</id><snippet>Method</snippet></ROW><ROW><id>9784730</id><snippet>created</snippet></ROW><ROW><id>9784730</id><snippet>ir.cron</snippet></ROW><ROW><id>9784730</id><snippet>Next Execution Date</snippet></ROW><ROW><id>9785071</id><snippet>class Parent(models.Model):
    parent_field = models.CharField(max_length=100)

class Child(Parent):
    child_field = models.CharField(max_length=100)
</snippet></ROW><ROW><id>9785071</id><snippet>class.__bases__</snippet></ROW><ROW><id>9785071</id><snippet>baseclass._meta.get_field</snippet></ROW><ROW><id>9785071</id><snippet>def is_attr_defined_on_parent(child, attr):
    for parent in child.__bases__:
        try:
            parent._meta.get_field(attr)
        except models.FieldDoesNotExist:
            continue
        else:
            return True
    return False
</snippet></ROW><ROW><id>9785071</id><snippet>is_attr_defined_on_parent(Child, 'parent_field')</snippet></ROW><ROW><id>9785071</id><snippet>is_attr_defined_on_parent(Child, 'child_field')</snippet></ROW><ROW><id>9785132</id><snippet>lower()</snippet></ROW><ROW><id>9785132</id><snippet>str</snippet></ROW><ROW><id>9785132</id><snippet>unicode</snippet></ROW><ROW><id>9785142</id><snippet>json.dumps</snippet></ROW><ROW><id>9785142</id><snippet>s = json.dumps(ta, sort_keys=True, indent = 4)
print s
</snippet></ROW><ROW><id>9785177</id><snippet>def pre_init_callback(sender, **kwargs):
    print 'pre_init', sender, kwargs
pre_init.connect(pre_init_callback)

def post_init_callback(sender, **kwargs):
    print 'post_init', sender, kwargs
post_init.connect(post_init_callback)
</snippet></ROW><ROW><id>9785177</id><snippet>In [5]: list(Profile.objects.all())
pre_init &lt;class 'testapp.models.Profile'&gt; {'signal': &lt;django.dispatch.dispatcher.Signal object at 0x15e6450&gt;, 'args': (1, False, None), 'kwargs': {}}
post_init &lt;class 'testapp.models.Profile'&gt; {'instance': &lt;Profile: Profile object&gt;, 'signal': &lt;django.dispatch.dispatcher.Signal object at 0x15e6490&gt;}
pre_init &lt;class 'testapp.models.Profile'&gt; {'signal': &lt;django.dispatch.dispatcher.Signal object at 0x15e6450&gt;, 'args': (2, False, None), 'kwargs': {}}
post_init &lt;class 'testapp.models.Profile'&gt; {'instance': &lt;Profile: Profile object&gt;, 'signal': &lt;django.dispatch.dispatcher.Signal object at 0x15e6490&gt;}
Out[5]: [&lt;Profile: Profile object&gt;, &lt;Profile: Profile object&gt;]
</snippet></ROW><ROW><id>9785224</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9785224</id><snippet>proc = subprocess.Popen(["fetch.py", "--cookies=/tmp/tmp-cookies"], 
                       stdout=PIPE, stderr=PIPE)
stdout, stderr = proc.communicate()
return stdout
</snippet></ROW><ROW><id>9785224</id><snippet>subprocess.call</snippet></ROW><ROW><id>9786064</id><snippet>class NestedDict(dict):
    def __getitem__(self, key):
        if key in self: return self.get(key)
        return self.setdefault(key, NestedDict())
    def __add__(self, other):
        return other
    def __sub__(self, other):
        return other
</snippet></ROW><ROW><id>9786064</id><snippet>&gt;&gt;&gt; n = NestedDict()
&gt;&gt;&gt; n["a"]["b"] += 1
&gt;&gt;&gt; n["a"]["b"]
1
</snippet></ROW><ROW><id>9786152</id><snippet>time.py</snippet></ROW><ROW><id>9786225</id><snippet>multiprocessing</snippet></ROW><ROW><id>9786225</id><snippet>pool = multiprocessing.Pool(4)
out1, out2, out3 = zip(*pool.map(calc_stuff, range(0, 10 * offset, offset)))
</snippet></ROW><ROW><id>9786262</id><snippet>    def __init__(self, a):
        # ...

        def multiplicaMethod (self):
</snippet></ROW><ROW><id>9786262</id><snippet>def</snippet></ROW><ROW><id>9786262</id><snippet>def __init__(self, a):</snippet></ROW><ROW><id>9786262</id><snippet>class Hagale(object):
    def __init__(self, a):
        self.a = a 
        print self.a 
        self.sumaleAlgo = self.a+34543 #variable creada on the fly!

    def multiplicaMethod (self): # &lt;-- moved to the left
        return 'self.cuadradoReal'
</snippet></ROW><ROW><id>9786262</id><snippet>object</snippet></ROW><ROW><id>9786877</id><snippet>JSONDecodeError</snippet></ROW><ROW><id>9786877</id><snippet>jsonObj</snippet></ROW><ROW><id>9786877</id><snippet>jsonObj = this.form.toJson;
</snippet></ROW><ROW><id>9786877</id><snippet>toJson</snippet></ROW><ROW><id>9786877</id><snippet>jsonObj = angular.toJson(this.form);
</snippet></ROW><ROW><id>9787008</id><snippet>write()</snippet></ROW><ROW><id>9787008</id><snippet>y</snippet></ROW><ROW><id>9787008</id><snippet>str</snippet></ROW><ROW><id>9787008</id><snippet>f.seek(0)</snippet></ROW><ROW><id>9787008</id><snippet>IOError</snippet></ROW><ROW><id>9787008</id><snippet>f.seek(0)</snippet></ROW><ROW><id>9787394</id><snippet>"where (%s) blah" % ', '.join(map(str,known_stn))
</snippet></ROW><ROW><id>9787394</id><snippet>map(str,known_stn)</snippet></ROW><ROW><id>9787722</id><snippet>j = re.search(r'cmd: (\w+)', l)
</snippet></ROW><ROW><id>9787722</id><snippet>print j.group(1)
</snippet></ROW><ROW><id>9787842</id><snippet>for i in xrange(len(A)):
    for j in xrange(len(A)):
        if i != j:
            do_stuff(A[i], A[j])
</snippet></ROW><ROW><id>9787842</id><snippet>itertools</snippet></ROW><ROW><id>9787842</id><snippet>import itertools

for a, b in itertools.permutations(A, 2):
    do_stuff(a, b)
</snippet></ROW><ROW><id>9787842</id><snippet>[do_stuff(a, b) for a, b in itertools.permutations(A, 2)]
</snippet></ROW><ROW><id>9787859</id><snippet>pisa</snippet></ROW><ROW><id>9787942</id><snippet>__nonzero__</snippet></ROW><ROW><id>9787942</id><snippet>class MyClass(object):
    def __init__(self, val):
        self.val = val
    def __nonzero__(self):
        return self.val != 0  #This is an example, you can use any condition

x = MyClass(0)
if not x:
    print 'x is false'
</snippet></ROW><ROW><id>9787942</id><snippet>__nonzero__</snippet></ROW><ROW><id>9787942</id><snippet>__len__</snippet></ROW><ROW><id>9787942</id><snippet>__len__</snippet></ROW><ROW><id>9787942</id><snippet>__bool__</snippet></ROW><ROW><id>9787942</id><snippet>__nonzero__</snippet></ROW><ROW><id>9788226</id><snippet>On([^,]+,){3}.*?wrote:
</snippet></ROW><ROW><id>9788226</id><snippet>if re.search("On([^,]+,){3}.*?wrote:", subject, re.IGNORECASE):
    # Successful match
else:
    # Match attempt failed
</snippet></ROW><ROW><id>9788226</id><snippet>Match the characters “On” literally «On»
Match the regular expression below and capture its match into backreference number 1 «([^,]+,){3}»
   Exactly 3 times «{3}»
   Note: You repeated the capturing group itself.  The group will capture only the last iteration.  Put a capturing group around the repeated group to capture all iterations. «{3}»
   Match any character that is NOT a “,” «[^,]+»
      Between one and unlimited times, as many times as possible, giving back as needed (greedy) «+»
   Match the character “,” literally «,»
Match any single character that is not a line break character «.*?»
   Between zero and unlimited times, as few times as possible, expanding as needed (lazy) «*?»
Match the characters “wrote:” literally «wrote:»

Created with RegexBuddy
</snippet></ROW><ROW><id>9788390</id><snippet>while True: ... sleep</snippet></ROW><ROW><id>9788390</id><snippet>DEBUG</snippet></ROW><ROW><id>9788947</id><snippet>procedure</snippet></ROW><ROW><id>9788947</id><snippet>print "Celex number:", celex.contents[0].splitlines()[1]
print "Authentic language:", auth_lang.contents[0].splitlines()[0]
print "Type of procedure:", procedure.contents[4].splitlines()[1]
</snippet></ROW><ROW><id>9788947</id><snippet>Celex number: 61977J0059
Authentic language: French
Type of procedure: Reference for a preliminary ruling
</snippet></ROW><ROW><id>9789141</id><snippet>MapperExtension</snippet></ROW><ROW><id>9789514</id><snippet>connect()</snippet></ROW><ROW><id>9789841</id><snippet>c</snippet></ROW><ROW><id>9789841</id><snippet>c</snippet></ROW><ROW><id>9789841</id><snippet>c</snippet></ROW><ROW><id>9789841</id><snippet>c</snippet></ROW><ROW><id>9789841</id><snippet>c</snippet></ROW><ROW><id>9789841</id><snippet>+=</snippet></ROW><ROW><id>9789841</id><snippet>+=</snippet></ROW><ROW><id>9789841</id><snippet>x = 5
y = x
x += 1
print x, y 
# 6 5
</snippet></ROW><ROW><id>9789841</id><snippet>x = x + 1</snippet></ROW><ROW><id>9789841</id><snippet>+=</snippet></ROW><ROW><id>9789841</id><snippet>x = [5]
y = x
x += [6]
print x, y
# [5, 6] [5, 6]
</snippet></ROW><ROW><id>9790057</id><snippet>i=0
for f in first_collection_records:
    second_collection_records.rewind() #Reset second_collection_records's iterator
    for s in second_collection_records:
         i=i+1
         print i
</snippet></ROW><ROW><id>9790057</id><snippet>second.find()
</snippet></ROW><ROW><id>9790057</id><snippet>for f in first_collection_records: #20
</snippet></ROW><ROW><id>9790057</id><snippet>for s in second_collection_records:
</snippet></ROW><ROW><id>9790057</id><snippet>i = 0
for f in first_collection_records:
    print "in f"
    for s in second_collection_records: 
        print "inside s"
</snippet></ROW><ROW><id>9790057</id><snippet>inside f
inside s
inside s
...
inside s
inside f  &lt;- since s has nothing left to be iterated, 
             (second_collection_records actually raised StopIteration such in generator),
             code inside for s in second_collection_records: is no longer executed
inside f
inside f
</snippet></ROW><ROW><id>9790057</id><snippet>for s in second_collection_records: 
</snippet></ROW><ROW><id>9790057</id><snippet>for f in first_collection_records:
    print "inside f"
    second_collection_records.next()
    for s in second_collection_records:
        print "inside s"
</snippet></ROW><ROW><id>9790057</id><snippet>inside f
inside s
...
inside s
inside f
Traceback (most recent call last):
  ... , in next
    raise StopIteration
StopIteration
</snippet></ROW><ROW><id>9790132</id><snippet>data = {'a': 1, 'b': 2, 'b': 3}</snippet></ROW><ROW><id>9790132</id><snippet>min(data[id].items(), key=lambda x: x[1])</snippet></ROW><ROW><id>9790132</id><snippet>('a', 1)</snippet></ROW><ROW><id>9790132</id><snippet>&gt;&gt;&gt; data = defaultdict(set)
&gt;&gt;&gt; data['a'].add(1)
&gt;&gt;&gt; data['b'].add(2)
&gt;&gt;&gt; data['b'].add(3)
&gt;&gt;&gt; min(data.items(), key=lambda x: min(x[1]))
('a': {1})
&gt;&gt;&gt; min(data.items(), key=lambda x: max(len(x[1])))
('b': {2, 3})
</snippet></ROW><ROW><id>9790630</id><snippet>{% with myFilter="something"|add:templateVariable %}
    {{ myVariable|cut:myFilter }}
{% endwith %}
</snippet></ROW><ROW><id>9790630</id><snippet>{% with "something"|add:templateVariable as myFilter %}
    {{ myVariable|cut:myFilter }}
{% endwith %}
</snippet></ROW><ROW><id>9790630</id><snippet>from django import template

register = template.Library()

@register.filter
def to_unicode(mixed):
    return unicode(mixed)
</snippet></ROW><ROW><id>9790630</id><snippet>some_int|to_unicode|add:'foo'</snippet></ROW><ROW><id>9790857</id><snippet>numpy.bincount</snippet></ROW><ROW><id>9790857</id><snippet>tmp = np.bincount(idx, w)
v[:len(tmp)] += tmp
</snippet></ROW><ROW><id>9790857</id><snippet>bincount</snippet></ROW><ROW><id>9790947</id><snippet>from google.appengine.api import logservice

MAX_LOGS_TO_READ = 10

class MainPage(webapp.RequestHandler):

  def get(self):  
    request_logs = logservice.fetch()
    current_log = 0
    for log in request_logs:
      if current_log &gt; MAX_LOGS_TO_READ:
        break
    self.response.out.write(log.combined)
</snippet></ROW><ROW><id>9791053</id><snippet>getattr(foo,bar)</snippet></ROW><ROW><id>9791053</id><snippet>foo.bar</snippet></ROW><ROW><id>9791053</id><snippet>__dict__</snippet></ROW><ROW><id>9791053</id><snippet>getattr</snippet></ROW><ROW><id>9791053</id><snippet>__dict__</snippet></ROW><ROW><id>9791200</id><snippet>a = area(r)
</snippet></ROW><ROW><id>9791200</id><snippet>a</snippet></ROW><ROW><id>9791200</id><snippet>area()</snippet></ROW><ROW><id>9791200</id><snippet>area(r)</snippet></ROW><ROW><id>9791200</id><snippet>a</snippet></ROW><ROW><id>9791200</id><snippet>a = area(r)</snippet></ROW><ROW><id>9791200</id><snippet>a</snippet></ROW><ROW><id>9791200</id><snippet>area(r)</snippet></ROW><ROW><id>9791200</id><snippet>return</snippet></ROW><ROW><id>9791200</id><snippet>r = int(input("Enter the Radius: "))
print(area(r))
</snippet></ROW><ROW><id>9791207</id><snippet>json</snippet></ROW><ROW><id>9791207</id><snippet>import json

# ... snip ...

self.response.out.write(json.dumps(info))
# or
json.dump(info, self.response.out)
</snippet></ROW><ROW><id>9791293</id><snippet>&gt;&gt;&gt; import pyplot
&gt;&gt;&gt; pyplot.plot([1,3,1,3,1])
</snippet></ROW><ROW><id>9791293</id><snippet>&gt;&gt;&gt; import Tkinter
&gt;&gt;&gt; import _tkinter
&gt;&gt;&gt; Tkinter._test()
</snippet></ROW><ROW><id>9791353</id><snippet>from django.db.models import Avg
qs = Vendor.objects.annotate(rating_avg=Avg('review__rating'))
</snippet></ROW><ROW><id>9791353</id><snippet>qs</snippet></ROW><ROW><id>9791353</id><snippet>.rating_avg</snippet></ROW><ROW><id>9791415</id><snippet>from scikits.audiolab import Sndfile
import numpy as np

f = Sndfile(fname, 'r')
data = np.array(f.read_frames(f.nframes), dtype=np.float64)
f.close()
return data
</snippet></ROW><ROW><id>9791452</id><snippet>from django.core.urlresolvers import resolve
from django.utils.translation import activate

class DisableAdminI18nMiddleware:
    def process_request(self, request):
        resolver_match = resolve(request.path)
        if resolver_match.app_name == 'admin':
            activate('en')
</snippet></ROW><ROW><id>9791656</id><snippet>if</snippet></ROW><ROW><id>9791674</id><snippet>vertices</snippet></ROW><ROW><id>9791674</id><snippet>__init__</snippet></ROW><ROW><id>9791674</id><snippet>def __init__(self, vertices=None):
    if vertices is None:
        vertices = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
    self.vertices = vertices
</snippet></ROW><ROW><id>9791772</id><snippet>from PIL import Image
im = Image.open("img000.jpg")
</snippet></ROW><ROW><id>9791772</id><snippet>pixel = im.getpixel(0,0)
</snippet></ROW><ROW><id>9791772</id><snippet>[</snippet></ROW><ROW><id>9791772</id><snippet>pixel_string = ','.join([str(x) for x in pixel_list])
</snippet></ROW><ROW><id>9791772</id><snippet>pixel_string = ''.join([chr(x) for x in pixel_list])
</snippet></ROW><ROW><id>9791772</id><snippet>pixel_list</snippet></ROW><ROW><id>9791818</id><snippet>Bundles</snippet></ROW><ROW><id>9791818</id><snippet>Bundle Editor</snippet></ROW><ROW><id>9791818</id><snippet>Show Bundle Editor</snippet></ROW><ROW><id>9791818</id><snippet>Python</snippet></ROW><ROW><id>9791818</id><snippet>TextMate::Executor.run(ENV["TM_PYTHON"] || "python", "-u", ENV["TM_FILEPATH"]) do |str, type|
</snippet></ROW><ROW><id>9791818</id><snippet>TextMate::Executor.run("/usr/bin/idle2.7", "-r", ENV["TM_FILEPATH"]) do |str, type|
</snippet></ROW><ROW><id>9791818</id><snippet>/usr/bin/idle2.7 -r /path/to/script.py</snippet></ROW><ROW><id>9791818</id><snippet>-e</snippet></ROW><ROW><id>9791818</id><snippet>-r</snippet></ROW><ROW><id>9791993</id><snippet>recarray</snippet></ROW><ROW><id>9791993</id><snippet>ndarray</snippet></ROW><ROW><id>9791993</id><snippet>num_stars = 10
dtype = numpy.dtype([('x', float), ('y', float), ('colour', float)])
a = numpy.recarray(num_stars, dtype=dtype)
a.colour = numpy.arange(num_stars)
print a.colour
</snippet></ROW><ROW><id>9791993</id><snippet>[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]
</snippet></ROW><ROW><id>9791993</id><snippet>list</snippet></ROW><ROW><id>9791993</id><snippet>recarray</snippet></ROW><ROW><id>9792010</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>9792194</id><snippet>list.extend()</snippet></ROW><ROW><id>9792194</id><snippet>pop()</snippet></ROW><ROW><id>9792194</id><snippet>&gt;&gt;&gt; listA = ['AS','23','45']
&gt;&gt;&gt; listB = ['TH','67','78']
&gt;&gt;&gt; listB.extend([listA.pop()]*3)
&gt;&gt;&gt; listB
['TH', '67', '78', '45', '45', '45']
</snippet></ROW><ROW><id>9792578</id><snippet>val  = int(y1) * val
</snippet></ROW><ROW><id>9792680</id><snippet>set</snippet></ROW><ROW><id>9792680</id><snippet>set</snippet></ROW><ROW><id>9792680</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>9792680</id><snippet>&gt;&gt;&gt; a = collections.OrderedDict.fromkeys([1, 2, 20, 6, 210])
&gt;&gt;&gt; b = collections.OrderedDict.fromkeys([6, 20, 1])
&gt;&gt;&gt; collections.OrderedDict.fromkeys(x for x in a if x not in b)
OrderedDict([(2, None), (210, None)])
</snippet></ROW><ROW><id>9792680</id><snippet>b</snippet></ROW><ROW><id>9792680</id><snippet>&gt;&gt;&gt; a = [1, 2, 20, 6, 210]
&gt;&gt;&gt; b = set([6, 20, 1])
&gt;&gt;&gt; [x for x in a if x not in b]
[2, 210]
</snippet></ROW><ROW><id>9792680</id><snippet>b</snippet></ROW><ROW><id>9792680</id><snippet>a</snippet></ROW><ROW><id>9792680</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>9793045</id><snippet>quota</snippet></ROW><ROW><id>9793045</id><snippet>alice</snippet></ROW><ROW><id>9793045</id><snippet>quota</snippet></ROW><ROW><id>9793045</id><snippet>Disk quotas for user alice (uid 100): 
     Filesystem  blocks   quota   limit   grace   files   quota   limit   grace
fileserver.example.com:/staff/b/bob
                9254720  9728000 10240000          119768       0       0       
</snippet></ROW><ROW><id>9793045</id><snippet>quota-utils</snippet></ROW><ROW><id>9793045</id><snippet>quota</snippet></ROW><ROW><id>9793045</id><snippet>-f</snippet></ROW><ROW><id>9793045</id><snippet>-f, --filesystem-list     display quota information only for given filesystems
</snippet></ROW><ROW><id>9793045</id><snippet>quota -f ~
</snippet></ROW><ROW><id>9793045</id><snippet>-s</snippet></ROW><ROW><id>9793045</id><snippet>$ quota -s -f ~
Disk quotas for user alice (uid 100): 
     Filesystem  blocks   quota   limit   grace   files   quota   limit   grace
fileserver.example.com:/staff/a/alice
              9038M   9500M  10000M            120k       0       0        
</snippet></ROW><ROW><id>9793045</id><snippet>quota</snippet></ROW><ROW><id>9793045</id><snippet>-w</snippet></ROW><ROW><id>9793045</id><snippet>-p</snippet></ROW><ROW><id>9793045</id><snippet>0</snippet></ROW><ROW><id>9793045</id><snippet>quota</snippet></ROW><ROW><id>9793045</id><snippet>$ quota -wp -f ~
Disk quotas for user alice (uid 100): 
     Filesystem   space   quota   limit   grace   files   quota   limit   grace
fileserver.example.com:/staff/a/alice 9254720  9728000 10240000       0  119768 0
</snippet></ROW><ROW><id>9793149</id><snippet>vectorize</snippet></ROW><ROW><id>9793149</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.random.random(10)
&gt;&gt;&gt; a + 1
array([ 1.29738145,  1.33004628,  1.45825441,  1.46171177,  1.56863326,
        1.58502855,  1.06693054,  1.93304272,  1.66056379,  1.91418473])
&gt;&gt;&gt; (a + 1) * 0.25 / 4
array([ 0.08108634,  0.08312789,  0.0911409 ,  0.09135699,  0.09803958,
        0.09906428,  0.06668316,  0.12081517,  0.10378524,  0.11963655])
</snippet></ROW><ROW><id>9793149</id><snippet>enumerate</snippet></ROW><ROW><id>9793149</id><snippet>ndenumerate</snippet></ROW><ROW><id>9793149</id><snippet>indices</snippet></ROW><ROW><id>9793149</id><snippet>&gt;&gt;&gt; numpy.indices(a.shape)
array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])
</snippet></ROW><ROW><id>9793149</id><snippet>numpy.rec.fromarrays</snippet></ROW><ROW><id>9793149</id><snippet>&gt;&gt;&gt; a = numpy.random.random(10)
&gt;&gt;&gt; ind = numpy.indices(a.shape)
&gt;&gt;&gt; numpy.rec.fromarrays([ind[0], a])
rec.array([(0, 0.092473494150913438), (1, 0.20853257641948986),
       (2, 0.35141455604686067), (3, 0.12212258656960817),
       (4, 0.50986868372639049), (5, 0.0011439325711705139),
       (6, 0.50412473457942508), (7, 0.28973489788728601),
       (8, 0.20078799423168536), (9, 0.34527678271856999)], 
      dtype=[('f0', '&lt;i8'), ('f1', '&lt;f8')])
</snippet></ROW><ROW><id>9793149</id><snippet>vectorize</snippet></ROW><ROW><id>9793149</id><snippet>&gt;&gt;&gt; def somefunc(a):
...     a += 1
...     a /= 15
... 
&gt;&gt;&gt; a = numpy.random.random(10)
&gt;&gt;&gt; b = a
&gt;&gt;&gt; somefunc(a)
&gt;&gt;&gt; a
array([ 0.07158446,  0.07052393,  0.07276768,  0.09813235,  0.09429439,
        0.08561703,  0.11204622,  0.10773558,  0.11878885,  0.10969279])
&gt;&gt;&gt; b
array([ 0.07158446,  0.07052393,  0.07276768,  0.09813235,  0.09429439,
        0.08561703,  0.11204622,  0.10773558,  0.11878885,  0.10969279])
</snippet></ROW><ROW><id>9793627</id><snippet>zip()</snippet></ROW><ROW><id>9793627</id><snippet>dict</snippet></ROW><ROW><id>9793627</id><snippet>dict(zip(keys, zip(*array)))
</snippet></ROW><ROW><id>9793627</id><snippet>array</snippet></ROW><ROW><id>9793627</id><snippet>dict(zip(keys, array.T)))
</snippet></ROW><ROW><id>9793699</id><snippet>import os, shutil
os.symlink('file.ext', '/path/to/some/directory/symlink')
</snippet></ROW><ROW><id>9793733</id><snippet>while</snippet></ROW><ROW><id>9793733</id><snippet>for NoOfGamesPlayed in range(NoOfGamesInMatch):
    while NoOfGamesInMatch!=NoOfGamesPlayed:
        PlayerOneWinsGame=(input('Did Player One win the game (enter Y or N)?'))    

        # Keep the if/else inside the while loop
        if PlayerOneWinsGame=='Y':
            PlayerOneScore = PlayerOneScore + 1
        else:
            PlayerTwoScore = PlayerTwoScore + 1
</snippet></ROW><ROW><id>9793733</id><snippet>"Y"</snippet></ROW><ROW><id>9793733</id><snippet>Y</snippet></ROW><ROW><id>9793733</id><snippet>while</snippet></ROW><ROW><id>9793733</id><snippet>NoOfGamesPlayed</snippet></ROW><ROW><id>9793733</id><snippet>for NoOfGamesPlayed in range(NoOfGamesInMatch):
   PlayerOneWinsGame=(input('Did Player One win the game (enter Y or N)?'))    

    if PlayerOneWinsGame=='Y':
        PlayerOneScore = PlayerOneScore + 1
    else:
        PlayerTwoScore = PlayerTwoScore + 1
</snippet></ROW><ROW><id>9793737</id><snippet># somewhere in your class
self.checkedList = set()

def buttonChecked(self, checked):
    button = self.sender()
    if checked:
        self.checkedList.add(button)
    else:
        if button in self.checkedList:
            self.checkedList.remove(button)

# when you create a new button
button.toggled.connect(self.buttonChecked)
</snippet></ROW><ROW><id>9793737</id><snippet>parent = dialog
for widget in parent.children():
    if isinstance(widget, QPushButton):
        widget.toggled.connect(self.buttonChecked)
</snippet></ROW><ROW><id>9793737</id><snippet>__init__()</snippet></ROW><ROW><id>9793759</id><snippet>REPLACE_EVERY_Nth</snippet></ROW><ROW><id>9793759</id><snippet>y[::REPLACE_EVERY_Nth] = REPLACE_WITH
</snippet></ROW><ROW><id>9793759</id><snippet>y[REPLACE_EVERY_Nth - 1::REPLACE_EVERY_Nth] = REPLACE_WITH
</snippet></ROW><ROW><id>9793956</id><snippet>&gt;&gt;&gt; {1: None, 9: None}
{1: None, 9: None}
&gt;&gt;&gt; {9: None, 1: None}
{9: None, 1: None}
&gt;&gt;&gt; {1: None, 2: None}
{1: None, 2: None}
&gt;&gt;&gt; {2: None, 1: None}
{1: None, 2: None}
</snippet></ROW><ROW><id>9793956</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>9794038</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>9794038</id><snippet>sums, bins = numpy.histogram(
    X, bins=numpy.arange(X.min(), X.max(), delta), weights=W)
</snippet></ROW><ROW><id>9794081</id><snippet>(\w+)@((?:it\.)?\w+\.com)</snippet></ROW><ROW><id>9794081</id><snippet>@</snippet></ROW><ROW><id>9794081</id><snippet>example.com</snippet></ROW><ROW><id>9794081</id><snippet>it.example.com</snippet></ROW><ROW><id>9794081</id><snippet>(it\.\w+\.com|\w+\.com)</snippet></ROW><ROW><id>9794081</id><snippet>((it\.)?\w+\.com)</snippet></ROW><ROW><id>9794081</id><snippet>(?: )</snippet></ROW><ROW><id>9794081</id><snippet>(\w+)</snippet></ROW><ROW><id>9794081</id><snippet>((?:it\.)?\w+\.com)</snippet></ROW><ROW><id>9794081</id><snippet>@</snippet></ROW><ROW><id>9794081</id><snippet>example@abcdef</snippet></ROW><ROW><id>9794081</id><snippet>example@123456</snippet></ROW><ROW><id>9794081</id><snippet>(\w+)@([a-zA-Z]+|\d+)</snippet></ROW><ROW><id>9794081</id><snippet>@</snippet></ROW><ROW><id>9794081</id><snippet>|</snippet></ROW><ROW><id>9794163</id><snippet>dict</snippet></ROW><ROW><id>9794163</id><snippet>root['etc']['ssh']['config']</snippet></ROW><ROW><id>9794163</id><snippet>dict</snippet></ROW><ROW><id>9794163</id><snippet>root = {
    'etc': {
        'passwd': None, 
        'shadow': None, 
        'ssh': {
            'config': None}
    }, 
    'lib': {
    }
}
</snippet></ROW><ROW><id>9794163</id><snippet>/etc</snippet></ROW><ROW><id>9794163</id><snippet>root['etc'].keys()</snippet></ROW><ROW><id>9794168</id><snippet>for i in range(int(math.ceil(df.scale / 3000))):
  # i will contain 0, 1, 2, ...
  # letter will contain 'A', 'B', 'C', ...
  letter = chr(ord('A') + i)
</snippet></ROW><ROW><id>9794168</id><snippet>[chr(ord('A') + i) for i in range(int(math.ceil(df.scale / 3000)))]
</snippet></ROW><ROW><id>9794168</id><snippet>string.ascii_uppercase</snippet></ROW><ROW><id>9794168</id><snippet>from string import ascii_uppercase

print list(ascii_uppercase)[:int(math.ceil(df.scale / 3000))]
</snippet></ROW><ROW><id>9794288</id><snippet>import sys

if __name__ == "__main__":
    #ajust these to your need
    starttag = "&lt;foo&gt;"
    endtag = "&lt;/foo&gt;"

    inputfilename = sys.argv[1]
    outputfilename = inputfilename + ".out"
    replacestr = sys.argv[2]

    #open the inputfile from the first argument
    inputfile = open(inputfilename, 'r')
    #open an outputfile to put the result in
    outputfile = open(outputfilename, 'w')

    #test every line in the file for the starttag
    for line in inputfile:
        if starttag in line and endtag in line:
            #compose a new line with the replaced string
            newline = line[:line.find(starttag) + len(starttag)] + replacestr + line[line.find(endtag):]
            #and write the new line to the outputfile
            outputfile.write(newline)
        else:
            outputfile.write(line)
     outputfile.close()
     inputfile.close()
</snippet></ROW><ROW><id>9794476</id><snippet>'Type is: %r' % (type(...),)
</snippet></ROW><ROW><id>9794823</id><snippet>In [25]: df.ix[d1:d2]
Out[25]: 
                   A         B         C         D
2000-01-10  1.149815  0.686696 -1.230991 -1.610557
2000-01-11 -1.296118 -0.172950 -0.603887  0.383690
2000-01-12 -1.034574 -0.523238  0.626968  0.471755
2000-01-13 -0.193280  1.857499 -0.046383  0.849935
2000-01-14 -1.043492 -0.820525  0.868685 -0.773050
2000-01-17 -1.622019 -0.363992  1.207590  0.577290
</snippet></ROW><ROW><id>9794823</id><snippet>df[d1:d2]</snippet></ROW><ROW><id>9794823</id><snippet>In [27]: df['A'][d1:d2]
Out[27]: 
2000-01-10    1.149815
2000-01-11   -1.296118
2000-01-12   -1.034574
2000-01-13   -0.193280
2000-01-14   -1.043492
2000-01-17   -1.622019
Name: A
</snippet></ROW><ROW><id>9794891</id><snippet>df2.combine_first(df1)</snippet></ROW><ROW><id>9794891</id><snippet>In [33]: df2
Out[33]: 
                   A         B         C         D
2000-01-03  0.638998  1.277361  0.193649  0.345063
2000-01-04 -0.816756 -1.711666 -1.155077 -0.678726
2000-01-05  0.435507 -0.025162 -1.112890  0.324111
2000-01-06 -0.210756 -1.027164  0.036664  0.884715
2000-01-07 -0.821631 -0.700394 -0.706505  1.193341
2000-01-10  1.015447 -0.909930  0.027548  0.258471
2000-01-11 -0.497239 -0.979071 -0.461560  0.447598

In [34]: df1
Out[34]: 
                   A         B         C
2000-01-03  2.288863  0.188175 -0.040928
2000-01-04  0.159107 -0.666861 -0.551628
2000-01-05 -0.356838 -0.231036 -1.211446
2000-01-06 -0.866475  1.113018 -0.001483
2000-01-07  0.303269  0.021034  0.471715
2000-01-10  1.149815  0.686696 -1.230991
2000-01-11 -1.296118 -0.172950 -0.603887
2000-01-12 -1.034574 -0.523238  0.626968
2000-01-13 -0.193280  1.857499 -0.046383
2000-01-14 -1.043492 -0.820525  0.868685

In [35]: df2.comb
df2.combine        df2.combineAdd     df2.combine_first  df2.combineMult    

In [35]: df2.combine_first(df1)
Out[35]: 
                   A         B         C         D
2000-01-03  0.638998  1.277361  0.193649  0.345063
2000-01-04 -0.816756 -1.711666 -1.155077 -0.678726
2000-01-05  0.435507 -0.025162 -1.112890  0.324111
2000-01-06 -0.210756 -1.027164  0.036664  0.884715
2000-01-07 -0.821631 -0.700394 -0.706505  1.193341
2000-01-10  1.015447 -0.909930  0.027548  0.258471
2000-01-11 -0.497239 -0.979071 -0.461560  0.447598
2000-01-12 -1.034574 -0.523238  0.626968       NaN
2000-01-13 -0.193280  1.857499 -0.046383       NaN
2000-01-14 -1.043492 -0.820525  0.868685       NaN
</snippet></ROW><ROW><id>9794891</id><snippet>df1</snippet></ROW><ROW><id>9794891</id><snippet>df2</snippet></ROW><ROW><id>9795024</id><snippet>from scipy.io.wavfile import write
from numpy import linspace,sin,pi,int16,concatenate

def note(freq, len, amp=1, rate=5):
 t = linspace(0,len,len*rate)
 data = sin(2*pi*freq*t)*amp
 return data.astype(int16) # two byte integers

tone1 = note(440,2,amp=10)
tone2 = note(140,2,amp=10)
print tone1
print tone2
print concatenate((tone2,tone1),axis=1)

#output:
[ 0 -9 -3  8  6 -6 -8  3  9  0]
[ 0  6  9  8  3 -3 -8 -9 -6  0]
[ 0  6  9  8  3 -3 -8 -9 -6  0  0 -9 -3  8  6 -6 -8  3  9  0]
</snippet></ROW><ROW><id>9795111</id><snippet>&gt;&gt;&gt; listA = ['1','2','3','4','5','6','6','8','9','5','3','7']
&gt;&gt;&gt; split = [listA[i:(i+3)] for i in range(0, len(listA) - 1, 3)]
&gt;&gt;&gt; split
[['1', '2', '3'], ['4', '5', '6'], ['6', '8', '9'], ['5', '3', '7']]
&gt;&gt;&gt; del split[0][-1]
&gt;&gt;&gt; split
[['1', '2'], ['4', '5', '6'], ['6', '8', '9'], ['5', '3', '7']]
&gt;&gt;&gt; listA = sum(split, []) # &lt;- flatten split list back to 1 level
&gt;&gt;&gt; listA
['1', '2', '4', '5', '6', '6', '8', '9', '5', '3', '7']
&gt;&gt;&gt; split = [listA[i:(i+3)] for i in range(0, len(listA) - 1, 3)]
&gt;&gt;&gt; split
[['1', '2', '4'], ['5', '6', '6'], ['8', '9', '5'], ['3', '7']]
</snippet></ROW><ROW><id>9795354</id><snippet>stdout=output</snippet></ROW><ROW><id>9795354</id><snippet>output</snippet></ROW><ROW><id>9795354</id><snippet>shell=True</snippet></ROW><ROW><id>9795354</id><snippet>stdout</snippet></ROW><ROW><id>9795354</id><snippet>from subprocess import Popen

def wrapper(*args):
    output = open('output.txt', w)
    process = Popen(list(args), stdout=output)
    process.communicate()
    output.close()
    return process

x = wrapper('java', '-jar', 'EXEV.jar', '-s:myfile')
</snippet></ROW><ROW><id>9795354</id><snippet>from subprocess import Popen

def wrapper(*args):
    process = Popen(' '.join(args), shell=True)
    process.communicate()
    return process

x = wrapper('java', '-jar', 'EXEV.jar', '-s:myfile', '&gt;', 'output.txt')
</snippet></ROW><ROW><id>9795481</id><snippet>&gt;&gt;&gt; '\0a\0b\0c'.decode('UTF-16BE')
u'abc'
</snippet></ROW><ROW><id>9795551</id><snippet>__call__</snippet></ROW><ROW><id>9795551</id><snippet>classmethod</snippet></ROW><ROW><id>9795551</id><snippet>staticmethod</snippet></ROW><ROW><id>9795551</id><snippet>__init__(self, somecallable)</snippet></ROW><ROW><id>9795551</id><snippet>__call__(self, *args, **kwargs)</snippet></ROW><ROW><id>9795584</id><snippet>OpenSSL.crypto.PKey().generate_key(type, bits)
</snippet></ROW><ROW><id>9795584</id><snippet>type</snippet></ROW><ROW><id>9795584</id><snippet>TYPE_RSA</snippet></ROW><ROW><id>9795584</id><snippet>TYPE_DSA</snippet></ROW><ROW><id>9795584</id><snippet>bits</snippet></ROW><ROW><id>9796042</id><snippet>?</snippet></ROW><ROW><id>9796042</id><snippet>intorfloat_re = "(\d+(?:\.\d+)?)"
</snippet></ROW><ROW><id>9796075</id><snippet>^([A-Z])(?!.?\1)([A-Z])(?!\2)([A-Z])[a-z]\1\1\3$
</snippet></ROW><ROW><id>9796075</id><snippet>&gt;&gt;&gt; regex = re.compile(r'^([A-Z])(?!.?\1)([A-Z])(?!\2)([A-Z])[a-z]\1\1\3$')
&gt;&gt;&gt; regex.match('ABAaAAA')  # fails: first three are not different
&gt;&gt;&gt; regex.match('ABCaABC')  # fails: first two of second three are not first char
&gt;&gt;&gt; regex.match('ABCaAAB')  # fails: last char is not last of first three
&gt;&gt;&gt; regex.match('ABCaAAC')  # matches!
&lt;_sre.SRE_Match object at 0x7fe09a44a880&gt;
</snippet></ROW><ROW><id>9796075</id><snippet>^          # start of string
([A-Z])    # match any uppercase character, place in \1
(?!.?\1)   # fail if either of the next two characters are the previous character
([A-Z])    # match any uppercase character, place in \2
(?!\2)     # fail if next character is same as the previous character
([A-Z])    # match any uppercase character, place in \3
[a-z]      # match any lowercase character
\1         # match capture group 1
\1         # match capture group 1
\3         # match capture group 3
$          # end of string
</snippet></ROW><ROW><id>9796075</id><snippet>^</snippet></ROW><ROW><id>9796075</id><snippet>$</snippet></ROW><ROW><id>9796075</id><snippet>regex.search()</snippet></ROW><ROW><id>9796075</id><snippet>regex.findall()</snippet></ROW><ROW><id>9796075</id><snippet>def validate(s):
    return (re.match(r'^[A-Z]{3}[a-z][A-Z]{3}$', s) and s[4] == s[0] and 
            s[5] == s[0] and s[-1] == s[2] and len(set(s[:3])) == 3)

&gt;&gt;&gt; validate('ABAaAAA')
False
&gt;&gt;&gt; validate('ABCaABC')
False
&gt;&gt;&gt; validate('ABCaAAB')
False
&gt;&gt;&gt; validate('ABCaAAC')
True
</snippet></ROW><ROW><id>9796662</id><snippet>def tabulate(uni1, uni2):
    print (u"%-15s,%-15s" % (uni1, uni2)).encode('utf-8')

&gt;&gt;&gt; tabulate(u'HELLO', u'BYE')
HELLO          ,BYE            
&gt;&gt;&gt; tabulate(u'ñññññ', u'BYE')
ñññññ          ,BYE    
</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796689</id><snippet>__del__</snippet></ROW><ROW><id>9796905</id><snippet>daemon</snippet></ROW><ROW><id>9796905</id><snippet>daemon.py</snippet></ROW><ROW><id>9796905</id><snippet>daemon</snippet></ROW><ROW><id>9796905</id><snippet>daemon.py</snippet></ROW><ROW><id>9796905</id><snippet>daemon.pyc</snippet></ROW><ROW><id>9796905</id><snippet>daemon.py</snippet></ROW><ROW><id>9796905</id><snippet>daemon.__file__</snippet></ROW><ROW><id>9796921</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import Image
&gt;&gt;&gt; im = Image.fromarray(np.random.randint(0,256,size=(100,100,3)).astype(np.uint8))
&gt;&gt;&gt; im.show()
</snippet></ROW><ROW><id>9796921</id><snippet>&gt;&gt;&gt; a = np.random.randint(0,256,size=(100,100,3)).astype(np.uint32)
&gt;&gt;&gt; b = (255 &lt;&lt; 24 | a[:,:,0] &lt;&lt; 16 | a[:,:,1] &lt;&lt; 8 | a[:,:,2]).flatten() # pack RGB values
&gt;&gt;&gt; im = PySide.QtGui.QImage(b, 100, 100, PySide.QtGui.QImage.Format_RGB32)
</snippet></ROW><ROW><id>9796971</id><snippet>from itertools import groupby
from operator import itemgetter


d = {}
with open("some_file_name", "r") as f:
    lines = (line.split(",") for line in f)
    for k, g in groupby(lines, key=itemgetter(0)):
        d[k] = [line[-1] for line in g]
</snippet></ROW><ROW><id>9796971</id><snippet>float</snippet></ROW><ROW><id>9796971</id><snippet>d</snippet></ROW><ROW><id>9797039</id><snippet>f.seek(0)</snippet></ROW><ROW><id>9797039</id><snippet>da39a3ee5e6b4b0d3255bfef95601890afd80709</snippet></ROW><ROW><id>9797039</id><snippet>h.hexdigest()</snippet></ROW><ROW><id>9797039</id><snippet>h.digest()</snippet></ROW><ROW><id>9797118</id><snippet>from OpenSSL import crypto

req = crypto.X509Req()
pkey = crypto.PKey()
pkey.generate_key(crypto.TYPE_RSA, 2048)
req.set_pubkey(pkey)
req.sign(pkey, 'sha1')
certreq = crypto.dump_certificate_request(crypto.FILETYPE_PEM, req)
certreq = certreq.replace('-----BEGIN CERTIFICATE REQUEST-----\n', '').replace('-----END CERTIFICATE REQUEST-----\n', '')
private_key = crypto.dump_privatekey(crypto.FILETYPE_PEM, pkey)
</snippet></ROW><ROW><id>9797118</id><snippet>crypto.dump_certificate(type, cert)
</snippet></ROW><ROW><id>9797315</id><snippet>/usr/local/share/python/python</snippet></ROW><ROW><id>9797315</id><snippet>$ curl -O http://python-distribute.org/distribute_setup.py
$ /usr/local/share/python/python distribute_setup.py
</snippet></ROW><ROW><id>9797315</id><snippet>/usr/local/share/python/easy_install</snippet></ROW><ROW><id>9797315</id><snippet>$ /usr/local/share/python/easy_install pip
</snippet></ROW><ROW><id>9797315</id><snippet>/usr/local/share/python/pip</snippet></ROW><ROW><id>9797315</id><snippet>PATH</snippet></ROW><ROW><id>9797315</id><snippet>pip</snippet></ROW><ROW><id>9797315</id><snippet>PATH</snippet></ROW><ROW><id>9797315</id><snippet>/usr/local/share/python/pip</snippet></ROW><ROW><id>9797403</id><snippet>"".join((char if char.isalpha() else " ") for char in test).split()
</snippet></ROW><ROW><id>9797471</id><snippet>data = data.replace(',', '')
</snippet></ROW><ROW><id>9797471</id><snippet>.translate()</snippet></ROW><ROW><id>9797471</id><snippet>data = data.translate(None, ',.l?asd')
</snippet></ROW><ROW><id>9797504</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>9797504</id><snippet>ls /Library/Python/2.7/site-packages/</snippet></ROW><ROW><id>9797563</id><snippet>and</snippet></ROW><ROW><id>9797563</id><snippet>or</snippet></ROW><ROW><id>9797563</id><snippet>22 and 333/12 or 1
</snippet></ROW><ROW><id>9797563</id><snippet>333/12 if 22 else 1
</snippet></ROW><ROW><id>9797589</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>9797831</id><snippet>from DB302 import DB302 as DBQuery
...
DBQuery.query(Arg1, Arg2)
</snippet></ROW><ROW><id>9797831</id><snippet>except</snippet></ROW><ROW><id>9797831</id><snippet>except:</snippet></ROW><ROW><id>9797831</id><snippet>import sys
...
    except:
        e = sys.exc_info()[1]
        print e
</snippet></ROW><ROW><id>9797831</id><snippet>Exception</snippet></ROW><ROW><id>9797895</id><snippet>dictionary.get(name)</snippet></ROW><ROW><id>9797895</id><snippet>logfile.txt</snippet></ROW><ROW><id>9797895</id><snippet>dict.get</snippet></ROW><ROW><id>9797895</id><snippet>None</snippet></ROW><ROW><id>9797895</id><snippet>&gt;&gt;&gt; d = {'some_key_which_exists': 'some_value'}
&gt;&gt;&gt; d['some_key_which_exists']
'some_value'
&gt;&gt;&gt; d['some_key_which_does_not_exist']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'some_key_which_does_not_exist'
&gt;&gt;&gt; try:
...   d['some_key_which_does_not_exist']
... except Exception as e:
...   print '%s\n' % e
... 
'some_key_which_does_not_exist'

&gt;&gt;&gt; e
KeyError('some_key_which_does_not_exist',)
</snippet></ROW><ROW><id>9798146</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; consonants = "bcdfghjklmnpqrstvwxyz"
&gt;&gt;&gt; vowels = "aeiou"
&gt;&gt;&gt; poss = list(itertools.product(consonants, vowels, consonants))
&gt;&gt;&gt; len(poss)
2205
&gt;&gt;&gt; poss[:10]
[('b', 'a', 'b'), ('b', 'a', 'c'), ('b', 'a', 'd'), ('b', 'a', 'f'), ('b', 'a', 'g'), ('b', 'a', 'h'), ('b', 'a', 'j'), ('b', 'a', 'k'), ('b', 'a', 'l'), ('b', 'a', 'm')]
</snippet></ROW><ROW><id>9798146</id><snippet>&gt;&gt;&gt; words = list(''.join(letters) for letters in itertools.product(consonants, vowels, consonants))
&gt;&gt;&gt; words[:10]
['bab', 'bac', 'bad', 'baf', 'bag', 'bah', 'baj', 'bak', 'bal', 'bam']
</snippet></ROW><ROW><id>9798374</id><snippet>def parse():
  itr = iter(filter(lambda x: x, re.split("\\s+", s.replace('(', ' ( ').replace(')', ' ) '))))

  def _parse():
    stuff = []
    for x in itr:
      if x == ')':
        return stuff
      elif x == '(':
        stuff.append(_parse())
      else:
        stuff.append(x)
    return stuff

  return _parse()[0]

def find(parsed, tag):
  if parsed[0] == tag:
    yield parsed
  for x in parsed[1:]:
    for y in find(x, tag):
      yield y

p = parse()
np = find(p, 'NP')
for x in np:
  print x
</snippet></ROW><ROW><id>9798374</id><snippet>['NP', ['NP', ['DT', 'The'], ['JJS', 'strongest'], ['NN', 'rain']], ['VP', ['ADVP', ['RB', 'ever']], ['VBN', 'recorded'], ['PP', ['IN', 'in'], ['NP', ['NNP', 'India']]]]]
['NP', ['DT', 'The'], ['JJS', 'strongest'], ['NN', 'rain']]
['NP', ['NNP', 'India']]
['NP', ['NP', ['DT', 'the'], ['JJ', 'financial'], ['NN', 'hub']], ['PP', ['IN', 'of' ['NP', ['NNP', 'Mumbai']]]]
['NP', ['DT', 'the'], ['JJ', 'financial'], ['NN', 'hub']]
['NP', ['NNP', 'Mumbai']]
['NP', ['NN', 'communication'], ['NNS', 'lines']]
['NP', ['NNS', 'airports']]
['NP', ['NP', ['NNS', 'thousands']], ['PP', ['IN', 'of'], ['NP', ['NNS', 'people']]]]
['NP', ['NNS', 'thousands']]
['NP', ['NNS', 'people']]
['NP', ['PRP$', 'their'], ['NNS', 'offices']]
['NP', ['NN', 'home']]
['NP', ['DT', 'the'], ['NN', 'night']]
['NP', ['NNS', 'officials']]
</snippet></ROW><ROW><id>9798578</id><snippet>__ne__</snippet></ROW><ROW><id>9798578</id><snippet>__eq__</snippet></ROW><ROW><id>9798578</id><snippet>not (a == b)</snippet></ROW><ROW><id>9798578</id><snippet>__eq__</snippet></ROW><ROW><id>9798578</id><snippet>not</snippet></ROW><ROW><id>9798578</id><snippet>(a != b)</snippet></ROW><ROW><id>9798578</id><snippet>__ne__</snippet></ROW><ROW><id>9799195</id><snippet>http {
[...]
   include /etc/nginx/mime.types;
[...]
}
</snippet></ROW><ROW><id>9799411</id><snippet>struct</snippet></ROW><ROW><id>9799411</id><snippet>import struct
za, zb, zc = struct.unpack('cc32s', data)
</snippet></ROW><ROW><id>9799527</id><snippet>__str__()</snippet></ROW><ROW><id>9799527</id><snippet>class SomeClass(object):

  def __init__(self, value):
    self.value = value

  def __str__(self):
    return '&lt;SomeClass %s&gt;' % self.value
</snippet></ROW><ROW><id>9799831</id><snippet>error</snippet></ROW><ROW><id>9800281</id><snippet>using System.Linq.Xml;
using System.Net;
using System.Collections.Generic;
using System.Web;

// ...
var client = new WebClient();
var parameters = new Dictionary&lt;string, string&gt; 
{ 
  { "username", username },
  { "password", password }
};

var result = client.UploadString(String.Format("{0}/services/auth/login", BaseUrl), UrlEncode(parameters));
var doc = XDocument.Load(result);  // load response into XML document (LINQ)
var key = doc.Elements("sessionKey").Single().Value // get the one-and-only &lt;sessionKey&gt; element.
Console.WriteLine("====&gt;sessionkey:  {0}  &lt;====", key);
// ...

// Utility function: 
private static string UrlEncode(IDictionary&lt;string, string&gt; parameters)
{
  var sb = new StringBuilder();
  foreach(var val in parameters) 
  {
    // add each parameter to the query string, url-encoding the value.
    sb.AppendFormat("{0}={1}&amp;", val.Key, HttpUtility.UrlEncode(val.Value));
  }
  sb.Remove(sb.Length - 1, 1); // remove last '&amp;'
  return sb.ToString();
}
</snippet></ROW><ROW><id>9800351</id><snippet>VVV</snippet></ROW><ROW><id>9800351</id><snippet>VVV</snippet></ROW><ROW><id>9800913</id><snippet>class Agent(object):
    def __get__(self, obj, objtype):
        print 'Agent %s called from %s ' % (id(self), obj.name)

class X(object):
    agent = Agent()

    def __init__(self, name):
        self.name = name

a = X('Foo')
a.agent

b = X('Bar')
b.agent
</snippet></ROW><ROW><id>9800913</id><snippet>agent</snippet></ROW><ROW><id>9800961</id><snippet>from subprocess import Popen, PIPE

hostIP = "87.215.133.109"
cmd = "/usr/local/bin/geo-ip.pl --short %s" % hostIP
output = Popen(cmd, shell=True, stdout=PIPE).communicate()[0]

## alternate form ##
# cmd = ["/usr/local/bin/geo-ip.pl, "--short", hostIP]
# output = Popen(cmd, stdout=PIPE).communicate()[0]

print output.strip() 
# Netherlands
</snippet></ROW><ROW><id>9800961</id><snippet># this call to Popen actually returns a 
# Popen object with a number of methods and attributes
# to interact with the process that was just created
p = Popen(cmd, shell=True, stdout=PIPE)

# communicate() is a method of a Popen object which
# allows you to wait for the return output of the pipes
# that you named (or send data to stdin)
# It blocks until data is ready and returns a tuple (stdout, stderr)
stdout, stderr = p.communicate()

# We only wanted the stdout in this case, so we took the first index
output = p.communicate()[0]

# output is a string, and strings have the strip() method to remove 
# surrounding whitespace
stripped_output = output.strip()
</snippet></ROW><ROW><id>9801110</id><snippet>from itertools import count, starmap

class Node(object):
    nextid = count(1).next
    nodes = {}
    def __init__(self, lat, lon):
        self.lat, self.lon = lat, lon
        self.id = self.nextid()
        self.nodes[self.id] = self

    @classmethod
    def all(cls):
        return cls.nodes.values()

    def __repr__(self):
        return '&lt;Node %s&gt;' % self.id

    @classmethod
    def byid(cls, id):
        return cls.nodes[id]

class Way(object):
    nextid = count(1).next
    def __init__(self, nodes):
        self.nodes = nodes[:]
        self.id = self.nextid()

node = Node(lat='X',lon='Y')
print node.id
print Node.all()
print Node.byid(1)

way_nodes = list(starmap(Node, (('X', 'Y'), ('Z', 'W'))))
way = Way(way_nodes)
print way.nodes
print way.id
</snippet></ROW><ROW><id>9801198</id><snippet>class Courses(models.Model):
   name  = models.TextField()
   schools = ManyToManyField(School, related_name='courses_set')

School.objects.filter(courses_set__name__in=('biology', 'chemistry'))
</snippet></ROW><ROW><id>9801308</id><snippet>&gt;&gt;&gt; nums = ['3.7', '-22', '3500', '38', '-11.993', '2200', '-1', '3400', '3400', '-3400', '-22', '12', '11', '10', '9.0']
&gt;&gt;&gt; map(float, nums)
[3.7, -22.0, 3500.0, 38.0, -11.993, 2200.0, -1.0, 3400.0, 3400.0, -3400.0, -22.0, 12.0, 11.0, 10.0, 9.0]
</snippet></ROW><ROW><id>9801308</id><snippet>float(number)</snippet></ROW><ROW><id>9801308</id><snippet>number</snippet></ROW><ROW><id>9801308</id><snippet>float</snippet></ROW><ROW><id>9801308</id><snippet>for line in f:
  for numberString in line.split()
    number = float(numberString)
    if(number &gt; 0)
      numbers.append(number)
</snippet></ROW><ROW><id>9801308</id><snippet>for line in f:
  numbers.extend([n for n in map(float, line.split()) if n &gt; 0])
</snippet></ROW><ROW><id>9801517</id><snippet>first_collection_records</snippet></ROW><ROW><id>9801517</id><snippet>pymongo.cursor.Cursor</snippet></ROW><ROW><id>9801517</id><snippet>db.first_collection.find()</snippet></ROW><ROW><id>9801517</id><snippet>update</snippet></ROW><ROW><id>9801517</id><snippet>collection</snippet></ROW><ROW><id>9801517</id><snippet># assuming your query looked something like this
first_collection_records = db.first_collection.find()

# your code here....

# your last line should reference the collection object to do the update
db.first_collection.update({"_id":id}, f, safe=True)
</snippet></ROW><ROW><id>9802248</id><snippet>codes_from_file = [a.decode("windows-1250") for a in codes_from_file]
kode_prfoksov]  = [a.decode("utf-8") for a in codes_from_file]
</snippet></ROW><ROW><id>9802248</id><snippet>codes_from_file = [a.decode("windows-1250").encode("utf-8") for a in codes_from_file]
</snippet></ROW><ROW><id>9802282</id><snippet>__len__()</snippet></ROW><ROW><id>9802282</id><snippet>__getitem__()</snippet></ROW><ROW><id>9802282</id><snippet>__getitem__(i)</snippet></ROW><ROW><id>9802282</id><snippet>range(len(self))</snippet></ROW><ROW><id>9802282</id><snippet>__getitem__(i)</snippet></ROW><ROW><id>9802905</id><snippet>cursor.execute("INSERT INTO shops (id, shop_id, shop_url, shop_name, shop_cat, datas) VALUES (%d, %s, %s, %s, %s, %s)", (count, show_id, shop_url, shop_name, shop_cat, pdfs + datas))
</snippet></ROW><ROW><id>9802906</id><snippet>{% if column.orderable %}</snippet></ROW><ROW><id>9802914</id><snippet>for a in some_list:
    pat = re.compile(re.escape(a[0]), re.I)
    for b in some_other_list:
        if pat.search(b[0]):
            do stuff....
</snippet></ROW><ROW><id>9803032</id><snippet>OUTER JOIN</snippet></ROW><ROW><id>9803032</id><snippet>SELECT vendor.id, COALESCE(AVG(review.rating), 0.0) AS rating
  FROM myapp_vendor AS vendor
  LEFT OUTER JOIN myapp_review AS review
    ON review.vendor_id = vendor.id
       AND review.product IS NULL
  WHERE vendor.category = %s
    AND vendor.active
  GROUP BY vendor.id
</snippet></ROW><ROW><id>9803032</id><snippet>for v in Vendor.objects.raw('SELECT ... ', [category]): # query as above
    print 'Vendor {0} has rating {1}'.format(v.name, v.rating)
</snippet></ROW><ROW><id>9803651</id><snippet>partial</snippet></ROW><ROW><id>9803651</id><snippet>import random
def foo(x):
    print x
    return x

from functools import partial
print random.choice((partial(foo,'spam'), partial(foo,'eggs')))()
</snippet></ROW><ROW><id>9803651</id><snippet>defaultdict</snippet></ROW><ROW><id>9803651</id><snippet>from collections import defaultdict
d = defaultdict(somedefault)
print d[k] # calls somedefault() when the key is missing
</snippet></ROW><ROW><id>9803651</id><snippet>generators</snippet></ROW><ROW><id>9803835</id><snippet>def main():
  self.progress_txt.AppendText("Processing")
  self.progress_txt.Update()
  #do something
  self.progress_txt.AppendText("Processing2")
  self.progress_txt.Update()
  #do something else
  self.progress_txt.AppendText("Finished")
  self.progress_txt.Update()
</snippet></ROW><ROW><id>9804118</id><snippet># Save (commit) the changes
con.commit()
</snippet></ROW><ROW><id>9804565</id><snippet>import itertools, operator

l = [{'dept':1, 'age':10, 'name':'Sam'},
        {'dept':1, 'age':12, 'name':'John'},
        {'dept':2,'age':20, 'name':'Mary'},
        {'dept':2,'age':11, 'name':'Mark'},
        {'dept':2,'age':11, 'name':'Tom'}]

groups = ['dept', 'age', 'name'] 

groups.reverse()
def hierachical_data(data, groups):
    g = groups[-1]
    g_list = []
    for key, items in itertools.groupby(data, operator.itemgetter(g)):
        g_list.append({key:list(items)})
    groups = groups[0:-1]
    if(len(groups) != 0):
        for e in g_list:
            for k,v in e.items():
                e[k] = hierachical_data(v, groups)

    return g_list

print hierachical_data(l, groups)
</snippet></ROW><ROW><id>9804571</id><snippet>cpos = [12, 13, 14, 15]
cal = ['A', 'T', 'C', 'G']

mpos = [11, 12, 13, 16]
mal = ['A', 'T', 'T', 'G']

set1 = set(zip(cpos, cal))
set2 = set(zip(mpos, mal))

print set1 &amp; set2
</snippet></ROW><ROW><id>9804571</id><snippet>## set([(13, 'T')])
</snippet></ROW><ROW><id>9804571</id><snippet>from itertools import izip
print set(izip(cpos, cal)).intersection(izip(mpos, mal))
</snippet></ROW><ROW><id>9804571</id><snippet>import timeit

repeat = 1

setup = '''
num = 1000000
import random
import string
from itertools import izip
cpos = [random.randint(1, 100) for x in range(num)]
cal = [random.choice(string.letters) for x in range(num)]
mpos = [random.randint(1, 100) for x in range(num)]
mal = [random.choice(string.letters) for x in range(num)]
'''

# izip: 0.38 seconds (Python 2.7.2)
t = timeit.Timer(
     setup = setup,
     stmt = '''set(izip(cpos, cal)).intersection(izip(mpos, mal))'''
)

print "%.2f second" % (t.timeit(number=repeat))



# zip: 0.53 seconds (Python 2.7.2)
t = timeit.Timer(
     setup = setup,
     stmt = '''set(zip(cpos, cal)) &amp; set(zip(mpos, mal))'''
)

print "%.2f second" % (t.timeit(number=repeat))


# Nested loop: 616 seconds (Python 2.7.2)
t = timeit.Timer(
     setup = setup,
     stmt = '''

mat = []
for i in xrange(len(cpos)):
     for j in xrange(len(mpos)):
          if mpos[j] == cpos[i] and mal[j] == cal[i]:
               mat.append(mpos[j]) # or mat.append((mpos[j], mal[j])) ?
               break
'''
)

print "%.2f seconds" % (t.timeit(number=repeat))
</snippet></ROW><ROW><id>9804729</id><snippet>from Crypto.Cipher import AES
import base64

MASTER_KEY="Some-long-base-key-to-use-as-encyrption-key"

def encrypt_val(clear_text):
    enc_secret = AES.new(MASTER_KEY[:32])
    tag_string = (str(clear_text) +
                  (AES.block_size -
                   len(str(clear_text)) % AES.block_size) * "\0")
    cipher_text = base64.b64encode(enc_secret.encrypt(tag_string))

    return cipher_text
</snippet></ROW><ROW><id>9804729</id><snippet>def decrypt_val(cipher_text):
    dec_secret = AES.new(MASTER_KEY[:32])
    raw_decrypted = dec_secret.decrypt(base64.b64decode(cipher_text))
    clear_val = raw_decrypted.rstrip("\0")
    return clear_val
</snippet></ROW><ROW><id>9804794</id><snippet>while choice != "q" or choice != "Q":    # this should be "and"!
</snippet></ROW><ROW><id>9804794</id><snippet>True</snippet></ROW><ROW><id>9804794</id><snippet>import random
while True:
    choice = str(input("\nMenu:\n(I)nstructions\n(C)alculate blah\n(Q)uit\n&gt;&gt;&gt;")).lower()
    if choice == "i":
        print("blahblah.")
        continue
    elif choice == "q":
        break
    elif choice == "c":
        while True:
            x = int(input("Please enter the number of x: "))
            if x &gt;= 0: break
        while True:
            y = int(input("Please enter the number of y: "))
            if y &gt;= 0: break
        while True:
            z = str(input("blah (B) or (P) z?: ")).lower()
            if z in "bp": break
        if z == "b":
            total = x*10 + y*6 + 0
            print("blah $", total, " blah ", x, " x and ", y, " y. blah!")
        #function that outputs the cost of premium z
        else:  # z must be "p"
            luck = random.randrange(1, 11, 1)
            if luck == 10:
                total = x*10 + y*6
                print("\nblah$", total, " blah z for ", x, " x and ", y, " y. blah!")
            #below is the normal function, for when the customer is not a lucky winner
            if luck != 10:
                total = x*12.50 + y*7.50
                print("blah $", total, " blah ", x, " x and ", y, " y. blah!")
    else:
        print("Invalid menu choice.")
        continue
</snippet></ROW><ROW><id>9804961</id><snippet>from castro import Castro
c = Castro()
c.start()
# Do something awesome!
c.stop()
</snippet></ROW><ROW><id>9805506</id><snippet>collection_names()</snippet></ROW><ROW><id>9805599</id><snippet>re.match(r'^[A-Za-z0-9_-]+$', 'gfds9 41.-=,434')
</snippet></ROW><ROW><id>9805894</id><snippet>class BaseThing(models.Model):
    # fields/relations for all types of things

class FooThing(BaseThing):
    # fields/relations for things of type "foo"

class BarThing(BaseThing):
    # fields/relations for things of type "bar"
</snippet></ROW><ROW><id>9806512</id><snippet>with open('file1') as f:
    first_id = next(f).strip()
</snippet></ROW><ROW><id>9806512</id><snippet>with</snippet></ROW><ROW><id>9806512</id><snippet>bjobs</snippet></ROW><ROW><id>9806512</id><snippet>output = subprocess.check_output(["bjobs", "-l", first_id], shell=True)
</snippet></ROW><ROW><id>9806512</id><snippet>with open('hello.txt', 'wb') as f:
    f.write(output)
</snippet></ROW><ROW><id>9806512</id><snippet>bjobs</snippet></ROW><ROW><id>9806512</id><snippet>bjobs</snippet></ROW><ROW><id>9806512</id><snippet>with open('file1') as f:
    for line in f:
        line = line.strip()
        # ...
</snippet></ROW><ROW><id>9806512</id><snippet>enumerate</snippet></ROW><ROW><id>9806512</id><snippet>with open('file1') as f:
    for i, line in enumerate(f):
        line = line.strip()
        # ...
</snippet></ROW><ROW><id>9806684</id><snippet>from django.db.models import Count

B.objects.annotate(a_count=Count('a')).filter(a_count__lt=5)
</snippet></ROW><ROW><id>9807068</id><snippet>&lt;input type="hidden" value="3" id="provCount" /&gt;
</snippet></ROW><ROW><id>9807068</id><snippet>&lt;input id="SettingsFrmId:settings_addProv_button" type="submit" name="SettingsFrmId:settings_addProv_button" class="inputButton" value="Add Prov" title="Add Prov" title="Add Prov" /&gt;
</snippet></ROW><ROW><id>9807068</id><snippet>driver.find_element_by_id("SettingsFrmId:settings_addProv_button")
</snippet></ROW><ROW><id>9807068</id><snippet>driver.find_element_by_id("provCount")
</snippet></ROW><ROW><id>9807233</id><snippet>class CurrentViewApplicationName(object):
    def process_view(self, request, view_func, view_args, view_kwargs):
        request.current_app = view_func.__module__.split('.')[0]
</snippet></ROW><ROW><id>9807233</id><snippet>testapp</snippet></ROW><ROW><id>9807233</id><snippet>testapp.views.some_view</snippet></ROW><ROW><id>9807334</id><snippet>QTableWidget.setSortingEnabled(False)</snippet></ROW><ROW><id>9807334</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
from PyQt4 import QtCore, QtGui

class MainWindow(QtGui.QWidget):
    updateSignal = QtCore.pyqtSignal()
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.table_widget = QtGui.QTableWidget()
        self.button = QtGui.QPushButton('Populate')
        self.button.clicked.connect(self.populate)
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.table_widget)
        layout.addWidget(self.button)
        self.setLayout(layout)
        self.updateSignal.connect(self.update_table)
        self.populate()

    def populate(self):
        nrows, ncols = 5, 2
        self.table_widget.setSortingEnabled(False)
        self.table_widget.setRowCount(nrows)
        self.table_widget.setColumnCount(ncols)
        for i in range(nrows):
            for j in range(ncols):
                item = QtGui.QTableWidgetItem('%s%s' % (i, j))
                self.table_widget.setItem(i, j, item)
        self.updateSignal.emit()
        self.table_widget.setSortingEnabled(True)

    def update_table(self):
        self.table_widget.sortItems(0,QtCore.Qt.DescendingOrder)


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    wnd = MainWindow()
    wnd.resize(640, 480)
    wnd.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9807627</id><snippet>i.difference(x)</snippet></ROW><ROW><id>9807627</id><snippet>i</snippet></ROW><ROW><id>9807627</id><snippet>x</snippet></ROW><ROW><id>9807627</id><snippet>i = i.difference(x)</snippet></ROW><ROW><id>9807627</id><snippet>i</snippet></ROW><ROW><id>9807627</id><snippet>a[idx] = i</snippet></ROW><ROW><id>9807627</id><snippet>idx</snippet></ROW><ROW><id>9807627</id><snippet>i</snippet></ROW><ROW><id>9807627</id><snippet>def test():
    a=[set([1,2,3]),set([3,4,5])]
    x=set([1,4])
    for i in a:
        diff=i.difference(x)
        # a[idx]=diff
    print a
</snippet></ROW><ROW><id>9807690</id><snippet>isset()</snippet></ROW><ROW><id>9807690</id><snippet>array_key_exists()</snippet></ROW><ROW><id>9807690</id><snippet>$default</snippet></ROW><ROW><id>9807690</id><snippet>function getItem($array, $key, $default = "") {
  return isset($array[$key]) ? $array[$key] : $default;
}

// Call as
$array = array("abc" =&gt; 123, "def" =&gt; 455);
echo getItem($array, "xyz", "not here");
// "not here"
</snippet></ROW><ROW><id>9807690</id><snippet>isset()</snippet></ROW><ROW><id>9807690</id><snippet>NULL</snippet></ROW><ROW><id>9807690</id><snippet>$default</snippet></ROW><ROW><id>9807690</id><snippet>NULL</snippet></ROW><ROW><id>9807690</id><snippet>array_key_exists()</snippet></ROW><ROW><id>9807690</id><snippet>function getItem($array, $key, $default = "") {
  return array_key_exists($key, $array) ? $array[$key] : $default;
}
</snippet></ROW><ROW><id>9807955</id><snippet>d = { "id" : "abcde",
    "key1" : "blah",
    "key2" : "blah blah",
    "nestedlist" : [ 
    { "id" : "qwerty",
        "nestednestedlist" : [ 
        { "id" : "xyz", "keyA" : "blah blah blah" },
        { "id" : "fghi", "keyZ" : "blah blah blah" }],
        "anothernestednestedlist" : [ 
        { "id" : "asdf", "keyQ" : "blah blah" },
        { "id" : "yuiop", "keyW" : "blah" }] } ] } 


def fun(d):
    if 'id' in d:
        yield d['id']
    for k in d:
        if isinstance(d[k], list):
            for i in d[k]:
                for j in fun(i):
                    yield j
</snippet></ROW><ROW><id>9807955</id><snippet>&gt;&gt;&gt; list(fun(d))
['abcde', 'qwerty', 'xyz', 'fghi', 'asdf', 'yuiop']
</snippet></ROW><ROW><id>9808143</id><snippet>x</snippet></ROW><ROW><id>9808143</id><snippet>my_list.count(x)
</snippet></ROW><ROW><id>9808143</id><snippet>x</snippet></ROW><ROW><id>9808143</id><snippet>[lst for lst in list_of_lists if lst.count(x) &lt;= 1]
</snippet></ROW><ROW><id>9808477</id><snippet>sudo python myfile.py 1234
</snippet></ROW><ROW><id>9808575</id><snippet>return</snippet></ROW><ROW><id>9808575</id><snippet>return object1, object2, object3
</snippet></ROW><ROW><id>9808575</id><snippet>a, b, c = objectCase()
</snippet></ROW><ROW><id>9808753</id><snippet>subprocess.call</snippet></ROW><ROW><id>9808753</id><snippet>pydoc subprocess</snippet></ROW><ROW><id>9808753</id><snippet>Popen.wait</snippet></ROW><ROW><id>9808753</id><snippet>def worker(cmd): 
    p = subprocess.Popen(cmd, stderr=outputfile, stdout=outputfile);
    p.wait()
</snippet></ROW><ROW><id>9810151</id><snippet>def foo()
    x = 0 # 
    while arming != 1:
        x = (mydll.InPortB(base+1)) &amp; 1 # this is a hardware input like a push button(on or off)
        time.sleep(0.5)

     bar = ser.readline() # input from serial source
     if len(bar) != 10:

     ''' it continues checking "bar" using some more if statement. Finally when the
         logic is satisfied the program outputs something but still restarts foo() as
         I need the program to run endlessly but I am not sure how to fix the recursive
         nature of the program'''
      if bar = 1234567890:
          print "yay you win"

#start
while 1:
    foo()
</snippet></ROW><ROW><id>9810393</id><snippet>g = open('output.txt', 'w')
for num in numlist:
    g.write("%f\n" % num)
g.close()
</snippet></ROW><ROW><id>9810393</id><snippet>numlist.extend([str(n) for n in map(float, line.split()) if n &gt; 0])
</snippet></ROW><ROW><id>9810408</id><snippet>round(x / 500.0) * 500.0
</snippet></ROW><ROW><id>9810408</id><snippet>math.ceil()</snippet></ROW><ROW><id>9810408</id><snippet>round()</snippet></ROW><ROW><id>9810408</id><snippet>math.ceil(x / 500.0) * 500.0
</snippet></ROW><ROW><id>9810554</id><snippet>from Gato import AlgoWin</snippet></ROW><ROW><id>9810554</id><snippet>ImportError</snippet></ROW><ROW><id>9810554</id><snippet>Gato.py</snippet></ROW><ROW><id>9810554</id><snippet>.pyc</snippet></ROW><ROW><id>9810780</id><snippet>print</snippet></ROW><ROW><id>9810780</id><snippet>&gt;&gt;&gt; foobar = """'"No, thanks, Mom," I said, "I don't know how long it will take."'"""
&gt;&gt;&gt; print(foobar)
'"No, thanks, Mom," I said, "I don't know how long it will take."'
</snippet></ROW><ROW><id>9810780</id><snippet>foobar</snippet></ROW><ROW><id>9810881</id><snippet>dic.get("c")</snippet></ROW><ROW><id>9810881</id><snippet>None</snippet></ROW><ROW><id>9810881</id><snippet>None</snippet></ROW><ROW><id>9810881</id><snippet>.split()</snippet></ROW><ROW><id>9810881</id><snippet>get</snippet></ROW><ROW><id>9810881</id><snippet># if dic.get["a"] is always truthy when it exists
dic.get("a") or dic.get("c", "").split(" ", 1)[0]

# if dic["a"] could be non-truthy, e.g. empty string
dic["a"] if "a" in dic else dic.get("c", "").split(" ", 1)[0]
</snippet></ROW><ROW><id>9810905</id><snippet>send()</snippet></ROW><ROW><id>9810905</id><snippet>self</snippet></ROW><ROW><id>9811035</id><snippet>_temp = __import__('foo.bar', globals(), locals(), ['object'], -1) 
object = _temp.object
</snippet></ROW><ROW><id>9811035</id><snippet>__import__</snippet></ROW><ROW><id>9811062</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>9811062</id><snippet>import os.path
import mimetypes

import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.web

class FileHandler(tornado.web.RequestHandler):
    def get(self, path):
        if not path:
            path = 'index.html'

        if not os.path.exists(path):
            raise tornado.web.HTTPError(404)

        mime_type = mimetypes.guess_type(path)
        self.set_header("Content-Type", mime_type[0] or 'text/plain')

        outfile = open(path)
        for line in outfile:
            self.write(line)
        self.finish()

def main():
    tornado.options.enable_pretty_logging()
    application = tornado.web.Application([
        (r"/(.*)", FileHandler),
    ])
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(8888)
    tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9811301</id><snippet>import itertools
foo = [x for x in itertools.islice(generator, n)]
</snippet></ROW><ROW><id>9811301</id><snippet>generator</snippet></ROW><ROW><id>9811301</id><snippet>n</snippet></ROW><ROW><id>9811511</id><snippet>setdefault</snippet></ROW><ROW><id>9811511</id><snippet>for k in A:
    B.setdefault(k, "fill_this")
</snippet></ROW><ROW><id>9811511</id><snippet>for k in A:
    if k not in B:
        B[k] = "fill_this"
</snippet></ROW><ROW><id>9811511</id><snippet>setdefault</snippet></ROW><ROW><id>9811511</id><snippet>k</snippet></ROW><ROW><id>9811511</id><snippet>setdefault</snippet></ROW><ROW><id>9811511</id><snippet>for k in set(A).difference(B):
    B[k] = "fill_this"
</snippet></ROW><ROW><id>9811814</id><snippet>1</snippet></ROW><ROW><id>9811814</id><snippet>5</snippet></ROW><ROW><id>9811814</id><snippet>7</snippet></ROW><ROW><id>9811814</id><snippet>[[a[i] for i in (1, 5, 7)] for a in matrix]
</snippet></ROW><ROW><id>9811814</id><snippet>&gt;&gt;&gt; [[a[i] for i in (0, 1, 2)] for a in matrix]
[[1, 2, 3], [6, 7, 8], [6, 4, 3], [2, 3, 4]]
</snippet></ROW><ROW><id>9811814</id><snippet>&gt;&gt;&gt; [a[0:3] for a in matrix]
[[1, 2, 3], [6, 7, 8], [6, 4, 3], [2, 3, 4]]
</snippet></ROW><ROW><id>9812019</id><snippet>mkvirtualenv</snippet></ROW><ROW><id>9812019</id><snippet>mkvirtualenv</snippet></ROW><ROW><id>9812529</id><snippet>interface</snippet></ROW><ROW><id>9812529</id><snippet>class</snippet></ROW><ROW><id>9812529</id><snippet>struct</snippet></ROW><ROW><id>9812529</id><snippet>public int Foo(string s)       // OK, first method
public int Foo(double d)       // OK, different type
public void Foo(double x)      // Error, same parameter type, return
                               // type and parameter name do not matter.
public int Foo(string s, DateTime d)   // OK, diffent number of parameters.
</snippet></ROW><ROW><id>9812529</id><snippet>params</snippet></ROW><ROW><id>9812529</id><snippet>ParamArray</snippet></ROW><ROW><id>9812529</id><snippet>public int Foo(string s, params int[] n)
</snippet></ROW><ROW><id>9812529</id><snippet>Function Foo(ByVal s As String, ByVal ParamArray n As Integer()) As Integer 
</snippet></ROW><ROW><id>9812529</id><snippet>int i = Foo("Hello");   
int i = Foo("Hello", 5);   
int i = Foo("Hello", 5, 7);   
int i = Foo("Hello", 5, 7, 13);   
int i = Foo("Hello", new int[] { 2, 4, 6 });   
</snippet></ROW><ROW><id>9812573</id><snippet>resp2</snippet></ROW><ROW><id>9812573</id><snippet>int</snippet></ROW><ROW><id>9812573</id><snippet>int</snippet></ROW><ROW><id>9812573</id><snippet>int(resp2[0])</snippet></ROW><ROW><id>9812573</id><snippet>resp2[0]</snippet></ROW><ROW><id>9812573</id><snippet>if</snippet></ROW><ROW><id>9812652</id><snippet>sum(a*b for a, b in zip(list1, list2))
</snippet></ROW><ROW><id>9812652</id><snippet>zip()</snippet></ROW><ROW><id>9812652</id><snippet>itertools.izip</snippet></ROW><ROW><id>9812652</id><snippet>sum(a*b for a, b in itertools.izip(list1, list2))
</snippet></ROW><ROW><id>9812652</id><snippet>sum(map(lambda a, b: a*b, list1, list2))
</snippet></ROW><ROW><id>9812652</id><snippet>operator</snippet></ROW><ROW><id>9812652</id><snippet>sum(map(operator.mul, list1, list2))
</snippet></ROW><ROW><id>9812678</id><snippet>subprocess</snippet></ROW><ROW><id>9812678</id><snippet>print</snippet></ROW><ROW><id>9812678</id><snippet>shuffleline.py</snippet></ROW><ROW><id>9812678</id><snippet>sys.stdin</snippet></ROW><ROW><id>9812678</id><snippet>for</snippet></ROW><ROW><id>9812678</id><snippet>for line in sys.stdin:
    line = line.strip()
    ....
</snippet></ROW><ROW><id>9812678</id><snippet>sys.stdin.readline()</snippet></ROW><ROW><id>9812678</id><snippet>''</snippet></ROW><ROW><id>9812678</id><snippet>while True:
    line = sys.stdin.readline()
    if not line:
        break
    line = line.strip()
    ...
</snippet></ROW><ROW><id>9812678</id><snippet>iter()</snippet></ROW><ROW><id>9812678</id><snippet>for line in iter(sys.stdin.readline, ''):
    line = line.strip()
    ...
</snippet></ROW><ROW><id>9812678</id><snippet>twisted.reactor.spawnProcess</snippet></ROW><ROW><id>9812858</id><snippet>with</snippet></ROW><ROW><id>9812858</id><snippet>__enter__</snippet></ROW><ROW><id>9812858</id><snippet>__exit__</snippet></ROW><ROW><id>9812858</id><snippet>with</snippet></ROW><ROW><id>9812884</id><snippet>put</snippet></ROW><ROW><id>9812884</id><snippet>mput</snippet></ROW><ROW><id>9812884</id><snippet>mput</snippet></ROW><ROW><id>9812884</id><snippet>put</snippet></ROW><ROW><id>9812966</id><snippet>zipfile.is_zipfile</snippet></ROW><ROW><id>9812966</id><snippet>file_upload.file</snippet></ROW><ROW><id>9813138</id><snippet>initAirserv</snippet></ROW><ROW><id>9813138</id><snippet>initAirserv</snippet></ROW><ROW><id>9813138</id><snippet>Thread</snippet></ROW><ROW><id>9813138</id><snippet>execAirmon</snippet></ROW><ROW><id>9813138</id><snippet>init_Plug</snippet></ROW><ROW><id>9813138</id><snippet>execAirmon</snippet></ROW><ROW><id>9813138</id><snippet>init_Plug</snippet></ROW><ROW><id>9813357</id><snippet>%</snippet></ROW><ROW><id>9813357</id><snippet>%%s</snippet></ROW><ROW><id>9813357</id><snippet>%s</snippet></ROW><ROW><id>9813357</id><snippet>&gt;&gt;&gt; print '''strftime('%%s', 'now'), "%s"''' % "some value"
strftime('%s', 'now'), "some value"
</snippet></ROW><ROW><id>9813357</id><snippet>&gt;&gt;&gt; 'aaa''bbb'
'aaabbb'
</snippet></ROW><ROW><id>9813357</id><snippet>DBQuery.query('''INSERT INTO test (Date, Entry) VALUES (strftime('%%s', 'now'), "%s")''' % cherrypy.request.params['username'], 'INSERT')
</snippet></ROW><ROW><id>9813466</id><snippet>Temp</snippet></ROW><ROW><id>9813466</id><snippet>serializers.serialize('json', Temp.objects.all()[0])
</snippet></ROW><ROW><id>9813471</id><snippet>import os
import zipfile
importtime

outDirectory = 'C:\\TEMP\\'
inFile = 'test.zip'
fh = open(os.path.join(outDirectory,inFile),'rb') 
z = zipfile.ZipFile(fh)

for f in z.infolist():
    name, date_time = f.filename, f.date_time
    name = os.path.join(outDirectory, name)
    with open(name, 'wb') as outFile:
        outFile.write(z.open(f).read())
    date_time = time.mktime(date_time + (0, 0, -1))
    os.utime(name, (date_time, date_time))
</snippet></ROW><ROW><id>9813516</id><snippet>return self.accounts + (self.date,)
</snippet></ROW><ROW><id>9813574</id><snippet>shell=True</snippet></ROW><ROW><id>9813574</id><snippet>shell=False</snippet></ROW><ROW><id>9813574</id><snippet>command</snippet></ROW><ROW><id>9813574</id><snippet>bash</snippet></ROW><ROW><id>9813574</id><snippet>bash</snippet></ROW><ROW><id>9813574</id><snippet>shell=True</snippet></ROW><ROW><id>9813574</id><snippet>shell=False</snippet></ROW><ROW><id>9813574</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.Popen(['bash', 'whatever'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True).communicate()
</snippet></ROW><ROW><id>9813574</id><snippet>  \_ python
      \_ /bin/sh -c bash whatever
          \_ bash
</snippet></ROW><ROW><id>9813574</id><snippet>whatever</snippet></ROW><ROW><id>9813574</id><snippet>sh</snippet></ROW><ROW><id>9813574</id><snippet>bash</snippet></ROW><ROW><id>9813574</id><snippet>['/bin/sh', '-c', 'bash', 'whatever']</snippet></ROW><ROW><id>9813574</id><snippet>['/bin/sh', '-c', 'bash whatever']</snippet></ROW><ROW><id>9813838</id><snippet>from math import factorial

def fac_test(x):
    factorial(x)

import dis
dis.dis(fac_test)
</snippet></ROW><ROW><id>9813838</id><snippet>  4           0 LOAD_GLOBAL              0 (factorial)
              3 LOAD_FAST                0 (x)
              6 CALL_FUNCTION            1
              9 POP_TOP             
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
</snippet></ROW><ROW><id>9813838</id><snippet>math.factorial</snippet></ROW><ROW><id>9813838</id><snippet>6 CALL_FUNCTION</snippet></ROW><ROW><id>9813838</id><snippet>factorial</snippet></ROW><ROW><id>9813877</id><snippet>def distx(w1,w2):
    if len(w1) != len(w2):return 100000
    score=0
    for i in range(len(w1)):
       score += int(w1[i] != w2[i])
    return score


word_list = ["fine","fond","line","lose","lone"]

def changeling(guess,target,steps):
    my_steps = []
    print "Guess:",guess
    if target == guess:return [guess]
    try:word_list.remove(guess)
    except:pass
    my_steps.append(guess)
    if target != guess and steps &gt;= 0:
        this_step = []
        one_step_away = [w for w in word_list if distx(guess,w) == 1]
        for k  in one_step_away:
            print "     %s-&gt;"%guess,k
            this_step.append(changeling(k,target,steps-1))
    my_steps.append( this_step )
    return my_steps
tmp = changeling("find","lose",4)
print tmp
</snippet></ROW><ROW><id>9813933</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f3)
  5           0 LOAD_GLOBAL              0 (reduce)
              3 LOAD_GLOBAL              1 (operator)
              6 LOAD_DEREF               1 (d)
              9 LOAD_CONST               1 (1)
             12 BINARY_SUBTRACT     
             13 CALL_FUNCTION            1
             16 LOAD_CLOSURE             0 (x)
             19 BUILD_TUPLE              1
             22 LOAD_CONST               2 (&lt;code object &lt;genexpr&gt; at 0x7f32d325f830, file "&lt;stdin&gt;", line 5&gt;)
             25 MAKE_CLOSURE             0
             28 LOAD_GLOBAL              2 (xrange)
             31 LOAD_FAST                1 (y)
             34 CALL_FUNCTION            1
             37 GET_ITER            
             38 CALL_FUNCTION            1
             41 CALL_FUNCTION            2
             44 RETURN_VALUE
</snippet></ROW><ROW><id>9813933</id><snippet>f5(2,4)</snippet></ROW><ROW><id>9813933</id><snippet>&gt;&gt;&gt; counter = 0
&gt;&gt;&gt; def adder(x, y):
...   global counter
...   counter += 1
...   return x + y
... 
&gt;&gt;&gt; def op(d):
...   if d &lt;= 1: return adder
...   return lambda x,y:reduce(op(d-1),(x for i in xrange(y)))
...
&gt;&gt;&gt; op(5)(2,4)
32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656L
&gt;&gt;&gt; counter
65035
&gt;&gt;&gt; counter = 0
&gt;&gt;&gt; op(3)(4,100)
&gt;&gt;&gt; counter
297
</snippet></ROW><ROW><id>9813933</id><snippet>operator</snippet></ROW><ROW><id>9813972</id><snippet>import Skype4Py
skype = Skype4Py.Skype(Transport='x11')
skype.Attach()
</snippet></ROW><ROW><id>9814050</id><snippet>#include &lt;stdio.h&gt;
__declspec(dllexport) int __cdecl sum(int a, int b) { return (a + b); }


import ctypes
ctypes.CDLL('test.dll')._sum(8,3)
</snippet></ROW><ROW><id>9814233</id><snippet>def myOpen(name, mode='r', buffer=None):
    if buffer:
        open_file = open(name, mode, buffer)
    else:
        open_file = open(name, mode)
</snippet></ROW><ROW><id>9814233</id><snippet>buffer</snippet></ROW><ROW><id>9814246</id><snippet>a = np.array(1)
</snippet></ROW><ROW><id>9814246</id><snippet>a</snippet></ROW><ROW><id>9814246</id><snippet>float</snippet></ROW><ROW><id>9814246</id><snippet>float(a)</snippet></ROW><ROW><id>9814246</id><snippet>a.item()</snippet></ROW><ROW><id>9814246</id><snippet>a[()]</snippet></ROW><ROW><id>9814246</id><snippet>a = np.array([1])
</snippet></ROW><ROW><id>9814246</id><snippet>a[0]</snippet></ROW><ROW><id>9814261</id><snippet>while read ARGS; do
  nohup ./subscriber.py $ARGS &amp;
done &lt; mylist.txt
</snippet></ROW><ROW><id>9814261</id><snippet>mylist.txt</snippet></ROW><ROW><id>9814261</id><snippet>subscriber.py</snippet></ROW><ROW><id>9814261</id><snippet>nohup</snippet></ROW><ROW><id>9814261</id><snippet>&amp;</snippet></ROW><ROW><id>9814580</id><snippet>iterparse</snippet></ROW><ROW><id>9814580</id><snippet>Element</snippet></ROW><ROW><id>9814580</id><snippet>Element</snippet></ROW><ROW><id>9814580</id><snippet>clear()</snippet></ROW><ROW><id>9814580</id><snippet>Element</snippet></ROW><ROW><id>9814580</id><snippet>Element</snippet></ROW><ROW><id>9814580</id><snippet>lxml.etree.iterparse</snippet></ROW><ROW><id>9814580</id><snippet>&lt;/record&gt;</snippet></ROW><ROW><id>9814580</id><snippet>from lxml import etree
import resource

class InfiniteXML (object):
    def __init__(self):
        self._root = True
    def read(self, len=None):
        if self._root:
            self._root=False
            return "&lt;?xml version='1.0' encoding='US-ASCII'?&gt;&lt;records&gt;\n"
        else:
            return """&lt;record&gt;\n\t&lt;ancestor attribute="value"&gt;text value&lt;/ancestor&gt;\n&lt;/record&gt;\n"""

def parse(fp):
    context = etree.iterparse(fp, events=('end',))
    for action, elem in context:
        if elem.tag=='record':
            # processing goes here
            pass

        #memory usage
        print resource.getrusage(resource.RUSAGE_SELF).ru_maxrss

        # cleanup
        # first empty children from current element
            # This is not absolutely necessary if you are also deleting siblings,
            # but it will allow you to free memory earlier.
        elem.clear()
        # second, delete previous siblings (records)
        while elem.getprevious() is not None:
            del elem.getparent()[0]
        # make sure you have no references to Element objects outside the loop

parse(InfiniteXML())
</snippet></ROW><ROW><id>9814600</id><snippet>x = 5j
if isinstance(x, complex):
    print 'X is complex'
</snippet></ROW><ROW><id>9814600</id><snippet>X is complex
</snippet></ROW><ROW><id>9814606</id><snippet>&gt;&gt;&gt; import numpy, scipy.stats
&gt;&gt;&gt; 
&gt;&gt;&gt; data = numpy.random.randint(37231, 56661,size=10)
&gt;&gt;&gt; xmin, xmax = min(data), max(data)
&gt;&gt;&gt; x = numpy.linspace(xmin, xmax, 10)
&gt;&gt;&gt; 
&gt;&gt;&gt; density = scipy.stats.gaussian_kde(data)
&gt;&gt;&gt; density.dataset
array([[52605, 45451, 46029, 40379, 48885, 41262, 39248, 38247, 55987,
        44019]])
&gt;&gt;&gt; density(x)
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>9814606</id><snippet>&gt;&gt;&gt; density = scipy.stats.gaussian_kde(data*1.0)
&gt;&gt;&gt; density.dataset
array([[ 52605.,  45451.,  46029.,  40379.,  48885.,  41262.,  39248.,
         38247.,  55987.,  44019.]])
&gt;&gt;&gt; density(x)
array([  4.42201513e-05,   5.51130237e-05,   5.94470211e-05,
         5.78485526e-05,   5.21379448e-05,   4.43176188e-05,
         3.66725694e-05,   3.06297511e-05,   2.56191024e-05,
         2.01305127e-05])
</snippet></ROW><ROW><id>9814744</id><snippet>userscript</snippet></ROW><ROW><id>9814744</id><snippet>userscript.py</snippet></ROW><ROW><id>9814744</id><snippet>PyImport_ImportModule</snippet></ROW><ROW><id>9814744</id><snippet>char *</snippet></ROW><ROW><id>9814744</id><snippet>userscript.py</snippet></ROW><ROW><id>9814744</id><snippet>py</snippet></ROW><ROW><id>9814744</id><snippet>userscript</snippet></ROW><ROW><id>9814744</id><snippet>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;Python.h&gt;

int main(void)
{
    const char *scriptDirectoryName = "/tmp";
    Py_Initialize();
    PyObject *sysPath = PySys_GetObject("path");
    PyObject *path = PyString_FromString(scriptDirectoryName);
    int result = PyList_Insert(sysPath, 0, path);
    PyObject *pModule = PyImport_ImportModule("userscript");
    if (PyErr_Occurred())
        PyErr_Print();
    printf("%p\n", pModule);
    Py_Finalize();
    return 0;
}
</snippet></ROW><ROW><id>9814870</id><snippet>x == 3</snippet></ROW><ROW><id>9814870</id><snippet>a</snippet></ROW><ROW><id>9814870</id><snippet>m</snippet></ROW><ROW><id>9814870</id><snippet>n</snippet></ROW><ROW><id>9814870</id><snippet>a</snippet></ROW><ROW><id>9814870</id><snippet>x</snippet></ROW><ROW><id>9814870</id><snippet>n</snippet></ROW><ROW><id>9814870</id><snippet>from math import log, ceil, floor

def monoSearch(low, high):
    max_power = int(floor(log(high) / log(2)))
    for power in range(3, max_power + 1):
        min_base = low ** (1.0 / power)
        max_base = high ** (1.0 / power)
        for base in range(int(ceil(min_base)), int(floor(max_base)) + 1):
            yield '%s ^ %s' % (base, power)

print '\n'.join(monoSearch(42, 1000000))
</snippet></ROW><ROW><id>9814890</id><snippet>repr()</snippet></ROW><ROW><id>9814890</id><snippet>\x</snippet></ROW><ROW><id>9814890</id><snippet>print</snippet></ROW><ROW><id>9815129</id><snippet>str = 'a,,b,c,'
re.findall(r'[^,;\s]+', str)
</snippet></ROW><ROW><id>9815288</id><snippet>   for p in list:
        print(p.key().id())
</snippet></ROW><ROW><id>9815339</id><snippet>1121 for (i=1 ; i&lt;=x ; i++) {
1122     iobj = (PyObject *)PyInt_FromLong(i);
1123     if (iobj == NULL)
1124         goto error;
1125     newresult = PyNumber_Multiply(result, iobj);
1126     Py_DECREF(iobj);
1127     if (newresult == NULL)
1128         goto error;
1129     Py_DECREF(result);
1130     result = newresult;
1131 }
</snippet></ROW><ROW><id>9815467</id><snippet>IDLE.app</snippet></ROW><ROW><id>9815467</id><snippet>.bash_profile</snippet></ROW><ROW><id>9815467</id><snippet>IDLE.app</snippet></ROW><ROW><id>9815467</id><snippet>$ /usr/local/bin/idle3   # for idle3.x
</snippet></ROW><ROW><id>9815467</id><snippet>$ /usr/local/bin/idle    # for idle2.x
</snippet></ROW><ROW><id>9815467</id><snippet>$ /usr/local/bin/idle3.2
</snippet></ROW><ROW><id>9815512</id><snippet>line.split()</snippet></ROW><ROW><id>9815512</id><snippet>line='-16.37617\t144.70329\t017.2\t7'
line.split()
# ['-16.37617', '144.70329', '017.2', '7']
</snippet></ROW><ROW><id>9815512</id><snippet>line[2]</snippet></ROW><ROW><id>9815512</id><snippet>if float(line.split()[2]) &gt; 0:
    fout.write(line)
</snippet></ROW><ROW><id>9815512</id><snippet>if line.split()[2].find('-') != -1:
    fout.write(line)
</snippet></ROW><ROW><id>9815512</id><snippet>split()</snippet></ROW><ROW><id>9815512</id><snippet>Rx</snippet></ROW><ROW><id>9815512</id><snippet>i = headers.split().index('Rx')
# now use line[i]
</snippet></ROW><ROW><id>9815529</id><snippet>#!/api</snippet></ROW><ROW><id>9815529</id><snippet>http://www.domain.com</snippet></ROW><ROW><id>9815529</id><snippet>line.replace('#!/api','http://www.domain.com')
</snippet></ROW><ROW><id>9815583</id><snippet>def make_instances(context, *instances):
    return [cls(context, *args) for cls, args in instances]

A, B, ..., Z = make_instances(get_context_from_some_method(), 
                 (a, (1,)), (b, (2,)), ..., (z, (26,)))

# or
instances = make_instances(get_context_from_some_method(), 
             zip(list_of_subclasses, ((x,) for x in range(1, 27))))
</snippet></ROW><ROW><id>9815583</id><snippet>class z(base):
    def __init__(self, zz):
        self.zz = zz
        self.context = context

context = 'abc'
Z = z(26)
</snippet></ROW><ROW><id>9815583</id><snippet>class base:
    context = None # if you want to be able to create without context.
    # just omit the previous line if you want an error
    # when you haven't set a context and you try to instantiate a subclass

class a(base):
    def __init__(self, aa):
        self.aa = aa
        self.context = self.context # sets an instance variable
        # so the class variable can be changed

class b(base):
    def __init__(self, bb):
        self.bb = bb
        self.context = self.context

base.context = 'context'

A = a(1)
B = b(2)

base.context = 'newcontext'

print A.context # context
</snippet></ROW><ROW><id>9815676</id><snippet>request.response</snippet></ROW><ROW><id>9815676</id><snippet>@view_config(context=HTTPNotFound, renderer='404.pt')
def not_found(self, request):
    request.response.status = 404
    return {}
</snippet></ROW><ROW><id>9815810</id><snippet>'celery': {
        'level': 'WARNING',
        'handlers': ['sentry'],
        'propagate': False,
    },
</snippet></ROW><ROW><id>9815810</id><snippet>loggers</snippet></ROW><ROW><id>9815810</id><snippet>LOGGING</snippet></ROW><ROW><id>9815810</id><snippet># the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %    (message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'DEBUG',
            'class': 'raven.contrib.django.handlers.SentryHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'celery': {
            'level': 'WARNING',
            'handlers': ['sentry'],
            'propagate': False,
        },
    },
}
</snippet></ROW><ROW><id>9815824</id><snippet>&gt;&gt;&gt; call_iter = iter(lambda:lambda x: x + 1, 100)
&gt;&gt;&gt; next(call_iter)(1)
2
</snippet></ROW><ROW><id>9815869</id><snippet>paintEverything()</snippet></ROW><ROW><id>9815869</id><snippet>paintButton()</snippet></ROW><ROW><id>9815869</id><snippet>paintLabel()</snippet></ROW><ROW><id>9815869</id><snippet>paintEverything()</snippet></ROW><ROW><id>9815869</id><snippet>paintLabel()</snippet></ROW><ROW><id>9815869</id><snippet>paintEverything()</snippet></ROW><ROW><id>9815886</id><snippet>if data:
   # process data
else:
   # client disconnected
</snippet></ROW><ROW><id>9816147</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; data = "1|234|4456|789"
&gt;&gt;&gt; numpy.fromstring(data, dtype=int, sep="|")
array([   1,  234, 4456,  789])
</snippet></ROW><ROW><id>9816436</id><snippet>.authenticated</snippet></ROW><ROW><id>9816436</id><snippet>threading.Event</snippet></ROW><ROW><id>9816436</id><snippet>wait()</snippet></ROW><ROW><id>9816436</id><snippet>session_start</snippet></ROW><ROW><id>9816436</id><snippet>auth_success</snippet></ROW><ROW><id>9816436</id><snippet>failed_auth</snippet></ROW><ROW><id>9816436</id><snippet>no_auth</snippet></ROW><ROW><id>9816436</id><snippet>class ChatClient(ClientXMPP):
    def __init__(self, ...):
        ...
        self.auth_queue = queue.Queue()
        self.add_event_handler('no_auth', self.failed)

    def start(self, event):
        self.auth_queue.put('success')
        ...

    def failed(self, event):
        self.auth_queue.put('failed')


def authenticate(username, password, server):
    xmppuser = username + '@' + server
    passTester = ChatClient(xmppuser, password)
    try:
        result = passTester.auth_queue.get(timeout=10)
    except queue.Empty:
        result = 'failed'
    passTester.disconnect()
    return result == 'success'
</snippet></ROW><ROW><id>9816560</id><snippet>uids</snippet></ROW><ROW><id>9816560</id><snippet>uids = map(operator.itemgetter("uid"), users)
foo(uids)
</snippet></ROW><ROW><id>9816560</id><snippet>foo([x["uid"] for x in users])
</snippet></ROW><ROW><id>9816560</id><snippet>uids</snippet></ROW><ROW><id>9816560</id><snippet>[]</snippet></ROW><ROW><id>9816560</id><snippet>()</snippet></ROW><ROW><id>9816560</id><snippet>def print_all(it):
    """ Trivial function."""
    for i in it:
        print i

print_all(x["uid"] for x in users)
</snippet></ROW><ROW><id>9816671</id><snippet>xrange</snippet></ROW><ROW><id>9816671</id><snippet>int</snippet></ROW><ROW><id>9816671</id><snippet>range</snippet></ROW><ROW><id>9816671</id><snippet>long int</snippet></ROW><ROW><id>9816671</id><snippet>import itertools
range = lambda stop: iter(itertools.count().next, stop)
</snippet></ROW><ROW><id>9816671</id><snippet>def range(stop):
   i = 0
   while i &lt; stop:
       yield i
       i += 1
</snippet></ROW><ROW><id>9816749</id><snippet>account = Account(0.00)
</snippet></ROW><ROW><id>9816749</id><snippet>user_input</snippet></ROW><ROW><id>9816749</id><snippet>user_input</snippet></ROW><ROW><id>9816749</id><snippet>user_options</snippet></ROW><ROW><id>9816749</id><snippet>while</snippet></ROW><ROW><id>9816749</id><snippet>def run():
    done = 0
    global account # just showing you one way, not recommending this
    account = Account(0.00)
    while not done:
        user_options()
        print
        done = not yesno("Do another? ")
        print
</snippet></ROW><ROW><id>9816863</id><snippet>os.path.abspath</snippet></ROW><ROW><id>9816863</id><snippet>import os

def absoluteFilePaths(directory):
   for dirpath,_,filenames in os.walk(directory):
       for f in filenames:
           yield os.path.abspath(os.path.join(dirpath, f)))
</snippet></ROW><ROW><id>9816963</id><snippet>class Node(object):
    def __init__(self, data):
        self.data = data

if __name__ == "__main__":
    a = Node(5)
    a = a.__dict__ #whoops, now I lost the object, I just have the dict
    b = Node.__new__(Node) # make a new empty object
    b.__dict__ = a.copy() # copy in the dict
    # copy because there might still a reference to the object elsewhere
    # if you want changes to b to affect a, then don't copy just assign
    print b.__dict__
    print b
</snippet></ROW><ROW><id>9817043</id><snippet>set</snippet></ROW><ROW><id>9817043</id><snippet>set.add</snippet></ROW><ROW><id>9817043</id><snippet>None</snippet></ROW><ROW><id>9817043</id><snippet>keys.add(sublist[0]) or sublist</snippet></ROW><ROW><id>9817043</id><snippet>None or sublist</snippet></ROW><ROW><id>9817043</id><snippet>sublist</snippet></ROW><ROW><id>9817043</id><snippet>keys = set()
biglist = [keys.add(sublist[0]) or sublist 
              for sublist in biglist 
                  if sublist[0] not in keys]
del keys # if you don't need it any more
</snippet></ROW><ROW><id>9817097</id><snippet>str.split</snippet></ROW><ROW><id>9817097</id><snippet>sep</snippet></ROW><ROW><id>9817097</id><snippet>'1,,2'.split(',')</snippet></ROW><ROW><id>9817097</id><snippet>['1', '', '2']</snippet></ROW><ROW><id>9817097</id><snippet>'1&lt;&gt;2&lt;&gt;3'.split('&lt;&gt;')</snippet></ROW><ROW><id>9817097</id><snippet>['1', '2',
  '3']</snippet></ROW><ROW><id>9817097</id><snippet>['']</snippet></ROW><ROW><id>9817097</id><snippet>sep</snippet></ROW><ROW><id>9817097</id><snippet>None</snippet></ROW><ROW><id>9817097</id><snippet>None</snippet></ROW><ROW><id>9817097</id><snippet>[]</snippet></ROW><ROW><id>9817097</id><snippet>'1 2 3 4 '.split() 
</snippet></ROW><ROW><id>9817097</id><snippet>['1', '2', '3', '4']
</snippet></ROW><ROW><id>9817097</id><snippet>1,,3
</snippet></ROW><ROW><id>9817097</id><snippet>'1,,3'.split(',')
</snippet></ROW><ROW><id>9817097</id><snippet>['1', '', '3']
</snippet></ROW><ROW><id>9817376</id><snippet>(A.objects.filter(b__pk=0) &amp; A.objects.filter(b__pk=1)).distinct()
</snippet></ROW><ROW><id>9817376</id><snippet>A.objects.filter(
    models.Q(pk__in=B.objects.filter(pk=0).values('foo_id')) &amp;
    models.Q(pk__in=B.objects.filter(pk=1).values('foo_id')))
</snippet></ROW><ROW><id>9817376</id><snippet>queryset.annotate(b_count=models.Count('b')).filter(b_count=2)
</snippet></ROW><ROW><id>9817492</id><snippet>def print_obj(obj, prefix=''):
    sys.stdout.write('%s%s' % (prefix, obj))
    if obj.child:
        print_obj(obj, '.')
</snippet></ROW><ROW><id>9817492</id><snippet>def print_obj(obj):
    sys.stdout.write(str(obj))
    obj = obj.child
    while obj:
        sys.stdout.write('.%s' % obj)
        obj = obj.child
</snippet></ROW><ROW><id>9817551</id><snippet>urllib</snippet></ROW><ROW><id>9817551</id><snippet>...
proxies = {'http':'http://someproxy.com:1080/'}
data = urllib.urlopen('http://www.google.com', proxies=proxies).read()
...
</snippet></ROW><ROW><id>9817551</id><snippet>urllib2</snippet></ROW><ROW><id>9817551</id><snippet>...
proxy = urllib2.ProxyHandler({'http':'http://someproxy.com:1080'})
...
</snippet></ROW><ROW><id>9817878</id><snippet># Get after json.dump
json_data = { "educations": { "_total": 1, "values": [{ "degree": "Bachelor of Arts", "fieldOfStudy": "Psychology", "schoolName": "Antioch University Seattle" }] }

for each_education in json_data['educations']['values']
    new_education = Education(**each_education)
    # Set the name foreign key
    # new_educaiton.name = name
    new_education.save()
</snippet></ROW><ROW><id>9817878</id><snippet>name</snippet></ROW><ROW><id>9818177</id><snippet>import os.path
fn = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image.jpg')
canvas.drawImage(fn, 0.2*inch, 11.12*inch, width=w*scale, height=h*scale)
</snippet></ROW><ROW><id>9818207</id><snippet>Product.objects.get(category__in=my_category.get_descendants(include_self=True))
</snippet></ROW><ROW><id>9818207</id><snippet>Product.objects.get(category__pk__in=my_category.get_descendants(include_self=True).values_list('pk'))
</snippet></ROW><ROW><id>9818289</id><snippet>dimensions = [i, i]
</snippet></ROW><ROW><id>9818289</id><snippet>dimensions</snippet></ROW><ROW><id>9818289</id><snippet>        dimensions[0][0] = min(dimensions[0][0], i[0])
        dimensions[0][1] = min(dimensions[0][1], i[1]) 
</snippet></ROW><ROW><id>9818289</id><snippet>min</snippet></ROW><ROW><id>9818289</id><snippet>def print_board(board):
    xs, ys = zip(*board) # separate out the x and y coordinates
    min_x, max_x = min(xs), max(xs) # find the mins and maxs
    min_y, max_y = min(ys), max(ys)
    dimensions = [[min_x, min_y], [max_x, max_y]] # make the dimensions array
</snippet></ROW><ROW><id>9818346</id><snippet>perlCmd = 'C:\perl\perl.exe c:/.../MyPerl.pl'
</snippet></ROW><ROW><id>9818346</id><snippet> myenv = {'MYDIR' : 'C:\This\this\here', using backslash
 '%DIR%\bin;%PATH%'} using slash
</snippet></ROW><ROW><id>9818346</id><snippet> process = subprocess.Popen(['cmd','/c', 'set'], shell=False, stdin = subprocess.PIPE, stdout = subprocess.PIPE, env = myenv)
</snippet></ROW><ROW><id>9818346</id><snippet>process = subprocess.Popen(['cmd','/c', batchCmd ,'&amp;&amp;', 'cd %MYDIR%\SOURCE\FILES', '&amp;&amp;', perlCmd, perlValues], shell=False, stdin = subprocess.PIPE, stdout = subprocess.PIPE, env = myenv)
</snippet></ROW><ROW><id>9818691</id><snippet>plt.title(r'$\alpha &gt; \beta$')</snippet></ROW><ROW><id>9818691</id><snippet>plt.show()</snippet></ROW><ROW><id>9818691</id><snippet>plt.savefig('filename.png')
</snippet></ROW><ROW><id>9818691</id><snippet>import matplotlib.pyplot as plt

#add text
plt.text(0.01, 0.8, r'$\alpha &gt; \beta$',fontsize=50)

#hide axes
fig = plt.gca()
fig.axes.get_xaxis().set_visible(False)
fig.axes.get_yaxis().set_visible(False)
plt.draw() #or savefig
</snippet></ROW><ROW><id>9819016</id><snippet>?</snippet></ROW><ROW><id>9819016</id><snippet>.</snippet></ROW><ROW><id>9819016</id><snippet>\d</snippet></ROW><ROW><id>9819016</id><snippet>[0-9]</snippet></ROW><ROW><id>9819016</id><snippet>\d+</snippet></ROW><ROW><id>9819016</id><snippet>^http://maps\.google\.com/maps/place\?cid=\d+$
</snippet></ROW><ROW><id>9819157</id><snippet>SyntaxError</snippet></ROW><ROW><id>9819157</id><snippet>p[1] = 'Ok'
</snippet></ROW><ROW><id>9819157</id><snippet>SyntaxError</snippet></ROW><ROW><id>9819157</id><snippet>if</snippet></ROW><ROW><id>9819157</id><snippet>if condition:
    true_statement
else:
    false_statement
</snippet></ROW><ROW><id>9819157</id><snippet>true_statement if condition else false_statement
</snippet></ROW><ROW><id>9819302</id><snippet>import os, pprint
new_path = os.path.abspath(r'..\..\..\ABC\DEF\1.0')
assert os.path.isdir(new_path), 'The dir does not exist!')
sys.path.append(new_path)
pprint sys.path
import GHI
</snippet></ROW><ROW><id>9819617</id><snippet>dict()</snippet></ROW><ROW><id>9819617</id><snippet>dict(y, **x)
</snippet></ROW><ROW><id>9819617</id><snippet>x</snippet></ROW><ROW><id>9819617</id><snippet>dict({'a' : 'y[a]'}, **{'a', 'x[a]'}) == {'a' : 'x[a]'}
</snippet></ROW><ROW><id>9819670</id><snippet>test</snippet></ROW><ROW><id>9819670</id><snippet>test</snippet></ROW><ROW><id>9819670</id><snippet> Project
    ├── module1
    │   ├── submodule1
    │   │   ├── base.py
    │   │   ├── model.py
    │   │   └── test
    │   │       └── submodule1_test.py
    │   ├── conn.py
    │   ├── __init__.py
    │   └── test
    │       └── module1_test.py
    ├── errors.py
    ├── __init__.py
    ├── router.py
    └── test
        └── errors_test.py
        └── router_test.py
</snippet></ROW><ROW><id>9819758</id><snippet>memofib = funcmemo(fib)
</snippet></ROW><ROW><id>9819758</id><snippet>fib</snippet></ROW><ROW><id>9819758</id><snippet>memofib</snippet></ROW><ROW><id>9819758</id><snippet>memofib</snippet></ROW><ROW><id>9819758</id><snippet>fib</snippet></ROW><ROW><id>9819758</id><snippet>memofib</snippet></ROW><ROW><id>9819758</id><snippet>fib = funcmemo(fib)
</snippet></ROW><ROW><id>9819758</id><snippet>fib</snippet></ROW><ROW><id>9819758</id><snippet>fib</snippet></ROW><ROW><id>9819758</id><snippet>def fib(n, fibfunc):
    print "fib called with:", n
    if n &lt; 2: return n
    return fibfunc(n-2, fibfunc) + fibfunc(n-1, fibfunc)

memofib = funcmemo(fib)
res = fib(3, memofib)
</snippet></ROW><ROW><id>9819758</id><snippet>fibfunc</snippet></ROW><ROW><id>9819758</id><snippet>def Y(f):
    def Yf(*args):
        return f(Yf)(*args)
    return f(Yf)

@Y
def fib(f):
    def inner_fib(n):
        print "fib called with:", n
        if n &lt; 2: return n
        return f(n-2) + f(n-1)
    return inner_fib
</snippet></ROW><ROW><id>9819840</id><snippet>MOUSEBUTTONDOWN, MOUSEBUTTONUP, MOUSEMOTION</snippet></ROW><ROW><id>9819840</id><snippet>event.buttons</snippet></ROW><ROW><id>9819840</id><snippet>import pygame
from pygame.locals import *

pygame.display.init()
screen = pygame.display.set_mode((800, 600))
img = pygame.image.load('sky.png')

imgPos = pygame.Rect((0, 0), (0, 0))

LeftButton = 0
while 1:
    for e in pygame.event.get():
        if e.type == QUIT: exit(0)
        if e.type == MOUSEMOTION:
            if e.buttons[LeftButton]:
                # clicked and moving
                rel = e.rel
                imgPos.x += rel[0]
                imgPos.y += rel[1]
    screen.fill(0)
    screen.blit(img, imgPos)
    pygame.display.flip()
    pygame.time.delay(30)
</snippet></ROW><ROW><id>9819986</id><snippet>img</snippet></ROW><ROW><id>9819986</id><snippet>src</snippet></ROW><ROW><id>9819986</id><snippet>from BeautifullSoup import BeautifullSoup

#...

soup = BeautifulSoup(bufTwo)
imgTags = soup.findAll('img')
img = [tag['src'] for tag in imgTags]
</snippet></ROW><ROW><id>9820370</id><snippet>__getattr__</snippet></ROW><ROW><id>9820370</id><snippet>class Foo(object):
    def __getattr__(self, attr):
        #only called what self.attr doesn't exist
        raise MyCustonException(attr)
</snippet></ROW><ROW><id>9820370</id><snippet>__getattr__</snippet></ROW><ROW><id>9820370</id><snippet>class BooType(type):
    def __getattr__(self, attr):
        print attr
        return attr

class Boo(object):
    __metaclass__ = BooType

boo = Boo()
Boo.asd # prints asd
boo.asd # raises an AttributeError like normal
</snippet></ROW><ROW><id>9820370</id><snippet>__getattribute__</snippet></ROW><ROW><id>9820981</id><snippet>Python 2.6.7</snippet></ROW><ROW><id>9820981</id><snippet>Python 2.7.2</snippet></ROW><ROW><id>9820981</id><snippet>csv.__version=='1.0'</snippet></ROW><ROW><id>9820981</id><snippet>1007,C,0406,1,C456,ANY,,,,
1007,C,0406,1,C219,ANY,,,,
</snippet></ROW><ROW><id>9821049</id><snippet>import scipy</snippet></ROW><ROW><id>9821049</id><snippet>import scipy as sp</snippet></ROW><ROW><id>9821049</id><snippet>from scipy import special</snippet></ROW><ROW><id>9821049</id><snippet>from scipy import linalg</snippet></ROW><ROW><id>9821063</id><snippet>user = session['user']
data = request.form['date']
value = request.form['value']
g.db.execute('INSERT INTO {} (date,value) VALUES (?,?)'.format(user), (data, value)) 
</snippet></ROW><ROW><id>9821301</id><snippet>for filename in allfiles:
    if not os.isfile(filename): continue
    t = os.path.getmtime(filename)
    v = datetime.datetime.fromtimestamp(t)
    x = v.strftime( ' %d-%m-%Y')
    dirname = prefix + x + " " + str(count)
    target = os.path.join(dirname, filename)
    os.renames(filename, target)
    count +=1
</snippet></ROW><ROW><id>9821301</id><snippet>help(os.renames)</snippet></ROW><ROW><id>9821532</id><snippet>lxml</snippet></ROW><ROW><id>9821532</id><snippet>xpath</snippet></ROW><ROW><id>9821532</id><snippet>xpath</snippet></ROW><ROW><id>9821532</id><snippet>from lxml import etree
data = open('result.html','r').read()
doc = etree.HTML(data)

for tr in doc.xpath('//table/tr[@class="trmenu1"]'):
  print tr.xpath('./td/text()')
</snippet></ROW><ROW><id>9821532</id><snippet>['Registration Number: ', ' CS 2047103']
['Name of the Candidate: ', 'PATIL SANTOSH KUMARRAO        ']
['Examination Paper: ', 'CS - Computer Science and Information Technology']
['Marks Obtained: ', '75.67 Out of 100']
['GATE Score: ', '911']
['All India Rank: ', '34']
['No of Candidates Appeared in CS: ', '156780']
['Qualifying Marks for CS: ', '\r\n\t\t\t\t\t']
['General', 'OBC ', '(Non-Creamy)', 'SC / ST / PD ']
['31.54', '28.39', '21.03 ']
</snippet></ROW><ROW><id>9821532</id><snippet>ElementTree</snippet></ROW><ROW><id>9821532</id><snippet>xpath</snippet></ROW><ROW><id>9821532</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>9821532</id><snippet>class="trmenu1"</snippet></ROW><ROW><id>9821532</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>9821532</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>9821830</id><snippet>manage.py send_mail</snippet></ROW><ROW><id>9821840</id><snippet>class A(object):
    def __init__( self, connections, sum ):
        self.connections = connections
        self.sum = sum

    def passToConnections( self, index ):
        self.connections[ index ].receive( self.sum )

    def receive( self, input ):
       self.sum += input
</snippet></ROW><ROW><id>9821840</id><snippet>&gt;&gt;&gt; a1 = A( [], 0 )
&gt;&gt;&gt; a2 = A( [], 0 )
&gt;&gt;&gt; a3 = A( [ a1, a2 ], 10 )
&gt;&gt;&gt; a3.passToConnections( 0 )
&gt;&gt;&gt; a3.passToConnections( 1 )
&gt;&gt;&gt; a3.passToConnections( 1 )
&gt;&gt;&gt; print a1.sum
10
&gt;&gt;&gt; print a2.sum
20
</snippet></ROW><ROW><id>9821840</id><snippet>a1</snippet></ROW><ROW><id>9821840</id><snippet>a2</snippet></ROW><ROW><id>9821840</id><snippet>a3</snippet></ROW><ROW><id>9822249</id><snippet>theme: null</snippet></ROW><ROW><id>9822554</id><snippet>None</snippet></ROW><ROW><id>9822554</id><snippet>try:
    y = int(x)
except ValueError:
    y = None
</snippet></ROW><ROW><id>9822554</id><snippet>&gt;&gt;&gt; input = """1023
... 10?1023
... 1023
... """
&gt;&gt;&gt; 
&gt;&gt;&gt; sum(int(line) if line.isdigit() else 0 for line in input.splitlines())
2046
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9822883</id><snippet>ModifyMain</snippet></ROW><ROW><id>9822883</id><snippet>Main.A()</snippet></ROW><ROW><id>9822883</id><snippet>A</snippet></ROW><ROW><id>9822883</id><snippet>class Main(object):
    def A(self):
        print 'Hello'
    def B(self):
        self.feature = DoSomething() # self.feature is an instance of DoSomething
        self.feature.ModifyMain(self) # pass self to a method

class DoSomething(object):
    def ModifyMain(self, main): # note that self is *this* object; main is the object passed in, which was self in the caller
        #Note case - main, not Main
        main.A()

def run():
    M = Main()
    M.B()

if __name__=="__main__": # this will be true if this script is run from the shell OR pasted into the interpreter
    run()
</snippet></ROW><ROW><id>9823098</id><snippet>logging</snippet></ROW><ROW><id>9823098</id><snippet>FileHandler</snippet></ROW><ROW><id>9823098</id><snippet>QueueHandler</snippet></ROW><ROW><id>9823098</id><snippet>QueueListener</snippet></ROW><ROW><id>9823098</id><snippet>Quelistener</snippet></ROW><ROW><id>9823098</id><snippet>start()</snippet></ROW><ROW><id>9823271</id><snippet>os.path.realpath()</snippet></ROW><ROW><id>9823271</id><snippet>&gt;&gt;&gt; os.path.realpath('/usr/bin/..')
'/usr'
&gt;&gt;&gt; os.path.realpath('/usr/bin/../..')
'/'
&gt;&gt;&gt; os.path.realpath('/usr/bin/../../..')
'/'
&gt;&gt;&gt; os.path.realpath('/..')
'/'
</snippet></ROW><ROW><id>9823316</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.getdefaultencoding()
</snippet></ROW><ROW><id>9823403</id><snippet>import re

with open('lines', 'r') as input:
for line in input:
    match = re.search('PROCEDURE TEST \(X : STRING;\s*(\{.*\})*\s*Y: STRING\);', line)
    if match:
        print 'PROCEDURE TEST (X : STRING;', match.group(1), 'CONST Y: STRING);'
</snippet></ROW><ROW><id>9823403</id><snippet>import re

with open('imperfections', 'r') as imp:
  imperfections = imp.readlines()
with open('code', 'r') as cod:
  code = cod.readlines()
for imp in imperfections:
  parsed = re.search('(.*); \((\w+) NEEDS (\w+)', imp)
  find = parsed.group(1).replace('(', '\(')
  find = find.replace(')', '\s*(\{.*\})*\)')
  find = find.replace(';', ';\s*(\{.*\})*')
  replace = parsed.group(2)
  replace_with = ' '.join([parsed.group(3), replace])
  #print 'find: "%s" replace "%s" with "%s"' % (find, replace, replace_with)
  for line in code:
    match = re.search(find, line)
    if match:
        print re.sub(replace, replace_with, line)[:-1]
</snippet></ROW><ROW><id>9823403</id><snippet>difflib</snippet></ROW><ROW><id>9823403</id><snippet>import re
import difflib

def merge(string1, string2):
  diffs = difflib.SequenceMatcher(None, string2, string1).get_opcodes()
  result = ''
  last_index = 0
  for diff in [x for x in diffs if x[0] in ['insert', 'replace']]:
    if diff[0] == 'replace':
      result += string2[last_index:diff[1]] + string1[diff[3]:diff[4]] + string2[diff[1]:diff[2]]
    else:
      result += string2[last_index:diff[1]] + string1[diff[3]:diff[4]]
    last_index = diff[2]
  result += string2[last_index:]
  return result

original = "PROCEDURE TEST (X: STRING; {Hi, I'm a comment} Y: INT {me too!})"
stripped = re.sub(r'\s*\{[^}]*\}\s*', '', original)

if re.search('PROCEDURE TEST \(X: STRING;Y: INT\)', stripped):
  correct = stripped.replace('Y', 'CONST Y')
  print merge(original, correct)
</snippet></ROW><ROW><id>9823556</id><snippet>with open("hk_L1.ref") as f:
    data = numpy.array(f.read().split(), dtype=float).reshape(7000, 8)
</snippet></ROW><ROW><id>9823751</id><snippet>str.rstrip()</snippet></ROW><ROW><id>9823751</id><snippet>import string
my_string = my_string.rstrip(string.ascii_letters + string.whitespace)
</snippet></ROW><ROW><id>9823911</id><snippet>multiprocessing</snippet></ROW><ROW><id>9823911</id><snippet>threading</snippet></ROW><ROW><id>9823911</id><snippet>Queue</snippet></ROW><ROW><id>9823911</id><snippet>multiprocessing</snippet></ROW><ROW><id>9823911</id><snippet>Queue</snippet></ROW><ROW><id>9823911</id><snippet>Queue</snippet></ROW><ROW><id>9823911</id><snippet>from Queue import Queue
</snippet></ROW><ROW><id>9823911</id><snippet>from multiprocessing import Queue
</snippet></ROW><ROW><id>9823911</id><snippet>from</snippet></ROW><ROW><id>9823911</id><snippet>queue = multiprocessing.Queue()
</snippet></ROW><ROW><id>9823968</id><snippet>itertools.product()</snippet></ROW><ROW><id>9823968</id><snippet>def plus_minus(s):
    for t in itertools.product(["", "+", "-"], repeat=len(s) - 1):
        yield "".join(itertools.chain.from_iterable(zip(s, t))) + s[-1]
</snippet></ROW><ROW><id>9823968</id><snippet>&gt;&gt;&gt; list(plus_minus("123"))
['123', '12+3', '12-3', '1+23', '1+2+3', '1+2-3', '1-23', '1-2+3', '1-2-3']
</snippet></ROW><ROW><id>9823968</id><snippet>def plus_minus(s):
    if len(s) &lt;= 1:
        yield s
        return
    for x in ["", "+", "-"]:
        for y in plus_minus(s[1:]):
            yield s[0] + x + y
</snippet></ROW><ROW><id>9824050</id><snippet>try:
    someFunction()
except Exception as ex:
    template = "An exception of type {0} occured. Arguments:\n{1!r}"
    message = template.format(type(ex).__name__, ex.args)
    print message
</snippet></ROW><ROW><id>9824050</id><snippet>message</snippet></ROW><ROW><id>9824050</id><snippet>raise</snippet></ROW><ROW><id>9824050</id><snippet>except:</snippet></ROW><ROW><id>9824050</id><snippet>except:</snippet></ROW><ROW><id>9824050</id><snippet>SystemExit</snippet></ROW><ROW><id>9824050</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>9824050</id><snippet>GeneratorExit</snippet></ROW><ROW><id>9824050</id><snippet>    import traceback
    print traceback.format_exc()
</snippet></ROW><ROW><id>9824050</id><snippet>    import logging
    log = logging.getLogger()
    log.exception("Message for you, sir!")
</snippet></ROW><ROW><id>9824050</id><snippet>    import pdb
    pdb.post_mortem()
</snippet></ROW><ROW><id>9824290</id><snippet>SELECT name, value, description, allow, deny, networks, friends
FROM privacy_setting
WHERE name = 'default_stream_privacy'
</snippet></ROW><ROW><id>9824751</id><snippet>dct={}</snippet></ROW><ROW><id>9824751</id><snippet>dct</snippet></ROW><ROW><id>9824894</id><snippet>f.flush()
</snippet></ROW><ROW><id>9824894</id><snippet>os.fsync(f.fileno())
</snippet></ROW><ROW><id>9824894</id><snippet>open(f, "w", 0)</snippet></ROW><ROW><id>9824894</id><snippet>open(f,"w", 1)</snippet></ROW><ROW><id>9824910</id><snippet>import urllib2
url = urllib2.Request("http://...", headers={'HTTP_REFERER': "http://..."})
doc = pyQuery(url=url)
</snippet></ROW><ROW><id>9824922</id><snippet>~ $ couchpy
["reset"]
true
["add_fun", "def fun(doc): yield None, None"]
true
["map_doc", {}]
[[[null, null]]]
</snippet></ROW><ROW><id>9825078</id><snippet>('VIDEO_BAYER', 
 'VIDEO_IR_10BIT', 
 'VIDEO_IR_10BIT_PACKED', 
 'VIDEO_IR_8BIT', 
 'VIDEO_RGB', 
 'VIDEO_YUV_RAW', 
 'VIDEO_YUV_RGB')
</snippet></ROW><ROW><id>9825078</id><snippet>('DEPTH_10BIT', 
 'DEPTH_10BIT_PACKED', 
 'DEPTH_11BIT', 
 'DEPTH_11BIT_PACKED')
</snippet></ROW><ROW><id>9825078</id><snippet>freenect.sync_get_video(0, freenect.VIDEO_IR_10BIT)
</snippet></ROW><ROW><id>9825199</id><snippet>request.body.params</snippet></ROW><ROW><id>9825199</id><snippet>request.body_params</snippet></ROW><ROW><id>9825670</id><snippet>a[fancy][index2] = something</snippet></ROW><ROW><id>9825670</id><snippet>&gt;&gt;&gt; a = np.zeros(3)
&gt;&gt;&gt; b = np.array([True, False, True])
&gt;&gt;&gt; a[b][1:] = 2
array([ 0.,  0.,  0.])
&gt;&gt;&gt; a[1:][b[1:]] = 2
array([ 0.,  0.,  2.])
</snippet></ROW><ROW><id>9825670</id><snippet>a[a['ena']]['step_secs'][1:] = timestep
</snippet></ROW><ROW><id>9825670</id><snippet>tmp = a['ena'][1:]
a['step_secs'][1:][tmp] = timestep
</snippet></ROW><ROW><id>9825670</id><snippet>a['step_secs'][1:][a['ena'][1:]] = timestep
</snippet></ROW><ROW><id>9825799</id><snippet>ModelName._meta.get_field('field_name').null
</snippet></ROW><ROW><id>9825997</id><snippet>class MyClass:
    def getDumpFile(self):
        pass

myclass = MyClass()
myclass.getDumpFile = 'hello world'

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
</snippet></ROW><ROW><id>9826110</id><snippet>multiprocessing</snippet></ROW><ROW><id>9826110</id><snippet>class FindIntersectionsWrapper(object):
    def __init__(self, ent, collidable):
        self.ent = ent
        self.collidable = collidable
    def __call__(self, dims):
        line1, line2 = dims
        return find_intersections(
            line1 + self.ent.position, self.ent.velocity,
            self.ent.acceleration, line2 + self.collidable.position,
            self.collidable.velocity, self.collidable.acceleration, 
            self.ent, self.collidable)

def entity_intersections(ent, collidable):
    find_inter = FindIntersectionsWrapper(ent, collidable)
    pool = multiprocessing.Pool()
    return pool.map(find_inter, product(ent.shape, collidable.shape))
</snippet></ROW><ROW><id>9826110</id><snippet>find_intersections_wrapper()</snippet></ROW><ROW><id>9826110</id><snippet>Pool.map()</snippet></ROW><ROW><id>9826110</id><snippet>pool</snippet></ROW><ROW><id>9826110</id><snippet>entity_intersections()</snippet></ROW><ROW><id>9826110</id><snippet>Pool.map()</snippet></ROW><ROW><id>9826374</id><snippet>(?&lt;!\d)\d+
</snippet></ROW><ROW><id>9826374</id><snippet>\A</snippet></ROW><ROW><id>9826374</id><snippet>(?:\D|\A)</snippet></ROW><ROW><id>9826452</id><snippet>/usr/bin/python2.7 bootstrap.py</snippet></ROW><ROW><id>9826537</id><snippet>return a</snippet></ROW><ROW><id>9826537</id><snippet>for</snippet></ROW><ROW><id>9826537</id><snippet>def rowExtractor(logfile):
    #output holds all of the rows
    ouput = []
    for row in logfile:
        if row[32] == 'No':
            a = []
            a.append(row[44])
            a.append(row[58])
            a.append(row[83])
            a.append(row[32])
            output.append(a)
    #notice that the return statement is outside of the for-loop
    return output
outLog.writerows(rowExtractor(newlogfile))
</snippet></ROW><ROW><id>9826537</id><snippet>yield</snippet></ROW><ROW><id>9826603</id><snippet>python2.7</snippet></ROW><ROW><id>9826603</id><snippet>gcc -I/usr/include/python2.7 test.c -lpython2.7
</snippet></ROW><ROW><id>9826895</id><snippet>zip(range(10), range(10, 0, -1))
</snippet></ROW><ROW><id>9826895</id><snippet>zip</snippet></ROW><ROW><id>9826895</id><snippet>[func(a, d, ...) for a, b, ..., n in zip(iterable1, iterable2, ..., iterableN)]
</snippet></ROW><ROW><id>9827258</id><snippet>def getCoordinates(filename):
    ''' 
    Pass in a filename.
    Return a parsed dictionary in the form of:

    {
        city:  [lat, lon]
    } 
    '''

    fin = open(filename,"r")
    cities = {}

    for line in fin:

        # this is going to split on the comma, and
        # only once, so you get the city, and the rest
        # of the line
        city, extra =  line.split(',', 1)

        # we could do a regex, but again, I dont think
        # you know what a regex is and you seem to already
        # understand split. so lets just stick with that

        # this splits on the '[' and we take the right side
        part = extra.split('[')[1]

        # now take the remaining string and split off the left
        # of the ']'
        part = part.split(']')[0]

        # we end up with something like: '4660, 12051'
        # so split that string on the comma into a list
        latLon = part.split(',')

        # associate the city, with the latlon in the dictionary
        cities[city] = latLong

    return cities
</snippet></ROW><ROW><id>9827258</id><snippet>re</snippet></ROW><ROW><id>9827268</id><snippet>db.Key</snippet></ROW><ROW><id>9827268</id><snippet>put()</snippet></ROW><ROW><id>9827268</id><snippet>a = A()
the_key = a.put()

b = B()
b.name = 'test'
b.numbers = [the_key]
b.put()
</snippet></ROW><ROW><id>9827268</id><snippet>db.ListProperty(db.Key)</snippet></ROW><ROW><id>9827268</id><snippet>db.Key</snippet></ROW><ROW><id>9827268</id><snippet>class B(db.Model):
   name = db.StringProperty()
   numbers = db.ListProperty(int)
                             ^^^ 
</snippet></ROW><ROW><id>9827343</id><snippet>struct.pack("&gt;H", len(...) | 0x8000)
</snippet></ROW><ROW><id>9827343</id><snippet>2 ** 14</snippet></ROW><ROW><id>9827736</id><snippet>foo.bar</snippet></ROW><ROW><id>9827736</id><snippet>foo.bar</snippet></ROW><ROW><id>9827736</id><snippet>quizform.ans1</snippet></ROW><ROW><id>9827736</id><snippet>def __getitem__(self, name):
    "Returns a BoundField with the given name."
    try:
        field = self.fields[name]
    except KeyError:
        raise KeyError('Key %r not found in Form' % name)
    return BoundField(self, field, name)
</snippet></ROW><ROW><id>9827736</id><snippet>__getitem__</snippet></ROW><ROW><id>9827736</id><snippet>@register.filter
def lookup(f, name):
    try:        
        return f[name]
    except KeyError:
        return None
</snippet></ROW><ROW><id>9827775</id><snippet>__dict__</snippet></ROW><ROW><id>9827775</id><snippet>A</snippet></ROW><ROW><id>9827775</id><snippet>__init__</snippet></ROW><ROW><id>9827775</id><snippet>A</snippet></ROW><ROW><id>9827775</id><snippet>&gt;&gt;&gt; class A(object):
...     def _test(self): pass
...     def __init__(self):
...             self.test = self._test
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.__dict__['test'].im_self
</snippet></ROW><ROW><id>9827775</id><snippet>__del__</snippet></ROW><ROW><id>9827775</id><snippet>gc.garbage</snippet></ROW><ROW><id>9827775</id><snippet>gc.garbage
</snippet></ROW><ROW><id>9827775</id><snippet>__del__()</snippet></ROW><ROW><id>9827775</id><snippet>__del__()</snippet></ROW><ROW><id>9827775</id><snippet>__del__()</snippet></ROW><ROW><id>9827775</id><snippet>del gc.garbage[:]</snippet></ROW><ROW><id>9827775</id><snippet>__del__()</snippet></ROW><ROW><id>9827775</id><snippet>garbage</snippet></ROW><ROW><id>9827775</id><snippet>__del__</snippet></ROW><ROW><id>9828001</id><snippet>os.utime</snippet></ROW><ROW><id>9828004</id><snippet>findAll</snippet></ROW><ROW><id>9828004</id><snippet>find_all</snippet></ROW><ROW><id>9828004</id><snippet>&gt;&gt;&gt; markup = '''&lt;table&gt;
... &lt;tr&gt;
... &lt;td class="td" height="25"&gt;Upstream Power&lt;/td&gt;
... &lt;td class="td"&gt;25.2 dBmV&lt;/td&gt;
... &lt;td class="td"&gt;49.2 dBmV&lt;/td&gt;
... &lt;/tr&gt;
... &lt;/table&gt;'''
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as bs
&gt;&gt;&gt; soup = bs(markup)
&gt;&gt;&gt; import re
&gt;&gt;&gt; soup.findAll(text=re.compile('Power'))
... [u'Upstream Power']
</snippet></ROW><ROW><id>9828004</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as bs
&gt;&gt;&gt; soup = bs(markup)
&gt;&gt;&gt; soup.find_all(text=re.compile('Power'))
... [u'Upstream Power']
</snippet></ROW><ROW><id>9828004</id><snippet>&gt;&gt;&gt; soup.td.find_all(text=re.compile('Power'))
... [u'Upstream Power']
</snippet></ROW><ROW><id>9828119</id><snippet>POINTER</snippet></ROW><ROW><id>9828119</id><snippet>ctypes.c_char_p</snippet></ROW><ROW><id>9828119</id><snippet>c_ubyte * 4096</snippet></ROW><ROW><id>9828119</id><snippet>char</snippet></ROW><ROW><id>9828119</id><snippet>c_ubyte</snippet></ROW><ROW><id>9828119</id><snippet>int</snippet></ROW><ROW><id>9828119</id><snippet>c_int</snippet></ROW><ROW><id>9828119</id><snippet>c_uint</snippet></ROW><ROW><id>9828119</id><snippet>long</snippet></ROW><ROW><id>9828119</id><snippet>const</snippet></ROW><ROW><id>9828119</id><snippet>create_string_buffer</snippet></ROW><ROW><id>9828119</id><snippet>POINTER = ctypes.POINTER
# Define the pkstream struct
class PKSTREAM(Structure):
   _fields_ = [('pInBuffer', POINTER(c_char)),
               ('nInSize', c_int),
               ('pOutBuffer', POINTER(c_char)),
               ('nOutSize', c_int),
               ('nLitSize', c_char),
               ('nDictSizeByte', c_char),
               ('pInPos', POINTER(c_char)),
               ('pOutPos', POINTER(c_char)),
               ('nBits', c_char),
               ('nBitBuffer', c_long),
               ('pDictPos', POINTER(c_char)),
               ('nDictSize', c_int),
               ('nCurDictSize', c_int),
               ('Dict', c_char * 0x1000)]
</snippet></ROW><ROW><id>9828130</id><snippet>&gt;&gt;&gt; a = {1:[1,2,3,4],2:[5,6,7,8], 3:[9, 10, 11, 12]}
&gt;&gt;&gt; 
&gt;&gt;&gt; zip(*(a[k] for k in sorted(a)))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
</snippet></ROW><ROW><id>9828130</id><snippet>&gt;&gt;&gt; zip(*map(a.get, sorted(a)))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
</snippet></ROW><ROW><id>9828399</id><snippet>datetime.now().strftime('%M:%S.%f')[:-4]</snippet></ROW><ROW><id>9828399</id><snippet>%f</snippet></ROW><ROW><id>9828399</id><snippet>now=datetime.now()
string_i_want=('%02d:%02d.%d'%(now.minute,now.second,now.microsecond))[:-4]
</snippet></ROW><ROW><id>9828444</id><snippet>tree = lxml.etree.parse("http://www.somedomain.org/people/atom/author_name")
xmlns = {"atom": "http://www.w3.org/2005/Atom"}
listings = tree.xpath("//atom:entry", namespaces=xmlns)

listings_info = []

for listing in listings:
    listings_info.append({
        "link": listing.xpath("./atom:link/@href", namespaces=xmlns),
        "title": listing.xpath("./atom:title", namespaces=xmlns),
        "content": listing.xpath("./atom:content", namespaces=xmlns),
    })
</snippet></ROW><ROW><id>9828444</id><snippet>.xpath()</snippet></ROW><ROW><id>9829021</id><snippet>PyTypeObject</snippet></ROW><ROW><id>9829021</id><snippet>__nonzero__</snippet></ROW><ROW><id>9829021</id><snippet>nb_nonzero</snippet></ROW><ROW><id>9829021</id><snippet>PyNumberMethods</snippet></ROW><ROW><id>9829021</id><snippet>tp_as_number</snippet></ROW><ROW><id>9829021</id><snippet>PyTypeObject</snippet></ROW><ROW><id>9829080</id><snippet>myFormat = self.format_combo1.GetValue
</snippet></ROW><ROW><id>9829080</id><snippet>myFormat</snippet></ROW><ROW><id>9829080</id><snippet>GetValue()</snippet></ROW><ROW><id>9829080</id><snippet>formatType</snippet></ROW><ROW><id>9829080</id><snippet>myFormat</snippet></ROW><ROW><id>9829125</id><snippet>.append</snippet></ROW><ROW><id>9829125</id><snippet>None</snippet></ROW><ROW><id>9829125</id><snippet>+</snippet></ROW><ROW><id>9829125</id><snippet>class lin_reg(object):
     def __init__(self):
         self.indep, self.dep = self.initialise_from_user()
         self.total = self.indep + self.dep
         print self.indep, self.dep, self.total
         self.n = len(self.total)

def initialise_from_user(self):
    analysis_type = raw_input('Type of Regression(linear-n,nonlinear-nl): ')
    n = int(raw_input('Number of Independent Variables: '))

    indep = [np.matrix(raw_input('Enter the array: ')) for _ in range(self.n)]
    dep =  np.matrix(raw_input('Enter the dependent array: '))

    return indep, dep
</snippet></ROW><ROW><id>9829226</id><snippet>LANG</snippet></ROW><ROW><id>9829226</id><snippet>LC_*</snippet></ROW><ROW><id>9829226</id><snippet>locale.getdefaultlocale()</snippet></ROW><ROW><id>9829226</id><snippet>locale.getlocale()</snippet></ROW><ROW><id>9829226</id><snippet>(None, None)</snippet></ROW><ROW><id>9829226</id><snippet>locale.setlocale(locale.LC_ALL, '')</snippet></ROW><ROW><id>9829226</id><snippet>None</snippet></ROW><ROW><id>9829365</id><snippet>fh_file2.seek(0)</snippet></ROW><ROW><id>9829365</id><snippet>for</snippet></ROW><ROW><id>9829365</id><snippet>file2_lines = fh.file2.readlines()
</snippet></ROW><ROW><id>9829365</id><snippet>file2_lines</snippet></ROW><ROW><id>9829401</id><snippet>setUp</snippet></ROW><ROW><id>9829401</id><snippet>tearDown</snippet></ROW><ROW><id>9829401</id><snippet>functools.partial</snippet></ROW><ROW><id>9829401</id><snippet>def check_valid_range(value, sides):
    """Check that value is a valid dice rolling"""
    assert 0 &lt; value &lt;= sides

def check_is_int(value):
    """Check that value is an integer"""
    assert type(value) is int
</snippet></ROW><ROW><id>9829401</id><snippet>class TestRollADice:
   """roll_a_dice basic tests"""

    @staticmethod
    def func_to_test(*args, **kwargs):
        return diceroller.roll_a_dice(*args, **kwargs)

    @staticmethod    
    def check_valid_output(value, sides):
        """Check that value is the self.function is valid"""
        yield check_valid_range, value, sides
        yield check_is_int, value

    def test_3sides(self):
        """Check valid result for a 3 sides dice"""
        yield self.check_valid_output, self.func_to_test(3), 3

    def test_list_valid_sides(self):
        """Check valid result for a list of valid sides (sides &gt;= 3)"""
        sides = list(range(3, 13))
        for s in sides:
            yield self.check_valid_output, self.func_to_test(s), s

    def test_0_sides_raises_ValueError(self):
        """0 side dice raise ValueError"""
        assert_raises(ValueError, self.func_to_test, 0)

    def test_1_sides_raises_ValueError(self):
        """1 side dice raise ValueError"""
        assert_raises(ValueError, self.func_to_test, 1)

    def test_2_sides_raises_ValueError(self):
        """2 sides dice raise ValueError"""
        assert_raises(ValueError, self.func_to_test, 2)

    def test_minus1_sides_raises_ValueError(self):
        """-1 side dice raise ValueError"""
        assert_raises(ValueError, self.func_to_test, -1)
</snippet></ROW><ROW><id>9829401</id><snippet>roll_a_dice</snippet></ROW><ROW><id>9829401</id><snippet>nosetests</snippet></ROW><ROW><id>9829401</id><snippet>roll_dice</snippet></ROW><ROW><id>9829401</id><snippet>def check_list_length(self, lst, count):
    """Check that the len(lst) == count"""
    assert len(lst) == count

def check_valid_count(self, count):
    """Check count &gt; 0"""
    assert count &gt; 0

class TestRollDice:
    # ...
</snippet></ROW><ROW><id>9829401</id><snippet>TestRollADice</snippet></ROW><ROW><id>9829401</id><snippet>from functools import partial

class TestRollDice_Count1(TestRollADice):

    @staticmethod
    def func_to_test(*args, **kwargs):
        return partial(diceroller.roll_dice, count=1)(*args, **kwargs) 
</snippet></ROW><ROW><id>9829401</id><snippet>unittest</snippet></ROW><ROW><id>9829401</id><snippet>nose</snippet></ROW><ROW><id>9829739</id><snippet>from _winreg import OpenKey, QueryValueEx, HKEY_LOCAL_MACHINE

# assume delayed autostart isn't set
delayed = False

# registry key to query
key = OpenKey(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\services\wuauserv')
try:
    delayed = bool(QueryValueEx(key, 'DelayedAutoStart')[0])
except WindowsError, e:
    print 'Error querying DelayedAutoStart key: {0}'.format(e)

print delayed
</snippet></ROW><ROW><id>9829825</id><snippet>threading.Semaphore</snippet></ROW><ROW><id>9829825</id><snippet>acquire</snippet></ROW><ROW><id>9829825</id><snippet>release</snippet></ROW><ROW><id>9829825</id><snippet>release</snippet></ROW><ROW><id>9829825</id><snippet>acquire</snippet></ROW><ROW><id>9829825</id><snippet>acquire</snippet></ROW><ROW><id>9829825</id><snippet>release</snippet></ROW><ROW><id>9829825</id><snippet>threading.Condition</snippet></ROW><ROW><id>9829825</id><snippet>wait</snippet></ROW><ROW><id>9829825</id><snippet>notify</snippet></ROW><ROW><id>9829993</id><snippet>join</snippet></ROW><ROW><id>9829993</id><snippet>&gt;&gt;&gt; a = np.array([[1,2,3],[2,4,6],[-1,-2,-3]])
&gt;&gt;&gt; print '\n'.join(''.join(str(cell) for cell in row) for row in a)
123
246
-1-2-3
</snippet></ROW><ROW><id>9829999</id><snippet>get_profile_type_display</snippet></ROW><ROW><id>9829999</id><snippet>dict(profile_types)</snippet></ROW><ROW><id>9829999</id><snippet>[b for a,b in profile_types if a == test_value]</snippet></ROW><ROW><id>9829999</id><snippet>test_value</snippet></ROW><ROW><id>9830048</id><snippet>use Python::Serialise::Pickle qw( );

# Work around P::S::Pickle 0.01's extremely limiting interface.
sub pickle_dumps {
   open(my $fh, '&gt;', \my $s) or die $!;
   my $pickle = bless({ _fh =&gt; $fh }, 'Python::Serialise::Pickle');
   $pickle-&gt;dump($_[0]);
   $pickle-&gt;close();
   return $s;
}

my $data = [ "somestring.data", [ 178346464, 1234568 ] ];
my $message = pack("N/a*", pickle_dumps($data));
</snippet></ROW><ROW><id>9830260</id><snippet>$ find /tmp/locales -type f
/tmp/locales/de_DE/LC_MESSAGES/default.mo
/tmp/locales/de_DE/LC_MESSAGES/default.po
/tmp/locales/default.pot
/tmp/locales/en_IE/LC_MESSAGES/default.mo
/tmp/locales/en_IE/LC_MESSAGES/default.po

$ ~/Library/homebrew/Cellar/gettext/0.18.1.1/bin/msgfmt \
-o locales/en_IE/LC_MESSAGES/default.mo \
locales/en_IE/LC_MESSAGES/default.po

$ cat /tmp/app.py 
import gettext
t = gettext.translation('default', "/tmp/locales")
_ = t.ugettext

print _("Hello World")

$ locale
LANG="en_IE.UTF-8"
LC_COLLATE="en_IE.UTF-8"
LC_CTYPE="en_IE.UTF-8"
LC_MESSAGES="en_IE.UTF-8"
LC_MONETARY="en_IE.UTF-8"
LC_NUMERIC="en_IE.UTF-8"
LC_TIME="en_IE.UTF-8"
LC_ALL=

$ python app.py 
How's the craic?

$ LC_MESSAGES=de_DE python app.py
Guten Tag
</snippet></ROW><ROW><id>9830336</id><snippet>(?&lt;=\$)\d+$
</snippet></ROW><ROW><id>9830452</id><snippet>time.strftime("%m/%d/%Y %H:%M:%S", time.localtime(1332449493.0))
</snippet></ROW><ROW><id>9830609</id><snippet>SUM of (n!/(n-k)!) for k=1:(n-1)</snippet></ROW><ROW><id>9830759</id><snippet>url</snippet></ROW><ROW><id>9830759</id><snippet>&gt;&gt;&gt; "%s%s" % (u"", "€ &lt;-non-ascii char in a bytestring")
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 0: ordinal not in
range(128)
</snippet></ROW><ROW><id>9830759</id><snippet>&gt;&gt;&gt; "%s%s" % (u"".encode('utf-8'), "€ &lt;-non-ascii char in a bytestring")
'\xe2\x82\xac &lt;-non-ascii char in a bytestring'
</snippet></ROW><ROW><id>9830821</id><snippet>newLogFile = csv.reader(open('newLogFile.csv', 'r+'), delimiter="\t")

fmt = '%Y-%m-%d %H:%M:%S.%f'
row_count = 0

for row in newLogFile:
    time = (row[0] + " " + row[1])
    timestamp = strptime(time, fmt)
    current_value = mktime(timestamp)

    row_count+=1
    if row_count == 1:
        previous_value = current_value

    print ("%s - %s" %(current_value, previous_value))
    total_value = current_value - previous_value
    print total_value

    previous_value = current_value
</snippet></ROW><ROW><id>9831151</id><snippet>data = open('file').read()
</snippet></ROW><ROW><id>9831671</id><snippet>bin(n).count("1")</snippet></ROW><ROW><id>9831671</id><snippet>bin(n).count("1")</snippet></ROW><ROW><id>9831671</id><snippet>popcount()</snippet></ROW><ROW><id>9831671</id><snippet>bin(n).count("1")</snippet></ROW><ROW><id>9832379</id><snippet>__hash__()</snippet></ROW><ROW><id>9832379</id><snippet>__cmp__()</snippet></ROW><ROW><id>9832379</id><snippet>__eq__()</snippet></ROW><ROW><id>9832379</id><snippet>__hash__()</snippet></ROW><ROW><id>9832379</id><snippet>set</snippet></ROW><ROW><id>9832379</id><snippet>Node.__hash__()</snippet></ROW><ROW><id>9832449</id><snippet>Model.clean()
""" This method should be used to provide custom model validation, and to 
modify attributes on your model if desired. For instance, you could use it to
automatically provide a value for a field, or to do validation that requires 
access to more than a single field: """

def clean(self):
    from django.core.exceptions import ValidationError

    if self.status == 'draft' and self.pub_date is not None:
        raise ValidationError('Draft entries may not have a publication date.')
</snippet></ROW><ROW><id>9832449</id><snippet>similarity</snippet></ROW><ROW><id>9832449</id><snippet>def clean(self):
    from django.core.exceptions import ValidationError
    if self.id1 == self.id2:
        raise ValidationError('Entries must compare different objects')
</snippet></ROW><ROW><id>9832478</id><snippet>python test.py
</snippet></ROW><ROW><id>9832478</id><snippet>import test
test.chop([...]) # your array
</snippet></ROW><ROW><id>9832910</id><snippet>sudo apt-get install python-imaging</snippet></ROW><ROW><id>9832910</id><snippet>setup.py</snippet></ROW><ROW><id>9833219</id><snippet>&gt;&gt;&gt; markup = '''"&lt;tr&gt;&lt;td&gt;123&lt;/td&gt;&lt;td&gt;234&lt;/td&gt;...&lt;td&gt;697&lt;/td&gt;&lt;/tr&gt;"'''
&gt;&gt;&gt; from bs4 import BeautifulSoup as bs
&gt;&gt;&gt; soup = bs(markup)
&gt;&gt;&gt; for i in soup.find_all('td'):
...     print(i.text)
</snippet></ROW><ROW><id>9833302</id><snippet>build</snippet></ROW><ROW><id>9833302</id><snippet>dist</snippet></ROW><ROW><id>9833302</id><snippet>python setup.py sdist -d $TMP</snippet></ROW><ROW><id>9833302</id><snippet>%something%</snippet></ROW><ROW><id>9833302</id><snippet>python setup.py build -b $TMP sdist -d $TMP</snippet></ROW><ROW><id>9833302</id><snippet>python setup.py build --help</snippet></ROW><ROW><id>9833427</id><snippet>fd = open(filename,'rU')
chars = []
for line in fd:
   for c in line:
       chars.append(c)
</snippet></ROW><ROW><id>9833427</id><snippet>fd = open(filename, 'rU')
chars = []
for line in fd:
    chars.extend(line)
</snippet></ROW><ROW><id>9833427</id><snippet>chars = []
with open(filename, 'rU') as fd:
    map(chars.extend, fd)
</snippet></ROW><ROW><id>9833693</id><snippet>zip</snippet></ROW><ROW><id>9833693</id><snippet>&gt;&gt;&gt; pairs = zip(ask, timeStamp)
</snippet></ROW><ROW><id>9833758</id><snippet>list</snippet></ROW><ROW><id>9833758</id><snippet>str</snippet></ROW><ROW><id>9833758</id><snippet>for line in fd:
    chars.append(list(line.strip()))
</snippet></ROW><ROW><id>9833758</id><snippet>chars = map(list, chars)
</snippet></ROW><ROW><id>9833758</id><snippet>list</snippet></ROW><ROW><id>9833758</id><snippet>chars</snippet></ROW><ROW><id>9833758</id><snippet>list</snippet></ROW><ROW><id>9833758</id><snippet>chars = list(map(list, chars))
</snippet></ROW><ROW><id>9833758</id><snippet>chars = [list(sublist) for sublist in chars]
</snippet></ROW><ROW><id>9834153</id><snippet>Reserved.objects.all().filter(client=client_id).order_by('-check_in')
</snippet></ROW><ROW><id>9834153</id><snippet>-</snippet></ROW><ROW><id>9834153</id><snippet>check_in</snippet></ROW><ROW><id>9834190</id><snippet>Model</snippet></ROW><ROW><id>9834190</id><snippet>Model</snippet></ROW><ROW><id>9834190</id><snippet>function1</snippet></ROW><ROW><id>9834190</id><snippet># [in the plugin file]
from code import Model, instance

class MyModel(Model):
    def function1(*args, **kwargs):
        """
        Work to do by this model
        """
        # some specific model-dependent work
        return

newmodel = MyModel(a="a name", b="some other stuff")
instance.register(newmodel)
</snippet></ROW><ROW><id>9834190</id><snippet>Model</snippet></ROW><ROW><id>9834190</id><snippet>Model</snippet></ROW><ROW><id>9834190</id><snippet>function1</snippet></ROW><ROW><id>9834190</id><snippet>function1</snippet></ROW><ROW><id>9834388</id><snippet>&lt;div class="ug_photos"&gt;</snippet></ROW><ROW><id>9834388</id><snippet>//div[@class='ug_photos']//span[1]/img</snippet></ROW><ROW><id>9834398</id><snippet>import cv2
import numpy as np

img = cv2.imread('1original.jpg',0)

src = np.array([[50,50],[450,450],[70,420],[420,70]],np.float32)
dst = np.array([[0,0],[299,299],[0,299],[299,0]],np.float32)

ret = cv2.getPerspectiveTransform(src,dst)
print ret
</snippet></ROW><ROW><id>9834398</id><snippet>[[  8.36097696e-01  -4.51944700e-02  -3.95451613e+01]
 [ -4.51944700e-02   8.36097696e-01  -3.95451613e+01]
 [  6.45161290e-05   6.45161290e-05   1.00000000e+00]]
</snippet></ROW><ROW><id>9834416</id><snippet>,</snippet></ROW><ROW><id>9834416</id><snippet>city, state = line.split(', ')
state = state[:2]
return (city, state)
</snippet></ROW><ROW><id>9834416</id><snippet>[</snippet></ROW><ROW><id>9834416</id><snippet>city, state = line.split(', ')
state = state[:state.index('[')
return (city, state)
</snippet></ROW><ROW><id>9834416</id><snippet>fin = open ("miles.txt","r")
stats={}
for line in fin:
    if line[0].isalpha(): #its got a city, state, x, y and pop stat to keep
        city, state = line.split(', ')
        state = state[ :state.index('[') ]
        #get the two elements around the commas within the square brackets
        lat, lng = line[ line.index('[') +1 : line.index(']') ].split(',')
        #get the element after the last right bracket
        pop = line[line.index(']') +1 :] 
        stats.update( {(city, state): (lat, lng, pop)} )
return stats
</snippet></ROW><ROW><id>9834416</id><snippet>stats</snippet></ROW><ROW><id>9834416</id><snippet>(city, state)</snippet></ROW><ROW><id>9834416</id><snippet>value</snippet></ROW><ROW><id>9834416</id><snippet>&gt;&gt;&gt; stats.get(('Waukegan, IL'))
(4236, 8783, 67653)
&gt;&gt;&gt; stats.get(('Waukegan, IL'))[-1]
67653
</snippet></ROW><ROW><id>9834788</id><snippet>def parse_cities(fin):
    cities = {}
    distances = {}
    order = []
    index = 0
    valid_city = False
    for line in fin:
        if '[' in line:  # city line
            # .partition() will always return three strings
            citystate, left, rest = line.partition('[')
            coordinates, right, population = rest.partition(']')
            lat, comma, lng = coordinates.partition(',')

            # drop any surrounding whitespace
            citystate = citystate.strip()
            lat = lat.strip()
            lng = lng.strip()
            population = population.strip()

            # validity check
            valid_city = (
                # delimiters must exist
                left and right and comma and
                # numbers must be valid
                lat.isdigit() and lng.isdigit() and population.isdigit()
            )

            if not valid_city: continue

            order.append(citystate)
            cities[citystate] = (int(lat), int(lng), int(population))
            index = 0
        elif line and line[0].isdigit() and valid_city:  # distance line
            # citystate variable from previous iteration
            # index variable will be reset for each new city,
            #     but otherwise increase between the lines
            for dist in [int(w) for w in line.split()]:
                if index &gt;= len(order): break
                citystate2 = order[index]
                distances[citystate,citystate2] = dist
                distances[citystate2,citystate] = dist
                index += 1
    return cities, distances
</snippet></ROW><ROW><id>9834788</id><snippet>with open("miles.txt","r") as fin:
    cities, distances = parse_cities(fin)
print cities['Waycross, GA'] # (3122, 8235, 19371)
print distances['Youngstown, OH', 'Yakima, WA'] # 1513
</snippet></ROW><ROW><id>9835301</id><snippet>import regex
regex = re.compile('(\s?)#(.*?)#(\s+)')
str = 'hello #this# is #some text string# text text'
str = re.sub(regex, '\\1&lt;b&gt;\\2&lt;/b&gt;\\3', str)
</snippet></ROW><ROW><id>9835301</id><snippet>regex = re.compile('#(.*?)#')
re.sub(regex, '&lt;b&gt;\\1&lt;/b&gt;', str)
</snippet></ROW><ROW><id>9835301</id><snippet>'&lt;b&gt;text&lt;/b&gt;text text&lt;b&gt;text&lt;/b&gt;text#text text'</snippet></ROW><ROW><id>9835819</id><snippet>set(a)</snippet></ROW><ROW><id>9835819</id><snippet>a = [1,2,3,2,1,5,6,5,5,5]

import collections
print [x for x, y in collections.Counter(a).items() if y &gt; 1]

## [1, 2, 5]
</snippet></ROW><ROW><id>9835871</id><snippet>$ sed -e 's/$/=/' test.txt | base64 -d | od -t u2
0000000    49    99   149   199   249   299   349   399
0000020   449   499   549   599   649   699   749   799
0000040   849   899   949   999  1049  1099  1149  1199
0000060  1249  1299  1349  1399  1449  1499  1549  1599
0000100  1649  1699  1749  1799  1849  1899  1949  1999
0000120  2049  2099  2149  2199  2249  2299  2349  2399
0000140  2449  2499
</snippet></ROW><ROW><id>9835911</id><snippet>feed = fp.parse(url)  
</snippet></ROW><ROW><id>9835911</id><snippet>feed = fp.parse([{'feed_url': u'http://www.popgadget.net/atom.xml'}])
</snippet></ROW><ROW><id>9835911</id><snippet>feed = fp.parse(url[0]['feed_url'])
</snippet></ROW><ROW><id>9835911</id><snippet>feed = fp.parse(u'http://www.popgadget.net/atom.xml')
</snippet></ROW><ROW><id>9836045</id><snippet>re.sub(r'my \(-\)', 'your', instr)
</snippet></ROW><ROW><id>9836045</id><snippet>r</snippet></ROW><ROW><id>9836045</id><snippet>&gt;&gt;&gt; instr = 'Hello, this is my (-) instring'
&gt;&gt;&gt; instr.replace('my (-)', 'your')
'Hello, this is your instring'
</snippet></ROW><ROW><id>9836084</id><snippet>scatter</snippet></ROW><ROW><id>9836084</id><snippet>plt.scatter([1.0,2,3], [1.1,2.2,2.9], s=20, color='tomato')
</snippet></ROW><ROW><id>9836084</id><snippet>scatter</snippet></ROW><ROW><id>9836084</id><snippet>plot</snippet></ROW><ROW><id>9836725</id><snippet>from contextlib import contextmanager as ctx
@ctx
def file_or_stdout(file_name):
    if file_name is None:
        yield sys.stdout
    else:
        with open(file_name, 'w') as out_file:
            yield out_file
</snippet></ROW><ROW><id>9836725</id><snippet>with file_or_stdout(file_name) as wfile:
    do_stuff_writing_to(wfile)
</snippet></ROW><ROW><id>9836817</id><snippet>len(a) - a[-1::-1].index("hello") - 1
</snippet></ROW><ROW><id>9836817</id><snippet>def listRightIndex(alist, value):
    return len(alist) - alist[-1::-1].index(value) -1
</snippet></ROW><ROW><id>9837048</id><snippet>unsigned int    transceiverState; 
("PytransceiverState",c_ushort),

XLbusParams   busParams; 
("PybusParams",c_uint),
</snippet></ROW><ROW><id>9837362</id><snippet>from Tkinter import *


class MessageItem(Frame):
    """A message to be contained inside a scrollableContainer"""

    def __init__(self, master, message, **kwds):
        Frame.__init__(self, master, **kwds)
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.text = Label(self, text=message, anchor='w', bg='gold')
        self.text.grid(row=0, column=0, sticky='nsew')

class scrollableContainer(Frame):
    """A scrollable container that can contain a number of messages"""

    def __init__(self, master, **kwargs):
        Frame.__init__(self, master, **kwargs) #holds canvas &amp; scrollbars
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        self.canv = Canvas(self, bd=0, highlightthickness=0)
        self.hScroll = Scrollbar(self, orient='horizontal',
                                 command=self.canv.xview)
        self.hScroll.grid(row=1, column=0, sticky='we')
        self.vScroll = Scrollbar(self, orient='vertical',
                                 command=self.canv.yview)
        self.vScroll.grid(row=0, column=1, sticky='ns')
        self.canv.grid(row=0, column=0, sticky='nsew')        
        self.canv.configure(xscrollcommand=self.hScroll.set,
                            yscrollcommand=self.vScroll.set)

        self.frm = Frame(self.canv, bd=2, bg='green') #holds messages
        self.frm.grid_columnconfigure(0, weight=1)

        self.canv.create_window(0, 0, window=self.frm, anchor='nw', tags='inner')

        self.messages = []
        for i in range(20):
            m = MessageItem(self.frm, 'Something Profound', bd=2, bg='black')
            m.grid(row=i, column=0, sticky='nsew', padx=2, pady=2)
            self.messages.append(m)

        self.update_layout()        
        self.canv.bind('&lt;Configure&gt;', self.on_configure)

    def update_layout(self):
        self.frm.update_idletasks()
        self.canv.configure(scrollregion=self.canv.bbox('all'))
        self.canv.yview('moveto','1.0')
        self.size = self.frm.grid_size()

    def on_configure(self, event):
        w,h = event.width, event.height
        natural = self.frm.winfo_reqwidth()
        self.canv.itemconfigure('inner', width= w if w&gt;natural else natural)
        self.canv.configure(scrollregion=self.canv.bbox('all'))

    def add_message(self, message):
        m = MessageItem(self.frm, message, bd=2, bg='red')
        m.grid(row=self.size[1], column=0, padx=2, pady=2, sticky='we')
        self.messages.append(m)
        self.update_layout()


root = Tk()
root.grid_rowconfigure(0, weight=1)
root.grid_columnconfigure(0, weight=1)
sc = scrollableContainer(root, bd=2, bg='black')
sc.grid(row=0, column=0, sticky='nsew')

def new_message():
    test = 'Something Profane'
    sc.add_message(test)

b = Button(root, text='New Message', command=new_message)
b.grid(row=1, column=0, sticky='we')

root.mainloop()
</snippet></ROW><ROW><id>9837552</id><snippet>raise</snippet></ROW><ROW><id>9837552</id><snippet>&gt;&gt;&gt; raise ((Exception, 'ignored'), 'ignored'), 'something', None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
Exception: something
</snippet></ROW><ROW><id>9837552</id><snippet>None</snippet></ROW><ROW><id>9837552</id><snippet>&gt;&gt;&gt; raise Exception('something'), 'something', None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: instance exception may not have a separate value
</snippet></ROW><ROW><id>9837552</id><snippet>&gt;&gt;&gt; raise Exception, 'something', None, None
  File "&lt;stdin&gt;", line 1
    raise Exception, 'something', None, None
                                      ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>9837552</id><snippet>&gt;&gt;&gt; raise 'not an exception', 'something', None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: exceptions must be old-style classes or derived from BaseException, not str
</snippet></ROW><ROW><id>9837552</id><snippet>&gt;&gt;&gt; raise Exception, 'something', None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
Exception: something
</snippet></ROW><ROW><id>9837940</id><snippet>plt.figlegend( lines, labels, loc = 'lower center', ncol=5, labelspacing=0. )
</snippet></ROW><ROW><id>9837940</id><snippet>fig.legend( lines, labels, loc = (0.5, 0), ncol=5 )
</snippet></ROW><ROW><id>9838713</id><snippet>/admin/customer/userprofile/1548/password/
</snippet></ROW><ROW><id>9838713</id><snippet># put **before** include(admin.site.urls)
url(r'/admin/customer/userprofile/(?P&lt;id&gt;\d+)/password/$', 'views.redirect_to_password'),
</snippet></ROW><ROW><id>9838713</id><snippet>from django import shortcuts

def redirect_to_password(request, id):
    return shortcuts.redirect('/admin/auth/user/%s/password/' % id)
</snippet></ROW><ROW><id>9838713</id><snippet>url(r'/admin/auth/user/(?P&lt;id&gt;\d+)/$', 'views.redirect_to_customer_changeform'),
</snippet></ROW><ROW><id>9838713</id><snippet>from django import shortcuts

def redirect_to_customer_changeform(request, id):
    return shortcuts.redirect('/admin/customer/userprofile/%s/' % id)
</snippet></ROW><ROW><id>9839014</id><snippet>grid_propagate(False)</snippet></ROW><ROW><id>9839014</id><snippet>grid_propagate</snippet></ROW><ROW><id>9839014</id><snippet>wm_geometry</snippet></ROW><ROW><id>9839014</id><snippet>grid_propagate</snippet></ROW><ROW><id>9839014</id><snippet>import Tkinter as tk
import tkFont

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self._textFont = tkFont.Font(name="TextFont")
        self._textFont.configure(**tkFont.nametofont("TkDefaultFont").configure())

        toolbar = tk.Frame(self, borderwidth=0)
        container = tk.Frame(self, borderwidth=1, relief="sunken", 
                             width=600, height=600)
        container.grid_propagate(False)
        toolbar.pack(side="top", fill="x")
        container.pack(side="bottom", fill="both", expand=True)

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        text = tk.Text(container, font="TextFont")
        text.grid(row=0, column=0, sticky="nsew")

        zoomin = tk.Button(toolbar, text="+", command=self.zoom_in)
        zoomout = tk.Button(toolbar, text="-", command=self.zoom_out)
        zoomin.pack(side="left")
        zoomout.pack(side="left")

        text.insert("end", '''Press te + and - buttons to increase or decrease the font size''')

    def zoom_in(self):
        font = tkFont.nametofont("TextFont")
        size = font.actual()["size"]+2
        font.configure(size=size)

    def zoom_out(self):
        font = tkFont.nametofont("TextFont")
        size = font.actual()["size"]-2
        font.configure(size=max(size, 8))

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>9839124</id><snippet>import urllib2
server = "http://localhost:5000/"
req = urllib2.Request(server)
response = urllib2.urlopen(req)
print response.read()
</snippet></ROW><ROW><id>9839124</id><snippet>import requests
res = requests.get("http://localhost:5000/")
print res.text
</snippet></ROW><ROW><id>9839124</id><snippet>xml.etree</snippet></ROW><ROW><id>9839174</id><snippet>/categ/outdoor-events/
/categ/catered-events/ 
...
</snippet></ROW><ROW><id>9839174</id><snippet>url(r'^categ/(?P&lt;slug&gt;[-\w]+)/$','eventcateg_detail', name='eventcateg_detail'),
</snippet></ROW><ROW><id>9839174</id><snippet>from django.shortcuts import get_object_or_404, render
def eventcateg_detail(request,slug):
    return render(request, "categ.html", {
        'obj' : get_object_or_404(EventCateg, Message_slug =slug) # You should change Message_slug to just slug
    })
</snippet></ROW><ROW><id>9839174</id><snippet>&lt;h1&gt;{{ obj.name }}&lt;/h1&gt;
</snippet></ROW><ROW><id>9839174</id><snippet>catered-events</snippet></ROW><ROW><id>9839316</id><snippet>urllib.request</snippet></ROW><ROW><id>9839316</id><snippet>http.client</snippet></ROW><ROW><id>9839316</id><snippet>import urllib.request
r = urllib.request.urlopen('https://paypal.com/')
print(r.read())
</snippet></ROW><ROW><id>9839316</id><snippet>endheaders</snippet></ROW><ROW><id>9839316</id><snippet>import http.client
conn = http.client.HTTPSConnection('paypal.com', 443)
conn.putrequest('GET', '/')
conn.endheaders() # &lt;---
r = conn.getresponse()
print(r.read())
</snippet></ROW><ROW><id>9839316</id><snippet>putrequest</snippet></ROW><ROW><id>9839316</id><snippet>endheaders</snippet></ROW><ROW><id>9839316</id><snippet>request</snippet></ROW><ROW><id>9839316</id><snippet>import http.client
conn = http.client.HTTPSConnection('paypal.com', 443)
conn.request('GET', '/') # &lt;---
r = conn.getresponse()
print(r.read())
</snippet></ROW><ROW><id>9839455</id><snippet>for filename in glob.glob(*.ext):
    asset_tag = filename.split(" ")[0]
</snippet></ROW><ROW><id>9839507</id><snippet>.py</snippet></ROW><ROW><id>9839507</id><snippet>import mycode; mycode.main(gui = True)</snippet></ROW><ROW><id>9839782</id><snippet>__add__()</snippet></ROW><ROW><id>9839782</id><snippet>class MyClass(object):
    def __init__(self, x):
        self.x = x
    def __add__(self, other):
        return self.x + other
</snippet></ROW><ROW><id>9839782</id><snippet>&gt;&gt;&gt; a = MyClass(7)
&gt;&gt;&gt; a + 3
10
</snippet></ROW><ROW><id>9839782</id><snippet>3 + a</snippet></ROW><ROW><id>9839782</id><snippet>__radd__()</snippet></ROW><ROW><id>9839782</id><snippet>x</snippet></ROW><ROW><id>9839782</id><snippet>MyClass</snippet></ROW><ROW><id>9839782</id><snippet>a += 3
</snippet></ROW><ROW><id>9839782</id><snippet>__iadd__()</snippet></ROW><ROW><id>9839782</id><snippet>int</snippet></ROW><ROW><id>9840343</id><snippet>def getAllNestedElementInformation(element):
    infoDict = collections.defaultdict(dict)
    infoDict[element] = {'tagName':element.tag}
    infoDict[element].update(getItems(element))
    if element.text != None:
        if element.text.strip() != '':
            infoDict[element].update({'content':element.text})

    for nestedElement in element:
        infoDict[element]['nestedElement'] = getAllNestedElementInformation(nestedElement)  

    return infoDict 
</snippet></ROW><ROW><id>9840380</id><snippet>__init__</snippet></ROW><ROW><id>9840380</id><snippet>class Superclass(object):
    def __init__(self, arg1, arg2, arg3):
        #Initialise some variables
        #Call some methods

class Subclass(Superclass):
    def __init__(self, subclass_arg1, *args, **kwargs):
        super(Subclass, self).__init__(*args, **kwargs)
        #Call a subclass only method
</snippet></ROW><ROW><id>9840380</id><snippet>Subclass(arg1, arg2, arg3)</snippet></ROW><ROW><id>9840380</id><snippet>Subclass.__init__(&lt;the instance&gt;, arg1, arg2, arg3)</snippet></ROW><ROW><id>9840754</id><snippet>t = t + (a,)
</snippet></ROW><ROW><id>9840754</id><snippet>t</snippet></ROW><ROW><id>9840754</id><snippet>inside()</snippet></ROW><ROW><id>9840754</id><snippet>t</snippet></ROW><ROW><id>9840754</id><snippet>inside()</snippet></ROW><ROW><id>9840754</id><snippet>inside()</snippet></ROW><ROW><id>9840754</id><snippet>t</snippet></ROW><ROW><id>9840754</id><snippet>t</snippet></ROW><ROW><id>9840754</id><snippet>nonlocal</snippet></ROW><ROW><id>9840754</id><snippet>def outside3():
    t = tuple('abcd')
    def inside(a):
        nonlocal t
        print("Before - %i: %r" % (id(t), t))
        t = t + (a,)
        print("After - %i: %r\n" % (id(t), t))
    return inside
</snippet></ROW><ROW><id>9840754</id><snippet>l</snippet></ROW><ROW><id>9840754</id><snippet>t</snippet></ROW><ROW><id>9840844</id><snippet>dict</snippet></ROW><ROW><id>9840844</id><snippet>defaultdict</snippet></ROW><ROW><id>9840844</id><snippet>collections</snippet></ROW><ROW><id>9840844</id><snippet>list</snippet></ROW><ROW><id>9840844</id><snippet>list</snippet></ROW><ROW><id>9840844</id><snippet>import collections    

data = [('a', 3), ('b', 5), ('a', 7), ('c', 15), ('d', 12)]
result = collections.defaultdict(list)

for key, value in data:
    result[key].append(value)

print result
</snippet></ROW><ROW><id>9840844</id><snippet>defaultdict(&lt;type 'list'&gt;, {'a': [3, 7], 'c': [15], 'b': [5], 'd': [12]})
</snippet></ROW><ROW><id>9840844</id><snippet>print result['a']
</snippet></ROW><ROW><id>9840844</id><snippet>[3, 7]
</snippet></ROW><ROW><id>9840844</id><snippet>print result['z']
</snippet></ROW><ROW><id>9840844</id><snippet>[]
</snippet></ROW><ROW><id>9841328</id><snippet>"".join(set(foo))
</snippet></ROW><ROW><id>9841328</id><snippet>set()</snippet></ROW><ROW><id>9841328</id><snippet>"".join()</snippet></ROW><ROW><id>9841328</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>9841328</id><snippet>from collections import OrderedDict
foo = "mppmt"
print "".join(OrderedDict.fromkeys(foo))
</snippet></ROW><ROW><id>9841328</id><snippet>mpt
</snippet></ROW><ROW><id>9841388</id><snippet>def normalize(ip):
    if '/' in ip: 
        return [ip]

    ocets = [ocet.replace(' ','') for ocet in ip.split('.')]
    if len(ocets) == 4: ocets += ocets
    if len(ocets) == 7: 
        if (re.search('-',ocets[3])):
            for i,v in enumerate(ocets[3:]):
                if i == 0:
                    last = ocets[4]
                    ocets[3],ocets[4] = ocets[3].split('-')
                else:
                    if 4+i &lt; len(ocets):
                        newVal = last
                        last = ocets[4+i]
                        ocets[4+i] = newVal
                    else: 
                        ocets.append(last)

    if len(ocets) != 8: 
        return 'ERROR WITH: %s not right size %d' % ('.'.join(ocets),len(ocets))
    for i,ocet in enumerate(ocets):
        if (re.search('\*',ocet)): 
            ocets[i] = '0'
            ocets[i+4] = '255'        


        if (re.search('-',ocets[i])): 
            ocets[i],ocets[i+4] = ocets[i].split('-')[0:2]
    newIP = netaddr.iprange_to_cidrs('.'.join(ocets[0:4]) ,'.'.join(ocets[4:]))
    return newIP
</snippet></ROW><ROW><id>9841639</id><snippet>QuerySet</snippet></ROW><ROW><id>9841639</id><snippet>objects</snippet></ROW><ROW><id>9841639</id><snippet>process(object)</snippet></ROW><ROW><id>9841639</id><snippet>queryset = custom_documents.objects
print queryset.count()
</snippet></ROW><ROW><id>9841639</id><snippet>QuerySets</snippet></ROW><ROW><id>9841639</id><snippet>custom_documents.limit(100).skip(500)</snippet></ROW><ROW><id>9841910</id><snippet>plot(x[::1000])</snippet></ROW><ROW><id>9841910</id><snippet>tmp = x[:len(x)-len(x)%1000] # drop some points to make length a multiple of 1000
tmp = tmp.reshape((1000,-1)) # split into pieces of 1000 points
tmp = tmp.reshape((-1,1000)) # alternative: split into 1000 pieces
figure(); hold(True)         # plot minimum and maximum in the same figure
plot(tmp.min(axis=0))
plot(tmp.max(axis=0))
</snippet></ROW><ROW><id>9842135</id><snippet>&gt;&gt;&gt; desired_returns = [.98,.85,.9]
&gt;&gt;&gt; real_weights = [i/sum([abs(j) for j in desired_returns]) for i in desired_returns]
&gt;&gt;&gt; real_weights
[0.358974358974359, 0.31135531135531136, 0.32967032967032966]
&gt;&gt;&gt; cash_available=100
&gt;&gt;&gt; labels=['blue','red','green']
&gt;&gt;&gt; for i in range(len(desired_returns)):
...     if desired_returns[i]&gt;=0:
...          print "Buy %s$ of the stock %s" % (cash_available*real_weights[i],labels[i])
...     else:
...           print "Short sell %s$ of the stock %s" % (abs(cash_available*real_weights[i]),labels[i])
Buy 35.8974358974$ of the stock blue
Buy 31.1355311355$ of the stock red
Buy 32.967032967$ of the stock green
</snippet></ROW><ROW><id>9843145</id><snippet>&gt;&gt;&gt; re.sub(r'\b0+(?!\b)', '', '012 + 2 + 0 - 01 + 204 - 0')
'12 + 2 + 0 - 1 + 204 - 0'
</snippet></ROW><ROW><id>9843145</id><snippet>\b</snippet></ROW><ROW><id>9843145</id><snippet>0+</snippet></ROW><ROW><id>9843145</id><snippet>(?!\b)</snippet></ROW><ROW><id>9843145</id><snippet>split()</snippet></ROW><ROW><id>9843145</id><snippet>&gt;&gt;&gt; re.sub(r'\b0+(?!\b)', '', '012+2+0-01+204-0')
'12+2+0-1+204-0'
</snippet></ROW><ROW><id>9843690</id><snippet>__eq__</snippet></ROW><ROW><id>9843690</id><snippet>__eq__</snippet></ROW><ROW><id>9843690</id><snippet>__eq__</snippet></ROW><ROW><id>9843690</id><snippet>__eq__</snippet></ROW><ROW><id>9843690</id><snippet>class Trout(object):
    def __init__(self, value):
        self.value = value

    def __eq__(self, other):
        if isinstance(other, Trout):
            return self.value == other.value
        else:
            return NotImplemented
</snippet></ROW><ROW><id>9843690</id><snippet>RainbowTrout</snippet></ROW><ROW><id>9843690</id><snippet>Trout</snippet></ROW><ROW><id>9843690</id><snippet>RainbowTrout</snippet></ROW><ROW><id>9843690</id><snippet>Trout</snippet></ROW><ROW><id>9843690</id><snippet>Trout</snippet></ROW><ROW><id>9843690</id><snippet>mytrout == myrainbowtrout</snippet></ROW><ROW><id>9843690</id><snippet>mytrout.__eq__(myrainbowtrout)</snippet></ROW><ROW><id>9843690</id><snippet>myrainbowtrout.__eq__(mytrout)</snippet></ROW><ROW><id>9843714</id><snippet>doc = SimpleDocTemplate(output, pagesize=(502*inch, 502*inch) )
</snippet></ROW><ROW><id>9843820</id><snippet>import itertools as it

def bundle(lists, index):
  return ([b[index] for b in blocks] for blocks in it.izip(*lists))

print list(bundle([[[1, 2, 3],  [2, 3, 4]], 
                   [[4, 5, 6],  [5, 6, 7]], 
                   [[8, 9, 10], [9, 10, 11]]], 
                  0))
# =&gt; [[1, 4, 8], [2, 5, 9]]
</snippet></ROW><ROW><id>9844049</id><snippet>&gt;&gt;&gt; def recursive_iterate(iterable):
...     iterated_object=[]
...     for elem in iterable:
...         if hasattr(elem,"__iter__"):
...             iterated_object.append(recursive_iterate(elem))
...         else:
...             iterated_object.append(elem)
...     return iterated_object
... 
&gt;&gt;&gt; recursive_iterate([1,2,3,[4,5,6]])
[1, 2, 3, [4, 5, 6]]
&gt;&gt;&gt; recursive_iterate([1,2,3,xrange(10)])
[1, 2, 3, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
&gt;&gt;&gt; recursive_iterate([1,2,3,[4,5,6,[xrange(10)]]])
[1, 2, 3, [4, 5, 6, [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]]]
</snippet></ROW><ROW><id>9844293</id><snippet>grid_forget</snippet></ROW><ROW><id>9844293</id><snippet>grid_forget</snippet></ROW><ROW><id>9844293</id><snippet>import Tkinter as tk

base=tk.Tk()  #this is the main frame
root=tk.Frame(base)  #Really this is not necessary -- the other widgets could be attached to "base", but I've added it to demonstrate putting a frame in a frame.
root.grid(row=0,column=0)
scoreboard=tk.Frame(root)
scoreboard.grid(row=0,column=0,columnspan=2)

###
#Code to add stuff to scoreboard ...
# e.g. 
###
scorestuff=tk.Label(scoreboard,text="Here is the scoreboard")
scorestuff.grid(row=0,column=0)
#End scoreboard

#Start cards.
cards=tk.Frame(root)
cards.grid(row=1,column=0)
###
# Code to add pitcher and batter cards
###
clabel=tk.Label(cards,text="Stuff to add cards here")
clabel.grid(row=0,column=0)
#end cards

#Offense/Defense frames....
offense=tk.Frame(root)
offense.grid(row=1,column=1)
offense.isgridded=True #Dynamically add "isgridded" attribute.
offense_label=tk.Label(offense,text="Offense is coolest")
offense_label.grid(row=0,column=0)

defense=tk.Frame(root)
defense.isgridded=False
defense_label=tk.Label(defense,text="Defense is coolest")
defense_label.grid(row=0,column=0)

def switchOffenseDefense():
    print "Called"
    if(offense.isgridded):
        offense.isgridded=False
        offense.grid_forget()
        defense.isgridded=True
        defense.grid(row=1,column=1)
     else:
        defense.isgridded=False
        defense.grid_forget()
        offense.isgridded=True
        offense.grid(row=1,column=1)


switch_button=tk.Button(root,text="Switch",command=switchOffenseDefense)
switch_button.grid(row=2,column=1)

root.mainloop()
</snippet></ROW><ROW><id>9844637</id><snippet>frameMat=cv.GetMat(frameImg)
print "mat ", mat[3,1]
for x in xrange(frameMat.cols):
    for y in xrange(frameMat.rows):
        # just an example, multiply all 3 components by 0.5
        frameMat[y, x] = tuple(c*0.5 for c in frameMat[y, x])
cv.ShowImage( "My Video Window",  frameMat )
</snippet></ROW><ROW><id>9844637</id><snippet>cv.ConvertScale(frameImg, frameImg, scale=0.5)
cv.ShowImage( "My Video Window",  frameImg )
</snippet></ROW><ROW><id>9844910</id><snippet>-lfoo</snippet></ROW><ROW><id>9844910</id><snippet>gcc -shared -I/usr/include/python2.7 \
     `pkg-config --cflags libatasmart` \
     atabind.c \
     `pkg-config --libs libatasmart` \
     -o pySmart.so -fPIC
</snippet></ROW><ROW><id>9845096</id><snippet>Client.metadata[msg_id].stdout</snippet></ROW><ROW><id>9845096</id><snippet>Client.spin()</snippet></ROW><ROW><id>9845096</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>9845430</id><snippet>zip()</snippet></ROW><ROW><id>9845430</id><snippet>any()</snippet></ROW><ROW><id>9845430</id><snippet>&gt;&gt;&gt; list_1 = [{'unique_id':'001', 'key1':'AAA', 'key2':'BBB', 'key3':'EEE'}, 
              {'unique_id':'002', 'key1':'AAA', 'key2':'CCC', 'key3':'FFF'}]
&gt;&gt;&gt; list_2 = [{'unique_id':'001', 'key1':'AAA', 'key2':'DDD', 'key3':'EEE'},
              {'unique_id':'002', 'key1':'AAA', 'key2':'CCC', 'key3':'FFF'}]
&gt;&gt;&gt; pairs = zip(list_1, list_2)
&gt;&gt;&gt; any(x != y for x, y in pairs)
True
</snippet></ROW><ROW><id>9845430</id><snippet>&gt;&gt;&gt; [(x, y) for x, y in pairs if x != y]
[({'key3': 'EEE', 'key2': 'BBB', 'key1': 'AAA', 'unique_id': '001'}, {'key3': 'EEE', 'key2': 'DDD', 'key1': 'AAA', 'unique_id': '001'})]
</snippet></ROW><ROW><id>9845430</id><snippet>&gt;&gt;&gt; [[k for k in x if x[k] != y[k]] for x, y in pairs if x != y]
[['key2']]
</snippet></ROW><ROW><id>9845430</id><snippet>&gt;&gt;&gt; [[(k, x[k], y[k]) for k in x if x[k] != y[k]] for x, y in pairs if x != y]
[[('key2', 'BBB', 'DDD')]]
</snippet></ROW><ROW><id>9845430</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; list_1, list_2 = [sorted(l, key=itemgetter('unique_id')) 
                      for l in (list_1, list_2)]
</snippet></ROW><ROW><id>9845434</id><snippet>optparse</snippet></ROW><ROW><id>9845434</id><snippet>argparse</snippet></ROW><ROW><id>9845434</id><snippet>optparse</snippet></ROW><ROW><id>9845434</id><snippet>(options, args)</snippet></ROW><ROW><id>9845434</id><snippet>(options, args) = parser.parse_args()
</snippet></ROW><ROW><id>9845434</id><snippet>if __name__ == '__main__':
    if options.list:
        list_my_repos()
</snippet></ROW><ROW><id>9845434</id><snippet>sys.argv</snippet></ROW><ROW><id>9845434</id><snippet>import sys

if __name__ == '__main__':
    if sys.argv[1] == '-l':
        list_my_repos()
</snippet></ROW><ROW><id>9845434</id><snippet>optparse</snippet></ROW><ROW><id>9845434</id><snippet>argparse</snippet></ROW><ROW><id>9845528</id><snippet>count</snippet></ROW><ROW><id>9845528</id><snippet>filename = raw_input()
datafile=open(filename, 'r')
data = datafile.read()
datafile.close() # Don't forget to close the file!
counts = {} # make sure counts is an empty dictionary
data = data.lower() # convert data to lowercase
for k in range(97, 123):  # letters a to z are ASCII codes 97 to 122
    character = chr(k) # get the ASCII character from the number
    counts[character] = data.count(character)
</snippet></ROW><ROW><id>9845528</id><snippet>counts</snippet></ROW><ROW><id>9845528</id><snippet>counts['a']</snippet></ROW><ROW><id>9845528</id><snippet>a</snippet></ROW><ROW><id>9845528</id><snippet>counts.items()</snippet></ROW><ROW><id>9845557</id><snippet>map(max, a, b)
[max(x, y) for x, y in zip(a, b)]
</snippet></ROW><ROW><id>9845588</id><snippet>crontab</snippet></ROW><ROW><id>9845588</id><snippet>/etc/rc.local</snippet></ROW><ROW><id>9845731</id><snippet>writer</snippet></ROW><ROW><id>9845731</id><snippet>lineterminator</snippet></ROW><ROW><id>9845731</id><snippet>writer = csv.writer(f, lineterminator="\n")
</snippet></ROW><ROW><id>9845956</id><snippet>TestCase.assertFailure</snippet></ROW><ROW><id>9845956</id><snippet>yield self.assertFailure(self.o.failure(), ConnectionRefusedError)
</snippet></ROW><ROW><id>9845956</id><snippet>TestCase.failureResultOf</snippet></ROW><ROW><id>9845956</id><snippet>self.failureResultOf(self.o.failure()).trap(ConnectionRefusedError)
</snippet></ROW><ROW><id>9845956</id><snippet>self.failureResultOf(self.o.failure(), ConnectionRefusedError)
</snippet></ROW><ROW><id>9845956</id><snippet>Deferred</snippet></ROW><ROW><id>9845956</id><snippet>Deferred</snippet></ROW><ROW><id>9845956</id><snippet>failureResultOf</snippet></ROW><ROW><id>9845956</id><snippet>Deferred</snippet></ROW><ROW><id>9845956</id><snippet>assertFailure</snippet></ROW><ROW><id>9846003</id><snippet>objects = Model.objects.filter(id__in=object_ids).order_by('-timestamp')
</snippet></ROW><ROW><id>9846003</id><snippet>order_by</snippet></ROW><ROW><id>9846003</id><snippet>timestamp</snippet></ROW><ROW><id>9846224</id><snippet>def rfind_imp(s, t):
    fpos = -1
    while True:
         pos = s.find(t, fpos + 1)
         if pos == -1:
            return fpos
         fpos = pos
</snippet></ROW><ROW><id>9846224</id><snippet>t</snippet></ROW><ROW><id>9846224</id><snippet>def rfind2(s, t):
    pos = s[::-1].find(t[::-1])
    if pos == -1:
        return pos
    return len(s) - pos - len(t)
</snippet></ROW><ROW><id>9846354</id><snippet>\xd0</snippet></ROW><ROW><id>9846354</id><snippet>u'\xd0'</snippet></ROW><ROW><id>9846354</id><snippet>u'\u00d0'</snippet></ROW><ROW><id>9846354</id><snippet>repr</snippet></ROW><ROW><id>9846354</id><snippet>\x</snippet></ROW><ROW><id>9846354</id><snippet>\xd0</snippet></ROW><ROW><id>9846354</id><snippet>ord</snippet></ROW><ROW><id>9846448</id><snippet>python setup.py build_ext</snippet></ROW><ROW><id>9846585</id><snippet>tree</snippet></ROW><ROW><id>9846585</id><snippet>tree[otu]</snippet></ROW><ROW><id>9846585</id><snippet>tree[otu][0]</snippet></ROW><ROW><id>9846585</id><snippet>None</snippet></ROW><ROW><id>9846585</id><snippet>tree[otu]</snippet></ROW><ROW><id>9846585</id><snippet>tree[otu][0]</snippet></ROW><ROW><id>9846585</id><snippet>def Ancestors (otu,tree):
    try:
        tree[otu][0][0]
    except TypeError:
        print otu, tre[otu]
        raise
    #etc...
</snippet></ROW><ROW><id>9846712</id><snippet>python setup.py install
</snippet></ROW><ROW><id>9846733</id><snippet>mystring.replace('%', '%%')</snippet></ROW><ROW><id>9846733</id><snippet>%%</snippet></ROW><ROW><id>9846733</id><snippet>%</snippet></ROW><ROW><id>9846881</id><snippet>DataFrame.combine_first</snippet></ROW><ROW><id>9846881</id><snippet>combine_first</snippet></ROW><ROW><id>9847110</id><snippet>import re

str = 'A = (x+2.)*(y+3.)-1'
print re.sub(r'(\d+)\.?',r'\1.0e0',str)
</snippet></ROW><ROW><id>9847110</id><snippet>A = (x+2.0e0)*(y+3.0e0)-1.0e0
</snippet></ROW><ROW><id>9847110</id><snippet>(...)</snippet></ROW><ROW><id>9847110</id><snippet>\d</snippet></ROW><ROW><id>9847110</id><snippet>+</snippet></ROW><ROW><id>9847110</id><snippet>{1,}</snippet></ROW><ROW><id>9847110</id><snippet>\.?</snippet></ROW><ROW><id>9847110</id><snippet>dot</snippet></ROW><ROW><id>9847110</id><snippet>?</snippet></ROW><ROW><id>9847110</id><snippet>{0,1}</snippet></ROW><ROW><id>9847110</id><snippet>\1</snippet></ROW><ROW><id>9847269</id><snippet>weekday()</snippet></ROW><ROW><id>9847269</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
&gt;&gt;&gt; datetime.datetime.today().weekday()
4
</snippet></ROW><ROW><id>9847428</id><snippet># shuffle the existing IDs so the assignment of the new IDs is random
a = []
sql = "SELECT ID FROM Clients"

for row in cursor.execute(sql):
    a.append(row.ID)
</snippet></ROW><ROW><id>9847428</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>9847428</id><snippet>print "\nIDs appended to list...\n"

random.shuffle(a)

print "\nlist shuffled\n"
</snippet></ROW><ROW><id>9847428</id><snippet>SELECT ID FROM Clients ORDER BY RAND()</snippet></ROW><ROW><id>9847428</id><snippet>for i in a:
    idList[i] = startPt
    startPt += increment
</snippet></ROW><ROW><id>9847428</id><snippet># append new IDs to another table in the database
for j, k in idList.iteritems():
    sql = "INSERT INTO newID values ('%s', '%s')" %(j,k)
    cursor.execute(sql)
</snippet></ROW><ROW><id>9847428</id><snippet> cursor.execute("INSERT INTO newID values(?,?)", (j, k))
</snippet></ROW><ROW><id>9847428</id><snippet>    conn.commit()
</snippet></ROW><ROW><id>9847643</id><snippet>families[i][j]</snippet></ROW><ROW><id>9847643</id><snippet>j</snippet></ROW><ROW><id>9847643</id><snippet>&gt;&gt;&gt; [ [ j for j in families[i] if i !=j ] for i in range(len(families)) ]
[[1, 2], [0, 2, 3], [0, 1, 3, 4], [1, 2, 4, 5], [2, 3, 5, 6]]
</snippet></ROW><ROW><id>9847643</id><snippet>enumerate</snippet></ROW><ROW><id>9847643</id><snippet>&gt;&gt;&gt; [[f for f in family if f != i] for i, family in enumerate(families)]
[[1, 2], [0, 2, 3], [0, 1, 3, 4], [1, 2, 4, 5], [2, 3, 5, 6]]
</snippet></ROW><ROW><id>9847643</id><snippet>remove</snippet></ROW><ROW><id>9847643</id><snippet>&gt;&gt;&gt; for i, family in enumerate(families): family.remove(i)
</snippet></ROW><ROW><id>9847831</id><snippet>system</snippet></ROW><ROW><id>9847831</id><snippet>chdir</snippet></ROW><ROW><id>9847831</id><snippet>os.system("open -a path/blender.app Import_mhx.blend")
</snippet></ROW><ROW><id>9847831</id><snippet>subprocess.check_call(["open", "-a", os.path.join(path, "blender.app"),
                       "Import_mhx.blend"])
</snippet></ROW><ROW><id>9848091</id><snippet>finditer</snippet></ROW><ROW><id>9848091</id><snippet>findall</snippet></ROW><ROW><id>9848091</id><snippet>MatchObject</snippet></ROW><ROW><id>9848091</id><snippet>&gt;&gt;&gt; regex = re.compile('(?P&lt;hel&gt;hell[oa])\s*(?P&lt;wrl&gt;w[oa]rld)')
&gt;&gt;&gt; line = "hello world hella warld"
&gt;&gt;&gt; [m.groupdict() for m in regex.finditer(line)]
[{'hel': 'hello', 'wrl': 'world'}, {'hel': 'hella', 'wrl': 'warld'}]
</snippet></ROW><ROW><id>9848158</id><snippet>NO_OF_HRS = (('1','1')
             ('2','2'))

class Volunteer(models.Model):
    # ...
    duration = models.CharField(choices=NO_OF_HRS, max_length=1)
</snippet></ROW><ROW><id>9848158</id><snippet>from path.to.models import NO_OF_HRS

class VolunteerForm(forms.Form):
    # ...
    duration = forms.CharField(widget=forms.Select(choices=NO_OF_HRS), max_length=1)
</snippet></ROW><ROW><id>9848158</id><snippet>from path.to.models Volunteer

class VolunteerForm(forms.ModelForm):
    class Meta:
        model = Volunteer
</snippet></ROW><ROW><id>9848348</id><snippet>easy_install xlwt
</snippet></ROW><ROW><id>9848348</id><snippet>pip install xlwt
</snippet></ROW><ROW><id>9848348</id><snippet>python setup.py install
</snippet></ROW><ROW><id>9848348</id><snippet>python ez_setup.py</snippet></ROW><ROW><id>9848348</id><snippet>easy_install pip</snippet></ROW><ROW><id>9848568</id><snippet>var editButton = $('#edit');
editButton.on('click', function(){
   $('textarea').removeAttr('readonly');
});​
</snippet></ROW><ROW><id>9848598</id><snippet>echo -e "aba\ncfg!ഡ.#g" | perl -C7 -ne 'for(split(//)){if ($_ !~ /[!@#.]/) { print $_."\n"}}' | sort | uniq | wc -l
</snippet></ROW><ROW><id>9848598</id><snippet>7</snippet></ROW><ROW><id>9848598</id><snippet>echo -e "aba\ncfg!ഡ.#g" | perl -C7 -ne 'for(split(//)){if ($_ !~ /[!@#.\n]/) { print $_."\n"}}' | sort | uniq | wc -l
</snippet></ROW><ROW><id>9848598</id><snippet>6</snippet></ROW><ROW><id>9848648</id><snippet>try</snippet></ROW><ROW><id>9848648</id><snippet>aux</snippet></ROW><ROW><id>9848648</id><snippet>True</snippet></ROW><ROW><id>9848648</id><snippet>n</snippet></ROW><ROW><id>9848648</id><snippet>for</snippet></ROW><ROW><id>9848648</id><snippet>while</snippet></ROW><ROW><id>9848648</id><snippet>break</snippet></ROW><ROW><id>9848648</id><snippet>for row, data in enumerate(fileData):
    if conditionToAbortTheLoop:
        break
</snippet></ROW><ROW><id>9848648</id><snippet>for row, data in enumerate(fileData):
    if row &gt; row_elements: # below `top_row`
        try:
            int(data[0])
        except ValueError:
            break # not an int value, `bottom_row` found

        # if we get here, we’re between the top- and bottom row.
        elements.append(data)
</snippet></ROW><ROW><id>9848713</id><snippet>.pop()</snippet></ROW><ROW><id>9848713</id><snippet>&gt;&gt;&gt; foo = set()
&gt;&gt;&gt; foo.add(-3)
&gt;&gt;&gt; foo.add(-1)
&gt;&gt;&gt; foo.add(2)
&gt;&gt;&gt; foo.pop()
2
&gt;&gt;&gt; foo.pop()
-3
</snippet></ROW><ROW><id>9848731</id><snippet>?</snippet></ROW><ROW><id>9848731</id><snippet>%s</snippet></ROW><ROW><id>9848731</id><snippet>cursor.execute("""UPDATE tasks SET task_owner = ? ,task_remaining_hours = ?,task_impediments = ?,task_notes = ? WHERE task_id= ? """,
  (new_task_owner,new_task_remaining_hours,new_task_impediments,new_task_notes,task_id))
</snippet></ROW><ROW><id>9848847</id><snippet>urllib.urlopen()</snippet></ROW><ROW><id>9848847</id><snippet>urllib2.install_opener</snippet></ROW><ROW><id>9848847</id><snippet>urlopen()</snippet></ROW><ROW><id>9848893</id><snippet>from collections import defaultdict

nd = defaultdict(list)

for item in nodes:
    nd[tuple(item[1:])].append(item[0])

coincident_nodes = [v for k,v in nd.items() if len(v)&gt;1]
</snippet></ROW><ROW><id>9849013</id><snippet>@app.route("/uploads", methods=["GET", "POST"])
def upload_handler():
    # Handle the upload here
    pass
</snippet></ROW><ROW><id>9849160</id><snippet>...
for code in code:
    result = pj.checkCode(code[0])
    query = """UPDATE pjStores SET `%s` = %%s WHERE `code` = %%s""" % store[0]
    cursor.execute(query, (result, code[0]))
</snippet></ROW><ROW><id>9849223</id><snippet>iter(mydict)</snippet></ROW><ROW><id>9849223</id><snippet>mydict.__iter__()</snippet></ROW><ROW><id>9849223</id><snippet>iter(mydict)</snippet></ROW><ROW><id>9849223</id><snippet>mydict.iterkeys()</snippet></ROW><ROW><id>9849223</id><snippet>itemgetter(1)</snippet></ROW><ROW><id>9849223</id><snippet>sorted(mydict.values(), reverse=True)
</snippet></ROW><ROW><id>9849223</id><snippet>sorted(mydict.iteritems(), key=itemgetter(1), reverse=True)
</snippet></ROW><ROW><id>9849349</id><snippet>findall()</snippet></ROW><ROW><id>9849349</id><snippet>finditer()</snippet></ROW><ROW><id>9849349</id><snippet>findall()</snippet></ROW><ROW><id>9849349</id><snippet>finditer()</snippet></ROW><ROW><id>9849349</id><snippet>MatchGroup</snippet></ROW><ROW><id>9849349</id><snippet>group()</snippet></ROW><ROW><id>9849349</id><snippet>re</snippet></ROW><ROW><id>9849534</id><snippet>self.c.setopt(self.c.COOKIEFILE, 'cookie.txt')
self.c.setopt(self.c.COOKIEJAR, 'cookie.txt')
</snippet></ROW><ROW><id>9849759</id><snippet>def find_matches():
    """
        Basic version: reads urls, but does not consider the semantic information of
        HTML header, body, etc. while computing duplicates.
    """

    from urllib2 import urlopen
    import hashlib

    urls = [ 'http://www.google.com', 'http://www.google.com/search']

    d = {}
    url_contents = {}
    matches = []
    for url in urls:
        c = urlopen(url)
        url_contents[url] = []
        while 1:
            r = c.read(4096)
            if not r: break
            md5 = hashlib.md5(r).hexdigest()
            url_contents[url].append(md5)
            if md5 in d:
                url2 = d[md5]
                matches.append((md5, url, url2))
            else:
                d[md5] = []
            d[md5].append(url)
    #print url_contents
    print matches

if __name__ == '__main__':
    find_matches()
</snippet></ROW><ROW><id>9849759</id><snippet>def find_matches():
    """
        Some consideration of the HTML header, body, etc. while computing duplicates.
    """

    from urllib2 import urlopen
    import hashlib
    from BeautifulSoup import BeautifulSoup
    import pprint

    urls = [ 'http://www.google.com', 'http://www.google.com/search'] # assuming all distinct urls

    def txt_md5(txt):
        return hashlib.md5(txt).hexdigest()

    MAX_FILE_SIZE = 1024*1024*1024 
    d = {}
    url_contents = {}
    matches = []
    for url in urls:
        try:
            c = urlopen(url)
            url_contents[url] = []
            r = c.read(MAX_FILE_SIZE)
            soup = BeautifulSoup(r)
            header = soup.find('head').text
            body = soup.find('body').text 
            # More fine-grained content options 
            # like h1, h2, p, etc., can be included.
            # Common CSS tags like page, content, etc.
            # can also be included.
            for h in [header, body]:
                print h
                md5 = txt_md5(h)
                url_contents[url].append((md5, h))
                if md5 in d:
                    url2 = d[md5]
                    matches.append((md5, url, url2))
                else:
                    d[md5] = []
                d[md5].append(url)
        except Exception as e:
            print "Exception", e
    print '---------------'
    #pprint.pprint(url_contents)
    print matches

if __name__ == '__main__':
    find_matches()
</snippet></ROW><ROW><id>9849759</id><snippet>webhp</snippet></ROW><ROW><id>9849760</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; for n in count():
    s = "&lt;a&gt;" + " " * n + "&lt;/a&gt;"
    nchildren = len(BeautifulSoup(s, 'xml'))
    if nchildren != 1: # broken
       print(len(s)) 
       break

1092
</snippet></ROW><ROW><id>9849761</id><snippet>str</snippet></ROW><ROW><id>9849761</id><snippet>def func(mystr):
  b = {'a':'b','c':'d','e':'f'}
  return [b[k] for k in mystr if k in b]
</snippet></ROW><ROW><id>9849761</id><snippet>def func(mystr):
  a = []
  b = {'a':'b','c':'d','e':'f'}
  for i in mystr:
    if i in b:           # i in b works the same as i in b.keys()
      a.append(b[i])     # look up the key(i) in the dictionary(b) here
  return a
</snippet></ROW><ROW><id>9850047</id><snippet>import threading

def processCommands():
    while True:
        #wait and process commands

def readSerial():
    while True:
        #read serial

serialThread = threading.Thread(target=readSerial)
commandThread = threading.Thread(target=processCommands)
serialThread.start()
commandThread.start()

#Wait for the command thread to exit,
#otherwise the programs would immediately exit
commandThread.join()
</snippet></ROW><ROW><id>9850207</id><snippet>String str = "aaaa";
Pattern p1= Pattern.compile("(aa)");
Matcher matcher = p.matcher(str);
int start = -1;
while(matcher.find(start + 1)) {
    start = matcher.start(0);
    System.out.println("Found: " + start);
}
</snippet></ROW><ROW><id>9850207</id><snippet>Found: 0
Found: 1
Found: 2
</snippet></ROW><ROW><id>9850282</id><snippet>&gt;&gt;&gt; from functools import wraps
&gt;&gt;&gt; def flip(func):
        'Create a new function from the original with the arguments reversed'
        @wraps(func)
        def newfunc(*args):
            return func(*args[::-1])
        return newfunc

&gt;&gt;&gt; def divide(a, b):
        return a / b

&gt;&gt;&gt; new_divide = flip(divide)
&gt;&gt;&gt; new_divide(30.0, 10.0)
0.3333333333333333
</snippet></ROW><ROW><id>9850306</id><snippet>EMACS=t</snippet></ROW><ROW><id>9850306</id><snippet>import os
for e in os.environ:
    if 'EMACS' in e:
        print e, os.environ[e]
</snippet></ROW><ROW><id>9850366</id><snippet>'#'</snippet></ROW><ROW><id>9850366</id><snippet>red</snippet></ROW><ROW><id>9850366</id><snippet>'.'</snippet></ROW><ROW><id>9850366</id><snippet>red</snippet></ROW><ROW><id>9850366</id><snippet>red</snippet></ROW><ROW><id>9850366</id><snippet>'.'</snippet></ROW><ROW><id>9850366</id><snippet>prev = None
it = iter(data)
for point in it:
    if point == 'red':
       print '#',
    else:
       print '.',
       if prev == 'red': # encounted ['red', 'blank']
          break
    prev = point

for point in it:
    print '.',
print
</snippet></ROW><ROW><id>9850366</id><snippet>blank blank red red blank red blank red red
. . # # . . . . .
</snippet></ROW><ROW><id>9850618</id><snippet>  a = (GLfloat * 16)()
  mvm = glGetFloatv(GL_MODELVIEW_MATRIX, a)
  print list(a)
</snippet></ROW><ROW><id>9850665</id><snippet>urlpatterns = patterns('',
     url(r'^admin/', include(admin.site.urls)),
     url(r'^', 'blog.views.index'),
)
</snippet></ROW><ROW><id>9850665</id><snippet>url()</snippet></ROW><ROW><id>9850665</id><snippet>/admin</snippet></ROW><ROW><id>9850665</id><snippet>index</snippet></ROW><ROW><id>9850665</id><snippet>url(r'^')</snippet></ROW><ROW><id>9850665</id><snippet>url(r'^$')</snippet></ROW><ROW><id>9850665</id><snippet>http://www.example.com/
http://www.example.com/admin/
http://www.example.com/index/
</snippet></ROW><ROW><id>9850665</id><snippet>http://www.example.com/myapp/
http://www.example.com/myapp/admin/
http://www.example.com/myapp/index/
</snippet></ROW><ROW><id>9850665</id><snippet>urlpatterns = patterns('',
     url(r'^blog/admin/', include(admin.site.urls)),
     url(r'^blog/$', 'blog.views.index'),
)
</snippet></ROW><ROW><id>9850963</id><snippet>re.match</snippet></ROW><ROW><id>9850963</id><snippet>'.*/\?'</snippet></ROW><ROW><id>9850963</id><snippet>re.search</snippet></ROW><ROW><id>9851114</id><snippet>plot()</snippet></ROW><ROW><id>9851114</id><snippet>[&lt;matplotlib.lines.Line2D object at 0x38c9910&gt;]</snippet></ROW><ROW><id>9851114</id><snippet>import matplotlib.pyplot as plt, numpy as np
...
line2d = plt.plot(xnew,heights_smooth)
xvalues = line2d[0].get_xdata()
yvalues = line2d[0].get_ydata()
</snippet></ROW><ROW><id>9851114</id><snippet>idx = np.where(xvalues==xvalues[-2]) # this is 179.3979933110368
# idx is a tuple of array(s) containing index where value was found
# in this case -&gt; (array([298]),)
</snippet></ROW><ROW><id>9851114</id><snippet>yvalues[idx]
# -&gt; array([ 315.53469])
</snippet></ROW><ROW><id>9851114</id><snippet>get_xydata()</snippet></ROW><ROW><id>9851114</id><snippet>&gt;&gt;&gt; xy = line2d[0].get_xydata()
&gt;&gt;&gt; xy[-2]
array([ 179.39799331,  315.53469   ])
</snippet></ROW><ROW><id>9851122</id><snippet>os.path.splitext</snippet></ROW><ROW><id>9851122</id><snippet>def skip_check(path):
    return os.path.splitext(path)[1] in extensions
</snippet></ROW><ROW><id>9851122</id><snippet>re.escape</snippet></ROW><ROW><id>9851122</id><snippet>extension</snippet></ROW><ROW><id>9851122</id><snippet>extensions</snippet></ROW><ROW><id>9851291</id><snippet>from modname import *</snippet></ROW><ROW><id>9851291</id><snippet>import</snippet></ROW><ROW><id>9851821</id><snippet>[0]*k
</snippet></ROW><ROW><id>9851821</id><snippet>k</snippet></ROW><ROW><id>9851821</id><snippet>0</snippet></ROW><ROW><id>9851821</id><snippet>"foo"*2
</snippet></ROW><ROW><id>9851821</id><snippet>for i, value in enumerate(values):
    pass
</snippet></ROW><ROW><id>9851821</id><snippet>for</snippet></ROW><ROW><id>9851821</id><snippet>foreach</snippet></ROW><ROW><id>9851821</id><snippet>i</snippet></ROW><ROW><id>9851821</id><snippet>0</snippet></ROW><ROW><id>9851821</id><snippet>1</snippet></ROW><ROW><id>9851821</id><snippet>2</snippet></ROW><ROW><id>9851821</id><snippet>for i in [0,1,2]:
    pass
</snippet></ROW><ROW><id>9851821</id><snippet>i, j = (42, 69, )
</snippet></ROW><ROW><id>9851821</id><snippet>i</snippet></ROW><ROW><id>9851821</id><snippet>42</snippet></ROW><ROW><id>9851821</id><snippet>j</snippet></ROW><ROW><id>9851821</id><snippet>69</snippet></ROW><ROW><id>9851821</id><snippet>enumerate</snippet></ROW><ROW><id>9851821</id><snippet>[1, "fish", 2, "fish", "red", "fish", "blue", "fish"]</snippet></ROW><ROW><id>9851821</id><snippet>{'one': 2, 2: 'three'}</snippet></ROW><ROW><id>9851821</id><snippet>(one, [1,2], three, )</snippet></ROW><ROW><id>9851821</id><snippet>{"one", 3, (1,2)}</snippet></ROW><ROW><id>9851821</id><snippet>collections</snippet></ROW><ROW><id>9851821</id><snippet>array</snippet></ROW><ROW><id>9851821</id><snippet>struct</snippet></ROW><ROW><id>9851996</id><snippet>class AjaxTabularInline(admin.TabularInline):
    def get_formset(self, request, obj=None, **kwargs):
        autoselect_fields_check_can_add(self.form, self.model, request.user)
        return super(AddressInline, self).get_formset(request, obj, **kwargs)
</snippet></ROW><ROW><id>9852301</id><snippet>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-t', nargs='+', type=str)

# If no argument is given to parse_args() then the argument strings of
# the program are taken from sys.argv. And be sure not to pass in
# sys.argv[0] if you specify them instead supply sys.argv[1:].
args = parser.parse_args()

print(args.t)
</snippet></ROW><ROW><id>9852301</id><snippet>['00:00:30', '00:10:00']
</snippet></ROW><ROW><id>9852834</id><snippet>def makeConnection(self, parent):
    parent.server = parent.hostlist.pop().strip()
    parent.wmiConnection = wmi.WMI(computer=parent.server, user=parent.username, password=parent.password)
</snippet></ROW><ROW><id>9852914</id><snippet>while Found==False and Current!=Max:
</snippet></ROW><ROW><id>9852914</id><snippet>in</snippet></ROW><ROW><id>9852914</id><snippet>names = ['Ben', 'Thor', 'Zoe', 'Katie']
player_name = input('What player are you looking for?')

if player_name in names:
    print('Yes, they have a top score')
else:
    print('No, they do not have a top score')
</snippet></ROW><ROW><id>9852914</id><snippet>while</snippet></ROW><ROW><id>9853186</id><snippet># Globals are defined globally, not in class
glob1 = 0

class C1:
    # Class attribute
    class_attrib = None  # This is rarely used and tricky

    def __init__(self):
        # Instance attribute
        self.pt1 = 0  # That's the standard way to define attribute

    def other_method(self):
        # Use of a global in function
        global glob1
        glob1 = 1

        # Use of a member
        self.pt1 = 1

# Use of a class attribute
C1.class_attrib = 1
</snippet></ROW><ROW><id>9853186</id><snippet>class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "test", size=(500,400))
        self.pt1 = self.pt2 = 0
        ...

    def onDown(self, event):          
        self.pt1 = event.GetPosition() # firstPosition tuple

    ...
</snippet></ROW><ROW><id>9853204</id><snippet>\</snippet></ROW><ROW><id>9853204</id><snippet>r</snippet></ROW><ROW><id>9853204</id><snippet>m = re.match(r"&lt;(.*)&gt;phone&lt;/\1&gt;", "&lt;bar&gt;phone&lt;/bar&gt;")
</snippet></ROW><ROW><id>9853270</id><snippet>&gt;&gt;&gt; table_name = "table%s" % hashlib.sha1('blurp').hexdigest()
&gt;&gt;&gt; print(table_name)
table5187399948bdcff4fa10220cd8509257567c6b5a
</snippet></ROW><ROW><id>9853288</id><snippet>import nltk
filename=open("X:\MyFile.txt","r")
type(raw) #str
tokens = '' 
for line in filename.readlines():
    tokens+=",".join(nltk.word_tokenize(line))
</snippet></ROW><ROW><id>9853288</id><snippet>import nltk
filename=open("X:\MyFile.txt","r")
type(raw) #str
tokens = []
for line in filename.readlines():
    tokens+=nltk.word_tokenize(line)
</snippet></ROW><ROW><id>9853308</id><snippet>my_list = [(a, b), (c, d)]</snippet></ROW><ROW><id>9853308</id><snippet>[(1, 2), (3, 4)]</snippet></ROW><ROW><id>9853321</id><snippet>co_consts</snippet></ROW><ROW><id>9853321</id><snippet>localhost-2:coding $ cat mod1.py
def my_generator():
    """this is my generator"""
    for x in (1,2,3):
        yield x

it = my_generator()

localhost-2:coding $ python
Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import mod1
&gt;&gt;&gt; mod1.it.__doc__
&gt;&gt;&gt; mod1.it.gi_code.co_consts[0]
'this is my generator'
&gt;&gt;&gt; z = mod1.my_generator()
&gt;&gt;&gt; z.__doc__
&gt;&gt;&gt; z.gi_code.co_consts[0]
'this is my generator'
</snippet></ROW><ROW><id>9853321</id><snippet>&gt;&gt;&gt; import mod1
&gt;&gt;&gt; z = mod1.my_generator()
&gt;&gt;&gt; z.__doc__
&gt;&gt;&gt; z.gi_frame.f_globals[z.__name__]
&lt;function my_generator at 0x1004b7cf8&gt;
&gt;&gt;&gt; z.gi_frame.f_globals[z.__name__] is mod1.my_generator
True
&gt;&gt;&gt; z.gi_frame.f_globals[z.__name__].__doc__
'this is my generator'
</snippet></ROW><ROW><id>9853368</id><snippet>count = { 'a': 120, 'b': 120, 'c': 100 }

highest = max(count.values())

print [k for k,v in count.items() if v == highest]
</snippet></ROW><ROW><id>9853372</id><snippet>python setup.py install</snippet></ROW><ROW><id>9853372</id><snippet>$ python -m setuptools_subversion
/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools_subversion.py directory
</snippet></ROW><ROW><id>9853372</id><snippet>$ pip install setuptools_subversion
</snippet></ROW><ROW><id>9853372</id><snippet>$ easy_install setuptools_subversion
</snippet></ROW><ROW><id>9853372</id><snippet>unrecognized .svn/entries format</snippet></ROW><ROW><id>9853372</id><snippet>.svn</snippet></ROW><ROW><id>9853372</id><snippet>import pkg_resources
for entrypoint in pkg_resources.iter_entry_points('setuptools.file_finders'):
    print entrypoint
</snippet></ROW><ROW><id>9853372</id><snippet>svn = setuptools_subversion:listfiles
svn_cvs = setuptools.command.sdist:_default_revctrl
git = setuptools_git:gitlsfiles
hg = setuptools_hg:hg_file_finder
</snippet></ROW><ROW><id>9853457</id><snippet>zip</snippet></ROW><ROW><id>9853457</id><snippet>&gt;&gt;&gt; x = ['1', '2', '3', '4', '5'] 
&gt;&gt;&gt; y = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; z = zip(x, y)
&gt;&gt;&gt; z
[('1', 'a'), ('2', 'b'), ('3', 'c'), ('4', 'd'), ('5', 'e')]
</snippet></ROW><ROW><id>9853505</id><snippet>content = MIMEText(body_text, 'plain', 'utf-8')
</snippet></ROW><ROW><id>9853570</id><snippet>self.emit(QtCore.SIGNAL("searchOutput(PyQt_PyObject, QtGui.QTableView)"), songsObjs, self.table)
</snippet></ROW><ROW><id>9853652</id><snippet>gen</snippet></ROW><ROW><id>9853652</id><snippet>class GenAsyncHandler(RequestHandler):
    @asynchronous
    @gen.engine
    def get(self):
        http_client = AsyncHTTPClient()
        response = yield gen.Task(http_client.fetch, "http://example.com")
        do_something_with_response(response)
        self.render("template.html")
</snippet></ROW><ROW><id>9853653</id><snippet>y = x</snippet></ROW><ROW><id>9853653</id><snippet>y</snippet></ROW><ROW><id>9853653</id><snippet>y = 2**x</snippet></ROW><ROW><id>9853653</id><snippet>x</snippet></ROW><ROW><id>9853653</id><snippet>matplotlib.pyplot.yscale('log')
</snippet></ROW><ROW><id>9854064</id><snippet>x = a</snippet></ROW><ROW><id>9854064</id><snippet>a.b = x</snippet></ROW><ROW><id>9854064</id><snippet>from collections import namedtuple

CallbackVar = namedtuple('CallbackVar', ['change_callback', 'read_callback'])

class CallbackDict(dict):
    'Variant of dict that does callbacks for instances of CallbackVar'
    def __getitem__(self, key):
        value = dict.__getitem__(self, key)
        if isinstance(value, CallbackVar):
            return value.read_callback(key)
    def __setitem__(self, key, value):
        try:
            realvalue = dict.__getitem__(self, key)
            if isinstance(realvalue, CallbackVar):
                return realvalue.change_callback(key, value)
        except KeyError:
            pass
        return dict.__setitem__(self, key, value)

stmts = '''
x = CallbackVar(setter, getter)     # Attach getter() and setter() to "x"
x = 1                               # Invoke the setter()
x                                   # Invoke the getter()
'''

def getter(key):
    print 'Getting', key
    return 42

def setter(key, value):
    print 'Setting', key, 'to', value

exec stmts in globals(), CallbackDict()
</snippet></ROW><ROW><id>9854227</id><snippet>ele[0].contents[0]
u'5 n i D 1 C'
</snippet></ROW><ROW><id>9854497</id><snippet>[^(comments)]
</snippet></ROW><ROW><id>9854497</id><snippet>(</snippet></ROW><ROW><id>9854497</id><snippet>c</snippet></ROW><ROW><id>9854497</id><snippet>o</snippet></ROW><ROW><id>9854497</id><snippet>m</snippet></ROW><ROW><id>9854497</id><snippet>e</snippet></ROW><ROW><id>9854497</id><snippet>n</snippet></ROW><ROW><id>9854497</id><snippet>t</snippet></ROW><ROW><id>9854497</id><snippet>s</snippet></ROW><ROW><id>9854497</id><snippet>)</snippet></ROW><ROW><id>9854497</id><snippet>#comments</snippet></ROW><ROW><id>9854497</id><snippet>... and not re.search("#comments$", i['href'])
</snippet></ROW><ROW><id>9854497</id><snippet>... and not i['href'].endswith("#comments")
</snippet></ROW><ROW><id>9854497</id><snippet>r'...'</snippet></ROW><ROW><id>9854497</id><snippet>r'\b'</snippet></ROW><ROW><id>9854497</id><snippet>'\b'</snippet></ROW><ROW><id>9854497</id><snippet>#</snippet></ROW><ROW><id>9854497</id><snippet>(?x)</snippet></ROW><ROW><id>9854497</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>9854532</id><snippet>def main():
    curses.initscr()

    try:
        curses.cbreak()
        for i in range(3):
            time.sleep(1)
            curses.flash()
            pass
        print( "Hello World" )
    finally:
        curses.endwin()
</snippet></ROW><ROW><id>9854532</id><snippet>class CursesWindow(object):
    def __enter__(self):
        curses.initscr()

    def __exit__(self):
        curses.endwin()

def main():
    with CursesWindow():
        curses.cbreak()
        for i in range(3):
            time.sleep(1)
            curses.flash()
            pass
        print( "Hello World" )
</snippet></ROW><ROW><id>9854582</id><snippet>_id</snippet></ROW><ROW><id>9854582</id><snippet>models.ForeignKey()</snippet></ROW><ROW><id>9854582</id><snippet>id</snippet></ROW><ROW><id>9854582</id><snippet>p.id</snippet></ROW><ROW><id>9854622</id><snippet>.count(search)</snippet></ROW><ROW><id>9854622</id><snippet>.find(search)</snippet></ROW><ROW><id>9854622</id><snippet>.write()</snippet></ROW><ROW><id>9854622</id><snippet>.write()</snippet></ROW><ROW><id>9854622</id><snippet>for i in properties: search = i</snippet></ROW><ROW><id>9854622</id><snippet>for search in properties:
    cnt = filecontents.count(search)
    file.write(str(cnt) + "\n")
</snippet></ROW><ROW><id>9855019</id><snippet>price</snippet></ROW><ROW><id>9855019</id><snippet>Store</snippet></ROW><ROW><id>9855019</id><snippet>self.data.price</snippet></ROW><ROW><id>9855019</id><snippet>class Store(object):
    ...
    @property
    def price(self):
        return self.data.price
</snippet></ROW><ROW><id>9855019</id><snippet>data</snippet></ROW><ROW><id>9855019</id><snippet>Store</snippet></ROW><ROW><id>9855019</id><snippet>self.data.price</snippet></ROW><ROW><id>9855078</id><snippet>def formatter(start, end, step):
    return '{}-{}:{}'.format(start, end, step)
    # return '{}-{}:{}'.format(start, end + step, step)

def helper(lst):
    if len(lst) == 1:
        return str(lst[0]), []
    if len(lst) == 2:
        return ','.join(map(str,lst)), []

    step = lst[1] - lst[0]
    for i,x,y in zip(itertools.count(1), lst[1:], lst[2:]):
        if y-x != step:
            if i &gt; 1:
                return formatter(lst[0], lst[i], step), lst[i+1:]
            else:
                return str(lst[0]), lst[1:]
    return formatter(lst[0], lst[-1], step), []

def re_range(lst):
    result = []
    while lst:
        partial,lst = helper(lst)
        result.append(partial)
    return ','.join(result)
</snippet></ROW><ROW><id>9855078</id><snippet>&gt;&gt;&gt; re_range([1,  4,5,6, 10, 15,16,17,18, 22, 25,26,27,28])
'1,4-6:1,10,15-18:1,22,25-28:1'
&gt;&gt;&gt; re_range([1, 3, 5, 7, 8, 9, 10, 11, 13, 15, 17])
'1-7:2,8-11:1,13-17:2'
</snippet></ROW><ROW><id>9855078</id><snippet>itertools.islice()</snippet></ROW><ROW><id>9855078</id><snippet>scan</snippet></ROW><ROW><id>9855078</id><snippet>def re_range(lst):
    n = len(lst)
    result = []
    scan = 0
    while n - scan &gt; 2:
        step = lst[scan + 1] - lst[scan]
        if lst[scan + 2] - lst[scan + 1] != step:
            result.append(str(lst[scan]))
            scan += 1
            continue

        for j in range(scan+2, n-1):
            if lst[j+1] - lst[j] != step:
                result.append(formatter(lst[scan], lst[j], step))
                scan = j+1
                break
        else:
            result.append(formatter(lst[scan], lst[-1], step))
            return ','.join(result)

    if n - scan == 1:
        result.append(str(lst[scan]))
    elif n - scan == 2:
        result.append(','.join(map(str, lst[scan:])))

    return ','.join(result)
</snippet></ROW><ROW><id>9855214</id><snippet>hidden_letters</snippet></ROW><ROW><id>9855214</id><snippet>remove(x)</snippet></ROW><ROW><id>9855214</id><snippet>hidden_letters = []</snippet></ROW><ROW><id>9855214</id><snippet>new_word()</snippet></ROW><ROW><id>9855214</id><snippet>list.remove(x)</snippet></ROW><ROW><id>9855218</id><snippet>\</snippet></ROW><ROW><id>9855218</id><snippet>?</snippet></ROW><ROW><id>9855218</id><snippet>-</snippet></ROW><ROW><id>9855218</id><snippet>[]</snippet></ROW><ROW><id>9855218</id><snippet>^</snippet></ROW><ROW><id>9855218</id><snippet>$</snippet></ROW><ROW><id>9855456</id><snippet>easy_install</snippet></ROW><ROW><id>9855456</id><snippet>Distribute</snippet></ROW><ROW><id>9855456</id><snippet>setuptools</snippet></ROW><ROW><id>9855456</id><snippet>easy_install</snippet></ROW><ROW><id>9855456</id><snippet>/Library/Python/2.6</snippet></ROW><ROW><id>9855456</id><snippet>easy_install</snippet></ROW><ROW><id>9855456</id><snippet>lxml</snippet></ROW><ROW><id>9855456</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>9855456</id><snippet>easy_install</snippet></ROW><ROW><id>9855456</id><snippet>easy_install</snippet></ROW><ROW><id>9855456</id><snippet>PATH</snippet></ROW><ROW><id>9855456</id><snippet>export PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
</snippet></ROW><ROW><id>9855456</id><snippet>easy_install lxml</snippet></ROW><ROW><id>9855456</id><snippet>ARCHFLAGS</snippet></ROW><ROW><id>9855561</id><snippet>.*</snippet></ROW><ROW><id>9855561</id><snippet># minimal match approach
pages = re.findall(r'&lt;a\s+href="/blog/(.+?)"&gt;', 
                   full_html_text, re.I + re.S)

# negated charclass approach
pages = re.findall(r'&lt;a\s+href="/blog/([^"]+)"&gt;',
                   full_html_text, re.I)
</snippet></ROW><ROW><id>9855561</id><snippet>&lt;a</snippet></ROW><ROW><id>9855561</id><snippet>href</snippet></ROW><ROW><id>9855561</id><snippet>&lt;a title="foo" href="bar"&gt;</snippet></ROW><ROW><id>9855561</id><snippet>&lt;A HREF='foo'&gt;</snippet></ROW><ROW><id>9855561</id><snippet>href='/foo/bar'</snippet></ROW><ROW><id>9855561</id><snippet>href="/foo/bar"</snippet></ROW><ROW><id>9855578</id><snippet>save_as=True</snippet></ROW><ROW><id>9855733</id><snippet>.sort()</snippet></ROW><ROW><id>9855733</id><snippet>&gt;&gt;&gt; a = [ 3, 1, 4, 1, 5, 9 ]
&gt;&gt;&gt; a.sort()
&gt;&gt;&gt; a
[1, 1, 3, 4, 5, 9]
</snippet></ROW><ROW><id>9855733</id><snippet>&gt;&gt;&gt; def my_sorted(a):
...     a = list(a)
...     a.sort()
...     return a
... 
&gt;&gt;&gt; b = [3,1,4,1,5,9]
&gt;&gt;&gt; my_sorted(b)
[1, 1, 3, 4, 5, 9]
&gt;&gt;&gt; b
[3, 1, 4, 1, 5, 9]
</snippet></ROW><ROW><id>9855803</id><snippet>DataAccessLayer</snippet></ROW><ROW><id>9855803</id><snippet>class DataAccessLayer(object): ...</snippet></ROW><ROW><id>9855939</id><snippet>sm[random.sample(xrange(sm.shape[0]), K), :]
</snippet></ROW><ROW><id>9855939</id><snippet>random.sample</snippet></ROW><ROW><id>9856378</id><snippet>for event, element in etree.iterparse(path_to_file, tag="BlogPost"):
    for child in element:
        print child.tag, child.text
    element.clear()
</snippet></ROW><ROW><id>9856378</id><snippet>for event, element in etree.iterparse(path_to_file, tag="BlogPost"):
    print etree.tostring(element)
    element.close()
</snippet></ROW><ROW><id>9856378</id><snippet>for event, element in etree.iterparse(path_to_file, tag="BlogPost"):
    print ''.join([etree.tostring(child) for child in element])
    element.close()
</snippet></ROW><ROW><id>9856378</id><snippet>for event, element in etree.iterparse(path_to_file, tag="BlogPost"):
    print ''.join([child.text for child in element])
    element.close()
</snippet></ROW><ROW><id>9856453</id><snippet>((?:[a-zA-Z]+[\w+\.\-]+[\-a-zA-Z]+))[ ]*((?:@|at))[ ]*(?:[a-zA-Z\.]+)\.(com|edu)
</snippet></ROW><ROW><id>9856453</id><snippet>((?:[a-zA-Z]+[\w+\.\-]+[\-a-zA-Z]+))[ ]*((?:@|at))[ ]*(?:[a-zA-Z\.]+) *(\.|dot) *(com|edu)
</snippet></ROW><ROW><id>9856693</id><snippet>~</snippet></ROW><ROW><id>9856693</id><snippet>+</snippet></ROW><ROW><id>9856693</id><snippet>{% set p = year ~ '/' ~ month ~ '/' ~ day ~ '/' ~ post.slug %}
</snippet></ROW><ROW><id>9856693</id><snippet>str</snippet></ROW><ROW><id>9856725</id><snippet>os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'templates'))
</snippet></ROW><ROW><id>9856725</id><snippet>os.pardir</snippet></ROW><ROW><id>9856725</id><snippet>'..'</snippet></ROW><ROW><id>9856725</id><snippet>normpath</snippet></ROW><ROW><id>9856725</id><snippet>abspath</snippet></ROW><ROW><id>9857033</id><snippet>logging</snippet></ROW><ROW><id>9857033</id><snippet>logging</snippet></ROW><ROW><id>9857052</id><snippet>files = ['title1.pdf', 'title2.pdf', 'title3.pdf']
files += [ "%.2d.pdf" % j for j in range(1,100)]
pages = [[folder+file for file in files] for folder in foldernames]
</snippet></ROW><ROW><id>9857069</id><snippet>HTMLParser</snippet></ROW><ROW><id>9857069</id><snippet>urllib2</snippet></ROW><ROW><id>9857069</id><snippet>import HTMLParser, urllib2

markup = '''&lt;a href="mailto:lad%20at%20maestro%20dot%20com"&gt;
&lt;em&gt;ada@graphics.maestro.com&lt;/em&gt;
&lt;em&gt;mel@graphics.maestro.com&lt;/em&gt;'''

result = HTMLParser.HTMLParser().unescape(urllib2.unquote(markup))
for line in result.split("\n"): 
    print(line)
</snippet></ROW><ROW><id>9857069</id><snippet>&lt;a href="mailto:lad at maestro dot com"&gt;
&lt;em&gt;ada@graphics.maestro.com&lt;/em&gt;
&lt;em&gt;mel@graphics.maestro.com&lt;/em&gt;
</snippet></ROW><ROW><id>9857069</id><snippet>cp-1252</snippet></ROW><ROW><id>9857069</id><snippet>import codecs 
with codecs.open(filename, encoding="cp1252") as fin:
    decoded = fin.read()
result = HTMLParser.HTMLParser().unescape(urllib2.unquote(decoded))
with codecs.open('/output/file.html', 'w', encoding='cp1252') as fou:
    fou.write(result)
</snippet></ROW><ROW><id>9857069</id><snippet>with open(filename) as fin:
    decoded = fin.read().decode('ascii','ignore')
...
</snippet></ROW><ROW><id>9857102</id><snippet> '    def theloop(numb):\n',
 '    \t\tglobal i\n',
 '    \t\t#i = 0\n',
 '            #number = []\n',
 '    \t\twhile i &lt; numb:\n',
 '     \t\t\tprint "At the top of i is %d" % i\n',
 '        \t\tnumbers.append(i)\n',
 '    \n',
 '        \t\ti = i + 1\n',
</snippet></ROW><ROW><id>9857245</id><snippet>easy_install</snippet></ROW><ROW><id>9857245</id><snippet>easy_install</snippet></ROW><ROW><id>9857245</id><snippet>STATIC_DEPS=true easy_install-2.7 lxml
</snippet></ROW><ROW><id>9857245</id><snippet>/opt/local/Library/Frameworks</snippet></ROW><ROW><id>9857245</id><snippet>lxml</snippet></ROW><ROW><id>9857245</id><snippet>$ sudo port selfupdate
$ sudo port install py27-lxml
</snippet></ROW><ROW><id>9857245</id><snippet>easy_install</snippet></ROW><ROW><id>9857245</id><snippet>Distribute</snippet></ROW><ROW><id>9857245</id><snippet>$ curl -O http://python-distribute.org/distribute_setup.py
$ export PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
$ which python2.7   # should be in the path above
$ python2.7 distribute_setup.py
$ STATIC_DEPS=true easy_install-2.7 lxml
</snippet></ROW><ROW><id>9857272</id><snippet>for line in infile:</snippet></ROW><ROW><id>9857272</id><snippet>infile</snippet></ROW><ROW><id>9857272</id><snippet># read all lines from the file into a list, where each list element is one line
lines = infile.readlines()

# iterate through the list three lines at a time, until you run out of lines
line_number = 0
while line_number &lt; len(lines):
    to_line = lines[line_number]
    from_line = lines[line_number+1]
    header_line = lines[line_number+2]
    line_number += 3
</snippet></ROW><ROW><id>9857319</id><snippet>rules</snippet></ROW><ROW><id>9857319</id><snippet>grammar</snippet></ROW><ROW><id>9857319</id><snippet>rules</snippet></ROW><ROW><id>9857319</id><snippet>rules</snippet></ROW><ROW><id>9857319</id><snippet>heappush</snippet></ROW><ROW><id>9857319</id><snippet>grammar</snippet></ROW><ROW><id>9857319</id><snippet>copy</snippet></ROW><ROW><id>9857319</id><snippet>rules</snippet></ROW><ROW><id>9857319</id><snippet>deepcopy</snippet></ROW><ROW><id>9857319</id><snippet>translate</snippet></ROW><ROW><id>9857319</id><snippet>rules</snippet></ROW><ROW><id>9857383</id><snippet>mail_re = r"(?:[a-zA-Z]+[\w+\.]+[a-zA-Z]+)\s*(?:@|\bat\b)\s*(?:(?:(?:(?:[a-zA-Z]+)\s*(?:\.|dot|dom)\s*(?:[a-zA-Z]+)\s*(?:\.|dot|dom)\s*)(?:edu|com))|(?:(?:[a-zA-Z]+\s*(?:\.|dot|dom)\s*(?:edu|com))))"
</snippet></ROW><ROW><id>9857383</id><snippet>\b</snippet></ROW><ROW><id>9857410</id><snippet>address_form = AddressForm(request.POST)
profile_form = UserProfileForm(request.POST)
contacts_form = ContactInfoForm(request.POST)
if address_form.is_valid() and profile_form.is_valid() and contacts_form.is_valid():
    address_form.save()
    profile_form.save()
    contacts_form.save()
</snippet></ROW><ROW><id>9857416</id><snippet>&lt;tr {% if date.day|divisibleby:"2" %}class="date_even"{% else %}class="date_odd"{% endif %}&gt;
    &lt;td&gt;something&lt;/td&gt;
    &lt;td&gt;something else&lt;/td&gt;
    &lt;td&gt;{{ date }}&lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>9857505</id><snippet>profile_a.genres.all().filter(id__in=profile_b.genres.all())
</snippet></ROW><ROW><id>9857576</id><snippet>ticks=np.zeros((ii))
</snippet></ROW><ROW><id>9857576</id><snippet>from pylab import *
x = arange(128*128).reshape((128,128))
matshow(x)
xlim(right=64)
# xticks: where the xticks should go (indexes into x's columns)
xticks = r_[0:64:25]
gca().set_xticks(xticks)
# labels: text to show for each element of xticks
#    here, we apply a multiplier just to show how the
#    labels can differ from the xticks.
labels = ['%.1f' % (x,) for x in xticks * pi / 2]
gca().set_xticklabels(labels)
show()
</snippet></ROW><ROW><id>9857635</id><snippet>itertools.product(array1, array2, array3)
</snippet></ROW><ROW><id>9857635</id><snippet>list</snippet></ROW><ROW><id>9857635</id><snippet>itertools</snippet></ROW><ROW><id>9857635</id><snippet>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</snippet></ROW><ROW><id>9857747</id><snippet>import http.cookiejar</snippet></ROW><ROW><id>9857747</id><snippet>EOFError: EOF read where not expected</snippet></ROW><ROW><id>9857747</id><snippet>.pyc</snippet></ROW><ROW><id>9857749</id><snippet>a</snippet></ROW><ROW><id>9857749</id><snippet>&gt;&gt;&gt; a = "123,456"
&gt;&gt;&gt; b = a.split(",")
&gt;&gt;&gt; b
['123', '456']
&gt;&gt;&gt; c = [int(e) for e in b]
&gt;&gt;&gt; c
[123, 456]
&gt;&gt;&gt; x, y = c
&gt;&gt;&gt; x
123
&gt;&gt;&gt; y
456
</snippet></ROW><ROW><id>9857749</id><snippet>x</snippet></ROW><ROW><id>9857749</id><snippet>y</snippet></ROW><ROW><id>9857867</id><snippet>QTableWidget</snippet></ROW><ROW><id>9857867</id><snippet>tw</snippet></ROW><ROW><id>9857867</id><snippet>tw.cellClicked.emit(row, column)
</snippet></ROW><ROW><id>9857867</id><snippet>tw.itemClicked.emit(tw.item(row, column))
</snippet></ROW><ROW><id>9857867</id><snippet>row = 0</snippet></ROW><ROW><id>9857867</id><snippet>column = 0</snippet></ROW><ROW><id>9857918</id><snippet>__spam</snippet></ROW><ROW><id>9857918</id><snippet>_classname__spam</snippet></ROW><ROW><id>9857918</id><snippet>self.__database</snippet></ROW><ROW><id>9857918</id><snippet>self._ClassName__attributename</snippet></ROW><ROW><id>9857918</id><snippet>self.__database</snippet></ROW><ROW><id>9857942</id><snippet>soup = BeautifulSoup(twit)

name_tag = soup('strong', {'class': 'fullname js-action-profile-name show-popup-with-id'})
user = name_tag[0].contents[0]

action_tag = soup('span', {'class': 'username js-action-profile-name'})
at_sign = action_tag[0].contents[0].contents[0]
show_name = action_tag[0].contents[1].contents[0]

twit_text = soup('p', {'class': 'js-tweet-text'})
message = twit_text[0].contents[0]
url = twit_text[0].contents[1]['data-expanded-url']

print user, at_sign, show_name, message, url
</snippet></ROW><ROW><id>9857942</id><snippet>Dmitri @ TheFPShow I do this all the time...  http://www.youtube.com/watch?v=DF9WP87KNPk
</snippet></ROW><ROW><id>9858111</id><snippet>inlinkDict[docid] = adoc[1:]
</snippet></ROW><ROW><id>9858111</id><snippet>inlinkDict[docid] = adoc[1:] if adoc[1:] else 0
</snippet></ROW><ROW><id>9858111</id><snippet>&gt;&gt;&gt; with open('/tmp/spam.txt') as f:
...   data = [line.strip().split() for line in f.readlines()]
... 
&gt;&gt;&gt; {d[0]: d[1:] for d in data}
{'A': ['B', 'C', 'D'], 'C': ['A', 'B', 'D'], 'B': ['E', 'F'], 'D': []}
&gt;&gt;&gt; {d[0]: ' '.join(d[1:]) if d[1:] else 0 for d in data}
{'A': 'B C D', 'C': 'A B D', 'B': 'E F', 'D': 0}
</snippet></ROW><ROW><id>9858152</id><snippet>initial</snippet></ROW><ROW><id>9858152</id><snippet>instance</snippet></ROW><ROW><id>9858152</id><snippet>clean_[field]</snippet></ROW><ROW><id>9858152</id><snippet>class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel
    def clean_date_created(self):
        if self.cleaned_fields['date_created'] != self.instance.date_created:
            raise ValidationError, 'date_created has been tampered'
        self.cleaned_fields['date_created']
</snippet></ROW><ROW><id>9858152</id><snippet>def recieve_form(request, ...):
    ...
    f = MyForm(request.POST, instance=a)
    new_model_instance = f.save(commit=False)
    new_model_instance.date_created = &lt;whatever&gt;
    new_model_instance.save()
</snippet></ROW><ROW><id>9858345</id><snippet>find / -inum $X</snippet></ROW><ROW><id>9858346</id><snippet>if letter != 'O' or letter != 'Q':
</snippet></ROW><ROW><id>9858346</id><snippet>if letter != 'O' or 'Q':
</snippet></ROW><ROW><id>9858346</id><snippet>letter</snippet></ROW><ROW><id>9858346</id><snippet>'O' or 'Q'</snippet></ROW><ROW><id>9858471</id><snippet>\n</snippet></ROW><ROW><id>9858505</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; m1 = [[1,2,3], [4,5,6], [7,8,9]]
&gt;&gt;&gt; m2 = [[2,3,4], [5,6,7], [8,9,10]]
&gt;&gt;&gt; [[(x+y)/2 for x,y in zip(r1, r2)] for r1, r2 in zip(m1, m2)]
[[1.5, 2.5, 3.5], [4.5, 5.5, 6.5], [7.5, 8.5, 9.5]]
</snippet></ROW><ROW><id>9858505</id><snippet>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; m1 = array([[1,2,3], [4,5,6], [7,8,9]])
&gt;&gt;&gt; m2 = array([[2,3,4], [5,6,7], [8,9,10]])
&gt;&gt;&gt; (m1 + m2) / 2
array([[ 1.5,  2.5,  3.5],
       [ 4.5,  5.5,  6.5],
       [ 7.5,  8.5,  9.5]])
</snippet></ROW><ROW><id>9858591</id><snippet>string</snippet></ROW><ROW><id>9858591</id><snippet>str</snippet></ROW><ROW><id>9858591</id><snippet>&gt;&gt;&gt; help(str)
Help on class str in module __builtin__:

class str(basestring)
 |  str(object) -&gt; string
 |  
 |  Return a nice string representation of the object.
 |  If the argument is a string, the return value is the same object.
.
.
&gt;&gt;&gt;help(string)
Help on module string:

NAME
    string - A collection of string operations (most are no longer used).

FILE
    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/string.py

MODULE DOCS
    http://docs.python.org/library/string

DESCRIPTION
    Warning: most of the code you see here isn't normally used nowadays.
    Beginning with Python 1.6, many of these functions are implemented as
    methods on the standard string object. They used to be implemented by
    a built-in module called strop, but strop is now obsolete itself.
</snippet></ROW><ROW><id>9858681</id><snippet>self.txtItem.SetValue(self.txtItem.GetValue()[:-1]) 
</snippet></ROW><ROW><id>9858681</id><snippet>TextCtrl</snippet></ROW><ROW><id>9858681</id><snippet>TextCtrl.Remove</snippet></ROW><ROW><id>9858681</id><snippet>from</snippet></ROW><ROW><id>9858681</id><snippet>to</snippet></ROW><ROW><id>9858681</id><snippet>GetLastPosition</snippet></ROW><ROW><id>9858681</id><snippet>self.txtItem.Remove(self.txtItem.GetLastPosition()-1, self.txtItem.GetLastPosition())
</snippet></ROW><ROW><id>9858891</id><snippet>&gt;&gt;&gt; numpy.array([[x for x in xrange(i,i+5)] for i in xrange(0,100,10)])
array([[ 0,  1,  2,  3,  4],
       [10, 11, 12, 13, 14],
       [20, 21, 22, 23, 24],
       [30, 31, 32, 33, 34],
       [40, 41, 42, 43, 44],
       [50, 51, 52, 53, 54],
       [60, 61, 62, 63, 64],
       [70, 71, 72, 73, 74],
       [80, 81, 82, 83, 84],
       [90, 91, 92, 93, 94]])
</snippet></ROW><ROW><id>9858891</id><snippet>&gt;&gt;&gt; narray=numpy.array([[x for x in xrange(i,i+5)] for i in xrange(0,100,10)])
&gt;&gt;&gt; tarray=numpy.transpose(narray)
array([[ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
       [ 1, 11, 21, 31, 41, 51, 61, 71, 81, 91],
       [ 2, 12, 22, 32, 42, 52, 62, 72, 82, 92],
       [ 3, 13, 23, 33, 43, 53, 63, 73, 83, 93],
       [ 4, 14, 24, 34, 44, 54, 64, 74, 84, 94]])
</snippet></ROW><ROW><id>9858891</id><snippet>&gt;&gt;&gt; larray=tarray.tolist()
&gt;&gt;&gt; larray
[[0, 10, 20, 30, 40, 50, 60, 70, 80, 90], [1, 11, 21, 31, 41, 51, 61, 71, 81, 91], [2, 12, 22, 32, 42, 52, 62, 72, 82, 92], [3, 13, 23, 33, 43, 53, 63, 73, 83, 93], [4, 14, 24, 34, 44, 54, 64, 74, 84, 94]]
</snippet></ROW><ROW><id>9858891</id><snippet>larray</snippet></ROW><ROW><id>9858891</id><snippet>larray[0], larray[1]</snippet></ROW><ROW><id>9859370</id><snippet>parts = [0, 5, 10, len(points)]
start_end_pairs = zip(parts[:-1], parts[1:])

for start, end in start_end_pairs:
    print(points[start:end])
</snippet></ROW><ROW><id>9859370</id><snippet>parts</snippet></ROW><ROW><id>9859370</id><snippet>[0, 5, 10]</snippet></ROW><ROW><id>9859370</id><snippet>(0, 5)</snippet></ROW><ROW><id>9859370</id><snippet>(5, 10)</snippet></ROW><ROW><id>9859370</id><snippet>(10, len(points))</snippet></ROW><ROW><id>9859370</id><snippet>print</snippet></ROW><ROW><id>9859370</id><snippet>zip</snippet></ROW><ROW><id>9859370</id><snippet>[0, 5, 10]
[5, 10, len(points)]
</snippet></ROW><ROW><id>9859370</id><snippet>[(0, 5), (5, 10), (10, len(points))]
</snippet></ROW><ROW><id>9859649</id><snippet>G_LOG = logging.getLogger('package.name')</snippet></ROW><ROW><id>9859649</id><snippet>G_LOG.info('some message'), G_LOG.exception('something bad happened')</snippet></ROW><ROW><id>9859649</id><snippet>package</snippet></ROW><ROW><id>9859649</id><snippet>package.name</snippet></ROW><ROW><id>9859649</id><snippet>logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(levelname)-8s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    filename=log_file, filemode='a')
</snippet></ROW><ROW><id>9859649</id><snippet>log_file</snippet></ROW><ROW><id>9859649</id><snippet>logging.config.fileConfig</snippet></ROW><ROW><id>9859649</id><snippet>G_LOG = logging.getLogger(__name__)
ST_LOG = logging.getLogger('stacktrace.' + __name__)
</snippet></ROW><ROW><id>9859649</id><snippet>G_LOG</snippet></ROW><ROW><id>9859649</id><snippet>ST_LOG</snippet></ROW><ROW><id>9859649</id><snippet>ST_LOG.exception</snippet></ROW><ROW><id>9859649</id><snippet>exc_info=True</snippet></ROW><ROW><id>9859649</id><snippet>stacktrace</snippet></ROW><ROW><id>9859649</id><snippet>propagate=0</snippet></ROW><ROW><id>9859935</id><snippet>n = len(a)</snippet></ROW><ROW><id>9859935</id><snippet>n * 2</snippet></ROW><ROW><id>9859935</id><snippet>b</snippet></ROW><ROW><id>9859935</id><snippet>a</snippet></ROW><ROW><id>9860340</id><snippet>$chars = '0123456789abcedfghijklmnopqrstuvwxyz';

function generateKey($length, $charsLength = 10) {
    global $chars;

    $key = '';

    for($i=0;$i&lt;$length;++$i) {
        $key .= $chars[rand(0, $charsLength - 1)];
    }

    return $key;
}

$keyPublic = generateKey(10); // Public key with length 10

// Now check if the key already exist
while(mysql_num_rows(mysql_select('SELECT publicKey FROM keys WHERE publicKey = \''.$keyPublic.'\')) === 1) {
    $keyPublic = generateKey(10);
}

$keyPrivate = generateKey(10, 36); // Private key with length 10

// Now check if the key already exist
while(mysql_num_rows(mysql_select('SELECT privateKey FROM keys WHERE privateKey = \''.$keyPrivate.'\')) === 1) {
    $keyPrivate = generateKey(10, 36);
}
</snippet></ROW><ROW><id>9860611</id><snippet>Long integers have unlimited precision</snippet></ROW><ROW><id>9860611</id><snippet>maxint</snippet></ROW><ROW><id>9860611</id><snippet>maxsize</snippet></ROW><ROW><id>9860611</id><snippet>sys.maxint</snippet></ROW><ROW><id>9860611</id><snippet>sys.maxsize</snippet></ROW><ROW><id>9860611</id><snippet>float("inf")</snippet></ROW><ROW><id>9860611</id><snippet>float("-inf")</snippet></ROW><ROW><id>9860678</id><snippet>tokens</snippet></ROW><ROW><id>9860678</id><snippet>len(tokens)</snippet></ROW><ROW><id>9860678</id><snippet>i</snippet></ROW><ROW><id>9860678</id><snippet>len(tokens)</snippet></ROW><ROW><id>9860678</id><snippet>set(tokens)</snippet></ROW><ROW><id>9860678</id><snippet>i = 0
words = set()
for word in tokens:
    words.add(word)
    i += 1
    print i, len(words)
</snippet></ROW><ROW><id>9860678</id><snippet>i</snippet></ROW><ROW><id>9860867</id><snippet>from time import time, sleep
end_time = time() + x_hours * 3600 # time() is calculated in seconds

while time() &lt; end_time:
    do_your_work()
    sleep(y_seconds)
</snippet></ROW><ROW><id>9860881</id><snippet>192.168.0.10:80 = 1</snippet></ROW><ROW><id>9860881</id><snippet>192.168.0.10:80 = 2</snippet></ROW><ROW><id>9860881</id><snippet>searchValue = "192.168.0.10:80"
newNumber = 2

f = open("datafile.txt", "r+b")

for line in file:
    if line.split()[0] == searchValue:
        position = f.tell() - len(line) #the tell() method gives the current position in the file
        f.seek(position)
        f.write("%s = %d" % (searchValue, newNumber))
        break

f.close()
</snippet></ROW><ROW><id>9860881</id><snippet>192.168.0.10:80\n</snippet></ROW><ROW><id>9860881</id><snippet>192.168.0.10:80 = 1\n</snippet></ROW><ROW><id>9860965</id><snippet>list</snippet></ROW><ROW><id>9860965</id><snippet>dict</snippet></ROW><ROW><id>9860965</id><snippet>class Test:
    def doSomething(self):
        pass

tests = [Test() for i in range(9)]

# Now to invoke the functions:
tests[0].doSomething()
tests[1].doSomething()
 ...
tests[8].doSomething()

# or if you want to do them all at once:
for item in tests:
    item.doSomething()
</snippet></ROW><ROW><id>9861012</id><snippet>re.sub(r'\.[^.]*?\.$', '', someString)
</snippet></ROW><ROW><id>9861012</id><snippet>re.sub</snippet></ROW><ROW><id>9861012</id><snippet>$</snippet></ROW><ROW><id>9861012</id><snippet>\..*\.</snippet></ROW><ROW><id>9861190</id><snippet>my_callable(arg1, arg2)</snippet></ROW><ROW><id>9861190</id><snippet>__call__</snippet></ROW><ROW><id>9861190</id><snippet>type</snippet></ROW><ROW><id>9861190</id><snippet>list</snippet></ROW><ROW><id>9861190</id><snippet>function</snippet></ROW><ROW><id>9861190</id><snippet>type</snippet></ROW><ROW><id>9861190</id><snippet>type()</snippet></ROW><ROW><id>9861190</id><snippet>int</snippet></ROW><ROW><id>9861190</id><snippet>list</snippet></ROW><ROW><id>9861190</id><snippet>function</snippet></ROW><ROW><id>9861190</id><snippet>__call__</snippet></ROW><ROW><id>9861190</id><snippet>__call__</snippet></ROW><ROW><id>9861190</id><snippet>__call__</snippet></ROW><ROW><id>9861190</id><snippet>__call__</snippet></ROW><ROW><id>9861190</id><snippet>object</snippet></ROW><ROW><id>9861190</id><snippet>im_self</snippet></ROW><ROW><id>9861190</id><snippet>im_func</snippet></ROW><ROW><id>9861190</id><snippet>im_self</snippet></ROW><ROW><id>9861190</id><snippet>im_func</snippet></ROW><ROW><id>9861190</id><snippet>foo.my_method(10)</snippet></ROW><ROW><id>9861190</id><snippet>foo.my_method.im_func(im_self, 10)</snippet></ROW><ROW><id>9861190</id><snippet>self</snippet></ROW><ROW><id>9861190</id><snippet>im_self</snippet></ROW><ROW><id>9861190</id><snippet>class Foo(object):

    def bar(self):
        print self
        print self.bar
        print self.bar.im_self # prints the same as self
</snippet></ROW><ROW><id>9861190</id><snippet>&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a.bar()
&lt;__main__.Foo object at 0x179b610&gt;
&lt;bound method Foo.bar of &lt;__main__.Foo object at 0x179b610&gt;&gt;
&lt;__main__.Foo object at 0x179b610&gt;
&gt;&gt;&gt; Foo.bar()
TypeError: unbound method bar() must be called with Foo instance as first argument (got nothing instead)
&gt;&gt;&gt; Foo.bar(a)
&lt;__main__.Foo object at 0x179b610&gt;
&lt;bound method Foo.bar of &lt;__main__.Foo object at 0x179b610&gt;&gt;
&lt;__main__.Foo object at 0x179b610&gt;
</snippet></ROW><ROW><id>9861190</id><snippet>class MyFoo(object):
    a = 10
    def bar(self):
        print self.a
</snippet></ROW><ROW><id>9861190</id><snippet>a</snippet></ROW><ROW><id>9861190</id><snippet>bar</snippet></ROW><ROW><id>9861190</id><snippet>MyFoo.a</snippet></ROW><ROW><id>9861190</id><snippet>class MyFoo(object):
    a = 10

    def __init__(self):
        self.b = 20

    def bar(self):
        print self.a
        print self.b

    def eep(self):
        print self.c
</snippet></ROW><ROW><id>9861190</id><snippet>__init__</snippet></ROW><ROW><id>9861190</id><snippet>&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar()
10
20
&gt;&gt;&gt; foo.eep()
AttributeError: 'MyFoo' object has no attribute 'c'
&gt;&gt;&gt; foo.c = 30
&gt;&gt;&gt; foo.eep()
30
</snippet></ROW><ROW><id>9861209</id><snippet>self.listTools=Gtk.Toolbar()
self.listTools.set_property("icon_size",1)
context=self.listTools.get_style_context()
context.add_class("inline-toolbar")

self.addButton=Gtk.ToolButton()
self.addButton.set_property("visible",True)
self.addButton.set_property("can_focus",False)
self.addButton.set_property("use_action_appearance",False)
self.addButton.set_property("use_underline",False)
self.addButton.set_property("icon_name","list-add-symbolic")
self.listTools.add(self.addButton)
</snippet></ROW><ROW><id>9861209</id><snippet>scrolled_window = Gtk.ScrolledWindow()
scrolled_window.add_with_viewport(self.objectsView)
scrolled_window.set_property("shadow_type","in")
</snippet></ROW><ROW><id>9861412</id><snippet>rpy2.robjects.activate()
</snippet></ROW><ROW><id>9861412</id><snippet>numpy2ri</snippet></ROW><ROW><id>9861622</id><snippet>run()</snippet></ROW><ROW><id>9861622</id><snippet>play()</snippet></ROW><ROW><id>9861622</id><snippet>notes = {
    'c': QtGui.QSound("c.wav"),
    'd': QtGui.QSound("d.wav"),
    'e': QtGui.QSound("e.wav"),
}

notes['c'].play()
</snippet></ROW><ROW><id>9861622</id><snippet>play()</snippet></ROW><ROW><id>9861622</id><snippet>clicked</snippet></ROW><ROW><id>9861622</id><snippet>play</snippet></ROW><ROW><id>9861622</id><snippet>play</snippet></ROW><ROW><id>9861622</id><snippet>class Key(QtCore.QObject):

    def __init__(self, soundFile, parent=None):
        super(Key, self).__init__(parent)

        self.soundFile = soundFile

        self.mediaObject = Phonon.MediaObject(self)
        self._audioOutput = Phonon.AudioOutput(Phonon.MusicCategory, self)
        self._path = Phonon.createPath(self.mediaObject, self._audioOutput)
        self.mediaSource = Phonon.MediaSource(soundFile)
        self.mediaObject.setCurrentSource(self.mediaSource)   

    def play(self):
        self.mediaObject.stop()
        self.mediaObject.seek(0)
        self.mediaObject.play()
</snippet></ROW><ROW><id>9861622</id><snippet>play()</snippet></ROW><ROW><id>9861622</id><snippet>notes = {
    'c': Key("c.wav"),
    'd': Key("d.wav"),
    'e': Key("e.wav"),
}

notes['c'].play()
</snippet></ROW><ROW><id>9861622</id><snippet>play</snippet></ROW><ROW><id>9861622</id><snippet>from collections import deque

class Key(QtCore.QObject):

    POOL_COUNT = 3

    def __init__(self, soundFile, parent=None):
        super(Key, self).__init__(parent)
        self.soundFile = soundFile

        self.resourcePool = deque()

        mediaSource = Phonon.MediaSource(soundFile)

        for i in xrange(self.POOL_COUNT):
            mediaObject = Phonon.MediaObject(self)
            audioOutput = Phonon.AudioOutput(Phonon.MusicCategory, self)
            Phonon.createPath(mediaObject, audioOutput)
            mediaObject.setCurrentSource(mediaSource)
            self.resourcePool.append(mediaObject)

    def play(self):
        self.resourcePool.rotate(1)
        m = self.resourcePool[0]
        m.stop()
        m.seek(0)
        m.play()
</snippet></ROW><ROW><id>9861954</id><snippet>seek</snippet></ROW><ROW><id>9861954</id><snippet>Day 1: 0
Day 2: 1048576
Day 3: 2097152
Day 4: 6291456
....
</snippet></ROW><ROW><id>9862052</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>9862052</id><snippet>/</snippet></ROW><ROW><id>9862052</id><snippet>//</snippet></ROW><ROW><id>9862052</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>9862111</id><snippet>SELECT * FROM base
</snippet></ROW><ROW><id>9862111</id><snippet>SELECT base.* FROM base JOIN player ON base.ownerid=player.id ORDER BY player.name
</snippet></ROW><ROW><id>9862111</id><snippet>session.query(Base).join(Base.owner).order_by(Player.name)
</snippet></ROW><ROW><id>9862358</id><snippet>import re
import sys

class Pin:
    formatDict = {'%d': r'(\d+)', '%f': r'(\d+\.?\d*)'}
    def __init__(self, input=sys.stdin):
        self.input = input

    def scanf(self, format):
        # change the C style format to python regex
        for a, b in self.formatDict.iteritems():
            format = format.replace(a, b)
        patt = re.compile('^\\s*%s$'%format, re.M)
        buf = ''
        matched = 0
        while 1:
            c = self.input.read(1)
            if not c: break
            buf += c
            g = patt.match(buf)
            if g:
                # matched, but there may be more to match, so don't break now
                matched = 1
                matchedGroup = g
            elif matched:
                # the first unmatch after a match, seek back one char and break now
                self.input.seek(-1, 1)
                break
        if matched:
            return tuple(eval(x) for x in matchedGroup.groups())

scanf = Pin(open('in', 'r')).scanf
print scanf('%d %d')
print scanf('%f %f')
</snippet></ROW><ROW><id>9862366</id><snippet>regexp = ru'\"*\“*'
</snippet></ROW><ROW><id>9862366</id><snippet>re.findall(regexp, string, re.UNICODE)
</snippet></ROW><ROW><id>9862366</id><snippet>#!/usr/bin/python
# -*- coding:utf-8 -*-
</snippet></ROW><ROW><id>9862537</id><snippet>urllib2</snippet></ROW><ROW><id>9862537</id><snippet>BaseHandler</snippet></ROW><ROW><id>9862537</id><snippet>protocol_request</snippet></ROW><ROW><id>9862537</id><snippet>protocol_response</snippet></ROW><ROW><id>9862612</id><snippet>"ERD","Data","Data"...  
"KIN","Data","Data"...  
"FAC","Data","Data"...  
"GRE","Data","Data"... 
</snippet></ROW><ROW><id>9862612</id><snippet>def outputList(inputlist, datafile, outputfile):
    d = {}
    with open(datafile, 'r') as f:
        for line in f:
            line = line.lstrip()
            key = line.split(',')[0]
            d[key] = line
    with open(outputfile, 'w') as f:
        for key in inputlist:
            f.write(d[key])
</snippet></ROW><ROW><id>9862612</id><snippet>outputList(['"GRE"', '"KIN"', '"ERD"', '"KIN"'],
           '/path/to/datafile',
           '/path/to/outputfile')
</snippet></ROW><ROW><id>9862763</id><snippet>mimetypes</snippet></ROW><ROW><id>9862900</id><snippet>from socket import *
import sys
import select
address = ('localhost', 6005)
server_socket = socket(AF_INET, SOCK_DGRAM)
server_socket.bind(address)

while(1):
    print "Listening"
    recv_data, addr = server_socket.recvfrom(2048)
    print recv_data
    if recv_data == "Request 1" :
        print "Received request 1"
        server_socket.sendto("Response 1", addr)
    elif recv_data == "Request 2" :
        print "Received request 2"
        data = "Response 2"
        server_socket.sendto(data, addr)
</snippet></ROW><ROW><id>9863002</id><snippet>a = a or &lt;initialize_object&gt;
</snippet></ROW><ROW><id>9863013</id><snippet>timer.timeout.connect</snippet></ROW><ROW><id>9863013</id><snippet>statsThread = QtCore.QThread()
</snippet></ROW><ROW><id>9863013</id><snippet>class UpdateGuiWithStats(QtCore.QObject):

    def startWorker(self):
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.doWork)
        self.timer.start(1000)
</snippet></ROW><ROW><id>9863013</id><snippet>doWork()</snippet></ROW><ROW><id>9863013</id><snippet>doWork()</snippet></ROW><ROW><id>9863013</id><snippet>class UpdateStatsThread(QtCore.QThread):

    def __init__(self, parent=None):
        super(UpdateStatsThread, self).__init__(parent)
        self._running = False

    def run(self):
        self._running = True
        while self._running:
            self.doWork()
            self.msleep(1000)

    def stop(self, wait=False):
        self._running = False
        if wait:
            self.wait()

    def doWork(self):
        print "hi!"
</snippet></ROW><ROW><id>9863057</id><snippet>values</snippet></ROW><ROW><id>9863057</id><snippet>values = {'kaj' : 'sifra',
        'rijec' : '', #notice the change to a blank string.
        'prikaz' : '20' }
</snippet></ROW><ROW><id>9863057</id><snippet>ReParse</snippet></ROW><ROW><id>9863057</id><snippet>global values
values['rijec'] = pin
</snippet></ROW><ROW><id>9863057</id><snippet>all_data</snippet></ROW><ROW><id>9863057</id><snippet>MyHTMLParser</snippet></ROW><ROW><id>9863057</id><snippet>class MyHTMLParser(HTMLParser):
    def handle_data(self, data):
        # global statement should be her.
        all_data.append(data)
</snippet></ROW><ROW><id>9863373</id><snippet>sum_x = 0
sum_y = 0
count = 0
for x in range(0, 10):
  for y in range(0, 20):
    if image[x][y] == '#':
      sum_x += x
      sum_y += y
      count += 1
centre_x = sum_x / count # this will truncate; round or use float if you want
centre_y = sum_y / count
</snippet></ROW><ROW><id>9863373</id><snippet>x</snippet></ROW><ROW><id>9863373</id><snippet>y</snippet></ROW><ROW><id>9863373</id><snippet>i</snippet></ROW><ROW><id>9863373</id><snippet>j</snippet></ROW><ROW><id>9863535</id><snippet>on_delete=models.SET_NULL</snippet></ROW><ROW><id>9864010</id><snippet>SELECT Name
     , COUNT(*) AS cnt
FROM history 
GROUP BY Name
ORDER BY Name
</snippet></ROW><ROW><id>9864010</id><snippet>Date</snippet></ROW><ROW><id>9864010</id><snippet>Name</snippet></ROW><ROW><id>9864010</id><snippet>COUNT(*)</snippet></ROW><ROW><id>9864010</id><snippet>     , COUNT(DISTINCT Date) AS cnt
</snippet></ROW><ROW><id>9864010</id><snippet>COUNT(DISTINCT column)</snippet></ROW><ROW><id>9864010</id><snippet>SELECT Name
     , COUNT(*) AS cnt
FROM 
    ( SELECT DISTINCT
          Name, Date
      FROM history 
    ) AS h 
GROUP BY Name
ORDER BY Name
</snippet></ROW><ROW><id>9864122</id><snippet>print("Hello World")
</snippet></ROW><ROW><id>9864122</id><snippet>print "Hello World" 
</snippet></ROW><ROW><id>9864452</id><snippet>print</snippet></ROW><ROW><id>9864452</id><snippet>print (type(aList))
</snippet></ROW><ROW><id>9864572</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; textline = "AZERTY:qwerty"
&gt;&gt;&gt; if re.search('^([A-Z0-9]+:)(.*)', textline):
...     print("match !")
</snippet></ROW><ROW><id>9864572</id><snippet>cd /tmp
wget http://sputnick-area.net/ftp/downloads/re.py
chmod +x re.py
./re.py
</snippet></ROW><ROW><id>9864572</id><snippet>#!/usr/bin/python2
# -*- coding: utf8 -*-

# $ cat /tmp/dmesg
# AZERTY:qwerty01
# AZERTY:qwerty02
# zzzzzzzzzzzzzzz
# AZERTY:qwerty03

import re

f = open("/tmp/dmesg", "r")
for textline in f.readlines():
    if re.search('^([A-Z0-9]+:)(.*)', textline):
        print "match "+textline.rstrip('\n')

f.close()
</snippet></ROW><ROW><id>9864688</id><snippet>file_upload.file</snippet></ROW><ROW><id>9864688</id><snippet>ZipFile</snippet></ROW><ROW><id>9864688</id><snippet>file_upload.filename</snippet></ROW><ROW><id>9864688</id><snippet>import sys
sys.stderr = sys.stdout
print "Content-Type: text/plain"
print

import cgi
import zipfile

form = cgi.FieldStorage()

filefield = form['somefile']
print "Filename:", filefield.filename

if filefield.file is not None and zipfile.is_zipfile(filefield.file):
    zfile = zipfile.ZipFile(filefield.file)
    print "Name list:\n\t",
    print "\n\t".join(zfile.namelist())
</snippet></ROW><ROW><id>9864688</id><snippet>&lt;!DOCTYPE html&gt;
&lt;form enctype="multipart/form-data" action="file-upload" method=post&gt;
&lt;p&gt;&lt;label for=somefile&gt;File: &lt;input type=file name=somefile&gt;
&lt;p&gt;&lt;input type=submit&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>9864739</id><snippet>If axis is None, out is a flattened array.
</snippet></ROW><ROW><id>9864880</id><snippet>QTableModel</snippet></ROW><ROW><id>9864880</id><snippet>QListView</snippet></ROW><ROW><id>9864880</id><snippet>QListView.setModelColumn</snippet></ROW><ROW><id>9865110</id><snippet>def send_all(sock, string):
    bytes_sent = 0
    while bytes_sent &lt; len(string):
        bytes_sent += sock.send(string[bytes_sent:])
</snippet></ROW><ROW><id>9865149</id><snippet>.state</snippet></ROW><ROW><id>9865149</id><snippet>.goto(state)</snippet></ROW><ROW><id>9865149</id><snippet>state</snippet></ROW><ROW><id>9865149</id><snippet>&gt; cat prod.py 

class product(object):

    def __init__(self, *args, **kw):
        if len(kw) &gt; 1:
            raise TypeError("product() takes at most 1 argument (%d given)" %
                             len(kw))
        self.repeat = kw.get('repeat', 1)
        self.gears = [x for x in args] * self.repeat
        self.num_gears = len(self.gears)
        self.reset()

    def reset(self):
        # initialization of indicies to loop over
        self.indicies = [(0, len(self.gears[x]))
                         for x in range(0, self.num_gears)]
        self.cont = True
        self.state = 0

    def goto(self, n):
        self.reset()
        self.state = n
        x = self.num_gears
        while n &gt; 0 and x &gt; 0:
            x -= 1
            n, m = divmod(n, len(self.gears[x]))
            self.indicies[x] = (m, self.indicies[x][1])
        if n &gt; 0:
            self.reset()
            raise ValueError("state exceeded")

    def roll_gears(self):
        # Starting from the end of the gear indicies work to the front
        # incrementing the gear until the limit is reached. When the limit
        # is reached carry operation to the next gear
        self.state += 1
        should_carry = True
        for n in range(0, self.num_gears):
            nth_gear = self.num_gears - n - 1
            if should_carry:
                count, lim = self.indicies[nth_gear]
                count += 1
                if count == lim and nth_gear == 0:
                    self.cont = False
                if count == lim:
                    should_carry = True
                    count = 0
                else:
                    should_carry = False
                self.indicies[nth_gear] = (count, lim)
            else:
                break

    def __iter__(self):
        return self

    def next(self):
        if not self.cont:
            raise StopIteration
        l = []
        for x in range(0, self.num_gears):
            index, limit = self.indicies[x]
            l.append(self.gears[x][index])
        self.roll_gears()
        return tuple(l)

p = product('abc', '12')
print list(p)
p.reset()
print list(p)
p.goto(2)
print list(p)
p.goto(4)
print list(p)
&gt; python prod.py 
[('a', '1'), ('a', '2'), ('b', '1'), ('b', '2'), ('c', '1'), ('c', '2')]
[('a', '1'), ('a', '2'), ('b', '1'), ('b', '2'), ('c', '1'), ('c', '2')]
[('b', '1'), ('b', '2'), ('c', '1'), ('c', '2')]
[('c', '1'), ('c', '2')]
</snippet></ROW><ROW><id>9865149</id><snippet>state</snippet></ROW><ROW><id>9865149</id><snippet>imap</snippet></ROW><ROW><id>9865149</id><snippet>count(n)</snippet></ROW><ROW><id>9865149</id><snippet>n</snippet></ROW><ROW><id>9865149</id><snippet>&gt; cat prod2.py 

from itertools import count, imap

def make_product(*values):
    def fold((n, l), v):
        (n, m) = divmod(n, len(v))
        return (n, l + [v[m]])
    def product(n):
        (n, l) = reduce(fold, values, (n, []))
        if n &gt; 0: raise StopIteration
        return tuple(l)
    return product

print list(imap(make_product(['a','b','c'], [1,2,3]), count()))
print list(imap(make_product(['a','b','c'], [1,2,3]), count(3)))

def product_from(n, *values):
    return imap(make_product(*values), count(n))

print list(product_from(4, ['a','b','c'], [1,2,3]))

&gt; python prod2.py 
[('a', 1), ('b', 1), ('c', 1), ('a', 2), ('b', 2), ('c', 2), ('a', 3), ('b', 3), ('c', 3)]
[('a', 2), ('b', 2), ('c', 2), ('a', 3), ('b', 3), ('c', 3)]
[('b', 2), ('c', 2), ('a', 3), ('b', 3), ('c', 3)]
</snippet></ROW><ROW><id>9865378</id><snippet>[['21', '1'], ['21', '1'], ['21', '1'], ['21', '1'], ['22', '1'],...]
</snippet></ROW><ROW><id>9865378</id><snippet>Subbasin_1.append</snippet></ROW><ROW><id>9865378</id><snippet>[[['22', '1'], ['21', '1']]]
</snippet></ROW><ROW><id>9865378</id><snippet>&gt;&gt;&gt; Subbasins_Imp = [['22', '1'], ['21', '15'], ['11', '3'], ['31', '4'], ['41', '13'], ['21', '1']]
&gt;&gt;&gt; 
&gt;&gt;&gt; Subbasin_1 = [x for x in Subbasins_Imp if x[1] == '1']
&gt;&gt;&gt; print Subbasin_1
[['22', '1'], ['21', '1']]
&gt;&gt;&gt; OS_Count1 = [x for x in Subbasin_1 if x[0] == '21']
&gt;&gt;&gt; print OS_Count1
[['21', '1']]
</snippet></ROW><ROW><id>9865378</id><snippet>&gt;&gt;&gt; Subbasins_Imp = [['22', '1'], ['21', '15'], ['11', '3'], ['31', '4'], ['41', '13'], ['21', '1']]
&gt;&gt;&gt; 
&gt;&gt;&gt; Subbasin_1 = []
&gt;&gt;&gt; Subbasin_1.extend([x for x in Subbasins_Imp if x[1] == '1'])
&gt;&gt;&gt; print Subbasin_1
[['22', '1'], ['21', '1']]
&gt;&gt;&gt; 
&gt;&gt;&gt; OS_Count1 = []
&gt;&gt;&gt; OS_Count1.extend([x for x in Subbasin_1 if x[0] == '21'])
&gt;&gt;&gt; print OS_Count1
[['21', '1']]
</snippet></ROW><ROW><id>9865391</id><snippet>i-1</snippet></ROW><ROW><id>9865391</id><snippet>&gt;&gt;&gt; [1,2,3,4][:2]
[1, 2]
&gt;&gt;&gt; [1,2,3,4][2:]
[3, 4]
</snippet></ROW><ROW><id>9865391</id><snippet>&gt;&gt;&gt; l = [1,2,3,4]
&gt;&gt;&gt; l[2:][0] = 'three'
&gt;&gt;&gt; l
[1, 2, 3, 4]
</snippet></ROW><ROW><id>9865391</id><snippet>def quicksort(data, lo=0, hi=None):
    if hi is None: hi = len(data)
    ....
</snippet></ROW><ROW><id>9865395</id><snippet>@login_required
def eventcateg_detail(request):
    ca = EventTypeCategory.objects.all()
    return render_to_response('events/categ.html',{
        'objs': ca,
        })
</snippet></ROW><ROW><id>9865395</id><snippet>{% for obj in objs %}
    {{obj.Message_slug}}, {{obj.name}}, {{obj.sub_categories.name}}
    ngcg,                 ngcg,         (name of instance which refer to foriegn key)
{% endfor %}
</snippet></ROW><ROW><id>9865567</id><snippet>|</snippet></ROW><ROW><id>9865567</id><snippet>PyArg_ParseTuple()</snippet></ROW><ROW><id>9865567</id><snippet>param2 = 42;
if (!PyArg_ParseTuple(args, "z|k", &amp;param1, &amp;param2))
  return NULL;
</snippet></ROW><ROW><id>9865578</id><snippet>import types
import os
import os.path
import imp

class PluginMeta(type):
    def __new__(cls, name, bases, dct):
        modules = [imp.load_source(filename, os.path.join(dct['plugindir'], filename))
                    for filename in os.listdir(dct['plugindir']) if filename.endswith('.py')]
        for module in modules:
            for name in dir(module):
                function = getattr(module, name)
                if isinstance(function, types.FunctionType):
                    dct[function.__name__] = function
        return type.__new__(cls, name, bases, dct)


class User(object):
    __metaclass__ = PluginMeta
    plugindir = "path/to/the/plugindir"

    def foo(self):
        print "foo"

user = User()
print dir(user)
</snippet></ROW><ROW><id>9865578</id><snippet>def newFunction(self, abc):
    self.abc = abc
    return self.abc
</snippet></ROW><ROW><id>9865728</id><snippet>minimum</snippet></ROW><ROW><id>9865728</id><snippet>maximum</snippet></ROW><ROW><id>9865728</id><snippet>minimum = None
maximum = None
 ...
    if minimum is None or num &lt; minimum:
        minimum = num

    if maximum is None or num &gt; maximum:
        maximum = num
...
</snippet></ROW><ROW><id>9865728</id><snippet>count</snippet></ROW><ROW><id>9865728</id><snippet>None</snippet></ROW><ROW><id>9866002</id><snippet>from Tkinter import *

def callbackfunc(*args, **kwargs):
    print args, kwargs
    print "Hello World!"

class App(object):
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        optionvalue = IntVar(master)
        optionvalue.set(2)
        optionvalue.trace("w", callbackfunc)
        self.optionmenu = OptionMenu(master, optionvalue, 1, 2, 3, 4)
        self.optionmenu.pack()

root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>9866002</id><snippet>$ python foo.py 
('PY_VAR0', '', 'w') {}
Hello World!
</snippet></ROW><ROW><id>9866002</id><snippet>from Tkinter import *

class App(object):
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        optionvalue = IntVar(master)
        optionvalue.set(2)
        optionvalue.trace("w", self.callbackfunc)
        self.optionmenu = OptionMenu(master, optionvalue, 1, 2, 3, 4)
        self.optionmenu.pack()
        self.state = []

    def callbackfunc(self, *args):
        self.state.append(args)
        print self.state


root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>9866002</id><snippet>$ python foo.py 
[('PY_VAR0', '', 'w')]
[('PY_VAR0', '', 'w'), ('PY_VAR0', '', 'w')]
[('PY_VAR0', '', 'w'), ('PY_VAR0', '', 'w'), ('PY_VAR0', '', 'w')]
</snippet></ROW><ROW><id>9866002</id><snippet>optionvalue</snippet></ROW><ROW><id>9866002</id><snippet>from Tkinter import *

class App(object):
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        self.optionvalue = IntVar(master)
        self.optionvalue.set(2)
        self.optionvalue.trace("w", self.callbackfunc)
        self.optionmenu = OptionMenu(master, self.optionvalue, 1, 2, 3, 4)
        self.optionmenu.pack()
        self.state = []

    def callbackfunc(self, *args):
        self.state.append(args)
        print self.state
        print self.optionvalue.get()


root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>9866002</id><snippet>$ python foo.py 
[('PY_VAR0', '', 'w')]
1
[('PY_VAR0', '', 'w'), ('PY_VAR0', '', 'w')]
2
[('PY_VAR0', '', 'w'), ('PY_VAR0', '', 'w'), ('PY_VAR0', '', 'w')]
3
</snippet></ROW><ROW><id>9866002</id><snippet>root.getvar(name)</snippet></ROW><ROW><id>9866002</id><snippet>name = 'PY_VAR0'</snippet></ROW><ROW><id>9866201</id><snippet>dict</snippet></ROW><ROW><id>9866362</id><snippet>lsorted= sort(unsorted[:halflen])
rsorted = sort(unsorted[halflen:])
</snippet></ROW><ROW><id>9866362</id><snippet>&gt;&gt;&gt; sort([(3,4),(1,2), (2,3)])
[(1, 2), (2, 3), (3, 4)]
&gt;&gt;&gt; sort([(3,4),(1,2), (2,3)],lambda x,y: x[1] &gt; y[1])
[(3, 4), (1, 2), (2, 3)]
</snippet></ROW><ROW><id>9866362</id><snippet>lsorted=</snippet></ROW><ROW><id>9866362</id><snippet>rsorted=</snippet></ROW><ROW><id>9866362</id><snippet>&gt;&gt;&gt; sort([(3,4),(1,2), (2,3)],lambda x,y: x[1] &gt; y[1])
[(3, 4), (2, 3), (1, 2)]
</snippet></ROW><ROW><id>9866619</id><snippet>import re

test_lines = """
~   VERSION   11 11 11.1  222 22 22.222
$   VERSION 11 11 11.1      222 22 22.222
@      VERSION    11 11 11.1          222 22 22.222
"""

version_pattern = re.compile(r"""
[~!@#$%^&amp;*()]               # Starting symbol
\s+                         # Some amount of whitespace
VERSION                     # the specific word "VERSION"
\s+                         # Some amount of whitespace
(\d+\s+\d+\s+\d+\.\d+)      # First capture group
\s+                         # Some amount of whitespace
(\d+\s+\d+\s+\d+\.\d+)      # Second capture group
""", re.VERBOSE)

lines = test_lines.split('\n')

for line in lines:
    m = re.match(version_pattern, line)
    if (m):
        print (line)
        print (m.groups())
</snippet></ROW><ROW><id>9866619</id><snippet>~   VERSION   11 11 11.1  222 22 22.222
('11 11 11.1', '222 22 22.222')
$   VERSION 11 11 11.1      222 22 22.222
('11 11 11.1', '222 22 22.222')
@      VERSION    11 11 11.1          222 22 22.222
('11 11 11.1', '222 22 22.222')
</snippet></ROW><ROW><id>9866619</id><snippet>int()</snippet></ROW><ROW><id>9866619</id><snippet>float()</snippet></ROW><ROW><id>9866632</id><snippet>ykr_.restype = c_float
</snippet></ROW><ROW><id>9866632</id><snippet>ykr_(byref(c_int(4)))</snippet></ROW><ROW><id>9866632</id><snippet>float</snippet></ROW><ROW><id>9866632</id><snippet>real</snippet></ROW><ROW><id>9866650</id><snippet>12:01:08 Downloaded http://a.com/aaaaa/1.
12:02:51 Downloaded http://a.com/aaaaa/2.
</snippet></ROW><ROW><id>9866650</id><snippet>12:01:03 Preparing to download http://a.com/aaaaa/1...
12:01:03 Resolved host 'a.com' to '147.34.98.1'
12:01:04 Connected to 'a.com' (147.34.98.1)
12:01:04 Sent HTTP request http://a.com/aaaaa/1
12:01:06 Downloaded (48 KB in 1.5s) from http://a.com/aaaaa/1
12:01:08 Indexed http://a.com/aaaaa/1 (in 1.2s)
12:01:08 Downloaded http://a.com/aaaaa/1.

12:02:39 Preparing to download http://a.com/aaaaa/2
....
</snippet></ROW><ROW><id>9866650</id><snippet>12:01:06 Downloaded (48 KB in 1.5s) from http://a.com/aaaaa/1
12:01:08 Indexed http://a.com/aaaaa/1 (in 1.2s)

12:02:36 Downloaded (153 KB in 1.3s) from http://a.com/aaaaa/2
12:02:40 Indexed http://a.com/aaaaa/2 (in 1.6s)
</snippet></ROW><ROW><id>9866960</id><snippet>open()</snippet></ROW><ROW><id>9866960</id><snippet>dictionary.txt</snippet></ROW><ROW><id>9866960</id><snippet>opened_file = open('dictionary.txt')
for line in opened_file:
    print(line) # Put your code here to run it for each word in the dictionary
</snippet></ROW><ROW><id>9866960</id><snippet>str.len()</snippet></ROW><ROW><id>9866960</id><snippet>"Bacon, eggs and spam".len() # returns '20' for 20 characters long
</snippet></ROW><ROW><id>9866960</id><snippet>str.find()</snippet></ROW><ROW><id>9866960</id><snippet>print()</snippet></ROW><ROW><id>9866960</id><snippet>bacon sandwich</snippet></ROW><ROW><id>9867015</id><snippet>bucket_set</snippet></ROW><ROW><id>9867015</id><snippet>bucket_get(table, key).append(42)</snippet></ROW><ROW><id>9867015</id><snippet>list</snippet></ROW><ROW><id>9867015</id><snippet>__getitem__</snippet></ROW><ROW><id>9867015</id><snippet>__setitem__</snippet></ROW><ROW><id>9867015</id><snippet>class Bucket(object):
    def __setitem__(self, key, value):
        # … implementation …
    def __getitem__(self, key):
        # … implementation …
        return value
</snippet></ROW><ROW><id>9867015</id><snippet>&gt;&gt;&gt; b = Bucket()
&gt;&gt;&gt; b["foo"] = 42
&gt;&gt;&gt; b["foo"]
42
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9867064</id><snippet>    from hashlib import sha1
    if os.path.isfile(path):
        f = open(path,'rb')
        h = sha1()
        h.update(f.read()) # You're missing this line
        f.close()
        return h.hexdigest()
    else:
        return 'Not a file'
</snippet></ROW><ROW><id>9867404</id><snippet>--user</snippet></ROW><ROW><id>9867404</id><snippet>setup.py install</snippet></ROW><ROW><id>9867404</id><snippet>virtualenv</snippet></ROW><ROW><id>9867404</id><snippet>user installation scheme</snippet></ROW><ROW><id>9867404</id><snippet>sys.path</snippet></ROW><ROW><id>9867404</id><snippet>$ python2.7 -c 'import site; print(site.USER_SITE)'
/home/nad/.local/lib/python2.7/site-packages
$ ls -l /home/nad/.local/lib/python2.7/site-packages
ls: cannot access /home/nad/.local/lib/python2.7/site-packages: No such file or directory
$ python2.7 -c 'import sys; print(sys.path)'
['', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-linux2', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages/PIL', '/usr/lib/pymodules/python2.7']
# user site-packages dir doesn't exist so it's not in sys.path
$ mkdir -p ~/.local/lib/python2.7/site-packages
$ python2.7 -c 'import sys; print(sys.path)'
['', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-linux2', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/home/nad/.local/lib/python2.7/site-packages', '/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages/PIL', '/usr/lib/pymodules/python2.7']
# now user site-packages dir exists so it is in sys.path and before /usr/lib ones
</snippet></ROW><ROW><id>9867610</id><snippet>{{ user }}</snippet></ROW><ROW><id>9867610</id><snippet>{{ user }}</snippet></ROW><ROW><id>9867610</id><snippet>def auth(request):
    """
    Returns context variables required by apps that use Django's authentication
    system.

    If there is no 'user' attribute in the request, uses AnonymousUser (from
    django.contrib.auth).
    """
    # If we access request.user, request.session is accessed, which results in
    # 'Vary: Cookie' being sent in every request that uses this context
    # processor, which can easily be every request on a site if
    # TEMPLATE_CONTEXT_PROCESSORS has this context processor added.  This kills
    # the ability to cache.  So, we carefully ensure these attributes are lazy.
    # We don't use django.utils.functional.lazy() for User, because that
    # requires knowing the class of the object we want to proxy, which could
    # break with custom auth backends.  LazyObject is a less complete but more
    # flexible solution that is a good enough wrapper for 'User'.
    def get_user():
        if hasattr(request, 'user'):
            return request.user
        else:
            from django.contrib.auth.models import AnonymousUser
            return AnonymousUser()

    return {
        'user': SimpleLazyObject(get_user),
        'messages': messages.get_messages(request),
        'perms':  lazy(lambda: PermWrapper(get_user()), PermWrapper)(),
    }  
</snippet></ROW><ROW><id>9867610</id><snippet>{{ user_object }}</snippet></ROW><ROW><id>9867610</id><snippet>url(
    r'^users/(?P&lt;pk&gt;\d+)/$',
    DetailView.as_view(
        model = User,
        template_name = 'doors/users/detail.html',
        context_object_name = 'user_object'
    ),
    name = 'users_detail'
)
</snippet></ROW><ROW><id>9867675</id><snippet>kwargs</snippet></ROW><ROW><id>9867675</id><snippet>kwargs</snippet></ROW><ROW><id>9867675</id><snippet>dict</snippet></ROW><ROW><id>9867675</id><snippet>**</snippet></ROW><ROW><id>9867690</id><snippet>late_init()</snippet></ROW><ROW><id>9867690</id><snippet>__new__()</snippet></ROW><ROW><id>9867690</id><snippet>__init__()</snippet></ROW><ROW><id>9867690</id><snippet>nested()</snippet></ROW><ROW><id>9867690</id><snippet>__enter__()</snippet></ROW><ROW><id>9867690</id><snippet>__exit__()</snippet></ROW><ROW><id>9867690</id><snippet>yield vars</snippet></ROW><ROW><id>9867690</id><snippet>nested()</snippet></ROW><ROW><id>9867690</id><snippet>nested()</snippet></ROW><ROW><id>9867690</id><snippet>nested()</snippet></ROW><ROW><id>9867787</id><snippet>*</snippet></ROW><ROW><id>9867787</id><snippet>%</snippet></ROW><ROW><id>9867787</id><snippet>%</snippet></ROW><ROW><id>9867787</id><snippet>print "items %0*d" % (5, 12)
</snippet></ROW><ROW><id>9867787</id><snippet>0</snippet></ROW><ROW><id>9867787</id><snippet>*</snippet></ROW><ROW><id>9867787</id><snippet>0</snippet></ROW><ROW><id>9867940</id><snippet>import json

resp = '{"Info": "8\u6298", "Name": "\u5bb6\u4e50\u798f"}'
print json.loads(resp)

## {u'Info': u'8\u6298', u'Name': u'\u5bb6\u4e50\u798f'}
</snippet></ROW><ROW><id>9867971</id><snippet>__init__()</snippet></ROW><ROW><id>9867971</id><snippet>class A(object):
    def __init__(self, init=True):
        if init:
            self.field1 = generate_a_list_of_ints()
    def __copy__(self):
        result = A(init=False)
        result.fiel1[:] = self.field1[:]
        return result
</snippet></ROW><ROW><id>9868665</id><snippet>next(obj for obj in objs if obj.val==5)
</snippet></ROW><ROW><id>9868665</id><snippet>[i for i in xrange(100000) if i == 1000][0]

next(i for i in xrange(100000) if i == 1000)
</snippet></ROW><ROW><id>9868759</id><snippet>for category in ca:</snippet></ROW><ROW><id>9868759</id><snippet>categories</snippet></ROW><ROW><id>9868759</id><snippet>list.append</snippet></ROW><ROW><id>9868759</id><snippet>None</snippet></ROW><ROW><id>9868759</id><snippet>x is not None</snippet></ROW><ROW><id>9868759</id><snippet>!=</snippet></ROW><ROW><id>9869004</id><snippet>xpath()</snippet></ROW><ROW><id>9869004</id><snippet>span = cat.xpath('span/span')
</snippet></ROW><ROW><id>9869004</id><snippet>Element</snippet></ROW><ROW><id>9869148</id><snippet>import bisect

def get_interval(x):
    intvals = [5000, 7500, 10000, 20000, 30000, 40000, 50000]
    i = bisect.bisect_right(intvals,x)
    return intvals[i-1:i+1]

print get_interval(5500)

"""
&gt;&gt;&gt;
[5000, 7500]
"""
</snippet></ROW><ROW><id>9869636</id><snippet>def try_int(x):
    try:
        return int(x)
    except ValueError:
        return x
</snippet></ROW><ROW><id>9869636</id><snippet>&gt;&gt;&gt; [try_int(x) for x in  ['sam', '1', 'dad', '21']]
['sam', 1, 'dad', 21]
</snippet></ROW><ROW><id>9869636</id><snippet>&gt;&gt;&gt; list_of_lists = [['aa', '2'], ['bb', '3']]
&gt;&gt;&gt; [[try_int(x) for x in lst] for lst in list_of_lists]
[['aa', 2], ['bb', 3]]
</snippet></ROW><ROW><id>9869636</id><snippet>list_of_lists</snippet></ROW><ROW><id>9869636</id><snippet>&gt;&gt;&gt; list_of_lists = [[try_int(x) for x in lst] for lst in list_of_lists]
</snippet></ROW><ROW><id>9869874</id><snippet>&gt;&gt;&gt; '\x8e\xd2\xd3\x5f\x29\x11\x4c\x10\xad\x68\x58\x7c\x96\xb4\x68\x6e'
'\x8e\xd2\xd3_)\x11L\x10\xadhX|\x96\xb4hn'
</snippet></ROW><ROW><id>9869874</id><snippet>'\x5f'</snippet></ROW><ROW><id>9869874</id><snippet>'_'</snippet></ROW><ROW><id>9869874</id><snippet>repr()</snippet></ROW><ROW><id>9869874</id><snippet>&gt;&gt;&gt; uuid_hex_to_binary('8ed2d35f-2911-4c10-ad68-587c96b4686e') == \
... '\x8e\xd2\xd3\x5f\x29\x11\x4c\x10\xad\x68\x58\x7c\x96\xb4\x68\x6e'
True
</snippet></ROW><ROW><id>9870035</id><snippet>16333</snippet></ROW><ROW><id>9870035</id><snippet>int</snippet></ROW><ROW><id>9870035</id><snippet>&gt;&gt;&gt; isinstance(16333, int)
True
</snippet></ROW><ROW><id>9870035</id><snippet>connect()</snippet></ROW><ROW><id>9870035</id><snippet>port</snippet></ROW><ROW><id>9870318</id><snippet>b2</snippet></ROW><ROW><id>9870318</id><snippet>a</snippet></ROW><ROW><id>9870318</id><snippet>all()</snippet></ROW><ROW><id>9870318</id><snippet>&gt;&gt;&gt; a = { 'name': 'mary', 'age': 56, 'gender': 'female' }
&gt;&gt;&gt; b1 = { 'name': 'mary', 'age': 56 }
&gt;&gt;&gt; 
&gt;&gt;&gt; all(a[k]==v for k,v in b1.iteritems())
True
&gt;&gt;&gt; b2 = { 'name': 'elizabeth', 'age': 56 }
&gt;&gt;&gt; all(a[k]==v for k,v in b2.iteritems())
False
</snippet></ROW><ROW><id>9870318</id><snippet>b</snippet></ROW><ROW><id>9870318</id><snippet>a</snippet></ROW><ROW><id>9870318</id><snippet>&gt;&gt;&gt; all(a.get(k, object())==v for k,v in b2.iteritems())
False
</snippet></ROW><ROW><id>9870324</id><snippet>bdist = binary distribution
sdist = source distribution
bdist_egg = binary distribution as egg
</snippet></ROW><ROW><id>9870680</id><snippet>yield</snippet></ROW><ROW><id>9870680</id><snippet>padding_zeros</snippet></ROW><ROW><id>9870680</id><snippet>number_string</snippet></ROW><ROW><id>9870680</id><snippet>.encode()</snippet></ROW><ROW><id>9870680</id><snippet>bytes</snippet></ROW><ROW><id>9870888</id><snippet>.sage</snippet></ROW><ROW><id>9870888</id><snippet>sage</snippet></ROW><ROW><id>9870888</id><snippet>.sage</snippet></ROW><ROW><id>9870888</id><snippet>.py</snippet></ROW><ROW><id>9870888</id><snippet>import</snippet></ROW><ROW><id>9870888</id><snippet>.py</snippet></ROW><ROW><id>9870888</id><snippet>import os
os.system(os.curdir + os.sep + 'functions.sage')
from functions import states
</snippet></ROW><ROW><id>9870888</id><snippet>.sage</snippet></ROW><ROW><id>9870939</id><snippet>gForm=GalleryForm(request.POST, request.FILES, instance=newsInstance.gallery_ptr)</snippet></ROW><ROW><id>9870939</id><snippet>if ('id_HeadImage' in request.FILES) and (request.FILES['id_HeadImage']):
</snippet></ROW><ROW><id>9870939</id><snippet>if 'id_HeadImage' in request.FILES.keys():
</snippet></ROW><ROW><id>9871303</id><snippet>"""
Adds a tweet to the twitter account in settings.

Login to dev.twitter.com and add a desktop application
Add the keys and secrets for the added application to the settings file

Requires tweepy to be installed
https://github.com/joshthecoder/tweepy

"""
from django.conf import settings
from tweepy import *

class TwitterManager:
    def __get_api_handle(self):
        #Create OAuth object
        auth = OAuthHandler(settings.TWITTER_CONSUMER_KEY, settings.TWITTER_CONSUMER_SECRET)

        #Set access tokens
        auth.set_access_token(settings.TWITTER_ACCESS_TOKEN, settings.TWITTER_ACCESS_TOKEN_SECRET)

        #Create API handle
        api = API(auth)

        return api

    def update_twitter_status(self, message):

        api = self.__get_api_handle()

        #Send update
        api.update_status(message)
</snippet></ROW><ROW><id>9871303</id><snippet>from myproject.twitter_status import TwitterManager

def __update_twitter(message):
    twit_mgr = TwitterManager()
    twit_mgr.update_twitter_status(message)
</snippet></ROW><ROW><id>9871303</id><snippet>__update_twitter('I am tweeting')
</snippet></ROW><ROW><id>9871358</id><snippet>unicodedata2</snippet></ROW><ROW><id>9871358</id><snippet>unicodedata</snippet></ROW><ROW><id>9871358</id><snippet>script_cat(chr)</snippet></ROW><ROW><id>9871358</id><snippet># coding=utf8
import unicodedata2
print unicodedata2.script_cat(u'Ф')  #('Cyrillic', 'L')
print unicodedata2.script_cat(u'の')  #('Hiragana', 'Lo')
print unicodedata2.script_cat(u'★')  #('Common', 'So')
</snippet></ROW><ROW><id>9871565</id><snippet>class Test2(forms.ModelForm):
    templates = forms.ModelChoiceField(queryset=Test.objects.filter(template=True))
</snippet></ROW><ROW><id>9871917</id><snippet>__init__</snippet></ROW><ROW><id>9871917</id><snippet>Outil</snippet></ROW><ROW><id>9871917</id><snippet>Part.__init__</snippet></ROW><ROW><id>9871917</id><snippet>Part</snippet></ROW><ROW><id>9872370</id><snippet>&lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;{% trans "Name Category" %}&lt;/th&gt;&lt;th&gt;{% trans " Message" %}&lt;/th&gt;&lt;th&gt;{% trans "Sub-categories" %}&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
{% for obj in obj %}
    &lt;tr&gt;

        &lt;td&gt;{{ obj.name }}&lt;/td&gt;&lt;td&gt; {{ obj.Message_slug }}&lt;/td&gt;
        &lt;td&gt;
            {% for i in categ %}
                  {{ i }}
            {% endfor %}
        &lt;/td&gt;

    &lt;/tr&gt;
{% endfor %}
&lt;/tbody&gt;
</snippet></ROW><ROW><id>9872370</id><snippet>def eventcateg_detail(request):
        ca = EventTypeCategory.objects.all()
        categories ={}
        for cat in ca:
            if cat.sub_categ_id:

               #Since the ca queryset already contains all items you can use that to get the child category
               category = ca.objects.get(id=cat.sub_categ_id)

               #Add to dictionary. NOTE: If you ever get more than one sub-category 
               #you need to build a list of sub-categories before adding it to the dict.
               categories[cat.id] = category.name
        return render(request,"events/categ.html",{ 'obj': ca, 'categ' :categories})
</snippet></ROW><ROW><id>9872370</id><snippet>&lt;thead&gt;
&lt;tr&gt;
     &lt;th&gt;{% trans "Name Category" %}&lt;/th&gt;
     &lt;th&gt;{% trans " Message" %}&lt;/th&gt;&lt;th&gt;{% trans "Sub-categories" %}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
{% for o in obj %}
&lt;tr&gt;
    &lt;td&gt;{{ o.name }}&lt;/td&gt;&lt;td&gt; {{ o.Message_slug }}&lt;/td&gt;
    &lt;td&gt;
        {% for key, value in categ.items %}
              {% ifequal key o.id %}
               {{ value }}
              {% endifequal %}
        {% endfor %}
    &lt;/td&gt;

&lt;/tr&gt;
</snippet></ROW><ROW><id>9872434</id><snippet>dict</snippet></ROW><ROW><id>9872434</id><snippet>namedtuple</snippet></ROW><ROW><id>9872434</id><snippet>class Container:
    def __init__(self, name, date, foo, bar):
        self.name = name
        self.date = date
        self.foo = foo
        self.bar = bar

mycontainer = Container(name, date, foo, bar)
</snippet></ROW><ROW><id>9872434</id><snippet>__init__</snippet></ROW><ROW><id>9872434</id><snippet>Container = namedtuple('Container', ['name', 'date', 'foo', 'bar'])

mycontainer = Container(name, date, foo, bar)
</snippet></ROW><ROW><id>9872434</id><snippet>dict</snippet></ROW><ROW><id>9872434</id><snippet>mynamedtuple.fieldname
</snippet></ROW><ROW><id>9872434</id><snippet>mydict['fieldname']
</snippet></ROW><ROW><id>9872434</id><snippet>mynamedtuple = MyNamedTuple(firstvalue, secondvalue)
</snippet></ROW><ROW><id>9872434</id><snippet>mydict = {'fieldname': firstvalue, 'secondfield': secondvalue}
</snippet></ROW><ROW><id>9872434</id><snippet>namedtuple</snippet></ROW><ROW><id>9872434</id><snippet>dict</snippet></ROW><ROW><id>9872434</id><snippet>dict</snippet></ROW><ROW><id>9872602</id><snippet>%</snippet></ROW><ROW><id>9872602</id><snippet>%</snippet></ROW><ROW><id>9872602</id><snippet>#footerBar {
height: 40px;
background: red;
position: fixed;
bottom: 0;
width: 100%%;
z-index: -1;
}
</snippet></ROW><ROW><id>9872602</id><snippet>.format()</snippet></ROW><ROW><id>9872602</id><snippet>...""" % (retrievedFullName, retrievedUserName,)
</snippet></ROW><ROW><id>9872602</id><snippet>...""".format(retrievedFullName, retrievedUserName)
</snippet></ROW><ROW><id>9872602</id><snippet>%s</snippet></ROW><ROW><id>9872602</id><snippet>{0}</snippet></ROW><ROW><id>9872602</id><snippet>{1}</snippet></ROW><ROW><id>9872602</id><snippet>{}</snippet></ROW><ROW><id>9872702</id><snippet>import csv

def import_text(filename, separator):
  for line in csv.reader(open(filename), delimiter=separator, skipinitialspace=True):
    if line[19]:
      for elt in line[19].split(separator):
        yield elt.strip()

for data in import_text('filename.csv', ','):
  print (data)
</snippet></ROW><ROW><id>9873067</id><snippet>settings.py:

# This is a filesystem path
STATIC_ROOT = '/path/to/my/project/collected-static-files/'

# This is a URL prefix
STATIC_URL = '/static/'

INSTALLED_APPS = (
    ...
    'django.contrib.staticfiles',
    ...
)
TEMPLATE_CONTEXT_PROCESSORS = (
    ...
    'django.core.context_processors.static',
    ...
)
</snippet></ROW><ROW><id>9873067</id><snippet>STATIC_DIRS</snippet></ROW><ROW><id>9873067</id><snippet>manage.py collectstatic</snippet></ROW><ROW><id>9873067</id><snippet>/path/to/my/project/collected-static-files</snippet></ROW><ROW><id>9873067</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>9873067</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>9873067</id><snippet>/static/some-dir/some-file-name
</snippet></ROW><ROW><id>9873067</id><snippet>/path/to/my/project/collected-static-files/some-dir/some-file-name
</snippet></ROW><ROW><id>9873280</id><snippet>def func(a,b,*args,kw1=None,**kwargs):
</snippet></ROW><ROW><id>9873280</id><snippet>*</snippet></ROW><ROW><id>9873280</id><snippet>*args</snippet></ROW><ROW><id>9873280</id><snippet>*</snippet></ROW><ROW><id>9873280</id><snippet>parameter_list ::=  (defparameter ",")*
                    (  "*" identifier [, "**" identifier]
                    | "**" identifier
                    | defparameter [","] )
</snippet></ROW><ROW><id>9873280</id><snippet>parameter_list ::=  (defparameter ",")*
                    (  "*" [parameter] ("," defparameter)*
                    [, "**" parameter]
                    | "**" parameter
                    | defparameter [","] )
</snippet></ROW><ROW><id>9873280</id><snippet>*</snippet></ROW><ROW><id>9873773</id><snippet>import re

class LastSiteUrl(object):
    def is_admin_url(self, url):
        return re.search('^(http:\/\/.*){0,1}\/admin\/', url) is not None

    def process_request(self, request):
        if self.is_admin_url(request.path) and \
            not self.is_admin_url(request.META.get('HTTP_REFERER','')):
            request.session['last_site_url'] = request.META.get('HTTP_REFERER','')
</snippet></ROW><ROW><id>9873773</id><snippet>yourproject/middleware.py</snippet></ROW><ROW><id>9873773</id><snippet>settings.MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>9873773</id><snippet>middleware.LastSiteUrl</snippet></ROW><ROW><id>9873773</id><snippet>django/contrib/admin/templates/admin/base_site.html</snippet></ROW><ROW><id>9873773</id><snippet>yourproject/templates/admin/base_site.html</snippet></ROW><ROW><id>9873773</id><snippet>yourproject/templates/admin/base_site.html</snippet></ROW><ROW><id>9873773</id><snippet>{% block branding %}</snippet></ROW><ROW><id>9873773</id><snippet>{{ request.session.last_site_url }}</snippet></ROW><ROW><id>9873773</id><snippet>{% block branding %}
    {% if request.session.last_site_url %}
        &lt;a href="{{ request.session.last_site_url }}"&gt;back to site&lt;/a&gt;
    {% endif %}
    &lt;h1 id="site-name"&gt;{% trans 'Django administration' %}&lt;/h1&gt;
{% endblock %}
</snippet></ROW><ROW><id>9873777</id><snippet>multiprocessing</snippet></ROW><ROW><id>9873777</id><snippet>__name__ == "__main__"</snippet></ROW><ROW><id>9873777</id><snippet>from joblib import Parallel, delayed

if __name__ == "__main__":
    result = Parallel(n_jobs=-1)(delayed(simu)(c) for c in clusterSizes)
    # process result
</snippet></ROW><ROW><id>9873935</id><snippet>from math import ceil

def takespread(sequence, num):
    length = float(len(sequence))
    for i in range(num):
        yield sequence[int(ceil(i * length / num))]
</snippet></ROW><ROW><id>9873935</id><snippet>math.ceil</snippet></ROW><ROW><id>9873946</id><snippet>liblapack.so.3</snippet></ROW><ROW><id>9873955</id><snippet>from sqlalchemy import event, Integer, Column, String
from sqlalchemy.orm import scoped_session, sessionmaker, mapper
from sqlalchemy.ext.declarative import declarative_base

Session = scoped_session(sessionmaker())

@event.listens_for(mapper, 'init')
def auto_add(target, args, kwargs):
    Session.add(target)

Base = declarative_base()

class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    data = Column(String)

a1 = A(data="foo")
assert a1 in Session()
</snippet></ROW><ROW><id>9874032</id><snippet>t</snippet></ROW><ROW><id>9874032</id><snippet>clusters = hcluster.fclusterdata(numpy.transpose(data), 2, criterion='maxclust', metric='euclidean', depth=1, method='centroid')
</snippet></ROW><ROW><id>9874117</id><snippet>def viewAll(this):
    if this != None:
        print this.data,
        viewAll(this.leftNode)
        viewAll(this.rightNode)
</snippet></ROW><ROW><id>9874117</id><snippet>viewAll</snippet></ROW><ROW><id>9874117</id><snippet>def viewAll(this):
    if this != None:
        print this.data,
        this.leftNode.viewAll()
        this.rightNode.viewAll()
</snippet></ROW><ROW><id>9874117</id><snippet>    if data == 0:
        this = None
</snippet></ROW><ROW><id>9874117</id><snippet>this</snippet></ROW><ROW><id>9874117</id><snippet>None</snippet></ROW><ROW><id>9874117</id><snippet>viewAll</snippet></ROW><ROW><id>9874117</id><snippet>    if this != None:
</snippet></ROW><ROW><id>9874117</id><snippet>True</snippet></ROW><ROW><id>9874117</id><snippet>this</snippet></ROW><ROW><id>9874117</id><snippet>viewAll</snippet></ROW><ROW><id>9874117</id><snippet>None</snippet></ROW><ROW><id>9874117</id><snippet>class binTree():
    # I removed __init__ to show you weren't using it
    def viewAll(self):
        print self.data,
        # don't try to show a node that is empty
        if self.leftNode:
            self.leftNode.viewAll()
        if self.rightNode:
            self.rightNode.viewAll()

def creatBT():
    try:
        # don't use input
        temp = int(raw_input('Please input a number, input "0" for end!'))
    except ValueError:
        # in case they don't put in a number
        temp = 0
    if temp == 0:
        return None
    else:
        tree = binTree()
        tree.data = temp
        tree.leftNode = creatBT()
        tree.rightNode = creatBT()
        return tree

if __name__ == "__main__":
    root = creatBT()
    # don't try to show the nodes if none were created
    if root:
        root.viewAll()
</snippet></ROW><ROW><id>9874342</id><snippet>getbbox()</snippet></ROW><ROW><id>9874342</id><snippet>Calculates the bounding box of the non-zero regions in the image</snippet></ROW><ROW><id>9874342</id><snippet>import Image    
im=Image.open("flowers_white_border.jpg")
print im.format, im.size, im.mode
print im.getbbox()
# white border output:
JPEG (300, 225) RGB
(0, 0, 300, 225)

im=Image.open("flowers_black_border.jpg")
print im.format, im.size, im.mode
print im.getbbox()
# black border output:
JPEG (300, 225) RGB
(16, 16, 288, 216) # cropped as desired
</snippet></ROW><ROW><id>9874342</id><snippet>ImageOps.invert</snippet></ROW><ROW><id>9874342</id><snippet>getbbox()</snippet></ROW><ROW><id>9874342</id><snippet>import ImageOps
im=Image.open("flowers_white_border.jpg")
invert_im = ImageOps.invert(im)
print invert_im.getbbox()
# output:
(16, 16, 288, 216)
</snippet></ROW><ROW><id>9874484</id><snippet>subprocess</snippet></ROW><ROW><id>9874484</id><snippet>threading</snippet></ROW><ROW><id>9874484</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>9874484</id><snippet>#!/usr/bin/env python
import os
import multiprocessing as mp

def run(filename_def_param): 
    filename, def_param = filename_def_param # unpack arguments
    ... # call external program on `filename`

def safe_run(*args, **kwargs):
    """Call run(), catch exceptions."""
    try: run(*args, **kwargs)
    except Exception as e:
        print("error: %s run(*%r, **%r)" % (e, args, kwargs))

def main():
    # populate files
    ws = r'D:\Data\Users\jbellino\Project\stJohnsDeepening\model\xsec_a'
    workdir = os.path.join(ws, r'fieldgen\reals')
    files = ((os.path.join(workdir, f), ws)
             for f in os.listdir(workdir) if f.endswith('.npy'))

    # start processes
    pool = mp.Pool() # use all available CPUs
    pool.map(safe_run, files)

if __name__=="__main__":
    mp.freeze_support() # optional if the program is not frozen
    main()
</snippet></ROW><ROW><id>9874484</id><snippet>pool.map()</snippet></ROW><ROW><id>9874484</id><snippet>for _ in pool.imap_unordered(safe_run, files): pass</snippet></ROW><ROW><id>9874484</id><snippet>mutiprocessing.dummy.Pool</snippet></ROW><ROW><id>9874484</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>9874484</id><snippet>nice</snippet></ROW><ROW><id>9874484</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>9874484</id><snippet>concurrent.futures.ThreadPoolExecutor</snippet></ROW><ROW><id>9874484</id><snippet>#!/usr/bin/env python
import os
import concurrent.futures

def run(filename, def_param):
    ... # call external program on `filename`

# populate files
ws = r'D:\Data\Users\jbellino\Project\stJohnsDeepening\model\xsec_a'
wdir = os.path.join(ws, r'fieldgen\reals')
files = (os.path.join(wdir, f) for f in os.listdir(wdir) if f.endswith('.npy'))

# start threads
with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
    future_to_file = dict((executor.submit(run, f, ws), f) for f in files)

    for future in concurrent.futures.as_completed(future_to_file):
        f = future_to_file[future]
        if future.exception() is not None:
           print('%r generated an exception: %s' % (f, future.exception()))
        # run() doesn't return anything so `future.result()` is always `None`
</snippet></ROW><ROW><id>9874484</id><snippet>run()</snippet></ROW><ROW><id>9874484</id><snippet>from itertools import repeat

... # the same

# start threads
with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
     executor.map(run, files, repeat(ws))
     # run() doesn't return anything so `map()` results can be ignored
</snippet></ROW><ROW><id>9874484</id><snippet>subprocess</snippet></ROW><ROW><id>9874484</id><snippet>threading</snippet></ROW><ROW><id>9874484</id><snippet>#!/usr/bin/env python
from __future__ import print_function
import os
import subprocess
import sys
from Queue import Queue
from threading import Thread

def run(filename, def_param):
    ... # define exe, swt_nam
    subprocess.check_call([exe, swt_nam]) # run external program

def worker(queue):
    """Process files from the queue."""
    for args in iter(queue.get, None):
        try:
            run(*args)
        except Exception as e: # catch exceptions to avoid exiting the
                               # thread prematurely
            print('%r failed: %s' % (args, e,), file=sys.stderr)

# start threads
q = Queue()
threads = [Thread(target=worker, args=(q,)) for _ in range(8)]
for t in threads:
    t.daemon = True # threads die if the program dies
    t.start()

# populate files
ws = r'D:\Data\Users\jbellino\Project\stJohnsDeepening\model\xsec_a'
wdir = os.path.join(ws, r'fieldgen\reals')
for f in os.listdir(wdir):
    if f.endswith('.npy'):
        q.put_nowait((os.path.join(wdir, f), ws))

for _ in threads: q.put_nowait(None) # signal no more files
for t in threads: t.join() # wait for completion
</snippet></ROW><ROW><id>9874613</id><snippet>kbararray=ones((1,45))*kbar
</snippet></ROW><ROW><id>9874613</id><snippet>kbararray</snippet></ROW><ROW><id>9874613</id><snippet>(1, 45)</snippet></ROW><ROW><id>9874613</id><snippet>x</snippet></ROW><ROW><id>9874613</id><snippet>(,45)</snippet></ROW><ROW><id>9874613</id><snippet>kbararray</snippet></ROW><ROW><id>9874613</id><snippet>x</snippet></ROW><ROW><id>9874613</id><snippet>kbararray=ones_like(x)*kbar
</snippet></ROW><ROW><id>9874750</id><snippet>self.builder.get_object("boxWelcome").set_text("Welcome %s!" % (username.get_text()))</snippet></ROW><ROW><id>9874816</id><snippet>    import wx
    class SketchWindow(wx.Window):
    def __init__(self, parent, ID):
    wx.Window.__init__(self, parent, ID)
    self.SetBackgroundColour("White")
    self.color = "Black"
    self.thickness = 1
    self.pen = wx.Pen(self.color, self.thickness, wx.SOLID)
    self.lines = []
    self.curLine = []
    self.pos = (0, 0)
    self.InitBuffer()
    self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
    self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)

    self.Bind(wx.EVT_MOTION, self.OnMotion) self.Bind(wx.EVT_SIZE,
    self.OnSize) self.Bind(wx.EVT_IDLE, self.OnIdle)
    self.Bind(wx.EVT_PAINT, self.OnPaint)

    def InitBuffer(self):
    size = self.GetClientSize()
    self.buffer = wx.EmptyBitmap(size.width, size.height)
    dc = wx.BufferedDC(None, self.buffer)
    dc.SetBackground(wx.Brush(self.GetBackgroundColour()))
    dc.Clear()
    self.DrawLines(dc)
    self.reInitBuffer = False

    def GetLinesData(self):
     return self.lines[:]
   def SetLinesData(self, lines):
     self.lines = lines[:]
     self.InitBuffer()
     self.Refresh()
   def OnLeftDown(self, event):
    self.curLine = []
    self.pos = event.GetPositionTuple()
    self.CaptureMouse()
   def OnLeftUp(self, event):
    if self.HasCapture():
     self.lines.append((self.color,
    self.thickness,
   self.curLine))
   self.curLine = []
    self.ReleaseMouse()
   def OnMotion(self, event):
     if event.Dragging() and event.LeftIsDown():
    dc = wx.BufferedDC(wx.ClientDC(self), self.buffer)
    self.drawMotion(dc, event)
    event.Skip()
   def drawMotion(self, dc, event):
   dc.SetPen(self.pen)
   newPos = event.GetPositionTuple()
   coords = self.pos + newPos
   self.curLine.append(coords)
    dc.DrawLine(*coords)
   self.pos = newPos

    def OnSize(self, event):
    self.reInitBuffer = True
      def OnIdle(self, event):
       if self.reInitBuffer:
     self.InitBuffer()
      self.Refresh(False)
    def OnPaint(self, event):
     dc = wx.BufferedPaintDC(self, self.buffer)
    def DrawLines(self, dc):
   for colour, thickness, line in self.lines:
    pen = wx.Pen(colour, thickness, wx.SOLID)
    dc.SetPen(pen)
    for coords in line:
    dc.DrawLine(*coords)
    def SetColor(self, color):
    self.color = color
     self.pen = wx.Pen(self.color, self.thickness, wx.SOLID)
    def SetThickness(self, num):
    self.thickness = num
    self.pen = wx.Pen(self.color, self.thickness, wx.SOLID)
   class SketchFrame(wx.Frame):
    def __init__(self, parent):
    wx.Frame.__init__(self, parent, -1, "Sketch Frame",
     size=(800,600))
    self.sketch = SketchWindow(self, -1)
      if __name__ == '__main__':
      app = wx.PySimpleApp()
     frame = SketchFrame(None)
      frame.Show(True)
      app.MainLoop()
</snippet></ROW><ROW><id>9874974</id><snippet># -*- coding: utf-8 -*-
# String for doctests and  example:
"""
            &gt;&gt;&gt; a = NotifierList()
            &gt;&gt;&gt; flag.has_changed
            False
            &gt;&gt;&gt; a.append(NotifierDict())
            &gt;&gt;&gt; flag.has_changed
            True
            &gt;&gt;&gt; flag.clear()
            &gt;&gt;&gt; flag.has_changed
            False
            &gt;&gt;&gt; a[0]["status"]="new"
            &gt;&gt;&gt; flag.has_changed
            True
            &gt;&gt;&gt; 

"""


changer_methods = set("__setitem__ __setslice__ __delitem__ update append extend add insert pop popitem remove setdefault __iadd__".split())


def callback_getter(obj):
    def callback(name):
        obj.has_changed = True
    return callback

def proxy_decorator(func, callback):
    def wrapper(*args, **kw):
        callback(func.__name__)
        return func(*args, **kw)
    wrapper.__name__ = func.__name__
    return wrapper

def proxy_class_factory(cls, obj):
    new_dct = cls.__dict__.copy()
    for key, value in new_dct.items():
        if key in changer_methods:
            new_dct[key] = proxy_decorator(value, callback_getter(obj))
    return type("proxy_"+ cls.__name__, (cls,), new_dct)


class Flag(object):
    def __init__(self):
        self.clear()
    def clear(self):
        self.has_changed = False

flag = Flag()

NotifierList = proxy_class_factory(list, flag)
NotifierDict = proxy_class_factory(dict, flag)
</snippet></ROW><ROW><id>9875138</id><snippet>Values (80547,'Gossip Girl','http://imdb.com/title/tt0397442,http://www.thetvdb.com/banners/posters/80547-6.jpg', etc
</snippet></ROW><ROW><id>9875300</id><snippet>&gt;&gt;&gt; def nCr(data,r,size):
    result=set()
    while len(result) &lt; size:
        result.add(''.join(random.sample(data,r)))
    return list(result)
</snippet></ROW><ROW><id>9875300</id><snippet>&gt;&gt;&gt; data = string.ascii_letters[:36]
&gt;&gt;&gt; print nCr(data,10,1200)
</snippet></ROW><ROW><id>9875550</id><snippet>tags</snippet></ROW><ROW><id>9875550</id><snippet>new_tags = []
for t in tags:
    existing_tag = self.through.tag_model().objects.get(name__iexact=t)
    if existing_tag:
        new_tags.append(existing_tag)
    else:
        new_tags.append(t)
tags = set(new_tags)
</snippet></ROW><ROW><id>9875744</id><snippet>import functools

def requires_mock(test):

    @functools.wraps(test)
    def wrapper():
        if mock:
            return test()
        raise SkipTest

    return wrapper
</snippet></ROW><ROW><id>9875807</id><snippet>tail -n1</snippet></ROW><ROW><id>9875807</id><snippet>remote_command = "tail -n1 /var/log/apache2/access.log"
stdin, stdout, stderr = client.exec_command(remote_command)
last_line = stdout.read()
</snippet></ROW><ROW><id>9875866</id><snippet>y2 = float(first_coord[1])
</snippet></ROW><ROW><id>9875866</id><snippet>y2 = float(second_coord[1])
</snippet></ROW><ROW><id>9875998</id><snippet>functools.partial</snippet></ROW><ROW><id>9876195</id><snippet>&gt;&gt;&gt; Y.tolist()
[[1, 1, 2], [1, 2, 0], [-1, 3, 1], [-1, 2, 2]]
</snippet></ROW><ROW><id>9876558</id><snippet>os.system ('/%s/tabix -h -f ftp://&lt;some_url&gt; 4:387-388 &gt; file.out' % (path))
</snippet></ROW><ROW><id>9877025</id><snippet>extend</snippet></ROW><ROW><id>9877025</id><snippet>append</snippet></ROW><ROW><id>9877025</id><snippet>def flatten_result(nested_list, target):
    if not nested_list:
        return None
    for word, children in zip(nested_list[::2], nested_list[1::2]):
        if word == target:
            return [word]
        children_result = flatten_result(children, target)
        if children_result:
            return [word] + children_result
    return None

&gt;&gt;&gt; result = ['fine', ['line', ['lone', ['lose', []]]], 'fond', []]
&gt;&gt;&gt; flatten_result(result, 'lose')
['fine', 'line', 'lone', 'lose']
</snippet></ROW><ROW><id>9877145</id><snippet>...
(r'^pages/(?P&lt;page_name&gt;\w+)', 'pages.views.display_content'),
...
</snippet></ROW><ROW><id>9877145</id><snippet>def display_content(request, page_name):
    ...
</snippet></ROW><ROW><id>9877279</id><snippet>numpy</snippet></ROW><ROW><id>9877279</id><snippet>In [1]: from sympy import *
In [2]: import numpy as np
In [3]: x = Symbol('x')
In [4]: y = x**2 + 1
In [5]: yprime = y.diff(x)
In [6]: yprime
Out[6]: 2⋅x

In [7]: f = lambdify(x, yprime, 'numpy')
In [8]: f(np.ones(5))
Out[8]: [ 2.  2.  2.  2.  2.]
</snippet></ROW><ROW><id>9877305</id><snippet>#! /usr/bin/python -u
</snippet></ROW><ROW><id>9877305</id><snippet>import sys 
import os 

# reopen stdout file descriptor with write mode 
# and 0 as the buffer size (unbuffered) 
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0) 
</snippet></ROW><ROW><id>9877360</id><snippet>math</snippet></ROW><ROW><id>9877360</id><snippet>radians</snippet></ROW><ROW><id>9877360</id><snippet>degrees</snippet></ROW><ROW><id>9877360</id><snippet>&gt;&gt;&gt; math.cos(math.radians(1))
0.9998476951563913
</snippet></ROW><ROW><id>9877397</id><snippet>from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>9877856</id><snippet>&gt;&gt;&gt; def which(pgm):
    path=os.getenv('PATH')
    for p in path.split(os.path.pathsep):
        p=os.path.join(p,pgm)
        if os.path.exists(p) and os.access(p,os.X_OK):
            return p


&gt;&gt;&gt; os.which=which
&gt;&gt;&gt; os.which('ls.exe')
'C:\\GNUwin32\\bin\\ls.exe'
</snippet></ROW><ROW><id>9878093</id><snippet>{'SAMPID': &lt;value_1&gt;, 'TRAIL': &lt;value_2&gt;, ...}
</snippet></ROW><ROW><id>9878093</id><snippet>for E in input_table[1:3635]:
</snippet></ROW><ROW><id>9878093</id><snippet>for E in input_table[1:-1]
</snippet></ROW><ROW><id>9878126</id><snippet>sortedlist = sorted([x for x in dicts if x['student']==1], key=lambda k:k['age'])
</snippet></ROW><ROW><id>9878258</id><snippet>reader = csv.DictReader(f.open)
for line_dict in reader:
   line_dict['First Column']
   line_dict['Second Column']
</snippet></ROW><ROW><id>9878404</id><snippet>from flask import request
request.headers.get('User-Agent')
</snippet></ROW><ROW><id>9878404</id><snippet>request.user_agent</snippet></ROW><ROW><id>9878404</id><snippet>== request.headers.get('User-Agent')</snippet></ROW><ROW><id>9878781</id><snippet>def int_str(val, keyspace):
    """ Turn a positive integer into a string. """
    assert val &gt;= 0
    out = ""
    while val &gt; 0:
        val, digit = divmod(val, len(keyspace))
        out += keyspace[digit]
    return out[::-1]

def str_int(val, keyspace):
    """ Turn a string into a positive integer. """
    out = 0
    for c in val:
        out = out * len(keyspace) + keyspace.index(c)
    return out
</snippet></ROW><ROW><id>9878781</id><snippet>keyspace = "fw59eorpma2nvxb07liqt83_u6kgzs41-ycdjh" # Can be anything you like - this was just shuffled letters and numbers, but...
assert len(set(keyspace)) == len(keyspace) # each character must occur only once

def test(v):
    s = int_str(v, keyspace)
    w = str_int(s, keyspace)
    print "OK? %r -- int_str(%d) = %r; str_int(%r) = %d" % (v == w, v, s, s, w)

test(1064463423090)
test(4319193500)
test(495689346389)
test(2496486533)
</snippet></ROW><ROW><id>9878781</id><snippet>OK? True -- int_str(1064463423090) = 'antmgabi'; str_int('antmgabi') = 1064463423090
OK? True -- int_str(4319193500) = 'w7q0hm-'; str_int('w7q0hm-') = 4319193500
OK? True -- int_str(495689346389) = 'ev_dpe_d'; str_int('ev_dpe_d') = 495689346389
OK? True -- int_str(2496486533) = '1q2t4w'; str_int('1q2t4w') = 2496486533
</snippet></ROW><ROW><id>9878781</id><snippet>def chaffify(val, chaff_size = 150, chaff_modulus = 7):
    """ Add chaff to the given positive integer.
    chaff_size defines how large the chaffing value is; the larger it is, the larger (and more unwieldy) the resulting value will be.
    chaff_modulus defines the modulus value for the chaff integer; the larger this is, the less chances there are for the chaff validation in dechaffify() to yield a false "okay".
    """
    chaff = random.randint(0, chaff_size / chaff_modulus) * chaff_modulus
    return val * chaff_size + chaff

def dechaffify(chaffy_val, chaff_size = 150, chaff_modulus = 7):
    """ Dechaffs the given chaffed value. The chaff_size and chaff_modulus parameters must be the same as given to chaffify() for the dechaffification to succeed.
    If the chaff value has been tampered with, then a ValueError will (probably - not necessarily) be raised. """
    val, chaff = divmod(chaffy_val, chaff_size)
    if chaff % chaff_modulus != 0:
        raise ValueError("Invalid chaff in value")
    return val

for x in xrange(1, 11):
    chaffed = chaffify(x)
    print x, chaffed, dechaffify(chaffed)
</snippet></ROW><ROW><id>9878781</id><snippet>1 262 1
2 440 2
3 576 3
4 684 4
5 841 5
6 977 6
7 1197 7
8 1326 8
9 1364 9
10 1528 10
</snippet></ROW><ROW><id>9878781</id><snippet>chaff_val</snippet></ROW><ROW><id>9878781</id><snippet>def chaffify2(val, chaff_val = 87953):
    """ Add chaff to the given positive integer. """
    return val * chaff_val

def dechaffify2(chaffy_val, chaff_val = 87953):
    """ Dechaffs the given chaffed value. chaff_val must be the same as given to chaffify2(). If the value does not seem to be correctly chaffed, raises a ValueError. """
    val, chaff = divmod(chaffy_val, chaff_val)
    if chaff != 0:
        raise ValueError("Invalid chaff in value")
    return val
</snippet></ROW><ROW><id>9878781</id><snippet>document_id = random.randint(0, 1000000)
url_fragment = int_str(chaffify(document_id))
print "URL for document %d: http://example.com/%s" % (document_id, url_fragment)
request_id = dechaffify(str_int(url_fragment))
print "Requested: Document %d" % request_id
</snippet></ROW><ROW><id>9878781</id><snippet>URL for document 831274: http://example.com/w840pi
Requested: Document 831274
</snippet></ROW><ROW><id>9878952</id><snippet>m = (yg - yi) / (xg - xi)
</snippet></ROW><ROW><id>9878952</id><snippet>deltax = radii / math.sqrt(1+m**2)
</snippet></ROW><ROW><id>9878952</id><snippet>deltaX = radii/np.sqrt(1 + m**2)
</snippet></ROW><ROW><id>9879014</id><snippet>len(o)</snippet></ROW><ROW><id>9879014</id><snippet>PySequence_Length()</snippet></ROW><ROW><id>9879014</id><snippet>PyObject_Size()</snippet></ROW><ROW><id>9879014</id><snippet>PySequence_Length()</snippet></ROW><ROW><id>9879014</id><snippet>PyList_GET_SIZE()</snippet></ROW><ROW><id>9879226</id><snippet>__new__()</snippet></ROW><ROW><id>9879226</id><snippet>import logging

class BufferedRemoteHandler(object):
   def __new__(cls):
       return logging.handlers.MemoryHandler(capacity=5,target=myActualHandler)
</snippet></ROW><ROW><id>9879293</id><snippet>output_val = json.loads(response.content)
</snippet></ROW><ROW><id>9879465</id><snippet>&gt;&gt;&gt; s = "Name: John, Name: Abby, Name: Kate"
&gt;&gt;&gt; [x[len('Name: '):] for x in s.split(', ')]
['John', 'Abby', 'Kate']
</snippet></ROW><ROW><id>9879465</id><snippet>&gt;&gt;&gt; prefix = 'Name: '
&gt;&gt;&gt; s[len(prefix):].split(', ' + prefix)
['John', 'Abby', 'Kate']
</snippet></ROW><ROW><id>9879465</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('Name:\s+([^,]*)', s)
['John', 'Abby', 'Kate']
</snippet></ROW><ROW><id>9879663</id><snippet>collection_brochures = defaultdict(list)
for b in self.brochures.all():
    collection_brochures[b.collection.slug].append(b)
result = []
for collection, brochures in collection_brochures.iteritems():
    result.append({'collection': collection, 'brochures': brochures})
</snippet></ROW><ROW><id>9879663</id><snippet>Collection</snippet></ROW><ROW><id>9879663</id><snippet>collection_brochures[b.collection].append(b)
</snippet></ROW><ROW><id>9879663</id><snippet>[{'collection': collection_x, 'brochures': [brochure1, brochure2]},
 {'collection': collection_y, 'brochures': [brochure3, brochure4]}]
</snippet></ROW><ROW><id>9879736</id><snippet>exec</snippet></ROW><ROW><id>9879736</id><snippet>exec('a=4; b=2.5; c=a*b; print c')
</snippet></ROW><ROW><id>9879738</id><snippet>&gt;&gt;&gt; float_10 = c_float * 10
&gt;&gt;&gt; float_5 = c_float * 5
&gt;&gt;&gt; a1 = float_10(range(10))
&gt;&gt;&gt; a2 = float_5.from_address(addressof(a1))
&gt;&gt;&gt; print list(a1)
[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
&gt;&gt;&gt; print list(a2)
[0.0, 1.0, 2.0, 3.0, 4.0]
</snippet></ROW><ROW><id>9879738</id><snippet>addressof(a1)</snippet></ROW><ROW><id>9879738</id><snippet>addressof(a2)</snippet></ROW><ROW><id>9879758</id><snippet>JSON.stringify({
        prefix: request,
        locale: '{{locale}}'
})
</snippet></ROW><ROW><id>9879782</id><snippet>--with-thread-unsafe</snippet></ROW><ROW><id>9879782</id><snippet>brew edit boost</snippet></ROW><ROW><id>9879782</id><snippet>libboost_python-mt.a</snippet></ROW><ROW><id>9879782</id><snippet>libboost_python-mt.dylib</snippet></ROW><ROW><id>9879782</id><snippet>libboost_python.a</snippet></ROW><ROW><id>9879782</id><snippet>libboost_python.dylib</snippet></ROW><ROW><id>9879782</id><snippet>boost_lib="boost_python"</snippet></ROW><ROW><id>9879782</id><snippet>boost_lib="boost_python-mt"</snippet></ROW><ROW><id>9879798</id><snippet>pack_forget</snippet></ROW><ROW><id>9879978</id><snippet>setup.py build --compiler=msvc
setup.py bdist_egg
</snippet></ROW><ROW><id>9880400</id><snippet>h.path</snippet></ROW><ROW><id>9880400</id><snippet>urllib.unquote</snippet></ROW><ROW><id>9880400</id><snippet>decode</snippet></ROW><ROW><id>9880400</id><snippet>str</snippet></ROW><ROW><id>9880400</id><snippet>'ascii' codec can't encode</snippet></ROW><ROW><id>9880400</id><snippet>&gt;&gt;&gt; urllib.unquote(u"Foo%E2%84%A2%20Bar").decode("utf-8")
...
UnicodeEncodeError: 'ascii' codec can't encode characters in position 3-5: ordinal not in range(128)
</snippet></ROW><ROW><id>9880400</id><snippet>urllib.unquote(h.path.encode('utf-8')).decode("utf-8")
</snippet></ROW><ROW><id>9880400</id><snippet>urllib.unquote</snippet></ROW><ROW><id>9880469</id><snippet>INSERT INTO notification
SELECT DISTINCT provider, 'them@them.com'
FROM notification
WHERE provider NOT IN
(SELECT DISTINCT provider
FROM notification
WHERE email = 'me@me.com')
</snippet></ROW><ROW><id>9880599</id><snippet>objs = Model1.objects.filter('m2'!=None)
</snippet></ROW><ROW><id>9880599</id><snippet>objs = Model1.objects.filter(False)
</snippet></ROW><ROW><id>9880599</id><snippet>objs = Model1.objects.filter(m2__isnull=False)
</snippet></ROW><ROW><id>9880599</id><snippet>isnull</snippet></ROW><ROW><id>9880699</id><snippet>python script.py test.txt</snippet></ROW><ROW><id>9880699</id><snippet>.py</snippet></ROW><ROW><id>9880701</id><snippet>num = 0
insert_ids = []

for arg in args:
    num += cur.execute(sql, arg)
    insert_ids.append(cur.lastrowid)
</snippet></ROW><ROW><id>9880804</id><snippet>subprocess.check_output(['/usr/bin/wc','-l','A-Z*/A-Z*.F*'], shell=True)
</snippet></ROW><ROW><id>9880804</id><snippet>subprocess.check_output('/usr/bin/wc -l A-Z*/A-Z*.F*', shell=True)
</snippet></ROW><ROW><id>9880804</id><snippet>stdin</snippet></ROW><ROW><id>9880804</id><snippet>stdin</snippet></ROW><ROW><id>9880804</id><snippet>shell=True</snippet></ROW><ROW><id>9880804</id><snippet>subprocess.check_output(
    '/usr/bin/wc -l A-Z*/A-Z*.F* &lt;/dev/null',
    shell=True)
</snippet></ROW><ROW><id>9880804</id><snippet>p = subprocess.Popen('/usr/bin/wc -l A-Z*/A-Z*.F*', shell=True,
                     stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=None)
(output, _) = p.communicate(input='')
</snippet></ROW><ROW><id>9880804</id><snippet>stdin</snippet></ROW><ROW><id>9881020</id><snippet>import time
from gi.repository import Gdk, Gtk, GObject


class MainWindow(Gtk.Window):
    """Example window."""

    def __init__(self):
        """Create new instance."""
        super(MainWindow, self).__init__()
        self.set_title('Test Windows')

        box = Gtk.VBox()
        label = Gtk.Label("Just a label....")
        box.pack_start(label, True, True, 0)
        button = Gtk.Button(" and a button")
        box.pack_start(button, True, True, 0)

        self.add(box)
        self.connect("destroy", Gtk.main_quit)
        self.show_all()

    def set_watch(self):
        """Set the mouse to be a watch."""
        watch = Gdk.Cursor(Gdk.CursorType.WATCH)
        gdk_window = self.get_root_window()
        gdk_window.set_cursor(watch)

    def long_call(self):
        """Perform a long call."""
        time.sleep(10)             # your time consuming operation here
        arrow = Gdk.Cursor(Gdk.CursorType.ARROW)
        gdk_window = self.get_root_window()
        gdk_window.set_cursor(arrow)


window = MainWindow()
window.set_watch()
GObject.idle_add(window.long_call)
Gtk.main()
</snippet></ROW><ROW><id>9881037</id><snippet>globals()</snippet></ROW><ROW><id>9881037</id><snippet># check if string A ends with string B
def endswith(A, B):
   return A.endswith(B)

# check if string A equals to string B
def stringsequal(A, B):
   return A == B
</snippet></ROW><ROW><id>9881037</id><snippet>globals()[S](A, B)
</snippet></ROW><ROW><id>9881037</id><snippet>globals()</snippet></ROW><ROW><id>9881147</id><snippet>list2</snippet></ROW><ROW><id>9881147</id><snippet>def twoone(list1):
    list2 = []
    for x in range(len(list1)):
        for y in range(len(list1)):
            list2.append(list1[x][y])
    return list2

&gt;&gt;&gt; twoone(twoDlist)
[23, 34, 67, 44, 5, 3, 7, 8, 9]
</snippet></ROW><ROW><id>9881147</id><snippet>itertools.chain()</snippet></ROW><ROW><id>9881147</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(twoDlist))
[23, 34, 67, 44, 5, 3, 7, 8, 9]
</snippet></ROW><ROW><id>9881177</id><snippet>...
self.image_tk = ImageTk.PhotoImage(image)
...
</snippet></ROW><ROW><id>9881220</id><snippet>is_main=True</snippet></ROW><ROW><id>9881220</id><snippet>is_main</snippet></ROW><ROW><id>9881220</id><snippet>is_main</snippet></ROW><ROW><id>9881220</id><snippet>class GP(models.Model):
    name = models.CharField(max_length=64)

class Patient(models.Model):
    name = models.CharField(max_length=64)

class Death(models.Model):
    current_gp = models.ForeignKey(GP)
    patient = models.ForeignKey(Patient)
    date = models.DateField()

class Consultation(models.Model):
    gp = models.ForeignKey(GP)
    patient = models.ForeignKey(Patient)
    start_date = models.DateField()
    end_date = models.DateField(blank=True, null=True)
</snippet></ROW><ROW><id>9881220</id><snippet>class GP(models.Model):
    name = models.CharField(max_length=64)

class Patient(models.Model):
    name = models.CharField(max_length=64)

class Death(models.Model):
    patient = models.ForeignKey(Patient)
    date = models.DateField()

class Consultation(models.Model):
    gp = models.ForeignKey(GP)
    patient = models.ForeignKey(Patient)
    start_date = models.DateField()
    end_date = models.DateField(blank=True, null=True)
</snippet></ROW><ROW><id>9881220</id><snippet>Consultation</snippet></ROW><ROW><id>9881220</id><snippet>is_main</snippet></ROW><ROW><id>9881220</id><snippet>def my_view(request):
    doctors = GP.objects.all()
    periods = get_time_periods() # however it is you do this...
    smallest_date = get_smallest_date(time_periods)
    largest_date = get_largest_date(time_periods)
    deaths = Death.objects.select_related(depth=1).filter(date__range=(smallest_date, largest_date))
    # build the results table with initial count of 0 to account for all doctors
    # {period: {doctor: count}}
    results = dict((period,{doctor: 0}) for doctor in doctors for period in periods) 
    for death in deaths:
        for period in time_periods: # I'm assuming this is a small range of values
            if death.date &gt; period['start_date'] and death.date &lt; period['end_date']:
                results[period][death.current_gp] += 1 # add a death to the count
</snippet></ROW><ROW><id>9881220</id><snippet>results</snippet></ROW><ROW><id>9881220</id><snippet>&lt;table&gt;    
{% for period, lookup in results.items %}
    {% for doctor, deaths in lookup.items %}
        &lt;tr&gt; 
            &lt;td&gt;{{ period }}&lt;/td&gt; 
            &lt;td&gt;{{ doctor }}&lt;/td&gt; 
            &lt;td&gt;{{ deaths }}&lt;/td&gt; 
        &lt;/tr&gt;
    {% endfor %}
{% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>9881220</id><snippet>     def my_view(request):
        doctors = GP.objects.all()
        periods = get_time_periods()
        smallest_date = get_smallest_date(time_periods)
        largest_date = get_largest_date(time_periods)
        # we make depth=3 so it spans via the PatientGPLink over to GP
        deaths = Death.objects.select_related(depth=3).filter(date__range=(smallest_date, largest_date)).filter(patient__patientgplink__ismain=True)
        results = dict((period,{doctor: 0}) for doctor in doctors for period in periods) 
        for death in deaths:
            for period in time_periods: 
                if death.date &gt; period['start_date'] and death.date &lt; period['end_date']:
                    # and we change how we access the GP
                    results[period][death.patient.patientgplink.gp] += 1
</snippet></ROW><ROW><id>9881457</id><snippet>words = {}
for line in infile:
  line = line.strip()
</snippet></ROW><ROW><id>9881457</id><snippet>line</snippet></ROW><ROW><id>9881457</id><snippet>line[0]</snippet></ROW><ROW><id>9881457</id><snippet>  first = line[0]
</snippet></ROW><ROW><id>9881457</id><snippet>  if first not in words:
    words[first] = []
</snippet></ROW><ROW><id>9881457</id><snippet>  words[first].append(line)
</snippet></ROW><ROW><id>9881457</id><snippet>itertools.groupby</snippet></ROW><ROW><id>9881457</id><snippet>from itertools import groupby
from operator import itemgetter

with open('infile.txt', 'r') as f:
  words = { k:map(str.strip, g) for k, g in groupby(f, key=itemgetter(0)) }
</snippet></ROW><ROW><id>9881457</id><snippet>groupby(sorted(f), ...)
</snippet></ROW><ROW><id>9881501</id><snippet>for x in range(len(a)):
    for y in range(len(a[x])):
        ...
</snippet></ROW><ROW><id>9881574</id><snippet>def addone(num1):
    num1=int(num1)+1
def subtractone(num1):
    num1=int(num1)-1
def combine():
    addone(1)
    subtractone(1)
</snippet></ROW><ROW><id>9881574</id><snippet>combine()</snippet></ROW><ROW><id>9881705</id><snippet>proc(5)</snippet></ROW><ROW><id>9881705</id><snippet>/proc/[pid]/oom_score</snippet></ROW><ROW><id>9881705</id><snippet>   /proc/[pid]/oom_score (since Linux 2.6.11)
          This file displays the current score that the kernel
          gives to this process for the purpose of selecting a
          process for the OOM-killer.  A higher score means that
          the process is more likely to be selected by the OOM-
          killer.  The basis for this score is the amount of
          memory used by the process, with increases (+) or
          decreases (-) for factors including:

          * whether the process creates a lot of children using
            fork(2) (+);

          * whether the process has been running a long time, or
            has used a lot of CPU time (-);

          * whether the process has a low nice value (i.e., &gt; 0)
            (+);

          * whether the process is privileged (-); and

          * whether the process is making direct hardware access
            (-).

          The oom_score also reflects the bit-shift adjustment
          specified by the oom_adj setting for the process.
</snippet></ROW><ROW><id>9881705</id><snippet>oom_score</snippet></ROW><ROW><id>9881705</id><snippet>dd(1)</snippet></ROW><ROW><id>9881705</id><snippet>seek</snippet></ROW><ROW><id>9881705</id><snippet>mkswap(8)</snippet></ROW><ROW><id>9881705</id><snippet>swapon(8)</snippet></ROW><ROW><id>9881705</id><snippet>fstab(5)</snippet></ROW><ROW><id>9881859</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path
['', '/usr/lib/python27.zip', '/usr/lib/python2.7', ...]
</snippet></ROW><ROW><id>9881859</id><snippet>os.listdir</snippet></ROW><ROW><id>9881859</id><snippet>import sys, os 
standardlib = os.listdir(sys.path[n])
</snippet></ROW><ROW><id>9881859</id><snippet>stdlibs = []
for lib in sys.path:
    if os.path.isdir(lib): 
        for module in os.listdir(lib):
            stdlibs.append(lib + "/" + module)
</snippet></ROW><ROW><id>9881859</id><snippet>os.getcwd()</snippet></ROW><ROW><id>9881920</id><snippet>SPARQLWrapper</snippet></ROW><ROW><id>9881920</id><snippet>rdflib</snippet></ROW><ROW><id>9881920</id><snippet>InMemory</snippet></ROW><ROW><id>9881920</id><snippet>import rdflib.graph as g
graph = g.Graph()
graph.parse('filename.rdf', format='rdf')
print graph.serialize(format='pretty-xml')
</snippet></ROW><ROW><id>9881972</id><snippet>            raise argparse.ArgumentTypeError("Duplicate OuterIPs found")
</snippet></ROW><ROW><id>9881972</id><snippet>            raise argparse.ArgumentError(self, "Duplicate OuterIPs found")
</snippet></ROW><ROW><id>9881984</id><snippet>from functools import partial

i = 0
f0 = partial(callback, i)
i = 1
f1 = partial(callback, i)

f0()
# 0
f1()
# 1
</snippet></ROW><ROW><id>9881984</id><snippet>partial</snippet></ROW><ROW><id>9881984</id><snippet>def callback(val1, val2):
   print "{0} {1}".format(val1, val2)

i = 0
x = 8
f0 = partial(callback, i)
f0(x)
# 0 8
</snippet></ROW><ROW><id>9881984</id><snippet>callback(val1, val2)</snippet></ROW><ROW><id>9881984</id><snippet>callback(val2)</snippet></ROW><ROW><id>9881984</id><snippet>val1</snippet></ROW><ROW><id>9881984</id><snippet>f0 = (lambda val1: lambda val2: callback(val1, val2))(i)
</snippet></ROW><ROW><id>9881984</id><snippet>def callback(val1, val2):
    return val1 / val2
</snippet></ROW><ROW><id>9881984</id><snippet>def wrapper(fn, val1):
    def wrapped(val2):
            return fn(val1, val2)
    return wrapped

f0 = wrapper(callback, i)
f0(0)

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in wrapped
  File "&lt;stdin&gt;", line 2, in callback
ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>9881984</id><snippet>f0 = (lambda val1: lambda val2: callback(val1, val2))(i)
f0(0)

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;lambda&gt;
  File "&lt;stdin&gt;", line 2, in callback
ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>9881984</id><snippet>f0 = partial(callback, i)
f0(0)

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in callback
ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>9882235</id><snippet>def stuff():
    words = []
    for word in wordStr:
        words.append(word.strip())
    print words
    return words
</snippet></ROW><ROW><id>9882439</id><snippet>def example():
    example.has_been_called = True
    pass
example.has_been_called = False


example()

#Actual Code!:
if example.has_been_called:
   print("foo bar")
</snippet></ROW><ROW><id>9882439</id><snippet>import functools

def trackcalls(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        wrapper.has_been_called = True
        return func(*args, **kwargs)
    wrapper.has_been_called = False
    return wrapper

@trackcalls
def example():
    pass


example()

#Actual Code!:
if example.has_been_called:
   print("foo bar")
</snippet></ROW><ROW><id>9882489</id><snippet>putAll</snippet></ROW><ROW><id>9882489</id><snippet>dict.update</snippet></ROW><ROW><id>9882489</id><snippet>&gt;&gt;&gt; d1 = { 1: 2, 3: 4 }
&gt;&gt;&gt; d2 = { 5: 6, 3: 1 }
&gt;&gt;&gt; d1.update(d2)
&gt;&gt;&gt; d1
{1: 2, 3: 1, 5: 6}
</snippet></ROW><ROW><id>9882548</id><snippet>unzipfile1 = gzip.open(zipfile1, 'wb')
</snippet></ROW><ROW><id>9882548</id><snippet>zipfile1</snippet></ROW><ROW><id>9882548</id><snippet>while (block = unzipfile1.read(4096*4)):
    p1.stdin.write(a)
</snippet></ROW><ROW><id>9882548</id><snippet>while (block = unzipfile1.read(4096*4)):
    p1.stdin.write(a)
    p2.stdin.write(p1.stdout.read())
</snippet></ROW><ROW><id>9882548</id><snippet>p1</snippet></ROW><ROW><id>9882548</id><snippet>p2</snippet></ROW><ROW><id>9882548</id><snippet>p1</snippet></ROW><ROW><id>9882548</id><snippet>p1</snippet></ROW><ROW><id>9882548</id><snippet>gzip -cd file1.gz file2.gz file3.gz | dataclean.py | dataprocess.pl
</snippet></ROW><ROW><id>9882548</id><snippet>gzip(1)</snippet></ROW><ROW><id>9882548</id><snippet>dataclean.py</snippet></ROW><ROW><id>9882548</id><snippet>dataprocess.pl</snippet></ROW><ROW><id>9882603</id><snippet>&gt;&gt;&gt; alphabet = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; list(alphabet) == sorted(alphabet)
True
&gt;&gt;&gt; list('blow') == sorted('blow')
True
&gt;&gt;&gt; list('suck') == sorted('suck')
False
</snippet></ROW><ROW><id>9882603</id><snippet>&gt;&gt;&gt; alphabetical = lambda w: list(w.lower()) == sorted(w.lower())
</snippet></ROW><ROW><id>9882603</id><snippet>&gt;&gt;&gt; lst = ['blow', 'suck', 'abc']
&gt;&gt;&gt; filter(alphabetical, lst)
['blow', 'abc']
</snippet></ROW><ROW><id>9882603</id><snippet>O(n*log n)</snippet></ROW><ROW><id>9882603</id><snippet>O(n)</snippet></ROW><ROW><id>9882603</id><snippet>sorted</snippet></ROW><ROW><id>9882603</id><snippet>sum(1 for w in w if ...)</snippet></ROW><ROW><id>9882723</id><snippet>input()</snippet></ROW><ROW><id>9882723</id><snippet>raw_input()</snippet></ROW><ROW><id>9882723</id><snippet>except:</snippet></ROW><ROW><id>9882723</id><snippet>except ValueError:</snippet></ROW><ROW><id>9882723</id><snippet>x</snippet></ROW><ROW><id>9882723</id><snippet>y</snippet></ROW><ROW><id>9882723</id><snippet>def get_float_from_user (prompt):
    while True:
        try:
            user_input = float(raw_input(prompt))
            return user_input
        except ValueError:
            print ("Not a floating point number. Please try again.")

x = get_float_from_user("Enter x.")
y = get_float_from_user("Enter y.")

print (x+y)
</snippet></ROW><ROW><id>9882827</id><snippet>players = [player1, player2]
</snippet></ROW><ROW><id>9882827</id><snippet>players[player_turn-1]
</snippet></ROW><ROW><id>9882827</id><snippet>if players[player_turn-1].winner():
    ...
</snippet></ROW><ROW><id>9882828</id><snippet>import package.user
user.doSomething()
</snippet></ROW><ROW><id>9882897</id><snippet>d = addresses_table.delete(addresses_table.c.retired == 1)
d.execute()
</snippet></ROW><ROW><id>9882897</id><snippet>execute()</snippet></ROW><ROW><id>9882897</id><snippet>execute(d)</snippet></ROW><ROW><id>9883046</id><snippet>count += len(a[i:])</snippet></ROW><ROW><id>9883046</id><snippet>len(a)</snippet></ROW><ROW><id>9883046</id><snippet>len_a</snippet></ROW><ROW><id>9883046</id><snippet>a</snippet></ROW><ROW><id>9883046</id><snippet>c += a[i:] + b[j:]</snippet></ROW><ROW><id>9883046</id><snippet>c.extend(a[i:])</snippet></ROW><ROW><id>9883046</id><snippet>c.extend(b[j:])</snippet></ROW><ROW><id>9883046</id><snippet>extend</snippet></ROW><ROW><id>9883046</id><snippet>c</snippet></ROW><ROW><id>9883046</id><snippet>append</snippet></ROW><ROW><id>9883232</id><snippet>for c in word:
    if c in consonants:
        # do something
</snippet></ROW><ROW><id>9883232</id><snippet>(word.count(c) for c in consonants)
</snippet></ROW><ROW><id>9883232</id><snippet>sum()</snippet></ROW><ROW><id>9883279</id><snippet>0  1  2  3
4  5  6  7
8  9 10 11
</snippet></ROW><ROW><id>9883279</id><snippet>&gt;&gt;&gt; i1 = [1,2]
&gt;&gt;&gt; i2 = [0,2]
&gt;&gt;&gt; a[i1,i2]
array([ 4, 10])
</snippet></ROW><ROW><id>9883279</id><snippet>&gt;&gt;&gt; b1 = [False,True,True]       # 0:no,  1:yes, 2:yes       ==&gt; [1,2]
&gt;&gt;&gt; b2 = [True,False,True,False] # 0:yes, 1:no,  2:yes, 3:no ==&gt; [0,2]
</snippet></ROW><ROW><id>9883279</id><snippet>i1</snippet></ROW><ROW><id>9883279</id><snippet>i2</snippet></ROW><ROW><id>9883279</id><snippet>a[b1,b2]</snippet></ROW><ROW><id>9883279</id><snippet>b1</snippet></ROW><ROW><id>9883279</id><snippet>b2</snippet></ROW><ROW><id>9883279</id><snippet>True</snippet></ROW><ROW><id>9883283</id><snippet>from redis import Redis

r = Redis(db=1)
r.flushdb()
def store(t):
    h, m = map(int, t.split(':'))
    m = m - m % 5
    r.zincrby('tc', '%d:%02d' % (h, m), 1)

store('1:02')
store('1:30')
store('1:32')
store('1:35')

print r.zrange('tc', 0, -1, withscores=True)
</snippet></ROW><ROW><id>9883283</id><snippet>[('1:00', 1.0), ('1:35', 1.0), ('1:30', 2.0)]
</snippet></ROW><ROW><id>9883378</id><snippet>$</snippet></ROW><ROW><id>9883378</id><snippet>PATH=...
</snippet></ROW><ROW><id>9883419</id><snippet>for i, j in enumerate(u'Сон'): print '%d: %s' % (i+1, j)
</snippet></ROW><ROW><id>9883419</id><snippet>1: С
2: о
3: н
</snippet></ROW><ROW><id>9883470</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>9883477</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector

from nrl.items import NrlItem

class nrl(BaseSpider):
    name = "nrl"
    allowed_domains = ["live.nrlstats.com"] # domains should be like this
    start_urls = [
        "http://live.nrlstats.com/nrl/ladder.html",
        ]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        rows = hxs.select('//table[@class="tabler"]//tr[starts-with(@class, "r")]') # select team rows
        items = []
        for row in rows:
           item = nrlItem()
           columns = row.select('./td/text()').extract() # select columns for the selected row
           item['team'] = columns[0]
           item['P'] = int(columns[1])
           item['W'] = int(columns[2])
           ...
           items.append(item)
        return items
</snippet></ROW><ROW><id>9883477</id><snippet>//table[@class="tabler"//tr[starts-with(@class, "r")]</snippet></ROW><ROW><id>9883477</id><snippet>hxs.select(xpath_query)</snippet></ROW><ROW><id>9883477</id><snippet>HtmlXPathSelector</snippet></ROW><ROW><id>9883477</id><snippet>hxs.extract()</snippet></ROW><ROW><id>9883545</id><snippet>favicon.ico</snippet></ROW><ROW><id>9883545</id><snippet>request.postpath</snippet></ROW><ROW><id>9883545</id><snippet>render</snippet></ROW><ROW><id>9883610</id><snippet>time.mktime</snippet></ROW><ROW><id>9883610</id><snippet>time.mktime(datetime.now().timetuple())
</snippet></ROW><ROW><id>9883610</id><snippet>time.time()</snippet></ROW><ROW><id>9883610</id><snippet>datetime.utcnow()</snippet></ROW><ROW><id>9883622</id><snippet>category= [{'Cat':'Book','Item':'LongBook','Qty':'25'}, 
           {'Cat':'Book','Item':'Diary','Qty':'20'}, 
           {'Cat':'Pen','Item':'BallPoint','Qty':'30'}]

from collections import defaultdict

output = defaultdict(list)

for row in category:
    output['Cat' + ':' + row['Cat']].append(row)

print output.values()

&gt;&gt;&gt;[[{'Item': 'BallPoint', 'Qty': '30', 'Cat': 'Pen'}], [{'Item': 'LongBook', 'Qty': '25', 'Cat': 'Book'}, {'Item': 'Diary', 'Qty': '20', 'Cat': 'Book'}]]
</snippet></ROW><ROW><id>9883622</id><snippet>category= [{'Cat':'Book','Item':'LongBook','Qty':'25'}, 
           {'Cat':'Book','Item':'Diary','Qty':'20'}, 
           {'Cat':'Pen','Item':'BallPoint','Qty':'30'}]

from itertools import groupby

for key, vals in groupby(category, lambda x: x['Cat']):
    print key, list(vals)

&gt;&gt;&gt;Book [{'Item': 'LongBook', 'Qty': '25', 'Cat': 'Book'}, {'Item': 'Diary', 'Qty': '20', 'Cat': 'Book'}]
&gt;&gt;&gt;Pen [{'Item': 'BallPoint', 'Qty': '30', 'Cat': 'Pen'}]
</snippet></ROW><ROW><id>9884150</id><snippet>Team1 = ["Red", 10]
Team2 = ["Green", 5]
Team3 = ["Blue", 6]
Team4 = ["Yellow", 8]
Team5 = ["Purple", 9]
Team6 = ["Brown", 4]

TeamList = [Team1, Team2, Team3, Team4, Team5, Team6]

# print the top row of team names, tab separated, starting two tabs over:
print '\t\t', '\t'.join(team[0] for team in TeamList)

# for each row in the chart
for team in TeamList:
    # put two tabs between each score difference column
    scoreline = '\t\t'.join(str(team[1] - other[1]) for other in TeamList)
    # and print the team name, a tab, then the score columns
    print team[0], '\t', scoreline
</snippet></ROW><ROW><id>9884174</id><snippet>|</snippet></ROW><ROW><id>9884174</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile("ab|bc")
&gt;&gt;&gt;
&gt;&gt;&gt; print pattern.match("abbbb")
&lt;_sre.SRE_Match object at 0x105117918&gt;
&gt;&gt;&gt; print pattern.match("fooo")
None
&gt;&gt;&gt; print pattern.match("bcdd")
&lt;_sre.SRE_Match object at 0x105117918&gt;
&gt;&gt;&gt; print pattern.match("abc")
&lt;_sre.SRE_Match object at 0x105117918&gt;
</snippet></ROW><ROW><id>9884174</id><snippet>&gt;&gt;&gt; pattern = re.compile("(red|green) light")
&gt;&gt;&gt; print pattern.match("red light")
&lt;_sre.SRE_Match object at 0x105117918&gt;
&gt;&gt;&gt; print pattern.match("red lights everywhere")
&lt;_sre.SRE_Match object at 0x1051116c0&gt;
&gt;&gt;&gt; print pattern.match("green lights forever")
&lt;_sre.SRE_Match object at 0x105117918&gt;
&gt;&gt;&gt; print pattern.match("blue lights begone")
None
</snippet></ROW><ROW><id>9884193</id><snippet>for line in file:
    line = line.strip()
    line = line.upper()

    if len(line) == wordlen:

        # Set some counters/containers.
        pair_is_abbrev = 1 #&lt;-- Marks true/false if pair is in abbrev list.
        cur_letter_indx = 0 #&lt;-- Counts the location we're at in this line.

        # Loop until we find a two-letter sequence that's not an abbrev.
        # or until we hit the end of this line (the word length).
        while(pair_is_abbrev and cur_letter_indx &lt;= wordlen-1):
            cur_pair = line[cur_letter_indx:(cur_letter_indx+2)] #&lt;-- Get current two letters
            pair_is_abbrev = (cur_pair in states) #&lt;-- Python way to check if that pair is in your list of abbrevs.
            cur_letter_indx = cur_letter_indx + 1 #&lt;-- Increment the counter.

        # Once the loop terminates, pair_is_abbrev can only be true if we
        # made it all the way to the end of the line successfully. If so,
        # then we found an all-abbrevs word. Otherwise, move on to the next line.
        if(pair_is_abbrev):
            print "Found a word made of abbreviations that is the right length:"
            print line
</snippet></ROW><ROW><id>9884244</id><snippet>import itertools
for i in itertools.count():
  if thereIsAReasonToBreak(i):
    break
</snippet></ROW><ROW><id>9884244</id><snippet>xrange()</snippet></ROW><ROW><id>9884244</id><snippet>import sys
for i in range(sys.maxint):
  if thereIsAReasonToBreak(i):
    break
</snippet></ROW><ROW><id>9884244</id><snippet>range()</snippet></ROW><ROW><id>9884244</id><snippet>import sys
for i in range(sys.maxsize**10):  # you could go even higher if you really want
  if thereIsAReasonToBreak(i):
    break
</snippet></ROW><ROW><id>9884259</id><snippet>__iter__</snippet></ROW><ROW><id>9884259</id><snippet>__getitem__</snippet></ROW><ROW><id>9884259</id><snippet>IndexError</snippet></ROW><ROW><id>9884259</id><snippet>next</snippet></ROW><ROW><id>9884259</id><snippet>__next__</snippet></ROW><ROW><id>9884259</id><snippet>for</snippet></ROW><ROW><id>9884259</id><snippet>map</snippet></ROW><ROW><id>9884259</id><snippet>next</snippet></ROW><ROW><id>9884379</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>9884379</id><snippet>Popen</snippet></ROW><ROW><id>9884379</id><snippet>import subprocess

p = subprocess.Popen(["/bin/cat", "hello.txt"], stdout=subprocess.PIPE)

for line in p.stdout:
    print("PIPE OUT [%s]" % line)
</snippet></ROW><ROW><id>9884696</id><snippet>import urllib2
import pprint
import json
add = "Buckingham Palace, London, SW1A 1AA"
add = urllib2.quote(add)
geocode_url = "http://maps.googleapis.com/maps/api/geocode/json?address=%s&amp;sensor=false&amp;region=uk" % add
print geocode_url
req = urllib2.urlopen(geocode_url)
jsonResponse = json.loads(req.read())
pprint.pprint(jsonResponse) 
</snippet></ROW><ROW><id>9884716</id><snippet>True</snippet></ROW><ROW><id>9884716</id><snippet>xtype</snippet></ROW><ROW><id>9884716</id><snippet>def argcheck(stack, funcname, arglist, exceptlist):
    returnlist=[]
    count=0
    for xtype in arglist:
        if not xtype or stack[-1] in xtype:
            returnlist.append(stack[-1])
            stack.pop()
        else:
            raise Exception(funcname, exceptlist[count])
</snippet></ROW><ROW><id>9884756</id><snippet>def word_chain(chain_so_far, target, dictionary):
    last_word = chain_so_far[-1]
    if last_word == target:
        print chain_so_far
        return True
    for word in dictionary:
        if have_one_different_letter(word, last_word) and word not in chain_so_far:
            word_chain(chain_so_far + [word], target)
</snippet></ROW><ROW><id>9884756</id><snippet>word_chain(['love'], 'hate', your dict)</snippet></ROW><ROW><id>9884756</id><snippet>have_one_different_letter()</snippet></ROW><ROW><id>9885004</id><snippet>&gt;&gt;&gt; stringexample = 'mystri$ng&amp;'
&gt;&gt;&gt; '*' in stringexample
False
&gt;&gt;&gt; '$' in stringexample
True
&gt;&gt;&gt; '&amp;' in stringexample
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9885208</id><snippet>str[:n]</snippet></ROW><ROW><id>9885208</id><snippet>str[n+1:]</snippet></ROW><ROW><id>9885208</id><snippet>str[:n]</snippet></ROW><ROW><id>9885208</id><snippet>str[0:n]</snippet></ROW><ROW><id>9885208</id><snippet>str[n:]</snippet></ROW><ROW><id>9885208</id><snippet>str[n:len(str)]</snippet></ROW><ROW><id>9885282</id><snippet>class campSpider(BaseSpider):
   name = 'campSpider'
</snippet></ROW><ROW><id>9885287</id><snippet>finally</snippet></ROW><ROW><id>9885287</id><snippet>try</snippet></ROW><ROW><id>9885287</id><snippet>with</snippet></ROW><ROW><id>9885287</id><snippet>with locked(myLock):
    # Code here executes with myLock held.  The lock is
    # guaranteed to be released when the block is left (even
    # if via return or by an uncaught exception).
</snippet></ROW><ROW><id>9885287</id><snippet>open()</snippet></ROW><ROW><id>9885287</id><snippet>with</snippet></ROW><ROW><id>9885287</id><snippet>try..except</snippet></ROW><ROW><id>9885539</id><snippet>import collections

result = ['a', ['b', ['c', ['d', []]]], 'z', []]

def get_result() :
    for r in result :
        yield r


def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el


def remove_z(l) :
    for i in l :
        if i != 'z' :
            yield i

print [ l for l in remove_z(flatten(get_result()))]
</snippet></ROW><ROW><id>9885539</id><snippet>['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>9885755</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; page = urllib2.urlopen("http://maps.google.com/maps/place?cid=2860002122405830765").read()

# have to search the page source since the link is added in javascript
&gt;&gt;&gt; mo = re.search(r'&lt;div class="pp-more-reviews"&gt;.*?&lt;/div&gt;', page)
&gt;&gt;&gt; div = lxml.html.fromstring(mo.group(0))
&gt;&gt;&gt; href = div.find("a").attrib["href"]
</snippet></ROW><ROW><id>9885765</id><snippet>result = array([subarray[index] for subarray, index in zip(m, select)])
</snippet></ROW><ROW><id>9885834</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>9885834</id><snippet>&lt;type 'str'&gt;&lt;/type&gt;</snippet></ROW><ROW><id>9886063</id><snippet>@register.filter
def crash(request):
    crash_here
</snippet></ROW><ROW><id>9886063</id><snippet>{{ request|crash }}</snippet></ROW><ROW><id>9886235</id><snippet>modelobject.get_absolute_url()</snippet></ROW><ROW><id>9886235</id><snippet>django.contrib.contenttypes.views.shortcut</snippet></ROW><ROW><id>9886235</id><snippet>&lt;a name="c{{ comment.id }}"&gt;&lt;/a&gt;</snippet></ROW><ROW><id>9886343</id><snippet>$ export LC_ALL=en_US.UTF-8</snippet></ROW><ROW><id>9886343</id><snippet>$ export LANG=en_US.UTF-8</snippet></ROW><ROW><id>9886343</id><snippet>locale</snippet></ROW><ROW><id>9886343</id><snippet>locale -a</snippet></ROW><ROW><id>9886343</id><snippet>en_US.UTF-8</snippet></ROW><ROW><id>9886351</id><snippet>lines = [
   ["line1", "much_more_items1", "a"],
   ["line2", "much_more_items2", "c"],
   ["line3", "much_more_items3", "b"],
]
mapping = {"a": 5, "b": 10, "c": 15}
# here I assume the key you need to remove is at last position of your items
result = [ line[0:-1] + [mapping[line[-1]] for line in lines ]
</snippet></ROW><ROW><id>9886586</id><snippet>sys.modules</snippet></ROW><ROW><id>9886586</id><snippet>sys.modules</snippet></ROW><ROW><id>9886615</id><snippet>unfollowThese = [ person for person in iFollow if person not in followsMe ]
</snippet></ROW><ROW><id>9886615</id><snippet>sets</snippet></ROW><ROW><id>9886615</id><snippet>import sets
s1 = sets.Set(iFollow)
unfollowThese = s1.difference(followsMe)
</snippet></ROW><ROW><id>9886658</id><snippet>A = numpy.array((X, Y, Z), dtype=float)
</snippet></ROW><ROW><id>9886658</id><snippet>numpy.array</snippet></ROW><ROW><id>9886658</id><snippet>numpy.array</snippet></ROW><ROW><id>9886658</id><snippet>object</snippet></ROW><ROW><id>9886658</id><snippet>&gt;&gt;&gt; import numpy

&gt;&gt;&gt; x = [0, 0, 0, 0]
&gt;&gt;&gt; y = [3, 4, 4, 3]
&gt;&gt;&gt; z = [3, 4, 3, 4]

&gt;&gt;&gt; A = numpy.array((x, y, z), dtype=float)
&gt;&gt;&gt; A
array([[ 0., 0., 0., 0.],
       [ 3., 4., 4., 3.],
       [ 3., 4., 3., 4.]])
&gt;&gt;&gt; A.shape
(3L, 4L)
</snippet></ROW><ROW><id>9886785</id><snippet>pip install scraperwiki</snippet></ROW><ROW><id>9886800</id><snippet>process.stdin.write</snippet></ROW><ROW><id>9887112</id><snippet>$ ./ssh_demo.py
Hostname: 192.168.1.10
*** Host key OK.
Username [bryan]: root
Trying ssh-agent key eee5638f390e1698898984b10adfa9317 ... success!
*** Here we go!

Linux top.secret.com 2.9.37-1-amd64 #1 SMP Thu Nov 3 03:41:26 UTC 2011 x86_64
┌┌(root@top)-(10:44am-:-03/27)┌-¨-¨¨˙
</snippet></ROW><ROW><id>9887112</id><snippet>from fabric.api import *
import ssh
ssh.util.log_to_file("paramiko.log", 10)
</snippet></ROW><ROW><id>9887112</id><snippet>tail -f /var/log/auth.log 
Mar 28 11:12:36 xxxxxxxxxxx sshd[17652]: Invalid user bryan from xxx.xxx.xxx.xxx
</snippet></ROW><ROW><id>9887112</id><snippet>tail -f paramiko.log    
DEB [20120328-11:39:29.038] thr=1   ssh.transport: starting thread (client mode): 0x8dfc66cL
INF [20120328-11:39:29.066] thr=1   ssh.transport: Connected (version 2.0, client OpenSSH_5.5p1)
DEB [20120328-11:39:29.093] thr=1   ssh.transport: kex algos:['diffie-hellman-group-exchange-sha256', 'diffie-hellman-group-exchange-sha1', 'diffie-hellman-group14-sha1', 'diffie-hellman-group1-sha1'] server key:['ssh-rsa', 'ssh-dss'] client encrypt:['aes128-ctr', 'aes192-ctr', 'aes256-ctr', 'arcfour256', 'arcfour128', 'aes128-cbc', '3des-cbc', 'blowfish-cbc', 'cast128-cbc', 'aes192-cbc', 'aes256-cbc', 'arcfour', 'rijndael-cbc@lysator.liu.se'] server encrypt:['aes128-ctr', 'aes192-ctr', 'aes256-ctr', 'arcfour256', 'arcfour128', 'aes128-cbc', '3des-cbc', 'blowfish-cbc', 'cast128-cbc', 'aes192-cbc', 'aes256-cbc', 'arcfour', 'rijndael-cbc@lysator.liu.se'] client mac:['hmac-md5', 'hmac-sha1', 'umac-64@openssh.com', 'hmac-ripemd160', 'hmac-ripemd160@openssh.com', 'hmac-sha1-96', 'hmac-md5-96'] server mac:['hmac-md5', 'hmac-sha1', 'umac-64@openssh.com', 'hmac-ripemd160', 'hmac-ripemd160@openssh.com', 'hmac-sha1-96', 'hmac-md5-96'] client compress:['none', 'zlib@openssh.com'] server compress:['none', 'zlib@openssh.com'] client lang:[''] server lang:[''] kex follows?False
DEB [20120328-11:39:29.093] thr=1   ssh.transport: Ciphers agreed: local=aes128-ctr, remote=aes128-ctr
DEB [20120328-11:39:29.093] thr=1   ssh.transport: using kex diffie-hellman-group1-sha1; server key type ssh-rsa; cipher: local aes128-ctr, remote aes128-ctr; mac: local hmac-sha1, remote hmac-sha1; compression: local none, remote none
DEB [20120328-11:39:29.183] thr=1   ssh.transport: Switch to new keys ...
DEB [20120328-11:39:29.224] thr=2   ssh.transport: Trying SSH agent key cda5638f390e166864444b1093b91017
DEB [20120328-11:39:29.272] thr=1   ssh.transport: userauth is OK
INF [20120328-11:39:53.310] thr=1   ssh.transport: Authentication (publickey) failed.
DEB [20120328-11:41:29.076] thr=1   ssh.transport: EOF in transport thread
</snippet></ROW><ROW><id>9887112</id><snippet>$ cat ./fabfile.py
from fabric.api import *
import ssh
ssh.util.log_to_file("paramiko.log", 10)

env.user = 'bryan'

def host_type():
 run('uname -s')

def diskfree():
 run('df -h') 
</snippet></ROW><ROW><id>9887112</id><snippet>env.user = 'bryan'
</snippet></ROW><ROW><id>9887281</id><snippet>%(day)s</snippet></ROW><ROW><id>9887281</id><snippet>%s</snippet></ROW><ROW><id>9887281</id><snippet>%d</snippet></ROW><ROW><id>9887281</id><snippet>class RunnersBadge(Badge):
    requirements=#get the previous dict from database
    description="You get this badge because you've runned %(arg_0)d meters in %(arg_1)d minutes"
</snippet></ROW><ROW><id>9887281</id><snippet>from django.utils.translation import ugettext as _

class RunnersBadge(Badge):
    requirements=#get the previous dict from database
    description=_("You get this badge because you've ran %(meter_count)d meters in %(minute_count)d minutes")
</snippet></ROW><ROW><id>9887315</id><snippet>import re
x = ['P: 7678643 F: 123456 E: ttt@jhj.in']
Split = re.split(' ', x[0])
y = []
for i in range(0, len(Split), 2):
    y.append(Split[i] + Split[i+1])
</snippet></ROW><ROW><id>9887412</id><snippet>readlines()</snippet></ROW><ROW><id>9887412</id><snippet>data = [line.split(', ') for line in fptr]
</snippet></ROW><ROW><id>9887456</id><snippet>&gt;&gt;&gt; lst = ['hello', 'blah', 'boo', 'braininess']
&gt;&gt;&gt; heapq.nlargest(2, lst, key=len)
['braininess', 'hello']
</snippet></ROW><ROW><id>9887483</id><snippet>import csv
import re


def read_general(fname):
    # Read general info to dict with 'PR 123'-like keys

    # Gerexp that will split row into ready-to-use dict
    re_name = re.compile(r'''
        (?P&lt;Name&gt;.+)
        \ --\  # Separator + space
        (?P&lt;Division&gt;.+)
        \  # Space
        \(
            (?P&lt;Division_Abbreviation&gt;.*)
        \)
        \  # Space
        (?P&lt;Id&gt;\d+)
        \  # Space
        \[Age:\  # Space at the end
            (?P&lt;Age&gt;\d+)
        \]
        ''', re.X)

    general = {}

    with open(fname, 'rt') as f:
        for line in f:
            line = line.strip()
            m = re_name.match(line)

            if m:
                # Name line, start new man
                man = m.groupdict()
                key = '%s %s' % (m.group('Division_Abbreviation'), m.group('Id'))
                general[key] = man

            elif line:
                # Non empty lines
                # Add values to dict
                key, value = line.split(': ', 1)
                man[key] = value

    return general


def add_bool_criteria(fname, field, general):
    # Append a field with YES/NO value

    with open(fname, 'rt') as f:
        yes_keys = set()

        # Phase one, gather all keys
        for line in f:
            line = line.strip()
            _, keys = line.split(': ', 1)

            yes_keys.update(keys.split(', '))

        # Fill data
        for key, man in general.items():  # iteritems() will be faster in Python 2.x
            man[field] = 'YES' if key in yes_keys else 'NO'


def save_csv(fname, general):
    with open(fname, 'wt') as f:
        # Gather field names
        all_fields = set()
        for value in general.values():
            all_fields.update(value.keys())

        # Write to csv
        w = csv.DictWriter(f, all_fields)
        w.writeheader()
        w.writerows(general.values())


def main():
    general = read_general('general.txt')
    add_bool_criteria('cars.txt', 'Car?', general)
    add_bool_criteria('house.txt', 'House?', general)
    from pprint import pprint
    pprint(general)
    save_csv('result.csv', general)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9887491</id><snippet>b1 = np.zeros((4,5))
b2 = np.ones((4,3))
pos_v, pos_h = 2, 3  # offset
v_range1 = slice(max(0, pos_v), max(min(pos_v + b2.shape[0], b1.shape[0]), 0))
h_range1 = slice(max(0, pos_h), max(min(pos_h + b2.shape[1], b1.shape[1]), 0))

v_range2 = slice(max(0, -pos_v), min(-pos_v + b1.shape[0], b2.shape[0]))
h_range2 = slice(max(0, -pos_h), min(-pos_h + b1.shape[1], b2.shape[1]))

b1[v_range1, h_range1] += b2[v_range2, h_range2]
</snippet></ROW><ROW><id>9887500</id><snippet>stringio</snippet></ROW><ROW><id>9887500</id><snippet>zipfile</snippet></ROW><ROW><id>9887502</id><snippet>L</snippet></ROW><ROW><id>9887502</id><snippet>&gt;&gt;&gt; def f(a, L=[]):
        L.append(a)
        print id(L)
        return L

&gt;&gt;&gt; print(f(1, [1, 2]))
56512064
[1, 2, 1]
&gt;&gt;&gt; print(f(1))
51251080
[1]
&gt;&gt;&gt; print(f(2))
51251080
[1, 2]
&gt;&gt;&gt; print(f(3))
51251080
[1, 2, 3]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9887502</id><snippet>L</snippet></ROW><ROW><id>9887532</id><snippet>import datetime

datetime.datetime.strptime(u'Mar232012', '%b%d%Y').strftime('%m/%d/%Y')
</snippet></ROW><ROW><id>9887532</id><snippet>'03/23/2012'</snippet></ROW><ROW><id>9887646</id><snippet>&gt;&gt;&gt; 3**-3 == 1.0/3**3
True
</snippet></ROW><ROW><id>9887646</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.array([1,2,3,4,5], dtype='float32')
&gt;&gt;&gt; arr**-3 == 1/arr**3
array([ True,  True,  True,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>9887651</id><snippet>&gt; import numpy as np
&gt; import scipy.sparse as sp
</snippet></ROW><ROW><id>9887651</id><snippet>&gt; np.shape(your_matrix_here) #equals to MATLAB: &gt; size(your_matrix_here)
</snippet></ROW><ROW><id>9887651</id><snippet>matrix([[ 1000.],  #shape: (1, 100)
        [ 1000.],
        [ 1000.],
        ...
</snippet></ROW><ROW><id>9887651</id><snippet>array([ 0.,  0., ... ,  0.,  0.]) #shape: (100,)
</snippet></ROW><ROW><id>9887651</id><snippet>matrix([[ 1000.,  1000., ... , 1000.,  1000.]]) #shape: (1, 100)
</snippet></ROW><ROW><id>9887651</id><snippet>d.dot(b).todense().transpose()[0]</snippet></ROW><ROW><id>9887651</id><snippet>matrix([[ 1000.,  1000., ... , 1000.,  1000.]]) #still the same!
</snippet></ROW><ROW><id>9887651</id><snippet>&gt; np.array(d.dot(b).todense().transpose())[0]
</snippet></ROW><ROW><id>9887651</id><snippet>array([ 1000.,  1000., ... 1000.,  1000.])
</snippet></ROW><ROW><id>9887651</id><snippet>&gt; np.shape(np.array(d.dot(b).todense().transpose())[0]) #(100,)

&gt; np.shape(a[:,1])                                      #(100,)
</snippet></ROW><ROW><id>9887651</id><snippet>a[:,k] += d.dot(b).todense()
</snippet></ROW><ROW><id>9887651</id><snippet>a[:,k] += np.array(d.dot(b).todense().transpose())[0]
</snippet></ROW><ROW><id>9887720</id><snippet>copy</snippet></ROW><ROW><id>9887720</id><snippet>__copy__()</snippet></ROW><ROW><id>9887720</id><snippet>__deepcopy__()</snippet></ROW><ROW><id>9887720</id><snippet>self</snippet></ROW><ROW><id>9888047</id><snippet>eval</snippet></ROW><ROW><id>9888047</id><snippet>help(name)</snippet></ROW><ROW><id>9888047</id><snippet>code</snippet></ROW><ROW><id>9888063</id><snippet>sum</snippet></ROW><ROW><id>9888063</id><snippet>total = sum(T)
</snippet></ROW><ROW><id>9888063</id><snippet>sum</snippet></ROW><ROW><id>9888063</id><snippet>total = 0
for c in T:
    total += c
</snippet></ROW><ROW><id>9888077</id><snippet>x().funlist[1]()</snippet></ROW><ROW><id>9888077</id><snippet>funlist</snippet></ROW><ROW><id>9888077</id><snippet>A1</snippet></ROW><ROW><id>9888077</id><snippet>B1</snippet></ROW><ROW><id>9888077</id><snippet>funlist</snippet></ROW><ROW><id>9888077</id><snippet>x</snippet></ROW><ROW><id>9888077</id><snippet>funlist</snippet></ROW><ROW><id>9888077</id><snippet>x</snippet></ROW><ROW><id>9888077</id><snippet>x_instance = x()
x_instance.funlist[1](x_instance)
</snippet></ROW><ROW><id>9888171</id><snippet>__file__</snippet></ROW><ROW><id>9888171</id><snippet>import os.path

script_dir = os.path.dirname(os.path.abspath(__file__))
target_dir = os.path.join(script_dir, '..', 'test')
print(os.getcwd())
os.chdir(target_dir)
print(os.getcwd())
os.chdir(script_dir)
print(os.getcwd())
</snippet></ROW><ROW><id>9888171</id><snippet>e:\parser&gt;c:\Python27\python.exe .\rp.py
e:\parser
e:\test
e:\parser

e:\parser&gt;c:\Python27\python.exe ..\parser\rp.py
e:\parser
e:\test
e:\parser
</snippet></ROW><ROW><id>9888400</id><snippet>-v</snippet></ROW><ROW><id>9888400</id><snippet>def partition_list(lst, sep):
    """Slices a list in two, cutting on index matching "sep"

    &gt;&gt;&gt; partition_list(['a', 'b', 'c'], sep='b')
    (['a'], ['c'])
    """
    if sep in lst:
        idx = lst.index(sep)
        return (lst[:idx], lst[idx+1:])
    else:
        return (lst[:], )

def args_to_dict(args):
    """Crudely parses "--blah=123" type arguments into dict like
    {'blah': '123'}
    """
    ret = {}
    for a in args:
        key, _, value = a.partition("=")
        key = key.replace("--", "", 1)
        ret[key] = value

    return ret


if __name__ == '__main__':
    import sys

    # Get stuff before/after the "%%" separator
    string, args = partition_list(sys.argv[1:], "%%")

    # Join input string
    string_joined = " ".join(string)

    # Parse --args=stuff
    d = args_to_dict(args)

    # Do string-interpolation
    print string_joined.format(**d)
</snippet></ROW><ROW><id>9888428</id><snippet>'abc'</snippet></ROW><ROW><id>9888428</id><snippet>'2000.01'</snippet></ROW><ROW><id>9888428</id><snippet>'2000.02'</snippet></ROW><ROW><id>9888428</id><snippet>&gt;&gt;&gt; d = {('abc', '2000.01'): ['month1', 'month12'], ('abc', '2000.02'): ['month1', 'month12']}
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d2 = defaultdict(list)
&gt;&gt;&gt; for (k1, k2), v in d.items():
    d2[k1] += v


&gt;&gt;&gt; d2
defaultdict(&lt;type 'list'&gt;, {'abc': ['month1', 'month12', 'month1', 'month12']})
&gt;&gt;&gt; d2['abc']
['month1', 'month12', 'month1', 'month12']
</snippet></ROW><ROW><id>9888428</id><snippet>defaultdict</snippet></ROW><ROW><id>9888428</id><snippet>k1</snippet></ROW><ROW><id>9888428</id><snippet>d2</snippet></ROW><ROW><id>9888428</id><snippet>month1, month12</snippet></ROW><ROW><id>9888494</id><snippet>inds = {'EUR': [whatever],
        'AFR': [foo],
        'ASN': [other]}

foos = inds['EUR']
</snippet></ROW><ROW><id>9888682</id><snippet>json.load()</snippet></ROW><ROW><id>9888682</id><snippet>data</snippet></ROW><ROW><id>9888682</id><snippet>dict</snippet></ROW><ROW><id>9888682</id><snippet>.get()</snippet></ROW><ROW><id>9888682</id><snippet>json.load()</snippet></ROW><ROW><id>9888682</id><snippet>json.loads()</snippet></ROW><ROW><id>9888682</id><snippet>&gt;&gt;&gt; json.loads('[1, 2, "dog"]')
[1, 2, 'dog']
&gt;&gt;&gt; json.loads('{"animals": ["cat", "dog"], "4": 4}') 
{'animals': ['cat', 'dog'], '4': 4}
&gt;&gt;&gt; json.loads('"dog"') 
'dog'
</snippet></ROW><ROW><id>9888814</id><snippet>ConfigParser</snippet></ROW><ROW><id>9888814</id><snippet>ConfigParser</snippet></ROW><ROW><id>9888814</id><snippet>dict_type</snippet></ROW><ROW><id>9888814</id><snippet>class multidict(dict):
    _unique = 0

    def __setitem__(self, key, val):
        if isinstance(val, dict):
            self._unique += 1
            key += str(self._unique)
        dict.__setitem__(self, key, val)

Config = configparser.ConfigParser(None, multidict)
</snippet></ROW><ROW><id>9888943</id><snippet>bin</snippet></ROW><ROW><id>9889233</id><snippet>TEMPLATE_LOADERS</snippet></ROW><ROW><id>9889233</id><snippet>TEMPLATE_LOADERS = (
    'django.template.loaders.app_directories.Loader',
    'django.template.loaders.filesystem.Loader',
)
</snippet></ROW><ROW><id>9889233</id><snippet>AttributeError</snippet></ROW><ROW><id>9889233</id><snippet>settings.AUTH_PROFILE_MODULE</snippet></ROW><ROW><id>9889345</id><snippet> (True == False) and (False in (False,))
</snippet></ROW><ROW><id>9889345</id><snippet>False</snippet></ROW><ROW><id>9889345</id><snippet>x == y == z</snippet></ROW><ROW><id>9889345</id><snippet>0 &lt;= x &lt; 10</snippet></ROW><ROW><id>9889345</id><snippet>x</snippet></ROW><ROW><id>9889345</id><snippet>in</snippet></ROW><ROW><id>9889366</id><snippet>u"http://www.besondere-raumdüfte.de/".encode('idna')</snippet></ROW><ROW><id>9889366</id><snippet>u</snippet></ROW><ROW><id>9889366</id><snippet>urlopen()</snippet></ROW><ROW><id>9889366</id><snippet>.encode('idna')</snippet></ROW><ROW><id>9889366</id><snippet>iri2uri()</snippet></ROW><ROW><id>9889610</id><snippet>def __init__(self,parent, id, image)
</snippet></ROW><ROW><id>9889610</id><snippet>def OnInit(self):

   image=wx.Image('your_image.jpg',wx.BITMAP_TYPE_JPEG)
   self.frame=bucky(image)
</snippet></ROW><ROW><id>9889668</id><snippet>^.*\['(.*)'\].*$</snippet></ROW><ROW><id>9889668</id><snippet>[</snippet></ROW><ROW><id>9889668</id><snippet>]</snippet></ROW><ROW><id>9889668</id><snippet>\</snippet></ROW><ROW><id>9890093</id><snippet>def addItemAttributes(tree, idList):
    (menu, cat, subcat, item, attribs) = idList;

    currDict = tree.setdefault(menu, {})\
        .setdefault(cat, {})\
        .setdefault(subcat, {})\
        .setdefault(item, {})

    for a in attribs:
        currDict[a[0]] = a[1]
</snippet></ROW><ROW><id>9890093</id><snippet>try:
    getItemAttributes(...)
except KeyError:
    #key was incorrect, deal with the situation
</snippet></ROW><ROW><id>9890194</id><snippet>document.write('&lt;img src="http://localhost/cgi-bin/test.py" /&gt;');
</snippet></ROW><ROW><id>9890194</id><snippet>jQuery.get('/cgi-bin/test.py', function(data) {
    //do stuff with the data
})
</snippet></ROW><ROW><id>9891022</id><snippet>A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. A primary use for weak references is to implement caches or mappings holding large objects, where it’s desired that a large object not be kept alive solely because it appears in a cache or mapping.</snippet></ROW><ROW><id>9891074</id><snippet>def DictListUpdate( lis1, lis2):
    for aLis1 in lis1:
        if aLis1 not in lis2:
            lis2.append(aLis1)
    return lis2

x = [ {"name": "surya", "company":"dell"}, \
       {"name": "jobs", "company":"apple"} ]

y = [ { "name": "surya", "company":"dell"}, \
    { "name": "gates", "company": "microsoft"} ]

print DictListUpdate(x,y)
</snippet></ROW><ROW><id>9891074</id><snippet>&gt;&gt;&gt; 
[{'company': 'dell', 'name': 'surya'}, {'company': 'microsoft', 'name': 'gates'}, {'company': 'apple', 'name': 'jobs'}]
</snippet></ROW><ROW><id>9891103</id><snippet>Timer</snippet></ROW><ROW><id>9891103</id><snippet>Timer</snippet></ROW><ROW><id>9891273</id><snippet>req = urllib2.Request(url, None, header)
req.add_header('Accept', 'application/json')
</snippet></ROW><ROW><id>9891583</id><snippet>text</snippet></ROW><ROW><id>9891583</id><snippet>\xa3</snippet></ROW><ROW><id>9891583</id><snippet>£</snippet></ROW><ROW><id>9891583</id><snippet>text = text.encode('ascii', 'xmlcharrefreplace')
</snippet></ROW><ROW><id>9891583</id><snippet>£</snippet></ROW><ROW><id>9891688</id><snippet>a</snippet></ROW><ROW><id>9891688</id><snippet>min_value</snippet></ROW><ROW><id>9891688</id><snippet>max_value</snippet></ROW><ROW><id>9891688</id><snippet>indices = ((min_value &lt; a) &amp; (a &lt; max_value)).nonzero()[0]
</snippet></ROW><ROW><id>9891688</id><snippet>mask = (min_value &lt; a) &amp; (a &lt; max_value)
</snippet></ROW><ROW><id>9891688</id><snippet>a</snippet></ROW><ROW><id>9891688</id><snippet>b</snippet></ROW><ROW><id>9891688</id><snippet>a</snippet></ROW><ROW><id>9891688</id><snippet>b</snippet></ROW><ROW><id>9891688</id><snippet>True</snippet></ROW><ROW><id>9891688</id><snippet>mask</snippet></ROW><ROW><id>9891688</id><snippet>b[mask]
</snippet></ROW><ROW><id>9891850</id><snippet>?</snippet></ROW><ROW><id>9891850</id><snippet>\.\d+</snippet></ROW><ROW><id>9891850</id><snippet>(\.\d+)</snippet></ROW><ROW><id>9891850</id><snippet>(\.\d+)?</snippet></ROW><ROW><id>9891850</id><snippet>import re
print re.match("(\d+(\.\d+)?)", "3434.35353").group(1)
</snippet></ROW><ROW><id>9891850</id><snippet>3434.35353
</snippet></ROW><ROW><id>9891850</id><snippet>print re.match("(\d+(\.\d+)?)", "3434").group(1)
</snippet></ROW><ROW><id>9891850</id><snippet>3434
</snippet></ROW><ROW><id>9891892</id><snippet>&gt;&gt;&gt; import itertools

&gt;&gt;&gt; list(itertools.combinations([1,2,3], 1))
[(1,), (2,), (3,)]

&gt;&gt;&gt; list(itertools.combinations([1,2,3], 2))
[(1, 2), (1, 3), (2, 3)]

&gt;&gt;&gt; list(itertools.combinations([1,2,3], 3))
[(1, 2, 3)]
</snippet></ROW><ROW><id>9891892</id><snippet>C</snippet></ROW><ROW><id>9891892</id><snippet>def C(a, b):
    return list(itertools.combinations(range(1,a+1), b))
</snippet></ROW><ROW><id>9891979</id><snippet>def f(a,b,c, v2 = False):
    #Some processing
    #Some more processing
    if not v2:
        return some_result
    else:
        v2_dict = {}
        v2_dict['additional_result'] = additional_result
        v2_dict['...'] = ...
        return some_result, v2_dict
</snippet></ROW><ROW><id>9892207</id><snippet>getheadersonly</snippet></ROW><ROW><id>9892207</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>9892207</id><snippet>urllib2.HTTPRedirectHandler.http_error_302</snippet></ROW><ROW><id>9892207</id><snippet>urllib2.HTTPRedirectHandler</snippet></ROW><ROW><id>9892207</id><snippet>FTPHandler</snippet></ROW><ROW><id>9892207</id><snippet>urllib2.HTTPHandler()</snippet></ROW><ROW><id>9892207</id><snippet>class HeadRequest(urllib2.Request):
    def get_method(self):
        return 'HEAD'

def getheadersonly(url, redirections=True):
    opener = urllib2.OpenerDirector()
    opener.add_handler(urllib2.HTTPHandler())
    opener.add_handler(urllib2.HTTPDefaultErrorHandler())
    if redirections:
        # HTTPErrorProcessor makes HTTPRedirectHandler work
        opener.add_handler(urllib2.HTTPErrorProcessor())
        opener.add_handler(urllib2.HTTPRedirectHandler())
    try:
        res = opener.open(HeadRequest(url))
    except urllib2.HTTPError, res:
        pass
    res.close()
    return dict(code=res.code, headers=res.info(), finalurl=res.geturl())
</snippet></ROW><ROW><id>9892372</id><snippet>communicate</snippet></ROW><ROW><id>9892372</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9892372</id><snippet>communicate</snippet></ROW><ROW><id>9892372</id><snippet>communicate</snippet></ROW><ROW><id>9892372</id><snippet>communicate</snippet></ROW><ROW><id>9892372</id><snippet>p.stdin</snippet></ROW><ROW><id>9892372</id><snippet>p.stdout</snippet></ROW><ROW><id>9892372</id><snippet>p.stderr</snippet></ROW><ROW><id>9892372</id><snippet>pexpect</snippet></ROW><ROW><id>9892372</id><snippet>cmd = ['intersectBed', '-a', 'stdin', '-b', bedfile]
for entry in my_entry_generator:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output = p.communicate(input='\t'.join(entry) + '\n')[0]
    print output
</snippet></ROW><ROW><id>9892685</id><snippet>itertools.product</snippet></ROW><ROW><id>9892685</id><snippet>import itertools

max_length = 10
result = (''.join(word) for word in 
             itertools.chain.from_iterable(
                 itertools.product(alphabet, repeat = i)
                     for i in range(1, max_length + 1)))
</snippet></ROW><ROW><id>9892730</id><snippet>for ele in my_data_2:
    c.execute('''INSERT INTO MY_TABLE_2 VALUES(?,?,?)''',ele)
</snippet></ROW><ROW><id>9892816</id><snippet>dictionary = {'a': 5, 'b': 8, 'c':15}
sum = 0
for (key, value) in dictionary.items(): sum += value
percentage = dictionary['a'] / (sum + 0.0)
print "percentage of '%s' is %.2f %%" % ('a' , percentage*100)
</snippet></ROW><ROW><id>9892969</id><snippet>&gt;&gt;&gt; list1 = ["string1","string2","string3","string4"]
&gt;&gt;&gt; list2 = ["domain_string1","domain_string2"]
&gt;&gt;&gt; allparams = map(lambda x: ("list1", x), list1)
&gt;&gt;&gt; allparams += map(lambda x: ("list2", x), list2)
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.urlencode(allparams)
'list1=string1&amp;list1=string2&amp;list1=string3&amp;list1=string4&amp;list2=domain_string1&amp;list2=domain_string2'
</snippet></ROW><ROW><id>9892969</id><snippet>import requests
r = requests.post("http://127.0.0.1/search", data=allparams)
</snippet></ROW><ROW><id>9893091</id><snippet>self</snippet></ROW><ROW><id>9893091</id><snippet>self</snippet></ROW><ROW><id>9893091</id><snippet>class MyClass(object):
    @staticmethod
    def myfunc():
        return "It works!"

myfunc = MyClass.myfunc

myfunc() # prints "It works!"
</snippet></ROW><ROW><id>9893091</id><snippet>@staticmethod</snippet></ROW><ROW><id>9893091</id><snippet>@classmethod</snippet></ROW><ROW><id>9893091</id><snippet>self</snippet></ROW><ROW><id>9893091</id><snippet>myobj = MyClass()
del MyClass # This is a singleton class
myfunc = myobj.myfunc
</snippet></ROW><ROW><id>9893756</id><snippet>from django.contrib.contenttypes.models import ContentType
from django.utils import simplejson

&gt;&gt;&gt; simplejson.dumps(ContentType.objects.get(model='user').natural_key())
'["auth", "user"]'
</snippet></ROW><ROW><id>9893849</id><snippet>bash -c 'echo' 'toto' '`ls`'
</snippet></ROW><ROW><id>9893849</id><snippet>bash -c 'echo toto `ls`'
</snippet></ROW><ROW><id>9893849</id><snippet>subprocess.Popen('echo toto `ls`', shell=True)
subprocess.Popen(['echo toto `ls`'], shell=True)
</snippet></ROW><ROW><id>9893967</id><snippet>Q</snippet></ROW><ROW><id>9893967</id><snippet>django.db.models</snippet></ROW><ROW><id>9893967</id><snippet>raw</snippet></ROW><ROW><id>9894009</id><snippet>Image.BICUBIC</snippet></ROW><ROW><id>9894009</id><snippet>Image.BILINEAR</snippet></ROW><ROW><id>9894009</id><snippet>rotate</snippet></ROW><ROW><id>9894009</id><snippet>Image.ANTIALIAS</snippet></ROW><ROW><id>9894009</id><snippet>'L'</snippet></ROW><ROW><id>9894009</id><snippet>paste</snippet></ROW><ROW><id>9894009</id><snippet>quality = 250</snippet></ROW><ROW><id>9894009</id><snippet># open the profile pic 
im = PIL.Image.open(pic) 
# resize it to dim of oblique box 
im = im.resize((picX, picY), PIL.Image.ANTIALIAS) 

# this is the degree of oblique box 
degree = 13.67 

# open the background 
bg = PIL.Image.open(bgsrc) 
bgosize = bg.size 
bginfo = bg.info 

# create a copy of the profile that is all white
mask = PIL.Image.new('L', im.size, 0xff)

# rotate the profile and the mask
im = im.rotate(degree, resample = PIL.Image.BICUBIC, expand = True)
mask = mask.rotate(degree, resample = PIL.Image.BICUBIC, expand = True)

# paste the profile pic to background 
bg.paste(im, (px1, py1, px2, py2), mask) 

PIL.ImageFile.MAXBLOCK = bg.size[0] * bg.size[1] 
bg.save(dst, quality = 250, optimize = True, **bginfo) 
</snippet></ROW><ROW><id>9894141</id><snippet>os.system</snippet></ROW><ROW><id>9894141</id><snippet>os.system('python2.6 myscript.py')
</snippet></ROW><ROW><id>9894141</id><snippet>os.system('myscript.py')
</snippet></ROW><ROW><id>9894141</id><snippet>#!/usr/bin/env python2.6
</snippet></ROW><ROW><id>9894141</id><snippet>python2.6</snippet></ROW><ROW><id>9894141</id><snippet>PATH</snippet></ROW><ROW><id>9894141</id><snippet>subprocess.Popen('myscript.py', subprocess.PIPE) #relying on shebang
subprocess.Popen(['/usr/bin/env', 'python2.6', 'myscript.py'], subprocess.PIPE) #manual interpreter selection
</snippet></ROW><ROW><id>9894236</id><snippet>os.listdir</snippet></ROW><ROW><id>9894236</id><snippet>os.walk</snippet></ROW><ROW><id>9894589</id><snippet>pygame.init()
pygame.time.set_timer(USEREVENT + 1, 100)
while True:
    for event in pygame.event.get():
        if event.type == USEREVENT + 1:
           functionName()
        if event.type == QUIT:
            pygame.quite()
            sys.exit()
</snippet></ROW><ROW><id>9894878</id><snippet>zip</snippet></ROW><ROW><id>9894878</id><snippet>random.sample</snippet></ROW><ROW><id>9894878</id><snippet>import random
random.sample(zip(list_a,list_b), 10)
</snippet></ROW><ROW><id>9894878</id><snippet>zip</snippet></ROW><ROW><id>9894878</id><snippet>Zip([1,2,3],[4,5,6]) = [(1,4),(2,5),(3,6)]</snippet></ROW><ROW><id>9894878</id><snippet>random.sample(l,n)</snippet></ROW><ROW><id>9894878</id><snippet>n</snippet></ROW><ROW><id>9894878</id><snippet>l</snippet></ROW><ROW><id>9894885</id><snippet>\r</snippet></ROW><ROW><id>9894885</id><snippet>import time
import sys
for i in range(10):
    print "\rworking on:", i,
    sys.stdout.flush()
    time.sleep(1)
</snippet></ROW><ROW><id>9894885</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>9895195</id><snippet>import re

s = 'Text Processing. You are tired of seeing lines on your e-mail wrap because people type lines that are too long for your mail reader application. Create a program to scan a text file for all lines longer than 80 characters. For each of the offending lines, find the closest word before 80 characters and break the line there, inserting the remaining text to the next line (and pushing the previous next line down one). When you are done, there should be no lines longer than 80 characters.'
print '\n'.join(line.strip() for line in re.findall(r'.{1,80}(?:\s+|$)', s))
</snippet></ROW><ROW><id>9895195</id><snippet>Text Processing. You are tired of seeing lines on your e-mail wrap because
people type lines that are too long for your mail reader application. Create a
program to scan a text file for all lines longer than 80 characters. For each of
the offending lines, find the closest word before 80 characters and break the
line there, inserting the remaining text to the next line (and pushing the
previous next line down one). When you are done, there should be no lines longer
than 80 characters.
</snippet></ROW><ROW><id>9895195</id><snippet>def split_lines(text):
    lines = text.split('\n')
    regex = re.compile(r'.{1,80}(?:\s+|$)')
    return '\n'.join(s.rstrip() for line in lines for s in regex.findall(line))
</snippet></ROW><ROW><id>9895219</id><snippet>$ repoquery -l python3-BeautifulSoup
/usr/lib/python3.2/site-packages/beautifulsoup4-4.0.0b3-py3.2.egg-info
/usr/lib/python3.2/site-packages/bs4
/usr/lib/python3.2/site-packages/bs4/__init__.py
 ...
</snippet></ROW><ROW><id>9895263</id><snippet>n</snippet></ROW><ROW><id>9895263</id><snippet>0...n</snippet></ROW><ROW><id>9895263</id><snippet>soup = BeautifulSoup(html)
i = 0
data = []
while True:
    firm1 = soup.find('a', { "id" : "dgrdAcquired_hyplnkacquired_%s" % i})
    if not firm1:
        break
    data.append(''.join(firm1.findAll(text=True)))
    print data[-1]
    i += 1
</snippet></ROW><ROW><id>9895378</id><snippet>Math.log [s.abs, 1].max, 10
Math.log10 [s.abs, 1].max  # or use Math.log10 and skip passing the base
</snippet></ROW><ROW><id>9895378</id><snippet>if</snippet></ROW><ROW><id>9895378</id><snippet>test ? ifval : elsval</snippet></ROW><ROW><id>9895378</id><snippet>&lt;=&gt;</snippet></ROW><ROW><id>9895378</id><snippet>sign = if s &gt; 0 then 1 elsif s &lt; 0 then -1 else 0 end
sign = s &gt; 0 ? 1 : s &lt; 0 ? -1 : 0
sign = s &lt;=&gt; 0
</snippet></ROW><ROW><id>9895579</id><snippet>C = sorted(list(set(B) - set(A)))
</snippet></ROW><ROW><id>9895986</id><snippet>ctypes.data</snippet></ROW><ROW><id>9895986</id><snippet>m = n = 1000
dtype = numpy.dtype(numpy.float64)
nbytes = m * n * dtype.itemsize
buf = numpy.empty(nbytes + 16, dtype=numpy.uint8)
start_index = -buf.ctypes.data % 16
a = buf[start_index:start_index + nbytes].view(dtype).reshape(m, n)
</snippet></ROW><ROW><id>9895986</id><snippet>a</snippet></ROW><ROW><id>9895986</id><snippet>a.ctypes.data % 16</snippet></ROW><ROW><id>9895986</id><snippet>0</snippet></ROW><ROW><id>9896047</id><snippet>import os
p = os.popen('echo '+s+' | ${morphg_res:-./morphg.ix86_linux -t}')
out = p.read()
print out
</snippet></ROW><ROW><id>9896301</id><snippet>CellProfiler.py --help</snippet></ROW><ROW><id>9896301</id><snippet>PATH</snippet></ROW><ROW><id>9896474</id><snippet>dict</snippet></ROW><ROW><id>9896474</id><snippet>class A(object):
    def __init__(self, param1, param2, param3):
        print param1, param2, param3


params = {'param1': "foo", 'param2': "bar", 'param3': "hello"}
# no 'new' here, just call the class
my_a = A(**params)
</snippet></ROW><ROW><id>9896474</id><snippet>//</snippet></ROW><ROW><id>9896474</id><snippet>#</snippet></ROW><ROW><id>9896474</id><snippet>'''You can use triple single quotes'''</snippet></ROW><ROW><id>9896474</id><snippet>"""triple double quotes"""</snippet></ROW><ROW><id>9896732</id><snippet>-i filename</snippet></ROW><ROW><id>9896732</id><snippet>'-i '+filename</snippet></ROW><ROW><id>9896732</id><snippet>shell=True</snippet></ROW><ROW><id>9896732</id><snippet>-i</snippet></ROW><ROW><id>9896732</id><snippet>-logelevel</snippet></ROW><ROW><id>9896732</id><snippet>quiet</snippet></ROW><ROW><id>9896732</id><snippet>[..., '-loglevel', 'quiet',..]</snippet></ROW><ROW><id>9896732</id><snippet>#!/usr/bin/python
import os, sys, subprocess, shlex, re
from subprocess import call
def probe_file(filename):
    cmnd = ['ffprobe', '-show_format', '-pretty', '-loglevel', 'quiet', filename]
    p = subprocess.Popen(cmnd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print filename
    out, err =  p.communicate()
    print "==========output=========="
    print out
    if err:
        print "========= error ========"
        print err

probe_file('drop.avi')
</snippet></ROW><ROW><id>9896732</id><snippet>==========output==========
[FORMAT]
filename=drop.avi
nb_streams=1
format_name=avi
format_long_name=AVI format
start_time=0:00:00.000000
duration=0:00:06.066667
size=660.000 Kibyte
bit_rate=891.217 Kbit/s
[/FORMAT]

========= error ========
ffprobe version 0.7.3-4:0.7.3-0ubuntu0.11.10.1, Copyright (c) 2007-2011 the Libav developers
  built on Jan  4 2012 16:08:51 with gcc 4.6.1
  configuration: --extra-version='4:0.7.3-0ubuntu0.11.10.1' --arch=amd64 --prefix=/usr --enable-vdpau --enable-bzlib --enable-libgsm --enable-libschroedinger --enable-libspeex --enable-libtheora --enable-libvorbis --enable-pthreads --enable-zlib --enable-libvpx --enable-runtime-cpudetect --enable-vaapi --enable-gpl --enable-postproc --enable-swscale --enable-x11grab --enable-libdc1394 --enable-shared --disable-static
  libavutil    51.  7. 0 / 51.  7. 0
  libavcodec   53.  6. 0 / 53.  6. 0
  libavformat  53.  3. 0 / 53.  3. 0
  libavdevice  53.  0. 0 / 53.  0. 0
  libavfilter   2.  4. 0 /  2.  4. 0
  libswscale    2.  0. 0 /  2.  0. 0
  libpostproc  52.  0. 0 / 52.  0. 0
Unsupported codec with id 114 for input stream 0
</snippet></ROW><ROW><id>9896849</id><snippet>ModelForm</snippet></ROW><ROW><id>9896849</id><snippet>MyModel</snippet></ROW><ROW><id>9896849</id><snippet>field1</snippet></ROW><ROW><id>9896849</id><snippet>field2</snippet></ROW><ROW><id>9896849</id><snippet>class MyModelForm(forms.ModelForm):
    class Meta:
         model = MyModel
         widgets = {
             'field1': Textarea(attrs={'rows':1, 'cols':40}),
         }

...
class MyModelAdmin(admin.ModelAdmin):
    form = MyModelForm
</snippet></ROW><ROW><id>9897033</id><snippet>def testrecurse(z, target):
    if z &gt;= target:
        return []
    return [z] + testrecurse(2 * z, target)
</snippet></ROW><ROW><id>9897033</id><snippet>&gt;&gt;&gt; testrecurse(1, 1000)
[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
</snippet></ROW><ROW><id>9897033</id><snippet>1024</snippet></ROW><ROW><id>9897033</id><snippet>        return [z]
</snippet></ROW><ROW><id>9897033</id><snippet>for</snippet></ROW><ROW><id>9897033</id><snippet>itertools.takewhile()</snippet></ROW><ROW><id>9897113</id><snippet>+</snippet></ROW><ROW><id>9897113</id><snippet>In the face of ambiguity, refuse the temptation to guess.
</snippet></ROW><ROW><id>9897113</id><snippet>a = [1, 2, 3]
a += (4, 5, 6)
</snippet></ROW><ROW><id>9897257</id><snippet>plot_surface</snippet></ROW><ROW><id>9897257</id><snippet>Z</snippet></ROW><ROW><id>9897257</id><snippet>X</snippet></ROW><ROW><id>9897257</id><snippet>Y</snippet></ROW><ROW><id>9897257</id><snippet>Xpl = numpy.arange(xmin, xmax, 0.1).tolist()
Ypl = numpy.arange(ymin, ymax, 0.01).tolist()
Xpl, Ypl = numpy.meshgrid(Xpl, Ypl)

Z=[]
for j in range(len(Xpl)):
   for i in range(len(Xpl[0])):
        # your loop order was backwards
        Z.append(funcPower3([Xpl[j][i],Ypl[j][i]]))

# reshape Z
Z = numpy.array(Z).reshape(Xpl.shape)

fig = plt.figure('Power 3')
ax = fig.gca(projection='3d')
surf=ax.plot_surface(Xpl, Ypl, Z, rstride=8, cstride=8, alpha=0.3,cmap=cm.jet)
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
plt.show()
</snippet></ROW><ROW><id>9897257</id><snippet>funcPower3</snippet></ROW><ROW><id>9897257</id><snippet>def func_power_3(param, x1, y):
    p1, p2 = param
    res = sum(y_i - (p1*x1_i)**p2 for x1_i, y_i in zip(x1, y))
    return res
</snippet></ROW><ROW><id>9897257</id><snippet>with open("power3X.txt","r") as infile:
    x1 = [float(line) for line in infile]

with open("power3Y.txt","r") as infile:
    y = [float(line) for line in infile]

xpl = numpy.arange(xmin, xmax, 0.1)   # no need for .tolist()
ypl = numpy.arange(ymin, ymax, 0.01)  # meshgrid can work with numpy.array's
xpl, ypl = numpy.meshgrid(xpl, ypl)

# we can form z with list comprehension
z = [[func_power_3([p1,p2], x1, y) for p1, p2 in zip(p1row, p2row)] 
                                   for p1row, p2row in zip(xpl, ypl)]

fig = plt.figure('Power 3')
ax = fig.gca(projection='3d')
surf=ax.plot_surface(xpl, ypl, z, rstride=8, cstride=8, alpha=0.3,cmap=cm.jet)
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
plt.show()
</snippet></ROW><ROW><id>9897453</id><snippet>/</snippet></ROW><ROW><id>9897453</id><snippet>polls.urls</snippet></ROW><ROW><id>9897453</id><snippet>url(r'^polls/', include('polls.urls')),
</snippet></ROW><ROW><id>9897453</id><snippet>polls/</snippet></ROW><ROW><id>9897453</id><snippet>polls.urls</snippet></ROW><ROW><id>9897453</id><snippet>polls/13/results</snippet></ROW><ROW><id>9897453</id><snippet>polls/</snippet></ROW><ROW><id>9897453</id><snippet>my site.urls</snippet></ROW><ROW><id>9897453</id><snippet>polls.urls</snippet></ROW><ROW><id>9897453</id><snippet>polls.urls</snippet></ROW><ROW><id>9897453</id><snippet>/</snippet></ROW><ROW><id>9897453</id><snippet>^</snippet></ROW><ROW><id>9897453</id><snippet>/</snippet></ROW><ROW><id>9897453</id><snippet>polls.urls</snippet></ROW><ROW><id>9897453</id><snippet>/polls//13/results
</snippet></ROW><ROW><id>9897453</id><snippet>/polls/13/results
</snippet></ROW><ROW><id>9897464</id><snippet>s = " Sample"
if s[0] == ' ':
    # do something
else:
    # do something else
</snippet></ROW><ROW><id>9897464</id><snippet>import re
s = ' Sample'
if re.match(r"\s+.+", s):
   # found space at beginning, do something
</snippet></ROW><ROW><id>9897774</id><snippet>http://stackoverflow.com/questions/9897050/any-text-you-like-here!</snippet></ROW><ROW><id>9897840</id><snippet>from collections import defaultdict

lookup = defaultdict(lambda: [0,0,0])

lookup['a'][0] += 1
lookup['b'][1] += 1
lookup['a'][0] += 1

print lookup
</snippet></ROW><ROW><id>9897840</id><snippet>{'a': [2, 0, 0], 'b': [0, 1, 0]}
</snippet></ROW><ROW><id>9897840</id><snippet>list</snippet></ROW><ROW><id>9897840</id><snippet>tuple</snippet></ROW><ROW><id>9897840</id><snippet>tuple</snippet></ROW><ROW><id>9897849</id><snippet>prefixes = {1: 'B', 2: 'J', 3: 'C', 4: 'A', 5: 'J', 6: 'X'}
</snippet></ROW><ROW><id>9897849</id><snippet>print ' 'join('%s %s' % (num, prefix) for num, prefix in prefixes.itervalues())
</snippet></ROW><ROW><id>9897849</id><snippet>nums = [1, 2, 3, 4, 5, 6]
ltrs = ['B', 'J', 'C', 'A', 'J', 'X']

print ' '.join('%s %s' % (num, ltr) for num, ltr in zip(nums, ltrs)
</snippet></ROW><ROW><id>9897909</id><snippet>CPU: Intel i3 540 @ 3.0 GHz, 2 cores  
Memory: 4 GB  
Operating System: Windows 7  
Python: 2.7.2  
openpyxl: 1.5.8  
xlrd: 0.7.3  
</snippet></ROW><ROW><id>9897909</id><snippet>formatting_info=False</snippet></ROW><ROW><id>9898191</id><snippet>__future__</snippet></ROW><ROW><id>9898191</id><snippet>&gt;&gt;&gt; import __future__
&gt;&gt;&gt; __future__.all_feature_names
['nested_scopes', 'generators', 'division', 'absolute_import', 'with_statement', 'print_function', 'unicode_literals']
&gt;&gt;&gt; __future__.unicode_literals
_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)
</snippet></ROW><ROW><id>9898191</id><snippet>division</snippet></ROW><ROW><id>9898191</id><snippet>print_function</snippet></ROW><ROW><id>9898191</id><snippet>absolute_import</snippet></ROW><ROW><id>9898191</id><snippet>unicode_literals</snippet></ROW><ROW><id>9898191</id><snippet>import __future__</snippet></ROW><ROW><id>9898191</id><snippet>from __future__ import something</snippet></ROW><ROW><id>9898191</id><snippet>__future__</snippet></ROW><ROW><id>9898263</id><snippet>countText = usefont.render( "%d" % secs_left, 1, (255, 0, 0))
countRect = countText.get_rect()
countRect.y, countRect.centerx = yPos, screen.get_rect().width/2
screen.set_clip(countRect)        # Allow updates only to area in countRect
screen.blit(bg_image, (0,0))      # bg_img will only be drawn within countRect
screen.blit(countText, countRect)
pygame.display.flip()
</snippet></ROW><ROW><id>9898274</id><snippet>&gt;&gt;&gt; from pyproj import Proj
&gt;&gt;&gt; pnyc = Proj(
...     proj='lcc',
...     datum='NAD83',
...     lat_1=40.666667,
...     lat_2=41.033333,
...     lat_0=40.166667,
...     lon_0=-74.0,
...     x_0=984250.0,
...     y_0=0.0)
&gt;&gt;&gt; x = [981106.0]
&gt;&gt;&gt; y = [195544.0]
&gt;&gt;&gt; lon, lat = pnyc(x, y, inverse=True)
&gt;&gt;&gt; lon, lat
([-74.037898165369015], [41.927378144152335])
</snippet></ROW><ROW><id>9898290</id><snippet>y =  changeling(word,target,steps-1)
if y :
  return [x] + y
else:
  return None
</snippet></ROW><ROW><id>9898290</id><snippet>None</snippet></ROW><ROW><id>9898290</id><snippet>None</snippet></ROW><ROW><id>9898494</id><snippet>urlopen()</snippet></ROW><ROW><id>9898494</id><snippet>BeautifulSoup(page)</snippet></ROW><ROW><id>9898494</id><snippet>page</snippet></ROW><ROW><id>9898494</id><snippet>page = urllib.request.urlopen(base_url)
page_content = page.read()
# ...
BeautifulSoup(page_content)
# ...
BeautifulSoup(page_content)
</snippet></ROW><ROW><id>9898494</id><snippet>page = urllib.request.urlopen(base_url)
soup = BeautifulSoup(page)
# ...
# do something with soup
# ...
# do something with soup
</snippet></ROW><ROW><id>9898494</id><snippet>for j in pblist[0:10]:
        base_url = j['short_url']
        page = urllib.request.urlopen(base_url)
        soup = BeautifulSoup(page)
        if hasattr(soup, 'head') and \
            hasattr(soup.head, 'title'):
                print("Has head, title attributes.")
                try:
                    j['title'] = soup.head.title.string.encode('utf-8')
                except AttributeError:
                    print("Encountered attribute error on page, ", base_url)
                    j['title'] = "Attribute error."
                    pass
</snippet></ROW><ROW><id>9898506</id><snippet>pack_forget</snippet></ROW><ROW><id>9898506</id><snippet>configure</snippet></ROW><ROW><id>9898506</id><snippet>self.utc_time.configure(text="...")
</snippet></ROW><ROW><id>9898562</id><snippet>sticky='w'</snippet></ROW><ROW><id>9898563</id><snippet>import re

text = open( path ).read()
match_found=False
matches = re.finditer(line_pattern, text)

m = None      # optional statement. just for clarification
for m in matches:
   match_found=True
   pass       # just loop to the end

if (match_found):
   m.start()  # equals the starting index of the last match
   m.end()    # equals the ending index of the last match 

   # now you can do your substring of text to add whatever
   #   you wanted to add. For example,
   text[1:m.end()] + "hi there!" + text[(m.end()+1):]
</snippet></ROW><ROW><id>9898639</id><snippet>any</snippet></ROW><ROW><id>9898639</id><snippet>any(customEquals(item, li) for li in myList)
</snippet></ROW><ROW><id>9898639</id><snippet>__contains__</snippet></ROW><ROW><id>9898801</id><snippet>sys.stdout</snippet></ROW><ROW><id>9898801</id><snippet>sys.stderr</snippet></ROW><ROW><id>9898862</id><snippet>from django.contrib.comments.signals import comment_was_posted

def thank_user(sender, comment=None, request=None, **kwargs):
    messages.add_message( request, messages.SUCCESS, 'You comment has been posted!' )
comment_was_posted.connect(thank_user)
</snippet></ROW><ROW><id>9898965</id><snippet>    sql_update= "UPDATE Tests SET NAME='%s' WHERE id='%s'", (var1, id)
    cur.execute(sql_update)
</snippet></ROW><ROW><id>9898965</id><snippet>    sql_update= "UPDATE Tests SET NAME=%s WHERE id=%s"
    cur.execute(sql_update, (var1, id))
</snippet></ROW><ROW><id>9898965</id><snippet>    sql_update= "UPDATE Tests SET NAME=%s WHERE id=%s", (var1, id)
    cur.execute(*sql_update)
</snippet></ROW><ROW><id>9898965</id><snippet>,</snippet></ROW><ROW><id>9898965</id><snippet>*sql_update</snippet></ROW><ROW><id>9898965</id><snippet>cur.execute()</snippet></ROW><ROW><id>9899135</id><snippet>urlretrieve</snippet></ROW><ROW><id>9899415</id><snippet>TotSize[:] = map(sum, data)
</snippet></ROW><ROW><id>9899415</id><snippet>data</snippet></ROW><ROW><id>9899415</id><snippet>row</snippet></ROW><ROW><id>9899415</id><snippet>col</snippet></ROW><ROW><id>9899415</id><snippet>TotSize</snippet></ROW><ROW><id>9899415</id><snippet>data</snippet></ROW><ROW><id>9899415</id><snippet>TotSize</snippet></ROW><ROW><id>9899415</id><snippet>def row_sums(data):
    return map(sum, data)
</snippet></ROW><ROW><id>9899442</id><snippet>import http.server
import socketserver

PORT = 8000

class ScriptHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):

    def do_POST(self):
        """ Handle POSTed script """

        try:
            result = eval(self.rfile.read())
            self.send_response(200,'Ok')
            self.wfile.write(result)
        except:
            #handle errors


httpd = socketserver.TCPServer(("", PORT), ScriptHTTPRequestHandler)

print("serving at port", PORT)
httpd.serve_forever()
</snippet></ROW><ROW><id>9899475</id><snippet>def deleteButton():
    b = layout.takeAt(2)
    buttons.pop(2)
    b.widget().deleteLater()
</snippet></ROW><ROW><id>9899475</id><snippet>def deleteButton():
    b = layout.takeAt(2)
    buttons.pop(2)
    w = b.widget()
    w.setParent(None)
</snippet></ROW><ROW><id>9899475</id><snippet>deleteLater()</snippet></ROW><ROW><id>9899607</id><snippet>.*</snippet></ROW><ROW><id>9899607</id><snippet>.*</snippet></ROW><ROW><id>9899607</id><snippet>.</snippet></ROW><ROW><id>9899607</id><snippet>.*</snippet></ROW><ROW><id>9899607</id><snippet>`[^\n]*(.*)`
</snippet></ROW><ROW><id>9899607</id><snippet>pyparsing</snippet></ROW><ROW><id>9899607</id><snippet>corpus.split('\n')</snippet></ROW><ROW><id>9899738</id><snippet>uif = "images/userGray.png"
bif = "images/bg.jpg"
cif = "images/chair3.png"
i = 0
playerX = 1
playerY = 1
pX = 1
pY = 1
bX = 0
bY = 0
moveX = 0
moveY = 0
windowX = 640
windowY = 480
lowerY = 1024
lowerX = 1024
bullets = []
x = 0
y = 0
rotate = False

objects = []

objects.append([256,260,410,511])

import pygame, sys
from pygame.locals import *

pygame.init()

screen = pygame.display.set_mode((640,480),0,32)

background = pygame.image.load(bif).convert()
user = pygame.image.load(uif).convert_alpha()
chair = pygame.image.load(cif).convert_alpha()
chair1 = pygame.image.load(cif).convert_alpha()

pygame.time.set_timer(USEREVENT + 1, 100)

def shoot(inLoc, clLoc, weapon):
    bulletId = len(bullets)
    bullets[bulletId] = [inLoc, clLoc, 200, 3]

moveSpeed = .1

while True:



    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        if event.type == USEREVENT + 1:
            rotate = True;
        if event.type == KEYDOWN:
            if event.key == K_LEFT or event.key == K_a:
                moveX = -1*moveSpeed
            elif event.key == K_RIGHT or event.key == K_d:
                moveX = moveSpeed
            if event.key == K_DOWN or event.key == K_s:
                moveY = moveSpeed
            elif event.key == K_UP or event.key == K_w:
                moveY = -1*moveSpeed
        if event.type == KEYUP:
            if event.key == K_LEFT or event.key == K_a or event.key == K_RIGHT or event.key == K_d:
                moveX = 0
            if event.key == K_DOWN or event.key == K_s or event.key == K_UP or event.key == K_w:
                moveY = 0

    dontMoveX = 0
    dontMoveY = 0

    for obj in objects:

        if playerX + moveX &gt; obj[0]-user.get_width() and playerX + moveX &lt; obj[1] and playerY + moveY &gt; obj[2]-user.get_height() and playerY + moveY &lt; obj[3]:
            if playerY + moveY == obj[2]-user.get_height()-1 or playerY + moveY == obj[3]+1:
                dontMoveX = 0
            else:
                dontMoveX = 1

        if playerX + moveX &gt; obj[0]-user.get_width() and playerX + moveX &lt; obj[1] and playerY + moveY &gt; obj[2]-user.get_height() and playerY + moveY &lt; obj[3]:
            if playerX + moveX == obj[0]-user.get_width()-1 or playerX + moveX == obj[1]+1:
                dontMoveY = 0
            else:
                dontMoveY = 1

    if dontMoveX == 0:
        playerX += moveX

        if (playerX &gt;= 0 and playerX &lt;= windowX/2) or (playerX &gt;= lowerX-(windowX/2) and playerX &lt;= lowerX-user.get_width()):
            pX+=moveX
        if playerX &gt; windowX/2 and playerX &lt; lowerX-(windowX/2):
            bX+=-1*moveX

    if dontMoveY == 0:
        playerY += moveY

        if (playerY &gt;= 0 and playerY &lt;= windowY/2) or (playerY &gt;= lowerY-(windowY/2) and playerY &lt;= lowerY-user.get_width()):
            pY+=moveY
        if playerY &gt; windowY/2 and playerY &lt; lowerY-(windowY/2):
            bY+=-1*moveY

    screen.blit(background,(bX,bY))



    screen.blit(user,(pX,pY))


    pygame.mouse.set_visible(False);

    if rotate == True:    

        if i &lt; 360:
            i = i + 18
        else:
            i = 0

        orig_chair_rect = chair.get_rect()
        chair1 = pygame.transform.rotate(chair, i);
        rot_chair_rect = orig_chair_rect.copy()
        rot_chair_rect.center = chair1.get_rect().center
        chair1 = chair1.subsurface(rot_chair_rect).copy()

        rotate = False

    x,y = pygame.mouse.get_pos()
    x -= chair.get_width()/2
    y -= chair.get_height()/2

    screen.blit(chair1,(x,y))

    pygame.display.update()
</snippet></ROW><ROW><id>9899802</id><snippet>dictlist = [{'192.168.15.90': {'process': {'master': 1}}},
 {'192.168.15.90': {'process': {'varnish': 1}}},
 {'192.168.15.91': {'process': {'tomcat': 1}}}]

dd = {
'192.168.15.90':
    {'process': {'master': 1,'varnish': 1}},
'192.168.15.91':
    {'process': {'tomcat': 1}
}}

new = {}

# for each dict in the list
for dct in dictlist:
    # get the ip address
    ip, = dct
    # if the ip address is already in the new dict
    if ip in new:
        # copy in the process info
        new[ip]['process'].update(dct[ip]['process'])
    # if the ip address isn't in the new dict yet
    else:
        # add the ip address and its info to the new dict
        new.update(dct)

print dd == new # True!
</snippet></ROW><ROW><id>9900344</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>9900368</id><snippet>gtk.Label.set_justify()</snippet></ROW><ROW><id>9900368</id><snippet>gtk.Misc.set_alignment()</snippet></ROW><ROW><id>9900368</id><snippet>set_justify()</snippet></ROW><ROW><id>9900368</id><snippet>gtk.Misc.set_alignment()</snippet></ROW><ROW><id>9900368</id><snippet>import gtk

w = gtk.Window()
w.connect('destroy', gtk.main_quit)
text = 'whatever'
label=gtk.Label("&lt;b&gt;"+text+"&lt;/b&gt;")
label.set_use_markup(True)
label.set_alignment(0, 0.5)
w.add(label)

w.show_all()

gtk.main()
</snippet></ROW><ROW><id>9900525</id><snippet>urllib2</snippet></ROW><ROW><id>9900525</id><snippet>urllib3</snippet></ROW><ROW><id>9900525</id><snippet>requests</snippet></ROW><ROW><id>9900525</id><snippet>from itertools import count
import requests

HEADERS = {'user-agent': 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'}
URL = "http://www.example.com/img%03d.png"

# with a session, we get keep alive
session = requests.session()

for n in count():
    full_url = URL % n
    ignored, filename = URL.rsplit('/', 1)

    with file(filename, 'wb') as outfile:
        response = session.get(full_url, headers=HEADERS)
        if not response.ok:
            break
        outfile.write(response.content)
</snippet></ROW><ROW><id>9900525</id><snippet>403 Forbidden</snippet></ROW><ROW><id>9900525</id><snippet>requests.get</snippet></ROW><ROW><id>9900525</id><snippet>auth</snippet></ROW><ROW><id>9900525</id><snippet>response = session.get(full_url, headers=HEADERS, auth=('username','password))
</snippet></ROW><ROW><id>9900981</id><snippet>os.listdir</snippet></ROW><ROW><id>9900981</id><snippet>output</snippet></ROW><ROW><id>9900981</id><snippet>inputdir</snippet></ROW><ROW><id>9900981</id><snippet>with</snippet></ROW><ROW><id>9900981</id><snippet>path, dirs, files</snippet></ROW><ROW><id>9900981</id><snippet>os.walk</snippet></ROW><ROW><id>9900981</id><snippet>import os

INPUTDIR= "c:\\temp2\\CSV"
OUTPUTDIR = "c:\\temp2\\CSV\\output"
keyword = "KEYWORD"

def make_path(p):
    '''Makes sure directory components of p exist.'''
    try:
        os.makedirs(p)
    except OSError:
        pass

def dest_path(p):
    '''Determines relative path of p to INPUTDIR,
       and generates a matching path on OUTPUTDIR.
    '''
    path = os.path.relpath(p,INPUTDIR)
    return os.path.join(OUTPUTDIR,path)

make_path(OUTPUTDIR)

for path, dirs, files in os.walk(INPUTDIR):
    for d in dirs:
        dir_path = os.path.join(path,d)
        # Handle case of OUTPUTDIR inside INPUTDIR
        if dir_path == OUTPUTDIR:
            dirs.remove(d)
            continue
        make_path(dest_path(dir_path))    
    for f in files:
        file_path = os.path.join(path, f)
        out_path = dest_path(file_path)
        with open(file_path, "r") as fh, open(out_path, "w") as fo:
            for line in fh:
                if keyword not in line:
                    fo.write(line)
</snippet></ROW><ROW><id>9901036</id><snippet>import itertools
import random
set_size = 2
schedule = set()
teams = range(5)
for comb in itertools.product(teams, repeat=set_size):
    comb = sorted(list(comb))
    if len(set(comb)) == set_size:
        schedule.add(tuple(comb))

schedule = list(schedule)
random.shuffle(schedule)
print schedule
</snippet></ROW><ROW><id>9901037</id><snippet>python foo.py</snippet></ROW><ROW><id>9901106</id><snippet>instance = Model(**form_data.cleaned_data)</snippet></ROW><ROW><id>9901106</id><snippet>instance = form_data.save()</snippet></ROW><ROW><id>9901106</id><snippet>commit=False</snippet></ROW><ROW><id>9901106</id><snippet>save()</snippet></ROW><ROW><id>9901106</id><snippet>instance = form_data.save(commit=False)
# do some stuff with instance
instance.save()
</snippet></ROW><ROW><id>9901164</id><snippet>pygame.time.delay(x)</snippet></ROW><ROW><id>9901164</id><snippet>pygame.event.pump()</snippet></ROW><ROW><id>9901164</id><snippet>-1*moveSpeed</snippet></ROW><ROW><id>9901164</id><snippet>-moveSpeed</snippet></ROW><ROW><id>9901164</id><snippet>pygame.display.set_mode</snippet></ROW><ROW><id>9901216</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; mechanize.__file__
Some/path/to/mechanize
</snippet></ROW><ROW><id>9901216</id><snippet>[1] import sys
[2] print sys.path
</snippet></ROW><ROW><id>9901583</id><snippet>from dateutil.parser import parse
datetimeObj = parse(strDate) 
# str date is a date string
</snippet></ROW><ROW><id>9901862</id><snippet>tag_add()</snippet></ROW><ROW><id>9901862</id><snippet>import Tkinter as tk

def make_bold():
    aText.tag_add("bt", "sel.first", "sel.last")

lord = tk.Tk()

aText = tk.Text(lord, font=("Georgia", "12"))
aText.grid()

aButton = tk.Button(lord, text="bold", command=make_bold)
aButton.grid()

aText.tag_config("bt", font=("Georgia", "12", "bold"))

lord.mainloop()
</snippet></ROW><ROW><id>9901862</id><snippet>import Tkinter as tk
import tkFont

def make_bold():
    current_tags = aText.tag_names("sel.first")
    if "bt" in current_tags:
        aText.tag_remove("bt", "sel.first", "sel.last")
    else:
        aText.tag_add("bt", "sel.first", "sel.last")


lord = tk.Tk()

aText = tk.Text(lord, font=("Georgia", "12"))
aText.grid()

aButton = tk.Button(lord, text="bold", command=make_bold)
aButton.grid()

bold_font = tkFont.Font(aText, aText.cget("font"))
bold_font.configure(weight="bold")
aText.tag_configure("bt", font=bold_font)

lord.mainloop()
</snippet></ROW><ROW><id>9902234</id><snippet>from flask import Flask,jsonify
import requests
import simplejson 
import json

app = Flask(__name__)

@app.route("/")
def home():
    uri = "https://api.stackexchange.com/2.0/users?   order=desc&amp;sort=reputation&amp;inname=fuchida&amp;site=stackoverflow"
    try:
        uResponse = requests.get(uri)
    except requests.ConnectionError:
       return "Connection Error"  
    Jresponse = uResponse.text
    data = json.loads(Jresponse)

    displayName = data['items'][0]['display_name']# &lt;-- The display name
    reputation = data['items'][0]['reputation']# &lt;-- The reputation

    return Jresponse

if __name__ == "__main__":
    app.run(debug = True)
</snippet></ROW><ROW><id>9902397</id><snippet>True</snippet></ROW><ROW><id>9902397</id><snippet>True</snippet></ROW><ROW><id>9902417</id><snippet>namedtuple</snippet></ROW><ROW><id>9902417</id><snippet>import collections, os

link_ids = ['111','222','333']
filenames = ['111-foo.txt','111-bar.txt','222.txt']
File = collections.namedtuple("File", "fname fext") # named-tuple set-up

files = {File(*os.path.splitext(f)) for f in filenames}
# -&gt; set([File(fname='222', fext='.txt'), 
#         File(fname='111-bar', fext='.txt'), 
#         File(fname='111-foo', fext='.txt')])
</snippet></ROW><ROW><id>9902417</id><snippet>matched = [f for f in files if f.fname in link_ids]
# -&gt; [File(fname='222', fext='.txt')]
</snippet></ROW><ROW><id>9902417</id><snippet>unmatched = [l for l in link_ids if l not in {getattr(f,'fname') for f in files}]
# -&gt; ['111', '333']
</snippet></ROW><ROW><id>9902417</id><snippet>matched_filenames = [f.fname + f.fext for f in matched]
# -&gt; ['222.txt']
</snippet></ROW><ROW><id>9902812</id><snippet>print render_template('/path/to/template.html',
    title = 'My page title',
    more  = 'even more stuff',
    **logged_in
)
</snippet></ROW><ROW><id>9903136</id><snippet>    ./simulate.py `./rsgen.py`
</snippet></ROW><ROW><id>9903616</id><snippet>float</snippet></ROW><ROW><id>9903616</id><snippet>double</snippet></ROW><ROW><id>9903711</id><snippet>reference: xyz</snippet></ROW><ROW><id>9903711</id><snippet>data = json.dumps({'reference': reference})</snippet></ROW><ROW><id>9903789</id><snippet>&gt;&gt;&gt; [index for (_, index) in set(zip(A, xrange(len(A)))) - set(zip(B, xrange(len(B))))]
[5, 7]
</snippet></ROW><ROW><id>9903789</id><snippet>&gt;&gt;&gt; [index for (index, _) in set(enumerate(A)) - set(enumerate(B))]
[5, 7]
</snippet></ROW><ROW><id>9903789</id><snippet>zip</snippet></ROW><ROW><id>9903789</id><snippet>enumerate</snippet></ROW><ROW><id>9903789</id><snippet>(index, value)</snippet></ROW><ROW><id>9903789</id><snippet>(value, index)</snippet></ROW><ROW><id>9903909</id><snippet>plt.Figure()
thismanager = get_current_fig_manager()
thismanager.window.wm_geometry("500x500+890+300") #sets original size and position
button = Tkinter.Button(self,command=self.Click)

def Click(self):
   thismanager = get_current_fig_manager()
   thismanager.set_window_title('Title')
   plt.clf()
   plt.xlabel('Xaxis',fontsize=16)
   im=imshow(variable, cmap='gray', origin='lower',vmin=0,vmax=255,interpolation='nearest')
   cb=colorbar()
   cb.set_label('Label',fontsize=16)
   show()
</snippet></ROW><ROW><id>9903939</id><snippet>len(seq)</snippet></ROW><ROW><id>9903939</id><snippet>start</snippet></ROW><ROW><id>9903939</id><snippet>end</snippet></ROW><ROW><id>9903939</id><snippet>    mid = len(seq_list)/2
    merge_sort(seq_list[0:mid], start, mid)
    merge_sort(seq_list[mid:], mid, end)
</snippet></ROW><ROW><id>9903939</id><snippet>[0,1,2,3]</snippet></ROW><ROW><id>9903939</id><snippet>mergesort([2,3],2,3) #2 == mid, 3 == end
</snippet></ROW><ROW><id>9903939</id><snippet>mid = len([2,3])/2 == 1
</snippet></ROW><ROW><id>9903939</id><snippet>mergesort([3],1,3)
</snippet></ROW><ROW><id>9903939</id><snippet>start &gt;= end</snippet></ROW><ROW><id>9903939</id><snippet>end</snippet></ROW><ROW><id>9903939</id><snippet>merge_sort(seq_list[0:mid], start, mid)
</snippet></ROW><ROW><id>9903939</id><snippet>seq_list</snippet></ROW><ROW><id>9903939</id><snippet>merge()</snippet></ROW><ROW><id>9903940</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; x = defaultdict(dict, 
    {
        u'row1': {u'column1': 33, u'column2': 55, u'column3': 23}, 
        u'row2': {u'column1': 32, u'column2': 32, u'column3': 17}, 
        u'row3': {u'column1': 31, u'column2': 87, u'column3': 18}
    }) 

&gt;&gt;&gt; sums = defaultdict(int)
&gt;&gt;&gt; for row in x.itervalues():
        for column, val in row.iteritems():
            sums[column] += val


&gt;&gt;&gt; sums
defaultdict(&lt;type 'int'&gt;, {u'column1': 96, u'column3': 58, u'column2': 174})
</snippet></ROW><ROW><id>9903940</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; sums = Counter()
&gt;&gt;&gt; for row in x.values():
        sums.update(row)


&gt;&gt;&gt; sums
Counter({u'column2': 174, u'column1': 96, u'column3': 58}) 
</snippet></ROW><ROW><id>9903989</id><snippet>(R, G, B)</snippet></ROW><ROW><id>9904125</id><snippet>opener.open('http://localhost:8000/auth', login_data_encoded)
</snippet></ROW><ROW><id>9904511</id><snippet>def outer_join_accessor_factory(collection_type, proxy):
    def getter(obj):
        if obj is None:
            return None
        return getattr(obj, proxy.value_attr)
    def setter(obj, value):
        setattr(obj, proxy.value_attr, value)
    return getter, setter

class C(Base):
    __tablename__ = 'c'
    id = Column(Integer, primary_key=True)
    id_b = Column(Integer, ForeignKey('b.id'))
    b = relationship('B', backref='cs')
    a = association_proxy('b', 'a', getset_factory=outer_join_accessor_factory)
</snippet></ROW><ROW><id>9904996</id><snippet>h2</snippet></ROW><ROW><id>9904996</id><snippet>div</snippet></ROW><ROW><id>9904996</id><snippet>h2</snippet></ROW><ROW><id>9904996</id><snippet>'//h2|//div[contains(@class,"config-entry")]'
</snippet></ROW><ROW><id>9904996</id><snippet>from lxml import etree

doc = etree.HTML("""
&lt;html&gt;
&lt;h2&gt;category 1&lt;/h2&gt;
&lt;div class='clear10'&gt;&lt;/div&gt;
&lt;div class='config-entry selected-block'&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;h2&gt;category 2&lt;/h2&gt;
&lt;div class='clear10'&gt;&lt;/div&gt;
&lt;div class='config-entry selected-block'&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;h2&gt;category 3&lt;/h2&gt;
&lt;div class='clear10'&gt;&lt;/div&gt;
&lt;div class='config-entry selected-block'&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;h2&gt;category 4&lt;/h2&gt;
&lt;div class='clear10'&gt;&lt;/div&gt;
&lt;div class='config-entry selected-block'&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;div class='config-entry '&gt;...&lt;/div&gt;
&lt;/html&gt;""")

category = None
for ele in doc.xpath('//h2|//div[contains(@class,"config-entry")]'):
  if ele.tag == 'h2':
    category = str(ele.text)
  else:
    if category:
      print "%s: %s, %r" % (category,ele.tag,ele.attrib)
</snippet></ROW><ROW><id>9904996</id><snippet>category 1: div, {'class': 'config-entry selected-block'}
category 1: div, {'class': 'config-entry '}
category 1: div, {'class': 'config-entry '}
category 1: div, {'class': 'config-entry '}
category 2: div, {'class': 'config-entry selected-block'}
category 2: div, {'class': 'config-entry '}
category 2: div, {'class': 'config-entry '}
category 2: div, {'class': 'config-entry '}
category 2: div, {'class': 'config-entry '}
category 3: div, {'class': 'config-entry selected-block'}
category 3: div, {'class': 'config-entry '}
category 4: div, {'class': 'config-entry selected-block'}
category 4: div, {'class': 'config-entry '}
category 4: div, {'class': 'config-entry '}
category 4: div, {'class': 'config-entry '}
</snippet></ROW><ROW><id>9905294</id><snippet>json.dumps()</snippet></ROW><ROW><id>9905294</id><snippet>osuser = "nodermatt"
ospassword = "feelfree"
ostenant = "4"

d = {"auth": 
        {"passwordCredentials": {"username": osuser, "password": ospassword},
         "tenantId": ostenant}}
params = json.dumps(d)
</snippet></ROW><ROW><id>9905508</id><snippet>&gt;&gt;&gt; '1989, 1990'.split(', ')
['1989', '1990']
</snippet></ROW><ROW><id>9905508</id><snippet>&gt;&gt;&gt; '1989, 1990,1991'.replace(' ', '').split(',')
['1989', '1990', '1991']
</snippet></ROW><ROW><id>9906279</id><snippet>L = [1, 2, 4, 8, 16, 32, 64] 
X = 5 
i = 0 
while i &lt; len(L): 
    if 2 ** X == L[i]: 
        print('at index',i)
        break;
    i = i+1 
    if i==len(L): print(X,'not found') 
</snippet></ROW><ROW><id>9906815</id><snippet>some_object.user == request.user
</snippet></ROW><ROW><id>9906815</id><snippet>__eq__</snippet></ROW><ROW><id>9906815</id><snippet>def __eq__(self, other):
    return isinstance(other, self.__class__) and self._get_pk_val() == other._get_pk_val()
</snippet></ROW><ROW><id>9906887</id><snippet>import wx
import math
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

class Graph(wx.Panel):
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        self.figure = Figure()
        self.canvas = FigureCanvas(self, -1, self.figure)
        self.Bind(wx.EVT_SIZE, self.OnSize)

    def OnSize(self, event):
        size = self.GetSize()
        self.canvas.SetSize(size)

    def Draw(self):
        self.figure.clear()
        self.subplot = self.figure.add_subplot(111)
        x = [a*(math.pi/50) for a in range(100)]
        y = [self.f(a) for a in x]
        self.subplot.plot(x, y)
        self.canvas.draw()

    def DrawCosine(self, e):
        self.f = math.cos
        self.Draw()

    def DrawSine(self, e):
        self.f = math.sin
        self.Draw()        


class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)
        self.button1 = wx.Button(self.panel, label="Sine")
        self.button2 = wx.Button(self.panel, label="Cosine")
        self.graph = Graph(self.panel)
        self.graph.DrawSine(None)

        self.button1.Bind(wx.EVT_BUTTON, self.graph.DrawSine)
        self.button2.Bind(wx.EVT_BUTTON, self.graph.DrawCosine)

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer2 = wx.BoxSizer()

        self.sizer.Add(self.graph, 1, wx.ALL | wx.EXPAND)
        self.sizer2.Add(self.button1, 1, wx.ALL | wx.EXPAND)
        self.sizer2.Add(self.button2, 1, wx.ALL | wx.EXPAND)
        self.sizer.Add(self.sizer2, 0, wx.ALL | wx.EXPAND)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>9906887</id><snippet>pyplot</snippet></ROW><ROW><id>9906887</id><snippet>import wx
import math
from matplotlib import pyplot

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)
        self.button1 = wx.Button(self.panel, label="Sine")
        self.button2 = wx.Button(self.panel, label="Cosine")

        self.button1.Bind(wx.EVT_BUTTON, self.DrawSine)
        self.button2.Bind(wx.EVT_BUTTON, self.DrawCosine)

        self.sizer = wx.BoxSizer()

        self.sizer.Add(self.button1)
        self.sizer.Add(self.button2)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

    def Draw(self):
        x = [a*(math.pi/50) for a in range(100)]
        y = [self.f(a) for a in x]
        pyplot.plot(x, y)
        pyplot.grid(True, which='both', axis="both")
        pyplot.show()

    def DrawCosine(self, e):
        self.f = math.cos
        self.Draw()

    def DrawSine(self, e):
        self.f = math.sin
        self.Draw() 

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>9907020</id><snippet>&gt;&gt;&gt; dict(set.intersection(*(set(d.iteritems()) for d in dicts)))
{'a': 3}
</snippet></ROW><ROW><id>9907127</id><snippet>def replacement(match):
    if "I" in match.group(2):
        return match.group(1) + "l" * len(match.group(2)) + match.group(3)
    # Add additional cases here and as ORs in your regex

re.sub(r"(\w+)(II+)(\w*)", replacement, "I am stiII here.")
&gt;&gt;&gt; I am still here.
</snippet></ROW><ROW><id>9907307</id><snippet>os.setuid(x)</snippet></ROW><ROW><id>9907307</id><snippet>su -c &lt;command&gt;</snippet></ROW><ROW><id>9907307</id><snippet>su -c</snippet></ROW><ROW><id>9907307</id><snippet>$ chmod g+s script
</snippet></ROW><ROW><id>9907307</id><snippet>Popen</snippet></ROW><ROW><id>9907307</id><snippet>#!/bin/sh
sudo my/problematic/script.sh
</snippet></ROW><ROW><id>9907433</id><snippet>x</snippet></ROW><ROW><id>9907433</id><snippet>x += 1</snippet></ROW><ROW><id>9907433</id><snippet>x</snippet></ROW><ROW><id>9907433</id><snippet>x</snippet></ROW><ROW><id>9907433</id><snippet>x</snippet></ROW><ROW><id>9907433</id><snippet>x += ['_']</snippet></ROW><ROW><id>9907433</id><snippet>x</snippet></ROW><ROW><id>9907433</id><snippet>x</snippet></ROW><ROW><id>9907433</id><snippet>['_']</snippet></ROW><ROW><id>9907828</id><snippet>&gt;&gt;&gt; import cloud
&gt;&gt;&gt;
&gt;&gt;&gt; def my_func(x):
&gt;&gt;&gt;    import your_fortran_module
&gt;&gt;&gt;    return your_fortran_module.function(x)
&gt;&gt;&gt; 
&gt;&gt;&gt; cloud.setkey(api-key, api-secretkey)
&gt;&gt;&gt;
&gt;&gt;&gt; cloud.rest.publish(my_func, "label_of_my_func", _env="your_environment")
"https://api.picloud.com/r/unique_user_id/label_of_my_func"
</snippet></ROW><ROW><id>9907828</id><snippet>import base64
import json
import urlfetch

base64string = base64.encodestring('%s:%s' % (key, secret_ley))[:-1]
http_headers = {'Authorization' : 'Basic %s' % base64string}

response = urlfetch.fetch(url='https://api.picloud.com/servers/list/',
      payload={},  #POST DATA if method was urlfetch.POST
      method=urlfetch.GET,
      headers=http_headers)
data = json.loads(response.content)    #{"servers": ["https://api.picloud.com/"]}
</snippet></ROW><ROW><id>9907876</id><snippet>In [1]: from datetime import date, timedelta

In [2]: a=[date.today(), date.today() + timedelta(days=1), date.today() - timedelta(days=1)]

In [3]: a
Out[3]: 
[datetime.date(2012, 3, 28),
 datetime.date(2012, 3, 29),
 datetime.date(2012, 3, 27)]

In [4]: a.sort()

In [5]: a
Out[5]: 
[datetime.date(2012, 3, 27),
 datetime.date(2012, 3, 28),
 datetime.date(2012, 3, 29)]

In [6]: a[0] # min
Out[6]: datetime.date(2012, 3, 27)

In [7]: a[-1] # max
Out[7]: datetime.date(2012, 3, 29)
</snippet></ROW><ROW><id>9908075</id><snippet>ids_l1 = set(x.id for x in l1)  # All ids in list 1
intersection = [item for item in l2 if item.id in ids_l1]  # Only those elements of l2 with an id in l1
</snippet></ROW><ROW><id>9908075</id><snippet>ids_l1</snippet></ROW><ROW><id>9908075</id><snippet>if item.id in set(…)</snippet></ROW><ROW><id>9908075</id><snippet>item</snippet></ROW><ROW><id>9908075</id><snippet>in</snippet></ROW><ROW><id>9908216</id><snippet>import weakref
import gc

class MyObject(object):
    def my_method(self):
        print 'my_method was called!'

obj = MyObject()
r = weakref.ref(obj)

gc.collect()
assert r() is obj #r() allows you to access the object referenced: it's there.

obj = 1 #Let's change what obj references to
gc.collect()
assert r() is None #There is no object left: it was gc'ed.
</snippet></ROW><ROW><id>9908428</id><snippet>a = u"пример" 

print urllib.quote_plus(a.encode('utf8'))
## %D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80

print urllib.quote_plus(a.encode('cp1251'))
## %EF%F0%E8%EC%E5%F0
</snippet></ROW><ROW><id>9908514</id><snippet>str( "%0.15g" % cell.value )</snippet></ROW><ROW><id>9908514</id><snippet>- Same as "e" if exponent is greater than -4 or less than precision, "f" otherwise.</snippet></ROW><ROW><id>9908514</id><snippet>0.</snippet></ROW><ROW><id>9908514</id><snippet>"%0.15"</snippet></ROW><ROW><id>9908528</id><snippet>myFormats['audio'] or myFormats['video']
</snippet></ROW><ROW><id>9908528</id><snippet>myFormats['audio']</snippet></ROW><ROW><id>9908528</id><snippet>or</snippet></ROW><ROW><id>9908528</id><snippet>myFormats['audio'] + myFormats['video']
</snippet></ROW><ROW><id>9908528</id><snippet>set</snippet></ROW><ROW><id>9908528</id><snippet>formats = {'audio': {'.wav', '.wma', '.mp3'}, 'video': {'.mpg', '.mp4', '.mpeg'}}

myfile = '5DeadlyVenoms.mp3'
extensions = (x for x in formats['audio'] + formats['video'] if myfile.endswith(x))
extension = extensions.next()
</snippet></ROW><ROW><id>9908589</id><snippet>intWage=float(raw_input("Enter employee's wage: "))
</snippet></ROW><ROW><id>9908599</id><snippet>manage.py shell</snippet></ROW><ROW><id>9908599</id><snippet>from django.conf import settings; 'django_extensions' in settings.INSTALLED_APPS
</snippet></ROW><ROW><id>9908666</id><snippet>form.tutor = request.user
if form.is_valid():
  form.save()
</snippet></ROW><ROW><id>9908666</id><snippet>form.instance.tutor = request.user
if form.is_valid():
  form.save()
</snippet></ROW><ROW><id>9908710</id><snippet>class account_invoice_update(osv.osv_memory):

_name = "account.invoice.update"

""" Function to update all lines on selected invoice(s) """
def invoice_update(self, cr, uid, ids, context=None):
    if context is None:
        context = {}

    pool_obj = pooler.get_pool(cr.dbname)
    data_inv = pool_obj.get('account.invoice').read(cr, uid, context['active_ids'], ['state'], context=context)

    for record in data_inv:
        if record['state'] in ('cancel','paid','open'):
            raise osv.except_osv(_('Warning'), _("Selected Invoice(s) cannot be cancelled as they are already in 'Cancelled','Done', or 'Open' state!"))

    inv_obj = self.pool.get('account.invoice')
    inv_line_obj = self.pool.get('account.invoice.line')
    for invoice in inv_obj.browse(cr, uid, context.get('active_ids'), context=context):
        for line in invoice.invoice_line:
            res = inv_line_obj.product_id_change(cr, uid, [line.id], (line.product_id and line.product_id.id or False), uom=(line.uos_id and line.uos_id.id or False), qty=(line.quantity or 0), name=(line.name or ''), type=(invoice.type or False), partner_id=invoice.partner_id.id, fposition_id=invoice.fiscal_position.id, price_unit=(line.price_unit or 0), address_invoice_id=(invoice.address_invoice_id and invoice.address_invoice_id.id or False), currency_id=(invoice.currency_id and invoice.currency_id.id or False), context=context)
            price_unit = res['value']['price_unit']
            discount = res['value']['discount']
            inv_line_obj.write(cr, uid, [line.id], {'price_unit': price_unit})
            inv_line_obj.write(cr, uid, [line.id], {'discount': discount})

    return {'type': 'ir.actions.act_window_close'}

account_invoice_update()
</snippet></ROW><ROW><id>9908922</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>9908922</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(conf.get("test", "test_regex"))
'\\[[+-]?\\d+(?:\\.\\d+)?\\]'
</snippet></ROW><ROW><id>9908922</id><snippet>[test]
test_regex=\[[+-]?\d+(?:\.\d+)?\] 

&gt;&gt;&gt; conf.get("test", "test_regex")
'\\[[+-]?\\d+(?:\\.\\d+)?\\]'
</snippet></ROW><ROW><id>9908922</id><snippet>&gt;&gt;&gt; re.findall(r'\[[+-]?\d+(?:\.\d+)?\]', 'foo [+10] bar [-3.5]')
['[+10]', '[-3.5]']
</snippet></ROW><ROW><id>9909028</id><snippet>fcntl.flock(open('/tmp/locktest', 'r'), fcntl.LOCK_EX | fcntl.LOCK_NB)
(...)
fcntl.flock(open('/tmp/locktest', 'r'), fcntl.LOCK_EX | fcntl.LOCK_NB)
</snippet></ROW><ROW><id>9909028</id><snippet>f = open('/tmp/locktest', 'r')
fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
(...)
fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
</snippet></ROW><ROW><id>9909028</id><snippet>IOError: [Errno 11] Resource temporarily unavailable</snippet></ROW><ROW><id>9909156</id><snippet>ren</snippet></ROW><ROW><id>9909156</id><snippet>import os
os.rename(src, dst)
</snippet></ROW><ROW><id>9909190</id><snippet>clean</snippet></ROW><ROW><id>9909190</id><snippet>form.is_valid()</snippet></ROW><ROW><id>9909455</id><snippet>from django.core import urlresolvers

class Widget(models.Model):
    # fields ...
    def get_absolute_url(self):
        return urlresolvers.reverse('widget_detail', args=[self.pk])
</snippet></ROW><ROW><id>9910041</id><snippet>!=</snippet></ROW><ROW><id>9910041</id><snippet>def dict_intersection(dicts):
    result = {}
    conflicting = set()
    for d in dicts:
        for k, v in d.iteritems():
            if k not in conflicting and result.setdefault(k, v) != v:
                del result[k]
                conflicting.add(k)
    return result
</snippet></ROW><ROW><id>9910041</id><snippet>conflicting</snippet></ROW><ROW><id>9910080</id><snippet>Whois.Resources</snippet></ROW><ROW><id>9910080</id><snippet>WhoIs.Resources</snippet></ROW><ROW><id>9910168</id><snippet>class Student(models.Model): 
    name = models.CharField(max_length=30)
    courses = models.ManyToManyField('Course')

class Course(models.Model):
    # Yoga, Spanish, French, etc.
    name = models.CharField(max_length=30)

class Score(models.Model):
    date = models.DateTimeField(auto_now_add=True)
    points = models.IntegerField(max_length=4)
    course = models.ForeignKey('Course')
    student = models.ForeignKey('Student')
</snippet></ROW><ROW><id>9910180</id><snippet>new_method()</snippet></ROW><ROW><id>9910180</id><snippet>class Decorator(object):
    def __init__(self, arg):
        self.arg = arg
    def __call__(self, cls):
        class Wrapped(cls):
            classattr = self.arg
            def new_method(self, value):
                return value * 2
        return Wrapped

@Decorator("decorated class")
class TestClass(object):
    def new_method(self, value):
        return value * 3
</snippet></ROW><ROW><id>9910180</id><snippet>__init__()</snippet></ROW><ROW><id>9910204</id><snippet>with open("output.txt", "w") as f:
    for item in vocab:
        f.write(item + "\n")
</snippet></ROW><ROW><id>9910597</id><snippet>__new__</snippet></ROW><ROW><id>9910597</id><snippet>symbol</snippet></ROW><ROW><id>9910597</id><snippet>class Symbol(object):
    registry = {}
    def __new__(cls, *args, **kwargs):
        id_ = args[0]
        return Symbol.registry.setdefault(_id, object.__new__(cls, *args, **kwargs))

    def __init__(self, id):
       self.id = id
</snippet></ROW><ROW><id>9910597</id><snippet>Symbol</snippet></ROW><ROW><id>9910597</id><snippet>$ a = Symbol('=')
$ b = Symbol('=')
$ a is b
True
</snippet></ROW><ROW><id>9910848</id><snippet>a</snippet></ROW><ROW><id>9910848</id><snippet>b</snippet></ROW><ROW><id>9910848</id><snippet>a.other = b
b.some_attr = a
</snippet></ROW><ROW><id>9910848</id><snippet>a</snippet></ROW><ROW><id>9910848</id><snippet>b</snippet></ROW><ROW><id>9910848</id><snippet>a = []
a.append(a)
</snippet></ROW><ROW><id>9911055</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9911310</id><snippet>message = """
          Hello, %(foo)s
          Sincerely, %(bar)s
          """ % {'foo': 'John', 'bar': "Doe"}
</snippet></ROW><ROW><id>9911310</id><snippet>s</snippet></ROW><ROW><id>9911310</id><snippet>"%(keyname)s" % {"keyname": "value"}</snippet></ROW><ROW><id>9911371</id><snippet>mystr</snippet></ROW><ROW><id>9911371</id><snippet>def get_lsbs_str(mystr):
    chrlist = list(mystr)
    result1 = [chr(ord(chrlist[-7])&amp;(3))]
    result2 = chrlist[-6:]
    return "".join(result1 + result2)
</snippet></ROW><ROW><id>9911371</id><snippet>mystr</snippet></ROW><ROW><id>9911371</id><snippet>mystr</snippet></ROW><ROW><id>9911741</id><snippet>def eformat(f, prec, exp_digits):
    s = "%.*e"%(prec, f)
    mantissa, exp = s.split('e')
    # add 1 to digits as 1 is taken by sign +/-
    return "%se%+0*d"%(mantissa, exp_digits+1, int(exp))

print eformat(0.0000870927939438012, 14, 3)
print eformat(1.0000870927939438012e5, 14, 3)
print eformat(1.1e123, 4, 4)
print eformat(1.1e-123, 4, 4)
</snippet></ROW><ROW><id>9911741</id><snippet>8.70927939438012e-005
1.00008709279394e+005
1.1000e+0123
1.1000e-0123
</snippet></ROW><ROW><id>9911907</id><snippet>save(1,2,3,4,a=20,b=30,c=40)
</snippet></ROW><ROW><id>9911907</id><snippet>args</snippet></ROW><ROW><id>9911907</id><snippet>(1,2,3,4)</snippet></ROW><ROW><id>9911907</id><snippet>Tuple</snippet></ROW><ROW><id>9911907</id><snippet>kwargs</snippet></ROW><ROW><id>9911907</id><snippet>{'a':20,'b':30,'c':40}</snippet></ROW><ROW><id>9911907</id><snippet>dictionary</snippet></ROW><ROW><id>9911919</id><snippet>set.pop</snippet></ROW><ROW><id>9911919</id><snippet>set.pop</snippet></ROW><ROW><id>9911919</id><snippet>set.pop</snippet></ROW><ROW><id>9911919</id><snippet>IndexError</snippet></ROW><ROW><id>9911933</id><snippet>SELECT * FROM my_table_1 WHERE stock=?</snippet></ROW><ROW><id>9911933</id><snippet>SELECT volume FROM my_table_2 WHERE stock=?</snippet></ROW><ROW><id>9911933</id><snippet>SELECT volume FROM my_table_2</snippet></ROW><ROW><id>9911933</id><snippet>{100, 15, 93, 42}</snippet></ROW><ROW><id>9911933</id><snippet>my_table_1.price</snippet></ROW><ROW><id>9911933</id><snippet>my_table_2.price</snippet></ROW><ROW><id>9911933</id><snippet>my_table_1.price=my_table_2.price</snippet></ROW><ROW><id>9911990</id><snippet>l = ["My", "turtle", "is", "old"]
l.sort(key=len, reverse=True)
# -&gt; ['turtle', 'old', 'My', 'is']
</snippet></ROW><ROW><id>9911991</id><snippet>pg_config</snippet></ROW><ROW><id>9911991</id><snippet>$PATH</snippet></ROW><ROW><id>9912396</id><snippet>import multiprocessing as multi
from multiprocessing import Manager

manager = Manager()

glob_data= manager.list([])

def func(a):
    glob_data.append(a)

map(func,range(10))
print glob_data  #[0,1,2,3,4 ... , 9]  Good.

p=multi.Pool(processes=8)
p.map(func,range(80))

print glob_data  # Super Good.
</snippet></ROW><ROW><id>9912475</id><snippet>feedString = urllib2.build_opener().open(urllib2.Request(feedAddr)).read()
open('feed.xml', 'w').write(feedString)
</snippet></ROW><ROW><id>9912475</id><snippet>feed.xml</snippet></ROW><ROW><id>9912475</id><snippet>http://rss.cnn.com/rss/cnn_topstories.rss?r=n&amp;n=1000.  
</snippet></ROW><ROW><id>9912475</id><snippet>RSS</snippet></ROW><ROW><id>9912477</id><snippet>/download.py</snippet></ROW><ROW><id>9912477</id><snippet>app.yaml</snippet></ROW><ROW><id>9912477</id><snippet>webapp</snippet></ROW><ROW><id>9912477</id><snippet>app.yaml</snippet></ROW><ROW><id>9912477</id><snippet>def main():
    application = webapp.WSGIApplication([
            (r'/download.*', ServeHandler),
        ], debug=True)
</snippet></ROW><ROW><id>9912477</id><snippet>http://localhost:8080/download?key=vzsX4xM1EtNak5RQVxj4BQ==
</snippet></ROW><ROW><id>9912561</id><snippet>def rtf_encode(unistr):
    return ''.join([c if ord(c) &lt; 128 else u'\\u' + unicode(ord(c)) + u'?' for c in unistr])

&gt;&gt;&gt; test_unicode = u'\xa92012'
&gt;&gt;&gt; print test_unicode
©2012
&gt;&gt;&gt; test_utf8 = test_unicode.encode('utf-8')
&gt;&gt;&gt; print test_utf8
©2012
&gt;&gt;&gt; print rtf_encode(test_utf8.decode('utf-8'))
\u169?2012
</snippet></ROW><ROW><id>9912561</id><snippet>join</snippet></ROW><ROW><id>9912561</id><snippet>def rtf_encode_char(unichar):
    code = ord(unichar)
    if code &lt; 128:
        return str(unichar)
    return '\\u' + str(code if code &lt;= 32767 else code-65536) + '?'

def rtf_encode(unistr):
    return ''.join(rtf_encode_char(c) for c in unistr)
</snippet></ROW><ROW><id>9912724</id><snippet>Node.writexml()</snippet></ROW><ROW><id>9912724</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>9912724</id><snippet>file_handle = open("filename.xml","wb")
Your_Root_Node.writexml(file_handle)
file_handle.close()
</snippet></ROW><ROW><id>9912910</id><snippet>catalog = {}
for line in input_file:
    if line in catalog:
        catalog[line] += 1
    else:
        catalog[line] = 1
</snippet></ROW><ROW><id>9912910</id><snippet>from collections import defaultdict
catalog = defaultdict(int)
for line in input_file:
    catalog[line] += 1
</snippet></ROW><ROW><id>9913079</id><snippet>import functools

def Y(f):
    @functools.wraps(f)
    def Yf(*args):
        return inner(*args)
    inner = f(Yf)
    return Yf

@Y
def get_data(f):
    def inner_get_data(*args):
        # This is your real get data function
        # define it as normal
        # but just refer to it as 'f' inside itself
        print 'setting get_data.foo to', args
        f.foo = args
    return inner_get_data

get_data(1, 2, 3)

print get_data.foo
</snippet></ROW><ROW><id>9913079</id><snippet>get_data</snippet></ROW><ROW><id>9913079</id><snippet>f</snippet></ROW><ROW><id>9913086</id><snippet>a[start:stop:step]
</snippet></ROW><ROW><id>9913086</id><snippet>start</snippet></ROW><ROW><id>9913086</id><snippet>stop</snippet></ROW><ROW><id>9913086</id><snippet>step</snippet></ROW><ROW><id>9913086</id><snippet>step</snippet></ROW><ROW><id>9913086</id><snippet>1</snippet></ROW><ROW><id>9913086</id><snippet>start</snippet></ROW><ROW><id>9913086</id><snippet>stop</snippet></ROW><ROW><id>9913086</id><snippet>step</snippet></ROW><ROW><id>9913086</id><snippet>step</snippet></ROW><ROW><id>9913086</id><snippet>start</snippet></ROW><ROW><id>9913086</id><snippet>0</snippet></ROW><ROW><id>9913086</id><snippet>stop</snippet></ROW><ROW><id>9913086</id><snippet>len(a)</snippet></ROW><ROW><id>9913086</id><snippet>step</snippet></ROW><ROW><id>9913086</id><snippet>start</snippet></ROW><ROW><id>9913086</id><snippet>len(a) - 1</snippet></ROW><ROW><id>9913086</id><snippet>stop</snippet></ROW><ROW><id>9913086</id><snippet>a[:5:-1]</snippet></ROW><ROW><id>9913086</id><snippet>a[9:5:-1]</snippet></ROW><ROW><id>9913086</id><snippet>a[:5][::-1]</snippet></ROW><ROW><id>9913086</id><snippet>a[0:5][4::-1]</snippet></ROW><ROW><id>9913086</id><snippet>stop</snippet></ROW><ROW><id>9913086</id><snippet>step</snippet></ROW><ROW><id>9913086</id><snippet>0</snippet></ROW><ROW><id>9913086</id><snippet>None</snippet></ROW><ROW><id>9913370</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>9913370</id><snippet>&lt;div name="name"&gt;{{name}}&lt;/div&gt;</snippet></ROW><ROW><id>9913370</id><snippet>assertIn</snippet></ROW><ROW><id>9913370</id><snippet>self.assertIn(self.response.body, '&lt;div name="name"&gt;world&lt;/div&gt;')</snippet></ROW><ROW><id>9913418</id><snippet>libmysqlclient</snippet></ROW><ROW><id>9913418</id><snippet>install_name_tool</snippet></ROW><ROW><id>9913418</id><snippet>export DLYD_LIBRARY_PATH=/usr/local/mysql/lib
</snippet></ROW><ROW><id>9913418</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>9913418</id><snippet>/usr/local/mysql/lib</snippet></ROW><ROW><id>9913418</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>9913418</id><snippet>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/local/lib/libmysqlclient.18.dylib
</snippet></ROW><ROW><id>9913533</id><snippet>&gt;&gt;&gt; alphabet = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; word = 'java'
&gt;&gt;&gt; splits = [(word[:i], word[i:]) for i in range(len(word) + 1)]
&gt;&gt;&gt; splits
[('', 'java'), ('j', 'ava'), ('ja', 'va'), ('jav', 'a'), ('java', '')]
&gt;&gt;&gt; replaces = [a + c + b[1:] for a, b in splits for c in alphabet if b]
&gt;&gt;&gt; replaces
['aava', 'bava', 'cava', 'dava', 'eava', 'fava', 'gava', 'hava', 'iava', 'java', 'kava', 'lava', 'mava', 'nava', 'oava', 'pava', 'qava', 'rava', 'sava', 'tava', 'uava', 'vava', 'wav
a', 'xava', 'yava', 'zava', 'java', 'jbva', 'jcva', 'jdva', 'jeva', 'jfva', 'jgva', 'jhva', 'jiva', 'jjva', 'jkva', 'jlva', 'jmva', 'jnva', 'jova', 'jpva', 'jqva', 'jrva', 'jsva', '
jtva', 'juva', 'jvva', 'jwva', 'jxva', 'jyva', 'jzva', 'jaaa', 'jaba', 'jaca', 'jada', 'jaea', 'jafa', 'jaga', 'jaha', 'jaia', 'jaja', 'jaka', 'jala', 'jama', 'jana', 'jaoa', 'japa'
, 'jaqa', 'jara', 'jasa', 'jata', 'jaua', 'java', 'jawa', 'jaxa', 'jaya', 'jaza', 'java', 'javb', 'javc', 'javd', 'jave', 'javf', 'javg', 'javh', 'javi', 'javj', 'javk', 'javl', 'ja
vm', 'javn', 'javo', 'javp', 'javq', 'javr', 'javs', 'javt', 'javu', 'javv', 'javw', 'javx', 'javy', 'javz']
</snippet></ROW><ROW><id>9913533</id><snippet>valid_words = [valid for valid in replaces if lookup(valid)]
</snippet></ROW><ROW><id>9913533</id><snippet>alphabet = 'abcdefghijklmnopqrstuvwxyz'
def next_word(word):
    splits = [(word[:i], word[i:]) for i in range(len(word) + 1)]
    replaces = [a + c + b[1:] for a, b in splits for c in alphabet if b]
    return [valid for valid in replaces if lookup(valid)]
</snippet></ROW><ROW><id>9913738</id><snippet>def get_all(data, key):
    sub_iter = []
    if isinstance(data, dict):
        if key in data:
            yield data[key]
        sub_iter = data.itervalues()
    if isinstance(data, list):
        sub_iter = data
    for x in sub_iter:
        for y in get_all(x, key):
            yield y
</snippet></ROW><ROW><id>9913811</id><snippet>l=[(1,5),(4,10),(100,3),(4,8)]
print [x[0] for x in l]
</snippet></ROW><ROW><id>9913811</id><snippet>[1, 4, 100, 4]
</snippet></ROW><ROW><id>9913846</id><snippet>select_s = ", ".join('ADD COLUMN %s FLOAT' % cat for cat in categories)
</snippet></ROW><ROW><id>9914013</id><snippet>str(inventor1.encode("UTF-8") if inventor1 else inventor1)</snippet></ROW><ROW><id>9914098</id><snippet>SyntaxError</snippet></ROW><ROW><id>9914098</id><snippet>try:
    y=input('Number&gt;&gt; ')
except SyntaxError:
    y = None
</snippet></ROW><ROW><id>9914098</id><snippet># not just 'if y:' because 0 evaluates to False!
if y is None:
</snippet></ROW><ROW><id>9914098</id><snippet>raw_input</snippet></ROW><ROW><id>9914098</id><snippet>try:
    y = int(raw_input('Number&gt;&gt; '))
except ValueError:
    print "That wasn't a number!"
</snippet></ROW><ROW><id>9914098</id><snippet>x</snippet></ROW><ROW><id>9914098</id><snippet>str</snippet></ROW><ROW><id>9914098</id><snippet>raw_input</snippet></ROW><ROW><id>9914098</id><snippet>if x == '':
</snippet></ROW><ROW><id>9914098</id><snippet>if x:
</snippet></ROW><ROW><id>9914098</id><snippet>False</snippet></ROW><ROW><id>9914119</id><snippet>plot</snippet></ROW><ROW><id>9914119</id><snippet>clip_on=False</snippet></ROW><ROW><id>9914119</id><snippet>import matplotlib.pyplot as plt
plt.plot(range(5), range(5), 'ro', markersize=20, clip_on=False, zorder=100)
plt.show()
</snippet></ROW><ROW><id>9914204</id><snippet>import numpy as np
from matplotlib import pyplot as plt

A = np.random.random_integers(0, 10, 100).reshape(10, 10)
B = np.random.random_integers(0, 10, 100).reshape(10, 10)

fig = plt.figure()
ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)

mapable = ax1.imshow(A, interpolation="nearest")
cax = ax2.imshow(A, interpolation="nearest")

# set the tickmarks *if* you want cutom (ie, arbitrary) tick labels:
cbar = fig.colorbar(cax, ax=None)

fig = plt.figure(2)
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)
mapable = ax1.imshow(A, interpolation="nearest")
cax = ax2.imshow(A, interpolation="nearest")
# on the figure total in precent l    b      w , height 
ax3 = fig.add_axes([0.1, 0.1, 0.8, 0.05]) # setup colorbar axes. 
# put the colorbar on new axes
cbar = fig.colorbar(mapable,cax=ax3,orientation='horizontal')

plt.show()
</snippet></ROW><ROW><id>9914204</id><snippet>from mpl_toolkits.axes_grid1 import anchored_artists
from matplotlib.patheffects import withStroke
txt = anchored_artists.AnchoredText("SC",
                                    loc=2,
                                    frameon=False,
                                    prop=dict(size=12))
if withStroke:
    txt.txt._text.set_path_effects([withStroke(foreground="w",
                                               linewidth=3)])
ax1.add_artist(txt)


## Draw a line to separate the two different wave lengths, and name each region
l1 = plt.Line2D([-1,10],[5,5],ls='-',color='black',lineswidth=10)
ax1.add_line(l1)
</snippet></ROW><ROW><id>9914574</id><snippet>[(i, j) for i in range(3) for j in range(3) if board[i][j] == 0]
</snippet></ROW><ROW><id>9914601</id><snippet>import win32com.client

word = win32com.client.Dispatch("Word.Application")
doc = word.Documents.Open(r"C:\temp\foo.doc")
if doc.SpellingErrors.Count:
    for err in doc.SpellingErrors:
        print err.Text
else:
    print "No errors"
word.Quit()
word = None
</snippet></ROW><ROW><id>9914613</id><snippet>class SomeModel(...):
  someconst = somevalue
</snippet></ROW><ROW><id>9914674</id><snippet>    # your old code avoce
    for item in value[art]:
        url = urllib2.quote(item['url'], ':/') # Original image url
        if url:
            image_list.append(url)
</snippet></ROW><ROW><id>9914870</id><snippet>str(today.strftime("%y%b%d_%H:%M:%S"))
</snippet></ROW><ROW><id>9914891</id><snippet>test_dict = dict((x, dict()) for x in ['k1', 'k2'])
</snippet></ROW><ROW><id>9915105</id><snippet>@login_required
def edit(request):
   # Skipping the first couple lines.
   id = None
   for key in request.POST.keys():
       if 'edit_amount' in key:
           id = int(key[11:])

   position = InvestorPosition.objects.get(id=id)

   position.amount = Decimal(request.POST.get('edit_amount%s' % id))
   position.save()

   return HttpResponseRedirect(request.POST.get('next', '/portfolio/'))
</snippet></ROW><ROW><id>9915122</id><snippet>def gen_command_string(path, url):
    cmd = path + 'TortoiseProc.exe /command:ignore /path:\"%s\" /closeonend:0' % url
    return cmd

SVN_PATH = 'C:/Program Files/TortoiseSVN/bin'
HG_PATH = 'C:/Program Files/TortoiseHg/bin/'

cmd = gen_command_string(SVN_PATH, 'http://google.com')
call(cmd)
</snippet></ROW><ROW><id>9915183</id><snippet>myproject
    __init__.py
    mymodule1
        __init__.py
    mymodule2
        __init__.py
</snippet></ROW><ROW><id>9915183</id><snippet>from myproject import mymodule1 etc
</snippet></ROW><ROW><id>9915223</id><snippet>interpolation='nearest'</snippet></ROW><ROW><id>9915223</id><snippet>imshow</snippet></ROW><ROW><id>9915223</id><snippet>figimage</snippet></ROW><ROW><id>9915223</id><snippet>import numpy as np
import numpy.random
import matplotlib.pyplot as plt

a=256*np.random.rand(64,64)

f0=plt.figure()
plt.imshow(a,cmap=plt.gray())
plt.suptitle("imshow")

f1=plt.figure()
plt.figimage(a,cmap=plt.gray())
plt.suptitle("figimage")

plt.show()
</snippet></ROW><ROW><id>9915223</id><snippet>figimage</snippet></ROW><ROW><id>9915349</id><snippet>try:
    a.remove(10)
except ValueError:
    pass  # do nothing!
</snippet></ROW><ROW><id>9915404</id><snippet>{{ choices.items.key }}</snippet></ROW><ROW><id>9915718</id><snippet>str('filepath_here')
</snippet></ROW><ROW><id>9915718</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.escape('filepath_with_bad_characters!//%')
'filepath\\_with\\_bad\\_characters\\!\\/\\/\\%'
</snippet></ROW><ROW><id>9915718</id><snippet>re.sub</snippet></ROW><ROW><id>9915811</id><snippet>X.d = Descriptor()
</snippet></ROW><ROW><id>9915912</id><snippet>ñ</snippet></ROW><ROW><id>9915912</id><snippet>print</snippet></ROW><ROW><id>9915995</id><snippet>SELECT</snippet></ROW><ROW><id>9916007</id><snippet>inf</snippet></ROW><ROW><id>9916007</id><snippet>&gt;&gt;&gt; float('inf') / float('inf')
nan
</snippet></ROW><ROW><id>9916007</id><snippet>&gt;&gt;&gt; 1e31337 / 1e31337
nan
&gt;&gt;&gt; 1e31337 - 1e31337
nan
</snippet></ROW><ROW><id>9916016</id><snippet>x</snippet></ROW><ROW><id>9916016</id><snippet>x*x</snippet></ROW><ROW><id>9916016</id><snippet>x</snippet></ROW><ROW><id>9916016</id><snippet>lambda(x) = value</snippet></ROW><ROW><id>9916254</id><snippet>map</snippet></ROW><ROW><id>9916254</id><snippet>print ", ".join(i.getName() for i in collidingEnums.values())
</snippet></ROW><ROW><id>9916254</id><snippet>__repr__</snippet></ROW><ROW><id>9916254</id><snippet>Enum</snippet></ROW><ROW><id>9916254</id><snippet>class Enum(RootFrament):

    # ...

    def __repr__(self):
        return self.getName()
</snippet></ROW><ROW><id>9916314</id><snippet>while row != numa and column != numb:
</snippet></ROW><ROW><id>9916314</id><snippet>while row != numa or column != numb:
</snippet></ROW><ROW><id>9916499</id><snippet>shell=True</snippet></ROW><ROW><id>9916499</id><snippet>*</snippet></ROW><ROW><id>9916499</id><snippet>*.py</snippet></ROW><ROW><id>9916499</id><snippet>.py</snippet></ROW><ROW><id>9916499</id><snippet>ls</snippet></ROW><ROW><id>9916499</id><snippet>python</snippet></ROW><ROW><id>9916499</id><snippet>subprocess</snippet></ROW><ROW><id>9916499</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>9916499</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9916499</id><snippet>ls_output = subprocess.check_output(['ls', '-l'])
</snippet></ROW><ROW><id>9916518</id><snippet>&gt;&gt;&gt; def bits2a(b):
...     return ''.join(chr(int(''.join(x), 2)) for x in zip(*[iter(b)]*8))
... 
&gt;&gt;&gt; bits2a('0110100001100101011011000110110001101111')
'hello'
</snippet></ROW><ROW><id>9916640</id><snippet>round</snippet></ROW><ROW><id>9916640</id><snippet>1220 * 0.01</snippet></ROW><ROW><id>9916640</id><snippet>&gt;&gt;&gt; 1220*0.01
12.200000000000001
</snippet></ROW><ROW><id>9916712</id><snippet>import datetime

td = datetime.timedelta(seconds=time.time()-a_unix_timestamp)
</snippet></ROW><ROW><id>9916900</id><snippet>import pandas</snippet></ROW><ROW><id>9916900</id><snippet>pandas.foo</snippet></ROW><ROW><id>9916900</id><snippet>from pandas import *</snippet></ROW><ROW><id>9916900</id><snippet>foo</snippet></ROW><ROW><id>9916900</id><snippet>from pandas import DataFrame</snippet></ROW><ROW><id>9916900</id><snippet>DataFrame</snippet></ROW><ROW><id>9916902</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def get_year(citation):
...     citation = citation.strip()
...     year = re.search(r"\((\d{4}).*\)\.$", citation).group(1)
...     return int(year)
&gt;&gt;&gt; test_list = ['Bauer et al. (2000).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Scott (1997).', 'Venturini et al.(2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).']
&gt;&gt;&gt; test_list
['Bauer et al. (2000).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Scott (1997).', 'Venturini et al. (2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).']
&gt;&gt;&gt; test_list.sort(key = get_year)
&gt;&gt;&gt; test_list
['Scott (1997).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Bauer et al. (2000).', 'Venturini et al. (2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).']
</snippet></ROW><ROW><id>9917213</id><snippet>next(reversed(od))</snippet></ROW><ROW><id>9917213</id><snippet>OrderedDict</snippet></ROW><ROW><id>9917213</id><snippet>__reversed__()</snippet></ROW><ROW><id>9917213</id><snippet>OrderedDict()</snippet></ROW><ROW><id>9917328</id><snippet>float()</snippet></ROW><ROW><id>9917328</id><snippet>print(repr(items[2]))
p_value = float(items[2])
</snippet></ROW><ROW><id>9917328</id><snippet>float()</snippet></ROW><ROW><id>9917328</id><snippet>repr()</snippet></ROW><ROW><id>9917381</id><snippet>'L'</snippet></ROW><ROW><id>9917381</id><snippet>paste</snippet></ROW><ROW><id>9917444</id><snippet>with</snippet></ROW><ROW><id>9917539</id><snippet>$ python couch.py
</snippet></ROW><ROW><id>9917574</id><snippet>del</snippet></ROW><ROW><id>9917574</id><snippet>del arrayName[2]
</snippet></ROW><ROW><id>9917652</id><snippet>$ heroku config:add LANG=en_US.UTF-8
</snippet></ROW><ROW><id>9917752</id><snippet>LimitsEditor</snippet></ROW><ROW><id>9917752</id><snippet>MyApp</snippet></ROW><ROW><id>9917752</id><snippet>LimitsEditor</snippet></ROW><ROW><id>9917752</id><snippet>LimitsEditor</snippet></ROW><ROW><id>9917752</id><snippet>LimitsEditor</snippet></ROW><ROW><id>9917752</id><snippet>QMainWindow</snippet></ROW><ROW><id>9917752</id><snippet>setupUi()</snippet></ROW><ROW><id>9917752</id><snippet>self.tblLimits</snippet></ROW><ROW><id>9917918</id><snippet>datetime.strptime</snippet></ROW><ROW><id>9917918</id><snippet>datetime</snippet></ROW><ROW><id>9917918</id><snippet>from datetime import datetime

data = sorted(data, key = lambda row: datetime.strptime(row[0], "%d-%b-%y"))
</snippet></ROW><ROW><id>9918001</id><snippet>#include &lt;algorithm&gt;

std::string removeWindowsLineEndings(std::string s)
{
    s.erase(std::remove(s.begin(), s.end(), '\x0D'), s.end());

    return s;
}
</snippet></ROW><ROW><id>9918010</id><snippet>def foo(a,b,c):
    n = "foobar" # any code that declares local variables will affect locals()
    return bar(**locals())
</snippet></ROW><ROW><id>9918010</id><snippet>def foo(a, b, c):
    myargs = locals() # at this point, locals only has a,b,c
    total = a + b + c # we can do what we like until the end
    return bar(**myargs) # turn the dictionary of a,b,c into a keyword list using **
</snippet></ROW><ROW><id>9918032</id><snippet> c This is file al4.f

      FUNCTION ttt (APPRAT, METRAT)
      IMPLICIT NONE
      REAL APPRAT, METRAT,ttt
 cf2py intent(in), APPRAT,METRAT
 cf2py intent(out) ttt      

      IF(APPRAT.LE.0.0)THEN
         ttt = METRAT * 0.89218
      ELSE
         ttt = APPRAT
      ENDIF
      RETURN
      END 
</snippet></ROW><ROW><id>9918032</id><snippet>f2py -c al4.f -m al4</snippet></ROW><ROW><id>9918032</id><snippet>cf2py</snippet></ROW><ROW><id>9918032</id><snippet>c</snippet></ROW><ROW><id>9918160</id><snippet>points = set((row[1], row[2]) for row in data if row[4])
final_list = [d for d in data if (d[1], d[2]) in points]
</snippet></ROW><ROW><id>9918160</id><snippet>from operator import itemgetter
from itertools import ifilter

points = set(ifilter(itemgetter(4), data))
getter = itemgetter(1,2)
final_list = [d for d in data if getter(d) in points]
</snippet></ROW><ROW><id>9918380</id><snippet>low = mid + 1
</snippet></ROW><ROW><id>9918380</id><snippet>lo</snippet></ROW><ROW><id>9918380</id><snippet>low</snippet></ROW><ROW><id>9918380</id><snippet>lo</snippet></ROW><ROW><id>9918380</id><snippet>lo = mid + 1
</snippet></ROW><ROW><id>9918382</id><snippet>$(form).serialize()</snippet></ROW><ROW><id>9918704</id><snippet>home.python-keyring.org</snippet></ROW><ROW><id>9918704</id><snippet>keyring-python.org</snippet></ROW><ROW><id>9918848</id><snippet>import os
import sys


filename = 'logo.txt'
# Use join instead of hard-coding file separators
path = os.path.join(os.getcwd(), filename)
# You need to specify some kind of delimiter so you know
# where the logo ends. I couldn't think of a better way to
# only print part of the file.
delimiter = '------'


with open(path, 'r') as f:
    for line in f:
        if delimiter in line:
            sys.stdout.write('Press any key to continue...')
            raw_input()
        else:
            sys.stdout.write(line)
</snippet></ROW><ROW><id>9918868</id><snippet>i = frame.index.searchsorted(date)
frame.ix[frame.index[i]]
</snippet></ROW><ROW><id>9918868</id><snippet>O(log n)</snippet></ROW><ROW><id>9918929</id><snippet>pygame</snippet></ROW><ROW><id>9918929</id><snippet>SCROLL_UP</snippet></ROW><ROW><id>9918929</id><snippet>LEFT</snippet></ROW><ROW><id>9918929</id><snippet>SCROLL_UP</snippet></ROW><ROW><id>9918951</id><snippet>RecurrenceModelField</snippet></ROW><ROW><id>9918951</id><snippet>OneToOneField</snippet></ROW><ROW><id>9918951</id><snippet>RecurrenceModelField</snippet></ROW><ROW><id>9918951</id><snippet>RecurrenceField</snippet></ROW><ROW><id>9918951</id><snippet>return super(RecurrenceModelField, self).formfield(**defaults)
</snippet></ROW><ROW><id>9919003</id><snippet>from TorCtl import TorCtl

conn = TorCtl.connect(controlAddr="127.0.0.1", controlPort=9051, passphrase="123")

TorCtl.Connection.send_signal(conn, "NEWNYM")
</snippet></ROW><ROW><id>9919008</id><snippet>import time
while True:
    # sleep for the remaining seconds until the next hour
    time.sleep(3600-time.time()%3600)
    spk.speak('It is now &lt;time&gt;')
</snippet></ROW><ROW><id>9919057</id><snippet>candle</snippet></ROW><ROW><id>9919057</id><snippet>'candle'</snippet></ROW><ROW><id>9919057</id><snippet>objects = {}
objects['candle'] = candle
objects['robe'] = robe
...
</snippet></ROW><ROW><id>9919057</id><snippet>popp = room.items.index(objects[input2])
</snippet></ROW><ROW><id>9919061</id><snippet>&gt;&gt;&gt; [''.join(x) for x in s]
['abcbcdcde', '1233r432f']
</snippet></ROW><ROW><id>9919062</id><snippet>post_save</snippet></ROW><ROW><id>9919379</id><snippet>&gt;&gt;&gt; [v[0] for v in sorted(d.iteritems(), key=lambda(k, v): (-v, k))]
['peach', 'banana', 'beetroot', 'almond', 'apple']
</snippet></ROW><ROW><id>9919483</id><snippet>score</snippet></ROW><ROW><id>9919483</id><snippet>score = int(score)  # convert to int
if score &gt;= 100:
    histogram10 = histogram10 + 1
# other cases
</snippet></ROW><ROW><id>9919663</id><snippet>collections.Counter</snippet></ROW><ROW><id>9919663</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; test = 'abc def abc def zzz zzz'
&gt;&gt;&gt; Counter(test.split()).most_common()
[('abc', 2), ('zzz', 2), ('def', 2)]
</snippet></ROW><ROW><id>9919937</id><snippet>def get_or_increase_tag(tag_name):
    tag = session.query(Tag).filter_by(tag=tag_name).first()
    if not tag:
       tag = Tag(tag_name)
    else:
       tag.cnt += 1
    return tag
</snippet></ROW><ROW><id>9919939</id><snippet>b=rand(500,1)
</snippet></ROW><ROW><id>9919939</id><snippet>b=rand(500)
</snippet></ROW><ROW><id>9920112</id><snippet>xargs</snippet></ROW><ROW><id>9920112</id><snippet>ARG_MAX</snippet></ROW><ROW><id>9920112</id><snippet>-n</snippet></ROW><ROW><id>9920112</id><snippet>--max-args</snippet></ROW><ROW><id>9920112</id><snippet>xargs</snippet></ROW><ROW><id>9920112</id><snippet>simulate.py</snippet></ROW><ROW><id>9920112</id><snippet>./rsgen.py --numReferences N &gt; rs.txt; 
./simulate.py -f rs.txt
</snippet></ROW><ROW><id>9920112</id><snippet>xargs</snippet></ROW><ROW><id>9920363</id><snippet>regroup</snippet></ROW><ROW><id>9920363</id><snippet>{% if persons %}
    {% regroup persons by "Category" as people_list %}
    {% for key, val in people_list.items %}
        {{ key|title }} : &lt;br /&gt; {{ val|title }}
    {% endfor %}
{% endif %}
</snippet></ROW><ROW><id>9920363</id><snippet>values</snippet></ROW><ROW><id>9920363</id><snippet>for x in p:
    d = {'Name': x['name'], 'Age': x['age'], 'Category':x['category']}
    array.append(d)
</snippet></ROW><ROW><id>9920363</id><snippet>{% regroup persons by category as people_list %}
</snippet></ROW><ROW><id>9920610</id><snippet>shell=True</snippet></ROW><ROW><id>9920610</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen('pwd', shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
&gt;&gt;&gt; output = p.stdout.read()
&gt;&gt;&gt; print output
C:\Python27
</snippet></ROW><ROW><id>9920703</id><snippet>&gt;&gt;&gt; from lxml.html import parse
&gt;&gt;&gt; page = parse("test.html")
&gt;&gt;&gt; rows = page.xpath("body/table")[0].findall("tr")
&gt;&gt;&gt; data = list()
&gt;&gt;&gt; for row in rows:
...     data.append([c.text for c in row.getchildren()])
... 
&gt;&gt;&gt; for row in data[4:]: print(row)
... 
['2050', 'January', '0', '1', '3', '0', '4', '16', '0', '6', '2', '2', '0', '3', '0', '3', '2', '0', '26', '1', '0', '0', '7', '0', '5', '6', '0', '8', '2', '0', '0', '0', '0', '0', '0', '0', '2', '0']
['February', '1', '0', '8', '0', '2', '4', '1', '6', '1', '2', '0', '3', '0', '0', '4', '0', '25', '0', '0', '1', '2', '0', '4', '14', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0']
['March', '0', '0', '4', '0', '4', '7', '0', '9', '2', '1', '0', '0', '0', '2', '9', '0', '45', '1', '0', '0', '7', '0', '10', '16', '0', '5', '1', '1', '0', '1', '0', '0', '0', '0', '4', '0']
['April', '1', '0', '5', '0', '3', '12', '1', '11', '0', '3', '0', '3', '0', '0', '3', '2', '34', '0', '0', '1', '2', '0', '6', '18', '1', '3', '0', '0', '0', '0', '0', '0', '0', '0', '5', '1']
['May', '7', '0', '6', '0', '8', '4', '1', '13', '0', '0', '2', '2', '0', '1', '7', '1', '30', '0', '0', '0', '7', '0', '5', '12', '0', '4', '1', '0', '0', '0', '0', '0', '0', '0', '6', '1']
['June', '0', '1', '14', '0', '7', '15', '0', '17', '1', '2', '0', '5', '0', '1', '3', '0', '24', '0', '0', '0', '5', '0', '6', '13', '1', '9', '1', '1', '0', '0', '0', '0', '0', '0', '2', '1']
['July', '0', '1', '6', '0', '8', '17', '1', '15', '2', '1', '0', '10', '0', '2', '15', '2', '53', '0', '3', '3', '6', '0', '7', '16', '0', '9', '1', '1', '0', '0', '0', '0', '1', '0', '2', '0']
['August', '2', '0', '5', '0', '8', '15', '1', '17', '0', '2', '0', '2', '0', '5', '16', '0', '33', '0', '0', '0', '11', '0', '2', '25', '4', '8', '0', '0', '0', '1', '0', '0', '0', '0', '3', '0']
['September', '2', '0', '10', '0', '16', '22', '2', '19', '4', '2', '0', '0', '0', '2', '8', '0', '27', '0', '1', '0', '8', '0', '11', '31', '1', '9', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
['October', '3', '1', '8', '0', '4', '28', '0', '15', '2', '1', '0', '1', '0', '1', '6', '0', '15', '0', '1', '0', '3', '0', '9', '26', '1', '8', '4', '0', '0', '0', '0', '0', '0', '0', '1', '0']
['November', '0', '3', '3', '0', '6', '23', '1', '8', '1', '2', '0', '1', '0', '3', '7', '1', '20', '0', '0', '0', '8', '0', '3', '18', '3', '7', '0', '0', '0', '0', '0', '0', '0', '0', '3', '0']
['December', '1', '0', '4', '0', '4', '13', '2', '15', '1', '0', '0', '2', '0', '1', '2', '0', '29', '0', '1', '0', '7', '0', '3', '20', '1', '13', '0', '1', '0', '0', '0', '0', '0', '0', '3', '0']
</snippet></ROW><ROW><id>9920703</id><snippet>zip()</snippet></ROW><ROW><id>9920703</id><snippet>&gt;&gt;&gt; d = data[4:]
&gt;&gt;&gt; d[0] = d[0][1:]
&gt;&gt;&gt; zip(*d)
[('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'), ('0', '1', '0', '1', '7', '0', '0', '2', '2', '3', '0', '1'), ('1', '0', '0', '0', '0', '1', '1', '0', '0', '1', '3', '0'), ('3', '8', '4', '5', '6', '14', '6', '5', '10', '8', '3', '4'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('4', '2', '4', '3', '8', '7', '8', '8', '16', '4', '6', '4'), ('16', '4', '7', '12', '4', '15', '17', '15', '22', '28', '23', '13'), ('0', '1', '0', '1', '1', '0', '1', '1', '2', '0', '1', '2'), ('6', '6', '9', '11', '13', '17', '15', '17', '19', '15', '8', '15'), ('2', '1', '2', '0', '0', '1', '2', '0', '4', '2', '1', '1'), ('2', '2', '1', '3', '0', '2', '1', '2', '2', '1', '2', '0'), ('0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0'), ('3', '3', '0', '3', '2', '5', '10', '2', '0', '1', '1', '2'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('3', '0', '2', '0', '1', '1', '2', '5', '2', '1', '3', '1'), ('2', '4', '9', '3', '7', '3', '15', '16', '8', '6', '7', '2'), ('0', '0', '0', '2', '1', '0', '2', '0', '0', '0', '1', '0'), ('26', '25', '45', '34', '30', '24', '53', '33', '27', '15', '20', '29'), ('1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('0', '0', '0', '0', '0', '0', '3', '0', '1', '1', '0', '1'), ('0', '1', '0', '1', '0', '0', '3', '0', '0', '0', '0', '0'), ('7', '2', '7', '2', '7', '5', '6', '11', '8', '3', '8', '7'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('5', '4', '10', '6', '5', '6', '7', '2', '11', '9', '3', '3'), ('6', '14', '16', '18', '12', '13', '16', '25', '31', '26', '18', '20'), ('0', '1', '0', '1', '0', '1', '0', '4', '1', '1', '3', '1'), ('8', '1', '5', '3', '4', '9', '9', '8', '9', '8', '7', '13'), ('2', '0', '1', '0', '1', '1', '1', '0', '0', '4', '0', '0'), ('0', '0', '1', '0', '0', '1', '1', '0', '0', '0', '0', '1'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('0', '0', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0'), ('0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0'), ('2', '0', '4', '5', '6', '2', '2', '3', '1', '1', '3', '3'), ('0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0')]
</snippet></ROW><ROW><id>9920723</id><snippet>set_to_x</snippet></ROW><ROW><id>9920723</id><snippet>class LocationProxy(object):
    def __init__(self, ops = None):
        self.ops = ops or []
    def __getitem__(self, item):
        self.ops.append((True, item))
        return self
    def __getattr__(self, attr):
        self.ops.append((False, attr))
        return self
    @staticmethod
    def iterativeget(obj, ops):
        for isitem, key in ops:
            obj = obj[key] if isitem else getattr(obj, key)
        return obj
    def get(self, obj):
        return self.iterativeget(obj, self.ops)
    def set(self, obj, value):
        isitem, key = self.ops[-1]
        obj = self.iterativeget(obj, self.ops[:-1])
        if isitem:
            obj[key] = value
        else:
            setattr(obj, key, value)
    def set_from_object(self, obj):
        return lambda value: self.set(obj, value)
    def set_to_value(self, value):
        return lambda obj: self.set(obj, value)
    @staticmethod
    def object_value_setter(obj, value):
        return lambda location: location.set(obj, value)
    @staticmethod
    def object_setter(obj):
        return lambda location, value: location.set(obj, value)
    @staticmethod
    def value_setter(value):
        return lambda location, obj: location.set(obj, value)
</snippet></ROW><ROW><id>9920723</id><snippet># since you can't set attributes on a normal dict, use a subclass
class MyDict(dict): pass

my_dict = MyDict({
  'foo' : 'bar',
  'subdict':{
    'sub1' : 1,
    'sub2' : 2
  }
})

my_list = [1, 2]

x = 'x'

# we're going to set multiple things in my_dict to x, let's not repeat ourselves
set_my_dict_to_x = LocationProxy.object_value_setter(my_dict, x)

# we'll use set_to_x as you used it later on my_list
set_to_x = LocationProxy.value_setter(x)
</snippet></ROW><ROW><id>9920723</id><snippet># you can assign a name to a setter to use multiple times
foosetter = LocationProxy()['foo']

# set normal dictionary items
set_my_dict_to_x(foosetter)

# And also set subdictionary items
set_my_dict_to_x(LocationProxy()['subdict']['sub1'])

# Set items that don't exist
set_my_dict_to_x(LocationProxy()['new_item'])

print 'my_dict', my_dict

# my_dict is a class, use the same function
set_my_dict_to_x(LocationProxy().myproperty)

print 'myproperty', my_dict.myproperty

# it works with lists
set_to_x(LocationProxy()[1], my_list)

print 'my_list', my_list
</snippet></ROW><ROW><id>9920771</id><snippet>foo[start:end:step] # begin with 'start' and proceed by step until you reach 'end'.
</snippet></ROW><ROW><id>9920771</id><snippet>foo[::-1]</snippet></ROW><ROW><id>9920771</id><snippet>entire list with step=-1</snippet></ROW><ROW><id>9920797</id><snippet>property</snippet></ROW><ROW><id>9920797</id><snippet>name</snippet></ROW><ROW><id>9920797</id><snippet>Parrot</snippet></ROW><ROW><id>9920797</id><snippet>class Article(object):
    def __init__(self, name, available):
        self._name = name
        self.available = available

    @property
    def name(self):
        return self._name
</snippet></ROW><ROW><id>9920797</id><snippet>name</snippet></ROW><ROW><id>9920797</id><snippet>x.setter</snippet></ROW><ROW><id>9920797</id><snippet>AttributeError</snippet></ROW><ROW><id>9920797</id><snippet>name</snippet></ROW><ROW><id>9920797</id><snippet>object</snippet></ROW><ROW><id>9920851</id><snippet>if txt[r[0]][r[1]] == 'l':
</snippet></ROW><ROW><id>9920851</id><snippet>if txt[r[0]:r[1]] == 'l':
</snippet></ROW><ROW><id>9920947</id><snippet>import sys

class ParallelMock(object):

    def __init__(self):
        '''Init and blank the "display".'''
        self.display = [' '] * 4
        self._update()

    def setData(self,data):
        '''Bits 0-3 are the "value".
           Bits 4-7 are positions 0-3 (first-to-last).
        '''
        self.display = [' '] * 4
        value = data &amp; 0xF
        if data &amp; 0x10:
            self.display[0] = str(value)
        if data &amp; 0x20:
            self.display[1] = str(value)
        if data &amp; 0x40:
            self.display[2] = str(value)
        if data &amp; 0x80:
            self.display[3] = str(value)
        self._update()

    def _update(self):
        '''Write over the same four terminal positions each time.'''
        sys.stdout.write(''.join(self.display) + '\r')

if __name__ == '__main__':
    p = ParallelMock()

    nums = raw_input("Enter a string of numbers: ")

    # Shift over the steam four-at-a-time.
    stream = 'XXXX' + nums + 'XXXX'
    data = [0] * 4
    for i in range(len(stream)-3):
        # Precompute data
        for pos in range(4):
            value = stream[i+pos]
            data[pos] = 0 if value == 'X' else (1&lt;&lt;(pos+4)) + int(value)
        # "Flicker" the display...
        for delay in xrange(1000):
            # Display each position briefly.
            for d in data:
                p.setData(d)
        # Clear the display when done
        p.setData(0)
</snippet></ROW><ROW><id>9921010</id><snippet>self.is_guest_installer_network = True</snippet></ROW><ROW><id>9921010</id><snippet>def check_guest_installer_network(nrec):
  other_config = nrec.get("other_config", None)
  return other_config is not None and other_config.get('is_guest_installer_network', False)
</snippet></ROW><ROW><id>9921010</id><snippet>def check_guest_installer_network(nrec):
  try:
    return nrec["other_config"]['is_guest_installer_network'] == "true"
  except KeyError:
    return False
</snippet></ROW><ROW><id>9921022</id><snippet>some_method(
    that_has,
    very_many,
    arguments=None,
    of_different=None, 
    kinds=u'',
    and_importance=None,
    spanning=u'multple lines'
)
</snippet></ROW><ROW><id>9921120</id><snippet>rint</snippet></ROW><ROW><id>9921120</id><snippet>def rint(num):
    """Rounds toward the even number if equidistant"""
    return round(num + (num % 2 - 1 if (num % 1 == 0.5) else 0))

print rint(-1.4) == -1.0
print rint(-1.5) == rint(-2.0) == rint(-2.5) == -2.0
print rint(1.4) == 1.0
print rint(1.5) == rint(2.0) == rint(2.5) == 2.0
</snippet></ROW><ROW><id>9921120</id><snippet>round</snippet></ROW><ROW><id>9921120</id><snippet>rint</snippet></ROW><ROW><id>9921120</id><snippet>round(x[, n])</snippet></ROW><ROW><id>9921120</id><snippet>x</snippet></ROW><ROW><id>9921120</id><snippet>n</snippet></ROW><ROW><id>9921120</id><snippet>n</snippet></ROW><ROW><id>9921120</id><snippet>n</snippet></ROW><ROW><id>9921120</id><snippet>round(0.5)</snippet></ROW><ROW><id>9921120</id><snippet>1.0</snippet></ROW><ROW><id>9921120</id><snippet>round(-0.5)</snippet></ROW><ROW><id>9921120</id><snippet>-1.0</snippet></ROW><ROW><id>9921120</id><snippet>round()</snippet></ROW><ROW><id>9921120</id><snippet>round(2.675, 2)</snippet></ROW><ROW><id>9921120</id><snippet>2.67</snippet></ROW><ROW><id>9921120</id><snippet>2.68</snippet></ROW><ROW><id>9921291</id><snippet>.as_table</snippet></ROW><ROW><id>9921297</id><snippet>conn.send_signal("NEWNYM")
</snippet></ROW><ROW><id>9921805</id><snippet>combinations = []
for a in xrange(11):
    for b in xrange(11-a):
        for c in xrange(11-a-b):
            for d in xrange(11-a-b-c):
                for e in xrange(11-a-b-c-d):
                    for f in xrange(11-a-b-c-d-e):
                        for g in xrange(11-a-b-c-d-e-f):
                            for h in xrange(11-a-b-c-d-e-f-g):
                                for i in xrange(11-a-b-c-d-e-f-g-h):
                                    j = 10-a-b-c-d-e-f-g-h-i
                                    combinations.append((a,b,c,d,e,f,g,h,i,j))
print len(combinations)
</snippet></ROW><ROW><id>9921806</id><snippet>name = somelist[0]
name = 'other'
</snippet></ROW><ROW><id>9921806</id><snippet>name</snippet></ROW><ROW><id>9921806</id><snippet>somelist</snippet></ROW><ROW><id>9921806</id><snippet>name</snippet></ROW><ROW><id>9921806</id><snippet>'other'</snippet></ROW><ROW><id>9921806</id><snippet>somelist[0]</snippet></ROW><ROW><id>9921806</id><snippet>'other'</snippet></ROW><ROW><id>9921806</id><snippet>send</snippet></ROW><ROW><id>9921806</id><snippet>class wrapper:
    def __init__(self, myList):
        self.myList = myList

    def getArrayIterator(self):
        for i, arr in enumerate(self.myList):
            yarr = (yield arr)
            if yarr is not None:
                self.myList[i] = yarr

#set list of arrays in wrapper
myList = [1, 2, 3, 4, 5]
w = wrapper(myList)
witer = w.getArrayIterator()
try:
    a = next(witer)
    for i in range(6, 11):
        print a,
        a = witer.send(i)
except StopIteration:
    pass
print
print w.myList
</snippet></ROW><ROW><id>9922014</id><snippet>itertools.permutations</snippet></ROW><ROW><id>9922014</id><snippet>import itertools as it
for i, j in it.permutations(range(5), 2):
    print i, j
</snippet></ROW><ROW><id>9922322</id><snippet>O(n²)</snippet></ROW><ROW><id>9922322</id><snippet>&gt;&gt;&gt; uniq=[]
&gt;&gt;&gt; for i in l:                           # O(n), n being the size of l
...     if not (i in uniq or tuple([i[1], i[0], i[2]]) in uniq): # O(n)
...             uniq.append(i)                                   # O(1)
... 
&gt;&gt;&gt; uniq
[('192.168.1.100', '192.168.1.101', 'A'), 
 ('192.168.1.103', '192.168.1.101', 'B'), 
 ('192.168.1.104', '192.168.1.100', 'C')]
</snippet></ROW><ROW><id>9922322</id><snippet>Set</snippet></ROW><ROW><id>9922322</id><snippet>&gt;&gt;&gt; uniq=set()
&gt;&gt;&gt; for i in l: # O(n), n=|l|
...     if not (i in uniq or tuple([i[1], i[0], i[2]]) in uniq): # O(1)-Hashtable
...             uniq.add(i)
... 
&gt;&gt;&gt; list(uniq)
[('192.168.1.104', '192.168.1.100', 'C'), 
 ('192.168.1.100', '192.168.1.101', 'A'), 
 ('192.168.1.103', '192.168.1.101', 'B')]
</snippet></ROW><ROW><id>9922322</id><snippet>&gt;&gt;&gt; sorted(list(uniq), key=lambda i:i[2])
[('192.168.1.100', '192.168.1.101', 'A'), 
 ('192.168.1.103', '192.168.1.101', 'B'), 
 ('192.168.1.104', '192.168.1.100', 'C')]
</snippet></ROW><ROW><id>9922504</id><snippet>def split_padded(a,n):
    padding = (-len(a))%n
    return np.split(np.concatenate((a,np.zeros(padding))),n)
</snippet></ROW><ROW><id>9922519</id><snippet>rawData = open("foo.raw" 'rb').read()
imgSize = (x,y)
# Use the PIL raw decoder to read the data.
# the 'F;16' informs the raw decoder that we are reading 
# a little endian, unsigned integer 16 bit data.
img = Image.fromstring('L', imgSize, rawData, 'raw', 'F;16')
img.save("foo.png")
</snippet></ROW><ROW><id>9922730</id><snippet># A variable to keep track of the least-nested level of your hierarchy
top_lvl = ''
k = ''
for i in range(len(a)):
    # Pre-compute this value so you don't have to do it twice or more
    c = a[i].count(' ')
    # This case is the topmost level
    if c == 0:
        top_lvl = a[i]
        d[top_lvl] = []
    # This case is the middle level
    elif c == 1:
        d[a[i]]=[]
        k=a[i]
        d[top_lvl].append(k)
    # This case is the most deeply nested level
    else: # c==2
        d[k].append(a[i])
</snippet></ROW><ROW><id>9922730</id><snippet>a</snippet></ROW><ROW><id>9922730</id><snippet># A variable to keep track of the least-nested level of your hierarchy
top_lvl = ''
# More descriptive variable names can make everything easier to read/understand
mid_lvl = ''
for val in a:
    # Pre-compute this value so you don't have to do it twice or more
    c = val.count(' ')
    # This case is the topmost level
    if c == 0:
        top_lvl = val
        d[val] = []
    # This case is the middle level
    elif c == 1:
        d[val]=[]
        mid_lvl =val
        d[top_lvl].append(mid_lvl)
    # This case is the most deeply nested level
    else: # c==2
        d[mid_lvl].append(val)
</snippet></ROW><ROW><id>9922855</id><snippet>words</snippet></ROW><ROW><id>9922855</id><snippet>words = collections.Counter(s.split())
for delim in delims:
    del words[delim]
</snippet></ROW><ROW><id>9923332</id><snippet>('^servertest/(?P&lt;path&gt;.*)$', 'redirect_to', {'url': '/server-test/%(path)s'}),
</snippet></ROW><ROW><id>9923340</id><snippet>numpy.cov()</snippet></ROW><ROW><id>9923340</id><snippet>In [1]: import numpy as np

In [2]: data = np.array([[1,2], [2,3], [3,3], [4,5], [5,5]])

In [3]: np.cov(data.T)
Out[3]: 
array([[ 2.5,  2. ],
       [ 2. ,  1.8]])
</snippet></ROW><ROW><id>9923340</id><snippet>np.cov()</snippet></ROW><ROW><id>9923340</id><snippet>.T</snippet></ROW><ROW><id>9923340</id><snippet>rowvar</snippet></ROW><ROW><id>9923340</id><snippet>False</snippet></ROW><ROW><id>9923340</id><snippet>In [15]: np.cov(data, rowvar=False)
Out[15]: 
array([[ 2.5,  2. ],
       [ 2. ,  1.8]])
</snippet></ROW><ROW><id>9923346</id><snippet>parser = OptionParser()
parser.add_option('-n', '--db_name', help='DB Name (comma separated if multiple DBs - no spaces)')
parser.add_option('-H', '--db_host', help='DB host (comma separated if multiple DBs - no spaces)')
parser.add_option('-p', '--db_port', help='DB port (optional)')
parser.add_option('-u', '--db_user', help='DB user')
parser.add_option('-w', '--db_pass', help='DB password')
parser.add_option('-o', '--output-file', help='output file')

options, args = parser.parse_args()

errors = []
error_msg = 'No %s specified. Use option %s'
if not options.db_name:
    errors.append(error_msg % ('database name', '-n'))
if not options.db_host:
    errors.append(error_msg % ('database host', '-H'))
if not options.db_user:
    errors.append(error_msg % ('database user', '-u'))
if not options.db_pass:
    errors.append(error_msg % ('database password', '-w'))
if not options.output_file:
    errors.append(error_msg % ('output file', '-o'))

if errors:
    print '\n'.join(errors)
    sys.exit(1)
</snippet></ROW><ROW><id>9923353</id><snippet>bar(?=ber)</snippet></ROW><ROW><id>9923751</id><snippet>r = 3
c = 4

x = [i % c for i in range(r*c)]
y = [i / c for i in range(r*c)]

print x
print y
</snippet></ROW><ROW><id>9923751</id><snippet>[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
[0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2]
</snippet></ROW><ROW><id>9924049</id><snippet>while</snippet></ROW><ROW><id>9924049</id><snippet>startButtonClick</snippet></ROW><ROW><id>9924049</id><snippet>startButtonClick</snippet></ROW><ROW><id>9924049</id><snippet>def startButtonClick(self):
    self.missionGO = 1
    self._do_one_iteration()

def _do_one_iteration(self):
    if self.missionGO == 1:
        wlan = getAccessPoints()
        x = numberOfAccessPoints(wlan)
        print x
        # this adds another iteration to the event loop
        self.after(10, self._do_one_iteration)

def stopButtonClick(self):
    self.missionGO = 0
</snippet></ROW><ROW><id>9924150</id><snippet>self.Title = wxPanel(self, -1, style=wxDOUBLE_BORDER|wxTAB_TRAVERSAL)</snippet></ROW><ROW><id>9924150</id><snippet>Title</snippet></ROW><ROW><id>9924150</id><snippet>Title</snippet></ROW><ROW><id>9924150</id><snippet>Title</snippet></ROW><ROW><id>9924150</id><snippet>MyTitle</snippet></ROW><ROW><id>9924150</id><snippet>Find &gt; Replace</snippet></ROW><ROW><id>9924150</id><snippet>self.Title</snippet></ROW><ROW><id>9924150</id><snippet>self.MyTitlePanel</snippet></ROW><ROW><id>9924436</id><snippet>variable = 3</snippet></ROW><ROW><id>9924436</id><snippet>variable</snippet></ROW><ROW><id>9924868</id><snippet>timesince</snippet></ROW><ROW><id>9924868</id><snippet>django.utils.timesince</snippet></ROW><ROW><id>9924868</id><snippet>from datetime import datetime, timedelta
from django import template
from django.utils.timesince import timesince

register = template.Library()

@register.filter
def timesince_threshold(value, days=7):
    """
    return timesince(&lt;value&gt;) if value is more than &lt;days&gt; old. Return value otherwise
    """

    if datetime.now() - value &lt; timedelta(days=days):
        return timesince(value)
    else:
        return value
timesince_threshold.is_safe = False
</snippet></ROW><ROW><id>9924875</id><snippet>import subprocess

def textToWav(text,file_name):
   subprocess.call(["espeak",text,"-w"+file_name+".wav"])

textToWav('hello world','hello')
</snippet></ROW><ROW><id>9925003</id><snippet>id(spectrum)</snippet></ROW><ROW><id>9925003</id><snippet>id</snippet></ROW><ROW><id>9925003</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>9925003</id><snippet>copy.copy()</snippet></ROW><ROW><id>9925003</id><snippet>Spectrum.decRef()</snippet></ROW><ROW><id>9925003</id><snippet>decRef()</snippet></ROW><ROW><id>9925192</id><snippet>__new__</snippet></ROW><ROW><id>9925192</id><snippet>%extend X {
  static X * __new__(const char *desc) { return create(desc); }
};
</snippet></ROW><ROW><id>9925319</id><snippet>re.sub(
    '&lt;status&gt;(?P&lt;id&gt;\d+)',
    lambda m: status.get(int(m.group('id'))),
    'Tom ran: from &lt;status&gt;1 to &lt;status&gt;23')
</snippet></ROW><ROW><id>9925530</id><snippet>LinearPolar</snippet></ROW><ROW><id>9925530</id><snippet>LogPolar</snippet></ROW><ROW><id>9925647</id><snippet>img = img.convert("RGB")</snippet></ROW><ROW><id>9926372</id><snippet>from multiprocessing import Pool
pool = Pool(processes=5)
pages = pool.map(visit, get_lines(file))
</snippet></ROW><ROW><id>9926636</id><snippet>RhinoPython</snippet></ROW><ROW><id>9926661</id><snippet>if variable == "":
    etc.
</snippet></ROW><ROW><id>9926661</id><snippet>if variable:
    etc.
</snippet></ROW><ROW><id>9926661</id><snippet>if</snippet></ROW><ROW><id>9926661</id><snippet>True</snippet></ROW><ROW><id>9926661</id><snippet>False</snippet></ROW><ROW><id>9926711</id><snippet>try...catch</snippet></ROW><ROW><id>9926711</id><snippet>if then</snippet></ROW><ROW><id>9926711</id><snippet>if/then</snippet></ROW><ROW><id>9926711</id><snippet>try/catch</snippet></ROW><ROW><id>9926711</id><snippet>to_float_or_None</snippet></ROW><ROW><id>9926711</id><snippet>to_float_or_None</snippet></ROW><ROW><id>9926711</id><snippet>[</snippet></ROW><ROW><id>9926711</id><snippet>]</snippet></ROW><ROW><id>9926711</id><snippet>(</snippet></ROW><ROW><id>9926711</id><snippet>)</snippet></ROW><ROW><id>9926879</id><snippet>dict.iter...()</snippet></ROW><ROW><id>9926879</id><snippet>dict.items()</snippet></ROW><ROW><id>9926879</id><snippet>dict.iter...()</snippet></ROW><ROW><id>9926879</id><snippet>dict.iter()</snippet></ROW><ROW><id>9926879</id><snippet>list(dict.iter())</snippet></ROW><ROW><id>9926879</id><snippet>dict.items()</snippet></ROW><ROW><id>9927081</id><snippet>sum([box.quantity_available * box.items_in_box for box in Box.objects.all()]
</snippet></ROW><ROW><id>9927124</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Button

class DummyPlot(object):
    def __init__(self):
        self.imsize = (10, 10)
        self.data = np.random.random(self.imsize)

        self.fig, self.ax = plt.subplots()
        self.im = self.ax.imshow(self.data)

        buttonax = self.fig.add_axes([0.45, 0.9, 0.1, 0.075])
        self.button = Button(buttonax, 'Update')
        self.button.on_clicked(self.update)

    def update(self, event):
        self.data += np.random.random(self.imsize) - 0.5
        self.im.set_data(self.data)
        self.im.set_clim([self.data.min(), self.data.max()])
        self.fig.canvas.draw()

    def show(self):
        plt.show()

p = DummyPlot()
p.show()
</snippet></ROW><ROW><id>9927124</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Button

class DummyPlot(object):
    def __init__(self):
        self.imsize = (10, 10)
        self.data = np.random.random(self.imsize)
        self.fig, self.ax = plt.subplots()

        dummy_data = np.zeros(self.imsize)
        self.im = self.ax.imshow(dummy_data)
        self.im.set_visible(False)

        buttonax = self.fig.add_axes([0.45, 0.9, 0.1, 0.075])
        self.button = Button(buttonax, 'Update')
        self.button.on_clicked(self.update)

    def update(self, event):
        self.im.set_visible(True)
        self.data += np.random.random(self.imsize) - 0.5
        self.im.set_data(self.data)
        self.im.set_clim([self.data.min(), self.data.max()])
        self.fig.canvas.draw()

    def show(self):
        plt.show()

p = DummyPlot()
p.show()
</snippet></ROW><ROW><id>9927124</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Button

class DummyPlot(object):
    def __init__(self):
        self.imsize = (10, 10)
        self.fig, self.ax = plt.subplots()

        self.ax.axis([-0.5, self.imsize[1] - 0.5, 
                      self.imsize[0] - 0.5, -0.5])
        self.ax.set_aspect(1.0)
        self.ax.autoscale(False)

        buttonax = self.fig.add_axes([0.45, 0.9, 0.1, 0.075])
        self.button = Button(buttonax, 'Update')
        self.button.on_clicked(self.update)

    def update(self, event):
        self.ax.imshow(np.random.random(self.imsize))
        self.fig.canvas.draw()

    def show(self):
        plt.show()

p = DummyPlot()
p.show()
</snippet></ROW><ROW><id>9927128</id><snippet>__path__</snippet></ROW><ROW><id>9927128</id><snippet>google</snippet></ROW><ROW><id>9927128</id><snippet>import pkgutil
import google
google.__path__ = pkgutil.extend_path(google.__path__, google.__name__)
</snippet></ROW><ROW><id>9927476</id><snippet>import urllib2
import urllib
from cookielib import CookieJar

cj = CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
p = opener.open("http://feeds.nytimes.com/click.phdo?i=8cd5af579b320b0bfd695ddcc344d96c")

print p.read()
</snippet></ROW><ROW><id>9927716</id><snippet>$ python
&gt;&gt;&gt; import django_mongodb_engine.base
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/emptysquare/.virtualenvs/foo/lib/python2.7/site-packages/django_mongodb_engine/base.py", line 4, in &lt;module&gt;
    from django.db.backends.signals import connection_created
  File "/Users/emptysquare/.virtualenvs/foo/lib/python2.7/site-packages/django/db/__init__.py", line 14, in &lt;module&gt;
    if not settings.DATABASES:
  File "/Users/emptysquare/.virtualenvs/foo/lib/python2.7/site-packages/django/utils/functional.py", line 276, in __getattr__
    self._setup()
  File "/Users/emptysquare/.virtualenvs/foo/lib/python2.7/site-packages/django/conf/__init__.py", line 40, in _setup
    raise ImportError("Settings cannot be imported, because environment variable %s is undefined." % ENVIRONMENT_VARIABLE)
ImportError: Settings cannot be imported, because environment variable DJANGO_SETTINGS_MODULE is undefined.
</snippet></ROW><ROW><id>9927716</id><snippet>$ DJANGO_SETTINGS_MODULE=settings python
&gt;&gt;&gt; import django_mongodb_engine.base
</snippet></ROW><ROW><id>9927863</id><snippet>my_list = ['apple', 'orange', 'dragon', 'panda']
my_list.reverse()
while my_list:
    print(my_list.pop())
</snippet></ROW><ROW><id>9927875</id><snippet>stdout</snippet></ROW><ROW><id>9927875</id><snippet>stdout</snippet></ROW><ROW><id>9927875</id><snippet>-u</snippet></ROW><ROW><id>9927875</id><snippet>stdbuf</snippet></ROW><ROW><id>9928191</id><snippet>import multiprocessing
def worker(name, que):
    que.put("%d is done" % name)

if __name__ == '__main__':
    pool = multiprocessing.Pool(processes=3)
    m = multiprocessing.Manager()
    q = m.Queue()
    workers = pool.apply_async(worker, (33, q))
</snippet></ROW><ROW><id>9928248</id><snippet>def syncdb(path):
  print(green("Database Synchronization ..."))
  with cd(path):
    sudo('python manage.py syncdb', user='www-data')

def colstat(path):
  print(green("Collecting Static Files..."))
  with cd(path):
    sudo('python manage.py collectstatic --noinput', user='www-data')

def httpdrst():
  print(green("Restarting Apache..."))
  sudo('apachectl restart')

def srefresh():
  path = '/var/www/project'
  colstat(path)
  syncdb(path)
  httpdrst()
</snippet></ROW><ROW><id>9928354</id><snippet>alter table studentinfo add column `Group` integer
</snippet></ROW><ROW><id>9928394</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('32bit', 'WindowsPE')
</snippet></ROW><ROW><id>9928394</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('64bit', 'WindowsPE')
</snippet></ROW><ROW><id>9928433</id><snippet>d = defaultdict(list)
</snippet></ROW><ROW><id>9928433</id><snippet>d['someKey']</snippet></ROW><ROW><id>9928433</id><snippet>d['someKey']</snippet></ROW><ROW><id>9928433</id><snippet>list()</snippet></ROW><ROW><id>9928433</id><snippet>d = defaultdict(dict)
</snippet></ROW><ROW><id>9928433</id><snippet>for i in array: 
  d[i[0]].update({"num1":i[1],"num2":i[2]})
</snippet></ROW><ROW><id>9928803</id><snippet>import urllib2
from TorCtl import TorCtl

proxy_support = urllib2.ProxyHandler({"http" : "127.0.0.1:8118"})
opener = urllib2.build_opener(proxy_support) 

def newId():
    conn = TorCtl.connect(controlAddr="127.0.0.1", controlPort=9051, passphrase="your_password")
    conn.send_signal("NEWNYM")

for i in range(0, 10):
    print "case "+str(i+1)
    newId()
    proxy_support = urllib2.ProxyHandler({"http" : "127.0.0.1:8118"})
    urllib2.install_opener(opener)
    print(urllib2.urlopen("http://www.ifconfig.me/ip").read())
</snippet></ROW><ROW><id>9928803</id><snippet>forward-socks5 / localhost:9050 . #dot is important at the end
</snippet></ROW><ROW><id>9928803</id><snippet>ControlPort 9051
## If you enable the controlport, be sure to enable one of these
## authentication methods, to prevent attackers from accessing it.
HashedControlPassword 16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C
</snippet></ROW><ROW><id>9928803</id><snippet>/etc/init.d/tor restart
</snippet></ROW><ROW><id>9929392</id><snippet>table.remove(button)
</snippet></ROW><ROW><id>9929707</id><snippet>listdir()</snippet></ROW><ROW><id>9929707</id><snippet>/foo/bar</snippet></ROW><ROW><id>9929707</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>9929707</id><snippet>/foo/bar</snippet></ROW><ROW><id>9929707</id><snippet>isdir()</snippet></ROW><ROW><id>9929707</id><snippet>False.</snippet></ROW><ROW><id>9929707</id><snippet>os.path.join</snippet></ROW><ROW><id>9929707</id><snippet>os.path.isdir(os.path.join('/foo/bar', f))</snippet></ROW><ROW><id>9929835</id><snippet># Column of row titles
rows = np.array(['row1', 'row2', 'row3'], dtype='|S20')[:, np.newaxis]
with open('test.csv', 'w') as f:
    np.savetxt(f, np.hstack((rows, data)), delimiter=', ', fmt='%s')
</snippet></ROW><ROW><id>9929835</id><snippet>data</snippet></ROW><ROW><id>9929835</id><snippet>'|S20'</snippet></ROW><ROW><id>9929835</id><snippet>&gt;&gt;&gt; np.asarray([123], dtype='|S2')
array(['12'], 
  dtype='|S2')
</snippet></ROW><ROW><id>9929835</id><snippet>np.char.mod</snippet></ROW><ROW><id>9929835</id><snippet># Column of row titles
rows = np.array(['row1', 'row2', 'row3'])[:, np.newaxis]
str_data = np.char.mod("%10.6f", data)
with open('test.csv', 'w') as f:
    np.savetxt(f, np.hstack((rows, str_data)), delimiter=', ', fmt='%s')
</snippet></ROW><ROW><id>9929903</id><snippet>is_pid_alive</snippet></ROW><ROW><id>9929903</id><snippet>os.waitpid</snippet></ROW><ROW><id>9929903</id><snippet>pid_is_alive()</snippet></ROW><ROW><id>9929903</id><snippet>def pid_is_alive(pid):
    try:
        os.kill(pid, 0)
        os.waitpid(pid, os.WNOHANG)
        os.kill(pid, 0)
    except OSError:
        return False
    return True


def test():
    X = 1000 * 1000
    Y = 5000
    pid = os.fork()
    if pid == 0:
        thread1 =  MyCustomThread() #Sleeps for 30 seconds and ends.
        thread1.start()
        print "Started 1!"
        timeout = X # say, 1000ms
        while timeout &gt; 0:
            if not thread1.is_alive(): return "custom thread finished before the deadline!"
            timeout -= 1
            sleep(0.001)
        if thread1.is_alive():
            return "custom thread didn't finish before the deadline!"
            thread1.stop()
        exit()

    else:
        timeout2 = Y # say, 500ms
        while timeout2 &gt; 0:
            if not pid_is_alive(pid): return "child PID finished!"
            timeout2 -= 1
            sleep(0.001)
        if pid_is_alive(pid):
            print "child PID didn't finish yet!"
            exit()
print test()
print "all done!"
</snippet></ROW><ROW><id>9930638</id><snippet>w = cvCreateVideoWriter(filename, -1, &lt;your framerate&gt;, 
                        &lt;your frame size&gt;, is_color=1)
</snippet></ROW><ROW><id>9930638</id><snippet>cvWriteFrame(w, frame)
</snippet></ROW><ROW><id>9930656</id><snippet>-O</snippet></ROW><ROW><id>9930656</id><snippet>assert</snippet></ROW><ROW><id>9930656</id><snippet>def require(cond, msg):
    if not cond:
        raise MyException(msg)
</snippet></ROW><ROW><id>9931389</id><snippet>from ctypes import c_int
import dummy

shared_bytes_var = multiprocessing.Value(c_int)

def Func(...):
    ....
    pool = multiprocessing.Pool(initializer=_initProcess,initargs=(shared_bytes_var,))
    ....

def _initProcess(x):
  dummy.shared_bytes_var = x
</snippet></ROW><ROW><id>9932098</id><snippet>my_query = '''SELECT val_1, val_2
              FROM   my_table 
              WHERE  val_1 IN ({:s});'''.format(",".join("?"*len(key_indexes)))
# -&gt; 'SELECT val_1, val_2 FROM my_table WHERE val_1 IN (?,?,?);'
c.execute(myquery, ind).fetchall()
</snippet></ROW><ROW><id>9932098</id><snippet>for</snippet></ROW><ROW><id>9932098</id><snippet>execute()</snippet></ROW><ROW><id>9932098</id><snippet>executemany()</snippet></ROW><ROW><id>9932098</id><snippet>executemany()</snippet></ROW><ROW><id>9932098</id><snippet>c.executemany('''INSERT INTO my_table VALUES (?,?);''', my_data)
</snippet></ROW><ROW><id>9932098</id><snippet>executemany()</snippet></ROW><ROW><id>9932189</id><snippet>test_request_context</snippet></ROW><ROW><id>9932189</id><snippet>@app.route('/my_endpoint', methods=['POST'])
def my_endpoint_handler():
    #do tracking in sub-thread so we don't hold up the page
    def handle_sub_view(req):
        with app.test_request_context():
            from flask import request
            request = req
            # Do Expensive work
    thread.start_new_thread(handle_sub_view, (request))
    return "Thanks"
</snippet></ROW><ROW><id>9932387</id><snippet>import Tkinter as tk

opt = []
def chkbox_checked():
    for ix, item in enumerate(cb):
        opt[ix]=(cb_v[ix].get())
    print opt
root = tk.Tk()  
mylist = [
'NR',
'ECEF X',
'ECEF Y',
'ECEF Z',
'height' 
]
cb = []
cb_v = []
for ix, text in enumerate(mylist):
    cb_v.append(tk.StringVar())
    off_value=0  #whatever you want it to be when the checkbutton is off
    cb.append(tk.Checkbutton(root, text=text, onvalue=text,offvalue=off_value,
                             variable=cb_v[ix],
                             command=chkbox_checked))
    cb[ix].grid(row=ix, column=0, sticky='w')
    opt.append(off_value)
    cb[-1].deselect() #uncheck the boxes initially.
label = tk.Label(root, width=20)
label.grid(row=ix+1, column=0, sticky='w')
root.mainloop()
</snippet></ROW><ROW><id>9932387</id><snippet>v=tk.StringVar()
cb.append(tk.CheckButton(... , variable=v, ...)
cb[-1].v=v
</snippet></ROW><ROW><id>9932387</id><snippet>def chkbox_checked():
   opt=[chkbox.v.get() for chkbox in cb]
   print opt
</snippet></ROW><ROW><id>9932387</id><snippet>opt</snippet></ROW><ROW><id>9932449</id><snippet>ascii</snippet></ROW><ROW><id>9932449</id><snippet>print title.encode('utf8')
</snippet></ROW><ROW><id>9932449</id><snippet>import sys

sys.getdefaultencoding()
# -&gt; 'ascii'
</snippet></ROW><ROW><id>9932621</id><snippet>def handle(self):
    """Handles a request ignoring dropped connections."""
    try:
        return BaseHTTPRequestHandler.handle(self)
    except (socket.error, socket.timeout) as e:
        self.connection_dropped(e)

def connection_dropped(self, error, environ=None):
    """Called if the connection was closed by the client.  By default
    nothing happens.
    """
    # add here the code you want to be executed if a connection
    # was closed by the client
</snippet></ROW><ROW><id>9932673</id><snippet>res = [(x, my_dictionary[x]) for x in my_list]
</snippet></ROW><ROW><id>9932673</id><snippet>for el in ((x, my_dictionary[x]) for x in my_list):
    print el
</snippet></ROW><ROW><id>9932673</id><snippet>res = [(x, my_dictionary[x]) for x in my_list if x in my_dictionary]
</snippet></ROW><ROW><id>9932682</id><snippet>import csv

fileAin = open('old.csv','rb')
fOld = csv.reader(fileAin)

fileBin = open('new.csv','rb')
fNew = csv.reader(fileBin)

fileCout = open('NewAndUpdated.csv','wb')
fNewUpdate = csv.writer(fileCout)

old = {row[0]:row[1:] for row in fOld}
new = {row[0]:row[1:] for row in fNew}
fileAin.close()
fileBin.close()

output = {}

for row_id in new:
    if row_id not in old or not old[row_id] == new[row_id]:
        output[row_id] = new[row_id]

for row_id in output:
    fNewUpdate.writerow([row_id] + output[row_id])


fileCout.close()
</snippet></ROW><ROW><id>9932779</id><snippet>/compress.py</snippet></ROW><ROW><id>9932779</id><snippet>def z(self):
</snippet></ROW><ROW><id>9932779</id><snippet>def post(self):
</snippet></ROW><ROW><id>9932873</id><snippet>def start_subquery(lexer):
    lexer.code_start = lexer.lexpos        # Record the starting position
    lexer.level = 1
    lexer.begin("subquery")

def end_subquery(lexer):
    lexer.begin("INITIAL")

def get_subquery(lexer):
    value = lexer.lexdata[lexer.code_start:lexer.code_end-1]
    lexer.lineno += value.count('\n')
    return value

@lex.TOKEN(r"\(")
def t_subquery_OPAR(t):
    lexer.level += 1

@lex.TOKEN(r"\)")
def t_subquery_CPAR(t):
    lexer.level -= 1
    if lexer.level == 0:
        lexer.code_end = lexer.lexpos        # Record the ending position
        return t

@lex.TOKEN(r".")
def t_subquery_anychar(t):
    pass

def p_value_subquery(p):
    """
    value : check_subquery_start OPAR check_subquery_end CPAR
    """
    p[0] = "( " + get_subquery(p.lexer) + " )"

def p_check_subquery_start(p):
    """
    check_subquery_start : 
    """
    # Here last_token would be yacc's lookahead.
    if last_token.type == "OPAR":
        start_subquery(p.lexer)

def p_check_subquery_end(p):
    """
    check_subquery_end : 
    """
    # Here last_token would be yacc's lookahead.
    if last_token.type == "CPAR":
        end_subquery(p.lexer)

last_token = None

def p_error(p):
    global subquery_retry_pos
    if p is None:
        print &gt;&gt; sys.stderr, "ERROR: unexpected end of query"
    else:
        print &gt;&gt; sys.stderr, "ERROR: Skipping unrecognized token", p.type, "("+ \
                p.value+") at line:", p.lineno, "and column:", find_column(p.lexer.lexdata, p)
        # Just discard the token and tell the parser it's okay.
        yacc.errok()

def get_token():
    global last_token
    last_token = lexer.token()
    return last_token

def parse_query(input, debug=0):
    lexer.input(input)
    return parser.parse(input, tokenfunc=get_token, debug=0)
</snippet></ROW><ROW><id>9932986</id><snippet>import urllib

url = 'http:......'
filename = 'your_filename'
urllib.urlretrieve(url, filename)
</snippet></ROW><ROW><id>9933301</id><snippet>fork</snippet></ROW><ROW><id>9933301</id><snippet>Queue</snippet></ROW><ROW><id>9933301</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>9933301</id><snippet>for</snippet></ROW><ROW><id>9933301</id><snippet>for x in range(10): q.put(x)
</snippet></ROW><ROW><id>9933517</id><snippet>statement % conn.literal(query_params)
</snippet></ROW><ROW><id>9933893</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; dices = [random.randint(1,12) for i in range(0,10)]
&gt;&gt;&gt; dices
[5, 2, 1, 6, 4, 8, 4, 10, 1, 10]
&gt;&gt;&gt; dices[1] = random.randint(1,12)
&gt;&gt;&gt; dices
[5, 5, 1, 6, 4, 8, 4, 10, 1, 10]
</snippet></ROW><ROW><id>9933893</id><snippet>dices</snippet></ROW><ROW><id>9933893</id><snippet>Dn = random.randint(1,12)</snippet></ROW><ROW><id>9933893</id><snippet>dices[n] = random.randint(1,12)</snippet></ROW><ROW><id>9933893</id><snippet>&gt;&gt;&gt; f = 123
</snippet></ROW><ROW><id>9933893</id><snippet>&gt;&gt;&gt; my_list = [f, 1, 2, 3]
</snippet></ROW><ROW><id>9933893</id><snippet>&gt;&gt;&gt; f = 456
&gt;&gt;&gt; my_list
[123, 1, 2, 3]
</snippet></ROW><ROW><id>9934119</id><snippet>self.timer = Timer(seconds, lambda: None)
</snippet></ROW><ROW><id>9934178</id><snippet>foo.py</snippet></ROW><ROW><id>9934178</id><snippet>def module_method():
    return "I am a module method"

class ModClass:
     @staticmethod
     def static_method():
         # the static method gets passed nothing
         return "I am a static method"
     @classmethod
     def class_method(cls):
         # the class method gets passed the class (in this case ModCLass)
         return "I am a class method"
     def instance_method(self):
         # An instance method gets passed the instance of ModClass
         return "I am an instance method"
</snippet></ROW><ROW><id>9934178</id><snippet>&gt;&gt;&gt; import foo
&gt;&gt;&gt; foo.module_method()
'I am a module method'
&gt;&gt;&gt; foo.ModClass.static_method()
'I am a static method'
&gt;&gt;&gt; foo.ModClass.class_method()
'I am a class method'
&gt;&gt;&gt; instance = ModClass()
&gt;&gt;&gt; instance.instance_method()
'I am an instance method'
</snippet></ROW><ROW><id>9934178</id><snippet>&gt;&gt;&gt; from foo import ModClass
&gt;&gt;&gt; ModClass.class_method()
'I am a class method'
</snippet></ROW><ROW><id>9934178</id><snippet>import ... as ...</snippet></ROW><ROW><id>9934178</id><snippet>&gt;&gt;&gt; from foo import ModClass as Foo
&gt;&gt;&gt; Foo.class_method()
'I am a class method'
</snippet></ROW><ROW><id>9934215</id><snippet>conv = dict(zip('kMGT', (3, 6, 9, 12)))
def parse_number(value):
  if value[-1] in conv:
    value = '{}e{}'.format(value[:-1], conv[value[-1]])
  return float(value)
</snippet></ROW><ROW><id>9934215</id><snippet>&gt;&gt;&gt; parse_number('1337')
1337.0
&gt;&gt;&gt; parse_number('8.1k')
8100.0
&gt;&gt;&gt; parse_number('8.1M')
8100000.0
&gt;&gt;&gt; parse_number('64.367G')
64367000000.0
</snippet></ROW><ROW><id>9934299</id><snippet>mro = my_super.__self_class__.mro()
wrapped_class = mro[mro.index(my_super.__thisclass__) + 1]
</snippet></ROW><ROW><id>9934299</id><snippet>self</snippet></ROW><ROW><id>9934299</id><snippet>super()</snippet></ROW><ROW><id>9934299</id><snippet>wrapped_class = my_super.__thisclass__.mro()[1]
</snippet></ROW><ROW><id>9934700</id><snippet>[]</snippet></ROW><ROW><id>9934700</id><snippet>[\sg|$...]</snippet></ROW><ROW><id>9934700</id><snippet>test = sub("\d+(\s|g|grams|kg|kilograms)", " ", test)
</snippet></ROW><ROW><id>9934700</id><snippet>\d+</snippet></ROW><ROW><id>9934700</id><snippet>()</snippet></ROW><ROW><id>9934700</id><snippet>|</snippet></ROW><ROW><id>9934700</id><snippet>""</snippet></ROW><ROW><id>9934700</id><snippet>" "</snippet></ROW><ROW><id>9934700</id><snippet>\s?</snippet></ROW><ROW><id>9934700</id><snippet>test = sub("\d+(\s|g|grams|kg|kilograms)\s?", "", test)
</snippet></ROW><ROW><id>9934910</id><snippet>struct.unpack()</snippet></ROW><ROW><id>9934913</id><snippet>def code_points(text):
    utf32 = text.encode('UTF-32LE')
    return struct.unpack('&lt;{}I'.format(len(utf32) // 4), utf32)
</snippet></ROW><ROW><id>9935047</id><snippet>django.contrib.flatpages.urls</snippet></ROW><ROW><id>9935047</id><snippet>urls.py</snippet></ROW><ROW><id>9935047</id><snippet>''</snippet></ROW><ROW><id>9935047</id><snippet>^admin/'</snippet></ROW><ROW><id>9935070</id><snippet>import re

with open('test.txt') as f:
    text = f.read()

reobj = re.compile("(.+),", re.MULTILINE)
dic = {}
for match in reobj.finditer(text):
    surname = match.group()
    if surname in dic:
        dic[surname] += 1
    else:
        dic[surname] = 1
</snippet></ROW><ROW><id>9935070</id><snippet>{'Williams,': 1, 'Jones,': 1, 'Miller,': 2, 'Johnson,': 2}
</snippet></ROW><ROW><id>9935084</id><snippet>sys.path</snippet></ROW><ROW><id>9935084</id><snippet>usercustomize.py</snippet></ROW><ROW><id>9935084</id><snippet>sys.path</snippet></ROW><ROW><id>9935084</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>9935084</id><snippet>$HOME</snippet></ROW><ROW><id>9935084</id><snippet>$HOME</snippet></ROW><ROW><id>9935084</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>9935084</id><snippet>$HOME/usercustomize.py</snippet></ROW><ROW><id>9935084</id><snippet>import sys, os
my_site = os.path.join(os.environ['HOME'],
                       'python-modules/lib/python2.6/site-packages')
sys.path.insert(0, my_site)
</snippet></ROW><ROW><id>9935084</id><snippet>sys.path</snippet></ROW><ROW><id>9935106</id><snippet>for</snippet></ROW><ROW><id>9935106</id><snippet>text=""</snippet></ROW><ROW><id>9935106</id><snippet>len(text) == 0</snippet></ROW><ROW><id>9935106</id><snippet>range(0) == []</snippet></ROW><ROW><id>9935106</id><snippet>for i in range(len(text) + 1):
</snippet></ROW><ROW><id>9935106</id><snippet>if suffix == "":
    return True
</snippet></ROW><ROW><id>9935106</id><snippet>def is_suffix(potential_suffix, text):
    return potential_suffix == text[-len(potential_suffix):]
</snippet></ROW><ROW><id>9935399</id><snippet>vector = vectorized
</snippet></ROW><ROW><id>9935399</id><snippet>vector = vectorized[:]
</snippet></ROW><ROW><id>9935625</id><snippet>import numpy as np
s = np.array([[20], [123], [113], [103], [123]])
std = s.std()
print np.abs(s[0] - s[1]) / std
</snippet></ROW><ROW><id>9935625</id><snippet>scipy.spatial.distance</snippet></ROW><ROW><id>9935625</id><snippet>np.cov</snippet></ROW><ROW><id>9935625</id><snippet>&gt;&gt;&gt; covar = np.cov(s, rowvar=0)

&gt;&gt;&gt; covar.shape
()

&gt;&gt;&gt; invcovar = np.linalg.inv(covar.reshape((1,1)))

&gt;&gt;&gt; invcovar.shape
(1, 1)

&gt;&gt;&gt; mahalanobis(s[0], s[1], invcovar)
2.3674720531046645
</snippet></ROW><ROW><id>9935639</id><snippet>&gt;&gt;&gt; D = {int:c_int,float:c_double}
&gt;&gt;&gt; pyarr = [1.2,2.4,3.6]
&gt;&gt;&gt; arr = (D[type(pyarr[0])] * len(pyarr))(*pyarr)
&gt;&gt;&gt; arr
&lt;__main__.c_double_Array_3 object at 0x023540D0&gt;
&gt;&gt;&gt; arr[0]
1.2
&gt;&gt;&gt; arr[1]
2.4
&gt;&gt;&gt; arr[2]
3.6
</snippet></ROW><ROW><id>9935639</id><snippet>_type_</snippet></ROW><ROW><id>9935639</id><snippet>&gt;&gt;&gt; arr._type_
&lt;class 'ctypes.c_double'&gt;
</snippet></ROW><ROW><id>9935763</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.combinations((1, 2, 3), 2))
[(1, 2), (1, 3), (2, 3)]
</snippet></ROW><ROW><id>9935949</id><snippet>MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)
</snippet></ROW><ROW><id>9936388</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>9936388</id><snippet>OrderedDict</snippet></ROW><ROW><id>9936388</id><snippet>pip install ordereddict</snippet></ROW><ROW><id>9936388</id><snippet>easy_install ordereddict</snippet></ROW><ROW><id>9936388</id><snippet>dict</snippet></ROW><ROW><id>9936388</id><snippet>dict</snippet></ROW><ROW><id>9936388</id><snippet>OrderedDict</snippet></ROW><ROW><id>9936482</id><snippet>global</snippet></ROW><ROW><id>9936482</id><snippet>def main(argv):
  global myGlobal
  #...
  myGlobal = "bar"
</snippet></ROW><ROW><id>9936482</id><snippet>class MyApp(object):
  def main(self, argv):
    self.myVar = "bar"
    self.mySub()

  def mySub(self):
    print self.myVar

MyApp().main(sys.argv[1:])
</snippet></ROW><ROW><id>9936617</id><snippet>Mar 29 19:58:13 mybox sshd[13914]: Accepted password for jtg from 192.168.0.20 port 51538 ssh2
</snippet></ROW><ROW><id>9936867</id><snippet>&gt;&gt;&gt; L=[1,2,2,3,4,5,5,5,6,7,8,8,9]
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; [[k]*v for k,v in Counter(L).items()]
[[1], [2, 2], [3], [4], [5, 5, 5], [6], [7], [8, 8], [9]]
</snippet></ROW><ROW><id>9936938</id><snippet>self.session['nickname']</snippet></ROW><ROW><id>9936938</id><snippet>broadcast_event()</snippet></ROW><ROW><id>9936968</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>9936968</id><snippet>testfile.py</snippet></ROW><ROW><id>9936968</id><snippet>python -u</snippet></ROW><ROW><id>9936968</id><snippet>testfile.py</snippet></ROW><ROW><id>9936968</id><snippet>python -u</snippet></ROW><ROW><id>9936968</id><snippet>import async_subprocess as subprocess

cmd = ['python', '-u', 'testfile.py']
p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
so = p.asyncread()
print so,
(so, se) = p.communicate()
print so
</snippet></ROW><ROW><id>9936968</id><snippet>python -u</snippet></ROW><ROW><id>9936968</id><snippet>$ python -u script.py
Line 1 of Text
Input 1:
</snippet></ROW><ROW><id>9936968</id><snippet>$ python -u script.py
Line 1 of Text
Input 1:Hullo
 Line 2 of Text Input:  Hullo
</snippet></ROW><ROW><id>9937073</id><snippet>from genshi.template import TextTemplate
ip_vlan1 = TextTemplate("10.10.${id+100}.5")
ip_vlan2 = TextTemplate("10.11.${2*id+1}.6")
print( ip_vlan1.generate(id=3) ) # prints 10.10.103.5
print( ip_vlan2.generate(id=5) ) # prints 10.11.11.6
</snippet></ROW><ROW><id>9937073</id><snippet>calculate_vlan_id</snippet></ROW><ROW><id>9937073</id><snippet>def calculate_vlan_id(id,ip_vlan):
  return ip_vlan.generate(id=id)
</snippet></ROW><ROW><id>9937073</id><snippet>ip_vlan1 = jinja2.Template('10.10.{{id+100}}.5')
ip_vlan2 = jinja2.Template('10.11.{{2*id+1}}.6')
ip_vlan1.render(id=3)
ip_vlan2.render(id=5)
</snippet></ROW><ROW><id>9937257</id><snippet>QDateEdit</snippet></ROW><ROW><id>9937257</id><snippet>QDateTimeEdit</snippet></ROW><ROW><id>9937257</id><snippet>void dateChanged ( const QDate &amp; date )
void dateTimeChanged ( const QDateTime &amp; datetime )
void timeChanged ( const QTime &amp; time )
</snippet></ROW><ROW><id>9937257</id><snippet>self.dateEdit.dateChanged.connect(self.start_date_dateedit)
</snippet></ROW><ROW><id>9937498</id><snippet>[x for x in mylist2 if x[:2] not in mylist1]
</snippet></ROW><ROW><id>9937761</id><snippet>sys.modules</snippet></ROW><ROW><id>9937761</id><snippet># game.py
class Game(object):
    pass

import sys
sys.modules["game"] = Game()
</snippet></ROW><ROW><id>9937761</id><snippet>import game</snippet></ROW><ROW><id>9937761</id><snippet>Game</snippet></ROW><ROW><id>9937818</id><snippet>&gt;&gt;&gt; property = "name"
&gt;&gt;&gt; formatter = "my %s is %%s" % property
&gt;&gt;&gt; print formatter % "wong2"
my name is wong2
</snippet></ROW><ROW><id>9937942</id><snippet>inspect.stack()</snippet></ROW><ROW><id>9937942</id><snippet>inspect.currentframe().f_back</snippet></ROW><ROW><id>9937942</id><snippet>inspect</snippet></ROW><ROW><id>9938406</id><snippet>locations</snippet></ROW><ROW><id>9938406</id><snippet>describeRoom</snippet></ROW><ROW><id>9938406</id><snippet>cookieroom</snippet></ROW><ROW><id>9938406</id><snippet>crowbar</snippet></ROW><ROW><id>9938406</id><snippet>hammer</snippet></ROW><ROW><id>9938406</id><snippet>'The cookieroom, where all the hard work gets done. \n\nNORTH: LFA - ITEMS: ["crowbar", "hammer"]'
</snippet></ROW><ROW><id>9938406</id><snippet>items</snippet></ROW><ROW><id>9938406</id><snippet>locations</snippet></ROW><ROW><id>9938500</id><snippet>function counter(name) {
    var ret = db.counters.findAndModify({query:{_id:name}, update:{$inc : {next:1}}, "new":true, upsert:true});
    // ret == { "_id" : "users", "next" : 1 }
    return ret.next;
}

db.users.insert({_id:counter("users"), name:"Sarah C."}) // _id : 1
db.users.insert({_id:counter("users"), name:"Bob D."}) // _id : 2
</snippet></ROW><ROW><id>9938888</id><snippet>heapq</snippet></ROW><ROW><id>9938888</id><snippet>heapq</snippet></ROW><ROW><id>9938888</id><snippet>heap = []
data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
for item in data:
    heappush(heap, item)
sort = []
while heap:
    sort.append(heappop(heap))
print sort
</snippet></ROW><ROW><id>9938888</id><snippet>heap[n] &lt;= heap[n*2+1] and heap[n] &lt;= heap[n*2+2]</snippet></ROW><ROW><id>9938888</id><snippet>heappush()</snippet></ROW><ROW><id>9938888</id><snippet>heappop()</snippet></ROW><ROW><id>9938888</id><snippet>heapify(somelist)</snippet></ROW><ROW><id>9938982</id><snippet>import os

r, w = os.pipe()
r, w = os.fdopen(r, 'rb'), os.fdopen(w, 'wb')
</snippet></ROW><ROW><id>9939067</id><snippet>chmod</snippet></ROW><ROW><id>9939067</id><snippet>django.mo</snippet></ROW><ROW><id>9939067</id><snippet>django.po</snippet></ROW><ROW><id>9939067</id><snippet>chmod g+w &lt;filename&gt;</snippet></ROW><ROW><id>9939413</id><snippet>for link in soup.findAll('div', {'class': 'listEntry '}):
    print link
</snippet></ROW><ROW><id>9939413</id><snippet>findAll(self, name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs)</snippet></ROW><ROW><id>9939413</id><snippet>form = soup.find('form', id='parkAndCompareVehicle')
print len(form.find_all('div', 'listEntry '))
</snippet></ROW><ROW><id>9939732</id><snippet>gdb python
gdb&gt; run -m main.py
</snippet></ROW><ROW><id>9939938</id><snippet>add</snippet></ROW><ROW><id>9939938</id><snippet>{{ forloop.counter.0|add:paginator.page.start_index }}
</snippet></ROW><ROW><id>9940053</id><snippet>from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType

for content_type in ContentType.objects.all():
     Permission.objects.create(content_type=content_type, codename='view_%s' % content_type.model, name='Can view %s' % content_type.name)
</snippet></ROW><ROW><id>9940184</id><snippet>from django.conrtib.comments.models import Comment
from django.contrib.contenttypes.models import ContentType
class Blog( models.Model ) :
    def comment_count(self) :
        ct = ContentType.objects.get_for_model(Blog)
        obj_pk = self.id
        return Comment.objects.filter(content_type=ct,object_pk=obj_pk).count()
</snippet></ROW><ROW><id>9940627</id><snippet>http://docs.python.org/release/&lt;major&gt;.&lt;minor&gt;/</snippet></ROW><ROW><id>9940627</id><snippet>output = subprocess.check_output(["command", "arg1"], shell=True)
</snippet></ROW><ROW><id>9940627</id><snippet>process = subprocess.Popen(["command", "arg1"], shell=True, stdout=subprocess.PIPE)
stdout,stderr = process.communicate()
# not shown: how to use Popen.poll() to wait for process death.
# while filling an output buffer
print stdout
</snippet></ROW><ROW><id>9940627</id><snippet>output = os.popen('ls')
</snippet></ROW><ROW><id>9941024</id><snippet>struct</snippet></ROW><ROW><id>9941024</id><snippet>float</snippet></ROW><ROW><id>9941024</id><snippet>import random
import struct

floatlist = [random.random() for _ in range(10**5)]
buf = struct.pack('%sf' % len(floatlist), *floatlist)
</snippet></ROW><ROW><id>9941334</id><snippet>XXX-XXX-XXXX</snippet></ROW><ROW><id>9941334</id><snippet>XX-XXX XXX XX</snippet></ROW><ROW><id>9941334</id><snippet>XXX/XXX XX XX</snippet></ROW><ROW><id>9941334</id><snippet>+46(0)70-XXX XX XX</snippet></ROW><ROW><id>9941490</id><snippet>first_series[second_series == 'Minus'] *= -1
first_series[second_series.isnull()] = np.nan
</snippet></ROW><ROW><id>9941490</id><snippet>0    18.346606
1    -7.646455
2          NaN
</snippet></ROW><ROW><id>9941582</id><snippet>pandas.read_csv</snippet></ROW><ROW><id>9941582</id><snippet>na_values</snippet></ROW><ROW><id>9941582</id><snippet>na_values : list-like, default None
    List of additional strings to recognize as NA/NaN
</snippet></ROW><ROW><id>9941741</id><snippet>Place</snippet></ROW><ROW><id>9941741</id><snippet>UserProfile</snippet></ROW><ROW><id>9941741</id><snippet>userprofile_set</snippet></ROW><ROW><id>9941741</id><snippet>user_profile_set</snippet></ROW><ROW><id>9941741</id><snippet>User</snippet></ROW><ROW><id>9941741</id><snippet>UserProfile</snippet></ROW><ROW><id>9941741</id><snippet>UserProfile</snippet></ROW><ROW><id>9941741</id><snippet>User</snippet></ROW><ROW><id>9941741</id><snippet>.user</snippet></ROW><ROW><id>9941741</id><snippet>place.userprofile_set.all</snippet></ROW><ROW><id>9941741</id><snippet>profile.user</snippet></ROW><ROW><id>9942048</id><snippet>def populate_equilibria (obj):
    obj.populate_equilibria()
    return obj

j1 = jobserver.submit(populate_equilibria,(net2,),(),("numpy as num"))
net2 = j1()
</snippet></ROW><ROW><id>9942607</id><snippet>__getattr__</snippet></ROW><ROW><id>9942607</id><snippet>__getattribute__</snippet></ROW><ROW><id>9942607</id><snippet>isinstance()</snippet></ROW><ROW><id>9942607</id><snippet>__instancecheck__</snippet></ROW><ROW><id>9942607</id><snippet>__subclasscheck__</snippet></ROW><ROW><id>9942607</id><snippet>repr()</snippet></ROW><ROW><id>9942607</id><snippet>__repr__()</snippet></ROW><ROW><id>9942819</id><snippet>UI &lt;-&gt; Web Services &lt;-&gt; DB</snippet></ROW><ROW><id>9942821</id><snippet>win.state('zoomed')</snippet></ROW><ROW><id>9942821</id><snippet>win</snippet></ROW><ROW><id>9942821</id><snippet>class Void (tk.Tk) :
    def __init__ (self, color='black') :
        tk.Tk.__init__(self)
        self.wm_state('zoomed')
        self.config(bg=color)
        self.overrideredirect(True)
        self.attributes('-topmost', True)
</snippet></ROW><ROW><id>9942822</id><snippet>str</snippet></ROW><ROW><id>9942822</id><snippet>.encode()</snippet></ROW><ROW><id>9942822</id><snippet>p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()
</snippet></ROW><ROW><id>9942830</id><snippet>str</snippet></ROW><ROW><id>9942830</id><snippet>bytes</snippet></ROW><ROW><id>9942830</id><snippet>&gt;&gt;&gt; from bitstring import BitStream
&gt;&gt;&gt; packet_data = '(2\x06D\x03\x124V\x03\xe8'
&gt;&gt;&gt; b = BitStream(bytes=packet_data)
</snippet></ROW><ROW><id>9942830</id><snippet>&gt;&gt;&gt; b.read('uint:8')
40
&gt;&gt;&gt; b.read('uint:8')
50
&gt;&gt;&gt; b.readlist('uint:3, uint:3')
[0, 1]
&gt;&gt;&gt; b.readlist('2*bool')
[True, False]
&gt;&gt;&gt; b.readlist('2*uint:8')
[68, 3]
&gt;&gt;&gt; b.read('bytes:3')
'\x124V'
</snippet></ROW><ROW><id>9942830</id><snippet>&gt;&gt;&gt; length = b[32:40].uint
&gt;&gt;&gt; b[40:40 + length*8]
BitStream('0x123456')
</snippet></ROW><ROW><id>9942830</id><snippet>&gt;&gt;&gt; b[40:40 + 3*8].bytes
'\x124V'
</snippet></ROW><ROW><id>9943237</id><snippet>drostie@signy:~$ python
Python 2.7.2+ (default, Oct  4 2011, 20:06:09) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print "ŠČŽ"
ŠČŽ
&gt;&gt;&gt; print "ŠČŽ".lower()
ŠČŽ
&gt;&gt;&gt; print u"ŠČŽ".lower()
ščž
</snippet></ROW><ROW><id>9943237</id><snippet>u</snippet></ROW><ROW><id>9943237</id><snippet>unicode</snippet></ROW><ROW><id>9943237</id><snippet>str</snippet></ROW><ROW><id>9943471</id><snippet>data_files=[("/usr/local/bin", glob("bin/*"))], ...
</snippet></ROW><ROW><id>9943534</id><snippet>&gt;&gt;&gt; myStr[::-1].replace("iss"[::-1], "XXX"[::-1], 1)[::-1]
'missXXXippi'
</snippet></ROW><ROW><id>9943763</id><snippet>import gdata.docs.data
import gdata.docs.client

client = gdata.docs.client.DocsClient()
client.ClientLogin('xxxxxx@gmail.com', 'xxxxxx', 'XxX')

for doc in client.GetAllResources():
    if doc.title.text == 'qpqpqpqpqpqp':
        client.DeleteResource(doc, force=True)
        break
</snippet></ROW><ROW><id>9943926</id><snippet>Pyramid</snippet></ROW><ROW><id>9944222</id><snippet>getattr(o, v)
</snippet></ROW><ROW><id>9944239</id><snippet>import tempfile
import os
for idx in xrange(1024 + 1):
    outfd, outsock_path = tempfile.mkstemp()
    outsock = os.fdopen(outfd,'w')
    outsock.close()
</snippet></ROW><ROW><id>9944471</id><snippet>self.ShowFullScreen(True)
</snippet></ROW><ROW><id>9944471</id><snippet>myFrame.ShowFullScreen(True)
</snippet></ROW><ROW><id>9944682</id><snippet>None</snippet></ROW><ROW><id>9944682</id><snippet>auth.set_request_token()</snippet></ROW><ROW><id>9944682</id><snippet>None</snippet></ROW><ROW><id>9944682</id><snippet># WRONG CODE
auth.set_request_token(None, None)
</snippet></ROW><ROW><id>9945031</id><snippet>min_value = min(d.itervalues())
min_keys = [k for k in d if d[k] == min_value]
</snippet></ROW><ROW><id>9945031</id><snippet>it = d.iteritems()
min_key, min_value = next(it)
num_mins = 1
for k, v in it:
    if v &lt; min_value:
        num_mins = 1
        min_key, min_value = k, v
    elif v == min_value:
        num_mins += 1
        if random.randrange(num_mins) == 0:
            min_key = k
</snippet></ROW><ROW><id>9945076</id><snippet>import sys; raise Exception(sys.path)
</snippet></ROW><ROW><id>9945916</id><snippet>mask =  0b01111111
byte_from_file = 0b10101010
value = mask &amp; byte_from_file
print bin(value)
&gt;&gt; 0b101010
print value
&gt;&gt; 42
</snippet></ROW><ROW><id>9945916</id><snippet>LEADING_BIT_MASK =  0b10000000
VALUE_MASK = 0b01111111

bytes = [0b10101010, 0b01010101, 0b0000000, 0b10000000]

for byte in bytes:
    value = byte &amp; VALUE_MASK
    has_leading_bit = byte &amp; LEADING_BIT_MASK
    if value == 0:
        print "EOL"
    elif has_leading_bit:
        print "leading one", value
    elif not has_leading_bit:
        print "leading zero", value
</snippet></ROW><ROW><id>9946394</id><snippet>list1 = [ ['node1', 'pathA'], ['node2', 'pathA'], ['node3', 'pathB'], ['node4', 'pathC'], ['node5', 'pathA'] ]
result = [x for x in list1 if [y[1] for y in list1].count(x[1]) &gt; 1]
</snippet></ROW><ROW><id>9946696</id><snippet>AssertionError</snippet></ROW><ROW><id>9946696</id><snippet>self.assertEqual(...)</snippet></ROW><ROW><id>9946696</id><snippet>AssertionError: 'Search by template name or category..' != u'Submitter Requests'
</snippet></ROW><ROW><id>9946696</id><snippet>'Search by template name or category'</snippet></ROW><ROW><id>9946696</id><snippet>'Submitter Requests'</snippet></ROW><ROW><id>9946696</id><snippet>self.assertEqual</snippet></ROW><ROW><id>9947093</id><snippet>re.match</snippet></ROW><ROW><id>9947093</id><snippet>re.search</snippet></ROW><ROW><id>9947093</id><snippet>re.match(r'(ftp|http)://.*\.(jpg|png)$', s)
</snippet></ROW><ROW><id>9947093</id><snippet>r''</snippet></ROW><ROW><id>9947093</id><snippet>string</snippet></ROW><ROW><id>9947093</id><snippet>s</snippet></ROW><ROW><id>9947093</id><snippet>r = re.compile(...)</snippet></ROW><ROW><id>9947093</id><snippet>r.match(s)</snippet></ROW><ROW><id>9947093</id><snippet>urlparse</snippet></ROW><ROW><id>9947093</id><snippet>&gt;&gt;&gt; allowed_schemes = ('http', 'ftp')
&gt;&gt;&gt; allowed_exts = ('png', 'jpg')
&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; url = urlparse("ftp://www.somewhere.com/over/the/rainbow/image.jpg")
&gt;&gt;&gt; url.scheme in allowed_schemes
True
&gt;&gt;&gt; url.path.rsplit('.', 1)[1] in allowed_exts
True
</snippet></ROW><ROW><id>9947184</id><snippet>print  the_table.properties() # hint it's a dictionary do: type(the_table.properties() &lt;type 'dict'&gt; 
</snippet></ROW><ROW><id>9947184</id><snippet>the_table.update(giveHereYourDictionary)
</snippet></ROW><ROW><id>9947184</id><snippet>In [95]: prop=the_table.properties()
In [96]: prop #This is a dictionary, it's not so trivial, but never the less one can understand how dictionaries work...
Out[96]: 
{'agg_filter': None,
 'alpha': None,
 'animated': False,
 'axes': &lt;matplotlib.axes.AxesSubplot at 0x9eba34c&gt;,
 'celld': {(0, -1): &lt;matplotlib.table.Cell at 0xa0cf5ec&gt;,
  (0, 0): &lt;matplotlib.table.Cell at 0xa0c2d0c&gt;,
  (0, 1): &lt;matplotlib.table.Cell at 0xa0c2dec&gt;,
  (0, 2): &lt;matplotlib.table.Cell at 0xa0c2ecc&gt;,
  (1, -1): &lt;matplotlib.table.Cell at 0xa0cf72c&gt;,
  (1, 0): &lt;matplotlib.table.Cell at 0xa0c2fac&gt;,
  (1, 1): &lt;matplotlib.table.Cell at 0xa0cf08c&gt;,
  (1, 2): &lt;matplotlib.table.Cell at 0xa0cf18c&gt;,
  (2, -1): &lt;matplotlib.table.Cell at 0xa0cf84c&gt;,
  (2, 0): &lt;matplotlib.table.Cell at 0xa0cf28c&gt;,
  (2, 1): &lt;matplotlib.table.Cell at 0xa0cf3ac&gt;,
  (2, 2): &lt;matplotlib.table.Cell at 0xa0cf4cc&gt;},
 'child_artists': [&lt;matplotlib.table.Cell at 0xa0c2dec&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf18c&gt;,
  &lt;matplotlib.table.Cell at 0xa0c2d0c&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf84c&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf3ac&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf08c&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf28c&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf4cc&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf5ec&gt;,
  &lt;matplotlib.table.Cell at 0xa0c2fac&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf72c&gt;,
  &lt;matplotlib.table.Cell at 0xa0c2ecc&gt;],
 'children': [&lt;matplotlib.table.Cell at 0xa0c2dec&gt;,
  &lt;matplotlib.table.Cell at 0xa0cf18c&gt;,
  ...snip snap ...
  &lt;matplotlib.table.Cell at 0xa0cf72c&gt;,
  &lt;matplotlib.table.Cell at 0xa0c2ecc&gt;],
 'clip_box': TransformedBbox(Bbox(array([[ 0.,  0.],
       [ 1.,  1.]])), CompositeAffine2D(BboxTransformTo(Bbox(array([[ 0.,  0.],
       [ 1.,  1.]]))), BboxTransformTo(TransformedBbox(Bbox(array([[ 0.25,  0.3 ],
       [ 0.95,  0.8 ]])), BboxTransformTo(TransformedBbox(Bbox(array([[ 0.,  0.],
       [ 8.,  6.]])), Affine2D(array([[ 80.,   0.,   0.],
       [  0.,  80.,   0.],
       [  0.,   0.,   1.]])))))))),
 'clip_on': True,
 'clip_path': None,
 'contains': None,
 'figure': &lt;matplotlib.figure.Figure at 0x9eaf56c&gt;,
 'gid': None,
 'label': '',
 'picker': None,
 'rasterized': None,
 'snap': None,
 'transform': BboxTransformTo(TransformedBbox(Bbox(array([[ 0.25,  0.3 ],
       [ 0.95,  0.8 ]])), BboxTransformTo(TransformedBbox(Bbox(array([[ 0.,  0.],
       [ 8.,  6.]])), Affine2D(array([[ 80.,   0.,   0.],
       [  0.,  80.,   0.],
       [  0.,   0.,   1.]])))))),
 'transformed_clip_path_and_affine': (None, None),
 'url': None,
 'visible': True,
 'zorder': 0}

# we now get all the cells ...
 [97]: cells = prop['child_artists']

In [98]: cells
Out[98]: 
[&lt;matplotlib.table.Cell at 0xa0c2dec&gt;,
 &lt;matplotlib.table.Cell at 0xa0cf18c&gt;,
... snip snap...
 &lt;matplotlib.table.Cell at 0xa0cf72c&gt;,
 &lt;matplotlib.table.Cell at 0xa0c2ecc&gt;]

In [99]:cell=cells[0]
In [100]: cell # press tab here to see cell's attributes

Display all 122 possibilities? (y or n)
cell.PAD
cell.add_callback
...snip snap ...
cell.draw
cell.eventson
cell.figure
...snip snap ...
In [100]: cell.set_h
cell.set_hatch   cell.set_height 

# this looks promising no? Hell, I love python ;-)
wait, let's examine something first ...
In [100]: cell.get_height()
Out[100]: 0.055555555555555552
In [101]: cell.set_height(0.1) # we just 'doubled' the height...
In [103]: pyplot.show()
</snippet></ROW><ROW><id>9947189</id><snippet>.pyc</snippet></ROW><ROW><id>9947189</id><snippet>module2.myException</snippet></ROW><ROW><id>9947189</id><snippet>module1.myException</snippet></ROW><ROW><id>9947189</id><snippet>---- module1.pyc ---  (Old: no source code)
class myException(Exception):
    pass    

---- module2.py --- (New: Your replacement for the old module2.py)
class myException(Exception):
    pass

def myfunction():
    raise myException()

---- mainmodule.pyc ---  (Old: no source code)
from oldmodule1 import myException

import module2
try:
    module2.myfunction()
except myException:
    print "Caught it!"
</snippet></ROW><ROW><id>9948030</id><snippet>class FlightLeg:
    Flight = []
</snippet></ROW><ROW><id>9948030</id><snippet>Flight</snippet></ROW><ROW><id>9948030</id><snippet>FlightLeg</snippet></ROW><ROW><id>9948030</id><snippet>class FlightLeg(object):
    def __init__(self):
        self.flight = []
</snippet></ROW><ROW><id>9948030</id><snippet>flight</snippet></ROW><ROW><id>9948030</id><snippet>FlightLeg</snippet></ROW><ROW><id>9948100</id><snippet>a[:, 0] * b
</snippet></ROW><ROW><id>9948100</id><snippet>a * b[:, None]
</snippet></ROW><ROW><id>9948111</id><snippet>pkgutil.iter_modules()
</snippet></ROW><ROW><id>9948111</id><snippet>sys.modules
</snippet></ROW><ROW><id>9948111</id><snippet>sys.modules.keys() 
</snippet></ROW><ROW><id>9948297</id><snippet>views.py</snippet></ROW><ROW><id>9948297</id><snippet>templatetags</snippet></ROW><ROW><id>9948297</id><snippet>{% load %}</snippet></ROW><ROW><id>9948487</id><snippet>r3 = r'(\w+)\s+\((\w+)\)'   #Match a word (group1), whitespace followed by a '(' then another word (group2) and finally a closing ')'
</snippet></ROW><ROW><id>9948487</id><snippet>r3 = r'(\s*(?:\w+\s*)*)\s*\(\s*((?:\w+\s*)+)\s*\)'
</snippet></ROW><ROW><id>9948487</id><snippet>\w+</snippet></ROW><ROW><id>9948487</id><snippet>(?:\w+\s*)*</snippet></ROW><ROW><id>9948487</id><snippet>(?:...)</snippet></ROW><ROW><id>9948487</id><snippet>elif match3:
    print 'pattern 3 found: City : '+ match3.group(1) + ", Country :" + match3.group(2)
</snippet></ROW><ROW><id>9948487</id><snippet>print ("\n")  #prints newline
print (r"\n") #prints "\n"
</snippet></ROW><ROW><id>9948708</id><snippet>_state.db</snippet></ROW><ROW><id>9948708</id><snippet>my_obj = MyModel.objects.get(pk=1)
my_obj._state.db
</snippet></ROW><ROW><id>9948861</id><snippet>datetime.fromtimestamp()</snippet></ROW><ROW><id>9948861</id><snippet>start_dt = dt.datetime.fromtimestamp(start_val * 60)
end_dt = dt.datetime.fromtimestamp(end_val * 60)
</snippet></ROW><ROW><id>9948861</id><snippet>datetime.utcfromtimestamp()</snippet></ROW><ROW><id>9948861</id><snippet>&gt;&gt;&gt; dt.datetime.utcfromtimestamp(21564001 * 60)
datetime.datetime(2011, 1, 1, 0, 1)
&gt;&gt;&gt; dt.datetime.utcfromtimestamp(22089586 * 60)
datetime.datetime(2011, 12, 31, 23, 46)
</snippet></ROW><ROW><id>9948861</id><snippet>dt.timedelta(minutes=1)</snippet></ROW><ROW><id>9949004</id><snippet>def zeros_pattern(s):
    return [c == "0" for c in s]

list_of_strings.sort(key=zeros_pattern)
</snippet></ROW><ROW><id>9949277</id><snippet>else</snippet></ROW><ROW><id>9949277</id><snippet>try/except</snippet></ROW><ROW><id>9949277</id><snippet>try:
    socket.inet_aton(data)
except socket.error:
    pass
else:
    print(data)
</snippet></ROW><ROW><id>9949277</id><snippet>socket.inet_aton</snippet></ROW><ROW><id>9949277</id><snippet>def valid_ip(addr):
    try:
        addr = addr.strip().split(".")
    except AttributeError:
        return False
    try:
        return len(addr) == 4 and all(octet.isdigit() and int(octet) &lt; 256
                                      for octet in addr)
    except ValueError:
        return False
</snippet></ROW><ROW><id>9949277</id><snippet>if valid_ip(data):
    print data
</snippet></ROW><ROW><id>9949417</id><snippet>## setup.py ##

import re

# file_util has to come first because dir_util uses it
from distutils import file_util, dir_util

def wrapper(fn):
    def wrapped(src, *args, **kwargs):
        if not re.search(r'/\.git/?', src):
            fn(src, *args, **kwargs) 
    return wrapped       

file_util.copy_file = wrapper(file_util.copy_file)
dir_util.mkpath = wrapper(dir_util.mkpath)

# now import setuptools so it uses the monkeypatched methods
from setuptools import setup
</snippet></ROW><ROW><id>9949417</id><snippet>exclude_data_patterns(re_pattern)</snippet></ROW><ROW><id>9949454</id><snippet>count = ((min &lt; X) &amp; (X &lt; max) &amp; 
         (min &lt; Y) &amp; (Y &lt; max) &amp;
         (min &lt; Z) &amp; (Z &lt; max)).sum()
</snippet></ROW><ROW><id>9949519</id><snippet>astype</snippet></ROW><ROW><id>9949519</id><snippet>import numpy as np
recs = [('Bill', '31', 260.0), ('Fred', 15, '145.0')]
r = np.rec.fromrecords(recs, formats = 'S30,i2,f4', names = 'name, age, weight')
print(r)
# [('Bill', 31, 260.0) ('Fred', 15, 145.0)]
</snippet></ROW><ROW><id>9949519</id><snippet>age</snippet></ROW><ROW><id>9949519</id><snippet>&lt;i2</snippet></ROW><ROW><id>9949519</id><snippet>print(r.dtype)
# [('name', '|S30'), ('age', '&lt;i2'), ('weight', '&lt;f4')]
</snippet></ROW><ROW><id>9949519</id><snippet>&lt;f4</snippet></ROW><ROW><id>9949519</id><snippet>astype</snippet></ROW><ROW><id>9949519</id><snippet>r = r.astype([('name', '|S30'), ('age', '&lt;f4'), ('weight', '&lt;f4')])
print(r)
# [('Bill', 31.0, 260.0) ('Fred', 15.0, 145.0)]
</snippet></ROW><ROW><id>9949553</id><snippet>eval()</snippet></ROW><ROW><id>9949553</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>9949553</id><snippet>json.loads()</snippet></ROW><ROW><id>9949683</id><snippet>actualstdout = sys.stdout
sys.stdout = StringIO()
result = foobar()
sys.stdout = actualstdout
sys.stdout.write(str(result))
sys.stdout.flush()
sys.exit(0)
</snippet></ROW><ROW><id>9949683</id><snippet>StringIO</snippet></ROW><ROW><id>9949905</id><snippet>write('\b')  # &lt;-- backup 1-character
</snippet></ROW><ROW><id>9950496</id><snippet>from __future__ import division
import csv
from collections  import defaultdict

def default_factory():
   return { "sum": 0, "max": None, "min": None, "count": 0}

reader = csv.DictReader(open(r'sd.csv'))

dates = defaultdict(default_factory)
rows = []
for row in reader:
    date = row["Date"]
    sd = int(row["Snowdepth"])
    rows.append([date, sd])
    month = date.split("/")[0]
    r = dates[month]
    r["sum"] += sd
    max = r["max"]
    r["max"] = sd if max is None else sd if sd &gt; max else max
    min = r["min"]
    r["min"] = sd if min is None else sd if sd &lt; min else min
    r["count"] += 1

for date in dates:
    r = dates[date]
    r["avg"] = r["sum"]/r["count"]

writer = csv.writer(open(r'TestAvg.csv', 'w'))
writer.writerow(["Date", "SD", "max", "min", "mean"])
for row in rows:
    r = dates[row[0].split("/")[0]]
    writer.writerow(row + [r["max"], r["min"], r["avg"]])
</snippet></ROW><ROW><id>9950570</id><snippet>str(datetime.datetime.now())</snippet></ROW><ROW><id>9950570</id><snippet>'2012-03-30 14:20:46'</snippet></ROW><ROW><id>9950570</id><snippet>time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime())</snippet></ROW><ROW><id>9950570</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>9950617</id><snippet>pattern = re.compile(r'(\d+)x(\d+)') # for st_srt
st_srt = re.sub(pattern, r'S\1E\2', st_srt)
</snippet></ROW><ROW><id>9950701</id><snippet># make a dict keyed on the filename before the extension
# with the other two fields as its value
file2dict = dict((row[0][:-4], row[1:])  
                     for row in (line.split() for line in file2))

# then add to the end of each row 
# the values to it's first column
output = [row + file2dict[row[0]] for row in (line.split() for line in file1)]
</snippet></ROW><ROW><id>9950701</id><snippet># I just use this to emulate a file object, as iterating over it yields lines
# just use file1 = open(whatever_the_filename_is_for_this_data)
# and the rest of the program is the same
file1 = """12319000    -64,7357668067227   -0,1111052148685535
12319000    -79,68527661064425  -0,13231739777754026
12319000    -94,69642857142858  -0,15117839559513543
12319000    -109,59301470588237 -0,18277783185642743
12319001    99,70264355742297   0,48329515727315125
12319001    84,61113445378152   0,4060446341409862
12319001    69,7032037815126    0,29803063228455073
12319001    54,93886554621849   0,20958105041136763
12319001    39,937394957983194  0,13623056582981297
12319001    25,05574229691877   0,07748669438398018
12319001    9,99716386554622    0,028110643107892755""".splitlines()

# again, use file2 = open(whatever_the_filename_is_for_this_data)
# and the rest of the program will work the same
file2 = """12319000.abf    mutant  1
12319001.abf    mutant  2
12319002.abf    mutant  3""".splitlines()
</snippet></ROW><ROW><id>9950701</id><snippet>   [['12319000', '-64,7357668067227', '-0,1111052148685535', 'mutant', '1'],
    ['12319000', '-79,68527661064425', '-0,13231739777754026', 'mutant', '1'],
    ['12319000', '-94,69642857142858', '-0,15117839559513543', 'mutant', '1'],
    ['12319000', '-109,59301470588237', '-0,18277783185642743', 'mutant', '1'],
    ['12319001', '99,70264355742297', '0,48329515727315125', 'mutant', '2'],
    ['12319001', '84,61113445378152', '0,4060446341409862', 'mutant', '2'],
    ['12319001', '69,7032037815126', '0,29803063228455073', 'mutant', '2'],
    ['12319001', '54,93886554621849', '0,20958105041136763', 'mutant', '2'],
    ['12319001', '39,937394957983194', '0,13623056582981297', 'mutant', '2'],
    ['12319001', '25,05574229691877', '0,07748669438398018', 'mutant', '2'],
    ['12319001', '9,99716386554622', '0,028110643107892755', 'mutant', '2']]
</snippet></ROW><ROW><id>9950951</id><snippet>line = line[:-3] + ['|'.join(line[-3:])]
</snippet></ROW><ROW><id>9950996</id><snippet>def my_key(a):
    if a.part_of_subset:
        return 0,
    return 1, a.sort_key

collection.sort(key=my_key)
</snippet></ROW><ROW><id>9950996</id><snippet>sort_key</snippet></ROW><ROW><id>9950996</id><snippet>None</snippet></ROW><ROW><id>9951458</id><snippet>import matplotlib.pyplot as plt
from pylab import arange
from math import e
from math import pi
from math import sin
from math import cos
from numpy import poly1d

# need some zero vectors...
def zeroV(m):
    z = [0]*m
    return(z)

#INPUT: n; x0, x1, ... ,xn; a0 = f(x0), a1 =f(x1), ... , an = f(xn).
def cubic_spline(n, xn, a):
"""function cubic_spline(n,xn, a, xd) interpolates between the knots
   specified by lists xn and a. The function computes the coefficients
   and outputs the ranges of the piecewise cubic splines."""        

    h = zeroV(n-1)

    # alpha will be values in a system of eq's that will allow us to solve for c
    # and then from there we can find b, d through substitution.
    alpha = zeroV(n-1)

    # l, u, z are used in the method for solving the linear system
    l = zeroV(n+1)
    u = zeroV(n)
    z = zeroV(n+1)

    # b, c, d will be the coefficients along with a.
    b = zeroV(n)     
    c = zeroV(n+1)
    d = zeroV(n)    

    for i in range(n-1):
        # h[i] is used to satisfy the condition that 
        # Si+1(xi+l) = Si(xi+l) for each i = 0,..,n-1
        # i.e., the values at the knots are "doubled up"
        h[i] = xn[i+1]-xn[i]  

    for i in range(1, n-1):
        # Sets up the linear system and allows us to find c.  Once we have 
        # c then b and d follow in terms of it.
        alpha[i] = (3./h[i])*(a[i+1]-a[i])-(3./h[i-1])*(a[i] - a[i-1])

    # I, II, (part of) III Sets up and solves tridiagonal linear system...
    # I   
    l[0] = 1      
    u[0] = 0      
    z[0] = 0

    # II
    for i in range(1, n-1):
        l[i] = 2*(xn[i+1] - xn[i-1]) - h[i-1]*u[i-1]
        u[i] = h[i]/l[i]
        z[i] = (alpha[i] - h[i-1]*z[i-1])/l[i]

    l[n] = 1
    z[n] = 0
    c[n] = 0

    # III... also find b, d in terms of c.
    for j in range(n-2, -1, -1):      
        c[j] = z[j] - u[j]*c[j+1]
        b[j] = (a[j+1] - a[j])/h[j] - h[j]*(c[j+1] + 2*c[j])/3.
        d[j] = (c[j+1] - c[j])/(3*h[j]) 

    # Now that we have the coefficients it's just a matter of constructing
    # the appropriate polynomials and graphing.
    for j in range(n-1):
        cub_graph(a[j],b[j],c[j],d[j],xn[j],xn[j+1])

    plt.show()

def cub_graph(a,b,c,d, x_i, x_i_1):
    """cub_graph takes the i'th coefficient set along with the x[i] and x[i+1]'th
       data pts, and constructs the polynomial spline between the two data pts using
       the poly1d python object (which simply returns a polynomial with a given root."""

    # notice here that we are just building the cubic polynomial piece by piece
    root = poly1d(x_i,True)
    poly = 0
    poly = d*(root)**3
    poly = poly + c*(root)**2
    poly = poly + b*root
    poly = poly + a

    # Set up our domain between data points, and plot the function
    pts = arange(x_i,x_i_1, 0.001)
    plt.plot(pts, poly(pts), '-')
    return
</snippet></ROW><ROW><id>9951458</id><snippet># These are our data points
x_vals = [0, 1./6, 1./3, 1./2, 7./12, 2./3, 3./4, 5./6, 11./12, 1]

# Set up the domain
x_domain = arange(0,2, 1e-2)

fx = zeroV(10)

# Defines the function so we can get our fx values
def sine_func(x):
    return(1.6*e**(-2*x)*sin(3*pi*x))

for i in range(len(x_vals)):
    fx[i] = sine_func(x_vals[i])

# Run cubic_spline interpolant.
cubic_spline(10,x_vals,fx)
</snippet></ROW><ROW><id>9951851</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.startfile(u'Pokémon.mp3')
</snippet></ROW><ROW><id>9951851</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; import locale
&gt;&gt;&gt; subprocess.Popen(u'Pokémon.mp3'.encode(locale.getpreferredencoding()),shell=True)
</snippet></ROW><ROW><id>9951851</id><snippet>cp437</snippet></ROW><ROW><id>9951851</id><snippet>cp1252</snippet></ROW><ROW><id>9951851</id><snippet>Popen</snippet></ROW><ROW><id>9951851</id><snippet>cp1252</snippet></ROW><ROW><id>9951851</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.Popen('Pokémon.mp3',shell=True)
</snippet></ROW><ROW><id>9951952</id><snippet>numpy.random.normal()</snippet></ROW><ROW><id>9951954</id><snippet>import bpdb</snippet></ROW><ROW><id>9951954</id><snippet>bpdb.set_trace()</snippet></ROW><ROW><id>9951954</id><snippet>pdb</snippet></ROW><ROW><id>9951954</id><snippet>bpython</snippet></ROW><ROW><id>9951954</id><snippet># The MIT License
#
# Copyright (c) 2008 Bob Farrell
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


import pdb
import bpython

class BPdb(pdb.Pdb):
    """ PDB with BPython support. """

    def __init__(self):
        pdb.Pdb.__init__(self)
        self.rcLines = []
        self.prompt = '(BPdb) '
        self.intro = 'Use "B" to enter bpython, Ctrl-d to exit it.'

    def postloop(self):
        # We only want to show the intro message once.
        self.intro = None
        pdb.Pdb.postloop(self)

    ### cmd.Cmd commands


    def do_Bpython(self, arg):
        bpython.embed(self.curframe.f_locals, ['-i'])


    def help_Bpython(self):
        print "B(python)"
        print
        print ("Invoke the bpython interpreter for this stack frame. To exit "
               "bpython and return to a standard pdb press Ctrl-d")


    ### shortcuts
    do_B = do_Bpython
    help_B = help_Bpython
</snippet></ROW><ROW><id>9951958</id><snippet>!!omap</snippet></ROW><ROW><id>9951958</id><snippet>&gt;&gt;&gt; yaml.load('''!!omap
... - a: foo
... - b: bar''')
[('a','foo'),('b','bar')]
</snippet></ROW><ROW><id>9951958</id><snippet>!!omap</snippet></ROW><ROW><id>9952168</id><snippet>OrderedDict</snippet></ROW><ROW><id>9952168</id><snippet>defaultdict</snippet></ROW><ROW><id>9952168</id><snippet>__init__</snippet></ROW><ROW><id>9952168</id><snippet>__missing__</snippet></ROW><ROW><id>9952168</id><snippet>defaultdict</snippet></ROW><ROW><id>9952168</id><snippet>__setitem__</snippet></ROW><ROW><id>9952168</id><snippet>__delitem__</snippet></ROW><ROW><id>9952168</id><snippet>__iter__</snippet></ROW><ROW><id>9952168</id><snippet>__init__</snippet></ROW><ROW><id>9952255</id><snippet>(?=foo)bar</snippet></ROW><ROW><id>9952255</id><snippet>(?!foo)foo</snippet></ROW><ROW><id>9952255</id><snippet>(?!42)\d\d # will match two digits that are not 42
</snippet></ROW><ROW><id>9952255</id><snippet>(?!02)[\da-f]{2} (?!0d)[\da-f]{2}
</snippet></ROW><ROW><id>9952255</id><snippet>(?!02 d0)[\da-f]{2} [\da-f]{2}
</snippet></ROW><ROW><id>9952263</id><snippet>re.search("(.*)\d{3,4}p").groups()[0]
</snippet></ROW><ROW><id>9952331</id><snippet>ORDER BY</snippet></ROW><ROW><id>9952331</id><snippet>LIMIT</snippet></ROW><ROW><id>9952331</id><snippet>DESC</snippet></ROW><ROW><id>9952331</id><snippet>SELECT * FROM &lt;yourtable&gt; ORDER BY &lt;timestampcol&gt; DESC LIMIT 10
</snippet></ROW><ROW><id>9952515</id><snippet>pygame.display.flip()</snippet></ROW><ROW><id>9952515</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>9952633</id><snippet>collections.Counter</snippet></ROW><ROW><id>9952633</id><snippet>&gt;&gt;&gt; collections.Counter(i[1] for i in L).most_common()
[(2, 2), (1, 1), (5, 1)]
</snippet></ROW><ROW><id>9952743</id><snippet>output = output + row[0]
</snippet></ROW><ROW><id>9952786</id><snippet>prodd.created.hour
</snippet></ROW><ROW><id>9952786</id><snippet>dir(prodd.created)</snippet></ROW><ROW><id>9953015</id><snippet>ls -la /home/me/dev/python/django/myapp/mylog.txt</snippet></ROW><ROW><id>9953090</id><snippet>main</snippet></ROW><ROW><id>9953090</id><snippet>vm = VirtualMemory(args['numFrames'], algo)</snippet></ROW><ROW><id>9953090</id><snippet>vm</snippet></ROW><ROW><id>9953090</id><snippet>vm</snippet></ROW><ROW><id>9953090</id><snippet>vm</snippet></ROW><ROW><id>9953090</id><snippet>vm</snippet></ROW><ROW><id>9953090</id><snippet>vm</snippet></ROW><ROW><id>9953090</id><snippet>from X import *</snippet></ROW><ROW><id>9953090</id><snippet>main</snippet></ROW><ROW><id>9953232</id><snippet>for</snippet></ROW><ROW><id>9953232</id><snippet>while</snippet></ROW><ROW><id>9953232</id><snippet>for (i=0; i&lt; n; i++) { ... }</snippet></ROW><ROW><id>9953232</id><snippet>for</snippet></ROW><ROW><id>9953232</id><snippet>i = 0
while i &lt; n:
   # do some actions using i
   i += 1

for i in range(n):
   # do some actions using i
</snippet></ROW><ROW><id>9953232</id><snippet>for</snippet></ROW><ROW><id>9953232</id><snippet>range(n)</snippet></ROW><ROW><id>9953232</id><snippet>range(n)</snippet></ROW><ROW><id>9953232</id><snippet>i</snippet></ROW><ROW><id>9953232</id><snippet>for i in range(0, len(list))</snippet></ROW><ROW><id>9953232</id><snippet>range(0, len(list))</snippet></ROW><ROW><id>9953232</id><snippet>len</snippet></ROW><ROW><id>9953232</id><snippet>range</snippet></ROW><ROW><id>9953232</id><snippet>len</snippet></ROW><ROW><id>9953232</id><snippet>range</snippet></ROW><ROW><id>9953248</id><snippet>def list_to_string(lst):
    return "\0".join(l) + "\0"

def string_to_list(s):
    return s.split("\0")[:-1]
</snippet></ROW><ROW><id>9953302</id><snippet>bpython.bat</snippet></ROW><ROW><id>9953302</id><snippet>PATH</snippet></ROW><ROW><id>9953302</id><snippet>@C:\cygwin\bin\bash.exe --login -c /usr/bin/bpython
</snippet></ROW><ROW><id>9953317</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; items = {'chai':1, 'apple':1, 'dom banana':1}
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k,v in items.iteritems():
        d[v].append(k)
&gt;&gt;&gt; {k:sorted(v) for k,v in d.iteritems()}
{1: ['apple', 'chai', 'dom banana']}
</snippet></ROW><ROW><id>9953451</id><snippet>fetchone()</snippet></ROW><ROW><id>9953451</id><snippet>None</snippet></ROW><ROW><id>9953451</id><snippet>=</snippet></ROW><ROW><id>9953451</id><snippet>is</snippet></ROW><ROW><id>9953451</id><snippet>SELECT messages FROM Status WHERE stamp = ?
</snippet></ROW><ROW><id>9953879</id><snippet># urls.py
url(r'^movetounknown/(?P&lt;notecard_id&gt;[\w|\W]+)/', notecard_move_to_unknown)

# views.py
@require_POST
def notecard_move_to_unknown(request, notecard_id):
    notecard = Notecard.objects.get(pk=notecard_id)
    notecard.known = False
    notecard.save()
    return HttpResponseRedirect(request.POST['next'])


# template
{% for notecard in known.object_list %}
    &lt;h1 class='notecard'&gt;{{ notecard.notecard_name }}&lt;/h1&gt;
    &lt;h3 class='notecard'&gt;{{ notecard.notecard_body }}&lt;/h3&gt;
    &lt;form action="{% url views.move_to_unknown notecard.pk %}" method="post"&gt;
        &lt;input type="hidden" name="next" value="{% url known_list known.section.section_name %}?page={{known.paginator.number}}"/&gt;
        &lt;input type="submit" value="Move to unknown list"/&gt;
    &lt;/form&gt;
{% endfor %}
</snippet></ROW><ROW><id>9953879</id><snippet>next</snippet></ROW><ROW><id>9953883</id><snippet>output</snippet></ROW><ROW><id>9953914</id><snippet>from datetime import timedelta
# custom save model
def save(self, *args, **kwargs):
    # figure out warranty end date
    if self.warranty_period_type == 'm':
        self.warranty_end_date = self.purchase_date + timedelta(days=self.warranty_period_number*31)
    else:
        self.warranty_end_date = self.purchase_date + timedelta(days=self.warranty_period_number*365.2425)
    super(Purchase, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>9953946</id><snippet>load_privatekey</snippet></ROW><ROW><id>9953946</id><snippet>id_rsa</snippet></ROW><ROW><id>9953946</id><snippet>OpenSSL.crypto</snippet></ROW><ROW><id>9953946</id><snippet>RSA</snippet></ROW><ROW><id>9953946</id><snippet>&gt;&gt;&gt; kt = open("samplePEMKey.pub").read()
&gt;&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt;&gt; key = RSA.import_key(kt)
&gt;&gt;&gt; key
&lt;_RSAobj @0x109916d40 n(2048),e&gt;
</snippet></ROW><ROW><id>9954255</id><snippet>arr = [[None for x in range(6)] for y in range(6)]
</snippet></ROW><ROW><id>9954255</id><snippet>arr[1][2] = 10</snippet></ROW><ROW><id>9954305</id><snippet>def rainbow_text(x,y,ls,lc,**kw):
    """
    Take a list of strings ``ls`` and colors ``lc`` and place them next to each
    other, with text ls[i] being shown in color lc[i].

    This example shows how to do both vertical and horizontal text, and will
    pass all keyword arguments to plt.text, so you can set the font size,
    family, etc.
    """
    t = plt.gca().transData
    fig = plt.gcf()

    #### note: this line moved down ....### 
    #plt.show()                           #
    #######################################
    #horizontal version
    for s,c in zip(ls,lc):
        text = plt.text(x,y," "+s+" ",color=c, transform=t, **kw)
        text.draw(fig.canvas.get_renderer())
        ex = text.get_window_extent()
        t = transforms.offset_copy(text._transform, x=ex.width, units='dots')

    #vertical version
    for s,c in zip(ls,lc):
        text = plt.text(x,y," "+s+" ",color=c, transform=t,
                rotation=90,va='bottom',ha='center',**kw)
        text.draw(fig.canvas.get_renderer())
        ex = text.get_window_extent()
        t = transforms.offset_copy(text._transform, y=ex.height, units='dots')

    t = plt.gca().transData
    fig = plt.gcf()
    plt.show() ############### when this is here, you can see that 
               ############### all unicorns poo rainbows ;-)

plt.figure()

rainbow_text(0.0,0.0,"all unicorns poop rainbows ! ! !".split(), 
        ['red', 'orange', 'brown', 'green', 'blue', 'purple', 'black'],
        size=30)
### worked on matplotlib version 1.1.0 on Debian Wheezy. Which version did you try?
</snippet></ROW><ROW><id>9954342</id><snippet>&gt;&gt;&gt; from itertools import islice, chain, repeat
&gt;&gt;&gt; food = {1: ['apple', 'chai', 'coffe', 'dom banana'], 2: ['pie', 'tea'], 3: ['bacon', 'pepsi'], 4: ['strawberry'], 5: ['egg'], 7: ['cake', 'ham'], 9: ['milk', 'mocha'], 10: ['pear'], 11: ['chicken', 'latte'], 13: ['coke'], 20: ['chocolate']}
&gt;&gt;&gt; list(islice(chain.from_iterable(repeat(k, len(v)) 
                                    for k, v in
                                    sorted(food.iteritems(), reverse=True)), 10))
[20, 13, 11, 11, 10, 9, 9, 7, 7, 5]
</snippet></ROW><ROW><id>9954425</id><snippet>image</snippet></ROW><ROW><id>9954425</id><snippet>file</snippet></ROW><ROW><id>9954425</id><snippet>ImageField</snippet></ROW><ROW><id>9954425</id><snippet>ImageField.file</snippet></ROW><ROW><id>9954425</id><snippet>TemporaryUploadedFile</snippet></ROW><ROW><id>9954425</id><snippet>IOError</snippet></ROW><ROW><id>9954425</id><snippet>image.seek(0)
</snippet></ROW><ROW><id>9954425</id><snippet>image_resizer</snippet></ROW><ROW><id>9954513</id><snippet>DateTimeField</snippet></ROW><ROW><id>9954513</id><snippet>datetime.datetime</snippet></ROW><ROW><id>9954513</id><snippet>DateField</snippet></ROW><ROW><id>9954513</id><snippet>datetime.date</snippet></ROW><ROW><id>9954513</id><snippet>datetime.time</snippet></ROW><ROW><id>9954513</id><snippet>replace</snippet></ROW><ROW><id>9954513</id><snippet>date</snippet></ROW><ROW><id>9954513</id><snippet>date</snippet></ROW><ROW><id>9954513</id><snippet>today</snippet></ROW><ROW><id>9954513</id><snippet>DateTimeField</snippet></ROW><ROW><id>9954564</id><snippet>from django.views.decorators.csrf import csrf_exempt                                          
@csrf_exempt
def view(request):
...
</snippet></ROW><ROW><id>9954737</id><snippet>#!/usr/bin/env python
#coding:utf8   
""" 
This PyGtk example shows two windows, the master and his dog. 
After master window moves or changes size, the dog window moves to always stay at its right border. 
This example should also account for variable thickness of the window border.
Public domain, Filip Dominec, 2012
"""

import sys, gtk

class Main: 
    def __init__(self):
        self.window1 = gtk.Window(); self.window1.set_title("Master")
        self.window2 = gtk.Window(); self.window2.set_title("Dog")

        self.window1.connect('configure_event', self.on_window1_configure_event) # move master -&gt; move dog
        self.window1.connect('destroy', lambda w: gtk.main_quit()) # close master -&gt; end program

        self.window1.show_all()
        self.window2.show_all()

    def on_window1_configure_event(self, *args):
        print "Window 1 moved!"
        x, y   = self.window1.get_position()
        sx, sy = self.window1.get_size()
        tx = self.window1.get_style().xthickness
        self.window2.move(x+sx+2*tx,y)

MainInstance = Main()       
gtk.main()                 
</snippet></ROW><ROW><id>9954964</id><snippet>write_private_key()</snippet></ROW><ROW><id>9954964</id><snippet>key</snippet></ROW><ROW><id>9954964</id><snippet>import STringIO
out = StringIO.StringIO()
key.write_private_key(out)
print out.getvalue()
</snippet></ROW><ROW><id>9955722</id><snippet># This SConstruct orchestrates building 3 subdirs

import os

subdirs = ['libfoo_subrepo', 'barapp_subrepo', 'test']
env = Environment()

for dir in subdirs:
    SConscript(os.path.join(dir, 'SConscript'), exports = ['env'])
</snippet></ROW><ROW><id>9955722</id><snippet># This SConstruct does nothing more than load the SConscript in this dir
# The Environment() is created in the SConstruct script
# This dir can be built standalone by executing scons here, or together
# by executing scons in the parent directory
env = Environment()
SConscript('SConscript', exports = ['env'])
</snippet></ROW><ROW><id>9955722</id><snippet># This SConstruct orchestrates building 2 subdirs
import os

Import('env')
subdirs = ['src', 'test']

for dir in subdirs:
    SConscript(os.path.join(dir, 'SConscript'), exports = ['env'])
</snippet></ROW><ROW><id>9955722</id><snippet># This SConstruct does nothing more than load the SConscript in this dir
# The Environment() is created in the SConstruct script
# This dir can be build standalone by executing scons here, or together
# by executing scons in the parent directory
env = Environment()
SConscript('SConscript', exports = ['env'])
</snippet></ROW><ROW><id>9955722</id><snippet># This SConstruct orchestrates building 2 subdirs
import os

Import('env')
subdirs = ['src', 'test']

for dir in subdirs:
    SConscript(os.path.join(dir, 'SConscript'), exports = ['env'])
</snippet></ROW><ROW><id>9955769</id><snippet>&gt;&gt;&gt; def recur_len(l):
        return sum(1 + recur_len(item) if isinstance(item,list) else 1 for item in l)

&gt;&gt;&gt; recur_len([[[[[[[[1, 2, 3]]]]]]]])
10
</snippet></ROW><ROW><id>9955769</id><snippet>&gt;&gt;&gt; def recur_len(l):
        count = 0
        for item in l:
            if isinstance(item,list):
                count += 1 + recur_len(item)
            else:
                count += 1
        return count

&gt;&gt;&gt; recur_len([[[[[[[[1, 2, 3]]]]]]]])
10
</snippet></ROW><ROW><id>9955857</id><snippet>return render_to_response('mainapp/templates/incorporate.html',
                          RequestContext(request, form_params))
</snippet></ROW><ROW><id>9955857</id><snippet>retval = render_to_response('mainapp/templates/incorporate.html',
                                      RequestContext(request, form_params))
transaction.commit()
return retval
</snippet></ROW><ROW><id>9955882</id><snippet>class X(object):
    def get_y(self):
        return self.y
</snippet></ROW><ROW><id>9955882</id><snippet>y</snippet></ROW><ROW><id>9955882</id><snippet>get_y</snippet></ROW><ROW><id>9955882</id><snippet>class X(object):
    def get_y(self):
        return self.y

    @property
    def y(self):
        return self.get_y()
</snippet></ROW><ROW><id>9955882</id><snippet>'l1_s_logcount': property(lambda self: self._get_l1_logcount()),
</snippet></ROW><ROW><id>9955882</id><snippet>'l1_s_logcount': property(lambda self: numpy.log10(self.l1_normalized)),
</snippet></ROW><ROW><id>9955931</id><snippet>string.Template</snippet></ROW><ROW><id>9955931</id><snippet>from string import Template
s = Template('SELECT * FROM $table_name WHERE $condition')
s.safe_substitute(table_name='users')

'SELECT * FROM users WHERE $condition'
</snippet></ROW><ROW><id>9955931</id><snippet>def myformat(s, *args, **kwargs):
  while True:
    try:
      return s.format(*args, **kwargs)
    except KeyError as e:
      e=e.args[0]
      kwargs[e] = "{%s}" % e

s = "SELECT * FROM {table_name} WHERE {condition}" 
myformat(s, table_name="users")

'SELECT * FROM users WHERE {condition}'
</snippet></ROW><ROW><id>9956364</id><snippet>a = 0
b = 0
c = 0

while a &lt;= 5:
    while b &lt;=3:
        while c &lt;= 8:
            print a , b , c
            c += 1
        b += 1
        c = 0 # reset
    a += 1
    b = 0 # reset
    c = 0 # reset
</snippet></ROW><ROW><id>9956364</id><snippet>for</snippet></ROW><ROW><id>9956364</id><snippet>xrange</snippet></ROW><ROW><id>9956364</id><snippet>for a in xrange(5+1): # Note xrange(n) produces 0,1,2...(n-1) and does not include n.
    for b in xrange (3+1):
        for c in xrange (8+1):
            print a,b,c
</snippet></ROW><ROW><id>9956364</id><snippet>xrange</snippet></ROW><ROW><id>9956364</id><snippet>range</snippet></ROW><ROW><id>9956364</id><snippet>range</snippet></ROW><ROW><id>9956364</id><snippet>range</snippet></ROW><ROW><id>9956364</id><snippet>xrange</snippet></ROW><ROW><id>9956364</id><snippet>itertools.product()</snippet></ROW><ROW><id>9956364</id><snippet>import itertools
for a,b,c in itertools.product(xrange(5+1),xrange(3+1),xrange(8+1)):
    print a,b,c
</snippet></ROW><ROW><id>9956673</id><snippet>import sys

class Borg(object):
    __shared_state = {}
    def __init__(self, nombre):
        self.__dict__ = self.__shared_state
        self.nombre = nombre 

    def instance_method_1(self):
        print 'my instance vr::', self.nombre
        panga = 'pangas'
        print 'te copio con  ' 
        print panga
        print self.nombre


pingus = Borg('varString')


print pingus.nombre
pingus.instance_method_1()
</snippet></ROW><ROW><id>9956813</id><snippet>pip install wsgiref boto
</snippet></ROW><ROW><id>9956813</id><snippet>pip install --help</snippet></ROW><ROW><id>9956813</id><snippet>  -r FILENAME, --requirement=FILENAME
                        Install all the packages listed in the given
                        requirements file.  This option can be used multiple
                        times.
</snippet></ROW><ROW><id>9956813</id><snippet>pip freeze</snippet></ROW><ROW><id>9956813</id><snippet>wsgiref</snippet></ROW><ROW><id>9956813</id><snippet>boto</snippet></ROW><ROW><id>9956813</id><snippet>$ pip freeze
boto==2.3.0
wsgiref==0.1.2
</snippet></ROW><ROW><id>9957318</id><snippet>urllib</snippet></ROW><ROW><id>9957318</id><snippet>import urllib2
url = 'https://graph.facebook.com/oauth/access_token?client_id=%(id)s&amp;redirect_uri=http://127.0.0.1:8000/facebook/return&amp;client_secret=%(secret)s&amp;code=%(code)s'%{'id':fb_id,'secret':fb_s,'code':code}
response = urllib2.urlopen(url)
html = response.read()
</snippet></ROW><ROW><id>9957318</id><snippet>import simplejson
json = response.read()
dict = simplejson.load(json) 
</snippet></ROW><ROW><id>9957385</id><snippet>"message"</snippet></ROW><ROW><id>9957385</id><snippet>"message"</snippet></ROW><ROW><id>9957385</id><snippet>message = '''&lt;div class="content"&gt;Message text here.&lt;img src="image.gif" border="0" alt="" title="laugh out loud" class="inlineimg" /&gt;&lt;/div&gt;'''
</snippet></ROW><ROW><id>9957403</id><snippet>Time.tolist().total_seconds()
</snippet></ROW><ROW><id>9957662</id><snippet>name</snippet></ROW><ROW><id>9957662</id><snippet>empty_permitted</snippet></ROW><ROW><id>9957662</id><snippet>empty_permitted</snippet></ROW><ROW><id>9957940</id><snippet>def start(...):
   self.lexer = self.scan()

def token(...):
    return next(self.lexer)
</snippet></ROW><ROW><id>9958118</id><snippet>re.split("[^-\w]+", "fat-free milk")
</snippet></ROW><ROW><id>9958201</id><snippet>&gt;&gt;&gt;lis = ["foo", "foo", "bar"]
&gt;&gt;&gt;lis=list(set(lis))
&gt;&gt;&gt;print(lis)
['foo','bar']
</snippet></ROW><ROW><id>9958534</id><snippet>numpy</snippet></ROW><ROW><id>9958534</id><snippet>&gt;&gt;&gt; a1 = ['a','b']
&gt;&gt;&gt; a2 = ['E','F']
&gt;&gt;&gt; map(''.join, zip(a1, a2))
['aE', 'bF']
</snippet></ROW><ROW><id>9958627</id><snippet>replace_dic</snippet></ROW><ROW><id>9958627</id><snippet>class ComposerCorrection(models.Model):
    wrong_name = models.CharField(max_length=100, unique=True)
    canonical_name = models.CharField(max_length=100)

def correct_name(name):
    try:
        return ComposerCorrection.objects.get(wrong_name=name).canonical_name
    except ComposerCorrection.DoesNotExist:
        return name
</snippet></ROW><ROW><id>9958627</id><snippet>correct_name</snippet></ROW><ROW><id>9958627</id><snippet>save()</snippet></ROW><ROW><id>9958627</id><snippet>Composer</snippet></ROW><ROW><id>9958627</id><snippet>correctComposer</snippet></ROW><ROW><id>9958627</id><snippet>ComposerCorrection</snippet></ROW><ROW><id>9958783</id><snippet>CoolClass</snippet></ROW><ROW><id>9958783</id><snippet>def my_safe_method(*args):
    my_cool_object = CoolClass()
    my_cool_object.populate_from_stuff(*args)
    return my_cool_object.result()
</snippet></ROW><ROW><id>9958783</id><snippet>get_cool_inst</snippet></ROW><ROW><id>9958783</id><snippet>def my_suspicious_method(*args):
    my_cool_object = somewhere.get_cool_inst()
    my_cool_object.populate_from_stuff(*args)
    # another thread received the same instance
    # and modified it
    # (my_cool_object is still local, but it's a reference to a shared object)
    return my_cool_object.result()
</snippet></ROW><ROW><id>9958783</id><snippet>publish</snippet></ROW><ROW><id>9958783</id><snippet>def my_suspicious_method(*args):
    my_cool_object = CoolClass()
    # puts somewhere into global namespace, other threads access it
    publish(my_cool_object) 
    my_cool_object.prepare(*args)
    # another thread modifies it now
    return my_cool_object.result()
</snippet></ROW><ROW><id>9958783</id><snippet>@staticmethod</snippet></ROW><ROW><id>9958789</id><snippet>s = '"Hello", said he.'
print s.replace('"', r'\"')

# output
\"Hello\", said he.
</snippet></ROW><ROW><id>9958789</id><snippet>r''</snippet></ROW><ROW><id>9958859</id><snippet>def schema(x):
    if x == 'M':
        step=1
    else:
        step=2
        return step
</snippet></ROW><ROW><id>9958859</id><snippet>def schema(x):
    if x == 'M':
        step=1
    else:
        step=2
    return step
</snippet></ROW><ROW><id>9958859</id><snippet>None</snippet></ROW><ROW><id>9958859</id><snippet>x == 'M'</snippet></ROW><ROW><id>9958859</id><snippet>def schema(x):
    return 1 if x == 'M' else 2
</snippet></ROW><ROW><id>9958935</id><snippet>&gt;&gt;&gt; map(str, [0,33,4444522])
['0', '33', '4444522']
</snippet></ROW><ROW><id>9958935</id><snippet>&gt;&gt;&gt; a = np.array([0,33,4444522])
&gt;&gt;&gt; np.array(map(str, a))
array(['0', '33', '4444522'], 
      dtype='|S7')
</snippet></ROW><ROW><id>9958936</id><snippet>r"object has no attribute '([^']+)'"</snippet></ROW><ROW><id>9958936</id><snippet>getattr</snippet></ROW><ROW><id>9958936</id><snippet>varname = 'baz'; print getattr(Foo(), varname)</snippet></ROW><ROW><id>9958936</id><snippet>varname</snippet></ROW><ROW><id>9958952</id><snippet>numpy.fill_diagonal</snippet></ROW><ROW><id>9959354</id><snippet>event = pygame.event.poll()
</snippet></ROW><ROW><id>9959354</id><snippet>if event.type == pygame.QUIT:
    sys.exit()
</snippet></ROW><ROW><id>9959354</id><snippet>import pygame
pink = (255, 64, 64)
w = 640
h = 480
ud = 0
ld = 0
screen = pygame.display.set_mode((w, h))
running = 1
def key_event(event):
    global ud
    if event.key == pygame.K_UP:
        ud -= 10
        print 'ud',ud           

def setup_background():
    screen.fill((pink))

while running:

    setup_background()
    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
             running = False
        elif event.type == pygame.KEYDOWN:
             key_event(event)
</snippet></ROW><ROW><id>9959486</id><snippet>./configure ...</snippet></ROW><ROW><id>9959486</id><snippet>checking for tgetent in -lncurses... yes
</snippet></ROW><ROW><id>9959486</id><snippet>configure</snippet></ROW><ROW><id>9959486</id><snippet>src/auto/config.log</snippet></ROW><ROW><id>9959486</id><snippet>configure:9777: checking for tgetent in -lncurses
configure:9802: gcc -o conftest.exe -g -O2   -L/usr/local/lib conftest.c -lncurses  -lelf   &gt;&amp;5
configure:9802: $? = 0
configure:9812: result: yes
</snippet></ROW><ROW><id>9959486</id><snippet>-lncurses</snippet></ROW><ROW><id>9959486</id><snippet>/usr/lib/libncurses.</snippet></ROW><ROW><id>9959486</id><snippet>.a</snippet></ROW><ROW><id>9959486</id><snippet>.so</snippet></ROW><ROW><id>9959486</id><snippet>.dll</snippet></ROW><ROW><id>9959486</id><snippet>cygcheck</snippet></ROW><ROW><id>9959486</id><snippet>$ ls /usr/lib/libncurses.*
/usr/lib/libncurses.a  /usr/lib/libncurses.dll.a  /usr/lib/libncurses.la
$ cygcheck -f /usr/lib/libncurses.*
libncurses-devel-5.7-18
libncurses-devel-5.7-18
libncurses-devel-5.7-18
</snippet></ROW><ROW><id>9959486</id><snippet>libncurses-devel</snippet></ROW><ROW><id>9959486</id><snippet>setup.exe</snippet></ROW><ROW><id>9959526</id><snippet>import Tkinter as tk

def analyze(event=None):
    content = entry_contents.get()
    if content == "":
        entry_contents.set("default")

lord = tk.Tk()

entry_contents = tk.StringVar()
aEntry = tk.Entry(lord, textvariable=entry_contents)
aEntry.grid()

aText = tk.Text(lord, font=("Georgia", "12"))
aText.grid()

aEntry.bind("&lt;FocusOut&gt;", analyze)

lord.mainloop()
</snippet></ROW><ROW><id>9959526</id><snippet>import Tkinter as tk

def analyze(event=None):
    content = aEntry.get()
    if content == "":
        aEntry.insert(0, "default")

lord = tk.Tk()

aEntry = tk.Entry(lord)
aEntry.grid()

aText = tk.Text(lord, font=("Arial", "12", "bold"))
aText.grid()

aEntry.bind("&lt;FocusOut&gt;", analyze)

lord.mainloop()
</snippet></ROW><ROW><id>9959611</id><snippet>dependent</snippet></ROW><ROW><id>9959611</id><snippet>val</snippet></ROW><ROW><id>9959611</id><snippet>_val_changed</snippet></ROW><ROW><id>9959611</id><snippet>val</snippet></ROW><ROW><id>9959625</id><snippet>cd</snippet></ROW><ROW><id>9959625</id><snippet>.bat</snippet></ROW><ROW><id>9959625</id><snippet>.bat</snippet></ROW><ROW><id>9959678</id><snippet>return int(float(value) / float(total) * 100.0)
</snippet></ROW><ROW><id>9959699</id><snippet>shutil</snippet></ROW><ROW><id>9959699</id><snippet>copytree()</snippet></ROW><ROW><id>9959699</id><snippet>shutil.py</snippet></ROW><ROW><id>9959699</id><snippet>/usr/local/python2.6/shutil.py</snippet></ROW><ROW><id>9959699</id><snippet>shutil.py</snippet></ROW><ROW><id>9959699</id><snippet>def copytree(src, dst, symlinks=False, ignore=None):
</snippet></ROW><ROW><id>9959699</id><snippet>def moveWithIgnore(src, ...</snippet></ROW><ROW><id>9959699</id><snippet>move2(..)</snippet></ROW><ROW><id>9959699</id><snippet>shutils.py</snippet></ROW><ROW><id>9959699</id><snippet>(src, dst)</snippet></ROW><ROW><id>9959699</id><snippet>move()</snippet></ROW><ROW><id>9959699</id><snippet>(src, dst)</snippet></ROW><ROW><id>9959699</id><snippet>copy2</snippet></ROW><ROW><id>9959699</id><snippet>move</snippet></ROW><ROW><id>9959699</id><snippet>moveWithIgnore</snippet></ROW><ROW><id>9959699</id><snippet>copytree()</snippet></ROW><ROW><id>9959917</id><snippet>for key, value in log:
    my_dict[key].append(value)
</snippet></ROW><ROW><id>9959917</id><snippet>dict</snippet></ROW><ROW><id>9959917</id><snippet>my_dict</snippet></ROW><ROW><id>9959946</id><snippet>{"param1" =&gt; "value1", "param2"=&gt;"value2"}</snippet></ROW><ROW><id>9959946</id><snippet>uri = URI('http://www.example.com/search.cgi')
res = Net::HTTP.post_form(uri, 'q' =&gt; 'ruby', 'max' =&gt; '50')
puts res.body
</snippet></ROW><ROW><id>9959946</id><snippet>uri = URI('http://www.example.com/search.cgi')
res = Net::HTTP.post_form(uri, 'q' =&gt; ['ruby', 'perl'], 'max' =&gt; '50')
puts res.body
</snippet></ROW><ROW><id>9960066</id><snippet>twisted.python.rebuild</snippet></ROW><ROW><id>9960066</id><snippet>__class__</snippet></ROW><ROW><id>9960066</id><snippet>rebuild</snippet></ROW><ROW><id>9960066</id><snippet>Sensitive</snippet></ROW><ROW><id>9960066</id><snippet>rebuild</snippet></ROW><ROW><id>9960066</id><snippet>if needRebuildUpdate...</snippet></ROW><ROW><id>9960066</id><snippet>x()</snippet></ROW><ROW><id>9960066</id><snippet>from twisted.python.rebuild import rebuild, Sensitive
from twisted.python.filepath import FilePath

p = FilePath("mymodule.py")
def clearcache():
    bytecode = p.sibling("mymodule.pyc")
    if bytecode.exists():
        bytecode.remove()
clearcache()
p.setContent("def x(): return 1")
import mymodule
from mymodule import x
p.setContent("def x(): return 2")

class Something(Sensitive, object):
    def __init__(self):
        self.stuff = {"something": x}
    def invoke(self):
        if self.needRebuildUpdate():
            for key in list(self.stuff):
                self.stuff[key] = self.latestVersionOf(self.stuff[key])
            self.rebuildUpToDate()
        return self.stuff["something"]()

def test():
    print s.invoke()
    print x()

s = Something()
test()

clearcache()
rebuild(mymodule)

test()
</snippet></ROW><ROW><id>9960085</id><snippet>virConnect</snippet></ROW><ROW><id>9960085</id><snippet>virConnect</snippet></ROW><ROW><id>9960085</id><snippet>virConnect</snippet></ROW><ROW><id>9960085</id><snippet>domainXMLToNative</snippet></ROW><ROW><id>9960329</id><snippet>\begin{Verbatim}</snippet></ROW><ROW><id>9960329</id><snippet>fancyvrb</snippet></ROW><ROW><id>9960329</id><snippet>formatcom</snippet></ROW><ROW><id>9960329</id><snippet>verboptions</snippet></ROW><ROW><id>9960329</id><snippet>LatexFormatter</snippet></ROW><ROW><id>9960329</id><snippet>conf.py</snippet></ROW><ROW><id>9960329</id><snippet>from sphinx.highlighting import PygmentsBridge
from pygments.formatters.latex import LatexFormatter

class CustomLatexFormatter(LatexFormatter):
    def __init__(self, **options):
        super(CustomLatexFormatter, self).__init__(**options)
        self.verboptions = r"formatcom=\footnotesize"

PygmentsBridge.latex_formatter = CustomLatexFormatter
</snippet></ROW><ROW><id>9960329</id><snippet>\footnotesize</snippet></ROW><ROW><id>9960426</id><snippet>python -c "import setuptools; execfile('setup.py')" bdist_egg</snippet></ROW><ROW><id>9960596</id><snippet>enumerate(v)</snippet></ROW><ROW><id>9960596</id><snippet>lambda x,y: max(x[1],y[1])</snippet></ROW><ROW><id>9960596</id><snippet>x</snippet></ROW><ROW><id>9960596</id><snippet>y</snippet></ROW><ROW><id>9960596</id><snippet>max</snippet></ROW><ROW><id>9960596</id><snippet>x[1]</snippet></ROW><ROW><id>9960596</id><snippet>x</snippet></ROW><ROW><id>9960695</id><snippet>Queue</snippet></ROW><ROW><id>9960695</id><snippet>EventBus</snippet></ROW><ROW><id>9960695</id><snippet>Queue</snippet></ROW><ROW><id>9960752</id><snippet>_</snippet></ROW><ROW><id>9960752</id><snippet>[[0]*self.N for _ in range(self.N)]
</snippet></ROW><ROW><id>9960752</id><snippet>[0]*size</snippet></ROW><ROW><id>9960752</id><snippet>0</snippet></ROW><ROW><id>9960752</id><snippet>range</snippet></ROW><ROW><id>9960752</id><snippet>def make_multi_list(dim, func):
  if not dim: return func()
  return [make_multi_list(dim[1:], func) for _ in range(dim[0])]
</snippet></ROW><ROW><id>9960752</id><snippet>&gt;&gt;&gt; make_multi_list((2, 2), lambda: 0)
[[0, 0], [0, 0]]
&gt;&gt;&gt; make_multi_list((3, 2, 1), lambda: 0)
[[[0], [0]], [[0], [0]], [[0], [0]]]
</snippet></ROW><ROW><id>9960758</id><snippet>strptime</snippet></ROW><ROW><id>9960758</id><snippet>%z</snippet></ROW><ROW><id>9960758</id><snippet>+HHMM</snippet></ROW><ROW><id>9960758</id><snippet>-HHMM</snippet></ROW><ROW><id>9960758</id><snippet>datetime.strftime</snippet></ROW><ROW><id>9960758</id><snippet>strptime</snippet></ROW><ROW><id>9960758</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>9960758</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>9960758</id><snippet>import datetime

tz = "+10:00"

def tz_to_timedelta(tz):
    min = datetime.datetime.strptime('', '')
    try:
        return -(datetime.datetime.strptime(tz,"-%H:%M") - min)
    except ValueError:
        return datetime.datetime.strptime(tz,"+%H:%M") - min

print tz_to_timedelta(tz)
</snippet></ROW><ROW><id>9960758</id><snippet>:</snippet></ROW><ROW><id>9960758</id><snippet>%z</snippet></ROW><ROW><id>9960758</id><snippet>import time
tz = "+10:00"
tz_toconvert = tz[:3] + tz[4:]
tz_struct_time = time.strptime(tz_toconvert, "%z")
</snippet></ROW><ROW><id>9960784</id><snippet>namedtuple</snippet></ROW><ROW><id>9960784</id><snippet>namedtuple</snippet></ROW><ROW><id>9960793</id><snippet>class myprogram(object):
    def __init__(self)
        self.prepare()
    def prepare(self):
        # some initializations
        self.prepareCommands()
    def prepareCommands(self):
        self.initCommand("--updateDatabase", self.updateDatabase)
        self.initCommand("--getImages", self.getImages)
        # and so on
    def initCommand(self, cmd, func):
        options = sys.argv
        for option in options:
            if option.find(cmd)!=-1:
                return func()
    # my commands
    def updateDatabase(self):
        #...
    def getImages(self):
        #...
if __name__ == "__main__":
    p = myprogram()
</snippet></ROW><ROW><id>9960793</id><snippet>from config import * # has settings
from commands import *

from logsys import log
import filesys

class myprogram(object):
    def __init__(self):
        log(_class=self.__name__, _func='__init__', _level=0)
        log(_class=self.__name__, _func='__init__',  text="DEBUG LEVEL %s" % settings["debug"], _level=0)
        self.settings = settings
        self.cmds = commands
    def prepare(self):
        log(_class=self.__name__, _func='prepare', _level=1)
        self.dirs = {}
        for key in settings["dir"].keys():
            self.dirs[key] = settings["dir"][key]
            filesys.checkDir(self.dirs[key])

    def initCommands(self):
        log(_class=self.__name__, _func='initCommands', _level=1)
        options = sys.argv
        for option in options:
            for cmd in self.cmds.keys():
                if option.find(cmd) != -1:
                    return self.cmds[cmd]()


if __name__ == '__main__':    
    p = myprogram()
    p.prepare()
    p.initCommands()
</snippet></ROW><ROW><id>9960793</id><snippet>    #!/usr/bin/env python
# -*- coding: utf-8 -*-



commands = {}
#csv
import csvsys
commands["--getCSV"] = csvsys.getCSV
#commands["--getCSVSplitted"] = csvsys.getCSVSplitted



# update &amp; insert
import database
commands["--insertProductSpecification"] = database.insertProductSpecification


# download
import download
commands["--downloadProductSites"] = download.downloadProductSites
commands["--downloadImages"] = download.downloadImages

# parse
import parse
commands["--parseProductSites"] = parse.parseProductSites
</snippet></ROW><ROW><id>9960932</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; s = 'something to hash'
&gt;&gt;&gt; hashlib.md5(s)
&lt;md5 HASH object @ 0xb7714ca0&gt;
&gt;&gt;&gt; hashlib.md5(s).hexdigest()
'6f4815fdf1f1fd3f36ac295bf39d26b4'
&gt;&gt;&gt; hashlib.sha1(s).hexdigest()
'72668bc961b0a78bfa1633f6141bcea69ca37468'
</snippet></ROW><ROW><id>9961095</id><snippet>&gt;&gt;&gt; m = max(map(hello.count, hello))
&gt;&gt;&gt; set(x for x in hello if hello.count(x) == m)
set(['1', '2'])
</snippet></ROW><ROW><id>9961095</id><snippet>Counter</snippet></ROW><ROW><id>9961095</id><snippet>&gt;&gt;&gt; hello = ['1', '1', '2', '1', '2', '2', '7']
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(hello)
&gt;&gt;&gt; c
Counter({'1': 3, '2': 3, '7': 1})
&gt;&gt;&gt; common = c.most_common()
&gt;&gt;&gt; common
[('1', 3), ('2', 3), ('7', 1)]
</snippet></ROW><ROW><id>9961095</id><snippet>&gt;&gt;&gt; set(x for x, count in common if count == common[0][1])
set(['1', '2'])
</snippet></ROW><ROW><id>9961107</id><snippet>Decimal(str((2/9))
</snippet></ROW><ROW><id>9961107</id><snippet>Decimal(str(2/9))
</snippet></ROW><ROW><id>9961107</id><snippet>)</snippet></ROW><ROW><id>9961107</id><snippet>from __future__ import division
from decimal import *

getcontext().prec = 2

list_a = ['abc','def','ghi']
list_b = [123, 534, 345]
list_c = [Decimal(str(1/6)), Decimal(str(1/1234)), Decimal(str(2/9))]
for r,c,p in zip(list_a, list_b, list_c):
  print '{0} goes with {1} and with {2:.2f}%.'.format(r,c,p)
</snippet></ROW><ROW><id>9961405</id><snippet>tornado.web.Application()</snippet></ROW><ROW><id>9961405</id><snippet>debug=True</snippet></ROW><ROW><id>9961435</id><snippet>after</snippet></ROW><ROW><id>9961435</id><snippet>bindtag</snippet></ROW><ROW><id>9961435</id><snippet>tag_remove</snippet></ROW><ROW><id>9961598</id><snippet>while running:
    keys = pygame.key.get_pressed()  #checking pressed keys
    if keys[pygame.K_UP]:
        y1 -= 1
    if keys[pygame.K_DOWN]:
        y1 += 1
</snippet></ROW><ROW><id>9962043</id><snippet>property</snippet></ROW><ROW><id>9962043</id><snippet>Silly</snippet></ROW><ROW><id>9962043</id><snippet>object</snippet></ROW><ROW><id>9962043</id><snippet>class Silly(object):
    @property
    def silly(self):
        # ...
    # ...
</snippet></ROW><ROW><id>9962156</id><snippet>list_locked_files</snippet></ROW><ROW><id>9962156</id><snippet>rmtree()</snippet></ROW><ROW><id>9962301</id><snippet>done = [(el, x) for el in [a, b, c, d]]
</snippet></ROW><ROW><id>9962588</id><snippet>#!/usr/bin/python

def interact():
    fn = raw_input("Enter a filename: ")
    return fn

def load_maze(fn):
    myfile = open(fn)
    maze_txt = myfile.read()
    myfile.close()
    return maze_txt

print load_maze(interact())
</snippet></ROW><ROW><id>9962885</id><snippet>pdb.gimp_message('This is displayed as a message')
</snippet></ROW><ROW><id>9962885</id><snippet>pdb.gimp_progress_set_text('This goes to the status bar')
</snippet></ROW><ROW><id>9963031</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>9963031</id><snippet>static</snippet></ROW><ROW><id>9963031</id><snippet>settings.py</snippet></ROW><ROW><id>9963031</id><snippet>settings.py</snippet></ROW><ROW><id>9963031</id><snippet>STATIC_ROOT = '/var/www/localhost/htdocs/mysite/static/'
STATIC_URL = '/static/' # default
</snippet></ROW><ROW><id>9963031</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>9963031</id><snippet>/var/www/localhost/htdocs/mysite/</snippet></ROW><ROW><id>9963031</id><snippet>python manage.py collectstatic -l</snippet></ROW><ROW><id>9963031</id><snippet>-l</snippet></ROW><ROW><id>9963031</id><snippet>httpd.conf</snippet></ROW><ROW><id>9963031</id><snippet>STATIC_URL</snippet></ROW><ROW><id>9963031</id><snippet>Alias /static/ /var/www/localhost/htdocs/mysite/static/
#In the form of...
#Alias STATIC_URL STATIC_ROOT

&lt;Directory /var/www/localhost/htdocs/mysite/static&gt;
    Order deny,allow
    Allow from all
&lt;/Directory&gt;

WSGIScriptAlias / /var/www/localhost/htdocs/mysite/mysite/wsgi.py
WSGIPythonPath /var/www/localhost/htdocs/mysite

&lt;Directory /var/www/localhost/htdocs/mysite/mysite&gt;
    &lt;Files wsgi.py&gt;
        Order deny,allow
        Allow from all
    &lt;/Files&gt;
&lt;/Directory&gt;
</snippet></ROW><ROW><id>9963324</id><snippet>open('/tmp/lista.txt', 'r')
</snippet></ROW><ROW><id>9963324</id><snippet>open('tmp/lista.txt', 'r')
</snippet></ROW><ROW><id>9963552</id><snippet>dis.dis</snippet></ROW><ROW><id>9963552</id><snippet>dis.dis</snippet></ROW><ROW><id>9963552</id><snippet>yield</snippet></ROW><ROW><id>9963552</id><snippet>dis.dis</snippet></ROW><ROW><id>9963552</id><snippet>import types
from opcode import *
_have_code = (types.MethodType, types.FunctionType, types.CodeType,
              types.ClassType, type)

def dis(x):
    """Disassemble classes, methods, functions, or code.

    With no argument, disassemble the last traceback.

    """
    if isinstance(x, types.InstanceType):
        x = x.__class__
    if hasattr(x, 'im_func'):
        x = x.im_func
    if hasattr(x, 'func_code'):
        x = x.func_code
    if hasattr(x, '__dict__'):
        items = x.__dict__.items()
        items.sort()
        for name, x1 in items:
            if isinstance(x1, _have_code):
                print &gt;&gt; out,  "Disassembly of %s:" % name
                try:
                    dis(x1)
                except TypeError, msg:
                    print &gt;&gt; out,  "Sorry:", msg
                print &gt;&gt; out
    elif hasattr(x, 'co_code'):
        disassemble(x)
    elif isinstance(x, str):
        disassemble_string(x)
    else:
        raise TypeError, \
              "don't know how to disassemble %s objects" % \
              type(x).__name__

def disassemble(co, lasti=-1):
    """Disassemble a code object."""
    code = co.co_code
    labels = findlabels(code)
    linestarts = dict(findlinestarts(co))
    n = len(code)
    i = 0
    extended_arg = 0
    free = None
    while i &lt; n:
        c = code[i]
        op = ord(c)
        if i in linestarts:
            if i &gt; 0:
                print &gt;&gt; out
            print &gt;&gt; out,  "%3d" % linestarts[i],
        else:
            print &gt;&gt; out,  '   ',

        if i == lasti: print &gt;&gt; out,  '--&gt;',
        else: print &gt;&gt; out,  '   ',
        if i in labels: print &gt;&gt; out,  '&gt;&gt;',
        else: print &gt;&gt; out,  '  ',
        print &gt;&gt; out,  repr(i).rjust(4),
        print &gt;&gt; out,  opname[op].ljust(20),
        i = i+1
        if op &gt;= HAVE_ARGUMENT:
            oparg = ord(code[i]) + ord(code[i+1])*256 + extended_arg
            extended_arg = 0
            i = i+2
            if op == EXTENDED_ARG:
                extended_arg = oparg*65536L
            print &gt;&gt; out,  repr(oparg).rjust(5),
            if op in hasconst:
                print &gt;&gt; out,  '(' + repr(co.co_consts[oparg]) + ')',
            elif op in hasname:
                print &gt;&gt; out,  '(' + co.co_names[oparg] + ')',
            elif op in hasjrel:
                print &gt;&gt; out,  '(to ' + repr(i + oparg) + ')',
            elif op in haslocal:
                print &gt;&gt; out,  '(' + co.co_varnames[oparg] + ')',
            elif op in hascompare:
                print &gt;&gt; out,  '(' + cmp_op[oparg] + ')',
            elif op in hasfree:
                if free is None:
                    free = co.co_cellvars + co.co_freevars
                print &gt;&gt; out,  '(' + free[oparg] + ')',
        print &gt;&gt; out

def disassemble_string(code, lasti=-1, varnames=None, names=None,
                       constants=None):
    labels = findlabels(code)
    n = len(code)
    i = 0
    while i &lt; n:
        c = code[i]
        op = ord(c)
        if i == lasti: print &gt;&gt; out,  '--&gt;',
        else: print &gt;&gt; out,  '   ',
        if i in labels: print &gt;&gt; out,  '&gt;&gt;',
        else: print &gt;&gt; out,  '  ',
        print &gt;&gt; out,  repr(i).rjust(4),
        print &gt;&gt; out,  opname[op].ljust(15),
        i = i+1
        if op &gt;= HAVE_ARGUMENT:
            oparg = ord(code[i]) + ord(code[i+1])*256
            i = i+2
            print &gt;&gt; out,  repr(oparg).rjust(5),
            if op in hasconst:
                if constants:
                    print &gt;&gt; out,  '(' + repr(constants[oparg]) + ')',
                else:
                    print &gt;&gt; out,  '(%d)'%oparg,
            elif op in hasname:
                if names is not None:
                    print &gt;&gt; out,  '(' + names[oparg] + ')',
                else:
                    print &gt;&gt; out,  '(%d)'%oparg,
            elif op in hasjrel:
                print &gt;&gt; out,  '(to ' + repr(i + oparg) + ')',
            elif op in haslocal:
                if varnames:
                    print &gt;&gt; out,  '(' + varnames[oparg] + ')',
                else:
                    print &gt;&gt; out,  '(%d)' % oparg,
            elif op in hascompare:
                print &gt;&gt; out,  '(' + cmp_op[oparg] + ')',
        print &gt;&gt; out

def findlabels(code):
    """Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    """
    labels = []
    n = len(code)
    i = 0
    while i &lt; n:
        c = code[i]
        op = ord(c)
        i = i+1
        if op &gt;= HAVE_ARGUMENT:
            oparg = ord(code[i]) + ord(code[i+1])*256
            i = i+2
            label = -1
            if op in hasjrel:
                label = i+oparg
            elif op in hasjabs:
                label = oparg
            if label &gt;= 0:
                if label not in labels:
                    labels.append(label)
    return labels

def findlinestarts(code):
    """Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    """
    byte_increments = [ord(c) for c in code.co_lnotab[0::2]]
    line_increments = [ord(c) for c in code.co_lnotab[1::2]]

    lastlineno = None
    lineno = code.co_firstlineno
    addr = 0
    for byte_incr, line_incr in zip(byte_increments, line_increments):
        if byte_incr:
            if lineno != lastlineno:
                yield (addr, lineno)
                lastlineno = lineno
            addr += byte_incr
        lineno += line_incr
    if lineno != lastlineno:
        yield (addr, lineno)

class FakeFile(object):
    def __init__(self):
        self.store = []
    def write(self, data):
        self.store.append(data)

a = lambda x : x
b = lambda x : x # True
c = lambda x : 2 * x
d = lambda y : 2 * y # True
e = lambda x : 2 * x
f = lambda x : x * 2 # True or False is fine, but must be stable
g = lambda x : 2 * x
h = lambda x : x + x # True or False is fine, but must be stable

funcs = a, b, c, d, e, f, g, h

outs = []
for func in funcs:
    out = FakeFile()
    dis(func)
    outs.append(out.store)

import ast

def outfilter(out):
    for i in out:
        if i.strip().isdigit():
            continue
        if '(' in i:
            try:
                ast.literal_eval(i)
            except ValueError:
                i = "(x)"
        yield i

processed_outs = [(out, 'LOAD_GLOBAL' in out or 'LOAD_DECREF' in out)
                            for out in (''.join(outfilter(out)) for out in outs)]

for (out1, polluted1), (out2, polluted2) in zip(processed_outs[::2], processed_outs[1::2]):
    print 'Bytecode Equivalent:', out1 == out2, '\nPolluted by state:', polluted1 or polluted2
</snippet></ROW><ROW><id>9963552</id><snippet>True</snippet></ROW><ROW><id>9963552</id><snippet>True</snippet></ROW><ROW><id>9963552</id><snippet>False</snippet></ROW><ROW><id>9963552</id><snippet>False</snippet></ROW><ROW><id>9964316</id><snippet>&lt;form enctype="multipart/form-data" method="post" action="/foo/"&gt;
</snippet></ROW><ROW><id>9964440</id><snippet>is_64bits = sys.maxsize &gt; 2**32
</snippet></ROW><ROW><id>9964605</id><snippet>pool</snippet></ROW><ROW><id>9964605</id><snippet>pool.imap</snippet></ROW><ROW><id>9964605</id><snippet>class Volatile(object):
    def do_stuff(self, ...):
        pool = multiprocessing.Pool()
        return pool, pool.imap(...)

    def call_stuff(self):
        pool, results = self.do_stuff()
        for result in results:
            # lazy evaluation of the imap
        pool.terminate()
</snippet></ROW><ROW><id>9964605</id><snippet>Pool.imap</snippet></ROW><ROW><id>9964605</id><snippet>Pool.map</snippet></ROW><ROW><id>9964605</id><snippet>1 + len(input) / len(pool)</snippet></ROW><ROW><id>9964605</id><snippet>chunksize=1</snippet></ROW><ROW><id>9964605</id><snippet>imap</snippet></ROW><ROW><id>9964605</id><snippet>map</snippet></ROW><ROW><id>9964621</id><snippet>import sys
import urllib2

from PyQt4 import QtCore, QtGui


class DownloadThread(QtCore.QThread):
    def __init__(self, url, list_widget):
        QtCore.QThread.__init__(self)
        self.url = url
        self.list_widget = list_widget

    def run(self):
        info = urllib2.urlopen(self.url).info()
        self.list_widget.addItem('%s\n%s' % (self.url, info))


class MainWindow(QtGui.QWidget):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.list_widget = QtGui.QListWidget()
        self.button = QtGui.QPushButton("Start")
        self.button.clicked.connect(self.start_download)
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.button)
        layout.addWidget(self.list_widget)
        self.setLayout(layout)

    def start_download(self):
        urls = ['http://google.com', 'http://twitter.com', 'http://yandex.ru',
                'http://stackoverflow.com/', 'http://www.youtube.com/']
        self.threads = []
        for url in urls:
            downloader = DownloadThread(url, self.list_widget)
            self.threads.append(downloader)
            downloader.start()

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9964621</id><snippet>import sys
import urllib2

from PyQt4 import QtCore, QtGui


class DownloadThread(QtCore.QThread):

    data_downloaded = QtCore.pyqtSignal(object)

    def __init__(self, url):
        QtCore.QThread.__init__(self)
        self.url = url

    def run(self):
        info = urllib2.urlopen(self.url).info()
        self.data_downloaded.emit('%s\n%s' % (self.url, info))


class MainWindow(QtGui.QWidget):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.list_widget = QtGui.QListWidget()
        self.button = QtGui.QPushButton("Start")
        self.button.clicked.connect(self.start_download)
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.button)
        layout.addWidget(self.list_widget)
        self.setLayout(layout)

    def start_download(self):
        urls = ['http://google.com', 'http://twitter.com', 'http://yandex.ru',
                'http://stackoverflow.com/', 'http://www.youtube.com/']
        self.threads = []
        for url in urls:
            downloader = DownloadThread(url)
            downloader.data_downloaded.connect(self.on_data_ready)
            self.threads.append(downloader)
            downloader.start()

    def on_data_ready(self, data):
        print data
        self.list_widget.addItem(unicode(data))


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9964802</id><snippet>txt = open(filename)
</snippet></ROW><ROW><id>9964802</id><snippet>txt.read()
</snippet></ROW><ROW><id>9964802</id><snippet>my_car = create_car(type_of_car)
my_car.start_engine()
</snippet></ROW><ROW><id>9964935</id><snippet>import glob

directory = "/Users/.../.../files/*"
output = "/Users/.../.../output.txt"

filepath = glob.glob(directory)

def wordCount(filepath):
    for file in filepath:
        name = file
        fileO = open(file, 'r')
        sentences = 0
        words = 0
        for line in fileO:
            sentences += line.count('.') + line.count('!') + line.count('?')

            tempwords = line.split()
            words += len(tempwords)

        outputO = open(output, "a")
        outputO.write("Name: " + name + "\n" + "Words: " + str(words) + "\n")

wordCount(filepath)
</snippet></ROW><ROW><id>9965071</id><snippet>clean</snippet></ROW><ROW><id>9965071</id><snippet>from django.core.exceptions import ValidationError
from django.utils.translation import ugettext_lazy as _
from django.db import models

class ThingTwo(models.Model):
    #Your stuff

    def clean(self):
        """
        Validate custom constraints
        """
        if self.use_thingone and self.thingone is None:
            raise ValidationError(_(u"Thing One is to be used, but it not set!"))
</snippet></ROW><ROW><id>9965140</id><snippet>None</snippet></ROW><ROW><id>9965140</id><snippet>__setitem__</snippet></ROW><ROW><id>9965140</id><snippet>__getitem__</snippet></ROW><ROW><id>9965140</id><snippet>[]</snippet></ROW><ROW><id>9965140</id><snippet>class ChessBoard(object):
  def __init__(self):
    self.squares = [None] * 64

  def __setitem__(self, key, value):
    row, col = key
    self.squares[row*8 + col] = value

  def __getitem__(self, key):
    row, col = key
    return self.squares[row*8 + col]
</snippet></ROW><ROW><id>9965140</id><snippet>&gt;&gt;&gt; c = ChessBoard()
&gt;&gt;&gt; c[1,2] = 5
&gt;&gt;&gt; c[1,2]
5
</snippet></ROW><ROW><id>9965187</id><snippet>/bin/echo</snippet></ROW><ROW><id>9965187</id><snippet>echo</snippet></ROW><ROW><id>9965187</id><snippet>/bin/echo</snippet></ROW><ROW><id>9965462</id><snippet>Guestbook.post_date</snippet></ROW><ROW><id>9965462</id><snippet>__neg__</snippet></ROW><ROW><id>9965462</id><snippet>class SqlOrder(object):
    def __init__(self, column, order='ASC'):
        self.column = column
        self.order = order
    def __neg__(self):
        return SqlOrder(self.column, 'DESC')
    def __str__(self):
        return '%s %s' % (self.column, self.order)

&gt;&gt;&gt; foo = SqlOrder('foo')
&gt;&gt;&gt; str(foo)
'foo ASC'
&gt;&gt;&gt; str(-foo)
'foo DESC'
</snippet></ROW><ROW><id>9965861</id><snippet>Popen</snippet></ROW><ROW><id>9965861</id><snippet>festivalCmd = '(SayText "%s")' % text.replace('"', '')
subprocess.Popen(['/usr/bin/festival', '-b', festivalCmd])
</snippet></ROW><ROW><id>9965861</id><snippet>replace</snippet></ROW><ROW><id>9965861</id><snippet>foo"bar</snippet></ROW><ROW><id>9966022</id><snippet>months = cdiff.DATE.map(lambda x: x.month)
pivot_table(cdiff, values='COUNT', rows=[months, 'LOCATION'],
            aggfunc=np.sum)
</snippet></ROW><ROW><id>9966022</id><snippet>calendar.month_name</snippet></ROW><ROW><id>9966022</id><snippet>reset_index</snippet></ROW><ROW><id>9966022</id><snippet>cdiff.groupby([months, 'LOCATION'], as_index=False).sum()</snippet></ROW><ROW><id>9966066</id><snippet>overrideredirect</snippet></ROW><ROW><id>9966066</id><snippet>grab</snippet></ROW><ROW><id>9966186</id><snippet>def isTriangle(sides):
    smallest,medium,biggest = sorted(sides)
    return smallest+medium&gt;=biggest and all(s&gt;0 for s in sides)
</snippet></ROW><ROW><id>9966186</id><snippet>2,2,4</snippet></ROW><ROW><id>9966186</id><snippet>&gt;=</snippet></ROW><ROW><id>9966186</id><snippet>&gt;</snippet></ROW><ROW><id>9966186</id><snippet>c = largest = max(x,y,z)</snippet></ROW><ROW><id>9966186</id><snippet>return math.sqrt(x**2+y**2)</snippet></ROW><ROW><id>9966186</id><snippet>&gt;&gt;&gt; isTriangle([2,2,6])
False
&gt;&gt;&gt; isTriangle((5,5,9))
True
&gt;&gt;&gt; isTriangle([-1,2,2])
False
</snippet></ROW><ROW><id>9966186</id><snippet>import math               # from math import * for such common functions
def isTriangle(x, y, z):  # better to pass in a tuple or object, but this works
    if x&gt;0 and y&gt;0 and z&gt;0:  # (then you could do all(s&gt;0 for s in sides))
                             # (you could also do isTriangle(*sides))
                             # (you might need to add checks len(sides)==3
                             #  if your input data might include e.g. squares)
        if x &gt; y and x &gt; z:    # \
            c = x              #  |
        elif y &gt; x and y &gt; z:  #  &gt; This is the same as c = max(x,y,z)
            c = y              #  |
        else:                  #  |
            c = z              # /
        if c == math.sqrt(x**2 + y**2): # \
            return True                 #  | Same as return c==sqrt(x**2+y**2)
        else:                           #  |  
            return False                # /   
    else:
        return False
</snippet></ROW><ROW><id>9966539</id><snippet>n</snippet></ROW><ROW><id>9966539</id><snippet>C</snippet></ROW><ROW><id>9966539</id><snippet>def min_change(V, C):
    table, solution = min_change_table(V, C)
    num_coins, coins = table[-1], []
    if num_coins == float('inf'):
        return []
    while C &gt; 0:
        coins.append(V[solution[C]])
        C -= V[solution[C]]
    return coins

def min_change_table(V, C):
    m, n = C+1, len(V)
    table, solution = [0] * m, [0] * m
    for i in xrange(1, m):
        minNum, minIdx = float('inf'), -1
        for j in xrange(n):
            if V[j] &lt;= i and 1 + table[i - V[j]] &lt; minNum:
                minNum = 1 + table[i - V[j]]
                minIdx = j
        table[i] = minNum
        solution[i] = minIdx
    return (table, solution)
</snippet></ROW><ROW><id>9966539</id><snippet>V</snippet></ROW><ROW><id>9966539</id><snippet>C</snippet></ROW><ROW><id>9966539</id><snippet>min_change</snippet></ROW><ROW><id>9966539</id><snippet>min_change([1,4,5,10], 8)
&gt; [4, 4]
</snippet></ROW><ROW><id>9966673</id><snippet>__declspec(dllexport)</snippet></ROW><ROW><id>9966678</id><snippet>def tearDown(self):
    if (not IOLoop.initialized() or
        self.io_loop is not IOLoop.instance()):
        # Try to clean up any file descriptors left open in the ioloop.
        # This avoids leaks, especially when tests are run repeatedly
        # in the same process with autoreload (because curl does not
        # set FD_CLOEXEC on its file descriptors)
        self.io_loop.close(all_fds=True)
    super(AsyncTestCase, self).tearDown()
</snippet></ROW><ROW><id>9966678</id><snippet>class AllServersHandlerTest(AsyncHTTPTestCase):

    def tearDown(self):
        pass

    def get_app(self):
        return Application([('/rest/test/', AllServersHandler)])

    def test_server_status_with_advertiser(self):
        on_new_host(None, '127.0.0.1')
        response = self.fetch('/rest/test/', method='GET')
        result = json.loads(response.body, 'utf8').get('data')
        self.assertEquals(['127.0.0.1'], result)
</snippet></ROW><ROW><id>9966722</id><snippet>PythonEngine.Execute("QWE.X = 0", scope);
</snippet></ROW><ROW><id>9966838</id><snippet>.append()</snippet></ROW><ROW><id>9966934</id><snippet>now = localtime()
print now
</snippet></ROW><ROW><id>9966934</id><snippet>tasks = {
    0: "Stuff to do on Monday.",
    1: "Stuff to do on Tuesday.",
    2: "Stuff to do on Wednesday.",
}

print tasks.get(localtime().tm_wday, "Nothing doing.")
</snippet></ROW><ROW><id>9966934</id><snippet>{}</snippet></ROW><ROW><id>9966934</id><snippet>dict</snippet></ROW><ROW><id>9966934</id><snippet>%</snippet></ROW><ROW><id>9966934</id><snippet>tasks = [ 'Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5' ]
print tasks[calendar_day % len(tasks)] # len(tasks) is 5
</snippet></ROW><ROW><id>9966934</id><snippet>calendar_day</snippet></ROW><ROW><id>9966934</id><snippet>tm_yday</snippet></ROW><ROW><id>9966934</id><snippet>struct_time</snippet></ROW><ROW><id>9966934</id><snippet>tasks = [ 'Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5' ]
print tasks[localtime().tm_yday % len(tasks)]
</snippet></ROW><ROW><id>9966934</id><snippet>tasks = [ 'Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5' ]
print tasks[(localtime().tm_yday - 2) % len(tasks)]
</snippet></ROW><ROW><id>9967237</id><snippet>locals()</snippet></ROW><ROW><id>9967237</id><snippet>scores = [99.1, 78.3, etc.]
for i,score in enumerate(scores):
    scores[i] = int(score)
</snippet></ROW><ROW><id>9967237</id><snippet>scores</snippet></ROW><ROW><id>9967237</id><snippet>scores</snippet></ROW><ROW><id>9967237</id><snippet>scores = [...]
roundedScores = [int(score) for score in scores]
</snippet></ROW><ROW><id>9967237</id><snippet>scores = [..., ..., ...]

def processScore(score):
    '''Grades on a curve, where top score = 100%'''
    topScore = max(scores)
    return 100-topScore+score

newScores = [processScore(s) for s in scores]
</snippet></ROW><ROW><id>9967237</id><snippet>from __future__ import division</snippet></ROW><ROW><id>9967237</id><snippet>float(...)</snippet></ROW><ROW><id>9967237</id><snippet>class Score(object):
    def __init__(self, points):
        self.points = points
    def __repr__(self):
        return 'Score({})'.format(self.points)

scores = [Score(i) for i in [99.1, 78.3, ...]]
for s in scores:
    s.points += 5  # adds 5 points to each score
</snippet></ROW><ROW><id>9967418</id><snippet>QSignalMapper</snippet></ROW><ROW><id>9967418</id><snippet>functools.partial</snippet></ROW><ROW><id>9967418</id><snippet>def show_dialog(self, line_edit):
    ...
    line_edit.setText(...)

for button, line_edit in zip(buttons, line_edits):
    button.clicked.connect(functools.partial(self.show_dialog, line_edit))
</snippet></ROW><ROW><id>9967418</id><snippet>lambda</snippet></ROW><ROW><id>9967418</id><snippet>for button, line_edit in ...: 
    button.clicked.connect(lambda : self.show_dialog(line_edit))
</snippet></ROW><ROW><id>9967418</id><snippet>class Foo(object):
    def __init__(self):
        self.edit1 = 1
        self.edit2 = 2
        self.edit3 = 3
        self.button1 = 1
        self.button2 = 2
        self.button3 = 3

    def find_attributes(self, name_start):
        return [value for name, value in sorted(self.__dict__.items())
                          if name.startswith(name_start)]

foo = Foo()
print foo.find_attributes('edit')
print foo.find_attributes('button')
</snippet></ROW><ROW><id>9967680</id><snippet>urllib2</snippet></ROW><ROW><id>9967680</id><snippet>import urllib2

#redirect_handler = urllib2.HTTPRedirectHandler()

class MyHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        print "Cookie Manip Right Here"
        return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)

    http_error_301 = http_error_303 = http_error_307 = http_error_302

cookieprocessor = urllib2.HTTPCookieProcessor()

opener = urllib2.build_opener(MyHTTPRedirectHandler, cookieprocessor)
urllib2.install_opener(opener)

response =urllib2.urlopen("WHEREEVER")
print response.read()

print cookieprocessor.cookiejar
</snippet></ROW><ROW><id>9968026</id><snippet>IDarray_prev = IDarray
</snippet></ROW><ROW><id>9968026</id><snippet>IDarray_prev</snippet></ROW><ROW><id>9968026</id><snippet>IDarray</snippet></ROW><ROW><id>9968026</id><snippet>IDarray_prev = IDarray[:]
</snippet></ROW><ROW><id>9968026</id><snippet>[:]</snippet></ROW><ROW><id>9968147</id><snippet>In [50]: df.groupby(dr5minute.asof).agg({'Low': lambda s: s.min(), 
                                         'High': lambda s: s.max(),
                                         'Open': lambda s: s[0],
                                         'Close': lambda s: s[-1],
                                         'Volume': lambda s: s.sum()})
Out[50]: 
                      Close    High     Low    Open  Volume
key_0                                                      
1999-01-04 10:20:00  1.1806  1.1819  1.1801  1.1801      34
1999-01-04 10:25:00  1.1789  1.1815  1.1776  1.1807      91
1999-01-04 10:30:00  1.1791  1.1792  1.1776  1.1780      16
</snippet></ROW><ROW><id>9968147</id><snippet>                  agg() method     agg func    agg func          agg()
                  input type       accepts     returns           result
GroupBy Object
SeriesGroupBy     function         Series      value             Series
                  dict-of-funcs    Series      value             DataFrame, columns match dict keys
                  list-of-funcs    Series      value             DataFrame, columns match func names
DataFrameGroupBy  function         DataFrame   Series/dict/ary   DataFrame, columns match original DataFrame
                  dict-of-funcs    Series      value             DataFrame, columns match dict keys, where dict keys must be columns in original DataFrame
                  list-of-funcs    Series      value             DataFrame, MultiIndex columns (original cols x func names)
</snippet></ROW><ROW><id>9968147</id><snippet>def ohlcsum(df):
    df = df.sort()
    return {
       'Open': df['Open'][0],
       'High': df['High'].max(),
       'Low': df['Low'].min(),
       'Close': df['Close'][-1],
       'Volume': df['Volume'].sum()
      }
</snippet></ROW><ROW><id>9968147</id><snippet>In [30]: df.groupby(dr5minute.asof).agg(ohlcsum)
Out[30]: 
                       Open    High     Low   Close  Volume
key_0                                                      
1999-01-04 10:20:00  1.1801  1.1819  1.1801  1.1806      34
1999-01-04 10:25:00  1.1807  1.1815  1.1776  1.1789      91
1999-01-04 10:30:00  1.1780  1.1792  1.1776  1.1791      16
</snippet></ROW><ROW><id>9968213</id><snippet>print '\n'.join(textwrap.wrap(s, 80))
</snippet></ROW><ROW><id>9968213</id><snippet>print textwrap.fill(s, 80)
</snippet></ROW><ROW><id>9968240</id><snippet>import socket

class Client(object):

    def __init__(self):
        self.buffer = ''
        self.sock = None

    def connect(self,address):
        self.buffer = ''
        self.sock = socket.socket()
        self.sock.connect(address)

    def get_msg(self):
        '''Append raw data to buffer until sentinel is found,
           then strip off the message, leaving the remainder
           in the buffer.
        '''
        while not '\n' in self.buffer:
            data = self.sock.recv(4096)
            if not data:
                return ''
            self.buffer += data
        sentinel = self.buffer.index('\n') + 1
        msg,self.buffer = self.buffer[:sentinel],self.buffer[sentinel:]
        return msg

    def close(self):
        self.sock.close()

if __name__ == '__main__':
    c = Client()
    c.connect((HOST,PORT))
    while True:
        msg = c.get_msg()
        if not msg:
            break
        print repr(msg)
    c.close()
</snippet></ROW><ROW><id>9968294</id><snippet>def List(request):
    posts = Image.objects.all()

    context = RequestContext(request, {
         'posts': posts,
    })

    return render_to_response('list.html', context)
</snippet></ROW><ROW><id>9968294</id><snippet>TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)
</snippet></ROW><ROW><id>9968425</id><snippet>.string</snippet></ROW><ROW><id>9968425</id><snippet>food</snippet></ROW><ROW><id>9968613</id><snippet>e_value  = float(linearr[6])
</snippet></ROW><ROW><id>9968613</id><snippet>e_value  = float(linearr[6])

if e_value &gt; 1.0e-10:
  continue
</snippet></ROW><ROW><id>9968613</id><snippet>e_value</snippet></ROW><ROW><id>9968817</id><snippet>len(someString)
</snippet></ROW><ROW><id>9968817</id><snippet>IndexError</snippet></ROW><ROW><id>9968886</id><snippet>Queue</snippet></ROW><ROW><id>9968886</id><snippet>fmin</snippet></ROW><ROW><id>9968886</id><snippet>from thread import start_new_thread
from Queue import Queue

def my_fmin(func, x0, end_callback=(lambda x:x), timeout=None):

    q = Queue() # fmin produces, the generator consumes
    job_done = object() # signals the processing is done

    # Producer
    def my_callback(x):
        q.put(x)
    def task():
        ret = scipy.optimize.fmin(func,x0,callback=my_callback)
        q.put(job_done)
        end_callback(ret) # "Returns" the result of the main call

    # Starts fmin in a new thread
    start_new_thread(task,())

    # Consumer
    while True:
        next_item = q.get(True,timeout) # Blocks until an input is available
        if next_item is job_done:
            break
        yield next_item
</snippet></ROW><ROW><id>9968886</id><snippet>task_done</snippet></ROW><ROW><id>9968886</id><snippet>join</snippet></ROW><ROW><id>9968886</id><snippet>    # Producer
    def my_callback(x):
        q.put(x)
        q.join() # Blocks until task_done is called

    # Consumer
    while True:
        next_item = q.get(True,timeout) # Blocks until an input is available
        if next_item is job_done:
            break
        yield next_item
        q.task_done() # Unblocks the producer, so a new iteration can start
</snippet></ROW><ROW><id>9968886</id><snippet>maxsize=1</snippet></ROW><ROW><id>9968886</id><snippet>fmin</snippet></ROW><ROW><id>9968886</id><snippet>timeout</snippet></ROW><ROW><id>9968886</id><snippet>put</snippet></ROW><ROW><id>9968886</id><snippet>    q = Queue(maxsize=1)

    # Producer
    def my_callback(x):
        q.put(x)
        q.put("dummy",True,timeout) # Blocks until the first result is retrieved
        q.join() # Blocks again until task_done is called

    # Consumer
    while True:
        next_item = q.get(True,timeout) # Blocks until an input is available
        q.task_done()                   # (one "task_done" per "get")
        if next_item is job_done:
            break
        yield next_item
        q.get() # Retrieves the "dummy" object (must be after yield)
        q.task_done() # Unblocks the producer, so a new iteration can start
</snippet></ROW><ROW><id>9969054</id><snippet>no lemma 'eat' with part of speech 'n'</snippet></ROW><ROW><id>9969054</id><snippet>&gt;&gt;&gt; wn.synset('eat.v.01').lemma_names
['eat']
</snippet></ROW><ROW><id>9969136</id><snippet>for row in csvReader:
    row = "".join(row)
    stockList.append(row)
</snippet></ROW><ROW><id>9969198</id><snippet>\n</snippet></ROW><ROW><id>9969198</id><snippet>print</snippet></ROW><ROW><id>9969198</id><snippet>sys.stdout.write(s)</snippet></ROW><ROW><id>9969295</id><snippet>open()</snippet></ROW><ROW><id>9969295</id><snippet>open(name[, mode[, buffering]])</snippet></ROW><ROW><id>9969295</id><snippet>open()</snippet></ROW><ROW><id>9969448</id><snippet>%module test

%inline %{
class MyClass
{
public:
    // other operations
    PyObject *get_info() { return info_; }
    void set_info(PyObject *info) { info_ = info; }

private:
    PyObject *info_;
};
%}
</snippet></ROW><ROW><id>9969448</id><snippet>foo.set_info("hi")</snippet></ROW><ROW><id>9969448</id><snippet>foo.get_info()</snippet></ROW><ROW><id>9969448</id><snippet>Py_INCREF(info);
</snippet></ROW><ROW><id>9969448</id><snippet>set_info()</snippet></ROW><ROW><id>9969448</id><snippet>set_info()</snippet></ROW><ROW><id>9969469</id><snippet>numpy.mean([a, b, c], axis=0)
</snippet></ROW><ROW><id>9969503</id><snippet>a</snippet></ROW><ROW><id>9969503</id><snippet>math.sqrt(a)</snippet></ROW><ROW><id>9969503</id><snippet>f</snippet></ROW><ROW><id>9969503</id><snippet>sqrt</snippet></ROW><ROW><id>9969503</id><snippet>math.sqrt(a)</snippet></ROW><ROW><id>9969503</id><snippet>def g(a):
  s = math.sqrt(a)
  def f(b):
    return s * b
  return f
</snippet></ROW><ROW><id>9969503</id><snippet>lambda</snippet></ROW><ROW><id>9969503</id><snippet>def g(a): 
  s = math.sqrt(a)
  return lambda b: s * b
</snippet></ROW><ROW><id>9969503</id><snippet>g</snippet></ROW><ROW><id>9969598</id><snippet>[(x1+x2)/2 for x1,x2 in zip(h1,h2)]
</snippet></ROW><ROW><id>9969598</id><snippet>def mergeBins(bin1, bin2):
    label1,value1 = bin1
    label2,value2 = bin2
    assert label1==label2
    return label1, (value1+value2)/2

dict(mergeBins() in bin1,bin2 zip(h1.items(), h2.items()))
</snippet></ROW><ROW><id>9969618</id><snippet>import socket, select
s1 = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s1.bind(('0.0.0.0', 1337))
s2 = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_UDP)
s2.bind(('0.0.0.0', 1337))
while True:
    r, w, x = select.select([s1, s2], [], [])
    for i in r:
        print i, i.recvfrom(131072)
</snippet></ROW><ROW><id>9969621</id><snippet>ImportError: dlopen(/Users/milktrader/.virtualenvs/pybrain/lib/python2.7/site-packages/scipy/linalg/calc_lwork.so, 2): Symbol not found: __gfortran_concat_string
</snippet></ROW><ROW><id>9969651</id><snippet>list()</snippet></ROW><ROW><id>9969651</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>9969651</id><snippet>id(p)</snippet></ROW><ROW><id>9969651</id><snippet>id(g)</snippet></ROW><ROW><id>9969651</id><snippet>list()</snippet></ROW><ROW><id>9969672</id><snippet>PRODUCT_ID</snippet></ROW><ROW><id>9969672</id><snippet>0</snippet></ROW><ROW><id>9969672</id><snippet>select PRODUCT_ID,
       0 + PRODUCT_ID as GROUP
  from ...
</snippet></ROW><ROW><id>9969672</id><snippet>GROUP</snippet></ROW><ROW><id>9969672</id><snippet>select PRODUCT_ID,
       concat(0 + PRODUCT_ID) as GROUP
  from ...
</snippet></ROW><ROW><id>9969689</id><snippet>print str(count) + '  ' + str(conv)
</snippet></ROW><ROW><id>9969689</id><snippet>print str(count) + '    ' + str(conv)
</snippet></ROW><ROW><id>9969689</id><snippet>print '{0}  {1}'.format(count, conv)
</snippet></ROW><ROW><id>9969689</id><snippet>print '%d  %.2f' % (count, conv)
</snippet></ROW><ROW><id>9969709</id><snippet>&gt;&gt;&gt; s = ((2, 3, 4), (1, 2, 3), (1, 2, 2))
&gt;&gt;&gt; sorted(s, key=operator.itemgetter(0, 1), reverse=True)
[(2, 3, 4), (1, 2, 3), (1, 2, 2)]
&gt;&gt;&gt; list(reversed(sorted(s, key=operator.itemgetter(0, 1))))
[(2, 3, 4), (1, 2, 2), (1, 2, 3)]
</snippet></ROW><ROW><id>9969758</id><snippet>hist</snippet></ROW><ROW><id>9969758</id><snippet>import matplotlib.pyplot as pp
spkSum = [1, 1, 9, 9, 20, 20, 33, 33, 50, 50]
pp.bar(range(len(spkSum)), spkSum)
</snippet></ROW></DATA>