<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>15625435</id><snippet>os.environ['TZ'] = 'America/New_York'
time.tzset()
</snippet></ROW><ROW><id>15625435</id><snippet>strftime()</snippet></ROW><ROW><id>15625435</id><snippet>tzset()</snippet></ROW><ROW><id>15625631</id><snippet>print i()
</snippet></ROW><ROW><id>15625631</id><snippet>i</snippet></ROW><ROW><id>15625735</id><snippet>def format_list(l):
    if len(l)==1: return l[0]
    else:
        return '{:&lt;10}|{:&gt;10}'.format(l[0],l[1])

for l in [['abc'],['Dave', '14']]:        
    print(format_list(l)) 
</snippet></ROW><ROW><id>15625735</id><snippet>abc
Dave      |        14
</snippet></ROW><ROW><id>15625840</id><snippet>post_date__year</snippet></ROW><ROW><id>15625840</id><snippet>post_date__month</snippet></ROW><ROW><id>15625998</id><snippet>setleds</snippet></ROW><ROW><id>15626127</id><snippet>*</snippet></ROW><ROW><id>15626127</id><snippet>[1]</snippet></ROW><ROW><id>15626127</id><snippet>[0]</snippet></ROW><ROW><id>15626389</id><snippet>def test(a,b,c,*args):  
    print (a,b,c)  
    for n in args:  
        print(n, end=' ')  

test('aa','bb','cc',1,2,3,4)  
</snippet></ROW><ROW><id>15626389</id><snippet>for n in args:</snippet></ROW><ROW><id>15626389</id><snippet>test()</snippet></ROW><ROW><id>15626389</id><snippet>args</snippet></ROW><ROW><id>15626389</id><snippet>test()</snippet></ROW><ROW><id>15626389</id><snippet>NameError</snippet></ROW><ROW><id>15626402</id><snippet>user</snippet></ROW><ROW><id>15626402</id><snippet>    def test_add_existing_user(self):
        user = User('test_add_existing_user', 'welcome')
        db.session.add(user)
        db.session.commit()
        self.assertEquals(1, len(User.query.all()))

        db.session.add(User(user.email, 'welcome'))
        db.session.commit()
</snippet></ROW><ROW><id>15626486</id><snippet>&gt;&gt;&gt; a = np.random.random((20,3))
&gt;&gt;&gt; b = np.random.random((20,3))
&gt;&gt;&gt; c = np.cross(a,b)
&gt;&gt;&gt; c[0], np.cross(a[0], b[0])
(array([-0.02469147,  0.52341148, -0.65514102]), array([-0.02469147,  0.52341148, -0.65514102]))
&gt;&gt;&gt; c[1], np.cross(a[1], b[1])
(array([-0.0733347 , -0.32691093,  0.40987079]), array([-0.0733347 , -0.32691093,  0.40987079]))
&gt;&gt;&gt; all((c[i] == np.cross(a[i], b[i])).all() for i in range(len(c)))
True
</snippet></ROW><ROW><id>15626588</id><snippet>self.assertRaises</snippet></ROW><ROW><id>15626588</id><snippet>def test_add_existing_user(self):
    """
    Checks that unique constraints return an IntegrityError.
    """
    user = User('test_add_existing_user', 'welcome')
    db.session.add(user)
    db.session.commit()
    self.assertEquals(1, len(User.query.all()))

    db.session.add(User(user.email, 'welcome'))
    self.assertRaises(IntegrityError, db.session.commit)
</snippet></ROW><ROW><id>15626706</id><snippet>import os
import os.path

def getSize(path):
    totalsize,filecnt = 0,0
    for root, dirs, files in os.walk(path): 
        for file in files:
            tgt=os.path.join(root,file)
            if os.path.exists(tgt): 
                size = os.stat(tgt).st_size
                totalsize = totalsize + size
                filecnt+=1
    return totalsize,filecnt

print '{:,} bytes in {:,} files'.format(*getSize('/Users/droid'))
</snippet></ROW><ROW><id>15626706</id><snippet>110,058,100,086 bytes in 449,723 files
</snippet></ROW><ROW><id>15626706</id><snippet>            try:
                size = os.stat(tgt).st_size
                totalsize = totalsize + size
                filecnt+=1
            except (#Permission Error type...): 
                continue
</snippet></ROW><ROW><id>15627017</id><snippet>mssql+pyodbc</snippet></ROW><ROW><id>15627017</id><snippet>[SQL Server]
Driver=/path/to/library.so
</snippet></ROW><ROW><id>15627017</id><snippet>[FreeTDS]
Driver=/usr/lib/libtdsodbc.so
Threading=1

[ODBC Driver 11 for SQL Server]
Description=Microsoft ODBC Driver 11 for SQL Server
Driver=/opt/microsoft/msodbcsql/lib64/libmsodbcsql-11.0.so.2270.0
Threading=1
UsageCount=1
</snippet></ROW><ROW><id>15627017</id><snippet>driver</snippet></ROW><ROW><id>15627017</id><snippet>mssql+pyodbc://user:pass@ip_address/database_name?driver=FreeTDS
</snippet></ROW><ROW><id>15627017</id><snippet>mssql+pyodbc://user:pass@ip_address/database_name?driver=ODBC+Driver+11+for+SQL+Server
</snippet></ROW><ROW><id>15627143</id><snippet>while(Dump.poll() is not None): # While dump.pool is not None keep the loop going</snippet></ROW><ROW><id>15627143</id><snippet>while(Dump.poll() is None): # While dump.pool is None keep the loop going</snippet></ROW><ROW><id>15627143</id><snippet>Dump.poll()</snippet></ROW><ROW><id>15627143</id><snippet>Dump.pool()</snippet></ROW><ROW><id>15627143</id><snippet>with open("blah.txt",'w') as w:
    #I log the output of a program with subprocess
    Cmdline="program.exe"
    Dump = subprocess.Popen(CmdLine,stdout=w,stderr=subprocess.STDOUT)
    #Waiting for it to finish
    while(Dump.poll() is None): #returns None while subprocess is running
        print "waiting on process to finish \n"
    w.flush() #I flush everything to make sure it was written
    sys.stdout.flush()

#now i need to read from this file
with open("blah.txt", 'r') as f:
    line=f.readline()
    while line:
        print line
        line=f.readline()
</snippet></ROW><ROW><id>15627413</id><snippet>-0</snippet></ROW><ROW><id>15627413</id><snippet>0</snippet></ROW><ROW><id>15627413</id><snippet>l = list()
for k in [5,4,3,2,1,0]:
    l.append(x[:-k or None])
</snippet></ROW><ROW><id>15627413</id><snippet>k</snippet></ROW><ROW><id>15627413</id><snippet>-k or None</snippet></ROW><ROW><id>15627413</id><snippet>None</snippet></ROW><ROW><id>15627413</id><snippet>x[:None]</snippet></ROW><ROW><id>15627413</id><snippet>k</snippet></ROW><ROW><id>15627413</id><snippet>-k or None</snippet></ROW><ROW><id>15627413</id><snippet>-k</snippet></ROW><ROW><id>15627910</id><snippet>u = []
v = []
w = []

with open(filename, "r") as f:
    for linenum, line in enumerate(f):
        x = int(line.split()[3])
        if x &gt; 2000:
            u.append(x)
        if x &gt; 1000:
            v.append(x)
        if x &gt; 500:
            w.append(x)
</snippet></ROW><ROW><id>15627910</id><snippet>import random
rand = random.Random()       # change to random.Random(1234) for repeatable results

chosen = set()
s0 = rand.sample(u, 500)
chosen.update(s0)
s1 = rand.sample([x for x in v if x not in chosen], 500)
chosen.update(s1)
s2 = rand.sample([x for x in w if x not in chosen], 500)
chosen.update(s2)
</snippet></ROW><ROW><id>15627910</id><snippet>linenum2sample = dict([(x, 0) for x in s0]+[(x, 1) for x in s1]+[(x, 2) for x in s2])

outfile = [open("-".join(x, filename), "w") for x in ["2000", "1000", "500"]]

try:
    with open(filename, "r") as f:
        for linenum, line in enumerate(f):
            s = linenum2sample.get(linenum)
            if s is not None:
                outfile[s].write(line)
finally:
    for f in outfile:
        f.close()
</snippet></ROW><ROW><id>15627935</id><snippet>import sqlite3,time

db = sqlite3.connect("my_database.sql") #you can put whatever ... created if not exist
conn = db.cursor()

conn.execute("CREATE TABLE IF NOT EXISTS Activities (timestamp int, name text);")

def AddActivity(activityName):
    conn.execute("INSERT INTO Activities (timestamp,name) VALUES (?,?)",(time.time(),activityName))
    db.commit()

def GetAllActivitiesOnDate(month,day,year):
    start_time = time.mktime((year,month,day,0,0,0,0,0,0)) 
    end_time = time.mktime((year,month,day,23,59,0,0,0,0)) #use 1 for last  argument if you live somewhere with dst
    conn.execute("SELECT * FROM Activities WHERE timestamp &gt; ? AND timestamp &lt; ?",(start_time,end_time))
    return conn.fetchall()
</snippet></ROW><ROW><id>15627935</id><snippet>AddActivity("Jumping Jacks")
time.sleep(10)
AddActivity("Push Ups")

import datetime
today = datetime.datetime.now()
activities = GetAllActivitiesOnDate(today.month,today.day,today.year)
print "Found %d Entries"%len(activities)
for activity in activities:
   print "Activity %s @ %s"%(activity[1],time.strftime("%x %X",
                                                 time.gmtime(int(activity[0]))))
</snippet></ROW><ROW><id>15627957</id><snippet>['cmd'] + list
</snippet></ROW><ROW><id>15627957</id><snippet>list</snippet></ROW><ROW><id>15627957</id><snippet>list</snippet></ROW><ROW><id>15628002</id><snippet>x[0]</snippet></ROW><ROW><id>15628002</id><snippet>None</snippet></ROW><ROW><id>15628002</id><snippet>[None][0] == None</snippet></ROW><ROW><id>15628002</id><snippet>None</snippet></ROW><ROW><id>15628002</id><snippet>None</snippet></ROW><ROW><id>15628002</id><snippet>x[0:]</snippet></ROW><ROW><id>15628002</id><snippet>x[0:]</snippet></ROW><ROW><id>15628002</id><snippet>x[0]</snippet></ROW><ROW><id>15628002</id><snippet>x[1]</snippet></ROW><ROW><id>15628042</id><snippet>In [1]: a = [([2, -2, 0.29], 0), ([-2, 0, 1.9], 2), ([2, 1, 2.35], 3), ([2, -3, 2.96], 3)]

In [2]: result={}

In [3]: for x in a:
   ...:     result.setdefault(x[1],[]).append(x[0])
   ...:     

In [4]: result[3]
Out[4]: [[2, 1, 2.35], [2, -3, 2.96]]
</snippet></ROW><ROW><id>15628161</id><snippet>def run(self):
    img_sky = ImageTk.PhotoImage(file="Images/night-sky.jpg")
    img_button = ImageTk.PhotoImage(file="button_instructions.png")
    self.canvas = Canvas(self.home, width=700, height=500)
    self.canvas.create_image(0, 0, image=img_sky)
    self.canvas.create_image(300, 200, image=img_button)
    self.canvas.pack()
    self.home.mainloop()
</snippet></ROW><ROW><id>15628333</id><snippet>text</snippet></ROW><ROW><id>15628333</id><snippet>hidden</snippet></ROW><ROW><id>15628333</id><snippet>$('.getpdf').append('&lt;tr style="display:none"&gt;&lt;td&gt;&lt;input name="extract" value="' + jq_html + '"&gt;&lt;/input&gt;&lt;/td&gt;&lt;/tr&gt;');
</snippet></ROW><ROW><id>15628333</id><snippet>$('&lt;tr style="display:none"&gt;&lt;td&gt;&lt;input type="hidden" name="extract"&gt;&lt;/td&gt;&lt;/tr&gt;')
    .appendTo('.getpdf')
    .find('input')
    .val(jq_html);
</snippet></ROW><ROW><id>15628398</id><snippet>OrderNotes.objects.filter(item=item).values_list('shared_note', flat=True).distinct()
</snippet></ROW><ROW><id>15628432</id><snippet>from django.shortcuts import render

def view_1(request):
    return render(request, 'same_template.html', {})
def view_2(request):
    return render(request, 'same_teamplate.html', {})
</snippet></ROW><ROW><id>15628458</id><snippet>sys.getsizeof(0)</snippet></ROW><ROW><id>15628600</id><snippet>in</snippet></ROW><ROW><id>15628600</id><snippet>locations_ids = [location.id for location in Locations.objects.all()[:5]]
all_ratings = Rating.objects.filter(location__id__in=locations_ids)
</snippet></ROW><ROW><id>15628675</id><snippet>sleep</snippet></ROW><ROW><id>15628675</id><snippet>sleep(time)
</snippet></ROW><ROW><id>15628675</id><snippet>sleep[time]
</snippet></ROW><ROW><id>15628970</id><snippet>zip(all_locations, rating)</snippet></ROW><ROW><id>15628970</id><snippet>all_locations = ['ca','ny','fl']
ratings = ['best','great','good']
for (l,r) in zip(all_locations,ratings): 
   print l+':'+r 
</snippet></ROW><ROW><id>15628970</id><snippet>ca:best
ny:great
fl:good
</snippet></ROW><ROW><id>15629273</id><snippet># set a value
if hasattr(request, 'session'):
    request.session['account_id'] = account_id

# read a value
if hasattr(request, 'session'):
    account_id = request.session['account_id']
</snippet></ROW><ROW><id>15629580</id><snippet>hex</snippet></ROW><ROW><id>15629580</id><snippet>int</snippet></ROW><ROW><id>15629580</id><snippet>bin</snippet></ROW><ROW><id>15629580</id><snippet>b</snippet></ROW><ROW><id>15629580</id><snippet>a = 0x7b
b = 0x80000

def append_hex(a, b):
    sizeof_b = 0

    # get size of b in bits
    while((b &gt;&gt; sizeof_b) &gt; 0):
        sizeof_b += 1

    # align answer to nearest 4 bits (hex digit)
    sizeof_b += sizeof_b % 4

    return (a &lt;&lt; sizeof_b) | b

print(hex(append_hex(a, b)))
</snippet></ROW><ROW><id>15629580</id><snippet>b</snippet></ROW><ROW><id>15629580</id><snippet>4</snippet></ROW><ROW><id>15629580</id><snippet>hex</snippet></ROW><ROW><id>15629580</id><snippet>a</snippet></ROW><ROW><id>15630090</id><snippet>lazy_function = lazy(f, type)
</snippet></ROW><ROW><id>15630090</id><snippet>f</snippet></ROW><ROW><id>15630090</id><snippet>type</snippet></ROW><ROW><id>15630090</id><snippet>def a():
    return [], []
</snippet></ROW><ROW><id>15630090</id><snippet>lazy_f = lazy(f, tuple)
</snippet></ROW><ROW><id>15630138</id><snippet>widget="selection"</snippet></ROW><ROW><id>15630138</id><snippet>&lt;field name="ur_m2o_field" widget="selection&gt;</snippet></ROW><ROW><id>15630157</id><snippet>grid_range = 10

i = 0 
j = 0 

while (j &lt;= (grid_range * 2)):

    # Reset i to 0 after completing each loop below.
    i = 0 

    while (i &lt;= (grid_range * 2)):

        # OpenGL calls go here.

        print j, i 

        i += 1
    j += 1
</snippet></ROW><ROW><id>15630157</id><snippet>grid_range = 10

for j in range(grid_range * 2 + 1):

    for i in range(grid_range * 2 + 1):

        # OpenGL calls go here.

        print j, i
</snippet></ROW><ROW><id>15630446</id><snippet>myCls = MyClass()
myCls.f()
</snippet></ROW><ROW><id>15630799</id><snippet>form.as_p</snippet></ROW><ROW><id>15630799</id><snippet>form.to</snippet></ROW><ROW><id>15630799</id><snippet> &lt;div&gt;{{ form.To}} &lt;/div&gt;
</snippet></ROW><ROW><id>15630966</id><snippet>x == "data"</snippet></ROW><ROW><id>15630966</id><snippet>v</snippet></ROW><ROW><id>15630966</id><snippet>v["meetingID"]</snippet></ROW><ROW><id>15630966</id><snippet>x.meetingID</snippet></ROW><ROW><id>15631144</id><snippet>osize = sys.argv[1].split(',')
</snippet></ROW><ROW><id>15631230</id><snippet>argsort</snippet></ROW><ROW><id>15631230</id><snippet>argsort</snippet></ROW><ROW><id>15631230</id><snippet>argsort</snippet></ROW><ROW><id>15631230</id><snippet>NaN, 20080227, 20080410, 20080213</snippet></ROW><ROW><id>15631230</id><snippet>nonnan = [20080227, 20080410, 20080213]
</snippet></ROW><ROW><id>15631230</id><snippet>NaN, 2, 0, 1</snippet></ROW><ROW><id>15631230</id><snippet>argsort     sorted values
  NaN       NaN
   2        nonnan[2] = 20080213
   0        nonnan[0] = 20080227
   1        nonnan[1] = 20080410
</snippet></ROW><ROW><id>15631242</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>15631242</id><snippet>In [5]: import copy

In [6]: d = {1:[]}

In [7]: dic = copy.deepcopy(d)

In [8]: dic[1].append(2)

In [9]: d
Out[9]: {1: []}

In [10]: dic
Out[10]: {1: [2]}
</snippet></ROW><ROW><id>15631703</id><snippet>sudo apt-get install python-dev</snippet></ROW><ROW><id>15631703</id><snippet>sudo apt-get update</snippet></ROW><ROW><id>15631815</id><snippet>for row in rows:
    entry = {"component": row[2], 
             "children": [], 
             "status": 0}
    cmap[row[0]] = entry
    if row[1] == 1:
        hrcy = entry
for row in rows:
    item = cmap[row[0]]
    parent = cmap.get( row[3], None )
    if parent:
        parent["children"].append(item)
</snippet></ROW><ROW><id>15631905</id><snippet>main()</snippet></ROW><ROW><id>15631905</id><snippet>-lpython</snippet></ROW><ROW><id>15632441</id><snippet>interpolation_dict</snippet></ROW><ROW><id>15632441</id><snippet>ir.sequence</snippet></ROW><ROW><id>15632455</id><snippet>values['register_no'] = self.pool.get('ir.sequence').get(cr, uid, 'bpl.worker')
values['employer_no'] = self.pool.get('ir.sequence').get(cr, uid, 'bpl.employer')
return super(bpl_worker_registration, self).create(cr, uid, values, context=context)
</snippet></ROW><ROW><id>15632455</id><snippet> 'register_no': lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'bpl.worker'),
 'employer_no': lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'bpl.employer'),

 }
</snippet></ROW><ROW><id>15632671</id><snippet>run()</snippet></ROW><ROW><id>15632671</id><snippet>cProfile.py</snippet></ROW><ROW><id>15632671</id><snippet>Profile</snippet></ROW><ROW><id>15632671</id><snippet>dump_stats</snippet></ROW><ROW><id>15632671</id><snippet>def run(statement, filename=None, sort=-1):
    """Run statement under profiler optionally saving results in filename

    This function takes a single argument that can be passed to the
    "exec" statement, and an optional file name.  In all cases this
    routine attempts to "exec" its first argument and gather profiling
    statistics from the execution. If no file name is present, then this
    function automatically prints a simple profiling report, sorted by the
    standard name string (file/line/function-name) that is presented in
    each line.
    """
    prof = Profile()
    result = None
    try:
        try:
            prof = prof.run(statement)
        except SystemExit:
            pass
    finally:
        if filename is not None:
            prof.dump_stats(filename)
        else:
            result = prof.print_stats(sort)
    return result
</snippet></ROW><ROW><id>15632837</id><snippet>while True:
    rows = input('Enter the number of rows:  ')

    if 3 &lt;= rows &lt;= 33:
        break
    else:
        continue

padding = ' '*rows        
while rows &gt; 0:
    print(padding[rows:] + '*'*rows)
    rows = rows - 1
</snippet></ROW><ROW><id>15632837</id><snippet># print the outline of an inverted triangle:
height = rows

# inner padding for min height (3)
inner_buffer = [0, 1, 3]
while len(inner_buffer) &lt;= rows:
    inner_buffer.append(inner_buffer[-1]+2)

while height &gt; 0:
    outer_padding = ' '*(rows - height)    
    if height == 1:
        print(outer_padding + '*')
    else:
        inner_padding = ' '*(inner_buffer.pop()-2)
        print(outer_padding + '*' + inner_padding + '*')
    height = height - 1
</snippet></ROW><ROW><id>15632837</id><snippet>def get_rows():
    while True:
        rows = input('Enter the number of rows:  ')
        if 3 &lt;= rows &lt;= 33:
            return rows

def triangle(rows, regular=False, invert=True):

    if invert:
        height = -1 * rows
    else:
        height = 0

    # inner padding for min height (3)
    inner_buffer = [0, 1, 3]
    while len(inner_buffer) &lt;= rows:
        inner_buffer.append(inner_buffer[-1]+2)

    level = 0        
    while level &lt;= rows:
        outer_padding = ' '*(rows - abs(height))

        if height == 0:
            print(outer_padding + '*')
        else:
            inner_padding = ' '*( inner_buffer[ abs(height) ] )
            print(outer_padding + '*' + inner_padding + '*')

        height += 1
        level += 1
</snippet></ROW><ROW><id>15632937</id><snippet>fit</snippet></ROW><ROW><id>15632937</id><snippet>Explicit formula:   mu = 4.99203450, sig = 0.81691086
Fit log(x) to norm: mu = 4.99203450, sig = 0.81691086
Fit x to lognorm:   mu = 4.99203468, sig = 0.81691081
</snippet></ROW><ROW><id>15632937</id><snippet>Explicit formula:   mu = 4.99203450, sig = 0.81691086
Fit log(x) to norm: mu = 4.99203450, sig = 0.81691086
Fit x to lognorm:   mu = 4.23197270, sig = 1.11581240
</snippet></ROW><ROW><id>15632937</id><snippet>import numpy as np
from scipy import stats


def lognfit(x, ddof=0):
    x = np.asarray(x)
    logx = np.log(x)
    mu = logx.mean()
    sig = logx.std(ddof=ddof)
    return mu, sig


# A simple data set for easy reproducibility
x = np.array([50., 50, 100, 200, 200, 300, 500])

# Explicit formula
my_mu, my_sig = lognfit(x)

# Fit a normal distribution to log(x)
norm_mu, norm_sig = stats.norm.fit(np.log(x))

# Fit the lognormal distribution
lognorm_sig, _, lognorm_expmu = stats.lognorm.fit(x, floc=0)

print "Explicit formula:   mu = %10.8f, sig = %10.8f" % (my_mu, my_sig)
print "Fit log(x) to norm: mu = %10.8f, sig = %10.8f" % (norm_mu, norm_sig)
print "Fit x to lognorm:   mu = %10.8f, sig = %10.8f" % (np.log(lognorm_expmu), lognorm_sig)
</snippet></ROW><ROW><id>15632937</id><snippet>ddof=1</snippet></ROW><ROW><id>15632937</id><snippet>In [104]: x
Out[104]: array([  50.,   50.,  100.,  200.,  200.,  300.,  500.])

In [105]: lognfit(x, ddof=1)
Out[105]: (4.9920345004312647, 0.88236457185021866)
</snippet></ROW><ROW><id>15633002</id><snippet>clicked</snippet></ROW><ROW><id>15633002</id><snippet>QPushButton</snippet></ROW><ROW><id>15633002</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.pushButtonSimulate = QtGui.QPushButton(self)
        self.pushButtonSimulate.setText("Simulate Mouse Release!")
        self.pushButtonSimulate.clicked.connect(self.on_pushButtonSimulate_clicked)

        self.layoutHorizontal = QtGui.QHBoxLayout(self)
        self.layoutHorizontal.addWidget(self.pushButtonSimulate)

    @QtCore.pyqtSlot()
    def on_pushButtonSimulate_clicked(self):
        mouseReleaseEvent = QtGui.QMouseEvent(
            QtCore.QEvent.MouseButtonRelease,
            self.cursor().pos(),
            QtCore.Qt.LeftButton,
            QtCore.Qt.LeftButton,
            QtCore.Qt.NoModifier,
        )

        QtCore.QCoreApplication.postEvent(self, mouseReleaseEvent)

    def mouseReleaseEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            print "Mouse Release"

        super(MyWindow, self).mouseReleaseEvent(event)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15633281</id><snippet>import spynner
URL = 'https://www.imleagues.com/Login.aspx'
address = "http://www.imleagues.com/School/Team/Home.aspx?Team=27d6c31187314397b00293fb0cfbc79a"

b = spynner.Browser()
b.show()
b.load(URL)
b.runjs('$("#ctl00_ContentPlaceHolder1_inUserName").val("testUser")')
b.runjs('$("#ctl00_ContentPlaceHolder1_inPassword").val("testPass")')
</snippet></ROW><ROW><id>15633529</id><snippet>import random

words = ['hello', 'apple', 'something', 'yeah', 'nope', 'lalala']
print [random.sample(words, 1)[0] for i in range(10)]
</snippet></ROW><ROW><id>15633532</id><snippet>p = (part for line in file for part in line.split())
</snippet></ROW><ROW><id>15633893</id><snippet>int</snippet></ROW><ROW><id>15633893</id><snippet>int</snippet></ROW><ROW><id>15633893</id><snippet>int(1./-2)
</snippet></ROW><ROW><id>15633893</id><snippet>int(1/2)
</snippet></ROW><ROW><id>15633893</id><snippet>from __future__ import division
int(1/2)
</snippet></ROW><ROW><id>15633893</id><snippet>&gt;&gt;&gt; def trunc_div(a,b):
    q, r = divmod(a,b)
    if  q &lt; 0 and r:
        q += 1
    return q

&gt;&gt;&gt; trunc_div(1,-2)
0
&gt;&gt;&gt; trunc_div(999999999999999999999999999999999999999999, -2)
-499999999999999999999999999999999999999999L
&gt;&gt;&gt; trunc_div(999999999999999999999999999999999999999999, 2)
499999999999999999999999999999999999999999L
&gt;&gt;&gt; trunc_div(1,2)
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15634178</id><snippet>re</snippet></ROW><ROW><id>15634178</id><snippet>rx = r'(?&lt;!System32.*)calc.exe'
re.search(rx, r'C:\Tools\calc.exe')

&gt; sre_constants.error: look-behind requires fixed-width pattern
</snippet></ROW><ROW><id>15634178</id><snippet>rx = r'(?&lt;!System32.*)calc.exe'
print regex.search(rx, r'C:\Tools\calc.exe')  # &lt;_regex.Match object at 0x1028dd238&gt;
print regex.search(rx, r'C:\Windows\System32\calc.exe') # None
</snippet></ROW><ROW><id>15634178</id><snippet>rx = r'^(?!.*System32).*calc.exe'
print re.search(rx, r'C:\Tools\calc.exe')  # &lt;_sre.SRE_Match object at 0x10aede238&gt;
print re.search(rx, r'C:\Windows\System32\calc.exe') # None
</snippet></ROW><ROW><id>15634186</id><snippet>'&lt;Shift-Button-1&gt;'</snippet></ROW><ROW><id>15634186</id><snippet>'&lt;Button-1&gt;</snippet></ROW><ROW><id>15634186</id><snippet>class App:
    def __init__(self, root):
        self.start = 0
        self.root = root
        self.sb = tk.Scrollbar(orient="vertical")
        text = tk.Text(root, width=40, height=20, yscrollcommand=self.sb.set)
        self.sb.config(command=text.yview)
        self.sb.pack(side="right",fill="y")
        text.pack(side="top", fill="both", expand=True)
        self.chkbuttons = [tk.Checkbutton(text="checkbutton %s" % i,padx=0,pady=0,bd=0)
                          for i in range(30)]                        
        for cb in self.chkbuttons:
            text.window_create("end", window=cb)
            text.insert("end", "\n")
            cb.bind("&lt;Button-1&gt;", self.selectstart)
            cb.bind("&lt;Shift-Button-1&gt;", self.selectrange)

    def selectstart(self, event):
        self.start = self.chkbuttons.index(event.widget)

    def selectrange(self, event):
        start = self.start
        end = self.chkbuttons.index(event.widget)
        sl = slice(min(start, end)+1, max(start, end))
        for cb in self.chkbuttons[sl]:
            cb.toggle()
        self.start = end

if __name__ == '__main__':
    root = tk.Tk()
    app = App(root)
    root.mainloop()
</snippet></ROW><ROW><id>15634343</id><snippet>fuzzywuzzy</snippet></ROW><ROW><id>15634343</id><snippet>fuzz</snippet></ROW><ROW><id>15634392</id><snippet>(defn my-pow [&amp; {:keys [base exponent]}]
  (Math/pow base exponent))

(def exp (partial my-pow :base 2.71828))
(exp :exponent 2)
(def square (partial my-pow :exponent 2))
(square :base 2)
</snippet></ROW><ROW><id>15634428</id><snippet>setup.py</snippet></ROW><ROW><id>15634428</id><snippet>setup(
    # ...
    data_files = [('', ['Tempate.xlsx',])],
)
</snippet></ROW><ROW><id>15634428</id><snippet>data_files</snippet></ROW><ROW><id>15634428</id><snippet>py2exe</snippet></ROW><ROW><id>15634428</id><snippet>import os

try:
    approot = os.path.dirname(os.path.abspath(__file__))
except NameError:  # We are the main py2exe script, not a module
    import sys
    approot = os.path.dirname(os.path.abspath(sys.argv[0]))
</snippet></ROW><ROW><id>15634645</id><snippet>def datedifference(a, b):
    date_format = "%Y-%m-%d"
    return (datetime.strptime(b, date_format) - datetime.strptime(a, date_format)).days
</snippet></ROW><ROW><id>15634645</id><snippet>data_dict</snippet></ROW><ROW><id>15634645</id><snippet>{k: datedifference(*v) for k, v in data_dict.iteritems()}
</snippet></ROW><ROW><id>15634645</id><snippet>data_dict</snippet></ROW><ROW><id>15634645</id><snippet>&gt;&gt;&gt; {k: datedifference(*v) for k, v in data_dict.iteritems()}                                                               {248: 329, 258: 160, 259: 130, 254: 329, 247: 147}
</snippet></ROW><ROW><id>15634645</id><snippet>data_dict</snippet></ROW><ROW><id>15634645</id><snippet>data_dict = {}

for row in data_list:
    if not row: continue
    key, dates = row[0], row[1:]
    if key in data_dict: continue  # already in there
    data_dict[key] = tuple(map(datetime.date.isoformat, dates))
</snippet></ROW><ROW><id>15634645</id><snippet>{248L: ('2011-04-07', '2012-03-01'), 258L: ('2011-04-07',), 259L: ('2011-04-07', '2011-09-14'), 254L: ('2011-04-07', '2012-03-01'), 247L: ('2011-04-07', '2011-09-14')}
</snippet></ROW><ROW><id>15634916</id><snippet>etree.tostring</snippet></ROW><ROW><id>15634916</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; root = etree.Element('root1')
&gt;&gt;&gt; element = etree.SubElement(root, 'element1')
&gt;&gt;&gt; print etree.tostring(root,pretty_print=True) ## Print document
&lt;root1&gt;
  &lt;element1/&gt;
&lt;/root1&gt;
&gt;&gt;&gt; with open('xmltree.xml','w') as f: ## Write document to file
...   f.write(etree.tostring(root,pretty_print=True))
...
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15636073</id><snippet>array</snippet></ROW><ROW><id>15636073</id><snippet>'f'</snippet></ROW><ROW><id>15636073</id><snippet>float values[3];
fread( values, sizeof( float ), 3, fh );
</snippet></ROW><ROW><id>15636563</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; l =  [[1, 2, 7], [1, 2, 3], [1, 2, 3, 7], [1, 2, 3, 5, 6, 7]]
&gt;&gt;&gt; #use chain(*l) to flatten the lists into a single list
&gt;&gt;&gt; c = Counter(chain(*l))
&gt;&gt;&gt; print c
Counter({1: 4, 2: 4, 3: 3, 7: 3, 5: 1, 6: 1})
&gt;&gt;&gt; #sort keys in order of descending frequency
&gt;&gt;&gt; sortedValues = sorted(c.keys(), key=lambda x: c[x], reverse=True)
&gt;&gt;&gt; #show the four most common values
&gt;&gt;&gt; print sortedValues[:4]
[1, 2, 3, 7]
&gt;&gt;&gt; #alternatively, show the values that appear in more than 50% of all lists
&gt;&gt;&gt; print [value for value, freq in c.iteritems() if float(freq) / len(l) &gt; 0.50]
[1, 2, 3, 7]
</snippet></ROW><ROW><id>15636610</id><snippet>2 * (sys.maxint + 1)</snippet></ROW><ROW><id>15636610</id><snippet>&gt;&gt;&gt; -1657698520 + (2 * (sys.maxint + 1))
2637268776L
</snippet></ROW><ROW><id>15636610</id><snippet>2 * (sys.maxint + 1)</snippet></ROW><ROW><id>15636642</id><snippet>location_id</snippet></ROW><ROW><id>15636642</id><snippet>user_haslocations = has_location.objects.filter(user_has=user)
locations = Location.objects.filter(id__in=user_haslocations.values('location_id'))
</snippet></ROW><ROW><id>15636642</id><snippet>location = Location.objects.filter(has_location__user_has=user.id)
</snippet></ROW><ROW><id>15636665</id><snippet>urlparse</snippet></ROW><ROW><id>15636665</id><snippet>import urlparse
result = urlparse.urlparse("postgresql://postgres:postgres@localhost/postgres")
username = result.username
password = result.password
database = result.path[1:]
hostname = result.hostname
connection = psycopg2.connect(
    database = database,
    user = username,
    password = password
    host = hostname
)
</snippet></ROW><ROW><id>15636687</id><snippet>sys.argv</snippet></ROW><ROW><id>15636687</id><snippet>multiprocessing</snippet></ROW><ROW><id>15636687</id><snippet>--multiprocessing-fork</snippet></ROW><ROW><id>15636687</id><snippet>argv</snippet></ROW><ROW><id>15636687</id><snippet>sys.argv = ['c:/pathToScript/scipt.py']</snippet></ROW><ROW><id>15636687</id><snippet>multiprocessing.set_executable()</snippet></ROW><ROW><id>15636687</id><snippet>sys.executable</snippet></ROW><ROW><id>15636687</id><snippet>set_executable(os.path.join(sys.exec_prefix, 'pythonw.exe'))</snippet></ROW><ROW><id>15636866</id><snippet>def update_func(model):
    def update(modeladmin, request, queryset):
        ...
        form = module_form(request.POST)
        if form.is_valid():
            one = form.cleaned_data[model]
            ...
        ...
    return update
admin.site.add_action(update_func('module'))
admin.site.add_action(update_func('src'))
</snippet></ROW><ROW><id>15636870</id><snippet>^(.).\1(.)\2((?!(\1|\2)).)*$
</snippet></ROW><ROW><id>15636870</id><snippet>(.).\1(.)\2</snippet></ROW><ROW><id>15636870</id><snippet>((?!(\1|\2)).)*</snippet></ROW><ROW><id>15636870</id><snippet>^(.).\1(.)\2((?!(.).*\4)(?!(\1|\2)).)*$
</snippet></ROW><ROW><id>15636870</id><snippet>^(.)((?!\1).)\1((?!(\1|\2)).)\3((?!(.).*\6)(?!(\1|\2|\3)).)*$
</snippet></ROW><ROW><id>15636994</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>15636994</id><snippet>templatetags</snippet></ROW><ROW><id>15636994</id><snippet>{% load %}</snippet></ROW><ROW><id>15636994</id><snippet>Management.templatetags.main_filters</snippet></ROW><ROW><id>15636994</id><snippet>__init__.py</snippet></ROW><ROW><id>15636994</id><snippet>templatetags</snippet></ROW><ROW><id>15636994</id><snippet>Management</snippet></ROW><ROW><id>15637065</id><snippet>line</snippet></ROW><ROW><id>15637065</id><snippet>idx == 1</snippet></ROW><ROW><id>15637065</id><snippet>break</snippet></ROW><ROW><id>15637065</id><snippet>idx==1</snippet></ROW><ROW><id>15637065</id><snippet>import shutil

input_fn = "15636114/input.txt"
output_fn = input_fn + ".tmp"

replacement_text = "hey"

with open(input_fn, "r") as f_in, open(output_fn, "w+") as f_out:
    for idx, line in enumerate(f_in):
        parts = line.split()
        if idx==1:
            parts[1] = replacement_text
        line = "    ".join(parts) + "\n"
        f_out.write(line)

shutil.move(output_fn, input_fn)        
</snippet></ROW><ROW><id>15637065</id><snippet>shutil.move</snippet></ROW><ROW><id>15637144</id><snippet>data = INPUT_LIST

class Item:
    def __init__(self, _id, name, type, parent):
        self._id = _id
        self.name = name
        self.type = type
        self.parent = parent
        self.children = []

    def get_dict(self):
        return {
            'id': self._id,
            'name': self.name,
            'type': self.type,
            'children': [child.get_dict() for child in self.children]
        }


lookup = dict((item['id'], Item(item['id'], item['name'], item['type'], item['parent'] if 'parent' in item else None)) for item in data)

root = []

for _id, item in lookup.items():
    if not item.parent:
        root.append(item)
    else:
        lookup[item.parent].children.append(item)

dict_result = [item.get_dict() for item in root]
</snippet></ROW><ROW><id>15637245</id><snippet>r'[a-zA-Z][a-zA-Z0-9_]*'
</snippet></ROW><ROW><id>15637245</id><snippet>+</snippet></ROW><ROW><id>15637245</id><snippet>|</snippet></ROW><ROW><id>15637245</id><snippet>.</snippet></ROW><ROW><id>15637245</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; names = ('x23', 'C2000001', 'x_w_3_dummy_1', 'x_b_1_0_0')
&gt;&gt;&gt; var_pattern = re.compile(r'[a-zA-Z][a-zA-Z0-9_]*')
&gt;&gt;&gt; for name in names:
...     print var_pattern.search(name).group()
... 
x23
C2000001
x_w_3_dummy_1
x_b_1_0_0
</snippet></ROW><ROW><id>15637245</id><snippet>+</snippet></ROW><ROW><id>15637245</id><snippet>-</snippet></ROW><ROW><id>15637245</id><snippet>&gt;</snippet></ROW><ROW><id>15637245</id><snippet>&lt;</snippet></ROW><ROW><id>15637245</id><snippet>=</snippet></ROW><ROW><id>15637245</id><snippet>&gt;&gt;&gt; var_pattern.findall('x23&lt;10\nC2000001=24\nx_w_3_dummy_1+15\nx_b_1_0_0-5')
['x23', 'C2000001', 'x_w_3_dummy_1', 'x_b_1_0_0']
</snippet></ROW><ROW><id>15637448</id><snippet>&gt;&gt;&gt; print st.decode('latin1')
/Märzen
</snippet></ROW><ROW><id>15637448</id><snippet>.decode()</snippet></ROW><ROW><id>15637448</id><snippet>unicode()</snippet></ROW><ROW><id>15637512</id><snippet>unique()</snippet></ROW><ROW><id>15637512</id><snippet>import numpy as np
a = np.array(['b','a','b','b','d','a','a','c','c'])
_, idx = np.unique(a, return_index=True)
print a[np.sort(idx)]
</snippet></ROW><ROW><id>15637512</id><snippet>Pandas.unique()</snippet></ROW><ROW><id>15637512</id><snippet>import pandas as pd

a = np.random.randint(0, 1000, 10000)
%timeit np.unique(a)
%timeit pd.unique(a)

1000 loops, best of 3: 644 us per loop
10000 loops, best of 3: 144 us per loop
</snippet></ROW><ROW><id>15637834</id><snippet>itertools.groupby</snippet></ROW><ROW><id>15637834</id><snippet>import itertools

[list(group) for key, group in itertools.groupby(my_list, key=lambda v: v[:3])]
</snippet></ROW><ROW><id>15637834</id><snippet>key</snippet></ROW><ROW><id>15637834</id><snippet>&gt;&gt;&gt; my_list = ['BLA1', 'BLA2', 'BLA3', 'ELE1', 'ELE2', 'ELE3', 'PRI1', 'PRI2', 'NEA1', 'NEA2', 'MAU1', 'MAU2', 'MAU3']
&gt;&gt;&gt; [list(group) for key, group in itertools.groupby(my_list, key=lambda v: v[:3])]
[['BLA1', 'BLA2', 'BLA3'], ['ELE1', 'ELE2', 'ELE3'], ['PRI1', 'PRI2'], ['NEA1', 'NEA2'], ['MAU1', 'MAU2', 'MAU3']]
</snippet></ROW><ROW><id>15637834</id><snippet>groupby</snippet></ROW><ROW><id>15637834</id><snippet>&gt;&gt;&gt; my_list = ['a1', 'a2', 'b1', 'b2', 'a3', 'a4']
&gt;&gt;&gt; [list(group) for key, group in itertools.groupby(my_list)]
[['a1', 'a2'], ['b1', 'b2'], ['a3', 'a4']]
</snippet></ROW><ROW><id>15637834</id><snippet>my_list</snippet></ROW><ROW><id>15637903</id><snippet>awk -F'.' -vs="$start_time" -ve="$end_time" '$1&gt;s &amp;&amp; $1&lt;e' logfile
</snippet></ROW><ROW><id>15637969</id><snippet>UserProfile</snippet></ROW><ROW><id>15637969</id><snippet>comments</snippet></ROW><ROW><id>15637969</id><snippet>UserProfile</snippet></ROW><ROW><id>15637969</id><snippet>Comments</snippet></ROW><ROW><id>15637969</id><snippet>class UserProfile(models.Model):
     user = models.OneToOneField(User) # each user can have exactly 1 profile
     comments = models.ManyToManyField(Comment) # each user can have mutilple comments


class Comment(models.Model):
    text = models.CharField(max_length=500, null=False, blank=False)
    to = # shoudl this be foreign key or many to many?
    # can a comment reference multiple users or just one user or no user?
</snippet></ROW><ROW><id>15638043</id><snippet>from twisted.internet.task import cooperate

def generate_update_deferreds(collection, many_docs):
    for doc in update_docs:
        d = collection.update({'_id': doc['_id']}, doc, upsert=True)
        yield d

work = generate_update_deferreds(...)
worker_tasks = []
for i in range(count):
    task = cooperate(work)
    worker_tasks.append(task)

all_done_deferred = DeferredList([task.whenDone() for task in worker_tasks])
</snippet></ROW><ROW><id>15638154</id><snippet>np.finite</snippet></ROW><ROW><id>15638154</id><snippet>~np.isnan</snippet></ROW><ROW><id>15638154</id><snippet>import numpy as np

reference = np.array([np.nan, 1])
signal = np.array([2, 2])
idx = ~np.isnan(reference)

print np.all(reference[idx] &lt; signal[idx])
</snippet></ROW><ROW><id>15638165</id><snippet>proc = subprocess.Popen(['/bin/bash'], stdin=PIPE, stdout=PIPE)
proc.communicate("source path/to/some_file\n"
                 "./some_program\n")
</snippet></ROW><ROW><id>15638165</id><snippet>--init-file file</snippet></ROW><ROW><id>15638165</id><snippet>-c command</snippet></ROW><ROW><id>15638165</id><snippet>--init-file</snippet></ROW><ROW><id>15638167</id><snippet>import cv
</snippet></ROW><ROW><id>15638167</id><snippet>from cv import *
</snippet></ROW><ROW><id>15638636</id><snippet>ipython profile locate</snippet></ROW><ROW><id>15638636</id><snippet>--debug</snippet></ROW><ROW><id>15638689</id><snippet>user.items</snippet></ROW><ROW><id>15638689</id><snippet>user.itemsQuota</snippet></ROW><ROW><id>15638689</id><snippet>'100' &gt; 1000</snippet></ROW><ROW><id>15638689</id><snippet>from django.template import Template, Context
from django.conf import settings

settings.configure()

t = Template('{% if a &gt; b %} a &gt; b {% else %} a &lt;= b {% endif %}')
print t.render(Context({ 'a' : '100', 'b' : 1000 }))
print t.render(Context({ 'a' : 100  , 'b' : 1000 }))
</snippet></ROW><ROW><id>15638689</id><snippet>a &gt; b 
a &lt;= b 
</snippet></ROW><ROW><id>15638689</id><snippet>t = Template('{% if a|add:"0" &gt; b|add:"0" %} a &gt; b {% else %} a &lt;= b {% endif %}')
</snippet></ROW><ROW><id>15638689</id><snippet>add</snippet></ROW><ROW><id>15638720</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>15638720</id><snippet>import inspect

argspec = inspect.getargspec(somefunction)
</snippet></ROW><ROW><id>15638720</id><snippet>argspec</snippet></ROW><ROW><id>15638720</id><snippet>*args</snippet></ROW><ROW><id>15638720</id><snippet>None</snippet></ROW><ROW><id>15638720</id><snippet>**kwargs</snippet></ROW><ROW><id>15638720</id><snippet>None</snippet></ROW><ROW><id>15638720</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def foo(bar, baz, spam='eggs', *monty, **python): pass
... 
&gt;&gt;&gt; inspect.getargspec(foo)
ArgSpec(args=['bar', 'baz', 'spam'], varargs='monty', keywords='python', defaults=('eggs',))
</snippet></ROW><ROW><id>15638726</id><snippet>O(1)</snippet></ROW><ROW><id>15638726</id><snippet>def online_variance(data):
    n = 0
    mean = 0
    M2 = 0

    for x in data:
        n = n + 1
        delta = x - mean
        mean = mean + delta/n
        M2 = M2 + delta*(x - mean)

    variance = M2/(n - 1)
    return variance
</snippet></ROW><ROW><id>15638791</id><snippet>In [275]: df = pd.DataFrame({'date': [20130101, 20130101, 20130102], 'location': ['a', 'a', 'c']})

In [276]: df
Out[276]:
       date location
0  20130101        a
1  20130101        a
2  20130102        c
</snippet></ROW><ROW><id>15638791</id><snippet>In [277]: df.groupby(['date', 'location']).apply(lambda sdf: sdf if len(sdf) &gt; 1 else None)
Out[277]:
                         date location
date     location
20130101 a        0  20130101        a
                  1  20130101        a
</snippet></ROW><ROW><id>15638791</id><snippet>In [278]: df.groupby(['date', 'location']).apply(lambda sdf: sdf if len(sdf) &gt; 1 else None).reset_index(drop=True)
Out[278]:
       date location
0  20130101        a
1  20130101        a
</snippet></ROW><ROW><id>15639126</id><snippet>ps</snippet></ROW><ROW><id>15639126</id><snippet>def IsThisProcessRunning( ps_name ):
  ps = subprocess.Popen("ps axf | grep %s  | grep -v grep" % ps_name, 
                        shell=True, stdout=subprocess.PIPE)
  output = ps.stdout.read()
  ps.stdout.close()
  ps.wait()

  if re.search(ps_name, output) is None:
      return False
  else:
      return True

IsThisProcessRunning('/usr/sbin/apache2') # True, if Apache2 is running.
</snippet></ROW><ROW><id>15639126</id><snippet>/usr/sbin/apache2</snippet></ROW><ROW><id>15639126</id><snippet>try:
    pf = file('/var/run/my_program.pid', 'r')
    pid = int(pf.read().strip())
    pf.close()
except IOError:
    pid = None

if pid:
   # Process is running.
</snippet></ROW><ROW><id>15639646</id><snippet>QuerySet.extra</snippet></ROW><ROW><id>15639646</id><snippet>Manager.raw</snippet></ROW><ROW><id>15639994</id><snippet>class MyForm(forms.ModelForm):
    my_date_field = forms.DateField()

    class Meta:
        model = MyModel
        widgets = {
            'my_date_field': forms.DateInput(format=('%d-%m-%Y'), 
                                             attrs={'class':'myDateClass', 
                                            'placeholder':'Select a date'})
        }
</snippet></ROW><ROW><id>15639994</id><snippet>widgets</snippet></ROW><ROW><id>15639994</id><snippet>Meta</snippet></ROW><ROW><id>15640138</id><snippet>y</snippet></ROW><ROW><id>15640138</id><snippet>def mk_func(y):
    def h(x):
        return x * y
    return h
</snippet></ROW><ROW><id>15640138</id><snippet>my_funcs=[mk_func(i) for i in (1, 3, 4, 7)]
</snippet></ROW><ROW><id>15640161</id><snippet>Session</snippet></ROW><ROW><id>15640161</id><snippet>Session.expunge_all()</snippet></ROW><ROW><id>15640161</id><snippet>Session.flush()</snippet></ROW><ROW><id>15640161</id><snippet>Point</snippet></ROW><ROW><id>15640161</id><snippet>Session.expunge()</snippet></ROW><ROW><id>15640162</id><snippet>del renWin, iren
</snippet></ROW><ROW><id>15640162</id><snippet>def close_window(iren):
    render_window = iren.GetRenderWindow()
    render_window.Finalize()
    iren.TerminateApp()
    del render_window, iren
</snippet></ROW><ROW><id>15640162</id><snippet>...
iren.Initialize()
renWin.Render()
iren.Start()

close_window(iren)
</snippet></ROW><ROW><id>15640162</id><snippet>del x</snippet></ROW><ROW><id>15640162</id><snippet>x.__del__()</snippet></ROW><ROW><id>15640162</id><snippet>__del__</snippet></ROW><ROW><id>15640162</id><snippet>__del__()</snippet></ROW><ROW><id>15640162</id><snippet>AttributeError</snippet></ROW><ROW><id>15640162</id><snippet>iren</snippet></ROW><ROW><id>15640162</id><snippet>vtkRenderWindowInteractor</snippet></ROW><ROW><id>15640162</id><snippet>renWin</snippet></ROW><ROW><id>15640162</id><snippet>vtkRenderWindow</snippet></ROW><ROW><id>15640162</id><snippet>iren</snippet></ROW><ROW><id>15640162</id><snippet>renWin</snippet></ROW><ROW><id>15640162</id><snippet>def close_window(iren):
    render_window = iren.GetRenderWindow()
    render_window.Finalize()
    iren.TerminateApp()
</snippet></ROW><ROW><id>15640162</id><snippet>...
iren.Initialize()
renWin.Render()
iren.Start()

close_window(iren)
del renWin, iren
</snippet></ROW><ROW><id>15640188</id><snippet>\x00\x1b</snippet></ROW><ROW><id>15640188</id><snippet>\x1b\x00</snippet></ROW><ROW><id>15640343</id><snippet>if len(original) &gt; 0
else
</snippet></ROW><ROW><id>15640343</id><snippet>if len(original) &gt; 0:
else:
</snippet></ROW><ROW><id>15640343</id><snippet>:</snippet></ROW><ROW><id>15640345</id><snippet>plot</snippet></ROW><ROW><id>15640345</id><snippet>df.plot()
df.plot(kind='bar')
...
</snippet></ROW><ROW><id>15640345</id><snippet>plot(df.index.map(lambda ts: ts.time()), df.value)
</snippet></ROW><ROW><id>15640345</id><snippet>plot(df.index.hour, df.value))
</snippet></ROW><ROW><id>15640519</id><snippet>eval</snippet></ROW><ROW><id>15640519</id><snippet>json</snippet></ROW><ROW><id>15640519</id><snippet>JSON.parse()</snippet></ROW><ROW><id>15640519</id><snippet>import json 

# lots of code...

@route("/my_page")
def my_page(request):
  return json.dumps({
    "siblings":["Eenie", "Meanie", "Meinie", "Mo"], 
    "ages":[1,2,3,4]
  })

# lots more code...
</snippet></ROW><ROW><id>15640519</id><snippet>$.getJSON('/my_page', function(data, textStatus, jqXHR) {
  /* Do stuff with the object */
});
</snippet></ROW><ROW><id>15640519</id><snippet>getJSON()</snippet></ROW><ROW><id>15640519</id><snippet>JSON.parse()</snippet></ROW><ROW><id>15640519</id><snippet>eval()</snippet></ROW><ROW><id>15640519</id><snippet>JSON.parse()</snippet></ROW><ROW><id>15640519</id><snippet>eval()</snippet></ROW><ROW><id>15641148</id><snippet>numpy</snippet></ROW><ROW><id>15641148</id><snippet>scipy</snippet></ROW><ROW><id>15641148</id><snippet>tables</snippet></ROW><ROW><id>15641148</id><snippet>pandas</snippet></ROW><ROW><id>15641148</id><snippet>skimage</snippet></ROW><ROW><id>15641148</id><snippet>os.system("taskset -p 0xff %d" % os.getpid())
</snippet></ROW><ROW><id>15641148</id><snippet>numpy</snippet></ROW><ROW><id>15641148</id><snippet>OPENBLAS_MAIN_FREE</snippet></ROW><ROW><id>15641148</id><snippet>GOTOBLAS_MAIN_FREE</snippet></ROW><ROW><id>15641148</id><snippet>OPENBLAS_MAIN_FREE=1 python myscript.py
</snippet></ROW><ROW><id>15641148</id><snippet>Makefile.rule</snippet></ROW><ROW><id>15641148</id><snippet>NO_AFFINITY=1
</snippet></ROW><ROW><id>15641167</id><snippet>subprocess.Popen('sh abc.sh &lt; a_file_that_you_prepared.txt',
                 shell=True,
                 stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>15641167</id><snippet>input_file = open('a_file_that_you_prepared.txt', 'r')
subprocess.Popen('sh abc.sh',
                 shell=True,
                 stdout=subprocess.PIPE,
                 stdin=input_file)
input_file.close()
</snippet></ROW><ROW><id>15641167</id><snippet>subprocess.Popen('sh abc.sh &lt; /dev/null',
                 shell=True,
                 stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>15641167</id><snippet>x = subprocess.Popen('sh abc.sh',
                 shell=True,
                 stdout=subprocess.PIPE,
                 stdin=subprocess.PIPE)

...

x.stdin.write('\n')
</snippet></ROW><ROW><id>15641175</id><snippet>add_node(XYZ)
add_edge(XYZ, A)
for edge incident on (X, Y, Z):
    v = nodes in edge not in (X, Y, Z, A)
    if v:
       remove_edge(edge)
       add_edge(v, XYZ)
for node in (X, Y, Z):
    remove_node(node)
</snippet></ROW><ROW><id>15641450</id><snippet>CURLOPT_OPENSOCKETFUNCTION</snippet></ROW><ROW><id>15641450</id><snippet>CURLOPT_PROGRESSFUNCTION</snippet></ROW><ROW><id>15641450</id><snippet>CURLOPT_HEADERFUNCTION</snippet></ROW><ROW><id>15641450</id><snippet>CURLOPT_DEBUGFUNCTION</snippet></ROW><ROW><id>15641471</id><snippet>list</snippet></ROW><ROW><id>15641471</id><snippet>tuple</snippet></ROW><ROW><id>15641471</id><snippet>dict</snippet></ROW><ROW><id>15641794</id><snippet>urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>15641794</id><snippet>os.path.join</snippet></ROW><ROW><id>15641794</id><snippet>os.path.join</snippet></ROW><ROW><id>15641794</id><snippet># Additional locations of static files
STATICFILES_DIRS = (
    os.path.join('static'),
)
</snippet></ROW><ROW><id>15641794</id><snippet>STATIC_URL</snippet></ROW><ROW><id>15641794</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>15641794</id><snippet>settings.py</snippet></ROW><ROW><id>15642065</id><snippet>.localize()</snippet></ROW><ROW><id>15642065</id><snippet>now()</snippet></ROW><ROW><id>15642065</id><snippet>.astimezone()</snippet></ROW><ROW><id>15642065</id><snippet>est = timezone('US/Eastern')
cst = timezone('US/Central')
curtime = cst.localize(datetime.datetime.now())
est_curtime = curtime.astimezone(est).strftime("%a %b %d %H:%M:%S %Z %Y"))

def run(self):
    print "%s says Hello World at time: %s" % (self.getName(), est_curtime)
</snippet></ROW><ROW><id>15642378</id><snippet>from tkinter import *

class Application(Frame):
    def say_hi(self):
        if self.var.get() or self.var2.get():
            msg = ''
            if self.var.get():
                msg = 'Radio button 1 is checked\n'
            if self.var2.get():
                msg += 'Radio button 2 is checked'

            print(msg) # to sdtout...
            top = Toplevel()
            top.title("Pop-up...")
            msg = Message(top, text=msg)
            msg.pack()
            button = Button(top, text="Close", command=top.destroy)
            button.pack()

    def createWidgets(self):
        self.QUIT = Button(self)
        self.QUIT["text"] = "Close"
        self.QUIT["fg"]   = "red"
        self.QUIT["command"] =  self.quit
        self.QUIT.pack({"side": "left"})

        self.var = IntVar()
        self.checkbox = Checkbutton(self)
        self.checkbox["text"] = 'radio1'
        self.checkbox["command"] = self.say_hi
        self.checkbox["variable"] = self.var
        self.checkbox.pack({"side": "left"})

        self.var2 = IntVar()
        self.checkbox2 = Checkbutton(self)
        self.checkbox2["text"] = 'radio2'
        self.checkbox2["command"] = self.say_hi
        self.checkbox2["variable"] = self.var2
        self.checkbox2.pack({"side": "left"})

    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.pack()
        self.createWidgets()

root = Tk()
app = Application(master=root)
app.mainloop()
</snippet></ROW><ROW><id>15642525</id><snippet>#!/usr/bin/env python

import sys
from twisted.internet import reactor
from twisted.internet.protocol import ServerFactory, ClientFactory, Protocol
from twisted.protocols import basic
from twisted.python import log

LISTEN_PORT = 2593
SERVER_PORT = 1234


class ServerProtocol(Protocol):
    def connectionMade(self):
        reactor.connectTCP('localhost', SERVER_PORT, MyClientFactory(self))

    def dataReceived(self, data):
        self.clientProtocol.transport.write(data)

class ClientProtocol(Protocol):
    def connectionMade(self):
        # Pass ServerProtocol a ref. to ClientProtocol
        self.serverProtocol.clientProtocol = self;  

    def dataReceived(self, data):
        self.serverProtocol.transport.write(data)

class MyServerFactory(ServerFactory):
    protocol = ServerProtocol
    def buildProtocol(self, addr):
        # Create ServerProtocol
        p = ServerFactory.buildProtocol(self, addr)
        return p

class MyClientFactory(ClientFactory):
    protocol = ClientProtocol
    def __init__(self, serverProtocol_):
        self.serverProtocol = serverProtocol_

    def buildProtocol(self, addr):
        # Create ClientProtocol
        p = ClientFactory.buildProtocol(self,addr)
        # Pass ClientProtocol a ref. to ServerProtocol
        p.serverProtocol = self.serverProtocol
        return p

def main():
    log.startLogging(sys.stdout)

    reactor.listenTCP(LISTEN_PORT, MyServerFactory())
    reactor.run()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15642525</id><snippet>reactor.connectTCP('localhost', SERVER_PORT, MyClientFactory(self))
#...
def __init__(self, serverProtocol_):
    self.serverProtocol = serverProtocol_
</snippet></ROW><ROW><id>15642525</id><snippet># Pass ClientProtocol a ref. to ServerProtocol
p.serverProtocol = self.serverProtocol
</snippet></ROW><ROW><id>15642525</id><snippet># Pass ServerProtocol a ref. to ClientProtocol
self.serverProtocol.clientProtocol = self;
</snippet></ROW><ROW><id>15642525</id><snippet>def dataReceived(self, data):
    self.clientProtocol.transport.write(data)
#...
def dataReceived(self, data):
    self.serverProtocol.transport.write(data)
</snippet></ROW><ROW><id>15642566</id><snippet>&gt;&gt;&gt; type(nested)
&lt;type 'dict'&gt;
</snippet></ROW><ROW><id>15642566</id><snippet>JSONDecoder</snippet></ROW><ROW><id>15642635</id><snippet>import Tkinter as tk

class ButtonBlock(object):
    def __init__(self, master):
        self.master = master
        self.button = []
        self.button_val = tk.IntVar()
        entry = tk.Entry()
        entry.grid(row=0, column=0)
        entry.bind('&lt;Return&gt;', self.onEnter)
    def onEnter(self, event):
        entry = event.widget
        num = int(entry.get())
        for button in self.button:
            button.destroy()
        for i in range(1, num+1):
            self.button.append(tk.Radiobutton(
                self.master, text=str(i), variable=self.button_val, value=i,
                command=self.onSelect))
            self.button[-1].grid(sticky='WENS', row=i, column=0, padx=1, pady=1)
    def onSelect(self):
        print(self.button_val.get())

if __name__ == '__main__':
    root = tk.Tk()
    ButtonBlock(root)
    root.mainloop()
</snippet></ROW><ROW><id>15642729</id><snippet>&gt;&gt;&gt; a = [[1.0, 1.2, 1.4], [2.0, 2.2], 5.0]
&gt;&gt;&gt; str(a)
'[[1.0, 1.2, 1.4], [2.0, 2.2], 5.0]'
&gt;&gt;&gt; str(a).translate(None,'[],')
'1.0 1.2 1.4 2.0 2.2 5.0'
</snippet></ROW><ROW><id>15642907</id><snippet>amount = getattr(user.week_one, 'squats')
</snippet></ROW><ROW><id>15643003</id><snippet>&gt;&gt;&gt; my_list = [[1,2,3,1, 3], [1,3,2]]
&gt;&gt;&gt; [(i,j) for i,x in enumerate(my_list) for j,y in enumerate(x) if y == 3]
[(0, 2), (0, 4), (1, 1)]
</snippet></ROW><ROW><id>15643545</id><snippet>wunschhandy = None</snippet></ROW><ROW><id>15643545</id><snippet>if</snippet></ROW><ROW><id>15643545</id><snippet>if handy == "2":
    print "\nSie möchten kein neues Handy"
    return handy,
elif handy == "1":
    wunschhandy = raw_input("\nBitte geben Sie den Namen des Handys ein: ")
    return handy, wunschhandy
else:
    Handy()
</snippet></ROW><ROW><id>15643545</id><snippet>Handy()</snippet></ROW><ROW><id>15643632</id><snippet>for patient in root:
    patient_code =  patient.find('PatientCharacteristics').find('patientCode')
    if patient_code.text == code:
            for visit in patient.find('Visits'):
                    visit_date = visit.find('VisitDate')
                    if visit_date.text == date:
                        swol28 = visit.find('DAS').find('Joints').find('SWOL28')
                        if swol28.text:
                            visit.find('DAS').find('Joints').set('SWOL28', new_swol28)
</snippet></ROW><ROW><id>15643892</id><snippet>key</snippet></ROW><ROW><id>15643892</id><snippet>lists.sort(key=lambda s: int(s.rsplit(None, 1)[-1]))
</snippet></ROW><ROW><id>15643892</id><snippet>key</snippet></ROW><ROW><id>15643892</id><snippet>lists</snippet></ROW><ROW><id>15643892</id><snippet>key</snippet></ROW><ROW><id>15643892</id><snippet>&gt;&gt;&gt; key_function = lambda s: int(s.rsplit(None, 1)[-1])
&gt;&gt;&gt; key_function('ben 10')
10
&gt;&gt;&gt; key_function('Guido van Rossum 42')
42
</snippet></ROW><ROW><id>15643892</id><snippet>[(20, 0, 'jack 20'), (10, 1, 'ben 10'), (50, 2, 'alisdar 50'), (35, 3, 'ollie 35')]
</snippet></ROW><ROW><id>15643892</id><snippet>&gt;&gt;&gt; lists = ['jack 20', 'ben 10', 'alisdar 50', 'ollie 35']
&gt;&gt;&gt; lists.sort(key=lambda s: int(s.rsplit(None, 1)[-1]))
&gt;&gt;&gt; lists
['ben 10', 'jack 20', 'ollie 35', 'alisdar 50']
</snippet></ROW><ROW><id>15644028</id><snippet>bin/instance run yourscript.py</snippet></ROW><ROW><id>15644028</id><snippet>from zope.app.component.hooks import setSite
from Testing.makerequest import makerequest
from AccessControl.SecurityManagement import newSecurityManager

site_id = 'Plone'     # adjust to match your Plone site object id.
admin_user = 'admin'  # usually 'admin', probably won't need adjusting
app = makerequest(app)
site = app[site_id]
setSite(site)
user = app.acl_users.getUser(admin_user).__of__(site.acl_users)
newSecurityManager(None, user)

# `site` is your Plone site, now correctly set up
</snippet></ROW><ROW><id>15644028</id><snippet>bin/instance run path/to/yourscript.py
</snippet></ROW><ROW><id>15644289</id><snippet>import pkg_resources
pkg_resources.declare_namespace(__name__)
</snippet></ROW><ROW><id>15644320</id><snippet>def tell(self):
    return self.pos
</snippet></ROW><ROW><id>15644544</id><snippet>add_mutually_exclusive_group()</snippet></ROW><ROW><id>15644544</id><snippet>&gt;&gt;&gt; megroup = t1sub.add_mutually_exclusive_group()
&gt;&gt;&gt; megroup.add_argument('--in', action='store_true')
_StoreTrueAction(option_strings=['--in'], dest='in', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; megroup.add_argument('--out', action='store_true')
_StoreTrueAction(option_strings=['--out'], dest='out', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.parse_args(['task1', '--in'])
Namespace(func=&lt;function task1 at 0x10a0d9050&gt;, in=True, out=False)
&gt;&gt;&gt; t1sub.print_help()
usage:  task1 [-h] [--in | --out]

optional arguments:
  -h, --help  show this help message and exit
  --in
  --out
&gt;&gt;&gt; parser.print_help()
usage: [-h] {task1,task2} ...

How can I have mutually exclusive groups in subparsers?

positional arguments:
  {task1,task2}

optional arguments:
  -h, --help     show this help message and exit
</snippet></ROW><ROW><id>15644551</id><snippet>from selenium import webdriver
browser = webdriver.Chrome()
browser.get("http://www.google.com")
time.sleep(5)
browser.close()
</snippet></ROW><ROW><id>15644618</id><snippet>index</snippet></ROW><ROW><id>15644618</id><snippet>seats = [[True, True, True, False, True, True, True, False, False, True],
         [True, True, True, True, True, True, True, False, False, True],
         [True, True, True, False, True, True, True, False, False, True],
         [True, True, True, False, True, True, True, False, False, True],
         [True, True, True, True, True, True, True, False, False, True]]

for index, row in enumerate(seats):
    consecutive_seats = 0
    for seat in row:
        if seat:
            consecutive_seats += 1
            if consecutive_seats &gt;= 6:
                print('There are at least six seats available on row', index)
                break
        else:
            consecutive_seats = 0
</snippet></ROW><ROW><id>15644618</id><snippet>enumerate</snippet></ROW><ROW><id>15644618</id><snippet>seats</snippet></ROW><ROW><id>15644618</id><snippet>for index, row in enumerate(seats, start=1): ...
</snippet></ROW><ROW><id>15644618</id><snippet>enumerate</snippet></ROW><ROW><id>15644618</id><snippet>Tuple</snippet></ROW><ROW><id>15644618</id><snippet>index</snippet></ROW><ROW><id>15644618</id><snippet>row</snippet></ROW><ROW><id>15644618</id><snippet>seat</snippet></ROW><ROW><id>15644618</id><snippet>True</snippet></ROW><ROW><id>15644618</id><snippet>seat == True</snippet></ROW><ROW><id>15644618</id><snippet>True</snippet></ROW><ROW><id>15644618</id><snippet>break</snippet></ROW><ROW><id>15644618</id><snippet>False</snippet></ROW><ROW><id>15644618</id><snippet>Seat</snippet></ROW><ROW><id>15644618</id><snippet>is_available</snippet></ROW><ROW><id>15644715</id><snippet>save()</snippet></ROW><ROW><id>15644715</id><snippet>post_save</snippet></ROW><ROW><id>15644715</id><snippet>OrderBilling</snippet></ROW><ROW><id>15644715</id><snippet>ProfileBilling</snippet></ROW><ROW><id>15644715</id><snippet>OrderBilling</snippet></ROW><ROW><id>15644715</id><snippet>orderbil_instance = kwargs['instance']
</snippet></ROW><ROW><id>15644715</id><snippet>ProfileBilling.objects.create(name=orderbil_instance.name, ....)
</snippet></ROW><ROW><id>15644715</id><snippet>post_save</snippet></ROW><ROW><id>15644715</id><snippet>def do_something(sender, **kwargs):
    # Getting OrderBilling instance which get saved just now
    orderbil_instance = kwargs['instance']
    # Save the data into new ProfileBilling
    ProfileBilling.objects.create(name=orderbil_instance.name, ....)
</snippet></ROW><ROW><id>15644885</id><snippet>seek</snippet></ROW><ROW><id>15644885</id><snippet>with open(filename) as fin:
    fin.seek(start_index)
    data = fin.read(end_index - start_index)
</snippet></ROW><ROW><id>15644892</id><snippet>String()</snippet></ROW><ROW><id>15644892</id><snippet>datetime.date()</snippet></ROW><ROW><id>15644892</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>15644892</id><snippet>Date()</snippet></ROW><ROW><id>15644892</id><snippet>date</snippet></ROW><ROW><id>15644892</id><snippet>datetime.date()</snippet></ROW><ROW><id>15644892</id><snippet>{'jersey_colour': u'Blue',
 'team': u'Toronto Maple Leafs',
 'stadium': u'Air Canada Center',
 'date': datetime.date(2013, 3, 25),
 'assists': 301,
 'goals': 151}
</snippet></ROW><ROW><id>15644900</id><snippet>URLconf</snippet></ROW><ROW><id>15644900</id><snippet>url(r'^post/(?P&lt;pk&gt;\d+)/(?P&lt;post_title&gt;)', DetailView.as_view(
                    model = post,
                    template_name = "post.html")),
</snippet></ROW><ROW><id>15644900</id><snippet>url(r'^post/(?P&lt;pk&gt;\d+)/(?P&lt;post_title&gt;[-\w]+)/$', DetailView.as_view(
                    model = post,
                    template_name = "post.html")),
</snippet></ROW><ROW><id>15644900</id><snippet>URLconf</snippet></ROW><ROW><id>15644900</id><snippet>DetailView</snippet></ROW><ROW><id>15644900</id><snippet>URLconf</snippet></ROW><ROW><id>15644900</id><snippet>ListView</snippet></ROW><ROW><id>15644900</id><snippet>posts/</snippet></ROW><ROW><id>15644900</id><snippet>post/</snippet></ROW><ROW><id>15644900</id><snippet>tags</snippet></ROW><ROW><id>15644900</id><snippet>URLconf</snippet></ROW><ROW><id>15644934</id><snippet>p.sendline("sudo date -s \"%(easterndate)s\"" % locals())
</snippet></ROW><ROW><id>15644934</id><snippet>%</snippet></ROW><ROW><id>15644934</id><snippet>sendline</snippet></ROW><ROW><id>15645089</id><snippet>def rot2(a):
    n = len(a)
    for x in range((n + 1) / 2):
        for y in range(n / 2):
            a[x][y], a[n-1-y][x], a[y][n-1-x], a[n-1-x][n-1-y] = (
                                                      a[y][n-1-x],
                                                      a[x][y], 
                                                      a[n-1-x][n-1-y],
                                                      a[n-1-y][x],
                                                 )
</snippet></ROW><ROW><id>15645089</id><snippet>1 2 3
4 5 6
7 8 9
</snippet></ROW><ROW><id>15645089</id><snippet>N / 2 = 1</snippet></ROW><ROW><id>15645089</id><snippet>(N + 1)/2 = 2</snippet></ROW><ROW><id>15645089</id><snippet>x = [0, 2)</snippet></ROW><ROW><id>15645089</id><snippet>y = [0, 1)</snippet></ROW><ROW><id>15645089</id><snippet> 1 2 | 3
_____|
 4 5   6
 7 8   9
</snippet></ROW><ROW><id>15645089</id><snippet>1 ← 3 ← 7 ← 9 (← 1)</snippet></ROW><ROW><id>15645089</id><snippet>2 ← 6 ← 8 ← 4 (← 2)</snippet></ROW><ROW><id>15645089</id><snippet>a b c d e
f g h i j
k l m n o
p q r s t
u v w x y
</snippet></ROW><ROW><id>15645089</id><snippet>N / 2 = 2</snippet></ROW><ROW><id>15645089</id><snippet>(N + 1)/2 = 3</snippet></ROW><ROW><id>15645089</id><snippet>x = [0, 3)</snippet></ROW><ROW><id>15645089</id><snippet>y = [0, 2)</snippet></ROW><ROW><id>15645089</id><snippet>a b c | d e
f g h | i j
______|
k l m   n o
p q r   s t
u v w   x y
</snippet></ROW><ROW><id>15645089</id><snippet>a ← e ← y ← u
f ← d ← t ← v
b ← j ← x ← p
g ← i ← s ← q
c ← o ← w ← k
h ← n ← r ← l
</snippet></ROW><ROW><id>15645121</id><snippet>def xml_documents(fileobj):
    document = []
    for line in fileobj:
        if line.strip().startswith('&lt;?xml') and document:
                yield ''.join(document)
                document = []
        document.append(line)

    if document:
        yield ''.join(document)
</snippet></ROW><ROW><id>15645121</id><snippet>ElementTree.fromstring()</snippet></ROW><ROW><id>15645121</id><snippet>with open('file_with_multiple_xmldocuments') as fileobj:
    for xml in xml_documents(fileobj):
        tree = ElementTree.fromstring(xml)
</snippet></ROW><ROW><id>15645206</id><snippet>partial</snippet></ROW><ROW><id>15645206</id><snippet>split</snippet></ROW><ROW><id>15645206</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>15645206</id><snippet>def split(self, *args):
    if len(args) &gt; 2:
        raise TypeError(...)
    sep = args[0] if args else None
    maxsplit = args[1] if len(args) &gt; 1 else -1
    ...
</snippet></ROW><ROW><id>15645206</id><snippet>partial</snippet></ROW><ROW><id>15645206</id><snippet>def partial(func, *args, **keywords):
    def newfunc(*fargs, **fkeywords):
        newkeywords = keywords.copy()
        newkeywords.update(fkeywords)
        return func(*(args + fargs), **newkeywords)
    newfunc.func = func
    newfunc.args = args
    newfunc.keywords = keywords
    return newfunc
</snippet></ROW><ROW><id>15645206</id><snippet>return func(*(args + fargs), **newkeywords)</snippet></ROW><ROW><id>15645206</id><snippet>partial</snippet></ROW><ROW><id>15645206</id><snippet>lambda</snippet></ROW><ROW><id>15645206</id><snippet>partial</snippet></ROW><ROW><id>15645206</id><snippet>maxsplit</snippet></ROW><ROW><id>15645206</id><snippet>&gt;&gt;&gt; 'some string with spaces'.split(maxsplit=2)
['some', 'string', 'with spaces']
</snippet></ROW><ROW><id>15645413</id><snippet>with open("file.txt") as fp:
    for line in fp:
        if line.startswith('?'):
            print line
</snippet></ROW><ROW><id>15645413</id><snippet>with ... as</snippet></ROW><ROW><id>15645864</id><snippet>self.fis</snippet></ROW><ROW><id>15645864</id><snippet>class JsonIterator(object):
    def __init__(self,folder):
        self.root = os.path.join(os.getcwd(), folder)
        self.fis = [fi for fi in os.listdir(folder) if "lyrics" in fi]

    def __iter__(self):
        for fi in self.fis:
            with open(os.path.join(self.root, fi)) as f:
                obj = json.load(f)
            yield obj
</snippet></ROW><ROW><id>15645940</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>15645940</id><snippet>&lt;code&gt;</snippet></ROW><ROW><id>15645940</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>15645940</id><snippet>&lt;code&gt;</snippet></ROW><ROW><id>15645940</id><snippet>&lt;samp&gt;</snippet></ROW><ROW><id>15646035</id><snippet>import tokenize
import token
import io
import collections

class Token(collections.namedtuple('Token', 'num val start end line')):
    @property
    def name(self):
        return token.tok_name[self.num]

def get_non_string(text):
    result = []
    for tok in tokenize.generate_tokens(io.BytesIO(text).readline):
        tok = Token(*tok)
        # print(tok.name, tok.val)
        if tok.name != 'STRING':
            result.append(tok.val)
    return ''.join(result)    

print(get_non_string("hello'''everyone'''!' :)'''"))
</snippet></ROW><ROW><id>15646035</id><snippet>hello!
</snippet></ROW><ROW><id>15646135</id><snippet>&lt;?= $views . ' view' . ($views == 1 ? '' : 's'); ?&gt;
</snippet></ROW><ROW><id>15646180</id><snippet>       for line in group:
            with open(output_name, 'a') as outfile:
                outfile.write(line)
</snippet></ROW><ROW><id>15646180</id><snippet>            with open(output_name, 'a') as outfile:
                outfile.write(''.join(group))
</snippet></ROW><ROW><id>15646216</id><snippet>sudo('pserve --daemon development.ini', pty=False)</snippet></ROW><ROW><id>15646216</id><snippet>pserve --daemon</snippet></ROW><ROW><id>15646299</id><snippet>&gt;&gt;&gt; [1,]
[1]
&gt;&gt;&gt; [1] == [1,]
True
</snippet></ROW><ROW><id>15646299</id><snippet>&gt;&gt;&gt; (1)
1
&gt;&gt;&gt; (1,)
(1,)
&gt;&gt;&gt; (1) == (1,)
False
</snippet></ROW><ROW><id>15646299</id><snippet>[c,] + s</snippet></ROW><ROW><id>15646299</id><snippet>c</snippet></ROW><ROW><id>15646833</id><snippet>strong = li.find_all("strong")
if strong:
    yield strong
</snippet></ROW><ROW><id>15646833</id><snippet>find_all()</snippet></ROW><ROW><id>15646833</id><snippet>yield from</snippet></ROW><ROW><id>15647097</id><snippet>-?</snippet></ROW><ROW><id>15647097</id><snippet>+</snippet></ROW><ROW><id>15647097</id><snippet>*</snippet></ROW><ROW><id>15647097</id><snippet>MatchObject</snippet></ROW><ROW><id>15647097</id><snippet>.start()</snippet></ROW><ROW><id>15647097</id><snippet>.end()</snippet></ROW><ROW><id>15647097</id><snippet>for val in data:
    if val is not None and (val.end() - val.start()) == 11:
        result.append(val.groupdict())
</snippet></ROW><ROW><id>15647231</id><snippet>static</snippet></ROW><ROW><id>15647231</id><snippet>static</snippet></ROW><ROW><id>15647231</id><snippet>staticfiles</snippet></ROW><ROW><id>15647231</id><snippet>  &lt;head&gt;
    {% load static %}
    &lt;link rel="stylesheet" type="text/css" href="{% static "css/style.css" %}"&gt;
  &lt;/head&gt;
</snippet></ROW><ROW><id>15647231</id><snippet>static</snippet></ROW><ROW><id>15647231</id><snippet>RequestContext</snippet></ROW><ROW><id>15647231</id><snippet>staticfiles</snippet></ROW><ROW><id>15647231</id><snippet>static</snippet></ROW><ROW><id>15647231</id><snippet>STATICFILES_STORAGE</snippet></ROW><ROW><id>15647374</id><snippet>data={'data[]':'downloadable_file1.tar'}
req = requests.post('webpage/data.php', data)
with open('file.data', 'wb') as file:
    file.write(req.content)
</snippet></ROW><ROW><id>15647665</id><snippet>import numpy as np

# Create large arrays x and y.
# Note they are 1e4 not 1e6 b/c of memory issues creating random numpy matrices (CookieOfFortune) 
# However, the same principles apply to larger arrays
x = np.random.randn(10000, 10000)
y = np.random.randn(10000, 10000)

# Create memory maps for x and y arrays
xmap = np.memmap('xfile.dat', dtype='float32', mode='w+', shape=x.shape)
ymap = np.memmap('yfile.dat', dtype='float32', mode='w+', shape=y.shape)

# Fill memory maps with data
xmap[:] = x[:]
ymap[:] = y[:]

# Create memory map for out of core dot product result
prodmap = np.memmap('prodfile.dat', dtype='float32', mode='w+', shape=x.shape)

# Due out of core dot product and write data
prodmap[:] = np.memmap.dot(xmap, ymap)

# Create memory map for out of core addition result
addmap = np.memmap('addfile.dat', dtype='float32', mode='w+', shape=x.shape)

# Due out of core addition and write data
addmap[:] = xmap + ymap

# Create memory map for out of core scaling result
scalemap = np.memmap('scalefile.dat', dtype='float32', mode='w+', shape=x.shape)

# Define scaling constant
scale = 1.3

# Due out of core  scaling and write data
scalemap[:] = scale * xmap
</snippet></ROW><ROW><id>15647665</id><snippet>np.memmap(filename)</snippet></ROW><ROW><id>15647665</id><snippet>np.memmap</snippet></ROW><ROW><id>15647716</id><snippet>finalMap = {}
for d in fruitColourMapping:
    finalMap.update(d)
</snippet></ROW><ROW><id>15647823</id><snippet>deque</snippet></ROW><ROW><id>15647823</id><snippet>from collections import deque

with open('somefile') as fin:
    last3 = deque(fin, 3)
</snippet></ROW><ROW><id>15647823</id><snippet>from collections import deque

with open('somefile') as fin, open('outputfile', 'w') as fout:
    fout.writelines(deque(fin, 3))
</snippet></ROW><ROW><id>15648144</id><snippet>"A"</snippet></ROW><ROW><id>15648144</id><snippet>"B"</snippet></ROW><ROW><id>15648144</id><snippet>alpha_data = [('A', 'Apple', 14.5), ('B', 'Banana', 23.4)]

user_input = "A"

[rec for rec in alpha_data if rec[0] == user_input]
Out[4]: [('A', 'Apple', 14.5)]
</snippet></ROW><ROW><id>15648144</id><snippet>"A"</snippet></ROW><ROW><id>15648144</id><snippet>"B"</snippet></ROW><ROW><id>15648144</id><snippet>dict</snippet></ROW><ROW><id>15648144</id><snippet>alpha_dict = {"A": ("Apple", 14.5), "B": ("Banana", 23.4)}

user_input = "A"

alpha_dict[user_input]
Out[8]: ('Apple', 14.5)
</snippet></ROW><ROW><id>15648144</id><snippet>portfolio_list</snippet></ROW><ROW><id>15648144</id><snippet>portfolio_list</snippet></ROW><ROW><id>15648144</id><snippet>EXCHANGE_DATA = [('AIA', 'Auckair', 1.50),
            ('AIR', 'Airnz', 5.60),
            ('AMP', 'Amp',3.22), 
            ('ANZ', 'Anzbankgrp', 26.25),
            ('ARG', 'Argosy', 12.22),
            ('CEN', 'Contact', 11.22),
            ('CNU', 'Chorus',3.01),
            ('DIL', 'Diligent', 5.3),
            ('DNZ', 'Dnz Property', 2.33),
            ('EBO', 'Ebos', 1.1)]

portfolio_str=input("Please list portfolio: ")
portfolio_str= portfolio_str.replace(' ','')
portfolio_str= portfolio_str.upper()
portfolio_list= portfolio_str.split(',')
</snippet></ROW><ROW><id>15648144</id><snippet>Please list portfolio: AIA, ARG
</snippet></ROW><ROW><id>15648144</id><snippet>print('{:&lt;6} {:&lt;20} {:&gt;8}'.format('Code', 'Name', 'Price'))
Code   Name                    Price

for code in portfolio_list:
    # This assumes there will only be one record per code
    rec = [rec for rec in EXCHANGE_DATA if rec[0] == code][0]
    # The *rec part is using a neat python feature called
    # tuple unpacking, google it if you're not familiar with it
    print('{:&lt;6} {:&lt;20} {:&gt;8.2f}'.format(*rec))
</snippet></ROW><ROW><id>15648144</id><snippet>AIA    Auckair                  1.50
ARG    Argosy                  12.22
</snippet></ROW><ROW><id>15648210</id><snippet>client</snippet></ROW><ROW><id>15648210</id><snippet>friendly_name</snippet></ROW><ROW><id>15648210</id><snippet>@app.route('/wait', methods=['POST'])
def wait():
    response = twiml.Response()
    response.say("You are %s in the queue." % request.form['QueuePosition'])
    response.play("http://com.twilio.music.classical.s3.amazonaws.com/BusyStrings.mp3")
    account_sid = "*****"
    auth_token = "*****"
    client = TwilioRestClient(account_sid, auth_token)
    queue = client.queues.get(request.form['QueueSid']) #Get the queue based on SID
    friendlyName = queue.friendly_name; #Obtain the queue's Friendly Name
    client.sms.messages.create(to="+15555555555", from_="+15555555554", body="A caller is in the call queue - %(num)s in queue %(queue)s" % {"num": request.form['From'], "queue" : friendlyName}) #SMS with caller ID and queue's friendly name
    return str(response)
</snippet></ROW><ROW><id>15648235</id><snippet>except IndexError:
</snippet></ROW><ROW><id>15648235</id><snippet>list[-k]</snippet></ROW><ROW><id>15648235</id><snippet>list[len(list)-k]</snippet></ROW><ROW><id>15648235</id><snippet>if b+c!=0:
</snippet></ROW><ROW><id>15648235</id><snippet>(0,0)</snippet></ROW><ROW><id>15648235</id><snippet>for b in range(-1, 2):
    for c in range(-1, 2):
</snippet></ROW><ROW><id>15648235</id><snippet>(b,c)</snippet></ROW><ROW><id>15648235</id><snippet>(-b,-c)</snippet></ROW><ROW><id>15648422</id><snippet>[root@ichristo_dev]# cat process.py  -- A program that reads stdin for input
#! /usr/bin/python

inp = 0  
while(int(inp) != 10):  
    print "Enter a value: "  
    inp = raw_input()  
    print "Got", inp  


[root@ichristo_dev]# cat communicate.py
#! /usr/bin/python

from subprocess import Popen, PIPE  

p = Popen("./process.py", stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True)  
o, e = p.communicate("10")  
print o  


[root@ichristo_dev]#./communicate.py  
Enter a value:   
Got 10
</snippet></ROW><ROW><id>15648779</id><snippet>migration</snippet></ROW><ROW><id>15648779</id><snippet>Data Migration</snippet></ROW><ROW><id>15648779</id><snippet>weekTwo</snippet></ROW><ROW><id>15648779</id><snippet>null</snippet></ROW><ROW><id>15648779</id><snippet>blank</snippet></ROW><ROW><id>15648779</id><snippet>weekTwo = models.OneToOneField(WeekTwo, null=True, blank=True)
</snippet></ROW><ROW><id>15648779</id><snippet>python manage.py schemamigration my_app --auto
</snippet></ROW><ROW><id>15648779</id><snippet>python manage.py migrate
</snippet></ROW><ROW><id>15648779</id><snippet>weekTwo</snippet></ROW><ROW><id>15648779</id><snippet>weekTwo = models.OneToOneField(WeekTwo)
</snippet></ROW><ROW><id>15648779</id><snippet>generate</snippet></ROW><ROW><id>15648779</id><snippet>migrate</snippet></ROW><ROW><id>15648779</id><snippet>NULL</snippet></ROW><ROW><id>15648779</id><snippet>default</snippet></ROW><ROW><id>15648779</id><snippet>schemamigration</snippet></ROW><ROW><id>15648779</id><snippet>OneToOneField</snippet></ROW><ROW><id>15648779</id><snippet>null</snippet></ROW><ROW><id>15648779</id><snippet>blank</snippet></ROW><ROW><id>15648779</id><snippet>Field</snippet></ROW><ROW><id>15648779</id><snippet>weekTwo = models.ForeignKey(WeekTwo)
</snippet></ROW><ROW><id>15649005</id><snippet>deque</snippet></ROW><ROW><id>15649005</id><snippet>\n</snippet></ROW><ROW><id>15649005</id><snippet>from collections import deque

path = 'test.txt'

with open(path, 'r') as file:
    lines = deque(file, 4)
    lines.append("\nthis is an additional line.")

with open(path, 'w') as file:
    file.writelines(lines)
</snippet></ROW><ROW><id>15649011</id><snippet>output = (np.max(b,axis=1)[...,None] == b) &amp; (b &gt; a)
</snippet></ROW><ROW><id>15649011</id><snippet>b</snippet></ROW><ROW><id>15649011</id><snippet>np.max(b,axis=1)[...,None] == b
</snippet></ROW><ROW><id>15649011</id><snippet>np.max(b,axis=1)[...,np.newaxis] == b
</snippet></ROW><ROW><id>15649139</id><snippet>.save()</snippet></ROW><ROW><id>15649139</id><snippet>xlwt</snippet></ROW><ROW><id>15649139</id><snippet>StringIO</snippet></ROW><ROW><id>15649139</id><snippet>import StringIO

f = StringIO.StringIO() # create a file-like object 

wbk = xlwt.Workbook()
earnings_tab = wbk.add_sheet('EARNINGS')

wbk.save(f) # write to stdout
</snippet></ROW><ROW><id>15649139</id><snippet>cStringIO</snippet></ROW><ROW><id>15649139</id><snippet>StringIO</snippet></ROW><ROW><id>15649139</id><snippet>cStringIO</snippet></ROW><ROW><id>15649139</id><snippet>StringIO</snippet></ROW><ROW><id>15649139</id><snippet>io</snippet></ROW><ROW><id>15649204</id><snippet>bi, idxb = np.unique(b, return_index=True)
months = bi[np.argsort(idxb)]
</snippet></ROW><ROW><id>15649204</id><snippet>b[...]</snippet></ROW><ROW><id>15649204</id><snippet>sort</snippet></ROW><ROW><id>15649204</id><snippet>argsort</snippet></ROW><ROW><id>15649204</id><snippet>bi, idxb = np.unique(b, return_index=True)
months = b[np.sort(idxb)]
</snippet></ROW><ROW><id>15649204</id><snippet>Python 2.7.3 (default, Oct 23 2012, 13:06:50) 

IPython 0.13.1 -- An enhanced Interactive Python.

In [1]: import numpy as np

In [2]: np.__version__
Out[2]: '1.7.0'

In [3]: from platform import architecture

In [4]: architecture()
Out[4]: ('64bit', '')

In [5]: f = open('test.txt','r')

In [6]: lines = np.array([line.strip() for line in f.readlines()])

In [7]: _, ilines = np.unique(lines, return_index = True)

In [8]: months = lines[np.sort(ilines)]

In [9]: months
Out[9]: 
array(['Aug-09', 'Sep-09', 'Oct-09', 'Nov-09', 'Dec-09', 'Jan-10',
       'Feb-10', 'Mar-10', 'Apr-10', 'May-10', 'Jun-10', 'Jul-10',
       'Aug-10', 'Sep-10', 'Oct-10', 'Nov-10', 'Dec-10', 'Jan-11',
       'Feb-11', 'Mar-11', 'Apr-11', 'May-11', 'Jun-11', 'Jul-11',
       'Aug-11', 'Sep-11', 'Oct-11', 'Nov-11', 'Dec-11', 'Jan-12',
       'Feb-12', 'Mar-12', 'Apr-12', 'May-12', 'Jun-12', 'Jul-12',
       'Aug-12', 'Sep-12', 'Oct-12', 'Nov-12', 'Dec-12', 'Jan-13'], 
      dtype='|S6')
</snippet></ROW><ROW><id>15649204</id><snippet>Python 2.7.3 (default, Aug  1 2012, 05:14:39) 

IPython 0.12.1 -- An enhanced Interactive Python.

In [1]: import numpy as np

In [2]: np.__version__
Out[2]: '1.6.1'

In [3]: from platform import architecture

In [4]: architecture()
Out[4]: ('64bit', 'ELF')

In [5]: f = open('test.txt','r')

In [6]: lines = np.array([line.strip() for line in f.readlines()])

In [7]: _, ilines = np.unique(lines, return_index=True)

In [8]: months = lines[np.sort(ilines)]

In [9]: months
Out[9]: 
array(['Feb-10', 'Aug-10', 'Nov-10', 'Oct-12', 'Oct-11', 'Jul-10',
       'Feb-12', 'Sep-11', 'Jan-10', 'Apr-10', 'May-10', 'Sep-09',
       'Mar-11', 'Jun-12', 'Jul-12', 'Dec-09', 'Aug-09', 'Nov-12',
       'Dec-12', 'Apr-12', 'Jun-11', 'Jan-11', 'Jul-11', 'Sep-10',
       'Jan-12', 'Dec-10', 'Oct-09', 'Nov-11', 'Oct-10', 'Mar-12',
       'Jan-13', 'Nov-09', 'May-11', 'Mar-10', 'Jun-10', 'Dec-11',
       'May-12', 'Feb-11', 'Aug-11', 'Sep-12', 'Apr-11', 'Aug-12'], 
      dtype='|S6')
</snippet></ROW><ROW><id>15649204</id><snippet>Python 2.7.3 (default, Aug  1 2012, 05:14:39) 

IPython 0.12.1 -- An enhanced Interactive Python.

In [1]: import numpy as np

In [2]: np.__version__
Out[2]: '1.7.0'

In [3]: f = open('test.txt','r')

In [4]: lines = np.array([line.strip() for line in f.readlines()])

In [5]: _, ilines = np.unique(lines, return_index=True)

In [6]: months = lines[np.sort(ilines)]

In [7]: months
Out[7]: 
array(['Aug-09', 'Sep-09', 'Oct-09', 'Nov-09', 'Dec-09', 'Jan-10',
       'Feb-10', 'Mar-10', 'Apr-10', 'May-10', 'Jun-10', 'Jul-10',
       'Aug-10', 'Sep-10', 'Oct-10', 'Nov-10', 'Dec-10', 'Jan-11',
       'Feb-11', 'Mar-11', 'Apr-11', 'May-11', 'Jun-11', 'Jul-11',
       'Aug-11', 'Sep-11', 'Oct-11', 'Nov-11', 'Dec-11', 'Jan-12',
       'Feb-12', 'Mar-12', 'Apr-12', 'May-12', 'Jun-12', 'Jul-12',
       'Aug-12', 'Sep-12', 'Oct-12', 'Nov-12', 'Dec-12', 'Jan-13'], 
      dtype='|S6')
</snippet></ROW><ROW><id>15649276</id><snippet>redis.py</snippet></ROW><ROW><id>15649276</id><snippet>redis</snippet></ROW><ROW><id>15649276</id><snippet>sys.path</snippet></ROW><ROW><id>15649719</id><snippet>sitenow</snippet></ROW><ROW><id>15649719</id><snippet>sitenow = site + "/" + product + "/" + str(u)</snippet></ROW><ROW><id>15650033</id><snippet>datetime</snippet></ROW><ROW><id>15650033</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; dt = datetime.fromtimestamp(1360287003083988472 // 1000000000)
&gt;&gt;&gt; dt
datetime.datetime(2013, 2, 7, 17, 30, 3)
</snippet></ROW><ROW><id>15650033</id><snippet>strftime()</snippet></ROW><ROW><id>15650033</id><snippet>&gt;&gt;&gt; s = dt.strftime('%Y-%m-%d %H:%M:%S')
&gt;&gt;&gt; s
'2013-02-07 17:30:03'
</snippet></ROW><ROW><id>15650033</id><snippet>&gt;&gt;&gt; s += '.' + str(int(1360287003083988472 % 1000000000)).zfill(9)
&gt;&gt;&gt; s
'2013-02-07 17:30:03.083988472'
</snippet></ROW><ROW><id>15650272</id><snippet>if code == i in portfolio_list:
</snippet></ROW><ROW><id>15650272</id><snippet>in</snippet></ROW><ROW><id>15650272</id><snippet>i</snippet></ROW><ROW><id>15650272</id><snippet>portfolio_list</snippet></ROW><ROW><id>15650272</id><snippet>code</snippet></ROW><ROW><id>15650272</id><snippet>True</snippet></ROW><ROW><id>15650272</id><snippet>False</snippet></ROW><ROW><id>15650272</id><snippet>i in portfolio_list</snippet></ROW><ROW><id>15650272</id><snippet>if code in portfolio_list:
</snippet></ROW><ROW><id>15650272</id><snippet>portfolio_list</snippet></ROW><ROW><id>15650272</id><snippet>if any(code == i for i in portfolio_list):
</snippet></ROW><ROW><id>15650272</id><snippet>code in portfolio_list</snippet></ROW><ROW><id>15650418</id><snippet>[WARNING] [Accordion   ] not enough space for displaying all children
[WARNING] [Accordion   ] need XXXX, got XXXXpx
[WARNING] [Accordion   ] layout aborted.
</snippet></ROW><ROW><id>15650418</id><snippet>items = Accordion(orientation='vertical', size_hint_y=None, height=50*30)
</snippet></ROW><ROW><id>15650418</id><snippet>minimum_height</snippet></ROW><ROW><id>15650418</id><snippet>items.bind(minimum_height=items.setter('height'))
</snippet></ROW><ROW><id>15650418</id><snippet>item.bind(children=self.update_size)
</snippet></ROW><ROW><id>15650418</id><snippet>def update_size(self, instance, value):
    # change 50 to what you want your AccordionItem height to be.
    instance.size = 50*len(instance.children)
</snippet></ROW><ROW><id>15650467</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>15650467</id><snippet>recursive-include someproject/static *.js
</snippet></ROW><ROW><id>15650467</id><snippet>include someproject/static/javascript/*.js
</snippet></ROW><ROW><id>15650467</id><snippet>include_package_data</snippet></ROW><ROW><id>15650467</id><snippet>setup.py</snippet></ROW><ROW><id>15650467</id><snippet>package_data={'someproject': ['static/javascript/*.js']},
</snippet></ROW><ROW><id>15650545</id><snippet>a</snippet></ROW><ROW><id>15650545</id><snippet>a</snippet></ROW><ROW><id>15650545</id><snippet>arcsin</snippet></ROW><ROW><id>15650545</id><snippet>arcsin</snippet></ROW><ROW><id>15650545</id><snippet>a</snippet></ROW><ROW><id>15650545</id><snippet>alpha</snippet></ROW><ROW><id>15650545</id><snippet>beta</snippet></ROW><ROW><id>15650545</id><snippet>a &gt; s/2</snippet></ROW><ROW><id>15650545</id><snippet>a &gt; (s-c)/2</snippet></ROW><ROW><id>15650545</id><snippet>f(a) = 0</snippet></ROW><ROW><id>15650545</id><snippet>brentq</snippet></ROW><ROW><id>15650545</id><snippet>import numpy as np
from scipy.optimize import brentq

s = 10014.6
c = 6339.06
mu = 398600.0
dt = 780.0
def f(a):
    alpha = 2*np.arcsin(np.sqrt(s/(2*a)))
    beta = 2*np.arcsin(np.sqrt((s-c)/(2*a)))
    return alpha - beta - (np.sin(alpha)-np.sin(beta)) - np.sqrt(mu/a**3)*dt

a0 = max(s/2, (s-c)/2)
a = brentq(f, a0, 10*a0)
</snippet></ROW><ROW><id>15650545</id><snippet>brentq(f,a,b)</snippet></ROW><ROW><id>15650545</id><snippet>f</snippet></ROW><ROW><id>15650545</id><snippet>[a,b]</snippet></ROW><ROW><id>15650545</id><snippet>a</snippet></ROW><ROW><id>15650545</id><snippet>max(s/2, (s-c)/2)</snippet></ROW><ROW><id>15650545</id><snippet>f</snippet></ROW><ROW><id>15650545</id><snippet>a</snippet></ROW><ROW><id>15650545</id><snippet>b</snippet></ROW><ROW><id>15650556</id><snippet>list.index</snippet></ROW><ROW><id>15650556</id><snippet>listTwo.sort(key=lambda x: listOne.index(x["eyecolor"]))
</snippet></ROW><ROW><id>15650556</id><snippet>list.index</snippet></ROW><ROW><id>15650556</id><snippet>order_dict = {color: index for index, color in enumerate(listOne)}
listTwo.sort(key=lambda x: order_dict[x["eyecolor"]])
</snippet></ROW><ROW><id>15650556</id><snippet>listTwo</snippet></ROW><ROW><id>15650556</id><snippet>sorted</snippet></ROW><ROW><id>15650556</id><snippet>list.sort</snippet></ROW><ROW><id>15650623</id><snippet>In [74]: [row[2:5] for row in LoL[1:4]]
Out[74]: [[2, 3, 4], [2, 3, 4], [2, 3, 4]]
</snippet></ROW><ROW><id>15650623</id><snippet>list</snippet></ROW><ROW><id>15650623</id><snippet>class LoL(list):
    def __init__(self, *args):
        list.__init__(self, *args)
    def __getitem__(self, item):
        try:
            return list.__getitem__(self, item)
        except TypeError:
            rows, cols = item
            return [row[cols] for row in self[rows]]

lol = LoL([list(range(10)) for i in range(10)])
print(lol[1:4, 2:5])
</snippet></ROW><ROW><id>15650623</id><snippet>[[2, 3, 4], [2, 3, 4], [2, 3, 4]]
</snippet></ROW><ROW><id>15650623</id><snippet>LoL</snippet></ROW><ROW><id>15650623</id><snippet>In [85]: %timeit [row[2:5] for row in x[1:4]]
1000000 loops, best of 3: 538 ns per loop
In [82]: %timeit lol[1:4, 2:5]
100000 loops, best of 3: 3.07 us per loop
</snippet></ROW><ROW><id>15650662</id><snippet>return</snippet></ROW><ROW><id>15650662</id><snippet>None</snippet></ROW><ROW><id>15650662</id><snippet>None</snippet></ROW><ROW><id>15650722</id><snippet>Location</snippet></ROW><ROW><id>15650722</id><snippet>Location</snippet></ROW><ROW><id>15650722</id><snippet>Location</snippet></ROW><ROW><id>15650722</id><snippet>ForeignKey</snippet></ROW><ROW><id>15650722</id><snippet>Location</snippet></ROW><ROW><id>15650722</id><snippet>Location</snippet></ROW><ROW><id>15650722</id><snippet>related_name</snippet></ROW><ROW><id>15650751</id><snippet>matplotlib.__version__</snippet></ROW><ROW><id>15650787</id><snippet>def findLargest(l):
    listLength = len(l)
    if listLength == 1:
        return l[0]
    if listLength == 2:
        if l[0] &gt; l[1]:
            print "OMG I Found it: {0}".format(l[0])
            return l[0]
        return l[1]

    halfway = int(listLength/2)
    firsthalf = l[:int(halfway)]
    secondhalf = l[int(halfway):]
    if listIsSorted(firsthalf) and listIsSorted(secondhalf):
        return max(l[halfway - 1], l[-1])
    elif listIsSorted(firsthalf):
        return findLargest(secondhalf)
    else:
        return findLargest(firsthalf)
</snippet></ROW><ROW><id>15651186</id><snippet>d = {'today': datetime.today()}
d['today'] = d['today'].strftime(&lt;your format&gt;)
</snippet></ROW><ROW><id>15651290</id><snippet>class Foo(object):

    def __init__(self):
        self._myValue = None

    @property
    def myValue(self):
        print self._myValue
        return self._myValue

    @myValue.setter
    def myValue(self, something):
        self._myValue = something

foo = Foo()
foo.myValue = 10
foo.myValue
</snippet></ROW><ROW><id>15651299</id><snippet>PyObject_Size</snippet></ROW><ROW><id>15651299</id><snippet>Py_ssize_t</snippet></ROW><ROW><id>15651299</id><snippet>size_t</snippet></ROW><ROW><id>15651299</id><snippet>len</snippet></ROW><ROW><id>15651299</id><snippet>PyObject_Size</snippet></ROW><ROW><id>15651299</id><snippet>static PyObject *
builtin_len(PyObject *self, PyObject *v)
{
    Py_ssize_t res;

    res = PyObject_Size(v);
    if (res &lt; 0 &amp;&amp; PyErr_Occurred())
        return NULL;
    return PyInt_FromSsize_t(res);
}
</snippet></ROW><ROW><id>15651299</id><snippet>len</snippet></ROW><ROW><id>15651299</id><snippet>IP</snippet></ROW><ROW><id>15651299</id><snippet>len</snippet></ROW><ROW><id>15651299</id><snippet>IP('2001::/64').len()
</snippet></ROW><ROW><id>15651628</id><snippet>def coord2index(hres, vres, hdiv, vdiv, x, y):
    return hdiv + x + 1, (-1) * y + vdiv
</snippet></ROW><ROW><id>15651748</id><snippet>word =&gt; lemma =&gt; lemma.pos.sense =&gt; synset    
Waiters =&gt; waiter =&gt; 'waiter.n.01' =&gt; wn.Synset('waiter.n.01')
</snippet></ROW><ROW><id>15651748</id><snippet>waiter</snippet></ROW><ROW><id>15651748</id><snippet>from nltk.corpus import wordnet as wn
waiter = wn.Synset('waiter.n.01')
employee = wn.Synset('employee.n.01')

all_hyponyms_of_waiter = list(set([w.replace("_"," ") for s in waiter.closure(lambda s:s.hyponyms()) for w in s.lemma_names]))
all_hyponyms_of_employee = list(set([w.replace("_"," ") for s in employee.closure(lambda s:s.hyponyms()) for w in s.lemma_names]))

if 'waiter' in all_hyponyms_of_employee:
  print 'employee more general than waiter'
elif 'employee' in all_hyponyms_of_waiter:
  print 'waiter more general than employee'
else:
  print "The SUMO ontology used in wordnet just doesn't have employee or waiter under the same tree"
</snippet></ROW><ROW><id>15651767</id><snippet>stat -f %i</snippet></ROW><ROW><id>15651892</id><snippet>def heapSort3(a):
    def sift(start, count):
        root = start
        while root * 3 + 1 &lt; count:
            r3 = root * 3
            upper = min(count - r3, 4)
            children = list(range(r3 + 1, r3 + upper))
            min_child = min((a[i], i) for i in children)
            v, i = min_child
            if a[root] &gt; a[i]:
                a[root], a[i] = a[i], a[root]
                root = i
            else:
                break
    count = len(a)
    for start in reversed(range(count // 3 + 2)):
        sift(start, count)
    for end in reversed(range(count)):
        a[end], a[0] = a[0], a[end]
        sift(0, end)
    return a
</snippet></ROW><ROW><id>15651892</id><snippet>for i in range(2, 25):
    print '-' * 30
    data = list(range(i))
    sorted_data = heapSort3(data)
    print i, sorted_data
    data = list(reversed(range(i)))
    sorted_data = heapSort3(data)
    print i, sorted_data
</snippet></ROW><ROW><id>15651892</id><snippet>from random import shuffle
for i in range(1, 100):
    print '-' * 30, i
    expected = list(reversed(range(i)))
    for _ in range(5000):
        data = list(range(i))
        shuffle(data)
        sorted_data = heapSort3(data)
        assert sorted_data == expected
</snippet></ROW><ROW><id>15652470</id><snippet>tries</snippet></ROW><ROW><id>15652470</id><snippet>with open('dictionary.txt') as fin:
    words = fin.read().strip().split('\n')

import re
import time
expr = re.compile(r'a[^aeiouy]+e$', re.I)

# Of course, this extends easily to using a dictionary, too
def bench():
    start = -time.time()
    matches = [word for word in words if expr.search(word)]
    return start + time.time()
</snippet></ROW><ROW><id>15652722</id><snippet>None</snippet></ROW><ROW><id>15652722</id><snippet>False</snippet></ROW><ROW><id>15652722</id><snippet>0</snippet></ROW><ROW><id>15652722</id><snippet>None</snippet></ROW><ROW><id>15652722</id><snippet>None</snippet></ROW><ROW><id>15652722</id><snippet>None</snippet></ROW><ROW><id>15652722</id><snippet>Holder(None)</snippet></ROW><ROW><id>15652722</id><snippet>Holder</snippet></ROW><ROW><id>15652722</id><snippet>class Stupid(object):
    def __ne__(self, other):
        return False
Variable = Stupid()
</snippet></ROW><ROW><id>15652722</id><snippet>== None</snippet></ROW><ROW><id>15652722</id><snippet>!= None</snippet></ROW><ROW><id>15652722</id><snippet>is None</snippet></ROW><ROW><id>15652722</id><snippet>is not None</snippet></ROW><ROW><id>15652722</id><snippet>Variable</snippet></ROW><ROW><id>15652722</id><snippet>None</snippet></ROW><ROW><id>15652722</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>15652722</id><snippet>None</snippet></ROW><ROW><id>15652722</id><snippet>None</snippet></ROW><ROW><id>15652722</id><snippet>None</snippet></ROW><ROW><id>15652722</id><snippet>ctypes</snippet></ROW><ROW><id>15652969</id><snippet>python-daemon</snippet></ROW><ROW><id>15652969</id><snippet>threading</snippet></ROW><ROW><id>15652969</id><snippet>signal</snippet></ROW><ROW><id>15652969</id><snippet>import socket
import threading
import daemon

def handle_client(sock):
    with sock.makefile() as f:
        sock.close()
        for line in f:
            f.writeline(line)

def serve_forever():
    server = socket.socket()
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind('', 12345))
    server.listen(1)
    while True:
        conn, address = server.accept()
        thread = threading.Thread(target=handle_client, args=[conn])
        thread.daemon = True
        thread.start()

with daemon.DaemonContext():
    serve_forever()
</snippet></ROW><ROW><id>15652969</id><snippet>handle_client</snippet></ROW><ROW><id>15652969</id><snippet>inetd</snippet></ROW><ROW><id>15652969</id><snippet>import sys
for line in sys.stdin:
    print(line)
</snippet></ROW><ROW><id>15652969</id><snippet>/etc/inetd.conf</snippet></ROW><ROW><id>15652969</id><snippet>12345 stream tcp nowait nobody /usr/bin/python python /usr/local/bin/myscript.py
</snippet></ROW><ROW><id>15652969</id><snippet>inetd</snippet></ROW><ROW><id>15652969</id><snippet>xinetd</snippet></ROW><ROW><id>15652969</id><snippet>systemd</snippet></ROW><ROW><id>15652969</id><snippet>launchd</snippet></ROW><ROW><id>15652987</id><snippet>EXCHANGE_DATA</snippet></ROW><ROW><id>15652987</id><snippet>code</snippet></ROW><ROW><id>15652987</id><snippet>for code in portfolio_list:
    share_name, share_value = EXCHANGE_DATA[code]
    print('{:&lt;6} {:&lt;20} {:&gt;8.2f}'.format(code, share_name, share_value))
</snippet></ROW><ROW><id>15653191</id><snippet>decoder.decode_raw(fh)</snippet></ROW><ROW><id>15653262</id><snippet>glob()</snippet></ROW><ROW><id>15653262</id><snippet>rmtree()</snippet></ROW><ROW><id>15653262</id><snippet>for path in glob.glob("directory_*"):
    shutil.rmtree(path)
</snippet></ROW><ROW><id>15653262</id><snippet>OSError</snippet></ROW><ROW><id>15653262</id><snippet>rmtree()</snippet></ROW><ROW><id>15653399</id><snippet>Rule(SgmlLinkExtractor(allow=(r'category1/description/\d+/story\.html',)), callback='parse_item', follow=True)
</snippet></ROW><ROW><id>15653399</id><snippet>/description/\d+/story\.html</snippet></ROW><ROW><id>15653427</id><snippet>ifh</snippet></ROW><ROW><id>15653427</id><snippet>ifh.seek(0)</snippet></ROW><ROW><id>15653806</id><snippet>import networkx as nx

data = '''a,b,201212100401
a,d,201212100403
b,e,201212100511
b,c,201212100518
e,f,201212100610
c,a,201212100720'''.split('\n')

G = nx.DiGraph()
for line in data:
    n1, n2, t1 = line.split(',')
    G.add_edge(n1, n2, time=t1)

def check_sequence(list_of_edges):
    times = []
    # First check if all the edges are in the graph
    # and collect their times in a list
    for e in list_of_edges:
        if e in G.edges():
            times.append(G[e[0]][e[1]]['time'])
        else:
            return "Edge {} not in the graph.".format(str(e))
    # Next check if each successive time in the list 
    # is greater than the previous time
    start = times[0]
    for time in times[1:]:
        if time &gt; start:
            start = time
        else:
            return 'Edges not in sequence: {}'.format(str(times))
    # If we have not returned up to now, then we are in sequence
    return 'Edges are in sequence: {}'.format(str(times))

print check_sequence( [('a', 'e'), ('e', 'f'), ('a', 'f') ] )
# Edge ('a', 'e') not in the graph.
print check_sequence( [('a', 'b'), ('b', 'c'), ('c', 'a') ] )
# Edges are in sequence: ['201212100401', '201212100518', '201212100720']
print check_sequence( [('c', 'a'), ('a', 'b'), ('b', 'c') ] )
# Edges not in sequence: ['201212100720', '201212100401', '201212100518']
</snippet></ROW><ROW><id>15653914</id><snippet>pcreate -s starter IssueApp</snippet></ROW><ROW><id>15653914</id><snippet>.
├── CHANGES.txt
├── development.ini
├── issueapp
│   ├── __init__.py
│   └── static
│       └── pyramid.png
├── README.txt
└── setup.py
</snippet></ROW><ROW><id>15653914</id><snippet>__init__.py</snippet></ROW><ROW><id>15653914</id><snippet>(env) $ python setup.py develop</snippet></ROW><ROW><id>15653914</id><snippet>development.ini</snippet></ROW><ROW><id>15653914</id><snippet>[app:main]
use = egg:IssueApp#main

pyramid.reload_all = true
pyramid.reload_templates = true
pyramid.debug_all = true
pyramid.debug_notfound = true
pyramid.debug_routematch = true
pyramid.prevent_http_cache = true
pyramid.default_locale_name = en

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 7777

[loggers]
keys = root, issueapp

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_issueapp]
level = INFO
handlers =
qualname = issueapp

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
</snippet></ROW><ROW><id>15653914</id><snippet>__init__.py</snippet></ROW><ROW><id>15653914</id><snippet>from pyramid.config import Configurator

from pyramid.view import view_config
from pyramid.response import Response

from pyramid.authentication import CallbackAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy

from pyramid.security import (
    Allow, Deny,
    Everyone, Authenticated,
)


def main(global_config, **settings):
    """ This function returns a Pyramid WSGI application.
    """
    config = Configurator(settings=settings)

    #config.add_static_view('static', 'static', cache_max_age=3600)
    config.add_static_view(name='static', path='issueapp:static')
    config.add_route('home', '/')

    config.set_root_factory(RootFactory)
    config.set_authentication_policy(DummyAuthPolicy())
    config.set_authorization_policy(ACLAuthorizationPolicy())

    config.scan()
    return config.make_wsgi_app()


@view_config(route_name='home')
def home_view(request):
    src = request.static_url('issueapp:static/pyramid.png')
    return Response('&lt;img src='+ src + '&gt;')


class RootFactory:
    __acl__ = [
        (Allow, Authenticated, 'edit'),
        (Deny, Authenticated, 'login'),
        (Allow, Everyone, 'login'),
    ]

    def __init__(self, request):
        self.request = request


class DummyAuthPolicy(CallbackAuthenticationPolicy):
    def __init__(self, callback=None, debug=False):
        self.callback = callback
        self.debug = debug

    def remember(self, request, principal, **kw):
        return []

    def forget(self, request):
        return []

    def unauthenticated_userid(self, request):
        # this will print the request url
        # so we can know which request is causing auth code to be called            
        print('[auth]: ' + request.url)

        # this means the user is authenticated
        return "user"
</snippet></ROW><ROW><id>15653914</id><snippet>pserve  development.ini  --reload
Starting subprocess with file monitor
Starting server in PID 2303.
serving on http://0.0.0.0:7777
</snippet></ROW><ROW><id>15653914</id><snippet>[auth]: http://192.168.56.102:7777/static/pyramid.png   
</snippet></ROW><ROW><id>15653914</id><snippet>DEBUG</snippet></ROW><ROW><id>15653914</id><snippet>[auth]: ...</snippet></ROW><ROW><id>15653995</id><snippet> for code in portfolio_list:
     try:
         share_name, share_value = EXCHANGE_DATA[code]
         print('{:&lt;6} {:&lt;20} {:&gt;8.2f}'.format(code, share_name, share_value)   
     except KeyError:
         continue
</snippet></ROW><ROW><id>15653995</id><snippet> for code in portfolio_list:
     res = EXCHANGE_DATA.get(code, None)
     if res:
         print('{:&lt;6} {:&lt;20} {:&gt;8.2f}'.format(code, *res)   
</snippet></ROW><ROW><id>15653995</id><snippet> for code in portfolio_list:
     if code in EXCHANGE_DATA:
         print('{:&lt;6} {:&lt;20} {:&gt;8.2f}'.format(code, *EXCHANGE_DATA[code])   
</snippet></ROW><ROW><id>15654056</id><snippet>[&lt;_wmi_object: \\My_server\root\virtualization:Msvm_ComputerSystem.CreationClassName="Msvm_ComputerSystem",Name="6B76E537-049A-4AAB-8BCD-F95B2F0F8F42"&gt;]</snippet></ROW><ROW><id>15654056</id><snippet>&lt;_wmi_object: \\My_server\root\virtualization:Msvm_ComputerSystem.CreationClassName="Msvm_ComputerSystem",Name="6B76E537-049A-4AAB-8BCD-F95B2F0F8F42"&gt;</snippet></ROW><ROW><id>15654218</id><snippet>communicate</snippet></ROW><ROW><id>15654218</id><snippet>stdout</snippet></ROW><ROW><id>15654218</id><snippet>threading.Queue</snippet></ROW><ROW><id>15654218</id><snippet>communicate</snippet></ROW><ROW><id>15654218</id><snippet>read</snippet></ROW><ROW><id>15654218</id><snippet>self.process = subprocess.Popen(self.cmd, stdout=subprocess.PIPE)
lines = []
def reader():
    for line in self.process.stdout:
        lines.append(line)
        sys.stdout.write(line)
t = threading.Thread(target=reader)
t.start()
self.process.wait()
t.join()
</snippet></ROW><ROW><id>15654218</id><snippet>reader</snippet></ROW><ROW><id>15654218</id><snippet>readline</snippet></ROW><ROW><id>15654218</id><snippet>stdout</snippet></ROW><ROW><id>15654218</id><snippet>stderr</snippet></ROW><ROW><id>15654218</id><snippet>read</snippet></ROW><ROW><id>15654218</id><snippet>PIPE</snippet></ROW><ROW><id>15654218</id><snippet>Queue</snippet></ROW><ROW><id>15654218</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>15654218</id><snippet>class TeeReader(object):
    def __init__(self, input_file, tee_file):
        self.input_file = input_file
        self.tee_file = tee_file
    def read(self, size=-1):
        ret = self.input_file.read(size)
        if ret:
            self.tee_file.write(ret)
        return ret
</snippet></ROW><ROW><id>15654218</id><snippet>PIPE</snippet></ROW><ROW><id>15654218</id><snippet>process.stdout</snippet></ROW><ROW><id>15654218</id><snippet>input_file</snippet></ROW><ROW><id>15654218</id><snippet>communicate</snippet></ROW><ROW><id>15654218</id><snippet>AttributeException</snippet></ROW><ROW><id>15654218</id><snippet>__getattr__</snippet></ROW><ROW><id>15654218</id><snippet>twisted</snippet></ROW><ROW><id>15654425</id><snippet>**kwargs</snippet></ROW><ROW><id>15654425</id><snippet>def computeStats(func, sampleA, sampleB, **kwargs):
   func(sampleA, sampleB, **kwargs)
   ...some actions...
   return testStatistic
</snippet></ROW><ROW><id>15654425</id><snippet>computeStats()</snippet></ROW><ROW><id>15654425</id><snippet>computeStats(scipy.stats.mstats.ks_twosamp, sampleA, sampleB, alternative='greater')
</snippet></ROW><ROW><id>15654425</id><snippet>def postprocessStats(testStatistic):
   ...some actions...
   return testStatistic

postprocessStats(scipy.stats.mstats.ks_twosamp(sampleA, sampleB, alternative='greater'))
</snippet></ROW><ROW><id>15654496</id><snippet>for girl in girls:
    letterGirls.setdefault(girl[0],[]).append(girl)
print [b+'+'+g for b in boys for g in letterGirls[b[0]]]
</snippet></ROW><ROW><id>15654546</id><snippet>datetime</snippet></ROW><ROW><id>15654546</id><snippet>date</snippet></ROW><ROW><id>15654546</id><snippet>datetime</snippet></ROW><ROW><id>15654546</id><snippet>date</snippet></ROW><ROW><id>15654546</id><snippet>datetime</snippet></ROW><ROW><id>15654546</id><snippet>date</snippet></ROW><ROW><id>15654546</id><snippet>date</snippet></ROW><ROW><id>15654546</id><snippet>type(now) is datetime.date</snippet></ROW><ROW><id>15654546</id><snippet>datetime</snippet></ROW><ROW><id>15654546</id><snippet>isinstance(now, datetime.date) and not isinstance(now, datetime.datetime)</snippet></ROW><ROW><id>15654789</id><snippet>next(inst for inst in instances
          if all(get_key_value(inst, pkey) == kw[pkey] for pkey in primary_keys))
</snippet></ROW><ROW><id>15654789</id><snippet>get_key_value</snippet></ROW><ROW><id>15654789</id><snippet>getattr</snippet></ROW><ROW><id>15654789</id><snippet>dict</snippet></ROW><ROW><id>15654789</id><snippet>inst[pkey]</snippet></ROW><ROW><id>15654789</id><snippet>&gt;&gt;&gt; instances = [{'a': 5, 'b': 3}, {'a': 7, 'b': 8},  {'a': -1, 'b': 19}]
&gt;&gt;&gt; primary_keys = ['a', 'b']
&gt;&gt;&gt; kw = {'a': 7, 'b': 8}
&gt;&gt;&gt; next(inst for inst in instances
...           if all(inst[pkey] == kw[pkey] for pkey in primary_keys))
{'a': 7, 'b': 8}
</snippet></ROW><ROW><id>15654789</id><snippet>StopIteration</snippet></ROW><ROW><id>15654789</id><snippet>try</snippet></ROW><ROW><id>15654789</id><snippet>[inst for inst in instances
      if all(get_key_value(inst, pkey) == kw[pkey] for pkey in primary_keys)]
</snippet></ROW><ROW><id>15654846</id><snippet>&gt;&gt;&gt; CM = [[0 for _ in range(10)]] * 10
</snippet></ROW><ROW><id>15654846</id><snippet>&gt;&gt;&gt; x = [0 for _ in range(10)]
&gt;&gt;&gt; CM = [x, x, x, x, x, x, x, x, x, x]
</snippet></ROW><ROW><id>15654846</id><snippet>&gt;&gt;&gt; CM = [[0 for _ in range(10)]] * 10
</snippet></ROW><ROW><id>15654846</id><snippet>&gt;&gt;&gt; x = [[0 for _ in range(10)]]
&gt;&gt;&gt; CM = [x, x, x, x, x, x, x, x, x, x]
</snippet></ROW><ROW><id>15654846</id><snippet>deepcopy</snippet></ROW><ROW><id>15655098</id><snippet>&gt;&gt;&gt; text = '   foo\nbar      spam'
&gt;&gt;&gt; '\n'.join(' '.join(line.split()) for line in text.split('\n'))
'foo\nbar spam'
</snippet></ROW><ROW><id>15655185</id><snippet>#!/usr/bin/env python
f = open('log.txt','r')

columns = {}

for line in f.readlines():
    if line.startswith('#Fields:'):
        for index, substring in enumerate(line.split(' ')):
            columns[substring] = index
    elif line.startswith('#'):
        continue
    else:
        print line.split(' ')[columns['cs(User-Agent)']]
</snippet></ROW><ROW><id>15655431</id><snippet>import re, itertools
my_list = ['ab','cde']
keywords = ['ab','cd','de']

indices = {}
pats = [re.compile(i) for i in keywords]
for pat in pats:
    for i in my_list:
        indices.setdefault(i, [])
        for m in re.finditer(pat, i):
            a = list((m.start(),m.end()))
            indices[i].append(a)
print(indices)
</snippet></ROW><ROW><id>15655431</id><snippet>{'cde': [[0, 2], [1, 3]], 'ab': [[0, 2]]}
</snippet></ROW><ROW><id>15655431</id><snippet>import re
from itertools import product

my_list = ['ab', 'cde']
keywords = ['ab', 'cd', 'de']

indices = {}
pats = [re.compile(i) for i in keywords]

for i, pat in product(my_list, pats):
    indices.setdefault(i, [])
    for m in re.finditer(pat, i):
        indices[i].append((m.start(), m.end()))

print(indices)
</snippet></ROW><ROW><id>15655947</id><snippet>beaker</snippet></ROW><ROW><id>15655947</id><snippet>&lt;root&gt;
  |
  --beaker
      |
      -- &lt;...&gt;
</snippet></ROW><ROW><id>15655947</id><snippet>&lt;root&gt;</snippet></ROW><ROW><id>15655947</id><snippet>sys.path.append(os.path.abspath('.'))
</snippet></ROW><ROW><id>15655947</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15655947</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15656423</id><snippet>red_fish = set(n for u,v,d in G.edges_iter(data=True)
               if d['color']=='red'
               for n in (u, v)
               if G.node[n]['label']=='fish')

print(red_fish)
# set([2])
</snippet></ROW><ROW><id>15656461</id><snippet>QShortCut</snippet></ROW><ROW><id>15656461</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QTextEdit):
    modeChanged = QtCore.pyqtSignal(bool)
    _seenMinus  = False
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.installEventFilter(self)

        self.modeChanged.connect(self.on_modeChanged)

    def on_modeChanged(self):
        print "Changing Mode."

    def eventFilter(self, obj, event):
        if event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Minus:
                self._seenMinus = True

            elif event.key() == QtCore.Qt.Key_Greater \
            and  event.modifiers() == QtCore.Qt.ShiftModifier \
            and  self._seenMinus:
                self.modeChanged.emit(True)
                self.setStyleSheet("""
                    background-color: lightgray;
                """)

            elif event.modifiers() != QtCore.Qt.ShiftModifier:
                if self._seenMinus == True:
                    self.modeChanged.emit(False)
                    self._seenMinus = False
                    self.setStyleSheet("")


        return super(MyWindow, self).eventFilter(obj, event)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15656474</id><snippet>style = self.textCtrl.GetWindowStyle()
self.textCtrl.SetWindowStyle(style &amp; ~wx.TE_LEFT | wx.TE_RIGHT)
</snippet></ROW><ROW><id>15656474</id><snippet>self.textCtrl.SetWindowStyle(style &amp; ~wx.TE_RIGHT | wx.TE_LEFT)
</snippet></ROW><ROW><id>15656674</id><snippet>csv_dialect = dict(delimiter=',', quotechar='|')
names = set()
with open('fileA', 'rb') as file_a:
    reader1 = csv.reader(file_a, **csv_dialect)
    next(reader1)
    for row in reader1:
        names.add((row[0], row[2]))

# `names` is now a set of all names (taken from columns 0 and 2) found in file A.

with open('fileA', 'ab') as file_a, open('fileB', 'rb') as file_b:
    writer = csv.writer(file_a, **csv_dialect)
    reader2 = csv.reader(file_b, **csv_dialect)
    next(reader2)
    for row in reader2:
        if (row[0], row[2]) not in names:
            # This row was not present in file A, add it.
            writer.writerow(row)
</snippet></ROW><ROW><id>15656674</id><snippet>with</snippet></ROW><ROW><id>15656674</id><snippet>with open('fileA', 'ab') as file_a:
    with open('fileB', 'rb') as file_b:
        # etc.
</snippet></ROW><ROW><id>15656703</id><snippet>    r_channel = image[:, :, 0]
    g_channel = image[:, :, 1]
    b_channel = image[:, :, 2]
    label_map = 1000000 * (r_channel) + 1000 * g_channel + b_channel
    label_map = np.round(label_map).astype(int)
</snippet></ROW><ROW><id>15656915</id><snippet>worker_object = self.pool.get('bpl.woker')</snippet></ROW><ROW><id>15656915</id><snippet>.get()</snippet></ROW><ROW><id>15656915</id><snippet>None</snippet></ROW><ROW><id>15656915</id><snippet>'bpl.woker'</snippet></ROW><ROW><id>15656915</id><snippet>'bpl.worker'</snippet></ROW><ROW><id>15656915</id><snippet>'bpl.woker'</snippet></ROW><ROW><id>15656947</id><snippet>f</snippet></ROW><ROW><id>15656947</id><snippet>next()</snippet></ROW><ROW><id>15656947</id><snippet>with open(local_file,"r") as f
    for line in f:
        searchphrase = '&lt;span class="position'
        if searchphrase in line:
            print("found it\n")
            next(f) # skip 1 line
            return next(f)  # and return the line after that.
</snippet></ROW><ROW><id>15657512</id><snippet>fileinput</snippet></ROW><ROW><id>15657512</id><snippet>inplace=True</snippet></ROW><ROW><id>15657512</id><snippet>import fileinput

def removeLine():
    inputfile = fileinput.input(path, inplace=True, mode='rU')
    next(inputfile, None)  # skip a line *if present*
    for line in inputfile:
        print line,  # write out again, but without an extra newline
    inputfile.close()
</snippet></ROW><ROW><id>15657512</id><snippet>inplace=True</snippet></ROW><ROW><id>15657512</id><snippet>sys.stdout</snippet></ROW><ROW><id>15657512</id><snippet>next()</snippet></ROW><ROW><id>15657512</id><snippet>None</snippet></ROW><ROW><id>15657512</id><snippet>StopIteration</snippet></ROW><ROW><id>15657512</id><snippet>fileinput</snippet></ROW><ROW><id>15657512</id><snippet>deque</snippet></ROW><ROW><id>15657512</id><snippet>next()</snippet></ROW><ROW><id>15657512</id><snippet>list()</snippet></ROW><ROW><id>15657512</id><snippet>def removeLine():
    with open(path, 'rU') as file:
        next(file, None)  # skip a line *if present*
        lines = list(file)
    with open(path, 'w') as file:
        file.writelines(lines)  
</snippet></ROW><ROW><id>15657542</id><snippet>foo</snippet></ROW><ROW><id>15657542</id><snippet>try:
    for ln, k in enumerate(map(float, reductions)):
        with open(filename, "r") as f:
            for key, group in groupby(f, key=getkey):
                outfile[ln].writelines(choose_random(group, fraction=k))

finally:
    for f in outfile:
        f.close()
</snippet></ROW><ROW><id>15657542</id><snippet>try:
    with open(filename, "r") as f:
        for ln, k in enumerate(map(float, reductions)):
            for key, group in groupby(f, key=getkey):
                outfile[ln].writelines(choose_random(group, fraction=k))
            f.seek(0)

finally:
    for f in outfile:
        f.close()
</snippet></ROW><ROW><id>15657542</id><snippet>reductions = [0.25, 0.50, 0.75, 1.0]
filename = "foo"

for fraction in reductions:
    with open(filename, "r") as f, open('%s-%s' % (fraction, filename), 'w') as outfile:
        for key, group in groupby(f, key=getkey):
            outfile.writelines(choose_random(group, fraction=fraction))
</snippet></ROW><ROW><id>15657622</id><snippet>app.yaml</snippet></ROW><ROW><id>15658331</id><snippet>sub</snippet></ROW><ROW><id>15658331</id><snippet>big_regex = re.compile('|'.join(map(re.escape, prohibitedWords)))
the_message = big_regex.sub("repl-string", str(word[1]))
</snippet></ROW><ROW><id>15658331</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; prohibitedWords = ['Some', 'Random', 'Words']
&gt;&gt;&gt; big_regex = re.compile('|'.join(map(re.escape, prohibitedWords)))
&gt;&gt;&gt; the_message = big_regex.sub("&lt;replaced&gt;", 'this message contains Some really Random Words')
&gt;&gt;&gt; the_message
'this message contains &lt;replaced&gt; really &lt;replaced&gt; &lt;replaced&gt;'
</snippet></ROW><ROW><id>15658331</id><snippet>str.replace</snippet></ROW><ROW><id>15658331</id><snippet>&gt;&gt;&gt; words = ['random', 'words']
&gt;&gt;&gt; text = 'a sample message with random words'
&gt;&gt;&gt; for word in words:
...     text = text.replace(word, 'swords')
... 
&gt;&gt;&gt; text
'a sample message with sswords swords'
</snippet></ROW><ROW><id>15658331</id><snippet>re.sub</snippet></ROW><ROW><id>15658331</id><snippet>&gt;&gt;&gt; big_regex = re.compile('|'.join(map(re.escape, words)))
&gt;&gt;&gt; big_regex.sub("swords", 'a sample message with random words')
'a sample message with swords swords'
</snippet></ROW><ROW><id>15658331</id><snippet>big_regex = re.compile(r'\b%s\b' % r'\b|\b'.join(map(re.escape, words)))
</snippet></ROW><ROW><id>15658331</id><snippet>'random'</snippet></ROW><ROW><id>15658331</id><snippet>'random words'</snippet></ROW><ROW><id>15658331</id><snippet>'pseudorandom words'</snippet></ROW><ROW><id>15658366</id><snippet>import os

known_extensions = ['.tar.gz', '.tar.bz2']
def splitext(file_name):
    file_name = file_name.strip()

    for ex in known_extensions:
        if file_name[-len(ex):] == ex:
            return file_name[:-len(ex)], ex

    return os.path.splitext(file_name)
</snippet></ROW><ROW><id>15658415</id><snippet>mkfifo mypipe.log</snippet></ROW><ROW><id>15658415</id><snippet>tee</snippet></ROW><ROW><id>15658817</id><snippet>provider = request.POST.get('provider')

order_items = OrderItem.objects.all()
if provider is not None:
    order_items = order_items.filter(provider=provider)
</snippet></ROW><ROW><id>15658817</id><snippet>kwargs</snippet></ROW><ROW><id>15658817</id><snippet>filter()</snippet></ROW><ROW><id>15658817</id><snippet>provider = request.POST.get('provider')
kwargs = {}
if provider is not None:
    kwargs['provider'] = provider

order_items = OrderItem.objects.filter(**kwargs)
</snippet></ROW><ROW><id>15658817</id><snippet>def all_or_filter_args(request, item):
    """Return dictionary of arguments for filter() if item is specified in request."""
    value = request.get(item)
    if value is None:
        return {}
    return { item : value }
</snippet></ROW><ROW><id>15658817</id><snippet>order_items = OrderItem.objects.filter(**all_or_filter_args(request, 'provider'))
</snippet></ROW><ROW><id>15658817</id><snippet>all_or_filtered</snippet></ROW><ROW><id>15658817</id><snippet>order_items = OrderItem.objects.all_or_filtered('provider', request.POST.get('provider'))
</snippet></ROW><ROW><id>15659120</id><snippet>destroy</snippet></ROW><ROW><id>15659120</id><snippet>    for button in self.button:
        button.destroy()
</snippet></ROW><ROW><id>15659120</id><snippet>import Tkinter as tk

class ButtonBlock(object):
    def __init__(self, master):
        self.master = master
        self.button = []
        self.button_val = tk.IntVar()
        entry = tk.Entry()
        entry.grid(row=0, column=0)
        entry.bind('&lt;Return&gt;', self.onEnter)
        entry.focus()
        clear_button = tk.Button(master, text='Clear', command=self.onClear)
        clear_button.grid(row=0, column=1)
    def onClear(self):
        for button in self.button:
            button.destroy()
    def onEnter(self, event):
        entry = event.widget
        num = int(entry.get())
        self.onClear()
        for i in range(1, num+1):
            self.button.append(tk.Radiobutton(
                self.master, text=str(i), variable=self.button_val, value=i,
                command=self.onSelect))
            self.button[-1].grid(sticky='WENS', row=i, column=0, padx=1, pady=1)
    def onSelect(self):
        print(self.button_val.get())

if __name__ == '__main__':
    root = tk.Tk()
    ButtonBlock(root)
    root.mainloop()
</snippet></ROW><ROW><id>15659366</id><snippet>def compress(signal):
    prev_t, prev_val = None, None
    for t, val in zip(*signal):
        if val != prev_val:
            if prev_t is not None:
                yield prev_t, prev_val
            yield t, val
            prev_t, prev_val = None, val
        else:
            prev_t, prev_val = t, val
    if prev_t is not None:
        yield prev_t, prev_val

signal = [
    [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1], #time values
    [1,1,1,2,3,4,4,4,4,2,1,1] #function values
    ]
print zip(*compress(signal))
</snippet></ROW><ROW><id>15659366</id><snippet>signal</snippet></ROW><ROW><id>15659366</id><snippet>[(0.0, 1),
 (0.1, 1),
 (0.2, 1),
 (0.3, 2),
 (0.4, 3),
 (0.5, 4),
 (0.6, 4),
 (0.7, 4),
 (0.8, 4),
 (0.9, 2),
 (1.0, 1),
 (1.1, 1)]
</snippet></ROW><ROW><id>15659366</id><snippet>zip(*seq)</snippet></ROW><ROW><id>15659366</id><snippet>import numpy as np

signal = [
    [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1], #time values
    [1,1,1,2,3,4,4,4,4,2,1,1] #function values
    ]

def npcompress(signal):
    sig=np.array(signal)
    idx = np.where(sig[1][1:] != sig[1][:-1])[0]
    idx_arr = np.sort(np.array(list(set(idx) | set(idx + 1) | set([0]) | set([len(sig[1]) - 1]))))
    return sig.T[idx_arr]

print npcompress(signal).T
</snippet></ROW><ROW><id>15659438</id><snippet>PersonModel</snippet></ROW><ROW><id>15659438</id><snippet>JobModel</snippet></ROW><ROW><id>15659438</id><snippet>class PersonModel(Base):
    ...
    job = relationship('JobModel', lazy='joined')
</snippet></ROW><ROW><id>15659438</id><snippet>JobModel</snippet></ROW><ROW><id>15659438</id><snippet>PersonModel</snippet></ROW><ROW><id>15659490</id><snippet>itunes</snippet></ROW><ROW><id>15659490</id><snippet>simplejson.dumps(data, default=str))
</snippet></ROW><ROW><id>15659490</id><snippet>def handler(val):
    if isinstance(val, unicode)
        return str(val)
    else:
        return val

simplejson.dumps(data, default=handler))
</snippet></ROW><ROW><id>15659860</id><snippet>struct</snippet></ROW><ROW><id>15659860</id><snippet>struct.unpack_from</snippet></ROW><ROW><id>15659860</id><snippet>struct.unpack_from('x', buf)
struct.unpack_from('I', buf)
struct.unpack_from('B', buf)
struct.unpack_from('H', buf)
struct.unpack_from('l', buf)
</snippet></ROW><ROW><id>15660215</id><snippet>p = out_param[0]
</snippet></ROW><ROW><id>15660215</id><snippet>new_y_val = skew(x_values, p[0], p[1], p[2])
</snippet></ROW><ROW><id>15660215</id><snippet>plot(time1, pl)
</snippet></ROW><ROW><id>15660246</id><snippet>class MyFileDropTarget(wx.FileDropTarget):

    def __init__(self, mainFrame):
            wx.FileDropTarget.__init__(self)
            self.window = mainFrame

    def OnDropFiles(self, x, y, filenames):
            for fil in filenames:
                    print str(fil)

    def OnEnter(self, x, y, nul):
            self.window.OnDragEnter()
            return wx.DragMove

    def OnLeave(self):
            self.window.OnDragLeave()
            return

    def OnDragOver(self, x, y, nul):
            return wx.DragMove
</snippet></ROW><ROW><id>15660522</id><snippet>parent</snippet></ROW><ROW><id>15660522</id><snippet>QTreeView</snippet></ROW><ROW><id>15660522</id><snippet>QtCore.QModelIndex()</snippet></ROW><ROW><id>15660522</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QTableView):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.modelSource = QtGui.QStandardItemModel(self)

        for rowNumber in range(3):
            items = []
            for columnNumber in range(3):
                item = QtGui.QStandardItem()
                item.setText("row: {0} column: {0}".format(rowNumber, columnNumber))

                items.append(item)

            self.modelSource.appendRow(items)

        self.actionSelectedRows = QtGui.QAction(self)
        self.actionSelectedRows.setText("Get Selected Rows")
        self.actionSelectedRows.triggered.connect(self.on_actionSelectedRows_triggered)

        self.contextMenu = QtGui.QMenu(self)
        self.contextMenu.addAction(self.actionSelectedRows)

        self.setModel(self.modelSource)
        self.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        self.horizontalHeader().setStretchLastSection(True)
        self.customContextMenuRequested.connect(self.on_customContextMenuRequested)

    @QtCore.pyqtSlot(bool)
    def on_actionSelectedRows_triggered(self, state):
        for rowNumber in range(self.model().rowCount()):
            info = "Row {0} is ".format(rowNumber)
            if self.selectionModel().isRowSelected(rowNumber, QtCore.QModelIndex()):
                info += "selected"

            else:
                info += "not selected"

            print info

    @QtCore.pyqtSlot(QtCore.QPoint)
    def on_customContextMenuRequested(self, pos):
        self.contextMenu.exec_(self.mapToGlobal(pos))

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.resize(333, 222)
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15660706</id><snippet>output = content.split('&amp;')
x = output[0]
y = output[1]
</snippet></ROW><ROW><id>15660939</id><snippet>.read()</snippet></ROW><ROW><id>15660939</id><snippet>StringIO</snippet></ROW><ROW><id>15661036</id><snippet>datetime.datetime.combine()</snippet></ROW><ROW><id>15661036</id><snippet>datetime.time.min</snippet></ROW><ROW><id>15661036</id><snippet>00:00</snippet></ROW><ROW><id>15661036</id><snippet>datetime.datetime.combine(my_date, datetime.time.min)
</snippet></ROW><ROW><id>15661036</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; my_date = datetime.date.today()
&gt;&gt;&gt; datetime.datetime.combine(my_date, datetime.time.min)
datetime.datetime(2013, 3, 27, 0, 0)
</snippet></ROW><ROW><id>15661047</id><snippet>try...except</snippet></ROW><ROW><id>15661047</id><snippet>import socket

for i in range(len(HOST)):
    print "scanning " + HOST[i] + " ...\n"
    try:
        tn = telnetlib.Telnet(HOST[i],23,3)
    except socket.timeout:
        pass
</snippet></ROW><ROW><id>15661047</id><snippet>socket.timeout</snippet></ROW><ROW><id>15661047</id><snippet>except:</snippet></ROW><ROW><id>15661079</id><snippet>csv.DictReader</snippet></ROW><ROW><id>15661079</id><snippet>csv.reader</snippet></ROW><ROW><id>15661079</id><snippet>int</snippet></ROW><ROW><id>15661079</id><snippet>def parseCsvFile(self, paramsfile) :
    import csv
    csvDict = {}
    category = 'Unknown Category'
    params = []
    with open(paramsfile, 'rb') as csvfile :
        paramsReader = csv.reader(csvfile)
        for row in paramsReader :
            if row[0].startswith('Category') :
                category = row[0]
                csvDict[category] = {}
                params = [p.strip() for p in row[1:] if p]
            else :
                csvDict[category][row[0]] = dict(zip(params, [int(p) for p in row[1:] if p]))
    return csvDict
</snippet></ROW><ROW><id>15661120</id><snippet>str</snippet></ROW><ROW><id>15661120</id><snippet>int</snippet></ROW><ROW><id>15661120</id><snippet>float</snippet></ROW><ROW><id>15661120</id><snippet>list</snippet></ROW><ROW><id>15661120</id><snippet>repr()</snippet></ROW><ROW><id>15661120</id><snippet>__repr__</snippet></ROW><ROW><id>15661120</id><snippet>__repr__</snippet></ROW><ROW><id>15661120</id><snippet>repr()</snippet></ROW><ROW><id>15661120</id><snippet>&lt;...some useful description...&gt;</snippet></ROW><ROW><id>15661214</id><snippet>P[np.arange(M)[:, None, None], np.arange(N)[:, None], np.arange(2),
  indices[..., None]]
</snippet></ROW><ROW><id>15661214</id><snippet>P[np.ogrid[0:M, 0:N, 0:2]+[indices[..., None]]]
</snippet></ROW><ROW><id>15661214</id><snippet>idx_tuple = tuple(np.ogrid[:M, :N, :2]) + (indices[..., None],)
P[idx_tuple]
</snippet></ROW><ROW><id>15661307</id><snippet>.*?</snippet></ROW><ROW><id>15661307</id><snippet>.search()</snippet></ROW><ROW><id>15661307</id><snippet>RE = r'''
    (?:(\d) \s day.*?)?   # this should match "n day" if it's there
    \s(\d{1,2}):(\d{1,2}) # this should match a space followed by "hh:mm"
'''
</snippet></ROW><ROW><id>15661307</id><snippet>&gt;&gt;&gt; RE = r'''
...     (?:(\d) \s day.*?)?        # this should match "n day" if it's there
...     \s(\d{1,2}):(\d{1,2}) # this should match a space followed by "hh:mm"
... '''
&gt;&gt;&gt; print re.search(RE, s1, re.VERBOSE).groups()
('1', '1', '24')
&gt;&gt;&gt; print re.search(RE, s2, re.VERBOSE).groups()
(None, '1', '24')
</snippet></ROW><ROW><id>15661307</id><snippet>:</snippet></ROW><ROW><id>15661307</id><snippet>.*?</snippet></ROW><ROW><id>15661307</id><snippet>.*?</snippet></ROW><ROW><id>15661307</id><snippet>day</snippet></ROW><ROW><id>15661307</id><snippet>day</snippet></ROW><ROW><id>15661519</id><snippet>.manage_setLocalRoles()</snippet></ROW><ROW><id>15661617</id><snippet>$@</snippet></ROW><ROW><id>15661617</id><snippet>$*</snippet></ROW><ROW><id>15661617</id><snippet>"</snippet></ROW><ROW><id>15661617</id><snippet>#!/bin/bash

export PYTHONPATH=lib64/python/side-packages
./command.py "$@"
</snippet></ROW><ROW><id>15661663</id><snippet>pip uninstall pyreadline</snippet></ROW><ROW><id>15661663</id><snippet>pyreadline-1.7.1.win32-py2.7.‌exe</snippet></ROW><ROW><id>15661676</id><snippet>DBEngine.CreateDatabase</snippet></ROW><ROW><id>15661676</id><snippet>dbVersion</snippet></ROW><ROW><id>15661676</id><snippet>import win32com.client
oAccess = win32com.client.Dispatch('Access.Application')
DbFile = r'C:\Users\hans\Documents\NewDb.mdb'
dbLangGeneral = ';LANGID=0x0409;CP=1252;COUNTRY=0'
# dbVersion40 64
dbVersion = 64
oAccess.DBEngine.CreateDatabase(DbFile, dbLangGeneral, dbVersion)
oAccess.Quit()
del oAccess
</snippet></ROW><ROW><id>15661699</id><snippet>format()</snippet></ROW><ROW><id>15661699</id><snippet>float</snippet></ROW><ROW><id>15661699</id><snippet>Decimal</snippet></ROW><ROW><id>15661699</id><snippet>format(value, ',.2f')
</snippet></ROW><ROW><id>15661699</id><snippet>&gt;&gt;&gt; format(12345.678, ',.2f')
'12,345.68'
</snippet></ROW><ROW><id>15661699</id><snippet>,</snippet></ROW><ROW><id>15661699</id><snippet>Decimal</snippet></ROW><ROW><id>15661699</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; format(math.floor(12345.678 * 100) / 100, ',.2f')
'12,345.67'
</snippet></ROW><ROW><id>15661737</id><snippet>from app import app, db</snippet></ROW><ROW><id>15661737</id><snippet>__init__()</snippet></ROW><ROW><id>15662428</id><snippet>run</snippet></ROW><ROW><id>15662428</id><snippet>def run(self):
    while not self.finished.isSet():
        print "Time: %s - timer running..." % time.asctime()

        self.resetted = True
        while self.resetted:
            print "Time: %s - timer waiting for timeout in %.2f..." % (time.asctime(), self.interval)
            self.resetted = False
            self.finished.wait(self.interval)

        if not self.finished.isSet():
            self.function(*self.args, **self.kwargs)
    print "Time: %s - timer finished!" % time.asctime()
</snippet></ROW><ROW><id>15662428</id><snippet>finished</snippet></ROW><ROW><id>15662684</id><snippet>MC.attemptTenTimes(MC.doSomething,*('argument2','argument3'))
</snippet></ROW><ROW><id>15662684</id><snippet>MC.attemptTenTimes(MC.doSomething,'argument2','argument3')
</snippet></ROW><ROW><id>15662684</id><snippet>attemptTenTimes</snippet></ROW><ROW><id>15662684</id><snippet>*args</snippet></ROW><ROW><id>15662684</id><snippet>args</snippet></ROW><ROW><id>15662684</id><snippet>args</snippet></ROW><ROW><id>15662684</id><snippet>((MC,'argument2','argument3'),)</snippet></ROW><ROW><id>15662684</id><snippet>len</snippet></ROW><ROW><id>15662684</id><snippet>len(args)</snippet></ROW><ROW><id>15662684</id><snippet>def attemptTenTimes(self,fun,args):
</snippet></ROW><ROW><id>15662684</id><snippet>*args</snippet></ROW><ROW><id>15662887</id><snippet>json.dumps(dict)</snippet></ROW><ROW><id>15662887</id><snippet>json</snippet></ROW><ROW><id>15662887</id><snippet>JSON.parse(data)</snippet></ROW><ROW><id>15663033</id><snippet>import mechanize 

br = mechanize.Browser()
br.open("http://stackoverflow.com")
request = br.request
request.header_items()
</snippet></ROW><ROW><id>15663033</id><snippet>[('Host', 'stackoverflow.com'), ('User-agent', 'Python-urllib/2.7')]
</snippet></ROW><ROW><id>15663033</id><snippet>(http.request.uri == "http://stackoverflow.com/")</snippet></ROW><ROW><id>15663249</id><snippet>import re
def findall(string, chars)
    m = re.search("[%s]" % chars, string, re.DOTALL)
    if m:
        return m.start()
    return -1
</snippet></ROW><ROW><id>15663288</id><snippet>send_offer</snippet></ROW><ROW><id>15663414</id><snippet>csv</snippet></ROW><ROW><id>15663414</id><snippet>?</snippet></ROW><ROW><id>15663414</id><snippet>import csv

with open('file1', 'rb') as file1:
    file1_data = dict(line.split(None, 2)[1::-1] for line in file1 if line.strip())

with open('file2', 'rb') as file2, open('output', 'wb') as outputfile:
    output = csv.writer(outputfile, delimiter='|')
    for line in file2:
        if line[:1] == '?':
            row = line.strip().split('|')
            key = row[0][1:]
            if key in file1_data:
                 output.writerow(row + [file1_data[key]])
</snippet></ROW><ROW><id>15663414</id><snippet>?dog|parallel|numbering|position|23
?cat|parallel|nuucers|position|24
</snippet></ROW><ROW><id>15663477</id><snippet>class someObject:
</snippet></ROW><ROW><id>15663477</id><snippet>class someObject(object):
</snippet></ROW><ROW><id>15663493</id><snippet>https?://(?!(www\.domain\.com\/?)).*</snippet></ROW><ROW><id>15663591</id><snippet>import itertools
from pprint import pprint

W,H,D = 3,4,5
p = [[[k*W*H + j*W+i for i in xrange(3)] for j in xrange(4)] for k in xrange(5)]
assert (W,H,D) == (len(p[0][0]),len(p[0]),len(p))
pprint(p)

print
for i, j, k in itertools.product(xrange(D), xrange(H), xrange(W)):
    print "p[%d][%d][%d] = %d" % (i, j, k, p[i][j][k])
print
for i in xrange(D):
    for j in xrange(H):
        for k in xrange(W):
            print "p[%d][%d][%d] = %d" % (i, j, k, p[i][j][k])
print
for col in p:
    for row in col:
        for elem in row:
            print elem
print
for i, col in enumerate(p):
    for j, row in enumerate(col):
        for k, elem in enumerate(row):
            print "p[%d][%d][%d] = %d" % (i, j, k, elem)
</snippet></ROW><ROW><id>15663931</id><snippet>func(arg1, arg2, arg3)
</snippet></ROW><ROW><id>15663931</id><snippet>args = (arg1, arg2, arg3)
func(*args)
</snippet></ROW><ROW><id>15663931</id><snippet>Or(*(And(...),...))
</snippet></ROW><ROW><id>15663931</id><snippet>conditions = (And(...), ...)
Or(*conditions)
</snippet></ROW><ROW><id>15663931</id><snippet>def AndCond(a, b):
    for ....:
        yield And(...)

Or(*AndCond(v1, v2))
</snippet></ROW><ROW><id>15663931</id><snippet>h1, h2 = Consts('h1 h2', S)
def fun(h1 , h2):
    # possibly this should be a set() or frozenset()
    # since logically every pair should be unique?
    h1_h2_and_conds = [
        (cl_4712, me_1935),
        (cl_1871, me_1935),
        (cl_1871, me_6745),
        # ...
    ]
    and_conds = (And(h1==a, h2==b) for a,b in h1_h2_and_conds)
    return Or(*and_conds)
</snippet></ROW><ROW><id>15663984</id><snippet>df.info</snippet></ROW><ROW><id>15663984</id><snippet>In [21]: df.info()
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 3 entries, 0 to 2
Data columns:
A    3  non-null values
B    3  non-null values
dtypes: int64(2)
</snippet></ROW><ROW><id>15664053</id><snippet>inspect</snippet></ROW><ROW><id>15664053</id><snippet>import myModule

import inspect    
print inspect.getmembers(myModule, inspect.isclass)
</snippet></ROW><ROW><id>15664124</id><snippet>def foo():
    if conditional():
        logger.info("&lt;Conditional's meaning&gt; happened, so we're not "
                    "setting up the interface.")
</snippet></ROW><ROW><id>15664124</id><snippet>&gt;&gt;&gt; def foo():
...     if conditional():
...         logger.info("&lt;Conditional's meaning&gt; happened, so we're not "
...                     "setting up the interface.")
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_GLOBAL              0 (conditional)
              3 CALL_FUNCTION            0
              6 POP_JUMP_IF_FALSE       25

  3           9 LOAD_GLOBAL              1 (logger)
             12 LOAD_ATTR                2 (info)
             15 LOAD_CONST               1 ("&lt;Conditional's meaning&gt; happened, so we're not setting up the interface.")
             18 CALL_FUNCTION            1
             21 POP_TOP             
             22 JUMP_FORWARD             0 (to 25)
        &gt;&gt;   25 LOAD_CONST               0 (None)
             28 RETURN_VALUE        
</snippet></ROW><ROW><id>15664124</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>15664124</id><snippet>+</snippet></ROW><ROW><id>15664124</id><snippet>&gt;&gt;&gt; def foo():
...     if conditional():
...         logger.info("&lt;Conditional's meaning&gt; happened, so we're not " + 
...                     "setting up the interface.")
... 
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_GLOBAL              0 (conditional)
              3 CALL_FUNCTION            0
              6 POP_JUMP_IF_FALSE       29

  3           9 LOAD_GLOBAL              1 (logger)
             12 LOAD_ATTR                2 (info)
             15 LOAD_CONST               1 ("&lt;Conditional's meaning&gt; happened, so we're not ")

  4          18 LOAD_CONST               2 ('setting up the interface.')
             21 BINARY_ADD          
             22 CALL_FUNCTION            1
             25 POP_TOP             
             26 JUMP_FORWARD             0 (to 29)
        &gt;&gt;   29 LOAD_CONST               0 (None)
             32 RETURN_VALUE        
</snippet></ROW><ROW><id>15664124</id><snippet>+</snippet></ROW><ROW><id>15664124</id><snippet>*</snippet></ROW><ROW><id>15664124</id><snippet>-</snippet></ROW><ROW><id>15664124</id><snippet>+</snippet></ROW><ROW><id>15664124</id><snippet>peephole.c</snippet></ROW><ROW><id>15664273</id><snippet>def ig_f(dir, files):
    return [f for f in files if os.path.isfile(os.path.join(dir, f))]

shutil.copytree(SRC, DES, ignore=ig_f)
</snippet></ROW><ROW><id>15664634</id><snippet>==</snippet></ROW><ROW><id>15664634</id><snippet>=</snippet></ROW><ROW><id>15664644</id><snippet>&gt;&gt;&gt; from sqlalchemy import *
&gt;&gt;&gt; create_engine("driver://")
Traceback (most recent call last):
... etc
sqlalchemy.exc.ArgumentError: Can't load plugin: sqlalchemy.dialects:driver
</snippet></ROW><ROW><id>15664875</id><snippet>Scipy-stack</snippet></ROW><ROW><id>15664875</id><snippet>scipy</snippet></ROW><ROW><id>15664875</id><snippet>scipy-stack</snippet></ROW><ROW><id>15664875</id><snippet>numpy-MKL</snippet></ROW><ROW><id>15664875</id><snippet>scipy</snippet></ROW><ROW><id>15664875</id><snippet>matplotlib</snippet></ROW><ROW><id>15664875</id><snippet>ipython</snippet></ROW><ROW><id>15664875</id><snippet>pandas</snippet></ROW><ROW><id>15664875</id><snippet>sympy</snippet></ROW><ROW><id>15664875</id><snippet>nose</snippet></ROW><ROW><id>15664875</id><snippet>Python-dateutil</snippet></ROW><ROW><id>15664875</id><snippet>distribute</snippet></ROW><ROW><id>15664875</id><snippet>gmpy</snippet></ROW><ROW><id>15664875</id><snippet>PIL</snippet></ROW><ROW><id>15664875</id><snippet>pygments</snippet></ROW><ROW><id>15664875</id><snippet>pyreadline</snippet></ROW><ROW><id>15664875</id><snippet>pytz</snippet></ROW><ROW><id>15664875</id><snippet>statsmodels</snippet></ROW><ROW><id>15664875</id><snippet>tornado</snippet></ROW><ROW><id>15664875</id><snippet>scipy-stack</snippet></ROW><ROW><id>15664875</id><snippet>numpy-1.7.1</snippet></ROW><ROW><id>15664875</id><snippet>scipy-0.12</snippet></ROW><ROW><id>15664875</id><snippet>ipython-0.13.2</snippet></ROW><ROW><id>15664875</id><snippet>redist_wininst.py</snippet></ROW><ROW><id>15664875</id><snippet>scipy-stack</snippet></ROW><ROW><id>15665004</id><snippet>import numpy as np
np.dot(row(A,0), col(B,0))
</snippet></ROW><ROW><id>15665004</id><snippet>def dot(arr1, arr2):
    return sum([x*y for x,y in zip(arr1, arr2)])

dot(row(A,0), col(B,0))
</snippet></ROW><ROW><id>15665182</id><snippet>optionvalue.trace("w",lambda a,b,c,x='test':callbackfunc(x))
</snippet></ROW><ROW><id>15665182</id><snippet>def i_dont_care_what_the_name_is(a,b,c,x='test'):
    callbackfunc(x)
optionvalue.trace("w", i_dont_care_what_the_name_is)
</snippet></ROW><ROW><id>15665182</id><snippet>callbackfunc</snippet></ROW><ROW><id>15665241</id><snippet>print(L*cos(A*cos(T*sqrt(9.8/L)))-L*cos(A))
                                ^ added    ^ removed
</snippet></ROW><ROW><id>15665305</id><snippet>size</snippet></ROW><ROW><id>15665305</id><snippet>&gt;&gt;&gt; m = np.random.normal(0, 1, size=(500, 2))
&gt;&gt;&gt; m.shape
(500, 2)
&gt;&gt;&gt; m.mean(axis=0)
array([-0.02394296,  0.0684164 ])
&gt;&gt;&gt; m.std(axis=0)
array([ 1.04018539,  0.95281971])
</snippet></ROW><ROW><id>15665305</id><snippet>rand</snippet></ROW><ROW><id>15665305</id><snippet>numpy.random</snippet></ROW><ROW><id>15665726</id><snippet>threadLoad</snippet></ROW><ROW><id>15665726</id><snippet>run.communicate()</snippet></ROW><ROW><id>15665726</id><snippet>for thread in threads:
    thread.start()
    thread.join()
</snippet></ROW><ROW><id>15665726</id><snippet>for thread in threads:
    thread.start()
for thread in threads:
    thread.join()
</snippet></ROW><ROW><id>15665726</id><snippet>import subprocess
import threading


class Loader(object):
    def threadLoad(self, threadfileList):
        connectionstring = settings.connectionstring
        ...
        connection = psycopg2.connect(connectionstring)

        for filename in threadfileList:
            load_cmd =  # load command
            run = subprocess.Popen(load_cmd, shell=True)
            # block until subprocess is done
            run.communicate()
        name = threading.current_thread().name
        print "finished loading {n}".format(n=name)

    def finishUp(self):
        print 'finishing up'


def main():
    load = Loader()
    threads = [threading.Thread(target=load.threadLoad, args=(fileList, ))
               for fileList in (thread1fileList, thread2fileList,
                                thread3fileList, thread4fileList)]
    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()

    load.finishUp(connectionstring)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15665757</id><snippet>strcpy</snippet></ROW><ROW><id>15665757</id><snippet>void foo(char *name) {
    strcpy(name, "Hello World");
}
</snippet></ROW><ROW><id>15665843</id><snippet>vektor</snippet></ROW><ROW><id>15665843</id><snippet>__init__</snippet></ROW><ROW><id>15665843</id><snippet>def __init__(self, hodnota, chyba):
    self.vektor = [hodnota, chyba]
</snippet></ROW><ROW><id>15665908</id><snippet>\n</snippet></ROW><ROW><id>15665908</id><snippet>.rstrip</snippet></ROW><ROW><id>15665908</id><snippet>yourstring = 'L{0}LL\n'.format(yourstring.rstrip('\n'))
</snippet></ROW><ROW><id>15666285</id><snippet>db.Doc.update({"_id": b["_id"]}, {"$set": {"geolocCountry": myGeolocCountry}})
</snippet></ROW><ROW><id>15666669</id><snippet>myxml=ET.parse('path_to_yourxml')
for elem in myxml.getroot().findall('pi/pe/i'):
    if elem.find('css').text!='-0':
        for elem1 in elem.findall('m'):
            if eval(elem1.find('rs/r/bsa').text)&gt;0:
                print elem1.find('rs/r/name').text
</snippet></ROW><ROW><id>15666768</id><snippet># define necessary urls of your app which should always be present
urlpatterns = patterns('',
    url(r'^$', 'myapp.views.home', name='home'),
)

# then add urls of external apps if the app is present in INSTALLED_APPS
if 'social_networks' in settings.INSTALLED_APPS:
    urlpatterns += patterns('',
        url(r'^social/', include('social_networks.urls')),
    )
</snippet></ROW><ROW><id>15666827</id><snippet>split</snippet></ROW><ROW><id>15666827</id><snippet>split()</snippet></ROW><ROW><id>15666827</id><snippet>' 1  2   3  '.split()
=&gt; ['1', '2', '3']

'  1  2   3  '.split(None, 1)
=&gt; ['1', '2   3  ']
</snippet></ROW><ROW><id>15667001</id><snippet>set</snippet></ROW><ROW><id>15667001</id><snippet>dict</snippet></ROW><ROW><id>15667001</id><snippet>set</snippet></ROW><ROW><id>15667072</id><snippet>raw_input()</snippet></ROW><ROW><id>15667072</id><snippet>input()</snippet></ROW><ROW><id>15667072</id><snippet>input()</snippet></ROW><ROW><id>15667072</id><snippet>userName</snippet></ROW><ROW><id>15667072</id><snippet>usernName</snippet></ROW><ROW><id>15667072</id><snippet>n</snippet></ROW><ROW><id>15667072</id><snippet>legnthName</snippet></ROW><ROW><id>15667104</id><snippet>IndexError</snippet></ROW><ROW><id>15667104</id><snippet>def get_current_settings(self, slot):
    if slot &lt; 0:
        raise IndexError(...)
    return self.my_list[slot]
</snippet></ROW><ROW><id>15667328</id><snippet>id()</snippet></ROW><ROW><id>15667328</id><snippet>is</snippet></ROW><ROW><id>15667533</id><snippet>O(n)</snippet></ROW><ROW><id>15667533</id><snippet>n</snippet></ROW><ROW><id>15667533</id><snippet>subStr</snippet></ROW><ROW><id>15667533</id><snippet>string</snippet></ROW><ROW><id>15667533</id><snippet>O(n^2)</snippet></ROW><ROW><id>15667533</id><snippet>fn = fn[index+1 ::]
</snippet></ROW><ROW><id>15667533</id><snippet>O(n^2)</snippet></ROW><ROW><id>15667533</id><snippet>n-1</snippet></ROW><ROW><id>15667533</id><snippet>n-2</snippet></ROW><ROW><id>15667533</id><snippet>n-3</snippet></ROW><ROW><id>15667533</id><snippet>n-1</snippet></ROW><ROW><id>15667533</id><snippet>n-2</snippet></ROW><ROW><id>15667533</id><snippet>...</snippet></ROW><ROW><id>15667533</id><snippet>1</snippet></ROW><ROW><id>15667533</id><snippet>(n-1)*((n-1)+1)/2 = (n-1)*n/2 = O(n^2)</snippet></ROW><ROW><id>15667533</id><snippet>O(m*n)</snippet></ROW><ROW><id>15667533</id><snippet>m</snippet></ROW><ROW><id>15667533</id><snippet>try:
  si = iter(string)
  for c in subStr:
    while c != si.next():
      pass
except StopIteration:
  print "no match"
else:
  print "match"
</snippet></ROW><ROW><id>15667576</id><snippet>def split_input(string, chunk_size):
    num_chunks = len(string)/chunk_size
    if (len(string) % chunk_size != 0):
        num_chunks += 1
    output = []
    for i in range(0, num_chunks):
        output.append(string[chunk_size*i:chunk_size*(i+1)])
    return output
</snippet></ROW><ROW><id>15667576</id><snippet>input_chunks = split_input(user_input, 80)
for chunk in input_chunk:
    outFile.write(chunk + "\n")
</snippet></ROW><ROW><id>15667576</id><snippet>def split_input(user_string, chunk_size):
    output = []
    words = user_string.split(" ")
    total_length = 0

    while (total_length &lt; len(user_string) and len(words) &gt; 0):
        line = []
        next_word = words[0]
        line_len = len(next_word) + 1

        while  (line_len &lt; chunk_size) and len(words) &gt; 0:
            words.pop(0)
            line.append(next_word)

            if (len(words) &gt; 0):
                next_word = words[0]
                line_len += len(next_word) + 1

        line = " ".join(line)
        output.append(line)
        total_length += len(line) 

    return output
</snippet></ROW><ROW><id>15667765</id><snippet>{}</snippet></ROW><ROW><id>15667765</id><snippet>x</snippet></ROW><ROW><id>15667765</id><snippet>f</snippet></ROW><ROW><id>15667834</id><snippet>man</snippet></ROW><ROW><id>15667834</id><snippet>GENERATE_MAN</snippet></ROW><ROW><id>15667834</id><snippet>OUTPUT_DIRECTORY</snippet></ROW><ROW><id>15667958</id><snippet>sudo apt-get install graphviz libgraphviz-dev pkg-config</snippet></ROW><ROW><id>15667958</id><snippet>sudo apt-get install python-pip python-virtualenv</snippet></ROW><ROW><id>15667958</id><snippet>pip install pygraphviz</snippet></ROW><ROW><id>15667978</id><snippet>Decimal(hr) == Decimal('25.123400000000000176214598468504846096038818359375')</snippet></ROW><ROW><id>15667978</id><snippet>prev_hourly_rate['hourlyRate__max'] == Decimal(repr(hr))</snippet></ROW><ROW><id>15668036</id><snippet>from ctypes import *

class A(Structure):
    _fields_ = [
       ("a1", c_char_p),
       ("a2", c_int)]


class Callback(object):
    def outputCallback(self, a, b):         # outputCallback(): ?
        print a.contents.a1, a.contents.a2
                                            # The prototype of the `outputCallback`
                                            # tells that it returns nothing, `void`
cb = Callback()
CMPFUNC     = CFUNCTYPE(None, POINTER(A), c_void_p) # so `restype` shoud be
                                                    # None, void

cb.cmp_func = CMPFUNC(cb.outputCallback)

libc = CDLL('library.so')
libc.function1(0, 0, cb.cmp_func, 0, 0)
</snippet></ROW><ROW><id>15668036</id><snippet>#include &lt;stdio.h&gt;

#ifdef _WIN32
#define DLLEXPORT __declspec(dllexport) 
#else
#define DLLEXPORT
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef struct A
{
     const unsigned char* a1;
     unsigned int a2;
} A;

int DLLEXPORT function1(int a,
                        int b,
                        void (*outputCallback)(const A* a, void* b),
                        int c,
                        int d)
{
    A obj;

    obj.a1 = "Hello";
    obj.a2 = 5;

    outputCallback(&amp;obj, NULL);
    return 0;
}

#ifdef __cplusplus
};
#endif
</snippet></ROW><ROW><id>15668036</id><snippet>&gt;gcc library.c -o library.so -shared

&gt;python py.py
Hello 5

&gt;
</snippet></ROW><ROW><id>15668164</id><snippet>row_homogeneous=True</snippet></ROW><ROW><id>15668164</id><snippet>hexpand</snippet></ROW><ROW><id>15668164</id><snippet>vexpand</snippet></ROW><ROW><id>15668164</id><snippet>True</snippet></ROW><ROW><id>15668164</id><snippet>    # creamos una grilla
    self.grid = Gtk.Grid(column_homogeneous=True,
                         column_spacing=10,
                         row_spacing=10)

    [...]

    # creamos el TreeView
    self.treeview = Gtk.TreeView(model=self.liststore)
    # set the TreeView to expand both horizontally and vertically
    self.treeview.set_hexpand(True)
    self.treeview.set_vexpand(True)
</snippet></ROW><ROW><id>15668175</id><snippet>env.py</snippet></ROW><ROW><id>15668175</id><snippet>--autogenerate</snippet></ROW><ROW><id>15668175</id><snippet>env.py</snippet></ROW><ROW><id>15668175</id><snippet>run_migrations_online()</snippet></ROW><ROW><id>15668175</id><snippet>from configuration import app
from core.expense.models import user # added my model here

alembic_config = config.get_section(config.config_ini_section)
alembic_config['sqlalchemy.url'] = app.config['SQLALCHEMY_DATABASE_URI']
engine = engine_from_config(
    alembic_config,
    prefix='sqlalchemy.',
    poolclass=pool.NullPool)
</snippet></ROW><ROW><id>15668175</id><snippet>alembic revision --autogenerate -m "Added initial table"</snippet></ROW><ROW><id>15668175</id><snippet>def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('uuid', sa.GUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('created_on', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('uuid')
    )
    ### end Alembic commands ###
</snippet></ROW><ROW><id>15668277</id><snippet>channel</snippet></ROW><ROW><id>15668277</id><snippet>__init__</snippet></ROW><ROW><id>15668277</id><snippet>self.channel = 1
</snippet></ROW><ROW><id>15668277</id><snippet>channel()</snippet></ROW><ROW><id>15668277</id><snippet>property</snippet></ROW><ROW><id>15668277</id><snippet>self.name = value</snippet></ROW><ROW><id>15668277</id><snippet>self.name</snippet></ROW><ROW><id>15668302</id><snippet>check_in_out_item</snippet></ROW><ROW><id>15668302</id><snippet>Request</snippet></ROW><ROW><id>15668302</id><snippet>user</snippet></ROW><ROW><id>15668302</id><snippet>Member</snippet></ROW><ROW><id>15668302</id><snippet>check_in_out_item</snippet></ROW><ROW><id>15668302</id><snippet>Request</snippet></ROW><ROW><id>15668302</id><snippet>Member</snippet></ROW><ROW><id>15668342</id><snippet>import xml.etree.ElementTree as ET

et = ET.parse('xml/test.xml')

for child in et.getroot():
    for core in child:
        core_value = str(core.text)
        core.text = core_value.decode('unicode-escape')

et.write('output.xml')
</snippet></ROW><ROW><id>15668535</id><snippet>"tags": [{"name": "my_tag"}, {"name": "my-other-tag"}]
</snippet></ROW><ROW><id>15668535</id><snippet>import ckan.plugins.toolkit as tk
my_package = tk.get_action('package_show')({'id': 'my_package'})
</snippet></ROW><ROW><id>15668596</id><snippet>&gt;&gt;&gt; m = np.random.normal(0, 1, size=(5, 2))
&gt;&gt;&gt; m[:,0].shape
(5,)
</snippet></ROW><ROW><id>15668596</id><snippet>&gt;&gt;&gt; m[:, [0]].shape
(5, 1)
</snippet></ROW><ROW><id>15668596</id><snippet>&gt;&gt;&gt; m[:,:1].shape
(5, 1)
</snippet></ROW><ROW><id>15668596</id><snippet>None</snippet></ROW><ROW><id>15668596</id><snippet>np.newaxis</snippet></ROW><ROW><id>15668596</id><snippet>&gt;&gt;&gt; m[:,0,None].shape
(5, 1)
&gt;&gt;&gt; m[:,0][:,None].shape
(5, 1)
&gt;&gt;&gt; m[:,0, None, None].shape
(5, 1, 1)
</snippet></ROW><ROW><id>15668596</id><snippet>&gt;&gt;&gt; m[:,0].reshape(5,1).shape
(5, 1)
</snippet></ROW><ROW><id>15668721</id><snippet>foo</snippet></ROW><ROW><id>15668721</id><snippet>print</snippet></ROW><ROW><id>15668721</id><snippet>i = []

def foo(j):
    while True:
        print j
        time.sleep(5)

thread.start_new_thread(foo,(i,))

while True:
    i.append(1)
</snippet></ROW><ROW><id>15668721</id><snippet>i = i+1</snippet></ROW><ROW><id>15668721</id><snippet>0</snippet></ROW><ROW><id>15668721</id><snippet>0 + 1</snippet></ROW><ROW><id>15668721</id><snippet>i</snippet></ROW><ROW><id>15668721</id><snippet>foo</snippet></ROW><ROW><id>15668721</id><snippet>0</snippet></ROW><ROW><id>15668721</id><snippet>set</snippet></ROW><ROW><id>15668721</id><snippet>get</snippet></ROW><ROW><id>15668721</id><snippet>i.set(i.get() + 1)</snippet></ROW><ROW><id>15668721</id><snippet>i.get()</snippet></ROW><ROW><id>15668721</id><snippet>list</snippet></ROW><ROW><id>15668721</id><snippet>i[0] = i[0] + 1</snippet></ROW><ROW><id>15668721</id><snippet>i[0]</snippet></ROW><ROW><id>15668721</id><snippet>i</snippet></ROW><ROW><id>15668721</id><snippet>i = [0]

def foo(j):
    print j[0]
    time.sleep(5)

thread.start_new_thread(foo,(i,))

while True:
    i[0] = i[0]+1
</snippet></ROW><ROW><id>15668721</id><snippet>foo</snippet></ROW><ROW><id>15668721</id><snippet>i</snippet></ROW><ROW><id>15668721</id><snippet>foo</snippet></ROW><ROW><id>15668721</id><snippet>i</snippet></ROW><ROW><id>15668721</id><snippet>i</snippet></ROW><ROW><id>15668721</id><snippet>thread</snippet></ROW><ROW><id>15668721</id><snippet>threading</snippet></ROW><ROW><id>15668721</id><snippet>i = []
lock = threading.Lock()

def foo(j):
    while True:
        with lock:
            print j[0]
        time.sleep(5)

t = threading.Thread(target=foo, args=(i,))
t.start()

while True:
    with lock:
        i[0] = i[0]+1
</snippet></ROW><ROW><id>15668721</id><snippet>join</snippet></ROW><ROW><id>15668721</id><snippet>foo</snippet></ROW><ROW><id>15668721</id><snippet>join</snippet></ROW><ROW><id>15668721</id><snippet>t.start()</snippet></ROW><ROW><id>15668721</id><snippet>t.daemon = True</snippet></ROW><ROW><id>15668721</id><snippet>Queue</snippet></ROW><ROW><id>15668721</id><snippet>select</snippet></ROW><ROW><id>15668724</id><snippet>getpass.getpass()</snippet></ROW><ROW><id>15668800</id><snippet>fread()</snippet></ROW><ROW><id>15668800</id><snippet>import sys

while True:
   line = sys.stdin.readline()
   print repr(line)
</snippet></ROW><ROW><id>15668800</id><snippet>'\n'</snippet></ROW><ROW><id>15668800</id><snippet>''</snippet></ROW><ROW><id>15668800</id><snippet>if line == '': break</snippet></ROW><ROW><id>15668928</id><snippet>data</snippet></ROW><ROW><id>15668928</id><snippet>pushButtonColorize</snippet></ROW><ROW><id>15668928</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)

import random
from PyQt4 import QtGui, QtCore

class MyStandardItemModel(QtGui.QStandardItemModel):
    _colorize = False
    def __init__(self, parent=None):
        super(MyStandardItemModel, self).__init__(parent)

    def setColorized(self, state):
        self._colorize = state

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if role == QtCore.Qt.BackgroundColorRole \
        and not self._colorize:
            return QtGui.QBrush()

        return super(MyStandardItemModel, self).data(index, role)

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.pushButtonColorize = QtGui.QPushButton(self)
        self.pushButtonColorize.setText("Colorize Cells!")
        self.pushButtonColorize.setCheckable(True)
        self.pushButtonColorize.toggled.connect(self.on_pushButtonColorize_toggled)

        self.pushButtonReload = QtGui.QPushButton(self)
        self.pushButtonReload.setText("Reload Data!")
        self.pushButtonReload.clicked.connect(self.on_pushButtonReload_clicked)

        self.modelSource = MyStandardItemModel(self)

        self.tableView = QtGui.QTableView(self)
        self.tableView.horizontalHeader().setStretchLastSection(True)
        self.tableView.setModel(self.modelSource)

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.pushButtonReload)
        self.layoutVertical.addWidget(self.pushButtonColorize)
        self.layoutVertical.addWidget(self.tableView)

        self.pushButtonReload.click()

    @QtCore.pyqtSlot()
    def on_pushButtonReload_clicked(self):
        self.modelSource.clear()

        for rowNumber in range(3):
            items = []
            for columnNumber in range(3):
                item = QtGui.QStandardItem()
                item.setText(str(random.getrandbits(1)))

                items.append(item)

            self.modelSource.appendRow(items)

        if self.pushButtonColorize.isChecked():
            self.on_pushButtonColorize_toggled(True)

    @QtCore.pyqtSlot(bool)
    def on_pushButtonColorize_toggled(self, state):
        self.modelSource.setColorized(state)

        rowCount    = self.modelSource.rowCount()
        columnCount = self.modelSource.columnCount()

        for rowNumber in range(rowCount):
            for columnNumber in range(columnCount):
                cellIndex = self.modelSource.index(rowNumber, columnNumber)
                cellData  = self.modelSource.data(cellIndex, QtCore.Qt.DisplayRole)

                if str(cellData).isdigit() \
                and int(cellData) == 1:
                    for cellColumn in range(columnCount):
                        self.modelSource.setData(
                            self.modelSource.index(rowNumber, cellColumn),
                            QtGui.QColor(QtCore.Qt.blue),
                            QtCore.Qt.BackgroundColorRole
                        )

        self.modelSource.endResetModel()

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.resize(333, 222)
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15669040</id><snippet>&gt;&gt;&gt; from urllib2 import unquote
&gt;&gt;&gt; unquote('rand_id%3A%3Ftmsid%3D1340496000_EP002960010145_11_0_10050_1_2_10036')
'rand_id:?tmsid=1340496000_EP002960010145_11_0_10050_1_2_10036'
</snippet></ROW><ROW><id>15669040</id><snippet>=</snippet></ROW><ROW><id>15669040</id><snippet>_</snippet></ROW><ROW><id>15669040</id><snippet>&gt;&gt;&gt; unquoted = unquote('rand_id%3A%3Ftmsid%3D1340496000_EP002960010145_11_0_10050_1_2_10036')
&gt;&gt;&gt; unquoted.split('=', 1)[1].split('_')
['1340496000', 'EP002960010145', '11', '0', '10050', '1', '2', '10036']
&gt;&gt;&gt; timestamp, event = unquoted.split('=', 1)[1].split('_')[:2]
&gt;&gt;&gt; timestamp, event
('1340496000', 'EP002960010145')
</snippet></ROW><ROW><id>15669040</id><snippet>&amp;</snippet></ROW><ROW><id>15669040</id><snippet>urlparse.parse_qs()</snippet></ROW><ROW><id>15669040</id><snippet>&gt;&gt;&gt; from urlparse import parse_qs
&gt;&gt;&gt; parse_qs(unquoted.split('?', 1)[1])
{'tmsid': ['1340496000_EP002960010145_11_0_10050_1_2_10036']}
&gt;&gt;&gt; parsed = parse_qs(unquoted.split('?', 1)[1])
&gt;&gt;&gt; timestamp, event = parsed['tmsid'][0].split('_', 2)[:2]
&gt;&gt;&gt; timestamp, event
('1340496000', 'EP002960010145')
</snippet></ROW><ROW><id>15669247</id><snippet>[1,]</snippet></ROW><ROW><id>15669247</id><snippet>[1]</snippet></ROW><ROW><id>15669247</id><snippet>numpy</snippet></ROW><ROW><id>15669247</id><snippet>def __getitem__(self, idx):
    if isinstance(idx, numbers.Integral):
        idx = (idx, slice(None, None, None))
    # now the rest of your code only needs to handle tuples
</snippet></ROW><ROW><id>15669247</id><snippet>[n]</snippet></ROW><ROW><id>15669247</id><snippet>[n:n+1][0]</snippet></ROW><ROW><id>15669247</id><snippet>-1</snippet></ROW><ROW><id>15669247</id><snippet>n[-1] != n[-1:0][0]</snippet></ROW><ROW><id>15669247</id><snippet>__getitem__</snippet></ROW><ROW><id>15669247</id><snippet>__setitem__</snippet></ROW><ROW><id>15669247</id><snippet>class Matrix(object):
    def __init__(self):
        self.m = [[row + col/10. for col in range(4)] for row in range(4)]
    def __getitem__(self, idx):
        if isinstance(idx, (numbers.Integral, slice)):
            idx = (idx, slice(None, None, None))
        elif len(idx) == 1:
            idx = (idx[0], slice(None, None, None))
        rowidx, colidx = idx
        rowslice, colslice = True, True
        if isinstance(rowidx, numbers.Integral):
            rowidx, rowslice = slice(rowidx, rowidx+1), False
        if isinstance(colidx, numbers.Integral):
            colidx, colslice = slice(colidx, colidx+1), False
        ret = self.m[rowidx][colidx]
        if not colslice:
            ret = [row[0] for row in ret]
        if not rowslice:
            ret = ret[0]
        return ret
</snippet></ROW><ROW><id>15669247</id><snippet>def _getrow(self, idx):
    return self.m[idx]

def __getitem__(self, idx):
    if isinstance(idx, (numbers.Integral, slice)):
        return self._getrow(idx)
    rowidx, colidx = idx
    if isinstance(rowidx, numbers.Integral):
        return self._getrow(rowidx)[colidx]
    else:
        return [row[colidx] for row in self._getrow(rowidx)]
</snippet></ROW><ROW><id>15669247</id><snippet>list</snippet></ROW><ROW><id>15669247</id><snippet>list</snippet></ROW><ROW><id>15669247</id><snippet>list</snippet></ROW><ROW><id>15669247</id><snippet>__getitem__</snippet></ROW><ROW><id>15669247</id><snippet>try</snippet></ROW><ROW><id>15669247</id><snippet>[0]</snippet></ROW><ROW><id>15669247</id><snippet>.start</snippet></ROW><ROW><id>15669247</id><snippet>try:
    idx[0]
except AttributeError:
    idx = (idx, slice(None, None, None))
</snippet></ROW><ROW><id>15669255</id><snippet>counts[np.arange(1000), row] += 1
</snippet></ROW><ROW><id>15669255</id><snippet>chunk = np.random.randint(256, size=(1000, 1000))

def count_chunk(chunk):
    rows, cols = chunk.shape
    col_idx = np.arange(cols) * 256
    counts = np.bincount((col_idx[None, :] + chunk).ravel(),
                         minlength=256*cols)
    return counts.reshape(-1, 256)

def count_chunk_by_rows(chunk):
    counts = np.zeros(chunk.shape[1:]+(256,), dtype=np.int)
    indices = np.arange(chunk.shape[-1])
    for row in chunk:
        counts[indices, row] += 1
    return counts
</snippet></ROW><ROW><id>15669255</id><snippet>In [2]: c = count_chunk_by_rows(chunk)

In [3]: d = count_chunk(chunk)

In [4]: np.all(c == d)
Out[4]: True

In [5]: %timeit count_chunk_by_rows(chunk)
10 loops, best of 3: 80.5 ms per loop

In [6]: %timeit count_chunk(chunk)
100 loops, best of 3: 13.8 ms per loop
</snippet></ROW><ROW><id>15669343</id><snippet>?</snippet></ROW><ROW><id>15669343</id><snippet>python</snippet></ROW><ROW><id>15669343</id><snippet>&lt;div class="footer"&gt;
  &lt;?python import time; year = time.strftime('%Y') ?&gt;
  © Copyright 2008-${year}, Agendaless Consulting.
&lt;/div&gt;
</snippet></ROW><ROW><id>15669808</id><snippet>while True:
    data = s.recv(1024)
    if (data == "") or (data=="quit"): 
        break
    proc.stdin.write('%s\n' % data)
    proc.stdin.flush()
    remainder = proc.communicate()[0]
    print remainder
    stdoutput=proc.stdout.read() + proc.stderr.read()
</snippet></ROW><ROW><id>15669808</id><snippet>proc.communicate()</snippet></ROW><ROW><id>15669808</id><snippet>ValueError: I/O operation on closed file</snippet></ROW><ROW><id>15669808</id><snippet>cmd.exe</snippet></ROW><ROW><id>15669808</id><snippet>proc = subprocess.Popen('cmd.exe', …)</snippet></ROW><ROW><id>15669808</id><snippet>communicate</snippet></ROW><ROW><id>15669808</id><snippet>stdin</snippet></ROW><ROW><id>15669808</id><snippet>stdout</snippet></ROW><ROW><id>15669808</id><snippet>stderr</snippet></ROW><ROW><id>15669808</id><snippet>cd \Users\me\Documents</snippet></ROW><ROW><id>15669808</id><snippet>dir</snippet></ROW><ROW><id>15669808</id><snippet>C:\python27\Tools</snippet></ROW><ROW><id>15669808</id><snippet>C:\Users\me\Documents</snippet></ROW><ROW><id>15669808</id><snippet>proc.stdout</snippet></ROW><ROW><id>15669808</id><snippet>proc.stderr</snippet></ROW><ROW><id>15669808</id><snippet>s</snippet></ROW><ROW><id>15669808</id><snippet>select</snippet></ROW><ROW><id>15669808</id><snippet>stdout</snippet></ROW><ROW><id>15669808</id><snippet>stderr</snippet></ROW><ROW><id>15669808</id><snippet>twisted</snippet></ROW><ROW><id>15669808</id><snippet>communicate</snippet></ROW><ROW><id>15669808</id><snippet>s.recv(1024)</snippet></ROW><ROW><id>15669808</id><snippet>recv</snippet></ROW><ROW><id>15669808</id><snippet>makefile</snippet></ROW><ROW><id>15669808</id><snippet>while True:
    data = s.recv(1024)
</snippet></ROW><ROW><id>15669808</id><snippet>f = s.makefile()
while True:
    data = f.readline()
</snippet></ROW><ROW><id>15669808</id><snippet>close</snippet></ROW><ROW><id>15669808</id><snippet>f</snippet></ROW><ROW><id>15669808</id><snippet>s</snippet></ROW><ROW><id>15669808</id><snippet>s</snippet></ROW><ROW><id>15669808</id><snippet>makefile</snippet></ROW><ROW><id>15669808</id><snippet>f</snippet></ROW><ROW><id>15669808</id><snippet>with s.makefile() as f:
    s.close()
    for data in f:
</snippet></ROW><ROW><id>15669808</id><snippet>apt-get netcat</snippet></ROW><ROW><id>15669808</id><snippet>apt-get nc</snippet></ROW><ROW><id>15669808</id><snippet>nc -l -p 1234
</snippet></ROW><ROW><id>15669808</id><snippet>cmd.exe</snippet></ROW><ROW><id>15669808</id><snippet>nc -e cmd.exe 192.168.2.7 1234
</snippet></ROW><ROW><id>15669808</id><snippet>nc -k -l -p 1234 -e cmd.exe
</snippet></ROW><ROW><id>15669808</id><snippet>nc windows.machine.address 1234
</snippet></ROW><ROW><id>15669808</id><snippet>-t</snippet></ROW><ROW><id>15669808</id><snippet>telnet</snippet></ROW><ROW><id>15669808</id><snippet>nc</snippet></ROW><ROW><id>15669819</id><snippet>split()</snippet></ROW><ROW><id>15669819</id><snippet>fileName = "input.txt"
with open(fileName,"r") as file:
    for line in file:
        for word in line.split():
            if  word != '#':
                print word
            else:
                print "End of File"
</snippet></ROW><ROW><id>15669848</id><snippet>&gt;&gt;&gt; from ghost import Ghost
&gt;&gt;&gt; ghost = Ghost()
&gt;&gt;&gt; ghost.open('https://google.lt')
&gt;&gt;&gt; width, resources = ghost.evaluate("document.getElementById('gbqfq').offsetWidth;")
&gt;&gt;&gt; width
541.0  # google text box width 541px
</snippet></ROW><ROW><id>15669892</id><snippet>slice</snippet></ROW><ROW><id>15669892</id><snippet>&gt;&gt;&gt; p = slice(1, 29)
&gt;&gt;&gt; section = s[p, p]
&gt;&gt;&gt; section.shape
(28L, 28L)
</snippet></ROW><ROW><id>15669892</id><snippet>&gt;&gt;&gt; p = np.arange(1, 19)
&gt;&gt;&gt; section_bis = s[p[:, None], p]
&gt;&gt;&gt; section_bis.shape
(28L, 28L)
</snippet></ROW><ROW><id>15669892</id><snippet>&gt;&gt;&gt; section_bis[:] = 0
&gt;&gt;&gt; s
array([[-1., -1., -1., ..., -1., -1., -1.],
       [-1., -1., -1., ..., -1., -1., -1.],
       [-1., -1., -1., ..., -1., -1., -1.],
       ..., 
       [-1., -1., -1., ..., -1., -1., -1.],
       [-1., -1., -1., ..., -1., -1., -1.],
       [-1., -1., -1., ..., -1., -1., -1.]])
</snippet></ROW><ROW><id>15669892</id><snippet>&gt;&gt;&gt; section[:] = 0
&gt;&gt;&gt;
array([[-1., -1., -1., ..., -1., -1., -1.],
       [-1.,  0.,  0., ..., -1., -1., -1.],
       [-1.,  0.,  0., ..., -1., -1., -1.],
       ..., 
       [-1., -1., -1., ..., -1., -1., -1.],
       [-1., -1., -1., ..., -1., -1., -1.],
       [-1., -1., -1., ..., -1., -1., -1.]])
</snippet></ROW><ROW><id>15670076</id><snippet>which</snippet></ROW><ROW><id>15670076</id><snippet>find / -name aaa.f90 -print
</snippet></ROW><ROW><id>15670223</id><snippet>C = [[x + y for x,y in zip(w,v)] for w,v in zip(A,B)]
</snippet></ROW><ROW><id>15670572</id><snippet>%</snippet></ROW><ROW><id>15670572</id><snippet>con.execute("SELECT STR_TO_DATE(date_recieved, '%m/%d/%Y') from raw_table")
</snippet></ROW><ROW><id>15670572</id><snippet>con.execute("SELECT STR_TO_DATE(date_recieved, '%%m/%%d/%%Y') from raw_table", ())
</snippet></ROW><ROW><id>15670572</id><snippet>print "a %s %d" 
</snippet></ROW><ROW><id>15670572</id><snippet>print "a %s %d" % () 
</snippet></ROW><ROW><id>15670672</id><snippet>Python.h</snippet></ROW><ROW><id>15671090</id><snippet>collections.Counter</snippet></ROW><ROW><id>15671090</id><snippet>sorted</snippet></ROW><ROW><id>15671090</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; values = [1,5,1,1,6,3,3,4,5,5,5,2,5]
&gt;&gt;&gt; counts = Counter(values)
&gt;&gt;&gt; for k, v in sorted(counts.iteritems(), key=lambda x:x[::-1]):
&gt;&gt;&gt;     print k, v * 'x'

2 x
4 x
6 x
3 xx
1 xxx
5 xxxxx
</snippet></ROW><ROW><id>15671103</id><snippet>def check_header(filename):
    with open(filename) as f:
        first = f.read(1)
    return first not in '.-0123456789'
</snippet></ROW><ROW><id>15671103</id><snippet>True</snippet></ROW><ROW><id>15671103</id><snippet>%timeit</snippet></ROW><ROW><id>15671103</id><snippet>read</snippet></ROW><ROW><id>15671103</id><snippet>readline</snippet></ROW><ROW><id>15671103</id><snippet>read</snippet></ROW><ROW><id>15671103</id><snippet>readline</snippet></ROW><ROW><id>15671103</id><snippet>readline</snippet></ROW><ROW><id>15671234</id><snippet>ipshell()</snippet></ROW><ROW><id>15671234</id><snippet>ipsh()</snippet></ROW><ROW><id>15671234</id><snippet>def ipsh():
    frame = currentframe().f_back
    msg = 'Stopped at {0.f_code.co_filename} and line {0.f_lineno}'.format(frame)
    ipshell(msg,stack_depth=2) # Go back one level!
</snippet></ROW><ROW><id>15671234</id><snippet>ipsh()</snippet></ROW><ROW><id>15671234</id><snippet>stack_depth=2</snippet></ROW><ROW><id>15671234</id><snippet>ipshell</snippet></ROW><ROW><id>15671234</id><snippet>1</snippet></ROW><ROW><id>15671234</id><snippet>currentframe().f_back()</snippet></ROW><ROW><id>15671234</id><snippet>ipsh()</snippet></ROW><ROW><id>15671443</id><snippet>onclick="this.disabled=true,this.form.submit();
</snippet></ROW><ROW><id>15671443</id><snippet>model.objects.get_or_create()</snippet></ROW><ROW><id>15671586</id><snippet>def get_old_value(attribute_state):
    history = attribute_state.history
    return history.deleted[0] if history.deleted else None


def trigger_attribute_change_events(object_):
    for mapper_property in object_mapper(object_).iterate_properties:
        if isinstance(mapper_property, ColumnProperty):
            key = mapper_property.key
            attribute_state = inspect(object_).attrs.get(key)
            history = attribute_state.history

            if history.has_changes():
                value = attribute_state.value
                # old_value is None for new objects and old value for dirty objects
                old_value = get_old_value(attribute_state)
                handler = registry.get(mapper_property)
                if handler:
                    handler(object_, value, old_value)


def on_after_flush(session, flush_context):
    changed_objects = session.new.union(session.dirty)
    for o in changed_objects:
        trigger_attribute_change_events(o)

event.listen(session, "after_flush", on_after_flush)
</snippet></ROW><ROW><id>15671586</id><snippet>registry</snippet></ROW><ROW><id>15671586</id><snippet>session</snippet></ROW><ROW><id>15671586</id><snippet>event</snippet></ROW><ROW><id>15671586</id><snippet>inspect</snippet></ROW><ROW><id>15671586</id><snippet>object_mapper</snippet></ROW><ROW><id>15671623</id><snippet>{Hat[0]: Hat[1:]}
</snippet></ROW><ROW><id>15671623</id><snippet>hats = [
    [334,'hat',59,200],
    [123,'chapeau',19,300],
    [999,'hut',1,100],
]

print( {Hat[0]: Hat[1:] for Hat in hats} )
</snippet></ROW><ROW><id>15671686</id><snippet>debuglevel=1</snippet></ROW><ROW><id>15671686</id><snippet>import urllib2
print (urllib2.urlopen('https://phihag.de/').read())
</snippet></ROW><ROW><id>15671878</id><snippet>print GM = iso.GraphMatcher(B,A,node_match=iso.categorical_node_match(['material', 'size'],['metal',1]))
</snippet></ROW><ROW><id>15671878</id><snippet>['metal',1]</snippet></ROW><ROW><id>15671938</id><snippet>.bashrc</snippet></ROW><ROW><id>15671938</id><snippet>export PATH=$HOME/Django-1.5/bin/:$HOME/.local/bin:$HOME/.local/usr/bin:$PATH
</snippet></ROW><ROW><id>15671938</id><snippet>.bashrc</snippet></ROW><ROW><id>15671938</id><snippet># . ~/.bashrc
</snippet></ROW><ROW><id>15672092</id><snippet>nSql</snippet></ROW><ROW><id>15672092</id><snippet>cur.execute(selectStatement)
res = cur.fetchall()
for outerrow in res:
    nSql = outerrow[0]
    cur.execute(nSql)
    # rest of your code
</snippet></ROW><ROW><id>15672129</id><snippet>list</snippet></ROW><ROW><id>15672129</id><snippet>texts = []
def notes():
    global texts
    txt = raw_input("\nPlease enter any notes.\n&gt;&gt;&gt; ")
    texts.append(txt) # Add the entered text inside the list
    print "\Note added to report."
    notes_menu()

def print_note():
    for txt in texts:
        new_report.write("\nNotes: \n%r" % txt)
</snippet></ROW><ROW><id>15672129</id><snippet>global</snippet></ROW><ROW><id>15672129</id><snippet>global</snippet></ROW><ROW><id>15672129</id><snippet>global</snippet></ROW><ROW><id>15672165</id><snippet>sys.exit</snippet></ROW><ROW><id>15672165</id><snippet>SystemExit</snippet></ROW><ROW><id>15672165</id><snippet>assertRaises</snippet></ROW><ROW><id>15672165</id><snippet>with self.assertRaises(SystemExit):
    your_method()
</snippet></ROW><ROW><id>15672165</id><snippet>SystemExit</snippet></ROW><ROW><id>15672165</id><snippet>code</snippet></ROW><ROW><id>15672165</id><snippet>assertRaises</snippet></ROW><ROW><id>15672165</id><snippet>exception</snippet></ROW><ROW><id>15672165</id><snippet>with self.assertRaises(SystemExit) as cm:
    your_method()

self.assertEqual(cm.exception.code, 1)
</snippet></ROW><ROW><id>15672165</id><snippet>SystemExit</snippet></ROW><ROW><id>15672379</id><snippet>data_1.reindex(rng, method = 'ffill')
data_1.reindex(Series(rng, index=rng), method = 'ffill')
</snippet></ROW><ROW><id>15672379</id><snippet>date_rng</snippet></ROW><ROW><id>15672407</id><snippet>if</snippet></ROW><ROW><id>15672407</id><snippet>while</snippet></ROW><ROW><id>15672407</id><snippet>if</snippet></ROW><ROW><id>15672407</id><snippet>else</snippet></ROW><ROW><id>15672407</id><snippet>else</snippet></ROW><ROW><id>15672407</id><snippet>secretLetters = list(secretWord)</snippet></ROW><ROW><id>15672407</id><snippet>"a"</snippet></ROW><ROW><id>15672407</id><snippet>"aaaaa"</snippet></ROW><ROW><id>15672407</id><snippet>def isWordGuessed(secretWord,lettersGuessed):
  guess  = 0
  secretLetters = list(secretWord)
  while guess &lt;= 8:
    secretWordLen = len(secretLetters)
    letter = input('Enter a letter: ')
    lettersGuessed.append(letter)

    print('Letters guessed so far: ',lettersGuessed)

    if letter not in secretLetters:
        guess += 1

    while letter in secretLetters:
        secretLetters.remove(letter)

    if secretLetters == []:
       return True

  return False
</snippet></ROW><ROW><id>15672407</id><snippet>list</snippet></ROW><ROW><id>15672407</id><snippet>set</snippet></ROW><ROW><id>15672407</id><snippet>secretLetters.remove(letter)</snippet></ROW><ROW><id>15672407</id><snippet>secretWordLen</snippet></ROW><ROW><id>15672407</id><snippet>lettersGuessed</snippet></ROW><ROW><id>15672407</id><snippet>help</snippet></ROW><ROW><id>15672407</id><snippet>['h', 'e', 'l', 'p']</snippet></ROW><ROW><id>15672407</id><snippet>def isWordGuessed(secretWord):
    guess = 0
    lettersGuessed = ''
    secretLetters = set(secretWord)
    while guess &lt;= 8:
        letter = input('Enter a letter: ')
        lettersGuessed += letter
        print('Letters guessed so far:', lettersGuessed)
        if letter not in secretLetters:
            guess += 1
        else:
            secretLetters.remove(letter)
            if not secretLetters:
                return True
    return False
</snippet></ROW><ROW><id>15672483</id><snippet>reset</snippet></ROW><ROW><id>15672483</id><snippet>p</snippet></ROW><ROW><id>15672483</id><snippet>Point</snippet></ROW><ROW><id>15672483</id><snippet>reset</snippet></ROW><ROW><id>15672483</id><snippet>Point</snippet></ROW><ROW><id>15672483</id><snippet>Point</snippet></ROW><ROW><id>15672483</id><snippet>staticmethod</snippet></ROW><ROW><id>15672483</id><snippet>class</snippet></ROW><ROW><id>15672639</id><snippet>ListboxSelect</snippet></ROW><ROW><id>15672639</id><snippet>selectmode=SINGLE</snippet></ROW><ROW><id>15672639</id><snippet>BROWSE</snippet></ROW><ROW><id>15672639</id><snippet>mylistbox.get(ACTIVE)
</snippet></ROW><ROW><id>15672639</id><snippet>mylistbox.get(mylistbox.curselection())
</snippet></ROW><ROW><id>15672639</id><snippet>MULTIPLE</snippet></ROW><ROW><id>15672639</id><snippet>EXTENDED</snippet></ROW><ROW><id>15672639</id><snippet>values = [mylistbox.get(idx) for idx in mylistbox.curselection()]
print ', '.join(values)
</snippet></ROW><ROW><id>15672639</id><snippet>str((mylistbox.get(ACTIVE)))</snippet></ROW><ROW><id>15672639</id><snippet>str(mylistbox.get(ACTIVE))</snippet></ROW><ROW><id>15672639</id><snippet>mylistbox.get</snippet></ROW><ROW><id>15672701</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data = [1, 5, 1, 1, 6, 3, 3, 4, 5, 5, 5, 2, 5]
correlation = [(i, data.count(i)) for i in set(data)]
correlation.sort(key=lambda x: x[1])

labels, values = zip(*correlation)

indexes = np.arange(len(correlation))
width = 1

plt.bar(indexes, values, width)
plt.xticks(indexes + width * 0.5, labels)
plt.show()
</snippet></ROW><ROW><id>15672701</id><snippet>count</snippet></ROW><ROW><id>15672701</id><snippet>from collections import Counter
import numpy as np
import matplotlib.pyplot as plt
data = np.random.random_integers(0, 10**4, 10**5)
correlation = Counter(data).items()
correlation.sort(key=lambda x: x[1])
labels, values = zip(*correlation)
indexes = np.arange(len(correlation))

plt.plot(indexes, values)
plt.fill_between(indexes, values, 0)
plt.show()
</snippet></ROW><ROW><id>15672793</id><snippet>df2</snippet></ROW><ROW><id>15672793</id><snippet>df1</snippet></ROW><ROW><id>15672793</id><snippet>df1.set_index("id", inplace=True)
df2.set_index("id", inplace=True)
df3 = df1.merge(df2.ix[:,df2.columns-df1.columns], left_index=True, right_index=True, how="outer")
</snippet></ROW><ROW><id>15672793</id><snippet>df1</snippet></ROW><ROW><id>15672793</id><snippet>df2</snippet></ROW><ROW><id>15672793</id><snippet>df1</snippet></ROW><ROW><id>15673171</id><snippet>float(your_string.rstrip('%')) / 100.0
</snippet></ROW><ROW><id>15673171</id><snippet>%</snippet></ROW><ROW><id>15673171</id><snippet>%</snippet></ROW><ROW><id>15673171</id><snippet>float(your_string[:-1]) / 100.0
</snippet></ROW><ROW><id>15673188</id><snippet>a = c
c = getMod(a, c)
</snippet></ROW><ROW><id>15673254</id><snippet>shapely</snippet></ROW><ROW><id>15673254</id><snippet>import shapely.geometry
import descartes
import matplotlib.pyplot as plt

lines = ([(0, 0), (1, 0), (0, 1)],
         [(0, 0), (1, 1)],
         [(0.5, 0.5), (1, 0.5)],
         )
lines = shapely.geometry.MultiLineString(lines)
# "0.05" is the _radius_ in data coords, so the width will be 0.1 units.
poly = lines.buffer(0.05)

fig, ax = plt.subplots()
patch = descartes.PolygonPatch(poly, fc='gray', ec='black')
ax.add_artist(patch)

# Rescale things to leave a bit of room around the edges...
ax.margins(0.1)

plt.show()
</snippet></ROW><ROW><id>15673254</id><snippet>import matplotlib.pyplot as plt

def main():
    lines = ([(0, 0), (1, 0), (0, 1)],
             [(0, 0), (1, 1)],
             [(0.5, 0.5), (1, 0.5)],
             )

    fig, ax = plt.subplots()
    artists = []
    for verts in lines:
        x, y = zip(*verts)
        line, = ax.plot(x, y)
        artists.append(line)

    scalar = StrokeScalar(artists, 0.1)
    ax.callbacks.connect('xlim_changed', scalar)
    ax.callbacks.connect('ylim_changed', scalar)

    # Rescale things to leave a bit of room around the edges...
    ax.margins(0.05)

    plt.show()

class StrokeScalar(object):
    def __init__(self, artists, width):
        self.width = width
        self.artists = artists
        # Assume there's only one axes and one figure, for the moment...
        self.ax = artists[0].axes
        self.fig = self.ax.figure

    def __call__(self, event):
        """Intended to be connected to a draw event callback."""
        for artist in self.artists:
            artist.set_linewidth(self.stroke_width)

    @property
    def stroke_width(self):
        positions = [[0, 0], [self.width, self.width]]
        to_inches = self.fig.dpi_scale_trans.inverted().transform
        pixels = self.ax.transData.transform(positions)
        points = to_inches(pixels) * 72
        return points.ptp(axis=0).mean() # Not quite correct...

main()
</snippet></ROW><ROW><id>15673325</id><snippet>matches</snippet></ROW><ROW><id>15673325</id><snippet>numpy.lib.recfunctions.stack_arrays</snippet></ROW><ROW><id>15673325</id><snippet>In [21]: import numpy.lib.recfunctions as rfn

In [22]: rfn.stack_arrays(matches,usemask=False)
Out[22]: 
array([(datetime.date(2013, 4, 5), 0, 1, 2, 3),
       (datetime.date(2013, 4, 5), 5, 1, 5, 6)], 
      dtype=[('date', 'O'), ('open', 'i1'), ('high', 'i1'), ('low', 'i1'), ('close', 'i1')])
</snippet></ROW><ROW><id>15673325</id><snippet>In [23]: d[d['high'] == 1]
Out[23]: 
array([(datetime.date(2013, 4, 5), 0, 1, 2, 3),
       (datetime.date(2013, 4, 5), 5, 1, 5, 6)], 
      dtype=[('date', 'O'), ('open', 'i1'), ('high', 'i1'), ('low', 'i1'), ('close', 'i1')])
</snippet></ROW><ROW><id>15673351</id><snippet>for i in (x, limit):
</snippet></ROW><ROW><id>15673351</id><snippet>range</snippet></ROW><ROW><id>15673351</id><snippet>x</snippet></ROW><ROW><id>15673351</id><snippet>print('At the top x is : {}'.format(x))
numbers.append(x)

x += increment
</snippet></ROW><ROW><id>15673351</id><snippet>x</snippet></ROW><ROW><id>15673351</id><snippet>range</snippet></ROW><ROW><id>15673351</id><snippet>i</snippet></ROW><ROW><id>15673351</id><snippet>range</snippet></ROW><ROW><id>15673351</id><snippet>range(start, stop, increment)
</snippet></ROW><ROW><id>15673351</id><snippet>x</snippet></ROW><ROW><id>15673351</id><snippet>start = 0
stop = 10
inc = 2
for i in range(start, stop, inc):
    print(i)
</snippet></ROW><ROW><id>15673408</id><snippet>dispatch = {'book': book, ...}
</snippet></ROW><ROW><id>15673408</id><snippet>globals()</snippet></ROW><ROW><id>15673408</id><snippet>if globals()[string] in object_list:
    # do something...
</snippet></ROW><ROW><id>15673572</id><snippet>from django.db import models

class Publication(models.Model):
    title = models.CharField(max_length=30)

    def __unicode__(self):
        return self.title

    class Meta:
        ordering = ('title',)

class Article(models.Model):
    headline = models.CharField(max_length=100)
    publications = models.ManyToManyField(Publication)

    def __unicode__(self):
        return self.headline

    class Meta:
        ordering = ('headline',)
</snippet></ROW><ROW><id>15673908</id><snippet>for i in pos:
    newhand=newhand.replace(newhand[i],r.choice(cardset))
</snippet></ROW><ROW><id>15673908</id><snippet>for i in pos:
    newhand[i]=r.choice(cardset)
</snippet></ROW><ROW><id>15673908</id><snippet>hand</snippet></ROW><ROW><id>15673908</id><snippet>hand</snippet></ROW><ROW><id>15673908</id><snippet>newhand = ''.join([(x,r.choice(cardset))[i in pos] for i,x in enumerate(newhand)])
</snippet></ROW><ROW><id>15673908</id><snippet>newhand</snippet></ROW><ROW><id>15673908</id><snippet>newhand</snippet></ROW><ROW><id>15673908</id><snippet>if isinstance(pos, int):
                pos=(pos,)
</snippet></ROW><ROW><id>15673908</id><snippet>pos = [int(index) for index in pos.split(',')]
</snippet></ROW><ROW><id>15673908</id><snippet>isinstance</snippet></ROW><ROW><id>15673968</id><snippet>&gt;&gt;&gt; zip(*[iter(range(10))]*3)
[(0, 1, 2), (3, 4, 5), (6, 7, 8)]

&gt;&gt;&gt; [range(n,n+3) for n in range(1,10,3)]
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

&gt;&gt;&gt; it = iter(range(10))
&gt;&gt;&gt; [list(islice(it,3)) for _ in range(3)]
[[0, 1, 2], [3, 4, 5], [6, 7, 8]]
</snippet></ROW><ROW><id>15674048</id><snippet>def post(self):
  img_data = self.request.get('extract1')
  # then strip off the prefix and convert from base64
</snippet></ROW><ROW><id>15674048</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>15674055</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;group&gt;
    &lt;element&gt;This is the first text&lt;/element&gt;
  &lt;/group&gt;
  &lt;group&gt;
    &lt;element&gt;This is the second text&lt;/element&gt;
  &lt;/group&gt;
  &lt;group&gt;
    &lt;element&gt;This is the third text&lt;/element&gt;
  &lt;/group&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>15674055</id><snippet>import xml.etree.cElementTree as ET

for event, element in ET.iterparse("test.xml"):
    if element.tag == "element":
       print element.text
</snippet></ROW><ROW><id>15674055</id><snippet>mike@tester:~$ python test.py
This is the first text
This is the second text
This is the third text
</snippet></ROW><ROW><id>15674057</id><snippet>def sumD(num):
    if num == 0: return 0
    return (num % 10) + sumD(num // 10)
</snippet></ROW><ROW><id>15674668</id><snippet>self._morse_char_map = dict()
for letter, code in self._char_morse_map.items():
    self._morse_char_map[code] = letter
</snippet></ROW><ROW><id>15674668</id><snippet>self._morse_char_map = {
    code: letter
    for letter, code in self._char_morse_map.items()
}
</snippet></ROW><ROW><id>15674668</id><snippet>"".join([...])
</snippet></ROW><ROW><id>15674668</id><snippet>join</snippet></ROW><ROW><id>15674668</id><snippet>chars = list()
</snippet></ROW><ROW><id>15674668</id><snippet>chars = []</snippet></ROW><ROW><id>15674668</id><snippet>while i &lt; len(sc):
    curr = sc[i]
    i += 1
    if not(curr in string.digits):
        num = 1 if start + 1 == i else int(sc[start:i-1])
        chars.append("".join(curr * num))
        start = i
</snippet></ROW><ROW><id>15674668</id><snippet>''.join</snippet></ROW><ROW><id>15674668</id><snippet>def decompress(compressed):
    return ''.join(decompress_gen(compressed))


def decompress_gen(compressed):
    start = 0
    i = 0
    while i &lt; len(compressed):
        curr = compressed[i]
        i += 1
        if not(curr in string.digits):
            num = 1 if start + 1 == i else int(compressed[start:i-1])
            yield "".join(curr * num)
            start = i
</snippet></ROW><ROW><id>15674668</id><snippet>compressed</snippet></ROW><ROW><id>15674668</id><snippet>for</snippet></ROW><ROW><id>15674668</id><snippet>int</snippet></ROW><ROW><id>15674668</id><snippet>def decompress_gen(compressed):
    number_digits = ''
    for char in compressed:
        if char in string.digits:
            number_digits += char
        else:
            number = int(number_digits) if number_digits else 1
            yield "".join(char * number)
            number_digits = ''
</snippet></ROW><ROW><id>15674668</id><snippet>chars = list()

for i in range(0, len(code), 5):
    piece = "".join(code[i:i+5])
    chars.append(self._morse_char_map.get(piece, piece[0]))

return "".join(chars)
</snippet></ROW><ROW><id>15674668</id><snippet>code</snippet></ROW><ROW><id>15674668</id><snippet>''.join</snippet></ROW><ROW><id>15674668</id><snippet>piece</snippet></ROW><ROW><id>15674668</id><snippet>return ''.join(
    self._morse_char_map.get(piece, piece[0])
    for piece in (
        code[i: i + 5]
        for i in range(0, len(code), 5)
    )        
)
</snippet></ROW><ROW><id>15674761</id><snippet>temp</snippet></ROW><ROW><id>15674761</id><snippet>hhh</snippet></ROW><ROW><id>15674761</id><snippet>hhh</snippet></ROW><ROW><id>15674761</id><snippet>global</snippet></ROW><ROW><id>15674761</id><snippet>actualcrawl()</snippet></ROW><ROW><id>15674761</id><snippet>start()</snippet></ROW><ROW><id>15674761</id><snippet>hhh,temp</snippet></ROW><ROW><id>15674761</id><snippet>import random,os
def start():
    level=1
    temp='     +-!'
    hhh='[X'
    os.system('CLS')
    actualcrawl(temp,hhh)

def actualcrawl(temp,hhh):
    print (temp)
    for a in range(2,128):
        hhh=hhh+temp[random.randrange(1,8)]
    hhh=hhh[:79]+'&gt;'+hhh[80:]
    for i in range(1,3):
        a=random.randrange(3,8)
        b=random.randrange(6,15)
        hhh=hhh[:16*a+b-1]+'='+hhh[16*a+b:]
    for i in range(1,9):
        print (hhh[16*i-16:16*i])
</snippet></ROW><ROW><id>15674890</id><snippet>&gt;&gt;&gt; test ={'line4': (4, 2), 'line3': (3, 2), 'line2': (2, 2), 'line1': (1, 2), 'line10': (10, 2)}
&gt;&gt;&gt; for i in test.items():
...     print i
... 
('line4', (4, 2))
('line3', (3, 2))
('line2', (2, 2))
('line1', (1, 2))
('line10', (10, 2))
&gt;&gt;&gt; for i in test:
...     print i
... 
line4
line3
line2
line1
line10
&gt;&gt;&gt; for i in test.values():
...     print i
... 
(4, 2)
(3, 2)
(2, 2)
(1, 2)
(10, 2)
&gt;&gt;&gt; for i in test.values():
...     for j in i:
...         print j
... 
4
2
3
2
2
2
1
2
10
2
</snippet></ROW><ROW><id>15674922</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now
&gt;&gt;&gt; now().strftime('%Y-%m-%d %H:%M:%S')
'2013-03-28 08:29:41'
</snippet></ROW><ROW><id>15674922</id><snippet>import datetime
def now_string():
    return datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>15674980</id><snippet>def bitarray_sieve(n = 1000000):
    '''Sieve of Eratosthenes (bitarray)'''
    l = (n - 1)//2; a = bitarray(l); a.setall(True)
    for i in range(500):
        if a[i]:
            s = i+i+3; t = (s*s-3)//2; a[t:l:s] = False
    return [2] + [x+x+3 for x,b in enumerate(a) if b]
</snippet></ROW><ROW><id>15674980</id><snippet>def gmpy2_sieve2(n=1000000):
    '''Sieve of Eratosthenes (gmpy2, version 2)'''
    l = (n - 1)//2; a = gmpy2.xbit_mask(l)
    for i in range(500):
        if a[i]:
            s = i+i+3; t = (s*s-3)//2; u = l-t-1
            a[t:l:s] = 0
    return [2] + [x+x+3 for x in a.iter_set()]
</snippet></ROW><ROW><id>15674980</id><snippet>x+x+3</snippet></ROW><ROW><id>15674980</id><snippet>def gmpy2_sieve(limit=1000000):
    '''Returns a generator that yields the prime numbers up to limit.

    Bits are set to 1 if their position is composite.'''

    sieve_limit = gmpy2.isqrt(limit) + 1
    limit += 1

    # Mark bit positions 0 and 1 as not prime.
    bitmap = gmpy2.xmpz(3)

    # Process 2 separately. This allows us to use p+p for the step size
    # when sieving the remaining primes.
    bitmap[4 : limit : 2] = -1

    # Sieve the remaining primes.
    for p in bitmap.iter_clear(3, sieve_limit):
        bitmap[p*p : limit : p+p] = -1

    return list(bitmap.iter_clear(2, limit))
</snippet></ROW><ROW><id>15674980</id><snippet>if a[x]</snippet></ROW><ROW><id>15675120</id><snippet>setup.py</snippet></ROW><ROW><id>15675120</id><snippet>#!/usr/bin/env python

from distutils.core import setup

setup(
    name="foo",
)
</snippet></ROW><ROW><id>15675120</id><snippet>-e git://git.example.com/foo.git#egg=foo</snippet></ROW><ROW><id>15675120</id><snippet>src/foo</snippet></ROW><ROW><id>15675120</id><snippet>sys.path</snippet></ROW><ROW><id>15675120</id><snippet>-e</snippet></ROW><ROW><id>15675120</id><snippet>requirements.txt</snippet></ROW><ROW><id>15675120</id><snippet>-e lib1</snippet></ROW><ROW><id>15675120</id><snippet>setup.py</snippet></ROW><ROW><id>15675120</id><snippet>python setup.py develop</snippet></ROW><ROW><id>15675120</id><snippet>site-packages</snippet></ROW><ROW><id>15675120</id><snippet>easy-install.pth</snippet></ROW><ROW><id>15675120</id><snippet>site-packages</snippet></ROW><ROW><id>15675120</id><snippet>setup.py editable</snippet></ROW><ROW><id>15675199</id><snippet>PanelStatus</snippet></ROW><ROW><id>15675199</id><snippet>self</snippet></ROW><ROW><id>15675199</id><snippet>self</snippet></ROW><ROW><id>15675199</id><snippet>__init__</snippet></ROW><ROW><id>15675199</id><snippet>self.PanelStatus("some message")</snippet></ROW><ROW><id>15675199</id><snippet>MainFrame</snippet></ROW><ROW><id>15675199</id><snippet>myMainFrame.PanelStatus("some other message")</snippet></ROW><ROW><id>15675246</id><snippet>print("What is 2+2: "); e=int(input(""))
</snippet></ROW><ROW><id>15675246</id><snippet>tuple</snippet></ROW><ROW><id>15675246</id><snippet>print</snippet></ROW><ROW><id>15675246</id><snippet>None</snippet></ROW><ROW><id>15675246</id><snippet>e==int(input(""))</snippet></ROW><ROW><id>15675246</id><snippet>e</snippet></ROW><ROW><id>15675246</id><snippet>NameError</snippet></ROW><ROW><id>15675246</id><snippet>e = int(input("What is 2+2: "))
</snippet></ROW><ROW><id>15675759</id><snippet>settings</snippet></ROW><ROW><id>15675759</id><snippet>__init__.py</snippet></ROW><ROW><id>15675759</id><snippet>__init__.py</snippet></ROW><ROW><id>15675805</id><snippet>[[1, 2, 3, 4]]
</snippet></ROW><ROW><id>15675805</id><snippet>[[1],
 [2],
 [3],
 [4]]
</snippet></ROW><ROW><id>15675805</id><snippet>[[10, 20],
 [30, 40],
 [50, 60]]
</snippet></ROW><ROW><id>15675805</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; def mmul(A, B):
        nr_a, nc_a = len(A), len(A[0])
        nr_b, nc_b = len(B), len(B[0])
        if nc_a != nr_b:
            raise ValueError('Mismatched rows and columns')
        return [[sum(A[i][k] * B[k][j] for k in range(nc_a))
                 for j in range(nc_b)] for i in range(nr_a)]

&gt;&gt;&gt; A = [[1, 2, 3, 4]]
&gt;&gt;&gt; B = [[1],
         [2],
         [3],
         [4]]

&gt;&gt;&gt; pprint(mmul(A, B))
[[30]]

&gt;&gt;&gt; pprint(mmul(B, A), width=20)
[[1, 2, 3, 4],
 [2, 4, 6, 8],
 [3, 6, 9, 12],
 [4, 8, 12, 16]]
</snippet></ROW><ROW><id>15675846</id><snippet>obj= Model.objects.filter(testfield=12).order_by('-id')[0]
</snippet></ROW><ROW><id>15676262</id><snippet>max_split</snippet></ROW><ROW><id>15676262</id><snippet>maxsplit</snippet></ROW><ROW><id>15676262</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; aa = 'nilesh-sharma-is-learning-python'
&gt;&gt;&gt; re.split('-',aa,3)
['nilesh', 'sharma', 'is', 'learning-python']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15676278</id><snippet>from django.db import models

class Upload(models.Model):
    name = models.CharField(max_length=100)
    file = models.FileField(upload_to="images")
</snippet></ROW><ROW><id>15676278</id><snippet>from django import forms
from app_name.models import Upload

class UploadForm(forms.ModelForm):
    class Meta:
        model = Upload
</snippet></ROW><ROW><id>15676278</id><snippet>def upload_file(request):
    if request.method == 'POST':
        form = UploadForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('/success/url/')
    else:
        form = UploadFileForm()
    return render_to_response('upload.html', {'form': form})
</snippet></ROW><ROW><id>15676278</id><snippet>&lt;form enctype="multipart/form-data" action="/upload/" name="test" method="post"&gt;
    {% csrf_token %}
    {{form.as_p}}
    &lt;input id="signUpSubmit" type="submit" value="Submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>15676599</id><snippet>sys.exit()</snippet></ROW><ROW><id>15676599</id><snippet>pause</snippet></ROW><ROW><id>15676634</id><snippet>import feedparser
d = feedparser.parse('/path/to/your/xmlfile.xml')
for entry in d.entries:
    print entry.title
</snippet></ROW><ROW><id>15676634</id><snippet>模板: R
为此博客设置的发布类型。
此博客管理员的电子邮件列表。
此博客是否包含成人内容
是否允许使用备用的 JS 渲染
博客的 Google Analytics（分析）帐号
存档索引日期格式的编号
此博客的存档频率应该为多少
有权进行发布的作者的电子邮件列表。
是否在博客中显示评论反向链接
是否为每个帖子提供存档页
哪些人能发表评论
是否要求评论者完成 Captcha
用于接收新评论通知的电子邮件地址列表
为博客评论所提供的 Feed 类型
博客评论表位置
博客评论消息
是否启用评论审阅
新评论进行审阅的天数
用于接收需要审阅新评论的通知的电子邮件地址
</snippet></ROW><ROW><id>15676634</id><snippet>.keys()</snippet></ROW><ROW><id>15676634</id><snippet>&gt;&gt;&gt; d.entries[0].keys()
['updated', u'gd_image', 'updated_parsed', 'published_parsed', 'tags', 'title', 'links', 'summary', 'content', 'guidislink', 'title_detail', 'link', 'author', 'published', 'authors', 'author_detail', 'id']
</snippet></ROW><ROW><id>15676799</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = '''ABC=DEF=5
C=DF/10'''
&gt;&gt;&gt; re.findall(r'[a-zA-Z_]\w*', text)
['ABC', 'DEF', 'C', 'DF']
</snippet></ROW><ROW><id>15676895</id><snippet>func(n - l[0], l[:])</snippet></ROW><ROW><id>15676982</id><snippet>QProcess</snippet></ROW><ROW><id>15676982</id><snippet>QtConcurrent.run(object, method, args)</snippet></ROW><ROW><id>15676982</id><snippet>QTimer.timeout()</snippet></ROW><ROW><id>15677228</id><snippet>def buttonClicked(self):
    print("Profile")
</snippet></ROW><ROW><id>15677228</id><snippet>QMessageBox::warning</snippet></ROW><ROW><id>15677228</id><snippet>def buttonClicked(self):
    # check the input data
    ...
    if errors:
        QMEssageBox.warning(self, 'Errors', 'Please fix the following errors: ...')
        return
    else:
        # process the input data
</snippet></ROW><ROW><id>15677342</id><snippet>re</snippet></ROW><ROW><id>15677342</id><snippet>+</snippet></ROW><ROW><id>15677342</id><snippet>-</snippet></ROW><ROW><id>15677342</id><snippet>(</snippet></ROW><ROW><id>15677342</id><snippet>)</snippet></ROW><ROW><id>15677342</id><snippet>re</snippet></ROW><ROW><id>15677342</id><snippet>re</snippet></ROW><ROW><id>15677342</id><snippet>(c for c in s if c in '+-/*()_')
</snippet></ROW><ROW><id>15677445</id><snippet>class Bewertung(models.Model):
   //you don't have to put default="" because this is already required
   von_location= models.ForeignKey(Location,related_name="locations_bewertung")
   von_user = models.ForeignKey(User,related_name="users_bewertung")

   //use DecimalField instead of IntergerField
   //use max_digits not max_length because it is for string
   price_leistung = models.DecimalField(max_digits=3, decimal_place=2, default=0)
   romantic = models.DecimalField(max_digits=3, decimal_place=2, default=0)
   bewertung = models.DecimalField(max_digits=3, decimal_place=2, default=0)

   //you return your unicode with an int field which result to error 
   //so you must do it this way
   def __unicode__(self):
       return "{0}".format(self.bewertung)
</snippet></ROW><ROW><id>15677696</id><snippet>emit([doc.contentType, doc.addDate], doc); // emit the entire doc, 
// add date is timestamp (assuming)
</snippet></ROW><ROW><id>15677696</id><snippet>emit([doc.contentType, doc.addDate], null); // use with include_docs=true
</snippet></ROW><ROW><id>15677696</id><snippet>startkey=["post",0]&amp;endkey=["post",999999999]&amp;limit=5&amp;descending=true
</snippet></ROW><ROW><id>15677696</id><snippet>startkey   = ["post",0] = contentType is post, and addDate &gt;= 0
endkey     = ["post",9999999999] = contentType is post, and addDate &lt;= 9999999999
limit      = 5, limit to five posts
descending = true = sort descending, which is sort by adddDate descending
</snippet></ROW><ROW><id>15677765</id><snippet>for</snippet></ROW><ROW><id>15677765</id><snippet>def poll(x):
    regex = re.compile("\+CMTI:.......")
    lst = []
    for l in x:
        for m in [regex.search(l)]:
            if m:
                lst.append(m)
                print "You have received a new message!"
</snippet></ROW><ROW><id>15677765</id><snippet>return</snippet></ROW><ROW><id>15677765</id><snippet>from __future__ import print_function
def poll(x):
    regex = re.compile("\+CMTI:.......")
    [(m, print("You have received a new message!"))[0] for l in x for m in [regex.search(l)] if m]
</snippet></ROW><ROW><id>15677881</id><snippet>defaultdict</snippet></ROW><ROW><id>15677881</id><snippet>&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for di in [d1,d2,d3]:
...   for k,v in di.items():
...     d[k] += v
...
&gt;&gt;&gt; dict(d)
{0: 0, 1: 11, 2: 22, 3: 33}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15677916</id><snippet>import urllib.parse

city = 'Lévis'
query = "city=%s&amp;format=json" % (urllib.parse.quote(city),)
response = urllib.request.urlopen("http://nominatim.openstreetmap.org/search.php?" + query)
</snippet></ROW><ROW><id>15678049</id><snippet>python manage.py createsuperuser</snippet></ROW><ROW><id>15678049</id><snippet>app_name/commands/management/create_test_user.py</snippet></ROW><ROW><id>15678049</id><snippet>from django.contrib.auth.models import User, Group, Permission
from django.core.management.base import BaseCommand

class Command( BaseCommand ):

    help = "Creates test user"
    args = '&lt;username&gt; &lt;password&gt;'

    def handle( self, username, password ):

        user, created = User.objects.get_or_create( username=username ) 
        user.set_password( password )
        user.is_staff = True
        user.save()

        custom_perm = Permission.objects.get( codename='custom_perm_name' )
        user.user_permissions.add( custom_perm )

        if created:
            print "%s created" % username
        else:
            print "%s updated" % username
</snippet></ROW><ROW><id>15678049</id><snippet>python manage.py create_test_user admin1 qwe123
</snippet></ROW><ROW><id>15678074</id><snippet>sorted</snippet></ROW><ROW><id>15678074</id><snippet>&gt;&gt;&gt; lst = ['first', 'third', 'second']
&gt;&gt;&gt; dcts = [{'color':'yellow', 'section':'third'}, {'color':'red', 'section':'first'}, {'color': 'blue', 'section':'second'}]
&gt;&gt;&gt; sorted(dcts, key=lambda dct: lst.index(dct['section']))
[{'section': 'first', 'color': 'red'}, {'section': 'third', 'color': 'yellow'}, {'section': 'second', 'color': 'blue'}]
</snippet></ROW><ROW><id>15678259</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.basename('/home/name/file.txt')
'file.txt'
</snippet></ROW><ROW><id>15678498</id><snippet>from parsley import makeGrammar, unwrapGrammar
from collections import OrderedDict

configFileGrammer = r"""

file = block+:bs end -&gt; OrderedDict(bs)

block = ws name:b ws '{' ws members:m ws '}' ws -&gt; (b, OrderedDict(m))

members = (setting:first (ws setting)*:rest ws -&gt; [first] + rest) | -&gt; []

setting = pair | flag

pair = ws name:k ws '=' ws name:v ws ';' ws -&gt; (k, v)

flag = ws name:k ws ';' ws -&gt; (k, True)

name = &lt;(~('='|';'|'{') anything)+&gt;:n -&gt; n.strip()

"""


testSource = r"""
    portsbuild {
            path = /jails/portsbuild;
            allow.mount;
            mount.devfs;
            host.hostname = portsbuild.home;
            ip4.addr = 192.168.0.200;
            interface = nfe0;
            exec.start = "/bin/sh /etc/rc";
            exec.stop = "/bin/sh /etc/rc.shutdown";
    }

    web01 {
            path = /jails/web01;
            allow.mount;
            mount.devfs;
            host.hostname = web02.site.com;
            ip4.addr = 10.0.0.1;
            interface = eth0;
            exec.start = "/bin/sh /etc/rc";
    }

    db01 {
            path = /jails/db01;
            mount.devfs;
            host.hostname = db01.home;
            ip4.addr = 192.168.6.66;
            interface = if0;
            exec.start = "/bin/mysql";
    }


"""
ConfigFile = makeGrammar(configFileGrammer, globals(), name="ConfigFile")

config = unwrapGrammar(ConfigFile)(testSource).apply('file')[0]
for block in config:
    print "%s {" % block
    for key in config[block]:
        if config[block][key] == True:
            print "\t%s;" % key
        else:
            print "\t%s = %s;" % (key, config[block][key])
    print "}"
</snippet></ROW><ROW><id>15678524</id><snippet>from numpy import array
from scipy.linalg import lu

a = array([[2.,4.,4.,4.],[1.,2.,3.,3.],[1.,2.,2.,2.],[1.,4.,3.,4.]])

pl, u = lu(a, permute_l=True)
</snippet></ROW><ROW><id>15678524</id><snippet>u</snippet></ROW><ROW><id>15678524</id><snippet>array([[ 2.,  4.,  4.,  4.],
       [ 0.,  2.,  1.,  2.],
       [ 0.,  0.,  1.,  1.],
       [ 0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>15678524</id><snippet>3</snippet></ROW><ROW><id>15678641</id><snippet>form.base_fields</snippet></ROW><ROW><id>15678641</id><snippet>form.fields</snippet></ROW><ROW><id>15678641</id><snippet>__init__</snippet></ROW><ROW><id>15678641</id><snippet>get_form_kwargs</snippet></ROW><ROW><id>15678641</id><snippet>get_form</snippet></ROW><ROW><id>15678716</id><snippet>&gt;&gt;&gt; re.match(r'\+CMTI: "SM",(\d+)', '+CMTI: "SM",0').group(1)
'0'
&gt;&gt;&gt; re.match(r'\+CMTI: "SM",(\d+)', '+CMTI: "SM",234566').group(1)
'234566'
</snippet></ROW><ROW><id>15678716</id><snippet>&gt;&gt;&gt; regex = re.compile(r'\+CMTI: "SM",(\d+)')
&gt;&gt;&gt; regex.match('+CMTI: "SM",0').group(1)
'0'
</snippet></ROW><ROW><id>15678716</id><snippet>def poll(x):
    regex = re.compile(r'\+CMTI: "SM",(\d+)')
    lst = []
    for line in x:
        match = regex.search(line):
        if match:
            lst.append(match.group(1))
            print "You have received a new message!"
</snippet></ROW><ROW><id>15678900</id><snippet>num</snippet></ROW><ROW><id>15678900</id><snippet>num</snippet></ROW><ROW><id>15678900</id><snippet>num</snippet></ROW><ROW><id>15678900</id><snippet>odd</snippet></ROW><ROW><id>15678900</id><snippet>even</snippet></ROW><ROW><id>15679105</id><snippet>baseclass_module</snippet></ROW><ROW><id>15679105</id><snippet># baseclass_module.py

class BaseClass(object):
    def method1(self):
        # ...

    def method2(self):
        # ...
</snippet></ROW><ROW><id>15679105</id><snippet>from baseclass_module import BaseClass

class Bla(BaseClass):
    # ...
</snippet></ROW><ROW><id>15679109</id><snippet>df['datetime64'] = Series(df['datetime64'],dtype='M8[n2]')</snippet></ROW><ROW><id>15679476</id><snippet>urllib</snippet></ROW><ROW><id>15679476</id><snippet>.pac</snippet></ROW><ROW><id>15679476</id><snippet>.pac</snippet></ROW><ROW><id>15679476</id><snippet>.pac</snippet></ROW><ROW><id>15679476</id><snippet>proxies</snippet></ROW><ROW><id>15679995</id><snippet>cr.dictfetchall()</snippet></ROW><ROW><id>15679995</id><snippet>cr.dictfetchone()</snippet></ROW><ROW><id>15679995</id><snippet>cr.dictfetchall()</snippet></ROW><ROW><id>15679995</id><snippet>cr.fetchall()</snippet></ROW><ROW><id>15679995</id><snippet>cr.fetchone()</snippet></ROW><ROW><id>15679995</id><snippet>cr.fetchall()</snippet></ROW><ROW><id>15679995</id><snippet>cr.dictfetchall()</snippet></ROW><ROW><id>15679995</id><snippet>[{'reg_no': 123},{'reg_no': 543},]</snippet></ROW><ROW><id>15679995</id><snippet>cr.dictfetchone()</snippet></ROW><ROW><id>15679995</id><snippet>{'reg_no': 123}</snippet></ROW><ROW><id>15679995</id><snippet>cr.fetchall()</snippet></ROW><ROW><id>15679995</id><snippet>cr.fetchone()</snippet></ROW><ROW><id>15680192</id><snippet>&lt;server&gt;</snippet></ROW><ROW><id>15680192</id><snippet>&lt;name&gt;</snippet></ROW><ROW><id>15680192</id><snippet>from xml.dom import minidom

document = minidom.parse(inputfilename)

def findChildNodeByName(parent, name):
    for node in parent.childNodes:
        if node.nodeType == node.ELEMENT_NODE and node.localName == name:
            return node
    return None

def getText(nodelist):
    rc = []
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc.append(node.data)
    return ''.join(rc)

# Get the first of all `&lt;server&gt;` nodes
server = document.getElementsByTagName('server')[0]

# Get the first child node that is a `&lt;name&gt;` element
name = findChildNodeByName(server, 'name')
if name is not None:
    print getText(name.childNodes)
</snippet></ROW><ROW><id>15680376</id><snippet>issue.update(fields={'customfield_10100': {'value':'Two'}})
</snippet></ROW><ROW><id>15680376</id><snippet>issue.update(fields={'customfield_10100': {'value','Two'}})
</snippet></ROW><ROW><id>15680488</id><snippet>/movies/a_movie</snippet></ROW><ROW><id>15680488</id><snippet>studio</snippet></ROW><ROW><id>15680488</id><snippet>for a_movie in root.xpath('/movies/a_movie[studio]'):
    name = a_movie.find('name').text
    studio = a_movie.find('studio')
    print "&lt;studio&gt;" + studio.text + "&lt;/studio&gt;"
</snippet></ROW><ROW><id>15680488</id><snippet>a_movie</snippet></ROW><ROW><id>15680488</id><snippet>ElementTree.tostring()</snippet></ROW><ROW><id>15680488</id><snippet>for a_movie in root.xpath('/movies/a_movie'):
    for elem in a_movie:
        print ElementTree.tostring(elem),
</snippet></ROW><ROW><id>15680625</id><snippet>install</snippet></ROW><ROW><id>15680625</id><snippet>python setup.py install
</snippet></ROW><ROW><id>15680677</id><snippet># PART 1. The Lexer

symbols = None

def read(input):
    global symbols
    import re
    symbols = re.findall(r'\w+|[()]', input)

def getsym():
    global symbols
    return symbols[0] if symbols else None

def popsym():
    global symbols
    return symbols.pop(0)

# PART 2. The Parser
# Built upon the following grammar:
#  
#     program = expr*
#     expr    = '(' func args ')'
#     func    = AND|OR|NOT
#     args    = arg*
#     arg     = string|expr
#     string  = [a..z]

def program():
    r = []
    while getsym():
        r.append(expr())
    return r

def expr():
    popsym() # (
    f = func()
    a = args()
    popsym() # )
    return {f: a}

def func():
    return popsym()

def args():
    r = []
    while getsym() != ')':
        r.append(arg())
    return r

def arg():
    if getsym() == '(':
        return expr()
    return string()

def string():
    return popsym()

# TEST = Lexer + Parser

def parse(input):
    read(input)
    return program()

print parse('(AND a b (OR c d)) (NOT foo) (AND (OR x y))')
# [{'AND': ['a', 'b', {'OR': ['c', 'd']}]}, {'NOT': ['foo']}, {'AND': [{'OR': ['x', 'y']}]}]
</snippet></ROW><ROW><id>15680703</id><snippet>&gt;&gt;&gt; logs = [{'user':'A' , 'activity': 'eating', 'time':'0800'},{'user':'A' , 'activity': 'running', 'time':'0900'}, {'user':'B' , 'activity': 'eating', 'time':'0800'}, {'user':'B' , 'activity': 'playing', 'time':'1000'}, {'user':'A' , 'activity': 'dancing', 'time':'0805'}, {'user':'A' , 'activity': 'eating', 'time':'1800'}, {'user':'B' , 'activity': 'playing', 'time':'0800'}]
&gt;&gt;&gt; user_logs = {}
&gt;&gt;&gt; for log in logs:
        user_log = user_logs.setdefault(log['user'], {})
        user_log['count'] =  user_log.get('count', 0) + 1
        user_log.setdefault('logs', []).append(log)


&gt;&gt;&gt; user_logs
{'A': {'count': 4, 'logs': [{'time': '0800', 'user': 'A', 'activity': 'eating'}, {'time': '0900', 'user': 'A', 'activity': 'running'}, {'time': '0805', 'user': 'A', 'activity': 'dancing'}, {'time': '1800', 'user': 'A', 'activity': 'eating'}]}, 'B': {'count': 3, 'logs': [{'time': '0800', 'user': 'B', 'activity': 'eating'}, {'time': '1000', 'user': 'B', 'activity': 'playing'}, {'time': '0800', 'user': 'B', 'activity': 'playing'}]}}
</snippet></ROW><ROW><id>15680703</id><snippet>&gt;&gt;&gt; user_logs = {}
&gt;&gt;&gt; for log in logs:
        user_logs.setdefault(log['user'], []).append(log)


&gt;&gt;&gt; user_logs
{'A': [{'time': '0800', 'user': 'A', 'activity': 'eating'}, {'time': '0900', 'user': 'A', 'activity': 'running'}, {'time': '0805', 'user': 'A', 'activity': 'dancing'}, {'time': '1800', 'user': 'A', 'activity': 'eating'}], 'B': [{'time': '0800', 'user': 'B', 'activity': 'eating'}, {'time': '1000', 'user': 'B', 'activity': 'playing'}, {'time': '0800', 'user': 'B', 'activity': 'playing'}]}
</snippet></ROW><ROW><id>15680703</id><snippet>&gt;&gt;&gt; len(user_logs['A'])
4
</snippet></ROW><ROW><id>15680758</id><snippet>m2</snippet></ROW><ROW><id>15680758</id><snippet>orphans = M1.objects.filter(m2_isnull=True)
</snippet></ROW><ROW><id>15680781</id><snippet>In [6]: a.ndim
Out[6]: 1

In [7]: b.ndim
Out[7]: 2
</snippet></ROW><ROW><id>15680781</id><snippet>b</snippet></ROW><ROW><id>15680781</id><snippet>b.shape</snippet></ROW><ROW><id>15680781</id><snippet>np.dot</snippet></ROW><ROW><id>15680781</id><snippet>b</snippet></ROW><ROW><id>15680781</id><snippet>np.dot(b, b)</snippet></ROW><ROW><id>15680781</id><snippet>In [44]: a = np.array([1,2,3])

In [45]: b = np.array([1,2,3])

In [46]: np.dot(a, b)
Out[46]: 14

In [47]: np.inner(a, b)
Out[47]: 14
</snippet></ROW><ROW><id>15680781</id><snippet>In [49]: a = a.reshape(1,3)

In [50]: b = b.reshape(3,1)

In [51]: a
Out[51]: array([[1, 2, 3]])

In [52]: b
Out[52]:
array([[1],
       [2],
       [3]])

In [53]: np.dot(a,b)
Out[53]: array([[14]])

In [54]: np.dot(b,a)
Out[54]:
array([[1, 2, 3],
       [2, 4, 6],
       [3, 6, 9]])

In [55]: np.dot(a,a)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-55-32e36f9db916&gt; in &lt;module&gt;()
----&gt; 1 np.dot(a,a)

ValueError: objects are not aligned
</snippet></ROW><ROW><id>15680848</id><snippet>x = 10
ssh = paramiko.SSHClient()
ssh.connect(server, username=username, password=password)
ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command("./scriptB.py " + str(x))
</snippet></ROW><ROW><id>15680848</id><snippet>import sys

y = int(sys.argv[1])
print y
</snippet></ROW><ROW><id>15680848</id><snippet>['./scriptB.py', '10']</snippet></ROW><ROW><id>15681051</id><snippet>if lowui in ('y', 'yes'):
</snippet></ROW><ROW><id>15681051</id><snippet>lowui = user_input.lower
</snippet></ROW><ROW><id>15681051</id><snippet>lowui = user_input.lower() # Actually call the lower function
</snippet></ROW><ROW><id>15681329</id><snippet>expr1, expr2, expr3, expr4
(expr1, expr2, expr3, expr4)
{expr1: expr2, expr3: expr4}
expr1 + expr2 * (expr3 - expr4)
expr1(expr2, expr3, *expr4, **expr5)
expr3, expr4 = expr1, expr2
</snippet></ROW><ROW><id>15681582</id><snippet>from djcelery.models import PeriodicTask, TaskMeta

last_run = PeriodicTask.objects.only('last_run_at')\
                               .get(task=task_name).last_run_at
task_meta = TaskMeta.objects.filter(task_id=task_name, date_done__gte=last_run)\
                            .order_by('date_done').only('meta')[:1][0].meta
</snippet></ROW><ROW><id>15681607</id><snippet>b.py</snippet></ROW><ROW><id>15681607</id><snippet>a.py</snippet></ROW><ROW><id>15681607</id><snippet>os.getcwd()</snippet></ROW><ROW><id>15681607</id><snippet>b.py</snippet></ROW><ROW><id>15681607</id><snippet>b.py</snippet></ROW><ROW><id>15681607</id><snippet>import sys
sys.path.append('PATH TO a.py')
</snippet></ROW><ROW><id>15681607</id><snippet>import sys
sys.path.append(os.basename(sys.argv[0])) # It should be there anyway but still..
</snippet></ROW><ROW><id>15681692</id><snippet>:memory:</snippet></ROW><ROW><id>15682040</id><snippet>&gt;&gt;&gt; xls = ExcelFile('C:\RWFC\test.xls')
</snippet></ROW><ROW><id>15682040</id><snippet>&gt;&gt;&gt; "\t"
'\t'
&gt;&gt;&gt; len("\t")
1
</snippet></ROW><ROW><id>15682040</id><snippet>IOError: [Errno 22] invalid mode ('rb') or filename: 'C:\\RWFC\test.xls'
</snippet></ROW><ROW><id>15682040</id><snippet>R</snippet></ROW><ROW><id>15682040</id><snippet>\R</snippet></ROW><ROW><id>15682040</id><snippet>&gt;&gt;&gt; s = "\\"
&gt;&gt;&gt; s
'\\'
&gt;&gt;&gt; print s
\
&gt;&gt;&gt; len(s)
1
</snippet></ROW><ROW><id>15682040</id><snippet>\t</snippet></ROW><ROW><id>15682040</id><snippet>&gt;&gt;&gt; "C:\RWFC\test.xls"
'C:\\RWFC\test.xls'
&gt;&gt;&gt; r"C:\RWFC\test.xls"
'C:\\RWFC\\test.xls'
</snippet></ROW><ROW><id>15682040</id><snippet>&gt;&gt;&gt; "C:/RWFC/test.xls"
'C:/RWFC/test.xls'
</snippet></ROW><ROW><id>15682070</id><snippet>datetime</snippet></ROW><ROW><id>15682070</id><snippet>to_days()</snippet></ROW><ROW><id>15682070</id><snippet>now()</snippet></ROW><ROW><id>15682824</id><snippet>from collections import defaultdict
file_list = glob.glob('/scratch/project/*')

methods = defaultdict([])
for outfile in file_list:
    #indices = (#function that obtains indices)
    #data    = (#function that obtains primary data)

    methods[method].append([indices,data])

frames = [ DataFrame(method_list,columns[indices,method]) 
         for method, method_list in methods.items() ]

# concat
combine_frame = pd.concat(frames,axis=1)

# set your combined index
result = combine_frame.set_index(indicies)
</snippet></ROW><ROW><id>15682998</id><snippet>setup.py build</snippet></ROW><ROW><id>15682998</id><snippet>cd python
python setup.py build
</snippet></ROW><ROW><id>15682998</id><snippet>build/lib/google</snippet></ROW><ROW><id>15682998</id><snippet>sys.path</snippet></ROW><ROW><id>15682998</id><snippet>setup.py bdist --formats=zip</snippet></ROW><ROW><id>15682998</id><snippet>dist/protobuf-&lt;version&gt;.&lt;platform&gt;-&lt;architecture&gt;.zip</snippet></ROW><ROW><id>15682998</id><snippet>sys.path</snippet></ROW><ROW><id>15682998</id><snippet>pkg_resources</snippet></ROW><ROW><id>15682998</id><snippet>google</snippet></ROW><ROW><id>15682998</id><snippet>google/__init__.py</snippet></ROW><ROW><id>15683086</id><snippet>SOUTH_TESTS_MIGRATE = False
</snippet></ROW><ROW><id>15683196</id><snippet>import re #1
stack = [] #2 FIX: NOT NECESSARY (since fourth line returns a list anyway)
inputstr = "A=B=C+26-(23*_2 )-D" #3

stack =  re.findall(r'(?:[A-Z])|(?:[0-9]+)|(?:[/*+_=\(\)-])', inputstr) #4

while len(stack): #5
    print stack.pop() #6
</snippet></ROW><ROW><id>15683196</id><snippet>(?:[A-Z])</snippet></ROW><ROW><id>15683196</id><snippet>(?:[0-9]+)</snippet></ROW><ROW><id>15683196</id><snippet>(?:[/*+_=\(\)-])</snippet></ROW><ROW><id>15683196</id><snippet>-</snippet></ROW><ROW><id>15683196</id><snippet>(?: ...)</snippet></ROW><ROW><id>15683196</id><snippet>?:</snippet></ROW><ROW><id>15683226</id><snippet>__len__</snippet></ROW><ROW><id>15683226</id><snippet>int</snippet></ROW><ROW><id>15683226</id><snippet>object.__len__(self)
</snippet></ROW><ROW><id>15683226</id><snippet>__nonzero__()</snippet></ROW><ROW><id>15683226</id><snippet>__len__()</snippet></ROW><ROW><id>15683228</id><snippet>&gt;&gt;&gt; X = [result[i][0][0] for i in b]
&gt;&gt;&gt; Y = [result[i][0][1] for i in b]
&gt;&gt;&gt; print X, Y
[2, -2, 2] [-2, 0, 1]
</snippet></ROW><ROW><id>15683236</id><snippet>handlers:
- url: /favicon\.ico
  static_files: favicon.ico
  upload: favicon\.ico

- url: /_ah/spi/.*
  script: services.application

- url: .*
  script: main.app

libraries:
- name: webapp2
  version: "2.5.2"
</snippet></ROW><ROW><id>15683236</id><snippet>/_ah/spi/.*</snippet></ROW><ROW><id>15683236</id><snippet>/_ah/api/.*</snippet></ROW><ROW><id>15683236</id><snippet>/_ah/api/explorer</snippet></ROW><ROW><id>15683882</id><snippet>python manage.py syncdb
</snippet></ROW><ROW><id>15683921</id><snippet>if string.startswith(codecs.BOM_UTF16_BE):
    retval = TextStringObject(string.decode("utf-16"))
    retval.autodetect_utf16 = True
</snippet></ROW><ROW><id>15683921</id><snippet>if</snippet></ROW><ROW><id>15683921</id><snippet># This is probably a big performance hit here</snippet></ROW><ROW><id>15683962</id><snippet>import sys
from PyQt4 import QtCore, QtGui


class Example(QtGui.QDialog):
    def __init__(self, parent=None):
        super(Example, self).__init__(parent)

        msgBox = QtGui.QMessageBox()
        msgBox.setText('What to do?')
        msgBox.addButton(QtGui.QPushButton('Accept'), QtGui.QMessageBox.YesRole)
        msgBox.addButton(QtGui.QPushButton('Reject'), QtGui.QMessageBox.NoRole)
        msgBox.addButton(QtGui.QPushButton('Cancel'), QtGui.QMessageBox.RejectRole)
        ret = msgBox.exec_();


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    ex.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15684064</id><snippet>virtualenv .
</snippet></ROW><ROW><id>15684230</id><snippet>root</snippet></ROW><ROW><id>15684230</id><snippet>ScreenManager</snippet></ROW><ROW><id>15684230</id><snippet>manager: screen_manager</snippet></ROW><ROW><id>15684230</id><snippet>MainWidget</snippet></ROW><ROW><id>15684230</id><snippet>manager</snippet></ROW><ROW><id>15684230</id><snippet>class MainWidget(Widget):
    manager = ObjectProperty(None)
</snippet></ROW><ROW><id>15684230</id><snippet>&lt;MainWidget&gt;:
    screen_manger: screen_manager
    ScreenManger:
        id: screen_manger
        Screen:
            name: "MainMenu"
            MainMenu:
                manager: screen_manager
        Screen:
            name: "OtherPage"
</snippet></ROW><ROW><id>15684617</id><snippet>enumerate()</snippet></ROW><ROW><id>15684617</id><snippet>for index, w in enumerate(loopme):
    print "CURRENT WORD IS", w, "AT CHARACTER", index 
</snippet></ROW><ROW><id>15684679</id><snippet>with open('somefile') as fileobj:
    lines = list(fileobj)

for index in indices:
    print lines[index]
</snippet></ROW><ROW><id>15685014</id><snippet>copy</snippet></ROW><ROW><id>15685014</id><snippet>pickle</snippet></ROW><ROW><id>15685014</id><snippet>__class__</snippet></ROW><ROW><id>15685014</id><snippet>__dict__</snippet></ROW><ROW><id>15685014</id><snippet>__dict__</snippet></ROW><ROW><id>15685014</id><snippet>__getstate__()</snippet></ROW><ROW><id>15685014</id><snippet>__setstate__()</snippet></ROW><ROW><id>15685014</id><snippet>__copy__()</snippet></ROW><ROW><id>15685014</id><snippet>__deepcopy__()</snippet></ROW><ROW><id>15685014</id><snippet>__deepcopy__()</snippet></ROW><ROW><id>15685014</id><snippet>deepcopy()</snippet></ROW><ROW><id>15685014</id><snippet>from copy import deepcopy

class Foo(object):
    def __init__(self, bar):
        self.bar = bar
        self.spam = expression + that * generates - ham   # calculated

    def __copy__(self):
        # self.spam is to be ignored, it is calculated anew for the copy
        # create a new copy of ourselves *reusing* self.bar
        return type(self)(self.bar)

    def __deepcopy__(self, memo):
        # self.spam is to be ignored, it is calculated anew for the copy
        # create a new copy of ourselves with a deep copy of self.bar
        # pass on the memo mapping to recursive calls to copy.deepcopy
        return type(self)(deepcopy(self.bar, memo))
</snippet></ROW><ROW><id>15685014</id><snippet>self.spam</snippet></ROW><ROW><id>15685030</id><snippet>{
    meta: {
        limit: 20,
        next: null,
        offset: 0,
        previous: null,
        total_count: 0
    },
}
</snippet></ROW><ROW><id>15685030</id><snippet>?format=json</snippet></ROW><ROW><id>15685030</id><snippet>&amp;</snippet></ROW><ROW><id>15685165</id><snippet>def processing_flush(n, index=5):
    sys.stdout.write("\rProcessing %s" % (index * " "))
    sys.stdout.write("\rProcessing %s" % ((n % index)* "."))
    sys.stdout.flush()
</snippet></ROW><ROW><id>15685165</id><snippet>n % index</snippet></ROW><ROW><id>15685165</id><snippet>def processing_flush(n, index=5):
    if n % index == 0:
        sys.stdout.write("\rProcessing %s" % (index * " "))
    sys.stdout.write("\rProcessing %s" % ((n % index)* "."))
    sys.stdout.flush()
</snippet></ROW><ROW><id>15685165</id><snippet>index-1</snippet></ROW><ROW><id>15685165</id><snippet>def processing_flush(n, index=5):
    sys.stdout.write("\rProcessing %s%s" % ((n % index)* ".", (index - 1 - (n % index))* " "))
    sys.stdout.flush()
</snippet></ROW><ROW><id>15685165</id><snippet>def processing_flush(n, index=5):
    sys.stdout.write("\rProcessing %s%s" % ((n % index)* ".", (index - 1 - (n % index))* " "))
    sys.stdout.write("\rProcessing %s" % ((n % index)* "."))
    sys.stdout.flush()
</snippet></ROW><ROW><id>15685165</id><snippet>def processing_flush(n, index=5):
    sys.stdout.write("Processing %s%s\r" % ((n % index)* ".", (index - 1 - (n % index))* " "))
    sys.stdout.flush()
</snippet></ROW><ROW><id>15685496</id><snippet>query_data = {
    'col1': 56,
    'col2': 100,
    'col3': 'lol'
}
</snippet></ROW><ROW><id>15685496</id><snippet>sql = 'INSERT INTO table_name ({fields}) VALUES ({values})'
</snippet></ROW><ROW><id>15685496</id><snippet>fields = query_data.keys()
fields_string = ', '.join(fields)
</snippet></ROW><ROW><id>15685496</id><snippet>values_string = ', '.join(['"{0}"'.format(query_data[key]) for key in fields])
</snippet></ROW><ROW><id>15685496</id><snippet>composed_sql = sql.format(fields=fields_string, values=values_string)
</snippet></ROW><ROW><id>15685496</id><snippet>sql = 'INSERT INTO table_name ({fields}) VALUES ({values})'
fields = ', '.join(query_data.keys())
values = ', '.join(['"{0}"'.format(value) for value in query_data.values()])
composed_sql = sql.format(fields=fields, values=values)
</snippet></ROW><ROW><id>15685898</id><snippet>.py</snippet></ROW><ROW><id>15685898</id><snippet>.pyw</snippet></ROW><ROW><id>15685898</id><snippet>PATH</snippet></ROW><ROW><id>15685898</id><snippet>.dll</snippet></ROW><ROW><id>15685898</id><snippet>.exe</snippet></ROW><ROW><id>15685898</id><snippet>c:\Python33</snippet></ROW><ROW><id>15685898</id><snippet>c:\clonedPython\libs\site-packages</snippet></ROW><ROW><id>15686106</id><snippet>:</snippet></ROW><ROW><id>15686106</id><snippet>try:
    os.path.isfile('/home/pi/CompPictures' + picturenumber + '.JPG') #
    os.system('sudo rm /home/pi/Pictures/IMG_0001.JPG')
    os.system('sudo rm /home/pi/output.bin')
    picturenumber = int(picturenumber))+1
except:
    pass
</snippet></ROW><ROW><id>15686106</id><snippet>finally</snippet></ROW><ROW><id>15686106</id><snippet>try:
    #code
except:
    pass
finally:
    #this code will execute whether an exception was thrown or not
</snippet></ROW><ROW><id>15686309</id><snippet>logging.root.removeHandler(logging.root.handlers[0]) # Undo previous basicConfig
logging.basicConfig(format='same long format',
                    level=logging.DEBUG)
</snippet></ROW><ROW><id>15686309</id><snippet>logging.basicConfig</snippet></ROW><ROW><id>15686309</id><snippet>logging.root</snippet></ROW><ROW><id>15686309</id><snippet>basicConfig</snippet></ROW><ROW><id>15686309</id><snippet>basicConfig</snippet></ROW><ROW><id>15686309</id><snippet>setup_logging</snippet></ROW><ROW><id>15686419</id><snippet>import timeit

def a():
    x = 0
    for i in xrange(1000):
        if i%2==0 and i%3==0:
            x += 3
        elif i%2==0 or i%3==0:
            x += 2
        else:
            x += 1

def b():
    x = 0
    for i in xrange(1000):
        x += 3 if i%2==0 and i%3==0 else (2 if i%2==0 or i%3==0 else 1)


test_a = timeit.Timer(a)
test_b = timeit.Timer(b)

print min(test_a.repeat(3, 1000))
print min(test_b.repeat(3, 1000))
</snippet></ROW><ROW><id>15686419</id><snippet>0.573258876801
0.591067075729
</snippet></ROW><ROW><id>15686419</id><snippet>0.597590923309
0.598859071732
</snippet></ROW><ROW><id>15686477</id><snippet>In [1]: bool(float('nan'))
Out[1]: True
</snippet></ROW><ROW><id>15686516</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(html)

table = soup.find('table', id='test_table')
for anchor in table.find_all('a'):
    print anchor['href'], anchor.string
</snippet></ROW><ROW><id>15686903</id><snippet>getch</snippet></ROW><ROW><id>15686903</id><snippet>while</snippet></ROW><ROW><id>15686903</id><snippet>getch</snippet></ROW><ROW><id>15686903</id><snippet>nodelay</snippet></ROW><ROW><id>15686903</id><snippet>self.screen.nodelay(1)
</snippet></ROW><ROW><id>15687314</id><snippet>r</snippet></ROW><ROW><id>15687314</id><snippet>r'\n'</snippet></ROW><ROW><id>15687314</id><snippet>r'\12'</snippet></ROW><ROW><id>15687314</id><snippet>r'\x0a'</snippet></ROW><ROW><id>15687314</id><snippet>r</snippet></ROW><ROW><id>15687327</id><snippet>json</snippet></ROW><ROW><id>15687327</id><snippet>import json
json_dict = json.loads(request.POST['your_json_data'])
json_dict['pages']

[
    {
        "id": "1364484811734",
        "name": "Page Name",
        "type": "basic",
        "components": {
            "img": "",
            "text": ""
        }
    },

    {
        "name": "Twitter",
        "type": "twitter",
        "components": {
            "twitter": {
                "twitter-username": "zzzz"
            }
        }
    },

    }
]
</snippet></ROW><ROW><id>15687456</id><snippet>str(...)</snippet></ROW><ROW><id>15687456</id><snippet>import json
context = { 'data': json.dumps(getitems(self)) }
</snippet></ROW><ROW><id>15687566</id><snippet>Parent.objects.annotate(cc=Count('child')).filter(cc=0)
</snippet></ROW><ROW><id>15687566</id><snippet>Parent.objects.filter(child=None)
</snippet></ROW><ROW><id>15687727</id><snippet>int main(int argc,char* argv[]);</snippet></ROW><ROW><id>15687734</id><snippet>super</snippet></ROW><ROW><id>15687734</id><snippet>class MyList(QtGui.QListWidget):
    def mouseReleaseEvent(self, e):
        super(MyList, self).mouseReleaseEvent(e)
        print('released', e)
</snippet></ROW><ROW><id>15687734</id><snippet>from PyQt4 import QtGui
app = QtGui.QApplication([])
class MyList(QtGui.QListWidget):
    def mouseReleaseEvent(self, e):
        super(MyList, self).mouseReleaseEvent(e)
        print('released', e)

l = MyList()
l.addItems(['hello', 'world'])
l.show()
</snippet></ROW><ROW><id>15687734</id><snippet>('released', &lt;PyQt4.QtGui.QMouseEvent object at 0x72b4d40&gt;)
('released', &lt;PyQt4.QtGui.QMouseEvent object at 0x72b4d40&gt;)
('released', &lt;PyQt4.QtGui.QMouseEvent object at 0x72b4d40&gt;)
('released', &lt;PyQt4.QtGui.QMouseEvent object at 0x72b4d40&gt;)
('released', &lt;PyQt4.QtGui.QMouseEvent object at 0x72b4d40&gt;)
</snippet></ROW><ROW><id>15687892</id><snippet>__new__()</snippet></ROW><ROW><id>15687892</id><snippet>class Foo(date):
    def __new__(cls, year, month=1, day=1):
        return super(Foo, cls).__new__(cls, year, month, day)
</snippet></ROW><ROW><id>15687892</id><snippet>month</snippet></ROW><ROW><id>15687892</id><snippet>day</snippet></ROW><ROW><id>15687892</id><snippet>__new__</snippet></ROW><ROW><id>15687892</id><snippet>&gt;&gt;&gt; class Foo(date):
...     def __new__(cls, year, month=1, day=1):
...         return super(Foo, cls).__new__(cls, year, month, day)
... 
&gt;&gt;&gt; Foo(2013)
Foo(2013, 1, 1)
</snippet></ROW><ROW><id>15687898</id><snippet>print</snippet></ROW><ROW><id>15687898</id><snippet>__str__</snippet></ROW><ROW><id>15687898</id><snippet>unicode</snippet></ROW><ROW><id>15687898</id><snippet>PyFile_WriteObject</snippet></ROW><ROW><id>15687898</id><snippet>print</snippet></ROW><ROW><id>15687898</id><snippet>int
PyFile_WriteObject(PyObject *v, PyObject *f, int flags)
{
...
        if ((flags &amp; Py_PRINT_RAW) &amp;&amp;
    PyUnicode_Check(v) &amp;&amp; enc != Py_None) {
    char *cenc = PyString_AS_STRING(enc);
    char *errors = fobj-&gt;f_errors == Py_None ? 
      "strict" : PyString_AS_STRING(fobj-&gt;f_errors);
    value = PyUnicode_AsEncodedString(v, cenc, errors);
    if (value == NULL)
        return -1;
</snippet></ROW><ROW><id>15687898</id><snippet>PyUnicode_Check(v)</snippet></ROW><ROW><id>15687898</id><snippet>v</snippet></ROW><ROW><id>15687898</id><snippet>unicode</snippet></ROW><ROW><id>15687898</id><snippet>__str__</snippet></ROW><ROW><id>15687898</id><snippet>str</snippet></ROW><ROW><id>15687898</id><snippet>__str__</snippet></ROW><ROW><id>15687898</id><snippet>&gt;&gt;&gt; class mystr(str):
...     def __str__(self): return "str"
...     def __repr__(self): return "repr"
... 
&gt;&gt;&gt; print mystr()
str
</snippet></ROW><ROW><id>15687898</id><snippet>str</snippet></ROW><ROW><id>15687898</id><snippet>unicode</snippet></ROW><ROW><id>15687898</id><snippet>&gt;&gt;&gt; class myuni(unicode):
...     def __str__(self): return "str"
...     def __repr__(self): return "repr"
...     def __unicode__(self): return "unicode"
... 
&gt;&gt;&gt; print myuni()

&gt;&gt;&gt; str(myuni())
'str'
&gt;&gt;&gt; unicode(myuni())
u'unicode'
</snippet></ROW><ROW><id>15687935</id><snippet>SomethingMeta.__init__</snippet></ROW><ROW><id>15687935</id><snippet>Something</snippet></ROW><ROW><id>15687935</id><snippet>Something</snippet></ROW><ROW><id>15687935</id><snippet>cls.__init__</snippet></ROW><ROW><id>15687935</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>15687935</id><snippet>import inspect
class SomethingMeta(type):
    def __init__(cls, name, bases, dct):
        if not hasattr(cls, 'registry'):
            cls.registry = {}
        else:
            interface_id = name.lower()
            attrs, varargs, varkw, defaults = inspect.getargspec(cls.__init__)
            cls.registry[interface_id] = [a for a in attrs 
                                          if a not in ('self', None)]

        super(SomethingMeta, cls).__init__(name, bases, dct)

class Something(object):
    __metaclass__ = SomethingMeta

class SomethingA(Something):
    def __init__(self, x, y, *args, **kw):
        self.x = x
        self.y = y

class SomethingB(Something):
    def __init__(self, z=0):
        self.z = z

print(Something.registry)
</snippet></ROW><ROW><id>15687935</id><snippet>{'somethingb': ['z'], 'somethinga': ['x', 'y']}
</snippet></ROW><ROW><id>15688052</id><snippet>class Son_1(object):

    son_func = staticmethod(func_1)

class Son_2(object):

    son_func = staticmethod(func_2)
</snippet></ROW><ROW><id>15688052</id><snippet>staticmethod</snippet></ROW><ROW><id>15688052</id><snippet>metaclass</snippet></ROW><ROW><id>15688052</id><snippet>class HasSonMeta(type):

    def __new__(cls, name, bases, attrs):

        attrs['son_func'] = staticmethod(attrs.pop('__son_func__'))
        return type.__new__(cls, name, bases, attrs)


class Son1(object):

     __metaclass__ = HasSonMeta
     __son_func__ = func_1

class Son2(object):

    __metaclass__ = HasSonMeta
    __son_func__ = func_2
</snippet></ROW><ROW><id>15688052</id><snippet>class Son3(object):

    __metaclass__ = HasSonMeta

    def __son_func__():

        pass
</snippet></ROW><ROW><id>15688085</id><snippet>unravel_index</snippet></ROW><ROW><id>15688085</id><snippet>ravel_multi_index</snippet></ROW><ROW><id>15688085</id><snippet>M</snippet></ROW><ROW><id>15688085</id><snippet>N</snippet></ROW><ROW><id>15688085</id><snippet>idx</snippet></ROW><ROW><id>15688085</id><snippet>idy</snippet></ROW><ROW><id>15688085</id><snippet>&gt;&gt;&gt; M, N = 12, 10
&gt;&gt;&gt; np.unravel_index(4, dims=(M, N))
(0, 4)
</snippet></ROW><ROW><id>15688085</id><snippet>&gt;&gt;&gt; np.unravel_index([15, 28, 32, 97], dims=(M, N))
(array([1, 2, 3, 9], dtype=int64), array([5, 8, 2, 7], dtype=int64))
</snippet></ROW><ROW><id>15688085</id><snippet>cells</snippet></ROW><ROW><id>15688085</id><snippet>&gt;&gt;&gt; cells = np.array([15, 28, 32, 44, 87])
</snippet></ROW><ROW><id>15688085</id><snippet>&gt;&gt;&gt; idy, idx = np.unravel_index(cells, dims=(M, N))
&gt;&gt;&gt; neigh_idx = np.vstack((idx-1, idx+1, idx, idx))
&gt;&gt;&gt; neigh_idy = np.vstack((idy, idy, idy-1, idy+1))
&gt;&gt;&gt; np.ravel_multi_index((neigh_idy, neigh_idx), dims=(M,N))
array([[14, 27, 31, 43, 86],
       [16, 29, 33, 45, 88],
       [ 5, 18, 22, 34, 77],
       [25, 38, 42, 54, 97]], dtype=int64)
</snippet></ROW><ROW><id>15688085</id><snippet>&gt;&gt;&gt; np.ravel_multi_index((neigh_idy, neigh_idx), dims=(M,N)).T
array([[14, 16,  5, 25],
       [27, 29, 18, 38],
       [31, 33, 22, 42],
       [43, 45, 34, 54],
       [86, 88, 77, 97]], dtype=int64)
</snippet></ROW><ROW><id>15688085</id><snippet>ravel_multi_index</snippet></ROW><ROW><id>15688085</id><snippet>mode</snippet></ROW><ROW><id>15688350</id><snippet>[]</snippet></ROW><ROW><id>15688350</id><snippet>settingsMap['name']</snippet></ROW><ROW><id>15688350</id><snippet>settingsMap['name'][1]['categories'][0]['quick'][0]['directory']
</snippet></ROW><ROW><id>15688350</id><snippet>settingsMap = {
    'name':
    {'proj_directory': '/directory/',
     'categories': {'quick': {'directory': 'quick',
                              'description': None,
                              'table_name': 'quick'}},
     'intermediate': {'directory': 'intermediate',
                      'description': None,
                      'table_name': 'intermediate'},
     'research': {'directory': 'research',
                  'description': None,
                  'table_name': 'research'},
     'nomenclature': {'extension': 'nc',
                      'handler': 'script',
                      'filename': {'id': {'type': 'VARCHAR'},
                                   'date': {'type': 'DATE'},
                                   'v': {'type': 'INT'}},
                      'data': {'time': {'variable_name': 'time',
                                        'units': 'minutes since 1-1-1980 00:00 UTC'}}}}}
</snippet></ROW><ROW><id>15688350</id><snippet>settingsMap['name']['categories']['quick']['directory']
# quick
</snippet></ROW><ROW><id>15688485</id><snippet>.executemany()</snippet></ROW><ROW><id>15688485</id><snippet>curr.executemany('UPDATE test SET myCol= ?', myList)
</snippet></ROW><ROW><id>15688485</id><snippet>myList</snippet></ROW><ROW><id>15688485</id><snippet>curr.executemany('UPDATE test SET myCol= ?', ((val,) for val in myList))
</snippet></ROW><ROW><id>15688485</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn=sqlite3.connect(':memory:')
&gt;&gt;&gt; conn.execute('CREATE TABLE test (myCol)')
&lt;sqlite3.Cursor object at 0x10542f1f0&gt;
&gt;&gt;&gt; conn.commit()
&gt;&gt;&gt; myList = ('foo', 'bar', 'spam')
&gt;&gt;&gt; conn.executemany('INSERT into test values (?)', ((val,) for val in myList))
&lt;sqlite3.Cursor object at 0x10542f180&gt;
&gt;&gt;&gt; list(conn.execute('select * from test'))
[(u'foo',), (u'bar',), (u'spam',)]
</snippet></ROW><ROW><id>15688485</id><snippet>UPDATE</snippet></ROW><ROW><id>15688485</id><snippet>WHERE</snippet></ROW><ROW><id>15688485</id><snippet>UPDATE</snippet></ROW><ROW><id>15688485</id><snippet>WHERE</snippet></ROW><ROW><id>15688485</id><snippet>my_data = ({id=1, value='foo'}, {id=2, value='bar'})
cursor.executemany('UPDATE test SET myCol=:value WHERE rowId=:id', my_data)
</snippet></ROW><ROW><id>15688667</id><snippet>rc</snippet></ROW><ROW><id>15688667</id><snippet>rc[0]</snippet></ROW><ROW><id>15688667</id><snippet>view_1_block = rc[0]
view_1_block.block = True
view_2_noblock = rc[0]
view_2_noblock.block = False
view_3_noblock = rc[[0,1]]
view_3_noblock.block = False
</snippet></ROW><ROW><id>15688667</id><snippet>view_1_block.map(lambda x:x**10, range(32)) # blocks, returns results, runs only on 1
view_3_noblock.map(lambda x:x**10, range(32)) # does not block, returns AsyncResult, runs on 1 and 2
</snippet></ROW><ROW><id>15688667</id><snippet>rc.direct_view(1)</snippet></ROW><ROW><id>15688794</id><snippet>lib</snippet></ROW><ROW><id>15688794</id><snippet>from main.lib import MyClass
</snippet></ROW><ROW><id>15688794</id><snippet>lib.MyClass</snippet></ROW><ROW><id>15688794</id><snippet>MyClass</snippet></ROW><ROW><id>15688794</id><snippet>MyClass</snippet></ROW><ROW><id>15688794</id><snippet>__init__.py</snippet></ROW><ROW><id>15688794</id><snippet>main</snippet></ROW><ROW><id>15688794</id><snippet>__all__ = ['MyClass']

from lib import MyClass
</snippet></ROW><ROW><id>15688794</id><snippet>__all__</snippet></ROW><ROW><id>15688840</id><snippet>df['group'] = (df.condition == False).astype('int').cumsum().shift(1).fillna(0)

df
             date    long     lat condition  group
2/5/2013 19:45:00  39.940 -86.159      True      0
2/5/2013 19:50:00  39.940 -86.159      True      0
2/5/2013 19:55:00  39.940 -86.159     False      0
2/5/2013 20:00:00  39.777 -85.995     False      1
2/5/2013 20:05:00  39.775 -85.978      True      2
2/5/2013 20:10:00  39.775 -85.978      True      2
2/5/2013 20:15:00  39.775 -85.978     False      2
2/5/2013 20:20:00  39.940 -86.159      True      3
2/5/2013 20:25:00  39.940 -86.159     False      3

df['result'] = df.groupby(['group']).date.transform(lambda sdf: 5 *len(sdf))

df
             date    long     lat condition  group result
2/5/2013 19:45:00  39.940 -86.159      True      0     15
2/5/2013 19:50:00  39.940 -86.159      True      0     15
2/5/2013 19:55:00  39.940 -86.159     False      0     15
2/5/2013 20:00:00  39.777 -85.995     False      1      5
2/5/2013 20:05:00  39.775 -85.978      True      2     15
2/5/2013 20:10:00  39.775 -85.978      True      2     15
2/5/2013 20:15:00  39.775 -85.978     False      2     15
2/5/2013 20:20:00  39.940 -86.159      True      3     10
2/5/2013 20:25:00  39.940 -86.159     False      3     10
</snippet></ROW><ROW><id>15688847</id><snippet>key_word = ['width', 'height', 'left', 'right']
regex_template = r'{}\s*:\s*\d+'
for key in key_word:
    print re.search(regex_template.format(key), line)
</snippet></ROW><ROW><id>15688943</id><snippet>status = app.exec_()   # run app, show window, wait for input
sys.exit(status)       # terminate program with a status code returned from app
</snippet></ROW><ROW><id>15689331</id><snippet>for x in (str(y) for y in range(0, 5)):
</snippet></ROW><ROW><id>15689331</id><snippet>str</snippet></ROW><ROW><id>15689331</id><snippet>str(y)</snippet></ROW><ROW><id>15689356</id><snippet>exec</snippet></ROW><ROW><id>15689919</id><snippet>import itertools

def generateLists(n, k):
    numberOfZeroes = n - k
    for numberOfOnes in range(0, k+1):
        numberOfNegativeOnes = k - numberOfOnes
        orderedList = [-1] * numberOfNegativeOnes + [0] * numberOfZeroes + [1] * numberOfOnes
        for possibleOrderings in itertools.permutations(orderedList):
            yield possibleOrderings

for i in generateLists(3, 2):
    print i
</snippet></ROW><ROW><id>15689919</id><snippet>(-1, -1, 0)
(-1, 0, -1)
(-1, -1, 0)
(-1, 0, -1)
(0, -1, -1)
(0, -1, -1)
(-1, 0, 1)
(-1, 1, 0)
(0, -1, 1)
(0, 1, -1)
(1, -1, 0)
(1, 0, -1)
(0, 1, 1)
(0, 1, 1)
(1, 0, 1)
(1, 1, 0)
(1, 0, 1)
(1, 1, 0)
</snippet></ROW><ROW><id>15689944</id><snippet>operator</snippet></ROW><ROW><id>15689944</id><snippet>lambda a, b: a &lt; b</snippet></ROW><ROW><id>15689944</id><snippet>operator.lt</snippet></ROW><ROW><id>15689944</id><snippet>out</snippet></ROW><ROW><id>15689944</id><snippet>less</snippet></ROW><ROW><id>15689944</id><snippet>&lt;</snippet></ROW><ROW><id>15689944</id><snippet>In [13]: x = range(10**5)

In [19]: %timeit [j &lt; 5000 for j in x]
100 loops, best of 3: 5.32 ms per loop

In [20]: %timeit np.less(x, 5000)
100 loops, best of 3: 11.3 ms per loop

In [21]: %timeit [operator.lt(j, 5000) for j in x]
100 loops, best of 3: 16.2 ms per loop
</snippet></ROW><ROW><id>15689944</id><snippet>operator.lt</snippet></ROW><ROW><id>15689944</id><snippet>In [22]: %timeit np.fromiter((j &lt; 5000 for j in x), dtype=bool, count=10**5)
100 loops, best of 3: 7.91 ms per loop
</snippet></ROW><ROW><id>15689944</id><snippet>In [24]: y = np.array(x)

In [25]: %timeit y &lt; 5000
10000 loops, best of 3: 82.8 us per loop
</snippet></ROW><ROW><id>15690429</id><snippet>locals()</snippet></ROW><ROW><id>15690429</id><snippet>globals()</snippet></ROW><ROW><id>15690429</id><snippet>format</snippet></ROW><ROW><id>15690429</id><snippet>%</snippet></ROW><ROW><id>15690429</id><snippet>locals</snippet></ROW><ROW><id>15690429</id><snippet>**</snippet></ROW><ROW><id>15690429</id><snippet>locals()</snippet></ROW><ROW><id>15690429</id><snippet>format</snippet></ROW><ROW><id>15690429</id><snippet>locals</snippet></ROW><ROW><id>15690429</id><snippet>filename = "data/avatars/{player_name}.{ext}".format(**locals())
</snippet></ROW><ROW><id>15690429</id><snippet>filename = "data/avatars/{0}.{1}".format(player_name, ext)
</snippet></ROW><ROW><id>15690695</id><snippet>import sys    
from tkinter import *
import time

def tick():
    global time1
    # get the current local time from the PC
    time2 = time.strftime('%H:%M:%S')
    # if time string has changed, update it
    if time2 != time1:
        time1 = time2
        clock.config(text=time2)
        # calls itself every 200 milliseconds
        # to update the time display as needed
        # could use &gt;200 ms, but display gets jerky
    clock.after(200, tick)

root = Tk()
time1 = ''

status = Label(root, text="v1.0", bd=1, relief=SUNKEN, anchor=W)
status.grid(row=0, column=0)

clock = Label(root, font=('times', 20, 'bold'), bg='green')
clock.grid(row=0, column=1) 

tick()
root.mainloop()
</snippet></ROW><ROW><id>15691239</id><snippet>\r</snippet></ROW><ROW><id>15691239</id><snippet>stdin</snippet></ROW><ROW><id>15691239</id><snippet>csv.reader(sys.stdin.read().split('\r'))
</snippet></ROW><ROW><id>15691389</id><snippet>rel = np.diff(input) / input[:-1]
</snippet></ROW><ROW><id>15691389</id><snippet>from numpy.lib.stride_tricks import as_strided
win = as_strided(rel, shape=(rel.shape[0]-79, 80), strides=rel.strides*2)
</snippet></ROW><ROW><id>15691389</id><snippet>rel = np.diff(input, axis=1) / input[:, :-1]
win = as_strided(rel, shape=(rel.shape[0], rel.shape[1]-79, 80),
                 strides=rel.strides + rel.strides[1:])
</snippet></ROW><ROW><id>15691389</id><snippet>strides</snippet></ROW><ROW><id>15691429</id><snippet>s.execute('INSERT INTO mytable (col_name) VALUES (?);', ("a|b",))
</snippet></ROW><ROW><id>15691443</id><snippet>n</snippet></ROW><ROW><id>15691443</id><snippet>n!</snippet></ROW><ROW><id>15691443</id><snippet>daedoid</snippet></ROW><ROW><id>15691443</id><snippet>6 = 3!</snippet></ROW><ROW><id>15691443</id><snippet>d</snippet></ROW><ROW><id>15691443</id><snippet>c</snippet></ROW><ROW><id>15691508</id><snippet>x=foo().bar()</snippet></ROW><ROW><id>15691508</id><snippet>x</snippet></ROW><ROW><id>15691508</id><snippet>bar()</snippet></ROW><ROW><id>15691508</id><snippet>self.b=Button(...).grid(...)</snippet></ROW><ROW><id>15691508</id><snippet>self.b</snippet></ROW><ROW><id>15691508</id><snippet>grid(...)</snippet></ROW><ROW><id>15691508</id><snippet>grid(...)</snippet></ROW><ROW><id>15691508</id><snippet>None</snippet></ROW><ROW><id>15691508</id><snippet>self.b.configure(...)</snippet></ROW><ROW><id>15691508</id><snippet>None.configure(...)</snippet></ROW><ROW><id>15691508</id><snippet>self.b1 = Button(...)
self.b1.grid(...)
</snippet></ROW><ROW><id>15691537</id><snippet>$ cmake -G "Unix Makefiles" -D CMAKE_OSX_ARCHITECTURES=i386 -D CMAKE_C_FLAGS=-m32 -D CMAKE_CXX_FLAGS=-m32 ..
</snippet></ROW><ROW><id>15691537</id><snippet>sudo</snippet></ROW><ROW><id>15691537</id><snippet>sudo make install</snippet></ROW><ROW><id>15691537</id><snippet>cmake</snippet></ROW><ROW><id>15691537</id><snippet>make</snippet></ROW><ROW><id>15691537</id><snippet>/usr/local/lib/python2.7</snippet></ROW><ROW><id>15691537</id><snippet>/usr/local/bin/pip-2.7</snippet></ROW><ROW><id>15691624</id><snippet>Object()</snippet></ROW><ROW><id>15691624</id><snippet>class Object:
    defaultobject = None

    def __init__(self, name, superclass=None):
        self.__name = name

        if superclass is None:
            superclass = self.defaultobject
            if superclass is None
                # No default set yet, use `self` instead (it'll *be* the default)
                superclass = self

        self.__superclass = superclass

Object.defaultobject = Object('defaultobject', None)
</snippet></ROW><ROW><id>15691624</id><snippet>superclass is None</snippet></ROW><ROW><id>15691624</id><snippet>Object</snippet></ROW><ROW><id>15691624</id><snippet>Object.defaultobject</snippet></ROW><ROW><id>15691753</id><snippet>Append.txt</snippet></ROW><ROW><id>15691753</id><snippet>import csv

# collect the fruits of both CSV files
with open('c:/Test/test1.csv', 'rb') as test1:
    reader = csv.reader(test1)
    next(reader, None)  # ignore header
    test1_fruit = set(row[3] for row in reader)
with open('c:/Test/test2.csv', 'rb') as test2:
    reader = csv.reader(test2)
    next(reader, None)  # ignore header
    test2_fruit = set(row[0] for row in reader)

# Read all the fruit from Append
with open("C:/Test/Append.txt", 'r') as append:
    fruit = set(line.strip() for line in append if line.strip())

# add all fruit that are in both test1 and test2
fruit |= test1_fruit &amp; test2_fruit

# write out a sorted list
with open("C:/Test/Append.txt", 'w') as append:
    append.write('\n'.join(sorted(fruit)))
</snippet></ROW><ROW><id>15691789</id><snippet>bdict.values()</snippet></ROW><ROW><id>15691789</id><snippet>std = np.std(bdict.values())
</snippet></ROW><ROW><id>15691789</id><snippet>img = np.array(img)
colour_mask = img == 1  # or whichever colour you want
per_col_count = colour_mask.sum(axis=0)
std = np.std(per_col_count)
</snippet></ROW><ROW><id>15691789</id><snippet>colour_mask</snippet></ROW><ROW><id>15691789</id><snippet>True</snippet></ROW><ROW><id>15692009</id><snippet>(f1) = unpack_from( '!f', msg, 0 )
</snippet></ROW><ROW><id>15692009</id><snippet>(f1,) = unpack_from( '!f', msg, 0 )
</snippet></ROW><ROW><id>15692009</id><snippet>unpack_from</snippet></ROW><ROW><id>15692009</id><snippet>(f1)</snippet></ROW><ROW><id>15692009</id><snippet>(f1,)</snippet></ROW><ROW><id>15692099</id><snippet>avaluos= ( Avaluo.objects
           .filter(Estatus='CONCLUIDO')
           .filter(Q(Factura='')|Q(Factura__isnull=True))
           .filter(Q(Pagado=False)|Q(Pagado__isnull=True)) )
</snippet></ROW><ROW><id>15692173</id><snippet>ord</snippet></ROW><ROW><id>15692173</id><snippet>chr</snippet></ROW><ROW><id>15692173</id><snippet>ord('a')  # 97
chr(97)   # 'a'
</snippet></ROW><ROW><id>15692173</id><snippet>range</snippet></ROW><ROW><id>15692185</id><snippet>arrays = {}
n = input(': ')
arrays['Array%s' % n] = []
</snippet></ROW><ROW><id>15692278</id><snippet>argparse.exit()</snippet></ROW><ROW><id>15692278</id><snippet>sys.exit()</snippet></ROW><ROW><id>15692278</id><snippet>.error()</snippet></ROW><ROW><id>15692278</id><snippet>.exit()</snippet></ROW><ROW><id>15692278</id><snippet>.error()</snippet></ROW><ROW><id>15692278</id><snippet>.exit()</snippet></ROW><ROW><id>15692278</id><snippet># ===============
# Exiting methods
# ===============
def exit(self, status=0, message=None):
    if message:
        self._print_message(message, _sys.stderr)
    _sys.exit(status)

def error(self, message):
    """error(message: string)

    Prints a usage message incorporating the message to stderr and
    exits.

    If you override this in a subclass, it should not return -- it
    should either exit or raise an exception.
    """
    self.print_usage(_sys.stderr)
    self.exit(2, _('%s: error: %s\n') % (self.prog, message))
</snippet></ROW><ROW><id>15692289</id><snippet>c = a[b]</snippet></ROW><ROW><id>15692289</id><snippet>a.__get_item__</snippet></ROW><ROW><id>15692289</id><snippet>b</snippet></ROW><ROW><id>15692289</id><snippet>c</snippet></ROW><ROW><id>15692289</id><snippet>a[b] = c</snippet></ROW><ROW><id>15692289</id><snippet>a.__setitem__</snippet></ROW><ROW><id>15692289</id><snippet>b</snippet></ROW><ROW><id>15692289</id><snippet>c</snippet></ROW><ROW><id>15692289</id><snippet>a[b]</snippet></ROW><ROW><id>15692289</id><snippet>ndarray</snippet></ROW><ROW><id>15692289</id><snippet>b</snippet></ROW><ROW><id>15692289</id><snippet>a</snippet></ROW><ROW><id>15692394</id><snippet>other_list</snippet></ROW><ROW><id>15692394</id><snippet>data_file = ['1911 Overland OctoAuto', 
             '1913 Scripps-Booth Bi-Autogo',
             '1920 Briggs and Stratton Flyer']

car_list = []
other_list = []
for entry in data_file:
    year, make, model = entry.split(' ',2)
    car_list.append(make)
    other_list.append(year)
    other_list.append(model)

print car_list
&gt;&gt;&gt;&gt; ['Overland', 'Scripps-Booth', 'Briggs']
print other_list
&gt;&gt;&gt;&gt; ['1911', 'OctoAuto', '1913', 'Bi-Autogo', '1920', 'and Stratton Flyer']
</snippet></ROW><ROW><id>15692480</id><snippet>$ python setup.py install --user
</snippet></ROW><ROW><id>15692676</id><snippet>convert(int(round(number, -1)))
</snippet></ROW><ROW><id>15692676</id><snippet>convert(50)</snippet></ROW><ROW><id>15692676</id><snippet>if</snippet></ROW><ROW><id>15692676</id><snippet>else</snippet></ROW><ROW><id>15692676</id><snippet>convert(50)</snippet></ROW><ROW><id>15692920</id><snippet>import sys
buffer = []
while run:
    line = sys.stdin.readline().rstrip('\n')
    if line == 'quit':
        run = False
    else:
        buffer.append(line)

print buffer
</snippet></ROW><ROW><id>15692920</id><snippet>import sys
buffer = []
while True:
    line = sys.stdin.readline().rstrip('\n')
    if line == 'quit':
        break
    else:
        buffer.append(line)
print buffer
</snippet></ROW><ROW><id>15692925</id><snippet>$ python TOC.py '[1, "happy"]' "[2, 'sad']"
</snippet></ROW><ROW><id>15692925</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15692925</id><snippet>for arg in sys.argv[1:]:
    print ast.literal_eval(arg)
</snippet></ROW><ROW><id>15692925</id><snippet>argparse</snippet></ROW><ROW><id>15692958</id><snippet>import pytz
import datetime as DT

eastern = pytz.timezone('US/Eastern')
utc = pytz.utc
test = '2013-03-27 23:05'
</snippet></ROW><ROW><id>15692958</id><snippet>test2 = DT.datetime.strptime(test, '%Y-%m-%d %H:%M')   
print(test2)
# 2013-03-27 23:05:00
</snippet></ROW><ROW><id>15692958</id><snippet>test2</snippet></ROW><ROW><id>15692958</id><snippet>print(eastern.localize(test2))
# 2013-03-27 23:05:00-04:00
</snippet></ROW><ROW><id>15692958</id><snippet>test2</snippet></ROW><ROW><id>15692958</id><snippet>print(utc.localize(test2))
# 2013-03-27 23:05:00+00:00
</snippet></ROW><ROW><id>15692958</id><snippet>astimezone</snippet></ROW><ROW><id>15692958</id><snippet>test2_eastern = eastern.localize(test2)
print(test2_eastern.astimezone(utc))
# 2013-03-28 03:05:00+00:00
</snippet></ROW><ROW><id>15693123</id><snippet>vertuwis = ['a', 'b', 'c']

def determinewelltype(currentuwi,welltype):
    if currentuwi in vertuwis:
        welltype = "Vertical"
    return welltype

currentuwi = "a"
welltype = "UNKNOWN"
welltype = determinewelltype(currentuwi,welltype)
print currentuwi,welltype   # prints out: a Vertical
</snippet></ROW><ROW><id>15693130</id><snippet>crawl</snippet></ROW><ROW><id>15693130</id><snippet>start_urls</snippet></ROW><ROW><id>15693130</id><snippet>start_requests</snippet></ROW><ROW><id>15693130</id><snippet>def start_requests(self):
    yield Request(url1, callback=self.my_callback)
    yield Request(url2, callback=self.my_callback)
</snippet></ROW><ROW><id>15693791</id><snippet>powerset</snippet></ROW><ROW><id>15693791</id><snippet>powerset([L1,L2,L3])</snippet></ROW><ROW><id>15693791</id><snippet>&gt;&gt;&gt; from itertools import chain, product
&gt;&gt;&gt; result = chain.from_iterable(product(*lists) for lists in powerset([L1,L2,L3]))        
&gt;&gt;&gt; list(result)

[(), (1,), (2,), ('a',), ('b',), ('A',), ('B',), (1, 'a'), (1, 'b'), (2, 'a'), 
(2, 'b'), (1, 'A'), (1, 'B'), (2, 'A'), (2, 'B'), ('a', 'A'), ('a', 'B'), 
('b', 'A'), ('b', 'B'), (1, 'a', 'A'), (1, 'a', 'B'), (1, 'b', 'A'), 
(1, 'b', 'B'), (2, 'a', 'A'), (2, 'a', 'B'), (2, 'b', 'A'), (2, 'b', 'B')]
</snippet></ROW><ROW><id>15693802</id><snippet>Python 3.2.3 (default, Jun  8 2012, 05:36:09) 
[GCC 4.7.0 20120507 (Red Hat 4.7.0-5)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from unidecode import unidecode
&gt;&gt;&gt; unidecode("æ, ö or ç")
'ae, o or c'
</snippet></ROW><ROW><id>15693858</id><snippet>$ sudo apt-get install python-pcapy
</snippet></ROW><ROW><id>15693858</id><snippet>$ sudo pip install "http://corelabs.coresecurity.com/index.php?module=Wiki&amp;action=attachment&amp;type=tool&amp;page=Pcapy&amp;file=pcapy-0.10.8.tar.gz"
</snippet></ROW><ROW><id>15694260</id><snippet>print</snippet></ROW><ROW><id>15694260</id><snippet>import urllib2

user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
req = urllib2.Request('http://www.google.com')
response = urllib2.urlopen(req)
page_source = response.read()

print page_source
</snippet></ROW><ROW><id>15694260</id><snippet>print</snippet></ROW><ROW><id>15694260</id><snippet>compile</snippet></ROW><ROW><id>15694260</id><snippet>mode</snippet></ROW><ROW><id>15694260</id><snippet>single</snippet></ROW><ROW><id>15694260</id><snippet>exec</snippet></ROW><ROW><id>15694260</id><snippet>eval</snippet></ROW><ROW><id>15694260</id><snippet>eval</snippet></ROW><ROW><id>15694281</id><snippet>out_to_console</snippet></ROW><ROW><id>15694281</id><snippet>sysfs</snippet></ROW><ROW><id>15694281</id><snippet>procfs</snippet></ROW><ROW><id>15694281</id><snippet>sysfs</snippet></ROW><ROW><id>15694360</id><snippet>zlib</snippet></ROW><ROW><id>15694360</id><snippet>zlib</snippet></ROW><ROW><id>15694407</id><snippet>graph = {'Q-KCK3': {'3C-261':1, 'L-SDU7':1},
         'L-SDU7': {'Q-KCK3':1, '3C-261':1,'4-IPWK':1},
         '3C-261': {'4-IPWK':1,'9K-VDI':1,'L-SDU7':1,'U8MM-3':1},
         'U8MM-3': {'9K-VDI':1,'3C-261':1, '9K-VDI':1, 'Q8T-MC':2},
         'Q8T-MC': {'U8MM-3':2, 'H55-2R':1, 'VM-QFU':2},
         'H55-2R': {'Q8T-MC':1, '9XI-OX':1, 'A3-PAT':1, 'P6-DBM':1},
         'P6-DBM': {'A3-PAT':1, 'H55-2R':1},
         'A3-PAT': {'P6-DBM':1, 'H55-2R':1, '9XI-OX':1,'YRZ-E4':1},
         'YRZ-E4': {'A3-PAT':1}, 
         'VM-QFU': {'IEZW-V':1, 'PU-128':2},
         'IEZW-V': {'VM-QFU':1, 'PU-128':1, 'B-DX09':1},
         'PU-128': {'VM-QFU':1, 'B-DX09':1, 'IEZW-V':1},
         'B-DX09': {'IEZW-V':1, 'PU-128':1, '1TS-WIN':1},
         '1TS-WIN': {'B-DX09':1, '16-31U':1},
         '16-31U': {'1TS-WIN':1}
        }
</snippet></ROW><ROW><id>15694407</id><snippet>def find_all_paths(graph, start, end, path=[]):
        path = path + [start]
        if start == end:
            return [path]
        if start not in graph:
            return []
        paths = []
        for node in graph[start]:
            if node not in path:
                newpaths = find_all_paths(graph, node, end, path)
                for newpath in newpaths:
                    paths.append(newpath)
        return paths       

def min_path(graph, start, end):
    paths=find_all_paths(graph,start,end)
    mt=10**99
    mpath=[]
    print '\tAll paths:',paths
    for path in paths:
        t=sum(graph[i][j] for i,j in zip(path,path[1::]))
        print '\t\tevaluating:',path, t
        if t&lt;mt: 
            mt=t
            mpath=path

    e1='\n'.join('{}-&gt;{}:{}'.format(i,j,graph[i][j]) for i,j in zip(mpath,mpath[1::]))
    e2=str(sum(graph[i][j] for i,j in zip(mpath,mpath[1::])))
    print 'Best path: '+e1+'   Total: '+e2+'\n'  
</snippet></ROW><ROW><id>15694407</id><snippet>min_path(graph,'Q-KCK3','A3-PAT')
min_path(graph,'Q-KCK3','16-31U')
</snippet></ROW><ROW><id>15694407</id><snippet>    All paths: [['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'H55-2R', 'P6-DBM', 'A3-PAT'], ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'H55-2R', 'A3-PAT'], ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'H55-2R', 'P6-DBM', 'A3-PAT'], ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'H55-2R', 'A3-PAT']]
        evaluating: ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'H55-2R', 'P6-DBM', 'A3-PAT'] 7
        evaluating: ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'H55-2R', 'A3-PAT'] 6
        evaluating: ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'H55-2R', 'P6-DBM', 'A3-PAT'] 8
        evaluating: ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'H55-2R', 'A3-PAT'] 7
Best path: Q-KCK3-&gt;3C-261:1
3C-261-&gt;U8MM-3:1
U8MM-3-&gt;Q8T-MC:2
Q8T-MC-&gt;H55-2R:1
H55-2R-&gt;A3-PAT:1   Total: 6

    All paths: [['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'IEZW-V', 'B-DX09', '1TS-WIN', '16-31U'], ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'IEZW-V', 'PU-128', 'B-DX09', '1TS-WIN', '16-31U'], ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'PU-128', 'B-DX09', '1TS-WIN', '16-31U'], ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'PU-128', 'IEZW-V', 'B-DX09', '1TS-WIN', '16-31U'], ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'IEZW-V', 'B-DX09', '1TS-WIN', '16-31U'], ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'IEZW-V', 'PU-128', 'B-DX09', '1TS-WIN', '16-31U'], ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'PU-128', 'B-DX09', '1TS-WIN', '16-31U'], ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'PU-128', 'IEZW-V', 'B-DX09', '1TS-WIN', '16-31U']]
        evaluating: ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'IEZW-V', 'B-DX09', '1TS-WIN', '16-31U'] 10
        evaluating: ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'IEZW-V', 'PU-128', 'B-DX09', '1TS-WIN', '16-31U'] 11
        evaluating: ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'PU-128', 'B-DX09', '1TS-WIN', '16-31U'] 11
        evaluating: ['Q-KCK3', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'PU-128', 'IEZW-V', 'B-DX09', '1TS-WIN', '16-31U'] 12
        evaluating: ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'IEZW-V', 'B-DX09', '1TS-WIN', '16-31U'] 11
        evaluating: ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'IEZW-V', 'PU-128', 'B-DX09', '1TS-WIN', '16-31U'] 12
        evaluating: ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'PU-128', 'B-DX09', '1TS-WIN', '16-31U'] 12
        evaluating: ['Q-KCK3', 'L-SDU7', '3C-261', 'U8MM-3', 'Q8T-MC', 'VM-QFU', 'PU-128', 'IEZW-V', 'B-DX09', '1TS-WIN', '16-31U'] 13
Best path: Q-KCK3-&gt;3C-261:1
3C-261-&gt;U8MM-3:1
U8MM-3-&gt;Q8T-MC:2
Q8T-MC-&gt;VM-QFU:2
VM-QFU-&gt;IEZW-V:1
IEZW-V-&gt;B-DX09:1
B-DX09-&gt;1TS-WIN:1
1TS-WIN-&gt;16-31U:1   Total: 10
</snippet></ROW><ROW><id>15694407</id><snippet>min_path</snippet></ROW><ROW><id>15694407</id><snippet>1</snippet></ROW><ROW><id>15694498</id><snippet>from bs4 import BeautifulSoup
import re
file=open("input")
soup = BeautifulSoup(file)
for t in soup(text=re.compile(".")):
  path = '/'.join(reversed([p.name for p in t.parentGenerator() if p]))
  print path+"/"+ t.strip()
</snippet></ROW><ROW><id>15694498</id><snippet>[document]/html/body/div/span/span/28. february 2012
[document]/html/body/div/span/14:46
[document]/html/body/div/Something,
[document]/html/body/div/p/something else
[document]/html/body/div/continuing.
</snippet></ROW><ROW><id>15694558</id><snippet>def matrixMUL(A,B):
    Z = [[0] * len(B[0]) for zz in range(len(A))]
    for i in range(0,len(A)):
        a = row(A,i)
        for j in range(0,len(B[0])):
            b = col(B,j)
            Z[i][j] = sum(p*q for p,q in zip(a,b))
    return Z
</snippet></ROW><ROW><id>15694558</id><snippet>Z = [[0] * len(B[0])] * len(A)</snippet></ROW><ROW><id>15694558</id><snippet>Z</snippet></ROW><ROW><id>15694558</id><snippet>len(A)</snippet></ROW><ROW><id>15694558</id><snippet>len(B[0])</snippet></ROW><ROW><id>15694558</id><snippet>z[0][0] = 1</snippet></ROW><ROW><id>15694558</id><snippet>Z[1][0]</snippet></ROW><ROW><id>15694558</id><snippet>Z[2][0]</snippet></ROW><ROW><id>15694558</id><snippet>1</snippet></ROW><ROW><id>15694558</id><snippet>Z</snippet></ROW><ROW><id>15694558</id><snippet>Z</snippet></ROW><ROW><id>15694558</id><snippet>Z</snippet></ROW><ROW><id>15694558</id><snippet>def matrixMUL2(A,B):
    Z = []
    for i in range(0,len(A)):
        a = row(A,i)
        r = []
        for j in range(0,len(B[0])):
            b = col(B,j)
            r.append(sum(p*q for p,q in zip(a,b)))
        Z.append(r)
    return Z
</snippet></ROW><ROW><id>15694558</id><snippet>numpy</snippet></ROW><ROW><id>15694558</id><snippet>numpy</snippet></ROW><ROW><id>15694563</id><snippet>wtypes = [QPushButton,QLabel,QTextEdit]
qreg = QRegExp(r'.*')
mywidgets = {}


for t in wtypes:
    mywidgets[t] = self.findChildren(t,qreg)

for button in mywidgets[QPushButton]:
    print "button:", button.objectName()

for label in mywidgets[QLabel]:
    print "label:", label.objectName()
</snippet></ROW><ROW><id>15695918</id><snippet>add</snippet></ROW><ROW><id>15695918</id><snippet>self.size</snippet></ROW><ROW><id>15695918</id><snippet>__init__</snippet></ROW><ROW><id>15695918</id><snippet>0</snippet></ROW><ROW><id>15695918</id><snippet>__len__</snippet></ROW><ROW><id>15695918</id><snippet>0</snippet></ROW><ROW><id>15695918</id><snippet>self.head</snippet></ROW><ROW><id>15695918</id><snippet>None</snippet></ROW><ROW><id>15695918</id><snippet>0</snippet></ROW><ROW><id>15695918</id><snippet>self.size</snippet></ROW><ROW><id>15695918</id><snippet>0</snippet></ROW><ROW><id>15695918</id><snippet>elif value &gt; self.tail.data:
    self.tail = newNode
    newNode.prev = self.tail
    newNode.next = None
    return newNode
</snippet></ROW><ROW><id>15695918</id><snippet>newNode.prev</snippet></ROW><ROW><id>15695976</id><snippet>rstrip()</snippet></ROW><ROW><id>15695976</id><snippet>.pop()</snippet></ROW><ROW><id>15695976</id><snippet>while somelist and somelist[-1][1] == 0:
    somelist.pop()
</snippet></ROW><ROW><id>15695976</id><snippet>end = len(somelist)
while end and somelist[end - 1][1] == 0:
    end -= 1
newlist = somelist[:end]
</snippet></ROW><ROW><id>15696001</id><snippet>from rauth import OAuth1Service

# Get a real consumer key &amp; secret from https://dev.twitter.com/apps/new
twitter = OAuth1Service(
    name='twitter',
    consumer_key='J8MoJG4bQ9gcmGh8H7XhMg',
    consumer_secret='7WAscbSy65GmiVOvMU5EBYn5z80fhQkcFWSLMJJu4',
    request_token_url='https://api.twitter.com/oauth/request_token',
    access_token_url='https://api.twitter.com/oauth/access_token',
    authorize_url='https://api.twitter.com/oauth/authorize',
    base_url='https://api.twitter.com/1/')

request_token, request_token_secret = twitter.get_request_token()

authorize_url = twitter.get_authorize_url(request_token)

print 'Visit this URL in your browser: ' + authorize_url
pin = raw_input('Enter PIN from browser: ')

session = twitter.get_auth_session(request_token,
                                   request_token_secret,
                                   method='POST',
                                   data={'oauth_verifier': pin})

params = {'screen_name': 'github',  # User to pull Tweets from
          'include_rts': 1,         # Include retweets
          'count': 10}              # 10 tweets

r = session.get('statuses/user_timeline.json', params=params)

for i, tweet in enumerate(r.json(), 1):
    handle = tweet['user']['screen_name'].encode('utf-8')
    text = tweet['text'].encode('utf-8')
    print '{0}. @{1} - {2}'.format(i, handle, text)
</snippet></ROW><ROW><id>15696070</id><snippet>socket.listen()</snippet></ROW><ROW><id>15696070</id><snippet>Queue</snippet></ROW><ROW><id>15696179</id><snippet>X-Appengine-Cron: true</snippet></ROW><ROW><id>15696275</id><snippet>texts = []</snippet></ROW><ROW><id>15696275</id><snippet>notes()</snippet></ROW><ROW><id>15696364</id><snippet>campaign</snippet></ROW><ROW><id>15696364</id><snippet>campaign.rank_set</snippet></ROW><ROW><id>15696364</id><snippet>related_name</snippet></ROW><ROW><id>15696364</id><snippet>rank</snippet></ROW><ROW><id>15696364</id><snippet>rank.character_id</snippet></ROW><ROW><id>15696364</id><snippet>character.rank_set</snippet></ROW><ROW><id>15696364</id><snippet>rank</snippet></ROW><ROW><id>15696364</id><snippet>{% for rank in campaign.rank_set %}
  &lt;p&gt;Characters for {{ rank }}:&lt;/p&gt;
  &lt;ul&gt;
    {% for character in rank.character_id %}
      &lt;li&gt;{{ character }}&lt;/li&gt;
    {% endfor %}
  &lt;/ul&gt;
{% endfor %}
</snippet></ROW><ROW><id>15696454</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.getcontext().prec = 100
&gt;&gt;&gt; a=decimal.Decimal(410241186411534352)**decimal.Decimal(.5)
&gt;&gt;&gt; print a
640500730.9999999929742468943411712910588335443486974564849183256021518032770726219326459594197730639
&gt;&gt;&gt; print a*a
410241186411534352.0000000000000000000000000000000000000000000000000000000000000000000000000000000000
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15696468</id><snippet>from os import mkdir, chdir
from shutil import move, copy, rmtree, copytree
from subprocess import call
</snippet></ROW><ROW><id>15696468</id><snippet>call</snippet></ROW><ROW><id>15696468</id><snippet>subprocess</snippet></ROW><ROW><id>15696468</id><snippet># To run the program foo that takes an option and two arguments
# Equivalent to "foo -d bar baz" directly in the shell
call(['foo', '-d', 'bar', 'baz'])
</snippet></ROW><ROW><id>15696468</id><snippet>call</snippet></ROW><ROW><id>15696507</id><snippet># first.py
def foo(): print("foo")
</snippet></ROW><ROW><id>15696507</id><snippet># second.py
import first
#...
first.foo()    # prints "foo"
</snippet></ROW><ROW><id>15696507</id><snippet># second.py
from first import foo
foo()          # prints "foo"
</snippet></ROW><ROW><id>15696631</id><snippet>_winreg.OpenKey</snippet></ROW><ROW><id>15696631</id><snippet>WindowsError</snippet></ROW><ROW><id>15696631</id><snippet>from _winreg import *
exists = True
aReg = ConnectRegistry(None,HKEY_CURRENT_USER)
try:
    aKey = OpenKey(aReg, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run", 0, KEY_WRITE)
except WindowsError:
    exists = False

try:
    if not exists:
        SetValueEx(aKey,registry_key_name,0, REG_SZ, r"" + folder + "\" + file_name) 
except EnvironmentError:                                          
    print "Encountered problems writing into the Registry..."

CloseKey(aKey)
CloseKey(aReg)
</snippet></ROW><ROW><id>15696705</id><snippet>dict</snippet></ROW><ROW><id>15696705</id><snippet>data</snippet></ROW><ROW><id>15696705</id><snippet>json.dumps</snippet></ROW><ROW><id>15696705</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; url = 'https://api.github.com/some/endpoint'
&gt;&gt;&gt; payload = {'some': 'data'}

&gt;&gt;&gt; r = requests.post(url, data=json.dumps(payload))
</snippet></ROW><ROW><id>15696924</id><snippet># encoding: utf-8</snippet></ROW><ROW><id>15696924</id><snippet>regex_a= re.compile(r"(?i)\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()&lt;&gt;]+|\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\))+(?:\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\)|[^\s`!()\[\]{};:'\".,&lt;&gt;?«»“”‘’]))")
regex_b = re.compile(r"""((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.‌​][a-z]{2,4}/)(?:[^\s()&lt;&gt;]+|(([^\s()&lt;&gt;]+|(([^\s()&lt;&gt;]+)))\*))+(?:(([^\s()&lt;&gt;]+|(‌​([^\s()&lt;&gt;]+)))\*)|[^\s`!()[]{};:`".,&lt;&gt;?«»“”‘’]))""", re.DOTALL)

regex_a.match("http://www.www.com/thisisatest") # returns a match object
#regex_b.match("http://www.www.com/thisisatest") # edit: actually, this just hangs...
</snippet></ROW><ROW><id>15697088</id><snippet>if submitted: return HTTPFound(location=...) else: return {}</snippet></ROW><ROW><id>15697088</id><snippet>request.response</snippet></ROW><ROW><id>15697088</id><snippet>@notfound_view_config(renderer='templates/notfound.pt')
def notfound(request):
    request.response.status = 404
    return {}
</snippet></ROW><ROW><id>15697094</id><snippet>random</snippet></ROW><ROW><id>15697094</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; teams = ['One team', 'Another team', 'A third team']
&gt;&gt;&gt; team1, team2 = random.sample(teams, 2)
&gt;&gt;&gt; print team1
'Another team'
&gt;&gt;&gt; print team2
'One team'
</snippet></ROW><ROW><id>15697368</id><snippet>n.addNode(3)</snippet></ROW><ROW><id>15697368</id><snippet>3 5 None
</snippet></ROW><ROW><id>15697368</id><snippet>2 3 None
</snippet></ROW><ROW><id>15697368</id><snippet>2 3 None
3 5 None
</snippet></ROW><ROW><id>15697368</id><snippet>n.addNode(2)</snippet></ROW><ROW><id>15697368</id><snippet>3 5 None</snippet></ROW><ROW><id>15697368</id><snippet>data</snippet></ROW><ROW><id>15697368</id><snippet>3</snippet></ROW><ROW><id>15697368</id><snippet>2 3 None</snippet></ROW><ROW><id>15697368</id><snippet>3 5 None</snippet></ROW><ROW><id>15697368</id><snippet>2 3 4
</snippet></ROW><ROW><id>15697368</id><snippet>2 3 4
3 5 8
</snippet></ROW><ROW><id>15697368</id><snippet>None 5 None</snippet></ROW><ROW><id>15697368</id><snippet>data</snippet></ROW><ROW><id>15697368</id><snippet>addNone</snippet></ROW><ROW><id>15697368</id><snippet>class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def addNode(self, data):
        if data &lt; self.data:
            if self.left is None:
                self.left = Node(data)
                self.printSubtree()
            else:
                self.left.addNode(data)  # recursively calling addNode method
        else:
            if self.right is None:
                self.right = Node(data)
                self.printSubtree()
            else:
                self.right.addNode(data)

    def printSubtree(self):
        if not self.left is None and not self.right is None:
            print self.left.data, self.data, self.right.data
        elif self.left is None and not self.right is None:
            print None, self.data, self.right.data
        elif not self.left is None and self.right is None:
            print self.left.data, self.data, None
        else:
            print None, self.data, None

if __name__ == '__main__':
    n = Node(5)
    n.printSubtree()
    n.addNode(3)
    n.addNode(2)
    n.addNode(8)
    n.addNode(4)
</snippet></ROW><ROW><id>15697474</id><snippet>counter</snippet></ROW><ROW><id>15697474</id><snippet>counter</snippet></ROW><ROW><id>15697474</id><snippet>counter</snippet></ROW><ROW><id>15697474</id><snippet>0</snippet></ROW><ROW><id>15697474</id><snippet>counter</snippet></ROW><ROW><id>15697475</id><snippet>def loop(x,y, *args):
    a = 0
    while (a &lt; x + 1):
            a = a + 1
            y(*args)

def echo(msg):
     print msg

loop(5,echo, "ok")
</snippet></ROW><ROW><id>15697685</id><snippet>import struct
Arg1 = struct.pack('B', 255)
</snippet></ROW><ROW><id>15697950</id><snippet>import numpy as np
values = [1,2,3,6,7,8]
freqs = [2,1,3,2,3,3]

hist, _ = np.histogram(values, bins=[1, 4, 7, 10], weights=freqs)
print hist
</snippet></ROW><ROW><id>15697950</id><snippet>[6 2 6]
</snippet></ROW><ROW><id>15698708</id><snippet>myRegexableString = "".join(x)
</snippet></ROW><ROW><id>15698720</id><snippet>zip</snippet></ROW><ROW><id>15698720</id><snippet>dict()</snippet></ROW><ROW><id>15698720</id><snippet>itertools</snippet></ROW><ROW><id>15698720</id><snippet>izip_longest</snippet></ROW><ROW><id>15698720</id><snippet>zip_longest</snippet></ROW><ROW><id>15698720</id><snippet>try:
    # Python 2
    from itertools import izip_longest
    zip_longest = izip_longest
except ImportError:
    # Python 3
    from itertools import zip_longest

from pprint import pprint


def main():
    maker =['Horsey', 'Ford', 'Overland', 'Scripps-Booth', 'FutureX', 'FutureY']
    year = ['1899', '1909', '1911', '1913', '20xx']
    model = ['Horseless', 'Model T', 'OctoAuto', 'Bi-Autogo']

    car_data = dict(zip(maker, zip(year, model)))
    car_data_longest = {mk: (yr, md) for mk, yr, md in zip_longest(maker, year, model)}

    pprint(car_data)
    pprint(car_data_longest)
</snippet></ROW><ROW><id>15698720</id><snippet>{'Ford': ('1909', 'Model T'),
 'Horsey': ('1899', 'Horseless'),
 'Overland': ('1911', 'OctoAuto'),
 'Scripps-Booth': ('1913', 'Bi-Autogo')}
{'Ford': ('1909', 'Model T'),
 'FutureX': ('20xx', None),
 'FutureY': (None, None),
 'Horsey': ('1899', 'Horseless'),
 'Overland': ('1911', 'OctoAuto'),
 'Scripps-Booth': ('1913', 'Bi-Autogo')}
</snippet></ROW><ROW><id>15698876</id><snippet>from unidecode import *

reader = open("a.txt",'w')
lines = reader.readlines()
def unite(lines):
    for line in lines:
        line = unidecode(line)
        print (line)
unite()
</snippet></ROW><ROW><id>15698876</id><snippet>from unidecode import *
import os

reader = open('a.txt','r')
temp = open('~a.txt', 'w')
for line in reader():
    line = unidecode(line)
    temp.write(line)
reader.close()
temp.close()

os.remove('a.txt')
os.rename('~a.txt', 'a.txt')
</snippet></ROW><ROW><id>15698975</id><snippet>import pylab as pl
pl.plot([0.2,0.3,0.4], [0.1,0.2,0.3], label='series name')
pl.xlabel('x label')
pl.ylabel('y label')
pl.ylim([0.0, 1.0])
pl.xlim([0.0, 1.0])
pl.title('Title')
pl.legend(loc="lower left")
pl.savefig('output.jpg')
pl.show()
</snippet></ROW><ROW><id>15698984</id><snippet>move_lines': fields.many2many('stock.move', 'mrp_production_move_ids', 'production_id', 'move_id', 'Products to Consume',
            domain=[('state','not in', ('done', 'cancel'))], readonly=True, states={'draft':[('readonly',False)]}),
</snippet></ROW><ROW><id>15699181</id><snippet>Mat</snippet></ROW><ROW><id>15699181</id><snippet>#include &lt;cv.h&gt;
#include &lt;highgui.h&gt;

int main(int argc, char* argv[])
{
    cv::Mat img = cv::imread(argv[1]);
    std::cout &lt;&lt; "Original image size: " &lt;&lt; img.size() &lt;&lt; std::endl;

    // Convert RGB Mat to GRAY
    cv::Mat gray;
    cv::cvtColor(img, gray, CV_BGR2GRAY);
    std::cout &lt;&lt; "Gray image size: " &lt;&lt; gray.size() &lt;&lt; std::endl;

    // Erode image to remove unwanted noises
    int erosion_size = 5;
    cv::Mat element = cv::getStructuringElement(cv::MORPH_CROSS,
                                       cv::Size(2 * erosion_size + 1, 2 * erosion_size + 1),
                                       cv::Point(erosion_size, erosion_size) );
    cv::erode(gray, gray, element);

    // Scan the image searching for points and store them in a vector
    std::vector&lt;cv::Point&gt; points;
    cv::Mat_&lt;uchar&gt;::iterator it = gray.begin&lt;uchar&gt;();
    cv::Mat_&lt;uchar&gt;::iterator end = gray.end&lt;uchar&gt;();
    for (; it != end; it++)
    {
        if (*it) 
            points.push_back(it.pos()); 
    }

    // From the points, figure out the size of the ROI
    int left, right, top, bottom;
    for (int i = 0; i &lt; points.size(); i++)
    {
        if (i == 0) // initialize corner values
        {
            left = right = points[i].x;
            top = bottom = points[i].y;
        }

        if (points[i].x &lt; left)
            left = points[i].x;

        if (points[i].x &gt; right)
            right = points[i].x;

        if (points[i].y &lt; top)
            top = points[i].y;

        if (points[i].y &gt; bottom)
            bottom = points[i].y;
    }
    std::vector&lt;cv::Point&gt; box_points;
    box_points.push_back(cv::Point(left, top));
    box_points.push_back(cv::Point(left, bottom));
    box_points.push_back(cv::Point(right, bottom));
    box_points.push_back(cv::Point(right, top));

    // Compute minimal bounding box for the ROI
    // Note: for some unknown reason, width/height of the box are switched.
    cv::RotatedRect box = cv::minAreaRect(cv::Mat(box_points));
    std::cout &lt;&lt; "box w:" &lt;&lt; box.size.width &lt;&lt; " h:" &lt;&lt; box.size.height &lt;&lt; std::endl;

    // Draw bounding box in the original image (debugging purposes)
    //cv::Point2f vertices[4];
    //box.points(vertices);
    //for (int i = 0; i &lt; 4; ++i)
    //{
    //    cv::line(img, vertices[i], vertices[(i + 1) % 4], cv::Scalar(0, 255, 0), 1, CV_AA);
    //}
    //cv::imshow("Original", img);
    //cv::waitKey(0);

    // Set the ROI to the area defined by the box
    // Note: because the width/height of the box are switched, 
    // they were switched manually in the code below:
    cv::Rect roi;
    roi.x = box.center.x - (box.size.height / 2);
    roi.y = box.center.y - (box.size.width / 2);
    roi.width = box.size.height;
    roi.height = box.size.width;
    std::cout &lt;&lt; "roi @ " &lt;&lt; roi.x &lt;&lt; "," &lt;&lt; roi.y &lt;&lt; " " &lt;&lt; roi.width &lt;&lt; "x" &lt;&lt; roi.height &lt;&lt; std::endl;

    // Crop the original image to the defined ROI
    cv::Mat crop = img(roi);

    // Display cropped ROI
    cv::imshow("Cropped ROI", crop);
    cv::waitKey(0);

    return 0;
}
</snippet></ROW><ROW><id>15699279</id><snippet>result = [[my_function(x, y)
           for x in arange(0.3, 10.7, 2.2)]
          for y in arange(-3.2, 5.4, 0.7)]
</snippet></ROW><ROW><id>15699279</id><snippet>enumerate(arange(...))</snippet></ROW><ROW><id>15700051</id><snippet>def on_change_code_id(self, cr, uid, ids, code_id, context=None):

    list_lines = []
    result = {'value': {}}
    req_obj = self.pool.get('code.requisition')

    data = req_obj.browse(cr, uid, code_id)

    for line in data.line_ids:
        list_lines.append({'product_id': line.product_id.id or False,
                           'product_qty': line.product_qty or 0,
                           'name': line.product_id.name,
                           'product_uom': line.product_uom_id.id,
                           'date_planned': time.strftime('%Y-%m-%d')
                        })

    result['value']['order_line'] = list_lines

    return result
</snippet></ROW><ROW><id>15700053</id><snippet>logging</snippet></ROW><ROW><id>15700053</id><snippet>logging.py</snippet></ROW><ROW><id>15700787</id><snippet>''.join(a.split('\n'))
</snippet></ROW><ROW><id>15701244</id><snippet>Mock</snippet></ROW><ROW><id>15701244</id><snippet>patch</snippet></ROW><ROW><id>15701244</id><snippet>Mock</snippet></ROW><ROW><id>15701244</id><snippet>@patch('python.path.to.decorator', new_callable=PropertyMock)
def my_test(self, decorator_mock):
    # your test code
</snippet></ROW><ROW><id>15701244</id><snippet>patch</snippet></ROW><ROW><id>15701244</id><snippet>Mock</snippet></ROW><ROW><id>15701244</id><snippet>new_callable=PropertyMock</snippet></ROW><ROW><id>15701244</id><snippet>@patch('python.path.to.decorator', lambda: func: func)
def my_test(self):
    # your test code
</snippet></ROW><ROW><id>15701244</id><snippet>wrapped</snippet></ROW><ROW><id>15701557</id><snippet>if settings.DEBUG:
    urlpatterns += patterns('',
        url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {
            'document_root': settings.MEDIA_ROOT,
            'show_indexes': True,
        }),
   )
</snippet></ROW><ROW><id>15701844</id><snippet>Set-Cookie</snippet></ROW><ROW><id>15701844</id><snippet>Set-Cookie:session=&lt;encoded session&gt;; Path=/; HttpOnly
</snippet></ROW><ROW><id>15701844</id><snippet>-H</snippet></ROW><ROW><id>15701844</id><snippet>curl --cookie "session=&lt;encoded session&gt;" http://localhost:5000/address/
</snippet></ROW><ROW><id>15701844</id><snippet>Set-Cookie</snippet></ROW><ROW><id>15701844</id><snippet>-c &lt;file&gt;</snippet></ROW><ROW><id>15701844</id><snippet>-b file</snippet></ROW><ROW><id>15701870</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Foo = namedtuple('Foo', 'name id') # this represents your class with id attribute
&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; b = [Foo(name='o', id=2), Foo(name='p', id=1), Foo(name='q', id=3), Foo(name='r', id=5), Foo(name='s', id=4)]
&gt;&gt;&gt; sorted(b, key=lambda x: a.index(x.id))
[Foo(name='p', id=1), Foo(name='o', id=2), Foo(name='q', id=3), Foo(name='s', id=4), Foo(name='r', id=5)]
</snippet></ROW><ROW><id>15701883</id><snippet>==</snippet></ROW><ROW><id>15701883</id><snippet>__eq__()</snippet></ROW><ROW><id>15701883</id><snippet>False</snippet></ROW><ROW><id>15701883</id><snippet>True</snippet></ROW><ROW><id>15701883</id><snippet>if</snippet></ROW><ROW><id>15701883</id><snippet>bool()</snippet></ROW><ROW><id>15701883</id><snippet>ColumnOperators</snippet></ROW><ROW><id>15702044</id><snippet>binascii.unhexlify()</snippet></ROW><ROW><id>15702044</id><snippet>import binascii

binary = binascii.unhexlify(text)
</snippet></ROW><ROW><id>15702044</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>15702044</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binary = '\x5A\x05\x70\x5D\xC2\x5C\xA1\x51\x23\xC8\xE4\x75\x0B\x80\xD0\xA9'
&gt;&gt;&gt; text = '5A05705DC25CA15123C8E4750B80D0A9'
&gt;&gt;&gt; binary == binascii.unhexlify(text)
True
&gt;&gt;&gt; text == binascii.hexlify(binary).upper()
True
</snippet></ROW><ROW><id>15702044</id><snippet>hexlify()</snippet></ROW><ROW><id>15702044</id><snippet>.upper()</snippet></ROW><ROW><id>15702208</id><snippet>linewidths</snippet></ROW><ROW><id>15702208</id><snippet>plt.quiver</snippet></ROW><ROW><id>15702208</id><snippet>widths = np.linspace(0, 2, X.size)
plt.quiver(X, Y, cos(deg), sin(deg), linewidths=widths)
</snippet></ROW><ROW><id>15702208</id><snippet>import matplotlib.pyplot as plt
import numpy as np
sin = np.sin
cos = np.cos

# http://stackoverflow.com/questions/6370742/#6372413
xmax = 4.0
xmin = -xmax
D = 20
ymax = 4.0
ymin = -ymax
x = np.linspace(xmin, xmax, D)
y = np.linspace(ymin, ymax, D)
X, Y = np.meshgrid(x, y)
# plots the vector field for Y'=Y**3-3*Y-X
deg = np.arctan(Y ** 3 - 3 * Y - X)
widths = np.linspace(0, 2, X.size)
plt.quiver(X, Y, cos(deg), sin(deg), linewidths=widths)
plt.show()
</snippet></ROW><ROW><id>15702215</id><snippet>regex.findall(myRegexableString)</snippet></ROW><ROW><id>15702215</id><snippet>regex = re.compile(r'\+CMTI: "SM",(\d+)')

def poll(x):
    myRegexableString = "".join(x)
    print "Printing myRegexableString"
    pprint(myRegexableString)
    lst = regex.findall(myRegexableString)
</snippet></ROW><ROW><id>15702215</id><snippet>re.compile()</snippet></ROW><ROW><id>15702215</id><snippet>myRegexableString</snippet></ROW><ROW><id>15702215</id><snippet>myRegexableString</snippet></ROW><ROW><id>15702263</id><snippet>qry = "Insert into prints set print = '{0}'".format(printBin)
</snippet></ROW><ROW><id>15702263</id><snippet>qry = "Insert into prints set print = '0x{0}'".format(printBin)
</snippet></ROW><ROW><id>15702292</id><snippet>"^/(?P&lt;path&gt;(?!special/).*)$","http://www.b.com/%(path)s"
</snippet></ROW><ROW><id>15702292</id><snippet>(?!...)</snippet></ROW><ROW><id>15702292</id><snippet>(?!...)</snippet></ROW><ROW><id>15702292</id><snippet>...</snippet></ROW><ROW><id>15702292</id><snippet>Isaac (?!Asimov)</snippet></ROW><ROW><id>15702292</id><snippet>'Isaac '</snippet></ROW><ROW><id>15702292</id><snippet>'Asimov'</snippet></ROW><ROW><id>15702292</id><snippet>/</snippet></ROW><ROW><id>15702292</id><snippet>special/</snippet></ROW><ROW><id>15702292</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(r"^/(?P&lt;path&gt;(?!special/).*)$", '/special/path') is None
True
&gt;&gt;&gt; re.search(r"^/(?P&lt;path&gt;(?!special/).*)$", '/not-so-special/path').groupdict()
{'path': 'not-so-special/path'}
</snippet></ROW><ROW><id>15702456</id><snippet>mean()</snippet></ROW><ROW><id>15702456</id><snippet>col = A.getcol(colindex)
</snippet></ROW><ROW><id>15702456</id><snippet>N = col.shape[0]
sqr = col.copy() # take a copy of the col
sqr.data **= 2 # square the data, i.e. just the non-zero data
variance = sqr.sum()/N - col.mean()**2
</snippet></ROW><ROW><id>15702883</id><snippet>In [78]: anchor = soup.findAll(text=re.compile("Assi"))[0]
In [77]: ' '.join(anchor.find_next('td').stripped_strings)
Out[77]: u'Ishida Co., Ltd. (Kyoto, JP )'
</snippet></ROW><ROW><id>15702883</id><snippet>import bs4 as bs
import urllib2
import re

url = 'http://patft.uspto.gov//netacgi/nph-Parser?Sect1=PTO2&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2FPTO%2Fsearch-bool.html&amp;r=2&amp;f=G&amp;l=50&amp;co1=AND&amp;d=PTXT&amp;s1=%22X+ray%22.ABTX.&amp;s2=detect.ABTX.&amp;OS=ABST/%22X+ray%22+AND+ABST/detect&amp;RS=ABST/%22X+ray%22+AND+ABST/detect'
soup = bs.BeautifulSoup(urllib2.urlopen(url).read())

anchor = soup.findAll(text=re.compile("Assi"))[0]
assignee = ' '.join(anchor.find_next('td').stripped_strings)
print(assignee)
</snippet></ROW><ROW><id>15702883</id><snippet>Ishida Co., Ltd. (Kyoto, JP )
</snippet></ROW><ROW><id>15703295</id><snippet>import sys
import time
import random

ESC = "\x1b"

def home():
    sys.stdout.write(ESC + '[0;0H')
    sys.stdout.flush()

def cls():
    sys.stdout.write(ESC + '[2J')
    sys.stdout.flush()

def print_status():
    w = 8
    print '+' + '-'*w + '+'
    for row in range(3):
        fmt = '|%%%dd |' % (w - 1)
        print fmt % random.randint(0, 1000)
        print '+' + '-'*w + '+'
    sys.stdout.flush()

if __name__ == "__main__":
    cls()
    for k in range(16, 0, -1):
        home()  # or use cls()
        print_status()
        time.sleep(0.5)
</snippet></ROW><ROW><id>15703468</id><snippet>mul = lambda lst, val: [i * val for i in lst]
add = lambda lst, val1, val2: [i + val1 + val2 for i in lst]

def functions(lst, *fns):
    for fn, args in fns:
        lst = fn(lst, *args)
    return lst

lst = [1, 2, 3, 4, 5, 6]
result = functions(lst, [mul, (10,)], [add, (10, 100)])
print result
</snippet></ROW><ROW><id>15703468</id><snippet>[120, 130, 140, 150, 160, 170]
</snippet></ROW><ROW><id>15703468</id><snippet>mul = lambda i, val: i * val
add = lambda i, val1, val2: i + val1 + val2

def functions(lst, *fns):
    for fn, args in fns:
        lst = [fn(i, *args) for i in lst]
    return lst
</snippet></ROW><ROW><id>15703497</id><snippet>for</snippet></ROW><ROW><id>15703497</id><snippet>else:</snippet></ROW><ROW><id>15703497</id><snippet>for line in open('Gin.txt'):    #Will be corrected later..
    if Q.lower() in line.lower():
        print line 
        break
else:
    print "Found nothing. Did you spell it correct?"
</snippet></ROW><ROW><id>15703497</id><snippet>break</snippet></ROW><ROW><id>15703497</id><snippet>for</snippet></ROW><ROW><id>15703497</id><snippet>else:</snippet></ROW><ROW><id>15703497</id><snippet>found = False
for line in open('Gin.txt'):    #Will be corrected later..
    if Q.lower() in line.lower():
        found = True
        print line 

if not found:
    print "Found nothing. Did you spell it correct?"
</snippet></ROW><ROW><id>15703524</id><snippet>from rpy2.robjects.packages import importr
e1071 = importr('e1071')

from rpy2.robjects.conversion import py2ri

# your model's data are in 'm_data'
# here conversion is happening
r_m_data = py2ri(m_data)

for test_data in many_test_data:
    # r_m_data is already a pointer to an R data structure
    # (it was converted above - no further copying is made)
    res = e1071.knn(r_m_data, test_data)
</snippet></ROW><ROW><id>15703543</id><snippet>response.body_file</snippet></ROW><ROW><id>15703543</id><snippet>barcode.writer import ImageWriter
ean = barcode.get_barcode('ean', '123456789102', writer=ImageWriter())

response = request.response
response.content_type = 'image/png'
ean.write(response.body_file)
</snippet></ROW><ROW><id>15703555</id><snippet>head</snippet></ROW><ROW><id>15703555</id><snippet>tail</snippet></ROW><ROW><id>15703555</id><snippet>next</snippet></ROW><ROW><id>15703555</id><snippet>previous</snippet></ROW><ROW><id>15703631</id><snippet>list1 = [1,2,3,4,5]
list2 = ["one", "two", "three", "four", "five"]

print ''.join([str(a) + b for a,b in zip(list1,list2)])
</snippet></ROW><ROW><id>15703647</id><snippet>df[:-m]
</snippet></ROW><ROW><id>15703647</id><snippet>drop</snippet></ROW><ROW><id>15703647</id><snippet>df.drop(df.index[3:5])
</snippet></ROW><ROW><id>15703792</id><snippet>cursor.execute("INSERT INTO pattent VALUES (?, ?, ?, ?, ?, ?)",
    (PattentNumber, PattentName, PattentInventors, PattentCompany, PattentFiledtime, PattentAbstract))
</snippet></ROW><ROW><id>15703882</id><snippet>QtGui.QApplication().desktop().availableGeometry()</snippet></ROW><ROW><id>15703882</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.pushButtonClose = QtGui.QPushButton(self)
        self.pushButtonClose.setText("Close")
        self.pushButtonClose.clicked.connect(self.on_pushButtonClose_clicked)

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.pushButtonClose)

        titleBarHeight = self.style().pixelMetric(
            QtGui.QStyle.PM_TitleBarHeight,
            QtGui.QStyleOptionTitleBar(),
            self
        )

        geometry = app.desktop().availableGeometry()
        geometry.setHeight(geometry.height() - (titleBarHeight*2))

        self.setGeometry(geometry)

    @QtCore.pyqtSlot()
    def on_pushButtonClose_clicked(self):
        QtGui.QApplication.instance().quit()

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15704058</id><snippet>list_of_lists</snippet></ROW><ROW><id>15704058</id><snippet>images</snippet></ROW><ROW><id>15704058</id><snippet>{% for location, rating, images in list_of_lists %}

...
&lt;img&gt;{{ images.0 }}&lt;/img&gt;
...

{% endfor %}
</snippet></ROW><ROW><id>15704300</id><snippet>for</snippet></ROW><ROW><id>15704300</id><snippet>x[i]</snippet></ROW><ROW><id>15704334</id><snippet>w</snippet></ROW><ROW><id>15704334</id><snippet>import multiprocessing as mp
import tables as pt


num_arrays = 100
num_processes = mp.cpu_count()
num_simulations = 1000
sentinel = None


def Simulation(inqueue, output):
    for ii in iter(inqueue.get, sentinel):
        output.put(('createGroup', ('/', 'A%s' % ii)))
        for i in range(num_arrays):
            output.put(('createArray', ('/A%s' % ii, 'B%s' % i, [ii, i])))


def handle_output(output):
    hdf = pt.openFile('simulation.h5', mode='w')
    while True:
        args = output.get()
        if args:
            method, args = args
            getattr(hdf, method)(*args)
        else:
            break
    hdf.close()

if __name__ == '__main__':
    output = mp.Queue()
    inqueue = mp.Queue()
    jobs = []
    proc = mp.Process(target=handle_output, args=(output, ))
    proc.start()
    for i in range(num_processes):
        p = mp.Process(target=Simulation, args=(inqueue, output))
        jobs.append(p)
        p.start()
    for i in range(num_simulations):
        inqueue.put(i)
    for i in range(num_processes):
        # Send the sentinal to tell Simulation to end
        inqueue.put(sentinel)
    for p in jobs:
        p.join()
    output.put(None)
    proc.join()
</snippet></ROW><ROW><id>15704334</id><snippet>mp.Pool</snippet></ROW><ROW><id>15704334</id><snippet>import multiprocessing as mp
import tables as pt


num_arrays = 100
num_processes = mp.cpu_count()
num_simulations = 1000


def Simulation(ii):
    result = []
    result.append(('createGroup', ('/', 'A%s' % ii)))
    for i in range(num_arrays):
        result.append(('createArray', ('/A%s' % ii, 'B%s' % i, [ii, i])))
    return result


def handle_output(result):
    hdf = pt.openFile('simulation.h5', mode='a')
    for args in result:
        method, args = args
        getattr(hdf, method)(*args)
    hdf.close()


if __name__ == '__main__':
    # clear the file
    hdf = pt.openFile('simulation.h5', mode='w')
    hdf.close()
    pool = mp.Pool(num_processes)
    for i in range(num_simulations):
        pool.apply_async(Simulation, (i, ), callback=handle_output)
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>15704334</id><snippet>output.put</snippet></ROW><ROW><id>15704334</id><snippet>handle_output</snippet></ROW><ROW><id>15704334</id><snippet>handle_output</snippet></ROW><ROW><id>15704334</id><snippet>args</snippet></ROW><ROW><id>15704334</id><snippet>output</snippet></ROW><ROW><id>15704334</id><snippet>Simulation</snippet></ROW><ROW><id>15704334</id><snippet>args</snippet></ROW><ROW><id>15704334</id><snippet>result</snippet></ROW><ROW><id>15704334</id><snippet>result</snippet></ROW><ROW><id>15704334</id><snippet>handle_output</snippet></ROW><ROW><id>15704334</id><snippet>Simulation</snippet></ROW><ROW><id>15704334</id><snippet>Simulation</snippet></ROW><ROW><id>15704334</id><snippet>simulation.h5</snippet></ROW><ROW><id>15704426</id><snippet>user_config_files</snippet></ROW><ROW><id>15704426</id><snippet>config_files = [
    # Linux users will prefer this
    "~/.noserc",
    # Windows users will prefer this
    "~/nose.cfg"
    ]

...

def user_config_files():
    """Return path to any existing user config files
    """
    return filter(os.path.exists,
                  map(os.path.expanduser, config_files))
</snippet></ROW><ROW><id>15704426</id><snippet>all_config_files</snippet></ROW><ROW><id>15704426</id><snippet>user_config_files</snippet></ROW><ROW><id>15704426</id><snippet>def all_config_files():
    """Return path to any existing user config files, plus any setup.cfg
    in the current working directory.
    """
    user = user_config_files()
    if os.path.exists('setup.cfg'):
        return user + ['setup.cfg']
    return user
</snippet></ROW><ROW><id>15704532</id><snippet>{% for x in List %}
    {% set User = List[x] %}
</snippet></ROW><ROW><id>15704532</id><snippet>{% for x in List %}
    {% set User = x %}
</snippet></ROW><ROW><id>15704659</id><snippet>In [11]: df = pd.DataFrame([{"a": 1}, {"a": 3, "b": 2}])

In [12]: df['c'] = np.array(['foo',np.nan])

In [13]: df
Out[13]: 
   a   b    c
0  1 NaN  foo
1  3   2  nan
</snippet></ROW><ROW><id>15704659</id><snippet>In [16]: df['c'] = np.nan

In [17]: df.ix[0,'c'] = 1

In [18]: df
Out[18]: 
   a   b   c
0  1 NaN   1
1  3   2 NaN
</snippet></ROW><ROW><id>15704739</id><snippet>state = list(self._touch_strip_state)
</snippet></ROW><ROW><id>15704739</id><snippet>x[i:j]
</snippet></ROW><ROW><id>15704739</id><snippet>x</snippet></ROW><ROW><id>15704739</id><snippet>i</snippet></ROW><ROW><id>15704739</id><snippet>j</snippet></ROW><ROW><id>15704739</id><snippet>state[position:position + 3] = 4 * len(state[position:position + 3])
</snippet></ROW><ROW><id>15704739</id><snippet>state</snippet></ROW><ROW><id>15704739</id><snippet>position</snippet></ROW><ROW><id>15704739</id><snippet>position + 3</snippet></ROW><ROW><id>15704739</id><snippet>state[position:position + 3]</snippet></ROW><ROW><id>15704739</id><snippet>len(state[position:position + 3])</snippet></ROW><ROW><id>15704739</id><snippet>state[position:position + 3] = 12
</snippet></ROW><ROW><id>15704889</id><snippet>type(field).__name__  # get name of the field class, instead of field.get_internal_type()
</snippet></ROW><ROW><id>15704889</id><snippet>EmailField</snippet></ROW><ROW><id>15704889</id><snippet>URLField</snippet></ROW><ROW><id>15704889</id><snippet>Charfield</snippet></ROW><ROW><id>15704983</id><snippet>[" ".join(n.split(", ")[::-1]) for n in namelist]
</snippet></ROW><ROW><id>15704983</id><snippet>namelist = ["Robinson, David", "Roberts, Tim"]
# split each item into a list, around the commas:
[n.split(", ") for n in namelist]
# [['Robinson', 'David'], ['Roberts', 'Tim']]

# reverse the split up list:
[n.split(", ")[::-1] for n in namelist]
# [['David', 'Robinson'], ['Tim', 'Roberts']]

# join it back together with a space:
[" ".join(n.split(", ")[::-1]) for n in namelist]
# ['David Robinson', 'Tim Roberts']
</snippet></ROW><ROW><id>15705067</id><snippet>def run_test(path=None,check_func=None,*args,**kwargs):
    with app.test_request_context(path,*args,**kwargs):
        try:
            data=app.dispatch_request() 
            if check_func is not None:
                 check_func()
            else:
                print data
        except Exception as e:
            print app.handle_exception(e)

run_test('/')
run_test('/other')

def current_test(data):
     assert 'has some content' in data
run_test('/should_be_checked',check_func=current_test)
</snippet></ROW><ROW><id>15705067</id><snippet>def wsgi_app(self, environ):
    with self.request_context(environ):
        try:
            response = self.full_dispatch_request()
        except Exception, e:
            response = self.make_response(self.handle_exception(e))
        return response(environ, start_response)
</snippet></ROW><ROW><id>15705067</id><snippet>with app.test_request_context():
    with app.test_client() as client:
        resp = client.get('/')
        #and if you need content of response: print resp.data
</snippet></ROW><ROW><id>15705352</id><snippet>        actualrules = ['Hello World', 'Goodbye Universe',
                   "Let's go to the mall"]
</snippet></ROW><ROW><id>15705352</id><snippet>import sys
import wx


class TestFrame(wx.Frame):
    def __init__(self, *args, **kwargs):
        super(TestFrame, self).__init__(*args, **kwargs)

        actualrules = ['Hello World', 'Goodbye Universe',
                       "Let's go to the mall"]

        panel = wx.Panel(self)
        self.list = wx.ListCtrl(panel, size=(1000, 1000), style=wx.LC_REPORT)
        self.list.InsertColumn(0, 'Rules')
        for i in actualrules:
            self.list.InsertStringItem(sys.maxint, i)

        pSizer = wx.BoxSizer(wx.VERTICAL)
        pSizer.Add(self.list, 0, wx.ALL, 5)
        panel.SetSizer(pSizer)

        vSizer = wx.BoxSizer(wx.VERTICAL)
        vSizer.Add(panel, 1, wx.EXPAND)
        self.SetSizer(vSizer)


if __name__ == '__main__':
    wxapp = wx.App(False)
    testFrame = TestFrame(None)
    testFrame.Show()
    wxapp.MainLoop()
</snippet></ROW><ROW><id>15705622</id><snippet>collections.Counter()</snippet></ROW><ROW><id>15705622</id><snippet>x</snippet></ROW><ROW><id>15705622</id><snippet>y</snippet></ROW><ROW><id>15705622</id><snippet>y</snippet></ROW><ROW><id>15705622</id><snippet>x</snippet></ROW><ROW><id>15705622</id><snippet>from collections import Counter

def checkYinX(y, x):
    return not (Counter(y) - Counter(x))
</snippet></ROW><ROW><id>15705622</id><snippet>False</snippet></ROW><ROW><id>15705622</id><snippet>not</snippet></ROW><ROW><id>15705622</id><snippet>True</snippet></ROW><ROW><id>15705622</id><snippet>&gt;&gt;&gt; x = "dsjcosnag"
&gt;&gt;&gt; y = "dog"
&gt;&gt;&gt; print(checkYinX(y,x))
True
&gt;&gt;&gt; print(checkYinX('cat',x))
False
</snippet></ROW><ROW><id>15705778</id><snippet>def add_auto_route(config,name, pattern, **kw):
    config.add_route(name, pattern, **kw)
    if not pattern.endswith('/'):
        config.add_route(name + '_auto', pattern + '/')
        def redirector(request):
            return HTTPMovedPermanently(request.route_url(name))
        config.add_view(redirector, route_name=name + '_auto')
</snippet></ROW><ROW><id>15705778</id><snippet>add_auto_route(config,'events','/events')
</snippet></ROW><ROW><id>15705778</id><snippet>config.add_route('events','/events')</snippet></ROW><ROW><id>15705778</id><snippet>_auto</snippet></ROW><ROW><id>15705778</id><snippet>/abc/{def}?m=aasa</snippet></ROW><ROW><id>15705778</id><snippet>add_auto_route()</snippet></ROW><ROW><id>15705778</id><snippet>redirector</snippet></ROW><ROW><id>15705778</id><snippet>request.matchdict</snippet></ROW><ROW><id>15705778</id><snippet>def add_auto_route(config,name, pattern, **kw):
    config.add_route(name, pattern, **kw)
    if not pattern.endswith('/'):
        config.add_route(name + '_auto', pattern + '/')
        def redirector(request):
            return HTTPMovedPermanently(request.route_url(name,_query=request.GET,**request.matchdict))
        config.add_view(redirector, route_name=name + '_auto')
</snippet></ROW><ROW><id>15705778</id><snippet>_query=**request.GET</snippet></ROW><ROW><id>15705958</id><snippet>In [1]: df
Out[1]:
    Sp  Mt Value  count
0  MM1  S1     a      3
1  MM1  S1     n      2
2  MM1  S3    cb      5
3  MM2  S3    mk      8
4  MM2  S4    bg     10
5  MM2  S4   dgd      1
6  MM4  S2    rd      2
7  MM4  S2    cb      2
8  MM4  S2   uyi      7

In [2]: df.groupby(['Mt'], sort=False)['count'].max()
Out[2]:
Mt
S1     3
S3     8
S4    10
S2     7
Name: count
</snippet></ROW><ROW><id>15705958</id><snippet>In [3]: idx = df.groupby(['Mt'])['count'].transform(max) == df['count']

In [4]: df[idx]
Out[4]:
    Sp  Mt Value  count
0  MM1  S1     a      3
3  MM2  S3    mk      8
4  MM2  S4    bg     10
8  MM4  S2   uyi      7
</snippet></ROW><ROW><id>15705958</id><snippet>In [5]: df['count_max'] = df.groupby(['Mt'])['count'].transform(max)

In [6]: df
Out[6]:
    Sp  Mt Value  count  count_max
0  MM1  S1     a      3          3
1  MM1  S1     n      2          3
2  MM1  S3    cb      5          8
3  MM2  S3    mk      8          8
4  MM2  S4    bg     10         10
5  MM2  S4   dgd      1         10
6  MM4  S2    rd      2          7
7  MM4  S2    cb      2          7
8  MM4  S2   uyi      7          7
</snippet></ROW><ROW><id>15705978</id><snippet>192.168.40.28</snippet></ROW><ROW><id>15705978</id><snippet>3050</snippet></ROW><ROW><id>15705978</id><snippet>3050</snippet></ROW><ROW><id>15705978</id><snippet>RemoteServicePort</snippet></ROW><ROW><id>15705978</id><snippet>firebird.conf</snippet></ROW><ROW><id>15705978</id><snippet>connect</snippet></ROW><ROW><id>15706171</id><snippet>numpy</snippet></ROW><ROW><id>15706171</id><snippet>import numpy as np
a = np.array([[0,1], [0,2], [0,3], [0,4], [1,5], [1,6], [1,7], [2,8], [2,9]])
_,i = np.unique(a[:,0], return_index=True)

b = np.delete(a, i, axis=0)
</snippet></ROW><ROW><id>15706171</id><snippet>m = np.ones(len(a), dtype=bool)
m[i] = False
b = a[m]
</snippet></ROW><ROW><id>15706171</id><snippet>In [225]: def rem_del(a):
   .....:     _,i = np.unique(a[:,0], return_index=True)
   .....:     return np.delete(a, i, axis = 0)
   .....: 

In [226]: def rem_mask(a):
   .....:     _,i = np.unique(a[:,0], return_index=True)
   .....:     m = np.ones(len(a), dtype=bool)
   .....:     m[i] = False
   .....:     return a[m]
   .....: 

In [227]: timeit rem_del(a)
10000 loops, best of 3: 181 us per loop

In [228]: timeit rem_mask(a)
10000 loops, best of 3: 59 us per loop
</snippet></ROW><ROW><id>15706229</id><snippet>*expression</snippet></ROW><ROW><id>15706229</id><snippet>expression</snippet></ROW><ROW><id>15706229</id><snippet>zip(x, y)</snippet></ROW><ROW><id>15706229</id><snippet>zip()</snippet></ROW><ROW><id>15706229</id><snippet>zip(*[(i*10, i*12) for i in xrange(4)])</snippet></ROW><ROW><id>15706229</id><snippet>[(i*10, i*12) for i in xrange(4)]</snippet></ROW><ROW><id>15706229</id><snippet>range()</snippet></ROW><ROW><id>15706229</id><snippet>[(0, 0), (10, 12), (20, 24), (30, 36)]</snippet></ROW><ROW><id>15706229</id><snippet>zip(*...)</snippet></ROW><ROW><id>15706229</id><snippet>zip()</snippet></ROW><ROW><id>15706229</id><snippet>zip()</snippet></ROW><ROW><id>15706229</id><snippet>zip()</snippet></ROW><ROW><id>15706229</id><snippet>rr, tt = tuple(range(0, 40, 10)), tuple(range(0, 48, 12))
</snippet></ROW><ROW><id>15706301</id><snippet>pdf_path = "../pdf/file1.pdf"
</snippet></ROW><ROW><id>15706301</id><snippet>start</snippet></ROW><ROW><id>15706301</id><snippet>os.system</snippet></ROW><ROW><id>15706301</id><snippet>import os

os.system("start " + pdf_path)
</snippet></ROW><ROW><id>15706407</id><snippet>'World'</snippet></ROW><ROW><id>15706407</id><snippet>where</snippet></ROW><ROW><id>15706407</id><snippet>max</snippet></ROW><ROW><id>15706407</id><snippet>In [11]: d.name.where(d.name == 'World', np.nan)
Out[11]: 
0      NaN
1    World
Name: name, dtype: object

In [12]: d.name.where(d.name == 'World', np.nan).max()
Out[12]: 'World'
</snippet></ROW><ROW><id>15706589</id><snippet>with open('rules_test1Fold0w4_sample00ll1.dat') as fileobj:
    lines = fileobj.readlines()
actualrules=''
for index in sortrule:
    print lines[index]
</snippet></ROW><ROW><id>15706900</id><snippet>dE / dw_j = dE / dy * dy / dw_j
dE / du_jk = dE / dz_j * dz_j / du_jk 
           = dE / dy * dy / dz_j * dz_j / du_jk
</snippet></ROW><ROW><id>15706900</id><snippet>dE / dw_1j = dE / dy_1 * dy_1 / dw_1j
dE / dw_2j = dE / dy_2 * dy_2 / dw_2j
dE / du_jk = dE / dz_j * dz_j / du_jk
           = dE / dy_1 * dy_1 / dz_j * dz_j / du_jk + dE / dy_2 * dy_2 / dz_j * dz_j / du_jk
</snippet></ROW><ROW><id>15706942</id><snippet>self.aRadioButton = Radiobutton(top, text="Blue",variable = v, value = 0, command=lambda: top.configure(bg="Blue"))
self.aRadioButton = Radiobutton(top, text="Red",variable = v, value = 1, command=lambda: top.configure(bg="Red"))
</snippet></ROW><ROW><id>15706942</id><snippet>v</snippet></ROW><ROW><id>15707034</id><snippet>.speed</snippet></ROW><ROW><id>15707034</id><snippet>class Car(object):
    speed = 0

    def __init__(self):
        self.speed = 100
</snippet></ROW><ROW><id>15707034</id><snippet>property</snippet></ROW><ROW><id>15707075</id><snippet>os.seteuid()</snippet></ROW><ROW><id>15707075</id><snippet>os.setuid()</snippet></ROW><ROW><id>15707075</id><snippet>import os

open('file1', 'wc')

# switch to userid 501
os.seteuid(501)
open('file2', 'wc')

# switch back to root
os.seteuid(0)
open('file3', 'wc')
</snippet></ROW><ROW><id>15707075</id><snippet>file1</snippet></ROW><ROW><id>15707075</id><snippet>file3</snippet></ROW><ROW><id>15707075</id><snippet>file2</snippet></ROW><ROW><id>15707075</id><snippet>sudo</snippet></ROW><ROW><id>15707075</id><snippet>SUDO_USER
SUDO_UID
</snippet></ROW><ROW><id>15707075</id><snippet>sudo</snippet></ROW><ROW><id>15707075</id><snippet>int(os.environ['SUDO_UID'])</snippet></ROW><ROW><id>15707075</id><snippet>os.seteuid()</snippet></ROW><ROW><id>15707125</id><snippet>timeit.default_timer()</snippet></ROW><ROW><id>15707125</id><snippet>import timeit
start_time = timeit.default_timer()
# code you want to evaluate
elapsed = timeit.default_timer() - start_time
</snippet></ROW><ROW><id>15707125</id><snippet>timeit.default_timer()</snippet></ROW><ROW><id>15707125</id><snippet>time.time()</snippet></ROW><ROW><id>15707125</id><snippet>time.clock()</snippet></ROW><ROW><id>15707181</id><snippet>from subprocess import Popen, PIPE
p = Popen("./vecdiff.py file1 file2", stdout=PIPE, stderr=PIPE)
output, errput = p.communicate()
</snippet></ROW><ROW><id>15707268</id><snippet>.__str__()</snippet></ROW><ROW><id>15707268</id><snippet>class Car:
    def __init__(self, color, make, model):
        self.color = color
        self.make = make
        self.model = model

    def __str__(self):
        return ' '.join((self.color, self.make, self.model))
</snippet></ROW><ROW><id>15707268</id><snippet>&gt;&gt;&gt; mycar = Car("white","Honda","Civic")
&gt;&gt;&gt; print mycar
white Honda Civic
</snippet></ROW><ROW><id>15707268</id><snippet>.__repr__()</snippet></ROW><ROW><id>15707428</id><snippet>i = i + 1</snippet></ROW><ROW><id>15707428</id><snippet>i</snippet></ROW><ROW><id>15707428</id><snippet>while</snippet></ROW><ROW><id>15707428</id><snippet>i = 0
while i &lt; 10:
    print i
    i = i + 1
</snippet></ROW><ROW><id>15707428</id><snippet>range</snippet></ROW><ROW><id>15707428</id><snippet>for i in range(0, 10, 2):
    print i
</snippet></ROW><ROW><id>15707465</id><snippet>.split()</snippet></ROW><ROW><id>15707465</id><snippet>zip(*lines)</snippet></ROW><ROW><id>15707465</id><snippet>with open('filename') as inputfile:
    rows = [line.split() for line in inputfile]

columns = zip(*rows)
</snippet></ROW><ROW><id>15707465</id><snippet>int</snippet></ROW><ROW><id>15707465</id><snippet>int_columns = [map(int, col) for col in columns[1:]]
</snippet></ROW><ROW><id>15707648</id><snippet>datetime</snippet></ROW><ROW><id>15707648</id><snippet>datetime</snippet></ROW><ROW><id>15707648</id><snippet>datetime</snippet></ROW><ROW><id>15707648</id><snippet>datetime</snippet></ROW><ROW><id>15707648</id><snippet>from datetime import datetime
import datetime
</snippet></ROW><ROW><id>15707648</id><snippet>datetime</snippet></ROW><ROW><id>15707648</id><snippet>import datetime as dt
from datetime import datetime
</snippet></ROW><ROW><id>15707648</id><snippet>datetime.xxxx</snippet></ROW><ROW><id>15707648</id><snippet>dt.xxxx</snippet></ROW><ROW><id>15707648</id><snippet>import datetime</snippet></ROW><ROW><id>15707648</id><snippet>datetime(...)</snippet></ROW><ROW><id>15707648</id><snippet>datetime.datetime</snippet></ROW><ROW><id>15707648</id><snippet>datetime</snippet></ROW><ROW><id>15707648</id><snippet>Datetime</snippet></ROW><ROW><id>15707648</id><snippet>datetime</snippet></ROW><ROW><id>15707648</id><snippet>Datetime</snippet></ROW><ROW><id>15707713</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>15707713</id><snippet>&lt;h3&gt;</snippet></ROW><ROW><id>15707713</id><snippet>from bs4 import BeautifulSoup
import urllib2

content = 'http://www.auc.nl/news-events/events-and-lectures/events-and-lectures.html?page=1&amp;pageSize=40'

soup = BeautifulSoup(urllib2.urlopen(content))

for x in soup.findAll('h3'):
    for y in soup.findAll('p'):
        print y
</snippet></ROW><ROW><id>15707788</id><snippet>characters =    ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
numbers = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25']
</snippet></ROW><ROW><id>15707978</id><snippet>import cv 

# get orginal image
orig = cv.LoadImage('fling.png') 

# show original 
cv.ShowImage("orig", orig)

# blur a bit to remove higher frequency variation
cv.Smooth(orig,orig,cv.CV_GAUSSIAN,5,5)

# normalise RGB
norm = cv.CreateImage(cv.GetSize(orig), 8, 3) 
red = cv.CreateImage(cv.GetSize(orig), 8, 1) 
grn = cv.CreateImage(cv.GetSize(orig), 8, 1) 
blu = cv.CreateImage(cv.GetSize(orig), 8, 1) 
total = cv.CreateImage(cv.GetSize(orig), 8, 1) 
cv.Split(orig,red,grn,blu,None)
cv.Add(red,grn,total)
cv.Add(blu,total,total)
cv.Div(red,total,red,255.0)
cv.Div(grn,total,grn,255.0)
cv.Div(blu,total,blu,255.0)
cv.Merge(red,grn,blu,None,norm)
cv.ShowImage("norm", norm)

# posterize simply with mean shift filtering
post = cv.CreateImage(cv.GetSize(orig), 8, 3) 
cv.PyrMeanShiftFiltering(norm,post,20,30)
cv.ShowImage("post", post)
</snippet></ROW><ROW><id>15708174</id><snippet>message</snippet></ROW><ROW><id>15708174</id><snippet>global</snippet></ROW><ROW><id>15708174</id><snippet>message = None

def BBS():
    global message
    # other stuff

    if foo():
        message = input("Enter a message: ")
    else:
        if message:
            print("The current message is:", message)
        else:
            print("There is no message.")
</snippet></ROW><ROW><id>15708174</id><snippet>def BBS():
   message = None # local variable

   while True: # loop until break
       if foo():
           message = input("Enter a message: ")
        elif bar():
            if message:
                print("The current message is:", message)
            else:
                print("There is no message.")
        else:
            print("Goodbye!")
            break
</snippet></ROW><ROW><id>15708174</id><snippet>def BBS():
    if foo():
        with open("message.txt", "w") as f:
            message = input("Enter a message: ")
            f.write(message)
    else:
        try:
            with open("message.txt", "r") as f:
                message = f.read()
                print("The current message is:", message)
        except (FileNotFoundError, OSError):
            print("There is no message.")
</snippet></ROW><ROW><id>15708177</id><snippet>&gt;&gt;&gt; print d
     Sp  Mt Value  Count
ID                      
4   MM2  S4    bg     10
5   MM2  S4   dgd      1
6   MM4  S2    rd      2
7   MM4  S2    cb      8
8   MM4  S2   uyi      8

&gt;&gt;&gt; d.groupby('Sp').apply(lambda t: t[t.Count==t.Count.max()])
         Sp  Mt Value  Count
Sp  ID                      
MM2 4   MM2  S4    bg     10
MM4 7   MM4  S2    cb      8
    8   MM4  S2   uyi      8
</snippet></ROW><ROW><id>15708443</id><snippet>formfield_overrides</snippet></ROW><ROW><id>15708443</id><snippet>News</snippet></ROW><ROW><id>15708443</id><snippet>Image</snippet></ROW><ROW><id>15708443</id><snippet>Image</snippet></ROW><ROW><id>15708443</id><snippet>ImageField</snippet></ROW><ROW><id>15708443</id><snippet>News</snippet></ROW><ROW><id>15708443</id><snippet>ForeignKey</snippet></ROW><ROW><id>15708443</id><snippet>class News(models.Model):
    ... bunch of news related fields
    image = models.ForeignKey(Image)
</snippet></ROW><ROW><id>15708443</id><snippet>admin.py</snippet></ROW><ROW><id>15708443</id><snippet>class NewsAdmin(admin.ModelAdmin):
    model = News

    def get_form(self, request, obj=None, **kwargs):
        self.formfield_overrides = {
            models.ForeignKey : {'widget' : SelectForeign(user = request.user)}
        }

        return super(NewsAdmin, self).get_form(request, obj, **kwargs)
</snippet></ROW><ROW><id>15708443</id><snippet>widget.py</snippet></ROW><ROW><id>15708443</id><snippet>def __init__(self, attrs=None, choices=(), user = None):
    self.current_user = None
    super(SelectForegin, self).__init__(attrs, choices)
</snippet></ROW><ROW><id>15708443</id><snippet>ForeignKey</snippet></ROW><ROW><id>15708443</id><snippet>News</snippet></ROW><ROW><id>15708443</id><snippet>ForeignKey</snippet></ROW><ROW><id>15708604</id><snippet>import re
data = '''Barnes, Michael8:00a10:00aTech
Collins, Jessica8:00a4:00pSupervisor
Hamilton, Patricia8:00a10:00aTech
Smith, Jan8:00a10:00aTech
Park, Kimberly8:00a10:00aTech
Edwards, Terrell10:00a12:00pTech
Green, Harrold12:00p2:00pTech
Tait, Jessica12:00p2:00pTech
Tait, Jessica2:00p4:00pTech
Hernandez, William (Monte)4:00p6:30pSupervisor
Tait, Chioma4:00p6:00pTech
Hernandez, William (Monte)6:30p7:00pSupervisor
Hernandez, William (Monte)7:00p9:00pSupervisor
Tailor, Thomas (Jason)9:00p12:00aSupervisor
Jones, Deslynne10:00p12:00aTech'''

print re.findall(r'(.*?)(\d{1,2}:\d\d[ap])(\d{1,2}:\d\d[ap])(.*)', data)
</snippet></ROW><ROW><id>15708604</id><snippet>[('Barnes, Michael', '8:00a', '10:00a', 'Tech'),
 ('Collins, Jessica', '8:00a', '4:00p', 'Supervisor'),
 ('Hamilton, Patricia', '8:00a', '10:00a', 'Tech'),
 ('Smith, Jan', '8:00a', '10:00a', 'Tech'),
 ('Park, Kimberly', '8:00a', '10:00a', 'Tech'),
 ('Edwards, Terrell', '10:00a', '12:00p', 'Tech'),
 ('Green, Harrold', '12:00p', '2:00p', 'Tech'),
 ('Tait, Jessica', '12:00p', '2:00p', 'Tech'),
 ('Tait, Jessica', '2:00p', '4:00p', 'Tech'),
 ('Hernandez, William (Monte)', '4:00p', '6:30p', 'Supervisor'),
 ('Tait, Chioma', '4:00p', '6:00p', 'Tech'),
 ('Hernandez, William (Monte)', '6:30p', '7:00p', 'Supervisor'),
 ('Hernandez, William (Monte)', '7:00p', '9:00p', 'Supervisor'),
 ('Tailor, Thomas (Jason)', '9:00p', '12:00a', 'Supervisor'),
 ('Jones, Deslynne', '10:00p', '12:00a', 'Tech')]
</snippet></ROW><ROW><id>15708604</id><snippet>re</snippet></ROW><ROW><id>15708604</id><snippet>csv</snippet></ROW><ROW><id>15708674</id><snippet>a</snippet></ROW><ROW><id>15708674</id><snippet>b==c</snippet></ROW><ROW><id>15708674</id><snippet>a[b==c]</snippet></ROW><ROW><id>15708674</id><snippet>from numpy import *

a = arange(11)
b = 11*a
c = b[::-1]

print a        # [  0   1   2   3   4   5   6   7   8   9  10]
print b        # [  0  11  22  33  44  55  66  77  88  99 110]
print c        # [110  99  88  77  66  55  44  33  22  11   0]
print a[b==c]  # [5]
</snippet></ROW><ROW><id>15708877</id><snippet>ModelWithTextField.object.filter(text_field__iregex=r'^.{7,}$')
</snippet></ROW><ROW><id>15708877</id><snippet>ModelWithTextField.object.raw('SELECT * FROM model_with_text_field WHERE len_func_name(text_field) &gt; 7')
</snippet></ROW><ROW><id>15709009</id><snippet>oberstet@THINKPAD-T410S /f/scm/AutobahnPython/examples/wamp/authentication (master)
$ git log -1
commit f3165c51256334b97e6183bd0852c3102882e917
Author: Tobias Oberstein &lt;tobias.oberstein@tavendo.de&gt;
Date:   Tue Mar 26 12:15:52 2013 +0100

    add multiple protocols example

oberstet@THINKPAD-T410S /f/scm/AutobahnPython/examples/wamp/authentication (master)
$ python server.py debug
Auth Extra/Secrets
{'keylen': 32, 'salt': 'RANDOM SALT', 'iterations': 1000}
{'foobar': 'znWa4bxY1glpbQlZziHIlXA2shfF+HoCr9bnmZ5HPQg='}
2013-03-29 19:17:42+0100 [-] Log opened.
2013-03-29 19:17:42+0100 [-] WampServerFactory starting on 9000
2013-03-29 19:17:42+0100 [-] Starting factory &lt;autobahn.wamp.WampServerFactory instance at 0x02934BC0&gt;
2013-03-29 19:17:42+0100 [-] WampServerFactory starting
2013-03-29 19:17:42+0100 [-] Site starting on 8080
2013-03-29 19:17:42+0100 [-] Starting factory &lt;twisted.web.server.Site instance at 0x036FDE18&gt;
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] TX WAMP: [0, "7LHl79cVQEDZl_C5", 1, "Autobahn/0.6.0"]
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] registered remote method on http://api.wamp.ws/procedure#auth
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] registered remote method on http://api.wamp.ws/procedure#authreq
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] RX WAMP: [2,"0.c23s5q4pxf","http://api.wamp.ws/procedure#authreq","foobar",null]
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] TX WAMP: [3, "0.c23s5q4pxf", "{\"extra\": {}, \"timestamp\": \"2013-03-29T18:17:42Z\
", \"authid\": \"7NEQK0Gnrqxq1JRL\", \"authkey\": \"foobar\", \"sessionid\": \"7LHl79cVQEDZl_C5\", \"authextra\": {\"keylen\": 32, \"salt\":
 \"RANDOM SALT\", \"iterations\": 1000}, \"permissions\": {\"rpc\": [{\"call\": true, \"uri\": \"http://example.com/procedures/hello\"}], \"
pubsub\": [{\"prefix\": true, \"uri\": \"http://example.com/topics/\", \"pub\": true, \"sub\": true}]}}"]
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] RX WAMP: [2,"0.fscffb2cozr","http://api.wamp.ws/procedure#auth","LzKbKJb5K8D313P/bl1
tF4Z93bIZup8oR8+Am8PY8mc="]
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] registered topic http://example.com/topics/ for publication (match by prefix = True)

2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] registered topic http://example.com/topics/ for subscription (match by prefix = True
)
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] registered remote method on http://example.com/procedures/hello
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] TX WAMP: [3, "0.fscffb2cozr", {"rpc": [{"call": true, "uri": "http://example.com/pro
cedures/hello"}], "pubsub": [{"prefix": true, "uri": "http://example.com/topics/", "pub": true, "sub": true}]}]
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] RX WAMP: [5,"http://example.com/topics/mytopic1"]
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] subscriptions map created for topic http://example.com/topics/mytopic1
2013-03-29 19:17:42+0100 [MyServerProtocol,1,127.0.0.1] subscribed peer 127.0.0.1:55946 on topic http://example.com/topics/mytopic1
</snippet></ROW><ROW><id>15709120</id><snippet>val = 0
for i in range(10000):
    val += 1

val = Value('i', 0)
lock = Lock()
for i in range(10000):
    with lock:
        val.value += 1
</snippet></ROW><ROW><id>15709202</id><snippet>imp.reload()</snippet></ROW><ROW><id>15709202</id><snippet>imp.reload(mymath)</snippet></ROW><ROW><id>15709202</id><snippet>pi</snippet></ROW><ROW><id>15709202</id><snippet>import sys
del sys.modules['mymath']
import mymath
</snippet></ROW><ROW><id>15709202</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.system("echo 'pi = 3.142' &gt; mymath.py")
0
&gt;&gt;&gt; import mymath
&gt;&gt;&gt; mymath.pi
3.142
&gt;&gt;&gt; os.system("echo 'pass' &gt; mymath.py")
0
&gt;&gt;&gt; import sys
&gt;&gt;&gt; del sys.modules['mymath']
&gt;&gt;&gt; import mymath
&gt;&gt;&gt; mymath.pi
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'pi'
</snippet></ROW><ROW><id>15709236</id><snippet>str="suleman, h (2001) Some Random Piece Of Junk, Journal of Junk, ACM, pp1-100, 2000"

parts=str.split(',')
newparts=[]

for chunk in parts[:-3]:
    newparts.append(chunk.title())

newparts.append(parts[3].upper())

for chunk in parts[4:]:
    newparts.append(chunk.lower())


newstr=",".join(newparts)

print newstr
</snippet></ROW><ROW><id>15709236</id><snippet>11:41 ~ $ python test.py
Suleman, H (2001) Some Random Piece Of Junk, Journal Of Junk, ACM, pp1-100, 2000
</snippet></ROW><ROW><id>15709293</id><snippet>&gt;&gt;&gt; def print_spam():
...     print 'spam'
... 
&gt;&gt;&gt; print_spam
&lt;function print_spam at 0x105722ed8&gt;
&gt;&gt;&gt; type(print_spam)
&lt;type 'function'&gt;
&gt;&gt;&gt; another_name = print_spam
&gt;&gt;&gt; another_name
&lt;function print_spam at 0x105722ed8&gt;
&gt;&gt;&gt; another_name is print_spam
True
&gt;&gt;&gt; another_name()
spam
</snippet></ROW><ROW><id>15709293</id><snippet>print_spam</snippet></ROW><ROW><id>15709293</id><snippet>another_name</snippet></ROW><ROW><id>15709293</id><snippet>print_spam</snippet></ROW><ROW><id>15709293</id><snippet>do_twice</snippet></ROW><ROW><id>15709293</id><snippet>f</snippet></ROW><ROW><id>15709336</id><snippet>numbers</snippet></ROW><ROW><id>15709336</id><snippet>numbers = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
</snippet></ROW><ROW><id>15709336</id><snippet>numbers = range(26)</snippet></ROW><ROW><id>15709336</id><snippet>num1</snippet></ROW><ROW><id>15709336</id><snippet>num2</snippet></ROW><ROW><id>15709336</id><snippet>4 == '4'</snippet></ROW><ROW><id>15709336</id><snippet>&gt;&gt;&gt; 4 == '4'
False
</snippet></ROW><ROW><id>15709336</id><snippet>numbers</snippet></ROW><ROW><id>15709336</id><snippet>num2</snippet></ROW><ROW><id>15709336</id><snippet>num1</snippet></ROW><ROW><id>15709336</id><snippet>num1 == int(num2)</snippet></ROW><ROW><id>15709336</id><snippet>str(num1) == num2</snippet></ROW><ROW><id>15709343</id><snippet>pivot_table</snippet></ROW><ROW><id>15709343</id><snippet>&gt;&gt;&gt; df1
        index  year  month  day symbol transaction  nr_shares
0  2011-01-10  2011      1   10   AAPL         Buy       1500
1  2011-01-10  2011      1   10   AAPL        Sell        200
2  2011-01-10  2011      1   10   GOOG        Sell        500
3  2011-01-10  2011      1   10   GOOG         Buy        600
4  2011-01-13  2011      1   13   GOOG        Sell       1000
&gt;&gt;&gt; df2
        index  AAPL  GOOG
0  2011-01-10     0     0
1  2011-01-11     0     0
2  2011-01-12     0     0
3  2011-01-13     0     0
</snippet></ROW><ROW><id>15709343</id><snippet>&gt;&gt;&gt; df1["nr_shares"] = df1.apply(lambda row: row["nr_shares"] * (-1 if row["transaction"] == "Sell" else 1), axis=1)
&gt;&gt;&gt; df1
        index  year  month  day symbol transaction  nr_shares
0  2011-01-10  2011      1   10   AAPL         Buy       1500
1  2011-01-10  2011      1   10   AAPL        Sell       -200
2  2011-01-10  2011      1   10   GOOG        Sell       -500
3  2011-01-10  2011      1   10   GOOG         Buy        600
4  2011-01-13  2011      1   13   GOOG        Sell      -1000
</snippet></ROW><ROW><id>15709343</id><snippet>df1</snippet></ROW><ROW><id>15709343</id><snippet>&gt;&gt;&gt; a = df1.pivot_table(values="nr_shares", rows="index", cols="symbol",
                    aggfunc=sum)
&gt;&gt;&gt; a
symbol      AAPL  GOOG
index                 
2011-01-10  1300   100
2011-01-13   NaN -1000
</snippet></ROW><ROW><id>15709343</id><snippet>b</snippet></ROW><ROW><id>15709343</id><snippet>&gt;&gt;&gt; b = df2.set_index("index")
&gt;&gt;&gt; b
            AAPL  GOOG
index                 
2011-01-10     0     0
2011-01-11     0     0
2011-01-12     0     0
2011-01-13     0     0
</snippet></ROW><ROW><id>15709343</id><snippet>&gt;&gt;&gt; (a+b).fillna(0)
symbol      AAPL  GOOG
index                 
2011-01-10  1300   100
2011-01-11     0     0
2011-01-12     0     0
2011-01-13     0 -1000
</snippet></ROW><ROW><id>15709420</id><snippet>from matplotlib import pyplot</snippet></ROW><ROW><id>15709420</id><snippet>import matplotlib.pyplot</snippet></ROW><ROW><id>15709420</id><snippet>pylab</snippet></ROW><ROW><id>15709420</id><snippet>pylab</snippet></ROW><ROW><id>15709420</id><snippet>pyplot</snippet></ROW><ROW><id>15709420</id><snippet>pyplot</snippet></ROW><ROW><id>15709420</id><snippet>matplotlib</snippet></ROW><ROW><id>15709420</id><snippet>import package</snippet></ROW><ROW><id>15709420</id><snippet>package.module</snippet></ROW><ROW><id>15709420</id><snippet>import package</snippet></ROW><ROW><id>15709420</id><snippet>from package import module</snippet></ROW><ROW><id>15709420</id><snippet>package.module</snippet></ROW><ROW><id>15709547</id><snippet>&gt;&gt;&gt; a,b,c = np.unique(data, return_index=True, return_inverse=True)
&gt;&gt;&gt; c # almost!!!
array([1, 1, 1, 0, 0, 0, 0, 2, 2, 3, 3, 3])
&gt;&gt;&gt; np.argsort(b)[c]
array([0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3], dtype=int64)
</snippet></ROW><ROW><id>15709547</id><snippet>def replace_groups(data):
    a,b,c, = np.unique(data, True, True)
    _, ret = np.unique(b[c], False, True)
    return ret
</snippet></ROW><ROW><id>15709547</id><snippet>def replace_groups_dict(data):
    _, ind = np.unique(data, return_index=True)
    unqs = data[np.sort(ind)]
    data_id = dict(zip(unqs, np.arange(data.size)))
    num = np.array([data_id[datum] for datum in data])
    return num

In [7]: %timeit replace_groups_dict(lines100)
10000 loops, best of 3: 68.8 us per loop

In [8]: %timeit replace_groups_dict(lines200)
10000 loops, best of 3: 106 us per loop

In [9]: %timeit replace_groups_dict(lines)
10 loops, best of 3: 32.1 ms per loop

In [10]: %timeit replace_groups(lines100)
10000 loops, best of 3: 67.1 us per loop

In [11]: %timeit replace_groups(lines200)
10000 loops, best of 3: 78.4 us per loop

In [12]: %timeit replace_groups(lines)
10 loops, best of 3: 23.1 ms per loop
</snippet></ROW><ROW><id>15709596</id><snippet>_end</snippet></ROW><ROW><id>15709596</id><snippet>def remove_word(trie, word):
    current_dict = trie
    for letter in word:
        current_dict = current_dict.get(letter, None)
        if current_dict is None:
            # the trie doesn't contain this word.
            break
    else:
        del current_dict[_end]
</snippet></ROW><ROW><id>15709596</id><snippet>def remove_word2(trie, word):
    current_dict = trie
    path = [current_dict]
    for letter in word:
        current_dict = current_dict.get(letter, None)
        path.append(current_dict)
        if current_dict is None:
            # the trie doesn't contain this word.
            break
    else:
        if not path[-1].get(_end, None):
            # the trie doesn't contain this word (but a prefix of it).
            return
        deleted_branches = []
        for current_dict, letter in zip(reversed(path[:-1]), reversed(word)):
            if len(current_dict[letter]) &lt;= 1:
                deleted_branches.append((current_dict, letter))
            else:
                break
        if len(deleted_branches) &gt; 0:
            del deleted_branches[-1][0][deleted_branches[-1][1]]
        del path[-1][_end]
</snippet></ROW><ROW><id>15709596</id><snippet>_end</snippet></ROW><ROW><id>15709613</id><snippet>import sys
import asciitree
class Node(object):
    def __init__(self, name, indent, parent):
        self.name = name
        self.indent = indent
        self.parent = parent
        self.children = []
    def add(self, child):
        self.children.append(child)
    def __str__(self):
        return self.name
def main():
    current_indent = -1
    root_node = Node('Root', current_indent, None)
    current_node = root_node
    with open(sys.argv[1]) as file_to_parse:
        for scanned_line in (l.rstrip() for l in file_to_parse):
            line_content = scanned_line.lstrip()
            if not line_content:
                continue
            indent = len(scanned_line) - len(line_content)
            while True:
              if indent &gt; current_node.indent:
                  parent = current_node
                  break
              elif indent == current_node.indent:
                  parent = current_node.parent
                  break
              else:
                  current_node = current_node.parent
            child = Node(line_content, indent, parent)
            parent.add(child)
            current_node = child
    print(asciitree.draw_tree(root_node))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15709613</id><snippet>Root
  +--Audio:
     +--Intel High Definition Audio:
     |  +--Audio ID: 29
     |     +--Headphone:
     |     |  +--Connection: Combination Output
     |     +--Speaker:
     |     |  +--Connection: Internal
     |     +--Line Input:
     |     |  +--Connection: Combination Input
     |     +--Internal Microphone:
     |     |  +--Connection: Internal
     |     +--S/PDIF Optical Digital Audio Input:
     |     |  +--Connection: Combination Input
     |     +--S/PDIF Optical Digital Audio Output:
     |     |  +--Connection: Combination Output
     |     +--External Microphone / iPhone Headset:
     |     |  +--Connection: Combination Output
     |     +--HDMI / DisplayPort Output:
     |        +--Connection: Display
     +--Devices:
        +--Built-in Microphone:
        |  +--Default Input Device: Yes
        |  +--Input Channels: 2
        |  +--Manufacturer: Apple Inc.
        |  +--Current SampleRate: 44100
        |  +--Transport: Built-in
        +--Built-in Input:
        |  +--Input Channels: 2
        |  +--Manufacturer: Apple Inc.
        |  +--Current SampleRate: 44100
        |  +--Transport: Built-in
        +--Built-in Output:
        |  +--Default Output Device: Yes
        |  +--Default System Output Device: Yes
        |  +--Manufacturer: Apple Inc.
        |  +--Output Channels: 2
        |  +--Current SampleRate: 44100
        |  +--Transport: Built-in
        +--After Effects 11.0:
        |  +--Manufacturer: Apple, Inc.
        |  +--Current SampleRate: 0
        |  +--Transport: Unknown
        +--Prelude 1.0:
        |  +--Manufacturer: Apple, Inc.
        |  +--Current SampleRate: 0
        |  +--Transport: Unknown
        +--Premiere Pro 6.0:
           +--Manufacturer: Apple, Inc.
           +--Current SampleRate: 0
           +--Transport: Unknown
</snippet></ROW><ROW><id>15709925</id><snippet>current_time.readline()</snippet></ROW><ROW><id>15709925</id><snippet>now = current_time.readline()
future = float(now) + 30
</snippet></ROW><ROW><id>15709959</id><snippet>screenshot = ImageGrab.grab()
haystack = screenshot.load()
</snippet></ROW><ROW><id>15709959</id><snippet>decoded = data.decode('base64')
f = cStringIO.StringIO(decoded)
image = Image.open(f)
needle = image.load()
</snippet></ROW><ROW><id>15709959</id><snippet>numpy</snippet></ROW><ROW><id>15709959</id><snippet>haystack</snippet></ROW><ROW><id>15709959</id><snippet>needle</snippet></ROW><ROW><id>15709959</id><snippet>needle</snippet></ROW><ROW><id>15709959</id><snippet>True</snippet></ROW><ROW><id>15709959</id><snippet>continue</snippet></ROW><ROW><id>15710022</id><snippet>with open("old.txt") as f_old, open("new.txt", "w") as f_new:
    for line in f_old:
        f_new.write(line)
        if 'identifier' in line:
            f_new.write("extra stuff\n")
</snippet></ROW><ROW><id>15710022</id><snippet>f_old = open("old.txt")
f_new = open("new.txt", "w")

for line in f_old:
    f_new.write(line)
    if 'identifier' in line:
        f_new.write("extra stuff\n")

f_old.close()
f_new.close()
</snippet></ROW><ROW><id>15710022</id><snippet>&gt;&gt;&gt; !cat old.txt
a
b
c
d identifier
e
</snippet></ROW><ROW><id>15710022</id><snippet>&gt;&gt;&gt; !cat new.txt
a
b
c
d identifier
extra stuff
e
</snippet></ROW><ROW><id>15710140</id><snippet>$ sudo xdg-icon-resource install --novendor --size 16 my-icon.png my-icon-name
</snippet></ROW><ROW><id>15710304</id><snippet>status</snippet></ROW><ROW><id>15710304</id><snippet>User</snippet></ROW><ROW><id>15710304</id><snippet>set_status()</snippet></ROW><ROW><id>15710304</id><snippet>status</snippet></ROW><ROW><id>15710304</id><snippet>User</snippet></ROW><ROW><id>15710304</id><snippet>get_status()</snippet></ROW><ROW><id>15710304</id><snippet>Status</snippet></ROW><ROW><id>15710304</id><snippet>set_status</snippet></ROW><ROW><id>15710304</id><snippet>get_status</snippet></ROW><ROW><id>15710530</id><snippet>pip install binarytrees 
</snippet></ROW><ROW><id>15710698</id><snippet>related_name</snippet></ROW><ROW><id>15710698</id><snippet>_set</snippet></ROW><ROW><id>15710698</id><snippet>_set</snippet></ROW><ROW><id>15710698</id><snippet>related_name</snippet></ROW><ROW><id>15710816</id><snippet>drugtype = entry.attributes['type'].value if entry.attributes.has_key('type') else 'defaulttype'
</snippet></ROW><ROW><id>15710816</id><snippet>drugbank-id = entry.getElementsByTagName('drugbank-id')
drugidObj = drugbank-id[0] if drugbank-id else None
</snippet></ROW><ROW><id>15710816</id><snippet>if drugidObj.hasChildNodes:
    drugid = drugidObj.childNodes[0].nodeValue
</snippet></ROW><ROW><id>15710816</id><snippet>getElementsByTagName</snippet></ROW><ROW><id>15710816</id><snippet>childNodes</snippet></ROW><ROW><id>15710826</id><snippet>imget = ctypes.CDLL('./imget.so')
imget.queryTree.restype = ctypes.POINTER(ctypes.c_char_p * 3)
imget.queryTree.argtypes = (ctypes.c_char_p, ctypes.c_float, ctypes.c_int,
    ctypes.c_char_p, ctypes.c_char_p)
libtest = imget.queryTree("trytreenew64",16, 20, filename, hashval)
</snippet></ROW><ROW><id>15710857</id><snippet>A1</snippet></ROW><ROW><id>15710857</id><snippet>B1</snippet></ROW><ROW><id>15710857</id><snippet>C1</snippet></ROW><ROW><id>15710857</id><snippet>listA1.sort(key=operator.itemgetter(1))
</snippet></ROW><ROW><id>15710857</id><snippet>itemgetter</snippet></ROW><ROW><id>15710857</id><snippet>listA1.sort(key=lambda element: element[1])
</snippet></ROW><ROW><id>15710857</id><snippet>set</snippet></ROW><ROW><id>15710857</id><snippet>setA1 = set(element[1] for element in listA1)
setB1 = set(element[1] for element in listB1)
setC1 = set(element[1] for element in listC1)
</snippet></ROW><ROW><id>15710857</id><snippet>setA1 = set()
for line1 in fileA:
    listA = line1.split('\t')
    setA1.add(listA[1])
</snippet></ROW><ROW><id>15710857</id><snippet>print "Common between file1 and file2 files:"
for key in setA1 &amp; setA2:
    print key
</snippet></ROW><ROW><id>15710857</id><snippet>def read_file(path):
    with open(path) as f:
        result = set()
        for line in f:
            columns = line.split('\t')
            result.add(columns[1])
    return result

setA1 = read_file('A.txt')
setB1 = read_file('B.txt')
setC1 = read_file('C.txt')
</snippet></ROW><ROW><id>15710857</id><snippet>def read_file(path):
    with open(path) as f:
        return set(row[1] for row in csv.reader(f))
</snippet></ROW><ROW><id>15710857</id><snippet>def read_file(path):
    with open(path) as f:
        for row in csv.reader(f):
            yield row[1]

setA1 = set(read_file('A.txt'))
iterB1 = read_file('B.txt')
iterC1 = read_file('B.txt')
</snippet></ROW><ROW><id>15710857</id><snippet>intersection</snippet></ROW><ROW><id>15710857</id><snippet>&amp;</snippet></ROW><ROW><id>15710857</id><snippet>for key in setA1.intersection(iterB1):
</snippet></ROW><ROW><id>15710857</id><snippet>return set(…)</snippet></ROW><ROW><id>15710857</id><snippet>yield from (…)</snippet></ROW><ROW><id>15710857</id><snippet>unique_everseen</snippet></ROW><ROW><id>15710857</id><snippet>itertools</snippet></ROW><ROW><id>15710857</id><snippet>read_file</snippet></ROW><ROW><id>15710959</id><snippet>y0</snippet></ROW><ROW><id>15710959</id><snippet>t</snippet></ROW><ROW><id>15710959</id><snippet>odeint</snippet></ROW><ROW><id>15710959</id><snippet>t</snippet></ROW><ROW><id>15710959</id><snippet>t = np.arange(0, 520, 1);
t = t.reshape(len(t),1);
</snippet></ROW><ROW><id>15710959</id><snippet>t</snippet></ROW><ROW><id>15710959</id><snippet>t</snippet></ROW><ROW><id>15710959</id><snippet>In [177]: def SIR(x, t):
   .....:     return x
   .....: 
</snippet></ROW><ROW><id>15710959</id><snippet>In [178]: x0 = [0.1, 0.2]

In [179]: odeint(SIR, x0, t=[0, 0.5, 1])
Out[179]: 
array([[ 0.1       ,  0.2       ],
       [ 0.16487213,  0.32974426],
       [ 0.27182822,  0.54365643]])
</snippet></ROW><ROW><id>15710959</id><snippet>In [180]: x0 = [[0.1, 0.2]]  # wrong shape

In [181]: odeint(SIR, x0, t=[0, 0.5, 1])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-181-a37878f92395&gt; in &lt;module&gt;()
----&gt; 1 odeint(SIR, x0, t=[0, 0.5, 1])

/home/warren/anaconda/lib/python2.7/site-packages/scipy/integrate/odepack.pyc in odeint(func, y0, t, args, Dfun, col_deriv, full_output, ml, mu, rtol, atol, tcrit, h0, hmax, hmin, ixpr, mxstep, mxhnil, mxordn, mxords, printmessg)
    142     output = _odepack.odeint(func, y0, t, args, Dfun, col_deriv, ml, mu,
    143                              full_output, rtol, atol, tcrit, h0, hmax, hmin,
--&gt; 144                              ixpr, mxstep, mxhnil, mxordn, mxords)
    145     if output[-1] &lt; 0:
    146         print _msgs[output[-1]]

ValueError: object too deep for desired array
</snippet></ROW><ROW><id>15710959</id><snippet>odeint</snippet></ROW><ROW><id>15710959</id><snippet>SIR</snippet></ROW><ROW><id>15711071</id><snippet>p=re.compile(r'\&lt;http.+?\&gt;', re.DOTALL)
re.sub(p, '', plain)
</snippet></ROW><ROW><id>15711401</id><snippet>fillvalue</snippet></ROW><ROW><id>15711401</id><snippet>it = izip_longest(*iterables, fillvalue=None)
</snippet></ROW><ROW><id>15711401</id><snippet>fillvalue</snippet></ROW><ROW><id>15711401</id><snippet>None</snippet></ROW><ROW><id>15711401</id><snippet>it = izip_longest(*iterables)
</snippet></ROW><ROW><id>15711457</id><snippet>largest = [float(d[0]) for d in nlargest]
</snippet></ROW><ROW><id>15711457</id><snippet>[254.0, 154.0, 244.0, 134.0, 254.0]
</snippet></ROW><ROW><id>15711457</id><snippet>cur.execute("SELECT desiredParams FROM tableOfInterest;")
nlargest = [float(g[0]) for g in heapq.nlargest(5, cur)]
</snippet></ROW><ROW><id>15711457</id><snippet>cur.execute("SELECT param FROM tableOfInterest ORDER BY param DESC FIRST 5;")
nlargest = [float(r.param) for r in cur]
</snippet></ROW><ROW><id>15711457</id><snippet>cur.execute("SELECT param FROM tableOfInterest ORDER BY param DESC FIRST 5;")
for param, in cur:
    stuff_to_do_with_first_5(float(param))
</snippet></ROW><ROW><id>15711457</id><snippet>cur.execute("SELECT param FROM tableOfInterest ORDER BY param DESC FIRST %s;", (num_results,))
</snippet></ROW><ROW><id>15711457</id><snippet>cur.execute("SELECT param FROM tableOfInterest ORDER BY param DESC FIRST %d;" % num_results)
</snippet></ROW><ROW><id>15711569</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.execlp('ssh', 'ssh', 'user@server')
</snippet></ROW><ROW><id>15711569</id><snippet>import subprocess
proc = subprocess.Popen(['ssh', 'user@server'])
result = proc.wait()
print result
</snippet></ROW><ROW><id>15711843</id><snippet>OrderedDict</snippet></ROW><ROW><id>15711843</id><snippet>dict</snippet></ROW><ROW><id>15711843</id><snippet>ship = (("NAME", "Albatross"),
        ("HP", 50),
        ("BLASTERS",13),
        ("THRUSTERS",18),
        ("PRICE",250))
ship = collections.OrderedDict(ship)
</snippet></ROW><ROW><id>15711843</id><snippet>OrderedDict</snippet></ROW><ROW><id>15711843</id><snippet>OrderedDict([('PRICE', 250), ('HP', 50), ('NAME', 'Albatross'), ('BLASTERS', 13), ('THRUSTERS', 18)])</snippet></ROW><ROW><id>15711843</id><snippet>OrderedDict</snippet></ROW><ROW><id>15711961</id><snippet>object</snippet></ROW><ROW><id>15711961</id><snippet>In [3]: class A(object):
   ...:         pass

In [5]: type(A())
Out[5]: __main__.A
</snippet></ROW><ROW><id>15711961</id><snippet>__class__</snippet></ROW><ROW><id>15711961</id><snippet>In [1]: class A: pass

In [2]: A().__class__
Out[2]: __main__.A
</snippet></ROW><ROW><id>15711961</id><snippet>x</snippet></ROW><ROW><id>15711961</id><snippet>x.__class__</snippet></ROW><ROW><id>15711961</id><snippet>x</snippet></ROW><ROW><id>15711961</id><snippet>type(x)</snippet></ROW><ROW><id>15711961</id><snippet>&lt;type 'instance'&gt;</snippet></ROW><ROW><id>15711961</id><snippet>x</snippet></ROW><ROW><id>15711961</id><snippet>type(x)</snippet></ROW><ROW><id>15711961</id><snippet>x.__class__</snippet></ROW><ROW><id>15711961</id><snippet>x.__class__</snippet></ROW><ROW><id>15711961</id><snippet>type()</snippet></ROW><ROW><id>15712129</id><snippet>totalValue = 0

for item in prices:
     totalValue += prices[item] * stock[item]

print totalValue
</snippet></ROW><ROW><id>15712144</id><snippet>controller.py</snippet></ROW><ROW><id>15712176</id><snippet>item = "Petra Němcová"
</snippet></ROW><ROW><id>15712176</id><snippet>item = u"Petra Němcová"
</snippet></ROW><ROW><id>15712176</id><snippet>item = item.decode('utf-8')
</snippet></ROW><ROW><id>15712221</id><snippet>   def create_user(cls, fid, friends):
        k = User()

        k.status = Status()
        k.status.set_status('') # set_status saves the status

        k.facebook_id = fid
        k.friends = friends
        k.save()
</snippet></ROW><ROW><id>15712221</id><snippet>   def create_user(cls, fid, friends):
        status = Status()
        status.set_status('')
        User.objects.create(facebook_id=fid, friends=friends, status=status)
</snippet></ROW><ROW><id>15712221</id><snippet>create_user</snippet></ROW><ROW><id>15712221</id><snippet>class UserManager(models.Manager):
    def create_user(self, fid, friends):
        status = Status()
        status.set_status('')
        return self.create(facebook_id=fid, friends=friends, status=status)


class User(models.Model):
    facebook_id = models.CharField(max_length=200)
    friends = ListField()
    status = models.OneToOneField(Status)

    objects = UserManager()
</snippet></ROW><ROW><id>15712221</id><snippet>new_user = User.objects.create_user(fid, friends)
</snippet></ROW><ROW><id>15712221</id><snippet>objects.create</snippet></ROW><ROW><id>15712221</id><snippet># A custom manager is no longer needed

class User(models.Model):
    facebook_id = models.CharField(max_length=200)
    friends = ListField()
    status = models.OneToOneField(Status)

    def save(self, *a, **kw):
        # if this user doesn't have a status yet, create an empty one
        if self.status is None:
            self.status = Status()
            self.status.set_status('')

        super(User, self).save(*a, **kw)

# creating users:

new_user = User.objects.create(facebook_id=fid, friends=friends)

# status is set to an empty one automatically in save
</snippet></ROW><ROW><id>15712231</id><snippet>lambda (k, v): (-v, k)
</snippet></ROW><ROW><id>15712231</id><snippet>lambda kv: (-kv[1], kv[0])
</snippet></ROW><ROW><id>15712431</id><snippet> Truncate tablename
</snippet></ROW><ROW><id>15712431</id><snippet> Truncate tablename CASCADE
</snippet></ROW><ROW><id>15712431</id><snippet> Truncate table1, table2, table3
</snippet></ROW><ROW><id>15712431</id><snippet> Cur.execute("truncate mytable;")
</snippet></ROW><ROW><id>15712455</id><snippet>matchTemplate</snippet></ROW><ROW><id>15712455</id><snippet>import cv2
import numpy as np
import pylab as pl

needle = cv2.imread("needle.png")
haystack = cv2.imread("haystack.jpg")

diff = cv2.matchTemplate(haystack, needle, cv2.TM_CCORR_NORMED)
x, y = np.unravel_index(np.argmax(diff), diff.shape)

pl.figure(figsize=(12, 8))
im = pl.imshow(haystack[:,:, ::-1])
ax = pl.gca()
ax.add_artist(pl.Rectangle((y, x), needle.shape[1], needle.shape[0],  transform=ax.transData, alpha=0.6))
</snippet></ROW><ROW><id>15712519</id><snippet>t</snippet></ROW><ROW><id>15712519</id><snippet>scrpt = r"\tFrame\tX pixels\tY pixels\r\n\t2\t615.5\t334.5\r\n\t3\t615.885\t334.136\r\n\t4\t615.937\t334.087\r\n\t5\t615.917\t334.106\r\n\t6\t615.892\t334.129\r\n\t7\t615.905\t334.117\r\n\t8\t615.767\t334.246\r\n\t9\t615.546\t334.456\r\n\t10\t615.352\t334.643\r\n\r\n"
</snippet></ROW><ROW><id>15712519</id><snippet>scrpt = "\\tFrame\\tX pixels\\tY pixels\\r\\n\\t2\\t615.5\\t334.5\\r\\n\\t3\\t615.885\\t334.136\\r\\n\\t4\\t615.937\\t334.087\\r\\n\\t5\\t615.917\\t334.106\\r\\n\\t6\\t615.892\\t334.129\\r\\n\\t7\\t615.905\\t334.117\\r\\n\\t8\\t615.767\\t334.246\\r\\n\\t9\\t615.546\\t334.456\\r\\n\\t10\\t615.352\\t334.643\\r\\n\\r\\n"
</snippet></ROW><ROW><id>15712519</id><snippet>scrpt = scrpt.decode('string_escape')
</snippet></ROW><ROW><id>15712519</id><snippet>decode</snippet></ROW><ROW><id>15712519</id><snippet>str</snippet></ROW><ROW><id>15712519</id><snippet>script = codecs.decode(script, 'unicode_escape')
</snippet></ROW><ROW><id>15712519</id><snippet>unicode_escape</snippet></ROW><ROW><id>15712519</id><snippet>codecs</snippet></ROW><ROW><id>15712519</id><snippet>encode</snippet></ROW><ROW><id>15712519</id><snippet>t</snippet></ROW><ROW><id>15712519</id><snippet>decode</snippet></ROW><ROW><id>15712519</id><snippet>t</snippet></ROW><ROW><id>15712519</id><snippet>repr</snippet></ROW><ROW><id>15712519</id><snippet>str</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>ce_connect</snippet></ROW><ROW><id>15712597</id><snippet>child2 = connect.ce_connect(child, '192.78.1.20', 'username', 'password', 'password2')
</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>ce_connect</snippet></ROW><ROW><id>15712597</id><snippet>child2._child</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>child2.cjump()</snippet></ROW><ROW><id>15712597</id><snippet>self._child.dump()</snippet></ROW><ROW><id>15712597</id><snippet>djump</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>domain_connect</snippet></ROW><ROW><id>15712597</id><snippet>pexpect.spawn</snippet></ROW><ROW><id>15712597</id><snippet>AttributeError: 'spawn' object has no attribute 'djump'</snippet></ROW><ROW><id>15712597</id><snippet>child = child.djump()
</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>djump</snippet></ROW><ROW><id>15712597</id><snippet>djump</snippet></ROW><ROW><id>15712597</id><snippet>pexpect.spawn</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>domain_connect</snippet></ROW><ROW><id>15712597</id><snippet>spawn</snippet></ROW><ROW><id>15712597</id><snippet>domain_connect</snippet></ROW><ROW><id>15712597</id><snippet>domain_connect</snippet></ROW><ROW><id>15712597</id><snippet>child = connect.domain_connect()
child_jump = child.djump()
child2 = connect.ce_connect(child, '192.78.1.20', 'username', 'password', 'password2')
child2_jump = child2.cjump()
</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>ce_connect</snippet></ROW><ROW><id>15712597</id><snippet>domain_connect</snippet></ROW><ROW><id>15712597</id><snippet>pexpect.spawn</snippet></ROW><ROW><id>15712597</id><snippet>ce_connect.cjump</snippet></ROW><ROW><id>15712597</id><snippet>child.sendline('ssh -o StrictHostKeyChecking=no -l '+self._usr+' '+self._ip)
</snippet></ROW><ROW><id>15712597</id><snippet>sendline</snippet></ROW><ROW><id>15712597</id><snippet>domain_connect</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>child</snippet></ROW><ROW><id>15712597</id><snippet>pexpect</snippet></ROW><ROW><id>15712597</id><snippet>*_connect</snippet></ROW><ROW><id>15712597</id><snippet>domain = connect.domain_connect()
child = domain.djump()
ce = connect.ce_connect(child, '192.78.1.20', 'username', 'password', 'password2')
child2 = ce.cjump()
</snippet></ROW><ROW><id>15712597</id><snippet>connect</snippet></ROW><ROW><id>15712597</id><snippet>djump</snippet></ROW><ROW><id>15712597</id><snippet>cjump</snippet></ROW><ROW><id>15712597</id><snippet>child = connect.domain_connect().djump()
child2 = connect.ce_connect(child, '192.78.1.20', 'username', 'password', 'password2').cjump()
</snippet></ROW><ROW><id>15712597</id><snippet>domain_connect</snippet></ROW><ROW><id>15712597</id><snippet>djump</snippet></ROW><ROW><id>15712597</id><snippet>_child</snippet></ROW><ROW><id>15712597</id><snippet>sendline</snippet></ROW><ROW><id>15712597</id><snippet>pexpect</snippet></ROW><ROW><id>15712597</id><snippet>def sendline(self, line):
    return self._child.sendline(line)
</snippet></ROW><ROW><id>15712670</id><snippet># a.py
print('a')
import b
import c

# b.py
import a
print('b')

# c.py
import a
print('c')
</snippet></ROW><ROW><id>15712670</id><snippet>&gt;&gt;&gt; import a
a
b
c
&gt;&gt;&gt; import b
&gt;&gt;&gt; import a
</snippet></ROW><ROW><id>15712670</id><snippet>print</snippet></ROW><ROW><id>15712745</id><snippet>class Status(models.Model):
    status = models.CharField(max_length=200, null=True, blank=True)
    time = models.DateTimeField('date published', default=timezone.datetime.min)
</snippet></ROW><ROW><id>15712745</id><snippet>__init__</snippet></ROW><ROW><id>15712798</id><snippet>&lt;a href="{% url nextURL %}"&gt;</snippet></ROW><ROW><id>15712962</id><snippet>wordsList = fileObject.readlines()
</snippet></ROW><ROW><id>15712962</id><snippet>list</snippet></ROW><ROW><id>15712962</id><snippet>['hello\n', 'my\n', 'name\n', 'is\n', 'jesi\n']
</snippet></ROW><ROW><id>15712962</id><snippet>shift_computePlaintext</snippet></ROW><ROW><id>15712962</id><snippet>wlist</snippet></ROW><ROW><id>15712962</id><snippet>'vium'</snippet></ROW><ROW><id>15712962</id><snippet>'name'</snippet></ROW><ROW><id>15712962</id><snippet>'name\n'</snippet></ROW><ROW><id>15712962</id><snippet>wlist[i].strip()</snippet></ROW><ROW><id>15712962</id><snippet>wlist[i]</snippet></ROW><ROW><id>15712962</id><snippet>wordsList = [line.strip() for line in fileObject]</snippet></ROW><ROW><id>15712962</id><snippet>wordsList = fileObject.readlines()</snippet></ROW><ROW><id>15712962</id><snippet>readlines()</snippet></ROW><ROW><id>15712962</id><snippet>list</snippet></ROW><ROW><id>15712962</id><snippet>index = 0
while index &lt; 26:
    # ...
    index = index + 1
</snippet></ROW><ROW><id>15712962</id><snippet>for index in range(26):
</snippet></ROW><ROW><id>15712962</id><snippet>wordlistLen = len(wlist)
i = 0
while i &lt; wordlistLen:
    # ...
    word = wlist[i]
    # ...
    i = i + 1
</snippet></ROW><ROW><id>15712962</id><snippet>for word in wlist:
</snippet></ROW><ROW><id>15712962</id><snippet>i</snippet></ROW><ROW><id>15712962</id><snippet>word</snippet></ROW><ROW><id>15712962</id><snippet>for i, word in enumerate(wlist):
</snippet></ROW><ROW><id>15712962</id><snippet>wordlistLen = len(wlist)
while i &lt; wordlistLen:
    print wlist[i]
    if newCipher == wlist[i]:
        return newCipher
    else:
        print 'Word not found.'
    i = i + 1
</snippet></ROW><ROW><id>15712962</id><snippet>if newCipher in wlist:
    return newCipher
else:
    print 'Word not found.'
</snippet></ROW><ROW><id>15713275</id><snippet>dtype = 'datetime64,a5,a5,i4'</snippet></ROW><ROW><id>15713275</id><snippet>In [36]: na_trades = np.zeros((number_of_orders,), dtype = 'datetime64,a5,a5,i4')
In [37]: na_trades
Out[37]: array([1970-01-01 00:00:00], dtype=datetime64[us])
</snippet></ROW><ROW><id>15713275</id><snippet>na_trades = np.empty(number_of_orders,
                     dtype = [
                         ('dt', 'datetime64'),
                         ('foo','a5'),
                         ('bar', 'a5'),
                         ('baz', 'i4')])
</snippet></ROW><ROW><id>15713368</id><snippet>print "{0[break_points][0]:d}".format(d)
</snippet></ROW><ROW><id>15713368</id><snippet>print "{break_points[0]:d}".format(**d)
</snippet></ROW><ROW><id>15713368</id><snippet>{}</snippet></ROW><ROW><id>15713368</id><snippet>arg_name</snippet></ROW><ROW><id>15713368</id><snippet>'.name'</snippet></ROW><ROW><id>15713368</id><snippet>getattr()</snippet></ROW><ROW><id>15713368</id><snippet>'[index]'</snippet></ROW><ROW><id>15713368</id><snippet>__getitem__()</snippet></ROW><ROW><id>15713479</id><snippet>In [1]: L = [1, 2, 3]

In [2]: for i in L:
            i = i + 1

In [3]: L
Out[3]: [1, 2, 3]
</snippet></ROW><ROW><id>15713479</id><snippet>In [4]: for i in range(len(L)):
            L[i] = L[i] + 1

In [5]: L
Out[5]: [2, 3, 4]
</snippet></ROW><ROW><id>15713479</id><snippet>enumerate</snippet></ROW><ROW><id>15713479</id><snippet>In [6]: for i, x in enumerate(L):
            L[i] = x + 1     

In [7]: L
Out[7]: [3, 4, 5]
</snippet></ROW><ROW><id>15713479</id><snippet>for i, dataset in enumerate(groups):
    groups[i] = dataset[:n]
</snippet></ROW><ROW><id>15713736</id><snippet>+</snippet></ROW><ROW><id>15713736</id><snippet>*</snippet></ROW><ROW><id>15713736</id><snippet>\d*</snippet></ROW><ROW><id>15713736</id><snippet>*</snippet></ROW><ROW><id>15713736</id><snippet>"http://www.domain.com/7464535"</snippet></ROW><ROW><id>15713736</id><snippet>\d+</snippet></ROW><ROW><id>15713736</id><snippet>\d+</snippet></ROW><ROW><id>15713736</id><snippet>+</snippet></ROW><ROW><id>15713736</id><snippet>\d*</snippet></ROW><ROW><id>15713736</id><snippet>\d*</snippet></ROW><ROW><id>15713736</id><snippet>*</snippet></ROW><ROW><id>15713736</id><snippet>*</snippet></ROW><ROW><id>15713736</id><snippet>foo: bar
baz:   quux
blah:blah
</snippet></ROW><ROW><id>15713736</id><snippet>(\w+):\s*(\w+)</snippet></ROW><ROW><id>15713736</id><snippet>\s*</snippet></ROW><ROW><id>15713736</id><snippet>blah:blah</snippet></ROW><ROW><id>15713736</id><snippet>*</snippet></ROW><ROW><id>15713899</id><snippet>from collections import defaultdict

year = [1958, 1909, 1958, 1958, 1961, 1961]
maker = ['Ford', 'Ford', 'Lotus', 'MGA', 'Amphicar', 'Corvair']
model = ['Edsel', 'Model T', 'Elite', 'Twin Cam', '', '']

d = defaultdict(list)
for maker, model, year in zip(maker, model, year):
    d[maker].append((model, year))
</snippet></ROW><ROW><id>15713899</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; 
&gt;&gt;&gt; year = [1958, 1909, 1958, 1958, 1961, 1961]
&gt;&gt;&gt; maker = ['Ford','Ford','Lotus','MGA', 'Amphicar', 'Corvair']
&gt;&gt;&gt; model = ['Edsel', 'Model T', 'Elite', 'Twin Cam', "", ""]
&gt;&gt;&gt; 
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for maker, model, year in zip(maker, model, year):
...     d[maker].append((model, year))
... 
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(dict(d))
{'Amphicar': [('', 1961)],
 'Corvair': [('', 1961)],
 'Ford': [('Edsel', 1958), ('Model T', 1909)],
 'Lotus': [('Elite', 1958)],
 'MGA': [('Twin Cam', 1958)]}
</snippet></ROW><ROW><id>15713899</id><snippet>izip_longest</snippet></ROW><ROW><id>15713899</id><snippet>from itertools import izip_longest

...

d = defaultdict(list)
for maker, model, year in izip_longest(maker, model, year):
    d[maker].append((model, year))
</snippet></ROW><ROW><id>15714102</id><snippet>colour_dict = {
    'Red':    "Red is the colour of blood, rubies, and strawberries",
    'White':  "WhitePages is the world's largest and most trusted source for business",
    'Blue':   "The term blue moon is used colloquially to mean a rare event",
    'Orange': "Orange you glad I have no more colours?"
}
colour_list = tuple([colour_dict[row["COLOUR"]] for row in reader])
</snippet></ROW><ROW><id>15714102</id><snippet>colour_list</snippet></ROW><ROW><id>15714233</id><snippet>read</snippet></ROW><ROW><id>15714233</id><snippet>read</snippet></ROW><ROW><id>15714233</id><snippet>file1 = open("cliente\\config.ini","r")

line1 = file1.read().split(",")

user = line1[0]
passwd = line1[1]
domain = line1[2]
file1.close()
</snippet></ROW><ROW><id>15714436</id><snippet>replace</snippet></ROW><ROW><id>15714436</id><snippet>&gt;&gt;&gt; available = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; secret = 'apple'
&gt;&gt;&gt; if 'a' in secret:
...   available = available.replace('a','')
... 
&gt;&gt;&gt; available
'bcdefghijklmnopqrstuvwxyz'
</snippet></ROW><ROW><id>15714674</id><snippet>128.0 - 128</snippet></ROW><ROW><id>15714676</id><snippet>Series.str.replace()</snippet></ROW><ROW><id>15714676</id><snippet>date = """21/08/2001 10:20
19/09/2005 9:50
??:?? 04-Jun-01
16/08/2004 7:15 
??:?? 04-Jan-01 
23/01/2001 9:25 
24/01/2001 11:16 
??:?? 05-Feb-01 
24/01/2001 8:30 
24/01/2001 15:15""".split("\n")

s = pd.Series(date)
s.str.replace("\?\?:\?\?", "12:00")
</snippet></ROW><ROW><id>15715214</id><snippet>os.walk</snippet></ROW><ROW><id>15715214</id><snippet>root, dirs, files</snippet></ROW><ROW><id>15715214</id><snippet>filenames = reduce(lambda x,y: x+y, [files for root, dirs, files in os.walk('.')])
files = [name[2:7] for name in filenames]
</snippet></ROW><ROW><id>15715214</id><snippet>reduce()</snippet></ROW><ROW><id>15715234</id><snippet>QStandardItemModel model;
model.setColumnCount (1);
model.setHeaderData (0, Qt::Horizontal, "Player");
QList&lt;QStandardItem*&gt; row;
row &lt;&lt; new QStandardItem("Adam");
model.appendRow (row);
QTreeView view;
view.setModel (&amp;model);
</snippet></ROW><ROW><id>15715415</id><snippet>'uom_id': fields.many2one('product.uom', 'Uom')
</snippet></ROW><ROW><id>15715447</id><snippet>class TestUser(TestCase):
    def setUp(self):
        db.create_all()

    def session_commit(self):
        try:
            db.session.commit()
        except:
            db.session.rollback()
        finally:
            pass

    def test_new_user(self):
        """
        test that new user is persisted in database
        """
        user = User('test_new_user@none.com', 'welcome')
        db.session.add(user)
        self.session_commit()
        users_in_db = db.session.query(User).all()
        self.assertEquals(1, len(users_in_db))
        self.assertEquals(user.email, users_in_db[0].email)
        self.assertEquals(user._password, users_in_db[0]._password)

    def tearDown(self):
        db.session.close()
        for tbl in reversed(db.metadata.sorted_tables):
            db.engine.execute(tbl.delete())
</snippet></ROW><ROW><id>15715500</id><snippet># A simple function of x, y
def f(x, y):
    return 2*x + 3*y**2

x = x.reshape((m, 1, d))
y = y.reshape((1, n, d))
temp = f(x, y)
Z = temp.sum(2)
</snippet></ROW><ROW><id>15715500</id><snippet>temp</snippet></ROW><ROW><id>15715500</id><snippet>d</snippet></ROW><ROW><id>15715500</id><snippet>Z = np.zeros((m, n))
for i in range(d):
    Z += f(x[:, :, i], y[:, :, i])
</snippet></ROW><ROW><id>15715548</id><snippet>op</snippet></ROW><ROW><id>15715548</id><snippet>?op=CREATE</snippet></ROW><ROW><id>15715548</id><snippet>overwrite=false</snippet></ROW><ROW><id>15715797</id><snippet>requests</snippet></ROW><ROW><id>15715797</id><snippet>pip install requests</snippet></ROW><ROW><id>15715797</id><snippet>deb</snippet></ROW><ROW><id>15715797</id><snippet>setup.py</snippet></ROW><ROW><id>15715929</id><snippet>lst = lst[:n-1]
</snippet></ROW><ROW><id>15716091</id><snippet>ftplib</snippet></ROW><ROW><id>15716091</id><snippet>ftplib</snippet></ROW><ROW><id>15716091</id><snippet># (assumes you already created an instance of FTP
#  as "ftp", and already logged in)
f = open(fn, 'r')
ftp.storbinary("STOR remote_filename.png", f)
</snippet></ROW><ROW><id>15716091</id><snippet>StringIO</snippet></ROW><ROW><id>15716091</id><snippet>import StringIO
f = StringIO()
image.save(f, 'PNG')

f.seek(0) # return the StringIO's file pointer to the beginning of the file

# again this assumes you already connected and logged in
ftp.storbinary("STOR remote_filename.png", f)
</snippet></ROW><ROW><id>15716129</id><snippet>input()</snippet></ROW><ROW><id>15716129</id><snippet>raw_input()</snippet></ROW><ROW><id>15716129</id><snippet>1</snippet></ROW><ROW><id>15716129</id><snippet>input()</snippet></ROW><ROW><id>15716129</id><snippet>int</snippet></ROW><ROW><id>15716350</id><snippet>import requests
requests.put('http://www.somedomain.com:50070/webhdfs/v1/levi/4?op=CREATE')
</snippet></ROW><ROW><id>15716350</id><snippet>httplib</snippet></ROW><ROW><id>15716350</id><snippet>import httplib

connection =  httplib.HTTPConnection('www.somedomain.com:50070')
connection.request('PUT', '/webhdfs/v1/levi/4?op=CREATE')

response = connection.getresponse()
</snippet></ROW><ROW><id>15716541</id><snippet>raw_input</snippet></ROW><ROW><id>15716541</id><snippet>str</snippet></ROW><ROW><id>15716541</id><snippet>int</snippet></ROW><ROW><id>15716541</id><snippet>int</snippet></ROW><ROW><id>15716541</id><snippet>bin</snippet></ROW><ROW><id>15716541</id><snippet>a = bin(int(decimal))
</snippet></ROW><ROW><id>15716541</id><snippet>ValueError</snippet></ROW><ROW><id>15716572</id><snippet>str="ABCD"</snippet></ROW><ROW><id>15716572</id><snippet>str="0x41424344"</snippet></ROW><ROW><id>15716572</id><snippet>s = '\xde\xad\xbe\xef'
</snippet></ROW><ROW><id>15716955</id><snippet>access.log</snippet></ROW><ROW><id>15716955</id><snippet>27.0.0.1 - - [28/Oct/2012:21:38:34 +0530] "GET /phpmyadmin HTTP/1.1" 301 559 "-" "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4"
</snippet></ROW><ROW><id>15716955</id><snippet>awk '$6 ~ /GET/ \
{ gsub("[[]", "", $4); \ 
gsub(":.*", "", $4); \
print $1,$4,$14}' access.log | \

sort -t ' ' -k 2 | \
uniq -c|awk '{print $3,$2}'|uniq -c|awk '{print $3, $2, $1}'
</snippet></ROW><ROW><id>15716955</id><snippet>awk '$6 ~ /GET/ \
{ gsub("[[]", "", $4); \ 
gsub(":.*", "", $4); \
print $1,$4,$14}' access.log | \

sort -t ' ' -k 2 | \
uniq -c|awk '{print $3,$2,$4,$1}'
</snippet></ROW><ROW><id>15716955</id><snippet>GET</snippet></ROW><ROW><id>15716955</id><snippet>[</snippet></ROW><ROW><id>15716955</id><snippet>uniq</snippet></ROW><ROW><id>15716955</id><snippet>awk</snippet></ROW><ROW><id>15716955</id><snippet>28/Oct/2012 127.0.0.1 Linux 1
</snippet></ROW><ROW><id>15717033</id><snippet>python3-matplotlib-tk</snippet></ROW><ROW><id>15717033</id><snippet>tk-dev</snippet></ROW><ROW><id>15717033</id><snippet>python3 setup.py build</snippet></ROW><ROW><id>15717033</id><snippet>python3 setup.py install</snippet></ROW><ROW><id>15717768</id><snippet>mpirun</snippet></ROW><ROW><id>15717768</id><snippet>mpiexec</snippet></ROW><ROW><id>15717768</id><snippet>MPI_COMM_WORLD</snippet></ROW><ROW><id>15717768</id><snippet>mpiexec</snippet></ROW><ROW><id>15717768</id><snippet>$ chmod +x helloworld.py
</snippet></ROW><ROW><id>15717768</id><snippet>$ mpiexec -np 1 python : -np 4 python script.py</snippet></ROW><ROW><id>15717768</id><snippet>script.py</snippet></ROW><ROW><id>15717768</id><snippet>xterm</snippet></ROW><ROW><id>15717768</id><snippet>$ mpiexec -np 5 xterm -e python</snippet></ROW><ROW><id>15717768</id><snippet>xterm</snippet></ROW><ROW><id>15717768</id><snippet>DISPLAY</snippet></ROW><ROW><id>15717768</id><snippet>-x DISPLAY</snippet></ROW><ROW><id>15717768</id><snippet>-genv DISPLAY</snippet></ROW><ROW><id>15717790</id><snippet>bash</snippet></ROW><ROW><id>15717790</id><snippet>/etc/profile</snippet></ROW><ROW><id>15717790</id><snippet>path_helper</snippet></ROW><ROW><id>15717790</id><snippet>PATH</snippet></ROW><ROW><id>15717790</id><snippet>launchctl export</snippet></ROW><ROW><id>15717790</id><snippet>env</snippet></ROW><ROW><id>15717805</id><snippet>import numpy</snippet></ROW><ROW><id>15717805</id><snippet>from matplotlib import font_manager
font_manager.USE_FONTCONFIG = False
</snippet></ROW><ROW><id>15717805</id><snippet>USE_FONTCONFIG = True</snippet></ROW><ROW><id>15717805</id><snippet>subprocess</snippet></ROW><ROW><id>15718028</id><snippet>&gt;&gt;&gt; r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
&gt;&gt;&gt; r.status_code
200
&gt;&gt;&gt; r.headers['content-type']
'application/json; charset=utf8'
&gt;&gt;&gt; r.encoding
'utf-8'
&gt;&gt;&gt; r.text
u'{"type":"User"...'
&gt;&gt;&gt; r.json()
{u'private_gists': 419, u'total_private_repos': 77, ...}
</snippet></ROW><ROW><id>15718056</id><snippet>os.path.islink("2_-_Classical_Mechanics_(seminars)/")
                                                  ^
</snippet></ROW><ROW><id>15718056</id><snippet>islink</snippet></ROW><ROW><id>15718056</id><snippet>True</snippet></ROW><ROW><id>15718056</id><snippet>g@ubuntu:~$ file aaa
aaa: symbolic link to `/etc'
g@ubuntu:~$ file aaa/
aaa/: directory
</snippet></ROW><ROW><id>15718118</id><snippet>dd if=/dev/random of=test1.dat bs=80 count=1
</snippet></ROW><ROW><id>15718118</id><snippet>In [1]: def readfile(name):
   ...:     with open(name) as f:
   ...:         data = f.read()
   ...:     return data
   ...: 
</snippet></ROW><ROW><id>15718118</id><snippet>In [3]: %timeit readfile('test1.dat')
10000 loops, best of 3: 18.1 us per loop
</snippet></ROW><ROW><id>15718118</id><snippet>In [3]: %timeit for i in xrange(1,10): readfile('test{:d}.dat'.format(i))
1000 loops, best of 3: 184 us per loop
</snippet></ROW><ROW><id>15718118</id><snippet>data = []
temp = []
for sn in ['/home/pi/sensoren/sensor{:d}'.format(i) for i in range(1,11)]: 
                                                            #xrange if Python 2.x
    with open(sn) as f:
        data.append(f.read())
# the data list now contains all sensor data
for num, s in enumerate(data):
    # check for CRC
    d = s.strip()
    if d.startswith("YES"):
        t = d.split("t=")
        # populate temp list
        if t[1] == '-62':
            temp.append("00")
        else:
            temp.append(t[1])
</snippet></ROW><ROW><id>15718209</id><snippet>&gt;&gt;&gt; msvcrt.printf("Testing: %s".encode('ascii'), message_string.encode('ascii'))

Testing: Hello World!
22
</snippet></ROW><ROW><id>15718209</id><snippet>python C:\path\to\file
</snippet></ROW><ROW><id>15718449</id><snippet>grid</snippet></ROW><ROW><id>15718449</id><snippet>pack</snippet></ROW><ROW><id>15718449</id><snippet>grid</snippet></ROW><ROW><id>15718449</id><snippet>pack</snippet></ROW><ROW><id>15718515</id><snippet>itertools.combinations</snippet></ROW><ROW><id>15718515</id><snippet>itertools.product</snippet></ROW><ROW><id>15718515</id><snippet>In [7]: a = ["1", "2", "3"]
   ...: b = ["a", "b", "c"]

In [8]: list(filter(lambda t: t[0] &lt; t[1], product(a,b)))
Out[8]: 
[('1', 'a'),
 ('1', 'b'),
 ('1', 'c'),
 ('2', 'a'),
 ('2', 'b'),
 ('2', 'c'),
 ('3', 'a'),
 ('3', 'b'),
 ('3', 'c')]
</snippet></ROW><ROW><id>15718515</id><snippet>l = [['1','2','3'], ['a','b'], ['x','y']] 

set(tuple(sorted(p)) for p in product(*l) if len(set(p)) &gt; 1)
</snippet></ROW><ROW><id>15718515</id><snippet>set([('1', 'a', 'x'),
     ('3', 'a', 'y'),
     ('2', 'b', 'y'),
     ('2', 'a', 'y'),
     ('1', 'a', 'y'),
     ('1', 'b', 'y'),
     ('2', 'a', 'x'),
     ('3', 'b', 'y'),
     ('1', 'b', 'x'),
     ('2', 'b', 'x'),
     ('3', 'a', 'x'),
     ('3', 'b', 'x')])
</snippet></ROW><ROW><id>15718515</id><snippet>l = [[1,2,3], [1,3,4,5]]</snippet></ROW><ROW><id>15718515</id><snippet>set([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 4), (2, 4), (3, 5)])
</snippet></ROW><ROW><id>15718561</id><snippet>import sys, traceback
from spidermonkey import Runtime, JSError

runtime = Runtime()
context = runtime.new_context()

try:
    context.execute( "function test(){ return 'OK' }; \n\ntest2()" )
except JSError as e:
    info = sys.exc_info()

    print "ERROR!"
    for file, lineno, function, text in traceback.extract_tb(info[2]):
        print "line #", lineno, ": ", text
</snippet></ROW><ROW><id>15719059</id><snippet>&gt;&gt;&gt; winners
['Boston Americans', 'World Series Not Played in 1904', 'New York', 'Chicago', 'Chicago', 'Chicago', 'Pittsburgh', 'Philadelphia', 'Philadelphia', 'Boston', 'Philadelphia', 'Boston', 'Boston', 'Boston']
</snippet></ROW><ROW><id>15719059</id><snippet>enumerate</snippet></ROW><ROW><id>15719059</id><snippet>&gt;&gt;&gt; list(enumerate(winners, 1903))
[(1903, 'Boston Americans'), (1904, 'World Series Not Played in 1904'), (1905, 'New York'), (1906, 'Chicago'), (1907, 'Chicago'), (1908, 'Chicago'), (1909, 'Pittsburgh'), (1910, 'Philadelphia'), (1911, 'Philadelphia'), (1912, 'Boston'), (1913, 'Philadelphia'), (1914, 'Boston'), (1915, 'Boston'), (1916, 'Boston')]
</snippet></ROW><ROW><id>15719059</id><snippet>&gt;&gt;&gt; dict(enumerate(winners, 1903))
{1903: 'Boston Americans', 1904: 'World Series Not Played in 1904', 1905: 'New York', 1906: 'Chicago', 1907: 'Chicago', 1908: 'Chicago', 1909: 'Pittsburgh', 1910: 'Philadelphia', 1911: 'Philadelphia', 1912: 'Boston', 1913: 'Philadelphia', 1914: 'Boston', 1915: 'Boston', 1916: 'Boston'}
&gt;&gt;&gt; ['{}:{}'.format(winner, year) for year, winner in enumerate(winners, 1903)]
['Boston Americans:1903', 'World Series Not Played in 1904:1904', 'New York:1905', 'Chicago:1906', 'Chicago:1907', 'Chicago:1908', 'Pittsburgh:1909', 'Philadelphia:1910', 'Philadelphia:1911', 'Boston:1912', 'Philadelphia:1913', 'Boston:1914', 'Boston:1915', 'Boston:1916']
</snippet></ROW><ROW><id>15719059</id><snippet>in YYYY</snippet></ROW><ROW><id>15719059</id><snippet>def strip_year(winner, year):
    in_year = ' in {}'.format(year)
    if winner.endswith(in_year):
        winner = winner[:-len(in_year)]
    return winner
</snippet></ROW><ROW><id>15719059</id><snippet>&gt;&gt;&gt; {year: strip_year(winner, year) for year, winner in enumerate(winners, 1903)}
{1903: 'Boston Americans', 1904: 'World Series Not Played', 1905: 'New York', 1906: 'Chicago', 1907: 'Chicago', 1908: 'Chicago', 1909: 'Pittsburgh', 1910: 'Philadelphia', 1911: 'Philadelphia', 1912: 'Boston', 1913: 'Philadelphia', 1914: 'Boston', 1915: 'Boston', 1916: 'Boston'}
</snippet></ROW><ROW><id>15719167</id><snippet>Ordered.reset_index().merge(Ordered, Unordered, on=ByWhatColumn).set_index('index')
</snippet></ROW><ROW><id>15719243</id><snippet>__call__</snippet></ROW><ROW><id>15719243</id><snippet>class FunctionLike(object):
    def __call__(self, a):
        print "I got called with %r!" % (a,)

fn = FunctionLike()
fn(10)

# --&gt; I got called with 10!
</snippet></ROW><ROW><id>15719340</id><snippet>&gt;&gt;&gt; x = raw_input("Int array")
Int array&gt;? 1 2 3
&gt;&gt;&gt; map(int, x.split())
[1, 2, 3]
</snippet></ROW><ROW><id>15719359</id><snippet>(x1, y1), (x2, y2), (x3, y3) = vertices
</snippet></ROW><ROW><id>15719359</id><snippet>&gt;&gt;&gt; vertices = [(1,2), (3, 4), (5, 6)]
&gt;&gt;&gt; (x1, y1), (x2, y2), (x3, y3) = vertices
&gt;&gt;&gt; print x1, y1, x2, y2, x3, y3
1 2 3 4 5 6
</snippet></ROW><ROW><id>15719559</id><snippet>self.tags + ['tag']</snippet></ROW><ROW><id>15719559</id><snippet>self.tags</snippet></ROW><ROW><id>15719559</id><snippet>self.tags.append</snippet></ROW><ROW><id>15719559</id><snippet>tags</snippet></ROW><ROW><id>15719559</id><snippet>tags</snippet></ROW><ROW><id>15719917</id><snippet>from operator import itemgetter

def sortLinesPoints(data):
    if isinstance(data, dict):
        if 'children' in data:
            sortLinesPoints(data['children'])
    else:
        for elem in data:
            sortLinesPoints(elem)
        data.sort(key=itemgetter('type'))
</snippet></ROW><ROW><id>15720116</id><snippet>for status in statuses</snippet></ROW><ROW><id>15720116</id><snippet>for status in statuses</snippet></ROW><ROW><id>15720116</id><snippet>"1,Some summary"</snippet></ROW><ROW><id>15720160</id><snippet>if 100 &lt;= bet &lt;= 20000 and bet%100 == 0:
    print bet,"Your bet has been accepted"
else:
    print bet,"Please enter a valid bet"
</snippet></ROW><ROW><id>15720161</id><snippet>def update ():
    a=2
    print (a)

a=1
update ()
print (a)
# prints 2 then 1
</snippet></ROW><ROW><id>15720161</id><snippet>def update ():
    global a
    a=2
    print (a)

a=1
update ()
print (a)
# prints 2 then 2
</snippet></ROW><ROW><id>15720189</id><snippet>pip</snippet></ROW><ROW><id>15720189</id><snippet>easy_install</snippet></ROW><ROW><id>15720189</id><snippet>$ pip install -i https://restricted.crate.io/ coverage
</snippet></ROW><ROW><id>15720251</id><snippet>(array != 0).sum()
</snippet></ROW><ROW><id>15720372</id><snippet>version = '1.0'
parser.add_argument('--version', action='version', version='%(prog)s {}'.format(version))
</snippet></ROW><ROW><id>15720448</id><snippet>Message</snippet></ROW><ROW><id>15720448</id><snippet>topology</snippet></ROW><ROW><id>15720448</id><snippet>topology</snippet></ROW><ROW><id>15720448</id><snippet>Message</snippet></ROW><ROW><id>15720448</id><snippet>__init__</snippet></ROW><ROW><id>15720448</id><snippet>Node</snippet></ROW><ROW><id>15720448</id><snippet>Message</snippet></ROW><ROW><id>15720621</id><snippet>User</snippet></ROW><ROW><id>15720621</id><snippet>__init__.py</snippet></ROW><ROW><id>15720621</id><snippet>Helper/__init_.py</snippet></ROW><ROW><id>15720621</id><snippet>Controller/__init__.py</snippet></ROW><ROW><id>15720621</id><snippet>from . import User
</snippet></ROW><ROW><id>15720621</id><snippet>import ShutterDeck.Controller.User
import ShutterDeck.Helper.User

u1=ShutterDeck.Controller.User.User()
u2=ShutterDeck.Helper.User.User()
</snippet></ROW><ROW><id>15720621</id><snippet>as</snippet></ROW><ROW><id>15720621</id><snippet>from ShutterDeck.Controller import User as ControllerUser
from ShutterDeck.Helper import User as HelperUser

u1 = ControllerUser.User()
u2 = HelperUser.User()
</snippet></ROW><ROW><id>15720816</id><snippet>re.sub('(ORANGE)',r' \1 APPLE', str)</snippet></ROW><ROW><id>15720873</id><snippet>from datetime import datetime

D = {'28.10.11/D/text1/' : {'key':'value1'},
     '27.01.11/D/text2/' : {'key':'value2'},
     '07.11.12/D/text3/' : {'key':'value3'}}

for k in sorted(D,key=lambda k: datetime.strptime(k[:8],"%d.%m.%y")):
    print(k,D[k])
</snippet></ROW><ROW><id>15720873</id><snippet>27.01.11/D/text2/ {'key': 'value2'}
28.10.11/D/text1/ {'key': 'value1'}
07.11.12/D/text3/ {'key': 'value3'}
</snippet></ROW><ROW><id>15720873</id><snippet>from datetime import datetime
from pprint import pprint

L = [('28.10.11/D/text1/' , {'key':'value1'}),
     ('27.01.11/D/text2/' , {'key':'value2'}),
     ('07.11.12/D/text3/' , {'key':'value3'})]

L.sort(key=lambda k: datetime.strptime(k[0][:8],"%d.%m.%y"))
pprint(L)
</snippet></ROW><ROW><id>15720873</id><snippet>[('27.01.11/D/text2/', {'key': 'value2'}),
 ('28.10.11/D/text1/', {'key': 'value1'}),
 ('07.11.12/D/text3/', {'key': 'value3'})]
</snippet></ROW><ROW><id>15720873</id><snippet>from collections import OrderedDict
from datetime import datetime
from pprint import pprint

D = {'28.10.11/D/text1/' : {'key':'value1'},
     '27.01.11/D/text2/' : {'key':'value2'},
     '07.11.12/D/text3/' : {'key':'value3'}}

OD = OrderedDict(sorted(D.items(),
                 key=lambda k: datetime.strptime(k[0][:8],"%d.%m.%y"))
pprint(OD)
</snippet></ROW><ROW><id>15720873</id><snippet>{'27.01.11/D/text2/': {'key': 'value2'},
 '28.10.11/D/text1/': {'key': 'value1'},
 '07.11.12/D/text3/': {'key': 'value3'}}
</snippet></ROW><ROW><id>15721106</id><snippet>[list_A[i] for i in list_B]
</snippet></ROW><ROW><id>15721106</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>15721106</id><snippet>list(operator.itemgetter(*list_B)(list_A))
</snippet></ROW><ROW><id>15721106</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; list_A = [1,3,4,54,3,5,6,2,6,77,73,39]
&gt;&gt;&gt; list_B = [0,3,2,8]
&gt;&gt;&gt; [list_A[i] for i in list_B]
[1, 54, 4, 6]
&gt;&gt;&gt; list(operator.itemgetter(*list_B)(list_A))
[1, 54, 4, 6]
</snippet></ROW><ROW><id>15721641</id><snippet>import json

class MultiDimensionalArrayEncoder(json.JSONEncoder):
    def encode(self, obj):
        def hint_tuples(item):
            if isinstance(item, tuple):
                return {'__tuple__': True, 'items': item}
            if isinstance(item, list):
                return [hint_tuples(e) for e in item]
            else:
                return item

        return super(MultiDimensionalArrayEncoder, self).encode(hint_tuples(obj))

def hinted_tuple_hook(obj):
    if '__tuple__' in obj:
        return tuple(obj['items'])
    else:
        return obj


enc = MultiDimensionalArrayEncoder()
jsonstring =  enc.encode([1, 2, (3, 4), [5, 6, (7, 8)]])

print jsonstring

# [1, 2, {"items": [3, 4], "__tuple__": true}, [5, 6, {"items": [7, 8], "__tuple__": true}]]

print json.loads(jsonstring, object_hook=hinted_tuple_hook)

# [1, 2, (3, 4), [5, 6, (7, 8)]]
</snippet></ROW><ROW><id>15721790</id><snippet>color = colorchooser.askcolor()
color_name = color[1]    #to pick up the color name in HTML notation, i.e. the 2nd element of the tuple returned by the colorchooser
root.configure(background=color_name)
</snippet></ROW><ROW><id>15722095</id><snippet>def add_localizer(event):
    request = event.request
    languages = ('en','us','es')
    deflang = 'pt'
    # CHECK current page
    if 'page' in request.matchdict:
        currentpage = DBSession.query(Pages).filter_by(url=request.matchdict['page']).first()
        #SET pages languages
        languages = currentpage.Languages.split(',')
        deflang = currentpage.defLang
    #-----  CHANGED   ----------------------
    dln = default_locale_negotiator(request)
    if not dln or dln not in languages:
        #set the default language 
        request._LOCALE_ = deflang
    localizer = get_localizer(request)
    request.lang = localizer.locale_name
    def auto_translate(string):
        return localizer.translate(self.tsf(string))
    request.localizer = localizer
    request.translate = auto_translate
</snippet></ROW><ROW><id>15722386</id><snippet>parameters = cgi.FieldStorage()
a = parameters[name]
print a
</snippet></ROW><ROW><id>15722420</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>15722420</id><snippet>from collections import defaultdict
my_list = [('tag_A', 100), ('tag_A', 200), ('tag_A', 300), ('tag_A', 400), ('tag_B', 400), ('tag_B', 600)]

d = defaultdict(list)
for tag, num in my_list:
    d[tag].append(num)
</snippet></ROW><ROW><id>15722420</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; my_list = [('tag_A', 100), ('tag_A', 200), ('tag_A', 300), ('tag_A', 400), ('tag_B', 400), ('tag_B', 600)]
&gt;&gt;&gt; 
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for tag, num in my_list:
...     d[tag].append(num)
... 
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(dict(d))
{'tag_A': [100, 200, 300, 400], 'tag_B': [400, 600]}
&gt;&gt;&gt; 
&gt;&gt;&gt; pprint({k: sum(v) for k, v in d.iteritems()})
{'tag_A': 1000, 'tag_B': 1000}
</snippet></ROW><ROW><id>15722420</id><snippet>def summarize_by_tag(d):
    for k, v in d.iteritems():
        print k, sum(v)

&gt;&gt;&gt; summarize_by_tag(d)
tag_A 1000
tag_B 1000
</snippet></ROW><ROW><id>15722507</id><snippet>In [1]: import numpy as np

In [2]: a = np.array([[00,01], [10,11], [20,21], [30,31], [40,41], [50,51]])

In [3]: w = np.hstack((a[:-2],a[1:-1],a[2:]))

In [4]: w
Out[4]: 
array([[ 0,  1, 10, 11, 20, 21],
       [10, 11, 20, 21, 30, 31],
       [20, 21, 30, 31, 40, 41],
       [30, 31, 40, 41, 50, 51]])
</snippet></ROW><ROW><id>15722507</id><snippet>def window_stack(a, stepsize=1, width=3):
    n = a.shape[0]
    return np.hstack( a[i:1+n+i-width:stepsize] for i in range(0,width) )
</snippet></ROW><ROW><id>15722507</id><snippet>a.ndim = 2</snippet></ROW><ROW><id>15722507</id><snippet>def window_stack(a, stepsize=1, width=3):
    return np.hstack( a[i:1+i-width or None:stepsize] for i in range(0,width) )
</snippet></ROW><ROW><id>15722590</id><snippet>run</snippet></ROW><ROW><id>15722590</id><snippet>signal.alarm</snippet></ROW><ROW><id>15722590</id><snippet>SIGALRM</snippet></ROW><ROW><id>15722590</id><snippet>run</snippet></ROW><ROW><id>15722590</id><snippet>run</snippet></ROW><ROW><id>15722590</id><snippet>multiprocessing</snippet></ROW><ROW><id>15722590</id><snippet>signal.alarm</snippet></ROW><ROW><id>15722590</id><snippet>import signal

class TimeoutException(Exception):
    pass

def alarm_handler(*args):
    raise TimeoutException()

def tryrun(func, timeout=30):
    oldhandler = signal.signal(signal.SIGALRM, alarm_handler)
    try:
        signal.alarm(timeout)
        func()
    except TimeoutException:
        print "Timeout"
    else:
        print "Success"
    finally:
        signal.alarm(0) # disarm alarm
        signal.signal(signal.SIGALRM, oldhandler)

import time
tryrun(lambda: time.sleep(10), 5) # prints Timeout
tryrun(lambda: time.sleep(2), 5)  # prints Success
</snippet></ROW><ROW><id>15722610</id><snippet>sock.bind((UDP_IP, UDP_PORT))
</snippet></ROW><ROW><id>15722610</id><snippet>UDP_IP</snippet></ROW><ROW><id>15722610</id><snippet>sock.bind(('', UDP_PORT))
</snippet></ROW><ROW><id>15722610</id><snippet>''</snippet></ROW><ROW><id>15722610</id><snippet>bind</snippet></ROW><ROW><id>15722853</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-
value_text1 = u'ąść'
print value_text1
</snippet></ROW><ROW><id>15722974</id><snippet>index.app</snippet></ROW><ROW><id>15723075</id><snippet>self.print_slide_value(slider.get())</snippet></ROW><ROW><id>15723075</id><snippet>None</snippet></ROW><ROW><id>15723075</id><snippet>def print_slide_value():
    print slider.get()
button_cheat = tki.Button(slider_window, text='Print Value', command=print_slide_value)
</snippet></ROW><ROW><id>15723075</id><snippet>slider = tki.Scale(slider_window, from_=100, to=1000, orient=tki.HORIZONTAL)
</snippet></ROW><ROW><id>15723186</id><snippet>connect</snippet></ROW><ROW><id>15723186</id><snippet>clientPrivateKey = paramiko.RSAKey.from_private_key_file(...)
transport = paramiko.Transport(...)
knownServerKey = 'ssh-rsa AAblablabla'.split(' ', 3)
transport.start_client()
serverKey = transport.get_remote_server_key()
if serverKey.get_name() == knownServerKey[0] and serverKey.get_base64() == knownServerKey[1]:
    # Valid key
    transport.auth_publickey('username', clientPrivateKey)
    channel = transport.open_channel('...')
else:
    # Invalid key
</snippet></ROW><ROW><id>15723186</id><snippet>connect</snippet></ROW><ROW><id>15723186</id><snippet>hostkey</snippet></ROW><ROW><id>15723186</id><snippet>connect</snippet></ROW><ROW><id>15723346</id><snippet>response = requests.post("http://api.bf3stats.com/pc/player/", opt, data=player)</snippet></ROW><ROW><id>15723447</id><snippet>for a in range(1, 999):
    for b in range(1, 1000 - a):
        c = 1000 - (a + b)
        if a * a + b * b == c * c:
            print a, b, c
</snippet></ROW><ROW><id>15723447</id><snippet>for a in range(1, 999):
    for b in range(a, 1000 - a):
        c = 1000 - (a + b)
        if a * a + b * b == c * c:
            print a, b, c
</snippet></ROW><ROW><id>15723447</id><snippet>c=(1000-(a+b)</snippet></ROW><ROW><id>15723585</id><snippet>class A(object):
   def __init__(self, arg=None):
      self.startvalue = list(arg) if arg is not None else list()
      # making a defensive copy of arg to keep the original intact
</snippet></ROW><ROW><id>15723746</id><snippet>V</snippet></ROW><ROW><id>15723746</id><snippet>A</snippet></ROW><ROW><id>15723746</id><snippet>import sys

A = {
    1: [2, 4],
    2: [1, 5],
    3: [4, 5],
    4: [1, 3, 5],
    5: [2, 3, 4],
    6: []
}

num_vertices = len(A)
sys.setrecursionlimit(num_vertices + 2)

mark = [None] * (num_vertices + 1)
cur_path = []

def DFS(vertex, cur_mark = 1):
    mark[vertex] = cur_mark
    global cur_path
    cur_path.append(vertex)
    for neighbour in A[vertex]:
        if not mark[neighbour]:
            DFS(neighbour, 3 - cur_mark)
        elif mark[neighbour] == cur_mark:
            print 'Found a loop of odd length: ', cur_path[cur_path.index(neighbour):]
            sys.exit(0)

    cur_path = cur_path[:-1]

# Visit all connected components
for vertex in xrange(1, num_vertices + 1):
    if not mark[vertex]:
        DFS(vertex)

print 'Cycle of odd length not found'
</snippet></ROW><ROW><id>15723807</id><snippet>def walk(node,parent=None,func=None):
  for child in list(node.get('children',[])):
    walk(child,parent=node,func=func)
  if func is not None:
    func(node,parent=parent)

def removeEmptyFolders(node,parent):
  if node.get('type') == 'Folder' and len(node.get('children',[])) == 0:
    parent['children'].remove(node)

d = {'children': [{'children': [{'key': 'group-1',
                         'name': 'PRD',
                         'parent': 'dc-1',
                         'type': 'Folder'},
                        {'children': [{'key': 'group-11',
                                       'name': 'App1',
                                       'parent': 'group-2',
                                       'type': 'Folder'}],
                         'key': 'group-2',
                         'name': 'QA',
                         'parent': 'dc-1',
                         'type': 'Folder'},
                        {'key': 'group-3',
                         'name': 'Keep',
                         'parent': 'dc-1',
                         'type': 'Host'}],
           'key': 'dc-1',
           'name': 'ABC',
           'parent': 'root',
           'type': 'Datacenter'}],
'key': 'root',
'name': 'Datacenters',
'parent': None,
'type': 'Folder'}
</snippet></ROW><ROW><id>15723807</id><snippet>parent['children'].remove(child)</snippet></ROW><ROW><id>15723807</id><snippet>for child in list(node.get('children',[]))</snippet></ROW><ROW><id>15723807</id><snippet>walk</snippet></ROW><ROW><id>15723807</id><snippet>&gt;&gt;&gt; walk(d,func=removeEmptyFolders)
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(d)
{'children': [{'children': [{'key': 'group-3',
                             'name': 'Keep',
                             'parent': 'dc-1',
                             'type': 'Host'}],
               'key': 'dc-1',
               'name': 'ABC',
               'parent': 'root',
               'type': 'Datacenter'}],
 'key': 'root',
 'name': 'Datacenters',
 'parent': None,
 'type': 'Folder'}
</snippet></ROW><ROW><id>15723905</id><snippet>astype</snippet></ROW><ROW><id>15723905</id><snippet>df['col_name'] = df['col_name'].astype(object)
</snippet></ROW><ROW><id>15723905</id><snippet>df = df.astype(object)
</snippet></ROW><ROW><id>15723955</id><snippet>#!/usr/bin/env python3
import sys
from datetime import date, timedelta

def gen_calendar(year=None):
    if year is None:
        year = date.today().year

    current = date(year, 1, 1)
    delta   = timedelta(days=1)

    while current.year == year:
        yield current.strftime('%a %b %d')
        current += delta

if __name__ == '__main__':
    year = None
    if len(sys.argv) &gt; 1:
        year = int(sys.argv[1])

    for str_date in gen_calendar(year):
        print(str_date)
</snippet></ROW><ROW><id>15723955</id><snippet>    with open('calendar.txt', 'w') as f:
        for str_date in gen_calendar(year):
            print(str_date, file=f)
</snippet></ROW><ROW><id>15723979</id><snippet>map(lambda e: e.method(), myList)
</snippet></ROW><ROW><id>15723979</id><snippet>[e.method() for e in myList]
</snippet></ROW><ROW><id>15723979</id><snippet>range(len(collection))</snippet></ROW><ROW><id>15724280</id><snippet>Toplevel</snippet></ROW><ROW><id>15724280</id><snippet>main2</snippet></ROW><ROW><id>15724280</id><snippet>class main2(Toplevel):
    def __init__(self):
        Toplevel.__init__(self)
        self.frame= Frame(self, width=80, height=50)
        self.label = Label(self.frame, text='this is another frame')
        self.frame.grid()
        self.label.grid()
</snippet></ROW><ROW><id>15724280</id><snippet>Button</snippet></ROW><ROW><id>15724280</id><snippet>class main1:
    def __init__(self, master):
        # ...
        self.cont = Button(frame,text="Menu option 1", command=self.open_main2).grid(row=1)
    def open_main2(self):
        prac2_link.main2()
</snippet></ROW><ROW><id>15724465</id><snippet>number = 1
elements = 1000

thelist = [number] * elements
</snippet></ROW><ROW><id>15724465</id><snippet>&gt;&gt;&gt; [1] * 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</snippet></ROW><ROW><id>15724465</id><snippet>In [23]: a = [[0]] * 10

In [24]: a
Out[24]: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]

In [25]: a[0][0] = 1

In [26]: a
Out[26]: [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]
</snippet></ROW><ROW><id>15724465</id><snippet>numpy.repeat</snippet></ROW><ROW><id>15724482</id><snippet>from sage.all import *
</snippet></ROW><ROW><id>15724482</id><snippet>sage -python /path/to/my/script.py
</snippet></ROW><ROW><id>15724482</id><snippet>sage</snippet></ROW><ROW><id>15724482</id><snippet>sage -python</snippet></ROW><ROW><id>15724539</id><snippet>http_proxy</snippet></ROW><ROW><id>15724750</id><snippet>from Tkinter import *

def getpwd():
    password = ''
    root = Tk()
    pwdbox = Entry(root, show = '*')
    def onpwdentry(evt):
         password = pwdbox.get()
         root.destroy()
    def onokclick():
         password = pwdbox.get()
         root.destroy()
    Label(root, text = 'Password').pack(side = 'top')

    pwdbox.pack(side = 'top')
    pwdbox.bind('&lt;Return&gt;', onpwdentry)
    Button(root, command=onokclick, text = 'OK').pack(side = 'top')

    root.mainloop()
    return password
</snippet></ROW><ROW><id>15724761</id><snippet>command</snippet></ROW><ROW><id>15724761</id><snippet>add_radiobutton</snippet></ROW><ROW><id>15724761</id><snippet>onvalue</snippet></ROW><ROW><id>15724761</id><snippet>offvalue</snippet></ROW><ROW><id>15724761</id><snippet>value</snippet></ROW><ROW><id>15725037</id><snippet>import signal
for sig in ("SIGINT", "SIGTERM", "SIGQUIT", "SIGILL", "SIGPIPE"):
    sig = getattr(signal,sig)
    signal.signal(sig, signal_handler)
</snippet></ROW><ROW><id>15725037</id><snippet>import signal</snippet></ROW><ROW><id>15725037</id><snippet>signal.SIGNALNAME</snippet></ROW><ROW><id>15725037</id><snippet>signal.SIGQUIT</snippet></ROW><ROW><id>15725037</id><snippet>for sig in (signal.SIGINT, signal.SIGTERM, signal.SIGQUIT, ...):
    signal.signal(sig,signal_handler)
</snippet></ROW><ROW><id>15725037</id><snippet>from signal import signal, SIGINT, SIGTERM, SIGQUIT, SIGILL, SIGPIPE
</snippet></ROW><ROW><id>15725037</id><snippet>signal</snippet></ROW><ROW><id>15725037</id><snippet>signal</snippet></ROW><ROW><id>15725037</id><snippet>signal.signal</snippet></ROW><ROW><id>15725037</id><snippet>for sig in (SIGINT, SIGTERM, SIGQUIT, SIGILL, SIGPIPE):
    signal(sig, signal_handler)
</snippet></ROW><ROW><id>15725037</id><snippet>signal</snippet></ROW><ROW><id>15725099</id><snippet>numpy.hstack</snippet></ROW><ROW><id>15725099</id><snippet>a = np.zeros((1000,2))
b = np.zeros((1000,1))
c = np.hstack((a,b))
</snippet></ROW><ROW><id>15725104</id><snippet>select
    name,
    sum(count)
from sample s
where flag = false
and (added &gt; (select max(added)
    from sample
    where name = 'abcd1'
    and flag = true)
    OR
    not exists (
        select *
        from sample
        where name = 'abcd1'
        and flag = true)
    )
and name = 'abcd1'
</snippet></ROW><ROW><id>15725104</id><snippet>OR not exists</snippet></ROW><ROW><id>15725104</id><snippet>flag=true</snippet></ROW><ROW><id>15725169</id><snippet>a = {"a"}</snippet></ROW><ROW><id>15725169</id><snippet>and</snippet></ROW><ROW><id>15725169</id><snippet>or</snippet></ROW><ROW><id>15725169</id><snippet>|</snippet></ROW><ROW><id>15725169</id><snippet>&amp;</snippet></ROW><ROW><id>15725169</id><snippet>set()</snippet></ROW><ROW><id>15725169</id><snippet>a &amp; b</snippet></ROW><ROW><id>15725169</id><snippet>a = 5 and 6</snippet></ROW><ROW><id>15725169</id><snippet>6</snippet></ROW><ROW><id>15725169</id><snippet>True</snippet></ROW><ROW><id>15725262</id><snippet>IsChecked(self, index)
</snippet></ROW><ROW><id>15725342</id><snippet>python ./script.py
</snippet></ROW><ROW><id>15725342</id><snippet>python script.py
</snippet></ROW><ROW><id>15725342</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>15725342</id><snippet>./script.py</snippet></ROW><ROW><id>15725342</id><snippet>os.path.dirname</snippet></ROW><ROW><id>15725342</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>15725342</id><snippet>script.py</snippet></ROW><ROW><id>15725342</id><snippet>os.path.dirname</snippet></ROW><ROW><id>15725379</id><snippet>if not dircheck.endswith(os.sep):
    homedir = dircheck + os.sep
else:
    dircheck = homedir
</snippet></ROW><ROW><id>15725379</id><snippet>os.path.join</snippet></ROW><ROW><id>15725379</id><snippet>os.path.join(dircheck, "")
</snippet></ROW><ROW><id>15725379</id><snippet># Unix

In [31]: os.path.join("asd/", "")
Out[31]: 'asd/'

In [32]: os.path.join("asd", "")
Out[32]: 'asd/'

# Windows

&gt;&gt;&gt; os.path.join("asdasd/", "")
'asdasd/'
&gt;&gt;&gt; os.path.join("asdasd\\", "")
'asdasd\\'
&gt;&gt;&gt; os.path.join("asdasd", "")
'asdasd\\'
</snippet></ROW><ROW><id>15725477</id><snippet>len(srcPts)</snippet></ROW><ROW><id>15725477</id><snippet>range</snippet></ROW><ROW><id>15725477</id><snippet>srcPts</snippet></ROW><ROW><id>15725477</id><snippet>while i &lt; len(srcPts):


  ....
</snippet></ROW><ROW><id>15725559</id><snippet>len(v) == len(nc)</snippet></ROW><ROW><id>15725559</id><snippet>node_color : color string, or array of floats
   Node color. Can be a single color format string (default='r'),
   or a  sequence of colors with the same length as nodelist.
   If numeric values are specified they will be mapped to
   colors using the cmap and vmin,vmax parameters.  See
   matplotlib.scatter for more details.
</snippet></ROW><ROW><id>15725559</id><snippet>len(v) != 3</snippet></ROW><ROW><id>15725559</id><snippet>nc</snippet></ROW><ROW><id>15725559</id><snippet>len(v) == 3</snippet></ROW><ROW><id>15725559</id><snippet>nc</snippet></ROW><ROW><id>15725559</id><snippet>jet</snippet></ROW><ROW><id>15725559</id><snippet>for k,v in node_list_dict.iteritems():
   nc = colors[int(k)-1]
   if len(v) == 3:
       nc = nc +  (1,)
   nx.draw_networkx_nodes(G, pos, nodelist=v, node_color=nc)
</snippet></ROW><ROW><id>15725559</id><snippet>nc</snippet></ROW><ROW><id>15725559</id><snippet>draw_network_nodes</snippet></ROW><ROW><id>15725559</id><snippet>scatter</snippet></ROW><ROW><id>15725559</id><snippet>scatter</snippet></ROW><ROW><id>15725650</id><snippet>np.sqrt(np.sum(a*a, axis=0))
</snippet></ROW><ROW><id>15725666</id><snippet>if ele not in lista and ele not in listb:
    # do stuff
</snippet></ROW><ROW><id>15725666</id><snippet>if ele not in lista + listb:
    # do stuff
</snippet></ROW><ROW><id>15725666</id><snippet>itertools</snippet></ROW><ROW><id>15725666</id><snippet>from itertools import chain
if ele not in chain(lista, listb):
    # do stuff
</snippet></ROW><ROW><id>15725666</id><snippet>set</snippet></ROW><ROW><id>15725666</id><snippet>O(1)</snippet></ROW><ROW><id>15725666</id><snippet>O(n)</snippet></ROW><ROW><id>15725666</id><snippet>items_set = set(chain(lista, listb))
if ele in items_set:  # this membership check will be a lot faster
    # do stuff
</snippet></ROW><ROW><id>15725696</id><snippet>public</snippet></ROW><ROW><id>15725696</id><snippet>private</snippet></ROW><ROW><id>15725696</id><snippet>def incrementA(self, node):
  if node.name == "Node A": self.valueOfA += 1
  else: raise ValueError("node is not authorized to increment A")
</snippet></ROW><ROW><id>15725696</id><snippet>++</snippet></ROW><ROW><id>15725696</id><snippet>+=</snippet></ROW><ROW><id>15725879</id><snippet>if item[i] == 'CC'</snippet></ROW><ROW><id>15725879</id><snippet>item[i]</snippet></ROW><ROW><id>15725879</id><snippet>boundary = boundary.append(item)</snippet></ROW><ROW><id>15725879</id><snippet>.append</snippet></ROW><ROW><id>15725879</id><snippet>None</snippet></ROW><ROW><id>15725879</id><snippet>boundary.append(item)</snippet></ROW><ROW><id>15725879</id><snippet>return [item.replace('CC', 'C.C') for item in L]</snippet></ROW><ROW><id>15725880</id><snippet>DoublyLinkedList</snippet></ROW><ROW><id>15725880</id><snippet>__iter__</snippet></ROW><ROW><id>15725880</id><snippet>ListIterator</snippet></ROW><ROW><id>15725880</id><snippet>ListIterator</snippet></ROW><ROW><id>15725880</id><snippet>__init__</snippet></ROW><ROW><id>15725880</id><snippet>next</snippet></ROW><ROW><id>15725880</id><snippet>size</snippet></ROW><ROW><id>15725880</id><snippet>def ListIterator(object):
    def __init__(self, node):
        self.current = node

    def __iter__(self):
        return self

    def next(self):
        if self.current is None:
            raise StopIteration()

        result = self.current.data
        self.current = self.current.next

        return result

class DoublyLinkedList(object):

    # all your current stuff, plus:

    def __iter__(self):
        return ListIterator(self.head)
</snippet></ROW><ROW><id>15725880</id><snippet>object</snippet></ROW><ROW><id>15725880</id><snippet>__next__</snippet></ROW><ROW><id>15725880</id><snippet>next</snippet></ROW><ROW><id>15725973</id><snippet>[^ ]*</snippet></ROW><ROW><id>15725973</id><snippet>*</snippet></ROW><ROW><id>15725973</id><snippet>match = re.findall(r'([^ ]*)\/PERSON', string)
</snippet></ROW><ROW><id>15726212</id><snippet>import wikimarkup
import pandas as pd
from pyquery import PyQuery

def get_tables(wiki):
    html = PyQuery(wikimarkup.parse(wiki))
    frames = []
    for table in html('table'):
        data = [[x.text.strip() for x in row]
                for row in table.getchildren()]
        df = pd.DataFrame(data[1:], columns=data[0])
        frames.append(df)
    return frames
</snippet></ROW><ROW><id>15726212</id><snippet>wiki = """
=Title=

Description.

{| class="wikitable sortable"
|-
! Model !! Mhash/s !! Mhash/J !! Watts !! Clock !! SP !! Comment
|-
| ION || 1.8 || 0.067 || 27 ||  || 16 || poclbm;  power consumption incl. CPU
|-
| 8200 mGPU || 1.2 || || || 1200 || 16 || 128 MB shared memory, "poclbm -w 128 -f 0"
|-
| 8400 GS || 2.3 || || || || || "poclbm -w 128"
|-
|}

{| class="wikitable sortable"
|-
! A !! B !! C
|-
| 0
| 1
| 2
|-
| 3
| 4
| 5
|}
"""
</snippet></ROW><ROW><id>15726212</id><snippet>get_tables</snippet></ROW><ROW><id>15726212</id><snippet>       Model Mhash/s Mhash/J Watts Clock  SP                                     Comment
0        ION     1.8   0.067    27        16        poclbm;  power consumption incl. CPU
1  8200 mGPU     1.2                1200  16  128 MB shared memory, "poclbm -w 128 -f 0"
2    8400 GS     2.3                                                     "poclbm -w 128"
</snippet></ROW><ROW><id>15726212</id><snippet>   A  B  C
0  0  1  2
1  3  4  5
</snippet></ROW><ROW><id>15726222</id><snippet>%module simplelibswig
%{
    extern "C" {
        struct _simplelib_my_type { int _unused; };
        #include "simplelib.h"
    }
%}

struct _simplelib_my_type { int _unused; };
%include "simplelib.h"
</snippet></ROW><ROW><id>15726222</id><snippet>%newobject simplelib_mytype_create;
%delobject simplelib_mytype_destroy;
%include "simplelib.h"
</snippet></ROW><ROW><id>15726222</id><snippet>simplelib_mytype_create</snippet></ROW><ROW><id>15726222</id><snippet>simplelib_mytype_destroy</snippet></ROW><ROW><id>15726222</id><snippet>%extend</snippet></ROW><ROW><id>15726222</id><snippet>%rename</snippet></ROW><ROW><id>15726222</id><snippet>%module simplelibswig
%{
    struct _simplelib_my_type { int _unused; };
    #include "simplelib.h"
%}

%rename(opaque) _simplelib_my_type;

struct _simplelib_my_type { int _unused; };
%newobject simplelib_mytype_create;
%delobject simplelib_mytype_destroy;
%include "simplelib.h"

%extend _simplelib_my_type {
    _simplelib_my_type(double a,double b) { return simplelib_mytype_create(a,b); }
    %apply double *OUTPUT { double* res };
    int calc(double z, double *res) { return simplelib_mytype_calc($self,z,res); }
    ~_simplelib_my_type() { simplelib_mytype_destroy($self); }
}
</snippet></ROW><ROW><id>15726222</id><snippet>&gt;&gt;&gt; import simplelibswig
&gt;&gt;&gt; simplelibswig.opaque(1.2,3.4)
&lt;simplelibswig.opaque; proxy of &lt;Swig Object of type 'simplelib_MyType *' at 0x0000000002872DE0&gt; &gt;
&gt;&gt;&gt; a=simplelibswig.opaque(1.2,3.4)
&gt;&gt;&gt; a.calc(3.4)
[1, 1.2]
&gt;&gt;&gt; a.calc(1.2)
[1, 3.4000000000000004]
</snippet></ROW><ROW><id>15726327</id><snippet>django-filer</snippet></ROW><ROW><id>15726355</id><snippet>PyModule_New</snippet></ROW><ROW><id>15726355</id><snippet>__new__</snippet></ROW><ROW><id>15726355</id><snippet>types.ModuleType</snippet></ROW><ROW><id>15726355</id><snippet>PyModule_New</snippet></ROW><ROW><id>15726355</id><snippet>import.c</snippet></ROW><ROW><id>15726355</id><snippet>/* Get the module object corresponding to a module name.
First check the modules dictionary if there's one there,
if not, create a new one and insert it in the modules dictionary.
Because the former action is most common, THIS DOES NOT RETURN A
'NEW' REFERENCE! */

PyImport_AddModule(const char *name)
{
    PyObject *modules = PyImport_GetModuleDict();
    PyObject *m;

    if ((m = PyDict_GetItemString(modules, name)) != NULL &amp;&amp;
        PyModule_Check(m))
        return m;
    m = PyModule_New(name);
    if (m == NULL)
        return NULL;
    if (PyDict_SetItemString(modules, name, m) != 0) {
        Py_DECREF(m);
        return NULL;
    }
    Py_DECREF(m); /* Yes, it still exists, in modules! */

    return m;
}
</snippet></ROW><ROW><id>15726355</id><snippet>import types

mymodule = types.ModuleType("mymodule")
mymodule.foo = "foo"
</snippet></ROW><ROW><id>15726355</id><snippet>sys.modules</snippet></ROW><ROW><id>15726355</id><snippet>import sys

sys.modules["mymodule"] = mymodule
</snippet></ROW><ROW><id>15726355</id><snippet>mymodule</snippet></ROW><ROW><id>15726373</id><snippet>pdb</snippet></ROW><ROW><id>15726373</id><snippet>python app.py</snippet></ROW><ROW><id>15726430</id><snippet>with open("sth.bin", "rb") as f:
    numbers = [
        struct.unpack('d', chunk)[0]
        for chunk in iter(lambda: f.read(8), "")
    ]
</snippet></ROW><ROW><id>15726430</id><snippet>struct.unpack('d' * 8, chunk)</snippet></ROW><ROW><id>15726430</id><snippet>numbers = []
struct_4096 = struct.Struct("d" * 4096 / 8)
with open("sth.bin", "rb") as f:
    while True:
        chunk = f.read(4096)
        try:
            numbers.extend(struct_4096.unpack(chunk))
        except struct.error:
            numbers.extend(struct.unpack("d" * len(chunk) / 8))
</snippet></ROW><ROW><id>15726712</id><snippet>list</snippet></ROW><ROW><id>15726712</id><snippet>&gt;&gt;&gt; from nltk.corpus import wordnet as wn
&gt;&gt;&gt; wn.synsets('disbelieve')
[Synset('disbelieve.v.01')]
</snippet></ROW><ROW><id>15726966</id><snippet>minutes = self.hour.get()</snippet></ROW><ROW><id>15726966</id><snippet>minutes = self.minutes.get()</snippet></ROW><ROW><id>15726966</id><snippet>self.timer_init</snippet></ROW><ROW><id>15726966</id><snippet>self.countdown(10)</snippet></ROW><ROW><id>15726966</id><snippet>self.countdown(self.totalTime)</snippet></ROW><ROW><id>15726966</id><snippet>self.totalTime = hoursToSeconds + minutesToSeconds + seconds</snippet></ROW><ROW><id>15726966</id><snippet>seconds</snippet></ROW><ROW><id>15726966</id><snippet>int</snippet></ROW><ROW><id>15726966</id><snippet>self.timerLab = Tkinter.Label(self, text="", width=10).pack()
</snippet></ROW><ROW><id>15726966</id><snippet>pack()</snippet></ROW><ROW><id>15726966</id><snippet>None</snippet></ROW><ROW><id>15726966</id><snippet>self.timerLab = Tkinter.Label(self, text="", width=10)
self.timerLab.pack()
</snippet></ROW><ROW><id>15727192</id><snippet>csv</snippet></ROW><ROW><id>15727192</id><snippet>import os
import csv

csvfile = open('outputFileName.csv', 'wb')
writer = csv.writer(csvfile)

for filename in os.listdir('/'): # or C:\\ if on Windows
    writer.writerow([filename, len(filename)])

csvfile.close()
</snippet></ROW><ROW><id>15727198</id><snippet>seconds -= 1</snippet></ROW><ROW><id>15727198</id><snippet>self.timerLab.configure(text="Time Remaining: %d:%d:%d " % (hours,minutes,seconds))</snippet></ROW><ROW><id>15727342</id><snippet>raw_input</snippet></ROW><ROW><id>15727342</id><snippet>string</snippet></ROW><ROW><id>15727342</id><snippet>name = raw_input('Set name: ')
password = raw_input('Set password: ')
</snippet></ROW><ROW><id>15727342</id><snippet>,</snippet></ROW><ROW><id>15727342</id><snippet>,</snippet></ROW><ROW><id>15727342</id><snippet>"</snippet></ROW><ROW><id>15727413</id><snippet>def printAlbum(albums):
        for year in albums:
                print year, albums[year]

printAlbum(
{ 2002: 'by the way', 1999: 'californication', 2006:'stadium arcadium'}
)
</snippet></ROW><ROW><id>15727558</id><snippet>re.UNICODE</snippet></ROW><ROW><id>15727558</id><snippet>re.UNICODE
Make \w, \W, \b, \B, \d, \D, \s and \S dependent on the Unicode character 
properties database.
</snippet></ROW><ROW><id>15727558</id><snippet>tweet = u"//@lilei: dd //@Bob: cc//@Girl: dd//@魏武: 利益所致 自然念念不忘// @诺什: 吸引优质  客户，摆脱屌丝男！！！//@MarkGreene: 转发微博"
RTpattern = r'''//?@(\w+)'''
for word in re.findall(RTpattern, tweet, re.UNICODE):
    print word

# lilei
# Bob
# Girl
# 魏武
# MarkGreene
</snippet></ROW><ROW><id>15727840</id><snippet>    print "Content-Type: text/html"     # HTML is following
    print                               # blank line, end of headers
</snippet></ROW><ROW><id>15727914</id><snippet>Set&lt;T&gt;</snippet></ROW><ROW><id>15727914</id><snippet>.contains</snippet></ROW><ROW><id>15727914</id><snippet>isItemInSet</snippet></ROW><ROW><id>15727914</id><snippet>Set</snippet></ROW><ROW><id>15727914</id><snippet>HashSet&lt;T&gt;</snippet></ROW><ROW><id>15727914</id><snippet>isItemInSet</snippet></ROW><ROW><id>15727914</id><snippet>HashSet&lt;T&gt;</snippet></ROW><ROW><id>15727914</id><snippet>set()</snippet></ROW><ROW><id>15727938</id><snippet>gtk.main()</snippet></ROW><ROW><id>15727938</id><snippet>gtk.gdk.threads_enter()</snippet></ROW><ROW><id>15727938</id><snippet>gtk.gdk.threads_leave()</snippet></ROW><ROW><id>15727938</id><snippet>gtk.gdk.thread_init()</snippet></ROW><ROW><id>15728215</id><snippet>gtk.gdk.threads_init()</snippet></ROW><ROW><id>15728215</id><snippet>from gi.repository import Gdk
Gdk.threads_init()
</snippet></ROW><ROW><id>15728215</id><snippet>GObject.idle_add</snippet></ROW><ROW><id>15728215</id><snippet>"""Show a shell command's output in a gtk.TextView without freezing the UI"""

import os
import locale
import subprocess
import shlex
import gi.repository.Gtk as gtk
from gi.repository import GObject
PIPE = subprocess.PIPE

encoding = locale.getpreferredencoding()


def utf8conv(x):
    return unicode(x, encoding).encode('utf8')


class MyWindow:
    def __init__(self):
        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.PolicyType.AUTOMATIC, gtk.PolicyType.AUTOMATIC)
        textview = gtk.TextView()
        textbuffer = textview.get_buffer()
        sw.add(textview)
        win = gtk.Window()
        win.resize(300, 500)
        win.connect('delete-event', gtk.main_quit)

        self.button_sim = gtk.Button(u"Press me!")
        self.button_abort = gtk.Button("Abort")
        self.button_quit = gtk.Button("Quit")

        command = 'ls -R %s' % (os.getcwd(),)
        self.button_sim.connect(
            "clicked", self.on_button_clicked, textview, textbuffer, command)
        self.button_abort.connect("clicked", self.on_abort)
        self.button_quit.connect("clicked", self.main_quit)

        vbox = gtk.VBox()
        vbox.pack_start(self.button_sim, expand=False, fill=False, padding=0)
        vbox.pack_start(self.button_abort, expand=False, fill=False, padding=0)
        vbox.pack_start(self.button_quit, expand=False, fill=False, padding=0)
        vbox.pack_start(sw, expand=True, fill=True, padding=0)
        win.add(vbox)
        win.show_all()

    def read_output(self, view, buffer, command):
        yield True  # allow the UI to refresh
        proc = subprocess.Popen(
            shlex.split(command), stderr=PIPE, stdout=PIPE)
        while True:
            if self.job_aborted:
                print('user aborted')
                proc.terminate()
                break

            try:
                line = proc.stdout.readline()
                if line:
                    it = buffer.get_end_iter()
                    buffer.place_cursor(it)
                    buffer.insert(it, utf8conv(line))
                    view.scroll_to_mark(buffer.get_insert(), 0.1,
                                        use_align=False, xalign=0.5, yalign=0.5)

            except IOError:
                pass

            yield True

        yield False

    def on_button_clicked(self, button, view, buffer, command):
        self.job_aborted = False
        GObject.idle_add(self.read_output(view, buffer, command).next)

    def on_abort(self, button):
        self.job_aborted = True

    def main_quit(self, obj):
        self.job_aborted = True
        gtk.main_quit()


if __name__ == "__main__":
    app = MyWindow()
    gtk.main()
</snippet></ROW><ROW><id>15728228</id><snippet>Queue</snippet></ROW><ROW><id>15728228</id><snippet>Queue</snippet></ROW><ROW><id>15728228</id><snippet>Queue</snippet></ROW><ROW><id>15728228</id><snippet>Queue</snippet></ROW><ROW><id>15728228</id><snippet>get()</snippet></ROW><ROW><id>15728278</id><snippet>run</snippet></ROW><ROW><id>15728278</id><snippet>myFunc</snippet></ROW><ROW><id>15728278</id><snippet>multiprocessing</snippet></ROW><ROW><id>15728278</id><snippet>multiprocessing</snippet></ROW><ROW><id>15728440</id><snippet>from urllib import quote_plus as urlquote
from sqlalchemy.engine import create_engine
engineString = 'postgresql://wberg:%s@localhost/mydatabase' % urlquote('pass/word')
engine = create_engine(engineString)
</snippet></ROW><ROW><id>15729006</id><snippet>&lt;div class="agendaright"&gt;</snippet></ROW><ROW><id>15729006</id><snippet>from bs4 import BeautifulSoup
import urllib2
html = urllib2.urlopen("http://www.auc.nl/news-events/events-and-lectures/events-and-lectures.html","r")
soup = BeautifulSoup(html)

all = soup.find('div',class_="agendaright")
time = all.find('span',class_="event-time").text
# u'18:00 - 20:00'
title = all.h3.text
# u'Images Without Borders Violence, Visuality, and Landscape in Postwar Ambon, Indonesia'
feature = all.find('span',class_="feature").text
# u' | Lecture'
description = all.find('p',class_="event-description").text
# u'This lecture explores the thematization of the visual and expansion of\nits terrain exemplified by the gigantic hijacked billboards with Jesus\nfaces and the painted murals with Christian themes which arose during\nthe ...'

l = [time,title,feature,description]
</snippet></ROW><ROW><id>15729077</id><snippet>h</snippet></ROW><ROW><id>15729077</id><snippet>/</snippet></ROW><ROW><id>15729077</id><snippet>(.*):(?!/)
</snippet></ROW><ROW><id>15729077</id><snippet>result = regex.search('[^:]*(?=:[^/])', some_string)
result.group()
</snippet></ROW><ROW><id>15729091</id><snippet>class Foo():
  name = 'name'
  foo_objects = {}
...
</snippet></ROW><ROW><id>15729091</id><snippet>class Foo():
  def __init__(self):
    self.name = 'name'
    self.foo_objects = {}
...
</snippet></ROW><ROW><id>15729217</id><snippet>os.system(''.join(['start "', os.environ['ProgramFiles'], '\\eMule\\emule.exe', '"']))</snippet></ROW><ROW><id>15729217</id><snippet>start</snippet></ROW><ROW><id>15729313</id><snippet>file=open(filename,'r')
for i in range(6):file.readline()   #skipping 6 lines
items=file.readline().split()
</snippet></ROW><ROW><id>15729313</id><snippet>logTime=float(item[0])
</snippet></ROW><ROW><id>15729313</id><snippet>items=[]
while len(items)&lt;nrequired:items.extend(file.readline().split())
</snippet></ROW><ROW><id>15729313</id><snippet>file=open(filename,'r')
file.write(' '.join([repr(x) for x in (v1,v2,v3)])+'\n')
</snippet></ROW><ROW><id>15729313</id><snippet>file.write(('%.14g'+(' %.14g'*2)+'\n')%(v1,v2,v3)) 
                            (need to count how many values you have to put the "*2" )
</snippet></ROW><ROW><id>15729369</id><snippet>S[c2].isdigit() == True</snippet></ROW><ROW><id>15729369</id><snippet>y</snippet></ROW><ROW><id>15729369</id><snippet>False</snippet></ROW><ROW><id>15729369</id><snippet>y = False
for c2 in range(1, 5, 2):
    if S[c2].isdigit():
       y = True
</snippet></ROW><ROW><id>15729369</id><snippet>== True</snippet></ROW><ROW><id>15729369</id><snippet>if</snippet></ROW><ROW><id>15729369</id><snippet>if cond</snippet></ROW><ROW><id>15729369</id><snippet>bool(cond)</snippet></ROW><ROW><id>15729369</id><snippet>True</snippet></ROW><ROW><id>15729369</id><snippet>cond</snippet></ROW><ROW><id>15729369</id><snippet>True</snippet></ROW><ROW><id>15729369</id><snippet>range</snippet></ROW><ROW><id>15729369</id><snippet>In [1]: list(range(0, 4, 2))
Out[1]: [0, 2]
</snippet></ROW><ROW><id>15729369</id><snippet>In [2]: list(range(0, 5, 2))
Out[2]: [0, 2, 4]
</snippet></ROW><ROW><id>15729369</id><snippet>def postValidate(s):
    s = s.replace(' ', '')
    if len(s) == 6 and s[0:5:2].isalpha() and s[1:6:2].isdigit():
       return s.upper()
    return False
</snippet></ROW><ROW><id>15729462</id><snippet>def _create_curl(self, request, post_fields):
    curl = pycurl.Curl()
    curl.setopt(curl.URL, request)
    curl.setopt(curl.WRITEFUNCTION, self.write_out) # now passing own method
    curl.setopt(curl.TIMEOUT, 20)
    # Below is the important bit, I am now adding each curl object to a list
    self.curl_storage.append(curl)
    return curl
</snippet></ROW><ROW><id>15729462</id><snippet>def write_out(self, data):
        print 'Data len', len(data)
        print data
        return len(data)
</snippet></ROW><ROW><id>15729683</id><snippet>message</snippet></ROW><ROW><id>15729683</id><snippet>__main__</snippet></ROW><ROW><id>15729683</id><snippet>mod1</snippet></ROW><ROW><id>15729683</id><snippet>message</snippet></ROW><ROW><id>15729683</id><snippet>message</snippet></ROW><ROW><id>15729683</id><snippet>mod1</snippet></ROW><ROW><id>15729683</id><snippet>import sys

class A(object):
  def test(self):
    print message

class B(A):
  pass

if __name__ == "__main__":
  import mod2
  message = "hello"
  sys.modules["mod1"].message = message
  A().test()
  B().test()
  mod2.C().test()
</snippet></ROW><ROW><id>15729683</id><snippet>class A(object):
  def test(self):
    print message

class B(A):
  pass

def main():
  global message
  message = "hello"
  A().test()
  B().test()

  # resolve circular import by importing in local scope
  import mod2
  mod2.C().test()

if __name__ == "__main__":
  # break into mod1 namespace from __main__ namespace
  import mod1
  mod1.main()
</snippet></ROW><ROW><id>15729875</id><snippet>sphinx_jsgf2fsg -jsgf grammar.jsgf -fsg grammar.fsg
</snippet></ROW><ROW><id>15729875</id><snippet>    g_object_set(G_OBJECT(filter), "lm", MODELDIR "/lm/en/turtle.DMP", NULL);
</snippet></ROW><ROW><id>15729875</id><snippet>    g_object_set(G_OBJECT(filter), "fsg", 
         "pocketsphinx/test/data/goforward.fsg", NULL);
</snippet></ROW><ROW><id>15729875</id><snippet>    asr.set_property("fsg", "pocketsphinx/test/data/goforward.fsg")
</snippet></ROW><ROW><id>15730057</id><snippet>Image.mode</snippet></ROW><ROW><id>15730057</id><snippet>Image.info</snippet></ROW><ROW><id>15730057</id><snippet>&lt;image&gt;.convert('RGB')</snippet></ROW><ROW><id>15730239</id><snippet>wx.ListCtrl</snippet></ROW><ROW><id>15730239</id><snippet>OnCheckItem</snippet></ROW><ROW><id>15730239</id><snippet>import wx
from wx.lib.mixins import listctrl as listmix

class CheckListCtrl(wx.ListCtrl, listmix.CheckListCtrlMixin):
    def __init__(self, *args, **kwargs):
        super(CheckListCtrl,self).__init__(*args,**kwargs)
        listmix.CheckListCtrlMixin.__init__(self)

        # keep a list of which items are currently selected
        self.current_selections = [False]

    def OnCheckItem(self,index,flag=True):

        # update the list whenever an item is checked or unchecked
        self.current_selections[index] = not self.current_selections[index]

        print "Selected: " + ', '.join(
            [str(ii) for ii,jj in enumerate(self.current_selections) if jj]
        )

    def Append(self,*args,**kwargs):
        super(CheckListCtrl,self).Append(*args,**kwargs)

        # make sure that each new item also has an associated boolean in
        # the list of current selections
        self.current_selections.append(False)

if __name__ == '__main__':
    app = wx.App()
    fr = wx.Frame(None)
    checklist = CheckListCtrl(fr,-1,style=wx.LC_SINGLE_SEL|wx.LC_REPORT)
    checklist.InsertColumn(0,'Selected?')
    checklist.InsertColumn(1,'Item #')

    for ii in xrange(10):
        checklist.Append(('',str(ii)))

    fr.Show(True)
    app.MainLoop()
</snippet></ROW><ROW><id>15730277</id><snippet>super()</snippet></ROW><ROW><id>15730277</id><snippet>class Main(mainFrame):
    def __init__(self):
        mainFrame.__init__(self, None) # using super().__init__(self, None) fails
    def about_click( self, event ):
        print("AboutDialog")

def main():
    app = wx.PySimpleApp(0)
    frame = Main()
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15730277</id><snippet>super()</snippet></ROW><ROW><id>15730277</id><snippet>object</snippet></ROW><ROW><id>15730303</id><snippet>import time
import threading
import datetime as DT
import logging
logger = logging.getLogger(__name__)

def worker(cond):
    i = 0
    while True:
        with cond:
            cond.wait()
            logger.info(i)
            time.sleep(0.01)
            i += 1

logging.basicConfig(level=logging.DEBUG,
                    format='[%(asctime)s %(threadName)s] %(message)s',
                    datefmt='%H:%M:%S')

cond = threading.Condition()
t = threading.Thread(target=worker, args=(cond, ))
t.daemon = True
t.start()

start = DT.datetime.now()
while True:
    now = DT.datetime.now()
    if (now-start).total_seconds() &gt; 60: break
    if now.second % 2:
        with cond:
            cond.notify()
</snippet></ROW><ROW><id>15730446</id><snippet>activate_this = '/vagrant/env/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))

import sys
sys.path.insert(0, '/vagrant/myapp')

from app import app as application
</snippet></ROW><ROW><id>15730446</id><snippet>import app as application</snippet></ROW><ROW><id>15730650</id><snippet>raw_input</snippet></ROW><ROW><id>15730650</id><snippet>np.array</snippet></ROW><ROW><id>15730650</id><snippet>In [17]: np.array('foo')
Out[17]: 
array('foo', 
      dtype='|S3')

In [18]: np.array('abl').shape
Out[18]: ()

In [19]: np.array('abl').dtype
Out[19]: dtype('|S3')
</snippet></ROW><ROW><id>15730650</id><snippet>np.array</snippet></ROW><ROW><id>15730650</id><snippet>import ast
inarray = np.array(ast.literal_eval(inlist))
</snippet></ROW><ROW><id>15731116</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyDialog(QtGui.QWidget):
    def __init__(self, modelSource, parent=None):
        super(MyDialog, self).__init__(parent)

        self.tableView = QtGui.QTableView(self)
        self.tableView.horizontalHeader().setStretchLastSection(True)
        self.tableView.setModel(modelSource)

        self.listView = QtGui.QListView(self)
        self.listView.setModel(modelSource)
        self.listView.setModelColumn(0)

        self.comboBox = QtGui.QComboBox(self)
        self.comboBox.setModel(modelSource)
        self.comboBox.setModelColumn(1)

        self.layoutGrid = QtGui.QGridLayout(self)
        self.layoutGrid.addWidget(self.comboBox, 0, 0, 1, 2)
        self.layoutGrid.addWidget(self.listView, 1, 0, 1, 1)
        self.layoutGrid.addWidget(self.tableView, 1, 1, 1, 1)

class MyWindow(QtGui.QWidget):
    _dialogs = []
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.modelSource = QtGui.QStandardItemModel(self)

        for rowNumber in range(3):
            items = []
            for columnNumber in range(3):
                item = QtGui.QStandardItem()
                item.setText("row: {0} column {1}".format(rowNumber, columnNumber))

                items.append(item)

            self.modelSource.appendRow(items)

        self.labelDialogs = QtGui.QLabel(self)
        self.labelDialogs.setText("Select a number of dialogs to create:")

        self.spinBoxDialogs = QtGui.QSpinBox(self)
        self.spinBoxDialogs.setValue(3)

        self.pushButtonShow = QtGui.QPushButton(self)
        self.pushButtonShow.setText("Show Dialogs!")
        self.pushButtonShow.clicked.connect(self.on_pushButtonShow_clicked)

        self.pushButtonClose = QtGui.QPushButton(self)
        self.pushButtonClose.setText("Close Dialogs")
        self.pushButtonClose.clicked.connect(self.on_pushButtonClose_clicked)

        self.layoutHorizontal = QtGui.QHBoxLayout(self)
        self.layoutHorizontal.addWidget(self.labelDialogs)
        self.layoutHorizontal.addWidget(self.spinBoxDialogs)
        self.layoutHorizontal.addWidget(self.pushButtonShow)
        self.layoutHorizontal.addWidget(self.pushButtonClose)

    @QtCore.pyqtSlot()
    def on_pushButtonShow_clicked(self): 
        self._dialogs = []
        dialogsNumber = self.spinBoxDialogs.value()

        for dialogNumber in range(dialogsNumber):  
            dialog = MyDialog(self.modelSource)
            dialog.show()
            dialog.move(100, 100)

            self._dialogs.append(dialog)

    @QtCore.pyqtSlot()
    def on_pushButtonClose_clicked(self): 
        for dialog in self._dialogs:
            dialog.close()

        self._dialogs = []

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15731139</id><snippet>something = [explorer(x) for x in something]</snippet></ROW><ROW><id>15731139</id><snippet>&gt;&gt;&gt; tree = ['S', ['NP', ['DET', 'There']], ['S', ['VP', ['VERB', 'is'], ['VP', ['NP', ['DET', 'no'], ['NOUN', 'asbestos']], ['VP', ['PP', ['ADP', 'in'], ['NP', ['PRON', 'our'], ['NOUN', 'products']]], ['ADVP', ['ADV', 'now']]]]], ['.', '.']]]
&gt;&gt;&gt; def explorer(something):
        if type(something) == list:
            something = [explorer(x) for x in something]
        else:   # You may want to check other conditions here, like if it's a string
            if something == 'asbestos':
                something = 'Oh my'
            if something == 'S':
                something = 'Z'
        return something

&gt;&gt;&gt; explorer(tree)
['Z', ['NP', ['DET', 'There']], ['Z', ['VP', ['VERB', 'is'], ['VP', ['NP', ['DET', 'no'], ['NOUN', 'Oh my']], ['VP', ['PP', ['ADP', 'in'], ['NP', ['PRON', 'our'], ['NOUN', 'products']]], ['ADVP', ['ADV', 'now']]]]], ['.', '.']]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15731139</id><snippet>for x in aList:
    if x = somethingSpecial:
        x = somethingElse
</snippet></ROW><ROW><id>15731139</id><snippet>for i,x in enumerate(aList):
    if x = somethingSpecial:
        aList[i] = somethingElse
</snippet></ROW><ROW><id>15731139</id><snippet>aList</snippet></ROW><ROW><id>15731139</id><snippet>enumerate()</snippet></ROW><ROW><id>15731139</id><snippet>aList = ['a','b','c']
for i,x in enumerate(aList):
    print(i,x)
</snippet></ROW><ROW><id>15731329</id><snippet>sys.stdout</snippet></ROW><ROW><id>15731329</id><snippet>python -u</snippet></ROW><ROW><id>15731329</id><snippet>python -u test.py &gt; test.out; cat test.out
</snippet></ROW><ROW><id>15731459</id><snippet>python setup.py install</snippet></ROW><ROW><id>15731459</id><snippet>pip install PACKAGE</snippet></ROW><ROW><id>15731459</id><snippet>pip</snippet></ROW><ROW><id>15731459</id><snippet>pip</snippet></ROW><ROW><id>15731459</id><snippet>setup.py</snippet></ROW><ROW><id>15731459</id><snippet>pip</snippet></ROW><ROW><id>15731459</id><snippet>pip uninstall</snippet></ROW><ROW><id>15731459</id><snippet>setup.py</snippet></ROW><ROW><id>15731459</id><snippet>pip</snippet></ROW><ROW><id>15731459</id><snippet>virtualenv</snippet></ROW><ROW><id>15731459</id><snippet>pip</snippet></ROW><ROW><id>15731459</id><snippet>python setup.py install</snippet></ROW><ROW><id>15731613</id><snippet>pairs = zip(*[iter(a)]*2)
</snippet></ROW><ROW><id>15731734</id><snippet>newstuff = {r'\b\ep\b':r'\epsilon',r'\b\other\b':r'\notherthings'}
fixed = []
intheorem = False
for line in source:
    for k,v in newstuff:
        line = re.sub(k, v, line)
    if not line.startswith('\t') and intheorem:
        fixed.append('\end{theorem}')
        intheorem = False
    if line.startswith('\theorem')
        line = '\begin{theorem}'
        intheorem = True
    fixed.append(line)
if intheorem:
    fixed.append('\end{theorem}')
</snippet></ROW><ROW><id>15732104</id><snippet>0.45</snippet></ROW><ROW><id>15732104</id><snippet>In [4]: ['%.20f' % val for val in (0.45, 1.45, 2.45, 3.45, 4.45, 5.45, 6.45, 7.45, 8.45, 9.45)]
Out[4]: 
['0.45000000000000001110',
 '1.44999999999999995559',
 '2.45000000000000017764',
 '3.45000000000000017764',
 '4.45000000000000017764',
 '5.45000000000000017764',
 '6.45000000000000017764',
 '7.45000000000000017764',
 '8.44999999999999928946',
 '9.44999999999999928946']
</snippet></ROW><ROW><id>15732137</id><snippet>self.finish()</snippet></ROW><ROW><id>15732137</id><snippet>@web.asynchronous</snippet></ROW><ROW><id>15732137</id><snippet>@web.asynchronous</snippet></ROW><ROW><id>15732251</id><snippet>plumbum</snippet></ROW><ROW><id>15732251</id><snippet>a*</snippet></ROW><ROW><id>15732251</id><snippet>ls</snippet></ROW><ROW><id>15732251</id><snippet>ls</snippet></ROW><ROW><id>15732251</id><snippet>glob</snippet></ROW><ROW><id>15732251</id><snippet>from glob import glob

ls('-l', *glob('a*'))
</snippet></ROW><ROW><id>15732251</id><snippet>Workdir</snippet></ROW><ROW><id>15732251</id><snippet>from plumbum import local

ls('-l', *local.cwd // 'a*')
</snippet></ROW><ROW><id>15732251</id><snippet>ls['-l'][args]</snippet></ROW><ROW><id>15732251</id><snippet>plumbum 1.1.0</snippet></ROW><ROW><id>15732251</id><snippet>args</snippet></ROW><ROW><id>15732251</id><snippet>from plumbum.cmd import sh

sh('-c', 'ls -l a*')
</snippet></ROW><ROW><id>15732251</id><snippet>glob.glob()</snippet></ROW><ROW><id>15732256</id><snippet>this_year</snippet></ROW><ROW><id>15732256</id><snippet>datetime.date</snippet></ROW><ROW><id>15732256</id><snippet>this_year = DT.date(DT.date.today().year,1,1)
</snippet></ROW><ROW><id>15732256</id><snippet>import sqlite3
import contextlib
import datetime as DT

this_year = (DT.date(DT.date.today().isocalendar()[0], 1, 1))
# this_year = ("'"+str(this_year)+"'")
# this_year = DT.date(DT.date.today().year,1,1)
with contextlib.closing(sqlite3.connect(':memory:')) as conn:
    cursor = conn.cursor()
    sql = '''CREATE TABLE TEST_TABLE
        ("ID" TEXT,
        "DATE_IN" DATE,
        "WEEK_IN" number)
    '''
    cursor.execute(sql)
    sql = 'INSERT INTO TEST_TABLE(ID, DATE_IN, WEEK_IN) VALUES (?,?,?)'
    cursor.executemany(sql, [[1,'2012-03-25',13],[2,'2013-03-25',13],])
    sql = 'SELECT ID FROM TEST_TABLE where WEEK_IN = 13 and DATE_IN &gt; ?'
    cursor.execute(sql, [this_year])
    for row in cursor:
        print(row)
</snippet></ROW><ROW><id>15732256</id><snippet>(u'2',)
</snippet></ROW><ROW><id>15732256</id><snippet>cursor.execute</snippet></ROW><ROW><id>15732256</id><snippet>this_year = str(this_year)
</snippet></ROW><ROW><id>15732256</id><snippet>this_year = ("'"+str(this_year)+"'")
</snippet></ROW><ROW><id>15732256</id><snippet>sqlite3</snippet></ROW><ROW><id>15732256</id><snippet>datetime</snippet></ROW><ROW><id>15732256</id><snippet>In [59]: '2012-03-25' &gt; "'2013-01-01'"
Out[59]: True
</snippet></ROW><ROW><id>15732336</id><snippet>\W</snippet></ROW><ROW><id>15732336</id><snippet>\w</snippet></ROW><ROW><id>15732453</id><snippet>models.BooleanField(blank=True)</snippet></ROW><ROW><id>15732453</id><snippet>ModelForm</snippet></ROW><ROW><id>15732453</id><snippet>forms.BooleanField(required=False)</snippet></ROW><ROW><id>15732463</id><snippet>enumerate</snippet></ROW><ROW><id>15732463</id><snippet>{s: i for i, s in enumerate(lowercase, 1)}
</snippet></ROW><ROW><id>15732561</id><snippet>dtype=object</snippet></ROW><ROW><id>15732561</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; l = [(2011, 1, 10, 'A', 'B', 1500.0), ..., (2011, 12, 20, 'A', 'S', 1200.0),]
&gt;&gt;&gt; a = np.array(l, dtype='object')
&gt;&gt;&gt; a
array([[2011, 1, 10, A, B, 1500.0],
...
       [2011, 12, 20, A, S, 1200.0]], dtype=object)
&gt;&gt;&gt; a.shape
(14, 6)
&gt;&gt;&gt; sum(a[:, -1])
26510.0
</snippet></ROW><ROW><id>15732612</id><snippet>parties = ['NDP', 'Green', 'Liberal', 'CPC']
winning_party = parties[total.index(max(total))]
</snippet></ROW><ROW><id>15732648</id><snippet>settings.py</snippet></ROW><ROW><id>15732648</id><snippet>PASSWORD_HASHERS</snippet></ROW><ROW><id>15732648</id><snippet>User</snippet></ROW><ROW><id>15732777</id><snippet>S, (cl_3, cl_39, cl_11, me_32, m_59, m_81...) = EnumSort(...)
</snippet></ROW><ROW><id>15732777</id><snippet>names = ['cl_3', 'cl_39'...] # don't write this list by hand, if you can avoid it
# eg.: ['cl_{}'.format(i) for i in range(50)] + ['m_{}'.format(i) for i...]

S, values = EnumSort('S', names)

if len(names) != len(values):
    raise Exception('...')

name_to_value = dict(zip(names, values))

# then you can use name_to_value['cl_3'] and so on
</snippet></ROW><ROW><id>15732797</id><snippet>hzcdp01b.ttf</snippet></ROW><ROW><id>15732797</id><snippet>&gt; fc-query hzcdp01b.ttf
Pattern has 15 elts (size 16)
    family: "hzcdp01b"(s)
    slant: 0(i)(s)
    weight: 80(i)(s)
    width: 100(i)(s)
    spacing: 100(i)(s)
    foundry: "unknown"(s)
    file: "hzcdp01b.ttf"(s)
    index: 0(i)(s)
    outline: FcTrue(s)
    scalable: FcTrue(s)
    charset: 
(s)
    lang: (s)
    fontversion: 69632(i)(s)
    fontformat: "TrueType"(s)
    decorative: FcFalse(s)
</snippet></ROW><ROW><id>15732865</id><snippet>numbers = [x, y, z]

sorted_odd_nums = sorted((x for x in enumerate(numbers) if x[1]%2), 
                         key = lambda x:x[1], 
                         reverse=True)

if not sorted_odd_nums:
   # all numbers were even and filtered out.
elif sorted_odd_nums[0][0] == 0:
   # x is the biggest odd number
elif sorted_odd_nums[0][0] == 1:
   # y is the biggest odd number
elif sorted_odd_nums[0][0] == 2:
   # z is the biggest odd number
</snippet></ROW><ROW><id>15732865</id><snippet>enumerate(numbers)</snippet></ROW><ROW><id>15732865</id><snippet>(index, item)</snippet></ROW><ROW><id>15732865</id><snippet>[x, y, z]</snippet></ROW><ROW><id>15732865</id><snippet>x</snippet></ROW><ROW><id>15732865</id><snippet>y</snippet></ROW><ROW><id>15732865</id><snippet>z</snippet></ROW><ROW><id>15732865</id><snippet>(x for x in enumerate(numbers) if x[1]%2)</snippet></ROW><ROW><id>15732865</id><snippet>sort( ... , key=lambda x:x[1], reverse=True)</snippet></ROW><ROW><id>15732865</id><snippet>raw_input</snippet></ROW><ROW><id>15732865</id><snippet>input</snippet></ROW><ROW><id>15732865</id><snippet>number = int(raw_input('enter a number: '))
</snippet></ROW><ROW><id>15732865</id><snippet>if x%2: # x is odd
  if y%2: # y is odd
    if z%2: #z is odd
      if x&gt;y and x&gt;z: #x is the biggest odd number
      elif y&gt;z and y&gt;x: #y is the biggest odd number
      elif z&gt;x and z&gt;y: #z is the biggest odd number

    else: #z is even
      if x&gt;y: #x is the biggest odd number
      else: #y is the biggest odd number
  else: #y is even
    if z%2: #z is odd
...
</snippet></ROW><ROW><id>15733012</id><snippet>runscript</snippet></ROW><ROW><id>15733012</id><snippet>object</snippet></ROW><ROW><id>15733197</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>15733197</id><snippet>html = imported.read()
</snippet></ROW><ROW><id>15733197</id><snippet>html</snippet></ROW><ROW><id>15733571</id><snippet>dict</snippet></ROW><ROW><id>15733571</id><snippet>OrderedDict</snippet></ROW><ROW><id>15733571</id><snippet>dict</snippet></ROW><ROW><id>15733571</id><snippet>OrderedDict</snippet></ROW><ROW><id>15733571</id><snippet>list</snippet></ROW><ROW><id>15733571</id><snippet>tuple</snippet></ROW><ROW><id>15733571</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; od = OrderedDict([((0, 0), [2]), ((0, 1), [1, 9]), ((0, 2), [1, 5, 9])])
&gt;&gt;&gt; od
OrderedDict([((0, 0), [2]), ((0, 1), [1, 9]), ((0, 2), [1, 5, 9])])
</snippet></ROW><ROW><id>15733599</id><snippet>W=""

for i in A:    # for each key in the dictionary
    W+="{0} {1}\n".format(i,A[i])     # Append to W a dictionary key , a space , the value corresponding to that key and start a new line

with open("text.txt","w") as O:
    O.write(W)
</snippet></ROW><ROW><id>15733599</id><snippet>O.write(W)
</snippet></ROW><ROW><id>15733599</id><snippet>O.write(W[0:-1])
</snippet></ROW><ROW><id>15733626</id><snippet>np.asarray</snippet></ROW><ROW><id>15733626</id><snippet>def f(a):
    a = np.asarray(a)
    is_scalar = False if a.ndim &gt; 0 else True
    a.shape = (1,)*(1-a.ndim) + a.shape
    less_than_5 = a[a &lt; 5]
    return (less_than_5 if not is_scalar else
            (less_than_5[0] if less_than_5 else None))

&gt;&gt;&gt; f(4)
4
&gt;&gt;&gt; f(5)
&gt;&gt;&gt; f([3,4,5,6])
array([3, 4])
&gt;&gt;&gt; f([5,6,7])
array([], dtype=int32)
</snippet></ROW><ROW><id>15733647</id><snippet>time.time()</snippet></ROW><ROW><id>15733647</id><snippet>float</snippet></ROW><ROW><id>15733647</id><snippet>sys.float_info</snippet></ROW><ROW><id>15733647</id><snippet>In [2]: sys.float_info
Out[2]: sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
</snippet></ROW><ROW><id>15733647</id><snippet>In [3]: 1.7976931348623157e+308/(3600*24*365.0)
Out[3]: 5.700447535712569e+300
</snippet></ROW><ROW><id>15733661</id><snippet>X,Y = np.mgrid[-10:10,-10:10]
idx = (X**2 + Y**2 &gt; 2)
X, Y = X[idx], Y[idx]
</snippet></ROW><ROW><id>15733661</id><snippet>0</snippet></ROW><ROW><id>15733661</id><snippet>idx = X**2 + Y**2 &gt; 2
X[~idx] = 0
Y[~idx] = 0
</snippet></ROW><ROW><id>15733966</id><snippet>#!/usr/bin/env python
import re

try:
    from urllib2 import urlopen
except ImportError: # Python 3
    from urllib.request import urlopen

from bs4 import BeautifulSoup, NavigableString

def table_after_atoz(tag):
    '''Whether tag is a &lt;table&gt; after an element with id="LUA to Z".'''
    if tag.name == 'table' and 'TableLineupBox' in tag.get('class', ''):
        for tag in tag.previous_elements: # go back
            if not isinstance(tag, NavigableString): # skip strings
                return tag.get('id') == "LUA to Z"

def confirmed_band_links(soup):
    table = soup.find(table_after_atoz) # find A to Z table
    for tr in table.find_all('tr'): # find all rows (including nested tables)
        if tr.find('img', alt="confirmed"): # row with a confirmed band?
            yield tr.find('a', href=re.compile(r'^/festivals/bands')) # a link

def main():
    url = "http://www.efestivals.co.uk/festivals/glastonbury/2013/lineup.shtml"
    soup = BeautifulSoup(urlopen(url))
    for link in confirmed_band_links(soup):
        print("%s\t%s" % (link['href'], link.string))

main()
</snippet></ROW><ROW><id>15734088</id><snippet>class First:
    def __init__(self):
        self.text = "This is a text in First class"
        self.second = Second(self)

class Second:
    def __init__(self, first):
        self.first = first
        print "How to show self.text from First?"
        print self.first.text
</snippet></ROW><ROW><id>15734088</id><snippet>class First:
    def __init__(self):
        self.text = "This is a text in First class"
        self.second = Second(self.text)

class Second:
    def __init__(self, text):
        self.text = text
        print "How to show self.text from First?"
        print self.text
</snippet></ROW><ROW><id>15734088</id><snippet>class First(object):
    @property
    def text(self):
        "get text from self.second"
        return self.second.text

    def __init__(self):
        self.second = Second("This is a text in First class")
        print self.text

class Second:
    def __init__(self, text):
        self.text = text
        print "How to show self.text from First?"
        print self.text
</snippet></ROW><ROW><id>15734118</id><snippet>else</snippet></ROW><ROW><id>15734118</id><snippet>import csv

with open('input.txt', 'rb') as file1:
    file1_data = dict(line.split(None, 2)[1::-1] for line in file1 if line.strip())

with open('data.txt', 'rb') as file2, open('output.txt', 'wb') as outputfile:
    output = csv.writer(outputfile, delimiter='|')
    for line in file2:
        if line[:1] == '&gt;':
            row = line.strip().split('|')
            key = row[0][1:]
            if key in file1_data:
                output.writerow(row + [file1_data[key]])
        else:
            outputfile.write(line)
</snippet></ROW><ROW><id>15734149</id><snippet>version.py</snippet></ROW><ROW><id>15734149</id><snippet>setup.py</snippet></ROW><ROW><id>15734149</id><snippet>MAJOR               = 1
MINOR               = 8
MICRO               = 0

VERSION             = '%d.%d.%d' % (MAJOR, MINOR, MICRO)
</snippet></ROW><ROW><id>15734210</id><snippet>Teams = ['Boston Americans','World Series Not Played in 1904','New York Giants',
         'Chicago White Sox','Chicago Cubs','Chicago Cubs','Pittsburgh Pirates',
         'Philadelphia Athletics']
Year = [1903,1904,1905,1906,1907,1908,1909,1910]

l = zip(Teams, Year)
d = {}
for e in l:
    if e[0] not in d:
        d[e[0]] = [e[1]]
    else:
        d[e[0]].append(e[1])

#Max Item
s = sorted(d.items(), key=lambda x: len(x[1]))[-1]
print("%s - %s" % (s[0], len(s[1])))

# Entire list
for k, v in sorted(d.items(), key=lambda x: -len(x[1])):
    print("%s - %s" % (k, len(v)))
</snippet></ROW><ROW><id>15734217</id><snippet>blog</snippet></ROW><ROW><id>15734217</id><snippet>'blog.my_unique_try_Xymostech.views.my_unique_try_Xymostech'</snippet></ROW><ROW><id>15734217</id><snippet>(r'^my_unique_try_Xymostech/$', 'my_unique_try_Xymostech.views.my_unique_try_Xymostech'),
</snippet></ROW><ROW><id>15734249</id><snippet>sock.bind(("", UDP_PORT)) # could also use "0.0.0.0"
</snippet></ROW><ROW><id>15734251</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math

def ToSI(d):
  incPrefixes = ['k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
  decPrefixes = ['m', 'µ', 'n', 'p', 'f', 'a', 'z', 'y']

  degree = int(math.floor(math.log10(math.fabs(d)) / 3))

  prefix = ''

  if degree!=0:
    ds = degree/math.fabs(degree)
    if ds == 1:
      if degree - 1 &lt; len(incPrefixes):
        prefix = incPrefixes[degree - 1]
      else:
        prefix = incPrefixes[-1]
        degree = len(incPrefixes)

    elif ds == -1:
      if -degree - 1 &lt; len(decPrefixes):
        prefix = decPrefixes[-degree - 1]
      else:
        prefix = decPrefixes[-1]
        degree = -len(decPrefixes)

    scaled = float(d * math.pow(1000, -degree))

    s = "{scaled} {prefix}".format(scaled=scaled, prefix=prefix)

  else:
    s = "{d}".format(d=d)

  return(s)

if __name__ == "__main__":
  d = 23392342.1
  print(ToSI(d))
</snippet></ROW><ROW><id>15734251</id><snippet>23.3923421 M
</snippet></ROW><ROW><id>15734406</id><snippet>In [24]: index = np.array([4,2,3,1])

In [25]: blah = np.array([[1], [2], [3], [4], [5]])

In [26]: blah[index]
Out[26]:
array([[5],
       [3],
       [4],
       [2]])
</snippet></ROW><ROW><id>15734769</id><snippet>&gt;&gt;&gt; from collections import Counter

&gt;&gt;&gt; Counter('abracadbra').most_common(2)
[('a', 4), ('r', 2)]

&gt;&gt;&gt; Counter([1,2,1,3,3,4]).most_common(2)
[(1, 2), (3, 2)]
</snippet></ROW><ROW><id>15735146</id><snippet>import logging
logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>15735146</id><snippet>logger.debug('My message with %s', 'variable data')
</snippet></ROW><ROW><id>15735146</id><snippet>loggerA = logging.getLogger(__name__ + '.A')
loggerB = logging.getLogger(__name__ + '.B')
</snippet></ROW><ROW><id>15735146</id><snippet>loggerA</snippet></ROW><ROW><id>15735146</id><snippet>loggerB</snippet></ROW><ROW><id>15735146</id><snippet>def main():
    "your program code"

if __name__ == '__main__':
    import logging.config
    logging.config.fileConfig('/path/to/logging.conf')
    main()
</snippet></ROW><ROW><id>15735146</id><snippet>def main():
    import logging.config
    logging.config.fileConfig('/path/to/logging.conf')
    # your program code

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15735146</id><snippet>fileConfig()</snippet></ROW><ROW><id>15735146</id><snippet>disable_existing_loggers=False</snippet></ROW><ROW><id>15735146</id><snippet>True</snippet></ROW><ROW><id>15735146</id><snippet>fileConfig()</snippet></ROW><ROW><id>15735146</id><snippet>False</snippet></ROW><ROW><id>15735146</id><snippet>dictConfig()</snippet></ROW><ROW><id>15735146</id><snippet>fileConfig()</snippet></ROW><ROW><id>15735177</id><snippet>command</snippet></ROW><ROW><id>15735177</id><snippet>self.autoAddWidget(frame, x,0)</snippet></ROW><ROW><id>15735177</id><snippet>from tkinter import *

class Prac:

    def autoAddWidget(self):
        self.entryField = Entry(self.frame,text="Entry Field")
        self.entryField.grid(row=self.x, column=0)
        self.x+=1

    def __init__(self, master):
        self.frame = Frame(master, width=60, height=50)
        self.frame.pack()

        self.x=1
        self.addWidgetButton = Button(self.frame, text="Add new widget", command=self.autoAddWidget)
        self.addWidgetButton.grid(row=0, column=0)


root = Tk()
app = Prac(root)
root.mainloop()
</snippet></ROW><ROW><id>15735200</id><snippet>txt='"Adler; David L. (San Jose, CA)", "Albert; Richard D. (San Ramon, CA)", "Albert; Richard D. (San Ramon, CA) , Reyna; David L. (San Ramon, CA)", "Amano; Masaharu (Ibaraki, JP )"'
import re
for s in re.findall(r'[^\s",(][^",(]*\([^)]*\)', txt):
    print s
</snippet></ROW><ROW><id>15735200</id><snippet>Adler; David L. (San Jose, CA)
Albert; Richard D. (San Ramon, CA)
Albert; Richard D. (San Ramon, CA)
Reyna; David L. (San Ramon, CA)
Amano; Masaharu (Ibaraki, JP )
</snippet></ROW><ROW><id>15735200</id><snippet>[^\s",(]</snippet></ROW><ROW><id>15735200</id><snippet>[^",(]*</snippet></ROW><ROW><id>15735200</id><snippet>\(</snippet></ROW><ROW><id>15735200</id><snippet>[^)]*</snippet></ROW><ROW><id>15735200</id><snippet>\)</snippet></ROW><ROW><id>15735290</id><snippet>newlist[0-8]</snippet></ROW><ROW><id>15735290</id><snippet>newlist[-8]</snippet></ROW><ROW><id>15735290</id><snippet>newlist[0 and 1 and 2 and 3]</snippet></ROW><ROW><id>15735290</id><snippet>newlist[0]</snippet></ROW><ROW><id>15735290</id><snippet>any</snippet></ROW><ROW><id>15735290</id><snippet>while any(int(newsublist[1]) != 2 for newsublist in newlist):
</snippet></ROW><ROW><id>15735418</id><snippet>dtype</snippet></ROW><ROW><id>15735418</id><snippet>dtype</snippet></ROW><ROW><id>15735418</id><snippet>import numpy as np
a = np.array([('Bob','4.56'), ('Sam','5.22'),('Amy', '1.22')], dtype = [('name','S3'),('val',float)])
</snippet></ROW><ROW><id>15735418</id><snippet>a</snippet></ROW><ROW><id>15735418</id><snippet>dtype</snippet></ROW><ROW><id>15735418</id><snippet>In [21]: a = np.array([('Bob','4.56'), ('Sam','5.22'),('Amy', '1.22')],
    ...:         dtype = [('name','S3'),('val',float)])

In [22]: a
Out[22]: 
array([('Bob', 4.56), ('Sam', 5.22), ('Amy', 1.22)], 
      dtype=[('name', 'S3'), ('val', '&lt;f8')])

In [23]: a['val']
Out[23]: array([ 4.56,  5.22,  1.22])

In [24]: a['name']
Out[24]: 
array(['Bob', 'Sam', 'Amy'], 
      dtype='|S3')
</snippet></ROW><ROW><id>15735517</id><snippet>&gt;&gt;&gt; Decimal.from_float(3.35)
Decimal('3.350000000000000088817841970012523233890533447265625')
&gt;&gt;&gt; Decimal.from_float(4.35)
Decimal('4.3499999999999996447286321199499070644378662109375')
</snippet></ROW><ROW><id>15735736</id><snippet>.close()</snippet></ROW><ROW><id>15735736</id><snippet>from sqlobject import *
import os

# Create and open connection to a database file.
sqlhub.processConnection = connectionForURI('sqlite:path_to_db')

#do something with connection
pass

#close connection
sqlhub.processConnection.close()

#delete database
os.remove(path_to_db)
</snippet></ROW><ROW><id>15735736</id><snippet>close</snippet></ROW><ROW><id>15735736</id><snippet>file</snippet></ROW><ROW><id>15735736</id><snippet>sqlobject</snippet></ROW><ROW><id>15735736</id><snippet>processConnection</snippet></ROW><ROW><id>15735753</id><snippet>if __name__ == '__main__':
    with open('flightevent.out.1', 'r') as original:
        data = (line.strip().split(';') for line in original)
    output_data = sort_table(data, 1)[1:]
    open('flightevent.sorted.out.1', 'a') as out:
        for line in output_data:
            print &gt;&gt; out, line
</snippet></ROW><ROW><id>15735768</id><snippet>OptionMenu</snippet></ROW><ROW><id>15735768</id><snippet>    ...

    thirtyMonthList = [4,6,9,11]

    initialMonth = IntVar(self)
    initialMonth.set(1)
    initialDay = IntVar(self)
    initialDay.set(1)

    def removeDayOptionMenu():
        self.om.destroy()

    def setDayList(event):
        removeDayOptionMenu()
        if initialMonth.get() == 2:
            addDayOptionMenu(range(1,29))
        elif initialMonth.get() in thirtyMonthList:
            addDayOptionMenu(range(1,31))
        else:
            addDayOptionMenu(range(1,32))

    def addDayOptionMenu(dayList):
        self.om = OptionMenu(self, initialDay, *dayList)
        self.om.grid(row=1)

    self.om2 = OptionMenu(self, initialMonth, *range(1,12), command = setDayList)
    self.om2.grid(row=0)
    self.om = OptionMenu(self, initialDay, *range(1,32))
    self.om.grid(row=1)
</snippet></ROW><ROW><id>15735855</id><snippet>offset</snippet></ROW><ROW><id>15735855</id><snippet>In [162]: text = "March 1st 2013 ntp[22485] Time server offset -.0070 sec"

In [181]: text.rfind('offset')
Out[181]: 38
</snippet></ROW><ROW><id>15735855</id><snippet>'offset '</snippet></ROW><ROW><id>15735855</id><snippet>In [183]: text[text.rfind('offset ')+len('offset '):]
Out[183]: '-.0070 sec'
</snippet></ROW><ROW><id>15735855</id><snippet>text</snippet></ROW><ROW><id>15735855</id><snippet>In [179]: text.rpartition('offset ')
Out[179]: ('March 1st 2013 ntp[22485] Time server ', 'offset ', '-.0070 sec')
In [169]: text.rpartition('offset ')[-1]
Out[169]: '-.0070 sec'
</snippet></ROW><ROW><id>15735855</id><snippet>'offset '</snippet></ROW><ROW><id>15735855</id><snippet>In [180]: text.rsplit('offset ', 1)
Out[180]: ['March 1st 2013 ntp[22485] Time server ', '-.0070 sec']
In [172]: text.rsplit('offset ', 1)[1]
Out[172]: '-.0070 sec'
</snippet></ROW><ROW><id>15735855</id><snippet>1</snippet></ROW><ROW><id>15735855</id><snippet>text.rsplit('offset ', 1)</snippet></ROW><ROW><id>15735855</id><snippet>rsplit</snippet></ROW><ROW><id>15735855</id><snippet>text</snippet></ROW><ROW><id>15735855</id><snippet>rfind</snippet></ROW><ROW><id>15735855</id><snippet>rsplit</snippet></ROW><ROW><id>15735855</id><snippet>rpartition</snippet></ROW><ROW><id>15735855</id><snippet>text</snippet></ROW><ROW><id>15735855</id><snippet>'offset '</snippet></ROW><ROW><id>15736052</id><snippet>from Tkinter import*

root = Tk()
root.geometry('500x500+100+100')

image1 = PhotoImage(file = 'Image.gif')

canvas = Canvas(root, width = 500, height = 400, bg = 'white')
canvas.pack
imageFinal = canvas.create_image(300, 300, image = image1)

def move():
    canvas.move(imageFinal, 0, 22)  
    canvas.update()

button = Button(text = 'move', height = 3, width = 10, command = move)
button.pack(side = 'bottom', padx = 5, pady = 5)

root.mainloop()
</snippet></ROW><ROW><id>15736094</id><snippet>mark</snippet></ROW><ROW><id>15736094</id><snippet>if-loop</snippet></ROW><ROW><id>15736094</id><snippet>mark</snippet></ROW><ROW><id>15736094</id><snippet>print()</snippet></ROW><ROW><id>15736094</id><snippet>mark</snippet></ROW><ROW><id>15736094</id><snippet>'some_integer'</snippet></ROW><ROW><id>15736094</id><snippet>mark</snippet></ROW><ROW><id>15736094</id><snippet>-1</snippet></ROW><ROW><id>15736094</id><snippet>int</snippet></ROW><ROW><id>15736094</id><snippet>mark</snippet></ROW><ROW><id>15736094</id><snippet>if</snippet></ROW><ROW><id>15736094</id><snippet>input</snippet></ROW><ROW><id>15736094</id><snippet>'-1'</snippet></ROW><ROW><id>15736094</id><snippet>-1</snippet></ROW><ROW><id>15736094</id><snippet>if</snippet></ROW><ROW><id>15736094</id><snippet>elif</snippet></ROW><ROW><id>15736317</id><snippet> application: gtryapp
 version: 1
 runtime: python27
 api_version: 1
 threadsafe: yes
</snippet></ROW><ROW><id>15736389</id><snippet>compile(somescript, '', 'exec')</snippet></ROW><ROW><id>15736391</id><snippet>nonce + iv + ctr</snippet></ROW><ROW><id>15736391</id><snippet>base64.b64decode</snippet></ROW><ROW><id>15736391</id><snippet>cipher.encrypt</snippet></ROW><ROW><id>15736391</id><snippet>0xb70x600x330x280xdb0xc20x930x1b0x410xe0x160xc80x60x7e0x620xdf</snippet></ROW><ROW><id>15736432</id><snippet>Scrapy</snippet></ROW><ROW><id>15736432</id><snippet>lxml</snippet></ROW><ROW><id>15736432</id><snippet>urllib</snippet></ROW><ROW><id>15736475</id><snippet>def main():
    infile = open('numbers.dat', 'r')

    largest = 0
    count = 0
    for line in infile:
        number = int(line)

        if number &gt; largest:
            # If the number on the line we are currently reading is greater than,
            # our previously highest. Set the highest to this number instead.
            largest = number

        # Increment the number of lines we have read.
        count += 1

    infile.close()

    # Finally print the values we got from parsing the file
    print('The largest number in the file is: %s' % largest)
    print('The amount of numbers in the file is: %s' % count)
main()
</snippet></ROW><ROW><id>15736504</id><snippet>m0</snippet></ROW><ROW><id>15736504</id><snippet>my_list_o_lists[0]</snippet></ROW><ROW><id>15736504</id><snippet>m0</snippet></ROW><ROW><id>15736504</id><snippet>my_list_o_lists[0]</snippet></ROW><ROW><id>15736504</id><snippet>&gt;&gt;&gt; my_list_o_lists = [ [], ["cow", "says", "moo"], [1, 2, 3] ]
&gt;&gt;&gt; m0 = my_list_o_lists[0]
&gt;&gt;&gt; m0 = [ "Where is my cow?", "No idea!" ]
&gt;&gt;&gt; print m0
['Where is my cow?', 'No idea!']
&gt;&gt;&gt; print my_list_o_lists[0]
[]
</snippet></ROW><ROW><id>15736504</id><snippet>my_list_o_lists[0]</snippet></ROW><ROW><id>15736504</id><snippet>m0</snippet></ROW><ROW><id>15736504</id><snippet>m0</snippet></ROW><ROW><id>15736504</id><snippet>my_list_o_lists[0]</snippet></ROW><ROW><id>15736504</id><snippet>&gt;&gt;&gt; my_list_o_lists[0] = m0
</snippet></ROW><ROW><id>15736595</id><snippet>import sys  
from PyQt4 import QtCore, QtGui

def F(n, m):
    return n + m

class MainWindow(QtGui.QWidget):
    # http://stackoverflow.com/a/11458784/190597 (reclosedev)
    def __init__(self, parent=None):
        self.rows = range(50)
        self.cols = range(100)
        super(MainWindow, self).__init__(parent)
        self.table_widget = QtGui.QTableWidget()
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.table_widget)
        self.setLayout(layout)
        self.populate()

    def populate(self):
        self.table_widget.setRowCount(len(self.rows))
        self.table_widget.setColumnCount(len(self.cols))
        self.table_widget.setHorizontalHeaderLabels(map(str, self.cols))
        for i, n in enumerate(self.rows):
            for j, m in enumerate(self.cols):
                value = QtGui.QTableWidgetItem(str(F(n, m)))
                self.table_widget.setItem(i, j, value)
        self.table_widget.item(5,2).setBackgroundColor(QtGui.QColor(0,255,255))
        self.table_widget.item(5,2).setTextColor(QtGui.QColor("red"))

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    wnd = MainWindow()
    wnd.resize(640, 480)
    wnd.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15736609</id><snippet>for</snippet></ROW><ROW><id>15736609</id><snippet>for</snippet></ROW><ROW><id>15736609</id><snippet>9</snippet></ROW><ROW><id>15736609</id><snippet>import re

with open('filename','r') as f_read, open('filename2','w') as f_write:
    for line in (line.strip() for line in f_read):
        if re.search(r'^\d+', line):  # line starts with a number?
            columnar_data = ' '.join(line.split())
            print columnar_data
            f_write.write(columnar_data+'\n')
</snippet></ROW><ROW><id>15736609</id><snippet>filename2</snippet></ROW><ROW><id>15736609</id><snippet>121 3423 342 4545 45435 4345 42353 3456456 67658 3435
921 9423 942 9545 95435 9345 92353 9456456 97658 9435
</snippet></ROW><ROW><id>15736624</id><snippet>help(s3.server_name)
</snippet></ROW><ROW><id>15736692</id><snippet>print ("{} {} {} {}\n" * 5).format(*t)
</snippet></ROW><ROW><id>15736692</id><snippet>print (("{} "*4 + "\n")*5).format(*t)
</snippet></ROW><ROW><id>15736729</id><snippet>focus_set</snippet></ROW><ROW><id>15736876</id><snippet>any(keyword in s for s in json_data)
</snippet></ROW><ROW><id>15736876</id><snippet>thing1</snippet></ROW><ROW><id>15736876</id><snippet>thing3</snippet></ROW><ROW><id>15736876</id><snippet>any(keyword in s for s in json_data["thing1"]["thing2"])
</snippet></ROW><ROW><id>15736876</id><snippet>thing3</snippet></ROW><ROW><id>15736876</id><snippet>keyword</snippet></ROW><ROW><id>15737014</id><snippet>first_name</snippet></ROW><ROW><id>15737014</id><snippet>last_name</snippet></ROW><ROW><id>15737014</id><snippet>u''</snippet></ROW><ROW><id>15737014</id><snippet>u''</snippet></ROW><ROW><id>15737014</id><snippet># Python 2 legacy:
my_string = "This is a bytestring"
my_unicode = u"This is an Unicode string"

# Python 3 or Python 2 with unicode literals 
from __future__ import unicode_literals

my_string = b"This is a bytestring"
my_unicode = "This is an Unicode string"
</snippet></ROW><ROW><id>15737046</id><snippet>nw_to_se = [your_list[i][i] for i in range(3)]
ne_to_sw = [your_list[i][2-i] for i in range(3)]
diags = (nw_to_se, ne_to_sw)
</snippet></ROW><ROW><id>15737046</id><snippet>[2-i]</snippet></ROW><ROW><id>15737046</id><snippet>[-i-1]</snippet></ROW><ROW><id>15737141</id><snippet>unicode</snippet></ROW><ROW><id>15737141</id><snippet>str</snippet></ROW><ROW><id>15737141</id><snippet>unicode</snippet></ROW><ROW><id>15737141</id><snippet>str</snippet></ROW><ROW><id>15737141</id><snippet>unicode</snippet></ROW><ROW><id>15737141</id><snippet>ignorelist = (u'!', u'-', u'_', u'(', u')', u',', u'.', u':', u';', u'"', u'\'', u'?', u'#', u'@', u'$', u'^', u'&amp;', u'*', u'+', u'=', u'{', u'}', u'[', u']', u'\\', u'|', u'&lt;', u'&gt;', u'/', u'—')

if not isinstance(token, unicode):
    token = token.decode('utf-8') # assumes you are using UTF-8
for punc in ignorelist:
    token = token.replace(punc, u' ')
</snippet></ROW><ROW><id>15737141</id><snippet>str</snippet></ROW><ROW><id>15737141</id><snippet>ignorelist = ('!', '-', '_', '(', ')', ',', '.', ':', ';', '"', '\'', '?', '#', '@', '$', '^', '&amp;', '*', '+', '=', '{', '}', '[', ']', '\\', '|', '&lt;', '&gt;', '/', u'—'.encode('utf-8'))
# and other parts do not need to change
</snippet></ROW><ROW><id>15737141</id><snippet>u'—'</snippet></ROW><ROW><id>15737141</id><snippet>str</snippet></ROW><ROW><id>15737141</id><snippet>unicode</snippet></ROW><ROW><id>15737141</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>15737141</id><snippet>SyntaxError</snippet></ROW><ROW><id>15737189</id><snippet>2.7+</snippet></ROW><ROW><id>15737189</id><snippet>from collections import Counter

with open('D:/project/report.txt','r') as fob:
    c = Counter(word for line in fob for word in line.split())
</snippet></ROW><ROW><id>15737189</id><snippet>2.5+</snippet></ROW><ROW><id>15737189</id><snippet>from collections import defaultdict
dd = defaultdict(int)

with open('D:/project/report.txt','r') as fob:
    for line in fob:
        for word in line.split():
            dd[word] += 1
</snippet></ROW><ROW><id>15737189</id><snippet>defaultdict</snippet></ROW><ROW><id>15737189</id><snippet>d = {}

with open('D:/project/report.txt','r') as fob:
    for line in fob:
        for word in line.split():
            d[word] = d.get(word, 0) + 1
</snippet></ROW><ROW><id>15737218</id><snippet>&lt;pre&gt;from math import radians, cos, sin, asin, sqrt
def haversine(lon1, lat1, lon2, lat2):
    """
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula 
    dlon = lon2 - lon1 
    dlat = lat2 - lat1 
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a)) 
    km = 6367 * c
    return km&lt;/pre&gt;</snippet></ROW><ROW><id>15737218</id><snippet>haversine(lat1, long1, lat2, long2) * 0.90</snippet></ROW><ROW><id>15737229</id><snippet>n*(n+1)/2</snippet></ROW><ROW><id>15737240</id><snippet>G</snippet></ROW><ROW><id>15737240</id><snippet>key</snippet></ROW><ROW><id>15737240</id><snippet>n</snippet></ROW><ROW><id>15737240</id><snippet>G.node[n][key]
</snippet></ROW><ROW><id>15737240</id><snippet>G</snippet></ROW><ROW><id>15737240</id><snippet>G</snippet></ROW><ROW><id>15737240</id><snippet>def make_heuristic(G):
    def heuristic(a, b):
        a_attr, b_attr = [G.node[n][key] for n in (a, b)]
        ...
    return heuristic

nx.astar_path(G,start,end,make_heuristic(G))        
</snippet></ROW><ROW><id>15737375</id><snippet>DELETE</snippet></ROW><ROW><id>15737375</id><snippet>row.cleaned_data.get('DELETE')</snippet></ROW><ROW><id>15737623</id><snippet>def matrixmult (A, B):
    rows_A = len(A)
    cols_A = len(A[0])
    rows_B = len(B)
    cols_B = len(B[0])

    if cols_A != rows_B:
      print "Cannot multiply the two matrices. Incorrect dimensions."
      return

    # Create the result matrix
    # Dimensions would be rows_A x cols_B
    C = [[0 for row in range(cols_B)] for col in range(rows_A)]
    print C

    for i in range(rows_A):
        for j in range(cols_B):
            for k in range(cols_A):
                C[i][j] += A[i][k]*B[k][j]
    return C
</snippet></ROW><ROW><id>15737623</id><snippet>matrix=[[1,2,3],
    [4,5,6],
    [7,8,9]]

print matrixmult(matrix, matrix)    # that is your function...
</snippet></ROW><ROW><id>15737623</id><snippet>[[30, 36, 42], [66, 81, 96], [102, 126, 150]]
</snippet></ROW><ROW><id>15737623</id><snippet>import numpy as np

a=np.array(matrix)
b=np.array(matrix)
print np.dot(a,b)
#  [[ 30  36  42]
    [ 66  81  96]
    [102 126 150]]
</snippet></ROW><ROW><id>15737623</id><snippet>def mult(mtx_a,mtx_b):
    tpos_b = zip( *mtx_b)
    rtn = [[ sum( ea*eb for ea,eb in zip(a,b)) for b in tpos_b] for a in mtx_a]
    return rtn
</snippet></ROW><ROW><id>15737809</id><snippet>concurrent.futures.Executor.map</snippet></ROW><ROW><id>15737809</id><snippet>map</snippet></ROW><ROW><id>15737809</id><snippet>lst100</snippet></ROW><ROW><id>15737809</id><snippet>str()</snippet></ROW><ROW><id>15737809</id><snippet>a</snippet></ROW><ROW><id>15737809</id><snippet>b</snippet></ROW><ROW><id>15737809</id><snippet>future_to_url = executor.map(str, lst100, timeout=60)
</snippet></ROW><ROW><id>15737809</id><snippet>name=</snippet></ROW><ROW><id>15737809</id><snippet>timeout</snippet></ROW><ROW><id>15737862</id><snippet>def __init__(self, tag="", startTime=time.time(), elapsedTime=-1):
    self._tag=tag
    self._elapsedTime = elapsedTime
    self._startTime = startTime
</snippet></ROW><ROW><id>15737862</id><snippet>def __init__(self, tag="", startTime=None, elapsedTime=-1):
    self._tag=tag
    self._elapsedTime = elapsedTime
    if startTime is None:
        startTime = time.time()
    self._startTime = startTime
</snippet></ROW><ROW><id>15737907</id><snippet>str</snippet></ROW><ROW><id>15737907</id><snippet>bytes</snippet></ROW><ROW><id>15737907</id><snippet>Unicode</snippet></ROW><ROW><id>15737907</id><snippet>str</snippet></ROW><ROW><id>15737907</id><snippet>mystring = 'Det här är ju helt omöjligt'
</snippet></ROW><ROW><id>15737907</id><snippet>mystring = u'Det här är ju helt omöjligt'
</snippet></ROW><ROW><id>15737964</id><snippet>Element</snippet></ROW><ROW><id>15737964</id><snippet>print(tree.getroot().tag)
</snippet></ROW><ROW><id>15738282</id><snippet>&gt;&gt;&gt; suits = ["h","c", "d", "s"]
&gt;&gt;&gt; aces = ["a" + suit for suit in suits]
&gt;&gt;&gt; aces
['ah', 'ac', 'ad', 'as']
</snippet></ROW><ROW><id>15738333</id><snippet>/msg &lt;User&gt; message</snippet></ROW><ROW><id>15738333</id><snippet>/query</snippet></ROW><ROW><id>15738414</id><snippet>c</snippet></ROW><ROW><id>15738414</id><snippet>c</snippet></ROW><ROW><id>15738414</id><snippet>return</snippet></ROW><ROW><id>15738414</id><snippet>caller</snippet></ROW><ROW><id>15738414</id><snippet>[]</snippet></ROW><ROW><id>15738414</id><snippet>OSError</snippet></ROW><ROW><id>15738414</id><snippet>caller</snippet></ROW><ROW><id>15738414</id><snippet>listdir</snippet></ROW><ROW><id>15738414</id><snippet>def check(exceptions, msg, handler):
    def deco(func):
        def wrapped(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except exceptions as err:
                print "Logged error:", msg
                return handler(err)
        return wrapped
    return deco

def handler(err):
    return []

@check(ZeroDivisionError, "divide by zero", handler)
def func(x):
    1/0

&gt;&gt;&gt; func(1)
Logged error: divide by zero
[]
</snippet></ROW><ROW><id>15738414</id><snippet>caller</snippet></ROW><ROW><id>15738414</id><snippet>OSError</snippet></ROW><ROW><id>15738414</id><snippet>OSError</snippet></ROW><ROW><id>15738414</id><snippet>[]</snippet></ROW><ROW><id>15738414</id><snippet>OSError</snippet></ROW><ROW><id>15738414</id><snippet>[]</snippet></ROW><ROW><id>15738414</id><snippet>OSError</snippet></ROW><ROW><id>15738414</id><snippet>caller</snippet></ROW><ROW><id>15738712</id><snippet>suits = ["h","c", "d", "s"]

noclubs = [x for x in suits if x != "c"]
</snippet></ROW><ROW><id>15738911</id><snippet>interp2d</snippet></ROW><ROW><id>15738911</id><snippet>[xi,yj]</snippet></ROW><ROW><id>15738911</id><snippet>(2, n)</snippet></ROW><ROW><id>15738911</id><snippet>(2*n,)</snippet></ROW><ROW><id>15738911</id><snippet>(n, 4)</snippet></ROW><ROW><id>15738911</id><snippet>x_interp = scipy.interpolate.interp2d(lut[0], lut[1], lut[2], kind = 'linear')
y_interp = scipy.interpolate.interp2d(lut[0], lut[1], lut[3], kind = 'linear')
</snippet></ROW><ROW><id>15738911</id><snippet>new_x, new_y = x_interp(x, y), y_interp(x, y)
</snippet></ROW><ROW><id>15738966</id><snippet>pickle</snippet></ROW><ROW><id>15739148</id><snippet>ffa23b.txt</snippet></ROW><ROW><id>15739148</id><snippet>ffa23b11d4334</snippet></ROW><ROW><id>15739148</id><snippet>ffa23b712f3</snippet></ROW><ROW><id>15739319</id><snippet>sample.xlsx</snippet></ROW><ROW><id>15739319</id><snippet>not valid</snippet></ROW><ROW><id>15739319</id><snippet>.xlsx</snippet></ROW><ROW><id>15739351</id><snippet>lines = ['Putting a value ...',
         'Getting value with only row key ...',
         'Getting value with only row key and family...',
         'Getting value with only row key and family and qualifier...',
         'Getting value with row key which is not put...']

for line in lines:
  print '%-59s' % line,
  # ...
  print 'OK'
</snippet></ROW><ROW><id>15739351</id><snippet>Putting a value ...                                         OK
Getting value with only row key ...                         OK
Getting value with only row key and family...               OK
Getting value with only row key and family and qualifier... OK
Getting value with row key which is not put...              OK
</snippet></ROW><ROW><id>15739351</id><snippet>59</snippet></ROW><ROW><id>15739416</id><snippet>&gt;&gt;&gt; diff = b - a
&gt;&gt;&gt; diff
datetime.timedelta(0, 12000)

&gt;&gt;&gt; hrs = diff.seconds / 3600
&gt;&gt;&gt; hrs
3
&gt;&gt;&gt; mins = diff.seconds % 3600 / 60
&gt;&gt;&gt; mins
20
&gt;&gt;&gt; "%s:%s" % (hrs, mins)
'3:20'
</snippet></ROW><ROW><id>15739780</id><snippet>filter()</snippet></ROW><ROW><id>15739780</id><snippet>get()</snippet></ROW><ROW><id>15739780</id><snippet>get</snippet></ROW><ROW><id>15739780</id><snippet>def rewardhistory(request):
    reward = Rewardpoints_log.objects.filter(userid='894490') 
    return render_to_response('credits.html', 'reward':reward},context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15739978</id><snippet>In [3]: grouped = df.groupby('game_id')

In [4]: won = grouped.won.sum()

In [5]: DataFrame({True: won, False: grouped.person.nunique() - won}).stack()
Out[5]: 
game_id       
2        False    1
         True     1
3        False    0
         True     2
4        False    1
         True     0
dtype: float64
</snippet></ROW><ROW><id>15740188</id><snippet>positions = np.where((signal % 3 == 0) | (signal % 5 == 0))[0]
</snippet></ROW><ROW><id>15740188</id><snippet>(signal % 3 == 0) | (signal % 5 == 0)</snippet></ROW><ROW><id>15740188</id><snippet>signal</snippet></ROW><ROW><id>15740188</id><snippet>np.where()</snippet></ROW><ROW><id>15740188</id><snippet>positions</snippet></ROW><ROW><id>15740188</id><snippet>positions = np.hstack((positions, [i]))
</snippet></ROW><ROW><id>15740656</id><snippet>&gt;&gt;&gt; from string import punctuation
&gt;&gt;&gt; line = "Isn't ., stackoverflow the - best ?"
&gt;&gt;&gt; ' '.join(word.strip(punctuation) for word in line.split() 
             if word.strip(punctuation))
"Isn't stackoverflow the best"
</snippet></ROW><ROW><id>15740656</id><snippet>&gt;&gt;&gt; line = "Isn't ., stackoverflow the - best ?"
&gt;&gt;&gt; ' '.join(filter(None, (word.strip(punctuation) for word in line.split())))
"Isn't stackoverflow the best"
</snippet></ROW><ROW><id>15740730</id><snippet>textwrap</snippet></ROW><ROW><id>15740730</id><snippet>from textwrap import wrap
labels=['Really really really really really really long label 1',
        'Really really really really really really long label 2',
        'Really really really really really really long label 3']
labels = [ '\n'.join(wrap(l, 20)) for l in labels ]
</snippet></ROW><ROW><id>15740847</id><snippet>print</snippet></ROW><ROW><id>15740847</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>15740847</id><snippet>None</snippet></ROW><ROW><id>15740847</id><snippet>print</snippet></ROW><ROW><id>15740847</id><snippet>unicode</snippet></ROW><ROW><id>15740847</id><snippet>ascii</snippet></ROW><ROW><id>15740847</id><snippet>unicode</snippet></ROW><ROW><id>15740847</id><snippet>unicode</snippet></ROW><ROW><id>15740847</id><snippet>wrong.py</snippet></ROW><ROW><id>15740847</id><snippet># coding: utf-8

print u'Álvaro'
</snippet></ROW><ROW><id>15740847</id><snippet>alvaro@ideas:/tmp
$ python wrong.py 
Álvaro
alvaro@ideas:/tmp
$ python wrong.py | grep a
Traceback (most recent call last):
  File "wrong.py", line 3, in &lt;module&gt;
    print u'Álvaro'
UnicodeEncodeError: 'ascii' codec can't encode character u'\xc1' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>15740847</id><snippet>right.py</snippet></ROW><ROW><id>15740847</id><snippet># coding: utf-8

print u'Álvaro'.encode('utf-8')
# unicode object encoded == `str` in Python 2
</snippet></ROW><ROW><id>15740847</id><snippet>alvaro@ideas:/tmp
$ python right.py 
Álvaro
alvaro@ideas:/tmp
$ python right.py | grep a
Álvaro
</snippet></ROW><ROW><id>15740933</id><snippet>193[DEC] == 11000001[BIN]
</snippet></ROW><ROW><id>15740933</id><snippet>RSV1</snippet></ROW><ROW><id>15740933</id><snippet>1</snippet></ROW><ROW><id>15740933</id><snippet>ext = req.headers.get("Sec-WebSocket-Extensions", "").strip()
if ext:
    res += "Sec-WebSocket-Extensions: %s\r\n" % ext
</snippet></ROW><ROW><id>15740933</id><snippet>Sec-WebSocket-Extensions:x-webkit-deflate-frame
</snippet></ROW><ROW><id>15741028</id><snippet>imp.load_module</snippet></ROW><ROW><id>15741028</id><snippet>import imp

with open(mainfile) as src:
    imp.load_module('__main__', src, mainfile, (".py", "r", imp.PY_SOURCE))
</snippet></ROW><ROW><id>15741028</id><snippet>__main__</snippet></ROW><ROW><id>15741028</id><snippet>imp.PY_SOURCE</snippet></ROW><ROW><id>15741028</id><snippet>__name__</snippet></ROW><ROW><id>15741028</id><snippet>&gt;&gt;&gt; src = '''\
... if __name__ == '__main__': print 'Main!'
... else: print 'Damn', __name__
... '''
&gt;&gt;&gt; exec src
Main!
&gt;&gt;&gt; exec src in {}
Damn __builtin__
&gt;&gt;&gt; exec src in {'__name__':'__main__'}
Main!
</snippet></ROW><ROW><id>15741305</id><snippet>map</snippet></ROW><ROW><id>15741305</id><snippet>&gt;&gt;&gt; from operator import itemgetter   
&gt;&gt;&gt; L = ['ABC', 'DEF', 'GHIJ'] 
&gt;&gt;&gt; map(itemgetter(0), L)
['A', 'D', 'G']
</snippet></ROW><ROW><id>15741524</id><snippet>import csv 
for row in csv.reader(['num1, 123456789', 'num2, 987654321', 'num3, +23456789']):
    phoneNumber = row[1].strip()
    if not phoneNumber.startswith('+'):
        phoneNumber = '+' + phoneNumber
    print phoneNumber
</snippet></ROW><ROW><id>15741627</id><snippet>with open('1.csv','r') as in_file, open('2.csv','w') as out_file:
    seen = set() # set for fast O(1) amortized lookup
    for line in in_file:
        if line in seen: continue # skip duplicate

        seen.add(line)
        out_file.write(line)
</snippet></ROW><ROW><id>15741627</id><snippet>import fileinput
seen = set() # set for fast O(1) amortized lookup
for line in fileinput.FileInput('1.csv', inplace=1):
    if line in seen: continue # skip duplicate

    seen.add(line)
    print line, # standard output is now redirected to the file   
</snippet></ROW><ROW><id>15741876</id><snippet>os.environ['SERVER_NAME']</snippet></ROW><ROW><id>15741876</id><snippet>import os
if os.environ['APPLICATION_ID'].startswith('dev'):
  pass  # it's localhost
else:
  pass  # it's uploaded on gae
</snippet></ROW><ROW><id>15741876</id><snippet>self.uri_for('callback-uri-name', _full=True)</snippet></ROW><ROW><id>15741876</id><snippet>app = webapp2.WSGIApplication([
    webapp2.Route(r'/oauth/callback', handler='oauth.CallbackHandler', name='callback-uri-name'),
])
</snippet></ROW><ROW><id>15741876</id><snippet>self.uri_for('callback-uri-name', _full=True)</snippet></ROW><ROW><id>15741876</id><snippet>http://localhost:8080/oauth/callback</snippet></ROW><ROW><id>15741876</id><snippet>http://app-id.appspot.com/oauth/callback</snippet></ROW><ROW><id>15742014</id><snippet>Trie</snippet></ROW><ROW><id>15742014</id><snippet>Trie</snippet></ROW><ROW><id>15742014</id><snippet>class C:
    myself = C
    # or even just
    C
</snippet></ROW><ROW><id>15742014</id><snippet>__annotations__</snippet></ROW><ROW><id>15742014</id><snippet>class C:
    def f() -&gt; ...: pass
print(C.f.__annotations__)
C.f.__annotations__['return'] = C
print(C.f.__annotations__)
</snippet></ROW><ROW><id>15742014</id><snippet>CONTAINING_CLASS = object()</snippet></ROW><ROW><id>15742097</id><snippet>from datetime import timedelta

delta = timedelta(hours=3457)
minutes, seconds = divmod(delta.seconds, 60)
hours, minutes = divmod(minutes, 60)
hours += delta.days * 24

print '%sh %sm' % (hours, minutes)
</snippet></ROW><ROW><id>15742097</id><snippet>from datetime import timedelta

delta = timedelta(hours=3457)
print delta
</snippet></ROW><ROW><id>15742112</id><snippet>mapnik</snippet></ROW><ROW><id>15742112</id><snippet>mapnik2</snippet></ROW><ROW><id>15742112</id><snippet>mapnik</snippet></ROW><ROW><id>15742112</id><snippet>import mapnik2</snippet></ROW><ROW><id>15742112</id><snippet>TileStache/mapnik.py</snippet></ROW><ROW><id>15742147</id><snippet>In [34]: df.ix[df['Value'].idxmax()]
Out[34]: 
Country        US
Place      Kansas
Value         894
Name: 7
</snippet></ROW><ROW><id>15742183</id><snippet>import Tkinter as tk
import random

class ServoDrive(object):
    # simulate values
    def getVelocity(self): return random.randint(0,50)
    def getTorque(self): return random.randint(50,100)

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.servo = ServoDrive()
        self.canvas = tk.Canvas(self, background="black")
        self.canvas.pack(side="top", fill="both", expand=True)

        # create lines for velocity and torque
        self.velocity_line = self.canvas.create_line(0,0,0,0, fill="red")
        self.torque_line = self.canvas.create_line(0,0,0,0, fill="blue")

        # start the update process
        self.update_plot()

    def update_plot(self):
        v = self.servo.getVelocity()
        t = self.servo.getTorque()
        self.add_point(self.velocity_line, v)
        self.add_point(self.torque_line, t)
        self.canvas.xview_moveto(1.0)
        self.after(100, self.update_plot)

    def add_point(self, line, y):
        coords = self.canvas.coords(line)
        x = coords[-2] + 1
        coords.append(x)
        coords.append(y)
        coords = coords[-200:] # keep # of points to a manageable size
        self.canvas.coords(line, *coords)
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15742314</id><snippet>string</snippet></ROW><ROW><id>15742314</id><snippet>DictVectorizer</snippet></ROW><ROW><id>15742314</id><snippet>CountVectorizer</snippet></ROW><ROW><id>15742314</id><snippet>FeatureUnion</snippet></ROW><ROW><id>15742314</id><snippet>CountVectorizer</snippet></ROW><ROW><id>15742314</id><snippet>TfidfVectorizer</snippet></ROW><ROW><id>15742314</id><snippet>DictVectorizer</snippet></ROW><ROW><id>15742314</id><snippet>DictVectorizer</snippet></ROW><ROW><id>15742314</id><snippet>{"string:some": True, "string:arbitrary": True, "string:text": True,
 "label1": "orange", "value1" : False }
</snippet></ROW><ROW><id>15742314</id><snippet>LinearSVC</snippet></ROW><ROW><id>15742314</id><snippet>LinearSVC</snippet></ROW><ROW><id>15742314</id><snippet>LinearSVC</snippet></ROW><ROW><id>15742827</id><snippet>$PATH</snippet></ROW><ROW><id>15742827</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>15742827</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15742827</id><snippet>export PYTHONPATH=$PYTHONPATH:/Users/username/pymodules
</snippet></ROW><ROW><id>15742827</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15743124</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>15743220</id><snippet>func</snippet></ROW><ROW><id>15743220</id><snippet>LENGTH()</snippet></ROW><ROW><id>15743220</id><snippet>from sqlalchemy.sql import func

sess.query(db.ArticlesTable).filter(or_(
    and_(func.length(db.ArticlesTable.shorttext) &gt; 0),
</snippet></ROW><ROW><id>15743583</id><snippet>imshow</snippet></ROW><ROW><id>15743583</id><snippet>from matplotlib.pyplot import *
import numpy as np

def highlight():
    m = np.random.randn(10,10)
    highlight = m &lt; 0

    # RGBA overlay matrix
    overlay = np.zeros((10,10,4))

    # we set the red channel to 1
    overlay[...,0] = 1.

    # and we set the alpha to our boolean matrix 'highlight' so that it is
    # transparent except for highlighted pixels
    overlay[...,3] = highlight

    fig,ax = subplots(1,1,num='Press "h" to highlight pixels &lt; 0')

    im = ax.imshow(m,interpolation='nearest',cmap=cm.gray)
    colorbar(im)
    ax.hold(True)
    h = ax.imshow(overlay,interpolation='nearest',visible=False)

    def toggle_highlight(event):
        # if the user pressed h, toggle the visibility of the overlay
        if event.key == 'h':
            h.set_visible(not h.get_visible())
            fig.canvas.draw()

    # connect key events to the 'toggle_highlight' callback
    fig.canvas.mpl_connect('key_release_event',toggle_highlight)
</snippet></ROW><ROW><id>15743607</id><snippet>class ThankYo(Mainpage):
</snippet></ROW><ROW><id>15743607</id><snippet>class ThankYo(MainPage):
</snippet></ROW><ROW><id>15743607</id><snippet>P</snippet></ROW><ROW><id>15743607</id><snippet>% dev_appser  File "/home/unutbu/pysrc/project/main.py", line 38, in &lt;module&gt;
...
    class ThankYo(Mainpage):   
NameError: name 'Mainpage' is not defined
</snippet></ROW><ROW><id>15743607</id><snippet>self.reply(usererror,passworderror,verifyerror,emailerror)
</snippet></ROW><ROW><id>15743607</id><snippet>self.reply(self.usererror, self.passworderror, self.verifyerror, self.emailerror)
</snippet></ROW><ROW><id>15743607</id><snippet>  File "/home/unutbu/pysrc/project/main.py", line 39, in post
    self.reply(usererror, passworderror, verifyerror, emailerror)
NameError: global name 'usererror' is not defined
</snippet></ROW><ROW><id>15743607</id><snippet>dev_appserver.py /path/to/project/
</snippet></ROW><ROW><id>15743607</id><snippet>reply</snippet></ROW><ROW><id>15743607</id><snippet>self.reply(self.usererror, self.passworderror, self.verifyerror, self.emailerror)
</snippet></ROW><ROW><id>15743607</id><snippet>reply</snippet></ROW><ROW><id>15743607</id><snippet>user</snippet></ROW><ROW><id>15743607</id><snippet>password</snippet></ROW><ROW><id>15743607</id><snippet>verify</snippet></ROW><ROW><id>15743607</id><snippet>email</snippet></ROW><ROW><id>15743607</id><snippet>usererror</snippet></ROW><ROW><id>15743607</id><snippet>passworderror</snippet></ROW><ROW><id>15743607</id><snippet>verifyerror</snippet></ROW><ROW><id>15743607</id><snippet>emailerror</snippet></ROW><ROW><id>15743607</id><snippet>def reply(self, usererror, passworderror, verifyerror, emailerror):
</snippet></ROW><ROW><id>15743607</id><snippet>if not any(usererror and passworderror and verifyerror and emailerror):
</snippet></ROW><ROW><id>15743607</id><snippet>/broksi</snippet></ROW><ROW><id>15743607</id><snippet>        self.redirect('/broski')
</snippet></ROW><ROW><id>15743607</id><snippet>ThankYo</snippet></ROW><ROW><id>15743607</id><snippet>self.request.get('username')</snippet></ROW><ROW><id>15743607</id><snippet>broski</snippet></ROW><ROW><id>15743607</id><snippet>import urllib

self.redirect('/broski?' + urllib.urlencode(
            {'username' : self.username}))
</snippet></ROW><ROW><id>15743607</id><snippet>import urllib
import webapp2
import re
form = """&lt;html&gt;
&lt;form method=post&gt;
&lt;input name="username"&gt;&lt;div id=div&gt;%s&lt;/div&gt;&lt;br&gt;
&lt;input name="password"&gt;&lt;div id=div&gt;%s&lt;/div&gt;&lt;br&gt;
&lt;input name="verify"&gt;&lt;div id=div&gt;%s&lt;/div&gt;&lt;br&gt;
&lt;input name="email"&gt;&lt;div id=div&gt;%s&lt;/div&gt;
&lt;input type="submit"&gt;
&lt;/form&gt;
&lt;/html&gt;"""


class MainPage(webapp2.RequestHandler):
    def get(self):
        self.response.headers['Content-Type'] = 'text/html'
        self.response.write(form % ('', '', '', ''))

    def reply(self, usererror, passworderror, verifyerror, emailerror):
        if not any(usererror and passworderror and verifyerror and emailerror):
            self.redirect('/broski?' + urllib.urlencode(
                {'username' : self.username}))
        else:
            self.response.write(form % (user, password, verify, email))

    def post(self):
        self.username = self.request.get('username')
        self.password = self.request.get('password')
        self.verify = self.request.get('verify')
        self.email = self.request.get('email')
        self.usererror = ''
        if not re.compile(r"^[a-zA-Z0-9_-]{3,20}$").match(self.username):
            self.usererror = "That's not a valid username."
        self.passworderror = ''
        if not re.compile(r"^.{3,20}$").match(self.password):
            self.passworderror = "That wasn't a valid password."
        self.verifyerror = ''
        if self.verify != self.password and self.password != '':
            self.verifyerror = "Your passwords didn't match."
        self.emailerror = ''
        if not re.compile(r"^[\S]+@[\S]+\.[\S]+$").match(self.email):
            self.emailerror = "That's not a valid email."
        self.reply(self.usererror, self.passworderror, self.verifyerror, self.emailerror)


class ThankYo(MainPage):
    def get(self):
        self.response.write('Welcome, ' + self.request.get('username') + '!')

app = webapp2.WSGIApplication([('/', MainPage), ('/broski', ThankYo)],
                              debug=True)
</snippet></ROW><ROW><id>15744184</id><snippet>CRETE TEMP TABLE tbl_tmp AS
SELECT * FROM tbl ORDER BY &lt;undisclosed&gt; LIMIT &lt;N&gt;;

TRUNCATE TABLE tbl;
INSERT INTO tbl SELECT * FROM tbl_tmp;
</snippet></ROW><ROW><id>15744674</id><snippet>sqllite.exe</snippet></ROW><ROW><id>15744674</id><snippet>C:\sqllite</snippet></ROW><ROW><id>15744674</id><snippet>/tmp/flaskr.db</snippet></ROW><ROW><id>15744674</id><snippet>C:\flasktutorial</snippet></ROW><ROW><id>15744674</id><snippet>flaskr.db</snippet></ROW><ROW><id>15744674</id><snippet>Open a notepad and create the blank file at `C:\flasktutorial\flaskr.db`
</snippet></ROW><ROW><id>15744674</id><snippet>C:\sqllite\sqllite.exe C:\flasktutorial\flaskr.db &lt; schema.sql
</snippet></ROW><ROW><id>15744674</id><snippet>DATABASE = 'C:\flasktutorial\flaskr.db'
</snippet></ROW><ROW><id>15744688</id><snippet>CONTAINS</snippet></ROW><ROW><id>15744688</id><snippet>ScanFilter</snippet></ROW><ROW><id>15744756</id><snippet>session_commit</snippet></ROW><ROW><id>15744756</id><snippet>except</snippet></ROW><ROW><id>15744991</id><snippet>...
sock.connect(("192.168.0.101", 28960))
sock.send(b"\xFF\xFF\xFF\xFFrcon xxxxxxxxx status") # here
...
</snippet></ROW><ROW><id>15744991</id><snippet>...
connection.connect()
connection.auth("xxxxxxxx") # here
connection.send("status")   # and here!
...
</snippet></ROW><ROW><id>15744991</id><snippet>import socket

if __name__ == "__main__":
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.connect(("192.168.0.101", 28960))
    auth = sock.recv()   # recieve "xxxxxxxx" (auth)
    status = sock.recv() # recieve "status" 
    sock.send(b"\xFF\xFF\xFF\xFFrcon xxxxxxxxx status")
    sock.close()
    print "Auth:", auth
    print "Status:", status
</snippet></ROW><ROW><id>15745026</id><snippet>health = wordfont.render(("Your health: ", self.a,), 1, (255, 9, 12))
</snippet></ROW><ROW><id>15745026</id><snippet>health = wordfont.render("Your health: {0}".format(self.a), 1, (255, 9, 12))
</snippet></ROW><ROW><id>15745026</id><snippet>health = wordfont.render("Your health: %s" % self.a), 1, (255, 9, 12))
</snippet></ROW><ROW><id>15745026</id><snippet>("Your health: ", self.a,)</snippet></ROW><ROW><id>15745558</id><snippet>state=DISABLED</snippet></ROW><ROW><id>15745970</id><snippet>&gt;&gt;&gt; s = "There are LJFK$(#@$34)(,0,ksdjf apples in the (4,5)"
&gt;&gt;&gt; import re
&gt;&gt;&gt; list(map(int, re.findall(r'[0-9]+', s)))
[34, 0, 4, 5]
</snippet></ROW><ROW><id>15746346</id><snippet>run_price1()</snippet></ROW><ROW><id>15746346</id><snippet>update()</snippet></ROW><ROW><id>15746346</id><snippet>run_price</snippet></ROW><ROW><id>15746346</id><snippet>def run_price1(web_address, tag_id):
    # ...

def update():
    my_stocks = ["aapl","goog","sne","msft","spy","trgt","petm","fslr","fb","f","t"]

    counter = 0

    while counter &lt; len(my_stocks):

        web_address = "http://finance.yahoo.com/q?s={}".format(my_stocks[counter])
        ticker = my_stocks[counter]
        #'yfs_l84_yhoo' - that 1(one) is really a lowercase "L"
        tag_id = "yfs_l84_{}".format(ticker.lower())

        run_price1(web_address, tag_id)

        counter=counter+1
</snippet></ROW><ROW><id>15746380</id><snippet>getattr</snippet></ROW><ROW><id>15746380</id><snippet>import hashlib
chosenFile = '/etc/passwd'
finalHash = input('Which hash function?') # raw_input in Python 2
assert finalHash in ['md5', 'sha1'] # Optional
h = getattr(hashlib, finalHash)
h.update(open(chosenFile, 'rb').read())
print(h.hexdigest())
</snippet></ROW><ROW><id>15746380</id><snippet>md5()</snippet></ROW><ROW><id>15746568</id><snippet>=</snippet></ROW><ROW><id>15746568</id><snippet>toAdd=xyzCoord[i][:]
</snippet></ROW><ROW><id>15746568</id><snippet>copy</snippet></ROW><ROW><id>15746568</id><snippet>deepcopy</snippet></ROW><ROW><id>15746568</id><snippet>copy</snippet></ROW><ROW><id>15746706</id><snippet>image.base_type</snippet></ROW><ROW><id>15746763</id><snippet>-shared</snippet></ROW><ROW><id>15746763</id><snippet>-dynamiclib</snippet></ROW><ROW><id>15746763</id><snippet>icc -m64 -O3 -g -fPIC -fp-model strict -fomit-frame-pointer -openmp -xhost -DMKL_ILP64 -dynamiclib build/temp.macosx-10.8-x86_64-3.3/numpy/core/src/dummymodule.o -Lbuild/temp.macosx-10.8-x86_64-3.3 -o build/lib.macosx-10.8-x86_64-3.3/numpy/core/_dummy.so</snippet></ROW><ROW><id>15746763</id><snippet>Undefined symbols for architecture x86_64:
  "_PyModule_Create2", referenced from:
      _PyInit__dummy in dummymodule.o
ld: symbol(s) not found for architecture x86_64
</snippet></ROW><ROW><id>15746763</id><snippet>-lpythonX.Y</snippet></ROW><ROW><id>15746763</id><snippet>-Llink/search/directory</snippet></ROW><ROW><id>15746763</id><snippet>-Llib/</snippet></ROW><ROW><id>15746870</id><snippet>cd desktop
/Library/Frameworks/Python.framework/Versions/2.7/bin/python script.py
</snippet></ROW><ROW><id>15746971</id><snippet>r+</snippet></ROW><ROW><id>15746971</id><snippet>b</snippet></ROW><ROW><id>15746971</id><snippet>r+b</snippet></ROW><ROW><id>15747121</id><snippet>[Tile(el.id) for el in &lt;tile descriptions&gt; for _ in range(el.n_tiles)]
</snippet></ROW><ROW><id>15747198</id><snippet>def helloworld():
   print "hello"

&gt;&gt;&gt; import hello
&gt;&gt;&gt; hello.helloworld()
'hello'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15747198</id><snippet>__init__.py</snippet></ROW><ROW><id>15747198</id><snippet>|-HelloModule
  |_ __init__.py
  |_ hellomodule.py
</snippet></ROW><ROW><id>15747343</id><snippet>add_edge</snippet></ROW><ROW><id>15747343</id><snippet>game</snippet></ROW><ROW><id>15747343</id><snippet>game = {'weight': 5, 'color': 'blue'}
G.add_edge(white, black, **game)
</snippet></ROW><ROW><id>15747343</id><snippet>G.add_edge(white, black, weight=5, color='blue')
</snippet></ROW><ROW><id>15747903</id><snippet>import pandas as pd

df1 = pd.read_csv("coord1.csv")
df2 = pd.read_csv("coord2.csv")
combined = df1.merge(df2, how='outer').fillna(0)
combined.sort(list(combined.columns[:2]), inplace=True)
combined.to_csv("coord_merged.csv",index=False)
</snippet></ROW><ROW><id>15747903</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df1 = pd.read_csv("coord1.csv")
&gt;&gt;&gt; df2 = pd.read_csv("coord2.csv")
&gt;&gt;&gt; df1
   x-coordinate   y-coordinate   data 1   data 2
0             1             10       20        0
1             5             15        1        2
&gt;&gt;&gt; df2
   x-coordinate   y-coordinate   data 3   data 4  
0             1             10        7          8
1             3             25        1          2
</snippet></ROW><ROW><id>15747903</id><snippet>&gt;&gt;&gt; combined = df1.merge(df2, how='outer')
&gt;&gt;&gt; combined
   x-coordinate   y-coordinate   data 1   data 2   data 3   data 4  
0             1             10       20        0        7          8
1             5             15        1        2      NaN        NaN
2             3             25      NaN      NaN        1          2
&gt;&gt;&gt; combined = df1.merge(df2, how='outer').fillna(0)
&gt;&gt;&gt; combined
   x-coordinate   y-coordinate   data 1   data 2   data 3   data 4  
0             1             10       20        0        7          8
1             5             15        1        2        0          0
2             3             25        0        0        1          2
</snippet></ROW><ROW><id>15747903</id><snippet>&gt;&gt;&gt; combined.sort(list(combined.columns[:2]), inplace=True)
&gt;&gt;&gt; combined
   x-coordinate   y-coordinate   data 1   data 2   data 3   data 4  
0             1             10       20        0        7          8
2             3             25        0        0        1          2
1             5             15        1        2        0          0
</snippet></ROW><ROW><id>15747903</id><snippet>&gt;&gt;&gt; combined.to_csv("coord_merged.csv",index=False)
&gt;&gt;&gt; !cat coord_merged.csv
x-coordinate, y-coordinate, data 1, data 2, data 3, data 4  
1.0,10.0,20.0,0.0,7.0,8.0
3.0,25.0,0.0,0.0,1.0,2.0
5.0,15.0,1.0,2.0,0.0,0.0
</snippet></ROW><ROW><id>15747903</id><snippet>&gt;&gt;&gt; combined.astype(int).to_csv("coord_merged.csv",index=False)
&gt;&gt;&gt; !cat coord_merged.csv
x-coordinate, y-coordinate, data 1, data 2, data 3, data 4  
1,10,20,0,7,8
3,25,0,0,1,2
5,15,1,2,0,0
</snippet></ROW><ROW><id>15747925</id><snippet>if 'foo' in string_variable: print('yes')</snippet></ROW><ROW><id>15748054</id><snippet>1</snippet></ROW><ROW><id>15748054</id><snippet>-</snippet></ROW><ROW><id>15748054</id><snippet>In [1]: import numpy as np

In [2]: a = np.arange(5)

In [3]: a
Out[3]: array([0, 1, 2, 3, 4])

In [4]: a[0:5:1]
Out[4]: array([0, 1, 2, 3, 4])

In [5]: a[0:5:-1]
Out[5]: array([], dtype=int64)

In [6]: a[5:0:-1]
Out[6]: array([4, 3, 2, 1])

In [7]: a[::-2]
Out[7]: array([4, 2, 0])
</snippet></ROW><ROW><id>15748054</id><snippet>0</snippet></ROW><ROW><id>15748054</id><snippet>5</snippet></ROW><ROW><id>15748054</id><snippet>0</snippet></ROW><ROW><id>15748113</id><snippet># Get an array of numbers
numbers = map(float, '1,2,3,4'.split(','))

# Now get the sum
total = sum(numbers)
</snippet></ROW><ROW><id>15748203</id><snippet>   a=random_color()
   b=length()
   c=x()
   d=y()
</snippet></ROW><ROW><id>15748203</id><snippet>night_sky()</snippet></ROW><ROW><id>15748203</id><snippet>star('red',100,0,0)
</snippet></ROW><ROW><id>15748203</id><snippet>length</snippet></ROW><ROW><id>15748203</id><snippet>x</snippet></ROW><ROW><id>15748203</id><snippet>y</snippet></ROW><ROW><id>15748203</id><snippet>return</snippet></ROW><ROW><id>15748203</id><snippet>None</snippet></ROW><ROW><id>15748203</id><snippet>def length():
    return randrange(5,71)

def x():
    return randrange(-280,281)

def y():
    return randrange(-200,201)
</snippet></ROW><ROW><id>15748203</id><snippet>a</snippet></ROW><ROW><id>15748203</id><snippet>b</snippet></ROW><ROW><id>15748203</id><snippet>c</snippet></ROW><ROW><id>15748203</id><snippet>d</snippet></ROW><ROW><id>15748203</id><snippet>while</snippet></ROW><ROW><id>15748203</id><snippet>z</snippet></ROW><ROW><id>15748203</id><snippet>while</snippet></ROW><ROW><id>15748203</id><snippet>for</snippet></ROW><ROW><id>15748203</id><snippet>   for i in range(z):
       a=random_color()
       b=length()
       c=x()
       d=y()
       star(a,b,c,d)
</snippet></ROW><ROW><id>15748203</id><snippet>def star(color, side_length, x, y):
    print(color, side_length, x, y)
    turtle.color(color)
    turtle.begin_fill()
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
    for i in range(5):
        turtle.forward(side_length)
        turtle.right(144)
        turtle.forward(side_length)
    turtle.end_fill()
</snippet></ROW><ROW><id>15748203</id><snippet>import turtle
import random

def star(color, side_length, x, y):
    print(color, side_length, x, y)
    turtle.color(color)
    turtle.begin_fill()
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
    for i in range(5):
        turtle.forward(side_length)
        turtle.right(144)
        turtle.forward(side_length)
    turtle.end_fill()


def random_color():
    randvar = randrange(0, 5)
    if randvar == 0:
        return ('red')
    elif randvar == 1:
        return ('blue')
    elif randvar == 2:
        return ('green')
    elif randvar == 3:
        return ('yellow')
    else:
        return ('black')


def length():
    return random.randrange(5, 71)


def xcoord():
    return random.randrange(-280, 281)


def ycoord():
    return random.randrange(-200, 201)


def night_sky():
    z = int(input('How many stars do you want?'))
    for i in range(z):
        color = random_color()
        side_length = length()
        x = xcoord()
        y = ycoord()
        star(color, side_length, x, y)

night_sky()
</snippet></ROW><ROW><id>15748294</id><snippet>self.speedx = speed_length * cos(player.angle)
self.speedy = speed_length * sin(player.angle)
</snippet></ROW><ROW><id>15748294</id><snippet>self.speedx = speed_length * cos(radians(player.angle))
self.speedy = speed_length * sin(radians(player.angle))
</snippet></ROW><ROW><id>15748297</id><snippet>#include &lt;cv.h&gt;
#include &lt;highgui.h&gt;

int main(int argc, char* argv[])
{
    cv::Mat img = cv::imread(argv[1]);
    if (img.empty())
    {
        std::cout &lt;&lt; "!!! imread() failed to open target image" &lt;&lt; std::endl;
        return -1;        
    }

    /* Set Region of Interest */

    int offset_x = 129;
    int offset_y = 129;

    cv::Rect roi;
    roi.x = offset_x;
    roi.y = offset_y;
    roi.width = img.size().width - (offset_x*2);
    roi.height = img.size().height - (offset_y*2);

    /* Crop the original image to the defined ROI */

    cv::Mat crop = img(roi);
    cv::imshow("crop", crop);
    cv::waitKey(0);

    cv::imwrite("noises_cropped.png", crop);

    return 0;
}
</snippet></ROW><ROW><id>15748297</id><snippet>cv::medianBlur()</snippet></ROW><ROW><id>15748297</id><snippet>cv::morphologyEx()</snippet></ROW><ROW><id>15748297</id><snippet>cv::Mat kernel = cv::getStructuringElement(cv::MORPH_ELLIPSE, cv::Size(7, 7), cv::Point(3, 3));
cv::morphologyEx(src, src, cv::MORPH_ELLIPSE, kernel);    
</snippet></ROW><ROW><id>15748418</id><snippet>inspect</snippet></ROW><ROW><id>15748418</id><snippet>inspect.currentframe</snippet></ROW><ROW><id>15748418</id><snippet>import inspect
def save(globals=None):
    if globals is None:
        frames = inspect.stack()
        caller_frame = frames[-1][0]
        globals = dict((k,v) for (k,v) in caller_frame.f_globals.items() if not k.startswith('__'))
    return globals


if __name__ == "__main__":
    a = 1
    b = 2
    print save()
</snippet></ROW><ROW><id>15748692</id><snippet>ipython profile create default</snippet></ROW><ROW><id>15748692</id><snippet>#c.NotebookApp.browser =''</snippet></ROW><ROW><id>15748692</id><snippet>import webbrowser
webbrowser.register('firefox', None, webbrowser.GenericBrowser('C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'))
c.NotebookApp.browser = 'firefox'
</snippet></ROW><ROW><id>15748785</id><snippet>p = re.compile(r':((\\:|[^:])+):')
print p.match(":abc'e12\:3\:text:").group(0)
</snippet></ROW><ROW><id>15748897</id><snippet>import xml.etree.ElementTree as ET

def perf_func(elem, func, level=0):
    func(elem,level)
    for child in elem.getchildren():
        perf_func(child, func, level+1)

def print_level(elem,level):
    print '-'*level+elem.tag

root = ET.parse('XML_file.xml')
perf_func(root.getroot(), print_level)
</snippet></ROW><ROW><id>15749150</id><snippet>numpy.delete</snippet></ROW><ROW><id>15749150</id><snippet>smaller_array = np.delete(array,index)
</snippet></ROW><ROW><id>15749228</id><snippet>exec_command</snippet></ROW><ROW><id>15749228</id><snippet>stdin, stdout, stderr = client.exec_command("watch -n 0.1 'ps -p $(pgrep -d"," -x snmpd) -o rss= | awk '\''{ i += $1 } END { print i }'\'' &gt;&gt; ~/Desktop/mem_logs/mem_"+(xx)+";")        
</snippet></ROW><ROW><id>15749228</id><snippet>"watch -n 0.1 'ps -p $(pgrep -d"
</snippet></ROW><ROW><id>15749228</id><snippet>" -x snmpd) -o rss= | awk '\''{ i += $1 } END { print i }'\'' &gt;&gt; ~/Desktop/mem_logs/mem_"+(xx)+";"
</snippet></ROW><ROW><id>15749228</id><snippet>bash</snippet></ROW><ROW><id>15749228</id><snippet>&gt; -bash: unexpected EOF while looking for matching `''
-bash: syntax error: unexpected end of file
</snippet></ROW><ROW><id>15749228</id><snippet>killall</snippet></ROW><ROW><id>15749228</id><snippet>watch</snippet></ROW><ROW><id>15749228</id><snippet>","</snippet></ROW><ROW><id>15749228</id><snippet>","</snippet></ROW><ROW><id>15749228</id><snippet>'\''</snippet></ROW><ROW><id>15749228</id><snippet>awk</snippet></ROW><ROW><id>15749228</id><snippet>{ print $1 }</snippet></ROW><ROW><id>15749228</id><snippet>ps</snippet></ROW><ROW><id>15749228</id><snippet>awk</snippet></ROW><ROW><id>15749456</id><snippet>select</snippet></ROW><ROW><id>15749456</id><snippet>soup.select('table tr table tr td a')
</snippet></ROW><ROW><id>15749456</id><snippet>In [32]: bs4.BeautifulSoup(urllib.urlopen('http://google.com/?hl=en').read()).select('#footer a')
Out[32]:
[&lt;a href="/intl/en/ads/"&gt;Advertising Programs&lt;/a&gt;,
 &lt;a href="/services/"&gt;Business Solutions&lt;/a&gt;,
 &lt;a href="https://plus.google.com/116899029375914044550" rel="publisher"&gt;+Google&lt;/a&gt;,
 &lt;a href="/intl/en/about.html"&gt;About Google&lt;/a&gt;,
 &lt;a href="http://www.google.com/setprefdomain?prefdom=RU&amp;prev=http://www.google.ru/&amp;sig=0_3F2sRGWVktTCOFLA955Vr-AWlHo%3D"&gt;Google.ru&lt;/a&gt;,
 &lt;a href="/intl/en/policies/"&gt;Privacy &amp; Terms&lt;/a&gt;]
</snippet></ROW><ROW><id>15749561</id><snippet>lineterminator</snippet></ROW><ROW><id>15749561</id><snippet>reader</snippet></ROW><ROW><id>15749561</id><snippet>writer</snippet></ROW><ROW><id>15749561</id><snippet>delimiter</snippet></ROW><ROW><id>15749561</id><snippet>lineterminator</snippet></ROW><ROW><id>15749645</id><snippet>$("form").bind("submit",function(event){
                                    event.preventDefault();
</snippet></ROW><ROW><id>15750023</id><snippet>pyrcc4</snippet></ROW><ROW><id>15750023</id><snippet>pyrcc4 ResourceFile.qrc -o ui_ResourceFile.py
</snippet></ROW><ROW><id>15750027</id><snippet>import MySQLdb
import csv
import pprint
import time

MAX_CACHE_AGE = 60*20  # 20 Minutes
CACHE_FILENAME = 'results.cache'

with open(CACHE_FILENAME, 'r') as cache:
    cached = pickle.load(cache)

if(time.time() &gt; cached['timestamp'] + MAX_CACHE_AGE):
    # Cache too old, run query
    db = MySQLdb.connect(host="localhost", # The Host
                     user="username", # username
                     passwd="password", # password
                     db="dbname") # name of the data base

    cursor = db.cursor() 
    cursor.execute("SELECT name, id, city, storeid FROM Products;")
    StudentsData = cursor.fetchall()

    # Update cache file
    data = {'results': StudentsData, 'timestamp':time.time()}
    with open(CACHE_FILENAME, 'w') as cache:
        pickle.dump(data, cache)

else:
    # Cached data is fresh enough, use that
    StudentsData = cached['results']

pprint.pprint(StudentsData)
</snippet></ROW><ROW><id>15750027</id><snippet>results.cache</snippet></ROW><ROW><id>15750027</id><snippet>with</snippet></ROW><ROW><id>15750027</id><snippet>with open(CACHE_FILENAME, 'r') as cache:
    cached = pickle.load(cache)
</snippet></ROW><ROW><id>15750027</id><snippet>cached = open(CACHE_FILENAME, 'r')
cached = pickle.load(cache)
cached.close()
</snippet></ROW><ROW><id>15750027</id><snippet>import MySQLdb
import csv
import pprint
import time
import pickle

MAX_CACHE_AGE = 60*20  # 20 Minutes
CACHE_FILENAME = 'results.cache'

regen = False
try:
    with open(CACHE_FILENAME, 'r') as cache:
        cached = pickle.load(cache)

    if(time.time() &gt; cached['timestamp'] + MAX_CACHE_AGE):
        print("Cache too old: regenerating cache")
        regen = True
    else:
        print("Cached data is fresh enough: loading results from cache")

except IOError:
    print("Error opening %s: regenerating cache" % CACHE_FILENAME)
    regen = True

if(regen):
    # Cache too old, run query
    db = MySQLdb.connect(host="localhost", # The Host
                     user="username", # username
                     passwd="password", # password
                     db="dbname") # name of the data base

    cursor = db.cursor()
    cursor.execute("SELECT name, id, city, storeid FROM Products;")
    StudentsData = cursor.fetchall()
    cursor.close()

    # Update cache file
    data = {'results': StudentsData, 'timestamp':time.time()}
    with open(CACHE_FILENAME, 'w') as cache:
        pickle.dump(data, cache)

else:
    # Cached data is fresh enough, use that
    StudentsData = cached['results']


print StudentsData
</snippet></ROW><ROW><id>15750421</id><snippet>global</snippet></ROW><ROW><id>15750421</id><snippet>def prompt():
  global number
  number = raw_input("new 4 digit number: ") 
  prompt()
</snippet></ROW><ROW><id>15750421</id><snippet>global</snippet></ROW><ROW><id>15750499</id><snippet>itertools.product(range(100), range(100))</snippet></ROW><ROW><id>15750499</id><snippet>itertools.izip</snippet></ROW><ROW><id>15750567</id><snippet>shutil.make_archive</snippet></ROW><ROW><id>15750567</id><snippet>compression=zipfile.ZIP_DEFLATED</snippet></ROW><ROW><id>15750567</id><snippet>zipfile</snippet></ROW><ROW><id>15750567</id><snippet>-r</snippet></ROW><ROW><id>15750567</id><snippet>-q</snippet></ROW><ROW><id>15750567</id><snippet>zip</snippet></ROW><ROW><id>15750567</id><snippet>zip</snippet></ROW><ROW><id>15750567</id><snippet>tar</snippet></ROW><ROW><id>15750567</id><snippet>gztar</snippet></ROW><ROW><id>15750567</id><snippet>bztar</snippet></ROW><ROW><id>15750567</id><snippet>make_archive</snippet></ROW><ROW><id>15750567</id><snippet>shutil</snippet></ROW><ROW><id>15750857</id><snippet>myList = []
mySet = set()
co1 = (12,20) # and so on..
valuesToCheck = [co1,co2,co3,co4,co5,co6,co7,co8,co9]

# In each step:
# Adding 2 coordinates
myList.append((x1,y1))
myList.append((x2,y2))
mySet.add((x1, y1))
mySet.add((x2, y2))
# Searching 9 specific coordinates among all
for coordinate in valuesToCheck:
    if coordinate in mySet:
        print "Hit!"
        break
# Note that the valuesToCheck will change in each step.

del valuesToCheck[0]
valuesToCheck.append(co10)
</snippet></ROW><ROW><id>15750898</id><snippet>np.triu_indices</snippet></ROW><ROW><id>15750898</id><snippet>def my_triu_indices(n, k=0):
    rows, cols = np.triu_indices(n, k)
    rows = cols - rows - k
    return rows, cols
</snippet></ROW><ROW><id>15750898</id><snippet>&gt;&gt;&gt; a = np.array([2,3,4,5,6,7])
&gt;&gt;&gt; b = np.zeros((4, 4), dtype=a.dtype)
&gt;&gt;&gt; b[my_triu_indices(4, 1)] = a
&gt;&gt;&gt; b
array([[0, 2, 5, 7],
       [0, 0, 3, 6],
       [0, 0, 0, 4],
       [0, 0, 0, 0]])
&gt;&gt;&gt; b[my_triu_indices(4, 1)]
array([2, 3, 4, 5, 6, 7])
</snippet></ROW><ROW><id>15750953</id><snippet>c</snippet></ROW><ROW><id>15750953</id><snippet>users</snippet></ROW><ROW><id>15750953</id><snippet>engine = sa.create_engine('mssql+pyodbc://server/database')
</snippet></ROW><ROW><id>15750953</id><snippet>engine = sa.create_engine('mssql+pyodbc://user:password@server/database')
</snippet></ROW><ROW><id>15750983</id><snippet>\b</snippet></ROW><ROW><id>15750983</id><snippet>\</snippet></ROW><ROW><id>15750983</id><snippet>b</snippet></ROW><ROW><id>15750983</id><snippet>C:\\directory\\b1.mp3</snippet></ROW><ROW><id>15750983</id><snippet>"C:\directory\\b1.mp3"
"C:\\directory\\b1.mp3"
r"C:\directory\b1.mp3"
"C:/directory/b1.mp3"
</snippet></ROW><ROW><id>15750983</id><snippet>QSound::play(filename)</snippet></ROW><ROW><id>15750983</id><snippet>QSound::play()</snippet></ROW><ROW><id>15750983</id><snippet>QSound</snippet></ROW><ROW><id>15750983</id><snippet>play</snippet></ROW><ROW><id>15750983</id><snippet>QSound(r"C:\directory\b1.mp3").play()
</snippet></ROW><ROW><id>15750983</id><snippet>QSound</snippet></ROW><ROW><id>15750983</id><snippet>MyApp.exe</snippet></ROW><ROW><id>15750983</id><snippet>:/sounds/b1.mp3</snippet></ROW><ROW><id>15750983</id><snippet>qrc:///sounds/b1.mp3</snippet></ROW><ROW><id>15751111</id><snippet>entries = []

for k, v in myDict.iteritems():
   entries.append({ "entry": k, "count": v })
</snippet></ROW><ROW><id>15751111</id><snippet>entries = [{'entry': k, 'count': v} for k, v in myDict.iteritems()]
</snippet></ROW><ROW><id>15751111</id><snippet>myDict</snippet></ROW><ROW><id>15751111</id><snippet>myDict['key'] = ...
</snippet></ROW><ROW><id>15751111</id><snippet>myNewDict = {"entry": "word1", "count": 12, "entry": "word2", "count": 18, "entry": "word3", "count": 4, "entry": "word4", "count": 45}
</snippet></ROW><ROW><id>15751111</id><snippet>{'count': 45, 'entry': 'word4'}</snippet></ROW><ROW><id>15751132</id><snippet>import csv

with open("special.csv", "rb") as infile, open("repaired.csv", "wb") as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)
    conversion = set('_"/.$')
    for row in reader:
        newrow = [''.join('_' if c in conversion else c for c in entry) for entry in row]
        writer.writerow(newrow)
</snippet></ROW><ROW><id>15751132</id><snippet>$ cat special.csv
th$s,2.3/,will-be
fixed.,even.though,maybe
some,"shoul""dn't",be
</snippet></ROW><ROW><id>15751132</id><snippet>$ cat repaired.csv 
th_s,2_3_,will-be
fixed_,even_though,maybe
some,shoul_dn't,be
</snippet></ROW><ROW><id>15751132</id><snippet>text =  input.read()
</snippet></ROW><ROW><id>15751132</id><snippet>_</snippet></ROW><ROW><id>15751132</id><snippet>newtext = '_'
</snippet></ROW><ROW><id>15751132</id><snippet>text</snippet></ROW><ROW><id>15751132</id><snippet>for c in text:
</snippet></ROW><ROW><id>15751132</id><snippet>newtext</snippet></ROW><ROW><id>15751132</id><snippet>    newtext += '_' if c in conversion else c
</snippet></ROW><ROW><id>15751132</id><snippet>    writer.writerow(c)
</snippet></ROW><ROW><id>15751159</id><snippet>__getattribute__</snippet></ROW><ROW><id>15751159</id><snippet>__setattr__</snippet></ROW><ROW><id>15751159</id><snippet>property</snippet></ROW><ROW><id>15751159</id><snippet>__dict__</snippet></ROW><ROW><id>15751159</id><snippet>__getattr__</snippet></ROW><ROW><id>15751159</id><snippet>__setattr__</snippet></ROW><ROW><id>15751159</id><snippet>super().__setattr__</snippet></ROW><ROW><id>15751159</id><snippet>def __setattr__(self, name, value):
    if name == "x":
        super(Test, self).__setattr__(name, value)
    else:
        print "setting attr %s" % name
</snippet></ROW><ROW><id>15751380</id><snippet>from entities import *

class Account(Entity):
    id = IntegerField(group=PRIMARY)  # this field is in primary key group
    iban = IntegerField(group=SECONDARY)  # this is in secondary key group
    balance = FloatField(default=0.0)

class Name(Entity):
    first_name = StringField(group=SECONDARY)
    last_name = StringField(group=SECONDARY)

class Customer(Entity):
    id = IntegerField(group=PRIMARY)
    name = EntityField(Name, group=SECONDARY)
    accounts = ListField(ReferenceField(Account), default=list)

# Create Account objects.
a_1 = Account(1, 111, 10.0)  # __init__() recognizes positional arguments
a_2 = Account(id=2, iban=222, balance=20.0)  # as well as keyword arguments

# Generate hashable key using primary key.
print a_1.keyify()  # prints '(1,)'

# Generate hashable key using secondary key.
print a_2.keyify(SECONDARY)  # prints '(222,)'

# Create Customer object.
c = Customer(1, Name('eser', 'aygun'))

# Generate hashable key using primary key.
print c.keyify()  # prints '(1,)'

# Generate hashable key using secondary key.
print c.keyify(SECONDARY)  # prints '(('eser', 'aygun'),)'

# Try validating an invalid object.
c.accounts.append(123)
try:
    c.validate()  # fails
except ValidationError:
    print 'accounts list is only for Account objects'

# Try validating a valid object.
c.accounts = [a_1, a_2]
c.validate()  # succeeds
</snippet></ROW><ROW><id>15751480</id><snippet>for tag in applicant.tags</snippet></ROW><ROW><id>15751540</id><snippet>grouper</snippet></ROW><ROW><id>15751540</id><snippet>itertools</snippet></ROW><ROW><id>15751540</id><snippet>groups = grouper(4, file)
</snippet></ROW><ROW><id>15751540</id><snippet>izip</snippet></ROW><ROW><id>15751540</id><snippet>tuple</snippet></ROW><ROW><id>15751540</id><snippet>groups = [list(group) for group in grouper(4, file)]
</snippet></ROW><ROW><id>15751540</id><snippet>more_itertools</snippet></ROW><ROW><id>15751540</id><snippet>itertools</snippet></ROW><ROW><id>15751540</id><snippet>more_itertools</snippet></ROW><ROW><id>15751540</id><snippet>groupby</snippet></ROW><ROW><id>15751540</id><snippet>groups = itertools.groupby(file, lambda line: not line.strip())
</snippet></ROW><ROW><id>15751540</id><snippet>groupby</snippet></ROW><ROW><id>15751540</id><snippet>key, group</snippet></ROW><ROW><id>15751540</id><snippet>group</snippet></ROW><ROW><id>15751540</id><snippet>key</snippet></ROW><ROW><id>15751540</id><snippet>groups = [group for empty, group 
          in itertools.groupby(file, lambda line: not line.strip())
          if not empty]
</snippet></ROW><ROW><id>15751540</id><snippet>_grouper</snippet></ROW><ROW><id>15751540</id><snippet>groups = [list(group) for empty, group 
          in itertools.groupby(file, lambda line: not line.strip())
          if not empty]
</snippet></ROW><ROW><id>15751540</id><snippet>groupby</snippet></ROW><ROW><id>15751540</id><snippet>lambda line: not line.strip()</snippet></ROW><ROW><id>15751540</id><snippet>more_functools.negate(line.strip)</snippet></ROW><ROW><id>15751550</id><snippet>In [13]: [[[None for i in range(3)] for j in range(10)] for k in range(10)]
Out[13]: 
[[[None, None, None],
  [None, None, None],
  [None, None, None],
  [None, None, None],
  [None, None, None],
  [None, None, None],
  [None, None, None],
  [None, None, None],
  [None, None, None],
  [None, None, None]],
 [[None, None, None],
  [None, None, None],
  [None, None, None],
  ... etc
</snippet></ROW><ROW><id>15751550</id><snippet>In [23]: l = [[[letters[j]+str(i+1), random.randrange(100)+1, 0] for i in range(10)]for j in range(10)]
In [24]: pprint(l)
[[['a1', 82, 0],
  ['a2', 77, 0],
  ['a3', 64, 0],
  ['a4', 34, 0],
  ['a5', 95, 0],
  ['a6', 69, 0],
  ['a7', 4, 0],
  ['a8', 72, 0],
  ['a9', 83, 0],
  ['a10', 100, 0]],
 [['b1', 19, 0],
  ['b2', 59, 0],
  ['b3', 15, 0],
   ...
</snippet></ROW><ROW><id>15751555</id><snippet>stack</snippet></ROW><ROW><id>15751555</id><snippet>unstack</snippet></ROW><ROW><id>15751555</id><snippet>unstack</snippet></ROW><ROW><id>15751555</id><snippet>df</snippet></ROW><ROW><id>15751555</id><snippet>df2 = df.unstack('minor')</snippet></ROW><ROW><id>15751555</id><snippet>stack</snippet></ROW><ROW><id>15751555</id><snippet>unstack</snippet></ROW><ROW><id>15751555</id><snippet>df2 = df.unstack()</snippet></ROW><ROW><id>15751585</id><snippet>u</snippet></ROW><ROW><id>15751585</id><snippet>&gt;&gt;&gt; 'Capit\xe1n\n'.decode('cp1252')
u'Capit\xe1n\n'
&gt;&gt;&gt; print 'Capit\xe1n\n'.decode('cp1252')
Capitán
</snippet></ROW><ROW><id>15751585</id><snippet>encode</snippet></ROW><ROW><id>15751585</id><snippet>f.write(u'Capit\xe1n\n'.encode('utf-8')
</snippet></ROW><ROW><id>15751585</id><snippet>f.write(u'Capit\xe1n\n'.encode('cp1252')
</snippet></ROW><ROW><id>15751601</id><snippet>project.py
project/
    main.py
</snippet></ROW><ROW><id>15751601</id><snippet>import project.main
if __name__ == "__main__":
    project.main.main()
</snippet></ROW><ROW><id>15751779</id><snippet>libraries:
  - name: jinja2
  version: latest
</snippet></ROW><ROW><id>15751779</id><snippet>sudo easy_install jinja2
</snippet></ROW><ROW><id>15751948</id><snippet>int</snippet></ROW><ROW><id>15751948</id><snippet>__format__</snippet></ROW><ROW><id>15751948</id><snippet>The new, global built-in function 'format' simply calls this special
method, similar to how len() and str() simply call their respective
special methods:

    def format(value, format_spec):
        return value.__format__(format_spec)

Several built-in types, including 'str', 'int', 'float', and 'object'
define __format__ methods.  This means that if you derive from any of
those types, your class will know how to format itself.
</snippet></ROW><ROW><id>15751948</id><snippet>s</snippet></ROW><ROW><id>15751948</id><snippet>int</snippet></ROW><ROW><id>15751948</id><snippet>,</snippet></ROW><ROW><id>15751948</id><snippet>&gt;&gt;&gt; format(10000, "s")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: Unknown format code 's' for object of type 'int'
</snippet></ROW><ROW><id>15751964</id><snippet>  if form.validate():
        post = context.get('post')
        form.populate_obj(post)
        post.author = g.user
        post.save()
</snippet></ROW><ROW><id>15751984</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15751984</id><snippet>from collections import defaultdict

v = defaultdict(list)

for key, value in sorted(d.iteritems()):
    v[value].append(key)
</snippet></ROW><ROW><id>15751984</id><snippet>dict</snippet></ROW><ROW><id>15751984</id><snippet>v = {}

for key, value in sorted(d.iteritems()):
    v.setdefault(value, []).append(key)
</snippet></ROW><ROW><id>15751984</id><snippet>sorted(d.items())</snippet></ROW><ROW><id>15752017</id><snippet>In [43]: pivot_product['subtotals'] = pivot_product[('sum', 'counter')].groupby(level=0).transform(np.sum)

In [44]: pivot_product
Out[44]: 
                                                    sum  subtotals
                                                counter           
_product city color  size param1 param2 param3                    
cap      A    black  M    x0006  367    u7            1          1
dress    A    black  S    x0008  1      t1            1          2
         C    yellow M    x0003  44     t2            1          2
purse    A    black  -    x0001  35     r4            1          1
shoes    A    red    36   x0001  23     f1            1          2
         B    white  40   x0002  689    f1            1          2
t-shirt  A    blue   S    x0001  15     f4            1          3
              green  L    x0009  97     f2            1          3
         B    white  L    x0011  100    f2            1          3
All                                                   9          9
</snippet></ROW><ROW><id>15752017</id><snippet>np.size</snippet></ROW><ROW><id>15752017</id><snippet>np.count</snippet></ROW><ROW><id>15752019</id><snippet>wraps</snippet></ROW><ROW><id>15752019</id><snippet>mock.side_effect</snippet></ROW><ROW><id>15752019</id><snippet>somefunction_mock.side_effect = [10, None, 10] 
</snippet></ROW><ROW><id>15752019</id><snippet>somefunction</snippet></ROW><ROW><id>15752019</id><snippet>side_effect</snippet></ROW><ROW><id>15752019</id><snippet> class CustomMock(object):

     calls = 0

     def some_function(self, arg):
         calls = calls + 1
         if calls != 2:
             return my_real_function(arg)
         else:
             return DEFAULT

somefunction_mock.side_effect = CustomMock().some_function
</snippet></ROW><ROW><id>15752283</id><snippet>lows, highs = [], []
with open ('julyTemps.txt') as inFile:
    for line in inFile:
        try:
            day, low, high = map(int, line.split())
        except ValueError:
            continue  # no temps on this line
        lows.append(low)
        highs.append(high)
</snippet></ROW><ROW><id>15752283</id><snippet>ValueError</snippet></ROW><ROW><id>15752358</id><snippet>while</snippet></ROW><ROW><id>15752358</id><snippet>for</snippet></ROW><ROW><id>15752358</id><snippet>for</snippet></ROW><ROW><id>15752358</id><snippet>while</snippet></ROW><ROW><id>15752358</id><snippet>for</snippet></ROW><ROW><id>15752358</id><snippet>while (line = readline(f)) {
    // do something with line
}

for line in f:
    # do something with line
</snippet></ROW><ROW><id>15752358</id><snippet>nonlocal</snippet></ROW><ROW><id>15752358</id><snippet>def set_value1_to(new_value):
    global value1
    value1 = new_value
    return value1

print(set_value1_to(math.factorial(5))
</snippet></ROW><ROW><id>15752614</id><snippet>D = {'Chicago Cubs': [1907, 1908], 'World Series Not Played in 1904': [1904],  'Boston Americans': [1903], 'Arizona Diamondbacks': [2001],  'Baltimore Orioles':[1966, 1970, 1983]}
</snippet></ROW><ROW><id>15752614</id><snippet>newDict = {}
for key, value in D.iteritems():
     newDict [key] = len(value)
</snippet></ROW><ROW><id>15752676</id><snippet>./configure --enable-framework ...
</snippet></ROW><ROW><id>15752676</id><snippet>PYTHONFRAMEWORK</snippet></ROW><ROW><id>15752676</id><snippet>if get_config_var("PYTHONFRAMEWORK"):
    # framework build
</snippet></ROW><ROW><id>15752676</id><snippet>sysconfig</snippet></ROW><ROW><id>15752793</id><snippet>bla</snippet></ROW><ROW><id>15752793</id><snippet>bla</snippet></ROW><ROW><id>15752793</id><snippet>bla</snippet></ROW><ROW><id>15752793</id><snippet>QtDesigner</snippet></ROW><ROW><id>15752793</id><snippet>QMetaObject</snippet></ROW><ROW><id>15752793</id><snippet>bla</snippet></ROW><ROW><id>15752793</id><snippet>bla</snippet></ROW><ROW><id>15752793</id><snippet>pyqtSignal()</snippet></ROW><ROW><id>15752897</id><snippet>range(2,25)
[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
</snippet></ROW><ROW><id>15752897</id><snippet>start</snippet></ROW><ROW><id>15752897</id><snippet>stop</snippet></ROW><ROW><id>15752897</id><snippet>[start, stop)
</snippet></ROW><ROW><id>15753000</id><snippet>commit_manually</snippet></ROW><ROW><id>15753011</id><snippet>import numpy as np
import scipy.interpolate as interpolate
import matplotlib.pyplot as plt


def func(x, y, z):
    return x ** 2 + y ** 2 + z ** 2

# Nx, Ny, Nz = 181, 181, 421
Nx, Ny, Nz = 18, 18, 42

subsample = 2
Mx, My, Mz = Nx // subsample, Ny // subsample, Nz // subsample

# Define irregularly spaced arrays
x = np.random.random(Nx)
y = np.random.random(Ny)
z = np.random.random(Nz)

# Compute the matrix D of shape (Nx, Ny, Nz).
# D could be experimental data, but here I'll define it using func
# D[i,j,k] is associated with location (x[i], y[j], z[k])
X_irregular, Y_irregular, Z_irregular = (
    x[:, None, None], y[None, :, None], z[None, None, :])
D = func(X_irregular, Y_irregular, Z_irregular)

# Create a uniformly spaced grid
xi = np.linspace(x.min(), x.max(), Mx)
yi = np.linspace(y.min(), y.max(), My)
zi = np.linspace(y.min(), y.max(), Mz)
X_uniform, Y_uniform, Z_uniform = (
    xi[:, None, None], yi[None, :, None], zi[None, None, :])

# To use griddata, I need 1D-arrays for x, y, z of length 
# len(D.ravel()) = Nx*Ny*Nz.
# To do this, I broadcast up my *_irregular arrays to each be 
# of shape (Nx, Ny, Nz)
# and then use ravel() to make them 1D-arrays
X_irregular, Y_irregular, Z_irregular = np.broadcast_arrays(
    X_irregular, Y_irregular, Z_irregular)
D_interpolated = interpolate.griddata(
    (X_irregular.ravel(), Y_irregular.ravel(), Z_irregular.ravel()),
    D.ravel(),
    (X_uniform, Y_uniform, Z_uniform),
    method='linear')

print(D_interpolated.shape)
# (90, 90, 210)

# Make plots
fig, ax = plt.subplots(2)

# Choose a z value in the uniform z-grid
# Let's take the middle value
zindex = Mz // 2
z_crosssection = zi[zindex]

# Plot a cross-section of the raw irregularly spaced data
X_irr, Y_irr = np.meshgrid(sorted(x), sorted(y))
# find the value in the irregular z-grid closest to z_crosssection
z_near_cross = z[(np.abs(z - z_crosssection)).argmin()]
ax[0].contourf(X_irr, Y_irr, func(X_irr, Y_irr, z_near_cross))
ax[0].scatter(X_irr, Y_irr, c='white', s=20)   
ax[0].set_title('Cross-section of irregular data')
ax[0].set_xlim(x.min(), x.max())
ax[0].set_ylim(y.min(), y.max())

# Plot a cross-section of the Interpolated uniformly spaced data
X_unif, Y_unif = np.meshgrid(xi, yi)
ax[1].contourf(X_unif, Y_unif, D_interpolated[:, :, zindex])
ax[1].scatter(X_unif, Y_unif, c='white', s=20)
ax[1].set_title('Cross-section of downsampled and interpolated data')
ax[1].set_xlim(x.min(), x.max())
ax[1].set_ylim(y.min(), y.max())

plt.show()
</snippet></ROW><ROW><id>15753058</id><snippet>if PLAT_GTK
    command.go.*.py=python -u "$(FileNameExt)"
</snippet></ROW><ROW><id>15753058</id><snippet>python</snippet></ROW><ROW><id>15753174</id><snippet>concurrent.futures</snippet></ROW><ROW><id>15753174</id><snippet>results = map(tester, urls)
</snippet></ROW><ROW><id>15753174</id><snippet>with concurrent.futures.ThreadPoolExecutor(max_workers=2) as pool:
    results = pool.map(tester, urls)
</snippet></ROW><ROW><id>15753174</id><snippet>max_workers</snippet></ROW><ROW><id>15753174</id><snippet>pip</snippet></ROW><ROW><id>15753174</id><snippet>pip install futures
</snippet></ROW><ROW><id>15753174</id><snippet>sudo pip install futures</snippet></ROW><ROW><id>15753174</id><snippet>pip</snippet></ROW><ROW><id>15753174</id><snippet>futures</snippet></ROW><ROW><id>15753174</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>15753174</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>15753174</id><snippet>multiprocessing</snippet></ROW><ROW><id>15753174</id><snippet>threading</snippet></ROW><ROW><id>15753174</id><snippet>futures</snippet></ROW><ROW><id>15753174</id><snippet>os.fork</snippet></ROW><ROW><id>15753174</id><snippet>thread</snippet></ROW><ROW><id>15753242</id><snippet>a = [1,2,3,4]</snippet></ROW><ROW><id>15753242</id><snippet>lo_values = (1, 10, 20, 30, 40, 50) # this a tuple
hi_values = (9, 19, 29, 39, 49, 60) # this too

rows = [ ('T', 'L', 'L', 'L', 'T', 'B'),
         ('B', 'B', 'B', 'T', 'T', 'T')] # rows is a list containing 2 tuples, one with each row

for row in rows:
    result = []
    previous_value = row[0]
    run_start = 0
    for i in range(1, len(row)):
        value = row[i]
        if value != previous_value:
            lower_bound = lo_values[run_start]
            upper_bound = hi_values[i-1]
            result.append((lower_bound, upper_bound, previous_value))
            run_start = i
        previous_value = value
    lower_bound = lo_values[run_start]
    upper_bound = hi_values[-1]
    result.append((lower_bound, upper_bound, row[-1]))
    print result
</snippet></ROW><ROW><id>15753242</id><snippet>[(1, 9, 'T'), (10, 39, 'L'), (40, 49, 'T'), (50, 60, 'B')]
[(1, 29, 'B'), (30, 60, 'T')]
</snippet></ROW><ROW><id>15753721</id><snippet>nargs</snippet></ROW><ROW><id>15753721</id><snippet>parser.add_argument('-l','--list', nargs='+', ...)
</snippet></ROW><ROW><id>15753721</id><snippet>nargs='+'</snippet></ROW><ROW><id>15753721</id><snippet>nargs='*'</snippet></ROW><ROW><id>15753721</id><snippet>python test.py -l 265340 268738 270774 270817
</snippet></ROW><ROW><id>15753721</id><snippet>python test.py -l "265340 268738 270774 270817"
</snippet></ROW><ROW><id>15753900</id><snippet>iSmall = index</snippet></ROW><ROW><id>15753900</id><snippet>iSmall = index</snippet></ROW><ROW><id>15753900</id><snippet>def selection_sort(list):
    for index in range(0, len(list)):
        iSmall = index
        for i in range(index,len(list)):
            if list[iSmall] &gt; list[i]:
                iSmall = i
        list[index], list[iSmall] = list[iSmall], list[index]
    return list  

if __name__ == '__main__':
    print selection_sort([5,2,4,6,1,3,])
</snippet></ROW><ROW><id>15753900</id><snippet>iSMall</snippet></ROW><ROW><id>15753900</id><snippet>iSmall</snippet></ROW><ROW><id>15753900</id><snippet>index</snippet></ROW><ROW><id>15753900</id><snippet>for i in range(index,len(list)):</snippet></ROW><ROW><id>15753900</id><snippet>iSmall</snippet></ROW><ROW><id>15753900</id><snippet>index</snippet></ROW><ROW><id>15753946</id><snippet>\n</snippet></ROW><ROW><id>15753946</id><snippet>re.DOTALL</snippet></ROW><ROW><id>15753946</id><snippet>findall</snippet></ROW><ROW><id>15753946</id><snippet>strings = re.findall('word1.*?word2.*?word3', f.read(), re.DOTALL)
</snippet></ROW><ROW><id>15753978</id><snippet>from Tkinter import *
from random import *

root=Tk()
canvas=Canvas(root,width=400,height=300,bg='white')
def draw(event=None):
    canvas.delete(ALL)# clear canvas first
    canvas.create_oval(randint(0,399),randint(0,299),15,15,fill='red')
draw()
canvas.pack()

root.bind("&lt;space&gt;", draw)
root.mainloop()
</snippet></ROW><ROW><id>15754005</id><snippet>multiprocessing</snippet></ROW><ROW><id>15754005</id><snippet>Lock</snippet></ROW><ROW><id>15754005</id><snippet>Event</snippet></ROW><ROW><id>15754008</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>15754008</id><snippet>/usr/lib/matlab/R2012a/sys/os/glnxa64/</snippet></ROW><ROW><id>15754008</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>15754164</id><snippet>string.split()</snippet></ROW><ROW><id>15754164</id><snippet>d = {}
for i in range(5):
    user = input('Enter city followed by temperature') 
    # use raw_input(prompt) if using Python 2.x
    data = user.split()
    d[data[0]] = int(data[1])
</snippet></ROW><ROW><id>15754164</id><snippet>dict()</snippet></ROW><ROW><id>15754164</id><snippet>dataPoints = []
for i in range(5):
    user = input('Enter city followed by temperature')
    data = user.split()
    dataPoints.append((data[0], int(data[1])))
d = dict(dataPoints)
</snippet></ROW><ROW><id>15754166</id><snippet>In [60]: df = pd.DataFrame({'A': [1., 1., 1., 2., 2., 2.], 'B': np.arange(1., 7.)})

In [61]: vector = np.array([2,2,2,3,3,3])

In [62]: df.mul(vector, axis=0)
Out[62]: 
   A   B
0  2   2
1  2   4
2  2   6
3  6  12
4  6  15
5  6  18
</snippet></ROW><ROW><id>15754174</id><snippet>Content-Transfer-Encoding: 8bit</snippet></ROW><ROW><id>15754244</id><snippet>def handle_connect_event(self):
    self.is_connected = True
</snippet></ROW><ROW><id>15754244</id><snippet>python -m trace -t script.py</snippet></ROW><ROW><id>15754244</id><snippet>asyncore</snippet></ROW><ROW><id>15754244</id><snippet>#!/usr/bin/python
# -*- coding: iso-8859-15 -*-
import asyncore, socket
from threading import *
from time import sleep
from os import _exit
from logger import *
from config import *

def _map():
    return {}
def _array():
    return []

class logDispatcher(Thread, asyncore.dispatcher):
    def __init__(self, config=None):
        self.inbuffer = ''
        self.buffer = ''
        self.lockedbuffer = False
        self.is_writable = False

        self.is_connected = False

        self.exit = False
        self.initated = False

        asyncore.dispatcher.__init__(self)
        Thread.__init__(self)

        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.connect((server, server_port))
        except:
            log('Could not connect to ' + server, 'LOG_SOCK')
            return None

        self.start()

    def handle_connect_event(self):
        self.is_connected = True

    def handle_connect(self):
        self.is_connected = True
        log('Connected to ' + str(server), 'LOG_SOCK')

    def handle_close(self):
        self.is_connected = False
        self.close()

    def handle_read(self):
        data = self.recv(8192)
        while self.lockedbuffer:
            sleep(0.01)

        self.inbuffer += data


    def handle_write(self):
        while self.is_writable:
            sent = self.send(self.buffer)
            sleep(1)

            self.buffer = self.buffer[sent:]
            if len(self.buffer) &lt;= 0:
                self.is_writable = False
            sleep(0.01)

    def _send(self, what):
        self.buffer += what + '\r\n'
        self.is_writable = True

    def run(self):
        sleep(1)
        log('Log engine initating (hooking on to main)', 'LOG_CORE')

        main = None
        for t in enumerate():
            if t.getName() == 'MainThread':
                main = t

        log('Log engine attached to main', 'LOG_CORE')

        while (main and main.isAlive()) and (self.connected or self.is_connected):
            print 'WHAM', self.connected, self.is_connected
            sleep(1)

while 1:
    logDisp = logDispatcher()
    asyncore.loop(0.1)
    log('Logserver disconnected, trying to reconnect!', 'CORE')
    sleep(10)
</snippet></ROW><ROW><id>15754344</id><snippet>def appendCsvLine(self, line):
    '''Assumes the line is from a csv.reader object'''
    signatureId = int(line[1])
    if len(self.images) &lt;= signatureId:
        newImage = Image(signatureId)
        self.images.append(newImage)
        newImage.append(line)
    else:
        self.images[(signatureId-1)].append(line)
</snippet></ROW><ROW><id>15754344</id><snippet>&gt;&gt;&gt; "100" &gt; 99999999999999999999999
True
</snippet></ROW><ROW><id>15754344</id><snippet>print [img.signatureID for img in self.images]</snippet></ROW><ROW><id>15754361</id><snippet>parser.add_argument('-o', '--outfile', nargs='?', type=argparse.FileType('w'), default='out.json', help='output file, in JSON format')
</snippet></ROW><ROW><id>15754361</id><snippet>parser.add_argument('-o', '--outfile', nargs='?', type=argparse.FileType('w'), help='output file, in JSON format')
</snippet></ROW><ROW><id>15754361</id><snippet>out_file = args.out if args.out is not None else 'json.out'</snippet></ROW><ROW><id>15754361</id><snippet>None</snippet></ROW><ROW><id>15754361</id><snippet>''</snippet></ROW><ROW><id>15754361</id><snippet>-o</snippet></ROW><ROW><id>15754361</id><snippet>None</snippet></ROW><ROW><id>15754453</id><snippet>NaN</snippet></ROW><ROW><id>15754453</id><snippet>None</snippet></ROW><ROW><id>15754453</id><snippet>NaN</snippet></ROW><ROW><id>15754453</id><snippet>import numpy as np
import matplotlib.pyplot as plt

plt.scatter([1, 2, 3], [1, 2, np.nan])
plt.show()
</snippet></ROW><ROW><id>15754453</id><snippet>pandas</snippet></ROW><ROW><id>15754453</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>15754453</id><snippet>pandas</snippet></ROW><ROW><id>15754453</id><snippet>import matplotlib.pyplot as plt
import pandas

x = pandas.Series([1, 2, 3])
y = pandas.Series([1, 2, None])
plt.scatter(x, y)
plt.show()
</snippet></ROW><ROW><id>15754453</id><snippet>pandas</snippet></ROW><ROW><id>15754453</id><snippet>NaN</snippet></ROW><ROW><id>15754453</id><snippet>NaN</snippet></ROW><ROW><id>15754453</id><snippet>NaN</snippet></ROW><ROW><id>15754453</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 6 * np.pi, 300)
y = np.cos(x)

y1 = np.ma.masked_where(y &gt; 0.7, y)

y2 = y.copy()
y2[y &gt; 0.7] = np.nan

fig, axes = plt.subplots(nrows=3, sharex=True, sharey=True)
for ax, ydata in zip(axes, [y, y1, y2]):
    ax.plot(x, ydata)
    ax.axhline(0.7, color='red')

axes[0].set_title('Original')
axes[1].set_title('Masked Arrays')
axes[2].set_title("Using NaN's")

fig.tight_layout()

plt.show()
</snippet></ROW><ROW><id>15754498</id><snippet>import datetime as dt

dow={d:i for i,d in 
         enumerate('Mon,Tue,Wed,Thu,Fri,Sat,Sun'.split(','))}

def next_dow(d,day):
    while d.weekday()!=day:
        d+=dt.timedelta(1)

    return d   

d1=min(next_dow(dt.datetime(2013,4,1),day) 
                 for day in (dow['Tue'],dow['Thu']))   
d2=min(next_dow(dt.datetime(2013,4,2),day) 
                 for day in (dow['Mon'],dow['Wed'],dow['Fri'])) 

for d in d1,d2:
    print d.strftime('%Y-%m-%d') 
</snippet></ROW><ROW><id>15754498</id><snippet>def next_dow(d,days):
    while d.weekday() not in days:
        d+=dt.timedelta(1)

    return d   

d1=next_dow(dt.datetime(2013,4,1),(dow['Tue'],dow['Thu']))
d2=next_dow(dt.datetime(2013,4,2),(dow['Mon'],dow['Wed'],dow['Fri']))

for d in d1,d2:
    print d.strftime('%Y-%m-%d') 
</snippet></ROW><ROW><id>15754498</id><snippet>2013-04-02 
2013-04-03 
</snippet></ROW><ROW><id>15754607</id><snippet>l=[0,0,0,0,0,0,0,0,0,0,0,0]
n = 11

for i in range (0,n):
        l[i] = 1 

print l
carryidx = 0 
for i in reversed(range(0,n - 1)):
        v = l[ n - 1] + l[i]
        if v &gt; 9:
                while l[carryidx] &gt; 9:
                        carryidx += 1
                l[carryidx] += 1
        else:
                l[n - 1] = v 
        l[i] = l[i] - 1 
        print l
</snippet></ROW><ROW><id>15754607</id><snippet>[1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]
[1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0]
[1, 1, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>15754650</id><snippet>import re

str = 'ag ct oso gcota'
str = re.sub('[^atcg]', '', str)

"""str is now 'agctgcta"""
</snippet></ROW><ROW><id>15755220</id><snippet>distinct()</snippet></ROW><ROW><id>15755220</id><snippet>Poll.objects.filter(choice__choice_text__isnull=False).distinct()
</snippet></ROW><ROW><id>15755220</id><snippet>Poll.objects.filter(pub_date__lte=timezone.now)
</snippet></ROW><ROW><id>15755220</id><snippet>SELECT * FROM poll WHERE pub_date &lt;= tz.now</snippet></ROW><ROW><id>15755225</id><snippet>INSERT IGNORE</snippet></ROW><ROW><id>15755225</id><snippet>+----+------+
| id | name |
|----|------|
|  1 | adam |
|  2 |  bob |
|  3 | carl |
+----+------+
</snippet></ROW><ROW><id>15755225</id><snippet>id</snippet></ROW><ROW><id>15755225</id><snippet>INSERT IGNORE INTO tableName (id, name) VALUES (3, "carl"), (4, "dave");
</snippet></ROW><ROW><id>15755225</id><snippet>+----+------+
| id | name |
|----|------|
|  1 | adam |
|  2 |  bob |
|  3 | carl |
|  4 | dave |
+----+------+
</snippet></ROW><ROW><id>15755225</id><snippet>INSERT</snippet></ROW><ROW><id>15755225</id><snippet>IGNORE</snippet></ROW><ROW><id>15755225</id><snippet>SELECT LAST_INSERT_ID()
</snippet></ROW><ROW><id>15755225</id><snippet>INSERT IGNORE</snippet></ROW><ROW><id>15755258</id><snippet>import svmutil</snippet></ROW><ROW><id>15755258</id><snippet>sudo port install py27-scikit-learn</snippet></ROW><ROW><id>15755258</id><snippet>py27</snippet></ROW><ROW><id>15755454</id><snippet>linecache</snippet></ROW><ROW><id>15755454</id><snippet>import linecache

final_lines = []
f = open("file.txt", "r")
i = 1
for line in f:
    if "B" in line:
        if "A" in linecache.getline("file.txt", i-1):
            linestart = i - 2  ##2 lines before
        if "C" in linecache.getline("file.txt", i+1):
            lineend = i + 2  ##2 lines after
            for j in range(linestart, lineend+1):
                final_lines += linecache.getline("file.txt", j)
    i += 1
f.close()
print(final_lines)
</snippet></ROW><ROW><id>15755847</id><snippet>s = ''
for j in range(30, 0, -1):
    s += "{}/{} + ".format(31-j, j)
print s[:-2]
</snippet></ROW><ROW><id>15755944</id><snippet>import signal
import os
import sys

def callKdestroy():
    print "call kdestroy"

def signal_handler(signum, frame):
    # ensures unwinding of Python execution.
    print "got signal"
    sys.exit(1)

signal.signal(signal.SIGTERM, signal_handler)

try:
    ...
finally:
    callKdestroy()
</snippet></ROW><ROW><id>15756128</id><snippet>data2 = data1.reset_index()
data3 = data2.set_index(["Bool", "Dir", "index"])   # index is the new column created by reset_index
running_sum = data3.groupby(level=[0,1,2]).sum().groupby(level=[0,1]).cumsum()
</snippet></ROW><ROW><id>15756128</id><snippet>cumsum</snippet></ROW><ROW><id>15756128</id><snippet>data3</snippet></ROW><ROW><id>15756128</id><snippet>Bool</snippet></ROW><ROW><id>15756128</id><snippet>Dir</snippet></ROW><ROW><id>15756128</id><snippet>sum</snippet></ROW><ROW><id>15756128</id><snippet>mean</snippet></ROW><ROW><id>15756128</id><snippet>cumsum</snippet></ROW><ROW><id>15756128</id><snippet>cumsum</snippet></ROW><ROW><id>15756128</id><snippet>sum</snippet></ROW><ROW><id>15756504</id><snippet>quad[np.ix_([1, 3], [1, 3])]
</snippet></ROW><ROW><id>15756504</id><snippet>x = [[1, 1], [3, 3]]
y = [[1, 3], [1, 3]]
quad[x, y]
</snippet></ROW><ROW><id>15756520</id><snippet>def multi_a_b(self, cr, uid, ids, name, arg, context=None):
    res = {}
    for record in self.browse(cr, uid, ids,context):
        res[record.id] = record.field_a * record.field_b
    return res

_columns = {
    'field_a': fields.integer('A'),
    'field_b': fields.integer('B'),
    'field_c': fields.function(multi_a_b, type='integer', 'C'),
}
</snippet></ROW><ROW><id>15756558</id><snippet>[rec for rec in ListTwo if rec[0] in ListOne]
</snippet></ROW><ROW><id>15756558</id><snippet>ListOne = set(ListOne)
</snippet></ROW><ROW><id>15756933</id><snippet>from datetime import date
end = date(2012, 5, 21)
start = date(2012, 4, 1)
Diff = end - start      
print Diff.days / 7     # convert to number of weeks
</snippet></ROW><ROW><id>15757262</id><snippet>sudo</snippet></ROW><ROW><id>15757799</id><snippet>l = [1, 2, 3, 4, 5, 6, 7, 8]
l1,l2 = l[:len(l)/2], l[len(l)/2:]
l = [ [x,y] for x,y in zip (l1, l2[::-1])]
for i in range(len(l)):
        if isinstance(l[i][0], list):
                l[i] = [x for item in l[i] for x in item]
print l

l1,l2 = l[:len(l)/2], l[len(l)/2:]
l = [ [x,y] for x,y in zip (l1, l2[::-1])]
for i in range(len(l)):
        if isinstance(l[i][0], list):
                l[i] = [x for item in l[i] for x in item]
print l
</snippet></ROW><ROW><id>15757799</id><snippet>[[1, 8], [2, 7], [3, 6], [4, 5]]
[[1, 8, 4, 5], [2, 7, 3, 6]]
</snippet></ROW><ROW><id>15757942</id><snippet>class Widget(QWidget):
    def __init__(self, scene):
        ...
        self.scene = scene
        ...

    def Refresh(self):
        print "On Refresh! - ", self.scene.items()


 class MainWindow(QMainWindow):
 ...
     def showInspector(self):
         self.I = Widget(self.scene)
 ...
</snippet></ROW><ROW><id>15758030</id><snippet>$('#save').click(function() {
    y = JSON.stringify(result);
    console.log(result)
    $.post("/save_leads", {x:y})
    .done(function() {})
    .fail(function() { alert("error"); })
});
</snippet></ROW><ROW><id>15758030</id><snippet>def save_leads(self):
    result = self.request.get('x')
    result = json.loads(result)
</snippet></ROW><ROW><id>15758030</id><snippet>jQuery -&gt; post(JSON) -&gt; Python</snippet></ROW><ROW><id>15758084</id><snippet>urllib2</snippet></ROW><ROW><id>15758084</id><snippet>import urllib2
html = urllib2.urlopen(myurl).read()
</snippet></ROW><ROW><id>15758084</id><snippet>open()</snippet></ROW><ROW><id>15758084</id><snippet>BeautifulSoup()</snippet></ROW><ROW><id>15759147</id><snippet>any</snippet></ROW><ROW><id>15759147</id><snippet>&gt;&gt;&gt; any([{}, {}, {}, {}, {}, {}, {}])
False
&gt;&gt;&gt; any([{}, {}, {}, {}, {}, {}, {'key': 'val'}])
True
</snippet></ROW><ROW><id>15759147</id><snippet>any</snippet></ROW><ROW><id>15759147</id><snippet>True</snippet></ROW><ROW><id>15759147</id><snippet>False
0  # and any value equal to it, e.g. 0.0
None
[]
()
# and any other empty container
</snippet></ROW><ROW><id>15759147</id><snippet>{}</snippet></ROW><ROW><id>15759147</id><snippet>False</snippet></ROW><ROW><id>15759147</id><snippet>True</snippet></ROW><ROW><id>15759147</id><snippet>True</snippet></ROW><ROW><id>15759174</id><snippet>ZeroDivisionError</snippet></ROW><ROW><id>15759174</id><snippet>__init__</snippet></ROW><ROW><id>15759174</id><snippet>if bins == None: 
    bins = freqdist.B() 
self._freqdist = freqdist 
self._T = self._freqdist.B() 
self._Z = bins - self._freqdist.B() 
</snippet></ROW><ROW><id>15759174</id><snippet>bins</snippet></ROW><ROW><id>15759174</id><snippet>None</snippet></ROW><ROW><id>15759174</id><snippet>self._Z</snippet></ROW><ROW><id>15759174</id><snippet>freqdist.B() - freqdist.B()</snippet></ROW><ROW><id>15759174</id><snippet>self._P0 = self._T / float(self._Z * (self._N + self._T))
</snippet></ROW><ROW><id>15759174</id><snippet>self._P0 = freqdist.B() / 0.0
</snippet></ROW><ROW><id>15759174</id><snippet>bins</snippet></ROW><ROW><id>15759174</id><snippet>freqdist.B()</snippet></ROW><ROW><id>15759174</id><snippet>print lm.entropy(fake_test)
</snippet></ROW><ROW><id>15759174</id><snippet>NotImplementedError</snippet></ROW><ROW><id>15759174</id><snippet>WittenBellProbDist</snippet></ROW><ROW><id>15759174</id><snippet>def discount(self): 
    raise NotImplementedError()
</snippet></ROW><ROW><id>15759174</id><snippet>discount</snippet></ROW><ROW><id>15759174</id><snippet>prob</snippet></ROW><ROW><id>15759174</id><snippet>logprob</snippet></ROW><ROW><id>15759174</id><snippet>NgramModel</snippet></ROW><ROW><id>15759174</id><snippet>NLTK</snippet></ROW><ROW><id>15759174</id><snippet>WittenBellProbDist</snippet></ROW><ROW><id>15759364</id><snippet>pytest_collection_modifyitems</snippet></ROW><ROW><id>15759488</id><snippet>a</snippet></ROW><ROW><id>15759488</id><snippet>do_something()</snippet></ROW><ROW><id>15759488</id><snippet>None</snippet></ROW><ROW><id>15759488</id><snippet>or</snippet></ROW><ROW><id>15759488</id><snippet>b</snippet></ROW><ROW><id>15759488</id><snippet>do_otherthing()</snippet></ROW><ROW><id>15759721</id><snippet>class A(object):
    def methodX(self):
        print "A.methodX"
    def methodY(self):
        print "A.methodY"
        self.methodX()

class B(A):
    def methodZ(self):
        print "B.methodZ"
        self.methodY()

b = B()
b.methodZ()
</snippet></ROW><ROW><id>15759721</id><snippet>$ python test.py
B.methodZ
A.methodY
A.methodX
$
</snippet></ROW><ROW><id>15759781</id><snippet>os.rename(imageFolder, os.path.join(imageFolder, currentLanguage))
</snippet></ROW><ROW><id>15759781</id><snippet>os.path.join(imageFolder, currentLanguage)</snippet></ROW><ROW><id>15759781</id><snippet>IMAGES\REF_IMAGES\-FR</snippet></ROW><ROW><id>15759781</id><snippet>IMAGES\REF_IMAGES-FR</snippet></ROW><ROW><id>15759781</id><snippet>originalName = imageFolder + currentLanguage
os.rename(imageFolder, originalName)
</snippet></ROW><ROW><id>15759839</id><snippet>&gt;&gt;&gt; a = [1.1 , 2 , 3.1 , 4 , 5 , 6 , 7.2 , 8.5 , 9.1]
&gt;&gt;&gt; sum(x &gt; 7 for x in a)
3
</snippet></ROW><ROW><id>15759839</id><snippet>bool</snippet></ROW><ROW><id>15759839</id><snippet>int</snippet></ROW><ROW><id>15760068</id><snippet>WebDriverBackedSelenium</snippet></ROW><ROW><id>15760068</id><snippet>from selenium import webdriver
from selenium import selenium
driver = webdriver.Firefox()
sel = selenium('localhost', 4444, '*webdriver', 'http://www.google.com')
sel.start(driver = driver)
</snippet></ROW><ROW><id>15760068</id><snippet>sel.setSpeed(5000)
</snippet></ROW><ROW><id>15760116</id><snippet>class Scheduling(threading.Thread):
    def __init__(self):
            self.schedule = None
            threading.Thread.__init__(self)

    def run(self):                                
            self.schedule = threading.Timer(2, self.run)
            self.schedule.start()

    def cancel(self):
            self.schedule.cancel()
</snippet></ROW><ROW><id>15760163</id><snippet>import vtk
import numpy as np
import os
import matplotlib.pyplot as plt
import PIL
import Image

DEBUG =False
directory="splitted_mri/"

l = []

k=0 #add the next picture in a differente level of depth/z-positions
for file in os.listdir(directory):
    img = directory + file
    if DEBUG : print img
    l.append(img)
# the os.listdir function do not give the files in the right order 
#so we need to sort them
l=sorted(l)

temp = Image.open(l[0])
h, w = temp.size
d = len(l)*5 #with our sample each images will be displayed 5times to get a better view
if DEBUG : print 'width, height, depth : ',w,h,d

stack = np.zeros((w,d,h),dtype=np.uint8)

for i in l:
    im = Image.open(i)
    temp = np.asarray(im, dtype=int)
    for i in range(5):
        stack[:,k+i,:]= temp
    k+=5
    #~ stack[:,k,:]= temp
    #~ k+=1

if DEBUG :
    res = np.amax(stack)
    print 'max value',res
    res1 = np.amin(stack)
print 'min value',res1

#convert the stack in the right dtype
stack = np.require(stack,dtype=np.uint8)

if DEBUG :#check if the image have not been modified
test = stack [:,0,:]
plt.imshow(test,cmap='gray')
plt.show()

if DEBUG : print 'stack shape &amp; dtype' ,stack.shape,',',stack.dtype

dataImporter = vtk.vtkImageImport()
data_string = stack.tostring()

dataImporter.CopyImportVoidPointer(data_string, len(data_string))
dataImporter.SetDataScalarTypeToUnsignedChar()
dataImporter.SetNumberOfScalarComponents(1)

#vtk uses an array in the order : height, depth, width which is 
#different of numpy (w,h,d) 
w, d, h = stack.shape
dataImporter.SetDataExtent(0, h-1, 0, d-1, 0, w-1)
dataImporter.SetWholeExtent(0, h-1, 0, d-1, 0, w-1)

alphaChannelFunc = vtk.vtkPiecewiseFunction()
colorFunc = vtk.vtkColorTransferFunction()
for i in range(256):
    alphaChannelFunc.AddPoint(i, 0.2)
    colorFunc.AddRGBPoint(i,i/255.0,i/255.0,i/255.0)
# for our test sample, we set the black opacity to 0 (transparent) so as
#to see the sample  
alphaChannelFunc.AddPoint(0, 0.0)
colorFunc.AddRGBPoint(0,0,0,0)

volumeProperty = vtk.vtkVolumeProperty()
volumeProperty.SetColor(colorFunc)
#volumeProperty.ShadeOn()
volumeProperty.SetScalarOpacity(alphaChannelFunc)

# This class describes how the volume is rendered (through ray tracing).
compositeFunction = vtk.vtkVolumeRayCastCompositeFunction()
# We can finally create our volume. We also have to specify the data for
# it, as well as how the data will be rendered.
volumeMapper = vtk.vtkVolumeRayCastMapper()
# function to reduce the spacing between each image
volumeMapper.SetMaximumImageSampleDistance(0.01)

volumeMapper.SetVolumeRayCastFunction(compositeFunction)
volumeMapper.SetInputConnection(dataImporter.GetOutputPort())

# The class vtkVolume is used to pair the preaviusly declared volume as 
#well as the properties to be used when rendering that volume.
volume = vtk.vtkVolume()
volume.SetMapper(volumeMapper)
volume.SetProperty(volumeProperty)

# With almost everything else ready, its time to initialize the renderer and window,
# as well as creating a method for exiting the application
renderer = vtk.vtkRenderer()
renderWin = vtk.vtkRenderWindow()
renderWin.AddRenderer(renderer)
renderInteractor = vtk.vtkRenderWindowInteractor()
renderInteractor.SetRenderWindow(renderWin)

# We add the volume to the renderer ...
renderer.AddVolume(volume)
# ... set background color to white ...
renderer.SetBackground(1, 1, 1)
# ... and set window size.
renderWin.SetSize(550, 550)
renderWin.SetMultiSamples(4)
# A simple function to be called when the user decides to quit the application.
def exitCheck(obj, event):
    if obj.GetEventPending() != 0:
        obj.SetAbortRender(1)

# Tell the application to use the function as an exit check.
renderWin.AddObserver("AbortCheckEvent", exitCheck)

#to auit, press q
renderInteractor.Initialize()
# Because nothing will be rendered without any input, we order the first
# render manually before control is handed over to the main-loop.
renderWin.Render()
renderInteractor.Start()
</snippet></ROW><ROW><id>15760199</id><snippet>struct</snippet></ROW><ROW><id>15760199</id><snippet>x = 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000'
a = x # for having more successive variables
b = a.decode('hex')
print repr(b)
# -&gt; '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
</snippet></ROW><ROW><id>15760199</id><snippet>c = b[::-1]
# -&gt; '\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

d = c.encode('hex')
z = d
print z
# -&gt; 00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
</snippet></ROW><ROW><id>15760718</id><snippet>import subprocess as sub

def write_data(filename, data):
    cmd = ('exiftool', '-Comment=%s' % data, filename)
    sub.check_call(cmd)

def get_data(filename):
    cmd = ('exiftool', '-Comment', filename)
    return sub.check_output(cmd).split(':', 1)[-1].strip()

write_data('IMG_0001.jpg', 'a'*2048)
assert get_data('IMG_0001.jpg') == 'a'*2048
</snippet></ROW><ROW><id>15760939</id><snippet>stringToQueryLevel1 = ['why this', 'why this code', 'why this code is complex']
for item in stringToQueryLevel1:
    print ' ' in item
</snippet></ROW><ROW><id>15760957</id><snippet>class Cubic(object):
    def __init__(self, c=None, d=None):
        if c is None:
            c = random.choice([False, True])
        if d is None:
            d = 1 if c else random.choice([1, 2, 3])
        print c, d
</snippet></ROW><ROW><id>15761712</id><snippet>form-INITIAL_FORMS</snippet></ROW><ROW><id>15761712</id><snippet>form-INITIAL_FORMS</snippet></ROW><ROW><id>15762027</id><snippet>$mkdir TestPool
$cd TestPool/
$for i in {1..100}
&gt; do
&gt;     touch "test$i"
&gt; done
$ls
test1    test18  test27  test36  test45  test54  test63  test72  test81  test90
test10   test19  test28  test37  test46  test55  test64  test73  test82  test91
test100  test2   test29  test38  test47  test56  test65  test74  test83  test92
test11   test20  test3   test39  test48  test57  test66  test75  test84  test93
test12   test21  test30  test4   test49  test58  test67  test76  test85  test94
test13   test22  test31  test40  test5   test59  test68  test77  test86  test95
test14   test23  test32  test41  test50  test6   test69  test78  test87  test96
test15   test24  test33  test42  test51  test60  test7   test79  test88  test97
test16   test25  test34  test43  test52  test61  test70  test8   test89  test98
test17   test26  test35  test44  test53  test62  test71  test80  test9   test99
$vi test_pool_dir.py
$cat test_pool_dir.py 
import os
import multiprocessing

class Foo(object):
    def __init__(self, fname):
        self.fname = fname   #or your calculations


def parallel_get_foos(directory):
    p = multiprocessing.Pool()
    foos = p.map(Foo, [os.path.join(directory, fname) for fname in os.listdir(directory)])
    p.close()
    p.join()
    return foos

if __name__ == '__main__':
    foos = parallel_get_foos('.')
    print len(foos)   #expected 101: 100 files plus this script

$python test_pool_dir.py 
101
</snippet></ROW><ROW><id>15762027</id><snippet>$python --version
Python 2.7.3
$uname -a
Linux giacomo-Acer 3.2.0-39-generic #62-Ubuntu SMP Thu Feb 28 00:28:53 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
</snippet></ROW><ROW><id>15762027</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; def test():
...     def test2(): pass
...     return test2
... 
&gt;&gt;&gt; import multiprocessing
&gt;&gt;&gt; p = multiprocessing.Pool()
&gt;&gt;&gt; p.map(test(), [1,2,3])
Exception in thread Thread-2:
Traceback (most recent call last):
  File "/usr/lib/python2.7/threading.py", line 551, in __bootstrap_inner
    self.run()
  File "/usr/lib/python2.7/threading.py", line 504, in run
    self.__target(*self.__args, **self.__kwargs)
  File "/usr/lib/python2.7/multiprocessing/pool.py", line 319, in _handle_tasks
    put(task)
PicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed
</snippet></ROW><ROW><id>15762027</id><snippet>&gt;&gt;&gt; pickle.dumps(test())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/pickle.py", line 1374, in dumps
    Pickler(file, protocol).dump(obj)
  File "/usr/lib/python2.7/pickle.py", line 224, in dump
    self.save(obj)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 748, in save_global
    (obj, module, name))
pickle.PicklingError: Can't pickle &lt;function test2 at 0x7fad15fc2938&gt;: it's not found as __main__.test2
</snippet></ROW><ROW><id>15762027</id><snippet>pickle</snippet></ROW><ROW><id>15762027</id><snippet>None</snippet></ROW><ROW><id>15762027</id><snippet>True</snippet></ROW><ROW><id>15762027</id><snippet>False</snippet></ROW><ROW><id>15762027</id><snippet>tuple</snippet></ROW><ROW><id>15762027</id><snippet>list</snippet></ROW><ROW><id>15762027</id><snippet>set</snippet></ROW><ROW><id>15762027</id><snippet>__dict__</snippet></ROW><ROW><id>15762027</id><snippet>__getstate__()</snippet></ROW><ROW><id>15762141</id><snippet>urls.py</snippet></ROW><ROW><id>15762141</id><snippet>ROOT_URLCONF = 'urls'
</snippet></ROW><ROW><id>15762141</id><snippet>urls.py</snippet></ROW><ROW><id>15762141</id><snippet>ROOT_URLCONF = 'modulename.urls'
</snippet></ROW><ROW><id>15762344</id><snippet>expression.AddChart(Type, Left, Top, Width, Height)</snippet></ROW><ROW><id>15762344</id><snippet>wb.Worksheets.Add(Type:=xlChart)</snippet></ROW><ROW><id>15762939</id><snippet>super(Derived, self).__init__()</snippet></ROW><ROW><id>15762939</id><snippet>super()</snippet></ROW><ROW><id>15762939</id><snippet>&gt;&gt;&gt; super(Derived, object())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: must be type, not function
&gt;&gt;&gt; type(Derived)
&lt;type 'function'&gt;
</snippet></ROW><ROW><id>15762939</id><snippet>Derived</snippet></ROW><ROW><id>15762939</id><snippet>Derived.__init__()</snippet></ROW><ROW><id>15762939</id><snippet>def my_deco(name):
    # define the decorator function that acts on the actual class definition
    def decorator(cls):

        # do something here with the information
        print name, cls

        setattr(class, name, 'Hello world!')

        # return the original, augmented class
        return cls

    # return the decorator to act on the class definition
    return decorator
</snippet></ROW><ROW><id>15763064</id><snippet>$ easy_install -U pyobjc-core
$ easy_install -U pyobjc
</snippet></ROW><ROW><id>15763401</id><snippet>b</snippet></ROW><ROW><id>15763401</id><snippet>self.b.setShortcut(newkey)</snippet></ROW><ROW><id>15763401</id><snippet>b</snippet></ROW><ROW><id>15763401</id><snippet>getattr()</snippet></ROW><ROW><id>15763401</id><snippet>getattr(self, b).setShortcut(newkey)
</snippet></ROW><ROW><id>15763401</id><snippet>self.widgets = {"btn3": QtGui.QPushButton(self)}
...
self.widgets[b].setShortcut(newkey)
</snippet></ROW><ROW><id>15763629</id><snippet>email.mime</snippet></ROW><ROW><id>15763629</id><snippet>import requests
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

related = MIMEMultipart('related')

submission = MIMEText('text', 'xml', 'utf8')
submission.set_payload(open('submission_set.xml', 'rb').read())
related.attach(submission)

document = MIMEText('text', 'plain')
document.set_payload(open('document.txt', 'rb').read())
related.attach(document)

headers = dict(related.items())
body = related.as_string().split('\n\n', 1)[1]

r = requests.post(url, data=body, headers=headers)
</snippet></ROW><ROW><id>15763629</id><snippet>document</snippet></ROW><ROW><id>15763629</id><snippet>requests</snippet></ROW><ROW><id>15763629</id><snippet>multipart/form-data</snippet></ROW><ROW><id>15763629</id><snippet>multipart/related</snippet></ROW><ROW><id>15764370</id><snippet>QImage</snippet></ROW><ROW><id>15764370</id><snippet>QPixmap</snippet></ROW><ROW><id>15764370</id><snippet>QImage</snippet></ROW><ROW><id>15764370</id><snippet>qImage = QtGui.QImage(qtImage)
</snippet></ROW><ROW><id>15764370</id><snippet>qImage = QtGui.QImage(qtImage).convertToFormat(QtGui.QImage.Format_ARGB32)
</snippet></ROW><ROW><id>15764376</id><snippet>.read_file()</snippet></ROW><ROW><id>15764376</id><snippet>config</snippet></ROW><ROW><id>15764376</id><snippet>with open('RecorderMover.config.ini', 'r', encoding='utf-8') as f:
    config.read_file(f)
</snippet></ROW><ROW><id>15764376</id><snippet>.read()</snippet></ROW><ROW><id>15764376</id><snippet>f</snippet></ROW><ROW><id>15764376</id><snippet>.read()</snippet></ROW><ROW><id>15764376</id><snippet>config = configparser.ConfigParser()
config.read('RecorderMover.config.ini', encoding='utf-8')
</snippet></ROW><ROW><id>15764376</id><snippet>\ufeff</snippet></ROW><ROW><id>15764376</id><snippet>with open('RecorderMover.config.ini', 'r', encoding='utf-8') as f:
    first = f.read(1)
    if first != '\ufeff':
        # not a BOM, rewind
        f.seek(0)
    config.read_file(f)
</snippet></ROW><ROW><id>15764429</id><snippet>import</snippet></ROW><ROW><id>15764429</id><snippet>&gt;&gt;&gt; import pyximport; pyximport.install()
&gt;&gt;&gt; import helloworld
Hello World
</snippet></ROW><ROW><id>15764651</id><snippet>len()</snippet></ROW><ROW><id>15764651</id><snippet>In [16]: import dis

In [18]: lis=["a"*10000,"b"*10000,"c"*10000]*1000

In [19]: def first():
    for item in lis:
        if len(item)&lt;100:
            pass
        elif 100&lt;len(item)&lt;200:
            pass
        elif 300&lt;len(item)&lt;400:
            pass
   ....:         

In [20]: def second():
    for item in lis:
        x=len(item)
        if x&lt;100:
                pass
        elif 100&lt;x&lt;200:
                pass
        elif 300&lt;x&lt;400:
                pass
   ....:         
</snippet></ROW><ROW><id>15764651</id><snippet>timeit</snippet></ROW><ROW><id>15764651</id><snippet>In [21]: %timeit first()
100 loops, best of 3: 2.03 ms per loop

In [22]: %timeit second()
1000 loops, best of 3: 1.66 ms per loop
</snippet></ROW><ROW><id>15764651</id><snippet>dis.dis()</snippet></ROW><ROW><id>15764651</id><snippet>In [24]: dis.dis(first)
  2           0 SETUP_LOOP             109 (to 112)
              3 LOAD_GLOBAL              0 (lis)
              6 GET_ITER            
        &gt;&gt;    7 FOR_ITER               101 (to 111)
             10 STORE_FAST               0 (item)

  3          13 LOAD_GLOBAL              1 (len)
             16 LOAD_FAST                0 (item)
             19 CALL_FUNCTION            1
             22 LOAD_CONST               1 (100)
             25 COMPARE_OP               0 (&lt;)
             28 POP_JUMP_IF_FALSE       34

  4          31 JUMP_ABSOLUTE            7

  5     &gt;&gt;   34 LOAD_CONST               1 (100)
             37 LOAD_GLOBAL              1 (len)
             40 LOAD_FAST                0 (item)
             43 CALL_FUNCTION            1
             46 DUP_TOP             
             47 ROT_THREE           
             48 COMPARE_OP               0 (&lt;)
             51 JUMP_IF_FALSE_OR_POP    63
             54 LOAD_CONST               2 (200)
             57 COMPARE_OP               0 (&lt;)
             60 JUMP_FORWARD             2 (to 65)
        &gt;&gt;   63 ROT_TWO             
             64 POP_TOP             
        &gt;&gt;   65 POP_JUMP_IF_FALSE       71

  6          68 JUMP_ABSOLUTE            7

  7     &gt;&gt;   71 LOAD_CONST               3 (300)
             74 LOAD_GLOBAL              1 (len)
             77 LOAD_FAST                0 (item)
             80 CALL_FUNCTION            1
             83 DUP_TOP             
             84 ROT_THREE           
             85 COMPARE_OP               0 (&lt;)
             88 JUMP_IF_FALSE_OR_POP   100
             91 LOAD_CONST               4 (400)
             94 COMPARE_OP               0 (&lt;)
             97 JUMP_FORWARD             2 (to 102)
        &gt;&gt;  100 ROT_TWO             
            101 POP_TOP             
        &gt;&gt;  102 POP_JUMP_IF_FALSE        7

  8         105 JUMP_ABSOLUTE            7
            108 JUMP_ABSOLUTE            7
        &gt;&gt;  111 POP_BLOCK           
        &gt;&gt;  112 LOAD_CONST               0 (None)
            115 RETURN_VALUE        

In [25]: dis.dis(second)
  2           0 SETUP_LOOP             103 (to 106)
              3 LOAD_GLOBAL              0 (lis)
              6 GET_ITER            
        &gt;&gt;    7 FOR_ITER                95 (to 105)
             10 STORE_FAST               0 (item)

  3          13 LOAD_GLOBAL              1 (len)
             16 LOAD_FAST                0 (item)
             19 CALL_FUNCTION            1
             22 STORE_FAST               1 (x)

  4          25 LOAD_FAST                1 (x)
             28 LOAD_CONST               1 (100)
             31 COMPARE_OP               0 (&lt;)
             34 POP_JUMP_IF_FALSE       40

  5          37 JUMP_ABSOLUTE            7

  6     &gt;&gt;   40 LOAD_CONST               1 (100)
             43 LOAD_FAST                1 (x)
             46 DUP_TOP             
             47 ROT_THREE           
             48 COMPARE_OP               0 (&lt;)
             51 JUMP_IF_FALSE_OR_POP    63
             54 LOAD_CONST               2 (200)
             57 COMPARE_OP               0 (&lt;)
             60 JUMP_FORWARD             2 (to 65)
        &gt;&gt;   63 ROT_TWO             
             64 POP_TOP             
        &gt;&gt;   65 POP_JUMP_IF_FALSE       71

  7          68 JUMP_ABSOLUTE            7

  8     &gt;&gt;   71 LOAD_CONST               3 (300)
             74 LOAD_FAST                1 (x)
             77 DUP_TOP             
             78 ROT_THREE           
             79 COMPARE_OP               0 (&lt;)
             82 JUMP_IF_FALSE_OR_POP    94
             85 LOAD_CONST               4 (400)
             88 COMPARE_OP               0 (&lt;)
             91 JUMP_FORWARD             2 (to 96)
        &gt;&gt;   94 ROT_TWO             
             95 POP_TOP             
        &gt;&gt;   96 POP_JUMP_IF_FALSE        7

  9          99 JUMP_ABSOLUTE            7
            102 JUMP_ABSOLUTE            7
        &gt;&gt;  105 POP_BLOCK           
        &gt;&gt;  106 LOAD_CONST               0 (None)
            109 RETURN_VALUE   
</snippet></ROW><ROW><id>15764864</id><snippet>if isinstance(num, int)
</snippet></ROW><ROW><id>15764864</id><snippet>if num is int
</snippet></ROW><ROW><id>15764864</id><snippet>num</snippet></ROW><ROW><id>15764864</id><snippet>int</snippet></ROW><ROW><id>15764864</id><snippet>int</snippet></ROW><ROW><id>15764864</id><snippet>num</snippet></ROW><ROW><id>15764937</id><snippet>master</snippet></ROW><ROW><id>15765169</id><snippet>pyglet</snippet></ROW><ROW><id>15765169</id><snippet>$ python -c "from pyglet.window import Window; print Window().context.get_info
().get_version()"
4.2.0
</snippet></ROW><ROW><id>15765169</id><snippet>major_version</snippet></ROW><ROW><id>15765169</id><snippet>minor_version</snippet></ROW><ROW><id>15765169</id><snippet>$ python -c "from pyglet.window import Window; \
             from pyglet.gl import Config; \
             print Window(config=Config(major_version=3, minor_version=2))\
                     .context.get_info().get_version()"
3.2.0
</snippet></ROW><ROW><id>15765169</id><snippet>get_info</snippet></ROW><ROW><id>15765169</id><snippet>get_info</snippet></ROW><ROW><id>15765241</id><snippet>any()</snippet></ROW><ROW><id>15765241</id><snippet>terms_file.write(''.join(term for term in self.terms if term in line))
</snippet></ROW><ROW><id>15765241</id><snippet>for term in self.terms:
    if term in line:
        terms_file.write(term)
</snippet></ROW><ROW><id>15765241</id><snippet>any()</snippet></ROW><ROW><id>15765241</id><snippet>any()</snippet></ROW><ROW><id>15765241</id><snippet>True</snippet></ROW><ROW><id>15765241</id><snippet>terms_file.write()</snippet></ROW><ROW><id>15765241</id><snippet>None</snippet></ROW><ROW><id>15765241</id><snippet>True</snippet></ROW><ROW><id>15765241</id><snippet>False</snippet></ROW><ROW><id>15765487</id><snippet>class MyPanel(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.Bind(wx.EVT_PAINT, self.OnPaint)

        self.loc = wx.Bitmap("intro/image.png")

    def OnPaint(self, evt):
        dc = wx.PaintDC(self)
        dc.SetBackground(wx.Brush("WHITE"))

        # ... drawing here all other images in order of overlapping
        dc.DrawBitmap(self.loc, 0, 0, True)
</snippet></ROW><ROW><id>15765487</id><snippet>wx.PaintDC</snippet></ROW><ROW><id>15765487</id><snippet>wx.Bitmap</snippet></ROW><ROW><id>15765487</id><snippet>wx.Image(..., wx.BITMAP_TYPE_PNG).ConvertToBitmap()</snippet></ROW><ROW><id>15765491</id><snippet>.prepare()</snippet></ROW><ROW><id>15765491</id><snippet>request = requests.Request('POST', url, ...)
request = oauth_hook(request)
prepared = request.prepare()
</snippet></ROW><ROW><id>15765491</id><snippet>session = requests.session()
resp = session.send(request)
</snippet></ROW><ROW><id>15765621</id><snippet>slider = QtGui.QSlider()
slider.setValue( 5 )
print( slider.value() ) # Will print '5'
</snippet></ROW><ROW><id>15765820</id><snippet>a</snippet></ROW><ROW><id>15765820</id><snippet>a = matrix(((1.4,),(2.5,),(1.96,),(6.25,),(12.25,)))
</snippet></ROW><ROW><id>15765820</id><snippet>a = matrix((1.4,2.5,1.96,6.25,12.25)).T
</snippet></ROW><ROW><id>15765820</id><snippet>a = matrix(((1.4),(2.5),(1.96),(6.25),(12.25))).T
</snippet></ROW><ROW><id>15766033</id><snippet>help</snippet></ROW><ROW><id>15766033</id><snippet>&gt;&gt;&gt; help(sorted)

Help on built-in function sorted in module __builtin__:

sorted(...)
    sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list
</snippet></ROW><ROW><id>15766033</id><snippet>numbers = sorted(numbers)
</snippet></ROW><ROW><id>15766033</id><snippet>numbers.sort()
</snippet></ROW><ROW><id>15766033</id><snippet>help(numbers.sort)</snippet></ROW><ROW><id>15766033</id><snippet>print(mean(numbers))
</snippet></ROW><ROW><id>15766033</id><snippet>for line in data: 
    numbers.append(line)
</snippet></ROW><ROW><id>15766033</id><snippet>for line in data: 
    numbers.append(float(line))
</snippet></ROW><ROW><id>15766033</id><snippet>line</snippet></ROW><ROW><id>15766555</id><snippet>  #src.image_data.point_data.add_array(np.indices(list(self.data.shape)[self.nx,self.ny,self.nz])[2].T.ravel())
  src.image_data.point_data.add_array(np.indices(list(self.data.shape))[0].T.ravel())
  src.image_data.point_data.get_array(1).name = 'z'
  # Make sure that the dataset is up to date with the different arrays:
  src.image_data.point_data.update()
  # We select the 'scalar' attribute, ie the norm of Phi
  src2 = mlab.pipeline.set_active_attribute(src, point_scalars='scalar')
  # Cut isosurfaces of the norm
  contour = mlab.pipeline.contour(src2)
  # contour.filter.contours=[plotIsoSurfaceContours]
  # contour.filter.contours=[plotIsoSurfaceContours[0]]
  min_c = min(contour.filter._data_min * 1.05,contour.filter._data_max)
  max_c = max(contour.filter._data_max * 0.95,contour.filter._data_min)
  plotIsoSurfaceContours = [ max(min(max_c,x),min_c) for x in plotIsoSurfaceContours ]
  contour.filter.contours= plotIsoSurfaceContours

  # Now we select the 'angle' attribute, ie the phase of Phi
  contour2 = mlab.pipeline.set_active_attribute(contour, point_scalars='z')
  # And we display the surface. The colormap is the current attribute: the phase.
  # mlab.pipeline.surface(contour2, colormap='hsv')
  xxx = mlab.pipeline.surface(contour2, colormap='gist_ncar')
  colorbar = xxx.module_manager.scalar_lut_manager
  colorbar.reverse_lut = True
  lut = xxx.module_manager.scalar_lut_manager.lut.table.to_array()
  lut[:,-1] = int(plotIsoSurfaceOpacity * 254)
  xxx.module_manager.scalar_lut_manager.lut.table = lut
  # mlab.colorbar(title='Phase', orientation='vertical', nb_labels=3)
</snippet></ROW><ROW><id>15766868</id><snippet>Array</snippet></ROW><ROW><id>15766868</id><snippet>Value</snippet></ROW><ROW><id>15766868</id><snippet>shared memory</snippet></ROW><ROW><id>15766868</id><snippet>multiprocessing</snippet></ROW><ROW><id>15766868</id><snippet>from multiprocessing import Process, Value, Array

def f(n, a):
    n.value = 3.1415927
    for i in range(len(a)):
        a[i] = -a[i]

if __name__ == '__main__':
    num = Value('d', 0.0)
    arr = Array('i', range(10))

    p = Process(target=f, args=(num, arr))
    p.start()
    p.join()

    print(num.value)
    print(arr[:])
</snippet></ROW><ROW><id>15766869</id><snippet>from celery import Celery
from kombu import Exchange

results_exchange = Exchange('myres', type='fanout')

app = Celery()

@app.task(ignore_result=True)
def something():
    res = do_something()
    with app.producer_or_acquire(block=True) as producer:
        producer.send(
            {'result': res},
            exchange=results_exchange,
            serializer='json',
            declare=[results_exchange],
        )
</snippet></ROW><ROW><id>15766869</id><snippet>producer_or_acquire</snippet></ROW><ROW><id>15766869</id><snippet>kombu.Producer</snippet></ROW><ROW><id>15766996</id><snippet>PyModule_GetDict()</snippet></ROW><ROW><id>15767043</id><snippet>L = []
for innerseq in seq:
    for item in innerseq:
        LOOPS
            if CONDITION:
                L.append(BODY)
</snippet></ROW><ROW><id>15767043</id><snippet>[BODY for innerseq in seq for item in innerseq LOOPS if CONDITION]
</snippet></ROW><ROW><id>15767043</id><snippet>for</snippet></ROW><ROW><id>15767043</id><snippet>if</snippet></ROW><ROW><id>15767043</id><snippet>for</snippet></ROW><ROW><id>15767043</id><snippet>[BODY LOOPS[::-1] for item in innerseq for innerseq in seq if CONDITION]
</snippet></ROW><ROW><id>15767043</id><snippet>[BODY if CONDITION LOOPS[::-1] for item in innerseq for innerseq in seq]
</snippet></ROW><ROW><id>15767043</id><snippet>user=&gt; ; using your suggested "right" order
user=&gt; (for [x (range y) y (range 4)] (+ x y))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: y in this context, compiling:(NO_SOURCE_PATH:1) 
user=&gt; ; you need to use the same "wrong" order as Python
user=&gt; (for [y (range 4) x (range y)] (+ x y))
(1 2 3 3 4 5)
</snippet></ROW><ROW><id>15767043</id><snippet>for</snippet></ROW><ROW><id>15767107</id><snippet>transactions = []</snippet></ROW><ROW><id>15767107</id><snippet>.append()</snippet></ROW><ROW><id>15767107</id><snippet>Transaction</snippet></ROW><ROW><id>15767107</id><snippet>transactions = []
for row in datareader:
    transactions.append(Transaction(row))
</snippet></ROW><ROW><id>15767107</id><snippet>transactions = [Transaction(row) for row in datareader]
</snippet></ROW><ROW><id>15767193</id><snippet>struct.unpack</snippet></ROW><ROW><id>15767193</id><snippet>with open('file','rb') as fin:
    header = fin.read(header_size)
    data_str = fin.read(num_data_bytes)
    data_tuple = struct.unpack('100f',data_str)  #100 4-byte floats
</snippet></ROW><ROW><id>15767193</id><snippet>numpy.fromfile</snippet></ROW><ROW><id>15767335</id><snippet>from rauth import OAuth1Service

import re
import webbrowser

request_token_url = 'http://api-public.netflix.com/oauth/request_token'
access_token_url = 'http://api-public.netflix.com/oauth/access_token'
authorize_url = 'https://api-user.netflix.com/oauth/login'
base_url = 'http://api-public.netflix.com/'

netflix = OAuth1Service(consumer_key='123',
                        consumer_secret='456',
                        request_token_url=request_token_url,
                        authorize_url=authorize_url,
                        access_token_url=access_token_url,
                        base_url=base_url)

request_token, request_token_secret = netflix.get_request_token()

oauth_callback = 'http://example.com/oauth/authorized'

params = {'oauth_callback': oauth_callback, 'application_name': 'your_app'}
authed_url = netflix.get_authorize_url(request_token, **params)

print 'Visit this URL in your browser: ' + authed_url
webbrowser.open(authed_url)

url_with_token = raw_input('Copy URL from your browser\'s address bar: ')
request_token = re.search('\?oauth_token=([^&amp;]*)', url_with_token).group(1)

s = netflix.get_auth_session(request_token, request_token_secret)

r = s.get('users/current')
print r.content
</snippet></ROW><ROW><id>15767642</id><snippet>dict</snippet></ROW><ROW><id>15767642</id><snippet>main_dict={
    'dictrefA':{
      "operation_module":"cbs",
      "operation_group":"xxx",
      "operation_type":"yyy"},
    'dictrefB':{
      "operation_module":"cbs",
      "operation_group":"xxx",
      "operation_type":"yyy1"},
    'dictrefC':{
      "operation_module":"cbs",
      "operation_group":"xxx1",
      "operation_type":"yyy1"}
      }

recievedDict={
    "msg_id":100,
    "operation_module":"cbs",
    "operation_group":"xxx",
    "operation_type":"yyy1",
    "user_name":"venkat",
    "msg_length":50}

for x,y in main_dict.items():
    if all(v in recievedDict.items() for v in y.items()):
        print x
        break
</snippet></ROW><ROW><id>15767642</id><snippet>dictrefB
</snippet></ROW><ROW><id>15767764</id><snippet>python -i file.py</snippet></ROW><ROW><id>15767764</id><snippet>$</snippet></ROW><ROW><id>15768511</id><snippet>Decimal('89.12')
</snippet></ROW><ROW><id>15768511</id><snippet>(sign, digits, exponent)</snippet></ROW><ROW><id>15768511</id><snippet>In [3]: Decimal((0, (8, 9, 1, 2), -2))
Out[3]: Decimal('89.12')
</snippet></ROW><ROW><id>15768582</id><snippet>globals().update(__import__(sys.argv[1]).__dict__)
</snippet></ROW><ROW><id>15768740</id><snippet>data = "hashable=test".encode("ascii")
</snippet></ROW><ROW><id>15768740</id><snippet>data = urllib.parse.urlencode({'hashable': 'test'})
</snippet></ROW><ROW><id>15768778</id><snippet>lst = ['foo.py', 'bar.py', 'baz.py', 'qux.py', Ellipsis]
</snippet></ROW><ROW><id>15768778</id><snippet>s = set(lst)
</snippet></ROW><ROW><id>15768778</id><snippet>set</snippet></ROW><ROW><id>15768778</id><snippet>s = set()
for item in iterable:
    s.add(item)
</snippet></ROW><ROW><id>15768778</id><snippet>set.add</snippet></ROW><ROW><id>15769163</id><snippet>table</snippet></ROW><ROW><id>15769163</id><snippet>models.py</snippet></ROW><ROW><id>15769163</id><snippet>def upgrade():
     categories = table('categories',
                       Column('uuid', UUID(),
                              primary_key=True,
                              unique=True, autoincrement=False),
                       Column('name', String),
                       Column('parent', String),
                       Column('created_on', sa.types.DateTime(timezone=True),
                              default=datetime.utcnow())
    )
    op.bulk_insert('categories',
                   [
                       {'name': 'first', 'parent': 'first_parent'},
                       {'name': 'second', 'parent': 'second_parent'}
                   ]
    )
</snippet></ROW><ROW><id>15769163</id><snippet>alembic upgrade head</snippet></ROW><ROW><id>15769203</id><snippet>f.__init__(hi=34)</snippet></ROW><ROW><id>15769203</id><snippet>__init__</snippet></ROW><ROW><id>15769203</id><snippet>__init__</snippet></ROW><ROW><id>15769203</id><snippet>dict</snippet></ROW><ROW><id>15769203</id><snippet>dict.__init__</snippet></ROW><ROW><id>15769203</id><snippet>__init__</snippet></ROW><ROW><id>15769203</id><snippet>self.update()</snippet></ROW><ROW><id>15769203</id><snippet>__init__</snippet></ROW><ROW><id>15769203</id><snippet>.update()</snippet></ROW><ROW><id>15769215</id><snippet>export PYTHONPATH=&lt;path_to_project&gt;</snippet></ROW><ROW><id>15769313</id><snippet>print(*myList, sep='\n')
</snippet></ROW><ROW><id>15769313</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>15769313</id><snippet>print(p) for p in myList</snippet></ROW><ROW><id>15769313</id><snippet>for p in myList: print p
</snippet></ROW><ROW><id>15769313</id><snippet>'\n'.join()</snippet></ROW><ROW><id>15769313</id><snippet>map()</snippet></ROW><ROW><id>15769313</id><snippet>print '\n'.join(str(p) for p in myList) 
</snippet></ROW><ROW><id>15769478</id><snippet>    c.execute("INSERT INTO dbtable (dbcolumn) VALUES (?)", (i,))
</snippet></ROW><ROW><id>15769478</id><snippet>.executemany()</snippet></ROW><ROW><id>15769478</id><snippet>sequence_of_sequences = [('11',), ('22',), ('33',)]
c.executemany("INSERT INTO dbtable (dbcolumn) VALUES (?)", sequence_of_sequences)
</snippet></ROW><ROW><id>15769497</id><snippet>pyinstaller</snippet></ROW><ROW><id>15769497</id><snippet>os</snippet></ROW><ROW><id>15769497</id><snippet>pyinstaller</snippet></ROW><ROW><id>15769701</id><snippet>%s</snippet></ROW><ROW><id>15769701</id><snippet>(%s,%s,%s)</snippet></ROW><ROW><id>15769701</id><snippet>?</snippet></ROW><ROW><id>15770083</id><snippet>In [23]: print [ type(x) for x in htmldata ]
[&lt;type 'lxml.objectify.StringElement'&gt;, &lt;type 'lxml.objectify.StringElement'&gt;, &lt;type 'lxml.objectify.StringElement'&gt;, &lt;type 'lxml.objectify.IntElement'&gt;, &lt;type 'lxml.objectify.IntElement'&gt;, &lt;type 'lxml.objectify.StringElement'&gt;, &lt;type 'lxml.objectify.StringElement'&gt;, &lt;type 'lxml.objectify.IntElement'&gt;, &lt;type 'lxml.objectify.IntElement'&gt;, &lt;type 'lxml.objectify.StringElement'&gt;, &lt;type 'lxml.objectify.IntElement'&gt;, &lt;type 'lxml.objectify.IntElement'&gt;, &lt;type 'lxml.objectify.IntElement'&gt;, &lt;type 'lxml.objectify.StringElement'&gt;]

In [24]: Series([ str(x) for x in htmldata ])
Out[24]: 
0     192.168.1.0
1          XXDHCP
2               Y
3             255
4               0
5          YYDHCP
6               Y
7             250
8               0
9              0%
10            505
11            505
12              0
13               
</snippet></ROW><ROW><id>15770157</id><snippet>def sweep(g, k):
    g = np.asarray(g)
    n = g.shape[0]
    if g.shape != (n, n):
        raise ValueError('Not a square array')
    if not np.allclose(g - g.T, 0):
        raise ValueError('Not a symmetrical array')
    if k &gt;= n:
        raise ValueError('Not a valid row number')
    #  Fill with the general formula
    h = g - np.outer(g[:, k], g[k, :]) / g[k, k]
    # h = g - g[:, k:k+1] * g[k, :] / g[k, k]
    # Modify the k-th row and column
    h[:, k] = g[:, k] / g[k, k]
    h[k, :] = h[:, k]
    # Modify the pivot
    h[k, k] = -1 / g[k, k]
    return h
</snippet></ROW><ROW><id>15770157</id><snippet>def sweep_non_sym(a, k):
    a = np.asarray(a)
    n = a.shape[0]
    if a.shape != (n, n):
        raise ValueError('Not a square array')
    if k &gt;= n:
        raise ValueError('Not a valid row number')
    #  Fill with the general formula
    b = a - np.outer(a[:, k], a[k, :]) / a[k, k]
    # b = a - a[:, k:k+1] * a[k, :] / a[k, k]
    # Modify the k-th row and column
    b[k, :] = a[k, :] / a[k, k]
    b[:, k] = -a[:, k] / a[k, k]
    # Modify the pivot
    b[k, k] = 1 / a[k, k]
    return b
</snippet></ROW><ROW><id>15770157</id><snippet>&gt;&gt;&gt; a = [[2,4],[3,1]]
&gt;&gt;&gt; sweep_non_sym(a, 0)
array([[ 0.5,  2. ],
       [-1.5, -5. ]])
&gt;&gt;&gt; sweep_non_sym(sweep_non_sym(a, 0), 1)
array([[-0.1,  0.4],
       [ 0.3, -0.2]])
&gt;&gt;&gt; np.dot(a, sweep_non_sym(sweep_non_sym(a, 0), 1))
array([[  1.00000000e+00,   0.00000000e+00],
       [  5.55111512e-17,   1.00000000e+00]])
</snippet></ROW><ROW><id>15770198</id><snippet>FIELD_NAME_ID = "ID"
FIELD_NAME_USER = "User"

FIELD_NAME_LIST = [FIELD_NAME_ID, FIELD_NAME_USER]
</snippet></ROW><ROW><id>15770198</id><snippet>FIELD_NAME_LIST.append("ID")</snippet></ROW><ROW><id>15770230</id><snippet>class card:
    'Fields: suit, value'
    def __init__(self, suit, value):
        self.suit = suit
        self.value = value
    def __repr__(self):
        return '{suit} {value}'.format(suit=self.suit,value=self.value)
    def __eq__(self, other):
        return (isinstance(other, self.__class__) and 
                self.suit == other.suit and self.value == other.value)

all_cards = [card(s, v) 
             for s in ('clubs', 'diamonds', 'hearts', 'spades')
                 for v in range(1, 11)]

def higher_in_rank(base_card):
    return all_cards[all_cards.index(base_card)+1:]
</snippet></ROW><ROW><id>15770230</id><snippet>&gt;&gt;&gt; higher_in_rank(card('spades', 8))
[spades 9, spades 10]
&gt;&gt;&gt; higher_in_rank(card('diamonds', 6))
[diamonds 7, diamonds 8, diamonds 9, diamonds 10, hearts 1, hearts 2, hearts 3, hearts 4, hearts 5, hearts 6, hearts 7, hearts 8, hearts 9, hearts 10, spades 1, spades 2, spades 3, spades 4, spades 5, spades 6, spades 7, spades 8, spades 9, spades 10]
</snippet></ROW><ROW><id>15770313</id><snippet>QGraphicsItem</snippet></ROW><ROW><id>15770313</id><snippet>QObject</snippet></ROW><ROW><id>15770313</id><snippet>QGraphicsObject</snippet></ROW><ROW><id>15770313</id><snippet>QGraphicsObject</snippet></ROW><ROW><id>15770313</id><snippet>pos</snippet></ROW><ROW><id>15770394</id><snippet>False</snippet></ROW><ROW><id>15770394</id><snippet>True</snippet></ROW><ROW><id>15770394</id><snippet>amount = int(raw_input('How many teams are playing in this tournament?   ')
teams = {}
i = 0
while i &lt; amount:
    team_name = raw_input("please enter team name: ")
    teams[team_name] = False
    i = i + 1
</snippet></ROW><ROW><id>15770394</id><snippet>True</snippet></ROW><ROW><id>15770680</id><snippet>all</snippet></ROW><ROW><id>15770680</id><snippet>all(predicate(e) for e in iterable)
</snippet></ROW><ROW><id>15770680</id><snippet>def all_of(iterable, predicate):
    return all(predicate(e) for e in iterable)
</snippet></ROW><ROW><id>15770717</id><snippet>else</snippet></ROW><ROW><id>15770717</id><snippet>if</snippet></ROW><ROW><id>15770717</id><snippet>else</snippet></ROW><ROW><id>15770717</id><snippet>if</snippet></ROW><ROW><id>15770717</id><snippet>for</snippet></ROW><ROW><id>15770717</id><snippet>else</snippet></ROW><ROW><id>15770717</id><snippet>-t</snippet></ROW><ROW><id>15771326</id><snippet>GPIO.output</snippet></ROW><ROW><id>15771326</id><snippet>led_map = {
    # This maps each "bit" of your input string to the correct ID for GPIO.
    0 : 11,
    1 : 12,
    2 : 13,
    3 : 15
}

for i in xrange(len(y)):
    bit = y[i]
    GPIO.output(led_map[i], int(bit))
</snippet></ROW><ROW><id>15771367</id><snippet>class MyDescriptiveError(Exception):
    pass

def my_function():
    raise MyDescriptiveError()
</snippet></ROW><ROW><id>15771475</id><snippet>find_all</snippet></ROW><ROW><id>15771475</id><snippet>findNext</snippet></ROW><ROW><id>15771475</id><snippet>import bs4 as bs
content = '''\
&lt;tr&gt;
&lt;td id="freistoesse"&gt;Giraffe&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;'''
soup = bs.BeautifulSoup(content)

for td in soup.find('td', text='Giraffe').parent.find_all('td'):
    print(td.text)
</snippet></ROW><ROW><id>15771475</id><snippet>Giraffe
14
7
</snippet></ROW><ROW><id>15771475</id><snippet>find_next_siblings</snippet></ROW><ROW><id>15771475</id><snippet>fetchNextSiblings</snippet></ROW><ROW><id>15771475</id><snippet>for td in soup.find(text='Giraffe').parent.find_next_siblings():
    print(td.text)
</snippet></ROW><ROW><id>15771475</id><snippet>14
7
</snippet></ROW><ROW><id>15771475</id><snippet>soup.find(text='Giraffe')</snippet></ROW><ROW><id>15771475</id><snippet>In [30]: soup.find(text='Giraffe')
Out[30]: u'Giraffe'
</snippet></ROW><ROW><id>15771475</id><snippet>td</snippet></ROW><ROW><id>15771475</id><snippet>In [31]: soup.find('td', text='Giraffe')
Out[31]: &lt;td id="freistoesse"&gt;Giraffe&lt;/td&gt;
</snippet></ROW><ROW><id>15771475</id><snippet>In [32]: soup.find(text='Giraffe').parent
Out[32]: &lt;td id="freistoesse"&gt;Giraffe&lt;/td&gt;
</snippet></ROW><ROW><id>15771475</id><snippet>td</snippet></ROW><ROW><id>15771475</id><snippet>find_next_siblings</snippet></ROW><ROW><id>15771475</id><snippet>In [35]: soup.find(text='Giraffe').parent.find_next_siblings()
Out[35]: [&lt;td&gt;14&lt;/td&gt;, &lt;td&gt;7&lt;/td&gt;]
</snippet></ROW><ROW><id>15771475</id><snippet>find_next_siblings</snippet></ROW><ROW><id>15771475</id><snippet>fetchNextSiblings</snippet></ROW><ROW><id>15771497</id><snippet>&gt;&gt;&gt; package.packagefile is package.othername
True
</snippet></ROW><ROW><id>15771503</id><snippet>print</snippet></ROW><ROW><id>15771503</id><snippet>builtins</snippet></ROW><ROW><id>15771503</id><snippet>import builtins
builtins.debug = debug
</snippet></ROW><ROW><id>15771503</id><snippet>import debugmodule</snippet></ROW><ROW><id>15771503</id><snippet>debug</snippet></ROW><ROW><id>15771503</id><snippet>debugmodule.debug</snippet></ROW><ROW><id>15771503</id><snippet>_debugmodule.so</snippet></ROW><ROW><id>15771503</id><snippet>debugmodule.py</snippet></ROW><ROW><id>15771503</id><snippet>debug</snippet></ROW><ROW><id>15771503</id><snippet>builtins</snippet></ROW><ROW><id>15771503</id><snippet>builtins</snippet></ROW><ROW><id>15771503</id><snippet>__builtins__</snippet></ROW><ROW><id>15771503</id><snippet>__builtins__</snippet></ROW><ROW><id>15771503</id><snippet>__dict__</snippet></ROW><ROW><id>15771503</id><snippet>__builtins__</snippet></ROW><ROW><id>15771503</id><snippet>builtins</snippet></ROW><ROW><id>15771503</id><snippet>__builtins__</snippet></ROW><ROW><id>15771503</id><snippet>builtins</snippet></ROW><ROW><id>15771503</id><snippet>__builtins__</snippet></ROW><ROW><id>15771503</id><snippet>builtins</snippet></ROW><ROW><id>15771503</id><snippet>__builtins__</snippet></ROW><ROW><id>15771503</id><snippet>__builtin__</snippet></ROW><ROW><id>15771503</id><snippet>s</snippet></ROW><ROW><id>15771503</id><snippet>import</snippet></ROW><ROW><id>15771503</id><snippet>import debugmodule</snippet></ROW><ROW><id>15771503</id><snippet>from debugmodule import debug</snippet></ROW><ROW><id>15771506</id><snippet>br.form.add_file(open(filepath, 'rb'), 'text/plain', 'd6sEz.jpg', nr=0, name='file[]')
</snippet></ROW><ROW><id>15771506</id><snippet>text/plain</snippet></ROW><ROW><id>15771506</id><snippet>image/jpeg</snippet></ROW><ROW><id>15771562</id><snippet>for k in dictionary</snippet></ROW><ROW><id>15771562</id><snippet>walks</snippet></ROW><ROW><id>15771562</id><snippet>list</snippet></ROW><ROW><id>15771562</id><snippet>dict</snippet></ROW><ROW><id>15771678</id><snippet>"c"</snippet></ROW><ROW><id>15771678</id><snippet>"v"</snippet></ROW><ROW><id>15771678</id><snippet>break</snippet></ROW><ROW><id>15771678</id><snippet>for i in range(1,10): # no need for the +1 in string.
    msg = "letter({0}), Would you like a (c)onsonant or a (v)owel? : ".format(i)
    x = input(msg) # raw_input(msg)
    while True: # infinite loop
        if x == 'c':
            randomLetters += getConsonant()
            print(randomLetters)
            break
        elif x == 'v':
            randomLetters += getVowel()
            print(randomLetters)
            break
        else: # x not in ['c','v']
            print('Invalid input, {0} is not valid'.format(x))
            x = input(msg) # get new input and repeat checks
return (randomLetters)
</snippet></ROW><ROW><id>15772162</id><snippet>import locale
from functools import cmp_to_key

@cmp_to_key
def strcoll(a, b):
    if isinstance(a, str):
        a = a.decode('utf-8')
    if isinstance(b, str):
        b = b.decode('utf-8')
    return locale.strcoll(a, b)
</snippet></ROW><ROW><id>15772162</id><snippet>sorted([u'&lt;NULL', u'NULL&gt;', u'&lt;NULL&gt;', u'NULL', u'a'], key=strcoll)
sorted(['&lt;NULL', 'NULL&gt;', '&lt;NULL&gt;', 'NULL', 'a'], key=strcoll)
</snippet></ROW><ROW><id>15772162</id><snippet>key</snippet></ROW><ROW><id>15772162</id><snippet>cmp</snippet></ROW><ROW><id>15772162</id><snippet>def to_unicode(s):
    return s.decode('utf-8') if isinstance(s, str) else s

the_list = [...]
the_list = [to_unicode(elem) for elem in the_list]
</snippet></ROW><ROW><id>15772162</id><snippet>str</snippet></ROW><ROW><id>15772162</id><snippet>unicode</snippet></ROW><ROW><id>15772162</id><snippet>key</snippet></ROW><ROW><id>15772162</id><snippet>cmp_to_key</snippet></ROW><ROW><id>15772263</id><snippet>fill_method</snippet></ROW><ROW><id>15772263</id><snippet>pd.rolling_mean</snippet></ROW><ROW><id>15772263</id><snippet>pd.rolling_mean(df.resample("1D", fill_method="ffill"), window=3, min_periods=1)

            favorable  unfavorable     other
enddate
2012-10-25   0.495000     0.485000  0.025000
2012-10-26   0.527500     0.442500  0.032500
2012-10-27   0.521667     0.451667  0.028333
2012-10-28   0.515833     0.450000  0.035833
2012-10-29   0.488333     0.476667  0.038333
2012-10-30   0.495000     0.470000  0.038333
2012-10-31   0.512500     0.460000  0.029167
2012-11-01   0.516667     0.456667  0.026667
2012-11-02   0.503333     0.463333  0.033333
2012-11-03   0.490000     0.463333  0.046667
2012-11-04   0.494000     0.456000  0.043333
2012-11-05   0.500667     0.452667  0.036667
2012-11-06   0.507333     0.456000  0.023333
2012-11-07   0.510000     0.443333  0.013333
</snippet></ROW><ROW><id>15772356</id><snippet>In [16]: def shuffle(df, n=1, axis=0):     
    ...:     df = df.copy()
    ...:     for _ in range(n):
    ...:         df.apply(np.random.shuffle, axis=axis)
    ...:     return df
    ...:     

In [17]: df = pd.DataFrame({'A':range(10), 'B':range(10)})

In [18]: shuffle(df)

In [19]: df
Out[19]: 
   A  B
0  8  5
1  1  7
2  7  3
3  6  2
4  3  4
5  0  1
6  9  0
7  4  6
8  2  8
9  5  9
</snippet></ROW><ROW><id>15772390</id><snippet>with open(...) as f</snippet></ROW><ROW><id>15772390</id><snippet>with</snippet></ROW><ROW><id>15772390</id><snippet>with</snippet></ROW><ROW><id>15772390</id><snippet>with open("./Path/elsewhere/in/file/structure/archive.csv", 'wb') as archive_file:
    wr = csv.writer(archive_file)
    for row in archive:
        wr.writerow(row)
    print row
</snippet></ROW><ROW><id>15772399</id><snippet>lengths = [len(i) for i in my_list]
</snippet></ROW><ROW><id>15772399</id><snippet>def averageLen(lst):
    lengths = [len(i) for i in lst]
    return 0 if len(lengths) == 0 else (float(sum(lengths)) / len(lengths)) 
</snippet></ROW><ROW><id>15772399</id><snippet>lengths = [averageLen(i) for i in my_list]
</snippet></ROW><ROW><id>15772495</id><snippet>exit</snippet></ROW><ROW><id>15772495</id><snippet>print</snippet></ROW><ROW><id>15772495</id><snippet>sys.exit</snippet></ROW><ROW><id>15772515</id><snippet>for item in dict:
    print dict[item][2]
</snippet></ROW><ROW><id>15772515</id><snippet>'d'</snippet></ROW><ROW><id>15772515</id><snippet>'dict'</snippet></ROW><ROW><id>15772515</id><snippet>for item in dict:</snippet></ROW><ROW><id>15772515</id><snippet>for item in dict.keys()</snippet></ROW><ROW><id>15772515</id><snippet>for item in dict.values():
    print item[2]
</snippet></ROW><ROW><id>15772596</id><snippet>name = Column(...)
</snippet></ROW><ROW><id>15772596</id><snippet>Page</snippet></ROW><ROW><id>15772596</id><snippet>Page</snippet></ROW><ROW><id>15772596</id><snippet>name</snippet></ROW><ROW><id>15772596</id><snippet>self.name = name
</snippet></ROW><ROW><id>15772596</id><snippet>Page</snippet></ROW><ROW><id>15772596</id><snippet>Page()</snippet></ROW><ROW><id>15772596</id><snippet>"framistan"</snippet></ROW><ROW><id>15773116</id><snippet>read</snippet></ROW><ROW><id>15773116</id><snippet>request.urlopen</snippet></ROW><ROW><id>15773116</id><snippet>file.read</snippet></ROW><ROW><id>15773116</id><snippet>#!/usr/bin/env python3

import urllib.request

# Example URL
url="http://ntl.matrix.com.br/pfilho/oldies_list/top/lyrics/black_or_white.txt"

# Open URL: returns file-like object
lyrics=urllib.request.urlopen(url)

# Read raw data, this will return a "bytes object"
text=lyrics.read()

# Print raw data
print(text)

# Print decoded data:
print(text.decode('utf-8'))
</snippet></ROW><ROW><id>15773150</id><snippet>character = some_function_that_gets_a_character_from_stdin()
if character == '\x08' or character == '\x7f': 
  do_smth()
</snippet></ROW><ROW><id>15773181</id><snippet>iam</snippet></ROW><ROW><id>15773181</id><snippet>Protocol</snippet></ROW><ROW><id>15773181</id><snippet>Protocol</snippet></ROW><ROW><id>15773181</id><snippet>def connectionMade(self):
    #self.transport.write("""connected""")
    self.factory.clients.append(self)
    print "clients are ", self.factory.clients
    self.boolean_flag = False

def dataReceived(self, data):
    ...
    if command == "iam":
        self.name = content
        msg = self.name + " has joined"
    elif command = "set":
        self.boolean_flag = True
        msg = self.name + " has set his flag"
    elif command = "clear":
        self.boolean_flag = False
        msg = self.name + " has cleared his flag"
    elif command = "get":
        self.message("Your flag is {}\n".format(self.boolean_flag))
        msg = self.name + " has checked his flag"
    ...
</snippet></ROW><ROW><id>15773181</id><snippet>internet.protocol</snippet></ROW><ROW><id>15773181</id><snippet>dataReceived</snippet></ROW><ROW><id>15773181</id><snippet>"iam:abarnert"</snippet></ROW><ROW><id>15773181</id><snippet>"msg:hello"</snippet></ROW><ROW><id>15773181</id><snippet>"ia"</snippet></ROW><ROW><id>15773181</id><snippet>"m:abarnertmsg:h"</snippet></ROW><ROW><id>15773181</id><snippet>"ello"</snippet></ROW><ROW><id>15773290</id><snippet>':'.join('ABC*01:02:03:04'.split(':')[:2])
</snippet></ROW><ROW><id>15773341</id><snippet>LineCollection</snippet></ROW><ROW><id>15773341</id><snippet>s = (600,400)
N = 100000

segs = []
colors = []
my_cmap = plt.get_cmap('jet')
for i in range(N):
    x1 = random.random() * s[0]
    y1 = random.random() * s[1]
    x2 = random.random() * s[0]
    y2 = random.random() * s[1]
    c  = random.random()
    colors.append(my_cmap(c))
    segs.append(((x1, y1), (x2, y2)))

ln_coll = matplotlib.collections.LineCollection(segs, colors=colors)

ax = plt.gca()
ax.add_collection(ln_coll)
ax.set_xlim(0, 600)    
ax.set_ylim(0, 400)
plt.draw()
</snippet></ROW><ROW><id>15773384</id><snippet>for i in myInstances:
    # i iterates over the KEYS in myInstances
    print i.name.rjust(25), i.myid
</snippet></ROW><ROW><id>15773384</id><snippet>myInstances</snippet></ROW><ROW><id>15773384</id><snippet>i.name.rjust(25)</snippet></ROW><ROW><id>15773384</id><snippet>for i in myInstances:
    # i iterates over the KEYS in myInstances
    print myInstances[i]["name"].rjust(25), myInstances[i]["myid"]
</snippet></ROW><ROW><id>15773384</id><snippet>for i in myInstances.values():
    # i iterates over the VALUES in myInstances
    print i["name"].rjust(25), i["myid"]
</snippet></ROW><ROW><id>15773384</id><snippet>for k, v in myInstances.iteritems():
    print k, v["name"].rjust(25), v["myid"]
</snippet></ROW><ROW><id>15773404</id><snippet>import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator # added 

def create31fig(size,xlabel,ylabel,title=None):
    fig = plt.figure(figsize=(size,size))
    ax1 = fig.add_subplot(311)
    ax2 = fig.add_subplot(312)
    ax3 = fig.add_subplot(313)
    plt.subplots_adjust(hspace=0.001)
    plt.subplots_adjust(wspace=0.001)
    ax1.set_xticklabels([])
    ax2.set_xticklabels([])
    xticklabels = ax1.get_xticklabels() + ax2.get_xticklabels()
    plt.setp(xticklabels, visible=False)
    ax1.set_title(title)
    nbins = len(ax1.get_xticklabels()) # added 
    ax2.yaxis.set_major_locator(MaxNLocator(nbins=nbins, prune='upper')) # added 
    ax2.set_ylabel(ylabel)
    ax3.yaxis.set_major_locator(MaxNLocator(nbins=nbins,prune='upper')) # added 
    ax3.set_xlabel(xlabel)
    return ax1,ax2,ax3

create31fig(5,'xlabel','ylabel',title='test')
</snippet></ROW><ROW><id>15773448</id><snippet>// take by reference
void add1 (std::vector&lt;double&gt;&amp; vec)
{
    doSomething(vec.size(),vec.data());
}
</snippet></ROW><ROW><id>15773592</id><snippet>next</snippet></ROW><ROW><id>15773592</id><snippet>def mynext(it):
    try:
        return next(it)
    except StopIteration:
        raise StopIteration(it)
</snippet></ROW><ROW><id>15773592</id><snippet>a = iter([1,2,3,4,5])
b = iter([4,5,6,7])

try:
    while True:
        print mynext(a)
        print mynext(b)
except StopIteration as e:
    if e.args[0] == a: print 'a ended' 
    if e.args[0] == b: print 'b ended' 
</snippet></ROW><ROW><id>15773628</id><snippet>&gt;&gt;&gt; a = np.arange(12*4).reshape((12,4))
</snippet></ROW><ROW><id>15773628</id><snippet>&gt;&gt;&gt; mask = np.empty(a.shape,dtype=bool)
</snippet></ROW><ROW><id>15773628</id><snippet>a == 6</snippet></ROW><ROW><id>15773628</id><snippet>&gt;&gt;&gt; mask[:,:] = a[:,0] == 6
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: operands could not be broadcast together with shapes (12,4) (12) 
</snippet></ROW><ROW><id>15773628</id><snippet>a</snippet></ROW><ROW><id>15773628</id><snippet>&gt;&gt;&gt; mask[:,:] = (a[:,0] == 6)[:,np.newaxis]
</snippet></ROW><ROW><id>15773628</id><snippet>&gt;&gt;&gt; mask
array([[ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [False, False, False, False],
       [False, False, False, False],
       [False, False, False, False],
       [False, False, False, False],
       [False, False, False, False],
       [False, False, False, False],
       [False, False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>15773628</id><snippet>&gt;&gt;&gt; ma.MaskedArray(a,mask=mask)
masked_array(data =
 [[-- -- -- --]
 [-- -- -- --]
 [-- -- -- --]
 [-- -- -- --]
 [-- -- -- --]
 [20 21 22 23]
 [24 25 26 27]
 [28 29 30 31]
 [32 33 34 35]
 [36 37 38 39]
 [40 41 42 43]
 [44 45 46 47]],
             mask =
 [[ True  True  True  True]
 [ True  True  True  True]
 [ True  True  True  True]
 [ True  True  True  True]
 [ True  True  True  True]
 [False False False False]
 [False False False False]
 [False False False False]
 [False False False False]
 [False False False False]
 [False False False False]
 [False False False False]],
       fill_value = 999999)
</snippet></ROW><ROW><id>15773696</id><snippet>C:\Python27\Lib\xml</snippet></ROW><ROW><id>15773696</id><snippet>etree</snippet></ROW><ROW><id>15773696</id><snippet>import etree.ElementTree</snippet></ROW><ROW><id>15773696</id><snippet>etree</snippet></ROW><ROW><id>15773696</id><snippet>.pyc</snippet></ROW><ROW><id>15773768</id><snippet>None</snippet></ROW><ROW><id>15773768</id><snippet>.honk()</snippet></ROW><ROW><id>15773768</id><snippet>None</snippet></ROW><ROW><id>15773768</id><snippet>print mycar.honk()
</snippet></ROW><ROW><id>15773768</id><snippet>mycar.honk()</snippet></ROW><ROW><id>15773768</id><snippet>print</snippet></ROW><ROW><id>15773830</id><snippet>_matching_lists</snippet></ROW><ROW><id>15773830</id><snippet>==</snippet></ROW><ROW><id>15773830</id><snippet>&gt;&gt;&gt; [1,2,3] == [1,2,3]
True
&gt;&gt;&gt; [1,2,3] == [3,1,2]
False
</snippet></ROW><ROW><id>15773830</id><snippet>any()</snippet></ROW><ROW><id>15773830</id><snippet>def _compare_rotated_lists(a, b):
    """Return `True` if the list `a` is equal to a rotation of the list `b`."""
    return any(a == b[i:] + b[:i] for i in range(len(b)))
</snippet></ROW><ROW><id>15773830</id><snippet>    return len(a) == len(b) and any(a == b[i:] + b[:i] for i in range(len(b)))
</snippet></ROW><ROW><id>15773830</id><snippet>a</snippet></ROW><ROW><id>15773830</id><snippet>b</snippet></ROW><ROW><id>15773830</id><snippet>collections.Counter</snippet></ROW><ROW><id>15773830</id><snippet>    return Counter(a) == Counter(b) and any(a == b[i:] + b[:i] for i in range(len(b)))
</snippet></ROW><ROW><id>15773830</id><snippet>a</snippet></ROW><ROW><id>15773830</id><snippet>b</snippet></ROW><ROW><id>15773830</id><snippet>sorted</snippet></ROW><ROW><id>15773830</id><snippet>    return sorted(a) == sorted(b) and any(a == b[i:] + b[:i] for i in range(len(b)))
</snippet></ROW><ROW><id>15774025</id><snippet>rowspan</snippet></ROW><ROW><id>15774025</id><snippet>columspan</snippet></ROW><ROW><id>15774025</id><snippet>canvas</snippet></ROW><ROW><id>15774025</id><snippet>canvas.grid()</snippet></ROW><ROW><id>15774025</id><snippet>pack()</snippet></ROW><ROW><id>15774025</id><snippet>textbox</snippet></ROW><ROW><id>15774025</id><snippet>run_button</snippet></ROW><ROW><id>15774025</id><snippet>clear_button</snippet></ROW><ROW><id>15774025</id><snippet>left_frame = Frame(root)
textbox = Text(left_frame, ...)
run_button = Button(left_frame, ...)
clear_button = Button(left_frame, ...)

canvas_frame= Frame(root, ...)
canvas_frame.configure(borderwidth=1.5,background='black')
canvas = Canvas(canvas_frame, ...)
console = Text(root, ...)

left_frame.pack(side=LEFT)
textbox.pack()
run_button.pack(side=LEFT)
clear_button.pack()
canvas_frame.pack()
canvas.pack()
console.pack()
</snippet></ROW><ROW><id>15774040</id><snippet>import webapp2
import json

class MainPage(webapp2.RequestHandler):
    def post(self):
        self.response.out.write("This is a POST Request \n")
        req = self.request
        a = req.body
        b = json.loads(a)

        self.response.out.write(b)
        self.response.out.write(b['reg_id'])
        self.response.out.write(b['datetime'])
        self.response.out.write(type(b))

app = webapp2.WSGIApplication([('/', MainPage)], debug=True)
</snippet></ROW><ROW><id>15774080</id><snippet>html5lib</snippet></ROW><ROW><id>15774080</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup(r.content, 'html5')
&gt;&gt;&gt; len(soup.find_all('li'))
97
</snippet></ROW><ROW><id>15774112</id><snippet>Text</snippet></ROW><ROW><id>15774112</id><snippet>Entry</snippet></ROW><ROW><id>15774112</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)

        self.post_tweet = tk.Text(self)
        bindtags = list(self.post_tweet.bindtags())
        bindtags.insert(2, "custom") # index 1 is where most default bindings live
        self.post_tweet.bindtags(tuple(bindtags))

        self.post_tweet.bind_class("custom", "&lt;Key&gt;", self.count)
        self.post_tweet.grid()

        self.char_count = tk.Label(self)
        self.char_count.grid()

    def count(self, event):
        current = len(self.post_tweet.get(1.0, "end-1c"))
        remaining = 140-current
        self.char_count.configure(text="%s characters remaining" % remaining)

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15774550</id><snippet>secretWord = secretWord.replace('\n', ''))
</snippet></ROW><ROW><id>15774550</id><snippet>secretWord = [each.replace('\n', '') for each in secretWord]
</snippet></ROW><ROW><id>15774592</id><snippet>print</snippet></ROW><ROW><id>15774592</id><snippet>print('Bone       ', self.name)
</snippet></ROW><ROW><id>15774626</id><snippet>print(user_is_admin(u"johndoe", u"password123", u"MYDOMAIN"))
</snippet></ROW><ROW><id>15774626</id><snippet>print(user_is_admin("johndoe", "password123", "MYDOMAIN"))
</snippet></ROW><ROW><id>15774626</id><snippet>import ctypes
import ctypes.wintypes

def current_user_is_admin():
    return user_token_is_admin(0)

def user_is_admin(username, password, domain=None):
    """note that username, password, and domain should all be unicode"""

    LOGON32_LOGON_NETWORK = 3
    LOGON32_PROVIDER_DEFAULT = 0
    token = ctypes.wintypes.HANDLE()
    if ctypes.windll.advapi32.LogonUserW(username, domain, password,
            LOGON32_LOGON_NETWORK, LOGON32_PROVIDER_DEFAULT, ctypes.byref(token)) == 0:
        raise Exception("user logon failed")

    try:
        return user_token_is_admin(token)
    finally:
        ctypes.windll.kernel32.CloseHandle(token)


def user_token_is_admin(user_token):
    """
    using the win32 api, determine if the user with token user_token has administrator rights
    """
    class SID_IDENTIFIER_AUTHORITY(ctypes.Structure):
        _fields_ = [
            ("byte0", ctypes.c_byte),
            ("byte1", ctypes.c_byte),
            ("byte2", ctypes.c_byte),
            ("byte3", ctypes.c_byte),
            ("byte4", ctypes.c_byte),
            ("byte5", ctypes.c_byte),
        ]
    nt_authority = SID_IDENTIFIER_AUTHORITY()
    nt_authority.byte5 = 5

    SECURITY_BUILTIN_DOMAIN_RID = 0x20
    DOMAIN_ALIAS_RID_ADMINS = 0x220
    administrators_group = ctypes.c_void_p()
    if ctypes.windll.advapi32.AllocateAndInitializeSid(ctypes.byref(nt_authority), 2,
        SECURITY_BUILTIN_DOMAIN_RID, DOMAIN_ALIAS_RID_ADMINS,
        0, 0, 0, 0, 0, 0, ctypes.byref(administrators_group)) == 0:
        raise Exception("AllocateAndInitializeSid failed")

    try:
        is_admin = ctypes.wintypes.BOOL()
        if ctypes.windll.advapi32.CheckTokenMembership(
                user_token, administrators_group, ctypes.byref(is_admin)) == 0:
            raise Exception("CheckTokenMembership failed")
        return is_admin.value != 0

    finally:
        ctypes.windll.advapi32.FreeSid(administrators_group)
</snippet></ROW><ROW><id>15774737</id><snippet>y = numpy.log10(numpy.arange(1, 101)) * 20
</snippet></ROW><ROW><id>15774737</id><snippet>In [30]: numpy.arange(1, 10)
Out[30]: array([1, 2, 3, 4, 5, 6, 7, 8, 9])

In [31]: numpy.log10(numpy.arange(1, 10))
Out[31]:
array([ 0.        ,  0.30103   ,  0.47712125,  0.60205999,  0.69897   ,
        0.77815125,  0.84509804,  0.90308999,  0.95424251])

In [32]: numpy.log10(numpy.arange(1, 10)) * 20
Out[32]:
array([  0.        ,   6.02059991,   9.54242509,  12.04119983,
        13.97940009,  15.56302501,  16.9019608 ,  18.06179974,  19.08485019])
</snippet></ROW><ROW><id>15774788</id><snippet>class Address(object):
def __init__(self, addressFirstLine, city, pincode):
    self.addressFirstLine = addressFirstLine
    self.city = city
    self.pincode = pincode


class User(object):
    def __init__(self, firstName, lastName, address):
        self.firstName = firstName
        self.lastName = lastName
        if isinstance(address, Address):
            self.address = address
        elif isinstance(address, list):
            self.address = Address(*address)
        elif isinstance(address, dict):
            self.address = Address(**address)
        else:
            raise TypeError('address must be provided as an Address object,'
            ' list, or dictionary')
</snippet></ROW><ROW><id>15774788</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; user_dict = json.loads('{
    "firstName" : "Zen", "lastName" : "Coder", 
    "address" : {
        "addressFirstLine" : "High st, Point place",
        "city" : "Wisconcin", 
        "pincode" : "4E23C"}
    }')
&gt;&gt;&gt; from user_address import User
&gt;&gt;&gt; user = User(**user_dict)
&gt;&gt;&gt; user
    &lt;user_address.User at 0x1035b4190&gt;
&gt;&gt;&gt; user.firstName
    u'Zen'
&gt;&gt;&gt; user.lastName
     u'coder'
&gt;&gt;&gt; user.address
     &lt;user_address.Address at 0x1035b4710&gt;
&gt;&gt;&gt; user.address.addressFirstLine
    u'High st, Point place'
&gt;&gt;&gt; user.address.city
    u'Wisconcin'
&gt;&gt;&gt; user.address.pincode
    u'4E23C'
</snippet></ROW><ROW><id>15774788</id><snippet>&gt;&gt;&gt; user_dict = json.loads('{
    "firstName" : "Zen", "lastName" : "coder", 
    "address" : ["High st, Point place", "Wisconcin", "4E23C"]
    }')
&gt;&gt;&gt; user = User(**user_dict)
&gt;&gt;&gt; user.address
    &lt;user_address.Address at 0x10ced2d10&gt;
&gt;&gt;&gt; user.address.city
    u'Wisconcin'
&gt;&gt;&gt; user_dict = json.loads('{
    "firstName" : "Zen", "lastName" : "coder", 
    "address" : "bad address"
    }')
    TypeError: address must be provided as an Address object, list, or dictionary
</snippet></ROW><ROW><id>15774882</id><snippet>self.data</snippet></ROW><ROW><id>15774882</id><snippet>self.data</snippet></ROW><ROW><id>15774882</id><snippet>self.x</snippet></ROW><ROW><id>15774882</id><snippet>self.y</snippet></ROW><ROW><id>15774882</id><snippet>self.data</snippet></ROW><ROW><id>15774882</id><snippet>self.x</snippet></ROW><ROW><id>15774882</id><snippet>self.y</snippet></ROW><ROW><id>15774882</id><snippet>x</snippet></ROW><ROW><id>15774882</id><snippet>y</snippet></ROW><ROW><id>15774882</id><snippet>self.data</snippet></ROW><ROW><id>15774882</id><snippet>class Point(object):
    def __init__(self,x=0,y=0):
        self.data=[x, y]

    def __str__(self):
        return "point(%s,%s)"%(self.x,self.y)

    def __getitem__(self,item):
        return self.data[item]

    def __setitem__(self, idx, value):
        self.data[idx] = value

    @property
    def x(self):
        return self.data[0]

    @property
    def y(self):
        return self.data[1]
</snippet></ROW><ROW><id>15774882</id><snippet>[self.x, self.y][x]=y
</snippet></ROW><ROW><id>15774882</id><snippet>[self.x, self.y]</snippet></ROW><ROW><id>15774882</id><snippet>self.x</snippet></ROW><ROW><id>15774882</id><snippet>self.y</snippet></ROW><ROW><id>15774882</id><snippet>somelist[x]=y</snippet></ROW><ROW><id>15774882</id><snippet>y</snippet></ROW><ROW><id>15774882</id><snippet>x</snippet></ROW><ROW><id>15774882</id><snippet>somelist</snippet></ROW><ROW><id>15774882</id><snippet>somelist</snippet></ROW><ROW><id>15774882</id><snippet>self.data</snippet></ROW><ROW><id>15774882</id><snippet>self.x</snippet></ROW><ROW><id>15774882</id><snippet>self.y</snippet></ROW><ROW><id>15774913</id><snippet>pyglet.app.exit</snippet></ROW><ROW><id>15774913</id><snippet>pyglet.clock.schedule_once</snippet></ROW><ROW><id>15774913</id><snippet>dt</snippet></ROW><ROW><id>15774913</id><snippet>def exit_callback(dt):
    pyglet.app.exit()

pyglet.clock.schedule_once(exit_callback, s1.duration)
</snippet></ROW><ROW><id>15774913</id><snippet>exit()</snippet></ROW><ROW><id>15774990</id><snippet>sleep()</snippet></ROW><ROW><id>15774990</id><snippet>tail</snippet></ROW><ROW><id>15774990</id><snippet>sleep()</snippet></ROW><ROW><id>15774990</id><snippet>sleep()</snippet></ROW><ROW><id>15774990</id><snippet>os.fstat(fd.fileno())</snippet></ROW><ROW><id>15774990</id><snippet>os.stat()</snippet></ROW><ROW><id>15774990</id><snippet>os.stat()</snippet></ROW><ROW><id>15774990</id><snippet>st_ino</snippet></ROW><ROW><id>15774990</id><snippet>os.stat()</snippet></ROW><ROW><id>15774990</id><snippet>fd.tell()</snippet></ROW><ROW><id>15774990</id><snippet>fd.tell()</snippet></ROW><ROW><id>15775062</id><snippet>Countries('Iraq', capital='Bagdad')</snippet></ROW><ROW><id>15775162</id><snippet>from mock import patch 
@mock.patch('requests.get', mock.Mock(side_effect = lambda k:{'aurl': 'a response', 'burl' : 'b response'}.get(k, 'unhandled request %s'%k)))
</snippet></ROW><ROW><id>15775170</id><snippet>get_minimax_value</snippet></ROW><ROW><id>15775170</id><snippet>child.get_minimax_value</snippet></ROW><ROW><id>15775170</id><snippet>child.get_minimax_value()</snippet></ROW><ROW><id>15775170</id><snippet>child.get_minimax_value</snippet></ROW><ROW><id>15775170</id><snippet>child.get_minimax_value</snippet></ROW><ROW><id>15775170</id><snippet>v</snippet></ROW><ROW><id>15775170</id><snippet>if-clause</snippet></ROW><ROW><id>15775170</id><snippet>col</snippet></ROW><ROW><id>15775170</id><snippet>board.ConnectFour.play_turn(self.playernum, col)
</snippet></ROW><ROW><id>15775170</id><snippet>MinimaxPlayer.minimax</snippet></ROW><ROW><id>15775170</id><snippet>return v</snippet></ROW><ROW><id>15775170</id><snippet>for</snippet></ROW><ROW><id>15775170</id><snippet>node.children</snippet></ROW><ROW><id>15775170</id><snippet>def minimax(self, node, cur_depth):
    if cur_depth == self.ply_depth:
        u = self.utility.compute_utility(node, self.playernum)
        node.set_minimax_value(u)
        return u
    node.compute_children()
    if cur_depth % 2 == 0:
        v = float("-inf")
        for child in node.children:
            childval = self.minimax(child, cur_depth + 1)
            v = max(v, childval)
            node.set_minimax_value(v)
        return v
    if cur_depth % 2 != 0:
        v = float("inf")
        for child in node.children:
            childval = self.minimax(child, cur_depth + 1)
            v = min(v, childval)
            node.set_minimax_value(v)
        return v
</snippet></ROW><ROW><id>15775229</id><snippet>(key, value)</snippet></ROW><ROW><id>15775229</id><snippet>key</snippet></ROW><ROW><id>15775229</id><snippet>value</snippet></ROW><ROW><id>15775229</id><snippet>key</snippet></ROW><ROW><id>15775229</id><snippet>values</snippet></ROW><ROW><id>15775229</id><snippet>del</snippet></ROW><ROW><id>15775229</id><snippet>for loop</snippet></ROW><ROW><id>15775229</id><snippet>if key in dictionary</snippet></ROW><ROW><id>15775229</id><snippet>def convert(items, id):
    new_dict = items.copy()
    for key, value in items.items():
        if key in id:
            new_key = id[key]
            new_dict[new_key] = items[key] # Copy the value
            del new_dict[key]
    return new_dict
</snippet></ROW><ROW><id>15775229</id><snippet>In [1]: items = {'apple': 42, 'orange': 17}

In [2]: new_keys = {'apple': 'banana', 'orange': 'tangerine'}

In [3]: def convert(items, ID):
            ...

In [13]: convert(items, new_keys)
Out[13]: {'banana': 42, 'tangerine': 17} # Updated dict returned

In [14]: items
Out[14]: {'apple': 42, 'orange': 17} # Original dict stays untouched
</snippet></ROW><ROW><id>15775610</id><snippet>step.__init__</snippet></ROW><ROW><id>15775610</id><snippet>if flows is None:
    self.flows = {0: flows()}
else:
    self.flows = flows
</snippet></ROW><ROW><id>15775610</id><snippet>self.flows = flows if flows is not None else {0: flows()}
</snippet></ROW><ROW><id>15775746</id><snippet>tripcolor()</snippet></ROW><ROW><id>15775746</id><snippet>tripcolor()</snippet></ROW><ROW><id>15775746</id><snippet>tricontour()</snippet></ROW><ROW><id>15775746</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.tri as tri

x = np.array( [
[ [0.0, 1.0], [0.0, 1.0], [0.0, 1.0]  ],  #element 0
[ [1.0, 2.0], [1.0, 2.0], [1.0, 2.0]  ],  #element 1
[ [2.0, 3.0], [2.0, 3.0], [2.0, 3.0]  ],  #element 2
] )

y = np.array( [
[ [0.0, 0.0], [0.5, 0.5], [1.0, 1.0]  ],  #element 0
[ [0.0, 1.0], [0.5, 1.5], [1.0, 2.0]  ],  #element 1
[ [1.0, 1.0], [1.5, 1.5], [2.0, 2.0]  ],  #element 2
] )

z = np.array( [
[ [0.0, 0.5], [0.0, 0.8], [0.0, 1.0]  ],  #element 0
[ [0.3, 1.0], [0.6, 1.2], [0.8, 1.3]  ],  #element 1
[ [1.2, 1.5], [1.3, 1.4], [1.5, 1.7]  ],  #element 2
] )



global_num_pts =  z.size
global_x = np.zeros( global_num_pts )
global_y = np.zeros( global_num_pts )
global_z = np.zeros( global_num_pts )
global_triang_list = list()

offset = 0;
num_triangles = 0;

#process triangulation element-by-element
for k in range(z.shape[0]):
    points_x = x[k,...].flatten()
    points_y = y[k,...].flatten()
    z_element = z[k,...].flatten()
    num_points_this_element = points_x.size

    #auto-generate Delauny triangulation for the element, which should be flawless due to quadrilateral element shape
    triang = tri.Triangulation(points_x, points_y)
    global_triang_list.append( triang.triangles + offset ) #offseting triangle indices by start index of this element

    #store results for this element in global triangulation arrays
    global_x[offset:(offset+num_points_this_element)] = points_x
    global_y[offset:(offset+num_points_this_element)] = points_y
    global_z[offset:(offset+num_points_this_element)] = z_element

    num_triangles += triang.triangles.shape[0]
    offset += num_points_this_element


#go back and turn all of the triangle indices into one global triangle array
offset = 0
global_triang = np.zeros( (num_triangles, 3) )
for t in global_triang_list:
    global_triang[ offset:(offset+t.shape[0] )] = t
    offset += t.shape[0]

plt.figure()
plt.gca().set_aspect('equal')

plt.tripcolor(global_x, global_y, global_triang, global_z, shading='gouraud' )
#plt.tricontour(global_x, global_y, global_triang, global_z )
#plt.triplot(global_x, global_y, global_triang, 'go-') #plot just the triangle mesh

plt.xlim((-0.25, 3.25))
plt.ylim((-0.25, 2.25))
plt.show()
</snippet></ROW><ROW><id>15775768</id><snippet>url</snippet></ROW><ROW><id>15775768</id><snippet>{% url 'blog:comments:comments' username=post.user.username object_id=post.id as endpoint %}
</snippet></ROW><ROW><id>15775779</id><snippet>isinstance</snippet></ROW><ROW><id>15775779</id><snippet>isinstance</snippet></ROW><ROW><id>15775779</id><snippet>Dontcare</snippet></ROW><ROW><id>15775779</id><snippet>isinstance</snippet></ROW><ROW><id>15775816</id><snippet>sess</snippet></ROW><ROW><id>15775816</id><snippet>sess.execute(CreateTable(tenantX_tableY))</snippet></ROW><ROW><id>15775816</id><snippet>CreateTable</snippet></ROW><ROW><id>15775816</id><snippet>table.create()</snippet></ROW><ROW><id>15775816</id><snippet>table.create(sess.connection())</snippet></ROW><ROW><id>15775958</id><snippet>len()</snippet></ROW><ROW><id>15775958</id><snippet>In [15]: len('jabberwocky')
Out[15]: 11
</snippet></ROW><ROW><id>15775958</id><snippet>In [16]: mask = ' '.join(('_' for i in range(len('jabberwocky'))))

In [18]: mask
Out[18]: '_ _ _ _ _ _ _ _ _ _ _'
#         j a b b e r w o c k y
</snippet></ROW><ROW><id>15775958</id><snippet>str.join()</snippet></ROW><ROW><id>15775958</id><snippet>range()</snippet></ROW><ROW><id>15776040</id><snippet>from subprocess import Popen, PIPE, STDOUT

#do some stuff 
data = do_some_computation_from_file

#prepare your executable using subprocess.Popen
exe = Popen(['your_executable'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)

#pass in the computed data to the executable and grap the result
result = exe.communicate(input=data)[0]
</snippet></ROW><ROW><id>15776203</id><snippet>pip install requests</snippet></ROW><ROW><id>15776203</id><snippet>import requests

payload = {'board': {BOARD}, 'flightNum': {FLIGHTNUM}}
r = requests.get('https://url.com/InfoService/GetFlightByFlightNum', params=payload)

# print the response result
print r.text
</snippet></ROW><ROW><id>15776355</id><snippet>factorial</snippet></ROW><ROW><id>15776355</id><snippet>def factorial(self):
    if self.n == 0:
        return 1 
    else:
        temp_n = self.n
        self.n -= 1
        return temp_n * self.factorial() # alternatively, (self.n + 1)*self.factorial()
</snippet></ROW><ROW><id>15776355</id><snippet>n</snippet></ROW><ROW><id>15776355</id><snippet>n-1</snippet></ROW><ROW><id>15776478</id><snippet>0</snippet></ROW><ROW><id>15776478</id><snippet>0</snippet></ROW><ROW><id>15776478</id><snippet>0</snippet></ROW><ROW><id>15776478</id><snippet>range(10)</snippet></ROW><ROW><id>15776478</id><snippet>list</snippet></ROW><ROW><id>15776879</id><snippet>fig.set_size_inches(1000, 2, forward=True)
</snippet></ROW><ROW><id>15777336</id><snippet>gevent.sleep(0)</snippet></ROW><ROW><id>15777336</id><snippet>grequests</snippet></ROW><ROW><id>15777336</id><snippet>grequests.send()</snippet></ROW><ROW><id>15777336</id><snippet>send(r, pool=None, stream=False)
    Sends the request object using the specified pool. If a pool isn't
    specified this method blocks. Pools are useful because you can specify size
    and can hence limit concurrency
</snippet></ROW><ROW><id>15777336</id><snippet>glt.get()</snippet></ROW><ROW><id>15777488</id><snippet>class Child(Parent): # define child class
    def __init__(self):
        super(Child, self).__init__()  # call the appropriate superclass constructor
        print "Calling child constructor"
</snippet></ROW><ROW><id>15777488</id><snippet>super()</snippet></ROW><ROW><id>15777684</id><snippet>current_app</snippet></ROW><ROW><id>15777684</id><snippet>current_app._get_current_object()</snippet></ROW><ROW><id>15778027</id><snippet>a = b == c
</snippet></ROW><ROW><id>15778027</id><snippet>a = b = c
</snippet></ROW><ROW><id>15778027</id><snippet>a</snippet></ROW><ROW><id>15778027</id><snippet>True</snippet></ROW><ROW><id>15778027</id><snippet>False</snippet></ROW><ROW><id>15778027</id><snippet>b</snippet></ROW><ROW><id>15778027</id><snippet>c</snippet></ROW><ROW><id>15778027</id><snippet>a</snippet></ROW><ROW><id>15778027</id><snippet>b</snippet></ROW><ROW><id>15778027</id><snippet>c</snippet></ROW><ROW><id>15778027</id><snippet>=</snippet></ROW><ROW><id>15778027</id><snippet>if</snippet></ROW><ROW><id>15778027</id><snippet>C</snippet></ROW><ROW><id>15778027</id><snippet>if</snippet></ROW><ROW><id>15778027</id><snippet>a</snippet></ROW><ROW><id>15778027</id><snippet>__eq__</snippet></ROW><ROW><id>15778027</id><snippet>b</snippet></ROW><ROW><id>15778027</id><snippet>__eq__</snippet></ROW><ROW><id>15778027</id><snippet>NotImplemented</snippet></ROW><ROW><id>15778027</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>15778027</id><snippet>__eq__</snippet></ROW><ROW><id>15778027</id><snippet>ndarray</snippet></ROW><ROW><id>15778195</id><snippet>bar</snippet></ROW><ROW><id>15778195</id><snippet>align</snippet></ROW><ROW><id>15778195</id><snippet>align='center'</snippet></ROW><ROW><id>15778195</id><snippet>align</snippet></ROW><ROW><id>15778195</id><snippet>xticks</snippet></ROW><ROW><id>15778195</id><snippet>import matplotlib.pyplot as plot

x = range(1, 7)
y = (0, 300, 300, 290, 320, 315)
plot.bar(x, y, width=0.7, align="center")

ind = range(2, 7)    # the x locations for the groups
plot.xticks(ind, x)

plot.axhline(305, linewidth=3, color='r')

plot.show()
</snippet></ROW><ROW><id>15778285</id><snippet>test = MyClass()
print test.f()
print MyClass.i
</snippet></ROW><ROW><id>15778294</id><snippet>Y</snippet></ROW><ROW><id>15778294</id><snippet>X</snippet></ROW><ROW><id>15778294</id><snippet>[[0],[1],[2],...]</snippet></ROW><ROW><id>15778294</id><snippet> x[0]=Y[0:K]; y[0]=Y[K]
 x[1]=Y[1:K+1]; y[1]=Y[K+1]
 ...
</snippet></ROW><ROW><id>15778381</id><snippet>numpy</snippet></ROW><ROW><id>15778381</id><snippet>loadtxt</snippet></ROW><ROW><id>15778381</id><snippet>import numpy
data = numpy.loadtxt("MyData.csv", skiprows = 39, delimiter = ",")
</snippet></ROW><ROW><id>15778401</id><snippet>&lt;group string="Refunds" attrs="{'invisible':[('active','!=',True)]}"&gt;</snippet></ROW><ROW><id>15778622</id><snippet>f1 = open('file1.txt', 'r')
f1_tokens = set(line1.split('=')[0].strip() for line1 in f1)

f2 = open('file2.txt', 'r')
for line2 in f2:
    if line2.split('=')[0].strip() in f1_tokens:
        print line2,
</snippet></ROW><ROW><id>15778622</id><snippet>python script.py &gt;commonfile.txt</snippet></ROW><ROW><id>15778708</id><snippet>a = 1
b = 2
a = b                  # a = 2
b = a + b              # b = 2 + 2
</snippet></ROW><ROW><id>15778708</id><snippet>a = 1
b = 2
a, b = b, a + b        # a, b = 2, 1 + 2
</snippet></ROW><ROW><id>15778708</id><snippet>a = 1
b = 2
_tuple = (b, a+b)
a = _tuple[0]
b = _tuple[1]
</snippet></ROW><ROW><id>15778897</id><snippet>[]</snippet></ROW><ROW><id>15778897</id><snippet>[abc]</snippet></ROW><ROW><id>15778897</id><snippet>a</snippet></ROW><ROW><id>15778897</id><snippet>b</snippet></ROW><ROW><id>15778897</id><snippet>c</snippet></ROW><ROW><id>15778897</id><snippet>[^abc]</snippet></ROW><ROW><id>15778897</id><snippet>a</snippet></ROW><ROW><id>15778897</id><snippet>b</snippet></ROW><ROW><id>15778897</id><snippet>c</snippet></ROW><ROW><id>15778897</id><snippet>[a-cA-C]</snippet></ROW><ROW><id>15778897</id><snippet>a</snippet></ROW><ROW><id>15778897</id><snippet>b</snippet></ROW><ROW><id>15778897</id><snippet>c</snippet></ROW><ROW><id>15778897</id><snippet>A</snippet></ROW><ROW><id>15778897</id><snippet>B</snippet></ROW><ROW><id>15778897</id><snippet>C</snippet></ROW><ROW><id>15778897</id><snippet>\w</snippet></ROW><ROW><id>15778897</id><snippet>\s</snippet></ROW><ROW><id>15778897</id><snippet>\w</snippet></ROW><ROW><id>15778897</id><snippet>\w</snippet></ROW><ROW><id>15778897</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>15778897</id><snippet>a-z</snippet></ROW><ROW><id>15778897</id><snippet>A-Z</snippet></ROW><ROW><id>15778897</id><snippet>0-9</snippet></ROW><ROW><id>15778897</id><snippet>_</snippet></ROW><ROW><id>15778897</id><snippet>\s</snippet></ROW><ROW><id>15778897</id><snippet>+</snippet></ROW><ROW><id>15778897</id><snippet>[a]+</snippet></ROW><ROW><id>15778897</id><snippet>aaaaaaaaaaa</snippet></ROW><ROW><id>15778897</id><snippet>|</snippet></ROW><ROW><id>15778989</id><snippet>_pressed</snippet></ROW><ROW><id>15778989</id><snippet>print self.selection</snippet></ROW><ROW><id>15778989</id><snippet>    # update and then show selection
    text = '%02d' % text
    self._selection = (text, item, column)
    self._show_selection(text, bbox)

    print self.selection  # print the date selected to the console
</snippet></ROW><ROW><id>15779001</id><snippet>import sys
sys.path.insert(0, '/usr/local/lib/python2.6/dist-packages')
</snippet></ROW><ROW><id>15779001</id><snippet>/usr/lib/python2.6/dist-packages</snippet></ROW><ROW><id>15779001</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15779075</id><snippet>lxml.html</snippet></ROW><ROW><id>15779075</id><snippet>In [1]: import lxml.html as lh

In [2]: doc = lh.parse('http://www.bom.gov.au/nsw/forecasts/sydney.shtml?ref=hdr')

In [3]: doc.xpath('.//div[@class="day main"]//em[@class="max"]/text()')
Out[3]: ['21']
</snippet></ROW><ROW><id>15779285</id><snippet>&gt;&gt;&gt; bool(re.search(r'-.+-template-users-data.csv$', 'zu-en-template-users-data.csv'))
True
</snippet></ROW><ROW><id>15779734</id><snippet>parser.get('money_value','Amount',True)
</snippet></ROW><ROW><id>15779734</id><snippet>PlrMny = float(PlrMny) -.5 
parser.set('money_value','Amount',str(PlrMny))
</snippet></ROW><ROW><id>15779813</id><snippet>db</snippet></ROW><ROW><id>15780711</id><snippet>vector&lt;Vec2f&gt; lines;
HoughLines(dst, lines, 1, CV_PI/180, 100, 0, 0 );
</snippet></ROW><ROW><id>15780711</id><snippet>for( size_t i = 0; i &lt; lines.size(); i++ )
{
  float rho = lines[i][0], theta = lines[i][1];
  Point pt1, pt2;
  double a = cos(theta), b = sin(theta);
  double x0 = a*rho, y0 = b*rho;
  pt1.x = cvRound(x0 + 1000*(-b)); //the first point
  pt1.y = cvRound(y0 + 1000*(a)); //the first point
  pt2.x = cvRound(x0 - 1000*(-b)); //the second point
  pt2.y = cvRound(y0 - 1000*(a)); //the second point
}
</snippet></ROW><ROW><id>15781079</id><snippet>def save(self, *args, **kwargs):    
    if self.pk is None:
        # Insert query on the external database.
    else:
        old = Lab.objects.get(pk=self.pk)
        if self.name is not old.name:
            ...             

    super(Lab, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>15781202</id><snippet>class HTTPConnection:
    # ...
    def send(self, data): # line 820
        """Send `data' to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        """
</snippet></ROW><ROW><id>15781202</id><snippet>def body():
  for fileName in fileList:
    # Add boundary and header
    yield('--' + boundary) + '\r\n'
    yield('Content-Disposition: form-data; name={0}; filename=    {0}'.format(fileName)) + '\r\n'

    fileType = mimetypes.guess_type(fileName)[0] or 'application/octet-stream'
    yield('Content-Type: {}'.format(fileType)) + '\r\n'
    yield('\r\n')

    with open(fileName) as f: 
        # Bad for large files
        yield f.read()
    yield('--'+boundary+'--') + '\r\n'
    yield('') + '\r\n'
</snippet></ROW><ROW><id>15781232</id><snippet>re.search(r'\b' + re.escape(' '.join(query)) + r'\b', ' '.join(line)) is not None
</snippet></ROW><ROW><id>15781307</id><snippet>In [1]: import numpy as np

In [2]: a = np.array([[[1, 2, 3]]])

In [3]: a
Out[3]: array([[[1, 2, 3]]])

In [4]: a*3
Out[4]: array([[[3, 6, 9]]])
</snippet></ROW><ROW><id>15781618</id><snippet>  solution=' like '.join(map(' '.join, zip(*[iter(text.split())]*3)))
</snippet></ROW><ROW><id>15781618</id><snippet> words = split text into words
 number of words processed = 0

 for each word in words
      output word
      number of words processed += 1
      if number of words processed is divisible by 3 then
          output like
</snippet></ROW><ROW><id>15781620</id><snippet>DataFrame</snippet></ROW><ROW><id>15781620</id><snippet>rand</snippet></ROW><ROW><id>15781620</id><snippet>In [13]: df = DataFrame(np.random.rand(10, 5))

In [14]: df
Out[14]:
          0         1         2         3         4
0  0.199953  0.261683  0.582105  0.969489  0.351161
1  0.424425  0.901810  0.942510  0.985630  0.947160
2  0.809123  0.311318  0.954326  0.022269  0.472182
3  0.685818  0.172807  0.093368  0.406808  0.590702
4  0.590784  0.291439  0.139792  0.243264  0.671586
5  0.215574  0.253957  0.257037  0.895526  0.903883
6  0.469410  0.062405  0.518797  0.706974  0.956250
7  0.320845  0.924984  0.740085  0.939595  0.258833
8  0.058665  0.364624  0.832847  0.790947  0.835429
9  0.924942  0.077599  0.411044  0.075257  0.703015
</snippet></ROW><ROW><id>15781620</id><snippet>DataFrame</snippet></ROW><ROW><id>15781814</id><snippet>head</snippet></ROW><ROW><id>15781814</id><snippet>r = requests.get(url, stream=True)
</snippet></ROW><ROW><id>15781866</id><snippet>Settings</snippet></ROW><ROW><id>15781866</id><snippet>Appearance</snippet></ROW><ROW><id>15782134</id><snippet>cmd = ["echo hi"]</snippet></ROW><ROW><id>15782134</id><snippet>cmd = "echo hi"</snippet></ROW><ROW><id>15782134</id><snippet>cmd = ["echo", "hi"]</snippet></ROW><ROW><id>15782134</id><snippet>True</snippet></ROW><ROW><id>15782134</id><snippet>False</snippet></ROW><ROW><id>15782134</id><snippet>True</snippet></ROW><ROW><id>15782134</id><snippet>False</snippet></ROW><ROW><id>15782134</id><snippet>'-f'</snippet></ROW><ROW><id>15782134</id><snippet>'-f'</snippet></ROW><ROW><id>15782134</id><snippet>proc = subprocess.Popen('/bin/tcsh -f -c "echo hi"', shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>15782476</id><snippet>@api_view(['GET'])
def current_user(request):
    serializer = UserSerializer(request.user)
    return Response(serializer.data)
</snippet></ROW><ROW><id>15782476</id><snippet>class CurrentUserView(APIView):
    def get(self, request):
        serializer = UserSerializer(request.user)
        return Response(serializer.data)
</snippet></ROW><ROW><id>15782476</id><snippet>@api_view(['GET'])
def current_user(request):
    user = request.user
    return Response({
        'username': user.username,
        'email': user.email,
        ...
    })
</snippet></ROW><ROW><id>15782516</id><snippet>.save()</snippet></ROW><ROW><id>15782516</id><snippet>request.files['file'].save('/tmp/foo')
size = os.stat('/tmp/foo').st_size
</snippet></ROW><ROW><id>15782516</id><snippet>blob = request.files['file'].read()
size = len(blob)
</snippet></ROW><ROW><id>15782524</id><snippet>.pyc</snippet></ROW><ROW><id>15782679</id><snippet>for i, line in enumerate(file(name, "r")):
    found = True
    for key in found_dic:
        if key in line.strip():
            found_dic[key].append("LINE:"+str(i)+":" + line.strip())
            found = False
</snippet></ROW><ROW><id>15782679</id><snippet>found = False
for i, line in enumerate(file(name, "r")):                
    for key in found_dic:
        if key in line.strip():
            found_dic[key].append("LINE: %s: %s" % (i,line.strip()))
            found = True
</snippet></ROW><ROW><id>15782679</id><snippet>found</snippet></ROW><ROW><id>15782906</id><snippet>item['key'] = xpath.select('//meta[@itemprop="rvalue"]/@content').extract()
</snippet></ROW><ROW><id>15782998</id><snippet>final = {}
for id, (x, n) in dict2.items():
    final.setdefault(dict1[x], {})[id] = n
</snippet></ROW><ROW><id>15782998</id><snippet>{'A': {'ID2': 'n2', 'ID1': 'n1'}, 'C': {'ID3': 'n3'}} 
</snippet></ROW><ROW><id>15783218</id><snippet>set_ticks_position()</snippet></ROW><ROW><id>15783218</id><snippet>gca()</snippet></ROW><ROW><id>15783218</id><snippet>from pylab import *

figure()
plot(arange(5))
ax = gca()
ax.yaxis.tick_right()
ax.yaxis.set_ticks_position('both')
</snippet></ROW><ROW><id>15783307</id><snippet>for x in range(10):
    print x
else:
    print x**2
</snippet></ROW><ROW><id>15783567</id><snippet>sudo apt-get build-dep python3
</snippet></ROW><ROW><id>15783567</id><snippet>sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python3.3
</snippet></ROW><ROW><id>15783567</id><snippet>sudo apt-get install python3.3-dev
</snippet></ROW><ROW><id>15783675</id><snippet>string.split('*')</snippet></ROW><ROW><id>15783675</id><snippet>&gt;&gt;&gt; s = "brake  break  at * time"
&gt;&gt;&gt; def my_func(s):
     parts = s.split('*')
     a = parts[0].split()[-1]
     b = parts[1].split()[0] if parts[1].split() else ''
     return a,b
&gt;&gt;&gt; my_func(s)
('at', ' time')
</snippet></ROW><ROW><id>15783675</id><snippet>&gt;&gt;&gt; s = "brake  break  at * time 123 * blah"
&gt;&gt;&gt; regex = re.compile("(\w+)\s+\*\s*(\w*)")
# Run findall
&gt;&gt;&gt; regex.findall(s)
[(u'at', u'time'), (u'123', u'blah')]
</snippet></ROW><ROW><id>15783792</id><snippet>COMMENT_BLOCK = """
&lt;!--
[ url      ] &gt;&gt; http://%(host)s%(path)s
[ referer  ] &gt;&gt; %(referer)s
[ module   ] &gt;&gt; %(module)s
[ function ] &gt;&gt; %(function)s, line %(line)s
[ args     ] &gt;&gt; args=%(args)s, kwargs=%(kwargs)s, defaults=%(defaults)s
[ template ] &gt;&gt; %(template)s
--&gt;

"""

# Add any additional template types you wish to add the comment block to.
MIMETYPES = (
    "text/html",
    "text/xml",
)


class HtmlTemplateFinder:

    def __init__(self):
        self.host = None
        self.referer = None
        self.path = None
        self.module = None
        self.function = None
        self.line = None
        self.args = None
        self.kwargs = None
        self.defaults = None
        self.template = None
        self.valid_template = False

    def _populate_comment_block(self):
        return COMMENT_BLOCK % {
                                'host': self.host,
                                'referer': self.referer,
                                'path': self.path,
                                'module': self.module,
                                'function': self.function,
                                'line': self.line,
                                'args': self.args,
                                'kwargs': self.kwargs,
                                'defaults': self.defaults,
                                'template': self.template,
                               }

    def process_view(self, request, view_func, view_args, view_kwargs):
        self.host = request.META.get('HTTP_HOST', None)
        self.referer = request.META.get('HTTP_REFERER', None)
        self.path = request.path
        self.module = view_func.func_code.co_filename
        self.function = ('.').join((view_func.__module__, view_func.func_name))
        self.line = view_func.func_code.co_firstlineno
        self.args = view_args
        self.kwargs = view_kwargs
        self.defaults = view_func.func_defaults
        return None

    def process_template_response(self, request, response):
        from mimetypes import guess_type
        # Use this rather than response.template_name, this always returns str
        self.template = response.resolve_template(response.template_name).name
        self.valid_template = guess_type(self.template)[0] in MIMETYPES
        return response

    def process_response(self, request, response):
        from &lt;your app&gt; import settings
        if settings.DEBUG:
            if self.valid_template:
                block = self._populate_comment_block()
                response.content = "%s%s" % (block, response.content)
        return response
</snippet></ROW><ROW><id>15784183</id><snippet>A=[[[1,2,3]]]
B=[[[3,4,5]]]
C=[[[4,5,6]]]
print [[map(sum, zip(A[0][0], B[0][0], C[0][0]))]]
</snippet></ROW><ROW><id>15784557</id><snippet>re.finditer</snippet></ROW><ROW><id>15784557</id><snippet>import itertools
for m in itertools.islice(re.finditer(pat, text), 6):
    ...
</snippet></ROW><ROW><id>15784557</id><snippet>re.finditer</snippet></ROW><ROW><id>15784557</id><snippet>match</snippet></ROW><ROW><id>15784557</id><snippet>m.group(0)</snippet></ROW><ROW><id>15784557</id><snippet>m.group(1)</snippet></ROW><ROW><id>15784598</id><snippet>#!/usr/bin/env python
import math

# Input: Two 3D points of the form (x,y,z).
# Output: Euclidean distance between the points.
def getDistance((x1, y1, z1), (x2, y2, z2)):
   d = math.sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2) + pow((z1 - z2), 2))
   return round(d, 3)

# Purpose: Prints a list of 3-tuples (r1,r2,d). R1 and r2 are
# residue numbers, and d is the distance between their respective
# gamma sulfur atoms.
def prettyPrint(dsBonds):
   print "Residue 1\tResidue 2\tDistance"
   for r1, r2, d in dsBonds:
       print " {0}\t\t {1}\t\t {2}".format(r1, r2, d)

# Purpose: Find all pairs of cysteine residues whose gamma sulfur atoms
# are within maxBondDist of each other.
def main():
   pdbFile = open('2v5t.pdb','r')
   #Max distance to consider a disulfide bond.
   maxBondDist = 2.5

   # Anonymous function to check if a line from the PDB file is a gamma
   # sulfur atom from a cysteine residue.
   isCysLine = lambda line: (line[0:4] == "ATOM" and line[13:15] == "SG")
   cysLines = [line for line in pdbFile if isCysLine(line)]
   pdbFile.close()

   # Anonymous function to get (x,y,z) coordinates in angstroms for
   # the location of a cysteine residue's gamma sulfur atom.
   getCoords = lambda line:(float(line[31:38]),
                            float(line[39:46]), float(line[47:54]))
   cysCoords = map(getCoords, cysLines)
   # Make a list of all residue pairs classified as disulfide bonds.
   dsBonds = []

   for i in range(len(cysCoords)-1):
      for j in range(i+1, len(cysCoords)):
         dist = getDistance(cysCoords[i], cysCoords[j])
         residue1 = int(cysLines[i][23:27])
         residue2 = int(cysLines[j][23:27])
         if dist &lt; maxBondDist:
            dsBonds.append((residue1,residue2,dist))

   prettyPrint(dsBonds)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15784656</id><snippet>for key, value in dictionary.items():
    if 4 == value:
        print key
</snippet></ROW><ROW><id>15784689</id><snippet>column_stack</snippet></ROW><ROW><id>15784689</id><snippet>ravel</snippet></ROW><ROW><id>15784689</id><snippet>In [8]: img1 = np.arange(5, dtype='float32')

In [9]: img2 = np.arange(5, dtype='float32')

In [10]: np.column_stack((img1,img2)).ravel()
Out[10]: array([ 0.,  0.,  1.,  1.,  2.,  2.,  3.,  3.,  4.,  4.], dtype=float32)
</snippet></ROW><ROW><id>15784754</id><snippet>Model</snippet></ROW><ROW><id>15784754</id><snippet>TESTING = True</snippet></ROW><ROW><id>15784754</id><snippet>settings.py</snippet></ROW><ROW><id>15784754</id><snippet>Model</snippet></ROW><ROW><id>15784754</id><snippet>save</snippet></ROW><ROW><id>15784754</id><snippet>from django.conf import settings

class OriginalModel(Model):
    ...
    def save(self, *args, **kwargs):
        if not settings.TESTING:
            # Do some file system interaction, but not during testing.
            pass
        # Now save instance as per normal.
        return super(originalModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>15784754</id><snippet>ModelForm</snippet></ROW><ROW><id>15784754</id><snippet>save</snippet></ROW><ROW><id>15784754</id><snippet>ModelForm</snippet></ROW><ROW><id>15784754</id><snippet>save</snippet></ROW><ROW><id>15784754</id><snippet>savebis()</snippet></ROW><ROW><id>15784754</id><snippet>save()</snippet></ROW><ROW><id>15784802</id><snippet>yield</snippet></ROW><ROW><id>15784802</id><snippet>return</snippet></ROW><ROW><id>15784802</id><snippet>def generator():
    while 1:
        yield random.randint(-1, 1), datetime.datetime.now()

mynumber = 1000
for random_number, current_time in generator():
    mynumber += random_number
    print mynumber, current_time
</snippet></ROW><ROW><id>15785255</id><snippet>pack_forget</snippet></ROW><ROW><id>15785255</id><snippet>grid_forget</snippet></ROW><ROW><id>15785255</id><snippet>destroy</snippet></ROW><ROW><id>15785785</id><snippet>for x in cars:
    print (x)
    for y in cars[x]:
        print (y,':',cars[x][y])
</snippet></ROW><ROW><id>15785785</id><snippet>A
color : 2
speed : 70
B
color : 3
speed : 60
</snippet></ROW><ROW><id>15786126</id><snippet>F()</snippet></ROW><ROW><id>15786126</id><snippet>entries = Entry.objects.filter(closed_date__gt=F('creation_date') + timedelta(days=4))
</snippet></ROW><ROW><id>15786149</id><snippet>.getter</snippet></ROW><ROW><id>15786149</id><snippet>class superhuman(human):
    @human.name.getter
    def name(self):
        return 'super ' + self._name
</snippet></ROW><ROW><id>15786149</id><snippet>&gt;&gt;&gt; class superhuman(human):
...     @human.name.getter
...     def name(self):
...         return 'super ' + self._name
... 
&gt;&gt;&gt; s = superhuman('john')
&gt;&gt;&gt; print s.name
super john
&gt;&gt;&gt; s.name = 'jack'
&gt;&gt;&gt; print s.name
super jack
</snippet></ROW><ROW><id>15786149</id><snippet>property</snippet></ROW><ROW><id>15786149</id><snippet>.getter</snippet></ROW><ROW><id>15786149</id><snippet>.setter</snippet></ROW><ROW><id>15786149</id><snippet>.deleter</snippet></ROW><ROW><id>15786149</id><snippet>property</snippet></ROW><ROW><id>15786149</id><snippet>human</snippet></ROW><ROW><id>15786149</id><snippet>@property</snippet></ROW><ROW><id>15786149</id><snippet>@name.setter</snippet></ROW><ROW><id>15786149</id><snippet>name = name.setter(name)</snippet></ROW><ROW><id>15786221</id><snippet>num = s[0:3]
score = s[4:9]
ping = s[10:14]
guid = s[15:47]
name = s[48:63]
 ...
</snippet></ROW><ROW><id>15786221</id><snippet>arr = [num, score, ping, guid, name, lastmsg, address, qport, rate]
</snippet></ROW><ROW><id>15786238</id><snippet>args</snippet></ROW><ROW><id>15786238</id><snippet>class MyArgumentParser(argparse.ArgumentParser):
    def parse_subargs(self, *args, **kw):
        # parse as usual
        args = argparse.ArgumentParser.parse_args(self, *args, **kw)

        # extract the destination names for top-level arguments
        topdest = [action.dest for action in parser._actions]

        # loop over all arguments given in args
        subargs = {}
        for key, value in args.__dict__.items():

            # if sub-parser argument found ...
            if key not in topdest:

                # ... remove from args and add to dictionary
                delattr(args,key)
                subargs[key] = value

        return args, subargs
</snippet></ROW><ROW><id>15786277</id><snippet>get_item</snippet></ROW><ROW><id>15786277</id><snippet>DynamoDBKeyNotFoundError</snippet></ROW><ROW><id>15786277</id><snippet>def exists(hash_key):
    try:
        item = self.table.get_item(hash_key=&lt;hash key&gt;...)
    except boto.dynamodb.exceptions.DynamoDBKeyNotFoundError:
        item = None
    return item
</snippet></ROW><ROW><id>15786333</id><snippet>import subprocess

stream = subprocess.Popen(stdout=subprocess.PIPE).stdout

for line in stream:
    #parse lines as you recieve them.
    print line
</snippet></ROW><ROW><id>15786333</id><snippet>myparser()</snippet></ROW><ROW><id>15786333</id><snippet>import subprocess

def method(stream, retries=3):
    while retries &gt; 0:
        line = stream.readline()
        if line:
            yield line
        else:
            retries -= 1

pre_stream = subprocess.Popen(cmd, stdout=subprocess.PIPE).stdout
stream = subprocess.Popen(cmd, stdin=pre_stream, stdout=subprocess.PIPE).stdout

for parsed in method(stream):
    # do what you want with the parsed data.
    parsed_data.append(parsed)
</snippet></ROW><ROW><id>15786519</id><snippet>class Rectangle():
    x = random.randrange(0, 701)
    y = random.randrange(0, 501)
    width = random.randrange(20,71)
    height = random.randrange(20,71)
    change_x = random.randrange(-3,4)
    change_y = random.randrange(-3,4)
    def move(self):
        self.x += self.change_x
        self.y += self.change_y
    def draw(self):
        pygame.draw.rect(screen, green, [self.x,self.y, self.width, self.height], 0)
</snippet></ROW><ROW><id>15786519</id><snippet>class Rectangle():
    def __init__(self):
        self.x = random.randrange(0, 701)
        self.y = random.randrange(0, 501)
        self.width = random.randrange(20,71)
        self.height = random.randrange(20,71)
        self.change_x = random.randrange(-3,4)
        self.change_y = random.randrange(-3,4)

    def move(self):
        self.x += self.change_x
        self.y += self.change_y

    def draw(self):
        pygame.draw.rect(screen, green, [self.x, self.y, self.width, self.height], 0)
</snippet></ROW><ROW><id>15786519</id><snippet>init</snippet></ROW><ROW><id>15786531</id><snippet>random.choice</snippet></ROW><ROW><id>15786531</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.choice(False)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.py", line 274, in choice
    return seq[int(self.random() * len(seq))]  # raises IndexError if seq is empty
TypeError: object of type 'bool' has no len()
</snippet></ROW><ROW><id>15787278</id><snippet>class Listbox(tk.Listbox):
    def autowidth(self,maxwidth):
        f = font.Font(font=self.cget("font"))
        pixels = 0
        for item in self.get(0, "end"):
            pixels = max(pixels, f.measure(item))
        # bump listbox size until all entries fit
        pixels = pixels + 10
        width = int(self.cget("width"))
        for w in range(0, maxwidth+1, 5):
            if self.winfo_reqwidth() &gt;= pixels:
                break
            self.config(width=width+w)

master = tk.Tk()
listbox = Listbox(master, selectmode=tk.SINGLE)

keys = serverDict.keys()
for key in sorted(keys):
    listbox.insert(tk.END, key)

button = tk.Button(master, text="Execute", command=execute)
listbox.autowidth(250)
listbox.pack()
button.pack()
tk.mainloop()
</snippet></ROW><ROW><id>15787398</id><snippet>driver.switchTo.frame(1);</snippet></ROW><ROW><id>15787398</id><snippet>driver.switchTo.frame(1);</snippet></ROW><ROW><id>15787398</id><snippet>driver.switch_to_frame(1);
</snippet></ROW><ROW><id>15787398</id><snippet> driver.get("http://translate.google.com/translate?hl=en&amp;sl=en&amp;tl=ar&amp;u=http://www.saltycrane.com/blog/2008/10/how-escape-percent-encode-url-python/");
 driver.switchTo().frame(0);
 System.out.println(driver.findElement(By.xpath("/html/body/div/div/div[3]/h1/span/a")).getText());
</snippet></ROW><ROW><id>15787468</id><snippet>&gt;&gt;&gt; from collections import defaultdict, OrderedDict
&gt;&gt;&gt; L = [[21768L, u'2'], [1746L, u'2'], [2239L, u'2'], [2239L, u'2'], [1965L, u'2'],[1965L, u'2'], [2425L, u'1'], [2425L, u'1'], [2056L, u'1']]
&gt;&gt;&gt; d = defaultdict(OrderedDict)
&gt;&gt;&gt; for value, key in L:
        d[key][value] = d[key].get(value, 0) + 1


&gt;&gt;&gt; d
defaultdict(&lt;class 'collections.OrderedDict'&gt;, 
            {u'1': OrderedDict([(2425L, 2), (2056L, 1)]), 
             u'2': OrderedDict([(21768L, 1), (1746L, 1), (2239L, 2), (1965L, 2)])})
</snippet></ROW><ROW><id>15787526</id><snippet>all_the_inputs = [ process_value(x) for y in all_the_stuff for x in y ]
</snippet></ROW><ROW><id>15787526</id><snippet>rental_avg_costperweek = 0
for this_id in closest_rental_ids:
    rental = LLSRental.select(LLSRental.id == this_id)
    rental_avg_costperweek += calcCostPerWeek(rental.price, rental.rental_freq)
rental_avg_costperweek /= len(closest_rental_ids)
</snippet></ROW><ROW><id>15787553</id><snippet>def measure_memory( process ):
    w = wmi.WMI('.')
    result = w.query("SELECT WorkingSetSize FROM Win32_Process WHERE ProcessID="+str(process.pid))
    print result
    subset = result[0]
    return "%.2f" % (float(subset.WorkingSetSize)/1024./1024.)
</snippet></ROW><ROW><id>15787624</id><snippet>import collections

somelist = list('ABRACADABRA')
dups = collections.defaultdict(list)
for index, item in enumerate(somelist):
    dups[item].append(index)
print(dups)
</snippet></ROW><ROW><id>15787624</id><snippet>defaultdict(&lt;type 'list'&gt;, {'A': [0, 3, 5, 7, 10], 'R': [2, 9], 'B': [1, 8], 'C': [4], 'D': [6]})
</snippet></ROW><ROW><id>15787624</id><snippet>key</snippet></ROW><ROW><id>15787624</id><snippet>def key(item):
    return something_hashable
for index, item in enumerate(somelist):
    dups[key(item)].append(index)
</snippet></ROW><ROW><id>15787624</id><snippet>key</snippet></ROW><ROW><id>15787624</id><snippet># Don't use this unless somelist contains unhashable items
import collections
somelist = list('ABRACADABRA')
seen = []
dups = collections.defaultdict(list)
for i, item in enumerate(somelist):
    for j, orig in enumerate(seen):
        if item == orig:
            dups[j].append(i)
            break
    else:
        seen.append(item)
print([(seen[key], val) for key, val in dups.iteritems()])
</snippet></ROW><ROW><id>15787624</id><snippet>[('A', [3, 5, 7, 10]), ('B', [8]), ('R', [9])]
</snippet></ROW><ROW><id>15787950</id><snippet>#first we need to create mappings in a dict for your reflections
reflect = {
    'you': 'I',
    'are': 'am'
}

# After we read user input
user_input = 'hello, how are you ?'


#Now look how we can replace all words in user_input from reflect with one line
reflected = [word for word in [reflect.get(key, key) for key in user_input.split()]]

print ' '.join(reflected)
</snippet></ROW><ROW><id>15787950</id><snippet>user_input.split()</snippet></ROW><ROW><id>15787950</id><snippet>for key in
    user_input.split()</snippet></ROW><ROW><id>15787950</id><snippet>reflect.get(key, key)</snippet></ROW><ROW><id>15787950</id><snippet>reflect</snippet></ROW><ROW><id>15787950</id><snippet>key</snippet></ROW><ROW><id>15787950</id><snippet>[word for word in [getting reflected words from user input and a default value of the same word if we can't find it's reflection]]</snippet></ROW><ROW><id>15788111</id><snippet>split()</snippet></ROW><ROW><id>15788111</id><snippet>In [1]: '50W'.split('+')
Out[1]: ['50W']

In [2]: '800W+25W'.split('+')
Out[2]: ['800W', '25W']

In [3]: '30W+50W+2W'.split('+')
Out[3]: ['30W', '50W', '2W']
</snippet></ROW><ROW><id>15788111</id><snippet>W</snippet></ROW><ROW><id>15788111</id><snippet>In [4]: int('30W'[:-1])
Out[4]: 30
</snippet></ROW><ROW><id>15788111</id><snippet>In [5]: pattern = re.compile(r'^\d+W(?:\+\d+W)*$')
</snippet></ROW><ROW><id>15788111</id><snippet>In [6]: vals = ['50W', '800W+25W', '30W+50W+2W', '80W3000W2675W']

In [7]: for val in vals:
  ....:     if pattern.match(val):
  ....:         numbers = val.split('+')
  ....:         print [int(num[:-1]) for num in numbers]
[50]
[800, 25]
[30, 50, 2]
</snippet></ROW><ROW><id>15788411</id><snippet>for a, b, c in zip(*[iter(seq)]*3): pass
</snippet></ROW><ROW><id>15788411</id><snippet>itertools</snippet></ROW><ROW><id>15788411</id><snippet>from itertools import izip_longest

def grouper(n, iterable, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

for a, b, c in grouper(3, seq):
    pass
</snippet></ROW><ROW><id>15788464</id><snippet>for field in self.fields:
    if isinstance(field, forms.IntegerField):
        field.widget.attrs['class'] = 'biggerWidth'
</snippet></ROW><ROW><id>15788527</id><snippet>&gt;&gt;&gt; L = [['a', 'b'], ['c', 'd'], ['e', 'f'], ['g']]
&gt;&gt;&gt; [[''.join(x)] for x in L]
[['ab'], ['cd'], ['ef'], ['g']]
</snippet></ROW><ROW><id>15788807</id><snippet>os</snippet></ROW><ROW><id>15788807</id><snippet>webdriver.firefox_profile.path</snippet></ROW><ROW><id>15788829</id><snippet>f2</snippet></ROW><ROW><id>15788829</id><snippet>hd</snippet></ROW><ROW><id>15788829</id><snippet>od -t x1</snippet></ROW><ROW><id>15788829</id><snippet>contents.encode("hex")</snippet></ROW><ROW><id>15788829</id><snippet>def hd(data):
    """ str --&gt; hex dump """
    def printable(c):
        import string
        return c in string.printable and not c.isspace()
    result = ""
    for i in range(0, len(data), 16):
        line = data[i:i+16]
        result += '{0:05x} '.format(i)
        result += ' '.join(c.encode("hex") for c in line)
        result += " " * (50-len(line)*3)
        result += ''.join(c if printable(c) else '.' for c in line)
        result += "\n"
    return result

input_file = open('blind_willie.MP3', 'rb')
contents = input_file.read()
output_file = open('f2.txt', 'wb')
output_file.write(hd(contents))
</snippet></ROW><ROW><id>15788885</id><snippet>ranges = np.vstack((a,b))
ranges.sort(0)

# List of non-overlapping ranges
nonoverlapping = (ranges[1:,0] - ranges[:-1,1] &gt; 1).nonzero()[0]

# Starts are 0, and all the starts not overlapped by their predecessor
starts = np.hstack(([0], nonoverlapping + 1))

# Ends are -1 and all the ends who aren't overlapped by their successor
ends = np.hstack(( nonoverlapping, [-1]))

# Result
result = np.vstack((ranges[starts, 0], ranges[ends, 1])).T
</snippet></ROW><ROW><id>15788885</id><snippet>import numpy as np
import itertools

def ranges(s):
    """ Converts a list of integers into start, end pairs """
    for a, b in itertools.groupby(enumerate(s), lambda(x, y): y - x):
        b = list(b)
        yield b[0][1], b[-1][1]

def intersect(*args):
    """ Converts any number of numpy arrays containing start, end pairs 
        into a set of indexes """
    s = set()
    for start, end in np.vstack(args):
        s = s | set(range(start,end+1))
    return s

a = np.array([[5,7],[12, 18],[20,29]])
b = np.array([[2,4],[8,11],[33,35]])

result = np.array(list(ranges(intersect(a,b))))
</snippet></ROW><ROW><id>15788933</id><snippet>#!/usr/bin/env python
# src_dimensions.py
# requires mediainfo package
import subprocess, glob
globpattern = 'path/to/*.*'
cmd = ['mediainfo', '--Inform=Video;%Width%x%Height%\\n']
cmd.extend(glob.glob(globpattern))
proc = subprocess.Popen(cmd,stdout=subprocess.PIPE)
outputlines = filter(lambda x:len(x)&gt;0,(line.strip() for line in proc.stdout))
print outputlines
</snippet></ROW><ROW><id>15789224</id><snippet>process(my_start_list)</snippet></ROW><ROW><id>15789224</id><snippet>if</snippet></ROW><ROW><id>15789224</id><snippet>len(my_list) &gt; 1</snippet></ROW><ROW><id>15789224</id><snippet>else</snippet></ROW><ROW><id>15789224</id><snippet>None</snippet></ROW><ROW><id>15789224</id><snippet>process(my_list)</snippet></ROW><ROW><id>15789224</id><snippet>def process(my_list):
    #do some stuff
    ...
    if len(my_list) &gt; 1:
        return process(my_list)
    else:
        print(my_list)
        return my_list
</snippet></ROW><ROW><id>15789236</id><snippet>.keys()</snippet></ROW><ROW><id>15789236</id><snippet>&gt;&gt;&gt; dct = {
...     "1": "a", 
...     "3": "b", 
...     "8": {
...         "12": "c", 
...         "25": "d"
...     }
... }
&gt;&gt;&gt; 
&gt;&gt;&gt; dct.keys()
['1', '8', '3']
&gt;&gt;&gt; for key in dct.keys(): print key
...
1
8
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15789236</id><snippet>keylist = dct.keys()
keylist.sort()
</snippet></ROW><ROW><id>15789284</id><snippet>numpy.matrix</snippet></ROW><ROW><id>15789284</id><snippet>Docstring:
matrix(data, dtype=None, copy=True)

[...]

Parameters
----------
data : array_like or string
   If `data` is a string, it is interpreted as a matrix with commas
   or spaces separating columns, and semicolons separating rows.
</snippet></ROW><ROW><id>15789284</id><snippet>In [1]: import numpy as np

In [2]: s = '[2 3; 4 5]'    

In [3]: def mag_func(s):
   ...:     return np.array(np.matrix(s.strip('[]')))

In [4]: mag_func(s)
Out[4]: 
array([[2, 3],
       [4, 5]])
</snippet></ROW><ROW><id>15789365</id><snippet>import inspect
from collections import defaultdict

def clcoancl(*cls_list):
    mros = [list(inspect.getmro(cls)) for cls in cls_list]
    track = defaultdict(int)
    while mros:
        for mro in mros:
            cur = mro.pop(0)
            track[cur] += 1
            if track[cur] == len(cls_list):
                return cur
            if len(mro) == 0:
                mros.remove(mro)
    return None # or raise, if that's more appropriate
</snippet></ROW><ROW><id>15789415</id><snippet>import cherrypy

class Band(object):
    def __init__(self):
        self.albums = Album()

    def _cp_dispatch(self, vpath):
        if len(vpath) == 1:
            cherrypy.request.params['name'] = vpath.pop()
            return self

        if len(vpath) == 3:
            cherrypy.request.params['artist'] = vpath.pop(0)  # /band name/
            vpath.pop(0) # /albums/
            cherrypy.request.params['title'] = vpath.pop(0) # /album title/
            return self.albums

        return vpath

    @cherrypy.expose
    def index(self, name):
        return 'About %s...' % name

class Album(object):
    @cherrypy.expose
    def index(self, artist, title):
        return 'About %s by %s...' % (title, artist)

if __name__ == '__main__':
    cherrypy.quickstart(Band())
</snippet></ROW><ROW><id>15789415</id><snippet>import cherrypy

@cherrypy.popargs('name')
class Band(object):
    def __init__(self):
        self.albums = Album()

    @cherrypy.expose
    def index(self, name):
        return 'About %s...' % name

@cherrypy.popargs('title')
class Album(object):
    @cherrypy.expose
    def index(self, name, title):
        return 'About %s by %s...' % (title, name)

if __name__ == '__main__':
    cherrypy.quickstart(Band())
</snippet></ROW><ROW><id>15789431</id><snippet>alignment</snippet></ROW><ROW><id>15789431</id><snippet>alignments = {'Left': left, 'Right': right, 'Centre', centre, 'Fully': fully}

try:
    line = alignments[alignment](new_string)
except KeyError:
    print "Error."
</snippet></ROW><ROW><id>15789490</id><snippet>CFUNCTYPE(c_byte, POINTER(POINTER(c_char)))
</snippet></ROW><ROW><id>15789490</id><snippet>pyfoo</snippet></ROW><ROW><id>15789490</id><snippet>    def pyfoo(self, char_ptr_ptr):
        char_ptr_ptr[0] = self.response
        return 0
</snippet></ROW><ROW><id>15789490</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; from ctypes import *

&gt;&gt;&gt; open('tmp.c', 'w').write(r'''
... #include &lt;stdio.h&gt;
... typedef char (*callback_t)(char **buf);
... int test(callback_t foo)
... {
...     char res, *buf;
...     res = foo(&amp;buf);
...     printf("res: %d\n", res);
...     printf("buf: %s\n", buf);
...     return 0;
... }
... ''')
&gt;&gt;&gt; _ = os.system('gcc -shared -fPIC -o tmp.so tmp.c')
&gt;&gt;&gt; lib = CDLL('./tmp.so')

&gt;&gt;&gt; class Test(object):
...   def __init__(self):
...     self.response = create_string_buffer("The Response String")
...     self.callback = CFUNCTYPE(c_byte, POINTER(POINTER(c_char)))(self.pyfoo)
...   def pyfoo(self, char_ptr_ptr):
...     char_ptr_ptr[0] = self.response
...     return 0
... 

&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; _ = lib.test(t.callback)
res: 0
buf: The Response String
</snippet></ROW><ROW><id>15789523</id><snippet>import math

area1 = 0.5 * self.sides[0] * self.sides[1] * math.sin(math.radians(self.angles[1]))
area2 = 0.5 * self.sides[2] * self.sides[3] * math.sin(math.radians(self.angles[3]))
area = area1 + area2
</snippet></ROW><ROW><id>15789523</id><snippet>sides = [3, 5, 5, 4]</snippet></ROW><ROW><id>15789523</id><snippet>angles = [90, 95, 75, 100]</snippet></ROW><ROW><id>15789523</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; sides = [3, 5, 5, 4]
&gt;&gt;&gt; angles = [90, 95, 75, 100]
&gt;&gt;&gt; area1 = 0.5 * sides[0] * sides[1] * math.sin(math.radians(angles[1]))
&gt;&gt;&gt; area2 = 0.5 * sides[2] * sides[3] * math.sin(math.radians(angles[3]))
&gt;&gt;&gt; area1 + area2
17.31953776581017
</snippet></ROW><ROW><id>15789794</id><snippet>import threading
import random, time
import gtk
#Initializing the gtk's thread engine
gtk.threads_init()


class FractionSetter(threading.Thread):
    """This class sets the fraction of the progressbar"""

    #Thread event, stops the thread if it is set.
    stopthread = threading.Event()

    def run(self):
        """Run method, this is the code that runs while thread is alive."""

        #Importing the progressbar widget from the global scope
        global progressbar 

        #While the stopthread event isn't setted, the thread keeps going on
        while not self.stopthread.isSet() :
            # Acquiring the gtk global mutex
            gtk.threads_enter()
            #Setting a random value for the fraction
            progressbar.set_fraction(random.random())
            # Releasing the gtk global mutex
            gtk.threads_leave()

            #Delaying 100ms until the next iteration
            time.sleep(0.1)

    def stop(self):
        """Stop method, sets the event to terminate the thread's main loop"""
        self.stopthread.set()

def main_quit(obj):
    """main_quit function, it stops the thread and the gtk's main loop"""
    #Importing the fs object from the global scope
    global fs
    #Stopping the thread and the gtk's main loop
    fs.stop()
    gtk.main_quit()

#Gui bootstrap: window and progressbar
window = gtk.Window()
progressbar = gtk.ProgressBar()
window.add(progressbar)
window.show_all()
#Connecting the 'destroy' event to the main_quit function
window.connect('destroy', main_quit)

#Creating and starting the thread
fs = FractionSetter()
fs.start()

gtk.main()
</snippet></ROW><ROW><id>15789891</id><snippet>os.listdir()</snippet></ROW><ROW><id>15789891</id><snippet>path = '/some/directory'
for filename in os.listdir(path):
    if not filename.endswith('.txt'):
        continue
    filename = os.path.join(path, filename)
    with open(filename, 'r') as fh:
        for line in fh:
            if re.search('Unique description', line):
                print(line, end='')
</snippet></ROW><ROW><id>15789957</id><snippet>text()</snippet></ROW><ROW><id>15789957</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>15789957</id><snippet>&lt;acronym&gt;</snippet></ROW><ROW><id>15789957</id><snippet>text()</snippet></ROW><ROW><id>15789957</id><snippet>p[...]</snippet></ROW><ROW><id>15789957</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>15789957</id><snippet>text()</snippet></ROW><ROW><id>15789957</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>15789957</id><snippet>"My "</snippet></ROW><ROW><id>15789957</id><snippet>acronym</snippet></ROW><ROW><id>15789957</id><snippet>" message"</snippet></ROW><ROW><id>15789957</id><snippet>text()</snippet></ROW><ROW><id>15789957</id><snippet>p</snippet></ROW><ROW><id>15789957</id><snippet>My</snippet></ROW><ROW><id>15789957</id><snippet>message</snippet></ROW><ROW><id>15789957</id><snippet>contains(text(), ...)</snippet></ROW><ROW><id>15789957</id><snippet>text()</snippet></ROW><ROW><id>15789957</id><snippet>"My "</snippet></ROW><ROW><id>15789957</id><snippet>p[contains("My ", "My error message")]</snippet></ROW><ROW><id>15789957</id><snippet>p</snippet></ROW><ROW><id>15789957</id><snippet>p</snippet></ROW><ROW><id>15789957</id><snippet>text()</snippet></ROW><ROW><id>15789957</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>15789957</id><snippet>p[contains(., "...")]
</snippet></ROW><ROW><id>15789957</id><snippet>.</snippet></ROW><ROW><id>15789957</id><snippet>p[...]</snippet></ROW><ROW><id>15789957</id><snippet>p</snippet></ROW><ROW><id>15789957</id><snippet>p</snippet></ROW><ROW><id>15790090</id><snippet>df.reset_index(level=1).groupby(level=0).first()
</snippet></ROW><ROW><id>15790090</id><snippet>first</snippet></ROW><ROW><id>15790090</id><snippet>df.reset_index(level=1).sort_index(by="datetime").groupby(level=0).first()
</snippet></ROW><ROW><id>15790169</id><snippet>os.exec*</snippet></ROW><ROW><id>15790203</id><snippet>Z</snippet></ROW><ROW><id>15790203</id><snippet>XX, YY = meshgrid(X, Y)
ZZ = reshape(Z, XX.shape)
ax.plot_wireframe(XX, YY, ZZ)
</snippet></ROW><ROW><id>15790339</id><snippet>class MultiSelectForm(forms.Form):
    def __init__(self, *args, **kwargs):
        dynamic_field = kwargs.pop('dynamic_field')
        super(MultiSelectForm, self).__init__(*args, **kwargs)
        self.fields[dynamic_field['name']] = forms.MultipleChoiceField(
            choices=dynamic_field['choices'], 
            empty_permitted=False
            required=dynamic_field['required'],
            widget=MultiSelect(attrs=dynamic_field['attrs']))
</snippet></ROW><ROW><id>15790339</id><snippet>my_form = MultiSelectForm(
    dynamic_field={'name': 'countries', 'choices': (mychoices), 'required': True})
</snippet></ROW><ROW><id>15790378</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; xml = """..."""
&gt;&gt;&gt; doc = ET.fromstring(xml)
&gt;&gt;&gt; doc.findall(".//rank")
[&lt;Element 'rank' at 0x10199ebd0&gt;, &lt;Element 'rank' at 0x10199e210&gt;, &lt;Element 'rank' at 0x10199e4d0&gt;]
</snippet></ROW><ROW><id>15790378</id><snippet>&gt;&gt;&gt; ET.ElementTree(doc).findall('//rank')
</snippet></ROW><ROW><id>15790513</id><snippet>creatures</snippet></ROW><ROW><id>15790513</id><snippet>awake = dict(self.creatures)
</snippet></ROW><ROW><id>15790513</id><snippet>a=b</snippet></ROW><ROW><id>15790513</id><snippet>a</snippet></ROW><ROW><id>15790513</id><snippet>b</snippet></ROW><ROW><id>15790703</id><snippet>class Yes:
    a = 1 # initialize class var.
    def __init__(self):
        self.a = 1 # point of this is what?

    def yes(self):
        if Yes.a==1: # check class var
            print "Yes"
        else:
            print "No, but yes"

class No(Yes):

    def no(self):
        if Yes.a==1: # check class var
            print "No"
        else:
            print "Yes, but no"
        Yes.a-=1 # alter class var
</snippet></ROW><ROW><id>15790709</id><snippet>while</snippet></ROW><ROW><id>15790709</id><snippet>bank &lt; 10000000</snippet></ROW><ROW><id>15790709</id><snippet>while bank &gt; 100 and bank &lt; 1000000:
</snippet></ROW><ROW><id>15790709</id><snippet>bank = 20000</snippet></ROW><ROW><id>15790709</id><snippet>bank = 20000
while bank &lt; 1000000:
    if bank &lt; 100:
        bank = 20000

.... 
</snippet></ROW><ROW><id>15790785</id><snippet>y = [x for i in range(3) for x in board[1][i]]
</snippet></ROW><ROW><id>15790785</id><snippet>board[1][:]</snippet></ROW><ROW><id>15790785</id><snippet>board[1]</snippet></ROW><ROW><id>15790785</id><snippet>y = [foobar(c) for c in board[1]]
</snippet></ROW><ROW><id>15791108</id><snippet>del</snippet></ROW><ROW><id>15791108</id><snippet>del list1[:319]
</snippet></ROW><ROW><id>15791365</id><snippet>var = "module" 
module = __import__("modules.{0}".format(var), globals(), locals(), [], -1)
</snippet></ROW><ROW><id>15791538</id><snippet>fd = os.open(filename, os.O_CREAT | os.O_EXCL, 0666)
</snippet></ROW><ROW><id>15791538</id><snippet>fd=os.open(filename, os.O_CREAT | os.O_EXCL | os.O_WRONLY, 0666)
</snippet></ROW><ROW><id>15791572</id><snippet>def kontroll(self, skoor, vale):
    # Your code here.
</snippet></ROW><ROW><id>15791572</id><snippet>skoor</snippet></ROW><ROW><id>15791572</id><snippet>vale</snippet></ROW><ROW><id>15791572</id><snippet>kontroll</snippet></ROW><ROW><id>15791572</id><snippet>self</snippet></ROW><ROW><id>15791572</id><snippet>self</snippet></ROW><ROW><id>15791572</id><snippet>self</snippet></ROW><ROW><id>15791572</id><snippet>class C(object):
    def kontroll(self, skoor, vale):
        pass # Your code goes here.

c = C() # Create an instance of the class!
c.kontroll(skoor, vale) # The instance (c) is automatically passed to the method.
</snippet></ROW><ROW><id>15791572</id><snippet>def kontroll(skoor, vale):
    pass # Your code goes here.

kontroll(skoor, vale)
</snippet></ROW><ROW><id>15791594</id><snippet>str = "a"</snippet></ROW><ROW><id>15791594</id><snippet>str</snippet></ROW><ROW><id>15791594</id><snippet>str</snippet></ROW><ROW><id>15791594</id><snippet>read()</snippet></ROW><ROW><id>15791594</id><snippet>"a" != b"a"</snippet></ROW><ROW><id>15791594</id><snippet>str</snippet></ROW><ROW><id>15791594</id><snippet>encode()</snippet></ROW><ROW><id>15791594</id><snippet>bytearray</snippet></ROW><ROW><id>15791594</id><snippet>bytearray(byte_string)</snippet></ROW><ROW><id>15791680</id><snippet>In [51]: np.array(['a', 10])
Out[51]:
array(['a', '1'],
      dtype='|S1')

In [56]: np.array(['a', 10], dtype=(str, 5))
Out[56]:
array(['a', '10'],
      dtype='|S5')

In [57]: np.array(['a', 123456], dtype=(str, 5))
Out[57]:
array(['a', '12345'],
      dtype='|S5')

In [58]: np.array(['a', 123456], dtype=(str, 6))
Out[58]:
array(['a', '123456'],
      dtype='|S6')
</snippet></ROW><ROW><id>15791687</id><snippet>csv</snippet></ROW><ROW><id>15791687</id><snippet>import csv

cursor = arcpy.InsertCursor(pointFC)
with open('yourcsvfile.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        point = arcpy.CreateObject("Point")
        point.X, point.Y = float(row[5]), float(row[27])  # take the 6th and 28th columns from the row
        cursor.insertRow(point)        
</snippet></ROW><ROW><id>15791696</id><snippet>class PersonAdmin(admin.ModelAdmin):
    list_display = ('name', 'books')

    def books(self, obj):
        return ",".join([k.name for k in obj.book_set.all()])
</snippet></ROW><ROW><id>15791772</id><snippet>fig.add_subplot(511)</snippet></ROW><ROW><id>15791772</id><snippet>fig.add_subplot(n_rows, n_columns, index)</snippet></ROW><ROW><id>15791772</id><snippet>n_rows</snippet></ROW><ROW><id>15791772</id><snippet>n_columns</snippet></ROW><ROW><id>15791772</id><snippet>index</snippet></ROW><ROW><id>15791772</id><snippet>ax = fig.add_subplot(5,2,1)
(...)
ax = fig.add_subplot(5,2,2)
(...)    
ax = fig.add_subplot(5,2,3)
</snippet></ROW><ROW><id>15791772</id><snippet>fig.add_subplot(5,2,1)</snippet></ROW><ROW><id>15791772</id><snippet>fig.add_subplot(521)</snippet></ROW><ROW><id>15791900</id><snippet>from sys import argv
from itertools import cycle
from pprint import pprint

from twisted.names import client
from twisted.internet.task import react
from twisted.internet.defer import gatherResults, inlineCallbacks

def query(reactor, server, name):
    # Create a new resolver that uses the given DNS server
    resolver = client.Resolver(
        resolv="/dev/null", servers=[(server, 53)], reactor=reactor)
    # Use it to do an A request for the name
    return resolver.lookupAddress(name)

@inlineCallbacks
def main(reactor, *names):
    # Here's some random DNS servers to which to issue requests.
    servers = ["4.2.2.1", "8.8.8.8"]

    # Handy trick to cycle through those servers forever
    next_server = cycle(servers).next

    # Issue queries for all the names given, alternating between servers.
    results = []
    for n in names:
        results.append(query(reactor, next_server(), n))
    # Wait for all the results
    results = yield gatherResults(results)
    # And report them
    pprint(zip(names, results))

if __name__ == '__main__':
    # Run the main program with the reactor going and pass names
    # from the command line arguments to be resolved
    react(main, argv[1:])
</snippet></ROW><ROW><id>15792044</id><snippet>i</snippet></ROW><ROW><id>15792044</id><snippet>for</snippet></ROW><ROW><id>15792044</id><snippet>range()</snippet></ROW><ROW><id>15792044</id><snippet>i</snippet></ROW><ROW><id>15792044</id><snippet>for</snippet></ROW><ROW><id>15792044</id><snippet>for element in somelist:
    # do something with element
</snippet></ROW><ROW><id>15792044</id><snippet>for i in range(len(somelist)):
    element = somelist[i]
</snippet></ROW><ROW><id>15792197</id><snippet>EnterExit.end()
</snippet></ROW><ROW><id>15792197</id><snippet>from EnterExit import end       # or import *
end()
</snippet></ROW><ROW><id>15792222</id><snippet>data = [(99, '03/04/2013 13:37:20'), (98,  '03/04/2013 13:37:20'), ...]
</snippet></ROW><ROW><id>15792222</id><snippet>data.sort(key=lambda i: i[1]) # sort with timestamp
results = []

def keyfunc(timestamp, interval = 5*60):
    # defined a key function.
    # 1. parse the datetime string to datetime object
    # 2. count the time delta (seconds)
    # 3. divided the time delta with interval, which is (6*60) here
    xt = datetime(2013, 4,3)
    dt = datetime.strptime(timestamp, '%d/%m/%Y %H:%M:%S')
    delta_second = int((dt - xt).total_seconds())
    normalize_second = (delta_second / interval) * interval
    return xt + timedelta(seconds=normalize_second)

for k, g in groupby(data, key=lambda i: keyfunc(i[1])):
    # k would be time interval "03/04/2013 13:30:00", "03/04/2013 13:35:00" .... 
    # g would be the level, timestamp pair belong to the interval
    avg_level = sum([x[0] for x in g]) / len(g)
    results.append((k, avg_level))
</snippet></ROW><ROW><id>15792222</id><snippet>keyfunc</snippet></ROW><ROW><id>15792222</id><snippet>&gt;&gt;&gt; keyfunc('03/04/2013 13:37:20')
datetime.datetime(2013, 4, 3, 13, 35)

&gt;&gt;&gt; keyfunc('03/04/2013 13:37:30')
datetime.datetime(2013, 4, 3, 13, 35)

# the return value are the same, so 03/04/2013 13:37:20 and 03/04/2013 13:37:30
# will be consider in the same group. 
</snippet></ROW><ROW><id>15792233</id><snippet>layout-&gt;setStretchFactor(label, 15)
layout-&gt;setStretchFactor(line, 100)
</snippet></ROW><ROW><id>15792505</id><snippet>roll</snippet></ROW><ROW><id>15792505</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(10)
&gt;&gt;&gt; np.roll(a,2)
array([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])
&gt;&gt;&gt; np.roll(a,-2)
array([2, 3, 4, 5, 6, 7, 8, 9, 0, 1])
</snippet></ROW><ROW><id>15792807</id><snippet>fromlist</snippet></ROW><ROW><id>15792807</id><snippet>mod = __import__("modules.%s" % (module1), fromlist=["main"])
mod.main()
</snippet></ROW><ROW><id>15792807</id><snippet>mod = __import__("modules.%s" % (module1), locals(), globals(), ["main"])
</snippet></ROW><ROW><id>15792990</id><snippet>import os
import threading

import cv2

my_opencv_path = "C:/opencv2.4.3"
video_path_1 = os.path.join(my_opencv_path, "samples", "cpp", "tutorial_code",
                            "HighGUI", "video-input-psnr-ssim", "video",
                            "Megamind.avi")
video_path_2 = os.path.join(my_opencv_path, "samples", "c", "tree.avi")
assert os.path.isfile(video_path_1)
assert os.path.isfile(video_path_2)


class MyThread (threading.Thread):
    maxRetries = 20

    def __init__(self, thread_id, name, video_url, thread_lock):
        threading.Thread.__init__(self)
        self.thread_id = thread_id
        self.name = name
        self.video_url = video_url
        self.thread_lock = thread_lock

    def run(self):
        print "Starting " + self.name
        window_name = self.name
        cv2.namedWindow(window_name)
        video = cv2.VideoCapture(self.video_url)
        while True:
            # self.thread_lock.acquire()  # These didn't seem necessary
            got_a_frame, image = video.read()
            # self.thread_lock.release()
            if not got_a_frame:  # error on video source or last frame finished
                break
            cv2.imshow(window_name, image)
            key = cv2.waitKey(50)
            if key == 27:
                break
        cv2.destroyWindow(window_name)
        print self.name + " Exiting"


def main():
    thread_lock = threading.Lock()
    thread1 = MyThread(1, "Thread 1", video_path_1, thread_lock)
    thread2 = MyThread(2, "Thread 2", video_path_2, thread_lock)
    thread1.start()
    thread2.start()
    print "Exiting Main Thread"

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15793468</id><snippet>today = datetime.date.today()
start = datetime.date(2007, 1, 31)
period = relativedelta(months=1)

delta = period
while start + delta &lt; today:
    delta += period

next = start + delta
</snippet></ROW><ROW><id>15793468</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; from dateutil.relativedelta import relativedelta
&gt;&gt;&gt; today = datetime.date.today()
&gt;&gt;&gt; start = datetime.date(2007, 1, 31)
&gt;&gt;&gt; period = relativedelta(months=1)
&gt;&gt;&gt; delta = period
&gt;&gt;&gt; while start + delta &lt; today:
...     delta += period
... 
&gt;&gt;&gt; delta
relativedelta(years=+6, months=+3)
&gt;&gt;&gt; start + delta
datetime.date(2013, 4, 30)
</snippet></ROW><ROW><id>15793468</id><snippet>timedelta()</snippet></ROW><ROW><id>15793468</id><snippet>period = datetime.timedelta(days=28)  # 4 weeks
delta = today - start
remainder = delta.days % period.days
end = today + datetime.timedelta(days=remainder)
</snippet></ROW><ROW><id>15793468</id><snippet>&gt;&gt;&gt; period = datetime.timedelta(days=28)  # 4 weeks
&gt;&gt;&gt; delta = today - start
&gt;&gt;&gt; remainder = delta.days % period.days
&gt;&gt;&gt; today + datetime.timedelta(days=remainder)
datetime.date(2013, 4, 17)
</snippet></ROW><ROW><id>15793754</id><snippet>import __main__
from itertools import permutations
from time import time

def replace1(txt, pos, new_char):
    return txt[:pos] + new_char + txt[pos+1:]

def replace2(txt, pos, new_char):
    return '{0}{1}{2}'.format(txt[:pos], new_char, txt[pos+1:])

def replace3(txt, pos, new_char):
    return ''.join({pos: new_char}.get(idx, c) for idx, c in enumerate(txt))

def replace4(txt, pos, new_char):    
    txt = list('12345')
    txt[pos] = new_char
    ''.join(txt)

def replace5(txt, pos, new_char):
    return '%s%s%s' % (txt[:pos], new_char, txt[pos+1:])


words = [''.join(x) for x in permutations('abcdefgij')]

for i in range(1, 6):
    func = getattr(__main__, 'replace{}'.format(i))

    start = time()
    for word in words:
        result = func(word, 2, 'X')
    print time() - start
</snippet></ROW><ROW><id>15793754</id><snippet>0.233116149902
0.409259080887
2.64006495476
0.612321138382
0.302225828171
</snippet></ROW><ROW><id>15793814</id><snippet>text</snippet></ROW><ROW><id>15793814</id><snippet>import json

json.loads(re.sub('\A.*[;]\n', "", r.text))
</snippet></ROW><ROW><id>15793814</id><snippet>response._content</snippet></ROW><ROW><id>15793814</id><snippet>.content</snippet></ROW><ROW><id>15793814</id><snippet>r._content = re.sub('\A.*[;]\n', "", r.content)
</snippet></ROW><ROW><id>15794022</id><snippet>head</snippet></ROW><ROW><id>15794022</id><snippet>stdout</snippet></ROW><ROW><id>15794022</id><snippet>print</snippet></ROW><ROW><id>15794022</id><snippet>sys.stdout</snippet></ROW><ROW><id>15794022</id><snippet>IOError</snippet></ROW><ROW><id>15794022</id><snippet>try:
    for pid, uid, pname in data:
        print template.format(pid, uid, pname)
except IOError:
    # stdout is closed, no point in continuing
    # Attempt to close them explicitly to prevent cleanup problems:
    try:
        sys.stdout.close()
    except IOError:
        pass
    try:
        sys.stderr.close()
    except IOError:
        pass
</snippet></ROW><ROW><id>15794220</id><snippet>In [87]: %timeit cythonmodule.doit(lam=lam, y0=y0, zxp=zxp, z=z, k=k, ra=ra)
1 loops, best of 3: 501 ms per loop
In [85]: %timeit doit()
1 loops, best of 3: 4.97 s per loop
</snippet></ROW><ROW><id>15794454</id><snippet>def permission(permission_required):
    def decorator(func):
        func.permission_required = permission_required
        return func
    return decorator
</snippet></ROW><ROW><id>15794454</id><snippet>def permission(permission_required):
    def decorator(func):
        def wrapper(*args, **kwargs):
            # only use a wrapper if you need extra code to be run here
            return func(*args, **kwargs)
        wrapper.permission_required = permission_required
        return wrapper
    return decorator
</snippet></ROW><ROW><id>15794644</id><snippet>project_a.prequisites.all()</snippet></ROW><ROW><id>15794644</id><snippet>Project</snippet></ROW><ROW><id>15794644</id><snippet>objects</snippet></ROW><ROW><id>15794644</id><snippet>project_a.prequisites.filter(title='a_prereq_title')</snippet></ROW><ROW><id>15795089</id><snippet>tzname()</snippet></ROW><ROW><id>15795089</id><snippet>None</snippet></ROW><ROW><id>15795089</id><snippet>%Z</snippet></ROW><ROW><id>15795089</id><snippet>%Z</snippet></ROW><ROW><id>15795089</id><snippet>expire_date.tzname()</snippet></ROW><ROW><id>15795089</id><snippet>expire_date.tzinfo</snippet></ROW><ROW><id>15795089</id><snippet>expire_date.tzinfo.utcoffset(expire_date)</snippet></ROW><ROW><id>15795089</id><snippet>astimezone</snippet></ROW><ROW><id>15795089</id><snippet>replace</snippet></ROW><ROW><id>15795089</id><snippet>tuple</snippet></ROW><ROW><id>15795346</id><snippet> except ImportError, e:

 print "_rollback_works"
</snippet></ROW><ROW><id>15795346</id><snippet> //Exception handling syntax changes slightly, "as"
 except ImportError as err:

 //print is now a function print()
 print ("_rollback_works")
</snippet></ROW><ROW><id>15795482</id><snippet>#!/usr/bin/env python

orig=[]
nex=[]

with open("bat.txt") as fd:
    fd.readline()
    for line in fd:
        orig.append(line.split()[0])
        nex.append(line.split()[2])

col=[i for i in zip(orig, nex)]
</snippet></ROW><ROW><id>15795482</id><snippet>col</snippet></ROW><ROW><id>15795482</id><snippet>('fe:fe:00:00:05:01', 'fe:fe:00:00:02:01')
('fe:fe:00:00:04:01', 'fe:fe:00:00:02:01')
('fe:fe:00:00:02:01', 'fe:fe:00:00:02:01')
('fe:fe:00:00:07:01', 'fe:fe:00:00:02:01')
('fe:fe:00:00:08:01', 'fe:fe:00:00:02:01')
('fe:fe:00:00:03:01', 'fe:fe:00:00:02:01')
('fe:fe:00:00:09:01', 'fe:fe:00:00:02:01')
('fe:fe:00:00:06:01', 'fe:fe:00:00:02:01')
</snippet></ROW><ROW><id>15795568</id><snippet>key</snippet></ROW><ROW><id>15795568</id><snippet>(name_without_rightmost_word, number)</snippet></ROW><ROW><id>15795568</id><snippet>In [92]: sorted(d.items(), key=lambda (name, num): (name.rsplit(None, 1)[0], num))
Out[92]:
[('Mary XXIV', 24),
 ('Robert III', 3),
 ('Robert VIII', 8),
 ('Robert XV', 15),
 ('Usamec VII', 7),
 ('Usamec XL', 40),
 ('Usamec XLII', 42),
 ('Usamec XLIX', 49),
 ('Zemco III', 3)]
</snippet></ROW><ROW><id>15795568</id><snippet>key</snippet></ROW><ROW><id>15795568</id><snippet>lambda item: (item[0].rsplit(None, 1)[0], item[1])
</snippet></ROW><ROW><id>15795568</id><snippet>key.rsplit(None, 1)[0]</snippet></ROW><ROW><id>15795568</id><snippet>key.split()[0]</snippet></ROW><ROW><id>15795752</id><snippet>parser = argparse.ArgumentParser(description=TEST_DESCRIPTION, 
                                 formatter_class=argparse.RawTextHelpFormatter)
</snippet></ROW><ROW><id>15795854</id><snippet>perl -n -e 'printf "%d-%02d-%02d %s", $ARGV =~ m/_(\d{4})(\d\d)(\d\d)/, $_;' *.txt | sort -n
</snippet></ROW><ROW><id>15795854</id><snippet>perl</snippet></ROW><ROW><id>15795854</id><snippet>-n</snippet></ROW><ROW><id>15795854</id><snippet>while (&lt;&gt;) { }</snippet></ROW><ROW><id>15795854</id><snippet>-e ''</snippet></ROW><ROW><id>15795854</id><snippet>printf</snippet></ROW><ROW><id>15795854</id><snippet>$_</snippet></ROW><ROW><id>15795854</id><snippet>$ARGV</snippet></ROW><ROW><id>15795854</id><snippet>m//</snippet></ROW><ROW><id>15795854</id><snippet>printf</snippet></ROW><ROW><id>15795914</id><snippet>v</snippet></ROW><ROW><id>15795914</id><snippet>v</snippet></ROW><ROW><id>15795914</id><snippet>next</snippet></ROW><ROW><id>15795914</id><snippet>v</snippet></ROW><ROW><id>15795914</id><snippet>12</snippet></ROW><ROW><id>15795914</id><snippet>v</snippet></ROW><ROW><id>15795914</id><snippet>deck = range(52)

def select_kth(v):
    return (i for i in deck if i % 13 == v)

gens = [select_kth(v) for v in range(13)]
</snippet></ROW><ROW><id>15795914</id><snippet>v</snippet></ROW><ROW><id>15795914</id><snippet> gens = [(lambda v: (i for i in deck if i % 13 == v))(v) for v in range(13)]
</snippet></ROW><ROW><id>15796033</id><snippet>pip install BeautifulSoup requests</snippet></ROW><ROW><id>15796033</id><snippet>import BeautifulSoup
import requests

html = requests.get("http://yahoo.com").text
b = BeautifulSoup.BeautifulSoup(html)
m = b.find(id='masthead')
item = m.findNext('ul')
</snippet></ROW><ROW><id>15796033</id><snippet>dir(m)</snippet></ROW><ROW><id>15796033</id><snippet>m</snippet></ROW><ROW><id>15796033</id><snippet>findNext</snippet></ROW><ROW><id>15796368</id><snippet>input</snippet></ROW><ROW><id>15796368</id><snippet>def guess_number(x):
    count = 0
    while int(raw_input('Guess my number between 1 and 10')) != x:
        count += 1
    else:
        count += 1
        return count
</snippet></ROW><ROW><id>15796368</id><snippet>int(raw_input(...))</snippet></ROW><ROW><id>15796368</id><snippet>input</snippet></ROW><ROW><id>15796368</id><snippet>input</snippet></ROW><ROW><id>15796368</id><snippet>raw_input</snippet></ROW><ROW><id>15797039</id><snippet>def _addNodeToSchema(self,event):
    pt = event.GetPoint()
    item, _ = self.treePanel.tree.HitTest(pt)
    if item:        
        print self.treePanel.tree.GetItemText(item) #this is the label of the node
</snippet></ROW><ROW><id>15797084</id><snippet>import Tkinter as tk
import ImageTk

FILENAME = 'image.png'
root = tk.Tk()
canvas = tk.Canvas(root, width=250, height=250)
canvas.pack()
tk_img = ImageTk.PhotoImage(file = FILENAME)
canvas.create_image(125, 125, image=tk_img)
quit_button = tk.Button(root, text = "Quit", command = root.quit, anchor = 'w',
                    width = 10, activebackground = "#33B5E5")
quit_button_window = canvas.create_window(10, 10, anchor='nw', window=quit_button)    
root.mainloop()
</snippet></ROW><ROW><id>15797247</id><snippet>from BeautifulSoup import BeautifulSoup

with open('Path/to/file', 'r') as content_file:
    content = content_file.read()

soup = BeautifulSoup(content)
[div.extract() for div in soup.findAll('div')]

with open('Path/to/file.modified', 'w') as output_file:
    output_file.write(str(soup))
</snippet></ROW><ROW><id>15797492</id><snippet>One of the main features of debug mode is the display of detailed error pages.
If your app raises an exception when DEBUG is True, Django will display a 
detailed traceback, including a lot of metadata about your environment, such
as all the currently defined Django settings (from settings.py).
</snippet></ROW><ROW><id>15797629</id><snippet>r</snippet></ROW><ROW><id>15797629</id><snippet>print r'\x08'
</snippet></ROW><ROW><id>15797680</id><snippet>self</snippet></ROW><ROW><id>15797680</id><snippet>def getMonthlyInterest(self):
    return self.getBalance() * self.getMonthlyInterestRate()
</snippet></ROW><ROW><id>15797680</id><snippet>print(accountA.getMonthlyInterest()) 
</snippet></ROW><ROW><id>15797680</id><snippet>getMonthlyInterestRate</snippet></ROW><ROW><id>15797680</id><snippet>def getMonthlyInterestRate(self):
    return self.getAnnualInterest() / 12
</snippet></ROW><ROW><id>15797680</id><snippet>class Account:
    def __init__(self, id=0, balance=100.0, annualInterestRate=0.0):
        self.id = id
        self.balance = balance
        self.annualInterestRate = annualInterestRate

    def getMonthlyInterestRate(self):
        return self.annualInterestRate / 12

    def getMonthlyInterest(self):
        return self.balance * self.getMonthlyInterestRate()

    def withdraw(self, amount):
        if amount &lt;= self.balance:
            self.balance -= amount

    def deposit(self, amount):
        self.balance += amount

    def __str__(self):
        return "Account ID : {0.id} Account Ballance : {0.balance} Annual Interest Rate : {0.annualInterestRate}".format(self)
</snippet></ROW><ROW><id>15797680</id><snippet>def main():
    accountA = Account(0,100,0)
    accountA.id = 1234
    accountA.balance = 20500
    accountA.annualInterestRate = 0.375
    print(accountA)
    accountA.withdraw(500)
    accountA.deposit(1500)
    print(accountA)
    print(accountA.getMonthlyInterest()) 
</snippet></ROW><ROW><id>15797680</id><snippet>Account ID : 1234 Account Ballance : 20500 Annual Interest Rate : 0.375
Account ID : 1234 Account Ballance : 21500 Annual Interest Rate : 0.375
671.875
</snippet></ROW><ROW><id>15797686</id><snippet>A = np.matrix([[1],[2],[3]])
#a 3x1 vector
#1
#2
#3

B = np.matrix([[1,1,1]])
#a 1x3 vector
#1 1 1

A-B
#a 3x3 vector
#0 0 0
#1 1 1
#2 2 2
</snippet></ROW><ROW><id>15797686</id><snippet>#1 1 1
#2 2 2
#3 3 3
</snippet></ROW><ROW><id>15797686</id><snippet>#1 1 1
#1 1 1
#1 1 1
</snippet></ROW><ROW><id>15798069</id><snippet>import urllib2
from bs4 import BeautifulSoup
html = urllib2.urlopen( "http://www.google.com" ).read()
soup = BeautifulSoup( html )
</snippet></ROW><ROW><id>15798069</id><snippet>for tag in soup.find_all( "a", { "class" : "gb1" } ):
    print tag["href"]
</snippet></ROW><ROW><id>15798091</id><snippet> (?P&lt;status_code&gt;^[0-9][^|]*)\|(?P&lt;status_message&gt;[^|]+)\|(?P&lt;gateway_message_id&gt;.+)
</snippet></ROW><ROW><id>15798233</id><snippet>x += 1</snippet></ROW><ROW><id>15798233</id><snippet>#Do something with with image found
</snippet></ROW><ROW><id>15798233</id><snippet>do something</snippet></ROW><ROW><id>15798658</id><snippet>application/msword</snippet></ROW><ROW><id>15798718</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>15798718</id><snippet>from itertools import groupby

# this just sets up some byte strings to use, Python 2.x version is below
# instead of this you would use f1 = open('some_file', 'rb').read()
f1 = bytes(int(b, 16) for b in 'FF FF FF FF 00 00 00 00 FF FF 44 43 42 41 FF FF'.split())
f2 = bytes(int(b, 16) for b in '41 42 43 44 00 00 00 00 44 43 42 41 40 39 38 37'.split())

matches = []
for k, g in groupby(range(min(len(f1), len(f2))), key=lambda i: f1[i] == f2[i]):
    if k:
        pos = next(g)
        length = len(list(g)) + 1
        matches.append((pos, length))
</snippet></ROW><ROW><id>15798718</id><snippet>matches = [(next(g), len(list(g))+1)
           for k, g in groupby(range(min(len(f1), len(f2))), key=lambda i: f1[i] == f2[i])
               if k]
</snippet></ROW><ROW><id>15798718</id><snippet>f1 = ''.join(chr(int(b, 16)) for b in 'FF FF FF FF 00 00 00 00 FF FF 44 43 42 41 FF FF'.split())
f2 = ''.join(chr(int(b, 16)) for b in '41 42 43 44 00 00 00 00 44 43 42 41 40 39 38 37'.split())
</snippet></ROW><ROW><id>15798758</id><snippet>with open(path, 'r+b') as f:
    f.seek(position)
    f.write(new_bytes)
</snippet></ROW><ROW><id>15798758</id><snippet>mmap</snippet></ROW><ROW><id>15798758</id><snippet>list</snippet></ROW><ROW><id>15798758</id><snippet>with open(path, 'r+b') as f:
    with contextlib.closing(mmap.mmap(f.fileno(), access=mmap.ACCESS_WRITE)) as m:
        m[first_position] = first_new_byte
        m[other_position] = other_new_byte
        # ...
</snippet></ROW><ROW><id>15798758</id><snippet>struct</snippet></ROW><ROW><id>15798836</id><snippet>&gt;&gt;&gt; record = EventRecord.objects.get(...)
&gt;&gt;&gt; isinstance(record.article, Article)
True
&gt;&gt;&gt; record.article.article_title
u'title here'
</snippet></ROW><ROW><id>15798836</id><snippet>select_related</snippet></ROW><ROW><id>15798836</id><snippet>def classify(request, pk):
    record = EventRecord.objects.filter(pk=pk).select_related()

    # the above returns queryset hence you have to extract the record manually
    if not len(record):
        raise Http404()
    else:
        record = record[0]

    # now use record as usual and no extra queries will be executed
    title = record.article.article_title
    ...
</snippet></ROW><ROW><id>15798850</id><snippet>AF_UNIX</snippet></ROW><ROW><id>15798850</id><snippet>SOCK_DGRAM</snippet></ROW><ROW><id>15798850</id><snippet>reactor.</snippet></ROW><ROW><id>15798850</id><snippet>listenUNIXDatagram</snippet></ROW><ROW><id>15799017</id><snippet>if</snippet></ROW><ROW><id>15799017</id><snippet>class Base(object):
    # Put any methods shared by ANode and BNode here.
    pass

class ANode(Base):
    def a1(self):
        return 'a1'

    def a2(self):
        return 'a2'

class BNode(Base):
    def b1(self):
        return 'b1'

    def b2(self):
        return 'b2'


elbow = ANode()
print(elbow.a1())
# a1

knee = ANode()
print(knee.a1())
# a1

elbow.__class__ = BNode
print(knee.a1())
# a1
print(elbow.b2())
# b2

elbow.a1()
# AttributeError: 'BNode' object has no attribute 'a1'
</snippet></ROW><ROW><id>15799017</id><snippet>if</snippet></ROW><ROW><id>15799017</id><snippet>Node</snippet></ROW><ROW><id>15799017</id><snippet>In [33]: elbow = Node('A')

In [34]: %timeit elbow.a1()
1000000 loops, best of 3: 288 ns per loop
</snippet></ROW><ROW><id>15799017</id><snippet>knee</snippet></ROW><ROW><id>15799017</id><snippet>ANode</snippet></ROW><ROW><id>15799017</id><snippet>In [36]: knee = ANode()

In [37]: %timeit knee.a1()
10000000 loops, best of 3: 126 ns per loop
</snippet></ROW><ROW><id>15799017</id><snippet>In [38]: %timeit elbow.operatingMode = 'B'
10000000 loops, best of 3: 71.7 ns per loop

In [39]: %timeit knee.__class__ = BNode
10000000 loops, best of 3: 78.7 ns per loop
</snippet></ROW><ROW><id>15799017</id><snippet>ANode</snippet></ROW><ROW><id>15799017</id><snippet>BNode</snippet></ROW><ROW><id>15799017</id><snippet>def a1(self):
    return 'a1'

def a2(self):
    return 'a2'

def b1(self):
    return 'b1'

def b2(self):
    return 'b2'

class Base(object):
    # Put the 10 methods share by all modes here
    def common1(self): 
        pass

class ANode(Base):
    a1 = a1
    a2 = a2

class BNode(Base):
    b1 = b1
    b2 = b2

class CNode(Base):
    a1 = a1
    b2 = b2
</snippet></ROW><ROW><id>15799022</id><snippet>sql = 'UPGRADE inventory_server set server_mac = %s where server_name = %s'
</snippet></ROW><ROW><id>15799022</id><snippet>cur.execute(sql, macs, host)
</snippet></ROW><ROW><id>15799139</id><snippet>taskqueue</snippet></ROW><ROW><id>15799139</id><snippet>test_queue</snippet></ROW><ROW><id>15799139</id><snippet>add</snippet></ROW><ROW><id>15799139</id><snippet>add</snippet></ROW><ROW><id>15799143</id><snippet>$MY_ENV_VAR</snippet></ROW><ROW><id>15799143</id><snippet>echo</snippet></ROW><ROW><id>15799143</id><snippet>echo</snippet></ROW><ROW><id>15799143</id><snippet>MY_ENV_VAR</snippet></ROW><ROW><id>15799143</id><snippet>echo</snippet></ROW><ROW><id>15799143</id><snippet>echo</snippet></ROW><ROW><id>15799143</id><snippet>echo</snippet></ROW><ROW><id>15799143</id><snippet>proc = subprocess.Popen(['./program_name', 'arg1', 'arg2', 'etc'], env=environ)
</snippet></ROW><ROW><id>15799143</id><snippet>echo</snippet></ROW><ROW><id>15799143</id><snippet>proc = subprocess.Popen('echo "$MY_ENV_VAR"', env=environ, shell=True)
</snippet></ROW><ROW><id>15799143</id><snippet>subprocess</snippet></ROW><ROW><id>15799143</id><snippet>sh</snippet></ROW><ROW><id>15799143</id><snippet>proc = subprocess.Popen(['echo', os.path.expandvars('$MY_ENV_VAR')])
</snippet></ROW><ROW><id>15799143</id><snippet>proc = subprocess.Popen(['echo', os.environ['MY_ENV_VAR']])
</snippet></ROW><ROW><id>15799242</id><snippet>list</snippet></ROW><ROW><id>15799242</id><snippet>int</snippet></ROW><ROW><id>15799242</id><snippet>file1 = sorted([int(l) for l in open('file1.txt').read().split()])
file2 = sorted([int(l) for l in open('file2.txt').read().split()])

i = 0
for file2_number in file2:
    while i+1 &lt; len(file1) and file1[i+1] &lt; file2_number:
        i += 1
    print file1[i]
</snippet></ROW><ROW><id>15799242</id><snippet>13 35 75</snippet></ROW><ROW><id>15799242</id><snippet>list</snippet></ROW><ROW><id>15799355</id><snippet>import pandas as pd
import datetime as DT

values_a = range(16)
values_b = range(10, 26)
states = ['Georgia']*8 + ['Alabama']*8
cities = ['Atlanta']*4 + ['Savanna']*4 + ['Mobile']*4 + ['Montgomery']*4
dates = pd.DatetimeIndex([DT.date(2012,1,1)+DT.timedelta(days = i) for i in range(4)]*4)
df = pd.DataFrame(
    {'value_a': values_a, 'value_b': values_b},
    index = [states, cities, dates])
df.index.names = ['State', 'City', 'Date']
df.reset_index(level=[0, 1], inplace=True)
df.groupby(['State','City'])
print(df.groupby(['State','City']).resample('2D', how='sum'))
</snippet></ROW><ROW><id>15799355</id><snippet>                               value_a  value_b
State   City       Date                        
Alabama Mobile     2012-01-01       17       37
                   2012-01-03       21       41
        Montgomery 2012-01-01       25       45
                   2012-01-03       29       49
Georgia Atlanta    2012-01-01        1       21
                   2012-01-03        5       25
        Savanna    2012-01-01        9       29
                   2012-01-03       13       33
</snippet></ROW><ROW><id>15799407</id><snippet>bins = np.linspace(0, 1, 10)
v1 = cdf_a(bins)
v2 = cdf_b(bins)
</snippet></ROW><ROW><id>15799407</id><snippet>len(v1) == len(v2)</snippet></ROW><ROW><id>15799407</id><snippet>a, b</snippet></ROW><ROW><id>15799415</id><snippet>status = request.GET('status')
tag = request.GET('tag')
</snippet></ROW><ROW><id>15799415</id><snippet>status = request.GET['status']
tag = request.GET['tag']
</snippet></ROW><ROW><id>15799534</id><snippet>    function round(int timestamp){
        int N = timestamp;                  //The time in time stamp
        int RN;                 //The rounded off time stamp -- wch is our answer
        int n = 300;            //5 min interval in seconds
        int r = N%n;            //The remainder
        int x=N/n;              //the whole number we get after dividing

        if(r/n &lt; 0.5){
            RN = x * n;
        }
        else{
            RN = (x * n)+5;
        }

        return RN;
    }
</snippet></ROW><ROW><id>15799581</id><snippet>regex = re.compile('(?=AUG)(\w+)(?=UAG|UGA|UAA)');
RNA = 'AGCCAUGUAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAGUAGCAUCUCAG'
matches = []
tmp = RNA
while (match = regex.search(tmp)):
    matches.append(match)
    tmp = tmp[match.start()-2:]  #Back up two to get the UG portion.  Shouldn't matter, but safer.

for m in matches:
    print m.group(0)
</snippet></ROW><ROW><id>15799581</id><snippet>AUGUAGUGAUAA</snippet></ROW><ROW><id>15799581</id><snippet>UAG</snippet></ROW><ROW><id>15799581</id><snippet>UAGUGA</snippet></ROW><ROW><id>15799581</id><snippet>UAA</snippet></ROW><ROW><id>15799581</id><snippet>?</snippet></ROW><ROW><id>15799581</id><snippet>AUGAUGUAGUGAUAA</snippet></ROW><ROW><id>15799581</id><snippet>RNA = 'AGCCAUGUAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAGUAGCAUCUCAG'
candidates = []
start = 0

while (RNA.find('AUG', start) &gt; -1):
    start = RNA.find('AUG', start) #Confound python and its lack of assignment returns
    candidates.append(RNA[start+3:])
    start += 1

matches = []

for candidate in candidates:
    for terminator in ['UAG', 'UGA', 'UAA']:
        end = 1;
        while(candidate.find(terminator, end) &gt; -1):
            end = candidate.find(terminator, end)
            matches.append(candidate[:end])
            end += 1

for match in matches:
    print match
</snippet></ROW><ROW><id>15799581</id><snippet>RNA = 'AGCCAUGUAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAGUAGCAUCUCAG'
candidates = []
start = 0

while (RNA.find('AUG', start) &gt; -1):
    start = RNA.find('AUG', start) #Confound python and its lack of assignment returns
    candidates.append((RNA[start+3:], start+3))
    start += 1

matches = []

for candidate in candidates:
    for terminator in ['UAG', 'UGA', 'UAA']:
        end = 1;
        while(candidate[0].find(terminator, end) &gt; -1):
            end = candidate[0].find(terminator, end)
            matches.append((candidate[1], candidate[1] + end, candidate[0][:end]))
            end += 1

for match in matches:
    print "%d - %d: %s" % match
</snippet></ROW><ROW><id>15799581</id><snippet>7 - 49: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAU
7 - 85: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAG
7 - 31: UAGCUAACUCAGGUUACAUGGGGA
7 - 72: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCC
7 - 76: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAA
7 - 11: UAGC
7 - 66: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAA
27 - 49: GGGAUGACCCCGCGACUUGGAU
27 - 85: GGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAG
27 - 31: GGGA
27 - 72: GGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCC
27 - 76: GGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAA
27 - 66: GGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAA
33 - 49: ACCCCGCGACUUGGAU
33 - 85: ACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAG
33 - 72: ACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCC
33 - 76: ACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAA
33 - 66: ACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAA
78 - 85: AUCCGAG
</snippet></ROW><ROW><id>15799581</id><snippet>from operator import itemgetter
matches.sort(key=itemgetter(1))
matches.sort(key=itemgetter(0)) 
</snippet></ROW><ROW><id>15799581</id><snippet>007 - 011: UAGC
007 - 031: UAGCUAACUCAGGUUACAUGGGGA
007 - 049: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAU
007 - 066: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAA
007 - 072: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCC
007 - 076: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAA
007 - 085: UAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAG
027 - 031: GGGA
027 - 049: GGGAUGACCCCGCGACUUGGAU
027 - 066: GGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAA
027 - 072: GGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCC
027 - 076: GGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAA
027 - 085: GGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAG
033 - 049: ACCCCGCGACUUGGAU
033 - 066: ACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAA
033 - 072: ACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCC
033 - 076: ACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAA
033 - 085: ACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAG
078 - 085: AUCCGAG
</snippet></ROW><ROW><id>15799706</id><snippet>urlparse</snippet></ROW><ROW><id>15799787</id><snippet>Option</snippet></ROW><ROW><id>15799787</id><snippet>OptionParser</snippet></ROW><ROW><id>15799787</id><snippet>from optparse import Option, OptionError, OptionParser

class MyOption(Option):
    def _set_opt_strings(self, opts):
        for opt in opts:
            if len(opt) &lt; 2:
                raise OptionError(
                    "invalid option string %r: "
                    "must be at least two characters long" % opt, self)
            elif len(opt) == 2:
                self._short_opts.append(opt)
            else:
                self._long_opts.append(opt)

class MyOptionParser(OptionParser):
    def _process_args(self, largs, rargs, values):
        while rargs:
            arg = rargs[0]
            if arg == "--":
                del rargs[0]
                return
            elif arg[0:2] == "--":
                self._process_long_opt(rargs, values)
            elif arg[:1] == "-" and len(arg) &gt; 1:
                if len(arg) &gt; 2:
                    self._process_long_opt(rargs, values)
                else:
                    self._process_short_opts(rargs, values)
            elif self.allow_interspersed_args:
                largs.append(arg)
                del rargs[0]
            else:
                return 
</snippet></ROW><ROW><id>15799787</id><snippet>parser = MyOptionParser()
parser.add_option(MyOption("-f", "-file", dest="filename",
                 help="write report to FILE", metavar="FILE"))
parser.add_option(MyOption("-q", "-quiet",
                 action="store_false", dest="verbose", default=True,
                 help="don't print status messages to stdout"))
</snippet></ROW><ROW><id>15799787</id><snippet>parser</snippet></ROW><ROW><id>15799787</id><snippet>-file</snippet></ROW><ROW><id>15799787</id><snippet>-fq</snippet></ROW><ROW><id>15799880</id><snippet>import foo as foo_mod

foo = foo_mod.Foo()
</snippet></ROW><ROW><id>15799880</id><snippet>from foo import Foo

foo = Foo()
</snippet></ROW><ROW><id>15799880</id><snippet>foo</snippet></ROW><ROW><id>15799981</id><snippet>("""&lt;cleared_for_sale&gt;%(cleared_for_sale)s&lt;/cleared_for_sale&gt;"""%values).lower()</snippet></ROW><ROW><id>15799981</id><snippet>str(values).replace("T","t").replace("F","f")</snippet></ROW><ROW><id>15800001</id><snippet>import</snippet></ROW><ROW><id>15800001</id><snippet>import os</snippet></ROW><ROW><id>15800001</id><snippet>os.listdir('.')</snippet></ROW><ROW><id>15800001</id><snippet>listdir('.')</snippet></ROW><ROW><id>15800001</id><snippet>from mydir import innerdir
</snippet></ROW><ROW><id>15800001</id><snippet>innerdir</snippet></ROW><ROW><id>15800001</id><snippet>from mydir.innerdir import mymodule</snippet></ROW><ROW><id>15800001</id><snippet>import mydir</snippet></ROW><ROW><id>15800001</id><snippet>mydir.innerdir</snippet></ROW><ROW><id>15800001</id><snippet>import item.subitem.subsubitem</snippet></ROW><ROW><id>15800001</id><snippet>mydir</snippet></ROW><ROW><id>15800001</id><snippet>mydir</snippet></ROW><ROW><id>15800001</id><snippet>mydir</snippet></ROW><ROW><id>15800001</id><snippet>innerdir</snippet></ROW><ROW><id>15800001</id><snippet>from mydir import innerdir</snippet></ROW><ROW><id>15800140</id><snippet>getattr</snippet></ROW><ROW><id>15800140</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; getattr(a, 'any vegetable')()
</snippet></ROW><ROW><id>15800282</id><snippet>pos =+ list_changes[0]
</snippet></ROW><ROW><id>15800282</id><snippet>=+</snippet></ROW><ROW><id>15800282</id><snippet>pos = (+list_changes[0])
</snippet></ROW><ROW><id>15800282</id><snippet>list_changes[0]</snippet></ROW><ROW><id>15800282</id><snippet>+n</snippet></ROW><ROW><id>15800282</id><snippet>n</snippet></ROW><ROW><id>15800282</id><snippet>pos</snippet></ROW><ROW><id>15800282</id><snippet>pos += list_changes[0]
</snippet></ROW><ROW><id>15800282</id><snippet>+=</snippet></ROW><ROW><id>15800282</id><snippet>positive_negative</snippet></ROW><ROW><id>15800282</id><snippet>pos</snippet></ROW><ROW><id>15800282</id><snippet>neg</snippet></ROW><ROW><id>15800282</id><snippet>0.0</snippet></ROW><ROW><id>15800282</id><snippet>list_changes[0]</snippet></ROW><ROW><id>15800282</id><snippet>0.0, list_changes[0]</snippet></ROW><ROW><id>15800282</id><snippet>list_changes[0], 0.0</snippet></ROW><ROW><id>15800282</id><snippet>def positive_negative(list_changes):
    if len(list_changes)== 0:
        return 0.0, 0.0
    else:
        pos, neg = positive_negative(list_changes[1:])
        if list_changes[0] &gt; 0.0:
            pos += list_changes[0]
        else:
            neg += list_changes[0]
        return pos, neg
</snippet></ROW><ROW><id>15800314</id><snippet>import numpy as np
import pandas as pd
import os

fname = 'groupby.h5'

# create a frame
df = pd.DataFrame({'A': ['foo', 'foo', 'foo', 'foo',
                         'bar', 'bar', 'bar', 'bar',
                         'foo', 'foo', 'foo'],
                   'B': ['one', 'one', 'one', 'two',
                         'one', 'one', 'one', 'two',
                         'two', 'two', 'one'],
                   'C': ['dull', 'dull', 'shiny', 'dull',
                         'dull', 'shiny', 'shiny', 'dull',
                         'shiny', 'shiny', 'shiny'],
                   'D': np.random.randn(11),
                   'E': np.random.randn(11),
                   'F': np.random.randn(11)})


# create the store and append, using data_columns where I possibily
# could aggregate
with pd.get_store(fname) as store:
    store.append('df',df,data_columns=['A','B','C'])
    print "store:\n%s" % store

    print "\ndf:\n%s" % store['df']

    # get the groups
    groups = store.unique('df','A')
    print "\ngroups:%s" % groups

    # iterate over the groups and apply my operations
    l = []
    for g in groups:

        grp = store.select('df',where = [ 'A=%s' % g ])

        # this is a regular frame, aggregate however you would like
        l.append(grp[['D','E','F']].sum())


    print "\nresult:\n%s" % pd.concat(l, keys = groups)

os.remove(fname)
</snippet></ROW><ROW><id>15800314</id><snippet>store:
&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: groupby.h5
/df            frame_table  (typ-&gt;appendable,nrows-&gt;11,ncols-&gt;6,indexers-&gt;[index],dc-&gt;[A,B,C])

df:
      A    B      C         D         E         F
0   foo  one   dull -0.815212 -1.195488 -1.346980
1   foo  one   dull -1.111686 -1.814385 -0.974327
2   foo  one  shiny -1.069152 -1.926265  0.360318
3   foo  two   dull -0.472180  0.698369 -1.007010
4   bar  one   dull  1.329867  0.709621  1.877898
5   bar  one  shiny -0.962906  0.489594 -0.663068
6   bar  one  shiny -0.657922 -0.377705  0.065790
7   bar  two   dull -0.172245  1.694245  1.374189
8   foo  two  shiny -0.780877 -2.334895 -2.747404
9   foo  two  shiny -0.257413  0.577804 -0.159316
10  foo  one  shiny  0.737597  1.979373 -0.236070

groups:Index([bar, foo], dtype=object)

result:
bar  D   -0.463206
     E    2.515754
     F    2.654810
foo  D   -3.768923
     E   -4.015488
     F   -6.110789
dtype: float64
</snippet></ROW><ROW><id>15800314</id><snippet>sum</snippet></ROW><ROW><id>15800423</id><snippet>a</snippet></ROW><ROW><id>15800423</id><snippet>c</snippet></ROW><ROW><id>15800423</id><snippet>a</snippet></ROW><ROW><id>15800423</id><snippet>c</snippet></ROW><ROW><id>15800423</id><snippet>a</snippet></ROW><ROW><id>15800423</id><snippet>def neighbor_min(a, c):
    ac = np.concatenate((a[None], c[None]))
    rows, cols = ac.shape[1:]
    ret = np.empty_like(ac)

    # Fill in the center
    win_ac = as_strided(ac, shape=(2, rows-2, cols, 3),
                        strides=ac.strides+ac.strides[1:2])
    win_ac = win_ac[np.ogrid[:2, :rows-2, :cols] +
                    [np.argmin(win_ac[0], axis=2)]]
    win_ac = as_strided(win_ac, shape=(2, rows-2, cols-2, 3),
                        strides=win_ac.strides+win_ac.strides[2:3])
    ret[:, 1:-1, 1:-1] =  win_ac[np.ogrid[:2, :rows-2, :cols-2] +
                                 [np.argmin(win_ac[0], axis=2)]]

    # Fill the top, bottom, left and right borders
    win_ac = as_strided(ac[:, :2, :], shape=(2, 2, cols-2, 3),
                        strides=ac.strides+ac.strides[2:3])
    win_ac = win_ac[np.ogrid[:2, :2, :cols-2] +
                    [np.argmin(win_ac[0], axis=2)]]
    ret[:, 0, 1:-1] = win_ac[:, np.argmin(win_ac[0], axis=0),
                             np.ogrid[:cols-2]]
    win_ac = as_strided(ac[:, -2:, :], shape=(2, 2, cols-2, 3),
                        strides=ac.strides+ac.strides[2:3])
    win_ac = win_ac[np.ogrid[:2, :2, :cols-2] +
                    [np.argmin(win_ac[0], axis=2)]]
    ret[:, -1, 1:-1] = win_ac[:, np.argmin(win_ac[0], axis=0),
                             np.ogrid[:cols-2]]
    win_ac = as_strided(ac[:, :, :2], shape=(2, rows-2, 2, 3),
                        strides=ac.strides+ac.strides[1:2])
    win_ac = win_ac[np.ogrid[:2, :rows-2, :2] +
                    [np.argmin(win_ac[0], axis=2)]]
    ret[:, 1:-1, 0] = win_ac[:, np.ogrid[:rows-2],
                             np.argmin(win_ac[0], axis=1)]
    win_ac = as_strided(ac[:, :, -2:], shape=(2, rows-2, 2, 3),
                        strides=ac.strides+ac.strides[1:2])
    win_ac = win_ac[np.ogrid[:2, :rows-2, :2] +
                    [np.argmin(win_ac[0], axis=2)]]
    ret[:, 1:-1, -1] = win_ac[:, np.ogrid[:rows-2],
                             np.argmin(win_ac[0], axis=1)]
    # Fill the corners
    win_ac = ac[:, :2, :2]
    win_ac = win_ac[:, np.ogrid[:2],
                    np.argmin(win_ac[0], axis=-1)]
    ret[:, 0, 0] = win_ac[:, np.argmin(win_ac[0], axis=-1)]
    win_ac = ac[:, :2, -2:]
    win_ac = win_ac[:, np.ogrid[:2],
                    np.argmin(win_ac[0], axis=-1)]
    ret[:, 0, -1] = win_ac[:, np.argmin(win_ac[0], axis=-1)]
    win_ac = ac[:, -2:, -2:]
    win_ac = win_ac[:, np.ogrid[:2],
                    np.argmin(win_ac[0], axis=-1)]
    ret[:, -1, -1] = win_ac[:, np.argmin(win_ac[0], axis=-1)]
    win_ac = ac[:, -2:, :2]
    win_ac = win_ac[:, np.ogrid[:2],
                    np.argmin(win_ac[0], axis=-1)]
    ret[:, -1, 0] = win_ac[:, np.argmin(win_ac[0], axis=-1)]

    return ret
</snippet></ROW><ROW><id>15800423</id><snippet>(2, rows, cols)</snippet></ROW><ROW><id>15800423</id><snippet>&gt;&gt;&gt; a = np.random.randint(100, size=(5,5))
&gt;&gt;&gt; c = np.random.randint(100, size=(5,5))
&gt;&gt;&gt; a
array([[42, 54, 18, 88, 26],
       [80, 65, 83, 31,  4],
       [51, 52, 18, 88, 52],
       [ 1, 70,  5,  0, 89],
       [47, 34, 27, 67, 68]])
&gt;&gt;&gt; c
array([[94, 94, 29,  6, 76],
       [81, 47, 67, 21, 26],
       [44, 92, 20, 32, 90],
       [81, 25, 32, 68, 25],
       [49, 43, 71, 79, 77]])
&gt;&gt;&gt; neighbor_min(a, c)
array([[[42, 18, 18,  4,  4],
        [42, 18, 18,  4,  4],
        [ 1,  1,  0,  0,  0],
        [ 1,  1,  0,  0,  0],
        [ 1,  1,  0,  0,  0]],

       [[94, 29, 29, 26, 26],
        [94, 29, 29, 26, 26],
        [81, 81, 68, 68, 68],
        [81, 81, 68, 68, 68],
        [81, 81, 68, 68, 68]]])
</snippet></ROW><ROW><id>15800423</id><snippet>def bd_from_ac(a, c):
    b,d = neighbor_min(a, c)
    return a*b, d
</snippet></ROW><ROW><id>15800423</id><snippet>In [3]: a = np.random.rand(1000, 1000)

In [4]: c = np.random.rand(1000, 1000)

In [5]: %timeit bd_from_ac(a, c)
1 loops, best of 3: 570 ms per loop
</snippet></ROW><ROW><id>15800423</id><snippet>min_neighbor</snippet></ROW><ROW><id>15800423</id><snippet>(m, n)</snippet></ROW><ROW><id>15800423</id><snippet>(m-2, n-2, 3, 3)</snippet></ROW><ROW><id>15800423</id><snippet>np.min</snippet></ROW><ROW><id>15800423</id><snippet>(m-2, n-2, 3)</snippet></ROW><ROW><id>15800423</id><snippet>def neighbor_min(a):
    rows, cols = a.shape
    ret = np.empty_like(a)

    # Fill in the center
    win_a = as_strided(a, shape=(m-2, n, 3),
                       strides=a.strides+a.strides[:1])
    win_a = win_a.min(axis=2)
    win_a = as_strided(win_a, shape=(m-2, n-2, 3),
                       strides=win_a.strides+win_a.strides[1:])
    ret[1:-1, 1:-1] = win_a.min(axis=2)

    # Fill the top, bottom, left and right borders
    win_a = as_strided(a[:2, :], shape=(2, cols-2, 3),
                       strides=a.strides+a.strides[1:])
    ret[0, 1:-1] = win_a.min(axis=2).min(axis=0)
    win_a = as_strided(a[-2:, :], shape=(2, cols-2, 3),
                       strides=a.strides+a.strides[1:])
    ret[-1, 1:-1] = win_a.min(axis=2).min(axis=0)
    win_a = as_strided(a[:, :2], shape=(rows-2, 2, 3),
                       strides=a.strides+a.strides[:1])
    ret[1:-1, 0] = win_a.min(axis=2).min(axis=1)
    win_a = as_strided(a[:, -2:], shape=(rows-2, 2, 3),
                       strides=a.strides+a.strides[:1])
    ret[1:-1, -1] = win_a.min(axis=2).min(axis=1)

    # Fill the corners
    ret[0, 0] = a[:2, :2].min()
    ret[0, -1] = a[:2, -2:].min()
    ret[-1, -1] = a[-2:, -2:].min()
    ret[-1, 0] = a[-2:, :2].min()

    return ret
</snippet></ROW><ROW><id>15800423</id><snippet>&gt;&gt;&gt; a = np.random.randint(10, size=(5, 5))
&gt;&gt;&gt; a
array([[0, 3, 1, 8, 9],
       [7, 2, 7, 5, 7],
       [4, 2, 6, 1, 9],
       [2, 8, 1, 2, 3],
       [7, 7, 6, 8, 0]])
&gt;&gt;&gt; neighbor_min(a)
array([[0, 0, 1, 1, 5],
       [0, 0, 1, 1, 1],
       [2, 1, 1, 1, 1],
       [2, 1, 1, 0, 0],
       [2, 1, 1, 0, 0]])
</snippet></ROW><ROW><id>15800423</id><snippet>def bd_from_ac(a, c):
    return a*neighbor_min(a), neighbor_min(c)
</snippet></ROW><ROW><id>15800423</id><snippet>In [2]: m, n = 1000, 1000

In [3]: a = np.random.rand(m, n)

In [4]: c = np.random.rand(m, n)

In [5]: %timeit bd_from_ac(a, c)
1 loops, best of 3: 123 ms per loop
</snippet></ROW><ROW><id>15800702</id><snippet>a = []
counter = 0
while counter &lt; 10:
    c = int(raw_input('Enter an integer: ')) 
    if c % 2 != 0:
        a.append(c)
    counter += 1
print(a)
</snippet></ROW><ROW><id>15800717</id><snippet>append</snippet></ROW><ROW><id>15800717</id><snippet>&gt;&gt;&gt; print x
A    1
B    2
C    3
&gt;&gt;&gt; print x.append( pandas.Series([8, 9], index=["foo", "bar"]))
A      1
B      2
C      3
foo    8
bar    9
</snippet></ROW><ROW><id>15800717</id><snippet>append</snippet></ROW><ROW><id>15800717</id><snippet>concat</snippet></ROW><ROW><id>15800717</id><snippet>df.set_value('newRow', 'newCol', newVal)</snippet></ROW><ROW><id>15800717</id><snippet>df = df.set_value('newRow', 'newCol', newVal)</snippet></ROW><ROW><id>15800748</id><snippet>vals_for_key = [val for source, val in the_dict[key]]
</snippet></ROW><ROW><id>15800748</id><snippet>keyvals_for_source = [(key, val)
                      for key, items in the_dict.iteritems()
                      for src, val in items
                      if src == source]
</snippet></ROW><ROW><id>15800807</id><snippet>position = 10
</snippet></ROW><ROW><id>15800807</id><snippet>enterScores(l, players, 10)
</snippet></ROW><ROW><id>15800857</id><snippet>serv</snippet></ROW><ROW><id>15800857</id><snippet>dict</snippet></ROW><ROW><id>15800857</id><snippet>url = dict([(d['scheme'],d['url']) for d in serv])['urn:x-esri:specification:ServiceType:WMS']
</snippet></ROW><ROW><id>15800857</id><snippet>servdict = dict([(d['scheme'],d['url']) for d in serv])
url = servdict['urn:x-esri:specification:ServiceType:WMS']
</snippet></ROW><ROW><id>15800909</id><snippet>(lambda s: {"len" : len(s), "slice" : s[2:4]})(u'hello')
</snippet></ROW><ROW><id>15801053</id><snippet>a() or (b(),a())[0] or (c(),b(),a())[0]
</snippet></ROW><ROW><id>15801053</id><snippet>def a(ret):
    print 'run a, a succeeded?', ret
    return ret

def b(ret):
    print 'run b, b succeeded?', ret
    return ret

def c(ret):
    print 'run c, c succeeded?', ret
    return ret
</snippet></ROW><ROW><id>15801053</id><snippet>a(False) or (b(False),a(False))[0] or (c(True),b(False),a(False))[0]
</snippet></ROW><ROW><id>15801053</id><snippet>run a, a succeeded? False
run b, b succeeded? False
run a, a succeeded? False
run c, c succeeded? True
run b, b succeeded? False
run a, a succeeded? False
</snippet></ROW><ROW><id>15801053</id><snippet>a(False) or (b(True),a(False))[0] or (c(True),b(True),a(False))[0]
</snippet></ROW><ROW><id>15801053</id><snippet>run a, a succeeded? False
run b, b succeeded? True
run a, a succeeded? False
</snippet></ROW><ROW><id>15801156</id><snippet>i['key']</snippet></ROW><ROW><id>15801156</id><snippet>key</snippet></ROW><ROW><id>15801156</id><snippet>alldata[i][key] &lt; alldata[j - 1][key]</snippet></ROW><ROW><id>15801156</id><snippet>j</snippet></ROW><ROW><id>15801156</id><snippet>def insertionsort(alldata, key):
    for i in alldata :
        temp = alldata[i]
        j = i
        while j &gt; 0 and alldata[i][key] &lt; alldata[j - 1][key]:
           alldata[j] = alldata[j - 1]
           j -= 1
        alldata[j] = temp
</snippet></ROW><ROW><id>15801216</id><snippet>class Life(pygame.sprite.Sprite):
    def __init__(self, location):
        super(Life, self).__init__()
        self.image = pygame.image.load('Spaceship_life.png')
        self.rect = self.image.get_rect()
        self.rect.left, self.rect.top = location
</snippet></ROW><ROW><id>15801233</id><snippet>def grouper(iterable):
    prev = None
    group = []
    for item in iterable:
        if not prev or item - prev &lt;= 15:
            group.append(item)
        else:
            yield group
            group = [item]
        prev = item
    if group:
        yield group

numbers = [123, 124, 128, 160, 167, 213, 215, 230, 245, 255, 257, 400, 401, 402, 430]
dict(enumerate(grouper(numbers), 1))
</snippet></ROW><ROW><id>15801233</id><snippet>{1: [123, 124, 128],
 2: [160, 167],
 3: [213, 215, 230, 245, 255, 257],
 4: [400, 401, 402],
 5: [430]}
</snippet></ROW><ROW><id>15801233</id><snippet>enumerate</snippet></ROW><ROW><id>15801346</id><snippet>pixels = img.load() # create the pixel map

for i in range(img.size[0]):    # for every pixel:
    for j in range(img.size[1]):
        pixels[i,j] = (i, j, 100) # set the colour accordingly
</snippet></ROW><ROW><id>15801718</id><snippet>conftest.py</snippet></ROW><ROW><id>15801718</id><snippet>#configs.py
def pytest_addoption(parser):
    parser.addoption('--env', 
    dest='testenv',
    choices=["qa","aws","prod"],
    default='qa', 
    help='Specify environment: "qa", "aws", "prod".')

@pytest.fixture(scope='session')
def testenv(request):
    return request.config.option.testenv
</snippet></ROW><ROW><id>15801718</id><snippet>runner.py</snippet></ROW><ROW><id>15801718</id><snippet>py.test</snippet></ROW><ROW><id>15801718</id><snippet>#runner.py
import pytest
import sys
import configs

def main():    
    plgns = [configs]
    pytest.main(sys.argv[1:], plugins=plgns)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>15801718</id><snippet>python runner.py --env prod -m selenium</snippet></ROW><ROW><id>15801736</id><snippet>for key, value in self.data.iteritems()
</snippet></ROW><ROW><id>15801771</id><snippet>&lt;wdtf:observationMember&gt;</snippet></ROW><ROW><id>15801771</id><snippet>&lt;wdtf:observationMember xmlns:wdtf="some-uri"&gt;
</snippet></ROW><ROW><id>15801771</id><snippet>gml</snippet></ROW><ROW><id>15801771</id><snippet>om</snippet></ROW><ROW><id>15801833</id><snippet>python.org 64-bit/32-bit installer</snippet></ROW><ROW><id>15801833</id><snippet>python</snippet></ROW><ROW><id>15801833</id><snippet>pip</snippet></ROW><ROW><id>15801833</id><snippet>pip install PIL</snippet></ROW><ROW><id>15801833</id><snippet>&gt;&gt;&gt; import PIL
&gt;&gt;&gt; import Image
&gt;&gt;&gt; import _imaging
</snippet></ROW><ROW><id>15801850</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; 10**math.floor(math.log10(.009))
0.001
&gt;&gt;&gt; 10**math.floor(math.log10(.06)) 
0.01
&gt;&gt;&gt; 10**math.floor(math.log10(1234))
1000.0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15801873</id><snippet>var data = {
    screening: '1',
    assistance: 'wheelchair access',
    guests: [
        {
            first: 'John',
            last: 'Smith'
        },
        {
            first: 'Dave',
            last: 'Smith'
        }
    ]
};

$.ajax({
    type: 'POST',
    url: window.location.href,
    data: JSON.stringify(response),
    dataType: 'json',
    contentType: 'application/json; charset=utf-8'
}).done(function(msg) {
    alert("Data Saved: " + msg);
});
</snippet></ROW><ROW><id>15801873</id><snippet>request.json</snippet></ROW><ROW><id>15801894</id><snippet>&lt;</snippet></ROW><ROW><id>15801894</id><snippet>if x &lt; y:
    # x is before y
</snippet></ROW><ROW><id>15801894</id><snippet>&gt;=</snippet></ROW><ROW><id>15801894</id><snippet>if not (x &gt;= y):
    # x is before y
</snippet></ROW><ROW><id>15801932</id><snippet>new_adj = [x for x in adj if gx.d[x][2] == 'white']
</snippet></ROW><ROW><id>15802141</id><snippet>from django.utils.safestring import mark_safe

@register.filter(name='shorten')
def shorten(content, post_id):
    #will show up to the first 500 characters of the post content
    if len(content) &gt; 500:
        output = "{0}... &lt;a href='/entry/{1}'&gt;(cont.)&lt;/a&gt;".format(content[:500], post_id)
    else:
        output = "{0}".format(content)

    return mark_safe(output)
</snippet></ROW><ROW><id>15802395</id><snippet>LevelMgr</snippet></ROW><ROW><id>15802395</id><snippet>__init__</snippet></ROW><ROW><id>15802395</id><snippet>class LevelMgr:
    def __init__(self, window):
        self.window = window
    def drawLevel(self):
        ...
            for t in col:
                self.window.create_rectangle(currentX, currentY, 32, 32, fill="blue")
</snippet></ROW><ROW><id>15802395</id><snippet>from driver import window
</snippet></ROW><ROW><id>15802395</id><snippet>lev = Level.LevelMgr(window)
</snippet></ROW><ROW><id>15802395</id><snippet>window</snippet></ROW><ROW><id>15802395</id><snippet>Driver.py</snippet></ROW><ROW><id>15803036</id><snippet>all_zero_clusters = [zero_cluster for p in range(len(flat_cluster_guess))]
</snippet></ROW><ROW><id>15803036</id><snippet>len(flat_cluster_guess)</snippet></ROW><ROW><id>15803036</id><snippet>[0.0 for i in self.clusters]</snippet></ROW><ROW><id>15803036</id><snippet>all_zero_clusters = [[0.0 for i in self.clusters] for p in range(len(flat_cluster_guess))]
</snippet></ROW><ROW><id>15803036</id><snippet>all_zero_clusters = [[0] * len(self.clusters) for p in range(len(flat_cluster_guess))]
</snippet></ROW><ROW><id>15803103</id><snippet>StudentDictionary</snippet></ROW><ROW><id>15803103</id><snippet>for key in StudentDictionary:
</snippet></ROW><ROW><id>15803103</id><snippet>for key, value in StudentDictionary.items():
</snippet></ROW><ROW><id>15803165</id><snippet>place</snippet></ROW><ROW><id>15803165</id><snippet>from Tkinter import *

root=Tk()

sizex = 600
sizey = 400
posx  = 0
posy  = 0
root.wm_geometry("%dx%d+%d+%d" % (sizex, sizey, posx, posy))

labels = []

def myClick():
    del labels[:] # remove any previous labels from if the callback was called before
    myframe=Frame(root,width=400,height=300,bd=2,relief=GROOVE)
    myframe.place(x=10,y=10)
    x=myvalue.get()
    value=int(x)
    for i in range(value):
        labels.append(Label(myframe,text=" mytext "+str(i)))
        labels[i].place(x=10,y=10+(30*i))
        Button(myframe,text="Accept").place(x=70,y=10+(30*i))

def myClick2():
    if len(labels) &gt; 0:
        labels[0].config(text="Click2!")
    if len(labels) &gt; 1:
        labels[1].config(text="Click2!!")

mybutton=Button(root,text="OK",command=myClick)
mybutton.place(x=420,y=10)

mybutton2=Button(root,text="Change",command=myClick2)
mybutton2.place(x=420,y=80)

myvalue=Entry(root)
myvalue.place(x=450,y=10)

root.mainloop()
</snippet></ROW><ROW><id>15803165</id><snippet>Mylabel=Label(myframe,text=" mytext "+str(i)).place(x=10,y=10+(30*i))</snippet></ROW><ROW><id>15803165</id><snippet>Mylabel</snippet></ROW><ROW><id>15803165</id><snippet>place</snippet></ROW><ROW><id>15803165</id><snippet>place</snippet></ROW><ROW><id>15803205</id><snippet>d[numbers] += 1
</snippet></ROW><ROW><id>15803205</id><snippet>d[i] += 1
</snippet></ROW><ROW><id>15803292</id><snippet>A =numpy.array([[[0, 0, 0]]])
</snippet></ROW><ROW><id>15803292</id><snippet>m= 3</snippet></ROW><ROW><id>15803292</id><snippet>n= 3</snippet></ROW><ROW><id>15803292</id><snippet>mxnx3</snippet></ROW><ROW><id>15803292</id><snippet>&gt;&gt;&gt; a=tile((numpy.array([[[0, 0, 0]]])),(3,3,1))
&gt;&gt;&gt; resol_val1 = a.shape
&gt;&gt;&gt; resol_val1 
(3, 3, 3)
&gt;&gt;&gt; a
array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]])
</snippet></ROW><ROW><id>15803311</id><snippet>configure_traits</snippet></ROW><ROW><id>15803311</id><snippet>result = settings_w.configure_traits(kind="livemodal")

if result:
    print "The user pressed OK."
else:
    print "The user pressed Cancel or closed the window."
</snippet></ROW><ROW><id>15803329</id><snippet>return</snippet></ROW><ROW><id>15803329</id><snippet>return</snippet></ROW><ROW><id>15803329</id><snippet>if</snippet></ROW><ROW><id>15803612</id><snippet>&gt;&gt;&gt; osize = (320, 320, 1)
&gt;&gt;&gt; img_o = numpy.tile(fill_value, osize)
&gt;&gt;&gt; img_o.shape
(320, 320, 3)
</snippet></ROW><ROW><id>15804020</id><snippet>lxml</snippet></ROW><ROW><id>15804020</id><snippet>etree</snippet></ROW><ROW><id>15804020</id><snippet>&lt;test&gt;
  &lt;test1&gt;
    error
  &lt;/test1&gt;
  &lt;test2&gt;  
    &lt;test3&gt;
      error
    &lt;/test3&gt;
  &lt;/test2&gt;
&lt;/test&gt;
</snippet></ROW><ROW><id>15804020</id><snippet>&gt;&gt;&gt; import lxml.etree as etree
&gt;&gt;&gt; for event, element in etree.iterparse("test.xml"):
...   # Print the tag of a matching element
...   if element.text.strip() == "error":
...     print element.tag
... 
test1
test3
</snippet></ROW><ROW><id>15804020</id><snippet>xml.etree.cElementTree</snippet></ROW><ROW><id>15804020</id><snippet>lxml.etree</snippet></ROW><ROW><id>15804020</id><snippet>lxml.etree</snippet></ROW><ROW><id>15804284</id><snippet>configure --enable-python3interp</snippet></ROW><ROW><id>15804720</id><snippet>QProcess.execute</snippet></ROW><ROW><id>15804720</id><snippet>QProcess</snippet></ROW><ROW><id>15804720</id><snippet>QProcess.start()</snippet></ROW><ROW><id>15804720</id><snippet>started()</snippet></ROW><ROW><id>15804720</id><snippet>finished()</snippet></ROW><ROW><id>15805271</id><snippet>import argparse
parser = argparse.ArgumentParser()

parser.add_argument("-t","--time")
parser.add_argument("-x","--expression")
parser.add_argument("-n","--name")
parser.add_argument("-f", "--file")

args = parser.parse_args()

has_file = args.file is not None
has_txn = None not in frozenset([args.time, args.expression, args.name])
assert (has_file ^ has_txn), "File or time, expression and name must be provided"
</snippet></ROW><ROW><id>15805499</id><snippet>threading.Thread</snippet></ROW><ROW><id>15805499</id><snippet>__getattr__</snippet></ROW><ROW><id>15805499</id><snippet>def __getattr__(self, attr):
    #while not self.AssociationEstablished:
    #    time.sleep(0.001)
    obj = eval(attr)

    # do some stuff

    return obj
</snippet></ROW><ROW><id>15805499</id><snippet>if thread.__pydevd_id__ raises AttributeError, thread.__pydevd_id__ = stuff</snippet></ROW><ROW><id>15805499</id><snippet>def __getattr__(self, attr):
    #while not self.AssociationEstablished:
    #    time.sleep(0.001)
    try:
        obj = eval(attr)
    except NameError:
        raise AttributeError

    # do some stuff

    return obj
</snippet></ROW><ROW><id>15805499</id><snippet>__getattr__</snippet></ROW><ROW><id>15805584</id><snippet>datetime</snippet></ROW><ROW><id>15805584</id><snippet>datetime()</snippet></ROW><ROW><id>15805584</id><snippet>TypeError: 'module' object is not callable</snippet></ROW><ROW><id>15805584</id><snippet>import datetime
def test(timestamp):
    xt = datetime(2013, 4,4) # Problem is this line.
    dt = datetime.strptime(timestamp, '%d/%m/%Y %H:%M:%S')
    print (xt,dt)

test('04/04/2013 08:37:20')
</snippet></ROW><ROW><id>15805584</id><snippet>xt = datetime.datetime(2013,4,4)
</snippet></ROW><ROW><id>15805584</id><snippet>from datetime import datetime</snippet></ROW><ROW><id>15805584</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>15805610</id><snippet>ALL</snippet></ROW><ROW><id>15805610</id><snippet>from Tkinter import *

root = Tk()
canvas = Canvas(root, width=200, height=200)
canvas.create_rectangle(10, 10, 60, 60)
canvas.create_rectangle(70, 70, 120, 120)
canvas.pack()
canvas.move(ALL, 50, 50)
root.mainloop()
</snippet></ROW><ROW><id>15805687</id><snippet>[(0, 0), (4, 4), (4, 4), (1, 1), (0, 0)]</snippet></ROW><ROW><id>15805687</id><snippet>[(0, 0), (4, 4), (1, 1), (0, 0)]</snippet></ROW><ROW><id>15805687</id><snippet>def filter_duplicates(items):
  """A generator that ignores subsequent entires that are duplicates

  &gt;&gt;&gt; items = [0, 1, 1, 2, 3, 3, 3, 4, 1]
  &gt;&gt;&gt; list(filter_duplicates(items))
  [0, 1, 2, 3, 4, 1]

  """
  prev = None
  for item in items:
    if item != prev:
        yield item 
        prev = item
</snippet></ROW><ROW><id>15805687</id><snippet>yield</snippet></ROW><ROW><id>15805687</id><snippet>return</snippet></ROW><ROW><id>15805687</id><snippet>def pairs(iterable):
    """A generate over pairs of items in iterable

    &gt;&gt;&gt; list(pairs([0, 8, 2, 1, 3]))
    [(0, 8), (8, 2), (2, 1), (1, 3)]

    """
    iterator = iter(iterable)
    prev = next(iterator)
    for j in iterator:
        yield prev, j
        prev = j
</snippet></ROW><ROW><id>15805687</id><snippet>filter_duplicates</snippet></ROW><ROW><id>15805687</id><snippet>prev</snippet></ROW><ROW><id>15805687</id><snippet>next()</snippet></ROW><ROW><id>15805687</id><snippet>for (x1, y1), (x2, y2) in pairs(filter_duplicates(coords)):
   distance = getDistance(x1, y1, x2, y2)
</snippet></ROW><ROW><id>15805803</id><snippet>from itertools import islice
for x in islice(L, 1, None): # start=1, stop=None
    print(x)
</snippet></ROW><ROW><id>15805813</id><snippet>cas</snippet></ROW><ROW><id>15805813</id><snippet>gets</snippet></ROW><ROW><id>15805940</id><snippet>SET %s = %s</snippet></ROW><ROW><id>15805940</id><snippet>%s</snippet></ROW><ROW><id>15805940</id><snippet>'blog'</snippet></ROW><ROW><id>15805940</id><snippet>blog</snippet></ROW><ROW><id>15805940</id><snippet>`blog`</snippet></ROW><ROW><id>15805940</id><snippet>cursor.execute("""update websites SET `%s` = %%s where weblink = %%s""" % key, (value,x))
</snippet></ROW><ROW><id>15805940</id><snippet>cursor.execute("update websites SET `" + key + 
    "` = %s where weblink = %s", (value,x))
</snippet></ROW><ROW><id>15805940</id><snippet>key</snippet></ROW><ROW><id>15805940</id><snippet>`</snippet></ROW><ROW><id>15806096</id><snippet>print</snippet></ROW><ROW><id>15806096</id><snippet>str()</snippet></ROW><ROW><id>15806096</id><snippet>repr()</snippet></ROW><ROW><id>15806096</id><snippet>&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; print now
2013-04-04 10:28:10.029566
&gt;&gt;&gt; print (now,)  # tuple
(datetime.datetime(2013, 4, 4, 10, 28, 10, 29566),)
&gt;&gt;&gt; print repr(now)
datetime.datetime(2013, 4, 4, 10, 28, 10, 29566)
</snippet></ROW><ROW><id>15806096</id><snippet>datetime</snippet></ROW><ROW><id>15806216</id><snippet>p4 sync</snippet></ROW><ROW><id>15806216</id><snippet>p4 fstat //depot/path/yourfile |grep headRev | sed 's/.*headRev \(.*\)/\1/'</snippet></ROW><ROW><id>15806216</id><snippet>p4 filelog</snippet></ROW><ROW><id>15806216</id><snippet>p4 fstat</snippet></ROW><ROW><id>15806468</id><snippet>[sublist for i, sublist in enumerate(yourlist)
    if i + 1 == len(yourlist) or (sublist[0], sublist[4]) != (yourlist[i+1][0], yourlist[i + 1][4])]
</snippet></ROW><ROW><id>15806468</id><snippet>&gt;&gt;&gt; [sublist for i, sublist in enumerate(yourlist)
...     if i + 1 == len(yourlist) or (sublist[0], sublist[4]) != (yourlist[i+1][0], yourlist[i + 1][4])]
[[1, 2, 3, 2, 5], [1, 2, 3, 4, 6]]
</snippet></ROW><ROW><id>15806505</id><snippet>{% load name_of_file_tags_are_in %}</snippet></ROW><ROW><id>15806889</id><snippet>def your_view(request, id):
    #change the current make_default into False
    default = SourceInfo.objects.get(user=request.user, make_default=True)
    default.make_default = False
    default.save()

    #the new make_default for user
    source = get_object_or_404(SourceInfo, pk=id)
    source.make_default = True
    source.save()

    .................
</snippet></ROW><ROW><id>15806924</id><snippet>res.readlines()</snippet></ROW><ROW><id>15806924</id><snippet>status_msg = '\n'.join(res.readlines()[1:])
</snippet></ROW><ROW><id>15807315</id><snippet>class A</snippet></ROW><ROW><id>15807315</id><snippet>withdraw</snippet></ROW><ROW><id>15807315</id><snippet>class Account:
    def __init__(self,id=0):
        self.__id = id
        self.__balance = 0
        self.__annualInterestRate = 0

    def getid(self):
        return self.__id

    def getbalance(self):
        return self.__balance

    def getannualInterestRate(self):
        return self.__annualInterestRate

    def setid(self,id):
        self.__id = id

    def setbalance(self, balance):
        self.__balance = balance

    def setannualInterestRate(self, rate):
        self.__annualInterestRate = rate

    def getMonthlyInterestRate(self):
        return self.__annualInterestRate/12

    def getMonthlyInterest(self):
        return self.__balance * self.getMonthlyInterestRate()

    def withdraw(self, amount):
        if amount &lt;= self.__balance:
            self.__balance -= amount
            return True
        else:
            return False
</snippet></ROW><ROW><id>15807592</id><snippet>if '$' in s</snippet></ROW><ROW><id>15807592</id><snippet>s</snippet></ROW><ROW><id>15807592</id><snippet>$</snippet></ROW><ROW><id>15807592</id><snippet>            for r in found_dic[key]:
               print "  ",r
</snippet></ROW><ROW><id>15807592</id><snippet>            for r in found_dic[key]:
                if key != "include" or '$' in r:
                    print "  ",r
</snippet></ROW><ROW><id>15807612</id><snippet>from gi.repository import Gtk
from gi.repository import GdkPixbuf

store = Gtk.ListStore(str, GdkPixbuf.Pixbuf)

pb = GdkPixbuf.Pixbuf.new_from_file_at_size("picture.png", 32, 32)
store.append(["Test", pb])

combo = Gtk.ComboBox.new_with_model(store)

renderer = Gtk.CellRendererText()
combo.pack_start(renderer, True)
combo.add_attribute(renderer, "text", 0)

renderer = Gtk.CellRendererPixbuf()
combo.pack_start(renderer, False)
combo.add_attribute(renderer, "pixbuf", 1)

window = Gtk.Window()
window.add(combo)
window.show_all()

window.connect('delete-event', lambda w, e: Gtk.main_quit())

Gtk.main()
</snippet></ROW><ROW><id>15807934</id><snippet>def to_int(lst):
    for i in lst:
        if isinstance(i, list):
            yield list(to_int(i))
        else:
            yield int(i)
</snippet></ROW><ROW><id>15807934</id><snippet>&gt;&gt;&gt; li = ['0', ['1', '2'], ['3', ['4', '5'], '6', ['7'], '8'], '9']
&gt;&gt;&gt; list(to_int(li))
[0, [1, 2], [3, [4, 5], 6, [7], 8], 9]
</snippet></ROW><ROW><id>15807934</id><snippet>int</snippet></ROW><ROW><id>15807934</id><snippet>def deep_map(lst, f=int):  # the parameter `f` is the function
    for i in lst:
        if isinstance(i, collections.Iterable) and not isinstance(i, str):
            yield list(deep_map(i, f))
        else:
            yield f(i)
</snippet></ROW><ROW><id>15807981</id><snippet>output = ['a', 'b', 'c', 'd', 'e',]

# format each column (len(a)) with a width of 10 spaces
width = [10]*len(a)

# write it out, using the join() function
with open('output_example', 'w') as f:
    f.write(''.join('%*s' % i for i in zip(width, output)))
</snippet></ROW><ROW><id>15807981</id><snippet>'         a         b         c         d         e'
</snippet></ROW><ROW><id>15807981</id><snippet>width</snippet></ROW><ROW><id>15807981</id><snippet>len(a)</snippet></ROW><ROW><id>15808015</id><snippet>W:  4,0: Statement seems to have no effect
</snippet></ROW><ROW><id>15808015</id><snippet>f
</snippet></ROW><ROW><id>15808015</id><snippet>f()
</snippet></ROW><ROW><id>15808158</id><snippet>li = ['0', ['1', '2'], ['3', ['4', '5'], '6', ['7'], '8'], '9']
def to_int(lst, path=[]):
    for i, j in enumerate(lst):
        if isinstance(j, list):
            yield list(to_int(j, path+[i]))
        else:
            yield int(j), path+[i]

print(list(to_int(li)))
</snippet></ROW><ROW><id>15808158</id><snippet>li = ['0', ['1', '2'], ['3', ['4', '5'], '6', ['7'], '8'], '9']
def to_int(lst, path=[]):
    for i, j in enumerate(lst):
        if isinstance(j, list):
            yield from to_int(j, path+[i])
        else:
            yield int(j), path+[i]

for item in to_int(li):
    print (item)
</snippet></ROW><ROW><id>15808158</id><snippet>yield from</snippet></ROW><ROW><id>15808158</id><snippet>li = ['0', ['1', '2'], ['3', ['4', '5'], '6', ['7'], '8'], '9']
def to_int(lst, path=[]):
    for i, j in enumerate(lst):
        if isinstance(j, list):
            for item in to_int(j, path+[i]): yield item
        else:
            yield int(j), path+[i]

for item in to_int(li):
    print (item)
</snippet></ROW><ROW><id>15808163</id><snippet>def main():
    op = input("Enter an operation: ")
    for i in range(1,len(op)):
        n = n[0]  # no n here yet so n[0] won't work
        y = y[2]  # no y here yet so y[2] won't work
</snippet></ROW><ROW><id>15808163</id><snippet>def main():
    op = input("Enter an operation: ")
    i = op[1]
    n = int(op[0])
    y = int(op[2])

    if i == "+":
        result = add(n, y)
    print("Result: ", result)
    print("Bye")
</snippet></ROW><ROW><id>15808652</id><snippet>pip install atpy
</snippet></ROW><ROW><id>15808652</id><snippet>pip</snippet></ROW><ROW><id>15808842</id><snippet>datetime.datetime.utcnow()
# returns datetime.datetime(2013, 4, 4, 10, 39, 1, 303329)
</snippet></ROW><ROW><id>15808842</id><snippet>tzinfo</snippet></ROW><ROW><id>15808842</id><snippet>.replace(tzinfo=tzutc())
# returns datetime.datetime(2013, 4, 4, 10, 39, 1, 303329, tzinfo=&lt;UTC&gt;)
</snippet></ROW><ROW><id>15808842</id><snippet>datetime.datetime.now(pytz.utc)
# returns datetime.datetime(2013, 4, 4, 10, 39, 1, 303329, tzinfo=&lt;UTC&gt;)
</snippet></ROW><ROW><id>15808905</id><snippet>os.path.dirname</snippet></ROW><ROW><id>15808905</id><snippet>os.path.join</snippet></ROW><ROW><id>15808905</id><snippet>os.path.join(os.path.dirname(f), siblingname)
</snippet></ROW><ROW><id>15809074</id><snippet>path = "{0}/app_name/fixtures/book.json".format(settings.PROJECT_ROOT)
with open(path, "w") as out:
    json_serializer.serialize(Book.objects.all(), stream=out)
</snippet></ROW><ROW><id>15809107</id><snippet>class Meta:
        app_label = 'sms'
</snippet></ROW><ROW><id>15809302</id><snippet>length1 = int(raw_input('enter side 1\n'))
length2 = int(raw_input('enter side 2\n'))
length3 = int(raw_input('enter side 3\n'))
</snippet></ROW><ROW><id>15809302</id><snippet>def triangle_check(l1,l2,l3):
    if (l1&gt;l2+l3) or (l2&gt;l1+l3) or (l3&gt;l1+l2):
        print 'No, the lengths wont form a triangle'
    elif (l1==l2+l3) or (l2==l1+l3) or (l3==l1+l2):
        print 'yes, it can form a degenerated triangle'
    else:
        print 'Yes, a triangle can be formed out of it'

length1 = int(raw_input('enter side 1\n'))
length2 = int(raw_input('enter side 2\n'))
length3 = int(raw_input('enter side 3\n'))

triangle_check(length1,length2,length3)
</snippet></ROW><ROW><id>15809302</id><snippet>def check_valid_triangle(sides):
    for side in sides:
        other_sides = (sum(sides)-side)
        if side &gt; other_sides:
            return 'No'
        elif side == other_sides:
            return 'Degenerated'
    else:
        return 'Yes'

sides = []
for i in range(3):
    sides.append(int(raw_input('Enter a side:\n')))

print check_valid_triangle(sides)
</snippet></ROW><ROW><id>15809390</id><snippet>return</snippet></ROW><ROW><id>15809390</id><snippet>yield</snippet></ROW><ROW><id>15809390</id><snippet>return</snippet></ROW><ROW><id>15809390</id><snippet>if response.error:
    self.error("Error while retrieving the status")
    self.finish()
    yield error
    return
</snippet></ROW><ROW><id>15809390</id><snippet>yield</snippet></ROW><ROW><id>15809390</id><snippet>for line in response.body.split("\n"):
    if line != "": 
        #net = int(line.split(" ")[1])
        #sens = int(line.split(" ")[2])
        #stype = int(line.split(" ")[3])
        value = int(line.split(" ")[4])
        print value
        yield value
        return
</snippet></ROW><ROW><id>15809599</id><snippet>def property_functions(**properties):
    def construct_method(prop):
        def f_n(self):
            return foo(getattr(self, prop))
        return f_n

    def class_decorator(cls):
        for name, prop in properties.iteritems():
            setattr(cls, name, construct_method(prop))

        return cls

    return class_decorator
</snippet></ROW><ROW><id>15809599</id><snippet>@property_functions(f_1='property_1', f_2='property_2')
class MyClass(object):
    property_1 = 'foo'
    property_2 = 'bar'
</snippet></ROW><ROW><id>15809599</id><snippet>&gt;&gt;&gt; def foo(value): print value
... 
&gt;&gt;&gt; @property_functions(f_1='property_1', f_2='property_2')
... class MyClass(object):
...     property_1 = 'foo'
...     property_2 = 'bar'
... 
&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; mc.f_1()
foo
&gt;&gt;&gt; mc.f_2()
bar
</snippet></ROW><ROW><id>15809769</id><snippet>destination.close()</snippet></ROW><ROW><id>15809769</id><snippet>.write()</snippet></ROW><ROW><id>15809769</id><snippet>flush()</snippet></ROW><ROW><id>15809769</id><snippet>close()</snippet></ROW><ROW><id>15809831</id><snippet>1x1x3 matrix</snippet></ROW><ROW><id>15809831</id><snippet>import numpy
fill_value = numpy.array([[[0, 0, 0]]])
</snippet></ROW><ROW><id>15809831</id><snippet>resol_val = fill_value.shape
</snippet></ROW><ROW><id>15809831</id><snippet>(1, 1, 3)</snippet></ROW><ROW><id>15809886</id><snippet>with open(pickle_file) as f:
    unpickled = []
    while True:
        try:
            unpickled.append(pickle.load(f))
        except EOFError:
            break
</snippet></ROW><ROW><id>15809907</id><snippet>hasattr()</snippet></ROW><ROW><id>15809907</id><snippet>if hasattr(my_module, 'exists_method'):
    print 'Method found!"
</snippet></ROW><ROW><id>15809907</id><snippet>my_module.exists_method</snippet></ROW><ROW><id>15809907</id><snippet>my_module</snippet></ROW><ROW><id>15809907</id><snippet>exists_method</snippet></ROW><ROW><id>15809907</id><snippet>globals()</snippet></ROW><ROW><id>15809907</id><snippet>if 'exists_method' in globals():
    print 'Method found!'
</snippet></ROW><ROW><id>15809917</id><snippet>class CustomForm(forms.ModelForm):
    author = forms.CharField()

    def clean(self):
        cleaned_data = super(CustomForm, self).clean()
        author = cleaned_data.get("author")

        if not author:
            raise forms.ValidationError("Please enter an author")

        data = Author.objects.create(name=author)

        cleaned_data['author'] = data

        return cleaned_data

    class Meta:
        model = Book
        fields = ('author','title',)
</snippet></ROW><ROW><id>15810044</id><snippet>r'href\s*=\s*(.+)\s+onclick\s*='
</snippet></ROW><ROW><id>15810044</id><snippet>import re
text = open('test.txt').read() # contains your string

urls = re.findall(r'href\s*=\s*(.+?)\s+onclick\s*=', text)
for url in urls:
    print url.replace('\\','')
</snippet></ROW><ROW><id>15810044</id><snippet>"http://www.facebook.com/name"
</snippet></ROW><ROW><id>15810044</id><snippet>href    # match href
\s*     # match 0 or more spaces
=       # match =
\s*     # match 0 or more spaces
(.+?)   # match any character (non - greedy)
\s+     # match 1 or more spaces
onclick # match onclick
\s*     # match 0 or more spaces
=       # match =
</snippet></ROW><ROW><id>15810105</id><snippet>f.close()</snippet></ROW><ROW><id>15810105</id><snippet>.....
for item in os.listdir(src):
        s = os.path.join(src, item)
        print s
        f.write(s)
f.close() # &lt;- add this line
.....
</snippet></ROW><ROW><id>15810178</id><snippet>return static_file(filename, root=filefolder)
</snippet></ROW><ROW><id>15810178</id><snippet>&lt;input type="hidden" name="arch"...</snippet></ROW><ROW><id>15810178</id><snippet>request.GET.get('arch', '')</snippet></ROW><ROW><id>15810178</id><snippet>root=...</snippet></ROW><ROW><id>15810258</id><snippet>with open('Path/to/file', 'r') as content_file:
    content = content_file.read()
    data = json.loads(content)
</snippet></ROW><ROW><id>15810436</id><snippet>import xml.etree.ElementTree as ET
import re
xdata = '''
&lt;data&gt;
    &lt;a1&gt;cat&lt;/a1&gt;
    &lt;a5&gt;bird&lt;/a5&gt;
    &lt;a4&gt;window&lt;/a4&gt;
&lt;/data&gt;'''
root = ET.fromstring(xdata)

for apptag in root.findall("*"):
    apptag.text = str(len(apptag.text))
    apptag.tag = re.sub(r'^a(.*)',r'r\1',apptag.tag)
root.tag = 'result'
ET.ElementTree(root).write('test.xhtml')
</snippet></ROW><ROW><id>15810594</id><snippet>&gt;&gt;&gt; m = gateway.jvm.java.util.HashMap()
&gt;&gt;&gt; m["a"] = 0
&gt;&gt;&gt; m.put("b",1)
&gt;&gt;&gt; m
{u'a': 0, u'b': 1}
&gt;&gt;&gt; u"b" in m
True
&gt;&gt;&gt; del(m["a"])
&gt;&gt;&gt; m
{u'b': 1}
&gt;&gt;&gt; m["c"] = 2 
</snippet></ROW><ROW><id>15810953</id><snippet>ls -l /bin/sh
</snippet></ROW><ROW><id>15810953</id><snippet>sudo mv /bin/sh /bin/sh.orig
sudo ln -s /bin/bash /bin/sh
</snippet></ROW><ROW><id>15810992</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer

class TicTacServer(SimpleXMLRPCServer):

    board = [u' '] * 10
    player = []

    public = ('addPlayer','getBoard','whoGoesFirst','insertMove','whosTurnIsIt','gameIsReady','resetGame')

    def _dispatch(self, method, params):

        if method in self.public:
            func = getattr(self,method)
            return func(*params)
        else:
            raise Exception('method "%s" is not supported' % method)



server = TicTacServer(('localhost',8081))
server.serve_forever()
</snippet></ROW><ROW><id>15810992</id><snippet>The default implementation
attempts to dispatch XML-RPC calls to the functions or instance
installed in the server. Override the _dispatch method inhereted
from SimpleXMLRPCDispatcher to change this behavior.
</snippet></ROW><ROW><id>15811222</id><snippet>import numpy as np
from matplotlib import pyplot as plt
import random

def customers():
    x = [random.expovariate(7) for r in xrange(100)]                   
    plt.hist(x,10)
    plt.show()
    return True

def main():
    global history
    print(customers()) 

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15811222</id><snippet>np.random.expovariate()</snippet></ROW><ROW><id>15811222</id><snippet>random.expovariate()</snippet></ROW><ROW><id>15811222</id><snippet>random.expovariate()</snippet></ROW><ROW><id>15811222</id><snippet>random.expovariate()</snippet></ROW><ROW><id>15811251</id><snippet>class Triangle:
    def __init__(self, a, b, c):
        self.__side1 = a
        self.__side2 = b
        self.__side3 = c

    def getPerimeter(self):
        return self.__side1 + self.__side2 + self.__side3

    def __str__(self):
        return "side1 : " + str(self.__side1) + " side2 : " + str(self.__side2) + " side3 : " + str(self.__side3)  

def main():
    side1 = input("Enter first side: ")
    side2 = input("Enter second side: ")
    side3 = input("Enter third side: ")
    t1 = Triangle(int(side1), int(side2), int(side3))
    print("The Perimeter of Triangle : ", t1.getPerimeter())
    print(t1)

main()
</snippet></ROW><ROW><id>15811251</id><snippet>'4' + '5' + '2' = '452'</snippet></ROW><ROW><id>15811251</id><snippet>t1 = Triangle(int(side1), int(side2), int(side3))
</snippet></ROW><ROW><id>15811251</id><snippet>__str__</snippet></ROW><ROW><id>15811251</id><snippet>return "side1: {} side2: {} side3: {}".format(self.__side1, self.__side2, self.__side3) 
</snippet></ROW><ROW><id>15811251</id><snippet>class Triangle:
    def __init__(self, a, b, c):
        self.side1 = a
        self.side2 = b
        self.side3 = c

    def getPerimeter(self):
        return self.side1 + self.side2 + self.side3

    def __str__(self):
        return "side1: {0.side1} side2: {0.side2} side3: {0.side3}".format(self) 
</snippet></ROW><ROW><id>15811341</id><snippet>dictionary = {}
with open('restaurant_small.txt') as our_file:
    for line in our_file:
       rest, rating = line.split(':')
       dictionary[rest] = int(rating)
</snippet></ROW><ROW><id>15811341</id><snippet>with</snippet></ROW><ROW><id>15811341</id><snippet>our_file = open('restaurant_small.txt')
# do the rest
our_file.close()
</snippet></ROW><ROW><id>15811341</id><snippet>close()</snippet></ROW><ROW><id>15811341</id><snippet>with</snippet></ROW><ROW><id>15811341</id><snippet>our_file = open('restaurant_small.txt')
try:
    # do the rest
finally:
    our_file.close()
</snippet></ROW><ROW><id>15811531</id><snippet>TEST = sys.argv[1]</snippet></ROW><ROW><id>15811531</id><snippet>TEST = sys.arv[1:]
</snippet></ROW><ROW><id>15811531</id><snippet>import sys
TEST = sys.argv[1:]
print(TEST)
</snippet></ROW><ROW><id>15811531</id><snippet>% test.py text1 test2</snippet></ROW><ROW><id>15811531</id><snippet>['text1', 'test2']
</snippet></ROW><ROW><id>15811644</id><snippet>FOO = FOO + "foo"
</snippet></ROW><ROW><id>15811644</id><snippet>FOO</snippet></ROW><ROW><id>15811644</id><snippet>FOO</snippet></ROW><ROW><id>15811644</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>15811644</id><snippet>def a_func():
    BAR.append("bar")
    print(FOO)       #&lt;--- "Freaky" UnboundLocalError occurs here!
    FOO = FOO + "foo" 
</snippet></ROW><ROW><id>15811644</id><snippet>a_func</snippet></ROW><ROW><id>15811644</id><snippet>print(FOO)</snippet></ROW><ROW><id>15811644</id><snippet>FOO</snippet></ROW><ROW><id>15811644</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>15811644</id><snippet>global FOO</snippet></ROW><ROW><id>15811644</id><snippet>FOO</snippet></ROW><ROW><id>15811644</id><snippet>a_func</snippet></ROW><ROW><id>15811644</id><snippet>FOO = "foo"
BAR = []

def a_func():
   global FOO
   BAR.append("bar") #ok
   FOO = FOO + "foo" assignment
</snippet></ROW><ROW><id>15811644</id><snippet>BAR.append('bar')</snippet></ROW><ROW><id>15811644</id><snippet>BAR</snippet></ROW><ROW><id>15811644</id><snippet>BAR = ...</snippet></ROW><ROW><id>15811644</id><snippet>BAR</snippet></ROW><ROW><id>15811644</id><snippet>BAR</snippet></ROW><ROW><id>15811644</id><snippet>BAR</snippet></ROW><ROW><id>15811644</id><snippet>FOO</snippet></ROW><ROW><id>15811644</id><snippet>global FOO</snippet></ROW><ROW><id>15811755</id><snippet>FTP()</snippet></ROW><ROW><id>15811755</id><snippet>f=ftplib.FTP('ftp.ncbi.nih.gov')
f.cwd('/genomes/Bacteria/')
</snippet></ROW><ROW><id>15811755</id><snippet>FTP()</snippet></ROW><ROW><id>15811755</id><snippet>cwd</snippet></ROW><ROW><id>15812558</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>15812558</id><snippet>import numpy as np
a = np.arange(5)
b = np.arange(5) + 2
np.savetxt('test.txt', np.array([a,b]).T, '%f')
</snippet></ROW><ROW><id>15812558</id><snippet>0.000000 2.000000
1.000000 3.000000
2.000000 4.000000
3.000000 5.000000 
4.000000 6.000000
</snippet></ROW><ROW><id>15812664</id><snippet>x = [1,2,2,2,3,4,5,6,6,7]

from itertools import groupby
print [key for key,group in groupby(x) if len(list(group)) &gt; 1]
</snippet></ROW><ROW><id>15812774</id><snippet>print &gt;&gt; fly, 'a'
</snippet></ROW><ROW><id>15812774</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>15812973</id><snippet>storage = {}
def memoized(value):
    if value not in storage:
        storage[value] = f(value)
    return storage[value]

[memoized(x) for x in l if memoized(x)]
</snippet></ROW><ROW><id>15812973</id><snippet>[g(x, fx) for x, fx in ((x,f(x)) for x in l) if fx]
</snippet></ROW><ROW><id>15813078</id><snippet>True</snippet></ROW><ROW><id>15813078</id><snippet>wallet_name</snippet></ROW><ROW><id>15813078</id><snippet>&gt;&gt;&gt; foo = ''
&gt;&gt;&gt; foo in ''
True
</snippet></ROW><ROW><id>15813078</id><snippet>if not wallet_name:</snippet></ROW><ROW><id>15813078</id><snippet>or</snippet></ROW><ROW><id>15813078</id><snippet>if</snippet></ROW><ROW><id>15813078</id><snippet>def determine_db_name():
    return wallet_name or "wallet.dat"
</snippet></ROW><ROW><id>15813078</id><snippet>or</snippet></ROW><ROW><id>15813078</id><snippet>wallet_name</snippet></ROW><ROW><id>15813078</id><snippet>"wallet.dat"</snippet></ROW><ROW><id>15813458</id><snippet>deleteindex = [val for key,val in dups.iteritems() if seen[key] == '159']
</snippet></ROW><ROW><id>15813458</id><snippet>key</snippet></ROW><ROW><id>15813458</id><snippet>list</snippet></ROW><ROW><id>15813458</id><snippet>dups</snippet></ROW><ROW><id>15813458</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>15813458</id><snippet>list</snippet></ROW><ROW><id>15813458</id><snippet>...
print dict(dups.iteritems())  # adding this
deleteindex = [val for key,val in dups.iteritems() if seen[key] == '159']
...
</snippet></ROW><ROW><id>15813458</id><snippet>import random

prules = [random.randint(150,156) for i in range(30)]

def get_indexes(li):
    retval = {}
    for i, x in enumerate(li):
        if x not in retval:
            retval[x] = []
        retval[x].append(i)
    return retval               

dups = get_indexes(prules)
indexes = dups.get('156',[])
rulelines = [rulelines[i] for i in range(len(rulelines[:])) if i not in indexes]
</snippet></ROW><ROW><id>15813458</id><snippet>dups.get('156',[])
</snippet></ROW><ROW><id>15813458</id><snippet>dups['156']</snippet></ROW><ROW><id>15813755</id><snippet>sleep</snippet></ROW><ROW><id>15813755</id><snippet>print</snippet></ROW><ROW><id>15813755</id><snippet>import sys
from time import sleep

for c in "Hello":
    print c,        # note the comma
    sleep(0.1)
print               # the final newline
</snippet></ROW><ROW><id>15813755</id><snippet>import sys
from time import sleep

for c in "Hello":
    sys.stdout.write(c)
    sleep(0.1)
sys.stdout.write('\n')
</snippet></ROW><ROW><id>15813755</id><snippet>import sys
from time import sleep

for c in "Hello":
    sys.stdout.write(c)
    sys.stdout.flush()
    sleep(0.1)
sys.stdout.write('\n')
sys.stdout.flush()
</snippet></ROW><ROW><id>15813920</id><snippet>names = [name.strip() for name in authors.split(r'\and')]  # assuming a raw \ here, not the escape code \a.
</snippet></ROW><ROW><id>15813920</id><snippet>if len(names) &gt;= 4:
    authors = '{} et al.'.format(names[0])
elif len(names) &gt; 1:
    authors = '{} and {}'.format(', '.join(names[:-1]), names[-1])
else:
    authors = names[0]
</snippet></ROW><ROW><id>15813920</id><snippet>authors</snippet></ROW><ROW><id>15813920</id><snippet>def reformat_authors(authors):
    names = [name.strip() for name in authors.split(r'\and')]
    if len(names) &gt;= 4:
        return '{} et al.'.format(names[0])
    if len(names) &gt; 1:
        return '{} and {}'.format(', '.join(names[:-1]), names[-1])
    return names[0]
</snippet></ROW><ROW><id>15813920</id><snippet>&gt;&gt;&gt; reformat_authors(r'John Bar \and Tom Foo \and Sam Foobar \and Ron Barfoo')
'John Bar et al.'
&gt;&gt;&gt; reformat_authors(r'John Bar \and Tom Foo \and Sam Foobar')
'John Bar, Tom Foo and Sam Foobar'
&gt;&gt;&gt; reformat_authors(r'John Bar \and Tom Foo')
'John Bar and Tom Foo'
&gt;&gt;&gt; reformat_authors(r'John Bar')
'John Bar'
</snippet></ROW><ROW><id>15814168</id><snippet>readline</snippet></ROW><ROW><id>15814518</id><snippet>repr</snippet></ROW><ROW><id>15814518</id><snippet>good = 'hello'
bad = '\033[41mRED'

print('{!r}'.format(good))
print('{!r}'.format(bad))
</snippet></ROW><ROW><id>15814518</id><snippet>'hello'
'\x1b[41mRED'
</snippet></ROW><ROW><id>15814518</id><snippet>print(good)
print(bad)
</snippet></ROW><ROW><id>15814518</id><snippet>reset</snippet></ROW><ROW><id>15814527</id><snippet>def newGrid(...):
     group = QtGui.QGraphicsItemGroup(scene=self)
     group.setFlag(QtGui.QGraphicsItem.ItemIsMovable) #let't test how it works

     for i in range(xccells + 1):
         ...
         group.addToGroup(self.addLine(x,ymin,x,ymax,self.meshPen))
     ...
</snippet></ROW><ROW><id>15814647</id><snippet>lambda</snippet></ROW><ROW><id>15814647</id><snippet>i</snippet></ROW><ROW><id>15814647</id><snippet>2</snippet></ROW><ROW><id>15814647</id><snippet>lambda</snippet></ROW><ROW><id>15814647</id><snippet>i</snippet></ROW><ROW><id>15814647</id><snippet>[lambda x,i=i:i for i in range(3)]
</snippet></ROW><ROW><id>15814647</id><snippet>i</snippet></ROW><ROW><id>15814826</id><snippet>載入 系統               # import sys
文件名 = 系統.參數[1:]   # filenames = sys.argv[1:]

定義 修正行尾(文件):     # def fixline(file):
    內文 = 打開(文件).讀入()  # text = open(file).read()
    內文 = 內文.替換('\n\r','\n') # text = text.replace('\n\r', '\n')
    傳回 內文          # return text

取 文件 自 文件名:     # for file in filenames:
    寫 修正行尾(文件)  # print fixline(file)
</snippet></ROW><ROW><id>15814949</id><snippet>def graph(p, ax=None):
    if ax is None:
        ax = plt.gca()
    x = np.linspace(0, np.pi * 2, 1024)
    y = np.sin(x) + p

    ax.set_title("title")
    ax.set_ylabel("ylabel")
    ax.set_xlabel("xlabel")
    ax.plot(x, y, 'ro', label = "some label")
    ax.legend(loc='upper left')

# Number of subplots. This creates a grid of nx * ny windows
nx = 3
ny = 2

fig = plt.gcf()
# Iterate over the axes
for j in xrange(nx * ny):
    t_ax = fig.add_subplot(nx, ny, j + 1)  # Add one for 1-indexing
    graph(j, t_ax)

plt.show()
fig.tight_layout()
plt.draw()
</snippet></ROW><ROW><id>15814949</id><snippet>tight_layout</snippet></ROW><ROW><id>15815023</id><snippet>r'(?&lt;=\d|\.)-(?=\d)'
</snippet></ROW><ROW><id>15815023</id><snippet>-</snippet></ROW><ROW><id>15815023</id><snippet>&gt;&gt;&gt; exponent = re.compile(r'(?&lt;=\d|\.)-(?=\d)')
&gt;&gt;&gt; exponent.sub('e-', '0.1245-102')
'0.1245e-102'
&gt;&gt;&gt; float(exponent.sub('e-', '0.1245-102'))
1.245e-103
&gt;&gt;&gt; float(exponent.sub('e-', '1-10'))
1e-10
&gt;&gt;&gt; float(exponent.sub('e-', '1.-10'))
1e-10
&gt;&gt;&gt; float(exponent.sub('e-', '-1-10'))
-1e-10
</snippet></ROW><ROW><id>15815023</id><snippet>-</snippet></ROW><ROW><id>15815023</id><snippet>D+</snippet></ROW><ROW><id>15815023</id><snippet>r'(?&lt;=\d|\.)D?(?=(?:\+|-)\d)
</snippet></ROW><ROW><id>15815023</id><snippet>D</snippet></ROW><ROW><id>15815023</id><snippet>-</snippet></ROW><ROW><id>15815023</id><snippet>+</snippet></ROW><ROW><id>15815023</id><snippet>&gt;&gt;&gt; exponent = re.compile(r'(?&lt;=\d|\.)D?(?=(?:\+|-)\d)')
&gt;&gt;&gt; float(exponent.sub('e', '0.1245-102'))
1.245e-103
&gt;&gt;&gt; float(exponent.sub('e', '456D+5'))
45600000.0
</snippet></ROW><ROW><id>15815023</id><snippet>D</snippet></ROW><ROW><id>15815023</id><snippet>-</snippet></ROW><ROW><id>15815023</id><snippet>0.1245D-102</snippet></ROW><ROW><id>15815151</id><snippet>config.add_route('wiki', '/wiki/{page}')

@notfound_view_config()
def notfound_view(exc, request):
    """ Generic notfound view for the entire site."""
    return exc

@notfound_view_config(route_name='wiki')
def wiki_notfound_view(exc, request):
    """ Specific notfound for urls matching the wiki pattern."""
    return exc
</snippet></ROW><ROW><id>15815151</id><snippet>${ msg | n }</snippet></ROW><ROW><id>15815151</id><snippet>{{ msg | safe }}</snippet></ROW><ROW><id>15815584</id><snippet>("http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;q='%s'"
 % sys.argv[1])
</snippet></ROW><ROW><id>15815591</id><snippet>&gt;&gt;&gt; h = fromstring("""&lt;?xml version="1.1" encoding="ISO-8859-1"?&gt;
    &lt;delivery_receipt&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;status&gt;Delivered&lt;/status&gt;
    &lt;/delivery_receipt&gt; """)
&gt;&gt;&gt; h.cssselect('delivery_reciept status').text_content()
</snippet></ROW><ROW><id>15815659</id><snippet>reduce(lambda x,y: np.dot(x,y), T, np.eye(2))
</snippet></ROW><ROW><id>15815659</id><snippet>reduce(np.dot, T, np.eye(2))
</snippet></ROW><ROW><id>15815775</id><snippet>string.maketrans</snippet></ROW><ROW><id>15815775</id><snippet>str.translate</snippet></ROW><ROW><id>15815775</id><snippet>import string
trans = string.maketrans('ae', 'bx') # a-&gt;b and e-&gt;x
text = 'abcdef'
print text.translate(trans)
# bbcdxf
</snippet></ROW><ROW><id>15815889</id><snippet>ndarray</snippet></ROW><ROW><id>15815889</id><snippet>In [122]: import numpy as np

In [123]: n = 4.0

In [124]: a = np.arange(n)

In [125]: n.is_integer()
Out[125]: True

In [126]: a.is_integer()
---------------------------------------------------------------------------
AttributeError: 'numpy.ndarray' object has no attribute 'is_integer'
</snippet></ROW><ROW><id>15815889</id><snippet>In [127]: n
Out[127]: 4.0

In [128]: a
Out[128]: array([ 0.,  1.,  2.,  3.])

In [129]: n + a
Out[129]: array([ 4.,  5.,  6.,  7.])
</snippet></ROW><ROW><id>15815889</id><snippet>print</snippet></ROW><ROW><id>15815889</id><snippet>.__repr__()</snippet></ROW><ROW><id>15815889</id><snippet>print</snippet></ROW><ROW><id>15815889</id><snippet>In [148]: class player:
   .....:     def __init__(self, num=5):
   .....:         self.num = num
   .....:     def __repr__(self):
   .....:         return str(self.num)
   .....:     

In [149]: objs = np.array([player(5), player(6)])

In [150]: objs
Out[150]: array([5, 6], dtype=object)

In [151]: print objs
[5 6]
</snippet></ROW><ROW><id>15815889</id><snippet>np.array([5,6])</snippet></ROW><ROW><id>15815889</id><snippet>In [152]: objs * 3
----------------------
TypeError: unsupported operand type(s) for *: 'instance' and 'int'
</snippet></ROW><ROW><id>15815889</id><snippet>__repr__</snippet></ROW><ROW><id>15815889</id><snippet>printnum()</snippet></ROW><ROW><id>15815889</id><snippet>In [164]: class player:
   .....:     def __init__(self, num=5):
   .....:         self.num = num
   .....:     def printnum(self):
   .....:         print(self.num)
   .....:         

In [165]: for p in objs:
   .....:     p.printnum()
   .....:
5
6
</snippet></ROW><ROW><id>15815889</id><snippet>In [169]: class player:
   .....:     def __init__(self, num=5):
   .....:         self.num = num
   .....:     def printnum(self):
   .....:         return str(self.num)
   .....: 

In [170]: objs = np.array([player(5), player(6)])

In [171]: [p.printnum() for p in objs]
Out[171]: ['5', '6']
</snippet></ROW><ROW><id>15815960</id><snippet>scipy.integrate.ode</snippet></ROW><ROW><id>15816111</id><snippet>collections.Counter</snippet></ROW><ROW><id>15816111</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; tokens = [{"Value": "Blah", "SO": 0}, {"Value": "zoom", "SO": 5}, {"Value": "Blah", "SO": 2}, {"Value": "Blah", "SO": 3}]
&gt;&gt;&gt; Counter(tok['Value'] for tok in tokens)
Counter({'Blah': 3, 'zoom': 1})
</snippet></ROW><ROW><id>15816111</id><snippet>itertools.groupby</snippet></ROW><ROW><id>15816111</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; def keyfn(x):
        return x['Value']
... 
&gt;&gt;&gt; [(k, list(g)) for k,g in groupby(sorted(tokens, key=keyfn), keyfn)]
[('Blah', [{'SO': 0, 'Value': 'Blah'}, {'SO': 2, 'Value': 'Blah'}, {'SO': 3, 'Value': 'Blah'}]), ('zoom', [{'SO': 5, 'Value': 'zoom'}])]
</snippet></ROW><ROW><id>15816111</id><snippet>groupby</snippet></ROW><ROW><id>15816186</id><snippet>dtype</snippet></ROW><ROW><id>15816186</id><snippet>In [175]: import numpy as np

In [176]: x = np.random.random(10)

In [177]: y = np.random.random(10)

In [179]: zip(x,y)
Out[179]: 
[(0.27432965895978034, 0.034808254176554643),
 (0.10231729328413885, 0.3311112896885462),
 (0.87724361175443311, 0.47852682944121905),
 (0.24291769332378499, 0.50691735432715967),
 (0.47583427680221879, 0.04048957803763753),
 (0.70710641602121627, 0.27331443495117813),
 (0.85878694702522784, 0.61993945461613498),
 (0.28840423235739054, 0.11954319357707233),
 (0.22084849730366296, 0.39880927226467255),
 (0.42915612628398903, 0.19197320645915561)]

In [180]: data = np.array( zip(x,y), dtype=[('x',float),('y',float)])

In [181]: data['x']
Out[181]: 
array([ 0.27432966,  0.10231729,  0.87724361,  0.24291769,  0.47583428,
        0.70710642,  0.85878695,  0.28840423,  0.2208485 ,  0.42915613])

In [182]: data['y']
Out[182]: 
array([ 0.03480825,  0.33111129,  0.47852683,  0.50691735,  0.04048958,
        0.27331443,  0.61993945,  0.11954319,  0.39880927,  0.19197321])

In [183]: data[0]
Out[183]: (0.27432965895978034, 0.03480825417655464)
</snippet></ROW><ROW><id>15816186</id><snippet>In [200]: t = np.arange(10)

In [202]: dt = np.dtype([('t',int),('pos',[('x',float),('y',float)])])

In [203]: alldata = np.array(zip(t, zip(x,y)), dtype=dt)

In [204]: alldata
Out[204]: 
array([(0, (0.27432965895978034, 0.03480825417655464)),
       (1, (0.10231729328413885, 0.3311112896885462)),
       (2, (0.8772436117544331, 0.47852682944121905)),
       (3, (0.242917693323785, 0.5069173543271597)),
       (4, (0.4758342768022188, 0.04048957803763753)),
       (5, (0.7071064160212163, 0.27331443495117813)),
       (6, (0.8587869470252278, 0.619939454616135)),
       (7, (0.28840423235739054, 0.11954319357707233)),
       (8, (0.22084849730366296, 0.39880927226467255)),
       (9, (0.429156126283989, 0.1919732064591556))], 
      dtype=[('t', '&lt;i8'), ('pos', [('x', '&lt;f8'), ('y', '&lt;f8')])])

In [205]: alldata['t']
Out[205]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [206]: alldata['pos']
Out[206]: 
array([(0.27432965895978034, 0.03480825417655464),
       (0.10231729328413885, 0.3311112896885462),
       (0.8772436117544331, 0.47852682944121905),
       (0.242917693323785, 0.5069173543271597),
       (0.4758342768022188, 0.04048957803763753),
       (0.7071064160212163, 0.27331443495117813),
       (0.8587869470252278, 0.619939454616135),
       (0.28840423235739054, 0.11954319357707233),
       (0.22084849730366296, 0.39880927226467255),
       (0.429156126283989, 0.1919732064591556)], 
      dtype=[('x', '&lt;f8'), ('y', '&lt;f8')])

In [207]: alldata['pos']['x']
Out[207]: 
array([ 0.27432966,  0.10231729,  0.87724361,  0.24291769,  0.47583428,
        0.70710642,  0.85878695,  0.28840423,  0.2208485 ,  0.42915613])
</snippet></ROW><ROW><id>15816473</id><snippet>feedparser</snippet></ROW><ROW><id>15816473</id><snippet>import feedparser

result = feedparser.parse('https://gdata.youtube.com/feeds/api/videos/Ej4_G-E1cAM/comments')
for entry in result.entries:
    print entry.author
</snippet></ROW><ROW><id>15816473</id><snippet>FreebieFM
micromicros
FreebieFM
Sarah Grimstone
FreebieFM
# etc.
</snippet></ROW><ROW><id>15816473</id><snippet>ElementTree</snippet></ROW><ROW><id>15816473</id><snippet>ElementTree</snippet></ROW><ROW><id>15816473</id><snippet>from urllib2 import urlopen
from xml.etree import ElementTree

response = urlopen('https://gdata.youtube.com/feeds/api/videos/Ej4_G-E1cAM/comments')
tree = ElementTree.parse(response)

nsmap = {'a': 'http://www.w3.org/2005/Atom'}
for author in tree.findall('.//a:author/a:name', namespaces=nsmap):
    print author.text
</snippet></ROW><ROW><id>15816473</id><snippet>nsmap</snippet></ROW><ROW><id>15816473</id><snippet>ElementTree</snippet></ROW><ROW><id>15816473</id><snippet>a:</snippet></ROW><ROW><id>15816524</id><snippet>calls</snippet></ROW><ROW><id>15816524</id><snippet>ncalls</snippet></ROW><ROW><id>15816524</id><snippet>In [43]: def a(i):
   ....:     if i == 0:
   ....:         return
   ....:     a(i-1)
   ....:


In [54]: %prun a(0)
  ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       1    0.000    0.000    0.000    0.000 &lt;ipython-input-43-25b7f3d268b8&gt;:1(a)


In [55]: %prun a(1)
  ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     2/1    0.000    0.000    0.000    0.000 &lt;ipython-input-43-25b7f3d268b8&gt;:1(a)


In [56]: %prun a(3)
  ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     4/1    0.000    0.000    0.000    0.000 &lt;ipython-input-43-25b7f3d268b8&gt;:1(a)
</snippet></ROW><ROW><id>15816551</id><snippet>try/except</snippet></ROW><ROW><id>15816551</id><snippet>def test_SetOwner(self, owner):
    self.objectid.SetOwner(owner)
    try:
        owner_prime = self.objectid.GetOwner()
    except RuntimeError as e:
        self.assertTrue(e.args[0].startswith("Could not execute"))
    else:
        self.assertEqual(owner, owner_prime)
</snippet></ROW><ROW><id>15816551</id><snippet>GetOwner()</snippet></ROW><ROW><id>15816551</id><snippet>RuntimeError</snippet></ROW><ROW><id>15816647</id><snippet>#!/usr/bin/env python
import sys
##Initials,Last,First,ShiftStart,ShiftEnd
s='''BAB,Smith,Bob,10:00a,1:00p
JCJ,Jones,Jill,11:00a,3:00p
JIH,Hernandez,Jose,1:00p,4:00p
BAB,Smith,Bob,1:00p,3:00p
JIH,Hernandez,Jose,5:00p,9:00p
JCJ,Jones,Jill,3:00p,3:30p
JCJ,Jones,Jill,3:30p,5:00p
DJM,Martin,Dominique,8:00a,11:00a'''

db = {}
for line in s.split('\n'):
     Initials,Last,First,ShiftStart,ShiftEnd = line.split(',')
     if Initials in db:
         db[Initials][2].append((ShiftStart,ShiftEnd))
     else:
         db[Initials] = (Last,First,[(ShiftStart,ShiftEnd)])
for Initials,v in db.iteritems():
    Last,First,shifts = v
    sys.stdout.write(Initials + ',')
    sys.stdout.write(Last + ',' + First)
    for shift in shifts:
        ShiftStart,ShiftEnd = shift
        sys.stdout.write(',' + ShiftStart + ',' + ShiftEnd)
    sys.stdout.write('\n')
</snippet></ROW><ROW><id>15816647</id><snippet>import sys
##Initials,Last,First,ShiftStart,ShiftEnd
s='''BAB,Smith,Bob,10:00a,1:00p
JCJ,Jones,Jill,11:00a,3:00p
JIH,Hernandez,Jose,1:00p,4:00p
BAB,Smith,Bob,1:00p,3:00p
JIH,Hernandez,Jose,5:00p,9:00p
JCJ,Jones,Jill,3:00p,3:30p
JCJ,Jones,Jill,3:30p,5:00p
DJM,Martin,Dominique,8:00a,11:00a'''

class Shift(object):
    def __init__(self,ShiftStart,ShiftEnd):
        self.ShiftStart,self.ShiftEnd = ShiftStart,ShiftEnd
    def __str__(self):
        return '%s,%s' % (ShiftStart,ShiftEnd)

class Person(object):
    def __eq__(self, p):
        if self.Initials != p.Initials:
            return False
        if p.Last is not None and self.Last != p.Last:
            return False
        if p.First is not None and self.First != p.First:
            return False
        return True
    def __init__(self,Initials,Last,First):
        self.Initials,self.Last,self.First = Initials,Last,First
        self.Shifts = []
    def __str__(self):
        return '%s,%s,%s' % (self.Initials,self.Last,self.First)

def AddShift(people, person, shift):
    try:
        person = people[people.index(person)]
    except ValueError:
        people.append(person)
    person.Shifts.append(shift)

people = []
for line in s.split('\n'):
     Initials,Last,First,ShiftStart,ShiftEnd = line.split(',')
     AddShift(people, Person(Initials,Last,First), Shift(ShiftStart,ShiftEnd))

for person in people:
    print '%s,%s' %(person, ','.join(map(str,person.Shifts)))
</snippet></ROW><ROW><id>15816887</id><snippet>np.append</snippet></ROW><ROW><id>15816887</id><snippet>Returns
-------
append : ndarray
    A copy of `arr` with `values` appended to `axis`.  Note that `append`
    does not occur in-place: a new array is allocated and filled.  If
    `axis` is None, `out` is a flattened array.
</snippet></ROW><ROW><id>15816887</id><snippet>all_data = np.append(...)</snippet></ROW><ROW><id>15816887</id><snippet>my_data = np.random.random((210,8)) #recfromcsv('LIAB.ST.csv', delimiter='\t')
new_col = my_data.sum(1)[...,None] # None keeps (n, 1) shape
new_col.shape
#(210,1)
all_data = np.append(my_data, new_col, 1)
all_data.shape
#(210,9)
</snippet></ROW><ROW><id>15816887</id><snippet>all_data = np.hstack((my_data, new_col))
#or
all_data = np.concatenate((my_data, new_col), 1)
</snippet></ROW><ROW><id>15816887</id><snippet>np.vstack</snippet></ROW><ROW><id>15816887</id><snippet>axis</snippet></ROW><ROW><id>15816887</id><snippet>concatenate</snippet></ROW><ROW><id>15816887</id><snippet>axis = 0</snippet></ROW><ROW><id>15816887</id><snippet>hstack</snippet></ROW><ROW><id>15816887</id><snippet>axis = 1</snippet></ROW><ROW><id>15816887</id><snippet>axis = 0</snippet></ROW><ROW><id>15816887</id><snippet>vstack</snippet></ROW><ROW><id>15816887</id><snippet>axis = 0</snippet></ROW><ROW><id>15816887</id><snippet>append</snippet></ROW><ROW><id>15816887</id><snippet>genfromtxt</snippet></ROW><ROW><id>15816887</id><snippet>recfromcsv</snippet></ROW><ROW><id>15816887</id><snippet>recarray</snippet></ROW><ROW><id>15816887</id><snippet>recfromcsv</snippet></ROW><ROW><id>15816887</id><snippet>my_data</snippet></ROW><ROW><id>15816887</id><snippet>recarray</snippet></ROW><ROW><id>15816887</id><snippet>my_data.shape = (210,)</snippet></ROW><ROW><id>15816887</id><snippet>x = np.random.random(10)
y = np.random.random(10)
z = np.random.random(10)
data = np.array( zip(x,y,z), dtype=[('x',float),('y',float),('z',float)])
data = np.recarray(data.shape, data.dtype, buf=data)
data.shape
#(10,)
tot = data['x'] + data['y'] + data['z'] # sum(axis=1) won't work on recarray
tot.shape
#(10,)
all_data = append_fields(data, 'total', tot, usemask=False)
all_data
#array([(0.4374783740738456 , 0.04307289878861764, 0.021176067323686598, 0.5017273401861498),
#       (0.07622262416466963, 0.3962146058689695 , 0.27912715826653534 , 0.7515643883001745),
#       (0.30878532523061153, 0.8553768789387086 , 0.9577415585116588  , 2.121903762680979 ),
#       (0.5288343561208022 , 0.17048864443625933, 0.07915689716226904 , 0.7784798977193306),
#       (0.8804269791375121 , 0.45517504750917714, 0.1601389248542675  , 1.4957409515009568),
#       (0.9556552723429782 , 0.8884504475901043 , 0.6412854758843308  , 2.4853911958174133),
#       (0.0227638618687922 , 0.9295332854783015 , 0.3234597575660103  , 1.275756904913104 ),
#       (0.684075052174589  , 0.6654774682866273 , 0.5246593820025259  , 1.8742119024637423),
#       (0.9841793718333871 , 0.5813955915551511 , 0.39577520705133684 , 1.961350170439875 ),
#       (0.9889343795296571 , 0.22830104497714432, 0.20011292764078448 , 1.4173483521475858)], 
#      dtype=[('x', '&lt;f8'), ('y', '&lt;f8'), ('z', '&lt;f8'), ('total', '&lt;f8')])
all_data.shape
#(10,)
all_data.dtype.names
#('x', 'y', 'z', 'total')
</snippet></ROW><ROW><id>15816896</id><snippet>sys.execpthook</snippet></ROW><ROW><id>15816913</id><snippet>tidbit</snippet></ROW><ROW><id>15816913</id><snippet>str</snippet></ROW><ROW><id>15816913</id><snippet>list1.append(tidbit) if (tidbit.startswith(AtoZ)) else list2.append(tidbit)
</snippet></ROW><ROW><id>15816913</id><snippet>str.isupper()</snippet></ROW><ROW><id>15816913</id><snippet>tidbit</snippet></ROW><ROW><id>15816913</id><snippet>list1.append(tidbit) if tidbit[0].isupper() else list2.append(tidbit)
</snippet></ROW><ROW><id>15816913</id><snippet>list1 = [tidbit for tidbit in chunks if tidbit[0].isupper()]
list2 = [tidbit for tidbit in chunks if not tidbit[0].isupper()]
</snippet></ROW><ROW><id>15817050</id><snippet>horizontalScrollBar()</snippet></ROW><ROW><id>15817050</id><snippet>verticalScrollBar()</snippet></ROW><ROW><id>15817050</id><snippet>value()</snippet></ROW><ROW><id>15817050</id><snippet>valueChanged()</snippet></ROW><ROW><id>15817411</id><snippet>amount = int(input("How many employees?: "))
if amount &lt;= 0:
    print("You cannot have 0 or less.")
name = []
salary = []
length = len(salary)
MAX_SALARY = 200000
mini = MAX_SALARY + 1
maxi = -1
mini_idx = -1
maxi_idx = -1

for i in range(amount):
    employee = input("What is the employee's name?: ")
    name += [employee]
    earned = -1
    while earned &gt;= 0 and earned &lt;= MAX_SALARY:
        earned = int(input("How much is the salary? It cannot be less than 0 or over $200,000: "))
    salary += [earned]
    total += earned
    if earned &lt; mini:
        mini = earned
        mini_idx = i
    if earned &gt; maxi:
        maxi = earned
        maxi_idx = i
</snippet></ROW><ROW><id>15817411</id><snippet>salary[mini_idx]
name[mini_idx]
salary[maxi_idx]
name[maxi_idx]
</snippet></ROW><ROW><id>15817457</id><snippet>str</snippet></ROW><ROW><id>15817457</id><snippet>import locale

encoding = locale.getdefaultlocale()[1]

cmd = subprocess.Popen('dir',shell=True,stdout=subprocess.PIPE)
for line in cmd.stdout:
    columns = line.decode(encoding).split()
    if columns:
        print(columns[-1])
</snippet></ROW><ROW><id>15817457</id><snippet>bytes</snippet></ROW><ROW><id>15817457</id><snippet>str</snippet></ROW><ROW><id>15817457</id><snippet>&gt;&gt;&gt; b'one two'.split(' ')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Type str doesn't support the buffer API
</snippet></ROW><ROW><id>15817457</id><snippet>print()</snippet></ROW><ROW><id>15817457</id><snippet>b'..'</snippet></ROW><ROW><id>15817457</id><snippet>os</snippet></ROW><ROW><id>15817457</id><snippet>import os

for filename in os.listdir('.'):
    print(filename)
</snippet></ROW><ROW><id>15817588</id><snippet>python-qt4</snippet></ROW><ROW><id>15817588</id><snippet>.egg-info</snippet></ROW><ROW><id>15817588</id><snippet>pip</snippet></ROW><ROW><id>15817751</id><snippet>Element</snippet></ROW><ROW><id>15817751</id><snippet>.fromstring()</snippet></ROW><ROW><id>15817751</id><snippet>.iterparse()</snippet></ROW><ROW><id>15817751</id><snippet>.findall()</snippet></ROW><ROW><id>15817751</id><snippet>tree = ET.fromstring(xml)
for elem in tree.findall('.//*'):
    if elem.text and elem.text.strip() == 'error':
        print elem.tag
</snippet></ROW><ROW><id>15817751</id><snippet>.iter()</snippet></ROW><ROW><id>15817751</id><snippet>tree = ET.fromstring(xml)
for elem in tree.iter():
    if elem.text and elem.text.strip() == 'error':
        print elem.tag
</snippet></ROW><ROW><id>15817751</id><snippet>iterparse</snippet></ROW><ROW><id>15817751</id><snippet>from cStringIO import StringIO
for event, element in ET.iterparse(StringIO(xml)):
    if element.text.strip() == "error":
        print element.tag
</snippet></ROW><ROW><id>15817751</id><snippet>tag2
tag5
</snippet></ROW></DATA>