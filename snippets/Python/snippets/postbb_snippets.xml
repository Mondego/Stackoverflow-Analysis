<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>6693979</id><snippet>self.fps_display</snippet></ROW><ROW><id>6693979</id><snippet>None</snippet></ROW><ROW><id>6694565</id><snippet>queue.PriorityQueue</snippet></ROW><ROW><id>6694565</id><snippet>heapq</snippet></ROW><ROW><id>6694565</id><snippet>threading.Condition</snippet></ROW><ROW><id>6694565</id><snippet>import heapq, time, threading

START_TIME = time.time()
SERIALIZE_STDOUT = threading.Lock()
def consumer(message):
    """the actual work function.  nevermind the locks here, this just keeps
       the output nicely formatted.  a real work function probably won't need
       it, or might need quite different synchronization"""
    SERIALIZE_STDOUT.acquire()
    print time.time() - START_TIME, message
    SERIALIZE_STDOUT.release()

def produce(work_queue, condition, timeout, message):
    """called to put a single item onto the work queue."""
    prio = time.time() + float(timeout)
    condition.acquire()
    heapq.heappush(work_queue, (prio, message))
    condition.notify()
    condition.release()

def worker(work_queue, condition):
    condition.acquire()
    stopped = False
    while not stopped:
        now = time.time()
        if work_queue:
            prio, data = work_queue[0]
            if data == 'stop':
                stopped = True
                continue
            if prio &lt; now:
                heapq.heappop(work_queue)
                condition.release()
                # do some work!
                consumer(data)
                condition.acquire()
            else:
                condition.wait(prio - now)
        else:
            # the queue is empty, wait until notified
            condition.wait()
    condition.release()

if __name__ == '__main__':
    # first set up the work queue and worker pool
    work_queue = []
    cond = threading.Condition()
    pool = [threading.Thread(target=worker, args=(work_queue, cond))
            for _ignored in range(4)]
    map(threading.Thread.start, pool)

    # now add some work
    produce(work_queue, cond, 10, 'Grumpy')
    produce(work_queue, cond, 10, 'Sneezy')
    produce(work_queue, cond, 5, 'Happy')
    produce(work_queue, cond, 10, 'Dopey')
    produce(work_queue, cond, 15, 'Bashful')
    time.sleep(5)
    produce(work_queue, cond, 5, 'Sleepy')
    produce(work_queue, cond, 10, 'Doc')

    # and just to make the example a bit more friendly, tell the threads to stop after all
    # the work is done
    produce(work_queue, cond, float('inf'), 'stop')
    map(threading.Thread.join, pool)
</snippet></ROW><ROW><id>6694827</id><snippet>'abc'</snippet></ROW><ROW><id>6694827</id><snippet>[None] * 3</snippet></ROW><ROW><id>6694827</id><snippet>&gt;&gt;&gt; def generate(charlist,state,position):
...     for i in charlist:
...         state[position] = i
...         if position == (len(state)-1):
...             yield "".join(state)
...         else:
...             for j in generate(charlist,state,position+1):
...                 yield j
... 
&gt;&gt;&gt; print list(generate('abc', [None] * 3, 0))
['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 
 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 
 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc']
</snippet></ROW><ROW><id>6694827</id><snippet>generate</snippet></ROW><ROW><id>6694827</id><snippet>position</snippet></ROW><ROW><id>6694827</id><snippet>0</snippet></ROW><ROW><id>6694827</id><snippet>1</snippet></ROW><ROW><id>6694827</id><snippet>2</snippet></ROW><ROW><id>6694827</id><snippet>'a'</snippet></ROW><ROW><id>6694827</id><snippet>state</snippet></ROW><ROW><id>6694827</id><snippet>position == 2</snippet></ROW><ROW><id>6694827</id><snippet>for</snippet></ROW><ROW><id>6694827</id><snippet>'b'</snippet></ROW><ROW><id>6694827</id><snippet>'c'</snippet></ROW><ROW><id>6694827</id><snippet>state[2]</snippet></ROW><ROW><id>6694827</id><snippet>position == 1</snippet></ROW><ROW><id>6694827</id><snippet>state[1] = 'b'</snippet></ROW><ROW><id>6694827</id><snippet>position</snippet></ROW><ROW><id>6694827</id><snippet>state</snippet></ROW><ROW><id>6694827</id><snippet>position == 2</snippet></ROW><ROW><id>6694827</id><snippet>state[2] == 'a'</snippet></ROW><ROW><id>6694827</id><snippet>'b'</snippet></ROW><ROW><id>6694827</id><snippet>'c'</snippet></ROW><ROW><id>6694827</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [''.join(c) for c in itertools.product('abc', 'abc', 'abc')]
['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 
 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 
 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc']
</snippet></ROW><ROW><id>6694827</id><snippet>&gt;&gt;&gt; [''.join(c) for c in itertools.product(*['abc'] * 3)]
</snippet></ROW><ROW><id>6694934</id><snippet>QColor</snippet></ROW><ROW><id>6694972</id><snippet>str</snippet></ROW><ROW><id>6694972</id><snippet>unicode</snippet></ROW><ROW><id>6694972</id><snippet>str</snippet></ROW><ROW><id>6694972</id><snippet>'─'</snippet></ROW><ROW><id>6694972</id><snippet>str.center()</snippet></ROW><ROW><id>6694972</id><snippet>unicode</snippet></ROW><ROW><id>6694972</id><snippet>u'─'</snippet></ROW><ROW><id>6695272</id><snippet>bitarray</snippet></ROW><ROW><id>6695272</id><snippet>bitarray</snippet></ROW><ROW><id>6695272</id><snippet>dict</snippet></ROW><ROW><id>6695272</id><snippet>bitarray</snippet></ROW><ROW><id>6695272</id><snippet>import bitarray

class BoolArray(object):

  # create from an ndarray
  def __init__(self, array):
    ba = bitarray.bitarray()
    ba.pack(array.tostring())
    self.arr = ba.tostring()
    self.shape = array.shape
    self.size = array.size

  # convert back to an ndarray
  def to_array(self):
    ba = bitarray.bitarray()
    ba.fromstring(self.arr)
    ret = np.fromstring(ba.unpack(), dtype=np.bool)[:self.size]
    return ret.reshape(self.shape)

  def __cmp__(self, other):
    return cmp(self.arr, other.arr)

  def __hash__(self):
    return hash(self.arr)

import numpy as np

x = (np.random.random((2,3,2))&gt;0.5)
b1 = BoolArray(x)
b2 = BoolArray(x)
d = {b1: 12}
d[b2] += 1
print d
print b1.to_array()
</snippet></ROW><ROW><id>6695488</id><snippet>import paramiko
import os

ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect('localhost',username='****')  

apath = '/var/log'
apattern = '"*.log"'
rawcommand = 'find {path} -name {pattern}'
command = rawcommand.format(path=apath, pattern=apattern)
stdin, stdout, stderr = ssh.exec_command(command)
filelist = stdout.read().splitlines()

ftp = ssh.open_sftp()
for afile in filelist:
    (head, filename) = os.path.split(afile)
    print(filename)
    ftp.get(afile, './'+filename)
ftp.close()
ssh.close()
</snippet></ROW><ROW><id>6695650</id><snippet>if</snippet></ROW><ROW><id>6695650</id><snippet>if converted.digest() == real.digest()</snippet></ROW><ROW><id>6695650</id><snippet>if converted == real</snippet></ROW><ROW><id>6695650</id><snippet>hashlib</snippet></ROW><ROW><id>6695650</id><snippet>__cmp__</snippet></ROW><ROW><id>6695650</id><snippet>__eq__</snippet></ROW><ROW><id>6695650</id><snippet>__ne__</snippet></ROW><ROW><id>6695650</id><snippet>__cmp__()</snippet></ROW><ROW><id>6695650</id><snippet>__eq__()</snippet></ROW><ROW><id>6695650</id><snippet>__ne__()</snippet></ROW><ROW><id>6695650</id><snippet>dir()</snippet></ROW><ROW><id>6695650</id><snippet>&gt;&gt;&gt; test = hashlib.sha512('test')
&gt;&gt;&gt; dir(test)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__',
 '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__',
 '__sizeof__', '__str__', '__subclasshook__', 'block_size', 'copy', 'digest',
 'digest_size', 'digestsize', 'hexdigest', 'name', 'update']
</snippet></ROW><ROW><id>6695861</id><snippet>from random import *</snippet></ROW><ROW><id>6695861</id><snippet>random</snippet></ROW><ROW><id>6695861</id><snippet>random.</snippet></ROW><ROW><id>6695861</id><snippet>import random</snippet></ROW><ROW><id>6696017</id><snippet>form1 = PersonForm(request.POST or None, prefix='person')
form2 = InstrumentForm(request.POST or None, prefix='instrument')

if form1.is_valid() and form2.is_valid():
  form2.save()
  form1.save()
  # return redirect
# render forms
</snippet></ROW><ROW><id>6696055</id><snippet>python manage.py syncdb
</snippet></ROW><ROW><id>6696059</id><snippet>&gt;&gt;&gt; l = ['element1\t0238.94', 'element2\t2.3904', 'element3\t0139847']
&gt;&gt;&gt; [i.split('\t', 1)[0] for i in l]
['element1', 'element2', 'element3']
</snippet></ROW><ROW><id>6696067</id><snippet>inspect.isclass(meth.im_self)</snippet></ROW><ROW><id>6696067</id><snippet>meth</snippet></ROW><ROW><id>6696067</id><snippet>def decorate_class(cls):
    for name, meth in inspect.getmembers(cls, inspect.ismethod):
        if inspect.isclass(meth.im_self):
          print '%s is a class method' % name
          # TODO
        ...
    return cls
</snippet></ROW><ROW><id>6696136</id><snippet>unicode</snippet></ROW><ROW><id>6696136</id><snippet>__new__</snippet></ROW><ROW><id>6696136</id><snippet>__init__</snippet></ROW><ROW><id>6696136</id><snippet>class A (unicode):
    def __new__ (cls, value):
       return unicode.__new__(cls, str(value).upper())

print A('hello')
u'HELLO'
</snippet></ROW><ROW><id>6696330</id><snippet>++</snippet></ROW><ROW><id>6697524</id><snippet>forloop.first</snippet></ROW><ROW><id>6697524</id><snippet>for</snippet></ROW><ROW><id>6697524</id><snippet>forloop</snippet></ROW><ROW><id>6697548</id><snippet>spam</snippet></ROW><ROW><id>6697548</id><snippet>spam.py</snippet></ROW><ROW><id>6697548</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6697548</id><snippet>PATH</snippet></ROW><ROW><id>6697548</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6697548</id><snippet>.:/usr/local/lib/python</snippet></ROW><ROW><id>6697548</id><snippet>sys.path</snippet></ROW><ROW><id>6697548</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6697548</id><snippet>/usr/local/lib/python2.6/dist-packages</snippet></ROW><ROW><id>6697548</id><snippet>sys.path</snippet></ROW><ROW><id>6697548</id><snippet>sys.path</snippet></ROW><ROW><id>6697548</id><snippet>sys.path</snippet></ROW><ROW><id>6697548</id><snippet>sys.path</snippet></ROW><ROW><id>6697548</id><snippet>import X</snippet></ROW><ROW><id>6697548</id><snippet>sys.path</snippet></ROW><ROW><id>6697548</id><snippet>import X</snippet></ROW><ROW><id>6697548</id><snippet>X</snippet></ROW><ROW><id>6697548</id><snippet>sys.path</snippet></ROW><ROW><id>6697555</id><snippet>from pylab import *</snippet></ROW><ROW><id>6697555</id><snippet>from pylab import *
from matplotlib.widgets import Slider, Button, RadioButtons

ax = subplot(111)
subplots_adjust(left=0.25, bottom=0.25)
t = arange(0.0, 1.0, 0.001)
a0 = 5
f0 = 3
s = a0*sin(2*pi*f0*t)
l, = plot(t,s, lw=2, color='red')
axis([0, 1, -10, 10])

axcolor = 'lightgoldenrodyellow'
axfreq = axes([0.25, 0.1, 0.65, 0.03], axisbg=axcolor)
axamp  = axes([0.25, 0.15, 0.65, 0.03], axisbg=axcolor)

sfreq = Slider(axfreq, 'Freq', 0.1, 30.0, valinit=f0)
samp = Slider(axamp, 'Amp', 0.1, 10.0, valinit=a0)

def update(val):
    amp = samp.val
    freq = sfreq.val
    l.set_ydata(amp*sin(2*pi*freq*t))
    draw()
sfreq.on_changed(update)
samp.on_changed(update)

resetax = axes([0.8, 0.025, 0.1, 0.04])
button = Button(resetax, 'Reset', color=axcolor, hovercolor='0.975')
def reset(event):
    sfreq.reset()
    samp.reset()
button.on_clicked(reset)

rax = axes([0.025, 0.5, 0.15, 0.15], axisbg=axcolor)
radio = RadioButtons(rax, ('red', 'blue', 'green'), active=0)
def colorfunc(label):
    l.set_color(label)
    draw()
radio.on_clicked(colorfunc)

show()
</snippet></ROW><ROW><id>6697671</id><snippet>date.min</snippet></ROW><ROW><id>6697671</id><snippet>datetime</snippet></ROW><ROW><id>6697671</id><snippet>strftime</snippet></ROW><ROW><id>6697671</id><snippet>date_min &gt; 1900</snippet></ROW><ROW><id>6698143</id><snippet>import os

def rename_open_file(fileobj, newname):
    name = fileobj.name
    mode = fileobj.mode
    posn = fileobj.tell()
    fileobj.close()
    os.rename(name, newname)
    if mode.startswith("w"):
        mode = "a" + mode[1:]
    fileobj = open(name, mode)
    fileobj.seek(posn)
    return fileobj

f = rename_open_file(f, f.name + ".bak")
</snippet></ROW><ROW><id>6698143</id><snippet>file</snippet></ROW><ROW><id>6698143</id><snippet>name</snippet></ROW><ROW><id>6698143</id><snippet>open()</snippet></ROW><ROW><id>6698143</id><snippet>os.path.abspath()</snippet></ROW><ROW><id>6698143</id><snippet>from os.path import abspath
def open(filename, mode="r", open=open, *bufsize):
    return open(abspath(filename), mode, *bufsize)
</snippet></ROW><ROW><id>6698150</id><snippet>self</snippet></ROW><ROW><id>6698150</id><snippet>this</snippet></ROW><ROW><id>6698150</id><snippet>class Car(object):

  def __init__(self, make):

      # Set the user-defined 'make' property on the self object 
      self.make = make

      # Set the 'horn' property on the 'self' object to 'BEEEEEP'
      self.horn = 'BEEEEEP'

  def honk(self):

      # Now we can make some noise!
      print self.horn

# Create a new object of type Car, and attach it to the name `lambo`. 
# `lambo` in the code below refers to the exact same object as 'self' in the code above.

lambo = Car('Lamborghini')
print lambo.make
lambo.honk()
</snippet></ROW><ROW><id>6698185</id><snippet>ans = np.logical_and(
    np.logical_and(array1 != 0, array2 != 0),
    array1 == array2 )
</snippet></ROW><ROW><id>6698189</id><snippet>hasattr</snippet></ROW><ROW><id>6698189</id><snippet>variable</snippet></ROW><ROW><id>6698189</id><snippet>hasattr</snippet></ROW><ROW><id>6698189</id><snippet>hasattr</snippet></ROW><ROW><id>6698189</id><snippet>hasattr</snippet></ROW><ROW><id>6698189</id><snippet>&gt;&gt;&gt; class F(object):
...     pass
... 
&gt;&gt;&gt; f = F()
&gt;&gt;&gt; f.foo = 5
&gt;&gt;&gt; f.bar if hasattr(f, 'bar') else 10
10
&gt;&gt;&gt; f.foo if hasattr(f, 'foo') else 10
5
</snippet></ROW><ROW><id>6698189</id><snippet>f.foo</snippet></ROW><ROW><id>6698189</id><snippet>hasattr</snippet></ROW><ROW><id>6698189</id><snippet>False</snippet></ROW><ROW><id>6698189</id><snippet>f.foo = None</snippet></ROW><ROW><id>6698189</id><snippet>or</snippet></ROW><ROW><id>6698189</id><snippet>if k in d:</snippet></ROW><ROW><id>6698189</id><snippet>k</snippet></ROW><ROW><id>6698258</id><snippet>xlwt</snippet></ROW><ROW><id>6698258</id><snippet>xlrd</snippet></ROW><ROW><id>6698270</id><snippet>c_char_p</snippet></ROW><ROW><id>6698270</id><snippet>str</snippet></ROW><ROW><id>6698270</id><snippet>char *</snippet></ROW><ROW><id>6698270</id><snippet>LP_c_char</snippet></ROW><ROW><id>6698395</id><snippet>import itertools

def my_long_operation():
    return itertools.chain(do_something(), do_something_else())
</snippet></ROW><ROW><id>6698449</id><snippet>&gt;&gt;&gt; def nested_lists_to_tuples(ls):
    return tuple(nested_lists_to_tuples(l) if isinstance(l, (list, tuple)) else l for l in ls)

&gt;&gt;&gt; nested_lists_to_tuples([([1,2,3,4],2),([5,6,7],3)])
(((1, 2, 3, 4), 2), ((5, 6, 7), 3))
</snippet></ROW><ROW><id>6698449</id><snippet>[([1,(2, [3, 4, [5, 6, (7, 8)]]), 3, 4], 2), ([5, 6, 7], 3)]</snippet></ROW><ROW><id>6698449</id><snippet>&gt;&gt;&gt; nested_lists_to_tuples([([1, (2, [3, 4, [5, 6, (7, 8)]]), 3, 4], 2), ([5, 6, 7], 3)])
(((1, (2, (3, 4, (5, 6, (7, 8)))), 3, 4), 2), ((5, 6, 7), 3))
</snippet></ROW><ROW><id>6698539</id><snippet>apattern = '"*.{txt,log}"'
</snippet></ROW><ROW><id>6698539</id><snippet>find</snippet></ROW><ROW><id>6698539</id><snippet>apattern = '"*.txt" -o -name "*.log"'
</snippet></ROW><ROW><id>6698539</id><snippet>find {path} -name "*.txt" -o -name "*.log"
</snippet></ROW><ROW><id>6698700</id><snippet>pattern= r"\b%s\b" % text
Product.objects.filter(name__regex = pattern)
</snippet></ROW><ROW><id>6698781</id><snippet>#!/usr/bin/php</snippet></ROW><ROW><id>6698781</id><snippet>php-cgi</snippet></ROW><ROW><id>6698781</id><snippet>#!/usr/bin/php
Content-Type: text/html

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;PHP Test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;?php echo '&lt;p&gt;Hello World&lt;/p&gt;'; ?&gt; 
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>6699221</id><snippet>webbrowser.open('http://www.google.com/')
</snippet></ROW><ROW><id>6699231</id><snippet>class FancyCreature( Creature ):

    def __init__(self):
        super( FancyCreature, self ).__init___()

    def rise_hands(self, *args, **kwargs):
        print 'hands rised'
        super( FancyCreature, self ).rise_hands( *args, **kwargs )

    def new_method( self ):
        print "new method"
</snippet></ROW><ROW><id>6699231</id><snippet>rise_hands</snippet></ROW><ROW><id>6699389</id><snippet>print range[0]</snippet></ROW><ROW><id>6699389</id><snippet>str</snippet></ROW><ROW><id>6699389</id><snippet>repr</snippet></ROW><ROW><id>6699389</id><snippet>str</snippet></ROW><ROW><id>6699389</id><snippet>repr</snippet></ROW><ROW><id>6699389</id><snippet>print repr(curVal), repr(range[0])</snippet></ROW><ROW><id>6699423</id><snippet>C:\Python27\DLLs;C:\Python27\lib; C:\Python27\lib\plat-win; C:\Python27\lib\lib-tk</snippet></ROW><ROW><id>6699423</id><snippet>HOT_KEY_LOCAL_USER/Python/PythonCore/2.7/PythonPath</snippet></ROW><ROW><id>6699423</id><snippet>site</snippet></ROW><ROW><id>6699423</id><snippet>sys.path</snippet></ROW><ROW><id>6699423</id><snippet>sys.prefix</snippet></ROW><ROW><id>6699423</id><snippet>sys.exec_prefix</snippet></ROW><ROW><id>6699423</id><snippet>C:\Python27</snippet></ROW><ROW><id>6699423</id><snippet>lib/site-packages</snippet></ROW><ROW><id>6699423</id><snippet>C:\Python27; C:\Python27\lib\site-packages</snippet></ROW><ROW><id>6699423</id><snippet>.pth</snippet></ROW><ROW><id>6699423</id><snippet>easy_install.pth</snippet></ROW><ROW><id>6699423</id><snippet>pywin32.pth</snippet></ROW><ROW><id>6699423</id><snippet>setuptools.pth</snippet></ROW><ROW><id>6699423</id><snippet>.pth</snippet></ROW><ROW><id>6699423</id><snippet>sys.path</snippet></ROW><ROW><id>6699423</id><snippet>easy_install.pth</snippet></ROW><ROW><id>6699423</id><snippet>easy_install.pth</snippet></ROW><ROW><id>6699423</id><snippet>sys.path</snippet></ROW><ROW><id>6699423</id><snippet>pywin32.pth</snippet></ROW><ROW><id>6699423</id><snippet>setuptools.pth</snippet></ROW><ROW><id>6699423</id><snippet>sys.path</snippet></ROW><ROW><id>6699423</id><snippet>site-packages</snippet></ROW><ROW><id>6699423</id><snippet>.pth</snippet></ROW><ROW><id>6699608</id><snippet>for func, args in EVENT_MAPPING:
  func(*args)
</snippet></ROW><ROW><id>6699806</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6700128</id><snippet>authenticate()</snippet></ROW><ROW><id>6700128</id><snippet>authenticate()</snippet></ROW><ROW><id>6700138</id><snippet>__init__.py</snippet></ROW><ROW><id>6700138</id><snippet>Package
    __init__.py
    :: core
        __init__.py
        :: hash
            __init__.py
            :: hashgen.py
            :: validate.py
        :: common
            __init__.py
            :: classes.py
    :: tools
        __init__.py 
       :: database_validate.py
    :: bot.py
    :: config.py
</snippet></ROW><ROW><id>6700138</id><snippet>from package.core.hash.hashgen import *
</snippet></ROW><ROW><id>6700269</id><snippet>import multiprocessing

def processWorker(input, result):
    work = input.get()
    print work
    result.put(work*work)

input  = multiprocessing.Queue()
result = multiprocessing.Queue()

p = multiprocessing.Process(target = processWorker, args = (input, result))
p.start()

input.put(2)
res = result.get(block = True)
print res
</snippet></ROW><ROW><id>6700269</id><snippet>import queue
try:
    res = result.get(block = True, timeout = 10)
except Queue.Empty:
    print error
</snippet></ROW><ROW><id>6700434</id><snippet>class Class(object):

     _defaults = dict(kw0=42, kw1=None, kw2=True, kw3="Ni!")

     def __init__(self, **kwargs):

        # Raise exception if any non-supported keywords supplied
        if set(kwargs.keys()) - set(self._defaults.keys()):
            raise KeyError("unsupported keyword argument")

        # Update our instance with defaults, then keyword args
        self.__dict__.update(self._defaults)
        self.__dict__.update(kwargs)
</snippet></ROW><ROW><id>6700434</id><snippet>__init__()</snippet></ROW><ROW><id>6700434</id><snippet>null()</snippet></ROW><ROW><id>6700434</id><snippet>help()</snippet></ROW><ROW><id>6700434</id><snippet>.keys()</snippet></ROW><ROW><id>6700434</id><snippet>.values()</snippet></ROW><ROW><id>6700462</id><snippet>subprocess</snippet></ROW><ROW><id>6700489</id><snippet>Image.resize</snippet></ROW><ROW><id>6700489</id><snippet>im.resize(size)</snippet></ROW><ROW><id>6700489</id><snippet>im.resize(size, filter)</snippet></ROW><ROW><id>6700489</id><snippet>(width, height)</snippet></ROW><ROW><id>6700524</id><snippet>b=2</snippet></ROW><ROW><id>6700524</id><snippet>b</snippet></ROW><ROW><id>6700524</id><snippet>b</snippet></ROW><ROW><id>6700524</id><snippet>b</snippet></ROW><ROW><id>6700524</id><snippet>b=2</snippet></ROW><ROW><id>6700524</id><snippet>b</snippet></ROW><ROW><id>6700524</id><snippet>decorator</snippet></ROW><ROW><id>6700524</id><snippet>funcion()</snippet></ROW><ROW><id>6700524</id><snippet>b</snippet></ROW><ROW><id>6700524</id><snippet>b</snippet></ROW><ROW><id>6700524</id><snippet>kwargs</snippet></ROW><ROW><id>6700524</id><snippet>myfuncion()</snippet></ROW><ROW><id>6700524</id><snippet>b</snippet></ROW><ROW><id>6700524</id><snippet>decorator</snippet></ROW><ROW><id>6700658</id><snippet>_divTag.contents[2]</snippet></ROW><ROW><id>6700658</id><snippet>innerdiv.text</snippet></ROW><ROW><id>6700658</id><snippet>innerdiv.contents</snippet></ROW><ROW><id>6700658</id><snippet>innerdiv.findChildren()</snippet></ROW><ROW><id>6700658</id><snippet>&lt;div id=storytextp class=storytextp align=center style='padding:10px;'&gt; 
  &lt;div id=storytext class=storytext&gt; 
    &lt;div class='a2a_kit a2a_default_style' style='float:right;margin-left:10px;border:none;'&gt; 
      ..... extra stuff
    &lt;/div&gt;  **Main Content**
  &lt;/div&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>6700658</id><snippet>innerdiv.contents[0].replaceWith("")</snippet></ROW><ROW><id>6700734</id><snippet>pip install selenium
</snippet></ROW><ROW><id>6700734</id><snippet>easy_install selenium
</snippet></ROW><ROW><id>6700969</id><snippet>class Base(object):
    def get(...):
        # ...

Base = declarative_base(cls=Base)
</snippet></ROW><ROW><id>6701188</id><snippet>db.session.commit()</snippet></ROW><ROW><id>6701203</id><snippet>2 * ( ( 9 / 6 ) + 6 * x )</snippet></ROW><ROW><id>6701203</id><snippet>      *
2           +
         /     *
        9 6   6 x
</snippet></ROW><ROW><id>6701321</id><snippet>def float_dict(d):
    new_dict = {}
    for k,v in d.iteritems():
        if type(v) == dict:
            new_dict[k] = float_dict(v)
        else:
            new_dict[k] = float(v)
    return new_dict


&gt;&gt;&gt; d = { 'scores': 4, 'teams': { 'yellow': 11, 'blue': 4 } }
&gt;&gt;&gt; print float_dict(d)
{'scores': 4.0, 'teams': {'blue': 4.0, 'yellow': 11.0}}
</snippet></ROW><ROW><id>6701521</id><snippet>int</snippet></ROW><ROW><id>6701521</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>6701521</id><snippet>foo[foo.keys()[i]]</snippet></ROW><ROW><id>6701521</id><snippet>i</snippet></ROW><ROW><id>6701747</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d=defaultdict(lambda:(0,0))
&gt;&gt;&gt; for D in all_dictionaries:
...   weight = D['weight']
...   for k,v in D['data'].items():
...     d[k]=d[k][0]+weight*v,d[k][1]+weight
... 
&gt;&gt;&gt; dict((k,v[0]/v[1]) for k,v in d.items())
{'apples': 5, 'oranges': 7, 'bananas': 3}
</snippet></ROW><ROW><id>6701747</id><snippet>&gt;&gt;&gt; dict((k,1.*v[0]/v[1]) for k,v in d.items())
{'apples': 5.0, 'oranges': 7.0, 'bananas': 3.0}
</snippet></ROW><ROW><id>6701747</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>6701747</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>6701747</id><snippet>defaultdict(set)</snippet></ROW><ROW><id>6701747</id><snippet>&gt;&gt;&gt; d=defaultdict(int)
&gt;&gt;&gt; d[1]
0
&gt;&gt;&gt; d['foo']
0
</snippet></ROW><ROW><id>6701747</id><snippet>int()</snippet></ROW><ROW><id>6701747</id><snippet>&gt;&gt;&gt; d=defaultdict(lambda:1)
&gt;&gt;&gt; d[1]
1
&gt;&gt;&gt; d['foo']
1
</snippet></ROW><ROW><id>6701747</id><snippet>&gt;&gt;&gt; d=defaultdict(lambda:(0,0))
&gt;&gt;&gt; d[1]
(0, 0)
&gt;&gt;&gt; d['foo']
(0, 0)
</snippet></ROW><ROW><id>6701756</id><snippet>A[A==NDV]=numpy.nan
</snippet></ROW><ROW><id>6701927</id><snippet>def Evaluate(str):
  stack = []
  pushChars, popChars = "&lt;({[", "&gt;)}]"
  for c in str :
    if c in pushChars :
      stack.append(c)
    elif c in popChars :
      if not len(stack) :
        return False
      else :
        stackTop = stack.pop()
        balancingBracket = pushChars[popChars.index(c)]
        if stackTop != balancingBracket :
          return False
    else :
      return False
  return not len(stack)
</snippet></ROW><ROW><id>6701932</id><snippet>PUSH</snippet></ROW><ROW><id>6701932</id><snippet>PULL</snippet></ROW><ROW><id>6701932</id><snippet># server
import zmq

context = zmq.Context()
reciever = context.socket(zmq.PULL)
reciever.bind('tcp://127.0.0.1:5555')

while True:
    reciever.recv()

# client
import os, zmq

context = zmq.Context()
pusher = context.socket(zmq.PUSH)
pusher.connect('tcp://127.0.0.1:5555')

message = ' ' * 10485760

&gt;&gt;&gt; %timeit pusher.send(message)
100 loops, best of 3: 12.3 ms per loop
</snippet></ROW><ROW><id>6702447</id><snippet>sys.argv</snippet></ROW><ROW><id>6702447</id><snippet># foo.py
import sys

print sys.argv
</snippet></ROW><ROW><id>6702447</id><snippet>import sys
import shlex   # thanks Matt

old_argv = sys.argv
sys.argv = shlex.split('foo.py is a happy camper')

execfile('foo.py')
</snippet></ROW><ROW><id>6702447</id><snippet>$ python foo.py is a happy camper
['foo.py', 'is', 'a', 'happy', 'camper']
$ python bar.py 
['foo.py', 'is', 'a', 'happy', 'camper']
</snippet></ROW><ROW><id>6703248</id><snippet>simples3</snippet></ROW><ROW><id>6703248</id><snippet>S3Bucket</snippet></ROW><ROW><id>6703248</id><snippet>bucket.put('path/to/your/pdf/object/on/s3',
           pdf_object_bytes,
           headers={'Content-Disposition': 'attachment;filename=test.pdf'})
</snippet></ROW><ROW><id>6703385</id><snippet>Address.objects.filter(member=somemember)
</snippet></ROW><ROW><id>6703385</id><snippet>Address.objects.filter(member_id=somemember_pk)
</snippet></ROW><ROW><id>6703404</id><snippet>db.collection.update( criteria, objNew, upsert, multi )

Arguments:

    criteria - query which selects the record to update;
    objNew - updated object or $ operators (e.g., $inc) which manipulate the object
    upsert - if this should be an "upsert"; that is, if the record does not exist, insert it
    multi - if all documents matching criteria should be updated
</snippet></ROW><ROW><id>6703404</id><snippet>db.test.update({"x": "42"}, {"$set": {"a": "21"}},True)    
#True =&gt; Upsert is True
</snippet></ROW><ROW><id>6703677</id><snippet>.isBoundary</snippet></ROW><ROW><id>6703696</id><snippet>import os
import glob
for hgx in glob.glob("*_bac.hgx"):
  os.remove(hgx)
</snippet></ROW><ROW><id>6703980</id><snippet>itertools.tee()</snippet></ROW><ROW><id>6704040</id><snippet>start_point = max(i - words, 0)
</snippet></ROW><ROW><id>6704040</id><snippet>if</snippet></ROW><ROW><id>6704040</id><snippet>i - words</snippet></ROW><ROW><id>6704040</id><snippet>max</snippet></ROW><ROW><id>6704040</id><snippet>min</snippet></ROW><ROW><id>6704128</id><snippet>sleep(0.1)</snippet></ROW><ROW><id>6704128</id><snippet>socket.setsockopt(zmq.LINGER, -1)</snippet></ROW><ROW><id>6704196</id><snippet>r'(?&lt;![./])[a-z][a-z][0-9]'
</snippet></ROW><ROW><id>6704196</id><snippet>&gt;&gt;&gt; str = """http://www.test.com/aa4
... bx2 vq9 
... http://www.bh9.com/cj3
... """
&gt;&gt;&gt; re.findall(r'(?&lt;![./])[a-z][a-z][0-9]',str)
['bx2', 'vq9']
</snippet></ROW><ROW><id>6704196</id><snippet>r'[a-z][a-z][0-9]'</snippet></ROW><ROW><id>6704345</id><snippet>instancemethod</snippet></ROW><ROW><id>6704345</id><snippet>__call__</snippet></ROW><ROW><id>6704345</id><snippet>__getattr__</snippet></ROW><ROW><id>6704345</id><snippet>lambda</snippet></ROW><ROW><id>6704345</id><snippet>def</snippet></ROW><ROW><id>6704736</id><snippet>or</snippet></ROW><ROW><id>6704736</id><snippet>get_something() or y
</snippet></ROW><ROW><id>6704736</id><snippet>COALESCE</snippet></ROW><ROW><id>6704736</id><snippet>ISNULL</snippet></ROW><ROW><id>6704736</id><snippet>A or B or C
</snippet></ROW><ROW><id>6705081</id><snippet>resource</snippet></ROW><ROW><id>6705081</id><snippet> application = webapp.WSGIApplication(
          [(r'/files/(.*)', ServeHandler)], debug=True)
    run_wsgi_app(application)
</snippet></ROW><ROW><id>6705081</id><snippet>resource</snippet></ROW><ROW><id>6705081</id><snippet>/files/</snippet></ROW><ROW><id>6705081</id><snippet>localhost:8080/files/A2312ODESDX</snippet></ROW><ROW><id>6705081</id><snippet>A2312ODESDX</snippet></ROW><ROW><id>6705081</id><snippet>resource</snippet></ROW><ROW><id>6705359</id><snippet>lib</snippet></ROW><ROW><id>6705359</id><snippet>sys.path</snippet></ROW><ROW><id>6705359</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6705359</id><snippet>/usr/local</snippet></ROW><ROW><id>6705359</id><snippet>/opt</snippet></ROW><ROW><id>6705359</id><snippet>./configure --prefix=...</snippet></ROW><ROW><id>6705359</id><snippet>make</snippet></ROW><ROW><id>6705359</id><snippet>sudo make install</snippet></ROW><ROW><id>6705359</id><snippet>#!/usr/local/bin/python</snippet></ROW><ROW><id>6705359</id><snippet>docutils</snippet></ROW><ROW><id>6705359</id><snippet>cd projectDir
mkdir -p lib
tar xzvf ~/Downloads/docutils-0.8.tgz
mv docutils-0.8/docutils lib
rm -r docutils-0.8
</snippet></ROW><ROW><id>6705359</id><snippet>#!/usr/local/bin/python

import os
import sys
sys.path(os.path.join(os.path.dirname(sys.argv[0]), "lib"))
import docutils
</snippet></ROW><ROW><id>6705424</id><snippet>$PATH</snippet></ROW><ROW><id>6705424</id><snippet>/whatever/snake-program/</snippet></ROW><ROW><id>6705424</id><snippet>$PATH</snippet></ROW><ROW><id>6706336</id><snippet>iter</snippet></ROW><ROW><id>6706336</id><snippet>for x in v_i:
</snippet></ROW><ROW><id>6706599</id><snippet>def list_files(dirpath):
    files = []
    for dirname, dirnames, filenames in os.walk(dirpath):
        files += [os.path.join(dirname, filename) for filename in filenames]
    return files
</snippet></ROW><ROW><id>6706599</id><snippet>def list_files(dirpath):
    for dirname, dirnames, filenames in os.walk(dirpath):
        for filename in filenames:
            yield os.path.join(dirname, filename)
</snippet></ROW><ROW><id>6706599</id><snippet>def list_files(dirpath):
    dirpath = os.path.abspath(dirpath)
    for dirname, dirnames, filenames in os.walk(dirpath):
        for filename in filenames:
            yield os.path.join(dirname, filename)
</snippet></ROW><ROW><id>6706599</id><snippet>for filePath in list_files(dirpath):
    # Check that the file is an XML file.
    # Then handle the file.
</snippet></ROW><ROW><id>6706673</id><snippet>utc.tzinfo == pytz.utc # returns True if utc in UTC
</snippet></ROW><ROW><id>6706673</id><snippet>now = datetime.datetime.now(pytz.utc)
now.tzinfo == pytz.utc # returns True

now = now.astimezone(pytz.timezone('America/Los_Angeles'))
now.tzinfo == pytz.utc # returns False
</snippet></ROW><ROW><id>6706726</id><snippet>This could correspond to a constant, a callable function, or a SQL clause.
</snippet></ROW><ROW><id>6706733</id><snippet>holder</snippet></ROW><ROW><id>6706733</id><snippet>class Pop(object):
    def __init__(self):
        self.boobs = 16
        self.sent = "pop"
    def together(self):
        print "%s : %i" % (self.sent, self.boobs)

pop = Pop()

pop.together()
</snippet></ROW><ROW><id>6706774</id><snippet>Graph</snippet></ROW><ROW><id>6706774</id><snippet>{(x,y):node}</snippet></ROW><ROW><id>6706774</id><snippet>__setitem__</snippet></ROW><ROW><id>6706774</id><snippet>Node</snippet></ROW><ROW><id>6706774</id><snippet>Node</snippet></ROW><ROW><id>6706774</id><snippet>__delitem__</snippet></ROW><ROW><id>6706774</id><snippet>Node</snippet></ROW><ROW><id>6706774</id><snippet>get_node_at(self, x, y)</snippet></ROW><ROW><id>6706774</id><snippet>return self.index[(x,y)]</snippet></ROW><ROW><id>6706799</id><snippet>startproject</snippet></ROW><ROW><id>6706799</id><snippet>SECRET_KEY</snippet></ROW><ROW><id>6707003</id><snippet>out_file = open(outp, "w")
sub = subprocess.call(['sed', 's/\"//g', inp], stdout=out_file )
</snippet></ROW><ROW><id>6707507</id><snippet>import pytz, datetime, time
import os

originalTimeStamp = os.stat("/tmp/file-from-us-west-coast").st_mtime

# prints e.g. 2010-03-31 13:01:18
print "original:",datetime.datetime.fromtimestamp(originalTimeStamp)

# re-interpret 
originalTimeZone = "America/Los_Angeles"
targetTimeZone   = "Europe/Paris"

newTimeStamp = pytz.timezone(originalTimeZone).localize(datetime.datetime.fromtimestamp(originalTimeStamp)).astimezone(pytz.timezone(targetTimeZone))

# prints e.g. 2010-03-31 22:01:18+02:00
print "new:     ",newTimeStamp

# convert back to seconds since epoch
newTimeStamp = time.mktime(newTimeStamp.timetuple())

# print time difference in hours
print (newTimeStamp - originalTimeStamp) / 3600.0
</snippet></ROW><ROW><id>6707625</id><snippet>&gt;&gt;&gt; re.search('(?&lt;!/)foo', 'foo')
&lt;_sre.SRE_Match object at 0x7f44891518b8&gt;
&gt;&gt;&gt; re.search('(?&lt;!/)foo', '/foo')
&gt;&gt;&gt; re.search('(?&lt;!/)foo', 'barfoo')
&lt;_sre.SRE_Match object at 0x7f4489151850&gt;
</snippet></ROW><ROW><id>6707641</id><snippet>delattr(rv, 'size')</snippet></ROW><ROW><id>6707641</id><snippet>del rv.size</snippet></ROW><ROW><id>6707641</id><snippet>size</snippet></ROW><ROW><id>6707641</id><snippet>__dict__</snippet></ROW><ROW><id>6707641</id><snippet>__dict__</snippet></ROW><ROW><id>6707641</id><snippet>hasattr</snippet></ROW><ROW><id>6707641</id><snippet>True</snippet></ROW><ROW><id>6707641</id><snippet>__new__</snippet></ROW><ROW><id>6707641</id><snippet>__new__</snippet></ROW><ROW><id>6707641</id><snippet>__new__</snippet></ROW><ROW><id>6707677</id><snippet>chardet</snippet></ROW><ROW><id>6707855</id><snippet>def lokes(self, power, time):
    # this reassigns speed, so next time the function is called, 
    # it will be higher.
    self.speed=self.speed+ power*time/ self.mass
</snippet></ROW><ROW><id>6707855</id><snippet>speed</snippet></ROW><ROW><id>6707855</id><snippet>energy</snippet></ROW><ROW><id>6707855</id><snippet>speed</snippet></ROW><ROW><id>6707855</id><snippet>energy</snippet></ROW><ROW><id>6707855</id><snippet>0</snippet></ROW><ROW><id>6707863</id><snippet>&gt;&gt;&gt; import alphanum
&gt;&gt;&gt; unsorted = ['NASEC-100', 'NASEC-200', 'NASEC-99', 'NASEC-101']
&gt;&gt;&gt; sorted = unsorted[:]
&gt;&gt;&gt; sorted.sort(alphanum.alphanum)
&gt;&gt;&gt; sorted
['NASEC-99', 'NASEC-100', 'NASEC-101', 'NASEC-200']
</snippet></ROW><ROW><id>6707963</id><snippet>summarize_address_range(first, last):
"""Summarize a network range given the first and last IP addresses.

Example:
    &gt;&gt;&gt; summarize_address_range(IPv4Address('1.1.1.0'),
        IPv4Address('1.1.1.130'))
    [IPv4Network('1.1.1.0/25'), IPv4Network('1.1.1.128/31'),
    IPv4Network('1.1.1.130/32')]

Args:
    first: the first IPv4Address or IPv6Address in the range.
    last: the last IPv4Address or IPv6Address in the range.

Returns:
    The address range collapsed to a list of IPv4Network's or
    IPv6Network's.

Raise:
    TypeError:
        If the first and last objects are not IP addresses.
        If the first and last objects are not the same version.
    ValueError:
        If the last object is not greater than the first.
        If the version is not 4 or 6.
"""
</snippet></ROW><ROW><id>6708076</id><snippet>text.usetex</snippet></ROW><ROW><id>6708171</id><snippet>get_by_id
</snippet></ROW><ROW><id>6708174</id><snippet>from parser import HostInfo

obj = HostInfo(&lt;whatever host_id you need here&gt;)
obj.get_id
</snippet></ROW><ROW><id>6708827</id><snippet>Q</snippet></ROW><ROW><id>6708827</id><snippet>name_query = Institution.objects.filter(name__icontains='term')
aliases_query = Institution.objects.filter(aliases__name__icontains='term')
final_query = list(name_query) + list(aliases_query)
</snippet></ROW><ROW><id>6709235</id><snippet>ERROR    2011-07-15 15:01:07,664 __init__.py:463] 'User' object has no attribute '_User__email'
</snippet></ROW><ROW><id>6709235</id><snippet>__init__.py</snippet></ROW><ROW><id>6709235</id><snippet>User</snippet></ROW><ROW><id>6709235</id><snippet>User</snippet></ROW><ROW><id>6709235</id><snippet>_User__email</snippet></ROW><ROW><id>6709235</id><snippet>__email</snippet></ROW><ROW><id>6709262</id><snippet>self.__dict__</snippet></ROW><ROW><id>6709262</id><snippet>name</snippet></ROW><ROW><id>6709262</id><snippet>count</snippet></ROW><ROW><id>6709262</id><snippet>class Foo(object):
    def __init__(self, name):
        self._name = name
        self._count = 0
    def getName(self):
        return self._name
    name = property(getName)
    def getCount(self):
        c = self._count
        self._count += 1
        return c
    count = property(getCount)
    def __repr__(self):
        return "Foo %s count=%d" % (self.name, self.count)
</snippet></ROW><ROW><id>6709262</id><snippet>&gt;&gt;&gt; f = Foo("name")
&gt;&gt;&gt; repr(f)
'Foo name count=0'
&gt;&gt;&gt; repr(f)
'Foo name count=1'
&gt;&gt;&gt; repr(f)
'Foo name count=2'
</snippet></ROW><ROW><id>6709262</id><snippet>def __repr__(self):
    return "Foo %(name)s count=%(count)d" % {'name': self.name, 'count': self.count}
</snippet></ROW><ROW><id>6709329</id><snippet>ZipFile.infolist()</snippet></ROW><ROW><id>6709401</id><snippet>popen</snippet></ROW><ROW><id>6709401</id><snippet>pclose</snippet></ROW><ROW><id>6709954</id><snippet> &gt;&gt;&gt; s1=[1,8,3,9,4,9,3,8,1,2,3]
 &gt;&gt;&gt; s2=[1,8,1,3,9,4,9,3,8,1,2,3]
 &gt;&gt;&gt; sm=difflib.SequenceMatcher(None,s1,s2)
 &gt;&gt;&gt; sm.ratio()
 0.9565217391304348
</snippet></ROW><ROW><id>6710031</id><snippet>from datetime import *
from pytz import timezone
import pytz

[...]

if (not isinstance(pacificTime, int)):
    pacificTime = int(pacificTime)
originalTimeZone = "America/Los_Angeles"
print datetime.fromtimestamp(pacificTime, pytz.timezone(originalTimeZone))
</snippet></ROW><ROW><id>6710078</id><snippet>unicode.encode(encoding='utf8')</snippet></ROW><ROW><id>6710078</id><snippet>&gt;&gt;&gt; u'\u0ca0_\u0ca0'.encode('utf8')
'\xe0\xb2\xa0_\xe0\xb2\xa0'
</snippet></ROW><ROW><id>6710726</id><snippet>numpy.delete</snippet></ROW><ROW><id>6710726</id><snippet>a = np.random.randint(0,2,size=(48,366,3))
b = np.delete(a,np.s_[-1:],1)
print b.shape # &lt;--- (48,365,3)
</snippet></ROW><ROW><id>6710726</id><snippet>b = np.delete(a,-1,1)
</snippet></ROW><ROW><id>6710726</id><snippet>b = a[:,:-1,:]
</snippet></ROW><ROW><id>6710736</id><snippet>os.listdir()</snippet></ROW><ROW><id>6710736</id><snippet>'foo.f90' in os.listdir('PATH_TO_DIRECTORY')
</snippet></ROW><ROW><id>6710786</id><snippet>shell=True</snippet></ROW><ROW><id>6710786</id><snippet>stdin=subprocess.PIPE</snippet></ROW><ROW><id>6710786</id><snippet>Host</snippet></ROW><ROW><id>6710786</id><snippet>import subprocess

f = open('http_answer', 'w')
_,log = subprocess.Popen(
    ['openssl', 's_client', '-quiet', '-connect', 'twitter.com:443'],
    stdout=f, stderr=subprocess.PIPE, stdin=subprocess.PIPE
).communicate('GET / HTTP/1.0\r\n\r\n')
print('Output of SSL:\n' + log)
</snippet></ROW><ROW><id>6710971</id><snippet>close</snippet></ROW><ROW><id>6710971</id><snippet>#!/usr/bin/env python

import os, sys
from pyinotify import WatchManager, Notifier, ProcessEvent, EventsCodes

def Monitor(path):
    class PClose(ProcessEvent):
        def process_IN_CLOSE(self, event):
            f = event.name and os.path.join(event.path, event.name) or event.path
            print 'close event: ' + f

    wm = WatchManager()
    notifier = Notifier(wm, PClose())
    wm.add_watch(path, EventsCodes.IN_CLOSE_WRITE|EventsCodes.IN_CLOSE_NOWRITE)

    try:
        while 1:
            notifier.process_events()
            if notifier.check_events():
                notifier.read_events()
    except KeyboardInterrupt:
        notifier.stop()
        return


if __name__ == '__main__':
    try:
        path = sys.argv[1]
    except IndexError:
        print 'use: %s dir' % sys.argv[0]
    else:
        Monitor(path)
</snippet></ROW><ROW><id>6710971</id><snippet>FILE_NOTIFY_CHANGE_SIZE</snippet></ROW><ROW><id>6710971</id><snippet>import os

import win32file
import win32event
import win32con

path_to_watch = os.path.abspath (".")

#
# FindFirstChangeNotification sets up a handle for watching
#  file changes. The first parameter is the path to be
#  watched; the second is a boolean indicating whether the
#  directories underneath the one specified are to be watched;
#  the third is a list of flags as to what kind of changes to
#  watch for. We're just looking at file additions / deletions.
#
change_handle = win32file.FindFirstChangeNotification (
  path_to_watch,
  0,
  win32con.FILE_NOTIFY_CHANGE_FILE_NAME
)

#
# Loop forever, listing any file changes. The WaitFor... will
#  time out every half a second allowing for keyboard interrupts
#  to terminate the loop.
#
try:

  old_path_contents = dict ([(f, None) for f in os.listdir (path_to_watch)])
  while 1:
    result = win32event.WaitForSingleObject (change_handle, 500)

    #
    # If the WaitFor... returned because of a notification (as
    #  opposed to timing out or some error) then look for the
    #  changes in the directory contents.
    #
    if result == win32con.WAIT_OBJECT_0:
      new_path_contents = dict ([(f, None) for f in os.listdir (path_to_watch)])
      added = [f for f in new_path_contents if not f in old_path_contents]
      deleted = [f for f in old_path_contents if not f in new_path_contents]
      if added: print "Added: ", ", ".join (added)
      if deleted: print "Deleted: ", ", ".join (deleted)

      old_path_contents = new_path_contents
      win32file.FindNextChangeNotification (change_handle)

finally:
  win32file.FindCloseChangeNotification (change_handle)
</snippet></ROW><ROW><id>6711233</id><snippet>isinstance</snippet></ROW><ROW><id>6711233</id><snippet>collections.Iterable</snippet></ROW><ROW><id>6711233</id><snippet>import collections

def get_iterable(x):
    if isinstance(x, collections.Iterable):
        return x
    else:
        return (x,)
</snippet></ROW><ROW><id>6711233</id><snippet>basestring</snippet></ROW><ROW><id>6711233</id><snippet>    if isinstance(x, collections.Iterable) and not isinstance(x, basestring):
</snippet></ROW><ROW><id>6711233</id><snippet>isinstance</snippet></ROW><ROW><id>6711233</id><snippet>hasattr(x, '__iter__')</snippet></ROW><ROW><id>6711233</id><snippet>__iter__</snippet></ROW><ROW><id>6711233</id><snippet>collections.Iterable</snippet></ROW><ROW><id>6711233</id><snippet>collections.Iterable</snippet></ROW><ROW><id>6711233</id><snippet>collections.Iterable</snippet></ROW><ROW><id>6711233</id><snippet>__subclasshook__</snippet></ROW><ROW><id>6711233</id><snippet>&gt;&gt;&gt; class MyIter(object):
...     def __iter__(self):
...         return iter(range(10))
... 
&gt;&gt;&gt; i = MyIter()
&gt;&gt;&gt; isinstance(i, collections.Iterable)
True
&gt;&gt;&gt; collections.Iterable.__subclasshook__(type(i))
True
</snippet></ROW><ROW><id>6711326</id><snippet>map()</snippet></ROW><ROW><id>6711326</id><snippet>sum()</snippet></ROW><ROW><id>6711611</id><snippet>cd Imaging-1.1.7/
python setup.py install
</snippet></ROW><ROW><id>6711631</id><snippet>p.sub('gray \\1', s)
</snippet></ROW><ROW><id>6711631</id><snippet>p.sub(r'gray \1', s)
</snippet></ROW><ROW><id>6711807</id><snippet>globals</snippet></ROW><ROW><id>6711807</id><snippet>locals</snippet></ROW><ROW><id>6711807</id><snippet>eval</snippet></ROW><ROW><id>6711807</id><snippet>def test(e1, d1):
    return eval(e1, globals(), d1)
</snippet></ROW><ROW><id>6711807</id><snippet>vars</snippet></ROW><ROW><id>6711807</id><snippet>globals()</snippet></ROW><ROW><id>6711807</id><snippet>e1</snippet></ROW><ROW><id>6712339</id><snippet>tail -f</snippet></ROW><ROW><id>6712339</id><snippet>python long_running_script.py &amp;&amp; tail -f log_file | python filter_logs.py
</snippet></ROW><ROW><id>6712339</id><snippet>while true:
    line = sys.stdin.readline()
    if filter_line(line): print line
</snippet></ROW><ROW><id>6712482</id><snippet>import threading, importedlib

class Child:
    def __init__(self, parent):
        self.parent=parent

    def run(self):
        importedlib.runajob(parent.VAL1, parent.VAL2)



class Mother(threading.Thread):
    def __init__(self,val1,val2):
        self.VAL1 = val1
        self.VAL2 = val2

    def connectandrun():
        c= Child(self)
        for i in range(5):
            c.run(i)
</snippet></ROW><ROW><id>6712550</id><snippet>showdown.js</snippet></ROW><ROW><id>6712550</id><snippet>var converter = new Showdown.converter();
var input = $("textarea");
var preview = $("#preview");
$(input).keyup(function() {
    preview.html(converter.makeHtml(input.val());
});
</snippet></ROW><ROW><id>6712656</id><snippet>charset='utf8'</snippet></ROW><ROW><id>6712656</id><snippet>MySQLdb.connect()</snippet></ROW><ROW><id>6712656</id><snippet>CREATE DATABASE somedatabase DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;
</snippet></ROW><ROW><id>6712656</id><snippet>mysql&gt; show variables like 'character_set%';
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | latin1                     |
| character_set_connection | latin1                     |
| character_set_database   | utf8                       |
| character_set_filesystem | binary                     |
| character_set_results    | latin1                     |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
</snippet></ROW><ROW><id>6712656</id><snippet>SET NAMES UTF8</snippet></ROW><ROW><id>6712656</id><snippet>mysql&gt; SET NAMES UTF8;
mysql&gt; show variables like 'character_set%';
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | utf8                       |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
</snippet></ROW><ROW><id>6712656</id><snippet>charset='utf8'</snippet></ROW><ROW><id>6712656</id><snippet>SET NAMES UTF8</snippet></ROW><ROW><id>6712783</id><snippet>import traceback

def magic():
   return traceback.extract_stack()[-2][2]

class Something(object):
   print magic()
</snippet></ROW><ROW><id>6712821</id><snippet>html = """\
&lt;html&gt;
  Message
  Hi {0:}, (Need to be updated from Array[1])
     starting on {1:} (Should ready from date = time.strftime("%m-%d-%y"))

  {2:} (Should be replaced with Array[2]) is the 3LS lead for this week.\n

  Let me know if you have any questions,

""".format(Array[1], time.strftime("%m-%d-%y"), Array[2])
</snippet></ROW><ROW><id>6712852</id><snippet>&gt;&gt;&gt; y = [(1, 2), (3, 5)]
&gt;&gt;&gt; d = {1: 'a', 2: 'c', 3: 'n', 4: 'y', 5: 'u'}
&gt;&gt;&gt;
&gt;&gt;&gt; [(d[k], d[v]) for k,v in y]
[('a', 'c'), ('n', 'u')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6712886</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6712917</id><snippet>re.split()</snippet></ROW><ROW><id>6713187</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree as etree
&gt;&gt;&gt; corpus = '''&lt;category1&gt;
...       &lt;subcategory&gt;
...         entry1
...         entry2
...       &lt;/subcategory&gt;
... &lt;/category1&gt;
... '''
&gt;&gt;&gt; doc = etree.fromstring(corpus)
&gt;&gt;&gt; for subcategory in doc.getchildren():
...     for entry in filter(bool,
...                         map(str.strip,
...                             subcategory.text.split('\n'))):
...         print "entry output: (%s)" % entry
...     print "subcategory output (%s)" % subcategory.tag
... 
entry output: (entry1)
entry output: (entry2)
subcategory output (subcategory)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6713242</id><snippet>BASE_URL='http://google.com'
HEADERS = {"accept-language":"klingon"}
import urllib, urllib2
def get_response(self, url, params):
    r"""
    &gt;&gt;&gt; from minimock import Mock
    &gt;&gt;&gt; urllib2.Request = Mock('urllib2.Request')
    &gt;&gt;&gt; urllib2.urlopen = Mock('urllib2.urlopen')
    &gt;&gt;&gt; get_response(None, 'http://google.com', {'foo':'bar'})
    Called urllib2.Request(
        'http://google.com',
        headers={'accept-language': 'klingon'})
    Called urllib2.urlopen(None, 'foo=bar')
    &gt;&gt;&gt; 
    """
    encoded_params = urllib.urlencode(params)
    request = urllib2.Request(BASE_URL, headers=HEADERS)
    response = urllib2.urlopen(request, encoded_params)
    return response
</snippet></ROW><ROW><id>6713283</id><snippet>pattern = r"the (.+_.+)-SomeWord-(.+)"
groups = [(("Artist", "Album"), "_"), ("Year", None)]
</snippet></ROW><ROW><id>6713283</id><snippet>Artist</snippet></ROW><ROW><id>6713283</id><snippet>Album</snippet></ROW><ROW><id>6713283</id><snippet>Artist</snippet></ROW><ROW><id>6713283</id><snippet>Album</snippet></ROW><ROW><id>6713283</id><snippet>_</snippet></ROW><ROW><id>6713283</id><snippet>Year</snippet></ROW><ROW><id>6713283</id><snippet>None</snippet></ROW><ROW><id>6713283</id><snippet>&gt;&gt;&gt; get_mp3_info(groups, pattern, "the Beatles_Abbey_Road-SomeWord-1969")
[{'Album': 'Abbey_Road', 'Year': '1969', 'Artist': 'Beatles'}, {'Album': 'Road', 'Year': '1969', 'Artist': 'Beatles_Abbey'}]
</snippet></ROW><ROW><id>6713283</id><snippet>import re
from itertools import combinations

def get_mp3_info(groups, pattern, title):
    match = re.match(pattern, title)
    if not match:
        return []
    result = [{}]
    for i, v in enumerate(groups):
        if v[1] is None:
            for r in result:
                r[v[0]] = match.group(i+1)
        else:
            splits = match.group(i+1).split(v[1])
            before = [d.copy() for d in result]
            for comb in combinations(range(1, len(splits)), len(v[0])-1):
                temp = [d.copy() for d in before]
                comb = (None,) + comb + (None,)
                for j, split in enumerate(zip(comb, comb[1:])):
                    for t in temp:
                        t[v[0][j]] = v[1].join(splits[split[0]:split[1]])

                if v[0][0] in result[0]:
                    result.extend(temp)
                else:
                    result = temp
    return result
</snippet></ROW><ROW><id>6713283</id><snippet>&gt;&gt;&gt; pprint.pprint(get_mp3_info([(("Artist", "Title"), "-")],
...               r"(.+-.+)", "Bob-Marley-Roots-Rock-Reggae"))
[{'Artist': 'Bob', 'Title': 'Marley-Roots-Rock-Reggae'},
 {'Artist': 'Bob-Marley', 'Title': 'Roots-Rock-Reggae'},
 {'Artist': 'Bob-Marley-Roots', 'Title': 'Rock-Reggae'},
 {'Artist': 'Bob-Marley-Roots-Rock', 'Title': 'Reggae'}]
</snippet></ROW><ROW><id>6713768</id><snippet>threading.Thread</snippet></ROW><ROW><id>6713768</id><snippet>import threading, Queue #queue in 3.x

my_queue = Queue.Queue()

def go(*args):
    my_thread = threading.Thread(target=function_that_does_stuff)

def function_that_does_stuff():
    my_queue.put("Logging in...")
    do_lots_of_stuff()
    my_queue.put("Doing stuff #1...")
    do_even_more_stuff()
    my_queue.put("Success!")
</snippet></ROW><ROW><id>6713768</id><snippet>def OnUpdate(*args):
    try:
        status_text.set(my_queue.get())
    except Queue.Empty:
        pass
</snippet></ROW><ROW><id>6713772</id><snippet>pygtk.require('2.0')
</snippet></ROW><ROW><id>6713772</id><snippet>2.0</snippet></ROW><ROW><id>6714149</id><snippet>def staticAssignInBase():
    global x
    x = 'someValue'

def dynamicAssignInBase():
    g = globals()
    g['someVarName'] = 'someValue'
</snippet></ROW><ROW><id>6714180</id><snippet>import sys

if __name__ == "__main__":
    converter(sys.argv[1])
</snippet></ROW><ROW><id>6714197</id><snippet>class list1(list):
    """One-based version of list."""

    def _zerobased(self, i):
        if type(i) is slice:
            return slice(self._zerobased(i.start),
                         self._zerobased(i.stop), i.step)
        else:
            if i is None or i &lt; 0:
                return i
            elif not i:
                raise IndexError("element 0 does not exist in 1-based list")
            return i - 1

    def __getitem__(self, i):
        return list.__getitem__(self, self._zerobased(i))

    def __setitem__(self, i, value):
        list.__setitem__(self, self._zerobased(i), value)

    def __delitem__(self, i):
        list.__delitem__(self, self._zerobased(i))

    def __getslice__(self, i, j):
        print i,j
        return list.__getslice__(self, self._zerobased(i or 1),
                                 self._zerobased(j))

    def __setslice__(self, i, j, value):
        list.__setslice__(self, self._zerobased(i or 1),
                          self._zerobased(j), value)

    def index(self, value, start=1, stop=-1):
        return list.index(self, value, self._zerobased(start),
                          self._zerobased(stop)) + 1

    def pop(self, i):
        return list.pop(self, self._zerobased(i))
</snippet></ROW><ROW><id>6714197</id><snippet>ExtraItemList</snippet></ROW><ROW><id>6714313</id><snippet>Queue.Queue</snippet></ROW><ROW><id>6714313</id><snippet>super</snippet></ROW><ROW><id>6714313</id><snippet>Queue.Queue</snippet></ROW><ROW><id>6714313</id><snippet>object</snippet></ROW><ROW><id>6714313</id><snippet>class myQueue(Queue.Queue, object):
    def __init__(self):
        super(myQueue, self).__init__()
</snippet></ROW><ROW><id>6714479</id><snippet>for</snippet></ROW><ROW><id>6714479</id><snippet>OR</snippet></ROW><ROW><id>6714479</id><snippet>__in=</snippet></ROW><ROW><id>6714496</id><snippet>Ok:1</snippet></ROW><ROW><id>6714496</id><snippet>iamNewList = [e.rstrip() + 'Ok:1' for e in iamList]
</snippet></ROW><ROW><id>6714496</id><snippet>iamNewList = []
for e in iamList:
    iamNewList.append(e.rstrip() + 'Ok:1')
</snippet></ROW><ROW><id>6714496</id><snippet>rstrip</snippet></ROW><ROW><id>6714537</id><snippet>allFilesIn</snippet></ROW><ROW><id>6714537</id><snippet>os.listdir</snippet></ROW><ROW><id>6714537</id><snippet>def allFilesIn(b='.'):
    result = []
    for d in os.listdir(b):
        bd = os.path.join(b, d)
        result.append(bd)
    return result
</snippet></ROW><ROW><id>6714537</id><snippet>def all_files_in(path='.'):
    return [os.path.join(path, f) for f in os.listdir(path)]
</snippet></ROW><ROW><id>6714552</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>6714552</id><snippet>&lt;/li&gt;</snippet></ROW><ROW><id>6714552</id><snippet>&lt;a&gt;&lt;/a&gt;</snippet></ROW><ROW><id>6714552</id><snippet>&lt;a/&gt;</snippet></ROW><ROW><id>6714552</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>6714552</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>6714552</id><snippet>readability counts</snippet></ROW><ROW><id>6714866</id><snippet>def utf8len(s):
    return len(s.encode('utf-8'))
</snippet></ROW><ROW><id>6715338</id><snippet>outparam</snippet></ROW><ROW><id>6715338</id><snippet>sqlalchemy.sql.expression.outparam(key, type_=None)</snippet></ROW><ROW><id>6715519</id><snippet>from info import info
</snippet></ROW><ROW><id>6715519</id><snippet>import info</snippet></ROW><ROW><id>6715519</id><snippet>info</snippet></ROW><ROW><id>6715519</id><snippet>waybill</snippet></ROW><ROW><id>6715519</id><snippet>module</snippet></ROW><ROW><id>6715522</id><snippet>set(map(lambda url: url.rstrip('/'), myList))
</snippet></ROW><ROW><id>6715552</id><snippet>3 * 3.0</snippet></ROW><ROW><id>6715552</id><snippet>(3.0).__rmul__(3)</snippet></ROW><ROW><id>6715552</id><snippet>(3).__mul__(3.0)</snippet></ROW><ROW><id>6715552</id><snippet>__mul__</snippet></ROW><ROW><id>6715552</id><snippet>__rmul__</snippet></ROW><ROW><id>6715552</id><snippet>3 * 3.5</snippet></ROW><ROW><id>6715552</id><snippet>9</snippet></ROW><ROW><id>6715552</id><snippet>10.5</snippet></ROW><ROW><id>6715552</id><snippet>map</snippet></ROW><ROW><id>6715552</id><snippet>def __mul__(self, scalar):
    return Vector(scalar * j for j in self)
</snippet></ROW><ROW><id>6715666</id><snippet>cbar.set_ticks([mn,md,mx])
cbar.set_ticklabels([mn,md,mx])
</snippet></ROW><ROW><id>6716260</id><snippet>match = re.search(r"\s+id\s+(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3}),\s+data\s+(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3}),\s+Type Transit\s+(\d{1,2})", subject)
if match:
    id   = ".".join(match.group(1,2,3,4))
    data = ".".join(match.group(5,6,7,8))
else:
    # Match attempt failed
</snippet></ROW><ROW><id>6716350</id><snippet>"%s%s%s"%([str(x.name) for x in self.categories.all()],…)</snippet></ROW><ROW><id>6716350</id><snippet>"%s-%s%s" % (','.join(str(x.name) for x in self.categories.all()),…)</snippet></ROW><ROW><id>6716664</id><snippet>sys.path</snippet></ROW><ROW><id>6716664</id><snippet>pycurl</snippet></ROW><ROW><id>6716664</id><snippet>pycurl</snippet></ROW><ROW><id>6716664</id><snippet>sys.path.insert(1, '/path/to/my-pycurl')</snippet></ROW><ROW><id>6716664</id><snippet>pycurl</snippet></ROW><ROW><id>6717238</id><snippet>def Comment(models.Model):
    profile = models.ForeignKey(UserProfile)
    product = models.ForeignKey(Profile)
</snippet></ROW><ROW><id>6717238</id><snippet>def Comment(models.Model):
    ...
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>6717275</id><snippet>Queue</snippet></ROW><ROW><id>6717275</id><snippet>Queue</snippet></ROW><ROW><id>6717408</id><snippet>__init__</snippet></ROW><ROW><id>6717408</id><snippet>class PersonnelForm(forms.Form):
    """
    Form for creating a new personnel.
    """
    username = forms.RegexField(
        required=True, max_length=30, label=_("Name")
    )
    is_manager = forms.BooleanField(
        required=True, label=_("Is Manager")
    )

    def __init__(self, *args, **kwargs):
        delete_some_field = kwargs.get('delete_some_field', False)
        if 'delete_some_field' in kwargs:
            del kwargs['delete_some_field']
        super(PersonnelForm, self).__init__(*args, **kwargs)
        if delete_some_field:
            del self.fields['is_manager']
            # or
            self.fields['is_manager'].widget = something_else

#views.py
form = PersonnelForm(...., delete_some_field=True)
</snippet></ROW><ROW><id>6718322</id><snippet>some 'long' string \' and \" some 'escaped' strings
</snippet></ROW><ROW><id>6718322</id><snippet>&gt;&gt;&gt; s1 = open('data.txt', 'r').read().strip()
&gt;&gt;&gt; s1
'some \'long\' string \\\' and \\" some \'escaped\' strings'
&gt;&gt;&gt; print s1
some 'long' string \' and \" some 'escaped' strings
</snippet></ROW><ROW><id>6718322</id><snippet>&gt;&gt;&gt; s2 = '''some 'long' string \' and \" some 'escaped' strings'''
&gt;&gt;&gt; s2
'some \'long\' string \' and " some \'escaped\' strings'
&gt;&gt;&gt; print s2
some 'long' string ' and " some 'escaped' strings
&gt;&gt;&gt; len(s)
49
</snippet></ROW><ROW><id>6718322</id><snippet>&gt;&gt;&gt; s3 = r'''some 'long' string \' and \" some 'escaped' strings'''
'some \'long\' string \\\' and \\" some \'escaped\' strings'
&gt;&gt;&gt; print s3
some 'long' string \' and \" some 'escaped' strings
&gt;&gt;&gt; s1 == s3
True
</snippet></ROW><ROW><id>6718322</id><snippet>'</snippet></ROW><ROW><id>6718322</id><snippet>r''</snippet></ROW><ROW><id>6718322</id><snippet>r''''''</snippet></ROW><ROW><id>6718322</id><snippet>&gt;&gt;&gt; print re.sub(r'''\\['"]''', 'thevalue', s1)
some 'long' string thevalue and thevalue some 'escaped' strings
</snippet></ROW><ROW><id>6718322</id><snippet>&gt;&gt;&gt; print s1.replace(r'\"', 'thevalue').replace(r"\'", 'thevalue')
some 'long' string thevalue and thevalue some 'escaped' strings
</snippet></ROW><ROW><id>6718392</id><snippet>expr for vars in iterable</snippet></ROW><ROW><id>6718392</id><snippet>X(expr for vars in iterable)</snippet></ROW><ROW><id>6718392</id><snippet>(key, value)</snippet></ROW><ROW><id>6718392</id><snippet>dict</snippet></ROW><ROW><id>6718392</id><snippet>(key, value)</snippet></ROW><ROW><id>6718392</id><snippet>def one_to_three_doubles():
    for num in range(1, 4):
        yield num, num * 2
</snippet></ROW><ROW><id>6718435</id><snippet># Return the longest prefix of all list elements.
def commonprefix(m):
    "Given a list of pathnames, returns the longest common leading component"
    if not m: return ''
    s1 = min(m)
    s2 = max(m)
    for i, c in enumerate(s1):
        if c != s2[i]:
            return s1[:i]
    return s1
</snippet></ROW><ROW><id>6718628</id><snippet>which python
</snippet></ROW><ROW><id>6718628</id><snippet>$ which python
/usr/bin/python
</snippet></ROW><ROW><id>6718628</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>6718709</id><snippet>realize</snippet></ROW><ROW><id>6718709</id><snippet>realize</snippet></ROW><ROW><id>6718709</id><snippet>gtk.gdk.window</snippet></ROW><ROW><id>6718709</id><snippet>#!/usr/bin/env python

import gtk

class app:

  def __init__(self):
    window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    window.set_title("TestApp")
    window.set_default_size(400,200)
    window.connect("realize", self.realize_cb)
    window.connect("destroy", gtk.main_quit)    
    window.show_all()

  def realize_cb(self, widget):
    pixmap = gtk.gdk.Pixmap(None, 1, 1, 1)
    color = gtk.gdk.Color()
    cursor = gtk.gdk.Cursor(pixmap, pixmap, color, color, 0, 0)
    widget.window.set_cursor(cursor)

app()
gtk.main()
</snippet></ROW><ROW><id>6718824</id><snippet>def recvall(sock, size):
  data = ''
  while len(data) &lt; size:
    d = sock.recv(size - len(data))
    if not d:
      # Connection closed by remote host, do what best for you
      return None
    data += d
  return data
</snippet></ROW><ROW><id>6718824</id><snippet>def sendall(sock, data):
  while data:
    sent = sock.send(data)
    data = data[sent:]
</snippet></ROW><ROW><id>6718990</id><snippet>session.query(User).filter_by(**q1_dict)
</snippet></ROW><ROW><id>6719391</id><snippet>Numpy</snippet></ROW><ROW><id>6719391</id><snippet>Matplotlib</snippet></ROW><ROW><id>6719391</id><snippet>SciPy</snippet></ROW><ROW><id>6719391</id><snippet>Mayavi/VTK</snippet></ROW><ROW><id>6719629</id><snippet>...
python -c "import test; test.printfoo('$foo')"
...
</snippet></ROW><ROW><id>6719629</id><snippet>'</snippet></ROW><ROW><id>6719629</id><snippet>...
python -c "import test; test.printfoo('"${foo//\'/\\\'}"');"
...
</snippet></ROW><ROW><id>6719743</id><snippet>import logging
logger = logging.getLogger('django')   # Django's catch-all logger
hdlr = logging.StreamHandler()   # Logs to stderr by default
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
logger.setLevel(logging.WARNING)
</snippet></ROW><ROW><id>6719804</id><snippet>glRotate</snippet></ROW><ROW><id>6719804</id><snippet>glTranslate</snippet></ROW><ROW><id>6719804</id><snippet>gluLookAt</snippet></ROW><ROW><id>6719804</id><snippet>gluLookAt</snippet></ROW><ROW><id>6719920</id><snippet>Bunch</snippet></ROW><ROW><id>6719920</id><snippet>point = Bunch(x=x, y=y, squared=y*y)
point.x
</snippet></ROW><ROW><id>6720174</id><snippet>import sys, traceback

try:
  raise Exception()
except:
  traceback.print_exc(file=sys.stdout)
  exit(3)
</snippet></ROW><ROW><id>6720306</id><snippet>&gt;&gt;&gt; (interval[1001]/1000)-1
interval([0.0009999999999996678, 0.001000000000000112])
</snippet></ROW><ROW><id>6720331</id><snippet>ValuesListQuerySet</snippet></ROW><ROW><id>6720331</id><snippet>&gt;&gt;&gt; type(ids)
&lt;class 'django.db.models.query.ValuesListQuerySet'&gt;
</snippet></ROW><ROW><id>6720331</id><snippet>QuerySet</snippet></ROW><ROW><id>6720331</id><snippet>fields</snippet></ROW><ROW><id>6720331</id><snippet>from django.core import serializers
data = serializers.serialize('json', YourEntity.objects.all(), fields=('id',))
</snippet></ROW><ROW><id>6720365</id><snippet>count</snippet></ROW><ROW><id>6720365</id><snippet>property</snippet></ROW><ROW><id>6720365</id><snippet>@property
def count(self):
    return self._count  # or return self.actual.count

@count.setter
def count(self, value):
    self._count = value  # or self.actual.count = value
</snippet></ROW><ROW><id>6720365</id><snippet>count = property(Get_count, Set_count)
</snippet></ROW><ROW><id>6720365</id><snippet>File</snippet></ROW><ROW><id>6720365</id><snippet>file</snippet></ROW><ROW><id>6720365</id><snippet>FileLine</snippet></ROW><ROW><id>6720365</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>6720365</id><snippet>Line = collections.namedtuple('Line', 'line count path')
</snippet></ROW><ROW><id>6720421</id><snippet>print "\nReading the entire file into a list."
text_file = open("read_it.txt", "r")
lines = text_file.readlines()
print lines
print len(lines)
for line in lines:
    print line
text_file.close()
</snippet></ROW><ROW><id>6720480</id><snippet>from social_auth.backends.facebook import FacebookBackend
class CustomFacebookBackend(FacebookBackend):
    name = 'facebook'

    def get_user_details(self, response):
        """Return user details from Facebook account"""
        return {'username': response['name'],
                'email': response.get('email', ''),
                'first_name': response.get('first_name', ''),
                'last_name': response.get('last_name', '')}
</snippet></ROW><ROW><id>6720480</id><snippet>BACKENDS = {
    'facebook': CustomFacebookAuth,
}
</snippet></ROW><ROW><id>6720671</id><snippet>dir()</snippet></ROW><ROW><id>6720754</id><snippet>class Comment(models.Model):
    text = models.TextField(max_length = 300)
    author = models.ForeignKey(User)
    timestamp = models.DateTimeField(auto_now_add = True)

class UserProfile(models.Model):
    user = models.ForeignKey(User, unique = True)
    comments = models.ManyToManyField(Comment)
</snippet></ROW><ROW><id>6720754</id><snippet>class Comment(models.Model):
    text = models.TextField(max_length = 300)
    author = models.ForeignKey(User)
    timestamp = models.DateTimeField(auto_now_add = True)
    userprofiles = models.ManyToManyField(UserProfile)

class UserProfile(models.Model):
    user = models.ForeignKey(User, unique = True)
</snippet></ROW><ROW><id>6720754</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Comment(models.Model):
    text = models.TextField(max_length = 300)
    author = models.ForeignKey(User)
    timestamp = models.DateTimeField(auto_now_add = True)
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>6720815</id><snippet>class A(object):
    __slots__ = ('a',)
class B(A):
    __slots__ =  ('b',)
</snippet></ROW><ROW><id>6720815</id><snippet>__slots__</snippet></ROW><ROW><id>6720815</id><snippet>from itertools import chain
slots = chain.from_iterable(getattr(cls, '__slots__', []) for cls in B.__mro__)
</snippet></ROW><ROW><id>6720842</id><snippet>itertools.combinations</snippet></ROW><ROW><id>6720842</id><snippet>import os, itertools

files = os.listdir("/path/to/files")
for file1, file2 in itertools.combinations(files, 2):
  print file1, file2
</snippet></ROW><ROW><id>6721087</id><snippet>def treeize(treeizable, tree=None, stopper=object()):
    if tree is None:
        tree = []

    if treeizable[:1] == [stopper]:
        tree.append(treeizable.pop(0))       
        return tree
    elif treeizable[0:2] == [2, 1]:
        tree.append(treeizable.pop(0))
        subtree = []
        treeize(treeizable, subtree, stopper=3)
        tree.append(subtree)
        return treeize(treeizable, tree, stopper)
    elif treeizable:
        tree.append(treeizable.pop(0))
        return treeize(treeizable, tree, stopper)
    else:
        return tree
</snippet></ROW><ROW><id>6721087</id><snippet>treeizable</snippet></ROW><ROW><id>6721087</id><snippet>tree</snippet></ROW><ROW><id>6721087</id><snippet>stopper</snippet></ROW><ROW><id>6721087</id><snippet>stopper</snippet></ROW><ROW><id>6721087</id><snippet>object</snippet></ROW><ROW><id>6721087</id><snippet>object</snippet></ROW><ROW><id>6721087</id><snippet>def treeize(treeizable, tree=None, stopper=object()):
</snippet></ROW><ROW><id>6721087</id><snippet>tree</snippet></ROW><ROW><id>6721087</id><snippet>None</snippet></ROW><ROW><id>6721087</id><snippet>    if tree is None:
        tree = []
</snippet></ROW><ROW><id>6721087</id><snippet>treeizable.pop(0)</snippet></ROW><ROW><id>6721087</id><snippet>if treeizable and treeizable[0] == stopper</snippet></ROW><ROW><id>6721087</id><snippet>    if treeizable[:1] == [stopper]:
        tree.append(treeizable.pop(0))       
        return tree
</snippet></ROW><ROW><id>6721087</id><snippet>treeize()</snippet></ROW><ROW><id>6721087</id><snippet>treeize()</snippet></ROW><ROW><id>6721087</id><snippet>treeize()</snippet></ROW><ROW><id>6721087</id><snippet>    elif treeizable[0:2] == [2, 1]:
        tree.append(treeizable.pop(0))
        subtree = []
        treeize(treeizable, subtree, stopper=3)
        tree.append(subtree)
        return treeize(treeizable, tree, stopper)
</snippet></ROW><ROW><id>6721087</id><snippet>[2, 1]</snippet></ROW><ROW><id>6721087</id><snippet>treeize()</snippet></ROW><ROW><id>6721087</id><snippet>    elif treeizable:
        tree.append(treeizable.pop(0))
        return treeize(treeizable, tree, stopper)
</snippet></ROW><ROW><id>6721087</id><snippet>    else:
        return tree
</snippet></ROW><ROW><id>6721087</id><snippet>&gt;&gt;&gt; treeize.treeize([1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 3, 2, 4, 5, 3,  3, 2, 3, 4])
[1, 2, 2, [1, 2, 2, [1, 2, 2, [1, 2, 3], 2, 4, 5, 3], 3], 2, 3, 4]
</snippet></ROW><ROW><id>6721303</id><snippet>/opt/local/var/macports/software/py26-pyside/1.0.4_0/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages</snippet></ROW><ROW><id>6721765</id><snippet>[Toplevel][1]</snippet></ROW><ROW><id>6721971</id><snippet>outarray=()
for x in "${inarray[@]}"; do
    if SOMECONDITION; do
        outarray+=(SOMEFUNCTIONOFx)
    fi
done
</snippet></ROW><ROW><id>6721971</id><snippet>s=({1..10})
echo "${s[@]}"
# Prints: 1 2 3 4 5 6 7 8 9 10
m=()
for x in "${s[@]}"; do
    if (( x % 2 == 0 )); then
        m+=($x)
    fi
done
echo "${m[@]}"
# Prints: 2 4 6 8 10
</snippet></ROW><ROW><id>6721971</id><snippet>paths=("/path/to/file 1" "/path/somewhere/else" "/this/that/the other" "/here/there/everywhere")
filenames=()
for x in "${paths[@]}"; do
    filenames+=( "$(basename "$x")" )
done
printf "'%s' " "${filenames[@]}"
# Prints: 'file 1' 'else' 'the other' 'everywhere' 
</snippet></ROW><ROW><id>6722187</id><snippet>&gt;&gt;&gt; class MyDict(dict):
...   def __init__(self, *args, **kwargs):
...     super(MyDict, self).__init__(*args, **kwargs)
...     self['name'] = 'james'
...
&gt;&gt;&gt; d = MyDict()
&gt;&gt;&gt; print d['name']
james
</snippet></ROW><ROW><id>6722262</id><snippet>sys.exit([arg])</snippet></ROW><ROW><id>6722262</id><snippet>die</snippet></ROW><ROW><id>6722262</id><snippet>die</snippet></ROW><ROW><id>6722264</id><snippet>def go(self, **kwargs):
    print kwargs
</snippet></ROW><ROW><id>6722264</id><snippet>indexed</snippet></ROW><ROW><id>6722264</id><snippet>m = MM(1) #or whatever
</snippet></ROW><ROW><id>6722341</id><snippet>dict</snippet></ROW><ROW><id>6722341</id><snippet>&gt;&gt;&gt; dict(indexed='hello', method='distance', a='3', b='4')
{'a': '3', 'indexed': 'hello', 'b': '4', 'method': 'distance'}
</snippet></ROW><ROW><id>6722341</id><snippet>dict</snippet></ROW><ROW><id>6722464</id><snippet>for event, elem in etree.iterparse(input_xml):
    if elem needs deleting:
        elem.clear() # remove text, tail, attributes, and descendant elements
        delete_todo.append(elem)
</snippet></ROW><ROW><id>6722519</id><snippet>def __unicode__(self):
    return 'Comment %s - to  a %s - %s' % (self.pk, self.content_type, self.content_object.__unicode__(), self.timestamp)
</snippet></ROW><ROW><id>6723022</id><snippet>None</snippet></ROW><ROW><id>6723022</id><snippet>&gt;&gt;&gt; 'abc'[:None]
'abc'
</snippet></ROW><ROW><id>6723066</id><snippet>if not (args.process or args.upload):
    parser.error('No action requested, add -process or -upload')
</snippet></ROW><ROW><id>6723093</id><snippet>def word_exists(wordlist, word_fragment):
    return any(w.startswith(word_fragment) for w in wordlist)
</snippet></ROW><ROW><id>6723093</id><snippet>bisect</snippet></ROW><ROW><id>6723093</id><snippet>from bisect import bisect_left
def word_exists(wordlist, word_fragment):
    try:
        return wordlist[bisect_left(wordlist, word_fragment)].startswith(word_fragment)
    except IndexError:
        return False # word_fragment is greater than all entries in wordlist
</snippet></ROW><ROW><id>6723093</id><snippet>bisect_left</snippet></ROW><ROW><id>6724425</id><snippet>&gt;&gt; a = (1,2,3,4)
&gt;&gt; a[-2:]
(3,4)
</snippet></ROW><ROW><id>6724470</id><snippet>barid 
</snippet></ROW><ROW><id>6724470</id><snippet>Bar.get_by_id(barid)</snippet></ROW><ROW><id>6724470</id><snippet>new_bar = Bar.get_by_id(barid)
foo.bar = new_bar
</snippet></ROW><ROW><id>6724547</id><snippet>&gt;&gt;&gt; x = '8'
&gt;&gt;&gt; y = '7'
&gt;&gt;&gt; x+y
'87'
&gt;&gt;&gt; x = int(x)
&gt;&gt;&gt; y = int(y)
&gt;&gt;&gt; x+y
15
</snippet></ROW><ROW><id>6724547</id><snippet>+</snippet></ROW><ROW><id>6724547</id><snippet>+</snippet></ROW><ROW><id>6724575</id><snippet>Accept-Content-Type</snippet></ROW><ROW><id>6724663</id><snippet>&gt;&gt;&gt; [[mymap[k] for k in l] for l in mapkeys]
[[60, 40], [80, 70], [30, 75], [50]]
</snippet></ROW><ROW><id>6724663</id><snippet>for</snippet></ROW><ROW><id>6724663</id><snippet>&gt;&gt;&gt; [mymap[k] for l in mapkeys for k in l]
[60, 40, 80, 70, 30, 75, 50]
</snippet></ROW><ROW><id>6724802</id><snippet>class tree:</snippet></ROW><ROW><id>6724802</id><snippet>tree</snippet></ROW><ROW><id>6724802</id><snippet>__init__</snippet></ROW><ROW><id>6724802</id><snippet>mytree.py</snippet></ROW><ROW><id>6724802</id><snippet>&gt;&gt;&gt; import mytree</snippet></ROW><ROW><id>6724802</id><snippet>class foo:</snippet></ROW><ROW><id>6724802</id><snippet>class Tree(object):
    def __init__(self, ...)
    ...
</snippet></ROW><ROW><id>6724802</id><snippet>object</snippet></ROW><ROW><id>6724807</id><snippet>colmap = {
    0: 'id',
    1: 'username',
    2: 'email',
}

@app.route('/modify', methods=['GET', 'POST'])
def modify()
    if request.method == 'POST' :
        user = user.query.get(form.row_id)
        try:
            setattr(user, colmap[form.column_id], form.value)
        except KeyError:
            pass
        db.session.commit()
    return 'ok'
</snippet></ROW><ROW><id>6725134</id><snippet>set</snippet></ROW><ROW><id>6725134</id><snippet>set</snippet></ROW><ROW><id>6725134</id><snippet>unique = set(map(set, list_of_lists))
</snippet></ROW><ROW><id>6725134</id><snippet>frozenset</snippet></ROW><ROW><id>6725134</id><snippet>unique = set(map(frozenset, list_of_lists))
</snippet></ROW><ROW><id>6725171</id><snippet>show</snippet></ROW><ROW><id>6725171</id><snippet>ImageTk</snippet></ROW><ROW><id>6725171</id><snippet>ImageQt</snippet></ROW><ROW><id>6725171</id><snippet>ImageWin</snippet></ROW><ROW><id>6725171</id><snippet>subprocess</snippet></ROW><ROW><id>6725171</id><snippet>for infile in glob.glob( os.path.join(path, '*.png')):
    viewer = subprocess.Popen(['some_viewer', infile])
    viewer.terminate()
    viewer.kill()  # make sure the viewer is gone; not needed on Windows
</snippet></ROW><ROW><id>6725261</id><snippet>dot_product</snippet></ROW><ROW><id>6725261</id><snippet>&gt;&gt;&gt; def dotproduct(vec1, vec2):
...     return sum(imap(operator.mul, vec1, vec2))
...
&gt;&gt;&gt; dis.dis(dotproduct)
  2           0 LOAD_GLOBAL              0 (sum)
              3 LOAD_GLOBAL              1 (imap)
              6 LOAD_GLOBAL              2 (operator)
              9 LOAD_ATTR                3 (mul)
             12 LOAD_FAST                0 (vec1)
             15 LOAD_FAST                1 (vec2)
             18 CALL_FUNCTION            3
             21 CALL_FUNCTION            1
             24 RETURN_VALUE
&gt;&gt;&gt; def dotproduct(vec1, vec2, sum=sum, imap=imap, mul=operator.mul):
...     return sum(imap(mul, vec1, vec2))
...
&gt;&gt;&gt; dis.dis(dotproduct)
  2           0 LOAD_FAST                2 (sum)
              3 LOAD_FAST                3 (imap)
              6 LOAD_FAST                4 (mul)
              9 LOAD_FAST                0 (vec1)
             12 LOAD_FAST                1 (vec2)
             15 CALL_FUNCTION            3
             18 CALL_FUNCTION            1
             21 RETURN_VALUE
</snippet></ROW><ROW><id>6725569</id><snippet>variable is False</snippet></ROW><ROW><id>6725569</id><snippet>False is 0</snippet></ROW><ROW><id>6725569</id><snippet>False</snippet></ROW><ROW><id>6725911</id><snippet>x ^ y == z</snippet></ROW><ROW><id>6725911</id><snippet>x ^ z == y</snippet></ROW><ROW><id>6725911</id><snippet>&gt;&gt;&gt; X = range(256)  # all byte values
&gt;&gt;&gt; Y = range(256)
&gt;&gt;&gt; all(x ^ z == y for x in X for y in Y for z in [x^y])
</snippet></ROW><ROW><id>6725913</id><snippet>T</snippet></ROW><ROW><id>6725913</id><snippet>T</snippet></ROW><ROW><id>6726251</id><snippet>params = {'uname':'j.doe'}
wrapperfunc('john', 'doe', **params)
</snippet></ROW><ROW><id>6726251</id><snippet>def wrapper(*args, **kwargs):
    print kwargs["uname"]
    return mainfunc(*args, **kwargs)
</snippet></ROW><ROW><id>6726251</id><snippet>def wrapper(f):
    def wrapped(*args, **kwargs):
        print kwargs["uname"]
        return mainfunc(*args, **kwargs)
    return wrapped

@wrapper
def foo(uname="Test"):
    return uname + "bar"

# the @decorator is equivalent to `foo = wrapper(foo)`
</snippet></ROW><ROW><id>6726624</id><snippet>void __declspec(dllexport) ITERATE(struct res* result, double z_r,double z_i, 
    double c_r, double c_i, int iterations, double limit);
</snippet></ROW><ROW><id>6726645</id><snippet>&gt;&gt;&gt; list('abc')
['a', 'b', 'c']
</snippet></ROW><ROW><id>6726645</id><snippet>&gt;&gt;&gt; ''.join(['a', 'b', 'c'])
'abc'
</snippet></ROW><ROW><id>6727008</id><snippet>\xae</snippet></ROW><ROW><id>6727008</id><snippet>uc = html.decode('utf8')</snippet></ROW><ROW><id>6727008</id><snippet>®</snippet></ROW><ROW><id>6727099</id><snippet>easy_install Jinja2
</snippet></ROW><ROW><id>6727099</id><snippet>pip install Jinja2
</snippet></ROW><ROW><id>6727134</id><snippet>struct.unpack('!i', binascii.a2b_hex('0F1610959DA92DAB'[8:]))[0]
</snippet></ROW><ROW><id>6727134</id><snippet>struct.unpack('!ii', binascii.a2b_hex('0F1610959DA92DAB'))
</snippet></ROW><ROW><id>6727134</id><snippet>(253104277, -1649857109)
</snippet></ROW><ROW><id>6727240</id><snippet>for i in range(len(self.missileList)-1, -1, -1)
</snippet></ROW><ROW><id>6727371</id><snippet>&gt;&gt;&gt; D={'aapl': 4.0,
...  'abandon': 4.0,
...  'absenc': 3.0,
...  'accept': 1.0,
...  'access': 3.0,
...  'accessori': 4.0,
...  'accord': 3.0,
...  'achiev': 1.0,
...  'acquir': 1.5,
...  'acquisit': 2.3333333333333335,
...  'across': 5.0,
...  'activ': 2.0,
...  'ad': 2.2692307692307692,
...  'add': 2.5,
...  'addit': 2.8333333333333335,
... }
&gt;&gt;&gt; sorted(D, key=D.get, reverse=True)
['across', 'aapl', 'accessori', 'abandon', 'accord', 'access', 'absenc', 'addit', 'add', 'acquisit', 'ad', 'activ', 'acquir', 'accept', 'achiev']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6727371</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted(D.items(), key=itemgetter(1), reverse=True)
[('across', 5.0), ('aapl', 4.0), ('accessori', 4.0), ('abandon', 4.0), ('accord', 3.0), ('access', 3.0), ('absenc', 3.0), ('addit', 2.8333333333333335), ('add', 2.5), ('acquisit', 2.3333333333333335), ('ad', 2.2692307692307692), ('activ', 2.0), ('acquir', 1.5), ('accept', 1.0), ('achiev', 1.0)]
</snippet></ROW><ROW><id>6727416</id><snippet>&gt;&gt;&gt; info = ['apple: 1', 'orange: 2', 'grape: 3']
&gt;&gt;&gt; info = dict(line.split(': ') for line in info)
&gt;&gt;&gt; info
{'orange': '2', 'grape': '3', 'apple': '1'}
</snippet></ROW><ROW><id>6727416</id><snippet>dict</snippet></ROW><ROW><id>6727416</id><snippet>info = ['apple: 1', 'orange: 2', 'grape: 3']
info = {fruit:num for fruit, num in (line.split(': ') for line in info)}
</snippet></ROW><ROW><id>6727624</id><snippet>class MagicWrapper(object):
    def __init__(self, wrapped):
        self._wrapped = wrapped

    def __getattr__(self, attr):
        return getattr(self._wrapped, attr)

    def __setattr__(self, attr, val):
        if attr == '_wrapped':
            super(MagicWrapper, self).__setattr__('_wrapped', val)
        else:
            setattr(self._wrapped, 'old_' + attr, getattr(self._wrapped, attr))
            setattr(self._wrapped, attr, val)


class MyObject(object):
    def __init__(self):
        self.attr_one = None
        self.attr_two = 1

obj = MyObject()
obj = MagicWrapper(obj)
obj.attr_one = 'new value'
obj.attr_two = 2

print obj.old_attr_one
print obj.attr_one
print obj.old_attr_two
print obj.attr_two
</snippet></ROW><ROW><id>6727624</id><snippet>obj</snippet></ROW><ROW><id>6727624</id><snippet>def add_old_setattr_to_class(cls):
    def __setattr__(self, attr, val):
        super_setattr = super(self.__class__, self).__setattr__
        if attr.startswith('old_'):
            super_setattr(attr, val)
        else:
            super_setattr('old_' + attr, getattr(self, attr))
            super_setattr(attr, val)
    cls.__setattr__ = __setattr__


class MyObject(object):
    def __init__(self):
        self.attr_one = None
        self.attr_two = 1

obj = MyObject()
add_old_setattr_to_class(obj.__class__)
obj.attr_one = 'new value'
obj.attr_two = 2

print obj.old_attr_one
print obj.attr_one
print obj.old_attr_two
print obj.attr_two
</snippet></ROW><ROW><id>6727624</id><snippet>__setattr__</snippet></ROW><ROW><id>6727624</id><snippet>__setattr__</snippet></ROW><ROW><id>6727624</id><snippet>__setattr__</snippet></ROW><ROW><id>6727624</id><snippet>__getattr__</snippet></ROW><ROW><id>6727624</id><snippet>__getattribute__</snippet></ROW><ROW><id>6727624</id><snippet>__setattr__</snippet></ROW><ROW><id>6727624</id><snippet>add_old_setattr_to_class</snippet></ROW><ROW><id>6727624</id><snippet>cls</snippet></ROW><ROW><id>6727624</id><snippet>old_</snippet></ROW><ROW><id>6727631</id><snippet>itertools</snippet></ROW><ROW><id>6727631</id><snippet>import itertools
import random
import time

a = ["google.com", "yahoo.com", "gmail.com"]
combs = list(itertools.combinations(a, 2))
random.shuffle(combs)
for c in combs:
    print(c)
    time.sleep(3600)
</snippet></ROW><ROW><id>6727631</id><snippet>def modseq(n, p):
    r = 0
    for i in range(n):
        r = (r + p) % n
        yield r
</snippet></ROW><ROW><id>6727631</id><snippet>n</snippet></ROW><ROW><id>6727631</id><snippet>p</snippet></ROW><ROW><id>6727631</id><snippet>n</snippet></ROW><ROW><id>6727631</id><snippet>p</snippet></ROW><ROW><id>6727631</id><snippet>n</snippet></ROW><ROW><id>6727631</id><snippet>n</snippet></ROW><ROW><id>6727631</id><snippet>&gt;&gt;&gt; list(modseq(10, 13))
[3, 6, 9, 2, 5, 8, 1, 4, 7, 0]
</snippet></ROW><ROW><id>6727631</id><snippet>n</snippet></ROW><ROW><id>6727631</id><snippet>N</snippet></ROW><ROW><id>6727678</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; itertools.izip(a, itertools.islice(a,1,None))
</snippet></ROW><ROW><id>6727689</id><snippet>u</snippet></ROW><ROW><id>6727689</id><snippet>del p</snippet></ROW><ROW><id>6727852</id><snippet>haystack</snippet></ROW><ROW><id>6727852</id><snippet>import sys
# ...
def get_sys_path(request):
    return HttpResponse(str(sys.path))
</snippet></ROW><ROW><id>6727852</id><snippet>urls.py</snippet></ROW><ROW><id>6727852</id><snippet>haystack</snippet></ROW><ROW><id>6727852</id><snippet>sys.path</snippet></ROW><ROW><id>6727934</id><snippet>from itertools import permutations
permutations([1,2,3])
</snippet></ROW><ROW><id>6727990</id><snippet>field_name = models.BooleanField(default=True)
</snippet></ROW><ROW><id>6728094</id><snippet>bitarray</snippet></ROW><ROW><id>6728094</id><snippet>&gt;&gt;&gt; import bitarray
&gt;&gt;&gt; b = bitarray.bitarray()
&gt;&gt;&gt; b.fromstring('a')
&gt;&gt;&gt; b
bitarray('01100001')
&gt;&gt;&gt; b.to01()
'01100001'
&gt;&gt;&gt; b.fromstring('pples')
&gt;&gt;&gt; b.tostring()
'apples'
&gt;&gt;&gt; b.to01()
'011000010111000001110000011011000110010101110011'
</snippet></ROW><ROW><id>6728734</id><snippet>C:\Python27\python democodes.py</snippet></ROW><ROW><id>6729423</id><snippet>Array#pack</snippet></ROW><ROW><id>6729423</id><snippet>byte_string = [0x00, 0x04, 0xCC, 0x50].pack('C*')
</snippet></ROW><ROW><id>6729423</id><snippet>arr.pack ( aTemplateString ) → aBinaryString</snippet></ROW><ROW><id>6729423</id><snippet>C</snippet></ROW><ROW><id>6729423</id><snippet>*</snippet></ROW><ROW><id>6729609</id><snippet>import re

filename = '/tmp/toto.txt'

write_byte_re= r'WriteByte\([^,]+,\s*([^\)]+)\)'

# look for all potential substitutions
search_values = set()
f = open(filename)
for line in f:
    print line
    match_object = re.match(write_byte_re, line)
    if match_object is None: # nothing found, keep looking
        continue
    else:
        search_values.add(match_object.group(1)) # record the value

f.seek(0) # rewind file

substitutions = {}
for value in search_values:
    print "What do you want to replace '%s' with? (press return to keep as is)"
    new_value = raw_input('&gt; ')
    if new_value != '': 
        substitutions[value] = new_value

changed_lines = []
for line in f:
    match_object = re.match(write_byte_re, line)
    if match_object is not None: 
        value = match_object.group(1)
        if value in substitutions: # not in the dictionary if the user said nothing
            new_value = substitutions[value]
            # modify line
            line = re.sub('\b%s\b' % value, new_value, line)
    changed_lines.append(line)

f.close()

# write output
f = open(filename, 'w')
f.writelines(changed_lines)
f.close()
</snippet></ROW><ROW><id>6729713</id><snippet>logger = logging.getLogger('my_logger')
if not logger.handlers:
    # create the handlers and call logger.addHandler(logging_handler)
</snippet></ROW><ROW><id>6729721</id><snippet>urllib2.URLError</snippet></ROW><ROW><id>6729721</id><snippet>urllib2</snippet></ROW><ROW><id>6729721</id><snippet>if</snippet></ROW><ROW><id>6729753</id><snippet>for name, url in zip(names, urls):
    urllib.request.urlretrieve(url, name)
</snippet></ROW><ROW><id>6729753</id><snippet>zip(names, urls)</snippet></ROW><ROW><id>6730346</id><snippet>class AutoRegister(type):
    def __new__(mcs, name, bases, classdict):
        new_cls = type.__new__(mcs, name, bases, classdict)
        #print mcs, name, bases, classdict
        for b in bases:
            if hasattr(b, 'register_subclass'):
                b.register_subclass(new_cls)
        return new_cls


class AbstractClassA(object):
    __metaclass__ = AutoRegister
    _subclasses = []

    @classmethod
    def register_subclass(klass, cls):
        klass._subclasses.append(cls)

    @classmethod
    def get_concrete_classes(klass):
        return klass._subclasses


class ConcreteClassA1(AbstractClassA):
    pass

class ConcreteClassA2(AbstractClassA):
    pass

class ConcreteClassA3(ConcreteClassA2):
    pass


print AbstractClassA.get_concrete_classes()
</snippet></ROW><ROW><id>6730506</id><snippet>infile = open('europenewMatrix.txt','r')
infile.readline() # skip the first line
numbers = []
for line in infile:
    numbers.append([int(val) for val in line.split(',')[2:]])
infile.close()
travelMat = array(numbers)
</snippet></ROW><ROW><id>6730749</id><snippet>from hhh.foo.bar import xyzzy</snippet></ROW><ROW><id>6730749</id><snippet>xyzzy</snippet></ROW><ROW><id>6730749</id><snippet>hhh.foo.bar</snippet></ROW><ROW><id>6730749</id><snippet>import hhh.foo.bar as bar</snippet></ROW><ROW><id>6730749</id><snippet>bar</snippet></ROW><ROW><id>6730749</id><snippet>hhh.foo</snippet></ROW><ROW><id>6730749</id><snippet>hhh.foo</snippet></ROW><ROW><id>6730749</id><snippet>from hhh.foo.baz import *
</snippet></ROW><ROW><id>6730749</id><snippet>hhh.foo.baz</snippet></ROW><ROW><id>6730749</id><snippet>hhh.foo</snippet></ROW><ROW><id>6730749</id><snippet>hhh.foo</snippet></ROW><ROW><id>6730749</id><snippet>hhh.foo.baz</snippet></ROW><ROW><id>6730833</id><snippet>WITH</snippet></ROW><ROW><id>6730833</id><snippet>WITH t_character (id, name)
AS (    SELECT  1, "ch-1"
UNION   SELECT  2, "ch-2"
UNION   SELECT  3, "ch-3"
UNION   SELECT  4, "ch-4"
)
, t_tag (id, name)
AS (    SELECT  1, "tag-1"
UNION   SELECT  2, "tag-2"
UNION   SELECT  3, "tag-3"
)
, t_character_tag (character_id, tag_id)
AS (    SELECT  1, 1
UNION   SELECT  2, 1
UNION   SELECT  2, 2
UNION   SELECT  3, 1
UNION   SELECT  3, 2
UNION   SELECT  3, 3
UNION   SELECT  4, 3
)
-- the result should contain pairs (1, 2), (1, 3), (2, 3) again (2, 3), and (3, 4)
SELECT      DISTINCT -- will filter out duplicates
            c1.id, c2.id
FROM        t_character c1
INNER JOIN  t_character c2
        ON  c1.id &lt; c2.id -- all pairs without duplicates
INNER JOIN  t_character_tag r1
        ON  r1.character_id = c1.id
INNER JOIN  t_character_tag r2
        ON  r2.character_id = c2.id
WHERE       r1.tag_id = r2.tag_id
ORDER BY    c1.id, c2.id
</snippet></ROW><ROW><id>6730833</id><snippet>from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, Table
from sqlalchemy.orm import relationship, scoped_session, sessionmaker, aliased
from sqlalchemy.ext.declarative import declarative_base

# Configure test database for SA
engine = create_engine("sqlite:///:memory:", echo=False)
session = scoped_session(sessionmaker(bind=engine, autoflush=False))

class Base(object):
    """ Just a helper base class to set properties on object creation.
    Also provides a convenient default __repr__() function, but be aware that 
    also relationships are printed, which might result in loading relations.
    """
    def __init__(self, **kwargs):
        for k,v in kwargs.items():
            setattr(self, k, v)

    def __repr__(self):
        return "&lt;%s(%s)&gt;" % (self.__class__.__name__, 
            ", ".join("%s=%r" % (k, self.__dict__[k]) 
                for k in sorted(self.__dict__) if "_sa_" != k[:4] and "_backref_" != k[:9])
            )
Base = declarative_base(cls=Base)

t_character_tag = Table(
    "t_character_tag", Base.metadata,
    Column("character_id", Integer, ForeignKey("t_character.id")),
    Column("tag_id", Integer, ForeignKey("t_tag.id"))
    )

class Character(Base):
    __tablename__ = u"t_character"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    tags = relationship("Tag", secondary=t_character_tag, backref="characters")

class Tag(Base):
    __tablename__ = u"t_tag"
    id = Column(Integer, primary_key=True)
    name = Column(String)

# create db schema
Base.metadata.create_all(engine)


# 0. create test data
ch1 = Character(id=1, name="ch-1")
ch2 = Character(id=2, name="ch-2")
ch3 = Character(id=3, name="ch-3")
ch4 = Character(id=4, name="ch-4")
ta1 = Tag(id=1, name="tag-1")
ta2 = Tag(id=2, name="tag-2")
ta3 = Tag(id=3, name="tag-3")
ch1.tags.append(ta1)
ch2.tags.append(ta1); ch2.tags.append(ta2);
ch3.tags.append(ta1); ch3.tags.append(ta2); ch3.tags.append(ta3);
ch4.tags.append(ta3)
session.add_all((ch1, ch2, ch3, ch4,))
session.commit()

# 1. some data checks
session.expunge_all()
assert len(session.query(Character).all()) == 4
assert session.query(Tag).get(2).name == "tag-2"
assert len(session.query(Character).get(3).tags) == 3

# 2. create a final query (THE ANSWER TO THE QUESTION):
session.expunge_all()
t_c1 = aliased(Character)
t_c2 = aliased(Character)
t_t1 = aliased(Tag)
t_t2 = aliased(Tag)
q =(session.query(t_c1, t_c2).
    join((t_c2, t_c1.id &lt; t_c2.id)).
    join((t_t1, t_c1.tags)).
    join((t_t2, t_c2.tags)).
    filter(t_t1.id == t_t2.id).
    filter(t_c1.name != t_c2.name). # if tag name is unique, this can be dropped
    order_by(t_c1.id).
    order_by(t_c2.id)
    )
q = q.distinct() # filter out duplicates
res = [_r for _r in q.all()]
assert len(res) == 4
for _r in res:
    print _r
</snippet></ROW><ROW><id>6731121</id><snippet>/*
 File: mycopy.c

 Compile with: gcc -Wall -g -c mycopy.c `pkg-config --cflags gio-2.0`
 Link with: gcc -Wall -g mycopy.o -o mycopy `pkg-config --libs gio-2.0`

 See: http://stackoverflow.com/questions/6726499/this-python-code-in-c-c
*/

#include &lt;glib-object.h&gt;
#include &lt;gio/gio.h&gt;
#include &lt;stdlib.h&gt;

int main( int argc, char*argv[])
{   GFile *source, *dest;
    gboolean success;

    if( argc!=3 )
        exit( 2 );

    g_type_init();


    source  = g_file_new_for_commandline_arg( argv[1] );
    dest    = g_file_new_for_commandline_arg( argv[2] );

    success = g_file_copy( source, dest, 0, 0, 0, 0, 0 );

    if( !success )
        exit( 2 );

    exit( 0 );
}
</snippet></ROW><ROW><id>6731121</id><snippet>man 2 splice</snippet></ROW><ROW><id>6731121</id><snippet>mount</snippet></ROW><ROW><id>6731121</id><snippet>cp</snippet></ROW><ROW><id>6731415</id><snippet>#On client side
...
import base64
with open('test.gz','rb') as f:
    content = f.read()

content_serialized = base64.b64encode(content)+'\n'
...
#On server side
...
import base64
content = base64.b64decode(content_serialized.rstrip('\n'))
    with open('test.gz','wb') as f:
        f.write(content)    
...
</snippet></ROW><ROW><id>6731481</id><snippet>constants.py</snippet></ROW><ROW><id>6731481</id><snippet># constants.py
FOO = 'foo'
PI = 3.14

# main.py
import constants
print constants.PI
</snippet></ROW><ROW><id>6731779</id><snippet>echo EXPORTS &gt; python32.def
nm python32.lib | grep ' T _' | sed 's/.* T _//' &gt;&gt; python32.def
dlltool --input-def python32.def --dllname python32 --output-lib libpython32.a python32.lib
</snippet></ROW><ROW><id>6731779</id><snippet>python_test.c:

#include &lt;Python.h&gt;

int main(int argc, char *argv[]) {
    Py_Initialize();
    PyRun_SimpleString("from time import time,ctime\n"
                       "print('Today is',ctime(time())\n)");
    Py_Finalize();
    return 0;
}

Compile:

gcc -mno-cygwin -Wall -LC:\Python32\libs -IC:\Python32\include 
  python_test.c -lpython32 -o python_test.exe

Test:

C:\python_test.exe
Today is Mon Jul 18 08:50:53 2011
</snippet></ROW><ROW><id>6732150</id><snippet>print elem.tag.split('}')[-1]
</snippet></ROW><ROW><id>6732150</id><snippet>local-name()</snippet></ROW><ROW><id>6732150</id><snippet>print elem.xpath('local-name()')
</snippet></ROW><ROW><id>6732150</id><snippet>getchildren()</snippet></ROW><ROW><id>6732150</id><snippet>getchildren()</snippet></ROW><ROW><id>6732150</id><snippet>list(elem)</snippet></ROW><ROW><id>6732150</id><snippet>rootelement[0]</snippet></ROW><ROW><id>6732150</id><snippet>rootelement</snippet></ROW><ROW><id>6732150</id><snippet>rootelement.getchildren()[0]</snippet></ROW><ROW><id>6732150</id><snippet>list(rootelement)</snippet></ROW><ROW><id>6732346</id><snippet>:cfunc:'select'</snippet></ROW><ROW><id>6732421</id><snippet>s = "My page with..."
s += "More data"
for y in x:
    s += "And this!"
return s
</snippet></ROW><ROW><id>6732421</id><snippet>return</snippet></ROW><ROW><id>6732421</id><snippet>yield</snippet></ROW><ROW><id>6732421</id><snippet>yield "Some more data"</snippet></ROW><ROW><id>6732708</id><snippet>new = algorithm(i, file_index, data, data2)
</snippet></ROW><ROW><id>6732708</id><snippet>args = [i] 
if counter:
    args.append(file_index)
for arg in (data, data2):
    if arg is not None:
        args.append(arg)

new = algorithm(*args)
</snippet></ROW><ROW><id>6732708</id><snippet>for i in files_list:
    file_index = files_list.index(i)
</snippet></ROW><ROW><id>6732708</id><snippet>for index, filename in enumerate(file_list):
    ...
</snippet></ROW><ROW><id>6732713</id><snippet>cmd /k</snippet></ROW><ROW><id>6732713</id><snippet>Dim wshShell, fso, loc, cmd

Set fso = CreateObject("Scripting.FileSystemObject")
loc = fso.GetAbsolutePathName(".")
WScript.Echo loc

'~ cmd = "%ComSpec% /k C:\Languages\Python\python.exe " + loc + "\test.py"
cmd = "C:\Languages\Python\python.exe " + loc + "\test.py"
WScript.Echo cmd

Set wshShell = CreateObject("WScript.Shell")
wshShell.Run cmd
</snippet></ROW><ROW><id>6732713</id><snippet>if WScript.Arguments.Count = 0 then
    loc = fso.GetAbsolutePathName(".")
else
    loc = WScript.Arguments(0)
end if
</snippet></ROW><ROW><id>6732869</id><snippet>__all__</snippet></ROW><ROW><id>6732869</id><snippet>*-import</snippet></ROW><ROW><id>6732869</id><snippet>import</snippet></ROW><ROW><id>6732869</id><snippet>_</snippet></ROW><ROW><id>6732869</id><snippet>__all__</snippet></ROW><ROW><id>6732869</id><snippet>__all__</snippet></ROW><ROW><id>6732869</id><snippet>__all__</snippet></ROW><ROW><id>6732869</id><snippet>locals().keys()</snippet></ROW><ROW><id>6732869</id><snippet>NO_DEFAULT</snippet></ROW><ROW><id>6733563</id><snippet>groupby</snippet></ROW><ROW><id>6733563</id><snippet>from itertools import groupby

def find_dub_strs(mystring):
    grp = groupby(mystring)
    seq = [(k, len(list(g)) &gt;= 2) for k, g in grp]
    allowed = ('aeioupt')
    return rec_dubz('', seq, allowed=allowed)

def rec_dubz(prev, seq, allowed='aeiou'):
    if not seq:
        return [prev]
    solutions = rec_dubz(prev + seq[0][0], seq[1:], allowed=allowed)
    if seq[0][0] in allowed and seq[0][1]:
        solutions += rec_dubz(prev + seq[0][0] * 2, seq[1:], allowed=allowed)
    return solutions
</snippet></ROW><ROW><id>6733563</id><snippet>&gt;&gt;&gt; find_dub_strs('jeeeeeep')
['jep', 'jeep']
&gt;&gt;&gt; find_dub_strs('jeeeeeeppp')
['jep', 'jepp', 'jeep', 'jeepp']
&gt;&gt;&gt; find_dub_strs('jeeeeeeppphhhht')
['jepht', 'jeppht', 'jeepht', 'jeeppht']
</snippet></ROW><ROW><id>6733643</id><snippet>import random
import string

allowable_gibberish = string.ascii_letters + string.digits + string.punctuation
def gibberish_maker(gibberish=allowable_gibberish,n=512,new_line_every=15):
    str = ''.join(random.choice(gibberish) for x in range(n))
    return '\n'.join(str[i:i+new_line_every] for i in xrange(0, len(str), new_line_every))
</snippet></ROW><ROW><id>6733697</id><snippet>dict((k, v) for (k, v) in parent_dict.iteritems() if k not in derived_dict)
</snippet></ROW><ROW><id>6733785</id><snippet>self.__class__.i</snippet></ROW><ROW><id>6733785</id><snippet>i</snippet></ROW><ROW><id>6733785</id><snippet>i</snippet></ROW><ROW><id>6733785</id><snippet>class T(object):
    i = 5
    @classmethod
    def p(cls):
        print cls.i
</snippet></ROW><ROW><id>6733785</id><snippet>self.i</snippet></ROW><ROW><id>6733785</id><snippet>self.i = value</snippet></ROW><ROW><id>6733908</id><snippet>print globals()['__doc__']</snippet></ROW><ROW><id>6733929</id><snippet>tPostVariable = self.request.get('PostVariableName')
</snippet></ROW><ROW><id>6733929</id><snippet>class ClassName(webapp.RequestHandler):
    #For Get Pages
    def get(self):
        tPostVariable = self.request.get('PostVariableName')

    #For Post Pages
    def post(self):
        tPostVariable = self.request.get('PostVariableName')
</snippet></ROW><ROW><id>6734327</id><snippet>with</snippet></ROW><ROW><id>6734655</id><snippet>Car.objects.annotate(score=Avg('rating__score').order_by('-score')
</snippet></ROW><ROW><id>6735001</id><snippet>## Cell one
"""
A cell is everything between two commands starting with '##'
"""
a = 3
b = 4
print('The answer is ' + str(a+b))

## Cell two

print('Hello World')
</snippet></ROW><ROW><id>6735167</id><snippet>[+-][0-9]+</snippet></ROW><ROW><id>6735167</id><snippet>Token()</snippet></ROW><ROW><id>6735167</id><snippet>Token('a+b+')</snippet></ROW><ROW><id>6735167</id><snippet>Token('a+') &amp; Token('b+')</snippet></ROW><ROW><id>6735167</id><snippet>Token('a+') + Token('b+')</snippet></ROW><ROW><id>6735167</id><snippet>Token()</snippet></ROW><ROW><id>6735167</id><snippet>Token(Literal('ab+'))</snippet></ROW><ROW><id>6735167</id><snippet>Token(r'ab\+')</snippet></ROW><ROW><id>6735407</id><snippet>pgcode</snippet></ROW><ROW><id>6735407</id><snippet>try:
    cursor.execute("...")
except psycopg2.IntegrityError as err:
    if err.pgcode != '23505':
        logger.error('FunctionName: %s',  err)
except Exception as err:
    logger.error('FunctionName: %s',  err)
</snippet></ROW><ROW><id>6735478</id><snippet>HTTPChannel</snippet></ROW><ROW><id>6735478</id><snippet>accept</snippet></ROW><ROW><id>6735643</id><snippet>&gt;&gt;&gt; d = {
...     'eggs': 4,
...     'cheese': 6,
...     'coconuts': 8,
... }
&gt;&gt;&gt; globals().update(d)
&gt;&gt;&gt; eggs
4
&gt;&gt;&gt; cheese
6
&gt;&gt;&gt; coconuts
8
&gt;&gt;&gt; d
{'cheese': 6, 'eggs': 4, 'coconuts': 8}
</snippet></ROW><ROW><id>6735643</id><snippet>for item, value in d.items():
     setattr(some_object, item, value) #or self.setattr(item, value)
</snippet></ROW><ROW><id>6735722</id><snippet>from mercurial import util, scmutil
</snippet></ROW><ROW><id>6735722</id><snippet>rng = scmutil.revrange(repo, opts['rev'])
</snippet></ROW><ROW><id>6735735</id><snippet>addWidget()</snippet></ROW><ROW><id>6735735</id><snippet>QBoxLayout.insertWidget(index, widget)</snippet></ROW><ROW><id>6735735</id><snippet>newButton = QRadioButton(...)
newText = newButton.text()

index = 0
for button in get_buttons():
    if button.text() &gt;= newText:
      break
    index += 1

layout.insertWidget(index, newButton)
</snippet></ROW><ROW><id>6735958</id><snippet>import os
f = open(os.devnull, 'w')
sys.stdout = f
</snippet></ROW><ROW><id>6735958</id><snippet>f = open('nul', 'w')
sys.stdout = f
</snippet></ROW><ROW><id>6735958</id><snippet>f = open('/dev/null', 'w')
sys.stdout = f
</snippet></ROW><ROW><id>6736272</id><snippet>id</snippet></ROW><ROW><id>6736272</id><snippet>&gt;&gt;&gt; n1 = N()
&gt;&gt;&gt; n2 = N()
&gt;&gt;&gt; id(n1) == id(n2)
False
</snippet></ROW><ROW><id>6736272</id><snippet>&gt;&gt;&gt; n1 = N()
&gt;&gt;&gt; n2 = n1
&gt;&gt;&gt; id(n1) == id(n2)
True
</snippet></ROW><ROW><id>6736272</id><snippet>id</snippet></ROW><ROW><id>6736272</id><snippet>builtin_id</snippet></ROW><ROW><id>6736272</id><snippet>bltinmodule.c</snippet></ROW><ROW><id>6736272</id><snippet>__init__</snippet></ROW><ROW><id>6736272</id><snippet>__del__</snippet></ROW><ROW><id>6736272</id><snippet>class N:
    def __init__(self):
        print "Creating", id(self)
    def __del__(self):
        print "Destroying", id(self)

&gt;&gt;&gt; id(N())
Creating 4300023352
Destroying 4300023352
4300023352
</snippet></ROW><ROW><id>6736272</id><snippet>&gt;&gt;&gt; id(N()), id(N()), id(N())
Creating 4300023352
Destroying 4300023352
Creating 4300023352
Destroying 4300023352
Creating 4300023352
Destroying 4300023352
(4300023352, 4300023352, 4300023352)
</snippet></ROW><ROW><id>6736272</id><snippet>N</snippet></ROW><ROW><id>6736272</id><snippet>N</snippet></ROW><ROW><id>6736272</id><snippet>object</snippet></ROW><ROW><id>6736272</id><snippet>obmalloc.c</snippet></ROW><ROW><id>6736272</id><snippet>N</snippet></ROW><ROW><id>6736272</id><snippet>id(N())</snippet></ROW><ROW><id>6736272</id><snippet>id(N())</snippet></ROW><ROW><id>6736272</id><snippet>id(N()),id(N())</snippet></ROW><ROW><id>6736272</id><snippet>pythonrun.c</snippet></ROW><ROW><id>6736279</id><snippet>from collections import defaultdict

lists = [['apple', 'window', 'pear', 2, 1.55, 'banana'],
['apple', 'orange', 'kiwi', 3, 1.80, 'banana'],
['apple', 'envelope', 'star_fruit', 2, 1.55, 'banana'],
['apple', 'orange', 'pear', 2, 0.80, 'coffee_cup'],
['apple', 'orange', 'pear', 2, 3.80, 'coffee_cup']]

dic = defaultdict(int)
fts = []
for lst in lists:
    first_third = lst[0], lst[2]
    dic[first_third] += 1
    if dic[first_third] == 2: fts.append(first_third)
    lst.append(dic[first_third])

for lst in lists:
    if (lst[0], lst[2]) not in fts:
        lst[-1] -= 1

print(lists)
</snippet></ROW><ROW><id>6736279</id><snippet>first_third = lst[0], lst[2]</snippet></ROW><ROW><id>6736279</id><snippet>first_third = lst[0] + lst[2]</snippet></ROW><ROW><id>6736351</id><snippet>B</snippet></ROW><ROW><id>6736351</id><snippet>a</snippet></ROW><ROW><id>6736351</id><snippet>class B:
    def __init__(self):
        self.a = A()
</snippet></ROW><ROW><id>6736351</id><snippet>A</snippet></ROW><ROW><id>6736351</id><snippet>B</snippet></ROW><ROW><id>6736354</id><snippet>privmsg</snippet></ROW><ROW><id>6736354</id><snippet>str</snippet></ROW><ROW><id>6736762</id><snippet>sql='SELECT regexp_replace(location, %s, %s, %s)  from foo'
cursor.execute(sql,[r'\(|\)','','g'])
</snippet></ROW><ROW><id>6736762</id><snippet>import psycopg2
connection=psycopg2.connect(
    database=config.PGDB,
    host=config.HOST,
    password=config.PASS)
cursor=connection.cursor()
sql='CREATE TABLE foo (location varchar(40))'
cursor.execute(sql)
sql='INSERT INTO foo (location) VALUES (%s)'
cursor.execute(sql,['(goat) 172.10.x.x -&gt; /var/log/messages'])
sql='SELECT * FROM foo'
cursor.execute(sql)
data=cursor.fetchall()
print(data)
# [('(goat) 172.10.x.x -&gt; /var/log/messages',)]

sql='SELECT regexp_replace(location, %s, %s, %s) FROM foo'
cursor.execute(sql,[r'\(|\)','','g'])
data=cursor.fetchall()
print(data)
# [('goat 172.10.x.x -&gt; /var/log/messages',)]
</snippet></ROW><ROW><id>6736960</id><snippet>static_files</snippet></ROW><ROW><id>6736960</id><snippet>static_files: static/HTML/index.html
</snippet></ROW><ROW><id>6736970</id><snippet>numpy.sum</snippet></ROW><ROW><id>6736970</id><snippet>numpy.min</snippet></ROW><ROW><id>6736970</id><snippet>In [13]: %timeit np.isnan(np.min(x))
1000 loops, best of 3: 244 us per loop

In [14]: %timeit np.isnan(np.sum(x))
10000 loops, best of 3: 97.3 us per loop
</snippet></ROW><ROW><id>6736970</id><snippet>min</snippet></ROW><ROW><id>6736970</id><snippet>sum</snippet></ROW><ROW><id>6736970</id><snippet>sum</snippet></ROW><ROW><id>6736970</id><snippet>min</snippet></ROW><ROW><id>6736970</id><snippet>sum</snippet></ROW><ROW><id>6736970</id><snippet>In [40]: x = np.random.rand(100000)

In [41]: %timeit np.isnan(np.min(x))
10000 loops, best of 3: 153 us per loop

In [42]: %timeit np.isnan(np.sum(x))
10000 loops, best of 3: 95.9 us per loop

In [43]: x[50000] = np.nan

In [44]: %timeit np.isnan(np.min(x))
1000 loops, best of 3: 239 us per loop

In [45]: %timeit np.isnan(np.sum(x))
10000 loops, best of 3: 95.8 us per loop

In [46]: x[0] = np.nan

In [47]: %timeit np.isnan(np.min(x))
1000 loops, best of 3: 326 us per loop

In [48]: %timeit np.isnan(np.sum(x))
10000 loops, best of 3: 95.9 us per loop
</snippet></ROW><ROW><id>6736983</id><snippet>db.py</snippet></ROW><ROW><id>6736983</id><snippet>get_connection()</snippet></ROW><ROW><id>6736983</id><snippet># db.py
connection = None
def get_connection():
    global connection
    if not connection:
        connection = MySqldb.connect() # possibly with configuration vars passed in
    return connection
</snippet></ROW><ROW><id>6736983</id><snippet># other_module.py
import db
curs = db.get_connection().cursor()
# do stuff
curs.close()
</snippet></ROW><ROW><id>6737034</id><snippet>M = tuple(buffer(M, i, Nb) for i in range(0, len(M), Nb))
</snippet></ROW><ROW><id>6737034</id><snippet>M = tuple(M[i*Nb:i*Nb+Nb] for i in range(0, len(M), Nb))
</snippet></ROW><ROW><id>6737034</id><snippet>H = key
for Mi in M:
    H = encrypt(H, Mi)
</snippet></ROW><ROW><id>6737190</id><snippet>i</snippet></ROW><ROW><id>6737190</id><snippet>i</snippet></ROW><ROW><id>6737190</id><snippet>i</snippet></ROW><ROW><id>6737190</id><snippet>lambda x, i=i: x+i
</snippet></ROW><ROW><id>6737190</id><snippet>i</snippet></ROW><ROW><id>6737190</id><snippet>i</snippet></ROW><ROW><id>6737190</id><snippet>(lambda i: lambda x: x+i)(i)
</snippet></ROW><ROW><id>6737190</id><snippet>def outerfunc():

    def innerfunc():
        return x+i

    a = []
    for i in range(10):
        a.append(innerfunc)
    return a
</snippet></ROW><ROW><id>6737190</id><snippet>innerfunc</snippet></ROW><ROW><id>6737452</id><snippet>PEP 362: Function Signature Object
PEP 380: Syntax for Delegating to a Subgenerator
PEP 382: Namespace Packages
PEP 393: Flexible String Representation
PEP 395: Module Aliasing
PEP 397: Python launcher for Windows
PEP 3143: Standard daemon process library
PEP 3151: Reworking the OS and IO exception hierarchy
</snippet></ROW><ROW><id>6737452</id><snippet>Addition of the "packaging" module, replacing "distutils"
Implementing __import__ using importlib
Email version 6
A standard event-loop interface (PEP by Jim Fulton pending)
Adding the faulthandler module.
Breaking out standard library and docs in separate repos?
A PEP on supplementing C modules with equivalent Python modules?
</snippet></ROW><ROW><id>6737649</id><snippet>def merge_pdf(self):
    from pyPdf import PdfFileReader,PdfFileWriter

    pdf_file = file_names['main_pdf']%settings.MEDIA_ROOT
    pdf_obj = PdfFileReader(open(pdf_file))

    values_page = PdfFileReader(open(self.make_pdf())).getPage(0)

    mergepage = pdf_obj.pages[0]
    mergepage.mergePage(values_page)

    signed_pdf = PdfFileWriter()
    for page in pdf_obj.pages:
        signed_pdf.addPage(page)

    signed_pdf_name = file_names['dl_done']%(settings.MEDIA_ROOT,self.phash)
    signed_pdf_file = open(signed_pdf_name,mode='wb')

    signed_pdf.write(signed_pdf_file)
    signed_pdf_file.close()
    return signed_pdf_name
</snippet></ROW><ROW><id>6737754</id><snippet>s = 'свят' # world
v = u'здравей %s' % s # hello %s 

Traceback (most recent call last):
File "&lt;input&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xd1 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>6737754</id><snippet>Internal Server Error</snippet></ROW><ROW><id>6737815</id><snippet>L = [(x, y[0]) for x, y in L]
</snippet></ROW><ROW><id>6737951</id><snippet>parser.parse('...', fuzzy=True)</snippet></ROW><ROW><id>6738245</id><snippet>eval</snippet></ROW><ROW><id>6738245</id><snippet>application/json</snippet></ROW><ROW><id>6738542</id><snippet>cat</snippet></ROW><ROW><id>6738542</id><snippet>nawk</snippet></ROW><ROW><id>6738542</id><snippet>import sys
target= raw_input( 'target: ' ) # or target= sys.argv[1]
with open('new.txt','r') as source:
    for columns in ( raw.strip().split() for raw in source ):
        if column[0] == target: print column[1]
</snippet></ROW><ROW><id>6738542</id><snippet>cat</snippet></ROW><ROW><id>6738542</id><snippet>nawk</snippet></ROW><ROW><id>6738724</id><snippet>items</snippet></ROW><ROW><id>6738724</id><snippet>values</snippet></ROW><ROW><id>6738724</id><snippet>keys</snippet></ROW><ROW><id>6738724</id><snippet>iterkeys</snippet></ROW><ROW><id>6738724</id><snippet>.</snippet></ROW><ROW><id>6738724</id><snippet>[]</snippet></ROW><ROW><id>6738724</id><snippet>.</snippet></ROW><ROW><id>6738724</id><snippet>items</snippet></ROW><ROW><id>6738724</id><snippet>items</snippet></ROW><ROW><id>6738724</id><snippet>items</snippet></ROW><ROW><id>6738724</id><snippet>namedtuple</snippet></ROW><ROW><id>6738724</id><snippet>namedtuple</snippet></ROW><ROW><id>6738724</id><snippet>_asdict</snippet></ROW><ROW><id>6738724</id><snippet>object</snippet></ROW><ROW><id>6738724</id><snippet>setattr</snippet></ROW><ROW><id>6738724</id><snippet>__getitem__</snippet></ROW><ROW><id>6738724</id><snippet>__setitem__</snippet></ROW><ROW><id>6738724</id><snippet>__delitem__</snippet></ROW><ROW><id>6738724</id><snippet>__getattribute__</snippet></ROW><ROW><id>6738724</id><snippet>__setattr__</snippet></ROW><ROW><id>6738724</id><snippet>__delattr__</snippet></ROW><ROW><id>6738724</id><snippet>getattr()</snippet></ROW><ROW><id>6738724</id><snippet>setattr()</snippet></ROW><ROW><id>6738724</id><snippet>__getattr__ + __getitem__</snippet></ROW><ROW><id>6738951</id><snippet>self.errorlist.append(
            '&lt;testcase classname=%(cls)s name=%(name)s db="%(db)s" time="%(taken)d"&gt;'
            '&lt;%(type)s type=%(errtype)s message=%(message)s&gt;&lt;![CDATA[%(tb)s]]&gt;'
            '&lt;/%(type)s&gt;&lt;/testcase&gt;' %
            {'cls': self._quoteattr('.'.join(id.split('.')[:-1])),
             'name': self._quoteattr(id.split('.')[-1]),
             'db': self.db,
             'taken': taken,
             'type': type,
             'errtype': self._quoteattr(nice_classname(err[0])),
             'message': self._quoteattr(exc_message(err)),
             'tb': escape_cdata(tb),
             })
</snippet></ROW><ROW><id>6739495</id><snippet>res = cur.fetchall()
</snippet></ROW><ROW><id>6739495</id><snippet>res</snippet></ROW><ROW><id>6739495</id><snippet>pyscopg2.extras.DictRow</snippet></ROW><ROW><id>6739495</id><snippet>for row in cur:
    print(row['column_name'])
</snippet></ROW><ROW><id>6739495</id><snippet>dict</snippet></ROW><ROW><id>6739498</id><snippet>&gt;&gt;&gt; "0" &gt; 1
True
</snippet></ROW><ROW><id>6739498</id><snippet>guess = raw_input ("Guess:")
</snippet></ROW><ROW><id>6739498</id><snippet>guess = int(raw_input ("Guess:"))
</snippet></ROW><ROW><id>6739807</id><snippet>mypath = customerbulk.objects.get(pk=1).fileup.path
o = open(mypath,'rU')
mydata = csv.reader(o)
</snippet></ROW><ROW><id>6739945</id><snippet>push = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>6740221</id><snippet>INTERNAL_IPS</snippet></ROW><ROW><id>6740221</id><snippet>settings.py</snippet></ROW><ROW><id>6740221</id><snippet>INTERNAL_IPS = (&lt;your_ip_address&gt;,)
</snippet></ROW><ROW><id>6740350</id><snippet>p=array_2
q=array_2
p=numpy.vstack([p,q])
</snippet></ROW><ROW><id>6740421</id><snippet>text</snippet></ROW><ROW><id>6740421</id><snippet>use_template=True</snippet></ROW><ROW><id>6740565</id><snippet>#define PREC_REPR       17
#define PREC_STR        12

void PyFloat_AsString(char *buf, PyFloatObject *v) {
    format_float(buf, 100, v, PREC_STR);
}

void PyFloat_AsReprString(char *buf, PyFloatObject *v) {
    format_float(buf, 100, v, PREC_REPR);
}
</snippet></ROW><ROW><id>6740565</id><snippet>repr(float)</snippet></ROW><ROW><id>6740565</id><snippet>str(float)</snippet></ROW><ROW><id>6740565</id><snippet>print</snippet></ROW><ROW><id>6740565</id><snippet>str()</snippet></ROW><ROW><id>6740565</id><snippet>repr()</snippet></ROW><ROW><id>6740565</id><snippet>&gt;&gt;&gt; str(.1234567890123)
'0.123456789012'
&gt;&gt;&gt; repr(.1234567890123)
'0.12345678901230001'
</snippet></ROW><ROW><id>6740565</id><snippet>0.1</snippet></ROW><ROW><id>6740968</id><snippet>with open('coors.csv', mode='r') as infile:
    reader = csv.reader(infile)
    with open('coors_new.csv', mode='w') as outfile:
        writer = csv.writer(outfile)
        mydict = {rows[0]:rows[1] for rows in reader}
</snippet></ROW><ROW><id>6740968</id><snippet>mydict = dict((rows[0],rows[1]) for rows in reader)
</snippet></ROW><ROW><id>6741097</id><snippet>display.start() browser = webdrive()</snippet></ROW><ROW><id>6741097</id><snippet>browswer.quit()</snippet></ROW><ROW><id>6741230</id><snippet>parameters</snippet></ROW><ROW><id>6741230</id><snippet>(', '.join('"' + item + '"' for item in parameters))
</snippet></ROW><ROW><id>6741333</id><snippet>import re

javascript_text = '''
    &lt;script language="javascript" type="text/javascript"&gt;
    lpAddVars('page','Section','womens');
    lpAddVars('page','CartTotal','0.00');

        lpAddVars('page','ProductID','43577');
        lpAddVars('page','ProductValue','128.00');  

    &lt;/script&gt;
'''

product_value = re.findall(r"ProductValue.*,['|\"](.*)['|\"]", javascript_text)

# at this point, product_value = ['128.00']
</snippet></ROW><ROW><id>6741333</id><snippet>product_values = []
for value in product_value:
    value = value.strip() # get rid of any excess whitespace
    value = float(value) # ProductValue appears to be a float of some sort
    product_values.append(value) # store the value
</snippet></ROW><ROW><id>6741448</id><snippet>use_unicode</snippet></ROW><ROW><id>6741448</id><snippet>chcp</snippet></ROW><ROW><id>6741448</id><snippet>print text.encode('windows-1252')
</snippet></ROW><ROW><id>6741448</id><snippet>use_unicode</snippet></ROW><ROW><id>6741493</id><snippet>update()</snippet></ROW><ROW><id>6741493</id><snippet>kw.keys()</snippet></ROW><ROW><id>6741493</id><snippet>def func(**kw):
    d = {'key0' : 0, 'key1' : 1}
    d.update(**kw)
    print "updated %s"%kw.keys()

func(kw0=0, kw1=1)
</snippet></ROW><ROW><id>6741702</id><snippet>itertools.product()</snippet></ROW><ROW><id>6741702</id><snippet>import itertools
facets_list = list(itertools.product(types,
                                    ['short', 'long', 'average'],
                                    ['square', 'sloped', 'average'],
                                    ['small', 'large', 'average'],
                                     ...))
</snippet></ROW><ROW><id>6741937</id><snippet>class ChangeCommentInline(admin.StackedInline):
    """For allowing logged in user to add change comment"""
    model = ChangeComment
    extra = 1
    exclude = ("user", ) # auto-update user field in save_formset method of parent modeladmin.


    def queryset(self, request):
        """Alter the queryset to return no existing entries"""
        # get the existing query set, then empty it.
        qs = super(ChangeCommentInline, self).queryset(request)
        return qs.none()  
</snippet></ROW><ROW><id>6742153</id><snippet>foo</snippet></ROW><ROW><id>6742153</id><snippet>__init__.py</snippet></ROW><ROW><id>6742153</id><snippet>math.py</snippet></ROW><ROW><id>6742153</id><snippet>print "something"</snippet></ROW><ROW><id>6742153</id><snippet>python __init__.py</snippet></ROW><ROW><id>6743182</id><snippet>insert = "insert into foo (name, number) value (%(name)s, %(number)s);"
</snippet></ROW><ROW><id>6743182</id><snippet>paramstyle</snippet></ROW><ROW><id>6743182</id><snippet>'qmark'         Question mark style, 
                e.g. '...WHERE name=?'
'numeric'       Numeric, positional style, 
                e.g. '...WHERE name=:1'
'named'         Named style, 
                e.g. '...WHERE name=:name'
'format'        ANSI C printf format codes, 
                e.g. '...WHERE name=%s'
'pyformat'      Python extended format codes, 
                e.g. '...WHERE name=%(name)s'
</snippet></ROW><ROW><id>6743182</id><snippet>&gt;&gt;&gt; import pgdb
&gt;&gt;&gt; pgdb.paramstyle
'pyformat'
</snippet></ROW><ROW><id>6743512</id><snippet>files = ['String.ext.ext2.1.txt', 'String.ext.ext2.12.txt', 'String.ext.ext2.2.txt']
# files: coming from os.listdir() sorted alphabetically, thus not numerically

sorted_files = sorted(files, key=lambda x: int(x.split('.')[3]))
# returns: ['String.ext.ext2.1.txt', 'String.ext.ext2.2.txt', 'String.ext.ext2.12.txt']
</snippet></ROW><ROW><id>6743663</id><snippet>os.execv()</snippet></ROW><ROW><id>6744165</id><snippet>commandList</snippet></ROW><ROW><id>6744165</id><snippet>self.clientname</snippet></ROW><ROW><id>6744165</id><snippet>if not commandlist.has_key(self.clientname):
    commandlist[self.clientname] = {} # Create an empty dictionary.

commandlist[self.clientname]['secondlevelkey'] = 'value'
</snippet></ROW><ROW><id>6744466</id><snippet>ast</snippet></ROW><ROW><id>6744466</id><snippet>SyntaxError</snippet></ROW><ROW><id>6744466</id><snippet>&gt;&gt;&gt; ast.parse('5-(a*0.3-d+(0.4-e))/k*5')
&lt;_ast.Module object at 0x7fc7bdd9e790&gt;
&gt;&gt;&gt; ast.parse('5-(a*0.3-d+(0.4-e))/k*')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/ast.py", line 37, in parse
    return compile(expr, filename, mode, PyCF_ONLY_AST)
  File "&lt;unknown&gt;", line 1
    5-(a*0.3-d+(0.4-e))/k*
                        ^
SyntaxError: unexpected EOF while parsing
</snippet></ROW><ROW><id>6744466</id><snippet>&gt;&gt;&gt; ast.parse('def spam(): return "ham"')
&lt;_ast.Module object at 0x7fc7bdd9e790&gt;
</snippet></ROW><ROW><id>6744602</id><snippet>xmlns:yt</snippet></ROW><ROW><id>6744705</id><snippet>post</snippet></ROW><ROW><id>6744705</id><snippet>put</snippet></ROW><ROW><id>6744705</id><snippet>delete</snippet></ROW><ROW><id>6744705</id><snippet>obj_</snippet></ROW><ROW><id>6745430</id><snippet>condition.acquire()
while not queue.has_free_place():
    condition.wait()
add_new_thread_to_queue()
condition.release()
</snippet></ROW><ROW><id>6745430</id><snippet>condition.acquire()
remove_myself_from_queue()
condition.notify()
condition.release()
</snippet></ROW><ROW><id>6745479</id><snippet>acos</snippet></ROW><ROW><id>6745479</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.acos(0)
1.5707963267948966
&gt;&gt;&gt; _ * 2 - math.pi
0.0
</snippet></ROW><ROW><id>6745651</id><snippet>for(;;)</snippet></ROW><ROW><id>6745651</id><snippet>while</snippet></ROW><ROW><id>6745651</id><snippet>n = 64
stride = n &gt;&gt; 1
while stride &gt; 0:
    # stuff
    stride &gt;&gt;= 1
</snippet></ROW><ROW><id>6745840</id><snippet>%WINDIR%</snippet></ROW><ROW><id>6745840</id><snippet>import os
winpath = os.environ['WINDIR'] + "\\System\\"
inifile = open(winpath + filename)
</snippet></ROW><ROW><id>6745895</id><snippet>re.split('(?&lt;!\d)\.|\.(?!\d)', 'hyper count 16.8mmol/l.plz review b4 5pm.just to inform u.thank u')
</snippet></ROW><ROW><id>6745895</id><snippet>16.8</snippet></ROW><ROW><id>6745970</id><snippet>lines = [i for i in open(file_path) if i[:-1]]
</snippet></ROW><ROW><id>6745970</id><snippet>file_object.writelines(lines)</snippet></ROW><ROW><id>6746160</id><snippet>import subprocess
p = subprocess.Popen('my_command', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, error = p.communicate()
</snippet></ROW><ROW><id>6746243</id><snippet>\b</snippet></ROW><ROW><id>6746243</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>6746243</id><snippet>import re

a = "asasasa sasDRasas dr.klklkl DR.klklklkl Dr klklklkklkl"
for match in re.finditer(r'\bdr', a, re.IGNORECASE):
    print 'Found match: "{0}" at position {1}'.format(match.group(0), match.start())
</snippet></ROW><ROW><id>6746243</id><snippet>\bdr</snippet></ROW><ROW><id>6746243</id><snippet>\bdr\b</snippet></ROW><ROW><id>6746243</id><snippet>re.finditer()</snippet></ROW><ROW><id>6746243</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>6746243</id><snippet>dr</snippet></ROW><ROW><id>6746243</id><snippet>DR</snippet></ROW><ROW><id>6746243</id><snippet>Dr</snippet></ROW><ROW><id>6746243</id><snippet>dR</snippet></ROW><ROW><id>6746415</id><snippet>from settings import *
</snippet></ROW><ROW><id>6746738</id><snippet>__delattr__</snippet></ROW><ROW><id>6746738</id><snippet>class B(object): 
    .....

    def __delattr__(self, name):
        print '__del_attr__'
        super(B, self).__delattr__(name)     # explicit call to ancestor (not automatic in python)
</snippet></ROW><ROW><id>6746738</id><snippet>b = B(1)
del b.x
</snippet></ROW><ROW><id>6746738</id><snippet>__del_attr__
_del_x
</snippet></ROW><ROW><id>6746808</id><snippet>/lib/modules</snippet></ROW><ROW><id>6746808</id><snippet>#!/usr/bin/python2

import os
import shutil

moddirs = os.listdir("/lib/modules")
moddirs.remove(os.uname()[2])

for d in moddirs:
    shutil.rmtree(os.path.join("/lib/modules", d))
</snippet></ROW><ROW><id>6746966</id><snippet>ILLEGAL_NTFS_CHARS = "[&lt;&gt;:/\\|?*\"]|[\0-\31]"
def __removeIllegalChars(name):
    # removes characters that are invalid for NTFS
    return re.sub(ILLEGAL_NTFS_CHARS, "", name)
</snippet></ROW><ROW><id>6747267</id><snippet>from itertools import product, izip
def Cc(s):
    s = s.lower()
    for p in product(*[(0,1)]*len(s)):
      yield ''.join( c.upper() if t else c for t,c in izip(p,s))

print list(Cc("Dan"))
</snippet></ROW><ROW><id>6747267</id><snippet>['dan', 'daN', 'dAn', 'dAN', 'Dan', 'DaN', 'DAn', 'DAN']
</snippet></ROW><ROW><id>6747866</id><snippet>def syllabify(language, text) :
    #These lines will take any list of phonemes or string of phonemes
    #and strip all of the whitespace and 'pau's
    #and won't return any empty phonemes
    if type(text) is not str:
        text = ' '.join(text)
    text.replace("pau", "") 
    text = text.split()

    syllables = [] # This is the returned data structure.
    internuclei = [] # This maintains a list of phonemes between nuclei.

    for phoneme in text:
        # so you don't have to check for empty phonemes,
        # delete 'pau's, or strip whitespace here
        stress = None
        # whatever else you do
</snippet></ROW><ROW><id>6747976</id><snippet>join()</snippet></ROW><ROW><id>6747976</id><snippet>'\n'.join(str(path) for path in list)
</snippet></ROW><ROW><id>6747976</id><snippet>list</snippet></ROW><ROW><id>6748017</id><snippet>__init__</snippet></ROW><ROW><id>6748017</id><snippet>class Counter:
    i = 0
    foo = []
    def count(self):
        self.__class__.i += 1
        self.__class__.foo.append(['lala' + str(self.__class__.i)])

a = Counter()
a.count()
print Counter().foo
b = Counter()
b.count()
print Counter().foo
</snippet></ROW><ROW><id>6748017</id><snippet>[['lala1']]
[['lala1'], ['lala2']]
</snippet></ROW><ROW><id>6748130</id><snippet>shelve.py</snippet></ROW><ROW><id>6748305</id><snippet>reverse_dic = dict((v, k) for k, v in dic.items())
</snippet></ROW><ROW><id>6748377</id><snippet>from sqlalchemy.sql import select, and_, or_, not_
# ...
query = select(# what to select (tables or columns)
               [table.c.column1, table.c.column2],
               # filters (use any expression using and_, or_, not_...
               and_(table.c.column1.like("j%")),
               )
result = query.execute()
</snippet></ROW><ROW><id>6748610</id><snippet>init="Content-Type: text/html\n\n"</snippet></ROW><ROW><id>6748610</id><snippet>web.header('Content-Type','text/html; charset=utf-8', unique=True)</snippet></ROW><ROW><id>6748869</id><snippet>list</snippet></ROW><ROW><id>6748869</id><snippet>date = list(date_match[0])</snippet></ROW><ROW><id>6748869</id><snippet>list</snippet></ROW><ROW><id>6748869</id><snippet>list</snippet></ROW><ROW><id>6749046</id><snippet>from .. import foo
</snippet></ROW><ROW><id>6749046</id><snippet>foo</snippet></ROW><ROW><id>6749046</id><snippet>from . import bar
</snippet></ROW><ROW><id>6749046</id><snippet>.</snippet></ROW><ROW><id>6749046</id><snippet>from .... import greatgrandparent
</snippet></ROW><ROW><id>6749168</id><snippet>du</snippet></ROW><ROW><id>6749168</id><snippet>du -k --max-depth 1 /var/|sort -n
</snippet></ROW><ROW><id>6749168</id><snippet>import subprocess
p = subprocess.Popen(["/usr/bin/du", "-k", "--max-depth", "1"], stdout=subprocess.PIPE)
(output, stderr) = p.communicate()
</snippet></ROW><ROW><id>6749443</id><snippet>class datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])

All arguments are optional and default to 0.
</snippet></ROW><ROW><id>6749443</id><snippet>&gt;&gt;&gt; datetime.timedelta(days=3, milliseconds=4)
datetime.timedelta(3, 0, 4000)
&gt;&gt;&gt; datetime.timedelta(3, 0, 0, 4) #no need for that.
datetime.timedelta(3, 0, 4000)
</snippet></ROW><ROW><id>6749443</id><snippet>__repr__</snippet></ROW><ROW><id>6749443</id><snippet>&gt;&gt;&gt; datetime.timedelta(seconds = 42).__repr__()
'datetime.timedelta(0, 42)'
&gt;&gt;&gt; datetime.timedelta(seconds = 42).__str__()
'0:00:42'
</snippet></ROW><ROW><id>6749755</id><snippet>~/.profile</snippet></ROW><ROW><id>6749755</id><snippet>os.environ</snippet></ROW><ROW><id>6749755</id><snippet>subprocess.call</snippet></ROW><ROW><id>6749755</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6750274</id><snippet>apple|banana|peach|plum|pineapple|kiwi</snippet></ROW><ROW><id>6750274</id><snippet>fruit_list = ['apple', 'banana', 'peach', 'plum', 'pineapple', 'kiwi']
fruit = re.compile('|'.join(fruit_list))
</snippet></ROW><ROW><id>6750274</id><snippet>plump</snippet></ROW><ROW><id>6750274</id><snippet>fruit = re.compile(r'\b(?:%s)\b' % '|'.join(fruit_list))
</snippet></ROW><ROW><id>6750426</id><snippet>html = html[:10000].decode("utf-8")
</snippet></ROW><ROW><id>6750426</id><snippet>soup = BeautifulSoup(html)
</snippet></ROW><ROW><id>6750426</id><snippet>[&lt;title&gt;پایگاه خبری تحلیلی تازه&lt;/title&gt;]
</snippet></ROW><ROW><id>6750968</id><snippet>reportlab.lib.rparsexml</snippet></ROW><ROW><id>6751519</id><snippet>pip install https://guppy-pe.svn.sourceforge.net/svnroot/guppy-pe/trunk/guppy
</snippet></ROW><ROW><id>6751680</id><snippet>self</snippet></ROW><ROW><id>6751680</id><snippet>self.initNewPt(self,firstRow)</snippet></ROW><ROW><id>6751788</id><snippet>elif</snippet></ROW><ROW><id>6752527</id><snippet>pyramid.exceptions</snippet></ROW><ROW><id>6752527</id><snippet>pyramid.httpexceptions</snippet></ROW><ROW><id>6752527</id><snippet>def main(global_config, **settings):
    """
    This function returns a Pyramid WSGI application.
    """
    ...
    config.add_view('my_app.error_views.not_found_view',
        renderer='myapp:templates/not_found.pt',
        context='pyramid.exceptions.NotFound')
</snippet></ROW><ROW><id>6752671</id><snippet>#CLIENT
urlReq = urllib2.Request(url)
urlReq.add_header('Accept-Encoding', 'gzip')
urlConn = urllib2.urlopen(urlReq)
return zlib.decompress(urlConn.read(), 16+zlib.MAX_WBITS)
</snippet></ROW><ROW><id>6752723</id><snippet>gobject.TYPE_PYOBJECT</snippet></ROW><ROW><id>6752775</id><snippet>Numeric</snippet></ROW><ROW><id>6752775</id><snippet>dst_ary[...] = src_ary</snippet></ROW><ROW><id>6752775</id><snippet>dst_ary</snippet></ROW><ROW><id>6752775</id><snippet>Numeric.array</snippet></ROW><ROW><id>6752775</id><snippet>src_ary</snippet></ROW><ROW><id>6752775</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>6752799</id><snippet>FindFirstChangeNotification</snippet></ROW><ROW><id>6752874</id><snippet>p</snippet></ROW><ROW><id>6752874</id><snippet>a**((2*p-1)/3) %p</snippet></ROW><ROW><id>6752874</id><snippet>#assumes p prime returns cube root of a mod p
def cuberoot(a, p):
    if p == 2:
        return a
    if p == 3:
        return a
    if (p%3) == 2:
        return pow(a,(2*p - 1)/3, p)
    if (p%9) == 4:
        root = pow(a,(2*p + 1)/9, p)
        if pow(root,3,p) == a%p:
            return root
        else:
            return None
    if (p%9) == 7:
        root = pow(a,(p + 2)/9, p)
        if pow(root,3,p) == a%p:
            return root
        else:
            return None
    else:
        print "Not implemented yet. See the second paper"
</snippet></ROW><ROW><id>6753049</id><snippet>./manage.py shell</snippet></ROW><ROW><id>6753049</id><snippet>User.objects.all()[0].is_superuser</snippet></ROW><ROW><id>6753286</id><snippet>ModelAdmin</snippet></ROW><ROW><id>6753286</id><snippet>queryset</snippet></ROW><ROW><id>6753286</id><snippet>ChangeList</snippet></ROW><ROW><id>6753286</id><snippet>class MyFilteredAdmin(admin.ModelAdmin):
    def queryset(self, request):
        qs = super(MyFilteredAdmin, self).queryset(request)
        if is_related_to(self.model, Profile):
            qs = qs.exclude(user__email='guest@mysite.com')
        return qs
</snippet></ROW><ROW><id>6753286</id><snippet>admin.site.register(Model, MyFilteredAdmin)</snippet></ROW><ROW><id>6753286</id><snippet>MyFilteredAdmin</snippet></ROW><ROW><id>6753286</id><snippet>ModelAdmin</snippet></ROW><ROW><id>6753385</id><snippet>f = open(workbook.name, "w")
f.write(soup.prettify())
f.close()
</snippet></ROW><ROW><id>6753745</id><snippet>"box"</snippet></ROW><ROW><id>6753745</id><snippet>"datalim"</snippet></ROW><ROW><id>6753745</id><snippet>plt.imshow</snippet></ROW><ROW><id>6753745</id><snippet>plt.axis('image')</snippet></ROW><ROW><id>6753745</id><snippet>plt.axis('tight')</snippet></ROW><ROW><id>6753745</id><snippet>plt.xlim</snippet></ROW><ROW><id>6753745</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.random((10,10))

plt.figure()
plt.imshow(data, interpolation='nearest')
plt.title('Original Plot')

plt.figure()
plt.imshow(data, interpolation='nearest')
plt.xlim([2, 4])
plt.title('Resized Plot')

plt.figure()
plt.imshow(data, interpolation='nearest')
plt.axis('tight')
plt.xlim([2, 4])
plt.title('Resized Plot with Tight Axis')

plt.show()
</snippet></ROW><ROW><id>6753988</id><snippet>import sys
import operator
import linecache

x=0
y=7  # to skip
z=3  # to print

#g = open('tmp','a+')
while x&lt;23:
    x+=1
    print 'x==',x
    if operator.mod(x, y)==0:
        #curr = g.tell()
        for i in range(x,x+z):
            block=linecache.getline('poem.txt', i)
            print 'block==',repr(block)
            #g.write(block)
            linecache.clearcache()
            #g.seek(curr)
            #lines = g.read()
            #find(lines)

    else:
        pass

#g.close()
</snippet></ROW><ROW><id>6753988</id><snippet>1 In such a night, when every louder wind
2 Is to its distant cavern safe confined;
3 And only gentle Zephyr fans his wings,
4 And lonely Philomel, still waking, sings;
5 Or from some tree, famed for the owl's delight,
6 She, hollowing clear, directs the wand'rer right:
7 In such a night, when passing clouds give place,
8 Or thinly veil the heav'ns' mysterious face;
9 When in some river, overhung with green,
10 The waving moon and trembling leaves are seen;
11 When freshened grass now bears itself upright,
12 And makes cool banks to pleasing rest invite,
13 Whence springs the woodbind, and the bramble-rose,
14 And where the sleepy cowslip sheltered grows;
15 Whilst now a paler hue the foxglove takes,
16 Yet checkers still with red the dusky brakes
17 When scattered glow-worms, but in twilight fine,
18 Shew trivial beauties watch their hour to shine;
19 Whilst Salisb'ry stands the test of every light,
20 In perfect charms, and perfect virtue bright:
21 When odors, which declined repelling day,
22 Through temp'rate air uninterrupted stray;
23 When darkened groves their softest shadows wear,
24 And falling waters we distinctly hear;
</snippet></ROW><ROW><id>6753988</id><snippet>x== 1
x== 2
x== 3
x== 4
x== 5
x== 6
x== 7
block== '7 In such a night, when passing clouds give place,\n'
block== "8 Or thinly veil the heav'ns' mysterious face;\n"
block== '9 When in some river, overhung with green,\n'
x== 8
x== 9
x== 10
x== 11
x== 12
x== 13
x== 14
block== '14 And where the sleepy cowslip sheltered grows;\n'
block== '15 Whilst now a paler hue the foxglove takes,\n'
block== '16 Yet checkers still with red the dusky brakes\n'
x== 15
x== 16
x== 17
x== 18
x== 19
x== 20
x== 21
block== '21 When odors, which declined repelling day,\n'
block== "22 Through temp'rate air uninterrupted stray;\n"
block== '23 When darkened groves their softest shadows wear,\n'
x== 22
x== 23
x== 24
x== 25
</snippet></ROW><ROW><id>6753988</id><snippet>def chunk_reading(filepath,y,z,x=0):
    # x : number of lines to skip before the periodical treatment
    # y : number of lines to periodically skip
    # z : number of lines to periodically print
    with open('poem.txt') as f:
        try:
            for sk in xrange(x):
                f.next()
            while True:
                try:
                    for i in xrange(y):
                        print 'i==',i
                        f.next()
                    for j in xrange(z):
                        print 'j==',j
                        print repr(f.next())
                except StopIteration:
                    break
        except StopIteration:
            print 'Not enough lines before the lines to print'


chunk_reading('poem.txt',7,3)
</snippet></ROW><ROW><id>6753988</id><snippet>i== 0
i== 1
i== 2
i== 3
i== 4
i== 5
i== 6
j== 0
"8 Or thinly veil the heav'ns' mysterious face;\n"
j== 1
'9 When in some river, overhung with green,\n'
j== 2
'10 The waving moon and trembling leaves are seen;\n'
i== 0
i== 1
i== 2
i== 3
i== 4
i== 5
i== 6
j== 0
'18 Shew trivial beauties watch their hour to shine;\n'
j== 1
"19 Whilst Salisb'ry stands the test of every light,\n"
j== 2
'20 In perfect charms, and perfect virtue bright:\n'
i== 0
i== 1
i== 2
i== 3
i== 4
</snippet></ROW><ROW><id>6753988</id><snippet>def slice_reading(filepath,y,z,x=0):
    # x : number of lines to skip before the periodical treatment
    # y : number of lines to periodically skip
    # z : number of lines to periodically print
    with open('poem.txt') as f:
        lines = f.readlines()
        lgth = len(lines)

    if lgth &gt; x+y:
        for a in xrange(x+y,lgth,y+z):
            print lines[a:a+z]
    else:
        print 'Not enough lines before lines to print'


slice_reading('poem.txt',7,3,5)
</snippet></ROW><ROW><id>6753988</id><snippet>['13 Whence springs the woodbind, and the bramble-rose,\n', '14 And where the sleepy cowslip sheltered grows;\n', '15 Whilst now a paler hue the foxglove takes,\n']
['23 When darkened groves their softest shadows wear,\n', '24 And falling waters we distinctly hear;']
</snippet></ROW><ROW><id>6753997</id><snippet>in_string  = False
input_str  = 'foo,bar,\n"hihi","hi\nhi"'
output_str = ''

for ch in input_str:
    if ch == '"': in_string = not in_string
    if ch == '\n' and in_string: continue
    output_str += ch

print output_str
</snippet></ROW><ROW><id>6754157</id><snippet>sudo port install vtk5 +python27
</snippet></ROW><ROW><id>6754157</id><snippet>qt4_mac</snippet></ROW><ROW><id>6754157</id><snippet>sudo port install vtk5 +python27 +qt4_mac
</snippet></ROW><ROW><id>6754313</id><snippet>e = Event()
x = e.dd()
</snippet></ROW><ROW><id>6754356</id><snippet>datetime.datetime</snippet></ROW><ROW><id>6754356</id><snippet>Date</snippet></ROW><ROW><id>6754570</id><snippet>
    import httplib
    HOSTNAME = 'login.yahoo.com'
    conn = httplib.HTTPSConnection(HOSTNAME)
    conn.putrequest('GET', '/')
    conn.endheaders()
    response = conn.getresponse()
    print response.read()
</snippet></ROW><ROW><id>6754622</id><snippet>manage</snippet></ROW><ROW><id>6754895</id><snippet>import numpy as np

def binnings(n, k, cache={}):
    if n == 0:
        return np.zeros((1, k))
    if k == 0:
        return np.empty((0, 0))
    args = (n, k)
    if args in cache:
        return cache[args]
    a = binnings(n - 1, k, cache)
    a1 = a + (np.arange(k) == 0)
    b = binnings(n, k - 1, cache)
    b1 = np.hstack((np.zeros((b.shape[0], 1)), b))
    result = np.vstack((a1, b1))
    cache[args] = result
    return result

if __name__ == '__main__':
    import timeit
    print timeit.timeit('binnings(20, 5, {})', setup='from __main__ import binnings', number=1)
</snippet></ROW><ROW><id>6754895</id><snippet>0.0129251480103
</snippet></ROW><ROW><id>6754900</id><snippet>list.append</snippet></ROW><ROW><id>6754900</id><snippet>for i in out.readlines():
    lines.append(i)
    print lines
</snippet></ROW><ROW><id>6754969</id><snippet>const char addr[] = {0x4c, 0x6f, 0x8c};
NSData *data = [NSData dataWithBytes:addr length:sizeof(addr)];
NSArray *array = [NSArray arrayWithObject:data];
[waitOnEvent setMethod:@"waitOnEvent" withObjects:array];
</snippet></ROW><ROW><id>6755072</id><snippet>while True:
    try:
        func1() or func2() or func3()
    except:
        logger.exception("somthing bad happened")
</snippet></ROW><ROW><id>6755289</id><snippet>current_data</snippet></ROW><ROW><id>6755289</id><snippet>str(current_data)</snippet></ROW><ROW><id>6755289</id><snippet>SelectField</snippet></ROW><ROW><id>6755428</id><snippet>PayPalPaymentsForm</snippet></ROW><ROW><id>6755428</id><snippet>get_image</snippet></ROW><ROW><id>6755668</id><snippet>None</snippet></ROW><ROW><id>6755668</id><snippet>"not_in_dictionary" in c
</snippet></ROW><ROW><id>6755668</id><snippet>c[:not_in_dictionary] is not None
</snippet></ROW><ROW><id>6755668</id><snippet>:</snippet></ROW><ROW><id>6755668</id><snippet>d = {"a": 2, "c": 3}

try:
    print d["b"]
except KeyError:
    print "There is no b in our dict!"
</snippet></ROW><ROW><id>6755668</id><snippet>None</snippet></ROW><ROW><id>6755668</id><snippet>dict</snippet></ROW><ROW><id>6755668</id><snippet>.get</snippet></ROW><ROW><id>6755668</id><snippet>None</snippet></ROW><ROW><id>6755668</id><snippet>print d.get("a") # prints 2
print d.get("b") # prints None
print d.get("b", 0) # prints 0
</snippet></ROW><ROW><id>6755668</id><snippet>dict</snippet></ROW><ROW><id>6755668</id><snippet>in</snippet></ROW><ROW><id>6755668</id><snippet>not in</snippet></ROW><ROW><id>6755668</id><snippet>print "a" in d # True
print "b" in d # False
print "c" not in d # False
print "d" not in d # True
</snippet></ROW><ROW><id>6755668</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>6755668</id><snippet>import collections

d = collections.defaultdict(lambda: None)
print "b" in d # False
print d["b"] # None
print d["b"] == None # True
print "b" in d # True
</snippet></ROW><ROW><id>6755668</id><snippet>in</snippet></ROW><ROW><id>6755668</id><snippet>in</snippet></ROW><ROW><id>6755668</id><snippet>dict</snippet></ROW><ROW><id>6755777</id><snippet>limit=100</snippet></ROW><ROW><id>6755778</id><snippet>.seek(0)</snippet></ROW><ROW><id>6755778</id><snippet>self</snippet></ROW><ROW><id>6755778</id><snippet>__iter__()</snippet></ROW><ROW><id>6755778</id><snippet>__iter__()</snippet></ROW><ROW><id>6755778</id><snippet>__iter__()</snippet></ROW><ROW><id>6755778</id><snippet>.seek()</snippet></ROW><ROW><id>6755778</id><snippet>threading</snippet></ROW><ROW><id>6755778</id><snippet>.next()</snippet></ROW><ROW><id>6755778</id><snippet>MappedIterator</snippet></ROW><ROW><id>6755778</id><snippet>.__iter__()</snippet></ROW><ROW><id>6755778</id><snippet>.__iter__()</snippet></ROW><ROW><id>6755778</id><snippet>iter()</snippet></ROW><ROW><id>6755778</id><snippet>iter()</snippet></ROW><ROW><id>6755778</id><snippet>.next()</snippet></ROW><ROW><id>6755778</id><snippet>cnt</snippet></ROW><ROW><id>6755778</id><snippet>class CSVMapper(object):
    def __init__(self, reader, fname, mapping={}, **kwargs):
        self._reader = reader
        self._fname = fname
        self._mapping = mapping
        self._kwargs = kwargs
        self.line_num = 0

    def __iter__(self):
        cls = type(self)
        obj = cls(self._reader, self._fname, self._mapping, **self._kwargs)
        if "open_with" in self._kwargs:
            open_with = self._kwargs["open_with"]
            f = open_with(self._fname, **self._kwargs)
        else:
            f = open(self._fname, "rt")
        # "itr" is my standard abbreviation for an iterator instance
        obj.itr = obj._reader(f)
        return obj

    def next(self):
        item = self.itr.next()
        self.line_num += 1

        # If no mapping is provided, item is returned unchanged.
        if not self._mapping:
            return item  # csv.reader() returns a list of string values

        # we have a mapping so make a mapped object
        mapped_obj = {}

        key, value = item
        if key in self._mapping:
            return [self._mapping[key], value]
        else:
            return item

if __name__ == "__main__":
    lst_csv = [
        "foo, 0",
        "one, 1",
        "two, 2",
        "three, 3",
    ]

    import csv
    mapping = {"foo": "bar"}
    m = CSVMapper(csv.reader, lst_csv, mapping, open_with=iter)

    for item in m: # will print every item
        print item

    for item in m: # will print every item again
        print item
</snippet></ROW><ROW><id>6755778</id><snippet>.__iter__()</snippet></ROW><ROW><id>6755778</id><snippet>open_with()</snippet></ROW><ROW><id>6755778</id><snippet>open()</snippet></ROW><ROW><id>6755778</id><snippet>iter</snippet></ROW><ROW><id>6755778</id><snippet>open_with</snippet></ROW><ROW><id>6755778</id><snippet>csv.reader</snippet></ROW><ROW><id>6755778</id><snippet>.__len__()</snippet></ROW><ROW><id>6755778</id><snippet>len(obj)</snippet></ROW><ROW><id>6755778</id><snippet>line_num</snippet></ROW><ROW><id>6755778</id><snippet>len(obj)</snippet></ROW><ROW><id>6755778</id><snippet>.next()</snippet></ROW><ROW><id>6755778</id><snippet>**self._kwargs</snippet></ROW><ROW><id>6755778</id><snippet>call_with()</snippet></ROW><ROW><id>6755778</id><snippet>.__iter__()</snippet></ROW><ROW><id>6755778</id><snippet>call_with()</snippet></ROW><ROW><id>6755778</id><snippet>kwargs</snippet></ROW><ROW><id>6755778</id><snippet>call_with</snippet></ROW><ROW><id>6755778</id><snippet>.__init__()</snippet></ROW><ROW><id>6755778</id><snippet>None</snippet></ROW><ROW><id>6755896</id><snippet>os.walk</snippet></ROW><ROW><id>6755896</id><snippet>import os
from os.path import join

def hellothere(somepath):
    for root, dirs, files in os.walk(somepath):
        for curfile in files:
            yield join(root, curfile)


# call and get full list of results:
allfiles = [ x for x in hellothere("...") ]

# iterate over results lazily:
for x in hellothere("..."):
    print x
</snippet></ROW><ROW><id>6756242</id><snippet>self.frame.focus_set()</snippet></ROW><ROW><id>6756272</id><snippet>!</snippet></ROW><ROW><id>6756272</id><snippet>In[1]: !echo hello
hello

In[2]:
</snippet></ROW><ROW><id>6756272</id><snippet>dir()</snippet></ROW><ROW><id>6756272</id><snippet>x = !ls</snippet></ROW><ROW><id>6756272</id><snippet>x</snippet></ROW><ROW><id>6756272</id><snippet>os.system()</snippet></ROW><ROW><id>6756272</id><snippet>In[1]: !launch_eva
launch_eva: could not open AT Field

In[2]: import os
In[3]: exit_status = os.system("launch_eva")
launch_eva: could not open AT Field

In[4]: exit_status
3

In[5]:
</snippet></ROW><ROW><id>6756272</id><snippet>launch_eva</snippet></ROW><ROW><id>6756272</id><snippet>python ipython.py</snippet></ROW><ROW><id>6756272</id><snippet>_exit_status</snippet></ROW><ROW><id>6756426</id><snippet>192.168.1.1</snippet></ROW><ROW><id>6756426</id><snippet>192.168.1.2</snippet></ROW><ROW><id>6756426</id><snippet>%</snippet></ROW><ROW><id>6756939</id><snippet>ZeroMQ</snippet></ROW><ROW><id>6757184</id><snippet>score = 0
prev  = 0

for (x,y) in zip(seqA,seqB):

    if x == y:
        if prev == 1:
            score = score +3
        else:
            score = score +1
        prev = 1

    if x !=y :
        score = score - 1
        prev = 0
</snippet></ROW><ROW><id>6757225</id><snippet>from otherfile import TheClass
theclass = TheClass()
# if you want to return the output of run
return theclass.run()  
# if you want to return run itself to be used later
return theclass.run
</snippet></ROW><ROW><id>6757225</id><snippet>if __name__ == '__main__':
    a_game = Comm_system()
    a_game.run()
</snippet></ROW><ROW><id>6757251</id><snippet>page = urllib.urlopen(CHECK_PAGE, proxies={})
</snippet></ROW><ROW><id>6757251</id><snippet>urllib.getproxies = lambda x = None: {}
</snippet></ROW><ROW><id>6757292</id><snippet>try:
    response, content = h.request("http://www.folksdhhkjd.com")
    if response.status==200:
        print "Site is Up"
except httplib2.ServerNotFoundError:
    print "Site is Down"
</snippet></ROW><ROW><id>6757573</id><snippet>Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) 
&gt;&gt;&gt; 3 in [1, 2, 3] # To know if a value is in a list
True
&gt;&gt;&gt; 3 in {1: 'one', 2: 'two', 3: 'three'} # To know if a value is in keys of a dict
True
&gt;&gt;&gt; 'three' in {1: 'one', 2: 'two', 3: 'three'}.values() # To know if a value is in values of a dict
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6757573</id><snippet>not in</snippet></ROW><ROW><id>6757573</id><snippet>in</snippet></ROW><ROW><id>6757643</id><snippet>globals()[string1 + string2]()
locals()[string1 + string2]()
</snippet></ROW><ROW><id>6757860</id><snippet>&lt;?php

    $ch = curl_init("http://www.example.com/");
    $fp = fopen("example_homepage.txt", "w");

    curl_setopt($ch, CURLOPT_FILE, $fp);
    curl_setopt($ch, CURLOPT_HEADER, 0);

    curl_exec($ch);
    curl_close($ch);
    fclose($fp);
?&gt;
</snippet></ROW><ROW><id>6757979</id><snippet>return</snippet></ROW><ROW><id>6757979</id><snippet>test()</snippet></ROW><ROW><id>6757979</id><snippet>test()</snippet></ROW><ROW><id>6757979</id><snippet>for item in test():
    print item
</snippet></ROW><ROW><id>6757979</id><snippet>from exceptions import StopIteration
it = iter(test())

while True:
    try:
        item = it.next()
    except StopIteration:
        break
    print item
</snippet></ROW><ROW><id>6758117</id><snippet>pBits = im.convert("RGBA").tostring("raw", "RGBA")
</snippet></ROW><ROW><id>6758117</id><snippet>len(pBits) == im.size[0]*im.size[1]*4</snippet></ROW><ROW><id>6758428</id><snippet>.upper()</snippet></ROW><ROW><id>6758428</id><snippet>in</snippet></ROW><ROW><id>6758428</id><snippet>__contains__</snippet></ROW><ROW><id>6758687</id><snippet>sys.exit()</snippet></ROW><ROW><id>6758687</id><snippet>errno</snippet></ROW><ROW><id>6758687</id><snippet>linux/include/errno.h</snippet></ROW><ROW><id>6758687</id><snippet>errno.ENOENT</snippet></ROW><ROW><id>6758951</id><snippet>.text</snippet></ROW><ROW><id>6758951</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup()
&gt;&gt;&gt; soup.feed('&lt;a href="http://something.com"&gt;this is some text&lt;/a&gt;')
&gt;&gt;&gt; soup.findAll('a', href=True)[0]['href']
u'http://something.com'
&gt;&gt;&gt; soup.findAll('a', href=True)[0].text
u'this is some text'
</snippet></ROW><ROW><id>6758951</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup()
&gt;&gt;&gt; soup.feed(yourhtml)
&gt;&gt;&gt; [txt for txt in soup.findAll(text=True) if 'identified' in txt.lower()]
[u'\n   This should be identified \n\n   Identify me 1 \n\n   Identify me 2 \n   ', u' identified ']
</snippet></ROW><ROW><id>6758951</id><snippet>BeautifulSoup.NavigableString</snippet></ROW><ROW><id>6758951</id><snippet>a</snippet></ROW><ROW><id>6758951</id><snippet>txt.parent.name == 'a'</snippet></ROW><ROW><id>6758951</id><snippet>import BeautifulSoup
import re

soup = BeautifulSoup.BeautifulSoup()
html = '''
&lt;html&gt;&lt;body&gt;
 &lt;div&gt; &lt;a href="www.test1.com/identify"&gt;test1&lt;/a&gt; &lt;/div&gt;
 &lt;div&gt;&lt;br&gt;&lt;/div&gt;
 &lt;div&gt;&lt;a href="www.test2.com/identify"&gt;test2&lt;/a&gt;&lt;/div&gt;
 &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;
 &lt;div&gt;
   This should be identified 

   Identify me 1 

   Identify me 2 
   &lt;p id="firstpara" align="center"&gt; This paragraph should be&lt;b&gt; identified &lt;/b&gt;.&lt;/p&gt;
 &lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
'''
soup.feed(html)
for txt in soup.findAll(text=True):
    if re.search('identi',txt,re.I) and txt.parent.name != 'a':
        newtext = re.sub(r'identi(\w+)', r'replace\1', txt.lower())
        txt.replaceWith(newtext)
print(soup)


&lt;html&gt;&lt;body&gt;
&lt;div&gt; &lt;a href="www.test1.com/identify"&gt;test1&lt;/a&gt; &lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href="www.test2.com/identify"&gt;test2&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
   this should be replacefied 

   replacefy me 1 

   replacefy me 2 
   &lt;p id="firstpara" align="center"&gt; This paragraph should be&lt;b&gt; replacefied &lt;/b&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>6759256</id><snippet>[filters]
filtersToCheck = foo,192.168.1.2,barbaz
</snippet></ROW><ROW><id>6759256</id><snippet>filtersToCheck = value.split(',')
</snippet></ROW><ROW><id>6759261</id><snippet>result = "".join([el for el in sequence_lines2 if not len(el) % 60])
</snippet></ROW><ROW><id>6759261</id><snippet>len(el) % 60</snippet></ROW><ROW><id>6759499</id><snippet>added.sort(key=lambda x: os.stat(os.path.join(path_to_watch, x)).st_mtime)
</snippet></ROW><ROW><id>6759499</id><snippet>added</snippet></ROW><ROW><id>6759499</id><snippet>st_ctime</snippet></ROW><ROW><id>6759499</id><snippet>st_mtime</snippet></ROW><ROW><id>6759676</id><snippet>from PIL import Image, ImageSequence
im = Image.open("spam.psd")
layers = [frame.copy() for frame in ImageSequence.Iterator(im)]
</snippet></ROW><ROW><id>6759760</id><snippet>b = '%s' * 3
b % tuple(range(3))
</snippet></ROW><ROW><id>6760024</id><snippet>like</snippet></ROW><ROW><id>6760024</id><snippet>signature</snippet></ROW><ROW><id>6760024</id><snippet>MyObject</snippet></ROW><ROW><id>6760024</id><snippet>def signature(self):
    return (self.period, frozenset(self.dimensions.keys()))
</snippet></ROW><ROW><id>6760024</id><snippet>import collections
sig_keys = collections.defaultdict(set)
for k, obj in dic.iteritems():
    sig_keys[obj.signature()].add(k)
</snippet></ROW><ROW><id>6760024</id><snippet>sig_keys.values()</snippet></ROW><ROW><id>6760024</id><snippet>sig_objs = collections.defaultdict(list)
for obj in dic.itervalues():
    sig_objs[obj.signature()].append(obj)
</snippet></ROW><ROW><id>6760024</id><snippet>__hash__</snippet></ROW><ROW><id>6760024</id><snippet>return hash(self.signature())</snippet></ROW><ROW><id>6760158</id><snippet>import os
import time

PING_HOST='10.10.10.10' # some host on the other side of the VPN

while True:
    retcode = os.system('ping -c 1 %s' % PING_HOST)

    if retcode:  
       # perform action for lost connection
       logging.warn("Lost visibility with %s" % PING_HOST)

    time.sleep(10) # sleep 10 seconds
</snippet></ROW><ROW><id>6760468</id><snippet>\\\\</snippet></ROW><ROW><id>6760468</id><snippet>re.sub('\\\\', '/', "C:\\Users\\Judge")</snippet></ROW><ROW><id>6760468</id><snippet>'C:\\Users\\Judge'.replace('\\', '/')</snippet></ROW><ROW><id>6760471</id><snippet>matrices = tuple(matrix1, matrix2, matrix3)</snippet></ROW><ROW><id>6760471</id><snippet>matrices = [matrix1, matrix2, matrix3]</snippet></ROW><ROW><id>6760471</id><snippet>matrix.append(matrix4)</snippet></ROW><ROW><id>6760471</id><snippet>matrices[0]</snippet></ROW><ROW><id>6760471</id><snippet>for matrix in matricies: pass # do stuff</snippet></ROW><ROW><id>6760517</id><snippet>netstat -a -p</snippet></ROW><ROW><id>6760517</id><snippet>netstat -a</snippet></ROW><ROW><id>6760517</id><snippet>-p</snippet></ROW><ROW><id>6760593</id><snippet>class foo:
    def __init__(self, **kwargs):
        vars(self).update(kwargs)
</snippet></ROW><ROW><id>6760774</id><snippet>#!/usr/bin/env python

import sys

def main():
    filename = "my_dict.txt"
    listfile = open(filename)
    # doesn't create an itermediate list
    listDM = set(line.strip() for line in listfile)
    # less Pythonic but significantly faster
    # still doesn't create an intermediate list
    # listDM = set(imap(str.strip, listfile))
    listfile.close()  
    for line in sys.stdin:
        line = line.strip()
        if line in listDM:
            print  '%s\t%d' % (line, 1) 

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6760774</id><snippet>from itertools import imap</snippet></ROW><ROW><id>6760878</id><snippet>[item for item in myList if item.flag]
[item for item in myList if not item.flag]
</snippet></ROW><ROW><id>6760878</id><snippet>flag</snippet></ROW><ROW><id>6760878</id><snippet>WhatEver</snippet></ROW><ROW><id>6760995</id><snippet>ESCAPE</snippet></ROW><ROW><id>6760995</id><snippet>stmt = "SELECT * from myTable where id=:idVar AND pct LIKE :pctVar ESCAPE '\\'"
</snippet></ROW><ROW><id>6761015</id><snippet>import itertools
[ list(x[1]) for x in itertools.groupby(data, lambda x: x == 0) if not x[0] ]
</snippet></ROW><ROW><id>6761028</id><snippet>__builtin__</snippet></ROW><ROW><id>6761028</id><snippet>Python/bltinmodule.c</snippet></ROW><ROW><id>6761028</id><snippet>filter</snippet></ROW><ROW><id>6761028</id><snippet>builtin_filter</snippet></ROW><ROW><id>6761028</id><snippet>Modules/</snippet></ROW><ROW><id>6761234</id><snippet>import re
left='british'
right='7'
i1 = re.sub('(?i)(\s+)(%s)(\s+)'%left, '\\1&lt;w1&gt;\\2&lt;/w1&gt;\\3', i)
i2 = re.sub('(?i)(\s+)(%s)(\s+)'%right, '\\1&lt;w2&gt;\\2&lt;/w2&gt;\\3', i1)
print(i2)
</snippet></ROW><ROW><id>6761234</id><snippet>'&lt;s id="69-7"&gt;...Meanwhile is the studio &lt;w2&gt;7&lt;/w2&gt; album by &lt;w1&gt;British&lt;/w1&gt; pop band 10cc.&lt;/s&gt;'</snippet></ROW><ROW><id>6761234</id><snippet>import re

def do(left, right, line):
    parts = [x for x in re.split('(&lt;[^&gt;]+&gt;)', line) if x]
    for idx, l in enumerate(parts):
        lu = l.upper()
        if (not ('&lt;s' in l or 's&gt;' in l) and
            (left.upper() in lu and right.upper() in lu)):
            l = re.sub('(?i)(\s+)(%s)(\s+)'%left, '\\1&lt;w1&gt;\\2&lt;/w1&gt;\\3', l)
            l = re.sub('(?i)(\s+)(%s)(\s+)'%right, '\\1&lt;w2&gt;\\2&lt;/w2&gt;\\3', l)
            parts[idx] = l

    return ''.join(parts)


line = '&lt;s id="69-7"&gt;...Meanwhile is the studio 7 album by British pop band 10cc.&lt;/s&gt;'
print(do('british', '7', line))
print(do('british', '-7', line))
</snippet></ROW><ROW><id>6761335</id><snippet>dir()</snippet></ROW><ROW><id>6761335</id><snippet>__dir__()</snippet></ROW><ROW><id>6761335</id><snippet>__dir__()</snippet></ROW><ROW><id>6761335</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>6761335</id><snippet>(name, attribute)</snippet></ROW><ROW><id>6761335</id><snippet>object.__dict__</snippet></ROW><ROW><id>6761335</id><snippet>{key: attribute, key2: atrribute2}</snippet></ROW><ROW><id>6761335</id><snippet>object.__dict__.keys()</snippet></ROW><ROW><id>6761335</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>6761335</id><snippet>int.__dict__.keys()</snippet></ROW><ROW><id>6761335</id><snippet>['__setattr__', '__reduce_ex__', '__reduce__', '__class__', '__delattr__', '__subclasshook__', '__sizeof__', '__init__']
</snippet></ROW><ROW><id>6761335</id><snippet>dir()</snippet></ROW><ROW><id>6761335</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>6761335</id><snippet>__dict__</snippet></ROW><ROW><id>6761378</id><snippet>getfile()</snippet></ROW><ROW><id>6761378</id><snippet>getsourcefile()</snippet></ROW><ROW><id>6761802</id><snippet>imp</snippet></ROW><ROW><id>6761802</id><snippet>__import__</snippet></ROW><ROW><id>6761802</id><snippet>module_name = 'polly'
module = getattr(__import__('lidardaten.datatypes', globals(), locals(), [module_name]), module_name)
</snippet></ROW><ROW><id>6761844</id><snippet>class MyHandler(CGIHTTPServer.CGIHTTPRequestHandler):

    # Disable logging DNS lookups
    def address_string(self):
        return str(self.client_address[0])

handler = MyHandler
</snippet></ROW><ROW><id>6761850</id><snippet>import my_module
</snippet></ROW><ROW><id>6761850</id><snippet>import my_long_module as m
</snippet></ROW><ROW><id>6762657</id><snippet>csv</snippet></ROW><ROW><id>6762657</id><snippet>import csv
import io

fruit_mess = [['watermelon,0,1.0\n'], ['apple,0,1.0\n'], ['"pineapple",0,1.0\n'], ['"strawberry, banana",0,1.0\n'], ['peach plum pear,0,1.0\n'], ['"orange, grape",0,1.0\n']]

# flatten the list of lists into a string:
data='\n'.join(item[0].strip() for item in fruit_mess)    
reader=csv.reader(io.BytesIO(data))
neat_fruit=[[fruit,int(num1),float(num2)] for fruit,num1,num2 in reader]

print(neat_fruit)    
# [['watermelon', 0, 1.0], ['apple', 0, 1.0], ['pineapple', 0, 1.0], ['strawberry, banana', 0, 1.0], ['peach plum pear', 0, 1.0], ['orange, grape', 0, 1.0]]
</snippet></ROW><ROW><id>6762730</id><snippet>&gt;&gt;&gt; a = ['AA', 'BB', 'C', 'D']
&gt;&gt;&gt; a[0] += a.pop(1)
</snippet></ROW><ROW><id>6762730</id><snippet>a = ['AA', 'BB', 'C', 'D']
outList = a[:] # make a copy of list values
outList[0] += outputList.pop(1)
</snippet></ROW><ROW><id>6762730</id><snippet>from itertools import groupby

a = ['AA', 'BB', 'C', 'D']
res = [''.join((str(z) for z in y)) for x, y in groupby(a, key = lambda x: len(x) == 2)]
</snippet></ROW><ROW><id>6763241</id><snippet>from wxPython.wx import *
from wx import *
</snippet></ROW><ROW><id>6763241</id><snippet>import wx
</snippet></ROW><ROW><id>6763270</id><snippet>import time
endTime = time.time() + 60
for t in threads:
    t.join(endTime - time.time())
    t.event.set()
</snippet></ROW><ROW><id>6763438</id><snippet>for line in (line for line in x if not line.startswith('?')):
    DO_STUFF
</snippet></ROW><ROW><id>6763438</id><snippet>for line in x:
    if line.startswith("?"):
        continue
    DO_STUFF
</snippet></ROW><ROW><id>6763438</id><snippet>for line in x:
    if not line.startswith("?"):
        DO_STUFF
</snippet></ROW><ROW><id>6763650</id><snippet>[0-9]+</snippet></ROW><ROW><id>6763650</id><snippet>*</snippet></ROW><ROW><id>6764097</id><snippet>list_contains</snippet></ROW><ROW><id>6764097</id><snippet>listobject.c</snippet></ROW><ROW><id>6764097</id><snippet>set_lookkey_string</snippet></ROW><ROW><id>6764097</id><snippet>setobject.c</snippet></ROW><ROW><id>6764498</id><snippet>bools = [False, False, False, True, False]
# we're using constants here but you can use variables

# find first True value
whichbool = bools.index(True)

# now call a function based on that value
[func0, func1, func2, func3, func4][whichbool]()
</snippet></ROW><ROW><id>6764498</id><snippet>True</snippet></ROW><ROW><id>6764498</id><snippet>sum()</snippet></ROW><ROW><id>6764498</id><snippet>True</snippet></ROW><ROW><id>6764498</id><snippet>True</snippet></ROW><ROW><id>6764520</id><snippet>class Conditional_Singleton(object):
    saved_insances = {}
    def __new__(cls, condition = None):
        if not condition in cls.saved_instances:
            cls.saved_instances[condition] = super(
                Conditional_Singleton, cls).__new__(cls)
        return cls.saved_instances[condition]
    def __init__(self, condition = None):
        if not getattr(self, 'initialization'):
            self.initialization = some_func_of(condition)
</snippet></ROW><ROW><id>6764520</id><snippet>condition</snippet></ROW><ROW><id>6764520</id><snippet>__hash__</snippet></ROW><ROW><id>6764520</id><snippet>__new__</snippet></ROW><ROW><id>6764520</id><snippet>__init__</snippet></ROW><ROW><id>6764685</id><snippet>a = np.random.normal(size=(20,10,10))
</snippet></ROW><ROW><id>6764685</id><snippet>for k in xrange(a.shape[0]):
    b = np.linalg.eig(a[k,:,:])
</snippet></ROW><ROW><id>6764685</id><snippet>np.linalg.eig</snippet></ROW><ROW><id>6764696</id><snippet>./configure.py --help
./configure.py --some-options
sudo python setup.py install
cd test/
g++ -I/usr/include/python2.7 -fPIC -g -fpic -shared sample_ext.cpp -lboost_python -lpython2.7 -o sample_ext.so
python sample.py 
</snippet></ROW><ROW><id>6764969</id><snippet>for i in mylist:
  if i not in newlist:
    newlist.append(i)
</snippet></ROW><ROW><id>6765086</id><snippet>from django.core.files.uploadhandler import TemporaryFileUploadHandler, StopUpload

class SizeLimitUploadHandler(TemporaryFileUploadHandler):
    def new_file(self, field_name, file_name, content_type, content_length, charset):
        if content_length &gt; MAX_FILE_SIZE:
            raise StopUpload(True)
</snippet></ROW><ROW><id>6765086</id><snippet>By passing a ''resize_source'' argument to the ''ThumbnailerImageField'', you
can resize the source image before it is saved::</snippet></ROW><ROW><id>6765086</id><snippet>class Profile(models.Model):
    user = models.ForeignKey('auth.User')
    avatar = ThumbnailerImageField(
        upload_to='avatars',
        resize_source=dict(size=(50, 50), crop='smart'),
    )
</snippet></ROW><ROW><id>6765623</id><snippet>" Rope AutoComplete
let ropevim_vim_completion = 1
let ropevim_extended_complete = 1
let g:ropevim_autoimport_modules = ["os.*","traceback","django.*", "xml.etree"]
imap &lt;c-space&gt; &lt;C-R&gt;=RopeCodeAssistInsertMode()&lt;CR&gt;
</snippet></ROW><ROW><id>6765644</id><snippet>def extract_delimited_data(data, begin_delimiter, end_delimiter):
    s = data.find(begin_delimiter)

    while s != -1:
        e = data.find(end_delimiter, s + len(begin_delimiter))

        s += len(begin_delimiter)
        yield data[s:e]

        s = data.find(begin_delimiter, e + len(end_delimiter))

data = 'foo&lt;bar&gt;hello&lt;world&gt;'

print list(extract_delimited_data(data, '&lt;', '&gt;'))
</snippet></ROW><ROW><id>6765644</id><snippet>['bar', 'world']
</snippet></ROW><ROW><id>6765700</id><snippet>@register.filter 
def mygetattr(obj, name): 
    return getattr(obj, name) 
</snippet></ROW><ROW><id>6765937</id><snippet>SELECT m.*, p1.*, p2.*
  FROM msgs m
INNER JOIN profiles p1 ON m.src = p1.login_hash
INNER JOIN profiles p2 ON m.dest = p2.login_hash
</snippet></ROW><ROW><id>6766022</id><snippet>process.poll()</snippet></ROW><ROW><id>6766022</id><snippet>process.pole()</snippet></ROW><ROW><id>6766022</id><snippet> for i in range(nfuncs):
    t=MyThread(funcs[i],(command,output))
    threads.append(t)
</snippet></ROW><ROW><id>6766022</id><snippet> for func in nfuncs:
    t=MyThread(func,(command,output))
    threads.append(t)
</snippet></ROW><ROW><id>6766022</id><snippet>python test.py</snippet></ROW><ROW><id>6766022</id><snippet>ls communicate</snippet></ROW><ROW><id>6766022</id><snippet>def bash(command,output):
    process=Popen('bash',stdout=PIPE,stdin=PIPE,stderr=PIPE,shell=True)
    print process.stdout.readlines()
    # I don't really understand what's going on here
    while (process.pole()==None):
        print 'bash'
        process.stdin.write(command.get(1))
        process.stdin.flush()
        output.put(process.stdout.readlines(),1)
        process.stdout.flush()
</snippet></ROW><ROW><id>6766259</id><snippet>Py</snippet></ROW><ROW><id>6766259</id><snippet>scipy</snippet></ROW><ROW><id>6766259</id><snippet>/usr/lib64/python2.7/site-packages/scipy/weave/examples/binary_search.py
</snippet></ROW><ROW><id>6766383</id><snippet>after</snippet></ROW><ROW><id>6766592</id><snippet>spectrum</snippet></ROW><ROW><id>6766773</id><snippet>index.html</snippet></ROW><ROW><id>6766773</id><snippet>- url: /index.html
  static_files: index.html
  upload: index.html
</snippet></ROW><ROW><id>6766773</id><snippet>static_files</snippet></ROW><ROW><id>6766773</id><snippet>http://mysite.com/index.html</snippet></ROW><ROW><id>6766773</id><snippet>static_files</snippet></ROW><ROW><id>6766850</id><snippet>cmd.exe</snippet></ROW><ROW><id>6766850</id><snippet>pygmentize</snippet></ROW><ROW><id>6766850</id><snippet>python.exe</snippet></ROW><ROW><id>6766850</id><snippet>C:\Python27\Scripts\pygmentize</snippet></ROW><ROW><id>6766876</id><snippet>input = [('ART', [100, 234, 830, 304]), 
         ('MATH', [600, 1400, 300, 340]), 
         ('HISTORY', [2010, 300, 400, 600])]
</snippet></ROW><ROW><id>6766876</id><snippet>print sorted( ( (k,sum(v)/len(v)) for k,v in input ), key=lambda t: t[1] )
</snippet></ROW><ROW><id>6766876</id><snippet>[('ART', 367), ('MATH', 660), ('HISTORY', 827)]
</snippet></ROW><ROW><id>6767073</id><snippet>myproject/
    __init__.py
    call_participant.py
    lib/
        __init__.py
        lib_add_participant.py
</snippet></ROW><ROW><id>6767073</id><snippet>__init__.py</snippet></ROW><ROW><id>6767073</id><snippet>from .lib.lib_add_participant import LibAddParticipant
</snippet></ROW><ROW><id>6767073</id><snippet>call_participant.py</snippet></ROW><ROW><id>6767073</id><snippet>lib</snippet></ROW><ROW><id>6767073</id><snippet>pythonpath</snippet></ROW><ROW><id>6767301</id><snippet>which python</snippet></ROW><ROW><id>6767510</id><snippet>twisted.spread.pb.IUsernameMD5Password</snippet></ROW><ROW><id>6767510</id><snippet>InMemoryUsernamePasswordDatabaseDontUse</snippet></ROW><ROW><id>6767691</id><snippet>print("Hello!")
</snippet></ROW><ROW><id>6767792</id><snippet>status</snippet></ROW><ROW><id>6767792</id><snippet>import psutil
p = psutil.Process(the_pid_you_want)
if p.status == psutil.STATUS_ZOMBIE:
    ....
</snippet></ROW><ROW><id>6768093</id><snippet>with open('input.txt') as fhi, open('output.txt', 'w') as fho:
  for line in fhi:
    if not pattern.search(line):
      # if there is no match write the line to the output file and proceed.
      fho.write(line)
      continue

    # if we get this far we found a match.  Scan up to seven lines.
    for i in range(7):
      toCheck = next(fhi)

      if not pattern2.search(toCheck):
        # if we don't find the 2nd keyword write the line, continue the sub-loop.
        fho.write(toCheck)
        continue

      # if we get this far we found the second pattern.  Add our newline.
      fho.write(toCheck)
      fho.write('\r\n')
</snippet></ROW><ROW><id>6768358</id><snippet>(?-i)</snippet></ROW><ROW><id>6768358</id><snippet>re.I</snippet></ROW><ROW><id>6768358</id><snippet>re.M</snippet></ROW><ROW><id>6768358</id><snippet>(?i:xyz)</snippet></ROW><ROW><id>6768358</id><snippet>(?:(?!http://)(?!testing[0-9])(?!example[0-9]).)*?
</snippet></ROW><ROW><id>6768358</id><snippet>(?:(?!http://|testing[0-9]|example[0-9]).)*?
</snippet></ROW><ROW><id>6768358</id><snippet>s1 = re.sub(r'^((?!http://|testing[0-9]|example[0-9]).*?)(CODE[0-9]{3})(?!&lt;/a&gt;)', 
            r'\g&lt;1&gt;&lt;a href="http://productcode/\g&lt;2&gt;"&gt;\g&lt;2&gt;&lt;/a&gt;', s)
</snippet></ROW><ROW><id>6768358</id><snippet>http://</snippet></ROW><ROW><id>6768358</id><snippet>&lt;a&gt;...&lt;/a&gt;</snippet></ROW><ROW><id>6768358</id><snippet>(?s)(?:(&lt;a\s+[^&gt;]*&gt;.*?&lt;/a&gt;)|\b((?:(?!testing[0-9]|example[0-9])\w)*?)(CODE[0-9]{3}))
</snippet></ROW><ROW><id>6768549</id><snippet>max_value = max(scores.values())
keys = [ i for (i,v) in scores.iteritems() if v == max_value ]
</snippet></ROW><ROW><id>6768681</id><snippet>error_dict</snippet></ROW><ROW><id>6768681</id><snippet>import json
out = json.dumps(error_dict)
</snippet></ROW><ROW><id>6768681</id><snippet>@view_config(route_name='some_route, renderer='json')
def myview(request):
    if #stuff fails to validate:
        error_dict = # the dict
        request.response.status = 400
        return {'errors': error_dict}

    return {
        # valid data
    }
</snippet></ROW><ROW><id>6768681</id><snippet>response = HTTPBadRequest()
response.body = json.dumps(error_dict)
response.content_type = 'application/json'
return response
</snippet></ROW><ROW><id>6768681</id><snippet>curl -i &lt;url&gt;
</snippet></ROW><ROW><id>6768880</id><snippet>class A:

    @timings
    @classmethod
    def a(cls, x):
       print(x)

A.a(2)
</snippet></ROW><ROW><id>6768880</id><snippet>class A:

    @classmethod
    @timings
    def a(cls, x):
        print(x)

A.a(2)
</snippet></ROW><ROW><id>6769032</id><snippet>cmap</snippet></ROW><ROW><id>6769109</id><snippet>char[1000]</snippet></ROW><ROW><id>6769109</id><snippet>char</snippet></ROW><ROW><id>6769109</id><snippet>array.array('B', [0]*1000)</snippet></ROW><ROW><id>6769500</id><snippet>if "%begdate%" in element.text:
</snippet></ROW><ROW><id>6769500</id><snippet>if element.text and "%begdate%" in element.text:
</snippet></ROW><ROW><id>6769621</id><snippet>UserProfile.objects.select(extra={'birth_day': 'extract(day from birthDate)'}).order_by('-birth_day')
</snippet></ROW><ROW><id>6769701</id><snippet>cmd.exe /c python myscript.py &gt; NUL 2&gt;&amp;1

cmd.exe /c python myscript.py &gt; output.txt 2&gt;&amp;1
</snippet></ROW><ROW><id>6769860</id><snippet>&lt;a&gt;&lt;b description="Foo" Bar"&gt;&lt;/b&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>6769860</id><snippet>"</snippet></ROW><ROW><id>6769860</id><snippet>"</snippet></ROW><ROW><id>6769860</id><snippet>&lt;a&gt;&lt;b description="Foo" Bar="..."&gt;&lt;/b&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>6770033</id><snippet>collections.Counter</snippet></ROW><ROW><id>6770033</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; x = Counter([1, 2, 3, 4])
&gt;&gt;&gt; y = Counter([1, 1, 2, 5, 6])
&gt;&gt;&gt; x - y
Counter({3: 1, 4: 1})
&gt;&gt;&gt; y - x
Counter({1: 1, 5: 1, 6: 1})
</snippet></ROW><ROW><id>6770033</id><snippet>Counter</snippet></ROW><ROW><id>6770033</id><snippet>elements</snippet></ROW><ROW><id>6770033</id><snippet>&gt;&gt;&gt; list((x - y).elements())
[3, 4]
&gt;&gt;&gt; list((y - x).elements())
[1, 5, 6]
</snippet></ROW><ROW><id>6770312</id><snippet>engine</snippet></ROW><ROW><id>6770312</id><snippet>saythread</snippet></ROW><ROW><id>6770312</id><snippet>def saythread(engine, location, text):
    engine.say(text)
    engine.runAndWait()        

# ...later...

engine = pyttsx.init()                 #(CHANGED) ADDED VARIABLE 
t = threading.Thread(target=saythread,args=(engine, 1, "here we go"),name='sayitthread')
t.start()
</snippet></ROW><ROW><id>6770312</id><snippet>engine</snippet></ROW><ROW><id>6770312</id><snippet>def saythread(engine, lock, location, text):
    with lock:
        engine.say(text)
        engine.runAndWait()  

engine = pyttsx.init()
lock = threading.Lock()
t = threading.Thread(
        target=saythread,
        args=(engine, lock, 1, "here we go"),
        name='sayitthread')
t.start()
</snippet></ROW><ROW><id>6770312</id><snippet>engine</snippet></ROW><ROW><id>6770312</id><snippet>engine</snippet></ROW><ROW><id>6770632</id><snippet>self.master.config(menu=self.MainMenu)</snippet></ROW><ROW><id>6770632</id><snippet>from Tkinter import *
import tkFileDialog

class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.master = master
        self.create_wgts()

    def create_wgts(self):
        self.MainMenu=Menu(self.master)

        self.wgt_confirm = Button(text='Confirm', command=self.traceback).pack(side=RIGHT)

        self.wgt_entry = Entry()
        self.wgt_entry.pack(side=RIGHT, fill=X, expand=1, ipadx=200)
        self.wgt_entry.bind('&lt;Key-Return&gt;', self.hit_enter)

        self.casMenu_File = Menu(self.MainMenu)
        self.casMenu_File.add_command(label="Open File", command=self.file_select)
        self.casMenu_File.add_command(label="Write to File", command=self.file_write)
        self.casMenu_File.add_separator()
        self.casMenu_File.add_command(label="Exit", command=self.traceback)

        self.MainMenu.add_cascade(label='File', menu=self.casMenu_File)
        self.master.config(menu=self.MainMenu)

    def traceback(self):
        print "traceback called"


    def hit_enter(self, event):
        print "Hit ENTER"


    def file_select(self):
        print "File&gt;Open called"


    def file_write(self):
        print "File&gt;Write File called"


root = Tk()
app = Application(master=root)
app.mainloop()
</snippet></ROW><ROW><id>6770679</id><snippet>def main():
    import argparse
    parser = argparse.ArgumentParser(description='user-data-script.py: initial python instance startup script')
    parser.add_argument('--skip-update', default=False, action='store_true', help='skip apt package updates')
    # parser.add_argument whatever else you need
    args = parser.parse_args()

    if not args.skip_update:
        # do update
        import apt
        cache = apt.Cache()
        cache.update()
        cache.open(None)
        cache.upgrade()
        cache.commit()

        # restart, and skip update
        import os, sys
        command = sys.argv[0]
        args = sys.argv
        if skipupdate:
            args += ['--skip-update']
        os.execv(command, args)

    else:
        # run your usual code
        pass

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6770839</id><snippet>def your_view(request, ..., page_size=50):
  scanned_assets_qs = # get your scanned_assets QuerySet

  if page_size == -1:
    page_size = scanned_assets_qs.count()

  paginator = Paginator(scanned_assets_qs, page_size)
</snippet></ROW><ROW><id>6771097</id><snippet>else: pass</snippet></ROW><ROW><id>6771097</id><snippet>thisKey</snippet></ROW><ROW><id>6771097</id><snippet>print</snippet></ROW><ROW><id>6771097</id><snippet>if thisKey in masterDictionary == False:</snippet></ROW><ROW><id>6771097</id><snippet>if thisKey not in masterDictionary:</snippet></ROW><ROW><id>6771097</id><snippet>True</snippet></ROW><ROW><id>6771097</id><snippet>False</snippet></ROW><ROW><id>6771097</id><snippet>Item</snippet></ROW><ROW><id>6771097</id><snippet>thisKey in masterDictionary == False</snippet></ROW><ROW><id>6771097</id><snippet>in</snippet></ROW><ROW><id>6771097</id><snippet>a &lt;= b &lt; c</snippet></ROW><ROW><id>6771097</id><snippet>(thisKey in masterDictionary) and (masterDictionary == False)</snippet></ROW><ROW><id>6771097</id><snippet>if thisKey not in masterDictionary:</snippet></ROW><ROW><id>6771097</id><snippet>thisList</snippet></ROW><ROW><id>6771097</id><snippet>thisSublist</snippet></ROW><ROW><id>6771137</id><snippet>property()</snippet></ROW><ROW><id>6771257</id><snippet>export PATH=$PATH:/Developer/usr/bin</snippet></ROW><ROW><id>6771288</id><snippet>#include &lt;vector&gt;

void funct() {
    std::vector&lt;int&gt; myList;
    for(int i = 0; i &lt; 10; i++)
        myList.push_back(10);
}
</snippet></ROW><ROW><id>6771397</id><snippet>packed_data = ''.join(chr(int(asciiString[i:i+8], 2)) 
                         for i in range(0, len(asciiString), 8))
</snippet></ROW><ROW><id>6771397</id><snippet>asciiString</snippet></ROW><ROW><id>6771397</id><snippet>asciiString</snippet></ROW><ROW><id>6771397</id><snippet>packed_data = chr(len(asciiString) % 8) + packed_data
</snippet></ROW><ROW><id>6771397</id><snippet>packed_input = coded_file.read()
last_byte_length, packed_input, last_byte = (packed_input[0], 
                                             packed_input[1:-1], 
                                             packed_input[-1])
if not last_byte_length: last_byte_length = 8
ascii_input = ''.join(chain((bin(ord(byte))[2:].zfill(8) for byte in packed_input),
                      tuple(bin(ord(last_byte))[2:].zfill(last_byte_length),)))
# OR
# ascii_input = ''.join(chain(('{0:0=8b}'.format(byte) for byte in packed_input),
#                       tuple(('{0:0=' + str(last_byte_length) + '8b}').format(last_byte),)))
</snippet></ROW><ROW><id>6771397</id><snippet>bin()</snippet></ROW><ROW><id>6771397</id><snippet>bin()</snippet></ROW><ROW><id>6771397</id><snippet>zfill()</snippet></ROW><ROW><id>6771397</id><snippet>ord(byte)</snippet></ROW><ROW><id>6771397</id><snippet>bin()</snippet></ROW><ROW><id>6771521</id><snippet>Node.children</snippet></ROW><ROW><id>6771521</id><snippet>class Node:
  def __init__(self):
    self.children = {}
</snippet></ROW><ROW><id>6771620</id><snippet>reversed_arr</snippet></ROW><ROW><id>6771620</id><snippet>arr = np.array(some_sequence)
reversed_arr = arr[::-1]

do_something(arr)
look_at(reversed_arr)
do_something_else(arr)
look_at(reversed_arr)
</snippet></ROW><ROW><id>6771752</id><snippet>def makeConnection(self, transport): ([source][1])
    """
    overridden in twisted.protocols.amp.BinaryBoxProtocol,
    twisted.protocols.ftp.ProtocolWrapper, twisted.protocols.ftp.SenderProtocol, 
    twisted.protocols.policies.ProtocolWrapper, 
    twisted.protocols.stateful.StatefulProtocol`

    Make a connection to a transport and a server.
    This sets the 'transport' attribute of this Protocol, and calls the connectionMade() 
    callback.
    """
</snippet></ROW><ROW><id>6771752</id><snippet>transport</snippet></ROW><ROW><id>6771752</id><snippet>Known subclasses: twisted.conch.insults.insults.ITerminalTransport, 
twisted.conch.telnet.ITelnetTransport, twisted.internet.interfaces.IProcessTransport, 
twisted.internet.interfaces.ITCPTransport

Known implementations: twisted.conch.ssh.channel.SSHChannel, 
twisted.internet._posixstdio.StandardIO, twisted.internet._win32stdio.StandardIO, 
twisted.internet.abstract.FileDescriptor, twisted.internet.iocpreactor.abstract.FileHandle, 
twisted.internet.protocol.FileWrapper, twisted.protocols.loopback._LoopbackTransport, 
twisted.protocols.loopback.LoopbackRelay
</snippet></ROW><ROW><id>6771752</id><snippet>makeConnection(transport)</snippet></ROW><ROW><id>6771828</id><snippet>u</snippet></ROW><ROW><id>6771828</id><snippet>u'http://www.someURL.com'.encode('ascii') # or 'latin-1' or 'utf-8'
</snippet></ROW><ROW><id>6771828</id><snippet>u</snippet></ROW><ROW><id>6771828</id><snippet>import sqlite3

con = sqlite3.connect(":memory:")
con.isolation_level = None
c = con.cursor()

val1, val2 = 'a', 'b'

c.execute('CREATE TABLE IF NOT EXISTS reg(col1 TEXT PRIMARY KEY, col2 TEXT)')
c.execute('INSERT INTO reg VALUES(?,?)', (val1, val2))
try:
    c.execute('INSERT INTO reg VALUES(?,?)', (val1, val2))
except sqlite3.IntegrityError:
    print val1, "is already in the database"
</snippet></ROW><ROW><id>6771828</id><snippet>a is already in the database</snippet></ROW><ROW><id>6771828</id><snippet>locked</snippet></ROW><ROW><id>6771852</id><snippet>minidx</snippet></ROW><ROW><id>6771852</id><snippet>i = minax0
k,j = np.meshgrid(np.arange(335), np.arange(500))
othercube[i,j,k] = some2d
</snippet></ROW><ROW><id>6772169</id><snippet>Encrypt</snippet></ROW><ROW><id>6772169</id><snippet>string passphrase</snippet></ROW><ROW><id>6772169</id><snippet>byte[] pwdBytes = Encoding.UTF8.GetBytes(key);</snippet></ROW><ROW><id>6772169</id><snippet>key</snippet></ROW><ROW><id>6772169</id><snippet>passphrase</snippet></ROW><ROW><id>6772169</id><snippet>secret_text = 'The rooster crows at midnight!'
key = 'A16ByteKey......'
mode = AES.MODE_CBC
iv = '\x00' * 16

encoder = PKCS7Encoder()
padded_text = encoder.encode(secret_text)

e = AES.new(key, mode, iv)
cipher_text = e.encrypt(padded_text)

print(base64.b64encode(cipher_text))

# e = AES.new(key, mode, iv)
# cipher_text = e.encrypt(padded_text)
# print(base64.b64encode(cipher_text))
</snippet></ROW><ROW><id>6772169</id><snippet>Console.WriteLine(Encrypt("The rooster crows at midnight!", "A16ByteKey......"));
</snippet></ROW><ROW><id>6772169</id><snippet>e.encrypt()</snippet></ROW><ROW><id>6772443</id><snippet>spsolve</snippet></ROW><ROW><id>6772443</id><snippet>dot</snippet></ROW><ROW><id>6772443</id><snippet>dot</snippet></ROW><ROW><id>6772443</id><snippet>B_inv = scipy.linalg.inv(B)
C = (A.transpose().dot(B_inv.transpose())).transpose()
</snippet></ROW><ROW><id>6772907</id><snippet>with</snippet></ROW><ROW><id>6772907</id><snippet>class Foo(object):

  def __init__(self):
    self.bar = None

  def __enter__(self):
    if self.bar != 'open':
      print 'opening the bar'
      self.bar = 'open'
    return self # this is bound to the `as` part

  def close(self):
    if self.bar != 'closed':
      print 'closing the bar'
      self.bar = 'close'

  def __exit__(self, *err):
    self.close()

if __name__ == '__main__':
  with Foo() as foo:
    print foo, foo.bar
</snippet></ROW><ROW><id>6772907</id><snippet>opening the bar
&lt;__main__.Foo object at 0x17079d0&gt; open
closing the bar
</snippet></ROW><ROW><id>6772907</id><snippet>del foo</snippet></ROW><ROW><id>6772907</id><snippet>__del__</snippet></ROW><ROW><id>6772907</id><snippet>class Foo(object):

    def __del__(self):
        print "deling", self

if __name__ == '__main__':
    import gc
    gc.disable() # no gc
    f = Foo()
    print "before"
    del f # f gets deleted right away
    print "after"
</snippet></ROW><ROW><id>6772907</id><snippet>before
deling &lt;__main__.Foo object at 0xc49690&gt;
after
</snippet></ROW><ROW><id>6772907</id><snippet>gc</snippet></ROW><ROW><id>6772907</id><snippet>class Foo(object):
    def __init__(self, other=None):
        # make a circular reference
        self.link = other
        if other is not None:
            other.link = self

    def __del__(self):
        print "deling", self

if __name__ == '__main__':
    import gc
    gc.disable()   
    f = Foo(Foo())
    print "before"
    del f # nothing gets deleted here
    print "after"
    gc.collect()
    print gc.garbage # The GC knows the two Foos are garbage, but won't delete
                     # them because they have a __del__ method
    print "after gc"
    # break up the cycle and delete the reference from gc.garbage
    del gc.garbage[0].link, gc.garbage[:]
    print "done"
</snippet></ROW><ROW><id>6772907</id><snippet>before
after
[&lt;__main__.Foo object at 0x22ed8d0&gt;, &lt;__main__.Foo object at 0x22ed950&gt;]
after gc
deling &lt;__main__.Foo object at 0x22ed950&gt;
deling &lt;__main__.Foo object at 0x22ed8d0&gt;
done
</snippet></ROW><ROW><id>6772907</id><snippet>class Foo(object):
    def __init__(self):

        raise Exception

    def __del__(self):
        print "deling", self

if __name__ == '__main__':
    f = Foo()
</snippet></ROW><ROW><id>6772907</id><snippet>Traceback (most recent call last):
  File "asd.py", line 10, in &lt;module&gt;
    f = Foo()
  File "asd.py", line 4, in __init__
    raise Exception
Exception
deling &lt;__main__.Foo object at 0xa3a910&gt;
</snippet></ROW><ROW><id>6772907</id><snippet>__new__</snippet></ROW><ROW><id>6772907</id><snippet>__init__</snippet></ROW><ROW><id>6772907</id><snippet>self</snippet></ROW><ROW><id>6772907</id><snippet>__init__</snippet></ROW><ROW><id>6772907</id><snippet>f =</snippet></ROW><ROW><id>6772907</id><snippet>__del__</snippet></ROW><ROW><id>6773248</id><snippet>**kwargs</snippet></ROW><ROW><id>6773248</id><snippet>def new (self, **kwargs):</snippet></ROW><ROW><id>6773382</id><snippet>binascii.unhexlify(binascii.hexlify(u"Knödel".encode('utf-8'))).decode('utf-8')
</snippet></ROW><ROW><id>6773382</id><snippet>ord(x)</snippet></ROW><ROW><id>6773490</id><snippet>**</snippet></ROW><ROW><id>6773490</id><snippet>def dostuff(**kwargs):
 force = 3
 if kwargs.get('reallyhard', False):
     force += 5 
 # and so on

# Now you need luck to find this bug  ...
dostuff(fancy=True, funky=False, realyhard=True)
</snippet></ROW><ROW><id>6773490</id><snippet>**</snippet></ROW><ROW><id>6773533</id><snippet>&gt;&gt;&gt; from mock import Mock
&gt;&gt;&gt; real = ProductionClass()
&gt;&gt;&gt; real.method = Mock(return_value=3)
&gt;&gt;&gt; real.method(3, 4, 5, key='value')
3
&gt;&gt;&gt; real.method.assert_called_with(3, 4, 5, key='value')
</snippet></ROW><ROW><id>6773563</id><snippet>/bin/sh</snippet></ROW><ROW><id>6773563</id><snippet>/bin/sh</snippet></ROW><ROW><id>6773636</id><snippet>ls -U</snippet></ROW><ROW><id>6773636</id><snippet>glob</snippet></ROW><ROW><id>6773714</id><snippet>class Truc(models.Model):
    name = models.CharField(max_length=50, unique=True)
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    machin_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>6773733</id><snippet>file()</snippet></ROW><ROW><id>6773733</id><snippet>open()</snippet></ROW><ROW><id>6773733</id><snippet>self.pdfoutput.write(self._pdfstream)</snippet></ROW><ROW><id>6773733</id><snippet>self._filestream.close()</snippet></ROW><ROW><id>6773733</id><snippet>from pyPdf import PdfFileReader as PfR, PdfFileWriter as PfW

input_filename = 'in.PDF' # replace with a real file
output_filename = 'out.PDF' # something that doesn't exist

infile = file(input_filename, 'rb')
reader = PfR(infile)
writer = PfW()

writer.addPage(reader.getPage(0))
outfile = file(output_filename, 'wb')
writer.write(outfile)
print "First Write Successful!"
infile.close()
outfile.close()

infile = file(input_filename, 'rb')
reader = PfR(infile)
writer = PfW()

writer.addPage(reader.getPage(0))
outfile = file(output_filename, 'wb')
infile.close() # BAD!

writer.write(outfile)
print "You'll get an IOError Before this line"
outfile.close()
</snippet></ROW><ROW><id>6773739</id><snippet>added = [f for f in after if not f in before and '_status' not in f]
</snippet></ROW><ROW><id>6774270</id><snippet>http://www.modpython.org/pipermail/mod_python/2004-January/014834.html
</snippet></ROW><ROW><id>6774270</id><snippet>In theroy you can use the Apache 2.x chain handlers feature, where more
than one content handler can process the request.  I say in theroy
because I've read about it, but never tried it =)</snippet></ROW><ROW><id>6774270</id><snippet>virtual() is an Apache-specific function which is similar to &lt;!--#include virtual...--&gt; in mod_include. It performs an Apache sub-request . . . This function is only supported when PHP is installed as an Apache module.</snippet></ROW><ROW><id>6774270</id><snippet>mod_include</snippet></ROW><ROW><id>6774270</id><snippet>mod_wsgi</snippet></ROW><ROW><id>6774481</id><snippet>from datetime import datetime
from time import strptime
</snippet></ROW><ROW><id>6774481</id><snippet>datetime(*strptime('2011-03-08  0:27:41', '%Y-%m-%d  %H:%M:%S')[0:6]).weekday()
</snippet></ROW><ROW><id>6774481</id><snippet>weekday() in [0, 6]</snippet></ROW><ROW><id>6774870</id><snippet>retcode = subprocess.call(["123.exe"])
</snippet></ROW><ROW><id>6774870</id><snippet>retcode</snippet></ROW><ROW><id>6774870</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6774870</id><snippet>Popen.wait()
</snippet></ROW><ROW><id>6774870</id><snippet>Popen.returncode</snippet></ROW><ROW><id>6774912</id><snippet>import pylab as p
p.matshow(p.array([[0,1],[1,1]]),cmap="Greys") ; p.show()
</snippet></ROW><ROW><id>6774995</id><snippet>ulimit -n
</snippet></ROW><ROW><id>6774995</id><snippet>ulimit -n 2048
</snippet></ROW><ROW><id>6775026</id><snippet>for a in range(1, n):
    for b in range(1, n):
        for c in range(1, n):
            if ...
</snippet></ROW><ROW><id>6775026</id><snippet>import itertools

for a, b, c in itertools.product(range(1, n + 1), repeat=3):
    if ...
</snippet></ROW><ROW><id>6775266</id><snippet>copy.copy()</snippet></ROW><ROW><id>6775266</id><snippet>Image</snippet></ROW><ROW><id>6775266</id><snippet>Image.copy()</snippet></ROW><ROW><id>6775266</id><snippet>image = Image.open(path)
image = image.crop((left, upper, right, lower))
for size in sizes:
  temp = image.copy()  # &lt;-- Instead of copy.copy(image)
  temp.thumbnail((size, height), Image.ANTIALIAS)
  temp.save('%s%s%s.%s' % (path, name, size, format), quality=95)
</snippet></ROW><ROW><id>6775422</id><snippet>app.Run("runsolver()")
</snippet></ROW><ROW><id>6775422</id><snippet>app.Run("runsolver")
</snippet></ROW><ROW><id>6775679</id><snippet>for k in sorted(myDict):
    myDict[k] # do something
</snippet></ROW><ROW><id>6775679</id><snippet>d = {1: 'a', 3: 'a'}   
from collections import OrderedDict   
sorted_d = OrderedDict((k, d[k]) for k in sorted(d))
</snippet></ROW><ROW><id>6775805</id><snippet>TABLE domains
int id primary key
text name

TABLE field_ids
int id primary key
int domain_id foreign key ref domains
text value
</snippet></ROW><ROW><id>6775953</id><snippet>for event in pygame.event.get():
    if event.type == MOUSEMOTION:
        mousex, mousey = event.pos
        # build a vector between player position and mouse position
        moveVector = (mousex-playerx, mousey-playery)

        """
        compute the angle of moveVector from current vector that player is facing (faceVector).
        you should be keeping and updating this unit vector, with each mouse motion
        assume you have initial facing vector as (1,0) - facing East
        """

        # compute angle as in [1]

        # rotate the image to that angle and update faceVector
</snippet></ROW><ROW><id>6776033</id><snippet>SQLstring = curs.mogrify('select name, age from people where name = %s;', ('ann',) )
</snippet></ROW><ROW><id>6776094</id><snippet>import datetime
import re
from collections import defaultdict
months = defaultdict(int)
# months = {}  # for Python 2.4
with open("test.txt") as timestamps:
    for line in timestamps:
        month = line[:7]
        time = re.search(r"(\d+):(\d+):(\d+)", line)
        if time:
             seconds = int(time.group(1))*3600 + \
                       int(time.group(2))*60 +   \
                       int(time.group(3))
             months[month] += seconds
             # if month in months:          # Python 2.4
             #     months[month] += seconds
             # else:
             #     months[month] = seconds
for month in sorted(months.keys()):
    print("Times for {}: {}".format(month, 
                                    datetime.timedelta(seconds=months[month])))
</snippet></ROW><ROW><id>6776094</id><snippet>Times for 2011-03: 1:54:42
Times for 2011-05: 1:51:20
Times for 2011-07: 1:51:20
</snippet></ROW><ROW><id>6776329</id><snippet>def handler(sender=None):
    print "got signal from %r" % sender

iface.connect_to_signal("Hello", handler, sender_keyword='sender')
</snippet></ROW><ROW><id>6776329</id><snippet>bus.add_signal_receiver</snippet></ROW><ROW><id>6776617</id><snippet>os.walk</snippet></ROW><ROW><id>6776617</id><snippet>os.stat</snippet></ROW><ROW><id>6776617</id><snippet>for root, dirs, files in os.walk(some_directory):
    for fn in files:
        path = os.path.join(root, fn)
        size = os.stat(path).st_size # in bytes

        # ...
</snippet></ROW><ROW><id>6776843</id><snippet>
from django.test import TestCase
from django.contrib.auth.models import User

class TestThatNeedsLogin(TestCase):
    def setUp(self):
        User.objects.create_superuser(
            'user1',
            'user1@example.com',
            'pswd',
        )
        self.client.login(username="user1", password="pswd")

    def tearDown(self):
        self.client.logout()

    def test_something(self):
        response = self.client.get("/")
        self.assertEqual(200, response.status_code)
</snippet></ROW><ROW><id>6776915</id><snippet>In [12]: d = {'1': ['a','b', 'c', 'd'], '2': ['e','f', 'g', 'h']}

In [13]: dict((v[-1],v[:-1]+[k]) for k,v in d.iteritems())
Out[13]: {'d': ['a', 'b', 'c', '1'], 'h': ['e', 'f', 'g', '2']}
</snippet></ROW><ROW><id>6776915</id><snippet>k</snippet></ROW><ROW><id>6776915</id><snippet>v</snippet></ROW><ROW><id>6776915</id><snippet>v[-1]</snippet></ROW><ROW><id>6776915</id><snippet>v[:-1]+[k]</snippet></ROW><ROW><id>6776915</id><snippet>iteritems</snippet></ROW><ROW><id>6776915</id><snippet>{v[-1]: v[:-1]+[k] for k,v in d.items()} # Python 2.7+
</snippet></ROW><ROW><id>6776927</id><snippet>def decode_ber_int(data, offset):
    value = 0
    while True:
        tmp = ord(data[offset])
        value = (value&lt;&lt;7) | (tmp&amp;0x7f)
        offset += 1
        if tmp &amp; 0x80 == 0:
            break
    return value, offset
</snippet></ROW><ROW><id>6777264</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1, 2, 3], [2, 3, 4], [1, 2, 3], [3, 4, 5]])
&gt;&gt;&gt; a
array([[1, 2, 3],
       [2, 3, 4],
       [1, 2, 3],
       [3, 4, 5]])
&gt;&gt;&gt; np.array([np.array(x) for x in set(tuple(x) for x in a)]) # or "list(x) for x in set[...]"
array([[3, 4, 5],
       [2, 3, 4],
       [1, 2, 3]])
</snippet></ROW><ROW><id>6777264</id><snippet>unique(a, 'columns')</snippet></ROW><ROW><id>6777444</id><snippet>models.py</snippet></ROW><ROW><id>6777796</id><snippet>{% if comment.photo %} &lt;img src="{{ comment.photo.url }}" alt="Photo" /&gt; {% endif %}
</snippet></ROW><ROW><id>6777822</id><snippet>found.CharColor = 16776960
found.CharBackColor = 16776960
</snippet></ROW><ROW><id>6777832</id><snippet>Using iteritems() while adding or deleting entries in the dictionary may raise a RuntimeError or fail to iterate over all entries</snippet></ROW><ROW><id>6777832</id><snippet>iter(d)</snippet></ROW><ROW><id>6777832</id><snippet>d.iterkeys()</snippet></ROW><ROW><id>6777832</id><snippet>d.itervalues()</snippet></ROW><ROW><id>6777832</id><snippet>for k, v in d:</snippet></ROW><ROW><id>6777832</id><snippet>for</snippet></ROW><ROW><id>6777832</id><snippet>iter(d)</snippet></ROW><ROW><id>6778254</id><snippet>std::list</snippet></ROW><ROW><id>6778254</id><snippet>std::vector</snippet></ROW><ROW><id>6778254</id><snippet>boost::python::vector_indexing_suite</snippet></ROW><ROW><id>6778254</id><snippet>std::list</snippet></ROW><ROW><id>6778254</id><snippet>std::list</snippet></ROW><ROW><id>6778254</id><snippet>list</snippet></ROW><ROW><id>6778254</id><snippet>#include &lt;list&gt;
#include &lt;algorithm&gt;
#include &lt;boost/python.hpp&gt;

template&lt;class T&gt;
struct listwrap
{
    typedef typename T::value_type value_type;
    typedef typename T::iterator iter_type;

    static void add(T &amp; x, value_type const&amp; v)
    {
        x.push_back(v);
    }

    static bool in(T const&amp; x, value_type const&amp; v)
    {
        return std::find(x.begin(), x.end(), v) != x.end();
    }

    static int index(T const&amp; x, value_type const&amp; v)
    {
        int i = 0;
        for(T::const_iterator it=x.begin(); it!=x.end(); ++it,++i)
            if( *it == v ) return i;

        PyErr_SetString(PyExc_ValueError, "Value not in the list");
        throw boost::python::error_already_set();
    }

    static void del(T&amp; x, int i)
    {
        if( i&lt;0 ) 
            i += x.size();

        iter_type it = x.begin();
        for (int pos = 0; pos &lt; i; ++pos)
            ++it;

        if( i &gt;= 0 &amp;&amp; i &lt; (int)x.size() ) {
            x.erase(it);
        } else {
            PyErr_SetString(PyExc_IndexError, "Index out of range");
            boost::python::throw_error_already_set();
        }
    }

    static value_type&amp; get(T&amp; x, int i)
    {
        if( i &lt; 0 ) 
            i += x.size();

        if( i &gt;= 0 &amp;&amp; i &lt; (int)x.size() ) {
            iter_type it = x.begin(); 
            for(int pos = 0; pos &lt; i; ++pos)
                ++it;
            return *it;                             
        } else {
            PyErr_SetString(PyExc_IndexError, "Index out of range");
            throw boost::python::error_already_set();
        }
    }

    static void set(T&amp; x, int i, value_type const&amp; v)
    {
        if( i &lt; 0 ) 
            i += x.size();

        if( i &gt;= 0 &amp;&amp; i &lt; (int)x.size() ) {
            iter_type it = x.begin(); 
            for(int pos = 0; pos &lt; i; ++pos)
                ++it;
            *it = v;
        } else {
            PyErr_SetString(PyExc_IndexError, "Index out of range");
            boost::python::throw_error_already_set();
        }
    }
};


template&lt;class T&gt;
void export_STLList(const char* typeName)
{
    using namespace boost::python;

    class_&lt;std::list&lt;T&gt; &gt;(typeName)
        .def("__len__", &amp;std::list&lt;T&gt;::size)
        .def("clear", &amp;std::list&lt;T&gt;::clear)
        .def("append", &amp;listwrap&lt;T&gt;::add,
            with_custodian_and_ward&lt;1,2&gt;()) // to let container keep value
        .def("__getitem__", &amp;listwrap&lt;T&gt;::get,
            return_value_policy&lt;copy_non_const_reference&gt;())
        .def("__setitem__", &amp;listwrap&lt;T&gt;::set,
            with_custodian_and_ward&lt;1,2&gt;()) // to let container keep value
        .def("__delitem__", &amp;listwrap&lt;T&gt;::del)
        .def("__contains__", &amp;listwrap&lt;T&gt;::in)
        .def("__iter__", iterator&lt;std::list&lt;T&gt; &gt;())
        .def("index", &amp;listwrap&lt;T&gt;::index);
}
</snippet></ROW><ROW><id>6778254</id><snippet>typedef std::list&lt;int&gt; intlist;
export_STLList&lt;int&gt;("intlist");
</snippet></ROW><ROW><id>6778336</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>6778336</id><snippet>import ast, copy
n = ast.FunctionDef(
        name=None,
        args=ast.arguments(args=[], vararg=None, kwarg=None, defaults=[]),
        body=[], decorator_list=[])
n.name = "foo"
ast.fix_missing_locations(n)
n = copy.deepcopy(n)
print n.name
</snippet></ROW><ROW><id>6778336</id><snippet>None</snippet></ROW><ROW><id>6778336</id><snippet>foo</snippet></ROW><ROW><id>6778336</id><snippet>name=None</snippet></ROW><ROW><id>6778336</id><snippet>ast.FunctionDef</snippet></ROW><ROW><id>6778336</id><snippet>foo</snippet></ROW><ROW><id>6778660</id><snippet>python-pygraphviz</snippet></ROW><ROW><id>6778708</id><snippet>sudo manage.py runserver</snippet></ROW><ROW><id>6778708</id><snippet>c:\windows\system32\</snippet></ROW><ROW><id>6778708</id><snippet>cmd.exe</snippet></ROW><ROW><id>6778708</id><snippet>manage.py runserver 8080</snippet></ROW><ROW><id>6779043</id><snippet>fAst = ast.FunctionDef(
    # ...
    body=[ast.Pass()],
    # ...
</snippet></ROW><ROW><id>6779043</id><snippet>ast</snippet></ROW><ROW><id>6779131</id><snippet>from lxml import etree

doc = etree.parse('example.xml')
print doc.xpath('//n:result',
                namespaces={'n': "http://ahrefs.com/schemas/api/links/1"})
</snippet></ROW><ROW><id>6779131</id><snippet>[&lt;Element {http://ahrefs.com/schemas/api/links/1}result at 0xc8d670&gt;, 
 &lt;Element {http://ahrefs.com/schemas/api/links/1}result at 0xc8d698&gt;]
</snippet></ROW><ROW><id>6779275</id><snippet>os.chdir(target)</snippet></ROW><ROW><id>6779275</id><snippet>os.path.join(target, filename)</snippet></ROW><ROW><id>6779275</id><snippet>strftime('{0}-%Y-%m-%d-%H:%M:%S.jpg'.format(prefix))</snippet></ROW><ROW><id>6779275</id><snippet>temp_date</snippet></ROW><ROW><id>6779275</id><snippet>t</snippet></ROW><ROW><id>6779275</id><snippet>v</snippet></ROW><ROW><id>6779275</id><snippet>x</snippet></ROW><ROW><id>6779275</id><snippet>for filename in os.listdir(target):
    os.rename(filename, datetime.fromtimestamp(
                         os.path.getmtime(filename)).strftime(
                          '{0}-%Y-%m-%d-%H:%M:%S.jpeg'.format(prefix)))
</snippet></ROW><ROW><id>6779275</id><snippet>os.walk()</snippet></ROW><ROW><id>6779275</id><snippet>.jpeg</snippet></ROW><ROW><id>6779275</id><snippet>DSCN1#####.jpeg</snippet></ROW><ROW><id>6779642</id><snippet>seek()</snippet></ROW><ROW><id>6779642</id><snippet>utf-16-le</snippet></ROW><ROW><id>6779642</id><snippet>utf-16-be</snippet></ROW><ROW><id>6780097</id><snippet>if len(set(my_list)) &lt; len(my_list):
    print "There's a dupe!"
</snippet></ROW><ROW><id>6780118</id><snippet>import subprocess
import shlex
proc1 = subprocess.Popen(shlex.split('ps cat'),stdout=subprocess.PIPE)
proc2 = subprocess.Popen(shlex.split('grep python'),stdin=proc1.stdout,
                         stdout=subprocess.PIPE,stderr=subprocess.PIPE)

proc1.stdout.close() # Allow proc1 to receive a SIGPIPE if proc2 exits.
out,err=proc2.communicate()
print('out: {0}'.format(out))
print('err: {0}'.format(err))
</snippet></ROW><ROW><id>6780118</id><snippet>shell=True</snippet></ROW><ROW><id>6780118</id><snippet>import sh
print(sh.grep(sh.ps("cax"), 'something'))
</snippet></ROW><ROW><id>6780121</id><snippet># sitecustomize.py                   
# this file can be anywhere in your Python path,
# but it usually goes in ${pythondir}/lib/site-packages/
import sys
sys.setdefaultencoding('utf-8')
</snippet></ROW><ROW><id>6780121</id><snippet>#!/usr/bin/env python
# -*- coding: UTF-8 -*-
</snippet></ROW><ROW><id>6780175</id><snippet>x = ord(mem[pos - 1])
</snippet></ROW><ROW><id>6780175</id><snippet>x = mem[pos - 1]
</snippet></ROW><ROW><id>6780175</id><snippet>positions = {0x10: do_10, 0x11: do_12, 0x16: do_16}
</snippet></ROW><ROW><id>6780175</id><snippet>do_10</snippet></ROW><ROW><id>6780175</id><snippet>def do_10(pos):
    # This actually would need an endianness character
    return struct.unpack('H', mem[pos + 0x02])[0] + 0x04
</snippet></ROW><ROW><id>6780175</id><snippet>pos += positions[mem[pos - 1]](pos)
</snippet></ROW><ROW><id>6780175</id><snippet>positions = {
    # This actually would need an endianness character
    0x10: (lambda pos: struct.unpack('H', mem[pos + 0x02])[0] + 0x04)
    # ...
    }
</snippet></ROW><ROW><id>6780823</id><snippet>get()</snippet></ROW><ROW><id>6780823</id><snippet>Q</snippet></ROW><ROW><id>6780823</id><snippet>distinct()</snippet></ROW><ROW><id>6780823</id><snippet>get()</snippet></ROW><ROW><id>6781146</id><snippet>class MetaClass(type):
    @staticmethod
    def wrap(run):
        """Return a wrapped instance method"""
        def outer(self):
            print "PRE",
            return_value = run(self)
            print "POST"
            return return_value
        return outer
    def __new__(cls, name, bases, attrs):
        """If the class has a 'run' method, wrap it"""
        if 'run' in attrs:
            attrs['run'] = cls.wrap(attrs['run'])
        return super(MetaClass, cls).__new__(cls, name, bases, attrs)

class MyClass(object):
    """Use MetaClass to make this class"""
    __metaclass__ = MetaClass
    def run(self): print 'RUN',

myinstance = MyClass()

# Prints PRE RUN POST
myinstance.run()
</snippet></ROW><ROW><id>6781146</id><snippet>MyClass</snippet></ROW><ROW><id>6781146</id><snippet>run()</snippet></ROW><ROW><id>6781257</id><snippet>import threading, traceback, sys
class DebugLock(object):
    def __init__(self):
        self._lock = threading.Lock()
    def acquire(self):
        print &gt;&gt;sys.stderr, "acquired", self
        #traceback.print_tb
        self._lock.acquire()
    def release(self):
        print &gt;&gt;sys.stderr, "released", self
        #traceback.print_tb
        self._lock.release()
    def __enter__(self):
        self.acquire()
    def __exit__(self, type, value, traceback):
        self.release()
</snippet></ROW><ROW><id>6781257</id><snippet>with</snippet></ROW><ROW><id>6781411</id><snippet>class RecursiveDict(dict):
    """Implementation of perl's autovivification feature."""
    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            value = self[item] = type(self)()
            return value

&gt;&gt;&gt; a = RecursiveDict()
&gt;&gt;&gt; a[1][2][3] = 4
&gt;&gt;&gt; dict(a)
{1: {2: {3: 4}}}
</snippet></ROW><ROW><id>6781411</id><snippet>__missing__</snippet></ROW><ROW><id>6781411</id><snippet>class RecursiveDict(dict):
    """Implementation of perl's autovivification feature."""
    def __missing__(self, key):
        value = self[key] = type(self)()
        return value
</snippet></ROW><ROW><id>6781542</id><snippet>server.bind</snippet></ROW><ROW><id>6781542</id><snippet>127.0.0.1</snippet></ROW><ROW><id>6781542</id><snippet>0.0.0.0</snippet></ROW><ROW><id>6781621</id><snippet>Graph.Read_LGL</snippet></ROW><ROW><id>6781621</id><snippet># nodeID
nodeID2
nodeID3
# nodeID2
nodeID4
nodeID5
nodeID
# isolatedNode
# nodeID5
</snippet></ROW><ROW><id>6781826</id><snippet>def t_and_c_validator(node, value):
    if not value:
        raise Invalid(node, 'You must agree to the T&amp;C')

class MySchema(colander.Schema):
    t_and_c = colander.SchemaNode(
                  colander.Boolean(),
                  description='Terms and Conditions',
                  widget=deform.widget.CheckboxWidget(),
                  title='Terms and Conditions',
                  validator=t_and_c_validator,
                  )
</snippet></ROW><ROW><id>6781900</id><snippet>Console.app</snippet></ROW><ROW><id>6781972</id><snippet>print float(x) / float(y)
</snippet></ROW><ROW><id>6781972</id><snippet>Decimal</snippet></ROW><ROW><id>6781972</id><snippet>from decimal import Decimal
print Decimal(x) / Decimal(y)
</snippet></ROW><ROW><id>6782270</id><snippet>do shell script presentDir &amp; "test.py " user name "me" password "mypassword" with administrator privileges
</snippet></ROW><ROW><id>6782270</id><snippet>test.py</snippet></ROW><ROW><id>6782270</id><snippet>/test.py</snippet></ROW><ROW><id>6782270</id><snippet>test.py</snippet></ROW><ROW><id>6782270</id><snippet>set py to "test.py "
set calldir to quoted form of workingDir &amp; py
do shell script calldir
</snippet></ROW><ROW><id>6782650</id><snippet>for row in session.query(MyClass.mycustomthing, MyClass.myothercustomthing):
   print row.word, row.someotherword
</snippet></ROW><ROW><id>6782836</id><snippet>G = G / G</snippet></ROW><ROW><id>6782836</id><snippet>G.data</snippet></ROW><ROW><id>6782836</id><snippet>G.data  = np.ones(G.nnz)
</snippet></ROW><ROW><id>6782836</id><snippet>G.data[G.data != 0] = 1
</snippet></ROW><ROW><id>6782836</id><snippet>G.data[G.data &gt; 0.9] = 1</snippet></ROW><ROW><id>6782836</id><snippet>G.data = np.random.random(G.nnz)</snippet></ROW><ROW><id>6782836</id><snippet>G.eliminate_zeros()</snippet></ROW><ROW><id>6782957</id><snippet>import re
regex = re.compile('\.jpg$|\.gif$|\.png$', re.IGNORECASE)
url_list = ['http://www.example.com/example.png', 'http://www.example.com/example']
urls_without_images = filter(lambda url: not regex.search(url), url_list)
</snippet></ROW><ROW><id>6783101</id><snippet>./Python/bltinmodule.c</snippet></ROW><ROW><id>6783101</id><snippet>builtin_max</snippet></ROW><ROW><id>6783101</id><snippet>min_max</snippet></ROW><ROW><id>6783101</id><snippet>min_max</snippet></ROW><ROW><id>6783101</id><snippet>PyObject_RichCompareBool</snippet></ROW><ROW><id>6783204</id><snippet>&gt;&gt;&gt; m = np.arange(12).reshape(3,4)
&gt;&gt;&gt; m = np.hstack((m, np.ones((m.shape[0], 1), dtype=m.dtype)))
&gt;&gt;&gt; m
array([[ 0,  1,  2,  3,  1],
       [ 4,  5,  6,  7,  1],
       [ 8,  9, 10, 11,  1]])
</snippet></ROW><ROW><id>6783204</id><snippet>&gt;&gt;&gt; matrices = [np.matrix(np.random.randn(3,4)) for i in range(10)]
&gt;&gt;&gt; for i, m in enumerate(matrices):
...     matrices[i] = np.hstack((m, np.ones((m.shape[0], 1), dtype=m.dtype)))
</snippet></ROW><ROW><id>6783549</id><snippet>char*</snippet></ROW><ROW><id>6783605</id><snippet>isatty</snippet></ROW><ROW><id>6783680</id><snippet>def awesome_parse(path_or_file):
    if isinstance(path_or_file, basestring):
        f = file_to_close = open(path_or_file, 'rb')
    else:
        f = path_or_file
        file_to_close = None
    try:
        return do_stuff(f)
    finally:
        if file_to_close:
            file_to_close.close()
</snippet></ROW><ROW><id>6783680</id><snippet>@contextlib.contextmanager
def awesome_open(path_or_file):
    if isinstance(path_or_file, basestring):
        f = file_to_close = open(path_or_file, 'rb')
    else:
        f = path_or_file
        file_to_close = None

    yield

    if file_to_close:
        file_to_close.close()

def awesome_parse(path_or_file):
    with awesome_open(path_or_file) as f:
        return do_stuff(f)
</snippet></ROW><ROW><id>6784048</id><snippet>pip-3.X</snippet></ROW><ROW><id>6784326</id><snippet>A = np.subtract.outer(Img2, Img2)
A = np.abs(A)
</snippet></ROW><ROW><id>6784556</id><snippet>sys.path[0]</snippet></ROW><ROW><id>6784556</id><snippet>dirname(__file__)</snippet></ROW><ROW><id>6784556</id><snippet>import os, sys
tempdir = os.path.join(sys.path[0], 'temp', 'temp.txt') 
</snippet></ROW><ROW><id>6784556</id><snippet>import os
tempdir = os.path.join(os.path.dirname(__file__), 'temp', 'temp.txt')
</snippet></ROW><ROW><id>6784692</id><snippet>import pexpect

p = pexpect.spawn('unbuffer',['-p','./guess'])
l = 1
r = 100
m = 0
while (p.isalive()):
    p.expect('')
    p.expect(p.buffer[-1])
    print p.before
    print m
    if (p.before.find('small')&gt;0):
        l = m
    elif (p.before.find('big')&gt;0):
        r = m
    m = (l+r)/2;
    p.sendline(str(m))
print p.buffer
print 'Program ended!'
</snippet></ROW><ROW><id>6784692</id><snippet>#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;ctime&gt;
#include &lt;cstdlib&gt;

using namespace std;

int main(){
    srand(int(time(0)));
    int n = (rand() % 100) + 1;
    int x;
    printf("The number you are to guess is between 1 and 100.\n");
    do{
        scanf("%d",&amp;x);
        if (x&lt;n) printf("Too small!\n");
            else if (x&gt;n) printf("Too big!\n");
    }   while (x!=n);
    printf("You got it!\n");
    return 0;
}
</snippet></ROW><ROW><id>6785015</id><snippet>&gt;&gt;&gt; q = [1, 2, 3, 4]
&gt;&gt;&gt; def gen(header='something', footer='anything'):
        yield header
        for thing in q:
                yield thing
        yield footer


&gt;&gt;&gt; for tmp in gen():
        print(tmp)


something
1
2
3
4
anything
</snippet></ROW><ROW><id>6785015</id><snippet>StopIteration</snippet></ROW><ROW><id>6785015</id><snippet>StopIteration</snippet></ROW><ROW><id>6785015</id><snippet>yield</snippet></ROW><ROW><id>6785076</id><snippet>os.path.dirname(path)
</snippet></ROW><ROW><id>6785076</id><snippet>path</snippet></ROW><ROW><id>6785219</id><snippet>c.append(b)
c.append(b)
c.append(b)
</snippet></ROW><ROW><id>6785219</id><snippet>c</snippet></ROW><ROW><id>6785219</id><snippet>b</snippet></ROW><ROW><id>6785219</id><snippet>b</snippet></ROW><ROW><id>6785219</id><snippet>c.append(b[:])
c.append(b[:])
c.append(b[:])
</snippet></ROW><ROW><id>6786319</id><snippet>def Walk(obj):
  recurse = (yield obj)
  if not recurse:
    #print 'stop recurse:', recurse
    return

  if isinstance(obj, list):
    #print 'is list:', obj
    for item in obj:
      #print 'item loop:', item
      walker = Walk(item)

      recurse = None #first send must be None
      while True:
        try:
          x = walker.send(recurse)
        except StopIteration:
          break
        #print 'item walk:', x
        recurse = (yield x)
        #print 'item walk recurse:', recurse

root = ['a', ['b.0', ['b.0.0']]]

walker = Walk(root)
i = 0
x = walker.next()
while True:
  print i, x
  try:
    x = walker.send(True)
  except StopIteration:
    break
  i += 1
</snippet></ROW><ROW><id>6786319</id><snippet>0 ['a', ['b.0', ['b.0.0']]]
1 a
2 ['b.0', ['b.0.0']]
3 b.0
4 ['b.0.0']
5 b.0.0
</snippet></ROW><ROW><id>6786559</id><snippet>hist_file</snippet></ROW><ROW><id>6786559</id><snippet>hist_data</snippet></ROW><ROW><id>6786559</id><snippet>eval</snippet></ROW><ROW><id>6786646</id><snippet>ZERO WIDTH NON-BREAKING SPACE</snippet></ROW><ROW><id>6786646</id><snippet>&gt;&gt;&gt; s = u'word1 \ufeffword2'
&gt;&gt;&gt; s = s.replace(u'\ufeff', '')
&gt;&gt;&gt; s
u'word1 word2'
</snippet></ROW><ROW><id>6786646</id><snippet>u</snippet></ROW><ROW><id>6787026</id><snippet>axes1.set_xlim(0,300)</snippet></ROW><ROW><id>6787026</id><snippet>axes2.set_xlim(0, 300)</snippet></ROW><ROW><id>6787026</id><snippet>set_data_interval</snippet></ROW><ROW><id>6787026</id><snippet>set_xlim</snippet></ROW><ROW><id>6787026</id><snippet>axes1</snippet></ROW><ROW><id>6787026</id><snippet>axes2</snippet></ROW><ROW><id>6787026</id><snippet>add_subplot</snippet></ROW><ROW><id>6787069</id><snippet>lxml</snippet></ROW><ROW><id>6787069</id><snippet>$ jython ez_setup.py
</snippet></ROW><ROW><id>6787069</id><snippet>/home/lsoto/jython2.5.0/bin</snippet></ROW><ROW><id>6787069</id><snippet>$ sudo /usr/bin/jython2.5.2b1/bin/easy_install pip
Searching for pip
[...]
Installing pip-2.5 script to /usr/bin/jython2.5.2b1/bin
Installing pip script to /usr/bin/jython2.5.2b1/bin

Installed /usr/bin/jython2.5.2b1/Lib/site-packages/pip-1.0.2-py2.5.egg
Processing dependencies for pip
Finished processing dependencies for pip

$ sudo /usr/bin/jython2.5.2b1/bin/pip install bottle
Downloading/unpacking bottle
  Downloading bottle-0.9.6.tar.gz (45Kb): 45Kb downloaded
  Running setup.py egg_info for package bottle
    Installing collected packages: bottle
  Running setup.py install for bottle
Successfully installed bottle
Cleaning up...

$ jython
Jython 2.5.2b1 (Release_2_5_2beta1:7075, Jun 28 2010, 07:44:20) 
[Java HotSpot(TM) 64-Bit Server VM (Apple Inc.)] on java1.6.0_26
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import bottle
&gt;&gt;&gt; bottle
&lt;module 'bottle' from '/usr/bin/jython2.5.2b1/Lib/site-packages/bottle$py.class'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6787184</id><snippet>&gt;&gt;&gt; from __future__ import braces
  File "&lt;stdin&gt;", line 1
SyntaxError: not a chance
</snippet></ROW><ROW><id>6787193</id><snippet>export PYTHONPATH=/usr/lib/python2.6
</snippet></ROW><ROW><id>6787321</id><snippet>subprocess</snippet></ROW><ROW><id>6787641</id><snippet>jython django-admin.py startproject testing</snippet></ROW><ROW><id>6787836</id><snippet>&gt;&gt;&gt; for x in range(3):
...     psutil.cpu_percent(interval=1, percpu=True)
... 
[4.0, 6.9]
[7.0, 8.5]
[1.2, 9.0]
</snippet></ROW><ROW><id>6788391</id><snippet>'/post/(\w+_-)(?:/([\w-]+))?/?'
</snippet></ROW><ROW><id>6788391</id><snippet>/post/HUIHUIGgS823SHUIH/this-is-the-slug</snippet></ROW><ROW><id>6788391</id><snippet>/post/HUIHUIGgS823SHUIH/this-is-the-slug/</snippet></ROW><ROW><id>6788391</id><snippet>/post/HUIHUIGgS823SHUIH/</snippet></ROW><ROW><id>6788391</id><snippet>/post/HUIHUIGgS823SHUIH</snippet></ROW><ROW><id>6788391</id><snippet>/</snippet></ROW><ROW><id>6788453</id><snippet>__init__</snippet></ROW><ROW><id>6788453</id><snippet>class Foo(object):
    # whatever

def get_foo(path, *args, **kwargs):
    try:
        obj = pickle.load(open(path))
        if not isinstance(obj, Foo):
            raise TypeError, "%s does not contain a Foo" % path
        return obj
    except IOError as e:
        if e[0] == errno.ENOENT:
            return Foo(*args, **kwargs)
        else:
            raise
</snippet></ROW><ROW><id>6788946</id><snippet>import datetime
import re
months = {}
for date in dates:
    month = date[:7]
    time = re.match(r"(\d+):(\d+):(\d+)", dates[date])
    seconds = int(time.group(1))*3600 + int(time.group(2))*60 + int(time.group(3))
    if month in months:
        months[month] += seconds
    else:
        months[month] = seconds
for month in sorted(months.keys()):
    print "Times for " + month + ": " + str(datetime.timedelta(seconds=months[month]))
</snippet></ROW><ROW><id>6788946</id><snippet>Times for 2011-03: 2 days, 16:12:04
Times for 2011-05: 1 day, 8:06:02
Times for 2011-07: 1 day, 8:06:02
</snippet></ROW><ROW><id>6789057</id><snippet>chcp 65001</snippet></ROW><ROW><id>6789057</id><snippet>sys_write_stdout.patch</snippet></ROW><ROW><id>6789057</id><snippet>unicode2.py</snippet></ROW><ROW><id>6789057</id><snippet>WriteConsoleOutputW</snippet></ROW><ROW><id>6789057</id><snippet>WriteConsoleW</snippet></ROW><ROW><id>6789057</id><snippet>C:\pythonXX\Lib\idlelib\idle.pyw -r script.py
</snippet></ROW><ROW><id>6789205</id><snippet>from PyQt4 import QtCore
import time
import sys


# Subclassing QThread
# http://doc.qt.nokia.com/latest/qthread.html
class AThread(QtCore.QThread):

    def run(self):
        count = 0
        while count &lt; 5:
            time.sleep(1)
            print "Increasing"
            count += 1

# Subclassing QObject and using moveToThread
# http://labs.qt.nokia.com/2007/07/05/qthreads-no-longer-abstract/
class SomeObject(QtCore.QObject):

    finished = QtCore.pyqtSignal()

    def longRunning(self):
        count = 0
        while count &lt; 5:
            time.sleep(1)
            print "Increasing"
            count += 1
        self.finished.emit()

# Using a QRunnable
# http://doc.qt.nokia.com/latest/qthreadpool.html
# Note that a QRunnable isn't a subclass of QObject and therefore does
# not provide signals and slots.
class Runnable(QtCore.QRunnable):

    def run(self):
        count = 0
        app = QtCore.QCoreApplication.instance()
        while count &lt; 5:
            print "Increasing"
            time.sleep(1)
            count += 1
        app.quit()


def usingQThread():
    app = QtCore.QCoreApplication([])
    thread = AThread()
    thread.finished.connect(app.exit)
    thread.start()
    sys.exit(app.exec_())

def usingMoveToThread():
    app = QtCore.QCoreApplication([])
    objThread = QtCore.QThread()
    obj = SomeObject()
    obj.moveToThread(objThread)
    obj.finished.connect(objThread.quit)
    objThread.started.connect(obj.longRunning)
    objThread.finished.connect(app.exit)
    objThread.start()
    sys.exit(app.exec_())

def usingQRunnable():
    app = QtCore.QCoreApplication([])
    runnable = Runnable()
    QtCore.QThreadPool.globalInstance().start(runnable)
    sys.exit(app.exec_())

if __name__ == "__main__":
    usingQThread()
    #usingMoveToThread()
    #usingQRunnable()
</snippet></ROW><ROW><id>6789262</id><snippet>str(x)</snippet></ROW><ROW><id>6789262</id><snippet>for i, line in enumerate(fileinput.input('mytxtfile.txt', inplace = 1)): 
    sys.stdout.write(line.replace('@x@', str(x)))
</snippet></ROW><ROW><id>6789262</id><snippet>for i, line in enumerate(fileinput.input('mytxtfile.txt', inplace = 1)): 
    sys.stdout.write(line.replace('@x@', "%.2f"%x))
</snippet></ROW><ROW><id>6789301</id><snippet>from PIL import Image, ImageFile

ImageFile.MAXBLOCK = 2**20

img = Image.open("in.jpg")
img.save("out.jpg", "JPEG", quality=80, optimize=True, progressive=True)
</snippet></ROW><ROW><id>6789360</id><snippet>def meth(self): print self.__class__
</snippet></ROW><ROW><id>6789360</id><snippet>@classmethod
def meth(cls): print cls
</snippet></ROW><ROW><id>6789815</id><snippet>/path/to/other/python setup.py install
</snippet></ROW><ROW><id>6789815</id><snippet>python25</snippet></ROW><ROW><id>6789815</id><snippet>.bashrc</snippet></ROW><ROW><id>6789815</id><snippet>python</snippet></ROW><ROW><id>6789963</id><snippet>data = [(1,2,3), (3,4,5), (5,6,7), (7,8,9)]
data[2:] = reversed(data[2:])
&gt;&gt;&gt; [(1, 2, 3), (3, 4, 5), (7, 8, 9), (5, 6, 7)]
</snippet></ROW><ROW><id>6789963</id><snippet>data = [(1,2,3), (3,4,5), (5,6,7), (7,8,9)]
for i,x in enumerate(data):
    if i+1 &lt; len(data) and x[0] &lt; data[i+1][0]:        
        data[i], data[i+1] = data[i+1], data[i]
&gt;&gt;&gt; [(3, 4, 5), (5, 6, 7), (7, 8, 9), (1, 2, 3)]
</snippet></ROW><ROW><id>6790063</id><snippet>p = subprocess.Popen( commands, shell=True, cwd='/home/test', env=os.environ, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
</snippet></ROW><ROW><id>6790063</id><snippet>print p.communicate()
p.wait()
print p.communicate()
</snippet></ROW><ROW><id>6790063</id><snippet>stdout</snippet></ROW><ROW><id>6790063</id><snippet>stderr</snippet></ROW><ROW><id>6790063</id><snippet>Xvfb</snippet></ROW><ROW><id>6790063</id><snippet>wine</snippet></ROW><ROW><id>6790063</id><snippet>winecfg</snippet></ROW><ROW><id>6790476</id><snippet>def length(x, y):
    return (x ** 2 + y ** 2) ** .5

def norm(x, y):
    _len    = length(x, y)
    return x / _len, y / _len

class ZombieController(object):

    def __init__(self, zombie_view_range):
        self._zombs = []
        self.append = self._zombs.append
        self._range = zombie_view_range

    def NextFrame(self, player_pos):
        px, py      = player_pos
        _range      = self._range
        for zombie in self._zombs:
            x, y    = zombie.position
            dx, dy  = px - x, py - y
            _len    = length(dx, dy)
            if _len &lt;= _range:
                speed       = zombie.speed
                direction   = norm(dx, dy)
                zombie.positon  = x + direction[0] * speed, y + direction[1] * speed
</snippet></ROW><ROW><id>6790810</id><snippet>from BeautifulSoup import BeautifulSoup
# if the file is on your computer use this
#file = open('/path/to/the/file')
# and if the file is on the internet use this
#import urllib
#file = urllib.urlopen('http://www.the.com/path/to/the/file')
html = file.read()
file.close()
soup = BeautifulSoup(html)
trueimages = [image for image in soup.findAll('img') if image['id'].lower() == 'true']
</snippet></ROW><ROW><id>6791107</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; def pack_floats(*args):
...     return struct.pack('%df' %len(args), *args)
... 
&gt;&gt;&gt; pack_floats(0.1,1.2,2.3)
'\xcd\xcc\xcc=\x9a\x99\x99?33\x13@'
</snippet></ROW><ROW><id>6791565</id><snippet>np.hstack</snippet></ROW><ROW><id>6791565</id><snippet>C = np.hstack((A,B))
</snippet></ROW><ROW><id>6791565</id><snippet>np.concanenate</snippet></ROW><ROW><id>6791565</id><snippet>C = np.concatenate((A,B),axis=1)
</snippet></ROW><ROW><id>6791588</id><snippet>answer = ''

with open('yourFile.txt','r') as open_file, open('output_file','w') as output_file:
    for each_line in open_file:
        if each_line.find('[A&gt;]'):
            start_position = each_line.find('[A&gt;]')
            start_position = start_position + 3
            end_position = each_line[start_position:].find('[/W]')

            answer = each_line[start_position:end_position] + '\n'
            output_file.write(answer)
</snippet></ROW><ROW><id>6791658</id><snippet>for owner in ris:
    for property in owner.properties:
        if property.type == 'attribute':
            print property.name
            print property.content
</snippet></ROW><ROW><id>6791719</id><snippet>event.GetId()</snippet></ROW><ROW><id>6791719</id><snippet>event.GetEventObject()</snippet></ROW><ROW><id>6791975</id><snippet>try:
    import win32com.client
    def local_instance():
        res = win32com.client.Dispatch('Foo.Bar')
    def res_attrib():
        return win32com.client.Dispatch('Foo.Bar').Attribute
except ImportError, why:
    # alternate or no defs
</snippet></ROW><ROW><id>6791975</id><snippet>why</snippet></ROW><ROW><id>6791975</id><snippet>os.name</snippet></ROW><ROW><id>6791975</id><snippet>platform.uname()</snippet></ROW><ROW><id>6791975</id><snippet>except</snippet></ROW><ROW><id>6792011</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument('infile', type=argparse.FileType('r'))
parser.add_argument('outfile', type=argparse.FileType('w'))

required, extra = parser.parse_known_args()
infile, outfile = required.infile, required.outfile

args = re.findall(pattern, infile.read())
infile.seek(0)

parser = argparse.ArgumentParser()
for arg in args:
    parser.add_argument('--' + arg.lower())

replacements = vars(parser.parse_args(extra))
</snippet></ROW><ROW><id>6792011</id><snippet>def user_replace(match):
    """Pull from replacements dict or prompt"""
    placeholder = match.group(1)
    return (replacements[placeholder][0] 
             if placeholder in replacements else 
              raw_input('%s? ' % placeholder))
</snippet></ROW><ROW><id>6792011</id><snippet>name</snippet></ROW><ROW><id>6792011</id><snippet>location</snippet></ROW><ROW><id>6792011</id><snippet>emotion</snippet></ROW><ROW><id>6792011</id><snippet>replacements</snippet></ROW><ROW><id>6792011</id><snippet>python script.py infile outfile --name Bob --emotion 'extremely frustrated'
</snippet></ROW><ROW><id>6792076</id><snippet>urls.py</snippet></ROW><ROW><id>6792076</id><snippet>urls.py</snippet></ROW><ROW><id>6792076</id><snippet>from django.confs.urls.defaults import *
from my_app import one_time_startup

urlpatterns = ...

one_time_startup()
</snippet></ROW><ROW><id>6792426</id><snippet>def upgrade(migrate_engine):
    # Upgrade operations go here. Don't create your own engine; bind migrate_engine
    # to your metadata
    User.__table__.create(migrate_engine)
</snippet></ROW><ROW><id>6792426</id><snippet>def downgrade(migrate_engine):
    # Operations to reverse the above upgrade go here.
    User.__table__.drop(migrate_engine)
</snippet></ROW><ROW><id>6792464</id><snippet>z=urlopen(url).read().decode('utf-8')
self.feed(z)
</snippet></ROW><ROW><id>6792497</id><snippet>&amp;</snippet></ROW><ROW><id>6792497</id><snippet>and</snippet></ROW><ROW><id>6792497</id><snippet>A[(A['segment'] == 42) &amp; (A['material'] == 5)]
</snippet></ROW><ROW><id>6792648</id><snippet>subprocess</snippet></ROW><ROW><id>6792648</id><snippet>import subprocess
import time
timeout = # your timeout interval
real_work= subprocess.Popen( "python the_real_work.py" )
start= time.time()
status= real_work.poll()
while time.time()-start &lt; timeout and not status:
    time.sleep( 10.0 )
    status= real_work.poll()
if not status: 
    real_work.kill()
</snippet></ROW><ROW><id>6792679</id><snippet>class Asset(Entity):
    has_field('Name', Unicode)
    Assets = ManyToMany('Asset')
</snippet></ROW><ROW><id>6792679</id><snippet>a1 = Asset(Name=u'Asset 1')
a2 = Asset(Name=u'Asset 2')
a3 = Asset(Name=u'Asset 3')

a1.Assets=[a1,a2,a3]
</snippet></ROW><ROW><id>6792898</id><snippet>def all_casings(input_string):
    if not input_string:
        yield ""
    else:
        first = input_string[:1]
        if first.lower() == first.upper():
            for sub_casing in all_casings(input_string[1:]):
                yield first + sub_casing
        else:
            for sub_casing in all_casings(input_string[1:]):
                yield first.lower() + sub_casing
                yield first.upper() + sub_casing
</snippet></ROW><ROW><id>6792898</id><snippet>&gt;&gt;&gt; [x for x in all_casings("foo")]
['foo', 'Foo', 'fOo', 'FOo', 'foO', 'FoO', 'fOO', 'FOO']
&gt;&gt;&gt; list(all_casings("foo"))
['foo', 'Foo', 'fOo', 'FOo', 'foO', 'FoO', 'fOO', 'FOO']
</snippet></ROW><ROW><id>6793106</id><snippet>li = [0, ['0.2000', '0.2000', '3.0000', '0.5000']]
print li

li[1] = map(float,li[1])
print li
</snippet></ROW><ROW><id>6793106</id><snippet>xyze = [[0, ['0.2000', '0.2000', '3.000' , '0.5000']],
        [9, ['0.1450', '0.8880', '3.000' , '0.4780']],
        [4, ['5.0025', '7.2000', '12.00' , '6.5013']]]
</snippet></ROW><ROW><id>6793106</id><snippet>print '\n'.join(map(str,xyze))
print

for el in xyze:
    el[1] = map(float,el[1])

print '\n'.join(map(str,xyze))
</snippet></ROW><ROW><id>6793106</id><snippet>[0, ['0.2000', '0.2000', '3.000', '0.5000']]
[9, ['0.1450', '0.8880', '3.000', '0.4780']]
[4, ['5.0025', '7.2000', '12.00', '6.5013']]

[0, [0.2, 0.2, 3.0, 0.5]]
[9, [0.145, 0.888, 3.0, 0.478]]
[4, [5.0025, 7.2, 12.0, 6.5013]]
</snippet></ROW><ROW><id>6793134</id><snippet>`</snippet></ROW><ROW><id>6793134</id><snippet># notice the `'s surrounding %s
for line in file:
    cursor.execute("CREATE TABLE IF NOT EXISTS \
    `%s`(id INT(2) NOT NULL PRIMARY KEY AUTO_INCREMENT, \
    entry TEXT NOT NULL)" % line)
</snippet></ROW><ROW><id>6793274</id><snippet>id</snippet></ROW><ROW><id>6793274</id><snippet>id, col3</snippet></ROW><ROW><id>6793550</id><snippet>x.extend(x)</snippet></ROW><ROW><id>6793550</id><snippet>x</snippet></ROW><ROW><id>6793550</id><snippet>x + x</snippet></ROW><ROW><id>6793638</id><snippet>(len(str) * 3) / 4
</snippet></ROW><ROW><id>6793708</id><snippet>[supervisor]
recipe = collective.recipe.supervisor
plugins =
   superlance
...
programs =
     10 zeo ${zeo:location}/bin/runzeo ${zeo:location}
     20 instance1 ${instance1:location}/bin/runzope ${instance1:location} true
...
eventlisteners =
     Memmon TICK_60 ${buildout:bin-directory}/memmon [-p instance1=200MB]
     HttpOk TICK_60 ${buildout:bin-directory}/httpok [-p instance1 -t 20 http://localhost:8080/]
</snippet></ROW><ROW><id>6794169</id><snippet>np.linalg.eigh</snippet></ROW><ROW><id>6794169</id><snippet>np.linalg.eigvalsh</snippet></ROW><ROW><id>6794169</id><snippet>import numpy as np
x = np.random.random(1000)
A = np.subtract.outer(x, x)
A = np.abs(A)
w, v = np.linalg.eigh(A)
</snippet></ROW><ROW><id>6794169</id><snippet>eigh</snippet></ROW><ROW><id>6794169</id><snippet>eig</snippet></ROW><ROW><id>6794169</id><snippet>np.linalg.eig</snippet></ROW><ROW><id>6794169</id><snippet>scipy.linalg.eigh</snippet></ROW><ROW><id>6794329</id><snippet>attrs={}</snippet></ROW><ROW><id>6794329</id><snippet>attrs</snippet></ROW><ROW><id>6794329</id><snippet>self.attrs = attrs</snippet></ROW><ROW><id>6794329</id><snippet>self.attrs</snippet></ROW><ROW><id>6794329</id><snippet>attrs</snippet></ROW><ROW><id>6794329</id><snippet>**kwargs</snippet></ROW><ROW><id>6794329</id><snippet>class Thing:
    def __init__(self, **kwargs):
        for arg in kwargs:
            self.attrs[arg] = kwargs[arg]
</snippet></ROW><ROW><id>6794329</id><snippet>thing1 = Thing(color='red')

thing2 = Thing(**{'color':'red'})

my_dict = {'color' : 'red'}
thing3 = Thing(**my_dict)
</snippet></ROW><ROW><id>6794331</id><snippet>lambda</snippet></ROW><ROW><id>6794331</id><snippet>def</snippet></ROW><ROW><id>6794331</id><snippet>class Eggs(object):

    def __init__(self):
        self.spam = 'Monster'
        def spam_condition(string = None):
            return (string is not None) and (len(string) &lt;= 32)
        self.spam_setter = self.set('spam', 'Ouch', spam_condition)
        spam_button.bind('&lt;Enter&gt;', self.spam_setter)
        self.spam_setter(val='Horse')


    def set(self, name, value, condition):
        def setter(val):
            if type(val) is not .... :  # fill this in with the TYPE of the event
                value = val
            if condition(value):
                setattr(self, name, value)
        return setter
</snippet></ROW><ROW><id>6794331</id><snippet>if not isinstance(val, ....) :  # fill this in with the CLASS of the event
</snippet></ROW><ROW><id>6794451</id><snippet>if OldVersion:
    from my.package.location.A import A
else:
    from new.package.location.A import A
</snippet></ROW><ROW><id>6794451</id><snippet>from a_finder import A
</snippet></ROW><ROW><id>6794484</id><snippet>unicode</snippet></ROW><ROW><id>6794484</id><snippet>int</snippet></ROW><ROW><id>6794484</id><snippet>float</snippet></ROW><ROW><id>6794484</id><snippet>NoneType</snippet></ROW><ROW><id>6794484</id><snippet>bool</snippet></ROW><ROW><id>6794484</id><snippet>list</snippet></ROW><ROW><id>6794484</id><snippet>dict</snippet></ROW><ROW><id>6794774</id><snippet>_pre</snippet></ROW><ROW><id>6794990</id><snippet>&gt;&gt;&gt; a = [1, 2]
</snippet></ROW><ROW><id>6794990</id><snippet>&gt;&gt;&gt; b = a
</snippet></ROW><ROW><id>6794990</id><snippet>&gt;&gt;&gt; a.append(3)
</snippet></ROW><ROW><id>6794990</id><snippet>b</snippet></ROW><ROW><id>6794990</id><snippet>a</snippet></ROW><ROW><id>6794990</id><snippet>is</snippet></ROW><ROW><id>6794990</id><snippet>id()</snippet></ROW><ROW><id>6794990</id><snippet>&gt;&gt;&gt; a is b
&gt;&gt;&gt; True
&gt;&gt;&gt; id(a) == id(b)
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>6794990</id><snippet>&gt;&gt;&gt; b = list(a)
&gt;&gt;&gt; a is b
&gt;&gt;&gt; False
</snippet></ROW><ROW><id>6795144</id><snippet>&lt;A&gt;</snippet></ROW><ROW><id>6795144</id><snippet>'&lt;/W&gt;'</snippet></ROW><ROW><id>6795144</id><snippet>with open('/Users/Desktop/Poetrylist.txt','w') as output_file:
    with open('/Users/Desktop/2e.txt','r') as open_file:
        the_whole_file = open_file.read()
        start_position = 0
        while True:
            start_position = the_whole_file.find('&lt;A&gt;', start_position)
            if start_position &lt; 0:
                break
            start_position += 3
            end_position = the_whole_file.find('&lt;/W&gt;', start_position)
            output_file.write(the_whole_file[start_position:end_position])
            output_file.write("\n")    
            start_position = end_position + 4
</snippet></ROW><ROW><id>6795296</id><snippet>int(raw_input())</snippet></ROW><ROW><id>6795296</id><snippet>raw_input</snippet></ROW><ROW><id>6795296</id><snippet>raw_input()</snippet></ROW><ROW><id>6795385</id><snippet>import collections

result_dict = collections.defaultdict(list)
for x in y:
    result_dict[x.key].append(x.value)
</snippet></ROW><ROW><id>6795385</id><snippet>result_dict = {}
for x in y:
    result_dict.setdefault(x.key, []).append(x.value)
</snippet></ROW><ROW><id>6795385</id><snippet>setdefault</snippet></ROW><ROW><id>6795385</id><snippet>result_dict = {}
for x in y:
    if x.key not in y:
        result_dict[x.key] = []
    result_dict[x.key].append(x.value)
</snippet></ROW><ROW><id>6795598</id><snippet>import os
import csv

listing = os.listdir('/directory/my/files/are/in')
os.chdir('/directory/my/files/are/in')

for file in listing[1:]:
    if os.path.isdir(file):
        continue
    with open(file, 'rU') as csvfile:
        for row in csv.reader(csvfile, delimiter='\t'):
            print row
            #now you can extract data from the row
</snippet></ROW><ROW><id>6795598</id><snippet>csv.reader</snippet></ROW><ROW><id>6795598</id><snippet>split</snippet></ROW><ROW><id>6795738</id><snippet>(...,0,:)</snippet></ROW><ROW><id>6795738</id><snippet>(Ellipsis, 0, slice(None, None, None))</snippet></ROW><ROW><id>6795738</id><snippet>class ExtendedSliceMaker(object):
    def __getitem__(self, idx):
        return idx

&gt;&gt;&gt; ExtendedSliceMaker()[...,0,:]
(Ellipsis, 0, slice(None, None, None))
</snippet></ROW><ROW><id>6796156</id><snippet>start_position</snippet></ROW><ROW><id>6796156</id><snippet>for x in authorList:
    start_position = 0   # Add this
    while True:
</snippet></ROW><ROW><id>6796466</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree as etree
&gt;&gt;&gt; corpus = """&lt;typeBoxes&gt;
...     &lt;typeBox type="counter"&gt;
...         &lt;text fontSize="140"&gt;123456&lt;/text&gt;
...         &lt;text fontSize="26"&gt;Foobar&lt;/text&gt;
...         &lt;incrementTextFieldNum&gt;1&lt;/incrementTextFieldNum&gt;
...         &lt;timing&gt;1&lt;/timing&gt;
...         &lt;increment&gt;1&lt;/increment&gt;
...     &lt;/typeBox&gt;
...     &lt;typeBox&gt;
...         &lt;image&gt;images/foo.png&lt;/image&gt;
...         &lt;text fontSize="26"&gt;Foo&lt;/text&gt;--&gt;
...     &lt;/typeBox&gt;
... &lt;/typeBoxes&gt;"""
&gt;&gt;&gt; 
&gt;&gt;&gt; doc = etree.fromstring(corpus)
&gt;&gt;&gt; 
&gt;&gt;&gt; for typeBox in doc.findall('typeBox'):
...     if typeBox.attrib.get('type') == 'counter':
...         fieldnum = int(typeBox.find('incrementTextFieldNum').text)
...         incr = int(typeBox.find('increment').text)
...         text_field = typeBox.findall('text')[fieldnum-1]
...         text_field.text = str(int(text_field.text) + incr)
... 
&gt;&gt;&gt; print etree.tostring(doc)
&lt;typeBoxes&gt;
    &lt;typeBox type="counter"&gt;
        &lt;text fontSize="140"&gt;123457&lt;/text&gt;
        &lt;text fontSize="26"&gt;Foobar&lt;/text&gt;
        &lt;incrementTextFieldNum&gt;1&lt;/incrementTextFieldNum&gt;
        &lt;timing&gt;1&lt;/timing&gt;
        &lt;increment&gt;1&lt;/increment&gt;
    &lt;/typeBox&gt;
    &lt;typeBox&gt;
        &lt;image&gt;images/foo.png&lt;/image&gt;
        &lt;text fontSize="26"&gt;Foo&lt;/text&gt;--&gt;
    &lt;/typeBox&gt;
&lt;/typeBoxes&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6796614</id><snippet>ValueError</snippet></ROW><ROW><id>6796614</id><snippet>do_error</snippet></ROW><ROW><id>6796614</id><snippet>elif</snippet></ROW><ROW><id>6796614</id><snippet>funs = {1: do_something_1,
        2: do_something_2,
        3: do_something_3}
funs[eggs]()
</snippet></ROW><ROW><id>6796752</id><snippet>import os
import sys

class RedirectStdStreams(object):
    def __init__(self, stdout=None, stderr=None):
        self._stdout = stdout or sys.stdout
        self._stderr = stderr or sys.stderr

    def __enter__(self):
        self.old_stdout, self.old_stderr = sys.stdout, sys.stderr
        self.old_stdout.flush(); self.old_stderr.flush()
        sys.stdout, sys.stderr = self._stdout, self._stderr

    def __exit__(self, exc_type, exc_value, traceback):
        self._stdout.flush(); self._stderr.flush()
        sys.stdout = self.old_stdout
        sys.stderr = self.old_stderr

if __name__ == '__main__':

    devnull = open(os.devnull, 'w')
    print('Fubar')

    with RedirectStdStreams(stdout=devnull, stderr=devnull):
        print("You'll never see me")

    print("I'm back!")
</snippet></ROW><ROW><id>6796755</id><snippet>run</snippet></ROW><ROW><id>6796755</id><snippet>run</snippet></ROW><ROW><id>6796772</id><snippet>Stmt      &lt;&lt; ( selectToken +
                columnNameList('columns') + 
                Optional( CaselessKeyword('where') + whereExpression('where'), "" ) +
                Each( [ Optional( CaselessKeyword('group by') + columnNameList('group'), "" ).setDebug(),
                        Optional( CaselessKeyword('order by') + columnNameList('order'), "" ).setDebug() ] 
                    ) 
            )
</snippet></ROW><ROW><id>6796921</id><snippet>from youtest import MyTest   

class RunIt(MyTest): pass

r = RunIt()
r.iffit()
</snippet></ROW><ROW><id>6796921</id><snippet>r = MyTest()</snippet></ROW><ROW><id>6796921</id><snippet>SyntaxError</snippet></ROW><ROW><id>6796921</id><snippet>return 'death'</snippet></ROW><ROW><id>6796921</id><snippet>death</snippet></ROW><ROW><id>6796921</id><snippet>return death()</snippet></ROW><ROW><id>6796921</id><snippet>death()</snippet></ROW><ROW><id>6796921</id><snippet>exit</snippet></ROW><ROW><id>6796921</id><snippet>exit()</snippet></ROW><ROW><id>6797008</id><snippet>object</snippet></ROW><ROW><id>6797008</id><snippet>__init__</snippet></ROW><ROW><id>6797022</id><snippet>import urllib2
import csv

class GoogleFinanceAPI:
    def __init__(self):
        self.url = "http://finance.google.com/finance/historical?client=ig&amp;q={0}:{1}&amp;output=csv"
    def get(self,symbol,exchange):
        page = urllib2.urlopen(self.url.format(exchange,symbol))
        content = page.readlines()
        page.close()
        reader = csv.reader(content)
        for row in reader:
            print row

c = GoogleFinanceAPI()
c.get("MSFT","NASDAQ")
</snippet></ROW><ROW><id>6797120</id><snippet>dict</snippet></ROW><ROW><id>6797120</id><snippet>authorList = ['Shakes.','Scott']
already_seen = {} # dict to keep track of what has been seen

with open('/Users/Adam/Desktop/Poetrylist.txt','w') as output_file:
    with open('/Users/Adam/Desktop/2e.txt','r') as open_file:
            the_whole_file = open_file.read()
            for x in authorList:
                start_position = 0 
                while True:
                   start_position = the_whole_file.find('&lt;A&gt;'+x+'&lt;/A&gt;', start_position)
                   if start_position &lt; 0:
                       break
                   end_position = the_whole_file.find('&lt;/W&gt;', start_position)
                   author_data = the_whole_file[start_position:end_position+4]
                   if author_data not in already_seen:
                       output_file.write(author_data + "\n")
                       already_seen[author_data] = True
                   start_position = end_position + 4
</snippet></ROW><ROW><id>6797200</id><snippet>+=</snippet></ROW><ROW><id>6797200</id><snippet>mylist</snippet></ROW><ROW><id>6797200</id><snippet>mylist</snippet></ROW><ROW><id>6797200</id><snippet>mylist.__iadd__([1])</snippet></ROW><ROW><id>6797200</id><snippet>mylist</snippet></ROW><ROW><id>6797200</id><snippet>mylist[0] = 5</snippet></ROW><ROW><id>6797200</id><snippet>inner</snippet></ROW><ROW><id>6797200</id><snippet>mylist</snippet></ROW><ROW><id>6797200</id><snippet>outer</snippet></ROW><ROW><id>6797200</id><snippet>mylist = [1]</snippet></ROW><ROW><id>6797200</id><snippet>mylist</snippet></ROW><ROW><id>6797200</id><snippet>mylist.__iadd__([1])</snippet></ROW><ROW><id>6797200</id><snippet>&gt;&gt;&gt; outer()
&gt;&gt;&gt; def outer():
...     mylist = []
...     def inner():
...         mylist.__iadd__([1])
...         mylist = []
...     inner()
... 
&gt;&gt;&gt; outer()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in outer
  File "&lt;stdin&gt;", line 4, in inner
UnboundLocalError: local variable 'mylist' referenced before assignment
</snippet></ROW><ROW><id>6797200</id><snippet>nonlocal</snippet></ROW><ROW><id>6797200</id><snippet>global</snippet></ROW><ROW><id>6797200</id><snippet>&gt;&gt;&gt; mylist = []
&gt;&gt;&gt; def inner():
...     global mylist
...     mylist += [1]
... 
&gt;&gt;&gt; inner()
&gt;&gt;&gt; mylist
[1]
</snippet></ROW><ROW><id>6797200</id><snippet>def outer():
    mylist = []
    def inner():
        nonlocal mylist
        mylist += [1]
    inner()
    print(mylist)
outer()
</snippet></ROW><ROW><id>6797388</id><snippet>import urlparse
url = urlparse.urlparse('http://localhost:8087/moderate?5649364211118945661=on&amp;23984729386481734=on&amp;456287432349725=on&amp;6753847523429875=off')
query = urlparse.parse_qs(url.query)
print [key for key, value in query.iteritems() if value == 'on']
</snippet></ROW><ROW><id>6797388</id><snippet>args_on = [arg for arg in self.request.arguments() if self.request.get(arg) == 'on']
</snippet></ROW><ROW><id>6797960</id><snippet>%USERPROFILE%\SendTo</snippet></ROW><ROW><id>6797960</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>6797960</id><snippet>import os, sys
from tkinter import Tk, filedialog
from tkinter.messagebox import showinfo

class Dialog:

    def __init__(self, path):
        self.path = path
        self.dst_path = ''
        self.root = root = Tk()

        root.iconify()
        root.after_idle(self.askdirectory)
        root.mainloop()

    def askdirectory(self):
        self.dst_path = filedialog.askdirectory(initialdir=self.path)
        showinfo('Selected Path', self.dst_path)
        self.root.destroy()

if __name__ == '__main__':
    if len(sys.argv) &gt; 1:
        path = sys.argv[1]
        if os.path.isfile(path):
            path = os.path.dirname(path)

        dialog = Dialog(path)

        #if dialog.dst_path: do_something(dialog.dst_path)
</snippet></ROW><ROW><id>6797990</id><snippet>s = "Kilometer"
print(s.lower())
</snippet></ROW><ROW><id>6798033</id><snippet>&lt;option /&gt;</snippet></ROW><ROW><id>6798033</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>6798042</id><snippet>class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

class Logger(object):
    __metaclass__ = Singleton
</snippet></ROW><ROW><id>6798042</id><snippet>class Logger(metaclass=Singleton):
    pass
</snippet></ROW><ROW><id>6798042</id><snippet>__init__</snippet></ROW><ROW><id>6798042</id><snippet>        else:
            cls._instances[cls].__init__(*args, **kwargs)
</snippet></ROW><ROW><id>6798042</id><snippet>if</snippet></ROW><ROW><id>6798042</id><snippet>Singleton.__call__</snippet></ROW><ROW><id>6798042</id><snippet>type(obj)</snippet></ROW><ROW><id>6798042</id><snippet>type</snippet></ROW><ROW><id>6798042</id><snippet>Logger</snippet></ROW><ROW><id>6798042</id><snippet>class 'your_module.Singleton'</snippet></ROW><ROW><id>6798042</id><snippet>Logger</snippet></ROW><ROW><id>6798042</id><snippet>class 'your_module.Logger'</snippet></ROW><ROW><id>6798042</id><snippet>Logger()</snippet></ROW><ROW><id>6798042</id><snippet>Logger</snippet></ROW><ROW><id>6798042</id><snippet>Singleton</snippet></ROW><ROW><id>6798042</id><snippet>__getattr__</snippet></ROW><ROW><id>6798042</id><snippet>myclass.attribute</snippet></ROW><ROW><id>6798042</id><snippet>struct</snippet></ROW><ROW><id>6798042</id><snippet>__new__</snippet></ROW><ROW><id>6798042</id><snippet>SubClassOfSingleton()</snippet></ROW><ROW><id>6798042</id><snippet>__call__</snippet></ROW><ROW><id>6798042</id><snippet>type</snippet></ROW><ROW><id>6798042</id><snippet># works in Python 2 &amp; 3
class _Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(_Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

class Singleton(_Singleton('SingletonMeta', (object,), {})): pass

class Logger(Singleton):
    pass
</snippet></ROW><ROW><id>6798042</id><snippet>isinstance(inst, Singleton)</snippet></ROW><ROW><id>6798042</id><snippet>True</snippet></ROW><ROW><id>6798042</id><snippet>_instances</snippet></ROW><ROW><id>6798042</id><snippet>super()</snippet></ROW><ROW><id>6798042</id><snippet>__new__</snippet></ROW><ROW><id>6798042</id><snippet>class Singleton(object):
  _instances = {}
  def __new__(class_, *args, **kwargs):
    if class_ not in class_._instances:
        class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)
    return class_._instances[class_]

class MyClass(Singleton):
  pass

c = MyClass()
</snippet></ROW><ROW><id>6798042</id><snippet>__class__</snippet></ROW><ROW><id>6798042</id><snippet>super()</snippet></ROW><ROW><id>6798042</id><snippet>__new__</snippet></ROW><ROW><id>6798042</id><snippet>__init__</snippet></ROW><ROW><id>6798369</id><snippet>curl --upload-file &lt;file&gt; &lt;url&gt;</snippet></ROW><ROW><id>6798501</id><snippet>i</snippet></ROW><ROW><id>6798501</id><snippet>for</snippet></ROW><ROW><id>6798501</id><snippet>sheet_index</snippet></ROW><ROW><id>6798501</id><snippet>row_index</snippet></ROW><ROW><id>6798501</id><snippet>seglist</snippet></ROW><ROW><id>6798501</id><snippet>xlwt</snippet></ROW><ROW><id>6798501</id><snippet>assert len(wordlist) == len(digitlist)
for sheetx in xrange(len(seglist)):
    ws = w.add_sheet(str(sheeetx))
    assert len(wordlist[sheetx]) == len(digitlist[sheetx])
    for rowx, values in enumerate(zip(wordlist[sheetx], digitlist[sheetx]):
        for colx, value in enumerate(values):
            ws.write(rowx, colx, value)
</snippet></ROW><ROW><id>6798501</id><snippet>assert</snippet></ROW><ROW><id>6798501</id><snippet>assert len(wordlist) == len(digitlist) == len(seglist))
for sheetx in xrange(len(seglist)):
    ws = w.add_sheet(str(sheeetx))
    for colx, values in enumerate((wordlist[sheetx], digitlist[sheetx])):
        for rowx, value in enumerate(values):
            ws.write(rowx, colx, value)
</snippet></ROW><ROW><id>6798560</id><snippet>for db in numDB:
            check = wx.CheckBox(self, -1, db)
            sizer.Add(check, pos=(xIndex,0), flag=wx.LEFT|wx.ALIGN_CENTER_VERTICAL, border=10)
            label = wx.StaticText(panel, label="")
            sizer.Add(label, pos=(xIndex,1), flag=wx.LEFT|wx.ALIGN_CENTER_VERTICAL, border=10)
            name = wx.TextCtrl(panel)
            #Set Temp Name
            if db.endswith('.db'):
                name.Value = db[:-3]
            sizer.Add(name, pos=(xIndex,2), span=(1,3),flag=wx.EXPAND|wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.TOP, border=5)
            xIndex +=1

    #-------------------------------------------------------
    # Save references to the widgets created dynamically
            list_checkboxID.append(check.GetId())
            list_checkboxLabel.append(check.GetLabel())
            list_txtctrlID.append(name.GetId())
            list_txtctrlLabel.append(name.Value)

            #Bind whatever events you want here -
            check.Bind(wx.EVT_CHECKBOX, self.OnCheck, check)

    def OnCheck(self, event):
        for item in range(len(list_checkboxID)):
            print "Checkbox " + str(item) + ":\t\t\tID:" + str(list_checkboxID[item]) + "\tLABEL:" + list_checkboxLabel[item]
            print "Text Control " + str(item) + ":\t\tID:" + str(list_txtctrlID[item]) + "\tLABEL:" + list_txtctrlLabel[item]
</snippet></ROW><ROW><id>6798628</id><snippet>while len(mylist) &lt; 1000:</snippet></ROW><ROW><id>6798628</id><snippet>count</snippet></ROW><ROW><id>6798628</id><snippet>count</snippet></ROW><ROW><id>6798628</id><snippet>True</snippet></ROW><ROW><id>6798628</id><snippet>False</snippet></ROW><ROW><id>6798628</id><snippet>primes = [2]
candidate = 3
while len(primes) &lt; 1000:
    isprime = True
    for testprime in primes:
        if candidate % testprime == 0:
            isprime = False
            break
    if isprime:
        primes.append(candidate)
    candidate = candidate + 2
print primes
</snippet></ROW><ROW><id>6798628</id><snippet>import itertools
primes = [2]
candidate_iter = itertools.count(3, 2)
while len(primes) &lt; 1000:
    candidate = candidate_iter.next()
    if all(candidate % testprime != 0 for testprime in primes):
        primes.append(candidate)
print primes
</snippet></ROW><ROW><id>6798906</id><snippet>include</snippet></ROW><ROW><id>6798906</id><snippet>/System/Library/Frameworks</snippet></ROW><ROW><id>6798906</id><snippet>Xcode 4</snippet></ROW><ROW><id>6798906</id><snippet>/Developer/SDKs</snippet></ROW><ROW><id>6798906</id><snippet>Xcode</snippet></ROW><ROW><id>6798906</id><snippet>/Developer/SDKs/MacOSX10.7.sdk/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7
</snippet></ROW><ROW><id>6798906</id><snippet>include</snippet></ROW><ROW><id>6798906</id><snippet>python-config</snippet></ROW><ROW><id>6798906</id><snippet>$ /usr/bin/python2.7-config --include
-I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7
</snippet></ROW><ROW><id>6798906</id><snippet>include</snippet></ROW><ROW><id>6798906</id><snippet>Xcode 4</snippet></ROW><ROW><id>6798906</id><snippet>Xcode 4</snippet></ROW><ROW><id>6798937</id><snippet>create table node (
    nodeKey integer not null primary key,
    parentNode integer references node(nodeKey), // allow null for the root, or have root point to itself, whatever
    fullPathName varchar(2048),
    nodeName varchar(2048),
    nodeType varchar(1) // d = directory, f = file, or whatever else you want
)
</snippet></ROW><ROW><id>6798937</id><snippet>find . -type f -print0 | xargs -0 ls -i | sort -n &gt; sortedListOfFileWithInode
</snippet></ROW><ROW><id>6798937</id><snippet>1234 song1.mp3
1235 song2.mp3
1236 song3.mp3
</snippet></ROW><ROW><id>6798937</id><snippet>1234 song1.mp3
1237 song2.mp3
1236 song3.mp3
</snippet></ROW><ROW><id>6798937</id><snippet>mv song1.mp3 song4.mp3
</snippet></ROW><ROW><id>6798937</id><snippet>1237 song2.mp3
1236 song3.mp3
1234 song4.mp3
</snippet></ROW><ROW><id>6799042</id><snippet>from .. import mypackage
</snippet></ROW><ROW><id>6799042</id><snippet>from ..mypackage import server
</snippet></ROW><ROW><id>6799042</id><snippet>try:
    from my_package import server
except ImportError:
    from ..my_package import server
</snippet></ROW><ROW><id>6799193</id><snippet>from docutils.core import publish_string
from docutils.writers.html4css1 import Writer as HisWriter

src = 'ccav'
args = {
    'stylesheet_path' : '/path/to/your/stylesheet'

}
print publish_string(src, writer=HisWriter(), settings=None, settings_overrides=args)
</snippet></ROW><ROW><id>6799193</id><snippet>settings = None</snippet></ROW><ROW><id>6799193</id><snippet>stylesheet_path</snippet></ROW><ROW><id>6799193</id><snippet>stylesheet</snippet></ROW><ROW><id>6799193</id><snippet>settings = None</snippet></ROW><ROW><id>6799269</id><snippet>retries = 5
while retries &gt; 0:
    requestSucceeded = True # assume the best
    try:
        resp, content = h.request("http://www.example.com/db/1234567")
        if resp is None:
            requestSucceeded = False
            log.warn ("1234567: no http response")
        elif resp.status != 200:
            requestSucceeded = False
            log.warn ("1234567: replied with {0:d}".format(resp.status))
    except Exception as e:
        requestSuceeded = False
        log.warn("1234567: exception - " + str(e)) 
    if not requestSucceeded:
        time.sleep(30)
        retries -= 1
    else:
        retries = 0
if requestSucceded:
    process_request()
    ack_message()
</snippet></ROW><ROW><id>6799332</id><snippet>links = Links.objects.all()
forms = []
for link in links:
    form = LinkForm(instance = link)
    forms.append({'id': link.id, 'form': form})
</snippet></ROW><ROW><id>6799332</id><snippet>links = Links.objects.all()
forms = {}
for link in links:
    form = LinkForm(instance = link)
    # you need something to use as a key
    forms[key] = {'id': link.id, 'form': form}
</snippet></ROW><ROW><id>6799332</id><snippet>forms = { 
       'key1': { 'id' : '1',
          'form' : form_something,
        },
       'key2': { 'id'  : '4',
          'form' : form_something2
        }
    }  
</snippet></ROW><ROW><id>6799332</id><snippet>form_something2</snippet></ROW><ROW><id>6799409</id><snippet>help(os.walk)</snippet></ROW><ROW><id>6799409</id><snippet>dirnames</snippet></ROW><ROW><id>6799409</id><snippet>dirnames</snippet></ROW><ROW><id>6799409</id><snippet>del</snippet></ROW><ROW><id>6799409</id><snippet>dirnames</snippet></ROW><ROW><id>6799409</id><snippet>import os
import re

def prune(regex,top='.'):
    sep=os.path.sep
    matcher = re.compile(regex)
    pieces=regex.split(sep)
    partial_matchers = map(
        re.compile,
        (sep.join(pieces[:i+1]) for i in range(len(pieces))))
    for root, dirs, files in os.walk(top,topdown=True):
        for i in reversed(range(len(dirs))):
            dirname=os.path.relpath(os.path.join(root,dirs[i]), top)
            dirlevel=dirname.count(sep)
            # print(dirname,dirlevel,sep.join(pieces[:dirlevel+1]))
            if not partial_matchers[dirlevel].match(dirname):
                print('pruning {0}'.format(
                    os.path.relpath(os.path.join(root,dirs[i]), top)))                
                del dirs[i]

        for filename in files:
            filename=os.path.relpath(os.path.join(root,filename))
            # print('checking {0}'.format(filename))
            if matcher.match(filename):
                print(filename)

if __name__=='__main__':
    prune(r'foo/\w+/bar/\d+-\w+.dat')
</snippet></ROW><ROW><id>6799409</id><snippet>~/test% tree .
.
|-- foo
|   `-- baz
|       |-- bad
|       |   |-- bad1.txt
|       |   `-- badbad
|       |       `-- bad2.txt
|       `-- bar
|           |-- 1-good.dat
|           `-- 2-good.dat
`-- tmp
    |-- 000.png
    |-- 001.png
    `-- output.gif
</snippet></ROW><ROW><id>6799409</id><snippet>pruning tmp
pruning foo/baz/bad
foo/baz/bar/2-good.dat
foo/baz/bar/1-good.dat
</snippet></ROW><ROW><id>6799782</id><snippet>V,D = np.linalg.eig(A)
V = np.real(V)
res = n_max(V,1) # take largest 
idx = res[0][1][0] 
a = np.real(D[idx]) # look at corresp eigv
</snippet></ROW><ROW><id>6799782</id><snippet>pixels = Flatten[image];
weights = Table[N[Exp[-(pixels[[i]] - pixels[[j]])^2]], {i, 1, 900}, {j, 1, 900}];
eigenVectors = Eigenvectors[weights];
ImageAdjust[Image[Partition[eigenVectors[[1]], 30]]]
</snippet></ROW><ROW><id>6799797</id><snippet>data</snippet></ROW><ROW><id>6799797</id><snippet>alert()</snippet></ROW><ROW><id>6799797</id><snippet>$('#updateform').wl_Form({ 
    onSuccess: function(response, status){
        var data = $.parseJSON(response); 
        alert(data);
        alert(data.page);
        //...
    }
});
</snippet></ROW><ROW><id>6800010</id><snippet>cmp.py</snippet></ROW><ROW><id>6800010</id><snippet>-b</snippet></ROW><ROW><id>6800010</id><snippet>--benchmark</snippet></ROW><ROW><id>6800010</id><snippet>else</snippet></ROW><ROW><id>6800010</id><snippet>python cmp.py --benchmark perlbench
</snippet></ROW><ROW><id>6800088</id><snippet>filename = os.path.join(sys.prefix, "share", "xxx", "xxx.png")
</snippet></ROW><ROW><id>6800135</id><snippet>urls = (
    '/hello', 'Index',
    '/file_upload_form','Index'
)
</snippet></ROW><ROW><id>6800135</id><snippet>def GET(self):
    return render.hello_form()
    return render.file_upload_form()
</snippet></ROW><ROW><id>6800189</id><snippet>from collections import OrderedDict

lines = OrderedDict()
for line in file:
    lines[line[0:12]] = line
</snippet></ROW><ROW><id>6800214</id><snippet>def factors(n):    
    return set(reduce(list.__add__, 
                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))
</snippet></ROW><ROW><id>6800214</id><snippet>n</snippet></ROW><ROW><id>6800214</id><snippet>sqrt(x) * sqrt(x) = x</snippet></ROW><ROW><id>6800214</id><snippet>sqrt(x)</snippet></ROW><ROW><id>6800214</id><snippet>x / fac1</snippet></ROW><ROW><id>6800214</id><snippet>fac2</snippet></ROW><ROW><id>6800214</id><snippet>reduce(list.__add__, ...)</snippet></ROW><ROW><id>6800214</id><snippet>[fac1, fac2]</snippet></ROW><ROW><id>6800214</id><snippet>[i, n/i] for i in range(1, int(sqrt(n)) + 1) if n % i == 0</snippet></ROW><ROW><id>6800214</id><snippet>n</snippet></ROW><ROW><id>6800214</id><snippet>n</snippet></ROW><ROW><id>6800214</id><snippet>set(...)</snippet></ROW><ROW><id>6800214</id><snippet>n = 4</snippet></ROW><ROW><id>6800214</id><snippet>2</snippet></ROW><ROW><id>6800214</id><snippet>set</snippet></ROW><ROW><id>6800214</id><snippet>sqrt</snippet></ROW><ROW><id>6800214</id><snippet>**0.5</snippet></ROW><ROW><id>6800507</id><snippet>map</snippet></ROW><ROW><id>6800507</id><snippet>map</snippet></ROW><ROW><id>6800507</id><snippet>map[i]</snippet></ROW><ROW><id>6800507</id><snippet>payIntList = list(map(int,payList))
</snippet></ROW><ROW><id>6800507</id><snippet>payIntList = [pi + 1000 for pi in payList]
for pi in payIntList:
         print(pi)
</snippet></ROW><ROW><id>6800887</id><snippet>f = open('somefile.dat', 'w+')</snippet></ROW><ROW><id>6800887</id><snippet>f.write()</snippet></ROW><ROW><id>6800887</id><snippet>print</snippet></ROW><ROW><id>6800887</id><snippet>write</snippet></ROW><ROW><id>6800887</id><snippet>import math
points = [(0,0), (5,0), (5,5), (10,5)]
n = 20
f = open('somefile.dat', 'w+')

for i in range(n) :

    u = i / float(n)

    x = math.pow(1-u,3) * points[0][0] + 3 * u * math.pow(1-u,2) * points[1][0] \
    + 3 * (1-u) * math.pow(u,2) * points[2][0] + math.pow(u,3) * points[3][0]
    y = math.pow(1-u,3) * points[0][1] + 3 * u * math.pow(1-u,2) * points[1][1] \
    + 3 * (1-u) * math.pow(u,2) * points[2][1] + math.pow(u,3) * points[3][1]

    f.write("(x,y)=(%f, %f)"% (x, y))
</snippet></ROW><ROW><id>6801045</id><snippet>  for i = 1 to N do
     flag = false
     for j = 1 to M do
        ...
        if condition then
           flag = true
           break
        ...
     if flag then continue
     ...
</snippet></ROW><ROW><id>6801093</id><snippet>import ctypes, _ctypes

def castArgToCtype(arg, ctyp):
    if issubclass(ctyp, _ctypes._Pointer): return createPtr(arg, ctyp)
    return ctyp(arg)

def createPtr(arg, ctyp):
    assert isinstance(arg, (list,tuple))
    assert issubclass(ctyp, _ctypes._Pointer)
    o = (ctyp._type_ * (len(arg) + 1))()
    for i in xrange(len(arg)):
        o[i] = castArgToCtype(arg[i], ctyp._type_)
    op = ctypes.pointer(o)
    op = ctypes.cast(op, ctyp)
    return op

a = createPtr((1,2,3), ctypes.POINTER(ctypes.c_int))
print a, a[0], a[1], a[2], a._objects
</snippet></ROW><ROW><id>6801093</id><snippet>&lt;__main__.LP_c_int object at 0x105dc6680&gt; 1 2 3 {'1': &lt;__main__.c_int_Array_4 object at 0x105dc6560&gt;, '0': {}, 4393297392: &lt;__main__.LP_c_int_Array_4 object at 0x105dc65f0&gt;}
</snippet></ROW><ROW><id>6801212</id><snippet>Words</snippet></ROW><ROW><id>6801212</id><snippet>Words.fetch()</snippet></ROW><ROW><id>6801212</id><snippet>WordList.url</snippet></ROW><ROW><id>6801212</id><snippet>"/words"</snippet></ROW><ROW><id>6801212</id><snippet>success</snippet></ROW><ROW><id>6801212</id><snippet>error</snippet></ROW><ROW><id>6801212</id><snippet>Words.fetch
  success: (collection, response) -&gt; console.log "success: #{response}"
  failure: (collection, response) -&gt; console.log "failure: #{response}"
</snippet></ROW><ROW><id>6801253</id><snippet>_ctypes</snippet></ROW><ROW><id>6801253</id><snippet>from ctypes import *

def WrapClass(c):
    class C(c): pass
    C.__name__ = "wrapped_" + c.__name__
    return C

class S(Structure):
    _fields_ = [("x", POINTER(c_int)), ("y", WrapClass(c_int))]

o = S()
print o.x
print o.y
print o.y.value
</snippet></ROW><ROW><id>6801588</id><snippet>python2.7</snippet></ROW><ROW><id>6801588</id><snippet>python2.6</snippet></ROW><ROW><id>6801588</id><snippet>python</snippet></ROW><ROW><id>6801588</id><snippet>$PATH</snippet></ROW><ROW><id>6801588</id><snippet>$PATH</snippet></ROW><ROW><id>6801588</id><snippet>~/.profile</snippet></ROW><ROW><id>6801588</id><snippet>PATH="/Library/Frameworks/Python.framework/Versions/2.7/Resources/bin:${PATH}"
export PATH
</snippet></ROW><ROW><id>6801588</id><snippet>which python</snippet></ROW><ROW><id>6801588</id><snippet>python</snippet></ROW><ROW><id>6801588</id><snippet>$PATH</snippet></ROW><ROW><id>6801588</id><snippet>easy_install-2.6 htseq
</snippet></ROW><ROW><id>6801633</id><snippet>class Manager(object):
    def new_thread(self):
        return MyThread(parent=self)
    def on_thread_finished(self, thread, data):
        print thread, data

class MyThread(Thread):
    def on_thread_finished(self, thread, data):
        pass
    def __init__(self, parent=None):
        self.parent = parent
    def run(self):
        # ...
        self.parent and self.parent.on_thread_finished(self, 42)

mgr    = Manager()
thread = mgr.new_thread()
thread.run()
</snippet></ROW><ROW><id>6801816</id><snippet>flup</snippet></ROW><ROW><id>6802069</id><snippet>lastrowid</snippet></ROW><ROW><id>6802069</id><snippet>SELECT LAST_INSERT_ID()</snippet></ROW><ROW><id>6802069</id><snippet>fetchone()</snippet></ROW><ROW><id>6802306</id><snippet>import pytz
import datetime as dt

def to_utc(localdt,tz):
    timezone=pytz.timezone(tz)
    utc=pytz.utc
    return timezone.localize(localdt).astimezone(utc)

if __name__=='__main__':
    for tz in ('Europe/Berlin','Africa/Lagos'):
        for date in (dt.datetime(2011,1,1,10,0,0),
                 dt.datetime(2011,7,1,10,0,0),
                 ):
            print('{tz:15} {l} --&gt; {u}'.format(
                tz=tz,
                l=date.strftime('%b %d %H:%M'),
                u=to_utc(date,tz).strftime('%b %d %H:%M %Z')))
</snippet></ROW><ROW><id>6802306</id><snippet>Europe/Berlin   Jan 01 10:00 --&gt; Jan 01 09:00 UTC
Europe/Berlin   Jul 01 10:00 --&gt; Jul 01 08:00 UTC
Africa/Lagos    Jan 01 10:00 --&gt; Jan 01 09:00 UTC
Africa/Lagos    Jul 01 10:00 --&gt; Jul 01 09:00 UTC
</snippet></ROW><ROW><id>6802392</id><snippet>sorted(u, key=average)</snippet></ROW><ROW><id>6802392</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; u = np.array([v for v in range(19*n)])

&gt;&gt;&gt; u = u.reshape(n,19)

&gt;&gt;&gt; sorted(c, key=np.average)

[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18]),
 array([19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])]
</snippet></ROW><ROW><id>6802655</id><snippet>packbox.py 1</snippet></ROW><ROW><id>6802655</id><snippet>packbox.py 2</snippet></ROW><ROW><id>6802655</id><snippet>packbox.py 3</snippet></ROW><ROW><id>6802655</id><snippet>sys.exit(1)</snippet></ROW><ROW><id>6802655</id><snippet>argv[1]</snippet></ROW><ROW><id>6802682</id><snippet>vector</snippet></ROW><ROW><id>6802682</id><snippet>A.rotate(theta,B)</snippet></ROW><ROW><id>6802682</id><snippet>rotate(A,theta,B)</snippet></ROW><ROW><id>6802682</id><snippet>A</snippet></ROW><ROW><id>6802727</id><snippet>a</snippet></ROW><ROW><id>6802727</id><snippet>b</snippet></ROW><ROW><id>6802727</id><snippet>b</snippet></ROW><ROW><id>6802727</id><snippet>a</snippet></ROW><ROW><id>6802727</id><snippet>True</snippet></ROW><ROW><id>6802727</id><snippet>b</snippet></ROW><ROW><id>6802727</id><snippet>b = {}</snippet></ROW><ROW><id>6803020</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>6803020</id><snippet>for a, b in izip_longest(l1, l2, fillvalue=''):
    print "{0:20s}\t{1:20s}".format(a, b)
</snippet></ROW><ROW><id>6803104</id><snippet>from BeautifulSoup import BeautifulSoup

txt = '''&lt;a id="body_BusinessSearchResultSummaryList_repBusinessList_lnkBusinessProfile_1" class="sr-item-link" href="http://www.mocality.co.ke/b/natros-pharmacy/natrosoh/innercore/medical-services/_/_/0cfe6a11-7bee-41f8-8d2e-6a472557201f?skw=pharmacys&amp;rcnt=10"&gt;Natros Pharmacy&lt;/a&gt;
&lt;a id="body_BusinessSearchResultSummaryList_repBusinessList_lnkBusinessProfile_2" class="sr-item-link
" href="http://www.mocality.co.ke/b/natros-pharmacy/natrosoh/innercore/medical-services/_/_/0cfe6a11-
7bee-41f8-8d2e-6a472557201f?skw=pharmacys&amp;rcnt=10"&gt;Natros Pharmacy&lt;/a&gt;'''
match = 'body_BusinessSearchResultSummaryList_repBusinessList_lnkBusinessProfile'

soup = BeautifulSoup(txt)
for a in soup.findAll('a'):
        if a.has_key('id') and a['id'].startswith(match):
               print a['href'], a.contents
</snippet></ROW><ROW><id>6803139</id><snippet>imp.load_source()</snippet></ROW><ROW><id>6803139</id><snippet>imp.load_source()</snippet></ROW><ROW><id>6803139</id><snippet>PyObject *
PyImport_ExecCodeModuleEx(char *name, PyObject *co, char *pathname)
{
   PyObject *modules = PyImport_GetModuleDict();
   PyObject *m, *d, *v;

   m = PyImport_AddModule(name);
   if (m == NULL)
       return NULL;
   /* If the module is being reloaded, we get the old module back
      and re-use its dict to exec the new code. */ 
   d = PyModule_GetDict(m);
   if (PyDict_GetItemString(d, "__builtins__") == NULL) {
       if (PyDict_SetItemString(d, "__builtins__",
                                PyEval_GetBuiltins()) != 0)
           goto error;
   }
   ...
   ...
</snippet></ROW><ROW><id>6803139</id><snippet>b.py</snippet></ROW><ROW><id>6803263</id><snippet>def button_add_clicked(self, data):
    dirList = os.listdir("/usr/bin")
    for item in dirList: 
       if not item.startswith('.'):
          data.append([item])
    data.sort()
</snippet></ROW><ROW><id>6803677</id><snippet>from BeautifulSoup import BeautifulSoup

html_body ="""
Here is an example link:&lt;a href='http://example.com'&gt;example.com&lt;/a&gt;
"""
soup = BeautifulSoup(html_body)
for link_tag in soup.findAll('a'):
    link_tag.string = "%s%s%s" % ('|',link_tag.string,'|')
for text in soup.findAll(text=True):
    text_formatted = ['&lt;a href=""http://example.com""&gt;example&lt;/a&gt;'\ 
    if word == 'example' and not (word.startswith('|') and word.endswith('|'))\
    else word for word in foo.split() ]
    text.replaceWith(' '.join(text_formatted))
for link_tag in soup.findAll('a'):
    link_tag.string = link_tag.string[1:-1]
print soup
</snippet></ROW><ROW><id>6803677</id><snippet>post_body</snippet></ROW><ROW><id>6803714</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.curdir
'.'
&gt;&gt;&gt; startdir = os.path.abspath(os.curdir)
&gt;&gt;&gt; startdir
'/home/jterrace'
</snippet></ROW><ROW><id>6803714</id><snippet>startdir</snippet></ROW><ROW><id>6803714</id><snippet>/etc/passwd</snippet></ROW><ROW><id>6803714</id><snippet>&gt;&gt;&gt; filename = "/etc/passwd"
&gt;&gt;&gt; requested_path = os.path.relpath(filename, startdir)
&gt;&gt;&gt; requested_path
'../../etc/passwd'
&gt;&gt;&gt; requested_path = os.path.abspath(requested_path)
&gt;&gt;&gt; requested_path
'/etc/passwd'
</snippet></ROW><ROW><id>6803714</id><snippet>&gt;&gt;&gt; os.path.commonprefix([requested_path, startdir])
'/'
</snippet></ROW><ROW><id>6803714</id><snippet>startdir</snippet></ROW><ROW><id>6803759</id><snippet>with open(&lt;path to file&gt;) as f:
    for line in f:
        for char in line:
            if char.isalpha():
                print ord(char) - ord("a") + 1
</snippet></ROW><ROW><id>6803759</id><snippet>ord</snippet></ROW><ROW><id>6803759</id><snippet>yield</snippet></ROW><ROW><id>6803759</id><snippet>&gt;&gt;&gt; def transformed(it):
...     it = iter(it)
...     for char in it:
...             if char.isalpha():
...                     yield ord(char) - ord("a")
...
&gt;&gt;&gt; list(transformed("hello, world"))
[7, 4, 11, 11, 14, 22, 14, 17, 11, 3]
</snippet></ROW><ROW><id>6803943</id><snippet>yield</snippet></ROW><ROW><id>6803943</id><snippet>&gt;&gt;&gt; def g():
...     yield [1,2,3]
...     yield 1
...     yield 2
...     yield 3
... 
&gt;&gt;&gt; gen = g()
&gt;&gt;&gt; gen.next()
[1, 2, 3]
&gt;&gt;&gt; gen.next()
1
&gt;&gt;&gt; gen.next()
2
&gt;&gt;&gt; gen.next()
3
&gt;&gt;&gt; gen.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6803943</id><snippet>__iter__</snippet></ROW><ROW><id>6803943</id><snippet>for x in obj</snippet></ROW><ROW><id>6803943</id><snippet>yield</snippet></ROW><ROW><id>6803943</id><snippet>def __iter__(self):
   return iter(self.__a)
</snippet></ROW><ROW><id>6803943</id><snippet>yield</snippet></ROW><ROW><id>6803943</id><snippet>Vect</snippet></ROW><ROW><id>6803943</id><snippet>def __iter__(self):
    for i in self.__a:
        yield i
</snippet></ROW><ROW><id>6803943</id><snippet>yield</snippet></ROW><ROW><id>6803943</id><snippet>__iter__</snippet></ROW><ROW><id>6803943</id><snippet>next()</snippet></ROW><ROW><id>6803943</id><snippet>__a</snippet></ROW><ROW><id>6803943</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def g():
...     yield 1
...     for i in range(10):
...             yield i*2
... 
&gt;&gt;&gt; gen = g() 
&gt;&gt;&gt; dis.dis(gen.gi_code)
  2           0 LOAD_CONST               1 (1)
              3 YIELD_VALUE         
              4 POP_TOP             

  3           5 SETUP_LOOP              29 (to 37)
              8 LOAD_GLOBAL              0 (range)
              11 LOAD_CONST               2 (10)
              14 CALL_FUNCTION            1
              17 GET_ITER            
         &gt;&gt;   18 FOR_ITER                15 (to 36)
              21 STORE_FAST               0 (i)

   4          24 LOAD_FAST                0 (i)
              27 LOAD_CONST               3 (2)
              30 BINARY_MULTIPLY     
              31 YIELD_VALUE         
              32 POP_TOP             
              33 JUMP_ABSOLUTE           18
         &gt;&gt;   36 POP_BLOCK           
         &gt;&gt;   37 LOAD_CONST               0 (None)
              40 RETURN_VALUE        
&gt;&gt;&gt; gen.gi_frame.f_lasti ## -1 because we haven't started yet
-1 
&gt;&gt;&gt; gen.next()  
1
&gt;&gt;&gt; gen.gi_frame.f_lasti
3
&gt;&gt;&gt; gen.gi_frame.f_locals
{}
&gt;&gt;&gt; gen.next() 
0
&gt;&gt;&gt; gen.gi_frame.f_lasti , gen.gi_frame.f_locals
(31, {'i': 0})
&gt;&gt;&gt; gen.next()
2
&gt;&gt;&gt; gen.gi_frame.f_lasti , gen.gi_frame.f_locals
(31, {'i': 1})
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6803949</id><snippet>hasattr(some_var, "username")
</snippet></ROW><ROW><id>6803949</id><snippet>__getattribute__</snippet></ROW><ROW><id>6803949</id><snippet>None</snippet></ROW><ROW><id>6803949</id><snippet>def dosomething(some_user=None, some_otherthing=None):
    if some_user is not None:
        #do the "User" type action
    elif some_otherthing is not None:
        #etc...
    else:
         raise ValueError("not enough arguments")
</snippet></ROW><ROW><id>6803949</id><snippet>__instancecheck__</snippet></ROW><ROW><id>6803949</id><snippet>def wrap_user(instance):
    class wrapped_user(type(instance)):
        __metaclass__ = type
        def __new__(cls):
            pass
        def __init__(self):
            pass
        def __getattribute__(self, attr):
            self_dict = object.__getattribute__(type(self), '__dict__')
            if attr in self_dict:
                return self_dict[attr]
            return getattr(instance, attr)
        def extra_feature(self, foo):
            return instance.username + foo # or whatever
    return wrapped_user()
</snippet></ROW><ROW><id>6803949</id><snippet>__class__</snippet></ROW><ROW><id>6803949</id><snippet>__metaclass__</snippet></ROW><ROW><id>6803949</id><snippet>self.wrapped_object</snippet></ROW><ROW><id>6804062</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;{% block title %}title{% endblock %}&lt;/title&gt;
&lt;/head&gt;
{% block content %}{% endblock %}&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>6804062</id><snippet>{% extends "../templates/app/base.html"%}
{% block content %}
words on my page
{% endblock %}
</snippet></ROW><ROW><id>6804305</id><snippet>def triplet(s):
    extra_zeros = (3 - len(s)) % 3
    s += '0' * extra_zeros
    return (s[::3], s[1::3], s[2::3])
</snippet></ROW><ROW><id>6804305</id><snippet>&gt;&gt;&gt; triplet('123456')
('14', '25', '36')
&gt;&gt;&gt; triplet('1234567')
('147', '250', '360')
&gt;&gt;&gt; triplet('12345678')
('147', '258', '360')
&gt;&gt;&gt; triplet('123456789')
('147', '258', '369')
</snippet></ROW><ROW><id>6804619</id><snippet>ImportError</snippet></ROW><ROW><id>6804619</id><snippet>entities</snippet></ROW><ROW><id>6804619</id><snippet>sys.path</snippet></ROW><ROW><id>6804631</id><snippet>try:
    url=urllib2.urlopen(req)
except ValueError:
    # etc etc etc.
</snippet></ROW><ROW><id>6804757</id><snippet>class QScene(QtGui.QGraphicsScene):
    def __init__(self, *args, **kwds):
        QtGui.QGraphicsScene.__init__(self, *args, **kwds)

    def mousePressEvent(self, ev):
        if ev.button() == QtCore.Qt.LeftButton:
            item = QtGui.QGraphicsTextItem("CLICK")
            item.setPos(ev.scenePos())
            self.addItem(item)
</snippet></ROW><ROW><id>6804758</id><snippet>re</snippet></ROW><ROW><id>6804758</id><snippet>char in set()</snippet></ROW><ROW><id>6804758</id><snippet>import sys
import re

chars = r"A-Za-z0-9/\-:.,_$%'()[\]&lt;&gt; "
shortest_run = 4

regexp = '[%s]{%d,}' % (chars, shortest_run)
pattern = re.compile(regexp)

def process(stream):
    data = stream.read()
    return pattern.findall(data)

if __name__ == "__main__":
    for found_str in process(sys.stdin):
        print found_str
</snippet></ROW><ROW><id>6804758</id><snippet>re</snippet></ROW><ROW><id>6805524</id><snippet>vim -d oldfile newfile</snippet></ROW><ROW><id>6805781</id><snippet>player = raw_input('which player? ')
</snippet></ROW><ROW><id>6805781</id><snippet>player</snippet></ROW><ROW><id>6805781</id><snippet>player1</snippet></ROW><ROW><id>6805781</id><snippet>player = raw_input('which player? ')
if player == 'player1': # these are strings!
  current_player = player1 # this is dictionary!
  ....
  current_player[...] = ... # change the dictionary
</snippet></ROW><ROW><id>6805781</id><snippet>&gt;&gt;&gt; a = {'1': 1}
&gt;&gt;&gt; a
{'1': 1}
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b
{'1': 1}
&gt;&gt;&gt; b['1'] = 2
&gt;&gt;&gt; b
{'1': 2}
&gt;&gt;&gt; a
{'1': 2}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6805927</id><snippet>import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Path {

    static Pattern pv=Pattern.compile("\\$\\{(\\w+)\\}");

    /*
     * os.path.expanduser
     */
    public static String expanduser(String path) {
        String user=System.getProperty("user.home");

        return path.replaceFirst("~", user);
    }//expanduser

    /*
     * os.path.expandvars
     */
    public static String expandvars(String path) {
        String result=new String(path);

        Matcher m=pv.matcher(path);
        while(m.find()) {
            String var=m.group(1);
            String value=System.getenv(var);
            if (value!=null)
                result=result.replace("${"+var+"}", value);
        }
        return result;
    }//expandvars


}///
</snippet></ROW><ROW><id>6806203</id><snippet>unicodedata</snippet></ROW><ROW><id>6806203</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; a = u"बिक्रम मेरो नाम हो"
&gt;&gt;&gt; map(unicodedata.name, a)
['DEVANAGARI LETTER BA', 'DEVANAGARI VOWEL SIGN I', 'DEVANAGARI LETTER KA', 
 'DEVANAGARI SIGN VIRAMA', 'DEVANAGARI LETTER RA', 'DEVANAGARI LETTER MA',
 'SPACE', 'DEVANAGARI LETTER MA', 'DEVANAGARI VOWEL SIGN E',
 'DEVANAGARI LETTER RA', 'DEVANAGARI VOWEL SIGN O', 'SPACE',
 'DEVANAGARI LETTER NA', 'DEVANAGARI VOWEL SIGN AA', 'DEVANAGARI LETTER MA',
 'SPACE', 'DEVANAGARI LETTER HA', 'DEVANAGARI VOWEL SIGN O']
</snippet></ROW><ROW><id>6806203</id><snippet>LETTER (VIRAMA LETTER)* VOWEL?</snippet></ROW><ROW><id>6806203</id><snippet>&gt;&gt;&gt; map(unicodedata.category, a)
['Lo', 'Mc', 'Lo', 'Mn', 'Lo', 'Lo', 'Zs', 'Lo', 'Mn', 'Lo', 'Mc', 'Zs',
 'Lo', 'Mc', 'Lo', 'Zs', 'Lo', 'Mc']
</snippet></ROW><ROW><id>6806203</id><snippet>Lo</snippet></ROW><ROW><id>6806203</id><snippet>Mc</snippet></ROW><ROW><id>6806203</id><snippet>Mn</snippet></ROW><ROW><id>6806203</id><snippet>Zs</snippet></ROW><ROW><id>6806203</id><snippet>def splitclusters(s):
    """
    Generate the grapheme clusters for the string s. Not the full
    Unicode text segmentation algorithm, but probably good enough for
    Devanagari.
    """
    cluster = ''
    last = None
    virama = u'\N{DEVANAGARI SIGN VIRAMA}'
    for c in s:
        cat = unicodedata.category(c)[0]
        if cat == 'M' or cat == 'L' and last == virama:
            cluster += c
        else:
            if cluster:
                yield cluster
            cluster = c
        last = c
    if cluster:
        yield cluster

&gt;&gt;&gt; for c in splitclusters(a): print c.encode('utf8'), '-',
... 
बि - क्र - म -   - मे - रो -   - ना - म -   - हो -
</snippet></ROW><ROW><id>6806240</id><snippet>with open('input.txt') as input, open('output.txt', 'w') as output:
    for line in input:
        output.write(line.replace('glVertex3f', 'glColor3f'))
        output.write(line)
</snippet></ROW><ROW><id>6806240</id><snippet>with</snippet></ROW><ROW><id>6806302</id><snippet>commands.getoutput</snippet></ROW><ROW><id>6806302</id><snippet>#/usr/bin/env python

import pexpect

def ssh_expect(user, hostname, cmd):
    child = pexpect.spawn("ssh", ["%s@%s" % (user, hostname)] + cmd, timeout=3600)

    return child

child = ssh_expect("root", "server.example.com", ["./configure", "CFLAGS=\"-g -O0 -DDEBUG\""])
child.expect(pexpect.EOF)
print child.before
</snippet></ROW><ROW><id>6806379</id><snippet>misctools</snippet></ROW><ROW><id>6806379</id><snippet>#!/usr/bin/env python

from git import *

repo = Repo("misctools")
o = repo.remotes.origin
o.pull()

master = repo.head.reference
print master.log()
</snippet></ROW><ROW><id>6806452</id><snippet>&lt;...&gt;
    &lt;loldiv id="myvar" data="{{info}}"/&gt;
&lt;...&gt;
</snippet></ROW><ROW><id>6806452</id><snippet>&lt;script&gt;
$(function() {
    var vCountries = $("#myvar").attr("data");
});
&lt;/script&gt;
</snippet></ROW><ROW><id>6806914</id><snippet>import re

regx = re.compile('(?:(?&lt;=\A)|(?&lt;=/)).+?(?=/|\Z)')


for ss in ('Same/Same2/Foot/Ankle/Joint/Actuator/Sensor/Temperature/Value=4.123',
           'Same/Same2/Battery/Name=SomeString',
           'Same/Same2/Home/Land/Some/More/Stuff=0.34'):

    print ss
    print regx.findall(ss)
    print
</snippet></ROW><ROW><id>6806914</id><snippet>import re
from os import sep

sep2 = r'\\' if sep=='\\' else '/'

pat = '^(?:.+?%s)(.+$)' % sep2
print 'pat==%s\n' % pat

ragx = re.compile(pat)

for ss in ('Same\Same2\Foot\Ankle\Joint\Actuator\Sensor\Temperature\Value=4.123',
           'Same\Same2\Battery\Name=SomeString',
           'Same\Same2\Home\Land\Some\More\Stuff=0.34'):

    print ss
    print ragx.match(ss).group(1).replace(sep,'_')
    print ss.split(sep,1)[1].replace(sep,'_')
    print
</snippet></ROW><ROW><id>6806914</id><snippet>pat==^(?:.+?\\)(.+$)

Same\Same2\Foot\Ankle\Joint\Actuator\Sensor\Temperature\Value=4.123
Same2_Foot_Ankle_Joint_Actuator_Sensor_Temperature_Value=4.123
Same2_Foot_Ankle_Joint_Actuator_Sensor_Temperature_Value=4.123

Same\Same2\Battery\Name=SomeString
Same2_Battery_Name=SomeString
Same2_Battery_Name=SomeString

Same\Same2\Home\Land\Some\More\Stuff=0.34
Same2_Home_Land_Some_More_Stuff=0.34
Same2_Home_Land_Some_More_Stuff=0.34
</snippet></ROW><ROW><id>6806914</id><snippet>import re

from os import sep
sep2 = r'\\' if sep=='\\' else '/'



pot = '^(?:.+?%s)(.+?)=([^=]*$)' % sep2
print 'pot==%s\n' % pot
rogx = re.compile(pot)

pet = '^(?:.+?%s)(.+?(?==[^=]*$))' % sep2
print 'pet==%s\n' % pet
regx = re.compile(pet)


for ss in ('Same\Same2\Foot\Ankle\Joint\Sensor\Value=4.123',
           'Same\Same2\Battery\Name=SomeString',
           'Same\Same2\Ocean\Atlantic\North=',
           'Same\Same2\Maths\Addition\\2+2=4\Simple=ohoh'):
    print ss + '\n' + len(ss)*'-'

    print 'rogx groups  '.rjust(32),rogx.match(ss).groups()

    a,b = ss.split(sep,1)[1].rsplit('=',1)
    print 'split split  '.rjust(32),(a,b)
    print 'split split join upper replace   %s=%s' % (a.replace(sep,'_').upper(),b)

    print 'regx split group  '.rjust(32),regx.match(ss.split(sep,1)[1]).group()
    print 'regx split sub  '.rjust(32),\
          regx.sub(lambda x: x.group(1).replace(sep,'_').upper(), ss)
    print
</snippet></ROW><ROW><id>6806914</id><snippet>pot==^(?:.+?\\)(.+?)=([^=]*$)

pet==^(?:.+?\\)(.+?(?==[^=]*$))

Same\Same2\Foot\Ankle\Joint\Sensor\Value=4.123
----------------------------------------------
                   rogx groups   ('Same2\\Foot\\Ankle\\Joint\\Sensor\\Value', '4.123')
                   split split   ('Same2\\Foot\\Ankle\\Joint\\Sensor\\Value', '4.123')
split split join upper replace   SAME2_FOOT_ANKLE_JOINT_SENSOR_VALUE=4.123
              regx split group   Same2\Foot\Ankle\Joint\Sensor\Value
                regx split sub   SAME2_FOOT_ANKLE_JOINT_SENSOR_VALUE=4.123

Same\Same2\Battery\Name=SomeString
----------------------------------
                   rogx groups   ('Same2\\Battery\\Name', 'SomeString')
                   split split   ('Same2\\Battery\\Name', 'SomeString')
split split join upper replace   SAME2_BATTERY_NAME=SomeString
              regx split group   Same2\Battery\Name
                regx split sub   SAME2_BATTERY_NAME=SomeString

Same\Same2\Ocean\Atlantic\North=
--------------------------------
                   rogx groups   ('Same2\\Ocean\\Atlantic\\North', '')
                   split split   ('Same2\\Ocean\\Atlantic\\North', '')
split split join upper replace   SAME2_OCEAN_ATLANTIC_NORTH=
              regx split group   Same2\Ocean\Atlantic\North
                regx split sub   SAME2_OCEAN_ATLANTIC_NORTH=

Same\Same2\Maths\Addition\2+2=4\Simple=ohoh
-------------------------------------------
                   rogx groups   ('Same2\\Maths\\Addition\\2+2=4\\Simple', 'ohoh')
                   split split   ('Same2\\Maths\\Addition\\2+2=4\\Simple', 'ohoh')
split split join upper replace   SAME2_MATHS_ADDITION_2+2=4_SIMPLE=ohoh
              regx split group   Same2\Maths\Addition\2+2=4\Simple
                regx split sub   SAME2_MATHS_ADDITION_2+2=4_SIMPLE=ohoh
</snippet></ROW><ROW><id>6807057</id><snippet>12:52:06+08:00</snippet></ROW><ROW><id>6807057</id><snippet>time.gmtime()</snippet></ROW><ROW><id>6807057</id><snippet>datetime()</snippet></ROW><ROW><id>6807057</id><snippet>datetime.strptime</snippet></ROW><ROW><id>6807057</id><snippet>%z</snippet></ROW><ROW><id>6807057</id><snippet>datetime.strftime</snippet></ROW><ROW><id>6807057</id><snippet>strptime</snippet></ROW><ROW><id>6807057</id><snippet>dateutil</snippet></ROW><ROW><id>6807158</id><snippet>#!/usr/bin/env python

from twisted.internet import reactor, protocol

class Responder(protocol.Protocol):
    def connectionMade(self):
        self.vcode = None

    def dataReceived(self, data):
        # check the voucher code, and return disabled if its out of time or not there. Otherwise return time left.
        if data.startswith("check="):
            param, vcode = data.split("=")
            if vcode in self.factory.activeVouchers:
                self.transport.write("in use")
                return
            self.factory.activeVouchers.add(vcode)
            self.vcode = vcode

            checkcode = SQLConnect("check", vcode, vcode)
            if checkcode == "disabled":
                self.transport.write("disabled")
            else:
                self.transport.write(str(checkcode))
        # Update time left.
        if data.startswith("update="):
            param, vcode, vtime = data.split("=")
            SQLConnect("update", vcode, vtime)

    def connectionLost(self, reason):
        if self.vcode is not None:
            self.factory.activeVouchers.remove(self.vcode)

def main():
    factory = protocol.ServerFactory()
    factory.activeVouchers = set()
    factory.protocol = Responder
    reactor.listenTCP(6500,factory)
    reactor.run()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6807158</id><snippet>vcode</snippet></ROW><ROW><id>6807158</id><snippet>Responder</snippet></ROW><ROW><id>6807158</id><snippet>activeVouchers</snippet></ROW><ROW><id>6807158</id><snippet>Responder.connectionLost</snippet></ROW><ROW><id>6807158</id><snippet>Responder.dataReceived</snippet></ROW><ROW><id>6807158</id><snippet>twisted.protocols.basic.LineOnlyReceiver</snippet></ROW><ROW><id>6807158</id><snippet>twisted.protocols.basic</snippet></ROW><ROW><id>6807158</id><snippet>Protocol</snippet></ROW><ROW><id>6807158</id><snippet>dataReceived</snippet></ROW><ROW><id>6807158</id><snippet>dataReceived("chec")</snippet></ROW><ROW><id>6807158</id><snippet>dataReceived("k=somecode")</snippet></ROW><ROW><id>6807158</id><snippet>dataReceived</snippet></ROW><ROW><id>6807158</id><snippet>LineOnlyReceiver</snippet></ROW><ROW><id>6807158</id><snippet>lineReceived</snippet></ROW><ROW><id>6807158</id><snippet>SQLConnect</snippet></ROW><ROW><id>6807158</id><snippet>twisted.enterprise.adbapi</snippet></ROW><ROW><id>6807174</id><snippet>os.system</snippet></ROW><ROW><id>6807174</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6807174</id><snippet>import subprocess
import sys

subprocess.Popen(["mupdf", "/home/dan/Desktop/Sieve-JFP.pdf"])
sys.exit(0)
</snippet></ROW><ROW><id>6807174</id><snippet>os.system(command)</snippet></ROW><ROW><id>6807174</id><snippet>p = subprocess.Popen(command)
p.wait()
</snippet></ROW><ROW><id>6807485</id><snippet>SELECT @rownum:=@rownum+1 rownum, t.* FROM (SELECT @rownum:=1) r, mytable t;
</snippet></ROW><ROW><id>6807485</id><snippet>SELECT if(@a, @a:=@a+1, @a:=1) as rownum
</snippet></ROW><ROW><id>6807493</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>6807944</id><snippet>.emacs</snippet></ROW><ROW><id>6807944</id><snippet>(add-hook 'python-mode-hook
  (lambda ()
         (auto-complete-mode 1)))
</snippet></ROW><ROW><id>6807944</id><snippet>.emacs</snippet></ROW><ROW><id>6807944</id><snippet>(global-auto-complete-mode t)
</snippet></ROW><ROW><id>6807944</id><snippet>(add-hook 'python-mode-hook
      (lambda ()
             (auto-complete-mode 1)
             (set (make-local-variable 'ac-sources)
                  (append ac-sources '(ac-source-rope) '(ac-source-yasnippet)))
             (set (make-local-variable 'ac-find-function) 'ac-python-find)
             (set (make-local-variable 'ac-candidate-function) 'ac-python-candidate)
             (set (make-local-variable 'ac-auto-start) nil)))
</snippet></ROW><ROW><id>6808170</id><snippet>value</snippet></ROW><ROW><id>6808170</id><snippet>+=</snippet></ROW><ROW><id>6808433</id><snippet>c148e89b97cd07352c42ecb3bb4f42e2</snippet></ROW><ROW><id>6808579</id><snippet>Field</snippet></ROW><ROW><id>6808579</id><snippet>class Field(object):
    count = 0
    def __init__(self, value, default=None, desc=None):
        self.value = value
        self.default = default
        self.desc = desc
        # Here comes the magic
        self.nth = Field.count
        Field.count += 1
        # self.created_at = time.time()
</snippet></ROW><ROW><id>6808579</id><snippet>class CfgObj(object):
    def params(self):
        ns = dir(self)
        fs = [getattr(self, field) 
                    for field in ns 
                    if isinstance(getattr(self, field), Field)]
        # fs = sorted(fs, key=lambda f: f.created_at)
        fs = sorted(fs, key=lambda f: f.nth)
        return fs
</snippet></ROW><ROW><id>6808579</id><snippet>class ACfg(CfgObj):
    setting1 = Field(str, default='set1', desc='setting1 ...')
    setting2 = Field(int, default=5, desc='setting2...')

print ACfg().params()
</snippet></ROW><ROW><id>6809085</id><snippet>fields</snippet></ROW><ROW><id>6809085</id><snippet>class LoginForm(…):
    def __init__(…):
        super(LoginForm, self).__init__(…)
        self.fields.pop('username')
</snippet></ROW><ROW><id>6809198</id><snippet>if x != 5 and y &lt; 4:
  statement
</snippet></ROW><ROW><id>6809264</id><snippet>key_name</snippet></ROW><ROW><id>6809264</id><snippet>class MyAppData(db.Model):
    my_number = db.IntegerProperty()

# fetch entity whenever you need to store your value
data = MyAppData.get_or_insert(key_name='mydata', my_number=1)

data.my_number += 1
data.put()
</snippet></ROW><ROW><id>6809325</id><snippet>myclass.manager.create()</snippet></ROW><ROW><id>6809325</id><snippet>MyManager()</snippet></ROW><ROW><id>6809325</id><snippet>MyClass()</snippet></ROW><ROW><id>6809450</id><snippet>def checkNextID(ID):
    global numOfRuns, curRes, lastResult
    while ID &lt; lastResult:
        try:
            numOfRuns += 1
            if numOfRuns % 10 == 0:
                time.sleep(3) # sleep every 10 iterations
            if isValid(ID + 8):
                parseHTML(curRes)
                ID = ID + 8
            elif isValid(ID + 18):
                parseHTML(curRes)
                ID = ID + 18
            elif isValid(ID + 7):
                parseHTML(curRes)
                ID = ID + 7
            elif isValid(ID + 17):
                parseHTML(curRes)
                ID = ID + 17
            elif isValid(ID+6):
                parseHTML(curRes)
                ID = ID + 6
            elif isValid(ID + 16):
                parseHTML(curRes)
                ID = ID + 16
            else:
                ID = ID + 1
        except Exception, e:
            print "somethin went wrong: " + str(e)
</snippet></ROW><ROW><id>6809625</id><snippet>&gt;&gt;&gt; p = datetime.datetime.strptime("23:59", "%H:%M")
&gt;&gt;&gt; p = p.replace(year=2011)
&gt;&gt;&gt; p
datetime.datetime(2011, 1, 1, 23, 59)
</snippet></ROW><ROW><id>6809703</id><snippet>import unicodedata
print len(unicodedata.normalize("NFD", u"\u00C7"))
print len(unicodedata.normalize("NFC", u"\u00C7"))
</snippet></ROW><ROW><id>6809725</id><snippet>key_name = vertex1.name + ' &gt; ' + vertex2.name
</snippet></ROW><ROW><id>6809725</id><snippet>edge = Edge.all().filter('better =', vertex1).filter('worse =', vertex2).get()
</snippet></ROW><ROW><id>6809725</id><snippet>db.Key.from_path('Edge', vertex1.name + ' &gt; ' + vertex2.name)
</snippet></ROW><ROW><id>6810050</id><snippet>reversed</snippet></ROW><ROW><id>6810165</id><snippet>rollback()</snippet></ROW><ROW><id>6810165</id><snippet>ResultProxy</snippet></ROW><ROW><id>6810165</id><snippet>Connection</snippet></ROW><ROW><id>6810165</id><snippet>close()</snippet></ROW><ROW><id>6810165</id><snippet>rollback()</snippet></ROW><ROW><id>6810165</id><snippet>AssertionPool</snippet></ROW><ROW><id>6810210</id><snippet>isRecordValid</snippet></ROW><ROW><id>6810210</id><snippet>def isRecordValid(s, p, v, time):
    if p &gt; 10000:
        return False
    ... 
    # rest of existing method
</snippet></ROW><ROW><id>6810317</id><snippet>import os
os.environ["DISPLAY"]=":99"
</snippet></ROW><ROW><id>6810721</id><snippet>import datetime
</snippet></ROW><ROW><id>6810768</id><snippet>tags: ['linux', 'apached', 'wsgi']
</snippet></ROW><ROW><id>6810775</id><snippet>'&lt;tag1&gt;{0}&lt;/tag1&gt;'.format('I have a text like that')
</snippet></ROW><ROW><id>6810775</id><snippet>&gt;&gt;&gt; l = ['I have a text like that', 'Or like that']
&gt;&gt;&gt; ['&lt;tag1&gt;{0}&lt;/tag1&gt;'.format(s) for s in l]
['&lt;tag1&gt;I have a text like that&lt;/tag1&gt;', '&lt;tag1&gt;Or like that&lt;/tag1&gt;']
</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; s = '02:40'
&gt;&gt;&gt; int(s[:-3]) * 60 + int(s[-2:])
160
</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; s = '2:40'
&gt;&gt;&gt; int(s[:-3]) * 60 + int(s[-2:])
160
</snippet></ROW><ROW><id>6810965</id><snippet>split()</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; hours, minutes = s.split(':')
&gt;&gt;&gt; int(hours) * 60 + int(minutes)
160
</snippet></ROW><ROW><id>6810965</id><snippet>map()</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; hours, minutes = map(int, s.split(':'))
&gt;&gt;&gt; hours * 60 + minutes
160
</snippet></ROW><ROW><id>6810965</id><snippet>timeit</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; parsetime = timeit.timeit("mins = int(s[:-3]) * 60 + int(s[-2:])", "s='02:40'", number=100000) / 100000
&gt;&gt;&gt; parsetime
9.018449783325196e-06
</snippet></ROW><ROW><id>6810965</id><snippet>split()</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; splittime = timeit.timeit("hours,minutes = s.split(':'); mins=int(hours)*60 + int(minutes)", "s='02:40'", number=100000)/100000
&gt;&gt;&gt; splittime
1.1217889785766602e-05
&gt;&gt;&gt; splittime/parsetime
1.2438822697120402
</snippet></ROW><ROW><id>6810965</id><snippet>map()</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; splitmaptime = timeit.timeit("hours,minutes = map(int, s.split(':')); mins=hours*60 + minutes", "s='02:40'", number=100000)/100000
&gt;&gt;&gt; splitmaptime
1.3971350193023682e-05
&gt;&gt;&gt; splitmaptime/parsetime
1.5491964282881776
</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; summaptime = timeit.timeit('mins=sum(map(lambda x, y: x * y, map(int, "2:40".split(":")), [60, 1]))', "s='02:40'", number=100000) / 100000
&gt;&gt;&gt; summaptime
2.1276121139526366e-05
&gt;&gt;&gt; summaptime/parsetime
2.43
</snippet></ROW><ROW><id>6810965</id><snippet>strptime()</snippet></ROW><ROW><id>6810965</id><snippet>&gt;&gt;&gt; strp = timeit.timeit("t=time.strptime(s, '%H:%M');mins=t.tm_hour * 60 + t.tm_min", "import time; s='02:40'", number=100000)/100000
&gt;&gt;&gt; strp
9.0362770557403569e-05
&gt;&gt;&gt; strp/parsetime
10.019767557444432
</snippet></ROW><ROW><id>6810967</id><snippet>def f((a,b,c)):
    ...
</snippet></ROW><ROW><id>6810967</id><snippet>def f(a_b_c):
    a,b,c = a_b_c
    ...
</snippet></ROW><ROW><id>6810967</id><snippet>def f(a):
    b,c,d = a
    ...
</snippet></ROW><ROW><id>6811020</id><snippet>inspect</snippet></ROW><ROW><id>6811020</id><snippet>import inspect

def PrintFrame():
  callerframerecord = inspect.stack()[1]    # 0 represents this line
                                            # 1 represents line at caller
  frame = callerframerecord[0]
  info = inspect.getframeinfo(frame)
  print info.filename                       # __FILE__     -&gt; Test.py
  print info.function                       # __FUNCTION__ -&gt; Main
  print info.lineno                         # __LINE__     -&gt; 13

def Main():
  PrintFrame()                              # for this line

Main()
</snippet></ROW><ROW><id>6811020</id><snippet>print __file__
</snippet></ROW><ROW><id>6811241</id><snippet>numpy.std(rolling_window(observations, n), 1)</snippet></ROW><ROW><id>6811440</id><snippet>from web.template import render</snippet></ROW><ROW><id>6811451</id><snippet>timeit</snippet></ROW><ROW><id>6811451</id><snippet>ipython</snippet></ROW><ROW><id>6811451</id><snippet>A = array(range(10))
Noff = 2
wrapper_access = lambda i: A[i - Noff]
print wrapper_access(2)   #0
print wrapper_access(11)  #9
print wrapper_access(1)   #9 = A[-1]
timeit wrapper_access(5)
</snippet></ROW><ROW><id>6811451</id><snippet>10000000 loops, best of 3: 193 ns per loop</snippet></ROW><ROW><id>6811501</id><snippet># do this once
import re
bad_strings = ['1080p', '720p'] # etc
regex = '|'.join(re.escape(x) for x in bad_strings)
subber = re.compile(regex, re.IGNORECASE).sub

# do this once for each name
name = name.replace(ext[1], '')
# OR maybe better: name = ext[0] # see below
cleanFileList.append(subber('', name))
</snippet></ROW><ROW><id>6811695</id><snippet>packages = find_packages()</snippet></ROW><ROW><id>6811695</id><snippet>find_packages()</snippet></ROW><ROW><id>6811695</id><snippet>setup.py</snippet></ROW><ROW><id>6811700</id><snippet>import multiprocessing, itertools

def stringForInt(args):
    num, charset, length = args ## hack hack hack
    setlen = len(charset)
    s = []
    s.append(charset[num % setlen])
    for n in xrange(1, length):
        num //= setlen
        s.append(charset[num % setlen])
    return ''.join(s)

def bruteforce(charset, length, mapper, raw=False):
    if not raw:
        charset = sorted(set(charset))
    return mapper(stringForInt, ((n,charset,length) for n in xrange(len(charset)**length)))

if __name__ == '__main__':
    import time, sys
    if len(sys.argv) == 1 or sys.argv[1] == 'map':
        mapper = map
    else:
        p = multiprocessing.Pool()
        pfunc = {'pmap':p.map,
                 'imap':p.imap,
                 'imapu':p.imap_unordered}[sys.argv[1]]
        mapper = lambda f, i: pfunc(f, i, chunksize=5)
    o = bruteforce('abcdefghijk',6,mapper)
    if not isinstance(o, list):
        list(o)
</snippet></ROW><ROW><id>6811700</id><snippet>multiprocessing</snippet></ROW><ROW><id>6811700</id><snippet>multiprocessing.Value</snippet></ROW><ROW><id>6811700</id><snippet>multiprocessing.Manager</snippet></ROW><ROW><id>6811700</id><snippet>$ for x in map pmap imap imapu ; do time python mp.py $x; done

real    0m9.351s
user    0m9.253s
sys     0m0.096s

real    0m10.523s
user    0m20.753s
sys     0m0.176s

real    0m4.081s
user    0m13.797s
sys     0m0.276s

real    0m4.215s
user    0m14.013s
sys     0m0.236s
</snippet></ROW><ROW><id>6811702</id><snippet>user_key = db.Key.from_path('UserInfo', user_id)
</snippet></ROW><ROW><id>6811702</id><snippet>db.GqlQuery("SELECT * FROM List WHERE user_key = :1", user_key)
</snippet></ROW><ROW><id>6811702</id><snippet>List.all().filter("user_key =", user_key)
</snippet></ROW><ROW><id>6811772</id><snippet>.tar.gz</snippet></ROW><ROW><id>6811772</id><snippet>.zip</snippet></ROW><ROW><id>6811772</id><snippet>-file</snippet></ROW><ROW><id>6811772</id><snippet>zipimport</snippet></ROW><ROW><id>6811921</id><snippet>import os
import sys
import imp
import contextlib

@contextlib.contextmanager
def preserve_value(namespace, name):
    """ A context manager to preserve, then restore, the specified binding.

        :param namespace: The namespace object (e.g. a class or dict)
            containing the name binding.
        :param name: The name of the binding to be preserved.
        :yield: None.

        When the context manager is entered, the current value bound to `name`
        in `namespace` is saved. When the context manager is exited, the
        binding is re-established to the saved value.

        """
    saved_value = getattr(namespace, name)
    yield
    setattr(namespace, name, saved_value)


def make_module_from_file(module_name, module_filepath):
    """ Make a new module object from the source code in specified file.

        :param module_name: The name of the resulting module object.
        :param module_filepath: The filesystem path to open for
            reading the module's Python source.
        :return: The module object.

        The Python import mechanism is not used. No cached bytecode
        file is created, and no entry is placed in `sys.modules`.

        """
    py_source_open_mode = 'U'
    py_source_description = (b".py", py_source_open_mode, imp.PY_SOURCE)

    with open(module_filepath, py_source_open_mode) as module_file:
        with preserve_value(sys, 'dont_write_bytecode'):
            sys.dont_write_bytecode = True
            module = imp.load_module(
                    module_name, module_file, module_filepath,
                    py_source_description)

    return module


def import_program_as_module(program_filepath):
    """ Import module into `namespace` from program file `program_filepath`.

        :param program_filepath: The full filesystem path to the program.
            This name will be used for both the source file to read, and
            the resulting module name.
        :return: The module object.

        The module object will also be added to `sys.modules`.

        """
    module_name = os.path.basename(program_filepath)

    module = make_module_from_file(module_name, program_filename)
    sys.modules[module_name] = module

    return module
</snippet></ROW><ROW><id>6812069</id><snippet>bytes</snippet></ROW><ROW><id>6812069</id><snippet>text.decode('utf-8')</snippet></ROW><ROW><id>6812069</id><snippet>unicode</snippet></ROW><ROW><id>6812069</id><snippet>str</snippet></ROW><ROW><id>6812069</id><snippet>str(text, 'utf-8')
</snippet></ROW><ROW><id>6812147</id><snippet>pyuic</snippet></ROW><ROW><id>6812147</id><snippet>myaction</snippet></ROW><ROW><id>6812147</id><snippet>myaction_slot</snippet></ROW><ROW><id>6812147</id><snippet>import sys
from PyQt4 import QtCore, QtGui

# import pyuic generated user interface file
from ui_mainwindow import Ui_MainWindow

class MyMainWindow(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MyMainWindow, self).__init__(parent)
        self.setupUi(self)
        # connect myaction_logic to myaction.toggled signal
        self.myaction.toggled.connect(self.myaction_slot)

    def myaction_slot(self):
        pass # do something here

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = MyMainWindow()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>6812785</id><snippet>import shutil
# SKIPPED
def POST(self):
    form = web.input(image={})
    with open('path/to/image.jpg', 'wb') as saved:
        shutil.copyfileobj(form['image'].file, saved)
</snippet></ROW><ROW><id>6812809</id><snippet>import</snippet></ROW><ROW><id>6812809</id><snippet>import</snippet></ROW><ROW><id>6812809</id><snippet>foo</snippet></ROW><ROW><id>6812809</id><snippet>foo.bar</snippet></ROW><ROW><id>6812809</id><snippet>foo.bar</snippet></ROW><ROW><id>6812809</id><snippet>foo</snippet></ROW><ROW><id>6812951</id><snippet>BlogPost('one')</snippet></ROW><ROW><id>6813357</id><snippet>error = "I waited the answer for the following command %s but I received % command from %s " % self.lastCommand, mess['commandName'], self.clientname
                                                                         ^
</snippet></ROW><ROW><id>6813357</id><snippet>s</snippet></ROW><ROW><id>6813357</id><snippet>error = "I waited the answer for the following command %s but I received %s command from %s " % self.lastCommand, mess['commandName'], self.clientname
                                                                         ^
</snippet></ROW><ROW><id>6813357</id><snippet>mess['commandName']</snippet></ROW><ROW><id>6813358</id><snippet>&lt;Control-Key-b&gt;</snippet></ROW><ROW><id>6813358</id><snippet>'break'</snippet></ROW><ROW><id>6813452</id><snippet>easy_install</snippet></ROW><ROW><id>6813452</id><snippet>.pth</snippet></ROW><ROW><id>6813452</id><snippet>.egg</snippet></ROW><ROW><id>6813452</id><snippet>sys.path</snippet></ROW><ROW><id>6813452</id><snippet>.pth</snippet></ROW><ROW><id>6813452</id><snippet>site</snippet></ROW><ROW><id>6813452</id><snippet>sys.prefix</snippet></ROW><ROW><id>6813452</id><snippet>sys.exec_prefix</snippet></ROW><ROW><id>6813452</id><snippet>/usr/lib/pythonXX/site-packages</snippet></ROW><ROW><id>6813452</id><snippet>site</snippet></ROW><ROW><id>6813452</id><snippet>.pth</snippet></ROW><ROW><id>6813452</id><snippet>.egg</snippet></ROW><ROW><id>6813452</id><snippet>site</snippet></ROW><ROW><id>6813574</id><snippet># coding=utf8
# -*- coding: utf8 -*-
# vim: set fileencoding=utf8 :
</snippet></ROW><ROW><id>6813809</id><snippet>import MplayerCtrl as mpc</snippet></ROW><ROW><id>6813857</id><snippet>from . import abc
</snippet></ROW><ROW><id>6814273</id><snippet>clean</snippet></ROW><ROW><id>6814273</id><snippet>def clean(self):
    cleaned_data = self.cleaned_data
    user = User.objects.filter(email=cleaned_data['email'])
    if user:
        cleaned_data['username'] = user.username
    else:
        raise forms.ValidationError(_("Incorrect email or password."))
    return cleaned_data
</snippet></ROW><ROW><id>6814382</id><snippet>sorted(t)</snippet></ROW><ROW><id>6814382</id><snippet>key</snippet></ROW><ROW><id>6814382</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>6814382</id><snippet>import operator
...
for item in sorted(t, key=operator.itemgetter(0)):
    ...
</snippet></ROW><ROW><id>6814382</id><snippet>t.sort(key=operator.itemgetter(0))</snippet></ROW><ROW><id>6814768</id><snippet>lst = [[] for _ in xrange(2)]</snippet></ROW><ROW><id>6814768</id><snippet>[[], []]</snippet></ROW><ROW><id>6815009</id><snippet>python</snippet></ROW><ROW><id>6815009</id><snippet>python</snippet></ROW><ROW><id>6815009</id><snippet>which python</snippet></ROW><ROW><id>6815009</id><snippet>PATH</snippet></ROW><ROW><id>6815009</id><snippet>~/.bashrc</snippet></ROW><ROW><id>6815009</id><snippet>setuptools</snippet></ROW><ROW><id>6815059</id><snippet>JSON.stringify(my_array)
</snippet></ROW><ROW><id>6815059</id><snippet>import json
json.loads(str)
</snippet></ROW><ROW><id>6815224</id><snippet>print list.__doc__
</snippet></ROW><ROW><id>6815328</id><snippet>self.content = re.sub(r'\[\[(.+)\]\]', lambda m: ADResource.objects.all().get(alias=m.group(1)).src.url, self.content)
</snippet></ROW><ROW><id>6815468</id><snippet>class ConnectingPanel(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.control = wx.TextCtrl(self, style=wx.TE_MULTILINE, pos=(-2, -2), size=(387, 267))
        self.control.SetForegroundColour((34,139,34))
        self.control.SetBackgroundColour((0,0,0))
        self.control.Disable()

        wx.CallAfter(self.start_connection)

    def start_connection(self):
        self.control.AppendText("Connecting to device")
        self.device = Connection(#info goes here) 
        self.control.AppendText("Connected to device")
</snippet></ROW><ROW><id>6815701</id><snippet>main_namespace["hero"].attr("create")</snippet></ROW><ROW><id>6815701</id><snippet>.</snippet></ROW><ROW><id>6815701</id><snippet>hero.create</snippet></ROW><ROW><id>6815701</id><snippet>getattr(hero, 'create')</snippet></ROW><ROW><id>6815701</id><snippet>boost::python::import</snippet></ROW><ROW><id>6815701</id><snippet>exec</snippet></ROW><ROW><id>6815809</id><snippet>str</snippet></ROW><ROW><id>6815809</id><snippet>bytes</snippet></ROW><ROW><id>6815809</id><snippet>rv = xmlrpc.pastes.newPaste(language, code.decode(), None, filename, mimetype, private)
</snippet></ROW><ROW><id>6816004</id><snippet>&lt;input type="submit" value="Submit" name="Submit1" /&gt;
&lt;input type="submit" value="Submit" name="Submit2" /&gt;
</snippet></ROW><ROW><id>6816004</id><snippet>form = cgi.FieldStorage()

if "Submit1" in form:
    button = 1
elif "Submit2" in form:
    button = 2
else:
    print "Couldn't determine which button was pressed."
</snippet></ROW><ROW><id>6816004</id><snippet>dict</snippet></ROW><ROW><id>6816191</id><snippet>urlparse.urljoin(base, url[, allow_fragments])
</snippet></ROW><ROW><id>6816459</id><snippet>raw = open(filename).read()
docs = []
for raw_doc in raw.split('---'):
    try:
        docs.append(yaml.load(raw_doc))
    except SyntaxError:
        docs.append(raw_doc)
</snippet></ROW><ROW><id>6816605</id><snippet>PyImport_ImportModule</snippet></ROW><ROW><id>6816605</id><snippet>__main__</snippet></ROW><ROW><id>6816605</id><snippet>sys.modules</snippet></ROW><ROW><id>6816711</id><snippet>class Super(object):
    def __init__(self):
        print 'init super'
        if self.__class__ == Super:
            self.load()
    def load(self):
        print 'load super'

class Sub(Super):
    def __init__(self):
        # always do super first in init
        super(Sub, self).__init__()
        print 'init sub'
        self.load()
    def load(self):
        # load is essentially an extension of init
        # so you still need to call super first
        super(Sub, self).load()
        print 'load sub'

sub = Sub()
</snippet></ROW><ROW><id>6816711</id><snippet>if</snippet></ROW><ROW><id>6816711</id><snippet>Sub()</snippet></ROW><ROW><id>6816711</id><snippet>Sub.__init__</snippet></ROW><ROW><id>6816711</id><snippet>Super.__init__</snippet></ROW><ROW><id>6816711</id><snippet>__init__</snippet></ROW><ROW><id>6816711</id><snippet>Sub</snippet></ROW><ROW><id>6816711</id><snippet>Sub.__init__</snippet></ROW><ROW><id>6816711</id><snippet>Sub.load</snippet></ROW><ROW><id>6816711</id><snippet>Super.load</snippet></ROW><ROW><id>6816711</id><snippet>sub = Sub()
sub.load()
sup = Super()
sup.load()
</snippet></ROW><ROW><id>6816711</id><snippet>__init__</snippet></ROW><ROW><id>6816711</id><snippet>load</snippet></ROW><ROW><id>6816711</id><snippet>load</snippet></ROW><ROW><id>6816711</id><snippet>__init__</snippet></ROW><ROW><id>6816711</id><snippet>class Loader(type):
    def __new__(cls, name, bases, attrs):
        if attrs.get('__init__'):
            attrs['_init'] = attrs['__init__']
            del attrs['__init__']
        if attrs.get('_init_'):
            attrs['__init__'] = lambda self: self._init_()
            attrs['_init'] = lambda self: None
        return super(Loader, cls).__new__(cls, name, bases, attrs)

class Super(object):
    __metaclass__ = Loader
    def _init_(self):
        print 'init super'
        self._init()
        self.load()

    def load(self):
        print 'load super'

class Sub(Super):
    def __init__(self):
        print 'init sub'

    def load(self):
        super(Sub, self).load()
        print 'load sub'


sub = Sub()
sup = Super()
</snippet></ROW><ROW><id>6816711</id><snippet>Sub.__init__</snippet></ROW><ROW><id>6816711</id><snippet>super().__init__()</snippet></ROW><ROW><id>6816799</id><snippet>shlex.split</snippet></ROW><ROW><id>6816799</id><snippet>rsync_options.split()</snippet></ROW><ROW><id>6816799</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('-axh --delete --delete-excluded')
['-axh', '--delete', '--delete-excluded']
</snippet></ROW><ROW><id>6816799</id><snippet>insert</snippet></ROW><ROW><id>6816799</id><snippet>append</snippet></ROW><ROW><id>6816799</id><snippet>extend</snippet></ROW><ROW><id>6816799</id><snippet>&gt;&gt;&gt; rsync_options = '-axh --delete --delete-excluded'
&gt;&gt;&gt; rsync_args = ['rsync'] + shlex.split(rsync_options) + ['/tmp/1', '/tmp/2']
&gt;&gt;&gt; rsync_args
['rsync', '-axh', '--delete', '--delete-excluded', '/tmp/1', '/tmp/2']
</snippet></ROW><ROW><id>6816799</id><snippet>&gt;&gt;&gt; rsync_args = shlex.split(rsync_options)
&gt;&gt;&gt; rsync_args.extend(['/tmp/1', '/tmp/2'])
&gt;&gt;&gt; rsync_args.insert(0, 'rsync')
&gt;&gt;&gt; rsync_args
['rsync', '-axh', '--delete', '--delete-excluded', '/tmp/1', '/tmp/2']
</snippet></ROW><ROW><id>6817255</id><snippet>from myClasses import MyClass
import inspect

source = inspect.getsource(MyClass)
print source

#class MyClass(object):
#    pass
</snippet></ROW><ROW><id>6817663</id><snippet>except</snippet></ROW><ROW><id>6817663</id><snippet>try:
    something()
except:
    fallback()
</snippet></ROW><ROW><id>6817663</id><snippet>try:
    something()
except KeyboardInterrupt:
    return
except:
    fallback()
</snippet></ROW><ROW><id>6817663</id><snippet>traceback.format_exc()</snippet></ROW><ROW><id>6817663</id><snippet>traceback.print_exc()</snippet></ROW><ROW><id>6817820</id><snippet>__del__</snippet></ROW><ROW><id>6817820</id><snippet>gc</snippet></ROW><ROW><id>6817820</id><snippet>gc.garbage</snippet></ROW><ROW><id>6817820</id><snippet>gc.get_objects</snippet></ROW><ROW><id>6817820</id><snippet>__class__</snippet></ROW><ROW><id>6817943</id><snippet>NewList = [ListMultiply("/listfile/"+str(e)) for e in OldList]
</snippet></ROW><ROW><id>6817943</id><snippet>"/listfile/"</snippet></ROW><ROW><id>6817943</id><snippet>ListMultiply()</snippet></ROW><ROW><id>6818177</id><snippet>os.system</snippet></ROW><ROW><id>6818177</id><snippet>subprocess</snippet></ROW><ROW><id>6818177</id><snippet>pdflatex</snippet></ROW><ROW><id>6818177</id><snippet>-interaction</snippet></ROW><ROW><id>6818177</id><snippet>batchmode</snippet></ROW><ROW><id>6818177</id><snippet>nonstopmode</snippet></ROW><ROW><id>6818483</id><snippet>def transform_date(date_string, tzinfo):
    fmt = '%Y-%m-%d'
    date = datetime.strptime(date_string, fmt).replace(tzinfo=tzinfo)
    return date
</snippet></ROW><ROW><id>6818556</id><snippet>EOF</snippet></ROW><ROW><id>6818556</id><snippet>except EOFError</snippet></ROW><ROW><id>6818556</id><snippet># Internal: return one line from the server, stripping CRLF.
# Raise EOFError if the connection is closed
182     def getline(self):
183         line = self.file.readline()
184         if self.debugging &gt; 1:
185             print '*get*', self.sanitize(line)
186         if not line: raise EOFError
187         if line[-2:] == CRLF: line = line[:-2]
188         elif line[-1:] in CRLF: line = line[:-1]
189         return line
</snippet></ROW><ROW><id>6818556</id><snippet>readline()</snippet></ROW><ROW><id>6818556</id><snippet>readline()</snippet></ROW><ROW><id>6818556</id><snippet>\n</snippet></ROW><ROW><id>6818556</id><snippet>\r</snippet></ROW><ROW><id>6818556</id><snippet>\r\n</snippet></ROW><ROW><id>6818556</id><snippet>readline()</snippet></ROW><ROW><id>6818556</id><snippet>readline()</snippet></ROW><ROW><id>6818556</id><snippet>\n</snippet></ROW><ROW><id>6818556</id><snippet>\r</snippet></ROW><ROW><id>6818556</id><snippet>\n\r</snippet></ROW><ROW><id>6818636</id><snippet>round</snippet></ROW><ROW><id>6818636</id><snippet>&gt;&gt;&gt; round(437590/1000.0)
438.0
</snippet></ROW><ROW><id>6819197</id><snippet> some_var = 'AAAH8192375948'[:5]
 print some_var # AAAH8
</snippet></ROW><ROW><id>6819197</id><snippet>[start:end:increment]</snippet></ROW><ROW><id>6819197</id><snippet> sequence = [1,2,3,4,5,6,7,8,9,10] # range(1,11)

 sequence[0:5:1] == sequence[0:5] == sequence[:5] 
 # [1, 2, 3, 4, 5]

 sequence[1:len(sequence):1] == sequence[1:len(sequence)] == sequence[1:]
 # [2, 3, 4, 5, 6, 7, 8, 9, 10]

 sequence[0:len(sequence):2] == sequence[:len(sequence):2] == sequence[::2]
 # [1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>6819197</id><snippet>strip</snippet></ROW><ROW><id>6819680</id><snippet>copy</snippet></ROW><ROW><id>6819680</id><snippet>def _copy_immutable(x):
    return x
for t in (type(None), int, long, float, bool, str, tuple,
          frozenset, type, xrange, types.ClassType,
          types.BuiltinFunctionType, type(Ellipsis),
          types.FunctionType, weakref.ref):
    d[t] = _copy_immutable
for name in ("ComplexType", "UnicodeType", "CodeType"):
    t = getattr(types, name, None)
    if t is not None:
        d[t] = _copy_immutable
</snippet></ROW><ROW><id>6819680</id><snippet>deepcopy</snippet></ROW><ROW><id>6819680</id><snippet>_deepcopy_tuple</snippet></ROW><ROW><id>6819680</id><snippet>for i in range(len(x)):
    if x[i] is not y[i]:
        y = tuple(y)
        break
else:
    y = x
</snippet></ROW><ROW><id>6819770</id><snippet>.pdf</snippet></ROW><ROW><id>6819770</id><snippet>.pdf</snippet></ROW><ROW><id>6819810</id><snippet>related_name</snippet></ROW><ROW><id>6819810</id><snippet>class Topic(models.Model):
    master_topic = models.ForeignKey('self',
                     null=True,
                     blank=True,
                     related_name="sub_topics")
</snippet></ROW><ROW><id>6819810</id><snippet>apple = Topic.objects.filter(tag='Apple')
sub_topics = apple.sub_topics.all() ## Gets all sub_topics.
</snippet></ROW><ROW><id>6820038</id><snippet>if line == "whatever":
   # do stuff here, return, whatever...
   request.ws_stream.send_message(line)
else:
   # do something else....
</snippet></ROW><ROW><id>6820038</id><snippet> import time
 time.sleep(seconds)
</snippet></ROW><ROW><id>6820198</id><snippet>Lib/platform.py</snippet></ROW><ROW><id>6820198</id><snippet>winver = GetVersionEx()
maj,min,buildno,plat,csd = winver
version = '%i.%i.%i' % (maj,min,buildno &amp; 0xFFFF)
if hasattr(winver, "service_pack"):
    if winver.service_pack != "":
        csd = 'SP%s' % winver.service_pack_major
else:
    if csd[:13] == 'Service Pack ':
        csd = 'SP' + csd[13:]

if plat == VER_PLATFORM_WIN32_WINDOWS:
    regkey = 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion'
    # Try to guess the release name
    if maj == 4:
        if min == 0:
            release = '95'
        elif min == 10:
            release = '98'
        elif min == 90:
            release = 'Me'
        else:
            release = 'postMe'
    elif maj == 5:
        release = '2000'

elif plat == VER_PLATFORM_WIN32_NT:
    regkey = 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'
    if maj &lt;= 4:
        release = 'NT'
    elif maj == 5:
        if min == 0:
            release = '2000'
        elif min == 1:
            release = 'XP'
        elif min == 2:
            release = '2003Server'
        else:
            release = 'post2003'
    elif maj == 6:
        if hasattr(winver, "product_type"):
            product_type = winver.product_type
        else:
            product_type = VER_NT_WORKSTATION
            # Without an OSVERSIONINFOEX capable sys.getwindowsversion(),
            # or help from the registry, we cannot properly identify
            # non-workstation versions.
            try:
                key = RegOpenKeyEx(HKEY_LOCAL_MACHINE, regkey)
                name, type = RegQueryValueEx(key, "ProductName")
                # Discard any type that isn't REG_SZ
                if type == REG_SZ and name.find("Server") != -1:
                    product_type = VER_NT_SERVER
            except WindowsError:
                # Use default of VER_NT_WORKSTATION
                pass

        if min == 0:
            if product_type == VER_NT_WORKSTATION:
                release = 'Vista'
            else:
                release = '2008Server'
        elif min == 1:
            if product_type == VER_NT_WORKSTATION:
                release = '7'
            else:
                release = '2008ServerR2'
        else:
            release = 'post2008Server'

else:
    if not release:
        # E.g. Win3.1 with win32s
        release = '%i.%i' % (maj,min)
    return release,version,csd,ptype
</snippet></ROW><ROW><id>6820198</id><snippet>release</snippet></ROW><ROW><id>6820224</id><snippet>os</snippet></ROW><ROW><id>6820224</id><snippet>.</snippet></ROW><ROW><id>6820224</id><snippet>.</snippet></ROW><ROW><id>6820224</id><snippet>os</snippet></ROW><ROW><id>6820408</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>6820408</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>6820442</id><snippet>tarfile</snippet></ROW><ROW><id>6820442</id><snippet>from tarfile import TarFile

tar = TarFile("the_tar.tar")
tar.extractall()
</snippet></ROW><ROW><id>6820974</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6820974</id><snippet>wait</snippet></ROW><ROW><id>6820974</id><snippet>communicate</snippet></ROW><ROW><id>6820974</id><snippet>start</snippet></ROW><ROW><id>6820974</id><snippet>shell = True</snippet></ROW><ROW><id>6820991</id><snippet>[GCC 4.2.1 (Apple Inc. build 5646)]</snippet></ROW><ROW><id>6820991</id><snippet># Apple-supplied Python 2.6 in OS X 10.6
$ /usr/bin/python
Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 

# python.org Python 2.7.2 (also built with newer gcc)
$ /usr/local/bin/python
Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6820991</id><snippet>/usr/bin</snippet></ROW><ROW><id>6820991</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>6820991</id><snippet>$ ls -l /usr/local/bin/python
lrwxr-xr-x  1 root  wheel  68 Jul  5 10:05 /usr/local/bin/python@ -&gt; ../../../Library/Frameworks/Python.framework/Versions/2.7/bin/python
</snippet></ROW><ROW><id>6821193</id><snippet>&gt;&gt;&gt; x = range(1,10)
&gt;&gt;&gt; y = range(8,20)
&gt;&gt;&gt; xs = set(x)
&gt;&gt;&gt; ys = set(y)
&gt;&gt;&gt; xs.intersection(ys)
set([8, 9])
</snippet></ROW><ROW><id>6821465</id><snippet>from timeit import timeit

setup = """
from random import sample, shuffle
a = range(100000)
b = sample(a, 1000)
a.reverse()
"""

forin = setup + """
def forin():
    # a = set(a)
    for obj in b:
        if obj in a:
            return obj
"""

setin = setup + """
def setin():
    return tuple(set(a) &amp; set(b))[0]
"""

print timeit("forin()", forin, number = 100)
print timeit("setin()", setin, number = 100)
</snippet></ROW><ROW><id>6821465</id><snippet>&gt;&gt;&gt;
0.0929054012768
0.637904308732
&gt;&gt;&gt;
0.160845057616
1.08630760484
&gt;&gt;&gt;
0.322059185123
1.10931801261
&gt;&gt;&gt;
0.0758695262169
1.08920981403
&gt;&gt;&gt;
0.247866360526
1.07724461708
&gt;&gt;&gt;
0.301856152688
1.07903130641
</snippet></ROW><ROW><id>6821465</id><snippet>&gt;&gt;&gt;
0.000413064976328
0.152831597075
&gt;&gt;&gt;
0.00402408388788
1.49093627898
&gt;&gt;&gt;
0.00394538156695
1.51841512101
&gt;&gt;&gt;
0.00397715579584
1.52581949403
&gt;&gt;&gt;
0.00421472926155
1.53156769646
</snippet></ROW><ROW><id>6821467</id><snippet>cmd.exe /k "&lt;my python path&gt;\Scripts\ipython.py -p sh"
</snippet></ROW><ROW><id>6821529</id><snippet>multiprocessing</snippet></ROW><ROW><id>6821750</id><snippet>gtk.TreeView.set_model</snippet></ROW><ROW><id>6821827</id><snippet>*</snippet></ROW><ROW><id>6821827</id><snippet>SELECT a.col1 AS acol1,
       a.col2 AS acol2,
       b.col1 AS bcol1,
       b.col2 AS bcol2
    FROM a
        INNER JOIN b
            ON ...
    WHERE...
</snippet></ROW><ROW><id>6821965</id><snippet>cal.setfirstweekday(6)
</snippet></ROW><ROW><id>6821965</id><snippet>monthdays = ...
</snippet></ROW><ROW><id>6822505</id><snippet>term-mode</snippet></ROW><ROW><id>6822684</id><snippet>simulants[:,0][simulants[:,4]==5]=np.array([1,2])
</snippet></ROW><ROW><id>6822684</id><snippet>simulants[:,0]</snippet></ROW><ROW><id>6822684</id><snippet>simulants[simulants[:,4]==5]</snippet></ROW><ROW><id>6822684</id><snippet>simulants[:,0]</snippet></ROW><ROW><id>6822684</id><snippet>simulants[simulants[:,4]==5]</snippet></ROW><ROW><id>6822684</id><snippet>simulants[simulants[:,4]==5, 0] = np.array([1,2]
</snippet></ROW><ROW><id>6822773</id><snippet>itertools</snippet></ROW><ROW><id>6822773</id><snippet>from itertools import islice

def window(seq, n=2):
    "Returns a sliding window (of width n) over data from the iterable"
    "   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
    it = iter(seq)
    result = tuple(islice(it, n))
    if len(result) == n:
        yield result    
    for elem in it:
        result = result[1:] + (elem,)
        yield result
</snippet></ROW><ROW><id>6822773</id><snippet>itertools</snippet></ROW><ROW><id>6823259</id><snippet>=</snippet></ROW><ROW><id>6823259</id><snippet>!</snippet></ROW><ROW><id>6823259</id><snippet>!</snippet></ROW><ROW><id>6823259</id><snippet>@</snippet></ROW><ROW><id>6823259</id><snippet>I</snippet></ROW><ROW><id>6823259</id><snippet>L</snippet></ROW><ROW><id>6824389</id><snippet>reshape</snippet></ROW><ROW><id>6824389</id><snippet>&gt;&gt;&gt; def flat_for(a, f):
...     a = a.reshape(-1)
...     for i, v in enumerate(a):
...         a[i] = f(v)
... 
&gt;&gt;&gt; a = numpy.arange(25).reshape(5, 5)
&gt;&gt;&gt; flat_for(a, lambda x: x + 5)
&gt;&gt;&gt; a

array([[ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24],
       [25, 26, 27, 28, 29]])
</snippet></ROW><ROW><id>6824389</id><snippet>&gt;&gt;&gt; a = numpy.arange(2500).reshape(50, 50)
&gt;&gt;&gt; f = lambda x: x + 5
&gt;&gt;&gt; %timeit flat_for(a, f)
1000 loops, best of 3: 1.86 ms per loop
</snippet></ROW><ROW><id>6824389</id><snippet>&gt;&gt;&gt; a = numpy.arange(2500).reshape(50, 50)
&gt;&gt;&gt; def nested_for(a, f):
...     for i in range(len(a)):
...         for j in range(len(a[0])):
...             a[i][j] = f(a[i][j])
... 
&gt;&gt;&gt; %timeit nested_for(a, f)
100 loops, best of 3: 3.79 ms per loop
</snippet></ROW><ROW><id>6824389</id><snippet>&gt;&gt;&gt; a = numpy.arange(2500).reshape(50, 50)
&gt;&gt;&gt; g = numpy.vectorize(lambda x: x + 5)
&gt;&gt;&gt; %timeit g(a)
1000 loops, best of 3: 584 us per loop
</snippet></ROW><ROW><id>6824389</id><snippet>dim</snippet></ROW><ROW><id>6824389</id><snippet>vectorize</snippet></ROW><ROW><id>6824389</id><snippet>&gt;&gt;&gt; a = numpy.arange(2500).reshape(50, 50)
&gt;&gt;&gt; %timeit a + 5
100000 loops, best of 3: 4.66 us per loop
</snippet></ROW><ROW><id>6824389</id><snippet>numpy</snippet></ROW><ROW><id>6824389</id><snippet>+=</snippet></ROW><ROW><id>6824389</id><snippet>a</snippet></ROW><ROW><id>6824389</id><snippet>vectorize</snippet></ROW><ROW><id>6824522</id><snippet>from datetime import datetime
from pytz import timezone

server_timezone = timezone('Europe/Moscow')

server_timezone.localize(datetime(2011, 1, 1)).isoformat()
&gt;&gt;&gt; '2011-01-01T00:00:00+03:00'

server_timezone.localize(datetime(2011, 7, 1)).isoformat()
&gt;&gt;&gt; '2011-07-01T00:00:00+04:00'
</snippet></ROW><ROW><id>6824632</id><snippet>REMOTE_ADDR</snippet></ROW><ROW><id>6824632</id><snippet>httpd = simple_server.WSGIServer(
    ('localhost', 8000),
    simple_server.WSGIRequestHandler,
)

def app(environ, start_response):
    # environ['REMOTE_ADDR'] is what you're looking for!
    pass

httpd.set_app(app)
</snippet></ROW><ROW><id>6824752</id><snippet>fileName</snippet></ROW><ROW><id>6824752</id><snippet>file</snippet></ROW><ROW><id>6824752</id><snippet>os.path.split</snippet></ROW><ROW><id>6824752</id><snippet>namedtuple</snippet></ROW><ROW><id>6824752</id><snippet>.path</snippet></ROW><ROW><id>6824752</id><snippet>.size</snippet></ROW><ROW><id>6824752</id><snippet>from collections import namedtuple
# We define our data type like this:
fileData = namedtuple('fileData', ('name', 'path', 'size'))

# Now we can create an instance of it:

def pathToData(pathAndName):
    path, name = os.path.split(pathAndName)
    size = os.path.getsize(pathAndName)
    return fileData(name, path, size)

# Or a whole bunch at once, using a list comprehension:
def pathsToData(filePaths):
    return [pathToData(p) for p in filePaths]
    # There is no need to do all the 'append' logic yourself.
</snippet></ROW><ROW><id>6824752</id><snippet>os.walk</snippet></ROW><ROW><id>6824868</id><snippet>random.getrandbits(1)</snippet></ROW><ROW><id>6824868</id><snippet>bool(random.getrandbits(1))
</snippet></ROW><ROW><id>6824868</id><snippet>random.choice([True, False])</snippet></ROW><ROW><id>6824868</id><snippet>random.choice</snippet></ROW><ROW><id>6824868</id><snippet>$ python -m timeit -s "import random" "random.choice([True, False])"
1000000 loops, best of 3: 0.904 usec per loop
$ python -m timeit -s "import random" "random.choice((True, False))" 
1000000 loops, best of 3: 0.846 usec per loop
$ python -m timeit -s "import random" "random.getrandbits(1)"
1000000 loops, best of 3: 0.286 usec per loop
$ python -m timeit -s "import random" "bool(random.getrandbits(1))"
1000000 loops, best of 3: 0.441 usec per loop
$ python -m timeit -s "import random" "not random.getrandbits(1)"
1000000 loops, best of 3: 0.308 usec per loop
$ python -m timeit -s "from random import getrandbits" "not getrandbits(1)"
1000000 loops, best of 3: 0.262 usec per loop  # not takes about 20us of this
</snippet></ROW><ROW><id>6825026</id><snippet>static</snippet></ROW><ROW><id>6825026</id><snippet>static</snippet></ROW><ROW><id>6825026</id><snippet>attribute = value</snippet></ROW><ROW><id>6825026</id><snippet>constant</snippet></ROW><ROW><id>6825026</id><snippet>UPPERCASE_IDENTIFIERS</snippet></ROW><ROW><id>6825026</id><snippet>"add"</snippet></ROW><ROW><id>6825026</id><snippet>"subtract"</snippet></ROW><ROW><id>6825026</id><snippet>"multiply"</snippet></ROW><ROW><id>6825026</id><snippet>"divide"</snippet></ROW><ROW><id>6825026</id><snippet>None</snippet></ROW><ROW><id>6825026</id><snippet>if (operator.equals("+"))
    op = Expression.Operations.Add;
</snippet></ROW><ROW><id>6825026</id><snippet>if operator == "+":
    op = "add"
</snippet></ROW><ROW><id>6825026</id><snippet>if (op == Expression.Operations.Add)
    value = a + b;
</snippet></ROW><ROW><id>6825026</id><snippet>if op == "add"
    value = a + b
</snippet></ROW><ROW><id>6825540</id><snippet>text.setOnKeyListener(new EditText.OnKeyListener()
{
    public boolean onKey(View v, int keyCode, KeyEvent event)
    {
        // Put your code here
        return false;
    }
});
</snippet></ROW><ROW><id>6826099</id><snippet>try:
    myfile = open("myfile.csv", "r+") # or "a+", whatever you need
except IOError:
    print "Could not open file! Please close Excel!"

with myfile:
    do_stuff()
</snippet></ROW><ROW><id>6826511</id><snippet>In [1]: import json

In [2]: json.loads('[{"name":"sam"}]')
Out[2]: [{u'name': u'sam'}]
</snippet></ROW><ROW><id>6826532</id><snippet>.xlsx</snippet></ROW><ROW><id>6827095</id><snippet>\x08</snippet></ROW><ROW><id>6827095</id><snippet>backspace</snippet></ROW><ROW><id>6827095</id><snippet>s/.\\x08//
</snippet></ROW><ROW><id>6827095</id><snippet>\x08</snippet></ROW><ROW><id>6827095</id><snippet>\n</snippet></ROW><ROW><id>6827235</id><snippet>{}</snippet></ROW><ROW><id>6827235</id><snippet>data = {dict_key: value}
</snippet></ROW><ROW><id>6827235</id><snippet>data = dict({dict_key: value})
</snippet></ROW><ROW><id>6827235</id><snippet>data = dict()
data[dict_key] = value
</snippet></ROW><ROW><id>6827306</id><snippet>PyImport_AppendInittab()</snippet></ROW><ROW><id>6827306</id><snippet>PyImport_ExtendInittab()</snippet></ROW><ROW><id>6827306</id><snippet>PyImport_ExtendInittab()</snippet></ROW><ROW><id>6827306</id><snippet>Py_Initialize()</snippet></ROW><ROW><id>6827306</id><snippet>Py_Initialize()</snippet></ROW><ROW><id>6827306</id><snippet>PyImport_AppendInittab()</snippet></ROW><ROW><id>6827467</id><snippet>[::-1]</snippet></ROW><ROW><id>6827467</id><snippet>&gt;&gt;&gt; [0,1,0,1,1,0,1,1,1,0,1,1,1,1,0][::-1]
[0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0]
</snippet></ROW><ROW><id>6827467</id><snippet>[::-1]</snippet></ROW><ROW><id>6827467</id><snippet>from time import time
lst = [0,1,0,1,1,0,1,1,1,0,1,1,1,1,0]

s = time()
for i in xrange(5000000):
    a = lst[::-1]          # creates a reversed list
print time() -s

s = time()
for i in xrange(5000000):
    b = lst[:]             # copies the list
    b.reverse()            # reverses it
print time() -s
</snippet></ROW><ROW><id>6827467</id><snippet>2.44950699806
3.02573299408
</snippet></ROW><ROW><id>6828247</id><snippet>class ProjectFilter(logging.Filter):
    def __init__(self, func):
        self.func = func

    def filter(self, record):
        record.projectid = self.func()
        return True
</snippet></ROW><ROW><id>6828531</id><snippet>from time import time

class Thing():
    def __init__(self, var):
        self.SomeVar = enumerate(var)

    def HasDoneStuff(self):
        while True:
            id, newMessage = self.SomeVar.next()
            print newMessage
            print 'id==',id
            return id == 0

    def DoThis(self):
        print "DoThis' result"

    def DoThat(self):
        print 'DoingThat ;;;;;;;;;;;;;;;;;;;;;'

    def DoAnother(self):
        print 'DoAnother time',time()

    def SomeFunction(self):
        print 'Humpty Dumpty sat on a wall'
</snippet></ROW><ROW><id>6828531</id><snippet>from two import *


def Doodah(ss):
    return ss.split()

ADooDah = Doodah('once upon a time')

Something = Thing(ADooDah)


Something.DoThis()
Something.DoThat()
Something.DoAnother()

print '\n==========================\n'

while True:
    try:
        if Something.HasDoneStuff():
            Something.SomeFunction()
        print '---------------'
    except StopIteration:
        print "That's all folks"
        break
</snippet></ROW><ROW><id>6828601</id><snippet>def sendmail(args, recipient):
    if args.dryrun:
        print "Would send to " + recipient
    else:
        print "Sending to " + recipient
        smtp.sendmail(...)
</snippet></ROW><ROW><id>6828601</id><snippet>$ send_emails.py --dryrun
Would send to aa@aa.com
...
Would send to bb@bb.com

$ send_emails.py
Sending to aa@aa.com
Sending to bb@bb.com
</snippet></ROW><ROW><id>6828706</id><snippet>In [2]: main = ["pinecone", "treeleaf", "dishwasher"]

In [3]: secondary = ["pine", "washer", "unrelated", "flowerbed"]

In [4]: [x for x in main if any(x in y or y in x for y in secondary)]
Out[4]: [u'pinecone', u'dishwasher']
</snippet></ROW><ROW><id>6828882</id><snippet>&gt;&gt;&gt; d = {'key1': ['PTRG0097', 'CPOG0893', 'MMUG0444', 'BTAG0783'], 'key2': ['CPOG0893', 'MMUG0444', 'PPYG0539', 'BTAG0083']}
&gt;&gt;&gt; l1, l2 = d.values() # or this: d['key1'], d['key2']
&gt;&gt;&gt; l1
['PTRG0097', 'CPOG0893', 'MMUG0444', 'BTAG0783']
&gt;&gt;&gt; l2
['CPOG0893', 'MMUG0444', 'PPYG0539', 'BTAG0083']
</snippet></ROW><ROW><id>6829331</id><snippet>import re

ss = '''February 27, 1820
a line
April 3, 1885'''

regx = re.compile('(January|February|March|'
                  'April|May|June'
                  'July|August|September|'
                  'October|November|December)'
                  ' '
                  '(\d|[012]\d|3[01])'
                  ',(?= \d{4})')

print regx.findall(ss)
print
print regx.sub('\\2 \\1',ss)
</snippet></ROW><ROW><id>6829331</id><snippet>import re
from time import clock

ss = '''February 27, 1820
a line
April 3, 1885'''

regx = re.compile('(January|February|March|'
                  'April|May|June'
                  'July|August|September|'
                  'October|November|December)'
                  ' '
                  '(\d|[012]\d|3[01])'
                  ',(?= \d{4})')

print regx.findall(ss)
print


te = clock()
for i in xrange(10000):
    x = regx.sub('\\2 \\1',ss)
print clock()-te
print x
print




regx = re.compile('(?:January|February|March|'
                  'April|May|June'
                  'July|August|September|'
                  'October|November|December)'
                  ' '
                  '(?:\d|[012]\d|3[01]),'
                  '(?= \d{4})')

def repl(mat):
    sp = mat.group().split()
    return sp[1][0:-1] + ' ' + sp[0]

te = clock()
for i in xrange(1):
    y = regx.sub(repl,ss)
print clock()-te
print y
</snippet></ROW><ROW><id>6829331</id><snippet>[('February', '27'), ('April', '3')]

2.52965614345
27 February 1820
a line
3 April 1885

0.378833622709
27 February 1820
a line
3 April 1885
</snippet></ROW><ROW><id>6829416</id><snippet>def __init__(self, alist=None):
     super(ThingyWithAList, self).__init__()
     self.thelist = [] if alist is None else alist
</snippet></ROW><ROW><id>6829497</id><snippet>apply_async</snippet></ROW><ROW><id>6829497</id><snippet>evalfunc</snippet></ROW><ROW><id>6829497</id><snippet>evalfunc</snippet></ROW><ROW><id>6829862</id><snippet>sys.modules</snippet></ROW><ROW><id>6829862</id><snippet>from globl import cursor</snippet></ROW><ROW><id>6829862</id><snippet>from my.fullyqualified.project.global import cursor</snippet></ROW><ROW><id>6830068</id><snippet>def fib(n):
    if n &lt;= 3:
        return 1
    else:
        return fib(n-2) + fib(n-1)

n = 1
while True:
    f = fib(n)
    if len(str(f)) &gt;= 1000:
        print("#%d: %d" % (n, f))
        exit()
    n += 1
</snippet></ROW><ROW><id>6830068</id><snippet>#1: 1
#10: 67
#20: 8361
#30: 1028457
#40: 126491971
</snippet></ROW><ROW><id>6830190</id><snippet>timeout</snippet></ROW><ROW><id>6830190</id><snippet>__init__</snippet></ROW><ROW><id>6830190</id><snippet>run()</snippet></ROW><ROW><id>6830502</id><snippet>while</snippet></ROW><ROW><id>6830502</id><snippet>def writeAndPause(stringToWrite,pauseSeconds)
    print stringToWrite
    sleep(pauseSeconds)
</snippet></ROW><ROW><id>6830502</id><snippet>while True:
    stringToWrite, pauseSeconds = gatherSomeInformation()
    writeAndPause(stringToWrite, pauseSeconds)
</snippet></ROW><ROW><id>6830752</id><snippet>tos = set(getaddresses(tos))</snippet></ROW><ROW><id>6831086</id><snippet>i</snippet></ROW><ROW><id>6831086</id><snippet>import threading

def action(arg):
    print arg[0],

mutable = [0]
for i in range(100):
    mutable[0] = i
    threading.Thread(target=action, args=(mutable,)).start()
</snippet></ROW><ROW><id>6831086</id><snippet>0 1 2 3 5 5 6 8 9 9 11 11 12 1314 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 3
0 31 32 33 34 35 36 37 39 39 40 41 43 44 44 45 46 47 48 49 50 51 53 53 54 55 56
5758 59 60 61 62 64 65 6666 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 8
4 85 86 87 89 90 90 92 93 93 94 95 96 9898 99
</snippet></ROW><ROW><id>6831266</id><snippet>def __init__(self, *args, **kwargs):
    super(ProfInfo, self).__init__(*args, **kwargs)
    if self.instance.pk:
        del self.field['email']
</snippet></ROW><ROW><id>6831430</id><snippet>scope = "http://www.google.com/calendar/feeds/default/allcalendars/full"
REQUEST_TOKEN_URL = 'https://www.google.com/accounts/OAuthGetRequestToken?scope={0}'.format(scope)
</snippet></ROW><ROW><id>6831691</id><snippet>list1</snippet></ROW><ROW><id>6831691</id><snippet>list2</snippet></ROW><ROW><id>6831691</id><snippet>ctr = np.arange(N)
list1 = n1 - n1[0] - ctr * c1
list2 = n2 - n2[0] - ctr * c2
list3 = c3 - ctr
list4 = c4 - ctr
</snippet></ROW><ROW><id>6831691</id><snippet>import numpy as np
N = 100000

# Generate some random data...
n1 = np.random.random(N)
n2 = np.random.random(N)
c1, c2, c3, c4 = np.random.random(4)

ctr = np.arange(N)
list1 = n1 - n1[0] - ctr * c1
list2 = n2 - n2[0] - ctr * c2
list3 = c3 - ctr
list4 = c4 - ctr
</snippet></ROW><ROW><id>6831691</id><snippet>list1</snippet></ROW><ROW><id>6831691</id><snippet>list2</snippet></ROW><ROW><id>6831724</id><snippet>if r_i:
    #print [x, counter])
    return [x, counter]
else:
    #print x
    return x
bezier(x)
</snippet></ROW><ROW><id>6831724</id><snippet>bezier(x)</snippet></ROW><ROW><id>6831752</id><snippet>OpenCV-2.3.0/samples/cpp/squares.cpp</snippet></ROW><ROW><id>6831752</id><snippet>Canny()</snippet></ROW><ROW><id>6831752</id><snippet>dilate()</snippet></ROW><ROW><id>6831752</id><snippet>findCountour()</snippet></ROW><ROW><id>6831761</id><snippet>overlap = [n for n in range(7) if (bitmask1[n] == bitmask2[n] == '1')]
</snippet></ROW><ROW><id>6831761</id><snippet>overlap = ''.join(('1' if (bitmask1[n] == bitmask2[n] == '1') else '0') for n in range(7))
</snippet></ROW><ROW><id>6831761</id><snippet>bin(bitmask)[2:]</snippet></ROW><ROW><id>6831761</id><snippet>"{0:b}".format(bitmask)</snippet></ROW><ROW><id>6831761</id><snippet>[hour for hour in range(firsthour, secondhour) if hour in range(openinghour, closinghour)
</snippet></ROW><ROW><id>6831787</id><snippet>newList = [x[0] * y[0] if x else None for x, y in zip(l1, l2)]
</snippet></ROW><ROW><id>6831787</id><snippet>if x</snippet></ROW><ROW><id>6831827</id><snippet>BaseClass.__init__</snippet></ROW><ROW><id>6831827</id><snippet>&gt;&gt;&gt; class Parent(object):
...   def __init__(self):
...     print 'Parent.__init__'
...   def func(self, x):
...     print x
...
&gt;&gt;&gt; class Child(Parent):
...   pass
...
&gt;&gt;&gt; x = Child()
Parent.__init__
&gt;&gt;&gt; x.func(1)
1
</snippet></ROW><ROW><id>6832000</id><snippet>method_1</snippet></ROW><ROW><id>6832000</id><snippet>value = True</snippet></ROW><ROW><id>6832000</id><snippet>value</snippet></ROW><ROW><id>6832000</id><snippet>method_1</snippet></ROW><ROW><id>6832000</id><snippet>value</snippet></ROW><ROW><id>6832000</id><snippet>method_2</snippet></ROW><ROW><id>6832000</id><snippet>result = { 'value': False }

def method_1():
    result['value'] = True
</snippet></ROW><ROW><id>6832000</id><snippet>nonlocal</snippet></ROW><ROW><id>6832000</id><snippet>def method_1():
    nonlocal value
    value = True    # Works as expected -- assigns to `value` from outer scope
</snippet></ROW><ROW><id>6832293</id><snippet>H_log = np.log(H)
…
plt.imshow(H_log,…)
</snippet></ROW><ROW><id>6832423</id><snippet>text</snippet></ROW><ROW><id>6832423</id><snippet>text.read(),</snippet></ROW><ROW><id>6832423</id><snippet>from collections import Counter

def main():
    with open('garbledText.txt') as text:
        collection = Counter(text.read())
    print [char for char, times in collection.items() if times &lt; 3]

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>6832425</id><snippet>Manager</snippet></ROW><ROW><id>6832425</id><snippet>Manager</snippet></ROW><ROW><id>6832425</id><snippet>Manager</snippet></ROW><ROW><id>6832425</id><snippet>Manager</snippet></ROW><ROW><id>6832425</id><snippet>dumpdata</snippet></ROW><ROW><id>6832425</id><snippet>Manager</snippet></ROW><ROW><id>6832425</id><snippet>get_query_set()</snippet></ROW><ROW><id>6832425</id><snippet>get_object_or_404</snippet></ROW><ROW><id>6832425</id><snippet>_default_manager</snippet></ROW><ROW><id>6832425</id><snippet>Model.objects</snippet></ROW><ROW><id>6832425</id><snippet>objects</snippet></ROW><ROW><id>6832931</id><snippet>def Test(value):
    # Local Scope #1
    def innerFunc():
        # Local Scope #2
        print value 
        # No immediate local in Local Scope #2 - check up the chain
        # First find value in outer function scope (Local Scope #1).
        # Use that.
    innerFunc()

def TestWithAssignment(value):
    # Local Scope #1
    def innerFunc():
        # Local Scope #2
        print value 
        # Immediate local variable found in Local Scope #2.
        # No need to check up the chain.
        # However, no value has been assigned to this variable yet.
        # Throw an error.
        value = "Changed value"
    innerFunc()
</snippet></ROW><ROW><id>6832931</id><snippet>globals()</snippet></ROW><ROW><id>6832931</id><snippet>locals()</snippet></ROW><ROW><id>6832931</id><snippet>value</snippet></ROW><ROW><id>6832931</id><snippet>def TestWithAssignment(value):
    def innerFunc(value):
        print value 
        # Immediate local **and assigned now**.
        value = "Changed value"
        # If you need to keep the changed value
        # return value
    innerFunc(value)
    # If you need to keep the changed value use:
    # value = innerFunc(value)
</snippet></ROW><ROW><id>6832931</id><snippet>nonlocal</snippet></ROW><ROW><id>6832931</id><snippet>def TestWithAssignment(value):
    def innerFunc():
        nonlocal value
        print value 
        value = "Changed value"
    innerFunc()
</snippet></ROW><ROW><id>6833112</id><snippet>pmezard</snippet></ROW><ROW><id>6833112</id><snippet>commit.py</snippet></ROW><ROW><id>6833112</id><snippet>mercurial.ini</snippet></ROW><ROW><id>6833112</id><snippet>.hg</snippet></ROW><ROW><id>6833112</id><snippet>commit.py</snippet></ROW><ROW><id>6833112</id><snippet>localcommit.py</snippet></ROW><ROW><id>6833112</id><snippet>global</snippet></ROW><ROW><id>6833374</id><snippet>MyClass</snippet></ROW><ROW><id>6833374</id><snippet>std::vector&lt;MyClass*&gt; list;
</snippet></ROW><ROW><id>6833374</id><snippet>list.push_back(&amp;objectOfMyClass); //-- for all of your objects
</snippet></ROW><ROW><id>6833374</id><snippet>std::vector&lt;MyClass*&gt;::iterator itr;
for (itr = list.begin(); itr != list.end(); ++itr) {
   (*itr)-&gt;myMethod(...);
}
</snippet></ROW><ROW><id>6833374</id><snippet>std::vector</snippet></ROW><ROW><id>6833602</id><snippet>raw_input()</snippet></ROW><ROW><id>6833602</id><snippet>cat</snippet></ROW><ROW><id>6833602</id><snippet>cat</snippet></ROW><ROW><id>6833602</id><snippet>import sys

for line in open(sys.argv[1]):
    # process line
</snippet></ROW><ROW><id>6833602</id><snippet>fileinput</snippet></ROW><ROW><id>6833602</id><snippet>cat</snippet></ROW><ROW><id>6833664</id><snippet>complex = Filtration()
fill_alpha2D_complex(points, complex)
alphashape = [s for s in complex if s.data[0] &lt;= .5]
</snippet></ROW><ROW><id>6833664</id><snippet>for simplex in alphashape:
    print [v for v in simplex.vertices]
</snippet></ROW><ROW><id>6833706</id><snippet>File.Exists()</snippet></ROW><ROW><id>6833816</id><snippet>gargoyle.is_active</snippet></ROW><ROW><id>6833816</id><snippet>INSTALLED_APPS = [
  # always on apps
]

from gargoyle import gargoyle
if gargoyle.is_active('my_switch'):
    INSTALLED_APPS.append('my_conditional_app')
</snippet></ROW><ROW><id>6833933</id><snippet>orderloc</snippet></ROW><ROW><id>6833933</id><snippet>FloatField</snippet></ROW><ROW><id>6833933</id><snippet>DecimalFields</snippet></ROW><ROW><id>6833991</id><snippet>br.find_control("live").items[0].selected=True
</snippet></ROW><ROW><id>6834473</id><snippet>list</snippet></ROW><ROW><id>6834473</id><snippet>dict</snippet></ROW><ROW><id>6834473</id><snippet>i = iter(list_of_strings)
for line in i:
    if line.startswith('$'):
        while line.endswith('#'):
            line = i.next()
        # do work on 'line' which begins with $ and doesn't end with #
</snippet></ROW><ROW><id>6834473</id><snippet>i = iter(list_of_strings)
for line in i:
    if line[0] == '$':
        try:
            while line[-1] == '#':
                line = i.next()
        except StopIteration:
            break
        # do work on 'line' which begins with $ and doesn't end with #
</snippet></ROW><ROW><id>6834596</id><snippet>#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade HG on Tue Jul 26 20:03:16 2011

import wx

# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame
</snippet></ROW><ROW><id>6834596</id><snippet>import wx
from mygui import MyFrame

class MyApplication(MyFrame):
    def __init__(self, *args, **kargs):
        MyFrame.__init__(self, *args, **kargs)

        ##**put here all your Bind()**


    #**then put all your methods here:**

    def onSaveMovieFile(self, evt):
        ----------------

    def LogThis(self, evt):
        ----------------


if __name__ == '__main__':

    app = wx.PySimpleApp()
    frame = MyApplication(None)
    frame.Show()
    app.MainLoop()      
</snippet></ROW><ROW><id>6834693</id><snippet>import matplotlib.pyplot as plt
import itertools 

fig=plt.figure()
ax=fig.add_subplot(111)
all_data = [[1,10],[2,10],[3,10],[4,10],[5,10],[3,1],[3,2],[3,3],[3,4],[3,5]]
plt.plot(
    *zip(*itertools.chain.from_iterable(itertools.combinations(all_data, 2))),
    color = 'brown', marker = 'o')

plt.show()
</snippet></ROW><ROW><id>6835343</id><snippet>#models.py
class Contact(models.Model):
    #other fields
    contact_types = models.ManyToMany(ContactType)

class ContactType(models.Model):
    title = models.CharField(max_length=20, unique=true)

#forms.py
class ContactForm(forms.ModelForm):
    class Meta:
        model = Contact

    def __init__(self, *args, **kwargs):
        super(ContactForm, self).__init__(*args, **kwargs)
        self.fields['contact_types'].widget = forms.CheckboxSelectMultiple()
</snippet></ROW><ROW><id>6835668</id><snippet>data[np.argsort(data[:, 0])]</snippet></ROW><ROW><id>6835668</id><snippet>0</snippet></ROW><ROW><id>6835668</id><snippet>In [27]: import numpy as np

In [28]: data = np.array([[5,2], [4,1], [3,6]])

In [29]: col = 0

In [30]: data[np.argsort(data[:,col])]
Out[30]: 
array([[3, 6],
       [4, 1],
       [5, 2]])
</snippet></ROW><ROW><id>6835786</id><snippet>"""
This module implements the cksum command found in most UNIXes in pure
python.

The constants and routine are cribbed from the POSIX man page
"""
import sys

crctab = [ 0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc,
        0x17c56b6b, 0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f,
        0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a,
        0x384fbdbd, 0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,
        0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75, 0x6a1936c8,
        0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3,
        0x709f7b7a, 0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e,
        0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,
        0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84,
        0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d, 0xd4326d90, 0xd0f37027,
        0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022,
        0xca753d95, 0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,
        0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077,
        0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c,
        0x2e003dc5, 0x2ac12072, 0x128e9dcf, 0x164f8078, 0x1b0ca6a1,
        0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,
        0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb,
        0x6f52c06c, 0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08,
        0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d,
        0x40d816ba, 0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,
        0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692, 0x8aad2b2f,
        0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044,
        0x902b669d, 0x94ea7b2a, 0xe0b41de7, 0xe4750050, 0xe9362689,
        0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,
        0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683,
        0xd1799b34, 0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59,
        0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c,
        0x774bb0eb, 0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,
        0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53, 0x251d3b9e,
        0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5,
        0x3f9b762c, 0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48,
        0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,
        0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2,
        0xe6ea3d65, 0xeba91bbc, 0xef68060b, 0xd727bbb6, 0xd3e6a601,
        0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604,
        0xc960ebb3, 0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,
        0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6,
        0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad,
        0x81b02d74, 0x857130c3, 0x5d8a9099, 0x594b8d2e, 0x5408abf7,
        0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,
        0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd,
        0x6c47164a, 0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e,
        0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b,
        0x0fdc1bec, 0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,
        0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654, 0xc5a92679,
        0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12,
        0xdf2f6bcb, 0xdbee767c, 0xe3a1cbc1, 0xe760d676, 0xea23f0af,
        0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
        0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5,
        0x9e7d9662, 0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06,
        0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03,
        0xb1f740b4 ]

UNSIGNED = lambda n: n &amp; 0xffffffff

def memcrc(b):
    n = len(b)
    i = c = s = 0
    for ch in b:
        c = ord(ch)
        tabidx = (s&gt;&gt;24)^c
        s = UNSIGNED((s &lt;&lt; 8)) ^ crctab[tabidx]

    while n:
        c = n &amp; 0377
        n = n &gt;&gt; 8
        s = UNSIGNED(s &lt;&lt; 8) ^ crctab[(s &gt;&gt; 24) ^ c]
    return UNSIGNED(~s)

if __name__ == '__main__':
    fname = sys.argv[-1]
    buffer = open(fname, 'rb').read()
    print "%d\t%d\t%s" %  (memcrc(buffer), len(buffer), fname)
</snippet></ROW><ROW><id>6835917</id><snippet>ArgumentParser.parse_known_args</snippet></ROW><ROW><id>6835917</id><snippet>(infile, outfile)</snippet></ROW><ROW><id>6835917</id><snippet>namespace, extra = parser.parse_known_args()
</snippet></ROW><ROW><id>6835917</id><snippet>namespace.infile</snippet></ROW><ROW><id>6835917</id><snippet>namespace.outfile</snippet></ROW><ROW><id>6836681</id><snippet>a/divisor == int(a/divisor)</snippet></ROW><ROW><id>6836681</id><snippet>True</snippet></ROW><ROW><id>6836681</id><snippet>a % divisor == 0</snippet></ROW><ROW><id>6836681</id><snippet>prime = True</snippet></ROW><ROW><id>6836681</id><snippet>prime</snippet></ROW><ROW><id>6836681</id><snippet>True</snippet></ROW><ROW><id>6836681</id><snippet>for ... in</snippet></ROW><ROW><id>6836681</id><snippet>for a in xrange(1, 1000):
    for divisor in xrange(2, a): ...
</snippet></ROW><ROW><id>6836681</id><snippet>if</snippet></ROW><ROW><id>6836681</id><snippet>for</snippet></ROW><ROW><id>6836681</id><snippet>prime</snippet></ROW><ROW><id>6836681</id><snippet>a</snippet></ROW><ROW><id>6836681</id><snippet>999</snippet></ROW><ROW><id>6836681</id><snippet>if</snippet></ROW><ROW><id>6836681</id><snippet>for</snippet></ROW><ROW><id>6836681</id><snippet>for a in xrange(1, 1000):
    for divisor in xrange(2, a):
        if a % divisor == 0:
            break
    else:
        print a
        numberlist.append(a)
</snippet></ROW><ROW><id>6836681</id><snippet>for ... else</snippet></ROW><ROW><id>6836681</id><snippet>else</snippet></ROW><ROW><id>6836681</id><snippet>for</snippet></ROW><ROW><id>6836681</id><snippet>else</snippet></ROW><ROW><id>6836681</id><snippet>break</snippet></ROW><ROW><id>6836681</id><snippet>1</snippet></ROW><ROW><id>6836681</id><snippet>1</snippet></ROW><ROW><id>6836681</id><snippet>1</snippet></ROW><ROW><id>6836917</id><snippet>use strict;
use Net::OAuth;
use LWP::UserAgent;

my $CC_KEY = "blahblahblah";
my $CC_SECRET = "blah";

my $url = 'http://yboss.yahooapis.com/ysearch/web';
print make_request($url, {q =&gt; "cat dog", format =&gt; "xml", count =&gt; 5});

sub make_request {
    my ($url, $args) = @_;

    my $request = Net::OAuth-&gt;request("request token")
      -&gt;new(
            consumer_key =&gt; $CC_KEY,
            consumer_secret =&gt; $CC_SECRET,
            request_url =&gt; $url,
            request_method =&gt; 'GET',
            signature_method =&gt; 'HMAC-SHA1',
            timestamp =&gt; time,
            nonce =&gt; int(rand 10**6),
            callback =&gt; 'oob',
            extra_params =&gt; $args,
            protocol_version =&gt; Net::OAuth::PROTOCOL_VERSION_1_0A,
            );
    $request-&gt;sign;

    my $res = LWP::UserAgent-&gt;new(env_proxy=&gt;1)-&gt;get($request-&gt;to_url); 
    return $res-&gt;content if $res-&gt;is_success;
    die $res-&gt;status_line;
}
</snippet></ROW><ROW><id>6837146</id><snippet>MyFrame</snippet></ROW><ROW><id>6837146</id><snippet>from matplotlib.backends.backend_wxagg import \
FigureCanvasWxAgg as FigureCanvas

class MyFigurePanel(wx.Panel):
  """Class to represent a Matplotlib Figure as a wxFrame"""
  def __init__(self, parent):
    wx.Panel.__init__(self, parent)
    self.figure = Figure()#figsize=(6, 4), dpi=100)
    self.axes = self.figure.add_subplot(111)
    x = np.arange(0, 6, .01)
    y = np.sin(x**2)*np.exp(-x)
    self.axes.plot(x, y)
    self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure) 

class MyButtonPanel(wx.Panel):
  def __init__(self, parent):
    wx.Panel.__init__(self, parent)
    button = wx.Button(self, label = 'SAVE se')

class MyFrame(wx.Frame):
  def __init__(self):
    wx.Frame.__init__(self, None)
    self.figure = MyFigurePanel(self)
    self.buttons = MyButtonPanel(self)
    grid = wx.BoxSizer(wx.VERTICAL)
    grid.Add(self.buttons, flag=wx.EXPAND)
    grid.Add(self.figure, flag=wx.EXPAND)
    self.SetSizer(grid)
    self.Fit()


# Create a wrapper wxWidgets application     
app = wx.PySimpleApp()
# instantiate the Matplotlib wxFrame
frame = MyFrame()
# show it
frame.Show(True)
# start wxWidgets mainloop
app.MainLoop()
</snippet></ROW><ROW><id>6837146</id><snippet>MyFrame</snippet></ROW><ROW><id>6837146</id><snippet>wx.BoxSizer()</snippet></ROW><ROW><id>6837146</id><snippet>GridSizer</snippet></ROW><ROW><id>6837240</id><snippet>#!/bin/bash
xmgrace -batch batch.bfile -nosafe -hardcopy
</snippet></ROW><ROW><id>6837240</id><snippet>import os
os.environ
</snippet></ROW><ROW><id>6837369</id><snippet>import itertools

def dict_gen(n):
    letr = 'abcdefghijklmnopqrstuvwxyz'
    return itertools.chain(''.join(j) for i in range(n) 
                           for j in itertools.product(letr, repeat=i+1))
</snippet></ROW><ROW><id>6837369</id><snippet>for word in dict_gen(n):  # replace n with the max word length you want
    print word
</snippet></ROW><ROW><id>6837369</id><snippet>dict_gen()</snippet></ROW><ROW><id>6837369</id><snippet>list()</snippet></ROW><ROW><id>6837369</id><snippet>&gt;&gt;&gt; words = list(dict_gen(5))
&gt;&gt;&gt; len(words) == 26 + 26**2 + 26**3 + 26**4 + 26**5  # verify correct length
True
&gt;&gt;&gt; words[20:30]  # transition from one letter to two letters
['u', 'v', 'w', 'x', 'y', 'z', 'aa', 'ab', 'ac', 'ad']
&gt;&gt;&gt; words[-10:]   # last 10 elements
['zzzzq', 'zzzzr', 'zzzzs', 'zzzzt', 'zzzzu', 'zzzzv', 'zzzzw', 'zzzzx', 'zzzzy', 'zzzzz']
</snippet></ROW><ROW><id>6837523</id><snippet>open</snippet></ROW><ROW><id>6837523</id><snippet>wb</snippet></ROW><ROW><id>6837523</id><snippet>wt</snippet></ROW><ROW><id>6837523</id><snippet>dir(csv)</snippet></ROW><ROW><id>6837523</id><snippet>write_to_csv.py</snippet></ROW><ROW><id>6837658</id><snippet>    gnuplot.write("plot %s using 1 with lines lt -1 lw 0.5 title 'X axis' \n " % filename1)
</snippet></ROW><ROW><id>6837658</id><snippet>file.readlines()</snippet></ROW><ROW><id>6837658</id><snippet>for line in lines:
    gnuplot.write(lines)
    gnuplot.flush()
</snippet></ROW><ROW><id>6837668</id><snippet>append</snippet></ROW><ROW><id>6837668</id><snippet>None</snippet></ROW><ROW><id>6837668</id><snippet>MY_APPS_LIST = DEFAULT_APPS + ['south']</snippet></ROW><ROW><id>6837818</id><snippet>rpy2.robjects.activate()</snippet></ROW><ROW><id>6838046</id><snippet>glob</snippet></ROW><ROW><id>6838046</id><snippet>from glob import glob
texts = glob('nltk_data/corpora/nytimes/*')
</snippet></ROW><ROW><id>6838046</id><snippet>from nltk.corpus.reader import XMLCorpusReader
for item_path in texts:
    reader = XMLCorpusReader('nltk_data/corpora/nytimes/', item_path)
</snippet></ROW><ROW><id>6838046</id><snippet>texts</snippet></ROW><ROW><id>6838304</id><snippet>accepted_strings = {'auth', 'authpriv', 'daemon'}

if facility in accepted_strings:
    do_stuff()
</snippet></ROW><ROW><id>6838383</id><snippet>transport = Transport((host, port))
transport.connect(username = username, pkey = mykey) # or password = mypassword
</snippet></ROW><ROW><id>6838383</id><snippet>sftp = SFTPClient.from_transport(transport)
</snippet></ROW><ROW><id>6838383</id><snippet>sftp_client.put(my_local_file)
</snippet></ROW><ROW><id>6838383</id><snippet>sftp.close()
transport.close()
</snippet></ROW><ROW><id>6838605</id><snippet>&gt;&gt;&gt; class One(object):
...     def __init__(self, my_list=[]):
...         self.my_list = my_list
...
&gt;&gt;&gt; alist = ['hello']
&gt;&gt;&gt; one1 = One(alist)
&gt;&gt;&gt; alist.append('world')
&gt;&gt;&gt; one2 = One(alist)
&gt;&gt;&gt; 
&gt;&gt;&gt; print(one1.my_list) # Huh? This isn't what I initialised one1 with!
['hello', 'world']
&gt;&gt;&gt; print(one2.my_list) # At least this one's okay...
['hello', 'world']
&gt;&gt;&gt; del alist[0]
&gt;&gt;&gt; print one2.my_list # What the hell? I just modified a local variable and a class instance somewhere else got changed?
['world']
</snippet></ROW><ROW><id>6838605</id><snippet>None</snippet></ROW><ROW><id>6838605</id><snippet>if value is None: value = default</snippet></ROW><ROW><id>6838605</id><snippet>class One(object):
    def __init__(self, my_list=[])
        self.my_list = list(my_list)
</snippet></ROW><ROW><id>6838605</id><snippet>append</snippet></ROW><ROW><id>6838605</id><snippet>if my_list is None: my_list = []</snippet></ROW><ROW><id>6838605</id><snippet>One</snippet></ROW><ROW><id>6838605</id><snippet>One</snippet></ROW><ROW><id>6838635</id><snippet>for</snippet></ROW><ROW><id>6838635</id><snippet>with open('log_file') as f:
    for line in f:
        fields = line.split('\t')
        for field in fields:
            key,_,val = field.partition('=')
            # Do something with each key and val
</snippet></ROW><ROW><id>6838911</id><snippet>import time

def get_profile(js):
    def cas(prev, el):
        if hasattr(prev, "get") and prev:
            return prev.get(el, prev)
        return prev
    def getget(default, *elements):
        return reduce(cas, elements[1:], js.get(elements[0], default))

    d = {}
    d['links'] = getget([], 'entry', 'gd$feedLink')
    d['statistics'] = getget({}, 'entry', 'yt$statistics')
    d['published'] = getget('', 'entry', 'published', '$t')
    d['updated'] = getget('', 'entry', 'updated', '$t')
    d['age'] = getget(0, 'entry', 'yt$age', '$t')
    d['name'] = getget('', 'entry', 'author', 0, 'name' '$t')
    return d

print get_profile({
    'entry':{
        'gd$feedLink':range(4),
        'yt$statistics':{'foo':1, 'bar':2},
        'published':{
            "$t":time.strftime("%x %X"),
        }, 
        'updated':{
            "$t":time.strftime("%x %X"),
        },
        'yt$age':{
            "$t":"infinity years",
        },
        'author':{0:{'name':{'$t':"I am a cow"}}},
    }
})
</snippet></ROW><ROW><id>6839220</id><snippet># Upper case first letter of class name is good policy.
class Login_send:

    def __init__(self):
        # initialize the state variable to False.
        self.connection = False
        self.count=0
        self.timeout = 1.0
        self.factory = pb.PBClientFactory()
        reactor.connectTCP("localhost", 8800, self.factory)

    def testTimeout(self):
        self.count+=1
        print self.count

        # no connection -- create one.
        if not self.connection:
            self.assign_connection()

        # cached connection exists, call send_data manually.
        elif self.count &gt; 10:
            self.disconnect(self.connection)
        else:
            #you probably want to send data only if it it should be valid.
            self.send_data(self.connection)       

    def assign_connection(self):
    ''' Creates and stores a Deffered which represents the connection to
        the server. '''
        # cache the connection.
        self.connection = self.factory.login(
                              credentials.UsernamePassword("test1","bb1b"))
        # add connection callbacks as normal.
        self.connection.addCallbacks(
                              self.good_connected, self.bad_connected)
        self.connection.addCallback(self.send_data)
        self.connection.addErrback(self.disconnect)

    def disconnect(self, perspective):
        # be sure to cleanup after yourself!
        self.connection = False
        print 'disconnect'
        reactor.stop()

    # the rest of your class goes here.
</snippet></ROW><ROW><id>6839573</id><snippet>for</snippet></ROW><ROW><id>6839573</id><snippet>break</snippet></ROW><ROW><id>6839573</id><snippet>for i in range(1, 8):
    if i &gt;= 5:
        break
    # do something
</snippet></ROW><ROW><id>6839573</id><snippet>for</snippet></ROW><ROW><id>6839573</id><snippet>foreach</snippet></ROW><ROW><id>6839573</id><snippet>for</snippet></ROW><ROW><id>6839573</id><snippet>range()</snippet></ROW><ROW><id>6839573</id><snippet>xrange()</snippet></ROW><ROW><id>6839573</id><snippet>n</snippet></ROW><ROW><id>6839573</id><snippet>i</snippet></ROW><ROW><id>6839573</id><snippet>i</snippet></ROW><ROW><id>6839573</id><snippet>enumerate()</snippet></ROW><ROW><id>6839573</id><snippet>n = [3, 5, 10, "cat", "dog", 3.0, 4.0]  # list can contain different types
for i, value in enumerate(n):
    if i &gt;= 5:
        break
    # do something with value
</snippet></ROW><ROW><id>6839915</id><snippet>AF_INET</snippet></ROW><ROW><id>6839915</id><snippet>SOCKET.py</snippet></ROW><ROW><id>6839915</id><snippet>IN.py</snippet></ROW><ROW><id>6839915</id><snippet>/usr/include/sys/socket.h</snippet></ROW><ROW><id>6839915</id><snippet>socket.py</snippet></ROW><ROW><id>6839915</id><snippet>udp_local.py</snippet></ROW><ROW><id>6839915</id><snippet>argparse</snippet></ROW><ROW><id>6839915</id><snippet>AF_INET = 2</snippet></ROW><ROW><id>6839915</id><snippet>AF_INET = 1</snippet></ROW><ROW><id>6839915</id><snippet>2</snippet></ROW><ROW><id>6839915</id><snippet>1</snippet></ROW><ROW><id>6839949</id><snippet>\</snippet></ROW><ROW><id>6839949</id><snippet>gnuplot</snippet></ROW><ROW><id>6840469</id><snippet>import curses
import time

def report_progress(filename, progress):
    """progress: 0-10"""
    stdscr.addstr(0, 0, "Moving file: {0}".format(filename))
    stdscr.addstr(1, 0, "Total progress: [{1:10}] {0}%".format(progress * 10, "#" * progress))
    stdscr.refresh()

if __name__ == "__main__":
    stdscr = curses.initscr()
    curses.noecho()
    curses.cbreak()

    try:
        for i in range(10):
            report_progress("file_{0}.txt".format(i), i+1)
            time.sleep(0.5)
    finally:
        curses.echo()
        curses.nocbreak()
        curses.endwin()
</snippet></ROW><ROW><id>6840500</id><snippet>cd ~
wget http://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.5.tar.gz
tar zxvf pysvn-1.7.5.tar.gz
cd pysvn-1.7.5/Source
python setup.py backport
python setup.py configure --apr-inc-dir=/usr/include/apr-1
make
cd ../Tests
make
cd ../Sources
mkdir -p $TARG/lib/python2.7/site-packages/pysvn
cp pysvn/__init__.py $TARG/lib/python2.7/site-packages/pysvn
cp pysvn/_pysvn_2_7.so $TARG/lib/python2.7/site-packages/pysvn
cd ~
</snippet></ROW><ROW><id>6840500</id><snippet>diff</snippet></ROW><ROW><id>6840824</id><snippet>os.fchown()</snippet></ROW><ROW><id>6840947</id><snippet>0o</snippet></ROW><ROW><id>6840947</id><snippet>00</snippet></ROW><ROW><id>6840947</id><snippet>\</snippet></ROW><ROW><id>6840947</id><snippet>\00</snippet></ROW><ROW><id>6840947</id><snippet>\n</snippet></ROW><ROW><id>6840947</id><snippet>replace</snippet></ROW><ROW><id>6841243</id><snippet>1</snippet></ROW><ROW><id>6841243</id><snippet>[:]</snippet></ROW><ROW><id>6841243</id><snippet>list1[1]</snippet></ROW><ROW><id>6841243</id><snippet>list1[1]</snippet></ROW><ROW><id>6841243</id><snippet>list2[1]</snippet></ROW><ROW><id>6841243</id><snippet>list</snippet></ROW><ROW><id>6841243</id><snippet>list1 = [[x] for x in range(10)]
list2 = list1[:4]
list1[1][0] = 100
print list2
</snippet></ROW><ROW><id>6841243</id><snippet>list2</snippet></ROW><ROW><id>6841345</id><snippet>__user_id_counter</snippet></ROW><ROW><id>6841345</id><snippet>self</snippet></ROW><ROW><id>6841345</id><snippet>UserClass</snippet></ROW><ROW><id>6841345</id><snippet>class UserClass(object) :
    __user_id_counter = 0
    def __init__(self, UserID=None) :
        self.UserID = self.__user_id_counter if UserID is None else UserID
        UserClass.__user_id_counter += 1
</snippet></ROW><ROW><id>6841393</id><snippet>Great! But what?</snippet></ROW><ROW><id>6841393</id><snippet>Cool, I like higher productivity. But what does that really mean?</snippet></ROW><ROW><id>6841393</id><snippet>Sounds like me, i'm well aware i'm hitting everything with my Big Java Hammer. But what exactly is the kind of problem that suits a Python wrench rather than a Java Hammer?</snippet></ROW><ROW><id>6841868</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps({"fruit":{"apple":100}})
'{"fruit": {"apple": 100}}'
</snippet></ROW><ROW><id>6841912</id><snippet>B = filter(lambda x: abs(x) != float('inf'), A)
</snippet></ROW><ROW><id>6841950</id><snippet>transcriptionFile = 'calculus.txt'

with open(transcriptionFile, "r") as tFile:
        for line in tFile :
                li = line.split()
                if li: 
                        new = ((int(li[1]) - int(li[0]))/10000000. , li[2])     
                        print li,'  ',new
</snippet></ROW><ROW><id>6841950</id><snippet>if li:</snippet></ROW><ROW><id>6841950</id><snippet>list</snippet></ROW><ROW><id>6841950</id><snippet>list</snippet></ROW><ROW><id>6841950</id><snippet>10/100</snippet></ROW><ROW><id>6841950</id><snippet>10./100</snippet></ROW><ROW><id>6841950</id><snippet>10/100.</snippet></ROW><ROW><id>6841950</id><snippet>list = list[1] - list[0]</snippet></ROW><ROW><id>6841950</id><snippet>with open(....) as handle:</snippet></ROW><ROW><id>6841950</id><snippet>transcriptionFile = 'calculus.txt'

with open(transcriptionFile, "r") as tFile:
        gen = (line.split() for line in tFile if line.strip())
        li = [((int(t2)-int(t1))/10000000.,phon) for (t1,t2,phon) in gen]
        print '\n'.join(map(str,li))
</snippet></ROW><ROW><id>6841950</id><snippet>1600000 - 1200000 = 400000</snippet></ROW><ROW><id>6841950</id><snippet>400000 / 10000000</snippet></ROW><ROW><id>6841950</id><snippet>transcriptionFile = 'calculus.txt'

with open(transcriptionFile, "r") as tFile:
        gen = (line.split() for line in tFile if line.strip())
        firstVals, lapTimes = [],[]
        for (t1,t2,phon) in gen:
                firstVals.append( (int(t1)/10000000.,phon) )
                lapTimes.append( (int(t2)-int(t1))/10000000.,phon) )
</snippet></ROW><ROW><id>6842138</id><snippet>my_globals = {'var': None}

def my_func():
    my_globals['var'] = 'something else'
</snippet></ROW><ROW><id>6842304</id><snippet>numpy</snippet></ROW><ROW><id>6842304</id><snippet>In [34]: import numpy as np

In [35]: points = np.random.rand(100, 3)

In [36]: points[(0.5 &lt; points[:,2]) &amp; (points[:,2] &lt; 0.6)]
Out[36]: 
array([[ 0.71524853,  0.09490989,  0.5053525 ],
       [ 0.71668105,  0.88735685,  0.52713089],
       [ 0.17376858,  0.28024362,  0.56543163],
       [ 0.97134163,  0.95498013,  0.57372901],
       [ 0.35755719,  0.70042594,  0.56379507],
       [ 0.31666818,  0.22316937,  0.50953021],
       [ 0.87787189,  0.35648375,  0.52159669],
       [ 0.77436531,  0.84893017,  0.51721675],
       [ 0.88997082,  0.14993883,  0.57662781],
       [ 0.40895133,  0.95472591,  0.58294156],
       [ 0.71299491,  0.09611201,  0.56360363],
       [ 0.68517509,  0.46743956,  0.54170775],
       [ 0.04632064,  0.56637214,  0.5319611 ],
       [ 0.7708119 ,  0.84934734,  0.58631465],
       [ 0.73931364,  0.34690535,  0.55264761]])
</snippet></ROW><ROW><id>6842422</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; expr = '[a]+[c]*0.6/[b]-([a]-[f]*0.9)'
&gt;&gt;&gt; re.findall('(?:\[.*?\])|(?:\d+\.*\d*)|.', expr)
['[a]', '+', '[c]', '*', '0.6', '/', '[b]', '-', '(', '[a]', '-', '[f]', '*', '0.9', ')']
</snippet></ROW><ROW><id>6843164</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>6843242</id><snippet>def check_environment():
    # check python
    # check for syslog
    # check for mknod
    # check for root privileges

def config():
    # .. code
</snippet></ROW><ROW><id>6843242</id><snippet>def check_environment():</snippet></ROW><ROW><id>6843242</id><snippet>def check_environment():
    pass
</snippet></ROW><ROW><id>6843405</id><snippet>import pycurl
import cStringIO

url = 'http://example.org/dapi.php'
file ='/path/to/file'


print "Start"
response = cStringIO.StringIO()
c = pycurl.Curl()
values = [('file' , (c.FORM_FILE,  file)),
      ('user' , 'username'),
      ('password' , 'password'),
      ('convert', '1')]


c.setopt(c.POST, 1)
c.setopt(c.URL,url)
c.setopt(c.HTTPPOST,  values)
#c.setopt(c.VERBOSE, 1)
c.setopt(c.WRITEFUNCTION, response.write)
c.perform()
c.close()
print response.getvalue()
print "All done"
</snippet></ROW><ROW><id>6843489</id><snippet>*</snippet></ROW><ROW><id>6843489</id><snippet>template.render(**vars)
</snippet></ROW><ROW><id>6843638</id><snippet>@staticmethod</snippet></ROW><ROW><id>6843638</id><snippet>@staticmethod</snippet></ROW><ROW><id>6843638</id><snippet>Foo</snippet></ROW><ROW><id>6843638</id><snippet>&gt;&gt;&gt; class Foo(object):
...    @staticmethod
...    def foo():
...       print 'foo'
...
...    def bar(self):
...       print 'bar'
</snippet></ROW><ROW><id>6843638</id><snippet>Foo.foo()</snippet></ROW><ROW><id>6843638</id><snippet>&gt;&gt;&gt; Foo.foo()
foo
</snippet></ROW><ROW><id>6843638</id><snippet>Foo.bar()</snippet></ROW><ROW><id>6843638</id><snippet>Foo</snippet></ROW><ROW><id>6843638</id><snippet>&gt;&gt;&gt; Foo.bar()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method foo() must be called with Foo instance as first argument (got nothing instead)
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar()
bar
</snippet></ROW><ROW><id>6843638</id><snippet>@staticmethod</snippet></ROW><ROW><id>6843638</id><snippet>self</snippet></ROW><ROW><id>6844501</id><snippet>def gen_trees(nwklist, newid):
  yield [newid] + [nwklist]
  if isinstance(nwklist, list):
    for i in xrange(len(nwklist)):
      for l in gen_trees(nwklist[i], newid):
        yield nwklist[:i] + [l] + nwklist[i+1:]
  yield [nwklist] + [newid]

for l in gen_trees([1,[2,[3,4]]] , 5):
  print l
</snippet></ROW><ROW><id>6844501</id><snippet>[5, [1, [2, [3, 4]]]]
[[5, 1], [2, [3, 4]]]
[[1, 5], [2, [3, 4]]]
[1, [5, [2, [3, 4]]]]
[1, [[5, 2], [3, 4]]]
[1, [[2, 5], [3, 4]]]
[1, [2, [5, [3, 4]]]]
[1, [2, [[5, 3], 4]]]
[1, [2, [[3, 5], 4]]]
[1, [2, [3, [5, 4]]]]
[1, [2, [3, [4, 5]]]]
[1, [2, [[3, 4], 5]]]
[1, [[2, [3, 4]], 5]]
[[1, [2, [3, 4]]], 5]
</snippet></ROW><ROW><id>6844767</id><snippet>re</snippet></ROW><ROW><id>6844767</id><snippet>In [22]: import re

In [23]: haystack = 'abababa baba alibababa'

In [24]: needle = 'baba'

In [25]: matches = re.finditer(r'(?=(%s))' % re.escape(needle), haystack)

In [26]: print [m.start(1) for m in matches]
[1, 3, 8, 16, 18]
</snippet></ROW><ROW><id>6844767</id><snippet>In [27]: len(re.findall(r'(?=(%s))' % re.escape(needle), haystack))
Out[27]: 5
</snippet></ROW><ROW><id>6844957</id><snippet>pythonpath</snippet></ROW><ROW><id>6844957</id><snippet>setuptools</snippet></ROW><ROW><id>6844957</id><snippet>setup.py</snippet></ROW><ROW><id>6844957</id><snippet>PythonEvent/
    main.py
    __init__.py
    DBConnector/
        __init__.py
        connector.py
    service/
        __init__.py
        myservice.py
</snippet></ROW><ROW><id>6844957</id><snippet>myservice.py</snippet></ROW><ROW><id>6844957</id><snippet>from ..DBConnector.connector import DBUpdate</snippet></ROW><ROW><id>6844957</id><snippet>myservice.py</snippet></ROW><ROW><id>6844957</id><snippet>PythonEvent/</snippet></ROW><ROW><id>6844957</id><snippet>from PythonEvent.service import myservice

if __name__ == '__main__':
    myservice.main() # or whatever the entry point is called in myservice.
</snippet></ROW><ROW><id>6844957</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6844957</id><snippet>PythonEvent/</snippet></ROW><ROW><id>6844957</id><snippet>PythonEvent/</snippet></ROW><ROW><id>6845079</id><snippet>import servo
servo.move(int(argv[1]), int(argv[2]))
</snippet></ROW><ROW><id>6845585</id><snippet>if not items: # empty collection</snippet></ROW><ROW><id>6845585</id><snippet>try</snippet></ROW><ROW><id>6845585</id><snippet>first_element</snippet></ROW><ROW><id>6845585</id><snippet>except StopIteration:</snippet></ROW><ROW><id>6845585</id><snippet>except</snippet></ROW><ROW><id>6845585</id><snippet>else</snippet></ROW><ROW><id>6845585</id><snippet>try</snippet></ROW><ROW><id>6845585</id><snippet>for</snippet></ROW><ROW><id>6845585</id><snippet>for element in itertools.chain([first_element], reader)</snippet></ROW><ROW><id>6845585</id><snippet>first_element</snippet></ROW><ROW><id>6845585</id><snippet>reader</snippet></ROW><ROW><id>6845724</id><snippet>In [2]: '\"foo\"'
Out[2]: u'"foo"'
</snippet></ROW><ROW><id>6845724</id><snippet>In [3]: '\\"foo\\"'
Out[3]: u'\\"foo\\"'
</snippet></ROW><ROW><id>6846026</id><snippet>http://counter.appname.appspot.com/path</snippet></ROW><ROW><id>6846124</id><snippet>Newton(poly, 0.42, 1, 0)</snippet></ROW><ROW><id>6846124</id><snippet>time()</snippet></ROW><ROW><id>6846124</id><snippet>for line in tFile:</snippet></ROW><ROW><id>6846124</id><snippet>time()</snippet></ROW><ROW><id>6846124</id><snippet>poly_coeff()</snippet></ROW><ROW><id>6846124</id><snippet>Newton()</snippet></ROW><ROW><id>6846124</id><snippet>def time(fileName) :
    with open(fileName, "r") as tFile :
            for line in tFile :
                li = line.split()
                if li :
                    start_time = (int(li[0]) / 10000000.)
                    end_time = (int(li[1]) / 10000000.) 
                    duration = ((int(li[1]) -int(li[0]))/10000000.)
                    print start_time,' ',end_time,' ',duration

                    poly = poly_coeff(start_time, end_time, duration)
                    Newton(poly, 0.42, 1, 0)

def poly_coeff(stime, etime, dur) :
    """The equation is k6 * u^3 + k5 * u^2 + k4 * u + k0 = 0. Computing the        coefficients of this equation."""
    """Substituting the required values we get the coefficients."""
    w = 5  # weight for rational bezier curve equation

    t_u = dur
    t0 = stime
    t3 = etime
    t1 = t2 = (stime + etime) / 2
    w0 = w1 = w2 = w3 = w
    k0 = w0 * (t_u - t0)
    k1 = w1 * (t_u - t1)
    k2 = w2 * (t_u - t2)
    k3 = w3 * (t_u - t3)
    k4 = 3 * (k1 - k0)
    k5 = 3 * (k2 - 2 * k1 + k0)
    k6 = k3 - 3 * k2 + 3 * k1 -k0 
    print k0, k1, k2, k3, k4, k5, k6

    return [[k6,3], [k5,2], [k4,1], [k0,0]]


if __name__ == "__main__" :
    if len(sys.argv) != 2 : 
        Usage()
    else :
        transcriptionFile = sys.argv[1]

        time(transcriptionFile)
</snippet></ROW><ROW><id>6846170</id><snippet>.pyx</snippet></ROW><ROW><id>6846170</id><snippet>src/_region_filter.c</snippet></ROW><ROW><id>6846170</id><snippet>setup.py</snippet></ROW><ROW><id>6846364</id><snippet>SELECT *, MAX("run"."start_time")
FROM "run"    
LEFT OUTER JOIN "project" ON ("run"."project_id" = "project"."id") 
GROUP BY "project"."id"
</snippet></ROW><ROW><id>6846730</id><snippet>counters = Counter.objects.raw("""
        SELECT id, name FROM building_counter c
        INNER JOIN scope_scope_buildings ssb 
                ON c.building_id = ssb.building_id
                AND ssb.scope_id = %s
        WHERE  energy_id = %s
        AND parent_id is not NULL
        AND type = 'C'
       """, (self.id, energy_id))
</snippet></ROW><ROW><id>6846827</id><snippet>MINE</snippet></ROW><ROW><id>6846827</id><snippet>:~/foo $ mkdir MINE
:~/foo $ ls
MINE
:~/foo $ cd mine
:~/foo/mine $ ls -al
</snippet></ROW><ROW><id>6846827</id><snippet>:~/foo $ mv MINE mine2
:~/foo $ mv mine2 mine
:~/foo $ ls
mine
</snippet></ROW><ROW><id>6847271</id><snippet>PyInit__pytellapic</snippet></ROW><ROW><id>6847633</id><snippet>remove</snippet></ROW><ROW><id>6847633</id><snippet>remove</snippet></ROW><ROW><id>6847633</id><snippet>Element</snippet></ROW><ROW><id>6847633</id><snippet>elem.findall()</snippet></ROW><ROW><id>6847633</id><snippet>root = elem.getroot()
for child in root:
    if child.name != "prop":
        continue
    if True:# TODO: do your check here!
        root.remove(child)
</snippet></ROW><ROW><id>6847633</id><snippet>prop.attrib.get()</snippet></ROW><ROW><id>6847633</id><snippet>prop.get()</snippet></ROW><ROW><id>6848167</id><snippet>        coordinates_list = [chromo,start,end]   
        OCR_dict = {row[3]:coordinates_list}
        for keys,values in OCR_dict.items():
            OCR_chromosome = values[0]
</snippet></ROW><ROW><id>6848167</id><snippet>from collections import defaultdict
OCR_dict = defaultdict(list)

with open('coors_test.csv', mode='r') as coors_infile:
    coors_reader = csv.reader(coors_infile)
    for row in coors_reader:
        chromo = row[0]
        start = row[1]
        end = row[2] 
        # OCR_dict is a mapping `chromo -&gt; [(start,end), (start,end), ...]`
        OCR_dict[chromo].append((start,end))

with open('transcripts_test.csv', mode='r') as transcripts_infile:
    transcripts_reader = csv.reader(transcripts_infile)
    for row in transcripts_reader:
        transcript_chromosome = row[1]
        # look that chromosome up in the dict and print it if it exists
        if transcript_chromosome in OCR_dict:
            print(transcript_chromosome, OCR_dict[transcript_chromosome])
</snippet></ROW><ROW><id>6848170</id><snippet>getvalue()</snippet></ROW><ROW><id>6848170</id><snippet>fileitem = form["userfile"]
if fileitem.file:
    # It's an uploaded file; count lines
    linecount = 0
    while 1:
        line = fileitem.file.readline()
        if not line: break
        linecount = linecount + 1
</snippet></ROW><ROW><id>6848170</id><snippet>getfirst()</snippet></ROW><ROW><id>6848170</id><snippet>getvalue()</snippet></ROW><ROW><id>6848170</id><snippet>f = fs.getfirst('failas')
</snippet></ROW><ROW><id>6848170</id><snippet>f = fs['failas'].file
</snippet></ROW><ROW><id>6848376</id><snippet>telnetlib.telnet</snippet></ROW><ROW><id>6848376</id><snippet>read_until</snippet></ROW><ROW><id>6848376</id><snippet>class RPCConnection(object, Telnet):
  def __init__(self, host = 'localhost', port = 9198, auto = True):
    Telnet.__init__(self)

    self.host, self.port, self.connected = host, port, False

    if auto:
      self._connect()

  def _connect(self):
    self.open(self.host, self.port)

    self.connected = True

  def _disconnect(self):
    self.close()

    self.connected = False

  def _send(self, dict):
    self.write(json.dumps(dict))

  def _recv(self):
    resp = self.read_until('\n')

    try:
      return json.loads(resp)
    except Exception, e:
      print e
      print resp
</snippet></ROW><ROW><id>6848475</id><snippet>script1.py</snippet></ROW><ROW><id>6848475</id><snippet>script1.py</snippet></ROW><ROW><id>6848475</id><snippet>import subprocess, sys

subprocess.call(sys.argv[1:])
</snippet></ROW><ROW><id>6848475</id><snippet>sys.argv</snippet></ROW><ROW><id>6848475</id><snippet>print sys.argv[0]</snippet></ROW><ROW><id>6848475</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>6848475</id><snippet>sys.argv</snippet></ROW><ROW><id>6848475</id><snippet>subprocess.call</snippet></ROW><ROW><id>6848670</id><snippet>window.addstr()
window.refresh()
</snippet></ROW><ROW><id>6848670</id><snippet>#get current cursor position
curr_y, curr_x = window.getyx()

# depending on direction, update the cursor with
next_y, next_x = get_next_direction()

# place cursor in new position
window.move(next_y, next_x)

window.refresh()
</snippet></ROW><ROW><id>6848670</id><snippet># get current cursor position
curr_y, curr_x = window.getyx()

# save position for later use
start_y = curr_y; start_x = curr_x

# loop until 'v' is pressed again
while highlight_state:
    # change the attribute of the current character, for 1 character only, to reverse
    window.chgat(curr_y,curr_x, 1, curses.A_REVERSE)
    curr_y, curr_x = get_next_direction()

# save end state, this is buggy obviously, but you get the point
end_y = curr_y; end_x = curr_X
</snippet></ROW><ROW><id>6848670</id><snippet># get integer representation of char at positiong

outstr = ''
#from start to end
char_as_int = windows.inch(y,x)
char = char_as_int &amp; 0000FF
attr = char_as_int &amp; FFFF00 #not useful here, but maybe later

outstr += char
</snippet></ROW><ROW><id>6848844</id><snippet>User</snippet></ROW><ROW><id>6848844</id><snippet>delete</snippet></ROW><ROW><id>6848844</id><snippet>HttpRequest</snippet></ROW><ROW><id>6848844</id><snippet>user</snippet></ROW><ROW><id>6848844</id><snippet># myapp/signals.py
from django.dispatch import Signal
my_post_delete = Signal(providing_args=['instance', 'user'])

# myapp/models.py
from myapp.signals import my_post_delete
...
my_post_delete.connect(notify_on_delete, sender=Node)

# myapp/views.py
from myapp.signals import my_post_delete
...
@login_required
def my_delete_view(request, ...)
    ...
    instance = Node.objects.get(...)
    instance.delete()
    my_post_delete.send(sender=Node, instance=instance, user=request.user)
</snippet></ROW><ROW><id>6848951</id><snippet>time</snippet></ROW><ROW><id>6848951</id><snippet>null.*</snippet></ROW><ROW><id>6848951</id><snippet>$ i=0
$ time while [ $((i++)) -lt 1000 ] ; do python null.py ; done

real    0m55.777s
user    0m30.154s
sys 0m13.910s

$ i=0
$ time while [ $((i++)) -lt 1000 ] ; do node null.js ; done

real    1m37.618s
user    0m59.578s
sys 0m18.038s
</snippet></ROW><ROW><id>6848951</id><snippet>myscript.js</snippet></ROW><ROW><id>6848951</id><snippet>node myscript.js</snippet></ROW><ROW><id>6848951</id><snippet>Poll</snippet></ROW><ROW><id>6848951</id><snippet>multiprocessing</snippet></ROW><ROW><id>6848951</id><snippet>multiprocessing</snippet></ROW><ROW><id>6848951</id><snippet>.pyc</snippet></ROW><ROW><id>6849056</id><snippet>import csv
f = csv.reader(open('filename1.csv', 'rb'))
g = csv.reader(open('filename2.csv', 'rb'))
output = csv.writer(open('ouputfile.csv', 'wb'))
for row_f in f:
    row_g = g.next()
    row_output = list()
    for argi, item in enumerate(row_f):
        try:
            row_output.append(int(item) + int(row_g[argi]))
        except ValueError, e:
            pass
    output.writerow(row_output)
</snippet></ROW><ROW><id>6849263</id><snippet>export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:/usr/local/mysql/lib/"
</snippet></ROW><ROW><id>6849279</id><snippet>import re
from operator import itemgetter

def sorted_nicely(l, key):
    """ Sort the given iterable in the way that humans expect."""
    convert = lambda text: int(text) if text.isdigit() else text
    alphanum_key = lambda item: [ convert(c) for c in re.split('([0-9]+)', key(item)) ]
    return sorted(l, key = alphanum_key)


print sorted_nicely([('b10', 0), ('0', 1), ('b9', 2)], itemgetter(0))
</snippet></ROW><ROW><id>6849279</id><snippet>lambda item: item</snippet></ROW><ROW><id>6849279</id><snippet>operator.itemgetter(key_or_index_you_want)</snippet></ROW><ROW><id>6849279</id><snippet>operator.attrgetter('attribute_name_you_want')</snippet></ROW><ROW><id>6849279</id><snippet>[('0', 1), ('b9', 2), ('b10', 0)]
</snippet></ROW><ROW><id>6849575</id><snippet>A</snippet></ROW><ROW><id>6849575</id><snippet>B</snippet></ROW><ROW><id>6849575</id><snippet>C</snippet></ROW><ROW><id>6849575</id><snippet>B.PickTarget(self)</snippet></ROW><ROW><id>6849575</id><snippet>self.PickTarget()</snippet></ROW><ROW><id>6849575</id><snippet>B.Update(self)</snippet></ROW><ROW><id>6849575</id><snippet>A</snippet></ROW><ROW><id>6849575</id><snippet>B</snippet></ROW><ROW><id>6849575</id><snippet>C</snippet></ROW><ROW><id>6849575</id><snippet>B</snippet></ROW><ROW><id>6849575</id><snippet>B</snippet></ROW><ROW><id>6849575</id><snippet>A</snippet></ROW><ROW><id>6849575</id><snippet>A</snippet></ROW><ROW><id>6849575</id><snippet>A.method(self)</snippet></ROW><ROW><id>6849575</id><snippet>self.method()</snippet></ROW><ROW><id>6849575</id><snippet>method</snippet></ROW><ROW><id>6849575</id><snippet>A</snippet></ROW><ROW><id>6849575</id><snippet>A</snippet></ROW><ROW><id>6849575</id><snippet>B</snippet></ROW><ROW><id>6849575</id><snippet>A</snippet></ROW><ROW><id>6849575</id><snippet>super(B, self).move()</snippet></ROW><ROW><id>6849647</id><snippet>zip</snippet></ROW><ROW><id>6849647</id><snippet>zip.close()</snippet></ROW><ROW><id>6849647</id><snippet>for</snippet></ROW><ROW><id>6849647</id><snippet>extract</snippet></ROW><ROW><id>6849647</id><snippet>file(join("C:\\Incoming\\", name), 'wb').write(zip.read(each))
</snippet></ROW><ROW><id>6849647</id><snippet>zip.extract(each, "C:\\Incoming\\")
</snippet></ROW><ROW><id>6849647</id><snippet>extractall</snippet></ROW><ROW><id>6849838</id><snippet>else</snippet></ROW><ROW><id>6849838</id><snippet>for</snippet></ROW><ROW><id>6849838</id><snippet>if</snippet></ROW><ROW><id>6850178</id><snippet>from sqlalchemy import Column, Integer, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()
class X(Base):
    __tablename__ = 'x'
    id = Column(Integer, primary_key=True)
    x2y = relationship("Y")

class Y(Base):
    __tablename__ = 'y'
    id = Column(Integer, primary_key=True)
    x_id = Column(Integer, ForeignKey("x.id"))

assert X.x2y.property.mapper.class_ is Y
</snippet></ROW><ROW><id>6850256</id><snippet>=HYPERLINK("#Sheet3!F5","some text")
</snippet></ROW><ROW><id>6850260</id><snippet>import csv
import ldif

class ParseRecords(ldif.LDIFParser):
   def __init__(self, csv_writer):
       self.csv_writer = csv_writer
   def handle(self, dn, entry):
       self.csv_writer.writerow([entry['LoginId'], entry['mail']])

with open('/path/to/large_file') as input, with open('output_file', 'wb') as output:
    csv_writer = csv.writer(output)
    csv_writer.writerow(['LoginId', 'Mail'])
    ParseRecords(input, csv_writer).parse()
</snippet></ROW><ROW><id>6850260</id><snippet>import csv
import ldap

con = ldap.initialize('ldap://server.fqdn.system.edu')
# if you're LDAP directory requires authentication
# con.bind_s(username, password)

try:
    with open('output_file', 'wb') as output:
        csv_writer = csv.writer(output)
        csv_writer.writerow(['LoginId', 'Mail'])

        for dn, attrs in con.search_s('ou=Students,o=system.edu,o=system', ldap.SCOPE_SUBTREE, attrlist = ['LoginId','mail']:
            csv_writer.writerow([attrs['LoginId'], attrs['mail']])
finally:
    # even if you don't have credentials, it's usually good to unbind
    con.unbind_s()
</snippet></ROW><ROW><id>6850260</id><snippet>WHERE</snippet></ROW><ROW><id>6850734</id><snippet>class Model:
    class Option:
        @property
        def model(self): return Model
</snippet></ROW><ROW><id>6851286</id><snippet>colors = {'red': (255,0,0),
          'green': (0,255,0),
          'blue': (0,0,255),
          'yellow': (255,255,0),
          'orange': (255,127,0),
          'white': (255,255,255),
          'black': (0,0,0),
          'gray': (127,127,127),
          'pink': (255,127,127),
          'purple': (127,0,255),}
</snippet></ROW><ROW><id>6851286</id><snippet>def distance(left, right):
    return sum((l-r)**2 for l, r in zip(left, right))**0.5

class NearestColorKey(object):
    def __init__(self, goal):
        self.goal = goal
    def __call__(self, item):
        return distance(self.goal, item[1])
</snippet></ROW><ROW><id>6851286</id><snippet>min()</snippet></ROW><ROW><id>6851286</id><snippet>&gt;&gt;&gt; min(colors.items(), key=NearestColorKey((10,10,100)))
('black', (0, 0, 0))
&gt;&gt;&gt; min(colors.items(), key=NearestColorKey((10,10,200)))
('blue', (0, 0, 255))
&gt;&gt;&gt; min(colors.items(), key=NearestColorKey((100,10,200)))
('purple', (127, 0, 255))
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6851464</id><snippet>person = {
  'name': 'Joe',
  'age':  '35',
  'speak': lambda: 'o hai i am joe',
}
</snippet></ROW><ROW><id>6851464</id><snippet>person['speak']()
</snippet></ROW><ROW><id>6851485</id><snippet>os.path.realpath(__file__)</snippet></ROW><ROW><id>6851747</id><snippet>ForeignKey</snippet></ROW><ROW><id>6851747</id><snippet>South</snippet></ROW><ROW><id>6851747</id><snippet>video = models.ForeignKey(Video, default=Video.objects.all()[0])
</snippet></ROW><ROW><id>6851747</id><snippet>South</snippet></ROW><ROW><id>6851747</id><snippet>Video.objects.all()</snippet></ROW><ROW><id>6851747</id><snippet>Video</snippet></ROW><ROW><id>6851747</id><snippet>def get_default_video():
     return Video.objects.all()[0]

...
video = models.ForeignKey(Video, default=get_default_video)
</snippet></ROW><ROW><id>6851747</id><snippet>Video</snippet></ROW><ROW><id>6851891</id><snippet>from collections import defaultdict
steps = defaultdict(list)

for file in sys.argv[1:]:
  for row in csv.DictReader(open(file)):
    steps[row['label']].append(row['elapsed'])

averages = dict((key, sum(value)) for key, value in steps.iteritems())
</snippet></ROW><ROW><id>6851891</id><snippet>row['elapsed']</snippet></ROW><ROW><id>6851891</id><snippet>label</snippet></ROW><ROW><id>6851891</id><snippet>string1 + string2</snippet></ROW><ROW><id>6851891</id><snippet>averages = {}
for item in result.iteritems():
    print item[0], sum(item[1])
</snippet></ROW><ROW><id>6852162</id><snippet>get_override</snippet></ROW><ROW><id>6852162</id><snippet>()</snippet></ROW><ROW><id>6852162</id><snippet>Predicate</snippet></ROW><ROW><id>6852162</id><snippet>PredicateWrap</snippet></ROW><ROW><id>6852162</id><snippet>PredicateWrap</snippet></ROW><ROW><id>6852257</id><snippet>PyType_IsSubtype(child, parent)</snippet></ROW><ROW><id>6852257</id><snippet>PyTypeObject*</snippet></ROW><ROW><id>6852257</id><snippet>PyObject*</snippet></ROW><ROW><id>6852271</id><snippet>74 6f 6b 65 6e</snippet></ROW><ROW><id>6852271</id><snippet>a3 96 92 85 95</snippet></ROW><ROW><id>6852271</id><snippet>'text' == u'text'</snippet></ROW><ROW><id>6852271</id><snippet>True</snippet></ROW><ROW><id>6852271</id><snippet>'\xfd' == u'\xfd'</snippet></ROW><ROW><id>6852271</id><snippet>False</snippet></ROW><ROW><id>6852271</id><snippet>'text' == b'text'</snippet></ROW><ROW><id>6852271</id><snippet>False</snippet></ROW><ROW><id>6852271</id><snippet>b'text'</snippet></ROW><ROW><id>6852271</id><snippet>'text'</snippet></ROW><ROW><id>6852271</id><snippet>char</snippet></ROW><ROW><id>6852271</id><snippet>java.lang.String(byte[] data)</snippet></ROW><ROW><id>6852271</id><snippet>U+10000</snippet></ROW><ROW><id>6852271</id><snippet>open('a\x08b', 'w').write('Say my name!')</snippet></ROW><ROW><id>6852369</id><snippet>#!/usr/bin/env python

d = {
    'key1' : ['A', 'B', 'C'], 
    'key2' : ['B', 'A', 'G'], 
    'key3' : ['Z', 'H', 'I']
}

l = ['A', 'A', 'B', 'D']

uniq_l = set(l) # you don't need to check duplicates twice

for key, value in d.items():
    if value[0] in uniq_l:
        print "Match", key, value

# Output:
# Match key2 ['B', 'A', 'G']
# Match key1 ['A', 'B', 'C']
</snippet></ROW><ROW><id>6852738</id><snippet>&gt;&gt;&gt; key = operator.itemgetter(0)
&gt;&gt;&gt; grouped = itertools.groupby(sorted(fileListCode, key=key), key=key)
&gt;&gt;&gt; [(i, {k[1]: n for n, k in enumerate(j, 1)}) for i, j in grouped]
[('Seq3.xls', {'B08524_052': 1, 'B08524_053': 2, 'B08524_054': 3}),
 ('Seq98.xls', {'B25034_001': 1, 'B25034_002': 2, 'B25034_003': 3})]
</snippet></ROW><ROW><id>6852738</id><snippet>&gt;&gt;&gt; [(i, dict((k[1], n) for n, k in enumerate(j, 1))) for i, j in grouped]
[('Seq3.xls', {'B08524_052': 1, 'B08524_053': 2, 'B08524_054': 3}),
 ('Seq98.xls', {'B25034_001': 1, 'B25034_002': 2, 'B25034_003': 3})]
</snippet></ROW><ROW><id>6852738</id><snippet>&gt;&gt;&gt; {i: {k[1]: n for n, k in enumerate(j, 1)} for i, j in grouped}
{'Seq3.xls': {'B08524_052': 1, 'B08524_053': 2, 'B08524_054': 3},
 'Seq98.xls': {'B25034_001': 1, 'B25034_002': 2, 'B25034_003': 3}}
</snippet></ROW><ROW><id>6852804</id><snippet>eval</snippet></ROW><ROW><id>6852804</id><snippet>eval</snippet></ROW><ROW><id>6852831</id><snippet>for k in tab.keys():
    tab[k] += 5
</snippet></ROW><ROW><id>6853131</id><snippet>def __init__(self):
    self.participants = []
    self.teams = []
    self.attacked = []
    self.fighting = 0
</snippet></ROW><ROW><id>6853232</id><snippet>fourcc = cv.CV_FOURCC('X','V','I','D')
fps = 25.0 # or 30.0 for a better quality stream
writer = cv.CreateVideoWriter(file, fourcc, 25.0, (800,600), is_color=1)
</snippet></ROW><ROW><id>6853232</id><snippet>writer = cv.CreateVideoWriter(
    filename=file,
    fourcc=cv.CV_FOURCC('X','V','I','D'),
    fps=25.0,
    frame_size=(800,600),
    is_color=1)
</snippet></ROW><ROW><id>6853232</id><snippet>cv.CV_FOURCC('H','F','Y','U') # HuffYUV
cv.CV_FOURCC('D','R','A','C') # BBC Dirac
cv.CV_FOURCC('X','V','I','D') # MPEG-4 Part 2
cv.CV_FOURCC('X','2','6','4') # MPEG-4 Part 10 (aka. H.264 or AVC)
cv.CV_FOURCC('M','P','1','V') # MPEG-1 video
</snippet></ROW><ROW><id>6853304</id><snippet>last_ping = time.time()
threshold = 5 * 60 # five minutes, make this whatever you want
while connected:
    data = irc.recv ( 4096 )
    # If Nick is in use
    if data.find ( 'Nickname is already in use' ) != -1:
        NICK = NICK + str(time.time())
        Connection()
    # Ping Pong so we don't get disconnected
    if data.find ( 'PING' ) != -1:
        irc.send ( 'PONG ' + data.split() [ 1 ] + '\r\n' )
        last_ping = time.time()
    if (time.time() - last_ping) &gt; threshold:
        break
</snippet></ROW><ROW><id>6853304</id><snippet>connected</snippet></ROW><ROW><id>6853304</id><snippet>while connected == True:</snippet></ROW><ROW><id>6853304</id><snippet>while connected:</snippet></ROW><ROW><id>6853304</id><snippet>connection</snippet></ROW><ROW><id>6853304</id><snippet>Connection</snippet></ROW><ROW><id>6853435</id><snippet>import re, StringIO, sys

def exec_block(block, variables):
    """Captures output of exec'd code block"""
    code = compile(block.strip(), '&lt;string&gt;', 'exec')
    _stdout, result = sys.stdout, StringIO.StringIO()
    sys.stdout = sys.__stdout__ = result
    exec(code, variables)
    sys.stdout = sys.__stdout__ = _stdout
    return result.getvalue()

def format_template(template):
    """Replaces code blocks with {0} for string formating later"""
    def sub_blocks(matchobj):
        """re.sub function, adds match to blocks and replaces with {0}"""
        blocks.append(matchobj.group(0)[2:-2].strip())
        return '{0}'

    blocks = []
    template = re.sub(r'&lt;:.+?:&gt;', sub_blocks, template, flags=re.DOTALL).splitlines()
    blocks.reverse()
    return blocks, template

def render_template(blocks, template):
    """renders template, execs each code block and stores variables as we go"""
    composed, variables = [], {}
    for line in template:
        if '{0}' in line:
            replacement = exec_block(blocks.pop(), variables).strip()
            line = line.format(replacement)
        if not line.startswith('#') and '=' in line:
            k, v = [x.strip() for x in line.split('=')]
            variables[k] = v
        composed.append(line)
    return '\n'.join(composed)

if __name__ == '__main__':
    import sys
    with open(sys.argv[1]) as f:
        blocks, template = format_template(f.read())
        print rend_template(blocks, template)
</snippet></ROW><ROW><id>6853435</id><snippet>VAR = value
LONGER = &lt;:
    print 'something'
:&gt;
VAR1 = &lt;: print VAR :&gt;1
# comment
VAR2 = &lt;: print VAR1 :&gt;2
VAR3 = &lt;: print VAR2 :&gt;3
VAR4 = &lt;: print VAR3 :&gt;4
</snippet></ROW><ROW><id>6853435</id><snippet>VAR = value
LONGER = something
VAR1 = value1
# comment
VAR2 = value12
VAR3 = value123
VAR4 = value1234
</snippet></ROW><ROW><id>6853489</id><snippet>__getitem__</snippet></ROW><ROW><id>6853489</id><snippet>__iter__</snippet></ROW><ROW><id>6853533</id><snippet>__file__</snippet></ROW><ROW><id>6853533</id><snippet>sys.path</snippet></ROW><ROW><id>6853533</id><snippet>for dirname in sys.path:
   if os.path.exists( os.path.join(dirname,__file__) ):
       # The directory name for `__file__` was dirname
</snippet></ROW><ROW><id>6853766</id><snippet>getopt</snippet></ROW><ROW><id>6853766</id><snippet>--</snippet></ROW><ROW><id>6853766</id><snippet>Python 2.6.6 (r266:84292, Jun 16 2011, 16:59:16) 
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from getopt import getopt
&gt;&gt;&gt;
&gt;&gt;&gt; argv = ['-v', '--plugin=foo', '--', '--extra=bar', '-c']
&gt;&gt;&gt; opts, extra = getopt(argv, 'v', 'plugin=')
&gt;&gt;&gt;
&gt;&gt;&gt; opts
[('-v', ''), ('--plugin', 'foo')]
&gt;&gt;&gt;
&gt;&gt;&gt; extra
['--extra=bar', '-c']
</snippet></ROW><ROW><id>6853766</id><snippet>argv</snippet></ROW><ROW><id>6853766</id><snippet>&gt; main.py -v --plugin=Foo -- --extra=bar -c
</snippet></ROW><ROW><id>6853978</id><snippet>__foo__()</snippet></ROW><ROW><id>6853978</id><snippet>__getattr__()</snippet></ROW><ROW><id>6853978</id><snippet>object.attribute</snippet></ROW><ROW><id>6853978</id><snippet>__getattr__()</snippet></ROW><ROW><id>6853978</id><snippet>__getattr__()</snippet></ROW><ROW><id>6853978</id><snippet>__getitem__()</snippet></ROW><ROW><id>6853978</id><snippet>__eq__()</snippet></ROW><ROW><id>6853978</id><snippet>+</snippet></ROW><ROW><id>6853978</id><snippet>with</snippet></ROW><ROW><id>6853978</id><snippet>CompiledMethod</snippet></ROW><ROW><id>6854096</id><snippet>class A(object):
    def f():
        print 'foo'
</snippet></ROW><ROW><id>6854096</id><snippet>a = A()
a.f()
</snippet></ROW><ROW><id>6854096</id><snippet>class A:
    pass
</snippet></ROW><ROW><id>6854096</id><snippet>__init__</snippet></ROW><ROW><id>6854096</id><snippet>__init__</snippet></ROW><ROW><id>6854096</id><snippet>class BankAccount(object):
    def __init__(self, deposit):
        self.amount = deposit

    def withdraw(self, amount):
        self.amount -= amount

    def deposit(self, amount):
        self.amount += amount

    def balance(self):
        return self.amount

# Let me create an instance of 'BankAccount' class with the initial
# balance as $2000.
myAccount = BankAccount(2000)

# Let me check if the balance is right.
print myAccount.balance()

# Let me deposit my salary
myAccount.deposit(10000)

# Let me withdraw some money to buy dinner.
myAccount.withdraw(15)

# What's the balance left?
print myAccount.balance()
</snippet></ROW><ROW><id>6854096</id><snippet>class A</snippet></ROW><ROW><id>6854096</id><snippet>a = A()</snippet></ROW><ROW><id>6854096</id><snippet>a.foo(x, y)</snippet></ROW><ROW><id>6854096</id><snippet>Python</snippet></ROW><ROW><id>6854096</id><snippet>foo(a, x, y)</snippet></ROW><ROW><id>6854096</id><snippet>class A</snippet></ROW><ROW><id>6854096</id><snippet>self</snippet></ROW><ROW><id>6854365</id><snippet>\r\n</snippet></ROW><ROW><id>6855128</id><snippet>QDesktopWidget *pDesktop = QApplication::desktop ();

//Get 1st screen's geometry
QRect RectScreen0 = pDesktop-&gt;screenGeometry (0);

//Move the widget to first screen without changing its geometry
my_Widget-&gt;move (RectScreen0.left(),RectScreen0.top());

my_pWidget-&gt;resize (RectScreen0.width(),RectScreen0.height());

my_Widget-&gt;showMaximized();
</snippet></ROW><ROW><id>6855416</id><snippet>x1 = np.random.uniform(size=2**17-1)
x2 = np.random.uniform(size=2**17)

np.fft.fft(x1)
np.fft.fft(x2)
</snippet></ROW><ROW><id>6855556</id><snippet>.doc</snippet></ROW><ROW><id>6855556</id><snippet>.doc</snippet></ROW><ROW><id>6855556</id><snippet>subprocess</snippet></ROW><ROW><id>6855556</id><snippet>subprocess</snippet></ROW><ROW><id>6855634</id><snippet>||</snippet></ROW><ROW><id>6855634</id><snippet>x = obj.key || "default";
</snippet></ROW><ROW><id>6855634</id><snippet>x</snippet></ROW><ROW><id>6855634</id><snippet>obj.key</snippet></ROW><ROW><id>6855634</id><snippet>obj.key</snippet></ROW><ROW><id>6855634</id><snippet>undefined</snippet></ROW><ROW><id>6855634</id><snippet>0</snippet></ROW><ROW><id>6855634</id><snippet>false</snippet></ROW><ROW><id>6855634</id><snippet>""</snippet></ROW><ROW><id>6855634</id><snippet>null</snippet></ROW><ROW><id>6855634</id><snippet>obj.key</snippet></ROW><ROW><id>6855634</id><snippet>0</snippet></ROW><ROW><id>6855634</id><snippet>||</snippet></ROW><ROW><id>6855634</id><snippet>in</snippet></ROW><ROW><id>6855634</id><snippet>x = "key" in obj ? obj.key : "default";
</snippet></ROW><ROW><id>6855634</id><snippet>in</snippet></ROW><ROW><id>6855634</id><snippet>obj.key</snippet></ROW><ROW><id>6855634</id><snippet>0</snippet></ROW><ROW><id>6855634</id><snippet>in</snippet></ROW><ROW><id>6855634</id><snippet>hasOwnProperty</snippet></ROW><ROW><id>6855634</id><snippet>x = obj.hasOwnProperty("key") ? obj.key : "default";
</snippet></ROW><ROW><id>6855634</id><snippet>undefined</snippet></ROW><ROW><id>6855634</id><snippet>x = typeof obj.key !== "undefined" ? obj.key : "default";
</snippet></ROW><ROW><id>6855634</id><snippet>obj</snippet></ROW><ROW><id>6855634</id><snippet>undefined</snippet></ROW><ROW><id>6856018</id><snippet>data = [(107, u'Ella', u'Fitzgerald'), (108, u'Louis', u'Armstrong'), (109, u'Miles', u'Davis'), (110, u'Benny', u'Goodman')]

for record in data:
    print '{0:}, {1:}, {2:}'.format(*record)

# or in case you want to get a dictionary

d = dict([(x[0], ', '.join(x[1:])) for x in a])# sure that you can skip merging name and surname here(just replace join with x[1:])
for k, v in d.iteritems():
    print '%s, %s' % (k, v)

&gt;&gt;&gt;107 Ella, Fitzgerald
&gt;&gt;&gt;108 Louis, Armstrong
&gt;&gt;&gt;109 Miles, Davis
&gt;&gt;&gt;110 Benny, Goodman
</snippet></ROW><ROW><id>6856155</id><snippet>import pylab as pl
import numpy as np

data = np.random.normal(size=10000)
pl.hist(data, bins=np.logspace(0.1, 1.0, 50))
pl.gca().set_xscale("log")
pl.show()
</snippet></ROW><ROW><id>6856228</id><snippet>class C(object):
  def __init__(self, x):
    self._x = x

  def get_x(self):
    return self._x
  def set_x(self, x):
    self._x = x
  x = property(get_x, set_x)

obj = C(5)
obj.x = 6    # set
print obj.x  # get
</snippet></ROW><ROW><id>6856243</id><snippet>row_list = list(db_rows)

for row in row_list:
   ...
</snippet></ROW><ROW><id>6856360</id><snippet>[(Item1.a, Item2.a), (Item1.b, Item2.b)]</snippet></ROW><ROW><id>6856360</id><snippet>ItemX</snippet></ROW><ROW><id>6856360</id><snippet>for prop in ('a', 'b'):
    i2prop = getattr(Item2, prop)
    if getattr(Item1, prop) != i2prop:
        setattr(Item1, prop, i2prop)
</snippet></ROW><ROW><id>6856360</id><snippet>ItemX</snippet></ROW><ROW><id>6856360</id><snippet>for x, y, prop in ((Item1, Item2, 'a'), (Item1, Item2, 'b')):
    yprop = getattr(y, prop)
    if getattr(x, prop) != yprop:
        setattr(x, prop, yprop)
</snippet></ROW><ROW><id>6856504</id><snippet>lip_shapes = {
    'aa': ['neutral', 'lower lip under upper teeth'],
    'ae': ['lips touch', 'lip spread'],
    # etc...
}
</snippet></ROW><ROW><id>6856504</id><snippet>lip_shapes['aa']</snippet></ROW><ROW><id>6856504</id><snippet>NEUTRAL = 0
LOWER_LIP_UNDER_UPPER_TEETH = 1
LIPS_TOUCH = 2
LIP_SPREAD = 3

lip_shapes = {
    'aa': [NEUTRAL, LOWER_LIP_UNDER_UPPER_TEETH],
    # etc...
}
</snippet></ROW><ROW><id>6856504</id><snippet>NameError</snippet></ROW><ROW><id>6856565</id><snippet>import os

def matlab_installed():
    for path in os.environ["PATH"].split(";"):
        if os.path.isfile(os.path.join(path, "matlab.exe")):
            return True
    return False
</snippet></ROW><ROW><id>6856810</id><snippet>from PyQt4.QtCore import QUrl, QFileInfo, QFile, QIODevice
from PyQt4.QtGui import QApplication, QDialog, QProgressBar, QLabel, QPushButton, QDialogButtonBox, \
                    QVBoxLayout, QMessageBox
from PyQt4.QtNetwork import QHttp

url_to_download = 'http://www.riverbankcomputing.co.uk/static/Downloads/sip4/sip-4.12.3.zip'

class Downloader(QDialog):
    def __init__(self, parent=None):
        super(Downloader, self).__init__(parent)

        self.httpGetId = 0
        self.httpRequestAborted = False
        self.statusLabel = QLabel('Downloading %s' % url_to_download)
        self.closeButton = QPushButton("Close")
        self.closeButton.setAutoDefault(False)
        self.progressBar = QProgressBar()

        buttonBox = QDialogButtonBox()
        buttonBox.addButton(self.closeButton, QDialogButtonBox.RejectRole)

        self.http = QHttp(self)
        self.http.requestFinished.connect(self.httpRequestFinished)
        self.http.dataReadProgress.connect(self.updateDataReadProgress)
        self.http.responseHeaderReceived.connect(self.readResponseHeader)
        self.closeButton.clicked.connect(self.cancelDownload)

        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.statusLabel)
        mainLayout.addWidget(self.progressBar)
        mainLayout.addWidget(buttonBox)
        self.setLayout(mainLayout)

        self.setWindowTitle('Download Example')
        self.downloadFile()

    def downloadFile(self):
        url = QUrl(url_to_download)
        fileInfo = QFileInfo(url.path())
        fileName = fileInfo.fileName()

        if QFile.exists(fileName):
            QFile.remove(fileName)

        self.outFile = QFile(fileName)
        if not self.outFile.open(QIODevice.WriteOnly):
            QMessageBox.information(self, 'Error',
                    'Unable to save the file %s: %s.' % (fileName, self.outFile.errorString()))
            self.outFile = None
            return

        mode = QHttp.ConnectionModeHttp
        port = url.port()
        if port == -1:
            port = 0
        self.http.setHost(url.host(), mode, port)
        self.httpRequestAborted = False

        path = QUrl.toPercentEncoding(url.path(), "!$&amp;'()*+,;=:@/")
        if path:
            path = str(path)
        else:
            path = '/'

        # Download the file.
        self.httpGetId = self.http.get(path, self.outFile)

    def cancelDownload(self):
        self.statusLabel.setText("Download canceled.")
        self.httpRequestAborted = True
        self.http.abort()
        self.close()

    def httpRequestFinished(self, requestId, error):
        if requestId != self.httpGetId:
            return

        if self.httpRequestAborted:
            if self.outFile is not None:
                self.outFile.close()
                self.outFile.remove()
                self.outFile = None
            return

        self.outFile.close()

        if error:
            self.outFile.remove()
            QMessageBox.information(self, 'Error',
                    'Download failed: %s.' % self.http.errorString())

        self.statusLabel.setText('Done')       

    def readResponseHeader(self, responseHeader):
        # Check for genuine error conditions.
        if responseHeader.statusCode() not in (200, 300, 301, 302, 303, 307):
            QMessageBox.information(self, 'Error',
                    'Download failed: %s.' % responseHeader.reasonPhrase())
            self.httpRequestAborted = True
            self.http.abort()

    def updateDataReadProgress(self, bytesRead, totalBytes):
        if self.httpRequestAborted:
            return
        self.progressBar.setMaximum(totalBytes)
        self.progressBar.setValue(bytesRead)

if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    downloader = Downloader()
    downloader.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>6857129</id><snippet>#!/usr/bin/perl

use Bencode qw( bencode bdecode );
use Data::Dumper;

use warnings;
use strict;

my $G_PEER_ID = "hfgdbvnchdgfhvnfbghf";
my $G_MAX_TIME = 20;

sub peer_decode
{
    my $d = shift;
    my @a = split '', $d;
#    printf "&gt;&gt;%d %d&lt;&lt;\n", length($d), scalar(@a);

    my @ret;

    while(@a) {
        my $ip = sprintf "%d.%d.%d.%d" ,
                unpack('C',shift(@a)),
                unpack('C',shift(@a)),
                unpack('C',shift(@a)),
                unpack('C',shift(@a));
        my $port = sprintf "%d", 256 * unpack('C',shift(@a))
                                     + unpack('C',shift(@a));

#        printf "%d $ip $port\n",scalar(@a);
        push @ret, $ip;
    }
    return \@ret;
}


sub get_tracker_data_from_file
{
    my $fname = shift;

    my $ret = {};

    my $c = `transmission-show $fname`;

    print STDERR "$c\n";

    if ( $c =~ /^\s+Hash:\s*(\S+)/mg ) {
        $ret-&gt;{'hash'} = $1;
    }

    if ( $c =~ /^\s+Total Size:\s*(.+)$/mg ) {
        $ret-&gt;{'size'} = $1;
    }

    my @g;
    @g = ($c =~ /Tier \#\d+[\n\r\s]+(\S+)/gm);
    if ( @g ) {
        $ret-&gt;{'tiers'} = \@g;
    }

    return $ret;

}

sub get_peer_ips
{
    my $hash = shift;
    my $tracker = shift;

    my $ret = undef;

    $hash =~ s/(..)/\%$1/g;
    $tracker =~ s/\/$//;

    my $c = "curl -m $G_MAX_TIME -s '$tracker?info_hash=$hash&amp;peer_id=$G_PEER_ID&amp;uploaded=0&amp;downloaded=0&amp;left=1'";
    print STDERR "$c\n";

    my $w = `$c`;
    return undef if not $w;
    printf STDERR "%s\n" , Dumper($w);
    return undef if $w =~ /&lt;\s*html\s*&gt;/gi;

    $w = bdecode($w, 1);

    if ( defined $w-&gt;{'peers'} ) {
        $ret = peer_decode($w-&gt;{'peers'});
    }
    return $ret;
}

# -- main

my @files = @ARGV;

if ( not @files ) {
    print &lt;&lt;END
    usage: $0 &lt;file1.torrent&gt; &lt;file2.torrent&gt; ...

    (c) http://stackoverflow.com/users/497208
END
}

for my $fname ( @files ) {
    printf STDERR "File: %s\n", $fname;

    my $tr = get_tracker_data_from_file($fname);
    printf STDERR "%s\n", Dumper $tr;

    my $hash = undef;
    $hash = $tr-&gt;{'hash'} if defined $tr-&gt;{'hash'};
    exit if not defined $hash;

    my $size = undef;
    if ( defined $tr-&gt;{'size'} ) {
        $size = $tr-&gt;{'size'};
    }
    else {
        $size = "?";
    }

    if ( defined $tr-&gt;{'tiers'} ) {
    #    shift @{$tr-&gt;{'tiers'}} for (1..5);
        for my $tracker ( @{$tr-&gt;{'tiers'}} ) {

            my $ips = get_peer_ips( $hash, $tracker);
            printf STDERR "%s\n", Dumper $ips;

            if ( defined $ips ) {
                for my $ip ( @$ips ) {
                    my $c = sprintf "%s; %16s; %s; %s", $hash, $ip, $size, $tracker;
                    printf STDERR "$c\n";
                    printf "$c\n";
                }
            }
        }
    }
}
</snippet></ROW><ROW><id>6857253</id><snippet>.+?</snippet></ROW><ROW><id>6857253</id><snippet>.+</snippet></ROW><ROW><id>6857253</id><snippet>.+</snippet></ROW><ROW><id>6857908</id><snippet>.docx</snippet></ROW><ROW><id>6857908</id><snippet>.doc</snippet></ROW><ROW><id>6858345</id><snippet>def http_auth_callback(arguments):
    print dir(arguments)
</snippet></ROW><ROW><id>6858345</id><snippet>sb = spynner.Browser()

sb.set_http_authentication_callback(http_auth_callback) # if using global scope
sb.set_http_authentication_callback(self.http_auth_callback) # if inside a class and the callback function is declared as a method

sb.load(URL)
</snippet></ROW><ROW><id>6858365</id><snippet>def append(self, x):
    self.fd.seek(self.wpos)
    self.pickler.clear_memo()
    self.pickler.dump(x)
    self.wpos = self.fd.tell()
    self.size = self.size + 1
</snippet></ROW><ROW><id>6858365</id><snippet>def append(self, x):
    self.fd.seek(self.wpos)
    print len(self.pickler.memo)
    self.pickler.dump(x)
    self.wpos = self.fd.tell()
    self.size = self.size + 1
</snippet></ROW><ROW><id>6858851</id><snippet>read.csv</snippet></ROW><ROW><id>6858851</id><snippet>coxph</snippet></ROW><ROW><id>6858851</id><snippet>read.table</snippet></ROW><ROW><id>6859112</id><snippet>__init__()</snippet></ROW><ROW><id>6859112</id><snippet>self</snippet></ROW><ROW><id>6859112</id><snippet>__init__()</snippet></ROW><ROW><id>6859112</id><snippet>__init__()</snippet></ROW><ROW><id>6859112</id><snippet>__init__()</snippet></ROW><ROW><id>6859315</id><snippet>dict.pop()</snippet></ROW><ROW><id>6859315</id><snippet>class SomeSuperclass(object):
  def some_method(self, *args, **kwargs):
    print 'SomeSuperclass: args=%s kwargs=%s' % (args, kwargs)

class SomeClass(SomeSuperclass):
  def some_method(self, *args, **kwargs):
    my_kwarg = kwargs.pop('my_kwarg', 42) # 42 is the default
    print 'SomeClass: my_kwarg=%s' % my_kwarg
    super(SomeClass, self).some_method(*args, **kwargs)

SomeClass().some_method('arg 0', 'arg 1', some_kwargs=5, my_kwarg=8)
SomeClass().some_method('arg 0', 'arg 1', some_kwargs=5)
</snippet></ROW><ROW><id>6859315</id><snippet>SomeClass: my_kwarg=8
SomeSuperclass: args=('arg 0', 'arg 1') kwargs={'some_kwargs': 5}
SomeClass: my_kwarg=42
SomeSuperclass: args=('arg 0', 'arg 1') kwargs={'some_kwargs': 5}
</snippet></ROW><ROW><id>6859374</id><snippet>f(a)</snippet></ROW><ROW><id>6859374</id><snippet>(b for a in range(10) for b in [f(a)] if b &lt; 50)
</snippet></ROW><ROW><id>6859374</id><snippet>(b for b in (f(a) for a in range(10)) if b &lt; 50)
</snippet></ROW><ROW><id>6859619</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>6859682</id><snippet>static PyObject* test_addignore(PyObject *self, PyObject *args) {
    char* ignorestring;
    if (!PyArg_ParseTuple(args,"s", &amp;ignorestring)) //Note the &amp;
        return NULL;                                //Never ignore errors
    add_global_ignore(ignorestring);

    return Py_RETURN_NONE;  //Always use helper macros
}
</snippet></ROW><ROW><id>6859999</id><snippet>import re

t = "http://www.egg1.com http://egg2.com egg3 egg4"

p = re.compile('(http://\S+)|(egg\d)')
for url, egg in p.findall(t):
  if egg:
    print egg
</snippet></ROW><ROW><id>6859999</id><snippet>re.sub()</snippet></ROW><ROW><id>6859999</id><snippet>p = re.compile(r'(http://\S+)|(egg(\d+))')

def repl(match):
    if match.group(2):
        return 'spam{0}'.format(match.group(3))
    return match.group(0)

print p.sub(repl, t)
</snippet></ROW><ROW><id>6860048</id><snippet>In [7]: float("'1234'")
ValueError: invalid literal for float(): '1234'
</snippet></ROW><ROW><id>6860048</id><snippet>In [8]: float("'1234'".strip("'"))
Out[9]: 1234.0
</snippet></ROW><ROW><id>6860324</id><snippet>fileno = 0</snippet></ROW><ROW><id>6860324</id><snippet>fileno = -1</snippet></ROW><ROW><id>6860324</id><snippet>-1</snippet></ROW><ROW><id>6860324</id><snippet>mmap.mmap(0, 256)</snippet></ROW><ROW><id>6860324</id><snippet>errno=19 (No such device)</snippet></ROW><ROW><id>6860324</id><snippet>mmap.mmap(-1, 256)</snippet></ROW><ROW><id>6860324</id><snippet>fileno = 0</snippet></ROW><ROW><id>6860324</id><snippet>fileno = -1</snippet></ROW><ROW><id>6860324</id><snippet>Modules/mmapmodule.c</snippet></ROW><ROW><id>6860373</id><snippet>class CSSSelector(etree.XPath):
    """ ...
    To use CSS namespaces, you need to pass a prefix-to-namespace
    mapping as ``namespaces`` keyword argument::

        &gt;&gt;&gt; rdfns = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'
        &gt;&gt;&gt; select_ns = cssselect.CSSSelector('root &gt; rdf|Description',
        ...                                   namespaces={'rdf': rdfns})

        &gt;&gt;&gt; rdf = etree.XML((
        ...     '&lt;root xmlns:rdf="%s"&gt;'
        ...       '&lt;rdf:Description&gt;blah&lt;/rdf:Description&gt;'
        ...     '&lt;/root&gt;') % rdfns)
        &gt;&gt;&gt; [(el.tag, el.text) for el in select_ns(rdf)]
        [('{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Description', 'blah')]
    """
</snippet></ROW><ROW><id>6860373</id><snippet>cssselect.CSSSelector</snippet></ROW><ROW><id>6860373</id><snippet>namespaces</snippet></ROW><ROW><id>6860394</id><snippet>def processImage(...):
    pass

def main_IP(imgRoot, stop_ncrement, process_image):
    name = update_the_increment(imgRoot, stop_increment)
    img = load_the_image(name)
    out_img = process_image(img)
    displays_images(img, out_img)
    return out_img

main_IP('./', 100, processImage)
</snippet></ROW><ROW><id>6860479</id><snippet>&gt;&gt;&gt; s="chr8    584401  589500  deletion"
&gt;&gt;&gt; l = s.split()
&gt;&gt;&gt; l
['chr8', '584401', '589500', 'deletion']
&gt;&gt;&gt; int(l[1]) - int(l[2])
-5099
</snippet></ROW><ROW><id>6860768</id><snippet>self.response.headers.add_header("Set-Cookie", "access_token=deleted; Expires=Thu, 01-Jan-1970 00:00:00 GMT")
</snippet></ROW><ROW><id>6860832</id><snippet>return</snippet></ROW><ROW><id>6860832</id><snippet>connections = [Connection(arg_list_one), Connection(arg_list_two)]
for connection in connections:
    connection.run()
</snippet></ROW><ROW><id>6861435</id><snippet>callable()</snippet></ROW><ROW><id>6861435</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree
&gt;&gt;&gt; elt = ElementTree.Element("")
&gt;&gt;&gt; callable(elt.keys)
True
&gt;&gt;&gt; callable(elt.text)
False
</snippet></ROW><ROW><id>6861479</id><snippet>(?:...)</snippet></ROW><ROW><id>6861479</id><snippet>(?=...)</snippet></ROW><ROW><id>6861627</id><snippet>while</snippet></ROW><ROW><id>6861627</id><snippet>i=9
while (i&lt;len(headerRow)):
    # Attempt to retrieve an entry's corresponding primary key.
    row = cursor.fetchone()

    if row == None: # New Entry
        # Add entry to database
        print "New Entry Added!"
    else: # Entry already exists
        print "Existing Entry"
        qpID = row[0]
        i += 1
        # ...
</snippet></ROW><ROW><id>6861854</id><snippet>sys</snippet></ROW><ROW><id>6861854</id><snippet>os</snippet></ROW><ROW><id>6861854</id><snippet>condition = True

if condition:
    class C(object):
        os = __import__['os']
        def __init__(self):
            print self.os.listdir

    C.os
    c = C()
</snippet></ROW><ROW><id>6861854</id><snippet>__new__</snippet></ROW><ROW><id>6861854</id><snippet>__init__</snippet></ROW><ROW><id>6861886</id><snippet>import urllib, urllib2
from poster.encode import multipart_encode
from poster.streaminghttp import register_openers

def queXF():
    register_openers()
    url = "http://lilix2/trunk/admin/new.php"
    values = {'form':open('test.pdf'),
          'bandingxml':open('banding.xml'),
          'desc':'description'}
    data, headers = multipart_encode(values)
    headers['User-Agent'] = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
    request = urllib2.Request(url, data, headers)
    request.unverifiable = True
    response = urllib2.urlopen(request)
    the_page = response.read()
</snippet></ROW><ROW><id>6861886</id><snippet>headers['User-Agent']</snippet></ROW><ROW><id>6861886</id><snippet>request.unverifiable = True</snippet></ROW><ROW><id>6862238</id><snippet>C:\Users\Brandon\Experiment\Python_ex</snippet></ROW><ROW><id>6862238</id><snippet>ex25</snippet></ROW><ROW><id>6862238</id><snippet>import sys
sys.path.append(r'C:\Users\Brandon\Experiment\Python_ex')
</snippet></ROW><ROW><id>6862413</id><snippet>{{ modelform.instance.field }}</snippet></ROW><ROW><id>6862413</id><snippet>form.fields['field_name'].widget = forms.HiddenInput()
</snippet></ROW><ROW><id>6863203</id><snippet>&gt;&gt;&gt; sims
array([[  0.,   0.,   0.,   1.,   5.,   0.],
       [  0.,   1.,   0.,   1.,  10.,   0.],
       [  0.,   1.,   0.,   1.,  15.,   0.],
       [  0.,   0.,   0.,   0.,  20.,   0.]])
</snippet></ROW><ROW><id>6863203</id><snippet>&gt;&gt;&gt; d
{ ((0, 0, 0, 1), 5):  -1,
  ((0, 0, 0, 0), 20): -4,
  ((0, 1, 0, 1), 15): -3,
  ((0, 1, 0, 1), 10): -2 }
</snippet></ROW><ROW><id>6863203</id><snippet>for row in sims:
    key = (tuple(row[:4]), row[4])

    row[5] = d[key]
</snippet></ROW><ROW><id>6863203</id><snippet>&gt;&gt;&gt; sims
array([[  0.,   0.,   0.,   1.,   5.,  -1.],
       [  0.,   1.,   0.,   1.,  10.,  -2.],
       [  0.,   1.,   0.,   1.,  15.,  -3.],
       [  0.,   0.,   0.,   0.,  20.,  -4.]])
</snippet></ROW><ROW><id>6863256</id><snippet>Promo.objects.filter(expiration__gte=datetime.date.now())
</snippet></ROW><ROW><id>6863282</id><snippet>return render_to_response('base_index.html', locals(), csrfContext)</snippet></ROW><ROW><id>6863320</id><snippet>.factory</snippet></ROW><ROW><id>6863320</id><snippet>.factory</snippet></ROW><ROW><id>6863409</id><snippet>oauth_token_secret</snippet></ROW><ROW><id>6863409</id><snippet>Consumer</snippet></ROW><ROW><id>6863409</id><snippet>Client</snippet></ROW><ROW><id>6863409</id><snippet>--- old.py  2011-07-28 10:38:06.904639958 -0500
+++ new.py  2011-07-28 10:38:44.192639954 -0500
@@ -22,6 +22,7 @@

 ######## OAUTH: AUTHORIZE TOKEN ###############
 oauth_token = urlparse.parse_qs(content)['oauth_token'][0]
+oauth_token_secret = urlparse.parse_qs(content)['oauth_token_secret'][0]
 url = 'https://www.google.com/accounts/OAuthAuthorizeToken?hd=default&amp;oauth_token=%s' % urllib.quote_plus(oauth_token)
 print 'Visit this URL in your browser: %s' % url
 raw_input('Press ENTER once you have granted access...')
@@ -29,6 +30,7 @@
 ######## OAUTH: GET ACCESS TOKEN ##############
 verifier = file('/tmp/verifier.txt').read().rstrip()
 url = 'https://www.google.com/accounts/OAuthGetAccessToken?oauth_token=%s&amp;oauth_verifier=%s' % (oauth_token, verifier)
+client.token = oauth.Token(oauth_token, oauth_token_secret)
 resp, content = client.request(url, 'GET')
 if resp['status'] == '200':
     print 'OAuthGetAccessToken OK'
</snippet></ROW><ROW><id>6863409</id><snippet>import httplib2, os, sys, tempfile, urllib, urlparse
import oauth2 as oauth
#httplib2.debuglevel=1

# this php script writes oauth_verifier to /tmp/verifier.txt
oauth_callback = 'http://localhost/api.php'

scope = 'https://docs.google.com/feeds/'
xoauth_displayname = 'Adam\'s API Test'
url = 'https://www.google.com/accounts/OAuthGetRequestToken?scope=%s&amp;oauth_callback=%s&amp;xoauth_displayname=%s' % (scope, oauth_callback, xoauth_displayname)

######## OAUTH: GET REQUEST TOKEN #############
consumer = oauth.Consumer('anonymous','anonymous')
client = oauth.Client(consumer)
resp, content = client.request(url, 'GET')
if resp['status'] == '200':
    print 'OAuthGetRequestToken OK'
else:
    print 'OAuthGetRequestToken status: %s' % resp['status']
    print content
    sys.exit(1)

######## OAUTH: AUTHORIZE TOKEN ###############
oauth_token = urlparse.parse_qs(content)['oauth_token'][0]
oauth_token_secret = urlparse.parse_qs(content)['oauth_token_secret'][0]
url = 'https://www.google.com/accounts/OAuthAuthorizeToken?hd=default&amp;oauth_token=%s' % urllib.quote_plus(oauth_token)
print 'Visit this URL in your browser: %s' % url
raw_input('Press ENTER once you have granted access...')

######## OAUTH: GET ACCESS TOKEN ##############
verifier = file('/tmp/verifier.txt').read().rstrip()
url = 'https://www.google.com/accounts/OAuthGetAccessToken?oauth_token=%s&amp;oauth_verifier=%s' % (oauth_token, verifier)
client.token = oauth.Token(oauth_token, oauth_token_secret)
resp, content = client.request(url, 'GET')
if resp['status'] == '200':
    print 'OAuthGetAccessToken OK'
    print content
else:
    print 'OAuthGetAccessToken status: %s' % resp['status']
    print content
    sys.exit(1)
</snippet></ROW><ROW><id>6863409</id><snippet>oauth_token</snippet></ROW><ROW><id>6863409</id><snippet>oauth_verifier</snippet></ROW><ROW><id>6863409</id><snippet>https://www.google.com/accounts/OAuthGetAccessToken</snippet></ROW><ROW><id>6863409</id><snippet>oauth_token</snippet></ROW><ROW><id>6863409</id><snippet>oauth_token_secret</snippet></ROW><ROW><id>6863409</id><snippet>import httplib2, os, sys, tempfile, urllib, urlparse
import oauth2 as oauth

######## OAUTH: GET REQUEST TOKEN #############
consumer = oauth.Consumer('anonymous', 'anonymous')
creds = {'oauth_token_secret': 'INSERT_SECRET_FROM_ABOVE', 'oauth_token': 'INSERT_TOKEN_FROM_ABOVE'}
client = oauth.Client(consumer)
client.token = oauth.Token(creds['oauth_token'], creds['oauth_token_secret'])
url = 'https://docs.google.com/feeds/default/private/full?v=3'
resp, content = client.request(url, 'GET')
if resp['status'] == '200':
    print 'list status OK'
    fh = open('/tmp/list.xml', 'w')
    fh.write(content)
    fh.close()
else:
    print 'list status: %s' % resp['status']
    print content
    sys.exit(1)
</snippet></ROW><ROW><id>6863653</id><snippet>#!/bin/bash
for i in {1..5}
do
   java myprogram.jar -input myfile$i.txt -output output/myfile$i.txt
done
</snippet></ROW><ROW><id>6863728</id><snippet>communicate</snippet></ROW><ROW><id>6863728</id><snippet>returncode</snippet></ROW><ROW><id>6863728</id><snippet>out-0.png</snippet></ROW><ROW><id>6863728</id><snippet>out-1.png</snippet></ROW><ROW><id>6863728</id><snippet>-append</snippet></ROW><ROW><id>6863728</id><snippet>import subprocess
Popen = subprocess.Popen
s = Popen(['convert', '-quality', '100', 'in.pdf', '-append', 'out.png'])
s.communicate()
if s.returncode != 0:
   raise OSError('convert error')
</snippet></ROW><ROW><id>6864072</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; sorted(my_list, key=operator.itemgetter(2), reverse=True)
</snippet></ROW><ROW><id>6864072</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; mylist.sort(key=operator.itemgetter(2), reverse=True)
</snippet></ROW><ROW><id>6864072</id><snippet>&gt;&gt;&gt; mylist.sort(key=operator.itemgetter(1, 2), reverse=True)
</snippet></ROW><ROW><id>6864161</id><snippet>random</snippet></ROW><ROW><id>6864161</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; [random.random() for _ in range(0, 10)]
[0.9445162222544106, 0.17063032908425135, 0.20110591438189673,
 0.8392299590767177, 0.2841838551284578, 0.48562600723583027,
 0.15468445000916797, 0.4314435745393854, 0.11913358976315869,
 0.6793348370697525]
</snippet></ROW><ROW><id>6864614</id><snippet>x = "There are %d types of people." % 10
</snippet></ROW><ROW><id>6864614</id><snippet>%d</snippet></ROW><ROW><id>6864614</id><snippet>Signed integer decimal</snippet></ROW><ROW><id>6864614</id><snippet>There are 10 types of people.</snippet></ROW><ROW><id>6864614</id><snippet>"7+6: %d" % (7+6)</snippet></ROW><ROW><id>6864614</id><snippet>"0x12: %d" % 0x12</snippet></ROW><ROW><id>6864614</id><snippet>0x</snippet></ROW><ROW><id>6864614</id><snippet>binary = "binary"
do_not = "don't"
y = "Those who know %s and those who %s." % (binary, do_not)
</snippet></ROW><ROW><id>6864614</id><snippet>%s</snippet></ROW><ROW><id>6864614</id><snippet>%d</snippet></ROW><ROW><id>6864614</id><snippet>%s</snippet></ROW><ROW><id>6864614</id><snippet>x = ('world', 'Hello')</snippet></ROW><ROW><id>6864614</id><snippet>y</snippet></ROW><ROW><id>6864614</id><snippet>print "I said: %r." % x
</snippet></ROW><ROW><id>6864614</id><snippet>%r</snippet></ROW><ROW><id>6864614</id><snippet>repr</snippet></ROW><ROW><id>6864614</id><snippet>repr("a") == "'a'"</snippet></ROW><ROW><id>6864614</id><snippet>str(a) == "a"</snippet></ROW><ROW><id>6864614</id><snippet>repr</snippet></ROW><ROW><id>6864614</id><snippet>str</snippet></ROW><ROW><id>6864614</id><snippet>%r</snippet></ROW><ROW><id>6864614</id><snippet>%s</snippet></ROW><ROW><id>6864614</id><snippet>print w + e
</snippet></ROW><ROW><id>6864614</id><snippet>+</snippet></ROW><ROW><id>6864614</id><snippet>"3" + "4"</snippet></ROW><ROW><id>6864614</id><snippet>x = "3"; y = "4"</snippet></ROW><ROW><id>6864615</id><snippet>self.request.body</snippet></ROW><ROW><id>6864615</id><snippet>class YourUploadHandler(webapp.RequestHandler):
    def post(self):
        your_binary_content = self.request.body
</snippet></ROW><ROW><id>6865440</id><snippet>shell=True</snippet></ROW><ROW><id>6865440</id><snippet>subprocess.Popen('find / -name "hello.txt" -exec echo {} \;', shell=True)
</snippet></ROW><ROW><id>6865741</id><snippet>execute()</snippet></ROW><ROW><id>6865741</id><snippet>INSERT</snippet></ROW><ROW><id>6865741</id><snippet>c=db.cursor()
max_price = 5
min_price = 1
c.execute("""SELECT spam, eggs, sausage FROM breakfast
          WHERE price &lt; %s AND price &gt; %s""", (max_price, min_price))
</snippet></ROW><ROW><id>6865741</id><snippet>%s</snippet></ROW><ROW><id>6865741</id><snippet>execute()</snippet></ROW><ROW><id>6865741</id><snippet>(max_price,)</snippet></ROW><ROW><id>6866577</id><snippet>qs = Triple.objects.filter(subject="bob", predicate="knows").extra(select={'known': "t1.subject"}, tables=['"triple_triple" AS "t1"'], where=['triple_triple.object=t1.subject AND t1.predicate="has-a" AND t1.object="house"'])

qs.values("known")
</snippet></ROW><ROW><id>6866697</id><snippet># tree format
treeroot:
    branch1:
        name: Node 1
        branch1-1:
            name: Node 1-1
    branch2:
        name: Node 2
        branch2-1:
            name: Node 2-1
</snippet></ROW><ROW><id>6866697</id><snippet>import yaml
f = open('tree.yaml')
# use safe_load instead load
dataMap = yaml.safe_load(f)
f.close()
</snippet></ROW><ROW><id>6866697</id><snippet>dataMap</snippet></ROW><ROW><id>6866697</id><snippet>dataMap</snippet></ROW><ROW><id>6866697</id><snippet>{'treeroot': {'branch1': {'branch1-1': {'name': 'Node 1-1'},
    'name': 'Node 1'},
    'branch2': {'branch2-1': {'name': 'Node 2-1'},
    'name': 'Node 2'}}}
</snippet></ROW><ROW><id>6866697</id><snippet>f = open('newtree.yaml', "w")
yaml.dump(dataMap, f)
f.close()
</snippet></ROW><ROW><id>6866697</id><snippet>class Struct:
    def __init__(self, **entries): 
        self.__dict__.update(entries)
</snippet></ROW><ROW><id>6866697</id><snippet>&gt;&gt;&gt; args = your YAML dictionary
&gt;&gt;&gt; s = Struct(**args)
&gt;&gt;&gt; s
&lt;__main__.Struct instance at 0x01D6A738&gt;
&gt;&gt;&gt; s...
</snippet></ROW><ROW><id>6866726</id><snippet>&gt;&gt;&gt; 'asdf hjkl'.replace(' ', '\s')[4]
'\\'
</snippet></ROW><ROW><id>6866726</id><snippet>print</snippet></ROW><ROW><id>6866726</id><snippet>&gt;&gt;&gt; print 'asdf hjkl'.replace(' ', '\s')
asdf\shjkl
</snippet></ROW><ROW><id>6866748</id><snippet>def capitalize(s, applyToAll=False):
    if applyToAll:
        l = [w.capitalize() for w in s.split()]
        return " ".join(l)
    else:
        return s.capitalize()
</snippet></ROW><ROW><id>6866748</id><snippet>print</snippet></ROW><ROW><id>6866801</id><snippet>root</snippet></ROW><ROW><id>6866801</id><snippet>application</snippet></ROW><ROW><id>6866801</id><snippet>Tk</snippet></ROW><ROW><id>6866801</id><snippet>application(Tk)</snippet></ROW><ROW><id>6866847</id><snippet>urllib2</snippet></ROW><ROW><id>6866847</id><snippet>user-agent</snippet></ROW><ROW><id>6867199</id><snippet>ax.xaxis.set_minor_locator( xLocator )
ax.xaxis.set_minor_formatter( xminorFormatter )
</snippet></ROW><ROW><id>6867227</id><snippet>AWS_S3_SECURE_URLS = True</snippet></ROW><ROW><id>6867270</id><snippet>":memory"</snippet></ROW><ROW><id>6867270</id><snippet>isolation_level</snippet></ROW><ROW><id>6867543</id><snippet>repr</snippet></ROW><ROW><id>6867543</id><snippet>import numpy as np  
x = float(1) - np.array([1e-10, 1e-5]) 
print x
print x[0]
print x[0] == 1.0
</snippet></ROW><ROW><id>6867543</id><snippet>[ 1.      0.99999 ]
0.99999999999
False
</snippet></ROW><ROW><id>6867543</id><snippet>numpy.set_printoptions</snippet></ROW><ROW><id>6867543</id><snippet>decimal</snippet></ROW><ROW><id>6867543</id><snippet>numpy.float128</snippet></ROW><ROW><id>6867583</id><snippet>hr</snippet></ROW><ROW><id>6867583</id><snippet>    &lt;record id="action2" model="ir.actions.act_window"&gt;
        &lt;field name="name"&gt;Employee Hierarchy&lt;/field&gt;
        &lt;field name="type"&gt;ir.actions.act_window&lt;/field&gt;
        &lt;field name="res_model"&gt;hr.employee&lt;/field&gt;
        &lt;field name="domain"&gt;[('id','in',active_ids)]&lt;/field&gt;
        &lt;field name="view_type"&gt;tree&lt;/field&gt;
        &lt;field name="view_id" ref="view_partner_tree2"/&gt;
    &lt;/record&gt;
    &lt;ir_set&gt;
        &lt;field eval="'action'" name="key"/&gt;
        &lt;field eval="'client_action_multi'" name="key2"/&gt;
        &lt;field eval="['hr.employee']" name="models"/&gt;
        &lt;field name="name"&gt;Employees Hierarchy&lt;/field&gt;
        &lt;field eval="'ir.actions.act_window,'+str(action2)" name="value"/&gt;
        &lt;field eval="True" name="isobject"/&gt;
        &lt;field eval="True" name="replace"/&gt;
    &lt;/ir_set&gt;
</snippet></ROW><ROW><id>6867583</id><snippet>&lt;ir_set&gt;</snippet></ROW><ROW><id>6867583</id><snippet>ir.values</snippet></ROW><ROW><id>6867583</id><snippet>convert.py</snippet></ROW><ROW><id>6867583</id><snippet>ir_set()</snippet></ROW><ROW><id>6868175</id><snippet>data.insert(0, tuple(header))
</snippet></ROW><ROW><id>6868175</id><snippet>data</snippet></ROW><ROW><id>6868175</id><snippet>newdata = [tuple(header)]
newdata.extend(data)
</snippet></ROW><ROW><id>6868231</id><snippet>(\r\n|\r|\n)</snippet></ROW><ROW><id>6868440</id><snippet>import shlex

def newSplit(value):
    lex = shlex.shlex(value)
    lex.quotes = '"'
    lex.whitespace_split = True
    lex.commenters = ''
    return list(lex)

print newSplit('''This string has "some double quotes" and 'some single quotes'.''')
</snippet></ROW><ROW><id>6869444</id><snippet>re.split(r'\s+and\s+|,(?!\s*Ph\.D\.)\s*', 'Joe, Dave, Professional, Ph.D. and Someone else')
</snippet></ROW><ROW><id>6869444</id><snippet>['Joe', 'Dave', 'Professional, Ph.D.', 'Someone else']
</snippet></ROW><ROW><id>6869468</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent, -1)

        sampleList = ['zero', 'one', 'two', 'three', 'four', 'five',
                      'six', 'seven', 'eight', 'nine', 'ten', 'eleven',
                      'more', 'and more']

        sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.clb = wx.CheckListBox(self, -1, (30,30), wx.DefaultSize, sampleList)
        self.Bind(wx.EVT_LISTBOX, self.EvtListBox, self.clb)
        self.Bind(wx.EVT_CHECKLISTBOX, self.EvtCheckListBox, self.clb)
        self.clb.SetSelection(0)

        sizer.Add(wx.Panel(self), 1, flag=wx.EXPAND)
        sizer.Add(self.clb, 0, flag=wx.EXPAND)
        sizer.Add(wx.Panel(self), 1, flag=wx.EXPAND)
        self.SetSizer(sizer)
        self.Fit()


    def EvtListBox(self, event):
        pass

    def EvtCheckListBox(self, event):
        pass


if __name__ == '__main__':

    app = wx.PySimpleApp()
    frame = MyFrame(None)
    frame.Show(True)
    app.MainLoop()
</snippet></ROW><ROW><id>6869548</id><snippet>SELECT id
FROM app_place
WHERE ST_DWithin(coordinates, ST_SetSRID(ST_Point(-118, 34), 3768), 1);
</snippet></ROW><ROW><id>6869548</id><snippet>SELECT id
FROM app_place
WHERE ST_Distance_Sphere(ST_SetSRID(ST_Point(-118, 34), 3768), coordinates) &lt; 1;
</snippet></ROW><ROW><id>6869548</id><snippet>geography=True</snippet></ROW><ROW><id>6869548</id><snippet>coordinates</snippet></ROW><ROW><id>6869548</id><snippet>geography=True</snippet></ROW><ROW><id>6870150</id><snippet>meth</snippet></ROW><ROW><id>6870150</id><snippet>class A(object):
    def __init__():
         # Some executable code here
         self.a = 8
</snippet></ROW><ROW><id>6870150</id><snippet>meth</snippet></ROW><ROW><id>6870150</id><snippet>_</snippet></ROW><ROW><id>6870150</id><snippet>__</snippet></ROW><ROW><id>6870150</id><snippet>return None</snippet></ROW><ROW><id>6870150</id><snippet>initLogger</snippet></ROW><ROW><id>6870245</id><snippet>writer.writerow</snippet></ROW><ROW><id>6870245</id><snippet>for node, value in output.items():
    writer.writerow([node] + value)
</snippet></ROW><ROW><id>6870408</id><snippet>def runtest(test):
   exec 'import ' + test
   func=test+'.'+test+'()'
   return eval(func)

if __name__ == '__main__':
p = Process(target=runtest, args=('mytest',))
p.start()
p.join()
</snippet></ROW><ROW><id>6870535</id><snippet>for key,value in dic.iteritems():
    if key == datetime.today(): # or (datetime.today() - key).seconds == &lt;any value you expect&gt;
        # since value is a tuple(not a dict) and you want to get the first item you can use index 0
        slug = value[0]
</snippet></ROW><ROW><id>6870793</id><snippet>values_list</snippet></ROW><ROW><id>6870793</id><snippet>article.headline_set.values_list('headline', flat=True)
</snippet></ROW><ROW><id>6870793</id><snippet>headline</snippet></ROW><ROW><id>6870951</id><snippet>boost::weak_ptr</snippet></ROW><ROW><id>6870951</id><snippet>using boost::shared_ptr;
using boost::weak_ptr;

func (weak_ptr&lt;MyClass&gt; wp)
{
  shared_ptr&lt;MyClass&gt; sp = wp.lock ();
  if (sp)
    // sp stays alive until it goes out of scope or is reset
}
</snippet></ROW><ROW><id>6870951</id><snippet>boost::weak_ptr</snippet></ROW><ROW><id>6871230</id><snippet> class A(object):
    def __init__(self):
        self._x = 0

    def get_x(self):
        #...
        return self._x

    def set_x(self, x):
        #...
        self._x = x

    x = property(get_x, lambda self,x : self.set_x(x))

class B(A):
    def set_x(self, x):
        #...
        self._x = x**2
</snippet></ROW><ROW><id>6871308</id><snippet>import matplotlib.pyplot
from numpy import arange
from numpy import meshgrid

delta = 0.025
xrange = arange(-3.0, 3.0, delta)
yrange = arange(-2.0, 2.0, delta)
X, Y = meshgrid(xrange,yrange)
F = X**2 + Y**2 -4
G = 0
matplotlib.pyplot.contour(X,Y,(F-G),[0])
matplotlib.pyplot.show()
</snippet></ROW><ROW><id>6871482</id><snippet>import datetime
</snippet></ROW><ROW><id>6871482</id><snippet>Date = datetime.datetime.strptime(StartDate, "%m/%d/%y")

EndDate = Date + datetime.timedelta(days=10)
</snippet></ROW><ROW><id>6871541</id><snippet>python-shell-interpreter</snippet></ROW><ROW><id>6871541</id><snippet>python-shell-completion-setup-code</snippet></ROW><ROW><id>6871541</id><snippet>python-shell-completion-string-code</snippet></ROW><ROW><id>6871541</id><snippet>python-shell-send-buffer</snippet></ROW><ROW><id>6871541</id><snippet>dabbrev-mode</snippet></ROW><ROW><id>6871541</id><snippet>python-skeleton-autoinsert</snippet></ROW><ROW><id>6871541</id><snippet>(require 'python)</snippet></ROW><ROW><id>6871555</id><snippet>rand = random.sample(range(len(A)), 1000)
</snippet></ROW><ROW><id>6871555</id><snippet>A[rand[i]]</snippet></ROW><ROW><id>6871555</id><snippet>B[rand[i]]</snippet></ROW><ROW><id>6871555</id><snippet>A_rand = [A[x] for x in rand]
B_rand = [B[x] for x in rand]
</snippet></ROW><ROW><id>6872254</id><snippet>var page = new WebPage();
page.open('http://www.google.com/', function(status) {
    // do something
    phantom.exit();
});
</snippet></ROW><ROW><id>6873177</id><snippet>exec</snippet></ROW><ROW><id>6873177</id><snippet>compile</snippet></ROW><ROW><id>6873177</id><snippet>parser</snippet></ROW><ROW><id>6873556</id><snippet>class Program:
    def test(self, value):
        print value + 1

    def functionTest(self):
        a = self.test(2)

if __name__ == "__main__":
    myprog = Program()
    myprog.functionTest()
</snippet></ROW><ROW><id>6873556</id><snippet>self</snippet></ROW><ROW><id>6873556</id><snippet>test</snippet></ROW><ROW><id>6873556</id><snippet>self.test()</snippet></ROW><ROW><id>6873566</id><snippet>sys.path.append('F:\Program Files\Python26\Lib\site-packages\py2exe')
</snippet></ROW><ROW><id>6873566</id><snippet>\</snippet></ROW><ROW><id>6873566</id><snippet>d = 'C:/Program Files/'
</snippet></ROW><ROW><id>6873566</id><snippet>d = 'C:\\Program Files\\'
</snippet></ROW><ROW><id>6873566</id><snippet>r</snippet></ROW><ROW><id>6873566</id><snippet>d = r'C:\Program Files\'
</snippet></ROW><ROW><id>6873578</id><snippet>str</snippet></ROW><ROW><id>6873578</id><snippet>utf-8</snippet></ROW><ROW><id>6873578</id><snippet>0x7f</snippet></ROW><ROW><id>6873578</id><snippet>utf-8</snippet></ROW><ROW><id>6873578</id><snippet>cp1251</snippet></ROW><ROW><id>6873578</id><snippet>u = s.decode('cp1251')  # decode from cp1251 byte (str) string to unicode string
s = u.encode('utf-8')   # re-encode unicode string to  utf-8 byte (str) string
</snippet></ROW><ROW><id>6873578</id><snippet>iconv --from-code=CP1251 --to-code=UTF-8</snippet></ROW><ROW><id>6873633</id><snippet>from __future__ import division  # this is important, otherwise 1/2 will be 0
import matplotlib.pyplot
from numpy import arange
from numpy import meshgrid
from numpy import sqrt
from numpy import real


delta = 0.01
xrange = arange(-7.0, 7.0, delta)
yrange = arange(-3.0, 3.0, delta)
x, y = meshgrid(xrange,yrange)

F1 = (((x/7) ** 2) * sqrt(abs(abs(x) - 3)/(abs(x) - 3)) + ((y / 3) ** 2) * sqrt(abs(y + (3 * sqrt(33)) / 7)/(y + (3 * sqrt(33)) / 7)) - 1)
F2 = (abs(x/2) - ((3 * sqrt(33) - 7)/112) * x**2 - 3 + sqrt(1 - (abs(abs(x) - 2) - 1) ** 2 ) - y)
F3 = (9 * sqrt(abs((abs(x) - 1) * (abs(x) - 3/4))/((1 - abs(x)) * (abs(x) - 3/4))) - 8 * abs(x) - y)
F4 = (3 * abs(x) + 0.75 * sqrt(abs((abs(x) - 3/4) * (abs(x) - 1/2))/((3/4 - abs(x)) * (abs(x) - 1/2))) - y)
F5 = ((9/4) * sqrt(abs((x - 1/2) * (x + 1/2))/((1/2 - x) * (1/2 + x))) - y)
F6 = ((6 * sqrt(10)) / 7 + (3/2 - abs(x)/2) * sqrt(abs(abs(x) - 1)/(abs(x) - 1)) - ((6 * sqrt(10))/ 14) * sqrt(4 - (abs(x) - 1) ** 2 ) - y)


for f in [F1,F2,F3,F4,F5,F6]:
    matplotlib.pyplot.contour(x, y, f, [0])
matplotlib.pyplot.show()
</snippet></ROW><ROW><id>6873956</id><snippet>import random
import numpy
from matplotlib import pyplot

x = [random.gauss(3,1) for _ in range(400)]
y = [random.gauss(4,2) for _ in range(400)]

bins = numpy.linspace(-10, 10, 100)

pyplot.hist(x, bins, alpha=0.5)
pyplot.hist(y, bins, alpha=0.5)
pyplot.show()
</snippet></ROW><ROW><id>6874060</id><snippet>&gt;&gt;&gt; mystring = "Safety/Report/Image/489"
&gt;&gt;&gt; mystore = mystring.split('/')
&gt;&gt;&gt; mystore
['Safety', 'Report', 'Image', '489']
&gt;&gt;&gt; mystore[2]
'Image'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6874060</id><snippet>liststring = ["Safety/Report/Image/489",
              "Safety/Report/Image/490",
              "Safety/Report/Image/491"]

dictstore = {}            
for line, string in enumerate(liststring):
    dictstore[line] = string.split('/')

print dictstore[1][3]
print dictstore[2][3]

prints:
490
491
</snippet></ROW><ROW><id>6874570</id><snippet>clean</snippet></ROW><ROW><id>6874570</id><snippet>def clean(self):
    # perform checks
    return self.cleaned_data
</snippet></ROW><ROW><id>6874776</id><snippet>import random
from matplotlib import pyplot
from mpl_toolkits.mplot3d import Axes3D

mypoints = []
for _ in range(100):
    mypoints.append([random.random(),    #x
                    random.random(),     #y
                    random.random(),     #z
                    random.randint(10,100)]) #scalar

data = zip(*mypoints)

fig = pyplot.figure()
ax = fig.add_subplot(111, projection='3d')

ax.scatter(data[0], data[1], data[2], c=data[3])
pyplot.show()
</snippet></ROW><ROW><id>6875235</id><snippet>r.next()</snippet></ROW><ROW><id>6875235</id><snippet>for</snippet></ROW><ROW><id>6875235</id><snippet>DictReader</snippet></ROW><ROW><id>6875235</id><snippet>DictReader</snippet></ROW><ROW><id>6875685</id><snippet>type()</snippet></ROW><ROW><id>6875685</id><snippet>type</snippet></ROW><ROW><id>6875685</id><snippet>type</snippet></ROW><ROW><id>6875685</id><snippet>print type
</snippet></ROW><ROW><id>6875685</id><snippet>print type(full_name)
</snippet></ROW><ROW><id>6875730</id><snippet>indices = nonzero((new_arr &lt; 0) &amp; (old_arr &gt; 0))</snippet></ROW><ROW><id>6875730</id><snippet>In [5]: import numpy as np

In [6]: old_arr = np.array([ 0,-1, 0,-1, 1, 1, 0, 1])

In [7]: new_arr = np.array([ 1, 1,-1,-1,-1,-1, 1, 1])

In [8]: np.nonzero((new_arr &lt; 0) &amp; (old_arr &gt; 0))
Out[8]: (array([4, 5]),)
</snippet></ROW><ROW><id>6875827</id><snippet>server.conn = conn</snippet></ROW><ROW><id>6875827</id><snippet>server_forever()</snippet></ROW><ROW><id>6875827</id><snippet>self.server.conn</snippet></ROW><ROW><id>6875827</id><snippet>finish_request</snippet></ROW><ROW><id>6875827</id><snippet>class EchoHandler(SocketServer.StreamRequestHandler):
    def handle(self):
        # I have no idea why you would print this but this is an example
        print( self.server.conn );
        print self.client_address, 'connected'

if __name__ == '__main__':
    SocketServer.ForkingTCPServer.allow_reuse_address = 1

    server = SocketServer.ForkingTCPServer(('10.0.0.6', 4242), EchoHandler)
    server.conn = MySQLdb.connect (host = "10.0.0.5", 
                     user = "user", passwd = "pass", db = "database")
    # continue as normal
</snippet></ROW><ROW><id>6876223</id><snippet>home_hallo = os.path.join(os.environ['HOME'], 'host.hallo')
filepath = ( ('HALLO' in os.environ and os.environ['HALLO']) or
             (os.path.isfile(home_hallo) and home_hallo) or
             (os.path.isfile('/etc/app/host.hallo') and '/etc/app/host.hallo') )
if filepath:
    print 'HALLO found in "%s"' % filepath
    ## do something
else:
    print 'HALLO not found!'
    ## do something else
</snippet></ROW><ROW><id>6876492</id><snippet>import Cookie
def set_unicode_cookie(response, key, value):
  c = Cookie.SimpleCookie()
  c[key] = value.encode('unicode-escape')
  c[key]["expires"] = "Sun, 31-May-2020 23:59:59 GMT"
  c[key]["path"] = "/"
  response.headers.add_header('Set-Cookie', c[key].OutputString())

def get_unicode_cookie(request, key, defult_value):
  def unescape(s):
    m = re.match(r'^"(.*)"$', s)
    s = m.group(1) if m else s
    return s.replace("\\\\", "\\")
  if request.cookies.has_key(key):
    return unescape(request.cookies[key]).decode('unicode-escape')
  else:
    return default_value
</snippet></ROW><ROW><id>6876801</id><snippet>from lepl import *
def ander(result):
    if len(result) == 2:
        return (result[0], result[1])
    return result[0]
text = String() | Word()
andClausePrime = Delayed()
label = text &amp; Drop(':')
with DroppedSpace():
    parameter = label &amp; text &gt; (lambda r: {r[0]: r[1]})
    andClause = (parameter | text) &amp; andClausePrime &gt; ander
    andClausePrime += (Drop('AND') &amp; (andClause | parameter | text) &amp; andClausePrime)[:]
    expr = andClause | parameter | text
    query = expr &amp; (Drop('OR') &amp; expr)[:]
</snippet></ROW><ROW><id>6876801</id><snippet>&gt;&gt;&gt; query.parse('a AND b')
[('a', 'b')]
&gt;&gt;&gt; query.parse('a AND b AND c')
[('a', ('b', 'c'))]
&gt;&gt;&gt; query.parse('a AND b AND c AND d')
[('a', ('b', ('c', 'd')))]
&gt;&gt;&gt; query.parse('a AND b AND c AND d OR e AND f')
[('a', ('b', ('c', 'd'))), ('e', 'f')]
&gt;&gt;&gt; query.parse('a AND b AND c AND d OR e OR f')
[('a', ('b', ('c', 'd'))), 'e', 'f']
&gt;&gt;&gt; query.parse('foo AND bar')
[('foo', 'bar')]
&gt;&gt;&gt; query.parse('"bar none" OR foo')
['bar none', 'foo']
&gt;&gt;&gt; query.parse('key:value AND "hey now":5 OR "what is":up')
[({'key': 'value'}, {'hey now': '5'}), {'what is': 'up'}]
</snippet></ROW><ROW><id>6876926</id><snippet>from tkinter import Tk, StringVar, ttk

class Application:

    def __init__(self, parent):
        self.parent = parent
        self.combo()

    def combo(self):
        self.box_value = StringVar()
        self.box = ttk.Combobox(self.parent, textvariable=self.box_value, 
                                state='readonly')
        self.box['values'] = ('A', 'B', 'C')
        self.box.current(0)
        self.box.grid(column=0, row=0)

if __name__ == '__main__':
    root = Tk()
    app = Application(root)
    root.mainloop()
</snippet></ROW><ROW><id>6876938</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>6876938</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.stdout.encoding)
utf-8
&gt;&gt;&gt; print(sys.getdefaultencoding())
ascii
&gt;&gt;&gt; name = u'\u0935\u0948\u092D\u0935'
&gt;&gt;&gt; print name
वैभव
</snippet></ROW><ROW><id>6876941</id><snippet>void call(boost::shared_ptr&lt;Base&gt; b, boost::python::object func)
{
    func(b);
}
</snippet></ROW><ROW><id>6877225</id><snippet>max_int64 = 0xFFFFFFFFFFFFFFFF
packed    = struct.pack('&gt;QQ', (u.int &gt;&gt; 64) &amp; max_int64, u.int &amp; max_int64)
# unpack
a, b     = struct.unpack('&gt;QQ', packed)
unpacked = (a &lt;&lt; 64) | b

assert u.int == unpacked
</snippet></ROW><ROW><id>6877749</id><snippet>"".join(_items2join_)</snippet></ROW><ROW><id>6877828</id><snippet>test()</snippet></ROW><ROW><id>6877828</id><snippet>testModule</snippet></ROW><ROW><id>6877828</id><snippet>testModule</snippet></ROW><ROW><id>6877828</id><snippet>testMod</snippet></ROW><ROW><id>6877828</id><snippet>testModule</snippet></ROW><ROW><id>6877828</id><snippet>from testModule import testMod
testMod.test(4) 
</snippet></ROW><ROW><id>6877942</id><snippet>static</snippet></ROW><ROW><id>6877942</id><snippet>// ExposureSinusoid.h
class ExposureSinusoid
{
    // ...
public:
    static const UINT _min_exp = 20;   // declaration
    // ...
};

// ExposureSinusoid.cpp
const UINT ExposureSinusoid::_min_exp; // definition
</snippet></ROW><ROW><id>6877942</id><snippet>static</snippet></ROW><ROW><id>6877942</id><snippet>const</snippet></ROW><ROW><id>6878259</id><snippet>import lxml.html as lh

content='''\
&lt;table border=1&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Component&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;Status&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;Time / Error&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SAVE_DOCUMENT&lt;/td&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;0.408 s&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GET_DOCUMENT&lt;/td&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;0.361 s&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DVK_SEND&lt;/td&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;0.002 s&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DVK_RECEIVE&lt;/td&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;0.002 s&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GET_USER_INFO&lt;/td&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;0.135 s&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTIFICATIONS&lt;/td&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;0.002 s&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ERROR_LOG&lt;/td&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;0.001 s&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SUMMARY_STATUS&lt;/td&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;0.913 s&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
'''
tree=lh.fromstring(content)
for key, status, t in zip(*[iter(tree.xpath('//td/text()'))]*3):
    print('''{k}_STATUS = "{s}"
{k}_TIME = "{t}"'''.format(k=key,s=status,t=t.rstrip(' s')))
</snippet></ROW><ROW><id>6878259</id><snippet>SAVE_DOCUMENT_STATUS = "OK"
SAVE_DOCUMENT_TIME = "0.408"
GET_DOCUMENT_STATUS = "OK"
GET_DOCUMENT_TIME = "0.361"
DVK_SEND_STATUS = "OK"
DVK_SEND_TIME = "0.002"
DVK_RECEIVE_STATUS = "OK"
DVK_RECEIVE_TIME = "0.002"
GET_USER_INFO_STATUS = "OK"
GET_USER_INFO_TIME = "0.135"
NOTIFICATIONS_STATUS = "OK"
NOTIFICATIONS_TIME = "0.002"
ERROR_LOG_STATUS = "OK"
ERROR_LOG_TIME = "0.001"
SUMMARY_STATUS_STATUS = "OK"
SUMMARY_STATUS_TIME = "0.913"
</snippet></ROW><ROW><id>6878446</id><snippet>import lxml.html as lh

content='''\
&lt;ul&gt;
&lt;li&gt;&lt;small&gt;pudding&lt;/small&gt;: peaches and &lt;a href="/cream"&gt;cream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;small&gt;cheese&lt;/small&gt;: Epoisses and &lt;a href="/st-marcellin" class="new"&gt;St Marcellin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
'''

tree=lh.fromstring(content)
for elt in tree.xpath('//li[not(descendant::a[@class="new"])]/small/text()'):
    print(elt)

# pudding
</snippet></ROW><ROW><id>6878446</id><snippet>//                        # from the root node, look at all descendants
li[                       # select nodes of type &lt;li&gt; who
    not(descendant::a[    # do not have a descendant of type &lt;a&gt;
        @class="new"])]   # with a class="new" attribute 
    /small                # select the node of type &lt;small&gt;
    /text()               # return the text of that node
</snippet></ROW><ROW><id>6878459</id><snippet>import sympy

M = sympy.Matrix(3, 2, lambda i,j:sympy.var('M_%d%d' % (i+1,j+1)))
</snippet></ROW><ROW><id>6878569</id><snippet>&gt;&gt;&gt; paragraph = "five hundred to one hundred words separated by spaces"
&gt;&gt;&gt; array_of_strings = set(['hundred', 'spaces', ])  # make a set..

&gt;&gt;&gt; print set(paragraph.split()).intersection(array_of_strings)
set(['hundred', 'spaces'])
</snippet></ROW><ROW><id>6878569</id><snippet>import timeit
s = """paragraph = "five hundred to one hundred words separated by spaces"
array_of_strings = set(['hundred', 'spaces', ])  # make a set..

set(paragraph.split()).intersection(array_of_strings)
"""
t = timeit.Timer(stmt=s)
print "%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000)
</snippet></ROW><ROW><id>6878609</id><snippet> get the first element in left
 get the second element in right
 append them to a new list as right-&gt;left
 repeat until you run out of list.
</snippet></ROW><ROW><id>6878626</id><snippet>s_term</snippet></ROW><ROW><id>6878626</id><snippet>ObjectId</snippet></ROW><ROW><id>6878626</id><snippet>from pymongo.errors import InvalidId

or_filter = [
    {'s_text': re.compile(s_term, re.IGNORECASE)},
    {'choices': re.compile(s_term, re.IGNORECASE)}
]

try:
    id = ObjectId(s_term)
    or_filter.append({ '_id': id })
except InvalidId:
    pass

l_search_results = list(
    cll_sips.find({ '$or': or_filter }).limit(20)
)
</snippet></ROW><ROW><id>6878867</id><snippet>open('file.txt', 'w')</snippet></ROW><ROW><id>6878867</id><snippet>open('file.txt', 'a')</snippet></ROW><ROW><id>6878867</id><snippet>open('file.txt', 'w+')</snippet></ROW><ROW><id>6878867</id><snippet>open('file.txt', 'r+')</snippet></ROW><ROW><id>6878867</id><snippet>open('file.txt', 'a+')</snippet></ROW><ROW><id>6878924</id><snippet>minidom.Document</snippet></ROW><ROW><id>6878924</id><snippet>minidom.Document.documentElement</snippet></ROW><ROW><id>6878924</id><snippet>Document</snippet></ROW><ROW><id>6878924</id><snippet>Element</snippet></ROW><ROW><id>6878924</id><snippet>Element</snippet></ROW><ROW><id>6878924</id><snippet>documentElement</snippet></ROW><ROW><id>6878924</id><snippet>xml.dom.Node</snippet></ROW><ROW><id>6879105</id><snippet>echo EXPORTS &gt; NAME.def</snippet></ROW><ROW><id>6879105</id><snippet>nm NAME.lib | grep ' T _' | sed 's/.* T _//' &gt;&gt; NAME.def</snippet></ROW><ROW><id>6879105</id><snippet>dlltool --input-def NAME.def --dllname NAME --output-lib libNAME.a</snippet></ROW><ROW><id>6879105</id><snippet>-mno-cygwin</snippet></ROW><ROW><id>6879105</id><snippet>[build]
compiler = mingw32   #or mingw64

[build_ext]
compiler = mingw32   #or mingw64
</snippet></ROW><ROW><id>6879105</id><snippet>C:\cygwin\bin</snippet></ROW><ROW><id>6879206</id><snippet>    Field('standard_template_id', templates,
</snippet></ROW><ROW><id>6879206</id><snippet>    Field('standard_template_id', db.i2l_templates,
</snippet></ROW><ROW><id>6879206</id><snippet>IS_IN_DB(db,'&lt;table&gt;.id')</snippet></ROW><ROW><id>6879206</id><snippet>requires = IS_IN_DB(db(db.i2l_templates.id==auth.user_id),
                    'i2l_templates.id', '%(template_name)s')
</snippet></ROW><ROW><id>6879228</id><snippet>from google.appengine.ext.webapp import template

parent = template.Template("&lt;html&gt;&lt;body&gt;{% block content %}{% endblock %}&lt;/body&gt;&lt;/html&gt;")
path = os.path.join(os.path.dirname(__file__), 'index.html')
template.render(path, template.Context({"baseTemplate": parent}))
</snippet></ROW><ROW><id>6879228</id><snippet>{% extends baseTemplate %}
{% block content %}
    &lt;h1&gt;Hello World!&lt;/h1&gt;
{% endblock %}
</snippet></ROW><ROW><id>6879454</id><snippet>import os
st=os.stat('/tmp')    
mtime=st.st_mtime
print(mtime)
# 1325704746.52
</snippet></ROW><ROW><id>6879454</id><snippet>print(os.path.getmtime('/tmp'))
# 1325704746.52
</snippet></ROW><ROW><id>6879454</id><snippet>import datetime         
print("mdatetime = {}".format(datetime.datetime.fromtimestamp(mtime)))
# mdatetime = 2012-01-04 14:19:06.523398
</snippet></ROW><ROW><id>6879454</id><snippet>import stat
print("last accessed =&gt; {}".format(time.ctime(st[stat.ST_ATIME])))
# last accessed =&gt; Wed Jan  4 14:09:55 2012
print("last modified =&gt; {}".format(time.ctime(st[stat.ST_MTIME])))
# last modified =&gt; Wed Jan  4 14:19:06 2012
print("last changed =&gt; {}".format(time.ctime(st[stat.ST_CTIME])))
# last changed =&gt; Wed Jan  4 14:19:06 2012
</snippet></ROW><ROW><id>6879535</id><snippet>from sympy import *

a,b,c,d = symbols("a,b,c,d")
eq = a * b * c + b * c + a * d
print collect(eq, b)
print collect(eq, c)
print collect(eq, b*c)
</snippet></ROW><ROW><id>6879535</id><snippet>a*d + b*(c + a*c)
a*d + c*(b + a*b)
a*d + b*c*(1 + a)
</snippet></ROW><ROW><id>6879712</id><snippet>class excel(Dialect):
    """Describe the usual properties of Excel-generated CSV files."""
    delimiter = ','
    quotechar = '"'
    doublequote = True
    skipinitialspace = False
    lineterminator = '\r\n'
    quoting = QUOTE_MINIMAL
</snippet></ROW><ROW><id>6879712</id><snippet>skipinitialspace</snippet></ROW><ROW><id>6879712</id><snippet>excel</snippet></ROW><ROW><id>6879712</id><snippet>&gt;&gt;&gt; with open(inPath) as fp:
&gt;&gt;&gt;     reader = csv.reader(fp, skipinitialspace=True)
&gt;&gt;&gt;     for row in reader:
&gt;&gt;&gt;         print row,
&gt;&gt;&gt;         print len(row)
['hello', 'this is row 1', 'foo1'] 3
['hello', 'this is row 2', 'foo2'] 3
['goodbye', 'this, is row 3', 'foo3'] 3
</snippet></ROW><ROW><id>6879822</id><snippet>treeView</snippet></ROW><ROW><id>6879822</id><snippet>self.treeView</snippet></ROW><ROW><id>6879822</id><snippet>on_activated</snippet></ROW><ROW><id>6879822</id><snippet>create_model</snippet></ROW><ROW><id>6879822</id><snippet>self.treeView</snippet></ROW><ROW><id>6879822</id><snippet>gtk.TreeView.set_model</snippet></ROW><ROW><id>6879822</id><snippet>import gtk, os

class PyApp(gtk.Window): 
    def __init__(self):
        super(PyApp, self).__init__()
        self.set_size_request(250, 200)
        self.set_position(gtk.WIN_POS_CENTER)
        self.connect("destroy", gtk.main_quit)
        self.set_title("SteveFM")
        vbox = gtk.VBox(False, 8)
        sw = gtk.ScrolledWindow()
        sw.set_shadow_type(gtk.SHADOW_ETCHED_IN)
        sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        vbox.pack_start(sw, True, True, 0)
        store = self.create_model()
        self.treeView = gtk.TreeView(store)
        self.treeView.connect("row-activated", self.on_activated)
        self.treeView.set_rules_hint(True)
        sw.add(self.treeView)
        self.create_columns(self.treeView)        
        self.add(vbox)
        self.show_all()

    #  Take the names of files and subdirectories in 
    #  the current directory and sort them into a list for treeview

    def create_model(self):
        store = gtk.ListStore(str)
        dirList=os.listdir(os.getcwd())
        dircontents = []
        for item in dirList: 
            if item[0] != '.':
                if os.path.isdir(item):
                    dircontents.append(['/'+item])
                else:
                    dircontents.append([item])
        dircontents.sort() 
        for act in dircontents:
            store.append([act[0]])
        return store

    #  If a file is clicked, open with leafpad.
    #  If a directory is clicked, change the current working directory to it
    #  and (my hurdle) replace the current treeview list with the contents of the 
    #  new directory, just like a file manager.

    def on_activated(self, widget, row, col):
        model = widget.get_model()
        target = model[row][0]
        if target[0] != "/":
            cmd = "leafpad "+target
            os.system(cmd)
        else:
            os.chdir(os.getcwd()+target)
            print os.getcwd()   # Just for debugging
            self.treeView.set_model(self.create_model())

    def create_columns(self, treeView):
        rendererText = gtk.CellRendererText()
        column = gtk.TreeViewColumn(None, rendererText, text=0)
        column.set_sort_column_id(0)    
        self.treeView.append_column(column)     

PyApp() 
gtk.main()
</snippet></ROW><ROW><id>6879883</id><snippet>ans = [numpy.percentile(A[s:t], 85) for s,t in L]
</snippet></ROW><ROW><id>6879889</id><snippet>from sympy import exp, N, S
from sympy.matrices import Matrix

data = [[S("-800.21"),S("-600.00")],[S("-600.00"),S("-1000.48")]]
m = Matrix(data)
ex = m.applyfunc(exp).applyfunc(lambda x:N(x, 100))
vecs = ex.eigenvects()
print vecs[0][0] # eigen value
print vecs[1][0] # eigen value
print vecs[0][2] # eigen vect
print vecs[1][2] # eigen vect
</snippet></ROW><ROW><id>6879889</id><snippet>-2.650396553004310816338679447269582701529092549943247237903254759946483528035516341807463648841185335e-261
2.650396553004310816338679447269582701529092549943247237903254759946483528035516341807466621962539464e-261
[[-0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999994391176386872]
[                                                                                                      1]]
[[1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000560882361313]
[                                                                                                    1]]
</snippet></ROW><ROW><id>6880237</id><snippet>myProcess = Popen(myCmd, shell=True, stdout=PIPE, stderr=PIPE)
for ln in myProcess.stdout:
    sys.stdout.write(ln)
for ln in myProcess.stderr:
    sys.stderr.write(ln)
</snippet></ROW><ROW><id>6881024</id><snippet>_SOURCES</snippet></ROW><ROW><id>6881024</id><snippet>$(EXEEXT)</snippet></ROW><ROW><id>6881024</id><snippet>TESTS = unittests
if HAVE_PYTHON
TESTS += tester.py
# Possibly use += here depending on the rest of your Makefile.am
check_SCRIPTS = tester.py
# I added $(srcdir) here so VPATH builds still work.
tester.py: $(srcdir)/src/test/tester.py.in Makefile
        $(SED) -e 's,[@]PYTHON[@],$(PYTHON),' &lt; $&lt; &gt; $@
        chmod +x $@
endif
</snippet></ROW><ROW><id>6881024</id><snippet>configure.ac</snippet></ROW><ROW><id>6881024</id><snippet>AS_IF([test "$PYTHON" != ":"], [AC_CONFIG_FILES([src/test/tester.py])])
</snippet></ROW><ROW><id>6881024</id><snippet>config.status</snippet></ROW><ROW><id>6881024</id><snippet>make check</snippet></ROW><ROW><id>6881024</id><snippet>check-local:
if HAVE_PYTHON
        $(PYTHON) $(srcdir)/src/test/tester.py
endif
</snippet></ROW><ROW><id>6881024</id><snippet>check-local</snippet></ROW><ROW><id>6881024</id><snippet>if HAVE_PYTHON</snippet></ROW><ROW><id>6881024</id><snippet>check-local</snippet></ROW><ROW><id>6881024</id><snippet>check-local:
        test "$(PYTHON)" != ":" &amp;&amp; $(PYTHON) $(srcdir)/src/test/tester.py
</snippet></ROW><ROW><id>6881031</id><snippet>def iterwords(fh):
    for number, line in enumerate(fh):
        for word in re.split(r'\s+', line.strip()):
            yield number, word
</snippet></ROW><ROW><id>6881031</id><snippet>python search.py 'multi word search string' file.txt
</snippet></ROW><ROW><id>6881218</id><snippet>Expression</snippet></ROW><ROW><id>6881218</id><snippet>Number</snippet></ROW><ROW><id>6881218</id><snippet>PlusExpression,</snippet></ROW><ROW><id>6881218</id><snippet>, 'TimesExpression</snippet></ROW><ROW><id>6881218</id><snippet>DivideExpression</snippet></ROW><ROW><id>6881218</id><snippet>ParenthesizedExpression</snippet></ROW><ROW><id>6881218</id><snippet>Number</snippet></ROW><ROW><id>6881218</id><snippet>Expression</snippet></ROW><ROW><id>6881218</id><snippet>__str__</snippet></ROW><ROW><id>6881218</id><snippet># This is just the very beginning of a script that can be used to process
# arithmetic expressions.  At the moment it just defines a few classes
# and prints a couple example expressions.

# Possible additions include methods to evaluate expressions and generate
# some random expressions.

class Expression:
    pass

class Number(Expression):
    def __init__(self, num):
        self.num = num

    def __str__(self):
        return str(self.num)

class BinaryExpression(Expression):
    def __init__(self, left, op, right):
        self.left = left
        self.op = op
        self.right = right

    def __str__(self):
        return str(self.left) + " " + self.op + " "  + str(self.right)

class ParenthesizedExpression(Expression):
    def __init__(self, exp):
        self.exp = exp

    def __str__(self):
        return "(" + str(self.exp) + ")"

e1 = Number(5)
print e1

e2 = BinaryExpression(Number(8), "+", ParenthesizedExpression(BinaryExpression(Number(7), "*", e1)))
print e2
</snippet></ROW><ROW><id>6881218</id><snippet>from random import random, randint, choice

def randomExpression(prob):
    p = random()
    if p &gt; prob:
        return Number(randint(1, 100))
    elif randint(0, 1) == 0:
        return ParenthesizedExpression(randomExpression(prob / 1.2))
    else:
        left = randomExpression(prob / 1.2)
        op = choice(["+", "-", "*", "/"])
        right = randomExpression(prob / 1.2)
        return BinaryExpression(left, op, right)

for i in range(10):
    print(randomExpression(1))
</snippet></ROW><ROW><id>6881218</id><snippet>(23)
86 + 84 + 87 / (96 - 46) / 59
((((49)))) + ((46))
76 + 18 + 4 - (98) - 7 / 15
(((73)))
(55) - (54) * 55 + 92 - 13 - ((36))
(78) - (7 / 56 * 33)
(81) - 18 * (((8)) * 59 - 14)
(((89)))
(59)
</snippet></ROW><ROW><id>6881669</id><snippet>generateRandomNumber()</snippet></ROW><ROW><id>6881669</id><snippet>generateRandomNumber()</snippet></ROW><ROW><id>6881741</id><snippet>public static</snippet></ROW><ROW><id>6881741</id><snippet>__init__</snippet></ROW><ROW><id>6881741</id><snippet>__init__</snippet></ROW><ROW><id>6881741</id><snippet>__new__</snippet></ROW><ROW><id>6881741</id><snippet>__new__</snippet></ROW><ROW><id>6881741</id><snippet>def _singleton(cls):
  instance = cls()
  result = lambda: instance
  result.__doc__ = cls.__doc__
  return result

@_singleton
class example(object): pass
</snippet></ROW><ROW><id>6881741</id><snippet>_singleton()</snippet></ROW><ROW><id>6881741</id><snippet>_singleton()</snippet></ROW><ROW><id>6881741</id><snippet>example().__class__()</snippet></ROW><ROW><id>6882242</id><snippet>&lt;input type="text" name="p_item"&gt;
&lt;input type="text" name="p_item"&gt;
&lt;input type="text" name="p_item"&gt;
</snippet></ROW><ROW><id>6882242</id><snippet>p_item=1&amp;p_item=3&amp;p_item=15
</snippet></ROW><ROW><id>6882366</id><snippet>itertools</snippet></ROW><ROW><id>6882366</id><snippet>itertools.islice()</snippet></ROW><ROW><id>6882366</id><snippet>import itertools
for key in itertools.islice(sorted(dict.keys(), key=custom_sort), 10):
    # Only the first 10 keys are processed.
</snippet></ROW><ROW><id>6882366</id><snippet>zip</snippet></ROW><ROW><id>6882366</id><snippet>itertools.izip</snippet></ROW><ROW><id>6882366</id><snippet>for i, key in zip(range(10), sorted(dict.keys(), key=custom_sort)):
    # i will be 0, 1, ..., 9
</snippet></ROW><ROW><id>6882859</id><snippet>class Foo(object):
   def __init__(self):
      self._x = 0

   def _get_x(self):
      return self._x

   def _set_x(self, x):
      self._x = x

   def _del_x(self):
      del self._x

   x = property(_get_x, _set_x, _del_x, "the x property")
</snippet></ROW><ROW><id>6883050</id><snippet>args</snippet></ROW><ROW><id>6883050</id><snippet>def nodeMethod(self, *args):
    return args[0], args[1]
</snippet></ROW><ROW><id>6883050</id><snippet>*</snippet></ROW><ROW><id>6883050</id><snippet>&gt;&gt;&gt; class Node(object):
...     def nodeMethod(self, *cornucopia):
...         return cornucopia[0], cornucopia[1]
... 
&gt;&gt;&gt; n = Node()
&gt;&gt;&gt; n.nodeMethod(1, 2, 3)
(1, 2)
</snippet></ROW><ROW><id>6883094</id><snippet>import re

url = '&lt;p&gt;Hello World&lt;/p&gt;&lt;a href="http://example.com"&gt;More Examples&lt;/a&gt;&lt;a href="http://example2.com"&gt;Even More Examples&lt;/a&gt;'

urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', url)

&gt;&gt;&gt; print urls
['http://example.com', 'http://example2.com']
</snippet></ROW><ROW><id>6883110</id><snippet>[{'k': c, 'v': c if c in other_list else 0} for c in correct_list]
</snippet></ROW><ROW><id>6883110</id><snippet>&gt;&gt;&gt; dict((c, c if c in other_list else 0) for c in correct_list)
{1: 0, 2: 0, 3: 0, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 0, 10: 10}
</snippet></ROW><ROW><id>6883164</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6883164</id><snippet>sel.shut_down_selenium_server()</snippet></ROW><ROW><id>6883164</id><snippet>import selenium
import socket
import subprocess
import shlex
import sys
import time

# CHANGE path='/path/to/selenium-server.jar' AS NEEDED:
def start_server(path='/path/to/selenium-server.jar'):
    null=open('/dev/null')
    proc=subprocess.Popen(shlex.split('java -jar {p}'.format(p=path)),
                          stdout=null,stderr=null)
    return proc

def shutdown_server(sel):
    sel.shut_down_selenium_server()

def start_selenium(host="localhost",
                   port=4444,
                   browserStartCommand="*firefox",
                   browserURL="http://www.google.com/webhp"):
    sel=selenium.selenium(host,port,browserStartCommand,browserURL)
    try:
        sel.start()
    except socket.error as err:
        proc=start_server()
        time.sleep(1)
        try:
            sel.start()
        except socket.error as err:
            sys.exit(err)
    return sel

if __name__=='__main__':
    sel=start_selenium()
    time.sleep(1)
    sel.stop()
    shutdown_server(sel)    
</snippet></ROW><ROW><id>6883546</id><snippet>pack_slaves</snippet></ROW><ROW><id>6883546</id><snippet>grid_slaves</snippet></ROW><ROW><id>6883546</id><snippet>winfo_children</snippet></ROW><ROW><id>6883546</id><snippet>class MyApp(Tk):
    def __init__(self, *args, **kwargs):
        ...
        self.open_button = Button(...)
        self.close_button = Button(...)
        ...
    def OnSomeEvent(self, event):
        if ...:
            self.open_button.configure(state="disabled")
        else:
            self.open_button.configure(state="normal")
</snippet></ROW><ROW><id>6883558</id><snippet>class test:
    from platform import system
</snippet></ROW><ROW><id>6883558</id><snippet>class test:
    def system():
        # ....
</snippet></ROW><ROW><id>6883558</id><snippet>self</snippet></ROW><ROW><id>6883558</id><snippet>TypeError: system() takes no arguments (1 given)</snippet></ROW><ROW><id>6883558</id><snippet>TypeError: unbound method system() must be called with test instance as first argument (got nothing instead)</snippet></ROW><ROW><id>6883558</id><snippet>import platform</snippet></ROW><ROW><id>6883558</id><snippet>staticmethod</snippet></ROW><ROW><id>6883558</id><snippet>class test:
    from platform import system
    system = staticmethod(system)
</snippet></ROW><ROW><id>6883558</id><snippet>import foo
import bar

def fun(param1, param2):
    # .....

if __name__ == '__main__':
    from sys import argv
    if len(argv) &gt; 2:
        fun(argv[1], argv[2])
</snippet></ROW><ROW><id>6883558</id><snippet>from sys import argv</snippet></ROW><ROW><id>6883719</id><snippet>post</snippet></ROW><ROW><id>6883719</id><snippet>get</snippet></ROW><ROW><id>6883994</id><snippet>gobject.idle_add()</snippet></ROW><ROW><id>6883994</id><snippet>def ask_close ():
    self.CloseDialog.run ()
gobject.idle_add (ask_close)
</snippet></ROW><ROW><id>6883994</id><snippet>X</snippet></ROW><ROW><id>6883994</id><snippet>run()</snippet></ROW><ROW><id>6883994</id><snippet>present()</snippet></ROW><ROW><id>6883994</id><snippet>response</snippet></ROW><ROW><id>6883994</id><snippet>X</snippet></ROW><ROW><id>6885104</id><snippet>file1=open('file1.txt','r')
file2=open('file2.txt','r')
obj=[file1.read(), file2.read()]
cPickle.dump(obj,open('result.i2','w'),2)
</snippet></ROW><ROW><id>6885104</id><snippet>obj=[file1,file2]</snippet></ROW><ROW><id>6885446</id><snippet>return</snippet></ROW><ROW><id>6885446</id><snippet>None</snippet></ROW><ROW><id>6885446</id><snippet>None</snippet></ROW><ROW><id>6885446</id><snippet>except: pass</snippet></ROW><ROW><id>6885446</id><snippet>pass</snippet></ROW><ROW><id>6885446</id><snippet>return ''</snippet></ROW><ROW><id>6885446</id><snippet>urlfetch.Error</snippet></ROW><ROW><id>6885869</id><snippet>def strip_unwanted(line):
    title = str(line['title']).replace(' ', '-').replace("´", "")
    title = ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))
    line['title'] = title
    return line

with open("output.csv", encoding = "utf8") as input:
    dic_entries = csv.DictReader(input)
    # use the 'map' function
    new_entries = map(strip_unwanted, dic_entries)

    with open('some.csv', 'wb') as output:
        writer = csv.DictWriter(output)
        writer.writerows(new_entries)
</snippet></ROW><ROW><id>6885928</id><snippet>paginate_by</snippet></ROW><ROW><id>6885928</id><snippet>ListView</snippet></ROW><ROW><id>6885928</id><snippet>url(r'^cat/(?P&lt;category&gt;[\w+\s]*)/page(?P&lt;page&gt;[0-9]+)/$',
    CategorizedPostsView.as_view(paginate_by=3)),
</snippet></ROW><ROW><id>6885928</id><snippet>{% if is_paginated %}
    &lt;div class="pagination"&gt;
        &lt;span class="step-links"&gt;
            {% if page_obj.has_previous %}
                &lt;a href="?page={{ page_obj.previous_page_number }}"&gt;previous&lt;/a&gt;
            {% endif %}

            &lt;span class="current"&gt;
                Page {{ page_obj.number }} of {{ paginator.num_pages }}.
            &lt;/span&gt;

            {% if page_obj.has_next %}
                &lt;a href="?page={{ page_obj.next_page_number }}"&gt;next&lt;/a&gt;
            {% endif %}
        &lt;/span&gt;
    &lt;/div&gt;
{% endif %}
</snippet></ROW><ROW><id>6885984</id><snippet>if event.type == pygame.quit():
</snippet></ROW><ROW><id>6885984</id><snippet>if event.type == pygame.QUIT: # Note the capitalization
</snippet></ROW><ROW><id>6886078</id><snippet>@staticmethod</snippet></ROW><ROW><id>6886078</id><snippet>class lexicon(object):

   @staticmethod
   def scan(data):
      #do the stuff here
</snippet></ROW><ROW><id>6886124</id><snippet>children of Anak</snippet></ROW><ROW><id>6886124</id><snippet>contents=book.read()
re.split(r'(\d+:\d+)',contents)
</snippet></ROW><ROW><id>6886124</id><snippet>import re
import itertools
import textwrap

if __name__=='__main__':
    print "{0:^78}".format("King James Bible")

    books=iter(['Genesis', 'Exodus', 'Leviticus', 'Numbers', 'Deuteronomy', 'Joshua',
           'Judges', 'Ruth', 'I Samuel', 'II Samuel', 'I Kings', 'II Kings',
           'I Chronicles', 'II Chronicles', 'Ezra', 'Nehemiah', 'Esther', 'Job', 'Psalms',
           'Proverbs', 'Ecclesiastes', 'Song of Solomon', 'Isaiah', 'Jeremiah',
           'Lamentations', 'Ezekiel', 'Daniel', 'Hosea', 'Joel', 'Amos', 'Obadiah',
           'Jonah', 'Micah', 'Nahum', 'Habakkuk', 'Zephaniah', 'Haggai', 'Zechariah',
           'Malachi', 'Matthew', 'Mark', 'Luke', 'John', 'Acts', 'Romans', 'I Corinthians',
           'II Corinthians', 'Galatians', 'Ephesians', 'Philippians',
           'Colossians', 'I Thessalonians', 'II Thessalonians', 'I Timothy', 'II Timothy',
           'Titus', 'Philemon', 'Hebrews', 'James', 'I Peter', 'II Peter', 'I John',
           'II John', 'III John', 'Jude', 'Revelation'])

    with open("KJV.txt", "rb") as book:
        contents=book.read()
        data=re.split(r'(\d+:\d+)',contents)[1:]    
        del contents

    word_search = raw_input(r'Enter a word to search: ')

    for chapter_verse, line in itertools.izip(*[iter(data)]*2):
        if chapter_verse=='1:1':
            book=next(books)
        line=' '.join(line.split())
        if word_search in line:
            line=textwrap.fill(line,width=78)
            print('''\
{b} {c}
{l}
'''.format(b=book,c=chapter_verse,l=line))
</snippet></ROW><ROW><id>6886124</id><snippet>test.py</snippet></ROW><ROW><id>6886124</id><snippet>"consuming fire"</snippet></ROW><ROW><id>6886124</id><snippet>% test.py 
                               King James Bible                               
Enter a word to search: consuming fire
Deuteronomy 4:24
For the LORD thy God is a consuming fire, even a jealous God.

Deuteronomy 9:3
Understand therefore this day, that the LORD thy God is he which goeth over
before thee; as a consuming fire he shall destroy them, and he shall bring
them down before thy face: so shalt thou drive them out, and destroy them
quickly, as the LORD hath said unto thee.

Hebrews 12:29
For our God is a consuming fire.
</snippet></ROW><ROW><id>6886124</id><snippet>first_line</snippet></ROW><ROW><id>6886124</id><snippet>chapter_verse</snippet></ROW><ROW><id>6886318</id><snippet>connexion.send(str(enc_data))
</snippet></ROW><ROW><id>6886318</id><snippet>enc_data</snippet></ROW><ROW><id>6886318</id><snippet>str</snippet></ROW><ROW><id>6886318</id><snippet>connexion.send(enc_data[0])
</snippet></ROW><ROW><id>6886507</id><snippet>dir()</snippet></ROW><ROW><id>6886580</id><snippet>$src_dir/Objects/stringlib/split.h</snippet></ROW><ROW><id>6886580</id><snippet>stringlib_split</snippet></ROW><ROW><id>6886585</id><snippet>pygame</snippet></ROW><ROW><id>6886692</id><snippet>class new_integer(int):
  __add__ = magic_decorator(int.__add__)
  __sub__ = magic_decorator(int.__sub__)
  ...
</snippet></ROW><ROW><id>6886692</id><snippet>class new_integer(int):
  to_decorate = ( '__add__', '__sub__', ...)
  for k in to_decorate:
    locals()[k] = magic_decorator(getattr(int, k))

  del to_decorate, k
</snippet></ROW><ROW><id>6886695</id><snippet>for root, dirs, files in os.walk('/starting/path/'):
    for myFile in files:
        if myFile == "index.html":
            print os.path.join(root, myFile)
</snippet></ROW><ROW><id>6886799</id><snippet>from csv import DictReader

city_codes = {}
for row in DictReader(open('file2.csv', 'rb')):
    city_codes[row['city']] = row['code']

for row in DictReader(open('file1.csv', 'rb')):
    print city_codes[row['city']]
</snippet></ROW><ROW><id>6886923</id><snippet>def graphscore(v, proxlimit = 50):
loc = dict([(people[i], (v[i*2], v[i*2+1])) for i in range(0, len(people))])
total = 0.0

#penalize crosscount
for i in range(len(links)):
    for j in range(i+1, len(links)):
        (x1, y1), (x2, y2) = loc[links[i][0]], loc[links[i][1]]
        (x3, y3), (x4, y4) = loc[links[j][0]], loc[links[j][1]]

        den = (y4-y3)*(x2-x1)-(x4-x3)*(y2-y1)
        if den==0: continue #lines parallel

        ua = ((x4-x3)*(y1-y3)-(y4-y3)*(x1-x3))/float(den)
        ub = ((x2-x1)*(y1-y3)-(y2-y1)*(x1-x3))/float(den)
        if ua &gt; 0 and ua &lt; 1 and ub &gt; 0 and ub &lt; 1:
            total += 1.0

#penalize tightened nodes
for i in range(len(people)):
    for j in range(i+1, len(people)):
        (x1, y1), (x2, y2) = loc[people[i]], loc[people[j]]
        dist = math.sqrt(math.pow(x1-x2, 2) + math.pow(y1-y2, 2))
        if dist &lt; proxlimit:
            total += (1.0-(dist/proxlimit))
return total
</snippet></ROW><ROW><id>6886923</id><snippet>people = ['Charlie', 'Augustus', 'Veruca', 'Violet',
         'Mike', 'Joe', 'Willy', 'Miranda']
links = [('Augustus', 'Willy'),
        ('Mike', 'Joe'),
        ('Miranda', 'Mike'),
        ('Violet', 'Augustus'),
        ('Miranda', 'Willy'),
        ('Charlie', 'Mike'),
        ('Veruca', 'Joe'),
        ('Miranda', 'Augustus'),
        ('Willy', 'Augustus'),
        ('Joe', 'Charlie'),
        ('Veruca', 'Augustus'),
        ('Miranda', 'Joe')]
</snippet></ROW><ROW><id>6886929</id><snippet>from networkx.algorithms.traversal.depth_first_search import dfs_edges

G = DiGraph( ... )
for edge in dfs_edges(G, parent1):
    color(edge)
</snippet></ROW><ROW><id>6887195</id><snippet>next</snippet></ROW><ROW><id>6887195</id><snippet>class Application(Frame):
    def __init__(self, parent=None):
        Frame.__init__(self, parent)
        self.pack()

        self.top = Frame(self)
        self.bottom = Frame(self)
        self.bottom2 = Frame(self)
        self.top.pack(side=TOP)
        self.bottom.pack(side=BOTTOM, fill=BOTH, expand=True)
        self.bottom2.pack(side=BOTTOM, fill=BOTH, expand=True)
        #... 
        self.submitbutton = Button(self, text="Submit", command=self.submit)
        self.submitbutton.pack(in_=self.bottom2, side=TOP)
        #...

    #...

    def submit(self):
        page = ('http://www.sec.gov/cgi-bin/browse-edgar?company=&amp;match=&amp;CIK=' + 
                 self.entryWidget.get().strip() + 
                '&amp;filenum=&amp;State=&amp;Country=&amp;SIC=&amp;owner=exclude' 
                '&amp;Find=Find+Companies&amp;action=getcompany')
        #...
        self.soup = ...

    def next(self):
        #...
        #there must be a better way than this to extract the onclick value
        #but I don't use/know BeautifulSoup to help with this part

        npar = str(self.soup.find(value="Next 40"))
        index1 = npar.find('/cgi')
        index2 = npar.find('count=40') + len('count=40')  
        page = 'http://www.sec.gov' + npar[index1:index2]

        sock = urllib.urlopen(page)
        raw = sock.read()
        self.soup = BeautifulSoup(raw)

        #...

if __name__ == '__main__':
    root = Tk()
    root.title("SEC Edgar Search")
    root["padx"] = 10
    root["pady"] = 25

    app = Application(root)

    app.mainloop()
    root.destroy()
</snippet></ROW><ROW><id>6887368</id><snippet>import random; random.seed(42)
cows = {n:random.randrange(50,150) for n in 'abcdefghijkl'}

thin = {}
for name, weight in cows.iteritems():
    thin.setdefault(weight &lt; 100, {})[name] = weight

&gt;&gt;&gt; thin[True]
{'c': 77, 'b': 52, 'd': 72, 'i': 92, 'h': 58, 'k': 71, 'j': 52}

&gt;&gt;&gt; thin[False]
{'a': 113, 'e': 123, 'l': 100, 'g': 139, 'f': 117}
</snippet></ROW><ROW><id>6888270</id><snippet>setFormatter()</snippet></ROW><ROW><id>6888270</id><snippet>import logging

logger = logging.getLogger()  # Logger
logger_handler = logging.StreamHandler()  # Handler for the logger
logger.addHandler(logger_handler)

# First, generic formatter:
logger_handler.setFormatter(logging.Formatter('%(message)s'))
logger.error('error message')  # Test

# New formatter for the handler:
logger_handler.setFormatter(logging.Formatter('PROCESSING FILE xxx - %(message)s'))
logger.error('error message')  # Test
</snippet></ROW><ROW><id>6888270</id><snippet>error message
PROCESSING FILE xxx - error message
</snippet></ROW><ROW><id>6888270</id><snippet>xxx</snippet></ROW><ROW><id>6888440</id><snippet>class Meta:
    verbose_name_plural = "Categories"
</snippet></ROW><ROW><id>6888440</id><snippet>class Meta:</snippet></ROW><ROW><id>6888726</id><snippet>&gt;&gt;&gt; import Gnuplot
&gt;&gt;&gt; x = [1,2,3,4]
&gt;&gt;&gt; gp = Gnuplot.Gnuplot()
&gt;&gt;&gt; gp.title('My title')
&gt;&gt;&gt; gp('set style data linespoints')
&gt;&gt;&gt; gp.plot(x)
</snippet></ROW><ROW><id>6888743</id><snippet>win32api.ShellExecute</snippet></ROW><ROW><id>6888743</id><snippet>runas</snippet></ROW><ROW><id>6889013</id><snippet>pprint</snippet></ROW><ROW><id>6889013</id><snippet>dict</snippet></ROW><ROW><id>6889013</id><snippet>pprint</snippet></ROW><ROW><id>6889013</id><snippet>print</snippet></ROW><ROW><id>6889013</id><snippet>dict</snippet></ROW><ROW><id>6889013</id><snippet>__str__</snippet></ROW><ROW><id>6889013</id><snippet>pprint</snippet></ROW><ROW><id>6889201</id><snippet>REPLACEMENTS = [
    (""", "\""),
    ("'", "'"),
    ...
    ]
for entity, replacement in REPLACEMENTS:
    line = line.replace(entity, replacement)
</snippet></ROW><ROW><id>6889201</id><snippet>string.replace</snippet></ROW><ROW><id>6889201</id><snippet>str</snippet></ROW><ROW><id>6889201</id><snippet>unicode</snippet></ROW><ROW><id>6889259</id><snippet>print tree.xpath("//n:text[@id='findme']/n:tspan/text()",
                 namespaces={'n': "http://www.w3.org/2000/svg"})
</snippet></ROW><ROW><id>6889293</id><snippet> xrefs = {xref.attributes["id"].value 
          for xref in self.grammar.getElementsByTagName("xref")}
</snippet></ROW><ROW><id>6889293</id><snippet>xref</snippet></ROW><ROW><id>6889293</id><snippet>source and source or self.getDefaultSource()
</snippet></ROW><ROW><id>6889293</id><snippet>source or self.getDefaultSource()</snippet></ROW><ROW><id>6889293</id><snippet>standaloneXrefs = [e for e in self.refs.keys() if e not in xrefs]
</snippet></ROW><ROW><id>6889293</id><snippet>standaloneXrefs = set(self.refs) - set(xrefs)
</snippet></ROW><ROW><id>6889365</id><snippet>image_path()</snippet></ROW><ROW><id>6889365</id><snippet>def image_path(size):
    def callback(self, filename)
        """ Example return: [some-django-model]/[medium]/[product1].[jpg] """
        return u'{}/{}/{}.{}'.format(
            slugify(self._meta.verbose_name),
            size,
            self.slug,
            filename.rpartition('.')[2].lower(),
        )
    return callback

class SomeDjangoModel(models.Model):
    tiny = models.ImageField(upload_to=image_path('tiny'), blank=True, null=True)
    small = models.ImageField(upload_to=image_path('small'), blank=True, null=True)
    medium = models.ImageField(upload_to=image_path('medium'), blank=True, null=True)
    press = models.ImageField(upload_to=image_path('press'), blank=True, null=True)
</snippet></ROW><ROW><id>6889383</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6889383</id><snippet>path/to/manage.py yourcommand</snippet></ROW><ROW><id>6889383</id><snippet>CELERY_RESULT_BACKEND = "redis"
REDIS_HOST = "localhost"
REDIS_PORT = 6379
REDIS_DB = 0
REDIS_CONNECT_RETRY = True
</snippet></ROW><ROW><id>6889383</id><snippet>import pickle
from django.core.cache import cache
from django.shortcuts import render
from mytasks import calculate_stuff

from celery.task import task

@task
def calculate_stuff(user_id):
    # ... do your work to update the averages ...
    # now pull the latest series
    averages = TransactionAverage.objects.filter(user=user_id, ...)
    # cache the pickled result for ten minutes 
    cache.set("averages_%s" % user_id, pickle.dumps(averages), 60*10)

def myview(request, user_id):
    ctx = {}
    cached = cache.get("averages_%s" % user_id, None)
    if cached:
        averages = pickle.loads(cached) # use the cached queryset
    else:
        # fetch the latest available data for now, same as in the task
        averages = TransactionAverage.objects.filter(user=user_id, ...)
        # fire off the celery task to update the information in the background
        calculate_stuff.delay(user_id) # doesn't happen in-process.
        ctx['stale_chart'] = True # display a warning, if you like

    ctx['averages'] = averages
    # ... do your other work ...
    render(request, 'my_template.html', ctx)
</snippet></ROW><ROW><id>6889734</id><snippet>l1</snippet></ROW><ROW><id>6889734</id><snippet>l2</snippet></ROW><ROW><id>6889734</id><snippet>l1 + filter(lambda x: x not in l1, l2)
</snippet></ROW><ROW><id>6889734</id><snippet>filter(lambda x: x not in l2, l1)
</snippet></ROW><ROW><id>6889734</id><snippet>&gt;&gt;&gt; l1 = [68,31,93,35,10]
&gt;&gt;&gt; l2 = [93,0,22,10,99,33,21,9]
&gt;&gt;&gt; l1 + [el2 for el2 in l2 if el2 not in l1]
[68, 31, 93, 35, 10, 0, 22, 99, 33, 21, 9]
&gt;&gt;&gt; [el1 for el1 in l1 if el1 not in l2]
[68, 31, 35]
</snippet></ROW><ROW><id>6889734</id><snippet>set</snippet></ROW><ROW><id>6889734</id><snippet>&gt;&gt;&gt; sl1 = set(s1)
&gt;&gt;&gt; l1 + [el2 for el2 in l2 if el2 not in sl1]
[68, 31, 93, 35, 10, 0, 22, 99, 33, 21, 9]
&gt;&gt;&gt; sl2 = set(s2)
&gt;&gt;&gt; [el1 for el1 in l1 if el1 not in sl2]
[68, 31, 35]
</snippet></ROW><ROW><id>6889788</id><snippet>&gt;&gt;&gt; a, b = zip(*[])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: need more than 0 values to unpack
</snippet></ROW><ROW><id>6889788</id><snippet>unchoked_conns</snippet></ROW><ROW><id>6889798</id><snippet>a = b.c()</snippet></ROW><ROW><id>6889798</id><snippet>load 0 (b); load_str 'c'; get_attr; call_function 0; store 1 (a)</snippet></ROW><ROW><id>6889798</id><snippet>dis</snippet></ROW><ROW><id>6889801</id><snippet>&gt;&gt;&gt; [x for x in li if 'ar' in x[2]]
[['0', '20', 'ar'], ['50', '199', 'bar'], ['24', '69', 'sarkozy']]
</snippet></ROW><ROW><id>6889900</id><snippet>os.path.dirname(parent.__file__)</snippet></ROW><ROW><id>6889900</id><snippet>glob.glob()</snippet></ROW><ROW><id>6889900</id><snippet>os.walk()</snippet></ROW><ROW><id>6890244</id><snippet>n</snippet></ROW><ROW><id>6890244</id><snippet>n = 5
groups = [files_arguments[i:i + n] for i in range(0, len(files_arguments), n)]
</snippet></ROW><ROW><id>6890255</id><snippet>''.join(li).rfind('a')</snippet></ROW><ROW><id>6890255</id><snippet>(len(li) - 1) - li[::-1].index('a')</snippet></ROW><ROW><id>6890255</id><snippet>li</snippet></ROW><ROW><id>6890255</id><snippet>len(li)</snippet></ROW><ROW><id>6890255</id><snippet>-1</snippet></ROW><ROW><id>6890639</id><snippet>struct.unpack("11B", "\x83\x08\x04\x04\x60\x02\x00\x81\x15\x01\x01")
</snippet></ROW><ROW><id>6890639</id><snippet>struct.unpack("!11B", "\x83\x08\x04\x04\x60\x02\x00\x81\x15\x01\x01")
</snippet></ROW><ROW><id>6890639</id><snippet>map(ord, "\x83\x08\x04\x04\x60\x02\x00\x81\x15\x01\x01")
</snippet></ROW><ROW><id>6890639</id><snippet>struct.unpack("!IIHB", "\x83\x08\x04\x04\x60\x02\x00\x81\x15\x01\x01")
</snippet></ROW><ROW><id>6890639</id><snippet>!</snippet></ROW><ROW><id>6890639</id><snippet>&gt;</snippet></ROW><ROW><id>6890639</id><snippet>reversed</snippet></ROW><ROW><id>6890639</id><snippet>reversed(map(ord, data))</snippet></ROW><ROW><id>6890844</id><snippet>'spam'</snippet></ROW><ROW><id>6890844</id><snippet>for</snippet></ROW><ROW><id>6890844</id><snippet>'spam'</snippet></ROW><ROW><id>6890955</id><snippet>close</snippet></ROW><ROW><id>6891349</id><snippet>&lt;input type="hidden" name="next" value="{% url my_comment_was_posted %}" /&gt;
</snippet></ROW><ROW><id>6891390</id><snippet>\s+</snippet></ROW><ROW><id>6891390</id><snippet>\b</snippet></ROW><ROW><id>6891390</id><snippet>import re

dict = [('british','7'),('cuneate nucleus','Medulla oblongata'),('Motoneurons','anterior')]

filetext = """&lt;s id="69-7"&gt;British Meanwhile is the studio 7 album by british pop band 10cc 7.&lt;/s&gt;
&lt;s id="5239778-2"&gt;Medulla oblongata,the name refers collectively to the cuneate nucleus and gracile nucleus, which are present at the junction between the spinal cord and the medulla oblongata.&lt;/s&gt;
&lt;s id="21120-99"&gt;Terior horn cells, motoneurons located in the spinal.&lt;/s&gt;
"""

linelist = re.split(u'[\n|\r\n]+', filetext)

s_tag = re.compile(r"(&lt;s[^&gt;]+&gt;)(.*?)(&lt;/s&gt;)")

for i in range(3):
    left, right = dict[i]

    line_parts = re.search(s_tag, linelist[i])
    start = line_parts.group(1)
    content = line_parts.group(2)
    end = line_parts.group(3)

    left_match = "(?i)\\b(%s)\\b" % left
    right_match = "(?i)\\b(%s)\\b" % right
    if re.search(left_match, content) and re.search(right_match, content):
        line1 = re.sub(left_match, '&lt;w1&gt;\\1&lt;/w1&gt;', content)
        line2 = re.sub(right_match, '&lt;w2&gt;\\1&lt;/w2&gt;', line1)
        print(line_parts.group(1) + line2 + line_parts.group(3))
</snippet></ROW><ROW><id>6891512</id><snippet>__getattr__</snippet></ROW><ROW><id>6891512</id><snippet>x</snippet></ROW><ROW><id>6891512</id><snippet>y</snippet></ROW><ROW><id>6891512</id><snippet>__add__</snippet></ROW><ROW><id>6891512</id><snippet>__getattr__</snippet></ROW><ROW><id>6891512</id><snippet>None</snippet></ROW><ROW><id>6891512</id><snippet>__getattr__</snippet></ROW><ROW><id>6891512</id><snippet>__getattr__</snippet></ROW><ROW><id>6891512</id><snippet>__getattr__</snippet></ROW><ROW><id>6891512</id><snippet>__getattr__</snippet></ROW><ROW><id>6891512</id><snippet>x</snippet></ROW><ROW><id>6891512</id><snippet>y</snippet></ROW><ROW><id>6891512</id><snippet>x</snippet></ROW><ROW><id>6891512</id><snippet>y</snippet></ROW><ROW><id>6891512</id><snippet>__getattr__</snippet></ROW><ROW><id>6891512</id><snippet>@property
def x(self):
    return self.vec_repr[0]

@property
def y(self):
    return self.vec_repr[1]
</snippet></ROW><ROW><id>6891815</id><snippet>NULL, 'root'</snippet></ROW><ROW><id>6891815</id><snippet>NULL = NULL</snippet></ROW><ROW><id>6891815</id><snippet>id</snippet></ROW><ROW><id>6891964</id><snippet>for</snippet></ROW><ROW><id>6891964</id><snippet>story</snippet></ROW><ROW><id>6891964</id><snippet>x</snippet></ROW><ROW><id>6891964</id><snippet>[]</snippet></ROW><ROW><id>6891964</id><snippet>l = ['a','b']
print l[0]
print l['a'] // type error
</snippet></ROW><ROW><id>6891964</id><snippet>story = [str(x).replace("&lt;p&gt;","\n").replace("&lt;\p&gt;","") for x in story]
</snippet></ROW><ROW><id>6891964</id><snippet>story</snippet></ROW><ROW><id>6892062</id><snippet>write()</snippet></ROW><ROW><id>6892211</id><snippet>getopt</snippet></ROW><ROW><id>6892221</id><snippet>questions = [(q, request.session.get(str(q.id), False)) for q in questions]
</snippet></ROW><ROW><id>6892221</id><snippet>{% for q, has_voted in questions %}
...
{% endfor %}
</snippet></ROW><ROW><id>6892236</id><snippet>configparser</snippet></ROW><ROW><id>6892237</id><snippet>axis</snippet></ROW><ROW><id>6892257</id><snippet>a/img...</snippet></ROW><ROW><id>6892257</id><snippet>a[img...]</snippet></ROW><ROW><id>6892257</id><snippet>import lxml.html as lh

content='''&lt;a class="noborder" href="StdResults.aspx"&gt;
&lt;img src="arrowr.gif" title="Go to next page"&gt;&lt;/img&gt;
&lt;/a&gt;'''

doc=lh.fromstring(content)
for elt in doc.xpath("//a[img[@title='Go to next page']]"):
    print(elt.attrib['href'])

# StdResults.aspx
</snippet></ROW><ROW><id>6892257</id><snippet>"//a[img[@title='Go to next page']]/@href"
</snippet></ROW><ROW><id>6892306</id><snippet>!CLS</snippet></ROW><ROW><id>6892331</id><snippet>im = ImageGrab.grabclipboard()

if isinstance(im, Image.Image):
... got an image ...
elif im:
   for filename in im:
       try:
           im = Image.open(filename)
       except IOError:
           pass # ignore this file
       else:
           ... got an image ...
else:
    ... clipboard empty ...
</snippet></ROW><ROW><id>6892484</id><snippet>class MyEntity(db.Model):
    text = db.TextProperty()
</snippet></ROW><ROW><id>6892484</id><snippet>text</snippet></ROW><ROW><id>6892484</id><snippet>class MyEntity(db.Model):
    description = db.TextProperty()
</snippet></ROW><ROW><id>6892484</id><snippet>text</snippet></ROW><ROW><id>6892484</id><snippet>description</snippet></ROW><ROW><id>6892484</id><snippet>text</snippet></ROW><ROW><id>6892535</id><snippet>#!/usr/bin/env python

def joiner(s, token):
    i = 0
    while i &lt; len(s):
        if s[i] == token:
            yield s[i] + ' ' + s[i+1]
            i=i+2
        else:
            yield s[i]
            i=i+1

sentence = ['a','list','with','a','lot','of','strings','in','it']

for i in joiner(sentence, 'a'):
    print i
</snippet></ROW><ROW><id>6892535</id><snippet>a list
with
a lot
of
strings
in
it
</snippet></ROW><ROW><id>6892566</id><snippet>class MyFrame(Frame):
    def __init__(self, master=None):
        ...
        panel1 = CustomPanel(tab1, "hello")
        panel1.pack(fill="both", expand=True)
        tab1.inner_panel = panel1
        ...

    def callCustomMethod(self):
        tab1 = self.noteBook.page(0) 
        panel1 = tab1.inner_panel
        ...
</snippet></ROW><ROW><id>6892600</id><snippet>&gt;&gt;&gt; import bitstring
&gt;&gt;&gt; stream=bitstring.BitStream()
&gt;&gt;&gt; stream.append("int:32=4")
&gt;&gt;&gt; stream.append("int:16=10")
&gt;&gt;&gt; stream.append("int:8=24")
&gt;&gt;&gt; stream
BitStream('0x00000004000a18')
&gt;&gt;&gt; stream.bytes
'\x00\x00\x00\x04\x00\n\x18'
</snippet></ROW><ROW><id>6892602</id><snippet>u''.join(that_list)
</snippet></ROW><ROW><id>6892635</id><snippet>__rmul__ = __mul__
</snippet></ROW><ROW><id>6892701</id><snippet>PyWeakReference</snippet></ROW><ROW><id>6892701</id><snippet>weakrefobject.h</snippet></ROW><ROW><id>6892701</id><snippet>weakref</snippet></ROW><ROW><id>6892714</id><snippet>a = 1
b = 2
c = Add(a, b)
</snippet></ROW><ROW><id>6892714</id><snippet>list = ['random', 'set', 'of', 'string']
for item in list:
    item.replace('a','b')
    print item
</snippet></ROW><ROW><id>6892714</id><snippet>list = ['random', 'set', 'of', 'string']
for item in list:
    item = item.replace('a','b')
    print item
</snippet></ROW><ROW><id>6892759</id><snippet>import time

lastResult = 100

def checkNextID(ID, lastResult = lastResult, diff = [8,18,7,17,6,16,5,15]):
    runs = 0
    SEEN = set()

    while True:
        if ID&gt;lastResult:
            print ('\n=========================='
                   '\nID==%s'
                   '\n   ID&gt;lastResult is %s : program STOPS')\
                  % (ID,ID&gt;lastResult,)
            break
        runs += 1
        if runs % 10 == 0:  time.sleep(0.5)
        if ID in SEEN:
            print '-----------------\nID=='+str(ID)+'  already seen, not examined'
            ID += 1
        else:
            curRes = isValid(ID)
            if curRes:
                print '--------------------------\nID=='+str(ID)+'  vaaaalid'
                while True:
                    for i in diff:
                        runs += 1
                        if runs % 10 == 0:  time.sleep(0.5)
                        curRes = isValid(ID+i)
                        SEEN.add(ID+i)
                        if curRes:
                            print '   i==%2s   ID+i==%s   valid' % (i,ID+i)
                            ID += i
                            print '--------------------------\nID==%s' % str(ID)
                            break
                        else:
                            print '   i==%2s   ID+i==%s   not valid' % (i,ID+i)
                    else:
                        ID += 1
                        break
            else:
                print '--------------------------\nID==%s  not valid' % ID
                ID += 1


def isValid(ID, valid_ones = (1,9,17,25,50,52,60,83,97,98)):
    return ID in valid_ones


checkNextID(0)
</snippet></ROW><ROW><id>6892759</id><snippet>--------------------------
ID==0  not valid
--------------------------
ID==1  vaaaalid
   i== 8   ID+i==9   valid
--------------------------
ID==9
   i== 8   ID+i==17   valid
--------------------------
ID==17
   i== 8   ID+i==25   valid
--------------------------
ID==25
   i== 8   ID+i==33   not valid
   i==18   ID+i==43   not valid
   i== 7   ID+i==32   not valid
   i==17   ID+i==42   not valid
   i== 6   ID+i==31   not valid
   i==16   ID+i==41   not valid
   i== 5   ID+i==30   not valid
   i==15   ID+i==40   not valid
--------------------------
ID==26  not valid
--------------------------
ID==27  not valid
--------------------------
ID==28  not valid
--------------------------
ID==29  not valid
-----------------
ID==30  already seen, not examined
-----------------
ID==31  already seen, not examined
-----------------
ID==32  already seen, not examined
-----------------
ID==33  already seen, not examined
--------------------------
ID==34  not valid
--------------------------
ID==35  not valid
--------------------------
ID==36  not valid
--------------------------
ID==37  not valid
--------------------------
ID==38  not valid
--------------------------
ID==39  not valid
-----------------
ID==40  already seen, not examined
-----------------
ID==41  already seen, not examined
-----------------
ID==42  already seen, not examined
-----------------
ID==43  already seen, not examined
--------------------------
ID==44  not valid
--------------------------
ID==45  not valid
--------------------------
ID==46  not valid
--------------------------
ID==47  not valid
--------------------------
ID==48  not valid
--------------------------
ID==49  not valid
--------------------------
ID==50  vaaaalid
   i== 8   ID+i==58   not valid
   i==18   ID+i==68   not valid
   i== 7   ID+i==57   not valid
   i==17   ID+i==67   not valid
   i== 6   ID+i==56   not valid
   i==16   ID+i==66   not valid
   i== 5   ID+i==55   not valid
   i==15   ID+i==65   not valid
--------------------------
ID==51  not valid
--------------------------
ID==52  vaaaalid
   i== 8   ID+i==60   valid
--------------------------
ID==60
   i== 8   ID+i==68   not valid
   i==18   ID+i==78   not valid
   i== 7   ID+i==67   not valid
   i==17   ID+i==77   not valid
   i== 6   ID+i==66   not valid
   i==16   ID+i==76   not valid
   i== 5   ID+i==65   not valid
   i==15   ID+i==75   not valid
--------------------------
ID==61  not valid
--------------------------
ID==62  not valid
--------------------------
ID==63  not valid
--------------------------
ID==64  not valid
-----------------
ID==65  already seen, not examined
-----------------
ID==66  already seen, not examined
-----------------
ID==67  already seen, not examined
-----------------
ID==68  already seen, not examined
--------------------------
ID==69  not valid
--------------------------
ID==70  not valid
--------------------------
ID==71  not valid
--------------------------
ID==72  not valid
--------------------------
ID==73  not valid
--------------------------
ID==74  not valid
-----------------
ID==75  already seen, not examined
-----------------
ID==76  already seen, not examined
-----------------
ID==77  already seen, not examined
-----------------
ID==78  already seen, not examined
--------------------------
ID==79  not valid
--------------------------
ID==80  not valid
--------------------------
ID==81  not valid
--------------------------
ID==82  not valid
--------------------------
ID==83  vaaaalid
   i== 8   ID+i==91   not valid
   i==18   ID+i==101   not valid
   i== 7   ID+i==90   not valid
   i==17   ID+i==100   not valid
   i== 6   ID+i==89   not valid
   i==16   ID+i==99   not valid
   i== 5   ID+i==88   not valid
   i==15   ID+i==98   valid
--------------------------
ID==98
   i== 8   ID+i==106   not valid
   i==18   ID+i==116   not valid
   i== 7   ID+i==105   not valid
   i==17   ID+i==115   not valid
   i== 6   ID+i==104   not valid
   i==16   ID+i==114   not valid
   i== 5   ID+i==103   not valid
   i==15   ID+i==113   not valid
-----------------
ID==99  already seen, not examined
-----------------
ID==100  already seen, not examined

==========================
ID==101
   ID&gt;lastResult is True : program STOPS
</snippet></ROW><ROW><id>6892759</id><snippet>import time

lastResult = 100

def checkNextID(ID, lastResult = lastResult, diff = [8,18,7,17,6,16,5,15]):
    runs = 0
    maxdiff = max(diff)
    others = [x for x in xrange(1,maxdiff) if x not in diff]
    lastothers = others[-1]
    SEEN = set()

    while True:
        if ID&gt;lastResult:
            print ('\n=========================='
                   '\nID==%s'
                   '\n   ID&gt;lastResult is %s : program STOPS')\
                  % (ID,ID&gt;lastResult,)
            break
        runs += 1
        if runs % 10 == 0:  time.sleep(0.5)
        if ID in SEEN:
            print '-----------------\nID=='+str(ID)+'  already seen, not examined'
            ID += 1
        else:
            curRes = isValid(ID)
            if curRes:
                print '------------------------------------\nID=='+str(ID)+'  vaaaalid'
                while True:
                    for i in diff:
                        runs += 1
                        if runs % 10 == 0:  time.sleep(0.5)
                        curRes = isValid(ID+i)
                        SEEN.add(ID+i)
                        if curRes:
                            print '   i==%2s   ID+i==%s   valid' % (i,ID+i)
                            ID += i
                            print '--------------------------\nID==%s' % str(ID)
                            break
                        else:
                            print '   i==%2s   ID+i==%s   not valid' % (i,ID+i)
                    else:
                        for j in others:
                            if ID+j&gt;lastResult:
                                print '\n   j==%2s   %s+%s==%s&gt;lastResult==%s is %s' \
                                      % (j,ID,j,ID+j,lastResult,ID+j&gt;lastResult)
                                ID += j
                                print '\n--------------------------\nnow ID==',ID
                                break
                            runs += 1
                            if runs % 10 == 0:  time.sleep(0.5)
                            curRes = isValid(ID+j)
                            SEEN.add(ID+j)
                            if curRes:
                                print '   j==%2s   ID+j==%s   valid' % (j,ID+j)
                                ID += j
                                print '--------------------------\nID=='+str(ID)
                                break
                            else:
                                print '   j==%2s   ID+j==%s   not valid' % (j,ID+j)

                        if j==lastothers:
                            ID += maxdiff + 1
                            print '   ID += %s + 1 ==&gt; ID==%s' % (maxdiff,ID)
                            break
                        elif ID&gt;lastResult:
                            print '   ID&gt;lastResult==%s&gt;%s is %s ==&gt; WILL STOP' % (ID,lastResult,ID&gt;lastResult)
                            break

            else:
                print '-------------------------\nID=='+str(ID)+'  not valid'
                ID += 1




def isValid(ID, valid_ones = (1,9,17,25,50,52,60,83,97,98)):
    return ID in valid_ones


checkNextID(0)
</snippet></ROW><ROW><id>6892759</id><snippet>-------------------------
ID==0  not valid
------------------------------------
ID==1  vaaaalid
   i== 8   ID+i==9   valid
--------------------------
ID==9
   i== 8   ID+i==17   valid
--------------------------
ID==17
   i== 8   ID+i==25   valid
--------------------------
ID==25
   i== 8   ID+i==33   not valid
   i==18   ID+i==43   not valid
   i== 7   ID+i==32   not valid
   i==17   ID+i==42   not valid
   i== 6   ID+i==31   not valid
   i==16   ID+i==41   not valid
   i== 5   ID+i==30   not valid
   i==15   ID+i==40   not valid
   j== 1   ID+j==26   not valid
   j== 2   ID+j==27   not valid
   j== 3   ID+j==28   not valid
   j== 4   ID+j==29   not valid
   j== 9   ID+j==34   not valid
   j==10   ID+j==35   not valid
   j==11   ID+j==36   not valid
   j==12   ID+j==37   not valid
   j==13   ID+j==38   not valid
   j==14   ID+j==39   not valid
   ID += 18 + 1 ==&gt; ID==44
-------------------------
ID==44  not valid
-------------------------
ID==45  not valid
-------------------------
ID==46  not valid
-------------------------
ID==47  not valid
-------------------------
ID==48  not valid
-------------------------
ID==49  not valid
------------------------------------
ID==50  vaaaalid
   i== 8   ID+i==58   not valid
   i==18   ID+i==68   not valid
   i== 7   ID+i==57   not valid
   i==17   ID+i==67   not valid
   i== 6   ID+i==56   not valid
   i==16   ID+i==66   not valid
   i== 5   ID+i==55   not valid
   i==15   ID+i==65   not valid
   j== 1   ID+j==51   not valid
   j== 2   ID+j==52   valid
--------------------------
ID==52
   i== 8   ID+i==60   valid
--------------------------
ID==60
   i== 8   ID+i==68   not valid
   i==18   ID+i==78   not valid
   i== 7   ID+i==67   not valid
   i==17   ID+i==77   not valid
   i== 6   ID+i==66   not valid
   i==16   ID+i==76   not valid
   i== 5   ID+i==65   not valid
   i==15   ID+i==75   not valid
   j== 1   ID+j==61   not valid
   j== 2   ID+j==62   not valid
   j== 3   ID+j==63   not valid
   j== 4   ID+j==64   not valid
   j== 9   ID+j==69   not valid
   j==10   ID+j==70   not valid
   j==11   ID+j==71   not valid
   j==12   ID+j==72   not valid
   j==13   ID+j==73   not valid
   j==14   ID+j==74   not valid
   ID += 18 + 1 ==&gt; ID==79
-------------------------
ID==79  not valid
-------------------------
ID==80  not valid
-------------------------
ID==81  not valid
-------------------------
ID==82  not valid
------------------------------------
ID==83  vaaaalid
   i== 8   ID+i==91   not valid
   i==18   ID+i==101   not valid
   i== 7   ID+i==90   not valid
   i==17   ID+i==100   not valid
   i== 6   ID+i==89   not valid
   i==16   ID+i==99   not valid
   i== 5   ID+i==88   not valid
   i==15   ID+i==98   valid
--------------------------
ID==98
   i== 8   ID+i==106   not valid
   i==18   ID+i==116   not valid
   i== 7   ID+i==105   not valid
   i==17   ID+i==115   not valid
   i== 6   ID+i==104   not valid
   i==16   ID+i==114   not valid
   i== 5   ID+i==103   not valid
   i==15   ID+i==113   not valid
   j== 1   ID+j==99   not valid
   j== 2   ID+j==100   not valid

   j== 3   98+3==101&gt;lastResult==100 is True

--------------------------
now ID== 101
   ID&gt;lastResult==101&gt;100 is True ==&gt; WILL STOP

==========================
ID==101
   ID&gt;lastResult is True : program STOPS
</snippet></ROW><ROW><id>6892759</id><snippet>    if ID in SEEN:
        print '-----------------\nID=='+str(ID)+'  already seen, not examined'
        ID += 1
</snippet></ROW><ROW><id>6892759</id><snippet>import time

lastResult = 100

def checkNextID(ID, lastResult = lastResult, diff = [8,18,7,17,6,16,5,15]):
    runs = 0
    SEEN = set()
    while True:
        if ID&gt;lastResult:
            print ('\n=========================='
                   '\nID==%s'
                   '\n   ID&gt;lastResult is %s : program STOPS')\
                  % (ID,ID&gt;lastResult,)
            break
        runs += 1
        if runs % 10 == 0:  time.sleep(0.5)
        if ID in SEEN:
            print '-----------------\n%s\nID==%s  already seen, not examined' % (SEEN,ID)
            ID += 1
        else:
            curRes = isValid(ID)
            if curRes:
                print '--------------------------\n%s\nID==%s  vaaaalid'  % (SEEN,ID)
                while True:
                    for i in diff:
                        runs += 1
                        if runs % 10 == 0:  time.sleep(0.5)
                        curRes = isValid(ID+i)
                        print '   '+str(SEEN)
                        if i==diff[0]:
                            SEEN = set([ID+i])
                        else:
                            SEEN.add(ID+i)
                        if curRes:
                            print '   i==%2s   ID+i==%s   valid' % (i,ID+i)
                            ID += i
                            print '--------------------------\nID==%s' % str(ID)
                            break
                        else:
                            print '   i==%2s   ID+i==%s   not valid' % (i,ID+i)
                    else:
                        ID += 1
                        break
            else:
                print '--------------------------\n%s\nID==%s  not vaaaaalid' % (SEEN,ID)
                ID += 1


def isValid(ID, valid_ones = (1,9,17,25,30,50,52,60,83,97,98)):
    return ID in valid_ones


checkNextID(0)
</snippet></ROW><ROW><id>6892759</id><snippet>--------------------------
set([])
ID==0  not vaaaaalid
--------------------------
set([])
ID==1  vaaaalid
   set([])
   i== 8   ID+i==9   valid
--------------------------
ID==9
   set([9])
   i== 8   ID+i==17   valid
--------------------------
ID==17
   set([17])
   i== 8   ID+i==25   valid
--------------------------
ID==25
   set([25])
   i== 8   ID+i==33   not valid
   set([33])
   i==18   ID+i==43   not valid
   set([33, 43])
   i== 7   ID+i==32   not valid
   set([32, 33, 43])
   i==17   ID+i==42   not valid
   set([32, 33, 42, 43])
   i== 6   ID+i==31   not valid
   set([32, 33, 42, 43, 31])
   i==16   ID+i==41   not valid
   set([32, 33, 41, 42, 43, 31])
   i== 5   ID+i==30   valid
--------------------------
ID==30
   set([32, 33, 41, 42, 43, 30, 31])
   i== 8   ID+i==38   not valid
   set([38])
   i==18   ID+i==48   not valid
   set([48, 38])
   i== 7   ID+i==37   not valid
   set([48, 37, 38])
   i==17   ID+i==47   not valid
   set([48, 37, 38, 47])
   i== 6   ID+i==36   not valid
   set([48, 36, 37, 38, 47])
   i==16   ID+i==46   not valid
   set([36, 37, 38, 46, 47, 48])
   i== 5   ID+i==35   not valid
   set([35, 36, 37, 38, 46, 47, 48])
   i==15   ID+i==45   not valid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==31  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==32  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==33  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==34  not vaaaaalid
-----------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==35  already seen, not examined
-----------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==36  already seen, not examined
-----------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==37  already seen, not examined
-----------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==38  already seen, not examined
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==39  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==40  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==41  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==42  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==43  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==44  not vaaaaalid
-----------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==45  already seen, not examined
-----------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==46  already seen, not examined
-----------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==47  already seen, not examined
-----------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==48  already seen, not examined
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==49  not vaaaaalid
--------------------------
set([35, 36, 37, 38, 45, 46, 47, 48])
ID==50  vaaaalid
   set([35, 36, 37, 38, 45, 46, 47, 48])
   i== 8   ID+i==58   not valid
   set([58])
   i==18   ID+i==68   not valid
   set([58, 68])
   i== 7   ID+i==57   not valid
   set([57, 58, 68])
   i==17   ID+i==67   not valid
   set([57, 58, 67, 68])
   i== 6   ID+i==56   not valid
   set([56, 57, 58, 67, 68])
   i==16   ID+i==66   not valid
   set([66, 67, 68, 56, 57, 58])
   i== 5   ID+i==55   not valid
   set([66, 67, 68, 55, 56, 57, 58])
   i==15   ID+i==65   not valid
--------------------------
set([65, 66, 67, 68, 55, 56, 57, 58])
ID==51  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 55, 56, 57, 58])
ID==52  vaaaalid
   set([65, 66, 67, 68, 55, 56, 57, 58])
   i== 8   ID+i==60   valid
--------------------------
ID==60
   set([60])
   i== 8   ID+i==68   not valid
   set([68])
   i==18   ID+i==78   not valid
   set([68, 78])
   i== 7   ID+i==67   not valid
   set([67, 68, 78])
   i==17   ID+i==77   not valid
   set([67, 68, 77, 78])
   i== 6   ID+i==66   not valid
   set([66, 67, 68, 77, 78])
   i==16   ID+i==76   not valid
   set([66, 67, 68, 76, 77, 78])
   i== 5   ID+i==65   not valid
   set([65, 66, 67, 68, 76, 77, 78])
   i==15   ID+i==75   not valid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==61  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==62  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==63  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==64  not vaaaaalid
-----------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==65  already seen, not examined
-----------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==66  already seen, not examined
-----------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==67  already seen, not examined
-----------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==68  already seen, not examined
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==69  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==70  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==71  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==72  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==73  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==74  not vaaaaalid
-----------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==75  already seen, not examined
-----------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==76  already seen, not examined
-----------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==77  already seen, not examined
-----------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==78  already seen, not examined
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==79  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==80  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==81  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==82  not vaaaaalid
--------------------------
set([65, 66, 67, 68, 75, 76, 77, 78])
ID==83  vaaaalid
   set([65, 66, 67, 68, 75, 76, 77, 78])
   i== 8   ID+i==91   not valid
   set([91])
   i==18   ID+i==101   not valid
   set([91, 101])
   i== 7   ID+i==90   not valid
   set([90, 91, 101])
   i==17   ID+i==100   not valid
   set([90, 91, 100, 101])
   i== 6   ID+i==89   not valid
   set([89, 90, 91, 100, 101])
   i==16   ID+i==99   not valid
   set([99, 100, 101, 89, 90, 91])
   i== 5   ID+i==88   not valid
   set([99, 100, 101, 88, 89, 90, 91])
   i==15   ID+i==98   valid
--------------------------
ID==98
   set([98, 99, 100, 101, 88, 89, 90, 91])
   i== 8   ID+i==106   not valid
   set([106])
   i==18   ID+i==116   not valid
   set([106, 116])
   i== 7   ID+i==105   not valid
   set([105, 106, 116])
   i==17   ID+i==115   not valid
   set([105, 106, 115, 116])
   i== 6   ID+i==104   not valid
   set([104, 105, 106, 115, 116])
   i==16   ID+i==114   not valid
   set([104, 105, 106, 114, 115, 116])
   i== 5   ID+i==103   not valid
   set([103, 104, 105, 106, 114, 115, 116])
   i==15   ID+i==113   not valid
--------------------------
set([103, 104, 105, 106, 113, 114, 115, 116])
ID==99  not vaaaaalid
--------------------------
set([103, 104, 105, 106, 113, 114, 115, 116])
ID==100  not vaaaaalid

==========================
ID==101
   ID&gt;lastResult is True : program STOPS
</snippet></ROW><ROW><id>6893198</id><snippet>pixbuf = gtk.gdk.pixbuf_new_from_file('1.png')</snippet></ROW><ROW><id>6893198</id><snippet>pixbuf = gtk.gdk.pixbuf_new_from_file('/home/username/applet/1.png')</snippet></ROW><ROW><id>6893198</id><snippet>pixbuf = gtk.gdk.pixbuf_new_from_file(os.path.join(os.path.dirname(__file__), '1.png'))</snippet></ROW><ROW><id>6893198</id><snippet>import os</snippet></ROW><ROW><id>6893261</id><snippet>#!/usr/bin/python
from subprocess import *
import os

def fork_and_input(input, handle):
    """Send input to handle in a child process."""
    # Make sure input is iterable before forking
    input = iter(input)
    if os.fork():
        # Parent
        handle.close()
    else:
        # Child
        try:
            handle.writelines(input)
            handle.close()
        # An IOError here means some *other* part of the program
        # crashed, so don't complain here.
        except IOError:
            pass
        exit()

# A really big iterator
input_iterator = ("hello %s\n" % x for x in xrange(100000000))

subproc = Popen("cat", stdin=PIPE, stdout=PIPE)
fork_and_input(input_iterator, subproc.stdin)

for line in subproc.stdout:
    print line,
</snippet></ROW><ROW><id>6893280</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8  -*-

import pygtk
pygtk.require('2.0')
import gtk
import time

class Clock:

    def __init__(self):
        window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        window.connect("destroy", lambda w: gtk.main_quit())
        window.set_title("Clock")
        self.label = gtk.Label()
        window.add(self.label)
        window.set_border_width(25)
        window.show_all ()

    def update(self):
        self.label.set_text(time.strftime('%H:%M:%S'))
        return True  #needed to keep the update method in the schedule

def main():
    gtk.main()

if __name__ == "__main__":
    clock = Clock()
    gtk.timeout_add(200, clock.update)  #add to the main loop scheduled tasks
    main()
</snippet></ROW><ROW><id>6893570</id><snippet>from mymodel import MANUFACTURERS
mdict = dict(MANUFACTURERS)


def myview(request, manufacturer):
    if not (manufacturer in mdict):
        raise Http404

    #--&gt; do what you need to do
</snippet></ROW><ROW><id>6893570</id><snippet>mdict[manufacturer]
</snippet></ROW><ROW><id>6893798</id><snippet>s = "&gt;&gt;&gt; testFunction(2, 3, 4)\r\nTrue &gt;&gt;&gt; testFunction(2, 1, 4)\r\nFalse &gt;&gt;&gt; legalTriangles(-1, -1, -1)\r\nFalse"
for func, result in [i.splitlines() for i in s.split("&gt;&gt;&gt;") if i]:
    print "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;" % (func.strip(), result.strip())
</snippet></ROW><ROW><id>6893798</id><snippet>&lt;tr&gt;&lt;td&gt;testFunction(2, 3, 4)&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;testFunction(2, 1, 4)&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;legalTriangles(-1, -1, -1)&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;/tr&gt;
</snippet></ROW><ROW><id>6893933</id><snippet>request.POST</snippet></ROW><ROW><id>6893933</id><snippet>request.FILES</snippet></ROW><ROW><id>6894057</id><snippet>class Daily(admin.ModelAdmin):
    fields    = ['user', 'hours_as_sec']
</snippet></ROW><ROW><id>6894057</id><snippet>class DailyAdmin(admin.ModelAdmin):
    fields    = ['user', 'hours_as_sec']
</snippet></ROW><ROW><id>6894057</id><snippet>admin.site.register(Daily,DailyAdmin)
</snippet></ROW><ROW><id>6894208</id><snippet>setup.py</snippet></ROW><ROW><id>6894208</id><snippet>install_requires</snippet></ROW><ROW><id>6894208</id><snippet>setup(
    ...
    install_requires = ['setuptools', 'south'],
    ...
)
</snippet></ROW><ROW><id>6894325</id><snippet>&gt;0.999</snippet></ROW><ROW><id>6894325</id><snippet>[inverseCDF(random()) for _ in range(10)]</snippet></ROW><ROW><id>6894325</id><snippet>[0.5+random()/2 for _ in range(10)]</snippet></ROW><ROW><id>6894325</id><snippet>[r for r in (random.random() for x in range(10)) if r&gt;0.5]
</snippet></ROW><ROW><id>6894325</id><snippet>from random import random
from itertools import *

def randoms():
    while True:
        yield random()

def rejectionSample(pred, n):
    return islice(filter(pred, randoms()), n)
</snippet></ROW><ROW><id>6894325</id><snippet>&gt;&gt;&gt; print( list(rejectionSample(lambda x:x&gt;0.5)) )
[0.6656564857979361, 0.9850389778418555, 0.9607471536139308, 0.9191328900300356, 0.810783093197139]
</snippet></ROW><ROW><id>6894325</id><snippet>def rejectionSample(pred, n):
    count = 0
    while count&lt;n:
        r = random()
        if pred(r):
            yield r
            count += 1 
</snippet></ROW><ROW><id>6894325</id><snippet>[next(filter(pred,randoms())) for _ in range(10)]
</snippet></ROW><ROW><id>6894325</id><snippet>randoms()</snippet></ROW><ROW><id>6894325</id><snippet>(random() for _ in count())</snippet></ROW><ROW><id>6894325</id><snippet>[
 (lambda f:f(f,random()))(lambda self,r:r if r&gt;0.5 else self(self,random()))
 for _ in range(10)
]
</snippet></ROW><ROW><id>6894615</id><snippet>class DbCheckMiddleware(object):

    def process_request(self, request):
        try:
            "Some DB Code"
            success = True
        except:
            success = False                

        request.db_connection_successful = success
</snippet></ROW><ROW><id>6895297</id><snippet>$("#feedback").dialog({model:true,
                height: 250,
                width: 350,
                autoOpen:false,
                title:"Candidate Feedback",
                Buttons:{
                'Submit': function() {
                 $("#myform").submit();
                 $(this).dialog('close');
                 /* submit = true;
                  submitForm();*/
                  return true;
                }
                },
</snippet></ROW><ROW><id>6895461</id><snippet>cls._instance</snippet></ROW><ROW><id>6895461</id><snippet>type.__call__(cls, *args, **kwargs)</snippet></ROW><ROW><id>6895461</id><snippet>&gt;&gt;&gt; type.__call__(A)
A __init__ triggered
&lt;__main__.A object at 0x00BADB30&gt;
</snippet></ROW><ROW><id>6895461</id><snippet>A.__new__</snippet></ROW><ROW><id>6895461</id><snippet>A.__init__</snippet></ROW><ROW><id>6895642</id><snippet>rate</snippet></ROW><ROW><id>6895642</id><snippet>rate *= (1 - npv(rate, cashflows) / investment)
</snippet></ROW><ROW><id>6895642</id><snippet>rate</snippet></ROW><ROW><id>6895642</id><snippet>rate = rate * (1 - npv(rate, cashflows) / investment)
</snippet></ROW><ROW><id>6895642</id><snippet>rate</snippet></ROW><ROW><id>6895642</id><snippet>rate *= (1 - npv(rate, cashflows))
</snippet></ROW><ROW><id>6895642</id><snippet>investment</snippet></ROW><ROW><id>6895642</id><snippet>investment</snippet></ROW><ROW><id>6895809</id><snippet>Components = ['SAVE_DOCUMENT', 'GET_DOCUMENT', 'DVK_SEND', 'DVK_RECEIVE', 'GET_USER_INFO', 'NOTIFICATIONS', 'ERROR_LOG', 'SUMMARY_STATUS']
missed = [x for x in Components if x + "_STATUS" not in locals() or x + "_DESC" not in locals()]
if missed:
    print "Missing components: {0:}".format(missed)
    sys.exit(StateUnknown)        
</snippet></ROW><ROW><id>6896253</id><snippet>db.session.bind = db.get_engine(app, 'site2')
</snippet></ROW><ROW><id>6896253</id><snippet>db.session.bind = db.get_engine(app, orderObject.__bind_key__)
order = orderObject.query.get(orderid)
</snippet></ROW><ROW><id>6896253</id><snippet>with</snippet></ROW><ROW><id>6896905</id><snippet>   for val in data:
       intVal = val[0]
       strVal = val[1]
       if intVal % 100 == 0: \\ for 100, 200, ...
          print str(intVal)+"\t\t\t"+strVal
       elif intVal % 10 == 0:  \\ for 110, 210, 220 ...
          print "\t"+str(intVal)+"\t\t"+strVal
       else:
          \\for 111, 112, ...
          print "\t\t"+str(intVal)+"\t"+strVal
</snippet></ROW><ROW><id>6897813</id><snippet>keys</snippet></ROW><ROW><id>6897813</id><snippet>In [20]: d=OrderedDict((("fruit", "banana"), ("drinks", 'water'), ("animal", "cat")))

In [21]: d.keys().index('animal')
Out[21]: 2
</snippet></ROW><ROW><id>6897813</id><snippet>iterkeys()</snippet></ROW><ROW><id>6897847</id><snippet>s</snippet></ROW><ROW><id>6897847</id><snippet>words</snippet></ROW><ROW><id>6897847</id><snippet>def substrings_in_set(s, words):
    if s in words:
        yield [s]
    for i in range(1, len(s)):
        if s[:i] not in words:
            continue
        for rest in substrings_in_set(s[i:], words):
            yield [s[:i]] + rest
</snippet></ROW><ROW><id>6897847</id><snippet>words</snippet></ROW><ROW><id>6897847</id><snippet>words</snippet></ROW><ROW><id>6897847</id><snippet># Assuming Linux. Word list may also be at /usr/dict/words. 
# If not on Linux, grab yourself an enlish word list and insert here:
words = set(x.strip().lower() for x in open("/usr/share/dict/words").readlines())

# The above english dictionary for some reason lists all single letters as words.
# Remove all except "i" and "u" (remember a string is an iterable, which means
# that set("abc") == set(["a", "b", "c"])).
words -= set("bcdefghjklmnopqrstvwxyz")

# If there are more words we don't like, we remove them like this:
words -= set(("ex", "rs", "ra", "frobnicate"))

# We may also add words that we do want to recognize. Now the domain name
# slartibartfast4ever.co.uk will be properly counted, for instance.
words |= set(("4", "2", "slartibartfast")) 
</snippet></ROW><ROW><id>6897847</id><snippet>count = {}
no_match = []
domains = ["examplecartrading.com", "examplepensions.co.uk", 
    "exampledeals.org", "examplesummeroffers.com"]

# Assume domains is the list of domain names ["examplecartrading.com", ...]
for domain in domains:
    # Extract the part in front of the first ".", and make it lower case
    name = domain.partition(".")[0].lower()
    found = set()
    for split in substrings_in_set(name, words):
        found |= set(split)
    for word in found:
        count[word] = count.get(word, 0) + 1
    if not found:
        no_match.append(name)

print count
print "No match found for:", no_match
</snippet></ROW><ROW><id>6897847</id><snippet>{'ions': 1, 'pens': 1, 'summer': 1, 'car': 1, 'pensions': 1, 'deals': 1, 'offers': 1, 'trading': 1, 'example': 4}</snippet></ROW><ROW><id>6897847</id><snippet>set</snippet></ROW><ROW><id>6897847</id><snippet>-=</snippet></ROW><ROW><id>6897847</id><snippet>|=</snippet></ROW><ROW><id>6897847</id><snippet>all</snippet></ROW><ROW><id>6897847</id><snippet>all</snippet></ROW><ROW><id>6897847</id><snippet>False</snippet></ROW><ROW><id>6897980</id><snippet>update_image</snippet></ROW><ROW><id>6897980</id><snippet>threading</snippet></ROW><ROW><id>6897980</id><snippet>import matplotlib
matplotlib.use('TkAgg')
from matplotlib import pyplot as p
from scipy import zeros
import random
import threading


w,h = 320,200

black = zeros((h,w,3), dtype='uint8')
red = black.copy(); red[:,:,0] = 255
green = black.copy(); green[:,:,1] = 255
blue = black.copy(); blue[:,:,2] = 255

def ants():
    from scipy import rand, dstack
    return dstack([(255*rand(h,w)).astype('uint8')]*3)

fig = p.figure()
axs = [fig.add_subplot(1,3,i) for i in xrange(3)]
[ax.imshow(black) for ax in axs]

def update_image(ax):
    ## this takes some time
    import time
    time.sleep(3)
    ax.images[0].set_data(random.choice([red, green, blue]))
    ax.figure.canvas.draw()

def hit(event):
    if event.inaxes in axs:
        update_axs = [event.inaxes]
    else:
        update_axs = axs
    for ax in update_axs:
        ax.images[0].set_data(ants())
    p.draw()
    for ax in update_axs:
        t=threading.Thread(target=update_image,args=(ax,))
        t.daemon=True
        t.start()

cid = fig.canvas.mpl_connect('button_press_event', hit)
p.show()
</snippet></ROW><ROW><id>6898181</id><snippet>__dict__</snippet></ROW><ROW><id>6898181</id><snippet>result.status = code
</snippet></ROW><ROW><id>6898181</id><snippet>"status"</snippet></ROW><ROW><id>6898181</id><snippet>code</snippet></ROW><ROW><id>6898329</id><snippet>with EXPR as VAR:
   BLOCK

#translates to:

mgr = (EXPR)
exit = type(mgr).__exit__  # Not calling it yet
value = type(mgr).__enter__(mgr)
exc = True
try:
    try:
        VAR = value  # Only if "as VAR" is present
        BLOCK
    except:
        # The exceptional case is handled here
        exc = False
        if not exit(mgr, *sys.exc_info()):
            raise
        # The exception is swallowed if exit() returns true
finally:
    # The normal and non-local-goto cases are handled here
    if exc:
        exit(mgr, None, None, None)
</snippet></ROW><ROW><id>6898574</id><snippet>def recurs(l):
    for key in l.keys():
        if key == '_events':
            yield l[key]
        else:
            for x in recurs(l[key]):
                yield x
</snippet></ROW><ROW><id>6899178</id><snippet>def get_records(history, start_date, end_date):
    for date, entry in history.iteritems():
        if start_date &lt;= date &lt;= end_date:
             yield date, entry
</snippet></ROW><ROW><id>6899178</id><snippet>&lt;</snippet></ROW><ROW><id>6899178</id><snippet>&gt;</snippet></ROW><ROW><id>6899178</id><snippet>datetime</snippet></ROW><ROW><id>6899402</id><snippet>import urllib2, StringIO, gzip
f = urllib2.urlopen("http://www.heavenplaza.com")
data = StringIO.StringIO(f.read())
gzipper = gzip.GzipFile(fileobj=data)
print gzipper.read()
</snippet></ROW><ROW><id>6899500</id><snippet>import traceback, logging

class MyStreamHandler(logging.StreamHandler):
    def format(self, record):
        try:
            return logging.StreamHandler.format(self, record)
        except TypeError:
            # Print a stack trace that includes the original log call
            traceback.print_stack() 


if __name__ == "__main__":
    log = logging.getLogger("testlogger")
    handler = MyStreamHandler()

    log.addHandler(handler)

    log.error("Try interpolating an int correctly: %i", 1)

    log.error("Now try passing a string to an int: %d", 'abc')

    log.error("And then a string to a string %s", 'abc')
</snippet></ROW><ROW><id>6899500</id><snippet>Try interpolating an int correctly: 1
  File "logtest2.py", line 19, in ?
    log.error("Now try passing a string to an int: %d", 'abc')
  File "/usr/lib64/python2.4/logging/__init__.py", line 999, in error
    apply(self._log, (ERROR, msg, args), kwargs)
  File "/usr/lib64/python2.4/logging/__init__.py", line 1079, in _log
    self.handle(record)
  File "/usr/lib64/python2.4/logging/__init__.py", line 1089, in handle
    self.callHandlers(record)
  File "/usr/lib64/python2.4/logging/__init__.py", line 1126, in callHandlers
    hdlr.handle(record)
  File "/usr/lib64/python2.4/logging/__init__.py", line 642, in handle
    self.emit(record)
  File "/usr/lib64/python2.4/logging/__init__.py", line 731, in emit
    msg = self.format(record)
  File "logtest2.py", line 8, in format
    traceback.print_stack()
None
And then a string to a string abc
</snippet></ROW><ROW><id>6899500</id><snippet>log.error("%d", 'a string')
</snippet></ROW><ROW><id>6899658</id><snippet>"""%(name)s went to the store.""" % {"name": "John"}
</snippet></ROW><ROW><id>6899658</id><snippet>"""%(name)s went to the store.""" % dict(name="John")
</snippet></ROW><ROW><id>6899758</id><snippet>#!/usr/bin/env python

import pprint

revisions = [
    ['01.02.2010','abc','qwe'],
    ['02.02.2010','abc','qwe'],
    ['03.02.2010','aaa','qwe'],
    ['04.02.2010','aaa','qwe'],
    ['05.02.2010','aaa','qwe'],
    ['06.02.2010','aaa','dsa'],
]

uniq, seen = [], set() # sets have O(1) membership tests

for rev in revisions:
    if tuple(rev[1:]) in seen:
        continue
    else:
        seen.add(tuple(rev[1:]))
        uniq.append(rev)

pprint.pprint(uniq)

# prints:
# [['01.02.2010', 'abc', 'qwe'],
#  ['03.02.2010', 'aaa', 'qwe'],
#  ['06.02.2010', 'aaa', 'dsa']]
</snippet></ROW><ROW><id>6899952</id><snippet>import pylab
import numpy as np
import matplotlib as mpl
import random
import matplotlib.cm as cm

my_cmap = cm.bone

def my_square_scatter(axes, x_array, y_array, size_array, color_array):
    for x, y, size, color in zip(x_array, y_array, size_array, color_array):
        square = pylab.Rectangle((x-size/2,y-size/2), size, size, facecolor = my_cmap(color))
        axes.add_patch(square)
    return True

x = np.arange(100)
y = np.arange(100)
random.shuffle(y)
h = np.arange(100)/10.0
d = np.arange(100)/100.0
random.shuffle(d)

fig = pylab.figure(1)
fig.clf()
axes = pylab.axes()
my_square_scatter(axes, x, y, h, d)
pylab.axis('scaled')

#Create your own colorbar based on the parent axes.
ax, _ = mpl.colorbar.make_axes(axes)
cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=mpl.colors.Normalize(vmin=0.0, vmax=1.0))
#cbar.set_clim(0.0,1.0) #Scale the colorbar; default is 0--1


pylab.show()
</snippet></ROW><ROW><id>6900342</id><snippet>a + b
</snippet></ROW><ROW><id>6900342</id><snippet>type(a).__add__(a, b)
</snippet></ROW><ROW><id>6900342</id><snippet>a.__add__(b)
</snippet></ROW><ROW><id>6900342</id><snippet>&gt;&gt;&gt; class MyInt(int):
...     pass
... 
&gt;&gt;&gt; a = MyInt(3)
&gt;&gt;&gt; b = MyInt(4)
&gt;&gt;&gt; a + b
7
&gt;&gt;&gt; a.__add__ = lambda self, other: 42
&gt;&gt;&gt; a + b
7
</snippet></ROW><ROW><id>6900342</id><snippet>__enter__()</snippet></ROW><ROW><id>6900342</id><snippet>__exit__()</snippet></ROW><ROW><id>6900358</id><snippet>composed</snippet></ROW><ROW><id>6900358</id><snippet>composed.append(lambda *args, **kwargs: func(composed[-1](*args,**kwargs)))
</snippet></ROW><ROW><id>6900358</id><snippet>composed[-1]</snippet></ROW><ROW><id>6900358</id><snippet>composed[-1]</snippet></ROW><ROW><id>6900358</id><snippet>def comp2(f1, f2):
    return lambda *args, **kwargs: f1(f2(*args, **kwargs))

...
for func in funcs:
     composed.append(comp2(func, composed[-1]))
</snippet></ROW><ROW><id>6900568</id><snippet>c.executemany(strQuery, rows(
    *[readfile(afiles_dt[f][0]) for f in range(len(afiles_dt))]
))
</snippet></ROW><ROW><id>6900592</id><snippet>os.path.sep</snippet></ROW><ROW><id>6900592</id><snippet>path</snippet></ROW><ROW><id>6900592</id><snippet>join</snippet></ROW><ROW><id>6900592</id><snippet>split</snippet></ROW><ROW><id>6900592</id><snippet>dirname</snippet></ROW><ROW><id>6900592</id><snippet>basename</snippet></ROW><ROW><id>6900592</id><snippet>path.sep</snippet></ROW><ROW><id>6900592</id><snippet>&gt;&gt;&gt; os.path.join("foo", "bar", "baz")
'foo/bar/baz'
&gt;&gt;&gt; os.path.split(_)
('foo/bar', 'baz')
</snippet></ROW><ROW><id>6900620</id><snippet>in</snippet></ROW><ROW><id>6900620</id><snippet>Node.objects.filter(status__in=['a', 'p', 'h'])
</snippet></ROW><ROW><id>6900620</id><snippet>.order_by('status')</snippet></ROW><ROW><id>6900703</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; text = '''&lt;s id="1792387-2"&gt;Castro Verde is situated in the Baixo Alentejo Subregion within a territory known locally as the Campo Branco (English: White Plains).&lt;/s&gt;'''
&gt;&gt;&gt; def edit(s):
...     return 'Changed Text'
... 
&gt;&gt;&gt; t = etree.fromstring(text)
&gt;&gt;&gt; t.text = edit(t.text)
&gt;&gt;&gt; etree.tostring(t)
'&lt;s id="1792387-2"&gt;Changed Text&lt;/s&gt;'
</snippet></ROW><ROW><id>6900881</id><snippet>EM_SETSEL</snippet></ROW><ROW><id>6900881</id><snippet>WM_GETTEXTLENGTH</snippet></ROW><ROW><id>6900881</id><snippet>EM_REPLACESEL</snippet></ROW><ROW><id>6900881</id><snippet>WM_GETTEXT</snippet></ROW><ROW><id>6900881</id><snippet>WM_SETTEXT</snippet></ROW><ROW><id>6900881</id><snippet>EM_SETCHARFORMAT</snippet></ROW><ROW><id>6900977</id><snippet>d = dict(itertools.izip_longest(*[iter(l)] * 2, fillvalue=""))
</snippet></ROW><ROW><id>6901738</id><snippet>sys.setdefaultencoding</snippet></ROW><ROW><id>6901789</id><snippet>m = ldap.initialize(server)
try:
    m.start_tls_s()
except ldap.LDAPError as e:
    print(e)
</snippet></ROW><ROW><id>6901967</id><snippet>Set-ExecutionPolicy Unrestriced</snippet></ROW><ROW><id>6901967</id><snippet>psxmlgen = subprocess.Popen([r'C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe',
                             '-ExecutionPolicy',
                             'Unrestricted',
                             './buildxml.ps1',
                             arg1, arg2, arg3], cwd=os.getcwd())
result = psxmlgen.wait()
</snippet></ROW><ROW><id>6902027</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>6902027</id><snippet>py25-rpy2</snippet></ROW><ROW><id>6902027</id><snippet>py26-rpy2</snippet></ROW><ROW><id>6902027</id><snippet>py27-rpy2</snippet></ROW><ROW><id>6902027</id><snippet>py27-rpy2</snippet></ROW><ROW><id>6902027</id><snippet>python2.7</snippet></ROW><ROW><id>6902027</id><snippet>/opt/local/bin/python2.7
</snippet></ROW><ROW><id>6902105</id><snippet>user = User.objects.create_user(username=new_data['username'], email=new_data['email'])
print user.pk #Already works as create_user saves the new instance.
user.first_name = new_data['email'] #Can't assign to first_name in create_user.
user.save()
print user.pk #Will work.
</snippet></ROW><ROW><id>6902255</id><snippet>def myFunc(*args, **kwargs):
    optDefault = kwargs.pop('optDefault', 1)
    assert kwargs == {}, "There may only be one keyword argument to myFunc"
</snippet></ROW><ROW><id>6902381</id><snippet># Start
data = display.Display().screen().root.query_pointer()._data 
x = data["root_x"] 
y = data["root_y"] 
z = time.time()

# Time passes...

# End
data = display.Display().screen().root.query_pointer()._data 
x2 = data["root_x"] 
y2 = data["root_y"] 
z2 = time.time()

# Determine distance traveled
dx = x2 - x1
dy = y2 - y1
dist = math.sqrt( math.pow(dx, 2) + math.pow(dy, 2) ) # Distance between 2 points

# Get the change in time
dz = z2 - z1

# Print out the speed
print "I've traveled {0}".format(dist/dz)
# Convert that to the units you want
</snippet></ROW><ROW><id>6902403</id><snippet>$ cloc Orange-2.0.0b/
    1625 text files.
    1508 unique files.                                          
     305 files ignored.

http://cloc.sourceforge.net v 1.53  T=5.0 s (251.4 files/s, 62502.0 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                         714          25736          24393          90413
C++         &lt;-- !!!            125          16505           5423          61998
HTML                           235           8643             95          29406
C                               22           2436           5794          14876
C/C++ Header                   134           5982           4497          13878
CSS                              6            318             81           1373
make                            10             81             23            318
Javascript                       1             14             52             91
SQL                              5              5              5             50
DOS Batch                        5              3              1             20
-------------------------------------------------------------------------------
SUM:                          1257          59723          40364         212423
-------------------------------------------------------------------------------
</snippet></ROW><ROW><id>6902792</id><snippet>Zipfile.testzip</snippet></ROW><ROW><id>6903298</id><snippet>.rowcount 

       This read-only attribute specifies the number of rows that
        the last .execute*() produced (for DQL statements like
        'select') or affected (for DML statements like 'update' or
        'insert').

       The attribute is -1 in case no .execute*() has been
        performed on the cursor or the rowcount of the last
        operation is cannot be determined by the interface. [7]

       Note: Future versions of the DB API specification could
        redefine the latter case to have the object return None
        instead of -1.
</snippet></ROW><ROW><id>6903310</id><snippet>/Applications</snippet></ROW><ROW><id>6903310</id><snippet>/usr/bin/cc</snippet></ROW><ROW><id>6903458</id><snippet>User()</snippet></ROW><ROW><id>6903458</id><snippet>User.__new__()</snippet></ROW><ROW><id>6903458</id><snippet>User.__init__()</snippet></ROW><ROW><id>6903563</id><snippet>print repr(s)
&gt;&gt;&gt; 'ttaassdd\n\rssleeroo'
</snippet></ROW><ROW><id>6903597</id><snippet>str.split([</snippet></ROW><ROW><id>6903597</id><snippet>[,</snippet></ROW><ROW><id>6903597</id><snippet>]])</snippet></ROW><ROW><id>6903597</id><snippet>maxsplit+1</snippet></ROW><ROW><id>6903597</id><snippet>s.split('mango', 1)[1]
</snippet></ROW><ROW><id>6903924</id><snippet>p1, p2, p3 = map(lambda x: Point(), xrange(3))
</snippet></ROW><ROW><id>6903924</id><snippet>p1, p2, p3 = (Point() for x in xrange(3))
</snippet></ROW><ROW><id>6904085</id><snippet>os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])
</snippet></ROW><ROW><id>6904085</id><snippet>import os

def filterls(src, filter_func):
    for root, dirs, files in os.walk(src):
        for f in files:
            if filter_func(f):
                path = os.path.join(root, f)
                yield path[len(src)+1:]
</snippet></ROW><ROW><id>6904085</id><snippet># Get a list of all visible files rooted in the 'path/to/the/dir' directory
print list(filterls('path/to/the/dir', lambda p: not p.startswith('.')))
</snippet></ROW><ROW><id>6904157</id><snippet>setup.py</snippet></ROW><ROW><id>6904220</id><snippet>&gt;&gt;&gt; uu.decode(open('0000000000-11-005978.txt'))
Warning: Trailing garbage
</snippet></ROW><ROW><id>6904220</id><snippet>..</snippet></ROW><ROW><id>6904243</id><snippet>while i &lt; len(direction_words):
    if direction_words[i] in s.split():
        s= string.lower(s)
        print [('direction', direction_words[i] ) ] # &lt;--- HERE
        i+=1 
</snippet></ROW><ROW><id>6904243</id><snippet>def scan(s):
    result = []
    ...

    while i &lt; len(direction_words):
        if direction_words[i] in s.split():
            s= string.lower(s)
            # change the `print` statements to `result += …`
            result += [('direction', direction_words[i] ) ]
            i+=1 

    ...
    return result
</snippet></ROW><ROW><id>6904315</id><snippet>import StringIO
output = StringIO.StringIO()
result = subprocess.call('python', 'myscript.py', stdout=output)
value = output.get_value()

string = render(’templates/foo.pt’,
    {'value':value},
    request=request)
</snippet></ROW><ROW><id>6904509</id><snippet>threading.Thread(target=self._thread_function, args=(arg1,),
                 kwargs={'arg2':arg2}, name='thread_function').start()
</snippet></ROW><ROW><id>6904577</id><snippet>EM_SETCHARFORMAT</snippet></ROW><ROW><id>6904577</id><snippet>EM_SETCHARFORMAT</snippet></ROW><ROW><id>6904577</id><snippet>WM_USER</snippet></ROW><ROW><id>6904577</id><snippet>lParam</snippet></ROW><ROW><id>6904577</id><snippet>WriteProcessMemory</snippet></ROW><ROW><id>6904577</id><snippet>CHARFORMAT</snippet></ROW><ROW><id>6904878</id><snippet>x = [2,1,3]
y = x[:]
y.sort()
print y
print x
</snippet></ROW><ROW><id>6905033</id><snippet>shlex</snippet></ROW><ROW><id>6905033</id><snippet>re</snippet></ROW><ROW><id>6905033</id><snippet>([A-Za-z]+)=(?P&lt;quote&gt;['"])(.+?)(?P=quote)</snippet></ROW><ROW><id>6905402</id><snippet>match = re.search(r'(\w+)\s(?:D\.C\.), (\w\w)\W', location).groups()
</snippet></ROW><ROW><id>6905402</id><snippet>('Washington', 'DC')</snippet></ROW><ROW><id>6905402</id><snippet>.group()</snippet></ROW><ROW><id>6905402</id><snippet>.groups()</snippet></ROW><ROW><id>6905583</id><snippet>__get__</snippet></ROW><ROW><id>6905583</id><snippet>__set__</snippet></ROW><ROW><id>6905583</id><snippet>__delete__</snippet></ROW><ROW><id>6905583</id><snippet>class my_property(object):
    def __init__(self, getter, setter, deleter):
        self.getter  = getter
        self.setter  = setter
        self.deleter = deleter

    def __get__(self, instance, owner):
        return self.getter(instance)

    def __set__(self, instance, value):
        self.setter(instance, value)

    def __delete__(self, instance):
        self.deleter(instance)

class Foo(object):
    def __init__(self):
        self._x = 42

    def get_x(self):
        print 'getter'
        return self._x

    def set_x(self, value):
        print 'setter'
        self._x = value

    def del_x(self):
        print 'deleter'
        del self._x

    x = my_property(get_x, set_x, del_x)

obj = Foo()
print obj.x
obj.x = 69
del obj.x
print obj.x
</snippet></ROW><ROW><id>6905678</id><snippet>try:
    x.the_dict_operation()
except TypeError:
    # x was not the expected type for the operation
    raise # or whatever.
</snippet></ROW><ROW><id>6905738</id><snippet>string</snippet></ROW><ROW><id>6905738</id><snippet>import string
string = ''.join([('' if c in string.punctuation else ' ')+c for c in wordlist]).strip()
</snippet></ROW><ROW><id>6905749</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer

# for demonstration purposes, just return an ever increasing integer
score = 0
def get_scores():
    global score
    score += 1
    return score

# create server, register get_scores function
server = SimpleXMLRPCServer(("localhost", 8000))
server.register_function(get_scores, "get_scores")

# start the server
server.serve_forever()
</snippet></ROW><ROW><id>6905749</id><snippet>import Tkinter as tk
import xmlrpclib
import socket

class SampleApp(tk.Tk):
    # url of the server
    url = "http://localhost:8000"

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        # initialize connection to server
        self.server = xmlrpclib.ServerProxy(self.url)

        # create GUI
        self.status = tk.Label(text="", anchor="w")
        self.label = tk.Label(text="current score: ?")
        self.status.pack(side="bottom", fill="x")
        self.label.pack(side="top", fill="both", expand=True)
        self.wm_geometry("400x200")

        # wait a second to give the GUI a chance to
        # display, then start fetching the scores 
        # every 5 seconds
        self.after(1000, self.get_latest_scores, 2000)

    def update_status(self, message=""):
        '''Update the statusbar with the given message'''
        self.status.configure(text=message)
        self.update_idletasks()

    def get_latest_scores(self, interval):
        '''Retrieve latest scores and update the UI'''
        try:
            self.update_status("connecting...")
            score = self.server.get_scores()
            self.label.configure(text="current score: %s" % score)
            self.update_status()
        except socket.error, e:
            self.update_status("error: %s" % str(e))
        self.after(interval, self.get_latest_scores, interval)

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>6906188</id><snippet>[[' '.join(w[0] for w in sent) for sent in p] for p in paras]
</snippet></ROW><ROW><id>6906318</id><snippet>--enable-unicode=ucs4</snippet></ROW><ROW><id>6906318</id><snippet>./configure</snippet></ROW><ROW><id>6906318</id><snippet>/usr/local/python2.5/</snippet></ROW><ROW><id>6906382</id><snippet>vars()</snippet></ROW><ROW><id>6906382</id><snippet>self</snippet></ROW><ROW><id>6906382</id><snippet>vars()</snippet></ROW><ROW><id>6906382</id><snippet>vars()[team_name] = team(team_name)
list_of_teams.append(team_name)
</snippet></ROW><ROW><id>6906382</id><snippet>vars()</snippet></ROW><ROW><id>6906382</id><snippet># Just like we want a class to represent teams, since those are "a thing" in our
# program, we want one for each player as well.

class player(object):
  __slots__ = ['name', 'stats', 'pos']
  def __init__(self, name, stats, pos):
    self.name = name
    self.stats = stats
    self.pos = pos


# Asking the user for information to create an object is not the responsibility of
# that class. We should use external functions for this.
def create_player(name):
  print 'add stats' # fill out the appropriate stats through raw_input 
  stat1 = raw_input('stat1: ')
  stat2 = raw_input('stat2: ')
  pos = raw_input('POS: ')
  # Now we create and return the 'player' object.
  return player(name, {'stat1': stat1, 'stat2': stat2}, pos)


class team(object):
  __slots__ = ['name_to_player', 'position_to_player']
  def __init__(self):
    # We don't make any lists, just dicts, because we want to use them primarily
    # for lookup. Notice how I've named the attributes. In particular, I **don't**
    # talk about type names. That's just an implementation detail. What we care about
    # is how they work: you put a name in, get a player out.
    self.name_to_player = {}
    self.position_to_player = {}

  # Again, we don't ask the questions here; this just actually adds the player.
  def add_player(self, player):
    self.name_to_player[player.name] = player
    self.position_to_player[player.pos] = player

  # Again, we don't ask the questions here; this just does the actual edit.
  def edit_player(self, name, stat, new_value):
    self.name_to_player[name].stats[stat] = new_value


def main(): # the main function
  teams = {} # dict from team name to team object.
  while True:
    print teams.keys()
    # Your human interface was needlessly awkward here; you know from the supplied name
    # whether it's a new team or an old one, because it will or won't be in your
    # existing set of teams. Similarly for players.
    team_name = raw_input('team name? ')
    if team_name not in teams.keys():
      teams[team_name] = team() # create a new team
    else: # edit an existing one
      team = teams[team_name]
      player_name = raw_input('player name? ')
      if player_name in team.name_to_player.keys(): # edit an existing player
        stat = raw_input("stat? ")
        value = raw_input("value? ")
        team.edit_player(player_name, stat, value)
      else: # add a new player
        team.add_player(create_player(player_name))

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>6906543</id><snippet>"BUY FOOD".title()  # returns "Buy Food"
</snippet></ROW><ROW><id>6906543</id><snippet>"[^a-z]*[A-Z][^a-z]*"</snippet></ROW><ROW><id>6906543</id><snippet>re.sub()</snippet></ROW><ROW><id>6906543</id><snippet>.title()</snippet></ROW><ROW><id>6906560</id><snippet>gcc-4.0</snippet></ROW><ROW><id>6906560</id><snippet>virtualenv</snippet></ROW><ROW><id>6906560</id><snippet>gcc-4.0</snippet></ROW><ROW><id>6906560</id><snippet>python</snippet></ROW><ROW><id>6906560</id><snippet>virtualenv</snippet></ROW><ROW><id>6906560</id><snippet>gcc-4.0</snippet></ROW><ROW><id>6906560</id><snippet>Distribute</snippet></ROW><ROW><id>6906560</id><snippet>pip</snippet></ROW><ROW><id>6906560</id><snippet>virtualenv</snippet></ROW><ROW><id>6906688</id><snippet>distances[(clust[i].id,clust[j].id)]=distance(clust[i].vec,clust[j].vec)
</snippet></ROW><ROW><id>6906688</id><snippet>distances</snippet></ROW><ROW><id>6906688</id><snippet>distance</snippet></ROW><ROW><id>6906688</id><snippet>d=distances[(clust[i].id,clust[j].id)]
</snippet></ROW><ROW><id>6906688</id><snippet>d</snippet></ROW><ROW><id>6906699</id><snippet>from time import sleep
for i in range(5):
    sleep(10)
</snippet></ROW><ROW><id>6906699</id><snippet>from threading import Thread
from time import sleep

# Threading.
# The amount of seconds to wait before checking for an unpause condition.
# Sleeping is necessary because if we don't, we'll block the os and make the
# program look like it's frozen.
PAUSE_SLEEP = 5

# The number of iterations we want.
TOTAL_ITERATIONS = 5

class myThread(Thread):
    '''
    A thread used to do some stuff.
    '''
    def __init__(self, gui, otherStuff):
        '''
        Constructor. We pass in a reference to the GUI object we want
        to update here, as well as any other variables we want this
        thread to be aware of.
        '''
        # Construct the parent instance.
        Thread.__init__(self)

        # Store the gui, so that we can update it later.
        self.gui = gui

        # Store any other variables we want this thread to have access to.
        self.myStuff = otherStuff

        # Tracks the paused and stopped states of the thread.
        self.isPaused = False
        self.isStopped = False

    def pause(self):
        '''
        Called to pause the thread.
        '''
        self.isPaused = True

    def unpause(self):
        '''
        Called to unpause the thread.
        '''
        self.isPaused = False

    def stop(self):
        '''
        Called to stop the thread.
        '''
        self.isStopped = True

    def run(self):
        '''
        The main thread code.
        '''
        # The current iteration.
        currentIteration = 0

        # Keep going if the job is active.
        while self.isStopped == False:
            try:
                # Check for a pause.
                if self.isPaused:
                    # Sleep to let the os schedule other tasks.
                    sleep(PAUSE_SLEEP)
                    # Continue with the loop.
                    continue

                # Check to see if we're still processing the set of
                # things we want to do.
                if currentIteration &lt; TOTAL_ITERATIONS:
                    # Do the individual thing we want to do.
                    sleep(10)
                    # Update the count.
                    currentIteration += 1
                    # Update the gui.
                    self.gui.update(currentIteration,TOTAL_ITERATIONS)
                else:
                    # Stop the loop.
                    self.isStopped = True

            except Exception as exception:
                # If anything bad happens, report the error. It won't
                # get written to stderr.
                print exception
                # Stop the loop.
                self.isStopped = True

        # Tell the gui we're done.
        self.gui.stop()
</snippet></ROW><ROW><id>6906699</id><snippet>aThread = myThread(myGui,myOtherStuff)
aThread.start()
</snippet></ROW><ROW><id>6906796</id><snippet>groupby</snippet></ROW><ROW><id>6906796</id><snippet>&gt;&gt;&gt; even_odd_key = lambda x: x % 2
&gt;&gt;&gt; evens_odds = sorted(range(10), key=even_odd_key)
&gt;&gt;&gt; evens_odds_grouped = itertools.groupby(evens_odds, key=even_odd_key)
&gt;&gt;&gt; [(k, list(g)) for k, g in evens_odds_grouped]
[(0, [0, 2, 4, 6, 8]), (1, [1, 3, 5, 7, 9])]
</snippet></ROW><ROW><id>6906796</id><snippet>&gt;&gt;&gt; evens_odds_grouped = itertools.groupby(evens_odds, key=even_odd_key)
&gt;&gt;&gt; groups = [(k, g) for k, g in evens_odds_grouped]
&gt;&gt;&gt; groups
[(0, &lt;itertools._grouper object at 0x1004d7110&gt;), (1, &lt;itertools._grouper object at 0x1004ccbd0&gt;)]
</snippet></ROW><ROW><id>6906796</id><snippet>&gt;&gt;&gt; [(k, list(g)) for k, g in groups]
[(0, []), (1, [9])]
</snippet></ROW><ROW><id>6907188</id><snippet>FILE_UPLOAD_MAX_MEMORY_SIZE</snippet></ROW><ROW><id>6907188</id><snippet>FILE_UPLOAD_HANDLERS</snippet></ROW><ROW><id>6907188</id><snippet>("django.core.files.uploadhandler.MemoryFileUploadHandler",
 "django.core.files.uploadhandler.TemporaryFileUploadHandler",)
</snippet></ROW><ROW><id>6907188</id><snippet>..MemoryFileUploadHandler</snippet></ROW><ROW><id>6907188</id><snippet>#views.py

def video_upload(request):
    # this removes the first handler (MemoryFile....)
    request.upload_handlers.pop(0)
    return _video_upload(request)

def _video_upload(request):
    ....
</snippet></ROW><ROW><id>6907188</id><snippet>video.temporary_file_path</snippet></ROW><ROW><id>6907429</id><snippet>import pylab
txt_files = glob.iglob("*.txt")
for txt_filename in txt_files:
    data = pylab.loadtxt(txt_filename)

    t, x, y = data[:,0], data[:,1], data[:,2]


    line, = pylab.plot(x, y, label=time.ctime(t[0]))
    line.track_id = filename[:-4]
</snippet></ROW><ROW><id>6907429</id><snippet>matplotlib.widgets</snippet></ROW><ROW><id>6907429</id><snippet>import matplotlib.pyplot as plt
import numpy as np

from matplotlib.widgets import RectangleSelector
from matplotlib.transforms import Bbox

def main():
    # Generate some random data:
    data = []
    for track_id in xrange(100):
        a, b = np.random.random(2)
        x = 100 * a + np.random.random(100).cumsum()
        y = np.cos(x) + b * np.random.random(100).cumsum()
        data.append((track_id, x, y))

    # Plot it, keeping track of the "track_id"
    fig, ax = plt.subplots()
    for track_id, x, y in data:
        line, = ax.plot(x,y)
        line.track_id = track_id

    # Make the selector...
    selector = RectangleSelector(ax, onselect, drawtype='box')
    # We could set up a button or keyboard shortcut to activate this, instead...
    selector.set_active(True)

    plt.show()

def onselect(eclick, erelease):
    """Get the lines in an axis with vertices inside the region selected.
    "eclick" and "erelease" are matplotlib button_click and button_release
    events, respectively."""
    # Make a matplotlib.transforms.Bbox from the selected region so that we
    # can more easily deal with finding if points are inside it, etc...
    left, bottom = min(eclick.x, erelease.x), min(eclick.y, erelease.y)
    right, top = max(eclick.x, erelease.x), max(eclick.y, erelease.y)
    region = Bbox.from_extents(left, bottom, right, top)

    track_ids = []
    ax = eclick.inaxes
    for line in ax.lines:
        bbox = line.get_window_extent(eclick.canvas)
        # Start with a rough overlaps...
        if region.overlaps(bbox):
            # We need the xy data to be in display coords...
            xy = ax.transData.transform(line.get_xydata())

            # Then make sure that at least one vertex is really inside...
            if any(region.contains(x,y) for x,y in xy):
                # Highlight the selected line by making it bold
                line.set_linewidth(3)
                track_ids.append(line.track_id)

    print track_ids
    eclick.canvas.draw()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6907521</id><snippet>enctype="multipart/form-data"
</snippet></ROW><ROW><id>6907521</id><snippet>enctype</snippet></ROW><ROW><id>6907521</id><snippet>db.Blob(str(img))</snippet></ROW><ROW><id>6907521</id><snippet>db.Blob(img.encode('utf-8'))</snippet></ROW><ROW><id>6907521</id><snippet>images =self.request.str_GET['images']</snippet></ROW><ROW><id>6907625</id><snippet>_winreg</snippet></ROW><ROW><id>6907625</id><snippet>input</snippet></ROW><ROW><id>6907625</id><snippet>try:
    import winreg
except:
    import _winreg as winreg
import win32api

def notepad_print(textfile, newset=None):
    if newset is not None: 
        oldset = {}
        hkcu = winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER)
        notepad = winreg.OpenKey(hkcu, r'Software\Microsoft\Notepad', 0, 
                                 winreg.KEY_ALL_ACCESS)
        for key, item in newset.items():
            oldset[key] = winreg.QueryValueEx(notepad, key)
            winreg.SetValueEx(notepad, key, None, item[1], item[0])

    #force printing with notepad, instead of using the 'print' verb
    win32api.ShellExecute(0, 'open', 'notepad.exe', '/p ' + textfile, '.', 0)

    input('once the job is queued, hit &lt;enter&gt; to continue')

    if newset is not None:
        for key, item in oldset.items():
            winreg.SetValueEx(notepad, key, None, item[1], item[0])
</snippet></ROW><ROW><id>6907625</id><snippet>notepad_print('datafile.txt', {'szHeader' : ('', 1), 'szTrailer': ('', 1)})
</snippet></ROW><ROW><id>6907625</id><snippet>newset = {
  #name : (value, type)
  'lfFaceName': ('Courier New', 1), 
  'lfWeight': (700, 4),            #400=normal, 700=bold
  'lfUnderline': (0, 4), 
  'lfItalic': (1, 4),              #0=disabled, 1=enabled
  'lfStrikeOut': (0, 4), 
  'iPointSize': (160, 4),          #160 = 16pt
  'iMarginBottom': (1000, 4),      #1 inch
  'iMarginTop': (1000, 4), 
  'iMarginLeft': (750, 4), 
  'iMarginRight': (750, 4), 
  'szHeader': ('&amp;f', 1),            #header '&amp;f'=filename
  'szTrailer': ('Page &amp;p', 1),      #footer '&amp;p'=page number
}

notepad_print('datafile.txt', newset)
</snippet></ROW><ROW><id>6907748</id><snippet>__enter__</snippet></ROW><ROW><id>6907748</id><snippet>__exit__</snippet></ROW><ROW><id>6907748</id><snippet>with constructor(args) as a:
    # do stuff with a
    pass
# here a is closed even if you had an error above
</snippet></ROW><ROW><id>6907748</id><snippet>constructor</snippet></ROW><ROW><id>6907748</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>6908014</id><snippet>os</snippet></ROW><ROW><id>6908014</id><snippet>from os.path import exists
print exists("C:\somefile.txt")
</snippet></ROW><ROW><id>6908180</id><snippet>python</snippet></ROW><ROW><id>6908194</id><snippet>&gt;&gt;&gt; a = [23, [5, 6, 7]]
&gt;&gt;&gt; a[1][0]
5
</snippet></ROW><ROW><id>6908416</id><snippet>lst = lst[0:1] + sorted(lst[1:])
</snippet></ROW><ROW><id>6908561</id><snippet>exclude</snippet></ROW><ROW><id>6908561</id><snippet>class CategoryForm(ModelForm):
      class Meta:
            model = Category
            exclude = ('slug ')
</snippet></ROW><ROW><id>6909027</id><snippet>list</snippet></ROW><ROW><id>6909027</id><snippet>&gt;&gt;&gt; list(g)
[1, 'hello', 'Janitor']
</snippet></ROW><ROW><id>6909219</id><snippet>[python]
&gt;&gt;&gt; from relativeDates import *
&gt;&gt;&gt; import time
&gt;&gt;&gt; x = time.time()-1000
&gt;&gt;&gt; getRelativeTime(x)
'17 minutes ago'
&gt;&gt;&gt; x-=12345
&gt;&gt;&gt; getRelativeTime(x)
'3 hours ago'
&gt;&gt;&gt; x+=543211
&gt;&gt;&gt; getRelativeTime(x)
'in 6 days'
&gt;&gt;&gt; getRelativeTime(x,accuracy=2)
'in 6 days 3 hours'
&gt;&gt;&gt; x-=987661
&gt;&gt;&gt; getRelativeTime(x,accuracy=2)
'5 days 7 hours ago'
&gt;&gt;&gt; getRelativeTime(x,accuracy=2,alternative_past="long long ago")
'long long ago'
&gt;&gt;&gt; getRelativeTimeStr("07/15/06 1823")
'in 4 days'
&gt;&gt;&gt; getRelativeTimeStr("07/10/06 1823")
'7 hours ago'
&gt;&gt;&gt; getRelativeTimeStr("07/10/06 1823",accuracy=2)
'7 hours 30 mins ago'
[/python]
</snippet></ROW><ROW><id>6909404</id><snippet>import numpy as np
x = np.random.random(1000)
y = np.random.random(1000)
z = np.random.random(1000)
nbins = 10
H, [bx, by, bz]=np.histogramdd((x,y,z),bins=(nbins,nbins,nbins),range=((0,1),(0,1),(0,1)))

ix, iy, iz = np.where(H)

for t in zip(bx[ix], by[iy], bz[iz], H[ix,iy,iz]):
    print t
</snippet></ROW><ROW><id>6909799</id><snippet>&gt;&gt;&gt; l = ['Hi, hello', 'hi mr 12345', 'welcome sir']
&gt;&gt;&gt; d = dict()
&gt;&gt;&gt; for item in l:
...     for word in item.split():
...             d.setdefault(word, list()).append(item)
...
</snippet></ROW><ROW><id>6909799</id><snippet>&gt;&gt;&gt; d.get('hi')
['hi mr 12345']
&gt;&gt;&gt; d.get('come')    # nothing
&gt;&gt;&gt; d.get('welcome')
['welcome sir']
</snippet></ROW><ROW><id>6909799</id><snippet>item.split()</snippet></ROW><ROW><id>6909799</id><snippet>\w</snippet></ROW><ROW><id>6909799</id><snippet>regex</snippet></ROW><ROW><id>6910203</id><snippet>while condition:

   x = something
   y = else
   z = altogether
   ...
   save_state = (x,y,z)   ## this is just a python tuple.
   ...
   # do something else to x, y and z, I assume
   ...
   x, y, z = save_state
</snippet></ROW><ROW><id>6910203</id><snippet>x</snippet></ROW><ROW><id>6910203</id><snippet>y</snippet></ROW><ROW><id>6910203</id><snippet>z</snippet></ROW><ROW><id>6910203</id><snippet>copy</snippet></ROW><ROW><id>6910203</id><snippet>end</snippet></ROW><ROW><id>6910203</id><snippet>x</snippet></ROW><ROW><id>6910203</id><snippet>y</snippet></ROW><ROW><id>6910203</id><snippet>z</snippet></ROW><ROW><id>6910203</id><snippet> x_prev = some_starting_value
 x = some_starting_value
 while condition:
      x = something_funky(x_prev)

      .... other stuff ....

      x_prev = x
</snippet></ROW><ROW><id>6910203</id><snippet>x_prev</snippet></ROW><ROW><id>6910203</id><snippet>x=something_funky(x)</snippet></ROW><ROW><id>6910672</id><snippet>In [1]: import numpy as np

In [2]: arr = np.array([1, 3, 2, 4, 5])

In [3]: arr.argsort()[-3:][::-1]
Out[3]: array([4, 3, 1])
</snippet></ROW><ROW><id>6910672</id><snippet>numpy</snippet></ROW><ROW><id>6910672</id><snippet>n</snippet></ROW><ROW><id>6911217</id><snippet>import numpy as np
arr=np.loadtxt('all_user_token_counts.csv',delimiter=',',
                  dtype = '|U10,&lt;U10,int')
print(arr)

# [(u'@5raphaels', u'in', 15) (u'@5raphaels', u'for', 15)
#  (u'@5raphaels', u'unless', 11) (u'@5raphaels', u'you', 11)]
</snippet></ROW><ROW><id>6911271</id><snippet>class Subscrib(Base):

    __tablename__ = 'mytable'
    __table_args__ = {'autoload' : True}

    thepk = Column(Integer, primary_key=True)
</snippet></ROW><ROW><id>6911443</id><snippet>r"\w"</snippet></ROW><ROW><id>6911443</id><snippet>re.UNICODE</snippet></ROW><ROW><id>6911443</id><snippet>unicodedata.category(c)</snippet></ROW><ROW><id>6911611</id><snippet>In [13]: a==c[:,np.newaxis]
Out[13]: 
array([[False,  True, False],
       [False, False,  True]], dtype=bool)

In [14]: b[a==c[:,np.newaxis]]
Out[14]: array([12, 23])
</snippet></ROW><ROW><id>6911987</id><snippet>lxml</snippet></ROW><ROW><id>6911987</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>6911987</id><snippet>Xpath</snippet></ROW><ROW><id>6911987</id><snippet># you can ignore this part, it's only here for the demo
from StringIO import StringIO
HTML = StringIO("""
&lt;html&gt;
&lt;body&gt;
    &lt;form name="form1" action="/foo"&gt;
        &lt;input name="uselessInput" type="text" /&gt;
    &lt;/form&gt;
    &lt;form name="form2" action="/bar"&gt;
        &lt;input name="firstInput" type="text" /&gt;
        &lt;input name="secondInput" type="text" /&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
""")

# here goes the useful code
import lxml.html
tree = lxml.html.parse(HTML) # you can pass parse() a file-like object or an URL
root = tree.getroot()
for form in root.xpath('//form[@name="form2"]'):
    for field in form.getchildren():
        if 'name' in field.keys():
            print field.get('name')
</snippet></ROW><ROW><id>6912396</id><snippet>result = type, self.message_handlers[type](self, length - 1)
self.last_recv_time = time.time()
return result
</snippet></ROW><ROW><id>6913051</id><snippet>def test(actual, expected):
    """ Compare the actual to the expected value,
        and print a suitable message.
    """
    import sys
    linenum = sys._getframe(1).f_lineno   # get the caller's line number.
    if (expected == actual):
        msg = "Test on line {0} passed.".format(linenum)
    else:
        msg = ("Test on line {0} failed. Expected '{1}', but got '{2}'."
                                     . format(linenum, expected, actual))
    print(msg)
</snippet></ROW><ROW><id>6913101</id><snippet>&gt;&gt;&gt; argList = ["egg1", "egg2"]
&gt;&gt;&gt; egg2(*argList)
egg1
egg2
</snippet></ROW><ROW><id>6913162</id><snippet>getId</snippet></ROW><ROW><id>6913162</id><snippet>getId</snippet></ROW><ROW><id>6913190</id><snippet>q1 = [x + 1800 for x in q]
</snippet></ROW><ROW><id>6913272</id><snippet>x &gt; 5</snippet></ROW><ROW><id>6913272</id><snippet>def gt5(x):
    return x &gt; 5
</snippet></ROW><ROW><id>6913272</id><snippet>gt5 = lambda x: x &gt; 5
</snippet></ROW><ROW><id>6913272</id><snippet>gt5</snippet></ROW><ROW><id>6913272</id><snippet>y = 6
if gt5(y):
    ...
</snippet></ROW><ROW><id>6913272</id><snippet>getattr</snippet></ROW><ROW><id>6913272</id><snippet>operator</snippet></ROW><ROW><id>6913272</id><snippet>func_dict = {
    'lt'   : operator.lt,
    'gt'   : operator.gt,
    'nand' : lambda x, y: not (x and y)
}
</snippet></ROW><ROW><id>6913272</id><snippet>getattr</snippet></ROW><ROW><id>6913272</id><snippet>operator</snippet></ROW><ROW><id>6913272</id><snippet>func_dict = dict((s, getattr(operator, s)) for s in ['lt', 'gt'])
</snippet></ROW><ROW><id>6913272</id><snippet>func_dict</snippet></ROW><ROW><id>6913272</id><snippet>custom_dict = {
    'nand' : lambda x, y: not (x and y)
}

func_dict.update(custom_dict)
</snippet></ROW><ROW><id>6913272</id><snippet>&gt;&gt;&gt; func_dict['lt'](5, 7)
True
</snippet></ROW><ROW><id>6913381</id><snippet>maptools</snippet></ROW><ROW><id>6913381</id><snippet>readShapePoly</snippet></ROW><ROW><id>6913381</id><snippet>sp</snippet></ROW><ROW><id>6913381</id><snippet>overlay</snippet></ROW><ROW><id>6913381</id><snippet>cleanLatLon</snippet></ROW><ROW><id>6913397</id><snippet>-t</snippet></ROW><ROW><id>6913397</id><snippet>ssh</snippet></ROW><ROW><id>6913397</id><snippet>ssh host command</snippet></ROW><ROW><id>6913397</id><snippet>ssh -t -i mysite.pem root@remotehost python /usr/local/myapp/manage.py shell
</snippet></ROW><ROW><id>6913397</id><snippet>ssh host command</snippet></ROW><ROW><id>6913397</id><snippet>command</snippet></ROW><ROW><id>6913397</id><snippet>cd</snippet></ROW><ROW><id>6913397</id><snippet>bash</snippet></ROW><ROW><id>6913397</id><snippet>bash</snippet></ROW><ROW><id>6913420</id><snippet>class ComparableMixin(object):
    def _compare(self, other, method):
        try:
            return method(self._cmpkey(), other._cmpkey())
        except (AttributeError, TypeError):
            # _cmpkey not implemented, or return different type,
            # so I can't compare with "other".
            return NotImplemented

    def __lt__(self, other):
        return self._compare(other, lambda s, o: s &lt; o)

    def __le__(self, other):
        return self._compare(other, lambda s, o: s &lt;= o)

    def __eq__(self, other):
        return self._compare(other, lambda s, o: s == o)

    def __ge__(self, other):
        return self._compare(other, lambda s, o: s &gt;= o)

    def __gt__(self, other):
        return self._compare(other, lambda s, o: s &gt; o)

    def __ne__(self, other):
        return self._compare(other, lambda s, o: s != o)
</snippet></ROW><ROW><id>6913420</id><snippet>&gt;&gt;&gt; from .mixin import ComparableMixin

&gt;&gt;&gt; class Orderable(ComparableMixin):
...
...     def __init__(self, firstname, lastname):
...         self.first = firstname
...         self.last = lastname
...
...     def _cmpkey(self):
...         return (self.last, self.first)
...
...     def __repr__(self):
...         return "%s %s" % (self.first, self.last)
...
&gt;&gt;&gt; sorted([Orderable('Donald', 'Duck'), 
...         Orderable('Paul', 'Anka')])
[Paul Anka, Donald Duck]
</snippet></ROW><ROW><id>6913576</id><snippet>'%.2E' % Decimal('40800000000.00000000000000')

# returns '4.08E+10'
</snippet></ROW><ROW><id>6913576</id><snippet>def format_e(n):
    a = '%E' % n
    return a.split('E')[0].rstrip('0').rstrip('.') + 'E' + a.split('E')[1]

format_e(Decimal('40800000000.00000000000000'))
# '4.08E+10'

format_e(Decimal('40000000000.00000000000000'))
# '4E+10'

format_e(Decimal('40812300000.00000000000000'))
# '4.08123E+10'
</snippet></ROW><ROW><id>6914125</id><snippet>HttpResponse</snippet></ROW><ROW><id>6914125</id><snippet>@login_required
def dbbackup(request):
    if not (request.user.is_authenticated() and request.user.is_staff):
        raise http.Http404
    os.chdir('/usr/local/src/djcode/c2duo_mms')  # This is important as apache by default goes to the user's home directory.
    os.popen3("mysqldump --add-drop-table -u " + settings.DATABASE_USER + " -p" + settings.DATABASE_PASSWORD + " " + settings.DATABASE_NAME + " &gt;  backup.sql")
    os.popen3("gzip -c backup.sql &gt; backup.gz")
    dataf = open('/usr/local/src/djcode/c2duo_mms/backup.gz', 'r')
    return HttpResponse(dataf.read(), mimetype='application/x-gzip')
</snippet></ROW><ROW><id>6914354</id><snippet>socket.makefile()</snippet></ROW><ROW><id>6914427</id><snippet>CREATE TABLE source (sourceid SERIAL, filename VARCHAR NOT NULL);
CREATE TABLE keyword (keywordid SERIAL, keyword VARCHAR NOT NULL);
CREATE TABLE location (locationid SERIAL,
    sourceid INTEGER NOT NULL REFERENCES source(sourceid),
    keyword INTEGER NOT NULL REFERENCES keyword(keywordid),
    data VARCHAR NOT NULL,
    line INTEGER NOT NULL,
    span INTEGER NOT NULL);
</snippet></ROW><ROW><id>6914427</id><snippet>source</snippet></ROW><ROW><id>6914427</id><snippet>location</snippet></ROW><ROW><id>6914427</id><snippet>SELECT * FROM
    location JOIN source ON location.sourceid = source.sourceid
    JOIN keyword ON location.keywordid = keyword.keywordid
WHERE
    source.filename = 'foo.txt' AND
    location.line = 34;
</snippet></ROW><ROW><id>6914791</id><snippet>Player.prototype.e = function(rating_list, RD_list){
    //replace "self" with "this" here:
    var tempSum = 0; //if you don't use the "var", tempSum will be a global
                     // instead of a local
    for(var i=0; i&lt;rating_list.length; i++){ //plain old for loop - no foreach in JS
        var tempE = this._E( ... ); //note that in JS, just like in Python,
                                    //variables like this have function scope and
                                    //can be accessed outside the loop as well
        tempSum += Math.pow( ... ) //the Math namespace is always available
                                   //Javascript doesn't have a native module system
    }
    return (...);
}
</snippet></ROW><ROW><id>6914791</id><snippet>this</snippet></ROW><ROW><id>6914791</id><snippet> obj.e(); //if you do a method-like call, the this will be set to obj
</snippet></ROW><ROW><id>6914791</id><snippet> f = obj.e
 f(); //looks like a normal function call. This doesn't point to obj
</snippet></ROW><ROW><id>6914872</id><snippet>foreground = self.foreground or c4d.COLOR_TRANS
</snippet></ROW><ROW><id>6915269</id><snippet>itertools</snippet></ROW><ROW><id>6915269</id><snippet>from itertools import chain

def isingle(item):
  "iterator that yields only a single value then stops, for chaining"
  yield item

class t:
  def __init__(self, value):
    self.value = value
    self.children = []
  def __iter__(self):
    "implement the iterator protocol"
    return chain(*(map(iter, self.children) + [isingle(self.value)]))

root = t(0)
root.children.append(t(1))
root.children.append(t(2))
root.children[1].children.append(t(3))
list(iter(root))   # -&gt; [1, 3, 2, 0]
list(iter(root.children[1]))  # -&gt; [3, 2]
</snippet></ROW><ROW><id>6915269</id><snippet>O(log[M](N))</snippet></ROW><ROW><id>6915269</id><snippet>M</snippet></ROW><ROW><id>6915269</id><snippet>N</snippet></ROW><ROW><id>6915269</id><snippet>from itertools import chain, imap

class t:
  # copy __init__ from above
  def __iter__(self):
    for v in chain(*imap(iter, self.children)):
      yield v
    yield self.value
</snippet></ROW><ROW><id>6915282</id><snippet>{ ... }</snippet></ROW><ROW><id>6915282</id><snippet>[ ... ]</snippet></ROW><ROW><id>6915282</id><snippet>feedUrl = news[u'responseData'][u'feed'][u'feedUrl']
</snippet></ROW><ROW><id>6915282</id><snippet>import random
some_key = random.choice(news.keys())
something = news[some_key]
</snippet></ROW><ROW><id>6916269</id><snippet>os.fstat</snippet></ROW><ROW><id>6916269</id><snippet>OSError</snippet></ROW><ROW><id>6916269</id><snippet>def write(data, fd=3):
    try:
        os.write(fd, data)
    except OSError:
        sys.stdout.write(data)
</snippet></ROW><ROW><id>6916576</id><snippet>csv.writer</snippet></ROW><ROW><id>6916576</id><snippet>writerow</snippet></ROW><ROW><id>6916576</id><snippet>csvwriter.writerow(row)
</snippet></ROW><ROW><id>6916576</id><snippet>import csv
RESULTS = [
    ['apple','cherry','orange','pineapple','strawberry']
]
resultFile = open("output.csv",'wb')
wr = csv.writer(resultFile, dialect='excel')
wr.writerows(RESULTS)
</snippet></ROW><ROW><id>6916576</id><snippet>import csv
RESULT = ['apple','cherry','orange','pineapple','strawberry']
resultFile = open("output.csv",'wb')
wr = csv.writer(resultFile, dialect='excel')
wr.writerow(RESULT)
</snippet></ROW><ROW><id>6916775</id><snippet>exec()</snippet></ROW><ROW><id>6916775</id><snippet>exec</snippet></ROW><ROW><id>6916775</id><snippet>env = {'somevar': 'somevalue'}
exec(code, env)
</snippet></ROW><ROW><id>6916775</id><snippet>execfile()</snippet></ROW><ROW><id>6916775</id><snippet>eval</snippet></ROW><ROW><id>6916879</id><snippet>calendar_response['events'].append(dict((i.blog.published_at.date(), (i.blog.slug, i.title)) for i in blog_calendar))
</snippet></ROW><ROW><id>6916879</id><snippet>i.blog.published_at.date()</snippet></ROW><ROW><id>6916879</id><snippet>str(i.blog.published_at.date())
</snippet></ROW><ROW><id>6916879</id><snippet>i.blog.published_at.date().isoformat()
</snippet></ROW><ROW><id>6917137</id><snippet>filequeue.get(True)</snippet></ROW><ROW><id>6917137</id><snippet>filequeue.get(False)</snippet></ROW><ROW><id>6917185</id><snippet>import Image
import numpy as np

data = np.random.random((100,100))

#Rescale to 0-255 and convert to uint8
rescaled = (255.0 / data.max() * (data - data.min())).astype(np.uint8)

im = Image.fromarray(rescaled)
im.save('test.png')
</snippet></ROW><ROW><id>6917555</id><snippet>ModelFormMixin</snippet></ROW><ROW><id>6917555</id><snippet>get_object</snippet></ROW><ROW><id>6918068</id><snippet>class StateCodeMidleware(object):

   def process_request(self, request):
        bits = request.META['HTTP_HOST'].split('.')
        if len(bits) == 3 and len(bits[0]) == 2:
            request.state_code = bits[0]
        else:
            request.state_code = None
            # Or a redirect to the default state.
</snippet></ROW><ROW><id>6918068</id><snippet>request.state_code</snippet></ROW><ROW><id>6918068</id><snippet>address=/.dev/127.0.0.1 # in dnsmasq.conf</snippet></ROW><ROW><id>6918068</id><snippet>*.dev</snippet></ROW><ROW><id>6918068</id><snippet>nameserver 127.0.0.1</snippet></ROW><ROW><id>6918068</id><snippet>/etc/resolve.conf</snippet></ROW><ROW><id>6918068</id><snippet>127.0.0.1 ny.localhost, az.localhost  # and so on
</snippet></ROW><ROW><id>6918334</id><snippet>platform.architecture</snippet></ROW><ROW><id>6918334</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('64bit', '')
</snippet></ROW><ROW><id>6918334</id><snippet>is_64bits = sys.maxsize &gt; 2**32
</snippet></ROW><ROW><id>6918334</id><snippet>platform.architecture</snippet></ROW><ROW><id>6918334</id><snippet>&gt;&gt;&gt; p.architecture('/path/to/executable')
('32bit', '')
</snippet></ROW><ROW><id>6918527</id><snippet>from datetime import datetime

dtstr = '2010-12-19 03:44:34.778000'
format = "%Y-%m-%d %H:%M:%S.%f"
a = datetime.strptime(dtstr,format)
print a.microsecond
</snippet></ROW><ROW><id>6918527</id><snippet>time</snippet></ROW><ROW><id>6918527</id><snippet>time</snippet></ROW><ROW><id>6918527</id><snippet>datetime.strptime</snippet></ROW><ROW><id>6918539</id><snippet>difflib</snippet></ROW><ROW><id>6918539</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; s = difflib.SequenceMatcher(None, "GHSKWITNIFSI", "GHSKWAGDITNIFSI")
&gt;&gt;&gt; s.get_matching_blocks()[:-1]
[(0, 0, 5), (5, 8, 7)]
&gt;&gt;&gt; s = difflib.SequenceMatcher(None, "GHSKWITNIFSI", "GHSKWITNIFSI")
&gt;&gt;&gt; s.get_matching_blocks()[:-1]
[(0, 0, 12)]
</snippet></ROW><ROW><id>6919021</id><snippet>primary</snippet></ROW><ROW><id>6919021</id><snippet>...
`Primary` TEXT,
...
</snippet></ROW><ROW><id>6919119</id><snippet>handlers = {'SIGTERM': self.bus.exit,
        'SIGHUP': self.handle_SIGHUP,
        'SIGUSR1': self.bus.graceful,
       }
</snippet></ROW><ROW><id>6919119</id><snippet>SIGINT</snippet></ROW><ROW><id>6919119</id><snippet>Ctrl-C</snippet></ROW><ROW><id>6919119</id><snippet>SIGTERM</snippet></ROW><ROW><id>6919119</id><snippet>sys._exit</snippet></ROW><ROW><id>6919161</id><snippet>request = urllib2.Request(new_url)
</snippet></ROW><ROW><id>6919161</id><snippet>crawl()</snippet></ROW><ROW><id>6919161</id><snippet>new_url</snippet></ROW><ROW><id>6919161</id><snippet>None</snippet></ROW><ROW><id>6919161</id><snippet>new_url</snippet></ROW><ROW><id>6919161</id><snippet>get_more_tweets(new_soup)</snippet></ROW><ROW><id>6919161</id><snippet>get_more_tweets()</snippet></ROW><ROW><id>6919161</id><snippet>None</snippet></ROW><ROW><id>6919161</id><snippet>return d</snippet></ROW><ROW><id>6919161</id><snippet>str(b) == 'more'</snippet></ROW><ROW><id>6919161</id><snippet>soup.findAll()</snippet></ROW><ROW><id>6919161</id><snippet>for link in links</snippet></ROW><ROW><id>6919201</id><snippet>settings.CACHES</snippet></ROW><ROW><id>6919201</id><snippet>CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': [
                ('cache1.example.org:11211', 1),
                ('cache2.example.org:11211', 10),
            ],
}
</snippet></ROW><ROW><id>6919201</id><snippet>memcache.py</snippet></ROW><ROW><id>6919201</id><snippet>memcached.Client._get_server</snippet></ROW><ROW><id>6919201</id><snippet>def _get_server(self, key):
    if isinstance(key, tuple):
        serverhash, key = key
    else:
        serverhash = serverHashFunction(key)

    for i in range(Client._SERVER_RETRIES):
        server = self.buckets[serverhash % len(self.buckets)]
        if server.connect():
            #print "(using server %s)" % server,
            return server, key
        serverhash = serverHashFunction(str(serverhash) + str(i))
    return None, None
</snippet></ROW><ROW><id>6919221</id><snippet>def int2dot( intip ):
    return '.'.join([ str( (intip&gt;&gt;x*8) &amp; 0xFF ) for x in [3,2,1,0]])
def dot2int( dotip ):
    return reduce( lambda r,x: int(x)+(r&lt;&lt;8), dotip.split('.'), 0 )

def merge_ip_list(ip_list):
    if not ip_list:
        return []
    orig = map(dot2int,ip_list)
    orig.sort()
    start = orig[0]
    prev = start-1
    res = []
    for x in orig:
        if x != prev+1:
            res.append((int2dot(start),int2dot(prev)))
            start = x
        prev = x
    res.append((int2dot(start),int2dot(prev)))
    return res
</snippet></ROW><ROW><id>6919221</id><snippet>def merge_ip_list_alt(ip_list):
    if not ip_list:
        return []
    orig = sorted(map(dot2int,ip_list))
    end, start = zip(*[x for x in zip(orig,orig[1:]) if x[0]+1!=x[1]]) or ((),())
    start = [int2dot(orig[0])] + map(int2dot,start)
    end = map(int2dot,end) + [int2dot(orig[-1])]
    return zip( start, end )
</snippet></ROW><ROW><id>6919308</id><snippet>import weakref

def foo():
    print "It Works!"

def func():
    return weakref.ref(foo)

ref = func() # func returns the reference to the foo() function
original_func = ref() # calling the reference returns the referenced object
original_func() # prints "It Works!"
</snippet></ROW></DATA>