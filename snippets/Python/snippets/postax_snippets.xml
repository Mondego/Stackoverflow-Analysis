<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>5787562</id><snippet>onlyonce</snippet></ROW><ROW><id>5787562</id><snippet>called = set()

def onlyonce(fn):
    def decorated(*largs, **kargs):
        if fn not in called:
            called.add(fn)
            print "Calling"
            fn(*largs, **kargs)
        else:
            print "Already called"
    return decorated



@onlyonce
def test_function():
    print "I am getting called now"


test_function()
test_function()
test_function()
test_function()
</snippet></ROW><ROW><id>5787740</id><snippet>supermanutd
supermanu
superman
superm
</snippet></ROW><ROW><id>5787740</id><snippet>&gt;&gt;&gt; regex.findall(string)
[u'supermanutd', u'supermanu', u'superman', u'superm']
</snippet></ROW><ROW><id>5787740</id><snippet>&gt;&gt;&gt; regex.findall(string)
[u'super', u'super', u'super', u'super', u'super']
</snippet></ROW><ROW><id>5787757</id><snippet>import os
import signal
import subprocess

coverage_proc = subprocess.Popen(
          ['coverage','run', your_flag_list]
          stdout=subprocess.PIPE,
          stderr=subprocess.STDOUT)
time.sleep(5) #Find the correct sleep value
urllib.urlopen('http://localhost:8080/test').read()
time.sleep(1)
os.kill(coverage_proc.pid, signal.SIGINT)
</snippet></ROW><ROW><id>5787757</id><snippet>line = proc.stdout.readline()
while '] Running application' not in line:
     line = proc.stdout.readline()
</snippet></ROW><ROW><id>5787887</id><snippet>x=len(next)

for name in next:
    while x&gt;0:
        x=x-1
        next[x] = next[x].replace("jpg", "html")
</snippet></ROW><ROW><id>5787887</id><snippet>x</snippet></ROW><ROW><id>5787887</id><snippet>for</snippet></ROW><ROW><id>5787887</id><snippet>for fname in page:
    while x&gt;0:
        x=x-1
</snippet></ROW><ROW><id>5787887</id><snippet>0:n-1</snippet></ROW><ROW><id>5787887</id><snippet>M</snippet></ROW><ROW><id>5787887</id><snippet>K</snippet></ROW><ROW><id>5787887</id><snippet>K</snippet></ROW><ROW><id>5787887</id><snippet>M + 1</snippet></ROW><ROW><id>5787887</id><snippet>M &lt;= n-1</snippet></ROW><ROW><id>5787887</id><snippet>0</snippet></ROW><ROW><id>5787887</id><snippet>M == n-1</snippet></ROW><ROW><id>5788423</id><snippet>std::vector</snippet></ROW><ROW><id>5788423</id><snippet>std::unordered_map</snippet></ROW><ROW><id>5788556</id><snippet>from operator import add
map(add, list1,list2)
</snippet></ROW><ROW><id>5788946</id><snippet>execfile</snippet></ROW><ROW><id>5788946</id><snippet>subprocess.call</snippet></ROW><ROW><id>5788946</id><snippet>subprocess.call(['./abc.py', arg1, arg2])
</snippet></ROW><ROW><id>5790106</id><snippet>iso(1).org(3).dod(6).internet(1).mgmt(2).mib-2(1).interfaces(2).ifTable(2).ifEntry(1). ...
</snippet></ROW><ROW><id>5790258</id><snippet>grep</snippet></ROW><ROW><id>5790258</id><snippet>&lt;elem&gt;</snippet></ROW><ROW><id>5790258</id><snippet>awk</snippet></ROW><ROW><id>5790258</id><snippet>awk 'BEGIN{
    totalelem=0
    totalendelem=0
}
/&lt;elem&gt;/{
    m = split($0,a,"&lt;elem&gt;") # or m = gsub(/&lt;elem&gt;/,"")
    totalelem+=m-1
}
/&lt;\/elem&gt;/{
    m = split($0,b,"&lt;/elem&gt;") # or m = gsub("&lt;/elem&gt;","")
    totalendelem+=m-1
}
END{
    print "Total elem tags: " totalelem
    print "Total end elem tags: " totalendelem
    # if you want to make sure each elem tag is enclosed  by corresponding end elem tag
    if ( totalelem == totalendelem ){
        print "Equal start and end tags"
    }
}
' file
</snippet></ROW><ROW><id>5790258</id><snippet>&lt;elem /&gt;</snippet></ROW><ROW><id>5790954</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit("[]")
0.040084982867934334
&gt;&gt;&gt; timeit("list()")
0.17704233359267718
&gt;&gt;&gt; timeit("{}")
0.033620194745424214
&gt;&gt;&gt; timeit("dict()")
0.1821558326547077
</snippet></ROW><ROW><id>5790954</id><snippet>&gt;&gt;&gt; timeit("[1,2,3]")
0.24316302770330367
&gt;&gt;&gt; timeit("list((1,2,3))")
0.44744206316727286
&gt;&gt;&gt; timeit("list(foo)", setup="foo=(1,2,3)")
0.446036018543964
&gt;&gt;&gt; timeit("{'a':1, 'b':2, 'c':3}")
0.20868602015059423
&gt;&gt;&gt; timeit("dict(a=1, b=2, c=3)")
0.47635635255323905
&gt;&gt;&gt; timeit("dict(bar)", setup="bar=[('a', 1), ('b', 2), ('c', 3)]")
0.9028228448029267
</snippet></ROW><ROW><id>5791057</id><snippet>if tag == '/event' or tag == '/organization' or tag == '/business':
</snippet></ROW><ROW><id>5791057</id><snippet>if tag in ['/event', '/organization', '/business']:
</snippet></ROW><ROW><id>5791237</id><snippet>django.template.loaders.app_directories.Loader</snippet></ROW><ROW><id>5791255</id><snippet>self</snippet></ROW><ROW><id>5791255</id><snippet>get_data</snippet></ROW><ROW><id>5791255</id><snippet>get_data_factory("blob_a")</snippet></ROW><ROW><id>5791255</id><snippet>self</snippet></ROW><ROW><id>5791255</id><snippet>get_data</snippet></ROW><ROW><id>5791255</id><snippet>def get_data_factory(prop):
    def get_data(self):
        return base64.decodestring(getattr(self,prop))
    return get_data

class DBTable(models.Model):
    ...
    blob_a = property(get_data_factory("blob_a"), set_data)
</snippet></ROW><ROW><id>5791255</id><snippet>encode_data</snippet></ROW><ROW><id>5791255</id><snippet>decode_data</snippet></ROW><ROW><id>5791255</id><snippet>def encode_data(prop):
     def func(self,data):
        setattr(self,prop, base64.encodestring(data))
     return func

def decode_data(prop):
     def func(self):
         return base64.decodestring(getattr(self,prop))
     return func
</snippet></ROW><ROW><id>5791406</id><snippet>if '&lt;' and ('&gt;' in line):
</snippet></ROW><ROW><id>5791406</id><snippet>if True and ('&gt;' in line):
</snippet></ROW><ROW><id>5791406</id><snippet>true</snippet></ROW><ROW><id>5791406</id><snippet>if ('&lt;' in line) and ('&gt;' in line):
</snippet></ROW><ROW><id>5791527</id><snippet>import os
directory = os.path.join("c:\\","path")
for root,dirs,files in os.walk(directory):
    for file in files:
       if file.endswith(".log") or file.endswith(".txt"):
           f=open(file, 'r')
           for line in f:
              if userstring in line:
                 print "file: " + os.path.join(root,file)             
                 break
           f.close()
</snippet></ROW><ROW><id>5791738</id><snippet>data=open("file").readlines()
for n,line in enumerate(data):
    if line.startswith("line"):
       data[n] = "\n"+line.rstrip()
    else:
       data[n]=line.rstrip()
print '|'.join(data)
</snippet></ROW><ROW><id>5791806</id><snippet>from M2Crypto import RSA, X509
data = ssl_sock.getpeercert(1)
# load the certificate into M2Crypto to manipulate it
cert = X509.load_cert_string(data, X509.FORMAT_DER)
pub_key = cert.get_pubkey()
rsa_key = pub_key.get_rsa()
cipher = rsa_key.public_encrypt('plaintext', RSA.pkcs1_padding)
</snippet></ROW><ROW><id>5791988</id><snippet>_derived</snippet></ROW><ROW><id>5791988</id><snippet>class Meta(type):
    def __new__(cls, name, bases, dict_):
        new_class = type.__new__(cls, name, bases, dict_)
        new_class._derived = {}
        if isinstance(bases[0], Meta):
            bases[0]._derived[name] = new_class
        return new_class

class Magic(object):
    __metaclass__ = Meta

class A(Magic):
    pass

class B(Magic):
    pass

print Magic._derived
</snippet></ROW><ROW><id>5791988</id><snippet>{'A': &lt;class '__main__.A'&gt;, 'B': &lt;class '__main__.B'&gt;}
</snippet></ROW><ROW><id>5792335</id><snippet>dbus.Boolean(val)</snippet></ROW><ROW><id>5792335</id><snippet>isinstance(value, dbus.Boolean)</snippet></ROW><ROW><id>5792335</id><snippet>dbus</snippet></ROW><ROW><id>5792335</id><snippet>dbus.*</snippet></ROW><ROW><id>5792335</id><snippet>def perform(self, data):
    for key in ['true-property', 'false-property']:
        val = data['test'][key]
        newval = bool(val)

        print '%s type: %s' % (key, type(val))
        print 'is dbus.Boolean: %s' % isinstance(val, dbus.Boolean)
        print 'Python:', newval
        print '  Dbus:', dbus.Boolean(newval)
    return data
</snippet></ROW><ROW><id>5792335</id><snippet>true-property type: &lt;type 'dbus.Boolean'&gt;
is dbus.Boolean: True
Python: True
  Dbus: 1
false-property type: &lt;type 'dbus.Boolean'&gt;
is dbus.Boolean: True
Python: False
  Dbus: 0
</snippet></ROW><ROW><id>5792407</id><snippet>val=dd</snippet></ROW><ROW><id>5792407</id><snippet>import re
# Regex: VERBOSE, commented version.
reLong = r"""
    # Match "val=dd" where dd has two or more digits (but is not 13).
    \bval\s*=\s*  # "val=" literal with optional ws.
    (?!           # Begin negative lookahead assertion.
      [+\-]?      # Number may have optional sign.
      13          # This is the number we don't match
      \b          # which ends on a word boundary.
    )             # The number is not 13, +13 or -13.
    (             # $1: Two digit number.
      [+\-]?      # Allow optional sign.
      \d+         # One or more digits.
    )             # End $1: containing 2 digit number
    """
# Regex: short, uncommented version.
reShort = r"\bval\s*=\s*(?![+\-]?13\b)([+\-]?\d{2}\b)"

# Compile a regex object we can use over and over.
reObj = re.compile(reLong, re.IGNORECASE | re.VERBOSE)

# Test data strings. Positive and negative. With/without whitespace.
input = [
    # String with positive numbers. No whitespace.
    "val=1 val=13, val=133, val=12, otherval=1",
    # String with positive numbers. With whitespace.
    "val = 1 val = 13, val = 133, val = 12, otherval = 1",
    # String with negative numbers. No whitespace.
    "val=-1 val=-13, val=-133, val=-12, otherval=-1",
    # String with negative numbers. With whitespace.
    "val = -1 val = -13, val = -133, val = -12, otherval = -1",
    ]

# Parse all test data strings and print matches.
for str in input:
    matches = reObj.findall(str)
    if matches:
        print(matches)
</snippet></ROW><ROW><id>5792407</id><snippet>['1', '133', '12']</snippet></ROW><ROW><id>5792407</id><snippet>['1', '133', '12']</snippet></ROW><ROW><id>5792407</id><snippet>['-1', '-133', '-12']</snippet></ROW><ROW><id>5792407</id><snippet>['-1', '-133', '-12']</snippet></ROW><ROW><id>5792407</id><snippet>"BAD"</snippet></ROW><ROW><id>5792407</id><snippet>reobj = re.compile(r"""
    # Match a word that is not: 'BAD'
    \b         # Anchor to start of word.
    (?!BAD\b)  # Verify that this word is not 'BAD'
    \w+        # Ok. Safe to match non-BAD word.
    \b         # Anchor to end of word.
    """, re.VERBOSE)
</snippet></ROW><ROW><id>5792493</id><snippet>from django.utils.datastructures import SortedDict</snippet></ROW><ROW><id>5792493</id><snippet>keyOrder</snippet></ROW><ROW><id>5792493</id><snippet>keyOrder.reverse()</snippet></ROW><ROW><id>5792493</id><snippet>post_list = SortedDict([(obj.id, obj) for obj in posts])
# reversing the post order in-place
post_list.keyOrder.reverse()
</snippet></ROW><ROW><id>5792622</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = 'adsfklaiin2007daf adf adflkajf;j 2008afadfkjkj'
&gt;&gt;&gt; re.sub("[^0-9]"," ",text)
'          2007                   2008         '
</snippet></ROW><ROW><id>5792650</id><snippet>Icon</snippet></ROW><ROW><id>5792650</id><snippet>[Gedit Plugin]
Loader=python
Module=TextWrap
IAge=2
Icon=gtk-ok
[... and so on ...]
</snippet></ROW><ROW><id>5792650</id><snippet>$prefix/share/icons/hicolor/scalable/apps
</snippet></ROW><ROW><id>5792650</id><snippet>$prefix</snippet></ROW><ROW><id>5792650</id><snippet>/usr</snippet></ROW><ROW><id>5792650</id><snippet>$ gtk-update-icon-cache $prefix/share/icons/hicolor
</snippet></ROW><ROW><id>5792650</id><snippet>gedit-plug.svg</snippet></ROW><ROW><id>5792650</id><snippet>gedit-plug</snippet></ROW><ROW><id>5792650</id><snippet>gnome</snippet></ROW><ROW><id>5792650</id><snippet>hicolor</snippet></ROW><ROW><id>5792691</id><snippet>month_dicts = [{} for _ in range(12)] # twelve dicts
numbers = ["%02d" % x for x in range(1,13)] # strings "01" ... "12"

# the dict
MONTHS_DICT = dict(zip(numbers, month_dicts))
# the dict for March
MONTHS_DICT["03"]
</snippet></ROW><ROW><id>5792726</id><snippet>global myGlobal
myGlobal = 0
def CadDraw(self):
    global myGlobal
    myGlobal +=1 [the previous value from the last time CadDraw was called plus 1]
    DoStuff()
</snippet></ROW><ROW><id>5792775</id><snippet>pyplot.bar( numpy.arange(10) * 2, data1, color = 'red' )
pyplot.bar( numpy.arange(10) * 2 + 1, data2, color = 'red' )
</snippet></ROW><ROW><id>5793083</id><snippet>nltk.tag.simplify.simplify_wsj_tag</snippet></ROW><ROW><id>5793083</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; from nltk.tag.simplify import simplify_wsj_tag
&gt;&gt;&gt; tagged_sent = nltk.pos_tag(tokens)
&gt;&gt;&gt; simplified = [(word, simplify_wsj_tag(tag)) for word, tag in tagged_sent]
</snippet></ROW><ROW><id>5793236</id><snippet>&gt;&gt; import my_prog
&gt;&gt; from my_prog import *
*** Run some code and debug ***
&gt;&gt; reload(my_prog); from my_prog import *
*** Run some code and debug ***
&gt;&gt; reload(my_prog); from my_prog import *
</snippet></ROW><ROW><id>5793634</id><snippet>QWebPage</snippet></ROW><ROW><id>5793634</id><snippet>javaScriptConsoleMessage()</snippet></ROW><ROW><id>5793634</id><snippet>import sys
from PyQt4 import QtCore, QtGui, QtWebKit

class WebPage(QtWebKit.QWebPage):
    def javaScriptConsoleMessage(self, msg, line, source):
        print '%s line %d: %s' % (source, line, msg)

url = 'http://localhost/test.html'
app = QtGui.QApplication([])
browser = QtWebKit.QWebView()
page = WebPage()
browser.setPage(page)
browser.load(QtCore.QUrl(url))
browser.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>5793634</id><snippet>% python qweb.py
http://localhost/test.html line 9: SyntaxError: Parse error
</snippet></ROW><ROW><id>5794461</id><snippet>open(..)</snippet></ROW><ROW><id>5794461</id><snippet>f = open(os.path.join(root, file)</snippet></ROW><ROW><id>5794461</id><snippet>#!/usr/bin/env python
import os

userstring = 'test'
path = 'c:\\Python27'

for root, dirname, files in os.walk(path): 
    for file in files:
        if file.endswith(".log") or file.endswith(".txt"):
            filepath = os.path.join(root, file)
            with open(filepath, 'r') as f:
                for line in f:
                    if userstring in line:
                        print "%s in %s" % (userstring, filepath)
                        break
                else:
                    print "%s NOT in %s" % (userstring, filepath)
</snippet></ROW><ROW><id>5794510</id><snippet>Timeout=?</snippet></ROW><ROW><id>5794510</id><snippet>1000000</snippet></ROW><ROW><id>5794510</id><snippet>Retries=?</snippet></ROW><ROW><id>5794510</id><snippet>Timeout=1000000, Retries=0</snippet></ROW><ROW><id>5794510</id><snippet>Retries=1</snippet></ROW><ROW><id>5794608</id><snippet>save</snippet></ROW><ROW><id>5794608</id><snippet>save</snippet></ROW><ROW><id>5794624</id><snippet>friend = dict(line.split(":", 1) for line in open("file"))
</snippet></ROW><ROW><id>5794624</id><snippet>friend = dict(line.split(":", 1) for line in open("file") if line.strip())
</snippet></ROW><ROW><id>5794710</id><snippet>&gt;&gt;&gt; collapse_space = lambda s: str.join(" ", s.split())
&gt;&gt;&gt;
&gt;&gt;&gt; logical_lines = []
&gt;&gt;&gt; for line in open("text"):
...   if line[0].isspace():
...     logical_lines[-1] += line #-- append the continuation to the last logical line
...   else:
...     logical_lines.append(line) #-- start a new logical line
... 
&gt;&gt;&gt; l = map(collapse_space, logical_lines)
&gt;&gt;&gt;
&gt;&gt;&gt; print str.join("\n", l)
text1 5,000 6,000
text2 2,000 3,000
text3 5,000 3,000
text4 1,000 2000
text5 7,000 1,000
text6 2,000 1,000
</snippet></ROW><ROW><id>5794801</id><snippet>In [1]: L = [['abc 1234',2], ['foo 1',2] , ['bar 12312434',2]]

In [2]: [x[0].split(' ')[0] for x in L]
Out[2]: ['abc', 'foo', 'bar']
</snippet></ROW><ROW><id>5795261</id><snippet>compileall.py</snippet></ROW><ROW><id>5795261</id><snippet>/usr/lib/python2.6/compileall.py</snippet></ROW><ROW><id>5795261</id><snippet>os.spawnl</snippet></ROW><ROW><id>5795261</id><snippet>compileall.py</snippet></ROW><ROW><id>5795261</id><snippet>python -O</snippet></ROW><ROW><id>5795261</id><snippet>.pyo</snippet></ROW><ROW><id>5795261</id><snippet>python</snippet></ROW><ROW><id>5795261</id><snippet>.pyc</snippet></ROW><ROW><id>5795261</id><snippet>compileall.py</snippet></ROW><ROW><id>5795261</id><snippet>py_compile</snippet></ROW><ROW><id>5795394</id><snippet>def last_inner_append(x, y):
    try:
        if isinstance(x[-1], list):
            last_inner_append(x[-1], y)
            return x
    except IndexError:
        pass
    x.append(y)
    return x
</snippet></ROW><ROW><id>5795696</id><snippet>QStatusBar::showMessage()</snippet></ROW><ROW><id>5795696</id><snippet>QLabel</snippet></ROW><ROW><id>5795858</id><snippet>settings.py</snippet></ROW><ROW><id>5795860</id><snippet>link</snippet></ROW><ROW><id>5795860</id><snippet>src</snippet></ROW><ROW><id>5795860</id><snippet>new_src = link.replace('foo', 'bar') # or element.get('src').replace('foo', 'bar')
element.set('src', new_src)
</snippet></ROW><ROW><id>5795860</id><snippet>img</snippet></ROW><ROW><id>5795860</id><snippet>.findall()</snippet></ROW><ROW><id>5795860</id><snippet>.iterlinks()</snippet></ROW><ROW><id>5796100</id><snippet>import numpy as np

daily_prices = np.array(
    [
        (4,3,3,1),
        (5,4,3,6),
        (6,3,2,7),
        (3,9,7,4),
        (8,4,6,3),
        (8,3,3,9)],
    dtype=[('MSFT','float'),('CSCO','float'),('GOOG','float'),('F','float') ]
    )
</snippet></ROW><ROW><id>5796100</id><snippet>print(daily_prices['MSFT'])
# [ 4.  5.  6.  3.  8.  8.]
</snippet></ROW><ROW><id>5796100</id><snippet>print(daily_prices[2])
# (6.0, 3.0, 2.0, 7.0)
</snippet></ROW><ROW><id>5796158</id><snippet>I[1]: x = np.array([0.1, 0.2])

I[2]: y = np.array([[1.1,2.2,3.3],[4.4,5.5,6.6]])


I[3]: y*x[:,np.newaxis]
O[3]: 
array([[ 0.11,  0.22,  0.33],
       [ 0.88,  1.1 ,  1.32]])
</snippet></ROW><ROW><id>5796264</id><snippet>hex()</snippet></ROW><ROW><id>5796264</id><snippet>def ChangeHex(n):
    if (n &lt; 0):
        print(0)
    elif (n&lt;=1):
        print n,
    else:
        ChangeHex( n / 16 )
        x =(n%16)
        if (x &lt; 10):
            print(x), 
        if (x == 10):
            print("A"),
        if (x == 11):
            print("B"),
        if (x == 12):
            print("C"),
        if (x == 13):
            print("D"),
        if (x == 14):
            print("E"),
        if (x == 15):
            print ("F"),
</snippet></ROW><ROW><id>5796810</id><snippet>projectpackage/__init__.py</snippet></ROW><ROW><id>5796810</id><snippet>import somemodule as module_shortname
</snippet></ROW><ROW><id>5796810</id><snippet>__init__.py</snippet></ROW><ROW><id>5796810</id><snippet>projectpackage/__init__.py</snippet></ROW><ROW><id>5796810</id><snippet>projectpackage/__init__.py</snippet></ROW><ROW><id>5797265</id><snippet>&gt;&gt;&gt; a = [1, 3, 1, 3, 3, 2, 4, 5]
&gt;&gt;&gt; 
&gt;&gt;&gt; def unit_percents(L1):
...     ret = {}
...     L = L1[:]
...     sorted(L)
...     if L:
...         cur_count = 1
...         for i in range(len(L)-1):
...             cur_count+=1
...             if L[i] != L[i+1]:
...                 ret[L[i]]=float(cur_count)/len(L)
...                 cur_count=1
...         ret[L[-1]]=float(cur_count)/len(L)
...     return ret
... 
&gt;&gt;&gt; unit_percents(a)
{1: 0.25, 2: 0.25, 3: 0.375, 4: 0.25, 5: 0.125}
</snippet></ROW><ROW><id>5797265</id><snippet>&gt;&gt;&gt; dict([(x,float(a.count(x))/len(a)) for x in set(a)])
{1: 0.25, 2: 0.125, 3: 0.375, 4: 0.125, 5: 0.125}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5797288</id><snippet>link</snippet></ROW><ROW><id>5797288</id><snippet>Tag</snippet></ROW><ROW><id>5797288</id><snippet>for anchor in link:
    print anchor['title']
</snippet></ROW><ROW><id>5797311</id><snippet>zlib.compressobj([level])</snippet></ROW><ROW><id>5797311</id><snippet>Compress.compress(string)</snippet></ROW><ROW><id>5797311</id><snippet>Compress.flush([mode])</snippet></ROW><ROW><id>5797311</id><snippet>import zlib
def compress(chunks):
    c = zlib.compressobj()
    for chunk in chunks:
       yield c.compress(chunk)
    yield c.flush(zlib.Z_FINISH)
</snippet></ROW><ROW><id>5797614</id><snippet>Tkinter</snippet></ROW><ROW><id>5797614</id><snippet>Tk</snippet></ROW><ROW><id>5797614</id><snippet>Tcl/Tk</snippet></ROW><ROW><id>5797614</id><snippet>Tk</snippet></ROW><ROW><id>5797614</id><snippet>option U</snippet></ROW><ROW><id>5797614</id><snippet>&lt;vowel&gt;</snippet></ROW><ROW><id>5797614</id><snippet>ä</snippet></ROW><ROW><id>5797614</id><snippet>'</snippet></ROW><ROW><id>5797614</id><snippet>option u</snippet></ROW><ROW><id>5797614</id><snippet>/usr/bin/idle2.6</snippet></ROW><ROW><id>5797614</id><snippet>'</snippet></ROW><ROW><id>5797614</id><snippet>option U</snippet></ROW><ROW><id>5797614</id><snippet>US</snippet></ROW><ROW><id>5797614</id><snippet>US Extended</snippet></ROW><ROW><id>5797633</id><snippet>import subprocess
proc = subprocess.Popen("/usr/bin/somejavaprogram -flag1 arg1".split())
stdout, stderr = proc.communicate()
if (proc.returncode = 0 and
    "data successfully processed" in stdout):
    print "Handle success here!"
else:
    print "Job failed with return code %s"%(proc.returncode)
    print stderr
</snippet></ROW><ROW><id>5797704</id><snippet>re.sub()</snippet></ROW><ROW><id>5797704</id><snippet>import re

myRegex = re.compile(r"\*\*(.+?)\*\*")
string = "some **text** and some **more**"

output = myRegex.sub(r"\1", string)
</snippet></ROW><ROW><id>5797889</id><snippet>import urllib

url = '--insert-url--' 

filename = 'download.exe'  
urllib.urlretrieve(url, filename)
</snippet></ROW><ROW><id>5797962</id><snippet>deb.check()</snippet></ROW><ROW><id>5797962</id><snippet>dep.required_changes</snippet></ROW><ROW><id>5797962</id><snippet>apt.cache.Cache</snippet></ROW><ROW><id>5797962</id><snippet>import sys
from apt.cache import Cache
from apt.debfile import DebPackage

cache = Cache()
deb = DebPackage(sys.argv[1], cache)
deb.check()
print(deb.missing_deps)
print(deb.required_changes)
</snippet></ROW><ROW><id>5797962</id><snippet>% python apt_info.py ./libzeroc-ice33_3.3.1-12_amd64.deb
['libiceutil33']
(['libiceutil33'], [], [])
</snippet></ROW><ROW><id>5798144</id><snippet>&gt;&gt;&gt; foo[3::-1]
'3210'
</snippet></ROW><ROW><id>5798697</id><snippet>y = np.cumsum(x)
</snippet></ROW><ROW><id>5798788</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Other(models.Model):
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>5798788</id><snippet>&gt;&gt;&gt; from myapp.models import object_a, object_b, Other
&gt;&gt;&gt; a = object_a()
&gt;&gt;&gt; a.foo = 'test'
&gt;&gt;&gt; a.bar = 'value'
&gt;&gt;&gt; a.save()
&gt;&gt;&gt; b = object_b()
&gt;&gt;&gt; b.foop = 'random'
&gt;&gt;&gt; b.barp = 'values'
&gt;&gt;&gt; b.save()
</snippet></ROW><ROW><id>5798788</id><snippet>Other</snippet></ROW><ROW><id>5798788</id><snippet>&gt;&gt;&gt; o1 = Other()
&gt;&gt;&gt; o1.content_object = a
&gt;&gt;&gt; o1.save()
&gt;&gt;&gt; o2 = Other()
&gt;&gt;&gt; o2.content_object = b
&gt;&gt;&gt; o2.save()
</snippet></ROW><ROW><id>5798788</id><snippet>Other</snippet></ROW><ROW><id>5798788</id><snippet>&gt;&gt;&gt; all = Other.objects.all()
&gt;&gt;&gt; all[0].content_object
&lt;object_a: object_a object&gt;
&gt;&gt;&gt; all[0].content_object.foo
u'test'
&gt;&gt;&gt; all[1].content_object
&lt;object_b: object_b object&gt;
&gt;&gt;&gt; all[1].content_object.foop
u'random'
</snippet></ROW><ROW><id>5798788</id><snippet>Other</snippet></ROW><ROW><id>5798788</id><snippet>&gt;&gt;&gt; all[0].content_type
&lt;ContentType: object_a&gt;
&gt;&gt;&gt; all[0].object_id
1
</snippet></ROW><ROW><id>5798788</id><snippet>syncdb</snippet></ROW><ROW><id>5798788</id><snippet>ContentType</snippet></ROW><ROW><id>5798788</id><snippet>generic.GenericForeignKey</snippet></ROW><ROW><id>5798875</id><snippet>&gt;&gt;&gt; ast.literal_eval('{"key1":"value1", "key2":"value2", "key3":"value3"}')
{'key3': 'value3', 'key2': 'value2', 'key1': 'value1'}
</snippet></ROW><ROW><id>5799005</id><snippet>get_chlids=ChildObject.all().ancestor(parent1)
</snippet></ROW><ROW><id>5799097</id><snippet>''.join(c.lower() for c in s if not c.isspace())
</snippet></ROW><ROW><id>5799193</id><snippet>datetime</snippet></ROW><ROW><id>5799193</id><snippet>datetime</snippet></ROW><ROW><id>5799193</id><snippet>isoformat</snippet></ROW><ROW><id>5799193</id><snippet>2011-04-27
2011-04-27 02:48Z
2011-04-27T02:48Z
2011-W17-3
2011-117
</snippet></ROW><ROW><id>5799193</id><snippet>isoformat()</snippet></ROW><ROW><id>5799193</id><snippet>fromtimestamp</snippet></ROW><ROW><id>5799193</id><snippet>fromtimestamp</snippet></ROW><ROW><id>5799281</id><snippet>def __init__(self, *args, **kwargs):
    super(SecondForm, self).__init__(*args, **kwargs)
    self.fields['first'].query = db.Query(First).fetch(10)
</snippet></ROW><ROW><id>5799339</id><snippet>calendar</snippet></ROW><ROW><id>5799339</id><snippet>import calendar
import datetime

def total_number_of_days(number_of_months=3):
    c = calendar.Calendar()
    d = datetime.datetime.now()
    total = 0
    for offset in range(0, number_of_months):
        current_month = d.month - offset
        while current_month &lt;= 0:
            current_month = 12 + current_month
        days_in_month = len( filter(lambda x: x != 0, c.itermonthdays(d.year, current_month)))
        total = total + days_in_month
    return total
</snippet></ROW><ROW><id>5799339</id><snippet>total_number_of_days()</snippet></ROW><ROW><id>5799354</id><snippet>regex = re.compile( "(%s|%s|%s)" % ( re.escape( userstring ), re.escape( userStrHEX ), re.escape( userStrASCII ) )
</snippet></ROW><ROW><id>5799462</id><snippet>__init__.py'</snippet></ROW><ROW><id>5799462</id><snippet>your_module.py</snippet></ROW><ROW><id>5799462</id><snippet>your_module/__init__.py</snippet></ROW><ROW><id>5799462</id><snippet>utils.py</snippet></ROW><ROW><id>5799462</id><snippet>models.py</snippet></ROW><ROW><id>5799462</id><snippet>settings.py</snippet></ROW><ROW><id>5799462</id><snippet>config.py</snippet></ROW><ROW><id>5799462</id><snippet>__init__.py</snippet></ROW><ROW><id>5799989</id><snippet>tesseract</snippet></ROW><ROW><id>5799989</id><snippet>import os
import tempfile
import subprocess

def ocr(path):
    temp = tempfile.NamedTemporaryFile(delete=False)

    process = subprocess.Popen(['tesseract', path, temp.name], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    process.communicate()

    with open(temp.name + '.txt', 'r') as handle:
        contents = handle.read()

    os.remove(temp.name + '.txt')
    os.remove(temp.name)

    return contents
</snippet></ROW><ROW><id>5800118</id><snippet>user</snippet></ROW><ROW><id>5800118</id><snippet>client</snippet></ROW><ROW><id>5800118</id><snippet>user[client].username</snippet></ROW><ROW><id>5800165</id><snippet> myobjects = Model.objects.filter(key1=value1)
 myobjects = myobjects.exclude(key2=value2)
 myobjects = myobjects.order_by('key3')
 myobjects = myobjects.select_related(depth=1)
</snippet></ROW><ROW><id>5801263</id><snippet>import datetime, pytz
now = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))

print now.strftime('%Y-%m-%d %H:%M:%S %z')

# prints: '2011-04-27 13:56:09 +0530'
</snippet></ROW><ROW><id>5801605</id><snippet>a = "123ab5"

b = ''.join(map(lambda x: str(int(x) + 1) if x.isdigit() else x, a))
</snippet></ROW><ROW><id>5801605</id><snippet>b = ''.join(str(int(x) + 1) if x.isdigit() else x for x in a)
</snippet></ROW><ROW><id>5801605</id><snippet>import string
b = a.translate(string.maketrans('0123456789', '1234567890'))
</snippet></ROW><ROW><id>5801605</id><snippet># b == "234ab6"
</snippet></ROW><ROW><id>5801605</id><snippet>9</snippet></ROW><ROW><id>5801605</id><snippet>10</snippet></ROW><ROW><id>5801605</id><snippet>0</snippet></ROW><ROW><id>5801605</id><snippet>str(int(x) + 1)</snippet></ROW><ROW><id>5801605</id><snippet>str((int(x) + 1) % 10)</snippet></ROW><ROW><id>5801806</id><snippet>from multiprocessing import Pool

def func(*args):
    obj = Something(*args)
    obj.run()
    return obj.results()

pool = Pool()
results = pool.map(func, ((1,2,3), (4,5,6)))
</snippet></ROW><ROW><id>5802065</id><snippet>class T(tuple):
    def __add__(self, other):
        return T(x + y for x, y in zip(self, other))
    def __rmul__(self, other):
        return T(other * x for x in self)
a = T((1, 2))
b = T((3, 4))
c = a + b # c would be (4, 6)
d = 3 * b # d would be (9, 12)
</snippet></ROW><ROW><id>5802300</id><snippet>import re

text = "This is an example.A particular case.Made up of more "\
       "than once sentence?Yes, it is.But no blank !!!That's"\
       " a problem ????Yes.I think so! :)"


for x in re.split("(?&lt;=[\.\?!]) ", text):
    print repr(x)

print '\n'

for x in re.findall("[^.?!]*[.?!]|[^.?!]+(?=\Z)",text):
    print repr(x)
</snippet></ROW><ROW><id>5802300</id><snippet>"This is an example.A particular case.Made up of more than once sentence?Yes, it is.But no blank !!!That'sa problem ????Yes.I think so!"
':)'


'This is an example.'
'A particular case.'
'Made up of more than once sentence?'
'Yes, it is.'
'But no blank !'
'!'
'!'
"That's a problem ?"
'?'
'?'
'?'
'Yes.'
'I think so!'
' :)'
</snippet></ROW><ROW><id>5802300</id><snippet>import re

text = "! This is an example.A particular case.Made up of more "\
       "than once sentence?Yes, it is.But no blank !!!That's"\
       " a problem ????Yes.I think so! :)"

res = re.split('([.?!])',text)

print [ ''.join(res[i:i+2]) for i in xrange(0,len(res),2) ]
</snippet></ROW><ROW><id>5802300</id><snippet>['!', ' This is an example.', 'A particular case.', 'Made up of more than once sentence?', 'Yes, it is.', 'But no blank !', '!', '!', "That's a problem ?", '?', '?', '?', 'Yes.', 'I think so!', ' :)']
</snippet></ROW><ROW><id>5802380</id><snippet>index</snippet></ROW><ROW><id>5802380</id><snippet>numpy.indices()</snippet></ROW><ROW><id>5802380</id><snippet>x, z, t = numpy.indices(index.shape)
data[x, index, z, t]
</snippet></ROW><ROW><id>5802434</id><snippet>p = subprocess.Popen(["./pmm"], shell=False, stdout=subprocess.PIPE)
output = p.stdout.read()
</snippet></ROW><ROW><id>5802665</id><snippet>key = Word(alphanums + "/-_.?=%&amp;")
QUOT = Suppress('"')
uri = ("-" | QUOT +
             http_method +
             key("request_uri") +
             http_protocol +
             QUOT
      )
</snippet></ROW><ROW><id>5802665</id><snippet>Word(alphas+'_', alphanums+'_')</snippet></ROW><ROW><id>5802665</id><snippet>"/" + "-" + "_" + ...</snippet></ROW><ROW><id>5802665</id><snippet>Word(alphas) | Word(nums)</snippet></ROW><ROW><id>5802665</id><snippet>Word(nums)</snippet></ROW><ROW><id>5802665</id><snippet>Word(alphas) | Word(nums) | Word(alphanums)
</snippet></ROW><ROW><id>5802665</id><snippet>Word(alphas)</snippet></ROW><ROW><id>5802665</id><snippet>Word(alphanums) | Word(alphas) | Word(nums)
</snippet></ROW><ROW><id>5802665</id><snippet>Word(alphas) ^ Word(nums) ^ Word(alphanums)
</snippet></ROW><ROW><id>5802665</id><snippet>expr.setResultsName("name")</snippet></ROW><ROW><id>5802665</id><snippet>expr("name")</snippet></ROW><ROW><id>5802665</id><snippet>[0]</snippet></ROW><ROW><id>5802748</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>5802748</id><snippet>delete</snippet></ROW><ROW><id>5802748</id><snippet>True</snippet></ROW><ROW><id>5802748</id><snippet>tmp_me</snippet></ROW><ROW><id>5802748</id><snippet>tempfile.NamedTemporaryFile(delete=False)
</snippet></ROW><ROW><id>5802921</id><snippet>import sqlite3

location = 'data'
table_name = 'table_name'

conn = sqlite3.connect(location)
c = conn.cursor()

sql = 'create table if not exists ' + table_name + ' (id integer)'
c.execute(sql)

sql = 'drop table ' + table_name
c.execute(sql)

sql = 'create table if not exists ' + table_name + ' (id integer)'
c.execute(sql)

sql = 'insert into ' + table_name + ' (id) values (%d)' % (1)
c.execute(sql)
conn.commit()
</snippet></ROW><ROW><id>5802921</id><snippet>c.close()
conn.close()
conn = sqlite3.connect(location)
c = conn.cursor()
</snippet></ROW><ROW><id>5803941</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    ...
    list_display = ('name', 'email', 'sender', 'send_email_html')

    def send_email_html(self, obj):
        # example using a javascript function send_email()
        return '&lt;a href="send_email(%s)"&gt;Send Now&lt;/a&gt;' % obj.id
    send_email_html.short_description = 'Send Email'
    send_email_html.allow_tags = True
</snippet></ROW><ROW><id>5803941</id><snippet>def send_email_action(modeladmin, request, queryset):
    whatever_you_want_to_do_with_request_and_queryset
send_email.short_description = 'Send email'

class MyModelAdmin(admin.ModelAdmin):
    ...
    actions = [
        send_email_action
    ]
</snippet></ROW><ROW><id>5803950</id><snippet>f = obj.method
f(args)
# is equivalent to
obj.method(args)
</snippet></ROW><ROW><id>5803950</id><snippet>fullpath</snippet></ROW><ROW><id>5803950</id><snippet>def uses_file(prefix_default):
    def decorator(f):
        @functools.wraps(f)
        def decorated(self, data, prefix=prefix_default):
            fullpath = obj.myDump + prefix + obj.baseFilename
            with open(fullpath, 'w') as h:
                f(h, data, prefix)
            print "saved", % fullpath
            return fullpath
        return decorated
    return decorator
</snippet></ROW><ROW><id>5803950</id><snippet>@uses_file(default_prefix="RESPONE_")
def writeFile(self, someHtml, prefix):
   '''...'''
   h.write(someHtml)

@uses_file(default_prefix="mechList_")
def writeList(self, someList, prefix):
    '''...'''
    h.writelines(someList)
</snippet></ROW><ROW><id>5804005</id><snippet>Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class Foo(object):
...     name = "blah"
...     def __init__(self):
...         self.second_name = "blah2"
...
&gt;&gt;&gt; dir(Foo)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribut
e__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_
_weakref__', 'name']
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f
&gt;&gt;&gt; dir(f)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribut
e__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_
_weakref__', 'name', 'second_name']
</snippet></ROW><ROW><id>5804014</id><snippet>(time.localtime()[3] - time.localtime()[8]) - time.gmtime()[3]</snippet></ROW><ROW><id>5804014</id><snippet>-6</snippet></ROW><ROW><id>5804014</id><snippet>(time.localtime()[3]) - time.gmtime()[3]</snippet></ROW><ROW><id>5804014</id><snippet>-5</snippet></ROW><ROW><id>5804014</id><snippet>pytz</snippet></ROW><ROW><id>5804014</id><snippet>&gt;&gt;&gt; from datetime import datetime as dt
&gt;&gt;&gt; from datetime import timedelta as td
&gt;&gt;&gt; # using os.popen() to simulate the results of a HPUX shell 'date'...
&gt;&gt;&gt; # substitute the real HPUX shell date string in hpux_date
&gt;&gt;&gt; hpux_date = os.popen('date').read().strip()
&gt;&gt;&gt; hpux_dt = dt.strptime(hpux_date, '%a %b %d %H:%M:%S %Z %Y')
&gt;&gt;&gt; # Rounding to the nearest hour because there *will* be slight delay
&gt;&gt;&gt; # between shell string capture and python processing
&gt;&gt;&gt; offset_seconds = ((dt.utcnow() - hpux_dt).seconds//3600)*3600
&gt;&gt;&gt; hpux_gmt = hpux_dt + td(0,offset_seconds)
&gt;&gt;&gt; # Sanity checking to ensure we are correct...
&gt;&gt;&gt; hpux_gmt
datetime.datetime(2011, 4, 27, 17, 21, 58)
&gt;&gt;&gt; hpux_dt
datetime.datetime(2011, 4, 27, 12, 21, 58)
&gt;&gt;&gt; hpux_date
'Wed Apr 27 12:21:58 CDT 2011'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5804808</id><snippet>os.utime(filename, timetuple)</snippet></ROW><ROW><id>5804808</id><snippet>touch</snippet></ROW><ROW><id>5805417</id><snippet>File "search.py", line 7
    for root,dirname, files in os.walk(directory):
      ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>5805417</id><snippet>regex = re.compile( "(%s|%s|%s)" % ( re.escape( userstring ), re.escape( userStrHEX ), re.escape( userStrASCII ) )
</snippet></ROW><ROW><id>5805417</id><snippet>regex = re.compile( "(%s|%s|%s)" % ( re.escape( userstring ), re.escape( userStrHEX ), re.escape( userStrASCII ) ) )
</snippet></ROW><ROW><id>5805696</id><snippet>array</snippet></ROW><ROW><id>5805696</id><snippet>import array
import os

fn = 'data.bin'
a = array.array('h')
a.fromfile(open(fn, 'rb'), os.path.getsize(fn)/a.itemsize)
</snippet></ROW><ROW><id>5805696</id><snippet>struct.unpack</snippet></ROW><ROW><id>5805910</id><snippet>&gt;&gt;&gt; array = ['the', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']
&gt;&gt;&gt; array[1:1] = ['quick', 'brown']
&gt;&gt;&gt; array
['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']
</snippet></ROW><ROW><id>5805935</id><snippet>result = regex.search(line)
print result.group()
</snippet></ROW><ROW><id>5806246</id><snippet>ARCHFLAGS="-arch i386 -arch x86_64" easy_install coverage
</snippet></ROW><ROW><id>5806656</id><snippet>AutoDateFormatter</snippet></ROW><ROW><id>5806656</id><snippet>import numpy as np
import matplotlib as mpl
import matplotlib.colorbar as cb
import matplotlib.pyplot as plt
from datetime import datetime
from matplotlib import dates

y = np.reshape(np.random.rand(100), (10, 10))
f1 = plt.figure()
ax1 = f1.add_axes([0.15, 0.15, 0.76, 0.80])
mindate = mpl.dates.date2num(datetime(2010, 1, 10))
maxdate = mpl.dates.date2num(datetime(2010, 1, 20))
im1 = ax1.imshow(
    y, cmap='binary', aspect='auto',
    origin='upper', interpolation='nearest',
    extent=(0, 1, mindate, maxdate))

ax1.yaxis_date()

ax1.invert_yaxis()
hfmt = dates.DateFormatter('%b %d %Y')
ax1.yaxis.set_major_locator(dates.DayLocator(interval=1))
ax1.yaxis.set_major_formatter(hfmt)

plt.show()
</snippet></ROW><ROW><id>5807175</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x, y = np.random.rand(2, 100) * 4
hist, xedges, yedges = np.histogram2d(x, y, bins=4)

elements = (len(xedges) - 1) * (len(yedges) - 1)
xpos, ypos = np.meshgrid(xedges[:-1]+0.25, yedges[:-1]+0.25)

xpos = xpos.flatten()
ypos = ypos.flatten()
zpos = np.zeros(elements)
dx = 0.5 * np.ones_like(zpos)
dy = dx.copy()
dz = hist.flatten()

ax.bar3d(xpos[:8], ypos[:8], zpos[:8], dx, dy, dz, color='b', zsort='average')
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="b")
ax.bar3d(xpos[8:], ypos[8:], zpos[8:], dx, dy, dz, color='r', zsort='average')
red_proxy = plt.Rectangle((0, 0), 1, 1, fc="r")
ax.legend([blue_proxy,red_proxy],['cars','bikes'])

plt.show()
</snippet></ROW><ROW><id>5807190</id><snippet>&lt;a href="http://docs.python.org/library/re.html#re.compile" rel="nofollow"&gt;re.compile()&lt;/a&gt;</snippet></ROW><ROW><id>5807190</id><snippet>x = re.compile("(%s|%s|%s)" % (re.escape(userstring), re.escape(userStrHEX), re.escape(userStrASCII)), re.IGNORECASE)
</snippet></ROW><ROW><id>5807190</id><snippet>args = (re.escape(userstring), re.escape(userStrHEX), re.escape(userStrASCII))
x = re.compile("(%s|%s|%s)" % args, re.IGNORECASE)
</snippet></ROW><ROW><id>5807213</id><snippet>from googlemaps import GoogleMaps
gmaps = GoogleMaps(API_KEY)
lat, lng = gmaps.address_to_latlng(address)
</snippet></ROW><ROW><id>5807227</id><snippet>n</snippet></ROW><ROW><id>5807227</id><snippet>def n_max(arr, n):
    indices = arr.ravel().argsort()[-n:]
    indices = (numpy.unravel_index(i, arr.shape) for i in indices)
    return [(arr[i], i) for i in indices]
</snippet></ROW><ROW><id>5807248</id><snippet>import codecs

f = codecs.open(filename, 'r', 'cp1251')
u = f.read()   # now the contents have been transformed to a Unicode string
out = codecs.open(output, 'w', 'utf-8')
out.write(u)   # and now the contents have been output as UTF-8
</snippet></ROW><ROW><id>5807260</id><snippet>from scipy.integrate import quad
from math import sqrt
from math import pi

def x_max(y,r):
    return sqrt(r**2-y**2)

def x_min(y,r):
    return max(-sqrt(r**2 - y**2), -sqrt(R**2 - y**2) + b) 

def y_max(r):
    if (R&lt;b and b-R&lt;r) or (R&gt;b and b-R&gt;r):
        return sqrt( R**2 - (R**2-r**2+b**2)**2/(4.*b**2) )
    elif r+R&lt;b:
        return 0.
    else: #r+b&lt;R
        return r

def z_max():
    if R&gt;b:
        return R
    else:
        return sqrt(2.*b*R - b**2) 

def delta_x(y, r):
    return  x_max(y,r) - x_min(y,r)

def int_xy(z):
    r = sqrt(R**2 - z**2)
    return quad(delta_x, 0., y_max(r), args=(r))

def int_xyz():
    return quad(lambda z: int_xy(z)[0], 0., z_max())

R=1.
Rprim=1.
b=0.5
print 4*int_xyz()[0]
</snippet></ROW><ROW><id>5807291</id><snippet>&lt;xsl:template match="text()"/&gt;

&lt;xsl:template match="*[count(ancestor::*) &gt; 2]"/&gt;
</snippet></ROW><ROW><id>5807502</id><snippet>import codecs
with codecs.open(filename,'rb','cp1251') as f:
    content = f.read()
    tree = etree.parse(content)
</snippet></ROW><ROW><id>5807687</id><snippet>myCombinedList = []
[myCombinedList.extend(inner) for inner in mylistOfLists]
</snippet></ROW><ROW><id>5807687</id><snippet>import itertools
myCombinedIterable = itertools.chain.from_iterable(mylistOfLists)
myCombinedList = list(myCombinedIterable)
</snippet></ROW><ROW><id>5807934</id><snippet>file_p = open(file_path, "ab")
</snippet></ROW><ROW><id>5808014</id><snippet>import decimal
import random

def format_number(num):
    try:
        dec = decimal.Decimal(num)
    except:
        return 'bad'
    tup = dec.as_tuple()
    delta = len(tup.digits) + tup.exponent
    digits = ''.join(str(d) for d in tup.digits)
    if delta &lt;= 0:
        zeros = abs(tup.exponent) - len(tup.digits)
        val = '0.' + ('0'*zeros) + digits
    else:
        val = digits[:delta] + ('0'*tup.exponent) + '.' + digits[delta:]
    val = val.rstrip('0')
    if val[-1] == '.':
        val = val[:-1]
    if tup.sign:
        return '-' + val
    return val

# test data
NUMS = '''
    0.0000      0
    0           0
    123.45000   123.45
    0000        0
    123.4506780 123.450678
    0.1         0.1
    0.001       0.001
    0.005000    0.005
    .1234       0.1234
    1.23e1      12.3
    -123.456    -123.456
    4.98e10     49800000000
    4.9815135   4.9815135
    4e30        4000000000000000000000000000000
    -0.0000000000004 -0.0000000000004
    -.4e-12     -0.0000000000004
    -0.11112    -0.11112
    1.3.4.5     bad
    -1.2.3      bad
'''

for num, exp in [s.split() for s in NUMS.split('\n') if s]:
    res = format_number(num)
    print res
    assert exp == res
</snippet></ROW><ROW><id>5808014</id><snippet>0
0
123.45
0
123.450678
0.1
0.001
0.005
0.1234
12.3
-123.456
49800000000
4.9815135
4000000000000000000000000000000
-0.0000000000004
-0.0000000000004
-0.11112
bad
bad
</snippet></ROW><ROW><id>5808133</id><snippet>commits</snippet></ROW><ROW><id>5808405</id><snippet>@memoized
def get_dict():
    return pickle.load(file)

foo = get_dict()['foo']
</snippet></ROW><ROW><id>5808405</id><snippet>import cPickle as pickle
</snippet></ROW><ROW><id>5808442</id><snippet>import unittest

# bad implementation of Finder, class-level attribute
class Finder(object):
    search_parts = []

    def add(self, letter):
        self.search_parts.append(letter)


# using 'Zne' here makes sure this test is run second        
class TestZne(unittest.TestCase):
    def setUp(self):
        print 'I am run next'
        self.finder = Finder()

    def test_default_search_parts(self):
        self.assertEqual(self.finder.search_parts, [])


class TestTwo(unittest.TestCase):
    def setUp(self):
        print 'I am run first'
        self.finder = Finder()

    def test_add_letter(self):
        self.finder.add('a')
        self.assertNotEqual(self.finder.search_parts, [])

unittest.main()
</snippet></ROW><ROW><id>5808442</id><snippet>Traceback (most recent call last):
  File "test.py", line 18, in test_default_search_parts
    self.assertEqual(self.finder.search_parts, [])
AssertionError: Lists differ: ['a'] != []
</snippet></ROW><ROW><id>5808442</id><snippet>class Finder(object):
    def __init__(self):
        self.search_parts = []
</snippet></ROW><ROW><id>5808537</id><snippet>x</snippet></ROW><ROW><id>5808537</id><snippet>if (condition1 or
    condition2 or
    condition3):
    do something
</snippet></ROW><ROW><id>5808965</id><snippet>(r'^restaurants/(\d+)/$', 'food.views.restaurant_details'),
</snippet></ROW><ROW><id>5808965</id><snippet>restaurant_id</snippet></ROW><ROW><id>5808965</id><snippet>restaurant_id</snippet></ROW><ROW><id>5808965</id><snippet>restaurant_id</snippet></ROW><ROW><id>5808965</id><snippet>(r'^restaurants/(?P&lt;restaurant_id&gt;\d+)/$', 'food.views.restaurant_details'),
</snippet></ROW><ROW><id>5808965</id><snippet>get_absolute_url</snippet></ROW><ROW><id>5808965</id><snippet>return ('food.views.restaurant_details', (str(self.id),), {})
</snippet></ROW><ROW><id>5809035</id><snippet>dict</snippet></ROW><ROW><id>5809035</id><snippet>get()</snippet></ROW><ROW><id>5809035</id><snippet>class ClosestDict(dict):
    def get(self, key):
        key = min(self.iterkeys(), key=lambda x: abs(x - key))
        return dict.get(self, key)

d = ClosestDict({10: 3, 100: 2, 1000: 1})
print (d.get(20), d.get(60), d.get(200))
</snippet></ROW><ROW><id>5809035</id><snippet>(3, 2, 2)
</snippet></ROW><ROW><id>5809035</id><snippet>get()</snippet></ROW><ROW><id>5809080</id><snippet>[x
 for
 x
 in
 (1,2,3)
]
</snippet></ROW><ROW><id>5809080</id><snippet> [something_that_is_pretty_long
  for something_that_is_pretty_long
  in somethings_that_are_pretty_long]
</snippet></ROW><ROW><id>5809080</id><snippet>\</snippet></ROW><ROW><id>5809080</id><snippet>x = very_long_term                     \
  + even_longer_term_than_the_previous \
  + a_third_term
</snippet></ROW><ROW><id>5809080</id><snippet>x = (very_long_term
     + even_longer_term_than_the_previous
     + a_third_term)
</snippet></ROW><ROW><id>5809435</id><snippet>AJAX_LOOKUP_CHANNELS = {
    'to' : dict(model='auth.User', search_field='username'),
}
</snippet></ROW><ROW><id>5809631</id><snippet>import re
f=open('test.file.here', 'r')

pattern = re.compile("^[^\s]*ello[^\s]*\sWorld[^\s]*$")

for line in f:
  if pattern.match(line):
    print line,

f.close()
</snippet></ROW><ROW><id>5809687</id><snippet>./manage.py celeryd -E
./manage.py celerycam
</snippet></ROW><ROW><id>5809897</id><snippet>p = soup.findAll('p')  
while len(p) &gt; 3:
    last_p = p.pop()
    last_p.extract()
</snippet></ROW><ROW><id>5810237</id><snippet>{% for key, value in data.items %}</snippet></ROW><ROW><id>5810237</id><snippet>{% for item in movieFeeds.items %}
     &lt;option value="{{ item.0 }}"&gt;{{ item.1 }}&lt;/option&gt;   
{% endfor %}
</snippet></ROW><ROW><id>5810619</id><snippet>thing</snippet></ROW><ROW><id>5810619</id><snippet>class thing:
  def __init__(self, type = ''):
    self.type = type

    self.flight = (self.type in ['bird'])
    self.swim = (self.type in ['fish', 'mammal'])
</snippet></ROW><ROW><id>5810619</id><snippet>import random

things = ['fish', 'mammal', 'bird']
randomThing = thing(random.sample(things,  1))

print randomThing.type
print randomThing.flight
print randomThing.swim
</snippet></ROW><ROW><id>5810619</id><snippet>class Question:
  def __init__(self, question = '', choices = [], correct = None, answer = None):
    self.question = question
    self.choices = choices
    self.correct = correct

  def answer(self, answer):
    self.answer = answer

  def grade(self):
    return self.answer == self.correct

class Test:
  def __init__(self, questions):
    self.questions = questions

  def result(self):
    return sum([question.grade() for question in self.questions])

  def total(self):
    return len(self.questions)

  def percentage(self):
    return 100.0 * float(self.result()) / float(self.total())
</snippet></ROW><ROW><id>5810619</id><snippet>questions = [Question('What is 0 + 0?', [0, 1, 2, 3], 0),
             Question('What is 1 + 1?', [0, 1, 2, 3], 2)]

test = Test(questions)

test.questions[0].answer(3) # Answers with the fourth item in answers, not three.
test.questions[1].answer(2)

print test.percentage()
# Prints 50.0
</snippet></ROW><ROW><id>5811045</id><snippet>Quadro(*[float(x) for x in S.split()])
</snippet></ROW><ROW><id>5811293</id><snippet>import sys
from twisted.internet import reactor, defer


class FourOhFourError(Exception):
    pass


class AuthenticationError(Exception):
    pass


def logon(retry=3, success=2, wrong_auth=0):
    # do stuff
    d = defer.Deferred()
    # not_found is the only error recoverable
    d.addErrback(not_found, retry, success)
    if wrong_auth:
        reactor.callLater(0, d.errback, AuthenticationError("wrong auth"))
    else:
        if success == 0:
            reactor.callLater(0, d.callback, "Mario")
        else:
            reactor.callLater(0, d.errback, FourOhFourError("Not found"))
    return d


def not_found(failure, retry, success):
    failure.trap(FourOhFourError) # this is superfluous here
    print failure.getErrorMessage()
    if retry == 0:
        raise AuthenticationError("Max retries")
    # do stuff
    print "retring..."
    d = defer.Deferred()
    d.addCallback(logon, success-1)
    reactor.callLater(1, d.callback, retry-1) # not really clean here
    return d


def wrong_auth(failure):
    failure.trap(AuthenticationError) # this is superfluous here
    # do stuff
    print "something goes wrong"
    print failure.getErrorMessage()


def loggedIn(user):
    print "hello %s" % user


def stop(_):
    reactor.stop()


d = logon(*map(int, sys.argv[1:]))
d.addCallbacks(loggedIn, wrong_auth)
d.addBoth(stop)
reactor.run()
</snippet></ROW><ROW><id>5811293</id><snippet>0 0 1</snippet></ROW><ROW><id>5811293</id><snippet>3 2 0</snippet></ROW><ROW><id>5811293</id><snippet>3 4 0</snippet></ROW><ROW><id>5811548</id><snippet>import myproject.mypackage
from myproject.mypackage.myfile import MyClass
</snippet></ROW><ROW><id>5812177</id><snippet>etree.XMLParser</snippet></ROW><ROW><id>5812177</id><snippet>encoding</snippet></ROW><ROW><id>5812177</id><snippet>lxml</snippet></ROW><ROW><id>5812177</id><snippet>parser = etree.XMLParser(ns_clean=True, recover=True)
etree.parse('http://wiadomosci.onet.pl/kraj/rss.xml', parser)
</snippet></ROW><ROW><id>5812184</id><snippet>db4-devel</snippet></ROW><ROW><id>5812242</id><snippet>$ ls -R mypackage
mypackage:
__init__.py  __init__.pyc  mymodule.py  mymodule.pyc  test

mypackage/test:
__init__.py  __init__.pyc  test_mymodule.py  test_mymodule.pyc
</snippet></ROW><ROW><id>5812242</id><snippet>$ trial mypackage
mypackage.test.test_mymodule
  MyModuleTestCase
    test_something ...                                                     [OK]

-------------------------------------------------------------------------------
Ran 1 tests in 0.002s

PASSED (successes=1)
</snippet></ROW><ROW><id>5812242</id><snippet>from twisted.trial import unittest

from mypackage.mymodule import MyTestSubject

class MyModuleTestCase(unittest.TestCase):
    def test_something(self):
        pass
</snippet></ROW><ROW><id>5812245</id><snippet>integer function multiply(a, b)
    integer, intent(in) :: a, b
    multiply = a * b
end function multiply
</snippet></ROW><ROW><id>5812245</id><snippet>integer function addtwo(a, b)
    integer, intent(in) :: a, b
    addtwo = a + b
end function addtwo
</snippet></ROW><ROW><id>5812245</id><snippet>% gfortran-4.4 -shared -fPIC -g -o mult.so mult.f90
% gfortran-4.4 -shared -fPIC -g -o add.so add.f90
% nm -ao mult.so | grep multiply
mult.so:00000000000005cc T multiply_
</snippet></ROW><ROW><id>5812245</id><snippet>multiply_(int *a, int *b)</snippet></ROW><ROW><id>5812245</id><snippet>ctypes</snippet></ROW><ROW><id>5812245</id><snippet>from ctypes import byref, cdll, c_int

mult = cdll.LoadLibrary('./mult.so')
add = cdll.LoadLibrary('./add.so')
a = c_int(2)
b = c_int(4)
print mult.multiply_(byref(a), byref(b))
print add.addtwo_(byref(a), byref(b))
</snippet></ROW><ROW><id>5812245</id><snippet>8
6
</snippet></ROW><ROW><id>5812413</id><snippet>a = raw_input("Type something: ")
if sys.stdin is not sys.__stdin__:
    print(a)
print("You typed in: "+a)
</snippet></ROW><ROW><id>5812413</id><snippet>raw_input</snippet></ROW><ROW><id>5812413</id><snippet>old_raw_input = raw_input

def new_raw_input(prompt):
    result = old_raw_input(prompt)
    if sys.stdin is not sys.__stdin__:
        print result
    return result

raw_input = new_raw_input
</snippet></ROW><ROW><id>5812842</id><snippet>def b(my_list):
    new_list = my_list[:]
    for i in range(len(my_list)):
        if not my_list[i]:
            new_list.remove(my_list[i])
        else:
            do_something()
    return new_list
</snippet></ROW><ROW><id>5812842</id><snippet>b(a)</snippet></ROW><ROW><id>5812842</id><snippet>b</snippet></ROW><ROW><id>5812842</id><snippet>my_list</snippet></ROW><ROW><id>5812842</id><snippet>a</snippet></ROW><ROW><id>5812842</id><snippet>new_list = my_list[:]</snippet></ROW><ROW><id>5812851</id><snippet>class staticandinstancemethod(object):
     def __init__(self, f):
          self.f = f

     def __get__(self, obj, klass=None):
          def newfunc(*args, **kw):
               return self.f(obj, *args, **kw)
          return newfunc
</snippet></ROW><ROW><id>5812851</id><snippet>&gt;&gt;&gt; class A(object):
...     @staticandinstancemethod
...     def B(self, x, y):
...         print self is None and "static" or "instance"

&gt;&gt;&gt; A.B(1,2)
static
&gt;&gt;&gt; A().B(1,2)
instance
</snippet></ROW><ROW><id>5812982</id><snippet>fig = pylab.gcf()
fig.canvas.set_window_title('Test')
</snippet></ROW><ROW><id>5812984</id><snippet>^(=+)abc\1$
</snippet></ROW><ROW><id>5812984</id><snippet>=</snippet></ROW><ROW><id>5812984</id><snippet>^(={1,3})abc\1$
</snippet></ROW><ROW><id>5813067</id><snippet>_protocol = HTTP11ClientProtocol
</snippet></ROW><ROW><id>5813067</id><snippet>from twisted.web import client
class MyHTTPClient(client.HTTP11ClientProtocol):
    def connectionMade(self):
        self.transport.setTcpNoDelay(True)
        client.HTTP11ClientProtocol.connectionMade(self) # call the super-class's connectionMade

class MyAgent(client.Agent):
    _protocol = MyHTTPClient
</snippet></ROW><ROW><id>5813242</id><snippet>turtle.bgcolor(*args)</snippet></ROW><ROW><id>5813242</id><snippet>import turtle&lt;br&gt;
turtle.bgcolor("black")</snippet></ROW><ROW><id>5813242</id><snippet>from turtle import *
bgcolor("black")</snippet></ROW><ROW><id>5814085</id><snippet>my_string = 'id', 'name'
my_model.objects.values(*my_string)
</snippet></ROW><ROW><id>5814136</id><snippet>itertools.compress</snippet></ROW><ROW><id>5814136</id><snippet>itertools.cycle</snippet></ROW><ROW><id>5814136</id><snippet>from itertools import cycle, compress
seq = range(100)
criteria = cycle([True]*10 + [False]*20) # Use whatever pattern you like
&gt;&gt;&gt; list(compress(seq, criteria))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
</snippet></ROW><ROW><id>5814136</id><snippet>$ ./python -m timeit -s "a = range(100)" "[x for start in range(0, len(a), 30) for x in a[start:start+10]]"
100000 loops, best of 3: 4.96 usec per loop

$ ./python -m timeit -s "from itertools import cycle, compress" -s "a = range(100)" -s "criteria = cycle([True]*10 + [False]*20)" "list(compress(a, criteria))"
100000 loops, best of 3: 4.76 usec per loop
</snippet></ROW><ROW><id>5814136</id><snippet>$ ./python -m timeit -s "a = range(100)" "[x for start in range(0, len(a), 30) for x in a[start:start+10]]"
100000 loops, best of 3: 7.41 usec per loop

$ ./python -m timeit -s "from itertools import cycle, compress" -s "a = range(100)" -s "criteria = cycle([True]*10 + [False]*20)" "list(compress(a, criteria))"
100000 loops, best of 3: 4.78 usec per loop
</snippet></ROW><ROW><id>5814136</id><snippet>$ ./python -m timeit -s "a = range(100)" "for x in (x for start in range(0, len(a), 30) for x in a[start:start+10]): pass"
100000 loops, best of 3: 6.82 usec per loop
$ ./python -m timeit -s "from itertools import cycle, compress" -s "a = range(100)" -s "criteria = cycle([True]*10 + [False]*20)" "for x in compress(a, criteria): pass"
100000 loops, best of 3: 3.61 usec per loop
</snippet></ROW><ROW><id>5814136</id><snippet>chain(repeat(True, 10), repeat(False, 20))</snippet></ROW><ROW><id>5814241</id><snippet>boost::python::detail::init_module(char const*, void (*)())
</snippet></ROW><ROW><id>5814241</id><snippet>boost::python::detail::init_module(PyModuleDef&amp;, void (*)())
</snippet></ROW><ROW><id>5814241</id><snippet>PY_VERSION_HEX</snippet></ROW><ROW><id>5814241</id><snippet>/usr/include/python3.1/patchlevel.h</snippet></ROW><ROW><id>5815397</id><snippet>&gt;&gt;&gt; x= u'\u0639\u0644\u0649'
&gt;&gt;&gt; open('x.html','w').write(x.encode('ascii','xmlcharrefreplace'))
</snippet></ROW><ROW><id>5815397</id><snippet>x.html</snippet></ROW><ROW><id>5815397</id><snippet>على
</snippet></ROW><ROW><id>5815641</id><snippet># Map the options to functions to handle them.
handlers = {
    'CFLAGS': some_function,
    'CXXFLAGS': other_function,
}

# Loop through each option.
for line in configuration:
    # Get the option and value.
    option, value = line.split('=')
    option = option.strip().upper()
    value = value.strip()

    # Try to find a handler and process the option.
    handler = handlers.get(option)
    if handler:
        handler(option, value)
    else:
        raise Exception('Unknown option.')
</snippet></ROW><ROW><id>5815641</id><snippet>option</snippet></ROW><ROW><id>5815641</id><snippet>value</snippet></ROW><ROW><id>5816272</id><snippet>reportSuite = Ratecard.objects.get(id=??)
reportSuite.region

reportSuite = Ratecard.objects.all()
for reportSuite in reportSuites:
    reportSuite.region
</snippet></ROW><ROW><id>5816272</id><snippet>return render_to_response('template_name', {'reports':reportSuites})
</snippet></ROW><ROW><id>5816272</id><snippet>{%for report in reports%}
    {{report.region}}
{%endfor%}
</snippet></ROW><ROW><id>5816272</id><snippet>answer = reportSuite.RP_UniqueUsers * 100
return render_to_response('template_link', {'reports':reportSuites, 'ans':answer})
</snippet></ROW><ROW><id>5816272</id><snippet>{{ans}}
</snippet></ROW><ROW><id>5816428</id><snippet>Base = declarative_base()</snippet></ROW><ROW><id>5816428</id><snippet>metadata</snippet></ROW><ROW><id>5816428</id><snippet>Base</snippet></ROW><ROW><id>5816428</id><snippet>metadata</snippet></ROW><ROW><id>5816428</id><snippet>Base.metadata = my_main_app.db.metadata</snippet></ROW><ROW><id>5816428</id><snippet>connecting</snippet></ROW><ROW><id>5816428</id><snippet>from sqlalchemy.schema import UniqueConstraint
from sqlalchemy.ext.declarative import declared_attr

class MessageMixIn(object):
    ttime = Column(DateTime)

    @declared_attr
    def sometable_id(cls):
        return Column(Integer, ForeignKey('sometable.id'))

    @declared_attr
    def __table_args__(cls):
        return (UniqueConstraint('sometable_id', 'ttime'), {})
</snippet></ROW><ROW><id>5817128</id><snippet>In [1]: a=[1,2,3,4]

In [2]: print(a.reverse())
None

In [3]: a
Out[3]: [4, 3, 2, 1]

In [4]: a=[1,2,3,4]

In [5]: print(reversed(a))
&lt;listreverseiterator object at 0x24e7e50&gt;

In [6]: list(reversed(a))
Out[6]: [4, 3, 2, 1]

In [7]: a
Out[7]: [1, 2, 3, 4]
</snippet></ROW><ROW><id>5817256</id><snippet>os.walk()</snippet></ROW><ROW><id>5817256</id><snippet>for root, dirs, files in os.walk(path):
    for name in files:
        if name.endswith((".html", ".htm")):
            # whatever
</snippet></ROW><ROW><id>5817256</id><snippet>htmlfiles = [os.path.join(root, name)
             for root, dirs, files in os.walk(path)
             for name in files
             if name.endswith((".html", ".htm"))]
</snippet></ROW><ROW><id>5818290</id><snippet>ShortNameFileInput</snippet></ROW><ROW><id>5818290</id><snippet>ClearableFileInput</snippet></ROW><ROW><id>5818290</id><snippet>from django.forms.widgets import ClearableFileInput
import os
# missing imports
from django.utils.safestring import mark_safe
from cgi import escape
from django.utils.encoding import force_unicode

class ShortNameClarableFileInput(ClearableFileInput):
    def render(self, name, value, attrs=None):
        substitutions = {
            'initial_text': self.initial_text,
            'input_text': self.input_text,
            'clear_template': '',
            'clear_checkbox_label': self.clear_checkbox_label,
        }
        template = u'%(input)s'
        substitutions['input'] = super(ClearableFileInput, self).render(name, value, attrs)

        if value and hasattr(value, "url"):
            template = self.template_with_initial
            substitutions['initial'] = (u'&lt;a href="%s"&gt;%s&lt;/a&gt;'
                                        % (escape(value.url),
                                           escape(force_unicode(os.path.basename(value.url))))) # I just changed this line
            if not self.is_required:
                checkbox_name = self.clear_checkbox_name(name)
                checkbox_id = self.clear_checkbox_id(checkbox_name)
                substitutions['clear_checkbox_name'] = conditional_escape(checkbox_name)
                substitutions['clear_checkbox_id'] = conditional_escape(checkbox_id)
                substitutions['clear'] = CheckboxInput().render(checkbox_name, False, attrs={'id': checkbox_id})
                substitutions['clear_template'] = self.template_with_clear % substitutions

        return mark_safe(template % substitutions)
</snippet></ROW><ROW><id>5818290</id><snippet>class DemoVar_addform(ModelForm):
    ...
    class Meta:
        model = DemoVar_model
        widgets = {
            'Welcome_sound': ShortNameClarableFileInput,
        }                    
</snippet></ROW><ROW><id>5818542</id><snippet>def validate():
    return validator.max(self, "x", 10)
</snippet></ROW><ROW><id>5818542</id><snippet>def max(ob, attr, max_value):
    val = getattr(ob, attr)    # val would be self.x now
    ...
</snippet></ROW><ROW><id>5818786</id><snippet>multiprocessing</snippet></ROW><ROW><id>5818786</id><snippet>PIL</snippet></ROW><ROW><id>5818786</id><snippet>from multiprocessing import Process
import os

def info(title):  # For learning purpose, remove when you got the PID\PPID idea
    print title
    print 'module:', __name__
    print 'parent process:', os.getppid(), 
    print 'process id:', os.getpid()

def f(name):      # Working function
    info('function f')
    print 'hello', name

if __name__ == '__main__':
    info('main line')
    processes=[Process(target=f, args=('bob-%d' % i,)) for i  in range(12)]
    [p.start() for p in processes]
    [p.join()  for p in processes]
</snippet></ROW><ROW><id>5818786</id><snippet>multiprocess.pool()</snippet></ROW><ROW><id>5818786</id><snippet>multiprocessing manual</snippet></ROW><ROW><id>5818786</id><snippet>multiprocessing.cpu_count()</snippet></ROW><ROW><id>5818786</id><snippet>4</snippet></ROW><ROW><id>5818786</id><snippet>from multiprocessing import Pool
import datetime

def f(x):  # You thumbnail maker function, probably using some module like PIL
    print '%-4d: Started at %s' % (x, datetime.datetime.now())
    return x*x

if __name__ == '__main__':
    pool = Pool(processes=4)              # start 4 worker processes
    print pool.map(f, range(25))          # prints "[0, 1, 4,..., 81]"
</snippet></ROW><ROW><id>5818786</id><snippet>0   : Started at 2011-04-28 17:25:58.992560
1   : Started at 2011-04-28 17:25:58.992749
4   : Started at 2011-04-28 17:25:58.992829
5   : Started at 2011-04-28 17:25:58.992848
2   : Started at 2011-04-28 17:25:58.992741
3   : Started at 2011-04-28 17:25:58.992877
6   : Started at 2011-04-28 17:25:58.992884
7   : Started at 2011-04-28 17:25:58.992902
10  : Started at 2011-04-28 17:25:58.992998
11  : Started at 2011-04-28 17:25:58.993019
12  : Started at 2011-04-28 17:25:58.993056
13  : Started at 2011-04-28 17:25:58.993074
14  : Started at 2011-04-28 17:25:58.993109
15  : Started at 2011-04-28 17:25:58.993127
8   : Started at 2011-04-28 17:25:58.993025
9   : Started at 2011-04-28 17:25:58.993158
16  : Started at 2011-04-28 17:25:58.993161
17  : Started at 2011-04-28 17:25:58.993179
18  : Started at 2011-04-28 17:25:58.993230
20  : Started at 2011-04-28 17:25:58.993233
19  : Started at 2011-04-28 17:25:58.993249
21  : Started at 2011-04-28 17:25:58.993252
22  : Started at 2011-04-28 17:25:58.993288
24  : Started at 2011-04-28 17:25:58.993297
23  : Started at 2011-04-28 17:25:58.993307
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 
 289, 324, 361, 400, 441, 484, 529, 576]
</snippet></ROW><ROW><id>5818786</id><snippet>subprocess</snippet></ROW><ROW><id>5818786</id><snippet>subprocess</snippet></ROW><ROW><id>5818786</id><snippet>imagemagick</snippet></ROW><ROW><id>5818786</id><snippet>convert</snippet></ROW><ROW><id>5818786</id><snippet>import subprocess as sp

processes=[sp.Popen('your-command-here', shell=True, 
                    stdout=sp.PIPE, stderr=sp.PIPE) for i in range(12)]
</snippet></ROW><ROW><id>5818786</id><snippet>subprocess.poll()</snippet></ROW><ROW><id>5819347</id><snippet>os.walk</snippet></ROW><ROW><id>5819347</id><snippet>os.listdir</snippet></ROW><ROW><id>5819347</id><snippet>os.walk</snippet></ROW><ROW><id>5819347</id><snippet>os.listdir</snippet></ROW><ROW><id>5819347</id><snippet>&gt;&gt;&gt; for filename in  os.listdir(r"c:\python26\\"):
...   if filename.endswith('.txt') or filename.endswith('.log'): print filename
... 
lxml-wininst.log
MySQL-python-wininst.log
py2exe-wininst.log
PyXML-wininst.log
scons-wininst.log
</snippet></ROW><ROW><id>5819858</id><snippet>Column</snippet></ROW><ROW><id>5819858</id><snippet>sqlalchemy.orm.attributes.instance_state(obj).unloaded</snippet></ROW><ROW><id>5819858</id><snippet>deferred()</snippet></ROW><ROW><id>5819858</id><snippet>group</snippet></ROW><ROW><id>5819858</id><snippet>deferred()</snippet></ROW><ROW><id>5819858</id><snippet>undefer()</snippet></ROW><ROW><id>5819858</id><snippet>undefer_group()</snippet></ROW><ROW><id>5819858</id><snippet>column_property(Column(…), group=…)</snippet></ROW><ROW><id>5819858</id><snippet>defer()</snippet></ROW><ROW><id>5819858</id><snippet>Column</snippet></ROW><ROW><id>5819858</id><snippet>session.refresh(obj, attribute_names=…)</snippet></ROW><ROW><id>5819858</id><snippet>attribute_names</snippet></ROW><ROW><id>5819858</id><snippet>state.unloaded</snippet></ROW><ROW><id>5819858</id><snippet>weak_identity_map=False</snippet></ROW><ROW><id>5819858</id><snippet>query.get(pk)</snippet></ROW><ROW><id>5819858</id><snippet>get()</snippet></ROW><ROW><id>5819858</id><snippet>query.filter_by(id=pk).first()</snippet></ROW><ROW><id>5819858</id><snippet>item.group</snippet></ROW><ROW><id>5819858</id><snippet>query.get()</snippet></ROW><ROW><id>5819858</id><snippet>state.unloaded</snippet></ROW><ROW><id>5819858</id><snippet>state.unloaded</snippet></ROW><ROW><id>5820058</id><snippet>numpy.r_</snippet></ROW><ROW><id>5820058</id><snippet>from numpy import array, r_
a = array(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])
print a[r_[1:3, 5, 7]]

['b' 'c' 'f' 'h']
</snippet></ROW><ROW><id>5820359</id><snippet>time</snippet></ROW><ROW><id>5820359</id><snippet>time python foo.py
</snippet></ROW><ROW><id>5820381</id><snippet>import itertools

L1 = [1,2,3]
L2 = ['a','b','c']
list(itertools.chain.from_iterable(itertools.izip(L1, L2)))
</snippet></ROW><ROW><id>5820381</id><snippet>izip_longest</snippet></ROW><ROW><id>5820443</id><snippet>enumerate</snippet></ROW><ROW><id>5820443</id><snippet>start</snippet></ROW><ROW><id>5820443</id><snippet>Number_List = [0,1,2,3,4,5,6,7,8,9]
for Index, Number in enumerate(Number_List[1:], start=1):
  Number_List[Index] = Number + 1
</snippet></ROW><ROW><id>5820443</id><snippet>Number_List[1:] = [x+1 for x in Number_List[1:]]
</snippet></ROW><ROW><id>5820975</id><snippet>def foo():
    """
    &gt;&gt;&gt; foo() # doctest: +ELLIPSIS
    [...] world
    """
    print "hello world"

if __name__ == "__main__":
    import doctest

    OC = doctest.OutputChecker
    class AEOutputChecker(OC):
        def check_output(self, want, got, optionflags):
            from re import sub
            if optionflags &amp; doctest.ELLIPSIS:
                want = sub(r'\[\.\.\.\]', '...', want)
            return OC.check_output(self, want, got, optionflags)

    doctest.OutputChecker = AEOutputChecker
    doctest.testmod()
</snippet></ROW><ROW><id>5821420</id><snippet>self</snippet></ROW><ROW><id>5821420</id><snippet>self.real</snippet></ROW><ROW><id>5821420</id><snippet>real</snippet></ROW><ROW><id>5821795</id><snippet>from collections import defaultdict

D = defaultdict(list)

a = ['sky', 'ocean', 'grass', 'tomato', 'leaf']

for item in a:
  D[color(item)].append(item)
</snippet></ROW><ROW><id>5821847</id><snippet>email.MIMEMultipart</snippet></ROW><ROW><id>5821918</id><snippet>% cd Foo
% python setup.py install --root /tmp/fooroot
% PYTHONPATH=/tmp/fooroot python -c 'from foo import bar; print bar'
&lt;module 'foo.bar' from 'foo/bar.py'&gt;
</snippet></ROW><ROW><id>5821918</id><snippet>% python setup.py bdist_rpm
% sudo rpm -i dist/Foo-0.1.0-1.noarch.rpm
# now should be available to python globally
</snippet></ROW><ROW><id>5821918</id><snippet>bar</snippet></ROW><ROW><id>5821918</id><snippet>foo</snippet></ROW><ROW><id>5821918</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>5821918</id><snippet>import bar
</snippet></ROW><ROW><id>5822301</id><snippet>attr()</snippet></ROW><ROW><id>5822301</id><snippet>@declared_attr</snippet></ROW><ROW><id>5822301</id><snippet>class Mixin(object):

    _attr = Column('attr', Integer)

    def get_attr(self):
        return self._attr

    def set_attr(self, value):
         self._attr = value

    @declared_attr
    def attr(cls):
        return synonym('_attr', descriptor=property(cls.get_attr, cls.set_attr))
</snippet></ROW><ROW><id>5822372</id><snippet>class SubConsole1(MainConsole):
    def __init__(self, obb1, obj2):
        MainConsole.__init__(self, obj1, obj2)
        self.prompt = "1&gt;"
    def do_action(self,args):
        print self.obj1.someattr1 # Doesn't work
</snippet></ROW><ROW><id>5822372</id><snippet>sub1 = SubConsole1(object1, object2)
</snippet></ROW><ROW><id>5822471</id><snippet>import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(1,1,1)

mu, sigma=100, 15
x=mu + sigma*np.random.randn(1000000)
n, bins, patches=ax.hist(x, 50, facecolor='green', alpha=0.75)

ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda y, pos: ('%.2f')%(y*1e-3)))
ax.set_ylabel('Frequency (000s)')

plt.show()
</snippet></ROW><ROW><id>5822528</id><snippet>def incoming_ping():
    pass

regexes = {"^PING: (.+)": incoming_ping,
           "more regex": "more meanings"}
</snippet></ROW><ROW><id>5822545</id><snippet>id = link["post"].value
print id
</snippet></ROW><ROW><id>5822573</id><snippet>np.loadtxt</snippet></ROW><ROW><id>5822573</id><snippet>np.asmatrix</snippet></ROW><ROW><id>5822573</id><snippet>import numpy as np
toy_data = np.asmatrix(np.loadtxt('toy_data.csv',delimiter=','skiprows=1))
print toy_data
print toy_data.shape
</snippet></ROW><ROW><id>5822573</id><snippet>[[ 1.  1.  3.  3.]
 [ 1.  2.  4.  1.]
 [ 1.  3.  7.  2.]
 [ 2.  1.  3.  3.]
 [ 2.  2.  4.  4.]
 [ 2.  4.  3.  1.]
 [ 3.  1.  3.  3.]
 [ 3.  2.  4.  3.]
 [ 3.  3.  3.  4.]
 [ 4.  4.  5.  1.]
 [ 4.  5.  6.  2.]
 [ 4.  2.  4.  3.]
 [ 5.  2.  5.  4.]
 [ 5.  3.  3.  1.]
 [ 5.  4.  7.  2.]
 [ 6.  1.  3.  3.]
 [ 6.  5.  4.  1.]
 [ 6.  2.  5.  2.]]
(18, 4)
</snippet></ROW><ROW><id>5822668</id><snippet>ABC</snippet></ROW><ROW><id>5822668</id><snippet>DEF</snippet></ROW><ROW><id>5822668</id><snippet>decomposeLogEntry()</snippet></ROW><ROW><id>5822668</id><snippet>import re
def decomposeLogEntry(text):
    r""" Decompose log file entry into its various components.

    If text is a valid log entry, return regex match object of
    log entry components strings. Otherwise return None."""
    return re.match(r"""
        # Decompose log file entry into its various components.
        ^                            # Anchor to start of string
        (?P&lt;time&gt;\d\d:\d\d:\d\d)     # Capture: time
        \s+
        (?P&lt;modname&gt;\w+?)            # Capture module name
        \s-\s\[
        (?P&lt;msgtype&gt;[^]]+)           # Capture message type
        \]
        (?P&lt;message&gt;[^!]+)           # Capture message text
        !!\sftp_site=
        (?P&lt;ftpsite&gt;\S+?)            # Capture ftp URL
        \sfile_dir=
        (?P&lt;filedir&gt;\S+?)            # Capture file directory?
        \sinput\sfile=
        (?P&lt;infile&gt;                  # Capture input path and filename
          (?P&lt;infilepath&gt;\S+)\\      # Capture input file path
          (?P&lt;infilename&gt;[^\s\\]+)   # Capture input file filename
        )
        \soutput\sfile=
        (?P&lt;outfile&gt;                 # Capture input path and filename
          (?P&lt;outfilepath&gt;\S+)\\     # Capture output file path
          (?P&lt;outfilename&gt;[^\s\\]+)  # Capture output file filename
        )
        \s*                          # Optional whitespace at end.
        $                            # Anchor to end of string
        """, text, re.IGNORECASE | re.VERBOSE)

# Demonstrate decomposeLogEntry function. Print components of all log entries.
f=open("testdata.log")
mcnt = 0
for line in f:
    # Decompose this line into its components.
    m = decomposeLogEntry(line)
    if m:
        mcnt += 1
        print "Match number %d" % (mcnt)
        print "  Time:             %s" % m.group("time")
        print "  Module name:      %s" % m.group("modname")
        print "  Message type:     %s" % m.group("time")
        print "  Message:          %s" % m.group("message")
        print "  FTP site URL:     %s" % m.group("ftpsite")
        print "  Input file:       %s" % m.group("infile")
        print "  Input file path:  %s" % m.group("infilepath")
        print "  Input file name:  %s" % m.group("infilename")
        print "  Output file:      %s" % m.group("outfile")
        print "  Output file path: %s" % m.group("outfilepath")
        print "  Output file name: %s" % m.group("outfilename")
        print "\n",
f.close()

# Next pick out only the desired data.
f=open("testdata.log")
mcnt = 0
matches = []
for line in f:
    # Decompose this line into its components.
    m = decomposeLogEntry(line)
    if m:
        # See if this record meets desired requirements
        if re.search(r"ABC$|DEF$", m.group("infilepath")):
            matches.append(line)
f.close()
print "There were %d matching records" % len(matches)
</snippet></ROW><ROW><id>5822668</id><snippet>r"""
Match number 1
  Time:             08:38:36
  Module name:      TestModule
  Message type:     08:38:36
  Message:          result success
  FTP site URL:     ftp.test.com
  Input file:       \root\level1\level2-ABC\2C.013000000B.dat
  Input file path:  \root\level1\level2-ABC
  Input file name:  2C.013000000B.dat
  Output file:      c:\local\project1\data\2C.013000000B.dat.ext
  Output file path: c:\local\project1\data
  Output file name: 2C.013000000B.dat.ext

Match number 2
  Time:             06:40:37
  Module name:      TestModule
  Message type:     06:40:37
  Message:          result success
  FTP site URL:     ftp.test.com
  Input file:       \root\level1\level2-ABC\20100722B.TXT
  Input file path:  \root\level1\level2-ABC
  Input file name:  20100722B.TXT
  Output file:      c:\local\project1\data\20100722B.TXT.ext
  Output file path: c:\local\project1\data
  Output file name: 20100722B.TXT.ext

Match number 3
  Time:             06:40:39
  Module name:      TestModule
  Message type:     06:40:39
  Message:          result success
  FTP site URL:     ftp.test.com
  Input file:       \root\level1\level2-DEF\20100722D1-XYZ.TXT
  Input file path:  \root\level1\level2-DEF
  Input file name:  20100722D1-XYZ.TXT
  Output file:      c:\local\project1\data\20100722D1-YFP.TXT.ext
  Output file path: c:\local\project1\data
  Output file name: 20100722D1-YFP.TXT.ext

Match number 4
  Time:             06:40:42
  Module name:      TestModule
  Message type:     06:40:42
  Message:          result success
  FTP site URL:     ftp.test.com
  Input file:       \root\level1\level2-DEF\2C.250B
  Input file path:  \root\level1\level2-DEF
  Input file name:  2C.250B
  Output file:      c:\local\project1\data\2C.250B.ext
  Output file path: c:\local\project1\data
  Output file name: 2C.250B.ext

There were 4 matching records
"""
</snippet></ROW><ROW><id>5823401</id><snippet>"help" in arguments</snippet></ROW><ROW><id>5823401</id><snippet>&gt;&gt;&gt; arguments = dict()
&gt;&gt;&gt; arguments["help"]=1
&gt;&gt;&gt; "help" in arguments
True
</snippet></ROW><ROW><id>5823401</id><snippet>help in arguments</snippet></ROW><ROW><id>5823401</id><snippet>help</snippet></ROW><ROW><id>5823401</id><snippet>arguments = {}</snippet></ROW><ROW><id>5823431</id><snippet>  regex = re.compile(r'(?:3\d){6}')
  for root,dirname, files in os.walk(directory):
     for file in files:
       if file.endswith(".log") or file.endswith(".txt"):
          f=open(os.path.join(root,file))
          for i, line in enumerate(f.readlines()):
              searchedstr = regex.findall(line)
              for word in searchedstr:
                 print "String found: " + word
                 print "Line: "+str(i)
                 print "File: " + os.path.join(root,file)
                 break
          f.close()
</snippet></ROW><ROW><id>5823457</id><snippet>blockingCallFromThread</snippet></ROW><ROW><id>5823716</id><snippet>set(range(1, 101)) - s
</snippet></ROW><ROW><id>5823956</id><snippet>return int(e)
</snippet></ROW><ROW><id>5824309</id><snippet>    from pyparsing import *

    # matches and removes end of line
    EOL = LineEnd().suppress()

    # line starts, anything follows until EOL, fails on blank lines,
    line = LineStart() + SkipTo(LineEnd(), failOn=LineStart()+LineEnd()) + EOL

    lines = OneOrMore(line)

    # Group keyword probably helps grouping these items together, you can remove it
    parser = Keyword("SOME_KEYWORD:") + EOL + Group(lines) + Keyword("ANOTHER_KEYWORD:") + EOL + Group(lines)
    result = parser.parseFile('data.txt')
    print result
</snippet></ROW><ROW><id>5824309</id><snippet>['SOME_KEYWORD:', ['line 1', 'line 2', 'line 3', 'line 4'], 'ANOTHER_KEYWORD:', ['line a', 'line b', 'line c']]
</snippet></ROW><ROW><id>5824559</id><snippet>def __gt__(self, circle2):
    return self.r &gt; circle2.r
</snippet></ROW><ROW><id>5824766</id><snippet>&gt;&gt;&gt; x=[['1', '7', 'U1'], ['1.5', '8', 'U1']]
&gt;&gt;&gt; zip(*x)
[('1', '1.5'), ('7', '8'), ('U1', 'U1')]
&gt;&gt;&gt; [[sum(float(n) for n in nums)] for nums in zip(*x)[:-1]]
[[2.5], [15.0]]
</snippet></ROW><ROW><id>5824766</id><snippet>zip(*x)</snippet></ROW><ROW><id>5825091</id><snippet>"Financial Assets:" in searchlines[m-5:m+5]
</snippet></ROW><ROW><id>5825091</id><snippet>any("Financial Assets:" in line2 for line2 in searchlines[m-5:m+5])
</snippet></ROW><ROW><id>5825240</id><snippet>X</snippet></ROW><ROW><id>5825240</id><snippet>X</snippet></ROW><ROW><id>5825240</id><snippet>hh = [[82.5], [168.5]]
N  = 1.0 / 5
ll = [[x*N for x in y] for y in hh]
</snippet></ROW><ROW><id>5825324</id><snippet>c</snippet></ROW><ROW><id>5825324</id><snippet>c</snippet></ROW><ROW><id>5825531</id><snippet>httplib</snippet></ROW><ROW><id>5825531</id><snippet>urllib2</snippet></ROW><ROW><id>5825531</id><snippet>urllib2</snippet></ROW><ROW><id>5825531</id><snippet>OpenerDirector</snippet></ROW><ROW><id>5825531</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>5825531</id><snippet>httplib</snippet></ROW><ROW><id>5825531</id><snippet>HTTPConnection</snippet></ROW><ROW><id>5825531</id><snippet>HTTPConnection</snippet></ROW><ROW><id>5825531</id><snippet>threading</snippet></ROW><ROW><id>5825531</id><snippet>multiprocessing</snippet></ROW><ROW><id>5825531</id><snippet>queue.Queue</snippet></ROW><ROW><id>5825531</id><snippet>urllib2.py</snippet></ROW><ROW><id>5825531</id><snippet>_opener = None
def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):
    global _opener
    if _opener is None:
        _opener = build_opener()
    return _opener.open(url, data, timeout)

def install_opener(opener):
    global _opener
    _opener = opener
</snippet></ROW><ROW><id>5825531</id><snippet>install_opener()</snippet></ROW><ROW><id>5825531</id><snippet>urlopen()</snippet></ROW><ROW><id>5825531</id><snippet>urlopen()</snippet></ROW><ROW><id>5825531</id><snippet>Request</snippet></ROW><ROW><id>5825531</id><snippet>url</snippet></ROW><ROW><id>5825531</id><snippet>Request</snippet></ROW><ROW><id>5825531</id><snippet>OpenerDirector.open()</snippet></ROW><ROW><id>5825531</id><snippet>urlopen()</snippet></ROW><ROW><id>5825531</id><snippet>Request</snippet></ROW><ROW><id>5825531</id><snippet>urlopen()</snippet></ROW><ROW><id>5825531</id><snippet>install_opener()</snippet></ROW><ROW><id>5825531</id><snippet>Request</snippet></ROW><ROW><id>5825531</id><snippet>url</snippet></ROW><ROW><id>5825586</id><snippet>import time
import threading
run = True

def foo():
    while run:
        print '.',
        time.sleep(0)

t1 = threading.Thread(target=foo)
t1.start()
time.sleep(2)
run = False
print 'run=False'
while True:
    pass
</snippet></ROW><ROW><id>5825628</id><snippet>assert isinstance(result, my_object.my_object)
</snippet></ROW><ROW><id>5825848</id><snippet>from operator import mul
map(mul, list1, list2)
</snippet></ROW><ROW><id>5825848</id><snippet>&gt;&gt;&gt; hh = [[82.5], [168.5]]
&gt;&gt;&gt; [ [i*j for i in x for j in y] for x in hh for y in zip(*hh) ]
[[6806.25, 13901.25], [13901.25, 28392.25]]

&gt;&gt;&gt; hh = [[2], [4]]
&gt;&gt;&gt; [ [i*j for i in x for j in y] for x in hh for y in zip(*hh) ]
[[4, 8], [8, 16]]

&gt;&gt;&gt; hh = [[2], [4], [6]]
&gt;&gt;&gt; [ [i*j for i in x for j in y] for x in hh for y in zip(*hh) ]
[[4, 8, 12], [8, 16, 24], [12, 24, 36]]

&gt;&gt;&gt; hh = [[1, 2, 4]]
&gt;&gt;&gt; [ [i*j for i in x for j in y] for x in hh for y in zip(*hh) ]
[[1, 2, 4], [2, 4, 8], [4, 8, 16]]

&gt;&gt;&gt; hh = [[1, 2], [3, 4]]
&gt;&gt;&gt; [ [i*j for i in x for j in y] for x in hh for y in zip(*hh) ]
[[1, 3, 2, 6], [2, 4, 4, 8], [3, 9, 4, 12], [6, 12, 8, 16]]
</snippet></ROW><ROW><id>5825848</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [0, 1, 2]
&gt;&gt;&gt; [ x*y for x in a for y in b]
[0, 1, 2, 0, 2, 4, 0, 3, 6]
&gt;&gt;&gt; [[x*y for x in a] for y in b]
[[0, 0, 0], [1, 2, 3], [2, 4, 6]]
</snippet></ROW><ROW><id>5825954</id><snippet>sum(c1 == c2 for c1, c2 in itertools.izip(s1, s2))
</snippet></ROW><ROW><id>5825954</id><snippet>sum(1 for c1, c2 in itertools.izip(s1, s2) if c1 == c2)
</snippet></ROW><ROW><id>5826033</id><snippet>import cookielib
...

opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookielib.CookieJar())) 
</snippet></ROW><ROW><id>5826033</id><snippet>params = urllib.urlencode({'username': username, 'password': password})
urllib2.urlopen('http://somedomain.com/login', params)
</snippet></ROW><ROW><id>5826033</id><snippet>self.opener.urlopen(url, data)
</snippet></ROW><ROW><id>5826220</id><snippet>None</snippet></ROW><ROW><id>5826220</id><snippet>False</snippet></ROW><ROW><id>5826283</id><snippet>__call__</snippet></ROW><ROW><id>5826283</id><snippet>def custom_validator(value):
    #your validation logic
</snippet></ROW><ROW><id>5826283</id><snippet>class RegexValidator(object):
    def __call__(self, value):
        # validation logic

class URLValidator(RegexValidator):
    def __call__(self, value):
        super(URLValidator, self).__call__(value)
        #additional logic

class EmailValidator(RegexValidator):
    # some logic
</snippet></ROW><ROW><id>5826283</id><snippet>for v in [custom_validator, EmailValidator()]:
    v(value) # &lt;-----
</snippet></ROW><ROW><id>5826320</id><snippet>&gt;&gt;&gt; arr=np.array([[1,2,3],[4,5,6],[7,8,9]])
&gt;&gt;&gt; arr[:,:-1]
array([[1, 2],
       [4, 5],
       [7, 8]])
</snippet></ROW><ROW><id>5826360</id><snippet>def cround(v):
    """
    Round number down at 1st decimal place when the digit in the 
    3rd decimal place is &lt;= 6, up when &gt;= 7
    """
    v *= 10
    q = str(round(v, 2))
    if int(q[-1]) &lt;= 6:
        return int(v) / 10.0
    return round(v) / 10.0

NUMS = [
    10.666, 10.667, 0.1, 1.0, 10.11, 10.22, 10.06, 10.006, 11.6, 11.7,
    10.666123, 10.667123, 10.888, 10.999 ]

for num in NUMS:
    print str(num).ljust(11), cround(num)
</snippet></ROW><ROW><id>5826360</id><snippet>10.666      10.6
10.667      10.7
0.1         0.1
1.0         1.0
10.11       10.1
10.22       10.2
10.06       10.0
10.006      10.0
11.6        11.6
11.7        11.7
10.666123   10.6
10.667123   10.7
10.888      10.9
10.999      11.0
</snippet></ROW><ROW><id>5826523</id><snippet>function go() { 
    echo "hi" 
}
</snippet></ROW><ROW><id>5826523</id><snippet>&gt;&gt;&gt; subprocess.Popen(['bash', '-c', '. foo.sh; go'])
</snippet></ROW><ROW><id>5826523</id><snippet>hi
</snippet></ROW><ROW><id>5826542</id><snippet>[0-9a-fA-F]{12}</snippet></ROW><ROW><id>5826542</id><snippet>(?:3[0-9]){6}</snippet></ROW><ROW><id>5826542</id><snippet>\d</snippet></ROW><ROW><id>5826542</id><snippet>(3[0-9a-fA-F]){6}</snippet></ROW><ROW><id>5826542</id><snippet>0123456789:;&lt;=&gt;?</snippet></ROW><ROW><id>5826542</id><snippet>&gt;&gt;&gt; import re, binascii
&gt;&gt;&gt; originals = ('123456', 'FOOBAR', ':;&lt;=&gt;?')
&gt;&gt;&gt; data = ' '.join(map(binascii.hexlify, originals))
&gt;&gt;&gt; print data
313233343536 464f4f424152 3a3b3c3d3e3f
&gt;&gt;&gt; for pattern in (r'(?:3\d){6}', r'(3[0-9a-fA-F]){6}',
...             r'(?:3[0-9a-fA-F]){6}', r'[0-9a-fA-F]{12}'):
...     print repr(pattern), re.findall(pattern, data)
...
'(?:3\\d){6}' ['313233343536']
'(3[0-9a-fA-F]){6}' ['36', '3f']
'(?:3[0-9a-fA-F]){6}' ['313233343536', '3a3b3c3d3e3f']
'[0-9a-fA-F]{12}' ['313233343536', '464f4f424152', '3a3b3c3d3e3f']
</snippet></ROW><ROW><id>5826612</id><snippet>Preferences -&gt; Languages -&gt; Python</snippet></ROW><ROW><id>5826619</id><snippet>    from BeautifulSoup import BeautifulSoup

    html = """ 
    &lt;html&gt;
    &lt;head&gt;
    &lt;/head&gt;

    &lt;body&gt;
      &lt;h1 class="docDisplay" id="docTitle"&gt;Data1&lt;/h1&gt;
      &lt;p&gt;other data&lt;/p&gt;
      &lt;p&gt;Another paragraph under the first heading.&lt;/p&gt;
      &lt;h1 class="docDisplay" id="docTitle"&gt;Data2&lt;/h1&gt;
      &lt;p&gt;other data2&lt;/p&gt;
      &lt;div&gt;&lt;p&gt;This paragraph is NOT a sibling of the header&lt;/p&gt;&lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;
"""

soup = BeautifulSoup(html)

data_dict = {}
stuff_under_current_heading = []

firstHeader = soup.find('h1', id="docTitle")
for tag in [firstHeader] + firstHeader.findNextSiblings():
    if tag.name == 'h1':
        stuff_under_current_heading = []
        # I chose to strip excess whitespace from the header name:
        data_dict[tag.string.strip()] = {'data': stuff_under_current_heading}
        # Modifying the list modifies the value in the dictionary.
    # Take every &lt;p&gt; tag encountered between here and the next heading
    # and associate it with the most recently-seen &lt;h1&gt; tag.
    elif tag.name == 'p':
        stuff_under_current_heading.append(tag.string)
    # Include &lt;p&gt; tags that are not siblings of the &lt;h1&gt; tag but
    # are still part of the content under the header.
    else:
        stuff_under_current_heading.extend(tag.findAll('p', text=True))

print data_dict
</snippet></ROW><ROW><id>5826619</id><snippet>{u'Data1': {'data': [u'other data', u'Another paragraph under the first heading.']},   
 u'Data2': {'data': [u'other data2', u'This paragraph is NOT a sibling of the header']}}
</snippet></ROW><ROW><id>5826914</id><snippet>import numpy as np
import matplotlib.pyplot as plt

xi = np.array([0., 0.5, 1.0])
yi = np.array([0., 0.5, 1.0])
zi = np.array([[0., 1.0, 2.0],
               [0., 1.0, 2.0],
               [-0.1, 1.0, 2.0]])

v = np.linspace(-.1, 2.0, 15, endpoint=True)
plt.contour(xi, yi, zi, v, linewidths=0.5, colors='k')
plt.contourf(xi, yi, zi, v, cmap=plt.cm.jet)
x = plt.colorbar(ticks=v)
print x
plt.show()
</snippet></ROW><ROW><id>5827033</id><snippet> letterlist = []

 def takeInput(string):
    for x in string:
        if x not in letterlist:
            letterlist.append(x)
        else:
            return 0
    return 1
</snippet></ROW><ROW><id>5827033</id><snippet>while(True): #or any other condition
    string = input("Enter 3 letter string")
    if len(string)!=3:
        print("String size inadequate")
        continue
    if takeInput(string):
        arraylist = permutation(string) #--call permutation method here
        #then iterate the permutations and print them in {}
        for x in arraylist: print("{" + x + "}")
    else:
        print("At least one of the letters already used")
</snippet></ROW><ROW><id>5827046</id><snippet>import sys
import time
&gt;&gt;&gt; for i in range(1, 100):
...     sys.stdout.write(str(i))
...     sys.stdout.flush()
...     time.sleep(0.2)
...     sys.stdout.write("\b"*4)
&lt;numbers count here&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5827093</id><snippet>import signal

def SigTest(SIG, FRM):
    print "SIGINT Caught"

signal.signal(signal.SIGHUP, SigTest)

while True:
    signal.pause()
</snippet></ROW><ROW><id>5827195</id><snippet>  File "/home/bruk/workspace/hungryDroid/src/hungryDroid/Ingredient/models.py", line 26, in Ingredient
FKowner = models.ForeignKey(User, default=User.objects.get(pk=1).id)
</snippet></ROW><ROW><id>5827195</id><snippet>def get_default_user():
    return User.objects.get(pk=1)
</snippet></ROW><ROW><id>5827195</id><snippet>FKowner = models.ForeignKey(User, default=get_default_user)
</snippet></ROW><ROW><id>5827284</id><snippet>__dir__</snippet></ROW><ROW><id>5827284</id><snippet>__getattribute__</snippet></ROW><ROW><id>5827284</id><snippet>__dir__</snippet></ROW><ROW><id>5827284</id><snippet>class A(object):
    def __dir__(self):
        return []

&gt;&gt;&gt; print dir(A())
[]
</snippet></ROW><ROW><id>5827284</id><snippet>__getattribute__</snippet></ROW><ROW><id>5827284</id><snippet>class A(object):
    def __getattribute__(self, attr):
        """Prevent 'private' attribute access"""
        if attr.startswith('_'):
            raise AttributeError

        return object.__getattribute__(self, attr)


&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.x = 5
&gt;&gt;&gt; a.x
5
&gt;&gt;&gt; a._x = 3
&gt;&gt;&gt; a._x
AttributeError
</snippet></ROW><ROW><id>5827284</id><snippet>class NoSuper(object):
    def __getattribute__(self, attr):
        """Prevent accessing inherited attributes"""
        for base in self.__bases__:
            if hasattr(base, attr):
                raise AttributeError

        return object.__getattribute__(self, attr)
</snippet></ROW><ROW><id>5827568</id><snippet>from twisted.web.client import getPage
from twisted.internet import reactor

class Getter(object):

    def __init__(self):
        self._sequence = 0
        self._results = []
        self._errors = []

    def add(self, url):
        d = getPage(url)
        d.addCallbacks(self._on_success, self._on_error)
        d.addCallback(self._on_finish)
        self._sequence += 1

    def _on_finish(self, *narg):
        self._sequence -= 1
        if not self._sequence:
            reactor.stop()

    _on_success = lambda self, *res: self._results.append(res)
    _on_error = lambda self, *err: self._errors.append(err)

    def run(self):
        reactor.run()
        return self._results, self._errors

g = Getter()
for url in ('http://www.google.com', 'http://www.yahoo.com', 'idontexist'):
    g.add(url)
results, errors = g.run()
print results
print errors
</snippet></ROW><ROW><id>5827611</id><snippet>def showScores():
    inFile = open("scores.txt", 'r')
    scorelist = []
    for line in inFile:
        line = line.strip()
        score = [p.strip() for p in line.split(",")]
        score[1] = int(score[1])
        scorelist.append(tuple(score))
    scorelist.sort(key=lambda x: x[1])
    print "High Scores:"
    for score in scorelist:
        print score[0], score[1]
    inFile.close()
</snippet></ROW><ROW><id>5827649</id><snippet>&gt;&gt;&gt; a=range(20,0,-1)
&gt;&gt;&gt; a
[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
&gt;&gt;&gt; a[10:15]=sorted(a[10:15])
&gt;&gt;&gt; a
[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 6, 7, 8, 9, 10, 5, 4, 3, 2, 1]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5828048</id><snippet>#!/usr/bin/python

print "Content-type: text/html\n\n"

import json
from collections import defaultdict

mystuff = list()
mystuff.append( ('1', 'b', 'c', 'd') )
mystuff.append( ('2', 'f', 'g', 'h') )

stufflist = list()

for s in stufflist:
    d = {}
    d['a'] = s[0]
    d['b'] = s[1]
    d['c'] = s[2]
    d['d'] = s[3]
    stufflist.append(d)

print json.write(stufflist)
</snippet></ROW><ROW><id>5828048</id><snippet>// Convert the string (sb is a string butter from the http response) to a json array. 
JSONArray jArray = new JSONArray(sb.toString());

for(int i = 0; i &lt; jArray.length(); i++){
    // Get each item as a JSON object. 
    JSONObject json_data = jArray.getJSONObject(i);

    // Get data from object ... 
    Int a = json_data.getInt("a");
    String b = json_data.getString("b");
    String c = json_data.getString("c");
    String d = json_data.getString("d");

    // Do whatever with the data ... 
}
</snippet></ROW><ROW><id>5828067</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; a = dict(a='b', c='d')
&gt;&gt;&gt; ','.join(chain(*a.items()))
'a,b,c,d'
</snippet></ROW><ROW><id>5828249</id><snippet>g.xml</snippet></ROW><ROW><id>5828249</id><snippet>g.xml</snippet></ROW><ROW><id>5828249</id><snippet>import networkx as nx

G = nx.Graph()
G.add_edge(0, 1, weight=0.1, label='edge', graphics={
    'width': 1.0, 'fill': '"#0000ff"', 'type': '"line"', 'Line': [],
    'source_arrow': 0, 'target_arrow': 0})
nx.set_node_attributes(G, 'graphics', {
    0: {'x': -85.0, 'y': -97.0, 'w': 20.0, 'h': 20.0,
        'type': '"ellipse"', 'fill': '"#889999"', 'outline': '"#666666"',
        'outline_width': 1.0},
    1: {'x': -16.0, 'y': -1.0, 'w': 40.0, 'h': 40.0,
        'type': '"ellipse"', 'fill': '"#ff9999"', 'outline': '"#666666"',
        'outline_width': 1.0}
    })
nx.set_node_attributes(G, 'label', {0: "0", 1: "1"})
nx.write_gml(G, 'network.gml')
</snippet></ROW><ROW><id>5828577</id><snippet>'\{\{(\w.+?)\}\}'
</snippet></ROW><ROW><id>5828577</id><snippet>'\{\{\w+?\}\}'
</snippet></ROW><ROW><id>5828577</id><snippet>?</snippet></ROW><ROW><id>5828577</id><snippet>{{keyword1}} other stuff {{keyword2}}</snippet></ROW><ROW><id>5828577</id><snippet>'(?&lt;=\{\{)\w+?(?=\}\})'
</snippet></ROW><ROW><id>5828669</id><snippet>for pagenum in xrange(1, 4):  # The 4 is annoying, write it as 3+1 if you like.
  url = "http://www.ted.com/talks?page=%d" % pagenum
  # do stuff with url
</snippet></ROW><ROW><id>5828669</id><snippet>page_count &lt; total_pages</snippet></ROW><ROW><id>5828669</id><snippet>import urllib2
from cgi import escape  # Important!
from BeautifulSoup import BeautifulSoup

def is_talk_anchor(tag):
  return tag.name == "a" and tag.findParent("dt", "thumbnail")
links = []
for pagenum in xrange(1, 4):
  soup = BeautifulSoup(urllib2.urlopen("http://www.ted.com/talks?page=%d" % pagenum))
  links.extend(soup.findAll(is_talk_anchor))

out = open("test.html", "w")

print &gt;&gt;out, """&lt;html&gt;&lt;head&gt;&lt;title&gt;TED Talks Index&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;#&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;URL&lt;/th&gt;&lt;/tr&gt;"""

for x, a in enumerate(links):
  print &gt;&gt;out, "&lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;http://www.ted.com%s&lt;/td&gt;&lt;/tr&gt;" % (x + 1, escape(a["title"]), escape(a["href"]))

print &gt;&gt;out, "&lt;/table&gt;"

# Or, as an ordered list:
print &gt;&gt;out, "&lt;ol&gt;"
for a in links:
  print &gt;&gt;out, """&lt;li&gt;&lt;a href="http://www.ted.com%s"&gt;%s&lt;/a&gt;&lt;/li&gt;""" % (escape(a["href"], True), escape(a["title"]))
print &gt;&gt;out, "&lt;/ol&gt;"

print &gt;&gt;out, "&lt;/body&gt;&lt;/html&gt;"
</snippet></ROW><ROW><id>5828872</id><snippet>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def flatten(seq,container=None):
    if container is None:
        container = []
    for s in seq:
        if hasattr(s,'__iter__'):
            flatten(s,container)
        else:
            container.append(s)
    return container


c = flatten([(1,2),(3,4),(5,[6,7,['a','b']]),['c','d',('e',['f','g','h'])]])
print c
print c.count('g')

d = flatten([[[1,(1,),((1,(1,))), [1,[1,[1,[1]]]], 1, [1, [1, (1,)]]]]])
print d
print d.count(1)
</snippet></ROW><ROW><id>5828905</id><snippet> result = [
     {
         'colorString' : color, 
         'skus' : [value for key, value in skus if key is colorkey]
     } for colorkey, color in colorStrings 
 ]
</snippet></ROW><ROW><id>5829082</id><snippet>SlugField</snippet></ROW><ROW><id>5829082</id><snippet>prepopulate_from</snippet></ROW><ROW><id>5829082</id><snippet>max_length</snippet></ROW><ROW><id>5829082</id><snippet>from django.db import models
from datetime import datetime

class BlogPost(models.Model):
  title = models.CharField(max_length=128)
  slug = models.SlugField()
  body = models.TextField()
  published = models.BooleanField(default=True)
  date_posted = models.DateTimeField(default=datetime.now)

def __unicode__(self):
    return self.title
</snippet></ROW><ROW><id>5829082</id><snippet>from django.contrib import admin
from myapp.models import BlogPost

class BlogPostAdmin(admin.ModelAdmin):
    prepopulated_fields = {"slug": ("title",)}

admin.site.register(BlogPost, BlogPostAdmin)
</snippet></ROW><ROW><id>5829190</id><snippet>import json

text = r"""return { 
{ 6163, 0, "tv", false, {1302}, "ESPN Deportes", "ESPN Deportes es el", nil,"tv","936",nil,"4x3", mediaRestrictions={"m2g" } },
{ 57075, 0, "tv", false, {1302}, "Video Rola", "Video \"Música Para Tus Ojos\", uedes ver.", nil,"tv","948",nil,"4x3", mediaRestrictions={"m2g" } },
{ 717242, 0, "tv", false, {1302,1301,1288}, "Hits", "asdlfj", nil,"cliplinear","6310",nil,"4x3", mediaRestrictions={"m2g" } },
{ 122719, 0, "tv", false, {1302,1301,1288}, "Bombone", "asdf", nil,"tv","74",nil,"4x3", mediaRestrictions={"m2g" } },
}"""

obj = json.loads(text.replace("return","").replace("mediaRestrictions=","").replace("{","[").replace("}","]").replace("nil","null").replace("\n","").replace(",]","]").strip())

print obj

# [[6163, 0, u'tv', False, [1302], u'ESPN Deportes', u'ESPN Deportes es el', None, u'tv', u'936', None, u'4x3', [u'm2g']], [57075, 0, u'tv', False, [1302], u'Video Rola', u'Video "M\xfasica Para Tus Ojos", uedes ver.', None, u'tv', u'948', None, u'4x3', [u'm2g']], [717242, 0, u'tv', False, [1302, 1301, 1288], u'Hits', u'asdlfj', None, u'cliplinear', u'6310', None, u'4x3', [u'm2g']], [122719, 0, u'tv', False, [1302, 1301, 1288], u'Bombone', u'asdf', None, u'tv', u'74', None, u'4x3', [u'm2g']]]

for x in obj:
  print x[5], x[8], x[9]

#ESPN Deportes tv 936
#Video Rola tv 948
#Hits cliplinear 6310
#Bombone tv 74
</snippet></ROW><ROW><id>5829273</id><snippet>buffer = ''

# reading loop
while True:

  data = socket.recv(1024)
  if not data:
    break

  # add the current data read by the socket to a temporary buffer
  buffer += data

  # search complete messages
  messages = buffer.split('\r\r')

  # we need at least 2 messages to continue
  if len(messages) == 1:
    continue

  # seperator found, iterate across complete messages
  for message in messages [:-1]:
    # handle here the message
    print message

  # set the buffer with the last cutted message
  buffer = messages [-1]
</snippet></ROW><ROW><id>5829486</id><snippet>text=re.sub('#([\W\w\s\d])*?(\n.*?\\\\)*\n', '', text, re.S | re.M)
</snippet></ROW><ROW><id>5829823</id><snippet>post-receive</snippet></ROW><ROW><id>5829823</id><snippet>/bin/bash</snippet></ROW><ROW><id>5829823</id><snippet>post-receive</snippet></ROW><ROW><id>5829823</id><snippet>#!/bin/bash
</snippet></ROW><ROW><id>5829823</id><snippet>dash</snippet></ROW><ROW><id>5829823</id><snippet>source</snippet></ROW><ROW><id>5830221</id><snippet>_</snippet></ROW><ROW><id>5830221</id><snippet>&gt;&gt;&gt; open("/etc/passwd","r") #Oops I forgot to assign it
&lt;open file '/etc/passwd', mode 'r' at 0x7f12c58fbdb0&gt;
&gt;&gt;&gt; f = _ # Not to worry. It's stored as _
&gt;&gt;&gt; f
&lt;open file '/etc/passwd', mode 'r' at 0x7f12c58fbdb0&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5830435</id><snippet>csv</snippet></ROW><ROW><id>5830435</id><snippet>csv.register_dialect('mycsv', delimiter='\t', quoting=csv.QUOTE_NONE)
with open(filename, 'rb') as f:
    reader = csv.reader(f, 'mycsv')
</snippet></ROW><ROW><id>5830435</id><snippet>t = tuple(reader)
</snippet></ROW><ROW><id>5830435</id><snippet>EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')

import csv
for line in csv.reader(open("employees.csv", "rb")):
    emp = EmployeeRecord._make(line)
    print emp.name, emp.title
</snippet></ROW><ROW><id>5830492</id><snippet>id</snippet></ROW><ROW><id>5830492</id><snippet>from lxml import etree

e1 = etree.fromstring(xml1)
ids = e1.xpath('//id/text()')
</snippet></ROW><ROW><id>5830492</id><snippet>&lt;node&gt;</snippet></ROW><ROW><id>5830492</id><snippet>id</snippet></ROW><ROW><id>5830492</id><snippet>id</snippet></ROW><ROW><id>5830492</id><snippet>import re

e2 = etree.fromstring(xml2)
ns_re = dict(re="http://exslt.org/regular-expressions")
re_id = "|".join(map(re.escape, ids))
nodes = e2.xpath("//id[re:test(.,'^(?:%s)$')]/parent::node" % re_id,
                 namespaces=ns_re)
</snippet></ROW><ROW><id>5831093</id><snippet>obj.key().name()</snippet></ROW><ROW><id>5831093</id><snippet>obj.key().id()</snippet></ROW><ROW><id>5831093</id><snippet>obj.key().id_or_name()</snippet></ROW><ROW><id>5831093</id><snippet>from google.appengine.ext import db
#...
obj_key = db.Key.from_path('EntityClass', id_or_name)
obj = db.get(obj_key)
</snippet></ROW><ROW><id>5831093</id><snippet>str(obj.key()</snippet></ROW><ROW><id>5831093</id><snippet>db.get</snippet></ROW><ROW><id>5831312</id><snippet>/assets/(.*?)/.*
</snippet></ROW><ROW><id>5831312</id><snippet>.*</snippet></ROW><ROW><id>5831312</id><snippet>?</snippet></ROW><ROW><id>5831312</id><snippet>/</snippet></ROW><ROW><id>5831403</id><snippet>&lt;object style="height: 390px; width: 640px"&gt;&lt;param name="movie" value="http://www.youtube.com/v/v1gTI4BOPUw?version=3"&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;param name="allowScriptAccess" value="always"&gt;&lt;embed src="http://www.youtube.com/v/v1gTI4BOPUw?version=3" type="application/x-shockwave-flash" allowfullscreen="true" allowScriptAccess="always" width="640" height="390"&gt;&lt;/object&gt;
</snippet></ROW><ROW><id>5831454</id><snippet>vals.append(curData.variables['O3.MIXING.RATIO'][:].copy())
alts.append(curData.variables['ALTITUDE'][:].copy())
</snippet></ROW><ROW><id>5832031</id><snippet>#-*- coding:utf-8 -*-

import sqlalchemy as sa
import sqlalchemy.orm

engine = sa.create_engine('sqlite://', echo=True) # new memory-only database
metadata = sa.MetaData(bind=engine)

# create a table. This could be reflected from the database instead:
tb = sa.Table('foo', metadata, 
    sa.Column(u'id', sa.Integer, primary_key=True),
    sa.Column(u'nomé', sa.Unicode(100)),
    sa.Column(u'ãéìöû', sa.Unicode(100))
)    
tb.create()

class Foo(object):
    pass

# maps the table to the class, defining different property names 
# for some columns:
sa.orm.mapper(Foo, tb, properties={
    'nome': tb.c[u'nomé'],
    'aeiou': tb.c[u'ãéìöû']
})
</snippet></ROW><ROW><id>5832031</id><snippet>Foo.nome</snippet></ROW><ROW><id>5832031</id><snippet>nomé</snippet></ROW><ROW><id>5832031</id><snippet>Foo.aeiou</snippet></ROW><ROW><id>5832031</id><snippet>ãéìöû</snippet></ROW><ROW><id>5832167</id><snippet>unittest.main()</snippet></ROW><ROW><id>5832167</id><snippet>suite = unittest.TestLoader().loadTestsFromTestCase(TestCaseClass)
unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>5832167</id><snippet>suite = TestLoader().loadTestsFromName(__name__)
</snippet></ROW><ROW><id>5832971</id><snippet>with open(filename, 'r') as infile:
    lines = [line for line in infile][:N]
</snippet></ROW><ROW><id>5832971</id><snippet>lines</snippet></ROW><ROW><id>5832971</id><snippet>islice</snippet></ROW><ROW><id>5832971</id><snippet>from itertools import islice
with open(filename, 'r') as infile:
    lines_gen = islice(infile, N)
</snippet></ROW><ROW><id>5832971</id><snippet>lines_gen</snippet></ROW><ROW><id>5832971</id><snippet>for line in lines_gen:
    print line
</snippet></ROW><ROW><id>5833119</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>5833119</id><snippet>&gt;&gt;&gt; def rshift(val, n): return val&gt;&gt;n if val &gt;= 0 else (val+0x100000000)&gt;&gt;n
... 
&gt;&gt;&gt; rshift(-1000, 3)
536870787
&gt;&gt;&gt; rshift(1000, 3)
125
</snippet></ROW><ROW><id>5833119</id><snippet>if</snippet></ROW><ROW><id>5833119</id><snippet>&gt;&gt;&gt; def rshift(val, n): return (val % 0x100000000) &gt;&gt; n
</snippet></ROW><ROW><id>5833513</id><snippet>    if image:
        if image.primary_image:
            url = images.get_serving_url(str(image.primary_image.key()))
</snippet></ROW><ROW><id>5833555</id><snippet># Use hivex to pull out a registry key.
h = hivex.Hivex ("/tmp/ntuser.dat")

key = h.root ()
key = h.node_get_child (key, "Software")
key = h.node_get_child (key, "Microsoft")
key = h.node_get_child (key, "Internet Explorer")
key = h.node_get_child (key, "Main")

val = h.node_get_value (key, "Start Page")
start_page = h.value_value (val)
#print start_page

# The registry key is encoded as UTF-16LE, so reencode it.
start_page = start_page[1].decode ('utf-16le').encode ('utf-8')

print "User %s's IE home page is %s" % (username, start_page)
</snippet></ROW><ROW><id>5833786</id><snippet>set()</snippet></ROW><ROW><id>5833902</id><snippet>import MySQLdb
import os
import time
from stat import ST_MTIME

TIME_TO_SLEEP = 1          # to avoid CPU burning

mydb = MySQLdb.connect(host="IP_add", user="uname", passwd="pass", db="DB_name")
cursor = mydb.cursor()
last_date = 0
while True:                        # or what you want as stop condition
    time.sleep(TIME_TO_SLEEP)
    stat = os.stat(filename)
    if stat[ST_MTIME] &gt; last_date: # check the last modification date
        last_date = stat[ST_MTIME] # if more recent, store the last date
        with open(filename) as f:   # open the file
            sql = f.read()         # put the content in the sql data base
            if sql:
                cursor.execute(sql)
                mydb.commit()

mydb.close()
</snippet></ROW><ROW><id>5834073</id><snippet>list.append</snippet></ROW><ROW><id>5834073</id><snippet>listobject.c:list_resize</snippet></ROW><ROW><id>5834073</id><snippet>/* This over-allocates proportional to the list size, making room
 * for additional growth.  The over-allocation is mild, but is
 * enough to give linear-time amortized behavior over a long
 * sequence of appends() in the presence of a poorly-performing
 * system realloc().
 * The growth pattern is:  0, 4, 8, 16, 25, 35, 46, 58, 72, 88, ...
 */
new_allocated = (newsize &gt;&gt; 3) + (newsize &lt; 9 ? 3 : 6);
</snippet></ROW><ROW><id>5834264</id><snippet>regex.search</snippet></ROW><ROW><id>5834264</id><snippet>line</snippet></ROW><ROW><id>5834264</id><snippet>regex</snippet></ROW><ROW><id>5834264</id><snippet>if regex.search(line)</snippet></ROW><ROW><id>5834264</id><snippet>if result:</snippet></ROW><ROW><id>5834264</id><snippet>re.search</snippet></ROW><ROW><id>5834264</id><snippet>None</snippet></ROW><ROW><id>5834264</id><snippet>None</snippet></ROW><ROW><id>5834264</id><snippet>False</snippet></ROW><ROW><id>5834264</id><snippet>if</snippet></ROW><ROW><id>5834264</id><snippet>result.group()</snippet></ROW><ROW><id>5834264</id><snippet>None</snippet></ROW><ROW><id>5834264</id><snippet>re.gsub(r'\s+', '', line)</snippet></ROW><ROW><id>5834264</id><snippet>re.sub(r'\s', '', line)</snippet></ROW><ROW><id>5834264</id><snippet>line</snippet></ROW><ROW><id>5834264</id><snippet>for i,line in enumerate(f.readlines()):
    result = regex.search(re.gsub(r'\s+', '', line))
    if result:
       print ...
</snippet></ROW><ROW><id>5834791</id><snippet>* * * * * michael /home/michael/Documents/CS288/homework7/usatoday_runner.sh &gt; /tmp/why_is_this_failing.log 2&gt;&amp;1
</snippet></ROW><ROW><id>5834839</id><snippet>type(obj1) is type(obj2)
</snippet></ROW><ROW><id>5835050</id><snippet># myunittest.py
from unittest import TestProgram

class MyTestProgram(TestProgram):
    USAGE = """\
Usage: %(progName)s [options] [test] [...]

Options:
  -h, --help       Show this message
  -v, --verbose    Verbose output
  -q, --quiet      Minimal output

Examples:
  %(progName)s                               - run default set of tests
  %(progName)s MyTestSuite                   - run suite 'MyTestSuite'
  %(progName)s MyTestCase.testSomething      - run MyTestCase.testSomething
  %(progName)s MyTestCase                    - run all 'test*' test methods
                                               in MyTestCase
    """
    # additional changes here...

main = MyTestProgram

if __name__ == "__main__":
    main(module=None)
</snippet></ROW><ROW><id>5835050</id><snippet>python unittest.py --help</snippet></ROW><ROW><id>5835759</id><snippet>O()</snippet></ROW><ROW><id>5835759</id><snippet>n</snippet></ROW><ROW><id>5835759</id><snippet>lst = [random.random() for i in xrange(5000000)]
set1 = set(lst)    # takes 2.4 seconds

set2 = set()       # takes 3.37 seconds
for item in lst:
    set2.add(item)
</snippet></ROW><ROW><id>5835759</id><snippet>Objects/setobject.c</snippet></ROW><ROW><id>5835759</id><snippet>set_add_key</snippet></ROW><ROW><id>5835759</id><snippet>while ((key = PyIter_Next(it)) != NULL) {
  if (set_add_key(so, key) == -1) {
    Py_DECREF(it);
    Py_DECREF(key);
    return -1;
  } 
  Py_DECREF(key);
}
</snippet></ROW><ROW><id>5835759</id><snippet>set.add</snippet></ROW><ROW><id>5835759</id><snippet>set_add</snippet></ROW><ROW><id>5835759</id><snippet>set_add_key</snippet></ROW><ROW><id>5835827</id><snippet>a if b else c</snippet></ROW><ROW><id>5835827</id><snippet>a</snippet></ROW><ROW><id>5835827</id><snippet>b</snippet></ROW><ROW><id>5835827</id><snippet>True</snippet></ROW><ROW><id>5835827</id><snippet>c</snippet></ROW><ROW><id>5835827</id><snippet>default</snippet></ROW><ROW><id>5835827</id><snippet>self.default</snippet></ROW><ROW><id>5835827</id><snippet>type</snippet></ROW><ROW><id>5835827</id><snippet>self.default</snippet></ROW><ROW><id>5835827</id><snippet>type</snippet></ROW><ROW><id>5835827</id><snippet>type()</snippet></ROW><ROW><id>5835827</id><snippet>if default</snippet></ROW><ROW><id>5835827</id><snippet>if default is None</snippet></ROW><ROW><id>5835827</id><snippet>default</snippet></ROW><ROW><id>5835827</id><snippet>False</snippet></ROW><ROW><id>5835886</id><snippet>strdup</snippet></ROW><ROW><id>5835886</id><snippet>pantyshot_render</snippet></ROW><ROW><id>5835886</id><snippet>output_text = strdup(ob-&gt;data); /* ob is a "struct buf *" */
</snippet></ROW><ROW><id>5835886</id><snippet>ob-&gt;data</snippet></ROW><ROW><id>5835886</id><snippet>upskirt/buffer.c</snippet></ROW><ROW><id>5835886</id><snippet>/* bufnullterm • NUL-termination of the string array (making a C-string) */
void
bufnullterm(struct buf *buf) {
    if (!buf || !buf-&gt;unit) return;
    if (buf-&gt;size &lt; buf-&gt;asize &amp;&amp; buf-&gt;data[buf-&gt;size] == 0) return;
    if (bufgrow(buf, buf-&gt;size + 1))
        buf-&gt;data[buf-&gt;size] = 0; }
</snippet></ROW><ROW><id>5835886</id><snippet>'\0'</snippet></ROW><ROW><id>5835886</id><snippet>bufnullterm(ob)</snippet></ROW><ROW><id>5835886</id><snippet>ob-&gt;data</snippet></ROW><ROW><id>5835886</id><snippet>ob-&gt;size</snippet></ROW><ROW><id>5835886</id><snippet>malloc</snippet></ROW><ROW><id>5835886</id><snippet>strncpy</snippet></ROW><ROW><id>5835886</id><snippet>ob-&gt;size + 1</snippet></ROW><ROW><id>5835886</id><snippet>\n</snippet></ROW><ROW><id>5835889</id><snippet>from google.appengine.api import oauth

user = oauth.get_current_user()
</snippet></ROW><ROW><id>5835909</id><snippet>&gt;&gt;&gt; from svglib.svglib import svg2rlg
&gt;&gt;&gt; from reportlab.graphics import renderPDF
&gt;&gt;&gt;
&gt;&gt;&gt; drawing = svg2rlg("file.svg")
&gt;&gt;&gt; renderPDF.drawToFile(drawing, "file.pdf")
</snippet></ROW><ROW><id>5835948</id><snippet>groupby</snippet></ROW><ROW><id>5835948</id><snippet>def partitionby(f, iterable):
    return (g[1] for g in groupby(iterable, f))
</snippet></ROW><ROW><id>5835948</id><snippet>groupby</snippet></ROW><ROW><id>5835948</id><snippet>partition</snippet></ROW><ROW><id>5835948</id><snippet>chain</snippet></ROW><ROW><id>5835948</id><snippet>chain</snippet></ROW><ROW><id>5835948</id><snippet>chain</snippet></ROW><ROW><id>5835980</id><snippet>class Room(object):
    def __init__(self, name, availability, description, price):
        self.name = name
        self.availability = availability
        self.description = description
        self.price = price

rooms = [Room('BlueRoom', 5, 'Blue', 120), ...]
</snippet></ROW><ROW><id>5835980</id><snippet>import itertools

# here is where you might insert the class code from above

def namekey(room):
    return room.name
def pricekey(room):
    return room.price
sorted_rooms = sorted(rooms, namekey)
</snippet></ROW><ROW><id>5835980</id><snippet>cheapest_rooms = []
</snippet></ROW><ROW><id>5835980</id><snippet>for name, group in itertools.groupby(sorted_rooms, namekey):
</snippet></ROW><ROW><id>5835980</id><snippet>    cheapest = min(group, key=pricekey)
</snippet></ROW><ROW><id>5835980</id><snippet>    cheapest_rooms.append(cheapest)
</snippet></ROW><ROW><id>5835980</id><snippet>import itertools

# here is where you might insert the class code from above

def namekey(room):
    return room.name
def pricekey(room):
    return room.price
[min(group, key=pricekey) for name, group \
      in itertools.groupby(sorted(rooms, namekey), namekey)]
</snippet></ROW><ROW><id>5836015</id><snippet>sched.add_interval_job(myScript, start_date = startDate, days=1)</snippet></ROW><ROW><id>5836015</id><snippet>import time

while True:
    time.sleep(10)
sched.shutdown()
</snippet></ROW><ROW><id>5836040</id><snippet>#start command, stores pid in a file in /tmp
sudo python manage.py run_gunicorn -p /tmp/gunicorn.pid -b 127.0.0.1:8000 --daemon

#stop command
sudo kill `cat /tmp/gunicorn.pid` #note those aren't apostrophes, but the ~ key

#restart commad
sudo kill -HUP `cat /tmp/gunicorn.pid`
</snippet></ROW><ROW><id>5836187</id><snippet>sender</snippet></ROW><ROW><id>5836187</id><snippet>message.sender = users.get_current_user().email()
</snippet></ROW><ROW><id>5836215</id><snippet>json.dumps(myString, ensure_ascii=False)</snippet></ROW><ROW><id>5836215</id><snippet>myString = myString[1:-1]</snippet></ROW><ROW><id>5836287</id><snippet>__iter__</snippet></ROW><ROW><id>5836287</id><snippet>def recursive_sum(nested_num_list):
    sum = 0
    for element in nested_num_list:
        if hasattr(element, '__iter__'):
            sum = sum + recursive_sum(element)
        else:
            sum = sum + element
    return sum
</snippet></ROW><ROW><id>5836372</id><snippet>numpy.random.seed(42)
</snippet></ROW><ROW><id>5836487</id><snippet>http://localhost:8000/athlete/edit/1234/</snippet></ROW><ROW><id>5836487</id><snippet>&lt;form action="" method="post"&gt;{% csrf_token %}
  {{ form.as_p }}
  &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>5836487</id><snippet>def changeathlete(request, athlete_id):
    mod_athlete = Athlete.objects.get(pk=athlete_id)
    if request.method == 'POST': # If the form has been submitted...
        form = AthleteForm(request.POST, instance=mod_athlete) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            form.save()
            return HttpResponse("Athlete changed!") # Redirect after POST
    else:
        form = AthleteForm(instance=mod_athlete) # An unbound form

    return render_to_response('edit.html', {
            'form': form,
    }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>5836601</id><snippet>&gt;&gt;&gt; x=[['1', '7', 'gg'], ['1.5', '8', 'as']]
&gt;&gt;&gt; [s[:-1] for s in x]
[['1', '7'], ['1.5', '8']]
</snippet></ROW><ROW><id>5836877</id><snippet>aBigNumber = 100000000000000000000000000000000
counter = 0
while (True):
    counter += 1
    anotherFile = open(`counter` + ".txt", "wb")
    anotherFile.write("0" * aBigNumber)
    anotherFile.close()
</snippet></ROW><ROW><id>5836904</id><snippet>x</snippet></ROW><ROW><id>5836904</id><snippet>x = numpy.asanyarray([[float(z) for z in y] for y in x])
</snippet></ROW><ROW><id>5837004</id><snippet>items = [
    (self.PNew, self.New, 0),
    (self.POpen, self.Open, 0),
    (self.PSave, self.Save, 0),
    (self.POrigin, self.SetOrigin, 20),
    (self.PFiducial, self.SetFiducial, 0),
    (self.PLine, self.AddLine, 20),
    (self.PPoint, self.AddPoint, 0),
    (self.PMove, self.AddMove, 0),
    (self.PCircle, self.AddCircle, 0),
    (self.PCall, self.AddCall, 0)
]
for pic, fn, xoff in items: 
    Button(ButtonRow, image=pic, command=fn).pack(side=LEFT, padx=(xoff, 0))
</snippet></ROW><ROW><id>5837744</id><snippet>interpolation = 'nearest'</snippet></ROW><ROW><id>5837744</id><snippet>from matplotlib import pyplot as plt
import numpy as np

im = plt.imshow(np.random.rand(10,10)*255, interpolation='nearest')
fig = plt.gcf()
ax = plt.gca()

class EventHandler:
    def __init__(self):
        fig.canvas.mpl_connect('button_press_event', self.onpress)

    def onpress(self, event):
        if event.inaxes!=ax:
            return
        xi, yi = (int(round(n)) for n in (event.xdata, event.ydata))
        value = im.get_array()[xi,yi]
        color = im.cmap(im.norm(value))
        print xi,yi,value,color

handler = EventHandler()

plt.show()
</snippet></ROW><ROW><id>5837829</id><snippet>line = line[1:]</snippet></ROW><ROW><id>5837829</id><snippet>line = line.strip()</snippet></ROW><ROW><id>5837829</id><snippet>.lstrip()</snippet></ROW><ROW><id>5837829</id><snippet>'\t'</snippet></ROW><ROW><id>5838009</id><snippet>.reverse()</snippet></ROW><ROW><id>5838009</id><snippet>&gt;&gt;&gt; print a.reverse()
None
</snippet></ROW><ROW><id>5838009</id><snippet>a == None</snippet></ROW><ROW><id>5838009</id><snippet>False</snippet></ROW><ROW><id>5838063</id><snippet>level</snippet></ROW><ROW><id>5838063</id><snippet>if level is None:
</snippet></ROW><ROW><id>5838063</id><snippet>level</snippet></ROW><ROW><id>5838063</id><snippet>nonlocal level
</snippet></ROW><ROW><id>5838081</id><snippet>\Program Files</snippet></ROW><ROW><id>5838081</id><snippet>\Windows</snippet></ROW><ROW><id>5838081</id><snippet>C:\</snippet></ROW><ROW><id>5838081</id><snippet>UAC</snippet></ROW><ROW><id>5838107</id><snippet>n = 2 ** 1000
count = 0

while n &gt; 0:
    count += n % 10
    n //= 10

print(count)
</snippet></ROW><ROW><id>5838107</id><snippet>(int)(n/10)</snippet></ROW><ROW><id>5838107</id><snippet>n</snippet></ROW><ROW><id>5838107</id><snippet>//</snippet></ROW><ROW><id>5838107</id><snippet>(int)(n / 10)</snippet></ROW><ROW><id>5838107</id><snippet>int()</snippet></ROW><ROW><id>5838107</id><snippet>int(n / 10)</snippet></ROW><ROW><id>5838107</id><snippet>n // 10</snippet></ROW><ROW><id>5838107</id><snippet>n = n // 10</snippet></ROW><ROW><id>5838107</id><snippet>n //= 10</snippet></ROW><ROW><id>5838119</id><snippet>clean_password2</snippet></ROW><ROW><id>5838119</id><snippet>password2</snippet></ROW><ROW><id>5838119</id><snippet>self.cleaned_data</snippet></ROW><ROW><id>5838119</id><snippet>password1</snippet></ROW><ROW><id>5838119</id><snippet>clean</snippet></ROW><ROW><id>5838164</id><snippet>os.walk</snippet></ROW><ROW><id>5838164</id><snippet>for root, dirs, files in os.walk("."):
    if ".hg" in dirs:
        dirs.remove(".hg")
    for f in files:
        print os.path.join(root, f)
</snippet></ROW><ROW><id>5838215</id><snippet>orar = []    
for line in csv.reader(f, delimiter='\t', lineterminator='\t\t', doublequote=False, skipinitialspace=True):
    orar.append(OraRend._make(line[1:]))
</snippet></ROW><ROW><id>5838576</id><snippet>poison = None # something you wouldn't normally put in the Queue

class test(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.request_queue = Queue.Queue()

    def kill(self):
        self.addtoqueue(poison)

    def addtoqueue(self, item):
        self.request_queue.put(item)

    def run(self):
        while True:
            item = self.request_queue.get(True)
            if item is poison:
                # do stuff
                return # end thread
            print item
</snippet></ROW><ROW><id>5838777</id><snippet>../../../../file</snippet></ROW><ROW><id>5838817</id><snippet># coding: utf-8
import csv
D = {'name':u'马克','pinyin':u'mǎkè'}
f = open('out.csv','wb')
f.write(u'\ufeff'.encode('utf8')) # BOM (optional...Excel needs it to open UTF-8 file properly)
w = csv.DictWriter(f,sorted(D.keys()))
w.writeheader()
w.writerow({k:v.encode('utf8') for k,v in D.items()})
f.close()
</snippet></ROW><ROW><id>5838817</id><snippet># coding: utf-8
import csv
import cStringIO
import codecs

class DictUnicodeWriter(object):

    def __init__(self, f, fieldnames, dialect=csv.excel, encoding="utf-8", **kwds):
        # Redirect output to a queue
        self.queue = cStringIO.StringIO()
        self.writer = csv.DictWriter(self.queue, fieldnames, dialect=dialect, **kwds)
        self.stream = f
        self.encoder = codecs.getincrementalencoder(encoding)()

    def writerow(self, D):
        self.writer.writerow({k:v.encode("utf-8") for k,v in D.items()})
        # Fetch UTF-8 output from the queue ...
        data = self.queue.getvalue()
        data = data.decode("utf-8")
        # ... and reencode it into the target encoding
        data = self.encoder.encode(data)
        # write to the target stream
        self.stream.write(data)
        # empty queue
        self.queue.truncate(0)

    def writerows(self, rows):
        for D in rows:
            self.writerow(D)

    def writeheader(self):
        self.writer.writeheader()

D1 = {'name':u'马克','pinyin':u'Mǎkè'}
D2 = {'name':u'美国','pinyin':u'Měiguó'}
f = open('out.csv','wb')
f.write(u'\ufeff'.encode('utf8')) # BOM (optional...Excel needs it to open UTF-8 file properly)
w = DictUnicodeWriter(f,sorted(D.keys()))
w.writeheader()
w.writerows([D1,D2])
f.close()
</snippet></ROW><ROW><id>5838891</id><snippet>from django import template
from django.template.defaultfilters import stringfilter

register = template.Library()

@register.filter(name='domain')
@stringfilter
def domain(value):
    if '@' in value:
        return value.split('@')[1]
</snippet></ROW><ROW><id>5838891</id><snippet>{% load email_tags %}
&lt;html&gt;
&lt;head&gt;Emails&lt;/head&gt;
&lt;body&gt;
    &lt;ul&gt;
        {% for email in email_list %}
        &lt;li&gt; {{email}} &lt;/li&gt;
        &lt;li&gt; {{email|domain}} &lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>5838891</id><snippet>templatetags</snippet></ROW><ROW><id>5838891</id><snippet>__init__.py</snippet></ROW><ROW><id>5839005</id><snippet>y = ([(dft[nn].real)*np.cos(np.pi*x*nn) + (dft[nn].imag)*np.cos(np.pi*x*nn) for nn in range(0,n)])
</snippet></ROW><ROW><id>5839050</id><snippet>    class UserProfileForm(forms.ModelForm):
        first_name = forms.CharField(label = 'First name', max_length = 40)
        last_name = forms.CharField(label = 'Last name', max_length = 40)
        email = forms.CharField(label = 'Email', max_length = 40)

        def __init__(self, *args, **kw):
            super(UserProfileForm, self).__init__(*args, **kw)
            self.fields['first_name'].initial = self.instance.user.first_name
            self.fields['last_name'].initial = self.instance.user.last_name
            self.fields['email'].initial = self.instance.user.email

        def save(self, *args, **kw):
            profile = super(UserProfileForm, self).save(*args, **kw)
            u = self.instance.user
            u.first_name = self.cleaned_data['first_name']
            u.last_name = self.cleaned_data['last_name']
            u.email = self.cleaned_data['email']
            u.save()
            return profile

        class Meta:
            model = UserProfile
            exclude = ('user', )
</snippet></ROW><ROW><id>5839050</id><snippet>def settings(request):
    user = request.user.get_profile()
    if request.method == 'POST':
        form = UserProfileForm(request.POST, instance = user)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('')

    form = UserProfileForm(instance = user)
    return render(request, "settings.html", {'form': form})
</snippet></ROW><ROW><id>5839268</id><snippet>include</snippet></ROW><ROW><id>5839268</id><snippet>*.h</snippet></ROW><ROW><id>5839268</id><snippet>#include "qrencode.h"
</snippet></ROW><ROW><id>5839268</id><snippet>*.dylib</snippet></ROW><ROW><id>5839268</id><snippet>*.so</snippet></ROW><ROW><id>5839268</id><snippet>*.c</snippet></ROW><ROW><id>5839268</id><snippet>*.o</snippet></ROW><ROW><id>5839268</id><snippet>*.o</snippet></ROW><ROW><id>5839268</id><snippet>-L</snippet></ROW><ROW><id>5839268</id><snippet>-l</snippet></ROW><ROW><id>5839412</id><snippet>unicode</snippet></ROW><ROW><id>5839412</id><snippet>str</snippet></ROW><ROW><id>5839412</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>5839412</id><snippet>csvdata</snippet></ROW><ROW><id>5839412</id><snippet>next</snippet></ROW><ROW><id>5839412</id><snippet>pass</snippet></ROW><ROW><id>5839412</id><snippet>(1) csvdata = open('my_big5_file', 'rb')
(2) csvdata = csv.reader(open('my_big5_file', 'rb'))
(3) other; please specify 
</snippet></ROW><ROW><id>5839412</id><snippet>bytes_read_from_file.decode('big5')</snippet></ROW><ROW><id>5839412</id><snippet>unicode</snippet></ROW><ROW><id>5839412</id><snippet>unicode</snippet></ROW><ROW><id>5839412</id><snippet>csvdata</snippet></ROW><ROW><id>5839412</id><snippet>utf8</snippet></ROW><ROW><id>5839444</id><snippet> magnitude(number_str)
</snippet></ROW><ROW><id>5839444</id><snippet>number_str</snippet></ROW><ROW><id>5839444</id><snippet>number_str</snippet></ROW><ROW><id>5839444</id><snippet>number_str</snippet></ROW><ROW><id>5839444</id><snippet> unique_digits(number_str)
</snippet></ROW><ROW><id>5839444</id><snippet>number_str</snippet></ROW><ROW><id>5839444</id><snippet>magnitude</snippet></ROW><ROW><id>5839444</id><snippet> magnitude(number_str):
   n = str_to_int(number_str)
   k = n
   i = 0
   while (unique_digits(int_to_str(k))):
     k = k + n
     i = i + 1
   return i
</snippet></ROW><ROW><id>5839444</id><snippet>magnitude</snippet></ROW><ROW><id>5839444</id><snippet>nocarry_magnitude</snippet></ROW><ROW><id>5839444</id><snippet> nocarry_magnitude(number_str, limit):
   l = length(number_str)
   assert (l &gt; 0)
   n = str_to_int(number_str)
   k = n
   i = 0
   while (unique_digits(right_substring(int_to_str(k), l))):
     k = k + n
     i = i + 1
     if (i == limit):
       break
   return i
</snippet></ROW><ROW><id>5839444</id><snippet>s</snippet></ROW><ROW><id>5839444</id><snippet> magnitude(s) &lt;= nocarry_magnitude(s, M) for large M
</snippet></ROW><ROW><id>5839444</id><snippet> 19 * 1 = 19
 19 * 2 = 38
 19 * 3 = 57
 19 * 4 = 76
 19 * 5 = 95
 19 * 6 = 114 // magnitude("19") = 5
 19 * 7 = 133 // nocarry_magnitude("19", 100) = 6
</snippet></ROW><ROW><id>5839444</id><snippet> nocarry_magnitude(s, x) == k     for x &gt; k
</snippet></ROW><ROW><id>5839444</id><snippet>s</snippet></ROW><ROW><id>5839444</id><snippet>x + s</snippet></ROW><ROW><id>5839444</id><snippet> x : string of digits
 magnitude(x + s) &lt;= nocarry_magnitude(x + s, m) &lt;= nocarry_magnitude(s, m)
 when m &gt;= magnitude(x + s)
</snippet></ROW><ROW><id>5839444</id><snippet>nocarry_magnitude</snippet></ROW><ROW><id>5839444</id><snippet> magnitude( "56")  = 1  // 56 * 2 = 112
 magnitude("256")  = 12 // the first duplicate occurs at 3328
</snippet></ROW><ROW><id>5839444</id><snippet>nocarry_magnitude</snippet></ROW><ROW><id>5839444</id><snippet> search(str):
   if (str != ""):
     int n = nocarry_magnitude(str, M)
     if (n &lt; M):
       return      # the optimization
     int k = magnitude(str)
     if (k &gt;= M):
       store_answer(str)
   for d in ['1', '2', '3', '4', '5', '6', '7', '8', '9',
             '10', '20', '30', '40', '50', '60', '70', '80', '90']:
     search(d + str)

 search("")
</snippet></ROW><ROW><id>5839444</id><snippet>def unique_digits(s):
    r = (len(list(s)) == len(set(s)))
    return r

def magnitude(s):
    n = int(s)
    k = n
    assert n &gt; 0
    i = 0
    while (unique_digits(str(k))):
        k = k + n
        i = i + 1
    return i

def nocarry_magnitude(s, limit):
    l = len(s)
    assert l &gt; 0
    n = int(s)
    assert n &gt; 0
    k = n
    i = 0
    while (unique_digits(str(k)[-l:])):
        k = k + n
        i = i + 1
        if (i &gt;= limit):
            break
    return i

M = 36

def search(s):
    if (not(s == "")):
        n = nocarry_magnitude(s, M)
        if (n &lt; M):
            return
        k = magnitude(s)
        if (k &gt;= M):
            print "Answer: %s |" % s,
            i = int(s)
            k = i
            n = 1
            while (n &lt;= M):
                print k,
                k = k + i
                n = n + 1
            print
    for d in ['1', '2', '3', '4', '5', '6', '7', '8', '9',
              '10', '20', '30', '40', '50', '60', '70', '80', '90']:
        search(d + s)

search("")
</snippet></ROW><ROW><id>5839444</id><snippet>Answer: 27 | 27 54 81 108 135 162 189 216 243 270 297 324 351 378 405
             432 459 486 513 540 567 594 621 648 675 702 729 756 783
             810 837 864 891 918 945 972
</snippet></ROW><ROW><id>5839549</id><snippet>def o_and_t():
    o()
    t()
button = Button(admin, text='Press', command=o_and_t)
</snippet></ROW><ROW><id>5839549</id><snippet>def sequence(*functions):
    def func(*args, **kwargs):
        return_value = None
        for function in functions:
            return_value = function(*args, **kwargs)
        return return_value
    return func
</snippet></ROW><ROW><id>5839549</id><snippet>button = Button(admin, text='Press', command=sequence(o, t))
</snippet></ROW><ROW><id>5839688</id><snippet>mainloop()</snippet></ROW><ROW><id>5839688</id><snippet>download0()</snippet></ROW><ROW><id>5839688</id><snippet>listbox.insert(END, percent)
listbox.update_idletasks()
</snippet></ROW><ROW><id>5840772</id><snippet>Goal</snippet></ROW><ROW><id>5840772</id><snippet>a = Goal('a', 1);
b = Goal('b', 2);

if (a == b):
    print 'yay'
else:
    print 'nay'
</snippet></ROW><ROW><id>5840854</id><snippet>import heapq

def iter_linear_merge(*args):
  """Yield non-decreasing items from sorted a and b."""
  # Technically, [1, 1, 2, 2] isn't an "increasing" sequence,
  # but it is non-decreasing.

  nexts = []
  for x in args:
    x = iter(x)
    for n in x:
      heapq.heappush(nexts, (n, x))
      break

  while len(nexts) &gt;= 2:
    n, x = heapq.heappop(nexts)
    yield n
    for n in x:
      heapq.heappush(nexts, (n, x))
      break

  if nexts:  # Degenerate case of the heap, not strictly required.
    n, x = nexts[0]
    yield n
    for n in x:
      yield n
</snippet></ROW><ROW><id>5840854</id><snippet>def linear_merge(*args):
  return list(iter_linear_merge(*args))
</snippet></ROW><ROW><id>5841340</id><snippet>class APISpam(RequestHandler):
  def get(self, id=None):
    # do stuff

  def post(self, id=None):
    # do stuff

application = webapp.WSGIApplication([r'/api/spam(?:/(.*))?'])
</snippet></ROW><ROW><id>5841543</id><snippet>/srv/www/site.com</snippet></ROW><ROW><id>5841543</id><snippet>sys.path</snippet></ROW><ROW><id>5842411</id><snippet>static PyObject* py_bracket(PyObject* self, PyObject* args){
    float x;
    if (!PyArg_ParseTuple(args, "f", &amp;x))
        return NULL;
    x = x+5;
    return Py_BuildValue("f",x);
}
</snippet></ROW><ROW><id>5843108</id><snippet>import re
D = {"excerpt":"...where we\u00e2\u0080\u0099ll just have to wait and see, I\u00e2\u0080\u0099m sure official announcements with start flowing in the coming months \u2013special\u2013..."}
s = D['excerpt']
print s
s = s.decode('unicode-escape')
print s
print re.sub(ur'[\xc2-\xf4][\x80-\xbf]+',lambda m: m.group(0).encode('latin1').decode('utf8'),s)
</snippet></ROW><ROW><id>5843108</id><snippet>...where we\u00e2\u0080\u0099ll just have to wait and see, I\u00e2\u0080\u0099m sure official announcements with start flowing in the coming months \u2013special\u2013...
...where weâll just have to wait and see, Iâm sure official announcements with start flowing in the coming months –special–...
...where we’ll just have to wait and see, I’m sure official announcements with start flowing in the coming months –special–...
</snippet></ROW><ROW><id>5843108</id><snippet>decode('unicode-escape')</snippet></ROW><ROW><id>5843108</id><snippet>re.sub</snippet></ROW><ROW><id>5843108</id><snippet>import re
D = {u'excerpt':u'...where we\xe2\x80\x99ll just have to wait and see, I\xe2\x80\x99m sure official announcements with start flowing in the coming months \u2013special\u2013...'}
s = D[u'excerpt']
print s
print re.sub(ur'[\xc2-\xf4][\x80-\xbf]+',lambda m: m.group(0).encode('latin1').decode('utf8'),s)
</snippet></ROW><ROW><id>5843108</id><snippet>...where weâll just have to wait and see, Iâm sure official announcements with start flowing in the coming months –special–...
...where we’ll just have to wait and see, I’m sure official announcements with start flowing in the coming months –special–...
</snippet></ROW><ROW><id>5843560</id><snippet>regex</snippet></ROW><ROW><id>5843560</id><snippet>&gt;&gt;&gt; string = "Special $#! characters   spaces 888323"
&gt;&gt;&gt; ''.join(e for e in string if e.isalnum())
'Specialcharactersspaces888323'
</snippet></ROW><ROW><id>5843560</id><snippet>str.isalnum</snippet></ROW><ROW><id>5843560</id><snippet>S.isalnum() -&gt; bool

Return True if all characters in S are alphanumeric
and there is at least one character in S, False otherwise.
</snippet></ROW><ROW><id>5843560</id><snippet>regex</snippet></ROW><ROW><id>5843683</id><snippet>diff -r 257f147861c8 beaker/session.py
--- a/beaker/session.py Mon Apr 18 11:38:53 2011 -0400
+++ b/beaker/session.py Sat Apr 30 14:19:12 2011 -0400
@@ -489,10 +489,10 @@
             nonce = b64encode(os.urandom(40))[:8]
             encrypt_key = crypto.generateCryptoKeys(self.encrypt_key,
                                              self.validate_key + nonce, 1)
-            data = util.pickle.dumps(self.copy(), 2)
+            data = util.json.dumps(self.copy())
             return nonce + b64encode(crypto.aesEncrypt(data, encrypt_key))
         else:
-            data = util.pickle.dumps(self.copy(), 2)
+            data = util.json.dumps(self.copy())
             return b64encode(data)

     def _decrypt_data(self):
@@ -504,10 +504,10 @@
                                              self.validate_key + nonce, 1)
             payload = b64decode(self.cookie[self.key].value[8:])
             data = crypto.aesDecrypt(payload, encrypt_key)
-            return util.pickle.loads(data)
+            return util.json.loads(data)
         else:
             data = b64decode(self.cookie[self.key].value)
-            return util.pickle.loads(data)
+            return util.json.loads(data)

     def save(self, accessed_only=False):
         """Saves the data for this session to persistent storage"""
diff -r 257f147861c8 beaker/util.py
--- a/beaker/util.py    Mon Apr 18 11:38:53 2011 -0400
+++ b/beaker/util.py    Sat Apr 30 14:19:12 2011 -0400
@@ -24,6 +24,11 @@
     import pickle
 else:
     import cPickle as pickle
+
+try:
+    import json
+except ImportError:
+    import simplejson as json

 from beaker.converters import asbool
 from beaker import exceptions
</snippet></ROW><ROW><id>5843782</id><snippet>global totalBottles, totalPayout, todayBottles
totalBottles=0 #store the accumulated bottle values
counter=1 #will control the loop
todayBottles=0 #store the number of bottles returned on a day
totalPayout=0 #store the calculated value of totalBottles x.10

def main():
    global totalBottles, totalPayout, todayBottles
    keepGoing='y'

    while keepGoing =='y':
        getBottles (counter)
        calcPayout ()
        printInfo(totalBottles, totalPayout)
        keepGoing == raw_input ('Do you want to run the program again?')

def getBottles (counter):
    global totalBottles, todayBottles
    while counter &lt;8:
        todayBottles = input ('Enter number of bottles returned for the day:')
        totalBottles = todayBottles + totalBottles
        counter=counter + 1

def calcPayout():
    global totalBottles, totalPayout, todayBottles
    totalPayout = totalBottles * .10

def printInfo(totalBottles, totalPayout):
    print totalBottles,('is the total bottles')
    print totalPayout, ('amount due')

main()
</snippet></ROW><ROW><id>5843782</id><snippet>global totalBottles, totalPayout, todayBottles
totalBottles=0 #store the accumulated bottle values
counter=1 #will control the loop
todayBottles=0 #store the number of bottles returned on a day
totalPayout=0 #store the calculated value of totalBottles x.10

def main():

    keepGoing='y'
    while keepGoing =='y':
        totalBottles = getBottles(totalBottles, todayBottles)
        totalPayout = calcPayout (totalBottles)
        printInfo(totalBottles, totalPayout)
        keepGoing == raw_input ('Do you want to run the program again?')

def getBottles (totalBottles, todayBottles):
    counter=1
    while counter &lt;8:
        todayBottles = input ('Enter number of bottles returned for the day:')
        totalBottles = todayBottles + totalBottles
        counter=counter + 1
    return totalBottles

def calcPayout(totalBottles):
    totalPayout = totalBottles * .10
    return totalPayout

def printInfo(totalBottles, totalPayout):
    print totalBottles,('is the total bottles')
    print totalPayout, ('amount due')

main()
</snippet></ROW><ROW><id>5843947</id><snippet>pos</snippet></ROW><ROW><id>5843947</id><snippet>pos</snippet></ROW><ROW><id>5843947</id><snippet>networkx.draw_networkx(G, pos=networkx.spring_layout(G), ax=self.axes)
</snippet></ROW><ROW><id>5844450</id><snippet>import os
from shutil import copy2

SOURCE = "c:\\source\\"

DEST = "c:\\dest\\"

# Iterate recursively through all files and folders under the source directory
for path, dirs, files in os.walk(SOURCE):
    # For each directory iterate over the files
    for f in files:
        # Grab the first letter of the filename
        starting_letter = f[0].upper()
        # Construct the full path of the current source file
        source_path = os.path.join(path, f)
        # Construct the destination path using the first letter of the
        # filename as the folder
        dest_path = os.path.join(DEST, starting_letter)
        # Create the destination folder if it doesn't exist
        if not os.path.isdir(dest_path):
            os.makedirs(dest_path)
        # Copy the file to the destination path + starting_letter
        copy2(source_path, dest_path)
</snippet></ROW><ROW><id>5844463</id><snippet>def combine(items):
    for tuples in items:
        text, numbers = zip(*tuples)
        yield ' '.join(text), sum(numbers)

print list(combine(product( ... )))
</snippet></ROW><ROW><id>5844692</id><snippet>del</snippet></ROW><ROW><id>5844692</id><snippet>del d[key]
</snippet></ROW><ROW><id>5844692</id><snippet>def removekey(d, key):
    r = dict(d)
    del r[key]
    return r
</snippet></ROW><ROW><id>5844721</id><snippet>dmesg</snippet></ROW><ROW><id>5844721</id><snippet>grep</snippet></ROW><ROW><id>5844721</id><snippet>PIPE</snippet></ROW><ROW><id>5844721</id><snippet>import time
import sys

DELAY = int(sys.argv[1])
ii = 1
while 1:
    sys.stdout.write("Talking every %i seconds, blabbed %i times\n" % (DELAY, ii))
    sys.stdout.flush()
    ii += 1
    time.sleep(DELAY)
</snippet></ROW><ROW><id>5844721</id><snippet>from subprocess import Popen, PIPE
from os import kill
import signal

talkpipe = Popen(['python', 'talker.py', '3'],
    shell=False, stdout=PIPE)
try:
    while True:
        line = talkpipe.stdout.readline()
        print "SERVER HEARD", line.strip()
except KeyboardInterrupt:
    print "Killing child..."
    kill(talkpipe.pid, signal.SIGTERM)
</snippet></ROW><ROW><id>5844721</id><snippet>python server.py</snippet></ROW><ROW><id>5844721</id><snippet>[mpenning@Bucksnort tmp]$ python server.py
SERVER HEARD Talking every 3 seconds, blabbed 1 times
SERVER HEARD Talking every 3 seconds, blabbed 2 times
SERVER HEARD Talking every 3 seconds, blabbed 3 times
SERVER HEARD Talking every 3 seconds, blabbed 4 times
^CTraceback (most recent call last):
  File "talker.py", line 11, in &lt;module&gt;
    time.sleep(DELAY)
KeyboardInterrupt
Killing child...
[mpenning@Bucksnort tmp]$
</snippet></ROW><ROW><id>5844924</id><snippet>''' Returns frequency of function words '''
def get_func_word_freq(words,funct_words):
    fdist = nltk.FreqDist([funct_word for funct_word in funct_words if funct_word in words]) 
    funct_freq = {}    
    for key,value in fdist.iteritems():
        funct_freq[key] = value
    return funct_freq

''' Read LIWC 2007 English dictionary and extract function words '''
def load_liwc_funct():
    funct_words = set()
    data_file = open(liwc_dict_file, 'rb')
    lines = data_file.readlines()
    for line in lines:
        row = line.rstrip().split("\t")
        if '1' in row:
            if row[0][-1:] == '*' :
                funct_words.add(row[0][:-1])
            else :
                funct_words.add(row[0])
    return list(funct_words)
</snippet></ROW><ROW><id>5845416</id><snippet>db.get(list_of_keys)</snippet></ROW><ROW><id>5845485</id><snippet>class TestMain(object):
    # ...

    def test_foo(self):
        mock('urlopen', returns_func=urlopen_stub, tracker=None)
        func_a_calling_urlopen()
        assert_true(isfile(join(self.working, 'file_b.txt')))
        restore()

    # ...

    def test_bar_exception(self):
        mock('urlopen', 
                returns_func=urlopen_stub_which_returns_broken_xml_file, 
                tracker=None)
        assert_raises(AnException, func_c_calling_urlopen)
        restore()
</snippet></ROW><ROW><id>5845485</id><snippet>restore()</snippet></ROW><ROW><id>5845485</id><snippet>try: ... finally:</snippet></ROW><ROW><id>5845572</id><snippet>break foo
commands
python print "break"
end
</snippet></ROW><ROW><id>5845687</id><snippet>d</snippet></ROW><ROW><id>5845687</id><snippet>forms</snippet></ROW><ROW><id>5845687</id><snippet>for form in forms:
    d.update(form)
</snippet></ROW><ROW><id>5845752</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import itertools

def func(x):
    if x &gt;= 1.0 or x &lt;= -1.0:
        return 0
    else:
        return (abs(x) - 1.0)

a = 1.0
b = -1.0
N = 128.
time = np.linspace( a, b, N )
y = (np.fromiter(itertools.imap(func, time), 
                  dtype=time.dtype, count=time.shape[0]))

period = 2.
def cn(n):
    c = y*np.exp(-1j*2*n*np.pi*time/period)
    return c.sum()/c.size
def f(x, Nh):
    rng = np.arange(.5, Nh+.5)
    f = np.array([2*cn(i)*np.exp(1j*2*i*np.pi*x/period) for i in rng])
    return f.sum()

y2 = np.array([f(t,10).real for t in time])

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.plot(time, y)
ax.plot(time, y2)
plt.show()
</snippet></ROW><ROW><id>5845752</id><snippet>imap</snippet></ROW><ROW><id>5845928</id><snippet>Pexpect</snippet></ROW><ROW><id>5845928</id><snippet>sftp</snippet></ROW><ROW><id>5845928</id><snippet>paramiko</snippet></ROW><ROW><id>5845957</id><snippet>signal()</snippet></ROW><ROW><id>5845957</id><snippet>signal()</snippet></ROW><ROW><id>5845957</id><snippet>sigaction()</snippet></ROW><ROW><id>5845957</id><snippet>SA_RESTART</snippet></ROW><ROW><id>5845957</id><snippet>siginterrupt(signum, 1)</snippet></ROW><ROW><id>5845957</id><snippet>import signal
signal.signal(signal.SIGHUP, handler)
signal.siginterrupt(signal.SIGHUP, False)
</snippet></ROW><ROW><id>5845997</id><snippet>i</snippet></ROW><ROW><id>5845997</id><snippet>i</snippet></ROW><ROW><id>5846048</id><snippet>.reverse()</snippet></ROW><ROW><id>5846048</id><snippet>qSort</snippet></ROW><ROW><id>5846048</id><snippet>print qSort.reverse()</snippet></ROW><ROW><id>5846048</id><snippet>print qSort[::-1]</snippet></ROW><ROW><id>5846048</id><snippet>a[firstIndexInclusive:endIndexExclusive:Step]</snippet></ROW><ROW><id>5846048</id><snippet>&gt;&gt;&gt; a = range(20)
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
&gt;&gt;&gt; a[7:] #seventh term and forward
[7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
&gt;&gt;&gt; a[:11] #everything before the 11th term
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; a[::2] # even indexed terms.  0th, 2nd, etc
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
&gt;&gt;&gt; a[4:17]
[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
&gt;&gt;&gt; a[4:17:2]
[4, 6, 8, 10, 12, 14, 16]
&gt;&gt;&gt; a[::-1]
[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
&gt;&gt;&gt; a[19:4:-5]
[19, 14, 9]
&gt;&gt;&gt; a[1:4] = [100, 200, 300] #you can assign to slices too
&gt;&gt;&gt; a
[0, 100, 200, 300, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
</snippet></ROW><ROW><id>5846096</id><snippet>cell</snippet></ROW><ROW><id>5846096</id><snippet>random.choice()</snippet></ROW><ROW><id>5846096</id><snippet>import itertools
import random
import turtle

# change step size if you like
STEP = 1
PTS = [-STEP, 0, STEP]
DIRS = [(x, y) for x in PTS for y in PTS if x or y]

turtle.setup(width=400, height=400, startx=0, starty=0)
turtle.trace = False
pos = turtle.pos()

for i in range(1000):
    px, py = turtle.pos()
    # direction of next move
    xd, yd = random.choice(DIRS)
    # set pos to current pos + direction vector
    turtle.goto(px + xd, py + yd)
</snippet></ROW><ROW><id>5846110</id><snippet>&gt;&gt;&gt; def assign_to(name, value):
...     name = value
...
&gt;&gt;&gt; name = "nothing"
&gt;&gt;&gt; assign_to(name, 5)
&gt;&gt;&gt; name
'nothing'
</snippet></ROW><ROW><id>5846110</id><snippet>&gt;&gt;&gt; def append_to_list(my_list, value):
...     my_list.append(value)
... 
&gt;&gt;&gt; my_list = []
&gt;&gt;&gt; append_to_list(my_list, 5)
&gt;&gt;&gt; my_list
[5]
</snippet></ROW><ROW><id>5846110</id><snippet>gobject.threads_init()</snippet></ROW><ROW><id>5846177</id><snippet>alias py=python3</snippet></ROW><ROW><id>5846177</id><snippet>python3</snippet></ROW><ROW><id>5846203</id><snippet>print data[0]</snippet></ROW><ROW><id>5846500</id><snippet>/System/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>5846500</id><snippet>$ ls -l /usr/bin/python2.6
lrwxr-xr-x  1 root  wheel  75 Nov  7 23:52 /usr/bin/python2.6@ -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6
</snippet></ROW><ROW><id>5846500</id><snippet>/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>5846500</id><snippet>$ /usr/bin/python2.6
Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5846500</id><snippet>/System/Library</snippet></ROW><ROW><id>5846500</id><snippet>/usr</snippet></ROW><ROW><id>5846500</id><snippet>/usr/local</snippet></ROW><ROW><id>5846500</id><snippet>/Library</snippet></ROW><ROW><id>5846507</id><snippet>if options.verbose:
    # ...
if options.ip:
    # ...
elif options.usage:
    # ...
else:
    # Here's a "catch all" in case no options are supplied. 
    # It will show the help text you get:
    p.print_help()
</snippet></ROW><ROW><id>5847158</id><snippet>tkinter._test()</snippet></ROW><ROW><id>5847167</id><snippet>tell application "System Events"
    tell process "Safari"
        -- get the menu bar items from the main menu
        tell menu bar 1
            set menuBarItems to menu bar items -- apple menu, application menu, file menu etc.
        end tell

        -- get the menu items from a menu bar item
        set fileMenuBarItem to item 3 of menuBarItems -- the file menu
        tell menu 1 of fileMenuBarItem -- you have to have "menu 1" here
            set menuItems to menu items
        end tell

        -- query the menu bar item
        set closeWindowMenuItem to item 6 of menuItems -- close window menu item
        tell closeWindowMenuItem
            return {name, value} of attributes
        end tell
    end tell
end tell
</snippet></ROW><ROW><id>5847307</id><snippet>urllib</snippet></ROW><ROW><id>5847341</id><snippet>locals()</snippet></ROW><ROW><id>5847357</id><snippet>p = re.compile("\([^()]*\)")
count = 1
while count:
    s, count = p.subn("", s)
</snippet></ROW><ROW><id>5847429</id><snippet>shell=True</snippet></ROW><ROW><id>5847429</id><snippet>var1 = subprocess.Popen("pwd | grep 'home' ", shell=True)
</snippet></ROW><ROW><id>5847429</id><snippet>var1.wait()</snippet></ROW><ROW><id>5847429</id><snippet>0</snippet></ROW><ROW><id>5847429</id><snippet>if 'home' in os.getcwd():
    print "'home' is in the current working directory's path"
</snippet></ROW><ROW><id>5847594</id><snippet>def getPage(url, contextFactory=None, *args, **kwargs)
</snippet></ROW><ROW><id>5847594</id><snippet>return client.getPage(url, contextFactory=None, method, headers=headers)
</snippet></ROW><ROW><id>5847944</id><snippet>def module_exists(module_name):
    try:
        __import__(module_name)
    except ImportError:
        return False
    else:
        return True
</snippet></ROW><ROW><id>5848277</id><snippet>a ^ b ^ c ^ d == e</snippet></ROW><ROW><id>5848325</id><snippet>in</snippet></ROW><ROW><id>5848325</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>5848325</id><snippet>[]</snippet></ROW><ROW><id>5848325</id><snippet>hasattr</snippet></ROW><ROW><id>5848325</id><snippet>hasattr</snippet></ROW><ROW><id>5848325</id><snippet>Tag</snippet></ROW><ROW><id>5848325</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>5848325</id><snippet>__contains__</snippet></ROW><ROW><id>5848325</id><snippet>from BeautifulSoup import BeautifulSoup

str = '&lt;el at="some"&gt;ABC&lt;/el&gt;&lt;el&gt;DEF&lt;/el&gt;'
z = BeautifulSoup(str)

for x in z.findAll('el'):
    print type(x)
    print x['at']
</snippet></ROW><ROW><id>5848325</id><snippet>&lt;class 'BeautifulSoup.Tag'&gt;
some
&lt;class 'BeautifulSoup.Tag'&gt;
Traceback (most recent call last):
  File "soup4.py", line 8, in &lt;module&gt;
    print x['at']
  File "C:\Python26\lib\site-packages\BeautifulSoup.py", line 601, in __getitem__
    return self._getAttrMap()[key]
KeyError: 'at'
</snippet></ROW><ROW><id>5848325</id><snippet>el</snippet></ROW><ROW><id>5848325</id><snippet>at</snippet></ROW><ROW><id>5848325</id><snippet>KeyError</snippet></ROW><ROW><id>5848325</id><snippet>BeautifulSoup.Tag.__contains__</snippet></ROW><ROW><id>5848325</id><snippet>in</snippet></ROW><ROW><id>5848560</id><snippet>size=120</snippet></ROW><ROW><id>5848560</id><snippet>=s120</snippet></ROW><ROW><id>5848646</id><snippet># Map names to functions. Note there is no need for the names
# to match the actual function name, and the functions can appear
# multiple times.
function_map = {
    'editContactInfo': editContactInfo,
    'editClientInfo': editClientInfo,
    'editAlias': editContactInfo,
}

# Get name of function to run etc. I'm assuming that the function
# name is stored in the variable function_name, and any parameters 
# call it with is in the dictionary parameters (i.e., the functions
# all take keyword arguments).

# Do a lookup to get the function.
try:
    function = function_map[function_name]
except KeyError:
    # Replace with your own error handling code.
    print 'Function {0} does not exist.'.format(function_name)

# Call the function
result = function(**parameters)
</snippet></ROW><ROW><id>5848683</id><snippet>session.save()</snippet></ROW><ROW><id>5848683</id><snippet>data_dir</snippet></ROW><ROW><id>5848683</id><snippet>validate_key</snippet></ROW><ROW><id>5848683</id><snippet>session_opts['data_dir'] = "/some/place/to/save/"
</snippet></ROW><ROW><id>5848683</id><snippet>session_opts['validate_key'] = "some secret value"
session_opts['encrypt_key'] = "some other value"
</snippet></ROW><ROW><id>5848820</id><snippet>import subprocess
p = subprocess.Popen("mysql -e\"insert into test.syllabalize values (",text_index, ",", index, ",", "'",syllable,"')\"",shell=True)
p.wait()
</snippet></ROW><ROW><id>5848820</id><snippet>db.execute("insert into test.syllabalize values (?,?,?)", (text_index, index, syllable))
</snippet></ROW><ROW><id>5848820</id><snippet>p = subprocess.Popen(["mysql", "-e", "\"insert into test.syllabalize values (",text_index, ",", index, ",", "'",syllable,"')\""])
</snippet></ROW><ROW><id>5848844</id><snippet>host = request.host
host = host.split(':', 1)[0] # Strip off optional ':##' port number
username = None
if host.endswith('.yourdomain.com'):
    username = host.split('.', 1)[0]
</snippet></ROW><ROW><id>5848847</id><snippet>result = regex.search(line)
   if regex.search(line):
</snippet></ROW><ROW><id>5848847</id><snippet>result = regex.search(re.sub(r'\s+', '',line))
   if regex.search(line):
</snippet></ROW><ROW><id>5848847</id><snippet>result</snippet></ROW><ROW><id>5848847</id><snippet>if choice == '1':
for root,dirname, files in os.walk(directory):
    for file in files:
    if file.endswith(".log") or file.endswith(".txt"):
        f=open(os.path.join(root, file))
        for i,line in enumerate(f.readlines()):
            result = regex.search(line)
            if result: # FIX 1
                print " "
                print "Line: " + str(i)
                print "File: " + os.path.join(root,file)
                print "String Type: " + result.group()
                print " "


    f.close()
re.purge()              
    if choice == '2':
    for root,dirname, files in os.walk(directory):
        for file in files:
        if file.endswith(".log") or file.endswith(".txt"):
            f=open(os.path.join(root, file))
            for i,line in enumerate(f.readlines()):
                result = regex.search(re.sub(r'\s+', '',line))
                if result: # FIX 2
                    print " "
                    print "Line: " + str(i)
                    print "File: " + os.path.join(root,file)
                    print "String Type: " + result.group()
                    print " "

                    f.close()
</snippet></ROW><ROW><id>5848988</id><snippet>add</snippet></ROW><ROW><id>5848988</id><snippet>{{ img.height|add:1 }}
</snippet></ROW><ROW><id>5848988</id><snippet>div</snippet></ROW><ROW><id>5848988</id><snippet>from django import template
register = template.Library()

@register.filter
def div( value, arg ):
    '''
    Divides the value; argument is the divisor.
    Returns empty string on any error.
    '''
    try:
        value = int( value )
        arg = int( arg )
        if arg: return value / arg
    except: pass
    return ''
</snippet></ROW><ROW><id>5848988</id><snippet>{[ img.height|div:2 }}
</snippet></ROW><ROW><id>5849040</id><snippet>raw_id_fields = ('zipcode',)
</snippet></ROW><ROW><id>5849116</id><snippet>ModuleName.object</snippet></ROW><ROW><id>5849116</id><snippet>methodName</snippet></ROW><ROW><id>5849116</id><snippet>int callPython() {
   PyObject* module = PyImport_ImportModule("ModuleName");
   if (!module)
      return 0;

   // Get an object to call method on from ModuleName
   PyObject* python_object = PyObject_CallMethod(module, "object", "O", module);
   if (!python_object) {
      PyErr_Print();
      Py_DecRef(module);
      return 0;
   }

   // SWIGTYPE_p_Foo should be the SWIGTYPE for your wrapped class and
   // SWIG_POINTER_NEW is a flag indicating ownership of the new object
   PyObject *instance = SWIG_NewPointerObj(SWIG_as_voidptr(new Foo()), SWIGTYPE_p_Foo, SWIG_POINTER_NEW);

   PyObject *result = PyObject_CallMethod(python_object, "methodName", "O", instance);
   // Do something with result?

   Py_DecRef(instance);
   Py_DecRef(result);  
   Py_DecRef(module);

   return 1;
}
</snippet></ROW><ROW><id>5849163</id><snippet>#!/usr/bin/env python
# test.py

class Master(object):
    mydata = []
    def __init__(self):
        s1 = Sub1()
        s2 = Sub2()

class Sub1(Master):
    def __init__(self):
        super(Sub1, self).mydata.append(1)

class Sub2(Master):
    def __init__(self):
        super(Sub2, self).mydata.append(2)

if __name__ == "__main__":
    m = Master()
    print m.mydata
</snippet></ROW><ROW><id>5849240</id><snippet>struct.unpack</snippet></ROW><ROW><id>5849240</id><snippet>Z</snippet></ROW><ROW><id>5849240</id><snippet>Z  A null-terminated (ASCIZ) string, will be null padded.
</snippet></ROW><ROW><id>5849240</id><snippet>unpack(.., "Z*")
</snippet></ROW><ROW><id>5849240</id><snippet>data.split('\x00')
</snippet></ROW><ROW><id>5849653</id><snippet>#I delete follow line:
from sqlalchemy.databases.mysql import MSBinary
</snippet></ROW><ROW><id>5849653</id><snippet>from sqlalchemy.types import Binary
</snippet></ROW><ROW><id>5849653</id><snippet>class UUID(types.TypeDecorator):
    impl = Binary # this one!

...
...
id_column_name = "id"

def id_column():
    import uuid
    return Column(id_column_name,UUID(),primary_key=True,default=uuid.uuid4)


#usage:
app_uuid = Column(u'app_uuid', UUID(), primary_key=True)
</snippet></ROW><ROW><id>5849653</id><snippet>user = Table(
    'User',
    meta.metadata,
    Column('ID', UUID(as_uuid=True), primary_key=True),
    Column('Name', String(250), nullable=False, unique=True)
)
</snippet></ROW><ROW><id>5849705</id><snippet>with open('filename', 'rb') as f:
    contents = f.read().decode('utf-8-sig')    # -sig deals with BOM, if present
</snippet></ROW><ROW><id>5849705</id><snippet>with open('filename', 'r') as f:
    contents = f.read()    # results in a str object
</snippet></ROW><ROW><id>5849705</id><snippet>chardet</snippet></ROW><ROW><id>5849825</id><snippet>class UserProfile(models.Model):
    user = models.ForeignKey(User)
    image = models.ImageField(upload_to=upload_to)

    def save(self):
        if self.image.path:
            try:
                os.unlink(self.image.path)
            except Exception, inst:
                raise Exception("Unable to delete %s. Error: %s" % (self.image.path, inst))
        super(UserProfile, self).save()
</snippet></ROW><ROW><id>5849825</id><snippet>save</snippet></ROW><ROW><id>5849825</id><snippet>UserProfile</snippet></ROW><ROW><id>5849825</id><snippet>from django.db.models import signals
def delete_old_image(sender, instance, using=None):
    try:
        old_record = sender.objects.get(pk=instance.pk)
        os.unlink(old_record.image.path)
    except sender.DoesNotExist:
        pass
signals.pre_save.connect(delete_old_image, sender=UserProfile)
</snippet></ROW><ROW><id>5849825</id><snippet>models.py</snippet></ROW><ROW><id>5849861</id><snippet>timeit</snippet></ROW><ROW><id>5849861</id><snippet>time</snippet></ROW><ROW><id>5849861</id><snippet>t = time.time()
# do stuff
elapsed = time.time() - t
</snippet></ROW><ROW><id>5849861</id><snippet>class Timer(object):
    def __init__(self, name=None):
        self.name = name

    def __enter__(self):
        self.tstart = time.time()

    def __exit__(self, type, value, traceback):
        if self.name:
            print '[%s]' % self.name,
        print 'Elapsed: %s' % (time.time() - self.tstart)
</snippet></ROW><ROW><id>5849861</id><snippet>with Timer('foo_stuff'):
   # do some foo
   # do some stuff
</snippet></ROW><ROW><id>5849861</id><snippet>timeit</snippet></ROW><ROW><id>5850052</id><snippet>open()</snippet></ROW><ROW><id>5850052</id><snippet>read()</snippet></ROW><ROW><id>5850052</id><snippet>write()</snippet></ROW><ROW><id>5850052</id><snippet>copyfile...()</snippet></ROW><ROW><id>5850052</id><snippet>copy...()</snippet></ROW><ROW><id>5850052</id><snippet>shutil</snippet></ROW><ROW><id>5850119</id><snippet>def contact(request):
    if request.method == 'POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            # ...
            return render_to_response('form_success.html', {'form' : form,} )
     else:
        form = ContactForm()    
    return render_to_response('contact.html', {'form': form,})
</snippet></ROW><ROW><id>5850119</id><snippet>&lt;h3&gt;Success! You submitted:&lt;/h3&gt;

{% for field in form %}
  {{field.label}}: {{field.data}}
{% endfor %}
</snippet></ROW><ROW><id>5850170</id><snippet>Mr Aric Hagberg</snippet></ROW><ROW><id>5850170</id><snippet>nx.draw_networkx_edge_labels(G,pos,edge_labels=edge_labels,ax= self.axes)
</snippet></ROW><ROW><id>5850176</id><snippet>for line in file:</snippet></ROW><ROW><id>5850176</id><snippet>seek</snippet></ROW><ROW><id>5850176</id><snippet>while True:
    line = file.readline()
    print line
    file.seek(-len(line),1)
    zz = file.readline()
    print zz

    # Make sure this loop ends somehow
</snippet></ROW><ROW><id>5850223</id><snippet>import numpy as np
import pylab as P
#
# first create a single histogram
#
mu, sigma = 200, 25
x = mu + sigma*P.randn(10000)
#
# finally: make a multiple-histogram of data-sets with different length
#
x0 = mu + sigma*P.randn(10000)
x1 = mu + sigma*P.randn(7000)
x2 = mu + sigma*P.randn(3000)

# and exercise the weights option by arbitrarily giving the first half
# of each series only half the weight of the others:

w0 = np.ones_like(x0)
w0[:len(x0)/2] = 0.5
w1 = np.ones_like(x1)
w1[:len(x1)/2] = 0.5
w2 = np.ones_like(x2)
w0[:len(x2)/2] = 0.5



P.figure()

n, bins, patches = P.hist( [x0,x1,x2], 10, weights=[w0, w1, w2], histtype='bar')

P.show()
</snippet></ROW><ROW><id>5850364</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>5850364</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>5850364</id><snippet>[report]

exclude_lines =
    if __name__ == .__main__.:
</snippet></ROW><ROW><id>5850557</id><snippet>let optimalResults = new Dictionary&lt;_,_&gt;()
</snippet></ROW><ROW><id>5850557</id><snippet>let optimalResults = new Dictionary&lt;_,_&gt;(HashIdentity.Structural)
</snippet></ROW><ROW><id>5850582</id><snippet>itertools</snippet></ROW><ROW><id>5850582</id><snippet>zip_longest</snippet></ROW><ROW><id>5850582</id><snippet>izip_longest</snippet></ROW><ROW><id>5850582</id><snippet>itertools.izip</snippet></ROW><ROW><id>5850582</id><snippet>zip</snippet></ROW><ROW><id>5850582</id><snippet>izip</snippet></ROW><ROW><id>5850582</id><snippet>_longest</snippet></ROW><ROW><id>5850591</id><snippet>buffer = ''
while True:
    line = raw_input()
    if not line: break

    buffer += line

# process input
</snippet></ROW><ROW><id>5850928</id><snippet>FormRequest</snippet></ROW><ROW><id>5850928</id><snippet>after_login</snippet></ROW><ROW><id>5850928</id><snippet>"authentication failed"</snippet></ROW><ROW><id>5850928</id><snippet>from scrapy.selector import HtmlXPathSelector
from scrapy.http import Request
</snippet></ROW><ROW><id>5850928</id><snippet>def after_login(self, response):
    # check login succeed before going on
    if "authentication failed" in response.body:
        self.log("Login failed", level=log.ERROR)
        return
    # We've successfully authenticated, let's have some fun!
    else:
        return Request(url="http://www.example.com/tastypage/",
               callback=self.parse_tastypage)

def parse_tastypage(self, response):
    hxs = HtmlXPathSelector(response)
    yum = hxs.select('//img')

    # etc.
</snippet></ROW><ROW><id>5850928</id><snippet>parse</snippet></ROW><ROW><id>5850928</id><snippet>def parse(self, response):
    hxs = HtmlXPathSelector(response)
    if hxs.select("//form[@id='UsernameLoginForm_LoginForm']"):
        return self.login(response)
    else:
        return self.get_section_links(response)
</snippet></ROW><ROW><id>5850928</id><snippet>def parse_page(self, response):
    """ Scrape useful stuff from page, and spawn new requests

    """
    hxs = HtmlXPathSelector(response)
    images = hxs.select('//img')
    # .. do something with them
    links = hxs.select('//a/@href')

    # Yield a new request for each link we found
    for link in links:
        yield Request(url=link, callback=self.parse_page)
</snippet></ROW><ROW><id>5850928</id><snippet>CrawlSpider</snippet></ROW><ROW><id>5850998</id><snippet>import random
import matplotlib.pyplot as plt
import networkx as nx
G=nx.Graph()
G.add_edges_from([('a','b'),('b','d'),('c','e'),('b','e')])
pos=nx.spring_layout(G)
nodes=G.nodes()
random.shuffle(nodes)
blue=nodes.pop()
nx.draw_networkx_nodes(G,pos,nodelist=[blue],node_color='b')
nx.draw_networkx_nodes(G,pos,nodelist=nodes,node_color='r')
nx.draw_networkx_edges(G,pos)
plt.show()
</snippet></ROW><ROW><id>5851033</id><snippet>&gt;&gt;&gt; x="abcdefghijklm"
&gt;&gt;&gt; x[0::2] #0. 2. 4...
'acegikm'
&gt;&gt;&gt; x[1::2] #1. 3. 5 ..
'bdfhjl'
&gt;&gt;&gt; [i+j for i,j in zip(x[::2],x[1::2])] # zip makes (0,1),(2,3) ...
['ab', 'cd', 'ef', 'gh', 'ij', 'kl']
</snippet></ROW><ROW><id>5851179</id><snippet>itemloaded = l.load_item()

# fill url contents
url = sel.select(item_url_xpath).extract()[0]
request = Request(url, callback = lambda r: self.parse_url_contents(r))
request.meta['item'] = itemloaded

yield request
</snippet></ROW><ROW><id>5851179</id><snippet>def parse_url_contents(self, response):
    item = response.request.meta['item']
    item['url_contents'] = response.body
    yield item
</snippet></ROW><ROW><id>5851221</id><snippet>e</snippet></ROW><ROW><id>5851221</id><snippet>A</snippet></ROW><ROW><id>5851221</id><snippet>C</snippet></ROW><ROW><id>5851221</id><snippet>C</snippet></ROW><ROW><id>5851221</id><snippet>v</snippet></ROW><ROW><id>5851221</id><snippet>O(|V| + |E|)</snippet></ROW><ROW><id>5851221</id><snippet>O(sqrt(n))</snippet></ROW><ROW><id>5851252</id><snippet>from __future__ import print_function, with_statement
def my_print(text, output):
    if type(output) == str:
        with open(output, 'w') as output_file:
            print(text, file=output_file)
    elif type(output) == file:
        print(text, file=output)
    else:
        raise IOError
</snippet></ROW><ROW><id>5851252</id><snippet>from __future__ import print_function, with_statement
def my_print(text, output):
    if type(output) == str:
        try:
            output_file = eval(output)
            assert type(output_file) == file
        except (NameError, AssertionError):
            output_file = open(output, 'w')
        print(text, file=output_file)
        output_file.close()
    elif type(output) == file:
        print(text, file=output)
    else:
        raise IOError
</snippet></ROW><ROW><id>5851608</id><snippet>__file__</snippet></ROW><ROW><id>5851608</id><snippet>execfile()</snippet></ROW><ROW><id>5851608</id><snippet>python scriptname.py</snippet></ROW><ROW><id>5851608</id><snippet>__file__</snippet></ROW><ROW><id>5851701</id><snippet>jpeg.read(2)
b = jpeg.read(1)
try:
    while (b and ord(b) != 0xDA):
        while (ord(b) != 0xFF): b = jpeg.read(1)
        while (ord(b) == 0xFF): b = jpeg.read(1)
        if (ord(b) &gt;= 0xC0 and ord(b) &lt;= 0xC3):
            jpeg.read(3)
            h, w = struct.unpack("&gt;HH", jpeg.read(4))
            break
        else:
            jpeg.read(int(struct.unpack("&gt;H", jpeg.read(2))[0])-2)
        b = jpeg.read(1)
    width = int(w)
    height = int(h)
except struct.error:
    pass
except ValueError:
    pass
</snippet></ROW><ROW><id>5851779</id><snippet>enumerate()</snippet></ROW><ROW><id>5851779</id><snippet>for i, val in enumerate(array):
    array[i] += 1
</snippet></ROW><ROW><id>5851870</id><snippet>SEGMENTS = (SEGMENT_1, SEGMENT_2) = range(2)

class NeuronRegion(object):
    def __init__(self):
        self.connection = [None, None]
        self.chosen = 0
    def choose(self, segment):
        assert segment in SEGMENTS
        self.chosen = segment
    def connect(other_neuron_region):
       # remember to reset those to None when they're not needed anymore, 
       # to avoid cycles that prevent the garbage collector from doing his job:
       self.connection[self.chosen] = other_neuron_region
       other_neuron_region.connection[other_neuron_region.chosen] = self

class Child1(NeuronRegion):
   ''' other stuff '''

class Child2(NeuronRegion):
   ''' other stuff '''
</snippet></ROW><ROW><id>5852031</id><snippet>font1 = wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')
myTextCtrl.SetFont(font1)
</snippet></ROW><ROW><id>5852044</id><snippet>#!/usr/bin/env python
import threading
import socket
import time
import errno

class StoppableThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.stop_event = threading.Event()        

    def stop(self):
        if self.isAlive() == True:
            # set event to signal thread to terminate
            self.stop_event.set()
            # block calling thread until thread really has terminated
            self.join()

class Accept(StoppableThread):
    def __init__(self, port):
        StoppableThread.__init__(self)
        self.port = port
        self.threads = []

    def run(self):     
        # handle connection acception
        conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        conn.bind(('', self.port ))
        conn.listen(5)
        # set socket timeout to ~10ms
        conn.settimeout(0.01)
        while self.stop_event.is_set() == False:
            try:
                csock, caddr = conn.accept()
                # spawn a new thread to handle the client connection
                listen_thread = Listen(csock, caddr)
                self.threads.append(listen_thread)
                listen_thread.start()
            except socket.timeout:
                # socket operation timeout
                # clear all terminated threads from thread list                
                for thread in self.threads:
                    if thread.isAlive() == False:
                        self.threads.remove(thread)

        self.stop_threads()

    def stop_threads(self):
        # stop all running threads
        for listen_thread in self.threads:
            if listen_thread.isAlive() == True:
                listen_thread.stop()
        self.threads = [] 

class Listen(StoppableThread):
    def __init__(self, csock, caddr):
        StoppableThread.__init__(self)
        self.csock = csock
        self.caddr = caddr
        self.csock.setblocking(False)

    def run(self):                
        while self.stop_event.is_set() == False:            
            try:                
                recv_data = self.csock.recv(250)
                if len(recv_data) &gt; 0:       
                    print str(self.caddr)+": " + recv_data
                    self.csock.send("got it")                    
                else:
                    # connection was closed by foreign host
                    self.stop_event.set()
            except socket.error as (sock_errno, sock_errstr):
                if (sock_errno == errno.EWOULDBLOCK):
                    # socket would block - sleep sometime
                    time.sleep(0.1)                    
                else:
                    # unexpected / unhandled error - terminate thread
                    self.stop_event.set()
        channel.close()

class Shout(StoppableThread):
    def __init__(self, sport):
        StoppableThread.__init__(self)
        self.sport = sport

    def run(self):
        while self.stop_event.is_set() == False:
            try:    
                address = raw_input("who u talking to? ")
                conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                conn.connect((address, self.sport))
                break
            except socket.error:
                # handle connection problems
                print "can't connect to "+ str(address)
            except: 
                # exit thread in case of an unexpected error
                self.stop_event.set()

        while self.stop_event.is_set() == False:
            try: 
                # chat loop: send messages to remote host            
                print "what to send? :",
                msg = raw_input()
                # beware: send() function may block indefinitly here and it might not send all bytes as expected !!
                conn.send(msg)
            except:
                # exit thread in case of an unexpected error
                self.stop_event.set()
        # close socket before thread terminates
        conn.close()

def main():
    do_exit = False
    server_port = 2727

    # start server socket thread
    accept = Accept(server_port)
    accept.start()

    # start transmitting client socket thread
    shout = Shout(server_port)
    shout.start()

    while do_exit == False:
        try:
            # sleep some time
            time.sleep(0.1)
        except KeyboardInterrupt:
            # Ctrl+C was hit - exit program
            do_exit = True

    # stop all running threads
    shout.stop()
    accept.stop()

    # exit main program after all threads were terminated gracefully    

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>5852475</id><snippet>dispatch = {
    "a": MyClassA,
    "b": MyClassB,
}

instance = dispatch[which_one]() # Notice the second pair of parens here!
</snippet></ROW><ROW><id>5852750</id><snippet>extra_params</snippet></ROW><ROW><id>5852750</id><snippet>http_method</snippet></ROW><ROW><id>5852750</id><snippet>info2 = client.post('/statuses/update', **args)
</snippet></ROW><ROW><id>5852852</id><snippet>def print_host(host, address):
    f = open(host, 'w')
    f.write("""define host {{
        host_name            {host}
        alias                {host}
        display_name         {host}
        address              {address}
        use                  linux-server
        register             1
    }}\n""".format(host=host, address=address))

print_host("myhost", "10.10.10.10")
</snippet></ROW><ROW><id>5853003</id><snippet>import time
import sys

for remaining in range(10, 0, -1):
    sys.stdout.write("\r")
    sys.stdout.write("{:2d} seconds remaining.".format(remaining)) 
    sys.stdout.flush()
    time.sleep(1)

sys.stdout.write("\rComplete!            \n")
</snippet></ROW><ROW><id>5853003</id><snippet>"\r"</snippet></ROW><ROW><id>5853003</id><snippet>"\n"</snippet></ROW><ROW><id>5853003</id><snippet>.flush()</snippet></ROW><ROW><id>5853003</id><snippet>curses</snippet></ROW><ROW><id>5853199</id><snippet>plot</snippet></ROW><ROW><id>5853199</id><snippet>plot</snippet></ROW><ROW><id>5853199</id><snippet>y</snippet></ROW><ROW><id>5853199</id><snippet>step</snippet></ROW><ROW><id>5853199</id><snippet>add_subplot</snippet></ROW><ROW><id>5853199</id><snippet>plot</snippet></ROW><ROW><id>5853379</id><snippet>input()</snippet></ROW><ROW><id>5853379</id><snippet>'.txt'</snippet></ROW><ROW><id>5853379</id><snippet>+</snippet></ROW><ROW><id>5853379</id><snippet>filename = input()
with open(filename + '.txt', 'r') as f:
    lines = [line.strip() for line in f]
</snippet></ROW><ROW><id>5853379</id><snippet>raw_input</snippet></ROW><ROW><id>5853379</id><snippet>input</snippet></ROW><ROW><id>5853562</id><snippet>pygame.display.flip()</snippet></ROW><ROW><id>5853562</id><snippet>draw</snippet></ROW><ROW><id>5853562</id><snippet>flip()</snippet></ROW><ROW><id>5853562</id><snippet>draw</snippet></ROW><ROW><id>5853754</id><snippet>import os
import tarfile

home = '/home/'
backup_dir = '/backup/'

home_dirs = [ name for name in os.listdir(home) if os.path.isdir(os.path.join(home, name)) ]

for directory in home_dirs:
    full_dir = os.path.join(home, directory)
    tar = tarfile.open(os.path.join(backup_dir, directory+'.tar.gz'), 'w:gz')
    tar.add(full_dir)
    tar.close()
</snippet></ROW><ROW><id>5853867</id><snippet>else:
    return render_to_response('activation/activation_signupcount.html', 
              {'form': SegmentForm(initial={'usersegment':'all'}), 
               'form2': DateSelectForm()
              })
</snippet></ROW><ROW><id>5853998</id><snippet>INSERT INTO table [ ( column [, ...] ) ]
    { DEFAULT VALUES | VALUES ( { expression | DEFAULT } [, ...] ) [, ...] | query }
    [ RETURNING * | output_expression [ AS output_name ] [, ...] ]
</snippet></ROW><ROW><id>5853998</id><snippet>INSERT INTO distributors (did, dname) VALUES (DEFAULT, 'XYZ Widgets')
   RETURNING did;
</snippet></ROW><ROW><id>5854026</id><snippet>a = "data"
b = b"blah (blah) - data"
print(a == b)
</snippet></ROW><ROW><id>5854026</id><snippet>if fileHandleData.rstrip().endswith(fileHash.encode()):
</snippet></ROW><ROW><id>5854026</id><snippet>if fileHash.encode() in fileHandleData:
</snippet></ROW><ROW><id>5854177</id><snippet>def make_logger():
  logger = logging.getLogger('testfile')
  # initializations...
  # ...
  return logger

logger = make_logger()
logger.warn('ghj')
</snippet></ROW><ROW><id>5854789</id><snippet>try/catch</snippet></ROW><ROW><id>5854823</id><snippet>import sys
def f(task_list):
    results = []
    for task_id in task_list:
        results.append(work(task_id))
        print len(results) # show the progress
        sys.stdout.flush()  # this will force the system to display what is in the stdout queue
    return results
</snippet></ROW><ROW><id>5855255</id><snippet>from multiprocessing import Pool
p = Pool()    # let python choose the optimal number of processes (= number of CPU cores)
def treat_email(email_adress):
    # do the stuff you need with email address

email_addresses = grab_the_list_from_mysql()  # something like "select mail from my_user_table"

p.map(treat_email, email_addresses)    # this will treat all the emails in the X processes
</snippet></ROW><ROW><id>5855702</id><snippet>filter</snippet></ROW><ROW><id>5855702</id><snippet>view</snippet></ROW><ROW><id>5855702</id><snippet>forloop.counter</snippet></ROW><ROW><id>5855702</id><snippet>forloop.counter0</snippet></ROW><ROW><id>5855702</id><snippet>       {% for user in user_set %}
            {% ifequal user.session_ID access_token %}
                   &lt;a href="/logout"&gt;Logout {{user.user_name}}&lt;/a&gt;
            {% else %}
                   &lt;!-- add in counter? --&gt;
                   {{forloop.counter}} &lt;!-- current count --&gt;
            {%endifequal%}
       {% endfor %} 
</snippet></ROW><ROW><id>5855793</id><snippet>d = {}
for c in (65, 97):
    for i in range(26):
        d[chr(i+c)] = chr((i+13) % 26 + c)
</snippet></ROW><ROW><id>5855793</id><snippet>print "".join([d.get(c, c) for c in s])
</snippet></ROW><ROW><id>5855800</id><snippet>p12</snippet></ROW><ROW><id>5855800</id><snippet>Apple Development Push Services</snippet></ROW><ROW><id>5855800</id><snippet>cert.p12</snippet></ROW><ROW><id>5855800</id><snippet>primary key</snippet></ROW><ROW><id>5855800</id><snippet>Apple Development Push Services</snippet></ROW><ROW><id>5855800</id><snippet>pkey.p12</snippet></ROW><ROW><id>5855800</id><snippet>p12</snippet></ROW><ROW><id>5855800</id><snippet>pem</snippet></ROW><ROW><id>5855800</id><snippet>$ openssl pkcs12 -in pkey.p12 -out pkey.pem -nodes -clcerts
$ openssl pkcs12 -in cert.p12 -out cert.pem -nodes -clcerts
$ cat cert.pem pkey.pem &gt; iphone_ck.pem
</snippet></ROW><ROW><id>5855800</id><snippet>iphone_ck.pem</snippet></ROW><ROW><id>5856062</id><snippet>class CompareBox(QtGui.QDialog):
    def __init__(self, indexlist=None, parent=None):
        some code now then
        self.parameterlist = []
        self.parameterlist.append(someobject) 
        again some code 
        self.close()
</snippet></ROW><ROW><id>5856344</id><snippet>os._exit</snippet></ROW><ROW><id>5856344</id><snippet>foo</snippet></ROW><ROW><id>5856344</id><snippet>__gcov_flush</snippet></ROW><ROW><id>5857041</id><snippet>abc</snippet></ROW><ROW><id>5857041</id><snippet>from abc import ABCMeta, abstractmethod

class Abstract(metaclass=ABCMeta):
    def use_concrete_implementation(self):
        print(self._concrete_method())

    @abstractmethod
    def _concrete_method(self):
        pass

class Concrete(Abstract):
    def _concrete_method(self):
        return 2 * 3
</snippet></ROW><ROW><id>5857041</id><snippet>abc</snippet></ROW><ROW><id>5857041</id><snippet>isinstance()</snippet></ROW><ROW><id>5857041</id><snippet>isinstance()</snippet></ROW><ROW><id>5857048</id><snippet>from google.appengine.api import users

if users.is_current_user_admin():
</snippet></ROW><ROW><id>5857048</id><snippet>users.get_current_user()</snippet></ROW><ROW><id>5857058</id><snippet># generate some test data
mkdir /tmp/backup
mkdir documents
date &gt; documents/file1
date &gt; documents/file2

# do the backup
rsync -av --delete documents /tmp/backup/
cp -al /tmp/backup /tmp/backup.$(date +%Y%m%d-%H%M%S)
</snippet></ROW><ROW><id>5857058</id><snippet># modify the test data
date &gt;&gt; documents/file1

# do the backup
rsync -av --delete documents /tmp/backup/
cp -al /tmp/backup /tmp/backup.$(date +%Y%m%d-%H%M%S)
</snippet></ROW><ROW><id>5857202</id><snippet>parse</snippet></ROW><ROW><id>5857202</id><snippet>CrawlSpider</snippet></ROW><ROW><id>5857202</id><snippet>CrawlSpider</snippet></ROW><ROW><id>5857202</id><snippet>parse</snippet></ROW><ROW><id>5857202</id><snippet>CrawlSpider</snippet></ROW><ROW><id>5857202</id><snippet>CrawlSpider</snippet></ROW><ROW><id>5857202</id><snippet>parse</snippet></ROW><ROW><id>5857202</id><snippet>Rule</snippet></ROW><ROW><id>5857202</id><snippet>InitSpider</snippet></ROW><ROW><id>5857202</id><snippet>CrawlSpider</snippet></ROW><ROW><id>5857202</id><snippet>init_request</snippet></ROW><ROW><id>5857202</id><snippet>self.initialized</snippet></ROW><ROW><id>5857202</id><snippet>from scrapy.contrib.spiders.init import InitSpider
from scrapy.http import Request, FormRequest
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.contrib.spiders import Rule

class MySpider(InitSpider):
    name = 'myspider'
    allowed_domains = ['domain.com']
    login_page = 'http://www.domain.com/login'
    start_urls = ['http://www.domain.com/useful_page/',
                  'http://www.domain.com/another_useful_page/']

    rules = (
        Rule(SgmlLinkExtractor(allow=r'-\w+.html$'),
             callback='parse_item', follow=True),
    )

    def init_request(self):
        """This function is called before crawling starts."""
        return Request(url=self.login_page, callback=self.login)

    def login(self, response):
        """Generate a login request."""
        return FormRequest.from_response(response,
                    formdata={'name': 'herman', 'password': 'password'},
                    callback=self.check_login_response)

    def check_login_response(self, response):
        """Check the response returned by a login request to see if we are
        successfully logged in.
        """
        if "Hi Herman" in response.body:
            self.log("Successfully logged in. Let's start crawling!")
            # Now the crawling can begin..
            self.initialized()
        else:
            self.log("Bad times :(")
            # Something went wrong, we couldn't log in, so nothing happens.

    def parse_item(self, response):

        # Scrape data from page
</snippet></ROW><ROW><id>5857202</id><snippet>Item</snippet></ROW><ROW><id>5857329</id><snippet>entries = [x for x in Entry.gql("WHERE amount &gt; 0")]</snippet></ROW><ROW><id>5857550</id><snippet>filepath = '/var/log/apache2/error.log'
localpath = 'C:\\remote\\NewFile.log'
sftp.get(filepath, localpath)
</snippet></ROW><ROW><id>5857550</id><snippet>log_names = {
    "/var/log/apache2/error.log" : 'C:\\remote\\NewFile.log',
    "/var/log/apache/a.log" : 'C:\\remote\\NewFile_a.log',
} # add here all the log files you want to retrieve
for log_file, local_name in log_names.iteritems():
    sftp.get(log_file, local_name)
</snippet></ROW><ROW><id>5857551</id><snippet>$ ./configure &amp;&amp; make &amp;&amp; sudo make install
</snippet></ROW><ROW><id>5857551</id><snippet>sudo apt-get remove python
</snippet></ROW><ROW><id>5857713</id><snippet>command = "mymatlabprogram.exe %s"%(arg1,)
process = subprocess.Popen(command.split())
stdout, stderr = process.communicate()
</snippet></ROW><ROW><id>5858061</id><snippet>#!/usr/bin/env python
import numpy
import scipy.io.numpyio

npts=20000000
filename='bigdata.bin'

def main():
    data = (numpy.random.uniform(0,1,(npts,3))).astype(numpy.float32)
    data[:,2] = 0.1*data[:,2]+numpy.exp(-((data[:,1]-0.5)**2.)/(0.25**2))
    fd = open(filename,'wb')
    scipy.io.numpyio.fwrite(fd,data.size,data)
    fd.close()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>5858061</id><snippet>gnuplot&gt; set term png
gnuplot&gt; set output 'foo.png'
gnuplot&gt; plot 'bigdata.bin' binary format="%3float32" using 2:3 with dots
</snippet></ROW><ROW><id>5858061</id><snippet>#!/usr/bin/env python
import numpy
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

datatype=[('index',numpy.float32), ('floati',numpy.float32), 
        ('floatq',numpy.float32)]
filename='bigdata.bin'

def main():
    data = numpy.memmap(filename, datatype, 'r') 
    plt.plot(data['floati'],data['floatq'],'r,')
    plt.grid(True)
    plt.title("Signal-Diagram")
    plt.xlabel("Sample")
    plt.ylabel("In-Phase")
    plt.savefig('foo2.png')

if __name__ == "__main__":
    main()  
</snippet></ROW><ROW><id>5858118</id><snippet>isinstance(x, str)</snippet></ROW><ROW><id>5858118</id><snippet>AttributeError</snippet></ROW><ROW><id>5858118</id><snippet>isinstance(x, io.IOBase)
</snippet></ROW><ROW><id>5858118</id><snippet>io.IOBase</snippet></ROW><ROW><id>5858309</id><snippet>&lt;Window 
       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
       Title="IronPyWpf" Height="300" Width="300"&gt;
    &lt;Grid&gt;
        &lt;Button x:Name="button" Content="Button" Height="23" HorizontalAlignment="Left" Margin="103,226,0,0" VerticalAlignment="Top" Width="75"  /&gt;
        &lt;TextBox x:Name="textbox" Height="182" HorizontalAlignment="Left" Margin="24,21,0,0" VerticalAlignment="Top" Width="237" /&gt;
    &lt;/Grid&gt;
&lt;/Window&gt; 
</snippet></ROW><ROW><id>5858309</id><snippet>class MyWindow(Window):
    def __init__(self):
        wpf.LoadComponent(self, 'IronPyWpf.xaml')
        self._button.Content = 'My Button'
        self._textbox.Text = 'My Text'

    def get_button(self):
        return self._button

    def set_button(self, value):
        self._button = value

    button = property(get_button, set_button)

    def get_textbox(self):
        return self._textbox

    def set_textbox(self, value):
        self._textbox = value

    textbox = property(get_textbox, set_textbox)
</snippet></ROW><ROW><id>5858309</id><snippet>class MyWindow(Window):
    def __init__(self):
        wpf.LoadComponent(self, 'IronPyWpf.xaml')
        self.button.Content = 'My Button'
        self.textbox.Text = 'My Text'
</snippet></ROW><ROW><id>5858478</id><snippet>easy_install</snippet></ROW><ROW><id>5858478</id><snippet>apt-get</snippet></ROW><ROW><id>5858478</id><snippet>python-NAME</snippet></ROW><ROW><id>5858478</id><snippet>python-imaging</snippet></ROW><ROW><id>5858478</id><snippet>python-scipy</snippet></ROW><ROW><id>5858478</id><snippet>apt-cache search python | grep "^python-" | less</snippet></ROW><ROW><id>5858478</id><snippet>easy-install</snippet></ROW><ROW><id>5858478</id><snippet>sudo apt-get install python-setuptools
</snippet></ROW><ROW><id>5858478</id><snippet>easy-install</snippet></ROW><ROW><id>5858478</id><snippet>sudo easy_install colorworld
</snippet></ROW><ROW><id>5858478</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5858942</id><snippet>baseuser.py</snippet></ROW><ROW><id>5858942</id><snippet>class UserModel(db.Model):
    email = db.EmailProperty()
    password = db.StringProperty()
    role = db.StringProperty(default=roles.USER)
</snippet></ROW><ROW><id>5858942</id><snippet>from baseuser import UserModel

class User(UserModel):
    first_name = db.StringProperty()
    last_name = db.StringProperty()
    company = db.StringProperty()
</snippet></ROW><ROW><id>5858943</id><snippet>any(x in string for x in search)
</snippet></ROW><ROW><id>5858943</id><snippet>x in string</snippet></ROW><ROW><id>5858943</id><snippet>x</snippet></ROW><ROW><id>5858943</id><snippet>search</snippet></ROW><ROW><id>5858943</id><snippet>x in string</snippet></ROW><ROW><id>5858943</id><snippet>string</snippet></ROW><ROW><id>5858943</id><snippet>x</snippet></ROW><ROW><id>5858943</id><snippet>any()</snippet></ROW><ROW><id>5858943</id><snippet>True</snippet></ROW><ROW><id>5858943</id><snippet>import re
re.search("|".join(search), string)
</snippet></ROW><ROW><id>5859167</id><snippet>y = numpy.roll(x, 1)
y[0] = 0
</snippet></ROW><ROW><id>5859167</id><snippet>y = numpy.r_[0, x[:-1]]
</snippet></ROW><ROW><id>5859243</id><snippet>def t():
    while True:
        try:
            print q.get(timeout=1)
        except:
            break
</snippet></ROW><ROW><id>5859577</id><snippet>grocery_list = ['apples', 'bananas', 'oranges', 'milk']
for grocery in grocery_list:
  print(grocery, len(grocery))
</snippet></ROW><ROW><id>5859652</id><snippet>EntrezSystem2.PEntrez.ImagesDb.Images_SearchBar.Term=drug
EntrezSystem2.PEntrez.ImagesDb.Images_SearchBar.CurrDb=images
EntrezSystem2.PEntrez.ImagesDb.Images_ResultsPanel.Entrez_Pager.CurrPage=2
</snippet></ROW><ROW><id>5859652</id><snippet>CurrPage</snippet></ROW><ROW><id>5859652</id><snippet>MAX_PAGE</snippet></ROW><ROW><id>5859652</id><snippet>file_000003.html</snippet></ROW><ROW><id>5859652</id><snippet>POSTDATA</snippet></ROW><ROW><id>5859652</id><snippet>import cookielib
import json
import mechanize
import sys
import urllib
import urlparse

MAX_PAGE = 6
TERM = 'drug'
DEBUG = False

base_url = 'http://www.ncbi.nlm.nih.gov/images?term=' + TERM
browser = mechanize.Browser()
browser.set_handle_robots(False)
browser.set_handle_referer(True)
browser.set_debug_http(DEBUG)
browser.set_debug_responses(DEBUG)
cjar = cookielib.CookieJar()
browser.set_cookiejar(cjar)

# make first GET request. this will populate the cookie
res = browser.open(base_url)

def write(num, data):
    with open('file_%06d.html' % num, 'wb') as out:
        out.write(data)

def encode(kvs):
    res = []
    for key, vals in kvs.iteritems():
        if isinstance(vals, list):
            for v in vals:
                res.append('%s=%s' % (key, urllib.quote(v)))
        else:
            res.append('%s=%s' % (key, urllib.quote(vals)))
    return '&amp;'.join(res)

write(1, res.read())

# set this var equal to the contents of this: http://pastebin.com/UfejW3G0
POSTDATA = '''&lt;post data&gt;'''

# parse the embedded json vars into POST parameters
PREFIX1 = 'EntrezSystem2.PEntrez.ImagesDb.'
PREFIX2 = 'EntrezSystem2.PEntrez.DbConnector.'
params = dict((k, v[0]) for k, v in urlparse.parse_qs(POSTDATA).iteritems())

base_url = 'http://www.ncbi.nlm.nih.gov/images'
for page in range(2, MAX_PAGE):
    params[PREFIX1 + 'Images_ResultsPanel.Entrez_Pager.CurrPage'] = str(page)
    params[PREFIX1 + 'Images_ResultsPanel.Entrez_Pager.cPage'] = [str(page-1)]*2

    data = encode(params)
    req = mechanize.Request(base_url, data)
    cjar.add_cookie_header(req)
    req.add_header('Content-Type', 'application/x-www-form-urlencoded')
    req.add_header('Referer', base_url)
    res = browser.open(req)

    write(page, res.read())
</snippet></ROW><ROW><id>5859965</id><snippet>winpcap development is free. http://www.winpcap.org/install/bin/WpdPack_4_0_2.zip

1) Download MinGW32. Install to c:\wingw32
2) path=%path%;c:\wingw32\bin
3) Download winpcap development pack from above. Unzip to c:\WpdPack
4) From pypcap-1.1 directory. 
   &gt; python .\setup.py --with-pcap="C:\WpdPack"
   &gt; python .\setup.py build -cmingw32
   &gt; python .\setup.py install
</snippet></ROW><ROW><id>5860569</id><snippet>aglwb3J0Zm9saW9yCwsSBFVzZXIY6gEM</snippet></ROW><ROW><id>5860569</id><snippet>user = db.Key('aglwb3J0Zm9saW9yCwsSBFVzZXIY6gEM')
que = db.GqlQuery("SELECT * FROM Portfolio_Owners WHERE user_id = :1", user)
</snippet></ROW><ROW><id>5860569</id><snippet>user = db.get('aglwb3J0Zm9saW9yCwsSBFVzZXIY6gEM')
que = user.Portfolio_Owners_set
</snippet></ROW><ROW><id>5860584</id><snippet>pygame.surface</snippet></ROW><ROW><id>5860584</id><snippet>images = []
for image_name in image_names:
    images.append(pygame.image.load(image_name))

background = pygame.display.get_surface()
for image in images:
    back.blit(image, image_position) # how you compute the image position is your stuff ;)

pygame.display.update()
</snippet></ROW><ROW><id>5860775</id><snippet>__unicode__</snippet></ROW><ROW><id>5860775</id><snippet>class System(models.Model):
    operating_system = models.CharField(...)
    language = models.CharField(...)
    locale= models.CharField(...)
    name = models.CharField(editable=False, ...)

    def save(self, *args, **kwargs):
        self.name = self._calculate_name()
        super(System, self).save(*args, **kwargs)

    def __unicode__(self):
        return self.name

    def _calculate_name(self):
        # all that string manipulation and relationship stuff
</snippet></ROW><ROW><id>5860775</id><snippet>System.objects.filter(...).order_by('name')
</snippet></ROW><ROW><id>5860775</id><snippet>name</snippet></ROW><ROW><id>5860775</id><snippet>name</snippet></ROW><ROW><id>5860775</id><snippet>System</snippet></ROW><ROW><id>5860775</id><snippet>save()</snippet></ROW><ROW><id>5860775</id><snippet>.name</snippet></ROW><ROW><id>5860775</id><snippet>.name</snippet></ROW><ROW><id>5860775</id><snippet>save()</snippet></ROW><ROW><id>5860904</id><snippet>Tcl/Tk</snippet></ROW><ROW><id>5860928</id><snippet>perl -CSAD -i.orig -pe 'tr[：][:]' file1
</snippet></ROW><ROW><id>5860928</id><snippet>perl -CSAD -i.orig -pe 'tr[\x{FF1A}][:]' file1
</snippet></ROW><ROW><id>5860928</id><snippet>perl -CSAD -i.orig -Mcharnames=:full -pe 'tr[\N{FULLWIDTH COLON}][:]' file1
</snippet></ROW><ROW><id>5860928</id><snippet>perl -CSAD -i.orig -Mcharnames=:full -pe 'tr[\N{FULLWIDTH EXCLAMATION MARK}\N{FULLWIDTH QUOTATION MARK}\{FULLWIDTH NUMBER SIGN}\N{FULLWIDTH DOLLAR SIGN}\N{FULLWIDTH PERCENT SIGN}\N{FULLWIDTH AMPERSAND}\{FULLWIDTH APOSTROPHE}\N{FULLWIDTH LEFT PARENTHESIS}\N{FULLWIDTH RIGHT PARENTHESIS}\N{FULLWIDTH ASTERISK}\N{FULLWIDTH PLUS SIGN}\N{FULLWIDTH COMMA}\N{FULLWIDTH HYPHEN-MINUS}\N{FULLWIDTH FULL STOP}\N{FULLWIDTH SOLIDUS}][\N{EXCLAMATION MARK}\N{QUOTATION MARK}\N{NUMBER SIGN}\N{DOLLAR SIGN}\N{PERCENT SIGN}\{AMPERSAND}\N{APOSTROPHE}\N{LEFT PARENTHESIS}\N{RIGHT PARENTHESIS}\N{ASTERISK}\N{PLUS SIGN}\N{COMMA}\{HYPHEN-MINUS}\N{FULL STOP}\N{SOLIDUS}]' file1
</snippet></ROW><ROW><id>5861233</id><snippet>647     def __init__(self, choices=(), required=True, widget=None, label=None,
648                  initial=None, help_text=None, *args, **kwargs):
649         super(ChoiceField, self).__init__(required=required, widget=widget, label=label,
650                                         initial=initial, help_text=help_text, *args, **kwargs)
</snippet></ROW><ROW><id>5861233</id><snippet>species = f.ChoiceField(label='Species', choices=Specimen.SPECIES)
tests = f.MultipleChoiceField(label='Test', choices=Test.TESTS, widget=f.CheckboxSelectMultiple())
</snippet></ROW><ROW><id>5861233</id><snippet>sample_type = f.ChoiceField(label='Type of sample', choices=TYPE_CHOICES)
</snippet></ROW><ROW><id>5861357</id><snippet>from collections import defaultdict

bigdict = defaultdict(dict)
for ln in file:
    a,b,c,d,e = ln.split()
    bigdict[(a,b)][(c,d)] = e
</snippet></ROW><ROW><id>5861357</id><snippet>(a,b)</snippet></ROW><ROW><id>5861357</id><snippet>'%s %s' % (a, b)</snippet></ROW><ROW><id>5861357</id><snippet>(c,d)</snippet></ROW><ROW><id>5861406</id><snippet>a, b, c, d, e = range(5)
arg_dict = lambda l: dict((k, globals()[k]) for k in l.split(', '))
</snippet></ROW><ROW><id>5861406</id><snippet>arg_dict('a, b, c, d, e') =&gt; {'a': 0, 'c': 2, 'b': 1, 'e': 4, 'd': 3}</snippet></ROW><ROW><id>5861406</id><snippet>f(**arg_dict('a, b, c, d, e'))
</snippet></ROW><ROW><id>5861406</id><snippet>globals()</snippet></ROW><ROW><id>5861406</id><snippet>eval()</snippet></ROW><ROW><id>5861406</id><snippet>arg_dict = lambda l: dict(zip(l.split(', '), eval(l)))
</snippet></ROW><ROW><id>5861406</id><snippet>locals()</snippet></ROW><ROW><id>5861406</id><snippet>globals()</snippet></ROW><ROW><id>5861406</id><snippet>arg_dict = lambda l, d=locals(): dict((k, d[k]) for k in l.split(', '))
f(**arg_dict('a, b, c, d, e'))
</snippet></ROW><ROW><id>5861406</id><snippet>locals()</snippet></ROW><ROW><id>5861420</id><snippet>artistName = artistName.replace(' ', '-').lower()
if artistName.startswith('the-'):
    artistName = artistName[4:]
artistName = ''.join(e for e in artistName if e.isalnum() or e == '-')
</snippet></ROW><ROW><id>5861559</id><snippet>errorIndication, errorStatus, errorIndex, \
varBindTable = cmdgen.CommandGenerator().bulkCmd(
            cmdgen.CommunityData('test-agent', 'public'),
            cmdgen.UdpTransportTarget(('localhost', 161)),
            0,
            25,
            (1,3,6,1,2,1,4,20), # ipAddrTable
            (1,3,6,1,2,1,4,21), # ipRouteTable
        )
</snippet></ROW><ROW><id>5861559</id><snippet>[mpenning@hotcoffee ~]$ cat sn_GetBulk.py 
from pysnmp.entity.rfc3413.oneliner import cmdgen  

errorIndication, errorStatus, errorIndex, \
varBindTable = cmdgen.CommandGenerator().bulkCmd(  
            cmdgen.CommunityData('test-agent', 'public'),  
            cmdgen.UdpTransportTarget(('192.168.49.49', 161)),  
            0, 
            25, 
            (1,3,6,1,2,1,4,20), # ipAddrTable OID . This works fine.
            (1,3,6,1,2,1,4,21), # ipRouteTable
            (1,3,6,1,2,1,4,22), # ipNetToMediaTable
        )

if errorIndication:
   print errorIndication
else:
    if errorStatus:
        print '%s at %s\n' % (
            errorStatus.prettyPrint(),
            errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'
            )
    else:
        for varBindTableRow in varBindTable:
            for name, val in varBindTableRow:
                print '%s = %s' % (name.prettyPrint(), val.prettyPrint())

[mpenning@hotcoffee ~]$
</snippet></ROW><ROW><id>5861559</id><snippet>[mpenning@hotcoffee ~]$ python sn_GetBulk.py
1.3.6.1.2.1.4.20.1.1.128.0.0.1 = 128.0.0.1
1.3.6.1.2.1.4.22.1.1.34.192.168.49.1 = 34
1.3.6.1.2.1.4.22.1.1.34.192.168.49.1 = 34
1.3.6.1.2.1.4.20.1.1.128.0.0.16 = 128.0.0.16
1.3.6.1.2.1.4.22.1.1.34.192.168.49.49 = 34
1.3.6.1.2.1.4.22.1.1.34.192.168.49.49 = 34
1.3.6.1.2.1.4.20.1.1.128.0.0.32 = 128.0.0.32
1.3.6.1.2.1.4.22.1.1.38.128.0.0.1 = 38
1.3.6.1.2.1.4.22.1.1.38.128.0.0.1 = 38
1.3.6.1.2.1.4.20.1.1.128.0.0.127 = 128.0.0.127
1.3.6.1.2.1.4.22.1.1.38.128.0.0.16 = 38
1.3.6.1.2.1.4.22.1.1.38.128.0.0.16 = 38
1.3.6.1.2.1.4.20.1.1.192.168.49.49 = 192.168.49.49
1.3.6.1.2.1.4.22.1.1.38.128.0.0.32 = 38
1.3.6.1.2.1.4.22.1.1.38.128.0.0.32 = 38
1.3.6.1.2.1.4.20.1.2.128.0.0.1 = 38
1.3.6.1.2.1.4.22.1.1.502.128.0.0.127 = 502
1.3.6.1.2.1.4.22.1.1.502.128.0.0.127 = 502
1.3.6.1.2.1.4.20.1.2.128.0.0.16 = 38
1.3.6.1.2.1.4.22.1.2.34.192.168.49.1 = '\x00"V\xb8\x1c\xbf'
1.3.6.1.2.1.4.22.1.2.34.192.168.49.1 = '\x00"V\xb8\x1c\xbf'
1.3.6.1.2.1.4.20.1.2.128.0.0.32 = 38
1.3.6.1.2.1.4.22.1.2.34.192.168.49.49 = ',k\xf54=?'
1.3.6.1.2.1.4.22.1.2.34.192.168.49.49 = ',k\xf54=?'
1.3.6.1.2.1.4.20.1.2.128.0.0.127 = 502
1.3.6.1.2.1.4.22.1.2.38.128.0.0.1 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.22.1.2.38.128.0.0.1 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.20.1.2.192.168.49.49 = 34
1.3.6.1.2.1.4.22.1.2.38.128.0.0.16 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.22.1.2.38.128.0.0.16 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.20.1.3.128.0.0.1 = 192.0.0.0
1.3.6.1.2.1.4.22.1.2.38.128.0.0.32 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.22.1.2.38.128.0.0.32 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.20.1.3.128.0.0.16 = 192.0.0.0
1.3.6.1.2.1.4.22.1.2.502.128.0.0.127 = ',k\xf54=\x00'
1.3.6.1.2.1.4.22.1.2.502.128.0.0.127 = ',k\xf54=\x00'
1.3.6.1.2.1.4.20.1.3.128.0.0.32 = 192.0.0.0
1.3.6.1.2.1.4.22.1.3.34.192.168.49.1 = 192.168.49.1
1.3.6.1.2.1.4.22.1.3.34.192.168.49.1 = 192.168.49.1
1.3.6.1.2.1.4.20.1.3.128.0.0.127 = 192.0.0.0
1.3.6.1.2.1.4.22.1.3.34.192.168.49.49 = 192.168.49.49
1.3.6.1.2.1.4.22.1.3.34.192.168.49.49 = 192.168.49.49
1.3.6.1.2.1.4.20.1.3.192.168.49.49 = 255.255.255.0
1.3.6.1.2.1.4.22.1.3.38.128.0.0.1 = 128.0.0.1
1.3.6.1.2.1.4.22.1.3.38.128.0.0.1 = 128.0.0.1
1.3.6.1.2.1.4.20.1.4.128.0.0.1 = 1
1.3.6.1.2.1.4.22.1.3.38.128.0.0.16 = 128.0.0.16
1.3.6.1.2.1.4.22.1.3.38.128.0.0.16 = 128.0.0.16
1.3.6.1.2.1.4.20.1.4.128.0.0.16 = 1
1.3.6.1.2.1.4.22.1.3.38.128.0.0.32 = 128.0.0.32
1.3.6.1.2.1.4.22.1.3.38.128.0.0.32 = 128.0.0.32
1.3.6.1.2.1.4.20.1.4.128.0.0.32 = 1
1.3.6.1.2.1.4.22.1.3.502.128.0.0.127 = 128.0.0.127
1.3.6.1.2.1.4.22.1.3.502.128.0.0.127 = 128.0.0.127
1.3.6.1.2.1.4.20.1.4.128.0.0.127 = 1
1.3.6.1.2.1.4.22.1.4.34.192.168.49.1 = 3
1.3.6.1.2.1.4.22.1.4.34.192.168.49.1 = 3
1.3.6.1.2.1.4.20.1.4.192.168.49.49 = 1
1.3.6.1.2.1.4.22.1.4.34.192.168.49.49 = 4
1.3.6.1.2.1.4.22.1.4.34.192.168.49.49 = 4
1.3.6.1.2.1.4.20.1.5.128.0.0.1 = 65535
1.3.6.1.2.1.4.22.1.4.38.128.0.0.1 = 4
1.3.6.1.2.1.4.22.1.4.38.128.0.0.1 = 4
1.3.6.1.2.1.4.20.1.5.128.0.0.16 = 65535
1.3.6.1.2.1.4.22.1.4.38.128.0.0.16 = 4
1.3.6.1.2.1.4.22.1.4.38.128.0.0.16 = 4
1.3.6.1.2.1.4.20.1.5.128.0.0.32 = 65535
1.3.6.1.2.1.4.22.1.4.38.128.0.0.32 = 4
1.3.6.1.2.1.4.22.1.4.38.128.0.0.32 = 4
1.3.6.1.2.1.4.20.1.5.128.0.0.127 = 65535
1.3.6.1.2.1.4.22.1.4.502.128.0.0.127 = 4
1.3.6.1.2.1.4.22.1.4.502.128.0.0.127 = 4
1.3.6.1.2.1.4.20.1.5.192.168.49.49 = 65535
1.3.6.1.2.1.4.23.0 = 0
1.3.6.1.2.1.4.23.0 = 0
1.3.6.1.2.1.4.22.1.1.34.192.168.49.1 = 34
1.3.6.1.2.1.4.24.3.0 = 6
1.3.6.1.2.1.4.24.3.0 = 6
1.3.6.1.2.1.4.22.1.1.34.192.168.49.49 = 34
1.3.6.1.2.1.4.24.4.1.1.192.168.0.0.255.255.0.0.0.192.168.49.1 = 192.168.0.0
1.3.6.1.2.1.4.24.4.1.1.192.168.0.0.255.255.0.0.0.192.168.49.1 = 192.168.0.0
1.3.6.1.2.1.4.22.1.1.38.128.0.0.1 = 38
1.3.6.1.2.1.4.24.4.1.1.192.168.49.0.255.255.255.0.0.0.0.0.0 = 192.168.49.0
1.3.6.1.2.1.4.24.4.1.1.192.168.49.0.255.255.255.0.0.0.0.0.0 = 192.168.49.0
1.3.6.1.2.1.4.22.1.1.38.128.0.0.16 = 38
1.3.6.1.2.1.4.24.4.1.1.192.168.49.49.255.255.255.255.0.0.0.0.0 = 192.168.49.49
1.3.6.1.2.1.4.24.4.1.1.192.168.49.49.255.255.255.255.0.0.0.0.0 = 192.168.49.49
1.3.6.1.2.1.4.22.1.1.38.128.0.0.32 = 38
1.3.6.1.2.1.4.24.4.1.1.224.0.0.2.255.255.255.255.0.0.0.0.0 = 224.0.0.2
1.3.6.1.2.1.4.24.4.1.1.224.0.0.2.255.255.255.255.0.0.0.0.0 = 224.0.0.2
1.3.6.1.2.1.4.22.1.1.502.128.0.0.127 = 502
1.3.6.1.2.1.4.24.4.1.1.224.0.0.13.255.255.255.255.0.0.0.0.0 = 224.0.0.13
1.3.6.1.2.1.4.24.4.1.1.224.0.0.13.255.255.255.255.0.0.0.0.0 = 224.0.0.13
1.3.6.1.2.1.4.22.1.2.34.192.168.49.1 = '\x00"V\xb8\x1c\xbf'
1.3.6.1.2.1.4.24.4.1.1.224.0.0.22.255.255.255.255.0.0.0.0.0 = 224.0.0.22
1.3.6.1.2.1.4.24.4.1.1.224.0.0.22.255.255.255.255.0.0.0.0.0 = 224.0.0.22
1.3.6.1.2.1.4.22.1.2.34.192.168.49.49 = ',k\xf54=?'
1.3.6.1.2.1.4.24.4.1.2.192.168.0.0.255.255.0.0.0.192.168.49.1 = 255.255.0.0
1.3.6.1.2.1.4.24.4.1.2.192.168.0.0.255.255.0.0.0.192.168.49.1 = 255.255.0.0
1.3.6.1.2.1.4.22.1.2.38.128.0.0.1 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.24.4.1.2.192.168.49.0.255.255.255.0.0.0.0.0.0 = 255.255.255.0
1.3.6.1.2.1.4.24.4.1.2.192.168.49.0.255.255.255.0.0.0.0.0.0 = 255.255.255.0
1.3.6.1.2.1.4.22.1.2.38.128.0.0.16 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.24.4.1.2.192.168.49.49.255.255.255.255.0.0.0.0.0 = 255.255.255.255
1.3.6.1.2.1.4.24.4.1.2.192.168.49.49.255.255.255.255.0.0.0.0.0 = 255.255.255.255
1.3.6.1.2.1.4.22.1.2.38.128.0.0.32 = '\x00\x0b\xca\xfe\x00\x00'
1.3.6.1.2.1.4.24.4.1.2.224.0.0.2.255.255.255.255.0.0.0.0.0 = 255.255.255.255
1.3.6.1.2.1.4.24.4.1.2.224.0.0.2.255.255.255.255.0.0.0.0.0 = 255.255.255.255
1.3.6.1.2.1.4.22.1.2.502.128.0.0.127 = ',k\xf54=\x00'
1.3.6.1.2.1.4.24.4.1.2.224.0.0.13.255.255.255.255.0.0.0.0.0 = 255.255.255.255
1.3.6.1.2.1.4.24.4.1.2.224.0.0.13.255.255.255.255.0.0.0.0.0 = 255.255.255.255
1.3.6.1.2.1.4.22.1.3.34.192.168.49.1 = 192.168.49.1
1.3.6.1.2.1.4.24.4.1.2.224.0.0.22.255.255.255.255.0.0.0.0.0 = 255.255.255.255
1.3.6.1.2.1.4.24.4.1.2.224.0.0.22.255.255.255.255.0.0.0.0.0 = 255.255.255.255
1.3.6.1.2.1.4.22.1.3.34.192.168.49.49 = 192.168.49.49
1.3.6.1.2.1.4.24.4.1.3.192.168.0.0.255.255.0.0.0.192.168.49.1 = 0
1.3.6.1.2.1.4.24.4.1.3.192.168.0.0.255.255.0.0.0.192.168.49.1 = 0
1.3.6.1.2.1.4.22.1.3.38.128.0.0.1 = 128.0.0.1
1.3.6.1.2.1.4.24.4.1.3.192.168.49.0.255.255.255.0.0.0.0.0.0 = 0
1.3.6.1.2.1.4.24.4.1.3.192.168.49.0.255.255.255.0.0.0.0.0.0 = 0
1.3.6.1.2.1.4.22.1.3.38.128.0.0.16 = 128.0.0.16
1.3.6.1.2.1.4.24.4.1.3.192.168.49.49.255.255.255.255.0.0.0.0.0 = 0
1.3.6.1.2.1.4.24.4.1.3.192.168.49.49.255.255.255.255.0.0.0.0.0 = 0
[mpenning@hotcoffee ~]$ python
Python 2.6.6 (r266:84292, Dec 26 2010, 22:31:48) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pysnmp
&gt;&gt;&gt; pysnmp.version
(4, 1, 16)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5861694</id><snippet>dict</snippet></ROW><ROW><id>5861694</id><snippet>PyDict_Merge</snippet></ROW><ROW><id>5861694</id><snippet>PyDict_Merge(PyObject *a, PyObject *b, int override)
</snippet></ROW><ROW><id>5861694</id><snippet>copy()</snippet></ROW><ROW><id>5861743</id><snippet>import pylab
import matplotlib.colors
import numpy

im = pylab.imread('lena.png').sum(axis=2) # make grayscale
pylab.imshow(im, cmap=pylab.cm.gray)
pylab.title('orig')
imvals = numpy.sort(im.flatten())
lo = imvals[0]
hi = imvals[-1]
steps = (imvals[::len(imvals)/256] - lo) / (hi - lo)
num_steps = float(len(steps))
interps = [(s, idx/num_steps, idx/num_steps) for idx, s in enumerate(steps)]
interps.append((1, 1, 1))
cdict = {'red' : interps,
         'green' : interps,
         'blue' : interps}
histeq_cmap = matplotlib.colors.LinearSegmentedColormap('HistEq', cdict)
pylab.figure()
pylab.imshow(im, cmap=histeq_cmap)
pylab.title('histeq')
pylab.show()
</snippet></ROW><ROW><id>5861781</id><snippet>HOST</snippet></ROW><ROW><id>5861781</id><snippet>"HOST": '/path/to/your/socket.sock'
</snippet></ROW><ROW><id>5861903</id><snippet>self</snippet></ROW><ROW><id>5861925</id><snippet>", ".join(['SUM({n}) AS {n}'.format(n=x) for x in a])
# Returns SUM(foo) AS foo, SUM(bar) AS bar, SUM(doh) AS doh, SUM(rae) AS rae
</snippet></ROW><ROW><id>5861925</id><snippet>a</snippet></ROW><ROW><id>5861925</id><snippet>", ".join('SUM({n}) AS {n}'.format(n=x) for x in a)
</snippet></ROW><ROW><id>5861933</id><snippet>ls</snippet></ROW><ROW><id>5861933</id><snippet>import sys
sys.stderr = open('/dev/null')       # Silence silly warnings from paramiko
import paramiko as pm
sys.stderr = sys.__stderr__
import os

class AllowAllKeys(pm.MissingHostKeyPolicy):
    def missing_host_key(self, client, hostname, key):
        return

HOST = '127.0.0.1'
USER = ''
PASSWORD = ''

client = pm.SSHClient()
client.load_system_host_keys()
client.load_host_keys(os.path.expanduser('~/.ssh/known_hosts'))
client.set_missing_host_key_policy(AllowAllKeys())
client.connect(HOST, username=USER, password=PASSWORD)

channel = client.invoke_shell()
stdin = channel.makefile('wb')
stdout = channel.makefile('rb')

stdin.write('''
cd tmp
ls
exit
''')
print stdout.read()

stdout.close()
stdin.close()
client.close()
</snippet></ROW><ROW><id>5862001</id><snippet>import sys

if len(sys.argv) != 3:
    print 'parameters: list1 list2'
    sys.exit(1)

list1 = []
for line in file(sys.argv[1]):
    fields = line.split()
    f1 = fields[0]
    f2, f3 = fields[1].split('-')
    list1.append((f1, int(f2), int(f3), [], ))

for line in file(sys.argv[2]):
    value = int(line)
    for name, lb, ub, values in list1:
        if value &gt;= lb and value &lt;= ub:
            values.append(str(value))

for name, lb, ub, values in list1:
    if values: vals = ','.join(values)
    else: vals = ''
    print '%s %d-%d %s' % (name, lb, ub, vals, )
</snippet></ROW><ROW><id>5862153</id><snippet>format</snippet></ROW><ROW><id>5862153</id><snippet>args = ["jim", "hello"]
kwargs = {"sender": "s0lder"}
print("tell {0} {sender} says: {1}".format(*args, **kwargs))
</snippet></ROW><ROW><id>5862153</id><snippet>tell jim s0lder says: hello
</snippet></ROW><ROW><id>5862315</id><snippet>object</snippet></ROW><ROW><id>5862315</id><snippet>__slots__</snippet></ROW><ROW><id>5862315</id><snippet>class c(object):
    __slots__ = "foo", "bar", "baz"

a = c()

a.foo = 3  # works
a.b   = 3  # AttributeError
</snippet></ROW><ROW><id>5862315</id><snippet>__dict__</snippet></ROW><ROW><id>5862315</id><snippet>__setattr__()</snippet></ROW><ROW><id>5862315</id><snippet>__slots__</snippet></ROW><ROW><id>5862368</id><snippet>x = """NetConn_msa[0].time=0.0

NetConn_msa[1].time=0.0 etc for 60 elements. """

print re.sub("(\]\.\w+)=0.0","\\1=0.5",x)

#NetConn_msa[0].time=0.5

#NetConn_msa[1].time=0.5 etc for 60 elements. 
</snippet></ROW><ROW><id>5862552</id><snippet>control = win32gui.FindWindowEx(window, 0, "Static", 0)
</snippet></ROW><ROW><id>5862599</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>5862842</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.template.defaultfilters import slugify
</snippet></ROW><ROW><id>5863084</id><snippet>import
data = urllib.urlencode({'name':'joe', 'password':'1234'})
activation_url = 'http://example.com/activate?%s' % data
</snippet></ROW><ROW><id>5863385</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>5863385</id><snippet>from itertools import takewhile

if K is None:
    condition = lambda x: True
else:
    condition = lambda x: x[0] &lt; K

for i,line in takewhile(condition, enumerate(af)):
    bf.write(line)
</snippet></ROW><ROW><id>5863539</id><snippet>fun(ctypes.c_void_p(indata.ctypes.data), ctypes.c_void_p(outdata.ctypes.data))
</snippet></ROW><ROW><id>5863539</id><snippet>fun(ctypes.c_void_p(indata.ctypes.data), ctypes.c_int(5), ctypes.c_int(6),
    ctypes.c_void_p(outdata.ctypes.data))
</snippet></ROW><ROW><id>5863546</id><snippet>def create(mime_type='application/octet-stream',
           _blobinfo_uploaded_filename=None):
  """Create a writable blobstore file.

  Args:
    mime_type: Resulting blob content MIME type as string.
    _blobinfo_uploaded_filename: Resulting blob's BlobInfo file name as string.

  Returns:
    A file name for blobstore file. This file can be opened for write
    by File API open function. To read the file or obtain its blob key, finalize
    it and call get_blob_key function.
  """
</snippet></ROW><ROW><id>5863653</id><snippet>[[5, 1, 3], [4, 6, 2]]</snippet></ROW><ROW><id>5863653</id><snippet>extend</snippet></ROW><ROW><id>5863653</id><snippet>L.extend(list1)
L.extend(list2)
print L      # [5, 1, 3, 4, 6, 2]
</snippet></ROW><ROW><id>5864013</id><snippet>string.split(":")[1]
</snippet></ROW><ROW><id>5864098</id><snippet>did_earn</snippet></ROW><ROW><id>5864313</id><snippet>"".join(reversed([a[i:i+2] for i in range(0, len(a), 2)]))
</snippet></ROW><ROW><id>5864313</id><snippet>&gt;&gt;&gt; [a[i:i+2] for i in range(0, len(a), 2)]
['AB', 'CD', 'EF', 'GH']
</snippet></ROW><ROW><id>5864552</id><snippet>str</snippet></ROW><ROW><id>5864552</id><snippet>unicode</snippet></ROW><ROW><id>5864552</id><snippet>def escape(s):
    ch = (ord(c) for c in s)
    return ''.join(('\\x%02x' % c) if c &lt;= 255 else ('\\u%04x' % c) for c in ch)

for text in (u'\u2018\u2019hello there\u201c\u201d', 'hello there'):
    esc = escape(text)
    print esc

    # code below is to verify by round-tripping
    import ast
    assert text == ast.literal_eval('u"' + esc + '"')
</snippet></ROW><ROW><id>5864552</id><snippet>\u2018\u2019\x68\x65\x6c\x6c\x6f\x20\x74\x68\x65\x72\x65\u201c\u201d
\x68\x65\x6c\x6c\x6f\x20\x74\x68\x65\x72\x65
</snippet></ROW><ROW><id>5864732</id><snippet>import getopt, math, random, sys, time, types, wx, subprocess

from multiprocessing import Process, Queue, cpu_count, current_process, freeze_support
from Queue import Empty

class MyFrame(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, wx.Point(700, 500), wx.Size(300, 200))

        self.panel = wx.Panel(self, wx.ID_ANY)

        #widgets
        self.start_bt = wx.Button(self.panel, wx.ID_ANY, "Start")
        self.Bind(wx.EVT_BUTTON, self.OnButton, self.start_bt)

        self.output_tc = wx.TextCtrl(self.panel, wx.ID_ANY, style=wx.TE_MULTILINE|wx.TE_READONLY)

        # sizer
        self.sizer = wx.GridBagSizer(5, 5)
        self.sizer.Add(self.start_bt, (0, 0), flag=wx.ALIGN_CENTER|wx.LEFT|wx.TOP|wx.RIGHT, border=5)
        self.sizer.Add(self.output_tc, (1, 0), flag=wx.EXPAND|wx.LEFT|wx.RIGHT|wx.BOTTOM, border=5)
        self.sizer.AddGrowableCol(0)
        self.sizer.AddGrowableRow(1)
        self.panel.SetSizer(self.sizer)

        # Set some program flags
        self.keepgoing = True
        self.i = 0
        self.j = 0


    def OnButton(self, event):
        self.start_bt.Enable(False)

        self.numtasks = 4
        self.numproc = 2
        #self.numproc = cpu_count()
        self.output_tc.AppendText('Number of processes = %d\n' % self.numproc)

        # Create the queues
        self.taskQueue = Queue()
        self.outputQueue = Queue()

        # Create the task list
        self.Tasks = range(self.numtasks)

        # The worker processes...
        for n in range(self.numproc):
            process = Process(target=self.worker, args=(self.taskQueue, self.outputQueue))
            process.start()

        # Start processing tasks
        self.processTasks(self.update)

        if (self.keepgoing):
            self.start_bt.Enable(True)

    def processTasks(self, resfunc=None):
        self.keepgoing = True

        # Submit first set of tasks
        numprocstart = min(self.numproc, self.numtasks)
        for self.i in range(numprocstart):
            self.taskQueue.put(self.Tasks[self.i])

        self.j = -1 # done queue index
        self.i = numprocstart - 1 # task queue index
        while (self.j &lt; self.i):
            # Get and print results
            self.j += 1
            output = None
            while output != 'STOP!':
                try:
                    output = self.outputQueue.get() 
                    if output != 'STOP!': 
                        resfunc(output)
                except Empty:
                    break

            if ((self.keepgoing) and (self.i + 1 &lt; self.numtasks)):
                # Submit another task
                self.i += 1
                self.taskQueue.put(self.Tasks[self.i])

    def update(self, output):
        self.output_tc.AppendText('%s PID=%d Task=%d : %s\n' % output)
        wx.YieldIfNeeded()

    def worker(self, inputq, outputq):
        while True:
            try:
                tasknum = inputq.get()
                print '## Now Running: ', tasknum #this goes to terminal/console. Add it to outputq if you'd like it on the TextCtrl.
                command = ['./script.sh']
                p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
                while True:
                    r = p.stdout.readline()
                    if not r:
                        outputq.put('STOP!')
                        break
                    outputq.put(( current_process().name, current_process().pid, tasknum, r.rstrip()))
            except Empty:
                break

    # The worker must not require any existing object for execution!
    worker = classmethod(worker)

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, -1, 'stdout to GUI using multiprocessing')
        self.frame.Show(True)
        self.frame.Center()
        return True

if __name__ == '__main__':
    freeze_support()
    app = MyApp(0)
    app.MainLoop()
</snippet></ROW><ROW><id>5864738</id><snippet>packet.get_data_as_string()</snippet></ROW><ROW><id>5864738</id><snippet>print child</snippet></ROW><ROW><id>5864738</id><snippet>def display_hex(pkt, cols=8):
    size = cols * 4
    data = ''.join('%02x' % ord(b) for b in pkt.get_data_as_string())
    for i in range(0, len(data), size):
        for j in range(0, size, 4):
            print data[i+j:i+j+4],
        print

if isinstance(child, TCP):
    display_hex(child)
</snippet></ROW><ROW><id>5864738</id><snippet>1703 0103 b0b1 9387 be4e fe00 9230 6192
e3bb 217e c1cb 8511 556f f986 4f31 542d
15c6 f42e f3bb 93d5 cf33 f126 c174 dbc4
... snip ...
8b1d 8707 96d6 7a18 2aab fd0b 48ee c4eb
b7d8 a67f 8bc0 597d 1044 a076 1a9e 24ba
959b fda3 1adb 2384 669c e6c8 c3b5 bef4
1189 eda8 3e  
</snippet></ROW><ROW><id>5865088</id><snippet>class Media(models.Model):
    pass

class Something(models.Model):
    media = models.ForeignKey(Media)

class Picture(Media):
    foo = models.CharField(max_length=100)

    def get_tiny_object(self):
        return self.foo

class Video(Media):
    bar = models.CharField(max_length=100)

    def get_tiny_object(self):
        return self.bar

picture = Picture.objects.create(foo='some picture')
video = Video.objects.create(bar='some video')
something1 = Something.objects.create(media=picture)
something2 = Something.objects.create(media=video)
print something1.media.get_tiny_object() # this is a picture remember?
print something2.media.get_tiny_object() # and lo, here is a video
</snippet></ROW><ROW><id>5865248</id><snippet>Postgresql:
BEGIN;
    ALTER TABLE "TestLog"
        ALTER COLUMN "failed_reqs" TYPE TEXT,
        ALTER COLUMN "passed_reqs" TYPE TEXT;
COMMIT;

MySQL:
BEGIN;
    ALTER TABLE TestLog
        MODIFY failed_reqs TEXT NULL,
        MODIFY passed_reqs TEXT NULL;
COMMIT;
</snippet></ROW><ROW><id>5865336</id><snippet>def get_my_class(name):
    return type(name, (db.Expando,), {})
</snippet></ROW><ROW><id>5865571</id><snippet>"C:/PerfLocal_PAL"</snippet></ROW><ROW><id>5865571</id><snippet>r"C:\PerfLocal_PAL"</snippet></ROW><ROW><id>5865571</id><snippet>"C:\\PerfLocal_PAL"</snippet></ROW><ROW><id>5865571</id><snippet>chdir</snippet></ROW><ROW><id>5865571</id><snippet>subprocess.call</snippet></ROW><ROW><id>5865571</id><snippet>stdin</snippet></ROW><ROW><id>5865571</id><snippet>stdout</snippet></ROW><ROW><id>5865571</id><snippet>stderr</snippet></ROW><ROW><id>5865571</id><snippet>subprocess.call("start", shell=True)
</snippet></ROW><ROW><id>5865571</id><snippet>"/D"</snippet></ROW><ROW><id>5865571</id><snippet>start</snippet></ROW><ROW><id>5865571</id><snippet>subprocess.call(["start", "/DC:\\PerfLocal_PAL"], shell=True)
</snippet></ROW><ROW><id>5865925</id><snippet>/^[A-Z][a-z]{2,} \d{2} \d{2}:\d{2}:\d{2}\.\d{6}$/
</snippet></ROW><ROW><id>5866018</id><snippet>{</snippet></ROW><ROW><id>5866018</id><snippet>}</snippet></ROW><ROW><id>5866018</id><snippet>MONTH 
  :  DIGIT DIGIT 
     {
       int month = Integer.parseInt(getText());
       // do your check here
     } 
  ;
</snippet></ROW><ROW><id>5866018</id><snippet>getText()</snippet></ROW><ROW><id>5866018</id><snippet>MONTH</snippet></ROW><ROW><id>5866018</id><snippet>1 &gt; month &gt; 12</snippet></ROW><ROW><id>5866018</id><snippet>.g</snippet></ROW><ROW><id>5866083</id><snippet>d = { 'a': 'Chief Manager', 'b': 'Assistant General Manager', 'c': 'General Manager', 'D': 'CTO', 'E': 'CEO' }
user = 'a'
print(d[user])
# Chief Manager
</snippet></ROW><ROW><id>5866083</id><snippet>with open('/path/to/my/file') as myFile:
    d = dict(line.strip().split(None, 1) for line in myFile)

print(d['a'])
# Cheif manager
</snippet></ROW><ROW><id>5866083</id><snippet>from csv import reader
d = dict(row for row in reader(open('/path/to/my/file'), delimiter=',', quotechar='"'))
print(d['a'])
# Cheif manager
</snippet></ROW><ROW><id>5866304</id><snippet>import _md5

def md5_getstate(md):
    return (md.A, md.B, md.C, md.D, md.count + [], md.input + [], md.length)

def md5_continue(state):
    md = _md5.new()
    (md.A, md.B, md.C, md.D, md.count, md.input, md.length) = state
    return md

m1 = _md5.new()
m1.update("hello, ")
state = md5_getstate(m1)
m2 = md5_continue(state)
m2.update("world!")
print m2.hexdigest()

m = _md5.new()
m.update("hello, world!")
print m.hexdigest()
</snippet></ROW><ROW><id>5866304</id><snippet># based on idea from http://groups.google.com/group/comp.lang.python/msg/b1c5bb87a3ff5e34

try:
    import _md5 as md5
except ImportError:
    # python 2.4
    import md5
import ctypes

def md5_getstate(md):
    if type(md) is not md5.MD5Type:
        raise TypeError, 'not an MD5Type instance'
    return ctypes.string_at(id(md) + object.__basicsize__,
                            md5.MD5Type.__basicsize__ - object.__basicsize__)

def md5_continue(state):
    md = md5.new()
    assert len(state) == md5.MD5Type.__basicsize__ - object.__basicsize__, \
           'invalid state'    
    ctypes.memmove(id(md) + object.__basicsize__,
                   ctypes.c_char_p(state),
                   len(state))
    return md

m1 = md5.new()
m1.update("hello, ")
state = md5_getstate(m1)
m2 = md5_continue(state)
m2.update("world!")
print m2.hexdigest()

m = md5.new()
m.update("hello, world!")
print m.hexdigest()
</snippet></ROW><ROW><id>5866492</id><snippet>def print_time(secs):
  print '{0}:{1:02}'.format(secs//60,secs%60),
  print "left to wait..."
</snippet></ROW><ROW><id>5866492</id><snippet>divmod()</snippet></ROW><ROW><id>5866514</id><snippet>pbvalue.set_stringvalue(unicode(value).encode('utf-8'))
</snippet></ROW><ROW><id>5866514</id><snippet>movie.director</snippet></ROW><ROW><id>5866514</id><snippet>unicode(value)
</snippet></ROW><ROW><id>5866514</id><snippet>encode('utf-8')</snippet></ROW><ROW><id>5866514</id><snippet>unicode()</snippet></ROW><ROW><id>5866514</id><snippet>unicode(value)</snippet></ROW><ROW><id>5866514</id><snippet>imdbValues</snippet></ROW><ROW><id>5866514</id><snippet> movie.director = imdbValues[5].decode('utf-8')
</snippet></ROW><ROW><id>5866675</id><snippet>uv</snippet></ROW><ROW><id>5866675</id><snippet>uv[i]</snippet></ROW><ROW><id>5866675</id><snippet>math.trunc(uv)</snippet></ROW><ROW><id>5866675</id><snippet>hasattr(math,'trunc')</snippet></ROW><ROW><id>5866970</id><snippet>&gt;&gt;&gt; 'abc' * 2
'abcabc'
</snippet></ROW><ROW><id>5867095</id><snippet>import pickle
obj = YourClass(yourparam=...)
data = pickle.dumps(obj)
# and now, store "data" into the cache

# later, get "data" from the cache
obj = pickle.loads(data)

# and tada, obj if the same as before :)
</snippet></ROW><ROW><id>5867425</id><snippet>django.contrib</snippet></ROW><ROW><id>5867425</id><snippet>as_p</snippet></ROW><ROW><id>5867593</id><snippet>from django.core import serializers
data = serializers.serialize("xml", SomeModel.objects.all())
</snippet></ROW><ROW><id>5867824</id><snippet>import time

MIN_TIME_DELTA = 120

last_call = time.clock() - (MIN_TIME_DELTA+1)  # init to longer than delta ago
while not exit_condition:
    if test:
        otherFunction()
    if test:
        anotherFunction()
    if test and ((time.clock()-last_call) &gt; MIN_TIME_DELTA):
        last_call = time.clock()
        myFunction()
</snippet></ROW><ROW><id>5867824</id><snippet>next_call = time.clock() - 1  # init to a little before now
while not exit_condition:
    if test:
        otherFunction()
    if test:
        anotherFunction()
    if test and (time.clock() &gt; next_call):
        next_call = time.clock() + MIN_TIME_DELTA
        myFunction()
</snippet></ROW><ROW><id>5867937</id><snippet>p4d</snippet></ROW><ROW><id>5867937</id><snippet>p4d</snippet></ROW><ROW><id>5867951</id><snippet>&gt;&gt;&gt; a = {"success":1,"data":{"var1":1,"var2":2,"var3":3}}
&gt;&gt;&gt; a["data"]["var2"]
2
&gt;&gt;&gt; locals().update(a["data"])
&gt;&gt;&gt; var2
2
</snippet></ROW><ROW><id>5867951</id><snippet>&gt;&gt;&gt; globals().update(a["data"])
&gt;&gt;&gt; var2
2
</snippet></ROW><ROW><id>5868380</id><snippet>htmlSource</snippet></ROW><ROW><id>5868380</id><snippet>ips = re.findall('(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})',
                 htmlSource)
</snippet></ROW><ROW><id>5868380</id><snippet>ips</snippet></ROW><ROW><id>5868380</id><snippet>import urllib,re           
sock = urllib.urlopen("http://ipchicken.com")
htmlSource = sock.read()           
sock.close()
print htmlSource
ips = re.findall('(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})', htmlSource)
print "IPs in page", ips
</snippet></ROW><ROW><id>5868392</id><snippet>dateobj.date()</snippet></ROW><ROW><id>5868392</id><snippet>datetime.date</snippet></ROW><ROW><id>5868392</id><snippet>datetime.date(2011, 5, 1)</snippet></ROW><ROW><id>5868392</id><snippet>dateobj = datetime.datetime.strptime(datestr,'%Y-%m-%d').date()
</snippet></ROW><ROW><id>5868543</id><snippet>input()</snippet></ROW><ROW><id>5868543</id><snippet>raw_input</snippet></ROW><ROW><id>5868543</id><snippet>try:
    input = raw_input
except NameError:
    pass
</snippet></ROW><ROW><id>5868543</id><snippet>2to3</snippet></ROW><ROW><id>5868780</id><snippet>form.group_id.choices.insert(0, ('', ''))
</snippet></ROW><ROW><id>5868914</id><snippet>zk@fool:~/Downloads% ls -l | grep thefile
-rwxr-xr-x@  1 zk  staff           9 May  3 06:37 thefile.txt*
</snippet></ROW><ROW><id>5868914</id><snippet>zipInfo.external_attr = 0777 &lt;&lt; 16L # set permissions on file
</snippet></ROW><ROW><id>5868914</id><snippet>zk@arch:~% ls -l | grep thefile
-rwxrwxrwx  1 zk     9 May  3 07:06 thefile.txt*
</snippet></ROW><ROW><id>5869740</id><snippet>a*</snippet></ROW><ROW><id>5869771</id><snippet>class UploadHandler(webapp.RequestHandler):
    def post(self):
        mime_type = self.request.headers['X-File-Type']
        name = self.request.headers['X-File-Name']
        file_name = files.blobstore.create(mime_type=mime_type,
                                           _blobinfo_uploaded_filename=name)
        with files.open(file_name, 'a') as f:
            f.write(self.request.body)
        files.finalize(file_name)
        blob_key = files.blobstore.get_blob_key(file_name)
</snippet></ROW><ROW><id>5869812</id><snippet>class csv.DictReader(csvfile[, fieldnames=None[, restkey=None[, restval=None[, dialect='excel'[, *args, **kwds]]]]])</snippet></ROW><ROW><id>5869812</id><snippet>import csv
reader = csv.DictReader(open('ngl_hawaii.csv', 'rb'), delimiter=','))
for row in reader:
    print row['d_first_name']
    print row['d_last_name']
</snippet></ROW><ROW><id>5870277</id><snippet>__call__</snippet></ROW><ROW><id>5870501</id><snippet>+193    0000fcd9  e87e050100              calll       0x0002025c                    _mach_error_string
+198    0000fcde  89442410                movl        %eax,0x10(%esp)
+202    0000fce2  8b462c                  movl        0x2c(%esi),%eax
+205    0000fce5  c7442408b8b90100        movl        $0x0001b9b8,0x08(%esp)
+213    0000fced  895c2404                movl        %ebx,0x04(%esp)
+217    0000fcf1  893c24                  movl        %edi,(%esp)
+220    0000fcf4  c1e808                  shrl        $0x08,%eax
+223    0000fcf7  25ff030000              andl        $0x000003ff,%eax
+228    0000fcfc  8944240c                movl        %eax,0x0c(%esp)
+232    0000fd00  e857afffff              calll       0x0000ac5c
</snippet></ROW><ROW><id>5870795</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; type(datetime)
&lt;class 'module'&gt;
&gt;&gt;&gt; type(datetime.datetime)
&lt;class 'type'&gt;
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; type(datetime)
&lt;class 'type'&gt;
</snippet></ROW><ROW><id>5870832</id><snippet>self.do_search(linenumber)
</snippet></ROW><ROW><id>5870834</id><snippet>itertools.chain(result, cleanup())</snippet></ROW><ROW><id>5870834</id><snippet>def wsgi(env, start_resp):
    [...]

    status, headers = web.ctx.status, web.ctx.headers
    start_resp(status, headers)

    for part in result:
         yield part
    self._cleanup()
    # yield '' # you'd skip this line because it's pointless
</snippet></ROW><ROW><id>5870845</id><snippet>motifs = [ x.strip() for x in open('final motifs_11SGLOBULIN','r') ]
redact = '*****'

with open('11sglobulin.seqs','r') as data_in, open('11sglobulin.seqs.new','w') as data_out:
  for seq in data_in:
    for motif in motifs:
      while True:
        x = seq.find(motif)
        if x &gt;= 0:
          seq = seq[:x] + redact + seq[x+len(motif):]
        else:
          break
  data_out.write(seq)
</snippet></ROW><ROW><id>5871166</id><snippet>set</snippet></ROW><ROW><id>5871166</id><snippet>words = set(line.strip() for line in open("words"))
</snippet></ROW><ROW><id>5871166</id><snippet>w</snippet></ROW><ROW><id>5871166</id><snippet>w in words
</snippet></ROW><ROW><id>5871245</id><snippet>//</snippet></ROW><ROW><id>5871245</id><snippet>:</snippet></ROW><ROW><id>5871245</id><snippet>import re
myre = re.compile("(?&lt;!:)//")
uniprotFileList = myre.split(uniprotFileContent)
</snippet></ROW><ROW><id>5871257</id><snippet>for mailpart in mailitem.walk():
    if mailpart.get_content_maintype() == 'multipart':
        continue
    message = str(mailpart.get_payload(decode=True))
</snippet></ROW><ROW><id>5871361</id><snippet>test</snippet></ROW><ROW><id>5871361</id><snippet>return</snippet></ROW><ROW><id>5871361</id><snippet>None</snippet></ROW><ROW><id>5871361</id><snippet>&gt;&gt;&gt; def noop(x): pass
... 
&gt;&gt;&gt; [noop(i) for i in range(5)]
[None, None, None, None, None]
</snippet></ROW><ROW><id>5871361</id><snippet>for</snippet></ROW><ROW><id>5871393</id><snippet>#!/bin/awk -f

BEGIN {
    cmd = "./myscript.py '\"%s20s\"' " ARGV[1]
    print cmd
    cmd  | getline var       
    print var
}
</snippet></ROW><ROW><id>5871393</id><snippet>#!/usr/bin/python

import sys
print(sys.argv)
</snippet></ROW><ROW><id>5871393</id><snippet>/home/user1&gt; runit.awk afile
./myscript.py "%s20s" afile
['./myscript.py', '"%s20s"', 'afile']
</snippet></ROW><ROW><id>5871414</id><snippet>ctext_selectall</snippet></ROW><ROW><id>5871414</id><snippet>bind_class</snippet></ROW><ROW><id>5871414</id><snippet>def __init__(...):
    self.root.bind_class("Text","&lt;Control-a&gt;", self.selectall)

def selectall(self, event):
    event.widget.tag_add("sel","1.0","end")
</snippet></ROW><ROW><id>5871505</id><snippet>generator = itertools.repeat(seed)
</snippet></ROW><ROW><id>5871505</id><snippet>seed = 3345
maximum = 1000000
generator = random.Random(seed)
while True:
    print generator.random(maximum)
</snippet></ROW><ROW><id>5871505</id><snippet>random.Random</snippet></ROW><ROW><id>5871749</id><snippet>[...]</snippet></ROW><ROW><id>5871749</id><snippet>sel.get_xpath_count(something)</snippet></ROW><ROW><id>5871749</id><snippet>sel.get_text("xpath=(something)[item_number]")</snippet></ROW><ROW><id>5871749</id><snippet>something[item_count]</snippet></ROW><ROW><id>5871749</id><snippet>something AND position() = item_count</snippet></ROW><ROW><id>5871749</id><snippet>(something)[item_count]</snippet></ROW><ROW><id>5871749</id><snippet>(something)</snippet></ROW><ROW><id>5871749</id><snippet>position() = item_count</snippet></ROW><ROW><id>5871814</id><snippet>def translate(text, src = '', to = 'en'):
  parameters = ({'langpair': '{0}|{1}'.format(src, to), 'v': '1.0' })
  translated = ''

  for text in (text[index:index + 4500] for index in range(0, len(text), 4500)):
    parameters['q'] = text
    response = json.loads(urllib.request.urlopen('http://ajax.googleapis.com/ajax/services/language/translate', data = urllib.parse.urlencode(parameters).encode('utf-8')).read().decode('utf-8'))

    try:
      translated += response['responseData']['translatedText']
    except:
      pass

  return translated
</snippet></ROW><ROW><id>5871855</id><snippet>order_by('?')</snippet></ROW><ROW><id>5871855</id><snippet>import random
content_pks = Content.objects.values_list('pk', flat=True)
selected_pks = random.sample(content_pks, 30)
content_objects = Content.objects.filter(pk__in=selected_pks)
</snippet></ROW><ROW><id>5872026</id><snippet>import csv
from my_django_app.forms import CityForm
with open( "my file", "rb" ) as source:
    rdr = csv.DictReader( source )
    for row in rdr:
        form= CityForm( **row )
        if form.is_valid(): 
            form.save()
        else:
            print form.errors
</snippet></ROW><ROW><id>5872026</id><snippet>django-admin dumpdata</snippet></ROW><ROW><id>5872037</id><snippet>import sqlparse
from sqlparse import tokens

queries = '''
CREATE FUNCTION func1(a integer) RETURNS void
    LANGUAGE plpgsql
        AS $$
        BEGIN
                -- comment
       END;
       $$;
SELECT -- comment
* FROM -- comment
TABLE foo;
-- comment
INSERT INTO foo VALUES ('a -- foo bar');
INSERT INTO foo
VALUES ('
a 
-- foo bar'
);

'''

IGNORE = set(['CREATE FUNCTION',])  # extend this

def _filter(stmt, allow=0):
    ddl = [t for t in stmt.tokens if t.ttype in (tokens.DDL, tokens.Keyword)]
    start = ' '.join(d.value for d in ddl[:2])
    if ddl and start in IGNORE:
        allow = 1
    for tok in stmt.tokens:
        if allow or not isinstance(tok, sqlparse.sql.Comment):
            yield tok

for stmt in sqlparse.split(queries):
    sql = sqlparse.parse(stmt)[0]
    print sqlparse.sql.TokenList([t for t in _filter(sql)])
</snippet></ROW><ROW><id>5872037</id><snippet>CREATE FUNCTION func1(a integer) RETURNS void
    LANGUAGE plpgsql
        AS $$
        BEGIN
                -- comment
       END;
       $$;

SELECT * FROM TABLE foo;

INSERT INTO foo VALUES ('a -- foo bar');

INSERT INTO foo
VALUES ('
a
-- foo bar'
);
</snippet></ROW><ROW><id>5872450</id><snippet>re.sub</snippet></ROW><ROW><id>5872450</id><snippet>values = {
    u'123453': u'Some Value',
    u'984561': u'837',
    u'123456': u'more stuff',
}

def insertLookup(matchobj):
    return values[matchobj.group(1)]

theString = u"Var 1 value: %%v:123453%%, Var 2 value: %%v:984561%%, Var 3 value: %%v:123456%%"
p = re.compile("\%%v:([0-9]*)%%")
newString = p.sub(insertLookup, theString)

print newString
u"Var 1 value: Some Value, Var 2 value: 837, Var 3 value: more stuff"
</snippet></ROW><ROW><id>5872450</id><snippet>insertLookup</snippet></ROW><ROW><id>5872450</id><snippet>u'123453'</snippet></ROW><ROW><id>5872450</id><snippet>newString</snippet></ROW><ROW><id>5872477</id><snippet>numpy.ndarray()</snippet></ROW><ROW><id>5872477</id><snippet>__new__()</snippet></ROW><ROW><id>5872477</id><snippet>__init__()</snippet></ROW><ROW><id>5872477</id><snippet>foo = SyMatrix(2)
</snippet></ROW><ROW><id>5872477</id><snippet>numpy.ndarray.__new__()</snippet></ROW><ROW><id>5872477</id><snippet>self</snippet></ROW><ROW><id>5872477</id><snippet>self</snippet></ROW><ROW><id>5872477</id><snippet>(arr + arr.T)/2.0 - np.diag(np.diag(arr))</snippet></ROW><ROW><id>5872477</id><snippet>(arr + arr.T)/2.0</snippet></ROW><ROW><id>5872508</id><snippet>records = []
record1 = {"name":"Bob", "email":"bob@email.com"}
records.append(record1)    
record2 = {"name":"Bob2", "email":"bob2@email.com"}
records.append(record2)
</snippet></ROW><ROW><id>5872508</id><snippet>records</snippet></ROW><ROW><id>5872618</id><snippet>dict(obj)</snippet></ROW><ROW><id>5872618</id><snippet>obj.copy()</snippet></ROW><ROW><id>5872618</id><snippet>&gt;&gt;&gt; type(o)
&lt;class 'pyamf.TypedObject'&gt;
&gt;&gt;&gt; type(o.copy())
&lt;type 'dict'&gt;
&gt;&gt;&gt; o.copy()
{'abc': 123}
</snippet></ROW><ROW><id>5872904</id><snippet>from flask import Flask
from werkzeug.routing import BaseConverter

app = Flask(__name__)

class RegexConverter(BaseConverter):
    def __init__(self, url_map, *items):
        super(RegexConverter, self).__init__(url_map)
        self.regex = items[0]


app.url_map.converters['regex'] = RegexConverter

@app.route('/&lt;regex("[abcABC0-9]{4,6}"):uid&gt;-&lt;slug&gt;/')
def example(uid, slug):
    return "uid: %s, slug: %s" % (uid, slug)


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
</snippet></ROW><ROW><id>5872944</id><snippet>rdflib 3</snippet></ROW><ROW><id>5872944</id><snippet>    import rdflib
    from rdflib.Graph import ConjunctiveGraph as Graph
    from rdflib import plugin
    from rdflib.store import Store, NO_STORE, VALID_STORE

    configString = "host=localhost,user=root,password=,db=db_name"
    rt = store.open(configString,create=False)
    assert rt == VALID_STORE,"The store is corrupted"
    print "load store success"
    graph = Graph(store)
    g.parse("some.rdf")
    g.commit()
</snippet></ROW><ROW><id>5872951</id><snippet>                 logfile = open('result3.log', 'w')
                 logfile.write(word + '\n' + ln)
                 logfile.close()
</snippet></ROW><ROW><id>5872951</id><snippet>open</snippet></ROW><ROW><id>5872951</id><snippet>                 logfile = open('result3.log', 'a')
</snippet></ROW><ROW><id>5872951</id><snippet>logfile</snippet></ROW><ROW><id>5872951</id><snippet>regex = re.compile(r'(?:3\d){6}')
with open('result3.log', 'w') as logfile:
    for root, dirname, files in os.walk(directory):
        # ...
        logfile.write(word + '\n' + ln)
</snippet></ROW><ROW><id>5872951</id><snippet>with</snippet></ROW><ROW><id>5872951</id><snippet>logfile.close()</snippet></ROW><ROW><id>5872951</id><snippet>with</snippet></ROW><ROW><id>5872951</id><snippet>f</snippet></ROW><ROW><id>5872951</id><snippet>f.close()</snippet></ROW><ROW><id>5872951</id><snippet>enumerate(f.readlines())</snippet></ROW><ROW><id>5872951</id><snippet>enumerate(f)</snippet></ROW><ROW><id>5873097</id><snippet>s = "\xff\x03"
a = numpy.frombuffer(s, numpy.uint8)
</snippet></ROW><ROW><id>5873097</id><snippet>a =  map(ord, s)
</snippet></ROW><ROW><id>5873097</id><snippet>bytesarray(s)</snippet></ROW><ROW><id>5873263</id><snippet>from glob import glob
import subprocess

elif RetouchOption == "04":
    ColorMethod = input("What method will you use (options are gamma, recolor, none)?: ")
    ClipMode = input("What clipping mode will you use (options are together or separate)?: ")
    script = ["sh", "~/autocolor.sh"]
    method = "-m %s" % ColorMethod
    clipmode = "-c %s" % ClipMode
    for filename in glob("*.jpg"):
        subprocess.call(script + [method, clipmode, filename, filename])
</snippet></ROW><ROW><id>5873263</id><snippet>import os

for filename in glob(os.path.join(WorkingDirectory, '*.jpg')):
    ...
</snippet></ROW><ROW><id>5873296</id><snippet>import cPickle
import numpy as np
import matplotlib.pyplot as plt

from scipy import ndimage

def main():
    measurements = cPickle.load(open('walk_sliced_data', 'r'))
    plot(measurements['ser_1'].values())
    plt.show()

def raw_moment(data, iord, jord):
    nrows, ncols = data.shape
    y, x = np.mgrid[:nrows, :ncols]
    data = data * x**iord * y**jord
    return data.sum()

def intertial_axis(data):
    data_sum = data.sum()
    m10 = raw_moment(data, 1, 0)
    m01 = raw_moment(data, 0, 1)
    x_bar = m10 / data_sum
    y_bar = m01 / data_sum
    u11 = (raw_moment(data, 1, 1) - x_bar * m01) / data_sum
    u20 = (raw_moment(data, 2, 0) - x_bar * m10) / data_sum
    u02 = (raw_moment(data, 0, 2) - y_bar * m01) / data_sum
    angle = 0.5 * np.arctan(2 * u11 / (u20 - u02))
    return x_bar, y_bar, angle


def plot(impacts):
    def plot_subplot(pawprint, ax):
        x_bar, y_bar, angle = intertial_axis(pawprint)
        ax.imshow(pawprint)
        plot_bars(x_bar, y_bar, angle, ax)
        return angle

    fig1 = plt.figure()
    fig2 = plt.figure()
    for i, impact in enumerate(impacts[:9]):
        ax1 = fig1.add_subplot(3,3,i+1)
        ax2 = fig2.add_subplot(3,3,i+1)

        pawprint = impact.sum(axis=2)
        angle = plot_subplot(pawprint, ax1)

        pawprint = ndimage.rotate(pawprint, np.degrees(angle))
        plot_subplot(pawprint, ax2)

    fig1.suptitle('Original')
    fig2.suptitle('Rotated')

def plot_bars(x_bar, y_bar, angle, ax):
    def plot_bar(r, x_bar, y_bar, angle, ax, pattern):
        dx = r * np.cos(angle)
        dy = r * np.sin(angle)
        ax.plot([x_bar - dx, x_bar, x_bar + dx], 
                [y_bar - dy, y_bar, y_bar + dy], pattern)
    plot_bar(1, x_bar, y_bar, angle + np.radians(90), ax, 'wo-')
    plot_bar(3, x_bar, y_bar, angle, ax, 'ro-')
    ax.axis('image')


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5873296</id><snippet>scipy.ndimage.rotate</snippet></ROW><ROW><id>5873296</id><snippet>ndimage</snippet></ROW><ROW><id>5873320</id><snippet>% LD_LIBRARY_PATH=$HOME/root/lib PATH=$HOME/root/bin:$PATH \
    ./configure --enable-pythoninterp \ 
    --with-python-config-dir=$HOME/root/lib/python2.7/config \
    --prefix=$HOME/vim27
% make install
% $HOME/bin/vim27

:python import sys; print sys.path[:2]
['/home/pat/root/lib/python27.zip', '/home/pat/root/lib/python2.7']
</snippet></ROW><ROW><id>5873320</id><snippet>$HOME/foobar/lib/python2.6/config</snippet></ROW><ROW><id>5873320</id><snippet>/usr/lib/python2.6/config</snippet></ROW><ROW><id>5873320</id><snippet>sys.path</snippet></ROW><ROW><id>5873320</id><snippet>% PATH=$HOME/foobar/bin:$PATH ./configure --enable-pythoninterp \
    --with-python-config-dir=$HOME/foobar/lib/python2.6/config \
    --prefix=$HOME/foobar
..
checking for python... /home/pat/foobar/bin/python
checking Python's configuration directory... (cached) /home/pat/foobar/lib/python2.6/config
..

% make install
% $HOME/foobar/bin/vim
:python import sys; print sys.path[:1]
['/usr/lib/python2.6']
</snippet></ROW><ROW><id>5873320</id><snippet>vim</snippet></ROW><ROW><id>5873320</id><snippet>~/HOME/foobar/bin/vim</snippet></ROW><ROW><id>5873320</id><snippet>#!/bin/sh
ROOT=`cd \`dirname $0\`; cd ..; pwd`
PYTHONPATH=$ROOT/lib/python2.6/site-packages /usr/bin/vim $*
</snippet></ROW><ROW><id>5873320</id><snippet>% $HOME/foobar/bin/vim
:python import sys; print sys.path[:2]
['/home/pat/foobar/lib/python2.6/site-packages', '/usr/lib/python2.6']
</snippet></ROW><ROW><id>5874167</id><snippet>#!/usr/bin/env python

import commands
...
</snippet></ROW><ROW><id>5874424</id><snippet>text = """JOHN ...""" # text without the header

# These can be inferred if necessary
cols = [0, 24, 29, 39, 43, 52, 71, 84, 95, 109, 117]

db = []
row = []
for line in text.strip().split("\n"):
    data = [line[cols[i]:cols[i+1]] for i in xrange((len(cols)-1))]
    if data[0][0] != " ":
        if row:
            db.append(row)
        row = map(lambda x: [x], data)
    else:
        for i, c in enumerate(data):
            row[i].append(c)
print db
</snippet></ROW><ROW><id>5874424</id><snippet>for person in db:
    print "Name:", person[0][0]
    print " ".join(s.strip() for s in person[0][1:])
    print
</snippet></ROW><ROW><id>5874424</id><snippet>Name: JOHN W. WOODS           
Chairman, President, &amp; Chief Executive Officer of AmSouth &amp; AmSouth Bank N.A.

Name: C. STANLEY ...
</snippet></ROW><ROW><id>5874450</id><snippet>super()</snippet></ROW><ROW><id>5874450</id><snippet>self</snippet></ROW><ROW><id>5874450</id><snippet>Base</snippet></ROW><ROW><id>5874450</id><snippet>Derived</snippet></ROW><ROW><id>5874450</id><snippet>self</snippet></ROW><ROW><id>5874450</id><snippet>Base.foo</snippet></ROW><ROW><id>5874450</id><snippet>self</snippet></ROW><ROW><id>5874486</id><snippet>d</snippet></ROW><ROW><id>5874486</id><snippet>QDialog</snippet></ROW><ROW><id>5874486</id><snippet>buttonPressed</snippet></ROW><ROW><id>5874486</id><snippet>d</snippet></ROW><ROW><id>5874486</id><snippet>self.d = QtGui.QDialog()</snippet></ROW><ROW><id>5874734</id><snippet>pubmedID</snippet></ROW><ROW><id>5874734</id><snippet>_id</snippet></ROW><ROW><id>5874734</id><snippet>pubmedID</snippet></ROW><ROW><id>5874734</id><snippet>collection.insert({"_id": xml_obj.pubmedID, "text" : xml_obj.article_text})</snippet></ROW><ROW><id>5874844</id><snippet>exec</snippet></ROW><ROW><id>5874844</id><snippet>&gt;&gt;&gt; def spam():
...   print "spam and", eggs
... 
&gt;&gt;&gt; exec(spam.__code__, {'eggs':'pasta'})
spam and pasta
</snippet></ROW><ROW><id>5874844</id><snippet>"def spam(eggs): print 'spam and', eggs"</snippet></ROW><ROW><id>5874844</id><snippet>exec</snippet></ROW><ROW><id>5875056</id><snippet>N_</snippet></ROW><ROW><id>5875056</id><snippet>N_</snippet></ROW><ROW><id>5875178</id><snippet>s</snippet></ROW><ROW><id>5875178</id><snippet>socket.SO_REUSEADDR</snippet></ROW><ROW><id>5875178</id><snippet>s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((ADDR, PORT))
</snippet></ROW><ROW><id>5875223</id><snippet>python manage.py test another.test:TestCase.test_method
</snippet></ROW><ROW><id>5875265</id><snippet>from itertools import takewhile

if K is None:
    illuminacond = lambda x: x.split(',')[0] != '[Controls]'
    def action(cf, line): cf.write(line)
else:
    illuminacond = lambda x: x.split(',')[0] != '[Controls]' and i &lt; K
    def action(cf, line): pass

af=open('a')
bf=open('b', 'w')
cf=open('c', 'w')

i = 0
for line in takewhile(illuminacond, af):
    line_split=line.split(',')
    pid=line_split[1][0:3]
    out = line_split[1] + ',' + line_split[2] + ',' + line_split[3][1] + line_split[3][3] + ',' \
                              + line_split[15] + ',' + line_split[9] + ',' + line_split[10]
    if pid!='cnv' and pid!='hCV' and pid!='cnv':
        i = i+1
        bf.write(out.strip('"')+'\n')
        action(cf, line)
</snippet></ROW><ROW><id>5875291</id><snippet>sample_adc(..)</snippet></ROW><ROW><id>5875291</id><snippet>return int(frac * (2 ** adc_res) + 0.5)
</snippet></ROW><ROW><id>5875291</id><snippet>return int(frac * (2 ** adc_res))
</snippet></ROW><ROW><id>5875291</id><snippet>10 bits:  512   volts:  1.0
11 bits:  1025   volts:  1.0009765625
12 bits:  2046   volts:  0.9990234375
13 bits:  4100   volts:  1.0009765625
14 bits:  8196   volts:  1.00048828125
15 bits:  16391   volts:  1.00042724609
16 bits:  32784   volts:  1.00048828125
17 bits:  65528   volts:  0.999877929688
18 bits:  131111   volts:  1.00029754639
24 bits:  8388594   volts:  0.99999833107
28 bits:  134216558   volts:  0.999991282821
</snippet></ROW><ROW><id>5875291</id><snippet>adc_do_noise_sample(..)</snippet></ROW><ROW><id>5875459</id><snippet>history_id</snippet></ROW><ROW><id>5875459</id><snippet>history_date</snippet></ROW><ROW><id>5875459</id><snippet>history_type</snippet></ROW><ROW><id>5875459</id><snippet>history_object</snippet></ROW><ROW><id>5875459</id><snippet>history_id</snippet></ROW><ROW><id>5875459</id><snippet>history_date</snippet></ROW><ROW><id>5875459</id><snippet>history_type</snippet></ROW><ROW><id>5875459</id><snippet>+</snippet></ROW><ROW><id>5875459</id><snippet>~</snippet></ROW><ROW><id>5875459</id><snippet>-</snippet></ROW><ROW><id>5875459</id><snippet>+</snippet></ROW><ROW><id>5875459</id><snippet>~</snippet></ROW><ROW><id>5875459</id><snippet>-</snippet></ROW><ROW><id>5875459</id><snippet>history_object</snippet></ROW><ROW><id>5875459</id><snippet>{{ h.history_type }} {{ h.history_object }} on/at {{ h.history_date }}
</snippet></ROW><ROW><id>5875459</id><snippet>+</snippet></ROW><ROW><id>5875459</id><snippet>~</snippet></ROW><ROW><id>5875459</id><snippet>-</snippet></ROW><ROW><id>5875459</id><snippet>{{ h.history_object }}</snippet></ROW><ROW><id>5875459</id><snippet>__unicode__</snippet></ROW><ROW><id>5875459</id><snippet>{{ h.history_object.__class__ }}</snippet></ROW><ROW><id>5875459</id><snippet>{{ h.history_object._meta.verbose_name }}</snippet></ROW><ROW><id>5875459</id><snippet>date</snippet></ROW><ROW><id>5875459</id><snippet>{{ h.history_date }}</snippet></ROW><ROW><id>5875459</id><snippet>modified_by</snippet></ROW><ROW><id>5875459</id><snippet>request.user</snippet></ROW><ROW><id>5875459</id><snippet>{{ h.modified_by }}</snippet></ROW><ROW><id>5875791</id><snippet>from wx.lib import wordwrap
import wx.grid


class CutomGridCellAutoWrapStringRenderer(wx.grid.PyGridCellRenderer):   
    def __init__(self): 
        wx.grid.PyGridCellRenderer.__init__(self)

    def Draw(self, grid, attr, dc, rect, row, col, isSelected):
        text = grid.GetCellValue(row, col)
        dc.SetFont( attr.GetFont() ) 
        text = wordwrap.wordwrap(text, grid.GetColSize(col), dc, breakLongWords = False)
        hAlign, vAlign = attr.GetAlignment()       
        if isSelected: 
            bg = grid.GetSelectionBackground() 
            fg = grid.GetSelectionForeground() 
        else: 
            bg = attr.GetBackgroundColour()
            fg = attr.GetTextColour() 
        dc.SetTextBackground(bg) 
        dc.SetTextForeground(fg)
        dc.SetBrush(wx.Brush(bg, wx.SOLID))
        dc.SetPen(wx.TRANSPARENT_PEN)
        dc.DrawRectangleRect(rect)            
        grid.DrawTextRectangle(dc, text, rect, hAlign, vAlign)

    def GetBestSize(self, grid, attr, dc, row, col): 
        text = grid.GetCellValue(row, col)
        dc.SetFont(attr.GetFont())
        text = wordwrap.wordwrap(text, grid.GetColSize(col), dc, breakLongWords = False)
        w, h, lineHeight = dc.GetMultiLineTextExtent(text)                   
        return wx.Size(w, h)        

    def Clone(self): 
        return CutomGridCellAutoWrapStringRenderer()
</snippet></ROW><ROW><id>5875816</id><snippet>Error</snippet></ROW><ROW><id>5875816</id><snippet>Errors</snippet></ROW><ROW><id>5875816</id><snippet>Connection</snippet></ROW><ROW><id>5875816</id><snippet>InfoMessage()</snippet></ROW><ROW><id>5875816</id><snippet>QueryInterface()</snippet></ROW><ROW><id>5875816</id><snippet>Error</snippet></ROW><ROW><id>5875843</id><snippet>python</snippet></ROW><ROW><id>5875843</id><snippet>PATH</snippet></ROW><ROW><id>5875843</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>5875843</id><snippet>export PATH=/path/to/python/:$PATH
</snippet></ROW><ROW><id>5875962</id><snippet>/com</snippet></ROW><ROW><id>5875962</id><snippet>&lt;pre&gt;user@host:~$ PYTHONPATH=/path/to/whatever python some_file.py&lt;/pre&gt;</snippet></ROW><ROW><id>5875962</id><snippet>.bashrc</snippet></ROW><ROW><id>5875962</id><snippet>.bash_profile</snippet></ROW><ROW><id>5875962</id><snippet>&lt;pre&gt;export PYTHONPATH=/path/to/whatever&lt;/pre&gt;</snippet></ROW><ROW><id>5875962</id><snippet>&lt;pre&gt;import sys
sys.path.append('/path/to/whatever')&lt;/pre&gt;</snippet></ROW><ROW><id>5875962</id><snippet>mod_wsgi</snippet></ROW><ROW><id>5876014</id><snippet>eval()</snippet></ROW><ROW><id>5876014</id><snippet>exec</snippet></ROW><ROW><id>5876014</id><snippet>__builtins__</snippet></ROW><ROW><id>5876014</id><snippet>class ClassInit(object):
    def __init__(self, configFile):
        f = open(configFile)
        config = f.read()
        f.close()
        config_dic = { '__builtins__': None}
        exec 'a = 4' in config_dic
        for key, value in config_dic.iteritems():
            if key != '__builtins__':
                setattr(self, key, value)
</snippet></ROW><ROW><id>5876014</id><snippet>eval()</snippet></ROW><ROW><id>5876047</id><snippet>clean()</snippet></ROW><ROW><id>5876047</id><snippet>clean_&lt;filedname&gt;()</snippet></ROW><ROW><id>5876175</id><snippet>import time
time.sleep(2)
</snippet></ROW><ROW><id>5876258</id><snippet>def properties(self):
    class_items = self.__class__.__dict__.iteritems()
    return dict((k, getattr(self, k)) 
                for k, v in class_items 
                if isinstance(v, property))
</snippet></ROW><ROW><id>5876314</id><snippet>class Game(db.Model):
  players = db.ListProperty()

game1.players = ['tom', 'bob']
game2.players = ['joe', 'tom']

# this query will match all games where tom is one of the players
query = Game.all().filter('players =', 'tom')
</snippet></ROW><ROW><id>5876402</id><snippet>ip -s link show device_name</snippet></ROW><ROW><id>5876517</id><snippet>logger/__init__.py</snippet></ROW><ROW><id>5876517</id><snippet>Formatter.format</snippet></ROW><ROW><id>5876517</id><snippet>        if record.exc_info:
            # Cache the traceback text to avoid converting it multiple times
            # (it's constant anyway)
            if not record.exc_text:
                record.exc_text = self.formatException(record.exc_info)
</snippet></ROW><ROW><id>5876517</id><snippet>formatException</snippet></ROW><ROW><id>5876517</id><snippet>if not record.exc_text</snippet></ROW><ROW><id>5877008</id><snippet>[ &lt;first element to include&gt; : &lt;first element to exclude&gt; : &lt;step&gt; ]
</snippet></ROW><ROW><id>5877008</id><snippet>foo[::-1]
</snippet></ROW><ROW><id>5877052</id><snippet>def send_message(request):
  if request.method == "POST":
    message = MessageForm(request.POST)
    message.save()

    return HttpResponse(simplejson.dumps({'result' : 'success'}), mimetype='application/javascript')
</snippet></ROW><ROW><id>5877462</id><snippet>SOAPpy.SOAPProxy</snippet></ROW><ROW><id>5877462</id><snippet>__call</snippet></ROW><ROW><id>5877462</id><snippet>Client.py</snippet></ROW><ROW><id>5877462</id><snippet>        r, self.namespace = self.transport.call(self.proxy, m, ns, sa,
                                                encoding = self.encoding,
                                             http_proxy = self.http_proxy,
                                                config = self.config)
</snippet></ROW><ROW><id>5877462</id><snippet>client.MyFunc()</snippet></ROW><ROW><id>5877462</id><snippet>self.namespace</snippet></ROW><ROW><id>5877704</id><snippet>Validatable</snippet></ROW><ROW><id>5877704</id><snippet>Validatable</snippet></ROW><ROW><id>5877704</id><snippet>constrain_field</snippet></ROW><ROW><id>5877704</id><snippet>Validatable</snippet></ROW><ROW><id>5877704</id><snippet>__class__</snippet></ROW><ROW><id>5877704</id><snippet>class Validatable(object):
    def __init__(self):
        self.__class__.fieldName = "value for " + self.__class__.__name__

class Demo(Validatable):
    def __init__(self):
        super(Demo, self).__init__()

class Demo2(Validatable):
    def __init__(self):
        super(Demo2, self).__init__()

d = Demo()
d2 = Demo2()
print "Demo.fieldName = " + Demo.fieldName
print "Demo2.fieldName = " + Demo2.fieldName
</snippet></ROW><ROW><id>5877704</id><snippet>Demo.fieldName = value for Demo
Demo2.fieldName = value for Demo2
</snippet></ROW><ROW><id>5877704</id><snippet>constrain_field</snippet></ROW><ROW><id>5877704</id><snippet>__class__</snippet></ROW><ROW><id>5877704</id><snippet>constrain_field</snippet></ROW><ROW><id>5877704</id><snippet>constrain_field</snippet></ROW><ROW><id>5877704</id><snippet>def Max(maxValue):
    def checkMax(value):
        return value &lt;= maxValue
    checkMax.__doc__ = "Value must be less than or equal to " + str(maxValue)
    return checkMax

def Even():
    def checkEven(value):
        "Value must be even"
        return value%2 == 0
    return checkEven

def constrain_field(*constraints):
    def constraint_decorator(setter):
        def checkConstraints(self, value):
            ok = True
            for c in constraints:
                if not c(value):
                    ok = False
                    print "Constraint breached: " + c.__doc__
            if ok:
                setter(self, value)
        return checkConstraints
    return constraint_decorator

class Demo(object):
    def __init__(self):
        self._count = 2

    @property
    def count(self):
        return self._count

    @count.setter
    @constrain_field(Max(9), Even())
    def count(self, value):
        self._count = value

d = Demo()
print "Setting to 8"
d.count = 8
print "Setting to 9"
d.count = 9
print "Setting to 10"
d.count = 10
print "Count is now " + str(d.count)
</snippet></ROW><ROW><id>5877704</id><snippet>Setting to 8
Setting to 9
Constraint breached: Value must be even
Setting to 10
Constraint breached: Value must be less than or equal to 9
Count is now 8
</snippet></ROW><ROW><id>5877801</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; ht = '&lt;html&gt;&lt;head&gt;&lt;title&gt;foo&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;whatever: &lt;img src="foo/img.png" height="111" width="22" /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;img src="foo/img2.png" height="32" width="44" /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(ht)
&gt;&gt;&gt; soup
&lt;html&gt;&lt;head&gt;&lt;title&gt;foo&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;whatever: &lt;img src="foo/img.png" height="111" width="22" /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;img src="foo/img2.png" height="32" width="44" /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;
&gt;&gt;&gt; soup.findAll('img')
[&lt;img src="foo/img.png" height="111" width="22" /&gt;, &lt;img src="foo/img2.png" height="32" width="44" /&gt;]
&gt;&gt;&gt; for img in soup.findAll('img'):
...     ht = int(img['height'])
...     wi = int(img['width'])
...     img['height'] = str(ht * 2)
...     img['width'] = str(wi * 2)
...     
... 
&gt;&gt;&gt; print soup.prettify()
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;
   foo
  &lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;p&gt;
   whatever:
   &lt;img src="foo/img.png" height="222" width="44" /&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;img src="foo/img2.png" height="64" width="88" /&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5878011</id><snippet>vw_dist = dist[v] + edgedata.get(weight,1)
</snippet></ROW><ROW><id>5878126</id><snippet>&lt;w:tc&gt;</snippet></ROW><ROW><id>5878126</id><snippet>&lt;w:t&gt;</snippet></ROW><ROW><id>5878126</id><snippet>import lxml.etree as ET
from lxml.etree import XMLParser

def worthy(elem):
    for child in elem.iterchildren():
        if (child.tag == 't') and (child.text is not None):
            return True
    return False

def dump(elem):
    for child in elem.iterchildren():
        print "Good", child.tag, child.text

parser = XMLParser(ns_clean=True, recover=True)
etree = ET.parse('regex_trial.xml', parser)
for thing in etree.findall("//"):
    if thing.tag == 'tc' and worthy(thing):
        dump(thing)
</snippet></ROW><ROW><id>5878126</id><snippet>Good t Header 1
Good t Header 2
Good t Header 3
Good t {% for i in items %}
Good t {{ i.field1 }}
Good t {{ i.field2 }}
Good t {{ i.field3 }}
Good t {% endfor %}
</snippet></ROW><ROW><id>5878166</id><snippet>class ModelA(models.Model):
    val = IntegerField()
    model_b = ForeignKey('ModelB')

class ModelB(models.Model):
    val = IntegerField()


&gt;&gt;&gt; from django.db.models import F
&gt;&gt;&gt; ModelA.objects.filter(val__lt=F('model_b__val'))
&gt;&gt;&gt; print qs.query
SELECT `test_modela`.`id`, `test_modela`.`val`, `test_modela`.`model_b_id` FROM `test_modela` INNER JOIN `test_modelb` ON (`test_modela`.`model_b_id` = `test_modelb`.`id`) WHERE `test_modela`.`val` &lt;  `test_modelb`.`val`
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5878445</id><snippet>itertools</snippet></ROW><ROW><id>5878445</id><snippet>from itertools import tee, izip

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</snippet></ROW><ROW><id>5878445</id><snippet>&gt;&gt;&gt; list(pairwise([1, 2, 3, 4]))
[(1, 2), (2, 3), (3, 4)]
</snippet></ROW><ROW><id>5878445</id><snippet>def split_subsequences(iterable, length=2, overlap=0):
    it = iter(iterable)
    results = list(itertools.islice(it, length))
    while len(results) == length:
        yield results
        results = results[length - overlap:]
        results.extend(itertools.islice(it, length - overlap))
    if results:
        yield results
</snippet></ROW><ROW><id>5878445</id><snippet>&gt;&gt; list(split_subsequences([1, 2, 3, 4], length=2))
[[1, 2], [3, 4]]
&gt;&gt; list(split_subsequences([1, 2, 3, 4], length=2, overlap=1))
[[1, 2], [2, 3], [3, 4], [4]]
</snippet></ROW><ROW><id>5878750</id><snippet>from django.template.loader import render_to_string
content = render_to_string(template_name, dictionary, context_instance)
</snippet></ROW><ROW><id>5878750</id><snippet>/my_project/
    /my_app/
        __init__.py
        /templatetags/
            __init__.py
            my_tags.py

#my_tags.py
from django import template

register = template.Library()

@register.inclusion_tag('other_template.html')
def say_hello(takes_context=True):
    return {'name' : 'John'}

#other_template.html
{% if request.user.is_anonymous %}
{# Our inclusion tag accepts a context, which gives us access to the request #}
    &lt;p&gt;Hello, Guest.&lt;/p&gt;
{% else %}
    &lt;p&gt;Hello, {{ name }}.&lt;/p&gt;
{% endif %}

#main_template.html
{% load my_tags %}
&lt;p&gt;Blah, blah, blah {% say_hello %}&lt;/p&gt;
</snippet></ROW><ROW><id>5878920</id><snippet>Foo.objects.get(pk=1).update(**data)
</snippet></ROW><ROW><id>5879090</id><snippet>" ".join(toks.split())
</snippet></ROW><ROW><id>5879801</id><snippet>leading_sign ::= + | - | empty
integer ::= leading_sign digit...
</snippet></ROW><ROW><id>5879801</id><snippet># no empty required
leading_sign = Optional(oneOf("+ -"))
integer = leading_sign + Word(nums)
</snippet></ROW><ROW><id>5879801</id><snippet>"Key 1" value of Key 1
"Key 2" value of Key 2
</snippet></ROW><ROW><id>5879801</id><snippet>quotedString + restOfLine
</snippet></ROW><ROW><id>5879801</id><snippet>quotedString + empty + restOfLine
</snippet></ROW><ROW><id>5879801</id><snippet>OneOrMore(empty)
</snippet></ROW><ROW><id>5879801</id><snippet>empty | "A" | "B" | "C"
</snippet></ROW><ROW><id>5879892</id><snippet>import time
CLOCKS_PER_SEC = 1.0
seconds = time.clock() / CLOCKS_PER_SEC
</snippet></ROW><ROW><id>5879916</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>5879916</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>5880293</id><snippet>self.dbpool = ConnectionPool(..., cp_min=1, cp_max=1)
</snippet></ROW><ROW><id>5880676</id><snippet>def ctext(el):
    result = [ ]
    if el.text:
        result.append(el.text)
    for sel in el:
        if sel.tag in ["tr", "td", "table"]:
            result.append("&lt;%s&gt;" % sel.tag)
            result.append(ctext(sel))
            result.append("&lt;/%s&gt;" % sel.tag)
        else:
            result.append(ctext(sel))
        if sel.tail:
            result.append(sel.tail)
    return "".join(result)

html = """your input string"""
el = lxml.html.fromstring(html)
print ctext(el)
</snippet></ROW><ROW><id>5880676</id><snippet>  &lt;b&gt;text of the bold &lt;i&gt;text of the italic&lt;/i&gt; tail of the italic&lt;/b&gt;
</snippet></ROW><ROW><id>5880679</id><snippet>con.commit() #after inserts
</snippet></ROW><ROW><id>5880679</id><snippet>con.autocommit = true #before inserts
</snippet></ROW><ROW><id>5880761</id><snippet>@bottle.route('/static/:filename#.*#')
def static(filename):
    return bottle.static_file(filename, root='./static/')
</snippet></ROW><ROW><id>5880761</id><snippet>response.headers['Cache-Control'] = 'public, max-age=SECONDS'
</snippet></ROW><ROW><id>5880761</id><snippet>return</snippet></ROW><ROW><id>5880809</id><snippet>LoopingCall</snippet></ROW><ROW><id>5881343</id><snippet>for i in range(4):
    val = a.instances["name_"+str(i)]
    my_list.append(val)
</snippet></ROW><ROW><id>5881343</id><snippet>my_list = tuple(a.instances["name_"+str(i)] for i in range(4))
</snippet></ROW><ROW><id>5881753</id><snippet>sender()</snippet></ROW><ROW><id>5881753</id><snippet>d = ModifyRect()

l = lambda: modifyRectAccepted(ctrl_name, rect_name)
d.accepted.connect(l)

def modifyRectAccepted(self, ctrl_name, rect_name):
    #foo
</snippet></ROW><ROW><id>5881781</id><snippet>from ctypes import *

PyObject_HEAD = [
    ('ob_refcnt', c_size_t),
    ('ob_type', c_void_p),
]

class EVP_MD(Structure):
    _fields_ = [
        ('type', c_int),
        ('pkey_type', c_int),
        ('md_size', c_int),
        ('flags', c_ulong),
        ('init', c_void_p),
        ('update', c_void_p),
        ('final', c_void_p),
        ('copy', c_void_p),
        ('cleanup', c_void_p),
        ('sign', c_void_p),
        ('verify', c_void_p),
        ('required_pkey_type', c_int*5),
        ('block_size', c_int),
        ('ctx_size', c_int),
    ]

class EVP_MD_CTX(Structure):
    _fields_ = [
        ('digest', POINTER(EVP_MD)),
        ('engine', c_void_p),
        ('flags', c_ulong),
        ('md_data', POINTER(c_char)),
    ]

class EVPobject(Structure):
    _fields_ = PyObject_HEAD + [
        ('name', py_object),
        ('ctx', EVP_MD_CTX),
    ]
</snippet></ROW><ROW><id>5881781</id><snippet>import hashlib

hash = hashlib.md5('test')
print hash.hexdigest()

c_evp_obj = cast(c_void_p(id(hash)), POINTER(EVPobject)).contents
ctx = c_evp_obj.ctx
digest = ctx.digest.contents
state = ctx.md_data[:digest.ctx_size]

hash2 = hashlib.md5()
c_evp_obj = cast(c_void_p(id(hash2)), POINTER(EVPobject)).contents
ctx = c_evp_obj.ctx
digest = ctx.digest.contents
memmove(ctx.md_data, state, digest.ctx_size)
print hash2.hexdigest()
</snippet></ROW><ROW><id>5882045</id><snippet>strip()</snippet></ROW><ROW><id>5882045</id><snippet>.strip("EVENTS: RAID\n")</snippet></ROW><ROW><id>5882045</id><snippet>E</snippet></ROW><ROW><id>5882045</id><snippet>V</snippet></ROW><ROW><id>5882045</id><snippet>E</snippet></ROW><ROW><id>5882045</id><snippet>N</snippet></ROW><ROW><id>5882045</id><snippet>V</snippet></ROW><ROW><id>5882045</id><snippet>Volume Set Information</snippet></ROW><ROW><id>5882045</id><snippet>replace(string, "EVENTS: RAID\n", "", 1)</snippet></ROW><ROW><id>5882113</id><snippet>myData = myModule.logIn( * myObject.getAccount() )
</snippet></ROW><ROW><id>5882113</id><snippet>*</snippet></ROW><ROW><id>5882250</id><snippet>str = "http://farm6.static.flickr.com/5149/5684108566_aed8b9b52d_s.jpg"
str = str.replace("_s","_m")
</snippet></ROW><ROW><id>5882250</id><snippet>.jpg</snippet></ROW><ROW><id>5882250</id><snippet>str = "http://farm6.static.flickr.com/5149/5684108566_aed8b9b52d_s.jpg"
str = str.replace("_s.jpg","_m.jpg")
</snippet></ROW><ROW><id>5882426</id><snippet>def clone_entity(e, **extra_args):
  """Clones an entity, adding or overriding constructor attributes.

  The cloned entity will have exactly the same property values as the original
  entity, except where overridden. By default it will have no parent entity or
  key name, unless supplied.

  Args:
    e: The entity to clone
    extra_args: Keyword arguments to override from the cloned entity and pass
      to the constructor.
  Returns:
    A cloned, possibly modified, copy of entity e.
  """
  klass = e.__class__
  props = dict((k, v.__get__(e, klass)) for k, v in klass.properties().iteritems())
  props.update(dict([(k, getattr(e, k)) for k in e.dynamic_properties()]))
  props.update(extra_args)
  return klass(**props)
</snippet></ROW><ROW><id>5882469</id><snippet>thread</snippet></ROW><ROW><id>5882469</id><snippet>threading</snippet></ROW><ROW><id>5882469</id><snippet>thread</snippet></ROW><ROW><id>5882469</id><snippet>Thread.start</snippet></ROW><ROW><id>5882469</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>5882469</id><snippet>daemon</snippet></ROW><ROW><id>5882469</id><snippet>Thread</snippet></ROW><ROW><id>5882469</id><snippet>start</snippet></ROW><ROW><id>5882469</id><snippet>daemon</snippet></ROW><ROW><id>5882469</id><snippet>False</snippet></ROW><ROW><id>5882469</id><snippet>start_new_thread</snippet></ROW><ROW><id>5882809</id><snippet>DATE_FORMAT</snippet></ROW><ROW><id>5882809</id><snippet>DATETIME_FORMAT</snippet></ROW><ROW><id>5882911</id><snippet>isinstance</snippet></ROW><ROW><id>5882911</id><snippet>isinstance</snippet></ROW><ROW><id>5883218</id><snippet>Widget.__subclasses__()</snippet></ROW><ROW><id>5883218</id><snippet>def inheritors(klass):
    subclasses = set()
    work = [klass]
    while work:
        parent = work.pop()
        for child in parent.__subclasses__():
            if child not in subclasses:
                subclasses.add(child)
                work.append(child)
    return subclasses
</snippet></ROW><ROW><id>5883291</id><snippet>for i in range(3):
  try:
    result = urlfetch.fetch(...)
    # run success conditions here
    break
  except DownloadError:
    #logging.debug("urlfetch failed!")
    pass
</snippet></ROW><ROW><id>5883291</id><snippet>deadline=10</snippet></ROW><ROW><id>5883351</id><snippet>new_list = []
while condition:
    new_list.append(f(x))
</snippet></ROW><ROW><id>5883395</id><snippet>#!/usr/bin/env python

import gtk

pixmap_rc = """
pixmap_path "/home/foo/images"
style "bar" {
    bg_pixmap[NORMAL] = "logo.svg"
} widget "*foo" style "bar"
"""

color_rc= """
style "bar" {
    bg[NORMAL] = "Hot Pink"
} widget "*foo" style "bar"
"""

def main ():
    window = gtk.Window()
    window.set_decorated(False)
    window.connect("destroy", gtk.main_quit)

    window.set_name("foo")
    gtk.rc_parse_string(color_rc)

    window.show_all()
    gtk.main()

if __name__ == "__main__":
    main ()
</snippet></ROW><ROW><id>5883395</id><snippet>pixmap_path "/home/foo/images"
style "bar" {
    engine "pixmap" {
        image {
            function = FLAT_BOX
            file     = "test.png"
            stretch  = TRUE
        }
    }
} widget "*foo" style "bar"
</snippet></ROW><ROW><id>5883577</id><snippet>def update_data():
    global data
    data += 1
</snippet></ROW><ROW><id>5884021</id><snippet>datetime.strptime('2011221', '%Y%W%w')
</snippet></ROW><ROW><id>5884021</id><snippet>from datetime import datetime, timedelta, date
def tofirstdayinisoweek(year, week):
    ret = datetime.strptime('%04d-%02d-1' % (year, week), '%Y-%W-%w')
    if date(year, 1, 4).isoweekday() &gt; 4:
        ret -= timedelta(days=7)
    return ret
</snippet></ROW><ROW><id>5884075</id><snippet>py2exe</snippet></ROW><ROW><id>5884123</id><snippet>hash</snippet></ROW><ROW><id>5884123</id><snippet>hash(frozenset(my_dict.items()))
</snippet></ROW><ROW><id>5884548</id><snippet>User.objects.exclude(blog=None)
</snippet></ROW><ROW><id>5884675</id><snippet>__range</snippet></ROW><ROW><id>5884675</id><snippet>VALUE_MAP = {
    "1", (0, 399),
    "2", (400, 599),
    "3", (600, 1000),
    ...
}
value_range = VALUE_MAP[price]

GharData.objects.filter(...other criteria..., value__range=value_range)
</snippet></ROW><ROW><id>5884729</id><snippet>__name__</snippet></ROW><ROW><id>5884729</id><snippet>
from one import two
print two.__name__
</snippet></ROW><ROW><id>5884729</id><snippet>
one.two
</snippet></ROW><ROW><id>5884729</id><snippet>
import os.path
from one import two
print two.__name__.replace('.', os.path.sep)
</snippet></ROW><ROW><id>5884729</id><snippet>
one/two
</snippet></ROW><ROW><id>5884729</id><snippet>
one\two
</snippet></ROW><ROW><id>5885349</id><snippet>from scipy import linspace
from scipy import pi,sqrt,exp
from scipy.special import erf

from pylab import plot,show

def pdf(x):
    return 1/sqrt(2*pi) * exp(-x**2/2)

def cdf(x):
    return (1 + erf(x/sqrt(2))) / 2

def skew(x,e=0,w=1,a=0):
    t = (x-e) / w
    return 2 / w * pdf(t) * cdf(a*t)
    # You can of course use the scipy.stats.norm versions
    # return 2 * norm.pdf(t) * norm.cdf(a*t)


n = 2**10

e = 1.0 # location
w = 2.0 # scale

x = linspace(-10,10,n) 

for a in range(-3,4):
    p = skew(x,e,w,a)
    plot(x,p)

show()
</snippet></ROW><ROW><id>5885349</id><snippet>scipy.optimize.leastsq</snippet></ROW><ROW><id>5885349</id><snippet>e=1.0</snippet></ROW><ROW><id>5885349</id><snippet>w=2.0</snippet></ROW><ROW><id>5885349</id><snippet>a=1.0</snippet></ROW><ROW><id>5885349</id><snippet>fzz = skew(x,e,w,a) + norm.rvs(0,0.04,size=n) # fuzzy data

def optm(l,x):
    return skew(x,l[0],l[1],l[2]) - fzz

print leastsq(optm,[0.5,0.5,0.5],(x,))
</snippet></ROW><ROW><id>5885349</id><snippet>(array([ 1.05206154,  1.96929465,  0.94590444]), 1)
</snippet></ROW><ROW><id>5885448</id><snippet>connessione.commit()
connessione.close()
</snippet></ROW><ROW><id>5886001</id><snippet>def incrementCounter():
    global counter
    counter += 1
</snippet></ROW><ROW><id>5886001</id><snippet>counter</snippet></ROW><ROW><id>5886001</id><snippet>incrementCounter()</snippet></ROW><ROW><id>5886001</id><snippet>counter</snippet></ROW><ROW><id>5886001</id><snippet>counter += 1</snippet></ROW><ROW><id>5886001</id><snippet>counter</snippet></ROW><ROW><id>5886001</id><snippet>counter = counter + 1
</snippet></ROW><ROW><id>5886001</id><snippet>counter</snippet></ROW><ROW><id>5886001</id><snippet>counter</snippet></ROW><ROW><id>5886001</id><snippet>counter</snippet></ROW><ROW><id>5886001</id><snippet>counter</snippet></ROW><ROW><id>5886001</id><snippet>counter</snippet></ROW><ROW><id>5886227</id><snippet>in2.seek(0)
</snippet></ROW><ROW><id>5886287</id><snippet>from xml.etree import ElementTree
import re

def proper_SN(elem):
    if re.search('\d{6}', elem.text):
        return True
    return False

tree = ElementTree.parse('data.xml')
rows = tree.getiterator('SerialNumber')
for row in rows:
    print "SerialNumber: %s Passed = %s" % (row.text, proper_SN(row))
</snippet></ROW><ROW><id>5886287</id><snippet>[mpenning@hotcoffee tmp]$ python parse.py 
SerialNumber: 154236 Passed = True
[mpenning@hotcoffee tmp]$
</snippet></ROW><ROW><id>5886287</id><snippet>DeviceData</snippet></ROW><ROW><id>5886287</id><snippet> &lt;Data&gt;
   &lt;DeviceData&gt;
       &lt;Info&gt;
        &lt;SerialNumber&gt;154236&lt;/SerialNumber&gt;
        &lt;EngineVersion&gt;12.0.4.13&lt;/EngineVersion&gt;
        &lt;MediaType&gt;100BaseT&lt;/MediaType&gt;
        &lt;Ethernet&gt;Y&lt;/Ethernet&gt;
        &lt;Wireless&gt;N&lt;/Wireless&gt;
        &lt;Mac&gt;00:25:F6:25:K9&lt;/Mac&gt;
       &lt;/Info&gt;
   &lt;/DeviceData&gt;
 &lt;/Data&gt;
</snippet></ROW><ROW><id>5886287</id><snippet>from xml.etree import ElementTree
import re

def proper_SN(elem):
    if re.search('\d{6}', elem.text):
        return True
    return False

tree = ElementTree.parse('data.xml')
serial = tree.find('DeviceData/Info/SerialNumber').text
engine = tree.find('DeviceData/Info/EngineVersion').text
media = tree.find('DeviceData/Info/MediaType').text

if proper_SN:
    serstr = "good"
else:
    serstr = "bad"

print "Found a %s serial number (%s), with engine %s and media %s" % (serstr, serial, engine, media)
</snippet></ROW><ROW><id>5886287</id><snippet>[mpenning@hotcoffee tmp]$ python parse.py 
Found a good serial number (154236), with engine 12.0.4.13 and media 100BaseT
[mpenning@hotcoffee tmp]$
</snippet></ROW><ROW><id>5886368</id><snippet>keyword</snippet></ROW><ROW><id>5886368</id><snippet>keyword2</snippet></ROW><ROW><id>5886368</id><snippet>\b</snippet></ROW><ROW><id>5886368</id><snippet>import re
from StringIO import StringIO

text = """

here is some text 1
I want to print out this line and the following 3 lines only once keyword 2
print this line since it has a keyword2 3
print this line keyword 4
print this line 5
I don't want to print this line but I want to start looking for more text starting at this line 6
Don't print this line 7
Not this line either 8
I want to print out this line again and the following 3 lines only once keyword 9
please print this line keyword 10
please print this line it has the keyword2 11
please print this line 12
Don't print this line 13
Start again searching here 14
etc.
"""


def my_scan(data,search1,search2):
  buffer = []
  for line in data:
    buffer.append(line)
    if len(buffer) &gt; 4:
      buffer.pop(0)
    if len(buffer) == 4: # Valid search block
      if search1.search(buffer[0]) and search2.search("\n".join(buffer[1:3])):
        for item in buffer:
          yield item
        buffer = []

# First search term
s1 = re.compile(r'\bkeyword\b')
s2 = re.compile(r'\bkeyword2\b')

for row in my_scan(StringIO(text),s1,s2):
  print row.rstrip()
</snippet></ROW><ROW><id>5886368</id><snippet>I want to print out this line and the following 3 lines only once keyword 2
print this line since it has a keyword2 3
print this line keyword 4
print this line 5
I want to print out this line again and the following 3 lines only once keyword 9
please print this line keyword 10
please print this line it has the keyword2 11
please print this line 12
</snippet></ROW><ROW><id>5886369</id><snippet>trace</snippet></ROW><ROW><id>5886369</id><snippet>% python -m trace -c -t -C ./coverage test_exit.py
</snippet></ROW><ROW><id>5886369</id><snippet>import sys
import threading

class Worker(object):
    def run(self):
        try:
            sys.exit(1)
        except:
            print sys.exc_info()

threading.Thread(target=Worker().run).start()
</snippet></ROW><ROW><id>5886369</id><snippet>coverage</snippet></ROW><ROW><id>5886369</id><snippet>...
threading.py(482):         try:
threading.py(483):             if self.__target:
threading.py(484):                 self.__target(*self.__args, **self.__kwargs)
 --- modulename: test_exit, funcname: run
test_exit.py(7):         try:
test_exit.py(8):             sys.exit(1)
test_exit.py(9):         except:
test_exit.py(10):             print sys.exc_info()
(&lt;type 'exceptions.SystemExit'&gt;, SystemExit(1,), &lt;traceback object at 0x7f23098822d8&gt;)
threading.py(488):             del self.__target, self.__args, self.__kwargs
...
</snippet></ROW><ROW><id>5886462</id><snippet>class ExceptionLoggingMiddleware(object):
    def process_exception(self, request, exception):
        import traceback
        print traceback.format_exc()
</snippet></ROW><ROW><id>5886867</id><snippet>from django.db.models import F
StockRequest.objects.filter(amount_requested=F("amount_approved"))
</snippet></ROW><ROW><id>5887040</id><snippet>import random

def decision(probability):
    return random.random() &lt; probability
</snippet></ROW><ROW><id>5887181</id><snippet>str(dict)</snippet></ROW><ROW><id>5887181</id><snippet>for k, v in network.iteritems():
    output.write(str({k: v})[1:-1] + '\n')
</snippet></ROW><ROW><id>5887667</id><snippet>plpython.dll</snippet></ROW><ROW><id>5887667</id><snippet>C:/Program Files/PostgreSQL/9.0/lib</snippet></ROW><ROW><id>5887667</id><snippet>cd C:\Program Files\PostgreSQL\8.2\bin
createlang --dbname=MyDb plpythonu -U myuser
</snippet></ROW><ROW><id>5887667</id><snippet>C:\Program Files\PostgreSQL\8.2\lib</snippet></ROW><ROW><id>5887667</id><snippet>plpython.dll</snippet></ROW><ROW><id>5887667</id><snippet>plpython.dll</snippet></ROW><ROW><id>5887895</id><snippet>newList = [ str(t) for t in mylist ]
</snippet></ROW><ROW><id>5887895</id><snippet>newList = map( str, myList )
</snippet></ROW><ROW><id>5887921</id><snippet>import os, os.path
import shutil

for m in musfile:
    tag.link(m)
    mar = str(tag.getArtist())
    mal = str(tag.getAlbum())
    mti = str(tag.getTitle())
    new_name = mar + ' - ' + mti + '.mp3'
    os.rename(m, new_name)
    new_dir = os.path.join(newmusicdir, mar, mal)    #use os.path.join instead of +'/' to be more multi platform, it is a good habit
    try:
        os.makedirs(new_dir)
    except:
        pass
    shutil.copy(new_name, new_dir)
</snippet></ROW><ROW><id>5888104</id><snippet>&gt;&gt;&gt; os.path.normpath("/bar/foo/baz/../..")
"/bar"
</snippet></ROW><ROW><id>5888259</id><snippet>def dostuff():
    stuff

def dootherstuff():
    otherstuff

def doevenmorestuff():
    evenmorestuff

actions = ((regex1, dostuff), (regex2, dootherstuff), (regex3, doevenmorestuff))

for regex, action in actions:
    m = re.match(regex, line)
    if m: 
        action()
        break
</snippet></ROW><ROW><id>5888774</id><snippet>your_string = 'string'
wrap_list = [your_string]
#Now create the deque
d = deque(wrap_list)
</snippet></ROW><ROW><id>5888774</id><snippet>your_string = 'string'
d = deque([your_string])
</snippet></ROW><ROW><id>5888793</id><snippet>sys.path</snippet></ROW><ROW><id>5888793</id><snippet>buildout</snippet></ROW><ROW><id>5888793</id><snippet>bin/</snippet></ROW><ROW><id>5888793</id><snippet>sys.path</snippet></ROW><ROW><id>5888793</id><snippet>./bar.py</snippet></ROW><ROW><id>5888793</id><snippet>./foo</snippet></ROW><ROW><id>5888793</id><snippet>bar.py</snippet></ROW><ROW><id>5888793</id><snippet>bin/bar</snippet></ROW><ROW><id>5888793</id><snippet>./foo</snippet></ROW><ROW><id>5888793</id><snippet>bin/bar</snippet></ROW><ROW><id>5888793</id><snippet>bin/foo</snippet></ROW><ROW><id>5888793</id><snippet>sys.path</snippet></ROW><ROW><id>5888793</id><snippet>sys.path</snippet></ROW><ROW><id>5888793</id><snippet>extra-paths</snippet></ROW><ROW><id>5888793</id><snippet>zc.recipe.egg</snippet></ROW><ROW><id>5888793</id><snippet>${buildout:directory}</snippet></ROW><ROW><id>5888793</id><snippet>[foo]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
extra-paths = ${buildout:directory}
entry-points = foo=foo:main
</snippet></ROW><ROW><id>5888814</id><snippet>nntplib</snippet></ROW><ROW><id>5888814</id><snippet>nntplib.NNTP</snippet></ROW><ROW><id>5888814</id><snippet>putline(self, line)</snippet></ROW><ROW><id>5888814</id><snippet>getline(self)</snippet></ROW><ROW><id>5888814</id><snippet>import time
import nntplib

class RateLimitingNNTP(nntplib.NNTP):
    RX_BPS_LIMIT = 10000
    def __init__(self, *args, **kw):
        NNTP.__init__(self, *args, **kw)
        self._start_time = time.time()
        self._total_bytes_rxd = 0

    def getline(self):
        rate_delay = self._total_bytes_rxd * self.RX_BPS_LIMIT - (time.time() - self._start_time)
        if rate_delay &gt; 0:
            time.sleep(rate_delay)
        line = NNTP.getline(self)
        self._total_bytes_rxd += len(line)
</snippet></ROW><ROW><id>5888840</id><snippet>self._vocabulary = self._vocabulary or self.keys()
</snippet></ROW><ROW><id>5888840</id><snippet>self._vocabulary</snippet></ROW><ROW><id>5888840</id><snippet>None</snippet></ROW><ROW><id>5888840</id><snippet>__init__</snippet></ROW><ROW><id>5888840</id><snippet>or</snippet></ROW><ROW><id>5888840</id><snippet>self.keys()</snippet></ROW><ROW><id>5888840</id><snippet>self._vocabulary</snippet></ROW><ROW><id>5888840</id><snippet>vocabulary</snippet></ROW><ROW><id>5888840</id><snippet>self._vocabulary</snippet></ROW><ROW><id>5888840</id><snippet>None</snippet></ROW><ROW><id>5889147</id><snippet>,(?=\s*FROM\b)
</snippet></ROW><ROW><id>5889147</id><snippet>,(?=\s*(?:FROM|TO|COUNT)\b)
</snippet></ROW><ROW><id>5889147</id><snippet>remove_commas = re.compile(r',(?=\s*FROM\b)', re.IGNORECASE)
str = remove_commas.sub('', str)
</snippet></ROW><ROW><id>5889662</id><snippet>bool([a for a in my_dict.values() if a != []])
</snippet></ROW><ROW><id>5889662</id><snippet>python -mtimeit -s"my_dict={'a':[],'b':[]}" "bool([a for a in my_dict.values() if a != []])"
1000000 loops, best of 3: 0.875 usec per loop
</snippet></ROW><ROW><id>5889662</id><snippet>python -mtimeit -s"my_dict={'a':[],'b':[]}" "any([my_dict[i] != [] for i in my_dict])"
1000000 loops, best of 3: 0.821 usec per loop
</snippet></ROW><ROW><id>5889662</id><snippet>python -mtimeit -s"my_dict={'a':[],'b':[]}" "any(x != [] for x in my_dict.itervalues())"
1000000 loops, best of 3: 1.03 usec per loop
</snippet></ROW><ROW><id>5889662</id><snippet>python -mtimeit -s"my_dict={'a':[],'b':[]}" "all(map(lambda x: x == [], my_dict.values()))"
1000000 loops, best of 3: 1.47 usec per loop
</snippet></ROW><ROW><id>5889662</id><snippet>python -mtimeit -s"my_dict={'a':[],'b':[]}" "filter(lambda x: x != [], my_dict.values())"
1000000 loops, best of 3: 1.19 usec per loop
</snippet></ROW><ROW><id>5889662</id><snippet>#n=1000
python -mtimeit -s"my_dict=dict(zip(range(1000),[[]]*1000))" "bool([a for a in my_dict.values() if a != []])"
10000 loops, best of 3: 126 usec per loop

#n=100000
python -mtimeit -s"my_dict=dict(zip(range(100000),[[]]*100000))" "bool([a for a in my_dict.values() if a != []])"
100 loops, best of 3: 14.2 msec per loop
</snippet></ROW><ROW><id>5889662</id><snippet>#n=1000
python -mtimeit -s"my_dict=dict(zip(range(1000),[[]]*1000))" "any([my_dict[i] != [] for i in my_dict])"
10000 loops, best of 3: 198 usec per loop

#n=100000
python -mtimeit -s"my_dict=dict(zip(range(100000),[[]]*100000))" "any([my_dict[i] != [] for i in my_dict])"
10 loops, best of 3: 21.1 msec per loop
</snippet></ROW><ROW><id>5889662</id><snippet>python -mtimeit -s"my_dict=dict(zip(range(1000),[0]*1000))" "bool([a for a in my_dict.values() if a != []])"
10000 loops, best of 3: 198 usec per loop
</snippet></ROW><ROW><id>5889662</id><snippet>python -mtimeit -s"my_dict=dict(zip(range(1000),[0]*1000))" "any([my_dict[i] != [] for i in my_dict])"
1000 loops, best of 3: 265 usec per loop
</snippet></ROW><ROW><id>5889737</id><snippet>from django.contrib import admin
admin.autodiscover()
</snippet></ROW><ROW><id>5889737</id><snippet>    url(r'^admin/', include(admin.site.urls)),
</snippet></ROW><ROW><id>5890021</id><snippet>textwrap</snippet></ROW><ROW><id>5890021</id><snippet>import string</snippet></ROW><ROW><id>5890021</id><snippet>string.py</snippet></ROW><ROW><id>5890021</id><snippet>maketrans</snippet></ROW><ROW><id>5890152</id><snippet>p = Process(target=graphic, args=())
p1 = Process(target=connect, args=())
</snippet></ROW><ROW><id>5890406</id><snippet>import time

now = time.time()
future = now + 10
while time.time() &lt; future:
    # do stuff
    pass
</snippet></ROW><ROW><id>5890406</id><snippet>while True:
    if time.time() &gt; future:
        break
    # do other stuff
</snippet></ROW><ROW><id>5890451</id><snippet>gcc</snippet></ROW><ROW><id>5890451</id><snippet>atlas% which gcc
/usr/bin/gcc
atlas% gcc -v
Target: i686-apple-darwin10
..
Thread model: posix
gcc version 4.2.1 (Apple Inc. build 5666) (dot 3)
</snippet></ROW><ROW><id>5890555</id><snippet>widget = QWidget()    
layout = QVBoxLayout()

btn = QPushButton("To be removed")
layout.addWidget(btn)
widget.setLayout(layout)

# later
btn.setParent(None)
</snippet></ROW><ROW><id>5890635</id><snippet>import libxml2
tree = libxml2.parseDoc(data)
xp = tree.xpathNewContext()
xp.xpathRegisterNs("purl", "http://purl.org/atom/ns#")
print xp.xpathEval('//purl:fullcount')
</snippet></ROW><ROW><id>5890635</id><snippet>[&lt;xmlNode (fullcount) object at 0x7fbbeba9ef80&gt;]
</snippet></ROW><ROW><id>5890756</id><snippet>wikitable</snippet></ROW><ROW><id>5890756</id><snippet>class="something wikitable other"</snippet></ROW><ROW><id>5890756</id><snippet>wikitable</snippet></ROW><ROW><id>5890756</id><snippet>html = '''&lt;html&gt;&lt;table class="sortable wikitable other"&gt;blah&lt;/table&gt;
&lt;table class="wikitable sortable"&gt;blah&lt;/table&gt;
&lt;table class="wikitable"&gt;&lt;blah&gt;&lt;/table&gt;&lt;/html&gt;'''

tree = BeautifulSoup(html)
for node in tree.findAll(attrs={'class': re.compile(r".*\bwikitable\b.*")}):
    print node
</snippet></ROW><ROW><id>5890756</id><snippet>&lt;table class="sortable wikitable other"&gt;blah&lt;/table&gt;
&lt;table class="wikitable sortable"&gt;blah&lt;/table&gt;
&lt;table class="wikitable"&gt;&lt;blah&gt;&lt;/blah&gt;&lt;/table&gt;
</snippet></ROW><ROW><id>5890828</id><snippet>def tictoc(func, repeats=3, loops=100, *args, **kargs):
    elapsed = timeit.repeat(lambda: func(*args, **kargs), repeat = repeats, number = loops)
    mine = min(elapsed)
    return "%s finished in %.5fs (%s loops, repeated %s times): %.5fs best time per loop"         %(func.__name__, mine, loops, repeats, mine/loops)
</snippet></ROW><ROW><id>5891293</id><snippet>i = 1
data = [[1,10],[2,20],[3,30]]
result = [d[i] for d in data]  # [10, 20, 30]
</snippet></ROW><ROW><id>5891407</id><snippet>live</snippet></ROW><ROW><id>5891407</id><snippet>click</snippet></ROW><ROW><id>5891407</id><snippet>$("#button").live('click', function(e){
  e.preventDefault();
  noPgLoad(this);
});
</snippet></ROW><ROW><id>5891407</id><snippet>click</snippet></ROW><ROW><id>5891407</id><snippet>$('somediv').replaceWith(data)</snippet></ROW><ROW><id>5891407</id><snippet>live</snippet></ROW><ROW><id>5891447</id><snippet>numpy.fill</snippet></ROW><ROW><id>5891447</id><snippet>a[:] = v</snippet></ROW><ROW><id>5891469</id><snippet>string</snippet></ROW><ROW><id>5891540</id><snippet>import numpy as np
x = np.arange(100)
y = x[1:5]
y[:] = 1000
print x[:10]
</snippet></ROW><ROW><id>5891540</id><snippet>[   0 1000 1000 1000 1000    5    6    7    8    9]
</snippet></ROW><ROW><id>5891540</id><snippet>y</snippet></ROW><ROW><id>5891540</id><snippet>x</snippet></ROW><ROW><id>5891540</id><snippet>array_[1:].sum()</snippet></ROW><ROW><id>5891540</id><snippet>sum</snippet></ROW><ROW><id>5891540</id><snippet>In [28]: x = np.arange(10000)

In [29]: %timeit x.sum()
100000 loops, best of 3: 10.2 us per loop

In [30]: %timeit sum(x)
100 loops, best of 3: 4.01 ms per loop
</snippet></ROW><ROW><id>5891540</id><snippet>itertools.islice</snippet></ROW><ROW><id>5891540</id><snippet>result = sum(some_list[1:])
</snippet></ROW><ROW><id>5891540</id><snippet>result = sum(itertools.islice(some_list, 1, None))
</snippet></ROW><ROW><id>5891540</id><snippet>some_array[1:].sum()</snippet></ROW><ROW><id>5891540</id><snippet>islice</snippet></ROW><ROW><id>5891581</id><snippet>{% for post in posts %}
  {{ post.media_content.draw_item }}
{% endfor %}
</snippet></ROW><ROW><id>5891581</id><snippet>draw_item</snippet></ROW><ROW><id>5891598</id><snippet>strftime</snippet></ROW><ROW><id>5891598</id><snippet>if 4 &lt;= day &lt;= 20 or 24 &lt;= day &lt;= 30:
    suffix = "th"
else:
    suffix = ["st", "nd", "rd"][day % 10 - 1]
</snippet></ROW><ROW><id>5891598</id><snippet>from datetime import datetime as dt

def suffix(d):
    return 'th' if 11&lt;=d&lt;=13 else {1:'st',2:'nd',3:'rd'}.get(d%10, 'th')

def custom_strftime(format, t):
    return t.strftime(format).replace('{S}', str(t.day) + suffix(t.day))

print custom_strftime('%B {S}, %Y', dt.now())
</snippet></ROW><ROW><id>5891598</id><snippet>May 5th, 2011</snippet></ROW><ROW><id>5891999</id><snippet>xor</snippet></ROW><ROW><id>5891999</id><snippet>import pygame

srf = pygame.display.set_mode((640,480))
pixels = pygame.surfarray.pixels2d(srf)
pixels ^= 2 ** 32 - 1
del pixels

pygame.display.flip()
</snippet></ROW><ROW><id>5891999</id><snippet>pixels ^= 2 ** 32 - 1</snippet></ROW><ROW><id>5892325</id><snippet>twitter.__file__</snippet></ROW><ROW><id>5892325</id><snippet>twitter.__file__</snippet></ROW><ROW><id>5892325</id><snippet>easy_install -U twitter</snippet></ROW><ROW><id>5892366</id><snippet>writePixelsRect</snippet></ROW><ROW><id>5892366</id><snippet>extern "C"</snippet></ROW><ROW><id>5892366</id><snippet>_Z15writePixelsRectP8JoxColoriiii</snippet></ROW><ROW><id>5892366</id><snippet>nm libjox.so | grep writePixel | cut -d " " -f 3
</snippet></ROW><ROW><id>5892366</id><snippet>from ctypes import *

LIBRARY_NAME = 'libjox.so'
c = cdll.LoadLibrary(LIBRARY_NAME)

WIDTH = 20
HEIGHT = 20

class JoxColor(Structure):
    _fields_ = [("r", c_float), ("g", c_float), ("b", c_float), ("a", c_float)]

ColorBlock = JoxColor * (WIDTH * HEIGHT)

data_array = ColorBlock()

color = JoxColor(0, 0, 1, 0)
for i in range(WIDTH * HEIGHT):
    data_array[i] = color

c._Z15writePixelsRectP8JoxColoriiii(data_array, 0, 0, WIDTH, HEIGHT)
</snippet></ROW><ROW><id>5892366</id><snippet>_Z15writePixelsRectP8JoxColoriiii</snippet></ROW><ROW><id>5892366</id><snippet>#include &lt;stdio.h&gt;

struct JoxColor {
    float r, g, b, a;
};

void writePixelsRect(JoxColor *colors, int left, int top, int width, int height) {
    int p = 0;
    printf("size: %i, %i\n", width, height);
    for (int i = 0; i &lt; width; i++) {
        for (int j = 0; j &lt; height; j++) {
            JoxColor color = colors[p];
            printf("pixel: %f, %f, %f, %f\n", color.r, color.g, color.b, color.a);
        }
    }
}
</snippet></ROW><ROW><id>5892704</id><snippet>import functools

class static_or_instance(object):
  def __init__(self, func):
    self.func = func

  def __get__(self, instance, owner):
    return functools.partial(self.func, instance)

class C(object):
  @static_or_instance
  def a(self, arg):
    if self is None:
      print "called without self:", arg
    else:
      print "called with self:", arg

C.a(42)
C().a(3)
</snippet></ROW><ROW><id>5892879</id><snippet>timestamp = form.cleaned_data['timestamp'] # get timestamp from form, 
messages = Message.objects.filter(timestamp__gt=timestamp) # return only messages newer than timestamp
</snippet></ROW><ROW><id>5892879</id><snippet>last_msg = get_object_or_404(Messages, pk=form.cleaned_data['last_msg'])
messages = Message.objects.filter(timestamp__gt=last_msg.timestamp)
</snippet></ROW><ROW><id>5893186</id><snippet>_</snippet></ROW><ROW><id>5893397</id><snippet>subfmt = ", ".join(["{:5d}"]*3)
fmt = "{:1}{:1}, {:3d}, %s, {:8.3F}, {:&gt;7}" % subfmt
tester = ["M", "T", 1111, 2222, 3333, 4444, 234.23456, "testing"]

&gt;&gt;&gt; print(fmt)
{:1}{:1}, {:3d}, {:5d}, {:5d}, {:5d}, {:8.3F}, {:&gt;7}
&gt;&gt;&gt; print(fmt.format(*tester))
MT, 1111,  2222,  3333,  4444,  234.235, testing
</snippet></ROW><ROW><id>5893926</id><snippet>DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'
</snippet></ROW><ROW><id>5893926</id><snippet>time = datetime.strftime(time, DATETIME_FORMAT)
</snippet></ROW><ROW><id>5893926</id><snippet>time = datetime.strptime(time, DATETIME_FORMAT)
</snippet></ROW><ROW><id>5893926</id><snippet>&gt;&gt;&gt; from datetime import datetime

&gt;&gt;&gt; DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'

&gt;&gt;&gt; time = datetime.now()
&gt;&gt;&gt; time
datetime.datetime(2011, 5, 5, 3, 1, 45, 646302)

&gt;&gt;&gt; time = time.strftime(DATETIME_FORMAT)
&gt;&gt;&gt; time
'2011-05-05 03:01:45'

&gt;&gt;&gt; import json

&gt;&gt;&gt; time = json.loads(json.dumps(time))
&gt;&gt;&gt; time
'2011-05-05 03:01:45'

&gt;&gt;&gt; time = datetime.strptime(time, DATETIME_FORMAT)
&gt;&gt;&gt; time
datetime.datetime(2011, 5, 5, 3, 1, 45)
</snippet></ROW><ROW><id>5894355</id><snippet>$ /opt/pypy-1.5/bin/pypy distribute_setup.py
</snippet></ROW><ROW><id>5894446</id><snippet>re.split("['-]", "pete - he's a boy")
</snippet></ROW><ROW><id>5894577</id><snippet>&lt;</snippet></ROW><ROW><id>5894577</id><snippet>&gt;</snippet></ROW><ROW><id>5894577</id><snippet>SELECT ?s ?o WHERE {
         ?s a &lt;http://purl.org/ontology/mo/MusicArtist&gt;;
            &lt;http://www.w3.org/2002/07/owl#sameAs&gt; ?o .
    } limit 50
</snippet></ROW><ROW><id>5894577</id><snippet>FROM</snippet></ROW><ROW><id>5894577</id><snippet>SERVICE</snippet></ROW><ROW><id>5894577</id><snippet>SERVICE</snippet></ROW><ROW><id>5894577</id><snippet>from SPARQLWrapper import SPARQLWrapper, JSON

sparql = SPARQLWrapper("http://api.talis.com/stores/bbc-backstage/services/sparql")
sparql.setQuery("""
    SELECT ?s ?o
    WHERE {
         ?s a &lt;http://purl.org/ontology/mo/MusicArtist&gt;;
            &lt;http://www.w3.org/2002/07/owl#sameAs&gt; ?o .
    } limit 50
""")
sparql.setReturnFormat(JSON)
results = sparql.query().convert()

for result in results["results"]["bindings"]:
    print result["s"]['value'], result["o"]['value']
</snippet></ROW><ROW><id>5894765</id><snippet>//html/body/div[@id='ui-datepicker-div']/div/div/span[1]</snippet></ROW><ROW><id>5894765</id><snippet>//html/body/div[@id='ui-datepicker-div']/div/div/span[2]</snippet></ROW><ROW><id>5894765</id><snippet>//html/body/div[@id='ui-datepicker-div']/table/tbody/tr[**week index of month.you can think this is a row in datepicker**]/td[**column index of a datepicker.you can think this is a day of a week**]</snippet></ROW><ROW><id>5895385</id><snippet>instance</snippet></ROW><ROW><id>5895385</id><snippet>data</snippet></ROW><ROW><id>5895385</id><snippet>data</snippet></ROW><ROW><id>5895385</id><snippet>instance</snippet></ROW><ROW><id>5895385</id><snippet>self_instance</snippet></ROW><ROW><id>5895385</id><snippet>data</snippet></ROW><ROW><id>5895385</id><snippet>myForm = TestForm(instance=self_instance)
</snippet></ROW><ROW><id>5895646</id><snippet>define_cards</snippet></ROW><ROW><id>5895646</id><snippet>return cards</snippet></ROW><ROW><id>5895646</id><snippet>cards = define_cards()
for i, card in enumerate(cards):
    print i, card
</snippet></ROW><ROW><id>5895646</id><snippet>import itertools as it

rank_string = ("ace","two","three","four","five","six","seven","eight","nine","ten","jack","queen","king")
suit_string = ("clubs","diamonds","hearts","spades")

print 'The cards are:'
for i, card in enumerate(it.product(rank_string, suit_string)):
    print i, '{0[1]} of {0[0]}'.format(card)
</snippet></ROW><ROW><id>5895670</id><snippet>get</snippet></ROW><ROW><id>5895670</id><snippet>is_private = request.POST.get('is_private', False)
</snippet></ROW><ROW><id>5895670</id><snippet>my_var = dict.get(&lt;key&gt;, &lt;default&gt;)
</snippet></ROW><ROW><id>5895733</id><snippet>def make_list(d):
    def append_children(parent, d):
        children = [[x['Child']] for x in d if x['Parent'] == parent[0]]
        if children:
            parent.append(children)
            for child in children:
                append_children(child, d)

    results = [[x['Child']] for x in d if x['Parent'] == 'top']
    for parent in results:
        append_children(parent, d)

    return results
</snippet></ROW><ROW><id>5895733</id><snippet>unordered_list</snippet></ROW><ROW><id>5895733</id><snippet>&lt;ul&gt;</snippet></ROW><ROW><id>5895733</id><snippet>&lt;ul&gt;&lt;li&gt;elem&lt;/li&gt;&lt;/ul&gt;</snippet></ROW><ROW><id>5896210</id><snippet>class File(file):
    """ An helper class for file reading  """

    def __init__(self, *args, **kwargs):
        super(File, self).__init__(*args, **kwargs)
        self.BLOCKSIZE = 4096

    def head(self, lines_2find=1):
        self.seek(0)                            #Rewind file
        return [super(File, self).next() for x in xrange(lines_2find)]

    def tail(self, lines_2find=1):  
        self.seek(0, 2)                         #Go to end of file
        bytes_in_file = self.tell()
        lines_found, total_bytes_scanned = 0, 0
        while (lines_2find + 1 &gt; lines_found and
               bytes_in_file &gt; total_bytes_scanned): 
            byte_block = min(
                self.BLOCKSIZE,
                bytes_in_file - total_bytes_scanned)
            self.seek( -(byte_block + total_bytes_scanned), 2)
            total_bytes_scanned += byte_block
            lines_found += self.read(self.BLOCKSIZE).count('\n')
        self.seek(-total_bytes_scanned, 2)
        line_list = list(self.readlines())
        return line_list[-lines_2find:]

    def backward(self):
        self.seek(0, 2)                         #Go to end of file
        blocksize = self.BLOCKSIZE
        last_row = ''
        while self.tell() != 0:
            try:
                self.seek(-blocksize, 1)
            except IOError:
                blocksize = self.tell()
                self.seek(-blocksize, 1)
            block = self.read(blocksize)
            self.seek(-blocksize, 1)
            rows = block.split('\n')
            rows[-1] = rows[-1] + last_row
            while rows:
                last_row = rows.pop(-1)
                if rows and last_row:
                    yield last_row
        yield last_row
</snippet></ROW><ROW><id>5896210</id><snippet>with File('file.name') as f:
    print f.head(5)
    print f.tail(5)
    for row in f.backward():
        print row
</snippet></ROW><ROW><id>5896516</id><snippet>lat1, lon1 = p1
lat2, lon2 = p2
assert -90 &lt;= lat1 &lt;= 90
assert -90 &lt;= lat2 &lt;= 90
assert -180 &lt;= lon1 &lt;= 180
assert -180 &lt;= lon2 &lt;= 180
lat1, lon1, lat2, lon2 = map(math.radians, (lat1, lon1, lat2, lon2))
</snippet></ROW><ROW><id>5896516</id><snippet>lon3 = lon1 + math.atan2(dy, math.cos(lat1) + dx)
# replacement code follows:
lon3d = math.degrees(lon3)
if lon3d &lt; -180:
    print "oops1", lon3d
    lon3d += 360
elif lon3d &gt; 180:
    print "oops2", lon3d
    lon3d -= 360
return(math.degrees(lat3), lon3d)
</snippet></ROW><ROW><id>5896516</id><snippet>oops2 194.270430902</snippet></ROW><ROW><id>5896516</id><snippet>(-28.355951246746923, -165.72956909809082)</snippet></ROW><ROW><id>5896669</id><snippet>httplib.HTTPSConnection</snippet></ROW><ROW><id>5896669</id><snippet>Authenticate</snippet></ROW><ROW><id>5896669</id><snippet>import httplib  
conn = httplib.HTTPSConnection('10.10.10.10','443')   
auth_header = 'Basic %s' % (":".join(["myusername","mypassword"]).encode('Base64').strip('\r\n'))
conn.request("POST", "/","",{'Authorization':auth_header}) 
response = conn.getresponse()       
print response.status, response.reason
conn.close()
</snippet></ROW><ROW><id>5896790</id><snippet>a = numpy.memmap("data", dtype="S10")
</snippet></ROW><ROW><id>5897061</id><snippet>log = os.popen("log.sh").readlines()
</snippet></ROW><ROW><id>5897061</id><snippet>log = os.popen("log.sh").read()
for line in log.splitlines(True):
   ...
</snippet></ROW><ROW><id>5897318</id><snippet>%d/%b/%Y:%H:%M:%S</snippet></ROW><ROW><id>5897318</id><snippet>%y</snippet></ROW><ROW><id>5897318</id><snippet>date</snippet></ROW><ROW><id>5897318</id><snippet>date '+%d/%b/%Y:%H:%M:%S'
05/May/2011:09:00:41
</snippet></ROW><ROW><id>5897406</id><snippet>def filters_by_distance(i):
    '''Generate filters by distance from i'''
    sorted_indices = sorted(range(len(filters)), key=lambda j: abs(j-i))
    return (filters[j] for j in sorted_indices)
</snippet></ROW><ROW><id>5897460</id><snippet>c = reportlab.pdfgen.canvas.Canvas("test.pdf")
# draw some stuff on c
c.showPage()
c.setPageSize((700, 500)) #some page size, given as a tuple in points
# draw some more stuff on c
c.showPage()
c.save()
</snippet></ROW><ROW><id>5897460</id><snippet>BaseDocTemplate</snippet></ROW><ROW><id>5897460</id><snippet>PageTemplate</snippet></ROW><ROW><id>5897460</id><snippet>PageTemplate</snippet></ROW><ROW><id>5898252</id><snippet>listname['album']</snippet></ROW><ROW><id>5898252</id><snippet>[u'Rumours']</snippet></ROW><ROW><id>5898252</id><snippet>listname['album'][0] 
# Will output the string inside the list.
</snippet></ROW><ROW><id>5898252</id><snippet>[0]</snippet></ROW><ROW><id>5898252</id><snippet>[1]</snippet></ROW><ROW><id>5898252</id><snippet>d = {2:"a",1:"b"}
print d[1] ### prints string b
</snippet></ROW><ROW><id>5898818</id><snippet>import socket

orig_timeout = socket.getdefaulttimeout(timeout)
socket.setdefaulttimeout(timeout)

s = nntplib.NNTP(self.nserver, 119, self.nuser, self.npass)

socket.setdefaulttimeout(orig_timeout)
</snippet></ROW><ROW><id>5899095</id><snippet>numpy.searchsorted()</snippet></ROW><ROW><id>5899095</id><snippet>d1[numpy.searchsorted(t1, t2, side="right") - 1]
</snippet></ROW><ROW><id>5899095</id><snippet>t2</snippet></ROW><ROW><id>5899095</id><snippet>t1</snippet></ROW><ROW><id>5899095</id><snippet>side="right"</snippet></ROW><ROW><id>5899095</id><snippet>- 1</snippet></ROW><ROW><id>5899095</id><snippet>t1[j] &lt;= t2[i]</snippet></ROW><ROW><id>5899095</id><snippet>nan_row = numpy.repeat(numpy.nan, d1.shape[1])
d1_nan = numpy.vstack((nan_row, d1))
d2 = d1_nan[numpy.searchsorted(t1, t2, side="right")]
</snippet></ROW><ROW><id>5899142</id><snippet>b = (a[1:] + a[:-1]) / 2.
</snippet></ROW><ROW><id>5899350</id><snippet>class Neuron(object):

    def __init__(self, **kwargs):
        prop_defaults = {
            "num_axon_segments": 0, 
            "apical_bifibrications": "fancy default",
            ...
        }

        for (prop, default) in prop_defaults.iteritems():
            setattr(self, prop, kwargs.get(prop, default))
</snippet></ROW><ROW><id>5899350</id><snippet>Neuron</snippet></ROW><ROW><id>5899350</id><snippet>n = Neuron(apical_bifibrications="special value")
</snippet></ROW><ROW><id>5899544</id><snippet>m</snippet></ROW><ROW><id>5899544</id><snippet>if m.endswith('.mp3'):
...
elif m.endswith('.flac'):
...
</snippet></ROW><ROW><id>5899643</id><snippet>get_data()</snippet></ROW><ROW><id>5899643</id><snippet>hermes</snippet></ROW><ROW><id>5899643</id><snippet>import pkgutil
data = pkgutil.get_data('hermes', 'templates/python.tpl')
</snippet></ROW><ROW><id>5899643</id><snippet>hermes.__file__</snippet></ROW><ROW><id>5899643</id><snippet>hermes</snippet></ROW><ROW><id>5899643</id><snippet>zipimporter</snippet></ROW><ROW><id>5899643</id><snippet>open(path).read()</snippet></ROW><ROW><id>5899643</id><snippet>&gt;&gt;&gt; import hermes
&gt;&gt;&gt; hermes.__loader__
&lt;zipimporter object "/home/pat/.cascade/virt/foo/lib/python2.6/site-packages/foo-0.0.0-py2.6.egg"&gt;
</snippet></ROW><ROW><id>5899643</id><snippet>distribute</snippet></ROW><ROW><id>5899643</id><snippet>pkg_resources module</snippet></ROW><ROW><id>5899643</id><snippet>import pkg_resources
data = pkg_resources.resource_string('hermes', 'templates/python.tpl')
</snippet></ROW><ROW><id>5899698</id><snippet>.get()</snippet></ROW><ROW><id>5899698</id><snippet>.post()</snippet></ROW><ROW><id>5899974</id><snippet>widget.setParent(None)</snippet></ROW><ROW><id>5900365</id><snippet>idea = ''
while idea != 'new':
    idea = input('...').strip()
    if idea == 'hit':
        print("It's not nice to hit people (or computers).")
    else:
        print('you input [{}]'.format(idea))
</snippet></ROW><ROW><id>5900634</id><snippet>KeyError</snippet></ROW><ROW><id>5900634</id><snippet>defaultdict</snippet></ROW><ROW><id>5900634</id><snippet>int()</snippet></ROW><ROW><id>5900634</id><snippet>0</snippet></ROW><ROW><id>5900634</id><snippet>list()</snippet></ROW><ROW><id>5900655</id><snippet>time.sleep(30)</snippet></ROW><ROW><id>5900655</id><snippet>twisted.python.threadpool.Threadpool</snippet></ROW><ROW><id>5900655</id><snippet>class ServerFactory(protocol.ServerFactory):
    protocol = ServerProtocol

    def __init__(self, portal):
        # ...
        self.threadpool = ThreadPool(25, 50)

    def checkServices(self):
        # ...
        self.postgres = threads.deferToThreadPool(reactor, self.threadpool, checkPostgres)
</snippet></ROW><ROW><id>5900655</id><snippet>checkHttpd</snippet></ROW><ROW><id>5900655</id><snippet>scamd</snippet></ROW><ROW><id>5900723</id><snippet>&gt;&gt;&gt; user = 'heinz'
&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile('%s-\d*'%user)
&gt;&gt;&gt; regex.match('heinz-1')
&lt;_sre.SRE_Match object at 0x2b27a18e3f38&gt;
&gt;&gt;&gt; regex.match('heinz-11')
&lt;_sre.SRE_Match object at 0x2b27a2f7c030&gt;
&gt;&gt;&gt; regex.match('heinz-12345')
&lt;_sre.SRE_Match object at 0x2b27a18e3f38&gt;
&gt;&gt;&gt; regex.match('foo-12345')
</snippet></ROW><ROW><id>5901192</id><snippet>import gtk
import gobject
import cairo
import sys

class PyApp(gtk.Window):

    def __init__(self):
        super(PyApp, self).__init__()

        self.set_title("Fade In")
        self.resize(300, 350)
        self.set_position(gtk.WIN_POS_CENTER)

        ## alpha is starting transparency
        self.alpha = 0
        ## delta is amount to increase alpha
        self.delta = 0.01

        self.connect("destroy", gtk.main_quit)

        self.darea = gtk.DrawingArea()
        self.darea.connect("expose-event", self.expose)
        self.add(self.darea)

        try:
            self.surface = cairo.ImageSurface.create_from_png("/usr/share/icons/gnome/256x256/emotes/face-angel.png")
        except Exception, e:
            print e.message
            sys.exit(1)

        self.show_all()

    def fadeImage(self):
        self.darea.queue_draw()

    def expose(self, widget, event):

        cr = widget.window.cairo_create()

        cr.set_source_surface(self.surface, 10, 10)
        cr.paint_with_alpha(self.alpha)

        self.alpha += self.delta

        if self.alpha &gt;= 1: return False
        else: gobject.timeout_add(50,self.fadeImage)

PyApp()
gtk.main()
</snippet></ROW><ROW><id>5901750</id><snippet>import os
appname = os.environ['APPLICATION_ID']
</snippet></ROW><ROW><id>5901750</id><snippet>from google.appengine.api.app_identity import get_application_id
appname = get_application_id()
</snippet></ROW><ROW><id>5901750</id><snippet>os.environ</snippet></ROW><ROW><id>5901750</id><snippet>os.environ</snippet></ROW><ROW><id>5901750</id><snippet>os.environ</snippet></ROW><ROW><id>5901849</id><snippet>bytes</snippet></ROW><ROW><id>5901849</id><snippet>bytes</snippet></ROW><ROW><id>5901849</id><snippet>bytearray</snippet></ROW><ROW><id>5901849</id><snippet>bytes</snippet></ROW><ROW><id>5901849</id><snippet>str</snippet></ROW><ROW><id>5901849</id><snippet>&gt;&gt;&gt; a = bytearray([1,2,3])
&gt;&gt;&gt; a[0] = 5
&gt;&gt;&gt; a
bytearray(b'\x05\x02\x03')
</snippet></ROW><ROW><id>5902431</id><snippet>numpy.atleast_1d</snippet></ROW><ROW><id>5902431</id><snippet>import numpy as np
x = np.arange(100).reshape(10,10)
print x[0,0]
print np.atleast_1d(x[0,0])
print np.atleast_1d(x[:,:3])
</snippet></ROW><ROW><id>5902579</id><snippet>plot_date</snippet></ROW><ROW><id>5902579</id><snippet>ax.xaxis_date()</snippet></ROW><ROW><id>5902579</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import datetime

x = [datetime.datetime(2010, 12, 1, 10, 0),
    datetime.datetime(2011, 1, 4, 9, 0),
    datetime.datetime(2011, 5, 5, 9, 0)]
y = [4, 9, 2]

ax = plt.subplot(111)
ax.bar(x, y, width=10)
ax.xaxis_date()

plt.show()
</snippet></ROW><ROW><id>5902586</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>5902586</id><snippet>Queue</snippet></ROW><ROW><id>5902586</id><snippet>list()</snippet></ROW><ROW><id>5902586</id><snippet>multiprocess.Queue</snippet></ROW><ROW><id>5902586</id><snippet>Queue</snippet></ROW><ROW><id>5902586</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>5902586</id><snippet>Queue</snippet></ROW><ROW><id>5902586</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>5902586</id><snippet>Queue</snippet></ROW><ROW><id>5902613</id><snippet>from django.db.models import Max
Speed.objects.values_list('user').annotate(Max('speed'))
</snippet></ROW><ROW><id>5902613</id><snippet>User.objects.all().annotate(Max('speed__speed'))
</snippet></ROW><ROW><id>5902613</id><snippet>Speed.objects.filter(time__gte=fiveminutesago).values_list('user').annotate(Max('speed'))
</snippet></ROW><ROW><id>5902720</id><snippet>&gt;&gt;&gt; cmd = subprocess.Popen('ls', stdout=subprocess.PIPE)
&gt;&gt;&gt; cmd_out, cmd_err = cmd.communicate()
</snippet></ROW><ROW><id>5902855</id><snippet>LISTENERS = []

class RealtimeHandler(tornado.websocket.WebSocketHandler):
    def open(self):
        LISTENERS.append(self)

    def on_close(self):
        LISTENERS.remove(self)

application = tornado.web.Application([
    (r'/', RealtimeHandler),
])
</snippet></ROW><ROW><id>5903108</id><snippet>on_delete</snippet></ROW><ROW><id>5903439</id><snippet>query_specifier = {
    'name__iexact': 'foobar'
}
query_set = MyModel.objects.filter(**query_specifier)
</snippet></ROW><ROW><id>5903535</id><snippet>print "Encrypted: %r" % d
</snippet></ROW><ROW><id>5903535</id><snippet>print "Encrypted: %r" % d.encode('base64')
</snippet></ROW><ROW><id>5903535</id><snippet>Message: This world is round, not flat, don't believe them!
Password: secret
Encrypted string: pafHnI124lxzCr+93COqxfgOTan8x9oPzX4R/PDYkBnrjufk0/7mesG5tmS2AU
Pxna3z0jY+7II=
Decrypted string: This world is round, not flat, don't believe them!
</snippet></ROW><ROW><id>5903535</id><snippet>import md5
from pyDes import *

Msg = "This world is round, not flat, don't believe them!"
Password = "secret"

m=md5.new()
m.update(Password)

k = triple_des(m.digest() , ECB,padmode=PAD_PKCS5)
d = k.encrypt(Msg)

print "Encrypted: %r" % d.encode('base64')  
print "Decrypted: %r" % k.decrypt(d)
assert k.decrypt(d, padmode=PAD_PKCS5) == Msg
</snippet></ROW><ROW><id>5903535</id><snippet>Encrypted: 'pafHnI124lxzCr+93COqxfgOTan8x9oPzX4R/PDYkBnrjufk0/7mesG5tmS2AUPxna3z
0jY+7II=\n'
Decrypted: "This world is round, not flat, don't believe them!"
</snippet></ROW><ROW><id>5903627</id><snippet>sys.stdout = sys.__stdout__</snippet></ROW><ROW><id>5903627</id><snippet>outfd</snippet></ROW><ROW><id>5903627</id><snippet>errfd</snippet></ROW><ROW><id>5903627</id><snippet>sys.stdout = os.fdopen(outfd, 'w')
sys.stderr = os.fdopen(errfd, 'w')
</snippet></ROW><ROW><id>5903627</id><snippet>def captureOutput(self, func, *args, **kwargs):
    import cStringIO # You can also use StringIO instead

    sys.stderr.flush()
    sys.stdout.flush()
    olderr, oldout = sys.stderr, sys.stdout
    try:
        sys.stderr = cStringIO.StringIO()
        sys.stdout = cStringIO.StringIO()
        try:
            ret = func(*args, **kwargs)
        finally:
            stderr.seek(0)
            stdout.seek(0)            
            err = stderr.read()
            out = stdout.read()
    finally:
        sys.stderr = olderr
        sys.stdout = oldout

    return ret, out, err
</snippet></ROW><ROW><id>5903793</id><snippet>except</snippet></ROW><ROW><id>5903793</id><snippet>try</snippet></ROW><ROW><id>5903793</id><snippet>IndendationError</snippet></ROW><ROW><id>5904192</id><snippet>expression = re.compile(r'("[^"]")\t("[^"]")\t')
</snippet></ROW><ROW><id>5904192</id><snippet>def get_users(log):
    f = open(log)
    # Read header line
    h = f.readline().strip().replace('\'', '').split('\t')
    ix_profile = h.index('profile.type')
    ix_user = h.index('profile.id')

    assert ix_user &lt; ix_profile
</snippet></ROW><ROW><id>5904192</id><snippet>    keep_field = r'"([^"]*)"'
</snippet></ROW><ROW><id>5904192</id><snippet>    skip_field = r'"[^"]*"'
</snippet></ROW><ROW><id>5904192</id><snippet>    fields = [skip_field] * len(h)
    fields[ix_profile] = keep_field
    fields[ix_user] = keep_field
</snippet></ROW><ROW><id>5904192</id><snippet>    del fields[max(ix_profile, ix_user)+1:]
</snippet></ROW><ROW><id>5904192</id><snippet>    regex = re.compile(r"\t".join(fields))
</snippet></ROW><ROW><id>5904192</id><snippet>    users = defaultdict(int)
    for line in f:
        user, profile = regex.match(line).groups()
</snippet></ROW><ROW><id>5904192</id><snippet>        if profile != "7": # "7" indicates a bad value
            # use list slicing to remove quotes
            users[user] += 1 

    f.close()
    return users
</snippet></ROW><ROW><id>5904272</id><snippet># add this function to the same module
def list_to_dict(l):
    return dict(zip(map(str, range(len(l))), l))
</snippet></ROW><ROW><id>5904272</id><snippet># add this code under the 'if type(d2[k]) == dict' block
                    elif type(d2[k]) == list:
                        dd(list_to_dict(d1[k]), list_to_dict(d2[k]), k)
</snippet></ROW><ROW><id>5904272</id><snippet>&gt;&gt;&gt; d1 = {"name":"Joe", "Pets":[{"name":"spot", "species":"dog"}]}
&gt;&gt;&gt; d2 = {"name":"Joe", "Pets":[{"name":"spot", "species":"cat"}]}
&gt;&gt;&gt; dd(d1, d2, "base")
Changes in base
Changes in Pets
Changes in 0
species changed in d2 to cat
Done with changes in 0
Done with changes in Pets
Done with changes in base
</snippet></ROW><ROW><id>5904375</id><snippet>bitmapdata = AppKit.NSBitmapImageRep.alloc()
bitmapdata.initWithFocusedViewRect_(view.bounds())
view.unlockFocus()
</snippet></ROW><ROW><id>5904375</id><snippet>bitmapdata = view.bitmapImageRepForCachingDisplayInRect_(view.bounds())
view.cacheDisplayInRect_toBitmapImageRep_(view.bounds(), bitmapdata)
</snippet></ROW><ROW><id>5904760</id><snippet>&gt;&gt;&gt; def bench(num):
...:     start = time.time()
...:     for i in range(num):
...:         producer.publish({"name": 'test', 'data': 1231231})
...:     elapsed = time.time() - start    
...:     print "Sent %s messages in %.2f seconds : %.1f msg/sec" % (num, elapsed, num / elapsed)
...:     
...:     

&gt;&gt;&gt; bench(100)
Sent 100 messages in 0.01 seconds : 7790.6 msg/sec

&gt;&gt;&gt; bench(1000)
Sent 1000 messages in 0.13 seconds : 7743.4 msg/sec

&gt;&gt;&gt; bench(10000)
Sent 10000 messages in 1.35 seconds : 7424.3 msg/sec
</snippet></ROW><ROW><id>5904929</id><snippet>hello</snippet></ROW><ROW><id>5904929</id><snippet>list.count</snippet></ROW><ROW><id>5904929</id><snippet>empty_spots = cells.count(' ')
</snippet></ROW><ROW><id>5904997</id><snippet>print 'key_name'</snippet></ROW><ROW><id>5905039</id><snippet>virtualenv</snippet></ROW><ROW><id>5905039</id><snippet>$HOME/.pythonbrew</snippet></ROW><ROW><id>5905039</id><snippet>virtualenv</snippet></ROW><ROW><id>5905039</id><snippet>pythonbrew</snippet></ROW><ROW><id>5905039</id><snippet>virtualenv</snippet></ROW><ROW><id>5905039</id><snippet>pythonbrew</snippet></ROW><ROW><id>5905039</id><snippet>pythonbrew</snippet></ROW><ROW><id>5905076</id><snippet>from serial import Serial
from fcntl import  ioctl
from termios import (
    TIOCMIWAIT,
    TIOCM_RNG,
    TIOCM_DSR,
    TIOCM_CD,
    TIOCM_CTS
)

ser = Serial('/dev/ttyUSB0')

wait_signals = (TIOCM_RNG |
                TIOCM_DSR |
                TIOCM_CD  |
                TIOCM_CTS)

if __name__ == '__main__':
    while True:
        ioctl(ser.fd, TIOCMIWAIT, wait_signals)
        print 'RI=%-5s - DSR=%-5s - CD=%-5s - CTS=%-5s' % (
            ser.getRI(),
            ser.getDSR(),
            ser.getCD(),
            ser.getCTS(),
        )
</snippet></ROW><ROW><id>5905664</id><snippet>{% get_comment_list for event as comment_list %}
{% for comment in comment_list reversed %}
    ...
{% endfor %}
</snippet></ROW><ROW><id>5905809</id><snippet>a = Car</snippet></ROW><ROW><id>5905809</id><snippet>a</snippet></ROW><ROW><id>5905809</id><snippet>Car</snippet></ROW><ROW><id>5905809</id><snippet>b = a()</snippet></ROW><ROW><id>5905809</id><snippet>b = Car()</snippet></ROW><ROW><id>5905809</id><snippet>()</snippet></ROW><ROW><id>5905809</id><snippet>__call__</snippet></ROW><ROW><id>5905809</id><snippet>Car()</snippet></ROW><ROW><id>5905809</id><snippet>class Car:</snippet></ROW><ROW><id>5905809</id><snippet>class Car():</snippet></ROW><ROW><id>5905812</id><snippet>&gt;&gt;&gt; sum([zip(*x) for x in k1], [])
&lt;&lt;&lt; 
[('Bob', '123 Elm Street', 83, 'Newark', 'NJ'),
 ('Alfred', '55 Ninth Ave', 34565, 'Salinas', 'CA'),
 ('Jen', '1 Paved Rd', 30094, 'Los Angeles', 'CA'),
 ('Bob1', '123 Elm Street1', 665, 'Newark1', 'NJ1'),
 ('Alfred1', '55 Ninth Ave1', 345651, 'Salinas1', 'CA1'),
 ('Jen1', '1 Paved Rd1', 300941, 'Los Angeles1', 'CA1')]
</snippet></ROW><ROW><id>5905812</id><snippet>sql = "INSERT INTO addresses (name, street, zipcode, city, state) VALUES (%s, %s, %s, %s, %s)"
data = sum([zip(*x) for x in k1], [])
cursor.executemany(sql, data)
</snippet></ROW><ROW><id>5905853</id><snippet>for file in /path/to/dir_with_files/*.py;
do;
python $file;
done;
</snippet></ROW><ROW><id>5905853</id><snippet>results = open('results.txt', 'w')

results.write('results') #This is going to need to be what the results of
                         #the test are, I.E. the numbers it produces, or such

results.close()
</snippet></ROW><ROW><id>5905914</id><snippet>setsid()</snippet></ROW><ROW><id>5905914</id><snippet>TERM</snippet></ROW><ROW><id>5906206</id><snippet>django.contrib.staticfiles</snippet></ROW><ROW><id>5906206</id><snippet># idiom to get path of project
import os
PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))
# url prefix for user uploaded files, stuff that django has to serve directly
MEDIA_URL = '/media/'
# url prefix for static files like css, js, images
STATIC_URL = '/static/'
# url prefix for *static* /admin media
ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'
# path to django-served media
MEDIA_ROOT = os.path.join(PROJECT_PATH, 'media')
# path used for collectstatic, *where the webserver not django will expect to find files*
STATIC_ROOT = '/home/user/public_html/static'
# path to directories containing static files for django project, apps, etc, css/js
STATICFILES_DIRS = (
    os.path.join(PROJECT_PATH, 'static'),
)
# List of finder classes that know how to find static files in various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
) 
# Required for all the magic
INSTALLED_APPS = (
    'django.contrib.staticfiles',
)
</snippet></ROW><ROW><id>5906206</id><snippet>/static</snippet></ROW><ROW><id>5906206</id><snippet>/media</snippet></ROW><ROW><id>5906206</id><snippet>/var/www/vhosts/domain.com/html</snippet></ROW><ROW><id>5906206</id><snippet>collectstatic</snippet></ROW><ROW><id>5906206</id><snippet>uwsgi --emperor '/srv/*/*.ini'</snippet></ROW><ROW><id>5906206</id><snippet>/srv/venv/ - virtualenv for project
/srv/venv/app.ini - configuration for uwsgi
/srv/venv/app.sock - uwsgi sock for django
/srv/venv/app.wsgi - wsgi file for uwsgi
/srv/venv/proj - django project
/srv/venv/proj/settings.py - project settings file
/srv/venv/proj/static - static files dir, linked into var/www/vhosts/domain.com/html
/srv/venv/proj/static/admin - admin static files, linked as well
/srv/venv/proj/media - media files dir
/var/www/vhosts/domain.com/html - base directory for nginx to serve static resources from
</snippet></ROW><ROW><id>5906206</id><snippet>location / {
    root /var/www/vhosts/domain.com/html;
    index index.html index.html;
    error_page 404 403 = @uwsgi;
    log_not_found  off;
}

location @uwsgi {
    internal;
    include /etc/nginx/uwsgi_params;
    uwsgi_pass unix:/srv/venv/app.sock;
}
</snippet></ROW><ROW><id>5906206</id><snippet>[uwsgi]
home = /srv/%n
pp = /srv/%n
wsgi-file = /srv/%n/%n.wsgi
socket = /srv/%n/%n.sock
single-intepreter = true
master = true
processes = 2
logto = /srv/%n/%n.log
</snippet></ROW><ROW><id>5906236</id><snippet>tests.py</snippet></ROW><ROW><id>5906236</id><snippet>tests</snippet></ROW><ROW><id>5906236</id><snippet>__init__.py</snippet></ROW><ROW><id>5906236</id><snippet>from myapp.tests.views import *</snippet></ROW><ROW><id>5906236</id><snippet>tests</snippet></ROW><ROW><id>5906312</id><snippet>x_allow_partial_auth=true</snippet></ROW><ROW><id>5906312</id><snippet>x_split_tender_id=&lt;value&gt;</snippet></ROW><ROW><id>5906312</id><snippet>/payment/modules/authorizenet/processor.py</snippet></ROW><ROW><id>5906312</id><snippet>/payment/modules/authorizenetpartial/</snippet></ROW><ROW><id>5906312</id><snippet>x_split_tender_id</snippet></ROW><ROW><id>5906312</id><snippet>x_trans_id</snippet></ROW><ROW><id>5906359</id><snippet>syscnf = {
  'netwrk': {
    'iface': {
       'eth0': {
          'address': '192.168.0.100',
          'netmask': '255.255.255.0',
          'mtu': 1500,
        }
        # ...
     }
     'route': {
        'default': '192.168.0.1',
     }
  }
}
</snippet></ROW><ROW><id>5906359</id><snippet>print syscnf['netwrk']['iface']['eth0']['address']
</snippet></ROW><ROW><id>5906359</id><snippet>print syscnf.netwrk.iface.eth0.address
</snippet></ROW><ROW><id>5906359</id><snippet>from types import ClassType
def jsonize_class( klass ):
  def recurse( child ):
    return jsonize_class(child) if isinstance(child, ClassType) else child
  def entry( key ):
    return key, recurse( getattr(klass,key) )
  return dict(( entry(key) for key in dir(klass) if not key.startswith('__') ))
</snippet></ROW><ROW><id>5906359</id><snippet>&gt;&gt;&gt; class bob:
...     x = 9
...     y = "hello"
...     class job:
...             bill = 999
...     class rob:
...             pass
... 
&gt;&gt;&gt; jsonize_class(bob)
{'y': 'hello', 'x': 9, 'job': {'bill': 999}, 'rob': {}}
</snippet></ROW><ROW><id>5906359</id><snippet>from types import DictType
def classize_json( the_json ):
  if isinstance( the_json, DictType ):
    class returned_class: pass
    for key, val in the_json.iteritems():
      setattr( returned_class, key, classize_json(val) )
    return returned_class
  else:
    return the_json
</snippet></ROW><ROW><id>5906359</id><snippet>&gt;&gt;&gt; jBob = jsonize_class(bob)
&gt;&gt;&gt; jBob
{'y': 'hello', 'x': 9, 'job': {'bill': 999}, 'jimmy': 99, 'rob': {}}
&gt;&gt;&gt; cBob = classize_json(jBob)
&gt;&gt;&gt; cBob.y
'hello'
&gt;&gt;&gt; cBob.job.bill
999
&gt;&gt;&gt; cBob.jimmy
99
</snippet></ROW><ROW><id>5907124</id><snippet>require 'yaml'
YAML::ENGINE.yamler= 'syck'
</snippet></ROW><ROW><id>5907351</id><snippet>from django import forms

class GenderForm(forms.Form):
    CHOICES = (
        ('M', 'Male'),
        ('F', 'Female'),
    )
    choice = forms.ChoiceField(choices=CHOICES, widget=forms.RadioSelect())
</snippet></ROW><ROW><id>5907351</id><snippet>from django.db import models
from django.forms import ModelForm
from django import forms

class Answer(models.Model):
    answer = models.CharField(max_length=100)

    def __unicode__(self):
        return self.answer

class Question(models.Model):
    title = models.CharField(max_length=100)
    answers = models.ManyToManyField('Answer')

class QuestionForm(ModelForm):
    class Meta:
        model = Question
        fields = ('title', 'answers')
        widgets = {
            'answers': forms.RadioSelect(),
        }
</snippet></ROW><ROW><id>5907351</id><snippet>question = Question.objects.order_by('?')[0]
form = QuestionForm(instance=question)
</snippet></ROW><ROW><id>5907461</id><snippet>/static</snippet></ROW><ROW><id>5907461</id><snippet>static/</snippet></ROW><ROW><id>5907461</id><snippet>static</snippet></ROW><ROW><id>5907461</id><snippet>appname/static</snippet></ROW><ROW><id>5907461</id><snippet>postinstall</snippet></ROW><ROW><id>5907461</id><snippet>#!/bin/sh
# This creates the symlink required by DotCloud to serve static content from nginx
ln -s ~/current/appname/static ~/current/static
</snippet></ROW><ROW><id>5907461</id><snippet>postinstall</snippet></ROW><ROW><id>5907461</id><snippet>dotcloud ssh</snippet></ROW><ROW><id>5907461</id><snippet>/etc/nginx/sites-enabled/default</snippet></ROW><ROW><id>5907498</id><snippet>configure --prefix=/path/to/python-2.7
make; make install
</snippet></ROW><ROW><id>5907566</id><snippet>file -i django.po
</snippet></ROW><ROW><id>5907566</id><snippet>ISO-8859-1</snippet></ROW><ROW><id>5907566</id><snippet>iconv --from-code=ISO-8859-1 --to-code=UTF-8 django.po &gt; django_utf8.po
</snippet></ROW><ROW><id>5907969</id><snippet>__dict__</snippet></ROW><ROW><id>5907969</id><snippet>x = object()</snippet></ROW><ROW><id>5907969</id><snippet>__slots__</snippet></ROW><ROW><id>5907969</id><snippet>class</snippet></ROW><ROW><id>5907969</id><snippet>__slots__</snippet></ROW><ROW><id>5907969</id><snippet>__dict__</snippet></ROW><ROW><id>5907969</id><snippet>str</snippet></ROW><ROW><id>5907969</id><snippet>__dict__</snippet></ROW><ROW><id>5907969</id><snippet>hasattr(obj, '__dict__')</snippet></ROW><ROW><id>5907969</id><snippet>__dict__</snippet></ROW><ROW><id>5907969</id><snippet>__dict__</snippet></ROW><ROW><id>5907969</id><snippet>__slots__</snippet></ROW><ROW><id>5908244</id><snippet>if any(tokens[1].endswith(domain) for domain in domainlist): 
</snippet></ROW><ROW><id>5908426</id><snippet>import threading
from pycuda import driver

class gpuThread(threading.Thread):
    def __init__(self, gpuid):
        threading.Thread.__init__(self)
        self.ctx  = driver.Device(gpuid).make_context()
        self.device = self.ctx.get_device()

    def run(self):
        print "%s has device %s, api version %s"  \
             % (self.getName(), self.device.name(), self.ctx.get_api_version())
        # Profit!

    def join(self):
        self.ctx.detach()
        threading.Thread.join(self)

driver.init()
ngpus = driver.Device.count()
for i in range(ngpus):
    t = gpuThread(i)
    t.start()
    t.join()
</snippet></ROW><ROW><id>5908430</id><snippet>from itertools import groupby

values = Value.objects.filter(type_id__in=t).values_list('type_id', 'item_id')
values = sorted(values, key=lambda x: x[1])

items = []
for key, group in groupby(values, lambda x: x[1]):
    types = [x[0] for x in group]
    if set(t).issubset(set(types)):
        items.append(key)
</snippet></ROW><ROW><id>5908430</id><snippet>items</snippet></ROW><ROW><id>5908462</id><snippet>a = a + [0]*(maxLen - len(a))
</snippet></ROW><ROW><id>5910025</id><snippet>main()</snippet></ROW><ROW><id>5910025</id><snippet>util.run_wsgi_app(application)</snippet></ROW><ROW><id>5910338</id><snippet>with open('test.hgx') as f:  lines = f.read().splitlines()
with open('test.hgx', 'w') as f:
  for line in lines:
    if line.startswith('height') or line.startswith('RATIO'):  
      f.write(line.rsplit(' ', 1)[0] + ' 8\n')
    else:
      f.write(line + '\n')
</snippet></ROW><ROW><id>5910358</id><snippet>class AnswersForm(forms.Form):
    radioButton = forms.ChoiceField(choices=CHOICES, widget=forms.RadioSelect())

    def __init__(self, radio_choices= None, *args, **kwargs):
        super(AnswersForm, self).__init__(self, *args, **kwargs)
        if radio_choices is not None:
            self.fields['radioButton'].choices = radio_choices
</snippet></ROW><ROW><id>5910358</id><snippet>form_instance = AnswersForm(new_choices)
</snippet></ROW><ROW><id>5910361</id><snippet>a += 1</snippet></ROW><ROW><id>5910361</id><snippet>g</snippet></ROW><ROW><id>5910361</id><snippet>nonlocal</snippet></ROW><ROW><id>5910361</id><snippet>global</snippet></ROW><ROW><id>5910361</id><snippet>def f():
    a=0
    def g():
        nonlocal a
        a+=1
        print a
    return g
g=f()
g()
</snippet></ROW><ROW><id>5910426</id><snippet>__init__.py</snippet></ROW><ROW><id>5910426</id><snippet>import mymodule.cool.stuff
</snippet></ROW><ROW><id>5910530</id><snippet>'utf-8'</snippet></ROW><ROW><id>5910530</id><snippet>MIMEText</snippet></ROW><ROW><id>5910530</id><snippet>'us-ascii'</snippet></ROW><ROW><id>5910530</id><snippet># -*- encoding: utf-8 -*-

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

msg = MIMEMultipart("alternative")
msg["Subject"] = u'テストメール'
part1 = MIMEText(u'\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\uff01\n',
                 "plain", "utf-8")
msg.attach(part1)

print msg.as_string().encode('ascii')
</snippet></ROW><ROW><id>5910544</id><snippet>update</snippet></ROW><ROW><id>5910544</id><snippet>update</snippet></ROW><ROW><id>5910544</id><snippet>update</snippet></ROW><ROW><id>5910544</id><snippet>update_idletasks</snippet></ROW><ROW><id>5910544</id><snippet>update</snippet></ROW><ROW><id>5910544</id><snippet>update_idletasks</snippet></ROW><ROW><id>5910544</id><snippet>update_idletasks</snippet></ROW><ROW><id>5910544</id><snippet>after</snippet></ROW><ROW><id>5910544</id><snippet>after</snippet></ROW><ROW><id>5910893</id><snippet>inspect</snippet></ROW><ROW><id>5910893</id><snippet>#!/usr/bin/python3

import inspect

def deco(func):
    return func

def deco2():
    def wrapper(func):
        pass
    return wrapper

class Test(object):
    @deco
    def method(self):
        pass

    @deco2()
    def method2(self):
        pass

def methodsWithDecorator(cls, decoratorName):
    sourcelines = inspect.getsourcelines(Test)[0]
    for i,line in enumerate(sourcelines):
        line = line.strip()
        if line.split('(')[0].strip() == '@'+decoratorName: # leaving a bit out
            nextLine = sourcelines[i+1]
            name = nextLine.split('def')[1].split('(')[0].strip()
            yield(name)
</snippet></ROW><ROW><id>5910893</id><snippet>&gt;&gt;&gt; print(list(  methodsWithDecorator(Test, 'deco')  ))
['method']
</snippet></ROW><ROW><id>5910893</id><snippet>@deco</snippet></ROW><ROW><id>5910893</id><snippet>@deco(...</snippet></ROW><ROW><id>5910893</id><snippet>@deco2</snippet></ROW><ROW><id>5910893</id><snippet>'deco'</snippet></ROW><ROW><id>5910893</id><snippet>decorator      ::=  "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE
</snippet></ROW><ROW><id>5910893</id><snippet>@(deco)</snippet></ROW><ROW><id>5910893</id><snippet>@getDecorator(...)</snippet></ROW><ROW><id>5910893</id><snippet>def getDecorator():
    return deco
</snippet></ROW><ROW><id>5910893</id><snippet>getDecorator</snippet></ROW><ROW><id>5910893</id><snippet>@foo1.bar2.baz3(...)</snippet></ROW><ROW><id>5910893</id><snippet>&lt;function object ...&gt;</snippet></ROW><ROW><id>5910893</id><snippet>.decorator</snippet></ROW><ROW><id>5910893</id><snippet>.decorator</snippet></ROW><ROW><id>5910893</id><snippet>def makeRegisteringDecorator(foreignDecorator):
    """
        Returns a copy of foreignDecorator, which is identical in every
        way(*), except also appends a .decorator property to the callable it
        spits out.
    """
    def newDecorator(func):
        # Call to newDecorator(method)
        # Exactly like old decorator, but output keeps track of what decorated it
        R = foreignDecorator(func) # apply foreignDecorator, like call to foreignDecorator(method) would have done
        R.decorator = newDecorator # keep track of decorator
        #R.original = func         # might as well keep track of everything!
        return R

    newDecorator.__name__ = foreignDecorator.__name__
    newDecorator.__doc__ = foreignDecorator.__doc__
    # (*)We can be somewhat "hygienic", but newDecorator still isn't signature-preserving, i.e. you will not be able to get a runtime list of parameters. For that, you need hackish libraries...but in this case, the only argument is func, so it's not a big issue

    return newDecorator
</snippet></ROW><ROW><id>5910893</id><snippet>@decorator</snippet></ROW><ROW><id>5910893</id><snippet>deco = makeRegisteringDecorator(deco)

class Test2(object):
    @deco
    def method(self):
        pass

    @deco2()
    def method2(self):
        pass

def methodsWithDecorator(cls, decorator):
    """ 
        Returns all methods in CLS with DECORATOR as the
        outermost decorator.

        DECORATOR must be a "registering decorator"; one
        can make any decorator "registering" via the
        makeRegisteringDecorator function.
    """
    for maybeDecorated in cls.__dict__.values():
        if hasattr(maybeDecorated, 'decorator'):
            if maybeDecorated.decorator == decorator:
                print(maybeDecorated)
                yield maybeDecorated
</snippet></ROW><ROW><id>5910893</id><snippet>&gt;&gt;&gt; print(list(   methodsWithDecorator(Test2, deco)   ))
[&lt;function method at 0x7d62f8&gt;]
</snippet></ROW><ROW><id>5910893</id><snippet>.decorator</snippet></ROW><ROW><id>5910893</id><snippet>@decoOutermost
@deco
@decoInnermost
def func(): ...
</snippet></ROW><ROW><id>5910893</id><snippet>decoOutermost</snippet></ROW><ROW><id>5910893</id><snippet>.decorator</snippet></ROW><ROW><id>5910893</id><snippet>R.original = func</snippet></ROW><ROW><id>5910893</id><snippet>@foo</snippet></ROW><ROW><id>5910893</id><snippet>@bar(...)</snippet></ROW><ROW><id>5910893</id><snippet>foo</snippet></ROW><ROW><id>5910893</id><snippet>bar(...)</snippet></ROW><ROW><id>5910893</id><snippet>makeRegisteringDecoratorFactory</snippet></ROW><ROW><id>5910893</id><snippet>makeRegisteringDecorator</snippet></ROW><ROW><id>5910893</id><snippet>def makeRegisteringDecoratorFactory(foreignDecoratorFactory):
    def newDecoratorFactory(*args, **kw):
        oldGeneratedDecorator = foreignDecoratorFactory(*args, **kw)
        def newGeneratedDecorator(func):
            modifiedFunc = oldGeneratedDecorator(func)
            modifiedFunc.decorator = newDecoratorFactory # keep track of decorator
            return modifiedFunc
        return newGeneratedDecorator
    newDecoratorFactory.__name__ = foreignDecoratorFactory.__name__
    newDecoratorFactory.__doc__ = foreignDecoratorFactory.__doc__
    return newDecoratorFactory
</snippet></ROW><ROW><id>5910893</id><snippet>@decorator(...)</snippet></ROW><ROW><id>5910893</id><snippet>def deco2():
    def simpleDeco(func):
        return func
    return simpleDeco

deco2 = makeRegisteringDecoratorFactory(deco2)

print(deco2.__name__)
# RESULT: 'deco2'

@deco2()
def f():
    pass
</snippet></ROW><ROW><id>5910893</id><snippet>&gt;&gt;&gt; print(f.decorator)
&lt;function deco2 at 0x6a6408&gt;
</snippet></ROW><ROW><id>5910893</id><snippet>def getDecorator(): # let's do some dispatching!
    return deco

class Test3(object):
    @getDecorator()
    def method(self):
        pass

    @deco2()
    def method2(self):
        pass
</snippet></ROW><ROW><id>5910893</id><snippet>&gt;&gt;&gt; print(list(   methodsWithDecorator(Test3, deco)   ))
[&lt;function method at 0x7d62f8&gt;]
</snippet></ROW><ROW><id>5910893</id><snippet>methodsWithDecorator</snippet></ROW><ROW><id>5910893</id><snippet>.original</snippet></ROW><ROW><id>5911078</id><snippet>rand</snippet></ROW><ROW><id>5911078</id><snippet>mt_rand</snippet></ROW><ROW><id>5911078</id><snippet>mt_rand</snippet></ROW><ROW><id>5911078</id><snippet>mt_srand</snippet></ROW><ROW><id>5911396</id><snippet>Item</snippet></ROW><ROW><id>5911396</id><snippet>Value</snippet></ROW><ROW><id>5911396</id><snippet> items.sort(key=lambda object: object.value_set.all()[0].val)
</snippet></ROW><ROW><id>5911396</id><snippet> items.sort(key=lambda object: object.value_set.filter(type__id=5)[0].val)
</snippet></ROW><ROW><id>5911520</id><snippet>In [1]: a = ['a', 'b', 'c', 'd']

In [2]: print ','.join("'%s'" % x for x in a)
'a','b','c','d'
</snippet></ROW><ROW><id>5911947</id><snippet>N = numpy.sqrt(U**2+V**2)  # there may be a faster numpy "normalize" function
U2, V2 = U/N, V/N
</snippet></ROW><ROW><id>5911947</id><snippet>U2 *= F
V2 *= F
</snippet></ROW><ROW><id>5912158</id><snippet>top = csr.execute("Select * from bigtop")
d=list(top)
a = np.asarray([[x[0] for x in top.description]] + d, dtype='object')
</snippet></ROW><ROW><id>5912158</id><snippet>array([[heading1, heading2, heading3, ...],
       [val1, val2, val3, ...],
           ...
           , dtype=object)
</snippet></ROW><ROW><id>5912167</id><snippet>def post(self, request, *args, **kwargs):
    pk = self.kwargs.get('pk', None)

    if pk is not None:
        user = User.objects.get(pk=pk)
    else:
        raise AttributeError(u"Could not locate user with pk %s"
                             % pk)

    if user.contributor_profile.all():
        contributor = Contributor.objects.get(user=user)
        form = ContributorForm(request.POST, instance=contributor)
    else:
        member = Member.objects.get(user=user)
        form = MemberForm(request.POST, instance=member)

    if form.is_valid():
        self.object = form.save()
        return HttpResponseRedirect(self.get_success_url())
    else:
        return self.render_to_response(self.get_context_data(form=form))
</snippet></ROW><ROW><id>5912246</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>5912246</id><snippet>import apsw

conn = apsw.Connection(':memory:')
curs = conn.cursor()
curs.execute("CREATE TABLE foo (id INTEGER, name VARCHAR(255))")
curs.executemany("INSERT INTO foo VALUES (?, ?)", [(1, 'bar'),(2, 'baz')])
print curs.execute("SELECT * FROM foo").fetchall()

[(1, u'bar'), (2, u'baz')]
</snippet></ROW><ROW><id>5912246</id><snippet>.next()</snippet></ROW><ROW><id>5912246</id><snippet>curs.execute("SELECT * FROM foo")
print list(curs)

[(1, u'bar'), (2, u'baz')]
</snippet></ROW><ROW><id>5912429</id><snippet>&gt;&gt;&gt; oct(488)
'0750'
</snippet></ROW><ROW><id>5912429</id><snippet>stat</snippet></ROW><ROW><id>5912429</id><snippet>&gt;&gt;&gt; tarinfo.mode
488
&gt;&gt;&gt; tarinfo.mode &amp; stat.S_IXGRP != 0
True
&gt;&gt;&gt; tarinfo.mode &amp; stat.S_IXOTH != 0
False
</snippet></ROW><ROW><id>5912536</id><snippet>from django.utils.translation import gettext_lazy as _</snippet></ROW><ROW><id>5913044</id><snippet>from twisted.web import server, resource
from twisted.internet import defer, threads
from itertools import count

class echo(resource.Resource):
  isLeaf = True
  def errback(self, failure, request):
    failure.printTraceback() # This will print the trace back in a way that looks like a python exception.
    # log.err(failure) # This will use the twisted logger. This is the best method, but
    # you need to import twisted log.

    request.processingFailed(failure) # This will send a trace to the browser and close the request.
    return None #  We have dealt with the failure. Clean it out now.

  def final(self, message, request, encoding): 
    # Message will contain the message returned by callback1
    request.write(message.encode(encoding)) # This will write the message and return it to the browser.

    request.finish() # Done

  def callback1(self, value):
    #raise ValueError  # E1
    lines = ['&lt;html&gt;&lt;body&gt;\n',
             '&lt;p&gt;Page view #%s in this session&lt;/p&gt;\n' % (value,),
             '&lt;/body&gt;&lt;/html&gt;\n']
    return ''.join(lines)

    #raise ValueError  # E4

  def render_GET(self, request):
    content_type, encoding = 'text/html', 'UTF-8'
    request.setHeader('Content-Type', '%s; charset=%s' %
        tuple(map(str, (content_type, encoding))))
    s = request.getSession()
    if not hasattr(s, 'counter'):
      s.counter = count(1)
    d = threads.deferToThread(self.callback1, s.counter.next())
    d.addCallback(self.final, request, encoding)
    d.addErrback(self.errback, request) # We put this here in case the encoding raised an exception.
    #raise ValueError  # E5
    return server.NOT_DONE_YET
</snippet></ROW><ROW><id>5913044</id><snippet>self.errback</snippet></ROW><ROW><id>5913044</id><snippet>self.errback</snippet></ROW><ROW><id>5913148</id><snippet>namedtuple()</snippet></ROW><ROW><id>5913148</id><snippet>tuple</snippet></ROW><ROW><id>5913148</id><snippet>UserDict.DictMixin</snippet></ROW><ROW><id>5913148</id><snippet>tuple.__getitem__</snippet></ROW><ROW><id>5913148</id><snippet>&gt;&gt;&gt; f = foobar('a', 1)
&gt;&gt;&gt; f[0]
'a'
</snippet></ROW><ROW><id>5913148</id><snippet>{'a': 1, '#_type': 'foobar'}</snippet></ROW><ROW><id>5913148</id><snippet>json.JSONEncoder</snippet></ROW><ROW><id>5913148</id><snippet>from collections import namedtuple
from json import JSONEncoder

class MyEncoder(JSONEncoder):

    def _iterencode(self, obj, markers=None):
        if isinstance(obj, tuple) and hasattr(obj, '_asdict'):
            gen = self._iterencode_dict(obj._asdict(), markers)
        else:
            gen = JSONEncoder._iterencode(self, obj, markers)
        for chunk in gen:
            yield chunk

class foobar(namedtuple('f', 'foo, bar')):
    pass

enc = MyEncoder()
for obj in (foobar('a', 1), ('a', 1), {'outer': foobar('x', 'y')}):
    print enc.encode(obj)

{"foo": "a", "bar": 1}
["a", 1]
{"outer": {"foo": "x", "bar": "y"}}
</snippet></ROW><ROW><id>5913299</id><snippet>&gt;&gt;&gt; import pytz, datetime
&gt;&gt;&gt; pytz.country_timezones['de']
['Europe/Berlin']
&gt;&gt;&gt; matching_tzs = [t for t in pytz.country_timezones['de'] if pytz.timezone(t)._utcoffset.total_seconds() == 3600]
&gt;&gt;&gt; datetime.datetime.now(tz=pytz.timezone(matching_tzs[0]))
datetime.datetime(2011, 5, 6, 17, 5, 26, 174828, tzinfo=&lt;DstTzInfo 'Europe/Berlin' CEST+2:00:00 DST&gt;)
</snippet></ROW><ROW><id>5913356</id><snippet>type
  TImgArray = array[0..MAXINT] of Integer;
  PImgArray = ^TImgArray;

function ProcessSomething(a: PImgArray; size: integer): Integer; cdecl;
</snippet></ROW><ROW><id>5913928</id><snippet>wget</snippet></ROW><ROW><id>5913928</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>5913928</id><snippet>sys.stdout</snippet></ROW><ROW><id>5913928</id><snippet>process = subprocess.Popen(shlex.split(command), stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
complete = False

while True:
  output = process.stdout.read(1)

  if output == '' and process.poll() != None:
    break

  if output != '':
    sys.stdout.write(output)
    sys.stdout.flush()
</snippet></ROW><ROW><id>5914064</id><snippet>self.test_panel.SetSizer(self.a_sizer)</snippet></ROW><ROW><id>5914064</id><snippet>self.test_panel.SetupScrolling()</snippet></ROW><ROW><id>5914064</id><snippet>self.test_panel.SetAutoLayout(1)</snippet></ROW><ROW><id>5914064</id><snippet>__do_layout</snippet></ROW><ROW><id>5914064</id><snippet>import wx
from wx.lib.scrolledpanel import ScrolledPanel

class MyFrame( wx.Frame ):
    def __init__( self, parent, ID, title ):
        wx.Frame.__init__( self, parent, ID, title,
                         wx.DefaultPosition, wx.Size( 600, 400 ) )
        #Controls
        self.tin = wx.TextCtrl( self, 
                                size = wx.Size( 600, 400 ),
                                style=wx.TE_MULTILINE )        
        self.test_panel = ScrolledPanel( self, 
                                         size = wx.Size( 600, 400 ) )
        self.test_panel.SetupScrolling()
        self.tin2 = wx.StaticText( self.test_panel )

        #Layout
        #-- Scrolled Window
        self.panel_sizer = wx.BoxSizer( wx.HORIZONTAL )
        self.panel_sizer.Add( self.tin2, 0, wx.EXPAND )
        self.test_panel.SetSizer( self.panel_sizer )
        self.panel_sizer.Fit(self.test_panel)
        #-- Main Frame
        self.inner_sizer = wx.BoxSizer( wx.HORIZONTAL )        
        self.inner_sizer.Add( self.tin, 1, wx.LEFT | wx.RIGHT | wx.EXPAND, 50  )
        self.inner_sizer.Add( self.test_panel, 1, wx.LEFT | wx.RIGHT | wx.EXPAND, 50  )

        self.sizer = wx.BoxSizer( wx.VERTICAL )
        self.sizer.Add(self.inner_sizer, 1, wx.ALL | wx.EXPAND, 20)        
        self.SetSizer(self.sizer)
        self.sizer.Fit(self)
        self.sizer.Layout()

        self.test_panel.SetAutoLayout(1)

        #Bind Events
        self.tin.Bind( wx.EVT_TEXT, self.TextChange )

    def TextChange( self, event ):
        self.tin2.SetLabel(self.tin.GetValue())
        self.test_panel.FitInside()


class MyApp( wx.App ):
    def OnInit( self ):
        self.fr = MyFrame( None, -1, "TitleX" )
        self.fr.Show( True )
        self.SetTopWindow( self.fr )
        return True

app = MyApp( 0 )
app.MainLoop()

def main():

    win = 1

if ( __name__ == "__main__" ):
    main()    
</snippet></ROW><ROW><id>5914348</id><snippet>./manage.py inspectdb</snippet></ROW><ROW><id>5914348</id><snippet># wordpress
server {
    listen 80;
    server_name blog.domain.com;

    root /path/to/wordpress;
    index index.html index.php;

    location ~ .php$ {
        expires    off;
        include fastcgi_params;
        fastcgi_pass    127.0.0.1:9000;
        fastcgi_index   index.php;
        fastcgi_param   SCRIPT_FILENAME  /path/to/wordpress/$fastcgi_script_name;
    }
}

# django
server {
    listen 80;
    server_name domain.com;

    location / {
        uwsgi_pass  127.0.0.1:3031;
        include uwsgi_params;
    }
}
</snippet></ROW><ROW><id>5914385</id><snippet>def round_robin(units, sets = None):
    """ Generates a schedule of "fair" pairings from a list of units """
    count = len(units)
    sets = sets or (count - 1)
    half = count / 2
    for turn in range(sets):
        left = units[:half]
        right = units[count - half - 1 + 1:][::-1]
        pairings = zip(left, right)
        if turn % 2 == 1:
            pairings = [(y, x) for (x, y) in pairings]
        units.insert(1, units.pop())
        yield pairings

teams = ['a', 'b', 'c', 'd']
print list(round_robin(teams, sets = len(teams) * 2 - 2))
</snippet></ROW><ROW><id>5914432</id><snippet>gtk.gdk.threads_init()
</snippet></ROW><ROW><id>5914432</id><snippet>def _takeScreenshot(self):
    while self.notDone:
         # take screen shot
         # ..
         time.sleep(self.interval)
</snippet></ROW><ROW><id>5914432</id><snippet>def stopScreenshots(self):
    self.notDone = False
    self.timer.join() # wait for thread to finish 
</snippet></ROW><ROW><id>5914529</id><snippet>&gt;&gt;&gt; column_names = ['col1', 'col2', 'col3']
&gt;&gt;&gt; columns = (Column(name, Integer) for name in column_names)  
&gt;&gt;&gt; table = Table('table_name', metadata, *columns) # unpacks Column instances
</snippet></ROW><ROW><id>5914529</id><snippet>&gt;&gt;&gt; column_names = ['col1', 'col2', 'col3']
&gt;&gt;&gt; columns = (Column(name, Integer) for name in column_names)
&gt;&gt;&gt; table = Table('data', metadata, Column('id', Integer, primary_key=True), *columns)
&gt;&gt;&gt; class Data(object):
...:     def __init__(self, *args):
...:         for name, arg in zip(column_names, args):
...:             setattr(self, name, arg)
...:             
...:
&gt;&gt;&gt; mapper(Data, table)
&lt;&lt;&lt; &lt;Mapper at 0x1026e9910; Data&gt;
&gt;&gt;&gt; data = Data(1, 2, 3)
&gt;&gt;&gt; [x for x in dir(data) if x.startswith('col')] # see if all of our columns are there
&lt;&lt;&lt; ['col1', 'col2', 'col3'] 
&gt;&gt;&gt; data.col3 # great!
&lt;&lt;&lt; 3           
</snippet></ROW><ROW><id>5914612</id><snippet>mysql-python</snippet></ROW><ROW><id>5914612</id><snippet>pypm uninstall wxpython</snippet></ROW><ROW><id>5914612</id><snippet>wxPython2.9-osx-cocoa-py2.7</snippet></ROW><ROW><id>5914769</id><snippet>for char in chars:
    return char + recurse(chars, depth - 1)
</snippet></ROW><ROW><id>5914769</id><snippet>def resu(chars, depth = None, prefix=''):
    if depth is None:
            depth = len(chars)
    if depth == 0:
            print prefix
            return
    for ch in chars:
            resu(chars, depth - 1, ch + prefix)
</snippet></ROW><ROW><id>5914769</id><snippet>chars</snippet></ROW><ROW><id>5914769</id><snippet>n!</snippet></ROW><ROW><id>5914957</id><snippet>import os

DEV = os.environ['SERVER_SOFTWARE'].startswith('Development')
</snippet></ROW><ROW><id>5915059</id><snippet>paramiko.SFTPClient.put</snippet></ROW><ROW><id>5915059</id><snippet>paramiko.SFTPClient.open</snippet></ROW><ROW><id>5915059</id><snippet>file</snippet></ROW><ROW><id>5915059</id><snippet>f = self.sftp.open(path, 'wb')
f.write(fileobj.read())
f.close()
</snippet></ROW><ROW><id>5915422</id><snippet>#!/usr/bin/python
import ctypes
import os

class XScreenSaverInfo( ctypes.Structure):
  """ typedef struct { ... } XScreenSaverInfo; """
  _fields_ = [('window',      ctypes.c_ulong), # screen saver window
              ('state',       ctypes.c_int),   # off,on,disabled
              ('kind',        ctypes.c_int),   # blanked,internal,external
              ('since',       ctypes.c_ulong), # milliseconds
              ('idle',        ctypes.c_ulong), # milliseconds
              ('event_mask',  ctypes.c_ulong)] # events

xlib = ctypes.cdll.LoadLibrary('libX11.so')
display = xlib.XOpenDisplay(os.environ['DISPLAY'])
xss = ctypes.cdll.LoadLibrary('libXss.so.1')
xss.XScreenSaverAllocInfo.restype = ctypes.POINTER(XScreenSaverInfo)
xssinfo = xss.XScreenSaverAllocInfo()
xss.XScreenSaverQueryInfo(display, xlib.XDefaultRootWindow(display), xssinfo)

print "idle: %d ms" % xssinfo.contents.idle
</snippet></ROW><ROW><id>5915455</id><snippet>source</snippet></ROW><ROW><id>5915542</id><snippet>install_requires</snippet></ROW><ROW><id>5915542</id><snippet>setuptools.setup()</snippet></ROW><ROW><id>5915666</id><snippet>&gt;&gt;&gt; connection.request("POST", '/services/search/FindingService/v1', xmlparameters)
&gt;&gt;&gt; resp = connection.getresponse()
&gt;&gt;&gt; resp.status
&lt;&lt;&lt; 500
&gt;&gt;&gt; resp.read()
&lt;&lt;&lt; '&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;&lt;ms:errorMessage xmlns:ms="http://www.ebay.com/marketplace/services" xmlns="http://www.ebay.com/marketplace/search/v1/services"&gt;&lt;error&gt;&lt;errorId&gt;2038&lt;/errorId&gt;&lt;domain&gt;CoreRuntime&lt;/domain&gt;&lt;severity&gt;Error&lt;/severity&gt;&lt;category&gt;System&lt;/category&gt;&lt;message&gt;Missing SOA operation name header&lt;/message&gt;&lt;subdomain&gt;System&lt;/subdomain&gt;&lt;/error&gt;&lt;/ms:errorMessage&gt;'
</snippet></ROW><ROW><id>5915758</id><snippet>dtype</snippet></ROW><ROW><id>5915758</id><snippet>orig_type = sa.dtype
descr = orig_type.descr
descr[1] = (descr[1][0], "|S10")
new_type = numpy.dtype(descr)
</snippet></ROW><ROW><id>5915971</id><snippet>&gt;&gt;&gt; a = r'^static/([^/]+)\.html'; b = '^static/([^/]+)\.html'
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>5916250</id><snippet>base.html
    {% block content %}
        &lt;p&gt;BASE&lt;/p&gt;
    {% endblock %}

parent.html
    {% extends "base.html" %}

    {% block content %}
        {{ block.super }}
        &lt;p&gt;PARENT&lt;/p&gt;
    {% endblock %}

foo.html
    {% extends ext_templ %}

    {% block content %}
        {{ block.super }}
        &lt;p&gt;FOO&lt;/p&gt;
    {% endblock %}
</snippet></ROW><ROW><id>5916250</id><snippet>return render_to_response('foo.html', {'ext_templ':'base.html'})
</snippet></ROW><ROW><id>5916250</id><snippet>&lt;p&gt;BASE&lt;/p&gt;
&lt;p&gt;FOO&lt;/p&gt;
</snippet></ROW><ROW><id>5916250</id><snippet>return render_to_response('foo.html', {'ext_templ':'parent.html'})
</snippet></ROW><ROW><id>5916250</id><snippet>&lt;p&gt;BASE&lt;/p&gt;
&lt;p&gt;PARENT&lt;/p&gt;
&lt;p&gt;FOO&lt;/p&gt;
</snippet></ROW><ROW><id>5916250</id><snippet>base.html
    {% block content %}
        {% block top %}
            &lt;p&gt;BASE START&lt;/p&gt;
        {% endblock %}

        {% block bot %}
            &lt;p&gt;BASE END&lt;/p&gt;
        {% endblock %}
    {% endblock %}


parent.html
    {% extends "base.html" %}

    {% block top %}
        {{ block.super }}
        &lt;p&gt;PARENT&lt;/p&gt;
    {% endblock %}

    {% block bot %}
        &lt;p&gt;PARENT&lt;/p&gt;
        {{ block.super }}
    {% endblock %}

foo.html
    {% extends ext_templ %}

    {% block top %}
        {{ block.super }}
        &lt;p&gt;FOO&lt;/p&gt;
    {% endblock %}

    {% block bot %}
        &lt;p&gt;FOO END&lt;/p&gt;
        {{ block.super }}
    {% endblock %}
</snippet></ROW><ROW><id>5916250</id><snippet>{% if ext_templ == 'parent.html' %}</snippet></ROW><ROW><id>5916453</id><snippet>def map_reduce(data, mapper, reducer):
    d = {}
    for elem in data:
        key, value = mapper(elem)
        d.setdefault(key, []).append(value)
    for key, grp in d.items():
        d[key] = reducer(key, grp)
    return d
</snippet></ROW><ROW><id>5916453</id><snippet>os.path.splitext(fname)[0]</snippet></ROW><ROW><id>5916453</id><snippet>tarfile</snippet></ROW><ROW><id>5916453</id><snippet>import os
import tarfile

def make_tar(basename, files):
    tar = tarfile.open(basename + '.tar', 'w')
    for f in files:
        tar.add(f)
    tar.close()

map_reduce(os.listdir('.'),
           lambda x: (os.path.splitext(x)[0], x),
           make_tar)
</snippet></ROW><ROW><id>5916453</id><snippet>map_reduce</snippet></ROW><ROW><id>5916453</id><snippet>os.path.splitext(x)[0]</snippet></ROW><ROW><id>5916453</id><snippet>strip_all_ext(x)</snippet></ROW><ROW><id>5916453</id><snippet>def strip_all_ext(path):
    head, tail = os.path.split(path)
    basename = tail.split(os.extsep)[0]
    return os.path.join(head, basename)
</snippet></ROW><ROW><id>5916461</id><snippet>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;feed xmlns="http://www.w3.org/2005/Atom"&gt;
    &lt;title&gt;{{! d['title'] }}&lt;/title&gt;
    &lt;subtitle&gt;{{! d['subtitle'] }}&lt;/subtitle&gt;
    &lt;link rel="alternate" type="text/html" href="{{! d['site_url'] }}" /&gt;
    &lt;link rel="self" type="application/atom+xml" href="{{! d['feed_url'] }}" /&gt;
    &lt;id&gt;{{! d['feed_url'] }}&lt;/id&gt;
    &lt;updated&gt;{{! d['date_updated'] }}&lt;/updated&gt;
    &lt;rights&gt;{{! d['copyright'] }}&lt;/rights&gt;

    %for entry in entries:
    &lt;entry&gt;
        &lt;title&gt;{{! entry['title'] }}&lt;/title&gt;
        &lt;link rel="alternate" type="text/html" href="{{! entry['url'] }}" /&gt;
        &lt;id&gt;{{! entry['atom_id'] }}&lt;/id&gt;
        &lt;published&gt;{{! entry['date_published'] }}&lt;/published&gt;
        &lt;updated&gt;{{! entry['date_updated'] }}&lt;/updated&gt;
        &lt;author&gt;
            &lt;name&gt;{{! d['author'] }}&lt;/name&gt;
            &lt;uri&gt;{{! d['site_url'] }}&lt;/uri&gt;
        &lt;/author&gt;
        &lt;content type="html" xml:base="{{! d['site_url'] }}" xml:lang="en"&gt;
            &lt;![CDATA[{{! entry['body'] }}]]&gt;
        &lt;/content&gt;
    &lt;/entry&gt;
    %end

&lt;/feed&gt;
</snippet></ROW><ROW><id>5916700</id><snippet>// package.json file...
{
  "name": "proxy-example",
  "description": "a simple example of modifying response using a proxy",
  "version": "0.0.1",
  "dependencies": {
    "request": "1.9.5"
  }
}

// server.js file...
var http = require("http")
var request = require("request")
var port = process.env.PORT || 8001

http.createServer(function(req, rsp){
  var options = { uri: "http://google.com" }

  request(options, function(err, response, body){
    rsp.writeHead(200)
    rsp.end(body.replace(/google/g, "foobar"))
  })

}).listen(port)

console.log("listening on port " + port)
</snippet></ROW><ROW><id>5917238</id><snippet> "%x" % 4220963601
</snippet></ROW><ROW><id>5917238</id><snippet>0x</snippet></ROW><ROW><id>5917238</id><snippet>L</snippet></ROW><ROW><id>5917306</id><snippet>bytes</snippet></ROW><ROW><id>5917306</id><snippet>ascii</snippet></ROW><ROW><id>5917306</id><snippet>bytes</snippet></ROW><ROW><id>5917306</id><snippet>str</snippet></ROW><ROW><id>5917306</id><snippet>cp1252</snippet></ROW><ROW><id>5917306</id><snippet>&gt;&gt;&gt; import locale; print(locale.getpreferredencoding())
cp1252
</snippet></ROW><ROW><id>5917306</id><snippet>'\xa0'</snippet></ROW><ROW><id>5917306</id><snippet>UTF-8</snippet></ROW><ROW><id>5917306</id><snippet>encoding='utf8'</snippet></ROW><ROW><id>5917306</id><snippet>import sys
for filename in sys.argv[1:]:
    for lino, line in enumerate(open(filename), 1):
        if '\xa0' in line:
            print(ascii(filename), lino, ascii(line))
</snippet></ROW><ROW><id>5917306</id><snippet>'\xa0'</snippet></ROW><ROW><id>5917306</id><snippet>NO-BREAK SPACE</snippet></ROW><ROW><id>5917306</id><snippet> </snippet></ROW><ROW><id>5917319</id><snippet>v = [0, 0, 0]</snippet></ROW><ROW><id>5917319</id><snippet>v</snippet></ROW><ROW><id>5917319</id><snippet>v</snippet></ROW><ROW><id>5917319</id><snippet>v</snippet></ROW><ROW><id>5917319</id><snippet>v =</snippet></ROW><ROW><id>5917319</id><snippet>v[:] =</snippet></ROW><ROW><id>5917395</id><snippet>def line_prepender(filename,line):
    with open(filename,'r+') as f:
        content = f.read()
        f.seek(0,0)
        f.write(line.rstrip('\r\n') + '\n' + content)
</snippet></ROW><ROW><id>5917395</id><snippet>def line_pre_adder(filename,line_to_prepend):
    f = fileinput.input(filename,inplace=1)
    for xline in f:
        if f.isfirstline():
            print line_to_prepend.rstrip('\r\n') + '\n' + xline,
        else:
            print xline,
</snippet></ROW><ROW><id>5917527</id><snippet>QAbstractTableModel</snippet></ROW><ROW><id>5917527</id><snippet>LogRecordModel</snippet></ROW><ROW><id>5917527</id><snippet>QAbstractTableModel</snippet></ROW><ROW><id>5917527</id><snippet>PropertySheetModel</snippet></ROW><ROW><id>5917541</id><snippet>django/contrib/admin/templates/admin/delete_confirmation.html</snippet></ROW><ROW><id>5917541</id><snippet>&lt;ul&gt;{{ deleted_objects|unordered_list }}&lt;/ul&gt;
</snippet></ROW><ROW><id>5917541</id><snippet>&lt;p&gt;{{ deleted_objects|count }} objects&lt;/p&gt;
</snippet></ROW><ROW><id>5917541</id><snippet>{% if 100 &lt; deleted_objects|count %}
    &lt;p&gt;{{ deleted_objects|count }} objects&lt;/p&gt;
{% else %}
    &lt;ul&gt;{{ deleted_objects|unordered_list }}&lt;/ul&gt;
{% endif %}
</snippet></ROW><ROW><id>5917541</id><snippet>django/contrib/admin/templates/admin/actions.py</snippet></ROW><ROW><id>5917541</id><snippet>qs.delete()</snippet></ROW><ROW><id>5917541</id><snippet>for obj in qs:    obj.delete()</snippet></ROW><ROW><id>5917541</id><snippet>@transaction.commit_on_success</snippet></ROW><ROW><id>5917544</id><snippet> def naive_scan(self, num):
    nhist = num/2/self.cta_size*16
    global_size = (nhist,)
    local_size = (nhist,)
    extra_space = nhist / 16 #NUM_BANKS defined as 16 in RadixSort.cpp
    shared_mem_size = self.uintsz * (nhist + extra_space)
    scan_args = (   self.mCountersSum,
                    self.mCounters,
                    np.uint32(nhist),
                    cl.LocalMemory(2*shared_mem_size)
                )
    self.radix_prg.scanNaive(self.queue, global_size, local_size, *(scan_args)).wait()
</snippet></ROW><ROW><id>5917595</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>5917635</id><snippet>basicConfig()</snippet></ROW><ROW><id>5917635</id><snippet>basicConfig()</snippet></ROW><ROW><id>5917635</id><snippet>basicConfig()</snippet></ROW><ROW><id>5917635</id><snippet>addHandler()</snippet></ROW><ROW><id>5917635</id><snippet>basicConfig()</snippet></ROW><ROW><id>5917635</id><snippet>f = logging.Formatter('%(levelname)-8s %(message)s')
h = logging.StreamHandler()
h.setFormatter(f)
logging.getLogger().addHandler(h)
</snippet></ROW><ROW><id>5917790</id><snippet>mail envelope</snippet></ROW><ROW><id>5917790</id><snippet>sender header</snippet></ROW><ROW><id>5917790</id><snippet>from header</snippet></ROW><ROW><id>5918210</id><snippet>__str__()</snippet></ROW><ROW><id>5918210</id><snippet>str(e)</snippet></ROW><ROW><id>5918210</id><snippet>str()</snippet></ROW><ROW><id>5918210</id><snippet>repr()</snippet></ROW><ROW><id>5918210</id><snippet>def reraise(exception):
    """
    Re-raise an exception and override its output
    """

    exType = type(exception)
    newExType = type(exType.__name__ + "_Override", (exType,), { '__str__': str_override})
    exception.__class__ = newExType

    # Re-raise and remove ourselves from the stack trace.
    raise exception, None, sys.exc_info()[-1]
</snippet></ROW><ROW><id>5918387</id><snippet>if request.method == 'POST':
    form = Forms.AnswersForm(request.POST)
    if form.is_valid():
        do_something_with(form.cleaned_data['answers'])
</snippet></ROW><ROW><id>5918387</id><snippet>cleaned_data</snippet></ROW><ROW><id>5918387</id><snippet>is_valid()</snippet></ROW><ROW><id>5918429</id><snippet>bytearray</snippet></ROW><ROW><id>5918429</id><snippet>bytearray</snippet></ROW><ROW><id>5918429</id><snippet>b = bytearray.fromhex('deadbeef')
</snippet></ROW><ROW><id>5918429</id><snippet>b[2] += 7
</snippet></ROW><ROW><id>5918429</id><snippet>bytearray</snippet></ROW><ROW><id>5918429</id><snippet>b.reverse()</snippet></ROW><ROW><id>5918429</id><snippet>reversed</snippet></ROW><ROW><id>5918429</id><snippet>reversed(b)</snippet></ROW><ROW><id>5918429</id><snippet>bytes</snippet></ROW><ROW><id>5918429</id><snippet>bytearray</snippet></ROW><ROW><id>5918550</id><snippet>python</snippet></ROW><ROW><id>5918550</id><snippet>python2.7</snippet></ROW><ROW><id>5918550</id><snippet>python3.2</snippet></ROW><ROW><id>5918550</id><snippet>#!</snippet></ROW><ROW><id>5918706</id><snippet>return GreatestCommonDivisor(self, denominator, numerator%denominator)
</snippet></ROW><ROW><id>5918706</id><snippet>return self.GreatestCommonDivisor(denominator, numerator%denominator)
</snippet></ROW><ROW><id>5918861</id><snippet>mod_python</snippet></ROW><ROW><id>5918861</id><snippet>DocumentRoot</snippet></ROW><ROW><id>5919137</id><snippet>FooModel.objects.all().select_related('bar').defer('bar__blah', ...)
</snippet></ROW><ROW><id>5919497</id><snippet>define_cards</snippet></ROW><ROW><id>5919497</id><snippet>create_deck</snippet></ROW><ROW><id>5919497</id><snippet>for</snippet></ROW><ROW><id>5919497</id><snippet>deck = define_cards()
shuffle_deck(deck)
print "The first 10 cards are:"
for i in range(10):
    card = deal_card(deck)
    print card
</snippet></ROW><ROW><id>5919497</id><snippet>define_cards</snippet></ROW><ROW><id>5919497</id><snippet>return</snippet></ROW><ROW><id>5919541</id><snippet>import numpy
result = numpy.dot( numpy.array(A)[:,0], B)
</snippet></ROW><ROW><id>5919541</id><snippet>sum( [a[i][0]*b[i] for i in range(len(b))] )
</snippet></ROW><ROW><id>5919729</id><snippet>packages=['vector', 'exlib'],
</snippet></ROW><ROW><id>5919737</id><snippet>driver.module_from_file</snippet></ROW><ROW><id>5919737</id><snippet># Context establishment
try:
    if (autoinit):
        import pycuda.autoinit
        self.context = None
        self.device = pycuda.autoinit.device
        self.computecc = self.device.compute_capability()
    else:
        driver.init()
        self.context = tools.make_default_context()
        self.device = self.context.get_device()
        self.computecc = self.device.compute_capability()

    # GPU code initialization
    # load pre compiled CUDA code from cubin file
    # Select the cubin based on the supplied dtype
    # cubin names contain C++ mangling because of
    # templating. Ugly but no easy way around it
    if self.computecc == (1,3):
        self.fimcubin = "fim_sm13.cubin"
    elif self.computecc[0] == 2:
        self.fimcubin = "fim_sm20.cubin"
    else:
        raise NotImplementedError("GPU architecture not supported")

    fimmod = driver.module_from_file(self.fimcubin)

    IterateName32 = "_Z10fimIterateIfLj8EEvPKT_PKiPS0_PiS0_S0_S0_jjji"
    IterateName64 = "_Z10fimIterateIdLj8EEvPKT_PKiPS0_PiS0_S0_S0_jjji"

    if (self.dtype == np.float32):
        IterateName = IterateName32
    elif (self.dtype == np.float64):
        IterateName = IterateName64
    else:
        raise TypeError

    self.fimIterate = fimmod.get_function(IterateName)

except ImportError:
    warn("Could not initialise CUDA context")
</snippet></ROW><ROW><id>5919843</id><snippet>word = input("Give me a 5 letter word: ")
</snippet></ROW><ROW><id>5919843</id><snippet>if len(word) != 5:
    print "that's not 5 letters..."
</snippet></ROW><ROW><id>5919898</id><snippet>read</snippet></ROW><ROW><id>5919898</id><snippet>set</snippet></ROW><ROW><id>5919898</id><snippet>set</snippet></ROW><ROW><id>5919898</id><snippet>set</snippet></ROW><ROW><id>5919898</id><snippet>OrderedDict</snippet></ROW><ROW><id>5919992</id><snippet>import datetime as dt
hours = [(i, dt.time(i).strftime('%I %p')) for i in range(24)]
</snippet></ROW><ROW><id>5920139</id><snippet>eval()</snippet></ROW><ROW><id>5920139</id><snippet>exec</snippet></ROW><ROW><id>5920139</id><snippet>exec """def fun():
  print 'bbb'
"""
</snippet></ROW><ROW><id>5920448</id><snippet>myuser.groups = [group_list]
</snippet></ROW><ROW><id>5920448</id><snippet>if myuser.groups.filter(name='teachers'):
    print "myuser is a teacher"
    ...
</snippet></ROW><ROW><id>5920458</id><snippet>jobs</snippet></ROW><ROW><id>5920458</id><snippet>"jobs" : {
     "job-name" : {
          "pretty-print" : { ... }
          ...
     }
     ...
}
</snippet></ROW><ROW><id>5920458</id><snippet>my-pretty-print</snippet></ROW><ROW><id>5920458</id><snippet>pretty</snippet></ROW><ROW><id>5920458</id><snippet>pretty</snippet></ROW><ROW><id>5920458</id><snippet>"jobs" : {
    "pretty" : {}
}
</snippet></ROW><ROW><id>5920458</id><snippet>pretty</snippet></ROW><ROW><id>5920458</id><snippet>"jobs" : {
    "pretty" : { "general" : { "indent-string" : "    " }}
}
</snippet></ROW><ROW><id>5920481</id><snippet>import sys
sys.argv.append('syncdb')

from django.core.management import execute_manager
import settings # Your project's settings. Assumed to be in the same directory. 

execute_manager(settings)    
</snippet></ROW><ROW><id>5920609</id><snippet>class CheckableTabWidget(QtGui.QTabWidget):

    checkBoxList = []

    def addTab(self, widget, title):
        QtGui.QTabWidget.addTab(self, widget, title)
        checkBox = QtGui.QCheckBox()
        self.checkBoxList.append(checkBox)
        self.tabBar().setTabButton(self.tabBar().count()-1, QtGui.QTabBar.LeftSide, checkBox)
        self.connect(checkBox, QtCore.SIGNAL('stateChanged(int)'), lambda checkState: self.__emitStateChanged(checkBox, checkState))

    def isChecked(self, index):
        return self.tabBar().tabButton(index, QtGui.QTabBar.LeftSide).checkState() != QtCore.Qt.Unchecked

    def setCheckState(self, index, checkState):
        self.tabBar().tabButton(index, QtGui.QTabBar.LeftSide).setCheckState(checkState)

    def __emitStateChanged(self, checkBox, checkState):
        index = self.checkBoxList.index(checkBox)
        self.emit(QtCore.SIGNAL('stateChanged(int, int)'), index, checkState)
</snippet></ROW><ROW><id>5920669</id><snippet>import csv
import collections
d = collections.defaultdict(int)
with open("names.csv", "rb") as f: # Python 3.x: use newline="" instead of "rb"
    reader = csv.reader(f):
    reader.next() # ignore useless heading row
    for row in reader:
        for name in row:
            name = name.strip()
            if name:
                d[name] += 1
 morethan3 = [(name, count) for name, count in d.iteritems() if count &gt;= 3]
 morethan3.sort(key=lambda x: x[1], reverse=True)
 for name, count in morethan3:
    print name, count
</snippet></ROW><ROW><id>5920669</id><snippet>    reader = csv.DictReader(f):
    required_columns = ['name1', 'name3'] #### adjust this line as needed ####
    for row in reader:
        for col in required_columns:
            name = row[col].strip()
            if name:
                d[name] += 1
</snippet></ROW><ROW><id>5920779</id><snippet>passwd=None</snippet></ROW><ROW><id>5920789</id><snippet>handle_starttag</snippet></ROW><ROW><id>5920789</id><snippet>from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        if tag == 'tr':
            for name, value in attrs:
                if name == 'class':
                    print 'Found class', value

p = MyHTMLParser()
p.feed(ht)   
</snippet></ROW><ROW><id>5920789</id><snippet>Found class Table_Heading
Found class Table_row
Found class alternat_table_row
</snippet></ROW><ROW><id>5920811</id><snippet>POST service</snippet></ROW><ROW><id>5920811</id><snippet>http://www.google.com/transparencyreport/traffic/service</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; headers = """ &lt;paste headers&gt; """
</snippet></ROW><ROW><id>5920811</id><snippet>dict</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; headers = dict([[s.strip() for s in line.split(':', 1)]
                               for line in headers.strip().split('\n')])
</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; body = """ &lt;paste post data&gt; """
</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; import httplib2 
&gt;&gt;&gt; h = httplib2.Http()
&gt;&gt;&gt; url = 'http://www.google.com/transparencyreport/traffic/service'
&gt;&gt;&gt; resp, content = h.request(url, 'POST', body=body, headers=headers)
</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; cleaned = content.split("'")[0][4:-1] + ']' 
</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; data = json.loads(cleaned)
</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; data = [x for x in data if type(x) == float]
</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; data[:5] 
&lt;&lt;&lt; 
[44.73874282836914,
 45.4061279296875,
 47.5350456237793,
 44.56114196777344,
 46.08817672729492]
</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; with open('data.json', 'w') as f:
...:     f.write(json.dumps(data))
</snippet></ROW><ROW><id>5920811</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; plt.plot(data)
</snippet></ROW><ROW><id>5920811</id><snippet>http://www.google.com/transparencyreport/traffic/service</snippet></ROW><ROW><id>5921696</id><snippet>mapper.connect("/user", controller=user_controller, action="get_user", conditions=dict(method=["GET"]))
mapper.connect("/user", controller=user_controller, action="add_user", conditions=dict(method=["POST"]))
</snippet></ROW><ROW><id>5921696</id><snippet>## Handle GET requests
mapper.connect("/user", controller=user_controller, action="get_user", conditions=dict(method=["GET"]))
## Handle all other, non-GET requests
mapper.connect("/user", controller=user_controller, action="add_user")
</snippet></ROW><ROW><id>5921881</id><snippet>from collections import defaultdict

d = defaultdict(int)

with open('file') as fh:
    for line in fh:
        word, count = line.split()
        d[word] += count
</snippet></ROW><ROW><id>5921889</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>5921898</id><snippet>per_job = Personal(cd['Name'], cd['Email_ID'], cd['Address'], cd['Contact_Phone'], cd['Image'])
</snippet></ROW><ROW><id>5921898</id><snippet>per_job = Personal(name=cd['Name'], email=cd['Email_ID'], etc.
</snippet></ROW><ROW><id>5921898</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>5921898</id><snippet>else:</snippet></ROW><ROW><id>5921898</id><snippet>uregister</snippet></ROW><ROW><id>5921927</id><snippet>&gt;&gt;&gt; class X(object):
...     pass
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x.x = 1
&gt;&gt;&gt; d = {'a':1, 'b':2}
&gt;&gt;&gt; "{0[a]} {0[b]} {1.x}".format(d, x)
'1 2 1'
</snippet></ROW><ROW><id>5921927</id><snippet>__dict__</snippet></ROW><ROW><id>5921927</id><snippet>&gt;&gt;&gt; class X(object):
...     x1 = 1
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x.x2 = 2
&gt;&gt;&gt; x.__dict__
{'x2': 2}
&gt;&gt;&gt; x.x1
1
&gt;&gt;&gt; x.__dict__['x1']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'x1'
</snippet></ROW><ROW><id>5921927</id><snippet>__slots__</snippet></ROW><ROW><id>5921927</id><snippet>__getattribute__</snippet></ROW><ROW><id>5921959</id><snippet>datetime.datetime</snippet></ROW><ROW><id>5921959</id><snippet>datetime</snippet></ROW><ROW><id>5921959</id><snippet>datetime</snippet></ROW><ROW><id>5921959</id><snippet>datetime.datetime</snippet></ROW><ROW><id>5921959</id><snippet>datetime.date</snippet></ROW><ROW><id>5921959</id><snippet>.today()</snippet></ROW><ROW><id>5921959</id><snippet>postgres=# select '2011-07-05'::date - current_date;
 ?column? 
----------
       59
(1 row)
</snippet></ROW><ROW><id>5921959</id><snippet>SELECT id, city_id, event_id, duration, DATE(startdate)-CURRENT_DATETIME AS days FROM main_cityevent WHERE DATE(startdate) &lt;= DATE(NOW())
</snippet></ROW><ROW><id>5922373</id><snippet>&gt;&gt;&gt; import nltk.tag, nltk.data
&gt;&gt;&gt; default_tagger = nltk.data.load(nltk.tag._POS_TAGGER)
&gt;&gt;&gt; model = {'select': 'VB'}
&gt;&gt;&gt; tagger = nltk.tag.UnigramTagger(model=model, backoff=default_tagger)
</snippet></ROW><ROW><id>5922373</id><snippet>&gt;&gt;&gt; tagger.tag(['select', 'the', 'files'])
[('select', 'VB'), ('the', 'DT'), ('files', 'NNS')]
</snippet></ROW><ROW><id>5922373</id><snippet>train_tagger.py</snippet></ROW><ROW><id>5922610</id><snippet>subprocess</snippet></ROW><ROW><id>5922610</id><snippet>import subprocess
retcode = subprocess.call(["at", "x", "y", "z"])
</snippet></ROW><ROW><id>5922610</id><snippet>x</snippet></ROW><ROW><id>5922610</id><snippet>y</snippet></ROW><ROW><id>5922610</id><snippet>z</snippet></ROW><ROW><id>5922610</id><snippet>at</snippet></ROW><ROW><id>5922801</id><snippet>from django.template import RequestContext
from django.shortcuts import render_to_response

csrfContext = RequestContext(request)
return render_to_response(some_template, csrfContext)
</snippet></ROW><ROW><id>5922801</id><snippet>initialData = {'form': theForm, 'user_status': 'online'}
csrfContext = RequestContext(request, initialData)
return render_to_response(show_template, csrfContext)
</snippet></ROW><ROW><id>5922823</id><snippet>line = line.replace(item, "&lt;span style=\"color:skyBlue\"&gt;"+item+"&lt;/span&gt;")
</snippet></ROW><ROW><id>5922823</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>5922974</id><snippet>__getitem__</snippet></ROW><ROW><id>5922974</id><snippet>HttpRequest</snippet></ROW><ROW><id>5922974</id><snippet>request.POST['newUser']
</snippet></ROW><ROW><id>5923048</id><snippet>@receiver(post_save,sender=Resource)
def ResourceSaved(sender,**kwargs):
    print "Saved"

@receiver(post_delete,sender=Resource)
def ResourceDeleted(sender,**kwargs):
    print "Deleted"
</snippet></ROW><ROW><id>5923123</id><snippet>multiprocessing</snippet></ROW><ROW><id>5923123</id><snippet>from multiprocessing import Process

def f(name):
    print 'hello', name

if __name__ == '__main__':
    p = Process(target=f, args=('bob',))
    p.start()
    #p.join()
</snippet></ROW><ROW><id>5923353</id><snippet>function sim_distance($prefs, $person1, $person2) {
    $si = array();
    foreach($prefs[$person1] as $item) {
        if($item in $prefs[$person2]) $si[$item]=1;
    }
    if(count($si)==0) return 0;

    $squares = array();
    foreach($prefs[$person1] as $item) {
        if(array_key_exists($item,$prefs[$person2])) {
            $squares[] = pow($prefs[$person1][$item]-$prefs[$person2][$item],2);
        }
    }
    $sum_of_squares = array_sum($squares);
    return 1/(1+$sum_of_squares);
}
</snippet></ROW><ROW><id>5923353</id><snippet>def sim_distance(prefs,person1,person2):
    # Get the list of shared_items 
    si={} 
    for item in prefs[person1]:
        if item in prefs[person2]: si[item]=1

    # if they have no ratings in common, return 0 
    if len(si)==0: return 0

    # Add up the squares of all the differences
    sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],2) for item in prefs[person1] if item in prefs[person2]]) 

    return 1/(1+sum_of_squares)
</snippet></ROW><ROW><id>5923797</id><snippet>def _q_getattr(self, attr):
    print("get %s" % attr)
    return getattr(self, 'x')

def override(p, methods):
    oldType = type(p)
    newType = type(oldType.__name__ + "_Override", (oldType,), methods)
    p.__class__ = newType

override(p, { '__getattr__': _q_getattr})
print(p.__getattr__('x')())  # Works!  Prints "0"
print(p.x())                 # Should work!
</snippet></ROW><ROW><id>5923822</id><snippet>sortedfreqlist = sorted(freqlist, key=lambda item: int(item[1]), reverse=True)
</snippet></ROW><ROW><id>5923880</id><snippet>__name__</snippet></ROW><ROW><id>5923880</id><snippet>__main__</snippet></ROW><ROW><id>5923880</id><snippet>__name__</snippet></ROW><ROW><id>5923880</id><snippet>__name__</snippet></ROW><ROW><id>5923880</id><snippet>__name__</snippet></ROW><ROW><id>5923880</id><snippet>'__main__'</snippet></ROW><ROW><id>5923979</id><snippet>post</snippet></ROW><ROW><id>5924002</id><snippet>vals,vecs=linalg.eig(Ki)
max_eigenvalue = vals.max()
</snippet></ROW><ROW><id>5924110</id><snippet>silent :!python helloworld.py
</snippet></ROW><ROW><id>5924110</id><snippet>silent :!(sleep 0.5s &amp;&amp; python helloworld.py) &amp;
redraw!
</snippet></ROW><ROW><id>5924110</id><snippet>call system('python helloworld.py')
</snippet></ROW><ROW><id>5924110</id><snippet>call system('python helloworld.py &amp;')
</snippet></ROW><ROW><id>5924110</id><snippet>pyfile helloworld.py
</snippet></ROW><ROW><id>5924110</id><snippet>system()</snippet></ROW><ROW><id>5924110</id><snippet>!</snippet></ROW><ROW><id>5924110</id><snippet>redraw!</snippet></ROW><ROW><id>5924110</id><snippet>silent !</snippet></ROW><ROW><id>5924182</id><snippet>repr</snippet></ROW><ROW><id>5924182</id><snippet>eval</snippet></ROW><ROW><id>5924182</id><snippet>import cPickle

x = {}
for i in xrange(1000000):
    x["k%i" % i] = "v%i" % i
cPickle.dump(x, open("data", "wb"), -1)

x = cPickle.load(open("data", "rb"))
</snippet></ROW><ROW><id>5924182</id><snippet>-1</snippet></ROW><ROW><id>5924216</id><snippet>keyName = "hello"

testName = keyName
suffix = 0
while Entry.get_by_key_name(testName):
  suffix += 1
  testName = "%s-%d" % (keyName, suffix)

keyName = testName
</snippet></ROW><ROW><id>5924907</id><snippet>import operator
sum(map(operator.mul, topo[:-1], topo[1:]))
</snippet></ROW><ROW><id>5924907</id><snippet>import operator
import itertools

def pairwise(iterable):
    a, b = itertools.tee(iterable)
    next(b, None)
    return a, b

def sum_products(l):
    return sum(itertools.imap(operator.mul, *pairwise(l)))
</snippet></ROW><ROW><id>5925025</id><snippet>count</snippet></ROW><ROW><id>5925025</id><snippet>attr1</snippet></ROW><ROW><id>5925025</id><snippet>TestCount.count</snippet></ROW><ROW><id>5925025</id><snippet>2</snippet></ROW><ROW><id>5925025</id><snippet>attr1</snippet></ROW><ROW><id>5925025</id><snippet>2</snippet></ROW><ROW><id>5925025</id><snippet>4</snippet></ROW><ROW><id>5925025</id><snippet>attr1</snippet></ROW><ROW><id>5925025</id><snippet>attr2</snippet></ROW><ROW><id>5925025</id><snippet>0</snippet></ROW><ROW><id>5925025</id><snippet>1</snippet></ROW><ROW><id>5925025</id><snippet>class TestCount:
    def __init__(self):
        self.attr1 = 0
        self.attr2 = 1
</snippet></ROW><ROW><id>5925060</id><snippet>text/plain</snippet></ROW><ROW><id>5925060</id><snippet>simple_server</snippet></ROW><ROW><id>5925060</id><snippet>BaseHTTPRequestHandler</snippet></ROW><ROW><id>5925060</id><snippet>mimetools.Message</snippet></ROW><ROW><id>5925060</id><snippet># mimetools.py

class Message(rfc822.Message):

    def parsetype(self):
        str = self.typeheader
        if str is None:
            str = 'text/plain'
</snippet></ROW><ROW><id>5925232</id><snippet>&lt;Configure&gt;
The widget changed size (or location, on some platforms). The new size is 
provided in the width and height attributes of the event object passed to the callback.
</snippet></ROW><ROW><id>5925295</id><snippet>compiz</snippet></ROW><ROW><id>5925325</id><snippet>import re

s = "5+5.[)]1"
s = re.search("\d+\+\d+", s).group()
print(s) # 5+5
</snippet></ROW><ROW><id>5925480</id><snippet>math.so</snippet></ROW><ROW><id>5925480</id><snippet>mathmodule.so</snippet></ROW><ROW><id>5925480</id><snippet>config.out</snippet></ROW><ROW><id>5925480</id><snippet>.so</snippet></ROW><ROW><id>5925480</id><snippet>checking for dlopen... yes
checking DYNLOADFILE... dynload_shlib.o
checking MACHDEP_OBJS... MACHDEP_OBJS
</snippet></ROW><ROW><id>5925487</id><snippet>tesseract</snippet></ROW><ROW><id>5925487</id><snippet>svn</snippet></ROW><ROW><id>5925487</id><snippet>tesseract</snippet></ROW><ROW><id>5925487</id><snippet>tesseract.exe</snippet></ROW><ROW><id>5925487</id><snippet>import tempfile, subprocess

def ocr(image):
  tempFile = tempfile.NamedTemporaryFile(delete = False)

  process = subprocess.Popen(['tesseract', image, tempFile.name], stdout = subprocess.PIPE, stdin = subprocess.PIPE, stderr = subprocess.STDOUT)
  process.communicate()

  handle = open(tempFile.name + '.txt', 'r').read()

  return handle
</snippet></ROW><ROW><id>5925487</id><snippet>&gt;&gt;&gt; import tempfile, subprocess
&gt;&gt;&gt; def ocr(image):
...   tempFile = tempfile.NamedTemporaryFile(delete = False)
...   process = subprocess.Popen(['tesseract', image, tempFile.name], stdout = subprocess.PIPE, stdin = subprocess.PIPE, stderr = subprocess.STDOUT)
...   process.communicate()
...   handle = open(tempFile.name + '.txt', 'r').read()
...   return handle
... 
&gt;&gt;&gt; print ocr('326_fail.jpg')
0+1
</snippet></ROW><ROW><id>5925497</id><snippet>for e in soup.findAll('br'):
    e.extract()
</snippet></ROW><ROW><id>5925717</id><snippet>for x in sorted(frequency, key=lambda y: frequency[y]/float(n), reverse=True):
    print x,frequency[x],frequency[x]/float(n)
</snippet></ROW><ROW><id>5925926</id><snippet>oauth_token</snippet></ROW><ROW><id>5925926</id><snippet>oauth_token</snippet></ROW><ROW><id>5926016</id><snippet>test.py</snippet></ROW><ROW><id>5926016</id><snippet>try:
    # Put parsing code here
except HTMLParseError:
    pass
</snippet></ROW><ROW><id>5926016</id><snippet>import sys

class DevNull:
    def write(self, msg):
        pass

sys.stderr = DevNull()
</snippet></ROW><ROW><id>5926052</id><snippet>set.union</snippet></ROW><ROW><id>5926052</id><snippet>set.union(*m_dict.values())</snippet></ROW><ROW><id>5926136</id><snippet>from collections import defaultdict</snippet></ROW><ROW><id>5926136</id><snippet>import collections</snippet></ROW><ROW><id>5926136</id><snippet>from</snippet></ROW><ROW><id>5926136</id><snippet>import</snippet></ROW><ROW><id>5926136</id><snippet>#!/usr/bin/env python

import timeit

from collections import defaultdict
import collections

def first():
    from collections import defaultdict
    x = defaultdict(list)

def firstwithout():
    x = defaultdict(list)

def second():
    import collections
    x = collections.defaultdict(list)

def secondwithout():
    x = collections.defaultdict(list)

print "first with import",timeit.timeit('first()', 'from __main__ import first');
print "second with import",timeit.timeit('second()', 'from __main__ import second');

print "first without import",timeit.timeit('firstwithout()', 'from __main__ import firstwithout');
print "second without import",timeit.timeit('secondwithout()', 'from __main__ import secondwithout');
</snippet></ROW><ROW><id>5926136</id><snippet>first with import 1.61359190941
second with import 1.02904295921
first without import 0.344709157944
second without import 0.449721097946
</snippet></ROW><ROW><id>5926987</id><snippet>MenuItem</snippet></ROW><ROW><id>5926987</id><snippet>Container</snippet></ROW><ROW><id>5926987</id><snippet>gtk.MenuItem(label=None)</snippet></ROW><ROW><id>5926987</id><snippet>HBox</snippet></ROW><ROW><id>5927128</id><snippet>all()</snippet></ROW><ROW><id>5927128</id><snippet>any()</snippet></ROW><ROW><id>5927128</id><snippet>legal = set(['osama','bin','laden'])

def is_legal(seq):
    return all(tok in legal for tok in seq)
</snippet></ROW><ROW><id>5927160</id><snippet>index</snippet></ROW><ROW><id>5927160</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.lowercase.index('b')
1
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5927797</id><snippet>Lecture</snippet></ROW><ROW><id>5927797</id><snippet>startingPeriod</snippet></ROW><ROW><id>5928451</id><snippet>__len__</snippet></ROW><ROW><id>5928451</id><snippet>len(data)</snippet></ROW><ROW><id>5928451</id><snippet>read()</snippet></ROW><ROW><id>5928451</id><snippet>read()</snippet></ROW><ROW><id>5928451</id><snippet>file</snippet></ROW><ROW><id>5928451</id><snippet>import os, urllib2
from cStringIO import StringIO

class Progress(object):
    def __init__(self):
        self._seen = 0.0

    def update(self, total, size, name):
        self._seen += size
        pct = (self._seen / total) * 100.0
        print '%s progress: %.2f' % (name, pct)

class file_with_callback(file):
    def __init__(self, path, mode, callback, *args):
        file.__init__(self, path, mode)
        self.seek(0, os.SEEK_END)
        self._total = self.tell()
        self.seek(0)
        self._callback = callback
        self._args = args

    def __len__(self):
        return self._total

    def read(self, size):
        data = file.read(self, size)
        self._callback(self._total, len(data), *self._args)
        return data

path = 'large_file.txt'
progress = Progress()
stream = file_with_callback(path, 'rb', progress.update, path)
req = urllib2.Request(url, stream)
res = urllib2.urlopen(req)
</snippet></ROW><ROW><id>5928451</id><snippet>large_file.txt progress: 0.68
large_file.txt progress: 1.36
large_file.txt progress: 2.04
large_file.txt progress: 2.72
large_file.txt progress: 3.40
...
large_file.txt progress: 99.20
large_file.txt progress: 99.87
large_file.txt progress: 100.00
</snippet></ROW><ROW><id>5929117</id><snippet>https://graph.facebook.com/&lt;username&gt;</snippet></ROW><ROW><id>5929165</id><snippet>def test_booking_gta_object</snippet></ROW><ROW><id>5929165</id><snippet>def decorator(argument):
    def real_decorator(function):
        def wrapper(*args, **kwargs):
            funny_stuff()
            something_with_argument(argument)
            function(*args, **kwargs)
            more_funny_stuff()
        return wrapper
     return real_decorator
</snippet></ROW><ROW><id>5929554</id><snippet>total_items = [0]*12
for d in q:
  month = int(d['month'], 10)
  total_items[month-1] = d['total_item']
</snippet></ROW><ROW><id>5929802</id><snippet>def bar_weave():
    code = """
    int a = 0;
    for (int i=0;i&lt;10;++i){
        py::tuple arg(1);
        arg[0] = i;
        a += (int) foo.call(arg);
    }
    return_val = a;
    """
    return inline(code,['foo'])
</snippet></ROW><ROW><id>5929802</id><snippet>90
</snippet></ROW><ROW><id>5929856</id><snippet>poss = set(poss)
</snippet></ROW><ROW><id>5929856</id><snippet>prev = poss[0]</snippet></ROW><ROW><id>5929856</id><snippet>prev = 0</snippet></ROW><ROW><id>5929856</id><snippet>poss[0]</snippet></ROW><ROW><id>5929940</id><snippet>easy_install</snippet></ROW><ROW><id>5929940</id><snippet>pip</snippet></ROW><ROW><id>5929940</id><snippet>$ easy_install django</snippet></ROW><ROW><id>5929940</id><snippet>easy_install</snippet></ROW><ROW><id>5929940</id><snippet>pip</snippet></ROW><ROW><id>5929940</id><snippet>pip</snippet></ROW><ROW><id>5929940</id><snippet>easy_install</snippet></ROW><ROW><id>5929940</id><snippet>pip</snippet></ROW><ROW><id>5930045</id><snippet>import mmap

# f contains "0000111122223333444455556666777788889999"

f = open("data","r+")
VDATA = mmap.mmap(f.fileno(),0)

def deleteFromMmap(start,end):
    global VDATA
    length = end - start
    size = len(VDATA)
    newsize = size - length

    VDATA.move(start,end,size-end)
    VDATA.flush()
    VDATA.close()
    f.truncate(newsize)
    VDATA = mmap.mmap(f.fileno(),0)

def insertIntoMmap(offset,data):
    global VDATA
    length = len(data)
    size = len(VDATA)
    newsize = size + length

    VDATA.flush()
    VDATA.close()
    f.seek(size)
    f.write("A"*length)
    f.flush()
    VDATA = mmap.mmap(f.fileno(),0)

    VDATA.move(offset+length,offset,size-offset)
    VDATA.seek(offset)
    VDATA.write(data)
    VDATA.flush()

deleteFromMmap(4,8)

# -&gt; 000022223333444455556666777788889999

insertIntoMmap(4,"AAAA")

# -&gt; 0000AAAA22223333444455556666777788889999
</snippet></ROW><ROW><id>5930176</id><snippet>os.extsep</snippet></ROW><ROW><id>5930176</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; 'filename.ext1.ext2'.split(os.extsep)
['filename', 'ext1', 'ext2']
</snippet></ROW><ROW><id>5930176</id><snippet>&gt;&gt;&gt; 'filename.ext1.ext2'.split(os.extsep, 1)
['filename', 'ext1.ext2']
</snippet></ROW><ROW><id>5930176</id><snippet>&gt;&gt;&gt; def my_splitext(path):
...     """splitext for paths with directories that may contain dots."""
...     li = []
...     path_without_extensions = os.path.join(os.path.dirname(path), os.path.basename(path).split(os.extsep)[0])
...     extensions = os.path.basename(path).split(os.extsep)[1:]
...     li.append(path_without_extensions)
...     # li.append(extensions) if you want extensions in another list inside the list that is returned.
...     li.extend(extensions)
...     return li
... 
&gt;&gt;&gt; my_splitext('/path.with/dots./filename.ext1.ext2')
['/path.with/dots./filename', 'ext1', 'ext2']
</snippet></ROW><ROW><id>5930337</id><snippet>range(k,max)</snippet></ROW><ROW><id>5930337</id><snippet>max</snippet></ROW><ROW><id>5930337</id><snippet>range(1,1000)</snippet></ROW><ROW><id>5930351</id><snippet>bootstrap.py</snippet></ROW><ROW><id>5930351</id><snippet>bin\buildout.exe</snippet></ROW><ROW><id>5930351</id><snippet>bin\</snippet></ROW><ROW><id>5930351</id><snippet>bin\instance.exe</snippet></ROW><ROW><id>5930351</id><snippet>bin/buildout</snippet></ROW><ROW><id>5930351</id><snippet>bin\buildout.exe</snippet></ROW><ROW><id>5930401</id><snippet>NESTED_ML_COMMENT</snippet></ROW><ROW><id>5930401</id><snippet>/*test2/*nested*/comment*/</snippet></ROW><ROW><id>5930401</id><snippet>/*</snippet></ROW><ROW><id>5930401</id><snippet>*/</snippet></ROW><ROW><id>5930401</id><snippet>COMMENT_START : '/*';</snippet></ROW><ROW><id>5930401</id><snippet>COMMENT_END : '*/';</snippet></ROW><ROW><id>5930401</id><snippet>/*</snippet></ROW><ROW><id>5930401</id><snippet>*/</snippet></ROW><ROW><id>5930401</id><snippet>CSS</snippet></ROW><ROW><id>5930401</id><snippet>CSS</snippet></ROW><ROW><id>5930401</id><snippet>grammar T;

parse
  :  comment EOF 
  ;

comment
  :  COMMENT_START (ANY | comment)* COMMENT_END
  ;

COMMENT_START : '/*';
COMMENT_END   : '*/';
ANY           :  . ;
</snippet></ROW><ROW><id>5930401</id><snippet>/*test2/*nested*/comment*/</snippet></ROW><ROW><id>5930401</id><snippet>/*</snippet></ROW><ROW><id>5930401</id><snippet>*/</snippet></ROW><ROW><id>5930401</id><snippet>CSS</snippet></ROW><ROW><id>5930401</id><snippet>comment
  :  NESTED_ML_COMMENT 
     {
       text = $NESTED_ML_COMMENT.text
       # invoke the TParser (my demo grammar) on `text`
     }
  ;
</snippet></ROW><ROW><id>5930401</id><snippet>ANY</snippet></ROW><ROW><id>5930401</id><snippet>TEXT</snippet></ROW><ROW><id>5930401</id><snippet>/*</snippet></ROW><ROW><id>5930401</id><snippet>*/</snippet></ROW><ROW><id>5930401</id><snippet>TEXT</snippet></ROW><ROW><id>5930401</id><snippet>*</snippet></ROW><ROW><id>5930401</id><snippet>/</snippet></ROW><ROW><id>5930401</id><snippet>/</snippet></ROW><ROW><id>5930401</id><snippet>*</snippet></ROW><ROW><id>5930401</id><snippet>grammar Comment;

options {
  output=AST;
  language=Python;
}

tokens {
  COMMENT;
}

@lexer::members {
  def not_part_of_comment(self):
    current = self.input.LA(1)
    next = self.input.LA(2)
    if current == ord('*'): return next != ord('/')
    if current == ord('/'): return next != ord('*')  
    return True
}

parse
  :  comment EOF -&gt; comment
  ;

comment
  :  COMMENT_START atom* COMMENT_END -&gt; ^(COMMENT atom*)
  ;

atom
  :  TEXT
  |  comment
  ;

COMMENT_START : '/*';
COMMENT_END   : '*/';
TEXT          : ({self.not_part_of_comment()}?=&gt; . )+ ;
</snippet></ROW><ROW><id>5930401</id><snippet>{ boolean_expression }?=&gt;</snippet></ROW><ROW><id>5930401</id><snippet>java -cp antlr-3.1.3.jar org.antlr.Tool Comment.g 
</snippet></ROW><ROW><id>5930401</id><snippet>#!/usr/bin/env python

import antlr3
from antlr3 import *
from antlr3.tree import *
from CommentLexer import *
from CommentParser import *

# http://www.antlr.org/wiki/display/ANTLR3/Python+runtime
# http://www.antlr.org/download/antlr-3.1.3.jar

def print_level_order(tree, indent):
  print '{0}{1}'.format('   '*indent, tree.text)
  for child in tree.getChildren():
    print_level_order(child, indent+1)

input = '/*aaa1/*bbb/*ccc*/*/aaa2*/'
char_stream = antlr3.ANTLRStringStream(input)
lexer = CommentLexer(char_stream)
tokens = antlr3.CommonTokenStream(lexer)
parser = CommentParser(tokens)
tree = parser.parse().tree 
print_level_order(tree, 0)
</snippet></ROW><ROW><id>5930401</id><snippet>"/*aaa1/*bbb/*ccc*/*/aaa2*/"</snippet></ROW><ROW><id>5930401</id><snippet>COMMENT
   aaa1
   COMMENT
      bbb
      COMMENT
         ccc
   aaa2
</snippet></ROW><ROW><id>5930401</id><snippet>grammar CSS;

options {
  output=AST;
  language=Python;
}

tokens {
  CSS_FILE;
  RULE;
  BLOCK;
  DECLARATION;
}

@parser::header {
import antlr3
from antlr3 import *
from antlr3.tree import *
from CommentLexer import *
from CommentParser import *
}

@parser::members {
  def parse_comment(self, text):
    lexer = CommentLexer(antlr3.ANTLRStringStream(text))
    parser = CommentParser(antlr3.CommonTokenStream(lexer))
    return parser.parse().tree 
}

parse
  :  atom+ EOF -&gt; ^(CSS_FILE atom+)
  ;

atom
  :  rule
  |  Comment -&gt; {self.parse_comment($Comment.text)}
  ;

rule
  :  Identifier declarationBlock -&gt; ^(RULE Identifier declarationBlock)
  ;

declarationBlock
  :  '{' declaration+ '}' -&gt; ^(BLOCK declaration+)
  ;

declaration
  :  a=Identifier ':' b=Identifier ';' -&gt; ^(DECLARATION $a $b)
  ;

Identifier
  :  ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9')*
  ;

Comment
  :  '/*' (options {greedy=false;} : Comment | . )* '*/'
  ;

Space
  :  (' ' | '\t' | '\r' | '\n') {$channel=HIDDEN;}
  ;
</snippet></ROW><ROW><id>5930401</id><snippet>h1 {  a: b;  c: d;}

/*aaa1/*bbb/*ccc*/*/aaa2*/

p {x  :  y;}
</snippet></ROW><ROW><id>5930401</id><snippet>CSS_FILE
   RULE
      h1
      BLOCK
         DECLARATION
            a
            b
         DECLARATION
            c
            d
   COMMENT
      aaa1
      COMMENT
         bbb
         COMMENT
            ccc
      aaa2
   RULE
      p
      BLOCK
         DECLARATION
            x
            y
</snippet></ROW><ROW><id>5930401</id><snippet>#!/usr/bin/env python

import antlr3
from antlr3 import *
from antlr3.tree import *
from CSSLexer import *
from CSSParser import *

def print_level_order(tree, indent):
  print '{0}{1}'.format('   '*indent, tree.text)
  for child in tree.getChildren():
    print_level_order(child, indent+1)

input = 'h1 {  a: b;  c: d;}\n\n/*aaa1/*bbb/*ccc*/*/aaa2*/\n\np {x  :  y;}'
char_stream = antlr3.ANTLRStringStream(input)
lexer = CSSLexer(char_stream)
tokens = antlr3.CommonTokenStream(lexer)
parser = CSSParser(tokens)
tree = parser.parse().tree 
print_level_order(tree, 0)
</snippet></ROW><ROW><id>5930456</id><snippet>attach_file</snippet></ROW><ROW><id>5930456</id><snippet>attach</snippet></ROW><ROW><id>5930456</id><snippet>def attach_file(self, path, mimetype=None):
    """Attaches a file from the filesystem."""
    filename = os.path.basename(path)
    content = open(path, 'rb').read()
    self.attach(filename, content, mimetype)
</snippet></ROW><ROW><id>5930456</id><snippet>EmailMultiAlternatives</snippet></ROW><ROW><id>5930456</id><snippet>attach</snippet></ROW><ROW><id>5930527</id><snippet>std::getline()</snippet></ROW><ROW><id>5930527</id><snippet>std::string</snippet></ROW><ROW><id>5930527</id><snippet>std::istringstream</snippet></ROW><ROW><id>5930527</id><snippet>std::string line;
if(std::getline(std::cin, line))
{
  std::istringstream str(line);
  int lc;

  if (str &gt;&gt; lc) // now you have the line count..
  {
    // now use the same technique above
  }
}
</snippet></ROW><ROW><id>5930527</id><snippet>std::vector&lt;&gt;</snippet></ROW><ROW><id>5930774</id><snippet>unicode()</snippet></ROW><ROW><id>5930774</id><snippet>unicode()</snippet></ROW><ROW><id>5930774</id><snippet>v = "myvalüe"
u = unicode(v, 'utf-8')
</snippet></ROW><ROW><id>5930839</id><snippet>resources/__init__.py</snippet></ROW><ROW><id>5930839</id><snippet>from javascript import Javascript
from images import Images
</snippet></ROW><ROW><id>5930839</id><snippet>import resources
js = resources.Javascript()
imgs = resources.Images()
</snippet></ROW><ROW><id>5930839</id><snippet>__init__.py</snippet></ROW><ROW><id>5930847</id><snippet>import feedparser
from django.template import Template
d = feedparser.parse("http://example.com/feed.xml") # creating a FeedParserDict
# ... do stuff with d
t = Template(the_stuff_below) # compiling the template
output_atom_document = t.render(d)
</snippet></ROW><ROW><id>5930847</id><snippet>feedparser.parse()</snippet></ROW><ROW><id>5930847</id><snippet>FeedParserDict</snippet></ROW><ROW><id>5930847</id><snippet>&lt;?xml version="1.0" encoding="{{ encoding }}"?&gt;
&lt;feed xmlns="http://www.w3.org/2005/Atom"&gt;
    &lt;title type="{{ feed.title_detail.type }}" xml:lang="{{ feed.title_detail.language }}" xml:base="{{ feed.title_detail.base }}"&gt;{{ feed.title|escape }}&lt;/title&gt;
{% for link in feed.links %}
    &lt;link rel="{{ link.rel }}" type="{{ link.type }}" href="{{ link.href }}" title="{{ link.title }}"/&gt;
{% endfor %}
    &lt;subtitle type="{{ feed.subtitle_detail.type }}" xml:lang="{{ feed.subtitle_detail.language }}" xml:base="{{ feed.subtitle_detail.base }}"&gt;{{ feed.subtitle|escape }}&lt;/subtitle&gt;
    &lt;rights type="{{ feed.rights_detail.type }}" xml:lang="{{ feed.rights_detail.language }}" xml:base="{{ feed.rights_detail.base }}"&gt;{{ feed.rights|escape }}&lt;/rights&gt;
    &lt;generator uri="{{ feed.generator_detail.href }}" version="{{ feed.generator_detail.version }}"&gt;{{ feed.generator }}&lt;/generator&gt;
    &lt;info type="{{ feed.info_detail.type }}" xml:lang="{{ feed.info_detail.language }}" xml:base="{{ feed.info_detail.base }}"&gt;{{ feed.info|escape }}&lt;/info&gt;
    &lt;updated&gt;{{ feed.updated }}&lt;/updated&gt;
    &lt;id&gt;{{ feed.id }}&lt;/id&gt;
    &lt;author&gt;
        &lt;name&gt;{{ feed.author }}&lt;/name&gt;
        &lt;uri&gt;{{ feed.author_detail.href }}&lt;/uri&gt;
        &lt;email&gt;{{ feed.author_detail.email }}&lt;/email&gt;
    &lt;/author&gt;
{% for contributor in feed.contributors %}
    &lt;contributor&gt;
        &lt;name&gt;{{ contributor }}&lt;/name&gt;
        &lt;uri&gt;{{ contributor_detail.href }}&lt;/uri&gt;
        &lt;email&gt;{{ contributor_detail.email }}&lt;/email&gt;
    &lt;/contributor&gt;
{% endfor %}
    &lt;image&gt;
        &lt;title&gt;{{ feed.image.title }}&lt;/title&gt;
        &lt;url&gt;{{ feed.image.href }}&lt;/url&gt;
        &lt;link&gt;{{ feed.image.link }}&lt;/link&gt;
        &lt;width&gt;{{ feed.image.width }}&lt;/width&gt;
        &lt;height&gt;{{ feed.image.height }}&lt;/height&gt;
        &lt;description&gt;{{ feed.image.description }}&lt;/description&gt;
    &lt;/image&gt;
    &lt;icon&gt;{{ feed.icon }}&lt;/icon&gt;
    &lt;!-- not part of Atom 1.0: feed.textinput --&gt;
    &lt;!-- not part of Atom 1.0: feed.cloud --&gt;
    &lt;publisher&gt;
        &lt;name&gt;{{ feed.publisher }}&lt;/name&gt;
        &lt;uri&gt;{{ feed.publisher_detail.href }}&lt;/uri&gt;
        &lt;email&gt;{{ feed.publisher_detail.email }}&lt;/email&gt;
    &lt;/publisher&gt;
{% for tag in feed.tags %}
    &lt;tag&gt;
        &lt;term&gt;{{ tag.term }}&lt;/term&gt;
        &lt;scheme&gt;{{ tag.scheme }}&lt;/scheme&gt;
        &lt;label&gt;{{ tag.label }}&lt;/label&gt;
    &lt;/tag&gt;
{% endfor %}
    &lt;language&gt;{{ feed.language }}&lt;/language&gt;
    &lt;!-- not part of Atom 1.0: feed.license --&gt;
    &lt;!-- not part of Atom 1.0: feed.errorreportsto --&gt;
{% for entry in entries %}
    &lt;entry&gt;
        &lt;title type="{{ entry.title_detail.type }}" xml:lang="{{ entry.title_detail.language }}" xml:base="{{ entry.title_detail.base }}"&gt;{{ entry.title|escape }}&lt;/title&gt;
    {% for link in entry.links %}
        &lt;link rel="{{ link.rel }}" type="{{ link.type }}" href="{{ link.href }}" title="{{ link.title }}"/&gt;
    {% endfor %}
        &lt;summary type="{{ entry.summary_detail.type }}" xml:lang="{{ entry.summary_detail.language }}" xml:base="{{ entry.summary_detail.base }}"&gt;{{ entry.summary|escape }}&lt;/summary&gt;
    {% for content in entry.content %}
        &lt;content type="{{ content.type }}" xml:lang="{{ content.language }}" xml:base="{{ content.base }}"&gt;{{ content.value|escape }}&lt;/content&gt;
    {% endfor %}
        &lt;published&gt;{{ entry.published }}&lt;/published&gt;
        &lt;updated&gt;{{ entry.updated }}&lt;/updated&gt;
        &lt;created&gt;{{ entry.created }}&lt;/created&gt;
        &lt;!-- not part of Atom 1.0: entry.expired --&gt;
        &lt;id&gt;{{ entry.id }}&lt;/id&gt;
        &lt;author&gt;
            &lt;name&gt;{{ entry.author }}&lt;/name&gt;
            &lt;uri&gt;{{ entry.author_detail.href }}&lt;/uri&gt;
            &lt;email&gt;{{ entry.author_detail.email }}&lt;/email&gt;
        &lt;/author&gt;
    {% for contributor in entry.contributors %}
        &lt;contributor&gt;
            &lt;name&gt;{{ contributor }}&lt;/name&gt;
            &lt;uri&gt;{{ contributor_detail.href }}&lt;/uri&gt;
            &lt;email&gt;{{ contributor_detail.email }}&lt;/email&gt;
        &lt;/contributor&gt;
    {% endfor %}
    {% for enclosure in entry.enclosures %}
        &lt;link rel="enclosure" href="{{ enclosure.href }}" length="{{ enclosure.length }}" type="{{ enclosure.type }}"/&gt;
    {% endfor %}
        &lt;publisher&gt;
            &lt;name&gt;{{ entry.publisher }}&lt;/name&gt;
            &lt;uri&gt;{{ entry.publisher_detail.href }}&lt;/uri&gt;
            &lt;email&gt;{{ entry.publisher_detail.email }}&lt;/email&gt;
        &lt;/publisher&gt;
    {% for tag in entry.tags %}
        &lt;tag&gt;
            &lt;term&gt;{{ tag.term }}&lt;/term&gt;
            &lt;scheme&gt;{{ tag.scheme }}&lt;/scheme&gt;
            &lt;label&gt;{{ tag.label }}&lt;/label&gt;
        &lt;/tag&gt;
    {% endfor %}
    &lt;source&gt;
        &lt;author&gt;
            &lt;name&gt;{{ entry.source.author }}&lt;/name&gt;
            &lt;uri&gt;{{ entry.source.author_detail.href }}&lt;/uri&gt;
            &lt;email&gt;{{ entry.source.author_detail.email }}&lt;/email&gt;
        &lt;/author&gt;
    {% for contributor in entry.source.contributors %}
        &lt;contributor&gt;
            &lt;name&gt;{{ contributor }}&lt;/name&gt;
            &lt;uri&gt;{{ contributor_detail.href }}&lt;/uri&gt;
            &lt;email&gt;{{ contributor_detail.email }}&lt;/email&gt;
        &lt;/contributor&gt;
    {% endfor %}
        &lt;icon&gt;{{ entry.source.icon }}&lt;/icon&gt;
        &lt;id&gt;{{ entry.source.id }}&lt;/id&gt;
    {% for link in entry.source.links %}
        &lt;link rel="{{ link.rel }}" type="{{ link.type }}" href="{{ link.href }}" title="{{ link.title }}"/&gt;
    {% endfor %}
        &lt;logo&gt;{{ entry.source.logo }}&lt;/logo&gt;
        &lt;rights type="{{ entry.source.rights_detail.type }}" xml:lang="{{ entry.source.rights_detail.language }}" xml:base="{{ entry.source.rights_detail.base }}"&gt;{{ entry.source.rights|escape }}&lt;/rights&gt;
        &lt;subtitle type="{{ entry.source.subtitle_detail.type }}" xml:lang="{{ entry.source.subtitle_detail.language }}" xml:base="{{ entry.source.subtitle_detail.base }}"&gt;{{ entry.source.subtitle|escape }}&lt;/subtitle&gt;
        &lt;title type="{{ entry.source.title_detail.type }}" xml:lang="{{ entry.source.title_detail.language }}" xml:base="{{ entry.source.title_detail.base }}"&gt;{{ entry.source.title|escape }}&lt;/title&gt;
        &lt;updated&gt;{{ entry.source.updated }}&lt;/updated&gt;
    &lt;/source&gt;
    &lt;!-- not part of Atom 1.0: entry.comments --&gt;
    &lt;!-- not part of Atom 1.0: entry.license --&gt;
    &lt;/entry&gt;
{% endfor %}
    &lt;!-- meaningless: version (this is Atom 1.0) --&gt;
    &lt;!-- meaningless: namespaces (namespace set to "http://www.w3.org/2005/Atom" in the &lt;feed&gt; tag) --&gt;
    &lt;!-- somewhere else: encoding (in the XML declaration) --&gt;
    &lt;!-- meaningless: status (HTTP status) --&gt;
    &lt;!-- meaningless: href (present if server redirect when fetching the original feed) --&gt;
    &lt;!-- meaningless: etag (part of HTTP headers) --&gt;
    &lt;!-- meaningless: modified (part of HTTP headers) --&gt;
    &lt;!-- meaningless: headers (HTTP headers) --&gt;
    &lt;!-- meaningless: bozo (set to 1 if not well-formed XML) --&gt;
    &lt;!-- meaningless: bozo_exception --&gt;
&lt;/feed&gt;
</snippet></ROW><ROW><id>5931175</id><snippet>O(1)</snippet></ROW><ROW><id>5931175</id><snippet>n</snippet></ROW><ROW><id>5931175</id><snippet>n</snippet></ROW><ROW><id>5931175</id><snippet>n</snippet></ROW><ROW><id>5931250</id><snippet>for n in tuple(poss):
    poss.append(n+6)
</snippet></ROW><ROW><id>5931337</id><snippet>class MyForm(forms.Form):
    categories = forms.CharField(
            required=False,
            widget=forms.SelectMultiple(choices=CATEGORY_VALUE),
            label="Categories"
        )
    additional_item_ship_cost = forms.CharField(
            required=False,
            max_length=10,
            label="Additional Item Ship Cost"
        )
</snippet></ROW><ROW><id>5931391</id><snippet>def f():  # for demonstration
    pass

f.__doc__ = "Docstring!"
help(f)
</snippet></ROW><ROW><id>5931391</id><snippet>+=</snippet></ROW><ROW><id>5931391</id><snippet>__doc__</snippet></ROW><ROW><id>5931391</id><snippet>__docs__</snippet></ROW><ROW><id>5931391</id><snippet>__func__</snippet></ROW><ROW><id>5931391</id><snippet>class MyClass(object):

    def myMethod(self):
        pass

MyClass.myMethod.__func__.__doc__ = "A really cool method"
</snippet></ROW><ROW><id>5931477</id><snippet>$ sudo ln -s /Developer/Platforms/iPhoneOS.platform/Developer/usr/libexec/gcc/darwin/ppc /Developer/usr/libexec/gcc/darwin
$ sudo ln -s /Developer/Platforms/iPhoneOS.platform/Developer/usr/libexec/gcc/darwin/ppc /usr/libexec/gcc/darwin
</snippet></ROW><ROW><id>5931494</id><snippet>__init__()</snippet></ROW><ROW><id>5931494</id><snippet># This is the mataclass-defined __init__
def auto_init(self, *args, **kwargs):
    for arg_val, arg_name in zip(args, self.init_args):
        setattr(self, arg_name, arg_val)

    # This would allow the user to explicitly specify field values with named arguments
    self.__dict__.update(kwargs)

class MetaBase(type):
    def __new__(cls, name, bases, attrs):
        attrs['__init__'] = auto_init
        return super(MetaBase, cls).__new__(cls, name, bases, attrs)

class Base(object):
    __metaclass__ = MetaBase

# No need to define __init__
class Foo(Base):
    init_args = ['first', 'last', 'email', 'mi']
</snippet></ROW><ROW><id>5931532</id><snippet>contenttypes</snippet></ROW><ROW><id>5931612</id><snippet>result</snippet></ROW><ROW><id>5931612</id><snippet>'type'</snippet></ROW><ROW><id>5931612</id><snippet>results['results']['bindings']</snippet></ROW><ROW><id>5931612</id><snippet>'costar'</snippet></ROW><ROW><id>5931612</id><snippet>'movie'</snippet></ROW><ROW><id>5931612</id><snippet>result</snippet></ROW><ROW><id>5931612</id><snippet>result['costar']</snippet></ROW><ROW><id>5931612</id><snippet>result['movie']</snippet></ROW><ROW><id>5931612</id><snippet>'type'</snippet></ROW><ROW><id>5931612</id><snippet>'value'</snippet></ROW><ROW><id>5931612</id><snippet>result['costar']['value']</snippet></ROW><ROW><id>5931612</id><snippet>result['movie']['value']</snippet></ROW><ROW><id>5931612</id><snippet>result</snippet></ROW><ROW><id>5931612</id><snippet>" ".join(result[var]['value'] for var in results['head']['vars'])
</snippet></ROW><ROW><id>5931612</id><snippet>print "\n".join([" ".join(result[var]['value'] for var in results['head']['vars']) for result in results['results']['bindings']])
</snippet></ROW><ROW><id>5931840</id><snippet>conn.autocommit()</snippet></ROW><ROW><id>5931840</id><snippet>conn.commit()</snippet></ROW><ROW><id>5932003</id><snippet>winfo_rootx</snippet></ROW><ROW><id>5932003</id><snippet>winfo_rooty</snippet></ROW><ROW><id>5932097</id><snippet>s = "this is  a\nsentence"
re.split(r'(\W+)', s) # Notice parentheses and a plus sign.
</snippet></ROW><ROW><id>5932097</id><snippet>['this', ' ', 'is', '  ', 'a', '\n', 'sentence']
</snippet></ROW><ROW><id>5932364</id><snippet>[]</snippet></ROW><ROW><id>5932364</id><snippet>n</snippet></ROW><ROW><id>5932364</id><snippet>PyObject *
PyList_GetItem(PyObject *op, Py_ssize_t i)
{
    if (!PyList_Check(op)) {
        PyErr_BadInternalCall();
        return NULL;
    }
    if (i &lt; 0 || i &gt;= Py_SIZE(op)) {
        if (indexerr == NULL)
            indexerr = PyString_FromString(
                "list index out of range");
        PyErr_SetObject(PyExc_IndexError, indexerr);
        return NULL;
    }
    return ((PyListObject *)op) -&gt; ob_item[i];
}
</snippet></ROW><ROW><id>5932364</id><snippet>PyObject *
PyTuple_GetItem(register PyObject *op, register Py_ssize_t i)
{
    if (!PyTuple_Check(op)) {
        PyErr_BadInternalCall();
        return NULL;
    }
    if (i &lt; 0 || i &gt;= Py_SIZE(op)) {
        PyErr_SetString(PyExc_IndexError, "tuple index out of range");
        return NULL;
    }
    return ((PyTupleObject *)op) -&gt; ob_item[i];
}
</snippet></ROW><ROW><id>5933073</id><snippet>pyro-ns</snippet></ROW><ROW><id>5933903</id><snippet>from __future__ import print_function
import csv

with open('test_list.txt', 'r') as f: # with statement ensures your file is closed
    primary_set = set(line.strip() for line in f)

with open('test.csv', 'rb') as f: #### see note below ###
    for row in csv.reader(f): # delimiter=',' is the default
        print(sum(i in primary_set for i in row)) # i in primary_set has int value 0 or 1
</snippet></ROW><ROW><id>5933903</id><snippet>newline=''</snippet></ROW><ROW><id>5934182</id><snippet>datarr = ['PowUse', 'PowHea', 'PowSol', 'Top']
for i in range(len(dat)): exec(datarr[i]+'={}')
</snippet></ROW><ROW><id>5934182</id><snippet>datarr = ['PowUse', 'PowHea', 'PowSol', 'Top']
data = dict((name, {}) for name in datarr)
</snippet></ROW><ROW><id>5934182</id><snippet>eval()</snippet></ROW><ROW><id>5934182</id><snippet>for i in filarr:
    for j in buiarr:
        for l in datarr:
            a = data[l][(i, j)]
            np.putmask(a, np.abs(a)&lt;.01, np.nan)
            data[l].update({(i, j):a})
</snippet></ROW><ROW><id>5934182</id><snippet>for arr in data.itervalues():
    np.putmask(arr, np.abs(arr)&lt;.01, np.nan)
</snippet></ROW><ROW><id>5934182</id><snippet>abs(element) &lt; .01</snippet></ROW><ROW><id>5934597</id><snippet>reactor.spawnProcess(proto, addr)</snippet></ROW><ROW><id>5934597</id><snippet>reactor.spawnProcess(proto, addr, ['maze'], {})</snippet></ROW><ROW><id>5934597</id><snippet>global reactor</snippet></ROW><ROW><id>5934597</id><snippet>reactor</snippet></ROW><ROW><id>5934597</id><snippet>sleep(0.01)</snippet></ROW><ROW><id>5934597</id><snippet>time</snippet></ROW><ROW><id>5934597</id><snippet>time.sleep()</snippet></ROW><ROW><id>5934597</id><snippet>reactor.callLater()</snippet></ROW><ROW><id>5934597</id><snippet>getWrit</snippet></ROW><ROW><id>5934597</id><snippet>getWrit</snippet></ROW><ROW><id>5934597</id><snippet>getWrit</snippet></ROW><ROW><id>5934597</id><snippet>dataReceived</snippet></ROW><ROW><id>5934597</id><snippet>\n</snippet></ROW><ROW><id>5934597</id><snippet>getWrit</snippet></ROW><ROW><id>5934597</id><snippet>print 'Preall test works!'
from twisted.internet import reactor, protocol, defer
from twisted.python import log
import sys
print 'Imports done'

class PrgShell(protocol.Protocol):
    data = ''
    class PrgProto(protocol.ProcessProtocol):
        def __init__(self, out):
            print 'Prgproto instance made'
            self.transportout = out.transport
            self.out = out
        def outReceived(self, data):
            """Called when process sends data. We send it on to transport, however if it's 'I want input', we need to activate input."""
            print 'Sub said: '+data
            if data == "input":
                print 'Sub wants input'
                self.transportout.write("input")
                d = self.out.getWrit() # getWrit returns a deferred. We store it in d to make the code more readable
                d.addCallback(self.sendInput) # Here we add self.sendInput to the callback chain.
                                              # This way self.sendInput gets called with the user input.
            else:
                self.transportout.write(data)

        def sendInput(self, data):
            self.transport.write(data)


    def getWrit(self):
        print 'Proto gave input to prg'
        self.deferred = defer.deferred()
        self.data = ''
        return self.deferred

    def connectionMade(self):
        print 'Connected'
        proto = self.PrgProto(self)
        addr = "C:\\Documents and Settings\\papa\\My Documents\\Python\\Files\\Maze\\exe\\maze.exe"
        reactor.spawnProcess(proto, addr, ['maze'], {})
        print 'Procces spawned!'


    def dataReceived(self, data):
        print 'Data recived: '+data
        self.data+=data

        if self.data.endswith('\n'):
            if self.deferred:
                # We got a newline character, and there is a deferred to call, so lets call it
                d, self.deferred = self.deferred, None # This will set self.deferred to none to stop mistakes later

                d.callback(self.data) # Call the deferred with data. This will send the data to sendInput above.

                self.data = '' # Clear the buffer

print 'About to do stuff'
factory = protocol.ServerFactory()
factory.protocol = PrgShell
#f = open("errors.txt", 'w')
#log.startLogging(f)
#print 'Logging started'
reactor.listenTCP(8000,factory)
print 'Runing'
reactor.run()
</snippet></ROW><ROW><id>5934653</id><snippet>%(parameter_name)s</snippet></ROW><ROW><id>5934653</id><snippet>sql = ( "SELECT IFNULL(b.inviters/COUNT(DISTINCT c.id),0),                                  " 
            "       FROM_UNIXTIME(c.registered_at, %(timepattern)s)                                          "
            "FROM   (   SELECT COUNT(1) AS inviters, joindate                                   "
            "           FROM                                                                    "
            "               (   SELECT  DISTINCT(y.id) AS inviters,                             " 
            "                           FROM_UNIXTIME(y.registered_at, %(timepattern)s) AS joindate          "
            "                   FROM user_invites z                                             "
            "                   INNER JOIN users y ON y.id = z.inviter_id                       "
            "                   WHERE z.created_at &gt;= %(datestart_int)s                                        "
            "               ) a                                                                 "
            "           GROUP BY a.joindate                                                     "
            "       ) b                                                                         "   
            "INNER JOIN users c ON FROM_UNIXTIME(c.registered_at, %(timepattern)s) = b.joindate              "
            "WHERE c.registered_at BETWEEN %(datestart_int)s AND %(dateend_int)s                                            "
            "GROUP BY FROM_UNIXTIME(c.registered_at, %(timepattern)s)                                        "   )

    args =  {
        "timepattern" : timepattern,
        "datestart_int" : datestart_int,
        "dateend_int" : dateend_int,
    }   

    cursor.execute(sql, args)
</snippet></ROW><ROW><id>5935118</id><snippet>import csv
with open('some.csv', 'rb') as f:
    reader = csv.reader(f, delimiter=' ')
    for row in reader:
        print row
</snippet></ROW><ROW><id>5935395</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>5935395</id><snippet>#!/usr/bin/env python

import unittest

class TestAddition(unittest.TestCase):

    def test_addition(self):
        self.assertEquals(3, 1 + 1)

class TestSubtraction(unittest.TestCase):

    def test_subtraction(self):
        self.assertEquals(3, 1 - 1)

if __name__ == '__main__':
    unittest.main()

% ./t.py 
FF
======================================================================
FAIL: test_addition (__main__.TestAddition)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./t.py", line 8, in test_addition
    self.assertEquals(3, 1 + 1)
AssertionError: 3 != 2

======================================================================
FAIL: test_subtraction (__main__.TestSubtraction)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./t.py", line 13, in test_subtraction
    self.assertEquals(3, 1 - 1)
AssertionError: 3 != 0

----------------------------------------------------------------------
Ran 2 tests in 0.002s

FAILED (failures=2)
</snippet></ROW><ROW><id>5935419</id><snippet>os.getenv()</snippet></ROW><ROW><id>5935419</id><snippet>bash</snippet></ROW><ROW><id>5935468</id><snippet>User.objects.filter(username__icontains='ab')
</snippet></ROW><ROW><id>5936093</id><snippet>import os
filename = "C:/Dokumente und Einstellungen/schnei17/Desktop/a.txt"
print "Filesize: %s" % (os.path.getsize(filename),)
f = open(filename, "r")
data = f.read(2000)
print "Read %s bytes" % (len(data),)
</snippet></ROW><ROW><id>5936093</id><snippet>import os
filename = "NewProv.txt"
print "Filesize: %s" % (os.path.getsize(filename),)
f = open(filename, "rb")
data = f.read(2000)
print "Read %s bytes" % (len(data),)
</snippet></ROW><ROW><id>5936103</id><snippet>$("#search_users").autocomplete(/search/search_manager);
</snippet></ROW><ROW><id>5936103</id><snippet>class search_user(webapp.RequestHandler):
            q = (self.request.GET['q']).lower() 
            results=models.user.all().fetch(100) 
            for records in result:
                print records+"|"+records+"\n"

application = webapp.WSGIApplication([
                                      (r'/user_auth/search_manager',search_user)]

def main():
  run_wsgi_app(application)

if __name__ == '__main__':
  main()

simple:
</snippet></ROW><ROW><id>5936103</id><snippet>(".search_users").autocomplete(/search/search_manager);
</snippet></ROW><ROW><id>5936425</id><snippet>CFLAGS</snippet></ROW><ROW><id>5936425</id><snippet>LDFLAGS</snippet></ROW><ROW><id>5936425</id><snippet>-isysroot</snippet></ROW><ROW><id>5936425</id><snippet>python2.6-config --cflags --ldflags</snippet></ROW><ROW><id>5936425</id><snippet>easy_install</snippet></ROW><ROW><id>5936425</id><snippet>--verbose</snippet></ROW><ROW><id>5936592</id><snippet>cursor.execute(sql, args)</snippet></ROW><ROW><id>5936592</id><snippet>executemany()</snippet></ROW><ROW><id>5936592</id><snippet>sql = """
CREATE TEMPORARY TABLE cohort_users (user_id INTEGER);   

INSERT INTO cohort_users (user_id)
    SELECT id
        FROM users
        WHERE registered_at BETWEEN %(datestart_int)s AND %(dateend_int)s
    ;

SELECT  1, FROM_UNIXTIME(%(dateend_int)s, %(timepattern)s)
UNION ALL
SELECT  (COUNT(DISTINCT x.user_id)/(SELECT COUNT(1) FROM cohort_users)), 
        FROM_UNIXTIME((%(dateend_int)s + (7 * 24 * 60 * 60)), (timepattern)s)
    FROM cohort_users z
    INNER JOIN actions x ON x.user_id = z.id
    WHERE x.did_at BETWEEN (%(datestart_int)s + (7 * 24 * 60 * 60))
    AND (%(dateend_int)s + (7 * 24 * 60 * 60))
    ;

DROP TABLE cohort_users;
"""
</snippet></ROW><ROW><id>5936635</id><snippet>LJ</snippet></ROW><ROW><id>5936635</id><snippet>LU</snippet></ROW><ROW><id>5936635</id><snippet>LH</snippet></ROW><ROW><id>5936635</id><snippet>LQ</snippet></ROW><ROW><id>5936635</id><snippet>LE</snippet></ROW><ROW><id>5936635</id><snippet>    result=[]
    for line in lines:
        if line.find('Exit_status=') != -1:
            ...
            LJ = max(LJ, len(jobID))
            LU = max(LU, len(jUsr))
            LH = max(LH, len(jHst))
            LQ = max(LQ, len(jQue))
            LE = max(LE, len(eDate))
            result.append((jobID,jUsr,eDate,jHst,jQue))
   fmt="%%-%ss%%-%ss%%-%ss%%-%ss%%-%ss"%(LJ,LU,LE,LH,LQ)
   for jobID,jUsr,eDate,jHst,jQue in result:       
       print fmt % (jobID,jUsr,eDate,jHst,jQue)
</snippet></ROW><ROW><id>5936635</id><snippet>fmt</snippet></ROW><ROW><id>5936635</id><snippet>%s</snippet></ROW><ROW><id>5936635</id><snippet>%%</snippet></ROW><ROW><id>5936635</id><snippet>%</snippet></ROW><ROW><id>5936666</id><snippet>session = self.request.environ['beaker.session']
</snippet></ROW><ROW><id>5936666</id><snippet>session['somekey'] = 'foo'
</snippet></ROW><ROW><id>5936666</id><snippet>my_var = session['somekey']
</snippet></ROW><ROW><id>5936666</id><snippet>class MainPage(webapp.RequestHandler):
  def get(self):
    session = self.request.environ['beaker.session']

    if 'counter' in session:
       counter = session['counter'] + 1
       session['counter'] = counter
    else:
       session['counter'] = 1

    self.response.out.write('counter: %d' % counter)
</snippet></ROW><ROW><id>5936819</id><snippet>type(addressString)</snippet></ROW><ROW><id>5936819</id><snippet>url = "http://maps.googleapis.com/maps/api/geocode/json?address=" +
      urllib.quote(addressString.encode('utf-8')) + "&amp;sensor=false";
</snippet></ROW><ROW><id>5936819</id><snippet>url = "http://maps.googleapis.com/maps/api/geocode/json?address=" +
      urllib.quote(addressString) + "&amp;sensor=false";
</snippet></ROW><ROW><id>5936819</id><snippet>%</snippet></ROW><ROW><id>5936848</id><snippet>def splitby( lst, breaker='00:00'):
    current = []
    it = iter(lst)
    first = next(it)
    assert first==breaker, "`lst` must begin with `breaker`"
    for item in it:
        if item == breaker:
            yield current
            current = []
        current.append(item)
    yield current
</snippet></ROW><ROW><id>5936848</id><snippet>from itertools import groupby

class splitter(object):

    def __init__(self, breaker):
        self.breaker = breaker
        self.current_group = 0

    def __call__(self, item):
        if item == self.breaker:
            self.current_group+=1
        return self.current_group

    def group(self, items):
        return (list(v) for k,v in groupby(items,self))

print list(splitter('00:00').group(items))
</snippet></ROW><ROW><id>5936903</id><snippet>array.append(NextPageTemplate('landscape'))</snippet></ROW><ROW><id>5936903</id><snippet>array.append(NextPageTemplate('portrait'))</snippet></ROW><ROW><id>5938216</id><snippet>top = {"&lt;Part: 1.1&gt;": {"&lt;Part: 1.1.1&gt;": {"&lt;Part: 1.1.1.1&gt;": {}}, "&lt;Part: 1.1.2&gt;": {}}, "&lt;Part: 1.2&gt;": {"&lt;Part: 1.2.1&gt;": {}, "&lt;Part: 1.2.2&gt;": {}}, "&lt;Part: 1.3&gt;": {}}

 def grab_children(father):
    local_list = []
    for key, value in father.iteritems():
        local_list.append(key)
        local_list.extend(grab_children(value))
    return local_list

print grab_children(top)
</snippet></ROW><ROW><id>5938612</id><snippet>setUp</snippet></ROW><ROW><id>5938612</id><snippet>setup_test_data</snippet></ROW><ROW><id>5938612</id><snippet>cls</snippet></ROW><ROW><id>5938612</id><snippet>self</snippet></ROW><ROW><id>5938612</id><snippet>self</snippet></ROW><ROW><id>5938612</id><snippet>setUpClass</snippet></ROW><ROW><id>5938612</id><snippet>class TestSystemPromotion(unittest2.TestCase):

  @classmethod
  def setUpClass(cls):
    cls.setup_test_data()


  @classmethod
  def setup_test_data(cls):
    ...

  def test_something(self):
    ...
</snippet></ROW><ROW><id>5938612</id><snippet>class TestSystemPromotion(unittest2.TestCase):

  def setUp(self):
    self.setup_test_data()

  def setup_test_data(self):
    ...

  def test_something(self):
    ...
</snippet></ROW><ROW><id>5938612</id><snippet>cls == type(self)</snippet></ROW><ROW><id>5938825</id><snippet>*</snippet></ROW><ROW><id>5938825</id><snippet>zip(assignment, *grades)
</snippet></ROW><ROW><id>5939323</id><snippet>jquery.wymeditor.js</snippet></ROW><ROW><id>5939323</id><snippet>WYMeditor.XhtmlSaxListener.prototype.removeEmptyTags</snippet></ROW><ROW><id>5939323</id><snippet>WYMeditor.XhtmlSaxListener.prototype.removeEmptyTags = function(xhtml)
{
   return xhtml;// .replace(new RegExp('&lt;('+this.block_tags.join("|").replace(/\|td/,'').replace(/\|th/, '')+')&gt;(&lt;br \/&gt;| | |\\s)*&lt;\/\\1&gt;' ,'g'),'');
};
</snippet></ROW><ROW><id>5939478</id><snippet>finditer()</snippet></ROW><ROW><id>5939478</id><snippet>with open("test.txt") as f:
  for line in f:
    if re.match("BREAK", line):
      print("Break")
      break
    m = re.match(r'((((2)([0-3]))|(([0-1])([0-9])))([0-5])([0-9]))', line)
    if m:
      print(m.group(0))
</snippet></ROW><ROW><id>5939512</id><snippet>myHTML = """
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;I am an HTML Page&lt;title&gt;
&lt;head&gt;
&lt;body&gt;
&lt;div&gt;Some content here.&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
"""
</snippet></ROW><ROW><id>5939896</id><snippet>http://%s/path/file.php % value  # Does not work
"http://%s/path/file.php" % value # Works
'http://%s/path/file.php' % value # Also works
"""http://%s/path/file.php""" % value # Also works
</snippet></ROW><ROW><id>5939896</id><snippet>"http://$some_variable/path/to/file.php"
</snippet></ROW><ROW><id>5939896</id><snippet>'http://$some_variable/path/to/file.php'
</snippet></ROW><ROW><id>5940226</id><snippet>**kwargs</snippet></ROW><ROW><id>5940226</id><snippet>d.get(k, default)</snippet></ROW><ROW><id>5940226</id><snippet>d[k]</snippet></ROW><ROW><id>5940226</id><snippet>default</snippet></ROW><ROW><id>5940231</id><snippet>def running_avg():
    count, sum = 0, 0
    value = yield None
    while True:
        if value:
            sum += value
            count += 1
        value = yield(sum/count)

# array for keeping running average
array = [[running_avg() for y in range(3)] for x in range(3)]

# advance to first yield before we begin
[[elem.next() for elem in row] for row in array]

with open('data.txt') as f:
    idx = None
    for line in f:
        if idx is not None and idx &lt; 3:
            for i, elem in enumerate(line.strip().split()):
                array[idx][i].send(float(elem))
            idx += 1
        if line.startswith('timestep'):
            idx = 0
</snippet></ROW><ROW><id>5940231</id><snippet>array</snippet></ROW><ROW><id>5940231</id><snippet>next</snippet></ROW><ROW><id>5940231</id><snippet>averages = [[elem.next() for elem in row] for row in array]
</snippet></ROW><ROW><id>5940231</id><snippet>averages = [[20.54, -11.85, 35.64], [0.006224, 23.71, 35.64], [-20.54, -11.86, 35.64]]
</snippet></ROW><ROW><id>5940364</id><snippet>forms.FileField()</snippet></ROW><ROW><id>5940364</id><snippet>forms.Form</snippet></ROW><ROW><id>5940364</id><snippet>class form(forms.Form):
    file = forms.FileField(required=False)
</snippet></ROW><ROW><id>5940364</id><snippet>models.FileField()</snippet></ROW><ROW><id>5940364</id><snippet>forms.ModelForm</snippet></ROW><ROW><id>5940364</id><snippet>class amodel(models.Model):
    file = models.FileField(blank=True, null=True)
</snippet></ROW><ROW><id>5940516</id><snippet>functools.wraps</snippet></ROW><ROW><id>5940516</id><snippet>def call_with_each(*arg_tuples):
    def decorate(f):
        @functools.wraps(f)
        def decorator():
            for arg_tuple in arg_tuples:
                f(*arg_tuple)
        return decorator
    return decorate

# useage example:
@call_with_each((3,), (2,)) # note that we pass several singleton tuples
def f(x):
    print x
# calling f() prints "3\n2\n"
</snippet></ROW><ROW><id>5940516</id><snippet>def call_with_each(*args)</snippet></ROW><ROW><id>5940516</id><snippet>for arg in args: f(arg)</snippet></ROW><ROW><id>5940619</id><snippet>re.sub</snippet></ROW><ROW><id>5940619</id><snippet>re.sub(r'#+', lambda m: "%0"+str(len(m.group(0))), string)</snippet></ROW><ROW><id>5940619</id><snippet>def</snippet></ROW><ROW><id>5940742</id><snippet>validate</snippet></ROW><ROW><id>5940742</id><snippet>HttpResponse</snippet></ROW><ROW><id>5940742</id><snippet>captchavalue == key</snippet></ROW><ROW><id>5940742</id><snippet>from django.http import HttpResponse

def validate(request):
 id=request.GET.get('id','')
 key=request.GET.get('key','') 
 captchavalue = mc.get(str(id))

 return HttpResponse(captchavalue == key)
</snippet></ROW><ROW><id>5940970</id><snippet>X = np.random.randn(1e3, 5)
X[np.abs(X)&lt; .1]= 0 # some zeros
X = np.ma.masked_equal(X,0)
plt.boxplot(X) #masked values are not plotted

#other functionalities of masked arrays
X.compressed() # get normal array with masked values removed
X.mask # get a boolean array of the mask
X.mean() # it automatically discards masked values
</snippet></ROW><ROW><id>5941361</id><snippet># A set of 64 characters, which allows a maximum chunk length of 6 .. because
# int('111111', 2) == 63 (plus zero)
charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_'

def encode(bin_string):
    # Split the string of 1s and 0s into lengths of 6.
    chunks = [bin_string[i:i+6] for i in range(0, len(bin_string), 6)]
    # Store the length of the last chunk so that we can add that as the last bit
    # of data so that we know how much to pad the last chunk when decoding.
    last_chunk_length = len(chunks[-1])
    # Convert each chunk from binary into a decimal
    decimals = [int(chunk, 2) for chunk in chunks]
    # Add the length of our last chunk to our list of decimals.
    decimals.append(last_chunk_length)
    # Produce an ascii string by using each decimal as an index of our charset.
    ascii_string = ''.join([charset[i] for i in decimals])

    return ascii_string

def decode(ascii_string):
    # Convert each character to a decimal using its index in the charset.
    decimals = [charset.index(char) for char in ascii_string]
    # Take last decimal which is the final chunk length, and the second to last
    # decimal which is the final chunk, and keep them for later to be padded
    # appropriately and appended.
    last_chunk_length, last_decimal = decimals.pop(-1), decimals.pop(-1)
    # Take each decimal, convert it to a binary string (removing the 0b from the
    # beginning, and pad it to 6 digits long.
    bin_string = ''.join([bin(decimal)[2:].zfill(6) for decimal in decimals])
    # Add the last decimal converted to binary padded to the appropriate length
    bin_string += bin(last_decimal)[2:].zfill(last_chunk_length)

    return bin_string
</snippet></ROW><ROW><id>5941361</id><snippet>class Urlify
    constructor: -&gt;
        @charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_'

    encode: (bits) -&gt;
        chunks = (bits[i...i+6] for i in [0...bits.length] by 6)
        last_chunk_length = chunks[chunks.length-1].length
        decimals = (parseInt(chunk, 2) for chunk in chunks)
        decimals.push(last_chunk_length)
        encoded = (@charset[i] for i in decimals).join('')

        return encoded

    decode: (encoded) -&gt;
        decimals = (@charset.indexOf(char) for char in encoded)
        [last_chunk_length, last_decimal] = [decimals.pop(), decimals.pop()]
        decoded = (('00000'+d.toString(2)).slice(-6) for d in decimals).join('')
        last_chunk = ('00000'+last_decimal.toString(2)).slice(-last_chunk_length)
        decoded += last_chunk

        return decoded
</snippet></ROW><ROW><id>5941450</id><snippet>numpy.apply_along_axis()</snippet></ROW><ROW><id>5941450</id><snippet>&gt;&gt;&gt; numpy.apply_along_axis(sum, 1, X)
array([15, 30])
</snippet></ROW><ROW><id>5941450</id><snippet>sum</snippet></ROW><ROW><id>5941619</id><snippet>positions</snippet></ROW><ROW><id>5941619</id><snippet>boxplot</snippet></ROW><ROW><id>5941619</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# Generate some data...
data = np.random.random((100, 5))
y = data.mean(axis=0)
x = np.random.random(y.size) * 10
x -= x.min()
x.sort()

# Plot a line between the means of each dataset
plt.plot(x, y, 'b-')

# Save the default tick positions, so we can reset them...
locs, labels = plt.xticks() 

plt.boxplot(data, positions=x, notch=True)

# Reset the xtick locations.
plt.xticks(locs)
plt.show()
</snippet></ROW><ROW><id>5941661</id><snippet>def blit_mask(source, dest, destpos, mask, maskrect):
    """
    Blit an source image to the dest surface, at destpos, with a mask, using
    only the maskrect part of the mask.
    """
    tmp = source.copy()
    tmp.blit(mask, maskrect.topleft, maskrect, special_flags=pygame.BLEND_RGBA_MULT)
    dest.blit(tmp, destpos, dest.get_rect().clip(maskrect))
</snippet></ROW><ROW><id>5941695</id><snippet>DB_CURSOR.execute("""INSERT INTO %s 
    (name,created_by,state,description,docs,admin_email,date_created) 
    VALUES(%%s,%%s,%%s,%%s,%%s,%%s,%%s)""" % hosts_table,
    (hostname, created_by, state, description, docroot, admin_email, date_created))
</snippet></ROW><ROW><id>5941695</id><snippet>&gt;&gt;&gt; '%%s %s' % 'x'
'%s x'
</snippet></ROW><ROW><id>5941847</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>5941847</id><snippet>import collections

lines = [[0.2, 'A'], [0.1, 'A'], [0.3, 'A'], [0.3, 'B'], [0.2, 'C'], [0.5, 'C']]
amounts = collections.defaultdict(float)
for amount, letter in lines:
    amounts[letter] += amount

for letter, amount in sorted(amounts.iteritems()):
    print amount, letter
</snippet></ROW><ROW><id>5941990</id><snippet>folder = "abc/def/ghi/jkl"

target = ""

for level in folder.split('/'):
    target += "{}/".format(level)
    imap.create(target)
</snippet></ROW><ROW><id>5942043</id><snippet>import heapq
import itertools
import operator


def increasing(fn, left, right):
    """
    Given two never decreasing iterators produce another iterator
    resulting from passing the value from left and right to fn.
    This iterator should also be never decreasing.
    """
    # Imagine an infinite 2D-grid.
    # Each column corresponds to an entry from right
    # Each row corresponds to an entry from left
    # Each cell correspond to apply fn to those two values

    # If the number of columns were finite, then we could easily solve
    # this problem by keeping track of our current position in each column
    # in each iteration, we'd take the smallest value report it, and then
    # move down in that column. This works because the values must increase
    # as we move down the column. That means the current set of values
    # under consideration must include the lowest value not yet reported

    # To extend this to infinite columns, at any point we always track a finite
    # number of columns. The last column current tracked is always in the top row
    # if it moves down from the top row, we add a new column which starts at the top row
    # because the values are increasing as we move to the right, we know that
    # this last column is always lower then any columns that come after it





    # Due to infinities, we need to keep track of all
    # items we've ever seen. So we put them in this list
    # The list contains the first part of the incoming iterators that
    # we have explored
    left_items = [next(left)]
    right_items = [next(right)]

    # we use a heap data structure, it allows us to efficiently
    # find the lowest of all value under consideration
    heap = []

    def add_value(left_index, right_index):
        """
        Add the value result from combining the indexed attributes
        from the two iterators. Assumes that the values have already
        been copied into the lists
        """
        value = fn( left_items[left_index], right_items[right_index] )
        # the value on the heap has the index and value.
        # since the value is first, low values will be "first" on the heap
        heapq.heappush( heap, (value, left_index, right_index) )

    # we know that every other value must be larger then 
    # this one. 
    add_value(0,0)

    # I assume the incoming iterators are infinite
    while True:
        # fetch the lowest of all values under consideration
        value, left_index, right_index = heapq.heappop(heap)

        # produce it
        yield value

        # add moving down the column
        if left_index + 1 == len(left_items):
            left_items.append(next(left))

        add_value(left_index+1, right_index)

        # if this was the first row in this column, add another column
        if left_index == 0:
            right_items.append( next(right) )
            add_value(0, right_index+1)






def fib():
    a = 1
    b = 1
    while True:
        yield a
        a,b = b,a+b



r = increasing(operator.add, fib(), itertools.count() )
for x in range(100):
    print next(r)
</snippet></ROW><ROW><id>5942290</id><snippet>from StringIO import StringIO
f = StringIO() 
thumb.save(f, ext) 
s.put(self.filename+ext, f.getvalue())
</snippet></ROW><ROW><id>5942637</id><snippet>my-sitebase.html
 |-- app-base.html
   |-- app-foo-template.html
</snippet></ROW><ROW><id>5942700</id><snippet>types.StringTypes</snippet></ROW><ROW><id>5942700</id><snippet>&gt;&gt;&gt; types.StringTypes
(&lt;type 'str'&gt;, &lt;type 'unicode'&gt;)
</snippet></ROW><ROW><id>5942700</id><snippet>isinstance(value, types.StringTypes) and len(value) &gt; 499</snippet></ROW><ROW><id>5942790</id><snippet>&lt;input type="checkbox" name="3b"&gt;</snippet></ROW><ROW><id>5942790</id><snippet>{..., '3a': u'on' '3c': u'on'}</snippet></ROW><ROW><id>5942790</id><snippet>&lt;input type="checkbox" name="3" value="b"&gt;</snippet></ROW><ROW><id>5942790</id><snippet>{..., '3': [u'a', u'c']}</snippet></ROW><ROW><id>5942916</id><snippet>f = open(filepath, 'r')
answer = {}
for line in f:
    k, v = line.strip().split('=')
    answer[k.strip()] = v.strip()

f.close()
</snippet></ROW><ROW><id>5942940</id><snippet>import sys
from PySide.QtCore import *
from PySide.QtGui import *
from PySide.QtWebKit import *

app = QApplication(sys.argv)

web = QWebView()
web.settings().setAttribute(
    QWebSettings.WebAttribute.DeveloperExtrasEnabled, True)
# or globally:
# QWebSettings.globalSettings().setAttribute(
#     QWebSettings.WebAttribute.DeveloperExtrasEnabled, True)

web.load(QUrl("http://www.google.com"))
web.show()

inspect = QWebInspector()
inspect.setPage(web.page())
inspect.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>5942998</id><snippet>cls</snippet></ROW><ROW><id>5942998</id><snippet>__new__</snippet></ROW><ROW><id>5942998</id><snippet>PluginMetaclass</snippet></ROW><ROW><id>5942998</id><snippet>super(PluginMetaclass, cls).__new__(..)</snippet></ROW><ROW><id>5942998</id><snippet>class PluginMetaclass(type):
    def __new__(cls, name, bases, attrs):
        print("Called metaclass: %r" % cls)
        print("Creating class with name: %r" % name)
        newclass = super(PluginMetaclass, cls).__new__(cls, name, bases, attrs)
        print("Registering class: %r" % newclass)
        registry.append((name, newclass))
        return newclass
</snippet></ROW><ROW><id>5942998</id><snippet>print()</snippet></ROW><ROW><id>5942998</id><snippet>&gt;&gt;&gt; registry = []
&gt;&gt;&gt;
&gt;&gt;&gt; class Plugin(metaclass=PluginMetaclass):
...     def __init__(self, stuff):
...         self.stuff = stuff
...
Called metaclass: &lt;class '__main__.PluginMetaclass'&gt;
Creating class with name: 'Plugin'
Registering class: &lt;class '__main__.Plugin'&gt;
&gt;&gt;&gt; class SpamPlugin(Plugin):
...     def __init__(self, stuff):
...         self.stuff = stuff
...
Called metaclass: &lt;class '__main__.PluginMetaclass'&gt;
Creating class with name: 'SpamPlugin'
Registering class: &lt;class '__main__.SpamPlugin'&gt;
&gt;&gt;&gt; class BaconPlugin(Plugin):
...     def __init__(self, stuff):
...         self.stuff = stuff
...
Called metaclass: &lt;class '__main__.PluginMetaclass'&gt;
Creating class with name: 'BaconPlugin'
Registering class: &lt;class '__main__.BaconPlugin'&gt;
&gt;&gt;&gt; c = SpamPlugin(0)
&gt;&gt;&gt; b = BaconPlugin(0)
&gt;&gt;&gt; mycls = registry[1][1]
&gt;&gt;&gt; d = mycls(0)
&gt;&gt;&gt; d
&lt;__main__.SpamPlugin object at 0x010478D0&gt;
&gt;&gt;&gt; registry
[('Plugin', &lt;class '__main__.Plugin'&gt;), 
('SpamPlugin', &lt;class '__main__.SpamPlugin'&gt;), 
('BaconPlugin', &lt;class '__main__.BaconPlugin'&gt;)]
</snippet></ROW><ROW><id>5942998</id><snippet>__init__</snippet></ROW><ROW><id>5942998</id><snippet>__new__</snippet></ROW><ROW><id>5942998</id><snippet>PluginMetaclass</snippet></ROW><ROW><id>5943293</id><snippet>settings.py</snippet></ROW><ROW><id>5943293</id><snippet>from django.core.management.base import BaseCommand
from django.core.cache import cache

class Command(BaseCommand):
    def handle(self, *args, **kwargs):
        cache.clear()
        self.stdout.write('Cleared cache\n')
</snippet></ROW><ROW><id>5943293</id><snippet>someapp/management/commands</snippet></ROW><ROW><id>5943293</id><snippet>utils</snippet></ROW><ROW><id>5943293</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>5943293</id><snippet>utils
├── __init__.py
└── management
    ├── __init__.py
    └── commands
        ├── __init__.py
        └── clearcache.py
</snippet></ROW><ROW><id>5943293</id><snippet>./manage.py clearcache</snippet></ROW><ROW><id>5943293</id><snippet>alias runserver='./manage.py clearcache &amp;&amp; ./manage.py runserver'
</snippet></ROW><ROW><id>5943293</id><snippet>from django.conf import settings

# obviously change CACHES to your settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake'
    }
}

settings.configure(CACHES=CACHES) # include any other settings you might need

from django.core.cache import cache
cache.clear()
</snippet></ROW><ROW><id>5943318</id><snippet>source = ['"D:\\Warlock"', 'C:\\Druid'</snippet></ROW><ROW><id>5943318</id><snippet>source = ['"D:\\Warlock"', 'C:\\Druid']</snippet></ROW><ROW><id>5943318</id><snippet>zip_commnad = "7z a -tzip {0} {1}" .format(target, ' '.join(source))
    print(zip_command)
</snippet></ROW><ROW><id>5943318</id><snippet>zip_command = "7z a -tzip {0} {1}" .format(target, ' '.join(source))
print(zip_command)
</snippet></ROW><ROW><id>5943381</id><snippet>SystemExit</snippet></ROW><ROW><id>5943381</id><snippet>.parse_args()</snippet></ROW><ROW><id>5943381</id><snippet>ArgumentError()</snippet></ROW><ROW><id>5943381</id><snippet>ArgumentError()</snippet></ROW><ROW><id>5943381</id><snippet>ArgumentError</snippet></ROW><ROW><id>5943381</id><snippet>ArgumentParser</snippet></ROW><ROW><id>5943381</id><snippet>import argparse
import sys

class ArgumentParser(argparse.ArgumentParser):    
    def _get_action_from_name(self, name):
        """Given a name, get the Action instance registered with this parser.
        If only it were made available in the ArgumentError object. It is 
        passed as it's first arg...
        """
        container = self._actions
        if name is None:
            return None
        for action in container:
            if '/'.join(action.option_strings) == name:
                return action
            elif action.metavar == name:
                return action
            elif action.dest == name:
                return action

    def error(self, message):
        exc = sys.exc_info()[1]
        if exc:
            exc.argument = self._get_action_from_name(exc.argument_name)
            raise exc
        super(ArgumentParser, self).error(message)

## usage:
parser = ArgumentParser()
parser.add_argument('--foo', type=int)
try:
    parser.parse_args(['--foo=d'])
except argparse.ArgumentError, exc:
    print exc.message, '\n', exc.argument
</snippet></ROW><ROW><id>5943442</id><snippet>__slots__</snippet></ROW><ROW><id>5943442</id><snippet>__dict__</snippet></ROW><ROW><id>5943442</id><snippet>a</snippet></ROW><ROW><id>5943442</id><snippet>b</snippet></ROW><ROW><id>5943442</id><snippet>class AB(object):
    __slots__ = ('a', 'b')
</snippet></ROW><ROW><id>5943442</id><snippet>obj.item</snippet></ROW><ROW><id>5943442</id><snippet>obj['item']</snippet></ROW><ROW><id>5943442</id><snippet>__getattr__</snippet></ROW><ROW><id>5943442</id><snippet>__setattr__</snippet></ROW><ROW><id>5943442</id><snippet>__getitem__</snippet></ROW><ROW><id>5943442</id><snippet>__setitem__</snippet></ROW><ROW><id>5943518</id><snippet>db.commit()</snippet></ROW><ROW><id>5943518</id><snippet>db.autocommit(True)</snippet></ROW><ROW><id>5943589</id><snippet>&gt;&gt;&gt; f = codecs.open('bar.txt', 'wt', encoding='utf8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\python27\lib\codecs.py", line 881, in open
    file = __builtin__.open(filename, mode, buffering)
ValueError: Invalid mode ('wtb')
</snippet></ROW><ROW><id>5943589</id><snippet>f = open('bar.text', 'w')
f.write(unicode_object.encode('utf8'))
</snippet></ROW><ROW><id>5943589</id><snippet>encoding</snippet></ROW><ROW><id>5943589</id><snippet>[Python 3.2 on Windows 7 Pro]
&gt;&gt;&gt; import codecs
&gt;&gt;&gt; f = codecs.open('bar.txt', 'w', encoding='utf8')
&gt;&gt;&gt; f.write('line1\nline2\n')
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; open('bar.txt', 'rb').read()
b'line1\nline2\n'
&gt;&gt;&gt; f = open('bar.txt', 'w', encoding='utf8')
&gt;&gt;&gt; f.write('line1\nline2\n')
12
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; open('bar.txt', 'rb').read()
b'line1\r\nline2\r\n'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5943589</id><snippet>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; f = codecs.open('fubar.txt', 'wt', encoding='utf8')
&gt;&gt;&gt; f.write(u'\u0a0aline1\n\xffline2\n')
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; open('fubar.txt', 'rb').read()
'\xe0\xa8\x8aline1\r\n\xc3\xbfline2\r\n' # "works"
&gt;&gt;&gt; f.mode
'wtb' # oops
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5943706</id><snippet>file://</snippet></ROW><ROW><id>5943706</id><snippet>webbrowser.open('file://' + os.path.realpath(filename))
</snippet></ROW><ROW><id>5943706</id><snippet>webbrowser.open</snippet></ROW><ROW><id>5943706</id><snippet>WindowsDefault</snippet></ROW><ROW><id>5943706</id><snippet>os.startfile()</snippet></ROW><ROW><id>5943706</id><snippet>False</snippet></ROW><ROW><id>5943706</id><snippet>GenericBrowser</snippet></ROW><ROW><id>5943706</id><snippet>BackgroundBrowser</snippet></ROW><ROW><id>5943706</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>5943706</id><snippet>True</snippet></ROW><ROW><id>5943706</id><snippet>GenericBrowser</snippet></ROW><ROW><id>5943706</id><snippet>BROWSER</snippet></ROW><ROW><id>5943706</id><snippet>WindowsDefault</snippet></ROW><ROW><id>5943706</id><snippet>BackgroundBrowser</snippet></ROW><ROW><id>5943706</id><snippet>&gt;&gt;&gt; import webbrowser
&gt;&gt;&gt; webbrowser._tryorder
['windows-default',
 'C:\\Program Files\\Internet Explorer\\IEXPLORE.EXE']
&gt;&gt;&gt; webbrowser._browsers.items()
[('windows-default', [&lt;class 'webbrowser.WindowsDefault'&gt;, None]),
 ('c:\\program files\\internet explorer\\iexplore.exe', [None, &lt;webbrowser.BackgroundBrowser object at 0x00000000022E3898&gt;])]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5943706</id><snippet>C:&gt;path=C:\Program Files (x86)\Mozilla Firefox;%path%

C:&gt;set BROWSER=C:\Users\Scott\AppData\Local\Google\Chrome\Application\chrome.exe

C:&gt;python
Python 2.7.1 (r271:86832, Nov 27 2010, 17:19:03) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import webbrowser
&gt;&gt;&gt; webbrowser._tryorder
['C:\\Users\\Scott\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe',
 'windows-default',
 'firefox',
 'C:\\Program Files\\Internet Explorer\\IEXPLORE.EXE']
&gt;&gt;&gt; webbrowser._browsers.items()
[('windows-default', [&lt;class 'webbrowser.WindowsDefault'&gt;, None]),
 ('c:\\program files\\internet explorer\\iexplore.exe',[None, &lt;webbrowser.BackgroundBrowser object at 0x000000000235E828&gt;]),
 ('firefox', [None, &lt;webbrowser.BackgroundBrowser object at 0x000000000235E780&gt;]),
 ('c:\\users\\scott\\appdata\\local\\google\\chrome\\application\\chrome.exe', [None, &lt;webbrowser.GenericBrowser object at 0x000000000235E8D0&gt;])]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5943706</id><snippet>webbrowser._tryorder</snippet></ROW><ROW><id>5943826</id><snippet>import os
my_output_file = os.readlink('/proc/%d/fd/1' % os.getpid())
</snippet></ROW><ROW><id>5943870</id><snippet>&gt;&gt;&gt; class Foo(object):
...     bar = 'Foo attribute'
...
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.bar
'Foo attribute'
&gt;&gt;&gt; Foo.bar
'Foo attribute'
&gt;&gt;&gt; f.bar = 'instance attribute'
&gt;&gt;&gt; f.bar
'instance attribute'
&gt;&gt;&gt; Foo.bar
'Foo attribute'
</snippet></ROW><ROW><id>5943870</id><snippet>__dict__</snippet></ROW><ROW><id>5943870</id><snippet>&gt;&gt;&gt; print Foo.__dict__
{'__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, '__weakref__': &lt;attribute
'__weakref__' of 'Foo' objects&gt;, '__module__': '__main__', 'bar': 'Foo attribute
', '__doc__': None}
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; print f.__dict__
{}
</snippet></ROW><ROW><id>5943870</id><snippet>f</snippet></ROW><ROW><id>5943870</id><snippet>f.bar</snippet></ROW><ROW><id>5943870</id><snippet>'bar'</snippet></ROW><ROW><id>5943870</id><snippet>f</snippet></ROW><ROW><id>5943870</id><snippet>Foo</snippet></ROW><ROW><id>5943870</id><snippet>'bar': 'Foo attribute'</snippet></ROW><ROW><id>5943870</id><snippet>&gt;&gt;&gt; f.bar
'Foo attribute'
</snippet></ROW><ROW><id>5943870</id><snippet>&gt;&gt;&gt; f.bar = 'instance attribute'
&gt;&gt;&gt; print f.__dict__
{'bar': 'instance attribute'}
&gt;&gt;&gt; f.bar
'instance attribute'
</snippet></ROW><ROW><id>5943870</id><snippet>f.bar</snippet></ROW><ROW><id>5943870</id><snippet>f.__dict__['bar']</snippet></ROW><ROW><id>5943870</id><snippet>Foo</snippet></ROW><ROW><id>5943870</id><snippet>&gt;&gt;&gt; Foo.bar
'Foo attribute'
&gt;&gt;&gt; Foo.__dict__['bar']
'Foo attribute'
</snippet></ROW><ROW><id>5944204</id><snippet>boost::python::api::object obj = ...;
long id = static_cast&lt;long&gt;(obj.ptr());
</snippet></ROW><ROW><id>5944204</id><snippet>id</snippet></ROW><ROW><id>5944204</id><snippet>static PyObject *
builtin_id(PyObject *self, PyObject *v)
{
    return PyLong_FromVoidPtr(v);
}
</snippet></ROW><ROW><id>5944224</id><snippet>Popen</snippet></ROW><ROW><id>5944224</id><snippet>/bin/sh</snippet></ROW><ROW><id>5944224</id><snippet>echo</snippet></ROW><ROW><id>5944224</id><snippet>$ echo -n -e '\x61' | md5sum
0cc175b9c0f1b6a831c399e269772661  -
</snippet></ROW><ROW><id>5944224</id><snippet>/bin/sh</snippet></ROW><ROW><id>5944224</id><snippet>$ echo -n -e '\x61' | md5sum
20b5b5ca564e98e1fadc00ebdc82ed63  -
</snippet></ROW><ROW><id>5944224</id><snippet>/bin/sh</snippet></ROW><ROW><id>5944224</id><snippet>-e</snippet></ROW><ROW><id>5944224</id><snippet>\x</snippet></ROW><ROW><id>5944224</id><snippet>/bin/sh</snippet></ROW><ROW><id>5944224</id><snippet>&gt;&gt;&gt; cmd = "echo -n -e '\\x61' | md5sum"
&gt;&gt;&gt; event = Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT)
&gt;&gt;&gt; print event.communicate()
('20b5b5ca564e98e1fadc00ebdc82ed63  -\n', None)
</snippet></ROW><ROW><id>5944670</id><snippet>exec()</snippet></ROW><ROW><id>5944670</id><snippet>ssh2_exec()</snippet></ROW><ROW><id>5944670</id><snippet>stream_get_context()</snippet></ROW><ROW><id>5944670</id><snippet>ssh2_connect</snippet></ROW><ROW><id>5944670</id><snippet>ssh2_auth_password</snippet></ROW><ROW><id>5944671</id><snippet>list</snippet></ROW><ROW><id>5944671</id><snippet>list.sort(key=lambda item: (item['points'], item['time']))
</snippet></ROW><ROW><id>5944723</id><snippet>int i;</snippet></ROW><ROW><id>5944723</id><snippet>int i = 0;</snippet></ROW><ROW><id>5944723</id><snippet>i = 0</snippet></ROW><ROW><id>5944723</id><snippet>for(i = 0; i &lt; argc; i++)</snippet></ROW><ROW><id>5944754</id><snippet>&gt;&gt;&gt;l = collections.deque(maxlen=5)
&gt;&gt;&gt;l.append('apple')
&gt;&gt;&gt;l.append('orange')
&gt;&gt;&gt;l.append('grape')
&gt;&gt;&gt;l.append('banana')
&gt;&gt;&gt;l.append('mango')
&gt;&gt;&gt;print(l)
deque(['apple','orange','grape','banana','mango'], maxlen=5)
&gt;&gt;&gt;l.append('kiwi')
&gt;&gt;&gt;print(l)
deque(['orange','grape','banana','mango','kiwi'], maxlen=5) #only 5 items in list
</snippet></ROW><ROW><id>5944770</id><snippet>query=Model.get_by_id(1)

if query is not None:
</snippet></ROW><ROW><id>5944770</id><snippet>query = MOdel.get(keys) #here keys is a list of keys

if len(query) == 1  will work now
</snippet></ROW><ROW><id>5944821</id><snippet>instance</snippet></ROW><ROW><id>5944821</id><snippet>MyDescriptor</snippet></ROW><ROW><id>5944821</id><snippet>class MyDescriptor(object):

    def __get__(self, instance, owner):
        return instance._value

    def __set__(self, instance, value):
        instance._value = value

    def __delete__(self, instance):
        del(instance._value)
</snippet></ROW><ROW><id>5944827</id><snippet>logging.exception(msg[, *args])</snippet></ROW><ROW><id>5944917</id><snippet>for lineno, line in enumerate(f, start=1):
</snippet></ROW><ROW><id>5944917</id><snippet>enumerate</snippet></ROW><ROW><id>5944917</id><snippet>def enumerate(iterable, start=0):
    for item in iterable:
        yield start, item
        start += 1
</snippet></ROW><ROW><id>5944944</id><snippet>subprocess</snippet></ROW><ROW><id>5945515</id><snippet>import collections
items = [['foo',1],['baz',1],['foo',0],['bar',3],['foo',1],['bar',2],['baz',2]]

totals = collections.defaultdict(int)
for key, value in items:
    totals[key] += value

print totals
</snippet></ROW><ROW><id>5945515</id><snippet>defaultdict(&lt;type 'int'&gt;, {'bar': 5, 'foo': 2, 'baz': 3})
</snippet></ROW><ROW><id>5945515</id><snippet>print totals.items()
</snippet></ROW><ROW><id>5945515</id><snippet>[('bar', 5), ('foo', 2), ('baz', 3)]
</snippet></ROW><ROW><id>5945515</id><snippet>print [list(item) for item in totals.items()]
</snippet></ROW><ROW><id>5945515</id><snippet>[['bar', 5], ['foo', 2], ['baz', 3]]
</snippet></ROW><ROW><id>5945536</id><snippet>a if x else b</snippet></ROW><ROW><id>5945536</id><snippet>x ? a : b</snippet></ROW><ROW><id>5945536</id><snippet>def fY(a, b):
    return [[aij/float(aij + bij) if aij+bij != 0 else 0 for aij, bij in zip(ai, bi)]
            for ai, bi in zip(a, b)]
</snippet></ROW><ROW><id>5945875</id><snippet>__doc__</snippet></ROW><ROW><id>5945875</id><snippet>_doc_</snippet></ROW><ROW><id>5945875</id><snippet>import re
print(re.__doc__)
</snippet></ROW><ROW><id>5946359</id><snippet>ds = [d1, d2]
d = {}
for k in d1.iterkeys():
    d[k] = tuple(d[k] for d in ds)
</snippet></ROW><ROW><id>5946388</id><snippet>pckA</snippet></ROW><ROW><id>5946388</id><snippet>distutils</snippet></ROW><ROW><id>5946388</id><snippet>packages=['pckA', 'pckB'],
</snippet></ROW><ROW><id>5946388</id><snippet>py_modules</snippet></ROW><ROW><id>5946616</id><snippet>datetime</snippet></ROW><ROW><id>5946616</id><snippet>pytz</snippet></ROW><ROW><id>5946616</id><snippet>&gt;&gt;&gt; import pytz as tz
&gt;&gt;&gt; CT = tz.timezone('America/Chicago')
&gt;&gt;&gt; from datetime import datetime as dt
&gt;&gt;&gt; indep_day = dt(2010, 7, 4, 0, 1, 1)
&gt;&gt;&gt; bar = CT.localize(indep_day)
&gt;&gt;&gt; bar.tzname()
'CDT'
&gt;&gt;&gt; christmas = dt(2010, 12, 25, 0, 1, 1)
&gt;&gt;&gt; foo = CT.localize(christmas)
&gt;&gt;&gt; foo.tzname()
'CST'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5946741</id><snippet>def some_inane_os_api(with, lots, of, arguments):
    ... your code ...
</snippet></ROW><ROW><id>5946741</id><snippet>def some_inane_os_api(with, lots, of, arguments):
    your_code(just, the, arguments, you need)

def your_code(...)
    ... your code ...
</snippet></ROW><ROW><id>5946741</id><snippet>your_code()</snippet></ROW><ROW><id>5946945</id><snippet>([01]\d|2[0-3])</snippet></ROW><ROW><id>5946945</id><snippet>(?: ... )</snippet></ROW><ROW><id>5946945</id><snippet>text = '10:67 12:12 01:50 23:60 23:50'
pattern = re.findall('(?:[01]\d|2[0-3]):[0-5]\d', text)
print pattern
</snippet></ROW><ROW><id>5946945</id><snippet>['12:12', '01:50', '23:50']
</snippet></ROW><ROW><id>5947170</id><snippet>accumulationList = []
for x in originalList:
    accumulationList.extend(doSomething(x))
return accumulationList
</snippet></ROW><ROW><id>5947170</id><snippet>return sum((doSomething(x) for x in originalList), [])
</snippet></ROW><ROW><id>5947170</id><snippet>return sum(map(doSomething, originalList), [])
</snippet></ROW><ROW><id>5947170</id><snippet>import itertools as it

return sum(it.imap(doSomething, originalList), [])
</snippet></ROW><ROW><id>5947398</id><snippet>&gt;&gt;&gt; def findItem(nested, pos):
    if pos[0] == 1:
        return nested[pos[1]-1]
    else:
        nextLevelDown = []
        for item in nested:
            if type(item) == type([]):
                nextLevelDown = nextLevelDown + item
        return findItem(nextLevelDown, [pos[0]-1, pos[1]])

&gt;&gt;&gt; findItem([[[1, 2], 3], 4], [3, 1])
1
&gt;&gt;&gt; findItem([[[1, 2], [3]], 4], [3, 3])
3
&gt;&gt;&gt; findItem([[[1, 2], [3]], 4], [2, 2])
[3]
</snippet></ROW><ROW><id>5947398</id><snippet>&gt;&gt;&gt; def recursiveRef(nested, idxList):
    if len(idxList) &gt; 1:
        return recursiveRef(nested[idxList[0]], idxList[1:])
    return nested[idxList[0]] 

&gt;&gt;&gt; recursiveRef([[[1, 2], 3], [4, [5, 6]], 7, [8, 9, 10]], [3, 1])
9
</snippet></ROW><ROW><id>5947563</id><snippet>XML_table.objects.filter(suid='2').values('pid').annotate(docs=Count('pid')).order_by()</snippet></ROW><ROW><id>5947720</id><snippet>t = DBSession.query(Tag.tid.distinct().label('tid')).subquery('t')
test = select([bmarks_tags.c.bmark_id], bmarks_tags.c.tag_id == t.c.tid)
return DBSession.execute(test)
</snippet></ROW><ROW><id>5947880</id><snippet>    if not "tom" in line:
</snippet></ROW><ROW><id>5947880</id><snippet>    if "tom" != line.strip():
</snippet></ROW><ROW><id>5948013</id><snippet>app.yaml</snippet></ROW><ROW><id>5948013</id><snippet>/cron</snippet></ROW><ROW><id>5948013</id><snippet>handlers:
- url: /cron
  script: assets/backup/main.py

- url: /
  static_files: assets/index.html
  upload: assets/index.html
</snippet></ROW><ROW><id>5948013</id><snippet>#!/usr/bin/env python  
# import logging
from google.appengine.ext import webapp
from google.appengine.api import mail
from google.appengine.ext.webapp.util import run_wsgi_app
from google.appengine.api import urlfetch

import logging

class CronMailer(webapp.RequestHandler):
    def get(self):
        logging.info("Backups: Started!")
        urlStr = "http://example.com/file.php"

        rpc = urlfetch.create_rpc()
        urlfetch.make_fetch_call(rpc, urlStr)
        mail.send_mail(sender="example@example.com",
            to="email@example.co.uk",
            subject="Backups complete!",
            body="Daily backups have been completed!")
        logging.info("Backups: Finished!")

application = webapp.WSGIApplication([('/cron', CronMailer)],debug=True)
def main():
    run_wsgi_app(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5948050</id><snippet>class UniqueDict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)

    def __setitem__(self, key, value):
        if key not in self:
            dict.__setitem__(self, key, value)
        else:
            raise KeyError("Key already exists")
</snippet></ROW><ROW><id>5948172</id><snippet>dict</snippet></ROW><ROW><id>5948172</id><snippet>UniqueDict</snippet></ROW><ROW><id>5948172</id><snippet>UniqueDict</snippet></ROW><ROW><id>5948172</id><snippet>dict</snippet></ROW><ROW><id>5948172</id><snippet>UniqueDict</snippet></ROW><ROW><id>5948172</id><snippet>dict</snippet></ROW><ROW><id>5948545</id><snippet>   appcfg.py vacuum_indexes .
</snippet></ROW><ROW><id>5948545</id><snippet>    indexed=False
</snippet></ROW><ROW><id>5948710</id><snippet>&gt;&gt;&gt; array = ['hello', 'hello2', '?hello', '?hello2']
&gt;&gt;&gt; filtered = filter(str.isalpha, array)
&gt;&gt;&gt; print filtered
['hello']
</snippet></ROW><ROW><id>5948710</id><snippet>&gt;&gt;&gt; filtered = [word for word in array if word.isalpha()]
&gt;&gt;&gt; print filtered
['hello']
</snippet></ROW><ROW><id>5948755</id><snippet>def B():
   for x in A():
     if x is None:
       yield
     else:
       break

   # continue, x contains value A yielded
</snippet></ROW><ROW><id>5949584</id><snippet>self.lblRoll1</snippet></ROW><ROW><id>5949584</id><snippet>panelControl</snippet></ROW><ROW><id>5949584</id><snippet>self.lblRoll1 = wx.StaticText(panelControl,label = "0")
</snippet></ROW><ROW><id>5949663</id><snippet>configure</snippet></ROW><ROW><id>5949663</id><snippet>self.progress = Label(...)
...
self.progress.configure(text="%s%% completed" % percent)
</snippet></ROW><ROW><id>5949663</id><snippet>admin</snippet></ROW><ROW><id>5949663</id><snippet>Admin</snippet></ROW><ROW><id>5949663</id><snippet>Admin.mainloop</snippet></ROW><ROW><id>5949663</id><snippet>update_idletasks</snippet></ROW><ROW><id>5949663</id><snippet>Label</snippet></ROW><ROW><id>5949663</id><snippet>Listbox</snippet></ROW><ROW><id>5949663</id><snippet>update_idletasks</snippet></ROW><ROW><id>5949663</id><snippet>update</snippet></ROW><ROW><id>5949663</id><snippet>update</snippet></ROW><ROW><id>5949663</id><snippet>after</snippet></ROW><ROW><id>5950455</id><snippet>t = Template("template.tmpl")
t.multiple = multiple
</snippet></ROW><ROW><id>5951187</id><snippet>from numpy import array
a = array( [2,3,4] )
</snippet></ROW><ROW><id>5951187</id><snippet>from numpy import array
a = array( [[2,3,4], [3,4,5]] )
</snippet></ROW><ROW><id>5951420</id><snippet>import subprocess
subprocess.Popen(["python.exe", 'C:/Dokumente und Einstellungen/schnei17/Desktop/python/zeit/1.py'])
subprocess.Popen(["python.exe", 'C:/Dokumente und Einstellungen/schnei17/Desktop/python/zeit/2.py'])
</snippet></ROW><ROW><id>5951692</id><snippet>pip install --upgrade</snippet></ROW><ROW><id>5951986</id><snippet>?param1=this&amp;param2=that</snippet></ROW><ROW><id>5951986</id><snippet>#param1=this&amp;param2=that</snippet></ROW><ROW><id>5951986</id><snippet>/this/that</snippet></ROW><ROW><id>5951986</id><snippet>/in;param1=this;param2=that/</snippet></ROW><ROW><id>5951986</id><snippet>?param1=this&amp;param2=that</snippet></ROW><ROW><id>5951986</id><snippet>param</snippet></ROW><ROW><id>5952060</id><snippet>import platform
print platform.linux_distribution()
</snippet></ROW><ROW><id>5952161</id><snippet>aBuf = bytes(f.read(4))</snippet></ROW><ROW><id>5952313</id><snippet>import string
import sys

def main():
    # get some stop words
    stopf = open('stop_words.txt', "r")
    stopwords = {}
    for s in stopf:
        stopwords[string.strip(s)] = 1

    file = open(sys.argv[1], "r")
    filedata = file.read()
    words=string.split(filedata)
    histogram = {}
    count = 0
    for word in words:
        word = string.strip(word, string.punctuation)
        word = string.lower(word)
        if word in stopwords:
            continue
        histogram[word] = histogram.get(word, 0) + 1
        count = (count+1) % 1000
        if count == 0:
            print '*',
    flist = []
    for word, count in histogram.items():
        flist.append([count, word])
    flist.sort()
    flist.reverse()
    for pair in flist[0:100]:
        print "%30s: %4d" % (pair[1], pair[0])

main()
</snippet></ROW><ROW><id>5952472</id><snippet>geopoint = {'latitude':41.123,'longitude':71.091}
print('{latitude} {longitude}'.format(**geopoint))
</snippet></ROW><ROW><id>5952976</id><snippet># A second-order decorator
def decdec(inner_dec):
    def ddmain(outer_dec):
        def decwrapper(f):
            wrapped = inner_dec(outer_dec(f))
            def fwrapper(*args, **kwargs):
               return wrapped(*args, **kwargs)
            return fwrapper
        return decwrapper
    return ddmain

def wrap(f):
    def wrapper():
        return " ".join(f())
    return wrapper


# Decorate upper (a decorator) with wrap (another decorator)
@decdec(wrap)
def upper(f):
    def uppercase(*args, **kargs):
        a,b = f(*args, **kargs)
        return a.upper(), b.upper()
    return uppercase

@upper
def hello():
    return "hello","world"

print hello()
</snippet></ROW><ROW><id>5953207</id><snippet>import threading

def hello_world():
        print 'Hello!'
        threading.Timer(2,hello_world).start()

if __name__ == "__main__":
    try:
        hello_world()
    except KeyboardInterrupt:
        print '\nGoodbye!'
    print "main thread exited"
</snippet></ROW><ROW><id>5953207</id><snippet>time.sleep</snippet></ROW><ROW><id>5953207</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>5953207</id><snippet>daemon</snippet></ROW><ROW><id>5953207</id><snippet>import threading
import time

def hello_world():
    while(True):
        print 'Hello!'
        time.sleep(2)

if __name__ == "__main__":
    hw_thread = threading.Thread(target = hello_world)
    hw_thread.daemon = True
    hw_thread.start()
    try:
        time.sleep(1000)
    except KeyboardInterrupt:
        print '\nGoodbye!'
</snippet></ROW><ROW><id>5953426</id><snippet>In [1]: import numpy as np

In [2]: K=np.random.normal(size=(2,2))

In [3]: eigenvalues, eigenvectors = np.linalg.eig(K)

In [4]: eigenvectors
Out[4]: 
array([[ 0.83022467+0.j        ,  0.83022467+0.j        ],
       [ 0.09133956+0.54989461j,  0.09133956-0.54989461j]])

In [5]: eigenvectors.shape
Out[5]: (2, 2)
</snippet></ROW><ROW><id>5953426</id><snippet>eigenvectors[:,0]</snippet></ROW><ROW><id>5953426</id><snippet>eigenvectors[:,1]</snippet></ROW><ROW><id>5953805</id><snippet>f = open(os.path.join(os.environ['USERPROFILE'], 'DESKTOP', my_filename))</snippet></ROW><ROW><id>5953898</id><snippet>help(nt)</snippet></ROW><ROW><id>5953898</id><snippet>nt</snippet></ROW><ROW><id>5953974</id><snippet>__new__</snippet></ROW><ROW><id>5953974</id><snippet>__init__</snippet></ROW><ROW><id>5953974</id><snippet>__new__</snippet></ROW><ROW><id>5953974</id><snippet>Triangle()</snippet></ROW><ROW><id>5953974</id><snippet>__new__</snippet></ROW><ROW><id>5953974</id><snippet>__init__</snippet></ROW><ROW><id>5953974</id><snippet>class Shape(object):
    def __new__(cls, desc):
        if cls is Shape:
            if desc == 'big':   return super(Shape, cls).__new__(Rectangle)
            if desc == 'small': return super(Shape, cls).__new__(Triangle)
        else:
            return super(Shape, cls).__new__(cls, desc)
</snippet></ROW><ROW><id>5953974</id><snippet>Rectangle</snippet></ROW><ROW><id>5953974</id><snippet>Triangle</snippet></ROW><ROW><id>5953974</id><snippet>__init__</snippet></ROW><ROW><id>5953974</id><snippet>__init__</snippet></ROW><ROW><id>5953995</id><snippet>open()</snippet></ROW><ROW><id>5953995</id><snippet>os.stat()</snippet></ROW><ROW><id>5953995</id><snippet>&gt;&gt;&gt; #create an empty file
&gt;&gt;&gt; f=open('testfile','w')
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; #open the empty file in read mode to prove that it doesn't raise IOError
&gt;&gt;&gt; f=open('testfile','r')
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; #get the size of the file
&gt;&gt;&gt; import os
&gt;&gt;&gt; import stat
&gt;&gt;&gt; os.stat('testfile')[stat.ST_SIZE]
0L
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5954161</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>5954161</id><snippet>get_close_matches</snippet></ROW><ROW><id>5954161</id><snippet>heapq</snippet></ROW><ROW><id>5954161</id><snippet>seqm = difflib.SequenceMatcher()

for i in arrayC:
  origC, cleanC, caccount, ccode = i
  seqm.set_seq2(cleanC)

  bestRatio = 0

  for j in arrayA:
    origA, cleanA = j[:2]
    seqm.set_seq1(cleanA)

    if (seqm.real_quick_ratio() &gt;= bestRatio and
        seqm.quick_ratio() &gt;= bestRatio):
      r = seqm.ratio()
      if r &gt;= bestRatio:
        bestRatio = r
        bestA = j

  if bestRatio &gt;= 0.75: # the cutoff from the original get_close_matches() call
    origA, cleanA, aaccount, acode = bestA

    filteredratio = bestRatio
    strfilteredratio = '%.2f' % (filteredratio*100)

    seqm.set_seqs( origC, origA )
    unfilteredratio = seqm.ratio()
    strunfilteredratio = '%.2f' % (unfilteredratio*100)

    averageratio = (filteredratio+unfilteredratio)/2
    straverageratio = '%.2f' % (averageratio*100)

    row = [origC.rstrip(),origA.rstrip(),cleanC.rstrip(),cleanA.rstrip(),caccount,ccode,aaccount,acode,strfilteredratio,strunfilteredratio,straverageratio]
  else:
    row = ["NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","0.00","NULL","NULL"]

  Match75.writerow(row)
</snippet></ROW><ROW><id>5954710</id><snippet>reEnti = re.compile('ent[iy]',re.IGNORECASE)
</snippet></ROW><ROW><id>5954747</id><snippet>np.newaxis</snippet></ROW><ROW><id>5954747</id><snippet>None</snippet></ROW><ROW><id>5954747</id><snippet>newaxis</snippet></ROW><ROW><id>5954747</id><snippet>import numpy as np
a = np.array([5,4])[np.newaxis]
print a
print a.T
</snippet></ROW><ROW><id>5954890</id><snippet>foo</snippet></ROW><ROW><id>5954890</id><snippet>foo.__dict__
</snippet></ROW><ROW><id>5954902</id><snippet>object</snippet></ROW><ROW><id>5954902</id><snippet>__dict__</snippet></ROW><ROW><id>5954902</id><snippet>__slots__</snippet></ROW><ROW><id>5955133</id><snippet>(b(oss))</snippet></ROW><ROW><id>5955133</id><snippet>dbus.Struct((dbus.Boolean(a_boolean),
             dbus.Struct((dbus.ObjectPath(s1),
                          dbus.String(s2),
                          dbus.String(s3)))),
            signature="(b(oss))")
</snippet></ROW><ROW><id>5955133</id><snippet>( a_boolean, (s1, s2, s3) )
</snippet></ROW><ROW><id>5955558</id><snippet>for x in L:
    ...
</snippet></ROW><ROW><id>5955558</id><snippet>x</snippet></ROW><ROW><id>5955558</id><snippet>% i</snippet></ROW><ROW><id>5955558</id><snippet>% s[i]</snippet></ROW><ROW><id>5955558</id><snippet>for index, element in enumerate(L):
    ...
</snippet></ROW><ROW><id>5955600</id><snippet>class RunMonitor(threading.Thread): 
    def __init__(self, quit_event):
        threading.Thread.__init__(self)
        self.quit_event = quit_event
    def run(self):     
        print 'Invoking the command prompt .....'     
        subprocess.call(["start", "/DC:\\Scripts", "scripts_to_execute.bat"], shell=True)
        self.quit_event.set()

def runscript(self):     
    print 'Complete_file_Path inside Run script is : ' , self.complete_file_path     
    file_operation.Generate_Bat_File(self.complete_file_path)      

    quit_event = threading.Event()
    run_monitor_object = RunMonitor(quit_event).start()

    while True:         
        if not quit_event.is_set():
             print 'The thread is still alive....'         
        else:
             print 'The Thread is not alive anymore'             
             self.run_button.setEnabled(True)             
             break 
</snippet></ROW><ROW><id>5955600</id><snippet>threading.Event()</snippet></ROW><ROW><id>5955600</id><snippet>.set()</snippet></ROW><ROW><id>5955600</id><snippet>threading.Queue()</snippet></ROW><ROW><id>5955600</id><snippet>subprocess.call</snippet></ROW><ROW><id>5955600</id><snippet>import threading
import subprocess
import time

class RunMonitor(threading.Thread): 
    def __init__(self, quit_event):
        threading.Thread.__init__(self)
        self.quit_event = quit_event
    def run(self):     
        print 'Invoking the command prompt .....\n'   
        subprocess.call(["start", "/WAIT", "/DC:\\python27\\sample", "xxx12.bat"], shell=True)                
        self.quit_event.set()

class Something:
    def runscript(self):     
        print 'Starting the thread...'  

        quit_event = threading.Event()
        run_monitor_object = RunMonitor(quit_event).start()

        while True:         
            if not quit_event.is_set():
                 print 'The thread is still alive....'         
            else:
                 print 'The Thread is not alive anymore'             
                 break 
            time.sleep(1)

runme = Something()
runme.runscript()
</snippet></ROW><ROW><id>5955600</id><snippet>echo wscript.sleep 2500 &gt; xxx12.vbs
start /wait xxx12.vbs
dir c:\
start /wait xxx12.vbs
dir c:\
start /wait xxx12.vbs
dir c:\
start /wait xxx12.vbs
dir c:\
start /wait xxx12.vbs
dir c:\
exit
</snippet></ROW><ROW><id>5955890</id><snippet>import  pygtk
import gtk
clipboard = gtk.clipboard_get()
print clipboard.wait_for_text()
</snippet></ROW><ROW><id>5955933</id><snippet>id_list = ['abc', 'def', 'ghi']
query_string = "delete from test where id in (%s)" % ','.join(['?'] * len(id_list))
cursor.execute(query_string, id_list)
</snippet></ROW><ROW><id>5956050</id><snippet>In [16]: a
Out[16]: array([1, 3])

In [17]: b
Out[17]: 
array([[1, 2],
       [3, 2],
       [4, 6],
       [2, 3]])

In [18]: np.array([np.dot(a,row) for row in b]).reshape(-1,2)
Out[18]: 
array([[ 7,  9],
       [22, 11]])
</snippet></ROW><ROW><id>5956302</id><snippet>visa</snippet></ROW><ROW><id>5956302</id><snippet>import drivers.visa
import pyVisa.visa
</snippet></ROW><ROW><id>5956302</id><snippet>as</snippet></ROW><ROW><id>5956302</id><snippet>from drivers import visa
from pyVisa import visa as pyvisa
</snippet></ROW><ROW><id>5956404</id><snippet>pdf.fonttype</snippet></ROW><ROW><id>5956404</id><snippet>~/matplotlib/matplotlibrc</snippet></ROW><ROW><id>5956404</id><snippet>pdf.fonttype : 42 # Output Type 3 (Type3) or Type 42 (TrueType)
</snippet></ROW><ROW><id>5956404</id><snippet>&gt;&gt;&gt; import matplotlib as mpl
&gt;&gt;&gt; mpl.rcParams['pdf.fonttype'] = 42
</snippet></ROW><ROW><id>5956641</id><snippet>lxml</snippet></ROW><ROW><id>5956641</id><snippet>//*[local-name()="item"]</snippet></ROW><ROW><id>5956641</id><snippet>item</snippet></ROW><ROW><id>5956641</id><snippet>&gt;&gt;&gt; import amara.bindery
&gt;&gt;&gt; doc = amara.bindery.parse(
...     '''&lt;iq xmlns="jabber:client" 
...          to="__anonymous__admin@localhost/8978528613056092673206"
...          from="conference.localhost" id="disco" type="result"&gt;
...          &lt;query xmlns="http://jabber.org/protocol/disco#items"&gt;
...            &lt;item jid="pgatt@conference.localhost" name="pgatt (1)"/&gt;
...            &lt;item jid="pgatt@conference.localhost" name="pgatt (1)"/&gt;
...          &lt;/query&gt;
...        &lt;/iq&gt;''')
&gt;&gt;&gt; for item in doc.iq.query.item:
...   print item.jid, item.name
...
pgatt@conference.localhost pgatt (1)
pgatt@conference.localhost pgatt (1)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5956671</id><snippet>save</snippet></ROW><ROW><id>5956671</id><snippet>def save(self, user):
    user.set_password(self.cleaned_data['password1'])
    user.save()

...


form.save(request.user)
</snippet></ROW><ROW><id>5956788</id><snippet>import</snippet></ROW><ROW><id>5956788</id><snippet>import</snippet></ROW><ROW><id>5956788</id><snippet>import numpy</snippet></ROW><ROW><id>5956788</id><snippet>numpy.dot</snippet></ROW><ROW><id>5956788</id><snippet>numpy.linalg.eig</snippet></ROW><ROW><id>5956788</id><snippet>from ... import *</snippet></ROW><ROW><id>5956788</id><snippet>from numpy import *</snippet></ROW><ROW><id>5956788</id><snippet>__all__</snippet></ROW><ROW><id>5956788</id><snippet>import</snippet></ROW><ROW><id>5956788</id><snippet>dot</snippet></ROW><ROW><id>5956788</id><snippet>linalg.eig</snippet></ROW><ROW><id>5956788</id><snippet>from numpy.linalg import *
from numpy.fft import *
from numpy.random import *
from numpy.ctypeslib import *
from numpy.ma import *
from numpy import *
</snippet></ROW><ROW><id>5956998</id><snippet>importer/__init__.py</snippet></ROW><ROW><id>5956998</id><snippet>from importer import *
asd = load('asd')
print asd.name
</snippet></ROW><ROW><id>5957300</id><snippet>pypm install httplib2</snippet></ROW><ROW><id>5957379</id><snippet>sub_list = [0] * 10
a_list = [sub_list] * 10
</snippet></ROW><ROW><id>5957379</id><snippet>sub_list</snippet></ROW><ROW><id>5957379</id><snippet>a_list</snippet></ROW><ROW><id>5957379</id><snippet>a_list = [[0] * 10] * 10
for n in a_list:
    print id(n)
</snippet></ROW><ROW><id>5957379</id><snippet>a_list = [[0] * 10 for _ in range(10)]
</snippet></ROW><ROW><id>5957379</id><snippet>a_list</snippet></ROW><ROW><id>5957555</id><snippet>[~]
|5&gt; x = np.array([(1.0, 4.0,), (2.0, -1.0)], dtype=[('f0', '&lt;f8'), ('f1', '&lt;f8')])

[~]
|6&gt; x.view(np.float64).reshape(x.shape + (-1,))
array([[ 1.,  4.],
       [ 2., -1.]])
</snippet></ROW><ROW><id>5957794</id><snippet>[i]</snippet></ROW><ROW><id>5957794</id><snippet>messages = []
for feedItem in feed['items']:
    message = {'title':..., ...}
    message['link'] = ...  # alternative
    messages += [message]   # or messages.append(data)

print(messages)
</snippet></ROW><ROW><id>5957794</id><snippet>def makeMessage(feedItem):
    message = {'title':..., ...}
    return message

messages = [makeMessage(fi) for fi in feed['items']]
print(messages)
</snippet></ROW><ROW><id>5957794</id><snippet>def makeMessages(feedItems):
    for item in feedItems:
        message = {'title':..., ...}
        yield message

messages = list( makeMessages(feed['items']) )
</snippet></ROW><ROW><id>5957794</id><snippet>class Message(object):
    def __init__(self, title, link, body):
        self.title = title
        self.link = link
        self.body = body

    def __str__(self):
        return ...
    def __repr__(self):
        return self.__str__()
</snippet></ROW><ROW><id>5957813</id><snippet>def indices(a, func):
    return [i for (i, val) in enumerate(a) if func(val)]

a = [1, 2, 3, 1, 2, 3, 1, 2, 3]

inds = indices(a, lambda x: x &gt; 2)

&gt;&gt;&gt; inds
[2, 5, 8]
</snippet></ROW><ROW><id>5957840</id><snippet>multiprocessing.forking</snippet></ROW><ROW><id>5957840</id><snippet>get_preparation_data</snippet></ROW><ROW><id>5957840</id><snippet>prepare</snippet></ROW><ROW><id>5957840</id><snippet>__main__</snippet></ROW><ROW><id>5957840</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>5957840</id><snippet>main()</snippet></ROW><ROW><id>5957840</id><snippet>if '__name__' == '__main__':
    from mainmodule import main
    main()
</snippet></ROW><ROW><id>5957840</id><snippet>import site</snippet></ROW><ROW><id>5957888</id><snippet>figure(self.figures[fig].number)
</snippet></ROW><ROW><id>5957889</id><snippet>def decorator(obj):
    old_func = obj.func # can't call 'by name' because of recursion

    def decorated_func(self):
        # do my stuff here
        old_func() # does not need pass obj
        # do some othere stuff here

    # here is the magic, this get the type of a 'normal method' of a class
    method = type(obj.func)

    # this bounds the method to the object, so self is passed by default 
    obj.func = method(decorated_func, obj)
</snippet></ROW><ROW><id>5957889</id><snippet>method()</snippet></ROW><ROW><id>5957889</id><snippet>method = type(obj.func)</snippet></ROW><ROW><id>5958152</id><snippet>0,182,283,388,470,579,757,
</snippet></ROW><ROW><id>5958152</id><snippet>['0', '182', '283', '388', '470', '579', '757', '']
</snippet></ROW><ROW><id>5958152</id><snippet>''</snippet></ROW><ROW><id>5958152</id><snippet>C1 = [float(i) for i in C if i]
</snippet></ROW><ROW><id>5958152</id><snippet>C = row[1].split(",")[1:-1]   # the slice will exclude first and last elements
</snippet></ROW><ROW><id>5958159</id><snippet>if email in email_list:
    # do something with email
elif domain in domain_list:
    # do something with domain
else:
    print "neither email nor domain found"
</snippet></ROW><ROW><id>5958477</id><snippet>from collections import defaultdict
summary = defaultdict( int )
for issue in Issues.objects.all():
    summary[issue.queue, issue.status] += 1
</snippet></ROW><ROW><id>5958477</id><snippet>summary</snippet></ROW><ROW><id>5958477</id><snippet>table = []
queues = list( q for q,_ in summary.keys() )
for q in sorted( queues ):
    table.append( q.id, q.name, summary.count(q,'open'), summary.count(q.'closed') )
</snippet></ROW><ROW><id>5958762</id><snippet>gtk.Menu</snippet></ROW><ROW><id>5958762</id><snippet>gtk.Menu</snippet></ROW><ROW><id>5958762</id><snippet>gtk.Widget</snippet></ROW><ROW><id>5958762</id><snippet>get_window</snippet></ROW><ROW><id>5958762</id><snippet>gtk.gdk.Window</snippet></ROW><ROW><id>5958762</id><snippet>get_frame_extents()</snippet></ROW><ROW><id>5958762</id><snippet>gtk.gdk.Rectangle</snippet></ROW><ROW><id>5958866</id><snippet>employment = dict(itertools.groupby(xtable_iterator),
                  lambda x: getattr(x, 'key_to_ytable', None))
employment.pop(None)
</snippet></ROW><ROW><id>5958960</id><snippet>collections</snippet></ROW><ROW><id>5958992</id><snippet>locals()</snippet></ROW><ROW><id>5958992</id><snippet>locals()</snippet></ROW><ROW><id>5958992</id><snippet>globals()</snippet></ROW><ROW><id>5958992</id><snippet>globals()</snippet></ROW><ROW><id>5959183</id><snippet>sys.argv</snippet></ROW><ROW><id>5959183</id><snippet>int()</snippet></ROW><ROW><id>5959183</id><snippet>float()</snippet></ROW><ROW><id>5959183</id><snippet>$ python myscript.py 1 foo bar baz
</snippet></ROW><ROW><id>5959183</id><snippet>sys.argv</snippet></ROW><ROW><id>5959183</id><snippet>["myscript.py", "1", "foo", "bar", "baz"]
</snippet></ROW><ROW><id>5959183</id><snippet>import sys
import csv

def SJtag(file,len_tag):
    reader = csv.reader(open(file), dialect='excel-tab' )
    for row in reader:
        qstarts = row[1].split(",")[1:-1] 
        n = len_tag/2
        for i in qstarts:  
            name = row[0]

            start = int(i)-n
            if start&lt;0:
                start = 0      

            end = int(i)+n
            if end&gt;len(row[2]):
                end=len(row[2])

            tag = row[2][start:end]    
            print name, i, tag, len(tag)

if __name__ == '__main__':
    SJtag(sys.argv[1], int(sys.argv[2]))
</snippet></ROW><ROW><id>5959480</id><snippet>class A(object):
    KEYWORD = 'Class A'

class B(A):
    KEYWORD = 'Class B'

class C(object):
    pass

def list_class_keywords():
    for name, obj in globals().items():
        print name, hasattr(obj, 'KEYWORD')

if __name__ == '__main__':
    list_class_keywords()    
</snippet></ROW><ROW><id>5959721</id><snippet>p locals()
p globals()
</snippet></ROW><ROW><id>5959764</id><snippet>s3cmd --configure</snippet></ROW><ROW><id>5959764</id><snippet>s3cmd mb s3://my-bucket</snippet></ROW><ROW><id>5959764</id><snippet>s3cmd sync /path/to/local/dir/ s3://my-bucket</snippet></ROW><ROW><id>5959856</id><snippet>safe</snippet></ROW><ROW><id>5959856</id><snippet>escape</snippet></ROW><ROW><id>5959856</id><snippet>&lt;iframe&gt;</snippet></ROW><ROW><id>5959856</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>5959856</id><snippet>safe</snippet></ROW><ROW><id>5959895</id><snippet>from Crypto.PublicKey import DSA
from Crypto.Util import asn1

key = DSA.generate(1024)

# export

seq = asn1.DerSequence()
seq[:] = [ 0, key.p, key.q, key.g, key.y, key.x ]

exported_key = "-----BEGIN DSA PRIVATE KEY-----\n%s-----END DSA PRIVATE KEY-----" % seq.encode().encode("base64")

print exported_key

# import

seq2 = asn1.DerSequence()
data = "\n".join(exported_key.strip().split("\n")[1:-1]).decode("base64")
seq2.decode(data)
p, q, g, y, x = seq2[1:]

key2 = DSA.construct((y, g, p, q, x))

assert key == key2
</snippet></ROW><ROW><id>5960002</id><snippet>Gdk.Color fuchsia;
if (!Gdk.Color.parse("fuchsia", out fuchsia))
    print("There was an error parsing, I must have spelled fuchsia wrong");
</snippet></ROW><ROW><id>5960271</id><snippet>pygame.py</snippet></ROW><ROW><id>5960271</id><snippet>pygame</snippet></ROW><ROW><id>5960271</id><snippet>import pygame</snippet></ROW><ROW><id>5960310</id><snippet>for (i=0; 1 &lt;= num; i++)
</snippet></ROW><ROW><id>5960310</id><snippet>for (i=0; i &lt;= num; i++)
</snippet></ROW><ROW><id>5960468</id><snippet>@abstractmethod</snippet></ROW><ROW><id>5960468</id><snippet>@property</snippet></ROW><ROW><id>5960468</id><snippet>@abstractproperty</snippet></ROW><ROW><id>5960468</id><snippet>from abc import ABCMeta, abstractmethod, abstractproperty

class Base(object):
    # ...
    @abstractproperty
    def name(self):
        pass
</snippet></ROW><ROW><id>5960580</id><snippet>.so</snippet></ROW><ROW><id>5960580</id><snippet>sys.path</snippet></ROW><ROW><id>5960580</id><snippet>/usr/share/python/site-lib</snippet></ROW><ROW><id>5960580</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5960580</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>5960580</id><snippet>DY</snippet></ROW><ROW><id>5960893</id><snippet>&gt;&gt;&gt; from urllib import pathname2url 
&gt;&gt;&gt; pathname2url('foo, bar.mp3')
'foo%2C%20bar.mp3'
</snippet></ROW><ROW><id>5961058</id><snippet>transformed()</snippet></ROW><ROW><id>5961280</id><snippet>class MyParser(optparse.OptionParser):
    def format_epilog(self, formatter):
        return self.epilog
</snippet></ROW><ROW><id>5961360</id><snippet>class Wrapper:
    def wrap(self, obj):
        self.obj = obj
    def __getattr__(self, name):
        return getattr(self.obj, name)

a = list()
b = Wrapper()
b.wrap(a)

b.append(10)
</snippet></ROW><ROW><id>5961539</id><snippet>struct.pack_into("=III", buf, 0, 1, 2, 3)
</snippet></ROW><ROW><id>5961539</id><snippet>01000000020000000300000000000000
</snippet></ROW><ROW><id>5961925</id><snippet>while</snippet></ROW><ROW><id>5961925</id><snippet>while True:
    fileName = raw_input("Enter name of file: ")
    try:
        # more code here to detect or open the file
        break
    except Exception:  # can be IOError or something else
        print ("error msg")

while True:
    try:
        integer = int(raw_input("Enter an integer: "))
        integer2 = int(raw_input("Enter an integer: "))
        break
    except (TypeError, ValueError):
        print ("error msg")

# more code
</snippet></ROW><ROW><id>5962081</id><snippet>def is_water_dwelling(animal):
    return animal in ('frog', 'fish')


def is_land_dwelling(animal):
    return animal in ('frog', 'human', 'giraffe')

animals = ('human', 'frog', 'fish', 'giraffe')

land_dwelling = (x for x in animals if is_land_dwelling(x))
water_dwelling = (x for x in animals if is_water_dwelling(x))

print list(land_dwelling)
print list(water_dwelling)
</snippet></ROW><ROW><id>5962081</id><snippet>land_dwelling</snippet></ROW><ROW><id>5962081</id><snippet>water_dwelling</snippet></ROW><ROW><id>5962081</id><snippet>kinds = {'water': is_water_dwelling, 'land': is_land_dwelling, 'air': is_flying}
result = {}

for kind, classifier in kinds.iteritems():
  result[kind] = [x for x in animals if classifier(x)]

# If you just want to go over animals once, you can do this instead:
from collections import defaultdict
result = defaultdict(list)

for x in animals:
  for kind, classifier in kinds.iteritems():
    if classifier(x):
      result[kind].append(x)
</snippet></ROW><ROW><id>5962293</id><snippet>OSError</snippet></ROW><ROW><id>5962293</id><snippet>ignore_errors=True</snippet></ROW><ROW><id>5962293</id><snippet>onerror</snippet></ROW><ROW><id>5962337</id><snippet>if self.run_timer:
    run_monitor_object = RunMonitor()
    print 'Starting the thread...........'
    run_monitor_object.start()
    self.run_timer = False

if run_monitor_object.isAlive():
    print 'Thread Alive...'
else:
    print 'Thread is Dead....'
</snippet></ROW><ROW><id>5962337</id><snippet>self.run_timer</snippet></ROW><ROW><id>5962337</id><snippet>run_monitor_object</snippet></ROW><ROW><id>5962337</id><snippet>if</snippet></ROW><ROW><id>5962337</id><snippet>run_monitor_thread</snippet></ROW><ROW><id>5962600</id><snippet>from collections import deque

class fringe(object):
    def __init__(self, kind= 'stack'):
        f= deque()
        self._p= f.append if kind is 'stack' else f.appendleft
        self._f= f

    def __call__(self, item):
        self._p(item)
        return self

    def __iter__(self):
        while len(self._f):
            item= self._f.pop()
            yield item

    def __repr__(self):
        return self._f.__repr__().replace('deque', 'fringe')

def paths(G, start, terminal, F= fringe()):
    for node, path in F((start, [start])):
        for node in G[node]:
            if node is terminal:
                yield path+ [terminal]
            elif node not in path:
                F((node, path+ [node]))
</snippet></ROW><ROW><id>5962600</id><snippet>if __name__ == '__main__':
    a, b, c, d, e, f= 'A', 'B', 'C', 'D', 'E', 'F'
    G= {a: [b, c], b: [c, d], c: [d], d: [c], e: [f], f: [c]}
    print 'All paths from:', a, 'to:', d
    print 'BFS'
    for path in paths(G, a, d): print path
    print 'DFS'
    for path in paths(G, a, d, fringe('queue')): print path
</snippet></ROW><ROW><id>5962600</id><snippet>All paths from: A to: D
BFS
['A', 'C', 'D']
['A', 'B', 'D']
['A', 'B', 'C', 'D']
DFS
['A', 'B', 'D']
['A', 'C', 'D']
['A', 'B', 'C', 'D']
</snippet></ROW><ROW><id>5963020</id><snippet>callback</snippet></ROW><ROW><id>5963020</id><snippet>OptionParser</snippet></ROW><ROW><id>5963435</id><snippet>step_1</snippet></ROW><ROW><id>5963435</id><snippet>step_2</snippet></ROW><ROW><id>5963435</id><snippet>class main_frame(wx.Frame):
    """Main Frame holding the main panel."""
    def __init__(self,*args,**kwargs):
        wx.Frame.__init__(self,*args,**kwargs)
        p = wx.Panel(self)

        stp1 = step_1(p) 
        stp2 = step_2(p) 

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(stp1, 0, border = 5)
        sizer.Add(stp2, 0, border = 5)
        p.SetSizerAndFit(sizer)
        self.Show()
</snippet></ROW><ROW><id>5963504</id><snippet>&gt;&gt;&gt; s =  "110202 132721"
&gt;&gt;&gt; print time.mktime(time.strptime(s, "%y%m%d %H%M%S"))
1296653241.0
</snippet></ROW><ROW><id>5963680</id><snippet>print</snippet></ROW><ROW><id>5963680</id><snippet>sys.stdout</snippet></ROW><ROW><id>5963690</id><snippet>temp = self.largeArray = zeros((1000,1000,10,20))
for y in temp.size:
    for x in temp1.size:
        self.largeArray[x,y] = train()
</snippet></ROW><ROW><id>5963690</id><snippet>temp.size</snippet></ROW><ROW><id>5963690</id><snippet>largeArray[x,y]</snippet></ROW><ROW><id>5963773</id><snippet>inspect.ismethod()</snippet></ROW><ROW><id>5963773</id><snippet>list</snippet></ROW><ROW><id>5963773</id><snippet>False</snippet></ROW><ROW><id>5964076</id><snippet>import time
from datetime import date, timedelta

t=time.strptime('20110531','%Y%m%d')
newdate=date(t.tm_year,t.tm_mon,t.tm_mday)+timedelta(1)
print newdate.strftime('%Y%m%d')
</snippet></ROW><ROW><id>5965088</id><snippet>def file_len(fname):
    with open(fname) as f:
        for line in f:
            if line.strip() == "{A   B}":
                break
        return sum(1 for line in f)
</snippet></ROW><ROW><id>5965227</id><snippet>[user@machine]$ lsof | grep --color -i "testing.txt"
python26  26495    user    8w      REG               8,33     23474     671920 /home/user/temp/testing.txt (deleted)
</snippet></ROW><ROW><id>5965227</id><snippet>stat = os.fstat(fs.fileno())
</snippet></ROW><ROW><id>5965227</id><snippet>if stat.st_nlink &lt; 1:
    #has been deleted
</snippet></ROW><ROW><id>5965472</id><snippet>In [101]: ts = calendar.timegm(datetime(2010, 7, 1, tzinfo=pytz.utc).timetuple())

In [102]: datetime.fromtimestamp(ts, tz=pytz.utc)
Out[102]: datetime.datetime(2010, 7, 1, 0, 0, tzinfo=&lt;UTC&gt;)
</snippet></ROW><ROW><id>5965753</id><snippet>MemoryError</snippet></ROW><ROW><id>5965753</id><snippet>ValueError</snippet></ROW><ROW><id>5965753</id><snippet>&gt;&gt;&gt; a = numpy.arange(500000000)
&gt;&gt;&gt; numpy.hstack((a, a))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/pymodules/python2.6/numpy/core/shape_base.py", line 258, in hstack
    return _nx.concatenate(map(atleast_1d,tup),1)
ValueError: array is too big.
</snippet></ROW><ROW><id>5965938</id><snippet>properties = {'children' : relationship('DataType', backref=backref(obj, cascade="all,delete"))}
</snippet></ROW><ROW><id>5965938</id><snippet>properties = {'children' : relationship(DataType, backref=backref(obj, cascade="all,delete"))}
</snippet></ROW><ROW><id>5966088</id><snippet>scipy.integrate.quad</snippet></ROW><ROW><id>5966088</id><snippet>import scipy
from scipy.integrate import quad

def complex_quadrature(func, a, b, **kwargs):
    def real_func(x):
        return scipy.real(func(x))
    def imag_func(x):
        return scipy.imag(func(x))
    real_integral = quad(real_func, a, b, **kwargs)
    imag_integral = quad(imag_func, a, b, **kwargs)
    return (real_integral[0] + 1j*imag_integral[0], real_integral[1:], imag_integral[1:])
</snippet></ROW><ROW><id>5966088</id><snippet>&gt;&gt;&gt; complex_quadrature(lambda x: (scipy.exp(1j*x)), 0,scipy.pi/2)
((0.99999999999999989+0.99999999999999989j),
 (1.1102230246251564e-14,),
 (1.1102230246251564e-14,))
</snippet></ROW><ROW><id>5966088</id><snippet>import scipy
from scipy import array

def quad_routine(func, a, b, x_list, w_list):
    c_1 = (b-a)/2.0
    c_2 = (b+a)/2.0
    eval_points = map(lambda x: c_1*x+c_2, x_list)
    func_evals = map(func, eval_points)
    return c_1 * sum(array(func_evals) * array(w_list))

def quad_gauss_7(func, a, b):
    x_gauss = [-0.949107912342759, -0.741531185599394, -0.405845151377397, 0, 0.405845151377397, 0.741531185599394, 0.949107912342759]
    w_gauss = array([0.129484966168870, 0.279705391489277, 0.381830050505119, 0.417959183673469, 0.381830050505119, 0.279705391489277,0.129484966168870])
    return quad_routine(func,a,b,x_gauss, w_gauss)

def quad_kronrod_15(func, a, b):
    x_kr = [-0.991455371120813,-0.949107912342759, -0.864864423359769, -0.741531185599394, -0.586087235467691,-0.405845151377397, -0.207784955007898, 0.0, 0.207784955007898,0.405845151377397, 0.586087235467691, 0.741531185599394, 0.864864423359769, 0.949107912342759, 0.991455371120813]
    w_kr = [0.022935322010529, 0.063092092629979, 0.104790010322250, 0.140653259715525, 0.169004726639267, 0.190350578064785, 0.204432940075298, 0.209482141084728, 0.204432940075298, 0.190350578064785, 0.169004726639267, 0.140653259715525,  0.104790010322250, 0.063092092629979, 0.022935322010529]
    return quad_routine(func,a,b,x_kr, w_kr)

class Memoize(object):
    def __init__(self, func):
        self.func = func
        self.eval_points = {}
    def __call__(self, *args):
        if args not in self.eval_points:
            self.eval_points[args] = self.func(*args)
        return self.eval_points[args]

def quad(func,a,b):
    ''' Output is the 15 point estimate; and the estimated error '''
    func = Memoize(func) #  Memoize function to skip repeated function calls.
    g7 = quad_gauss_7(func,a,b)
    k15 = quad_kronrod_15(func,a,b)
    # I don't have much faith in this error estimate taken from wikipedia
    # without incorporating how it should scale with changing limits
    return [k15, (200*scipy.absolute(g7-k15))**1.5]
</snippet></ROW><ROW><id>5966088</id><snippet>&gt;&gt;&gt; quad(lambda x: scipy.exp(1j*x), 0,scipy.pi/2.0)
[(0.99999999999999711+0.99999999999999689j), 9.6120083407040365e-19]
</snippet></ROW><ROW><id>5966088</id><snippet>(a-b)/2</snippet></ROW><ROW><id>5966200</id><snippet>static</snippet></ROW><ROW><id>5966200</id><snippet>media</snippet></ROW><ROW><id>5966200</id><snippet>static</snippet></ROW><ROW><id>5966200</id><snippet>&lt;link rel="stylesheet" src="{{ STATIC_URL }}name_of_your_skin/css/style.css" /&gt;
</snippet></ROW><ROW><id>5966200</id><snippet>&lt;link rel="stylesheet" src="{{ STATIC_URL }}{{ skin_name }}/css/style.css" /&gt;
</snippet></ROW><ROW><id>5966240</id><snippet>socket</snippet></ROW><ROW><id>5966470</id><snippet>ungroup = lambda expr : TokenConverter(expr).setParseAction(lambda t:t[0])
eg = ungroup(Suppress('-') + quotedString.setParseAction( removeQuotes ))
</snippet></ROW><ROW><id>5966470</id><snippet>['ali', 'baba', 'holy cow', 'smoking beaute']
- in: ['baba', 'smoking beaute']
- out: ['ali', 'holy cow']
</snippet></ROW><ROW><id>5966785</id><snippet>__setattribute__</snippet></ROW><ROW><id>5966785</id><snippet>__getattribute__</snippet></ROW><ROW><id>5966785</id><snippet>subchild = root.find('child/subchild')
</snippet></ROW><ROW><id>5966825</id><snippet>pickle</snippet></ROW><ROW><id>5966825</id><snippet>gzip</snippet></ROW><ROW><id>5966825</id><snippet>import gzip, pickle

output = gzip.open('pickled.gz', 'wb', compresslevel=9)

for x in range(10):
     output.write(pickle.dumps(range(10)) + '\n\n')
output.close()
</snippet></ROW><ROW><id>5966825</id><snippet>def unpickler(input):
    partial = []
    for line in input:
        partial.append(line)
        if line == '\n':
            obj = ''.join(partial)
            partial = []
            yield pickle.loads(obj)

input = gzip.open('pickled.gz', 'rb')
for l in unpickler(input):
    print l

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>5967150</id><snippet>q = SomeModel.objects.filter(pk__in=ids)
</snippet></ROW><ROW><id>5967150</id><snippet>print</snippet></ROW><ROW><id>5967150</id><snippet>m = q.get(pk=ids[0])
</snippet></ROW><ROW><id>5967150</id><snippet>AND</snippet></ROW><ROW><id>5967150</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; l = logging.getLogger('django.db.backends')
&gt;&gt;&gt; l.setLevel(logging.DEBUG)
&gt;&gt;&gt; l.addHandler(logging.StreamHandler())
</snippet></ROW><ROW><id>5967150</id><snippet>(0.013) SELECT "someapp_somemodel"."id", "someapp_somemodel"."question", "someapp_somemodel"."pub_date" FROM "someapp_somemodel" WHERE ("someapp_somemodel"."id" IN (0, 1) AND "someapp_somemodel"."id" = 0 ); args=(0, 1, 0)
</snippet></ROW><ROW><id>5967150</id><snippet>get</snippet></ROW><ROW><id>5967150</id><snippet>filter</snippet></ROW><ROW><id>5967329</id><snippet>list_filter</snippet></ROW><ROW><id>5967329</id><snippet>ModelAdmin</snippet></ROW><ROW><id>5967329</id><snippet>change_view</snippet></ROW><ROW><id>5967329</id><snippet>ModelAdmin</snippet></ROW><ROW><id>5967329</id><snippet>extra_context</snippet></ROW><ROW><id>5967329</id><snippet>extra_context</snippet></ROW><ROW><id>5967539</id><snippet>import re

def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''
    return [ atoi(c) for c in re.split('(\d+)', text) ]

alist=[
    "something1",
    "something12",
    "something17",
    "something2",
    "something25",
    "something29"]

alist.sort(key=natural_keys)
print(alist)
</snippet></ROW><ROW><id>5967539</id><snippet>['something1', 'something2', 'something12', 'something17', 'something25', 'something29']
</snippet></ROW><ROW><id>5968114</id><snippet>imp module</snippet></ROW><ROW><id>5968114</id><snippet>string</snippet></ROW><ROW><id>5968114</id><snippet>import imp

def user_import(name, path):
    mod_file, mod_path, mod_desc = imp.find_module(name, [path])
    return imp.load_module(name, mod_file, mod_path, mod_desc)

# load the real 'string' module
import string
print string.digits

# load the user 'string' module which lives under the path './foo'
mod = user_import('string', './foo')
print mod.digits
</snippet></ROW><ROW><id>5968114</id><snippet>0123456789
thesearenotdigits
</snippet></ROW><ROW><id>5968194</id><snippet>tag_add(i, '1.0', 'end')
</snippet></ROW><ROW><id>5968194</id><snippet>.start()</snippet></ROW><ROW><id>5968194</id><snippet>.stop()</snippet></ROW><ROW><id>5968851</id><snippet>#! /usr/bin/python
# -*- coding: utf-8 -*-

import Image
import ImageDraw
import ImageFont

ttfont = ImageFont.truetype ('/usr/share/fonts/truetype/wqy/wqy-microhei.ttc', 20)
text = u'我能有乾酪？'
image = Image.new ('RGB', (256, 128), 0xffffff);
ImageDraw.Draw (image).text ( (20, 20), text, font = ttfont, fill = (0, 0, 0) )
image.save ('chinese.jpg')
</snippet></ROW><ROW><id>5969189</id><snippet>for node in (n for n in nodelist if condition):
    node.x += 1
</snippet></ROW><ROW><id>5969197</id><snippet>
ant -DseleniumArgs="-trustAllSSLCertificates" launch-remote-control
</snippet></ROW><ROW><id>5969197</id><snippet>trustAllSSLCertificates</snippet></ROW><ROW><id>5969242</id><snippet>str</snippet></ROW><ROW><id>5969242</id><snippet>unicode</snippet></ROW><ROW><id>5969242</id><snippet>bytearray</snippet></ROW><ROW><id>5969242</id><snippet>encoding</snippet></ROW><ROW><id>5969242</id><snippet>unicode</snippet></ROW><ROW><id>5969449</id><snippet>[(u'deedle',)]
[(u'deedle', None)]</snippet></ROW><ROW><id>5969463</id><snippet>write</snippet></ROW><ROW><id>5969463</id><snippet>datafile.seek(0)
</snippet></ROW><ROW><id>5969463</id><snippet>read()</snippet></ROW><ROW><id>5969474</id><snippet>def matchStr(ipadr = '10.20.30.40', matchIP = '10.20.'):
    return ipadr.startswith(matchIP)
</snippet></ROW><ROW><id>5969930</id><snippet>vars</snippet></ROW><ROW><id>5969930</id><snippet>an = Animal()
attrs = vars(an)
# {'kids': 0, 'name': 'Dog', 'color': 'Spotted', 'age': 10, 'legs': 2, 'smell': 'Alot'}
# now dump this in some way or another
print ', '.join("%s: %s" % item for item in attrs.items())
</snippet></ROW><ROW><id>5970436</id><snippet>zip</snippet></ROW><ROW><id>5970436</id><snippet>&gt;&gt;&gt; A = ['a1', 'a2', 'a3', 'a4']
&gt;&gt;&gt; B = ['b1', 'b2', 'b3']
&gt;&gt;&gt; zip(A[:3], B, A[1:])
[('a1', 'b1', 'a2'), ('a2', 'b2', 'a3'), ('a3', 'b3', 'a4')]
&gt;&gt;&gt; for a, b, c in zip(A[:3], B, A[1:]):
...     print a + '+' + b + '   ' + c
... 
a1+b1   a2
a2+b2   a3
a3+b3   a4
</snippet></ROW><ROW><id>5971540</id><snippet>import socket

def mysend(sock, msg):
    totalsent = 0
    while totalsent &lt; MSGLEN:
        sent = sock.send(msg[totalsent:])
        if sent == 0:
            raise RuntimeError("socket connection broken")
        totalsent = totalsent + sent

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.connect(("where ever you have your other computer", "port number"))

i = 2
mysend(s, str(i))
</snippet></ROW><ROW><id>5971786</id><snippet>import wmi
c = wmi.WMI ()

for process in c.Win32_Process ():
    print process.ProcessId, process.Name
</snippet></ROW><ROW><id>5971850</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>5971850</id><snippet>import re
from markdown import Markdown
from markdown.inlinepatterns import ImagePattern, IMAGE_LINK_RE

RE_REMOTEIMG = re.compile('^(http|https):.+')

class CheckImagePattern(ImagePattern):

    def handleMatch(self, m):
        node = ImagePattern.handleMatch(self, m)
        # check 'src' to ensure it is local
        src = node.attrib.get('src')
        if src and RE_REMOTEIMG.match(src):
            print 'ILLEGAL:', m.group(9)
            # or alternately you could raise an error immediately
            # raise ValueError("illegal remote url: %s" % m.group(9))
        return node

DATA = '''
![Alt text](/path/to/img.jpg)
![Alt text](http://remote.com/path/to/img.jpg)
'''

mk = Markdown()
# patch in the customized image pattern matcher with url checking
mk.inlinePatterns['image_link'] = CheckImagePattern(IMAGE_LINK_RE, mk)
result = mk.convert(DATA)
print result
</snippet></ROW><ROW><id>5971850</id><snippet>ILLEGAL: http://remote.com/path/to/img.jpg
&lt;p&gt;&lt;img alt="Alt text" src="/path/to/img.jpg" /&gt;
&lt;img alt="Alt text" src="http://remote.com/path/to/img.jpg" /&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>5972218</id><snippet>os.kill()
</snippet></ROW><ROW><id>5972229</id><snippet>def draw(angle, length, horiz_pos):

if speed() != 0: return True
clear()
forward(horiz_pos)
setheading(angle + pi)
pensize(max(round(length), 1))
pendown()
forward(length * 25)
penup()
dot(length * 10)
home()
update()
</snippet></ROW><ROW><id>5972229</id><snippet>acc = 1
while total_time &lt; 30.0:
    total_time += time_step
    speed_horiz += accel_constant * time_step
    speed += ngol * sin(angle) * time_step
    pos += speed_horiz * time_step
    angle += speed * time_step
    if draw(angle, length, pos): break
    sleep(time_step)
</snippet></ROW><ROW><id>5972439</id><snippet>r'((((2)([0-3]))|(([0-1])([0-9])))([0-5])([0-9]))'</snippet></ROW><ROW><id>5972439</id><snippet>r'(2[0-3]|[01][0-9])[0-5][0-9]</snippet></ROW><ROW><id>5972439</id><snippet>r'(?:2[0-3]|[01][0-9])[0-5][0-9]'</snippet></ROW><ROW><id>5972439</id><snippet>\b</snippet></ROW><ROW><id>5972439</id><snippet>import re
searcher = re.compile(r'\b(?:2[0-3]|[01][0-9])[0-5][0-9]\b').search
with open(filename) as text:
        for line in text:
            m = searcher(line)
            if m:
                do_something_1(line, m)
            if line.startswith("BREAK"): # equivalent to your code; is that what you really mean??
                break
        for line in text:
            m = searcher(line)
            if m:
                do_something_2(line, m)
            if line.startswith("STOP"): # equivalent to your code; is that what you really mean??
                break   
</snippet></ROW><ROW><id>5972466</id><snippet>from django.contrib.sessions.models import Session
Session.Meta.db_table = 'my_session'
</snippet></ROW><ROW><id>5972466</id><snippet>from django.contrib.sessions.models import Session
Session._meta.db_table = "my_session"
</snippet></ROW><ROW><id>5972505</id><snippet>__getstate__</snippet></ROW><ROW><id>5972505</id><snippet>class Whatever(object):

  def __getstate__(self):
    state = self.__dict__.copy()
    del state['view']
    return state
</snippet></ROW><ROW><id>5972556</id><snippet>total</snippet></ROW><ROW><id>5972556</id><snippet>extra</snippet></ROW><ROW><id>5972556</id><snippet>Rating.objects.extra(select={'total': "upvotes - downvotes"}).order_by('-total')
</snippet></ROW><ROW><id>5972614</id><snippet>truncate table staging;

start transaction;

load data infile 'your_data.dat' 
into table staging
fields terminated by ',' optionally enclosed by '"'
lines terminated by '\n'
(
org_name
...
)
set
org_name = nullif(org_name,'');

commit;

drop procedure if exists process_staging_data;

delimiter #

create procedure process_staging_data()
begin

    insert ignore into organisations (org_name) select distinct org_name from staging;

    update...

    etc.. 

    -- or use a cursor if you have to ??

end#

delimiter ;

call  process_staging_data();
</snippet></ROW><ROW><id>5972692</id><snippet>&lt;python dir&gt;\Lib\site-packages\PySide\plugins\imageformats</snippet></ROW><ROW><id>5972692</id><snippet>[Paths]
Prefix = C:/Python27/lib/site-packages/PySide
Binaries = .
Plugins = plugins
Translation = translation
</snippet></ROW><ROW><id>5972692</id><snippet>C:/Python27/lib/site-packages/PySide</snippet></ROW><ROW><id>5972829</id><snippet>e</snippet></ROW><ROW><id>5972829</id><snippet>for</snippet></ROW><ROW><id>5972829</id><snippet>cont[0]</snippet></ROW><ROW><id>5972829</id><snippet>e == 'e=1'</snippet></ROW><ROW><id>5972829</id><snippet>exec e</snippet></ROW><ROW><id>5972829</id><snippet>e == 1</snippet></ROW><ROW><id>5972829</id><snippet>e == 'f=2'</snippet></ROW><ROW><id>5972829</id><snippet>'g=e+f'</snippet></ROW><ROW><id>5972829</id><snippet>exec</snippet></ROW><ROW><id>5972829</id><snippet>e</snippet></ROW><ROW><id>5972829</id><snippet>'g=e+f'</snippet></ROW><ROW><id>5972938</id><snippet>import h5py
f = h5py.File('xsn.silo', 'r')
group = f['sigma_t']
attr_id = h5py.h5a.open(group.id, 'silo')
data = dict(zip(attr_id.dtype.names, group.attrs['silo'],))
</snippet></ROW><ROW><id>5972951</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack("!f",3.14159)
b'@I\x0f\xd0'
</snippet></ROW><ROW><id>5972951</id><snippet>"\123\23\22\245"</snippet></ROW><ROW><id>5972951</id><snippet>&gt;&gt;&gt; a=[3.14159, 2.71828]
&gt;&gt;&gt; struct.pack("!{}f".format(len(a)), *a)
</snippet></ROW><ROW><id>5973134</id><snippet>xticks(arange(len(AlphaNum)),AlphaNum)
</snippet></ROW><ROW><id>5973391</id><snippet>if 2 &lt; 4:
     global var
     var += 1
     list.append("x")
</snippet></ROW><ROW><id>5973391</id><snippet>from three import var, list
</snippet></ROW><ROW><id>5973391</id><snippet>from three import list
import three
</snippet></ROW><ROW><id>5973391</id><snippet>three.var += 1
</snippet></ROW><ROW><id>5973543</id><snippet>./win/tkWinWm.c</snippet></ROW><ROW><id>5973543</id><snippet>tk859-src.zip</snippet></ROW><ROW><id>5973543</id><snippet>static int WmAttributesCmd()</snippet></ROW><ROW><id>5973543</id><snippet>-toolwindow</snippet></ROW><ROW><id>5973543</id><snippet>UpdateWrapper()</snippet></ROW><ROW><id>5973543</id><snippet>FindWindow</snippet></ROW><ROW><id>5973543</id><snippet>TK_WIN_CHILD_CLASS_NAME</snippet></ROW><ROW><id>5973543</id><snippet>TkChild</snippet></ROW><ROW><id>5973543</id><snippet>SetWindowLongPtr( GWLP_STYLE, ...)</snippet></ROW><ROW><id>5973587</id><snippet>#file: context_processors.py

def sample_context_processor(request):
   return {'ss':'ssssssssss'} #or whatever you want to set to variable ss
</snippet></ROW><ROW><id>5973587</id><snippet>#file: settings.py 

TEMPLATE_CONTEXT_PROCESSORS = (
    'myproject.context_processors.sample_context_processor',
)
</snippet></ROW><ROW><id>5973638</id><snippet>python_preamble:
- import: csv_fix
... # the rest of your imports
</snippet></ROW><ROW><id>5973638</id><snippet>import csv, sys
csv.field_size_limit(sys.maxint)
</snippet></ROW><ROW><id>5974391</id><snippet>logging.debug</snippet></ROW><ROW><id>5974391</id><snippet>getLogger</snippet></ROW><ROW><id>5974391</id><snippet>logger = logging.getLogger("my logger") 
</snippet></ROW><ROW><id>5974391</id><snippet>def debug(loggername):
    logger = logging.getLogger(loggername) 
    def log_(enter_message, exit_message=None):
        def wrapper(f):
            def wrapped(*args, **kargs):
                logger.debug(enter_message)
                r = f(*args, **kargs)
                if exit_message:
                    logger.debug(exit_message)
                return r
            return wrapped
        return wrapper
    return log_

my_debug = debug('my.logger')

@my_debug('enter foo', 'exit foo')
def foo(a,b):
    return a+b
</snippet></ROW><ROW><id>5974700</id><snippet>cPickle</snippet></ROW><ROW><id>5974700</id><snippet># Dummy data
from random import randint as r

a,b = 97,123

d = [(dict([(chr(r(a,b)),j) for j in range(1000)]),
       ''.join([chr(r(a,b)) for i in range(5)])) 
                            for j in range(100)]

# Pickle it
import cPickle as pickle

f = open('store.dat','w')
pickle.dump(d,f)
f.close()
</snippet></ROW><ROW><id>5974700</id><snippet>import dumbdbm as dbm

g = dbm.open('store.db')
g.update([(str(i),pickle.dumps(j)) for i,j in enumerate(d)])
g.close()
</snippet></ROW><ROW><id>5974849</id><snippet>While True</snippet></ROW><ROW><id>5974849</id><snippet>import multiprocessing as mp
import urllib2,csv,random,logging,csv,time

inputd=(abc,def,ghi)

def dataget(param):
    while True:
        u = urllib2.urlopen('http://url/%d.csv' %param)
        f=open('/folder/%s.csv' %param,'a')
        csvread = csv.reader(u)
        csvwrite = csv.writer(f)
        csvwrite.writerows(csvread)
        print 'OK','%e'%param
        time.sleep(30)

process=[]
for s in inputd:
    p = mp.Process(target=dataget, args=(s,)) 
    process.append(p)
    p.start()
</snippet></ROW><ROW><id>5975064</id><snippet>ftype</snippet></ROW><ROW><id>5975185</id><snippet>os.fork()</snippet></ROW><ROW><id>5975185</id><snippet>sys.exit()</snippet></ROW><ROW><id>5975185</id><snippet>if os.fork():
    sys.exit()
# Child code goes here
</snippet></ROW><ROW><id>5975375</id><snippet>likes = db.Table('likes',
    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('post_id', db.Integer, db.ForeignKey('post.id'))
)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20))

    def __repr__(self):
        return "&lt;User('%s')&gt;" % self.username

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255))

    likes = db.relationship('User', secondary = likes,
        backref = db.backref('posts', lazy='dynamic'))

    def __repr__(self):
        return "&lt;Post('%s')&gt;" % self.title
</snippet></ROW><ROW><id>5975375</id><snippet>likes</snippet></ROW><ROW><id>5975375</id><snippet>func.count</snippet></ROW><ROW><id>5975375</id><snippet>group_by</snippet></ROW><ROW><id>5975375</id><snippet>Post</snippet></ROW><ROW><id>5975375</id><snippet>order_by</snippet></ROW><ROW><id>5975375</id><snippet>db.session.query(Post, func.count(likes.c.user_id).label('total')).join(likes).group_by(Post).order_by('total DESC')
</snippet></ROW><ROW><id>5975512</id><snippet>fig.canvas.renderer</snippet></ROW><ROW><id>5975512</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FixedLocator, FormatStrFormatter
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')
X = np.arange(-5, 5, 0.25)
xlen = len(X)
Y = np.arange(-5, 5, 0.25)
ylen = len(Y)
X, Y = np.meshgrid(X, Y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)



colortuple = ('y', 'b')
colors = np.empty(X.shape, dtype=str)
for y in range(ylen):
    for x in range(xlen):
        colors[x, y] = colortuple[(x + y) % len(colortuple)]

surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, facecolors=colors,
        linewidth=0, antialiased=False)

ax.set_zlim3d(-1, 1)
ax.w_zaxis.set_major_locator(LinearLocator(6))
ax.w_zaxis.set_major_formatter(FormatStrFormatter('%.03f'))

plt.draw()
print ax._cachedRenderer
</snippet></ROW><ROW><id>5975555</id><snippet>$ nosetests --nocapture mytest.py
</snippet></ROW><ROW><id>5975555</id><snippet>$ NOSE_NOCAPTURE=1 nosetests mytests.py
</snippet></ROW><ROW><id>5975555</id><snippet>nose.cfg</snippet></ROW><ROW><id>5975555</id><snippet>nosetests --help</snippet></ROW><ROW><id>5975944</id><snippet>'\xe3\x82\xaf\xe3\x83\xac\xe3\x82\xa4\xe3\x82\xb8\xe3\x83\xbc\xe3\x83\xbb\xe3\x83\x92\xe3\x83\x83\xe3\x83\x84\xef\xbc\x81'
</snippet></ROW><ROW><id>5975944</id><snippet>&gt;&gt;&gt; a = '\xe3\x82\xaf\xe3\x83\xac\xe3\x82\xa4\xe3\x82\xb8\xe3\x83\xbc\xe3\x83\xbb\xe3\x83\x92\xe3\x83\x83\xe3\x83\x84\xef\xbc\x81'
&gt;&gt;&gt; os.listdir('.')
['?????\xb7???!']
&gt;&gt;&gt; os.listdir(u'.') # Pass unicode to have unicode returned to you
[u'\u30af\u30ec\u30a4\u30b8\u30fc\u30fb\u30d2\u30c3\u30c4\uff01']
&gt;&gt;&gt; 
&gt;&gt;&gt; a.decode('utf8') # UTF8 decoding your string matches the listdir output
u'\u30af\u30ec\u30a4\u30b8\u30fc\u30fb\u30d2\u30c3\u30c4\uff01'
&gt;&gt;&gt; os.listdir(a.decode('utf8'))
[u'abc.txt']
</snippet></ROW><ROW><id>5975944</id><snippet>path.decode('utf8')</snippet></ROW><ROW><id>5975944</id><snippet>.decode('utf8')</snippet></ROW><ROW><id>5975944</id><snippet>ASCII_TRANS = '_'*32 + ''.join([chr(x) for x in range(32,126)]) + '_'*130
path=path.strip()
path=path[17:] #to remove the file://localhost/  part
path=urllib.unquote(path)
if path.translate(ASCII_TRANS) != path: # Contains non-ascii
  path = path.decode('utf8')
path=urllib.url2pathname(path)
</snippet></ROW><ROW><id>5976122</id><snippet>id = mongoengine.StringField(required=True, primary_key=True)
</snippet></ROW><ROW><id>5976423</id><snippet>import mechanize
from time import sleep
#Make a Browser (think of this as chrome or firefox etc)
br = mechanize.Browser()

#visit http://stockrt.github.com/p/emulating-a-browser-in-python-with-mechanize/
#for more ways to set up your br browser object e.g. so it look like mozilla
#and if you need to fill out forms with passwords.

# Open your site
br.open('http://pypi.python.org/pypi/xlwt')

f=open("source.html","w")
f.write(br.response().read()) #can be helpful for debugging maybe

filetypes=[".zip",".exe",".tar.gz"] #you will need to do some kind of pattern matching on your files
myfiles=[]
for l in br.links(): #you can also iterate through br.forms() to print forms on the page!
    for t in filetypes:
        if t in str(l): #check if this link has the file extension we want (you may choose to use reg expressions or something)
            myfiles.append(l)


def downloadlink(l):
    f=open(l.text,"w") #perhaps you should open in a better way &amp; ensure that file doesn't already exist.
    br.click_link(l)
    f.write(br.response().read())
    print l.text," has been downloaded"
    #br.back()

for l in myfiles:
    sleep(1) #throttle so you dont hammer the site
    downloadlink(l)
</snippet></ROW><ROW><id>5976905</id><snippet>do_POST</snippet></ROW><ROW><id>5976905</id><snippet>content_len = int(self.headers.getheader('content-length'))
post_body = self.rfile.read(content_len)
</snippet></ROW><ROW><id>5977206</id><snippet>for service in accounts:
        for account, creds in accounts[service].iteritems():
            account.setupAccount(creds['username'], creds['password'])
</snippet></ROW><ROW><id>5977513</id><snippet>class Locality(polymodel.PolyModel):
  { geo properties here }

class Organisation(Locality):
  title = db.StringProperty()

class Position(Locality):
  title = db.StringProperty()
</snippet></ROW><ROW><id>5977513</id><snippet>Organisation.all().filter({by geo properties of Locality model})
</snippet></ROW><ROW><id>5977513</id><snippet>Locality.all().filter({by geo properties of Locality model})
</snippet></ROW><ROW><id>5977628</id><snippet>import os, urlparse
p = urlparse.urlparse('file://C:/test/doc.txt').path
finalPath = os.path.abspath(os.path.join(p.netloc, p.path))
</snippet></ROW><ROW><id>5977660</id><snippet>evaluateJavaScript("addMarker(-33.89,151.275)")</snippet></ROW><ROW><id>5977714</id><snippet>s = 'abcd'</snippet></ROW><ROW><id>5977714</id><snippet>sys.getsizeof(s)</snippet></ROW><ROW><id>5978286</id><snippet>SELECT * FROM DataStorage WHERE DataStorage.storage_path LIKE 'path%';
</snippet></ROW><ROW><id>5978618</id><snippet>_socket</snippet></ROW><ROW><id>5978618</id><snippet>from configparser import ConfigParser
</snippet></ROW><ROW><id>5979102</id><snippet>__eq__()</snippet></ROW><ROW><id>5979102</id><snippet>__cmp__()</snippet></ROW><ROW><id>5979102</id><snippet>__eq__()</snippet></ROW><ROW><id>5979102</id><snippet>__hash__()</snippet></ROW><ROW><id>5979102</id><snippet>__cmp__()</snippet></ROW><ROW><id>5979102</id><snippet>__eq__()</snippet></ROW><ROW><id>5979102</id><snippet>__hash__()</snippet></ROW><ROW><id>5979102</id><snippet>__cmp__()</snippet></ROW><ROW><id>5979102</id><snippet>__eq__()</snippet></ROW><ROW><id>5979102</id><snippet>__hash__()</snippet></ROW><ROW><id>5979169</id><snippet>import xml.etree.cElementTree

doc = xml.etree.cElementTree.parse( filename )
for e in doc.getiterator( 'title' ):
    book_title = e.attrib[ 'titletext' ]
</snippet></ROW><ROW><id>5979169</id><snippet>import xml.etree.cElementTree

doc = xml.etree.cElementTree.parse( filename )
for e in doc.getiterator( 'titletext' ):
    book_title = e.text
</snippet></ROW><ROW><id>5979776</id><snippet>/home/username/virtualpy/bin/python setup.py install
</snippet></ROW><ROW><id>5980019</id><snippet>firstname</snippet></ROW><ROW><id>5980019</id><snippet>__slots__</snippet></ROW><ROW><id>5980019</id><snippet>__dict__</snippet></ROW><ROW><id>5980019</id><snippet>dict</snippet></ROW><ROW><id>5980019</id><snippet>set</snippet></ROW><ROW><id>5980019</id><snippet>def rand_str():
    return str.join("", (chr(random.randrange(97, 123))
                         for i in range(random.randrange(3, 16))))

class A(object):
    def __init__(self):
        self.x = rand_str()
        self.y = rand_str()
    def __hash__(self):
        return hash(self.x)
    def __eq__(self, other):
        return self.x == other.x
</snippet></ROW><ROW><id>5980019</id><snippet>random.seed(42)
s = set(A() for i in xrange(1000000))
</snippet></ROW><ROW><id>5980019</id><snippet>    __slots__ = ("x", "y")
</snippet></ROW><ROW><id>5980019</id><snippet>def key_value():
    a = A()
    return a.x, a

random.seed(42)
d = dict(key_value() for i in xrange(1000000))
</snippet></ROW><ROW><id>5980019</id><snippet>__slots__</snippet></ROW><ROW><id>5980019</id><snippet>__slots__</snippet></ROW><ROW><id>5980173</id><snippet>if</snippet></ROW><ROW><id>5980173</id><snippet>if verbose:
    def verboseprint(*args):
        # Print each argument separately so caller doesn't need to
        # stuff everything to be printed into a single string
        for arg in args:
           print arg,
        print
else:   
    verboseprint = lambda *a: None      # do-nothing function
</snippet></ROW><ROW><id>5980173</id><snippet>if</snippet></ROW><ROW><id>5980173</id><snippet>print</snippet></ROW><ROW><id>5980173</id><snippet>print</snippet></ROW><ROW><id>5980173</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>5980173</id><snippet>verboseprint = print if verbose else lambda *a, **k: None
</snippet></ROW><ROW><id>5980173</id><snippet>verbose</snippet></ROW><ROW><id>5980173</id><snippet>if</snippet></ROW><ROW><id>5980173</id><snippet>verboseprint("look at all my verbosity!", object(), 3)</snippet></ROW><ROW><id>5980296</id><snippet>{% render_avatar avatar [size in pixels] %}</snippet></ROW><ROW><id>5980296</id><snippet>avatar.models.Avatar</snippet></ROW><ROW><id>5980296</id><snippet>img</snippet></ROW><ROW><id>5980296</id><snippet>avatar = Avatar.objects.get(user=request.user</snippet></ROW><ROW><id>5980374</id><snippet> server = 'mail.domain.com'
 port = 25
</snippet></ROW><ROW><id>5980374</id><snippet> server: mail.domain.com
 port: 25
</snippet></ROW><ROW><id>5980374</id><snippet>&gt;&gt;&gt; import yaml
&gt;&gt;&gt; yaml.load("""a: 1
... b: foo
... """)
{'a': 1, 'b': 'foo'}
</snippet></ROW><ROW><id>5980374</id><snippet>&gt;&gt;&gt; with open('myconfig.yaml', 'r') as cfile:
...    config = yaml.load(cfile)
... 
</snippet></ROW><ROW><id>5981017</id><snippet>childItem = self.tree.AppendItem(self.root, child.name)
self.tree.SetPyData(childItem, ["hi", "i" , "am", "a", "python", "object"])
</snippet></ROW><ROW><id>5981017</id><snippet>def OnItemExpanded(self, event):
    item = event.GetItem()
    if item:
        pyObj = self.tree.GetPyData(item)
</snippet></ROW><ROW><id>5981037</id><snippet>libxml2</snippet></ROW><ROW><id>5981037</id><snippet>libxslt</snippet></ROW><ROW><id>5981037</id><snippet>$HOME</snippet></ROW><ROW><id>5981037</id><snippet>% uname -m
x86_64
% aptitude show libxml2 | grep Version
Version: 2.7.6.dfsg-1ubuntu1.1
</snippet></ROW><ROW><id>5981037</id><snippet>% mkdir root ; cd root
% wget http://us.archive.ubuntu.com/ubuntu/pool/main/libx/libxml2/libxml2_2.7.6.dfsg-1ubuntu1.1_amd64.deb
% wget http://us.archive.ubuntu.com/ubuntu/pool/main/libx/libxslt/libxslt1.1_1.1.26-6build1_amd64.deb
% wget http://us.archive.ubuntu.com/ubuntu/pool/main/l/lxml/python-lxml_2.2.4-1_amd64.deb
</snippet></ROW><ROW><id>5981037</id><snippet>% dpkg-deb -x libxml2_2.7.6.dfsg-1ubuntu1.1_amd64.deb .
% dpkg-deb -x libxslt1.1_1.1.26-6build1_amd64.deb .
% dpkg-deb -x python-lxml_2.2.4-1_amd64.deb .
% mv ./usr/lib/python2.6/dist-packages/lxml .
% mv ./usr/share/pyshared/lxml/* lxml
% mv ./usr/lib .
% rm *.deb
% rm -rf usr
</snippet></ROW><ROW><id>5981037</id><snippet>$HOME/root</snippet></ROW><ROW><id>5981037</id><snippet>~/.bashrc</snippet></ROW><ROW><id>5981037</id><snippet>% export LD_LIBRARY_PATH=$HOME/root/lib
% export PYTHONPATH=$HOME/root
</snippet></ROW><ROW><id>5981037</id><snippet>ldd</snippet></ROW><ROW><id>5981037</id><snippet>% ldd $HOME/root/lxml/etree.so | grep $HOME
libxslt.so.1 =&gt; /home/user/root/lib/libxslt.so.1 (0x00007ff9b1f0f000)
libexslt.so.0 =&gt; /home/user/root/lib/libexslt.so.0 (0x00007ff9b1cfa000)
libxml2.so.2 =&gt; /home/user/root/lib/libxml2.so.2 (0x00007ff9b19a9000)
</snippet></ROW><ROW><id>5981037</id><snippet>% python
&gt;&gt;&gt; from lxml import etree
</snippet></ROW><ROW><id>5981585</id><snippet>min</snippet></ROW><ROW><id>5981585</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; dist=lambda s,d: (s[0]-d[0])**2+(s[1]-d[1])**2 #a little function which calculates the distance between two coordinates
&gt;&gt;&gt; a=[(35.9879845760485, -4.74093235801354), (35.9888687992442, -4.72708076713794), ..... ]
&gt;&gt;&gt; coord = (35.9945570576458, -4.73110757975504)
&gt;&gt;&gt; min(a, key=partial(dist, coord)) #find the min value using the distance function with coord parameter
(35.9961479762973, -4.7306870912609)
</snippet></ROW><ROW><id>5982042</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5982284</id><snippet>f_dia_nom = "Un" 
</snippet></ROW><ROW><id>5982284</id><snippet>def nombra_dia():
   global f_dia_nom

   ...
</snippet></ROW><ROW><id>5982622</id><snippet>$ ./qm.py -o 1,2,3
1X X1
$ ./qm.py -o 1,2
10 01
$ ./qm.py -o 0,15
1111 0000
$ ./qm.py -o 0,8,15
1111 X000
</snippet></ROW><ROW><id>5983004</id><snippet>new</snippet></ROW><ROW><id>5983004</id><snippet>&gt;&gt;&gt; import new
&gt;&gt;&gt; new
&lt;module 'new' from '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/new.pyc'&gt;
</snippet></ROW><ROW><id>5983004</id><snippet>$HOME/Desktop/new.py</snippet></ROW><ROW><id>5983127</id><snippet>import re

regx = re.compile('[a-z]+\[_FILE:(.*?)_\]')


ch = 'abcd[_FILE:foo.txt_]efghi[_FILE:bar.txt_]jklm[_FILE:foo2.txt_] '

print regx.findall(ch)
</snippet></ROW><ROW><id>5983362</id><snippet>Process</snippet></ROW><ROW><id>5983362</id><snippet>fork()</snippet></ROW><ROW><id>5983375</id><snippet>with</snippet></ROW><ROW><id>5983375</id><snippet>import mechanize, fileinput

urls = open('F:\Python\url_list2.txt')
content = urls.readlines()
print content
</snippet></ROW><ROW><id>5983375</id><snippet>\n</snippet></ROW><ROW><id>5983375</id><snippet>.strip()</snippet></ROW><ROW><id>5983375</id><snippet>import mechanize, fileinput

urls = open('F:\Python\url_list2.txt')
content = [x.strip() for x in urls.readlines()]
print content
</snippet></ROW><ROW><id>5983437</id><snippet>def move_over(src_dir, dest_dir):
    fileList = os.listdir(src_dir)
    for i in fileList:
        src = os.path.join(src_dir, i)
        dest = os.path.join(dest_dir, i)
        if os.path.exists(dest):
            if os.path.isdir(dest):
                move_over(src, dest)
                continue
            else:
                os.remove(dest)
        shutil.move(src, dest_dir)

src_dir = '/Users/john.leschinski/Desktop/testSrc'
dest_dir = '/Users/john.leschinski/Desktop/testMove'
move_over(src_dir, dest_dir)
</snippet></ROW><ROW><id>5983563</id><snippet>sys.modules</snippet></ROW><ROW><id>5983563</id><snippet>import module
</snippet></ROW><ROW><id>5983563</id><snippet>from module import name
</snippet></ROW><ROW><id>5983606</id><snippet>def parseips():
    with open("126logs.txt",'r') as f:
        for line in f:
            ip = line.split()[3]
            if ip.startswith('192.168.'):
                print "%s\n" %ip, 
</snippet></ROW><ROW><id>5983606</id><snippet>f = open("126logs.txt",'r')
IPs = [line.split()[3] for line in f if line.split()[3].startswith('192.168.')]
</snippet></ROW><ROW><id>5983613</id><snippet>&gt;&gt;&gt; def annotate(gen):
...     prev_i, prev_val = 0, gen.next()
...     for i, val in enumerate(gen, start=1):
...         yield prev_i, prev_val
...         prev_i, prev_val = i, val
...     yield '-1', prev_val
&gt;&gt;&gt; for i, val in annotate(iter(range(4))):
...     print i, val
... 
0 0
1 1
2 2
-1 3
</snippet></ROW><ROW><id>5983613</id><snippet>&gt;&gt;&gt; used_iter = iter(range(5))
&gt;&gt;&gt; used_iter.next()
0
&gt;&gt;&gt; for i, val in annotate(used_iter):
...     print i, val
... 
0 1
1 2
2 3
-1 4
</snippet></ROW><ROW><id>5983613</id><snippet>StopIteration</snippet></ROW><ROW><id>5983613</id><snippet>&gt;&gt;&gt; annotate(used_iter).next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in annotate
StopIteration
</snippet></ROW><ROW><id>5983691</id><snippet>onchange</snippet></ROW><ROW><id>5983691</id><snippet>&lt;select name="combo2" id="combo2" onchange="Dajaxice.your_project.your_appname.updatefilter(Dajax.process,{'option':this.value}" size="1"&gt;&lt;/select&gt;
</snippet></ROW><ROW><id>5983978</id><snippet>sys.exit()</snippet></ROW><ROW><id>5983978</id><snippet>while</snippet></ROW><ROW><id>5983978</id><snippet>running = True
while running:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            running = False
...
</snippet></ROW><ROW><id>5984319</id><snippet>mechanize.urlopen(s)</snippet></ROW><ROW><id>5984319</id><snippet>browser.open(s)</snippet></ROW><ROW><id>5984935</id><snippet>a = ["1", "2", "3", "4"]

['', '.'].repeated_permutation(a.length - 1).map{|b| a.zip(b).join.split('.')}
</snippet></ROW><ROW><id>5984935</id><snippet>[
  ["1234"],
  ["123", "4"],
  ["12", "34"],
  ["12", "3", "4"],
  ["1", "234"],
  ["1", "23", "4"],
  ["1", "2", "34"],
  ["1", "2", "3", "4"]
]
</snippet></ROW><ROW><id>5985008</id><snippet>def oauth_req(url, http_method="GET", post_body=None, http_headers=None):
</snippet></ROW><ROW><id>5985093</id><snippet>f = open(filepath, 'r')
tags = ["#intensities"]
answer = {}
for line in f:
    if line.strip() in tags: # we've encountered a new tag
        curr = line.strip()[1:]
        answer[curr] = []
    else:
        answer[curr].append(line.strip().split('\t'))

f.close()
</snippet></ROW><ROW><id>5985093</id><snippet>answer</snippet></ROW><ROW><id>5985093</id><snippet>{'intensities':[['11', '1', '1'], ['0', '1', '2']]}
</snippet></ROW><ROW><id>5985321</id><snippet>randint</snippet></ROW><ROW><id>5985321</id><snippet>random</snippet></ROW><ROW><id>5985321</id><snippet>from random import *
</snippet></ROW><ROW><id>5985321</id><snippet>wordindex = randint(0,len(wordlist)-1)
</snippet></ROW><ROW><id>5985321</id><snippet>import random
# or
from random import randint
</snippet></ROW><ROW><id>5985321</id><snippet>length_1</snippet></ROW><ROW><id>5985321</id><snippet>length_2</snippet></ROW><ROW><id>5985321</id><snippet>length_3</snippet></ROW><ROW><id>5985321</id><snippet>Welcomenote()</snippet></ROW><ROW><id>5985321</id><snippet>wordlist_1 = ['cat', 'dog']
# or alternatively
wordlist_1 = 'cat dog'.split() # splits the string up to a list of words separated by whitespace
</snippet></ROW><ROW><id>5985323</id><snippet>real_plot = plot
def my_plot(*args, **kwargs):
    x, y = args[0], args[1]
    ...your extra code here...
    real_plot(*args, **kwargs)
plot = my_plot
</snippet></ROW><ROW><id>5985372</id><snippet>configobj</snippet></ROW><ROW><id>5985372</id><snippet>#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function

try:
    import ConfigParser as configparser
except ImportError:
    import configparser

try:
    import StringIO
except ImportError:
    import io.StringIO as StringIO

test_ini = """
[some_section]
messages.welcome=Hello\
 World
messages.bye=bye
"""
config = configparser.ConfigParser()
config.readfp(StringIO.StringIO(test_ini))
print(config.items('some_section'))
</snippet></ROW><ROW><id>5985891</id><snippet>% cat &gt; test.py
a = 1
% python2.6 -m compileall .
% python2.6 test.pyc
% python3.1 test.pyc
RuntimeError: Bad magic number in .pyc file
</snippet></ROW><ROW><id>5985891</id><snippet>test.py</snippet></ROW><ROW><id>5985891</id><snippet>.py</snippet></ROW><ROW><id>5985891</id><snippet>.pyc</snippet></ROW><ROW><id>5985891</id><snippet>% python2.6 -m compileall .
% rm test.py
% cat &gt; test2.py
import test
print(test.a)
% python2.6 test2.py
1
% python3.1 test2.py
Traceback (most recent call last):
  File "test2.py", line 1, in &lt;module&gt;
    import test
ImportError: Bad magic number in test.pyc
</snippet></ROW><ROW><id>5986011</id><snippet>2</snippet></ROW><ROW><id>5986011</id><snippet>-1</snippet></ROW><ROW><id>5986011</id><snippet>from collections import defaultdict
d = defaultdict(int)
for record in input:
    d[record[-1]] += 1
print d
</snippet></ROW><ROW><id>5986182</id><snippet>django-addressbook</snippet></ROW><ROW><id>5986182</id><snippet>django-crm</snippet></ROW><ROW><id>5986426</id><snippet>b</snippet></ROW><ROW><id>5986426</id><snippet>args</snippet></ROW><ROW><id>5986614</id><snippet>nano</snippet></ROW><ROW><id>5986614</id><snippet>% echo | nano
Received SIGHUP or SIGTERM
</snippet></ROW><ROW><id>5986614</id><snippet>stdin</snippet></ROW><ROW><id>5986614</id><snippet>editorprocess = subprocess.Popen([editor or "vi", temppath],
                                 stdin=open('/dev/tty', 'r'))
</snippet></ROW><ROW><id>5986631</id><snippet>import re
re.search('(AB|CD|EF)(12|34)', 'zzAB34zz').group()
</snippet></ROW><ROW><id>5986692</id><snippet>LDSHARED</snippet></ROW><ROW><id>5986692</id><snippet>&gt;&gt;&gt; from distutils import sysconfig
&gt;&gt;&gt; sysconfig.get_config_var('LDSHARED')
'gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions'
&gt;&gt;&gt; sysconfig.get_config_var('CC')
'gcc -pthread'
</snippet></ROW><ROW><id>5986692</id><snippet>gcc</snippet></ROW><ROW><id>5986692</id><snippet>CC</snippet></ROW><ROW><id>5986692</id><snippet>LDSHARED</snippet></ROW><ROW><id>5986692</id><snippet>% LDSHARED="i586-linux-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions" \
  CC="i586-linux-gcc -pthread" python setup.py build
</snippet></ROW><ROW><id>5986866</id><snippet>pyth_test</snippet></ROW><ROW><id>5986866</id><snippet>test.py</snippet></ROW><ROW><id>5986866</id><snippet>def pyth_test (x1, x2):
    print x1 + x2

pyth_test(1,2)
</snippet></ROW><ROW><id>5986866</id><snippet>python test.py
</snippet></ROW><ROW><id>5986866</id><snippet>&gt;&gt;&gt; def pyth_test (x1, x2):
...     print x1 + x2
... 
&gt;&gt;&gt; pyth_test(1,2)
3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5986866</id><snippet>def pyth_test (x1, x2):
    print x1 + x2 
</snippet></ROW><ROW><id>5986866</id><snippet>#!/usr/bin/python

# Our function is pulled in here
from myfunction import pyth_test

pyth_test(1,2)
</snippet></ROW><ROW><id>5986866</id><snippet>python program.py
</snippet></ROW><ROW><id>5986866</id><snippet># Python: Huh? where's pyth_test?
# You say it's down there, but I haven't gotten there yet!
pyth_test(1,2)

# Our function is pulled in here
from myfunction import pyth_test
</snippet></ROW><ROW><id>5986866</id><snippet>$ python program.py 
Traceback (most recent call last):
  File "program.py", line 3, in &lt;module&gt;
    pyth_test(1,2)
NameError: name 'pyth_test' is not defined
</snippet></ROW><ROW><id>5986866</id><snippet>&gt;&gt;&gt; from myfunction import pyth_test
&gt;&gt;&gt; pyth_test(1,2)
3
</snippet></ROW><ROW><id>5986912</id><snippet>~/.ssh/authorized_keys</snippet></ROW><ROW><id>5986912</id><snippet>cat ~/.ssh/id_rsa.pub | ssh user@remotehost "cat - &gt; ~/.ssh/authorized_keys"</snippet></ROW><ROW><id>5986912</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>5986982</id><snippet>MyPythonMethod.func_code.co_names</snippet></ROW><ROW><id>5986982</id><snippet>('os', 'path', 'exists', 'sys')</snippet></ROW><ROW><id>5987027</id><snippet>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def result_none(choice):
    mydict = {}
    if choice == 'a':
        mydict['x']  = 100
        mydict['y']  = 1000
        return mydict
    else:
        return None

def result_dict(choice):
    mydict = {}
    if choice == 'a':
        mydict['x']  = 100
        mydict['y']  = 1000
    return mydict

test_dict = result_dict('b')
if test_dict.get('x'):
    print 'Got x'
else:
    print 'No x'

test_none = result_none('b')
if test_none.get('x'):
    print 'Got x'
else:
    print 'No x'
</snippet></ROW><ROW><id>5987027</id><snippet>test_none.get(x)</snippet></ROW><ROW><id>5987027</id><snippet>if test_none is not None and test_none.get('x')</snippet></ROW><ROW><id>5987027</id><snippet>test_dict.get('x')</snippet></ROW><ROW><id>5987027</id><snippet>result_dict</snippet></ROW><ROW><id>5987293</id><snippet>Queue</snippet></ROW><ROW><id>5987293</id><snippet>None</snippet></ROW><ROW><id>5987293</id><snippet>Queue</snippet></ROW><ROW><id>5987293</id><snippet>Queue</snippet></ROW><ROW><id>5987293</id><snippet>while True:

    item = request_queue.get()

    if item == None:
        break

    # process the Queue as per normal...
</snippet></ROW><ROW><id>5987359</id><snippet>setuptools/command/easy_install.py</snippet></ROW><ROW><id>5987359</id><snippet>easy_install.pth</snippet></ROW><ROW><id>5987359</id><snippet>easy_install.pth</snippet></ROW><ROW><id>5987359</id><snippet>easy_install</snippet></ROW><ROW><id>5987359</id><snippet>#!/usr/bin/env python
import sys
path = sys.argv[1]
lines = open(path, 'rb').readlines()
if lines and 'import sys' in lines[0]:
    open(path, 'wb').write(''.join(lines[1:-1]) + '\n')
</snippet></ROW><ROW><id>5987359</id><snippet>% easy_install gdata
% PYTHONPATH=xyz python -c 'import sys; print sys.path[:2]'
['', '/Users/pat/virt/lib/python2.6/site-packages/gdata-2.0.14-py2.6.egg']

% ./fix_path ~/virt/lib/python2.6/site-packages/easy_install.pth
% PYTHONPATH=xyz python -c 'import sys; print sys.path[:2]'
['', '/Users/pat/xyz']
</snippet></ROW><ROW><id>5987359</id><snippet>easy-install.pth</snippet></ROW><ROW><id>5987359</id><snippet>import sys; sys.__plen = len(sys.path)
./gdata-2.0.14-py2.6.egg
import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)
</snippet></ROW><ROW><id>5987359</id><snippet>import sys</snippet></ROW><ROW><id>5987359</id><snippet>sys.path</snippet></ROW><ROW><id>5987402</id><snippet>if foo is None:
  foo = 42
</snippet></ROW><ROW><id>5987402</id><snippet>def ifnull(var, val):
  if var is None:
    return val
  return var

foo = ifnull(foo, 42)
</snippet></ROW><ROW><id>5987525</id><snippet>ConfigParser.items(section)</snippet></ROW><ROW><id>5987525</id><snippet>dict</snippet></ROW><ROW><id>5987525</id><snippet>&gt;&gt;&gt; l = [('name1', 'val1'), ('name2', 'val2')]
&gt;&gt;&gt; d = dict(l)
&gt;&gt;&gt; d
{'name2': 'val2', 'name1': 'val1'}
&gt;&gt;&gt; d.items()
[('name2', 'val2'), ('name1', 'val1')]
&gt;&gt;&gt; d.keys()
['name2', 'name1']
&gt;&gt;&gt; d.values()
['val2', 'val1']
</snippet></ROW><ROW><id>5988304</id><snippet>python -i -c "import sys; import datetime;"
</snippet></ROW><ROW><id>5988304</id><snippet>-i     : inspect interactively after running script; forces a prompt even
         if stdin does not appear to be a terminal; also PYTHONINSPECT=x
</snippet></ROW><ROW><id>5988304</id><snippet>-c cmd : program passed in as string (terminates option list)
</snippet></ROW><ROW><id>5988678</id><snippet>A(BC|DE)F
A(?:BC|DE)F
</snippet></ROW><ROW><id>5988678</id><snippet>ABC</snippet></ROW><ROW><id>5988678</id><snippet>DEF</snippet></ROW><ROW><id>5988678</id><snippet>BC</snippet></ROW><ROW><id>5988678</id><snippet>DE</snippet></ROW><ROW><id>5988687</id><snippet>ax</snippet></ROW><ROW><id>5988687</id><snippet>bx</snippet></ROW><ROW><id>5988687</id><snippet>1</snippet></ROW><ROW><id>5988687</id><snippet>1</snippet></ROW><ROW><id>5988687</id><snippet>0</snippet></ROW><ROW><id>5988687</id><snippet>15 | 128 = 143</snippet></ROW><ROW><id>5988687</id><snippet>00001111 | 10000000 = 10001111</snippet></ROW><ROW><id>5988953</id><snippet>import sys
import os

# locate app-engine SDK
AE_PATH = "/path/to/sdk/google_appengine/"

# path to app code
APP_PATH = os.path.abspath(".")

# load the AE paths (as stolen from dev_appserver.py)
EXTRA_PATHS = [
    APP_PATH,
    AE_PATH,
    os.path.join(AE_PATH, 'lib', 'antlr3'),
    os.path.join(AE_PATH, 'lib', 'django'),
    os.path.join(AE_PATH, 'lib', 'ipaddr'),
    os.path.join(AE_PATH, 'lib', 'webob'),
    os.path.join(AE_PATH, 'lib', 'yaml', 'lib'),
    os.path.join(AE_PATH, 'lib', 'fancy_urllib'), # issue[1]
]
sys.path = EXTRA_PATHS + sys.path
</snippet></ROW><ROW><id>5989195</id><snippet>class Foo {

    Process p;

    private void doStuff() throws Exception {
        p = Runtime.getRuntime().exec("program.py", envp);
        // More code ...
    }

    private void startStuff() {
        try {
            doStuff();
        } catch (Exception e) {
            p.destroy();
        }
    }

    public static void main(String[] args) {
        Foo foo = new Foo();
        foo.startStuff();
    }
}
</snippet></ROW><ROW><id>5989195</id><snippet>doStuff()</snippet></ROW><ROW><id>5989322</id><snippet>self.fields</snippet></ROW><ROW><id>5989322</id><snippet>self.fields['acknowledge'].required = False
</snippet></ROW><ROW><id>5989384</id><snippet>float(str.replace("D", "E"))</snippet></ROW><ROW><id>5989384</id><snippet>numpy.float("1.2345D+02")</snippet></ROW><ROW><id>5989593</id><snippet>import re
str = open(file).read()
pairs = re.findall(r'\*+ (Contig \d+) \*+\n([^*]*)',str)
</snippet></ROW><ROW><id>5989593</id><snippet>pairs</snippet></ROW><ROW><id>5989593</id><snippet>('Contig x', '...')</snippet></ROW><ROW><id>5989593</id><snippet>'\n'</snippet></ROW><ROW><id>5989593</id><snippet>[(contig, txt.count('\n')) for (contig,txt) in pairs]
</snippet></ROW><ROW><id>5989593</id><snippet>[(contig, txt.count('\n')-txt.count('\n\n')) for (contig,txt) in pairs]
</snippet></ROW><ROW><id>5989948</id><snippet>a</snippet></ROW><ROW><id>5989948</id><snippet>b - a[:,None]
</snippet></ROW><ROW><id>5989948</id><snippet>a[:,None]</snippet></ROW><ROW><id>5989948</id><snippet>array([[2], [2]])</snippet></ROW><ROW><id>5989994</id><snippet>self.connect("delete-event", lambda the_widget, the_event: \
    self.__instance_b.manage_event(the_widget, the_event))
</snippet></ROW><ROW><id>5989994</id><snippet>self.connect("delete-event", self.__instance_b.manage_event)
</snippet></ROW><ROW><id>5989994</id><snippet>manage_event()</snippet></ROW><ROW><id>5989994</id><snippet>connect()</snippet></ROW><ROW><id>5990224</id><snippet>import ast

input1 = {'hostname' : 'host', 'port' : '22', 'basedn' : 'CN=Users', 'bindusername' : 'admin', 'bindpassword' : 'passwd', 'groupname' : 'CN=Group,CN=Users,DC=tech,DC=com', 'usernameattribute' : 'name'}

for line in open("/Users/rwettstein/Scripts/Files/ldap-settings.txt", "r"):
    print line
    # this assumes each line has a dictionary literal in it.
    # you can add more robust processing (e.g. skipping empty lines
    # or lines starting with #)
    input = ast.literal_eval(line.strip())
    time.sleep(10)

    # this assumes input is a dict or a sequence of key/value tuples.
    params = urllib.urlencode(input)

try:
    f_handler = urlopen('https://hostname/path/file.php', params)
    except urllib2.HTTPError, error:
        print "Error Code: %s" % error.code
</snippet></ROW><ROW><id>5990391</id><snippet>def step1(): 
    whatever

def step2(): 
    whatever

def step2_alternative():
    whatever

def original( args ):
    step1()
    step2()

def revised( args, step2_choice ):
    step1()
    step2_choice()
</snippet></ROW><ROW><id>5990391</id><snippet>revised( step2 )
revised( step2_alternative )
</snippet></ROW><ROW><id>5990401</id><snippet>import subprocess
proc = subprocess.Popen(['gedit', 'file.txt'])
</snippet></ROW><ROW><id>5990401</id><snippet>proc.wait()
</snippet></ROW><ROW><id>5990657</id><snippet>MyClass</snippet></ROW><ROW><id>5990857</id><snippet>mail.send_mail(sender="",
                 to="",
                 subject="",
                 body="",
                 html="your html")
</snippet></ROW><ROW><id>5991416</id><snippet>easy_install</snippet></ROW><ROW><id>5991416</id><snippet>sudo python2.5 easy_install package_name</snippet></ROW><ROW><id>5992745</id><snippet>&gt;&gt;&gt; { k: v['id1'] for k,v in a.items() if 'id1' in v }
{'key3': [4, 5, 6], 'key1': [0, 1, 2]}
</snippet></ROW><ROW><id>5992745</id><snippet>iteritems()</snippet></ROW><ROW><id>5992745</id><snippet>items()</snippet></ROW><ROW><id>5992745</id><snippet>dict((k, v['id1']) for k,v in a.iteritems() if 'id1' in v )
</snippet></ROW><ROW><id>5992745</id><snippet>def query(data, wanted):
    result = {}
    for k, v in data.items():
        v2 = { k2:v[k2] for k2 in wanted if k2 in v }
        if v2:
            result[k] = v2
    return result
</snippet></ROW><ROW><id>5992745</id><snippet>&gt;&gt;&gt; query(a, ('id1', 'id2'))
{'key3': {'id1': [4, 5, 6]}, 'key1': {'id2': [0, 1, 2], 'id1': [0, 1, 2]}}
</snippet></ROW><ROW><id>5992904</id><snippet>if memo</snippet></ROW><ROW><id>5992904</id><snippet>if tags</snippet></ROW><ROW><id>5992904</id><snippet>memo</snippet></ROW><ROW><id>5992904</id><snippet>tags</snippet></ROW><ROW><id>5992904</id><snippet>if</snippet></ROW><ROW><id>5992904</id><snippet>while</snippet></ROW><ROW><id>5992904</id><snippet>None</snippet></ROW><ROW><id>5992904</id><snippet>False</snippet></ROW><ROW><id>5992904</id><snippet>0</snippet></ROW><ROW><id>5992904</id><snippet>0L</snippet></ROW><ROW><id>5992904</id><snippet>0.0</snippet></ROW><ROW><id>5992904</id><snippet>0j</snippet></ROW><ROW><id>5992904</id><snippet>''</snippet></ROW><ROW><id>5992904</id><snippet>()</snippet></ROW><ROW><id>5992904</id><snippet>[]</snippet></ROW><ROW><id>5992904</id><snippet>{}</snippet></ROW><ROW><id>5992904</id><snippet>__nonzero__()</snippet></ROW><ROW><id>5992904</id><snippet>__len__()</snippet></ROW><ROW><id>5992904</id><snippet>bool</snippet></ROW><ROW><id>5992904</id><snippet>False</snippet></ROW><ROW><id>5993463</id><snippet>import matplotlib.pyplot as plt

plt.plot(range(10))

plt.figure()
plt.plot(range(10), 'ro-')

plt.show()
</snippet></ROW><ROW><id>5993463</id><snippet>python filename.py</snippet></ROW><ROW><id>5993659</id><snippet>set()</snippet></ROW><ROW><id>5993659</id><snippet>in</snippet></ROW><ROW><id>5993850</id><snippet>python-matplotlib-wx</snippet></ROW><ROW><id>5993850</id><snippet>site.cfg</snippet></ROW><ROW><id>5993850</id><snippet>site.cfg.default</snippet></ROW><ROW><id>5993850</id><snippet>site.cfg</snippet></ROW><ROW><id>5993850</id><snippet>site.cfg</snippet></ROW><ROW><id>5993975</id><snippet>class Author(models.Model):
    first_name = models.CharField()
    last_name = models.CharField()

    def _get_full_name(self):
       return '{0} {1}'.format(self.first_name, self.last_name)

    full_name = property(_get_full_name)

    class Meta: 
       unique_together = ("first_name", "last_name")
</snippet></ROW><ROW><id>5994422</id><snippet>&amp; ((1&lt;&lt;32) - 1)</snippet></ROW><ROW><id>5994422</id><snippet>class Int32(int):
    def __neg__(self):
        return Int32(int.__neg__(self) &amp; ((1 &lt;&lt; 32) - 1))
    def __rshift__(self, other):
        if self &amp; (-1 &lt;&lt; 31):
             retval = int.__rshift__(int.__sub__(self, 1&lt;&lt;32), other)
             return Int32(retval &amp; ((1 &lt;&lt; 32) - 1))
        else:
             return Int32(int.__rshift__(self, other))
    ...

&gt;&gt;&gt; -Int32(5)
4294967291
&gt;&gt;&gt; (-Int32(5)) &gt;&gt; 1
4294967293
</snippet></ROW><ROW><id>5994892</id><snippet>subprocess.call()</snippet></ROW><ROW><id>5994892</id><snippet>os.system()</snippet></ROW><ROW><id>5994892</id><snippet>subprocess.call(["ffmpeg", "-i", sys.argv[1], "-acodec", "alac",
                 sys.argv[1][:-5] + ".m4a"])
</snippet></ROW><ROW><id>5995007</id><snippet>import pwd
import grp
import os

uid = pwd.getpwnam("nobody").pw_uid
gid = grp.getgrnam("nogroup").gr_gid
path = '/tmp/f.txt'
os.chown(path, uid, gid)
</snippet></ROW><ROW><id>5995134</id><snippet>testselect</snippet></ROW><ROW><id>5995134</id><snippet>asyncore examples</snippet></ROW><ROW><id>5995134</id><snippet>TimeChannel</snippet></ROW><ROW><id>5995134</id><snippet>socket.AF_INET</snippet></ROW><ROW><id>5995134</id><snippet>socket.AF_UNIX</snippet></ROW><ROW><id>5995134</id><snippet>socket.SOCK_DGRAM</snippet></ROW><ROW><id>5995134</id><snippet>socket.SOCK_STREAM</snippet></ROW><ROW><id>5995134</id><snippet>self.listen([backlog])</snippet></ROW><ROW><id>5995134</id><snippet>handle_accept()</snippet></ROW><ROW><id>5995134</id><snippet>writable</snippet></ROW><ROW><id>5995134</id><snippet>handle_write</snippet></ROW><ROW><id>5995134</id><snippet>'buffer'</snippet></ROW><ROW><id>5995134</id><snippet>handle_connect</snippet></ROW><ROW><id>5995134</id><snippet>handle_read</snippet></ROW><ROW><id>5995134</id><snippet>    def __init__(self):
        ...
        self.buffer = ''

    def handle_connect(self):
        self.buffer = 'buffer'
</snippet></ROW><ROW><id>5995134</id><snippet>socat</snippet></ROW><ROW><id>5995134</id><snippet>import asyncore, socket, os

class testselect(asyncore.dispatcher):

    path = '/tmp/mysocket'

    def __init__(self):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind(self.path)
        self.listen(5)

    def handle_accept(self):
        client = self.accept()
        if client is None:
            pass
        else:
            handler = testhandler(*client)

class testhandler(asyncore.dispatcher_with_send):

    def __init__(self, sock, addr):
        asyncore.dispatcher_with_send.__init__(self, sock)
        self.addr = addr
        self.buffer = 'greetings'

    def handle_read(self):
        print self.recv(8192)

    def writable(self):
        return (len(self.buffer) &gt; 0)

    def handle_write(self):
        self.send(self.buffer)
        self.buffer = ''

    def handle_close(self):
        self.close()

server = testselect()
try:
    asyncore.loop()
finally:
    if os.path.exists(testselect.path):
        os.unlink(testselect.path)
</snippet></ROW><ROW><id>5995313</id><snippet>import ctypes

VAR_TYPE = ctypes.c_int
TT_EMPTY  = 0
TT_ERROR  = 1
TT_LONG   = 2
TT_DOUBLE = 3
TT_STRING = 4

VRESULT = ctypes.c_int
VR_OK          =  0
VR_OUTOFMEMORY = -1
VR_BADVARTYPE  = -2
VR_INVALIDARG  = -3
VR_INVALIDROW  = -4
VR_INVALIDCOL  = -5

class _U(ctypes.Union):
    _fields_ = [
        ('lVal',ctypes.c_long),
        ('dVal',ctypes.c_double),
        ('sVal',ctypes.c_char_p),
        ('vresult',VRESULT)]

class VAR(ctypes.Structure):
    _anonymous_ = ('u',)
    _fields_ = [
        ('type',VAR_TYPE),
        ('u',_U)]
</snippet></ROW><ROW><id>5995504</id><snippet>def foo():
  return 'bar', 42

a, b = foo()
</snippet></ROW><ROW><id>5995504</id><snippet>a, b = [c, d]
</snippet></ROW><ROW><id>5995504</id><snippet>a, b, *c = (1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>5995542</id><snippet>import Tkinter as tk

class App(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.op = tk.StringVar(self)
        self.op.set("enable")
        self.om = tk.OptionMenu(self, self.op, "enable","disable", command=self.OnOption)
        self.entry = tk.Entry(self, width=30)
        self.om.pack()
        self.entry.pack()

    def OnOption(self, event):
        state = "normal" if self.op.get() == "enable" else "disabled"
        self.entry.configure(state=state)

app=App()
app.mainloop()
</snippet></ROW><ROW><id>5995815</id><snippet>mapper(Address, addresses_table,
            exclude_properties=['street', 'city', 'state', 'zip'])
</snippet></ROW><ROW><id>5995904</id><snippet>&gt;&gt;&gt; x = 36895
&gt;&gt;&gt; ((x &lt;&lt; 8) | (x &gt;&gt; 8)) &amp; 0xFFFF
8080
&gt;&gt;&gt; hex(x)
'0x901f'
&gt;&gt;&gt; struct.unpack('&lt;H',struct.pack('&gt;H',x))[0]
8080
&gt;&gt;&gt; hex(8080)
'0x1f90'
</snippet></ROW><ROW><id>5996064</id><snippet>int</snippet></ROW><ROW><id>5996064</id><snippet>&gt;&gt;&gt; socket.ntohl(16777215)
4294967040L
&gt;&gt;&gt; hex(4294967040)
'0xffffff00L'
</snippet></ROW><ROW><id>5996064</id><snippet>int</snippet></ROW><ROW><id>5996064</id><snippet>long</snippet></ROW><ROW><id>5996170</id><snippet>main()
/*
 * Compile, link and run with something like:
 *    gcc -o xprint_buildinfo -L[ATLAS lib dir] -latlas ; ./xprint_buildinfo
 * if link fails, you are using ATLAS version older than 3.3.6.
 */
{
   void ATL_buildinfo(void);
   ATL_buildinfo();
   exit(0);
}
</snippet></ROW><ROW><id>5996309</id><snippet>return render_to_response('sitfin/conturi_introducere.html',{'formset':formset},
context_instance=RequestContext(request))
</snippet></ROW><ROW><id>5996419</id><snippet>    program test

    real*8 :: x(4000), start, finish, s
    integer :: i, j
    integer,parameter :: jmax = 100000

    x(:) = 4.65
    s = 0.
    call cpu_time(start)
    do j=1,jmax
        s = s + dot_product(x, x)
    enddo
    call cpu_time(finish)
    print *, (finish-start)/jmax * 1.e6, s

    end program test
</snippet></ROW><ROW><id>5996456</id><snippet>append()</snippet></ROW><ROW><id>5996456</id><snippet>None</snippet></ROW><ROW><id>5996456</id><snippet>l = f()
l.append('a')
...
</snippet></ROW><ROW><id>5996753</id><snippet>import win32api

try:
    info = win32api.GetFileVersionInfo('rpmsrv.exe', "\\")
    ms = info['FileVersionMS']
    ls = info['FileVersionLS']
    __version__ = "%d.%d.%d.%d" % (win32api.HIWORD(ms), win32api.LOWORD (ms),
                                 win32api.HIWORD (ls), win32api.LOWORD (ls))
except:
    __version__ = '5.1.1.000' # some appropriate default here.
</snippet></ROW><ROW><id>5996949</id><snippet>def clamp(n, minn, maxn):
    return max(min(maxn, n), minn)
</snippet></ROW><ROW><id>5996949</id><snippet>clamp = lambda n, minn, maxn: max(min(maxn, n), minn)
</snippet></ROW><ROW><id>5996949</id><snippet>n = clamp(n, 7, 42)
</snippet></ROW><ROW><id>5996949</id><snippet>n = minn if n &lt; minn else maxn if n &gt; maxn else n
</snippet></ROW><ROW><id>5996949</id><snippet>def clamp(n, minn, maxn):
    if n &lt; minn:
        return minn
    elif n &gt; maxn:
        return maxn
    else:
        return n
</snippet></ROW><ROW><id>5996993</id><snippet>class MyWindow ...

    # here's the button's callback
    def on_simulate(self, button):
      self.job_aborted = False
      args = self.makeargs()  # returns a list of command-line args, first is program
      gobject.idle_add(self.job_monitor(args).next)


    def job_monitor(self, args):
       self.state_running()  # disable some window controls
       yield True  # allow the UI to refresh

       # set non-block stdout from the child process
       p  = subprocess.Popen(args, stdout=subprocess.PIPE)
       fd = p.stdout.fileno()
       fl = fcntl.fcntl(fd, fcntl.F_GETFL)
       fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

       while True:

         if self.job_aborted:
           os.kill(p.pid, signal.SIGTERM)
           break

         poll = p.poll()
         if poll is not None:
           break

         try:
           line = p.stdout.readline()
           if line:
              line = line.strip()
              # update display

         except IOError:
           pass

         yield True

       self.state_ready()  # re-enable controls
       if self.job_aborted:
         # user aborted
       else:
         # success!
</snippet></ROW><ROW><id>5997080</id><snippet>import pyinotify,subprocess
def onChange(ev):
    cmd = ['/bin/echo', 'File', ev.pathname, 'changed']
    subprocess.Popen(cmd).communicate()
wm = pyinotify.WatchManager()
wm.add_watch('file.watched', pyinotify.IN_MODIFY, onChange)
notifier = pyinotify.Notifier(wm)
notifier.loop()
</snippet></ROW><ROW><id>5997080</id><snippet>cmd</snippet></ROW><ROW><id>5997080</id><snippet>file.watched</snippet></ROW><ROW><id>5997083</id><snippet>&gt;&gt;&gt; s = 'my string with \\"double quotes\\" blablabla'
&gt;&gt;&gt; s
'my string with \\"double quotes\\" blablabla'
&gt;&gt;&gt; print s
my string with \"double quotes\" blablabla
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5997083</id><snippet>&gt;&gt;&gt; s = """my string with "double quotes" blablabla"""
'my string with "double quotes" blablabla'
&gt;&gt;&gt; print s.replace('"', '\\"')
my string with \"double quotes\" blablabla
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5997173</id><snippet>import re

digits = re.compile(r'(\d+)')
def tokenize(filename):
    return tuple(int(token) if match else token
                 for token, match in
                 ((fragment, digits.search(fragment))
                  for fragment in digits.split(filename)))

# Now you can sort your PDF file names like so:
pdfList.sort(key=tokenize)
</snippet></ROW><ROW><id>5997223</id><snippet>SOUTH_MIGRATION_MODULES = {
    'books': 'myproject.app_name.migrations',
}
</snippet></ROW><ROW><id>5997409</id><snippet>import heapq

class PrioritySet(object):
    def __init__(self):
        self.heap = []
        self.set = set()

    def add(self, d, pri):
        if not d in self.set:
            heapq.heappush(self.heap, (pri, d))
            self.set.add(d)

    def get(self):
        pri, d = heapq.heappop(self.heap)
        self.set.remove(d)
        return d
</snippet></ROW><ROW><id>5997419</id><snippet>str()</snippet></ROW><ROW><id>5997419</id><snippet>&gt;&gt;&gt; print repr(math.pi)
3.1415926535897931
&gt;&gt;&gt; print str(math.pi)
3.14159265359
</snippet></ROW><ROW><id>5997419</id><snippet>olddir+self.colsize</snippet></ROW><ROW><id>5997419</id><snippet>2*math.pi</snippet></ROW><ROW><id>5997419</id><snippet>2*math.pi</snippet></ROW><ROW><id>5997460</id><snippet>qs = OptionVote.objects.all()
form = OptionVoteForm(qs, request.POST)
</snippet></ROW><ROW><id>5997871</id><snippet>os.kill(programID.pid, signal.SIGSTOP)
</snippet></ROW><ROW><id>5997871</id><snippet>os.kill(programID.pid, signal.SIGCONT)
</snippet></ROW><ROW><id>5998157</id><snippet>trends</snippet></ROW><ROW><id>5998157</id><snippet>api.twitter.com</snippet></ROW><ROW><id>5998157</id><snippet>import twitter
twitter_search = twitter.Twitter(domain="api.twitter.com")
print twitter_search.trends()

{u'trends': [{u'url': u'http://search.twitter.com/search?q=%23weedcommandments', 
 u'name': u'#weedcommandments'}, ...
</snippet></ROW><ROW><id>5998204</id><snippet>PinPortal</snippet></ROW><ROW><id>5998204</id><snippet>plpgsql.so</snippet></ROW><ROW><id>5998359</id><snippet>import time
millis = int(round(time.time() * 1000))
print millis
</snippet></ROW><ROW><id>5998359</id><snippet>import time

current_milli_time = lambda: int(round(time.time() * 1000))
</snippet></ROW><ROW><id>5998359</id><snippet>&gt;&gt;&gt; current_milli_time()
1378761833768
</snippet></ROW><ROW><id>5998373</id><snippet>sorted</snippet></ROW><ROW><id>5998373</id><snippet>self.mx = sorted(self.mx, key=itemgetter(5))
</snippet></ROW><ROW><id>5998672</id><snippet>location_in  = 'London, Greater London, England, United Kingdom'
locations    = location_in.split(', ')
location_out = [', '.join(locations[n:]) for n in range(len(locations))]
</snippet></ROW><ROW><id>5998755</id><snippet>float('nan')</snippet></ROW><ROW><id>5998755</id><snippet>float('inf')</snippet></ROW><ROW><id>5998755</id><snippet>line = line.replace('1.#INF00','inf')
line = line.replace('1.#IND00','nan')
vals = line.split(' ')
myarray = array([float(x) for x in vals])
</snippet></ROW><ROW><id>5998844</id><snippet>data = ((1,), (3,))
print [x[0] for x in data]
</snippet></ROW><ROW><id>5998919</id><snippet>__init__.py</snippet></ROW><ROW><id>5998919</id><snippet>from dc_functions.dcfunc import function_name
</snippet></ROW><ROW><id>5999004</id><snippet>return</snippet></ROW><ROW><id>5999004</id><snippet>def F1 (A):
   return A+1

def F2 (B):
   C=B+1
   print C

# Then use it as parameter
F2(F1(1))
</snippet></ROW><ROW><id>5999076</id><snippet>undefer</snippet></ROW><ROW><id>5999292</id><snippet>getheaders()</snippet></ROW><ROW><id>5999292</id><snippet>list</snippet></ROW><ROW><id>5999292</id><snippet>&gt;&gt;&gt; msg = resp.info()
&gt;&gt;&gt; msg.getheaders('Set-Cookie')
['PREF=ID=5975a5ee255f0949:FF=0:TM=1305336283:LM=1305336283:S=1vkES6eF4Yxd-_oM; expires=Mon, 13-May-2013 01:24:43 GMT; path=/; domain=.google.com.au', 'NID=46=lQVFZg6yKUsoWT529Hqp5gA8B_CKYd2epPIbANmw_J0UzeMt2BhuMF-gtmGsRhenUTeajKz2zILXd9xWpHWT8ZGvDcmNdkzaGX-L_-sKyY1w4e2l3DKd80JzSkt2Vp-H; expires=Sun, 13-Nov-2011 01:24:43 GMT; path=/; domain=.google.com.au; HttpOnly']
</snippet></ROW><ROW><id>5999292</id><snippet>list</snippet></ROW><ROW><id>5999292</id><snippet>string</snippet></ROW><ROW><id>5999292</id><snippet>list</snippet></ROW><ROW><id>5999292</id><snippet>str.startswith()</snippet></ROW><ROW><id>5999292</id><snippet>&gt;&gt;&gt; cookies = msg.getheaders('Set-Cookie')
&gt;&gt;&gt; for cookie in cookies:
...     if cookie.startswith('PREF='):
...             print 'Got PREF: ', cookie
...     else:
...             print 'Got another: ', cookie
... 
Got PREF:  PREF=ID=5975a5ee255f0949:FF=0:TM=1305336283:LM=1305336283:S=1vkES6eF4Yxd-_oM; expires=Mon, 13-May-2013 01:24:43 GMT; path=/; domain=.google.com.au
Got another:  NID=46=lQVFZg6yKUsoWT529Hqp5gA8B_CKYd2epPIbANmw_J0UzeMt2BhuMF-gtmGsRhenUTeajKz2zILXd9xWpHWT8ZGvDcmNdkzaGX-L_-sKyY1w4e2l3DKd80JzSkt2Vp-H; expires=Sun, 13-Nov-2011 01:24:43 GMT; path=/; domain=.google.com.au; HttpOnly
</snippet></ROW><ROW><id>5999292</id><snippet>% python
Python 2.7.1 (r271:86832, Jan 29 2011, 13:30:16) 
[GCC 4.2.1 (Apple Inc. build 5664)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; req = urllib2.Request('http://www.google.com')
&gt;&gt;&gt; resp = urllib2.urlopen(req)
&gt;&gt;&gt; help(resp.info())
</snippet></ROW><ROW><id>5999599</id><snippet>class C(object):
    a = 17

    @staticmethod
    def b(x):
      return x+1
</snippet></ROW><ROW><id>5999599</id><snippet>class C(object):
    a = 17
    b = staticmethod(lambda x : x+1)
</snippet></ROW><ROW><id>5999718</id><snippet>-e</snippet></ROW><ROW><id>5999718</id><snippet>requirements.txt</snippet></ROW><ROW><id>5999718</id><snippet>git</snippet></ROW><ROW><id>5999718</id><snippet>src</snippet></ROW><ROW><id>5999718</id><snippet>/src</snippet></ROW><ROW><id>5999718</id><snippet>.gitignore</snippet></ROW><ROW><id>5999718</id><snippet>site-packages</snippet></ROW><ROW><id>6000089</id><snippet>            # Scaling by PIL (Python Imaging Library) - improved Lanczos
            array = numpy.zeros((querysize, querysize, tilebands), numpy.uint8)
            for i in range(tilebands):
                    array[:,:,i] = gdalarray.BandReadAsArray(dsquery.GetRasterBand(i+1), 0, 0, querysize, querysize)
            im = Image.fromarray(array, 'RGBA') # Always four bands
            im1 = im.resize((tilesize,tilesize), Image.BILINEAR)
            if os.path.exists(tilefilename):
                    im0 = Image.open(tilefilename)
                    im1 = Image.composite(im1, im0, im1)
            im1AsArray = numpy.array(im1)
            alpha = im1AsArray[:,:,3]
            semiTransparentIndices = alpha &lt; 255
            alpha[semiTransparentIndices] = 0
            im1AsArray[:,:,3] = alpha
            im1 = Image.fromarray(im1AsArray, 'RGBA')
            im1.save(tilefilename,self.tiledriver)
</snippet></ROW><ROW><id>6000089</id><snippet>-r antialias</snippet></ROW><ROW><id>6000089</id><snippet>-r antialias</snippet></ROW><ROW><id>6000317</id><snippet>&gt;&gt;&gt; # Style 2: Explicit tuple
&gt;&gt;&gt; for i in (x, y, z):
        print(i)
</snippet></ROW><ROW><id>6000438</id><snippet>None</snippet></ROW><ROW><id>6000438</id><snippet>None</snippet></ROW><ROW><id>6000438</id><snippet>foobar</snippet></ROW><ROW><id>6000438</id><snippet>None</snippet></ROW><ROW><id>6000438</id><snippet>def foobar(arg):
  if check:
    return result
# If not check, then None will be returned
</snippet></ROW><ROW><id>6000438</id><snippet>None</snippet></ROW><ROW><id>6000782</id><snippet>root.bind('&lt;Control-Q&gt;', _quit) 
</snippet></ROW><ROW><id>6000782</id><snippet>root.bind('&lt;Control-Q&gt;', _quit())
</snippet></ROW><ROW><id>6000782</id><snippet>from Tkinter import *

root = Tk()
root.title("Test")

def _quit(event):
    root.destroy()

m = Menu(root)
root.config(menu=m)

fm = Menu(m, tearoff=0)
m.add_cascade(label="File", menu=fm)
fm.add_command(label="Quit", command=lambda: _quit(None), accelerator='Ctrl+Q')

root.bind('&lt;Control-Q&gt;', _quit)
root.bind('&lt;Control-q&gt;', _quit)

root.mainloop()
</snippet></ROW><ROW><id>6000794</id><snippet>.date()</snippet></ROW><ROW><id>6000794</id><snippet>date</snippet></ROW><ROW><id>6000794</id><snippet>In [5]: dt
Out[5]: datetime.datetime(2010, 7, 1, 0, 0)
In [6]: dt.date()
Out[6]: datetime.date(2010, 7, 1)
</snippet></ROW><ROW><id>6000794</id><snippet>0, 0</snippet></ROW><ROW><id>6000794</id><snippet>1 &lt;= day &lt;= 31</snippet></ROW><ROW><id>6000827</id><snippet>DrawText()</snippet></ROW><ROW><id>6000827</id><snippet>self.Text</snippet></ROW><ROW><id>6000827</id><snippet>None</snippet></ROW><ROW><id>6000827</id><snippet>def Draw(self) :
    mdc = self.MemoryDC
    dc_width, dc_height = mdc.GetSizeTuple()
    text_width, text_height, descent, externalLeading = mdc.GetFullTextExtent(self.TextString)
    x = (dc_width  - text_width)  / 2
    y = (dc_height - text_height) / 2
    mdc.SetTextForeground('Blue')
    mdc.DrawText(self.TextString, x, y)
</snippet></ROW><ROW><id>6000866</id><snippet>import subprocess, os

subprocess.Popen('cmd.exe')

os.system("cmd.exe") 
</snippet></ROW><ROW><id>6000878</id><snippet>from twython import Twython

twitter = Twython()
followers = twitter.get_followers_ids(screen_name = "ryanmcgrath")

for follower_id in followers:
    print "User with ID %d is following ryanmcgrath" % follower_id
</snippet></ROW><ROW><id>6001223</id><snippet>return [note for note in self.notes if note.match(filter)]
</snippet></ROW><ROW><id>6001223</id><snippet>self.notes</snippet></ROW><ROW><id>6001223</id><snippet>[1000 * x for x in myNumbers if x &lt; 2]
</snippet></ROW><ROW><id>6001250</id><snippet>use_unicode</snippet></ROW><ROW><id>6001268</id><snippet>sprite.x=20  
pixels=10  
def update(dt):
    if sprite.x != 40:  
        if move_right == True:  
            sprite.x = min(sprite.x + pixels * dt, 40)
pyglet.clock.schedule_interval(update, 1/60.0)
</snippet></ROW><ROW><id>6001328</id><snippet>optparse</snippet></ROW><ROW><id>6001328</id><snippet>getopt()</snippet></ROW><ROW><id>6001328</id><snippet>try:
  import optparse
except ImportError:
  import external.optparse as optparse
</snippet></ROW><ROW><id>6001328</id><snippet>external/__init__.py</snippet></ROW><ROW><id>6002821</id><snippet>def recursiveRef(nested,depth):
    """Return element from nested list
    list -&gt;int
    """
    if len(depth) == 0:
        return nested
    else:
        return recursiveRef(nested[depth[0]],depth[1:])

print recursiveRef([[1,2,3],[4,[5,6],7]],[1])
print recursiveRef([[1,2,3],[4,[5,6],7]],[1,1])
print recursiveRef([[1,2,3],[4,[5,6],7]],[1,1,1])
</snippet></ROW><ROW><id>6002821</id><snippet>[4, [5, 6], 7]
[5, 6]
6
</snippet></ROW><ROW><id>6003507</id><snippet>nose/core.py</snippet></ROW><ROW><id>6003507</id><snippet>TestProgram</snippet></ROW><ROW><id>6003507</id><snippet>...
extra_args = {}
version = sys.version_info[0:2]
if version &gt;= (2,7) and version != (3,0):
    extra_args['exit'] = exit
unittest.TestProgram.__init__(
    self, module=module, defaultTest=defaultTest,
    argv=argv, testRunner=testRunner, testLoader=testLoader,
    **extra_args)
</snippet></ROW><ROW><id>6003507</id><snippet>TestProgram</snippet></ROW><ROW><id>6003507</id><snippet>unittest/main.py</snippet></ROW><ROW><id>6003507</id><snippet>exit</snippet></ROW><ROW><id>6003507</id><snippet>class TestProgram(object):
    ...
    def __init__(self, module='__main__', defaultTest=None, argv=None,
                    testRunner=None, testLoader=loader.defaultTestLoader,
                    exit=True, verbosity=1, failfast=None, catchbreak=None,
                    buffer=None):
        ...
</snippet></ROW><ROW><id>6003507</id><snippet>unittest</snippet></ROW><ROW><id>6003507</id><snippet>unittest\main.py</snippet></ROW><ROW><id>6003507</id><snippet>C:\Python27</snippet></ROW><ROW><id>6003507</id><snippet>TestProgram</snippet></ROW><ROW><id>6003507</id><snippet>exit</snippet></ROW><ROW><id>6003740</id><snippet>boto</snippet></ROW><ROW><id>6004085</id><snippet>import subprocess

fd = open(filename, 'r')
subprocess.Popen(['mysql', '-u', username, '-p{}'.format(password), '-h', hostname, database], stdin=fd).wait()
</snippet></ROW><ROW><id>6004154</id><snippet>    @Cacheable(keyScript="#account.id")
    public double getNetWorth(Account account) {
       ... expensive computation
    }
</snippet></ROW><ROW><id>6004154</id><snippet>    def getNetWorth(account: Account) : Double = {
        cacheable(keyScript=account.id) {
          ... expensive computation
        }
    }   
</snippet></ROW><ROW><id>6004154</id><snippet>keyScript</snippet></ROW><ROW><id>6004154</id><snippet>@Service</snippet></ROW><ROW><id>6004154</id><snippet>transactional {}</snippet></ROW><ROW><id>6004154</id><snippet>secured {}</snippet></ROW><ROW><id>6004263</id><snippet>import test</snippet></ROW><ROW><id>6004263</id><snippet>test.printline()</snippet></ROW><ROW><id>6004263</id><snippet>test</snippet></ROW><ROW><id>6004263</id><snippet>test</snippet></ROW><ROW><id>6004263</id><snippet>sys.path</snippet></ROW><ROW><id>6004263</id><snippet>sys.path.insert(0, "...")
</snippet></ROW><ROW><id>6004388</id><snippet>import csv

file1 = 'C:/Users/Me/Desktop/file1'
file2 = 'C:/Users/Me/Desktop/file2'

reader1 = csv.reader(open(file1))
reader2 = csv.reader(open(file2))

F1 = set(''.join(row1[0].strip().split()[1:6]) for row1 in reader1)
F2 = set(''.join(row2[0].strip().split()) for row2 in reader2)

for sequence in F1.intersection(F2):
    print(sequence[:-4]),
    print('\t'),
    print(sequence[-4:])
</snippet></ROW><ROW><id>6004388</id><snippet>chr6s3+e3   ggcg
chr5s1+e1   cttt
</snippet></ROW><ROW><id>6004465</id><snippet>variable = re.search("[a-zA-Z0-9]+[a-zA-Z0-9\-' ]+[a-zA-Z0-9]+", variable).group(0)
variable = re.sub("([ '\-])\\1+", "\\1", variable)
</snippet></ROW><ROW><id>6004832</id><snippet>Component</snippet></ROW><ROW><id>6004832</id><snippet>IWikiSyntaxProvider</snippet></ROW><ROW><id>6004832</id><snippet>[a:1234]</snippet></ROW><ROW><id>6004832</id><snippet>[g:e2a1b3caadd0986e3e3d316c01965a2495329b87]</snippet></ROW><ROW><id>6004832</id><snippet>[y:CComponent]</snippet></ROW><ROW><id>6004832</id><snippet>a    http://my.acunote.site/ticket/$1                  # Acunote ticket $1
g    https://github.com/peritor/webistrano/commit/$1   # Changeset $1 on Github
y    http://www.yiiframework.com/doc/api/1.1/$1        # Yii documentation for $1
</snippet></ROW><ROW><id>6005055</id><snippet>Project</snippet></ROW><ROW><id>6005055</id><snippet>class Project(db.Model):
    admin = db.ReferenceProperty()
</snippet></ROW><ROW><id>6005087</id><snippet>if formset is valid</snippet></ROW><ROW><id>6005087</id><snippet>if form is valid.</snippet></ROW><ROW><id>6005180</id><snippet>%s</snippet></ROW><ROW><id>6005180</id><snippet>str()</snippet></ROW><ROW><id>6005180</id><snippet>%r</snippet></ROW><ROW><id>6005180</id><snippet>repr()</snippet></ROW><ROW><id>6005180</id><snippet>repr()</snippet></ROW><ROW><id>6005180</id><snippet>&gt;&gt;&gt; d = datetime.date.today()
&gt;&gt;&gt; str(d)
'2011-05-14'
&gt;&gt;&gt; repr(d)
'datetime.date(2011, 5, 14)'
</snippet></ROW><ROW><id>6005180</id><snippet>repr()</snippet></ROW><ROW><id>6005180</id><snippet>file</snippet></ROW><ROW><id>6005217</id><snippet>dic2 = dict(dic0, **dic1)
</snippet></ROW><ROW><id>6005217</id><snippet>dic0.update(dic1)
</snippet></ROW><ROW><id>6005265</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'cmd' is not defined
</snippet></ROW><ROW><id>6005325</id><snippet>class BaseClass :
    def __init__ (self, _dict=None) :
        self.Dict = _dict or {}
</snippet></ROW><ROW><id>6005399</id><snippet>listA = (
    ('chr1', 'aatt'),
    ('chr8', 'tagg'),
    ('chr11', 'aaaa'),
    ('chr7', 'gtag'),
)

listB = (
    ('chr8', 'tagt'),
    ('chr1', 'tttt'),
    ('chr7', 'gtag'),
    ('chr11','aaaa'),
    ('chr9', 'atat'),
)

combined = set(listA).intersection(set(listB))
for c, d in combined:
    print c, d
</snippet></ROW><ROW><id>6005399</id><snippet>&amp;</snippet></ROW><ROW><id>6005399</id><snippet>combined = set(listA) &amp; set(listB)
</snippet></ROW><ROW><id>6005505</id><snippet>NSEvent</snippet></ROW><ROW><id>6005505</id><snippet>addGlobalMonitorForEventsMatchingMask:handler:</snippet></ROW><ROW><id>6005505</id><snippet>def callback(event):
    NSLog(u"%s" % event)

NSEvent.addGlobalMonitorForEventsMatchingMask_handler_(NSScrollWheelMask, callback)
</snippet></ROW><ROW><id>6005505</id><snippet>deltaX</snippet></ROW><ROW><id>6005505</id><snippet>addLocalMonitorForEventsMatchingMask:handler:</snippet></ROW><ROW><id>6005649</id><snippet>cmd2 = ['grep', '--line-buffered', '-a', '-o', '-E', 'Host\: .*|GET \/.*']
</snippet></ROW><ROW><id>6006076</id><snippet>wx.EVT_SIZE</snippet></ROW><ROW><id>6006076</id><snippet>import wx

class SizeEvent(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title)

        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Centre()
        self.SetSizeWH(400, 300)
        self.Show(True)

    def OnSize(self, event):
        hsize = event.GetSize()[0] * 0.75
        self.SetSizeHints(minW=-1, minH=hsize, maxH=hsize)
        self.SetTitle(str(event.GetSize()))

app = wx.App()
SizeEvent(None, 1, 'sizeevent.py')
app.MainLoop()
</snippet></ROW><ROW><id>6006285</id><snippet>&gt;&gt;&gt; y = 'stackoverflow'
&gt;&gt;&gt; x = 'stackover'
&gt;&gt;&gt; if re.match('^%s' % x, y):
...     print "success"
... 
success
</snippet></ROW><ROW><id>6006285</id><snippet>&gt;&gt;&gt; if re.match('^{0}'.format(x), y):
...     print "success"
... 
success
</snippet></ROW><ROW><id>6006285</id><snippet>'^'</snippet></ROW><ROW><id>6006285</id><snippet>.match()</snippet></ROW><ROW><id>6006331</id><snippet>python -c 'print("hello world")'</snippet></ROW><ROW><id>6006351</id><snippet>"(C) 2011 Snifty Stack. GNU GPL 3.\n 
&lt;list of functions used&gt; (C) 2004-2008 Jane Doe. GNU GPL 3."
</snippet></ROW><ROW><id>6006373</id><snippet>wx.TextCtrl.SetSelection(from, to)</snippet></ROW><ROW><id>6006976</id><snippet>turtle.py</snippet></ROW><ROW><id>6006976</id><snippet>% python
Python 2.7.1 (r271:86832, Jan 29 2011, 13:30:16) 
[GCC 4.2.1 (Apple Inc. build 5664)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path
[...] # Your ${PYTHONPATH}
&gt;&gt;&gt; import turtle
&gt;&gt;&gt; turtle.__file__
'/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk/turtle.pyc' # Should be under your Python installation.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6006976</id><snippet>&gt;&gt;&gt; import turtle
&gt;&gt;&gt; turtle.__file__
'turtle.py'
</snippet></ROW><ROW><id>6006976</id><snippet>turtle.py</snippet></ROW><ROW><id>6006976</id><snippet>turtle.pyc</snippet></ROW><ROW><id>6006976</id><snippet>turtle.pyo</snippet></ROW><ROW><id>6006976</id><snippet>help()</snippet></ROW><ROW><id>6006976</id><snippet>&gt;&gt;&gt; import turtle
&gt;&gt;&gt; help(turtle)
</snippet></ROW><ROW><id>6007063</id><snippet>Exception</snippet></ROW><ROW><id>6007063</id><snippet>class YourError( Exception ): pass
</snippet></ROW><ROW><id>6007063</id><snippet>raise YourError("error message")
</snippet></ROW><ROW><id>6007144</id><snippet>&lt;button class="bb" id="bb{{feed.id}}"&gt;Add Comment&lt;/button&gt;
&lt;div class="commentbox" style="display:none;"&gt;
</snippet></ROW><ROW><id>6007144</id><snippet>$(document).ready(function() {
  $(".bb").each(function(){
    $(this).click(function () {
      $(this).next().toggle("slow");
    });
  });
});
</snippet></ROW><ROW><id>6007173</id><snippet>hl</snippet></ROW><ROW><id>6007173</id><snippet>hl</snippet></ROW><ROW><id>6007173</id><snippet>hl</snippet></ROW><ROW><id>6007757</id><snippet>&gt;&gt;&gt; print type(1,2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: type() takes 1 or 3 arguments

&gt;&gt;&gt; print type((1,))
&lt;type 'tuple'&gt;

&gt;&gt;&gt; a = 1,
&gt;&gt;&gt; type(a)
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>6007757</id><snippet>&gt;&gt;&gt; print type(1,)
&gt;&gt;&gt; print type(1)
</snippet></ROW><ROW><id>6007802</id><snippet>pdb.set_trace()</snippet></ROW><ROW><id>6007819</id><snippet>sum((m - r + 1) * (n - r + 1) for r in xrange(1,n+1))
</snippet></ROW><ROW><id>6007819</id><snippet>*</snippet></ROW><ROW><id>6007819</id><snippet>f(x) for x in xes</snippet></ROW><ROW><id>6007819</id><snippet>x</snippet></ROW><ROW><id>6007819</id><snippet>xes</snippet></ROW><ROW><id>6007819</id><snippet>f(x)</snippet></ROW><ROW><id>6007901</id><snippet>x = [0] * n</snippet></ROW><ROW><id>6007901</id><snippet>&gt;&gt;&gt; [0]*10
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>6007901</id><snippet>&gt;&gt;&gt; [1, 2, 3] * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
</snippet></ROW><ROW><id>6007901</id><snippet>**</snippet></ROW><ROW><id>6007901</id><snippet>&gt;&gt;&gt; 3**2
9
</snippet></ROW><ROW><id>6007963</id><snippet>&gt;&gt;&gt; zip(*2*[iter(x)])
[(0, 1), (2, 3), (4, 5), (6, 7)]
</snippet></ROW><ROW><id>6007963</id><snippet>zip()</snippet></ROW><ROW><id>6007963</id><snippet>&gt;&gt; zip(*2*[iter(x)])
&lt;zip object at 0x285c582c&gt;
&gt;&gt;&gt; list(zip(*2*[iter(x)])])
[(0, 1), (2, 3), (4, 5), (6, 7)]
</snippet></ROW><ROW><id>6007963</id><snippet>&gt;&gt;&gt; [[i,j] for i,j in zip(*2*[iter(x)])]
[[0, 1], [2, 3], [4, 5], [6, 7]]
</snippet></ROW><ROW><id>6007963</id><snippet>&gt;&gt;&gt; [list(t) for t in zip(*2*[iter(x)])]
[[0, 1], [2, 3], [4, 5], [6, 7]]
</snippet></ROW><ROW><id>6007963</id><snippet>list</snippet></ROW><ROW><id>6007963</id><snippet>&gt;&gt;&gt; [list(t) for t in zip(*4*[iter(x)])]
[[0, 1, 2, 3], [4, 5, 6, 7]]
</snippet></ROW><ROW><id>6007963</id><snippet>zip(*2*[iter(x)])</snippet></ROW><ROW><id>6007963</id><snippet>zip(*[iter(s)]*n)</snippet></ROW><ROW><id>6008172</id><snippet> sys.hash_info 
</snippet></ROW><ROW><id>6008401</id><snippet>&gt;&gt;&gt; class A(object):
...     __getitem__ = lambda self,i: 42
&gt;&gt;&gt; A()[0]
42
</snippet></ROW><ROW><id>6008401</id><snippet>&gt;&gt;&gt; class B(object):
...     def __init__(self):
...             self.__getitem__ = lambda self,i: 42
&gt;&gt;&gt; B()[0]
TypeError: 'B' object does not support indexing
</snippet></ROW><ROW><id>6008401</id><snippet>A</snippet></ROW><ROW><id>6008779</id><snippet>import sqlalchemy

# using mssql as an example because sqlalchemy uses pyodbc as the default driver for MS Sql Server
engine = sqlalchemy.create_engine("mssql://myserver/mydb")
# first column of first row is returned
username = engine.scalar("select username from users where userid = 1")
</snippet></ROW><ROW><id>6008801</id><snippet>import sys

sys.dont_write_bytecode = True
</snippet></ROW><ROW><id>6008848</id><snippet>import os
os.system("notepad")
</snippet></ROW><ROW><id>6008848</id><snippet>from subprocess import call
call(["notepad"])
</snippet></ROW><ROW><id>6009184</id><snippet>&lt;input&gt;</snippet></ROW><ROW><id>6009184</id><snippet>this.text</snippet></ROW><ROW><id>6009184</id><snippet>str</snippet></ROW><ROW><id>6009184</id><snippet>&lt;input type="text" id="sname" onkeyup="showHint(this.value)"&gt;</snippet></ROW><ROW><id>6009495</id><snippet>a.foo( .. )</snippet></ROW><ROW><id>6009495</id><snippet>MultiMethod</snippet></ROW><ROW><id>6009495</id><snippet>a</snippet></ROW><ROW><id>6009495</id><snippet>registry = {}

class MultiMethod(object):
    def __init__(self, name):
        self.name = name
        self.typemap = {}

    # self = a MultiMethod instance, instance = the object we want to bind to
    def __call__(self, instance, *args):
        types = tuple(arg.__class__ for arg in args) # a generator expression!
        function = self.typemap.get(types)

        if function is None:
            raise TypeError("no match")
        return function(instance, *args)

    def register(self, types, function):
        if types in self.typemap:
            raise TypeError("duplicate registration")
        self.typemap[types] = function

def multimethod(function):
    name = function.__name__
    mm = registry.get(name)
    if mm is None:
        mm = registry[name] = MultiMethod(name)

    types = tuple(function.__annotations__.values())
    mm.register(types, function)
    # return a function instead of a object - Python binds this automatically
    def getter(instance, *args, **kwargs):
        return mm(instance, *args, **kwargs)
    return getter

class A:
    @multimethod
    def foo(self, a: int):
        return "an int", a

a = A() 
print( a.foo( 1 ) )
</snippet></ROW><ROW><id>6009495</id><snippet>A</snippet></ROW><ROW><id>6009563</id><snippet>data_list_1 = [(x,y,c) for (x,y,c) in data_list if c=='U1']
data_list_2 = [(x,y,c) for (x,y,c) in data_list if c=='U2']
</snippet></ROW><ROW><id>6009563</id><snippet>learning_set = data_list_1[:int(round(len(data_list_1)*border))] + data_list_2[:int(round(len(data_list_2)*border))]
</snippet></ROW><ROW><id>6009563</id><snippet>test_set</snippet></ROW><ROW><id>6009563</id><snippet>classes = set([t[-1] for t in data_list])

learning_set = []
test_set = []

for cl in classes:
    data_list_filtered = [t for t in data_list if t[-1]==cl]

    learning_set += data_list_filtered[:int(round(len(data_list_filtered)*border))]
    test_set += data_list_filtered[int(round(len(data_list_filtered)*border)):]
</snippet></ROW><ROW><id>6009694</id><snippet>_fields</snippet></ROW><ROW><id>6009694</id><snippet>&gt;&gt;&gt; ast.parse('5+a')
&lt;_ast.Module object at 0x02C1F730&gt;
&gt;&gt;&gt; ast.parse('5+a').body
[&lt;_ast.Expr object at 0x02C1FF50&gt;]
&gt;&gt;&gt; ast.parse('5+a').body[0]
&lt;_ast.Expr object at 0x02C1FBF0&gt;
&gt;&gt;&gt; ast.parse('5+a').body[0]._fields
('value',)
&gt;&gt;&gt; ast.parse('5+a').body[0].value
&lt;_ast.BinOp object at 0x02C1FF90&gt;
&gt;&gt;&gt; ast.parse('5+a').body[0].value._fields
('left', 'op', 'right')
&gt;&gt;&gt; ast.parse('5+a').body[0].value.left
&lt;_ast.Num object at 0x02C1FB70&gt;
</snippet></ROW><ROW><id>6009694</id><snippet>&gt;&gt;&gt; type(ast.parse('5+a'))
&lt;class '_ast.Module'&gt;
</snippet></ROW><ROW><id>6009694</id><snippet>&gt;&gt;&gt; ast.parse('5+a')._fields
('body',)
&gt;&gt;&gt; ast.parse('5+a').body
[&lt;_ast.Expr object at 0x02E965B0&gt;]
</snippet></ROW><ROW><id>6009694</id><snippet>_fields</snippet></ROW><ROW><id>6009694</id><snippet>stmt</snippet></ROW><ROW><id>6009694</id><snippet>Expr</snippet></ROW><ROW><id>6009694</id><snippet>value</snippet></ROW><ROW><id>6009694</id><snippet>&gt;&gt;&gt; ast.parse('5+a').body[0].value
&lt;_ast.BinOp object at 0x02E96330&gt;
</snippet></ROW><ROW><id>6010043</id><snippet>l1 = ['r1', 'r1', 'r1', 'r2', 'r2', 'r3']
l2 = [1, 2, 3, 1, 2, 1]

d = {}
for i, j in zip(l1, l2):
  d[i] = d.get(i, {})
  d[i]['n%s' % j] = j
</snippet></ROW><ROW><id>6010043</id><snippet>l1 = ['r1', 'r1', 'r1', 'r2', 'r2', 'r3']
l2 = [1, 2, 3, 1, 2, 1]

d = dict((i, {}) for i in set(l1))
for i, j in zip(l1, l2):
  d[i]['n%s' % j] = j
</snippet></ROW><ROW><id>6010045</id><snippet>   logger.debug(err.headers)
</snippet></ROW><ROW><id>6010045</id><snippet>err.headers['Retry-After']</snippet></ROW><ROW><id>6010148</id><snippet>def func():
    pass
func = some_decorator(func)
</snippet></ROW><ROW><id>6010148</id><snippet>func</snippet></ROW><ROW><id>6010148</id><snippet>some_decorator</snippet></ROW><ROW><id>6010148</id><snippet>some_decorator</snippet></ROW><ROW><id>6010148</id><snippet>func</snippet></ROW><ROW><id>6010148</id><snippet>@</snippet></ROW><ROW><id>6010148</id><snippet>func</snippet></ROW><ROW><id>6010148</id><snippet>class A:
    def func():
        pass
    func = some_decorator(func)

    _decorator = func.some_decorator
    def func():
        pass
    func = _decorator(func)
</snippet></ROW><ROW><id>6010154</id><snippet>&lt;img alt="My Map" src="{{url}}" /&gt;
</snippet></ROW><ROW><id>6010302</id><snippet>with Timeout(5, False):
    data = sock.recv()
</snippet></ROW><ROW><id>6010302</id><snippet>data = gevent.with_timeout(5, sock.recv, timeout_value="")
</snippet></ROW><ROW><id>6010338</id><snippet>test_set_final = [[r, c[-1]] for [r], c in zip (test_set_final, test_set)]
</snippet></ROW><ROW><id>6010338</id><snippet>r</snippet></ROW><ROW><id>6010494</id><snippet>songs = GqlQuery('SELECT __key__ FROM song WHERE artist = :1', 'john-lennon')
playlists = GqlQuery('SELECT * FROM playlist WHERE songs IN :1', songs)
</snippet></ROW><ROW><id>6010685</id><snippet>~</snippet></ROW><ROW><id>6010685</id><snippet>os.path.expanduser()</snippet></ROW><ROW><id>6010685</id><snippet>subprocess</snippet></ROW><ROW><id>6010693</id><snippet>dumper</snippet></ROW><ROW><id>6010693</id><snippet>from dumper import C</snippet></ROW><ROW><id>6010693</id><snippet>dumper.py</snippet></ROW><ROW><id>6010693</id><snippet>dumper</snippet></ROW><ROW><id>6010693</id><snippet>__main__</snippet></ROW><ROW><id>6010693</id><snippet>sys.modules</snippet></ROW><ROW><id>6010693</id><snippet>self.d = D()</snippet></ROW><ROW><id>6010693</id><snippet>dumper.D</snippet></ROW><ROW><id>6010693</id><snippet>dumper.py</snippet></ROW><ROW><id>6010693</id><snippet>common.py</snippet></ROW><ROW><id>6010693</id><snippet>import dumper</snippet></ROW><ROW><id>6010693</id><snippet>from dumper import C</snippet></ROW><ROW><id>6010693</id><snippet>C</snippet></ROW><ROW><id>6010693</id><snippet>D</snippet></ROW><ROW><id>6010693</id><snippet>import dumper</snippet></ROW><ROW><id>6010693</id><snippet>dumper.py</snippet></ROW><ROW><id>6010803</id><snippet>__del__</snippet></ROW><ROW><id>6010803</id><snippet>__str__</snippet></ROW><ROW><id>6010803</id><snippet>__repr__</snippet></ROW><ROW><id>6010803</id><snippet>del a</snippet></ROW><ROW><id>6010803</id><snippet>a.__del__()</snippet></ROW><ROW><id>6010803</id><snippet>a</snippet></ROW><ROW><id>6010803</id><snippet>A</snippet></ROW><ROW><id>6010803</id><snippet>A1</snippet></ROW><ROW><id>6010803</id><snippet>A</snippet></ROW><ROW><id>6010803</id><snippet>a</snippet></ROW><ROW><id>6010803</id><snippet>A1</snippet></ROW><ROW><id>6010803</id><snippet>a</snippet></ROW><ROW><id>6010803</id><snippet>def override(p, methods):
    oldType = type(p)
    newType = type(oldType.__name__ + "_Override", (oldType,), methods)
    p.__class__ = newType


class Test(object):
    def __str__(self):
        return "Test"

def p(self):
    print(str(self))

def monkey(x):
    override(x, {"__del__": p})

a=Test()
b=Test()
monkey(a)
print "Deleting a:"
del a
print "Deleting b:"
del b
</snippet></ROW><ROW><id>6010878</id><snippet>+</snippet></ROW><ROW><id>6010878</id><snippet>twiddles =</snippet></ROW><ROW><id>6010878</id><snippet>twiddles[-1]</snippet></ROW><ROW><id>6010878</id><snippet>N</snippet></ROW><ROW><id>6010878</id><snippet>twiddles</snippet></ROW><ROW><id>6010878</id><snippet>N</snippet></ROW><ROW><id>6010878</id><snippet>N</snippet></ROW><ROW><id>6010893</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>6010893</id><snippet>python manage.py reset &lt;appname&gt;</snippet></ROW><ROW><id>6010905</id><snippet>oauth2</snippet></ROW><ROW><id>6011071</id><snippet>3sat.py</snippet></ROW><ROW><id>6011071</id><snippet>gsat.py</snippet></ROW><ROW><id>6011071</id><snippet>cd</snippet></ROW><ROW><id>6011071</id><snippet>./3sat.py | ./gsat.py
</snippet></ROW><ROW><id>6011071</id><snippet>python 3sat.py | python gsat.py
</snippet></ROW><ROW><id>6011298</id><snippet>os.fork()</snippet></ROW><ROW><id>6011298</id><snippet>def spawnDaemon(func):
    # do the UNIX double-fork magic, see Stevens' "Advanced 
    # Programming in the UNIX Environment" for details (ISBN 0201563177)
    try: 
        pid = os.fork() 
        if pid &gt; 0:
            # parent process, return and keep running
            return
    except OSError, e:
        print &gt;&gt;sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror) 
        sys.exit(1)

    os.setsid()

    # do second fork
    try: 
        pid = os.fork() 
        if pid &gt; 0:
            # exit from second parent
            sys.exit(0) 
    except OSError, e: 
        print &gt;&gt;sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror) 
        sys.exit(1)

    # do stuff
    func()

    # all done
    os._exit(os.EX_OK)
</snippet></ROW><ROW><id>6011502</id><snippet>__init__.py</snippet></ROW><ROW><id>6011502</id><snippet>/mydatabase/model.py</snippet></ROW><ROW><id>6011502</id><snippet>Table1</snippet></ROW><ROW><id>6011502</id><snippet>Table2</snippet></ROW><ROW><id>6011502</id><snippet>model.py</snippet></ROW><ROW><id>6011502</id><snippet>from mydatabase.model import *
</snippet></ROW><ROW><id>6011607</id><snippet>sudo apt-get install python-dev libopenmpi-dev
</snippet></ROW><ROW><id>6011688</id><snippet>read</snippet></ROW><ROW><id>6011688</id><snippet>sys.stdin</snippet></ROW><ROW><id>6011688</id><snippet>select</snippet></ROW><ROW><id>6011688</id><snippet>ans[0].read(1)</snippet></ROW><ROW><id>6011688</id><snippet>select</snippet></ROW><ROW><id>6011688</id><snippet>strace -e read,select python yourprogram.py</snippet></ROW><ROW><id>6011688</id><snippet>ans[0].read(1)</snippet></ROW><ROW><id>6011688</id><snippet>os.read(ans[0].fileno(), 1)</snippet></ROW><ROW><id>6011688</id><snippet>os.read</snippet></ROW><ROW><id>6011688</id><snippet>select</snippet></ROW><ROW><id>6011688</id><snippet>python</snippet></ROW><ROW><id>6011688</id><snippet>-u</snippet></ROW><ROW><id>6011695</id><snippet>.poll()</snippet></ROW><ROW><id>6011695</id><snippet>cat /proc/bus/input/devices
</snippet></ROW><ROW><id>6011696</id><snippet>import urllib
resp = urllib.urlopen('http://example.com/')

if resp.getcode() == 200:
    rejoice()
if resp.getcode() == 404:
    sulk()
</snippet></ROW><ROW><id>6011746</id><snippet>GeoPt</snippet></ROW><ROW><id>6011776</id><snippet>[float(i) for i in xs]</snippet></ROW><ROW><id>6011776</id><snippet>&gt;&gt;&gt; new_list = [float(i) for i in xs]
&gt;&gt;&gt; new_list
[12.0, 10.0, 32.0, 3.0, 66.0, 17.0, 42.0, 99.0, 20.0]
&gt;&gt;&gt; new_list[0]
12.0
&gt;&gt;&gt; new_list[5]
17.0
</snippet></ROW><ROW><id>6011888</id><snippet>socket.connect()</snippet></ROW><ROW><id>6011888</id><snippet>IPy.IP</snippet></ROW><ROW><id>6011888</id><snippet>svr = (str(x), 25)
</snippet></ROW><ROW><id>6011953</id><snippet>pyparsing</snippet></ROW><ROW><id>6011953</id><snippet>nltk</snippet></ROW><ROW><id>6011966</id><snippet>$ port search python | grep mysql
py-mysql @1.2.2 (python, devel, databases)
Python interface to mysql
py25-mysql @1.2.2 (python, devel, databases)
Python interface to mysql
py26-mysql @1.2.3 (python, devel, databases)
py27-mysql @1.2.2 (python, devel, databases)
Python interface to mysql
</snippet></ROW><ROW><id>6012632</id><snippet>from IPy import IP
ip = IP(sys.argv[1])
for x in ip:
    print("Connecting to: {0}".format(str(x)))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(10)
    svr = (str(x), 25)
    s.connect(svr)
    if socket.timeout:
        print("Timed out.")
    else:
       data = s.recv(2048)
       print(data)
    continue

print("Range Completed.")
sys.exit(1)
</snippet></ROW><ROW><id>6012666</id><snippet>wx.Dialog</snippet></ROW><ROW><id>6012666</id><snippet>wx.FutureCall</snippet></ROW><ROW><id>6012666</id><snippet>class MessageDialog(wx.Dialog):
    def __init__(self, message, title):
        wx.Dialog.__init__(self, None, -1, title,size=(300, 120))
        self.CenterOnScreen(wx.BOTH)

        ok = wx.Button(self, wx.ID_OK, "OK")
        ok.SetDefault()
        text = wx.StaticText(self, -1, message)

        vbox = wx.BoxSizer(wx.VERTICAL)
        vbox.Add(text, 1, wx.ALIGN_CENTER|wx.TOP, 10)
        vbox.Add(ok, 1, wx.ALIGN_CENTER|wx.BOTTOM, 10)
        self.SetSizer(vbox)

class Frame(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(100, 100),style=wx.MINIMIZE_BOX | wx.SYSTEM_MENU | wx.CAPTION | wx.CLOSE_BOX | wx.CLIP_CHILDREN)

        host=os.system('hostname')
        if host!='superman':
            dlg = MessageDialog('The host name should be superman. Closing this dialog box in 2s...', 'Info')        
            wx.FutureCall(2000, dlg.Destroy)
            dlg.ShowModal()
        else:
            self.Center()
            self.Show()
</snippet></ROW><ROW><id>6012815</id><snippet>'''</snippet></ROW><ROW><id>6013109</id><snippet>def cachedBlast(fileName, blastLocation, database, eValue, query, pipeline, remote = False, force = False):


"""
Performs a blast search using the blastp executable and database in blastLocation on
the query with the eValue. The result is an XML file saved to fileName. If fileName
already exists the search is skipped. If remote is true then the search is done remotely.
"""
  if not os.path.isfile(fileName) or force:
    output = open(fileName, "w")
    command = [blastLocation + "/bin/blastp",
               "-evalue", str(eValue),
               "-outfmt", "5",
               "-query", query]
    if remote:
      command += ["-remote",
                  "-db", database]
    else:
      command += ["-num_threads", str(Runtime.getRuntime().availableProcessors()),
                  "-db", database]
    blastProcess = subprocess.Popen(command,
                                    stdout = subprocess.PIPE)
    while blastProcess.poll() == None:
      output.write(blastProcess.stdout.read())
      if pipeline.exception:
        psProcess = subprocess.Popen(["ps", "aux"], stdout = subprocess.PIPE)
        awkProcess = subprocess.Popen(["awk", "/" + " ".join(command).replace("/", "\\/") + "/"], stdin = psProcess.stdout, stdout = subprocess.PIPE)
        for line in awkProcess.stdout:
          subprocess.Popen(["kill", "-9", re.split(r"\s+", line)[1]])
        output.close()
        raise pipeline.exception
    remaining = blastProcess.stdout.read()
    while remaining:
      output.write(remaining)
      remaining = blastProcess.stdout.read()

    output.close()

  try:
    return parseBlast(fileName)
  except SAXParseException:
    return cachedBlast(fileName, blastLocation, database, eValue, query, pipeline, remote, True)
</snippet></ROW><ROW><id>6013242</id><snippet># Python
n, p = p, n
x, y, z = z, x, y
</snippet></ROW><ROW><id>6013299</id><snippet>def foo(x):
    return x + 1

a = [1,2,3]
b = [foo(x) for x in a]
</snippet></ROW><ROW><id>6013299</id><snippet>b == [2,3,4]</snippet></ROW><ROW><id>6013299</id><snippet>[x + 1 for x in a]
</snippet></ROW><ROW><id>6013299</id><snippet>lambda</snippet></ROW><ROW><id>6013299</id><snippet>lambda x: x+1</snippet></ROW><ROW><id>6013299</id><snippet>foo</snippet></ROW><ROW><id>6013299</id><snippet>[(lambda y: y+1)(x) for x in a]
</snippet></ROW><ROW><id>6013718</id><snippet>def gcd(a, b):
    rem = a % b
    while rem != 0:
        a = b
        b = rem
        rem = a % b
    return b

def primegen():
    yield 2
    yield 3
    yield 5
    yield 7
    yield 11
    accum = 2*3*5*7
    out = file('tmp_primes.txt', 'w')
    inp = file('tmp_primes.txt', 'r+')
    out.write('0x2\n0x3\n0x5\n0x7\n0xb\n')
    inp.read(20)
    inpos = inp.tell()
    next_accum = 11
    next_square = 121
    testprime = 13
    while True:
        if gcd(accum, testprime) == 1:
            accum *= testprime # It's actually prime!
            out.writelines((hex(testprime), '\n'))
            yield testprime
        testprime += 2
        if testprime &gt;= next_square:
            accum *= next_accum
            nextline = inp.readline()
            if (len(nextline) &lt; 1) or (nextline[-1] != '\n'):
                out.flush()
                inp.seek(inpos)
                nextline = inp.readline()
            inpos = inp.tell()
            next_accum = int(nextline, 16)
            next_square = next_accum * next_accum

def next_n(iterator, n):
    """Returns the next n elements from an iterator.

    &gt;&gt;&gt; list(next_n(iter([1,2,3,4,5,6]), 3))
    [1, 2, 3]
    &gt;&gt;&gt; list(next_n(primegen(), 10))
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
    """
    while n &gt; 0:
        yield iterator.next()
        n -= 1
</snippet></ROW><ROW><id>6013865</id><snippet>parent</snippet></ROW><ROW><id>6013865</id><snippet>super</snippet></ROW><ROW><id>6013865</id><snippet>class Child(Father):
  def __init__(self):
    super(Child, self).__init__()
</snippet></ROW><ROW><id>6013944</id><snippet>logIt</snippet></ROW><ROW><id>6013944</id><snippet>for o, a in getopts:
    if o in ("-l", "--log"):  #log
    logIt(a)  # Problem here a='Big'
</snippet></ROW><ROW><id>6013944</id><snippet>print</snippet></ROW><ROW><id>6013944</id><snippet>for o, a in opts:
    if o in ("-l", "--log"):  #log
        print a  # No Problem here a=["Big String I want to as single argument"]
</snippet></ROW><ROW><id>6013944</id><snippet>C:\Python26&gt;python myscript.py -l "Big String I want to as single argument"
Big String I want to as single argument
</snippet></ROW><ROW><id>6013944</id><snippet>getopt</snippet></ROW><ROW><id>6013944</id><snippet>logIt</snippet></ROW><ROW><id>6014074</id><snippet>from PIL import Image
im = Image.open("fileName.jpg")
im.size
</snippet></ROW><ROW><id>6014074</id><snippet>import urllib2 as urllib
fd = urllib.urlopen("http://a/b/c")
im = Image.open(fd)
im.size
</snippet></ROW><ROW><id>6014197</id><snippet>config.include()</snippet></ROW><ROW><id>6014197</id><snippet># myapp/__init__.py (main config)
def main(global_config, **settings):
    config = Configurator(...)
    # basic setup of your app
    config.include('pyramid_tm')
    config.include('pyramid_jinja2')

    # add config for each of your subapps
    config.include('project.app1')
    config.include('project.app2')

    # make wsgi app
    return config.make_wsgi_app()

# myapp/app1/__init__.py (app1's config)
def includeme(config):
    config.add_route(...)
    config.scan()

# myapp/app2/__init__.py (app2's config)
def includeme(config):
    config.add_route(...)
    config.scan()
</snippet></ROW><ROW><id>6014540</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>6014540</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>6014872</id><snippet>&gt;&gt;&gt; line = "2011-05-16 09:46:22,361 [Thread-4847133] PDU D &lt;G_CC_SMS_SERVICE_51408_656.O_ CC_SMS_SERVICE_51408_656-ServerThread-VASPSessionThread-7ee35fb0-7e87-11e0-a2da-00238bce423b-TRX - 2011-05-16 09:46:22 - OUT - (submit_resp: (pdu: L: 53 ID: 80000004 Status: 0 SN: 25866) 98053090-7f90-11e0-a2da-00238bce423b (opt: ) ) &gt;"
&gt;&gt;&gt; istart = line.find('&lt;G_')
&gt;&gt;&gt; iend = line.find('.', istart)
&gt;&gt;&gt; line[istart+3:iend]
'CC_SMS_SERVICE_51408_656'
</snippet></ROW><ROW><id>6014872</id><snippet>split</snippet></ROW><ROW><id>6014872</id><snippet>&gt;&gt;&gt; line.split()
['2011-05-16', '09:46:22,361', '[Thread-4847133]', 'PDU', 'D', '&lt;G_CC_SMS_SERVICE_51408_656.O_', 'CC_SMS_SERVICE_51408_656-ServerThread-VASPSessionThread-7ee35fb0-7e87-11e0-a2da-00238bce423b-TRX', '-', '2011-05-16', '09:46:22', '-', 'OUT', '-', '(submit_resp:', '(pdu:', 'L:', '53', 'ID:', '80000004', 'Status:', '0', 'SN:', '25866)', '98053090-7f90-11e0-a2da-00238bce423b', '(opt:', ')', ')', '&gt;']
</snippet></ROW><ROW><id>6014872</id><snippet>&gt;&gt;&gt; line.split()[13]
'(submit_resp:'
</snippet></ROW><ROW><id>6014872</id><snippet>&gt;&gt;&gt; line.split()[13].lstrip('(').rstrip(':')
'submit_resp'
</snippet></ROW><ROW><id>6014997</id><snippet>/home/</snippet></ROW><ROW><id>6014997</id><snippet>next</snippet></ROW><ROW><id>6014997</id><snippet>&lt;form action="" method="post"&gt;</snippet></ROW><ROW><id>6015129</id><snippet>update_watch</snippet></ROW></DATA>