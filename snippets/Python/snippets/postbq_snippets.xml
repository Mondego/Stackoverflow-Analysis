<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>9969937</id><snippet>th</snippet></ROW><ROW><id>9969937</id><snippet>from BeautifulSoup import BeautifulSoup, Tag
soup = BeautifulSoup()
mem_attr = ['Description', 'PhysicalID', 'Slot', 'Size', 'Width']
html = Tag(soup, "html")
table = Tag(soup, "table")
tr = Tag(soup, "tr")
soup.append(html)
html.append(table)
table.append(tr)
for attr in mem_attr:
    th = Tag(soup, "th")
    tr.append(th)
    th.append(attr)

print soup.prettify()
</snippet></ROW><ROW><id>9970079</id><snippet>def input_scores():
    scores = []
    y = 1
    for num in range(5):
        score = int(input('Please enter your score for test %d: ' %y))
        while score &lt; 0 or score &gt; 100:
            print ('Error --- all test scores must be between 0 and 100 points')
            score = int(input('Please try again: '))
        scores.append(score)
        y += 1
    return scores
</snippet></ROW><ROW><id>9970192</id><snippet>listA</snippet></ROW><ROW><id>9970192</id><snippet>for i in listA[:]:
  if i &gt;= 2:
    listB.append(i)
    listA.remove(i)
</snippet></ROW><ROW><id>9970192</id><snippet>&gt;&gt;&gt; listA = [1,2,3]
&gt;&gt;&gt; listB = []
&gt;&gt;&gt; for i in listA[:]:
...   if i &gt;= 2:
...     listB.append(i)
...     listA.remove(i)
... 
&gt;&gt;&gt; listA
[1]
&gt;&gt;&gt; listB
[2, 3]
</snippet></ROW><ROW><id>9970192</id><snippet>&gt;&gt;&gt; lst = [1,2,3]
&gt;&gt;&gt; small = [a for a in lst if a &lt; 2]
&gt;&gt;&gt; big = [a for a in lst if a &gt;= 2]
&gt;&gt;&gt; small
[1]
&gt;&gt;&gt; big
[2, 3]
</snippet></ROW><ROW><id>9970271</id><snippet>__init__.py</snippet></ROW><ROW><id>9970271</id><snippet>__main__.py</snippet></ROW><ROW><id>9970362</id><snippet>default</snippet></ROW><ROW><id>9970419</id><snippet>import hashlib
import base64
url = 'http://stackoverflow.com/questions/ask'
print base64.urlsafe_b64encode(hashlib.md5(url).digest()[-4:])[:-2]
</snippet></ROW><ROW><id>9970419</id><snippet>sUEBtw
</snippet></ROW><ROW><id>9970419</id><snippet>.digest()</snippet></ROW><ROW><id>9970419</id><snippet>struct.pack</snippet></ROW><ROW><id>9970419</id><snippet>.pack('N')</snippet></ROW><ROW><id>9971049</id><snippet>itemgetter</snippet></ROW><ROW><id>9971049</id><snippet>from collections import defaultdict
from operator import itemgetter
from itertools import count

def cmp_getters(ig1, ig2):
   if any(not isinstance(x, itemgetter) for x in (ig1, ig2)):
      return False
   d1 = defaultdict(count().next)
   d2 = defaultdict(count().next)
   ig1(d1)                                 # populate d1 as a sideeffect
   ig2(d2)                                 # populate d2 as a sideeffect
   return d1==d2
</snippet></ROW><ROW><id>9971049</id><snippet>&gt;&gt;&gt; cmp_getters(itemgetter('foo'), itemgetter('bar'))
False
&gt;&gt;&gt; cmp_getters(itemgetter('foo'), itemgetter('bar','foo'))
False
&gt;&gt;&gt; cmp_getters(itemgetter('foo','bar'), itemgetter('bar','foo'))
False
&gt;&gt;&gt; cmp_getters(itemgetter('bar','foo'), itemgetter('bar','foo'))
True
</snippet></ROW><ROW><id>9971255</id><snippet>export PYTHONPATH=/path/to/your/dir</snippet></ROW><ROW><id>9971837</id><snippet>class xml.etree.ElementTree.Element(tag, attrib={}, **extra)</snippet></ROW><ROW><id>9971837</id><snippet>from etree import ElementTree as ET
a = ET.Element('root-node', tag='This is an extra that sets a tag')
b = ET.SubElement(a, 'nested-node 1')
c = ET.SubElement(a, 'nested-node 2')
d = ET.SubElement(c, 'innermost node')
ET.dump(a)
</snippet></ROW><ROW><id>9971842</id><snippet>basehandler.py</snippet></ROW><ROW><id>9971842</id><snippet>@webapp2.cached_property
def jinja2(self):
    return jinja2.get_jinja2(app=self.app)
</snippet></ROW><ROW><id>9971842</id><snippet>@webapp2.cached_property
def jinja2(self):
    return jinja2.get_jinja2(app=self.app,{'environment_args':{'autoescape':False}})
</snippet></ROW><ROW><id>9971842</id><snippet>environment_args</snippet></ROW><ROW><id>9971842</id><snippet>autoescape</snippet></ROW><ROW><id>9971842</id><snippet>autoescape True</snippet></ROW><ROW><id>9971842</id><snippet>|safe</snippet></ROW><ROW><id>9971842</id><snippet>home.html</snippet></ROW><ROW><id>9971842</id><snippet>{{ lang.text_title }}
</snippet></ROW><ROW><id>9971842</id><snippet>{{ lang.text_title|safe }}
</snippet></ROW><ROW><id>9972286</id><snippet>print wn.synset("main_course.n.01").lemma_names
</snippet></ROW><ROW><id>9972434</id><snippet>pip --version
</snippet></ROW><ROW><id>9972605</id><snippet>reply: retcode (530); Msg: b'5.7.1 Client was not authenticated'</snippet></ROW><ROW><id>9972605</id><snippet>From</snippet></ROW><ROW><id>9973446</id><snippet>from datetime import timedelta

minutes = 60
hours = 60 * minutes
days = 24 * hours

diff = timedelta(days=6)

days_in_the_past = int(diff.total_seconds() / days)
hours_remainder = diff.total_seconds() % days

hours_in_the_past = int(diff.total_seconds() / hours)
seconds_remainder = diff.total_seconds() % hours
</snippet></ROW><ROW><id>9973446</id><snippet>def total_seconds(timedelta_object):
    return timedelta_object.days * 86400 + timedelta_object.seconds
</snippet></ROW><ROW><id>9973579</id><snippet>random.sample()</snippet></ROW><ROW><id>9973579</id><snippet>MyObject.all()</snippet></ROW><ROW><id>9973579</id><snippet>Query</snippet></ROW><ROW><id>9973579</id><snippet>Query</snippet></ROW><ROW><id>9973579</id><snippet>myObjects = list(MyObject.all())
</snippet></ROW><ROW><id>9973579</id><snippet>MyObject.all()</snippet></ROW><ROW><id>9973736</id><snippet>django-admin.py makemessages --locale=en_US --ignore=apps/* --ignore=secret/*.html
</snippet></ROW><ROW><id>9974118</id><snippet>&gt;&gt;&gt; def my_decorator(function):
...  def inner_function(*args, **kwargs):
...    res = function(*args, **kwargs)
...    print("We have: "+res)
...    return res
...
&gt;&gt;&gt; @my_decorator
... def add(x, y):
...  return x+y
...
&gt;&gt;&gt; add(1,2)
We have: 3
3
</snippet></ROW><ROW><id>9974118</id><snippet>add = my_decorator(add)
</snippet></ROW><ROW><id>9974118</id><snippet>__doc__</snippet></ROW><ROW><id>9974118</id><snippet>&gt;&gt;&gt; def frenchmeup(fun):
...    fun.__doc__ = "Bonjour, documentation!"
...    return fun
... 
&gt;&gt;&gt; @frenchmeup
... def foo():
...   """hello doc"""
...   return "world"
... 
&gt;&gt;&gt; foo.__doc__
'Bonjour, documentation!'
</snippet></ROW><ROW><id>9974118</id><snippet>&gt;&gt;&gt; ttable = {
...   "FR" : {
...     "hello doc": "Bonjour, documentation!"
...   }
... }
&gt;&gt;&gt; def document(lang=None):
...   def doc_decorator(function):
...     if lang and lang in ttable:
...       function.__doc__ = ttable[lang][function.__doc__]
...     return function
...   return doc_decorator
... 
&gt;&gt;&gt; @document(lang="FR")
... def foo():
...   """hello doc"""
...   return 42
... 
&gt;&gt;&gt; foo.__doc__
'Bonjour, documentation!'
</snippet></ROW><ROW><id>9974118</id><snippet>foo()</snippet></ROW><ROW><id>9974118</id><snippet>"""goodbye, doc..."""</snippet></ROW><ROW><id>9974118</id><snippet>("goodbye, doc...", "")</snippet></ROW><ROW><id>9974118</id><snippet>help_&lt;cmd&gt;()</snippet></ROW><ROW><id>9974118</id><snippet>help_&lt;cmd&gt;()</snippet></ROW><ROW><id>9974505</id><snippet>your_unicode_string =  original_utf8_encoded_bytestring.decode('latin1')
</snippet></ROW><ROW><id>9974505</id><snippet>correct_unicode_string = your_unicode_string.encode('latin1').decode('utf8')
</snippet></ROW><ROW><id>9974505</id><snippet>ISO-8859-1</snippet></ROW><ROW><id>9974505</id><snippet>latin1</snippet></ROW><ROW><id>9974505</id><snippet>BeautifulSoup(web, from_encoding='utf8')
</snippet></ROW><ROW><id>9974726</id><snippet>import subprocess
import sys
command = 'MyWork.exe %s' % (sys.argv[1])
proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
proc.wait()
output = (proc.stdout.read(), proc.stderr.read())
</snippet></ROW><ROW><id>9974942</id><snippet>pax&gt; python
Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.

&gt;&gt;&gt; rgbvar = [80,160,240]

&gt;&gt;&gt; rgbvar
[80, 160, 240]

&gt;&gt;&gt; rgbvar2 = [x / 255.0 for x in rgbvar]

&gt;&gt;&gt; rgbvar2
[0.31372549019607843, 0.62745098039215685, 0.94117647058823528]
</snippet></ROW><ROW><id>9975026</id><snippet>s.sendmail(FROMADDR, TOADDR+CCADDR, msg.as_string())
</snippet></ROW><ROW><id>9975296</id><snippet>str(link.href)
</snippet></ROW><ROW><id>9975296</id><snippet>link.get('href')
</snippet></ROW><ROW><id>9975296</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2

url = 'http://www.meinpaket.de/de/shopsList.html?page=1'
soup = BeautifulSoup(urllib2.urlopen(url))
datas = soup.findAll('div', {'class':'tsrImg'})
for data in datas:
    link = data.find('a')
    print link.get('href')
</snippet></ROW><ROW><id>9975296</id><snippet>/de/~-office-partner-gmbh-;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~-24selling-de;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~abalisi-kuenstlerbedarf-shop;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~abcmeineverpackung-de-kg;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~ability;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~ac-foto-handels-gmbh;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~ac-sat-corner-inh-dirk-hahn;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~adamo-fashion-gmbh-shop;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~adapter-markt;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
/de/~adko;jsessionid=11957F27FC2D888A34532D9848C922FB.as03
</snippet></ROW><ROW><id>9975430</id><snippet>a = ["#", "1", "#", "2", "3", "#"]
b = ["a", "b", "c", "d", "e", "f"]

a,b = zip(*[[a[i], b[i]] for i in range(len(a)) if a[i]!="#"])
print a
print b
</snippet></ROW><ROW><id>9975430</id><snippet>&gt;&gt;&gt; 
('1', '2', '3')
('b', 'd', 'e')
</snippet></ROW><ROW><id>9976379</id><snippet>(time, switch, state)</snippet></ROW><ROW><id>9976379</id><snippet>a_on</snippet></ROW><ROW><id>9976379</id><snippet>b_on</snippet></ROW><ROW><id>9976379</id><snippet>c_on</snippet></ROW><ROW><id>9976379</id><snippet>last_time = 0 # starting time of data, 0 is here as example
total_time = 0 # 0 seconds

for time, switch, state in state_switches:
    if a_on and b_on and c_on:
        total_time += time - last_time

    if switch == "A":
        a_on = state
    if switch == "B":
        b_on = state
    if switch == "C":
        c_on = state

    last_time = time
</snippet></ROW><ROW><id>9976730</id><snippet>sorted(self.version_set, key=lambda v:LooseVersion(v.version_number))
</snippet></ROW><ROW><id>9976730</id><snippet>sorted()</snippet></ROW><ROW><id>9976851</id><snippet>qs = ModelName.object.filter(param=param).order_by('-created')[:2]
</snippet></ROW><ROW><id>9977243</id><snippet>__repr__  __str__ __unicode__</snippet></ROW><ROW><id>9977956</id><snippet>data_files</snippet></ROW><ROW><id>9977956</id><snippet>setup(
    name = "Foo",
    version = "0.1.0",
    ext_modules = [Extension("Foo", glob("Source/*.cpp"))],
    data_files = [("", ["LICENSE.txt"])]
)
</snippet></ROW><ROW><id>9978276</id><snippet>close</snippet></ROW><ROW><id>9978276</id><snippet>class MyStringIO(StringIO):
   def close(self):
       pass
   def _close():
       super(MyStringIO, self).close()
</snippet></ROW><ROW><id>9978276</id><snippet>_close()</snippet></ROW><ROW><id>9978576</id><snippet>from zope.i18nmessageid import MessageFactory
_ = MessageFactory('my.package')
</snippet></ROW><ROW><id>9978576</id><snippet>_p = MessageFactory('plone')
</snippet></ROW><ROW><id>9978576</id><snippet>_p('Contributors')</snippet></ROW><ROW><id>9978701</id><snippet>datetime</snippet></ROW><ROW><id>9978701</id><snippet>import datetime

print datetime.datetime.strptime('2010-08-27', '%Y-%m-%d')
print datetime.datetime.strptime('2010-15-27', '%Y-%m-%d')
</snippet></ROW><ROW><id>9978701</id><snippet>2010-08-27 00:00:00
Traceback (most recent call last):
  File "./x.py", line 6, in &lt;module&gt;
    print datetime.datetime.strptime('2010-15-27', '%Y-%m-%d')
  File "/usr/lib/python2.7/_strptime.py", line 325, in _strptime
    (data_string, format))
ValueError: time data '2010-15-27' does not match format '%Y-%m-%d'
</snippet></ROW><ROW><id>9978701</id><snippet>ValueError</snippet></ROW><ROW><id>9978701</id><snippet>def valid_date(datestring):
    try:
        datetime.datetime.strptime(datestring, '%Y-%m-%d')
        return True
    except ValueError:
        return False
</snippet></ROW><ROW><id>9978701</id><snippet>re</snippet></ROW><ROW><id>9978701</id><snippet>import datetime
import re

def valid_date(datestring):
        try:
                mat=re.match('(\d{2})[/.-](\d{2})[/.-](\d{4})$', datestring)
                if mat is not None:
                        datetime.datetime(*(map(int, mat.groups()[-1::-1])))
                        return True
        except ValueError:
                pass
        return False
</snippet></ROW><ROW><id>9978873</id><snippet>box_top = (0, 0, x, y / 2)
top_part = im1.crop(box_top)
result = im2.copy()
result.paste(top_part, box_top)
</snippet></ROW><ROW><id>9979169</id><snippet>def coords(s):
    try:
        x, y, z = map(int, s.split(','))
        return x, y, z
    except:
        raise argparse.ArgumentTypeError("Coordinates must be x,y,z")


parser.add_argument('--cord', help="Coordinate", dest="cord", type=coords, nargs=3)
</snippet></ROW><ROW><id>9979201</id><snippet>  code &lt;&lt;-EOH
  import boto
  f = open('test.txt','r')
  f.write('adfadf')
  f.close()
  EOH
</snippet></ROW><ROW><id>9979201</id><snippet>&lt;&lt;-EOH</snippet></ROW><ROW><id>9979201</id><snippet>EOH</snippet></ROW><ROW><id>9979201</id><snippet>&lt;&lt;-EOH</snippet></ROW><ROW><id>9979201</id><snippet>EOH</snippet></ROW><ROW><id>9979495</id><snippet>log=True</snippet></ROW><ROW><id>9979495</id><snippet>from matplotlib import pyplot
import math
pyplot.plot([x for x in range(100)],[math.exp(y) for y in range(100)] )
pyplot.xlabel('arbitrary')
pyplot.ylabel('arbitrary')
pyplot.title('arbitrary')

#pyplot.xscale('log')
pyplot.yscale('log')

pyplot.show()
</snippet></ROW><ROW><id>9979553</id><snippet>IPYTHONDIR/profile_&lt;name&gt;/security/kernel-&lt;id&gt;.json</snippet></ROW><ROW><id>9979553</id><snippet>ipython kernel</snippet></ROW><ROW><id>9979553</id><snippet>ipython qtconsole</snippet></ROW><ROW><id>9979553</id><snippet>$&gt; ipython kernel
[IPKernelApp] To connect another client to this kernel, use:
[IPKernelApp] --existing kernel-6759.json
</snippet></ROW><ROW><id>9979553</id><snippet>from IPython.lib.kernel import find_connection_file
from IPython.zmq.blockingkernelmanager import BlockingKernelManager

# this is a helper method for turning a fraction of a connection-file name
# into a full path.  If you already know the full path, you can just use that
cf = find_connection_file('6759')

km = BlockingKernelManager(connection_file=cf)
# load connection info and init communication
km.load_connection_file()
km.start_channels()

def run_cell(km, code):
    # now we can run code.  This is done on the shell channel
    shell = km.shell_channel
    print
    print "running:"
    print code

    # execution is immediate and async, returning a UUID
    msg_id = shell.execute(code)
    # get_msg can block for a reply
    reply = shell.get_msg()

    status = reply['content']['status']
    if status == 'ok':
        print 'succeeded!'
    elif status == 'error':
        print 'failed!'
        for line in reply['content']['traceback']:
            print line

run_cell(km, 'a=5')
run_cell(km, 'b=0')
run_cell(km, 'c=a/b')
</snippet></ROW><ROW><id>9979553</id><snippet>running:
a=5
succeeded!

running:
b=0
succeeded!

running:
c=a/b
failed!
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
/Users/minrk/&lt;ipython-input-11-fb3f79bd285b&gt; in &lt;module&gt;()
----&gt; 1 c=a/b

ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>9979553</id><snippet>km.iopub_channel</snippet></ROW><ROW><id>9979553</id><snippet>shell.execute()</snippet></ROW><ROW><id>9979611</id><snippet>dir</snippet></ROW><ROW><id>9979611</id><snippet>dir(content_type)</snippet></ROW><ROW><id>9979611</id><snippet>_meta</snippet></ROW><ROW><id>9979611</id><snippet>dir(my_model_object._meta)</snippet></ROW><ROW><id>9979968</id><snippet>def myfunc():
    # ...
    if file_is_ok:
        return myfile, None
    else:
        return None, error_string

mf, es = myfunc()
if es:
    # show error string
</snippet></ROW><ROW><id>9980160</id><snippet>found_obj = None
for obj in objects:
    if obj.key == search_key:
        found_obj = obj
        break
else:
    print 'No object found.'
</snippet></ROW><ROW><id>9980160</id><snippet>def find_obj(search_key):
    for obj in objects:
        if obj.key == search_key:
            return obj
</snippet></ROW><ROW><id>9980160</id><snippet>matching_objs = [o for o in objects if o.key == search_key]
if matching_objs:
    print 'Found', matching_objs[0]
else:
    print 'No object found.'
</snippet></ROW><ROW><id>9980300</id><snippet>In quoted printable (RFC 2045), you can hex-encode any =22special=22 chara=
cter, like this (or=20in=20fact,=20any=20character=20at=all), and add line=
 breaks where you see fit by prefixing them with an equals sign.  Of cours=
e, you also have to encode any literal equals sign, like this: =3D.  Bette=
r use a library which understands the details of this format than write yo=
ur own encoder, though.
</snippet></ROW><ROW><id>9980300</id><snippet>Content-Transfer-Encoding: binary</snippet></ROW><ROW><id>9980300</id><snippet>7bit</snippet></ROW><ROW><id>9980300</id><snippet>Content-Transfer-Encoding</snippet></ROW><ROW><id>9980300</id><snippet>quoted-printable</snippet></ROW><ROW><id>9980300</id><snippet>base64</snippet></ROW><ROW><id>9980393</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
from collections import defaultdict


def table_to_list(table):
    dct = table_to_2d_dict(table)
    return list(iter_2d_dict(dct))


def table_to_2d_dict(table):
    result = defaultdict(lambda : defaultdict(unicode))
    for row_i, row in enumerate(table.xpath('./tr')):
        for col_i, col in enumerate(row.xpath('./td|./th')):
            colspan = int(col.get('colspan', 1))
            rowspan = int(col.get('rowspan', 1))
            col_data = col.text_content()
            while row_i in result and col_i in result[row_i]:
                col_i += 1
            for i in range(row_i, row_i + rowspan):
                for j in range(col_i, col_i + colspan):
                    result[i][j] = col_data
    return result


def iter_2d_dict(dct):
    for i, row in sorted(dct.items()):
        cols = []
        for j, col in sorted(row.items()):
            cols.append(col)
        yield cols


if __name__ == '__main__':
    import lxml.html
    from pprint import pprint

    doc = lxml.html.parse('tables.html')
    for table_el in doc.xpath('//table'):
        table = table_to_list(table_el)
        pprint(table)
</snippet></ROW><ROW><id>9980393</id><snippet>&lt;table border="1"&gt;
    &lt;tr&gt;
        &lt;td&gt;1 &lt;/td&gt;
        &lt;td&gt;1 &lt;/td&gt;
        &lt;td&gt;1 &lt;/td&gt;
        &lt;td rowspan="4"&gt;Thing&lt;/td&gt;
        &lt;td&gt;1 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2 &lt;/td&gt;
        &lt;td&gt;2 &lt;/td&gt;
        &lt;td&gt;2 &lt;/td&gt;
        &lt;td&gt;2 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3 &lt;/td&gt;
        &lt;td&gt;3 &lt;/td&gt;
        &lt;td&gt;3 &lt;/td&gt;
        &lt;td&gt;3 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;4 &lt;/td&gt;
        &lt;td&gt;4 &lt;/td&gt;
        &lt;td&gt;4 &lt;/td&gt;
        &lt;td&gt;4 &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;table border="1"&gt;
&lt;tr&gt;
    &lt;td colspan="2" rowspan="4"&gt;#1&lt;/td&gt;
    &lt;td rowspan="4"&gt;#2&lt;/td&gt;
    &lt;td rowspan="2"&gt;#3&lt;/td&gt;
    &lt;td rowspan="2"&gt;#4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;
    &lt;td rowspan="2"&gt;#5&lt;/td&gt;
    &lt;td rowspan="2"&gt;#6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>9980393</id><snippet>[['1 ', '1 ', '1 ', 'Thing', '1 '],
 ['2 ', '2 ', '2 ', 'Thing', '2 '],
 ['3 ', '3 ', '3 ', 'Thing', '3 '],
 ['4 ', '4 ', '4 ', 'Thing', '4 ']]
[['#1', '#1', '#2', '#3', '#4'],
 ['#1', '#1', '#2', '#3', '#4'],
 ['#1', '#1', '#2', '#5', '#6'],
 ['#1', '#1', '#2', '#5', '#6']]
</snippet></ROW><ROW><id>9980586</id><snippet>encoding</snippet></ROW><ROW><id>9980586</id><snippet>xml_response = xml_response.decode('windows-1252').encode('UTF-8')</snippet></ROW><ROW><id>9980594</id><snippet># Here is a comment
</snippet></ROW><ROW><id>9980594</id><snippet>import re

while True:
    myString = input('Enter your string: ')

    isMoney = re.match('^\$[0-9]+(,[0-9]{3})*(\.[0-9]{2})?$', myString)
    isName = re.match('^\'+\w+\'$', myString)
    isDate = re.match('^[0-1][0-9]\/[0-3][0-9]\/[0-1][0-9]{3}$', myString)
    # or try '^[0-1]*?\/[0-9]*\/[0-9]*$ If you want 0/0/0 too...

    if isMoney:
        print('It is Money:', myString)
    elif isName:
        print('It is a Name:', myString)
    elif isDate:
        print('It is a Date:', myString)
    else:
        print('Not good.')
</snippet></ROW><ROW><id>9980594</id><snippet>Enter your string: $100
It is Money: $100
Enter your string: 100
Not good.
Enter your string: 'Tom'
It is a Name: 'Tom'
Enter your string: Tom
Not good.
Enter your string: 01/15/1989
It is a Date: 01/15/1989
Enter your string: 01151989
Not good.
</snippet></ROW><ROW><id>9980594</id><snippet>isSomething</snippet></ROW><ROW><id>9980636</id><snippet>class NetworkListManager(CoClassBaseClass): # A CoClass
</snippet></ROW><ROW><id>9980636</id><snippet>win32com.client.Dispatch('{DCB00C01-570F-4A9B-8D69-199FDBA5723B}')
</snippet></ROW><ROW><id>9980676</id><snippet>get_multi</snippet></ROW><ROW><id>9980777</id><snippet>&gt;&gt;&gt; X = A.reshape(2,2,2,2)
&gt;&gt;&gt; X = X.transpose([0,2,1,3])
&gt;&gt;&gt; X = X.reshape((2,2,-1))
&gt;&gt;&gt; X
array([[[1, 1, 1, 1],
        [2, 2, 2, 2]],

       [[3, 3, 3, 3],
        [4, 4, 4, 4]]])
&gt;&gt;&gt; B = X.reshape((2,2,2,2))
&gt;&gt;&gt; B = B.transpose([0,2,1,3])
&gt;&gt;&gt; B = B.reshape((2,2,-1))
&gt;&gt;&gt; B
array([[[1, 1, 2, 2],
        [1, 1, 2, 2]],

       [[3, 3, 4, 4],
        [3, 3, 4, 4]]])
</snippet></ROW><ROW><id>9980811</id><snippet>seed_list.txt</snippet></ROW><ROW><id>9980839</id><snippet>\u####</snippet></ROW><ROW><id>9980839</id><snippet>\u####</snippet></ROW><ROW><id>9981249</id><snippet>insert = db + nosql + ".insert(post)"
insert
</snippet></ROW><ROW><id>9981249</id><snippet>db[nosql].insert(post)
</snippet></ROW><ROW><id>9981793</id><snippet>time.localtime(epo) 
</snippet></ROW><ROW><id>9981793</id><snippet>time.datetime.fromtimestring(epo)
</snippet></ROW><ROW><id>9981888</id><snippet>def group(iterable):
    myIter = iter(iterable)

    run = [next(myIter)]
    def continuesRun(x):
        return run[-1]==x-1

    for x in myIter:
        if continuesRun(x):
            run.append(x)
        else:
            yield run
            run = [x]
    yield run
</snippet></ROW><ROW><id>9981888</id><snippet>&gt;&gt;&gt; list( group([1,10,11,12,20,21]) )
[[1], [10, 11, 12], [20, 21]]
</snippet></ROW><ROW><id>9981888</id><snippet>continuesRun</snippet></ROW><ROW><id>9981888</id><snippet>def continuesRun(date):
    previousDate = run[-1]
    return previousDate==date-1day or (previousDate.weekday==Friday and previousDate==date-3day)
</snippet></ROW><ROW><id>9981888</id><snippet>len(d for d in range(run[-1]-run[0]) if (run[0]+d*day).isWeekend())</snippet></ROW><ROW><id>9981888</id><snippet>.isHoliday() or .isWeekend()</snippet></ROW><ROW><id>9981888</id><snippet>len(...)</snippet></ROW><ROW><id>9981937</id><snippet>    re.findall(r"vcxproj.*?\{(.*?)\}", text)
</snippet></ROW><ROW><id>9981964</id><snippet>(setq python-indent 12)
</snippet></ROW><ROW><id>9982125</id><snippet>Player.team.get_value_for_datastore(player)</snippet></ROW><ROW><id>9982534</id><snippet>/groupname/</snippet></ROW><ROW><id>9982832</id><snippet>from Crypto import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator)
exportedKey = key.exportKey('PEM', 'my secret', pkcs=1)
</snippet></ROW><ROW><id>9982832</id><snippet>exportedKey</snippet></ROW><ROW><id>9982832</id><snippet>pkcs=8</snippet></ROW><ROW><id>9982832</id><snippet>exportKey</snippet></ROW><ROW><id>9982943</id><snippet>csv</snippet></ROW><ROW><id>9982943</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(list(csv.reader([string], delimiter=' ', quotechar='"')))
[
[
'/dev/null'
,
''
,
'19/1333329478.9381399'
,
'0'
,
'1'
,
'cam-foo'
,
'64'
,
'900.0'
,
'Foo x rev scan of test'
,
'/usr/bin/env "PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:$PATH" python app.py'
,
'60.145855'
,
'2.034689'
]
]
</snippet></ROW><ROW><id>9983168</id><snippet>GCC 4.2.1</snippet></ROW><ROW><id>9983168</id><snippet>GCC 4.0.1</snippet></ROW><ROW><id>9983341</id><snippet>import this</snippet></ROW><ROW><id>9983341</id><snippet>[x for x in range(5) if x != 2 and x != 3]
</snippet></ROW><ROW><id>9983341</id><snippet>&gt;&gt;&gt; [x for x in (x for x in range(5) if x != 2) if x != 3]
[0, 1, 4]
</snippet></ROW><ROW><id>9983341</id><snippet>range()</snippet></ROW><ROW><id>9983457</id><snippet>__iexact</snippet></ROW><ROW><id>9983457</id><snippet>test__iexact</snippet></ROW><ROW><id>9983457</id><snippet>if 'test' in item.lower():
</snippet></ROW><ROW><id>9983596</id><snippet>==</snippet></ROW><ROW><id>9983596</id><snippet>from itertools import izip_longest, tee
sentinel = object()
all(a == b for a, b in izip_longest(gen_1, gen_2, fillvalue=sentinel))
</snippet></ROW><ROW><id>9983596</id><snippet>izip()</snippet></ROW><ROW><id>9983596</id><snippet>izip()</snippet></ROW><ROW><id>9983596</id><snippet>object</snippet></ROW><ROW><id>9983596</id><snippet>izip_longest()</snippet></ROW><ROW><id>9983596</id><snippet>object</snippet></ROW><ROW><id>9983596</id><snippet>sentinel</snippet></ROW><ROW><id>9983596</id><snippet>gen_1, gen_1_teed = tee(gen_1)
gen_2, gen_2_teed = tee(gen_2)
all(a == b for a, b in izip_longest(gen_1, gen_2, fillvalue=sentinel))
</snippet></ROW><ROW><id>9983596</id><snippet>gen_1</snippet></ROW><ROW><id>9983596</id><snippet>gen_2</snippet></ROW><ROW><id>9983596</id><snippet>all()</snippet></ROW><ROW><id>9983596</id><snippet>tee</snippet></ROW><ROW><id>9984192</id><snippet>-1</snippet></ROW><ROW><id>9984192</id><snippet>-1</snippet></ROW><ROW><id>9984192</id><snippet>0</snippet></ROW><ROW><id>9984312</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s="2-sec"
&gt;&gt;&gt; re.match('(\d).(m|s)',s).group(1,2)
('2', 's')
&gt;&gt;&gt; s='2-min'
&gt;&gt;&gt; re.match('(\d).(m|s)',s).group(1,2)
('2', 'm')
</snippet></ROW><ROW><id>9984632</id><snippet>file1 -&gt; 20 
file2 -&gt; 30
file3 -&gt; 0 // invalid entry
</snippet></ROW><ROW><id>9984644</id><snippet>HoldsData</snippet></ROW><ROW><id>9984644</id><snippet>x_coords</snippet></ROW><ROW><id>9984644</id><snippet>&gt;&gt;&gt; mock = MagicMock(data={'points': [(0,1), (2,3), (4,5)]})
&gt;&gt;&gt; mock.x_coords = HoldsData.__dict__['x_coords']
&gt;&gt;&gt; mock.x_coords(mock)
[0, 2, 4]
</snippet></ROW><ROW><id>9984644</id><snippet>x_coords</snippet></ROW><ROW><id>9984644</id><snippet>mock.x_coords = HoldsData.x_coords</snippet></ROW><ROW><id>9984644</id><snippet>unbound methods</snippet></ROW><ROW><id>9984644</id><snippet>MagicMock(data={'points': [(0,1), (2,3), (4,5)]}, x_coords=HoldsData.__dict__['x_coords'])
</snippet></ROW><ROW><id>9984732</id><snippet>unicode</snippet></ROW><ROW><id>9984767</id><snippet>matplotlib.nxutils.points_inside_poly</snippet></ROW><ROW><id>9984767</id><snippet>mahotas.polygon.fill_polygon</snippet></ROW><ROW><id>9984767</id><snippet>mahotas</snippet></ROW><ROW><id>9984767</id><snippet>import numpy as np
from matplotlib.nxutils import points_inside_poly

nx, ny = 10, 10
poly_verts = [(1,1), (5,1), (5,9),(3,2),(1,1)]

# Create vertex coordinates for each grid cell...
# (&lt;0,0&gt; is at the top left of the grid in this system)
x, y = np.meshgrid(np.arange(nx), np.arange(ny))
x, y = x.flatten(), y.flatten()

points = np.vstack((x,y)).T

grid = points_inside_poly(points, poly_verts)
grid = grid.reshape((ny,nx))

print grid
</snippet></ROW><ROW><id>9984767</id><snippet>[[False False False False False False False False False False]
 [False  True  True  True  True False False False False False]
 [False False False  True  True False False False False False]
 [False False False False  True False False False False False]
 [False False False False  True False False False False False]
 [False False False False  True False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]]
</snippet></ROW><ROW><id>9984767</id><snippet>nxutils</snippet></ROW><ROW><id>9984767</id><snippet>from matplotlib import path

...
p = path.Path(poly_verts)
grid = p.contains_points(points)
...
</snippet></ROW><ROW><id>9984878</id><snippet>writer.writerow([key] + value)
</snippet></ROW><ROW><id>9984878</id><snippet>key</snippet></ROW><ROW><id>9984878</id><snippet>value</snippet></ROW><ROW><id>9984883</id><snippet>'Winamp Library/Winamp Library/&lt;ARTIST&gt;/*'
</snippet></ROW><ROW><id>9984883</id><snippet>for artist in glob.glob('Winamp Library/*'):
    print(artist)
    for album in glob.glob(artist + '/*'):
        print (album)
</snippet></ROW><ROW><id>9984883</id><snippet>'Winamp Library/*/*'</snippet></ROW><ROW><id>9984919</id><snippet>node_count</snippet></ROW><ROW><id>9984919</id><snippet>def recurse(box):

    boxes = not isinstance(box, (list, tuple)) and [box] or box

    depth = [1]

    def wrapped(box):

        depthStr = '.'.join([str(i) for i in depth])
        print "%s %s" % (depthStr, box.name)

        depth.append(1)
        for child in box.boxItems:
            wrapped(child)
            depth[-1] += 1
        depth.pop()

    for box in boxes:
        wrapped(box)
        depth[0] += 1
</snippet></ROW><ROW><id>9984919</id><snippet>&gt;&gt;&gt; recurse(example)
1 Example Box
1.1 Big Box
1.1.1 Normal Box
1.1.2 Friendly Box
1.2 Cool Box

&gt;&gt;&gt; recurse([example, example])
1 Example Box
1.1 Big Box
1.1.1 Normal Box
1.1.2 Friendly Box
1.2 Cool Box
2 Example Box
2.1 Big Box
2.1.1 Normal Box
2.1.2 Friendly Box
2.2 Cool Box
</snippet></ROW><ROW><id>9984919</id><snippet>depth</snippet></ROW><ROW><id>9984919</id><snippet>[1,1,2,3,1]</snippet></ROW><ROW><id>9984919</id><snippet>wrapped</snippet></ROW><ROW><id>9984919</id><snippet>wrapped</snippet></ROW><ROW><id>9984919</id><snippet>wrapped</snippet></ROW><ROW><id>9984919</id><snippet>recurse</snippet></ROW><ROW><id>9984919</id><snippet>boxes =</snippet></ROW><ROW><id>9984919</id><snippet>def recurse(*boxes):
    #boxes will always come in as a tuple no matter what

&gt;&gt;&gt; recurse(example)
&gt;&gt;&gt; recurse(example, example, example)
</snippet></ROW><ROW><id>9984919</id><snippet>&gt;&gt;&gt; boxes = [example, example, example]
&gt;&gt;&gt; recurse(*example)    # this will unpack your list into args
</snippet></ROW><ROW><id>9985064</id><snippet>self.add_event_handler('message', self.message)
</snippet></ROW><ROW><id>9985064</id><snippet>def message(self, msg):
    if msg['type'] in ('normal', 'chat'):
        msg.reply("Thanks for sending:\n%s" % msg['body']).send()
</snippet></ROW><ROW><id>9985152</id><snippet>self.finished</snippet></ROW><ROW><id>9985152</id><snippet>class first</snippet></ROW><ROW><id>9985152</id><snippet>finished</snippet></ROW><ROW><id>9985152</id><snippet>self.finished</snippet></ROW><ROW><id>9985152</id><snippet>class second</snippet></ROW><ROW><id>9985152</id><snippet>Queue</snippet></ROW><ROW><id>9985152</id><snippet>threading</snippet></ROW><ROW><id>9985193</id><snippet>#!/usr/bin/python
import argparse

if __name__=="__main__":
    parser = argparse.ArgumentParser(description='eg $python myargs.py --base arg1 --pattern arg2 [--verbose] [--live]')
    parser.add_argument('--base', required=True, type=str)
    parser.add_argument('--pattern', required=True, type=str)
    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('--live', action='store_true')

    args = parser.parse_args()

    print "args.base=" + str(args.base)
    print "args.pattern=" + str(args.pattern)
    print "args.verbose=" + str(args.verbose)
    print "args.live=" + str(args.live)
</snippet></ROW><ROW><id>9985195</id><snippet>scipy.ndimage</snippet></ROW><ROW><id>9985452</id><snippet>&gt;&gt;&gt; my_list = ['Lorem ipsum dolor sit amet,', 'consectetur adipiscing elit. ', 'Mauris id en
im nisi, ullamcorper malesuada magna.']
&gt;&gt;&gt; ' '.join(string.strip() for string in my_list)
'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris id enim nisi, ullamcorper
 malesuada magna.'
</snippet></ROW><ROW><id>9986024</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a[1:1] = [4, 5]
&gt;&gt;&gt; a
[1, 4, 5, 2, 3]
</snippet></ROW><ROW><id>9986046</id><snippet>db.StringListProperty()</snippet></ROW><ROW><id>9986046</id><snippet>db.CategoryProperty()</snippet></ROW><ROW><id>9986046</id><snippet>class Company(db.Model):
    name = db.StringProperty()
    category = db.StringListProperty() #to allow multiple categories

#Creating a company
company = Company()
company.name = "XYZ Car Rental Corporation"
company.category = ["NEW YORK","CAR RENTAL", "CORPORATION"] #City and Company Category. I would make them all uppercase to prevent case-sensitive/typo issues.
company.put()

#querying
query = Company.all()
query.filter('category',"NEW YORK")
results = query.fetch(10)  #this returns Company entities with "NEW YORK" in their category list

#You can also do multiple categories (AND)
query = Company.all()
query.filter('category',"NEW YORK")
query.filter('category',"CORPORATION")
results = query.fetch(10)  #this returns Company entities with "NEW YORK" and "CORPORATION" in their category list
</snippet></ROW><ROW><id>9986271</id><snippet>&gt;&gt;&gt; D = {
...     'Resent-Bcc': [],
...     'Delivered-To': [],
...     'From': {'Name': 'Steve Watson', 'Address': 'steve.watson@example.org'},
...     'Cc': [],
...     'Resent-Cc': [],
...     'Bcc': [ {'Name': 'Daryl Hurstbridge', 'Address': 'daryl.hurstbridge@example.org'},
...              {'Name': 'Sally Hervorth', 'Address': 'sally.hervorth@example.org'},
...              {'Name': 'Mike Merry', 'Address': 'mike.merry@example.org'},
...              {'Name': 'Jenny Callisto', 'Address': 'jenny.callisto@example.org'}
...            ],
...     'To': {'Name': 'Darius Jedburgh', 'Address': 'darius.jedburgh@example.org'}
... }
&gt;&gt;&gt; L = [v if type(v) is list else [v] for v in D.values()]
&gt;&gt;&gt; [(d["Name"], d["Address"]) for item in L for d in item ]
[('Steve Watson', 'steve.watson@example.org'), ('Daryl Hurstbridge', 'daryl.hurstbridge@example.org'), ('Sally Hervorth', 'sally.hervorth@example.org'), ('Mike Merry', 'mike.merry@example.org'), ('Jenny Callisto', 'jenny.callisto@example.org'), ('Darius Jedburgh', 'darius.jedburgh@example.org')]
</snippet></ROW><ROW><id>9986271</id><snippet>[(d["Name"], d["Address"]) for item in (v if type(v) is list else [v] for v in D.values())]
</snippet></ROW><ROW><id>9986464</id><snippet>&lt;doc&gt;
  &lt;section&gt;
    &lt;person name="bob" color="blue"/&gt;
  &lt;/section&gt;
&lt;/doc&gt;
</snippet></ROW><ROW><id>9986464</id><snippet>name</snippet></ROW><ROW><id>9986464</id><snippet>&gt;&gt;&gt; doc = libxml2.parseDoc(open('input.xml').read())
&gt;&gt;&gt; str(doc.xpathEval('//person/@name')[0].children)
'bob'
</snippet></ROW><ROW><id>9986464</id><snippet>libxml2</snippet></ROW><ROW><id>9986464</id><snippet>lxml</snippet></ROW><ROW><id>9986464</id><snippet>etree</snippet></ROW><ROW><id>9986464</id><snippet>&gt;&gt;&gt; import lxml.etree as etree
&gt;&gt;&gt; d = etree.parse(open('foo.xml'))
&gt;&gt;&gt; d.xpath('//person/@name')[0]
'bob'
</snippet></ROW><ROW><id>9986464</id><snippet>ElementTree</snippet></ROW><ROW><id>9986497</id><snippet>autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4
</snippet></ROW><ROW><id>9986497</id><snippet>au Filetype python setl et ts=4 sw=4
</snippet></ROW><ROW><id>9986620</id><snippet>c:\Program Files\Notepad++\plugins\PythonScript\scripts\startup.py</snippet></ROW><ROW><id>9986620</id><snippet>def guess_tab(text):
    count = 0
    for line in text.split("\n"):
        indents = line[:len(line)-len(line.lstrip())]
        if "\t" in indents:
            count += 1
    if count &gt; 5: 
        return True
    else:
        return False

def buffer_actived(arg):
    editor.setBackSpaceUnIndents(True)
    use_tab = guess_tab(editor.getText())
    editor.setUseTabs(use_tab)
    sys.stderr.write( "setUseTabs %s\n" % use_tab )

notepad.clearCallbacks([NOTIFICATION.BUFFERACTIVATED])    
notepad.callback(buffer_actived, [NOTIFICATION.BUFFERACTIVATED])
</snippet></ROW><ROW><id>9986627</id><snippet>ID</snippet></ROW><ROW><id>9986627</id><snippet>(ID)</snippet></ROW><ROW><id>9986627</id><snippet>(ID,)</snippet></ROW><ROW><id>9986627</id><snippet>[ID]</snippet></ROW><ROW><id>9986665</id><snippet>utf-8</snippet></ROW><ROW><id>9986665</id><snippet>buffer.decode("utf-8", "ignore")
</snippet></ROW><ROW><id>9986802</id><snippet>csv.reader()</snippet></ROW><ROW><id>9987102</id><snippet>self</snippet></ROW><ROW><id>9987102</id><snippet>self</snippet></ROW><ROW><id>9987102</id><snippet>type(self)</snippet></ROW><ROW><id>9987102</id><snippet>MyClass</snippet></ROW><ROW><id>9987102</id><snippet>MyClass</snippet></ROW><ROW><id>9987102</id><snippet>MyClass.some_attribute</snippet></ROW><ROW><id>9987102</id><snippet>AutoViewConfigMeta</snippet></ROW><ROW><id>9987102</id><snippet>view_config</snippet></ROW><ROW><id>9987102</id><snippet>view_config</snippet></ROW><ROW><id>9987102</id><snippet>__new__</snippet></ROW><ROW><id>9987102</id><snippet>auto_view_config</snippet></ROW><ROW><id>9987102</id><snippet>view_config</snippet></ROW><ROW><id>9987102</id><snippet># This just spoofs the view_config decorator.
def view_config(route=''):
    def dec(f):
        def wrapper(*args, **kwargs):
            print "route={0}".format(route)
            return f(*args, **kwargs)
        return wrapper
    return dec

# Apply this decorator to methods for which you want to call view_config with 
# the class name. It will tag them. The metaclass will apply view_config once it 
# has the class name. 
def auto_view_config(f):
    f.auto_view_config = True
    return f

class AutoViewConfigMeta(type):
    def __new__(mcls, name, bases, dict_):
        #This is called during class creation. _dict is the namespace of the class and
        # name is it's name. So the idea is to pull out the methods that need
        # view_config applied to them and manually apply them with the class name.
        # We'll recognize them because they will have the auto_view_config attribute
        # set on them by the `auto_view_config` decorator. Then use type to create
        # the class and return it.

        for item in dict_:
            if hasattr(dict_[item], 'auto_view_config'):  
                method = dict_[item]
                del method.auto_view_config # Clean up after ourselves.
                # The next line is the manual form of applying a decorator.
                dict_[item] = view_config(route=name)(method)  

        # Call out to type to actually create the class with the modified dict.
        return type.__new__(mcls, name, bases, dict_)


class simpleObject(object):
    __metaclass__ = AutoViewConfigMeta 


class Test(simpleObject):

    @auto_view_config
    def activateTheView(self):
        foo = 'bar'

        print foo

if __name__=='__main__':
    t = Test()
    t.activateTheView()
</snippet></ROW><ROW><id>9987127</id><snippet>&gt;&gt;&gt; 1()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not callable
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9987127</id><snippet>TypeError</snippet></ROW><ROW><id>9987127</id><snippet>SyntaxError</snippet></ROW><ROW><id>9987146</id><snippet>d = {}
for values in enumerate(s.values()[0]):
    if values[0]&lt;2:
        d['ans'] = 'True'
    else:
        d['ans'] = 'False'
</snippet></ROW><ROW><id>9987146</id><snippet>d = {'ans': str(len(s.values()[0]) &lt; 2)}
</snippet></ROW><ROW><id>9987146</id><snippet>d['ans']</snippet></ROW><ROW><id>9987146</id><snippet>'True'</snippet></ROW><ROW><id>9987146</id><snippet>s.values()[0]</snippet></ROW><ROW><id>9987146</id><snippet>2</snippet></ROW><ROW><id>9987146</id><snippet>'False'</snippet></ROW><ROW><id>9987146</id><snippet>enumerate</snippet></ROW><ROW><id>9987146</id><snippet>&lt;2</snippet></ROW><ROW><id>9987146</id><snippet>else</snippet></ROW><ROW><id>9987146</id><snippet>'False'</snippet></ROW><ROW><id>9987146</id><snippet>d = dict( [(val, str(index &lt; 2)) for (index, val) in enumerate(s.values()[0])] )
</snippet></ROW><ROW><id>9987146</id><snippet>d = dict( [(i , "True") for i in li[:2]] + [(i, "False") for i in li[2:]] )
</snippet></ROW><ROW><id>9987146</id><snippet>d.update( (( (val, str(index &lt; 2)) for (index, val) in enumerate(s.values()[0]) )) )
</snippet></ROW><ROW><id>9987311</id><snippet>__init__</snippet></ROW><ROW><id>9987311</id><snippet>self.istream</snippet></ROW><ROW><id>9987311</id><snippet>OnFunButton</snippet></ROW><ROW><id>9987311</id><snippet>self.istream</snippet></ROW><ROW><id>9987311</id><snippet>__init__</snippet></ROW><ROW><id>9987311</id><snippet>self.istream</snippet></ROW><ROW><id>9987311</id><snippet>self.istream</snippet></ROW><ROW><id>9987317</id><snippet>{{ value|markdown:"debatesyntax" }}
</snippet></ROW><ROW><id>9987330</id><snippet>angle</snippet></ROW><ROW><id>9987330</id><snippet>error = 1 - math.cos( angle / 2 )
</snippet></ROW><ROW><id>9987330</id><snippet>angle = 2 * math.acos( 1 - error )
angle = (2*math.pi) / math.ceil( (2*math.pi) / angle )
</snippet></ROW><ROW><id>9987330</id><snippet>[(1,0), (cos(angle),sin(angle)), cos(2*angle),sin(2*angle)), ... ]</snippet></ROW><ROW><id>9987330</id><snippet>radius</snippet></ROW><ROW><id>9987330</id><snippet>angle = 2 * math.acos( 1 - error/radius )
angle = (2*math.pi) / math.ceil( (2*math.pi) / angle )
</snippet></ROW><ROW><id>9987330</id><snippet>major</snippet></ROW><ROW><id>9987330</id><snippet>minor</snippet></ROW><ROW><id>9987330</id><snippet>radius = max( major, minor )
angle = 2 * math.acos( 1 - error/radius )
angle = (2*math.pi) / math.ceil( (2*math.pi) / angle )
</snippet></ROW><ROW><id>9987330</id><snippet>[ (major, 0),
  (major*cos(angle), minor*sin(angle)),
  (major*cos(2*angle), minor*sin(2*angle)),
  ... ]
</snippet></ROW><ROW><id>9987383</id><snippet>check1</snippet></ROW><ROW><id>9987383</id><snippet>None</snippet></ROW><ROW><id>9987383</id><snippet>[0]</snippet></ROW><ROW><id>9987383</id><snippet>if check1 is not None:
    (error response)
</snippet></ROW><ROW><id>9987383</id><snippet>cur.rowcount</snippet></ROW><ROW><id>9987383</id><snippet>cur.fetchone()</snippet></ROW><ROW><id>9987383</id><snippet>if cur.rowcount &gt; 0:
    (error response)
</snippet></ROW><ROW><id>9987427</id><snippet>def ClosestCommonAncestor(otu1, otu2, tree):
    while tree[otu1][0][0] != tree[otu2][0][0]:
        otu1,otu2,tree = tree[otu1][0],tree[otu2][0],tree
    return tree[otu1][0]
</snippet></ROW><ROW><id>9987427</id><snippet>Tree(*children)</snippet></ROW><ROW><id>9987533</id><snippet>&gt;&gt;&gt; l = [1, 2, 3, 4, 5]
&gt;&gt;&gt; ['yes' if v == 1 else 'no' if v == 2 else 'idle' for v in l]
['yes', 'no', 'idle', 'idle', 'idle']
</snippet></ROW><ROW><id>9987676</id><snippet>__init__</snippet></ROW><ROW><id>9987676</id><snippet>_fields</snippet></ROW><ROW><id>9987676</id><snippet>_fields</snippet></ROW><ROW><id>9987676</id><snippet>__slots__</snippet></ROW><ROW><id>9987676</id><snippet>class Example(object):
    def __init__(self, table=None):
        self.__dict__['_fields'] = {}
        self.__dict__['_table'] = table

    ...

    def __setattr__(self, name, value):
        if name in self._fields:
            self._fields[name].value = value
        else:
            raise AttributeError
</snippet></ROW><ROW><id>9987676</id><snippet>__dict__</snippet></ROW><ROW><id>9987935</id><snippet>import datetime
datetime.datetime(year=year,month=month,day=day,hour=hour)
</snippet></ROW><ROW><id>9987935</id><snippet>datetime.date(year=2000, month=1,day=1) &lt; datetime.datetime(year=year,month=month,day=day,hour=hour) &lt;= datetime.datetime.now()
</snippet></ROW><ROW><id>9988056</id><snippet>('ADBFGC', 14.5)</snippet></ROW><ROW><id>9988056</id><snippet>'A'</snippet></ROW><ROW><id>9988056</id><snippet>'C'</snippet></ROW><ROW><id>9988056</id><snippet>'ADBFGC'</snippet></ROW><ROW><id>9988056</id><snippet>tree[otu2[0]]</snippet></ROW><ROW><id>9988082</id><snippet>regex</snippet></ROW><ROW><id>9988082</id><snippet>\p{L}</snippet></ROW><ROW><id>9988181</id><snippet>maze = raw_input('Maze File: ')
</snippet></ROW><ROW><id>9988199</id><snippet>@echo off
rem Work around for developers whose setup does not have python in their path.
setlocal
set PATH=%PATH%;%PYTHON_HINTS%
python.exe %1 %2 %3 %4 %5 %6 %7 %8 %9
</snippet></ROW><ROW><id>9988675</id><snippet>Docs.objects(_id=pymongo.objectid.ObjectId('4f4381f4e779897a2c000009'))
</snippet></ROW><ROW><id>9988929</id><snippet>AUTO_INCREMENT</snippet></ROW><ROW><id>9988929</id><snippet>&gt; 1</snippet></ROW><ROW><id>9988929</id><snippet>if get_update_id:</snippet></ROW><ROW><id>9988929</id><snippet>def run_sql_safe(sql, input_tuple=(), get_update_id=False, debug = False):
    from contextlib import closing
    conn = get_mysql_connection()
    with closing(conn):
        cursor = conn.cursor(cursorclass=MySQLdb.cursors.DictCursor)
        with closing(cursor):
            cursor.execute(sql, input_tuple)
            conn.commit()
            if get_update_id:
                return cursor.lastrowid
</snippet></ROW><ROW><id>9988929</id><snippet>MySQLdb.cursors.DictCursor</snippet></ROW><ROW><id>9988929</id><snippet>def run_sql_safe(sql, input_tuple=(), get_update_id=False, debug = False):
    from contextlib import closing
    conn = get_mysql_connection(cursorclass=MySQLdb.cursors.DictCursor)
    with closing(conn):
        with conn as cursor:
            cursor.execute(sql, input_tuple)
            if get_update_id:
                return cursor.lastrowid
</snippet></ROW><ROW><id>9988987</id><snippet>time.mktime()</snippet></ROW><ROW><id>9988987</id><snippet>import datetime
dt = datetime.datetime(2012, 1, 10)
</snippet></ROW><ROW><id>9988987</id><snippet>timetuple = dt.utctimetuple()
epoch = calendar.timegm(timetuple)
</snippet></ROW><ROW><id>9988987</id><snippet>timetuple = dt.timetuple()
epoch = time.mktime(timetuple)
</snippet></ROW><ROW><id>9988987</id><snippet>datetime.datetime.utcfromtimestamp(epoch)
</snippet></ROW><ROW><id>9988987</id><snippet>dt.year
dt.month
dt.day
</snippet></ROW><ROW><id>9988987</id><snippet>dateString = "%s-%s-%s" % (year, month, day)
</snippet></ROW><ROW><id>9988993</id><snippet>re.sub("\d+\.*\d*\w*", 'MEMORY247', '0.0Mb is not enough 2GB is much 0gb more space 3.4gb')
</snippet></ROW><ROW><id>9988993</id><snippet>"\d+\.*\d*[kKmMgG][bB]"
</snippet></ROW><ROW><id>9989338</id><snippet>os.wait()</snippet></ROW><ROW><id>9989338</id><snippet>import os
def child():
    pid = os.fork()
    if not pid:
            for i in range(5):
                    print i
    else:
        return os.wait()

child()
</snippet></ROW><ROW><id>9989441</id><snippet>&gt;&gt;&gt; data = [['a', 'b', 'c'], ['aaaaaaaaaa', 'b', 'c'], ['a', 'bbbbbbbbbb', 'c']]

&gt;&gt;&gt; col_width = max(len(word) for row in data for word in row) + 2  # padding
&gt;&gt;&gt; for row in data:
...     print "".join(word.ljust(col_width) for word in row)
a            b            c            
aaaaaaaaaa   b            c            
a            bbbbbbbbbb   c   
</snippet></ROW><ROW><id>9989441</id><snippet>.ljust()</snippet></ROW><ROW><id>9989586</id><snippet>&lt;input type="hidden" value="{% if request.REQUEST.next %}{{ request.REQUEST.next }}{% else %}{% if request.META.HTTP_REFERER %}{{ request.META.HTTP_REFERER }}{% else %}/{% endif %}{% endif %}" name="next" /&gt;
</snippet></ROW><ROW><id>9989586</id><snippet>{% block body %}
    &lt;p&gt;{% trans "You've been logged out." %}&lt;/p&gt;
    {% if '/account/logout/' not in request.META.HTTP_REFERER %}
    &lt;p&gt;
        {% trans 'You will be redirected in a second' %}
    &lt;/p&gt;
    {% endif %}
{% endblock %}

{% block extra_body %}
    {% if '/account/logout/' not in request.META.HTTP_REFERER %}
        &lt;script type="text/javascript"&gt;
        document.location.href = '{{ request.META.HTTP_REFERER }}';
        &lt;/script&gt;
    {% endif %}
{% endblock %}
</snippet></ROW><ROW><id>9990266</id><snippet>gpl = "%(id)s : %(atr)s"
</snippet></ROW><ROW><id>9990266</id><snippet>print gpl % {'id': obj['id'], 'atr': con['atr']}
</snippet></ROW><ROW><id>9990266</id><snippet>for obj in objects:
    for con in obj['content']:
        print gpl% {'id': obj['id'], 'atr': con['atr']}
</snippet></ROW><ROW><id>9990502</id><snippet>from itertools import combinations

data = {'A': [('AD', 4.0), None, None], 'C': [('ADBFGC', 14.5), None, None], 'B': [('BF', 0.5), None, None], 'E': [('ADBFGCE', 17.0), None, None], 'D': [('AD', 4.0), None, None], 'G': [('BFG', 6.25), None, None], 'F': [('BF', 0.5), None, None], 'ADBFG': [('ADBFGC', 6.25), ('AD', 4.25), ('BFG', 2.0)], 'BF': [('BFG', 5.75), ('B', 0.5), ('F', 0.5)], 'ADBFGC': [('ADBFGCE', 2.5), ('ADBFG', 6.25), ('C', 14.5)], 'ADBFGCE': [None, ('ADBFGC', 2.5), ('E', 17.0)], 'BFG': [('ADBFG', 2.0), ('BF', 5.75), ('G', 6.25)], 'AD': [('ADBFG', 4.25), ('A', 4.0), ('D', 4.0)]}

def get_path(tree,leaf):
  path = []
  location = leaf
  while True:
    path.append(location)
    parent = tree.get(location)[0]
    if parent:
      location = parent[0]
    else:
      break
  return path

def get_leaves(tree):
  return [ x for (x,y) in tree.items() if y[1] is None and y[2] is None ]

def leafDistances(tree):
  paths = {}
  leaves = get_leaves(tree)
  for leaf in leaves:
    paths[leaf] = get_path(tree,leaf)
  results = {}
  for l1,l2 in combinations(leaves,2):
    commonAncestor = [ x for (x,y) in zip(paths[l1][::-1],paths[l2][::-1]) if x == y ][-1]
    distance = paths[l1].index(commonAncestor) + paths[l2].index(commonAncestor)
    results[(l1,l2)] = distance
    print "%s &lt;-&gt; %s Ancestor == %s, distance == %s\nPath of %s == %s\nPath of %s == %s" % (l1,l2,commonAncestor,distance,l1,paths[l1],l2,paths[l2])
  return results

leafDistances(data)
</snippet></ROW><ROW><id>9990502</id><snippet>A &lt;-&gt; C Ancestor == ADBFGC, distance == 4
Path of A == ['A', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of C == ['C', 'ADBFGC', 'ADBFGCE']
A &lt;-&gt; B Ancestor == ADBFG, distance == 5
Path of A == ['A', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of B == ['B', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
A &lt;-&gt; E Ancestor == ADBFGCE, distance == 5
Path of A == ['A', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of E == ['E', 'ADBFGCE']
A &lt;-&gt; D Ancestor == AD, distance == 2
Path of A == ['A', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of D == ['D', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
A &lt;-&gt; G Ancestor == ADBFG, distance == 4
Path of A == ['A', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of G == ['G', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
A &lt;-&gt; F Ancestor == ADBFG, distance == 5
Path of A == ['A', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of F == ['F', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
C &lt;-&gt; B Ancestor == ADBFGC, distance == 5
Path of C == ['C', 'ADBFGC', 'ADBFGCE']
Path of B == ['B', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
C &lt;-&gt; E Ancestor == ADBFGCE, distance == 3
Path of C == ['C', 'ADBFGC', 'ADBFGCE']
Path of E == ['E', 'ADBFGCE']
C &lt;-&gt; D Ancestor == ADBFGC, distance == 4
Path of C == ['C', 'ADBFGC', 'ADBFGCE']
Path of D == ['D', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
C &lt;-&gt; G Ancestor == ADBFGC, distance == 4
Path of C == ['C', 'ADBFGC', 'ADBFGCE']
Path of G == ['G', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
C &lt;-&gt; F Ancestor == ADBFGC, distance == 5
Path of C == ['C', 'ADBFGC', 'ADBFGCE']
Path of F == ['F', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
B &lt;-&gt; E Ancestor == ADBFGCE, distance == 6
Path of B == ['B', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of E == ['E', 'ADBFGCE']
B &lt;-&gt; D Ancestor == ADBFG, distance == 5
Path of B == ['B', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of D == ['D', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
B &lt;-&gt; G Ancestor == BFG, distance == 3
Path of B == ['B', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of G == ['G', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
B &lt;-&gt; F Ancestor == BF, distance == 2
Path of B == ['B', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of F == ['F', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
E &lt;-&gt; D Ancestor == ADBFGCE, distance == 5
Path of E == ['E', 'ADBFGCE']
Path of D == ['D', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
E &lt;-&gt; G Ancestor == ADBFGCE, distance == 5
Path of E == ['E', 'ADBFGCE']
Path of G == ['G', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
E &lt;-&gt; F Ancestor == ADBFGCE, distance == 6
Path of E == ['E', 'ADBFGCE']
Path of F == ['F', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
D &lt;-&gt; G Ancestor == ADBFG, distance == 4
Path of D == ['D', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of G == ['G', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
D &lt;-&gt; F Ancestor == ADBFG, distance == 5
Path of D == ['D', 'AD', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of F == ['F', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
G &lt;-&gt; F Ancestor == BFG, distance == 3
Path of G == ['G', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
Path of F == ['F', 'BF', 'BFG', 'ADBFG', 'ADBFGC', 'ADBFGCE']
</snippet></ROW><ROW><id>9990526</id><snippet>e = Example()
e._Example__myTest1   # 1
</snippet></ROW><ROW><id>9990526</id><snippet>class Example():
    __myTest1 = 1
    __myTest2 = 1
    def __init__(self):
        pass

    @classmethod
    def modifyTest(cls, value, name="Test1"):
        setattr(cls, '_%s__my%s' % (cls.__name__, name), value)
</snippet></ROW><ROW><id>9990528</id><snippet>p_date = re.compile(r'(\d{1,2}[/-]\d{1,2}[/-]\d{1,4})')
</snippet></ROW><ROW><id>9990528</id><snippet>p_date = re.compile(r'(\d{1,2})[/-](\d{1,2})[/-](\d{1,4})')
</snippet></ROW><ROW><id>9990847</id><snippet>fitfunc = lambda params, x: params[0] * x + params[1]  
</snippet></ROW><ROW><id>9990847</id><snippet>fitfunc = lambda params, x: params[0] * x 
</snippet></ROW><ROW><id>9990847</id><snippet>init_b = min(y) 
</snippet></ROW><ROW><id>9990847</id><snippet>init_p = numpy.array((init_a))
</snippet></ROW><ROW><id>9990847</id><snippet>params</snippet></ROW><ROW><id>9990847</id><snippet>&lt;xy&gt;/&lt;x^2&gt;</snippet></ROW><ROW><id>9991150</id><snippet>setup</snippet></ROW><ROW><id>9991150</id><snippet>if 'bdist_msi' in sys.argv:
    sys.argv += ['--initial-target-dir', 'c:\default\path']
</snippet></ROW><ROW><id>9991262</id><snippet>str.translate()</snippet></ROW><ROW><id>9991262</id><snippet>to_compare = to_compare.translate(None, {"-"})
</snippet></ROW><ROW><id>9991262</id><snippet>delchars</snippet></ROW><ROW><id>9991262</id><snippet>translation_map = str.maketrans({"-": None})
to_compare = to_compare.translate(translation_map)
</snippet></ROW><ROW><id>9991262</id><snippet>def to_translation_map(iterable):
    return {key: None for key in iterable}
    //return dict((key, None) for key in iterable) //For old versions of Python without dict comps.
</snippet></ROW><ROW><id>9992022</id><snippet>In [6]: re.findall(r"'(\w+)'", s)
Out[6]: ['Tom', 'Harry', 'rock']
</snippet></ROW><ROW><id>9992022</id><snippet>'</snippet></ROW><ROW><id>9992022</id><snippet>\w+</snippet></ROW><ROW><id>9992022</id><snippet>'</snippet></ROW><ROW><id>9992022</id><snippet>findall()</snippet></ROW><ROW><id>9992022</id><snippet>In [7]: re.findall(r"'([A-Z]\w*)'", s)
Out[7]: ['Tom', 'Harry']
</snippet></ROW><ROW><id>9992069</id><snippet>manage.py sqlall</snippet></ROW><ROW><id>9992069</id><snippet>default</snippet></ROW><ROW><id>9992240</id><snippet>a.setEnabled(True/False)
</snippet></ROW><ROW><id>9992240</id><snippet>QAction</snippet></ROW><ROW><id>9992518</id><snippet>collections.Counter.most_common</snippet></ROW><ROW><id>9992518</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; import re
&gt;&gt;&gt; Counter(re.findall("\w+", line_arr)).most_common()[:5]
[('is', 3), ('to', 3), ('pixel', 2), ('it', 2), ('i', 2)]
</snippet></ROW><ROW><id>9992518</id><snippet>\w+</snippet></ROW><ROW><id>9992742</id><snippet>str</snippet></ROW><ROW><id>9992742</id><snippet>strDict = dict((k.encode(), v.encode()) for k, v in myDict.iteritems())
</snippet></ROW><ROW><id>9992943</id><snippet>response.content_disposition = 'attachment; filename="my_filename.txt"'
</snippet></ROW><ROW><id>9993572</id><snippet>initial</snippet></ROW><ROW><id>9993572</id><snippet>def myview(request):
    if request.method == 'POST':
        form = JournalForm(request.POST)
    else:
        form = JournalForm(initial={'tank': 123})

    return render_to_response(...)
</snippet></ROW><ROW><id>9993678</id><snippet>def run(self):
    if self.index == 0:
        time.sleep(0.1)
    while 1:
        time.sleep(0.2)
        item = self.queue.get()
        if item is None:
            break
        print "index:", self.index, "task", item, "finished"
        self.queue.task_done()
</snippet></ROW><ROW><id>9993891</id><snippet>    resolution = '1200x900'
    blob_width, blob_height = resolution.split('x')

    blob_width  = float(blob_width)
    blob_height = float(blob_height)

    width  = float(width)
    height = float(height)
    blob_prop  = blob_width / blob_height

    req_box_prop = width / height

    if req_box_prop == blob_prop:
        scale_factor = blob_width / width
        serving_img_height = blob_width / scale_factor
        serving_img_width  = blob_height / scale_factor

    if req_box_prop &lt; blob_prop:
        serving_img_width  = width
        serving_img_height = width / blob_prop

    else:
        serving_img_width  = height * blob_prop
        serving_img_height = height


    serving_img_width  = int(round(serving_img_width, 0)) 
    serving_img_height = int(round(serving_img_height, 0))

    # use serving urls
    side = max(serving_img_width, serving_img_height)
</snippet></ROW><ROW><id>9993891</id><snippet>'http://yourservingurl=s%s'%side</snippet></ROW><ROW><id>9993892</id><snippet>cherrypy.engine.start()
cherrypy.engine.block()
</snippet></ROW><ROW><id>9993949</id><snippet>__import__</snippet></ROW><ROW><id>9993949</id><snippet>reload</snippet></ROW><ROW><id>9994091</id><snippet>HTTPCACHE_ENABLED = True  
</snippet></ROW><ROW><id>9994091</id><snippet>https://www.mileageplusshopping.com/shopping/b____alpha.htm</snippet></ROW><ROW><id>9994091</id><snippet>https://www.united.com/web/en-US/apps/sso/LoginBridge.aspx?target=/shopping/b____alpha.htm&amp;redirect=sec&amp;targetURLKey=cartua.bridge.url&amp;remove=false</snippet></ROW><ROW><id>9994091</id><snippet>https://x.www.mileageplusshopping.com/shopping/b____alpha.htm</snippet></ROW><ROW><id>9994091</id><snippet>https://www.mileageplusshopping.com/shopping/b____alpha.htm</snippet></ROW><ROW><id>9994282</id><snippet>defaultdict</snippet></ROW><ROW><id>9994282</id><snippet>from collections import defaultdict
d = defaultdict(int)
with open("chat.txt") as f:
    for line in f:
        id, data = line.split(None, 1)
        d[id] += data.lower().count("optimus")
</snippet></ROW><ROW><id>9994418</id><snippet>&gt;&gt;&gt; a = [[1,2],[2,10,10],[3,4,'fred']]
&gt;&gt;&gt; b = [2,1,3]
&gt;&gt;&gt; sorted(a,key=lambda x: b.index(x[0]))
[[2, 10, 10], [1, 2], [3, 4, 'fred']]
</snippet></ROW><ROW><id>9994418</id><snippet>&gt;&gt;&gt; order_dict = dict(zip(b, range(len(b))))
&gt;&gt;&gt; sorted(a,key=lambda x: order_dict[x[0]])
[[2, 10, 10], [1, 2], [3, 4, 'fred']]
</snippet></ROW><ROW><id>9994430</id><snippet>def selected_genders_labels(self):
    return [label for value, label in self.fields['genders'].choices if value in self['genders'].value()]
</snippet></ROW><ROW><id>9994430</id><snippet>In [1]: from testapp.views import XForm; f = XForm(initial={'genders': ['male', 'female']}); print f.selected_genders_labels()
['Men', 'Women']

In [2]: from testapp.views import XForm; f = XForm(initial={'genders': ['female']}); print f.selected_genders_labels()
['Women']

In [3]: from testapp.views import XForm; f = XForm(initial={'genders': []}); print f.selected_genders_labels()
[]

In [4]: from testapp.views import XForm; f = XForm(); print f.selected_genders_labels()
['Men', 'Women']
</snippet></ROW><ROW><id>9994430</id><snippet>{% for label in form.selected_genders_labels %}{{ label }}{% endfor %}
</snippet></ROW><ROW><id>9994430</id><snippet>class XForm(forms.Form):
    GENDER_CHOICES = (
        ('male', 'Men'),
        ('female', 'Women'),
    )

    genders = forms.MultipleChoiceField(choices=GENDER_CHOICES,
        widget=widgets.CheckboxSelectMultiple(),
        initial=[gender[0] for gender in GENDER_CHOICES])

    def selected_genders_labels(self):
        return [label for value, label in self.fields['genders'].choices if value in self['genders'].value()]
</snippet></ROW><ROW><id>9994430</id><snippet>@register.filter
def selected_labels(form, field):
    return [label for value, label in form.fields[field].choices if value in form[field].value()]
</snippet></ROW><ROW><id>9994430</id><snippet>{% for label in form|selcted_labels:"genders" %}
    {{ label }}
{% endfor %}
</snippet></ROW><ROW><id>9995350</id><snippet>In [1]: from haystack.query import SearchQuerySet

In [2]: SearchQuerySet().filter(content='abra')
Out[2]: [&lt;SearchResult: art.artist (pk=u'23')&gt;, &lt;SearchResult: art.artwork (pk=u'191')&gt;]

In [3]: SearchQuerySet().filter(content='abra').count()
Out[3]: 2
</snippet></ROW><ROW><id>9996176</id><snippet>In [2]: mystring = '1,2,3,4,"Hello!",,,,,,,,,'

In [3]: mystring.rstrip(',')
Out[3]: '1,2,3,4,"Hello!"'

In [4]: 
</snippet></ROW><ROW><id>9996305</id><snippet>foosvc.fooize</snippet></ROW><ROW><id>9996305</id><snippet>foosvc</snippet></ROW><ROW><id>9996305</id><snippet>FooSvc.fooize</snippet></ROW><ROW><id>9996305</id><snippet>self</snippet></ROW><ROW><id>9996305</id><snippet>__getattr__()</snippet></ROW><ROW><id>9996305</id><snippet>None</snippet></ROW><ROW><id>9996305</id><snippet>def __getattr__(self, name):
    try:
        return self._service_calls[name]
    except KeyError:
        raise AttributeError
</snippet></ROW><ROW><id>9996594</id><snippet>from gi.repository import Gtk

objectsList = Gtk.TreeStore(str, bool)

for i in range(2):
    parent = objectsList.append(None, ['Parent {}'.format(i), False])
    for j in range(2):
        objectsList.append(parent, ['Child {}'.format(j), True])

gcombo = Gtk.ComboBox.new_with_model(objectsList)
renderer_text = Gtk.CellRendererText()
gcombo.pack_start(renderer_text, True)
gcombo.add_attribute(renderer_text, "text", 0)
gcombo.add_attribute(renderer_text, 'sensitive', 1)
gcombo.show()

win = Gtk.Window()
win.add(gcombo)
win.show_all()
win.connect('destroy', Gtk.main_quit)

Gtk.main()
</snippet></ROW><ROW><id>9996594</id><snippet>sensitive</snippet></ROW><ROW><id>9996594</id><snippet>False</snippet></ROW><ROW><id>9996594</id><snippet>True</snippet></ROW><ROW><id>9996743</id><snippet>pack_propagate</snippet></ROW><ROW><id>9996743</id><snippet>pack</snippet></ROW><ROW><id>9996743</id><snippet># put the frame in its parent
frame.pack()

# tell frame not to let its children control its size
frame.pack_propagate(0)

# put the textbox in the frame
textBox.pack()
</snippet></ROW><ROW><id>9996844</id><snippet>pp.Dict</snippet></ROW><ROW><id>9996844</id><snippet>pp.delimitedList</snippet></ROW><ROW><id>9996844</id><snippet>asDict</snippet></ROW><ROW><id>9996844</id><snippet>asDict</snippet></ROW><ROW><id>9996844</id><snippet>ParsingResult</snippet></ROW><ROW><id>9996844</id><snippet>ParsingResult</snippet></ROW><ROW><id>9996844</id><snippet>from pyparsing import *
field_name = field_val = Word(alphanums)
colon = Suppress(Literal(':'))

expr = Dict(Group(
    field_name +
    nestedExpr(content =
        Dict(delimitedList( 
            Group(field_name + colon + field_value), 
            delim = ';' 
        ))
    )
))
</snippet></ROW><ROW><id>9996844</id><snippet>&gt;&gt;&gt; res = expr.parseString('foo(bar:baz;x:y)')
&gt;&gt;&gt; type(res['foo'])
&lt;class 'pyparsing.ParseResults'&gt;
&gt;&gt;&gt; { k:v.asDict() for k,v in res.asDict().items() }
{'foo': {'x': 'y', 'bar': 'baz'}}
</snippet></ROW><ROW><id>9996887</id><snippet>nltk.data.load('tokenizers/punkt/english.pickle')
</snippet></ROW><ROW><id>9996887</id><snippet>&gt;&gt;&gt; sent_detector = nltk.data.load('tokenizers/punkt/english.pickle')
&gt;&gt;&gt; print '\n-----\n'.join(sent_detector.tokenize(text.strip()))
Punkt knows that the periods in Mr. Smith and Johann S. Bach
do not mark sentence boundaries.
-----
And sometimes sentences 
can start with non-capitalized words.
-----
i is a good variable
name.
</snippet></ROW><ROW><id>9997093</id><snippet>shell=True</snippet></ROW><ROW><id>9997093</id><snippet> proc = subprocess.Popen('ls *.bc', shell=True,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>9997296</id><snippet>frozenset(mutabledict.items())</snippet></ROW><ROW><id>9997296</id><snippet>dict</snippet></ROW><ROW><id>9997296</id><snippet>mutabledict = dict(zip('abc', range(3))
immutable = frozenset(mutabledict.items())
read_frozen = dict(immutable)
read_frozen['a'] #=&gt; 1
</snippet></ROW><ROW><id>9997296</id><snippet>dict</snippet></ROW><ROW><id>9997296</id><snippet>__setitem__</snippet></ROW><ROW><id>9997442</id><snippet>set(folder for folder, subfolders, files in os.walk('/') for file_ in files if os.path.splitext(file_)[1] == '.png')
</snippet></ROW><ROW><id>9997736</id><snippet>LogsXML</snippet></ROW><ROW><id>9997736</id><snippet>sudo chown lucasp:crontab ~lucasp/Desktop/LogsXML
chmod g+w ~lucasp/Desktop/LogsXML
</snippet></ROW><ROW><id>9997736</id><snippet>chown g+wx &lt;directory&gt;</snippet></ROW><ROW><id>9997816</id><snippet>#lang racket

(define-values (sp i o e) (subprocess #f #f #f
                                      "/usr/bin/python"
                                      "/tmp/foo.py"))

(display "server\n" o)

(flush-output o)

(display (read-line i))
</snippet></ROW><ROW><id>9997816</id><snippet>Enter something: you entered server
</snippet></ROW><ROW><id>9997841</id><snippet>pptest.py</snippet></ROW><ROW><id>9997841</id><snippet>job_list.append(job_server.submit(pt.ppTask, (1,), modules=('pptest',)))
</snippet></ROW><ROW><id>9997841</id><snippet>ppTask</snippet></ROW><ROW><id>9997841</id><snippet>TestClass</snippet></ROW><ROW><id>9997841</id><snippet>tc = pptest.TestClass()
</snippet></ROW><ROW><id>9997841</id><snippet>import pp

class TestClass(object):
    def __init__(self):
        pass
    def doSomething (self, number) :
        print number**2

class PPTask (object) :
    def __init__ (self) :
        pass
    def ppTask(self, number = 1) :
        sum = 0
        sum += number
        tc = pptest.TestClass()
        tc.doSomething(sum)
        return sum

if __name__ == '__main__' :
    job_server = pp.Server()
    job_list = []
    results = []
    for i in xrange(10) :
        pt = PPTask()
        job_list.append(job_server.submit(pt.ppTask, (1,), modules=('pptest',)))
    for job in job_list :
        results.append(job())
    for result in results :
        print result
</snippet></ROW><ROW><id>9997876</id><snippet>models</snippet></ROW><ROW><id>9997876</id><snippet>views</snippet></ROW><ROW><id>9998059</id><snippet>import hashlib; hashlib.sha1(data)</snippet></ROW><ROW><id>9998059</id><snippet>hashlib.md5(data)</snippet></ROW><ROW><id>9998059</id><snippet>data</snippet></ROW><ROW><id>9998408</id><snippet># Sample Projects Container
db.define_table('it_projects',
                db.Field('project_name', 'string', length=255, required=True),
                db.Field('description', 'text', required=False, default=''),
                db.Field('is_active', 'boolean', required=False, default=True),
                db.Field('created_on', 'datetime', required=True),
                db.Field('created_by', db.auth_users),
                db.Field('anonymous_read', 'boolean', required=True),
                migrate='it_projects.table')
</snippet></ROW><ROW><id>9998587</id><snippet>help('string')</snippet></ROW><ROW><id>9998587</id><snippet>string</snippet></ROW><ROW><id>9998587</id><snippet>help(str)</snippet></ROW><ROW><id>9998587</id><snippet>help('str')</snippet></ROW><ROW><id>9998587</id><snippet>str</snippet></ROW><ROW><id>9998587</id><snippet>upper</snippet></ROW><ROW><id>9998587</id><snippet>upper</snippet></ROW><ROW><id>9998587</id><snippet>string</snippet></ROW><ROW><id>9998587</id><snippet>&gt;&gt;&gt; upper('hi')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'upper' is not defined
&gt;&gt;&gt; 'hi'.upper() # method from the str type
'HI'
&gt;&gt;&gt; from string import upper
&gt;&gt;&gt; upper('hi') # function from the string module
'HI'
</snippet></ROW><ROW><id>9998785</id><snippet>round</snippet></ROW><ROW><id>9998785</id><snippet>param1_values = [round(d[param1], 2) for d in data]
</snippet></ROW><ROW><id>9998811</id><snippet>bar</snippet></ROW><ROW><id>9998811</id><snippet>times = dates % 1</snippet></ROW><ROW><id>9998811</id><snippet>bar</snippet></ROW><ROW><id>9998811</id><snippet>import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

def main():
    start, stop = dt.datetime(2012,3,1), dt.datetime(2012,4,1)

    fig, ax = plt.subplots()
    for color in ['blue', 'red', 'green']:
        starts, stops = generate_data(start, stop)
        plot_durations(starts, stops, ax, facecolor=color, alpha=0.5)
    plt.show()

def plot_durations(starts, stops, ax=None, **kwargs):
    if ax is None:
        ax = plt.gca()
    # Make the default alignment center, unless specified otherwise
    kwargs['align'] = kwargs.get('align', 'center')

    # Convert things to matplotlib's internal date format...
    starts, stops = mpl.dates.date2num(starts), mpl.dates.date2num(stops)

    # Break things into start days and start times 
    start_times = starts % 1
    start_days = starts - start_times
    durations = stops - starts
    start_times += int(starts[0]) # So that we have a valid date...

    # Plot the bars
    artist = ax.bar(start_days, durations, bottom=start_times, **kwargs)

    # Tell matplotlib to treat the axes as dates...
    ax.xaxis_date()
    ax.yaxis_date()
    ax.figure.autofmt_xdate()
    return artist

def generate_data(start, stop):
    """Generate some random data..."""
    # Make a series of events 1 day apart
    starts = mpl.dates.drange(start, stop, dt.timedelta(days=1))

    # Vary the datetimes so that they occur at random times
    # Remember, 1.0 is equivalent to 1 day in this case...
    starts += np.random.random(starts.size)

    # Make some random stopping times...
    stops = starts + 0.2 * np.random.random(starts.size)

    # Convert back to datetime objects...
    return mpl.dates.num2date(starts), mpl.dates.num2date(stops)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9998833</id><snippet>.append()</snippet></ROW><ROW><id>9998833</id><snippet>.extend()</snippet></ROW><ROW><id>9998833</id><snippet>&gt;&gt;&gt; L = [1, 2, 3, 4]
&gt;&gt;&gt; M = [5, 6, 7, 8, 9]
&gt;&gt;&gt; L.append(M)    # Takes the list M as a whole object
&gt;&gt;&gt;                # and puts it at the end of L
&gt;&gt;&gt; L
[0, 1, 2, 3, [5, 6, 7, 8, 9]]
&gt;&gt;&gt; L = [1, 2, 3, 4]
&gt;&gt;&gt; L.extend(M)    # Takes each element of M and adds 
&gt;&gt;&gt;                # them one by one to the end of L
&gt;&gt;&gt; L
[0, 1, 2, 3, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>9999123</id><snippet>bowtie</snippet></ROW><ROW><id>9999123</id><snippet>cmd = subprocess.call(['bowtie','-f',inpath,'-v','3', '--best','--suppress','6,7','-p','6',ind_path])
</snippet></ROW><ROW><id>9999123</id><snippet>shlex</snippet></ROW><ROW><id>9999123</id><snippet>import shlex
import subprocess
cmd=subprocess.call(shlex.split("ls -al"))
</snippet></ROW><ROW><id>9999405</id><snippet>import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

# Generate data...
nx, nsteps = 100, 20
x = np.linspace(0, 1, nx)
data = np.random.random((nx, nsteps)) - 0.5
data = data.cumsum(axis=0)
data = data.cumsum(axis=1)

# Plot
cmap = mpl.cm.autumn
for i, y in enumerate(data.T):
    plt.plot(x, y, color=cmap(i / float(nsteps)))

plt.show()
</snippet></ROW><ROW><id>9999405</id><snippet>name_r</snippet></ROW><ROW><id>9999405</id><snippet>mpl.cm.autumn</snippet></ROW><ROW><id>9999405</id><snippet>mpl.cm.autumn_r</snippet></ROW><ROW><id>9999449</id><snippet>if any(s in attrs["show"] for s in ("aa", "bb", "cc", "dd", "ee", "ff")):
    self.xx = xxxx
</snippet></ROW><ROW><id>9999449</id><snippet>True</snippet></ROW><ROW><id>9999449</id><snippet>attrs["show"]</snippet></ROW><ROW><id>9999449</id><snippet>"aa"</snippet></ROW><ROW><id>9999449</id><snippet>"bb"</snippet></ROW><ROW><id>9999449</id><snippet>"aa"</snippet></ROW><ROW><id>9999449</id><snippet>if</snippet></ROW><ROW><id>9999449</id><snippet>any()</snippet></ROW><ROW><id>9999449</id><snippet>or</snippet></ROW><ROW><id>9999449</id><snippet>if ("aa" in attrs["show"] or "bb" in attrs["show"] or "cc" in attrs["show"] or
    "dd" in attrs["show"] or "ee" in attrs["show"] or "ff" in attrs["show"]):
    self.xx = xxxx
</snippet></ROW><ROW><id>9999484</id><snippet>settings.py</snippet></ROW><ROW><id>9999484</id><snippet>local_settings.py</snippet></ROW><ROW><id>9999484</id><snippet>settings.py</snippet></ROW><ROW><id>9999484</id><snippet>try:
    from local_settings import *
except ImportError:
    # if you require a local_settings to be present,
    # you could let this exception rise, or raise a
    # more specific exception here
    pass
</snippet></ROW><ROW><id>9999484</id><snippet>--settings</snippet></ROW><ROW><id>9999484</id><snippet>runserver</snippet></ROW><ROW><id>9999484</id><snippet>--settings</snippet></ROW><ROW><id>9999663</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('http://cdn.sstatic.net/stackoverflow/img/sprites.png')
&gt;&gt;&gt; r.status_code
200
&gt;&gt;&gt; r = requests.get('http://cdn.sstatic.net/stackoverflow/img/sprites.xxx')
&gt;&gt;&gt; r.status_code
404
</snippet></ROW><ROW><id>9999701</id><snippet>typesm = Attempt.objects.filter(userID_f = request.user).values('questionID_f__type_f__typeID_f')
</snippet></ROW><ROW><id>9999701</id><snippet>attempt__</snippet></ROW><ROW><id>9999701</id><snippet>Attempt</snippet></ROW><ROW><id>9999943</id><snippet>'str' object has no attribute '__cause__'</snippet></ROW><ROW><id>9999943</id><snippet>no attribute '__cause__'</snippet></ROW><ROW><id>9999984</id><snippet>mvn archetype:generate</snippet></ROW><ROW><id>9999984</id><snippet>.py</snippet></ROW><ROW><id>9999994</id><snippet>Timer</snippet></ROW><ROW><id>9999994</id><snippet>import threading

def after_2_minutes():
   if process_still_running():
       print "ALERT!!"

# start a timer in the background that waits 2 minutes
threading.Timer(2 * 60, after_2_minutes).start()

# start the process
foo.bar()
</snippet></ROW><ROW><id>9999994</id><snippet>after_30_minutes</snippet></ROW><ROW><id>10000055</id><snippet>chef-client</snippet></ROW><ROW><id>10000055</id><snippet>node['ohai_time']</snippet></ROW><ROW><id>10000055</id><snippet>chef-client</snippet></ROW><ROW><id>10000170</id><snippet>FileCookieJar</snippet></ROW><ROW><id>10000170</id><snippet>MozillaCookieJar</snippet></ROW><ROW><id>10000170</id><snippet>MSIECookieJar</snippet></ROW><ROW><id>10000170</id><snippet>LWPCookieJar</snippet></ROW><ROW><id>10000273</id><snippet>in</snippet></ROW><ROW><id>10000273</id><snippet>encrypt = 'd' if raw_input("Encrypt or decrypt a file (E/d):") in ('d', 'D') else 'e'
</snippet></ROW><ROW><id>10000273</id><snippet>encrypt = 'd' if raw_input("Encrypt or decrypt a file (E/d):").lower() == 'd' else 'e'
</snippet></ROW><ROW><id>10000273</id><snippet>while True:
    encrypt = raw_input("Encrypt or decrypt a file (E/d):")

    # Convert to lowercase
    encrypt = encrypt.lower()

    # If it's e or d then break out of the loop
    if encrypt in ('e', 'd'):
        break

    # Otherwise, it'll loop back and ask them to input again
</snippet></ROW><ROW><id>10000273</id><snippet>file_text = (lambda default, inp: default if inp.lower() == default else inp)("a.txt", raw_input("File name(a.txt):"))
</snippet></ROW><ROW><id>10000475</id><snippet>open()</snippet></ROW><ROW><id>10000475</id><snippet>databasepath</snippet></ROW><ROW><id>10000475</id><snippet>os.getcwd()</snippet></ROW><ROW><id>10000687</id><snippet>'DRIVER={SQL Server};SERVER=SERVERNAME;DATABASE=DBName;Trusted_Connection=yes'</snippet></ROW><ROW><id>10001087</id><snippet>INSERT IGNORE INTO artists VALUES (NULL, ?)
</snippet></ROW><ROW><id>10001154</id><snippet>BEGIN TRANSACTION</snippet></ROW><ROW><id>10001154</id><snippet>COMMIT</snippet></ROW><ROW><id>10001154</id><snippet>ROLLBACK</snippet></ROW><ROW><id>10001253</id><snippet>send</snippet></ROW><ROW><id>10001253</id><snippet>import logging
logging.basicConfig(level=logging.INFO)
#logging.getLogger('suds.client').setLevel(logging.DEBUG)
#logging.getLogger('suds.transport').setLevel(logging.DEBUG)
#logging.getLogger('suds.xsd.schema').setLevel(logging.DEBUG)
#logging.getLogger('suds.wsdl').setLevel(logging.DEBUG)

from suds.client import Client
from suds.xsd.doctor import ImportDoctor, Import
from suds.transport.https import HttpAuthenticated

class MyTransport(HttpAuthenticated):
  def __init__(self,*args,**kwargs):
    HttpAuthenticated.__init__(self,*args,**kwargs)
    self.last_headers = None
  def send(self,request):
    result = HttpAuthenticated.send(self,request)
    self.last_headers = result.headers
    return result

doctor = ImportDoctor(Import('http://schemas.xmlsoap.org/soap/encoding/'))
svc_url  = 'https://server/Service?wsdl'
svc_user = 'username'
svc_pass = 'password'

client = Client(svc_url,doctor=doctor,transport=MyTransport())
# For some reason I can't be bothered to investigate, setting the username and password in
# client kwargs doesn't pass them to the custom transport:
client.set_options(location=svc_url.partition('?')[0],username=svc_user,password=svc_pass)
# call a method
client.service.SomeMethod()
# look at headers
client.options.transport.last_headers
</snippet></ROW><ROW><id>10001339</id><snippet>&gt;&gt;&gt; myl = ['A','B','C','D','E','F']
&gt;&gt;&gt; [''.join(myl[i:i+2]) for i in range(0, len(myl), 2)]
['AB', 'CD', 'EF']
&gt;&gt;&gt; print '\n'.join(''.join(myl[i:i+2]) for i in range(0, len(myl), 2))
AB
CD
EF
</snippet></ROW><ROW><id>10001339</id><snippet>''.join(myl[i:i+2])</snippet></ROW><ROW><id>10001339</id><snippet>myl[i] + myl[i+1]</snippet></ROW><ROW><id>10001339</id><snippet>''.join()</snippet></ROW><ROW><id>10001339</id><snippet>zip()</snippet></ROW><ROW><id>10001339</id><snippet>&gt;&gt;&gt; map(''.join, zip(*[iter(myl)]*2))
['AB', 'CD', 'EF']
</snippet></ROW><ROW><id>10001684</id><snippet>for line in file:
    if "AP" in line:
        i = line.find('AP')
        splitLine = line[i+2:].split('|')
        val = splitLine[0]
        print val,
    elif "Num of clients" in line:
        splitLine = line.split(':')
        num = splitLine[1]
        print '- ' + num
</snippet></ROW><ROW><id>10001744</id><snippet>SERVER_EMAIL</snippet></ROW><ROW><id>10001744</id><snippet>EMAIL_SUBJECT_PREFIX</snippet></ROW><ROW><id>10001744</id><snippet> import socket
 SERVER_ADMIN = 'alerts+{0}@mydomain.com'.format(socket.gethostname())
</snippet></ROW><ROW><id>10001744</id><snippet> import socket
 EMAIL_SUBJECT_PREFIX = '[my_django_app - {0}] '.format(socket.gethostname())
</snippet></ROW><ROW><id>10001790</id><snippet>row[-3], row[-4] = 'http://www.foo.com/' + row[-3], 'http://www.foo.com/' + row[-4]
</snippet></ROW><ROW><id>10001861</id><snippet>type(3, )</snippet></ROW><ROW><id>10001861</id><snippet>type(3)</snippet></ROW><ROW><id>10001861</id><snippet>&gt;&gt;&gt; def f(x):
...     print x
... 
&gt;&gt;&gt; f(3)
3
&gt;&gt;&gt; f(3,)
3
&gt;&gt;&gt; f((3,))
(3,)
</snippet></ROW><ROW><id>10002375</id><snippet>run.py</snippet></ROW><ROW><id>10002375</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10002375</id><snippet>python -m run
</snippet></ROW><ROW><id>10002375</id><snippet>-m</snippet></ROW><ROW><id>10002375</id><snippet>module-name</snippet></ROW><ROW><id>10002375</id><snippet>sys.path</snippet></ROW><ROW><id>10002375</id><snippet>.py</snippet></ROW><ROW><id>10002431</id><snippet>from time import sleep

do_task()
sleep(60)
do_task()
</snippet></ROW><ROW><id>10002640</id><snippet> for i in range(6):
    for j in range(10):
        if j in [7,8]: continue
        print i*10+j
</snippet></ROW><ROW><id>10002744</id><snippet>None</snippet></ROW><ROW><id>10002744</id><snippet>'None'</snippet></ROW><ROW><id>10002744</id><snippet>str.replace</snippet></ROW><ROW><id>10002744</id><snippet>'None'</snippet></ROW><ROW><id>10002744</id><snippet>None</snippet></ROW><ROW><id>10002744</id><snippet>None</snippet></ROW><ROW><id>10002744</id><snippet>'None'</snippet></ROW><ROW><id>10002795</id><snippet>import datetime

minyear = 1900
maxyear = datetime.date.today().year

mydate = '12/12/2000'
dateparts = mydate.split('/')
try:
    if len(dateparts) != 3:
       raise ValueError("Invalid date format")
    if int(dateparts[2]) &gt; maxyear or int(dateparts[2]) &lt; minyear:
       raise ValueError("Year out of range")
    dateobj = datetime.date(int(dateparts[2]),int(dateparts[1]),int(dateparts[0]))
except:
    // handle errors
</snippet></ROW><ROW><id>10002795</id><snippet>datetime.date(2000,45,23)

Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    datetime.date(2000,45,23)
ValueError: month must be in 1..12
</snippet></ROW><ROW><id>10003167</id><snippet>sed -e '/&lt;dependencies&gt;/,/&lt;\/dependencies&gt;/ !{ 
       s!&lt;version&gt;[0-9.]\+&lt;/version&gt;!&lt;version&gt;'"$NEWVERSION"'&lt;/version&gt;!
       }' MY_FILE
</snippet></ROW><ROW><id>10003167</id><snippet>/&lt;dependencies&gt;/,/&lt;\/dependencies&gt;/</snippet></ROW><ROW><id>10003167</id><snippet>&lt;dependencies&gt;</snippet></ROW><ROW><id>10003167</id><snippet>&lt;/dependencies&gt;</snippet></ROW><ROW><id>10003167</id><snippet>!</snippet></ROW><ROW><id>10003167</id><snippet>&lt;dependencies&gt;</snippet></ROW><ROW><id>10003167</id><snippet>&lt;/dependencies&gt;</snippet></ROW><ROW><id>10003167</id><snippet>s!&lt;version&gt;[0-9.]\+&lt;/version&gt;!&lt;version&gt;'"$NEWVERSION"'&lt;/version&gt;!</snippet></ROW><ROW><id>10003167</id><snippet>&lt;version&gt;...&lt;/version&gt;</snippet></ROW><ROW><id>10003167</id><snippet>&lt;version&gt;$NEWVERSION&lt;/version&gt;</snippet></ROW><ROW><id>10003167</id><snippet>$NEWVERSION</snippet></ROW><ROW><id>10003167</id><snippet>'"$NEWVERSION"'</snippet></ROW><ROW><id>10003167</id><snippet>$NEWVERSION</snippet></ROW><ROW><id>10003201</id><snippet>itertools.islice()</snippet></ROW><ROW><id>10003201</id><snippet> deque_slice = collections.deque(itertools.islice(my_deque, 10, 20))
</snippet></ROW><ROW><id>10003201</id><snippet>deque</snippet></ROW><ROW><id>10003201</id><snippet>islice()</snippet></ROW><ROW><id>10003201</id><snippet>deque</snippet></ROW><ROW><id>10003201</id><snippet>class sliceable_deque(collections.deque):
    def __getitem__(self, index):
        if isinstance(index, slice):
            return type(self)(itertools.islice(self, index.start,
                                               index.stop, index.step))
        return collections.deque.__getitem__(self, index)
</snippet></ROW><ROW><id>10003201</id><snippet>islice</snippet></ROW><ROW><id>10003201</id><snippet>reversed()</snippet></ROW><ROW><id>10003201</id><snippet>deque</snippet></ROW><ROW><id>10003201</id><snippet>if</snippet></ROW><ROW><id>10003201</id><snippet>class sliceable_deque(collections.deque):
    def __getitem__(self, index):
        try:
            return collections.deque.__getitem__(self, index)
        except TypeError:
            return type(self)(itertools.islice(self, index.start,
                                               index.stop, index.step))
</snippet></ROW><ROW><id>10003201</id><snippet>deque</snippet></ROW><ROW><id>10003201</id><snippet>slice()</snippet></ROW><ROW><id>10003210</id><snippet>import itertools
import collections

person_to_networks = collections.defaultdict(set)
person_to_friends = collections.defaultdict(set)

def format_name(name):
    return name.split(',')[1][1:] + ' ' + name.split(',')[0]

with open('exampletext') as f:
    #cheap hack so that we detect the need for a new leader on the first line
    lines = [''] + [line.strip() for line in f]

for line in lines:
    if line == '': 
        new_leader = True
    else:
        if new_leader:
            leader = format_name(line)
            new_leader = False
        else:
            if ',' in line:
                person_to_friends[leader].add(format_name(line))
            else:
                person_to_networks[leader].add(line)

print 'Person to Networks'
for p in person_to_networks:
    print '%s: %r' % (p, [e for e in person_to_networks[p]])

print '\nPerson to Friends'
for p in person_to_friends:
    print '%s: %r' % (p, [e for e in person_to_friends[p]])
</snippet></ROW><ROW><id>10003210</id><snippet>Person to Networks
Frank Connors: ['Rowing school']
Calvin Cosmo: ['Sailing buddies', 'Dodge ball group']
Leah Connors: ['Flying Club']

Person to Friends
Frank Connors: ['Robert Connors', 'Leah Connors']
Calvin Cosmo: ['Sally Patterson', 'Shawn Patterson']
Leah Connors: ['Frank Connors', 'John Patterson', 'Shawn Patterson']
</snippet></ROW><ROW><id>10003210</id><snippet>Connors, Leah
Flying Club
Connors, Frank
Patterson, Shawn
Patterson, John

Cosmo, Calvin
Sailing buddies
Dodge ball group
Patterson, Shawn
Patterson, Sally 

Connors, Frank 
Rowing school
Connors, Leah
Connors, Robert
</snippet></ROW><ROW><id>10003354</id><snippet>sys</snippet></ROW><ROW><id>10003354</id><snippet>import sys
myFile=sys.stdout
myFile.write("Hello!\n")
</snippet></ROW><ROW><id>10003354</id><snippet>sys.stderr</snippet></ROW><ROW><id>10003518</id><snippet>get</snippet></ROW><ROW><id>10003518</id><snippet>put</snippet></ROW><ROW><id>10003553</id><snippet>dialChanged</snippet></ROW><ROW><id>10003553</id><snippet># where ever this is defined
def dialChanged(value, mainWindowInstance=None, cc=None):
    pass

cbk = partial(
    self.windowHandler.dialChanged, 
    mainWindowInstance=self, 
    cc=cc)

.valueChanged.connect(cbk)
</snippet></ROW><ROW><id>10003697</id><snippet>from pandas import *
df = DataFrame({ 
    'first': ['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],
    'second': ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'],
    'data': [-0.424972, 0.567020, 0.276232, -1.087401, -0.673690, 0.113648, -1.478427, 0.524988] 
})

df2 = df.join(df.groupby("first").sum().rename(columns={"data":"sum_data"}), 
              on="first")
</snippet></ROW><ROW><id>10003918</id><snippet>class A(object):
  def __init__(self, flag):
    self.flag = flag

  def func(self):
    print self.flag

a = A(1)
b = A(2)

callback_a = a.func
callback_b = b.func

print "typeof(callback_a) = {0}".format(type(callback_a))
print "typeof(callback_b) = {0}".format(type(callback_b))

print "typeof(callback_a.__func__) = {0}".format(type(callback_a.__func__))
print "typeof(callback_b.__func__) = {0}".format(type(callback_b.__func__))

print "'callback_a.__func__ is callback_b.__func__'  is {0}".format(callback_a.__func__ is callback_b.__func__)

callback_a()
callback_b()
</snippet></ROW><ROW><id>10003918</id><snippet>typeof(callback_a) = &lt;type 'instancemethod'&gt;
typeof(callback_b) = &lt;type 'instancemethod'&gt;
typeof(callback_a.__func__) = &lt;type 'function'&gt;
typeof(callback_b.__func__) = &lt;type 'function'&gt;
'callback_a.__func__ is callback_b.__func__'  is True
</snippet></ROW><ROW><id>10003918</id><snippet>is</snippet></ROW><ROW><id>10003918</id><snippet>instancemethod</snippet></ROW><ROW><id>10004090</id><snippet>python /path/to/pdf2txt.py -o text.txt /path/to/yourpdf.pdf</snippet></ROW><ROW><id>10004090</id><snippet>for line in file:</snippet></ROW><ROW><id>10004090</id><snippet>outfp</snippet></ROW><ROW><id>10004239</id><snippet>&gt;&gt;&gt; text = "One of the values, I=1mV is used"
&gt;&gt;&gt; words = text.split()
&gt;&gt;&gt; words
['One', 'of', 'the', 'values,', 'I=1mV', 'is', 'used']
</snippet></ROW><ROW><id>10004239</id><snippet>&gt;&gt;&gt; [w for w in words if 'I=' in w]
['I=1mV']
</snippet></ROW><ROW><id>10004239</id><snippet>I=</snippet></ROW><ROW><id>10004239</id><snippet>&gt;&gt;&gt; [w for w in words if 'I=' in w][0]
'I=1mV'
</snippet></ROW><ROW><id>10004239</id><snippet>&gt;&gt;&gt; next(w for w in words if 'I=' in w)
'I=1mV'
</snippet></ROW><ROW><id>10004239</id><snippet>if</snippet></ROW><ROW><id>10004239</id><snippet>str.startswith()</snippet></ROW><ROW><id>10004239</id><snippet>re.match()</snippet></ROW><ROW><id>10004242</id><snippet>copy</snippet></ROW><ROW><id>10004531</id><snippet>sum=0.0
for i in range(1,6):
    x,y=eval(input("Please enter length and width of room:"))
    sf=(x*y)
    sum=sum+sf
print("The total square footage is",sum)
</snippet></ROW><ROW><id>10004531</id><snippet>sum=0.0
for i in range(1,6):
    x,y=eval(input("Please enter length and width of room %i:" % i ))
    sf=(x*y)
    sum=sum+sf
print("The total square footage is %i" % sum )
</snippet></ROW><ROW><id>10004531</id><snippet>&gt;&gt;&gt; user_name = 'mauricio'
&gt;&gt;&gt; sum = 42
&gt;&gt;&gt; line_to_print = 'Hello user %s, your sum is %i' % (user_name, sum)
&gt;&gt;&gt; print(line_to_print)
Hello mauricio, your sum is 42
</snippet></ROW><ROW><id>10004594</id><snippet>from django.template import RequestContext
# ...
def detail(request, poll_id):
    p = get_object_or_404(Poll, pk=poll_id)
    return render_to_response('polls/detail.html', {'poll': p},
                           context_instance=RequestContext(request))
</snippet></ROW><ROW><id>10004682</id><snippet>query_db</snippet></ROW><ROW><id>10004682</id><snippet>one=True</snippet></ROW><ROW><id>10004682</id><snippet>one=False</snippet></ROW><ROW><id>10004682</id><snippet>&gt;&gt;&gt; query_db(your_query, [some_id], one=True)
{visittd: "a value", cvnotes: "some notes"}

&gt;&gt;&gt; query_db(your_query, [some_id], one=False)
[{visittd: "a value", cvnotes: "some notes"}] # Note the wrapping list
</snippet></ROW><ROW><id>10004682</id><snippet>&gt;&gt;&gt; for thing in query_db(your_query, [some_id], one=True):
...    print thing
visitdt
cvnotes

&gt;&gt;&gt; for thing in query_db(your_query, [some_id], one=False):
...    print thing
{visittd: "a value", cvnotes: "some notes"}
</snippet></ROW><ROW><id>10004682</id><snippet>id</snippet></ROW><ROW><id>10004682</id><snippet>one=True</snippet></ROW><ROW><id>10004682</id><snippet>subject_id_lookup</snippet></ROW><ROW><id>10004682</id><snippet>entries</snippet></ROW><ROW><id>10004682</id><snippet>visitdt</snippet></ROW><ROW><id>10004682</id><snippet>cvnotes</snippet></ROW><ROW><id>10004682</id><snippet>{{ entry.cvnotes }}</snippet></ROW><ROW><id>10004732</id><snippet>import ctypes
ctypes.windll.user32.PostQuitMessage(0)
</snippet></ROW><ROW><id>10005080</id><snippet>request.session['user_id'] = some_id</snippet></ROW><ROW><id>10005080</id><snippet>pyramid.authentication.SessionAuthenticationPolicy</snippet></ROW><ROW><id>10005080</id><snippet>config.include('pyramid_beaker')</snippet></ROW><ROW><id>10005080</id><snippet>AuthTktAuthenticationPolicy</snippet></ROW><ROW><id>10005080</id><snippet>SessionAuthenticationPolicy</snippet></ROW><ROW><id>10005123</id><snippet>is</snippet></ROW><ROW><id>10005123</id><snippet>id(a) == id(b)</snippet></ROW><ROW><id>10005123</id><snippet>&gt;&gt;&gt; print id(()), id(())
30085168 30085168
&gt;&gt;&gt; print id((0,)), id((0,))
38560624 38676432
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10005123</id><snippet>()</snippet></ROW><ROW><id>10005123</id><snippet>(0, )</snippet></ROW><ROW><id>10005123</id><snippet>(0, )</snippet></ROW><ROW><id>10005123</id><snippet>a is not b</snippet></ROW><ROW><id>10005173</id><snippet>def</snippet></ROW><ROW><id>10005173</id><snippet>class</snippet></ROW><ROW><id>10005173</id><snippet>class Ball(object):
    # __init__ is a special method called whenever you try to make
    # an instance of a class. As you heard, it initializes the object.
    # Here, we'll initialize some of the data.
    def __init__(self):
        # Let's add some data to the [instance of the] class.
        self.position = (100, 100)
        self.velocity = (0, 0)

    # We can also add our own functions. When our ball bounces,
    # its vertical velocity will be negated. (no gravity here!)
    def bounce(self):
        self.velocity = (self.velocity[0], -self.velocity[1])
</snippet></ROW><ROW><id>10005173</id><snippet>Ball</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; ball1 = Ball()
&gt;&gt;&gt; ball1
&lt;Ball object at ...&gt;
</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; ball1.position
(100, 100)
&gt;&gt;&gt; ball1.velocity
(0, 0)
&gt;&gt;&gt; ball1.position = (200, 100)
&gt;&gt;&gt; ball1.position
(200, 100)
</snippet></ROW><ROW><id>10005173</id><snippet>Ball</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; ball2 = Ball()
&gt;&gt;&gt; ball2.velocity = (5, 10)
&gt;&gt;&gt; ball2.position
(100, 100)
&gt;&gt;&gt; ball2.velocity
(5, 10)
</snippet></ROW><ROW><id>10005173</id><snippet>ball1</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; ball1.velocity
(0, 0)
</snippet></ROW><ROW><id>10005173</id><snippet>bounce</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; ball2.bounce()
&gt;&gt;&gt; ball2.velocity
(5, -10)
</snippet></ROW><ROW><id>10005173</id><snippet>bounce</snippet></ROW><ROW><id>10005173</id><snippet>velocity</snippet></ROW><ROW><id>10005173</id><snippet>ball1</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; ball1.velocity
</snippet></ROW><ROW><id>10005173</id><snippet>class Room(object):
    # Note that we're taking an argument besides self, here.
    def __init__(self, name):
        self.name = name  # Set the room's name to the name we got.
</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; white_room = Room("White Room")
&gt;&gt;&gt; white_room.name
'White Room'
</snippet></ROW><ROW><id>10005173</id><snippet>interact</snippet></ROW><ROW><id>10005173</id><snippet>class WhiteRoom(Room):  # A white room is a kind of room.
    def __init__(self):
        # All white rooms have names of 'White Room'.
        self.name = 'White Room'

    def interact(self, line):
        if 'test' in line:
            print "'Test' to you, too!"
</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; white_room = WhiteRoom()  # WhiteRoom's __init__ doesn't take an argument (even though its superclass's __init__ does; we overrode the superclass's __init__)
&gt;&gt;&gt; white_room.interact('test')
'Test' to you, too!
</snippet></ROW><ROW><id>10005173</id><snippet>current_room</snippet></ROW><ROW><id>10005173</id><snippet>class RedRoom(Room):  # A red room is also a kind of room.
    def __init__(self):
        self.name = 'Red Room'

    def interact(self, line):
        global current_room, white_room
        if 'white' in line:
            # We could create a new WhiteRoom, but then it
            # would lose its data (if it had any) after moving
            # out of it and into it again.
            current_room = white_room
</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; red_room = RedRoom()
&gt;&gt;&gt; current_room = red_room
&gt;&gt;&gt; current_room.name
'Red Room'
&gt;&gt;&gt; current_room.interact('go to white room')
&gt;&gt;&gt; current_room.name
'White Room'
</snippet></ROW><ROW><id>10005173</id><snippet>WhiteRoom</snippet></ROW><ROW><id>10005173</id><snippet>interact</snippet></ROW><ROW><id>10005173</id><snippet>name</snippet></ROW><ROW><id>10005173</id><snippet>def play_game():
    global current_room
    while True:
        line = raw_input(current_room.name + '&gt; ')
        current_room.interact(line)
</snippet></ROW><ROW><id>10005173</id><snippet>def reset_game():
    global current_room, white_room, red_room
    white_room = WhiteRoom()
    red_room = RedRoom()
    current_room = white_room
</snippet></ROW><ROW><id>10005173</id><snippet>mygame.py</snippet></ROW><ROW><id>10005173</id><snippet>&gt;&gt;&gt; import mygame
&gt;&gt;&gt; mygame.reset_game()
&gt;&gt;&gt; mygame.play_game()
White Room&gt; test
'Test' to you, too!
White Room&gt; go to red room
Red Room&gt; go to white room
White Room&gt;
</snippet></ROW><ROW><id>10005173</id><snippet>def main():
    reset_game()
    play_game()

if __name__ == '__main__':  # If we're running as a script...
    main()
</snippet></ROW><ROW><id>10005197</id><snippet>apt-get install --reinstall packagename
</snippet></ROW><ROW><id>10005197</id><snippet>$ sudo dpkg -i python2.7-minimal_2.7.2-5ubuntu1_amd64.deb
</snippet></ROW><ROW><id>10005265</id><snippet>setuptools</snippet></ROW><ROW><id>10005265</id><snippet>author='Foo Bar, Spam Eggs',
author_email='foobar@baz.com, spameggs@joe.org',
</snippet></ROW><ROW><id>10005265</id><snippet>author_email</snippet></ROW><ROW><id>10005420</id><snippet>class Student:
    # A student ID counter
    idCounter = 0
    def __init__(self):
        self.gpa = 0
        self.record = {}
        # Each time I create a new student, the idCounter increment
        Student.idCounter += 1
        self.name = 'Student {0}'.format(Student.idCounter)

classRoster = [] # List of students
for number in range(25):
    newStudent = Student()
    classRoster.append(newStudent)
    print(newStudent.name)
</snippet></ROW><ROW><id>10005497</id><snippet>len(s) &lt; 4</snippet></ROW><ROW><id>10005497</id><snippet>len = i32(s)
</snippet></ROW><ROW><id>10005497</id><snippet>s = self.fp.read(8)
</snippet></ROW><ROW><id>10005897</id><snippet>conn,addr =s.accept()

data=conn.recv(100000)  # Read from newly accepted socket

conn.close()
s.close()
</snippet></ROW><ROW><id>10006099</id><snippet>def neighbors(i, W, H, D):
  A = W * H

  plane = i / A
  plane_index = i % A
  row = plane_index / W
  col = plane_index % W

  r = -1 if row % 2 else 1   # (-1)**row
  p = -1 if plane % 2 else 1 # (-1)**plane

  nbors = []

  # first include neighbors in same plane
  if col != W-1: nbors.append(i+1)
  if col != 0:   nbors.append(i-1)
  if row != H-1: nbors.append(i+W)
  if row != 0:   nbors.append(i-W)
  if (col != 0 or r &gt; 0) and (col != W-1 or r &lt; 0):
    if row != H-1: nbors.append(i+W+r)
    if row != 0:   nbors.append(i-W+r)

  # now add neighbors from other planes
  if plane != D-1: nbors.append(i+A)
  if plane != 0:   nbors.append(i-A)

  if (col != 0 or p &lt; 0) and (col != W-1 or p &gt; 0):
    if plane != D-1: nbors.append(i+A-p)
    if plane != 0:   nbors.append(i-A-p)

  if ((col != W - 1 or p &gt; 0 or r &lt; 0) and
      (col != 0 or p &lt; 0 or r &gt; 0) and
      (row != H-1 or p &lt; 0) and
      (row != 0 or p &gt; 0)):
    if plane != D-1:
      nbors.append(i + A + p*W + (r-p)/2) #10
    if plane != 0:
      nbors.append(i - A + p*W + (r-p)/2) #11

  return nbors
</snippet></ROW><ROW><id>10006099</id><snippet>def test_neighbors():
  n = lambda i: set(neighbors(i, 5, 5, 5))

  # test bottom layer
  assert n(0) == set([1,5,6,25,30])
  assert n(2) == set([1,3,7,8,26,27,32])
  assert n(4) == set([3,9,28,29,34])
  assert n(5) == set([0,6,10,30])
  assert n(9) == set([3,4,8,13,14,33,34,38])
  assert n(20) == set([15,16,21,45])
  assert n(21) == set([16,17,20,22,45,46])
  assert n(24) == set([19,23,48,49])

  # test second layer
  assert n(25) == set([0,1,26,30,31,50,51])
  assert n(34) == set([4,9,28,29,33,38,39,54,59])
  assert n(36) == set([7,11,12,31,32,35,37,41,42,57,61,62])
  assert n(49) == set([24,44,48,74])
</snippet></ROW><ROW><id>10006184</id><snippet>msg_str = msg_str % tuple(params)
</snippet></ROW><ROW><id>10006184</id><snippet>&gt;&gt;&gt; lst = [123, 456]
&gt;&gt;&gt; 'foo %d bar %d' % tuple(lst)
'foo 123 bar 456'
</snippet></ROW><ROW><id>10006184</id><snippet>&gt;&gt;&gt; 'foo %d bar %d' % lst
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: %d format: a number is required, not list
</snippet></ROW><ROW><id>10006379</id><snippet>class A1(object):
    pass

class A1Child(A1):
    pass

class A2(object):
    pass

class A2Child(A2):
    pass


class B(object):

    a1_instance = None
    a2_instance = None

    def __init__(self):
        self.a1_instance = A1()
        self.a2_instance = A2()

class BChild(B):

    def __init__(self):
        self.a1_instance = A1Child()
        self.a2_instance = A2Child()


b_instance = B()

print b_instance.a1_instance
print b_instance.a2_instance


bchild_instance = BChild()

print bchild_instance.a1_instance
print bchild_instance.a2_instance
</snippet></ROW><ROW><id>10006385</id><snippet>def classname(self):
    # can't access attributes that start with _  in a template
    return self.__class__.__name__
</snippet></ROW><ROW><id>10006385</id><snippet>{% if np.classname == 'Restaurent' %}
{% endif %}

{% if np.classname == 'Bar' %}
{% endif %}

etc, etc...
</snippet></ROW><ROW><id>10006432</id><snippet>lambda</snippet></ROW><ROW><id>10006432</id><snippet>identifier</snippet></ROW><ROW><id>10006432</id><snippet>lambda</snippet></ROW><ROW><id>10006432</id><snippet>+</snippet></ROW><ROW><id>10006432</id><snippet>add</snippet></ROW><ROW><id>10006432</id><snippet>lambda</snippet></ROW><ROW><id>10006432</id><snippet>lambda x: x+1</snippet></ROW><ROW><id>10006432</id><snippet>x</snippet></ROW><ROW><id>10006432</id><snippet>x+1</snippet></ROW><ROW><id>10006432</id><snippet>x</snippet></ROW><ROW><id>10006432</id><snippet>x+1</snippet></ROW><ROW><id>10006432</id><snippet>+       -       *       **      /       //      %
&lt;&lt;      &gt;&gt;      &amp;       |       ^       ~
&lt;       &gt;       &lt;=      &gt;=      ==      !=
</snippet></ROW><ROW><id>10006432</id><snippet>not</snippet></ROW><ROW><id>10006432</id><snippet>is</snippet></ROW><ROW><id>10006432</id><snippet>in</snippet></ROW><ROW><id>10006432</id><snippet>lambda</snippet></ROW><ROW><id>10006432</id><snippet>lambda</snippet></ROW><ROW><id>10006432</id><snippet>lambda</snippet></ROW><ROW><id>10006432</id><snippet>lambda</snippet></ROW><ROW><id>10006432</id><snippet>lambda x: x + 1</snippet></ROW><ROW><id>10006432</id><snippet>(lambda x: x) + 1</snippet></ROW><ROW><id>10006432</id><snippet>lambda x: (x + 1)</snippet></ROW><ROW><id>10006473</id><snippet>db.autocommit(True)
</snippet></ROW><ROW><id>10006473</id><snippet>db.commit()</snippet></ROW><ROW><id>10006745</id><snippet>topics = Topic.objects.filter(article__authors=author).distinct()
</snippet></ROW><ROW><id>10006820</id><snippet>Random</snippet></ROW><ROW><id>10006820</id><snippet>WichmannHill</snippet></ROW><ROW><id>10006820</id><snippet>WichmannHill</snippet></ROW><ROW><id>10006820</id><snippet>random.py</snippet></ROW><ROW><id>10006820</id><snippet>Random</snippet></ROW><ROW><id>10006917</id><snippet>#/usr/lib/python3.2/logging/__init__.py
...
root = RootLogger(WARNING)
Logger.root = root
Logger.manager = Manager(Logger.root)
...

# and 
def basicConfig(**kwargs):
    ...
        hdlr = StreamHandler(stream)
        fs = kwargs.get("format", BASIC_FORMAT)
        dfs = kwargs.get("datefmt", None)
        style = kwargs.get("style", '%')
        fmt = Formatter(fs, dfs, style)
        hdlr.setFormatter(fmt)
        root.addHandler(hdlr)
</snippet></ROW><ROW><id>10006917</id><snippet>basicconfig()</snippet></ROW><ROW><id>10006917</id><snippet>root</snippet></ROW><ROW><id>10006917</id><snippet>getLogger</snippet></ROW><ROW><id>10006917</id><snippet>def getLogger(name=None):
    """
    Return a logger with the specified name, creating it if necessary.

    If no name is specified, return the root logger.
    """
    if name:
        return Logger.manager.getLogger(name)
    else:
        return root
</snippet></ROW><ROW><id>10006983</id><snippet>def __init__(self, value):
        self.key1 = value
        arr={}
        #append value to arr
        arr.update({'key2':'value2'})
        arr.update({'key':'value'})
        self.key2 = arr
</snippet></ROW><ROW><id>10006983</id><snippet>jsonpickle.encode(obj, unpicklable=False)</snippet></ROW><ROW><id>10006999</id><snippet>import string, unicodedata
allowed = string.letters + string.digits
def fold(s):
  s = unicodedata.normalize("NFKD", unicode(s).lower()).encode("ascii", "ignore")
  s = "".join(c for c in s if c in allowed)
  return s

for example in ['abc LLC','xyz, LLC', 'abc , LLC','xyz LLC']:
  print "%r -&gt; %r" % (example, fold(example))
</snippet></ROW><ROW><id>10006999</id><snippet>'abc LLC' -&gt; 'abcllc'
'xyz, LLC' -&gt; 'xyzllc'
'abc , LLC' -&gt; 'abcllc'
'xyz LLC' -&gt; 'xyzllc'
</snippet></ROW><ROW><id>10007443</id><snippet>#include &lt;string.h&gt;

struct s
{
    int x;
    char buffer[100];
};

__declspec(dllexport) void func(struct s* a)
{
    a-&gt;x = 5;
    strcpy(a-&gt;buffer,"here is the contents of the string.");
}
</snippet></ROW><ROW><id>10007443</id><snippet>import ctypes

class myS(ctypes.Structure):
    _fields_ = [
        ("x", ctypes.c_int),
        ("buffer",ctypes.c_char * 100)]

s1 = myS()
dll = ctypes.CDLL('test')
dll.func(ctypes.byref(s1))
print s1.buffer
print s1.x
</snippet></ROW><ROW><id>10007443</id><snippet>here is the contents of the string.
5
</snippet></ROW><ROW><id>10008413</id><snippet>127.0.0.1</snippet></ROW><ROW><id>10008413</id><snippet>127.0.0.1</snippet></ROW><ROW><id>10008413</id><snippet>127.0.0.1</snippet></ROW><ROW><id>10008413</id><snippet>localhost</snippet></ROW><ROW><id>10008413</id><snippet>VAC01.VACLab.com</snippet></ROW><ROW><id>10008594</id><snippet>AddTaskHandler</snippet></ROW><ROW><id>10008604</id><snippet>RegistrationForm</snippet></ROW><ROW><id>10008604</id><snippet>from registration.forms import RegistrationForm
</snippet></ROW><ROW><id>10009298</id><snippet>Refresh()</snippet></ROW><ROW><id>10009298</id><snippet>wx.lib.delayedresult</snippet></ROW><ROW><id>10009298</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>10009315</id><snippet>fileinput</snippet></ROW><ROW><id>10009315</id><snippet>import fileinput
import re
files = ["FileToSub1.sbs", "FileToSub2.sbs"]
for line in fileinput.FileInput(files, inplace=1):
    line = re.sub('whatever', 'thing', line)
    print line,
</snippet></ROW><ROW><id>10009315</id><snippet>unlink("FileToSub2.sbs.bak")            = -1 ENOENT (No such file or directory)
rename("FileToSub2.sbs", "FileToSub2.sbs.bak") = 0
open("FileToSub2.sbs.bak", O_RDONLY)    = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=30, ...}) = 0
fstat(3, {st_mode=S_IFREG|0644, st_size=30, ...}) = 0
open("FileToSub2.sbs", O_WRONLY|O_CREAT|O_TRUNC, 0100644) = 4
fcntl(4, F_GETFL)                       = 0x8001 (flags O_WRONLY|O_LARGEFILE)
fstat(4, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fdf3a988000
lseek(4, 0, SEEK_CUR)                   = 0
fstat(4, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
chmod("FileToSub2.sbs", 0100644)        = 0
fstat(3, {st_mode=S_IFREG|0644, st_size=30, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fdf3a987000
read(3, "whatever\nfile\nthing\nline\nwhas\n", 8192) = 30
read(3, "", 4096)                       = 0
read(3, "", 8192)                       = 0
write(4, "thing\nfile\nthing\nline\nwhas\n", 27) = 27
close(4)                                = 0
munmap(0x7fdf3a988000, 4096)            = 0
close(3)                                = 0
munmap(0x7fdf3a987000, 4096)            = 0
unlink("FileToSub2.sbs.bak")            = 0
</snippet></ROW><ROW><id>10009615</id><snippet>self.threads = []
for i in xrange(self.thread_count):
    self.threads.append(DownloadThread(self.queue, self.status, self.save_dir, i))
    self.threads[i].start()
</snippet></ROW><ROW><id>10009790</id><snippet>regex</snippet></ROW><ROW><id>10009790</id><snippet>urlparse</snippet></ROW><ROW><id>10009790</id><snippet>regex</snippet></ROW><ROW><id>10009790</id><snippet>urlparse</snippet></ROW><ROW><id>10009790</id><snippet>regex</snippet></ROW><ROW><id>10009790</id><snippet>&gt;&gt;&gt; x = 'http://www.example.com:8080/abcd/dir/file1.html?query1=value1&amp;query2=value2'
&gt;&gt;&gt; query_pattern='(query\d+)=(\w+)'
&gt;&gt;&gt; # query_pattern='(\w+)=(\w+)'    a more general pattern
&gt;&gt;&gt; re.findall(query_pattern,x)
[('query1', 'value1'), ('query2', 'value2')]
</snippet></ROW><ROW><id>10009946</id><snippet>class WebSite(models.Model):
    ...
    maintenance_page = ForeignKey('app_name.Page')

class Page(models.Model):
    ...
    website = ForeignKey('app_name.WebSite')
</snippet></ROW><ROW><id>10010006</id><snippet>&gt;&gt;&gt; a = u"maçã ".encode("utf-8") + u"maçã ".encode("cp1252")
&gt;&gt;&gt; print a
maçã ma�� 
&gt;&gt;&gt; a.decode("utf-8")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode bytes in position 9-11: invalid data
</snippet></ROW><ROW><id>10010006</id><snippet>import codecs

last_position = -1

def mixed_decoder(unicode_error):
    global last_position
    string = unicode_error[1]
    position = unicode_error.start
    if position &lt;= last_position:
        position = last_position + 1
    last_position = position
    new_char = string[position].decode("cp1252")
    #new_char = u"_"
    return new_char, position + 1

codecs.register_error("mixed", mixed_decoder)
</snippet></ROW><ROW><id>10010006</id><snippet>&gt;&gt;&gt; a = u"maçã ".encode("utf-8") + u"maçã ".encode("cp1252")
&gt;&gt;&gt; last_position = -1
&gt;&gt;&gt; print a.decode("utf-8", "mixed")
maçã maçã 
</snippet></ROW><ROW><id>10010624</id><snippet>g</snippet></ROW><ROW><id>10010624</id><snippet>print "{:g}".format(1.0)
</snippet></ROW><ROW><id>10010624</id><snippet>print "%g" % 1.0
</snippet></ROW><ROW><id>10010624</id><snippet>std::cout</snippet></ROW><ROW><id>10010624</id><snippet>std::cout</snippet></ROW><ROW><id>10011077</id><snippet>figure.add_subplots</snippet></ROW><ROW><id>10011077</id><snippet>subplot(nrows, ncols, plotNum)</snippet></ROW><ROW><id>10011077</id><snippet>fig.add_subplot(111)</snippet></ROW><ROW><id>10011077</id><snippet>fig.add_subplot(212)</snippet></ROW><ROW><id>10011077</id><snippet>fig.add_subplot(211)</snippet></ROW><ROW><id>10011077</id><snippet>fig.add_subplot(212)</snippet></ROW><ROW><id>10011077</id><snippet>add_subplot</snippet></ROW><ROW><id>10011077</id><snippet>sharex=first_axis_instance</snippet></ROW><ROW><id>10011077</id><snippet>import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import matplotlib.dates as mdates


import datetime as dt


n_pts = 10
dates = [dt.datetime.now() + dt.timedelta(days=i) for i in range(n_pts)]

ax1 = plt.subplot(2, 1, 1)
ax1.plot(dates, range(10))

ax2 = plt.subplot(2, 1, 2, sharex=ax1)
ax2.bar(dates, range(10, 20))

# Now format the x axis. This *MUST* be done after all sharex commands are run.

# put no more than 10 ticks on the date axis.  
ax1.xaxis.set_major_locator(mticker.MaxNLocator(10))
# format the date in our own way.
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))

# rotate the labels on both date axes
for label in ax1.xaxis.get_ticklabels():
    label.set_rotation(30)
for label in ax2.xaxis.get_ticklabels():
    label.set_rotation(30)

# tweak the subplot spacing to fit the rotated labels correctly
plt.subplots_adjust(hspace=0.35, bottom=0.125)

plt.show()
</snippet></ROW><ROW><id>10011128</id><snippet>&gt;&gt;&gt; def wrap(f):
...     print 'making arr'
...     arr = []
...     def inner():
...         arr.append(2)
...         print arr
...         f()
...     return inner
...     
&gt;&gt;&gt; @wrap
... def foo():
...     print 'foo was called'
...     
making arr
&gt;&gt;&gt; foo()
[2]
foo was called
&gt;&gt;&gt; foo()
[2, 2]
foo was called
&gt;&gt;&gt; def bar():
...     print 'bar was called'
...     
&gt;&gt;&gt; bar = wrap(bar)
making arr
&gt;&gt;&gt; bar()
[2]
bar was called
</snippet></ROW><ROW><id>10011128</id><snippet>&gt;&gt;&gt; def wrap_with_arg(f):
...     def wrap(*args):
...         print 'called with %d arguments' % len(args)
...         f(args)
...     return wrap
...     
&gt;&gt;&gt; @wrap_with_arg
... def baz(arg):
...     print 'called with argument %r' % arg
...     
&gt;&gt;&gt; baz(3)
called with 1 arguments
called with argument 3
&gt;&gt;&gt; baz(3, 4)
called with 2 arguments
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
  File "&lt;input&gt;", line 4, in wrap
  File "&lt;input&gt;", line 3, in baz
TypeError: not all arguments converted during string formatting
</snippet></ROW><ROW><id>10011589</id><snippet>&gt;&gt;&gt; 8.4
8.4000000000000004
&gt;&gt;&gt; 8.35
8.3499999999999996
</snippet></ROW><ROW><id>10011624</id><snippet>ndb.Model._kind_map['Tasks'](title='...')
</snippet></ROW><ROW><id>10011624</id><snippet>eval('Tasks')(title='...')
</snippet></ROW><ROW><id>10011624</id><snippet>getattr(models, 'Tasks')(title='...')
</snippet></ROW><ROW><id>10011624</id><snippet>models</snippet></ROW><ROW><id>10011760</id><snippet> customers = Customer.all()  
 if customers.count(1):
    # do something
</snippet></ROW><ROW><id>10011773</id><snippet>numpy.float64</snippet></ROW><ROW><id>10011773</id><snippet>float</snippet></ROW><ROW><id>10011773</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.float64(1.0) / 0.0
inf
</snippet></ROW><ROW><id>10011773</id><snippet>numpy.seterr()</snippet></ROW><ROW><id>10011798</id><snippet>python27.dll</snippet></ROW><ROW><id>10011798</id><snippet>C:\Windows\System32</snippet></ROW><ROW><id>10011863</id><snippet>charset='UTF-8'</snippet></ROW><ROW><id>10011863</id><snippet>SELECT DATABASEPROPERTYEX('dbname', 'Collation') SQLCollation</snippet></ROW><ROW><id>10012289</id><snippet># coding: utf-8

word = "öäå"
if u"ö" in word:
    print True
</snippet></ROW><ROW><id>10012289</id><snippet># coding: utf-8

word = "öäå".decode('utf-8')
if u"ö" in word:
    print True
</snippet></ROW><ROW><id>10012452</id><snippet>session.query(Shots).filter_by(event_id=event_id)
</snippet></ROW><ROW><id>10012452</id><snippet>from sqlalchemy.sql.expression import desc, asc
session.query(Shots) \
    .filter_by(event_id=event_id) \
    .order_by(asc(Shots.user_id))
</snippet></ROW><ROW><id>10012452</id><snippet>from sqlalchemy.sql.expression import desc, asc
session.query(Shots) \
    .filter_by(event_id=event_id) \
    .join(User) \
    .order_by(asc(User.name))
</snippet></ROW><ROW><id>10012452</id><snippet>session.query(Shots) \
    .filter_by(event_id=event_id) \
    .count()
</snippet></ROW><ROW><id>10012499</id><snippet>time.sleep(5)</snippet></ROW><ROW><id>10012499</id><snippet>self.turnLeft()</snippet></ROW><ROW><id>10012499</id><snippet>redBall</snippet></ROW><ROW><id>10012557</id><snippet>def decorator(func):
    @functools.wraps(func)
    def _check_something(*args, **kwargs):
        # some logic in here
        return func(*args, **kwargs)
    _check_something.__wrapped__ = func   # &lt;== add this
    return _check_something
</snippet></ROW><ROW><id>10012557</id><snippet>assert getattr(MyClass.my_method, "__wrapped__").__name__ == 'my_method'
</snippet></ROW><ROW><id>10012574</id><snippet>random.getrandbits()</snippet></ROW><ROW><id>10012574</id><snippet>&gt;&gt;&gt; random.getrandbits(128)
117840599152074712851059573280939417739L
</snippet></ROW><ROW><id>10012574</id><snippet>random.randrange()</snippet></ROW><ROW><id>10012574</id><snippet>random.getrandbits()</snippet></ROW><ROW><id>10012710</id><snippet>readline</snippet></ROW><ROW><id>10012710</id><snippet>readline</snippet></ROW><ROW><id>10012710</id><snippet>readline</snippet></ROW><ROW><id>10012710</id><snippet>iter(f.readline, '')</snippet></ROW><ROW><id>10012819</id><snippet>max(l_one + l_two)
</snippet></ROW><ROW><id>10012819</id><snippet>min(l_one + l_two)
</snippet></ROW><ROW><id>10012819</id><snippet>l_one + l_two</snippet></ROW><ROW><id>10012819</id><snippet>max(max(l_one), max(l_two))
min(min(l_one), min(l_two))
</snippet></ROW><ROW><id>10012905</id><snippet>required=True</snippet></ROW><ROW><id>10012905</id><snippet>Question</snippet></ROW><ROW><id>10012905</id><snippet>required=True</snippet></ROW><ROW><id>10013002</id><snippet>parallel(1)</snippet></ROW><ROW><id>10013002</id><snippet>process</snippet></ROW><ROW><id>10013002</id><snippet>directories</snippet></ROW><ROW><id>10013002</id><snippet>import multiprocessing
pool = multiprocessing.Pool(multiprocessing.cpu_count())
success = all(pool.imap_unordered(process, directories))
</snippet></ROW><ROW><id>10013133</id><snippet>Gtk.TreeSortable.set_sort_func()</snippet></ROW><ROW><id>10013133</id><snippet>listStore = gtk.ListStore(str, str, str, str, str, str, str, str)
listStore.set_sort_func(0, date_compare, None)
treeview = gtk.TreeView()
treeview.set_model(listStore)

cell = gtk.CellRendererText()
column = gtk.TreeViewColumn('Date', cell, text=0)
column.set_sort_column_id(0)
treeview.append_column(column)
...
</snippet></ROW><ROW><id>10013133</id><snippet>date_compare</snippet></ROW><ROW><id>10013133</id><snippet>date_compare</snippet></ROW><ROW><id>10013133</id><snippet>def date_compare(model, row1, row2, user_data):
    # Returns : 
    # - a negative integer if iter1 sorts before iter2,
    # - zero if they are equal,
    # - a positive integer if iter2 sorts before iter1.

    sort_column, _ = model.get_sort_column_id()
    date1 = model.get_value(row1, sort_column)
    date2 = model.get_value(row2, sort_column)

    # We split the date string to an array : 
    #  0  |   1   |   2  |    3    |    4
    # day | month | hour | minutes | seconds
    values1 = re.split("[ /:]", date1)
    values2 = re.split("[ /:]", date2)

    if values1[1] &lt; values2[1] :
        return -1
    elif values1[1] == values2[1] : # same month =&gt; we compare by day
        if values1[0] &lt; values2[0] :
            return -1
        elif values1[0] == values2[0] : # same month and day =&gt; we compare by hour
            if values1[2] &lt; values2[2] :
                return -1
            elif values1[2] == values2[2] : # same month, day and hour =&gt; we compare by minute
                if values1[3] &lt; values2[3] :
                    return -1
                elif values1[3] == values2[3] : # same month, day, hour and minute =&gt; we compare by second
                    if values1[4] &lt; values2[4] :
                        return -1
                    elif values1[4] == values2[4] : # same month, day, hour, minute and second =&gt; it's same date !
                        return 0
                    else :
                        return 1
                else :
                    return 1
            else :
                return 1
        else :
            return 1
    else :
        return 1
</snippet></ROW><ROW><id>10013356</id><snippet>re.escape</snippet></ROW><ROW><id>10013356</id><snippet>&gt;&gt;&gt; p = 'foo+*bar'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.escape(p)
'foo\\+\\*bar'
</snippet></ROW><ROW><id>10013356</id><snippet>p</snippet></ROW><ROW><id>10013356</id><snippet>&gt;&gt;&gt; p in 'blablafoo+*bar123'
True
&gt;&gt;&gt; 'foo+*bar foo+*bar'.count(p)
2
</snippet></ROW><ROW><id>10013356</id><snippet>p</snippet></ROW><ROW><id>10013356</id><snippet>&gt;&gt;&gt; re.match(r'\d.*{}.*\d'.format(re.escape(p)), '1 foo+*bar 2')
&lt;_sre.SRE_Match object at 0x7f11e83a31d0&gt;
</snippet></ROW><ROW><id>10013444</id><snippet>b</snippet></ROW><ROW><id>10013444</id><snippet>func</snippet></ROW><ROW><id>10013444</id><snippet>def deco(f):
    print 'b'
    def g():
        print 'c'
    return g

@deco
def func():
    print 'a'
</snippet></ROW><ROW><id>10013444</id><snippet>dispatch</snippet></ROW><ROW><id>10013444</id><snippet>get</snippet></ROW><ROW><id>10013444</id><snippet>@method_decorator(fields_required('SHOULD_NEVER_SEE','THIS_STUFF'))
def dispatch(self, *args, **kwargs):
    pass
</snippet></ROW><ROW><id>10014020</id><snippet>[]</snippet></ROW><ROW><id>10014020</id><snippet>self</snippet></ROW><ROW><id>10014020</id><snippet>dict</snippet></ROW><ROW><id>10014020</id><snippet>__init__</snippet></ROW><ROW><id>10014020</id><snippet>++</snippet></ROW><ROW><id>10014020</id><snippet>+= 1</snippet></ROW><ROW><id>10014020</id><snippet>defaultdict</snippet></ROW><ROW><id>10014020</id><snippet>from collections import defaultdict

class MyHTMLParser(HTMLParser):
    def __init__(self, *args, **kwargs):
        HTMLParser.__init__(self, *args, **kwargs)
        self.tag_count = defaultdict(int)

    def handle_starttag(self, tag, attrs):
        self.tag_count[tag] += 1
</snippet></ROW><ROW><id>10014184</id><snippet>'This is a ' + type(somevariable).__name__
</snippet></ROW><ROW><id>10014325</id><snippet>from lxml import etree
from lxml.builder import E as buildE

class DummyCursor(object):
  def __init__(self,fields,rows=5):
    self.description = [[f] for f in fields]
    self.data = [ ["%s%02d" % (f,i) for f in fields] for i in range(rows) ]
  def fetchall(self):
    return self.data

def E(tag,parent=None,content=None):
  """Simple E helper"""
  element = buildE(tag)
  if content is not None:
    element.text = unicode(content)
  if parent is not None:
    parent.append(element)
  return element

def fetchXML(cursor):
  fields = [x[0] for x in cursor.description ]
  doc = E('data')
  for record in cursor.fetchall():
    r = E('row',parent=doc)
    for (k,v) in zip(fields,record):
      E(k,content=v,parent=r)
  return doc

doc = fetchXML(DummyCursor(['name','description']))

print etree.tostring(doc,pretty_print=True)
</snippet></ROW><ROW><id>10014325</id><snippet>&lt;data&gt;
  &lt;row&gt;
    &lt;name&gt;name00&lt;/name&gt;
    &lt;description&gt;description00&lt;/description&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;name&gt;name01&lt;/name&gt;
    &lt;description&gt;description01&lt;/description&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;name&gt;name02&lt;/name&gt;
    &lt;description&gt;description02&lt;/description&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;name&gt;name03&lt;/name&gt;
    &lt;description&gt;description03&lt;/description&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;name&gt;name04&lt;/name&gt;
    &lt;description&gt;description04&lt;/description&gt;
  &lt;/row&gt;
&lt;/data&gt;
</snippet></ROW><ROW><id>10014553</id><snippet>collections.Counter()</snippet></ROW><ROW><id>10014553</id><snippet>with open("input.txt") as f:
    counts = collections.Counter(f.read().split())
</snippet></ROW><ROW><id>10014553</id><snippet>re.findall("\w+", f.read())</snippet></ROW><ROW><id>10014711</id><snippet>move</snippet></ROW><ROW><id>10014711</id><snippet>def move(self, x, y):
    self.shipRect.center[0] += x
    self.shipRect.center[1] += y
</snippet></ROW><ROW><id>10014993</id><snippet># previous code
c.add(p2)
f3 = c.search(text="post")
print(f3)
</snippet></ROW><ROW><id>10014993</id><snippet># previous code
c.add(p2)
f1 = c.search(user="ana@fc.up.pt")
print(f1)
f2 = c.search(likes=1)
print(f2)
f3 = c.search(text='post')
print(f3)
</snippet></ROW><ROW><id>10014993</id><snippet>actual = self.topo
</snippet></ROW><ROW><id>10014993</id><snippet>actual.seg = "somevalue" # sorry, i can't remember what you did"
actual = self.topo
</snippet></ROW><ROW><id>10014993</id><snippet>actual.seg = "somevalue"
</snippet></ROW><ROW><id>10014993</id><snippet>self.topo.seg = "somevalue"
</snippet></ROW><ROW><id>10014993</id><snippet>actual</snippet></ROW><ROW><id>10014993</id><snippet>actual</snippet></ROW><ROW><id>10014993</id><snippet>c.search</snippet></ROW><ROW><id>10014993</id><snippet>&gt;&gt;&gt; a_list = ['one','two','three']
&gt;&gt;&gt; b_list = a_list
&gt;&gt;&gt; b_list.pop()
'three'
&gt;&gt;&gt; a_list
['one', 'two']
</snippet></ROW><ROW><id>10014993</id><snippet>b_list = a_list</snippet></ROW><ROW><id>10015086</id><snippet>from pyPdf import PdfFileReader, PageObject

pdf_toread = PdfFileReader(path_to_your_pdf)

# 1 is the number of the page
page_one = pdf_toread.getPage(1)

# This will dump the content (unicode string)
# According to the doc, the formatting is dependent on the
# structure of the document
print page_one.extractText()
</snippet></ROW><ROW><id>10015086</id><snippet>import subprocess
import os

path_to_pdf = os.path.abspath('C:\test_file.pdf')
# I am testing this on my Windows Install machine
path_to_acrobat = os.path.abspath('C:\Program Files (x86)\Adobe\Reader 10.0\Reader\AcroRd32.exe') 

# this will open your document on page 12
process = subprocess.Popen([path_to_acrobat, '/A', 'page=12', path_to_pdf], shell=False, stdout=subprocess.PIPE)
process.wait()
</snippet></ROW><ROW><id>10015086</id><snippet>search=wordList</snippet></ROW><ROW><id>10015086</id><snippet>wordlist</snippet></ROW><ROW><id>10015086</id><snippet>wordlist</snippet></ROW><ROW><id>10015876</id><snippet>def get_feed(thing=None, feed_type=api.GetYouTubeUserFeed):

    if feed_type == 'user':
        feed = api.GetYouTubeUserFeed(username=thing)

    if feed_type == 'related':
        feed = api.GetYouTubeRelatedFeed(video_id=thing)

    if feed_type == 'comments':
        feed = api.GetYouTubeVideoCommentFeed(video_id=thing)

    feeds = []
    entries = []

    while feed:
        feeds.append(feed)
        feed = api.GetNext(feed)

    [entries.extend(f.entry) for f in feeds]

    return entries
</snippet></ROW><ROW><id>10015876</id><snippet>def myget(url,service=None):

    def myconverter(x):
        logfile = url.replace('/',':')+'.log'
        logfile = logfile[len('http://gdata.youtube.com/feeds/api/'):]
        my_logger.info("myget: %s" % url)

        if service == 'user_feed':
            return gdata.youtube.YouTubeUserFeedFromString(x)

        if service == 'comment_feed':
            return gdata.youtube.YouTubeVideoCommentFeedFromString(x)

        if service == 'comment_entry':
            return gdata.youtube.YouTubeVideoCommentEntryFromString(x)

        if service == 'video_feed':
            return gdata.youtube.YouTubeVideoFeedFromString(x)

        if service == 'video_entry':
            return gdata.youtube.YouTubeVideoEntryFromString(x)


    return api.GetWithRetries(url,
            converter=myconverter,
            num_retries=3,
            delay=2,
            backoff=5,
            logger=my_logger
            )


mapper={}
mapper[api.GetYouTubeUserFeed]='user_feed'
mapper[api.GetYouTubeVideoFeed]='video_feed'
mapper[api.GetYouTubeVideoCommentFeed]='comment_feed'
</snippet></ROW><ROW><id>10015884</id><snippet>...
champion_phone_number = int(cgi.escape(self.request.get('champ_phone_number'))),
...
</snippet></ROW><ROW><id>10015956</id><snippet>with</snippet></ROW><ROW><id>10015956</id><snippet>from __future__ import with_statement
</snippet></ROW><ROW><id>10015956</id><snippet>from __future__</snippet></ROW><ROW><id>10016210</id><snippet>required=False
</snippet></ROW><ROW><id>10016379</id><snippet>&gt;&gt;&gt; arr = numpy.array(((2,2),(2,-2)))
&gt;&gt;&gt; tuple(map(tuple, arr))
((2, 2), (2, -2))
</snippet></ROW><ROW><id>10016726</id><snippet>f4 = open("genomekey2.txt", 'rb')
keygenomes = []
for keyline in f4.readlines():
    if keyline:
        keygenomes.append(eval(keyline.strip()))
</snippet></ROW><ROW><id>10016726</id><snippet>['Synechococcus sp. JA-2-3B'a(2-13)']
</snippet></ROW><ROW><id>10016726</id><snippet>["Synechococcus sp. JA-2-3B'a(2-13)"]
</snippet></ROW><ROW><id>10017017</id><snippet>d = [23,67,110,25,69,24,102,109]

d.sort()

diff = [y - x for x, y in zip(*[iter(d)] * 2)]
avg = sum(diff) / len(diff)

m = [[d[0]]]

for x in d[1:]:
    if x - m[-1][0] &lt; avg:
        m[-1].append(x)
    else:
        m.append([x])


print m
## [[23, 24, 25], [67, 69], [102, 109, 110]]
</snippet></ROW><ROW><id>10017055</id><snippet>os.path.isfile(file)
</snippet></ROW><ROW><id>10017055</id><snippet>os.path.join(os.getcwd(), file)
</snippet></ROW><ROW><id>10017169</id><snippet> a = re.sub('[.!,;]', '', a)
</snippet></ROW><ROW><id>10017169</id><snippet>import re

a = 'a..!b...c???d;;'
chars = [',', '!', '.', ';', '?']

print re.sub('[%s]' % ''.join(chars), '', a)
</snippet></ROW><ROW><id>10017169</id><snippet>s = 'A.B!C?'
print s.translate(None, ''.join(chars))
</snippet></ROW><ROW><id>10017169</id><snippet>s = u'A.B!C?'
print s.translate(dict((ord(c), u'') for c in chars))
</snippet></ROW><ROW><id>10018734</id><snippet>difflib.get_close_matches</snippet></ROW><ROW><id>10018734</id><snippet>&gt;&gt;&gt; words = ['hello', 'Hallo', 'hi', 'house', 'key', 'screen', 'hallo', 'question', 'format']
&gt;&gt;&gt; difflib.get_close_matches('Hello', words)
['hello', 'Hallo', 'hallo']
</snippet></ROW><ROW><id>10018792</id><snippet>__mro__</snippet></ROW><ROW><id>10018792</id><snippet>FooMixin</snippet></ROW><ROW><id>10018792</id><snippet>class UltimateBase(object):
    def dispatch(self, *args, **kwargs):
        print 'base dispatch'

class FooMixin(object):
    def dispatch(self, *args, **kwargs):
        print 'perform check A'
        return super(FooMixin, self).dispatch(*args, **kwargs)

class BarMixin(object):
    def dispatch(self, *args, **kwargs):
        print 'perform check B'
        return super(BarMixin, self).dispatch(*args, **kwargs)

class FooBar(FooMixin, BarMixin, UltimateBase):
    pass

FooBar().dispatch()
</snippet></ROW><ROW><id>10018792</id><snippet>View</snippet></ROW><ROW><id>10018818</id><snippet> db.houses.find({"hid":{"$regex": u"9"}})
</snippet></ROW><ROW><id>10018956</id><snippet>import codecs
file = codecs.open("out.txt", "w", "utf-8")
file.write(something)
</snippet></ROW><ROW><id>10018958</id><snippet>for row in rows:
    if n % 25:
        row.STATUS = "Minor"
    else:
        row.STATUS = "Major"
</snippet></ROW><ROW><id>10018958</id><snippet>for row in rows:
    row.STATUS = "Minor" if n % 25 else "Major"
</snippet></ROW><ROW><id>10018958</id><snippet>n % 25</snippet></ROW><ROW><id>10018958</id><snippet>n</snippet></ROW><ROW><id>10018958</id><snippet>25</snippet></ROW><ROW><id>10018958</id><snippet>0</snippet></ROW><ROW><id>10018958</id><snippet>False</snippet></ROW><ROW><id>10018958</id><snippet>0</snippet></ROW><ROW><id>10018958</id><snippet>if</snippet></ROW><ROW><id>10018958</id><snippet>0</snippet></ROW><ROW><id>10019146</id><snippet>function x() {
   var i;
   // logic to set i. use assertion to test the logic.
   assert(i &gt; 0);
   reusedFunc(i);
}
</snippet></ROW><ROW><id>10019292</id><snippet>numpy.lib.format</snippet></ROW><ROW><id>10019292</id><snippet>numpy.lib.format</snippet></ROW><ROW><id>10019292</id><snippet>setup.py</snippet></ROW><ROW><id>10019292</id><snippet>options = {"build_exe": {"packages": ["numpy.lib.format"]}},
</snippet></ROW><ROW><id>10019455</id><snippet>f2py --fcompiler=gnu95 -c -m geneec3 geneec3.f90
</snippet></ROW><ROW><id>10019455</id><snippet>&gt;&gt;&gt; import geneec3
&gt;&gt;&gt; geneec3.geneec3(1,1,1,1) 
&gt;&gt;&gt; array([ 1.    ,  0.0116,  1.    ], dtype=float32)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10019455</id><snippet>      subroutine GENEEC3 (APPRAT,APPNUM,APSPAC,KOC, results)

      implicit none
      REAL, dimension(3), intent(out) ::  results
      real, intent(in) :: apprat, appnum, apspac, koc
      real apptot, tdegf, kd


C    
      APPTOT=APPRAT*APPNUM
      TDEGF = APPNUM * APSPAC
      KD = 0.0116 * KOC
C
      results(1)=APPTOT
      results(2)=KD
      results(3)=TDEGF
      END subroutine GENEEC3
</snippet></ROW><ROW><id>10019503</id><snippet>class FancyView(object):
    def __init__(self, array, index):
        self._array = array
        self._index = index.copy()
    def __array__(self):
        return self._array[self._index]
    def __getitem__(self, index):
        return self._array[self._index[index]]

b = FancyView(a, p)
</snippet></ROW><ROW><id>10019503</id><snippet>a[p]</snippet></ROW><ROW><id>10019503</id><snippet>b</snippet></ROW><ROW><id>10019503</id><snippet>b</snippet></ROW><ROW><id>10019536</id><snippet>xyz</snippet></ROW><ROW><id>10019536</id><snippet>project_dir.app_name</snippet></ROW><ROW><id>10019605</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>10019755</id><snippet>page = source.read()</snippet></ROW><ROW><id>10019755</id><snippet>page = source.readlines()</snippet></ROW><ROW><id>10019755</id><snippet>source.read()</snippet></ROW><ROW><id>10019755</id><snippet>for line in page</snippet></ROW><ROW><id>10019755</id><snippet>line</snippet></ROW><ROW><id>10019755</id><snippet>page</snippet></ROW><ROW><id>10019755</id><snippet>source.readlines()</snippet></ROW><ROW><id>10019929</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; f = open('my_classifier.pickle', 'wb')
&gt;&gt;&gt; pickle.dump(classifier, f)
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>10019929</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; f= open('my_classifier.pickle')
&gt;&gt;&gt; classifier = pickle.load(f)
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>10020019</id><snippet>class EscapingJSONEncoder(json.JSONEncoder):
    def encode(self, obj):
        if isinstance(obj, basestring):
            obj = jinja2.Markup(obj).unescape()
        return json.JSONEncoder.encode(self, obj)
</snippet></ROW><ROW><id>10020033</id><snippet>from bs4 import BeautifulSoup as bs
import re

markup = '''&lt;span id="dataView01"&gt;001.00 SPL&lt;/span&gt;
    &lt;span id="dataView02"&gt;543.00 SPL&lt;/span&gt;
    &lt;span id="dataView03"&gt;056.00 SPL&lt;/span&gt;
    &lt;span id="dataView04"&gt;228.00 SPL&lt;/span&gt;'''

soup = bs(markup)
tags = soup.find_all('span', id=re.compile(r'[dataView]\d+'))
for t in tags:  
    print(t.text)
</snippet></ROW><ROW><id>10020033</id><snippet>import csv

with open('output.txt','wb') as fou:
    csv_writer = csv.writer(fou)
    for tag in tags:
        split_on_whitespace = t.text.split()
        csv_writer.writerow(split_on_whitespace)
</snippet></ROW><ROW><id>10020341</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'mysql',
        'NAME': 'test',
        'DATABASE_USER': 'root',
        'DATABASE_PASSWORD': 'pass',
    }
}
</snippet></ROW><ROW><id>10020341</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test',
        'USER': 'root',
        'PASSWORD': 'pass',
    }
}
</snippet></ROW><ROW><id>10020372</id><snippet>form=cgi.FieldStorage
</snippet></ROW><ROW><id>10020372</id><snippet>FieldStorage</snippet></ROW><ROW><id>10020372</id><snippet>FieldStorage</snippet></ROW><ROW><id>10020372</id><snippet>form=cgi.FieldStorage()
</snippet></ROW><ROW><id>10020372</id><snippet>form["f_name"]</snippet></ROW><ROW><id>10020372</id><snippet>FieldStorage</snippet></ROW><ROW><id>10020372</id><snippet>FieldStorage</snippet></ROW><ROW><id>10020404</id><snippet>import sys

if sys.platform == "win32":
   import os, msvcrt
   msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
</snippet></ROW><ROW><id>10020404</id><snippet>import sys
from contextlib import contextmanager

@contextmanager
def binary_mode(f):
   if sys.platform != "win32":
      yield; return

   import msvcrt, os
   def setmode(mode):
      f.flush()
      msvcrt.setmode(f.fileno(), mode)

   setmode(os.O_BINARY)
   try:
      yield
   finally:
      setmode(os.O_TEXT)

with binary_mode(sys.stdout), binary_mode(sys.stderr):
   # code
</snippet></ROW><ROW><id>10020441</id><snippet>column1.extend(row[0])</snippet></ROW><ROW><id>10020441</id><snippet>column1.append(row[0])</snippet></ROW><ROW><id>10020441</id><snippet>&gt;&gt;&gt; lst = []
&gt;&gt;&gt; lst.extend("foo")
&gt;&gt;&gt; lst
['f', 'o', 'o']
&gt;&gt;&gt; lst.append("foo")
&gt;&gt;&gt; lst
['f', 'o', 'o', 'foo']
</snippet></ROW><ROW><id>10020490</id><snippet>textfromfile = '102'
defaultobject = 101
value = (type(defaultobject))(textfromfile)
</snippet></ROW><ROW><id>10020490</id><snippet>value</snippet></ROW><ROW><id>10020781</id><snippet>fooPack1_xpl</snippet></ROW><ROW><id>10020781</id><snippet>_name11</snippet></ROW><ROW><id>10020781</id><snippet>re.compile(r'fooPack1_xpl\d+_name11')
</snippet></ROW><ROW><id>10020781</id><snippet>\d+</snippet></ROW><ROW><id>10021242</id><snippet>root.mainloop()</snippet></ROW><ROW><id>10021242</id><snippet>d=MyDialog()</snippet></ROW><ROW><id>10021242</id><snippet>root.wait_window(d.top)</snippet></ROW><ROW><id>10021242</id><snippet>from Tkinter import *
import sys

class popupWindow(object):
    def __init__(self,master):
        top=self.top=Toplevel(master)
        self.l=Label(top,text="Hello World")
        self.l.pack()
        self.e=Entry(top)
        self.e.pack()
        self.b=Button(top,text='Ok',command=self.cleanup)
        self.b.pack()
    def cleanup(self):
        self.value=self.e.get()
        self.top.destroy()

class mainWindow(object):
    def __init__(self,master):
        self.master=master
        self.b=Button(master,text="click me!",command=self.popup)
        self.b.pack()
        self.b2=Button(master,text="print value",command=lambda: sys.stdout.write(self.entryValue()+'\n'))
        self.b2.pack()

    def popup(self):
        self.w=popupWindow(self.master)
        self.master.wait_window(self.w.top)

    def entryValue(self):
        return self.w.value


if __name__ == "__main__":
    root=Tk()
    m=mainWindow(root)
    root.mainloop()
</snippet></ROW><ROW><id>10021330</id><snippet>pip</snippet></ROW><ROW><id>10021330</id><snippet>easy_install</snippet></ROW><ROW><id>10021367</id><snippet>print df.ix[d1:d2].swaplevel(0,1).ix[['AAPL', 'MSFT']]
                 f1  f2  c1
sym  date                  
AAPL 2012-01-01   5   2   3
MSFT 2012-01-01   4   2   3
AAPL 2012-01-02   8   2   3
MSFT 2012-01-02   7   2   3

import pandas; pandas.__version__
'0.7.2'
</snippet></ROW><ROW><id>10021444</id><snippet>pygame.mixer.music.get_busy()</snippet></ROW><ROW><id>10021444</id><snippet>play(0)</snippet></ROW><ROW><id>10021444</id><snippet>play(0)</snippet></ROW><ROW><id>10021444</id><snippet>print Done</snippet></ROW><ROW><id>10021444</id><snippet>pygame.mixer.music.set_endevent(pygame.USEREVENT)
finishedPlaying = False

while not finishedPlaying:
    for event in pygame.event.get():
        if event.type == pygame.USEREVENT: 
            finishedPlaying = True
            break # only because we don't care about any other events
    print "Playing", pygame.mixer.music.get_pos() # will print -1 on the last iteration
</snippet></ROW><ROW><id>10021554</id><snippet>__doc__</snippet></ROW><ROW><id>10021554</id><snippet>sys</snippet></ROW><ROW><id>10021554</id><snippet>path</snippet></ROW><ROW><id>10021856</id><snippet>&gt;&gt;&gt; dict = {}
&gt;&gt;&gt; dict["apple"] = "red"
&gt;&gt;&gt; dict["banana"] = "yellow"
&gt;&gt;&gt; dict
{'apple': 'red', 'banana': 'yellow'}
</snippet></ROW><ROW><id>10021856</id><snippet>for word in line:
</snippet></ROW><ROW><id>10021856</id><snippet>line</snippet></ROW><ROW><id>10021856</id><snippet>line</snippet></ROW><ROW><id>10021856</id><snippet>line</snippet></ROW><ROW><id>10021856</id><snippet>myDict[word] = linenum

if word in myDict:
    myDict.sort()
else:
    myDict.append(word)
</snippet></ROW><ROW><id>10021953</id><snippet>random</snippet></ROW><ROW><id>10021953</id><snippet>def child(n, a):
    g_mutex = threading.Lock()
    g_mutex.acquire()
    random.seed(n)
    for i in xrange(100):
        a.append(random.randint(0, 1000))
    g_mutex.release()
</snippet></ROW><ROW><id>10021953</id><snippet>g_mutex</snippet></ROW><ROW><id>10021958</id><snippet>read</snippet></ROW><ROW><id>10021958</id><snippet>EAGAIN</snippet></ROW><ROW><id>10021958</id><snippet>import errno

def safe_read(fd, size=1024):
   ''' reads data from a pipe and returns `None` on EAGAIN '''
   try:
      return os.read(fd, size)
   except OSError, exc:
      if exc.errno == errno.EAGAIN:
         return None
      raise
</snippet></ROW><ROW><id>10022023</id><snippet>import nonedict
foo = nonedict.NoneDict()
</snippet></ROW><ROW><id>10022023</id><snippet>from nonedict import NoneDict
foo = NoneDict()
</snippet></ROW><ROW><id>10022023</id><snippet>from nonedict import NoneDict as nd
foo = nd()
</snippet></ROW><ROW><id>10022221</id><snippet>python helloworld.pyc
</snippet></ROW><ROW><id>10022244</id><snippet>build_filters</snippet></ROW><ROW><id>10022244</id><snippet>__</snippet></ROW><ROW><id>10022244</id><snippet>def build_filters(self, filters=None):
    if filters is None:
        filters = {}
    orm_filters = super(BusinessResource, self).build_filters(filters)

    if('query' in filters):
        query = filters['query']
        qset = (
                Q(name__icontains=query) |
                Q(description__icontains=query) |
                Q(email__icontains=query)
                )
        orm_filters.update({'custom': qset})

    return orm_filters

def apply_filters(self, request, applicable_filters):
    if 'custom' in applicable_filters:
        custom = applicable_filters.pop('custom')
    else:
        custom = None

    semi_filtered = super(BusinessResource, self).apply_filters(request, applicable_filters)

    return semi_filtered.filter(custom) if custom else semi_filtered
</snippet></ROW><ROW><id>10022244</id><snippet>apply_filters</snippet></ROW><ROW><id>10022244</id><snippet>build_filters</snippet></ROW><ROW><id>10022429</id><snippet>class sdict(dict):
    def __getattr__(self, attr):
        return self.get(attr, None)
    __setattr__= dict.__setitem__
    __delattr__= dict.__delitem__
    def __iadd__(self, other):
        self.update(other)
        return self

&gt;&gt;&gt; a = sdict()
&gt;&gt;&gt; a.b = 3
&gt;&gt;&gt; a
{'b': 3}
&gt;&gt;&gt; a.b
3
&gt;&gt;&gt; a['b']
3
&gt;&gt;&gt; a += {'fred': 3}
&gt;&gt;&gt; a
{'b': 3, 'fred': 3}
</snippet></ROW><ROW><id>10022625</id><snippet>__new__</snippet></ROW><ROW><id>10022625</id><snippet>class CTest(tuple):
    def __new__(cls, arg):
        if type(arg) is tuple:
            return super(CTest, cls).__new__(cls, (2, 2))
        else:
            return super(CTest, cls).__new__(cls, arg)
</snippet></ROW><ROW><id>10022625</id><snippet>a = CTest((1,1))
print a
&gt; (2, 2)
</snippet></ROW><ROW><id>10022890</id><snippet>db.houses.find({"street":{"$regex": "май", "$options":"i"}}).distinct("street")
</snippet></ROW><ROW><id>10022974</id><snippet>if any(x+'c' == element for x in your_list):
</snippet></ROW><ROW><id>10022974</id><snippet>list</snippet></ROW><ROW><id>10023045</id><snippet>__len__</snippet></ROW><ROW><id>10023045</id><snippet>class IceCream():
    # Flavor is a string
    # Toppings is a list of strings
    def __init__(self, flavor, toppings):
        self.name = flavor
        self.toppings = toppings

    # Return the number of toppings
    def __len__(self):
        return len(self.toppings)

    def __str__(self):
        return "{0} flavor ice cream".format(self.name)


vanillaToppings = ['chocolate chips', 'fudge', 'penuts']
vanilla = IceCream('Vanilla', vanillaToppings)
print(vanilla, 'with', len(vanilla), 'kind of toppings!')
</snippet></ROW><ROW><id>10023490</id><snippet>User.federated_identity()</snippet></ROW><ROW><id>10023515</id><snippet>request.POST</snippet></ROW><ROW><id>10023515</id><snippet>request.body</snippet></ROW><ROW><id>10023515</id><snippet>request.raw_post_data</snippet></ROW><ROW><id>10023515</id><snippet>json.loads()</snippet></ROW><ROW><id>10024017</id><snippet>__init__.py</snippet></ROW><ROW><id>10024017</id><snippet>applications/modules/</snippet></ROW><ROW><id>10024750</id><snippet>seen = set() 

# never use list as a variable name
[seen.add(obj.id) or obj for obj in mylist if obj.id not in seen]
</snippet></ROW><ROW><id>10024750</id><snippet>set.add</snippet></ROW><ROW><id>10024750</id><snippet>None</snippet></ROW><ROW><id>10024750</id><snippet>obj</snippet></ROW><ROW><id>10024750</id><snippet>obj.id</snippet></ROW><ROW><id>10024750</id><snippet>seen</snippet></ROW><ROW><id>10024750</id><snippet>None</snippet></ROW><ROW><id>10024750</id><snippet>obj is None</snippet></ROW><ROW><id>10024750</id><snippet>obj.id</snippet></ROW><ROW><id>10024750</id><snippet>mylist</snippet></ROW><ROW><id>10024750</id><snippet>None</snippet></ROW><ROW><id>10024750</id><snippet>if obj and (obj.id not in seen)</snippet></ROW><ROW><id>10025106</id><snippet>with</snippet></ROW><ROW><id>10025106</id><snippet>with open('output.txt', 'w') as f:
    f.write('Hello')
</snippet></ROW><ROW><id>10025106</id><snippet>.flush()</snippet></ROW><ROW><id>10025812</id><snippet>def f(a, *unused):
    return a
</snippet></ROW><ROW><id>10025930</id><snippet>os.path.abspath(filename)</snippet></ROW><ROW><id>10025930</id><snippet>/home/bentley4/Desktop/sc/file1.txt</snippet></ROW><ROW><id>10025930</id><snippet>/home/bentley4</snippet></ROW><ROW><id>10025930</id><snippet>os.path.abspath("Desktop/sc/file1.txt")</snippet></ROW><ROW><id>10025980</id><snippet>&gt;&gt;&gt; sentence = "Tom's boat is blue"
&gt;&gt;&gt; mydict = { 'Tom': 'green' }
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("(\S+)'s boat is (\w+)", lambda m: "{}'s boat is actually {}".format(m.group(1), mydict[m.group(1)]), sentence)
"Tom's boat is actually green"
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10025981</id><snippet>pl = readPlist(pathOrFile)
print(pl["1"])
</snippet></ROW><ROW><id>10026341</id><snippet>print s.getvalue()
</snippet></ROW><ROW><id>10026341</id><snippet>README</snippet></ROW><ROW><id>10026341</id><snippet>neo</snippet></ROW><ROW><id>10027101</id><snippet>a.py</snippet></ROW><ROW><id>10027101</id><snippet>class A:
    def __init__(self, ref):
        from b import B
        assert isinstance(ref, B)
        self.ref = ref
</snippet></ROW><ROW><id>10027101</id><snippet>B</snippet></ROW><ROW><id>10027101</id><snippet>A</snippet></ROW><ROW><id>10027101</id><snippet>b</snippet></ROW><ROW><id>10027278</id><snippet>inetnums=[(int(x) for x in line.rstrip('\n').split('\t')) for line in fin]
</snippet></ROW><ROW><id>10027278</id><snippet>&gt;&gt;&gt; def foo2():
    fin.seek(0)
    inetnums=[]
    for line in fin:
        line = line.rstrip('\n')
        mas = line.split('\t')
        row = ( int(mas[0]), int(mas[1]), mas[2], mas[3])
        inetnums.append(row)


&gt;&gt;&gt; def foo1():
    fin.seek(0)
    inetnums=[[int(x) for x in line.rstrip('\n').split('\t')] for line in fin]

&gt;&gt;&gt; cProfile.run("foo1()")
         444 function calls in 0.004 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.003    0.003    0.004    0.004 &lt;pyshell#362&gt;:1(foo1)
        1    0.000    0.000    0.004    0.004 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
      220    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'seek' of 'file' objects}
      220    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}


&gt;&gt;&gt; cProfile.run("foo2()")
         664 function calls in 0.006 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.005    0.005    0.006    0.006 &lt;pyshell#360&gt;:1(foo2)
        1    0.000    0.000    0.006    0.006 &lt;string&gt;:1(&lt;module&gt;)
      220    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
      220    0.001    0.000    0.001    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'seek' of 'file' objects}
      220    0.001    0.000    0.001    0.000 {method 'split' of 'str' objects}


&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10027354</id><snippet>ImageDraw.floodfill</snippet></ROW><ROW><id>10027354</id><snippet>&gt;&gt;&gt; import ImageDraw
&gt;&gt;&gt; help(ImageDraw.floodfill)
Help on function floodfill in module ImageDraw:

floodfill(image, xy, value, border=None)
    Fill bounded region.
</snippet></ROW><ROW><id>10027400</id><snippet>:let $AP_PORT=9999
</snippet></ROW><ROW><id>10028371</id><snippet>import subprocess
cmd = ["cacls",  "E:/" + list1[2], list1[3], "/p", str]

pro = subprocess.Popen(final, stdin=subprocess.PIPE)
pro.communicate("y\r\n")
</snippet></ROW><ROW><id>10028492</id><snippet>class MyClass:
  pass
</snippet></ROW><ROW><id>10028492</id><snippet>class MyClass(object):
  pass
</snippet></ROW><ROW><id>10028528</id><snippet>compress</snippet></ROW><ROW><id>10028528</id><snippet>tar.Z</snippet></ROW><ROW><id>10028650</id><snippet>from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>10028673</id><snippet>class Data:
    def __init__(self, firstName, lastName, address):
        self.firstName = firstName
        self.lastName = lastName
        self.address = dict(address)

data = Data("first", "last", dict(state="pa", city="pittsburgh"))
</snippet></ROW><ROW><id>10028797</id><snippet>import base_classes

class Bookcollection(bae_classes.Bookcollection):
   new_member = "lalala"

base_classes.Bookcollection = Bookcollection
</snippet></ROW><ROW><id>10028797</id><snippet> import base_classes

 base_classes.Bookcollection.new_member = "lalala"

 def new_bookcol_method(self):
      pass

 # to replace or register a method in the other class:
 base_classes.Bookcollection.__dict__["old_bookcol_method"] = new_bookcol_method
</snippet></ROW><ROW><id>10029006</id><snippet>.py</snippet></ROW><ROW><id>10029279</id><snippet>os.listdir(path)</snippet></ROW><ROW><id>10029279</id><snippet>path</snippet></ROW><ROW><id>10029279</id><snippet>path</snippet></ROW><ROW><id>10029279</id><snippet>os.listdir(path)</snippet></ROW><ROW><id>10029279</id><snippet>import os
import sys

path = unicode(path, sys.getfilesystemencoding())

# All elements of listing will be in unicode.
listing = os.listdir(path)
for infile in listing:
    print infile

    # When infile is in unicode, the system to open 
    # the file using the correct encoding for the filename
    f = open(os.path.join(path, infile), 'r')
</snippet></ROW><ROW><id>10029279</id><snippet>sys.getfilesystemencoding()</snippet></ROW><ROW><id>10029279</id><snippet>open</snippet></ROW><ROW><id>10029505</id><snippet>with open("filename") as f:
    contents = f.read()
</snippet></ROW><ROW><id>10029505</id><snippet>Counter</snippet></ROW><ROW><id>10029617</id><snippet>query = 'select * from `DomainName` where key1=val1'
check = domain.select(query, consistent_read=True)
itemName = check.next()['key2']
</snippet></ROW><ROW><id>10029645</id><snippet>#Rewritten code from /r2/r2/lib/db/_sorts.pyx

from math import sqrt

def _confidence(ups, downs):
    n = ups + downs

    if n == 0:
        return 0

    z = 1.0 #1.0 = 85%, 1.6 = 95%
    phat = float(ups) / n
    return ((phat + z*z/(2*n) - z * sqrt((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n))

def confidence(ups, downs):
    if ups + downs == 0:
        return 0
    else:
        return _confidence(ups, downs)
</snippet></ROW><ROW><id>10029708</id><snippet>{% load tz %}

{% timezone "Europe/Paris" %}
    Paris time: {{ value }}
{% endtimezone %}

{% timezone None %}
    Server time: {{ value }}
{% endtimezone %}
</snippet></ROW><ROW><id>10029710</id><snippet>y = numpy.ones((10, 20))
y[0:5] = 2
psum = y[0:3].sum(axis=0)
</snippet></ROW><ROW><id>10029710</id><snippet>y = numpy.array([2, 6, 7, 3, 4])
print y[1:4].sum()
</snippet></ROW><ROW><id>10029710</id><snippet>16</snippet></ROW><ROW><id>10029887</id><snippet>import locale
locale.setlocale(locale.LC_ALL,'en_US')
</snippet></ROW><ROW><id>10029887</id><snippet>from dateutil import parser
date = '2 Apr 2012 13:21:43'
date = parser.parse(date)
</snippet></ROW><ROW><id>10029903</id><snippet>/tmp/upload/1015/</snippet></ROW><ROW><id>10029903</id><snippet>/var/userdata/01/1015/</snippet></ROW><ROW><id>10029903</id><snippet>/var/userdata/01/1015/</snippet></ROW><ROW><id>10029903</id><snippet>/tmp/upload/1015/</snippet></ROW><ROW><id>10029903</id><snippet>/tmp/upload/1015/</snippet></ROW><ROW><id>10029903</id><snippet>/tmp/upload</snippet></ROW><ROW><id>10029958</id><snippet>contains</snippet></ROW><ROW><id>10029958</id><snippet>icontains</snippet></ROW><ROW><id>10029958</id><snippet>casas = Casa.objects.filter(nome_fantasia__icontains = 'green')
</snippet></ROW><ROW><id>10029958</id><snippet>... WHERE nome_fantasia ILIKE '%green%'
</snippet></ROW><ROW><id>10030447</id><snippet>os.dup2()</snippet></ROW><ROW><id>10030447</id><snippet>sys.stdout</snippet></ROW><ROW><id>10030447</id><snippet>os.open()</snippet></ROW><ROW><id>10030447</id><snippet>if os.fork() &gt; 0:
    os._exit(0)
os.setsid()
sys.stdin.flush()
sys.stdout.flush()
sys.stderr.flush()
null = os.open(os.devnull, os.O_RDWR)
os.dup2(null, sys.stdin.fileno())
os.dup2(null, sys.stdout.fileno())
os.dup2(null, sys.stderr.fileno())
os.close(null)
</snippet></ROW><ROW><id>10030447</id><snippet>os.devnull</snippet></ROW><ROW><id>10030468</id><snippet>B.__init__()</snippet></ROW><ROW><id>10030468</id><snippet>A</snippet></ROW><ROW><id>10030694</id><snippet>a = Genome()
genomes = []
for i in range(100):
    b = Genome()
    b.mutate()
    genomes.append(b)
assert any(a != b for b in genomes)
</snippet></ROW><ROW><id>10031501</id><snippet>execfile</snippet></ROW><ROW><id>10031548</id><snippet>r'node\d+(?=[^\n]*\n\s*state\s*=\s*free)'
</snippet></ROW><ROW><id>10031548</id><snippet>l = re.findall(r'node\d+(?=[^\n]*\n\s*state\s*=\s*free)', s)
print l
&gt;&gt;&gt; ['node13']
</snippet></ROW><ROW><id>10031548</id><snippet>r'node\d+(?=\s*state\s*=\s*free)'</snippet></ROW><ROW><id>10031548</id><snippet>\s</snippet></ROW><ROW><id>10031548</id><snippet>state=free</snippet></ROW><ROW><id>10031548</id><snippet>node99 state=free</snippet></ROW><ROW><id>10031548</id><snippet>\n</snippet></ROW><ROW><id>10031661</id><snippet>consume</snippet></ROW><ROW><id>10031661</id><snippet>&lt;block3&gt; :: &lt;number&gt; &lt;number&gt; &lt;number&gt;
</snippet></ROW><ROW><id>10031661</id><snippet>&lt;block3a&gt; :: 3 &lt;number&gt; &lt;number&gt; &lt;number&gt;
&lt;block3b&gt; :: &lt;number&gt; &lt;number&gt; &lt;number&gt; 3
</snippet></ROW><ROW><id>10031661</id><snippet>N</snippet></ROW><ROW><id>10031661</id><snippet>N</snippet></ROW><ROW><id>10031661</id><snippet>blockN</snippet></ROW><ROW><id>10031661</id><snippet>* * * 4 7 10</snippet></ROW><ROW><id>10031661</id><snippet>&lt;group&gt; :: * &lt;group&gt; &lt;number&gt;
&lt;group&gt; :: * &lt;number&gt;
</snippet></ROW><ROW><id>10031661</id><snippet>a^n b^n</snippet></ROW><ROW><id>10031693</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; 
&gt;&gt;&gt; sentence = ['This','is','a','sample']
&gt;&gt;&gt; contiguous_subs = [sentence[i:j] for i,j in itertools.combinations(xrange(len(sentence)+1), 2)]
&gt;&gt;&gt; contiguous_subs
[['This'], ['This', 'is'], ['This', 'is', 'a'], ['This', 'is', 'a', 'sample'],
 ['is'], ['is', 'a'], ['is', 'a', 'sample'], ['a'], ['a', 'sample'],
 ['sample']]
</snippet></ROW><ROW><id>10031693</id><snippet>&gt;&gt;&gt; fd = nltk.FreqDist(contiguous_subs)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/dist-packages/nltk/probability.py", line 107, in __init__
    self.update(samples)
  File "/usr/local/lib/python2.7/dist-packages/nltk/probability.py", line 437, in update
    self.inc(sample, count=count)
  File "/usr/local/lib/python2.7/dist-packages/nltk/probability.py", line 122, in inc
    self[sample] = self.get(sample,0) + count
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>10031693</id><snippet>&gt;&gt;&gt; contiguous_subs = [tuple(sentence[i:j]) for i,j in itertools.combinations(xrange(len(sentence)+1), 2)]
&gt;&gt;&gt; contiguous_subs
[('This',), ('This', 'is'), ('This', 'is', 'a'), ('This', 'is', 'a', 'sample'), ('is',), ('is', 'a'), ('is', 'a', 'sample'), ('a',), ('a', 'sample'), ('sample',)]
&gt;&gt;&gt; fd = nltk.FreqDist(contiguous_subs)
&gt;&gt;&gt; print fd
&lt;FreqDist: ('This',): 1, ('This', 'is'): 1, ('This', 'is', 'a'): 1, ('This', 'is', 'a', 'sample'): 1, ('a',): 1, ('a', 'sample'): 1, ('is',): 1, ('is', 'a'): 1, ('is', 'a', 'sample'): 1, ('sample',): 1&gt;
</snippet></ROW><ROW><id>10031866</id><snippet>            ellist += (1,string)
</snippet></ROW><ROW><id>10031866</id><snippet>            ellist.extend((1,string))
</snippet></ROW><ROW><id>10031866</id><snippet>ellist</snippet></ROW><ROW><id>10031866</id><snippet>[(None, None), 1, string]
</snippet></ROW><ROW><id>10031866</id><snippet>for</snippet></ROW><ROW><id>10031866</id><snippet>int</snippet></ROW><ROW><id>10031866</id><snippet>tuple</snippet></ROW><ROW><id>10031866</id><snippet>            ellist.append((1,string))
</snippet></ROW><ROW><id>10031866</id><snippet>+=</snippet></ROW><ROW><id>10031866</id><snippet>            ellist += [(1,string)]
</snippet></ROW><ROW><id>10031877</id><snippet>import numpy
import cairo
import math
data = numpy.zeros((200, 200, 4), dtype=numpy.uint8)
surface = cairo.ImageSurface.create_for_data(
    data, cairo.FORMAT_ARGB32, 200, 200)
cr = cairo.Context(surface)

# fill with solid white
cr.set_source_rgb(1.0, 1.0, 1.0)
cr.paint()

# draw red circle
cr.arc(100, 100, 80, 0, 2*math.pi)
cr.set_line_width(3)
cr.set_source_rgb(1.0, 0.0, 0.0)
cr.stroke()

# write output
print data[38:48, 38:48, 0]
surface.write_to_png("circle.png")
</snippet></ROW><ROW><id>10031877</id><snippet>[[255 255 255 255 255 255 255 255 132   1]
 [255 255 255 255 255 255 252 101   0   0]
 [255 255 255 255 255 251  89   0   0   0]
 [255 255 255 255 249  80   0   0   0  97]
 [255 255 255 246  70   0   0   0 116 254]
 [255 255 249  75   0   0   0 126 255 255]
 [255 252  85   0   0   0 128 255 255 255]
 [255 103   0   0   0 118 255 255 255 255]
 [135   0   0   0 111 255 255 255 255 255]
 [  1   0   0  97 254 255 255 255 255 255]]
</snippet></ROW><ROW><id>10032123</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.random.seed(17)
&gt;&gt;&gt; m = numpy.random.rand(5,4)
&gt;&gt;&gt; m
array([[ 0.294665  ,  0.53058676,  0.19152079,  0.06790036],
       [ 0.78698546,  0.65633352,  0.6375209 ,  0.57560289],
       [ 0.03906292,  0.3578136 ,  0.94568319,  0.06004468],
       [ 0.8640421 ,  0.87729053,  0.05119367,  0.65241862],
       [ 0.55175137,  0.59751325,  0.48352862,  0.28298816]])
&gt;&gt;&gt; c = numpy.cov(m,bias=1)
&gt;&gt;&gt; c
array([[ 0.0288779 ,  0.00524455,  0.00155373,  0.02779861,  0.01798404],
       [ 0.00524455,  0.00592484, -0.00711072,  0.01006019,  0.00631144],
       [ 0.00155373, -0.00711072,  0.13391344, -0.10551922,  0.00945934],
       [ 0.02779861,  0.01006019, -0.10551922,  0.11250984,  0.00982862],
       [ 0.01798404,  0.00631144,  0.00945934,  0.00982862,  0.01444482]])
&gt;&gt;&gt; numpy.cov(m/c[0][0]**0.5, bias=1)
array([[ 1.        ,  0.18161135,  0.05380354,  0.96262562,  0.62276138],
       [ 0.18161135,  0.20516847, -0.24623392,  0.3483699 ,  0.21855613],
       [ 0.05380354, -0.24623392,  4.63722877, -3.65397781,  0.32756326],
       [ 0.96262562,  0.3483699 , -3.65397781,  3.89605297,  0.34035085],
       [ 0.62276138,  0.21855613,  0.32756326,  0.34035085,  0.5002033 ]])
</snippet></ROW><ROW><id>10032123</id><snippet>&gt;&gt;&gt; (numpy.cov(m,bias=1)/numpy.cov(m,bias=1)[0][0])/(numpy.cov(m/c[0][0]**0.5, bias=1))
array([[ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.]])
</snippet></ROW><ROW><id>10032123</id><snippet>numpy.corrcoef</snippet></ROW><ROW><id>10032150</id><snippet>é</snippet></ROW><ROW><id>10032158</id><snippet>def wraps_with_first_line(f):
    def wrap(wrapper):
        wrapper = wraps(f)(wrapper)
        if not hasattr(wrapper, '_first_line'):
            wrapper._first_line = inspect.getsourcelines(f)[1] 
        return wrapper
    return wrap
</snippet></ROW><ROW><id>10032409</id><snippet>from decimal import *
</snippet></ROW><ROW><id>10033110</id><snippet>os.chroot('../..') # Add '../' as needed
</snippet></ROW><ROW><id>10033110</id><snippet>CAP_SYS_CHROOT</snippet></ROW><ROW><id>10033110</id><snippet>os.mkdir('tmp')
os.chroot('tmp')
os.chdir('../../') # Add '../' as needed
os.chroot('.')
</snippet></ROW><ROW><id>10033110</id><snippet>chroot</snippet></ROW><ROW><id>10033110</id><snippet>fchdir</snippet></ROW><ROW><id>10033143</id><snippet>import regex

# traditional matching - three digits
r = '(?:\d\d\d)'
print regex.findall(r, '1xx22yy333zz')
## ['333']

# fuzzy matching - three digits, allow at most 2 deletions
r = '(?:\d\d\d){d&lt;3}'
print regex.findall(r, '1xx22yy333zz')
## ['1', '22', '333']
</snippet></ROW><ROW><id>10033143</id><snippet>{d&lt;3}</snippet></ROW><ROW><id>10033164</id><snippet>&gt;&gt; y = [(datetime.datetime( 2012,1,1,1,1), 2.1), 
...     (datetime.datetime( 2012,1,1,1,2), -3.1),
...     (datetime.datetime( 2012,1,1,1,3), 0.1)]
&gt;&gt; np.rec.array(y, dtype=[('timestamp', object), ('x','f')])
rec.array([(datetime.datetime(2012, 1, 1, 1, 1), 2.0999999046325684),
           (datetime.datetime(2012, 1, 1, 1, 2), -3.0999999046325684),
           (datetime.datetime(2012, 1, 1, 1, 3), 0.10000000149011612)],
dtype=[('timestamp', '|O8'), ('x', '&lt;f4')])
</snippet></ROW><ROW><id>10033263</id><snippet>{key: "keyval", value: "valueval"}</snippet></ROW><ROW><id>10033263</id><snippet>mydocs.find({'key': something}, fields=['value'])
</snippet></ROW><ROW><id>10033263</id><snippet>key</snippet></ROW><ROW><id>10033263</id><snippet>mydocs.ensure_index('key')
</snippet></ROW><ROW><id>10033601</id><snippet>&gt;&gt;&gt; diff = difflib.ndiff(foo, bar)
&gt;&gt;&gt; diff = list(diff)
&gt;&gt;&gt; print ''.join(difflib.restore(diff, 2))
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam sed orci lobortis lectus bibendum baculo mihi. Integer iaculis eros porttitor velit porttitor scelerisque. Nunc venenatis nibh.
&gt;&gt;&gt; ''.join(difflib.restore(diff, 2))==''.join(bar)
True
&gt;&gt;&gt; ''.join(difflib.restore(diff, 1))==''.join(foo)
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10034173</id><snippet>__float__()</snippet></ROW><ROW><id>10034173</id><snippet>class MyClass(object):
    def __float__(self):
         return 0.0

float(MyClass())   # 0.0
</snippet></ROW><ROW><id>10034173</id><snippet>float</snippet></ROW><ROW><id>10034173</id><snippet>self.num / self.denom</snippet></ROW><ROW><id>10034173</id><snippet>int</snippet></ROW><ROW><id>10034173</id><snippet>float(self.num) / self.denom</snippet></ROW><ROW><id>10034189</id><snippet>foodmap = {'HotDog': HotDog, 'Burger': Burger}

print [foodmap[f]() for (f, c) in todayOrders for x in range(c)]
</snippet></ROW><ROW><id>10034189</id><snippet>foodmap[f]</snippet></ROW><ROW><id>10034189</id><snippet>HotDog</snippet></ROW><ROW><id>10034189</id><snippet>Burger</snippet></ROW><ROW><id>10034189</id><snippet>someclass()</snippet></ROW><ROW><id>10034189</id><snippet>soemclass</snippet></ROW><ROW><id>10034189</id><snippet>someclass.__init__</snippet></ROW><ROW><id>10034189</id><snippet>foodmap[f]()</snippet></ROW><ROW><id>10034189</id><snippet>foodmap</snippet></ROW><ROW><id>10034247</id><snippet>myview2.check()</snippet></ROW><ROW><id>10034247</id><snippet>AMixin1</snippet></ROW><ROW><id>10034247</id><snippet>BMixin1</snippet></ROW><ROW><id>10034247</id><snippet>CMixin1</snippet></ROW><ROW><id>10034247</id><snippet>super(..., self).check()</snippet></ROW><ROW><id>10034247</id><snippet>super()</snippet></ROW><ROW><id>10035032</id><snippet>&lt;B&gt;</snippet></ROW><ROW><id>10035032</id><snippet>&lt;A&gt;</snippet></ROW><ROW><id>10035032</id><snippet>&lt;A&gt;</snippet></ROW><ROW><id>10035032</id><snippet>&lt;B&gt;</snippet></ROW><ROW><id>10035032</id><snippet>&lt;B&gt;</snippet></ROW><ROW><id>10035032</id><snippet>&lt;A&gt;</snippet></ROW><ROW><id>10035032</id><snippet>&lt;B&gt;</snippet></ROW><ROW><id>10035032</id><snippet>&lt;A&gt;</snippet></ROW><ROW><id>10035032</id><snippet>xml.sax</snippet></ROW><ROW><id>10035032</id><snippet>xml.sax.xmlreader.IncrementalParser</snippet></ROW><ROW><id>10035214</id><snippet>9j</snippet></ROW><ROW><id>10035214</id><snippet>'9a'</snippet></ROW><ROW><id>10035214</id><snippet>'9b'</snippet></ROW><ROW><id>10035336</id><snippet>setup( 
    windows = [{'script': "LoadFilesGUI.py"}], 
    data_files = data_files, 
    zipfile = None, 
    options = {
        'py2exe': {
            'optimize': 2, 
            'bundle_files': 1,
            'includes' : [],
        }
    }, 
) 
</snippet></ROW><ROW><id>10035336</id><snippet>options={ 
    "py2exe": { 
        "includes" : ['sip','PyQt4.QtCore','PyQt4.QtGui',
                        'PyQt4.QtNetwork','PyQt4.QtWebKit'] 
    } 
}
</snippet></ROW><ROW><id>10035336</id><snippet>MyPackage</snippet></ROW><ROW><id>10035336</id><snippet>'includes' : ['MyPackage']</snippet></ROW><ROW><id>10035361</id><snippet>collections.Counter</snippet></ROW><ROW><id>10035452</id><snippet>lucene.initVM()</snippet></ROW><ROW><id>10035452</id><snippet>lucene.Version.LUCENE_35</snippet></ROW><ROW><id>10035581</id><snippet>&gt;&gt;&gt; from datetime import date, time, datetime
&gt;&gt;&gt; d=date(2012,10,01)
&gt;&gt;&gt; t=time(10,11,12)
&gt;&gt;&gt; datetime.combine(d,t)
datetime.datetime(2012, 10, 1, 10, 11, 12)
</snippet></ROW><ROW><id>10035974</id><snippet>import matplotlib.pyplot as plt

hf, ha = plt.subplots(3,2)
ha[-1, -1].axis('off')

plt.show()
</snippet></ROW><ROW><id>10036053</id><snippet>django.db.models.signals.post_save</snippet></ROW><ROW><id>10036053</id><snippet>Owner.save()</snippet></ROW><ROW><id>10036053</id><snippet>from django.db.models.signals import post_save

post_save.connect(save_pet_handler, sender=Owner, dispatch_uid="my_unique_identifier")

def save_pet_handler(sender, instance, created, **kwargs):
    ...
</snippet></ROW><ROW><id>10036053</id><snippet>o.save()</snippet></ROW><ROW><id>10036053</id><snippet>save_pet_handler</snippet></ROW><ROW><id>10036053</id><snippet>o.pet</snippet></ROW><ROW><id>10036053</id><snippet>created</snippet></ROW><ROW><id>10036093</id><snippet>import csv
writer = csv.writer(open('output.csv', 'wb'))

for item in mydata:  # mydata is your list of tuples, so item is a tuple
    row = [item[0]] + list(item[1])
    writer.writerow(row)
</snippet></ROW><ROW><id>10036147</id><snippet>subprocess</snippet></ROW><ROW><id>10036147</id><snippet>Popen</snippet></ROW><ROW><id>10036147</id><snippet>import os
...
with open(os.devnull, 'r+') as nul:
    print Popen('ipconfig', shell=True, stdin=nul, stdout=PIPE, stderr=nul).communicate()[0]
</snippet></ROW><ROW><id>10036272</id><snippet>print('java files:', n_src)
</snippet></ROW><ROW><id>10036284</id><snippet>CTRL-]</snippet></ROW><ROW><id>10036284</id><snippet>tn.write('\x1d')</snippet></ROW><ROW><id>10036713</id><snippet>Timer</snippet></ROW><ROW><id>10036764</id><snippet>&gt;&gt;&gt; def partition(number):
...     answer = set()
...     answer.add((number, ))
...     for x in range(1, number):
...         for y in partition(number - x):
...             answer.add(tuple(sorted((x, ) + y)))
...     return answer
... 
&gt;&gt;&gt; partition(4)
set([(1, 3), (2, 2), (1, 1, 2), (1, 1, 1, 1), (4,)])
</snippet></ROW><ROW><id>10036764</id><snippet>answer.add(tuple(sorted((x, ) + y))</snippet></ROW><ROW><id>10036764</id><snippet>answer.add((x, ) + y)</snippet></ROW><ROW><id>10036830</id><snippet>long</snippet></ROW><ROW><id>10036830</id><snippet>long</snippet></ROW><ROW><id>10036830</id><snippet>L</snippet></ROW><ROW><id>10036830</id><snippet>0L</snippet></ROW><ROW><id>10036830</id><snippet>long</snippet></ROW><ROW><id>10036830</id><snippet>0</snippet></ROW><ROW><id>10036830</id><snippet>int</snippet></ROW><ROW><id>10036830</id><snippet>int</snippet></ROW><ROW><id>10036830</id><snippet>long</snippet></ROW><ROW><id>10036830</id><snippet>int</snippet></ROW><ROW><id>10036830</id><snippet>long</snippet></ROW><ROW><id>10036830</id><snippet>decimal</snippet></ROW><ROW><id>10036830</id><snippet>Decimal</snippet></ROW><ROW><id>10036830</id><snippet>long</snippet></ROW><ROW><id>10036830</id><snippet>Decimal</snippet></ROW><ROW><id>10036830</id><snippet>int</snippet></ROW><ROW><id>10036830</id><snippet>float</snippet></ROW><ROW><id>10036830</id><snippet>int</snippet></ROW><ROW><id>10036830</id><snippet>long</snippet></ROW><ROW><id>10036830</id><snippet>long</snippet></ROW><ROW><id>10036830</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>10037052</id><snippet>def age ():
    global n,m,b
    n=input("please select number of people age 12+")
    m=input("please select number of people age 2+ ")
    b=input("please select number of people age 2-")
</snippet></ROW><ROW><id>10037052</id><snippet>def age ():
    n=input("please select number of people age 12+")
    m=input("please select number of people age 2+ ")
    b=input("please select number of people age 2-")
    return n, m, b

# and call it like
n, m, b = age()
</snippet></ROW><ROW><id>10037052</id><snippet>spian</snippet></ROW><ROW><id>10037052</id><snippet>def newSpian(spianVal):
    return spianVal * 100

# and call it like
newSpianValue = newSpian(spian)
# or overwrite the old one
spian = newSpian(spian)
</snippet></ROW><ROW><id>10037052</id><snippet>a,b,c,d</snippet></ROW><ROW><id>10037108</id><snippet>import matplotlib
matplotlib.use('TkAgg')

from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import random
import numpy as np
import sys
import Tkinter as tk
import time

def function1(fig, ax):
  ax.cla()
  color_grade_classes = ['#80FF00','#FFFF00','#FF8000', '#FF0000']
  varsi =  random.randint(1, 100)

  for colors, rows  in zip(color_grade_classes, [3,2,1,0] ):  
    indexs = np.arange(5)
    heights = [varsi,varsi/2,varsi/3,0,0]
    ax.bar(indexs, heights, zs = rows,  zdir='y', color=colors, alpha=0.8)
  return fig

class App():
    def __init__(self):
        self.root = tk.Tk()
        self.root.wm_title("Embedding in TK")

        self.fig = plt.figure()
        self.ax = self.fig.add_subplot(111, projection='3d')
        self.ax.set_xlabel('X')
        self.ax.set_ylabel('Y')
        self.fig = function1(self.fig, self.ax)

        self.canvas = FigureCanvasTkAgg(self.fig, master=self.root)
        self.toolbar = NavigationToolbar2TkAgg( self.canvas, self.root )
        self.toolbar.update()
        self.canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        self.label = tk.Label(text="")
        self.label.pack()
        self.update_clock()
        self.root.mainloop()

    def update_clock(self):
        self.fig = function1(self.fig,self.ax)
        self.canvas.show()
        self.canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)
        now = time.strftime("%H:%M:%S")
        self.label.configure(text=now)
        self.root.after(1000, self.update_clock)

app=App()
</snippet></ROW><ROW><id>10037135</id><snippet>&gt;&gt;&gt; type(1.1)
&lt;class 'float'&gt;
&gt;&gt;&gt; type(1)
&lt;class 'int'&gt;
&gt;&gt;&gt; 1.1 &gt; 1
True
&gt;&gt;&gt; 1.1 &lt; 1
False
&gt;&gt;&gt; 1 &lt; 2
True
&gt;&gt;&gt; 2.2 == 2.2
True
&gt;&gt;&gt; 2 == 2.2
False
&gt;&gt;&gt; 1.6 &lt; 2
True
&gt;&gt;&gt; 1.6 &gt; 2
False
&gt;&gt;&gt; 1.6 == 2
False
</snippet></ROW><ROW><id>10037135</id><snippet>&gt;&gt;&gt; 0.3+0.3+0.3 == 0.9
False
&gt;&gt;&gt; 0.3+0.3+0.3
0.8999999999999999
</snippet></ROW><ROW><id>10037135</id><snippet>int</snippet></ROW><ROW><id>10037135</id><snippet>&lt;</snippet></ROW><ROW><id>10037135</id><snippet>&gt;</snippet></ROW><ROW><id>10037135</id><snippet>decimal</snippet></ROW><ROW><id>10037135</id><snippet>&gt;&gt;&gt; Decimal(1.2000000000000001)
Decimal('1.20000000000000017763568394002504646778106689453125')
&gt;&gt;&gt; Decimal(1.20000000000000001)
Decimal('1.1999999999999999555910790149937383830547332763671875')
</snippet></ROW><ROW><id>10037280</id><snippet>&gt;&gt;&gt; (1)
1
&gt;&gt;&gt; (1,)
(1,)
</snippet></ROW><ROW><id>10037280</id><snippet>(1)</snippet></ROW><ROW><id>10037280</id><snippet>1</snippet></ROW><ROW><id>10037280</id><snippet>&gt;&gt;&gt; (1,) in [1,2,3]
False
</snippet></ROW><ROW><id>10037353</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>10037353</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>10037353</id><snippet>get_full_path</snippet></ROW><ROW><id>10037364</id><snippet>([\w\s+]+)
</snippet></ROW><ROW><id>10037364</id><snippet>+</snippet></ROW><ROW><id>10037364</id><snippet>[ ]</snippet></ROW><ROW><id>10037364</id><snippet>+</snippet></ROW><ROW><id>10037364</id><snippet>([\w\s]*\w)
</snippet></ROW><ROW><id>10037364</id><snippet>,?\s*\(?
</snippet></ROW><ROW><id>10037364</id><snippet>(?:,\s*\(|,\s*|\s*\()
</snippet></ROW><ROW><id>10037364</id><snippet>([\w\s+\\/]+)
</snippet></ROW><ROW><id>10037364</id><snippet>+</snippet></ROW><ROW><id>10037364</id><snippet>[ ]</snippet></ROW><ROW><id>10037364</id><snippet>([\w\s\\/]*\w)
</snippet></ROW><ROW><id>10037364</id><snippet>venezuel</snippet></ROW><ROW><id>10037364</id><snippet>a</snippet></ROW><ROW><id>10037364</id><snippet>\)?\s*\(?([\w\s+\\/]+)\)?
</snippet></ROW><ROW><id>10037364</id><snippet>\)?\s*\(?
</snippet></ROW><ROW><id>10037364</id><snippet>([\w\s+\\/]+)
</snippet></ROW><ROW><id>10037364</id><snippet>venezuel</snippet></ROW><ROW><id>10037364</id><snippet>a</snippet></ROW><ROW><id>10037364</id><snippet>\)?\s*
</snippet></ROW><ROW><id>10037364</id><snippet>(?:\(?([\w\s+\\/]+)\)?)?
</snippet></ROW><ROW><id>10037364</id><snippet>([\w\s]*\w)(?:,\s*\(|,\s*|\s*\()([\w\s\\/]*\w)\)?\s*(?:\(?([\w\s+\\/]+)\)?)?
</snippet></ROW><ROW><id>10037364</id><snippet>&gt;&gt;&gt; re.match(r, 'caracas, venezuela').groups()
('caracas', 'venezuela', None)
&gt;&gt;&gt; re.match(r, 'caracas (venezuela)').groups()
('caracas', 'venezuela', None)
&gt;&gt;&gt; re.match(r, 'caracas, (venezuela) (df)').groups()
('caracas', 'venezuela', 'df')
</snippet></ROW><ROW><id>10037368</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; I = "I=2.7A"
&gt;&gt;&gt; s = re.search(r"\d+(\.\d+)?", I)
&gt;&gt;&gt; s.group(0)
'2.7'
&gt;&gt;&gt; I = "A=3V"
&gt;&gt;&gt; s = re.search(r"\d+(\.\d+)?", I)
&gt;&gt;&gt; s.group(0)
'3'
&gt;&gt;&gt; I = "I=2.723A"
&gt;&gt;&gt; s = re.search(r"\d+(\.\d+)?", I)
&gt;&gt;&gt; s.group(0)
'2.723'
</snippet></ROW><ROW><id>10037426</id><snippet>for tag in node.xpath('//*[@class]'):
    tag.attrib.pop('class')
</snippet></ROW><ROW><id>10037474</id><snippet>SELECT b.*, c.position, l.position
FROM   books b
JOIN   characternames c USING (bookid)
JOIN   locations l USING (bookid)
WHERE  c.name = 'XXX'
AND    l.locname = 'YYY';
</snippet></ROW><ROW><id>10037474</id><snippet>CREATE INDEX books_bookid_idx ON books(bookid); -- a primary key will do, too

CREATE INDEX cn_bookid_idx ON characternames (bookid);
CREATE INDEX cn_name_idx ON characternames (name);

CREATE INDEX locations_bookid_idx ON locations (bookid);
CREATE INDEX locations_locname_idx ON locations (locname);
</snippet></ROW><ROW><id>10037474</id><snippet>EXPLAIN ANALYZE</snippet></ROW><ROW><id>10037474</id><snippet>think</snippet></ROW><ROW><id>10037474</id><snippet>bookid</snippet></ROW><ROW><id>10037474</id><snippet>WITH b AS (
    SELECT bookid
    FROM   characternames
    WHERE  name = 'XXX'
    GROUP  BY 1
    INTERSECT
    SELECT bookid
    FROM   locations
    WHERE  l.locname = 'YYY'
    GROUP  BY 1
    )
SELECT bookid, position, 'char' AS what
FROM   b
JOIN   characternames USING (bookid)
WHERE  name = 'XXX'
UNION  ALL
SELECT bookid, position, 'loc' AS what
FROM   b
JOIN   locations USING (bookid)
WHERE  locname = 'YYY'
ORDER  BY bookid, position;
</snippet></ROW><ROW><id>10037474</id><snippet>WITH</snippet></ROW><ROW><id>10037474</id><snippet>INTERSECT</snippet></ROW><ROW><id>10037474</id><snippet>bookids</snippet></ROW><ROW><id>10037474</id><snippet>UNION ALL</snippet></ROW><ROW><id>10037474</id><snippet>SELECT</snippet></ROW><ROW><id>10037474</id><snippet>UNION</snippet></ROW><ROW><id>10037474</id><snippet>bookid, position</snippet></ROW><ROW><id>10037474</id><snippet>what</snippet></ROW><ROW><id>10037474</id><snippet>(bookid, term)</snippet></ROW><ROW><id>10037474</id><snippet>term</snippet></ROW><ROW><id>10037749</id><snippet>&gt;&gt;&gt; stuff = "Big and small"
&gt;&gt;&gt; stuff.replace(" and ","/")
'Big/small'
</snippet></ROW><ROW><id>10037861</id><snippet>&gt;&gt;&gt; def test():
...     """test"""
...     doc = test.__doc__
...     name = test.__name__
...     return doc, name
... 
&gt;&gt;&gt; test()
('test', 'test')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10037861</id><snippet>&gt;&gt;&gt; def dec(f):
...     def wrap():
...         """wrap"""
...         return f()
...     return wrap
... 
&gt;&gt;&gt; @dec
... def test():
...     """test"""
...     return test.__name__, test.__doc__
... 
&gt;&gt;&gt; test()
('wrap', 'wrap')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10037861</id><snippet>test</snippet></ROW><ROW><id>10038129</id><snippet>class System:
  def associate_transport_and_agent(transport, *agents):
    for agent in agents:
      transport.add_agents(*agents)
      agent.set_transport(transport)

class Transport:
  def __init__(self):
    self.bah = weee
    self.agents = set()
  def add_agents(self, *agents):
    self.agents.update(agents)
  def remove_agent(self, agent):
    self.agents.remove(agent)
  def doX(self, item):
    # ...


class Agent:
  def __init__(self):
    self.blah = whatever
    self.transport = None
  def set_transport(self, transport):
    if self.transport == transport:
      return
    if self.transport is not None:
      self.transport.remove_agent(self)
    self.transport = transport

  def doA(self):
    res = self.transport.doX(self.blah)
</snippet></ROW><ROW><id>10038130</id><snippet>Python Omni Completion</snippet></ROW><ROW><id>10038130</id><snippet>imports</snippet></ROW><ROW><id>10038130</id><snippet>test2</snippet></ROW><ROW><id>10038130</id><snippet>import test
test.mydoc.prettyStr
</snippet></ROW><ROW><id>10038130</id><snippet>docstr = docstr.replace('\n', ' ')
</snippet></ROW><ROW><id>10038130</id><snippet>/usr/share/vim/vim73/autoload/pythoncomplete.vim</snippet></ROW><ROW><id>10038143</id><snippet>from urllib import urlopen, urlencode
myId = '&lt;your_id_here&gt;'
myPin = '&lt;your_pin_here&gt;'
data = {
            'id':myId,
            'PIN':myPin,
            'submit':'Request Access',
            'wcuirs_uri':'https://cf.wcu.edu/busafrs/catcard/idsearch.cfm'
        }

url = 'https://itapp.wcu.edu/BanAuthRedirector/Default.aspx'
response = urlopen(url, urlencode(data))
open("mycatpage.txt",'w').write(response.read())
</snippet></ROW><ROW><id>10038213</id><snippet>{'form': AwardForm}
</snippet></ROW><ROW><id>10038213</id><snippet>{'form': form }
</snippet></ROW><ROW><id>10038490</id><snippet>input</snippet></ROW><ROW><id>10038490</id><snippet>pax&gt; cat qq.py
x = raw_input ("blah: ") # using raw_input for Python 2
print x

pax&gt; python qq.py
blah: hello&lt;ENTER&gt;
hello

pax&gt; there&lt;ENTER&gt;
bash: there: command not found

pax&gt; 
</snippet></ROW><ROW><id>10038490</id><snippet>input</snippet></ROW><ROW><id>10038490</id><snippet>def getline():
    try:
        x = raw_input ("Enter text (or eof): ")
    except EOFError:
        return ""
    return x + "\n"

text = ""
line = getline()
while line != "":
    text = text + line;
    line = getline()
print "\n===\n" + text
</snippet></ROW><ROW><id>10038490</id><snippet>pax&gt; python qq.py
Enter text (or eof): Hello there,
Enter text (or eof): 
Enter text (or eof): my name is Pax.
Enter text (or eof): &lt;CTRL-D&gt;
===
Hello there,

my name is Pax.
</snippet></ROW><ROW><id>10038640</id><snippet>itertools</snippet></ROW><ROW><id>10038640</id><snippet>import itertools

a = ["1"]
b = ["0"]
c = ["a","b","c"]
d = ["d","e","f"]

for item in itertools.product(a, b, c, d): 
    print(item)
</snippet></ROW><ROW><id>10038640</id><snippet>itertools.product</snippet></ROW><ROW><id>10038659</id><snippet>&lt;a href="http://jinja.pocoo.org/docs/api/#jinja2.Template.blocks" rel="nofollow"&gt;Template.blocks&lt;/a&gt;</snippet></ROW><ROW><id>10038919</id><snippet>__class__.__name__</snippet></ROW><ROW><id>10038919</id><snippet>try:
    new_obj = pickle.load(data_stream)
except TypeError: # if you know this was caused due to the new version of "Foo" class:
    current_foo = foomodule.Foo
    foomodule.Foo = foomodule.OldFoo
    new_obj = pickle.load(data_stream)
    foomodule.Foo = current_foo
</snippet></ROW><ROW><id>10038953</id><snippet>hours, rate = get_info()
reg_hours, overtime = calc_hours(hours)
regular_pay, overtime_pay, total_pay = calc_pay(reg_hours, overtime, rate)

print ()
print ("                     Payroll Information")
print ()
print ("Pay Rate", format(rate, '14.2f'))
print ("Regular Hours", format(reg_hours, '10.2f'))
print ("Overtime Hours", format(overtime, '10.2f'))
print ("Regular Pay", format(regular_pay, '10.2f'))
print ("Overtime Pay", format(overtime_pay, '10.2f'))
print ("Total Pay", format(total_pay, '10.2f'))
</snippet></ROW><ROW><id>10038953</id><snippet>main():</snippet></ROW><ROW><id>10038953</id><snippet>get_info()</snippet></ROW><ROW><id>10038953</id><snippet>hours, rate</snippet></ROW><ROW><id>10038953</id><snippet>hours</snippet></ROW><ROW><id>10038953</id><snippet>rate</snippet></ROW><ROW><id>10038953</id><snippet>hours, rate = get_info()
reg_hours, overtime = calc_hours(hours)
regular_pay, overtime_pay, total_pay = calc_pay(reg_hours, overtime, rate)
</snippet></ROW><ROW><id>10038953</id><snippet>calc_pay</snippet></ROW><ROW><id>10038953</id><snippet>cal_pay</snippet></ROW><ROW><id>10038953</id><snippet>How many hours did you work this week?8

Please enter your pay rate: $20

                     Payroll Information

Pay Rate          20.00
Regular Hours       8.00
Overtime Hours       0.00
Regular Pay     160.00
Overtime Pay       0.00
Total Pay     160.00
</snippet></ROW><ROW><id>10038953</id><snippet>variable = expression</snippet></ROW><ROW><id>10038953</id><snippet>pattern = '{0:15s}    {1:4.2f}'
print(pattern.format('Pay Rate', rate))
print(pattern.format('Regular Hours', reg_hours))
print(pattern.format('Overtime Hours', overtime))
print(pattern.format('Regular Pay', regular_pay))
print(pattern.format('Overtime Pay', overtime_pay))
print(pattern.format('Total Pay', total_pay))
</snippet></ROW><ROW><id>10038953</id><snippet>Pay Rate           20.00
Regular Hours      20.00
Overtime Hours     0.00
Regular Pay        400.00
Overtime Pay       0.00
Total Pay          400.00
</snippet></ROW><ROW><id>10038953</id><snippet>pattern = '{0:15s}    {1:4.2f}'
# 0 mean the blank should be filled with the first argument, 
# the colon(:) specifies the formatting of the string / number.
# s means to format a string, 15s means the string will be padded with spaces
# so it will take up exactly 15 spaces, without the number, s just mean
# use the string without any space padding
# d means format an integer, 4d mean the integer will be padded with space
# so it takes up exactly 4 spaces. f means float, and .2 mean 2 decimal point.
</snippet></ROW><ROW><id>10039323</id><snippet>a = b = c = d = e = f = g = h = i = j = None
</snippet></ROW><ROW><id>10039323</id><snippet>&gt;&gt;&gt; a = b = []
&gt;&gt;&gt; a.append(1)
&gt;&gt;&gt; a
[1]
&gt;&gt;&gt; b
[1]
</snippet></ROW><ROW><id>10039459</id><snippet>class SomeClass:
   SOME_CONST = "hello"
   SOME_OTHER_CONST = SOME_CONST + " world"
</snippet></ROW><ROW><id>10039580</id><snippet>list_of_str.append('d')
</snippet></ROW><ROW><id>10039580</id><snippet>list_of_str</snippet></ROW><ROW><id>10039580</id><snippet>append</snippet></ROW><ROW><id>10039580</id><snippet>None</snippet></ROW><ROW><id>10039580</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; list_of_str = ['a','b','c']
&gt;&gt;&gt; string.join(list_of_str + ['d'])
</snippet></ROW><ROW><id>10039580</id><snippet>import string</snippet></ROW><ROW><id>10039580</id><snippet>&gt;&gt;&gt; list_of_str = ['a','b','c']
&gt;&gt;&gt; ''.join(list_of_str + ['d'])
</snippet></ROW><ROW><id>10039671</id><snippet>mainloop()</snippet></ROW><ROW><id>10039671</id><snippet>from tkinter import Tk,Button

class Application(Tk):

    def say_hi(self):
        print('Hello world?!')

    def close_app(self):
        self.destroy()

    def create_Widgets(self):
        self.quitButton = Button(self, width=12, text='Quit', bg='tan',
                    command=self.close_app)
        self.quitButton.grid(row=0, column=0, padx=8, pady=8)

        self.helloButton = Button(self, width=12, text='Hello',
                    command=self.say_hi)
        self.helloButton.grid(row=0, column=1, padx=8, pady=8)

    def __init__(self):
        Tk.__init__(self)
        self.title('Hello world!')
        self.create_Widgets()

app = Application()
app.mainloop()
</snippet></ROW><ROW><id>10039671</id><snippet>import tkinter as tk

class Application(tk.Tk):

    def __init__(self):
        tk.Tk.__init__(self)
        self.title('Hello world!')

        self.quitButton = tk.Button(self, width=12, text='Quit', bg='tan',
                    command=self.close_app)
        self.quitButton.grid(row=0, column=0, padx=8, pady=8)

        self.helloButton = tk.Button(self, width=12, text='Hello',
                    command=self.say_hi)
        self.helloButton.grid(row=0, column=1, padx=8, pady=8)

    def say_hi(self):
        print('Hello world?!')

    def close_app(self):
        self.destroy()

app = Application()
app.mainloop()
</snippet></ROW><ROW><id>10039671</id><snippet>__init__</snippet></ROW><ROW><id>10039671</id><snippet>pack()</snippet></ROW><ROW><id>10039671</id><snippet>grid()</snippet></ROW><ROW><id>10039671</id><snippet>import tkinter as tk
import tkFont

class Application(tk.Tk):

    def __init__(self):
        tk.Tk.__init__(self)
        self.title('T-Pad')

    # Menubar

        menubar = tk.Menu(self)

        filemenu = tk.Menu(menubar, tearoff=0)
        filemenu.add_command(label="Exit", command=self.close_app)
        menubar.add_cascade(label="File", menu=filemenu)

        formatmenu = tk.Menu(menubar, tearoff=0)
        formatmenu.add_command(label="Font", command=self.show_sizeWin)
        menubar.add_cascade(label="Format", menu=formatmenu)

        self.config(menu=menubar)

    # Bold Button

        boldButton = tk.Button(self, width=12, text='Bold',
                                command=self.make_bold)
        boldButton.pack()

    # Text widget, its font and frame

        self.defaultFont = tkFont.Font(name="defFont")

        textFrame = tk.Frame(self, borderwidth=1, relief="sunken",
                             width=600, height=600)

        textFrame.grid_propagate(False) # ensures a consistent GUI size
        textFrame.pack(side="bottom", fill="both", expand=True)


        self.mText = tk.Text(textFrame, width=48, height=24, wrap='word',
                            font="defFont")
        self.mText.grid(row=0, column=0, sticky="nsew")

    # Scrollbar and config

        tScrollbar = tk.Scrollbar(textFrame, command=self.mText.yview)
        tScrollbar.grid(row=0, column=1, sticky='nsew', pady=1)

        self.mText.config(yscrollcommand=tScrollbar.set)

    # Stretchable

        textFrame.grid_rowconfigure(0, weight=1)
        textFrame.grid_columnconfigure(0, weight=1)

    # Bold Tag

        self.bold_font = tkFont.Font(self.mText, self.mText.cget("font"))
        self.bold_font.configure(weight="bold")
        self.mText.tag_configure("bt", font=self.bold_font)

    # Center main window

        self.update_idletasks()

        xp = (self.winfo_screenwidth() / 2) - (self.winfo_width() / 2) - 8
        yp = (self.winfo_screenheight() / 2) - (self.winfo_height() / 2) - 30
        self.geometry('{0}x{1}+{2}+{3}'.format(self.winfo_width(), self.winfo_height(),
                                                                                xp, yp))

    # Font Size Window (notice that self.sizeWin is given an alias)

        sizeWin = self.sizeWin = tk.Toplevel(self, bd=4, relief='ridge')

        self.sizeList = tk.Listbox(sizeWin, width=10, height=17, bd=4,
                                font=("Times", "16"), relief='sunken')

        self.sizeList.grid()

        doneButton = tk.Button(sizeWin, text='Done', command=sizeWin.withdraw)
        doneButton.grid()

        for num in range(8,25):
            self.sizeList.insert('end', num)

        sizeWin.withdraw()

        sizeWin.overrideredirect(True) # No outerframe!
        # Below is another way to prevent a TopLevel window from being destroyed.
        # sizeWin.protocol("WM_DELETE_WINDOW", self.callback)

    # Bindings
        # Double click a font size in the Listbox
        self.sizeList.bind("&lt;Double-Button-1&gt;", self.choose_size)
        self.bind_class("Text", "&lt;Control-a&gt;", self.select_all)

##    def callback(self):
##        self.sizeWin.withdraw()

    def select_all(self, event):
        self.mText.tag_add("sel","1.0","end-1c")

    def choose_size(self, event=None):
        size_retrieved = self.sizeList.get('active')
        self.defaultFont.configure(size=size_retrieved)
        self.bold_font.configure(size=size_retrieved)

    def show_sizeWin(self):
        self.sizeWin.deiconify()
        xpos = self.winfo_rootx() - self.sizeWin.winfo_width() - 8
        ypos = self.winfo_rooty()
        self.sizeWin.geometry('{0}x{1}+{2}+{3}'.format(self.sizeWin.winfo_width(),
                                                self.sizeWin.winfo_height(), xpos, ypos))

    def make_bold(self):
        try:
            current_tags = self.mText.tag_names("sel.first")
            if "bt" in current_tags:
                self.mText.tag_remove("bt", "sel.first", "sel.last")
            else:
                self.mText.tag_add("bt", "sel.first", "sel.last")
        except tk.TclError:
            pass

    def close_app(self):
        self.destroy()

app = Application()
app.mainloop()
</snippet></ROW><ROW><id>10039680</id><snippet>csv</snippet></ROW><ROW><id>10040081</id><snippet>*</snippet></ROW><ROW><id>10040081</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; a = ["1"]
&gt;&gt;&gt; b = ["0"]
&gt;&gt;&gt; c = ["a","b","c"]
&gt;&gt;&gt; d = ["d","e","f"]
&gt;&gt;&gt; lists = [a,b,c,d]
&gt;&gt;&gt; for item in itertools.product(*lists):
        print item


('1', '0', 'a', 'd')
('1', '0', 'a', 'e')
('1', '0', 'a', 'f')
('1', '0', 'b', 'd')
('1', '0', 'b', 'e')
('1', '0', 'b', 'f')
('1', '0', 'c', 'd')
('1', '0', 'c', 'e')
('1', '0', 'c', 'f')
</snippet></ROW><ROW><id>10040081</id><snippet>itertools.product(a,b,c,d)</snippet></ROW><ROW><id>10040081</id><snippet>itertools.product</snippet></ROW><ROW><id>10040081</id><snippet>[a,b,c,d]</snippet></ROW><ROW><id>10040089</id><snippet>field = {
    'headers': [u'Birthday:', u'Education', u'Job', u'Child Sex'],
    'rows': [[datetime.date(2012, 4, 6), u'A1', u'job1', u'M']
            ,[datetime.date(2012, 4, 27), u'A2', u'job2', u'F']]
}
</snippet></ROW><ROW><id>10040089</id><snippet>&lt;tr&gt;
{% for header in field.headers %}
    &lt;th&gt;{{ header }}&lt;/th&gt;
{% endfor %}
&lt;/tr&gt;
</snippet></ROW><ROW><id>10040089</id><snippet>&lt;tr&gt;    
{% for value in field.rows %}
    &lt;td&gt;{{ value }}&lt;/td&gt;
{% endfor %}
&lt;/tr&gt;
</snippet></ROW><ROW><id>10040089</id><snippet>'headers'</snippet></ROW><ROW><id>10040089</id><snippet>field.keys()</snippet></ROW><ROW><id>10040089</id><snippet>[u'Birthday:', u'Education', u'Job:', u'Child Sex:']
</snippet></ROW><ROW><id>10040089</id><snippet>'values'</snippet></ROW><ROW><id>10040089</id><snippet>2</snippet></ROW><ROW><id>10040089</id><snippet>rows = []
for i in xrange(2):
    row = []
    for k in field.keys():
        row.append(field[k][i])
    rows.append(row)
</snippet></ROW><ROW><id>10040089</id><snippet>rows = [[field[k][i] for k in field.keys()] for i in xrange(2)]
</snippet></ROW><ROW><id>10040165</id><snippet>User.objects.filter(userprofile__level__lte=0)
</snippet></ROW><ROW><id>10040165</id><snippet>User.objects.filter(userprofile__level__gte=0)
</snippet></ROW><ROW><id>10040165</id><snippet>lt</snippet></ROW><ROW><id>10040165</id><snippet>gt</snippet></ROW><ROW><id>10040189</id><snippet>def ChoosePivot(list):
    return list[0]  
def Partition(A,left,right):
    p = ChoosePivot(A)
    ....
</snippet></ROW><ROW><id>10040189</id><snippet>left&gt;0</snippet></ROW><ROW><id>10040590</id><snippet>import cStringIO
from xml.etree.ElementTree import iterparse

fakefile = cStringIO.StringIO("""&lt;temp&gt;
  &lt;email id="1" Body="abc"/&gt;
  &lt;email id="2" Body="fre"/&gt;
  &lt;email id="998349883487454359203" Body="hi"/&gt;
&lt;/temp&gt;
""")
for _, elem in iterparse(fakefile):
    if elem.tag == 'email':
        print elem.attrib['id'], elem.attrib['Body']
    elem.clear()
</snippet></ROW><ROW><id>10041334</id><snippet>var vf = 1.5;
var vi = 2;

var i : Integer := Abs(-vi);
PrintLn(i);
PrintLn(Abs(vi));

var f : Float := Abs(-vf);
PrintLn(f);
PrintLn(Abs(vf));
</snippet></ROW><ROW><id>10041334</id><snippet>2
2
1.5
1.5
</snippet></ROW><ROW><id>10041334</id><snippet>for..to</snippet></ROW><ROW><id>10041482</id><snippet>def add_parent_info(it, parent=0):
    me, num_children = it.next() # For Python 3.x use next(it)
    yield [me, num_children, parent]
    for i in range(num_children):
        for item in add_parent_info(it, me):
            yield item
</snippet></ROW><ROW><id>10041482</id><snippet>&gt;&gt;&gt; a = [[1,3],[2,4],[3,1],[4,0],[5,1],[6,0],[7,1],[8,0],[9,1],[10,0],[11,3],[12,1],[13,0],[14,1],[15,0],[16,1],[17,0],[18,4],[19,1],[20,0],[21,1],[22,0],[23,1],[24,2],[25,0],[26,0],[27,1],[28,0]]
&gt;&gt;&gt; print list(add_parent_info(iter(a)))
[[1, 3, 0], [2, 4, 1], [3, 1, 2], [4, 0, 3], [5, 1, 2], [6, 0, 5], [7, 1, 2], [8, 0, 7], [9, 1, 2], [10, 0, 9], [11, 3, 1], [12, 1, 11], [13, 0, 12], [14, 1, 11], [15, 0, 14], [16, 1, 11], [17, 0, 16], [18, 4, 1], [19, 1, 18], [20, 0, 19], [21, 1, 18], [22, 0, 21], [23, 1, 18], [24, 2, 23], [25, 0, 24], [26, 0, 24], [27, 1, 18], [28, 0, 27]]
</snippet></ROW><ROW><id>10041681</id><snippet>fig2 = matplotlib.pyplot.figure(figsize=(8.0, 5.0)) # in inches!
</snippet></ROW><ROW><id>10041681</id><snippet>fig2.add_subplot(111).set_xticks(arange(1,3,0.5)) # You can actually compute the interval You need - and substitute here
</snippet></ROW><ROW><id>10041681</id><snippet>from numpy import arange
import matplotlib
# import matplotlib as mpl
import matplotlib.pyplot
# import matplotlib.pyplot as plt

x1 = [1,2,3]
y1 = [4,5,6]
x2 = [1,2,3]
y2 = [5,5,5]

# initialization
fig2 = matplotlib.pyplot.figure(figsize=(8.0, 5.0)) # The size of the figure is specified as (width, height) in inches

# lines:
l1 = fig2.add_subplot(111).plot(x1,y1, label=r"Text $formula$", "r-", lw=2)
l2 = fig2.add_subplot(111).plot(x2,y2, label=r"$legend2$" ,"g--", lw=3)
fig2.add_subplot(111).legend((l1,l2), loc=0)

# axes:
fig2.add_subplot(111).grid(True)
fig2.add_subplot(111).set_xticks(arange(1,3,0.5))
fig2.add_subplot(111).axis(xmin=3, xmax=6) # there're also ymin, ymax
fig2.add_subplot(111).axis([0,4,3,6]) # all!
fig2.add_subplot(111).set_xlim([0,4])
fig2.add_subplot(111).set_ylim([3,6])

# labels:
fig2.add_subplot(111).set_xlabel(r"x $2^2$", fontsize=15, color = "r")
fig2.add_subplot(111).set_ylabel(r"y $2^2$")
fig2.add_subplot(111).set_title(r"title $6^4$")
fig2.add_subplot(111).text(2, 5.5, r"an equation: $E=mc^2$", fontsize=15, color = "y")
fig2.add_subplot(111).text(3, 2, unicode('f\374r', 'latin-1'))

# saving:
fig2.savefig("fig2.png")
</snippet></ROW><ROW><id>10041712</id><snippet>use File::stat;
$fn = $ARGV[0];
$time = localtime stat($fn)-&gt;mtime;
open F,"&lt;$fn";
while (&lt;F&gt;)
{
  s/\@date/\@date $time/;
  print $_;
}
close F;
</snippet></ROW><ROW><id>10041712</id><snippet>filemod.pl</snippet></ROW><ROW><id>10041712</id><snippet>INPUT_FILTER = "perl filemod.pl"
</snippet></ROW><ROW><id>10041751</id><snippet>def partitions(n):
    # base case of recursion: zero is the sum of the empty list
    if n == 0:
        yield [] # yield empty array
        return # exit function

    # modify partitions of n-1 to form partitions of n
    for p in partitions(n-1): # recursive call, get n-1 partitions
        yield [1] + p # yield array [1, p...]
        if p and (len(p) &lt; 2 or p[1] &gt; p[0]): # p not empty, and length &lt; 2 or p[1] &gt; p[0]
            yield [p[0] + 1] + p[1:] # increment first item of p and yield p
</snippet></ROW><ROW><id>10041751</id><snippet>yield</snippet></ROW><ROW><id>10041751</id><snippet>function partitions($n) {
   # base case of recursion: zero is the sum of the empty list
   if(!$n) return array(array()); # return/"yield" empty array

   # modify partitions of n-1 to form partitions of n
   $a = array(); # will hold "yielded" values
   foreach(partitions($n-1) as $p) { # recursive call
     $a[] = array_merge(array(1), $p); # "yield" array [1, p...]
     if($p &amp;&amp; (count($p) &lt; 2 || $p[1] &gt; $p[0])) { # p not empty, and length &lt; 2 or p[1] &gt; p[0]
       ++$p[0]; # increment first item of p
       $a[] = $p; # "yield" p
     }
   }
   return $a; # return all "yielded" values at once
}
</snippet></ROW><ROW><id>10041975</id><snippet>ssh user2@host2 "source myenv.sh; ./myhugeprogram.py"
</snippet></ROW><ROW><id>10041975</id><snippet>.bashrc</snippet></ROW><ROW><id>10042061</id><snippet>my_config_value = 42
rst_epilog = '.. |my_conf_val| replace:: %d' % my_config_value
</snippet></ROW><ROW><id>10042340</id><snippet>nodes = [some list]
while nodes:
  a = nodes.pop()
  for b in nodes:
    # do something
</snippet></ROW><ROW><id>10042340</id><snippet>a</snippet></ROW><ROW><id>10042340</id><snippet>b</snippet></ROW><ROW><id>10042340</id><snippet># do something</snippet></ROW><ROW><id>10042340</id><snippet>while</snippet></ROW><ROW><id>10042340</id><snippet>d = sum(((a-b)**2 for a,b in zip(pu,pv)))
</snippet></ROW><ROW><id>10042340</id><snippet>pu</snippet></ROW><ROW><id>10042340</id><snippet>pv</snippet></ROW><ROW><id>10042340</id><snippet>&gt;&gt;&gt; pu = (6,6,6)
&gt;&gt;&gt; pv = (1,3,7)
&gt;&gt;&gt; zip(pu, pv)
[(6, 1), (6, 3), (6, 7)]
&gt;&gt;&gt; [(a-b) for a,b in zip(pu, pv)]
[5, 3, -1]
&gt;&gt;&gt; [(a-b)**2 for a,b in zip(pu, pv)]
[25, 9, 1]
&gt;&gt;&gt; sum((a-b)**2 for a,b in zip(pu, pv))
35
</snippet></ROW><ROW><id>10042340</id><snippet>sum</snippet></ROW><ROW><id>10042408</id><snippet>from datetime import datetime
from datetime import timedelta

now = datetime.now()
time_changed_state = now - timedelta(hours=2)
time_delay = 0
time_arrival = time_changed_state + timedelta(minutes=time_delay)

if now &lt; time_arrival:
   print 'something'
elif now &gt;= time_arrival:
   print 'something different'
</snippet></ROW><ROW><id>10042411</id><snippet>()</snippet></ROW><ROW><id>10042411</id><snippet> import re

 s = "192.168.1.43,Marry,had ,a,alittle,lamb11"
 text = re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3},(.*)", s)[0]
 // text now holds the string Marry,had ,a,alittle,lamb11
</snippet></ROW><ROW><id>10042411</id><snippet>re.match(".*\d$", process_str)
</snippet></ROW><ROW><id>10042411</id><snippet>.*</snippet></ROW><ROW><id>10042411</id><snippet>$</snippet></ROW><ROW><id>10042603</id><snippet>-</snippet></ROW><ROW><id>10042603</id><snippet>_</snippet></ROW><ROW><id>10042603</id><snippet>for k, v in headers.items():
    setattr(self, k.lower().replace('-', '_'), v)
</snippet></ROW><ROW><id>10042603</id><snippet>iteritems</snippet></ROW><ROW><id>10042603</id><snippet>self._headers</snippet></ROW><ROW><id>10042603</id><snippet>__getattr__</snippet></ROW><ROW><id>10042603</id><snippet>__setattr__</snippet></ROW><ROW><id>10043002</id><snippet>RequestContext</snippet></ROW><ROW><id>10043002</id><snippet>STATIC_URL</snippet></ROW><ROW><id>10043041</id><snippet>&gt;&gt;&gt; re.findall(r"\w+@\w+\.(?:com|in)",mail)
['something@redddf.com']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10043783</id><snippet>globals(main_method.attr("__dict__"));
</snippet></ROW><ROW><id>10043783</id><snippet>globals = main_method.attr("__dict__");
</snippet></ROW><ROW><id>10043813</id><snippet>import cProfile
import cStringIO
import logging
import pstats

def webapp_add_wsgi_middleware(app):

  def profiling_wrapper(environ, start_response):
    profile = cProfile.Profile()
    response = profile.runcall(app, environ, start_response)
    stream = cStringIO.StringIO()
    stats = pstats.Stats(profile, stream=stream)
    stats.sort_stats('cumulative').print_stats()
    logging.info('Profile data:\n%s', stream.getvalue())
    return response

  return profiling_wrapper
</snippet></ROW><ROW><id>10043957</id><snippet>+</snippet></ROW><ROW><id>10043957</id><snippet>''.join(a, b)</snippet></ROW><ROW><id>10043957</id><snippet>+</snippet></ROW><ROW><id>10043957</id><snippet>join</snippet></ROW><ROW><id>10043957</id><snippet>a + b + c + ...</snippet></ROW><ROW><id>10043957</id><snippet>join</snippet></ROW><ROW><id>10044370</id><snippet>pygame.transform.smoothscale</snippet></ROW><ROW><id>10044370</id><snippet>blit</snippet></ROW><ROW><id>10044439</id><snippet>worker.wait()</snippet></ROW><ROW><id>10044439</id><snippet>from PySide import QtCore
import time, sys

class MyWorkerThread(QtCore.QThread):
    message = QtCore.Signal(str)

    def __init__(self, id, parent=None):
        super(MyWorkerThread, self).__init__(parent)
        self.id = id

    def run(self):
        for i in range(10):
            self.message.emit("%d: %d" % (self.id, i))
            time.sleep(0.2)

class MainProgram():
    def __init__(self, parent=None):
        self.threads = []

        self.addWorker(MyWorkerThread(1))
        self.addWorker(MyWorkerThread(2))

    def addWorker(self, worker):
        worker.message.connect(self.printMessage, QtCore.Qt.QueuedConnection)
        # connect the finished signal to method so that we are notified
        worker.finished.connect(self.workersFinished)
        self.threads.append(worker)

    def startWorkers(self):
        for worker in self.threads:
            worker.start()
            # no wait, no finished. you start the threads and leave.

    def workersFinished(self):
        if all(worker.isFinished() for worker in self.threads):
            # wait until all the threads finished
            QtCore.QCoreApplication.instance().quit()

    @QtCore.Slot(str)
    def printMessage(self, text):
        sys.stdout.write(text+'\n')
        sys.stdout.flush()

if __name__ == '__main__':
    app = QtCore.QCoreApplication(sys.argv)
    m = MainProgram()
    m.startWorkers()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>10044493</id><snippet>set PYTHONPATH=/somedir/pythonsrc;/anotherdir/pythonsrc &amp;&amp; python.exe mymodule.py
</snippet></ROW><ROW><id>10044493</id><snippet>PYTHONPATH=/somedir/pythonsrc:/anotherdir/pythonsrc python mymodule.py
</snippet></ROW><ROW><id>10044530</id><snippet>__init__.py</snippet></ROW><ROW><id>10044530</id><snippet>from &lt;foldername&gt;  import *</snippet></ROW><ROW><id>10044530</id><snippet>__import__</snippet></ROW><ROW><id>10044530</id><snippet>import os
for name in os.listdir("plugins"):
    if name.endswith(".py"):
          #strip the extension
         module = name[:-3]
         # set the module name in the current global name space:
         globals()[module] = __import__(os.path.join("plugins", name)
</snippet></ROW><ROW><id>10044530</id><snippet>__import__</snippet></ROW><ROW><id>10044533</id><snippet>object</snippet></ROW><ROW><id>10044533</id><snippet>__bases__</snippet></ROW><ROW><id>10044831</id><snippet>read()</snippet></ROW><ROW><id>10044831</id><snippet>data = response.read(10 *1024 *1024) 
</snippet></ROW><ROW><id>10044992</id><snippet>foo = 1
_bar = 2
</snippet></ROW><ROW><id>10044992</id><snippet>&gt;&gt;&gt; from A import *
&gt;&gt;&gt; foo
1
&gt;&gt;&gt; _bar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name '_bar' is not defined
</snippet></ROW><ROW><id>10044992</id><snippet>import *</snippet></ROW><ROW><id>10044992</id><snippet>__all__</snippet></ROW><ROW><id>10044992</id><snippet>__all__ = ['foo', '_bar']

foo = 1
_bar = 2
</snippet></ROW><ROW><id>10044992</id><snippet>&gt;&gt;&gt; from A import *
&gt;&gt;&gt; (foo, _bar)
(1, 2)
</snippet></ROW><ROW><id>10044992</id><snippet>__all__</snippet></ROW><ROW><id>10044992</id><snippet>help()</snippet></ROW><ROW><id>10044992</id><snippet>pydoc</snippet></ROW><ROW><id>10044992</id><snippet>$ pydoc A | cat
 ...
DATA
    __all__ = ['foo', '_bar']
    _bar = 2
    foo = 1
 ...
</snippet></ROW><ROW><id>10045009</id><snippet>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r = myRouter()
t.render(router =r)
</snippet></ROW><ROW><id>10045346</id><snippet>import time
last_update = time.time()

while 1:
   # the rest of your while loop as usual
   now = time.time()
   if now - last_update &gt; 300:
       # you've waited 300 seconds
       # check feeds or whatever 
       last_update = now
</snippet></ROW><ROW><id>10045717</id><snippet>frozenset</snippet></ROW><ROW><id>10045717</id><snippet>items</snippet></ROW><ROW><id>10045717</id><snippet>iteritems</snippet></ROW><ROW><id>10045717</id><snippet>&gt;&gt;&gt;&gt; frozenset(Counter([1, 1, 1, 2, 3, 3, 4]).iteritems())
frozenset([(3, 2), (1, 3), (4, 1), (2, 1)])
&gt;&gt;&gt;&gt; hash(frozenset(Counter([1, 1, 1, 2, 3, 3, 4]).iteritems()))
-3071743570178645657
&gt;&gt;&gt;&gt; hash(frozenset(Counter([1, 1, 1, 2, 3, 4]).iteritems()))
-6559486438209652990
</snippet></ROW><ROW><id>10045717</id><snippet>frozenset</snippet></ROW><ROW><id>10045717</id><snippet>frozenset</snippet></ROW><ROW><id>10045717</id><snippet>frozenset_hash</snippet></ROW><ROW><id>10045717</id><snippet>set_next</snippet></ROW><ROW><id>10045923</id><snippet>type=xml</snippet></ROW><ROW><id>10045923</id><snippet>text/xml</snippet></ROW><ROW><id>10045923</id><snippet>application/xml</snippet></ROW><ROW><id>10045923</id><snippet>parse</snippet></ROW><ROW><id>10045923</id><snippet>parse</snippet></ROW><ROW><id>10045923</id><snippet>import urllib2
from xml.etree import ElementTree

url = 'http://api.ean.com/ean-services/rs/hotel/v3/list?type=xml&amp;apiKey=czztdaxrhfbusyp685ut6g6v&amp;cid=8123&amp;locale=en_US&amp;city=Dallas%20&amp;stateProvinceCode=TX&amp;countryCode=US&amp;minorRev=12'
request = urllib2.Request(url, headers={"Accept" : "application/xml"})
u = urllib2.urlopen(request)
tree = ElementTree.parse(u)
rootElem = tree.getroot()
hotel_list = rootElem.findall("HotelList")  
print hotel_list
</snippet></ROW><ROW><id>10045923</id><snippet>[&lt;Element 'HotelList' at 0x248cd90&gt;]
</snippet></ROW><ROW><id>10045923</id><snippet>Request</snippet></ROW><ROW><id>10045923</id><snippet>Accept</snippet></ROW><ROW><id>10046207</id><snippet>query = query % db.literal(args)
</snippet></ROW><ROW><id>10046207</id><snippet>args</snippet></ROW><ROW><id>10046207</id><snippet>()</snippet></ROW><ROW><id>10046303</id><snippet>fill</snippet></ROW><ROW><id>10046358</id><snippet>iglob()</snippet></ROW><ROW><id>10046358</id><snippet>StopIteration</snippet></ROW><ROW><id>10046358</id><snippet>StopIteration</snippet></ROW><ROW><id>10046358</id><snippet>next()</snippet></ROW><ROW><id>10046358</id><snippet>for file in glob.iglob('*.txt'):
    # whatever
</snippet></ROW><ROW><id>10046358</id><snippet>StopIteration</snippet></ROW><ROW><id>10046358</id><snippet>return next(dir_list, None)   # return first item of dir_list,
                              # or None if no files match
</snippet></ROW><ROW><id>10046634</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; c =boto.connect_s3()
&gt;&gt;&gt; fp = open('myfiletoupload.txt')
&gt;&gt;&gt; content_length = len(fp.read())
&gt;&gt;&gt; c.generate_url(300, 'PUT', 'test-1332789015', 'foobar', headers={'Content-Length': str(content_length)}, force_http=True)
'http://test-1332789015.s3.amazonaws.com/foobar?Signature=oUARG45mR95utXsiQYRJNiCI4x4%3D&amp;Expires=1333731456&amp;AWSAccessKeyId=AKIAJOTCCJRP4C3NSMYA&amp;Content-Length=16'
</snippet></ROW><ROW><id>10046634</id><snippet>$ curl --request PUT --upload-file myfiletoupload.txt "http://test-1332789015.s3.amazonaws.com/foobar?Signature=oUARG45mR95utXsiQYRJNiCI4x4%3D&amp;Expires=1333731456&amp;AWSAccessKeyId=AKIAJOTCCJRP4C3NSMYA&amp;Content-Length=16"
</snippet></ROW><ROW><id>10046848</id><snippet>_get_post_data</snippet></ROW><ROW><id>10046848</id><snippet>b = bytes('a')
print type(b)
</snippet></ROW><ROW><id>10046848</id><snippet>b = bytes('a')
print(type(b))
</snippet></ROW><ROW><id>10047169</id><snippet>sys.argv</snippet></ROW><ROW><id>10047169</id><snippet>import sys</snippet></ROW><ROW><id>10047169</id><snippet># If there is an argument passed to your file
if len(sys.argv) &gt; 1:
    # argv[1] has your filename
    filename = sys.argv[1]
    print (filename)

# Output...
# new-host:~ yanwchan$ python3.2 test.py text.txt
# text.txt
</snippet></ROW><ROW><id>10047169</id><snippet>argv[0]</snippet></ROW><ROW><id>10047169</id><snippet>test.py</snippet></ROW><ROW><id>10047169</id><snippet>argv[1]</snippet></ROW><ROW><id>10047169</id><snippet>text.txt</snippet></ROW><ROW><id>10047169</id><snippet>argparse</snippet></ROW><ROW><id>10047635</id><snippet>import math

func_dict = {'square': lambda x: x**2,
             'cube': lambda x: x**3,
             'log': math.log}

def transform(value, transformation_list):
    for func_name in transformation_list:
        value = func_dict[func_name](value)
    return value
</snippet></ROW><ROW><id>10047635</id><snippet>&gt;&gt;&gt; transform(math.e, ['cube', 'log', 'square'])
9.0
</snippet></ROW><ROW><id>10047784</id><snippet>cats = [{'parent_id': False, 'id': 1, 'title': u'All'},
        {'parent_id': False, 'id': 2, 'title': u'Toys'},
        {'parent_id': 2, 'id': 3, 'title': u'Toypads'},
        {'parent_id': 3, 'id': 4, 'title': u'Green'},]

cats_dict = dict((cat['id'], cat) for cat in cats)

for cat in cats:
    if cat['parent_id'] != False:
        parent = cats_dict[cat['parent_id']]
        parent.setdefault('children', []).append(cat)

cats = [cat for cat in cats if cat['parent_id'] == False]
</snippet></ROW><ROW><id>10047784</id><snippet>None</snippet></ROW><ROW><id>10047784</id><snippet>False</snippet></ROW><ROW><id>10047856</id><snippet>errno</snippet></ROW><ROW><id>10047856</id><snippet>.copytree()</snippet></ROW><ROW><id>10047856</id><snippet>shutil.copy</snippet></ROW><ROW><id>10047856</id><snippet>import shutil, errno

def copyFile(src, dst):
    try:
        shutil.copytree(src, dst)
    # Depend what you need here to catch the problem
    except OSError as exc: 
        # File already exist
        if exc.errno == errno.EEXIST:
            shutil.copy(src, dst)
        # The dirtory does not exist
        if exc.errno == errno.ENOENT:
            shutil.copy(src, dst)
        else:
            raise
</snippet></ROW><ROW><id>10047856</id><snippet>.copy()</snippet></ROW><ROW><id>10047856</id><snippet>distutils.dir_util.copy_tree</snippet></ROW><ROW><id>10047895</id><snippet>event.isAutoRepeat()</snippet></ROW><ROW><id>10048143</id><snippet>re.findall</snippet></ROW><ROW><id>10048143</id><snippet>&gt;&gt;&gt; email_reg = re.compile(r'[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+')
&gt;&gt;&gt; email_reg.findall('I know my best friend mailto:foo@foo.com!')
['foo@foo.com']
</snippet></ROW><ROW><id>10048143</id><snippet>findall</snippet></ROW><ROW><id>10048143</id><snippet>&gt;&gt;&gt; email_reg.findall('Text text foo@foo.com, text text, baz@baz.com!')
['foo@foo.com', 'baz@baz.com']
</snippet></ROW><ROW><id>10048168</id><snippet>O(n)</snippet></ROW><ROW><id>10048168</id><snippet>lst = [1,2,3]
random.shuffle(lst)
for x in lst:
  # ...
</snippet></ROW><ROW><id>10048168</id><snippet>pop()</snippet></ROW><ROW><id>10048168</id><snippet>while lst:
  x = lst.pop()
  # do something with the element      
</snippet></ROW><ROW><id>10048242</id><snippet>g</snippet></ROW><ROW><id>10048242</id><snippet>f</snippet></ROW><ROW><id>10048242</id><snippet>func2</snippet></ROW><ROW><id>10048242</id><snippet>f</snippet></ROW><ROW><id>10048242</id><snippet>g</snippet></ROW><ROW><id>10048242</id><snippet>f</snippet></ROW><ROW><id>10048242</id><snippet>g</snippet></ROW><ROW><id>10048242</id><snippet>g</snippet></ROW><ROW><id>10048242</id><snippet>f</snippet></ROW><ROW><id>10048242</id><snippet>sandbox = {}

with open("functions.pickle", "rb") as funcfile:
    while True:
        try:
            code = marshal.load(funcfile)
        except EOFError:
             break
        sandbox[code.co_name] = types.FunctionType(code, sandbox, code.co_name)
</snippet></ROW><ROW><id>10048242</id><snippet>globals()</snippet></ROW><ROW><id>10048242</id><snippet>f()</snippet></ROW><ROW><id>10048242</id><snippet>g</snippet></ROW><ROW><id>10048242</id><snippet>sandbox["g"]</snippet></ROW><ROW><id>10048242</id><snippet>f</snippet></ROW><ROW><id>10048242</id><snippet>sandbox["f"]("blah")</snippet></ROW><ROW><id>10048273</id><snippet>def fetch_unique_tuples(original_set, tuple_size):
    from itertools import combinations

    good = []
    used = []
    for i in combinations(original_set,tuple_size):
        lst = list([tuple(sorted(j)) for j in combinations(i,2)])
        if not any(l in used for l in lst):
            used.extend(lst)
            good.append(tuple(sorted(i)))
    return sorted(good)

elements = ['CAGG', 'CTTC', 'ACCT', 'TGCA', 'CCTG', 'CAAA', 'TGCC', 'ACTT', 'TAAT', 'CTTG', 'CGGC', 'GGCC', 'TCCT', 'ATCC', 'ACAG', 'TGAA', 'TTTG', 'ACAA', 'TGTC', 'TGGA', 'CTGC', 'GCTC', 'AGGA', 'TGCT', 'GCGC', 'GCGG', 'AAAG', 'GCTG', 'GCCG', 'ACCA', 'CTCC', 'CACG', 'CATA', 'GGGA', 'CGAG', 'CCCC', 'GGTG', 'AAGT', 'CCAC', 'AACA', 'AATA', 'CGAC', 'GGAA', 'TACC', 'AGTT', 'GTGG', 'CGCA', 'GGGG', 'GAGA', 'AGCC', 'ACCG', 'CCAT', 'AGAC', 'GGGT', 'CAGC', 'GATG', 'TTCG']
uniques = fetch_unique_tuples(elements, 3)
print len(uniques)
</snippet></ROW><ROW><id>10048290</id><snippet>from datetime import datetime, time
now = datetime.now()
now_time = now.time()
if now_time &gt;= time(10,30) and now_time &lt;= time(16,30):
    print "yes, within the interval"
</snippet></ROW><ROW><id>10048290</id><snippet>if time(10,30) &lt;= now.time() &lt;= time(16,30):        
    print "yes, within the interval"
</snippet></ROW><ROW><id>10048290</id><snippet>or</snippet></ROW><ROW><id>10048301</id><snippet>def same_structure(a, b):
    if isinstance(a, list) and isinstance(b, list) and len(a) == len(b):
        return all(same_structure(A, B) for A, B in zip(a, b))
    return (not isinstance(a, list) and not isinstance(b, list))
</snippet></ROW><ROW><id>10048301</id><snippet>a</snippet></ROW><ROW><id>10048301</id><snippet>b</snippet></ROW><ROW><id>10048301</id><snippet>a</snippet></ROW><ROW><id>10048301</id><snippet>b</snippet></ROW><ROW><id>10048301</id><snippet>a</snippet></ROW><ROW><id>10048301</id><snippet>b</snippet></ROW><ROW><id>10048301</id><snippet>a</snippet></ROW><ROW><id>10048301</id><snippet>b</snippet></ROW><ROW><id>10048301</id><snippet>zip(a, b)</snippet></ROW><ROW><id>10048301</id><snippet>same_structure()</snippet></ROW><ROW><id>10048301</id><snippet>all()</snippet></ROW><ROW><id>10048301</id><snippet>all()</snippet></ROW><ROW><id>10048301</id><snippet>match = True
for A, B in zip(a, b):
    if not same_structure(A, B):
        match = False
        break
return match
</snippet></ROW><ROW><id>10048301</id><snippet>print '#4'</snippet></ROW><ROW><id>10048301</id><snippet>def same_structure(a,b):
    if not is_list(a) and not is_list(b):
        print '#1'
        return True
    else:
        if is_list(a) and is_list(b):
            print '#2'
            if len(a) != len(b):
                print '#3'
                return False
            if len(a) == len(b):
                print '#4'
                for e in range(len(a)):
                    print 'e = ', e, 'a[e]= ', a[e], 'b[e]=', b[e]
                    if not same_structure(a[e], b[e]):
                        return False
                return True        
        else:
            return False
</snippet></ROW><ROW><id>10048320</id><snippet>from datetime import timedelta

start_date = timezone.now().date()
end_date = start_date + timedelta( days=1 ) 
Entry.objects.filter(created__range=(start_date, end_date))
</snippet></ROW><ROW><id>10048425</id><snippet>nx.disjoint_union</snippet></ROW><ROW><id>10048425</id><snippet>B[n] != G[n]</snippet></ROW><ROW><id>10048425</id><snippet>B</snippet></ROW><ROW><id>10048425</id><snippet>A</snippet></ROW><ROW><id>10048425</id><snippet>G</snippet></ROW><ROW><id>10048425</id><snippet>import networkx as nx
def my_bipartite_geom_graph(a, b, radius, dim):

    G=nx.Graph()
    G.add_nodes_from(range(a+b))
    for n in range(a):
        G.node[n]['pos']=[random.random() for i in range(0,dim)]
        G.node[n]['type'] = 'A'

    for n in range(a, a+b):
        G.node[n]['pos']=[random.random() for i in range(0,dim)]
        G.node[n]['type'] = 'B'

    nodesa = [(node, data) for node, data in G.nodes(data=True) if data['type'] == 'A']
    nodesb = [(node, data) for node, data in G.nodes(data=True) if data['type'] == 'B']

    while nodesa:
        u,du = nodesa.pop()
        pu = du['pos']
        for v,dv in nodesb:
            pv = dv['pos']
            d = sum(((a-b)**2 for a,b in zip(pu,pv)))
            if d &lt;= radius**2:
                G.add_edge(u,v)
    return G
</snippet></ROW><ROW><id>10048579</id><snippet>"\xe1"</snippet></ROW><ROW><id>10048579</id><snippet>unicode</snippet></ROW><ROW><id>10048579</id><snippet>&gt;&gt;&gt; "Mil\xc3\xa1n".decode('utf-8')
u'Mil\xe1n'
</snippet></ROW><ROW><id>10048579</id><snippet>"\xc3\xa1"</snippet></ROW><ROW><id>10048713</id><snippet>codecs.open</snippet></ROW><ROW><id>10048713</id><snippet>write</snippet></ROW><ROW><id>10048713</id><snippet>ascii</snippet></ROW><ROW><id>10048713</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>10048713</id><snippet>#expfile = codecs.open('testunicode.xml',"w","utf-8-sig")
ET.ElementTree(testtag).write('testunicode.xml',encoding="UTF-8",xml_declaration=True)
#expfile.close()
</snippet></ROW><ROW><id>10048777</id><snippet>c.order_history</snippet></ROW><ROW><id>10048777</id><snippet>product_info</snippet></ROW><ROW><id>10048777</id><snippet>[{'product_info': order['product_info']} for order in c.order_history]
</snippet></ROW><ROW><id>10048834</id><snippet>fnmatch.translate</snippet></ROW><ROW><id>10048834</id><snippet>re.search</snippet></ROW><ROW><id>10048834</id><snippet>import fnmatch
import re

s = '/path/eggs/foo/bar'
pattern = "eggs/*"

re.search(fnmatch.translate(pattern), s)
# &lt;_sre.SRE_Match object at 0x10049e988&gt;
</snippet></ROW><ROW><id>10048834</id><snippet>translate</snippet></ROW><ROW><id>10048834</id><snippet>s = '/path/to/hidden/.file'
isHiddenFile = re.search(fnmatch.translate('.*'), s)
if not isHiddenFile:
    # do something with it
</snippet></ROW><ROW><id>10048844</id><snippet>def linreg(X, Y):
    """
    return a,b in solution to y = ax + b such that root mean square distance between trend line and original points is minimized
    """
    N = len(X)
    Sx = Sy = Sxx = Syy = Sxy = 0.0
    for x, y in map(None, X, Y):
        Sx = Sx + x
        Sy = Sy + y
        Sxx = Sxx + x*x
        Syy = Syy + y*y
        Sxy = Sxy + x*y
    det = Sxx * N - Sx * Sx
    return (Sxy * N - Sy * Sx)/det, (Sxx * Sy - Sx * Sxy)/det


x = [12, 34, 29, 38, 34, 51, 29, 34, 47, 34, 55, 94, 68, 81]
a,b = linreg(range(len(x)),x)  //your x,y are switched from standard notation
</snippet></ROW><ROW><id>10048844</id><snippet>extrapolatedtrendline=[a*index + b for index in range(20)] //replace 20 with desired trend length
</snippet></ROW><ROW><id>10048921</id><snippet>solar_system.py</snippet></ROW><ROW><id>10048988</id><snippet>ctypes</snippet></ROW><ROW><id>10048988</id><snippet>int</snippet></ROW><ROW><id>10048988</id><snippet>pointer</snippet></ROW><ROW><id>10048988</id><snippet>int</snippet></ROW><ROW><id>10048988</id><snippet>from ctypes import *
x = CDLL('MathFuncsDll')
add = x.Add
add.restype = c_double
add.argtypes = [c_double,c_double]
print add(1.0,2.5)
</snippet></ROW><ROW><id>10048988</id><snippet>3.5
</snippet></ROW><ROW><id>10049021</id><snippet>repeatfunc</snippet></ROW><ROW><id>10049021</id><snippet>itertools</snippet></ROW><ROW><id>10049021</id><snippet>def repeatfunc(func, times=None, *args):
    """Repeat calls to func with specified arguments.

    Example:  repeatfunc(random.random)
    """
    if times is None:
        return starmap(func, repeat(args))
    return starmap(func, repeat(args, times))
</snippet></ROW><ROW><id>10049021</id><snippet>func</snippet></ROW><ROW><id>10049021</id><snippet>repeat</snippet></ROW><ROW><id>10049021</id><snippet>range</snippet></ROW><ROW><id>10049105</id><snippet>sys.argv</snippet></ROW><ROW><id>10049105</id><snippet>python donuts.py 4</snippet></ROW><ROW><id>10049105</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>10049105</id><snippet>'4'</snippet></ROW><ROW><id>10049105</id><snippet>'4' &lt; 10</snippet></ROW><ROW><id>10049105</id><snippet>4 &lt; 10</snippet></ROW><ROW><id>10049105</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>10049105</id><snippet>def main():
    donuts(int(sys.argv[1]))
</snippet></ROW><ROW><id>10049105</id><snippet>def main():
    try:
        donuts(int(sys.argv[1]))
    except IndexError:
        print 'Missing argument'
    except ValueError:
        print 'Invalid argument'
</snippet></ROW><ROW><id>10049253</id><snippet>self.txt1 = testPanel(self.mainPanel)
self.txt2 = testPanel(self.mainPanel)
</snippet></ROW><ROW><id>10049360</id><snippet>foo_list = [ (ele - k) / j for ele in foo_list]
</snippet></ROW><ROW><id>10049360</id><snippet>val = f(val)</snippet></ROW><ROW><id>10049360</id><snippet>ele</snippet></ROW><ROW><id>10049488</id><snippet>TaskSet</snippet></ROW><ROW><id>10049488</id><snippet>process_doc</snippet></ROW><ROW><id>10049488</id><snippet>results.ready()</snippet></ROW><ROW><id>10049488</id><snippet>False</snippet></ROW><ROW><id>10049488</id><snippet>results.completed_count()</snippet></ROW><ROW><id>10049488</id><snippet>@task(ignore_result=True)
def copy_media(path):
    copy_media.update_state(state=STARTED, meta={'total': total, 'done': done})
    documents = Document.objects.all()
    total = documents.count()
    copy_media.update_state(state=STARTED, meta={'total': total, 'done': done})
    job = TaskSet(tasks=[process_doc.subtask((document, path))
                         for document in documents])
    results = job.apply_async()
    doc_name = ''
    while not results.ready():
        done = results.completed_count()
        if done:
            last = done - 1
            for idx in xrange(last, -1, -1):
                if results[idx].ready():
                    doc_name = results[idx].result
                    break
        copy_media.update_state(state=STARTED, meta={'total': total, 'done': done, 'doc-name': doc_name})
        time.sleep(0.25)

@task()
def process_doc(document, path):
    # Do some stuff
    return document
</snippet></ROW><ROW><id>10049493</id><snippet>def main():
  ...
  r = do_something()
  ...
  return r

def two(r):
  ...
  do_something_else(r)
  ...

r = main()
two(r)
</snippet></ROW><ROW><id>10049493</id><snippet>class Main():
  def main(self):
    ...
    self.r = do_something()
    ...

  def two(self):
    ...
    do_something_else(self.r)
    ...

main = Main()
main.main()
main.two()
</snippet></ROW><ROW><id>10049545</id><snippet>manager = forms.CharField(required=False, widget=Select(choices=(('', '----------'),) + LIST), label='Their Position?')
</snippet></ROW><ROW><id>10049664</id><snippet>from Tkinter import *

class MyDialog:

    def __init__(self, parent):

        top = self.top = Toplevel(parent)

        Label(top, text="Value").pack()

        self.e = Entry(top)
        self.e.pack(padx=5)

        b = Button(top, text="OK", command=self.ok)
        b.pack(pady=5)

    def ok(self):

        print "value is", self.e.get()

        self.top.destroy()


root = Tk()
Button(root, text="Hello!").pack()
root.update()

d = MyDialog(root)

root.wait_window(d.top)
root.mainloop()
</snippet></ROW><ROW><id>10049768</id><snippet>class DictModel(db.Model):
    def to_dict(self):
       return dict([(p, unicode(getattr(self, p))) for p in self.properties()])


class Match(DictModel):
    date_time = db.DateTimeProperty()
    team1 = db.StringProperty()
    team2 = db.StringProperty()
    venue = db.StringProperty()
    result = db.IntegerProperty()
</snippet></ROW><ROW><id>10049768</id><snippet>import json
self.response.out.write(json.dumps([m.to_dict() for m in matches]))
</snippet></ROW><ROW><id>10049806</id><snippet>A = {"x": 3,"y":4}
this_int = NewInt(**A)
</snippet></ROW><ROW><id>10049806</id><snippet>complex(3,4)</snippet></ROW><ROW><id>10049806</id><snippet>3+4j</snippet></ROW><ROW><id>10050043</id><snippet>from pyramid.httpexceptions import HTTPFound

def form_received_here(request):
    # do stuff here
    return HTTPFound('http://example.com')
</snippet></ROW><ROW><id>10050043</id><snippet>Location</snippet></ROW><ROW><id>10050043</id><snippet>http://example.com</snippet></ROW><ROW><id>10050169</id><snippet>isinstance(direction, int)</snippet></ROW><ROW><id>10050169</id><snippet>import math

def rotate_vector(vector, axis, direction):
    try:
        x, y, z = vector
    except TypeError:
        raise TypeError("Invalid vector {0}".format(vector))

    valid_axes = {(1,0,0), (-1,0,0), (0,1,0), (0,-1,0), (0,0,1), (0,0,-1)}

    if not axis in valid_axes:
        raise ValueError("Invalid axis {0}".format(axis))

    try:
        ax, ay, az = axis
    except TypeError:
        raise TypeError("Invalid axis {0}".format(axis))

    # do math to rotate the vector
    # rotated = ...

    try:
        # You really only need the sign of the direction
        return math.copysign(rotated, direction)
        # or:
        return rotated * math.copysign(1, direction)
    except TypeError:
        raise TypeError("Invalid direction {0}".format(direction))
</snippet></ROW><ROW><id>10050169</id><snippet>0</snippet></ROW><ROW><id>10050169</id><snippet>1</snippet></ROW><ROW><id>10050169</id><snippet>ValueError</snippet></ROW><ROW><id>10050169</id><snippet>vector</snippet></ROW><ROW><id>10050169</id><snippet>axis</snippet></ROW><ROW><id>10050169</id><snippet>axes</snippet></ROW><ROW><id>10050169</id><snippet>axis</snippet></ROW><ROW><id>10050253</id><snippet>cwd</snippet></ROW><ROW><id>10050253</id><snippet>(defun cwd (&amp;optional dir)
  "Change directory and set default pathname"
  (cond
   ((not (null dir))
    (when (and (typep dir 'logical-pathname)
           (translate-logical-pathname dir))
      (setq dir (translate-logical-pathname dir)))
    (when (stringp dir)
      (setq dir (parse-namestring dir)))
    #+allegro (excl:chdir dir)
    #+clisp (#+lisp=cl ext:cd #-lisp=cl lisp:cd dir)
    #+(or cmu scl) (setf (ext:default-directory) dir)
    #+cormanlisp (ccl:set-current-directory dir)
    #+(and mcl (not openmcl)) (ccl:set-mac-default-directory dir)
    #+openmcl (ccl:cwd dir)
    #+gcl (si:chdir dir)
    #+lispworks (hcl:change-directory dir)
    #+sbcl (sb-posix:chdir dir)
    (setq cl:*default-pathname-defaults* dir))
   (t
    (let ((dir
       #+allegro (excl:current-directory)
       #+clisp (#+lisp=cl ext:default-directory #-lisp=cl lisp:default-directory)
       #+(or cmu scl) (ext:default-directory)
       #+sbcl (sb-unix:posix-getcwd/)
       #+cormanlisp (ccl:get-current-directory)
       #+lispworks (hcl:get-working-directory)
       #+mcl (ccl:mac-default-directory)
       #-(or allegro clisp cmu scl cormanlisp mcl sbcl lispworks) (truename ".")))
      (when (stringp dir)
    (setq dir (parse-namestring dir)))
      dir))))
</snippet></ROW><ROW><id>10050253</id><snippet>(cwd #p"../b/")
(external-program:start "python" '("file.py") :output *pythins-stdout-stream* :input *pythons-stdin-stream*)
(cwd #p"../a/")
</snippet></ROW><ROW><id>10050253</id><snippet>cd</snippet></ROW><ROW><id>10050253</id><snippet>python file.py &amp;</snippet></ROW><ROW><id>10050253</id><snippet>external-program</snippet></ROW><ROW><id>10050253</id><snippet>cwd</snippet></ROW><ROW><id>10050253</id><snippet>external-program:run</snippet></ROW><ROW><id>10050253</id><snippet>external-program:start</snippet></ROW><ROW><id>10050429</id><snippet>&gt;&gt;&gt; a = b = c = 2
&gt;&gt;&gt; a
2
&gt;&gt;&gt; b
2
&gt;&gt;&gt; c
2
</snippet></ROW><ROW><id>10050429</id><snippet>&gt;&gt;&gt; a = 'foo' = 'bar'
  File "&lt;input&gt;", line 1
SyntaxError: can't assign to literal

&gt;&gt;&gt; a = {}['foo'] = 'bar'
&gt;&gt;&gt; a
'bar'
</snippet></ROW><ROW><id>10050429</id><snippet>&gt;&gt;&gt; a = [1, 2] = [3, 4]
  File "&lt;input&gt;", line 1
SyntaxError: can't assign to literal
</snippet></ROW><ROW><id>10050429</id><snippet>&gt;&gt;&gt; a = [1, 2][:] = [3, 4]
&gt;&gt;&gt; a
[3, 4]
</snippet></ROW><ROW><id>10050429</id><snippet>&gt;&gt;&gt; a = [[], []] = [{}, {}]
&gt;&gt;&gt; a
[{}, {}]
</snippet></ROW><ROW><id>10050429</id><snippet>&gt;&gt;&gt; a = [b, c] = 3, 4
&gt;&gt;&gt; b
3
&gt;&gt;&gt; c
4
</snippet></ROW><ROW><id>10050429</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 2
&gt;&gt;&gt; a,b = b,a = a,b
&gt;&gt;&gt; a
2
&gt;&gt;&gt; b
1
</snippet></ROW><ROW><id>10050429</id><snippet>&gt;&gt;&gt; a, b = 'a', 'b'
&gt;&gt;&gt; a, b = b, a = a, b = b, a
&gt;&gt;&gt; a
'b'
&gt;&gt;&gt; b
'a'
&gt;&gt;&gt; a, b = b, a = b, a
&gt;&gt;&gt; a
'a'
&gt;&gt;&gt; b
'b'
</snippet></ROW><ROW><id>10050732</id><snippet>&gt;&gt;&gt; a = numpy.array([[1,2], [2,3], [4,9], [1,5], [1,7]])
&gt;&gt;&gt; numpy.average(a, axis=-1)
array([ 1.5,  2.5,  6.5,  3. ,  4. ])
</snippet></ROW><ROW><id>10050732</id><snippet>numpy.fft</snippet></ROW><ROW><id>10050806</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; def alternator(*values):
...     return itertools.cycle(values)
... 
&gt;&gt;&gt; def increasor(value_1, dvalue_1, steps=2):
...     counter = itertools.count(value_1, dvalue_1)
...     while True:
...             repeater = itertools.repeat(counter.next(), steps)
...             for item in repeater:
...                 yield item
... 
&gt;&gt;&gt; def motion_plan(x_plan, y_plan, steps=6):
...     while steps &gt; 0:
...         yield (x_plan.next(), y_plan.next())
...         steps -= 1
... 
&gt;&gt;&gt; for pos in motion_plan(alternator('x1', 'x1+dx'), increaser('y1', '+dy'): #Location 1 motion plan
...     print pos
... 
('x1', 'y1')
('x1+dx', 'y1')
('x1', 'y1+dy')
('x1+dx', 'y1+dy')
('x1', 'y1+dy+dy')
('x1+dx', 'y1+dy+dy')
</snippet></ROW><ROW><id>10050806</id><snippet>&gt;&gt;&gt; count = 0
&gt;&gt;&gt; for pos in motion_plan(increaser(0, -1), alternator(0, 1)): #location 4 motion plan
...     print "%d %r" % (count, pos)
...     count += 1
1 (0, 0)
2 (0, 1)
3 (-1, 0)
4 (-1, 1)
5 (-2, 0)
6 (-2, 1)
</snippet></ROW><ROW><id>10050806</id><snippet>LOCATION4 Motion Plan is like so,
6 4 2
5 3 1
</snippet></ROW><ROW><id>10050806</id><snippet>Location1 = motion_plan(alternator(0, 1), increasor(0, 1))
Location2 = motion_plan(increasor(0, -1), alternator(0, -1))
Location3 = motion_plan(alternator(0, -1), increasor(0, 1))
Location4 = motion_plan(increasor(0, -1), alternator(0, 1))
</snippet></ROW><ROW><id>10050914</id><snippet>converters</snippet></ROW><ROW><id>10050914</id><snippet>loadtxt</snippet></ROW><ROW><id>10050914</id><snippet>np.loadtxt("sharma5.txt", converters = {1: lambda s: float(s.strip(";"))})</snippet></ROW><ROW><id>10051075</id><snippet>_formname</snippet></ROW><ROW><id>10051075</id><snippet>_formkey</snippet></ROW><ROW><id>10051075</id><snippet>LOAD()</snippet></ROW><ROW><id>10051103</id><snippet>global</snippet></ROW><ROW><id>10051103</id><snippet> rlink = ('http://stackoverflow', 'pastbin.com', 'unix.com')
 clink  = ' '
 def listbinding(*args):
     global clink
     idxs = reslinkbox.curselection()
     idx = int(idxs[0])

     clink = rlink[idx]
</snippet></ROW><ROW><id>10051103</id><snippet>&lt;obligitory&gt;</snippet></ROW><ROW><id>10051103</id><snippet>&lt;/obligitory&gt;</snippet></ROW><ROW><id>10051351</id><snippet>project</snippet></ROW><ROW><id>10051351</id><snippet>startapp</snippet></ROW><ROW><id>10051351</id><snippet>project</snippet></ROW><ROW><id>10051668</id><snippet>   _use_memcache = False
   _use_cache = False
</snippet></ROW><ROW><id>10051668</id><snippet>  ndbkey = ndb.Key.from_old_key(ent.key())
  ndbkey.delete(use_datastore=False)
</snippet></ROW><ROW><id>10052011</id><snippet>ravel</snippet></ROW><ROW><id>10052011</id><snippet>&gt;&gt;&gt; a = numpy.arange(25).reshape((5, 5))
&gt;&gt;&gt; b = a.ravel()
&gt;&gt;&gt; b[0] = 55
&gt;&gt;&gt; a
array([[55,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
</snippet></ROW><ROW><id>10052011</id><snippet>reshape</snippet></ROW><ROW><id>10052011</id><snippet>&gt;&gt;&gt; a = numpy.arange(27).reshape((3, 3, 3))
&gt;&gt;&gt; b = a.reshape((9, 3))
&gt;&gt;&gt; b[0] = 55
&gt;&gt;&gt; a
array([[[55, 55, 55],
        [ 3,  4,  5],
        [ 6,  7,  8]],

       [[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]],

       [[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]]])
</snippet></ROW><ROW><id>10052166</id><snippet>^.*\.(?!jpg$|png$)[^.]+$</snippet></ROW><ROW><id>10052406</id><snippet>class K(object):
     registry = {}
     def __init__(self, name):
         self.name = name
         self.registry[name] = self
</snippet></ROW><ROW><id>10052406</id><snippet>K.registry</snippet></ROW><ROW><id>10052540</id><snippet>import tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        mainLabel = tk.Label(self, text='Example for pop up input box')
        mainLabel.pack()

        mainButton = tk.Button(self, text='Click me', command=self.on_click)
        mainButton.pack()

        top = self.top = tk.Toplevel(self)
        myLabel = tk.Label(top, text='Enter your username below')
        myLabel.pack()

        self.myEntryBox = tk.Entry(top)
        self.myEntryBox.pack()

        mySubmitButton = tk.Button(top, text='Hello', command=self.send)
        mySubmitButton.pack()

        top.withdraw()

    def send(self):
        self.username = self.myEntryBox.get()
        self.myEntryBox.delete(0, 'end')
        self.top.withdraw()
        print(self.username)

    def on_click(self):
        self.top.deiconify()

gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>10052678</id><snippet>import os
import time

msg =  raw_input("Enter message for child process")

x = os.fork()

if not x:
    for i in range(5):
        time.sleep(3)
        print msg
</snippet></ROW><ROW><id>10052708</id><snippet>saved_sieve_map = {}
def saved_sieve(x):
  if x not in saved_sieve_map:
    saved_sieve_map[x] = sieve(x)
  return saved_sieve_map[x]
</snippet></ROW><ROW><id>10052956</id><snippet>for student in (sorted(student_Dict.values(), key=operator.attrgetter('age'))):
    print(student.name)
</snippet></ROW><ROW><id>10053321</id><snippet>import string
import random

CANDIDATE_CHARS = string.ascii_letters+string.digits  # lowercase and uppercase letters, and digits
</snippet></ROW><ROW><id>10053321</id><snippet>random_text = u''.join(random.choice(CANDIDATE_CHARS) for _ in range(16))  # 16 random characters
client.type(text=random_text, id=u'input-999052296848829736')
</snippet></ROW><ROW><id>10053325</id><snippet>int()</snippet></ROW><ROW><id>10053325</id><snippet>int(x)</snippet></ROW><ROW><id>10053325</id><snippet>int(x, base)</snippet></ROW><ROW><id>10053325</id><snippet>int(base)</snippet></ROW><ROW><id>10053453</id><snippet>A:Uint16</snippet></ROW><ROW><id>10053453</id><snippet>B:Uint8</snippet></ROW><ROW><id>10053453</id><snippet>BBAA</snippet></ROW><ROW><id>10053453</id><snippet>0BAA</snippet></ROW><ROW><id>10053453</id><snippet>B0AA</snippet></ROW><ROW><id>10053453</id><snippet>AAB</snippet></ROW><ROW><id>10053453</id><snippet>BAA</snippet></ROW><ROW><id>10053453</id><snippet>var array = new Uint8Array(data,0,1);
alert(array);

var array2 = new Uint8Array(data,1,5);
var abuf2 = new ArrayBuffer(4);
var abuf2_8 = new Uint8Array(abuf2);
// using `subarray` won't help, cause it doesn't create a copy like `slice`
// and the same data will have the same inconsistent memory alignment
for (var i = 0; i &lt; 4; i++) abuf2_8[i] = array2[i];
var abuf2_32 = new Uint32Array(abuf2);
alert(abuf2_32[0]);
</snippet></ROW><ROW><id>10053565</id><snippet>Query</snippet></ROW><ROW><id>10053565</id><snippet>Query</snippet></ROW><ROW><id>10053565</id><snippet>filter()</snippet></ROW><ROW><id>10053565</id><snippet>&gt;&gt;&gt; for user in session.query(User).\
...   filter(User.name=='ed').\
...   filter(User.fullname=='Ed Jones'):
...     print user
</snippet></ROW><ROW><id>10053565</id><snippet>Connection.execution_options()</snippet></ROW><ROW><id>10053917</id><snippet>a</snippet></ROW><ROW><id>10053917</id><snippet>from b import Foo</snippet></ROW><ROW><id>10053917</id><snippet>Foo</snippet></ROW><ROW><id>10053917</id><snippet>a</snippet></ROW><ROW><id>10053917</id><snippet>a.Foo</snippet></ROW><ROW><id>10053917</id><snippet>from a import Foo</snippet></ROW><ROW><id>10053917</id><snippet>foo</snippet></ROW><ROW><id>10053917</id><snippet>foo/
    a.py
    b.py
    c.py
    __init__.py
</snippet></ROW><ROW><id>10053917</id><snippet>a.py</snippet></ROW><ROW><id>10053917</id><snippet>b.py</snippet></ROW><ROW><id>10053917</id><snippet>c.py</snippet></ROW><ROW><id>10053917</id><snippet>A</snippet></ROW><ROW><id>10053917</id><snippet>B</snippet></ROW><ROW><id>10053917</id><snippet>C</snippet></ROW><ROW><id>10053917</id><snippet>from foo.a import A
from foo.b import B
from foo.c import C
</snippet></ROW><ROW><id>10053917</id><snippet>__init__.py</snippet></ROW><ROW><id>10053917</id><snippet>from a import A
from b import B
from c import C
</snippet></ROW><ROW><id>10053917</id><snippet>from foo import A,B,C
</snippet></ROW><ROW><id>10054002</id><snippet>import codecs

words = [word.strip() for word in codecs.open("hypernyms_en2hi.txt", "r", "utf-8")]
hypernyms = codecs.open("hindi_hypernym.txt", "r", "utf-8")
count_arr = []

for line in hypernyms:
    count_arr.append(0)
    for word in words:
        count_arr[-1] += (word in line)

for count in enumerate(count_arr):
    if count:
        print iterator, ' ', count
</snippet></ROW><ROW><id>10054039</id><snippet>strict graph G {
    iruo [];
    valentin6232 [];
    shockwaver [];
    jojo6938 [];
    beahero [];
}
</snippet></ROW><ROW><id>10054039</id><snippet>dot</snippet></ROW><ROW><id>10054049</id><snippet>0.0050</snippet></ROW><ROW><id>10054049</id><snippet>e-03</snippet></ROW><ROW><id>10054139</id><snippet>urlpatterns = patterns('',
   url(r'^admin/preferences/$', TemplateView.as_view(template_name='admin/preferences/preferences.html')),
   url(r'^admin/', include('django.contrib.admin.urls')),
)
</snippet></ROW><ROW><id>10054232</id><snippet>"{0} {1}\n".format(x,y)
</snippet></ROW><ROW><id>10054378</id><snippet>if elem = triangle[row][col] and the next row is triangle[row+1]

then backtrack_elem = max([elem + i for i in connected_neighbors of col in row])
</snippet></ROW><ROW><id>10054378</id><snippet>connected_neighbors of col in row</snippet></ROW><ROW><id>10054378</id><snippet>[next[col-1],next[col],next[col+1]]</snippet></ROW><ROW><id>10054378</id><snippet>col - 1 &gt;=0</snippet></ROW><ROW><id>10054378</id><snippet>col+1 &lt; len(next)</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; def neigh(n,sz):
    return [i for i in (n-1,n,n+1) if 0&lt;=i&lt;sz]
</snippet></ROW><ROW><id>10054378</id><snippet>backtrack_elem = max([elem + i for i in connected_neighbors of col in row])</snippet></ROW><ROW><id>10054378</id><snippet>triangle[row][i] = max([elem + next[n] for n in neigh(i,len(next))])
</snippet></ROW><ROW><id>10054378</id><snippet>curr[i]=max(next[n]+e for n in neigh(i,len(next)))
</snippet></ROW><ROW><id>10054378</id><snippet>for (curr,next) in zip(triangle[-2::-1],triangle[::-1]):
</snippet></ROW><ROW><id>10054378</id><snippet>for (i,e) in enumerate(curr):
</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; for (curr,next) in zip(triangle[-2::-1],triangle[::-1]):
    for (i,e) in enumerate(curr):
        curr[i]=max(next[n]+e for n in neigh(i,len(next)))
</snippet></ROW><ROW><id>10054378</id><snippet>route = triangle # This will not work, because in python copy is done by reference
route = triangle[:] #This will also not work, because triangle is a list of list
                    #and individual list would be copied with reference
</snippet></ROW><ROW><id>10054378</id><snippet>deepcopy</snippet></ROW><ROW><id>10054378</id><snippet>import copy
route = copy.deepcopy(triangle) #This will work
</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; for (curr,next) in zip(route[-2::-1],route[::-1]):
    for (i,e) in enumerate(curr):
        curr[i]=max(next[n]+e for n in neigh(i,len(next)))
</snippet></ROW><ROW><id>10054378</id><snippet>[row,col]</snippet></ROW><ROW><id>10054378</id><snippet>i=[x for x in neigh(next,i) if x == curr[i]-orig[i]][0]
orig[i]
</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; for (curr,next,orig) in zip(route,route[1:],triangle):
    print orig[i],
    i=[x for x in neigh(i,len(next)) if next[x] == curr[i]-orig[i]][0]
</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; triangle=[
          [3],
          [7, 4],
          [2, 4, 6],
          [8, 5, 9, 3],
          [15,10,2, 7, 8]
         ]

&gt;&gt;&gt; route=copy.deepcopy(triangle) # Create a Copy
</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; for (curr,next) in zip(route[-2::-1],route[::-1]):
    for (i,e) in enumerate(curr):
        curr[i]=max(next[n]+e for n in neigh(i,len(next)))


&gt;&gt;&gt; route
[[37], [34, 31], [25, 27, 26], [23, 20, 19, 11], [15, 10, 2, 7, 8]]
</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; def enroute(triangle):
    route=copy.deepcopy(triangle) # Create a Copy
    # Generating the Route
    for (curr,next) in zip(route[-2::-1],route[::-1]): #Read the curr and next row
        for (i,e) in enumerate(curr):
            #Backtrack calculation
            curr[i]=max(next[n]+e for n in neigh(i,len(next)))
    path=[] #Start with the peak elem
    for (curr,next,orig) in zip(route,route[1:],triangle): #Read the curr, next and orig row
        path.append(orig[i])
        i=[x for x in neigh(i,len(next)) if next[x] == curr[i]-orig[i]][0]
    path.append(triangle[-1][i]) #Don't forget the last row which
    return (route[0],path)
</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; enroute(triangle)
([37], [3, 7, 4, 8, 15])
</snippet></ROW><ROW><id>10054378</id><snippet>&gt;&gt;&gt; def enroute(triangle,neigh=lambda n,sz:[i for i in (n-1,n,n+1) if 0&lt;=i&lt;sz]):
    route=copy.deepcopy(triangle) # Create a Copy
    # Generating the Route
    for (curr,next) in zip(route[-2::-1],route[::-1]): #Read the curr and next row
        for (i,e) in enumerate(curr):
            #Backtrack calculation
            curr[i]=max(next[n]+e for n in neigh(i,len(next)))
    path=[] #Start with the peak elem
    for (curr,next,orig) in zip(route,route[1:],triangle): #Read the curr, next and orig row
        path.append(orig[i])
        i=[x for x in neigh(i,len(next)) if next[x] == curr[i]-orig[i]][0]
    path.append(triangle[-1][i]) #Don't forget the last row which
    return (route[0],path)

&gt;&gt;&gt; enroute(t1) # For Right angle triangle
([1116], [75, 64, 82, 87, 82, 75, 77, 65, 41, 72, 71, 70, 91, 66, 98])
&gt;&gt;&gt; enroute(t1,neigh=lambda n,sz:[i for i in (n,n+1) if i&lt;sz]) # For a Pyramid
([1074], [75, 64, 82, 87, 82, 75, 73, 28, 83, 32, 91, 78, 58, 73, 93])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10054525</id><snippet>words</snippet></ROW><ROW><id>10054525</id><snippet>sents</snippet></ROW><ROW><id>10054525</id><snippet>PlaintextCorpusReader</snippet></ROW><ROW><id>10054525</id><snippet>PlaintextCorpusReader</snippet></ROW><ROW><id>10054525</id><snippet>PlainTextCorpusReader</snippet></ROW><ROW><id>10054623</id><snippet>template_name = 'subfolde/template.html'</snippet></ROW><ROW><id>10054623</id><snippet>projectname/appname/templates/appname/objectname_list.html
            ^^^               ^^^
</snippet></ROW><ROW><id>10054623</id><snippet>foo</snippet></ROW><ROW><id>10054623</id><snippet>bar</snippet></ROW><ROW><id>10054623</id><snippet>baz</snippet></ROW><ROW><id>10054623</id><snippet>templates</snippet></ROW><ROW><id>10054623</id><snippet>myproj/foo/templates/foo/...
myproj/foo/templates/bar/...
myproj/foo/templates/baz/...
</snippet></ROW><ROW><id>10054852</id><snippet>$ python -m cProfile script.py
         4113777 function calls (1371305 primitive calls) in 1.337 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 cProfile.py:5(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 cProfile.py:66(Profile)
        1    0.009    0.009    1.337    1.337 script.py:1(&lt;module&gt;)
2692508/30    1.069    0.000    1.268    0.042 script.py:3(fib)
74994/25000    0.058    0.000    0.058    0.000 script.py:9(fibber)
  1346269    0.200    0.000    0.200    0.000 {max}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        2    0.001    0.000    0.001    0.000 {range}
</snippet></ROW><ROW><id>10054852</id><snippet>import cProfile

def fib(num):
    if num &lt; 3:
        return max(num, 1)
    return fib(num - 1) + fib(num - 2)

fibdict = {0:1, 1:1, 2:2}
def fibber(num):
    if num not in fibdict:
        n = fibber(num - 1) + fibber(num - 2)
        fibdict[num] = n
    return fibdict[num]

a = [fib(i) for i in range(30)]
b = [fibber(i) for i in range(25000)]
</snippet></ROW><ROW><id>10054991</id><snippet>__int__()</snippet></ROW><ROW><id>10054991</id><snippet>a &lt; b
</snippet></ROW><ROW><id>10054991</id><snippet>type(a).__lt__(a, b)</snippet></ROW><ROW><id>10054991</id><snippet>NotImplemented</snippet></ROW><ROW><id>10054991</id><snippet>type(b).__gt__(b, a)</snippet></ROW><ROW><id>10054991</id><snippet>int</snippet></ROW><ROW><id>10054991</id><snippet>total_ordering</snippet></ROW><ROW><id>10055013</id><snippet>sudo pip install svn+https://python-xlib.svn.sourceforge.net/svnroot/python-xlib/trunk/
</snippet></ROW><ROW><id>10055062</id><snippet>if i.upper() in "AEIOU"
</snippet></ROW><ROW><id>10055062</id><snippet>def get_vowels(word):
    vowels = "AEIOU"
    return [c for c in word if c.upper() in vowels]
</snippet></ROW><ROW><id>10055092</id><snippet>print AXSection.__table__.columns
</snippet></ROW><ROW><id>10055092</id><snippet>['axsection.id', 'axsection.enabled', 'axsection.name']
</snippet></ROW><ROW><id>10055107</id><snippet>@app.route('/')
def index():
    rv = cache.get('request:/')
    if rv == None:
        rv = render_template('index.html')
        cachable = make_response(rv).data
        cache.set('request:/', cachable, timeout=5 * 60)
    return rv
</snippet></ROW><ROW><id>10055368</id><snippet>f</snippet></ROW><ROW><id>10055368</id><snippet>T</snippet></ROW><ROW><id>10055368</id><snippet>import multiprocessing, copy
from foo import really_expensive_to_compute_object

## Create a really complicated object that is *hard* to initialise.
T = really_expensive_to_compute_object(10) 

def f(t, x):
  return t.cheap_calculation(x)

P = multiprocessing.Pool(processes=64)
results = P.map(f, (copy.deepcopy(T) for _ in range(1000000)), range(1000000))

print results
</snippet></ROW><ROW><id>10055560</id><snippet>HKEY_LOCAL_MACHINE</snippet></ROW><ROW><id>10055560</id><snippet>win32con</snippet></ROW><ROW><id>10055560</id><snippet>reghandle = win32api.RegOpenKeyEx(win32con.HKEY_LOCAL_MACHINE,"SOFTWARE\\Google\\",0,win32con.KEY_READ)
</snippet></ROW><ROW><id>10055615</id><snippet>easy_install</snippet></ROW><ROW><id>10055615</id><snippet>pip</snippet></ROW><ROW><id>10055615</id><snippet>easy_install</snippet></ROW><ROW><id>10055615</id><snippet>easy_install</snippet></ROW><ROW><id>10055615</id><snippet>easy_install</snippet></ROW><ROW><id>10055615</id><snippet>pip</snippet></ROW><ROW><id>10055615</id><snippet>pip</snippet></ROW><ROW><id>10055615</id><snippet>virtualenv</snippet></ROW><ROW><id>10055834</id><snippet>foo</snippet></ROW><ROW><id>10055834</id><snippet>bar1</snippet></ROW><ROW><id>10055834</id><snippet>pragma foreign_keys=on;

create table bar1 (id integer primary key);
create table bar2 (id integer primary key);

insert into bar1 values (1);
insert into bar1 values (2);
insert into bar2 values (2);
insert into bar2 values (3);

create table foo (id integer);

CREATE TRIGGER fk_insert_foo
BEFORE INSERT ON foo
    FOR EACH ROW 
    BEGIN
      SELECT RAISE(ROLLBACK, 'insert on table foo violates foo.id '
                             + 'constraint on union of bar1.id and bar2.id')
      WHERE NOT (EXISTS (SELECT * FROM bar1 WHERE bar1.id=NEW.id)
                 OR 
                 EXISTS (SELECT * FROM bar2 WHERE bar2.id=NEW.id));
    END;

insert into foo values (1);
insert into foo values (2);
insert into foo values (3);
select * from foo;
insert into foo values (4); # &lt;&lt;&lt;&lt;&lt;&lt; this fails
</snippet></ROW><ROW><id>10055843</id><snippet>GetSubRect()</snippet></ROW><ROW><id>10055843</id><snippet>Copy()</snippet></ROW><ROW><id>10055843</id><snippet>GetSubRect()</snippet></ROW><ROW><id>10055843</id><snippet>Copy()</snippet></ROW><ROW><id>10055843</id><snippet>import cv
blue = cv.LoadImage("blue.jpg")
red = cv.LoadImage("red.jpg")

sub = cv.GetSubRect(blue, (100, 100, 50, 50))
cv.Copy(red,sub)

cv.ShowImage('blue_red', blue)
cv.WaitKey(0)
</snippet></ROW><ROW><id>10055843</id><snippet>SetImageROI()</snippet></ROW><ROW><id>10055843</id><snippet>cv.SetImageROI(blue,(100,100,50,50))
cv.Copy(red, blue)
cv.ResetImageROI(blue)
</snippet></ROW><ROW><id>10055843</id><snippet>ResetImageROI</snippet></ROW><ROW><id>10056029</id><snippet># inside SolutionForm class
def clean(self):
    if not (self.cleaned_data['file'] or self.cleaned_data['text']):
        raise forms.ValidationError('Please enter your code in text box or upload an appropriate file.')
    return self.cleaned_data
</snippet></ROW><ROW><id>10056101</id><snippet>import Gnuplot
g=Gnuplot.Gnuplot()
y1= [12, 15, 17, 19]
y2= [34, 78, 54, 67]
x= [10, 20, 30, 40] 
d1=Gnuplot.Data(x,y1,with_="line")
d2=Gnuplot.Data(x,y2,with_="line")
#g.plot(d1,d2)   #uncomment this line if you want to see the gnuplot window
g.hardcopy('filename.png',terminal = 'png')
</snippet></ROW><ROW><id>10056172</id><snippet>for lines in urls:
    d = feedparser.parse(lines)
</snippet></ROW><ROW><id>10056172</id><snippet>d</snippet></ROW><ROW><id>10056172</id><snippet>d</snippet></ROW><ROW><id>10056172</id><snippet>d</snippet></ROW><ROW><id>10056172</id><snippet>d.entries[0].description</snippet></ROW><ROW><id>10056172</id><snippet>urls = open("c:/a2.txt", "r") # file with rss urls
results = []
for lines in urls:
    results.append(feedparser.parse(lines))
contents = []
for r in results:
    statusupdate = r.entries[0].description
    soup = BeautifulStoneSoup(statusupdate)
    for e in r.entries:
        contents.append((e.title, e.link, soup.find("img")["src"]))
with open(r'c:\a.txt', 'a') as f:
    for c in contents:
        f.writelines('"')
        f.writelines(c[0])
        f.writelines('"')
        f.writelines(",")
        f.writelines('"')
        f.writelines(c[1])
        f.writelines('"')
        f.writelines(",")
        f.writelines('"')
        f.writelines(c[2])
        f.writelines('"')
        f.writelines(",")
        f.writelines("\n")
</snippet></ROW><ROW><id>10056355</id><snippet>helpmenu.add_cascade(label='Help',menu=helpmenu)
</snippet></ROW><ROW><id>10056355</id><snippet>menubar.add_cascade(label="Help", menu=helpmenu)
</snippet></ROW><ROW><id>10056808</id><snippet>math.gamma(x)</snippet></ROW><ROW><id>10056808</id><snippet>math.factorial(n)</snippet></ROW><ROW><id>10056808</id><snippet>math.gamma(n + 1)</snippet></ROW><ROW><id>10057039</id><snippet>g</snippet></ROW><ROW><id>10057039</id><snippet>g</snippet></ROW><ROW><id>10057039</id><snippet>0</snippet></ROW><ROW><id>10057039</id><snippet>add_edges</snippet></ROW><ROW><id>10057039</id><snippet>i</snippet></ROW><ROW><id>10057039</id><snippet>print</snippet></ROW><ROW><id>10057039</id><snippet>&gt;&gt;&gt; import igraph
&gt;&gt;&gt; graph = igraph.Graph()
&gt;&gt;&gt; print graph
Undirected graph (|V| = 1, |E| = 0)
</snippet></ROW><ROW><id>10057039</id><snippet>i</snippet></ROW><ROW><id>10057039</id><snippet>&gt;&gt;&gt; graph.add_vertices(0)
&lt;igraph.Graph object at 0xcea850&gt;
&gt;&gt;&gt; print graph
Undirected graph (|V| = 1, |E| = 0)
&gt;&gt;&gt; graph.add_edges([(0, 1)])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
igraph.core.InternalError: Error at type_indexededgelist.c:245: cannot add edges, Invalid vertex id
</snippet></ROW><ROW><id>10057039</id><snippet>&gt;&gt;&gt; graph.add_vertices(5)
&lt;igraph.Graph object at 0xcea850&gt;
&gt;&gt;&gt; print graph
Undirected graph (|V| = 6, |E| = 3)
&gt;&gt;&gt; graph.add_edges([(1, 1), (2, 3), (3, 5)])
&lt;igraph.Graph object at 0xcea850&gt;
&gt;&gt;&gt; graph.get_edgelist()
[(1, 1), (2, 3), (3, 5)]
</snippet></ROW><ROW><id>10057039</id><snippet>&gt;&gt;&gt; graph = igraph.Graph()
&gt;&gt;&gt; print graph
Undirected graph (|V| = 1, |E| = 0)
</snippet></ROW><ROW><id>10057039</id><snippet>&gt;&gt;&gt; vertices = 1, 2, 13, 4, 21, 5
&gt;&gt;&gt; map_graph = igraph.Graph()
&gt;&gt;&gt; print map_graph
Undirected graph (|V| = 1, |E| = 0)
&gt;&gt;&gt; map_graph.add_vertices(max(vertices))
&lt;igraph.Graph object at 0xceaa50&gt;
&gt;&gt;&gt; print map_graph
Undirected graph (|V| = 22, |E| = 0)
&gt;&gt;&gt; map(map_graph.add_edges, zip(vertices, vertices[1:]))
[&lt;igraph.Graph object at 0xceaa50&gt;, &lt;igraph.Graph object at 0xceaa50&gt;, &lt;igraph.Graph object at 0xceaa50&gt;, &lt;igraph.Graph object at 0xceaa50&gt;, &lt;igraph.Graph object at 0xceaa50&gt;]
&gt;&gt;&gt; print map_graph
Undirected graph (|V| = 22, |E| = 5)
&gt;&gt;&gt; map_graph.get_edgelist()
[(1, 2), (2, 13), (4, 13), (4, 21), (5, 21)]
</snippet></ROW><ROW><id>10057039</id><snippet>&gt;&gt;&gt; vertices = 1, 2, 13, 4, 21, 5
&gt;&gt;&gt; loop_graph = igraph.Graph()
&gt;&gt;&gt; print loop_graph
Undirected graph (|V| = 1, |E| = 0)
&gt;&gt;&gt; loop_graph.add_vertices(max(vertices))
&lt;igraph.Graph object at 0xcea950&gt;
&gt;&gt;&gt; print loop_graph
Undirected graph (|V| = 22, |E| = 0)
&gt;&gt;&gt; for pair in zip(vertices, vertices[1:]):
...     loop_graph.add_edges(pair)
... 
&lt;igraph.Graph object at 0xcea950&gt;
&lt;igraph.Graph object at 0xcea950&gt;
&lt;igraph.Graph object at 0xcea950&gt;
&lt;igraph.Graph object at 0xcea950&gt;
&lt;igraph.Graph object at 0xcea950&gt;
&gt;&gt;&gt; print loop_graph
Undirected graph (|V| = 22, |E| = 5)
&gt;&gt;&gt; loop_graph.get_edgelist()
[(1, 2), (2, 13), (4, 13), (4, 21), (5, 21)]
</snippet></ROW><ROW><id>10057263</id><snippet>sudo pip uninstall numpy</snippet></ROW><ROW><id>10057263</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/</snippet></ROW><ROW><id>10057263</id><snippet>sh install_superpack.sh</snippet></ROW><ROW><id>10057263</id><snippet>$ python
Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; import scipy
&gt;&gt;&gt; import matplotlib
</snippet></ROW><ROW><id>10057510</id><snippet>import pygame, random, sys
from pygame.locals import *

pygame.init()

width = 640
height = 480


DISPLAYSURF = pygame.display.set_mode((width, height))
pygame.display.set_caption('It moves!')
pygame.mouse.set_visible(0)



class Player(pygame.sprite.Sprite):

    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)

        self.x = x
        self.y = y
        self.width = 50
        self.height = 25
        self.playerRect = None



    def update(self, event):
        if event.type == MOUSEMOTION:
            self.x, self.y = event.pos


        #get a new playerRect and draw it
        self.playerRect = pygame.Rect(self.x, self.y, self.width, self.height)
        pygame.draw.ellipse(DISPLAYSURF, RED, (self.playerRect), 3)


    def shotcheck(self, event):
        if event.type == KEYDOWN:
            if event.key == K_KP8:
                return (True, 'up')
            elif event.key == K_KP2:
                return (True, 'down')
            elif event.key == K_KP4:
                return (True, 'left')
            elif event.key == K_KP6:
                return (True, 'right')
            elif event.key == K_KP7:
                return (True, 'upleft')
            elif event.key == K_KP1:
                return (True, 'downleft')
            elif event.key == K_KP9:
                return (True, 'upright')
            elif event.key == K_KP3:
                return (True, 'downright')
            else:
                return (0, 0)



class Enemy(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.x = x
        self.y = y
        #self.body = pygame.rect.Rect(self.x, self.y, 15, 15)
        self.speed = 5
        self.xmove = 0
        self.ymove = 0



    def update(self, event):
        self.x += self.speed
        if self.x &gt; 350:
            self.speed *= -1
        elif self.x &lt; 25:
            self.speed *= -1

        pygame.draw.rect(DISPLAYSURF, BLUE, (self.x, self.y, 15, 15), 4)



#pass it a directional value when fired based on the key
#may have to divide speed / 2 if moving diagonally
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y, direction):
        pygame.sprite.Sprite.__init__(self)
        self.x = x
        self.y = y
        self.direction = direction
        self.width = 4
        self.height = 4
        self.bulletRect = None
        self.speed = 8



    def update(self, event):

        if self.direction == 'up':
            self.y -= self.speed

        elif self.direction == 'down':
            self.y += self.speed

        elif self.direction == 'left':
            self.x -= self.speed

        elif self.direction == 'right':
            self.x += self.speed

        elif self.direction == 'upleft':
            self.x -= (self.speed/2)
            self.y -= (self.speed/2)

        elif self.direction == 'downleft':
            self.x -= (self.speed/2)
            self.y += (self.speed/2)

        elif self.direction == 'upright':
            self.x += (self.speed/2)
                self.y -= (self.speed/2)

        elif self.direction == 'downright':
            self.x += (self.speed/2)
            self.y += (self.speed/2)


        self.bulletRect = pygame.Rect(self.x, self.y, 4, 4)
        pygame.draw.ellipse(DISPLAYSURF, GREEN, (self.bulletRect), 2)





FPS = 30
fpsClock = pygame.time.Clock()


RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)



ship = Player(width / 2, height / 2)
bads = Enemy(width / 2, height / 2)



queue = pygame.sprite.Group()
queue.add(ship)
queue.add(bads)


while True:
    DISPLAYSURF.fill(BLACK)
    for event in pygame.event.get():
        if event.type == QUIT:
            sys.exit()


                #passes 'event' to everything in the queue and calls
                #their obj.update().  in this way the gameloop 
                #is a bit more readable
            for thing in queue:
                thing.update(event)

    try: #i'm not married to this bit of code :/
        checkForShot, shotDirection = ship.shotcheck(event)
        if checkForShot:
            shotx, shoty = ship.playerRect.center
            shot = Bullet(shotx, shoty, shotDirection)
            queue.add(shot)
    except TypeError:
        pass

    pygame.display.flip()
    fpsClock.tick(FPS)
</snippet></ROW><ROW><id>10057564</id><snippet>O(nlogn)</snippet></ROW><ROW><id>10057564</id><snippet>O(nlogn * |S|)</snippet></ROW><ROW><id>10057564</id><snippet>O(n*|S|)</snippet></ROW><ROW><id>10057564</id><snippet>|S|</snippet></ROW><ROW><id>10057564</id><snippet>1. create a trie from your collection.
2. do a DFS on the trie generated, and add each string 
   to the list when you reach terminal node.
</snippet></ROW><ROW><id>10057920</id><snippet>%init %{
    my_init_function();
%}
</snippet></ROW><ROW><id>10058000</id><snippet>(x * y).sum()</snippet></ROW><ROW><id>10058000</id><snippet>def weight_sum(x, y):
    return (x * y).sum()
</snippet></ROW><ROW><id>10058239</id><snippet>OrderedDict()</snippet></ROW><ROW><id>10058239</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = collections.OrderedDict()
&gt;&gt;&gt; d['foo'] = 'python'
&gt;&gt;&gt; d['bar'] = 'spam'
&gt;&gt;&gt; d.items()
[('foo', 'python'), ('bar', 'spam')]
&gt;&gt;&gt; d.items()[0]
('foo', 'python')
&gt;&gt;&gt; d.items()[1]
('bar', 'spam')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10058468</id><snippet>tup=[ (3, ), (1, 3), (6, 8), (4, 6, 8, 9), (2, 4) ]
max(map(len,tup))
</snippet></ROW><ROW><id>10058468</id><snippet>4
</snippet></ROW><ROW><id>10058480</id><snippet>def hamiltPath(graph):
    """This partitions a bipartite graph into a set of components with each
    component consisting of a hamiltonian path."""
    # The maximum degree
    maxDegree = 2

    # Get all the nodes.  We will process each of these.
    remaining = graph.vertices()
    # Create a new empty graph to which we will add pairs of nodes.
    newGraph = Graph()
    # Loop while there's a remaining vertex.
    while len(remaining) &gt; 0:
        # Get the next arbitrary vertex.
        node = remaining.pop()
        # Now get its neighbors that are in the remaining set.
        neighbors = [n for n in graph.neighbors(node) if n in remaining]
        # If this list of neighbors is non empty, then add (node, neighbors[0])
        # to the new graph.
        if len(neighbors) &gt; 0:
            # If this is not an optimal algorithm, I suspect the selection
            # a vertex in this indexing step is the crux.  Improve this
            # selection and the algorthim might be optimized, if it isn't
            # already (optimized in result not time or space complexity).
            neighbor = neighbors[0]
            newGraph.addEdge(node, neighbor)
            # "node" has already been removed from the remaining vertices.
            # We need to remove "neighbor" if its degree is too high.
            if len(newGraph.neighbors(neighbor)) &gt;= maxDegree:
                remaining.remove(neighbor)

    return newGraph


class Graph:
    """A graph that is represented by pairs of vertices.  This was created
    For conciseness, not efficiency"""

    def __init__(self):
        self.graph = set()

    def addEdge(self, a, b):
        """Adds the vertex (a, b) to the graph"""
        self.graph = self.graph.union({(a, b)})

    def neighbors(self, node):
        """Returns all of the neighbors of a as a set. This is safe to
        modify."""
        return (set(a[0] for a in self.graph if a[1] == node).
                union(
                set(a[1] for a in self.graph if a[0] == node)
                ))

    def vertices(self):
        """Returns a set of all of the vertices. This is safe to modify."""
        return (set(a[1] for a in self.graph).
                union(
                set(a[0] for a in self.graph)
                ))

    def __repr__(self):
        result = "\n"
        for (a, b) in self.graph:
            result += str(a) + "," + str(b) + "\n"
        # Remove the leading and trailing white space.
        result = result[1:-1]
        return result


graph = Graph()
graph.addEdge("0", "4")
graph.addEdge("1", "8")
graph.addEdge("2", "8")
graph.addEdge("3", "5")
graph.addEdge("3", "6")
graph.addEdge("3", "7")
graph.addEdge("3", "8")
graph.addEdge("3", "9")
graph.addEdge("3", "10")
graph.addEdge("3", "11")


print(graph)
print()
print(hamiltPath(graph))
# Result of this is:
# 10,3
# 1,8
# 2,8
# 11,3
# 0,4
</snippet></ROW><ROW><id>10058523</id><snippet>numpy.ma.mean</snippet></ROW><ROW><id>10058523</id><snippet>import numpy as np
x = np.array([[1, 2], [3, 4]])
y = np.array([[1, 2, 3], [3, 4, 5]])
z = np.array([[7], [8]])

arr = np.ma.empty((2,3,3))
arr.mask = True
arr[:x.shape[0],:x.shape[1],0] = x
arr[:y.shape[0],:y.shape[1],1] = y
arr[:z.shape[0],:z.shape[1],2] = z
print(arr.mean(axis = 2))
</snippet></ROW><ROW><id>10058523</id><snippet>[[3.0 2.0 3.0]
 [4.66666666667 4.0 5.0]]
</snippet></ROW><ROW><id>10058718</id><snippet>io.open</snippet></ROW><ROW><id>10058718</id><snippet>import io

def readGridFromPath(self, filepath):
    try:
        self.readGridFromFile(io.open(filepath, 'r', encoding = 'utf-8'))
    except UnicodeDecodeError:
        self.readGridFromFile(io.open(filepath, 'r', encoding = 'utf-16'))
</snippet></ROW><ROW><id>10058718</id><snippet>io.open</snippet></ROW><ROW><id>10058718</id><snippet>io</snippet></ROW><ROW><id>10058718</id><snippet>codecs.open</snippet></ROW><ROW><id>10058718</id><snippet>codecs.open</snippet></ROW><ROW><id>10058722</id><snippet>header = {'content-type':'application/json'}
</snippet></ROW><ROW><id>10058722</id><snippet>r = requests.post(
    'https://github.com/login/oauth/access_token', 
    data=json.dumps({
        'client_id':client_id, 
        'client_secret':client_secret,
        'code':code
    },
    headers=header
)
</snippet></ROW><ROW><id>10059001</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r'.*?E=([\d.]+).*?I=([\d.]+)')
&gt;&gt;&gt; re.match('voltage is E=200V and the current is I=4.5A')
&gt;&gt;&gt; matches = regex.match('voltage is E=200V and the current is I=4.5A')
&gt;&gt;&gt; int(matches.group(1))
200
&gt;&gt;&gt; float(matches.group(2))
4.5
</snippet></ROW><ROW><id>10059001</id><snippet>&gt;&gt;&gt; s.find('E=')
11
&gt;&gt;&gt; s.find('V', 11)
16
&gt;&gt;&gt; s[11:16]
'E=200'
&gt;&gt;&gt; s[11+2:16]
'200'
&gt;&gt;&gt; int(s[11+2:16])
200
</snippet></ROW><ROW><id>10059092</id><snippet>$ cat run.py
from app.module1 import main
main.main()
$ python run.py
</snippet></ROW><ROW><id>10059092</id><snippet>app/module1/main.py</snippet></ROW><ROW><id>10059092</id><snippet>from ..core import foo</snippet></ROW><ROW><id>10059092</id><snippet>core/</snippet></ROW><ROW><id>10059092</id><snippet>main.py</snippet></ROW><ROW><id>10059141</id><snippet>&gt;&gt;&gt; masterList = [[1, 123, 2], [22, 4567, 33], [0, 0, 0]]
&gt;&gt;&gt; print "\n".join("\t".join(["{0:04d}".format(num) for num in subList]) for subList in masterList)
0001    0123    0002
0022    4567    0033
0000    0000    0000
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10059422</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>10059422</id><snippet>raw_input</snippet></ROW><ROW><id>10059422</id><snippet>input</snippet></ROW><ROW><id>10059422</id><snippet>input</snippet></ROW><ROW><id>10059422</id><snippet>int a = 1</snippet></ROW><ROW><id>10059422</id><snippet>if elif else</snippet></ROW><ROW><id>10059462</id><snippet>parse()</snippet></ROW><ROW><id>10059462</id><snippet>getElementsByTagName()</snippet></ROW><ROW><id>10059462</id><snippet>&lt;title&gt;</snippet></ROW><ROW><id>10059462</id><snippet>&lt;title&gt;</snippet></ROW><ROW><id>10059526</id><snippet>importlib.import_module</snippet></ROW><ROW><id>10059526</id><snippet>getattr</snippet></ROW><ROW><id>10059526</id><snippet>eval</snippet></ROW><ROW><id>10059526</id><snippet>import sys
import importlib

module_name = sys.argv[1]
class_name = sys.argv[2]

module = importlib.import_module(module_name)
cls = getattr(module, class_name)

obj = cls()
obj.writeByte(0x0)
</snippet></ROW><ROW><id>10059526</id><snippet>append</snippet></ROW><ROW><id>10059526</id><snippet>sys.path</snippet></ROW><ROW><id>10059526</id><snippet>python3 myscript.py mypackage.mymodule MyClass
</snippet></ROW><ROW><id>10059764</id><snippet>def UserArea(fuct):

    def Usercheck():
        return Usercheck
</snippet></ROW><ROW><id>10059764</id><snippet>None</snippet></ROW><ROW><id>10059764</id><snippet>None()</snippet></ROW><ROW><id>10059764</id><snippet>import functools

def UserArea(func):

    @functools.wraps(func)
    def usercheck(*args, **kwargs):
        if adminuser:   # however this gets defined
           return func(*args, **kwargs)
        else:
           raise Exception("not authorized")

    return usercheck
</snippet></ROW><ROW><id>10059791</id><snippet># The data is input as '1: 0.022,' format
def process_data(line):
    # for returning the new string that is cleaned up
    result_line = ''
    for character in line:
        # check if it is either a number or a letter
        if character.isdigit() or character.isalpha():
            result_line += character
        # we want the decimal point
        elif character == '.':
            result_line += character
        # else we replace it with space ' '
        else:
            result_line += ' '
    return result_line

my_list = []  

with open('input.txt') as file:
    for lines in file:
        processed_line = process_data(lines)
        # temp_list has ['letter', 'frequency']
        temp_list = (processed_line.split())
        value = temp_list[0]
        # Require to cast it to a float, since it is a string
        frequency = float(temp_list[1])
        my_list.append([value, frequency])

print(my_list)        
</snippet></ROW><ROW><id>10059791</id><snippet>my_list</snippet></ROW><ROW><id>10059791</id><snippet>string</snippet></ROW><ROW><id>10059791</id><snippet>float</snippet></ROW><ROW><id>10059791</id><snippet>[['0', 0.017], ['1', 0.022], ['2', 0.033], ['3', 0.033], 
['4', 0.029], ['5', 0.028], ['6', 0.035], ['7', 0.032], 
['8', 0.028], ['9', 0.027], ['a', 0.019], ['b', 0.022], 
['c', 0.029], ['d', 0.03], ['e', 0.028], ['f', 0.035], 
['g', 0.026], ['h', 0.037], ['i', 0.029], ['j', 0.025], 
['k', 0.025], ['l', 0.037], ['m', 0.025], ['n', 0.023], 
['o', 0.026], ['p', 0.035], ['q', 0.033], ['r', 0.031], 
['s', 0.023], ['t', 0.022], ['u', 0.038], ['v', 0.022], 
['w', 0.016], ['x', 0.026], ['y', 0.021], ['z', 0.033]]
</snippet></ROW><ROW><id>10059791</id><snippet># Took a page out of TokenMacGuy, credit to him
distribution = []
distribution.append(0.00)  
total = 0.0 # Create a float here

for entry in my_list:
    distribution.append(entry[1])
    total += frequency
    total = round(total, 3) # Rounding to 2 decimal points

distribution.append(1.00) # Missing the 1.00 value
print(distribution) # Print to check
</snippet></ROW><ROW><id>10059791</id><snippet>[0.0, 0.017, 0.022, 0.033, 0.033, 0.029, 0.028, 0.035, 0.032, 
0.028, 0.027, 0.019, 0.022, 0.029, 0.03, 0.028, 0.035, 0.026, 
0.037, 0.029, 0.025, 0.025, 0.037, 0.025, 0.023, 0.026, 0.035, 
0.033, 0.031, 0.023, 0.022, 0.038, 0.022, 0.016, 0.026, 0.021, 
0.033, 1.0]
</snippet></ROW><ROW><id>10059791</id><snippet>pattern</snippet></ROW><ROW><id>10059791</id><snippet>format</snippet></ROW><ROW><id>10059791</id><snippet>pattern = '{0}: [{1:1.3f}, {2:1.3f})'
count = 1 # a counter to keep track of the index

pre_p = distribution[0] 
p = distribution[1]

# Here we will print it out at the end in the format you said in the question
for entry in my_list:
    print(pattern.format(entry[0], pre_p, p))
    pre_p += distribution[count]
    p += distribution[count+1]
    count = count + 1
</snippet></ROW><ROW><id>10059791</id><snippet>0: [0.000, 0.017)
1: [0.017, 0.039)
2: [0.039, 0.072)
3: [0.072, 0.105)
4: [0.105, 0.134)
5: [0.134, 0.162)
6: [0.162, 0.197)
7: [0.197, 0.229)
8: [0.229, 0.257)
9: [0.257, 0.284)
a: [0.284, 0.303)
b: [0.303, 0.325)
c: [0.325, 0.354)
d: [0.354, 0.384)
e: [0.384, 0.412)
f: [0.412, 0.447)
g: [0.447, 0.473)
h: [0.473, 0.510)
i: [0.510, 0.539)
j: [0.539, 0.564)
k: [0.564, 0.589)
l: [0.589, 0.626)
m: [0.626, 0.651)
n: [0.651, 0.674)
o: [0.674, 0.700)
p: [0.700, 0.735)
q: [0.735, 0.768)
r: [0.768, 0.799)
s: [0.799, 0.822)
t: [0.822, 0.844)
u: [0.844, 0.882)
v: [0.882, 0.904)
w: [0.904, 0.920)
x: [0.920, 0.946)
y: [0.946, 0.967)
z: [0.967, 1.000)
</snippet></ROW><ROW><id>10059900</id><snippet>reactor.callLater(0, some_function, foo="bar")
</snippet></ROW><ROW><id>10059900</id><snippet>**kw</snippet></ROW><ROW><id>10059939</id><snippet>(setq yas/trigger-key (kbd "C-c &lt;kp-multiply&gt;"))
</snippet></ROW><ROW><id>10059939</id><snippet>C-c &lt;kp-multiply&gt;</snippet></ROW><ROW><id>10059939</id><snippet>yas/trigger-key</snippet></ROW><ROW><id>10059939</id><snippet>&lt;kp-multiply&gt;</snippet></ROW><ROW><id>10059939</id><snippet>*</snippet></ROW><ROW><id>10059939</id><snippet>yas/trigger-key</snippet></ROW><ROW><id>10059939</id><snippet>(local-set-key yas/trigger-key 'some-function)
</snippet></ROW><ROW><id>10059939</id><snippet>yas/snippet-table</snippet></ROW><ROW><id>10060065</id><snippet>(?P&lt;foo&gt;...)</snippet></ROW><ROW><id>10060065</id><snippet>(?P=foo)</snippet></ROW><ROW><id>10060202</id><snippet>/Applications/djangostack-1.4-0/use_djangostack
</snippet></ROW><ROW><id>10060202</id><snippet>/Applications/djangostack-1.4-0/python/bin/python django-admin.py
</snippet></ROW><ROW><id>10060471</id><snippet>str</snippet></ROW><ROW><id>10060471</id><snippet>bytearray</snippet></ROW><ROW><id>10060471</id><snippet>str</snippet></ROW><ROW><id>10060471</id><snippet>encode</snippet></ROW><ROW><id>10060471</id><snippet>bytearray</snippet></ROW><ROW><id>10060471</id><snippet>bytearray</snippet></ROW><ROW><id>10060471</id><snippet>decode</snippet></ROW><ROW><id>10060471</id><snippet>str</snippet></ROW><ROW><id>10060471</id><snippet>bytearray</snippet></ROW><ROW><id>10060471</id><snippet>&gt;&gt;&gt; a = "αά".encode('utf-8')
&gt;&gt;&gt; a
b'\xce\xb1\xce\xac'
&gt;&gt;&gt; a.decode('utf-8')
'αά'
</snippet></ROW><ROW><id>10060632</id><snippet>AddHandler wsgi-script .wsgi

WSGISocketPrefix /var/run/wsgi
WSGIRestrictEmbedded On

&lt;VirtualHost *:80&gt;
    ServerName www.mydomain.com

    WSGIDaemonProcess myprocess processes=2 threads=15
    WSGIProcessGroup myprocess

    WSGIScriptAlias / /home/ubuntu/djangoProj/micopiloto/application_sa.wsgi
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>10060632</id><snippet>sys.path.append('/home/ubuntu/djangoProj') 
sys.path.append('/home/ubuntu/djangoProj/micopiloto') 
</snippet></ROW><ROW><id>10060635</id><snippet>eval</snippet></ROW><ROW><id>10060635</id><snippet>reverse()</snippet></ROW><ROW><id>10060635</id><snippet>return reverse(f, *args)
</snippet></ROW><ROW><id>10060635</id><snippet>*</snippet></ROW><ROW><id>10060635</id><snippet>return reverse(...</snippet></ROW><ROW><id>10060782</id><snippet>open</snippet></ROW><ROW><id>10060915</id><snippet>def index(request):
    latest_book = Book.objects.all().order_by('-pub_date')[:5]
    top_items = Book.objects.all().order_by('-score')[:100]
    return render_to_response('books/index.html', {
                            'latest_books': latest_books, # latest_book
                            'top_books' : top_books}, # top_items
                            context_instance=RequestContext(request))
</snippet></ROW><ROW><id>10060915</id><snippet>userUpVotes</snippet></ROW><ROW><id>10060915</id><snippet>userDownVotes</snippet></ROW><ROW><id>10060915</id><snippet>{% for book in top_books %}
   {% if user in book.userupvotes.all %}
       {{ user }} has upvoted
   {% endif %}
   {% if user in book.userdownvotes.all %}
       {{ user }} has downvoted
   {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>10061030</id><snippet>&gt;&gt;&gt; a = "Hello, World!"
&gt;&gt;&gt; def generate_tuples(string, n):
...     return [string[i:i+n] for i in range(len(string)-n+1)]
... 
&gt;&gt;&gt; generate_tuples(a, 3)
['Hel', 'ell', 'llo', 'lo,', 'o, ', ', W', ' Wo', 'Wor', 'orl', 'rld', 'ld!']
</snippet></ROW><ROW><id>10061083</id><snippet>List a</snippet></ROW><ROW><id>10061083</id><snippet>[x,y,z]</snippet></ROW><ROW><id>10061083</id><snippet>(Error e) a</snippet></ROW><ROW><id>10061083</id><snippet>x, None</snippet></ROW><ROW><id>10061083</id><snippet>None, err</snippet></ROW><ROW><id>10061083</id><snippet>(ErrorT e) List a</snippet></ROW><ROW><id>10061083</id><snippet>[ (x,None), (y,None), (None, err) ]</snippet></ROW><ROW><id>10061083</id><snippet>ListT (ErrorT e) a</snippet></ROW><ROW><id>10061083</id><snippet>[x,y,z], None</snippet></ROW><ROW><id>10061083</id><snippet>None, [x,y,z]</snippet></ROW><ROW><id>10061083</id><snippet>unit</snippet></ROW><ROW><id>10061083</id><snippet>def flatten(listOfLists):
    "Flatten one level of nesting"
    assert isinstance(listOfLists, list)
    if len(listOfLists) &gt; 0:
        assert isinstance(listOfLists[0], list)
    return [x for sublist in listOfLists for x in sublist]

# sequence monad
def seq_unit(x): return [x]
def seq_bind(mval, mf): return flatten(map(mf, mval))

# Decompose ErrorT e m a
def get_value(m_val): return m_val[0]
def get_error(m_val): return m_val[1]

# hard coded "(ErrorT e) List a" instance of throwError, note that seq_unit is hardcoded
def error_throwError(err): return (None, err)
def errorT_list_throwError(err): return seq_unit(error_throwError(err))

# "(ErrorT e) List a" monad
def error_unit(x): return (x,None)
def errorT_list_unit(x): return seq_unit(error_unit(x))

def error_bind(mval, mf):
    assert isinstance(mval, tuple)
    error = get_error(mval)
    if error:
        return error_throwError(error)
    else: 
        return mf(get_value(mval))

# Cannot have multi-line lambda
def errorT_list_bind_helper(mval, mf):
    assert isinstance(mval, tuple)
    error = get_error(mval)
    if error:
        return errorT_list_throwError(error)
    else: 
        return mf(get_value(mval))

def errorT_list_bind(mval, mf): return seq_bind(mval, lambda v: errorT_list_bind_helper(v, mf))

# combined monad !! (ErrorT e) List a
unit = errorT_list_unit
bind = errorT_list_bind
throwError = errorT_list_throwError

# hard coded "lift :: List a -&gt; (ErrorT e) List a"
def lift(mval):
    assert isinstance(mval, list)
    # return [ (val,None) for val in mval ]
    # return [ errorT_list_unit(val) for val in mval ]
    return seq_bind(mval, lambda v : unit(v))

def get_banks(name):
    if name == "Irek": return lift(["Bank of America", "Wells Fargo"])
    elif name == "John": return unit("PNC Bank")
    elif name == "Alex": return unit("TD Bank")
    else: return throwError("No bank associated with name %s" % name)

def get_accounts(bank, name):
    if   name == "Irek" and bank == "Bank of America": return lift([1, 2])
    elif name == "Irek" and bank == "Wells Fargo": return unit(3)
    elif name == "John" and bank == "PNC Bank": return unit(4)
    elif name == "John" and bank == "Wells Fargo": return lift([5, 6])
    elif name == "Alex" and bank == "TD Bank": return lift([7, 8])
    else: return throwError("No account associated with (%s, %s)" % (bank, name))

def get_balance(bank, account):
    if bank == "Wells Fargo":
        return throwError("Unable to get balance due to technical issue for %s: %s" % (bank, account))
    else:
        return unit(account * 35000)  #right around 200,000 depending on acct number

def get_qualified_amount(balance):
    if balance &gt; 200000:
        return unit(balance)
    else:
        return throwError("Insufficient funds for loan, current balance is %s" % balance)

# monadic business logic
def get_loan(name):

    m_qualified_amounts = (
           bind(get_banks(name), lambda bank:
           bind(get_accounts(bank, name), lambda account:
           bind(get_balance(bank, account), lambda balance:
           bind(get_qualified_amount(balance), lambda qualified_amount:
                    unit(qualified_amount))))))

    assert isinstance(m_qualified_amounts, list)
    assert isinstance(m_qualified_amounts[0], tuple)
    return m_qualified_amounts

names = ["Irek", "John", "Alex", "Fred"]

for name, loans in zip(names, map(get_loan, names)):
    print "%s: %s" % (name, loans)
</snippet></ROW><ROW><id>10061083</id><snippet>Irek: [(None, 'Insufficient funds for loan, current balance is 35000'), (None, 'Insufficient funds for loan, current balance is 70000'), (None, 'Unable to get balance due to technical issue for Wells Fargo: 3')]
John: [(None, 'Insufficient funds for loan, current balance is 140000')]
Alex: [(245000, None), (280000, None)]
Fred: [(None, 'No bank associated with name Fred')]
</snippet></ROW><ROW><id>10061097</id><snippet>traceback</snippet></ROW><ROW><id>10061097</id><snippet>setup_log_and_other_basic_services()
try:
    run_your_app()
except Exception as e:
    if is_debug():
        traceback.print_stack()
    else:
        traceback.print_stack(get_log_file())
    print e
</snippet></ROW><ROW><id>10061227</id><snippet>echo</snippet></ROW><ROW><id>10061227</id><snippet>"</snippet></ROW><ROW><id>10061227</id><snippet>\"</snippet></ROW><ROW><id>10061227</id><snippet>\</snippet></ROW><ROW><id>10061227</id><snippet>$</snippet></ROW><ROW><id>10061227</id><snippet>`</snippet></ROW><ROW><id>10061227</id><snippet>su</snippet></ROW><ROW><id>10061227</id><snippet>'\''</snippet></ROW><ROW><id>10061227</id><snippet>su</snippet></ROW><ROW><id>10061227</id><snippet>cat &gt; /etc/chef/first-boot.json</snippet></ROW><ROW><id>10061227</id><snippet>stdin</snippet></ROW><ROW><id>10061227</id><snippet>exec_command</snippet></ROW><ROW><id>10061227</id><snippet>str()</snippet></ROW><ROW><id>10061540</id><snippet>self</snippet></ROW><ROW><id>10061540</id><snippet>MyForm</snippet></ROW><ROW><id>10061540</id><snippet>type()</snippet></ROW><ROW><id>10061540</id><snippet>.__class__</snippet></ROW><ROW><id>10061540</id><snippet>MyShinyThing().__class__</snippet></ROW><ROW><id>10061540</id><snippet>object</snippet></ROW><ROW><id>10061540</id><snippet>__class__</snippet></ROW><ROW><id>10061540</id><snippet>self.__class__</snippet></ROW><ROW><id>10061540</id><snippet>self</snippet></ROW><ROW><id>10061540</id><snippet>super</snippet></ROW><ROW><id>10061540</id><snippet>MyForm.process</snippet></ROW><ROW><id>10061640</id><snippet>ListView</snippet></ROW><ROW><id>10061640</id><snippet>get_queryset()</snippet></ROW><ROW><id>10061640</id><snippet>class OrderListView(ListView):
    template_name = 'doors/orders/list.html'

    def get_queryset(self):
        user = self.request.user
        if user.user_type == 1:
            return Order.objects.all()
        return Order.objects.filter(creator=user.pk)
</snippet></ROW><ROW><id>10061653</id><snippet>polyval2d(x,y,c)</snippet></ROW><ROW><id>10061653</id><snippet>polynomial</snippet></ROW><ROW><id>10061653</id><snippet>polyval3d(x,y,z,c)</snippet></ROW><ROW><id>10061685</id><snippet>import urllib
import urllib2
import re

def Connect2Web():
  aResp = urllib2.urlopen("https://uniservices1.uobgroup.com/secure/online_rates/gold_and_silver_prices.jsp");
  web_pg = aResp.read();

  pattern = "&lt;td&gt;&lt;b&gt;SILVER PASSBOOK ACCOUNT&lt;/b&gt;&lt;/td&gt;" + "&lt;td&gt;(.*)&lt;/td&gt;" * 4
  m = re.search(pattern, web_pg)
  if m:
    print "SILVER PASSBOOK ACCOUNT:"
    print "\tCurrency:", m.group(1)
    print "\tUnit:", m.group(2)
    print "\tBank Sells:", m.group(3)
    print "\tBank Buys:", m.group(4)
  else:
    print "Nothing found"
</snippet></ROW><ROW><id>10061685</id><snippet>re.compile</snippet></ROW><ROW><id>10062294</id><snippet>datetime</snippet></ROW><ROW><id>10062294</id><snippet>(month, integer)</snippet></ROW><ROW><id>10062294</id><snippet>for (n, month) in enumerate(u'января, feb, mar, apri, may, jun, jul, aug, sep, oct, nov, декабря'.split(', '), 1):# the parameter 1 specifies to start counting from 1. h/t @san4ez
    if month in date_category['title']: return n
</snippet></ROW><ROW><id>10062334</id><snippet>rasterized</snippet></ROW><ROW><id>10062334</id><snippet>True</snippet></ROW><ROW><id>10062334</id><snippet>import numpy as np
import matplotlib.pyplot as plt 


def add_patch(ax, **kwargs):
    if 'rasterized' in kwargs and kwargs['rasterized']:
        ax.set_rasterization_zorder(0)
    ax.fill_between(np.arange(1, 10), 1, 2, zorder=-1, **kwargs)
    ax.set_xlim(0, 10) 
    ax.set_ylim(0, 3)
    if 'alpha' in kwargs and kwargs['alpha'] &lt; 1:
        txt = 'This patch is transparent!'
    else:
        txt = 'This patch is not transparent!'
    ax.text(5, 1.5, txt, ha='center', va='center', fontsize=25, zorder=-2,
            rasterized=True)

fig, axes = plt.subplots(nrows=4, sharex=True)
add_patch(axes[0], alpha=0.2, rasterized=False)
add_patch(axes[1], alpha=0.2, rasterized=True)
add_patch(axes[2], rasterized=False)
add_patch(axes[3], rasterized=True)

plt.tight_layout()
plt.savefig('rasterized_transparency.eps')
</snippet></ROW><ROW><id>10062334</id><snippet>eps</snippet></ROW><ROW><id>10062448</id><snippet>&gt;&gt;&gt; l = [1,2,3,4]
&gt;&gt;&gt; [it for it in l for _ in range(2)]
[1, 1, 2, 2, 3, 3, 4, 4]
</snippet></ROW><ROW><id>10062718</id><snippet>xlutils</snippet></ROW><ROW><id>10062718</id><snippet>wbook = copy(book)
wbook.dates_1904 = book.datemode
</snippet></ROW><ROW><id>10062718</id><snippet>xlwt</snippet></ROW><ROW><id>10062718</id><snippet>xlwt</snippet></ROW><ROW><id>10062718</id><snippet>dates_1904</snippet></ROW><ROW><id>10062718</id><snippet>datetime.date</snippet></ROW><ROW><id>10062718</id><snippet>datetime.datetime</snippet></ROW><ROW><id>10062718</id><snippet>Row.__excel_date_dt</snippet></ROW><ROW><id>10062718</id><snippet>xlwt</snippet></ROW><ROW><id>10062718</id><snippet>github</snippet></ROW><ROW><id>10062718</id><snippet>def __excel_date_dt(self, date):
    adj = False
    if isinstance(date, dt.date):
        if self.__parent_wb.dates_1904:
            epoch_tuple = (1904, 1, 1)
        else:
            epoch_tuple = (1899, 12, 31)
            adj = True
        if isinstance(date, dt.datetime):
            epoch = dt.datetime(*epoch_tuple)
        else:
            epoch = dt.date(*epoch_tuple)
    else: # it's a datetime.time instance
        epoch = dt.datetime(1900, 1, 1)            
        date = dt.datetime.combine(epoch, date)
    delta = date - epoch
    xldate = delta.days + delta.seconds / 86400.0
    # Add a day for Excel's missing leap day in 1900
    if adj and xldate &gt; 59:
        xldate += 1
    return xldate    
</snippet></ROW><ROW><id>10062718</id><snippet>XML Spreadsheet 2003 (*.xml)</snippet></ROW><ROW><id>10062718</id><snippet>1999-12-31T23:59:59.999</snippet></ROW><ROW><id>10062718</id><snippet>&lt;Date1904/&gt;</snippet></ROW><ROW><id>10063039</id><snippet>r</snippet></ROW><ROW><id>10063039</id><snippet>r["dt"] &gt;= startdate</snippet></ROW><ROW><id>10063039</id><snippet>&amp;</snippet></ROW><ROW><id>10063039</id><snippet>and</snippet></ROW><ROW><id>10063039</id><snippet>True</snippet></ROW><ROW><id>10063039</id><snippet>True</snippet></ROW><ROW><id>10063039</id><snippet>and</snippet></ROW><ROW><id>10063039</id><snippet>mask = ((r["dt"] &gt;= startdate) &amp; (r["dt"] &lt;= enddate))
selected = r[mask]
</snippet></ROW><ROW><id>10063039</id><snippet>and</snippet></ROW><ROW><id>10063039</id><snippet>a and b</snippet></ROW><ROW><id>10063039</id><snippet>(a-b).any()</snippet></ROW><ROW><id>10063039</id><snippet>(a-b).all()</snippet></ROW><ROW><id>10063113</id><snippet>&gt;&gt;&gt; x = u"gcc-4.3.2"
&gt;&gt;&gt; x
u'gcc-4.3.2'
&gt;&gt;&gt; repr(x)
"u'gcc-4.3.2'"
&gt;&gt;&gt; str(x)
'gcc-4.3.2'
</snippet></ROW><ROW><id>10063113</id><snippet>&gt;&gt;&gt; x = u"ĝĝ"
&gt;&gt;&gt; x
u'\u011d\u011d'
&gt;&gt;&gt; repr(x)
"u'\\u011d\\u011d'"
&gt;&gt;&gt; str(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
</snippet></ROW><ROW><id>10063113</id><snippet>repr(x)</snippet></ROW><ROW><id>10063113</id><snippet>&gt;&gt;&gt; x = "u'gcc-4.3.2'"
&gt;&gt;&gt; eval(x)
u'gcc-4.3.2'
</snippet></ROW><ROW><id>10063113</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = "u'gcc-4.3.2' u'C'"
&gt;&gt;&gt; re.findall("u'(.*?)'", x)
['gcc-4.3.2', 'C']
</snippet></ROW><ROW><id>10063113</id><snippet>u''</snippet></ROW><ROW><id>10063113</id><snippet>.*?</snippet></ROW><ROW><id>10063113</id><snippet>["gcc-4.3.2' u'C"]</snippet></ROW><ROW><id>10063249</id><snippet>if</snippet></ROW><ROW><id>10063249</id><snippet>        if turns == 0:
        print ('The answer is'), (secretWord)
</snippet></ROW><ROW><id>10063249</id><snippet>        if turns == 0:
            print ('The answer is'), (secretWord)
</snippet></ROW><ROW><id>10063450</id><snippet>imshow()</snippet></ROW><ROW><id>10063450</id><snippet>&gt;&gt;&gt; rgba_values = cm.gray(y)  # All RGBA values for your input value, with levels of gray
&gt;&gt;&gt; rgba_values[x != y] = [0, 1, 0, 1]  # Set the points where x and y differ to green (RBG = 0, 1, 0)
&gt;&gt;&gt; imshow(rgba_values, interpolation='nearest')
</snippet></ROW><ROW><id>10063450</id><snippet>x</snippet></ROW><ROW><id>10063450</id><snippet>y</snippet></ROW><ROW><id>10063450</id><snippet>&gt;&gt;&gt; y_gray = cm.gray(y)  # RGBA image with gray levels
&gt;&gt;&gt; imshow(y_gray, interpolation='nearest')  # Image of one of the arrays
&gt;&gt;&gt; diff_points = numpy.empty_like(y_gray)  # Preparation of an overlay with marked points only
&gt;&gt;&gt; diff_points[x == y, 3] = 0  # Common points not overwritten: alpha layer set to 0
&gt;&gt;&gt; diff_points[x != y] = [0, 1, 0, 1]  # Green for points that differ
&gt;&gt;&gt; imshow(diff_points, interpolation='nearest')
</snippet></ROW><ROW><id>10063467</id><snippet>CREATE OR REPLACE function enum_hstore(in_h hstore) returns void
as $$
declare
  kv record;
begin
  for kv in select * from (select (each(in_h)).*) as f(k,v) loop
    raise notice 'key=%,value=%',kv.k,kv.v;
  end loop;
end
$$ language plpgsql;
</snippet></ROW><ROW><id>10063467</id><snippet>  select enum_hstore(
    hstore('c',current_timestamp::text) ||
    'a=&gt;2,b=&gt;5'::hstore
  );
</snippet></ROW><ROW><id>10063484</id><snippet>from time import sleep
delay = 0.5
tlist = [threading.Thread(target=search_sl, args=(ra,dec, q)) for ra, dec in candidates ]
map(lambda t:t.start(), tlist)
while(any(map(lambda t:t.isAlive()))): sleep(delay)
</snippet></ROW><ROW><id>10063484</id><snippet>from Queue import Queue
from threading import Thread
from time import sleep
tasks = Queue()
map(tasks.put, candidates)
maxthreads = 50
delay = 0.1
try:
    threads = [Thread(target=search_sl, args=tasks.get()) \
               for i in xrange(0,maxthreads) ]
except Queue.Empty:
    pass
map(lambda t:t.start(), threads)

while not tasks.empty():
    threads = filter(lambda t:t.isAlive(), threads)
    while len(threads) &lt; maxthreads:
        try:
            t = Thread(target=search_sl, args=tasks.get())
            t.start()
            threads.append(t)
        except Queue.Empty:
            break
    sleep(delay)

while(any(map(lambda t:t.isAlive(), threads))): sleep(delay)
</snippet></ROW><ROW><id>10063612</id><snippet>(a // b) * b + (a % b) == a</snippet></ROW><ROW><id>10063612</id><snippet>a % b</snippet></ROW><ROW><id>10063612</id><snippet>b</snippet></ROW><ROW><id>10063612</id><snippet>-8 // 5</snippet></ROW><ROW><id>10063612</id><snippet>-8 % 5</snippet></ROW><ROW><id>10063688</id><snippet>git clone https://github.com/scipy/scipy.git; cd scipy
export ARCHFLAGS='-arch i386 -arch x86_64'
python setup.py config
python setup.py build
sudo python setup.py install
</snippet></ROW><ROW><id>10063688</id><snippet>brew install gfortran</snippet></ROW><ROW><id>10063744</id><snippet>class Node:

    def __init__(self):
        self.pred = set()
        self.suce = set()

    def addSucessor(self, node):
        self.suce.add(node)
        node.pred.add(self)
</snippet></ROW><ROW><id>10063746</id><snippet>permissions</snippet></ROW><ROW><id>10063746</id><snippet>class Task(models.Model):
    ...
    class Meta:
        permissions = (
            ("view_task", "Can see available tasks"),
            ("change_task_status", "Can change the status of tasks"),
            ("close_task", "Can remove a task by setting its status as closed"),
        )
</snippet></ROW><ROW><id>10063875</id><snippet>import itertools
# Example: line = ['A','B','%']
def line_permutations(line):
   if '%' not in line:
       return [line]
   line.remove('%') # use copy.copy if you don't want to modify your matrix here
   return (line[:i] + ['%'] + line[i:] for i in range(len(line) + 1))
</snippet></ROW><ROW><id>10063875</id><snippet>matrix = [['A','B','%'], ['C', '%', 'D'], ['E', 'F', 'G']]
permutations = itertools.product(*[line_permutations(line) for line in matrix])
for p in permutations:
    print(p)
</snippet></ROW><ROW><id>10063875</id><snippet>(['%', 'A', 'B'], ['%', 'C', 'D'], ['E', 'F', 'G'])
(['%', 'A', 'B'], ['C', '%', 'D'], ['E', 'F', 'G'])
(['%', 'A', 'B'], ['C', 'D', '%'], ['E', 'F', 'G'])
(['A', '%', 'B'], ['%', 'C', 'D'], ['E', 'F', 'G'])
(['A', '%', 'B'], ['C', '%', 'D'], ['E', 'F', 'G'])
(['A', '%', 'B'], ['C', 'D', '%'], ['E', 'F', 'G'])
(['A', 'B', '%'], ['%', 'C', 'D'], ['E', 'F', 'G'])
(['A', 'B', '%'], ['C', '%', 'D'], ['E', 'F', 'G'])
(['A', 'B', '%'], ['C', 'D', '%'], ['E', 'F', 'G'])
</snippet></ROW><ROW><id>10064064</id><snippet>import imaplib
from email.parser import HeaderParser

conn = imaplib.IMAP4_SSL('imap.gmail.com')
conn.login('username@gmail.com', 'password')

# Select the mail box
status, messages = conn.select('INBOX')

if status != "OK":
    print "Incorrect mail box"
    exit()

if int(messages[0]) &gt; 0:

    for message_number in range(1,int(messages[0])+1):  
        data = conn.fetch(message_number, '(BODY[HEADER])')
        parser = HeaderParser()
        msg = parser.parsestr(data[1][0][1])
        print "Subject: %s" % msg['subject']
        print "From: %s" % msg['from']
</snippet></ROW><ROW><id>10064198</id><snippet>&gt;&gt;&gt; help(Exception)
Help on class Exception in module exceptions:

class Exception(BaseException)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      Exception
 |      BaseException
 |      __builtin__.object
</snippet></ROW><ROW><id>10064198</id><snippet>try:
   ...
except:
    import sys
    error_type, error, traceback = sys.exc_info()
</snippet></ROW><ROW><id>10064198</id><snippet>&gt;&gt;&gt; SystemExit.mro()
[&lt;type 'exceptions.SystemExit'&gt;, &lt;type 'exceptions.BaseException'&gt;, &lt;type 'object'&gt;]
</snippet></ROW><ROW><id>10064227</id><snippet>&gt;&gt;&gt; letters = "Cde"
&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt; letters.lower() in ascii_lowercase
True
&gt;&gt;&gt; letters = "Abg"
&gt;&gt;&gt; letters.lower() in ascii_lowercase
False  
</snippet></ROW><ROW><id>10064227</id><snippet>string.find()</snippet></ROW><ROW><id>10064227</id><snippet>&gt;&gt;&gt; letters = "lmn"
&gt;&gt;&gt; ascii_lowercase.find(letters) != -1
True
</snippet></ROW><ROW><id>10064227</id><snippet>def checkSequence(*letters):
    return ''.join(letters).lower() in ascii_lowercase
</snippet></ROW><ROW><id>10064249</id><snippet>-u</snippet></ROW><ROW><id>10064273</id><snippet>*args</snippet></ROW><ROW><id>10064273</id><snippet>self</snippet></ROW><ROW><id>10064273</id><snippet>args[0]</snippet></ROW><ROW><id>10064273</id><snippet>def wrapper(self, *args, **kwargs):
    # ...
</snippet></ROW><ROW><id>10064273</id><snippet>self</snippet></ROW><ROW><id>10064353</id><snippet>%cstring_output_allocate</snippet></ROW><ROW><id>10064353</id><snippet>char **output</snippet></ROW><ROW><id>10064353</id><snippet>output</snippet></ROW><ROW><id>10064353</id><snippet>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

void some_method(char **output, int paramA, const char *paramB, int paramC)
{
    *output = malloc(paramA);
    sprintf_s(*output,paramA,"%s_%d",paramB,paramC);
}

int some_method2(char **output, int paramA, const char *paramB, int paramC)
{
    *output = malloc(paramA);
    sprintf_s(*output,paramA,"%s_%d",paramB,paramC);
    return strlen(*output);
}
</snippet></ROW><ROW><id>10064353</id><snippet>void some_method(char **output, int paramA, const char *paramB, int paramC);
int some_method2(char **output, int paramA, const char *paramB, int paramC);
</snippet></ROW><ROW><id>10064353</id><snippet>%module x

%begin %{
#pragma warning(disable:4100 4127 4211 4706)
%}

%{
#include "x.h"
%}

%include&lt;cstring.i&gt;
%cstring_output_allocate(char **output, free(*$1));
%include "x.h"
</snippet></ROW><ROW><id>10064353</id><snippet>_x.pyd: x.c x_wrap.c x.h
    cl /LD /W4 /MD /Ic:\python27\include x.c x_wrap.c -link /LIBPATH:c:\python27\libs

x_wrap.c: x.i x.h
    swig -python x.i
</snippet></ROW><ROW><id>10064353</id><snippet>Python 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import x
&gt;&gt;&gt; x.some_method(100,'blah',123)
'blah_123'
&gt;&gt;&gt; x.some_method2(100,'blah',123)
[8, 'blah_123']
</snippet></ROW><ROW><id>10064565</id><snippet>from itertools import chain
'\n'.join('\t'.join(map(str,tuple(chain(*i)))) for i in s)
</snippet></ROW><ROW><id>10064565</id><snippet>chain</snippet></ROW><ROW><id>10064703</id><snippet>print self._haircolor
</snippet></ROW><ROW><id>10064812</id><snippet>if __name__ == "__main__":
    # Your main script code
</snippet></ROW><ROW><id>10064812</id><snippet>if</snippet></ROW><ROW><id>10064812</id><snippet>__name__</snippet></ROW><ROW><id>10064812</id><snippet>glonk.py</snippet></ROW><ROW><id>10064812</id><snippet>__name__</snippet></ROW><ROW><id>10064812</id><snippet>"glonk"</snippet></ROW><ROW><id>10064812</id><snippet>"__main__"</snippet></ROW><ROW><id>10065003</id><snippet>unhexify</snippet></ROW><ROW><id>10065003</id><snippet>hexify</snippet></ROW><ROW><id>10065003</id><snippet>(defn hexify [s]
  (format "%x" (new java.math.BigInteger (.getBytes s))))
</snippet></ROW><ROW><id>10065345</id><snippet>extra</snippet></ROW><ROW><id>10065345</id><snippet>self.username</snippet></ROW><ROW><id>10065345</id><snippet>import Tkinter as tki # Tkinter -&gt; tkinter in Python 3

class GUI(tki.Tk):
    def __init__(self):
        tki.Tk.__init__(self)
        self.username = 'Bob' # a default name

        button0 = tki.Button(self, text='Set user', command=self.msg_box)
        button0.pack()

        # notice that lambda allows us to pass args
        button1 = tki.Button(self, text='Show user',
                            command=lambda: self.msg_box(self.username, False))
        button1.pack()

    def msg_box(self, msg='User name?', extra=True):
        top = self.top = tki.Toplevel(self)
        label0 = tki.Label(top, text=msg)
        label0.pack()

        if extra:
            self.entry0 = tki.Entry(top)
            self.entry0.pack()

            button2 = tki.Button(top, text='Submit', command=self.submit_name)
            button2.pack()

        button3 = tki.Button(top, text='Cancel',
                                command=lambda: self.top.destroy())
        button3.pack()

    def submit_name(self):
        data = self.entry0.get()
        if data:
            self.username = data
            self.top.destroy()

gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>10065345</id><snippet>Tkinter.Tk</snippet></ROW><ROW><id>10065345</id><snippet>mbox.py</snippet></ROW><ROW><id>10065345</id><snippet>your_python_folder\Lib\site-packages</snippet></ROW><ROW><id>10065345</id><snippet>import Tkinter as tki # Tkinter -&gt; tkinter in Python 3

class MessageBox(tki.Tk):

    def __init__(self, info, b0, b1, frame, t, entry):
        tki.Tk.__init__(self)
        self.title('Message')
        # flag for the b0_action method
        self.entry = entry
        # save for if the user wants to copy the info to clipboard
        self.info = info
        # remove the outer frame if arg frame=False
        if not frame:
            self.overrideredirect(True)
        # default values for the buttons to return
        self.b0r = True
        self.b1r = False
        # if the b0 or b1 args are tuples
        if isinstance(b0, tuple):
            b0, self.b0r = b0
        if isinstance(b1, tuple):
            b1, self.b1r = b1
        # main frame
        frame0 = tki.Frame(self, relief='ridge', bd=3, bg='lightgrey')
        frame0.pack(ipadx=2, ipady=2)
        # the message
        label0 = tki.Label(frame0, text=info, bg='lightgrey')
        label0.pack(padx=8, pady=8)
        # if arg entry=True create an entry
        if entry:
            self.entry0 = tki.Entry(frame0)
            self.entry0.pack()
        # button frame
        frame1 = tki.Frame(frame0, relief='ridge', bd=3, bg='lightgrey')
        frame1.pack(padx=4, pady=4)

        button0 = tki.Button(frame1, width=8, text=b0, relief='groove',
                   bd=4, command=self.b0_action)
        button0.pack(side='left')

        button1 = tki.Button(frame1, width=8, text=b1, relief='groove',
                    bd=4, command=self.b1_action)
        button1.pack(side='left')
        # allows the enter button to fire either button's action
        button0.bind('&lt;KeyPress-Return&gt;', func=self.b0_action)
        button1.bind('&lt;KeyPress-Return&gt;', func=self.b1_action)
        # ctrl+c to copy the message
        self.bind('&lt;Control-c&gt;', func=self.toclip)
        # center the box on screen
        self.update_idletasks()
        xp = (self.winfo_screenwidth() / 2) - (self.winfo_width() / 2) - 8
        yp = (self.winfo_screenheight() / 2) - (self.winfo_height() / 2) - 20
        glist = [self.winfo_width(), self.winfo_height(), xp, yp]
        self.geometry('{0}x{1}+{2}+{3}'.format(*glist))
        # start with button0 focused
        button0.focus_set()
        # allows us to customize what happens when the close button is pressed
        self.protocol("WM_DELETE_WINDOW", self.xclose)
        # if arg t is specified: call time_out after t milliseconds
        if t:
            self.after(t, func=self.time_out)

    def time_out(self):
        self.v = None
        self.quit()

    def b0_action(self, event=None):
        # if there is an entry, get its value to return
        if self.entry:
            self.v = self.entry0.get()
            self.quit()
        else:
            self.v = self.b0r
            self.quit()

    def b1_action(self, event=None):
        self.v = self.b1r
        self.quit()

    def toclip(self, event=None):
        self.clipboard_clear()
        self.clipboard_append(self.info)

    # What you want to happen when the top right close button is pressed
    def xclose(self):
        pass
</snippet></ROW><ROW><id>10065345</id><snippet>def box(info, b0='OK', b1='Cancel', frame=True, t=False, entry=False):
    """Create an instance of MessageBox,
        and get data back from the user."""
    abox = MessageBox(str(info),b0,b1,frame,t,entry)
    abox.mainloop()
    data = abox.v
    abox.destroy()
    return data
</snippet></ROW><ROW><id>10065345</id><snippet>self.quit()</snippet></ROW><ROW><id>10065345</id><snippet>abox.v</snippet></ROW><ROW><id>10065345</id><snippet>mbox.box(info, b0='OK', b1='Cancel', frame=True, t=False, entry=False)</snippet></ROW><ROW><id>10065345</id><snippet>info</snippet></ROW><ROW><id>10065345</id><snippet>b0</snippet></ROW><ROW><id>10065345</id><snippet>b1</snippet></ROW><ROW><id>10065345</id><snippet>frame</snippet></ROW><ROW><id>10065345</id><snippet>t</snippet></ROW><ROW><id>10065345</id><snippet>entry</snippet></ROW><ROW><id>10065345</id><snippet>import mbox

user = dict()
mbox.box('starting in 1 second...', t=1000)
user['name'] = mbox.box('name?', entry=True)
if user['name']:
    user['sex'] = mbox.box('male or female?', ('male', 'm'), ('female', 'f'))
    mbox.box(user, frame=False)
</snippet></ROW><ROW><id>10065345</id><snippet>mbox.py</snippet></ROW><ROW><id>10065345</id><snippet>your_python_folder\Lib\site-packages</snippet></ROW><ROW><id>10065345</id><snippet>import Tkinter as tki # Tkinter -&gt; tkinter in Python 3

def tbox(master):
    class TBOX(object):
        def __init__(self, info):
            self.msgbox = tki.Toplevel(master)
            label0 = tki.Label(self.msgbox, text=info)
            label0.pack()
            self.entry0 = tki.Entry(self.msgbox)
            self.entry0.pack()
            button0 = tki.Button(self.msgbox, text='OK',
                                    command=self.b0_action)
            button0.pack()

        def b0_action(self):
            master.username = self.entry0.get()
            self.msgbox.destroy()
    return TBOX
</snippet></ROW><ROW><id>10065345</id><snippet>import mbox
tki = mbox.tki

class GUI(tki.Tk):
    def __init__(self):
        tki.Tk.__init__(self)
        self.username = 'Bob'
        self.box = mbox.tbox(self)

        button0 = tki.Button(self, text='Log in',
                                command=lambda: self.box('Name?'))
        button0.pack()

        button1 = tki.Button(self, text='Logged in',
                                command=lambda: self.box(self.username))
        button1.pack()

gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>10065445</id><snippet>if x in (1, 5, 10, 22):
    pass
</snippet></ROW><ROW><id>10065445</id><snippet>myset = set((1, 5, 10, 22))

[...]

if x in myset:
    pass
</snippet></ROW><ROW><id>10065445</id><snippet>myset</snippet></ROW><ROW><id>10065726</id><snippet>if {'upload', 'delete'} &amp; set(request.POST):
</snippet></ROW><ROW><id>10065726</id><snippet>if {'upload', 'delete'}.intersection(request.POST):
</snippet></ROW><ROW><id>10065732</id><snippet>dropbox status</snippet></ROW><ROW><id>10065732</id><snippet>dropbox filestatus</snippet></ROW><ROW><id>10065835</id><snippet>WWW-Authenticate</snippet></ROW><ROW><id>10066055</id><snippet>import math
def calculate_area(func):
    def _area(a, b):
        return a + b
    return _area

class Donut():
    def __init__(self, outer, inner):
        self.inner = inner
        self.outer = outer

    @staticmethod
    @calculate_area
    def area(cls):
        outer, inner = self.radius, self.inner
        return ""
</snippet></ROW><ROW><id>10066059</id><snippet>reachable = graph[node]</snippet></ROW><ROW><id>10066178</id><snippet>su</snippet></ROW><ROW><id>10066178</id><snippet>sudo</snippet></ROW><ROW><id>10066360</id><snippet>cmd = ['/path/to/casperjs', '/path/to/doSomething.js', 'args']
response = subprocess.check_output(cmd, 
                shell=True,
                stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>10066382</id><snippet>Q</snippet></ROW><ROW><id>10066382</id><snippet>from django.db.models import Q
results = MyModel.objects.filter(Q(name='daniel') | Q(status='fantastic'))
</snippet></ROW><ROW><id>10066382</id><snippet>=</snippet></ROW><ROW><id>10066382</id><snippet>results = MyModel.objects.filter(user__name='daniel')
</snippet></ROW><ROW><id>10066382</id><snippet>Order.objects.filter(Q(vendor__managers=my_user) | 
                     Q(vendor__representatives=my_user))
</snippet></ROW><ROW><id>10066393</id><snippet>&gt;&gt;&gt; def f(x):
...     return x**2
... 
&gt;&gt;&gt; map(f, range(5))
[0, 1, 4, 9, 16]
</snippet></ROW><ROW><id>10066393</id><snippet>&gt;&gt;&gt; [x ** 2 for x in range(5)]
[0, 1, 4, 9, 16]
</snippet></ROW><ROW><id>10066403</id><snippet>parse()</snippet></ROW><ROW><id>10066403</id><snippet>ConsecutiveNPChunker</snippet></ROW><ROW><id>10066403</id><snippet>eval()</snippet></ROW><ROW><id>10066403</id><snippet>ChunkParserI</snippet></ROW><ROW><id>10066434</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>10066434</id><snippet>micopiloto</snippet></ROW><ROW><id>10066434</id><snippet>micopiloto.views.home</snippet></ROW><ROW><id>10066588</id><snippet>ForeignKey</snippet></ROW><ROW><id>10066661</id><snippet>result = set(p[0])
for s in p[1:]:
    result.intersection_update(s)
print result
</snippet></ROW><ROW><id>10066799</id><snippet>:class:`.ReallyLongExampleClassName`
</snippet></ROW><ROW><id>10066799</id><snippet>:class:`.module5.ReallyLongExampleClassName`
</snippet></ROW><ROW><id>10066799</id><snippet>.TarFile.close</snippet></ROW><ROW><id>10066846</id><snippet>.index(i)</snippet></ROW><ROW><id>10066919</id><snippet>QStyledItemDelegate.paint(self, painter, option, index)
</snippet></ROW><ROW><id>10066919</id><snippet>drawComplexControl</snippet></ROW><ROW><id>10066932</id><snippet>&gt;&gt;&gt;import re
&gt;&gt;&gt;test = ["accounts/confirm/fb75c6529af9246e4e048d8a4298882909dc03ee0/", "accounts/confirm/fb75c6529af9246e4e-048d8a4298882909dc03ee0/", "accounts/confirm/fb75c6529af9246e4e=048d8a4298882909dc03ee0/", "accounts/confirm/fb75c6529af9246e4e%20048d8a4298882909dc03ee0/"]
&gt;&gt;&gt;all([re.match(r'^accounts/confirm/(.+)$', item) for item in test])
True
</snippet></ROW><ROW><id>10066932</id><snippet>&gt;&gt;&gt;test.append("something else")
&gt;&gt;&gt;all([re.match(r'^accounts/confirm/(.+)$', item) for item in test])
False
</snippet></ROW><ROW><id>10067021</id><snippet>None</snippet></ROW><ROW><id>10067021</id><snippet>except</snippet></ROW><ROW><id>10067021</id><snippet>None</snippet></ROW><ROW><id>10067021</id><snippet>None</snippet></ROW><ROW><id>10067109</id><snippet>from xml.dom.minidom import Document

# Get all lineEdit values
elements = dict(
    mac = self.lineEdit_mac.text,
    broadcast = self.lineEdit_broadcast.text,
    destination = self.lineEdit_destination.text,
    port = self.lineEdit_port.text,
    destinationCheckBox = self.checkBox_destination.checkState,
    portCheckBox = self.checkBox_port.checkState
)

doc = Document()
wol = doc.createElement("wol")
doc.appendChild(wol)

for name, fn in elements.iteritems():
    node = doc.createElement(name)
    wol.appendChild(node)

    text = str(fn())
    nodeText = doc.createTextNode(text)
    node.appendChild(nodeText)

with open(fileName, 'w') as f:
    doc.writexml(f, indent='', addindent='  ', newl='\n')
</snippet></ROW><ROW><id>10067109</id><snippet>import json

elements = dict(
    mac = self.lineEdit_mac.text,
    broadcast = self.lineEdit_broadcast.text,
    destination = self.lineEdit_destination.text,
    port = self.lineEdit_port.text,
    destinationCheckBox = self.checkBox_destination.checkState,
    portCheckBox = self.checkBox_port.checkState
)

with open(fileName, 'w') as f:
    # if you need the root key
    data = {'wol': dict((name, str(fn())) for name, fn in elements.iteritems())}
    json.dump(data, f, indent=4)

    # or, just the key/values
    #json.dump(elements, f, indent=4, default=lambda o: str(o()))
</snippet></ROW><ROW><id>10067109</id><snippet>elements = (
    ('mac', self.lineEdit_mac.text),
    ('broadcast', self.lineEdit_broadcast.text),
    ('destination', self.lineEdit_destination.text),
    ('port', self.lineEdit_port.text),
    ('destinationCheckBox', self.checkBox_destination.checkState),
    ('portCheckBox', self.checkBox_port.checkState)
)

# and remove .iteritems() where previously used
for name, fn in elements:
</snippet></ROW><ROW><id>10067167</id><snippet>(value,)</snippet></ROW><ROW><id>10067167</id><snippet>()
(value,)
(value, value)
(value, value, value)
</snippet></ROW><ROW><id>10067167</id><snippet>%s</snippet></ROW><ROW><id>10067167</id><snippet>'foo %s' % 'bar'
</snippet></ROW><ROW><id>10067167</id><snippet>foo bar</snippet></ROW><ROW><id>10067167</id><snippet>psycopg</snippet></ROW><ROW><id>10067167</id><snippet>cursor.execute</snippet></ROW><ROW><id>10067232</id><snippet>result</snippet></ROW><ROW><id>10067232</id><snippet>pylint zorg.py
************* Module zorg
W0612:  5:zorg: Unused variable 'result'
</snippet></ROW><ROW><id>10067232</id><snippet>result</snippet></ROW><ROW><id>10067281</id><snippet>multiprocessing</snippet></ROW><ROW><id>10067281</id><snippet>map()</snippet></ROW><ROW><id>10067281</id><snippet>threading</snippet></ROW><ROW><id>10067281</id><snippet>multiprocessing</snippet></ROW><ROW><id>10067313</id><snippet>root</snippet></ROW><ROW><id>10067313</id><snippet>root</snippet></ROW><ROW><id>10067313</id><snippet>root</snippet></ROW><ROW><id>10067313</id><snippet>postgres</snippet></ROW><ROW><id>10067313</id><snippet>root</snippet></ROW><ROW><id>10067313</id><snippet>chown(1)</snippet></ROW><ROW><id>10067313</id><snippet>find /path/to/top -type f -print0 | xargs -0 chown postgres</snippet></ROW><ROW><id>10067313</id><snippet>groupadd(8)</snippet></ROW><ROW><id>10067313</id><snippet>find /path/to/top -print0 | xargs -0 chgrp group_name</snippet></ROW><ROW><id>10067313</id><snippet>mount(8)</snippet></ROW><ROW><id>10067313</id><snippet>bsdgroups</snippet></ROW><ROW><id>10067313</id><snippet>mount(8)</snippet></ROW><ROW><id>10067313</id><snippet>bsdgroups</snippet></ROW><ROW><id>10067313</id><snippet>/etc/fstab</snippet></ROW><ROW><id>10067313</id><snippet>bsdgroups</snippet></ROW><ROW><id>10067313</id><snippet>mount -oremount,bsdgroups /path/to/mount/point</snippet></ROW><ROW><id>10067313</id><snippet>setgid</snippet></ROW><ROW><id>10067313</id><snippet>find /path/to/top -type d -print0 | xargs -0 chmod g+s</snippet></ROW><ROW><id>10067313</id><snippet>umask(2)</snippet></ROW><ROW><id>10067313</id><snippet>umask(2)</snippet></ROW><ROW><id>10067313</id><snippet>umask(2)</snippet></ROW><ROW><id>10067313</id><snippet>umask 0022</snippet></ROW><ROW><id>10067313</id><snippet>write</snippet></ROW><ROW><id>10067313</id><snippet>write</snippet></ROW><ROW><id>10067363</id><snippet>from types import FunctionType

# check if an object should be decorated
def do_decorate(attr, value):
    return ('__' not in attr and
            isinstance(value, FunctionType) and
            getattr(value, 'decorate', True))

# decorate all instance methods (unless excluded) with the same decorator
def decorate_all(decorator):
    class DecorateAll(type):
        def __new__(cls, name, bases, dct):
            for attr, value in dct.iteritems():
                if do_decorate(attr, value):
                    dct[attr] = decorator(value)
            return super(DecorateAll, cls).__new__(cls, name, bases, dct)
        def __setattr__(self, attr, value):
            if do_decorate(attr, value):
                value = decorator(value)
            super(DecorateAll, self).__setattr__(attr, value)
    return DecorateAll

# decorator to exclude methods
def dont_decorate(f):
    f.decorate = False
    return f
</snippet></ROW><ROW><id>10067363</id><snippet>def printer(f):
    print f
    return f

class Foo(object):
    __metaclass__ = decorate_all(printer)
    def bar(self):
        pass
    @dont_decorate
    def baz(self):
        pass
    @classmethod
    def test(self):
        pass
# prints
# &lt;function bar at 0x04EB59B0&gt;

class AnotherName(Foo):
    def blah(self):
        pass
# prints
# &lt;function blah at 0x04EB5930&gt;

Foo.qux = lambda: 1
# prints
# &lt;function &lt;lambda&gt; at 0x04EB57F0&gt;
</snippet></ROW><ROW><id>10067546</id><snippet>THUMBNAIL_DEBUG = True</snippet></ROW><ROW><id>10067546</id><snippet>settings.py</snippet></ROW><ROW><id>10067546</id><snippet>virualenv</snippet></ROW><ROW><id>10067546</id><snippet>PIL</snippet></ROW><ROW><id>10067546</id><snippet>PIL</snippet></ROW><ROW><id>10067546</id><snippet>jpeg</snippet></ROW><ROW><id>10067546</id><snippet>png/gif</snippet></ROW><ROW><id>10067546</id><snippet>libjpeg</snippet></ROW><ROW><id>10067546</id><snippet>zlib</snippet></ROW><ROW><id>10067546</id><snippet>django.db.models.ImageField</snippet></ROW><ROW><id>10067546</id><snippet>image = models.ImageField(upload_to="uploads")
</snippet></ROW><ROW><id>10067546</id><snippet>image = ImageField(upload_to="uploads")
</snippet></ROW><ROW><id>10067546</id><snippet>sorl.thumbnail.ImageField</snippet></ROW><ROW><id>10067691</id><snippet>def has_roles(user, roles):
    return user.profile.user_types.filter(pk__in=roles).count() == len(roles)

print has_roles(user, [6,7,8])
</snippet></ROW><ROW><id>10067691</id><snippet>class UserType( models.Model ):
    TYPES = (( 'tenant', 'Tenant'),
             ( 'propman', 'Property Manager'),
             ( 'propown', 'Property Owner'),
             ( 'vendman', 'Vendor Manager'),
             ( 'vendor', 'Vendor'),
             ( 'viewer', 'Viewer'),
             ( 'moderator', 'Moderator'),
             ( 'admin', 'Administrator'))

    name = models.CharField( max_length = 135, choices=TYPES )

def has_role(user, role):
    return user.profile.user_types.filter(name=role).count() == 1

def has_roles(user, roles):
    return user.profile.user_types.filter(name__in=roles).count() == len(roles)

print has_roles(user, ['viewer','moderator','admin'])
</snippet></ROW><ROW><id>10067691</id><snippet>class UserProfile( models.Model ) :
    user       = models.OneToOneField( User )
    user_types = models.ManyToManyField( UserType, null = True, blank = True )


    def has_role(self, role):
        return self.user_types.filter(name=role).count() == 1

    def has_roles(self, roles):
        return self.user_types.filter(name__in=roles).count() == len(roles)
</snippet></ROW><ROW><id>10067691</id><snippet>u = User.objects.get(username='me')
if u.userprofile.has_role('admin'):
    print 'I have the powah!'
</snippet></ROW><ROW><id>10067804</id><snippet>def mywidget(field, value):
    return CAT(INPUT(_name=field.name,
                     _id='%s_%s' % (field._tablename, field.name),
                     _class=field.type,
                     _value=value, requires=field.requires),
               A('Add', _onclick='add()'),
               A('Remove', _onclick='remove()'))
...

Field('yourref', type='string', label=T('Your reference'),
      widget=mywidget)
</snippet></ROW><ROW><id>10067804</id><snippet>form = crud.create(db.mytable)
form.element('#mytable_myfield__row .w2p_fw').append(A('Add', _onclick='add()'))
form.element('#mytable_myfield__row .w2p_fw').append(A('Remove', _onclick='remove()'))
</snippet></ROW><ROW><id>10068206</id><snippet>from distutils.core import setup, Extension

setup(name="pysomap",
      version="2007.07",
      url ="http://web.vscht.cz/spiwokv/pysomap/",
      description="A library for isometric feature mapping.",
      license='Unknown',
      author="Vojtech Spiwok",
      py_modules=["floyd", "pysomap"],
      ext_modules=[Extension('_floyd', ["floyd_wrap.c", "floyd.c"])]
      )
</snippet></ROW><ROW><id>10068206</id><snippet>_floyd</snippet></ROW><ROW><id>10068206</id><snippet>python setup.py build_ext --inplace
</snippet></ROW><ROW><id>10068206</id><snippet>python demo.py

Calculating distance matrix ............    2.24 s
Using epsilon-isomap, epsilon = 0.500000, calculating 2-dimensional embedding
Calculating graph matrix ...............    1.21 s
Calculating the shortest path matrix ...    2.22 s
Multidimensionally scalling ............    7.11 s
--------------------------------------------------
Total procedure ........................   12.79 s
</snippet></ROW><ROW><id>10068221</id><snippet>import pygame,time,sys

#pygame.init()
pygame.mixer.init(frequency=22050, size=-16, channels=2, buffer=4096)
print "Mixer settings", pygame.mixer.get_init()
print "Mixer channels", pygame.mixer.get_num_channels()
pygame.mixer.music.set_volume(1.0)
pygame.mixer.music.load("2.mp3")
pygame.mixer.music.play()

clock = pygame.time.Clock()
while pygame.mixer.music.get_busy():
   # check if playback has finished
   clock.tick(30)
</snippet></ROW><ROW><id>10068307</id><snippet>d = {'a': ['num_1', 'num_2'], 'b': ['num_1'], 'c': ['num_1', 'num_2', 'num_3']}

vals = d.values()
uniq = set(vals[0])

for lst in vals[1:]:
    uniq.intersection_update(lst)

# now `uniq` holds the intersected values:
print uniq
&gt; set(['num_1'])

# to get the result as a list:
uniq = list(uniq)
print uniq
&gt; ['num_1']
</snippet></ROW><ROW><id>10068423</id><snippet>/usr/local/lib/pytho...pport/pip-1.1.tar.gz</snippet></ROW><ROW><id>10068423</id><snippet>easy_install -U pip</snippet></ROW><ROW><id>10068524</id><snippet>hat\.</snippet></ROW><ROW><id>10068524</id><snippet>hat</snippet></ROW><ROW><id>10068524</id><snippet>hat</snippet></ROW><ROW><id>10068524</id><snippet>hat.</snippet></ROW><ROW><id>10068524</id><snippet>hat\.</snippet></ROW><ROW><id>10068524</id><snippet>hat\.?</snippet></ROW><ROW><id>10068524</id><snippet>hat\.|hat</snippet></ROW><ROW><id>10068524</id><snippet>.</snippet></ROW><ROW><id>10068524</id><snippet>\bhat\.\b</snippet></ROW><ROW><id>10068524</id><snippet>hat.x</snippet></ROW><ROW><id>10068524</id><snippet>hat</snippet></ROW><ROW><id>10068708</id><snippet>del()</snippet></ROW><ROW><id>10068708</id><snippet>__del__()</snippet></ROW><ROW><id>10068708</id><snippet>class DelTest(object):
    def __init__(self):
        print "__init__() called: object %08x created" % id(self)
    def __del__(self):
        print "__del__() called: object %08x destroyed" % id(self)

print "begin"
print "creating object, binding to name d"
d = DelTest()
print "adding reference bound to name x"
x = d
print "adding reference bound to lst[0]"
lst = []
lst.append(d)
print "deleting lst"
del(lst)
print "deleting x"
del(x)
print "deleting d"
del(d)
print "end"
</snippet></ROW><ROW><id>10068708</id><snippet>begin
creating object, binding to name d
__init__() called: object 01e4db50 created
adding reference bound to name x
adding reference bound to lst[0]
deleting lst
deleting x
deleting d
__del__() called: object 01e4db50 destroyed
end
</snippet></ROW><ROW><id>10068734</id><snippet>key</snippet></ROW><ROW><id>10068734</id><snippet>min</snippet></ROW><ROW><id>10068734</id><snippet>minVal = min(dict, key=dict.get) # note no parentheses
</snippet></ROW><ROW><id>10068734</id><snippet>minVal = min(dict, key=lambda i: sum(dict[i]))
</snippet></ROW><ROW><id>10068818</id><snippet>.*</snippet></ROW><ROW><id>10068818</id><snippet>import re

regex = re.compile('LAT...LON([0-9\s]+)', flags=re.MULTILINE)
matches = regex.search('''LAT...LON 3153 10127 3153 10118 3152 10118 3142 10122
      3141 10127 3152 10127
TIME...MOT...LOC 0102Z 355DEG 11KT 3148 10125''')
print re.split('\s+', matches.group(1))[1:-1]
</snippet></ROW><ROW><id>10068818</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; 
&gt;&gt;&gt; regex = re.compile('LAT...LON([0-9\s]+)', flags=re.MULTILINE)
&gt;&gt;&gt; matches = regex.search('''LAT...LON 3153 10127 3153 10118 3152 10118 3142 10122
...       3141 10127 3152 10127
... TIME...MOT...LOC 0102Z 355DEG 11KT 3148 10125''')
&gt;&gt;&gt; print re.split('\s+', matches.group(1))[1:-1]
['3153', '10127', '3153', '10118', '3152', '10118', '3142', '10122', '3141', '10127', '3152', '10127']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10069111</id><snippet>for line in file_obj</snippet></ROW><ROW><id>10069111</id><snippet>+</snippet></ROW><ROW><id>10069111</id><snippet># Goal: make a list of urls
url_list = []

# use a try-finally to make sure you close your file.
try:
    f = open('pathtofile.txt','rb')
    for line in f:
        url_list.append('http://youtube.com/user/%s' % line)
    # do something with url list (like call a scraper, or use urllib2
finally:
    f.close()
</snippet></ROW><ROW><id>10069392</id><snippet>print "Here is your file %r: ", % filename
                              ^
</snippet></ROW><ROW><id>10069392</id><snippet>print</snippet></ROW><ROW><id>10069392</id><snippet>&gt;&gt;&gt; print 1,2
1 2
</snippet></ROW><ROW><id>10069392</id><snippet>% filename</snippet></ROW><ROW><id>10069392</id><snippet>print "Here is your file %r: " % filename
</snippet></ROW><ROW><id>10069392</id><snippet>&gt;&gt;&gt; filename = "whatever"

&gt;&gt;&gt; print "file is %r", % filename
  File "&lt;stdin&gt;", line 1
    print "file is %r", % filename
                        ^
SyntaxError: invalid syntax

&gt;&gt;&gt; print "file is %r" % filename
file is 'whatever'
</snippet></ROW><ROW><id>10070121</id><snippet>&gt;&gt;&gt;&gt; import suds
&gt;&gt;&gt;&gt; print suds.__version__
0.4.1
</snippet></ROW><ROW><id>10070446</id><snippet>*</snippet></ROW><ROW><id>10070446</id><snippet>c*2</snippet></ROW><ROW><id>10070446</id><snippet>re</snippet></ROW><ROW><id>10070446</id><snippet>\s</snippet></ROW><ROW><id>10070446</id><snippet>\S</snippet></ROW><ROW><id>10070446</id><snippet>+</snippet></ROW><ROW><id>10070446</id><snippet>*</snippet></ROW><ROW><id>10070446</id><snippet>^</snippet></ROW><ROW><id>10070446</id><snippet>$</snippet></ROW><ROW><id>10070446</id><snippet>import re

# Define patterns we want to recognize.

c = r'(\S+)\s+'  # a word we want to capture
s = r'\S+\s+'  # a word we want to skip
mesg = r'(\S.*\S)\s+--Sev\s+'  # mesg to capture; terminated by string '--Sev'
w2 = r'(\S+\s+\S+)\s+'  # two words separated by some white space
w2semi = r'(\S+\s+\S+)\s*;\s+'  # two words terminated by a semicolon
tail = r'(.*\S)\s*;'

# Join together the above patterns to make one giant pattern that parses
# the input.
s_pat = ( r'^\s*' + 
    c*2 + s*3 + c*1 + s*10 + c*2 + s*14 + c*1 + s*14 +
    mesg + w2 + w2semi*2 + tail +
    r'\s*$')

# Pre-compile the pattern for speed.
pat = re.compile(s_pat)

# Test string and the expected output result.
s_input = "83b14af0-949b-71e0-18d5-0ad781020000 40ba8352-8dd2-71dc-12b8-0ad781020000 1 -1407714483 20 COLG-GRA-617-RD1.oss 1 181895426 12 oss-ap-1.oss 0 0 48 0 0 0 1307845644 1307845647 0 2 12 0 0 0  0 0 12 0 0 0  0 0 1307845918 3 OpC 6 opcecm 9 SNMPTraps 8 IBB_COLG 4 ATM0 0  0  0  69 Cisco Agent Interface Up (linkUp Trap) on interface ATM0 --Sev Normal 372 Generic: 3; Specific: 0; Enterprise: .1.3.6.1.4.1.9.1.569;"
s_correct = "83b14af0-949b-71e0-18d5-0ad781020000|40ba8352-8dd2-71dc-12b8-0ad781020000|COLG-GRA-617-RD1.oss|1307845644|1307845647|1307845918|Cisco Agent Interface Up (linkUp Trap) on interface ATM0|Normal 372|Generic: 3|Specific: 0|Enterprise: .1.3.6.1.4.1.9.1.569"

# re.match() returns a "match group"
m = re.match(pat, s_input)
# m.groups() returns sequence of captured strings; join with '|'
s_output = '|'.join(m.groups())

# sanity check
if s_correct == s_output:
    print "excellent"
else:
    print "bogus"

# excellent.
</snippet></ROW><ROW><id>10070446</id><snippet># use the pattern defined above, named "pat"
with open(input_file, "r") as f_in, open(output_file, "w") as f_out:
    for line_num, line in enumerate(f_in, 1):
        try:
            m = re.match(pat, line)
            s_output = '|'.join(m.groups())
            f_out.write(s_output + '\n')
        except Exception:
            print("unable to parse line %d: %s" % (line_num, line)
</snippet></ROW><ROW><id>10070446</id><snippet>with</snippet></ROW><ROW><id>10070449</id><snippet>def encrypt(string, length):
    return ' '.join(string[i:i+length] for i in xrange(0,len(string),length))
</snippet></ROW><ROW><id>10070449</id><snippet>encrypt('thisisarandomsentence',4)</snippet></ROW><ROW><id>10070449</id><snippet>'this isar ando msen tenc e'
</snippet></ROW><ROW><id>10070563</id><snippet>lambda</snippet></ROW><ROW><id>10070563</id><snippet>i</snippet></ROW><ROW><id>10070563</id><snippet>lambda</snippet></ROW><ROW><id>10070563</id><snippet>i</snippet></ROW><ROW><id>10070563</id><snippet>i</snippet></ROW><ROW><id>10070563</id><snippet>lambda</snippet></ROW><ROW><id>10070563</id><snippet>&gt;&gt;&gt; [j() for j in [lambda i=i:i for i in range(10)]]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>10070563</id><snippet>lambda</snippet></ROW><ROW><id>10070563</id><snippet>def create_lambda(i):
    return lambda:i
&gt;&gt;&gt; [j() for j in [create_lambda(i) for i in range(10)]]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>10070563</id><snippet>i</snippet></ROW><ROW><id>10070563</id><snippet>create_lambda</snippet></ROW><ROW><id>10070672</id><snippet>import CorrectPythonPackage.token as token2

#or 

from CorrectPythonPackage.token import *
</snippet></ROW><ROW><id>10071494</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; data=[[('a1','b1'),('c1','d1')],[('a2','b2'),('c2','d2'),('e2','f2')],[('a3','b3'),('c3','d3'),('e3','f3')]]
&gt;&gt;&gt; for columns in izip_longest(*data,fillvalue=''):
        print '\t'.join(map(' '.join,columns))


a1 b1   a2 b2   a3 b3
c1 d1   c2 d2   c3 d3
        e2 f2   e3 f3
</snippet></ROW><ROW><id>10071531</id><snippet>&gt;&gt;&gt; def encrypt(st,length):
    #Reversed the String and replace all Spaces with 'X'
    st = st[::-1].replace(' ','X')
    #Find no of characters to be padded.
    padlength = (length - len(st)%length) % length
    #Pad the Characters at either end
    st = 'X'*(padlength/2)+st+'X'*(padlength-padlength/2)
    #Split it with size length and then join with a single space
    return ' '.join(st[i:i+length] for i in xrange(0,len(st),length))

&gt;&gt;&gt; encrypt('THE PRICE OF FREEDOM IS ETERNAL VIGILENCE', 4) #Your Example
'XECN ELIG IVXL ANRE TEXS IXMO DEER FXFO XECI RPXE HTXX'
&gt;&gt;&gt; encrypt('THE PRICE', 5) # One Extra Character at end for Odd Numbers
'ECIRP XEHTX'
&gt;&gt;&gt; encrypt('THE PRIC', 5) # 1 Pad Characters at either end
'XCIRP XEHTX'
&gt;&gt;&gt; encrypt('THE PRI', 5) # 1 Pad Characters at either end and one Extra for being Odd
'XIRPX EHTXX'
&gt;&gt;&gt; encrypt('THE PR', 5) # 2 Pad Characters at either end
'XXRPX EHTXX'
&gt;&gt;&gt; encrypt('THE P', 5) # No Pad characters required
'PXEHT'
&gt;&gt;&gt; encrypt('THE PRICE OF FREEDOM IS ETERNAL VIGILENCE', 5) #Ashwini's Example
'XXECN ELIGI VXLAN RETEX SIXMO DEERF XFOXE CIRPX EHTXX'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10071659</id><snippet>vertex_set = set(vertices_in_cycle)
g.es["color"] = "black"
red_edges = g.es.select(_source_in=vertex_set, _target_in=vertex_set)
red_edges["color"] = "red"
</snippet></ROW><ROW><id>10071659</id><snippet>g.es</snippet></ROW><ROW><id>10071659</id><snippet>g.vs</snippet></ROW><ROW><id>10071659</id><snippet>g.es["color"]</snippet></ROW><ROW><id>10071659</id><snippet>color</snippet></ROW><ROW><id>10071659</id><snippet>g.es</snippet></ROW><ROW><id>10071659</id><snippet>g.es[2]</snippet></ROW><ROW><id>10071659</id><snippet>g.es.select</snippet></ROW><ROW><id>10071659</id><snippet>help(EdgeSeq.select)</snippet></ROW><ROW><id>10071659</id><snippet>red_edges</snippet></ROW><ROW><id>10071659</id><snippet>g.es</snippet></ROW><ROW><id>10071659</id><snippet>EdgeSeq</snippet></ROW><ROW><id>10071659</id><snippet>red_edges</snippet></ROW><ROW><id>10071659</id><snippet>red</snippet></ROW><ROW><id>10071659</id><snippet>g.es["color"] = ["red" if (edge.source in vertex_set and \
                           edge.target in vertex_set) else "black" \
                 for edge in g.es]
</snippet></ROW><ROW><id>10071946</id><snippet>"""
  Class: MyClass
  Describe the class here.

  Attributes:
    attr1 - First attribute of the class
    attr2 - Second one
"""
class MyClass:

    def __init__(self, arg1):
        self.attr1 = arg1
        self.attr2 = "attr2"
</snippet></ROW><ROW><id>10071946</id><snippet>"""
  Class: MyClass
  Describe the class here.

  Attribute: attr1
  First attribute of the class

  Attribute: attr2
  Second one
"""
class MyClass:

    # Constructor: __init__
    # Describe the constructor.
    #
    # Parameters:
    #   arg1 - The first argument.
    def __init__(self, arg1):
        self.attr1 = arg1
        self.attr2 = "attr2"

    # Method: method1
    # Describe the method here.
    def method1(self):
        print("method1")
</snippet></ROW><ROW><id>10071946</id><snippet>"""</snippet></ROW><ROW><id>10071946</id><snippet>#</snippet></ROW><ROW><id>10071946</id><snippet>Languages.txt</snippet></ROW><ROW><id>10071946</id><snippet>Alter Language: Python

   Block Comment: """ """
</snippet></ROW><ROW><id>10071946</id><snippet>Attribute</snippet></ROW><ROW><id>10071946</id><snippet>Property</snippet></ROW><ROW><id>10071946</id><snippet>Topics.txt</snippet></ROW><ROW><id>10071946</id><snippet>Alter Topic Type: Property

   Add Keywords:
      attribute, attributes
</snippet></ROW><ROW><id>10072107</id><snippet>def __init__(self, *args, **kwargs):
    super(YourModel, self).__init__(*args, **kwargs)
    self.impact = self.user.get_profile().someIntField
</snippet></ROW><ROW><id>10072202</id><snippet>regex = r'((?:@[a-z][a-z0-9_]*))(?:\((?!,)(?:(([a-z][a-z0-9_]*(=)(?:("[a-z0-9_, ]*")|(true|false)|(\d+l?))))(?!,\)),?)*\)(?!\()|$)'
</snippet></ROW><ROW><id>10072202</id><snippet>re.findall()</snippet></ROW><ROW><id>10072202</id><snippet>regex = r'''
(@[a-z][a-z0-9_]*) # function name, captured in group
(                  # open capture group for all parameters
\(                 # opening function parenthesis 
  (?!,)            # negative lookahead for unwanted comma
  (?:              # open non-capturing group for all params
  [a-z][a-z0-9_]*  # parameter name
  =                # parameter assignmentoperators
  (?:"[a-z0-9_, ]*"|true|false|(?:\d+l?)) # possible parameter values
  (?!,\))          # negative lookahead for unwanted comma and closing parenthesis
  ,?               # optional comma, separating params
  )*               # close param non-capturing group, make it optional
\)                 # closing function parenthesis 
(?!\(\))           # negative lookahead for empty parentheses
|$                 # OR end-of-line (in case there are no params)
)                  # close capture group for all parameters
'''
</snippet></ROW><ROW><id>10072226</id><snippet>G.node[n]['pos'][0]
</snippet></ROW><ROW><id>10072403</id><snippet>import json
fp = open('/tmp/mydict', 'w+')
json.dump(fp, myDict)
</snippet></ROW><ROW><id>10072403</id><snippet>$myDict = json_decode(file_get_contents('/tmp/mydict')); 
</snippet></ROW><ROW><id>10072599</id><snippet>&gt;&gt;&gt; class Haha(object): pass
...
&gt;&gt;&gt; sys.getsizeof(Haha)
904
&gt;&gt;&gt; sys.getsizeof(Haha())
64
</snippet></ROW><ROW><id>10072826</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'(.)\1+', r'\1\1', "haaaaapppppyyy")     
'haappyy'
</snippet></ROW><ROW><id>10072826</id><snippet>(.)\1+</snippet></ROW><ROW><id>10072826</id><snippet>.</snippet></ROW><ROW><id>10072826</id><snippet>\1</snippet></ROW><ROW><id>10072979</id><snippet>{{ dictvar.key }}</snippet></ROW><ROW><id>10072979</id><snippet>{{ value.value }}</snippet></ROW><ROW><id>10073167</id><snippet>(s[0], s[-1])
</snippet></ROW><ROW><id>10073167</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>10073167</id><snippet>from operator import itemgetter
itemgetter(0, -1)(s)
</snippet></ROW><ROW><id>10073167</id><snippet>itemgetter</snippet></ROW><ROW><id>10073302</id><snippet>s = set(u"rabbit", u"lamb", u"calf")
</snippet></ROW><ROW><id>10073302</id><snippet>in</snippet></ROW><ROW><id>10073302</id><snippet>&gt;&gt;&gt; u"rabbit" in s
True
&gt;&gt;&gt; u"wolf" in s
False
</snippet></ROW><ROW><id>10073302</id><snippet>from io import open
import re
with open("dictionary", encoding="utf-8") as f:
    words = set(line.strip() for line in f)
with open("document", encoding="utf-8") as f:
    for w in re.findall(r"\w+", f.read()):
        if w not in words:
            print "Misspelled:", w.encode("utf-8")
</snippet></ROW><ROW><id>10073302</id><snippet>print</snippet></ROW><ROW><id>10073634</id><snippet>class UserType( models.Model ) :
    TYPE_CHOICES = (
        ( 'ad', 'administrator'    ),
        ( 'mo', 'moderator'        ),
        ( 'vi', 'viewer'           ),
        ( 'pm', 'property manager' ),
        ( 'po', 'property owner'   ),
        ( 'vm', 'vendor manager'   ),
        ( 've', 'vendor'           ),
        ( 'te', 'tenant'           ),
        )
    STR_CHOICES = { key : value for (key,value) in TYPE_CHOICES }

    name = models.CharField( max_length = 2, choices = TYPE_CHOICES )

    def __str__(self):
        return self.STR_CHOICES[self.name]
</snippet></ROW><ROW><id>10073765</id><snippet>response.menu = [...,
    (T('About'), False,URL('default', 'what', args='alt')),
    ...]
</snippet></ROW><ROW><id>10073765</id><snippet>def what():
    if request.args(0) == 'alt':
        response.view = 'default/what_alt.html'
    [rest of controller code]
</snippet></ROW><ROW><id>10073786</id><snippet>diff</snippet></ROW><ROW><id>10073786</id><snippet>diff</snippet></ROW><ROW><id>10073971</id><snippet>/home/ubuntu/djangoProj/micopiloto/
</snippet></ROW><ROW><id>10074006</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>10074006</id><snippet>window.blit(mapImg, (0,0))</snippet></ROW><ROW><id>10074006</id><snippet>import pygame
import math

pygame.display.init()
window = pygame.display.set_mode((600, 500))
mapImg = pygame.image.load("mapoftheusa.bmp")

done = False

while not done:

   window.fill((0,0,0))
   evtList = pygame.event.get()
   for evt in evtList:
       if evt.type == pygame.QUIT:
          done = True

   window.blit(mapImg, (0,0)) #&lt;&lt;will not blit
   pygame.display.update() # solution: you forgot this...

pygame.quit()
</snippet></ROW><ROW><id>10074006</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>10074006</id><snippet>pygame.display.flip()</snippet></ROW><ROW><id>10074006</id><snippet>pygame.init()</snippet></ROW><ROW><id>10074127</id><snippet>chr(c) - 54
</snippet></ROW><ROW><id>10074127</id><snippet>c</snippet></ROW><ROW><id>10074536</id><snippet>eval</snippet></ROW><ROW><id>10074536</id><snippet>s = "[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]"
result = eval(s)
</snippet></ROW><ROW><id>10074536</id><snippet>locals</snippet></ROW><ROW><id>10074536</id><snippet>&gt;&gt;&gt; eval("s.upper()",{'s':'hello'})
'HELLO'
</snippet></ROW><ROW><id>10074536</id><snippet>exec</snippet></ROW><ROW><id>10074536</id><snippet>&gt;&gt;&gt; a = "for y in range(2,20):print y"
&gt;&gt;&gt; exec a
2
3
...
19
</snippet></ROW><ROW><id>10074696</id><snippet>random.choice</snippet></ROW><ROW><id>10074696</id><snippet>&gt;&gt;&gt; m = max(a)
&gt;&gt;&gt; max_pos = [i for i, j in enumerate(a) if j == m]
&gt;&gt;&gt; random.choice(max_pos)
</snippet></ROW><ROW><id>10075043</id><snippet>.fill()</snippet></ROW><ROW><id>10075043</id><snippet>set_mode()</snippet></ROW><ROW><id>10075043</id><snippet>class F():
  def g(self):
    print "hi"
</snippet></ROW><ROW><id>10075043</id><snippet>&gt;&gt;&gt; F().g()
hi
</snippet></ROW><ROW><id>10075043</id><snippet>display.set_mode().fill()</snippet></ROW><ROW><id>10075043</id><snippet>class Surface():
    def fill(self):
        print "filling"

class Display():
    def set_mode(self):
        return Surface()


Display().set_mode().fill()
</snippet></ROW><ROW><id>10075043</id><snippet>def f():
  def g():
    print "hi"
  return g
</snippet></ROW><ROW><id>10075043</id><snippet>&gt;&gt;&gt; outerf = f()
&gt;&gt;&gt; outerf()
hi 
</snippet></ROW><ROW><id>10075170</id><snippet>import struct
import os
import hashlib

def png(fh):
    hash = hashlib.md5()
    assert fh.read(8)[1:4] == "PNG"
    while True:
        try:
            length, = struct.unpack("&gt;i",fh.read(4))
        except struct.error:
            break
        if fh.read(4) == "IDAT":
            hash.update(fh.read(length))
            fh.read(4) # CRC
        else:
            fh.seek(length+4,os.SEEK_CUR)
    print "Hash: %r" % hash.digest()

def jpeg(fh):
    hash = hashlib.md5()
    assert fh.read(2) == "\xff\xd8"
    while True:
        marker,length = struct.unpack("&gt;2H", fh.read(4))
        assert marker &amp; 0xff00 == 0xff00
        if marker == 0xFFDA: # Start of stream
            hash.update(fh.read())
            break
        else:
            fh.seek(length-2, os.SEEK_CUR)
    print "Hash: %r" % hash.digest()


if __name__ == '__main__':
    png(file("sample.png"))
    jpeg(file("sample.jpg"))
</snippet></ROW><ROW><id>10075210</id><snippet>exiftool</snippet></ROW><ROW><id>10075210</id><snippet>-stay_open</snippet></ROW><ROW><id>10075210</id><snippet>exiftool</snippet></ROW><ROW><id>10075210</id><snippet>exceute()</snippet></ROW><ROW><id>10075210</id><snippet>get_metadata()</snippet></ROW><ROW><id>10075210</id><snippet>import subprocess
import os
import json

class ExifTool(object):

    sentinel = "{ready}\n"

    def __init__(self, executable="/usr/bin/exiftool"):
        self.executable = executable

    def __enter__(self):
        self.process = subprocess.Popen(
            [self.executable, "-stay_open", "True",  "-@", "-"],
            stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        return self

    def  __exit__(self, exc_type, exc_value, traceback):
        self.process.stdin.write("-stay_open\nFalse\n")
        self.process.stdin.flush()

    def execute(self, *args):
        args = args + ("-execute\n",)
        self.process.stdin.write(str.join("\n", args))
        self.process.stdin.flush()
        output = ""
        fd = self.process.stdout.fileno()
        while not output.endswith(self.sentinel):
            output += os.read(fd, 4096)
        return output[:-len(self.sentinel)]

    def get_metadata(self, *filenames):
        return json.loads(self.execute("-G", "-j", "-n", *filenames))
</snippet></ROW><ROW><id>10075210</id><snippet>with ExifTool() as e:
    metadata = e.get_metadata(*filenames)
</snippet></ROW><ROW><id>10075438</id><snippet>In [13]: collection.save({"_id":1, "Thread": "\n````1111Hellow What is you name----....."})
Out[13]: 1

In [14]: collection.find_one()
Out[14]: {u'Thread': u'\n````1111Hellow What is you name----.....', u'_id': 1}

In [15]: collection.distinct("Thread")
Out[15]: [u'\n````1111Hellow What is you name----.....']

In [16]: 
</snippet></ROW><ROW><id>10075465</id><snippet>if len(a) == len(b):
    same_structure(a[1:],b[1:])
</snippet></ROW><ROW><id>10075465</id><snippet>if len(a) == len(b):
    for i in range(len(a)):
        if not same_structure(a[i], b[i]):
            return False
    return True
else:
    return False
</snippet></ROW><ROW><id>10075535</id><snippet>WSGIScriptAlias</snippet></ROW><ROW><id>10075535</id><snippet>application</snippet></ROW><ROW><id>10075535</id><snippet>cgi</snippet></ROW><ROW><id>10075679</id><snippet>g('set terminal png')
g('set output "bench.png"')
g.plot(d1)  #d1 should not be in "bench.png"
#This might work to plot both datasets together ... g.plot(d1,d2)  
</snippet></ROW><ROW><id>10075679</id><snippet>plot</snippet></ROW><ROW><id>10075679</id><snippet>__call__</snippet></ROW><ROW><id>10075707</id><snippet>def freqs(list):
    words = {}
    for word in list:
        words[word] = words.get(word, 0) + 1
    return words

def added_and_removed(a, b):
    af = freqs(a.split())
    bf = freqs(b.split())

    removed = []
    added = []

    for key in af:
        num = bf.get(key)
        if num == None:
            if af[key] &gt; 1:
                words = [key]*af[key]
                removed.extend(words)
            else:
                removed.append(key)

    for key in bf:
        num = af.get(key)
        if num == None:
            added.append(key)
        elif num &gt; 1:
            words = [key]*(num-1)
            removed.extend(words)

    return added, removed

a = 'hello hello hello my name is Dave dave bar foo'
b = 'hello my guys is test easy rob dave beef foo'     

added, removed =  added_and_removed(a, b)
print added
print removed
</snippet></ROW><ROW><id>10075707</id><snippet>['beef', 'rob', 'easy', 'test', 'guys']
['bar', 'name', 'Dave', 'hello', 'hello']
</snippet></ROW><ROW><id>10075859</id><snippet>class Foo():
  def __init__(self, **kwargs):
    self.foo = kwargs['foo']
</snippet></ROW><ROW><id>10075859</id><snippet>foo = Foo(foo='bar')
</snippet></ROW><ROW><id>10076319</id><snippet>dict</snippet></ROW><ROW><id>10076319</id><snippet>saved_data = dict(outputFile, 
                  saveFeature1 = feature1, 
                  saveFeature2 = feature2, 
                  saveLabel1 = label1, 
                  saveLabel2 = label2,
                  saveString = docString)

with open('test.dat', 'wb') as outfile:
    pickle.dump(saved_data, outfile, protocol=pickle.HIGHEST_PROTOCOL)
</snippet></ROW><ROW><id>10076319</id><snippet>numpy.savez</snippet></ROW><ROW><id>10076319</id><snippet>np.asarray</snippet></ROW><ROW><id>10076319</id><snippet>dict</snippet></ROW><ROW><id>10076319</id><snippet>import numpy as np

test = {'a':np.arange(10), 'b':np.arange(20)}
testarr = np.asarray(test)
</snippet></ROW><ROW><id>10076319</id><snippet>In [1]: np.asarray('abc')
Out[1]: 
array('abc', 
      dtype='|S3')
</snippet></ROW><ROW><id>10076319</id><snippet>dict</snippet></ROW><ROW><id>10076319</id><snippet>testarr[0]</snippet></ROW><ROW><id>10076319</id><snippet>IndexError</snippet></ROW><ROW><id>10076319</id><snippet>yourdictionary = testarr.reshape(-1)[0]</snippet></ROW><ROW><id>10076319</id><snippet>asarray</snippet></ROW><ROW><id>10076319</id><snippet>ndmin=1</snippet></ROW><ROW><id>10076319</id><snippet>array</snippet></ROW><ROW><id>10076319</id><snippet>savez</snippet></ROW><ROW><id>10076319</id><snippet>np.savez(outputFile, 
         saveFeature1 = [feature1], 
         saveFeature2 = [feature2], 
         saveLabel1 = [label1], 
         saveLabel2 = [label2],
         saveString = docString)
</snippet></ROW><ROW><id>10076319</id><snippet>loadedArchive = np.load(outFile)
loadedFeature1 = loadedArchive['saveFeature1'][0]
loadedString = str(loadedArchive['saveString'])
</snippet></ROW><ROW><id>10076319</id><snippet>numpy.savez</snippet></ROW><ROW><id>10076381</id><snippet>import sympy
from sympy.core.function import Function
from sympy.core import S
from sympy import sympify
from sympy.functions import im
from scipy.special import wofz

class Wofz(Function):
    is_real = True
    @classmethod
    def _should_evalf(csl,arg):
        return True
    def as_base_exp(cls):
        return cls,S.One

    def _eval_evalf(cls, prec):
        return sympy.numbers.Number(im(wofz(float(cls.args[0]))))

print sympify("Wofz(2)",{'Wofz':Wofz}).evalf()
</snippet></ROW><ROW><id>10076381</id><snippet>0.340026217066065
</snippet></ROW><ROW><id>10076406</id><snippet>myvar = 'something'

class myclass:
    pass
</snippet></ROW><ROW><id>10076406</id><snippet>mymodule</snippet></ROW><ROW><id>10076406</id><snippet>import mymodule

myinstance = myclass()
print mymodule.myvar 
</snippet></ROW><ROW><id>10076406</id><snippet>from mymodule import myvar

print myvar
</snippet></ROW><ROW><id>10076406</id><snippet>class myclass:
    myvar = 'something'
</snippet></ROW><ROW><id>10076406</id><snippet>myvar = myclass.myvar

print myvar
</snippet></ROW><ROW><id>10076911</id><snippet>&gt;&gt;&gt; spam=(([0.2, 0.6], [0.5, 0.8]), "10 11 {'chocolate': 10}")
</snippet></ROW><ROW><id>10076911</id><snippet>&gt;&gt;&gt; print str(spam).translate(None,"([]){},\"'")
0.2 0.6 0.5 0.8 10 11 chocolate: 10
</snippet></ROW><ROW><id>10076911</id><snippet>&gt;&gt;&gt; print str(spam).translate(None,"([]){},\"'").replace(' ','\t')
0.2 0.6 0.5 0.8 10  11  chocolate:  10
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10076911</id><snippet>&gt;&gt;&gt; ''.join(map(str,list(itertools.chain(*list(itertools.chain(*spam))))))
"0.20.60.50.810 11 {'chocolate': 10}"
</snippet></ROW><ROW><id>10076911</id><snippet>&gt;&gt;&gt; print ''.join(map(str,list(itertools.chain(*list(itertools.chain(*spam))))))
0.20.60.50.810 11 {'chocolate': 10}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10076911</id><snippet>tab</snippet></ROW><ROW><id>10076911</id><snippet>newline</snippet></ROW><ROW><id>10076911</id><snippet>join</snippet></ROW><ROW><id>10077078</id><snippet>$ echo $VIRTUAL_ENV
</snippet></ROW><ROW><id>10077078</id><snippet>lib/python2.*/site-packages/</snippet></ROW><ROW><id>10077267</id><snippet>print</snippet></ROW><ROW><id>10077267</id><snippet>print(item)
</snippet></ROW><ROW><id>10077748</id><snippet>myfont = pygame.font.SysFont("monospace", 15)
label = myfont.render("Some text!", 1, (255,255,0))
screen.blit(label, (100, 100))
</snippet></ROW><ROW><id>10078158</id><snippet>grouper</snippet></ROW><ROW><id>10078158</id><snippet>itertools</snippet></ROW><ROW><id>10078158</id><snippet>import itertools as it
def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return it.izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>10078158</id><snippet>values = str(z).translate(None,"([]){},\"'").split()
output = '\n'.join('\t'.join(x for x in g if x) for g in grouper(4, values))
</snippet></ROW><ROW><id>10078158</id><snippet>f.writelines</snippet></ROW><ROW><id>10078158</id><snippet>f.writelines('\t'.join(x for x in g if x) + '\n' for g in grouper(4, values))
</snippet></ROW><ROW><id>10078468</id><snippet>import sys
sys.path.append(path_to_parent)
import parent.file1
</snippet></ROW><ROW><id>10078542</id><snippet>__slots__</snippet></ROW><ROW><id>10078542</id><snippet>multiprocessing</snippet></ROW><ROW><id>10078542</id><snippet>__setattr__</snippet></ROW><ROW><id>10078542</id><snippet>__getstate__</snippet></ROW><ROW><id>10078542</id><snippet>__setstate__</snippet></ROW><ROW><id>10078599</id><snippet>clear</snippet></ROW><ROW><id>10078599</id><snippet># get an iterable
context = iterparse(source, events=("start", "end"))

# turn it into an iterator
context = iter(context)

# get the root element
event, root = context.next()

for event, elem in context:
    if event == "end" and elem.tag == "record":
        ... process record elements ...
        root.clear()
</snippet></ROW><ROW><id>10078599</id><snippet>top</snippet></ROW><ROW><id>10078599</id><snippet>ps</snippet></ROW><ROW><id>10078608</id><snippet>&gt;&gt;&gt; arr
array([[  3.05706500e+06,   4.98000000e+01,  -2.62500070e+01,
         -9.38135544e+01],
       [  3.05706600e+06,   4.98000000e+01,  -3.00000056e+01,
         -9.38135544e+01],
       [  3.05706700e+06,   4.98000000e+01,  -3.37500042e+01,
         -9.38135544e+01],
       [  3.05706800e+06,   4.98000000e+01,  -3.75000028e+01,
         -9.38135544e+01]])
</snippet></ROW><ROW><id>10078608</id><snippet>&gt;&gt;&gt; numpy.sort(arr,axis=0)
array([[  3.05706500e+06,   4.98000000e+01,  -3.75000028e+01,
         -9.38135544e+01],
       [  3.05706600e+06,   4.98000000e+01,  -3.37500042e+01,
         -9.38135544e+01],
       [  3.05706700e+06,   4.98000000e+01,  -3.00000056e+01,
         -9.38135544e+01],
       [  3.05706800e+06,   4.98000000e+01,  -2.62500070e+01,
         -9.38135544e+01]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10078608</id><snippet>&gt;&gt;&gt; arr[arr[:,2].argsort()]
array([[  3.05706800e+06,   4.98000000e+01,  -3.75000028e+01,
         -9.38135544e+01],
       [  3.05706700e+06,   4.98000000e+01,  -3.37500042e+01,
         -9.38135544e+01],
       [  3.05706600e+06,   4.98000000e+01,  -3.00000056e+01,
         -9.38135544e+01],
       [  3.05706500e+06,   4.98000000e+01,  -2.62500070e+01,
         -9.38135544e+01]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10078830</id><snippet>next</snippet></ROW><ROW><id>10078830</id><snippet>previous</snippet></ROW><ROW><id>10078830</id><snippet>def next(value, arg):
    try:
        return value[int(arg)-1]
    except:
        return None
</snippet></ROW><ROW><id>10078830</id><snippet>{% for ... %}
  {% with list|next:forloop.counter0 as next %}
    {% if next.is_hidden %}
    ...
    {% endif %} 
  {% endwith %}
{% endfor %}   
</snippet></ROW><ROW><id>10078929</id><snippet>for player in self.players:
    for hand_idx in range(len(player.hands)):
        if player.hands[hand_idx].smallest_value() &gt; 21:
            player.hands[hand_idx]=0
    player.hands=filter(None,hands)
</snippet></ROW><ROW><id>10078933</id><snippet>os.path.abspath(os.path.pardir)
</snippet></ROW><ROW><id>10078933</id><snippet>os.path.dirname(os.getcwd())
</snippet></ROW><ROW><id>10078988</id><snippet>USE_TZ = True</snippet></ROW><ROW><id>10078988</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>10078988</id><snippet>from django.utils import timezone
timezone.activate('US/Central')
</snippet></ROW><ROW><id>10079051</id><snippet>13 40  20  10  5  16  8  4  2  1
</snippet></ROW><ROW><id>10079051</id><snippet>chain_sizes = {}
chain_sizes[13] = 10
chain_sizes[40] = 9
chain_sizes[40]   # =&gt; 9
20 in chain_sizes # =&gt; False
</snippet></ROW><ROW><id>10079128</id><snippet>pygame.time.set_timer(eventid, milliseconds)</snippet></ROW><ROW><id>10079128</id><snippet>eventid</snippet></ROW><ROW><id>10079128</id><snippet>milliseconds</snippet></ROW><ROW><id>10079128</id><snippet>pygame.time.set_timer(eventid, 0)</snippet></ROW><ROW><id>10079128</id><snippet>SDL_AddTimer</snippet></ROW><ROW><id>10079128</id><snippet>pygame</snippet></ROW><ROW><id>10079128</id><snippet>threading.Timer</snippet></ROW><ROW><id>10079250</id><snippet>locale.format()</snippet></ROW><ROW><id>10079250</id><snippet>grouping=True</snippet></ROW><ROW><id>10079250</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_NUMERIC, 'en_US')
'en_US'
&gt;&gt;&gt; locale.format("%d", 1234567, grouping=True)
'1,234,456'
</snippet></ROW><ROW><id>10079265</id><snippet>itercars = iter(cars)
next(itercars)
for car in itercars:
    # do work
</snippet></ROW><ROW><id>10079265</id><snippet>itercars = iter(cars)
# add 'next(itercars)' here if you also want to skip the first
prev = next(itercars)
for car in itercars:
    # do work on 'prev' not 'car'
    # at end of loop:
    prev = car
# now you can do whatever you want to do to the last one on 'prev'
</snippet></ROW><ROW><id>10079305</id><snippet>clickme = browser.find_element_by_xpath('//a[contains(@href,"http://example.com/link")]')
clickme.click()
</snippet></ROW><ROW><id>10079310</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; s = "This is some sample data.  Nltk will use the words in this string to make ngrams.  I hope that this is useful.".split()
&gt;&gt;&gt; model = nltk.NgramModel(2, s)
&gt;&gt;&gt; model._ngrams
set([('to', 'make'), ('sample', 'data.'), ('the', 'words'), ('will', 'use'), ('some', 'sample'), ('', 'This'), ('use', 'the'), ('make', 'ngrams.'), ('ngrams.', 'I'), ('hope', 'that'
), ('is', 'some'), ('is', 'useful.'), ('I', 'hope'), ('this', 'string'), ('Nltk', 'will'), ('words', 'in'), ('this', 'is'), ('data.', 'Nltk'), ('that', 'this'), ('string', 'to'), ('
in', 'this'), ('This', 'is')])
</snippet></ROW><ROW><id>10079310</id><snippet>nltk.NaiveBayesClassifier</snippet></ROW><ROW><id>10079844</id><snippet>from itertools import tee

def partition(lst, pred):
    l1, l2 = tee((pred(e), e) for e in lst)
    return (x for cond, x in l1 if cond), (x for cond, x in l2 if not cond)
</snippet></ROW><ROW><id>10079844</id><snippet>lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
evens, odds = partition(lst, lambda x: x%2 == 0)
</snippet></ROW><ROW><id>10079844</id><snippet>list(evens)
&gt; [0, 2, 4, 6, 8]
list(odds)
&gt; [1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>10079924</id><snippet>/static/admin/css</snippet></ROW><ROW><id>10079978</id><snippet>String.split</snippet></ROW><ROW><id>10079978</id><snippet>str.split("\\s+")
</snippet></ROW><ROW><id>10079978</id><snippet>str.split()</snippet></ROW><ROW><id>10079978</id><snippet>str.trim().split("\\s+")
</snippet></ROW><ROW><id>10079978</id><snippet>str.split()</snippet></ROW><ROW><id>10079978</id><snippet>['']</snippet></ROW><ROW><id>10080280</id><snippet>'&lt;a href="download.py?key={}&amp;width={}&amp;height={}"&gt;{}&lt;/a&gt;'.format(key, w, h, name)
</snippet></ROW><ROW><id>10080280</id><snippet>str.format</snippet></ROW><ROW><id>10080280</id><snippet>str%something</snippet></ROW><ROW><id>10080389</id><snippet>zip()</snippet></ROW><ROW><id>10080389</id><snippet>for x, y in zip(a, b):
    # x is from a, y is from b
</snippet></ROW><ROW><id>10080389</id><snippet>a</snippet></ROW><ROW><id>10080389</id><snippet>b</snippet></ROW><ROW><id>10080389</id><snippet>itertols.izip()</snippet></ROW><ROW><id>10080389</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>10080813</id><snippet>PDT-1</snippet></ROW><ROW><id>10080813</id><snippet>astimezone</snippet></ROW><ROW><id>10080813</id><snippet>astimezone</snippet></ROW><ROW><id>10080813</id><snippet>datetime</snippet></ROW><ROW><id>10080833</id><snippet>(r'^user/(?P&lt;account_username&gt;[^/]+)/$', display_objects, dict(filters=[{'field':'account__username','relationship':'iexact'}], orders=[{'field':'foobar'}], template_name='user.html'))
</snippet></ROW><ROW><id>10080833</id><snippet>def display_objects(request, filters, orders, template_name, **kwargs):

    objects = Object.objects.all()
    for filter in filters:
        objects = objects.filter(('%s__%s' % (filter['field'], filter['relationship']), kwargs.get(filter['field'])))
    for order in orders:
        objects = objects.order_by('-' if 'descending' in order else '' + order['field'])
    # render objects to template with context
    pass
</snippet></ROW><ROW><id>10081050</id><snippet>N = total number of people within a region
d = population density of the region (taken to be what you list as population)
A = Area of region
R = Radius of the region A
</snippet></ROW><ROW><id>10081050</id><snippet>N = d*A = d*pi*R*R</snippet></ROW><ROW><id>10081050</id><snippet>N</snippet></ROW><ROW><id>10081050</id><snippet>R = K*sqrt(1/D)</snippet></ROW><ROW><id>10081050</id><snippet>K</snippet></ROW><ROW><id>10081050</id><snippet>30K    -&gt;   2.9  miles
 1K    -&gt;   16   miles
  1    -&gt;   500  miles
</snippet></ROW><ROW><id>10081135</id><snippet>findData = re.compile('(?&lt;=&lt;pre&gt;).+?(?=[\d\s]*&lt;/pre&gt;)', re.S)

# ...

result = findData.search(data).group(0).strip()
</snippet></ROW><ROW><id>10081138</id><snippet>re.findall("([%]+)([^%]+)(?=([%]+))".replace("%", "".join(VOWELS)), word)
</snippet></ROW><ROW><id>10081140</id><snippet>plt.figure()
CS = plt.contour(X, Y, Z) 
plt.clabel(CS, inline=1, fontsize=10)
plt.title('Simplest default with labels')
</snippet></ROW><ROW><id>10081288</id><snippet>    a = self.Assignment(self.tokens)
</snippet></ROW><ROW><id>10081288</id><snippet>Assignment</snippet></ROW><ROW><id>10081288</id><snippet>Statement</snippet></ROW><ROW><id>10081288</id><snippet>self</snippet></ROW><ROW><id>10081288</id><snippet>    a = Assignment(self.tokens)
</snippet></ROW><ROW><id>10081288</id><snippet>    s = self.CompoundStatement(self.tokens)
</snippet></ROW><ROW><id>10081385</id><snippet>f</snippet></ROW><ROW><id>10081385</id><snippet>wow</snippet></ROW><ROW><id>10081385</id><snippet>joj</snippet></ROW><ROW><id>10081385</id><snippet>from new import *

c = joj('fds')
f = wow('fgd', c)
f.go()
</snippet></ROW><ROW><id>10081385</id><snippet>c</snippet></ROW><ROW><id>10081385</id><snippet>wow</snippet></ROW><ROW><id>10081385</id><snippet>self.c</snippet></ROW><ROW><id>10081385</id><snippet>self</snippet></ROW><ROW><id>10081385</id><snippet>f</snippet></ROW><ROW><id>10081385</id><snippet>f</snippet></ROW><ROW><id>10081385</id><snippet>class wow(object):
    def __init__(self, start, c):
        self.start = start
        self.c = c

    def go(self):
        print "test test test"
        f = raw_input("&gt; ") 
        if f == "test":
            print "!!"  
            return self.c.vov()  
        else:
            print "nope"    
            return self.go()

class joj(object):
    def __init__(self, start):
        self.start = start
    def vov(self):
       print " !!!!! "
</snippet></ROW><ROW><id>10081450</id><snippet>run_docstring_examples</snippet></ROW><ROW><id>10081450</id><snippet>def f(a, b, c):
    '''
    &gt;&gt;&gt; f(1,2,3)
    42
    '''

if __name__ == '__main__':
    import doctest
#    doctest.testmod()
    doctest.run_docstring_examples(f, globals())
</snippet></ROW><ROW><id>10081652</id><snippet>www.schooldata.com/pdfs/US_FIPS_Codes.xls</snippet></ROW><ROW><id>10081652</id><snippet>.xls</snippet></ROW><ROW><id>10081652</id><snippet>xlrd</snippet></ROW><ROW><id>10081652</id><snippet>.csv</snippet></ROW><ROW><id>10081652</id><snippet>csv</snippet></ROW><ROW><id>10081806</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base
import collections
from sqlalchemy.orm.properties import RelationshipProperty

class memoized_classproperty(object):
    """A decorator that evaluates once at the class level, 
       assigns the new value to the class.
    """

    def __init__(self, fget, doc=None):
        self.fget = fget
        self.__doc__ = doc or fget.__doc__
        self.__name__ = fget.__name__

    def __get__(desc, self, cls):
        result = desc.fget(cls)
        setattr(cls, desc.__name__, result)
        return result

class Lens(object):
    @memoized_classproperty
    def pk_columns(cls):
        return class_mapper(cls).primary_key

    @memoized_classproperty
    def relations(cls):
        props = collections.namedtuple('RelationshipItem', 'one many')(set(), set())
        # 0.8 will have "inspect(cls).relationships" here
        mapper = class_mapper(cls)
        for item in mapper.iterate_properties:
            if isinstance(item, RelationshipProperty):
                if item.direction.name == ('MANYTOONE' or 'ONETOONE'):
                    local_column = mapper.get_property_by_column(item.local_side[0]).key
                    props.one.add((local_column, item.key))
                else:
                    props.many.add(item.key)
        return props

Base= declarative_base(cls=Lens)

meetings_topics = Table("meetings_topics", Base.metadata,
    Column('topic_id', Integer, ForeignKey('topic.id')),
    Column('meetings_id', Integer, ForeignKey('meetings.id')),
)
class Meeting(Base):
    __tablename__ = 'meetings'
    def __init__(self, memo):
        self.memo = memo
    id = Column(Integer, primary_key=True)
    date = Column(Date)
    memo = Column('note', String(60), nullable=True)
    category_name = Column('category', String(60), ForeignKey('categories.name'))
    category = relationship("Category", backref=backref('meetings'))
    topics = relationship("Topic",
        secondary=meetings_topics,
        backref="meetings")

class Category(Base):
    __tablename__ = 'categories'
    name = Column(String(50), primary_key=True)

class Topic(Base):
    __tablename__ = 'topic'
    id = Column(Integer, primary_key=True)

print Meeting.pk_columns
print Meeting.relations.one

# assignment is OK, since prop is memoized
Meeting.relations.one.add("FOO")

print Meeting.relations.one
</snippet></ROW><ROW><id>10081935</id><snippet>        if a in got:
            got.append(a)
        else:
            got.append(a)
            combos.append(a)
</snippet></ROW><ROW><id>10081935</id><snippet>list</snippet></ROW><ROW><id>10081935</id><snippet>print</snippet></ROW><ROW><id>10081935</id><snippet>return</snippet></ROW><ROW><id>10081935</id><snippet>itertools.permutations</snippet></ROW><ROW><id>10081935</id><snippet>itertools.chain</snippet></ROW><ROW><id>10081935</id><snippet>def get_combos(letters):
    return set(
        ''.join(x)
        for x in itertools.chain(*(
            itertools.permutations(letters, count)
            for count in range(len(letters))
        ))
    ).intersection(english_words)
</snippet></ROW><ROW><id>10081935</id><snippet>def get_combos(letters):
    return set(
        ''.join(x)
        for x in itertools.chain(*(
            itertools.permutations(letters, count)
            for count in range(len(letters))
        ))
        if is_english_word(''.join(x))
    )
</snippet></ROW><ROW><id>10082116</id><snippet>atom: ('(' [yield_expr|testlist_comp] ')' |
       '[' [listmaker] ']' |
       '{' [dictorsetmaker] '}' |
       '`' testlist1 '`' |
       NAME | NUMBER | STRING+)
</snippet></ROW><ROW><id>10082116</id><snippet>listmaker</snippet></ROW><ROW><id>10082116</id><snippet>dictorsetmaker</snippet></ROW><ROW><id>10082116</id><snippet>atom</snippet></ROW><ROW><id>10082116</id><snippet>listmaker: test ( list_for | (',' test)* [','] )
test: or_test ['if' or_test 'else' test] | lambdef
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&amp;' shift_expr)*
shift_expr: arith_expr (('&lt;&lt;'|'&gt;&gt;') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: atom trailer* ['**' factor]
</snippet></ROW><ROW><id>10082116</id><snippet>list_for</snippet></ROW><ROW><id>10082116</id><snippet>atom: ('[' [list_or_set] ']' |
       '{' [list_or_set] '}' |
       NAME | NUMBER | STRING+)

list_or_set: atom (',' atom)* [',']
</snippet></ROW><ROW><id>10082116</id><snippet>atom: list | set | NAME | NUMBER | STRING+
list: '[' atom (',' atom)* [','] ']'
set: '{' atom (',' atom)* [','] '}'
</snippet></ROW><ROW><id>10082361</id><snippet>class button(ctrl):
...
  def _set_visible(self,value):
    self.box1.visible = value
    self.box2.visible = value
    self.box3.visible = value
    self.box4.visible = value
    self.button.visible = value
    self.label.visible = value
  def _get_visible(self):
    return self.box1.visible
  visible =property(_get_visible,_set_visible)
</snippet></ROW><ROW><id>10082403</id><snippet>\</snippet></ROW><ROW><id>10082403</id><snippet>if long_named_three_d_array[first_dimension] \
    [second_dimension]\
    [third_dimension] == somevalue:
# Rest of code here, obviously properly indented in for the if.
</snippet></ROW><ROW><id>10082548</id><snippet>&gt;&gt;&gt; from mako.template import Template
&gt;&gt;&gt; Template("We display two significant digits: ${'{0:.2f}'.format(34.567645765)}").render()
'We display two significant digits: 34.57'
</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>week = {}</snippet></ROW><ROW><id>10082629</id><snippet># If I comment this line and uncomment the one in the constructor, it works right
week = {}
</snippet></ROW><ROW><id>10082629</id><snippet>class</snippet></ROW><ROW><id>10082629</id><snippet>self</snippet></ROW><ROW><id>10082629</id><snippet>self.attributes</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>self</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>self.name = name
self.artist = artist
</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>Song</snippet></ROW><ROW><id>10082629</id><snippet>Song.whatever = 42</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>self.week["Friday"] = "gotta get down"
</snippet></ROW><ROW><id>10082629</id><snippet>week["Friday"]</snippet></ROW><ROW><id>10082629</id><snippet>week</snippet></ROW><ROW><id>10082629</id><snippet>self.week</snippet></ROW><ROW><id>10082629</id><snippet>self.week</snippet></ROW><ROW><id>10082629</id><snippet>self</snippet></ROW><ROW><id>10082629</id><snippet>Song</snippet></ROW><ROW><id>10082629</id><snippet>Song.week</snippet></ROW><ROW><id>10082629</id><snippet>self.name = name</snippet></ROW><ROW><id>10082629</id><snippet>self.name</snippet></ROW><ROW><id>10082629</id><snippet>''</snippet></ROW><ROW><id>10082629</id><snippet>self.name</snippet></ROW><ROW><id>10082629</id><snippet>Song.name</snippet></ROW><ROW><id>10082629</id><snippet>Song.name</snippet></ROW><ROW><id>10082629</id><snippet>__init__</snippet></ROW><ROW><id>10082629</id><snippet>self.week = {}
</snippet></ROW><ROW><id>10082957</id><snippet>&gt;&gt;&gt; L = ['Ww','Aa','Bb','Cc','ww','AA','BB','CC']
&gt;&gt;&gt; [''.join(x) for x in zip(*[iter(L)] * 4)]
['WwAaBbCc', 'wwAABBCC']
</snippet></ROW><ROW><id>10082982</id><snippet>.decode(string_encoding)</snippet></ROW><ROW><id>10082982</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>10082982</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>10083032</id><snippet>random.randint()</snippet></ROW><ROW><id>10083032</id><snippet>for i in xrange(1):
</snippet></ROW><ROW><id>10083032</id><snippet>0</snippet></ROW><ROW><id>10083032</id><snippet>xrange(1)</snippet></ROW><ROW><id>10083032</id><snippet>random.randint(1, 100)</snippet></ROW><ROW><id>10083032</id><snippet>i = random.randint(1, 100)
</snippet></ROW><ROW><id>10083116</id><snippet>chr(27)</snippet></ROW><ROW><id>10083116</id><snippet>"\033[A"</snippet></ROW><ROW><id>10083116</id><snippet>33oct == 27dec</snippet></ROW><ROW><id>10083496</id><snippet>ScoreList = [[key] + value.values() for key, value in ScoreDict.iteritems()]
</snippet></ROW><ROW><id>10083496</id><snippet>ScoreList = []

for key, value in ScoreDict.iteritems():
  temp = []

  temp.append(key)
  temp.extend(value.values())

  ScoreList.append(temp)
</snippet></ROW><ROW><id>10083496</id><snippet>value.values()</snippet></ROW><ROW><id>10083618</id><snippet>cooperate</snippet></ROW><ROW><id>10083618</id><snippet>coiterate</snippet></ROW><ROW><id>10083618</id><snippet>cooperate</snippet></ROW><ROW><id>10083618</id><snippet>coiterate</snippet></ROW><ROW><id>10083618</id><snippet>CooperativeTask</snippet></ROW><ROW><id>10083618</id><snippet>coiterate</snippet></ROW><ROW><id>10083618</id><snippet>cooperate</snippet></ROW><ROW><id>10083618</id><snippet>CooperativeTask</snippet></ROW><ROW><id>10083618</id><snippet>LoopingCall</snippet></ROW><ROW><id>10083618</id><snippet>Cooperator</snippet></ROW><ROW><id>10083618</id><snippet>coiterate</snippet></ROW><ROW><id>10083618</id><snippet>Deferred</snippet></ROW><ROW><id>10083754</id><snippet>%typemap(in) env_t ** (env_t *temp) %{
    temp = env_alloc();
    PyObject *iter = PyObject_GetIter($input);
    for (PyObject *item; (item = PyIter_Next(it));) {
        PyObject *key = PyObject_Str(item);
        PyObject *val = PyObject_GetItem($input, key);
        env_set(temp, PyString_AsString(key), PyString_AsString(val), ENV_OVERRIDE);
        Py_DECREF(val);
        Py_DECREF(key);
        Py_DECREF(item);
    }
    Py_DECREF(iter);
    $1 = &amp;temp;
%}
%typemap(argout) env_t** %{
    PyObject *o = PyDict_New();
    for (char **val = env_array(*$1); *val; val++) {
        char *eq = strchr(*val, '=');
        *eq = '\0';
        PyMapping_SetItemString(o, *val, eq + 1);
    }
    env_free(*$1);
    $result = SWIG_Python_AppendOutput($result, o);
%}
</snippet></ROW><ROW><id>10083754</id><snippet>dict</snippet></ROW><ROW><id>10083754</id><snippet>env_t **</snippet></ROW><ROW><id>10083754</id><snippet>env_t **</snippet></ROW><ROW><id>10083754</id><snippet>dict</snippet></ROW><ROW><id>10083852</id><snippet>00,05 0 * * 1 /srv/django/get_rankings.py
</snippet></ROW><ROW><id>10083852</id><snippet>*     *     *   *    *        command to be executed
-     -     -   -    -
|     |     |   |    |
|     |     |   |    +----- day of week (0 - 6) (Sunday=0)
|     |     |   +------- month (1 - 12)
|     |     +--------- day of        month (1 - 31)
|     +----------- hour (0 - 23)
+------------- min (0 - 59)
</snippet></ROW><ROW><id>10083852</id><snippet>*</snippet></ROW><ROW><id>10083852</id><snippet>*</snippet></ROW><ROW><id>10083908</id><snippet>sort()</snippet></ROW><ROW><id>10083908</id><snippet>argsort()</snippet></ROW><ROW><id>10083908</id><snippet>argsort()</snippet></ROW><ROW><id>10083908</id><snippet>import numpy as np

A = np.asarray([[1,2,3],[4,5,6],[7,8,9]])
eig_vals, eig_vecs = np.linalg.eig(A)

eig_vals_sorted = np.sort(eig_vals)
eig_vecs_sorted = eig_vecs[eig_vals.argsort()]


# Alternatively, to avoid making new arrays
# do this:

sort_perm = eig_vals.argsort()

eig_vals.sort()     # &lt;-- This sorts the list in place.
eig_vecs = eig_vecs[sort_perm]
</snippet></ROW><ROW><id>10084097</id><snippet>eggs =</snippet></ROW><ROW><id>10084097</id><snippet>[buildout]</snippet></ROW><ROW><id>10084097</id><snippet>eggs = 
    django-lfs
    django-debug-toolbar
</snippet></ROW><ROW><id>10084097</id><snippet>ConfigParser</snippet></ROW><ROW><id>10084097</id><snippet>development.cfg</snippet></ROW><ROW><id>10084097</id><snippet>production.cfg</snippet></ROW><ROW><id>10084097</id><snippet>staging.cfg</snippet></ROW><ROW><id>10084097</id><snippet>development.cfg</snippet></ROW><ROW><id>10084097</id><snippet>production.cfg</snippet></ROW><ROW><id>10084097</id><snippet>production.cfg</snippet></ROW><ROW><id>10084097</id><snippet>development.cfg</snippet></ROW><ROW><id>10084563</id><snippet>all = all[:max(current - 2, 0)] + all[current:]
</snippet></ROW><ROW><id>10084563</id><snippet>del all[max(current - 2, 0):current]
</snippet></ROW><ROW><id>10084569</id><snippet>import tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        self.buttonDic = {
        'Brown Rice':0,
        'Banzai Veg':0,
        'Red Cabbage':0,
        'Black Beans':0
        }

        for key in self.buttonDic:
            self.buttonDic[key] = tk.IntVar()
            aCheckButton = tk.Checkbutton(self, text=key,
                                            variable=self.buttonDic[key])
            aCheckButton.grid(sticky='w')

        submitButton = tk.Button(self, text="Submit",
                                        command=self.query_checkbuttons)
        submitButton.grid()

    def query_checkbuttons(self):
        for key, value in self.buttonDic.items():
            state = value.get()
            if state != 0:
                print(key)
                self.buttonDic[key].set(0)

gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>10084569</id><snippet>for key, value in self.buttonDic.items():</snippet></ROW><ROW><id>10084569</id><snippet>ValueError: too many values to unpack</snippet></ROW><ROW><id>10084569</id><snippet>onvalue</snippet></ROW><ROW><id>10084569</id><snippet>offvalue</snippet></ROW><ROW><id>10084569</id><snippet>import tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        self.bRiceV = tk.StringVar()
        bRice = tk.Checkbutton(self, text="Brown Rice",variable=self.bRiceV,
                                    onvalue="Brown Rice", offvalue="Off")
        bRice.pack()

        self.bVegV = tk.StringVar()
        bVeg = tk.Checkbutton(self, text="Banzai Veg",variable=self.bVegV,
                                    onvalue="Banzai Veg", offvalue="Off")
        bVeg.pack()

        self.varList = [self.bRiceV, self.bVegV]

        submitButton = tk.Button(self, text="Submit",
                                command=self.query_checkbuttons)
        submitButton.pack()

    def query_checkbuttons(self):
        for var in self.varList:
            value = var.get()
            if value != 'Off':
                print(value)
                var.set('Off')

gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>10084590</id><snippet>Accept-Encoding: gzip</snippet></ROW><ROW><id>10084590</id><snippet>\r\n</snippet></ROW><ROW><id>10084590</id><snippet>\r\n</snippet></ROW><ROW><id>10084590</id><snippet>del sock</snippet></ROW><ROW><id>10084590</id><snippet>import socket
sock = socket.socket()
sock.connect(('en.wikipedia.org', 80))
for line in (
    "GET /wiki/List_of_HTTP_header_fields HTTP/1.1",
    "Host: en.wikipedia.org",
    "Connection: close",
):
    sock.send(line + "\r\n")
sock.send("\r\n")

while True:
    content = sock.recv(1024)
    if content:
        print content
    else:
        break
</snippet></ROW><ROW><id>10084590</id><snippet>httplib.py</snippet></ROW><ROW><id>10084639</id><snippet>int()</snippet></ROW><ROW><id>10084639</id><snippet>&gt;&gt;&gt; int('42')
42
</snippet></ROW><ROW><id>10084711</id><snippet>Traceback</snippet></ROW><ROW><id>10084711</id><snippet>Raising XXXError...</snippet></ROW><ROW><id>10084711</id><snippet>Raising XXXError...</snippet></ROW><ROW><id>10084749</id><snippet>iptables -A OUTPUT -t mangle -p udp -j MARK --set-mark 1
ip rule add fwmark 1 lookup 100
ip route add local 0.0.0.0/0 dev lo table 100
</snippet></ROW><ROW><id>10084749</id><snippet>#ifndef IP_TRANSPARENT
#define IP_TRANSPARENT 19
#endif

int val = 1; 
setsockopt(sockfd, SOL_IP, IP_TRANSPARENT, &amp;val, sizeof(val));
</snippet></ROW><ROW><id>10084757</id><snippet>web.ctx.env.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest'</snippet></ROW><ROW><id>10084757</id><snippet>HTTP_X_FILE_NAME</snippet></ROW><ROW><id>10084757</id><snippet>HTTP_X_FILE_TYPE</snippet></ROW><ROW><id>10084757</id><snippet>xhr.setRequestHeader( "X-File-Type", file.type );</snippet></ROW><ROW><id>10084999</id><snippet>try:
    region = [r for r in feed['config']['regions'] if region['region'] == region_name][0]
    instance_type = [t for t in region['instanceTypes'] if i['type'] == instance_type_name][0]
    # ...
    return decimal.Decimal(prices['USD'])
except IndexError:
    raise Exception("Failed to determine price for instance with region=%r, type=%r, size=%r, platform=%r" % 
                (region_name, instance_type_name, instance_size_name, platform_name))
</snippet></ROW><ROW><id>10084999</id><snippet>def filter_by_key(key, value, objects):
    return [o for o in objects if region[key] == value][0]

try:
    region = filter_by_key('region', region_name, feed['config']['regions'])
    instance_type = filter_by_key('type', instace_type_name, region['instanceTypes'])
    # ...
    return decimal.Decimal(prices['USD'])
except IndexError:
    raise Exception("Failed to determine price for instance with region=%r, type=%r, size=%r, platform=%r" % 
                (region_name, instance_type_name, instance_size_name, platform_name))
</snippet></ROW><ROW><id>10085225</id><snippet>self.db = pyodbc.connect('driver={%s};server=%s;database=%s;uid=%s;pwd=%s' % ( driver, server, db, user, password ) )
</snippet></ROW><ROW><id>10085242</id><snippet>cdef np.ndarray</snippet></ROW><ROW><id>10085242</id><snippet>out_array</snippet></ROW><ROW><id>10085242</id><snippet>def pyfunc(np.ndarray[np.int32_t, ndim=1] in_array):    
    cdef np.ndarray out_array = np.zeros((512,), dtype = np.int32)
    n = len(in_array)
    mymodule.c_func(&lt;int *&gt; in_array.data, n, &lt;int *&gt; out_array.data)
    return out_array
</snippet></ROW><ROW><id>10085452</id><snippet>__main__.ClassA</snippet></ROW><ROW><id>10085452</id><snippet>ClassB</snippet></ROW><ROW><id>10085452</id><snippet>ClassA.ClassA</snippet></ROW><ROW><id>10085452</id><snippet>ClassA</snippet></ROW><ROW><id>10085489</id><snippet>re.compile(r"(^\d+\w .*)|(.*\d+\w$)")
</snippet></ROW><ROW><id>10085630</id><snippet>buffer</snippet></ROW><ROW><id>10085630</id><snippet>&gt;&gt;&gt; s = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; b = buffer(s, 2, 10)
&gt;&gt;&gt; b
&lt;read-only buffer for 0x7f935ee75d70, size 10, offset 2 at 0x7f935ee5a8f0&gt;
&gt;&gt;&gt; b[:]
'cdefghijkl'
</snippet></ROW><ROW><id>10085764</id><snippet>value</snippet></ROW><ROW><id>10085764</id><snippet>class A(object):

    def __init__(self):
        self.value = []

    def method(self, new_value):
        self.value.append(new_value)
</snippet></ROW><ROW><id>10085764</id><snippet>str</snippet></ROW><ROW><id>10085764</id><snippet>class A(object):

    self.value = 'str'

    def method(self):
        self.value += '1'
</snippet></ROW><ROW><id>10085764</id><snippet>        self.value = self.value + '1'
</snippet></ROW><ROW><id>10085764</id><snippet>self.value</snippet></ROW><ROW><id>10085764</id><snippet>self</snippet></ROW><ROW><id>10085764</id><snippet>'str'</snippet></ROW><ROW><id>10085764</id><snippet>'1'</snippet></ROW><ROW><id>10085764</id><snippet>value</snippet></ROW><ROW><id>10085764</id><snippet>self.value = 'str1'
</snippet></ROW><ROW><id>10085764</id><snippet>__init__</snippet></ROW><ROW><id>10085764</id><snippet>self.value = []
</snippet></ROW><ROW><id>10085784</id><snippet>class Liquid(object):
    def foo(self):
        pass

    def bar(self):
        pass

class Water(Liquid):
    def __getattribute__(self, name):
        if name == 'bar':
            raise AttributeError("'Water' object has no attribute 'bar'")

l = Liquid()
l.bar()
w = Water()
w.bar()
</snippet></ROW><ROW><id>10086034</id><snippet>def steps(start,end,n):
    if n&lt;2:
        raise Exception("behaviour not defined for n&lt;2")
    step = (end-start)/float(n-1)
    return [int(round(start+x*step)) for x in range(n)]
</snippet></ROW><ROW><id>10086281</id><snippet>&gt;&gt;&gt; a = '5' * 10000
&gt;&gt;&gt; b = '5' * 10000
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>10086281</id><snippet>&gt;&gt;&gt; a = '5' * 5
&gt;&gt;&gt; b = '5' * 5
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>10086445</id><snippet>reverse</snippet></ROW><ROW><id>10086445</id><snippet>lib</snippet></ROW><ROW><id>10086445</id><snippet>reverse</snippet></ROW><ROW><id>10086445</id><snippet>from lib import print_ls

class LibTest(unittest.TestCase):

    def test_render_reverse_is_correct(self):
        with patch('django.core.urlresolvers.reverse') as mock_reverse:
            from lib import render_reverse
            mock_f = MagicMock(name='f', return_value='dummy_view')
            mock_kwargs = MagicMock(name='kwargs',return_value={'args':['123']})
            mock_reverse.return_value = '/natrium/cb/details/123'
            response = render_reverse(mock_f, mock_kwargs)

        self.assertTrue('/natrium/cb/details/' in response)
</snippet></ROW><ROW><id>10086475</id><snippet>def name():
    print 'Jack'

def do_n(fo, x):
    if x &lt;= 0:
        return
    fo()
    do_n(fo, x - 1)
</snippet></ROW><ROW><id>10086475</id><snippet>n</snippet></ROW><ROW><id>10086475</id><snippet>for dummy in range(10):
    name()
</snippet></ROW><ROW><id>10086528</id><snippet>{
        "_id" : {
                "value" : 1
        },
        "value" : 3
}
</snippet></ROW><ROW><id>10086566</id><snippet>{"ProductName":"XXXX",
   "Catalogs" : [
    {
        id : "50008064",
        value : "Apple"
    },
    {
        id : "50010566",
        value : "Box"
    },
    {
        id : "50016422",
        value : "Water"
    }
]}
</snippet></ROW><ROW><id>10086566</id><snippet>ensureIndex({'Catalogs.id':1})
</snippet></ROW><ROW><id>10086697</id><snippet>aa=re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$",ip)
</snippet></ROW><ROW><id>10086697</id><snippet>^</snippet></ROW><ROW><id>10086697</id><snippet>.match()</snippet></ROW><ROW><id>10086697</id><snippet>if aa:
    ip = aa.group()
</snippet></ROW><ROW><id>10086697</id><snippet>ip_candidates = re.findall(r"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b", ip)
</snippet></ROW><ROW><id>10086697</id><snippet>\b</snippet></ROW><ROW><id>10086997</id><snippet>[1-31]</snippet></ROW><ROW><id>10086997</id><snippet>1-3</snippet></ROW><ROW><id>10086997</id><snippet>1</snippet></ROW><ROW><id>10086997</id><snippet>[1981-2011]</snippet></ROW><ROW><id>10086997</id><snippet>31-02-2012</snippet></ROW><ROW><id>10086997</id><snippet>dd-mm-yyyy</snippet></ROW><ROW><id>10086997</id><snippet>\b\d{1,2}[-/:]\d{1,2}[-/:]\d{4}\b</snippet></ROW><ROW><id>10086997</id><snippet>-</snippet></ROW><ROW><id>10086997</id><snippet>:</snippet></ROW><ROW><id>10086997</id><snippet>/</snippet></ROW><ROW><id>10086997</id><snippet>:</snippet></ROW><ROW><id>10086997</id><snippet>/</snippet></ROW><ROW><id>10086997</id><snippet>mm/dd/yyyy</snippet></ROW><ROW><id>10086997</id><snippet>-</snippet></ROW><ROW><id>10086997</id><snippet>yyyy-mm-dd</snippet></ROW><ROW><id>10086997</id><snippet>dd.mm.yyyy</snippet></ROW><ROW><id>10086997</id><snippet>strptime()</snippet></ROW><ROW><id>10086997</id><snippet>04/05/2012</snippet></ROW><ROW><id>10087606</id><snippet>chown</snippet></ROW><ROW><id>10087606</id><snippet>umask</snippet></ROW><ROW><id>10087874</id><snippet>&gt;&gt;&gt; diff = ndiff('one\ntwo\nthree\n'.splitlines(1),
...              'ore\ntree\nemu\n'.splitlines(1))
&gt;&gt;&gt; diff = list(diff) # materialize the generated delta into a list
&gt;&gt;&gt; print ''.join(restore(diff, 1)),
one
two
three
&gt;&gt;&gt; print ''.join(restore(diff, 2)),
ore
tree
emu
</snippet></ROW><ROW><id>10087874</id><snippet>&gt;&gt;&gt; s1 = ['bacon\n', 'eggs\n', 'ham\n', 'guido\n']
&gt;&gt;&gt; s2 = ['python\n', 'eggy\n', 'hamster\n', 'guido\n']
&gt;&gt;&gt; for line in unified_diff(s1, s2, fromfile='before.py', tofile='after.py'):
...     sys.stdout.write(line)   
--- before.py
+++ after.py
@@ -1,4 +1,4 @@
-bacon
-eggs
-ham
+python
+eggy
+hamster
 guido
</snippet></ROW><ROW><id>10088249</id><snippet>./manage.py syncdb</snippet></ROW><ROW><id>10088293</id><snippet>from dateutil.parser import parse
from mx.DateTime import DateFrom
date = DateFrom(parse('Apr, 2012'))
</snippet></ROW><ROW><id>10088384</id><snippet>return</snippet></ROW><ROW><id>10088384</id><snippet>for</snippet></ROW><ROW><id>10088415</id><snippet>print decoded.contents</snippet></ROW><ROW><id>10088415</id><snippet>&gt;&gt;&gt; print decoded
&lt;p&gt; &lt;/p&gt;
&gt;&gt;&gt; print decoded.contents
[u'&lt;p&gt; &lt;/p&gt;']
</snippet></ROW><ROW><id>10088866</id><snippet>RegDeleteKey</snippet></ROW><ROW><id>10088866</id><snippet>RegDeleteKeyEx</snippet></ROW><ROW><id>10088866</id><snippet>pywin32</snippet></ROW><ROW><id>10088914</id><snippet>filter()</snippet></ROW><ROW><id>10088914</id><snippet>[x for x in l1 if myfilt(x, filetype)]
</snippet></ROW><ROW><id>10088914</id><snippet>filter()</snippet></ROW><ROW><id>10088914</id><snippet>filter(lambda x: myfilt(x, filetype), l1)
</snippet></ROW><ROW><id>10088914</id><snippet>functools.partial()</snippet></ROW><ROW><id>10088914</id><snippet>filter(functools.partial(myfilt, filetype=filetype), l1)
</snippet></ROW><ROW><id>10088931</id><snippet>log_line_re = re.compile(
r"""
(?P&lt;float1&gt;[0-9.]+)
\s
(?P&lt;float2&gt;[0-9.]+)
\s
(?P&lt;ip1&gt;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
\s
(?P&lt;field1&gt;.+?)
\s
(?P&lt;ip_port_1&gt;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5})
\s+
\[(?P&lt;request_date&gt;.+?)\]
\s
(?P&lt;host&gt;.+?)
\s
"
(?P&lt;http_method&gt;[A-Z]+)
\s
(?P&lt;request_path&gt;.+?)
\s
HTTP/(?P&lt;http_version&gt;[0-9.]+)
"
\s
(?P&lt;status_code&gt;\d{3})
\s
(?P&lt;number&gt;\d+)
\s
"
(?P&lt;referer&gt;.+?)
"
\s
"(?P&lt;user_agent&gt;.+?)"
\s
"(?P&lt;field2&gt;.+?)"
\s
"(?P&lt;field3&gt;.+?)"
\s
(?P&lt;field4&gt;.+?)
"
(?P&lt;ip2&gt;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
\s
(?P&lt;request_guid&gt;.+?)
"
""", re.VERBOSE)


def convert(line):
    return log_line_re.match(line).groupdict()
</snippet></ROW><ROW><id>10089127</id><snippet>R_HOME/doc/html/                 # CHANGES, NEWS, other miscellany
R_HOME/doc/manual/               # An Intro to R, R Language Definition, etc.
R_HOME/library/&lt;pkg-name&gt;/html/  # help files for packages
</snippet></ROW><ROW><id>10089127</id><snippet>--enable-prebuilt-html</snippet></ROW><ROW><id>10089127</id><snippet>BUILD_HTML = YES</snippet></ROW><ROW><id>10089127</id><snippet>make all recommended</snippet></ROW><ROW><id>10089150</id><snippet>rabbitmqctl list_queues</snippet></ROW><ROW><id>10089150</id><snippet>rabbitmqctl list_bindings</snippet></ROW><ROW><id>10089150</id><snippet>celeryd -Q queue1</snippet></ROW><ROW><id>10089511</id><snippet>Item</snippet></ROW><ROW><id>10089511</id><snippet>KitItem</snippet></ROW><ROW><id>10089511</id><snippet>Item</snippet></ROW><ROW><id>10089511</id><snippet>calc_list</snippet></ROW><ROW><id>10089511</id><snippet>with_polymorphic('*')</snippet></ROW><ROW><id>10089511</id><snippet>@classmethod
def search(cls):
    item = DBSession.query(cls).with_polymorphic('*').filter(...) #do search stuff here
    return item
</snippet></ROW><ROW><id>10089511</id><snippet>with_polymorphic(...)</snippet></ROW><ROW><id>10089511</id><snippet>SQL</snippet></ROW><ROW><id>10089511</id><snippet>final_price</snippet></ROW><ROW><id>10089511</id><snippet>class Item(Base):
    ...
    @property
    def total_price(self):
        return self.list_price

class KitItem(Item):
    ...
    @property
    def total_price(self):
        if self.calc_list:
            _price = 0.0
            for comp in self.components:
                _price += comp.component.list_price * comp.qty
            return _price
        else:
            # @note: again, you do not need to perform any query here at all, as *self* is that you need
            return self.list_price
</snippet></ROW><ROW><id>10089511</id><snippet>KitItem.components</snippet></ROW><ROW><id>10089511</id><snippet>total_price</snippet></ROW><ROW><id>10089607</id><snippet>HexFile = open(FileNameIn, 'r')
</snippet></ROW><ROW><id>10089607</id><snippet>'r'</snippet></ROW><ROW><id>10089607</id><snippet>open</snippet></ROW><ROW><id>10089607</id><snippet>r</snippet></ROW><ROW><id>10089607</id><snippet>w</snippet></ROW><ROW><id>10089607</id><snippet>OutputFile = open(FileNameOut, 'w')
</snippet></ROW><ROW><id>10089607</id><snippet>print &gt;&gt;OutputFile, "Something to print"
</snippet></ROW><ROW><id>10089607</id><snippet>write</snippet></ROW><ROW><id>10089607</id><snippet>OutputFile.write("Something to print\n")
</snippet></ROW><ROW><id>10089672</id><snippet>request.meta['depth']</snippet></ROW><ROW><id>10090348</id><snippet>accept()</snippet></ROW><ROW><id>10090348</id><snippet>accept()</snippet></ROW><ROW><id>10090348</id><snippet>accept()</snippet></ROW><ROW><id>10090348</id><snippet>AcceptEx()</snippet></ROW><ROW><id>10090437</id><snippet>import os
import glob
import zipfile

def is_audio(file):
    return 'acc' in file

app_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(app_path)
try:
    os.mkdir('AudioFiles')
except OSError:
    pass

for pencast in (glob.glob('*.pencast')):
    f = zipfile.ZipFile(pencast, 'r')
    for number, audio in enumerate(filter(is_audio, f.namelist())):
        basename = os.path.basename(os.path.splitext(pencast)[0])
        newfilename = '{}-{}.acc'.format(basename, number)
        print(newfilename, number, audio)
        f.extract(audio, os.path.join('AudioFiles', newfilename))
</snippet></ROW><ROW><id>10090659</id><snippet>import csv

my_dict =  {'PCIP': '192.168.1.4', 'DutIP': '192.168.1.6', 'timestamp': '20120410100340', 'start_time': '0.0', 
'Transfer bytes': '59457090', 'Port': '5763', 'Lost Datagrams': '10575', 'Percent Lost Datagrams': 
'20.727', 'PER': 20.727, 'Bandwidth bits': '51684334', 'Throughput': 51.684334, 'end_time': '9.2', 
'Unknown': '41710', 'Jitter': '0.017', 'ID': '3', 'Total Datagrams': '51020'}

writer = csv.writer(open("some.csv", "wb"))

writer.writerows(my_dict.viewitems())
</snippet></ROW><ROW><id>10090659</id><snippet>writer.writerow(list(my_dict.viewkeys()))
writer.writerow(list(my_dict.viewvalues()))
</snippet></ROW><ROW><id>10090840</id><snippet>&gt;&gt;&gt; int('Name1')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'Name1'
&gt;&gt;&gt; int('-43')
-43
</snippet></ROW><ROW><id>10090840</id><snippet>try</snippet></ROW><ROW><id>10090840</id><snippet>except</snippet></ROW><ROW><id>10091579</id><snippet>FileName = 'Numberdata.dat'
NumberFileHandle = open(FileName, 'r')
newFileString = ""
for Line in NumberFileHandle:
  for char in line: # this will work for any number of lines.
      if char == '4':
        newFileString += "1"
      elif char == '\n':
        newFileString += char
      else:
        newFileString += "9"
NumberFileHandle.close()

NumberFileHandle = open(FileName, 'w')
NumberFileHandle.write(newFileString)
NumberFileHandle.close()
</snippet></ROW><ROW><id>10092179</id><snippet>__name__</snippet></ROW><ROW><id>10092179</id><snippet>__bases__</snippet></ROW><ROW><id>10092179</id><snippet>&gt;&gt;&gt; class Base(object):
...     pass
...
&gt;&gt;&gt; class Derived(Base):
...     def print_base(self):
...         for base in self.__class__.__bases__:
...             print base.__name__
...
&gt;&gt;&gt; foo = Derived()
&gt;&gt;&gt; foo.print_base()
Base
</snippet></ROW><ROW><id>10092261</id><snippet>print unicode(x).encode('utf8')
</snippet></ROW><ROW><id>10092269</id><snippet>result_item['conferences']['count'] = count</snippet></ROW><ROW><id>10092269</id><snippet>result.append(result_item)</snippet></ROW><ROW><id>10092350</id><snippet>shutil.copyfile(files, target_dir)</snippet></ROW><ROW><id>10092350</id><snippet>shutil.copyfile(os.path.join(src_dir, files), target_dir)</snippet></ROW><ROW><id>10092350</id><snippet>src_dir</snippet></ROW><ROW><id>10092350</id><snippet>src_dir = 'C:\\'
target_dir = 'C:\\Test'
# Create a list of filenames
src_files = (os.listdir(src_dir)) 
# Create a list of full paths (valid)
src_paths = [f for f in [os.path.join(src_dir, f) for f in src_files] if os.path.isfile(f)]
# Do selection
choices = random.sample(src_paths, 5)
for path in choices:
    print path
    shutil.copy(path, target_dir)
    print ('Finished!')
</snippet></ROW><ROW><id>10092350</id><snippet>copyfile</snippet></ROW><ROW><id>10092350</id><snippet>copy</snippet></ROW><ROW><id>10092350</id><snippet>r</snippet></ROW><ROW><id>10092350</id><snippet>dir = 'C:\\Temp\\' # Is the same as
dir = r'C:\Temp\'
</snippet></ROW><ROW><id>10092421</id><snippet>minutes</snippet></ROW><ROW><id>10092421</id><snippet>minutes = (totalTime - seconds) % (60 ** 2) / 60
</snippet></ROW><ROW><id>10092421</id><snippet>hours, seconds = divmod(totalTime, 60 ** 2)
minutes, seconds = divmod(seconds, 60)
</snippet></ROW><ROW><id>10092463</id><snippet>for wine in wines:
    glass=wine #Lets pour your wine in a glass
    for stop in stop_words:
        if stop in glass: #Is stop in your glass? 
            #Replace stop in glass and pour it in the glass again
            glass = glass.replace(stop, "") 
    result.append(glass) #Finally pour the content from your glass to result


result
[' Chardonnay', 'Cabernet Sauvignon ', 'Bordeaux  ']
</snippet></ROW><ROW><id>10092463</id><snippet>&gt;&gt;&gt; for wine in wines:
    result.append(re.sub('('+'|'.join(stop_words)+')','',wine))    

&gt;&gt;&gt; result
[' Chardonnay', 'Cabernet Sauvignon ', 'Bordeaux  ']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10092463</id><snippet>&gt;&gt;&gt; [re.sub('('+'|'.join(stop_words)+')','',wine) for wine in wines]
[' Chardonnay', 'Cabernet Sauvignon ', 'Bordeaux  ']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10092493</id><snippet>glBufferData</snippet></ROW><ROW><id>10092493</id><snippet>setup_initial_points</snippet></ROW><ROW><id>10092493</id><snippet>glBufferSubData</snippet></ROW><ROW><id>10092493</id><snippet>glBindBuffer</snippet></ROW><ROW><id>10092493</id><snippet>update()</snippet></ROW><ROW><id>10092493</id><snippet>GL_DYNAMIC_DRAW</snippet></ROW><ROW><id>10092493</id><snippet>GL_STATIC_DRAW</snippet></ROW><ROW><id>10092493</id><snippet>import pyglet
from pyglet.gl import *
from ctypes import pointer, sizeof

window = pyglet.window.Window(width=800, height=800)

''' update function  '''
c = 0
def update(dt):
    global c
    c+=1
    data = calc_point(c)
    # if there's only on VBO, you can comment out the 'glBindBuffer' call
    glBindBuffer(GL_ARRAY_BUFFER, vbo_id)
    glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(data), data)

pyglet.clock.schedule(update)


''' draw function  '''
@window.event
def on_draw():

    glClear(GL_COLOR_BUFFER_BIT)
    glColor3f(0, 0, 0)

    glVertexPointer(2, GL_FLOAT, 0, 0)
    glDrawArrays(GL_POINTS, 0, 2)


''' calculate coordinates given counter 'c' '''
def calc_point(c):
    data = (GLfloat*4)(*[500+c, 100+c, 300+c, 200+c])
    return data


''' setup points '''
def setup_initial_points(c):
    vbo_id = GLuint()
    glGenBuffers(1, pointer(vbo_id))

    data = calc_point(c)
    glBindBuffer(GL_ARRAY_BUFFER, vbo_id)
    glBufferData(GL_ARRAY_BUFFER, sizeof(data), 0, GL_DYNAMIC_DRAW)

    return vbo_id


############################################

vbo_id = setup_initial_points(c)

glClearColor(0.2, 0.4, 0.5, 1.0)
glEnableClientState(GL_VERTEX_ARRAY)

glPointSize(10)
pyglet.app.run()
</snippet></ROW><ROW><id>10092807</id><snippet>    result_name = filename2
    print result_name
    i = 0

    # Check if file exists
    if arcpy.Exists(draftloc + "\\" + result_name):
        # If it does, increment i by 1
        i+=1
        # While each successive filename (including i) does not exists, then save the next filename
        while not arcpy.Exists(draftloc + "\\" + shortname + "_" + str(i) + extension):                
            mxd.saveACopy(draftloc + "\\" + shortname + "_" + str(i) + extension)            
    # else if the original file didn't satisfy the if, the save it.
    else:           
        mxd.saveACopy(draftloc + "\\" + result_name)
</snippet></ROW><ROW><id>10092862</id><snippet>list.sort()</snippet></ROW><ROW><id>10092862</id><snippet>my_list = [("a", set([1, 2, 3])), 
           ("b", set([1, 2, 3, 4])),
           ("c", set([1, 2]))]
my_list.sort(key=lambda x: len(x[1]), reverse=True)
</snippet></ROW><ROW><id>10092862</id><snippet>my_list</snippet></ROW><ROW><id>10092862</id><snippet>[('b', set([1, 2, 3, 4])), ('a', set([1, 2, 3])), ('c', set([1, 2]))]
</snippet></ROW><ROW><id>10093113</id><snippet>def OnClickRouter(self, event):
    image=wx.Image('cat.jpg', wx.BITMAP_TYPE_JPEG)
    self.frame = bucky(None, image)
    self.frame.Show()
</snippet></ROW><ROW><id>10093113</id><snippet>class bucky(wx.Frame):      
  # Creating the outer window/frame
  def __init__(self, parent, image=None):
    wx.Frame.__init__(self, parent, -1,'Karls Network Tool', size=(900,700))

    my_image = image if image else wx.Image("myself.bmp", wx.BITMAP_TYPE_BMP) 

    ''''''''''''''''''''''''''''''''
    # Button images
    buttonOneRouter = my_image.ConvertToBitmap()
    self.buttonOneRouter = wx.BitmapButton(panel, -1, buttonOneRouter, pos=(20,340))
    self.buttonOneRouter.Bind(wx.EVT_BUTTON, self.OnClickRouter)
    ''''''''''''''''''''''''''''''''
</snippet></ROW><ROW><id>10093189</id><snippet>url(r'^test/(\d+)/$', 'test_view', name='test-view'),
url(r'^test/$', 'test_view', name='test-view'),
</snippet></ROW><ROW><id>10093232</id><snippet>setData</snippet></ROW><ROW><id>10093232</id><snippet>PTAUchar.setData(string data)
</snippet></ROW><ROW><id>10093232</id><snippet>setData</snippet></ROW><ROW><id>10093240</id><snippet>&gt;&gt;&gt; s = "&lt; stuff to remove&gt; get this stuff &lt;stuff to remove&gt;"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'&lt;[^&lt;&gt;]*&gt;', '', s)
' get this stuff '
</snippet></ROW><ROW><id>10093240</id><snippet>&lt;[^&lt;&gt;]*&gt;</snippet></ROW><ROW><id>10093240</id><snippet>&lt;</snippet></ROW><ROW><id>10093240</id><snippet>&gt;</snippet></ROW><ROW><id>10093240</id><snippet>&lt;</snippet></ROW><ROW><id>10093240</id><snippet>&gt;</snippet></ROW><ROW><id>10093240</id><snippet>sub</snippet></ROW><ROW><id>10093240</id><snippet>.strip()</snippet></ROW><ROW><id>10093557</id><snippet>e = Expense(description=self.description,
            amount=self.amount,
            category=self.category,
            date=expense_date)
e.save()
e.tags = self.tags.all()
</snippet></ROW><ROW><id>10093780</id><snippet>re.sub()</snippet></ROW><ROW><id>10093780</id><snippet>def roman_to_int_repl(match):
    return str(roman_to_int(match.group(0)))
</snippet></ROW><ROW><id>10093780</id><snippet>s = "MMX Lions Television Inc"
regex = re.compile(r'\b(?=[MDCLXVI]+\b)M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\b')
print regex.sub(roman_to_int_repl, s)
</snippet></ROW><ROW><id>10093780</id><snippet>regex = re.compile(r'\b(?!LLC)(?=[MDCLXVI]+\b)M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\b')
</snippet></ROW><ROW><id>10093780</id><snippet>def roman_to_int_repl(match):
    exclude = set(["LLC"])   # add any other strings you don't want to replace
    if match.group(0) in exclude:
        return match.group(0)
    return str(roman_to_int(match.group(0)))
</snippet></ROW><ROW><id>10093820</id><snippet>round()</snippet></ROW><ROW><id>10093820</id><snippet>def my_round(x):
    return int(x + math.copysign(0.5, x))
</snippet></ROW><ROW><id>10094338</id><snippet>_replace</snippet></ROW><ROW><id>10094338</id><snippet>SplitResult</snippet></ROW><ROW><id>10094338</id><snippet>namedtuple</snippet></ROW><ROW><id>10094338</id><snippet>SplitResult</snippet></ROW><ROW><id>10094338</id><snippet>In [16]: sr = urlparse.urlsplit("http:///www.google.com")

In [17]: sr
Out[17]: SplitResult(scheme='http', netloc='', path='/www.google.com', query='', fragment='')

In [18]: sr._replace(scheme='https')
Out[18]: SplitResult(scheme='https', netloc='', path='/www.google.com', query='', fragment='')
</snippet></ROW><ROW><id>10094338</id><snippet>SplitResult</snippet></ROW><ROW><id>10094338</id><snippet>tuple</snippet></ROW><ROW><id>10094338</id><snippet>_replace</snippet></ROW><ROW><id>10095099</id><snippet>virtualenv</snippet></ROW><ROW><id>10095099</id><snippet>/usr/lib/python2.7/site-packages</snippet></ROW><ROW><id>10095099</id><snippet>site-packages</snippet></ROW><ROW><id>10095099</id><snippet>virtualenv</snippet></ROW><ROW><id>10095099</id><snippet>insert(0,</snippet></ROW><ROW><id>10095433</id><snippet>Thread</snippet></ROW><ROW><id>10095481</id><snippet>weapon</snippet></ROW><ROW><id>10095481</id><snippet>self.weaponStrength = strength
</snippet></ROW><ROW><id>10095481</id><snippet>def weaponStrength(...):
</snippet></ROW><ROW><id>10095555</id><snippet>&gt;&gt;&gt; s = "a == T_CONSTANT"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r"(\w+)\s*==\s*T_CONSTANT", r"SOME_MACRO(\1)", s)
'SOME_MACRO(a)'
</snippet></ROW><ROW><id>10095555</id><snippet>!=</snippet></ROW><ROW><id>10095675</id><snippet>temp_var = datetime.strptime(cgi.escape(self.request.get('exam_date')),"%m/%d/%Y")
pledge_data.checkup_date = temp_var
</snippet></ROW><ROW><id>10095763</id><snippet>__init__.py</snippet></ROW><ROW><id>10095763</id><snippet>pages</snippet></ROW><ROW><id>10095781</id><snippet>def __init__(self):
    self.outerLabels = {}
    self.upperLabels = {}
    # whatever else is currently in __init__()
</snippet></ROW><ROW><id>10095781</id><snippet>for i in range(1, 10):
    self.outerLabels[i] = ttk.Label(self.Shape).grid(row=i)
    self.upperLabels[i] = ttk.Label(self.outerLabels[i]).grid(row=0)
    ttk.Radiobutton(self.upperLabels[i]).grid(column=0)
    ttk.Radiobutton(self.upperLabels[i]).grid(column=1)
    ttk.Radiobutton(self.upperLabels[i]).grid(column=2)
    ttk.Radiobutton(self.upperLabels[i]).grid(column=3)
    ttk.Entry(self.upperLabels[i]).grid(column=4)
    ttk.Scale(self.upperLabels[i]).grid(column=5)
    self.lowerLabels[i] = ttk.Label(self.outerLabels[i]).grid(row=1)
    ttk.Entry(self.lowerLabels[i]).grid(column=0)
    ttk.Scale(self.lowerLabels[i]).grid(column=1)
    self.lowerLabels[i].configure(state=DISABLED)
</snippet></ROW><ROW><id>10095879</id><snippet>@register.tag
def remove_whitespace(parser, token):
    nodelist = parser.parse(('endremove_whitespace',))
    parser.delete_first_token()
    return RemoveSpaces(nodelist)

class RemoveSpaces(template.Node):
    def __init__(self, nodelist):
        self.nodelist = nodelist
    def render(self, context):
        output = self.nodelist.render(context)
        return ''.join(output.split()) # modify behavior if desired

{% load mytags %}
{% remove_whitespace %}
&lt;b&gt;All whitespace stripped&lt;/b&gt;
{% endremove_whitespace %}
</snippet></ROW><ROW><id>10095922</id><snippet>/</snippet></ROW><ROW><id>10095922</id><snippet>/status</snippet></ROW><ROW><id>10095922</id><snippet>cherrypy.tree.mount(Status(), '/status', config)
</snippet></ROW><ROW><id>10095922</id><snippet>status = Status()
cherrypy.tree.mount(status, '/status', config)
cherrypy.tree.mount(status, '/', config)
</snippet></ROW><ROW><id>10096109</id><snippet>initguess = [v0,0.5,0.5]
</snippet></ROW><ROW><id>10096109</id><snippet>def errfunc(params,myfun,y0,Tx,y):
</snippet></ROW><ROW><id>10096247</id><snippet>QWebPage.frameCreated</snippet></ROW><ROW><id>10096247</id><snippet>QWebFrame.javaScriptWindowObjectCleared</snippet></ROW><ROW><id>10096247</id><snippet>QWebFrame.evaluateJavaScript</snippet></ROW><ROW><id>10096247</id><snippet>runjs</snippet></ROW><ROW><id>10096295</id><snippet>\displaymath</snippet></ROW><ROW><id>10096295</id><snippet>\sum</snippet></ROW><ROW><id>10096295</id><snippet>\infty</snippet></ROW><ROW><id>10096295</id><snippet>.. autofunction::</snippet></ROW><ROW><id>10096295</id><snippet>def test_func(x):
    """This function will try to calculate:

    .. math::
        \sum_{i=1}^{\\infty} x_{i}

    good luck!
    """
    pass
</snippet></ROW><ROW><id>10096295</id><snippet>.. math::</snippet></ROW><ROW><id>10096295</id><snippet>:math:</snippet></ROW><ROW><id>10096482</id><snippet>Explicit is better than implicit.</snippet></ROW><ROW><id>10096482</id><snippet>issubclass(a, b)
</snippet></ROW><ROW><id>10096482</id><snippet>a</snippet></ROW><ROW><id>10096482</id><snippet>b</snippet></ROW><ROW><id>10096482</id><snippet>a</snippet></ROW><ROW><id>10096482</id><snippet>b</snippet></ROW><ROW><id>10096482</id><snippet>a &lt; b
</snippet></ROW><ROW><id>10096482</id><snippet>a</snippet></ROW><ROW><id>10096482</id><snippet>b</snippet></ROW><ROW><id>10096482</id><snippet>a + b</snippet></ROW><ROW><id>10096482</id><snippet>+</snippet></ROW><ROW><id>10096688</id><snippet>ManyToManyField</snippet></ROW><ROW><id>10096688</id><snippet>through='shows.PlaylistPlayer' on the</snippet></ROW><ROW><id>10096868</id><snippet>import datetime

shortnames = ['H04_IF_FigF2_LCC_05Apr12_mm', 
             'H04_BS_IF_FigF2_LCC_05Apr12_mm_2', 'HH_IF_FigF2_SS_05Apr12_mm', 
             'D01_BS_IF_FigF2_LCC_05Apr12_mm_1', 'D01_BS_FigF2_Overview_05Apr12_mm']

def update_time(name):
    old_split = name.split('_')
    new_split = []
    date_fmt = '%d%b%y'
    new_date = datetime.datetime.strftime(datetime.datetime.now(), date_fmt)
    for n in old_split:
        try:
            old_date = datetime.datetime.strptime(n, date_fmt)
            new_split.append(new_date)
        except ValueError:
            new_split.append(n)
    return '_'.join(new_split)

&gt;&gt;&gt; [update_time(filename) for filename in shortnames]
['H04_IF_FigF2_LCC_10Apr12_mm', 'H04_BS_IF_FigF2_LCC_10Apr12_mm_2', 'HH_IF_FigF2_SS_10Apr12_mm', 'D01_BS_IF_FigF2_LCC_10Apr12_mm_1', 'D01_BS_FigF2_Overview_10Apr12_mm']
</snippet></ROW><ROW><id>10097045</id><snippet>return</snippet></ROW><ROW><id>10097045</id><snippet>else:</snippet></ROW><ROW><id>10097045</id><snippet>return</snippet></ROW><ROW><id>10097111</id><snippet>words.pop(i)</snippet></ROW><ROW><id>10097111</id><snippet>words</snippet></ROW><ROW><id>10097111</id><snippet>enumerate()</snippet></ROW><ROW><id>10097274</id><snippet>field_name</snippet></ROW><ROW><id>10097274</id><snippet>field_name</snippet></ROW><ROW><id>10097274</id><snippet>arg_name</snippet></ROW><ROW><id>10097274</id><snippet>arg_name</snippet></ROW><ROW><id>10097274</id><snippet>'10'</snippet></ROW><ROW><id>10097274</id><snippet>':-]'</snippet></ROW><ROW><id>10097274</id><snippet>arg_name</snippet></ROW><ROW><id>10097274</id><snippet>'.name'</snippet></ROW><ROW><id>10097274</id><snippet>getattr()</snippet></ROW><ROW><id>10097274</id><snippet>'[index]'</snippet></ROW><ROW><id>10097274</id><snippet>__getitem__()</snippet></ROW><ROW><id>10097274</id><snippet>arg_name</snippet></ROW><ROW><id>10097274</id><snippet>identifier</snippet></ROW><ROW><id>10097274</id><snippet>tuple</snippet></ROW><ROW><id>10097274</id><snippet>arg_name</snippet></ROW><ROW><id>10097274</id><snippet>identifier</snippet></ROW><ROW><id>10097274</id><snippet>integer</snippet></ROW><ROW><id>10097276</id><snippet>developmentServer = False

if os.environ.get('SERVER_SOFTWARE','').startswith('Development'):
    developmentServer = True

class BaseRequestHandler(webapp2.RequestHandler):
    def dispatch(self):
        retValue = super(BaseRequestHandler, self).dispatch()
        if developmentServer:
                from google.appengine.tools import dev_appserver 
                dev_appserver.TearDownStubs()

        return retValue
</snippet></ROW><ROW><id>10097511</id><snippet>A</snippet></ROW><ROW><id>10097511</id><snippet>b</snippet></ROW><ROW><id>10097511</id><snippet>name</snippet></ROW><ROW><id>10097511</id><snippet>def DisplayIt(request):
    somestring = ""
    for a in A.objects.filter(b__name__isnull=False):
        somestring += a.b.name
</snippet></ROW><ROW><id>10097511</id><snippet>a.b</snippet></ROW><ROW><id>10097511</id><snippet>def DisplayIt(request):
    somestring = ""
    for a in A.objects.filter(b__name__isnull=False):
        somestring += a.b.name
    for a in A.objects.filter(b__name__isnull=True):
        somestring += "dummy value for missing b.name"
</snippet></ROW><ROW><id>10097511</id><snippet>def DisplayIt(request):
    stringparts = []
    for a in A.objects.filter(b__name__isnull=False):
        stringparts.append(a.b.name)
    for a in A.objects.filter(b__name__isnull=True):
        stringparts.append("dummy value for missing b.name")
    ''.join(stringparts)
</snippet></ROW><ROW><id>10097511</id><snippet>select_related</snippet></ROW><ROW><id>10097511</id><snippet>def DisplayIt(request):
    stringparts = []
    for a in A.objects.filter(b__name__isnull=False).select_related():
        stringparts.append(a.b.name)
    for a in A.objects.filter(b__name__isnull=True).select_related():
        stringparts.append("dummy value for missing b.name")
    ''.join(stringparts)
</snippet></ROW><ROW><id>10097556</id><snippet>exec()</snippet></ROW><ROW><id>10097556</id><snippet>Runtime</snippet></ROW><ROW><id>10097556</id><snippet>Process p = Runtime.getRuntime().exec("python yourapp.py");
</snippet></ROW><ROW><id>10097599</id><snippet>thinking.py</snippet></ROW><ROW><id>10097599</id><snippet>from Tkinter import *

root = Tk()

scrollbar = Scrollbar(root)
scrollbar.pack(side=RIGHT, fill=Y)

text = Text(root, wrap=WORD, yscrollcommand=scrollbar.set)
text.pack()

data = 'I will study some tkinter\n'
for i in range(100):
    text.insert(END, data)

scrollbar.config(command=text.yview)

mainloop()
</snippet></ROW><ROW><id>10097979</id><snippet>words = {}
with open('a.txt') as f:
  for l in f:
    cols = l.split()
    word = cols[0]
    nums = [int(e) for e in cols[1:]]
    words[word] = nums

# Printing all words with their number lists
for k, v in words.iteritems():
  print("%s -&gt; %s" % (k, v))

# Getting specific ones
print(words['ABC'][1]) # -&gt; 34
print(words['hre'][2]) # -&gt; 356

# Showing it's an int - doing some basic arithmetic operation
i = words['ABC'][1] + 50 # -&gt; 84
print(i)
</snippet></ROW><ROW><id>10097979</id><snippet>ABC 12 34 24
edf 23 15 63
hre 41 3  356
</snippet></ROW><ROW><id>10097979</id><snippet>$ python mkt.py 
hre -&gt; [41, 3, 356]
ABC -&gt; [12, 34, 24]
edf -&gt; [23, 15, 63]
34
356
84
</snippet></ROW><ROW><id>10098144</id><snippet>return</snippet></ROW><ROW><id>10098144</id><snippet>or</snippet></ROW><ROW><id>10098144</id><snippet>return findName(tree['left'], name) or findName(tree['right'], name)
</snippet></ROW><ROW><id>10098144</id><snippet>0</snippet></ROW><ROW><id>10098144</id><snippet>0</snippet></ROW><ROW><id>10098162</id><snippet>numpy.ndindex</snippet></ROW><ROW><id>10098162</id><snippet>numpy.ndenumerate</snippet></ROW><ROW><id>10098162</id><snippet>import numpy as np
for x, y in np.ndindex((3,2)):
    print x, y
</snippet></ROW><ROW><id>10098162</id><snippet>0 0
0 1
1 0
1 1
2 0
2 1
</snippet></ROW><ROW><id>10098248</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; route = ['Ayr', 'Newton', 'Troon', 'Paisley', 'Glasgow']
&gt;&gt;&gt; [(route[0],)+x+(route[-1],) for i in range(len(route)-1) for x in combinations(route[1:-1],i)]
[('Ayr', 'Glasgow'), ('Ayr', 'Newton', 'Glasgow'), ('Ayr', 'Troon', 'Glasgow'), ('Ayr', 'Paisley', 'Glasgow'), ('Ayr', 'Newton', 'Troon', 'Glasgow'), ('Ayr', 'Newton', 'Paisley', 'Glasgow'), ('Ayr', 'Troon', 'Paisley', 'Glasgow'), ('Ayr', 'Newton', 'Troon', 'Paisley', 'Glasgow')]
</snippet></ROW><ROW><id>10098387</id><snippet>os.path</snippet></ROW><ROW><id>10098387</id><snippet>dirname</snippet></ROW><ROW><id>10098387</id><snippet>&gt;&gt;&gt; from os.path import dirname
&gt;&gt;&gt; dirname("/tmp/test/helloworld.cpp")
'/tmp/test'
</snippet></ROW><ROW><id>10098458</id><snippet>sheet = book.sheet_by_name(list(set(['map', 'Map', 'MAP']) &amp; set(book.sheet_names())[0])
</snippet></ROW><ROW><id>10098458</id><snippet>possibleNames = ['map', 'Map', 'MAP']
sheetNames = book.sheet_names()
name = intersect(possibleNames, sheetNames)
if len(name) &lt; 1:
    print "Error"
    # break program appropiately
sheet = book.sheet_by_name(name[0])

def intersect(a, b):
    return list(set(a) &amp; set(b))
</snippet></ROW><ROW><id>10098609</id><snippet>includes</snippet></ROW><ROW><id>10098609</id><snippet>excludes</snippet></ROW><ROW><id>10098609</id><snippet>py2app</snippet></ROW><ROW><id>10098715</id><snippet>def badge(request):
    # Create the HttpResponse object with the appropriate PDF headers.
    response = HttpResponse(mimetype='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=somefilename.pdf'

    # Create the PDF object, using the StringIO object as its "file."
    pagesize = pagesizes.landscape(letter)
    pagewidth, pageheight = pagesize
    doc = platypus.BaseDocTemplate(filename=response, pagesize=pagesize,
            showBoundary=1)
    newHeight = doc.bottomMargin + doc.topMargin + doc.height
    newWidth = doc.leftMargin + doc.rightMargin + doc.width

    # reset margins
    doc.leftMargin = 0
    doc.bottomMargin = 0
    doc.rightMargin = 0
    doc.topMargin = 0

    # create the frames
    frames = []
    left_frame_1 = Frame(doc.leftMargin,
            doc.bottomMargin,
            newWidth / 3,
            newHeight / 6,
            showBoundary=1,
            id="left_frame_1")
    left_frame_2 = Frame(doc.leftMargin,
            doc.bottomMargin + newHeight / 6,
            newWidth / 3,
            newHeight / 6,
            showBoundary=1,
            id="left_frame_2")
    left_frame_3 = Frame(doc.leftMargin,
            doc.bottomMargin + newHeight / 6 * 2,
            newWidth / 3,
            newHeight / 6,
            showBoundary=1,
            id="left_frame_3")
    left_frame_4 = Frame(doc.leftMargin,
            doc.bottomMargin + newHeight / 6 * 3,
            newWidth / 3,
            newHeight / 6,
            showBoundary=1,
            id="left_frame_4")
    left_frame_5 = Frame(doc.leftMargin,
            doc.bottomMargin + newHeight / 6 * 4,
            newWidth / 3,
            newHeight / 6,
            showBoundary=1,
            id="left_frame_5")
    left_frame_6 = Frame(doc.leftMargin,
            doc.bottomMargin + newHeight / 6 * 5,
            newWidth / 3,
            newHeight / 6,
            showBoundary=1,
            id="left_frame_6")
    mid_frame_1 = Frame(doc.leftMargin + newWidth / 3,
            doc.bottomMargin,
            newWidth / 3,
            newHeight / 6 * 4,
            showBoundary=1,
            id="mid_frame_1")
    mid_frame_2 = Frame(doc.leftMargin + newWidth / 3,
            doc.bottomMargin + newHeight / 6 * 4,
            newWidth / 3,
            newHeight / 6 * 2,
            showBoundary=1,
            id="mid_frame_2")
    right_frame_1 = Frame(doc.leftMargin + newWidth / 3 * 2,
            doc.bottomMargin,
            newWidth / 3,
            newHeight / 6 * 2,
            showBoundary=1,
            id="right_frame_1")
    right_frame_2 = Frame(doc.leftMargin + newWidth / 3 * 2,
            doc.bottomMargin + newHeight / 6 * 2,
            newWidth / 3,
            newHeight / 6 * 3,
            showBoundary=1,
            id="right_frame_2")
    right_frame_3 = Frame(doc.leftMargin + newWidth / 3 * 2,
            doc.bottomMargin + newHeight / 6 * 5,
            newWidth / 3,
            newHeight,
            showBoundary=1,
            id="right_frame_3")

    frames.append(left_frame_1)
    frames.append(left_frame_2)
    frames.append(left_frame_3)
    frames.append(left_frame_4)
    frames.append(left_frame_5)
    frames.append(left_frame_6)
    frames.append(mid_frame_1)
    frames.append(mid_frame_2)
    frames.append(right_frame_1)
    frames.append(right_frame_2)
    frames.append(right_frame_3)

    Elements = []

    styles = getSampleStyleSheet()

    # LEFT COL CONTENT
    Elements.append(Paragraph("LEFT1, " * 10,
        styles['Normal']))
    Elements.append(FrameBreak())
    Elements.append(Paragraph("LEFT2, " * 10,
        styles['Normal']))
    Elements.append(FrameBreak())
    Elements.append(Paragraph("LEFT3, " * 10,
        styles['Normal']))
    Elements.append(FrameBreak())
    Elements.append(Paragraph("LEFT4, " * 10,
        styles['Normal']))
    Elements.append(FrameBreak())
    Elements.append(Paragraph("LEFT5, " * 10,
        styles['Normal']))
    Elements.append(FrameBreak())
    Elements.append(Paragraph("LEFT6, " * 10,
        styles['Normal']))
    Elements.append(FrameBreak())

    # MID COL CONTENT
    Elements.append(Paragraph("MID_2, " * 20,
        styles['Normal']))
    Elements.append(FrameBreak())
    Elements.append(Paragraph('''
    &lt;para&gt;&lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;
    (1) Please check the registration handy kit to ensure you have received
    the item(s) as marked on the cover. &lt;br /&gt;
    (2) The official receipt(s) for the payments you have made are enclosed.
    Please check to ensure that it was issued correctly. &lt;br /&gt;
    (3) You will be requested to present the appropriate coupon(s)/ ticket (s)
    for admission to lunch, banquet or other events. &lt;br /&gt;
    (4) The organizer nor its appointed Professional Conference Organiser shall
    not be responsible for any loss or damage to this kit &lt;br /&gt;
    &lt;/para&gt;
    ''', styles['Normal']))
    Elements.append(FrameBreak())

    # RIGHT COL CONTENT
    Elements.append(Paragraph("RIGHT_1 " * 30,
        styles['Normal']))
    Elements.append(FrameBreak())
    Elements.append(Paragraph('''
    &lt;para&gt;&lt;b&gt;&lt;font size="16"&gt;REGISTRATION Handy Kit&lt;/font&gt;&lt;/b&gt; &lt;br /&gt;
    This kit contains the checked items: &lt;br /&gt;
    [] Namebadge &lt;br /&gt;
    [] Official Receipt(s) &lt;br /&gt;
    [] Lunch Coupon(s) &lt;br /&gt;
    [] Banquet Ticket &amp; Reply Slip &lt;br /&gt;
    [] Others: &lt;br /&gt;
    _________________________________
    _________________________________
    _________________________________
    _________________________________
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt; 
    &lt;i&gt;If any of the checked items are missing in your kit, please inform the
    registration counter staff&lt;/i&gt;
    &lt;/para&gt;
    ''', styles['Normal']))
    Elements.append(FrameBreak())
    Elements.append(Paragraph("RIGHT_3, " * 10,
        styles['Normal']))

    doc.addPageTemplates(platypus.PageTemplate(id="TwoCol", frames=frames))
    doc.build(Elements)

    return response
</snippet></ROW><ROW><id>10098749</id><snippet>$arrColors = "blue", "red", "green", "yellow", "white", "pink", "orange", "turquoise"
$arrColors -contains "black" 
False
$arrColors -contains "blue"
True
</snippet></ROW><ROW><id>10098765</id><snippet>__eq__()</snippet></ROW><ROW><id>10098765</id><snippet>__hash__()</snippet></ROW><ROW><id>10098767</id><snippet>{% include "name_snippet.html" with person="Jane" greeting="Hello" %}
</snippet></ROW><ROW><id>10098845</id><snippet>april_c = soup.find('div', attrs={'id':'april2012'})
parking_apr = april_c.findAll('div', 'dayContainer')
for item in parking_apr:
    print item.text
</snippet></ROW><ROW><id>10098909</id><snippet>import numpy as np
from nltk.probability import FreqDist
from nltk.classify import SklearnClassifier
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline

pipeline = Pipeline([('tfidf', TfidfTransformer()),
                     ('chi2', SelectKBest(chi2, k=1000)),
                     ('nb', MultinomialNB())])
classif = SklearnClassifier(pipeline)

from nltk.corpus import movie_reviews
pos = [FreqDist(movie_reviews.words(i)) for i in movie_reviews.fileids('pos')]
neg = [FreqDist(movie_reviews.words(i)) for i in movie_reviews.fileids('neg')]
add_label = lambda lst, lab: [(x, lab) for x in lst]
classif.train(add_label(pos[:100], 'pos') + add_label(neg[:100], 'neg'))

l_pos = np.array(classif.batch_classify(pos[100:]))
l_neg = np.array(classif.batch_classify(neg[100:]))
print "Confusion matrix:\n%d\t%d\n%d\t%d" % (
          (l_pos == 'pos').sum(), (l_pos == 'neg').sum(),
          (l_neg == 'pos').sum(), (l_neg == 'neg').sum())
</snippet></ROW><ROW><id>10098909</id><snippet>Confusion matrix:
524     376
202     698
</snippet></ROW><ROW><id>10099240</id><snippet>POINTER(c_char)</snippet></ROW><ROW><id>10099240</id><snippet>clibblah = ctypes.cdll.LoadLibrary('clibblah.dylib')
get_pixels = clibblah.get_pixels
get_pixels.restype = ctypes.POINTER(ctypes.c_char)

pixels = get_pixels()
num_pixels = clibblah.get_pixel_length()

# Slice the ctypes array into a Python string
a = pixels[:num_pixels]
</snippet></ROW><ROW><id>10099357</id><snippet>pip install cython
</snippet></ROW><ROW><id>10099469</id><snippet>def first_name_is_in(first_names, full_names):
    for name in first_names:
        for full_name in full_names:
            if full_name.startswith("%s " % (name,)):
               return True
    return False
</snippet></ROW><ROW><id>10099511</id><snippet>export JPEG_ROOT=/usr/local/include</snippet></ROW><ROW><id>10099511</id><snippet>pip install -U PIL</snippet></ROW><ROW><id>10099632</id><snippet>m = [[0] * 2 for _ in xrange(3)]
</snippet></ROW><ROW><id>10099632</id><snippet>3</snippet></ROW><ROW><id>10099632</id><snippet>2</snippet></ROW><ROW><id>10099632</id><snippet>0</snippet></ROW><ROW><id>10099632</id><snippet>range</snippet></ROW><ROW><id>10099632</id><snippet>xrange</snippet></ROW><ROW><id>10099632</id><snippet>def create_matrix(m, n, initial=0):
    return [[initial] * n for _ in xrange(m)]
</snippet></ROW><ROW><id>10099632</id><snippet>m = create_matrix(3, 2)
print m
&gt; [[0, 0], [0, 0], [0, 0]]
</snippet></ROW><ROW><id>10099632</id><snippet>numpy</snippet></ROW><ROW><id>10099632</id><snippet>numpy.zeros()</snippet></ROW><ROW><id>10100024</id><snippet>itertools.groupby</snippet></ROW><ROW><id>10100024</id><snippet>students = fill_student_list()
same_last_names = [list(group) for lastname, group in 
                   groupby(sorted(students, key=operator.attrgetter('lastname'))]
</snippet></ROW><ROW><id>10100140</id><snippet>empty_label

    By default the &lt;select&gt; widget used by ModelChoiceField
    will have an empty choice at the top of the list. You can change the text
    of this label (which is "---------" by default) with the empty_label
    attribute, or you can disable the empty label entirely by setting
    empty_label to None:

    # A custom empty label
    field1 = forms.ModelChoiceField(queryset=..., empty_label="(Nothing)")

    # No empty label
    field2 = forms.ModelChoiceField(queryset=..., empty_label=None)
</snippet></ROW><ROW><id>10100140</id><snippet>The __unicode__ method of the model will be called to generate string
representations of the objects for use in the field's choices;
to provide customized representations, subclass ModelChoiceField and override
label_from_instance. This method will receive a model object, and should return
a string suitable for representing it. For example:

class MyModelChoiceField(ModelChoiceField):
    def label_from_instance(self, obj):
        return "My Object #%i" % obj.id
</snippet></ROW><ROW><id>10100140</id><snippet>attrs</snippet></ROW><ROW><id>10100140</id><snippet>creator = MyCustomField(queryset=...,
                        empty_label="Please select",
                        widget=forms.Select(attrs={'onchange':'some_ajax_function()'})
</snippet></ROW><ROW><id>10100614</id><snippet>list = [x for x in wx.all_synsets('n')]
</snippet></ROW><ROW><id>10100614</id><snippet>for x in wx.all_synsets('n'):
    print x
</snippet></ROW><ROW><id>10100736</id><snippet>titles = hxs.select('//span[@class="headline"]/text()').extract()
contents = hxs.select('//div[@class="articletext"]/text()').extract()

for title, context in zip(titles, contents):
    item = FooItem()
    item['title'] = title
    item['content'] = context
    yield item
</snippet></ROW><ROW><id>10100736</id><snippet>title</snippet></ROW><ROW><id>10100736</id><snippet>content</snippet></ROW><ROW><id>10100736</id><snippet>blocks = hxs.select('//div[@class="some_filter"]')
for block in blocks:
    item = FooItem()
    item['title'] = block.select('span[@class="headline"]/text()').extract()
    item['content'] = block.select('div[@class="articletext"]/text()').extract()
    yield item
</snippet></ROW><ROW><id>10100957</id><snippet>str</snippet></ROW><ROW><id>10100957</id><snippet>bytes</snippet></ROW><ROW><id>10100957</id><snippet>.encrypt/.decrypt</snippet></ROW><ROW><id>10101312</id><snippet>from bs4 import BeautifulSoup

data = open('data\file.html', encoding='utf-8')
soup = BeautifulSoup(data)

tag = soup.find('strong', text="Heading:")

try:
    split_tag = str(tag.next_sibling.next_element.next_element).split(", ")
except AttributeError:
    split_tag = []  # zero-length list of tags
</snippet></ROW><ROW><id>10101312</id><snippet>if</snippet></ROW><ROW><id>10101312</id><snippet>soup.find()</snippet></ROW><ROW><id>10101312</id><snippet>None</snippet></ROW><ROW><id>10101312</id><snippet>from bs4 import BeautifulSoup

data = open('data\file.html', encoding='utf-8')
soup = BeautifulSoup(data)

tag = soup.find('strong', text="Heading:")

if tag is None:
    split_tag = []
else:
    split_tag = str(tag.next_sibling.next_element.next_element).split(", ")
</snippet></ROW><ROW><id>10101312</id><snippet>None</snippet></ROW><ROW><id>10101312</id><snippet>is</snippet></ROW><ROW><id>10101466</id><snippet>ssh.util.log_to_file("paramiko.log", 10)
</snippet></ROW><ROW><id>10101532</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import itertools

def flip(items, ncol):
    return itertools.chain(*[items[i::ncol] for i in range(ncol)])

x = np.arange(-2*np.pi, 2*np.pi, 0.1)
ax = plt.subplot(111)
ax.plot(x, np.sin(x), label='Sine')
ax.plot(x, np.cos(x), label='Cosine')
ax.plot(x, np.arctan(x), label='Inverse tan')

handles, labels = ax.get_legend_handles_labels()
plt.legend(flip(handles, 2), flip(labels, 2), loc=9, ncol=2)

plt.grid('on')
plt.show()
</snippet></ROW><ROW><id>10101788</id><snippet>__nonzero__()</snippet></ROW><ROW><id>10101788</id><snippet>__len__()</snippet></ROW><ROW><id>10101788</id><snippet>object.__nonzero__(self)</snippet></ROW><ROW><id>10101788</id><snippet>bool()</snippet></ROW><ROW><id>10101788</id><snippet>False</snippet></ROW><ROW><id>10101788</id><snippet>True</snippet></ROW><ROW><id>10101788</id><snippet>__len__()</snippet></ROW><ROW><id>10101788</id><snippet>__len__()</snippet></ROW><ROW><id>10101788</id><snippet>__nonzero__()</snippet></ROW><ROW><id>10101788</id><snippet>if x: # evaluate boolean value implicitly
  pass
if x is 0: # compare object identity, see also id() function
  pass
if x == 0: # compare the object value
  pass
</snippet></ROW><ROW><id>10101788</id><snippet>int</snippet></ROW><ROW><id>10101788</id><snippet>True</snippet></ROW><ROW><id>10101788</id><snippet>str</snippet></ROW><ROW><id>10101788</id><snippet>True</snippet></ROW><ROW><id>10102066</id><snippet>for key, value in {'one':1, 'two':2, 'three':3}.iteritems():
    print key, ":", value
</snippet></ROW><ROW><id>10102284</id><snippet>import sys

management_command = sys.argv[1] if len(sys.argv) &gt; 1 else ""

TESTING = management_command.startswith("test")
</snippet></ROW><ROW><id>10102291</id><snippet>from scipy.io.wavfile import read, write
from scipy.fftpack import rfft, irfft
import np as numpy

rate, input = read('input.wav')

transformed = rfft(input) 

filtered = function_that_does_the_filtering(transformed)
output = irfft(filtered)

write('output.wav', rate, output)
</snippet></ROW><ROW><id>10102291</id><snippet>input</snippet></ROW><ROW><id>10102291</id><snippet>transformed</snippet></ROW><ROW><id>10102291</id><snippet>output</snippet></ROW><ROW><id>10102383</id><snippet>dict</snippet></ROW><ROW><id>10102383</id><snippet>to_dict()</snippet></ROW><ROW><id>10102383</id><snippet>default</snippet></ROW><ROW><id>10102383</id><snippet>json.dumps()</snippet></ROW><ROW><id>10102383</id><snippet>json.dump()</snippet></ROW><ROW><id>10102383</id><snippet>json.dumps()</snippet></ROW><ROW><id>10102383</id><snippet>default</snippet></ROW><ROW><id>10102383</id><snippet>TypeError</snippet></ROW><ROW><id>10102741</id><snippet>    sandbox.other_module = __import__('other_module')
</snippet></ROW><ROW><id>10102741</id><snippet>    exec 'import other_module' in sandbox.__dict__
</snippet></ROW><ROW><id>10102741</id><snippet>&gt;&gt;&gt; class A(object): pass
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; A.f = lambda self, x: 2 * x  # or a pickled function
&gt;&gt;&gt; a.f(1)
2
&gt;&gt;&gt; A.f = lambda self, x: 3 * x
&gt;&gt;&gt; a.f(1)
3
</snippet></ROW><ROW><id>10102741</id><snippet>    some_instance.__class__ = sandbox.SomeClass  # that means the same reloaded class
</snippet></ROW><ROW><id>10103182</id><snippet>with open("words.txt") as words:
  sum(1 for word in words if "e" not in word)
</snippet></ROW><ROW><id>10103182</id><snippet>sum</snippet></ROW><ROW><id>10103182</id><snippet>word.find('e') == -1</snippet></ROW><ROW><id>10103182</id><snippet>"e" not in word</snippet></ROW><ROW><id>10103182</id><snippet>__contains__</snippet></ROW><ROW><id>10103182</id><snippet>with</snippet></ROW><ROW><id>10103182</id><snippet>bob
bill
james
test
something
no
</snippet></ROW><ROW><id>10103182</id><snippet>bob bill james test something no
</snippet></ROW><ROW><id>10103182</id><snippet>str.split()</snippet></ROW><ROW><id>10103182</id><snippet>with open("words.txt") as lines:
    sum(1 for line in lines for word in line.split() if "e" not in word)
</snippet></ROW><ROW><id>10103418</id><snippet>\p{...}</snippet></ROW><ROW><id>10103418</id><snippet>split()</snippet></ROW><ROW><id>10103418</id><snippet>findall()</snippet></ROW><ROW><id>10103418</id><snippet>re.split()</snippet></ROW><ROW><id>10103418</id><snippet>re.UNICODE</snippet></ROW><ROW><id>10103418</id><snippet>text</snippet></ROW><ROW><id>10103418</id><snippet>Unicode</snippet></ROW><ROW><id>10103418</id><snippet>import re
pattern = re.compile(ur'[\u0980-\u09FF]+', re.UNICODE)
words = re.findall(pattern, text)
</snippet></ROW><ROW><id>10103430</id><snippet>.ext</snippet></ROW><ROW><id>10103430</id><snippet>*.ext</snippet></ROW><ROW><id>10103430</id><snippet>def grabFiles(source,ext):
    import fnmatch
    import os

    matches = []
    for root, dirnames, filenames in os.walk(source):
        for filename in fnmatch.filter(filenames, '*' + ext):
            matches.append(os.path.join(root, filename))
    return matches
</snippet></ROW><ROW><id>10103430</id><snippet>endswith</snippet></ROW><ROW><id>10103430</id><snippet>source ="D:\\01_SVN\\01_DE\\trunk\\Game"</snippet></ROW><ROW><id>10103430</id><snippet>source=r"D:\01_SVN\01_DE\trunk\Game"</snippet></ROW><ROW><id>10103437</id><snippet>with</snippet></ROW><ROW><id>10103437</id><snippet>with</snippet></ROW><ROW><id>10103437</id><snippet>with</snippet></ROW><ROW><id>10103437</id><snippet>tempfile = NamedTemporaryFile(suffix=".tmp")
# do stuff
tempfile.close()
</snippet></ROW><ROW><id>10103437</id><snippet>delete=False</snippet></ROW><ROW><id>10103437</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>10103437</id><snippet>with tempfile.NamedTemporaryFile(suffix=".tmp", delete=False) as tempfile:
</snippet></ROW><ROW><id>10103626</id><snippet>Dajaxice.MyProject.core.my_dajax_method(Dajax.process, {'form' : data});
</snippet></ROW><ROW><id>10103704</id><snippet>Popen.communicate</snippet></ROW><ROW><id>10103704</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>10103704</id><snippet>from subprocess import Popen, PIPE

p = Popen([script_name, "-"], stdin=PIPE, stdout=PIPE, stderr=PIPE)
stdout, stderr = p.communicate("this is some input")
</snippet></ROW><ROW><id>10104303</id><snippet>PATH</snippet></ROW><ROW><id>10104312</id><snippet>np.vstack((a,b)).T
</snippet></ROW><ROW><id>10104312</id><snippet>array([[1, 4],
       [2, 5],
       [3, 6]])
</snippet></ROW><ROW><id>10104312</id><snippet>np.vstack((a,b)).T.tolist()
</snippet></ROW><ROW><id>10104312</id><snippet>[[1, 4], [2, 5], [3, 6]]
</snippet></ROW><ROW><id>10104367</id><snippet>curses</snippet></ROW><ROW><id>10104553</id><snippet>def get_page(url):
    """ loads a webpage into a string """
    src = ''

    req = urllib2.Request(url)

    try:
        response = urllib2.urlopen(req)
        chunk = True
        while chunk:
            chunk = response.read(1024)
            src += chunk
        response.close()
    except IOError:
        print 'can\'t open',url 
        return src

    return src
</snippet></ROW><ROW><id>10104869</id><snippet>python.exe C:\Python32\Tools\scripts\2to3.py your-script-here.py
</snippet></ROW><ROW><id>10105021</id><snippet>label_pos</snippet></ROW><ROW><id>10105021</id><snippet>draw_networkx_edge_labels()</snippet></ROW><ROW><id>10105021</id><snippet>nx.draw_networkx_edge_labels(G,pos, 
    {
        (a,b):"x", (b,c):"y", (c,d):"w", (a,d):"z", (a,c):"v", (b,d):"r"
    }
    label_pos=0.3
)
</snippet></ROW><ROW><id>10105092</id><snippet>&lt;textarea&gt;{{ l|join:"" }}&lt;/textarea&gt;
</snippet></ROW><ROW><id>10105109</id><snippet>&gt;&gt;&gt; def toInt(arr, idx):
...     res = 0
...     for i in xrange(4):
...       res |= (arr[idx*4 + i] &lt;&lt; 8*i)
...     return res
... 

&gt;&gt;&gt; '%08x' % toInt(char_array, 0)
'03020100'

&gt;&gt;&gt; '%08x' % toInt(char_array, 1)
'07060504'
</snippet></ROW><ROW><id>10105109</id><snippet>struct</snippet></ROW><ROW><id>10105306</id><snippet>default</snippet></ROW><ROW><id>10105306</id><snippet>self.sched.add_jobstore(SQLAlchemyJobStore('...'), 'default')
</snippet></ROW><ROW><id>10105306</id><snippet>self.sched.add_cron_job(func, 
                        jobstore="apschedulerJobs", 
                        year=yr, month=mnth, day=d, hour=h, minute=m)
</snippet></ROW><ROW><id>10105520</id><snippet>def callback1(line, regex_match):
   #do what you want

def callback2(line, regex_match):
   #do what you want... else


regex_dict = {
   "first_regex" : callback1,
   "second_regex" : callback2,
}

file_to_check = open("the_file")
for line in file_to_check:
    for regex, callback in regex_dict.iteritems():
        result = re.match(regex, line)
        if result:
           callback(line, result)
           break
</snippet></ROW><ROW><id>10105636</id><snippet>&gt;&gt;&gt; B = [a["abc"] for a in A]
&gt;&gt;&gt; B
['kjkjl', 'hjhjh', '78787']
</snippet></ROW><ROW><id>10105834</id><snippet>&gt;&gt;&gt; re.search('( &lt; (?P&lt;min&gt;\d+)| &gt; (?P&lt;max&gt;\d+))+', 'age &lt; 4 &gt; 6').groupdict()
{'max': '6', 'min': '4'}
</snippet></ROW><ROW><id>10105994</id><snippet>request</snippet></ROW><ROW><id>10105994</id><snippet>facebook.user</snippet></ROW><ROW><id>10105994</id><snippet>if hasattr(request, 'facebook')</snippet></ROW><ROW><id>10106031</id><snippet>values()</snippet></ROW><ROW><id>10106316</id><snippet>numstr= raw_input("please enter the height:")

rows = int(numstr) # --&gt; convert user input to an integer
def triangle(rows):
    PrintingList = list()
    for rownum in range (1, rows + 1): # use colon after control structure to denote the beginning of block of code        
        PrintingList.append([]) # append a row
        for iteration in range (rownum):
            newValue = raw_input("Please enter the next number:")
            PrintingList[rownum - 1].append(int(newValue))
            print() 

    for item in PrintingList:
      print item
triangle(rows)
</snippet></ROW><ROW><id>10106316</id><snippet>please enter the height:3
Please enter the next number:1
()
Please enter the next number:2
()
Please enter the next number:3
()
Please enter the next number:4
()
Please enter the next number:5
()
Please enter the next number:4
()
[1]
[2, 3]
[4, 5, 4]
</snippet></ROW><ROW><id>10106461</id><snippet>struct</snippet></ROW><ROW><id>10106461</id><snippet>floats = struct.unpack('&lt;38f', data)
</snippet></ROW><ROW><id>10106461</id><snippet>&gt;</snippet></ROW><ROW><id>10106461</id><snippet>&lt;</snippet></ROW><ROW><id>10106527</id><snippet>class Sample(object):
    x = 100      
    _a = 1
    __b = 11               
    def __init__(self, value):
        self.y = value      
        self._c = 'private'    
        self.__d = 'more private'
        z = 300         
</snippet></ROW><ROW><id>10106527</id><snippet>x</snippet></ROW><ROW><id>10106527</id><snippet>_a</snippet></ROW><ROW><id>10106527</id><snippet>__b</snippet></ROW><ROW><id>10106527</id><snippet>y</snippet></ROW><ROW><id>10106527</id><snippet>_c</snippet></ROW><ROW><id>10106527</id><snippet>__d</snippet></ROW><ROW><id>10106527</id><snippet>z</snippet></ROW><ROW><id>10106527</id><snippet>__init__</snippet></ROW><ROW><id>10106778</id><snippet>variable == value</snippet></ROW><ROW><id>10106778</id><snippet>or</snippet></ROW><ROW><id>10106778</id><snippet>if printer == 'saturn' or printer == 'jupiter' or printer == 'neptune':
</snippet></ROW><ROW><id>10106778</id><snippet>if</snippet></ROW><ROW><id>10106778</id><snippet>if printer in ('saturn', 'jupiter', 'neptune'):
</snippet></ROW><ROW><id>10106778</id><snippet>'string' + variable + 'string'

 # not

 'string'variable'string'
</snippet></ROW><ROW><id>10106900</id><snippet>list(x)</snippet></ROW><ROW><id>10107235</id><snippet>&lt;button id="p_{{key}}"&gt;TEST&lt;/button&gt;</snippet></ROW><ROW><id>10107235</id><snippet>+</snippet></ROW><ROW><id>10107410</id><snippet>a, dummy = func()</snippet></ROW><ROW><id>10107410</id><snippet>_</snippet></ROW><ROW><id>10107410</id><snippet>dummy</snippet></ROW><ROW><id>10107410</id><snippet>dummy_index</snippet></ROW><ROW><id>10107410</id><snippet>--dummy-variables-rgx</snippet></ROW><ROW><id>10107410</id><snippet>_</snippet></ROW><ROW><id>10107410</id><snippet>gettext()</snippet></ROW><ROW><id>10107410</id><snippet>_()</snippet></ROW><ROW><id>10107410</id><snippet>_("text to translate")</snippet></ROW><ROW><id>10107694</id><snippet>data = {}
for e in Estate.objects.select_related("sub_region__region__country"):
    sub, region, country = e.sub_region, e.sub_region.region, e.sub_region.region.country
    if country.name not in data:
        data[country.name] = {}
    if region.name not in data[country.name]:
        data[country.name][region.name] = {}
    if sub.name not in data[country.name][region.name]:
       data[country.name][region.name][sub.name] = []
    data[country.name][region.name][sub.name].append(e.name)
json_data = json.dumps(data)
</snippet></ROW><ROW><id>10108024</id><snippet>struct timeval</snippet></ROW><ROW><id>10108024</id><snippet>sys/time.h</snippet></ROW><ROW><id>10108024</id><snippet>struct timeval</snippet></ROW><ROW><id>10108024</id><snippet>struct timeval {
  long tv_sec;
  long tv_usec;
};
</snippet></ROW><ROW><id>10108024</id><snippet>class timeval(Structure):
    _fields_ = [("tv_sec", c_long), ("tv_usec", c_long)]

class S(Structure):
    _fields_ = [("x",c_int), ("t", timeval)]
</snippet></ROW><ROW><id>10108106</id><snippet>if x &lt; 0:
   x += 2 ** 64
</snippet></ROW><ROW><id>10108106</id><snippet>x &amp;= 2 ** 64 - 1
</snippet></ROW><ROW><id>10108121</id><snippet>argparse</snippet></ROW><ROW><id>10108121</id><snippet>sys.argv</snippet></ROW><ROW><id>10108121</id><snippet>argparse</snippet></ROW><ROW><id>10108121</id><snippet>sys.argv</snippet></ROW><ROW><id>10108121</id><snippet>-w "-4.5.5-double_non-parallel_gcc"</snippet></ROW><ROW><id>10108121</id><snippet>-w</snippet></ROW><ROW><id>10108121</id><snippet>-4.5.5-double_non-parallel_gcc</snippet></ROW><ROW><id>10108121</id><snippet>-w</snippet></ROW><ROW><id>10108121</id><snippet>-4</snippet></ROW><ROW><id>10108121</id><snippet>.5.5-double_non-parallel_gcc</snippet></ROW><ROW><id>10108121</id><snippet>2&amp;&gt;</snippet></ROW><ROW><id>10108121</id><snippet>unrecognized arguments: 2&amp;&gt;</snippet></ROW><ROW><id>10108121</id><snippet>unrecognized arguments: 2</snippet></ROW><ROW><id>10108121</id><snippet>2&amp;&gt;</snippet></ROW><ROW><id>10108121</id><snippet>&amp;&gt;</snippet></ROW><ROW><id>10108121</id><snippet>2</snippet></ROW><ROW><id>10108121</id><snippet>optparse</snippet></ROW><ROW><id>10108121</id><snippet>optparse</snippet></ROW><ROW><id>10108121</id><snippet>argparse</snippet></ROW><ROW><id>10108121</id><snippet>optparse</snippet></ROW><ROW><id>10108121</id><snippet>argparse</snippet></ROW><ROW><id>10108121</id><snippet>optparse</snippet></ROW><ROW><id>10108121</id><snippet>2&amp;&gt;</snippet></ROW><ROW><id>10108121</id><snippet>opt, args = parser.parse_args()
</snippet></ROW><ROW><id>10108121</id><snippet>args</snippet></ROW><ROW><id>10108121</id><snippet>args</snippet></ROW><ROW><id>10108121</id><snippet>2</snippet></ROW><ROW><id>10108121</id><snippet>optparse</snippet></ROW><ROW><id>10108121</id><snippet>opt, args = parser.parse_args()
if args:
    parser.error("script takes no positional arguments")
</snippet></ROW><ROW><id>10108121</id><snippet>argparse</snippet></ROW><ROW><id>10108121</id><snippet>optparse</snippet></ROW><ROW><id>10108127</id><snippet>f=open(filename,"r")
listOfLines=f.readlines()
for line in listOfLines:
    splitLine=line.split(",")
    print "Day of Month: "+splitLine[4]#this is an example of one piece of info.
    print "Month: "+splitLine[5]#this is an example of one piece of info.
</snippet></ROW><ROW><id>10108346</id><snippet>print entry.keys()
</snippet></ROW><ROW><id>10108346</id><snippet>print dictionary.keys(entry)
</snippet></ROW><ROW><id>10108443</id><snippet>map(xml_to_dict, xml_document)
</snippet></ROW><ROW><id>10108496</id><snippet>StopIteration</snippet></ROW><ROW><id>10108966</id><snippet>raw_input()</snippet></ROW><ROW><id>10108966</id><snippet>input()</snippet></ROW><ROW><id>10108981</id><snippet>enemies</snippet></ROW><ROW><id>10108981</id><snippet>initgame()</snippet></ROW><ROW><id>10108981</id><snippet>enemies=[]</snippet></ROW><ROW><id>10108981</id><snippet>def initgame():
    global enemies
    enemies=[]
</snippet></ROW><ROW><id>10109109</id><snippet>if</snippet></ROW><ROW><id>10109109</id><snippet>sum(int(i.replace(',','')) for i in list if re.search(r'\d', i))
</snippet></ROW><ROW><id>10109109</id><snippet>'a1'</snippet></ROW><ROW><id>10109337</id><snippet>SignupForm.save</snippet></ROW><ROW><id>10109337</id><snippet>contrib.auth.User</snippet></ROW><ROW><id>10109337</id><snippet>gender</snippet></ROW><ROW><id>10109337</id><snippet>phone</snippet></ROW><ROW><id>10109337</id><snippet>cell</snippet></ROW><ROW><id>10109337</id><snippet>address</snippet></ROW><ROW><id>10109615</id><snippet>x2</snippet></ROW><ROW><id>10109615</id><snippet>num</snippet></ROW><ROW><id>10109615</id><snippet>x2 != x3 != x4 != x5 != x6
</snippet></ROW><ROW><id>10109615</id><snippet>x2 != x3 and x3 != x4 and x4 != x5 and x5 != x6
</snippet></ROW><ROW><id>10109731</id><snippet>threading</snippet></ROW><ROW><id>10109731</id><snippet>threading.py</snippet></ROW><ROW><id>10109731</id><snippet>exitfunc</snippet></ROW><ROW><id>10109731</id><snippet>exit_</snippet></ROW><ROW><id>10109745</id><snippet>import numpy as np
dx = 2.
dy = 2.
N = 5
centers = np.mgrid[dx/2:N*dx:dx, dy/2:N*dy:dy]
</snippet></ROW><ROW><id>10109745</id><snippet>&gt;&gt;&gt; centers.shape
(2, 5, 5)
&gt;&gt;&gt; centers
array([[[ 1.,  1.,  1.,  1.,  1.],
        [ 3.,  3.,  3.,  3.,  3.],
        [ 5.,  5.,  5.,  5.,  5.],
        [ 7.,  7.,  7.,  7.,  7.],
        [ 9.,  9.,  9.,  9.,  9.]],

       [[ 1.,  3.,  5.,  7.,  9.],
        [ 1.,  3.,  5.,  7.,  9.],
        [ 1.,  3.,  5.,  7.,  9.],
        [ 1.,  3.,  5.,  7.,  9.],
        [ 1.,  3.,  5.,  7.,  9.]]])
</snippet></ROW><ROW><id>10109745</id><snippet>&gt;&gt;&gt; centers = np.rollaxis(centers, 0, centers.ndim)
&gt;&gt;&gt; centers.shape
(5, 5, 2)
&gt;&gt;&gt; centers
array([[[ 1.,  1.],
        [ 1.,  3.],
        [ 1.,  5.],
        [ 1.,  7.],
        [ 1.,  9.]],

       [[ 3.,  1.],
        [ 3.,  3.],
        [ 3.,  5.],
        [ 3.,  7.],
        [ 3.,  9.]],

       [[ 5.,  1.],
        [ 5.,  3.],
        [ 5.,  5.],
        [ 5.,  7.],
        [ 5.,  9.]],

       [[ 7.,  1.],
        [ 7.,  3.],
        [ 7.,  5.],
        [ 7.,  7.],
        [ 7.,  9.]],

       [[ 9.,  1.],
        [ 9.,  3.],
        [ 9.,  5.],
        [ 9.,  7.],
        [ 9.,  9.]]])
</snippet></ROW><ROW><id>10109965</id><snippet>&gt;&gt;&gt;import fabric.version
&gt;&gt;&gt;fabric.version.get_version()
'1.2.2'
</snippet></ROW><ROW><id>10110008</id><snippet>primesiter(n)</snippet></ROW><ROW><id>10110008</id><snippet>n</snippet></ROW><ROW><id>10110008</id><snippet>primesiter</snippet></ROW><ROW><id>10110008</id><snippet>def composite_value(n, min_p = 0):
    for p in primesiter(n):
        # avoid double solutions such as (6, [2,3]), and (6, [3,2])
        if p &lt; min_p: continue
        yield (p, [p])
        for t, r in composite_value(n//p, min_p = p): # uses integer division
            yield (t*p, [p] + r)
</snippet></ROW><ROW><id>10110008</id><snippet>&gt;&gt; list(composite_value(16))
[(2, [2]),
 (4, [2, 2]),
 (8, [2, 2, 2]),
 (16, [2, 2, 2, 2]),
 (12, [2, 2, 3]),
 (6, [2, 3]),
 (10, [2, 5]),
 (14, [2, 7]),
 (3, [3]),
 (9, [3, 3]),
 (15, [3, 5]),
 (5, [5]),
 (7, [7]),
 (11, [11]),
 (13, [13])]
</snippet></ROW><ROW><id>10110024</id><snippet>$('#QapTcha').QapTcha({
    ...
    PHPfile: '/your/server-side/qaptcha-handler'
});
</snippet></ROW><ROW><id>10110024</id><snippet>{"error":false}</snippet></ROW><ROW><id>10110138</id><snippet>@members {
def displayRecognitionError(self, tokenNames, e):
    # do something
    pass

antlr3.BaseRecognizer.displayRecognitionError = displayRecognitionError
}
</snippet></ROW><ROW><id>10110447</id><snippet>print(self.top)
</snippet></ROW><ROW><id>10110447</id><snippet>IndexError</snippet></ROW><ROW><id>10110447</id><snippet>print()</snippet></ROW><ROW><id>10110447</id><snippet>class Stack(list):
    push = list.append
</snippet></ROW><ROW><id>10110551</id><snippet>    print path, dirs, files
</snippet></ROW><ROW><id>10110551</id><snippet>for path, dirs, files in os.walk(src, topdown=True):
</snippet></ROW><ROW><id>10110551</id><snippet>os.walk</snippet></ROW><ROW><id>10110551</id><snippet>print</snippet></ROW><ROW><id>10110551</id><snippet>visited = []
def copy_file(src, dest):
    for path, dirs, files in os.walk(src, topdown=True):
        if path not in visited:
            for di in dirs:
                print dest, di
                copy_file(join(path, di), join(dest,  di))
            if not exists(dest):
                os.makedirs(dest)
            for fi in files:
                shutil.copy(join(path, fi), dest)
            visited.append(path)
</snippet></ROW><ROW><id>10110653</id><snippet>os.walk</snippet></ROW><ROW><id>10110653</id><snippet>top</snippet></ROW><ROW><id>10110653</id><snippet>top
  |
  - published
  |  |
  |  - something
  |
  - other
</snippet></ROW><ROW><id>10110653</id><snippet>myPath = os.path.join(root, name)
</snippet></ROW><ROW><id>10110653</id><snippet>/top/published</snippet></ROW><ROW><id>10110653</id><snippet>something</snippet></ROW><ROW><id>10110653</id><snippet>if "published" is in myPath</snippet></ROW><ROW><id>10110653</id><snippet>published</snippet></ROW><ROW><id>10110653</id><snippet>myPath</snippet></ROW><ROW><id>10110653</id><snippet>if</snippet></ROW><ROW><id>10110653</id><snippet>if myPath.endswith('/published')
</snippet></ROW><ROW><id>10111248</id><snippet>import collections
c = collections.Counter()

for key, value in count_db.iteritems():
    c[key[:56]] += value
</snippet></ROW><ROW><id>10111341</id><snippet>'w'</snippet></ROW><ROW><id>10111341</id><snippet>'wb'</snippet></ROW><ROW><id>10111341</id><snippet>'\n'</snippet></ROW><ROW><id>10111341</id><snippet>'\r\n'</snippet></ROW><ROW><id>10111449</id><snippet>&gt;&gt;&gt; a = { 'a' : 1 }
&gt;&gt;&gt; a.keys()[0] = 'b'
&gt;&gt;&gt; a
{'a': 1}
&gt;&gt;&gt; a.values()[0] = 'b'
&gt;&gt;&gt; a
{'a': 1}
</snippet></ROW><ROW><id>10111449</id><snippet>&gt;&gt;&gt; a = { 'a':1}
&gt;&gt;&gt; a.keys()[0] = 'b'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'dict_keys' object does not support item assignment
</snippet></ROW><ROW><id>10111647</id><snippet>chosenMaster</snippet></ROW><ROW><id>10111647</id><snippet>contactMaster</snippet></ROW><ROW><id>10111647</id><snippet>todolist</snippet></ROW><ROW><id>10111647</id><snippet>str(chosenMaster)</snippet></ROW><ROW><id>10111647</id><snippet>i = 5

def f(arg=i):
    print arg

i = 6
f()
</snippet></ROW><ROW><id>10111647</id><snippet>5</snippet></ROW><ROW><id>10111700</id><snippet>QIcon</snippet></ROW><ROW><id>10111700</id><snippet>QIcon</snippet></ROW><ROW><id>10111700</id><snippet>import sys
from PyQt4 import QtGui, QtCore, QtNetwork

class Main(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(Main, self).__init__(parent)

    def loadIconFromUrl(self, url):
        manager = QtNetwork.QNetworkAccessManager(self)
        manager.finished.connect(self._setIconFromReply)
        manager.get(QtNetwork.QNetworkRequest(QtCore.QUrl(url)))

    def _setIconFromReply(self, reply):
        p = QtGui.QPixmap()
        p.loadFromData(reply.readAll(), format="ico")
        self.setWindowIcon(QtGui.QIcon(p))

app = QtGui.QApplication(sys.argv)
main = Main()
main.loadIconFromUrl("http://en.wikipedia.org/favicon.ico")
main.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>10111964</id><snippet>multiln_command</snippet></ROW><ROW><id>10111964</id><snippet>multiln_commands</snippet></ROW><ROW><id>10111964</id><snippet>multiln_command</snippet></ROW><ROW><id>10111964</id><snippet>multiln_commands</snippet></ROW><ROW><id>10111964</id><snippet>multiln_command</snippet></ROW><ROW><id>10111964</id><snippet>multiln_grammar</snippet></ROW><ROW><id>10112043</id><snippet>client.recv(16)</snippet></ROW><ROW><id>10112043</id><snippet>client.recv(size)</snippet></ROW><ROW><id>10112043</id><snippet>s.close()</snippet></ROW><ROW><id>10112043</id><snippet>accept</snippet></ROW><ROW><id>10112043</id><snippet>s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>10112119</id><snippet>datetime</snippet></ROW><ROW><id>10112119</id><snippet>from datetime import datetime, timedelta

def parse_time(s):
    ''' Parse 12-hours format '''
    return datetime.strptime(s, '%I:%M %p')

starttime = parse_time('8:00 AM')
endtime   = parse_time('3:00 AM')
if endtime &lt; starttime:
   # add 1 day to the end so that it's after start
   endtime += timedelta(days=1)

checked_time = parse_time('7:00 AM')

# Can compare:
print starttime &lt;= checked_time &lt; endtime
</snippet></ROW><ROW><id>10112134</id><snippet>&gt;&gt;&gt; from pygame import pypm
&gt;&gt;&gt; pypm.Initialize()
</snippet></ROW><ROW><id>10112231</id><snippet>like_this</snippet></ROW><ROW><id>10112231</id><snippet>print three + `3`
</snippet></ROW><ROW><id>10112231</id><snippet>print "three%d" % 3
</snippet></ROW><ROW><id>10112279</id><snippet>data</snippet></ROW><ROW><id>10112279</id><snippet>[]</snippet></ROW><ROW><id>10112279</id><snippet>t</snippet></ROW><ROW><id>10112312</id><snippet>break</snippet></ROW><ROW><id>10112312</id><snippet>enemies</snippet></ROW><ROW><id>10112637</id><snippet># C:\test.py
import os
os.startfile(r"C:\sampleBatch.bat")
</snippet></ROW><ROW><id>10112637</id><snippet># C:\sampleBatch.bat
TASKKILL /IM "process name" #For me, this was "ipy64.exe" because I use IronPython.
DEL "C:\test.py"
</snippet></ROW><ROW><id>10112665</id><snippet>format()</snippet></ROW><ROW><id>10112665</id><snippet>&gt;&gt;&gt; s = "This is an {example} with {vars}".format(vars="variables", example="example")
&gt;&gt;&gt; s
'This is an example with variables'
</snippet></ROW><ROW><id>10112665</id><snippet>&gt;&gt;&gt; d = { 'vars': "variables", 'example': "example" }
&gt;&gt;&gt; s = "This is an {example} with {vars}"
&gt;&gt;&gt; s.format(**d)
'This is an example with variables'
</snippet></ROW><ROW><id>10112665</id><snippet>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; t = Template("This is an $example with $vars")
&gt;&gt;&gt; t.substitute({ 'example': "example", 'vars': "variables"})
'This is an example with variables'
</snippet></ROW><ROW><id>10112665</id><snippet>format()</snippet></ROW><ROW><id>10112774</id><snippet>&gt;&gt;&gt; lista=[1,2,3]
&gt;&gt;&gt; listb=['a','b','c']
&gt;&gt;&gt; ["%s|%s" % (a,b) for a,b in zip(lista, listb)]
['1|a', '2|b', '3|c']
</snippet></ROW><ROW><id>10112842</id><snippet>zlib</snippet></ROW><ROW><id>10112842</id><snippet>zlib.decompress(inf, 16+zlib.MAX_WBITS)
</snippet></ROW><ROW><id>10112842</id><snippet>inf</snippet></ROW><ROW><id>10112842</id><snippet>16 + zlib.MAX_WBITS</snippet></ROW><ROW><id>10113003</id><snippet>csv</snippet></ROW><ROW><id>10113003</id><snippet>list</snippet></ROW><ROW><id>10113003</id><snippet>deque</snippet></ROW><ROW><id>10113003</id><snippet>def balancedq(input):
    stack = []

    for char in input:
        #implement your logic here.
        if sometest:
           stack.append(char) #push
        elif someothertest:
           val = stack.pop()
           #maybe some test here?
</snippet></ROW><ROW><id>10113296</id><snippet>reverse()</snippet></ROW><ROW><id>10113296</id><snippet>reverse()</snippet></ROW><ROW><id>10113296</id><snippet>reverse()</snippet></ROW><ROW><id>10113552</id><snippet>import</snippet></ROW><ROW><id>10113857</id><snippet>from BeautifulSoup import BeautifulSoup

VALID_TAGS = ['div', 'p']

soup = BeautifulSoup(value)

for tag in soup.findAll('p'):
    if tag.name not in VALID_TAGS:
        tag.replaceWith(tag.renderContents())

print soup.renderContents()
</snippet></ROW><ROW><id>10113996</id><snippet>def sendMail(data):
     sendmail_location = "/usr/sbin/sendmail" # sendmail location
     p = os.popen("%s -t" % sendmail_location, "w")
     p.write("From: %s\n" % "test@example.com")
     p.write("To: %s\n" % "test2@example.com")
     p.write("Subject: the subject\n")
     p.write("\n")                                 # blank line
     p.write(data)
     status = p.close()
     if status != 0:
         print "Sendmail exit status", status
</snippet></ROW><ROW><id>10114037</id><snippet>python udp_send.py 0x41</snippet></ROW><ROW><id>10114037</id><snippet>arg = sys.argv[1]

# intarg = 65 == 0x41
intarg = int(arg, 16)

# now convert to byte string '\x41'
hexstring = struct.pack('B', intarg)
</snippet></ROW><ROW><id>10114207</id><snippet>login</snippet></ROW><ROW><id>10114207</id><snippet>request</snippet></ROW><ROW><id>10114207</id><snippet>login(user)</snippet></ROW><ROW><id>10114207</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>10114207</id><snippet>login</snippet></ROW><ROW><id>10114207</id><snippet>request.user</snippet></ROW><ROW><id>10114207</id><snippet>request</snippet></ROW><ROW><id>10114207</id><snippet>user</snippet></ROW><ROW><id>10114207</id><snippet>from django.contrib import auth</snippet></ROW><ROW><id>10114207</id><snippet>auth.login(user)</snippet></ROW><ROW><id>10114266</id><snippet>Content-Length</snippet></ROW><ROW><id>10114266</id><snippet>Connection</snippet></ROW><ROW><id>10114266</id><snippet>Connection: keep-alive</snippet></ROW><ROW><id>10114266</id><snippet>Connection: close</snippet></ROW><ROW><id>10114266</id><snippet>Content-Length</snippet></ROW><ROW><id>10114266</id><snippet>#!/usr/bin/env python
# coding: utf8

import socket

MAX_PACKET = 32768

def recv_all(sock):
    r'''Receive everything from `sock`, until timeout occurs, meaning sender
    is exhausted, return result as string.'''

    # dirty hack to simplify this stuff - you should really use zero timeout,
    # deal with async socket and implement finite automata to handle incoming data

    prev_timeout = sock.gettimeout()
    try:
        sock.settimeout(0.01)

        rdata = []
        while True:
            try:
                rdata.append(sock.recv(MAX_PACKET))
            except socket.timeout:
                return ''.join(rdata)

        # unreachable
    finally:
        sock.settimeout(prev_timeout)

def normalize_line_endings(s):
    r'''Convert string containing various line endings like \n, \r or \r\n,
    to uniform \n.'''

    return ''.join((line + '\n') for line in s.splitlines())

def run():
    r'''Main loop'''

    # Create TCP socket listening on 10000 port for all connections, 
    # with connection queue of length 1
    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, \
                                socket.IPPROTO_TCP)
    server_sock.bind(('0.0.0.0', 13000))
    server_sock.listen(1)

    while True:
        # accept connection
        client_sock, client_addr = server_sock.accept()

        # headers and body are divided with \n\n (or \r\n\r\n - that's why we
        # normalize endings). In real application usage, you should handle 
        # all variations of line endings not to screw request body
        request = normalize_line_endings(recv_all(client_sock)) # hack again
        request_head, request_body = request.split('\n\n', 1)

        # first line is request headline, and others are headers
        request_head = request_head.splitlines()
        request_headline = request_head[0]
        # headers have their name up to first ': '. In real world uses, they
        # could duplicate, and dict drops duplicates by default, so
        # be aware of this.
        request_headers = dict(x.split(': ', 1) for x in request_head[1:])

        # headline has form of "POST /can/i/haz/requests HTTP/1.0"
        request_method, request_uri, request_proto = request_headline.split(' ', 3)

        response_body = [
            '&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world!&lt;/h1&gt;',
            '&lt;p&gt;This page is in location %(request_uri)r, was requested ' % locals(),
            'using %(request_method)r, and with %(request_proto)r.&lt;/p&gt;' % locals(),
            '&lt;p&gt;Request body is %(request_body)r&lt;/p&gt;' % locals(),
            '&lt;p&gt;Actual set of headers received:&lt;/p&gt;',
            '&lt;ul&gt;',
        ]

        for request_header_name, request_header_value in request_headers.iteritems():
            response_body.append('&lt;li&gt;&lt;b&gt;%r&lt;/b&gt; == %r&lt;/li&gt;' % (request_header_name, \
                                                    request_header_value))

        response_body.append('&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;')

        response_body_raw = ''.join(response_body)

        # Clearly state that connection will be closed after this response,
        # and specify length of response body
        response_headers = {
            'Content-Type': 'text/html; encoding=utf8',
            'Content-Length': len(response_body_raw),
            'Connection': 'close',
        }

        response_headers_raw = ''.join('%s: %s\n' % (k, v) for k, v in \
                                                response_headers.iteritems())

        # Reply as HTTP/1.1 server, saying "HTTP OK" (code 200).
        response_proto = 'HTTP/1.1'
        response_status = '200'
        response_status_text = 'OK' # this can be random

        # sending all this stuff
        client_sock.send('%s %s %s' % (response_proto, response_status, \
                                                        response_status_text))
        client_sock.send(response_headers_raw)
        client_sock.send('\n') # to separate headers from body
        client_sock.send(response_body_raw)

        # and closing connection, as we stated before
        client_sock.close()

run()
</snippet></ROW><ROW><id>10114294</id><snippet>('/get_post_data/([-\w]+)', TeamRates)</snippet></ROW><ROW><id>10114294</id><snippet>()</snippet></ROW><ROW><id>10114309</id><snippet>UTF-8</snippet></ROW><ROW><id>10114309</id><snippet>latin-1</snippet></ROW><ROW><id>10114309</id><snippet>words = re.findall('\w+', open('rockyou.txt', encoding='latin-1').read().lower())
</snippet></ROW><ROW><id>10114309</id><snippet>errors='ignore'</snippet></ROW><ROW><id>10114309</id><snippet>errors='replace'</snippet></ROW><ROW><id>10114309</id><snippet>open</snippet></ROW><ROW><id>10114320</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>10114320</id><snippet>out, err = [x.decode("utf-8") for x in  proc.communicate()]
</snippet></ROW><ROW><id>10114320</id><snippet>UnicodeDecodeError: 'utf8' codec cant decode byte 0xe3 in position 33 ....
</snippet></ROW><ROW><id>10114320</id><snippet>x</snippet></ROW><ROW><id>10114320</id><snippet>\xe3</snippet></ROW><ROW><id>10114320</id><snippet>ã</snippet></ROW><ROW><id>10114320</id><snippet>x.decode('utf-8')</snippet></ROW><ROW><id>10114320</id><snippet>x.decode('windows-1252')</snippet></ROW><ROW><id>10114320</id><snippet>x.decode(sys.stdout.encoding)</snippet></ROW><ROW><id>10114328</id><snippet>map('state', plot = TRUE, fill = FALSE, col = palette())
</snippet></ROW><ROW><id>10114328</id><snippet>import math
from collections import defaultdict

to_rad = math.pi / 180.0   # convert lat or lng to radians
fname = "site.tsv"        # file format: LAT\tLONG
threshhold_dist=50         # adjust to your needs
threshhold_locations=15    # minimum # of locations needed in a cluster

def dist(lat1,lng1,lat2,lng2):
    global to_rad
    earth_radius_km = 6371

    dLat = (lat2-lat1) * to_rad
    dLon = (lng2-lng1) * to_rad
    lat1_rad = lat1 * to_rad
    lat2_rad = lat2 * to_rad

    a = math.sin(dLat/2) * math.sin(dLat/2) + math.sin(dLon/2) * math.sin(dLon/2) * math.cos(lat1_rad) * math.cos(lat2_rad)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a)); 
    dist = earth_radius_km * c
    return dist

def bounding_box(src, neighbors):
    neighbors.append(src)
    # nw = NorthWest se=SouthEast
    nw_lat = -360
    nw_lng = 360
    se_lat = 360
    se_lng = -360

    for (y,x) in neighbors:
        if y &gt; nw_lat: nw_lat = y
        if x &gt; se_lng: se_lng = x

        if y &lt; se_lat: se_lat = y
        if x &lt; nw_lng: nw_lng = x

    # add some padding
    pad = 0.5
    nw_lat += pad
    nw_lng -= pad
    se_lat -= pad
    se_lng += pad

    # sutiable for r's map() function
    return (se_lat,nw_lat,nw_lng,se_lng)

def sitesDist(site1,site2): 
    #just a helper to shorted list comprehension below 
    return dist(site1[0],site1[1], site2[0], site2[1])

def load_site_data():
    global fname
    sites = defaultdict(tuple)

    data = open(fname,encoding="latin-1")
    data.readline() # skip header
    for line in data:
        line = line[:-1]
        slots = line.split("\t")
        lat = float(slots[0])
        lng = float(slots[1])
        lat_rad = lat * math.pi / 180.0
        lng_rad = lng * math.pi / 180.0
        sites[(lat,lng)] = (lat,lng) #(lat_rad,lng_rad)
    return sites

def main():
    sites_dict = {}
    sites = load_site_data()
    for site in sites: 
        #for each site put it in a dictionary with its value being an array of neighbors 
        sites_dict[site] = [x for x in sites if x != site and sitesDist(site,x) &lt; threshhold_dist] 

    results = {}
    for site in sites: 
        j = len(sites_dict[site])
        if j &gt;= threshhold_locations:
            coord = bounding_box( site, sites_dict[site] )
            results[coord] = coord

    for bbox in results:
        yx="ylim=c(%s,%s), xlim=c(%s,%s)" % (results[bbox]) #(se_lat,nw_lat,nw_lng,se_lng)
        print('map("county", plot=T, fill=T, col=palette(), %s)' % yx)
        rect='rect(%s,%s, %s,%s, col=c("red"))' % (results[bbox][2], results[bbox][0], results[bbox][3], results[bbox][2])
        print(rect)
        print("")

main()
</snippet></ROW><ROW><id>10114328</id><snippet>LAT     LONG
36.3312 -94.1334
36.6828 -121.791
37.2307 -121.96
37.3857 -122.026
37.3857 -122.026
37.3857 -122.026
37.3895 -97.644
37.3992 -122.139
37.3992 -122.139
37.402  -122.078
37.402  -122.078
37.402  -122.078
37.402  -122.078
37.402  -122.078
37.48   -122.144
37.48   -122.144
37.55   126.967
</snippet></ROW><ROW><id>10114328</id><snippet>rect(-74.989,39.7667, -73.0419,41.5209, col=c("red"))
rect(-123.005,36.8144, -121.392,38.3672, col=c("green"))
rect(-78.2422,38.2474, -76.3,39.9282, col=c("blue"))
</snippet></ROW><ROW><id>10114328</id><snippet>map("county", plot=T )
rect(-122.644,36.7307, -121.46,37.98, col=c("red"))
</snippet></ROW><ROW><id>10114328</id><snippet>ylim</snippet></ROW><ROW><id>10114328</id><snippet>xlim</snippet></ROW><ROW><id>10114328</id><snippet>map("county", plot=T, ylim=c(36.7307,37.98), xlim=c(-122.644,-121.46))
# or for more coloring, but choose one or the other map("country") commands
map("county", plot=T, fill=T, col=palette(), ylim=c(36.7307,37.98), xlim=c(-122.644,-121.46))
rect(-122.644,36.7307, -121.46,37.98, col=c("red"))
</snippet></ROW><ROW><id>10114328</id><snippet>map("world", plot=T )
</snippet></ROW><ROW><id>10114328</id><snippet>threshhold_dist is the size of the bounding box, ie: the geographical area
theshhold_location is the number of lat/lng points needed with in
    the bounding box in order for it to be considered a cluster.
</snippet></ROW><ROW><id>10114328</id><snippet># pyclusters.py
# May-02-2013
# -John Taylor

# latlng.tsv is located at http://pastebin.com/cyvEdx3V
# use the "RAW Paste Data" to preserve the tab characters

import math
from collections import defaultdict

# See also: http://www.geomidpoint.com/example.html
# See also: http://www.movable-type.co.uk/scripts/latlong.html

to_rad = math.pi / 180.0  # convert lat or lng to radians
fname = "latlng.tsv"      # file format: LAT\tLONG
threshhold_dist=20        # adjust to your needs
threshhold_locations=20   # minimum # of locations needed in a cluster
earth_radius_km = 6371

def coord2cart(lat,lng):
    x = math.cos(lat) * math.cos(lng)
    y = math.cos(lat) * math.sin(lng)
    z = math.sin(lat)
    return (x,y,z)

def cart2corrd(x,y,z):
    lon = math.atan2(y,x)
    hyp = math.sqrt(x*x + y*y)
    lat = math.atan2(z,hyp)
    return(lat,lng)

def dist(lat1,lng1,lat2,lng2):
    global to_rad, earth_radius_km

    dLat = (lat2-lat1) * to_rad
    dLon = (lng2-lng1) * to_rad
    lat1_rad = lat1 * to_rad
    lat2_rad = lat2 * to_rad

    a = math.sin(dLat/2) * math.sin(dLat/2) + math.sin(dLon/2) * math.sin(dLon/2) * math.cos(lat1_rad) * math.cos(lat2_rad)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a)); 
    dist = earth_radius_km * c
    return dist

def bounding_box(src, neighbors):
    neighbors.append(src)
    # nw = NorthWest se=SouthEast
    nw_lat = -360
    nw_lng = 360
    se_lat = 360
    se_lng = -360

    for (y,x) in neighbors:
        if y &gt; nw_lat: nw_lat = y
        if x &gt; se_lng: se_lng = x

        if y &lt; se_lat: se_lat = y
        if x &lt; nw_lng: nw_lng = x

    # add some padding
    pad = 0.5
    nw_lat += pad
    nw_lng -= pad
    se_lat -= pad
    se_lng += pad

    #print("answer:")
    #print("nw lat,lng : %s %s" % (nw_lat,nw_lng))
    #print("se lat,lng : %s %s" % (se_lat,se_lng))

    # sutiable for r's map() function
    return (se_lat,nw_lat,nw_lng,se_lng)

def sitesDist(site1,site2): 
    # just a helper to shorted list comprehensioin below 
    return dist(site1[0],site1[1], site2[0], site2[1])

def load_site_data():
    global fname
    sites = defaultdict(tuple)

    data = open(fname,encoding="latin-1")
    data.readline() # skip header
    for line in data:
        line = line[:-1]
        slots = line.split("\t")
        lat = float(slots[0])
        lng = float(slots[1])
        lat_rad = lat * math.pi / 180.0
        lng_rad = lng * math.pi / 180.0
        sites[(lat,lng)] = (lat,lng) #(lat_rad,lng_rad)
    return sites

def main():
    color_list = ( "red", "blue", "green", "yellow", "orange", "brown", "pink", "purple" )
    color_idx = 0
    sites_dict = {}
    sites = load_site_data()
    for site in sites: 
        #for each site put it in a dictionarry with its value being an array of neighbors 
        sites_dict[site] = [x for x in sites if x != site and sitesDist(site,x) &lt; threshhold_dist] 

    print("")
    print('map("state", plot=T)') # or use: county instead of state
    print("")


    results = {}
    for site in sites: 
        j = len(sites_dict[site])
        if j &gt;= threshhold_locations:
            coord = bounding_box( site, sites_dict[site] )
            results[coord] = coord

    for bbox in results:
        yx="ylim=c(%s,%s), xlim=c(%s,%s)" % (results[bbox]) #(se_lat,nw_lat,nw_lng,se_lng)

        # important!
        # if you want an individual map for each cluster, uncomment this line
        #print('map("county", plot=T, fill=T, col=palette(), %s)' % yx)
        if len(color_list) == color_idx:
            color_idx = 0
        rect='rect(%s,%s, %s,%s, col=c("%s"))' % (results[bbox][2], results[bbox][0], results[bbox][3], results[bbox][1], color_list[color_idx])
        color_idx += 1
        print(rect)
    print("")


main()
</snippet></ROW><ROW><id>10114369</id><snippet>x</snippet></ROW><ROW><id>10114369</id><snippet>x</snippet></ROW><ROW><id>10114369</id><snippet>numpy.fill()</snippet></ROW><ROW><id>10114369</id><snippet>numpy.array</snippet></ROW><ROW><id>10114369</id><snippet>x</snippet></ROW><ROW><id>10114369</id><snippet>numpy.fill()</snippet></ROW><ROW><id>10114382</id><snippet>bool</snippet></ROW><ROW><id>10114382</id><snippet>True</snippet></ROW><ROW><id>10114382</id><snippet>False</snippet></ROW><ROW><id>10114382</id><snippet>NoneType</snippet></ROW><ROW><id>10114382</id><snippet>None</snippet></ROW><ROW><id>10114382</id><snippet>NotImplementedType</snippet></ROW><ROW><id>10114382</id><snippet>NotImplemented</snippet></ROW><ROW><id>10114382</id><snippet>ellipsis</snippet></ROW><ROW><id>10114382</id><snippet>Ellipsis</snippet></ROW><ROW><id>10114382</id><snippet>function</snippet></ROW><ROW><id>10114382</id><snippet>function</snippet></ROW><ROW><id>10114382</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>10114382</id><snippet>function</snippet></ROW><ROW><id>10114382</id><snippet>TypeError: type 'bool' is not an acceptable base type
</snippet></ROW><ROW><id>10114382</id><snippet>TypeError: type 'bool' is final (non-extensible)
</snippet></ROW><ROW><id>10114654</id><snippet>__slots__</snippet></ROW><ROW><id>10114654</id><snippet>__slots__</snippet></ROW><ROW><id>10114654</id><snippet>__dict__</snippet></ROW><ROW><id>10114654</id><snippet>__dict__</snippet></ROW><ROW><id>10114654</id><snippet>object</snippet></ROW><ROW><id>10114654</id><snippet>__dict__</snippet></ROW><ROW><id>10114654</id><snippet>__dict__</snippet></ROW><ROW><id>10114654</id><snippet>__dict__</snippet></ROW><ROW><id>10114654</id><snippet>object</snippet></ROW><ROW><id>10114654</id><snippet>__dict__</snippet></ROW><ROW><id>10114654</id><snippet>__dict__</snippet></ROW><ROW><id>10114654</id><snippet>__dict__</snippet></ROW><ROW><id>10114654</id><snippet>__weakref__</snippet></ROW><ROW><id>10114654</id><snippet>__slots__</snippet></ROW><ROW><id>10114654</id><snippet>object</snippet></ROW><ROW><id>10114654</id><snippet>dict</snippet></ROW><ROW><id>10114654</id><snippet>object()</snippet></ROW><ROW><id>10114654</id><snippet>object</snippet></ROW><ROW><id>10114654</id><snippet>None</snippet></ROW><ROW><id>10114654</id><snippet>BAR_DEFAULT = object()
def foo(bar=BAR_DEFAULT):
    if bar is BAR_DEFAULT:
        #...
</snippet></ROW><ROW><id>10114654</id><snippet>object</snippet></ROW><ROW><id>10114903</id><snippet>sed -i "1,/sys.path.append/ {/sys.path.append/i sys.path.append('$HOMEDIR/')\nsys.path.append('/home/$SYS_USER/')
}" $HOMEDIR/wsgi.py
</snippet></ROW><ROW><id>10114903</id><snippet>}</snippet></ROW><ROW><id>10115138</id><snippet>IS_MATCH()</snippet></ROW><ROW><id>10115138</id><snippet>IS_MATCH('[A-F0-9]{11}|[A-F0-9]{14}', strict=True)
</snippet></ROW><ROW><id>10115138</id><snippet>strict=True</snippet></ROW><ROW><id>10115138</id><snippet>search=True</snippet></ROW><ROW><id>10115420</id><snippet>if 'Reference' in current_element.attrib:
  ...do something with it...
</snippet></ROW><ROW><id>10115462</id><snippet>sys.exc_info()[2]</snippet></ROW><ROW><id>10115462</id><snippet>def trace(context=1):
    """Return a list of records for the stack below the current exception."""
    return getinnerframes(sys.exc_info()[2], context)
</snippet></ROW><ROW><id>10115462</id><snippet>getinnerframes</snippet></ROW><ROW><id>10115462</id><snippet>import sys
import inspect
from pprint import pprint


def errorer():
    raise Exception('foo')

def syser():
    try:
        errorer()
    except Exception, e:
        tb = sys.exc_info()[2]
        print tb.tb_frame
        print tb.tb_lasti
        print tb.tb_lineno
        print tb.tb_next

def inspecter():
    try:
        errorer()
    except Exception, e:
        pprint(inspect.trace())
</snippet></ROW><ROW><id>10115462</id><snippet>&gt;&gt;&gt; syser()
&lt;frame object at 0x1441240&gt;
6
10
&lt;traceback object at 0x13eb3b0&gt;
&gt;&gt;&gt; inspecter()
[(&lt;frame object at 0x14a5590&gt;,
  '/tmp/errors.py',
  22,
  'inspecter',
  None,
  None),
 (&lt;frame object at 0x14a21b0&gt;,
  '/tmp/errors.py',
  8,
  'errorer',
  None,
  None)]
</snippet></ROW><ROW><id>10115462</id><snippet>inspect.trace()</snippet></ROW><ROW><id>10115496</id><snippet>window.parentWidget()</snippet></ROW><ROW><id>10115496</id><snippet>QWorkSpace</snippet></ROW><ROW><id>10115496</id><snippet>QMdiArea</snippet></ROW><ROW><id>10115496</id><snippet>subWindowList</snippet></ROW><ROW><id>10115553</id><snippet>s = requests.session()
s.config['keep_alive'] = False
</snippet></ROW><ROW><id>10115596</id><snippet>isinstance(value, Hashable)</snippet></ROW><ROW><id>10116237</id><snippet>def combinations(input_list, acc=''):

    if not input_list:
        yield acc
        return

    next_val = input_list[0]

    for rest in combinations(input_list[1:], acc):
        yield rest

    acc += next_val

    # In python 3.2, you can use "yield from combinations(input_list[1:], acc)"
    for rest in combinations(input_list[1:], acc):
        yield rest
</snippet></ROW><ROW><id>10116237</id><snippet>def combinations(input_list, acc='', from_idx=0):

    if len(input_list) &lt;= from_idx:
        yield acc
        return

    next_val = input_list[from_idx]

    for rest in combinations(input_list, acc, from_idx + 1):
        yield rest

    acc += next_val

    # In python 3.2, you can use "yield from combinations(input_list[1:], acc)"
    for rest in combinations(input_list, acc, from_idx + 1):
        yield rest
</snippet></ROW><ROW><id>10116237</id><snippet>def combinations(input_list, acc='', from_idx=0):

    if len(input_list) &lt;= from_idx:
        yield acc
        return

    next_val = input_list[from_idx]

    yield from combinations(input_list, acc, from_idx + 1)
    acc += next_val
    yield from combinations(input_list, acc, from_idx + 1)
</snippet></ROW><ROW><id>10116237</id><snippet>itertools.combinations</snippet></ROW><ROW><id>10116250</id><snippet>abs(x0 - x1) &gt; tol</snippet></ROW><ROW><id>10116250</id><snippet>x0</snippet></ROW><ROW><id>10116250</id><snippet>x1</snippet></ROW><ROW><id>10116250</id><snippet>x1</snippet></ROW><ROW><id>10116250</id><snippet>x0</snippet></ROW><ROW><id>10116250</id><snippet>for</snippet></ROW><ROW><id>10116250</id><snippet>for i in range(N):
    f = evaluate(p,deg,x0)
    s = evaluate(d,deg-1,x0)

    if s==0:
        print "Can't divide by 0"
        return -1
    x1=x0 - f/s
    print ("Iteration %d" %(i+1))
    print "%f" %x0
    if abs(x1-x0)&lt;tol:
        print "Found a root %f" %x1
        return 0
    else:
        x0=x1

# If we exhaust the for-loop without returning due to
# a found root, then there must have been an error with
# convergence, so just print that at exit.
print "Error: did not converge to the root in %d iterations."%(N)
print "Check your initial guess and check your functions for cyclic points."
</snippet></ROW><ROW><id>10116392</id><snippet>In [10]: urllib2.unquote("%7B%0A%20%20%22action%22%20%20%20%20%20%20%3A%20%22deploy%5Ffrom%5Fscratch%5Fwith%5Fbundle%22%2C%0A%20%20%22pusher%22%20%20%20%20%20%20%3A%20%7B%20%22email%22%20%3A%20%22my%40email%2Ecom%22%20%7D%2C%0A%20%20%22ref%22%20%20%20%20%20%20%20%20%20%3A%20%22refs%2Fheads%2Fmaster%22%2C%0A%20%20%22repo%5Fchoice%22%20%3A%20%22LOCAL%22%0A%7D%0A")
Out[10]: '{\n  "action"      : "deploy_from_scratch_with_bundle",\n  "pusher"      : { "email" : "my@email.com" },\n  "ref"         : "refs/heads/master",\n  "repo_choice" : "LOCAL"\n}\n'
</snippet></ROW><ROW><id>10116477</id><snippet>str()</snippet></ROW><ROW><id>10116477</id><snippet>simplejson.dumps(list)</snippet></ROW><ROW><id>10116477</id><snippet>str()</snippet></ROW><ROW><id>10116477</id><snippet>"[{'a': 'apple'}]"</snippet></ROW><ROW><id>10116477</id><snippet>django.utils.simplejson</snippet></ROW><ROW><id>10116477</id><snippet>&gt;&gt;&gt; from django.utils.simplejson import dumps
&gt;&gt;&gt; dumps("Hello")
'"Hello"' # single quotes here
&gt;&gt;&gt; repr(dumps("Hello"))
'\'"Hello"\'' # or here
</snippet></ROW><ROW><id>10116540</id><snippet>Key error</snippet></ROW><ROW><id>10116540</id><snippet>doesn't exist</snippet></ROW><ROW><id>10116540</id><snippet>path</snippet></ROW><ROW><id>10116540</id><snippet>official python docs</snippet></ROW><ROW><id>10116540</id><snippet>&gt;&gt;&gt; mydict = {'a':'1','b':'2'}
&gt;&gt;&gt; mydict['a']
'1'
&gt;&gt;&gt; mydict['c']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'c'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10116540</id><snippet>meta_entry</snippet></ROW><ROW><id>10116540</id><snippet>path</snippet></ROW><ROW><id>10116540</id><snippet>&gt;&gt;&gt; mydict = {'a':'1','b':'2'}
&gt;&gt;&gt; print mydict
{'a': '1', 'b': '2'}
</snippet></ROW><ROW><id>10116540</id><snippet>&gt;&gt;&gt; 'a' in mydict.keys()
True
&gt;&gt;&gt; 'c' in mydict.keys()
False
</snippet></ROW><ROW><id>10116656</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; my_list = [[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; x = np.array(my_list)
&gt;&gt;&gt; np.transpose(x).tolist()
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</snippet></ROW><ROW><id>10116666</id><snippet>string[i+1:]
</snippet></ROW><ROW><id>10116666</id><snippet>i+1</snippet></ROW><ROW><id>10116666</id><snippet>def suffixtree(string):
    N = len(string)
    for i in xrange(N):
        if tree.has_key(string[i]):
            tree[string[i]].append(buffer(string,i+1,N))
        else:
            tree[string[i]]=[buffer(string,i+1,N)]
    return tree
</snippet></ROW><ROW><id>10116666</id><snippet>buffer</snippet></ROW><ROW><id>10116958</id><snippet>lst_names = [os.path.join(full_subdir_name, n) for n in os.listdir(full_subdir_name)]
</snippet></ROW><ROW><id>10116958</id><snippet>namelist</snippet></ROW><ROW><id>10116958</id><snippet># example using Windwows filenames
# note that we use "raw strings" with r'' so the backslash will not be weird
lst_names = [r'C:\Users\steveha\Desktop', r'C:\Users\steveha\Documents', r'C:\Users\steveha\Music']

# example using Mac or Linux filenames
lst_names = ['/home/steveha/Desktop', '/home/steveha/Documents', '/home/steveha/Music'
</snippet></ROW><ROW><id>10116958</id><snippet>lst_names</snippet></ROW><ROW><id>10116958</id><snippet>namelist</snippet></ROW><ROW><id>10116958</id><snippet>namelist = {}

for full_subdir_name in lst_names:
    namelist[full_subdir_name] = [os.path.join(full_subdir_name, n) for n in os.listdir(full_subdir_name)]
</snippet></ROW><ROW><id>10116958</id><snippet>full_subdir_name</snippet></ROW><ROW><id>10116958</id><snippet>namelist = {}

for f in lst_names:
    namelist[f] = [os.path.join(f, n) for n in os.listdir(f)]
</snippet></ROW><ROW><id>10117573</id><snippet>word :: Word('a'-'z', 'A'-'Z', '0'-'9', '.-/&amp;§')
field_qualifier :: '[' word+ ']'
search_term :: (word+ | quoted_string) field_qualifier?
and_op :: 'and'
or_op :: 'or'
and_term :: or_term (and_op or_term)*
or_term :: atom (or_op atom)*
atom :: search_term | ('(' and_term ')')
</snippet></ROW><ROW><id>10117573</id><snippet>word</snippet></ROW><ROW><id>10117573</id><snippet>and_op</snippet></ROW><ROW><id>10117573</id><snippet>or_op</snippet></ROW><ROW><id>10117573</id><snippet>LBRACK,RBRACK,LPAREN,RPAREN = map(Suppress,"[]()")
and_op = CaselessKeyword('and')
or_op = CaselessKeyword('or')
word = Word(alphanums + '.-/&amp;')

field_qualifier = LBRACK + OneOrMore(word) + RBRACK
search_term = ((Group(OneOrMore(word)) | quoted_string)('search_text') + 
               Optional(field_qualifier)('field'))
expr = Forward()
atom = search_term | (LPAREN + expr + RPAREN)
or_term = atom + ZeroOrMore(or_op + atom)
and_term = or_term + ZeroOrMore(and_op + or_term)
expr &lt;&lt; and_term
</snippet></ROW><ROW><id>10117573</id><snippet>word = ~(and_op | or_op) + Word(alphanums + '.-/&amp;')
</snippet></ROW><ROW><id>10117573</id><snippet>Group</snippet></ROW><ROW><id>10117573</id><snippet>field_qualifier = Group(LBRACK + OneOrMore(word) + RBRACK)
search_term = Group(Group(OneOrMore(word) | quotedString)('search_text') +
                          Optional(field_qualifier)('field'))
expr = Forward()
atom = search_term | (LPAREN + expr + RPAREN)
or_term = Group(atom + ZeroOrMore(or_op + atom))
and_term = Group(or_term + ZeroOrMore(and_op + or_term))
expr &lt;&lt; and_term
</snippet></ROW><ROW><id>10117573</id><snippet>res = expr.parseString(test)
from pprint import pprint
pprint(res.asList())
</snippet></ROW><ROW><id>10117573</id><snippet>[[[[[[['"breast neoplasms"'], ['MeSH', 'Terms']],
     'or',
     [['breast', 'cancer'], ['Acknowledgments']],
     'or',
     [['breast', 'cancer'], ['Figure/Table', 'Caption']],
     'or',
     [['breast', 'cancer'], ['Section', 'Title']],
     'or',
     [['breast', 'cancer'], ['Body', '-', 'All', 'Words']],
     'or',
     [['breast', 'cancer'], ['Title']],
     'or',
     [['breast', 'cancer'], ['Abstract']],
     'or',
     [['breast', 'cancer'], ['Journal']]]]],
  'and',
  [[[[['prevention'], ['Acknowledgments']],
     'or',
     [['prevention'], ['Figure/Table', 'Caption']],
     'or',
     [['prevention'], ['Section', 'Title']],
     'or',
     [['prevention'], ['Body', '-', 'All', 'Words']],
     'or',
     [['prevention'], ['Title']],
     'or',
     [['prevention'], ['Abstract']]]]]]]
</snippet></ROW><ROW><id>10117573</id><snippet>Group</snippet></ROW><ROW><id>10117573</id><snippet>ParsedObject</snippet></ROW><ROW><id>10117573</id><snippet>queryString</snippet></ROW><ROW><id>10117573</id><snippet>class ParsedObject(object):
    def __init__(self, tokens):
        self.tokens = tokens
    def queryString(self):
        '''Abstract method to be overridden in subclasses'''
</snippet></ROW><ROW><id>10117573</id><snippet>Group</snippet></ROW><ROW><id>10117573</id><snippet>search_term = Group(OneOrMore(word) | quotedString)('search_text') + 
                    Optional(field_qualifier)('field')
atom = search_term | (LPAREN + expr + RPAREN)
or_term = atom + ZeroOrMore(or_op + atom)
and_term = or_term + ZeroOrMore(and_op + or_term)
expr &lt;&lt; and_term
</snippet></ROW><ROW><id>10117573</id><snippet>search_term</snippet></ROW><ROW><id>10117573</id><snippet>self.tokens</snippet></ROW><ROW><id>10117573</id><snippet>class SearchTerm(ParsedObject):
    def queryString(self):
        text = ' '.join(self.tokens.search_text)
        if self.tokens.field:
            return '%s: %s' % (' '.join(f.lower() 
                                        for f in self.tokens.field[0]),text)
        else:
            return text
search_term.setParseAction(SearchTerm)
</snippet></ROW><ROW><id>10117573</id><snippet>and_term</snippet></ROW><ROW><id>10117573</id><snippet>or_term</snippet></ROW><ROW><id>10117573</id><snippet>class BinaryOperation(ParsedObject):
    def queryString(self):
        joinstr = ' %s ' % self.op
        return joinstr.join(t.queryString() for t in self.tokens[0::2])
class OrOperation(BinaryOperation):
    op = "OR"
class AndOperation(BinaryOperation):
    op = "AND"
or_term.setParseAction(OrOperation)
and_term.setParseAction(AndOperation)
</snippet></ROW><ROW><id>10117573</id><snippet>BinaryOperation</snippet></ROW><ROW><id>10117573</id><snippet>[0::2]</snippet></ROW><ROW><id>10117573</id><snippet>class Expr(ParsedObject):
    def queryString(self):
        return '(%s)' % self.tokens[0].queryString()
expr.setParseAction(Expr)
</snippet></ROW><ROW><id>10117573</id><snippet>from pyparsing import *

LBRACK,RBRACK,LPAREN,RPAREN = map(Suppress,"[]()")
and_op = CaselessKeyword('and')
or_op = CaselessKeyword('or')
word = ~(and_op | or_op) + Word(alphanums + '.-/&amp;')
field_qualifier = Group(LBRACK + OneOrMore(word) + RBRACK)

search_term = (Group(OneOrMore(word) | quotedString)('search_text') + 
               Optional(field_qualifier)('field'))
expr = Forward()
atom = search_term | (LPAREN + expr + RPAREN)
or_term = atom + ZeroOrMore(or_op + atom)
and_term = or_term + ZeroOrMore(and_op + or_term)
expr &lt;&lt; and_term

# define classes for parsed structure
class ParsedObject(object):
    def __init__(self, tokens):
        self.tokens = tokens
    def queryString(self):
        '''Abstract method to be overridden in subclasses'''

class SearchTerm(ParsedObject):
    def queryString(self):
        text = ' '.join(self.tokens.search_text)
        if self.tokens.field:
            return '%s: %s' % (' '.join(f.lower() 
                                        for f in self.tokens.field[0]),text)
        else:
            return text
search_term.setParseAction(SearchTerm)

class BinaryOperation(ParsedObject):
    def queryString(self):
        joinstr = ' %s ' % self.op
        return joinstr.join(t.queryString() 
                                for t in self.tokens[0::2])
class OrOperation(BinaryOperation):
    op = "OR"
class AndOperation(BinaryOperation):
    op = "AND"
or_term.setParseAction(OrOperation)
and_term.setParseAction(AndOperation)

class Expr(ParsedObject):
    def queryString(self):
        return '(%s)' % self.tokens[0].queryString()
expr.setParseAction(Expr)


test = """("breast neoplasms"[MeSH Terms] OR breast cancer[Acknowledgments]  
OR breast cancer[Figure/Table Caption] OR breast cancer[Section Title]  
OR breast cancer[Body - All Words] OR breast cancer[Title]  
OR breast cancer[Abstract] OR breast cancer[Journal])  
AND (prevention[Acknowledgments] OR prevention[Figure/Table Caption]  
OR prevention[Section Title] OR prevention[Body - All Words]  
OR prevention[Title] OR prevention[Abstract])"""

res = expr.parseString(test)[0]
print res.queryString()
</snippet></ROW><ROW><id>10117573</id><snippet>((mesh terms: "breast neoplasms" OR acknowledgments: breast cancer OR 
  figure/table caption: breast cancer OR section title: breast cancer OR 
  body - all words: breast cancer OR title: breast cancer OR 
  abstract: breast cancer OR journal: breast cancer) AND 
 (acknowledgments: prevention OR figure/table caption: prevention OR 
  section title: prevention OR body - all words: prevention OR 
  title: prevention OR abstract: prevention))
</snippet></ROW><ROW><id>10117573</id><snippet>queryString</snippet></ROW><ROW><id>10117671</id><snippet>def CreateText(win, text, x, y, size=None, font=None, color=None, style=None):
</snippet></ROW><ROW><id>10117671</id><snippet>if</snippet></ROW><ROW><id>10117671</id><snippet>def CreateText(win, text, x, y, 
                         size=12, font="courier", color="black", style="normal"):

    txtObject = Text(Point(x,y), text)
    txtObject.setSize(size)
    txtObject.setFace(font)
    txtObject.setTextColor(color)
    txtObject.setStyle(style)

    return txtObject
</snippet></ROW><ROW><id>10117882</id><snippet>sendall</snippet></ROW><ROW><id>10117882</id><snippet>from socket import *
sP = 14000
servSock = socket(AF_INET,SOCK_STREAM)
servSock.bind(('',sP))
servSock.listen(1)

while 1:
  connSock, addr = servSock.accept()
  connSock.sendall('HTTP/1.0 200 OK\r\nContent-Type:text/html\r\nConnection:close\r\n\r\n&lt;html&gt;&lt;head&gt;foo&lt;/head&gt;&lt;/html&gt;\r\n')
  connSock.close()
</snippet></ROW><ROW><id>10117916</id><snippet>try/except</snippet></ROW><ROW><id>10117916</id><snippet>try:
    urllib2.openurl(url)
except urllib2.HTTPError, e:
    print e
</snippet></ROW><ROW><id>10117942</id><snippet>O(n^3)</snippet></ROW><ROW><id>10117942</id><snippet>O(n^2)</snippet></ROW><ROW><id>10117942</id><snippet>O(n^2)</snippet></ROW><ROW><id>10117942</id><snippet>O(n^2)</snippet></ROW><ROW><id>10117942</id><snippet>O(n log n)</snippet></ROW><ROW><id>10117942</id><snippet>O(n^2)</snippet></ROW><ROW><id>10117942</id><snippet>O(n^3)</snippet></ROW><ROW><id>10118087</id><snippet>image = {
    'pixels': im.tostring(),
    'size': im.size,
    'mode': im.mode,
}
</snippet></ROW><ROW><id>10118087</id><snippet>im = Image.fromstring(image['mode'], image['size'], image['pixels'])
</snippet></ROW><ROW><id>10118087</id><snippet>astex</snippet></ROW><ROW><id>10118087</id><snippet>tostring()</snippet></ROW><ROW><id>10118087</id><snippet>tobytes()</snippet></ROW><ROW><id>10118087</id><snippet>fromstring()</snippet></ROW><ROW><id>10118087</id><snippet>frombytes()</snippet></ROW><ROW><id>10118125</id><snippet>from collections import defaultdict

date_parse = re.compile(r'Date:\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)')

c = defaultdict(int)

for line in sys.stdin:
    m = date_parse.match(line)
    if m is None:
        # pattern did not match
        # could handle error or log it here if desired
        continue # skip to handling next input line
    month = m.group(1)
    c[month] += 1
</snippet></ROW><ROW><id>10118125</id><snippet>r''</snippet></ROW><ROW><id>10118125</id><snippet>r""</snippet></ROW><ROW><id>10118125</id><snippet>\s</snippet></ROW><ROW><id>10118125</id><snippet>\n</snippet></ROW><ROW><id>10118125</id><snippet>[Date:\s]+</snippet></ROW><ROW><id>10118125</id><snippet>Date:</snippet></ROW><ROW><id>10118125</id><snippet>taD:e</snippet></ROW><ROW><id>10118125</id><snippet>Date:</snippet></ROW><ROW><id>10118260</id><snippet>None</snippet></ROW><ROW><id>10118260</id><snippet>initializer(*initargs)</snippet></ROW><ROW><id>10118260</id><snippet>def get_cursor():
  return psycopg2.connect(...).cursor()

def process_data(connection,data):
   # here I'd like to have the cursor so that I can do things with the data

if __name__ == "__main__":
  pool = Pool()
  cursor = get_cursor()
  pool.map(process_data, [(cursor,data) for data in get_some_data_iterator()])
</snippet></ROW><ROW><id>10118284</id><snippet>&gt;&gt;&gt; numpy.array([[1,2,3],[4,5,6],[7,8,9]])[:,:2]
array([[1, 2],
       [4, 5],
       [7, 8]])
</snippet></ROW><ROW><id>10118771</id><snippet>special_user_list = User.objects.filter(
    Q(userprofile__user_type='special') |
    Q(pk=request.user.pk)
).distinct()
</snippet></ROW><ROW><id>10118780</id><snippet>list.sort()</snippet></ROW><ROW><id>10118780</id><snippet>arr = np.array([2,0,8,4,1])
arr.sort()
print arr
</snippet></ROW><ROW><id>10118884</id><snippet>    data = conn.recv(1024)
    #Parse headers
    """
    data will now be something like this:

    GET /?banana=True HTTP/1.1
    Host: localhost:50008
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.53.11 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-us
    Accept-Encoding: gzip, deflate
    Connection: keep-alive

    """
    #A simple parsing of the get data would be:
    GET={i.split("=")[0]:i.split("=")[1] for i in data.split("\n")[0].split(" ")[1][2:].split("&amp;")}
</snippet></ROW><ROW><id>10119366</id><snippet>class parentplus(object):
    def __init__(self, name, current):
        self.name = name
        self.value = current

    def __get__(self, instance, owner):
        # Find the attribute in self.name in instance's bases
        # Implementation left as an exercise for the reader

class A(object):
    keywords = ('one', 'two', 'three')

class B(A):
    keywords = parentplus('keywords', ('four', 'five', 'six'))
</snippet></ROW><ROW><id>10119536</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; w = np.array([0.1, 0.2, 0.1, 0.3, 0.5])
&gt;&gt;&gt; c = Counter(w)

Counter({0.10000000000000001: 2, 0.5: 1, 0.29999999999999999: 1, 0.20000000000000001: 1})
</snippet></ROW><ROW><id>10119536</id><snippet>Counter({0.1: 2, 0.5: 1, 0.3: 1, 0.2: 1})
</snippet></ROW><ROW><id>10119536</id><snippet>&gt;&gt;&gt; np.array([v for k,v in sorted(c.iteritems())])

array([2, 1, 1, 1])
</snippet></ROW><ROW><id>10119536</id><snippet>bincount</snippet></ROW><ROW><id>10119536</id><snippet>&gt;&gt;&gt; np.bincount([10,11])
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1])
</snippet></ROW><ROW><id>10119906</id><snippet>__getattribute__</snippet></ROW><ROW><id>10119906</id><snippet>class Hardware(object):
    def __getattribute__(self, attr):
        if super(Hardware, self).__getattribute__(owner_id) != current_thread_id:
            raise YourAccessError  # NOT AttributeError
        return super(Hardware, self).__getattribute__(attr)
</snippet></ROW><ROW><id>10119925</id><snippet>Queue</snippet></ROW><ROW><id>10119925</id><snippet>import multiprocessing

def func_a(q):
    q.put(3)
    q.put(2)
    q.put(1)

def func_b(q):
    v = q.get()
    print 'func_b prints:', v
    v = q.get()
    print 'func_b prints:', v
    v = q.get()
    print 'func_b prints:', v

if __name__ == '__main__':
    q = multiprocessing.Queue()
    p1 = multiprocessing.Process(target = func_a, args = (q,))
    p1.start()
    p2 = multiprocessing.Process(target = func_b, args = (q,))
    p2.start()
    p1.join()
    p2.join()
</snippet></ROW><ROW><id>10119925</id><snippet>func_b prints: 3
func_b prints: 2
func_b prints: 1
</snippet></ROW><ROW><id>10120651</id><snippet>self.user = User.objects.create(username='testuser',password='!')
self.user.set_password('some_password')
self.user.save() # &lt;--- You need this ;)
</snippet></ROW><ROW><id>10120651</id><snippet>self.user = User.objects.create_user(username='user', email='email@example.com', password='pass')
</snippet></ROW><ROW><id>10121232</id><snippet>cdef cppclass CMyClass "myns::MyClass" namespace "myns": ...
</snippet></ROW><ROW><id>10121232</id><snippet>MyClass</snippet></ROW><ROW><id>10121232</id><snippet>CMyClass</snippet></ROW><ROW><id>10121232</id><snippet>cimport</snippet></ROW><ROW><id>10121232</id><snippet>cdef cppclass MyClass namespace "myns": ...
</snippet></ROW><ROW><id>10121232</id><snippet>cimport cpp_defs as cpp

cdef class MyClass:
    cpp.MyClass *_obj
</snippet></ROW><ROW><id>10121437</id><snippet>&gt;&gt;&gt; def f(a=[]):
...     pass
...
&gt;&gt;&gt; f.func_defaults
([],)
&gt;&gt;&gt; f.func_code.co_varnames
('a',)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10121437</id><snippet>co_varnames</snippet></ROW><ROW><id>10121437</id><snippet>inspect</snippet></ROW><ROW><id>10121437</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; spec = inspect.getargspec(f)
&gt;&gt;&gt; spec
ArgSpec(args=['a'], varargs=None, keywords=None, defaults=([],))
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10121437</id><snippet>ArgSpec</snippet></ROW><ROW><id>10121437</id><snippet>&gt;&gt;&gt; spec.args
['a']
&gt;&gt;&gt; spec.defaults
([],)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10121437</id><snippet>defaults</snippet></ROW><ROW><id>10121437</id><snippet>args</snippet></ROW><ROW><id>10121437</id><snippet>&gt;&gt;&gt; dict(zip(spec.args[-len(spec.defaults):], spec.defaults))
{'a': []}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10121658</id><snippet>textOne</snippet></ROW><ROW><id>10121658</id><snippet>InsertionPoint</snippet></ROW><ROW><id>10121658</id><snippet>import wx

class ValidationDemo(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, wx.ID_ANY, 
                          "Text Validation Tutorial")

        panel = wx.Panel(self)
        self.textOne = wx.TextCtrl(panel)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.textOne, 0, wx.ALL, 5)
        panel.SetSizer(sizer)

        self.Bind(wx.EVT_TEXT, self.OnTextType, self.textOne)

    def OnTextType(self, event):
        self.textOne.ChangeValue(unicode.upper(self.textOne.GetValue()))
        self.textOne.SetInsertionPointEnd()


# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = ValidationDemo()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>10121780</id><snippet>\b</snippet></ROW><ROW><id>10121780</id><snippet>newString = re.sub(r'\boldword\b', r'newword', oldString)
</snippet></ROW><ROW><id>10121998</id><snippet>|</snippet></ROW><ROW><id>10121998</id><snippet>&amp;</snippet></ROW><ROW><id>10121998</id><snippet>In [1]: from django.http import QueryDict

In [2]: sample = 'amount=2000|captureDay=0|captureMode=AUTHOR_CAPTURE|currencyCode=978|merchantId=002020000000001|orderId=|transactionDateTime=2012-04-12T12:09:56+02:00|transactionReference=1212943|keyVersion=1|authorisationId=0020000006791167|complementaryCode=|maskedPan=|paymentMeanBrand=IDEAL|paymentMeanType=CREDIT_TRANSFER|responseCode=00'

In [3]: qdict = QueryDict(sample.replace('|','&amp;'))

In [4]: qdict
Out[4]: &lt;QueryDict: {u'orderId': [u''], u'keyVersion': [u'1'], u'transactionReference': [u'1212943'], u'paymentMeanType': [u'CREDIT_TRANSFER'], u'maskedPan': [u''], u'currencyCode': [u'978'], u'paymentMeanBrand': [u'IDEAL'], u'complementaryCode': [u''], u'amount': [u'2000'], u'authorisationId': [u'0020000006791167'], u'responseCode': [u'00'], u'captureMode': [u'AUTHOR_CAPTURE'], u'captureDay': [u'0'], u'transactionDateTime': [u'2012-04-12T12:09:56 02:00'], u'merchantId': [u'002020000000001']}&gt;
</snippet></ROW><ROW><id>10122262</id><snippet>    a = []
    for x in y:
        a.append(x)
    a = np.array(a)
</snippet></ROW><ROW><id>10122319</id><snippet>N</snippet></ROW><ROW><id>10122319</id><snippet>f2</snippet></ROW><ROW><id>10122319</id><snippet>long</snippet></ROW><ROW><id>10122319</id><snippet> fmin = (N - 1) // f2 + 1
</snippet></ROW><ROW><id>10122319</id><snippet>ceil(N / float(f2))</snippet></ROW><ROW><id>10122319</id><snippet>//</snippet></ROW><ROW><id>10122319</id><snippet>/</snippet></ROW><ROW><id>10122319</id><snippet>N // f2</snippet></ROW><ROW><id>10122319</id><snippet>floor(N / float(f2))</snippet></ROW><ROW><id>10122319</id><snippet>N // f2 + 1</snippet></ROW><ROW><id>10122319</id><snippet>ceil</snippet></ROW><ROW><id>10122319</id><snippet>N</snippet></ROW><ROW><id>10122319</id><snippet>f2</snippet></ROW><ROW><id>10122319</id><snippet>N // f2 + 1</snippet></ROW><ROW><id>10122319</id><snippet>+1</snippet></ROW><ROW><id>10122319</id><snippet>N - 1</snippet></ROW><ROW><id>10122319</id><snippet>N</snippet></ROW><ROW><id>10122319</id><snippet>f2</snippet></ROW><ROW><id>10122559</id><snippet>&gt;&gt;&gt; def f():
...         global cat
...         exec 'global cat; cat'+'="meow"'
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; f()
&gt;&gt;&gt; cat
'meow'
</snippet></ROW><ROW><id>10122591</id><snippet>try:
    with open(r"C:\file.txt", "w") as aFile:
        a.File.write("!")
    if os.path.exists(r"C:\file.txt"):
        shutil.copy(r"C:\file.txt", r"C:\dest.txt")
except IOError as ex:
    print ex
</snippet></ROW><ROW><id>10123187</id><snippet>from Tkinter import *
import tkFont

master = Tk()

canvas = Canvas(master, width=600, height=150)
canvas.grid(row=0, column=0, columnspan=2, sticky=W+N+E+S)

list = Listbox(master)
for f in sorted(tkFont.families()):
    list.insert(END, f)

list.grid(row=1, column=0)

font_size= IntVar()
ruler = Scale(master, orient=HORIZONTAL, from_=1, to=200, variable=font_size)
ruler.grid(row=1, column=1, sticky=W+E)


def font_changed(*args):
    sel = list.curselection()
    font_name = list.get(sel[0]) if len(sel) &gt; 0 else "Times"
    canvas.itemconfig(text_item, font=(font_name,font_size.get()))
    #force redrawing of the whole Canvas
    # dirty rectangle of text items has bug with "superscript" character
    canvas.event_generate("&lt;Configure&gt;")

def draw():
    supernumber_exception={1:u'\u00b9', 2:u'\u00b2', 3:u'\u00b3'}
    mytext =""
    for i in range(10):
        mytext += u'U'+ (supernumber_exception[i] if i in supernumber_exception else unichr(8304+i))+" "
    return canvas.create_text(50, 50,text = mytext, anchor=NW)

text_item = draw()

list.bind("&lt;&lt;ListboxSelect&gt;&gt;", font_changed)

font_size.trace("w", font_changed)
font_size.set(30)

master.grid_columnconfigure(0, weight=0)
master.grid_columnconfigure(1, weight=1)
master.grid_rowconfigure(0, weight=1)
master.grid_rowconfigure(1, weight=0)

master.mainloop()
</snippet></ROW><ROW><id>10123312</id><snippet>CodeType</snippet></ROW><ROW><id>10123312</id><snippet>co_kwonlyargcount</snippet></ROW><ROW><id>10124097</id><snippet>class Zoo:
    def __init__(self,alist=None):
        self.animals = alist or []

    def __len__(self):
        return len(self.animals)

    def add(self,a):
        self.animals.append(a)
</snippet></ROW><ROW><id>10124165</id><snippet>pool_classes_by_scheme = {                                                        
    'http': HTTPConnectionPool,                                                   
    'https': HTTPSConnectionPool,                                              
}                                                                                 
</snippet></ROW><ROW><id>10124616</id><snippet>datetime</snippet></ROW><ROW><id>10124616</id><snippet>varchar</snippet></ROW><ROW><id>10124616</id><snippet>select convert(varchar(20),event_time,120) from event_detail;
</snippet></ROW><ROW><id>10124616</id><snippet>select event_time from event_detail;
</snippet></ROW><ROW><id>10124616</id><snippet>event_time</snippet></ROW><ROW><id>10124616</id><snippet>datetime</snippet></ROW><ROW><id>10124783</id><snippet>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd', 'e', 'f']
&gt;&gt;&gt; zip(*[iter(l)]*2)
[('a', 'b'), ('c', 'd'), ('e', 'f')]
</snippet></ROW><ROW><id>10124783</id><snippet>zip</snippet></ROW><ROW><id>10124783</id><snippet>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd', 'e', 'f','g']
&gt;&gt;&gt; zip(*[iter(l)]*2)
[('a', 'b'), ('c', 'd'), ('e', 'f')]
</snippet></ROW><ROW><id>10125279</id><snippet>"//div[@class='accordionContainer']/div[@class='accordion'][1]/div[@class='accordionContent' and contains(@style, 'block')]"
</snippet></ROW><ROW><id>10125279</id><snippet>"//div[@class='accordionContainer']/div[1]/div[contains(@style, 'block')]"
</snippet></ROW><ROW><id>10125594</id><snippet>itertools</snippet></ROW><ROW><id>10125594</id><snippet>&gt;&gt;&gt; part_iter = iter(part_list)
&gt;&gt;&gt; part_in, part_out = itertools.tee(part_iter)
&gt;&gt;&gt; in_main = (p for p in part_in if p in main_list)
&gt;&gt;&gt; out_main = (p for p in part_out if p not in main_list)
</snippet></ROW><ROW><id>10125594</id><snippet>&gt;&gt;&gt; list(in_main)
[4, 1]
&gt;&gt;&gt; list(out_main)
[5, 2, 7]
</snippet></ROW><ROW><id>10125594</id><snippet>in_main</snippet></ROW><ROW><id>10125594</id><snippet>out_main</snippet></ROW><ROW><id>10125594</id><snippet>tee</snippet></ROW><ROW><id>10125594</id><snippet>&gt;&gt;&gt; main_set = set(main_list)
&gt;&gt;&gt; in_main = []
&gt;&gt;&gt; out_main = []
&gt;&gt;&gt; for p in part_list:
...     (in_main if p in main_set else out_main).append(p)
... 
&gt;&gt;&gt; in_main
[4, 1]
&gt;&gt;&gt; out_main
[5, 2, 7]
</snippet></ROW><ROW><id>10125594</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>10125594</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; in_out = collections.defaultdict(list)
&gt;&gt;&gt; for p in part_list:
...     in_out[p in main_list].append(p)
... 
&gt;&gt;&gt; in_out
defaultdict(&lt;type 'list'&gt;, {False: [5, 2, 7], True: [4, 1]})
</snippet></ROW><ROW><id>10125602</id><snippet>random.sample()</snippet></ROW><ROW><id>10125602</id><snippet>&gt;&gt;&gt; d = dict.fromkeys(range(100))
&gt;&gt;&gt; keys = random.sample(d, 10)
&gt;&gt;&gt; keys
[52, 3, 10, 92, 86, 42, 99, 73, 56, 23]
&gt;&gt;&gt; values = [d[k] for k in keys]
</snippet></ROW><ROW><id>10125602</id><snippet>d.items()</snippet></ROW><ROW><id>10125609</id><snippet>create trigger example_tcn_trigger
  after delete on example
  for each row execute procedure triggered_change_notification();
</snippet></ROW><ROW><id>10125692</id><snippet>mkfifo batch_control
</snippet></ROW><ROW><id>10125692</id><snippet>while True:
    fd = file("batch_control", "r")
    for cmd in fd:
        print("New command [%s]" % cmd[:-1])
    fd.close()
</snippet></ROW><ROW><id>10125692</id><snippet>echo</snippet></ROW><ROW><id>10125692</id><snippet>$ echo "newsize 800" &gt;batch_control
$ echo "newjob /bin/ps" &gt;batch_control
</snippet></ROW><ROW><id>10125692</id><snippet>New command [newsize 800]
New command [newjob /bin/ps]
</snippet></ROW><ROW><id>10125706</id><snippet>class SerialReader(object):
    def __init__(self, source):
        super(SerialReader, self).__init__()
        self.source = source

    def next(self):
        """Provide next piece of data from the serial source."""
        # If we have no more data, we have to raise StopIteration exception
        if self.source.at_end():
            raise StopIteration
        else:
            return self.source.read()

    def __iter__(self):
        return self

reader = SerialReader(some_serial_source)

for data in reader:
    do_something_with_data(data)
</snippet></ROW><ROW><id>10125706</id><snippet>sample = [data for data in serial_reader]</snippet></ROW><ROW><id>10125706</id><snippet>list(serial_reader)</snippet></ROW><ROW><id>10125865</id><snippet>swig -python -c++ DownloaderEngine.i
cl /LD /W4 /Fe_Dnld.pyd /Ic:\Python27\include downloaderEngine_wrap.cxx -link /LIBPATH:c:\Python27\libs DownloaderEngine.lib
</snippet></ROW><ROW><id>10125865</id><snippet>_Dnld.pyd</snippet></ROW><ROW><id>10125865</id><snippet>Dnld.py</snippet></ROW><ROW><id>10125865</id><snippet>import _Dnld</snippet></ROW><ROW><id>10125865</id><snippet>import Dnld</snippet></ROW><ROW><id>10125865</id><snippet>&gt;&gt;&gt; import Dnld
&gt;&gt;&gt; engine = Dnld.CDownloaderEngine()
&gt;&gt;&gt; result = engine.OpenPort(...)
</snippet></ROW><ROW><id>10125865</id><snippet>&gt;&gt;&gt; import Dnld
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: dynamic module does not define init function (initDnld)
</snippet></ROW><ROW><id>10125968</id><snippet>data = []
parstyle = ParagraphStyle(name='Title', fontName='Helvetica', fontSize=11, alignment=0)

while mySelectedGroups:
    selectedGroups_desc = 'Community ID:'+ '&lt;i&gt;' + mySelectedGroups.Community_ID + '&lt;\i&gt;'+ 'Organisation Name :' + mySelectedGroups.Organisation_Name + '&lt;br&gt;'
    p = Paragraph(selectedGroups_desc, parstyle)
    data.append(p)
    #print data

    mySelectedGroups = mySelGroupsCursor.next()    
parts.append(data)
</snippet></ROW><ROW><id>10125968</id><snippet>from reportlab.platypus import ListFlowable, ListItem
from reportlab.lib.styles import getSampleStyleSheet
styles = getSampleStyleSheet()
style = styles["Normal"]
t = ListFlowable(
[
Paragraph("Item no.1", style),
ListItem(Paragraph("Item no. 2", style),bulletColor="green",value=7),
ListFlowable(
                [
                Paragraph("sublist item 1", style),
                ListItem(Paragraph('sublist item 2', style),bulletColor='red',value='square')
                ],
                bulletType='bullet',
                start='square',
                ),
Paragraph("Item no.4", style),
],
bulletType='i'
)
</snippet></ROW><ROW><id>10126121</id><snippet>i</snippet></ROW><ROW><id>10126121</id><snippet>for</snippet></ROW><ROW><id>10126121</id><snippet>_</snippet></ROW><ROW><id>10126121</id><snippet>dummy</snippet></ROW><ROW><id>10126273</id><snippet>OSError: [Errno 2] No such file or directory</snippet></ROW><ROW><id>10126273</id><snippet>shell=True</snippet></ROW><ROW><id>10126273</id><snippet>shell=False</snippet></ROW><ROW><id>10126273</id><snippet>"python '/root/my_script.py'"</snippet></ROW><ROW><id>10126273</id><snippet>OSError</snippet></ROW><ROW><id>10126273</id><snippet>p = subprocess.Popen(
    "python '/root/my_script.py'", 
    stdout=subprocess.PIPE, stderr=subprocess.PIPE
)
</snippet></ROW><ROW><id>10126273</id><snippet>p = subprocess.Popen(
    ["python", "'/root/my_script.py'"], 
    stdout=subprocess.PIPE, stderr=subprocess.PIPE
)
</snippet></ROW><ROW><id>10126273</id><snippet>p = subprocess.Popen(
    "python '/root/my_script.py'".split(), 
     stdout=subprocess.PIPE, stderr=subprocess.PIPE
)
</snippet></ROW><ROW><id>10126273</id><snippet>p = subprocess.Popen(
    "python '/root/my_script.py'", shell=True,
    stdout=subprocess.PIPE, stderr=subprocess.PIPE
)
</snippet></ROW><ROW><id>10126273</id><snippet>read a csv FILE</snippet></ROW><ROW><id>10126273</id><snippet>with open('my_list.csv', 'rb') as fp:
    my_data_list = [row for row in csv.reader(fp)]
</snippet></ROW><ROW><id>10126273</id><snippet>executes COMMAND on fourth (vertical) column of FILE</snippet></ROW><ROW><id>10126273</id><snippet>the COMMAND prints</snippet></ROW><ROW><id>10126273</id><snippet>loop until first empty row of FILE</snippet></ROW><ROW><id>10126273</id><snippet>for row in my_data_list:
    command = row[3] #&lt;- 4th column is index 3, 1st is 0
    p = Popen(command.split(), stdout=PIPE, stderr=STDOUT) #&lt;- stderr to stdout
    stdout, empty = p.communicate()
    print stdout
</snippet></ROW><ROW><id>10126273</id><snippet>read each line for HEALTHY (from COMMAND)</snippet></ROW><ROW><id>10126273</id><snippet>if multiple lines of HEALTHY and all do not equal Yes, HEALTHY equals "No"</snippet></ROW><ROW><id>10126273</id><snippet>if HEALTHY is not found on any lines, HEALTHY equals "Error Scanning"</snippet></ROW><ROW><id>10126273</id><snippet>write HEALTHY on new fifth column to NEW_FILE with all five columns</snippet></ROW><ROW><id>10126273</id><snippet>if 'HEALTHY:No' in stdout:
    writer.writerow(row + ['No'])
elif 'HEATHLY:Yes' in stdout:
    writer.writerow(row + ['Yes'])
else: 
    writer.writerow(row + ['Error Scanning'])
</snippet></ROW><ROW><id>10126273</id><snippet>import csv
from subprocess import Popen, PIPE, STDOUT

with open('my_list.csv', 'rb') as incsv:
    with open('new_data.csv', 'wb') as outcsv:
        reader = csv.reader(incsv)
        writer = csv.writer(outcsv)

        for row in reader:
            p = Popen(row[3].split(), stdout=PIPE, stderr=STDOUT)
            stdout, empty = p.communicate()

            print 'Command: %s\nOutput: %s\n' % (row[3], stdout)

            if 'HEALTHY:No' in stdout:
                writer.writerow(row + ['No'])
            elif 'HEATHLY:Yes' in stdout:
                writer.writerow(row + ['Yes'])
            else: 
                writer.writerow(row + ['Error Scanning'])
</snippet></ROW><ROW><id>10126273</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>10126273</id><snippet>import csv
from subprocess import Popen, PIPE, STDOUT

incsv = open('my_list.csv', 'rb')
try:
    reader = csv.reader(incsv)
    outcsv = open('new_data.csv', 'wb')
    try:    
        writer = csv.writer(outcsv)

        for row in reader:
            p = Popen(row[3].split(), stdout=PIPE, stderr=STDOUT)
            stdout, empty = p.communicate()

            print 'Command: %s\nOutput: %s\n' % (row[3], stdout)

            if 'HEALTHY:No' in stdout:
                writer.writerow(row + ['No'])
            elif 'HEATHLY:Yes' in stdout:
                writer.writerow(row + ['Yes'])
            else: 
                writer.writerow(row + ['Error Scanning'])
    finally:
        outcsv.close()
finally:
    incsv.close()
</snippet></ROW><ROW><id>10126478</id><snippet>str(next(input))
</snippet></ROW><ROW><id>10126511</id><snippet>next()</snippet></ROW><ROW><id>10126716</id><snippet>True</snippet></ROW><ROW><id>10126716</id><snippet>False</snippet></ROW><ROW><id>10126716</id><snippet>if not loggedDocument</snippet></ROW><ROW><id>10126716</id><snippet>if loggedDocument == False</snippet></ROW><ROW><id>10126716</id><snippet>println</snippet></ROW><ROW><id>10126716</id><snippet>print()</snippet></ROW><ROW><id>10126777</id><snippet>:</snippet></ROW><ROW><id>10126777</id><snippet>else</snippet></ROW><ROW><id>10126777</id><snippet>input ("Convert to Celsius or Fahrenheit?")
</snippet></ROW><ROW><id>10126777</id><snippet>raw_input ("Convert to Celsius or Fahrenheit?")
</snippet></ROW><ROW><id>10126777</id><snippet>input()</snippet></ROW><ROW><id>10126777</id><snippet>raw_input</snippet></ROW><ROW><id>10126777</id><snippet>c</snippet></ROW><ROW><id>10126777</id><snippet>input()</snippet></ROW><ROW><id>10126777</id><snippet>c</snippet></ROW><ROW><id>10126777</id><snippet>c</snippet></ROW><ROW><id>10126777</id><snippet>raw_input</snippet></ROW><ROW><id>10126777</id><snippet>output</snippet></ROW><ROW><id>10126777</id><snippet>print "That's " + str(output) + " degrees Celsius!"
</snippet></ROW><ROW><id>10126777</id><snippet>print "That's %d degrees Celsius!" % output
</snippet></ROW><ROW><id>10126794</id><snippet>class Foo {
};

void bar(const Foo&amp;);
</snippet></ROW><ROW><id>10126794</id><snippet>#include "mylib.h"
#include &lt;iostream&gt;

void bar(const Foo&amp; f) {
  std::cout &lt;&lt; &amp;f &lt;&lt; std::endl;
}
</snippet></ROW><ROW><id>10126794</id><snippet>%module mylib

// Make mylib_wrap.cxx include this header:
%{
#include "mylib.h"
%}

// Make SWIG look into this header:
%include "mylib.h"
</snippet></ROW><ROW><id>10126809</id><snippet>object_1</snippet></ROW><ROW><id>10126809</id><snippet>object_2</snippet></ROW><ROW><id>10126809</id><snippet>objects</snippet></ROW><ROW><id>10126809</id><snippet>props = &lt;some list here&gt;
objects = [MyClass(property=foo, property2=prop) for prop in props]
for obj in objects:
    obj.do_stuff(variable=foobar)
</snippet></ROW><ROW><id>10126837</id><snippet>PRAGMA foreign_keys=ON;</snippet></ROW><ROW><id>10126857</id><snippet>import mytools
</snippet></ROW><ROW><id>10126857</id><snippet>except DirectionError:
</snippet></ROW><ROW><id>10126857</id><snippet>except mytools.DirectionError:
</snippet></ROW><ROW><id>10126857</id><snippet>from mytools import func1
</snippet></ROW><ROW><id>10126857</id><snippet>from mytools import func1, DirectionError
</snippet></ROW><ROW><id>10127028</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>10127043</id><snippet>points = [partial
          for partial in partials
          for point in partials[partial]
          if point[0] == time]
</snippet></ROW><ROW><id>10127349</id><snippet>declarative</snippet></ROW><ROW><id>10127349</id><snippet>run_script</snippet></ROW><ROW><id>10127349</id><snippet>from sqlalchemy import create_engine, Column, Integer
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

def create_path(filename):
    import os
    fn = os.path.abspath(os.path.join(os.path.dirname(__file__), 'sqlite_files', filename))
    return fn

def run_script(filename):
    path_to_file = create_path(filename)

    engine = create_engine('sqlite:///{path}'.format(path=path_to_file), echo=True)
    Session = sessionmaker(bind=engine)
    Base = declarative_base(bind=engine)

    # object model
    class MyTable(Base):
        __tablename__ = 'my_table'
        __table_args__ = {'autoload': True}
        id = Column(Integer, primary_key=True) # Monkey patching the id column as primary key

    # script itself
    session = Session()
    for row in session.query(MyTable).all():
        print row
    return "Stop!"

def main(argv):
    assert argv, "must specify a database file name"
    run_script(argv[0])

if __name__ == '__main__':
    import sys
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>10127421</id><snippet>{% for final_links in all_links %}
   {{ final_links.attrMap.href }}
{% endfor %}
</snippet></ROW><ROW><id>10127421</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as BS
&gt;&gt;&gt; start = urllib.urlopen('http://blog.tkbe.org')
&gt;&gt;&gt; soup = BS(start)
&gt;&gt;&gt; all_links = soup.findAll('a', href=True)
&gt;&gt;&gt; first = all_links[0]
&gt;&gt;&gt; first
&lt;a href="http://blog.tkbe.org/" title="TKBE" rel="home"&gt;TKBE&lt;/a&gt;
&gt;&gt;&gt; dir(first)
[..., 'attrMap', 'attrs', ...]
&gt;&gt;&gt; first.attrs
[(u'href', u'http://blog.tkbe.org/'), (u'title', u'TKBE'), (u'rel', u'home')]
&gt;&gt;&gt; first.attrMap
{u'href': u'http://blog.tkbe.org/', u'rel': u'home', u'title': u'TKBE'}
</snippet></ROW><ROW><id>10127421</id><snippet>all_links = [link.attrMap['href'] for link in all_links]
</snippet></ROW><ROW><id>10127465</id><snippet>Web Framework &lt;-&gt; Glue &lt;-&gt; Web Server
</snippet></ROW><ROW><id>10127465</id><snippet>Django &lt;-&gt; fcgi &lt;-&gt; Apache
Flask &lt;-&gt; uWSGI &lt;-&gt; Nginx
</snippet></ROW><ROW><id>10127675</id><snippet>alpha</snippet></ROW><ROW><id>10127675</id><snippet>imshow</snippet></ROW><ROW><id>10127675</id><snippet>img3 = plt.imshow(zvals2, interpolation='nearest', cmap=cmap2, origin='lower', alpha=0.6)</snippet></ROW><ROW><id>10127675</id><snippet>from matplotlib.colors import colorConverter
import matplotlib.pyplot as plt
import numpy as np
import matplotlib as mpl

# create dummy data
zvals = np.ones((100,100))# np.random.rand(100,100)*10-5
zvals2 = np.random.rand(100,100)*10-5

# generate the colors for your colormap
color1 = colorConverter.to_rgba('white')
color2 = colorConverter.to_rgba('black')

# make the colormaps
cmap1 = mpl.colors.LinearSegmentedColormap.from_list('my_cmap',['green','blue'],256)
cmap2 = mpl.colors.LinearSegmentedColormap.from_list('my_cmap2',[color1,color2],256)

cmap2._init() # create the _lut array, with rgba values

# create your alpha array and fill the colormap with them.
# here it is progressive, but you can create whathever you want
alphas = np.linspace(0, 0.8, cmap2.N+3)
cmap2._lut[:,-1] = alphas

img2 = plt.imshow(zvals, interpolation='nearest', cmap=cmap1, origin='lower')
img3 = plt.imshow(zvals2, interpolation='nearest', cmap=cmap2, origin='lower')

plt.show()
</snippet></ROW><ROW><id>10127985</id><snippet>PyErr_SetObject()</snippet></ROW><ROW><id>10127985</id><snippet>PyErr_Restore()</snippet></ROW><ROW><id>10127985</id><snippet>Py_XDECREF()</snippet></ROW><ROW><id>10128141</id><snippet>from datetime import date, timedelta

coll = [['Bill', date(2011,1,1)],
        ['Bill', date(2011,1,2)],
        ['Bill', date(2011,1,3)],
        ['Bill', date(2011,1,5)],
        ['Bill', date(2011,1,7)]]

res = []
group = [coll[0]]
i = 1

while i &lt; len(coll):
    row = coll[i]
    last_in_group = group[-1]

    # use your isBeside() function here...
    if row[1] - last_in_group[1] == timedelta(days=1):
        # consecutive, append to current group..
        group.append(row)
    else:
        # not consecutive, start new group.
        res.append(group)
        group = [row]
    i += 1

res.append(group)

for group in res:
    for row in group:
        for item in row:
            print item,
        print len(group)
</snippet></ROW><ROW><id>10128141</id><snippet>Bill 2011-01-01 3
Bill 2011-01-02 3
Bill 2011-01-03 3
Bill 2011-01-05 1
Bill 2011-01-07 1
</snippet></ROW><ROW><id>10128317</id><snippet>import urllib
url = 'https://www.google.com/'
page = urllib.urlopen(url)
print page.read()    
#page.read is the url's source code, so you would print the source  code here. 
</snippet></ROW><ROW><id>10128317</id><snippet>page = page.read()
file = open('url.html', 'w')
file.writelines(page)
file.close()
</snippet></ROW><ROW><id>10128390</id><snippet>user_types = models.ManyToManyField(UserType, related_name='profiles')
</snippet></ROW><ROW><id>10128390</id><snippet>return self.profiles.count()
</snippet></ROW><ROW><id>10128505</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>10128830</id><snippet>#!/usr/bin/env python
import os
import sqlite3
import pwd

_cookieName = "preferredLanguage"

def getPreferredLanguageFromCookieDB():
    retval="en-US"
    cookieDBFilename = os.path.join(pwd.getpwuid(1000).pw_dir, ".config/google-chrome/Default/Cookies")
    if os.path.isfile(cookieDBFilename):
        connection = sqlite3.connect(cookieDBFilename)
        querier = connection.cursor()
        numCookiesMatching = int(querier.execute('SELECT COUNT(*) FROM cookies WHERE (host_key="127.0.0.1" or host_key="localhost") and name="%s"' % (_cookieName)).fetchone()[0])
        if numCookiesMatching == 1:
            retval = querier.execute('SELECT value FROM cookies WHERE (`cookies`.`host_key`="127.0.0.1" or `cookies`.`host_key`="localhost") and `cookies`.`name` = "%s"' % (_cookieName)).fetchone()[0]
        elif numCookiesMatching == 0:
            print("::getPreferredLanguageFromCookieDB &gt; No cookie for '%s' found. Assuming wizard hasn't run yet, which is weird, but not critical" % (_cookieName))
            retval="en-US"
        else:
            raise KeyError("Found %s cookies matching %s in file %s. This shouldn't have happened" % (numCookiesMatching, _cookieName, cookieDBFilename))
            retval=None
    else:
        print("::getPreferredLanguageFromCookieDB &gt; Cookie 'db' (actually, file) %s doesn't exist" % (cookieDBFilename))
        retval="en-US"

    return retval


if __name__ == "__main__":
    print "Prefered language: %s" % getPreferredLanguageFromCookieDB()
</snippet></ROW><ROW><id>10128830</id><snippet>preferredLanguage</snippet></ROW><ROW><id>10128830</id><snippet>localhost</snippet></ROW><ROW><id>10128830</id><snippet>127.0.0.1</snippet></ROW><ROW><id>10128830</id><snippet>preferredLanguage</snippet></ROW><ROW><id>10128983</id><snippet>urlopen</snippet></ROW><ROW><id>10128983</id><snippet>geturl</snippet></ROW><ROW><id>10128983</id><snippet>import urllib2
import re

url = 'http://anidb.net/perl-bin/animedb.pl?show=animelist&amp;adb.search=%22Cowboy%20Bebop%22&amp;do.search=search'
headers = {"User-agent": "Mozilla/5.0"}
request = urllib2.Request(url, None, headers)
result = urllib2.urlopen(request)
r =  re.search("aid=(\d+)", result.geturl())
print r.group(1)
</snippet></ROW><ROW><id>10129004</id><snippet>phantomjs</snippet></ROW><ROW><id>10129004</id><snippet>phantomjs file.js
</snippet></ROW><ROW><id>10129004</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>10129004</id><snippet>import os
import os.path
import hashlib
import subprocess
from BeautifulSoup import BeautifulSoup

PHANTOM_DIR = os.path.join(os.getcwd(), 'phantom')

try:
    os.stat(PHANTOM_DIR)
except OSError:
    os.mkdir(PHANTOM_DIR)

PHANTOM_TEMPLATE = """var page = require('webpage').create();  
page.open('%(url)s', function (status) {
    if (status !== 'success') {
        console.log('Unable to access network');
    } else {
        var p = page.evaluate(function () {
            return document.getElementsByTagName('html')[0].innerHTML
        });
        console.log(p);
    }
    phantom.exit();
});"""

def get_executed_soup(url):
    """ Returns a BeautifulSoup object with the parsed HTML of the url
        passed, after executing all the scripts in it. """
    file_id = hashlib.md5(url).hexdigest()
    PHANTOM_ABS_PATH = os.path.join(PHANTOM_DIR, 'phantom%s.js' % file_id)
    OUTPUT_ABS_PATH = os.path.join(PHANTOM_DIR, 'output%s.html' % file_id)
    phantom = open(PHANTOM_ABS_PATH, 'w')
    phantom.write(PHANTOM_TEMPLATE % {'url': url})
    phantom.close()
    cmd = 'phantomjs ' + PHANTOM_ABS_PATH + ' &gt; ' + OUTPUT_ABS_PATH
    stdout, stderr = subprocess.Popen(cmd, shell=True).communicate()
    output = open(OUTPUT_ABS_PATH, 'r')
    soup = BeautifulSoup(output.read())
    output.close()
    os.remove(PHANTOM_ABS_PATH)
    os.remove(OUTPUT_ABS_PATH)
    return soup
</snippet></ROW><ROW><id>10129199</id><snippet>def removeslash(method):
    """Use this decorator to remove trailing slashes from the request path.

    For example, a request to '/foo/' would redirect to '/foo' with this
    decorator. Your request handler mapping should use a regular expression
    like r'/foo/*' in conjunction with using the decorator.
    """
    @functools.wraps(method)
    def wrapper(self, *args, **kwargs):
        if self.request.path.endswith("/"):
            if self.request.method == "GET":
                uri = self.request.path.rstrip("/")
                if self.request.query: uri += "?" + self.request.query
                self.redirect(uri)
                return
            return self.status(404)
        return method(self, *args, **kwargs)
    return wrapper
</snippet></ROW><ROW><id>10129199</id><snippet>class MyHandler(RequestHandler):
    @removeslash
    def get(self):
        # your code
</snippet></ROW><ROW><id>10129217</id><snippet>_</snippet></ROW><ROW><id>10129217</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>10129310</id><snippet>import os, subproccess, tempfile
f, fname = tempfile.mkstemp()
f.write('default')
f.close()
cmd = os.environ.get('EDITOR', 'vi') + ' ' + fname
subprocess.call(cmd, shell=True)
with open(fname, 'r') as f:
    #read file
os.unlink(fname)
</snippet></ROW><ROW><id>10129458</id><snippet>"boo"  : random.choice(["Winter is coming...","SURPRISE!","Mazel tov!"]),
</snippet></ROW><ROW><id>10129458</id><snippet>known_commands = {
    "boo" : "SURPRISE!",
    "xyzzy" : xyzzy,
}
</snippet></ROW><ROW><id>10129458</id><snippet>known_commands = {
    "boo"  : lambda: random.choice(["Winter is coming...","SURPRISE!","Mazel tov!"]),
    "xyzzy": xyzzy,
}
</snippet></ROW><ROW><id>10129479</id><snippet>dateutil.parser</snippet></ROW><ROW><id>10129479</id><snippet>from dateutil.parser import parse
parse('8th April')
</snippet></ROW><ROW><id>10129479</id><snippet>from dateutil.parser import parse
from datetime import datetime

d = parse('8th April')
if (d - datetime.now()).days &lt;= 0:
    d = datetime.date(d.year+1, d.month, d.day)
</snippet></ROW><ROW><id>10129484</id><snippet>from lxml import etree

source = """
&lt;root&gt;
&lt;parent&gt;
    &lt;ID&gt;1&lt;/ID&gt;
    &lt;child1&gt;Value1&lt;/child1&gt;
    &lt;child2&gt;value11&lt;/child2&gt;
    &lt;child3&gt;
       &lt;subchild&gt;value111&lt;/subchild&gt;
    &lt;/child3&gt;
&lt;/parent&gt;
&lt;parent&gt;
    &lt;ID&gt;2&lt;/ID&gt;
    &lt;child1&gt;value2&lt;/child1&gt;
    &lt;child2&gt;value22&lt;/child2&gt;
    &lt;child2&gt;value333&lt;/child2&gt;
&lt;/parent&gt;
&lt;parent&gt;
    &lt;ID&gt;3&lt;/ID&gt;
    &lt;child1&gt;value3&lt;/child1&gt;
    &lt;child2&gt;value33&lt;/child2&gt;
&lt;/parent&gt;
&lt;parent&gt;
    &lt;ID&gt;4&lt;/ID&gt;
    &lt;child1&gt;value4&lt;/child1&gt;
    &lt;child2&gt;value44&lt;/child2&gt;
&lt;/parent&gt;
&lt;/root&gt;
"""

document = etree.fromstring(source)
inserts = []

id_number = 3

for parent in document.findall('parent'):
    insert = {}
    cont = 0
    for element in parent.iterdescendants():
        if element.tag == 'ID':
            if element.text == str(id_number):
                cont = 1
        if element.getchildren() == []:
            insert[element.tag] = element.text
    if cont:
        inserts.append(insert)

print inserts
</snippet></ROW><ROW><id>10129652</id><snippet>key=lambda d:(d['rank']==0, d['rank'])
</snippet></ROW><ROW><id>10129652</id><snippet>key=lambda d:d['rank'] if d['rank']!=0 else float('inf')
</snippet></ROW><ROW><id>10129652</id><snippet>&gt;&gt;&gt; sorted([0,0,0,1,2,3,4], key=lambda x:(x==0, x))
[1, 2, 3, 4, 0, 0]

&gt;&gt;&gt; sorted([0,0,0,1,2,3,4], key=lambda x:x if x!=0 else float('inf'))
[1, 2, 3, 4, 0, 0]
</snippet></ROW><ROW><id>10129652</id><snippet>itemgetter('rank')</snippet></ROW><ROW><id>10129652</id><snippet>lambda x: x['rank']</snippet></ROW><ROW><id>10129652</id><snippet>def getRank(myDict):
    return myDict['rank']
</snippet></ROW><ROW><id>10129652</id><snippet>[...]</snippet></ROW><ROW><id>10129652</id><snippet>someArray[n]</snippet></ROW><ROW><id>10129652</id><snippet>[start:end]</snippet></ROW><ROW><id>10129652</id><snippet>[start:end:step]</snippet></ROW><ROW><id>10129652</id><snippet>key=</snippet></ROW><ROW><id>10129652</id><snippet>cmp=</snippet></ROW><ROW><id>10129652</id><snippet>key</snippet></ROW><ROW><id>10129652</id><snippet>cmp</snippet></ROW><ROW><id>10129652</id><snippet>cmp</snippet></ROW><ROW><id>10129652</id><snippet>a</snippet></ROW><ROW><id>10129652</id><snippet>b</snippet></ROW><ROW><id>10129652</id><snippet>a&lt;b</snippet></ROW><ROW><id>10129652</id><snippet>a&gt;b</snippet></ROW><ROW><id>10129652</id><snippet>a==b</snippet></ROW><ROW><id>10129652</id><snippet>cmp=</snippet></ROW><ROW><id>10129652</id><snippet>(True,1)&lt;(True,2)&lt;(True,3)&lt;...</snippet></ROW><ROW><id>10129652</id><snippet>(False,1)&lt;(False,2)&lt;...</snippet></ROW><ROW><id>10129652</id><snippet>(False,*)&lt;(True,*)</snippet></ROW><ROW><id>10129652</id><snippet>__lt__</snippet></ROW><ROW><id>10129652</id><snippet>__gt__</snippet></ROW><ROW><id>10129652</id><snippet>__eq__</snippet></ROW><ROW><id>10129652</id><snippet>__ne__</snippet></ROW><ROW><id>10129652</id><snippet>__gt__</snippet></ROW><ROW><id>10129652</id><snippet>__ge__</snippet></ROW><ROW><id>10129652</id><snippet>__eq__</snippet></ROW><ROW><id>10129652</id><snippet>@functools.total_ordering</snippet></ROW><ROW><id>10129652</id><snippet>x=Record(name='Joe', rank=12)</snippet></ROW><ROW><id>10129652</id><snippet>y=Record(...)</snippet></ROW><ROW><id>10129652</id><snippet>x&lt;y</snippet></ROW><ROW><id>10129652</id><snippet>sorted(...)</snippet></ROW><ROW><id>10129652</id><snippet>&lt;</snippet></ROW><ROW><id>10129652</id><snippet>&lt;</snippet></ROW><ROW><id>10129652</id><snippet>'rank':...</snippet></ROW><ROW><id>10129652</id><snippet>'rank':0</snippet></ROW><ROW><id>10129652</id><snippet>'rank' in d</snippet></ROW><ROW><id>10129652</id><snippet>key=lambda d: (not 'rank' in d, d['rank'])
</snippet></ROW><ROW><id>10129652</id><snippet>key=lambda d: d.get('rank', float('inf'))
</snippet></ROW><ROW><id>10129652</id><snippet>cmp</snippet></ROW><ROW><id>10129673</id><snippet>namesWithE = family.find({name : {$regex : 'E.*'}}) 
</snippet></ROW><ROW><id>10130076</id><snippet>class NavigationToolbarCustom(NavigationToolbar):
zoom_changed = pyqtSignal(float, float, name='zoomChanged')
def __init__(self, canvas, parent):
    NavigationToolbar.__init__(self, canvas, parent)
    #super(NavigationToolbarCustom, self).__init__(self, canvas, parent)
def draw(self):
    super(NavigationToolbarCustom,self).draw()
    if self._xypress == None:
         home_view = self._views.home()
         Xmin,Xmax = home_view[0][0:2]
    else:
        lastx, lasty, a, ind, lim, trans = self._xypress[0]
        Xmin,Xmax=a.get_xlim()
    self.zoom_changed.emit(Xmin,Xmax)
</snippet></ROW><ROW><id>10130080</id><snippet>--processes</snippet></ROW><ROW><id>10130080</id><snippet>--with-xunit</snippet></ROW><ROW><id>10130080</id><snippet>--processes</snippet></ROW><ROW><id>10130115</id><snippet>import datetime
import dateutil

def parse(date_string):
    result = dateutil.parser.parse(date_string, default=datetime.datetime(1581, 1, 1))
    if result.year == 1581:
        now = datetime.datetime.now()
        result = result.replace(year=now.year)
        if result &lt; now:
            result = result.replace(year=now.year + 1)
    return result

parse('8th April')
</snippet></ROW><ROW><id>10130181</id><snippet>konsole --hold -e /bin/sh -c "python -i hello.py"</snippet></ROW><ROW><id>10130198</id><snippet>myfunv({"key1": "value1", "key2": "value2"})
</snippet></ROW><ROW><id>10130198</id><snippet>myfunc(key1="value1", key2="value2")
</snippet></ROW><ROW><id>10130198</id><snippet>class MyFrame(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        &lt;more code here&gt;
</snippet></ROW><ROW><id>10130421</id><snippet>continue</snippet></ROW><ROW><id>10130421</id><snippet>f</snippet></ROW><ROW><id>10130421</id><snippet>for each_line in f:
   try:
       foo_line, bar_line = each_line.split(',')
   except ValueError:
       # "Too many/few values to unpack" meaning wrong number of commas!
       continue
   try:
       foo, bar = int(foo_line), int(bar_line)
   except ValueError:
       # "invalid literal for int()" meaning it wasn't digits
       continue
   foobar = FooBar(foo,bar)
   foobar_list.append(foobar)
</snippet></ROW><ROW><id>10130421</id><snippet>for each_line in f:
   try:
       foo_line, bar_line = each_line.split(',')
       foo, bar = int(foo_line), int(bar_line)
   except ValueError:
       # there was invalid input.
       continue
   foobar = FooBar(foo,bar)
   foobar_list.append(foobar)
</snippet></ROW><ROW><id>10130421</id><snippet># !!! BAD !!!
for each_line in f:
    try:
        each_line = each_line.split(',')
        foo = int(each_line[0])
        bar = int(each_line[1]
        foobar = FooBar(foo,bar)
        foobar_list.append(foobar)
    except ValueError:
        continue
</snippet></ROW><ROW><id>10130421</id><snippet>FooBar()</snippet></ROW><ROW><id>10130421</id><snippet>foobar_list.append()</snippet></ROW><ROW><id>10130421</id><snippet>try:</snippet></ROW><ROW><id>10130506</id><snippet>__hash__</snippet></ROW><ROW><id>10130506</id><snippet>__hash__</snippet></ROW><ROW><id>10130506</id><snippet>__hash__</snippet></ROW><ROW><id>10130966</id><snippet>Request</snippet></ROW><ROW><id>10130966</id><snippet>Request</snippet></ROW><ROW><id>10130966</id><snippet>Request</snippet></ROW><ROW><id>10130966</id><snippet>Response</snippet></ROW><ROW><id>10130966</id><snippet>BaseRequest</snippet></ROW><ROW><id>10130966</id><snippet>BaseResponse</snippet></ROW><ROW><id>10130966</id><snippet>BaseRequest</snippet></ROW><ROW><id>10130966</id><snippet>EnvironHeaders</snippet></ROW><ROW><id>10130966</id><snippet>EnvironHeaders</snippet></ROW><ROW><id>10130966</id><snippet>wsgiref.headers.Headers</snippet></ROW><ROW><id>10130966</id><snippet>wsgiref.headers.Headers</snippet></ROW><ROW><id>10130966</id><snippet>PEP 3333</snippet></ROW><ROW><id>10130966</id><snippet>PEP 3333</snippet></ROW><ROW><id>10130966</id><snippet>"Native" strings (which are always implemented using the type named str)
that are used for request/response headers and metadata
"Bytestrings" (which are implemented using the `bytes` type in Python 3,
and `str` elsewhere), that are used for the bodies of requests and
responses (e.g. POST/PUT input data and HTML page outputs).
</snippet></ROW><ROW><id>10130966</id><snippet>str</snippet></ROW><ROW><id>10130966</id><snippet>unicode</snippet></ROW><ROW><id>10130966</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>10130966</id><snippet>.decode('ascii')</snippet></ROW><ROW><id>10131215</id><snippet>Class(*x)
</snippet></ROW><ROW><id>10131274</id><snippet>'''
    HTTP/1.0 200 OK\r\n
    Content-Type:text/html\r\n'''
</snippet></ROW><ROW><id>10131274</id><snippet>(blank line)
(extra spaces)    HTTP/1.0 200 OK  
(blank line)
(extra spaces)    Content-Type:text/html
</snippet></ROW><ROW><id>10131274</id><snippet>from socket import *

serverPort = 12000
serverSocket = socket(AF_INET,SOCK_STREAM)
serverSocket.bind(('', serverPort))
serverSocket.listen(1)
print 'Server is now running...'
while 1:
    connectionSocket, addr = serverSocket.accept()
    connectionSocket.sendall("HTTP/1.0 200 OK\r\n"+
                             "Content-Type: text/html\r\n"+
                             "Connection: close\r\n"+
                             "\r\n"+
        """&lt;!DOCTYPE html&gt;
        &lt;head&gt;&lt;title&gt;Lab sign-up - AntonX Server&lt;/title&gt;&lt;/head&gt;
        &lt;h1&gt;Lab Sign-up&lt;/h1&gt;
        &lt;table&gt;
        &lt;form action=\"localhost:12000\" method=\"GET\"&gt;
        &lt;tr&gt;&lt;td&gt;Time&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1 PM&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\" name=\"time_1\"&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;2 PM&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\" name=\"time_2\"&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;3 PM&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\" name=\"time_3\"&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;4 PM&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\" name=\"time_4\"&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;5 PM&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\" name=\"time_5\"&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td colspan=\"2\"&gt;&lt;input type=\"submit\" name=\"submit\" value=\"Steal this spot!\"&gt;&lt;/tr&gt;
        &lt;/form&gt;&lt;/table&gt;
        &lt;/html&gt;\r\n
    """)
    connectionSocket.close()
</snippet></ROW><ROW><id>10131475</id><snippet>Popen.communicate</snippet></ROW><ROW><id>10131475</id><snippet>communicate</snippet></ROW><ROW><id>10131475</id><snippet>ls -l</snippet></ROW><ROW><id>10131475</id><snippet>hlds</snippet></ROW><ROW><id>10131475</id><snippet>out, error = hlds.communicate('quit')
</snippet></ROW><ROW><id>10131475</id><snippet>quit</snippet></ROW><ROW><id>10131475</id><snippet>hlds.stdout</snippet></ROW><ROW><id>10131475</id><snippet>hlds.stdin</snippet></ROW><ROW><id>10131475</id><snippet>hlds.stderr</snippet></ROW><ROW><id>10131666</id><snippet>words</snippet></ROW><ROW><id>10131666</id><snippet>print(infile.read() % tuple(words))
</snippet></ROW><ROW><id>10131666</id><snippet>words</snippet></ROW><ROW><id>10131666</id><snippet>dict</snippet></ROW><ROW><id>10131666</id><snippet>list</snippet></ROW><ROW><id>10131666</id><snippet>words = {
    'man' : 'Bill',
    'store' : 'bar',
    'drink' : 'beer',
    'owner' : 'bartender',
    'action' : 'drink',
    }

text = '''
{man} walks into a {store} and orders a {drink}.
The {owner} asks {man} what he would like to {action}
'''

print(text.format(**words))
</snippet></ROW><ROW><id>10131666</id><snippet>Bill walks into a bar and orders a beer.
The bartender asks Bill what he would like to drink
</snippet></ROW><ROW><id>10131862</id><snippet>source()</snippet></ROW><ROW><id>10131862</id><snippet>ttest_ind()</snippet></ROW><ROW><id>10131862</id><snippet>ttest_ind()</snippet></ROW><ROW><id>10131870</id><snippet>subcolors = {'darkblue': ['first', 'second'],
             'teal': ['first-teal', 'second-teal'],
             'pink': ['first-pink', 'second-pink'],
             # etc..
            }

for (color,value) in colors:
    print color #teal, pink, red, etc...
    for val in subcolors[color]:
        print val #first-teal, second-teal, first-pink, second-pink, etc...
</snippet></ROW><ROW><id>10131870</id><snippet>darkblue</snippet></ROW><ROW><id>10131870</id><snippet>darkblue = ['first', 'second']
teal = ['first-teal', 'second-teal']
pink = ['first-pink', 'second-pink']
# etc...

for (color,value) in colors:
    print color #teal, pink, red, etc...
    for val in locals()[color]:
        print val #first-teal, second-teal, first-pink, second-pink, etc...
</snippet></ROW><ROW><id>10132049</id><snippet>append</snippet></ROW><ROW><id>10132049</id><snippet>l.append(i)
</snippet></ROW><ROW><id>10132049</id><snippet>l = [i for i in range(10) if i % 3 == 0 or i % 5 == 0]
</snippet></ROW><ROW><id>10132085</id><snippet>&gt;&gt;&gt; myarr = np.array([[1],[2],[3],[2]])
&gt;&gt;&gt; (myarr != 2).nonzero()
(array([0, 2]), array([0, 0]))
&gt;&gt;&gt; myarr[(array([0, 2]), array([0, 0]))]
array([1, 3])
</snippet></ROW><ROW><id>10132085</id><snippet>&gt;&gt;&gt; myarr[array([0, 2])]
array([[1],
       [3]])
</snippet></ROW><ROW><id>10132085</id><snippet>&gt;&gt;&gt; myarr[myarr[:,0] != 2]
array([[1],
       [3]])
</snippet></ROW><ROW><id>10132085</id><snippet>&gt;&gt;&gt; myarr[(myarr != 2).nonzero()[0]]
array([[1],
       [3]])
</snippet></ROW><ROW><id>10132315</id><snippet>cmd1_parser.add_argument('--verbose', action='store_true', dest='cmd1_verbose')
</snippet></ROW><ROW><id>10132315</id><snippet>~ $ myscript --verbose command1 --verbose
Namespace(cmd1_verbose=True, command='command1', verbose=True)
</snippet></ROW><ROW><id>10132560</id><snippet>random.choice</snippet></ROW><ROW><id>10132560</id><snippet>import random
</snippet></ROW><ROW><id>10132560</id><snippet>dict</snippet></ROW><ROW><id>10132560</id><snippet>lists</snippet></ROW><ROW><id>10132560</id><snippet>which_list = random.choice(lists.keys())
</snippet></ROW><ROW><id>10132560</id><snippet>list</snippet></ROW><ROW><id>10132560</id><snippet>dict</snippet></ROW><ROW><id>10132560</id><snippet>item = random.choice(lists[which_list])
</snippet></ROW><ROW><id>10132560</id><snippet>import random

which_list, item = random.choice([(name, value) 
                                     for name, values in lists.iteritems() 
                                         for value in values])
</snippet></ROW><ROW><id>10132644</id><snippet>zip</snippet></ROW><ROW><id>10132644</id><snippet>map(lambda *row: list(row), *mult_list)
</snippet></ROW><ROW><id>10132644</id><snippet>map(list,zip(*mult_list))
</snippet></ROW><ROW><id>10132775</id><snippet>object</snippet></ROW><ROW><id>10132775</id><snippet>object</snippet></ROW><ROW><id>10132775</id><snippet>class C(A, B, object):
    pass
</snippet></ROW><ROW><id>10132775</id><snippet>C</snippet></ROW><ROW><id>10132775</id><snippet>__bases__</snippet></ROW><ROW><id>10132775</id><snippet>class FakeBase(object):
    pass

class C(FakeBase):
    pass

def c_factory():
    for base in (A, B):
        if base not in C.__bases__:
            C.__bases__ = (base,) + C.__bases__
    return C()
</snippet></ROW><ROW><id>10133383</id><snippet>multiprocessing</snippet></ROW><ROW><id>10133383</id><snippet>import sys

def myscript(iteration_number):
    xfile_name = "x%d.txt" % iteration_number
    yfile_name = "y%d.txt" % iteration_number
    with open(xfile_name, "w") as xf:
        with open(yfile_name, "w") as yf:
            ... whatever your script does goes here

def main(unused_command_line_args):
    for i in xrange(1000):
        myscript(i)
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>10133503</id><snippet>sys.argv</snippet></ROW><ROW><id>10133503</id><snippet>import sys
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-e")
parser.add_option("-g")

print sys.argv # unmodified
(options, args) = parser.parse_args()
print (options, args)

sys.argv = ['module.py','-e','42','-g','84'] # define your commandline arguments here

(options, args) = parser.parse_args()
print (options, args)
</snippet></ROW><ROW><id>10133503</id><snippet>argparse</snippet></ROW><ROW><id>10133847</id><snippet>re.findall()</snippet></ROW><ROW><id>10133847</id><snippet>re.findall('apples and (?:oranges|lemons)',text)
</snippet></ROW><ROW><id>10133847</id><snippet>(?:...)</snippet></ROW><ROW><id>10134140</id><snippet>Notice: Undefined variable</snippet></ROW><ROW><id>10134140</id><snippet>php &gt; echo $some_uninitialized_var;
PHP Notice:  Undefined variable: some_uninitialized_var in php shell code on line 1
php &gt; echo $some_uninitialized_var;
PHP Notice:  Undefined variable: some_uninitialized_var in php shell code on line 1
</snippet></ROW><ROW><id>10134140</id><snippet>NameError</snippet></ROW><ROW><id>10134140</id><snippet>NameError</snippet></ROW><ROW><id>10134140</id><snippet>&gt;&gt;&gt; print(some_uninitialized_var)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'some_uninitialized_var' is not defined

&gt;&gt;&gt; print(some_uninitialized_var)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'some_uninitialized_var' is not defined
</snippet></ROW><ROW><id>10134140</id><snippet>// PHP
$a_new_var = 12345;
// All is well...

# Python
a_new_var = 12345
# All is well...

// C
a_new_var = 12345;
// Crash! Horror! Compiler complains!
int a_new_var;
a_new_var = 12345;
// ok...
</snippet></ROW><ROW><id>10134188</id><snippet>def make(xy1,xy2):
count0=-1
for count1 in range(len(xy1)-2,count0,-2):
    for count2 in range(len(xy2)-2,count0,-2):
        if xy1[count1] in range(xy1[count2],xy2[count2]) and not (count1==count2):
            xy1=removed(xy1,count1)
            xy2=removed(xy2,count1)
return xy1,xy2
</snippet></ROW><ROW><id>10134212</id><snippet>class Point(object):
    # __init__ and __repr__ methods
    # ...
    def disttopoint(self, other):
        # do something using self and other to calculate distance to point
        # result = distance to point
        return result

    def isnear(self, other):
        if (self.disttopoint(other) &lt; epsilon):
            return True
        return False
</snippet></ROW><ROW><id>10134315</id><snippet>cos</snippet></ROW><ROW><id>10134315</id><snippet>sin</snippet></ROW><ROW><id>10134315</id><snippet>math.radians</snippet></ROW><ROW><id>10134335</id><snippet>"./path1/path2/path3" ./map.py | sort | ./red.py
</snippet></ROW><ROW><id>10134335</id><snippet>bash</snippet></ROW><ROW><id>10134335</id><snippet>./path1/path2/path3</snippet></ROW><ROW><id>10134335</id><snippet>./map.py</snippet></ROW><ROW><id>10134335</id><snippet>path = sys.argv[0]
</snippet></ROW><ROW><id>10134335</id><snippet>argv[]</snippet></ROW><ROW><id>10134335</id><snippet>$ cat echo.py 
#!/usr/bin/python
import sys
print sys.argv[0]
$ chmod 755 echo.py
$ ./echo.py
./echo.py
$ 
</snippet></ROW><ROW><id>10134335</id><snippet>echo</snippet></ROW><ROW><id>10134335</id><snippet>echo path1/path2/path3 | ./map.py | sort | ./red.py
</snippet></ROW><ROW><id>10134335</id><snippet>argv[]</snippet></ROW><ROW><id>10134335</id><snippet>./map.py path1/path2/path3 /a/s/econd/pathname
</snippet></ROW><ROW><id>10134335</id><snippet>&gt;&gt;&gt; a=["nothing", "passwd", "shadow"]
&gt;&gt;&gt; [f for f in a[1:]]
['passwd', 'shadow']
&gt;&gt;&gt; import os
&gt;&gt;&gt; [f for f in a[1:] if os.path.isfile(f)]
['passwd', 'shadow']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10134414</id><snippet>x = input("What do you want to do? ").lower()
</snippet></ROW><ROW><id>10134414</id><snippet>def getinput():
    return input("What do you want to do? ").lower()

x = getinput()
print(x)
</snippet></ROW><ROW><id>10134465</id><snippet>timeit</snippet></ROW><ROW><id>10134465</id><snippet>fields = [float(f) for f in string_fields]</snippet></ROW><ROW><id>10134465</id><snippet>test_find_best.py</snippet></ROW><ROW><id>10134465</id><snippet>import random, operator, numpy as np, itertools, timeit

fields = [random.random() for _ in range(3000)]
fields_string = [str(field) for field in fields]
weights = [[random.random() for _ in range(3000)] for c in range(100)]

npw = np.array(weights)
npf = np.array(fields)   

num_fields = len(fields)
num_category = len(weights)

def f_original():
  winner = -1
  best = -float('inf')
  for c in range(num_category):
    score = 0
    for i in range(num_fields):
      score += float(fields_string[i]) * weights[c][i]
    if score &gt; best:
      best = score
      winner = c

def f_original_no_string():
  winner = -1
  best = -float('inf')
  for c in range(num_category):
    score = 0
    for i in range(num_fields):
      score += fields[i] * weights[c][i]
    if score &gt; best:
      best = score
      winner = c

def f_original_xrange():
  winner = -1
  best = -float('inf')
  for c in xrange(num_category):
    score = 0
    for i in xrange(num_fields):
      score += fields[i] * weights[c][i]
    if score &gt; best:
      best = score
      winner = c


# Zenon  http://stackoverflow.com/a/10134298/1256624

def f_index_comprehension():
    winner = -1
    best = -float('inf')
    for c in range(num_category):
      score = sum(fields[i] * weights[c][i] for i in xrange(num_fields))
      if score &gt; best:
        best = score
        winner = c  


# steveha  http://stackoverflow.com/a/10134247/1256624

def f_comprehension():
  winner = -1
  best = -float('inf')

  for c in xrange(num_category):
    score = sum(f * w for f, w in itertools.izip(fields, weights[c]))
    if score &gt; best:
      best = score
      winner = c

def f_schwartz_original(): # https://en.wikipedia.org/wiki/Schwartzian_transform
    tup = max(((i, sum(t[0] * t[1] for t in itertools.izip(fields, wlist))) for i, wlist in enumerate(weights)),
              key=lambda t: t[1]
             )

def f_schwartz_opt(): # https://en.wikipedia.org/wiki/Schwartzian_transform
    tup = max(((i, sum(f * w for f,w in itertools.izip(fields, wlist))) for i, wlist in enumerate(weights)),
              key=operator.itemgetter(1)
             )

def fweight(field_float_list, wlist):
    f = iter(field_float_list)
    return sum(f.next() * w for w in wlist)

def f_schwartz_iterate():
     tup = max(
         ((i, fweight(fields, wlist)) for i, wlist in enumerate(weights)),
         key=lambda t: t[1]
      )

# Nolen Royalty  http://stackoverflow.com/a/10134147/1256624 

def f_numpy_mult_sum():
   np.argmax(np.sum(npf * npw, axis = 1))


# me

def f_imap():
  winner = -1
  best = -float('inf')

  for c in xrange(num_category):
    score = sum(itertools.imap(operator.mul, fields, weights[c]))
    if score &gt; best:
      best = score
      winner = c

def f_numpy():
   np.argmax(npw.dot(npf))



for f in [f_original,
          f_index_comprehension,
          f_schwartz_iterate,
          f_original_no_string,
          f_schwartz_original,
          f_original_xrange,
          f_schwartz_opt,
          f_comprehension,
          f_imap]:
   print "%s: %.2f ms" % (f.__name__, timeit.timeit(f,number=10)/10 * 1000)
for f in [f_numpy_mult_sum, f_numpy]:
   print "%s: %.2f ms" % (f.__name__, timeit.timeit(f,number=100)/100 * 1000)
</snippet></ROW><ROW><id>10134465</id><snippet>python test_find_best.py</snippet></ROW><ROW><id>10134465</id><snippet>f_original: 310.34 ms
f_index_comprehension: 102.58 ms
f_schwartz_iterate: 103.39 ms
f_original_no_string: 96.36 ms
f_schwartz_original: 90.52 ms
f_original_xrange: 89.31 ms
f_schwartz_opt: 69.48 ms
f_comprehension: 68.87 ms
f_imap: 53.33 ms
f_numpy_mult_sum: 3.57 ms
f_numpy: 0.62 ms
</snippet></ROW><ROW><id>10134465</id><snippet>.dot</snippet></ROW><ROW><id>10134465</id><snippet>fields</snippet></ROW><ROW><id>10134465</id><snippet>weights</snippet></ROW><ROW><id>10134465</id><snippet>update_weights</snippet></ROW><ROW><id>10134465</id><snippet>def update_weights(weights, fields, to_increase, to_decrease):
  weights[to_increase,:] += fields
  weights[to_decrease,:] -= fields
  return weights
</snippet></ROW><ROW><id>10134675</id><snippet>path</snippet></ROW><ROW><id>10134680</id><snippet>Users</snippet></ROW><ROW><id>10134680</id><snippet>users</snippet></ROW><ROW><id>10134680</id><snippet>filename.py</snippet></ROW><ROW><id>10134713</id><snippet>list.index()</snippet></ROW><ROW><id>10134713</id><snippet>for idx in range(len(versionSplit)-1, -1, -1):
    i = versionSplit[idx]
    if chunk.isdigit():
        digit = '%0'+str(len(i))+'d'
        i = int(i) + 1
        i = digit % i
        versionSplit[idx]=str(i)
        break
</snippet></ROW><ROW><id>10134807</id><snippet>models</snippet></ROW><ROW><id>10134807</id><snippet>admin</snippet></ROW><ROW><id>10135064</id><snippet>dbcursor</snippet></ROW><ROW><id>10135064</id><snippet>def function(self, dbcursor):
    dbcursor.execute('UPDATE Table')

class_ = class1()
inventoryDb = inventory.connect('sample.db')
class_.function(inventoryDb.cursor())
</snippet></ROW><ROW><id>10135118</id><snippet>print "You can {} that step!".format('check' if checked else 'uncheck')
</snippet></ROW><ROW><id>10135416</id><snippet>/usr/lib/cgi-bin/file.cgi</snippet></ROW><ROW><id>10135416</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>10135416</id><snippet>error.log</snippet></ROW><ROW><id>10135416</id><snippet>access.log</snippet></ROW><ROW><id>10135416</id><snippet>/var/log/apache</snippet></ROW><ROW><id>10135416</id><snippet>ExecCGI</snippet></ROW><ROW><id>10135416</id><snippet>/usr/lib/cgi-bin/</snippet></ROW><ROW><id>10135416</id><snippet>ScriptAlias</snippet></ROW><ROW><id>10135633</id><snippet>*attr()</snippet></ROW><ROW><id>10135669</id><snippet>__call__()</snippet></ROW><ROW><id>10135863</id><snippet>manage.py migrate app_name 000X --fake
manage.py migrate app_name 
</snippet></ROW><ROW><id>10135929</id><snippet>for i in range(len(Names)):
    exec("def " + Names[i] + "(" + Args + "): " + Bodies[i]) #create locally
    globals()[Names[i]] = locals()[Names[i]]                           #assign to global space
</snippet></ROW><ROW><id>10135964</id><snippet>None</snippet></ROW><ROW><id>10135964</id><snippet>In [119]: branch_name = None

In [120]: branch_parts = branch_name.split("/")
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)

/home/avasal/&lt;ipython console&gt; in &lt;module&gt;()

AttributeError: 'NoneType' object has no attribute 'split'
</snippet></ROW><ROW><id>10135964</id><snippet>branch_name</snippet></ROW><ROW><id>10136185</id><snippet>'''
HTTP/1.1 200 OK\r\n
&lt;!DOCTYPE html&gt;
...
'''
</snippet></ROW><ROW><id>10136185</id><snippet>\n</snippet></ROW><ROW><id>10136185</id><snippet>HTTP/1.1 200 OK\r\n\n&lt;!DOCTYPE html&gt;...
</snippet></ROW><ROW><id>10136185</id><snippet>\r</snippet></ROW><ROW><id>10136185</id><snippet>sock.send("HTTP/1.1 200 OK\r\n\r\n")
</snippet></ROW><ROW><id>10136185</id><snippet>Content-type</snippet></ROW><ROW><id>10136185</id><snippet>sock.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n\r\n")
</snippet></ROW><ROW><id>10136185</id><snippet>sock.send('''
&lt;!DOCTYPE html&gt;
...
''')
</snippet></ROW><ROW><id>10136185</id><snippet>\r\n</snippet></ROW><ROW><id>10136424</id><snippet>&gt;&gt;&gt; import lxml.html as html
&gt;&gt;&gt; page = html.parse("http://www.insiderpages.com/b/3721895833/central-kia-of-irving-irving")
&gt;&gt;&gt; print page.xpath("//div[@class='rating_box']/abbr/@title")
['3']
</snippet></ROW><ROW><id>10136615</id><snippet>document.write</snippet></ROW><ROW><id>10136615</id><snippet>return</snippet></ROW><ROW><id>10136615</id><snippet>document</snippet></ROW><ROW><id>10136615</id><snippet>import PyV8
ctx = PyV8.JSContext()
ctx.enter()

js = """
function escramble_758(){
var a,b,c
a='+1 '
b='84-'
a+='425-'
b+='7450'
c='9'
document.write(a+c+b)
}
escramble_758()
"""

print ctx.eval(js.replace("document.write", "return "))
</snippet></ROW><ROW><id>10136615</id><snippet>class MockDocument(object):

    def __init__(self):
        self.value = ''

    def write(self, *args):
        self.value += ''.join(str(i) for i in args)


class Global(PyV8.JSClass):
    def __init__(self):
        self.document = MockDocument()

scope = Global()
ctx = PyV8.JSContext(scope)
ctx.enter()
ctx.eval(js)
print scope.document.value
</snippet></ROW><ROW><id>10137081</id><snippet>data.txt</snippet></ROW><ROW><id>10137081</id><snippet>algorithm.py</snippet></ROW><ROW><id>10137081</id><snippet>open('data.txt')
</snippet></ROW><ROW><id>10137081</id><snippet>algorithm.py</snippet></ROW><ROW><id>10137081</id><snippet>open(os.path.join(os.path.dirname(__file__), 'data.txt'))
</snippet></ROW><ROW><id>10137288</id><snippet>CLASSES = ['Google Android', 'Microsoft Windows', 'Apple Mac OS X Lion']

def classify_query(query_string):
    """
    Computes the most "likely" class for the given query string.

    First normalises the query to lower case, then computes the number of
    overlapping tokens for each of the possible classes.

    The class(es) with the highest overlap are returned as a list.

    """
    query_tokens = query_string.lower().split()
    class_tokens = [[x.lower() for x in c.split()] for c in CLASSES]

    overlap = [0] * len(CLASSES)
    for token in query_tokens:
        for index in range(len(CLASSES)):
            if token in class_tokens[index]:
                overlap[index] += 1

    sorted_overlap = [(count, index) for index, count in enumerate(overlap)]
    sorted_overlap.sort()
    sorted_overlap.reverse()

    best_count = sorted_overlap[0][0]

    best_classes = []
    for count, index in sorted_overlap:
        if count == best_count:
            best_classes.append(CLASSES[index])
        else:
            break

    return best_classes
</snippet></ROW><ROW><id>10137288</id><snippet>classify_query('mac OS x') -&gt; ['Apple Mac OS X Lion']
classify_query('Google') -&gt; ['Google Android']
</snippet></ROW><ROW><id>10137622</id><snippet>__unicode__(self)</snippet></ROW><ROW><id>10137622</id><snippet>Contact</snippet></ROW><ROW><id>10137622</id><snippet>class Contact(models.Model):
    sender = models.EmailField()
    subject = models.CharField(max_length=25)
    message = models.TextField()

    def __unicode__(self):
        return self.subject
</snippet></ROW><ROW><id>10137622</id><snippet>CashtextsForm</snippet></ROW><ROW><id>10137622</id><snippet>subject</snippet></ROW><ROW><id>10137811</id><snippet>&gt;&gt;&gt; import cx_Oracle
&gt;&gt;&gt;
&gt;&gt;&gt; a = cx_Oracle.connect('schema/pw@db')
&gt;&gt;&gt; curs = a.cursor()
&gt;&gt;&gt; SQL = (("""create table tmp_test ( a date )"""),
... ("""insert into tmp_test values ( sysdate )""")
... )
&gt;&gt;&gt; for i in SQL:
...     print i
...
create table tmp_test ( a date )
insert into tmp_test values ( sysdate )
&gt;&gt;&gt; for i in SQL:
...     curs.execute(i)
...
&gt;&gt;&gt; a.commit()
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10137811</id><snippet>subprocess</snippet></ROW><ROW><id>10137811</id><snippet>cx_Oracle</snippet></ROW><ROW><id>10137811</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; cmdline = ['sqlplus','schema/pw@db','@','tmp_test.sql']
&gt;&gt;&gt; subprocess.call(cmdline)

SQL*Plus: Release 9.2.0.1.0 - Production on Fri Apr 13 09:40:41 2012

Copyright (c) 1982, 2002, Oracle Corporation.  All rights reserved.


Connected to:
Oracle Database 11g Release 11.2.0.1.0 - 64bit Production

SQL&gt;
SQL&gt; CREATE TABLE FOO(id number);

Table created.

SQL&gt;
SQL&gt; BEGIN
  2    INSERT INTO FOO VALUES(1);
  3    INSERT INTO FOO VALUES(2);
  4    INSERT INTO FOO VALUES(3);
  5  END;
  6  /

PL/SQL procedure successfully completed.

SQL&gt; CREATE TABLE BAR(id number);

Table created.

SQL&gt;
SQL&gt; quit
Disconnected from Oracle Database 11g Release 11.2.0.1.0 - 64bit Production
0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10137858</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; G = [[0]*11 for _ in range(11)]
&gt;&gt;&gt; G
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; for i in range(1, 11):
        for j in range(1, 11):
            G[i][j] = random.randint(1,10)


&gt;&gt;&gt; G
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 8, 10, 5, 7, 9, 8, 10, 8, 3], [0, 7, 9, 7, 7, 6, 6, 10, 2, 8, 9], [0, 10, 6, 3, 7, 10, 7, 9, 6, 1, 7], [0, 5, 7, 1, 10, 3, 3, 1, 2, 5, 6], [0, 7, 3, 5, 4, 4, 2, 10, 10, 8, 1], [0, 10, 3, 3, 5, 4, 4, 2, 5, 3, 1], [0, 6, 6, 6, 6, 2, 3, 8, 1, 6, 4], [0, 7, 8, 5, 8, 1, 9, 5, 5, 2, 9], [0, 3, 2, 4, 1, 1, 4, 7, 7, 5, 5], [0, 3, 4, 10, 1, 2, 5, 3, 10, 9, 7]]
</snippet></ROW><ROW><id>10137858</id><snippet>random.randint</snippet></ROW><ROW><id>10137858</id><snippet>input()</snippet></ROW><ROW><id>10137858</id><snippet>raw_input()</snippet></ROW><ROW><id>10138154</id><snippet>'\bfoo'</snippet></ROW><ROW><id>10138154</id><snippet>'foobar'</snippet></ROW><ROW><id>10138154</id><snippet>'foo bar'</snippet></ROW><ROW><id>10138154</id><snippet>'bar foo'</snippet></ROW><ROW><id>10138154</id><snippet>'barfoo'</snippet></ROW><ROW><id>10138154</id><snippet>'foo\b'</snippet></ROW><ROW><id>10138154</id><snippet>'foo bar'</snippet></ROW><ROW><id>10138154</id><snippet>'bar foo'</snippet></ROW><ROW><id>10138154</id><snippet>'barfoo'</snippet></ROW><ROW><id>10138154</id><snippet>'foobar'</snippet></ROW><ROW><id>10138307</id><snippet>DeferedVector</snippet></ROW><ROW><id>10138307</id><snippet>lambdify</snippet></ROW><ROW><id>10138307</id><snippet>In [1]: from sympy.matrices import DeferredVector

In [2]: v = DeferredVector('v')

In [3]: func = lambdify(v, Matrix([v[1], 2*v[2]]))

In [4]: func(np.array([10,20,30]))
Out[4]: 
       [[20] 
        [60]]
</snippet></ROW><ROW><id>10138307</id><snippet>.subs</snippet></ROW><ROW><id>10138307</id><snippet>In [11]: x1, x2, x3 = symbols('x1:4')

In [12]: m = Matrix([x2,2*x1,x3/2])

In [13]: m.subs({x1:10, x2:20, x3:30})
Out[13]: 
        ⎡20⎤
        ⎢  ⎥
        ⎢20⎥
        ⎢  ⎥
        ⎣15⎦
</snippet></ROW><ROW><id>10138307</id><snippet>dict(zip(symbols('x1:4'), your_value_array))</snippet></ROW><ROW><id>10138307</id><snippet>np.array(the_matrix_in_question)</snippet></ROW><ROW><id>10138307</id><snippet>dtype</snippet></ROW><ROW><id>10138307</id><snippet>dtype=object</snippet></ROW><ROW><id>10138308</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import matplotlib.mlab as mlab

mean = 0
variance = 1
sigma = sqrt(variance)
x = np.linspace(-3,3,100)
plt.plot(x,mlab.normpdf(x,mean,sigma))

plt.show()
</snippet></ROW><ROW><id>10138398</id><snippet>&gt;&gt;&gt; from pysqlite2 import dbapi2 as sqlite
&gt;&gt;&gt; sqlite.version
'2.3.5'
&gt;&gt;&gt; sqlite.sqlite_version
'3.7.7.1'
</snippet></ROW><ROW><id>10138398</id><snippet>#!/usr/bin/python
from pysqlite2 import dbapi2 as sqlite

conn = sqlite.connect(':memory:')
cu = conn.cursor()
cu.executescript("""
DROP TABLE IF EXISTS msrun;
CREATE  TABLE IF NOT EXISTS msrun (
  msrun_name VARCHAR(40) PRIMARY KEY NOT NULL ,
  description VARCHAR(500) NOT NULL );

DROP TABLE IF EXISTS feature;
CREATE  TABLE IF NOT EXISTS feature (
  feature_id VARCHAR(40) PRIMARY KEY NOT NULL ,
  msrun_msrun_name VARCHAR(40) NOT NULL ,
  CONSTRAINT fk_feature_msrun1
    FOREIGN KEY (msrun_msrun_name )
    REFERENCES msrun (msrun_name )
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

  CREATE UNIQUE INDEX id_UNIQUE ON feature (feature_id ASC);
  CREATE INDEX fk_feature_msrun1 ON feature (msrun_msrun_name ASC);

DROP TABLE IF EXISTS convexhull;
CREATE  TABLE IF NOT EXISTS convexhull (
  convexhull_id INT PRIMARY KEY NOT NULL ,
  mz DOUBLE NOT NULL ,
  rt DOUBLE NOT NULL ,
  feature_feature_id VARCHAR(40) NOT NULL ,
  CONSTRAINT fk_convexhull_feature
    FOREIGN KEY (feature_feature_id )
    REFERENCES feature (feature_id )
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

  CREATE INDEX fk_convexhull_feature ON convexhull (feature_feature_id ASC);

DROP TABLE IF EXISTS position;
CREATE  TABLE IF NOT EXISTS position (
  position_id INT PRIMARY KEY NOT NULL ,
  dim0 INT NOT NULL ,
  dim1 INT NOT NULL ,
  feature_feature_id VARCHAR(40) NOT NULL ,
  CONSTRAINT fk_position_feature1
    FOREIGN KEY (feature_feature_id )
    REFERENCES feature (feature_id )
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

  CREATE INDEX fk_position_feature1 ON position (feature_feature_id ASC);

DROP TABLE IF EXISTS userParam_names;
CREATE  TABLE IF NOT EXISTS userParam_names (
  userParam_id INT PRIMARY KEY NOT NULL ,
  Name VARCHAR(45) NOT NULL );

DROP TABLE IF EXISTS feature_has_userParam_names;
CREATE  TABLE IF NOT EXISTS feature_has_userParam_names (
  feature_feature_id VARCHAR(40) PRIMARY KEY NOT NULL ,
  userParam_names_userParam_id INT NOT NULL ,
  CONSTRAINT fk_feature_has_userParam_names_feature1
    FOREIGN KEY (feature_feature_id )
    REFERENCES feature (feature_id )
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_feature_has_userParam_names_userParam_names1
    FOREIGN KEY (userParam_names_userParam_id )
    REFERENCES userParam_names (userParam_id )
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

  CREATE INDEX fk_feature_has_userParam_names_userParam_names1 ON feature_has_userParam_names (userParam_names_userParam_id ASC);
  CREATE INDEX fk_feature_has_userParam_names_feature1 ON feature_has_userParam_names (feature_feature_id ASC);

DROP TABLE IF EXISTS userParam_value;
CREATE  TABLE IF NOT EXISTS userParam_value (
  iduserParam_value INT PRIMARY KEY NOT NULL ,
  userParam_name VARCHAR(45) NOT NULL ,
  value VARCHAR(45) NOT NULL );

DROP TABLE IF EXISTS feature_has_userParam_names_has_userParam_value;
CREATE  TABLE IF NOT EXISTS feature_has_userParam_names_has_userParam_value (
  feature_has_userParam_names_feature_feature_id VARCHAR(40) PRIMARY KEY NOT NULL ,
  feature_has_userParam_names_userParam_names_userParam_id INT NOT NULL ,
  userParam_value_iduserParam_value INT NOT NULL ,
  CONSTRAINT fk_feature_has_userParam_names_has_userParam_value_feature_ha1
    FOREIGN KEY (feature_has_userParam_names_feature_feature_id , feature_has_userParam_names_userParam_names_userParam_id )
    REFERENCES feature_has_userParam_names (feature_feature_id , userParam_names_userParam_id )
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_feature_has_userParam_names_has_userParam_value_userParam_1
    FOREIGN KEY (userParam_value_iduserParam_value )
    REFERENCES userParam_value (iduserParam_value )
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

  CREATE INDEX fk_feature_has_userParam_names_has_userParam_value_userParam_1 ON  feature_has_userParam_names_has_userParam_value (userParam_value_iduserParam_value ASC);
  CREATE INDEX fk_feature_has_userParam_names_has_userParam_value_feature_ha1 ON  feature_has_userParam_names_has_userParam_value (feature_has_userParam_names_feature_feature_id ASC, feature_has_userParam_names_userParam_names_userParam_id ASC);
""")

conn.commit()
cu.execute("PRAGMA foreign_keys=ON")
cu.execute("INSERT INTO msrun VALUES (?,?)", ('bar', 'bar'))
cu.execute("INSERT INTO feature VALUES (?,?)", ('foo','bar'))
cu.execute("INSERT INTO feature VALUES (?,?)", ('foo1','bar'))
conn.commit()

cu.execute("SELECT * FROM feature")
print(cu.fetchall())

cu.execute("DELETE FROM feature WHERE feature_id=?", ("foo", ))
cu.execute("DELETE FROM feature WHERE feature_id=?", (str("foo1"), ))
conn.commit()

cu.execute("SELECT * FROM feature")
print(cu.fetchall())
</snippet></ROW><ROW><id>10138398</id><snippet>features</snippet></ROW><ROW><id>10138398</id><snippet>features</snippet></ROW><ROW><id>10138398</id><snippet>features</snippet></ROW><ROW><id>10138398</id><snippet>pysqlite2.dbapi2.IntegrityError: foreign key constraint failed
</snippet></ROW><ROW><id>10138398</id><snippet>spectrum_has_feature</snippet></ROW><ROW><id>10138398</id><snippet>feature</snippet></ROW><ROW><id>10138398</id><snippet>CREATE  TABLE IF NOT EXISTS spectrum_has_feature (
&lt;...&gt;
FOREIGN KEY (feature_feature_id , feature_msrun_msrun_name )
REFERENCES feature (
    feature_id , 
    msrun_msrun_msrun_name ) -- &lt;&lt;&lt; shouldn't this be msrun_msrun_name?
&lt;...&gt;
</snippet></ROW><ROW><id>10138422</id><snippet>INPUT_FILTER</snippet></ROW><ROW><id>10138422</id><snippet>sed /^$/d
</snippet></ROW><ROW><id>10138422</id><snippet>INPUT_FILTER = sed /^$/d
</snippet></ROW><ROW><id>10138997</id><snippet>pylint --disable=W1234
</snippet></ROW><ROW><id>10138997</id><snippet>pylint --rcfile=/path/to/config.file
</snippet></ROW><ROW><id>10138997</id><snippet>[MESSAGES CONTROL]
# C0111 Missing docstring 
# I0011 Warning locally suppressed using disable-msg
# I0012 Warning locally suppressed using disable-msg
# W0704 Except doesn't do anything Used when an except clause does nothing but "pass" and there is no "else" clause
# W0142 Used * or * magic* Used when a function or method is called using *args or **kwargs to dispatch arguments.
# W0212 Access to a protected member %s of a client class
# W0232 Class has no __init__ method Used when a class has no __init__ method, neither its parent classes.
# W0613 Unused argument %r Used when a function or method argument is not used.
# W0702 No exception's type specified Used when an except clause doesn't specify exceptions type to catch.
# R0201 Method could be a function
# W0614 Unused import XYZ from wildcard import
# R0914 Too many local variables
# R0912 Too many branches
# R0915 Too many statements
# R0913 Too many arguments
# R0904 Too many public methods
disable=C0111,I0011,I0012,W0704,W0142,W0212,W0232,W0613,W0702,R0201,W0614,R0914,R0912,R0915,R0913,R0904,R0801
</snippet></ROW><ROW><id>10139130</id><snippet>mylist = [7] + list(range(9,12))
</snippet></ROW><ROW><id>10139130</id><snippet>[7, 9, 10, 11]
</snippet></ROW><ROW><id>10139137</id><snippet>wait()</snippet></ROW><ROW><id>10139137</id><snippet>import sys
import os
import time

children = []

for i in range(0,3):    
    pid = os.fork()

    if pid == -1:
        continue
    elif pid == 0:
        # Do work...
        print 'Child %d spawned' % os.getpid()
        sys.exit(0)     
    else:
        children.append(pid)

time.sleep(5)

# ADD NEXT TWO LINES:
for pid in children:
    os.waitpid(pid, 0)

for pid in children:
    proc_path = '/proc/%d' % pid
    if not os.path.exists(proc_path):
        print 'Child %d is dead' % pid
    else:
        print 'Child %d is alive' % pid
</snippet></ROW><ROW><id>10139137</id><snippet>wait()</snippet></ROW><ROW><id>10139137</id><snippet>man 2 wait</snippet></ROW><ROW><id>10139137</id><snippet>subprocess</snippet></ROW><ROW><id>10139204</id><snippet>x</snippet></ROW><ROW><id>10139204</id><snippet>x</snippet></ROW><ROW><id>10139204</id><snippet>x</snippet></ROW><ROW><id>10139204</id><snippet>x</snippet></ROW><ROW><id>10139204</id><snippet>x</snippet></ROW><ROW><id>10139436</id><snippet>{% if locals().get('logout_error', False) %}
</snippet></ROW><ROW><id>10139436</id><snippet>False</snippet></ROW><ROW><id>10139526</id><snippet>&gt;&gt;&gt; re.findall(r"(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b),((?:\w+,\w+|\w+)),(\d*)",ab)
[('192.168.251.135', 'henry,thesecond', '')]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10139526</id><snippet>&gt;&gt;&gt; if not ab.rpartition(",")[-1].isdigit():
    ab+='1'
</snippet></ROW><ROW><id>10139602</id><snippet>#Creates a list with the first ten Fibonacci numbers. 
l = [1,2]
for i in range(10):
    l.append(l[i]+l[i+1])

for i in range(len(l)):
    #If an element of the Fibonacci list is uneven, replace it with zero.
    if l[i]%2 != 0:
        l[i] = 0

#Print the sum of the list with all even Fibonacci numbers. 
print sum(l)
</snippet></ROW><ROW><id>10139935</id><snippet>class Spam:
    def oneFunction(self,lists):
        category=random.choice(list(lists.keys()))
        self.word=random.choice(lists[category])

    def anotherFunction(self):
        for letter in self.word:              
        print("_",end=" ")
</snippet></ROW><ROW><id>10139935</id><snippet>s = Spam()
s.oneFunction(lists)
s.anotherFunction()
</snippet></ROW><ROW><id>10139935</id><snippet>oneFunction</snippet></ROW><ROW><id>10139935</id><snippet>oneFunction</snippet></ROW><ROW><id>10139935</id><snippet>anotherFunction</snippet></ROW><ROW><id>10139935</id><snippet>&gt;&gt;&gt; def oneFunction(lists):
        category=random.choice(list(lists.keys()))
        return random.choice(lists[category])


&gt;&gt;&gt; def anotherFunction():
        for letter in oneFunction(lists):              
        print("_",end=" ")
</snippet></ROW><ROW><id>10139935</id><snippet>anotherFunction</snippet></ROW><ROW><id>10139935</id><snippet>oneFunction</snippet></ROW><ROW><id>10139935</id><snippet>&gt;&gt;&gt; def anotherFunction(words):
        for letter in words:              
        print("_",end=" ")
&gt;&gt;&gt; anotherFunction(oneFunction(lists))
</snippet></ROW><ROW><id>10140051</id><snippet>def mymethod():
    return [[1,2,3,4],
            [1,2,3,4],
            [1,2,3,4],
            [1,2,3,4]]

mylist = mymethod()

for thing in (i[1] for i in mylist):
    print thing

# this bit is meant to be outside the for loop, 
# I mean it to represent the last value thing was in the for
if thing:
    print thing
</snippet></ROW><ROW><id>10140264</id><snippet>for rownum in range (rows):
</snippet></ROW><ROW><id>10140264</id><snippet>for rownum in range (1, rows+1):
</snippet></ROW><ROW><id>10140333</id><snippet>fp.read()</snippet></ROW><ROW><id>10140333</id><snippet>read()</snippet></ROW><ROW><id>10140333</id><snippet>read</snippet></ROW><ROW><id>10140333</id><snippet>read</snippet></ROW><ROW><id>10140333</id><snippet>None</snippet></ROW><ROW><id>10140333</id><snippet>read</snippet></ROW><ROW><id>10140333</id><snippet>assert n &gt; 0
while True:
    chunk = fp.read(n)
    if chunk == '':
        break
    process(chunk)
</snippet></ROW><ROW><id>10140333</id><snippet>for chunk in iter(lambda: fp.read(n), ''):
    process(chunk)
</snippet></ROW><ROW><id>10140372</id><snippet>import bisect
keys = sorted(a.keys())
index = bisect.bisect(keys, r)
if index &gt;= 1:
    print keys[index - 1]
print keys[index]
</snippet></ROW><ROW><id>10140978</id><snippet>Result = ''
</snippet></ROW><ROW><id>10140978</id><snippet>Result=0
</snippet></ROW><ROW><id>10140978</id><snippet>Result = Result + DenaryEquivalent
</snippet></ROW><ROW><id>10140978</id><snippet>Result = Result*16 + int(DenaryEquivalent)
</snippet></ROW><ROW><id>10140978</id><snippet>&gt;&gt;&gt; def denary(hex):
    denary_equivalent={'1':1,'2':2,'3':'3','4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15,'10':16}
    result = 0
    for this_hex_digit in hex:
        if this_hex_digit in denary_equivalent:
            result=result*16+denary_equivalent[this_hex_digit]
    return result

&gt;&gt;&gt; denary('BB')
187
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10141629</id><snippet>def queryUID(UID):
    if '-' in UID:
        return (UID.replace('-', ''), UID)
    return (UID, '-'.join([
        UID[:8], UID[8:12], UID[12:16], UID[16:20], UID[20:]]))
</snippet></ROW><ROW><id>10141629</id><snippet>catalog.searchResults(UID=queryUID('325dc47e-08f9-4fa1-bc18-3944a725adb4'))
</snippet></ROW><ROW><id>10141718</id><snippet>PrintingList</snippet></ROW><ROW><id>10141718</id><snippet>triangle</snippet></ROW><ROW><id>10141718</id><snippet>rows</snippet></ROW><ROW><id>10141718</id><snippet>routes</snippet></ROW><ROW><id>10141718</id><snippet>return PrintingList</snippet></ROW><ROW><id>10141718</id><snippet>routes</snippet></ROW><ROW><id>10141718</id><snippet>result = triangle(rows)
routes(result)
max(routes(triangle),key=sum)
</snippet></ROW><ROW><id>10141986</id><snippet>&gt;&gt;&gt; p1("foobar")
('Called with', 'foobar', 4)

&gt;&gt;&gt; p1("foobar", b=5)
('Called with', 'foobar', 5)
</snippet></ROW><ROW><id>10142368</id><snippet># in urls.py
from django.conf import settings

if settings.DEBUG:
    urlpatterns += patterns('',
        url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {
            'document_root': settings.MEDIA_ROOT,
        }),
    )

{# in template, use sorl-thumbnail if your want to resize images #}
{% with image.image as img %}
&lt;img src="{{ img.url }}" width="{{ img.width }}" height="{{ img.height }}" /&gt;
{% endwith %}

# furthermore, the view code could be simplified as
from django.shortcuts import render
def home(request):
    latest_images = Image.objects.order_by('-pub_date')
    return render(request, 'home.html', {'latest_images':latest_images})
</snippet></ROW><ROW><id>10142368</id><snippet>/media/filename</snippet></ROW><ROW><id>10142617</id><snippet>sphinx.ext.autodoc</snippet></ROW><ROW><id>10142617</id><snippet>conf.py</snippet></ROW><ROW><id>10142617</id><snippet>.. automodule::</snippet></ROW><ROW><id>10142617</id><snippet>.. autoclass::</snippet></ROW><ROW><id>10142617</id><snippet>.. autofunction::</snippet></ROW><ROW><id>10142823</id><snippet>string.rep</snippet></ROW><ROW><id>10142823</id><snippet>lua_newstate</snippet></ROW><ROW><id>10142823</id><snippet>debug.sethook</snippet></ROW><ROW><id>10142919</id><snippet>try:
   do_something()
except KeyboardInterrupt:
   cleanup()
</snippet></ROW><ROW><id>10142919</id><snippet>except Exception</snippet></ROW><ROW><id>10143069</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; lines = ["ID674021384 25/01/1986 heloo hi thanks 5 minutes and 25-01-1988.", "ID909900000 25-01-1986 hello 10 minutes."]
&gt;&gt;&gt; pattern = '(?P&lt;date&gt;\d{1,2}[/-]\d{1,2}[/-]\d{4})|(?P&lt;time&gt;\d+ minutes)'
&gt;&gt;&gt; num_occurences = {line:defaultdict(int) for line in lines}
&gt;&gt;&gt; def repl(matchobj):
        num_occurences[matchobj.string][matchobj.lastgroup] += 1
        return matchobj.lastgroup

&gt;&gt;&gt; for line in lines:
        text_id = line.split(' ')[0]
        new_text = re.sub(pattern,repl,line)    
        print new_text
        print '{0} DATE:{1[date]} Time:{1[time]}'.format(text_id, num_occurences[line])
        print ''


ID674021384 date heloo hi thanks time and date.
ID674021384 DATE:2 Time:1

ID909900000 date hello time.
ID909900000 DATE:1 Time:1
</snippet></ROW><ROW><id>10143236</id><snippet>SMTP.set_debuglevel()</snippet></ROW><ROW><id>10143344</id><snippet>emit()</snippet></ROW><ROW><id>10143344</id><snippet>nan</snippet></ROW><ROW><id>10143344</id><snippet>None</snippet></ROW><ROW><id>10143344</id><snippet>"max year"</snippet></ROW><ROW><id>10143344</id><snippet>max_year</snippet></ROW><ROW><id>10143407</id><snippet>cursor.execute("INSERT INTO customer(name) VALUES('aaa')")
</snippet></ROW><ROW><id>10143407</id><snippet>connection.commit()
</snippet></ROW><ROW><id>10143801</id><snippet>def base_3_to_seq(base3):
   for seq in itertools.product(range(3), repeat=3):
       if base_3(seq) == base3:
           return seq
   return "Impossible"
</snippet></ROW><ROW><id>10143876</id><snippet>&gt;&gt;&gt; "0123456789"[7:3:-1]
'7654'
</snippet></ROW><ROW><id>10143933</id><snippet>nick</snippet></ROW><ROW><id>10143933</id><snippet>ALTER TABLE bank ADD UNIQUE (nick);
</snippet></ROW><ROW><id>10143933</id><snippet>try</snippet></ROW><ROW><id>10143933</id><snippet>except</snippet></ROW><ROW><id>10143935</id><snippet>list2.extend(list1)
</snippet></ROW><ROW><id>10144383</id><snippet>range</snippet></ROW><ROW><id>10144383</id><snippet>def foo1():
    data = ((a,b) for a in (i*i for i in xrange(1,101) if i%2) for b in [1,2,3,4,5] if a+b &gt; 40)
    return list(data)
</snippet></ROW><ROW><id>10144383</id><snippet>def foo2():
    result=[]
    for i in range(1,101):
        if i%2:
            i=i*i
            for j in [1,2,3,4,5]:
                if i+j &gt; 40:
                    result+=[(i,j)]
    return result
</snippet></ROW><ROW><id>10144383</id><snippet>def foo3():
    data=[(a,b) for a in (i*i for i in range(1,101)) for b in [1,2,3,4,5] if a+b &gt; 40] 
    return data
</snippet></ROW><ROW><id>10144383</id><snippet>def foo4():
    data=[(a,b) for a in [i*i for i in range(1,101)] for b in [1,2,3,4,5] if a+b &gt; 40]
    return data
</snippet></ROW><ROW><id>10144383</id><snippet>&gt;&gt;&gt; t1=timeit.Timer("foo1()","from __main__ import foo1")
&gt;&gt;&gt; t2=timeit.Timer("foo2()","from __main__ import foo2")
&gt;&gt;&gt; t3=timeit.Timer("foo3()","from __main__ import foo3")
&gt;&gt;&gt; t4=timeit.Timer("foo4()","from __main__ import foo4")

&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t1.timeit(number=10000)/10000)
100.95 usec/pass
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t2.timeit(number=10000)/10000)
158.90 usec/pass
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t3.timeit(number=10000)/10000)
130.02 usec/pass
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t4.timeit(number=10000)/10000)
133.68 usec/pass
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10144383</id><snippet>foo2</snippet></ROW><ROW><id>10144383</id><snippet>foo3</snippet></ROW><ROW><id>10144383</id><snippet>foo4</snippet></ROW><ROW><id>10144403</id><snippet>__new__</snippet></ROW><ROW><id>10144403</id><snippet>def on_click_decorator(key):
    def real_decorator(func):
        setattr(func, "_callback_to", key)
        return func
    return real_decorator


class Meta(type):
    def __new__(metacls, name, bases, dct):
        callback_stack = {}
        for name, value in dct.items():
            if hasattr(value, "_callback_to"):
                callback_stack[value._callback_to] = key
        dct["callback_stack"] = callback_stack
        # we've done all needed manipulation - no
        # need for the class to be from a special type - so we
        # don't call type.__new__
        return type(name, bases, dct)
</snippet></ROW><ROW><id>10144403</id><snippet>self.callback_stack[controlID]</snippet></ROW><ROW><id>10144465</id><snippet>s[-1:-1:-1]
</snippet></ROW><ROW><id>10144465</id><snippet>s[0:0]
</snippet></ROW><ROW><id>10144854</id><snippet>b</snippet></ROW><ROW><id>10144880</id><snippet>LAST_INSERT_ID()</snippet></ROW><ROW><id>10144880</id><snippet>varchar(32)</snippet></ROW><ROW><id>10144880</id><snippet>batch_insert_id</snippet></ROW><ROW><id>10144880</id><snippet>import uuid

batch_insert_id = uuid.uuid4().hex
# Execute your batch insert query, with batch_insert_id 
# as value of batch_insert_id for all rows
cursor.execute("SELECT id FROM mytable WHERE batch_insert_id = '%s'", (batch_insert_id,))
primary_keys = [row[0] for row in cursor.fetchall()]
</snippet></ROW><ROW><id>10144903</id><snippet>from google.appengine.api import urlfetch
from poster.encode import multipart_encode
payload = {}
payload['test_file'] = self.request.POST['test_file']
payload['user_id'] = self.request.POST['user_id']
to_post = multipart_encode(payload)
send_url = "http://127.0.0.1:8000/"
result = urlfetch.fetch(url=send_url, payload="".join(to_post[0]), method=urlfetch.POST, headers=to_post[1])
logging.info(result.content)
</snippet></ROW><ROW><id>10144903</id><snippet>method="POST" enctype="multipart/form-data"</snippet></ROW><ROW><id>10144903</id><snippet>import webapp2
from google.appengine.api import urlfetch
from poster.encode import multipart_encode, MultipartParam

class UploadTest(webapp2.RequestHandler):
  def post(self): 
    payload = {}
    file_data = self.request.POST['test_file']
    payload['test_file'] = MultipartParam('test_file', filename=file_data.filename,
                                          filetype=file_data.type,
                                          fileobj=file_data.file)
    payload['name'] = self.request.POST['name']
    data,headers= multipart_encode(payload)
    send_url = "http://127.0.0.1:8000/"
    t = urlfetch.fetch(url=send_url, payload="".join(data), method=urlfetch.POST, headers=headers)
    self.response.headers['Content-Type'] = 'text/plain'
    self.response.out.write(t.content)
  def get(self):
    self.response.out.write("""
    &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;File Upload Test&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;form action="" method="POST" enctype="multipart/form-data"&gt;
                &lt;input type="text" name="name" /&gt;
                &lt;input type="file" name="test_file" /&gt;
                &lt;input type="submit" value="Submit" /&gt;
            &lt;/form&gt;
        &lt;/body&gt;
    &lt;/html&gt;""")
</snippet></ROW><ROW><id>10144999</id><snippet>toolbar.zoom()</snippet></ROW><ROW><id>10144999</id><snippet>import pylab

plt.Figure()
thismanager = get_current_fig_manager()
thismanager.toolbar.zoom()
</snippet></ROW><ROW><id>10145077</id><snippet>ylabel('Soil Moisture Sensitivity,\n(0.01 K m$^3$ m$^{-3}$)', multialignment='center')</snippet></ROW><ROW><id>10145139</id><snippet>def customSave(self, user):
    lv = self.save(commit=False)
    lv.created_by = user
    lv.save()
    return lv
</snippet></ROW><ROW><id>10145139</id><snippet>inst = someForm.customSave(request.user)
inst.pk or inst.id
</snippet></ROW><ROW><id>10145150</id><snippet>sorted(row) != reference</snippet></ROW><ROW><id>10145150</id><snippet>def check_sudoku(array):  
    reference = range(1, len(array) + 1)
    transposed = zip(array)
    for row, col in zip(array, transposed):
        if sorted(row) != reference or sorted(row) != reference:
            return False
    return True
</snippet></ROW><ROW><id>10145150</id><snippet>transposed = zip(array)</snippet></ROW><ROW><id>10145150</id><snippet>zip(array, transposed)</snippet></ROW><ROW><id>10145150</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>10145150</id><snippet>[(1, (1,)), (2, (2,)), (3, (3,))]</snippet></ROW><ROW><id>10145150</id><snippet>&gt;&gt;&gt; rows = incorrect
&gt;&gt;&gt; cols = [[row[i] for i in range(len(rows[0]))] for row in rows]
&gt;&gt;&gt; cols = [[row[i] for row in rows] for i in range(len(row))]
&gt;&gt;&gt; cols
[[4, 6, 3, 9, 7, 8, 1, 5, 2], [1, 5, 9, 6, 3, 2, 4, 8, 7], [2, 8, 7, 4, 5, 1, 9, 3, 6], [3, 9, 5, 2, 1, 7, 6, 4, 8], [6, 4, 2, 3, 8, 9, 5, 7, 1], [7, 1, 8, 5, 4, 6, 3, 2, 9], [8, 3,
 1, 7, 6, 4, 2, 9, 5], [5, 2, 6, 8, 9, 3, 7, 1, 4], [1, 7, 4, 1, 2, 5, 8, 6, 3]]
&gt;&gt;&gt; rows
[[4, 1, 2, 3, 6, 7, 8, 5, 1], [6, 5, 8, 9, 4, 1, 3, 2, 7], [3, 9, 7, 5, 2, 8, 1, 6, 4], [9, 6, 4, 2, 3, 5, 7, 8, 1], [7, 3, 5, 1, 8, 4, 6, 9, 2], [8, 2, 1, 7, 9, 6, 4, 3, 5], [1, 4,
 9, 6, 5, 3, 2, 7, 8], [5, 8, 3, 4, 7, 2, 9, 1, 6], [2, 7, 6, 8, 1, 9, 5, 4, 3]]
</snippet></ROW><ROW><id>10145364</id><snippet>&gt;&gt;&gt; T1 = ['13', '17', '18', '21', '32']
&gt;&gt;&gt; T3 = map(int,T1)
&gt;&gt;&gt; T3
[13, 17, 18, 21, 32]
</snippet></ROW><ROW><id>10145364</id><snippet>&gt;&gt;&gt; T3 = [int(x) for x in T1]
&gt;&gt;&gt; T3
[13, 17, 18, 21, 32]
</snippet></ROW><ROW><id>10145364</id><snippet>&gt;&gt;&gt; T3 = [[int(letter) for letter in x] for x in T1]
&gt;&gt;&gt; T3
[[1, 3], [1, 7], [1, 8], [2, 1], [3, 2]]
</snippet></ROW><ROW><id>10145424</id><snippet>sys.platform == 'win32'</snippet></ROW><ROW><id>10145424</id><snippet>os.name == 'nt'</snippet></ROW><ROW><id>10146055</id><snippet>(r'^admin/(.*)', include(admin.site.urls)),
</snippet></ROW><ROW><id>10146055</id><snippet>(r'^admin/', include(admin.site.urls)),
</snippet></ROW><ROW><id>10146055</id><snippet>reverse('logout')</snippet></ROW><ROW><id>10146055</id><snippet>reverse('admin:logout')</snippet></ROW><ROW><id>10146191</id><snippet>H</snippet></ROW><ROW><id>10146191</id><snippet>__*item__()</snippet></ROW><ROW><id>10146191</id><snippet>class listxer(object):
  def __init__(self, structure, paths):
    self.structure = structure
    self.paths = paths

  def _descend(self, path):
    return reduce(lambda x,y: x[y], path, self.structure)

  def __len__(self):
    return sum(len(self._descend(path)) for path in self.paths)

  def __getitem__(self, item):
    if item &lt; 0:
      raise ValueError('negative indices not supported!')
    for path in self.paths:
      cur = self._descend(path)
      if item &gt; len(cur):
        item -= len(cur)
        continue
      else:
        return cur[item]
    else:
      raise IndexError('list index out of range')

H = [[[1, 2], [3, 4, 5]]]

mystruct = listxer(H, ((0, 0), (0, 1)))
print len(mystruct)
print mystruct[3]
</snippet></ROW><ROW><id>10146192</id><snippet>def Cashtexts(models.Model):
    name = CharField(max_length=50, unique = True)
</snippet></ROW><ROW><id>10146192</id><snippet>def view(request):

    if request.method == 'POST':
        form = CashtextsForm(request.POST)

        """ the next line is going to check uniqueness for each
            of the models fields where you have set unique = True
            If the field is not unique, it s field will have an
            attribute error, which you can then render to the template """
        if form.is_valid():
            form.save()
    else:
        form = CashtextsForm()

    context = RequestContext(request)

    # now i pass the form to the template as 'ref_create'
    context.update( {'ref_create':form} )
    return render_to_response('submit.html',context)
</snippet></ROW><ROW><id>10146192</id><snippet>{% for field in ref_create %}
    {{ field.label_tag }}
    {{ field }}
    {{ field.errors }}
{% endfor %}
</snippet></ROW><ROW><id>10146192</id><snippet>{{ field.errors }}</snippet></ROW><ROW><id>10146192</id><snippet>{% if field.errors %}
     The Cashtext field {{field.name}} value should be unique.
{% endif %}
</snippet></ROW><ROW><id>10146502</id><snippet>import socket, struct

def ip2long(ip):
    packed = socket.inet_aton(ip)
    return struct.unpack("!L", packed)[0]

def long2ip(n):
    unpacked = struct.pack('!L', n)
    return socket.inet_ntoa(unpacked)

def expandrange(rng):
    # expand '1.1.1.1-7' to ['1.1.1.1', '1.1.1.7']
    start, end = [ip.split('.') for ip in rng.split('-')]
    return map('.'.join, (start, start[:len(start) - len(end)] + end))

def compressrange((start, end)):
    # compress ['1.1.1.1', '1.1.1.7'] to '1.1.1.1-7'
    start, end = start.split('.'), end.split('.')
    return '-'.join(map('.'.join,
          (start, end[next((i for i in range(4) if start[i] != end[i]), 3):])))

def strings_to_ints(ranges):
    # turn range strings into list of lists of ints
    return [map(ip2long, rng) for rng in map(expandrange, ranges)]

def ints_to_strings(ranges):
    # turn lists of lists of ints into range strings
    return [compressrange(map(long2ip, rng)) for rng in ranges]

def consolodate(ranges):
    # join overlapping ranges in a sorted iterable
    iranges = iter(ranges)
    startmin, startmax = next(iranges)
    for endmin, endmax in iranges:
        # leave out the '+ 1' if you want to join overlapping ranges
        # but not consecutive ranges.
        if endmin &lt;= (startmax + 1):
            startmax = max(startmax, endmax)
        else:
            yield startmin, startmax
            startmin, startmax = endmin, endmax
    yield startmin, startmax

def convert_consolodate(ranges):
    # convert a list of possibly overlapping ip range strings
    # to a sorted, consolodated list of non-overlapping ip range strings
    return list(ints_to_strings(consolodate(sorted(strings_to_ints(ranges)))))

if __name__ == '__main__':
    ranges = ('1.1.1.1-7',
              '2.2.2.2-10',
              '3.3.3.3-3.3.3.3',
              '1.1.1.4-25',
              '2.2.2.4-6')
    print convert_consolodate(ranges)
    # prints ['1.1.1.1-25', '2.2.2.2-10', '3.3.3.3-3']
</snippet></ROW><ROW><id>10146838</id><snippet>foo_bar = bar[i - 3][j + 2]
z = foobar(y=i-1, z=k+2) 
</snippet></ROW><ROW><id>10146885</id><snippet>dict.has_key()</snippet></ROW><ROW><id>10146885</id><snippet>x in my_dict</snippet></ROW><ROW><id>10146885</id><snippet>unary</snippet></ROW><ROW><id>10146885</id><snippet>unary</snippet></ROW><ROW><id>10146885</id><snippet>unary</snippet></ROW><ROW><id>10146978</id><snippet>scipy.optimize.fmin</snippet></ROW><ROW><id>10146978</id><snippet>def f(x): return -2 * x**2 + 4 * x
max_x = scipy.optimize.fmin(lambda x: -f(x), 0)
# array([ 1.])
</snippet></ROW><ROW><id>10147050</id><snippet>left_index</snippet></ROW><ROW><id>10147050</id><snippet>right_index</snippet></ROW><ROW><id>10147050</id><snippet>In : pnd.merge(freq, hist, right_index=True, left_index=True)
Out:
        freq  count
series
0       0.01      1
1       0.04      4
2       0.14     14
3       0.12     12
4       0.21     21
5       0.14     14
6       0.17     17
7       0.07      7
8       0.05      5
9       0.01      1
10      0.01      1
11      0.03      3
</snippet></ROW><ROW><id>10147050</id><snippet>on</snippet></ROW><ROW><id>10147050</id><snippet>In : freq2 = freq.reset_index()

In : hist2 = hist.reset_index()

In : pnd.merge(freq2, hist2, on='series')
Out:
    series  freq  count
0        0  0.01      1
1        1  0.04      4
2        2  0.14     14
3        3  0.12     12
4        4  0.21     21
5        5  0.14     14
6        6  0.17     17
7        7  0.07      7
8        8  0.05      5
9        9  0.01      1
10      10  0.01      1
11      11  0.03      3
</snippet></ROW><ROW><id>10147050</id><snippet>DataFrame</snippet></ROW><ROW><id>10147050</id><snippet>join</snippet></ROW><ROW><id>10147050</id><snippet>In : freq.join(hist)
Out:
        freq  count
series
0       0.01      1
1       0.04      4
2       0.14     14
3       0.12     12
4       0.21     21
5       0.14     14
6       0.17     17
7       0.07      7
8       0.05      5
9       0.01      1
10      0.01      1
11      0.03      3
</snippet></ROW><ROW><id>10147124</id><snippet>--warn=</snippet></ROW><ROW><id>10147124</id><snippet>CFLAGS</snippet></ROW><ROW><id>10147124</id><snippet>env.Append(CFLAGS=["-Wno-write-strings"])
</snippet></ROW><ROW><id>10147376</id><snippet>n</snippet></ROW><ROW><id>10147376</id><snippet>a = numpy.random.randint(1000, size=100).reshape(10, 10)
indices = a.ravel().argsort()
print a.ravel()[indices[-10:]]
</snippet></ROW><ROW><id>10147376</id><snippet>array([909, 917, 926, 936, 952, 960, 961, 964, 969, 993])
</snippet></ROW><ROW><id>10147408</id><snippet>maxlist = max(myDict[item] for item in myDict.keys())
</snippet></ROW><ROW><id>10147408</id><snippet>myDict.values()</snippet></ROW><ROW><id>10147408</id><snippet>maxlist = max(myDict.values())
</snippet></ROW><ROW><id>10147497</id><snippet>EHLO</snippet></ROW><ROW><id>10147497</id><snippet>STARTTLS</snippet></ROW><ROW><id>10147497</id><snippet>server = smtplib.SMTP('smtp.gmail.com:587')
server.ehlo()
server.starttls()
</snippet></ROW><ROW><id>10147497</id><snippet>From:</snippet></ROW><ROW><id>10147497</id><snippet>To:</snippet></ROW><ROW><id>10147497</id><snippet>Subject:</snippet></ROW><ROW><id>10147497</id><snippet>CRLF</snippet></ROW><ROW><id>10147497</id><snippet>msg = "\r\n".join([
  "From: user_me@gmail.com",
  "To: user_you@gmail.com",
  "Subject: Just a message",
  "",
  "Why, oh why"
  ])
</snippet></ROW><ROW><id>10147677</id><snippet>i</snippet></ROW><ROW><id>10147677</id><snippet>0</snippet></ROW><ROW><id>10147677</id><snippet>n</snippet></ROW><ROW><id>10147677</id><snippet>L=[[19,18,14,9,4],[15,12,11,10,6,5],[8],[16,13,3,2],[17,7,1]]

n=len(L)

memo = {}
def f(i,j,last):
  if (i,j,last) in memo:
    return memo[(i,j,last)]
  if j==3:
    return 1
  if i==n:
    return 0
  res=0
  # take one from L[i]
  for x in L[i]:
    if last &gt; x:
      res+=f(i+1,j+1,x)
  # don't take any element from L[i]
  res += f(i+1,j,last)
  memo[(i,j,last)] = res
  return res

BIG = 10**9
print f(0,0,BIG)
</snippet></ROW><ROW><id>10147769</id><snippet>import importlib
mods = {}
def loadModules(aModule):
    global mods
    mods[module] = importlib.import_module(d_utility[module])
    # or maybe globals()[module] = ... would work also (exactly as you expect it to
</snippet></ROW><ROW><id>10147881</id><snippet>import os.path
p1="path.dll"
print (os.path.abspath(p1))
p2="${env_var}/path.dll"  #Make sure you set env_var in the calling environment...Otherwise it won't be expanded...
print (os.path.expandvars(p2))
</snippet></ROW><ROW><id>10148157</id><snippet>#!/usr/bin/env python

import csv
import os

filename = "sample.csv"
# localhost, 01.html.bak
# localhost, 01.htmlbak
# ...

def filesize(filename):
    # no need to shell out for filesize
    return os.stat(filename).st_size

with open(filename, 'rb') as handle:
    reader = csv.reader(handle)
    # result is written to sample.csv.updated.csv
    writer = csv.writer(open('%s.updated.csv' % filename, 'w'))
    for row in reader:
        # need to strip filename, just in case
        writer.writerow(row + [ filesize(row[1].strip()) ])

# result
# localhost, 01.html.bak,10021
# localhost, 01.htmlbak,218982
# ...
</snippet></ROW><ROW><id>10148201</id><snippet>image = image</snippet></ROW><ROW><id>10148201</id><snippet>for image, thumb in ImagePairs:
            curLbl = Label(rowFrame, image=thumb)
            curLbl.grid(row=0, column=col, sticky='news')
            curLbl.bind('&lt;Button-1&gt;', lambda e, image = image:self.popImage(image))  #or curLbl.image
</snippet></ROW><ROW><id>10148201</id><snippet>func</snippet></ROW><ROW><id>10148201</id><snippet>image</snippet></ROW><ROW><id>10148201</id><snippet>img</snippet></ROW><ROW><id>10148201</id><snippet>def func(e, img = image):
    self.popImage(img)
</snippet></ROW><ROW><id>10148201</id><snippet>image</snippet></ROW><ROW><id>10148201</id><snippet>image</snippet></ROW><ROW><id>10148201</id><snippet>image</snippet></ROW><ROW><id>10148201</id><snippet>image</snippet></ROW><ROW><id>10148201</id><snippet>image</snippet></ROW><ROW><id>10148201</id><snippet>ImagePairs</snippet></ROW><ROW><id>10148201</id><snippet>image</snippet></ROW><ROW><id>10148241</id><snippet>select round(CAST(ST_Distance_Sphere(ST_GeomFromText('POINT(49.794254 9.927489)',4326), ST_GeomFromText('POINT(50.084068 8.238381)',4326)) As numeric)/1000.0,2) as distance_km;
 distance_km 
-------------
      190.50
</snippet></ROW><ROW><id>10148241</id><snippet>select round(CAST(ST_Distance_Sphere(ST_GeomFromText('POINT(9.927489 49.794254)',4326), ST_GeomFromText('POINT(8.238381 50.084068)',4326)) As numeric)/1000.0,2) as distance_km;
 distance_km 
-------------
      125.10
</snippet></ROW><ROW><id>10148241</id><snippet>POINT(9.927489 49.794254)
POINT(8.238381 50.084068)
</snippet></ROW><ROW><id>10148272</id><snippet>&gt;&gt;&gt; def foo(extension):
...     return '*.' + ''.join('[%s%s]' % (e.lower(), e.upper()) for e in extension)
... 
&gt;&gt;&gt; foo('mov')
'*.[mM][oO][vV]'
</snippet></ROW><ROW><id>10148531</id><snippet>amin()</snippet></ROW><ROW><id>10148531</id><snippet>amax()</snippet></ROW><ROW><id>10148531</id><snippet>min()</snippet></ROW><ROW><id>10148531</id><snippet>max()</snippet></ROW><ROW><id>10148531</id><snippet>my_array.max()</snippet></ROW><ROW><id>10148531</id><snippet>numpy.linalg.dot()</snippet></ROW><ROW><id>10148535</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>10148535</id><snippet>request.GET['q']</snippet></ROW><ROW><id>10148535</id><snippet>request.POST['q']</snippet></ROW><ROW><id>10148535</id><snippet>def search(request):
  if 'q' in request.GET and request.GET['q']:
     // do something
</snippet></ROW><ROW><id>10148535</id><snippet>POST</snippet></ROW><ROW><id>10148535</id><snippet>GET</snippet></ROW><ROW><id>10148821</id><snippet>os.listdir(dir)</snippet></ROW><ROW><id>10148821</id><snippet>dir</snippet></ROW><ROW><id>10148821</id><snippet>[item for item in os.listdir(dir) if os.path.isdir(os.path.join(dir, item))]
</snippet></ROW><ROW><id>10148844</id><snippet>*</snippet></ROW><ROW><id>10148844</id><snippet>searchterms = list(itertools.product(*lists))
</snippet></ROW><ROW><id>10148855</id><snippet>for column in array.T:
   some_function(column)
</snippet></ROW><ROW><id>10148908</id><snippet>MySubWidget</snippet></ROW><ROW><id>10148908</id><snippet>MyWidget</snippet></ROW><ROW><id>10148989</id><snippet>x</snippet></ROW><ROW><id>10148989</id><snippet>x</snippet></ROW><ROW><id>10148989</id><snippet>def binary_search(x, a):
    lo = 0
    hi = len(a)

    while lo &lt; hi:
        mid = (lo + hi) // 2

        if a[mid] &lt; x:
            lo = mid + 1
        elif a[mid] &gt; x:
            hi = mid
        elif mid &gt; 0 and a[mid-1] == x:
            hi = mid
        else:
            return mid

    return -1
</snippet></ROW><ROW><id>10149068</id><snippet>pygame.draw.circle</snippet></ROW><ROW><id>10149110</id><snippet>map</snippet></ROW><ROW><id>10149110</id><snippet>In [16]: series.map(freq['count'])
Out[16]: 
0     0.12
1     0.06
2     0.20
3     0.11
4     0.02
5     0.13
6     0.14
7     0.11
8     0.12
9     0.16
10    0.20
&lt;snip&gt;
</snippet></ROW><ROW><id>10149110</id><snippet>In [22]: series[series.map(freq['count']) &gt; 0.16]
Out[22]: 
2     4
10    4
11    4
22    4
27    4
31    4
34    4
56    4
64    4
71    4
73    4
76    4
77    4
79    4
80    4
86    4
88    4
89    4
91    4
99    4
</snippet></ROW><ROW><id>10149202</id><snippet>def group_position(*args):
    """
    Get group position
    """
    from collections import defaultdict
    table = defaultdict(int)

    result = []
    for tup in zip(*args):
        result.append(table[tup])
        table[tup] += 1

    return np.array(result)
</snippet></ROW><ROW><id>10149202</id><snippet>In [49]: group_position(df['Z'], df['A'])
Out[49]: array([0, 1, 2, 0, 1, 0, 1, 2, 0, 0])
</snippet></ROW><ROW><id>10149202</id><snippet>In [52]: df
Out[52]: 
     Z    A    beta2      M  shell
0  100  200  0.31120  197.2 -4.213
1  100  200 -0.41970  202.0 -1.143
2  100  200  0.03205  203.0  0.000
3  100  201  0.29670  191.0 -4.434
4  100  201 -0.48930  196.1 -4.691
5  100  202  0.30840  183.4 -4.134
6  100  202 -0.48730  188.2 -4.750
7  100  202 -0.24830  188.4 -1.106
8  100  203  0.30690  177.1 -4.355
9  101  203 -0.49560  182.5 -5.217

In [53]: df['pos'] = group_position(df['Z'], df['A'])

In [54]: df.set_index(['Z', 'A', 'pos']).unstack('pos')
Out[54]: 
          beta2                       M                shell              
pos           0       1        2      0      1      2      0      1      2
Z   A                                                                     
100 200  0.3112 -0.4197  0.03205  197.2  202.0  203.0 -4.213 -1.143  0.000
    201  0.2967 -0.4893      NaN  191.0  196.1    NaN -4.434 -4.691    NaN
    202  0.3084 -0.4873 -0.24830  183.4  188.2  188.4 -4.134 -4.750 -1.106
    203  0.3069     NaN      NaN  177.1    NaN    NaN -4.355    NaN    NaN
101 203 -0.4956     NaN      NaN  182.5    NaN    NaN -5.217    NaN    NaN
</snippet></ROW><ROW><id>10149202</id><snippet>In [61]: result = df.set_index(['Z', 'A', 'pos']).unstack('pos')

In [62]: result.rename(columns=lambda x: '%s[%d]' % (x[0], x[1]+1)).reset_index()
Out[62]: 
     Z    A  beta2[1]  beta2[2]  beta2[3]   M[1]   M[2]   M[3]  shell[1]  shell[2]  shell[3]
0  100  200    0.3112   -0.4197   0.03205  197.2  202.0  203.0    -4.213    -1.143     0.000
1  100  201    0.2967   -0.4893       NaN  191.0  196.1    NaN    -4.434    -4.691       NaN
2  100  202    0.3084   -0.4873  -0.24830  183.4  188.2  188.4    -4.134    -4.750    -1.106
3  100  203    0.3069       NaN       NaN  177.1    NaN    NaN    -4.355       NaN       NaN
4  101  203   -0.4956       NaN       NaN  182.5    NaN    NaN    -5.217       NaN       NaN
</snippet></ROW><ROW><id>10149244</id><snippet>k</snippet></ROW><ROW><id>10149244</id><snippet>i</snippet></ROW><ROW><id>10149244</id><snippet>k</snippet></ROW><ROW><id>10149244</id><snippet>i</snippet></ROW><ROW><id>10149358</id><snippet>import os
## first file in current dir (with full path)
file = os.path.join(os.getcwd(), os.listdir(os.getcwd())[0])
file
os.path.dirname(file) ## directory of file
os.path.dirname(os.path.dirname(file)) ## directory of directory of file
...
</snippet></ROW><ROW><id>10149358</id><snippet>dir = os.path.dirname(os.path.dirname(file)) ## dir of dir of file
## once you're at the directory level you want, with the desired directory as the final path node:
dirname1 = os.path.basename(dir) 
dirname2 = os.path.split(dir)[1] ## if you look at the documentation, this is exactly what os.path.basename does.
</snippet></ROW><ROW><id>10149367</id><snippet>QDialog</snippet></ROW><ROW><id>10149367</id><snippet>reject()</snippet></ROW><ROW><id>10149367</id><snippet>Rejected</snippet></ROW><ROW><id>10149367</id><snippet>reject</snippet></ROW><ROW><id>10149367</id><snippet>super(NameOfClass, self).reject()
</snippet></ROW><ROW><id>10149367</id><snippet>self.reject()
</snippet></ROW><ROW><id>10149376</id><snippet>def sasquatchicorn(name):
    return property(lambda self: getattr(self, name) + ' sasquatch',
                    lambda self, val: setattr(self, name, val + ' unicorns'))

class Foo(object):
    bar = sasquatchicorn('_bar')
    baz = sasquatchicorn('_baz')
</snippet></ROW><ROW><id>10149376</id><snippet>def sasquatchify(val):
    return val + ' sasquatch'

def unicornify(val):
    return val + ' unicorns'

def getset(name, getting, setting):
    return property(lambda self: getting(getattr(self, name)),
                    lambda self, val: setattr(self, name, setting(val)))

class Foo(object):
    bar = getset('_bar', sasquatchify, unicornify)
    baz = getset('_baz', sasquatchify, unicornify)
</snippet></ROW><ROW><id>10149439</id><snippet>In [1]: scoredict = {('83', '93'): '81937', ('88', '86'): '33576', ('96', '97'): '01084', 
   ...: ('81', '95'): '48534', ('84', '72'): '11235', ('77', '80'): '01835', ('90', '83'): 
   ...: '39488', ('75', '74'): '31049', ('80', '62'): '10188', ('85', '86'): '63011', 
   ...: ('66', '89'): '58272'}

In [2]: scoredict['83','93']
Out[2]: '81937'
</snippet></ROW><ROW><id>10149447</id><snippet>from operator import itemgetter

# Make the word list.
word_list = ['my', 'bro', 'myline'] 

# Do your code here to create ave_list

# Fetch the min index and min value of ave_list
min_index, minvalue = min(enumerate(ave_list), key = itemgetter(1) )

# Now get the word at the same min index location.
min_word = word_list[min_index] 
</snippet></ROW><ROW><id>10149508</id><snippet>+=</snippet></ROW><ROW><id>10149508</id><snippet>-=</snippet></ROW><ROW><id>10149508</id><snippet>/=</snippet></ROW><ROW><id>10149508</id><snippet>&gt;&gt;&gt; def foo(a):
...     a += 10
... 
&gt;&gt;&gt; a = numpy.arange(10)
&gt;&gt;&gt; a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&gt;&gt;&gt; foo(a)
&gt;&gt;&gt; a
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
</snippet></ROW><ROW><id>10149508</id><snippet>&gt;&gt;&gt; def normalize_inplace(array, imin=-1, imax=1):
...         dmin = array.min()
...         dmax = array.max()
...         array -= dmin
...         array *= imax - imin
...         array /= dmax - dmin
...         array += imin
...     
&gt;&gt;&gt; def normalize_copy(array, imin=-1, imax=1):
...         dmin = array.min()
...         dmax = array.max()
...         return imin + (imax - imin) * (array - dmin) / (dmax - dmin)
... 
&gt;&gt;&gt; a = numpy.arange(10000, dtype='f')
&gt;&gt;&gt; %timeit normalize_inplace(a)
10000 loops, best of 3: 144 us per loop
&gt;&gt;&gt; %timeit normalize_copy(a)
10000 loops, best of 3: 146 us per loop
&gt;&gt;&gt; a = numpy.arange(1000000, dtype='f')
&gt;&gt;&gt; %timeit normalize_inplace(a)
100 loops, best of 3: 12.8 ms per loop
&gt;&gt;&gt; %timeit normalize_copy(a)
100 loops, best of 3: 16.4 ms per loop
</snippet></ROW><ROW><id>10149641</id><snippet>import numpy as np
from scipy.optimize import leastsq
import matplotlib.pyplot as plt

######################################
# Setting up test data
def norm(x, mean, sd):
  norm = []
  for i in range(x.size):
    norm += [1.0/(sd*np.sqrt(2*np.pi))*np.exp(-(x[i] - mean)**2/(2*sd**2))]
  return np.array(norm)

mean1, mean2 = 0, -2
std1, std2 = 0.5, 1 

x = np.linspace(-20, 20, 500)
y_real = norm(x, mean1, std1) + norm(x, mean2, std2)

######################################
# Solving
m, dm, sd1, sd2 = [5, 10, 1, 1]
p = [m, dm, sd1, sd2] # Initial guesses for leastsq
y_init = norm(x, m, sd1) + norm(x, m + dm, sd2) # For final comparison plot

def res(p, y, x):
  m, dm, sd1, sd2 = p
  m1 = m
  m2 = m1 + dm
  y_fit = norm(x, m1, sd1) + norm(x, m2, sd2)
  err = y - y_fit
  return err

plsq = leastsq(res, p, args = (y_real, x))

y_est = norm(x, plsq[0][0], plsq[0][2]) + norm(x, plsq[0][0] + plsq[0][1], plsq[0][3])

plt.plot(x, y_real, label='Real Data')
plt.plot(x, y_init, 'r.', label='Starting Guess')
plt.plot(x, y_est, 'g.', label='Fitted')
plt.legend()
plt.show()
</snippet></ROW><ROW><id>10149656</id><snippet>def main():
    stu = Student(" ", 0.0, 0.0)
    credits = int(input("Enter Credit Hours "))
    assert credits &gt; 0 and credits &lt; 4, "Please enter a number of Credit Hours between 0 and 4."
</snippet></ROW><ROW><id>10149656</id><snippet>while</snippet></ROW><ROW><id>10149656</id><snippet>def main():
    stu = Student(" ", 0.0, 0.0)
    while True:
        credits = int(input("Enter Credit Hours "))
        if credits &gt; 0 and credits &lt; 4:
            break
        else:
            print("Please enter a number of Credit Hours between 0 and 4")

    while True:
        gradePoint = float(input("Enter Grade Point"))
        if gradePoint &lt;= 4.0:
            break
        else:
            print("Please enter a Grade Point that is less then 4.")

    stu.addGrade(gradePoint,credits)
    output = stu.gpa()
    print("\nStudent GPA is: ", output)
</snippet></ROW><ROW><id>10149676</id><snippet>--prefix</snippet></ROW><ROW><id>10149783</id><snippet>import socket
import sys

def main():
    if len(sys.argv) &lt; 2:
        print("Usage: dnscheck hostname [hostname...]")
    else:
        for host in sys.argv[1:]:
            try:
                ip = socket.gethostbyname(host)
                print("{} resolves to {}".format(host, ip))
            except socket.gaierror:
                print("Could not resolve {}".format(host))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>10149868</id><snippet>or</snippet></ROW><ROW><id>10149868</id><snippet>or</snippet></ROW><ROW><id>10149868</id><snippet>in</snippet></ROW><ROW><id>10149868</id><snippet>if "a" in someList or "á" in someList or...</snippet></ROW><ROW><id>10149868</id><snippet>if any(c in someList for c in ("a", "á", "à", "ã", "â")):
    ...
</snippet></ROW><ROW><id>10149868</id><snippet>or</snippet></ROW><ROW><id>10149868</id><snippet>someList.remove("a") or someList.remove("á") or someList.remove("à")...</snippet></ROW><ROW><id>10149868</id><snippet>someList.remove("a"); someList.remove("á");...</snippet></ROW><ROW><id>10149868</id><snippet>chars_to_remove = set(("a", "á", "à", "ã", "â"))
someList = [c for c in someList if c not in chars_to_remove]
</snippet></ROW><ROW><id>10149868</id><snippet>someList[:] = (c for c in someList if c not in chars_to_remove)
</snippet></ROW><ROW><id>10149891</id><snippet>G = [[0] * 11 for x in range(11)]
</snippet></ROW><ROW><id>10150008</id><snippet>"".join(s3)     
return s3
</snippet></ROW><ROW><id>10150008</id><snippet>"".join(s3)
</snippet></ROW><ROW><id>10150008</id><snippet>s3</snippet></ROW><ROW><id>10150008</id><snippet>return ''.join(s3)
</snippet></ROW><ROW><id>10150023</id><snippet>&gt;&gt;&gt; import os.path, time
&gt;&gt;&gt; f = open('test.test')
&gt;&gt;&gt; data = f.read()
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; print "last modified: %s" % time.ctime(os.path.getmtime('test.test'))
last modified: Fri Apr 13 20:39:21 2012
&gt;&gt;&gt; print "created : %s" % time.ctime(os.path.getctime('test.test'))
created : Fri Apr 13 20:39:21 2012
</snippet></ROW><ROW><id>10150044</id><snippet>return input in operatorlist
</snippet></ROW><ROW><id>10150120</id><snippet>&lt;?xml version="1.0" encoding="</snippet></ROW><ROW><id>10150120</id><snippet>"?&gt;</snippet></ROW><ROW><id>10150120</id><snippet>s = u"עברית"
data_unicode = u"""&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;spellrequest textalreadyclipped="0" ignoredups="1" ignoredigits="1" ignoreallcaps="0"&gt;
&lt;text&gt;%s&lt;/text&gt;
&lt;/spellrequest&gt;
""" % s

data_octets = data_unicode.encode('utf-8')
</snippet></ROW><ROW><id>10150120</id><snippet>content-type</snippet></ROW><ROW><id>10150120</id><snippet>con = httplib.HTTPSConnection("www.google.com")
con.request("POST",
            "/tbproxy/spell?lang=he", 
            data_octets, {'content-type': 'text/xml; charset=utf-8'})
</snippet></ROW><ROW><id>10150120</id><snippet>&gt;&gt;&gt; from cgi import escape
&gt;&gt;&gt; from urllib import urlencode
&gt;&gt;&gt; import httplib
&gt;&gt;&gt; 
&gt;&gt;&gt; template = u"""&lt;?xml version="1.0" encoding="UTF-8"?&gt;
... &lt;spellrequest textalreadyclipped="0" ignoredups="1" ignoredigits="1" ignoreallcaps="0"&gt;
... &lt;text&gt;%s&lt;/text&gt;
... &lt;/spellrequest&gt;
... """
&gt;&gt;&gt; 
&gt;&gt;&gt; def chkspell(word, lang='en'):
...     data_octets = (template % escape(word)).encode('utf-8')
...     con = httplib.HTTPSConnection("www.google.com")
...     con.request("POST",
...         "/tbproxy/spell?" + urlencode({'lang': lang}),
...         data_octets,
...         {'content-type': 'text/xml; charset=utf-8'})
...     req = con.getresponse()
...     return req.read()
... 
&gt;&gt;&gt; chkspell('baseball')
'&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;spellresult error="0" clipped="0" charschecked="8"&gt;&lt;/spellresult&gt;'
&gt;&gt;&gt; chkspell(corpus, 'he')
'&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;spellresult error="0" clipped="0" charschecked="5"&gt;&lt;/spellresult&gt;'
</snippet></ROW><ROW><id>10150120</id><snippet>&gt;&gt;&gt; corpus = u"עברית"
&gt;&gt;&gt; print corpus[0]
ע
</snippet></ROW><ROW><id>10150278</id><snippet>output = (lst[:3] # take the list before element 3
          + # and add
          lst[3:] # the list from element 3 on
          [::-1] # reversed
         )
</snippet></ROW><ROW><id>10150278</id><snippet>output = lst[:3] + lst[3:][::-1]
</snippet></ROW><ROW><id>10150278</id><snippet>lst[3:] = lst[3:][::-1]
</snippet></ROW><ROW><id>10150323</id><snippet>&gt;&gt;&gt; class MyObject(object):
...     pass
... 
&gt;&gt;&gt; [MyObject(), MyObject()]
[&lt;__main__.MyObject object at 0x0480E650&gt;,
 &lt;__main__.MyObject object at 0x0480E350&gt;]
</snippet></ROW><ROW><id>10150323</id><snippet>values</snippet></ROW><ROW><id>10150323</id><snippet># This list contains a Blog object.
&gt;&gt;&gt; Blog.objects.filter(name__startswith='Beatles')
[&lt;Blog: Beatles Blog&gt;]

# This list contains a dictionary.
&gt;&gt;&gt; Blog.objects.filter(name__startswith='Beatles').values()
[{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]
</snippet></ROW><ROW><id>10150471</id><snippet>g.background = form</snippet></ROW><ROW><id>10150471</id><snippet>try:
    g = BackgroundModel.objects.get(user=request.user)
except BackgroundModel.DoesNotExist:
    data = form.save(commit=False)
    data.user = request.user
    data.save()
else:
    g.background = form.save(commit=False).background
    g.save()
    # or
    BackgroundModelForm(request.POST, request.FILES, instance=g).save()
</snippet></ROW><ROW><id>10150534</id><snippet>self.emit</snippet></ROW><ROW><id>10150534</id><snippet>self.connect()</snippet></ROW><ROW><id>10150534</id><snippet>changed_signal</snippet></ROW><ROW><id>10150607</id><snippet>mult(newEquation, node)
</snippet></ROW><ROW><id>10150689</id><snippet>sudo aptitude install python-wxgtk2.8
</snippet></ROW><ROW><id>10150704</id><snippet>.readlines()</snippet></ROW><ROW><id>10150704</id><snippet>f</snippet></ROW><ROW><id>10150704</id><snippet>defaultdict</snippet></ROW><ROW><id>10150704</id><snippet>d</snippet></ROW><ROW><id>10150704</id><snippet>output</snippet></ROW><ROW><id>10150704</id><snippet>from __future__ import with_statement
from collections import defaultdict
from operator import itemgetter

d = defaultdict(int)

with open('dict-count.txt') as f:
    for line in f:
        k, v = line.split()
        d[k] += int(v)

lst = d.items()

# sort twice: once for alphabetical order, then for frequency (descending).
# Because the Python sort is "stable", we will end up with descending
# frequency, but alphabetical order for any frequency values that are equal.
lst.sort(key=itemgetter(0))
lst.sort(key=itemgetter(1), reverse=True)

for key, value in lst:
    print("%10s| %d" % (key, value))
</snippet></ROW><ROW><id>10150809</id><snippet>request</snippet></ROW><ROW><id>10150809</id><snippet>_wrapper</snippet></ROW><ROW><id>10150809</id><snippet>request</snippet></ROW><ROW><id>10150921</id><snippet>grid_forget()</snippet></ROW><ROW><id>10150921</id><snippet>destroy()</snippet></ROW><ROW><id>10150921</id><snippet>grid()</snippet></ROW><ROW><id>10150921</id><snippet>result_screen</snippet></ROW><ROW><id>10150921</id><snippet>go_back</snippet></ROW><ROW><id>10150921</id><snippet>import tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        self.score = 0

        self.buttonDic = {
        'Brown Rice':0,
        'Banzai Veg':0,
        'Red Cabbage':0,
        'Black Beans':0
        }

        aFrame = self.aFrame = tk.Frame(self)
        aFrame.grid()

        for key in self.buttonDic:
            self.buttonDic[key] = tk.IntVar()
            aCheckButton = tk.Checkbutton(aFrame, text=key,
                                            variable=self.buttonDic[key])
            aCheckButton.grid(sticky='w')

        submitButton = tk.Button(aFrame, text="Submit",
                                        command=self.query_checkbuttons)
        submitButton.grid()

        self.trueList = ['Brown Rice', 'Black Beans']

    def query_checkbuttons(self):
        for key, value in self.buttonDic.items():
            state = value.get()
            if state != 0:
                if key in self.trueList:
                    self.score += 1
                else:
                    self.score -= 1
                self.buttonDic[key].set(0)
        self.result_screen()

    def result_screen(self):
        self.aFrame.grid_forget()
        self.rFrame = tk.Frame(self)
        self.rFrame.grid()
        self.scoreText = tk.Text(self.rFrame, width=20, height=1)
        self.scoreText.grid()
        self.scoreText.insert('end', self.score)
        self.after(3000, func=self.go_back)

    def go_back(self):
        self.score = 0
        self.rFrame.destroy()
        self.aFrame.grid()


gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>10150958</id><snippet>dict</snippet></ROW><ROW><id>10150958</id><snippet>dict</snippet></ROW><ROW><id>10150958</id><snippet>str</snippet></ROW><ROW><id>10150958</id><snippet>int</snippet></ROW><ROW><id>10150958</id><snippet>dct = dict((tuple(map(int, key)), value) for key, value in str_dict.iteritems())
</snippet></ROW><ROW><id>10150958</id><snippet>dct = {(8, 9): 'D', (4, 7): 'C', (6, 1): 'K', (7, 7): 'H', 
       (1, 4): 'A', (3, 8): 'B', (2, 0): 'F', (3, 9): 'G', 
       (4, 2): 'E', (8, 6): 'I', (5, 3): 'J'}
</snippet></ROW><ROW><id>10150958</id><snippet>max</snippet></ROW><ROW><id>10150958</id><snippet>sum</snippet></ROW><ROW><id>10150958</id><snippet>key = max(d, key=sum)
# (8, 9) is the key with the highest average value
</snippet></ROW><ROW><id>10150958</id><snippet>sum</snippet></ROW><ROW><id>10150958</id><snippet>value = dct[key]
# 'D' is the value for (8, 9)
</snippet></ROW><ROW><id>10150981</id><snippet>trace()</snippet></ROW><ROW><id>10150981</id><snippet>memoize()</snippet></ROW><ROW><id>10150981</id><snippet>f(x)   # this is your original function

trace(f(x))   # trace "wraps" it and returns a wrapped object

memoize(trace(f(x)))   # memoize "wraps" it and returns a new wrapped function object
</snippet></ROW><ROW><id>10150981</id><snippet>fib</snippet></ROW><ROW><id>10150981</id><snippet>trace(fib)</snippet></ROW><ROW><id>10150981</id><snippet>g</snippet></ROW><ROW><id>10150981</id><snippet>fib</snippet></ROW><ROW><id>10150981</id><snippet>fib.__name__</snippet></ROW><ROW><id>10150981</id><snippet>memoize(fib)</snippet></ROW><ROW><id>10150981</id><snippet>g</snippet></ROW><ROW><id>10150981</id><snippet>fib</snippet></ROW><ROW><id>10150981</id><snippet>fib</snippet></ROW><ROW><id>10151097</id><snippet>some_name = some_name_or_object
</snippet></ROW><ROW><id>10151097</id><snippet>a = 10
b = 10
a is b
</snippet></ROW><ROW><id>10151097</id><snippet>True</snippet></ROW><ROW><id>10151097</id><snippet>10</snippet></ROW><ROW><id>10151097</id><snippet>10</snippet></ROW><ROW><id>10151097</id><snippet>10</snippet></ROW><ROW><id>10151097</id><snippet>10</snippet></ROW><ROW><id>10151097</id><snippet>a = object()
b = object()
a is b
</snippet></ROW><ROW><id>10151097</id><snippet>False</snippet></ROW><ROW><id>10151097</id><snippet>a = object()
b = a
a is b
</snippet></ROW><ROW><id>10151097</id><snippet>True</snippet></ROW><ROW><id>10151234</id><snippet>%s</snippet></ROW><ROW><id>10151234</id><snippet>execute()</snippet></ROW><ROW><id>10151234</id><snippet>addthis = "INSERT INTO my_table (something) VALUES (%s);"
mark.execute(addthis, ('a string you wish to insert',))
</snippet></ROW><ROW><id>10151250</id><snippet>res = map(lambda x: (float(x[0][0]) * 360.) / (float(x[0][1]) * 180.) + float(x[1]), mydict.items())
</snippet></ROW><ROW><id>10151250</id><snippet>[357.2, 633.37]
</snippet></ROW><ROW><id>10151250</id><snippet>sorted(res, reverse=True)[0:3]
</snippet></ROW><ROW><id>10151301</id><snippet>json</snippet></ROW><ROW><id>10151461</id><snippet>list</snippet></ROW><ROW><id>10151461</id><snippet>&gt;&gt;&gt; list = ["q", "w", ["D", ["E", "I"]]]
</snippet></ROW><ROW><id>10151461</id><snippet>list</snippet></ROW><ROW><id>10151461</id><snippet>list</snippet></ROW><ROW><id>10151576</id><snippet>, x</snippet></ROW><ROW><id>10151576</id><snippet>score.items()</snippet></ROW><ROW><id>10151576</id><snippet>score.iteritems()</snippet></ROW><ROW><id>10151760</id><snippet>setLevel</snippet></ROW><ROW><id>10151760</id><snippet>Logger</snippet></ROW><ROW><id>10151760</id><snippet>LOGGER = logging.getLogger('your.module.file.name')
LOGGER.setLevel(_level)
LOGGER.info('foo')
</snippet></ROW><ROW><id>10151760</id><snippet>logging.basicConfig(level=_level)
logging.info('foo')
</snippet></ROW><ROW><id>10151935</id><snippet>&gt;&gt;&gt; data=['column1', '', '', '', 'column2', '', '']
&gt;&gt;&gt; header=data[:]
&gt;&gt;&gt; for i in range(1,len(header)):
    if not header[i]:
        header[i]=header[i-1]


&gt;&gt;&gt; header
['column1', 'column1', 'column1', 'column1', 'column2', 'column2', 'column2']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10152145</id><snippet>sorted(zip(score, name), reverse=True)[:3]
</snippet></ROW><ROW><id>10152145</id><snippet>&gt;&gt;&gt; zip(score, name)
[(350, 'Ryan'), (914, 'Stacy'), (569, 'Jenna'), (223, 'Peter'), (947, 'Sophie'), (284, 'Bryan'), (567, 'Cole'), (333, 'Andrea'), (697, 'Emily'), (245, 'Blake'), (227, 'Mike'), (785, 'Stephan'), (120, 'Rob'), (794, 'Eliza'), (343, 'Heather'), (773, 'Daniel'), (293, 'Elisabeth'), (995, 'Samantha')]
</snippet></ROW><ROW><id>10152145</id><snippet>[:3]</snippet></ROW><ROW><id>10152145</id><snippet>[0:3]</snippet></ROW><ROW><id>10152495</id><snippet>Win32_Processor</snippet></ROW><ROW><id>10152495</id><snippet>To determine if hyperthreading is enabled for the processor, compare
NumberOfLogicalProcessors and NumberOfCores. If hyperthreading is 
enabled in the BIOS for the processor, then NumberOfCores is less 
than NumberOfLogicalProcessors. For example, a dual-processor system 
that contains two processors enabled for hyperthreading can run four 
threads or programs or simultaneously. In this case, NumberOfCores is 2 
and NumberOfLogicalProcessors is 4.
</snippet></ROW><ROW><id>10152495</id><snippet>/proc/cpuinfo</snippet></ROW><ROW><id>10152495</id><snippet>cat /proc/cpuinfo | egrep 'physical|processor' | grep -v sizes | \
                    tail -n2 | cut -d : -f 2`
</snippet></ROW><ROW><id>10152597</id><snippet>from multiprocessing import Pool
import numpy as np

class RowProcessor(object):
    def __init__(self, src):
        self.__src = src
    def __call__(self, row):
        return np.sum(self.__src[row])

def main():
    src=np.ones((100,100))
    p = RowProcessor(src)

    pool=Pool(processes=16)
    rows = pool.map(p, range(100))
    print rows

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>10152614</id><snippet>tp_as_mapping</snippet></ROW><ROW><id>10152614</id><snippet>mp_subscript</snippet></ROW><ROW><id>10152614</id><snippet>PyObject *</snippet></ROW><ROW><id>10152614</id><snippet>PyObject_GetItem()</snippet></ROW><ROW><id>10152614</id><snippet>o[key]</snippet></ROW><ROW><id>10152614</id><snippet>tp_as_mapping</snippet></ROW><ROW><id>10152614</id><snippet>int</snippet></ROW><ROW><id>10152614</id><snippet>tp_as_sequence</snippet></ROW><ROW><id>10152789</id><snippet>a = (3, 5, 5)
for i, var in enumerate(a):
    if i == len(a) - 1:
        print 'last element:'
    print var
</snippet></ROW><ROW><id>10152789</id><snippet>In [1]: a = (3, 5, 5)
In [2]: for i, var in enumerate(a):
   ...:     if i == len(a) - 1:
   ...:         print 'last element:'
   ...:     print var
   ...:
3
5
last element:
5
</snippet></ROW><ROW><id>10152826</id><snippet># assuming N, n and m exist.
In [1]: import random
In [3]: indices = [(m, n) for m in range(N) for n in range(N)]
In [4]: random_indices = random.sample(indices, n + m)
In [5]: ones = random_indices[:n]
In [6]: twos = random_indices[n:]
</snippet></ROW><ROW><id>10152826</id><snippet>ones</snippet></ROW><ROW><id>10152826</id><snippet>twos</snippet></ROW><ROW><id>10152826</id><snippet>In [7]: import itertools
In [8]: indices = list(itertools.product(range(N), range(N)))
</snippet></ROW><ROW><id>10153025</id><snippet>1.4.0-final</snippet></ROW><ROW><id>10153025</id><snippet>startproject</snippet></ROW><ROW><id>10153025</id><snippet>$ django-admin.py startproject helloWorldProject
</snippet></ROW><ROW><id>10153025</id><snippet>helloWorldProject</snippet></ROW><ROW><id>10153025</id><snippet>views.py</snippet></ROW><ROW><id>10153025</id><snippet>helloWorldProject/helloWorldProject</snippet></ROW><ROW><id>10153025</id><snippet>from django.http import HttpResponse

def hello(request):
    return HttpResponse("Hello world")
</snippet></ROW><ROW><id>10153025</id><snippet>urls.py</snippet></ROW><ROW><id>10153025</id><snippet>views.py</snippet></ROW><ROW><id>10153025</id><snippet>from django.conf.urls.defaults import patterns, include, url

urlpatterns = patterns('',
  url(r'^$', 'helloWorldProject.views.hello', name='hello'),
)
</snippet></ROW><ROW><id>10153025</id><snippet>$ python manage.py runserver
</snippet></ROW><ROW><id>10153025</id><snippet>Validating models...

0 errors found
Django version 1.4, using settings 'helloWorldProject.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
</snippet></ROW><ROW><id>10153025</id><snippet>('^hello/$', 'helloWorldProject.views.hello', name='hello'),</snippet></ROW><ROW><id>10153490</id><snippet>url</snippet></ROW><ROW><id>10153490</id><snippet>urls.py</snippet></ROW><ROW><id>10153490</id><snippet>view</snippet></ROW><ROW><id>10153490</id><snippet>{% for invoice in client.invoices %}
    {% include "invoice-detail.html" with invoice=invoice %}
{% endfor %}
</snippet></ROW><ROW><id>10153490</id><snippet>client</snippet></ROW><ROW><id>10153849</id><snippet>class BookSearch(webapp2.requestHandler):
    def post(self):
        b = Books.all().filter("subject =", 'SUB').get()
        a = Author.all().filter("name =", "ATH").get()
        ret = Match.all().filter("bk =", b).filter("ath =", a)
        self.response.out.write(ret.count())
</snippet></ROW><ROW><id>10153895</id><snippet>python</snippet></ROW><ROW><id>10153895</id><snippet>~/.ipython/profile_default/startup/00-virtualenv.py</snippet></ROW><ROW><id>10153895</id><snippet>from __future__ import print_function
import site
from os import environ
from os.path import join
from sys import version_info

if 'VIRTUAL_ENV' in environ:
    virtual_env = join(
        environ.get('VIRTUAL_ENV'),
        'lib',
        'python%d.%d' % version_info[:2],
        'site-packages'
    )
    site.addsitedir(virtual_env)
    print('VIRTUAL_ENV -&gt;', virtual_env)
    del virtual_env
    del site, environ, join, version_info
</snippet></ROW><ROW><id>10154154</id><snippet>sqlite3.exe</snippet></ROW><ROW><id>10154154</id><snippet>from binascii import unhexlify
import sqlite3

data = unhexlify('''\
6d73 7373 652e 6578 4e7c 4f74 6570 4b6e
7965 337c 3430 347c 347c 307c 5c7c 5200
6500 6700 6900 7300 7400 7200 7900 5c00
4d00 6100 6300 6800 6900 6e00 6500 5c00
5300 7900 7300 7400 6500 6d00 5c00 4300
7500 7200 7200 6500 6e00 7400 4300 6f00
6e00 7400 7200 6f00 6c00 5300 6500 7400
5c00 4300 6f00 6e00 7400 7200 6f00 6c00
5c00 5300 6500 7300 7300 6900 6f00 6e00
2000 4d00 6100 6e00 6100 6700 6500 7200'''.replace(' ','').replace('\n',''))

# OP's data dump must have been decoded from the original data
# as little-endian words, and is missing a final 0x00 byte.
# Byte-swapping and adding missing zero byte to get back what
# was likely the original binary data.
data = ''.join(a+b for a,b in zip(data[1::2],data[::2])) + '\x00'

with open('data.db','wb') as f:
    f.write(data)

def parsecreate(filename):
    with open(filename,'rb') as sourcefile:
        with sqlite3.connect("sqlite.db") as cx:
            cu = cx.cursor()
            cu.execute("create table data(id integer primary key,command text, ntfunc text, pid text, ppid text, handle text, roothandle text, genevalue text)")
            eachline = []
            for line in sourcefile:
                eachline = line.split('|')
                eachline[-1] = eachline[-1].decode('utf-16le')
                cu.execute("insert into data(command,ntfunc,pid,ppid,handle,roothandle,genevalue) values(?,?,?,?,?,?,?)",(eachline[0],eachline[1],eachline[2],eachline[3],eachline[4],eachline[5],eachline[-1]) )

parsecreate('data.db')
</snippet></ROW><ROW><id>10154154</id><snippet>C:\&gt;sqlite3 sqlite.db
SQLite version 3.7.9 2011-11-01 00:52:41
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; select * from data;
1|smss.exe|NtOpenKey|304|4|4|0|\Registry\Machine\System\CurrentControlSet\Control\Session Manager
</snippet></ROW><ROW><id>10154399</id><snippet>Model</snippet></ROW><ROW><id>10154399</id><snippet>django.db.models.base</snippet></ROW><ROW><id>10154399</id><snippet>__init__.py</snippet></ROW><ROW><id>10154399</id><snippet>models.Model</snippet></ROW><ROW><id>10154412</id><snippet>Product.objects.extra(select={'day': 'date( date_created )'}).values('day') \
               .annotate(available=Count('date_created'))
</snippet></ROW><ROW><id>10154510</id><snippet>settings.py</snippet></ROW><ROW><id>10154518</id><snippet>parsed.find('a').previousSibling # or something like that
</snippet></ROW><ROW><id>10154518</id><snippet>NavigableString</snippet></ROW><ROW><id>10154518</id><snippet>unicode</snippet></ROW><ROW><id>10154518</id><snippet>unicode</snippet></ROW><ROW><id>10154518</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('&lt;div class=a&gt;Category: &lt;a href="/"&gt;a link&lt;/a&gt;&lt;/div&gt;')
&gt;&gt;&gt; soup.find('a')
&lt;a href="/"&gt;a link&lt;/a&gt;
&gt;&gt;&gt; soup.find('a').previousSibling
u'Category: '
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10154650</id><snippet>mydb.commit()</snippet></ROW><ROW><id>10154650</id><snippet>import csv
import MySQLdb

mydb = MySQLdb.connect(host='localhost',
    user='root',
    passwd='',
    db='mydb')
cursor = mydb.cursor()

csv_data = csv.reader(file('students.csv'))
for row in csv_data:

    cursor.execute('INSERT INTO testcsv(names, \
          classes, mark )' \
          'VALUES("%s", "%s", "%s")', 
          row)
#close the connection to the database.
mydb.commit()
cursor.close()
print "Done"
</snippet></ROW><ROW><id>10154763</id><snippet>fig.savefig('samplefigure', bbox_extra_artists=(lgd,), bbox_inches='tight')
#Note that the bbox_extra_artists must be an iterable
</snippet></ROW><ROW><id>10154763</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.arange(-2*np.pi, 2*np.pi, 0.1)
fig = plt.figure(1)
ax = fig.add_subplot(111)
ax.plot(x, np.sin(x), label='Sine')
ax.plot(x, np.cos(x), label='Cosine')
ax.plot(x, np.arctan(x), label='Inverse tan')
handles, labels = ax.get_legend_handles_labels()
lgd = ax.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5,-0.1))
ax.grid('on')
fig.savefig('samplefigure', bbox_extra_artists=(lgd,), bbox_inches='tight')
</snippet></ROW><ROW><id>10154915</id><snippet>import signal, sys

# install a SIGALRM handler 

def handler(signum, frame):
    print "got signal, exiting"
    sys.exit(1)

signal.signal(signal.SIGALRM, handler)

# emit SIGALRM after 5 secs

signal.setitimer(signal.ITIMER_REAL, 5)

# do stuff

i = 1
while True:
    if i % 100000 == 0:
        print i
    i += 1
</snippet></ROW><ROW><id>10155081</id><snippet>json</snippet></ROW><ROW><id>10155081</id><snippet>json.loads()</snippet></ROW><ROW><id>10155081</id><snippet>json_decode()</snippet></ROW><ROW><id>10155081</id><snippet>json.dumps()</snippet></ROW><ROW><id>10155081</id><snippet>json_encode()</snippet></ROW><ROW><id>10155386</id><snippet>lambda</snippet></ROW><ROW><id>10155386</id><snippet>for</snippet></ROW><ROW><id>10155386</id><snippet>my_test  = 'test_name_dup'  
testlist = ['test_name', 'test_name_dup','test_name_dup_1', 'test_name_dup_3']

for i in xrange(1, len(testlist)):
    if my_test + '_' + str(i) not in testlist:
        break

print my_test + '_' + str(i)
&gt; test_name_dup_2
</snippet></ROW><ROW><id>10155386</id><snippet>lambda</snippet></ROW><ROW><id>10155386</id><snippet>import itertools as it

iterator = it.dropwhile(
    lambda n: '{0}_{1}'.format(my_test, n) in testlist,
    it.count(1))

print my_test + '_' + str(iterator.next())
&gt; test_name_dup_2
</snippet></ROW><ROW><id>10155386</id><snippet>dropwhile()</snippet></ROW><ROW><id>10155386</id><snippet>count(1)</snippet></ROW><ROW><id>10155386</id><snippet>1</snippet></ROW><ROW><id>10155386</id><snippet>dropwhile()</snippet></ROW><ROW><id>10155386</id><snippet>lambda</snippet></ROW><ROW><id>10155386</id><snippet>false</snippet></ROW><ROW><id>10155386</id><snippet>dropwhile()</snippet></ROW><ROW><id>10155386</id><snippet>next()</snippet></ROW><ROW><id>10155559</id><snippet>&gt;&gt;&gt; lst.extend([None]*additional_size)
</snippet></ROW><ROW><id>10155679</id><snippet>command</snippet></ROW><ROW><id>10155679</id><snippet>self.v = Button(master, text="Add text", command=Write)
</snippet></ROW><ROW><id>10155705</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; q = collections.deque(["herp", "derp", "blah", "what", "da.."])
&gt;&gt;&gt; q.appendleft('wuggah')
&gt;&gt;&gt; q.pop()
'da..'
&gt;&gt;&gt; q
deque(['wuggah', 'herp', 'derp', 'blah', 'what'])
</snippet></ROW><ROW><id>10155711</id><snippet>see</snippet></ROW><ROW><id>10155711</id><snippet>see</snippet></ROW><ROW><id>10155711</id><snippet>the_widget.see(index)
</snippet></ROW><ROW><id>10155711</id><snippet>index</snippet></ROW><ROW><id>10155801</id><snippet>django.utils.dateformat</snippet></ROW><ROW><id>10155801</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; from django.utils import dateformat
&gt;&gt;&gt; dateformat.format(datetime.datetime.now(), 'F j, Y, P')
u'April 14, 2012, 1:31 p.m.'
</snippet></ROW><ROW><id>10155801</id><snippet>P</snippet></ROW><ROW><id>10155801</id><snippet>strftime</snippet></ROW><ROW><id>10155897</id><snippet>def some_function(object_that_could_be_a_list):
    try:
        for element in object_that_could_be_a_list:
            some_function(element)
    except TypeError:
        ...
</snippet></ROW><ROW><id>10155987</id><snippet>a_list = ['foo', 'bar']
</snippet></ROW><ROW><id>10155987</id><snippet>list</snippet></ROW><ROW><id>10155987</id><snippet>a_list</snippet></ROW><ROW><id>10155987</id><snippet>a_list</snippet></ROW><ROW><id>10155987</id><snippet>a_list[:] = ['foo', 'bar']
</snippet></ROW><ROW><id>10155987</id><snippet>__setitem__</snippet></ROW><ROW><id>10155987</id><snippet>a_list</snippet></ROW><ROW><id>10155987</id><snippet>slice</snippet></ROW><ROW><id>10155987</id><snippet>list</snippet></ROW><ROW><id>10155987</id><snippet>__setitem__</snippet></ROW><ROW><id>10155987</id><snippet>slice</snippet></ROW><ROW><id>10155987</id><snippet>iter</snippet></ROW><ROW><id>10155987</id><snippet>slice</snippet></ROW><ROW><id>10155987</id><snippet>list</snippet></ROW><ROW><id>10155987</id><snippet>slice</snippet></ROW><ROW><id>10155987</id><snippet>list</snippet></ROW><ROW><id>10155987</id><snippet>a_list[:] = [] # deletes all the items in the list, equivalent to 'del a_list[:]'
</snippet></ROW><ROW><id>10155987</id><snippet>a_list[1:1] = [1, 2, 3] # inserts the new values at index 1 in the list
</snippet></ROW><ROW><id>10155987</id><snippet>step</snippet></ROW><ROW><id>10155987</id><snippet>&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; lst[::2] = []
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
ValueError: attempt to assign sequence of size 0 to extended slice of size 2
</snippet></ROW><ROW><id>10155987</id><snippet>a_list</snippet></ROW><ROW><id>10155987</id><snippet>a_list</snippet></ROW><ROW><id>10155987</id><snippet>a_list</snippet></ROW><ROW><id>10155987</id><snippet>__setitem__</snippet></ROW><ROW><id>10155987</id><snippet>slice</snippet></ROW><ROW><id>10156116</id><snippet>latin-1</snippet></ROW><ROW><id>10156116</id><snippet>try:
    # or codecs.open on Python 2
    filedata = open(filename, encoding='UTF-8').read() 
except:
    filedata = open(filename, encoding='other-single-byte-encoding').read() 
</snippet></ROW><ROW><id>10156116</id><snippet>chardet</snippet></ROW><ROW><id>10156116</id><snippet>UnicodeDamnit</snippet></ROW><ROW><id>10156116</id><snippet>chardet</snippet></ROW><ROW><id>10156137</id><snippet>count = db.Query().filter('when &gt;', two_minutes_ago).filter('when &lt;', one_minute_ago).count()
</snippet></ROW><ROW><id>10156137</id><snippet>two_minutes_ago</snippet></ROW><ROW><id>10156137</id><snippet>one_minute_ago</snippet></ROW><ROW><id>10156137</id><snippet>datetime</snippet></ROW><ROW><id>10156137</id><snippet>&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2012, 4, 14, 14, 26, 18, 343269)
&gt;&gt;&gt; datetime.datetime.now() - datetime.timedelta(minutes=1)
datetime.datetime(2012, 4, 14, 14, 25, 49, 860390)
</snippet></ROW><ROW><id>10156175</id><snippet>&gt;&gt;&gt; test = {"test": 1}
&gt;&gt;&gt; def update(dictionary,key,value):
...     dictionary[key] = value
... 
&gt;&gt;&gt; update(test, "test", 2)
&gt;&gt;&gt; test
{'test': 2}
</snippet></ROW><ROW><id>10156257</id><snippet>.iteritems()</snippet></ROW><ROW><id>10156257</id><snippet>.items()</snippet></ROW><ROW><id>10156257</id><snippet>for files in filelist:
   for avvendor, stuf in files["json"]["scans"].iteritems():
       if stuf["detected"]:
          #do something
</snippet></ROW><ROW><id>10156257</id><snippet>scans</snippet></ROW><ROW><id>10156257</id><snippet>"scans": {"nProtect": ...}</snippet></ROW><ROW><id>10156283</id><snippet>&gt;&gt;&gt; i.state = ISSUE_STATE[1]
</snippet></ROW><ROW><id>10156283</id><snippet>&gt;&gt;&gt; i.state = ISSUE_STATE[1][0]
</snippet></ROW><ROW><id>10156375</id><snippet>atexit</snippet></ROW><ROW><id>10156375</id><snippet>try:
    _count = int(open("/tmp/counter").read())
except IOError:
    _count = 0

def incrcounter(n):
    global _count
    _count = _count + n

def savecounter():
    open("/tmp/counter", "w").write("%d" % _count)

import atexit
atexit.register(savecounter)
</snippet></ROW><ROW><id>10156694</id><snippet>CREATE TABLE IF NOT EXISTS ...</snippet></ROW><ROW><id>10156804</id><snippet>numbers.Integral</snippet></ROW><ROW><id>10156804</id><snippet>numbers.Rational</snippet></ROW><ROW><id>10156804</id><snippet>&gt;&gt;&gt; import numbers
&gt;&gt;&gt; isinstance(1337, numbers.Integral)
True
&gt;&gt;&gt; isinstance(1337, numbers.Rational)
True
&gt;&gt;&gt; issubclass(numbers.Integral, numbers.Rational)
True
</snippet></ROW><ROW><id>10156804</id><snippet>1</snippet></ROW><ROW><id>10156804</id><snippet>@property
def numerator(self):
    """Integers are their own numerators."""
    return +self

@property
def denominator(self):
    """Integers have a denominator of 1."""
    return 1
</snippet></ROW><ROW><id>10156959</id><snippet>day_counts = Post.objects.filter(author=someuser).values('posted_day').annotate(
                                       dailycount=Count('posted_day')).order_by()
</snippet></ROW><ROW><id>10156959</id><snippet>values('posted_day')</snippet></ROW><ROW><id>10156959</id><snippet>order_by</snippet></ROW><ROW><id>10156959</id><snippet>posted_day</snippet></ROW><ROW><id>10156959</id><snippet>annotate()</snippet></ROW><ROW><id>10156959</id><snippet>values()</snippet></ROW><ROW><id>10156959</id><snippet>values</snippet></ROW><ROW><id>10156959</id><snippet>list</snippet></ROW><ROW><id>10156959</id><snippet>dicts</snippet></ROW><ROW><id>10156959</id><snippet>[{'posted-day': 'the-first-day', 'dailycount': 2}, . . . ,
 {'posted-day': 'the-last-day', 'dailycount': 3}]
</snippet></ROW><ROW><id>10156959</id><snippet>last_day_dict = day_counts[-1]
date = last_day_dict['posted_day']
count = last_day_dict['dailycount']
</snippet></ROW><ROW><id>10156959</id><snippet>date</snippet></ROW><ROW><id>10156959</id><snippet>today()</snippet></ROW><ROW><id>10156959</id><snippet>count</snippet></ROW><ROW><id>10157209</id><snippet>res1.rx('sigma_stat', 'fit', 'L=300', 'AR=1.5', 'SO=3', 'T=30')
</snippet></ROW><ROW><id>10157480</id><snippet>ideapad/views.py</snippet></ROW><ROW><id>10157480</id><snippet>from django.views.generic import ListView
from ideapad.models import Idea
from sauce.decorators import SortQuerysetMixin

class IndexListView(SortQuerysetMixin, ListView):
    default_sort = '-date'
    model = Idea
    template_name = 'ideapad/index.html'
    context_object_name = 'ideas'
</snippet></ROW><ROW><id>10157480</id><snippet>sauce/decorators.py</snippet></ROW><ROW><id>10157480</id><snippet>class SortQuerysetMixin(object):
    def get_queryset(self):
        queryset = super(SortQuerysetMixin, self).get_queryset()
        sortmethod = self.request.GET.get('sort', self.default_sort)
        if hasattr(queryset, 'order_by'):
            queryset = queryset.order_by(sortmethod)
        return queryset
</snippet></ROW><ROW><id>10157754</id><snippet>OPTIONS http://localhost:8080/ 501 (Unsupported method ('OPTIONS'))</snippet></ROW><ROW><id>10157754</id><snippet>Access-Control*</snippet></ROW><ROW><id>10157754</id><snippet>GET</snippet></ROW><ROW><id>10157754</id><snippet>OPTIONS</snippet></ROW><ROW><id>10157754</id><snippet>do_OPTIONS</snippet></ROW><ROW><id>10157754</id><snippet>def do_OPTIONS(self):
    if self.path in ('*', '/list'):
        self.send_response(200)
        self.send_header('Allow', 'GET, OPTIONS')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Headers', 'X-Request, X-Requested-With')
    else:
        self.send_response(404)
    self.send_header('Content-Length', '0')
    self.end_headers()
</snippet></ROW><ROW><id>10157765</id><snippet>for line in ("file"):
</snippet></ROW><ROW><id>10157765</id><snippet>line</snippet></ROW><ROW><id>10157765</id><snippet>'f'</snippet></ROW><ROW><id>10157765</id><snippet>'i'</snippet></ROW><ROW><id>10157765</id><snippet>'l'</snippet></ROW><ROW><id>10157765</id><snippet>'e'</snippet></ROW><ROW><id>10157765</id><snippet>import fileinput
import sys
import re

filenames = ['C:/inp/%d.inp'%i  for i in range(1, 126)]
for line in fileinput.input(filenames, inplace = True,
                            backup = '.bak'):        
    sys.stdout.write(re.sub(r'\b3.54\b', '3.363', line))
</snippet></ROW><ROW><id>10157765</id><snippet>line.replace('3.54', '3.363')</snippet></ROW><ROW><id>10157765</id><snippet>13.54</snippet></ROW><ROW><id>10157765</id><snippet>13.363</snippet></ROW><ROW><id>10157765</id><snippet>filenames</snippet></ROW><ROW><id>10157845</id><snippet>USE_TZ = True
</snippet></ROW><ROW><id>10157845</id><snippet>settings.py</snippet></ROW><ROW><id>10157845</id><snippet>tz</snippet></ROW><ROW><id>10157845</id><snippet>from django.utils import timezone

timezone.activate(tz)

datetime = timezone.now() if checked else None
</snippet></ROW><ROW><id>10157845</id><snippet>datetime</snippet></ROW><ROW><id>10157845</id><snippet>tz</snippet></ROW><ROW><id>10157859</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
    &lt;link rel="stylesheet" href="style.css" /&gt;
    &lt;title&gt;{% block title %}My amazing site{% endblock %}&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id="sidebar"&gt;
        {% block sidebar %}
        &lt;ul&gt;
            &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="/blog/"&gt;Blog&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
        {% endblock %}
    &lt;/div&gt;

    &lt;div id="content"&gt;
        {% block content %}{% endblock %}
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>10157859</id><snippet>{% extends "base.html" %}

{% block title %}My amazing blog{% endblock %}

{% block content %}
{% for entry in blog_entries %}
    &lt;h2&gt;{{ entry.title }}&lt;/h2&gt;
    &lt;p&gt;{{ entry.body }}&lt;/p&gt;
{% endfor %}
{% endblock %}
</snippet></ROW><ROW><id>10157867</id><snippet>wordlist = ['construct','destructer','constructs','deconstructs']

from pyparsing import StringEnd, oneOf, FollowedBy, Optional, ZeroOrMore, SkipTo

endOfString = StringEnd()
prefix = oneOf("de con")
suffix = oneOf("er s") + FollowedBy(endOfString)

word = (ZeroOrMore(prefix)("prefixes") + 
        SkipTo(suffix | endOfString)("root") + 
        Optional(suffix)("suffix"))

for wd in wordlist:
    print wd
    res = word.parseString(wd)
    print res.dump()
    print res.prefixes
    print res.root
    print res.suffix
    print
</snippet></ROW><ROW><id>10157867</id><snippet>construct
['con', 'struct']
- prefixes: ['con']
- root: struct
['con']
struct


destructer
['de', 'struct', 'er']
- prefixes: ['de']
- root: struct
- suffix: ['er']
['de']
struct
['er']

constructs
['con', 'struct', 's']
- prefixes: ['con']
- root: struct
- suffix: ['s']
['con']
struct
['s']

deconstructs
['de', 'con', 'struct', 's']
- prefixes: ['de', 'con']
- root: struct
- suffix: ['s']
['de', 'con']
struct
['s']
</snippet></ROW><ROW><id>10158040</id><snippet>fabs()</snippet></ROW><ROW><id>10158040</id><snippet>abs()</snippet></ROW><ROW><id>10158040</id><snippet>abs()</snippet></ROW><ROW><id>10158040</id><snippet>fabs()</snippet></ROW><ROW><id>10158176</id><snippet>constructor</snippet></ROW><ROW><id>10158176</id><snippet>instance</snippet></ROW><ROW><id>10158176</id><snippet>instance</snippet></ROW><ROW><id>10158176</id><snippet>constructor</snippet></ROW><ROW><id>10158176</id><snippet>nonlocal instance</snippet></ROW><ROW><id>10158176</id><snippet>instance</snippet></ROW><ROW><id>10158176</id><snippet>instance</snippet></ROW><ROW><id>10158182</id><snippet>def pytest_generate_tests(metafunc):
    params = [("input", "output")]
    metafunc.parametrize(("test_case", "result"), params)
</snippet></ROW><ROW><id>10158207</id><snippet>enumerate()</snippet></ROW><ROW><id>10158207</id><snippet>1</snippet></ROW><ROW><id>10158207</id><snippet># Here, enumerate gives back the index and element.
for i,file_name in enumerate(sorted(os.listdir(full_subdir_name))):
    full_file_name = os.path.join(full_subdir_name,file_name)

    # Here, 'elem' will be the strings naming the actual
    # files inside of the folders.

    for elem in sorted(os.listdir(full_file_name)):
        # Here I am assuming you don't want to append the full path,
        # but you can easily change what to append by adding the
        # whole current file path: os.path.join(full_file_name, elem)

        namelist[i+1].append(elem)
</snippet></ROW><ROW><id>10158247</id><snippet>OVAL_COLOR</snippet></ROW><ROW><id>10158247</id><snippet>OVAL_COLOR</snippet></ROW><ROW><id>10158247</id><snippet>draw</snippet></ROW><ROW><id>10158247</id><snippet>OVAL_COLOR</snippet></ROW><ROW><id>10158247</id><snippet>OVAL_COLOR</snippet></ROW><ROW><id>10158247</id><snippet>    elif event.type == pygame.MOUSEBUTTONDOWN:
        startXY = event.pos
        OVAL_COLOR = (random.randint (0,255),random.randint (0,255),
                            random.randint (0,255))
        draw = True
</snippet></ROW><ROW><id>10158247</id><snippet>    elif event.type == pygame.MOUSEBUTTONUP:
        draw = False
        # print len(ovals) # (always ==1)
        completedOvals.append ((ovals[-1], OVAL_COLOR)) 
</snippet></ROW><ROW><id>10158247</id><snippet>        for (completedOval, color) in completedOvals:
            pygame.draw.ellipse(windowSurface, color, completedOval)
</snippet></ROW><ROW><id>10158475</id><snippet>"def (\w+)\s*\((.*?)\):"
</snippet></ROW><ROW><id>10158475</id><snippet>str.split(',')</snippet></ROW><ROW><id>10158475</id><snippet>1</snippet></ROW><ROW><id>10158526</id><snippet>for</snippet></ROW><ROW><id>10158526</id><snippet>{% if my_list %}
    &lt;table&gt;
    {% for row in my_list %}
        &lt;tr&gt;
        {% for item in row %}
            &lt;td&gt;{{ item }}&lt;/td&gt;
        {% endfor %}
        &lt;/tr&gt;
    {% endfor %}
    &lt;/table&gt;
{% endif %}
</snippet></ROW><ROW><id>10158526</id><snippet>if</snippet></ROW><ROW><id>10158526</id><snippet>table</snippet></ROW><ROW><id>10158533</id><snippet># 5 columns: text, integer, float, float, date in YYYY-MM-DD format
import datetime
def date_conv(s):
    return datetime.datetime.strptime(s, "%Y-%m-%d")
converters = (str.strip, int, float, float, date_conv)
# use int if you want to check that it is an int.
# xlwt will convert the int to float anyway.
...
for rowi, row in enumerate(sourceCSV):
  for coli, value in enumerate(row):
      ws.write(rowi, coli, converters[coli](value))
</snippet></ROW><ROW><id>10158533</id><snippet>def float_if_possible(strg):
    try:
        return float(strg)
    except ValueError:
        return strg
...
ws.write(rowi, coli, float_if_possible(value))
</snippet></ROW><ROW><id>10158533</id><snippet>float_const_pattern = r"""
    [+-]? # optional sign
    (?:
        (?: \d* \. \d+ ) # .1 .12 .123 etc 9.1 etc 98.1 etc
        |
        (?: \d+ \. ) # 1. 12. 123. etc
        |
        (?: \d+ ) # 1 12 123 etc
    )
    # followed by optional exponent part
    (?: [Ee] [+-]? \d+ ) ?
    # followed by end of string
    \Z # don't use $
    """
</snippet></ROW><ROW><id>10158533</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>10158533</id><snippet>123qwerty</snippet></ROW><ROW><id>10158533</id><snippet>123</snippet></ROW><ROW><id>10158533</id><snippet>float("123qwerty")</snippet></ROW><ROW><id>10158699</id><snippet>IOError</snippet></ROW><ROW><id>10158699</id><snippet>x</snippet></ROW><ROW><id>10158699</id><snippet>NameError</snippet></ROW><ROW><id>10158699</id><snippet>f = open("datafile.txt", "r")
g = open("datafile_fixed.txt", "w")

for line in f:
    if line.strip():
        g.write("\t".join(line.split()[1:]) + "\n")

f.close()
g.close()
</snippet></ROW><ROW><id>10158721</id><snippet>$&gt; mkvirtualenv test
(test)&gt; pip install  git+https://github.com/django-nonrel/django-nonrel.git 
(test)&gt; pip freeze
Django==1.3.1
wsgiref==0.1.2
</snippet></ROW><ROW><id>10158721</id><snippet>sudo</snippet></ROW><ROW><id>10158777</id><snippet>def replaceVars(matchObj):
    return "{{{%s}}}" % matchObj.groups()[0]

c = r"\$(\w+)\s*"

s = "$who likes $what"

converted = re.sub(c, replaceVars, s)
</snippet></ROW><ROW><id>10158816</id><snippet>def _if(test):
    return lambda alternative: \
               lambda result: \
                   [delay(result), delay(alternative)][not not test]()

def delay(f):
    if callable(f): return f
    else: return lambda: f

&gt;&gt;&gt; fact = lambda n: _if (n &lt;= 1) (1) (lambda: n * fact(n-1))
&gt;&gt;&gt; fact(100)
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000L
</snippet></ROW><ROW><id>10158828</id><snippet>__dict__</snippet></ROW><ROW><id>10158828</id><snippet>__dict__</snippet></ROW><ROW><id>10158828</id><snippet>class A(object):

    _x = None

    class __metaclass__(type):

        @property
        def x(cls):
            return A._x

        @x.setter
        def x(cls, val):
            A._x = val


class B(A):
    pass

A.x = 'jim'
B.x = 'joe'

print A.x, B.x
</snippet></ROW><ROW><id>10158828</id><snippet>joe joe
</snippet></ROW><ROW><id>10158828</id><snippet>object</snippet></ROW><ROW><id>10158828</id><snippet>class MetaA(type):
    """ like ___metaclass__ above """

class A(metaclass=MetaA):

    _x = None

...
</snippet></ROW><ROW><id>10158884</id><snippet>import httplib
conn = httplib.HTTPConnection("www.python.org")
conn.request("GET", "/index.html")
r1 = conn.getresponse()
print r1.status, r1.reason
</snippet></ROW><ROW><id>10158928</id><snippet>adjacency_iter</snippet></ROW><ROW><id>10158928</id><snippet>adjacency_list</snippet></ROW><ROW><id>10158928</id><snippet>g.node[n]</snippet></ROW><ROW><id>10159032</id><snippet>success: function(r){
    var divContent = $(r).filter('#myDiv').html();
}
</snippet></ROW><ROW><id>10159148</id><snippet>from google.appengine.tools import appengine_rpc
use_production = True
if use_production:
  base_url = 'myapp.appspot.com'
else:
  base_url = 'localhost:8080'


def passwdFunc():
  return ('user@gmail.com','password')

def main(argv):
  rpcServer = appengine_rpc.HttpRpcServer(base_url,
                                          passwdFunc,
                                          None,
                                          'myapp',
                                          save_cookies=True,
                                          secure=use_production)
# Makes the actual call, I guess is the same for POST and GET?
blah = rpcServer.Send('/some_path/')

print blah

if __name__ == '__main__':
  main(sys.argv)
</snippet></ROW><ROW><id>10159200</id><snippet>import numpy as np
data = np.zeros((6,18))
data[2:5, 9:14] = 1
print data
</snippet></ROW><ROW><id>10159200</id><snippet>[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  1.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  1.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  1.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]
</snippet></ROW><ROW><id>10159217</id><snippet>print len(textCollection)
</snippet></ROW><ROW><id>10159217</id><snippet>len</snippet></ROW><ROW><id>10159217</id><snippet>__len__()</snippet></ROW><ROW><id>10159217</id><snippet>len()</snippet></ROW><ROW><id>10159217</id><snippet>len(object)</snippet></ROW><ROW><id>10159343</id><snippet>import users
</snippet></ROW><ROW><id>10159343</id><snippet>User</snippet></ROW><ROW><id>10159343</id><snippet>users.User</snippet></ROW><ROW><id>10159343</id><snippet>from users import User
</snippet></ROW><ROW><id>10159343</id><snippet>User</snippet></ROW><ROW><id>10159343</id><snippet>from users import User, Somthingelse, Somthing
</snippet></ROW><ROW><id>10159343</id><snippet>from users import *
</snippet></ROW><ROW><id>10159505</id><snippet>./configure --prefix=/home/senthil/localpython; make; make install</snippet></ROW><ROW><id>10159505</id><snippet>python</snippet></ROW><ROW><id>10159569</id><snippet> re_exp = re.compile(r'\s*(\d+)\s*([^\d\s])+\s*(\d+)')
 expr = raw_input()
 match = re_exp.match(expr)
 if match:
     num1, oper, num2 = match.groups()
     print num1, oper, num2
</snippet></ROW><ROW><id>10159569</id><snippet>split</snippet></ROW><ROW><id>10159569</id><snippet>10 + 1</snippet></ROW><ROW><id>10159569</id><snippet>10+1</snippet></ROW><ROW><id>10159577</id><snippet># context manager `with` takes care of file closing, error handling
with open(filename, 'r') as handle:
    for line in handle:
        if line.startswith('SequenceName_'):
             print line.split()
             # Write to file, etc.
</snippet></ROW><ROW><id>10159577</id><snippet>SequenceName_###</snippet></ROW><ROW><id>10159686</id><snippet>dicts = {}
# dict_list = []
for i in xrange(10):
    dictionary_key = ('d{0}'.format(i))
    dict_item = {"Fruit":"Apple","Book":"Oliver Twist","Building":"White House"}
    dicts[dictionary_key] = dict_item
    # dict_list.append(dict_item)
</snippet></ROW><ROW><id>10159956</id><snippet>&gt;&gt;&gt; highvalue = 25
&gt;&gt;&gt; lowvalue = 21
&gt;&gt;&gt; def myfunc():
...     return lowvalue if highvalue&gt;21 else highvalue
...
&gt;&gt;&gt; myfunc()
21
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10160190</id><snippet>valuelist = [(10.5,), (20.5,), (21.5,), (70.0,), (34.5,)]
</snippet></ROW><ROW><id>10160190</id><snippet>valuelist = [10.5, 20.5, 21.5, 70.0, 34.5]
</snippet></ROW><ROW><id>10160190</id><snippet>valuelist = [x[0] for x in valuelist]
</snippet></ROW><ROW><id>10160438</id><snippet>print</snippet></ROW><ROW><id>10160438</id><snippet>print a.format(**data)
</snippet></ROW><ROW><id>10160438</id><snippet>def trans(year, month, location):
    return dict(year=year, month=month, location=location)
</snippet></ROW><ROW><id>10161043</id><snippet>subprocess</snippet></ROW><ROW><id>10161043</id><snippet>os.system</snippet></ROW><ROW><id>10161043</id><snippet>os</snippet></ROW><ROW><id>10161043</id><snippet>import os
import subprocess

proc = subprocess.Popen(cmd, shell=True)
pid, sts = os.waitpid(proc.pid, 0)

# you may check on this process later and kill it if it's taking too long
if proc.poll() in [whatever, ...]:
    os.kill(proc.pid)
</snippet></ROW><ROW><id>10161043</id><snippet>import subprocess
import sys

try:
    retcode = subprocess.call(cmd, shell=True)
    if retcode &lt; 0:
        print &gt;&gt;sys.stderr, "Child was terminated by signal", -retcode
    else:
        print &gt;&gt;sys.stderr, "Child returned", retcode
except OSError, e:
    print &gt;&gt;sys.stderr, "Execution failed:", e
</snippet></ROW><ROW><id>10161218</id><snippet>def do_something(self):
  def _tx():
    # Do something transactional
    self.counter += 1
  db.run_in_transaction(_tx)
</snippet></ROW><ROW><id>10161218</id><snippet>self.counter</snippet></ROW><ROW><id>10161218</id><snippet>def do_something(self):
  def _tx():
    # Do something transactional
    return 1
  self.counter += db.run_in_transaction(_tx)
</snippet></ROW><ROW><id>10161589</id><snippet>get()</snippet></ROW><ROW><id>10161589</id><snippet>def build_tree(node):
    return [node,[build_tree(child) for child in get(node)]]
</snippet></ROW><ROW><id>10161589</id><snippet>root = 1  # or whatever other representation you may use for root
list = build_tree(root)
print list
</snippet></ROW><ROW><id>10161654</id><snippet>import sys
sys.path.append('C:/full/path')
from foo import util,bar
</snippet></ROW><ROW><id>10161654</id><snippet>__init__.py</snippet></ROW><ROW><id>10161654</id><snippet>sys.path</snippet></ROW><ROW><id>10161654</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10161654</id><snippet>.py</snippet></ROW><ROW><id>10161654</id><snippet>imp.load_source</snippet></ROW><ROW><id>10161654</id><snippet>import imp
util = imp.load_source('util', 'C:/full/path/foo/util.py')
</snippet></ROW><ROW><id>10161956</id><snippet>import re

def next_tag(s, tag):
    i = -1
    while True:
        try:
            i = s.index(tag, i+1)
        except ValueError:
            return
        yield i

a = "&lt;list&gt;&lt;list-item&gt;First level&lt;list&gt;&lt;list-item&gt;Second level&lt;/list-item&gt;&lt;/list&gt;&lt;/list-item&gt;&lt;/list&gt;"

a = a.replace("&lt;list-item&gt;", "* ")

for LEVEL, ind in enumerate(next_tag(a, "&lt;list&gt;")):
    a = re.sub("&lt;list&gt;", "\n" + LEVEL * "\t", a, 1)

a = a.replace("&lt;/list-item&gt;", "")
a = a.replace("&lt;/list&gt;", "")

print a
</snippet></ROW><ROW><id>10161956</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>10161956</id><snippet>import xml.dom.minidom

def parseList(el, lvl=0):
    txt = ""
    indent = "\t" * (lvl)
    for item in el.childNodes:
        # These are the &lt;list-item&gt;s: They can have text and nested &lt;list&gt; tag
        for subitem in item.childNodes:
            if subitem.nodeType is xml.dom.minidom.Element.TEXT_NODE:
                # This is the text before the next &lt;list&gt; tag
                txt += "\n" + indent + "* " + subitem.nodeValue
            else:
                # This is the next list tag, its indent level is incremented
                txt += parseList(subitem, lvl=lvl+1)
    return txt

def parseXML(s):
    doc = xml.dom.minidom.parseString(s)
    return parseList(doc.firstChild)

a = "&lt;list&gt;&lt;list-item&gt;First level&lt;list&gt;&lt;list-item&gt;Second level&lt;/list-item&gt;&lt;list-item&gt;Second level 2&lt;list&gt;&lt;list-item&gt;Third level&lt;/list-item&gt;&lt;/list&gt;&lt;/list-item&gt;&lt;/list&gt;&lt;/list-item&gt;&lt;/list&gt;"
print parseXML(a)
</snippet></ROW><ROW><id>10161956</id><snippet>* First level
    * Second level
    * Second level 2
        * Third level
</snippet></ROW><ROW><id>10162284</id><snippet>grid</snippet></ROW><ROW><id>10162284</id><snippet>widget.grid(row=other_value)</snippet></ROW><ROW><id>10162284</id><snippet>grid_forget()</snippet></ROW><ROW><id>10162284</id><snippet>from Tkinter import *

class Example(Frame):
    def __init__(self, parent):
        Frame.__init__(self, parent)
        self.initUI()

    def move(self):
        info = self.b.grid_info()
        previous_row = int(info["row"]) #int() needed because datas are stored as string
        self.b.grid(row=previous_row+1)

    def initUI(self):
        for i in range(5):
            l = Label(self, text="Row {0}".format(i))
            l.grid(row=i, column=0)

        self.b =  Button(self, text="Moving button", command=self.move)
        self.b.grid(row=0, column=1)

        self.pack()

root = Tk()
app = Example(root)
root.mainloop()
</snippet></ROW><ROW><id>10162307</id><snippet>line.split()</snippet></ROW><ROW><id>10162307</id><snippet>ogword, meaning = line.split()</snippet></ROW><ROW><id>10162307</id><snippet>line.split()</snippet></ROW><ROW><id>10162307</id><snippet>mylist = line.split()
assert len(mylist) == 2
</snippet></ROW><ROW><id>10162772</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>10162985</id><snippet>from datetime import datetime
datetime.strptime("2012/04/08 13:31:00 UTC", "%Y/%m/%d %H:%M:%S %Z")
</snippet></ROW><ROW><id>10162985</id><snippet>datetime.datetime(2012, 4, 8, 13, 31)
</snippet></ROW><ROW><id>10163303</id><snippet>import pandas</snippet></ROW><ROW><id>10163303</id><snippet>pandas._tseries</snippet></ROW><ROW><id>10163303</id><snippet>try:
    import pandas._tseries as lib
except Exception, e:  # pragma: no cover

    print e # &lt;-- ADD THIS LINE

    if 'No module named' in str(e):
        raise ImportError('C extensions not built: if you installed already '
                          'verify that you are not importing from the source '
                          'directory')
    else:
        raise
</snippet></ROW><ROW><id>10163308</id><snippet>name</snippet></ROW><ROW><id>10163308</id><snippet>address</snippet></ROW><ROW><id>10163308</id><snippet>name</snippet></ROW><ROW><id>10163308</id><snippet>name</snippet></ROW><ROW><id>10163308</id><snippet>address</snippet></ROW><ROW><id>10163308</id><snippet>                                    EARTH
                                      |
                ---------------------------------------------
                |                                           |
               USA                                        INDIA
                |                                           |
        ---------------------------                     WEST BENGAL
        |                         |                         |
     NEW YORK                 CALIFORNIA                 KOLKATA
        |                         |                         |
   ---------------            PEARL STREET              BARA BAZAR
   |             |                                          |
PEARL STREET   TIME SQUARE                                 101 C
   |             |
  101 C         101 C
</snippet></ROW><ROW><id>10163308</id><snippet>name</snippet></ROW><ROW><id>10163308</id><snippet>address</snippet></ROW><ROW><id>10163308</id><snippet>def _lcs_diff_cent(s1, s2):
    """
    Calculates Longest Common Subsequence Count Difference in percentage between two strings or lists.

    LCS reference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem.
    Returns an integer from 0-100. 0 means that `s1` and `s2` have 0% difference, i.e. they are same.
    """
    m = len(s1)
    n = len(s2)

    if s1 == s2:
        return 0
    if m == 0: # When user given query is empty then that is like '*'' (match all)
        return 0
    if n == 0:
        return 100

    matrix = [[0] * (n + 1)] * (m + 1)
    for i in range(1, m+1):
        for j in range(1, n+1):
            if s1[i-1] == s2[j-1]:
                matrix[i][j] = matrix[i-1][j-1] + 1
            else:
                matrix[i][j] = max(matrix[i][j-1], matrix[i-1][j])

    return int( ( 1 - float(matrix[m][n]) / m ) * 100 )
</snippet></ROW><ROW><id>10163308</id><snippet>SearchSlice</snippet></ROW><ROW><id>10163308</id><snippet>SearchPool</snippet></ROW><ROW><id>10163308</id><snippet>                            SearchSlice()
                                  |
            ---------------------------------------------
            |                                           |
        SearchSlice(USA)                           SearchSlice(INDIA)
            |                                           |
    ---------------------------                  SearchPool(WEST BENGAL)
    |                         |                   |
 SearchPool(NEW YORK)     SearchPool(CALIFORNIA)  |- KOLKATA
    |                         |                   |- BARA BAZAR, KOLKATA
    |- PEARL STREET           |- PEARL STREET     |- 101 C, BARA BAZAR, KOLKATA
    |- TIME SQUARE
    |- 101 C, PEARL STREET
    |- 101 C, TIME SQUARE
</snippet></ROW><ROW><id>10163308</id><snippet>SearchSlice(USA)</snippet></ROW><ROW><id>10163308</id><snippet>address</snippet></ROW><ROW><id>10163308</id><snippet>address</snippet></ROW><ROW><id>10163308</id><snippet>name</snippet></ROW><ROW><id>10163312</id><snippet>#Always inherit from object, or some subtype thereof, unless you want your code to behave differently in python 2 and python 3

class AbstractGraph(object): 
   def method1(self): 
      raise NotImplementedError

class Graph(AbstractGraph):
   def method1(self):
      * actual code * 

class GraphToo(AbstractGraph):
   def method1(self):
      * actual code * 

class AbstractAdvanced(AbstractGraph):
   def method2(self):
      raise NotImplementedError 

class Advanced(Graph,AbstractAdvanced):
   def method2(self):
      *actual code, using the methods from Graph*

# order of classes in the inheritance list matters - it will affect the method resolution order
class AdvancedToo(GraphToo, Advanced): pass
</snippet></ROW><ROW><id>10163422</id><snippet>h[i] = h[-1]
h.pop()
heapq.heapify(h)
</snippet></ROW><ROW><id>10163422</id><snippet>h[i] = h[-1]
h.pop()
heapq._siftup(h, i)
</snippet></ROW><ROW><id>10163422</id><snippet>h[i] = h.pop()</snippet></ROW><ROW><id>10163422</id><snippet>i</snippet></ROW><ROW><id>10163422</id><snippet>heapify</snippet></ROW><ROW><id>10163422</id><snippet>_siftup</snippet></ROW><ROW><id>10163422</id><snippet>heapify</snippet></ROW><ROW><id>10163422</id><snippet>_siftup</snippet></ROW><ROW><id>10163480</id><snippet>myproject
  +app1
    +static
      +app1
        +css
        +js
  +app2
  +static
    +css
    +img
</snippet></ROW><ROW><id>10163480</id><snippet>collectstatic</snippet></ROW><ROW><id>10163480</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>10163687</id><snippet>import shlex
import subprocess

def url_screengrab(url, **kwargs):
    cmd = '''xvfb-run --server-args "-screen 0, 1100x800x24"
             /usr/bin/cutycapt --url={u} --out=temp.png '''.format(u = url)
    proc = subprocess.Popen(shlex.split(cmd))
    proc.communicate()

url = 'http://www.google.com'
url_screengrab(url)
</snippet></ROW><ROW><id>10163745</id><snippet>python manage.py test</snippet></ROW><ROW><id>10163745</id><snippet>sqlite</snippet></ROW><ROW><id>10163745</id><snippet>settings.py</snippet></ROW><ROW><id>10163745</id><snippet>if 'test' in sys.argv:
    DATABASES['default']['ENGINE'] = 'sqlite3'
</snippet></ROW><ROW><id>10163839</id><snippet>binascii.b2a_base64</snippet></ROW><ROW><id>10163839</id><snippet>base64.standard_b64encode</snippet></ROW><ROW><id>10163839</id><snippet>bytes.decode('ascii')</snippet></ROW><ROW><id>10163839</id><snippet>hmac.new</snippet></ROW><ROW><id>10163839</id><snippet>KEY, MESSAGE</snippet></ROW><ROW><id>10163839</id><snippet>MESSAGE, KEY</snippet></ROW><ROW><id>10163839</id><snippet>include_entities</snippet></ROW><ROW><id>10163839</id><snippet>PARAMETER_STRING</snippet></ROW><ROW><id>10163839</id><snippet>oauth_callback=oob</snippet></ROW><ROW><id>10163839</id><snippet>PARAMETER_STRING</snippet></ROW><ROW><id>10163839</id><snippet>HEADER_TITLE</snippet></ROW><ROW><id>10163839</id><snippet>oauth_callback="oob"</snippet></ROW><ROW><id>10163839</id><snippet>import urllib.parse, urllib.request, json
from hashlib import sha1
import hmac
import base64
import time
import random
import sys

#Server Links
REQUEST_URL = "https://api.twitter.com/oauth/request_token";
ACCESS_URL = "https://api.twitter.com/oauth/access_token";
AUTHORIZE_URL = "https://api.twitter.com/oauth/authorize";

#Consumer keys
TOKEN = "Omitted"
TOKEN_SECRET = "Omitted"

#Access keys
ACCESS_TOKEN = ""
ACCESS_TOKEN_SECRET = ""

TWEET = ""

count = 1

while len(sys.argv) &gt; count:
TWEET += sys.argv[count] + " "
count += 1

TWEET = TWEET[:-1] #Get rid of trailing space

print(TWEET + "\n")

#Build content header for POST to return request tokens

HEADER_TITLE = "Authorization"

#Consumer key
HEADER = 'OAuth oauth_callback="oob", oauth_consumer_key="' + TOKEN + '", '

#Nonce
HEADER += 'oauth_nonce="'
NONCE = ""
for i in range(32):
NONCE += chr(random.randint(97, 122))
HEADER += NONCE
HEADER += '", '

#Timestamp
TIMESTAMP = str(int(time.time()))

#Signature
HEADER += 'oauth_signature="'
PARAMETER_STRING = "oauth_callback=oob&amp;oauth_consumer_key=" + TOKEN + "&amp;oauth_nonce=" + NONCE + "&amp;oauth_signature_method=HMAC-SHA1&amp;oauth_timestamp=" + TIMESTAMP + "&amp;oauth_version=1.0"
BASE_STRING = 'POST&amp;' + urllib.parse.quote(REQUEST_URL, '') + '&amp;' + urllib.parse.quote(PARAMETER_STRING, '')
SIGNING_KEY = urllib.parse.quote(TOKEN_SECRET, '') + '&amp;'
print("DEBUG : SIGNING KEY " + SIGNING_KEY + " BASE STRING " + BASE_STRING + "\n")
HEADER += urllib.parse.quote(base64.standard_b64encode(hmac.new(SIGNING_KEY.encode(), BASE_STRING.encode(), sha1).digest()).decode('ascii'))
HEADER += '", '

#Signature Method
HEADER += 'oauth_signature_method="HMAC-SHA1", '

#Timestamp
HEADER += 'oauth_timestamp="' + TIMESTAMP + '", '

#Version
HEADER += 'oauth_version="1.0"'

print(HEADER_TITLE + ":\n" + HEADER)

HTTP_REQUEST = urllib.request.Request(REQUEST_URL)
HTTP_REQUEST.add_header(HEADER_TITLE, HEADER)
print(urllib.request.urlopen(HTTP_REQUEST, bytes('', 'ascii')).read())
</snippet></ROW><ROW><id>10163943</id><snippet>ctypes</snippet></ROW><ROW><id>10163943</id><snippet>#ifdef __cplusplus
extern "C" {
#endif

__declspec(dllexport) double Add(double a, double b)
{
    return a + b;
}

#ifdef __cplusplus
}
#endif
</snippet></ROW><ROW><id>10163943</id><snippet>__cdecl</snippet></ROW><ROW><id>10163943</id><snippet>CDLL</snippet></ROW><ROW><id>10163943</id><snippet>WinDLL</snippet></ROW><ROW><id>10163943</id><snippet>__stdcall</snippet></ROW><ROW><id>10163943</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; dll=ctypes.CDLL('server')
&gt;&gt;&gt; dll.Add.restype = ctypes.c_double
&gt;&gt;&gt; dll.Add.argtypes = [ctypes.c_double,ctypes.c_double]
&gt;&gt;&gt; dll.Add(1.5,2.7)
4.2
</snippet></ROW><ROW><id>10164147</id><snippet>put</snippet></ROW><ROW><id>10164147</id><snippet>get_by_id</snippet></ROW><ROW><id>10164147</id><snippet>class User(db.Model):
    name = db.StringProperty()
    # etc.

def AddUser(webapp2.RequestHandler):
    def get(self):
        newUser = User()
        newUser.name = self.request.get('name')
        # etc. assign all model properties
        newUser.put()
        # now, newUser.Key().id() contains the auto-assigned numeric id.
        # we can pass this value to our template and get it back via
        # a form paramter for subsequent operations.

def ShowUser(webapp2.RequestHandler):
    def get(self):
        user_to_show_id = self.request.get('id')
        user_to_show = User.get_by_id(user_to_show_id)
        if user_to_show is not None:
            # populate the template parameters with the users's data
            # and render the template
        else:
            # The requested user does not exist, so
            # render an error message/page.
</snippet></ROW><ROW><id>10164147</id><snippet>class Phonenumber(db.Model):
    number_type = db.StringProperty()
    number = db.StringProperty()
</snippet></ROW><ROW><id>10164147</id><snippet>def AddNumber(self, new_number_type, new_number):
    new_number = Phonenumber(parent=self, number_type=new_number_type, number=new_number)
    # In this case, self is the User entity, and by saying parent=self, we're putting
    # this Phonenumber entity into User's entity group.
    new_number.put()

def GetPhoneNumber(self):
    # Now, getting all of User's phone numbers is a simple as a query with an
    # Ancestor clause:
    users_numbers = Phonenumber.all().ancestor(self).fetch(1000)

   return users_numbers
</snippet></ROW><ROW><id>10164147</id><snippet>Key()</snippet></ROW><ROW><id>10164204</id><snippet>$ echo morestuff &gt;&gt; file1; echo morestuff &gt;&gt; file2
$ git add file1 # but not file2
$ git commit -m 'modified two files but check in just one'
</snippet></ROW><ROW><id>10164204</id><snippet>git diff-index --cached HEAD</snippet></ROW><ROW><id>10164408</id><snippet>scipy.optimize.curve_fit()</snippet></ROW><ROW><id>10164408</id><snippet>scipy.optimize.curve_fit(f, xdata, ydata, p0=None, sigma=None, **kw)
</snippet></ROW><ROW><id>10164408</id><snippet>curve_fit()</snippet></ROW><ROW><id>10164408</id><snippet>zn</snippet></ROW><ROW><id>10164408</id><snippet>p0</snippet></ROW><ROW><id>10164408</id><snippet>f</snippet></ROW><ROW><id>10164408</id><snippet>f(x, ...)</snippet></ROW><ROW><id>10164408</id><snippet>xdata</snippet></ROW><ROW><id>10164408</id><snippet>N</snippet></ROW><ROW><id>10164408</id><snippet>(k,N)</snippet></ROW><ROW><id>10164408</id><snippet>def func(x, a, b, c):
    return a * np.exp(-b * (x[0] + x[1])) + c    

N = 50
x = np.linspace(0,4,50)
x = numpy.array([x, x])          # Combine your `x` and `y` to a single
                                 # (2, N)-array
z = func(x, 2.5, 1.3, 0.5)
zn = z + 0.2 * np.random.normal(size=x.shape[1])
popt, pcov = curve_fit(func, x, zn)
</snippet></ROW><ROW><id>10164428</id><snippet>arg</snippet></ROW><ROW><id>10164428</id><snippet>args</snippet></ROW><ROW><id>10164428</id><snippet>import re

fn_match = re.match(r"(?P&lt;function&gt;\w+)\s?\((?P&lt;arg&gt;(?P&lt;args&gt;\w+(,\s?)?)+)\)", s)
fn_dict = fn_match.groupdict()
del fn_dict['args']
fn_dict['arg'] = [arg.strip() for arg in fn_dict['arg'].split(',')]
</snippet></ROW><ROW><id>10164449</id><snippet>#! /usr/bin/python3</snippet></ROW><ROW><id>10164449</id><snippet>py</snippet></ROW><ROW><id>10164449</id><snippet>python</snippet></ROW><ROW><id>10164576</id><snippet>class Example(Frame):
    def __init__(self, parent):
        super(Example, self).__init__(parent)
        ...
</snippet></ROW><ROW><id>10164576</id><snippet>Window =</snippet></ROW><ROW><id>10164576</id><snippet>Write</snippet></ROW><ROW><id>10164576</id><snippet>object</snippet></ROW><ROW><id>10164576</id><snippet>if __name__ == "__main__":
    root=Tk()
    window = ExcelToLateX(root)
    root.mainloop()
</snippet></ROW><ROW><id>10164658</id><snippet>deferToThread</snippet></ROW><ROW><id>10164658</id><snippet>callInThread</snippet></ROW><ROW><id>10164658</id><snippet>callFromThread</snippet></ROW><ROW><id>10165293</id><snippet>pygame.font.match_font</snippet></ROW><ROW><id>10165293</id><snippet>render</snippet></ROW><ROW><id>10165293</id><snippet>&gt;&gt;&gt; pygame.font.get_fonts()
[u'lohitbengali', u'liberationserif', u'dejavuserif', u'wenquanyimicroheimono', u'dejavulgcsans', u'arplumingcn', u'msam10', u'jomolhari', u'esint10', u'cmr10', u'arplumingtwmbe', u'dejavusans', u'lohitgujarati', u'lohitpunjabi', u'arplumingtw', u'arpluminghk', u'dejavusansmono', u'lohitassamese', u'lohitkannada', u'wenquanyimicrohei', u'khmeros', u'waree', u'lohittamil', u'wasy10', u'padauk', u'lohitdevanagari', u'paktypenaqsh', u'abyssinicasil', u'meera', u'eufm10', u'cmex10', u'khmerossystem', u'lklug', u'lohitoriya', u'msbm10', u'liberationsans', u'rsfs10', u'opensymbol', u'cmsy10', u'lohittelugu', u'paktypetehreer', u'cmmi10', u'liberationmono', u'khmeroscontent']

&gt;&gt;&gt; f2 = pygame.font.match_font(u'paktypetehreer')
&gt;&gt;&gt; f2
u'/usr/share/fonts/paktype-tehreer/PakType_Tehreer.ttf'
&gt;&gt;&gt; font = pygame.font.Font(f2, 60)
&gt;&gt;&gt; f = font.render(u"maçã, joão", 1, (255,255,255))
&gt;&gt;&gt; scr.blit(f, (200,100))
</snippet></ROW><ROW><id>10165314</id><snippet>re.U</snippet></ROW><ROW><id>10165314</id><snippet>\w</snippet></ROW><ROW><id>10165314</id><snippet>#coding: utf-8

import re

location = "öäå".decode('utf-8')
location = re.sub(r'([^\w])+', '', location, flags=re.U)

print location # prints öäå
</snippet></ROW><ROW><id>10165719</id><snippet>print</snippet></ROW><ROW><id>10165719</id><snippet>def output(self):</snippet></ROW><ROW><id>10165719</id><snippet>sys.stdout</snippet></ROW><ROW><id>10165719</id><snippet>table = ""
while i &lt; _list1:
    j = 0#need to reset j on each iteration of i
    _list2 = len(tup[i])
    table += "&lt;tr&gt;"
    while j &lt; _list2:
        table=+"&lt;td&gt;" + tup[i][j] + "&lt;/td&gt;"
        j += 1
    table += "&lt;/tr&gt;"
    i += 1
return table
</snippet></ROW><ROW><id>10165719</id><snippet>stdout</snippet></ROW><ROW><id>10165727</id><snippet>execute_lastrowid</snippet></ROW><ROW><id>10165727</id><snippet>tornado.database</snippet></ROW><ROW><id>10165739</id><snippet>handlers = [
            (r'/favicon.ico', tornado.web.StaticFileHandler, {'path': favicon_path}),
            (r'/static/(.*)', tornado.web.StaticFileHandler, {'path': static_path}),
            (r'/', WebHandler)
]
</snippet></ROW><ROW><id>10165796</id><snippet>settings.py</snippet></ROW><ROW><id>10165796</id><snippet>'django.contrib.staticfiles',</snippet></ROW><ROW><id>10165796</id><snippet>import os.path

PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))

STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
)
</snippet></ROW><ROW><id>10165904</id><snippet>.commit()</snippet></ROW><ROW><id>10165904</id><snippet>INSERT</snippet></ROW><ROW><id>10165904</id><snippet>cursor = conn.cursor()
for playerdata in FD_playerpicker:
    x = FD_playerpicker[playerdata][0]
    cursor.execute("INSERT INTO `fandueldb`.`tblfdsalarytmp` (PlayerID,Position,Player,Placeholder1,Placeholder2,PlaceHolder3,Salary,PPG,GamesPlayed,PlaceHolder4,PlaceHolder5,PlaceHolder6) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(playerdata,FD_playerpicker[playerdata][0],FD_playerpicker[playerdata][1],FD_playerpicker[playerdata][2],FD_playerpicker[playerdata][3],FD_playerpicker[playerdata][4],FD_playerpicker[playerdata][5],FD_playerpicker[playerdata][6],FD_playerpicker[playerdata][7],FD_playerpicker[playerdata][8],FD_playerpicker[playerdata][9],FD_playerpicker[playerdata][10]))

# Commit following all INSERT statements
conn.commit()
</snippet></ROW><ROW><id>10165913</id><snippet>lxml.html</snippet></ROW><ROW><id>10165913</id><snippet>lxml.etree</snippet></ROW><ROW><id>10165913</id><snippet>div</snippet></ROW><ROW><id>10165913</id><snippet>fragments_fromstring(string)</snippet></ROW><ROW><id>10166025</id><snippet>&gt;&gt;&gt; def PegBoard(n):
    print "-----"*n
    print ("({})  "*n).format(*range(1,n+1))
    print "-----"*n


&gt;&gt;&gt; PegBoard(10)
--------------------------------------------------
(1)  (2)  (3)  (4)  (5)  (6)  (7)  (8)  (9)  (10)  
--------------------------------------------------
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10166079</id><snippet>def CalcOrPass(func):
    @wraps(func)
    def result(self, *args, **kwargs):
        res = self.stats[func.__name__]
        if not res:
            res = func(self, *args, **kwargs)
            self.stats[func.__name__] = res
        return res
    return result
</snippet></ROW><ROW><id>10166079</id><snippet>wraps</snippet></ROW><ROW><id>10166079</id><snippet>functools</snippet></ROW><ROW><id>10166079</id><snippet>defaultdict</snippet></ROW><ROW><id>10166079</id><snippet>defaultdict(lambda: None)
</snippet></ROW><ROW><id>10166079</id><snippet>dict</snippet></ROW><ROW><id>10166145</id><snippet>return open(input(prompt),openMode)
</snippet></ROW><ROW><id>10166145</id><snippet>safeOpen</snippet></ROW><ROW><id>10166145</id><snippet>safeOpen</snippet></ROW><ROW><id>10166145</id><snippet>safeOpen</snippet></ROW><ROW><id>10166145</id><snippet>open</snippet></ROW><ROW><id>10166145</id><snippet>inputFile.predicate</snippet></ROW><ROW><id>10166145</id><snippet>predicate</snippet></ROW><ROW><id>10166145</id><snippet>inputFile</snippet></ROW><ROW><id>10166145</id><snippet>AttributeError</snippet></ROW><ROW><id>10166145</id><snippet>predicate(object)</snippet></ROW><ROW><id>10166145</id><snippet>predicate == True</snippet></ROW><ROW><id>10166145</id><snippet>predicate</snippet></ROW><ROW><id>10166198</id><snippet>foo = {"a":[1,2,3], "b":[3], "c":[1,2], "d":[1,2,3,4]}

n = 2

my_list = [key for key,val in foo.iteritems() if len(val) &gt; n]
</snippet></ROW><ROW><id>10166198</id><snippet>&gt;&gt;&gt; my_list
['a', 'd']
</snippet></ROW><ROW><id>10166214</id><snippet>&gt;&gt;&gt; list3,list4 = zip(*[(a/b,1/b) for a,b in zip(list1,list2)])
&gt;&gt;&gt; list3
(0, 0, 2, 0, 2)
&gt;&gt;&gt; list4
(0, 0, 1, 0, 0)
</snippet></ROW><ROW><id>10166214</id><snippet>tuples</snippet></ROW><ROW><id>10166214</id><snippet>list</snippet></ROW><ROW><id>10166214</id><snippet>generator expression</snippet></ROW><ROW><id>10166214</id><snippet>list comprehension</snippet></ROW><ROW><id>10166214</id><snippet>&gt;&gt;&gt; zip(*((a/b,1/b) for a,b in zip(list1,list2)))
</snippet></ROW><ROW><id>10166267</id><snippet>-1</snippet></ROW><ROW><id>10166267</id><snippet>$colors = array('red', 'blue', 'green', 'yellow');
echo 'Choose ' . implode(', ', array_slice($colors, 0, -1)) . ' or ' . end($colors);
</snippet></ROW><ROW><id>10166981</id><snippet>  List = ['a','B','c','D','\\']
</snippet></ROW><ROW><id>10166981</id><snippet>for c in List:
    if c == '\\':
       print 'Found \\.'
</snippet></ROW><ROW><id>10166981</id><snippet>Found \.
</snippet></ROW><ROW><id>10167012</id><snippet>book_dict = {}
for each book_id, story_id, word_dict in who_knows_what:
    if book_id not in book_dict:
        book_dict[book_id] = {}
    if story_id not in book_dict[book_id]:
        book_dict[book_id][story_id] = []
    book_dict[book_id][story_id].append( word_dict )
</snippet></ROW><ROW><id>10167014</id><snippet>def always(x=None): # x=None when you don't give a argument
    return True
</snippet></ROW><ROW><id>10167014</id><snippet>def selectivelyCopy(inputFile,outputFile,predicate):
    linesCopied = 0
    for line in inputFile:
        if predicate(line): # test each line with the predicate function
            outputFile.write(line)
            linesCopied+=1
    inputFile.close()
    return linesCopied
</snippet></ROW><ROW><id>10167065</id><snippet>exe_Data = {
  'e' : 0.124167,
  't' : 0.0969225,
  'a' : 0.0820011,
  'i' : 0.0768052,
 }
</snippet></ROW><ROW><id>10167065</id><snippet>exe_Data = dict(e=0.12467, t=0.0969225, a=0.0820011, i=0.0768052)</snippet></ROW><ROW><id>10167065</id><snippet>freq = exe_Data)
</snippet></ROW><ROW><id>10167065</id><snippet>freq=exe_Data</snippet></ROW><ROW><id>10167065</id><snippet>myHeap = [[pct, [symbol, ""]] for symbol, pct in freq.items()]
</snippet></ROW><ROW><id>10167065</id><snippet>myHeap = []
for key, val in freq.items():
    myHeap.append([key, [val, ""]])
</snippet></ROW><ROW><id>10167294</id><snippet>classproperty</snippet></ROW><ROW><id>10167294</id><snippet>tp_descr_get</snippet></ROW><ROW><id>10167294</id><snippet>__get__</snippet></ROW><ROW><id>10167294</id><snippet>classproperty</snippet></ROW><ROW><id>10167294</id><snippet>tp_dict</snippet></ROW><ROW><id>10167294</id><snippet>tp_setattro</snippet></ROW><ROW><id>10167294</id><snippet>PyType_Type</snippet></ROW><ROW><id>10167294</id><snippet>Py_TPFLAGS_HEAPTYPE</snippet></ROW><ROW><id>10167294</id><snippet>METH_CLASS</snippet></ROW><ROW><id>10167294</id><snippet>METH_STATIC</snippet></ROW><ROW><id>10167294</id><snippet>tp_methods</snippet></ROW><ROW><id>10167445</id><snippet>[:]</snippet></ROW><ROW><id>10167445</id><snippet>&gt;&gt;&gt; Simple[:,0,1] = 4
&gt;&gt;&gt; Simple
array([[[ 0.,  4.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.]],

       [[ 0.,  4.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.]]])
</snippet></ROW><ROW><id>10167506</id><snippet>tiles = []
tiles.append(pyglet.sprite.Sprite(tile1,0,0,batch = terrain))
tiles.append(pyglet.sprite.Sprite(tile1,10,0,batch = terrain))
...
</snippet></ROW><ROW><id>10167506</id><snippet>tiles[0], tiles[1]</snippet></ROW><ROW><id>10167506</id><snippet>for tile in tiles:</snippet></ROW><ROW><id>10167506</id><snippet>tiles = []
for x in range(0, 51, 10):
    tiles.append(pyglet.sprite.Sprite(tile1, x, 0, batch = terrain))
</snippet></ROW><ROW><id>10167506</id><snippet>range(0, 50, 10)</snippet></ROW><ROW><id>10167506</id><snippet>xrange()</snippet></ROW><ROW><id>10167506</id><snippet>range()</snippet></ROW><ROW><id>10167506</id><snippet>tiles = [pyglet.sprite.Sprite(tile1, x, 0, batch = terrain) for x in range(0, 51, 10)] 
</snippet></ROW><ROW><id>10167506</id><snippet>for tile in tiles:
    tile.x += 10
</snippet></ROW><ROW><id>10167506</id><snippet>x1</snippet></ROW><ROW><id>10167506</id><snippet>x2</snippet></ROW><ROW><id>10167506</id><snippet>x3</snippet></ROW><ROW><id>10167602</id><snippet>def MakeBitmap2(self, red, green, blue, alpha=128):
    # Make an array of bytes that is DIM*DIM in size, with enough
    # slots for each pixel to have a RGB and A value
    #arr = makeByteArray( (DIM,DIM, 4) )
    arr = numpy.empty((DIM,DIM, 4), numpy.uint8)

    # just some indexes to keep track of which byte is which
    R, G, B, A = range(4)

    # initialize all pixel values to the values passed in
    arr[:,:,R] = red
    arr[:,:,G] = green
    arr[:,:,B] = blue
    arr[:,:,A] = alpha

    # Set the alpha for the border pixels to be fully opaque
    arr[0,     0:DIM, A] = wx.ALPHA_OPAQUE  # first row
    arr[DIM-1, 0:DIM, A] = wx.ALPHA_OPAQUE  # last row
    arr[0:DIM, 0,     A] = wx.ALPHA_OPAQUE  # first col
    arr[0:DIM, DIM-1, A] = wx.ALPHA_OPAQUE  # last col

    # finally, use the array to create a bitmap
    bmp = wx.BitmapFromBufferRGBA(DIM, DIM, arr)
    return bmp
</snippet></ROW><ROW><id>10167618</id><snippet>//table[@id='productReviews']//div[@class='tiny']/following-sibling::text()
</snippet></ROW><ROW><id>10167631</id><snippet>F = [[-1]*capacityJ]*dimension
</snippet></ROW><ROW><id>10167631</id><snippet>[-1]*capacityJ</snippet></ROW><ROW><id>10167631</id><snippet>[...]*dimension</snippet></ROW><ROW><id>10167631</id><snippet>dimension</snippet></ROW><ROW><id>10167631</id><snippet>F = [[-1]*capacityJ for _ in range(dimension)]
</snippet></ROW><ROW><id>10167789</id><snippet>input</snippet></ROW><ROW><id>10167789</id><snippet>int</snippet></ROW><ROW><id>10167789</id><snippet>namedelete = int(input("what item would you like to remove"))
</snippet></ROW><ROW><id>10167863</id><snippet>class Rectangle(object):
  def __init__(self, top_corner, width, height):
    self._x = top_corner[0]
    self._y = top_corner[1]
    self._width = width
    self._height = height

  def get_bottom_right(self):
    d = self._x + self.width
    t = self._y + self.height
    return (d,t)
</snippet></ROW><ROW><id>10167863</id><snippet># Makes a rectangle at (2, 4) with width
# 6 and height 10
rect = new Rectangle((2, 4), 6, 10) 

# Returns (8, 14)
bottom_right = rect.get_bottom_right
</snippet></ROW><ROW><id>10167863</id><snippet>Point</snippet></ROW><ROW><id>10167863</id><snippet>class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
</snippet></ROW><ROW><id>10167869</id><snippet>Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. All rights reserved.

PS W:\maçã\asd&gt; hg showconfig bundle.mainreporoot
W:\maτπ\asd
PS W:\maçã\asd&gt; chcp 1252
Active code page: 1252
PS W:\maçã\asd&gt; hg showconfig bundle.mainreporoot
W:\maçã\asd
</snippet></ROW><ROW><id>10167869</id><snippet>&gt;&gt;&gt; 'maçã'.encode('cp1252').decode('cp850')
'maþÒ'
&gt;&gt;&gt; 'maçã'.encode('cp1252').decode('cp437')
'maτπ'
</snippet></ROW><ROW><id>10167869</id><snippet>&gt;&gt;&gt; 'maçã'.encode('cp850').decode('cp1252')
'ma‡Æ'
</snippet></ROW><ROW><id>10167882</id><snippet>import comtypes.client
ps_app = comtypes.client.CreateObject('Photoshop.Application') 
# makes a new 128x128 image
ps_app.Documents.Add(128, 128, 72)

# select 10x10 pixels in the upper left corner
sel_area = ((0, 0), (10, 0), (10, 10), (0, 10), (0, 0))
ps_app.ActiveDocument.Selection.Select(sel_area)
</snippet></ROW><ROW><id>10167887</id><snippet>def spyder_getpass(prompt='Password: '):
  set_spyder_echo(False)
  password = raw_input(prompt)
  set_spyder_echo(True)
  return password
</snippet></ROW><ROW><id>10167913</id><snippet>this</snippet></ROW><ROW><id>10167913</id><snippet>self</snippet></ROW><ROW><id>10167913</id><snippet>__init__</snippet></ROW><ROW><id>10168014</id><snippet>heapq</snippet></ROW><ROW><id>10168014</id><snippet>put</snippet></ROW><ROW><id>10168014</id><snippet>(timestamp, filename, filesize)</snippet></ROW><ROW><id>10168014</id><snippet>get</snippet></ROW><ROW><id>10168014</id><snippet>import heapq

class FilenameQueue(object):
    def __init__(self, times_sizes_names, maxsize):
        self.maxsize = maxsize
        self.size = sum(s for t, s, n in times_sizes_names)
        self.files = list(times_sizes_names)
        heapq.heapify(self.files)
        while self.size &gt; self.maxsize:
            self.get()
    def __len__(self):
        return len(self.files)
    def put(self, time_size_name):
        self.size += time_size_name[1]
        if self.size &lt; self.maxsize:
            heapq.heappush(self.files, time_size_name)
        else:
            time_size_name = heapq.heappushpop(self.files, time_size_name)
            self.size -= time_size_name[1]
    def get(self):
        time_size_name = heapq.heappop(self.files)
        self.size -= time_size_name[1]
        return time_size_name
</snippet></ROW><ROW><id>10168014</id><snippet>__len__</snippet></ROW><ROW><id>10168014</id><snippet>&gt;&gt;&gt; f = FilenameQueue(((22, 33, 'f1'), (44, 55, 'f2'), (33, 22, 'f3')), 150)
&gt;&gt;&gt; while f:
...     f.get()
... 
(22, 33, 'f1')
(33, 22, 'f3')
(44, 55, 'f2')
&gt;&gt;&gt; f = FilenameQueue(((22, 33, 'f1'), (44, 55, 'f2'), (33, 22, 'f3')), 150)
&gt;&gt;&gt; f.put((55, 66, 'f4'))
&gt;&gt;&gt; while f:
...     f.get()
... 
(33, 22, 'f3')
(44, 55, 'f2')
(55, 66, 'f4')
</snippet></ROW><ROW><id>10168014</id><snippet>Queue.PriorityQueue</snippet></ROW><ROW><id>10168014</id><snippet>maxsize</snippet></ROW><ROW><id>10168166</id><snippet>webbrowser</snippet></ROW><ROW><id>10168310</id><snippet>import math
epsilon = 0.000001

class Point:
    def __init__(self, x, y):
        self._x = x
        self._y = y
    def dist_to_point(self, other):
        'Compute the Euclidean distance between two Point objects'
        delta_x = self._x - other._x
        delta_y = self._y - other._y
        return (delta_x ** 2 + delta_y ** 2) ** 0.5
</snippet></ROW><ROW><id>10168310</id><snippet>&gt;&gt;&gt; point_abc = Point(1,2)
&gt;&gt;&gt; point_def = Point(3,4)
&gt;&gt;&gt; point_abc.dist_to_point(point_def)
2.8284271247461903
</snippet></ROW><ROW><id>10168391</id><snippet>def __init__(self,filename):
    self.dict_by_address = {}

    with open(filename, 'r') as infile:
        for line in infile:
            _, key, value, _ = line.split()
            self.dict_by_address[key] = value
</snippet></ROW><ROW><id>10168391</id><snippet>with</snippet></ROW><ROW><id>10168391</id><snippet>open()</snippet></ROW><ROW><id>10168391</id><snippet>file()</snippet></ROW><ROW><id>10168391</id><snippet>file()</snippet></ROW><ROW><id>10168391</id><snippet>.readlines()</snippet></ROW><ROW><id>10168391</id><snippet>range()</snippet></ROW><ROW><id>10168391</id><snippet>xrange()</snippet></ROW><ROW><id>10168391</id><snippet>line.split()</snippet></ROW><ROW><id>10168391</id><snippet>_</snippet></ROW><ROW><id>10168391</id><snippet>_</snippet></ROW><ROW><id>10168391</id><snippet>try:</snippet></ROW><ROW><id>10168391</id><snippet>except</snippet></ROW><ROW><id>10168391</id><snippet>def __init__(self,filename):
    self.dict_by_address = {}

    with open(filename, 'r') as infile:
        for line in infile:
            key = extract_address(line) 
            value = extract_data(line)
            self.dict_by_address[key] = value
</snippet></ROW><ROW><id>10168670</id><snippet>&gt;&gt;&gt; from datetime import datetime # the function datetime from module datetime
&gt;&gt;&gt; sum(datetime(year, month, 13).weekday() == 4 
        for year in range(1950, 2051) for month in range(1,13))
174
</snippet></ROW><ROW><id>10168997</id><snippet>index.cgi</snippet></ROW><ROW><id>10168997</id><snippet>index.py</snippet></ROW><ROW><id>10168997</id><snippet>print 'Content-type: text/html'
</snippet></ROW><ROW><id>10168997</id><snippet>mod_python</snippet></ROW><ROW><id>10169090</id><snippet>arg</snippet></ROW><ROW><id>10169090</id><snippet>arg = expression | identifier | integer
</snippet></ROW><ROW><id>10169201</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>10169201</id><snippet>myproject/static/</snippet></ROW><ROW><id>10169201</id><snippet>os.path.join(PROJECT_ROOT, 'static/')</snippet></ROW><ROW><id>10169201</id><snippet># Absolute path to the directory static files should be collected to.  
# Don't put anything in this directory yourself; store your static files  
# in apps' "static/" subdirectories and in STATICFILES_DIRS.  
# Example: "/home/media/media.lawrence.com/static/"  
</snippet></ROW><ROW><id>10169201</id><snippet>poll</snippet></ROW><ROW><id>10169201</id><snippet>poll/static/</snippet></ROW><ROW><id>10169391</id><snippet>dict</snippet></ROW><ROW><id>10169391</id><snippet>dict</snippet></ROW><ROW><id>10169391</id><snippet>import re

# this function both returns and mutates
# so that each list only has to be flattened once
def flatten(lst):
    new_lst = []
    for i, item in enumerate(lst):
        if isinstance(item, list):
            new_lst.extend(flatten(item))
        else:
            new_lst.append(item)
    lst[:] = new_lst
    return lst

def flatten_symbols(d):
    # split the values using the keys as delimiters
    delims = re.compile('({})'.format('|'.join(d)))
    d = dict((key, delims.split(value)) for key, value in d.iteritems())
    # turn the value lists into recursive lists
    # replacing each occurence of a key with the corresponding value
    for key, value in d.iteritems():
        for i, item in enumerate(value):
            if item in d:
                d[key][i] = d[item]
    # flatten the recursive lists
    return dict((key, ''.join(flatten(value))) for key, value in d.iteritems())


d={'s1':{'a':'b+c','b':'f+g', 'f': 'd+e', 'e': 'h+i'},'s2':{'a':'b+c','b':'f+g'}}

new_d = dict((key, flatten_symbols(subdict)) for key, subdict in d.iteritems())
print new_d
</snippet></ROW><ROW><id>10169678</id><snippet>transform</snippet></ROW><ROW><id>10169678</id><snippet>None</snippet></ROW><ROW><id>10169678</id><snippet>transform</snippet></ROW><ROW><id>10169678</id><snippet>transform is None</snippet></ROW><ROW><id>10169678</id><snippet>transform is None</snippet></ROW><ROW><id>10169678</id><snippet>def nop(x):
    return x
</snippet></ROW><ROW><id>10169678</id><snippet>transform</snippet></ROW><ROW><id>10169678</id><snippet>nop</snippet></ROW><ROW><id>10169678</id><snippet>None</snippet></ROW><ROW><id>10169678</id><snippet>None</snippet></ROW><ROW><id>10169678</id><snippet>transform</snippet></ROW><ROW><id>10169678</id><snippet>transform</snippet></ROW><ROW><id>10169944</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; first_answer = np.transpose(a)
&gt;&gt;&gt; second_answer = [list(i) for i in zip(*a)]
</snippet></ROW><ROW><id>10170444</id><snippet>os.path.expanduser('~')</snippet></ROW><ROW><id>10170444</id><snippet>os.environ['HOME']</snippet></ROW><ROW><id>10170444</id><snippet>getpass.getuser()</snippet></ROW><ROW><id>10170469</id><snippet>import web

class SyssecForm(web.form.Form):

    def __init__(self, *inputs, **kw): 
        super(SyssecForm, self).__init__(*inputs, **kw)

    def render(self):
        out='&lt;div id="form"&gt; '
        for i in self.inputs:
            html = web.utils.safeunicode(i.pre) + i.render() + self.rendernote(i.note) + web.utils.safeunicode(i.post)
            out +=  "%s"%(html)  
            out +=  '"&lt;div id="%s"&gt; %s %s&lt;/div&gt;'% (i.id, web.net.websafe(i.description), html)
        out+= "&lt;/div&gt;"
        return out

form = SyssecForm(web.form.Textbox("test"))
print form.render()
</snippet></ROW><ROW><id>10170469</id><snippet>object</snippet></ROW><ROW><id>10170469</id><snippet>object</snippet></ROW><ROW><id>10170469</id><snippet>class SyssecForm(web.form.Form, object):</snippet></ROW><ROW><id>10170669</id><snippet>depth[indices]</snippet></ROW><ROW><id>10170669</id><snippet>TypeError</snippet></ROW><ROW><id>10170669</id><snippet>&gt;&gt;&gt; indices = np.argsort(depth)
&gt;&gt;&gt; depth = depth[indices]
&gt;&gt;&gt; temp = temp[indices]
&gt;&gt;&gt; splrep(depth, temp)
(array([-7.05, -7.05, -7.05, -7.05, -5.03, -4.05, -3.  , -2.01, -1.01,
        1.  ,  1.  ,  1.  ,  1.  ]), array([ 16.0147    ,  15.54473241,  16.90606794,  14.55343229,
        15.12525673,  14.0717599 ,  15.19657895,  14.40437622,
        14.7036    ,   0.        ,   0.        ,   0.        ,   0.        ]), 3)
</snippet></ROW><ROW><id>10170669</id><snippet>argsort</snippet></ROW><ROW><id>10171458</id><snippet>&gt;&gt;&gt; import Tkinter as tk
&gt;&gt;&gt; root = tk.Tk()
&gt;&gt;&gt; tk.Label(master=root, text="Line1\nLine2").grid(row=0)
&gt;&gt;&gt; root.mainloop()
</snippet></ROW><ROW><id>10171821</id><snippet>Create listOfVisitedUrls
...
Start Loop
Get nextUrl
If nextUrl IsNotIn listOfVisitedUrls Then
    Request nextUrl
    Add nextUrl to listOfVisitedUrls
End If
Loop
</snippet></ROW><ROW><id>10171877</id><snippet>res += [tree.key]</snippet></ROW><ROW><id>10172037</id><snippet>BOOST_PYTHON_MODULE(Foo)
{   
  class_&lt;Foo, boost::noncopyable&gt;("Foo", init&lt;const char *&gt;())
  ;
}
</snippet></ROW><ROW><id>10172637</id><snippet>find-links</snippet></ROW><ROW><id>10172637</id><snippet>[buildout]
parts = i18ndude
find-links = http://pypi.python.org/packages/source/i/i18ndude/i18ndude-3.1.3.zip

[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude
</snippet></ROW><ROW><id>10172637</id><snippet>$ bin/buildout -N
Installing i18ndude.
Getting distribution for 'i18ndude'.
Got i18ndude 3.2.2.
Generated script '/private/tmp/test/bin/i18ndude'.
$ grep i18ndude- bin/i18ndude
    '/Users/mj/Development/.buildout/eggs/i18ndude-3.2.2-py2.6.egg',
</snippet></ROW><ROW><id>10172637</id><snippet>[buildout]
parts = i18ndude
find-links = http://pypi.python.org/packages/source/i/i18ndude/i18ndude-3.1.3.zip
versions = versions

[versions]
i18ndude = 3.1.3

[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude
</snippet></ROW><ROW><id>10172637</id><snippet>$ bin/buildout -N
Updating i18ndude.
Getting distribution for 'i18ndude'.
Got i18ndude 3.1.3.
Generated script '/private/tmp/test/bin/i18ndude'.
$ grep i18ndude- bin/i18ndude
    '/Users/mj/Development/.buildout/eggs/i18ndude-3.1.3-py2.6.egg',
</snippet></ROW><ROW><id>10172683</id><snippet>UnicodeError</snippet></ROW><ROW><id>10172683</id><snippet>.encode()</snippet></ROW><ROW><id>10172683</id><snippet>.decode()</snippet></ROW><ROW><id>10172683</id><snippet>UnicodeError</snippet></ROW><ROW><id>10172683</id><snippet>.encode()</snippet></ROW><ROW><id>10172683</id><snippet>.decode()</snippet></ROW><ROW><id>10172683</id><snippet>&gt;&gt;&gt; from HTMLParser import HTMLParser
&gt;&gt;&gt; text = "македонија"
&gt;&gt;&gt; hparser = HTMLParser()
&gt;&gt;&gt; text = hparser.unescape(text)
&gt;&gt;&gt; text
u'\u043c\u0430\u043a\u0435\u0434\u043e\u043d\u0438\u0458\u0430'
</snippet></ROW><ROW><id>10172683</id><snippet>&gt;&gt;&gt; text.encode("utf-8")
'\xd0\xbc\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd0\xb8\xd1\x98\xd0\xb0'
</snippet></ROW><ROW><id>10172683</id><snippet>&gt;&gt;&gt; text.encode("utf-16")
'\xff\xfe&lt;\x040\x04:\x045\x044\x04&gt;\x04=\x048\x04X\x040\x04'
</snippet></ROW><ROW><id>10172683</id><snippet>"ascii"</snippet></ROW><ROW><id>10172683</id><snippet>&gt;&gt;&gt; text.encode("ascii")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-9: ordinal not in range(128)
</snippet></ROW><ROW><id>10172683</id><snippet>req.write</snippet></ROW><ROW><id>10172683</id><snippet>req.write(hparser.unescape(text).encode("some-encoding"))</snippet></ROW><ROW><id>10173090</id><snippet>results = results.find({
    'identifier': '1',
})
</snippet></ROW><ROW><id>10173090</id><snippet>results = results.find_one({
    'identifier': '1',
})
</snippet></ROW><ROW><id>10173090</id><snippet>find</snippet></ROW><ROW><id>10173090</id><snippet>serialized_results = [json.dumps(result, default=json_util.default, separators=(',', ':')) for result in results]
</snippet></ROW><ROW><id>10173805</id><snippet>pip</snippet></ROW><ROW><id>10173805</id><snippet>setup.py</snippet></ROW><ROW><id>10173805</id><snippet>pip</snippet></ROW><ROW><id>10173805</id><snippet>python setup.py install --single-version-externally-managed
</snippet></ROW><ROW><id>10173805</id><snippet>pip -vv</snippet></ROW><ROW><id>10173840</id><snippet>line = '50.0 0.1 [0.03, 0.05, 0.067, 1.003]\n'
</snippet></ROW><ROW><id>10173840</id><snippet>line[line.index('[')+1:line.index(']')]
</snippet></ROW><ROW><id>10173840</id><snippet>line[line.index('[')+1:line.index(']')].split(',')
</snippet></ROW><ROW><id>10173840</id><snippet>float(line[line.index('[')+1:line.index(']')].split(',')[3])  
</snippet></ROW><ROW><id>10173840</id><snippet>eval('[0.03, 0.05, 0.067, 1.003]')  
</snippet></ROW><ROW><id>10173840</id><snippet>with open('datas.txt') as f:
    n = 8
    for line in f:
        a = float(line[line.index('[')+1:line.index(']')].split(',')[n])  
        do_something_with(a)
</snippet></ROW><ROW><id>10173900</id><snippet>print '%s::%s.%s = %s' % (
                    modName, symName,
                    '.'.join(map(lambda v: v.prettyPrint(), indices),
                    val.prettyPrint()
                    )
</snippet></ROW><ROW><id>10173900</id><snippet>print varBindTableRow
</snippet></ROW><ROW><id>10174472</id><snippet>src</snippet></ROW><ROW><id>10174472</id><snippet>iframe</snippet></ROW><ROW><id>10174472</id><snippet>urllib</snippet></ROW><ROW><id>10174472</id><snippet>lxml</snippet></ROW><ROW><id>10174472</id><snippet>from lxml.etree import fromstring
data = urllib.urlopen(url) # fetching url with iframe
tree = fromstring(data.read()) # parsing tree to get src attribute
src_url = tree.cssselect("iframe").attrib['src']
data = urllib.urlopen(src_url) # open iframe src url
tree = fromstring(data.read()) # parsing iframe tree
</snippet></ROW><ROW><id>10174657</id><snippet>__file__</snippet></ROW><ROW><id>10174657</id><snippet>import os

TEST_FILENAME = os.path.join(os.path.dirname(__file__), 'test.txt')
</snippet></ROW><ROW><id>10175119</id><snippet>    existence = os.path.isfile(filename)

    if existence == False:
        with codecs.open(filename, 'w', encoding='utf-8') as output:
            output.write(content)
    else:
        newFilename = ("/path/.../.../- " + '%s' ".1.txt") % (newDate)
        with codecs.open(newFilename, 'w', encoding='utf-8') as output:
            output.write(content)
</snippet></ROW><ROW><id>10175119</id><snippet>filename = ("/Users/path/" + " " + "title " + '%s' + " " + "-1.txt") % (date) 
filename = str(filename)

    while True:
        os.path.isfile(filename)
        newName = filename.replace(".txt", "", filename)
        newName = str.split(newName)
        newName[-1] = str(int(newName[-1]) + 1)
        filename = " ".join(newName) + ".txt"
        if os.path.isfile(filename) == False:
            with codecs.open(filename, 'w', encoding='utf-8') as output:
                output.write(texts)
            break
</snippet></ROW><ROW><id>10175130</id><snippet>/s</snippet></ROW><ROW><id>10175130</id><snippet>python setup.py bdist_msi</snippet></ROW><ROW><id>10175326</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>10175326</id><snippet>os.utime</snippet></ROW><ROW><id>10175326</id><snippet>import os

# current code
else:
    headers = urlretrieve(srvFile, destFile)[1]
    lmStr = headers.getheader("Last-Modified")
    srvLastModified = mktime(strptime(lmStr, "%a, %d %b %Y %H:%M:%S GMT"))
    os.utime(destFile, (srvLastModified, srvLastModified))
</snippet></ROW><ROW><id>10175606</id><snippet>&gt;&gt;&gt; [sum(i**2 % j == 0 for j in range(1, i**2 + 1)) for i in range(11)]
[0, 1, 3, 3, 5, 3, 9, 3, 7, 5, 9]
</snippet></ROW><ROW><id>10175606</id><snippet>&gt;&gt;&gt; def divisors(start, end, trans=lambda x:x):
...     return [sum(i % j == 0 for j in range(1, i + 1)) for i in (trans(t) for t in range(start, end+1))]
... 
&gt;&gt;&gt; divisors(0, 10, lambda x: x**2)
[0, 1, 3, 3, 5, 3, 9, 3, 7, 5, 9]
&gt;&gt;&gt; divisors(0, 10)
[0, 1, 2, 2, 3, 2, 4, 2, 4, 3, 4]
</snippet></ROW><ROW><id>10175665</id><snippet>X</snippet></ROW><ROW><id>10175665</id><snippet>xlabel</snippet></ROW><ROW><id>10175665</id><snippet>from pylab import *

# Generate random test data in your range
N = 200
epsilon = 10**(-9.0)
X = epsilon*(50*random(N) + 1)
Y = random(N)

# X2 now has the "units" of nanometers by scaling X
X2 = (1/epsilon) * X

subplot(121)
scatter(X,Y)
xlim(epsilon,50*epsilon)
xlabel("meters")

subplot(122)
scatter(X2,Y)
xlim(1, 50)
xlabel("nanometers")

show()
</snippet></ROW><ROW><id>10175739</id><snippet>results = list(cursor)
</snippet></ROW><ROW><id>10175739</id><snippet>list</snippet></ROW><ROW><id>10175947</id><snippet>writerow()</snippet></ROW><ROW><id>10175947</id><snippet>newdata = ['BSD', 'Yes']
...
writer.writerow(row + newdata)
</snippet></ROW><ROW><id>10175947</id><snippet>newdata</snippet></ROW><ROW><id>10176008</id><snippet>tuple</snippet></ROW><ROW><id>10176008</id><snippet>;</snippet></ROW><ROW><id>10176008</id><snippet>class XYZ(object):
    def __init__(self, cameraId):
        self.cameraId = cameraId
        self.index = ""

    def get_test(self):
        print "Index: " + self.index + " CameraID: " + self.cameraId
        return self.cameraId

    def set_test(self, value):
        # Require value to be a tuple!
        assert(isinstance(value, tuple))

        self.cameraId = value[0]

        try:
            self.index = value[1]

        except IndexError:
            self.index = ""

        return True

    TEST_XYZ = property(get_test, set_test)
</snippet></ROW><ROW><id>10176276</id><snippet>def myDecorator(logIt):
    def actualDecorator(test_func):
        if logIt:
            print "Calling Function: " + test_func.__name__
        return callSomeWrapper(test_func)
    return actualDecorator
</snippet></ROW><ROW><id>10176276</id><snippet>def myDecorator(logIt):
    def actualDecorator(test_func):
        @functools.wraps(test_func)
        def wrapper(*args, **kwargs):
            if logIt:
                print "Calling Function: " + test_func.__name__
            return test_func(*args, **kwargs)
        return wrapper
    return actualDecorator
</snippet></ROW><ROW><id>10176311</id><snippet>collections.Counter</snippet></ROW><ROW><id>10176311</id><snippet>Counter</snippet></ROW><ROW><id>10176311</id><snippet>dict</snippet></ROW><ROW><id>10176311</id><snippet>Counter</snippet></ROW><ROW><id>10176311</id><snippet>bag</snippet></ROW><ROW><id>10176311</id><snippet>bag</snippet></ROW><ROW><id>10176365</id><snippet>&gt;&gt;&gt; def foo():
    n = []
    for i in xrange(10): n.append(oct(i))    

&gt;&gt;&gt; Timer("foo()","from __main__ import foo")
</snippet></ROW><ROW><id>10176365</id><snippet>stmt_list     ::=  simple_stmt (";" simple_stmt)* [";"]
</snippet></ROW><ROW><id>10176365</id><snippet>simple_stmt ::=  expression_stmt
                 | assert_stmt
                 | assignment_stmt
                 | augmented_assignment_stmt
                 | pass_stmt
                 | del_stmt
                 | print_stmt
                 | return_stmt
                 | yield_stmt
                 | raise_stmt
                 | break_stmt
                 | continue_stmt
                 | import_stmt
                 | global_stmt
                 | exec_stmt
</snippet></ROW><ROW><id>10176462</id><snippet>[</snippet></ROW><ROW><id>10176462</id><snippet>&gt;&gt;&gt; a = "[2.467188005806714e-05, 0.18664554919828535, 0.5026880460053854]"
&gt;&gt;&gt; import json
&gt;&gt;&gt; b = json.loads(a)
&gt;&gt;&gt; b
[2.467188005806714e-05, 0.18664554919828535, 0.5026880460053854]
</snippet></ROW><ROW><id>10176462</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; b = ast.literal_eval(a)
&gt;&gt;&gt; b
[2.467188005806714e-05, 0.18664554919828535, 0.5026880460053854]
</snippet></ROW><ROW><id>10177221</id><snippet>import rpdb2; rpdb2.start_embedded_debugger('mypassword')
rpdb2.g_debugger.set_trap_unhandled_exceptions(False)
</snippet></ROW><ROW><id>10177530</id><snippet>current_post.mode == "Process"  (multiprocessing)  --&gt; 0.2609 seconds
current_post.mode == "Multiple" (threading)        --&gt; 0.3947 seconds
current_post.mode == "Simple"   (serial execution) --&gt; 1.650 seconds
</snippet></ROW><ROW><id>10177530</id><snippet>.join()</snippet></ROW><ROW><id>10177530</id><snippet>from multiprocessing import Process
import threading
import time
import urllib
import urllib2


class Post:

    def __init__(self, website, data, mode):
        self.website = website
        self.data = data

        #mode is either "Simple"(Simple POST) or "Multiple"(Multi-thread POST)
        self.mode = mode

    def post(self):

        #post data
        req = urllib2.Request(self.website)
        open_url = urllib2.urlopen(req, self.data)

        if self.mode == "Multiple":
            time.sleep(0.001)

        #read HTMLData
        HTMLData = open_url.read()

        print "OK"

if __name__ == "__main__":

    current_post = Post("http://forum.xda-developers.com/login.php", "vb_login_username=test&amp;vb_login_password&amp;securitytoken=guest&amp;do=login", \
                        "Process")
    #save the time before post data
    origin_time = time.time()

    if(current_post.mode == "Multiple"):

        #multithreading POST
        threads = list()
        for i in range(0, 10):
           thread = threading.Thread(target = current_post.post)
           thread.start()
           threads.append(thread)
        for thread in threads:
           thread.join()
        #calculate the time interval
        time_interval = time.time() - origin_time
        print time_interval

    if(current_post.mode == "Process"):

        #multiprocessing POST
        processes = list()
        for i in range(0, 10):
           process = Process(target=current_post.post)
           process.start()
           processes.append(process)
        for process in processes:
           process.join()
        #calculate the time interval
        time_interval = time.time() - origin_time
        print time_interval

    if(current_post.mode == "Simple"):

        #simple POST
        for i in range(0, 10):
            current_post.post()
        #calculate the time interval
        time_interval = time.time() - origin_time
        print time_interval
</snippet></ROW><ROW><id>10177600</id><snippet>1</snippet></ROW><ROW><id>10177600</id><snippet>%save</snippet></ROW><ROW><id>10177600</id><snippet>In [2]: %save func1.py 1
The following commands were written to file `func1.py`:
def func1():
    pass
</snippet></ROW><ROW><id>10177600</id><snippet>%save</snippet></ROW><ROW><id>10177600</id><snippet>In [2]: %save?
Type:       Magic function
...
Docstring:
Save a set of lines or a macro to a given filename.

Usage:
  %save [options] filename n1-n2 n3-n4 ... n5 .. n6 ...
</snippet></ROW><ROW><id>10177600</id><snippet>%edit</snippet></ROW><ROW><id>10177600</id><snippet>In [3] %edit func1
 done. Executing edited code...
</snippet></ROW><ROW><id>10177600</id><snippet>%edit</snippet></ROW><ROW><id>10177600</id><snippet>func1</snippet></ROW><ROW><id>10177600</id><snippet>_</snippet></ROW><ROW><id>10177600</id><snippet>In [4]: _
Out[4]: 'def func1():\n    print "Hello World"\n\n'
</snippet></ROW><ROW><id>10177600</id><snippet>%macro</snippet></ROW><ROW><id>10177600</id><snippet>func1</snippet></ROW><ROW><id>10177600</id><snippet>In [5]: %macro new_func1_macro _
Macro `new_func1_macro` created. To execute, type its name (without quotes).
=== Macro contents: ===
def func1():
    print "Hello World"
</snippet></ROW><ROW><id>10177600</id><snippet>func1</snippet></ROW><ROW><id>10177600</id><snippet>%save</snippet></ROW><ROW><id>10177600</id><snippet>%macro</snippet></ROW><ROW><id>10177600</id><snippet>In [6]: %save func1.py new_func1_macro
The following commands were written to file `func1.py`:
def func1():
    print "Hello World"
</snippet></ROW><ROW><id>10177772</id><snippet>ofimg[0].getHomography()
</snippet></ROW><ROW><id>10177772</id><snippet>x = Image(cv2.warpPerspective(np.array((img2.getMatrix())), homo,
  (eh.rows, eh.cols+300), np.array(eh), cv.INTER_CUBIC), colorSpace=ColorSpace.RGB).toBGR()
</snippet></ROW><ROW><id>10177983</id><snippet>"gui.xml"</snippet></ROW><ROW><id>10177983</id><snippet>"C:\Repa\cipherka\dist\"</snippet></ROW><ROW><id>10177983</id><snippet>"C:\Repa\cipherka\dist\library.zip"</snippet></ROW><ROW><id>10177983</id><snippet>path = os.path.dirname(__file__).replace('\\library.zip','')
xml_file = open(os.path.join(path, 'gui.xml'))
</snippet></ROW><ROW><id>10178121</id><snippet>numbers = {1:0}
max = -1
startMax = -1
for i in range(2, 1000 000):
    n = i
    steps = 0
    while n&gt;=i:
        if n&amp;2 == 0:
            n = n/2
        else:
            n = 3*n + 1
        steps = steps + 1
    # n &lt; i, hence it must already be stored in the dictionary
    steps = steps + numbers[n]
    if steps &gt; max:
        max = steps
        startMax = i
    numbers[i] = steps
    return startMax
</snippet></ROW><ROW><id>10178121</id><snippet>numbers = {1:0}
max = -1
for i in range(2, 1000 000):
    if i in numbers:
        steps = numbers[i]
    else:
        n = i
        steps = 0
        found = False

        while not found:
            if n&amp;2 == 0:
                n = n/2
            else:
                n = 3*n + 1
            if n in numbers:
                steps = numbers[n]
                found = True
            else:
                newNumbers.append(n)
        # Store all the new numbers into the dictionary
        for num in newNumbers:
            steps = steps + 1
            numbers[num] = steps
    if steps&gt;max:
        max = steps
        startMax = i
return startMax
</snippet></ROW><ROW><id>10178271</id><snippet>throw(...)</snippet></ROW><ROW><id>10178271</id><snippet>double Divide(double a, double b) throw (...)
</snippet></ROW><ROW><id>10178271</id><snippet>throw()</snippet></ROW><ROW><id>10178380</id><snippet>./manage.py shell</snippet></ROW><ROW><id>10178380</id><snippet>python manage.py shell</snippet></ROW><ROW><id>10178380</id><snippet>./</snippet></ROW><ROW><id>10178380</id><snippet>python</snippet></ROW><ROW><id>10178380</id><snippet>python manage.py shell</snippet></ROW></DATA>