<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>893360</id><snippet>contextlib.nested</snippet></ROW><ROW><id>893360</id><snippet>import contextlib

with contextlib.nested(open("out.txt","wt"), open("in.txt")) as (file_out, file_in):

   ...
</snippet></ROW><ROW><id>893360</id><snippet>contextlib.nested</snippet></ROW><ROW><id>893413</id><snippet>&gt;&gt;&gt; 0 / -2
-0.0
</snippet></ROW><ROW><id>893459</id><snippet>from collections import defaultdict

words = "apple banana apple strawberry banana lemon"

d = defaultdict(int)
for word in words.split():
    d[word] += 1
</snippet></ROW><ROW><id>893535</id><snippet>print repr(mystringobject)
</snippet></ROW><ROW><id>893553</id><snippet>ln -s /Users/xyz/long/absolute/path/to/script.py /usr/bin/script.py
</snippet></ROW><ROW><id>893553</id><snippet>chmod a+x /Users/xyz/long/absolute/path/to/script.py
</snippet></ROW><ROW><id>893793</id><snippet>readline()</snippet></ROW><ROW><id>893793</id><snippet>string.split()</snippet></ROW><ROW><id>893793</id><snippet>re.split()</snippet></ROW><ROW><id>894137</id><snippet>from inspect import stack

class Foo:
    def __init__(self):
    	print __file__
    	print self.__class__.__name__
    	print stack()[0][3]

f = Foo()
</snippet></ROW><ROW><id>894170</id><snippet>urlopen</snippet></ROW><ROW><id>894170</id><snippet>urllib.urlopen(your_url, proxies = {"http" : "http://192.168.0.1:80"})
</snippet></ROW><ROW><id>894328</id><snippet>&gt;&gt;&gt; import xml.dom.minidom
&gt;&gt;&gt; s = "&lt;example&gt;4 &lt; 5&lt;/example&gt;"
&gt;&gt;&gt; x = xml.dom.minidom.parseString(s)
&gt;&gt;&gt; x.firstChild.firstChild.toxml()
u'4 &lt; 5'
</snippet></ROW><ROW><id>894341</id><snippet>from setuptools import setup, find_packages
setup(name="package",
    version="1.3.3.7",
    package=find_packages(),
    namespace_packages=['package'], 
     package_data = {
        # If any package contains *.txt or *.rst files, include them:
        '': ['*.txt', '*.rst']...

)
</snippet></ROW><ROW><id>894469</id><snippet>from StringIO import StringIO
import struct

class BinaryIO(StringIO):
    def writepack(self, fmt, *values):
        self.write(struct.pack('&lt;' + fmt, *values))

def to_binary_example():
    data = BinaryIO()
    data.writepack('I', 42)
    data.writepack('II', 1, 2)
    return data.getvalue()
</snippet></ROW><ROW><id>894722</id><snippet>import subprocess

commands = [ ["p1"], ["p2"] ]
programs = [ subprocess.Popen(c) for c in commands ]
while True:
    for i in range(len(programs)):
        if programs[i].returncode is None:
            continue # still running
        else:
            # restart this one
            programs[i]= subprocess.Popen(commands[i])
        time.sleep(1.0)
</snippet></ROW><ROW><id>894834</id><snippet>perl -p -i -e 's/Masi/Bond/g' $(grep -rl Masi *)
</snippet></ROW><ROW><id>894834</id><snippet>find . -type f -exec perl -p -i -e 's/Masi/Bond/g' {} \;
</snippet></ROW><ROW><id>894834</id><snippet>find . -type f -print0 | xargs -0 perl -p -i -e 's/Masi/Bond/g'
</snippet></ROW><ROW><id>895063</id><snippet>SST = Sum(i=1..n) (y_i - y_bar)^2
SSReg = Sum(i=1..n) (y_ihat - y_bar)^2
Rsquared = SSReg/SST
</snippet></ROW><ROW><id>895063</id><snippet>import numpy

# Polynomial Regression
def polyfit(x, y, degree):
    results = {}

    coeffs = numpy.polyfit(x, y, degree)

     # Polynomial Coefficients
    results['polynomial'] = coeffs.tolist()

    # r-squared
    p = numpy.poly1d(coeffs)
    # fit values, and mean
    yhat = p(x)                         # or [p(z) for z in x]
    ybar = numpy.sum(y)/len(y)          # or sum(y)/len(y)
    ssreg = numpy.sum((yhat-ybar)**2)   # or sum([ (yihat - ybar)**2 for yihat in yhat])
    sstot = numpy.sum((y - ybar)**2)    # or sum([ (yi - ybar)**2 for yi in y])
    results['determination'] = ssreg / sstot

    return results
</snippet></ROW><ROW><id>895579</id><snippet>None</snippet></ROW><ROW><id>895579</id><snippet>None</snippet></ROW><ROW><id>895579</id><snippet>mc.get(key)</snippet></ROW><ROW><id>895579</id><snippet>isinstance()</snippet></ROW><ROW><id>895657</id><snippet>num = int(input("Enter a number: "))
num2 = int(input("Enter a number: "))
</snippet></ROW><ROW><id>895721</id><snippet>__init__</snippet></ROW><ROW><id>895721</id><snippet>import sys
from PyQt4 import QtGui

class SystemTrayIcon(QtGui.QSystemTrayIcon):

    def __init__(self, icon, parent=None):
        QtGui.QSystemTrayIcon.__init__(self, icon, parent)
        menu = QtGui.QMenu(parent)
        exitAction = menu.addAction("Exit")
        self.setContextMenu(menu)

def main():
    app = QtGui.QApplication(sys.argv)

    w = QtGui.QWidget()
    trayIcon = SystemTrayIcon(QtGui.QIcon("Bomb.xpm"), w)

    trayIcon.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>896037</id><snippet>p = subprocess.Popen(...)
</snippet></ROW><ROW><id>896037</id><snippet>p.wait()
</snippet></ROW><ROW><id>896756</id><snippet>from pyglet import image
from PIL import Image
pic = image.load('pic.jpg')
pitch = -(pic.width * len('RGB'))
data = pic.get_data('RGB', pitch) # using the new pitch
im = Image.fromstring('RGB', (pic.width, pic.height), data)
im.show()
</snippet></ROW><ROW><id>896995</id><snippet>class MyModel(models.Model):
    myfield = models.ForeignKey('myotherapp.MyOtherModel')
</snippet></ROW><ROW><id>897186</id><snippet>__init__.py</snippet></ROW><ROW><id>897186</id><snippet>sys.path</snippet></ROW><ROW><id>897186</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>897186</id><snippet>Lib/site-packages</snippet></ROW><ROW><id>897186</id><snippet>sys.path</snippet></ROW><ROW><id>897186</id><snippet>import thisModule as tm</snippet></ROW><ROW><id>897186</id><snippet>import thisModule as tm</snippet></ROW><ROW><id>897186</id><snippet>from moduleImports import *</snippet></ROW><ROW><id>897186</id><snippet>import this
import that
import package.module
</snippet></ROW><ROW><id>897186</id><snippet>sys.path</snippet></ROW><ROW><id>897373</id><snippet>map</snippet></ROW><ROW><id>897373</id><snippet>print</snippet></ROW><ROW><id>897373</id><snippet>for f in lst:
    f("event_info")
</snippet></ROW><ROW><id>897373</id><snippet>map</snippet></ROW><ROW><id>897373</id><snippet>map</snippet></ROW><ROW><id>897373</id><snippet>list</snippet></ROW><ROW><id>897373</id><snippet>map.py</snippet></ROW><ROW><id>897373</id><snippet>map(lambda x: x, range(10))
</snippet></ROW><ROW><id>897373</id><snippet>2to3-3.0 map.py</snippet></ROW><ROW><id>897373</id><snippet>RefactoringTool: Skipping implicit fixer: buffer
RefactoringTool: Skipping implicit fixer: idioms
RefactoringTool: Skipping implicit fixer: set_literal
RefactoringTool: Skipping implicit fixer: ws_comma
--- map.py (original)
+++ map.py (refactored)
@@ -1,1 +1,1 @@
-map(lambda x: x, range(10))
+list(map(lambda x: x, list(range(10))))
RefactoringTool: Files that need to be modified:
RefactoringTool: map.py
RefactoringTool: Warnings/messages while refactoring:
RefactoringTool: ### In file map.py ###
RefactoringTool: Line 1: You should use a for loop here
</snippet></ROW><ROW><id>897492</id><snippet>\f</snippet></ROW><ROW><id>897492</id><snippet>some_str = r'C:\\foobar'
</snippet></ROW><ROW><id>897492</id><snippet>s = re.sub(r'&lt;INPUT&gt;', some_str.encode("string_escape"), str_to_be_subbed)
</snippet></ROW><ROW><id>897830</id><snippet># Define the other classes first

class Observer:
    @classmethod
    def on_new_user_registration(new_user):
        #body of handler...
NewUserRegistered().subscribe(Observer.on_new_user_registration)
</snippet></ROW><ROW><id>897963</id><snippet>import codecs
from winsys import fs

base = "c:/temp"
with codecs.open ("permissions.log", "wb", encoding="utf8") as log:
  for f in fs.flat (base):
  log.write ("\n" + f.filepath.relative_to (base) + "\n")
  for ace in f.security ().dacl:
    access_flags = fs.FILE_ACCESS.names_from_value (ace.access)
    log.write (u"  %s =&gt; %s\n" % (ace.trustee, ", ".join (access_flags)))
</snippet></ROW><ROW><id>898404</id><snippet>lists = [['dog', 1], ['cat', 2, 'a'], ['rat', 3, 4], ['bat', 5]]
result = "\n".join("\t".join(map(str,l)) for l in lists)
</snippet></ROW><ROW><id>898406</id><snippet>/proc/self/status</snippet></ROW><ROW><id>898406</id><snippet>def memory_usage():
    """Memory usage of the current process in kilobytes."""
    status = None
    result = {'peak': 0, 'rss': 0}
    try:
        # This will only work on systems with a /proc file system
        # (like Linux).
        status = open('/proc/self/status')
        for line in status:
            parts = line.split()
            key = parts[0][2:-1].lower()
            if key in result:
                result[key] = int(parts[1])
    finally:
        if status is not None:
            status.close()
    return result
</snippet></ROW><ROW><id>898406</id><snippet>/proc/self/status</snippet></ROW><ROW><id>898406</id><snippet>cat /proc/self/status</snippet></ROW><ROW><id>898406</id><snippet>% cat /proc/self/status
Name:   cat
State:  R (running)
Tgid:   4145
Pid:    4145
PPid:   4103
TracerPid:      0
Uid:    1000    1000    1000    1000
Gid:    1000    1000    1000    1000
FDSize: 32
Groups: 20 24 25 29 40 44 46 100 1000 
VmPeak:     3580 kB
VmSize:     3580 kB
VmLck:         0 kB
VmHWM:       472 kB
VmRSS:       472 kB
VmData:      160 kB
VmStk:        84 kB
VmExe:        44 kB
VmLib:      1496 kB
VmPTE:        16 kB
Threads:        1
SigQ:   0/16382
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000000000
SigIgn: 0000000000000000
SigCgt: 0000000000000000
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: ffffffffffffffff
Cpus_allowed:   03
Cpus_allowed_list:      0-1
Mems_allowed:   1
Mems_allowed_list:      0
voluntary_ctxt_switches:        0
nonvoluntary_ctxt_switches:     0
</snippet></ROW><ROW><id>898723</id><snippet>import mimetypes
...
mime = mimetypes.guess_type(file)
</snippet></ROW><ROW><id>898791</id><snippet>sorted(list_of_dicts, key=lambda d: (d['Name'] == 'TOTAL', d['Name'].lower()))
</snippet></ROW><ROW><id>899172</id><snippet>public interface Func&lt;In, Out&gt; {
    public Out apply(In in);
}
</snippet></ROW><ROW><id>899172</id><snippet>public static &lt;T&gt; void applyToListInPlace(List&lt;T&gt; list, Func&lt;T, T&gt; f) {
    ListIterator&lt;T&gt; itr = list.listIterator();
    while (itr.hasNext()) {
        T output = f.apply(itr.next());
        itr.set(output);
    }
}
// ...
List&lt;String&gt; myList = ...;
applyToListInPlace(myList, new Func&lt;String, String&gt;() {
    public String apply(String in) {
        return in.toLowerCase();
    }
});
</snippet></ROW><ROW><id>899172</id><snippet>List</snippet></ROW><ROW><id>899172</id><snippet>public static &lt;In, Out&gt; List&lt;Out&gt; map(List&lt;In&gt; in, Func&lt;In, Out&gt; f) {
    List&lt;Out&gt; out = new ArrayList&lt;Out&gt;(in.size());
    for (In inObj : in) {
        out.add(f.apply(inObj));
    }
    return out;
}
// ...
List&lt;String&gt; myList = ...;
List&lt;String&gt; lowerCased = map(myList, new Func&lt;String, String&gt;() {
    public String apply(String in) {
        return in.toLowerCase();
    }
});
</snippet></ROW><ROW><id>899172</id><snippet>map</snippet></ROW><ROW><id>899176</id><snippet>for item in thelist:
  thefile.write("%s\n" % item)
</snippet></ROW><ROW><id>899176</id><snippet>for item in thelist:
  print&gt;&gt;thefile, item
</snippet></ROW><ROW><id>899176</id><snippet>[]</snippet></ROW><ROW><id>899314</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('-o 1 --long "Some long string"')
['-o', '1', '--long', 'Some long string']
</snippet></ROW><ROW><id>899616</id><snippet>import os

def findup(filename):
    drive, thisdir = os.path.splitdrive(os.getcwd())
    while True:
        fullpath = os.path.join(drive, thisdir, filename)
        if os.path.isfile(fullpath):
            return fullpath
        if thisdir == os.path.sep: #root dir
            raise LookupError('file not found: %r' % filename)
        thisdir = os.path.dirname(thisdir)

os.makedirs('/tmp/foo/bar/baz/qux')
open('/tmp/foo/findme.txt', 'w').close()
os.chdir('/tmp/foo/bar/baz/qux')
print findup('findme.txt')
</snippet></ROW><ROW><id>899616</id><snippet>/tmp/foo/findme.txt
</snippet></ROW><ROW><id>899895</id><snippet>.</snippet></ROW><ROW><id>899895</id><snippet>^(\d{2})\.(\d{1})[\.](.*)
</snippet></ROW><ROW><id>899895</id><snippet>\1.0\2.\3
</snippet></ROW><ROW><id>900320</id><snippet>wikiquote</snippet></ROW><ROW><id>900320</id><snippet>import wikipedia
site = wikipedia.getSite('en', 'wikiquote')
</snippet></ROW><ROW><id>900404</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def f():
...     print inspect.stack()[1][3]
...
&gt;&gt;&gt; def g():
...     f()
...
&gt;&gt;&gt; g()
g
</snippet></ROW><ROW><id>900410</id><snippet>&gt;&gt;&gt; print eval("[('tupleValueA', 1), 'someString']")
[('tupleValueA', 1), 'someString']
</snippet></ROW><ROW><id>900410</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
'["foo", {"bar": ["baz", null, 1.0, 2]}]'
&gt;&gt;&gt; json.loads('["foo", {"bar": ["baz", null, 1.0, 2]}]')
["foo", {"bar": ["baz", null, 1.0, 2]}]
</snippet></ROW><ROW><id>900426</id><snippet>list(a) == list(b)
</snippet></ROW><ROW><id>900426</id><snippet>tuple(a) == tuple(b)
</snippet></ROW><ROW><id>900724</id><snippet>import x
</snippet></ROW><ROW><id>900724</id><snippet>x</snippet></ROW><ROW><id>900724</id><snippet>import x.y
</snippet></ROW><ROW><id>900724</id><snippet>y</snippet></ROW><ROW><id>900724</id><snippet>x</snippet></ROW><ROW><id>900724</id><snippet>x.y</snippet></ROW><ROW><id>900724</id><snippet>x
    __init__.py
    y.py
</snippet></ROW><ROW><id>900724</id><snippet>import x # the module as a whole
x.a # Must pick items out of the module
x.b

from x import a, b # two things lifted out of the module
a # items are global
b
</snippet></ROW><ROW><id>900724</id><snippet>__init__.py</snippet></ROW><ROW><id>900724</id><snippet>from x import y # isn't sensible
import x.y # importing a whole module.
</snippet></ROW><ROW><id>900724</id><snippet>__init__.py</snippet></ROW><ROW><id>900724</id><snippet>import module</snippet></ROW><ROW><id>900918</id><snippet>PyObject *ioMod, *openedFile;

PyGILState_STATE gilState = PyGILState_Ensure();

ioMod = PyImport_ImportModule("io");

openedFile = PyObject_CallMethod(ioMod, "open", "ss", "foo.txt", "wb");
Py_DECREF(ioMod);

PyObject_CallMethod(openedFile, "write", "y", "Written from Python C API!\n");
PyObject_CallMethod(openedFile, "flush", NULL);
PyObject_CallMethod(openedFile, "close", NULL);
Py_DECREF(openedFile);

PyGILState_Release(gilState);
Py_Finalize();
</snippet></ROW><ROW><id>900940</id><snippet>Dog</snippet></ROW><ROW><id>900940</id><snippet>&gt;&gt;&gt; class Dog():
...     def __init__(self, name, breed):
...             self.name = name
...             self.breed = breed
...     def talk(self):
...             print "Hi, my name is " + self.name + ", I am a " + self.breed
...
&gt;&gt;&gt; skip = Dog('Skip','Bulldog')
&gt;&gt;&gt; spot = Dog('Spot','Dalmatian')
&gt;&gt;&gt; spot.talk()
Hi, my name is Spot, I am a Dalmatian
&gt;&gt;&gt; skip.talk()
Hi, my name is Skip, I am a Bulldog
</snippet></ROW><ROW><id>900940</id><snippet>Client</snippet></ROW><ROW><id>901098</id><snippet>import re

def occurences(ch_searched, str_input):
    return [i.start() for i in re.finditer(ch_searched, str_input)]

def betweeners(str_input, ch_from, ch_to):
    starts = occurences(ch_from, str_input)
    ends = occurences(ch_to, str_input)
    result = []
    for start in starts:
        for end in ends:
            if start&lt;end:
                result.append( str_input[start:end+1] )
    return result

print betweeners('KANNKAAN', "K", "N")
</snippet></ROW><ROW><id>901400</id><snippet>getattr</snippet></ROW><ROW><id>901400</id><snippet>getattr(rpc, function_name)(*params)
</snippet></ROW><ROW><id>901587</id><snippet>&lt;img src="../media/foo.png"&gt;
</snippet></ROW><ROW><id>901836</id><snippet>os.system("screen -dmS RealmD top")
</snippet></ROW><ROW><id>901836</id><snippet>top</snippet></ROW><ROW><id>901836</id><snippet>screen -rd RealmD</snippet></ROW><ROW><id>901992</id><snippet>["screen", "-dmS", "RealmD", "top"]</snippet></ROW><ROW><id>901992</id><snippet>["screen -dmS RealmD top"]</snippet></ROW><ROW><id>901992</id><snippet>screen</snippet></ROW><ROW><id>901992</id><snippet>shell=True</snippet></ROW><ROW><id>902010</id><snippet>class clsmaker(object):
    def __init__(self, N):
    	self.N = N
    def __call__(self, X):
    	return X * self.N
</snippet></ROW><ROW><id>902010</id><snippet>&gt;&gt;&gt; T1 = timeit.Timer('maker(3)(4)', 'from __main__ import maker')
&gt;&gt;&gt; T1.timeit()
1.2818338871002197
&gt;&gt;&gt; T2 = timeit.Timer('clsmaker(3)(4)', 'from __main__ import clsmaker')
&gt;&gt;&gt; T2.timeit()
2.2137160301208496
</snippet></ROW><ROW><id>902010</id><snippet>&gt;&gt;&gt; dis(clsmaker.__call__)
  5           0 LOAD_FAST                1 (X)
              3 LOAD_FAST                0 (self)
              6 LOAD_ATTR                0 (N)
              9 BINARY_MULTIPLY     
             10 RETURN_VALUE        
&gt;&gt;&gt; act = maker(3)
&gt;&gt;&gt; dis(act)
  3           0 LOAD_FAST                0 (X)
              3 LOAD_DEREF               0 (N)
              6 BINARY_MULTIPLY     
              7 RETURN_VALUE
</snippet></ROW><ROW><id>902189</id><snippet>start-stop-daemon</snippet></ROW><ROW><id>902189</id><snippet>/var/run/&lt;name&gt;.pid</snippet></ROW><ROW><id>902189</id><snippet>ps</snippet></ROW><ROW><id>902189</id><snippet>/proc/&lt;pid&gt;/exe</snippet></ROW><ROW><id>902195</id><snippet>settings.py</snippet></ROW><ROW><id>902195</id><snippet>...
INSTALLED_APPS = (
    ...
)
...

from localsettings import *
</snippet></ROW><ROW><id>902195</id><snippet>localsettings.py</snippet></ROW><ROW><id>902195</id><snippet>...
INSTALLED_APPS = (
    ...
)
...
</snippet></ROW><ROW><id>902195</id><snippet>localsettings.py</snippet></ROW><ROW><id>902195</id><snippet>settings.py</snippet></ROW><ROW><id>902195</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>902273</id><snippet>re.match</snippet></ROW><ROW><id>902273</id><snippet>re.search</snippet></ROW><ROW><id>902273</id><snippet>re.match</snippet></ROW><ROW><id>902273</id><snippet>re.search</snippet></ROW><ROW><id>902273</id><snippet>*</snippet></ROW><ROW><id>902273</id><snippet>*?</snippet></ROW><ROW><id>902273</id><snippet>re.search(r'\[\[(.*?)\|(.*?)\]\]', value)
</snippet></ROW><ROW><id>902273</id><snippet>re.sub</snippet></ROW><ROW><id>902273</id><snippet>import re

WIKILINK_RE = re.compile(r'\[\[(.*?)\|(.*?)\]\]')

def wikilink(value):
  def wikilink_sub_callback(match_obj):
    alias = match_obj.group(1).strip()
    text = match_obj.group(2).strip()
    if(alias exists in Page):
      class_attr = ''
    else:
      class_attr = ' class="redlink"'
    return '&lt;a href="%s"%s&gt;%s&lt;/a&gt;' % (alias, class_attr, text)

  return WIKILINK_RE.sub(wikilink_sub_callback, value)
</snippet></ROW><ROW><id>902417</id><snippet>cursor.execute("INSERT INTO table VALUES (%s, %s, %s)", var1, var2, var3)
</snippet></ROW><ROW><id>902417</id><snippet>%</snippet></ROW><ROW><id>902530</id><snippet>for word in wordlist</snippet></ROW><ROW><id>902530</id><snippet>word = word.strip()</snippet></ROW><ROW><id>902530</id><snippet>if guess in word:
    print ("Yessssh")
</snippet></ROW><ROW><id>902530</id><snippet>print (guess) #for testing purposes
</snippet></ROW><ROW><id>902530</id><snippet>print (repr(guess)) #for testing purposes
</snippet></ROW><ROW><id>902530</id><snippet>guess</snippet></ROW><ROW><id>902736</id><snippet>unsorted</snippet></ROW><ROW><id>902736</id><snippet>sorted</snippet></ROW><ROW><id>902736</id><snippet>sorted</snippet></ROW><ROW><id>902736</id><snippet>False</snippet></ROW><ROW><id>902736</id><snippet>while</snippet></ROW><ROW><id>902736</id><snippet>sorted</snippet></ROW><ROW><id>902736</id><snippet>False</snippet></ROW><ROW><id>902736</id><snippet>sorted</snippet></ROW><ROW><id>902736</id><snippet>True</snippet></ROW><ROW><id>902736</id><snippet>sorted = False  # We haven't started sorting yet

while not sorted:
    sorted = True  # Assume the list is now sorted
    for element in range(0, length):
        if badList[element] &gt; badList[element + 1]:
            sorted = False  # We found two elements in the wrong order
            hold = badList[element + 1]
            badList[element + 1] = badList[element]
            badList[element] = hold
    # We went through the whole list. At this point, if there were no elements
    # in the wrong order, sorted is still True. Otherwise, it's false, and the
    # while loop executes again.
</snippet></ROW><ROW><id>902736</id><snippet>for</snippet></ROW><ROW><id>902736</id><snippet>element</snippet></ROW><ROW><id>902736</id><snippet>element</snippet></ROW><ROW><id>902736</id><snippet>i</snippet></ROW><ROW><id>902736</id><snippet>for i in range(0, length):
</snippet></ROW><ROW><id>902736</id><snippet>range</snippet></ROW><ROW><id>902736</id><snippet>stop</snippet></ROW><ROW><id>902736</id><snippet>for i in range(length):
</snippet></ROW><ROW><id>902736</id><snippet>def bubble(bad_list):
</snippet></ROW><ROW><id>902736</id><snippet>(badList[i+1], badList[i])</snippet></ROW><ROW><id>902736</id><snippet>(3, 5)</snippet></ROW><ROW><id>902736</id><snippet>(badList[i], badList[i+1])</snippet></ROW><ROW><id>902736</id><snippet>bad_list[i], bad_list[i+1] = bad_list[i+1], bad_list[i]
</snippet></ROW><ROW><id>902736</id><snippet>my_list = [12, 5, 13, 8, 9, 65]

def bubble(bad_list):
    length = len(bad_list) - 1
    sorted = False

    while not sorted:
        sorted = True
        for i in range(length):
            if bad_list[i] &gt; bad_list[i+1]:
                sorted = False
                bad_list[i], bad_list[i+1] = bad_list[i+1], bad_list[i]

bubble(my_list)
print my_list
</snippet></ROW><ROW><id>902866</id><snippet>export CPPFLAGS="-I/usr/local/include"
</snippet></ROW><ROW><id>902866</id><snippet>export CPPFLAGS="-I/usr/local/include/ncurses"
</snippet></ROW><ROW><id>902866</id><snippet>&lt;curses.h&gt;</snippet></ROW><ROW><id>902866</id><snippet>export CPPFLAGS="-I/usr/gnu/include -I/usr/gnu/include/ncurses"
export LDFLAGS="-L/usr/gnu/lib"
./configure
</snippet></ROW><ROW><id>902866</id><snippet>gnu</snippet></ROW><ROW><id>902866</id><snippet>local</snippet></ROW><ROW><id>903071</id><snippet># this follows your pseudocode most closely, but it is *not*
# the most efficient since it creates the interpolation 
# functions on each call to bilinterp
from scipy import interpolate
import numpy
data = numpy.arange(0., 16.).reshape((4,4))  #2D array
prices = numpy.arange(10000., 50000., 10000.)
cars = numpy.arange(1., 5.)
def bilinterp(price,car):
    return interpolate.interp1d(cars, interpolate.interp1d(prices, a)(price))(car)
print bilinterp(22000,2)
</snippet></ROW><ROW><id>903138</id><snippet>hasattr</snippet></ROW><ROW><id>903138</id><snippet>try/except</snippet></ROW><ROW><id>903567</id><snippet>(?:)</snippet></ROW><ROW><id>903567</id><snippet>r"(?:(?P&lt;a&gt;1)=(?P&lt;b&gt;2))|(?P&lt;c&gt;3)"
</snippet></ROW><ROW><id>903567</id><snippet>|</snippet></ROW><ROW><id>903567</id><snippet>r"(?P&lt;a&gt;1)=(?P&lt;b&gt;2)|(?P&lt;c&gt;3)"
</snippet></ROW><ROW><id>903588</id><snippet>def codeinfo():
    import sys
    f = sys._getframe(1)

    filename = f.f_code.co_filename
    classname = ''

    if 'self' in f.f_locals:
        classname = f.f_locals['self'].__class__.__name__

    funcname = f.f_code.co_name

    return "filename: %s\nclass: %s\nfunc: %s" % (filename, classname, funcname)
</snippet></ROW><ROW><id>903588</id><snippet>logger.info("Some message \n %s" % codeinfo())
</snippet></ROW><ROW><id>903882</id><snippet>set completeopt-=preview
</snippet></ROW><ROW><id>904078</id><snippet>super</snippet></ROW><ROW><id>904078</id><snippet>super</snippet></ROW><ROW><id>904085</id><snippet>.encode</snippet></ROW><ROW><id>904085</id><snippet>codecs</snippet></ROW><ROW><id>904085</id><snippet>codecs.open</snippet></ROW><ROW><id>904085</id><snippet>csv</snippet></ROW><ROW><id>904085</id><snippet>import csv

def unicode_csv_reader(utf8_data, dialect=csv.excel, **kwargs):
    csv_reader = csv.reader(utf8_data, dialect=dialect, **kwargs)
    for row in csv_reader:
        yield [unicode(cell, 'utf-8') for cell in row]

filename = 'da.csv'
reader = unicode_csv_reader(open(filename))
for field1, field2, field3 in reader:
  print field1, field2, field3
</snippet></ROW><ROW><id>904085</id><snippet>csv</snippet></ROW><ROW><id>904085</id><snippet>line.decode('whateverweirdcodec').encode('utf-8')</snippet></ROW><ROW><id>904085</id><snippet>yield</snippet></ROW><ROW><id>904085</id><snippet>'utf-8'</snippet></ROW><ROW><id>904085</id><snippet>csv</snippet></ROW><ROW><id>904185</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>904185</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>904185</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>904185</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>904185</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>904185</id><snippet>python</snippet></ROW><ROW><id>904185</id><snippet>PATH</snippet></ROW><ROW><id>904357</id><snippet>as</snippet></ROW><ROW><id>904357</id><snippet>with</snippet></ROW><ROW><id>904357</id><snippet>__enter__</snippet></ROW><ROW><id>904655</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup("&lt;htm@)($*&gt;&lt;body&gt;&lt;table &lt;tr&gt;&lt;td&gt;hi&lt;/tr&gt;&lt;/td&gt;&lt;/body&gt;&lt;html")
&gt;&gt;&gt; print soup.prettify()
&lt;htm&gt;
 &lt;body&gt;
  &lt;table&gt;
   &lt;tr&gt;
    &lt;td&gt;
     hi
    &lt;/td&gt;
   &lt;/tr&gt;
  &lt;/table&gt;
 &lt;/body&gt;
&lt;/htm&gt;
</snippet></ROW><ROW><id>904756</id><snippet>sep = '...'
rest = text.split(sep, 1)[0]
</snippet></ROW><ROW><id>904900</id><snippet>page = wikipedia.Page(site, u"Wikiquote:Quote_of_the_day:" + month)
</snippet></ROW><ROW><id>904941</id><snippet>day = day.lstrip('0')

&gt;&gt;&gt; day = '01'
&gt;&gt;&gt; day.lstrip('0')
'1'
</snippet></ROW><ROW><id>905292</id><snippet>class Oracle(object):
  ...

class SQLite(object):
  ...

dbkind = dict(sqlite=SQLite, oracle=Oracle)

def Database(url):
  db_type, rest = string.split(self.url, "://", 1)
  return dbkind[db_type](rest)
</snippet></ROW><ROW><id>905294</id><snippet>os.system()</snippet></ROW><ROW><id>905294</id><snippet>system()</snippet></ROW><ROW><id>905294</id><snippet>man 3 system</snippet></ROW><ROW><id>905294</id><snippet>/bin/sh</snippet></ROW><ROW><id>905294</id><snippet>export VAR=val</snippet></ROW><ROW><id>905294</id><snippet>bash</snippet></ROW><ROW><id>905294</id><snippet>ksh</snippet></ROW><ROW><id>905294</id><snippet>/bin/sh</snippet></ROW><ROW><id>905294</id><snippet>bash</snippet></ROW><ROW><id>906141</id><snippet>==== FILE: b.py ====

class B:
def __init__(self):
    print "B"

import a

if __name__ == "__main__":
    a = a.A()

==== FILE: a.py ====
import b

class A(b.B):             ###=&gt; B  is not  defined
    def __init__(self):
        print "A"
</snippet></ROW><ROW><id>906689</id><snippet>use strict;
use warnings;

use Win32::OLE;
$Win32::OLE::Warn = 3;

my $ie = get_ie();

$ie-&gt;{Visible} = 1;

$ie-&gt;Navigate(
    'http://www.bmreports.com/servlet/com.logica.neta.bwp_PanBMDataServlet?'
    .'param1=&amp;param2=&amp;param3=&amp;param4=&amp;param5=2009-04-22&amp;param6=37#'
);

sleep 1 until is_ready( $ie );

my $scripts = $ie-&gt;Document-&gt;{scripts};

for my $script (in $scripts ) {
    print $script-&gt;text;
}

sub is_ready { $_[0]-&gt;{ReadyState} == 4 }

sub get_ie {
    Win32::OLE-&gt;new('InternetExplorer.Application', 
        sub { $_[0] and $_[0]-&gt;Quit },
    );
}

__END__

C:\Temp&gt; ie &gt; output
</snippet></ROW><ROW><id>906689</id><snippet>output</snippet></ROW><ROW><id>907127</id><snippet>compile</snippet></ROW><ROW><id>907127</id><snippet>exec</snippet></ROW><ROW><id>907127</id><snippet>compile</snippet></ROW><ROW><id>907127</id><snippet>exec</snippet></ROW><ROW><id>907127</id><snippet>compile</snippet></ROW><ROW><id>907127</id><snippet>exec</snippet></ROW><ROW><id>907127</id><snippet>compile</snippet></ROW><ROW><id>907127</id><snippet>exec</snippet></ROW><ROW><id>907370</id><snippet>reactor.listen</snippet></ROW><ROW><id>907370</id><snippet>IListeningPort</snippet></ROW><ROW><id>907370</id><snippet>stopListening</snippet></ROW><ROW><id>907370</id><snippet>reactor.listen</snippet></ROW><ROW><id>907423</id><snippet>Parent.options = dict(
    option1='value1',
    option2='value2',
)

Child.options = dict(Parent.options,
    option2='value2a',
    option3='value3',
)
</snippet></ROW><ROW><id>907595</id><snippet>chmod 755 nameofyourscript.py
</snippet></ROW><ROW><id>908440</id><snippet>import sys
sys.stdout.buffer.write(b"some binary data")
</snippet></ROW><ROW><id>908800</id><snippet>import re, sys

# your convert function goes here

regex = re.compile(r'(\d+)')
for line in sys.stdin:
  sys.stdout.write(regex.sub(lambda m:
  convert(int(m.group(1))), line))
</snippet></ROW><ROW><id>908800</id><snippet>re.sub</snippet></ROW><ROW><id>909076</id><snippet>&lt;netlist&gt;
  &lt;net NetName="abc" attr1="123" attr2="234" attr3="345".../&gt;
  &lt;net NetName="cde" attr1="456" attr2="567" attr3="678".../&gt;
  ....
&lt;/netlist&gt;
</snippet></ROW><ROW><id>909076</id><snippet>#!/usr/bin/perl

use strict;
use warnings;
use XML::Simple;

sub usage {
  die "Usage: $0 [NetName] ([attr])\n";
}

my $file = XMLin("file.xml", KeyAttr =&gt; { net =&gt; 'NetName' });

usage() if @ARGV == 0;

exists $file-&gt;{net}{$ARGV[0]}
  or die "$ARGV[0] does not exist.\n";


if(@ARGV == 2) {
  exists $file-&gt;{net}{$ARGV[0]}{$ARGV[1]}
    or die "NetName $ARGV[0] does not have attribute $ARGV[1].\n";
  print "$file-&gt;{net}{$ARGV[0]}{$ARGV[1]}.\n";

} elsif(@ARGV == 1) {
  print "$ARGV[0]:\n";
  print "  $_ = $file-&gt;{net}{$ARGV[0]}{$_}\n"
    for keys %{ $file-&gt;{net}{$ARGV[0]} };

} else {
  usage();
}
</snippet></ROW><ROW><id>909076</id><snippet>'NetName'</snippet></ROW><ROW><id>909076</id><snippet>'NetName'</snippet></ROW><ROW><id>909293</id><snippet>&gt;&gt;&gt; [random.randint(1,60) for _ in range(6)]
[22, 29, 48, 18, 20, 22]
</snippet></ROW><ROW><id>909293</id><snippet>&gt;&gt;&gt; [str(random.randint(1,60)) for _ in range(6)]
['55', '54', '15', '46', '42', '37']
</snippet></ROW><ROW><id>911318</id><snippet>class Point( object ):
    def __init__( self, x, y, z, data ):
        self.x, self.y, self.z = x, y, z
        self.data = data
    def distFrom( self, x, y, z )
        return math.sqrt( (self.x-x)**2 + (self.y-y)**2 + (self.z-z)**2 )

database = [ Point(x,y,z,data), Point(x,y,z,data), ... ]
</snippet></ROW><ROW><id>911318</id><snippet>[ p for p in database if (p.x, p.y, p.z) == ( 1, 2, 3 ) ]
</snippet></ROW><ROW><id>911318</id><snippet>[ p for p in database if p.y == 2 ]
</snippet></ROW><ROW><id>911318</id><snippet>[ p for p in database if p.distFrom( 1, 2, 3 ) &lt;= 3.0 ]
</snippet></ROW><ROW><id>911318</id><snippet>[ p for p in database if type(p.data) == Foo ]
</snippet></ROW><ROW><id>911365</id><snippet>print u'Ã'.encode('utf-8')
</snippet></ROW><ROW><id>911365</id><snippet>f = open(my_file)
a = f.next().decode('utf-8') # you have a unicode line in a
print a.encode('utf-8')
</snippet></ROW><ROW><id>911392</id><snippet>resizeEvent</snippet></ROW><ROW><id>911392</id><snippet>QMainWindows</snippet></ROW><ROW><id>911392</id><snippet>QWidget</snippet></ROW><ROW><id>911413</id><snippet>class GraphElement:
    def __init__(self, graph):
        pass

class Edge(GraphElement, tuple):
    def __new__(cls, graph, (source, target)):
        return tuple.__new__(cls, (source, target))
    def __init__(self, graph, (source, target)):
        GraphElement.__init__(self, graph)
</snippet></ROW><ROW><id>911750</id><snippet>def the_view(request):
  url_stuff = "custid=%s, sortid, ...." % (name.id, 2 ...)

  return render_to_response('template.html',
    {'url_stuff':url_stuff,},
    context_instance = RequestContext(request))
</snippet></ROW><ROW><id>911750</id><snippet> ....

    &lt;a href='{{url_stuff}}'&gt;{{name}}&lt;/a&gt;

 ....
</snippet></ROW><ROW><id>911772</id><snippet>Queue</snippet></ROW><ROW><id>911863</id><snippet>&gt;&gt;&gt; type(Person.objects.all())
&lt;class 'django.db.models.query.QuerySet'&gt;

&gt;&gt;&gt; pa = Person.objects.all() # Not evaluated yet - lazy
&gt;&gt;&gt; type(pa)
&lt;class 'django.db.models.query.QuerySet'&gt;
</snippet></ROW><ROW><id>911863</id><snippet>&gt;&gt;&gt; pa[2]
</snippet></ROW><ROW><id>911863</id><snippet>&gt;&gt;&gt; pa[2].first_name = "Blah"
</snippet></ROW><ROW><id>911863</id><snippet>&gt;&gt;&gt; PersonObject1.first_name = "Blah"
</snippet></ROW><ROW><id>911863</id><snippet>&gt;&gt;&gt; pa[2].save()
</snippet></ROW><ROW><id>911863</id><snippet>PersonObject2.save()
</snippet></ROW><ROW><id>912428</id><snippet>class C(object):
    blah blah

for name in (...):
    setattr(C, name, "....")
</snippet></ROW><ROW><id>912847</id><snippet>sys.executable</snippet></ROW><ROW><id>912847</id><snippet>import sys
import subprocess

theproc = subprocess.Popen([sys.executable, "myscript.py"])
theproc.communicate()
</snippet></ROW><ROW><id>913427</id><snippet># -*- coding: utf-8 -*-
do_it()
</snippet></ROW><ROW><id>913438</id><snippet>class FindableModel(db.Model):
  def __getattr__(self, name):
    if not name.startswith("find_by_"):
      raise AttributeError(name)
    field = name[len("find_by_"):]
    return lambda value: self.all().filter(field, value)
</snippet></ROW><ROW><id>913499</id><snippet>numpy.isnan(myarray).any()
</snippet></ROW><ROW><id>913499</id><snippet>import timeit
s = 'import numpy;a = numpy.arange(10000.).reshape((100,100));a[10,10]=numpy.nan'
ms = [
    'numpy.isnan(a).any()',
    'any(numpy.isnan(x) for x in a.flatten())']
for m in ms:
    print "  %.2f s" % timeit.Timer(m, s).timeit(1000), m
</snippet></ROW><ROW><id>913499</id><snippet>  0.11 s numpy.isnan(a).any()
  3.75 s any(numpy.isnan(x) for x in a.flatten())
</snippet></ROW><ROW><id>913499</id><snippet>&gt;&gt;&gt; a = numpy.float64(42.)
&gt;&gt;&gt; numpy.isnan(a).any()
False
&gt;&gt;&gt; a = numpy.float64(numpy.nan)
&gt;&gt;&gt; numpy.isnan(a).any()
True
</snippet></ROW><ROW><id>913989</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
from BeautifulSoup import BeautifulSoup

string = "Scam, hoax, or the real deal, he’s gonna work his way to the bottom of the sordid tale, and hopefully end up with an arcade game in the process."
s = BeautifulSoup(string,convertEntities=BeautifulSoup.HTML_ENTITIES).contents[0]
print s
</snippet></ROW><ROW><id>914011</id><snippet>httplib</snippet></ROW><ROW><id>914011</id><snippet>import httplib

@property
def http_fileno(self):
   return self.fp.fileno

@http_fileno.setter
def http_fileno(self, value):
   self.fp.fileno = value

httplib.HTTPResponse.fileno = http_fileno

# and now on with the previous code
# ...
</snippet></ROW><ROW><id>914011</id><snippet>fd.read(4096)</snippet></ROW><ROW><id>914011</id><snippet>fd</snippet></ROW><ROW><id>914011</id><snippet>poll</snippet></ROW><ROW><id>914390</id><snippet>#! /usr/bin/python2.4
import sys
h = set()
for line in sys.stdin.xreadlines():
  for term in line.split():
    h.add(term)
print len(h)
</snippet></ROW><ROW><id>914390</id><snippet>$ perl -ne 'for (split(" ", $_)) { $H{$_} = 1 } END { print scalar(keys%H), "\n" }' &lt;file.txt
</snippet></ROW><ROW><id>914709</id><snippet>line.split()</snippet></ROW><ROW><id>914709</id><snippet>textWithIndentation = open(sys.argv[1], "r").read()
</snippet></ROW><ROW><id>914733</id><snippet>for x in y[:-1]
</snippet></ROW><ROW><id>914733</id><snippet>y</snippet></ROW><ROW><id>914812</id><snippet>os.path.expanduser("~")
</snippet></ROW><ROW><id>914812</id><snippet>os.environ['HOME']
</snippet></ROW><ROW><id>915195</id><snippet>list</snippet></ROW><ROW><id>915195</id><snippet>dict</snippet></ROW><ROW><id>915195</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>915195</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>915460</id><snippet>import re

s = 'this-is,-toronto.-and-this-is,-boston'
t = re.sub(',-[a-z]', lambda x: x.group(0).upper(), s)
print t
</snippet></ROW><ROW><id>915460</id><snippet>this-is,-Toronto.-and-this-is,-Boston
</snippet></ROW><ROW><id>915616</id><snippet>from multiprocessing import Process, Queue, cpu_count
import random
import time


def serve(queue):
    works = ["task_1", "task_2"]
    while True:
        time.sleep(0.01)
        queue.put(random.choice(works))


def work(id, queue):
    while True:
        task = queue.get()
        if task is None:
            break
        time.sleep(0.05)
        print "%d task:" % id, task
    queue.put(None)


class Manager:
    def __init__(self):
        self.queue = Queue()
        self.NUMBER_OF_PROCESSES = cpu_count()

    def start(self):
        print "starting %d workers" % self.NUMBER_OF_PROCESSES
        self.workers = [Process(target=work, args=(i, self.queue,))
                        for i in xrange(self.NUMBER_OF_PROCESSES)]
        for w in self.workers:
            w.start()

        serve(self.queue)

    def stop(self):
        self.queue.put(None)
        for i in range(self.NUMBER_OF_PROCESS):
            self.workers[i].join()
        queue.close()


Manager().start()
</snippet></ROW><ROW><id>915616</id><snippet>starting 2 workers
0 task: task_1
1 task: task_2
0 task: task_2
1 task: task_1
0 task: task_1
</snippet></ROW><ROW><id>916176</id><snippet>from django.db.models.fields import EmailField
def email_field_init(self, *args, **kwargs):
  kwargs['max_length'] = kwargs.get('max_length', 200)
  CharField.__init__(self, *args, **kwargs)
EmailField.__init__ = email_field_init
</snippet></ROW><ROW><id>916176</id><snippet>from django.contrib.auth.models import User
from django.utils.translation import ugettext as _
from django.db import models
User.email = models.EmailField(_('e-mail address'), blank=True, max_length=200)
</snippet></ROW><ROW><id>916277</id><snippet>re.sub(r'"(?:""|[^"])+"', '"string"', original)
</snippet></ROW><ROW><id>916833</id><snippet>import cPickle
cPickle.dump(obj, open('save.p', 'wb')) 
obj = cPickle.load(open('save.p', 'rb'))
</snippet></ROW><ROW><id>916833</id><snippet>import json
encoded = json.dumps(obj)
obj = json.loads(encoded)
</snippet></ROW><ROW><id>917021</id><snippet>python</snippet></ROW><ROW><id>917021</id><snippet>$PATH</snippet></ROW><ROW><id>917021</id><snippet>svnperms.py</snippet></ROW><ROW><id>917021</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>917021</id><snippet>$PATH</snippet></ROW><ROW><id>917021</id><snippet>python</snippet></ROW><ROW><id>917021</id><snippet>which python</snippet></ROW><ROW><id>917028</id><snippet>def maplist(func, values):
    return [map(func, values[i:]) for i in xrange(len(values))]

&gt;&gt;&gt; maplist(lambda a: a* 2, [1,2,3])
[[2, 4, 6], [4, 6], [6]]
</snippet></ROW><ROW><id>917028</id><snippet>def maplist(func, values):
    return [func(values[i:]) for i in xrange(len(values))]

&gt;&gt;&gt; maplist(lambda l: list(reversed(l)), [1,2,3])
[[3, 2, 1], [3, 2], [3]]
</snippet></ROW><ROW><id>917063</id><snippet>OnInit()</snippet></ROW><ROW><id>917063</id><snippet>wxWidgets::wxApp::OnInit()</snippet></ROW><ROW><id>917063</id><snippet>__init__(self,...)</snippet></ROW><ROW><id>917238</id><snippet>&gt;&gt;&gt; sorted(mytuple)
[['I', 4], ['say', 2], ['say', 5], ['tomato', 3], ['tomato', 6], ['you', 1]]
</snippet></ROW><ROW><id>917238</id><snippet>&gt;&gt;&gt; tuple(sorted(mytuple))
(['I', 4], ['say', 2], ['say', 5], ['tomato', 3], ['tomato', 6], ['you', 1])
</snippet></ROW><ROW><id>917752</id><snippet>def on_mouseDrag( self, event ):       
    do_stuff()

    if event.MiddleIsDown():
        do_other_stuff()
</snippet></ROW><ROW><id>917897</id><snippet>/Library/Python</snippet></ROW><ROW><id>917897</id><snippet>python setup.py install</snippet></ROW><ROW><id>918160</id><snippet>dict((myTuple[1], index) for index, myTuple in enumerate(l))

&gt;&gt;&gt; l = [(1, 2, 3), (4, 5, 6), (1, 4, 6)]
&gt;&gt;&gt; dict((myTuple[1], index) for index, myTuple in enumerate(l))
{2: 0, 4: 2, 5: 1}
</snippet></ROW><ROW><id>918160</id><snippet>dict((myTuple[1], {'index': index}) for index, myTuple in enumerate(l))
</snippet></ROW><ROW><id>918160</id><snippet>{2: {'index': 0}, 4: {'index': 2}, 5: {'index': 1}}
</snippet></ROW><ROW><id>918160</id><snippet>def build_index(l):
    indexes = [(myTuple[1], index) for index, myTuple in enumerate(l)]
    d = {}
    for e, index in indexes:
        d[e] = min(index, d.get(e, index))
    return d

&gt;&gt;&gt; l = [(1, 2, 3), (4, 5, 6), (1, 4, 6), (2, 4, 6)]
&gt;&gt;&gt; build_index(l)
{2: 0, 4: 2, 5: 1}
</snippet></ROW><ROW><id>918160</id><snippet>def index(l, key):
    d = {}
    for index, myTuple in enumerate(l):
        d[key(myTuple)] = min(index, d.get(key(myTuple), index))
    return d

&gt;&gt;&gt; index(l, lambda a: a[1])
{2: 0, 4: 2, 5: 1}
</snippet></ROW><ROW><id>918178</id><snippet>import os
dir = os.path.dirname(__file__)
filename = os.path.join(dir, '/relative/path/to/file/you/want')
</snippet></ROW><ROW><id>918178</id><snippet>__file__</snippet></ROW><ROW><id>918178</id><snippet>__main__</snippet></ROW><ROW><id>918178</id><snippet>#foo.py
import os
print os.getcwd()
print __file__

#in the interactive interpreter
&gt;&gt;&gt; import foo
/Users/jason
foo.py

#and finally, at the shell:
~ % python foo.py
/Users/jason
foo.py
</snippet></ROW><ROW><id>918178</id><snippet>__file__</snippet></ROW><ROW><id>918178</id><snippet>&gt;&gt;&gt; import collections #note that collections is a C extension in Python 2.5
&gt;&gt;&gt; collections.__file__
'/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-
dynload/collections.so'
</snippet></ROW><ROW><id>918410</id><snippet>urls.py</snippet></ROW><ROW><id>918410</id><snippet>urlpatterns = patterns('',
    (r'^compare/(\d+)/(\d+)/$', 'my.compareview'),
)
</snippet></ROW><ROW><id>918410</id><snippet>def compareview(request, id1, id2):
    # in_bulk returns a dict: { obj_id1: &lt;MyModel instance&gt;, 
    #                           obj_id2: &lt;MyModel instance&gt; }
    # the SQL pulls all at once, rather than sequentially... arguably
    # better than async as it pulls in one DB hit, rather than two
    # happening at the same time
    comparables = MyModel.objects.in_bulk([id1, id2])
    o1, o2 = (comparables.get(id1), comparables.get(id2))      
</snippet></ROW><ROW><id>918425</id><snippet>&gt;&gt;&gt; print 'абвгд'
абвгд
</snippet></ROW><ROW><id>918425</id><snippet>&gt;&gt;&gt; u'абвгд'
</snippet></ROW><ROW><id>918425</id><snippet>u</snippet></ROW><ROW><id>918425</id><snippet>&gt;&gt;&gt; us = 'абвгд'.decode('my-terminal-encoding')
</snippet></ROW><ROW><id>918425</id><snippet># -*- encoding: ISO-8859-5 -*-
us = u'абвгд'
</snippet></ROW><ROW><id>918425</id><snippet>sys.setdefaultencoding(...)</snippet></ROW><ROW><id>918425</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>918960</id><snippet>from struct import Struct

unpacker = Struct("b")
unpacker.unpack("z")[0]
</snippet></ROW><ROW><id>919067</id><snippet>string</snippet></ROW><ROW><id>919067</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; insensitive_hippo = re.compile(re.escape('hippo'), re.IGNORECASE)
&gt;&gt;&gt; insensitive_hippo.sub('giraffe', 'I want a hIPpo for my birthday')
'I want a giraffe for my birthday'
</snippet></ROW><ROW><id>919501</id><snippet>from ctypes import *

list = (c_int*1)()

def customresize(array, new_size):
    resize(array, sizeof(array._type_)*new_size)
    return (array._type_*new_size).from_address(addressof(array))

list[0] = 123
list = customresize(list, 5)

&gt;&gt;&gt; list[0]
123
&gt;&gt;&gt; list[4]
0
</snippet></ROW><ROW><id>919684</id><snippet>def manyArgs(*arg):
  print "I was called with", len(arg), "arguments:", arg

&gt;&gt;&gt; manyArgs(1)
I was called with 1 arguments: (1,)
&gt;&gt;&gt; manyArgs(1, 2,3)
I was called with 3 arguments: (1, 2, 3)
</snippet></ROW><ROW><id>919928</id><snippet>thread.get_ident()</snippet></ROW><ROW><id>919928</id><snippet>thread</snippet></ROW><ROW><id>919928</id><snippet>threading.current_thread()</snippet></ROW><ROW><id>919928</id><snippet>threading.currentThread()</snippet></ROW><ROW><id>919935</id><snippet>from lineup import registry
from lineup import _debug

def create_archive(queue_id, queue):
    queue.set_param("zip_link", _create_archive(resource = queue.context_object, user = queue.user))
    return queue


def create_archive_callback(queue_id, queue):
    _send_email_notification(subject = queue.get_param("zip_link"), user = queue.user)
    return queue

registry.register_job('create_archive', create_archive, callback = create_archive_callback)
</snippet></ROW><ROW><id>919935</id><snippet>    from lineup.factory import JobFactory
    j = JobFactory()
    j.create_job(self, 'create_archive', request.user, your_resource_object_containing_files_to_zip, { 'extra_param': 'value' })
</snippet></ROW><ROW><id>919935</id><snippet>./manage.py run_queue
</snippet></ROW><ROW><id>919945</id><snippet>def __unicode__(self):
    return u'%s' % self.choice
</snippet></ROW><ROW><id>920539</id><snippet>import gc

def foo():                              
    code = """
class DummyA(object):
    pass             
"""
    context = {}
    exec code in context
    exec code in context

    gc.collect()
    print len(gc.garbage), len(gc.get_objects())

gc.enable()
foo(); foo() # amount of objects doesn't increase
gc.set_debug(gc.DEBUG_LEAK)
foo() # leaks
</snippet></ROW><ROW><id>920692</id><snippet>range</snippet></ROW><ROW><id>920692</id><snippet>xrange</snippet></ROW><ROW><id>920692</id><snippet>sorted</snippet></ROW><ROW><id>920692</id><snippet>enumerate</snippet></ROW><ROW><id>920928</id><snippet># Send an HTML email with an embedded image and a plain text message for
# email clients that don't want to display the HTML.

from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage

# Define these once; use them twice!
strFrom = 'from@example.com'
strTo = 'to@example.com'

# Create the root message and fill in the from, to, and subject headers
msgRoot = MIMEMultipart('related')
msgRoot['Subject'] = 'test message'
msgRoot['From'] = strFrom
msgRoot['To'] = strTo
msgRoot.preamble = 'This is a multi-part message in MIME format.'

# Encapsulate the plain and HTML versions of the message body in an
# 'alternative' part, so message agents can decide which they want to display.
msgAlternative = MIMEMultipart('alternative')
msgRoot.attach(msgAlternative)

msgText = MIMEText('This is the alternative plain text message.')
msgAlternative.attach(msgText)

# We reference the image in the IMG SRC attribute by the ID we give it below
msgText = MIMEText('&lt;b&gt;Some &lt;i&gt;HTML&lt;/i&gt; text&lt;/b&gt; and an image.&lt;br&gt;&lt;img src="cid:image1"&gt;&lt;br&gt;Nifty!', 'html')
msgAlternative.attach(msgText)

# This example assumes the image is in the current directory
fp = open('test.jpg', 'rb')
msgImage = MIMEImage(fp.read())
fp.close()

# Define the image's ID as referenced above
msgImage.add_header('Content-ID', '&lt;image1&gt;')
msgRoot.attach(msgImage)

# Send the email (this example assumes SMTP authentication is required)
import smtplib
smtp = smtplib.SMTP()
smtp.connect('smtp.example.com')
smtp.login('exampleuser', 'examplepass')
smtp.sendmail(strFrom, strTo, msgRoot.as_string())
smtp.quit()
</snippet></ROW><ROW><id>921139</id><snippet>for e in Entry.objects.all():
   if i.entered.hour&gt;= 9 and i.entered.hour &lt; 17 :# or break down to minutes/seconds
        list.append(e)
</snippet></ROW><ROW><id>922381</id><snippet>.egg</snippet></ROW><ROW><id>922381</id><snippet>/Library/Python/2.5/site-packages/</snippet></ROW><ROW><id>922381</id><snippet>cx_Oracle.egg</snippet></ROW><ROW><id>922381</id><snippet>repr()</snippet></ROW><ROW><id>922381</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib
&lt;module 'urllib' from '/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/urllib.pyc'&gt;
&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; BeautifulSoup
&lt;module 'BeautifulSoup' from '/Library/Python/2.5/site-packages/BeautifulSoup-3.0.6-py2.5.egg/BeautifulSoup.py'&gt;
</snippet></ROW><ROW><id>922381</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>922381</id><snippet>cx_Oracle</snippet></ROW><ROW><id>922381</id><snippet>cd /usr/local/bin/
grep EASY-INSTALL * | grep cx_Oracle
</snippet></ROW><ROW><id>922381</id><snippet>cd /usr/local/bin/
grep cx_Oracle *
</snippet></ROW><ROW><id>922796</id><snippet>isinstance(some_object, basestring)
</snippet></ROW><ROW><id>922796</id><snippet>True</snippet></ROW><ROW><id>922796</id><snippet>if isinstance(some_object, basestring):
    ...
elif all(isinstance(item, basestring) for item in some_object): # check iterable for stringness of all items. Will raise TypeError if some_object is not iterable
    ...
else:
    raise TypeError # or something along that line
</snippet></ROW><ROW><id>923108</id><snippet>import subprocess
process = subprocess.Popen(["yourcommand"], stdout=subprocess.PIPE)
result = process.communicate()[0]
</snippet></ROW><ROW><id>923147</id><snippet>&gt;&gt;&gt; cols = 6
&gt;&gt;&gt; rows = 3
&gt;&gt;&gt; a = [[0]*cols for _ in [0]*rows]
&gt;&gt;&gt; a
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; a[0][3] = 2
&gt;&gt;&gt; a
[[0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
</snippet></ROW><ROW><id>923147</id><snippet>&gt;&gt;&gt; lst_2d = [[0] * 3 for i in xrange(3)]
&gt;&gt;&gt; lst_2d
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
&gt;&gt;&gt; lst_2d[0][0] = 5
&gt;&gt;&gt; lst_2d
[[5, 0, 0], [0, 0, 0], [0, 0, 0]]
</snippet></ROW><ROW><id>923313</id><snippet>req1 = urllib2.Request(url1)
response = urllib2.urlopen(req1)
cookie = response.headers.get('Set-Cookie')

# Use the cookie is subsequent requests
req2 = urllib2.Request(url2)
req2.add_header('cookie', cookie)
response = urllib2.urlopen(req2)
</snippet></ROW><ROW><id>923373</id><snippet>import glob
from BeautifulSoup import BeautifulSoup

for filename in glob.glob('/home/phi/Data/*.htm'):
    soup = BeautifulSoup(open(filename, "r").read()) # assuming some HTML
    for a_tr in soup.findAll("tr", attrs={ "class" : "evenColor" }):
        print a_tr
</snippet></ROW><ROW><id>923494</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>923494</id><snippet>pattern = re.compile('&lt;p class=\"thisClass\"&gt;(.*?)&lt;\/p&gt;', re.DOTALL)
</snippet></ROW><ROW><id>923562</id><snippet>(a, b, *rest) = seq
</snippet></ROW><ROW><id>924166</id><snippet>regexp = re.compile(r'\[(\d+)\] SERVICE NOTIFICATION: (.+)')
with open('var/tmp/nagios.log', 'r') as file:
    for line in file:
        fields = line.split(';')
        match = regexp.match(fields[0])
        if match:
            timestamp = int(match.group(1))
            hostname = match.group(2)
</snippet></ROW><ROW><id>924835</id><snippet>the_dict</snippet></ROW><ROW><id>924835</id><snippet>globals().update(the_dict)</snippet></ROW><ROW><id>924835</id><snippet>for (n, v) in the_dict.items():
    exec('%s=%s' % (n, repr(v)))
</snippet></ROW><ROW><id>924835</id><snippet>exec</snippet></ROW><ROW><id>925081</id><snippet>import os
from os.path import join, isdir, islink, isfile

def mywalk(top, topdown=True, onerror=None, ignore_list=('.ignore',)):
    try:
        # Note that listdir and error are globals in this module due
        # to earlier import-*.
        names = os.listdir(top)
    except Exception, err:
        if onerror is not None:
            onerror(err)
        return
    if len([1 for x in names if x in ignore_list]):
        return 
    dirs, nondirs = [], []
    for name in names:
        if isdir(join(top, name)):
            dirs.append(name)
        else:
            nondirs.append(name)

    if topdown:
        yield top, dirs, nondirs
    for name in dirs:
        path = join(top, name)
        if not islink(path): 
            for x in mywalk(path, topdown, onerror, ignore_list):
                yield x
    if not topdown:
        yield top, dirs, nondirs
</snippet></ROW><ROW><id>925089</id><snippet>main</snippet></ROW><ROW><id>925089</id><snippet>import sys

def main(args):
    pass

# All your other function definitions here

if __name__ == '__main__':
    exit(main(sys.argv[1:]))
</snippet></ROW><ROW><id>925089</id><snippet>main</snippet></ROW><ROW><id>925089</id><snippet>__name__</snippet></ROW><ROW><id>925089</id><snippet>main</snippet></ROW><ROW><id>925089</id><snippet>dict</snippet></ROW><ROW><id>925089</id><snippet>dict</snippet></ROW><ROW><id>925155</id><snippet>import</snippet></ROW><ROW><id>925155</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>925155</id><snippet>#mainprogram.py
class mainprogram:
    def runme(self):
        execfile("my2ndscript.py")
    def bleh(self):
        print "bleh"
if __name__ == '__main__':
    mainprogram().runme()

#my2ndscript.py
import mainprogram
x = mainprogram.mainprogram()
x.bleh()
</snippet></ROW><ROW><id>925155</id><snippet>mainprogram</snippet></ROW><ROW><id>925155</id><snippet>#mainprogram.py
class mainprogram:
    def runme(self):
        execfile("my2ndscript.py", globals={'this': self})
    def bleh(self):
        print "bleh"
if __name__ == '__main__':
    mainprogram().runme()

#my2ndscript.py
this.bleh()
</snippet></ROW><ROW><id>925155</id><snippet>execfile</snippet></ROW><ROW><id>925155</id><snippet>import</snippet></ROW><ROW><id>925155</id><snippet>__import__</snippet></ROW><ROW><id>925155</id><snippet>reload()</snippet></ROW><ROW><id>925155</id><snippet>#mainprogram.py
import my2ndscript

class mainprogram:
    def runme(self):
        reload(my2ndscript)
        my2ndscript.main(self)
    def bleh(self):
        print "bleh"

if __name__ == '__main__':
    mainprogram().runme()

#my2ndscript.py
def main(program):
    program.bleh()
</snippet></ROW><ROW><id>925241</id><snippet>Queue</snippet></ROW><ROW><id>925241</id><snippet>Queue.Queue</snippet></ROW><ROW><id>925241</id><snippet>multiprocessing</snippet></ROW><ROW><id>925241</id><snippet>Queue.Queue</snippet></ROW><ROW><id>925241</id><snippet>multiprocessing</snippet></ROW><ROW><id>925241</id><snippet>Queue.Queue</snippet></ROW><ROW><id>925590</id><snippet>class Photo(admin.ModelAdmin):
    class Media:
        js = ('jquery.js', 'inlines.js',)
</snippet></ROW><ROW><id>925590</id><snippet>$(document).ready(function(){
    // Note the name passed in is the model's name, all lower case
    $('div.last-related').after('&lt;div&gt;&lt;a class="add" href="#" onclick="return add_inline_form(\'photos\')"&gt;');
});
</snippet></ROW><ROW><id>925590</id><snippet>inline</snippet></ROW><ROW><id>925856</id><snippet>input='adId:4028cb901dd9720a011e1160afbc01a3;siteId:8a8ee4f720e6beb70120e6d8e08b0002;userId:5082a05c-015e-4266-9874-5dc6262da3e0'

result={}
for pair in input.split(';'):
    (key,value) = pair.split(':')
    result[key] = value

print result['adId']
print result['siteId']
print result['userId']
</snippet></ROW><ROW><id>925872</id><snippet>passthru('/usr/python/bin/python3 ../cgi-bin/tabular.py 1 2&gt;&amp;1');
</snippet></ROW><ROW><id>926609</id><snippet>1. An object can be iterated over with "for" if it implements
   __iter__() or __getitem__().

2. An object can function as an iterator if it implements next().
</snippet></ROW><ROW><id>926832</id><snippet>class A(object):
    # show what happens with a non-iterable class with no __getitem__
    pass

class B(object):
    def __getitem__(self, k):
        return k
    def __iter__(self):
        raise TypeError('%r object is not iterable'
                        % self.__class__.__name__)
</snippet></ROW><ROW><id>926832</id><snippet>&gt;&gt;&gt; iter(A())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'A' object is not iterable
&gt;&gt;&gt; iter(B())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "iter.py", line 9, in __iter__
    % self.__class__.__name__)
TypeError: 'B' object is not iterable
</snippet></ROW><ROW><id>926977</id><snippet>all(value in some_map for value in required_values)
</snippet></ROW><ROW><id>927081</id><snippet>server = hash_key % len(servers)</snippet></ROW><ROW><id>927599</id><snippet>\s</snippet></ROW><ROW><id>927599</id><snippet>re</snippet></ROW><ROW><id>927599</id><snippet>startswith</snippet></ROW><ROW><id>927599</id><snippet>\s</snippet></ROW><ROW><id>927890</id><snippet>os.stat()</snippet></ROW><ROW><id>927890</id><snippet>pwd.getpwuid()</snippet></ROW><ROW><id>927890</id><snippet>grp.getgrgid()</snippet></ROW><ROW><id>927890</id><snippet>import grp
import pwd
import os

stat_info = os.stat('/path')
uid = stat_info.st_uid
gid = stat_info.st_gid
print uid, gid

user = pwd.getpwuid(uid)[0]
group = grp.getgrgid(gid)[0]
print user, group
</snippet></ROW><ROW><id>927925</id><snippet>sudo /etc/init.d/apache stop
sudo /etc/init.d/apache restart
</snippet></ROW><ROW><id>927925</id><snippet>raise Exception()</snippet></ROW><ROW><id>928013</id><snippet>class Person(object):
    AnotherName = 'Sue Ann'
    def __init__(self):
        super(Person, self).__init__()
        self.FirstName = 'Tom'
        self.LastName = 'Sneed'

    def get_name(self):
        return self.FirstName + ' ' + self.LastName

class Employee(Person):
    def __init__(self):
        super(Employee, self).__init__()
        self.empnum = 'abc123'

    def get_emp(self):
        print self.AnotherName
        return self.FirstName + ' ' + 'abc'
</snippet></ROW><ROW><id>928352</id><snippet>(the entire matched section + all the matched groups)</snippet></ROW><ROW><id>928352</id><snippet>group()</snippet></ROW><ROW><id>928408</id><snippet>/usr/bin/python -&gt; python2.6
/usr/bin/python2.5
/usr/bin/python2.6
</snippet></ROW><ROW><id>928774</id><snippet>class SuperFoo(models.Model):
    name = models.CharField('name of SuperFoo instance', max_length=50)
    ...

class Foo(SuperFoo):
    ... # do something that changes verbose_name of name field of SuperFoo
Foo._meta.get_field('name').verbose_name = 'Whatever'
</snippet></ROW><ROW><id>928810</id><snippet>obj.__class__.__name__
</snippet></ROW><ROW><id>928943</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; reader = csv.reader(open('C:/www/stackoverflow.txt'), delimiter='\t')
&gt;&gt;&gt; for row in reader:
...     print row
...
['1', 'John Smith', 'Developer', 'http://twiiter.com/johns', 'Chicago, IL']
['2', 'John Doe', 'Developer', 'http://whatever.com', 'Tallahassee, FL']
</snippet></ROW><ROW><id>929100</id><snippet>from Tkinter import *
root = Tk()

aValue = "5"
spam = StringVar()
spam.set(aValue)

class MyScale(Scale):
    def __init__(self,var,*args,**kwargs):
        self.var_pointer = var
        Scale.__init__(self,*args,**kwargs)
        self.bind("&lt;ButtonRelease-1&gt;",self.getValue)
        self.set(var.get())
    def getValue(self,event):
        ## spam gets changed to the new value set 
        ## by the user manipulating the scale
        self.var_pointer.set(self.get())

eggs = MyScale(spam)
eggs.pack(anchor=CENTER)
</snippet></ROW><ROW><id>929107</id><snippet>NewValue = (((OldValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin
</snippet></ROW><ROW><id>929107</id><snippet>OldRange = (OldMax - OldMin)  
NewRange = (NewMax - NewMin)  
NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin
</snippet></ROW><ROW><id>929130</id><snippet>~/Library/Application Support/TextMate/Bundles/</snippet></ROW><ROW><id>929130</id><snippet>Bundles | Bundle Editor | Reload Bundles</snippet></ROW><ROW><id>929130</id><snippet>Mako</snippet></ROW><ROW><id>929130</id><snippet>HTML (Mako)</snippet></ROW><ROW><id>929208</id><snippet>    (...)
    while True:
        if line.rstrip().endswith('"""'):
            line = infile.readline()
            return find_comment(infile, line)
        else:
            line = infile.readline()
</snippet></ROW><ROW><id>929524</id><snippet>inspect.getsource(forms.ContactForm)</snippet></ROW><ROW><id>929524</id><snippet>BlockFinder.tokeneater()</snippet></ROW><ROW><id>929524</id><snippet>ContactForm</snippet></ROW><ROW><id>929524</id><snippet>tokenize.DEDENT</snippet></ROW><ROW><id>929524</id><snippet>inspect</snippet></ROW><ROW><id>929524</id><snippet>class ContactForm(forms.Form):
    full_name = forms.CharField(max_length=120)
    email = forms.EmailField()
    website = forms.URLField()
    message = forms.CharField(max_length=500, widget=forms.Textarea)
    send_notification = forms.BooleanField(required=False)
    # &lt;-- insert 4 spaces here
    fieldsets = ((u'Personal Information',
                {'fields': ('full_name', 'email', 'website'),
                'description': u'Your personal information will not ' \
                                u'be shared with 3rd parties.'}),
                (None,
                {'fields': ('message',),
                'description': u'All HTML will be stripped out.'}),
                (u'Preferences',
                {'fields': ('send_notification',)}))
</snippet></ROW><ROW><id>929524</id><snippet>inspect.getsource(forms)</snippet></ROW><ROW><id>929524</id><snippet>inspect</snippet></ROW><ROW><id>929783</id><snippet>a = value</snippet></ROW><ROW><id>929783</id><snippet>global</snippet></ROW><ROW><id>929783</id><snippet>a = 7
def setA(value):
    global a   # declare a to be a global
    a = value  # this sets the global value of a
</snippet></ROW><ROW><id>929849</id><snippet>os.getcwd</snippet></ROW><ROW><id>929849</id><snippet>fp = open('a.txt', 'w')
</snippet></ROW><ROW><id>929849</id><snippet>a.txt</snippet></ROW><ROW><id>929849</id><snippet>os.chdir</snippet></ROW><ROW><id>929899</id><snippet>'\n'</snippet></ROW><ROW><id>929899</id><snippet>count = 0
for line in open('myfile'):
    count += 1
print count, line # it will be the last line
</snippet></ROW><ROW><id>929899</id><snippet>def seek_newline_backwards(file_obj, eol_char='\n', buffer_size=200):
    if not file_obj.tell(): return # already in beginning of file
    # All lines end with \n, including the last one, so assuming we are just 
    # after one end of line char
    file_obj.seek(-1, os.SEEK_CUR)
    while file_obj.tell():
        ammount = min(buffer_size, file_obj.tell())
        file_obj.seek(-ammount, os.SEEK_CUR)
        data = file_obj.read(ammount)
        eol_pos = data.rfind(eol_char)
        if eol_pos != -1:
            file_obj.seek(eol_pos - len(data) + 1, os.SEEK_CUR)
            break
        file_obj.seek(-len(data), os.SEEK_CUR)
</snippet></ROW><ROW><id>929899</id><snippet>f = open('some_file.txt')
f.seek(0, os.SEEK_END)
seek_newline_backwards(f)
print f.tell(), repr(f.readline())
</snippet></ROW><ROW><id>929982</id><snippet>real_type</snippet></ROW><ROW><id>929982</id><snippet>from django.contrib.contenttypes.models import ContentType
from django.db import models

class InheritanceCastModel(models.Model):
    """
    An abstract base class that provides a ``real_type`` FK to ContentType.

    For use in trees of inherited models, to be able to downcast
    parent instances to their child types.

    """
    real_type = models.ForeignKey(ContentType, editable=False)

    def save(self, *args, **kwargs):
        if not self.id:
            self.real_type = self._get_real_type()
        super(InheritanceCastModel, self).save(*args, **kwargs)

    def _get_real_type(self):
        return ContentType.objects.get_for_model(type(self))

    def cast(self):
        return self.real_type.get_object_for_this_type(pk=self.pk)

    class Meta:
        abstract = True
</snippet></ROW><ROW><id>930180</id><snippet>Projectfundingdetail.objects.annotate(latest=Max('project__projectfundingdetail__end_date')).filter(end_date=F('latest')).filter(budget__lte==1000).select_related()
</snippet></ROW><ROW><id>930180</id><snippet>&gt;&gt;&gt; Projectfundingdetail.objects.latest_by_project()
</snippet></ROW><ROW><id>930180</id><snippet>&gt;&gt;&gt; Projectfundingdetail.objects.latest_by_project().filter(budget__lte=1000)
</snippet></ROW><ROW><id>930180</id><snippet>from django.db import connection, models
qn = connection.ops.quote_name

class ProjectfundingdetailManager(models.Manager):
    def latest_by_project(self):
        project_model = self.model._meta.get_field('project').rel.to

        names = {'project': qn(project_model._meta.db_table),
                 'pfd': qn(self.model._meta.db_table),
                 'end_date': qn(self.model._meta.get_field('end_date').column),
                 'project_id': qn(self.model._meta.get_field('project').column),
                 'pk': qn(self.model._meta.pk.column),
                 'p_pk': qn(project_model._meta.pk.column)}

        sql = """SELECT pfd.%(pk)s FROM %(project)s AS p 
                 JOIN %(pfd)s AS pfd ON p.%(p_pk)s = pfd.%(project_id)s
                 WHERE pfd.%(end_date)s =
                     (SELECT MAX(%(end_date)s) FROM %(pfd)s 
                      WHERE %(project_id)s = p.%(p_pk)s)
              """ % names

        cursor = connection.cursor()
        cursor.execute(sql)
        return self.model.objects.filter(id__in=[r[0] for r
                                                 in cursor.fetchall()])
</snippet></ROW><ROW><id>930316</id><snippet>def latin1_to_ascii (unicrap):
    """This replaces UNICODE Latin-1 characters with
    something equivalent in 7-bit ASCII. All characters in the standard
    7-bit ASCII range are preserved. In the 8th bit range all the Latin-1
    accented letters are stripped of their accents. Most symbol characters
    are converted to something meaningful. Anything not converted is deleted.
    """
    xlate = {
        0xc0:'A', 0xc1:'A', 0xc2:'A', 0xc3:'A', 0xc4:'A', 0xc5:'A',
        0xc6:'Ae', 0xc7:'C',
        0xc8:'E', 0xc9:'E', 0xca:'E', 0xcb:'E',
        0xcc:'I', 0xcd:'I', 0xce:'I', 0xcf:'I',
        0xd0:'Th', 0xd1:'N',
        0xd2:'O', 0xd3:'O', 0xd4:'O', 0xd5:'O', 0xd6:'O', 0xd8:'O',
        0xd9:'U', 0xda:'U', 0xdb:'U', 0xdc:'U',
        0xdd:'Y', 0xde:'th', 0xdf:'ss',
        0xe0:'a', 0xe1:'a', 0xe2:'a', 0xe3:'a', 0xe4:'a', 0xe5:'a',
        0xe6:'ae', 0xe7:'c',
        0xe8:'e', 0xe9:'e', 0xea:'e', 0xeb:'e',
        0xec:'i', 0xed:'i', 0xee:'i', 0xef:'i',
        0xf0:'th', 0xf1:'n',
        0xf2:'o', 0xf3:'o', 0xf4:'o', 0xf5:'o', 0xf6:'o', 0xf8:'o',
        0xf9:'u', 0xfa:'u', 0xfb:'u', 0xfc:'u',
        0xfd:'y', 0xfe:'th', 0xff:'y',
        0xa1:'!', 0xa2:'{cent}', 0xa3:'{pound}', 0xa4:'{currency}',
        0xa5:'{yen}', 0xa6:'|', 0xa7:'{section}', 0xa8:'{umlaut}',
        0xa9:'{C}', 0xaa:'{^a}', 0xab:'&lt;&lt;', 0xac:'{not}',
        0xad:'-', 0xae:'{R}', 0xaf:'_', 0xb0:'{degrees}',
        0xb1:'{+/-}', 0xb2:'{^2}', 0xb3:'{^3}', 0xb4:"'",
        0xb5:'{micro}', 0xb6:'{paragraph}', 0xb7:'*', 0xb8:'{cedilla}',
        0xb9:'{^1}', 0xba:'{^o}', 0xbb:'&gt;&gt;',
        0xbc:'{1/4}', 0xbd:'{1/2}', 0xbe:'{3/4}', 0xbf:'?',
        0xd7:'*', 0xf7:'/'
    }

    r = ''
    for i in unicrap:
        if xlate.has_key(ord(i)):
            r += xlate[ord(i)]
        elif ord(i) &gt;= 0x80:
            pass
        else:
            r += i
    return r

# This gives an example of how to use latin1_to_ascii().
# This creates a string will all the characters in the latin-1 character set
# then it converts the string to plain 7-bit ASCII.
if __name__ == '__main__':
s = unicode('','latin-1')
for c in range(32,256):
    if c != 0x7f:
        s = s + unicode(chr(c),'latin-1')
print 'INPUT:'
print s.encode('latin-1')
print
print 'OUTPUT:'
print latin1_to_ascii(s)
</snippet></ROW><ROW><id>930398</id><snippet>some_list[-1]</snippet></ROW><ROW><id>930398</id><snippet>some_list[-n]</snippet></ROW><ROW><id>930398</id><snippet>some_list[-1]</snippet></ROW><ROW><id>930398</id><snippet>some_list[-2]</snippet></ROW><ROW><id>930398</id><snippet>some_list[-len(some_list)]</snippet></ROW><ROW><id>930398</id><snippet>&gt;&gt;&gt; some_list = [1, 2, 3]
&gt;&gt;&gt; some_list[-1] = 5 # Set the last element
&gt;&gt;&gt; some_list[-2] = 3 # Set the second to last element
&gt;&gt;&gt; some_list
[1, 3, 5]
</snippet></ROW><ROW><id>930404</id><snippet>local</snippet></ROW><ROW><id>930404</id><snippet>from mako.template import Template
from mako.runtime import Context
from StringIO import StringIO

mytemplate = Template("""
&lt;%def name='html_link(w)'&gt;
&lt;a href='http://${w}'&gt;${w}&lt;/a&gt;
&lt;/%def&gt;
&lt;%def name='text_link(w)'&gt;
${w}
&lt;/%def&gt;
&lt;%def name="body()"&gt;
I visit ${getattr(local, format + '_link')(website)} all the time.
&lt;/%def&gt;
""")

buf = StringIO()
ctx = Context(buf, website='stackoverflow.com', format='html')
mytemplate.render_context(ctx)
print buf.getvalue()
</snippet></ROW><ROW><id>930404</id><snippet>I visit 
&lt;a href='http://stackoverflow.com'&gt;stackoverflow.com&lt;/a&gt;
 all the time.
</snippet></ROW><ROW><id>930537</id><snippet>import time

try:
    time.sleep(10)
finally:
    print "clean up"

clean up
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
KeyboardInterrupt
</snippet></ROW><ROW><id>930537</id><snippet>from signal import *
import sys, time

def clean(*args):
    print "clean me"
    sys.exit(0)

for sig in (SIGABRT, SIGBREAK, SIGILL, SIGINT, SIGSEGV, SIGTERM):
    signal(sig, clean)

time.sleep(10)
</snippet></ROW><ROW><id>930706</id><snippet>def parsemsg(s):
    """Breaks a message from an IRC server into its prefix, command, and arguments.
    """
    prefix = ''
    trailing = []
    if not s:
       raise IRCBadMessage("Empty line.")
    if s[0] == ':':
        prefix, s = s[1:].split(' ', 1)
    if s.find(' :') != -1:
        s, trailing = s.split(' :', 1)
        args = s.split()
        args.append(trailing)
    else:
        args = s.split()
    command = args.pop(0)
    return prefix, command, args

parsemsg(":test!~test@test.com PRIVMSG #channel :Hi!")
# ('test!~test@test.com', 'PRIVMSG', ['#channel', 'Hi!'])
</snippet></ROW><ROW><id>930849</id><snippet>&gt;&gt;&gt; s = '3x3+6x2+2x1+8x0'
&gt;&gt;&gt; re.findall(r'\d+(?=x)', s)
['3', '6', '2', '8']
</snippet></ROW><ROW><id>930849</id><snippet>re</snippet></ROW><ROW><id>930849</id><snippet>&gt;&gt;&gt; s = '3x3+6x2+2x1+8x0'
&gt;&gt;&gt; re.findall(r'(?&lt;=x)\d+', s)
['3', '2', '1', '0']
</snippet></ROW><ROW><id>930879</id><snippet># a.py
some_list = [1,2,3,4]

# b.py
import a
print a.some_list
</snippet></ROW><ROW><id>930910</id><snippet>@echo off
cd [path/to/project]
manage.py shell_plus
</snippet></ROW><ROW><id>931011</id><snippet>assertEqual</snippet></ROW><ROW><id>931011</id><snippet>assertEquals</snippet></ROW><ROW><id>931011</id><snippet>failUnlessEqual</snippet></ROW><ROW><id>931011</id><snippet> # Synonyms for assertion methods
 assertEqual = assertEquals = failUnlessEqual
</snippet></ROW><ROW><id>931011</id><snippet>failUnlessEqual</snippet></ROW><ROW><id>931011</id><snippet>assertEquals</snippet></ROW><ROW><id>931011</id><snippet>assertEqual</snippet></ROW><ROW><id>931034</id><snippet>self.redirect</snippet></ROW><ROW><id>931034</id><snippet>POST</snippet></ROW><ROW><id>931034</id><snippet>post</snippet></ROW><ROW><id>931034</id><snippet>get</snippet></ROW><ROW><id>931034</id><snippet>post</snippet></ROW><ROW><id>931034</id><snippet>POST</snippet></ROW><ROW><id>931034</id><snippet>def post</snippet></ROW><ROW><id>931034</id><snippet>def get</snippet></ROW><ROW><id>931034</id><snippet>action="post"</snippet></ROW><ROW><id>931034</id><snippet>action="get"</snippet></ROW><ROW><id>931034</id><snippet>post</snippet></ROW><ROW><id>931034</id><snippet>get</snippet></ROW><ROW><id>931095</id><snippet>&gt;&gt;&gt; 'hello world'[::-1]
'dlrow olleh'
</snippet></ROW><ROW><id>931095</id><snippet>[begin:end:step]</snippet></ROW><ROW><id>931229</id><snippet>self</snippet></ROW><ROW><id>931229</id><snippet>self</snippet></ROW><ROW><id>931229</id><snippet>def foo(result, *argv):
    print argv[0]
</snippet></ROW><ROW><id>931229</id><snippet>def foo(self, result, *argv):
    print argv[0]
</snippet></ROW><ROW><id>931229</id><snippet>self</snippet></ROW><ROW><id>931229</id><snippet>result</snippet></ROW><ROW><id>931275</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; pdb.pm()
</snippet></ROW><ROW><id>931354</id><snippet>friendList = friendList.append(self)
</snippet></ROW><ROW><id>931354</id><snippet>friendList</snippet></ROW><ROW><id>931354</id><snippet>None</snippet></ROW><ROW><id>931354</id><snippet>append</snippet></ROW><ROW><id>931354</id><snippet>return</snippet></ROW><ROW><id>931354</id><snippet>None</snippet></ROW><ROW><id>931354</id><snippet>def getFriends(self,degree, friendList):
    if degree == 0:
        friendList.append(self)
        return friendList
    else:
        friendList.append(self)
        for each in self.friends:
            each.getFriends(degree-1, friendList)
        return friendList
</snippet></ROW><ROW><id>931354</id><snippet>def getFriends(self,degree, friendList):
    friendList.append(self)
    if degree &gt; 0:
        for each in self.friends:
            each.getFriends(degree-1, friendList)
    return friendList
</snippet></ROW><ROW><id>931354</id><snippet>alist=alist.append(...)</snippet></ROW><ROW><id>931822</id><snippet>class myList(list):
    def __new__(cls, data=None):
        obj = super(myList, cls).__new__(cls, data)
        return obj

    def __str__(self):
        return 'myList(%s)' % list(self)

    def __add__(self, other):
        return myList(list(self) + list(other))

&gt;&gt;&gt; l = myList(range(5))
&gt;&gt;&gt; print l
myList([0, 1, 2, 3, 4])
&gt;&gt;&gt; print l + [1, 2]
myList([0, 1, 2, 3, 4, 1, 2])
&gt;&gt;&gt; l.sort()
&gt;&gt;&gt; print l
myList([0, 1, 2, 3, 4])
</snippet></ROW><ROW><id>932003</id><snippet>from decimal import Decimal, Context
ctx = Context(prec=20)
two = Decimal(2)
ctx.divide(ctx.power(two, Decimal(31)).ln(ctx), two.ln(ctx))
</snippet></ROW><ROW><id>932360</id><snippet>tags</snippet></ROW><ROW><id>932360</id><snippet>description</snippet></ROW><ROW><id>932360</id><snippet>description</snippet></ROW><ROW><id>932536</id><snippet>def next_string(s):
    strip_zs = s.rstrip('z')
    if strip_zs:
        return strip_zs[:-1] + chr(ord(strip_zs[-1]) + 1) + 'a' * (len(s) - len(strip_zs))
    else:
        return 'a' * (len(s) + 1)
</snippet></ROW><ROW><id>932536</id><snippet>z</snippet></ROW><ROW><id>932536</id><snippet>a</snippet></ROW><ROW><id>932536</id><snippet>z</snippet></ROW><ROW><id>932536</id><snippet>a</snippet></ROW><ROW><id>932812</id><snippet>^([NS])([0-5]?\d)°([0-5]?\d)'(?:([0-5]?\d)(?:\.\d)?")?([EW])$
</snippet></ROW><ROW><id>932812</id><snippet>^([NS])</snippet></ROW><ROW><id>932812</id><snippet>N</snippet></ROW><ROW><id>932812</id><snippet>S</snippet></ROW><ROW><id>932812</id><snippet>([0-5]?\d)°</snippet></ROW><ROW><id>932812</id><snippet>0</snippet></ROW><ROW><id>932812</id><snippet>9</snippet></ROW><ROW><id>932812</id><snippet>\d</snippet></ROW><ROW><id>932812</id><snippet>0</snippet></ROW><ROW><id>932812</id><snippet>5</snippet></ROW><ROW><id>932812</id><snippet>[0-5]</snippet></ROW><ROW><id>932812</id><snippet>0</snippet></ROW><ROW><id>932812</id><snippet>9</snippet></ROW><ROW><id>932812</id><snippet>0</snippet></ROW><ROW><id>932812</id><snippet>59</snippet></ROW><ROW><id>932812</id><snippet>°</snippet></ROW><ROW><id>932812</id><snippet>([0-5]?\d)'</snippet></ROW><ROW><id>932812</id><snippet>0</snippet></ROW><ROW><id>932812</id><snippet>59</snippet></ROW><ROW><id>932812</id><snippet>'</snippet></ROW><ROW><id>932812</id><snippet>(?:([0-5]?\d)(?:\.\d)?")?</snippet></ROW><ROW><id>932812</id><snippet>"</snippet></ROW><ROW><id>932812</id><snippet>0</snippet></ROW><ROW><id>932812</id><snippet>59</snippet></ROW><ROW><id>932812</id><snippet>([EW])$</snippet></ROW><ROW><id>932812</id><snippet>E</snippet></ROW><ROW><id>932812</id><snippet>W</snippet></ROW><ROW><id>932812</id><snippet>[0-5]</snippet></ROW><ROW><id>932812</id><snippet>[1-5]</snippet></ROW><ROW><id>932835</id><snippet>&gt;&gt;&gt; i = 1
&gt;&gt;&gt; locals()["i"]
1
</snippet></ROW><ROW><id>932835</id><snippet>locals()</snippet></ROW><ROW><id>932835</id><snippet>[i]</snippet></ROW><ROW><id>932835</id><snippet>[1]</snippet></ROW><ROW><id>932835</id><snippet>1</snippet></ROW><ROW><id>932835</id><snippet>i</snippet></ROW><ROW><id>933060</id><snippet> match = re.search (r'^\[(\d+)\] (SERVICE NOTIFICATION:).*(\bCRITICAL).*(%s)'
                    % options.hostname, line)
</snippet></ROW><ROW><id>933084</id><snippet>global</snippet></ROW><ROW><id>933084</id><snippet>def increment(n)
  # this creates a new local m
  m = n+1
  return m
</snippet></ROW><ROW><id>933084</id><snippet>m</snippet></ROW><ROW><id>933084</id><snippet>m</snippet></ROW><ROW><id>933084</id><snippet>global</snippet></ROW><ROW><id>933084</id><snippet>def increment(n)
  global increment_calls
  increment_calls += 1
  return n+1
</snippet></ROW><ROW><id>933084</id><snippet>global</snippet></ROW><ROW><id>933084</id><snippet>globvar</snippet></ROW><ROW><id>933084</id><snippet>&gt;&gt;&gt; import animals
&gt;&gt;&gt; d = animals.dog()
&gt;&gt;&gt; d.bark()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "animals.py", line 7, in bark
    print globvar
NameError: global name 'globvar' is not defined
</snippet></ROW><ROW><id>933084</id><snippet>globvar</snippet></ROW><ROW><id>933084</id><snippet>class dog:
   def __init__(self):
      global globvar
      globvar = 1
...
</snippet></ROW><ROW><id>933084</id><snippet>&gt;&gt;&gt; import animals
&gt;&gt;&gt; d = animals.dog()
&gt;&gt;&gt; d.bark()
1
&gt;&gt;&gt; print animals.globvar
1
</snippet></ROW><ROW><id>933091</id><snippet>\u03c6</snippet></ROW><ROW><id>933091</id><snippet>.data</snippet></ROW><ROW><id>933091</id><snippet>&amp;</snippet></ROW><ROW><id>933091</id><snippet>import codecs

def ent_replace(exc):
  if isinstance(exc, (UnicodeEncodeError, UnicodeTranslateError)):
    s = []
    for c in exc.object[exc.start:exc.end]:
      s.append(u'&amp;#x%4.4x;' % ord(c))
    return (''.join(s), exc.end)
  else:
    raise TypeError("can't handle %s" % exc.__name__)

codecs.register_error('ent_replace', ent_replace)
</snippet></ROW><ROW><id>933091</id><snippet>x.toxml().encode('ascii', 'ent_replace')</snippet></ROW><ROW><id>933271</id><snippet>from numpy import *
from pylab import ion, plot, draw, show, xlabel, ylabel, figure

sample_rate = 20000.
times = arange(0, 10., 1./sample_rate)
wfm0 = sin(2*pi*200.*times)
wfm1 = sin(2*pi*500.*times) *(10.-times)/10.
wfm = wfm0+wfm1
#  int test
#wfm *= 2**8
#wfm = wfm.astype(int16)
#wfm = wfm.astype(float)
#  abs test
#wfm = abs(wfm)
#  clip test
#wfm = clip(wfm,  -1.2, 1.2)

fft_length = 5*2048.
total_num_samps = len(times)
num_fft = (total_num_samps / fft_length ) - 2
temp = zeros((num_fft,fft_length), float)

for i in range(num_fft):
    temp[i,:] = wfm[i*fft_length:(i+1)*fft_length] 
pts = fft_length/2+1
data = (abs(fft.rfft(temp, fft_length)) / (pts))[:pts]

x_axis = arange(pts)*sample_rate*.5/pts
spec_range = pts
plot(x_axis, data[2], linewidth=3)
xlabel("freq (Hz)")
ylabel('abs(FFT)')
show()
</snippet></ROW><ROW><id>933493</id><snippet>inspect.getargspec(cb)</snippet></ROW><ROW><id>933493</id><snippet>d</snippet></ROW><ROW><id>933493</id><snippet>args = inspect.getargspec(cb)[0]
cb( **dict((a,d.get(a)) for a in args) )
</snippet></ROW><ROW><id>933633</id><snippet>entries = Entry.objects.filter(user=request.user).order_by("-timestamp")
</snippet></ROW><ROW><id>933633</id><snippet>{% for entry in entries %}
    &lt;td&gt;{{ entry.datadesc }}&lt;/td&gt;
    &lt;td&gt;&lt;table&gt;
    {% for file in entry.entryfile_set.all %}
        &lt;td&gt;{{ file.datafile.name|split:"/"|last }}&lt;/td&gt;
        &lt;td&gt;{{ file.datafile.size|filesizeformat }}&lt;/td&gt;
        &lt;td&gt;&lt;a href="{{ object.datafile.url }}"&gt;download&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="{% url main.views.delete object.id %}"&gt;delete&lt;/a&gt;&lt;/td&gt;
    {% endfor %}
    &lt;/table&gt;&lt;/td&gt;
{% endfor %}
</snippet></ROW><ROW><id>933633</id><snippet>related_name</snippet></ROW><ROW><id>933633</id><snippet>entry = models.ForeignKey(Entry)
</snippet></ROW><ROW><id>933633</id><snippet>entry = models.ForeignKey(Entry, related_name='files')
</snippet></ROW><ROW><id>933633</id><snippet>{% for file in files.entryfile_set.all %}
</snippet></ROW><ROW><id>933633</id><snippet>{% for file in entry.files.all %}
</snippet></ROW><ROW><id>933826</id><snippet>easy_install ElementTree
easy_install Markdown
</snippet></ROW><ROW><id>933826</id><snippet>import markdown
markdown_text = """[Hollywood Holt](http://www.hollywoodholt.com)"""
html = markdown.markdown(markdown_text)
</snippet></ROW><ROW><id>934173</id><snippet>codecs.BOM_UTF8</snippet></ROW><ROW><id>934173</id><snippet>import codecs

file = codecs.open("lol", "w", "utf-8")
file.write(u'\ufeff')
file.close()
</snippet></ROW><ROW><id>934543</id><snippet>import bluetooth

def whats_nearby():
    name_by_addr = {}
    nearby = bluetooth.discover_devices(flush_cache=True)
    for bd_addr in nearby:
        name = bluetooth.lookup_name( bd_addr, 5)
        print bd_addr, name
        name_by_addr[bd_addr] = name
    return name_by_addr

def what_services( addr, name ):
    print " %s - %s" % ( addr, name )
    for services in bluetooth.find_service(address = addr): 
        print "\t Name:           %s" % (services["name"]) 
        print "\t Description:    %s" % (services["description"]) 
        print "\t Protocol:       %s" % (services["protocol"]) 
        print "\t Provider:       %s" % (services["provider"]) 
        print "\t Port:           %s" % (services["port"]) 
        print "\t service-classes %s" % (services["service-classes"])
        print "\t profiles        %s" % (services["profiles"])
        print "\t Service id:  %s" % (services["service-id"]) 
        print "" 

if __name__ == "__main__":
    name_by_addr = whats_nearby()
    for addr in name_by_addr.keys():
        what_services(addr, name_by_addr[addr])
</snippet></ROW><ROW><id>934652</id><snippet>issubclass(n.dtype('int8').type, n.integer)
&gt;&gt;&gt; True
issubclass(n.dtype('int16').type, n.integer)
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>934682</id><snippet>src = 'foo="bar"\n'</snippet></ROW><ROW><id>934843</id><snippet>public abstract class Command {
  public final Object execute(Map&lt;String, Object&gt; args) {
    // do permission checking here or transaction management
    Object retval = doExecute(args);
    // do logging, cleanup, caching, etc here
    return retval;
  }
  // subclasses override this to do the real work
  protected abstract Object doExecute(Map&lt;String, Object&gt; args);
}
</snippet></ROW><ROW><id>935219</id><snippet>from setuptools.command import easy_install
easy_install.main( ["-U","py2app"] )
</snippet></ROW><ROW><id>935429</id><snippet>__method</snippet></ROW><ROW><id>935429</id><snippet>__method__</snippet></ROW><ROW><id>935429</id><snippet>_method</snippet></ROW><ROW><id>935429</id><snippet>_single_leading_underscore</snippet></ROW><ROW><id>935429</id><snippet>from M
    import *</snippet></ROW><ROW><id>935429</id><snippet>single_trailing_underscore_</snippet></ROW><ROW><id>935429</id><snippet>Tkinter.Toplevel(master, class_='ClassName')
</snippet></ROW><ROW><id>935429</id><snippet>__double_leading_underscore</snippet></ROW><ROW><id>935429</id><snippet>FooBar</snippet></ROW><ROW><id>935429</id><snippet>_FooBar__boo</snippet></ROW><ROW><id>935429</id><snippet>__double_leading_and_trailing_underscore__</snippet></ROW><ROW><id>935429</id><snippet>__init__</snippet></ROW><ROW><id>935429</id><snippet>__import__</snippet></ROW><ROW><id>935429</id><snippet>__file__</snippet></ROW><ROW><id>936075</id><snippet>textDidChange_</snippet></ROW><ROW><id>936075</id><snippet>NSTextField</snippet></ROW><ROW><id>936075</id><snippet>textDidChange</snippet></ROW><ROW><id>936075</id><snippet>controlTextDidChange_</snippet></ROW><ROW><id>936075</id><snippet>NSTextField</snippet></ROW><ROW><id>936075</id><snippet>NSControl</snippet></ROW><ROW><id>936075</id><snippet>def controlTextDidChange_(self, notification):
    NSLog("textdidchange")
</snippet></ROW><ROW><id>936124</id><snippet>GetAllSubsets(List objects) {
    List generated = {};
    GetAllSubsets(generated, [], objects);
    return generated;
}

GetAllSubsets(List subsetGenerated, List objectFixed, List objectsToFix) {
    GetAllSubsets(subsetGenerated, objectFixed, objectsToFix.sublist(1, objectsToFix.length());
    if (satisfy(toCheck = objectsFixed.add(objectsToFix.get(0)))) {
        subsetGenerated.add(toCheck);
        GetAllSubsets(subsetGenerated, toCheck, objectsToFix.sublist(1, objectsToFix.length());
    }
}
</snippet></ROW><ROW><id>936498</id><snippet>class MyThing( object ):
    def __init__( self, theInstance ):
        self.ec2_instance = theInstance
</snippet></ROW><ROW><id>936498</id><snippet>MyThing</snippet></ROW><ROW><id>936498</id><snippet>boto.ec2.instance.Instance</snippet></ROW><ROW><id>936536</id><snippet>iface = "eth0"
socket.inet_ntoa(fcntl.ioctl(socket.socket(socket.AF_INET, socket.SOCK_DGRAM), 35099, struct.pack('256s', iface))[20:24])
</snippet></ROW><ROW><id>936675</id><snippet>sys.exc_info()[:2]</snippet></ROW><ROW><id>936675</id><snippet>Queue.Queue</snippet></ROW><ROW><id>936675</id><snippet>.put</snippet></ROW><ROW><id>936675</id><snippet>.get</snippet></ROW><ROW><id>936705</id><snippet>shell=True</snippet></ROW><ROW><id>936705</id><snippet>for el in ('90.','52.62263.','26.5651.','10.8123.'):
    if el == '90.':
        z = ('0.')
    elif el == '52.62263.':
        z = ('0.', '72.', '144.', '216.', '288.')
    elif el == '26.5651':
        z = ('324.', '36.', '108.', '180.', '252.')
    else el == '10.8123':
        z = ('288.', '0.', '72.', '144.', '216.')

    for az in z:

        exepath = os.path.join('Path where .exe file is')
        exepath = os.path.normpath(comstring) 
        cmd = [exepath, '-el', str(el), '-n', str(z)]

        print 'The python program is running this command:'
        print cmd

        process = Popen(cmd, stderr=STDOUT, stdout=PIPE)
        outputstring = process.communicate()[0]

        print 'The command returned the following back to python:'
        print outputstring
        outputlist = outputstring.splitlines()
        AspecificLine = outputlist[22]   # get some specific line. 23?
        print AspecificLine
</snippet></ROW><ROW><id>937011</id><snippet>return self.insert(key, root=tmp.left)
</snippet></ROW><ROW><id>937011</id><snippet>self.insert(key, root=tmp.left)
</snippet></ROW><ROW><id>937324</id><snippet>def Application(environ, start_response):
    start_response('200 Ok', [('Content-type','text/plain')])
    response = []
    response.append('&lt;h1&gt;')
    response.append('hello, world!')
    response.append('&lt;/h1&gt;')
    return [''.join(response)] #returns ['&lt;h1&gt;hello, world!&lt;/h1&gt;']
</snippet></ROW><ROW><id>937516</id><snippet>print</snippet></ROW><ROW><id>937516</id><snippet>print</snippet></ROW><ROW><id>937516</id><snippet>Old: print "The answer is", 2*2
New: print("The answer is", 2*2)

Old: print x,           # Trailing comma suppresses newline
New: print(x, end=" ")  # Appends a space instead of a newline

Old: print              # Prints a newline
New: print()            # You must call the function!

Old: print &gt;&gt;sys.stderr, "fatal error"
New: print("fatal error", file=sys.stderr)

Old: print (x, y)       # prints repr((x, y))
New: print((x, y))      # Not the same as print(x, y)!
</snippet></ROW><ROW><id>937602</id><snippet>__init__.py</snippet></ROW><ROW><id>937602</id><snippet>__init__.py</snippet></ROW><ROW><id>937602</id><snippet>__init__.py</snippet></ROW><ROW><id>937602</id><snippet>urls.py</snippet></ROW><ROW><id>937602</id><snippet>__init__.py</snippet></ROW><ROW><id>937602</id><snippet>base.py</snippet></ROW><ROW><id>937602</id><snippet>urls.py</snippet></ROW><ROW><id>937602</id><snippet>urls.py</snippet></ROW><ROW><id>937602</id><snippet>urls.py</snippet></ROW><ROW><id>937739</id><snippet>somere.sub(lambda m: replacements[m.group()], text)
</snippet></ROW><ROW><id>937739</id><snippet>&gt;&gt;&gt; za = re.compile('z\w')
&gt;&gt;&gt; za.sub(lambda m: dict(za='BLU', zo='BLA')[m.group()], 'fa za zo bu')
'fa BLU BLA bu'
</snippet></ROW><ROW><id>937739</id><snippet>.get</snippet></ROW><ROW><id>937739</id><snippet>[]</snippet></ROW><ROW><id>937739</id><snippet>replacements</snippet></ROW><ROW><id>937739</id><snippet>'\d+S'</snippet></ROW><ROW><id>937739</id><snippet>def dict_sub(d, text): 
  """ Replace in 'text' non-overlapping occurences of REs whose patterns are keys
  in dictionary 'd' by corresponding values (which must be constant strings: may
  have named backreferences but not numeric ones). The keys must not contain
  anonymous matching-groups.
  Returns the new string.""" 

  # Create a regular expression  from the dictionary keys
  regex = re.compile("|".join("(%s)" % k for k in d))
  # Facilitate lookup from group number to value
  lookup = dict((i+1, v) for i, v in enumerate(d.itervalues()))

  # For each match, find which group matched and expand its value
  return regex.sub(lambda mo: mo.expand(lookup[mo.lastindex]), text)
</snippet></ROW><ROW><id>937739</id><snippet>  d={'\d+S': 'wot', '\d+T': 'zap'}
  t='And 23S, and 45T, and 66T but always 029S!'
  print dict_sub(d, t)
</snippet></ROW><ROW><id>937739</id><snippet>And wot, and zap, and zap but always wot!
</snippet></ROW><ROW><id>937739</id><snippet>lookup</snippet></ROW><ROW><id>937739</id><snippet>mo.expand(d.values()[mo.lastindex-1])</snippet></ROW><ROW><id>937739</id><snippet>d</snippet></ROW><ROW><id>938106</id><snippet>class Person(db.Model):
    mother = db.SelfReferenceProperty(collection_name='mother_set')
    father = db.SelfReferenceProperty(collection_name='father_set')
    firstName = db.StringProperty()
</snippet></ROW><ROW><id>938161</id><snippet>from StringIO import StringIO
import string

inputs = ["10:a stringly",
         "i1234e" ,
         "l1:a1:be",
         "d1:a1:b3:one3:twoe"]

# Constants
DICT_TYPE = 'd'
LIST_TYPE = 'l'
INT_TYPE  = 'i'
TOKEN_EOF = ''
TOKEN_END = 'e'
COLON     = ':'


class BadTypeIndicatorException(Exception):pass


def read_int(stream):

   s = ""

   while True:
      ch = stream.read(1)
      if ch not in [TOKEN_EOF, TOKEN_END, COLON]:
         s += ch
      else:
         break

   return s


def tokenize(stream):

   s = ""

   while True:

      ch = stream.read(1)

      if ch == TOKEN_END or ch == TOKEN_EOF:
         return 

      if ch == COLON:
         length = int(s)
         yield stream.read(length)
         s = ""

      else:
         s += ch


def parse(stream):

   TYPE = stream.read(1)

   if TYPE in string.digits:
      length = int( TYPE + read_int(stream) )
      return stream.read(length)

   elif TYPE is INT_TYPE: 
      return int( read_int(stream) )

   elif TYPE is LIST_TYPE: 
      return list(tokenize(stream))

   elif TYPE is DICT_TYPE:
      tokens = list(tokenize(stream))
      return dict(zip(tokens[0::2], tokens[1::2]))

   else: 
      raise BadTypeIndicatorException



for input in inputs:
   stream = StringIO(input)
   print parse(stream)
</snippet></ROW><ROW><id>938199</id><snippet>cherrypy</snippet></ROW><ROW><id>938199</id><snippet>import</snippet></ROW><ROW><id>938199</id><snippet>./cherrypy/tutorial</snippet></ROW><ROW><id>938199</id><snippet>.</snippet></ROW><ROW><id>938199</id><snippet>mod_python</snippet></ROW><ROW><id>938199</id><snippet>sys.path</snippet></ROW><ROW><id>938199</id><snippet>mod_python</snippet></ROW><ROW><id>938199</id><snippet>cherrypy</snippet></ROW><ROW><id>938457</id><snippet>m</snippet></ROW><ROW><id>938457</id><snippet>def callback(msg):
    print msg

def callback_factory(m):
    return lambda: callback(m)

funcList=[]
for m in ('do', 're', 'mi'):
    funcList.append(callback_factory(m))
for f in funcList:
    f()
</snippet></ROW><ROW><id>938457</id><snippet>m</snippet></ROW><ROW><id>938457</id><snippet>callback_factory</snippet></ROW><ROW><id>938457</id><snippet>callback_factory</snippet></ROW><ROW><id>938457</id><snippet>from functools import partial

def callback(msg):
    print msg

funcList=[partial(callback, m) for m in ('do', 're', 'mi')]
for f in funcList:
    f()
</snippet></ROW><ROW><id>938800</id><snippet>
def memory():
    import os
    from wmi import WMI
    w = WMI('.')
    result = w.query("SELECT WorkingSet FROM Win32_PerfRawData_PerfProc_Process WHERE IDProcess=%d" % os.getpid())
    return int(result[0]['WorkingSet'])
</snippet></ROW><ROW><id>938800</id><snippet>import os
_proc_status = '/proc/%d/status' % os.getpid()

_scale = {'kB': 1024.0, 'mB': 1024.0*1024.0,
          'KB': 1024.0, 'MB': 1024.0*1024.0}

def _VmB(VmKey):
    '''Private.
    '''
    global _proc_status, _scale
     # get pseudo file  /proc/&lt;pid&gt;/status
    try:
        t = open(_proc_status)
        v = t.read()
        t.close()
    except:
        return 0.0  # non-Linux?
     # get VmKey line e.g. 'VmRSS:  9999  kB\n ...'
    i = v.index(VmKey)
    v = v[i:].split(None, 3)  # whitespace
    if len(v) &lt; 3:
        return 0.0  # invalid format?
     # convert Vm value to bytes
    return float(v[1]) * _scale[v[2]]


def memory(since=0.0):
    '''Return memory usage in bytes.
    '''
    return _VmB('VmSize:') - since


def resident(since=0.0):
    '''Return resident memory usage in bytes.
    '''
    return _VmB('VmRSS:') - since


def stacksize(since=0.0):
    '''Return stack size in bytes.
    '''
    return _VmB('VmStk:') - since
</snippet></ROW><ROW><id>939125</id><snippet>data = irc.recv ( 4096 )
try: data = str(data,"UTF-8")
except UnicodeDecodeError: data = str(data,"CP1252")
</snippet></ROW><ROW><id>939195</id><snippet>import gtk

square_sz = 20
pixmap = None
colour = "#FF0000"
gc = None

def configure_event( widget, event):
    global pixmap
    x, y, width, height = widget.get_allocation()
    pixmap = gtk.gdk.Pixmap(widget.window, width, height)
    white_gc = widget.get_style().white_gc
    pixmap.draw_rectangle(white_gc, True, 0, 0, width, height)
    return True

def expose_event(widget, event):
    global pixmap
    if pixmap:
    	x , y, w, h = event.area
    	drawable_gc = widget.get_style().fg_gc[gtk.STATE_NORMAL]
    	widget.window.draw_drawable(drawable_gc, pixmap, x, y, x, y, w, h)
    return False

def button_press_event(widget, event):
    global pixmap, square_sz, gc, colour
    if event.button == 1 and pixmap:
    	x = int(event.x / square_sz) * square_sz
    	y = int(event.y / square_sz) * square_sz
    	if not gc:
    		gc = widget.window.new_gc()
    		gc.set_rgb_fg_color(gtk.gdk.color_parse(colour))
    	pixmap.draw_rectangle(gc, True, x, y, square_sz, square_sz)
    	widget.queue_draw_area(x, y, square_sz, square_sz)

    return True

if __name__ == "__main__":
    da = gtk.DrawingArea()
    da.set_size_request(square_sz*20, square_sz*20)

    da.connect("expose_event", expose_event)
    da.connect("configure_event", configure_event)
    da.connect("button_press_event", button_press_event)

    da.set_events(gtk.gdk.EXPOSURE_MASK | gtk.gdk.BUTTON_PRESS_MASK)

    w = gtk.Window()
    w.add(da)
    w.show_all()
    w.connect("destroy", lambda w: gtk.main_quit())

    gtk.main()
</snippet></ROW><ROW><id>939249</id><snippet>' '.join(str(i) for i in your_list)
</snippet></ROW><ROW><id>939447</id><snippet>&lt;shameless plug&gt;</snippet></ROW><ROW><id>939447</id><snippet>&lt;/shameless plug&gt;</snippet></ROW><ROW><id>939887</id><snippet>print</snippet></ROW><ROW><id>939927</id><snippet>gateway = new NetConnection();
gateway.addEventListener(NetStatusEvent.NET_STATUS, gateway_status);
gateway.connect("http://127.0.0.1:8000/robs_amf/default/call/amfrpc/");
resp = new Responder(show_results, on_fault);
gateway.call("getContacts", resp);
</snippet></ROW><ROW><id>940101</id><snippet>for key,value in request.GET.items():
    setattr(foo, key, value)
</snippet></ROW><ROW><id>940457</id><snippet>&gt;&gt;&gt; listDict = [{'id':1,'other':2},{'id':3,'other':4},{'id':5,'other':6}]
&gt;&gt;&gt; [item["id"] for item in listDict]
[1, 3, 5]
</snippet></ROW><ROW><id>940655</id><snippet>lambda</snippet></ROW><ROW><id>940655</id><snippet>self.connect(button3, SIGNAL("clicked()"),
    lambda who="Three": self.anyButton(who))
</snippet></ROW><ROW><id>940655</id><snippet>functools.partial</snippet></ROW><ROW><id>940655</id><snippet>lambda</snippet></ROW><ROW><id>940741</id><snippet>type(result)</snippet></ROW><ROW><id>940782</id><snippet>AAF(10, [4, 5.5, 10], [1, 1, 2], 3);
</snippet></ROW><ROW><id>940782</id><snippet>void f(list o) {
    std::size_t n = len(o);
    double* tmp = new double[n];
    for (int i = 0; i &lt; n; i++) {
    	tmp[i] = extract&lt;double&gt;(o[i]);
    }
    std::cout &lt;&lt; std::endl;
    // use tmp
    delete tmp;
}
</snippet></ROW><ROW><id>940827</id><snippet>yield</snippet></ROW><ROW><id>940827</id><snippet>def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/plain')]
    yield 'Chunk 1\n'    
    yield 'Chunk 2\n'    
    yield 'Chunk 3\n'
    for chunk in chunk_data_generator():
        yield chunk

def chunk_data_generator()
    yield 'Chunk 4\n'
    yield 'Chunk 5\n'
</snippet></ROW><ROW><id>940827</id><snippet>BUFFER_SIZE = 10 # 10 bytes for testing. Use something bigger
def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/plain')]
    buffer = []
    size = 0
    for chunk in chunk_generator():
        buffer.append(chunk)
        size += len(chunk)
        if size &gt; BUFFER_SIZE:
            for buf in buffer:
                yield buf
            buffer = []
            size = 0

def chunk_data_generator()
    yield 'Chunk 1\n'    
    yield 'Chunk 2\n'    
    yield 'Chunk 3\n'
    yield 'Chunk 4\n'
    yield 'Chunk 5\n'
</snippet></ROW><ROW><id>940834</id><snippet>for</snippet></ROW><ROW><id>940840</id><snippet>re.compile('$^')
</snippet></ROW><ROW><id>940840</id><snippet>re.compile('a^')
</snippet></ROW><ROW><id>941297</id><snippet>[a-zA-Z0-9]+
</snippet></ROW><ROW><id>941297</id><snippet>[\w\d]+
</snippet></ROW><ROW><id>941367</id><snippet>combined_list = zip(somelist, otherlist)
...
{% for item in combined_list %}
    {{ item.0 }} {{ item.1 }}
{% endfor %}
</snippet></ROW><ROW><id>941424</id><snippet>wget --mirror --convert-links -w 1 http://www.example.com
</snippet></ROW><ROW><id>941652</id><snippet>os.listdir()</snippet></ROW><ROW><id>941652</id><snippet>os.listdir</snippet></ROW><ROW><id>942551</id><snippet>product()</snippet></ROW><ROW><id>942551</id><snippet>itertools</snippet></ROW><ROW><id>942551</id><snippet>import itertools

my_list = [1,2,3,4]
for pair in itertools.product(my_list, repeat=2):
    foo(*pair)
</snippet></ROW><ROW><id>942551</id><snippet>my_list = [1,2,3,4]
for x in my_list:
    for y in my_list:
        foo(x, y)
</snippet></ROW><ROW><id>942551</id><snippet>permutations()</snippet></ROW><ROW><id>942551</id><snippet>combinations()</snippet></ROW><ROW><id>942551</id><snippet>product()</snippet></ROW><ROW><id>942551</id><snippet>1,1  1,2  1,3  1,4
2,1  2,2  2,3  2,4
3,1  3,2  3,3  3,4
4,1  4,2  4,3  4,4
</snippet></ROW><ROW><id>942551</id><snippet>permutations()</snippet></ROW><ROW><id>942551</id><snippet>x,x</snippet></ROW><ROW><id>942551</id><snippet> .   1,2  1,3  1,4
2,1   .   2,3  2,4
3,1  3,2   .   3,4
4,1  4,2  4,3   .
</snippet></ROW><ROW><id>942551</id><snippet>combinations()</snippet></ROW><ROW><id>942551</id><snippet> .   1,2  1,3  1,4
 .    .   2,3  2,4
 .    .    .   3,4
 .    .    .    .
</snippet></ROW><ROW><id>942628</id><snippet>int
phase_of_the_moon()     /* 0-7, with 0: new, 4: full */
{
    register struct tm *lt = getlt();
    return testable_potm(lt);
}

static int
testable_potm(const struct tm *lt)
{
    register int epact, diy, goldn;

    diy = lt-&gt;tm_yday;
    goldn = (lt-&gt;tm_year % 19) + 1;
    epact = (11 * goldn + 18) % 30;
    if ((epact == 25 &amp;&amp; goldn &gt; 11) || epact == 24)
        epact++;

    return( (((((diy + epact) * 6) + 11) % 177) / 22) &amp; 7 );
}
</snippet></ROW><ROW><id>942628</id><snippet>getlt()</snippet></ROW><ROW><id>942628</id><snippet>time_t</snippet></ROW><ROW><id>942628</id><snippet>localtime()</snippet></ROW><ROW><id>942839</id><snippet>wx.CursorFromImage</snippet></ROW><ROW><id>942839</id><snippet>wx.BeginBusyCursor</snippet></ROW><ROW><id>942839</id><snippet>wx.EndBusyCursor</snippet></ROW><ROW><id>942924</id><snippet>timeit</snippet></ROW><ROW><id>942924</id><snippet>print</snippet></ROW><ROW><id>942924</id><snippet>$ python -mtimeit 'tmp=[]; tmp.append(True); x=tmp[0]'
1000000 loops, best of 3: 0.716 usec per loop
$ python -mtimeit 'tmp={}; tmp[0]=True; x=tmp[0]'
1000000 loops, best of 3: 0.515 usec per loop
</snippet></ROW><ROW><id>943084</id><snippet>&gt;&gt;&gt; client = gdata.youtube.service.YouTubeService()
&gt;&gt;&gt; video = client.GetYouTubeVideoEntry(video_id='CoYBkXD0QeU')
&gt;&gt;&gt; video.author[0].name.text
'GoogleDevelopers'
</snippet></ROW><ROW><id>943265</id><snippet>apt-get</snippet></ROW><ROW><id>943265</id><snippet>.tar.gz</snippet></ROW><ROW><id>943265</id><snippet>apt-get</snippet></ROW><ROW><id>943265</id><snippet>.tar.gz</snippet></ROW><ROW><id>943265</id><snippet>.tar.bz2</snippet></ROW><ROW><id>944009</id><snippet>def build_active_solution(progid="VisualStudio.DTE.7.1"):
    from win32com.client import GetActiveObject
    dte = GetActiveObject(progid)
    sb = dte.Solution.SolutionBuild
    sb.Build(True)

    output = dte.Windows['Output'].Object.ActivePane.TextDocument.Selection
    output.SelectAll()
    return output.Text
</snippet></ROW><ROW><id>944359</id><snippet>import atexit
atexit.register(myfunction)
</snippet></ROW><ROW><id>944359</id><snippet>def close_database():
    proceed_to_close()

import atexit
atexit.register(close_database)
</snippet></ROW><ROW><id>944359</id><snippet>database.py</snippet></ROW><ROW><id>944359</id><snippet>class DataBase(object):
    @staticmethod
    def execute_some_query(query):
        code_here()
        some_code()
    @staticmethod
    def close_database():
        proceed_to_close()
import atexit ; atexit.register(DataBase.close_database)
</snippet></ROW><ROW><id>944359</id><snippet>from database import DataBase
DataBase.execute_some_query(query)
</snippet></ROW><ROW><id>944359</id><snippet>database.py</snippet></ROW><ROW><id>944359</id><snippet>def execute_some_query(query):
    code_here()
    some_code()

def close_database():
    proceed_to_close()
import atexit ; atexit.register(close_database)
</snippet></ROW><ROW><id>944359</id><snippet>import database
database.execute_some_query(query)
</snippet></ROW><ROW><id>944508</id><snippet>import os
os.system('ls -lt')
</snippet></ROW><ROW><id>944561</id><snippet>os.makedirs</snippet></ROW><ROW><id>944561</id><snippet>os.makedirs</snippet></ROW><ROW><id>944660</id><snippet>class ZeroException(Exception):
    pass

class variable(object):
    def __init__(self, value=0):
        self.__x = value

    def __set__(self, obj, value):
        if value &lt; 0:
            raise ZeroException('x is less than zero')

        self.__x  = value

    def __get__(self, obj, objType):
        return self.__x

class MyClass(object):
    x = variable()

&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.x = 10
&gt;&gt;&gt; m.x -= 20
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "my.py", line 7, in __set__
    raise ZeroException('x is less than zero')
ZeroException: x is less than zero
</snippet></ROW><ROW><id>944733</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; x=float('nan')
&gt;&gt;&gt; math.isnan(x)
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>945160</id><snippet>{% url django.contrib.auth.views.password_reset_confirm uidb36=uid, token=token %}
</snippet></ROW><ROW><id>945160</id><snippet>http://mysite.com/accounts/reset/{{uid}}-{{token}}/
</snippet></ROW><ROW><id>945313</id><snippet>None</snippet></ROW><ROW><id>945313</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>945313</id><snippet>None</snippet></ROW><ROW><id>945313</id><snippet>In [1]: import numpy

In [2]: numpy.newaxis is None
Out[2]: True
</snippet></ROW><ROW><id>945313</id><snippet>None</snippet></ROW><ROW><id>945313</id><snippet>newaxis</snippet></ROW><ROW><id>945313</id><snippet>None</snippet></ROW><ROW><id>945313</id><snippet>numpy</snippet></ROW><ROW><id>945313</id><snippet>None</snippet></ROW><ROW><id>945313</id><snippet>None</snippet></ROW><ROW><id>945377</id><snippet>gobject.idle_add</snippet></ROW><ROW><id>945829</id><snippet>convert</snippet></ROW><ROW><id>945829</id><snippet>convert -quality 100 *.png outvideo.mpeg
</snippet></ROW><ROW><id>945829</id><snippet>convert -set delay 3 -loop 0 -scale 50% *.png animation.gif
</snippet></ROW><ROW><id>945829</id><snippet>convert</snippet></ROW><ROW><id>945994</id><snippet>&gt;&gt;&gt; "%d " * 3
'%d %d %d '
&gt;&gt;&gt; "%d " * 3 % (1,2,3)
'1 2 3 '
</snippet></ROW><ROW><id>946380</id><snippet>function quoteUrl(url, safe) {
    if (typeof(safe) !== 'string') {
        safe = '/';    // Don't escape slashes by default
    }

    url = encodeURIComponent(url);

    // Unescape characters that were in the safe list
    toUnencode = [  ];
    for (var i = safe.length - 1; i &gt;= 0; --i) {
        var encoded = encodeURIComponent(safe[i]);
        if (encoded !== safe.charAt(i)) {    // Ignore safe char if it wasn't escaped
            toUnencode.push(encoded);
        }
    }

    url = url.replace(new RegExp(toUnencode.join('|'), 'ig'), decodeURIComponent);

    return url;
}


var unquoteUrl = decodeURIComponent;    // Make alias to have symmetric function names
</snippet></ROW><ROW><id>946380</id><snippet>'/'</snippet></ROW><ROW><id>946380</id><snippet>encodeURIComponent()</snippet></ROW><ROW><id>946380</id><snippet>decodeURIComponent()</snippet></ROW><ROW><id>946380</id><snippet>encodeURIComponent()</snippet></ROW><ROW><id>946380</id><snippet>quote_url()</snippet></ROW><ROW><id>946380</id><snippet>def quote_url(url, safe):
    """URL-encodes a string (either str (i.e. ASCII) or unicode);
    uses de-facto UTF-8 encoding to handle Unicode codepoints in given string.
    """
    return urllib.quote(unicode(url).encode('utf-8'), safe)
</snippet></ROW><ROW><id>946380</id><snippet>unquote_url()</snippet></ROW><ROW><id>946380</id><snippet>def unquote_url(url):
    """Decodes a URL that was encoded using quote_url.
    Returns a unicode instance.
    """
    return urllib.unquote(url).decode('utf-8')
</snippet></ROW><ROW><id>946906</id><snippet>&gt;&gt;&gt; tuple_list = [("pineapple", 5), ("cherry", 7), ("kumquat", 3), ("plum", 11)]
&gt;&gt;&gt; [x for x, y in enumerate(tuple_list) if y[1] == 7]
[1]
&gt;&gt;&gt; [x for x, y in enumerate(tuple_list) if y[0] == 'kumquat']
[2]
</snippet></ROW><ROW><id>946906</id><snippet>&gt;&gt;&gt; [y[0] for y in tuple_list].index('kumquat')
2
</snippet></ROW><ROW><id>946962</id><snippet>import subprocess
ret = subprocess.call(["ssh", "user@host", "program"]);

# or, with stderr:
prog = subprocess.Popen(["ssh", "user@host", "program"], stderr=subprocess.PIPE)
errdata = prog.communicate()[1]
</snippet></ROW><ROW><id>947239</id><snippet>ctypes</snippet></ROW><ROW><id>947239</id><snippet>stat64</snippet></ROW><ROW><id>947239</id><snippet>from ctypes import *

class struct_timespec(Structure):
    _fields_ = [('tv_sec', c_long), ('tv_nsec', c_long)]

class struct_stat64(Structure):
    _fields_ = [
        ('st_dev', c_int32),
        ('st_mode', c_uint16),
        ('st_nlink', c_uint16),
        ('st_ino', c_uint64),
        ('st_uid', c_uint32),
        ('st_gid', c_uint32), 
        ('st_rdev', c_int32),
        ('st_atimespec', struct_timespec),
        ('st_mtimespec', struct_timespec),
        ('st_ctimespec', struct_timespec),
        ('st_birthtimespec', struct_timespec),
        ('dont_care', c_uint64 * 8)
    ]

libc = CDLL('libc.dylib')
stat64 = libc.stat64
stat64.argtypes = [c_char_p, POINTER(struct_stat64)]

def get_creation_time(path):
    buf = struct_stat64()
    rv = stat64(path, pointer(buf))
    if rv != 0:
        raise OSError("Couldn't stat file %r" % path)
    return buf.st_birthtimespec.tv_sec
</snippet></ROW><ROW><id>947239</id><snippet>subprocess</snippet></ROW><ROW><id>947239</id><snippet>stat</snippet></ROW><ROW><id>947239</id><snippet>import subprocess

def get_creation_time(path):
    p = subprocess.Popen(['stat', '-f%B', path],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if p.wait():
        raise OSError(p.stderr.read().rstrip())
    else:
        return int(p.stdout.read())
</snippet></ROW><ROW><id>947239</id><snippet>datetime.datetime.fromtimestamp()</snippet></ROW><ROW><id>947443</id><snippet>self.send_header('Content-type', 'text/html')
</snippet></ROW><ROW><id>947443</id><snippet>import os
import mimetypes

#...

    def do_GET(self):
        try:

            filepath = self.path
            print filepath, USTAW['rootwww']

            f = open(os.path.join('.', 'www', filepath))

        except IOError:
            self.send_error(404,'File Not Found: %s ' % filepath)

        else:
            self.send_response(200)
            mimetype, _ = mimetypes.guess_type(filepath)
            self.send_header('Content-type', mimetype)
            self.end_headers()
            for s in f:
                self.wfile.write(s)
</snippet></ROW><ROW><id>947789</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; non_decimal = re.compile(r'[^\d.]+')
&gt;&gt;&gt; non_decimal.sub('', '12.34fe4e')
'12.344'
</snippet></ROW><ROW><id>948239</id><snippet>/slug-is-here
</snippet></ROW><ROW><id>948239</id><snippet>/app-pathslug-is-here
</snippet></ROW><ROW><id>950362</id><snippet>class A(int):
    def sqr(self):
        return A(self*self)

sqr = A.sqr
a = A(5)
print sqr(a) # Prints 25
</snippet></ROW><ROW><id>950362</id><snippet>bin_pow(a, n, sqr=A.sqr)
</snippet></ROW><ROW><id>950362</id><snippet>bin_pow(a, n, sqr=lambda x: x.sqr())
</snippet></ROW><ROW><id>950591</id><snippet>good = [x for x in mylist if x in goodvals]
bad  = [x for x in mylist if x not in goodvals]
</snippet></ROW><ROW><id>950591</id><snippet># files looks like: [ ('file1.jpg', 33L, '.jpg'), ('file2.avi', 999L, '.avi'), ... ]
IMAGE_TYPES = ('.jpg','.jpeg','.gif','.bmp','.png')
images = [f for f in files if f[2].lower() in IMAGE_TYPES]
anims  = [f for f in files if f[2].lower() not in IMAGE_TYPES]
</snippet></ROW><ROW><id>950591</id><snippet>images, anims = [], []

for f in files:
    if f.lower() in IMAGE_TYPES:
        images.append(f)
    else:
        anims.append(f)
</snippet></ROW><ROW><id>950591</id><snippet>set()</snippet></ROW><ROW><id>950591</id><snippet>if f[1] == 0:
    continue
</snippet></ROW><ROW><id>950997</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>951640</id><snippet>Clazz</snippet></ROW><ROW><id>951640</id><snippet>list</snippet></ROW><ROW><id>951640</id><snippet>values</snippet></ROW><ROW><id>951640</id><snippet>col.in_(keys)</snippet></ROW><ROW><id>951640</id><snippet>or_(and_(conditions))</snippet></ROW><ROW><id>951640</id><snippet>for key in keys: do_stuff(q.get(key))</snippet></ROW><ROW><id>952137</id><snippet>sub r{($a=shift)=~/0/g?my$i=pos:die$a;T:for$m(1..9){($i-$_)%9*(int($i/9)^int($_/9))*(int($i/27)^int($_/27)|int($i%9/3)^int($_%9/3))||$a=~/^.{$_}$m/&amp;&amp;next T,for 0..80;substr($a,$i,1)=$m;r($a)}}r@ARGV
</snippet></ROW><ROW><id>952137</id><snippet>/</snippet></ROW><ROW><id>952388</id><snippet>def sort_deps(objs):
    queue = [objs with no dependencies]
    while queue:
        obj = queue.pop()
        yield obj
        for obj in objs:
            if dependencies are now satisfied:
                queue.append(obj)
    if not all dependencies are satisfied:
        error
    return result
</snippet></ROW><ROW><id>952424</id><snippet>'running in autocommit mode'</snippet></ROW><ROW><id>952785</id><snippet>tokens = (
    'NAME','NUMBER',
    )

literals = ['=','+','-','*','/', '(',')']

# Tokens

t_NAME    = r'[a-zA-Z_][a-zA-Z0-9_]*'

def t_NUMBER(t):
    r'\d+'
    t.value = int(t.value)
    return t

t_ignore = " \t"

def t_newline(t):
    r'\n+'
    t.lexer.lineno += t.value.count("\n")

def t_error(t):
    print("Illegal character '%s'" % t.value[0])
    t.lexer.skip(1)

# Build the lexer
import ply.lex as lex
lex.lex(debug=1)

# Parsing rules

precedence = (
    ('left','+','-'),
    ('left','*','/'),
    ('right','UMINUS'),
    )

# dictionary of names
names = { }

def p_statement_assign(p):
    'statement : NAME "=" expression'
    names[p[1]] = p[3]

def p_statement_expr(p):
    'statement : expression'
    print(p[1])

def p_expression_binop(p):
    '''expression : expression '+' expression
                  | expression '-' expression
                  | expression '*' expression
                  | expression '/' expression'''
    if p[2] == '+'  : p[0] = p[1] + p[3]
    elif p[2] == '-': p[0] = p[1] - p[3]
    elif p[2] == '*': p[0] = p[1] * p[3]
    elif p[2] == '/': p[0] = p[1] / p[3]

def p_expression_uminus(p):
    "expression : '-' expression %prec UMINUS"
    p[0] = -p[2]

def p_expression_group(p):
    "expression : '(' expression ')'"
    p[0] = p[2]

def p_expression_number(p):
    "expression : NUMBER"
    p[0] = p[1]

def p_expression_name(p):
    "expression : NAME"
    try:
        p[0] = names[p[1]]
    except LookupError:
        print("Undefined name '%s'" % p[1])
        p[0] = 0

def p_error(p):
    if p:
        print("Syntax error at '%s'" % p.value)
    else:
        print("Syntax error at EOF")

import ply.yacc as yacc
yacc.yacc()

import logging
logging.basicConfig(
    level=logging.INFO,
    filename="parselog.txt"
)

while 1:
    try:
        s = raw_input('calc &gt; ')
    except EOFError:
        break
    if not s: continue
    yacc.parse(s, debug=1)
</snippet></ROW><ROW><id>952785</id><snippet>lex: tokens   = ('NAME', 'NUMBER')
lex: literals = ['=', '+', '-', '*', '/', '(', ')']
lex: states   = {'INITIAL': 'inclusive'}
lex: Adding rule t_NUMBER -&gt; '\d+' (state 'INITIAL')
lex: Adding rule t_newline -&gt; '\n+' (state 'INITIAL')
lex: Adding rule t_NAME -&gt; '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
lex: ==== MASTER REGEXS FOLLOW ====
lex: state 'INITIAL' : regex[0] = '(?P&lt;t_NUMBER&gt;\d+)|(?P&lt;t_newline&gt;\n+)|(?P&lt;t_NAME&gt;[a-zA-Z
_][a-zA-Z0-9_]*)'
calc &gt; 2+3
PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(NUMBER,2,1,0)
Action : Shift and goto state 3

State  : 3
Stack  : NUMBER . LexToken(+,'+',1,1)
Action : Reduce rule [expression -&gt; NUMBER] with [2] and goto state 9
Result : &lt;int @ 0x1a1896c&gt; (2)

State  : 6
Stack  : expression . LexToken(+,'+',1,1)
Action : Shift and goto state 12

State  : 12
Stack  : expression + . LexToken(NUMBER,3,1,2)
Action : Shift and goto state 3

State  : 3
Stack  : expression + NUMBER . $end
Action : Reduce rule [expression -&gt; NUMBER] with [3] and goto state 9
Result : &lt;int @ 0x1a18960&gt; (3)

State  : 18
Stack  : expression + expression . $end
Action : Reduce rule [expression -&gt; expression + expression] with [2,'+',3] and goto state
 3
Result : &lt;int @ 0x1a18948&gt; (5)

State  : 6
Stack  : expression . $end
Action : Reduce rule [statement -&gt; expression] with [5] and goto state 2
5
Result : &lt;NoneType @ 0x1e1ccef4&gt; (None)

State  : 4
Stack  : statement . $end
Done   : Returning &lt;NoneType @ 0x1e1ccef4&gt; (None)
PLY: PARSE DEBUG END
calc &gt;
</snippet></ROW><ROW><id>952785</id><snippet>Created by PLY version 3.2 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -&gt; statement
Rule 1     statement -&gt; NAME = expression
Rule 2     statement -&gt; expression
Rule 3     expression -&gt; expression + expression
Rule 4     expression -&gt; expression - expression
Rule 5     expression -&gt; expression * expression
Rule 6     expression -&gt; expression / expression
Rule 7     expression -&gt; - expression
Rule 8     expression -&gt; ( expression )
Rule 9     expression -&gt; NUMBER
Rule 10    expression -&gt; NAME

Terminals, with rules where they appear

(                    : 8
)                    : 8
*                    : 5
+                    : 3
-                    : 4 7
/                    : 6
=                    : 1
NAME                 : 1 10
NUMBER               : 9
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7 8
statement            : 0

Parsing method: LALR

state 0

    (0) S' -&gt; . statement
    (1) statement -&gt; . NAME = expression
    (2) statement -&gt; . expression
    (3) expression -&gt; . expression + expression
    (4) expression -&gt; . expression - expression
    (5) expression -&gt; . expression * expression
    (6) expression -&gt; . expression / expression
    (7) expression -&gt; . - expression
    (8) expression -&gt; . ( expression )
    (9) expression -&gt; . NUMBER
    (10) expression -&gt; . NAME

    NAME            shift and go to state 1
    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3

    expression                     shift and go to state 6
    statement                      shift and go to state 4

state 1

    (1) statement -&gt; NAME . = expression
    (10) expression -&gt; NAME .

    =               shift and go to state 7
    +               reduce using rule 10 (expression -&gt; NAME .)
    -               reduce using rule 10 (expression -&gt; NAME .)
    *               reduce using rule 10 (expression -&gt; NAME .)
    /               reduce using rule 10 (expression -&gt; NAME .)
    $end            reduce using rule 10 (expression -&gt; NAME .)


state 2

    (7) expression -&gt; - . expression
    (3) expression -&gt; . expression + expression
    (4) expression -&gt; . expression - expression
    (5) expression -&gt; . expression * expression
    (6) expression -&gt; . expression / expression
    (7) expression -&gt; . - expression
    (8) expression -&gt; . ( expression )
    (9) expression -&gt; . NUMBER
    (10) expression -&gt; . NAME

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 9

state 3

    (9) expression -&gt; NUMBER .

    +               reduce using rule 9 (expression -&gt; NUMBER .)
    -               reduce using rule 9 (expression -&gt; NUMBER .)
    *               reduce using rule 9 (expression -&gt; NUMBER .)
    /               reduce using rule 9 (expression -&gt; NUMBER .)
    $end            reduce using rule 9 (expression -&gt; NUMBER .)
    )               reduce using rule 9 (expression -&gt; NUMBER .)


state 4

    (0) S' -&gt; statement .



state 5

    (8) expression -&gt; ( . expression )
    (3) expression -&gt; . expression + expression
    (4) expression -&gt; . expression - expression
    (5) expression -&gt; . expression * expression
    (6) expression -&gt; . expression / expression
    (7) expression -&gt; . - expression
    (8) expression -&gt; . ( expression )
    (9) expression -&gt; . NUMBER
    (10) expression -&gt; . NAME

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 10

state 6

    (2) statement -&gt; expression .
    (3) expression -&gt; expression . + expression
    (4) expression -&gt; expression . - expression
    (5) expression -&gt; expression . * expression
    (6) expression -&gt; expression . / expression

    $end            reduce using rule 2 (statement -&gt; expression .)
    +               shift and go to state 12
    -               shift and go to state 11
    *               shift and go to state 13
    /               shift and go to state 14


state 7

    (1) statement -&gt; NAME = . expression
    (3) expression -&gt; . expression + expression
    (4) expression -&gt; . expression - expression
    (5) expression -&gt; . expression * expression
    (6) expression -&gt; . expression / expression
    (7) expression -&gt; . - expression
    (8) expression -&gt; . ( expression )
    (9) expression -&gt; . NUMBER
    (10) expression -&gt; . NAME

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 15

state 8

    (10) expression -&gt; NAME .

    +               reduce using rule 10 (expression -&gt; NAME .)
    -               reduce using rule 10 (expression -&gt; NAME .)
    *               reduce using rule 10 (expression -&gt; NAME .)
    /               reduce using rule 10 (expression -&gt; NAME .)
    $end            reduce using rule 10 (expression -&gt; NAME .)
    )               reduce using rule 10 (expression -&gt; NAME .)


state 9

    (7) expression -&gt; - expression .
    (3) expression -&gt; expression . + expression
    (4) expression -&gt; expression . - expression
    (5) expression -&gt; expression . * expression
    (6) expression -&gt; expression . / expression

    +               reduce using rule 7 (expression -&gt; - expression .)
    -               reduce using rule 7 (expression -&gt; - expression .)
    *               reduce using rule 7 (expression -&gt; - expression .)
    /               reduce using rule 7 (expression -&gt; - expression .)
    $end            reduce using rule 7 (expression -&gt; - expression .)
    )               reduce using rule 7 (expression -&gt; - expression .)

  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 11 ]
  ! *               [ shift and go to state 13 ]
  ! /               [ shift and go to state 14 ]


state 10

    (8) expression -&gt; ( expression . )
    (3) expression -&gt; expression . + expression
    (4) expression -&gt; expression . - expression
    (5) expression -&gt; expression . * expression
    (6) expression -&gt; expression . / expression

    )               shift and go to state 16
    +               shift and go to state 12
    -               shift and go to state 11
    *               shift and go to state 13
    /               shift and go to state 14


state 11

    (4) expression -&gt; expression - . expression
    (3) expression -&gt; . expression + expression
    (4) expression -&gt; . expression - expression
    (5) expression -&gt; . expression * expression
    (6) expression -&gt; . expression / expression
    (7) expression -&gt; . - expression
    (8) expression -&gt; . ( expression )
    (9) expression -&gt; . NUMBER
    (10) expression -&gt; . NAME

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 17

state 12

    (3) expression -&gt; expression + . expression
    (3) expression -&gt; . expression + expression
    (4) expression -&gt; . expression - expression
    (5) expression -&gt; . expression * expression
    (6) expression -&gt; . expression / expression
    (7) expression -&gt; . - expression
    (8) expression -&gt; . ( expression )
    (9) expression -&gt; . NUMBER
    (10) expression -&gt; . NAME

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 18

state 13

    (5) expression -&gt; expression * . expression
    (3) expression -&gt; . expression + expression
    (4) expression -&gt; . expression - expression
    (5) expression -&gt; . expression * expression
    (6) expression -&gt; . expression / expression
    (7) expression -&gt; . - expression
    (8) expression -&gt; . ( expression )
    (9) expression -&gt; . NUMBER
    (10) expression -&gt; . NAME

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 19

state 14

    (6) expression -&gt; expression / . expression
    (3) expression -&gt; . expression + expression
    (4) expression -&gt; . expression - expression
    (5) expression -&gt; . expression * expression
    (6) expression -&gt; . expression / expression
    (7) expression -&gt; . - expression
    (8) expression -&gt; . ( expression )
    (9) expression -&gt; . NUMBER
    (10) expression -&gt; . NAME

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 20

state 15

    (1) statement -&gt; NAME = expression .
    (3) expression -&gt; expression . + expression
    (4) expression -&gt; expression . - expression
    (5) expression -&gt; expression . * expression
    (6) expression -&gt; expression . / expression

    $end            reduce using rule 1 (statement -&gt; NAME = expression .)
    +               shift and go to state 12
    -               shift and go to state 11
    *               shift and go to state 13
    /               shift and go to state 14


state 16

    (8) expression -&gt; ( expression ) .

    +               reduce using rule 8 (expression -&gt; ( expression ) .)
    -               reduce using rule 8 (expression -&gt; ( expression ) .)
    *               reduce using rule 8 (expression -&gt; ( expression ) .)
    /               reduce using rule 8 (expression -&gt; ( expression ) .)
    $end            reduce using rule 8 (expression -&gt; ( expression ) .)
    )               reduce using rule 8 (expression -&gt; ( expression ) .)


state 17

    (4) expression -&gt; expression - expression .
    (3) expression -&gt; expression . + expression
    (4) expression -&gt; expression . - expression
    (5) expression -&gt; expression . * expression
    (6) expression -&gt; expression . / expression

    +               reduce using rule 4 (expression -&gt; expression - expression .)
    -               reduce using rule 4 (expression -&gt; expression - expression .)
    $end            reduce using rule 4 (expression -&gt; expression - expression .)
    )               reduce using rule 4 (expression -&gt; expression - expression .)
    *               shift and go to state 13
    /               shift and go to state 14

  ! *               [ reduce using rule 4 (expression -&gt; expression - expression .) ]
  ! /               [ reduce using rule 4 (expression -&gt; expression - expression .) ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 11 ]


state 18

    (3) expression -&gt; expression + expression .
    (3) expression -&gt; expression . + expression
    (4) expression -&gt; expression . - expression
    (5) expression -&gt; expression . * expression
    (6) expression -&gt; expression . / expression

    +               reduce using rule 3 (expression -&gt; expression + expression .)
    -               reduce using rule 3 (expression -&gt; expression + expression .)
    $end            reduce using rule 3 (expression -&gt; expression + expression .)
    )               reduce using rule 3 (expression -&gt; expression + expression .)
    *               shift and go to state 13
    /               shift and go to state 14

  ! *               [ reduce using rule 3 (expression -&gt; expression + expression .) ]
  ! /               [ reduce using rule 3 (expression -&gt; expression + expression .) ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 11 ]


state 19

    (5) expression -&gt; expression * expression .
    (3) expression -&gt; expression . + expression
    (4) expression -&gt; expression . - expression
    (5) expression -&gt; expression . * expression
    (6) expression -&gt; expression . / expression

    +               reduce using rule 5 (expression -&gt; expression * expression .)
    -               reduce using rule 5 (expression -&gt; expression * expression .)
    *               reduce using rule 5 (expression -&gt; expression * expression .)
    /               reduce using rule 5 (expression -&gt; expression * expression .)
    $end            reduce using rule 5 (expression -&gt; expression * expression .)
    )               reduce using rule 5 (expression -&gt; expression * expression .)

  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 11 ]
  ! *               [ shift and go to state 13 ]
  ! /               [ shift and go to state 14 ]


state 20

    (6) expression -&gt; expression / expression .
    (3) expression -&gt; expression . + expression
    (4) expression -&gt; expression . - expression
    (5) expression -&gt; expression . * expression
    (6) expression -&gt; expression . / expression

    +               reduce using rule 6 (expression -&gt; expression / expression .)
    -               reduce using rule 6 (expression -&gt; expression / expression .)
    *               reduce using rule 6 (expression -&gt; expression / expression .)
    /               reduce using rule 6 (expression -&gt; expression / expression .)
    $end            reduce using rule 6 (expression -&gt; expression / expression .)
    )               reduce using rule 6 (expression -&gt; expression / expression .)

  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 11 ]
  ! *               [ shift and go to state 13 ]
  ! /               [ shift and go to state 14 ]
</snippet></ROW><ROW><id>952952</id><snippet>[item for sublist in l for item in sublist]</snippet></ROW><ROW><id>952952</id><snippet>timeit</snippet></ROW><ROW><id>952952</id><snippet>$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'
10000 loops, best of 3: 143 usec per loop
$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'
1000 loops, best of 3: 969 usec per loop
$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'
1000 loops, best of 3: 1.1 msec per loop
</snippet></ROW><ROW><id>952952</id><snippet>+</snippet></ROW><ROW><id>952952</id><snippet>sum</snippet></ROW><ROW><id>952952</id><snippet>O(L**2)</snippet></ROW><ROW><id>952952</id><snippet>I * (L**2)/2</snippet></ROW><ROW><id>953052</id><snippet>.close()</snippet></ROW><ROW><id>953052</id><snippet>os.stat()</snippet></ROW><ROW><id>953052</id><snippet>import os

_MAX_SIZE = 691

def delete_if_blank(listFile):
    # Make a list of files to check.
    with open(listFile) as listFile:
        filesToCheck = filter(None, (line.rstrip() for line in listFile.readlines()))

    # listFile is automatically closed now because we're out of the 'with' statement.

    print "Found %u files to check. Starting check." % len(filesToCheck)

    # Remove each file.
    for filename in filesToCheck:
        if os.stat(filename).st_size &lt; _MAX_SIZE:
            print "Deleting %s" % filename
            os.remove(filename)
        else:
            print "Keeping %s" % filename
</snippet></ROW><ROW><id>953063</id><snippet>__builtin__</snippet></ROW><ROW><id>953063</id><snippet>def open():
    pass

import __builtin__

print open
print __builtin__.open
</snippet></ROW><ROW><id>953063</id><snippet>&lt;function open at 0x011E8670&gt;</snippet></ROW><ROW><id>953063</id><snippet>&lt;built-in function open&gt;</snippet></ROW><ROW><id>953510</id><snippet>import subprocess
proc = subprocess.Popen(['ssh', 'user@host', 'cat &gt; %s' % filename],
                        stdin=subprocess.PIPE)
proc.communicate(file_contents)
if proc.retcode != 0:
    ...
</snippet></ROW><ROW><id>953510</id><snippet>import subprocess
import tarfile
import io
tardata = io.BytesIO()
tar = tarfile.open(mode='w:gz', fileobj=tardata)
... put stuff in tar ...
proc = subprocess.Popen(['ssh', 'user@host', 'tar xz'],
                        stdin=subprocess.PIPE)
proc.communicate(tardata.getvalue())
if proc.retcode != 0:
    ...
</snippet></ROW><ROW><id>954147</id><snippet>self.frame = Frame()
</snippet></ROW><ROW><id>954147</id><snippet>self.frame = wx.Frame()
</snippet></ROW><ROW><id>954347</id><snippet>&gt;&gt; a.im_self
&lt;__main__.test object at 0x782d0&gt;
&gt;&gt; a.im_self.b = 2
&gt;&gt; obj.b
2
</snippet></ROW><ROW><id>954840</id><snippet>raw_input()</snippet></ROW><ROW><id>954840</id><snippet>input()</snippet></ROW><ROW><id>954859</id><snippet>for item in something:  # Default iterator: returns non-tuple objects
    do_something(item)

for (item,key) in something.iter_pairs(): # iter_pairs returns different iterator
    do_something_else(item, key)
</snippet></ROW><ROW><id>954859</id><snippet>for key in mydict</snippet></ROW><ROW><id>954859</id><snippet>for k,v in mydict.iteritems()</snippet></ROW><ROW><id>954859</id><snippet>import inspect, opcode

def num_expected_results():
    """Return the number of items the caller is expecting in a tuple.

    Returns None if a single value is expected, rather than a tuple.
    """
    f = inspect.currentframe(2)
    code = map(ord, f.f_code.co_code)
    pos = f.f_lasti
    if code[pos] == opcode.opmap['GET_ITER']: pos += 1 # Skip this and the FOR_ITER
    if code[pos] &gt; opcode.EXTENDED_ARG: pos +=5
    elif code[pos] &gt; opcode.HAVE_ARGUMENT: pos +=3
    else: pos += 1
    if code[pos] == opcode.opmap['UNPACK_SEQUENCE']:
        return code[pos+1] + (code[pos+2] &lt;&lt; 8)
    return None
</snippet></ROW><ROW><id>954859</id><snippet>class MagicDict(dict):
    def __iter__(self):
        if num_expected_results() == 2:
            for k,v in self.iteritems():
                yield k,v
        else:
            for k in self.iterkeys(): 
                yield k

d=MagicDict(foo=1, bar=2)

print "Keys:"
for key in d:
    print "   ", key
print "Values"    
for k,v in d:
    print "   ",k,v
</snippet></ROW><ROW><id>954951</id><snippet>while(raw_input('Press "1" to exit.') != '1'):
    pass
</snippet></ROW><ROW><id>955001</id><snippet>regex = re.compile(r"""
         ^           # Must start in a newline first
         \[(.*?)\]   # Get what's enclosed in brackets 
         \n          # only capture bracket if a newline is next
         ([^\[]*)    # stop reading at opening bracket
    """, re.MULTILINE | re.VERBOSE)
</snippet></ROW><ROW><id>955001</id><snippet>import re

regex = re.compile(r"""
    (?:^|\n)\[             # tag's opening bracket  
        ([^\]\n]*)         # 1. text between brackets
    \]\n                   # tag's closing bracket
    (.*?)                  # 2. text between the tags
    (?=\n\[[^\]\n]*\]\n|$) # until tag or end of string but don't consume it
    """, re.DOTALL | re.VERBOSE)

haystack = """[tag1]
this is captured [not a tag[
but this is suppose to be captured too!
[another non-tag

[tag2]
help me
write a better RE[[[]
"""

print regex.findall(haystack)
</snippet></ROW><ROW><id>955001</id><snippet>tag_re = re.compile(r'^\[([^\]\n]*)\]$', re.MULTILINE)
tags = list(tag_re.finditer(haystack))

result = {}
for (mo1, mo2) in zip(tags[:-1], tags[1:]):
    result[mo1.group(1)] = haystack[mo1.end(1)+1:mo2.start(1)-1].strip()
result[mo2.group(1)] = haystack[mo2.end(1)+1:].strip()

print result
</snippet></ROW><ROW><id>955001</id><snippet>^</snippet></ROW><ROW><id>955001</id><snippet>[^squarebrackets]</snippet></ROW><ROW><id>955001</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>955539</id><snippet>inspect</snippet></ROW><ROW><id>955539</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getmembers(a)
[('__class__', &lt;class '__main__.A'&gt;),
 ('__delattr__', &lt;method-wrapper '__delattr__' of A object at 0xb77d48ac&gt;),
 ('__dict__', {}),
 ('__doc__', None),
 ('__getattribute__',
  &lt;method-wrapper '__getattribute__' of A object at 0xb77d48ac&gt;),
 ('__hash__', &lt;method-wrapper '__hash__' of A object at 0xb77d48ac&gt;),
 ('__init__', &lt;method-wrapper '__init__' of A object at 0xb77d48ac&gt;),
 ('__module__', '__main__'),
 ('__new__', &lt;built-in method __new__ of type object at 0x8146220&gt;),
 ('__reduce__', &lt;built-in method __reduce__ of A object at 0xb77d48ac&gt;),
 ('__reduce_ex__', &lt;built-in method __reduce_ex__ of A object at 0xb77d48ac&gt;),
 ('__repr__', &lt;method-wrapper '__repr__' of A object at 0xb77d48ac&gt;),
 ('__setattr__', &lt;method-wrapper '__setattr__' of A object at 0xb77d48ac&gt;),
 ('__str__', &lt;method-wrapper '__str__' of A object at 0xb77d48ac&gt;),
 ('__weakref__', None),
 ('methodA', &lt;bound method A.methodA of &lt;__main__.A object at 0xb77d48ac&gt;&gt;),
 ('methodB', &lt;bound method A.methodB of &lt;__main__.A object at 0xb77d48ac&gt;&gt;)]
&gt;&gt;&gt; inspect.getargspec(a.methodA)
(['self', 'intA'], None, None, (1,))
&gt;&gt;&gt; inspect.getargspec(getattr(a, 'methodA'))
(['self', 'intA'], None, None, (1,))
&gt;&gt;&gt; print inspect.getargspec.__doc__
Get the names and default values of a function's arguments.

    A tuple of four things is returned: (args, varargs, varkw, defaults).
    'args' is a list of the argument names (it may contain nested lists).
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'defaults' is an n-tuple of the default values of the last n arguments.
&gt;&gt;&gt; print inspect.getmembers.__doc__
Return all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate.
</snippet></ROW><ROW><id>955759</id><snippet>dot</snippet></ROW><ROW><id>955759</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>955759</id><snippet>/dot</snippet></ROW><ROW><id>956084</id><snippet>locale.setlocale(locale.LC_ALL, 'de_DE') # use German locale; name might vary with platform
</snippet></ROW><ROW><id>956084</id><snippet>locale.setlocale(locale.LC_ALL, 'deu_deu')
</snippet></ROW><ROW><id>956634</id><snippet>a = filter(23)
b = filter(45)
...
a.foo = 67
...
x = random.choice([a,b])
if hasattr(x, 'foo'): munge(x.foo)
</snippet></ROW><ROW><id>956634</id><snippet>foos = dict()
a = filter(23)
b = filter(45)
...
foos[a] = 67
...
x = random.choice([a,b])
if x in foos: munge(foos[x])
</snippet></ROW><ROW><id>956755</id><snippet>file()</snippet></ROW><ROW><id>956852</id><snippet>def EntryMatches(e):
  if use_currency and not (e.currency == currency):
    return False
  if use_category and not (e.category == category):
    return False
  return True
</snippet></ROW><ROW><id>956852</id><snippet>totals['quantity'] = sum([e.quantity for e in entries if EntryMatches(e)])
</snippet></ROW><ROW><id>956889</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>956889</id><snippet>$LD_LIBRARY_PATH</snippet></ROW><ROW><id>956889</id><snippet>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
</snippet></ROW><ROW><id>956889</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>956889</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>956889</id><snippet>ldconfig -n /usr/local/lib</snippet></ROW><ROW><id>957245</id><snippet>class A(object):
</snippet></ROW><ROW><id>957599</id><snippet>description</snippet></ROW><ROW><id>957759</id><snippet>win32api.GetLogicalDriveStrings().split("\x00")
</snippet></ROW><ROW><id>958314</id><snippet>print sql.literal_column('ARRAY[2]').op('&lt;@')(table.c.lineage)
# ARRAY[2] &lt;@ "treeItems".lineage
</snippet></ROW><ROW><id>958860</id><snippet>a = re.compile(r"""\d +  # the integral part
                   \.    # the decimal point
                   \d *  # some fractional digits""", re.X)

b = re.compile(r"\d+\.\d*")
</snippet></ROW><ROW><id>959135</id><snippet>max_entry</snippet></ROW><ROW><id>959135</id><snippet>n_boxes_in_domain</snippet></ROW><ROW><id>959135</id><snippet>max_entry=6</snippet></ROW><ROW><id>959135</id><snippet>n_boxes_in_domain=3</snippet></ROW><ROW><id>959135</id><snippet>target_number=20</snippet></ROW><ROW><id>959135</id><snippet>def xgroup(items):
    L = len(items)
    for i in range(L-1):
        for j in range(1, L):
            temp = list(items)
            a = temp.pop(j)
            b = temp.pop(i)
            temp.insert(0, a*b)
            yield temp
            for x in xgroup(temp):
                yield x

def product_combos(max_entry, n_boxes, items):
    r = set()
    if len(items)&lt;=n_boxes:
        r.add(tuple(items))
    for i in xgroup(items):
        x = i[:]
        x.sort()
        if x[-1]&lt;=max_entry and len(x)&lt;=n_boxes:
            r.add(tuple(x))
    r = [list(i) for i in r]
    r.sort()
    for i in r:
        while len(i)&lt;n_boxes:
            i.insert(0, 1)
    return r
</snippet></ROW><ROW><id>959135</id><snippet>max_entry=6, n_boxes=3, items=(2,2,5)
[2, 2, 5]
[1, 4, 5]
</snippet></ROW><ROW><id>959135</id><snippet>target_number=2106</snippet></ROW><ROW><id>959135</id><snippet>max_entry=50, n_boxes=6, items=(2,3,3,3,3,13)
[2, 3, 3, 3, 3, 13]
[1, 2, 3, 3, 3, 39]
[1, 2, 3, 3, 9, 13]
[1, 1, 2, 3, 9, 39]
[1, 1, 2, 3, 13, 27]
[1, 1, 2, 9, 9, 13]
[1, 1, 1, 2, 27, 39]
[1, 3, 3, 3, 3, 26]
[1, 3, 3, 3, 6, 13]
[1, 1, 3, 3, 6, 39]
[1, 1, 3, 3, 9, 26]
[1, 1, 3, 3, 13, 18]
[1, 1, 3, 6, 9, 13]
[1, 1, 1, 3, 18, 39]
[1, 1, 1, 3, 26, 27]
[1, 1, 1, 6, 9, 39]
[1, 1, 1, 6, 13, 27]
[1, 1, 1, 9, 9, 26]
[1, 1, 1, 9, 13, 18]
</snippet></ROW><ROW><id>959216</id><snippet>lstrip()</snippet></ROW><ROW><id>959216</id><snippet>&gt;&gt;&gt; '     hello world!'.lstrip()
'hello world!'
</snippet></ROW><ROW><id>959216</id><snippet>lstrip(' ')</snippet></ROW><ROW><id>959216</id><snippet>&gt;&gt;&gt; '   hello world with 2 spaces and a tab!'.lstrip(' ')
'\thello world with 2 spaces and a tab!'
</snippet></ROW><ROW><id>959425</id><snippet>s = raw_input('Insert 2 integers separated by a space: ')
a,b = [int(i) for i in s.split(' ')]
print a*b
</snippet></ROW><ROW><id>959425</id><snippet>s = raw_input('Insert 2 integers separated by a space: ')
</snippet></ROW><ROW><id>959425</id><snippet>&gt;&gt;&gt; raw_input('Insert 2 integers separated by a space: ')
Insert 2 integers separated by a space: 10 12
'10 12'
</snippet></ROW><ROW><id>959425</id><snippet>&gt;&gt;&gt; s.split(' ')
['10', '12']
</snippet></ROW><ROW><id>959425</id><snippet>&gt;&gt;&gt; [int(i) for i in s.split(' ')]
[10, 12]
</snippet></ROW><ROW><id>959799</id><snippet>Node.toxml([encoding])
Return the XML that the DOM represents as a string.

With no argument, the XML header does not specify an encoding, and the result is
Unicode string if the default encoding cannot represent all characters in the 
document. Encoding this string in an encoding other than UTF-8 is likely
incorrect, since UTF-8 is the default encoding of XML.

With an explicit encoding [1] argument, the result is a byte string in the 
specified encoding. It is recommended that this argument is always specified.
To avoid UnicodeError exceptions in case of unrepresentable text data, the 
encoding argument should be specified as “utf-8”.
</snippet></ROW><ROW><id>959799</id><snippet>.toxml('utf8')</snippet></ROW><ROW><id>959799</id><snippet>.toxml()</snippet></ROW><ROW><id>959799</id><snippet>&gt;&gt;&gt; t.data = u"The text\u0180content"
&gt;&gt;&gt; dom.parseString(e.toxml('utf8')).toxml('utf8')
'&lt;?xml version="1.0" encoding="utf8"?&gt;&lt;node&gt;The text\xc6\x80content&lt;/node&gt;'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>959803</id><snippet>chunk_split = lambda s: '\r\n'.join(s[i:min(i+76, len(s))] for i in xrange(0, len(s), 76))
</snippet></ROW><ROW><id>959882</id><snippet>&gt;&gt;&gt; all([int(value) for value in "0 1 2 3 4 5 6 7 8 9".split()])
False
&gt;&gt;&gt; all([int(value) for value in "1 2 3 4 5 6 7 8 9".split()])
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>960024</id><snippet>manage_exportObject</snippet></ROW><ROW><id>960024</id><snippet>manage_importObject</snippet></ROW><ROW><id>960024</id><snippet>$ZOPE_HOME/lib/python/OFS/ObjectManager.py</snippet></ROW><ROW><id>960024</id><snippet>/tmp/instance/dev</snippet></ROW><ROW><id>960024</id><snippet>/tmp/instance/prod</snippet></ROW><ROW><id>960024</id><snippet>/MyFolder1</snippet></ROW><ROW><id>960024</id><snippet>/MyFolder2</snippet></ROW><ROW><id>960024</id><snippet>#!/usr/bin/python
import urllib
import shutil

ids_to_transfer = ['MyFolder1', 'MyFolder2']

for id in ids_to_transfer:
    urllib.urlopen('http://admin:password_dev@localhost:8080/manage_exportObject?id=' + id)

    shutil.move('/tmp/instance/dev/var/' + id + '.zexp', '/tmp/instance/prod/import/' + id + '.zexp')

    urllib.urlopen('http://admin:password_prod@localhost:9090/manage_delObjects?ids=' + id)
    urllib.urlopen('http://admin:password_prod@localhost:9090/manage_importObject?file=' + id + '.zexp')
</snippet></ROW><ROW><id>960315</id><snippet>gtk.accelerator_parse()</snippet></ROW><ROW><id>960514</id><snippet>&gt;&gt;&gt; f = open('myfile.txt', 'r')
&gt;&gt;&gt; f.read()
</snippet></ROW><ROW><id>960514</id><snippet>&gt;&gt;&gt; f.read()
''
</snippet></ROW><ROW><id>960753</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for i in a:
...   for j in range(int(i), int(i) + 2):
...     d[j].append(i)
...
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {1: ['1'], 2: ['1', '2'], 3: ['2']})
&gt;&gt;&gt; d.items()
[(1, ['1']), (2, ['1', '2']), (3, ['2'])]
</snippet></ROW><ROW><id>960844</id><snippet>http://www.google.com/codesearch?hl=en&amp;lr=&amp;q="imp.find_module"+"imp.load_module"&amp;sbtn=Search
</snippet></ROW><ROW><id>960844</id><snippet>http://www.google.com/codesearch?hl=en&amp;sa=N&amp;q="path_hooks"++lang:python&amp;ct=rr&amp;cs_r=lang:python
</snippet></ROW><ROW><id>960844</id><snippet>-3</snippet></ROW><ROW><id>960844</id><snippet>2to3</snippet></ROW><ROW><id>961057</id><snippet>import inspect

def get_class_that_defined_method(meth):
  for cls in inspect.getmro(meth.im_class):
    if meth.__name__ in cls.__dict__: return cls
  return None
</snippet></ROW><ROW><id>961332</id><snippet>dr_area.realize()
self.gc = dr_area.get_style().fg_gc[gtk.STATE_NORMAL]
img = gtk.gdk.pixbuf_new_from_file("image.png")
self.image = gtk.gdk.Pixmap(dr_area.window, img.get_width(), img.get_height())
self.image.draw_pixbuf(self.gc, img, 0, 0, 0, 0)
</snippet></ROW><ROW><id>961332</id><snippet>dr_area.window.draw_drawable(self.gc, self.image, 0, 0, x, y, *self.image.get_size())
</snippet></ROW><ROW><id>961351</id><snippet>3 % 1</snippet></ROW><ROW><id>961351</id><snippet>3 % 2</snippet></ROW><ROW><id>961484</id><snippet>ECONNREFUSED</snippet></ROW><ROW><id>961484</id><snippet>ECONNREFUSED</snippet></ROW><ROW><id>961484</id><snippet>WSAECONNREFUSED</snippet></ROW><ROW><id>961484</id><snippet>ECONNREFUSED</snippet></ROW><ROW><id>961484</id><snippet>ECONNREFUSED</snippet></ROW><ROW><id>961638</id><snippet>&gt;&gt;&gt; str(10)
'10'
&gt;&gt;&gt; int('10')
10
</snippet></ROW><ROW><id>961638</id><snippet>int()</snippet></ROW><ROW><id>961638</id><snippet>str()</snippet></ROW><ROW><id>961638</id><snippet>d.str()</snippet></ROW><ROW><id>961638</id><snippet>str()</snippet></ROW><ROW><id>961638</id><snippet>__str__()</snippet></ROW><ROW><id>961638</id><snippet>pow()</snippet></ROW><ROW><id>961638</id><snippet>**</snippet></ROW><ROW><id>962087</id><snippet>for index, obj in enumerate(objects):
  # Use index, obj.
</snippet></ROW><ROW><id>962087</id><snippet>enumerate</snippet></ROW><ROW><id>962087</id><snippet>timeit</snippet></ROW><ROW><id>962087</id><snippet>enumerate</snippet></ROW><ROW><id>962087</id><snippet>&gt;&gt;&gt; timeit.Timer('for i in xrange(len(seq)): x = i + seq[i]', 'seq = range(100)').timeit()
10.322299003601074
&gt;&gt;&gt; timeit.Timer('for i, e in enumerate(seq): x = i + e', 'seq = range(100)').timeit()
11.850601196289062
</snippet></ROW><ROW><id>962212</id><snippet>import urllib2
req = urllib2.Request("http://foo.com/post_here", "&lt;xml data to post&gt;")
response = urllib2.urlopen(req)
the_page = response.read()
</snippet></ROW><ROW><id>962442</id><snippet>import MA
a = MA.array([1, 2, None], mask = [0, 0, 1])
print "average =", MA.average(a)
</snippet></ROW><ROW><id>962672</id><snippet>MyModel.objects.order_by('?')[0]
</snippet></ROW><ROW><id>963166</id><snippet>print '-' * 3
</snippet></ROW><ROW><id>963481</id><snippet>self.msg.content_subtype = "html"</snippet></ROW><ROW><id>963481</id><snippet>self.msg.content_subtype = "iso-8859-1"</snippet></ROW><ROW><id>963481</id><snippet>class EmailMultiAlternativesWithEncoding(EmailMultiAlternatives):
    def _create_attachment(self, filename, content, mimetype=None):
        """
        Converts the filename, content, mimetype triple into a MIME attachment
        object. Use self.encoding when handling text attachments.
        """
        if mimetype is None:
            mimetype, _ = mimetypes.guess_type(filename)
            if mimetype is None:
                mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
        basetype, subtype = mimetype.split('/', 1)
        if basetype == 'text':
            encoding = self.encoding or settings.DEFAULT_CHARSET
            attachment = SafeMIMEText(smart_str(content,
                settings.DEFAULT_CHARSET), subtype, encoding)
            # original text being replaced above (not last argument)
            # attachment = SafeMIMEText(smart_str(content,
            #     settings.DEFAULT_CHARSET), subtype, settings.DEFAULT_CHARSET)
        else:
            # Encode non-text attachments with base64.
            attachment = MIMEBase(basetype, subtype)
            attachment.set_payload(content)
            Encoders.encode_base64(attachment)
        if filename:
            attachment.add_header('Content-Disposition', 'attachment',
                                  filename=filename)
        return attachment</snippet></ROW><ROW><id>963482</id><snippet>{
    "node":
    {
        "list": "&lt;ul&gt;&lt;li class='lists'&gt;Hello World&lt;/li&gt;&lt;ul&gt;"
    }
}
</snippet></ROW><ROW><id>963482</id><snippet>simplejson</snippet></ROW><ROW><id>963482</id><snippet>&gt;&gt;&gt; import simplejson
&gt;&gt;&gt; simplejson.dumps({'node': {'list': '&lt;ul&gt;&lt;li class="lists"&gt;Hello World&lt;/li&gt;&lt;ul&gt;'}})
'{"node": {"list": "&lt;ul&gt;&lt;li class=\\"lists\\"&gt;Hello World&lt;/li&gt;&lt;ul&gt;"}}'
</snippet></ROW><ROW><id>963680</id><snippet>lxml.etree.Comment()</snippet></ROW><ROW><id>963842</id><snippet>ZipFile.writestr()</snippet></ROW><ROW><id>963842</id><snippet>my_data = "&lt;html&gt;&lt;body&gt;&lt;p&gt;Hello, world!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"
z.writestr("hello.html", my_data)
</snippet></ROW><ROW><id>963842</id><snippet>/</snippet></ROW><ROW><id>963842</id><snippet>os.sep</snippet></ROW><ROW><id>963842</id><snippet>z.writestr("site/foo/hello/index.html", my_data)
</snippet></ROW><ROW><id>964005</id><snippet>my_list = list(my_set)
</snippet></ROW><ROW><id>964005</id><snippet>&gt;&gt;&gt; list('abc')
['a', 'b', 'c']
</snippet></ROW><ROW><id>964033</id><snippet>class StrategyExample :

    def __init__(self, func=None) :
        if func :
             self.execute = func

    def execute(self) :
        print "Original execution"


def executeReplacement1() :
        print "Strategy 1"


def executeReplacement2() :
         print "Strategy 2"

if __name__ == "__main__" :

    strat0 = StrategyExample()
    strat1 = StrategyExample(executeReplacement1)
    strat2 = StrategyExample(executeReplacement2)

    strat0.execute()
    strat1.execute()
    strat2.execute()
</snippet></ROW><ROW><id>964033</id><snippet>Original execution
Strategy 1
Strategy 2
</snippet></ROW><ROW><id>964033</id><snippet>if func == None</snippet></ROW><ROW><id>964033</id><snippet>start0.execute()</snippet></ROW><ROW><id>964033</id><snippet>class StrategyExample :

    def __init__(self, func=None) :
        self.name = "Strategy Example 0"
        if func :
             self.execute = func

    def execute(self) :
        print self.name


def executeReplacement1() :
        print self.name + " from execute 1"


def executeReplacement2() :
         print self.name + " from execute 2"

if __name__ == "__main__" :

    strat0 = StrategyExample()
    strat1 = StrategyExample(executeReplacement1)
    strat1.name = "Strategy Example 1"
    strat2 = StrategyExample(executeReplacement2)
    strat2.name = "Strategy Example 2"

    strat0.execute()
    strat1.execute()
    strat2.execute()
</snippet></ROW><ROW><id>964033</id><snippet>Traceback (most recent call last):
  File "test.py", line 28, in &lt;module&gt;
    strat1.execute()
  File "test.py", line 13, in executeReplacement1
    print self.name + " from execute 1"
NameError: global name 'self' is not defined
</snippet></ROW><ROW><id>964033</id><snippet>import types

class StrategyExample :

    def __init__(self, func=None) :
        self.name = "Strategy Example 0"
        if func :
             self.execute = types.MethodType(func, self, StrategyExample)

    def execute(self) :
        print self.name


def executeReplacement1(self) :
        print self.name + " from execute 1"


def executeReplacement2(self) :
         print self.name + " from execute 2"

if __name__ == "__main__" :

    strat0 = StrategyExample()
    strat1 = StrategyExample(executeReplacement1)
    strat1.name = "Strategy Example 1"
    strat2 = StrategyExample(executeReplacement2)
    strat2.name = "Strategy Example 2"

    strat0.execute()
    strat1.execute()
    strat2.execute()
</snippet></ROW><ROW><id>964033</id><snippet>Strategy Example 0
Strategy Example 1 from execute 1
Strategy Example 2 from execute 2
</snippet></ROW><ROW><id>964049</id><snippet>import types

class SpecialClass(object):
    @classmethod
    def removeVariable(cls, name):
        return delattr(cls, name)

    @classmethod
    def addMethod(cls, func):
        return setattr(cls, func.__name__, types.MethodType(func, cls))

def hello(self, n):
    print n

instance = SpecialClass()
SpecialClass.addMethod(hello)

&gt;&gt;&gt; SpecialClass.hello(5)
5

&gt;&gt;&gt; instance.hello(6)
6

&gt;&gt;&gt; SpecialClass.removeVariable("hello")

&gt;&gt;&gt; instance.hello(7)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'SpecialClass' object has no attribute 'hello'

&gt;&gt;&gt; SpecialClass.hello(8)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'SpecialClass' has no attribute 'hello'
</snippet></ROW><ROW><id>964419</id><snippet>&gt;&gt;&gt; print "Value: %.2f" % 3.0000
</snippet></ROW><ROW><id>964825</id><snippet>uni = u'Hey my name is André'
in_utf8 = uni.encode('utf-8')
# send the utf-8 data to server
# send(in_utf8)

# on server side
# server receives it. But server is Japanese.
# So the server treats the data with the National charset, shift-jis:
some_string = in_utf8 # some_string = receive()    
decoded = some_string.decode('sjis')
</snippet></ROW><ROW><id>964825</id><snippet>/etc/freetds/freetds.conf</snippet></ROW><ROW><id>964957</id><snippet>import os
import trac.web.main

os.environ['TRAC_ENV'] = '/path/to/your/trac/env'

application = trac.web.main.dispatch_request

from flup.server.fcgi import WSGIServer
server = WSGIServer(application, bindAddress=("127.0.0.1", 9000), )
server.run()
</snippet></ROW><ROW><id>964957</id><snippet>server.document-root = "/path/to/your/trac/env"
server.port = 1234
server.modules = ( "mod_fastcgi" )
server.pid-file = "/path/to/your/trac/env/httpd.pid"
server.errorlog = "/path/to/your/trac/env/error.log"
fastcgi.server = ( "/" =&gt;
  (( "host" =&gt; "127.0.0.1",
     "port" =&gt; 9000,
     "docroot" =&gt; "/",
     "check-local" =&gt; "disable",
  ))
)
</snippet></ROW><ROW><id>965110</id><snippet>import dbus
bus = dbus.SystemBus()
obj = bus.get_object("org.freedesktop.Hal", "/org/freedesktop/Hal/Manager")
iface = dbus.Interface(obj, "org.freedesktop.Hal.Manager")
print iface.FindDeviceStringMatch("block.device", "/dev/sda")
</snippet></ROW><ROW><id>965226</id><snippet>  sys.stdout.flush()
</snippet></ROW><ROW><id>965226</id><snippet>print</snippet></ROW><ROW><id>965226</id><snippet>python -u</snippet></ROW><ROW><id>965582</id><snippet>def view_handler(request):
    if hasattr(request, 'mycache'):
        request.mycache['counter'] += 1
    else:
        request.mycache = {'counter':1,}

    return HttpResponse("counter="+str(request.mycache["counter"]))
</snippet></ROW><ROW><id>965797</id><snippet>import os.path, sys
PY_PATH = None
for p in ['c:\\Data\\Python', 'e:\\Data\\Python','c:\\Python','e:\\Python']:
    if os.path.exists(p): 
        PY_PATH = p
        break
if PY_PATH and PY_PATH not in sys.path: sys.path.append(PY_PATH)
</snippet></ROW><ROW><id>966617</id><snippet>if os.environ['SERVER_SOFTWARE'].startswith('Development'):
    print 'Hello world!'
</snippet></ROW><ROW><id>966617</id><snippet>my_module.debug = True
</snippet></ROW><ROW><id>966995</id><snippet>a[j]=a[j-2]+(j+2)*(j+3)/2
</snippet></ROW><ROW><id>966995</id><snippet>a.append(a[j-2] + (j+2)*(j+3)/2)
</snippet></ROW><ROW><id>967171</id><snippet>infile = codecs.open(filename, 'r', encoding='iso-8859-1')
</snippet></ROW><ROW><id>967171</id><snippet>print location.encode('ISO-8859-1')
</snippet></ROW><ROW><id>967384</id><snippet>isatty()</snippet></ROW><ROW><id>967384</id><snippet>import sys
if sys.stdout.isatty():
    print("Interactive")
else:
    print("Non-interactive")
</snippet></ROW><ROW><id>967885</id><snippet>virtualenv</snippet></ROW><ROW><id>967885</id><snippet>virtualevwrapper</snippet></ROW><ROW><id>967885</id><snippet>--no-site-packages</snippet></ROW><ROW><id>968045</id><snippet>\n</snippet></ROW><ROW><id>968564</id><snippet>forms.RegexField('^[a-zA-Z0-9\\-\' ]$',max_length=30, min_length=3)
</snippet></ROW><ROW><id>968564</id><snippet>forms.RegexField('^[a-zA-Z0-9\\-\' ]+$',max_length=30, min_length=3)
</snippet></ROW><ROW><id>969068</id><snippet>self.instance</snippet></ROW><ROW><id>969233</id><snippet>{% for row in results_to_display %}
    &lt;tr&gt;&lt;td&gt;{{forloop.counter}}&lt;/td&gt;&lt;td&gt;{{row.scorea}}&lt;/td&gt;...
{% endfor %}
</snippet></ROW><ROW><id>969233</id><snippet>def fetch_ranked_scores( request ):
    query = Score.objects.filter( ... ).orderby( scorea )
    scores = [ r, s.scorea for r, s in enumerate(query) ]
    return render_to_response ( template, { 'results_to_display':scores } )
</snippet></ROW><ROW><id>969233</id><snippet> class Score( models.Model ):
     ScoreA = models.IntegerField( ... )
     def ranked_by_a( self ):
         return enumerate( self.objects.filter(...).orderby( scorea ) )
</snippet></ROW><ROW><id>969483</id><snippet>CTRL+space</snippet></ROW><ROW><id>969483</id><snippet>,</snippet></ROW><ROW><id>969483</id><snippet>(</snippet></ROW><ROW><id>969483</id><snippet>,</snippet></ROW><ROW><id>969483</id><snippet>CTRL+space</snippet></ROW><ROW><id>969506</id><snippet>yc = M01 / M00</snippet></ROW><ROW><id>969586</id><snippet>&lt;path_to_gae&gt;/dev_appserver.py
</snippet></ROW><ROW><id>969586</id><snippet>--datastore_path=/tmp/myapp_datastore &lt;your_app&gt;
</snippet></ROW><ROW><id>969727</id><snippet>add2virtualenv directory1 directory2 ...
</snippet></ROW><ROW><id>970106</id><snippet>pydoc -k</snippet></ROW><ROW><id>970106</id><snippet>pydoc -k &lt;keyword&gt;
    Search for a keyword in the synopsis lines of all available modules.
</snippet></ROW><ROW><id>970106</id><snippet>$ pydoc -k pdf
</snippet></ROW><ROW><id>970106</id><snippet>$ pydoc -k pdf
PdfImagePlugin 
wx.lib.pdfwin 
PIL.PdfImagePlugin
</snippet></ROW><ROW><id>970439</id><snippet>.save</snippet></ROW><ROW><id>970439</id><snippet>self.modified</snippet></ROW><ROW><id>970439</id><snippet>def wrapMethod(cls, n):
    f = getattr(cls, n)
    def wrap(self, *a):
      self.dirty = True
      return f(self, *a)
    return wrap

def wrapListMutators(cls):
  for n in '''__setitem__ __delitem__ __iadd__ __imul__
              append extend insert pop remove reverse sort'''.split():
    f = wrapMethod(cls, n)
    setattr(cls, n, f)
  return cls

@wrapListMutators
class DataSet(list):
  dirty = False
  def save(self): self.dirty = False
</snippet></ROW><ROW><id>970439</id><snippet>def</snippet></ROW><ROW><id>970439</id><snippet>class</snippet></ROW><ROW><id>970439</id><snippet>class</snippet></ROW><ROW><id>970439</id><snippet>class DataSet(list):
  dirty = False
  def save(self): self.dirty = False
DataSet = wrapListMutators(DataSet)
</snippet></ROW><ROW><id>970439</id><snippet>bp</snippet></ROW><ROW><id>970439</id><snippet>i</snippet></ROW><ROW><id>970439</id><snippet>theset[i].bp == i</snippet></ROW><ROW><id>970439</id><snippet>self.dirty</snippet></ROW><ROW><id>970439</id><snippet>self.renumber()</snippet></ROW><ROW><id>970439</id><snippet>def wrapMethod(cls, n):
    f = getattr(cls, n)
    def wrap(self, *a):
      temp = f(self, *a)
      self.renumber()
      return temp
    return wrap
</snippet></ROW><ROW><id>970439</id><snippet>append</snippet></ROW><ROW><id>970439</id><snippet>.bp</snippet></ROW><ROW><id>970439</id><snippet>O(N)</snippet></ROW><ROW><id>970439</id><snippet>append</snippet></ROW><ROW><id>970439</id><snippet>insert</snippet></ROW><ROW><id>970439</id><snippet>O(N)</snippet></ROW><ROW><id>970439</id><snippet>O(N)</snippet></ROW><ROW><id>970439</id><snippet>.bp</snippet></ROW><ROW><id>970439</id><snippet>bp</snippet></ROW><ROW><id>970439</id><snippet>False</snippet></ROW><ROW><id>970439</id><snippet>bp</snippet></ROW><ROW><id>970439</id><snippet>append</snippet></ROW><ROW><id>970439</id><snippet>append</snippet></ROW><ROW><id>970439</id><snippet>renumber</snippet></ROW><ROW><id>970439</id><snippet>bp</snippet></ROW><ROW><id>970439</id><snippet>bp</snippet></ROW><ROW><id>970439</id><snippet>bp</snippet></ROW><ROW><id>970723</id><snippet>import re
regex = re.compile("\x03(?:\d{1,2}(?:,\d{1,2})?)?", re.UNICODE)
</snippet></ROW><ROW><id>970723</id><snippet>&gt;&gt;&gt; regex.sub("", "blabla \x035,12to be colored text and background\x03 blabla")
'blabla to be colored text and background blabla'
</snippet></ROW><ROW><id>970830</id><snippet>os.stat</snippet></ROW><ROW><id>970830</id><snippet>os.fstat</snippet></ROW><ROW><id>970830</id><snippet>st_dev</snippet></ROW><ROW><id>970830</id><snippet>import os

def same_fs(file1, file2):
    dev1 = os.stat(file1).st_dev
    dev2 = os.stat(file2).st_dev
    return dev1 == dev2
</snippet></ROW><ROW><id>971015</id><snippet>reader</snippet></ROW><ROW><id>971015</id><snippet>def isLast(itr):
  old = itr.next()
  for new in itr:
    yield False, old
    old = new
  yield True, old
</snippet></ROW><ROW><id>971015</id><snippet>for line_num, (is_last, row) in enumerate(isLast(reader)):
    if not is_last: assert len(row) == len(header)
</snippet></ROW><ROW><id>971029</id><snippet>def getSummary(s):
    return s[s.find('\nSummary'):]
</snippet></ROW><ROW><id>971454</id><snippet>.pyc</snippet></ROW><ROW><id>971454</id><snippet>tests.py</snippet></ROW><ROW><id>971454</id><snippet>try:
    some_external_resource_processing()
except Exception, e:
    logger.exception( e )
    raise
</snippet></ROW><ROW><id>971454</id><snippet>class SomeLoadtest( unittest.TestCase ):
    def test_something( self ):
        self.connection = urllib2.urlopen( "localhost:8000/some/path" )
        results = self.connection.read()
</snippet></ROW><ROW><id>971697</id><snippet>   contourList = list(&lt;your linked list&gt;)
   def sizeKey(countour):
      &lt;get size from contour&gt;
   contourList.sort(key = sizeKey)
</snippet></ROW><ROW><id>971774</id><snippet>for cell in self.cells.flat:
    do_somethin(cell)
</snippet></ROW><ROW><id>972195</id><snippet>mydbobject = DbModel.get_by_id(int(self.request.get("selectedrow")))
</snippet></ROW><ROW><id>972253</id><snippet>filter</snippet></ROW><ROW><id>972253</id><snippet>resources = [file_obj
             for file_obj in (obj.get("file") for obj in iterator)
             if file_obj is not None]
</snippet></ROW><ROW><id>972383</id><snippet>os.fork</snippet></ROW><ROW><id>972383</id><snippet>os.exec...</snippet></ROW><ROW><id>972383</id><snippet>fork</snippet></ROW><ROW><id>972383</id><snippet>_exit</snippet></ROW><ROW><id>972383</id><snippet>setsid</snippet></ROW><ROW><id>972383</id><snippet>os.exec...</snippet></ROW><ROW><id>972383</id><snippet>e</snippet></ROW><ROW><id>972383</id><snippet>subprocess</snippet></ROW><ROW><id>972383</id><snippet>multiprocessing</snippet></ROW><ROW><id>972383</id><snippet>fork</snippet></ROW><ROW><id>972383</id><snippet>setsid</snippet></ROW><ROW><id>972383</id><snippet>import os
import sys

def spawnDaemon(path_to_executable, *args)
    """Spawn a completely detached subprocess (i.e., a daemon).

    E.g. for mark:
    spawnDaemon("../bin/producenotify.py", "producenotify.py", "xx")
    """
    # fork the first time (to make a non-session-leader child process)
    try:
        pid = os.fork()
    except OSError, e:
        raise RuntimeError("1st fork failed: %s [%d]" % (e.strerror, e.errno))
    if pid != 0:
        # parent (calling) process is all done
        return

    # detach from controlling terminal (to make child a session-leader)
    os.setsid()
    try:
        pid = os.fork()
    except OSError, e:
        raise RuntimeError("2nd fork failed: %s [%d]" % (e.strerror, e.errno))
        raise Exception, "%s [%d]" % (e.strerror, e.errno)
    if pid != 0:
        # child process is all done
        os._exit(0)

    # grandchild process now non-session-leader, detached from parent
    # grandchild process must now close all open files
    try:
        maxfd = os.sysconf("SC_OPEN_MAX")
    except (AttributeError, ValueError):
        maxfd = 1024

    for fd in range(maxfd):
        try:
           os.close(fd)
        except OSError: # ERROR, fd wasn't open to begin with (ignored)
           pass

    # redirect stdin, stdout and stderr to /dev/null
    os.open(os.devnull, os.O_RDWR)  # standard input (0)
    os.dup2(0, 1)
    os.dup2(0, 2)

    # and finally let's execute the executable for the daemon!
    try:
      os.execv(path_to_executable, args)
    except Exception, e:
      # oops, we're cut off from the world, let's just give up
      os._exit(255)
</snippet></ROW><ROW><id>973256</id><snippet>def run_example1():
    """
    This is example number 1. Running it should give you the following output:

    &gt;&gt;&gt; run_example1()
    "This is the output from example1.py"
    """

    os.system('python example1.py') # or you could use subprocess here

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>973256</id><snippet>import subprocess

cmd = ('example1.py', 'any', 'more', 'arguments')

expected_out = """Your expected output of the script"""

exampleP = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = exampleP.communicate() # out and err are stdout and stderr, respectively

if out != expected_out:
    print "Output does not match"
</snippet></ROW><ROW><id>973488</id><snippet>os.walk(directory)
</snippet></ROW><ROW><id>973488</id><snippet>[x[0] for x in os.walk(directory)]
</snippet></ROW><ROW><id>973488</id><snippet>os.walk('.').next()[1]
</snippet></ROW><ROW><id>973538</id><snippet>from BeautifulSoup import BeautifulSoup

# Here's your HTML
html = '&lt;p data="5" size="4"&gt;item1&lt;/p&gt;&lt;p size="4"&gt;item2&lt;/p&gt;&lt;p size="4"&gt;item3&lt;/p&gt;'

# Here's some simple HTML that breaks your accepted 
# answer, but doesn't break BeautifulSoup.
# For each example, the regex will ignore the first &lt;p&gt; tag.
html2 = '&lt;p size="4" data="5"&gt;item1&lt;/p&gt;&lt;p size="4"&gt;item2&lt;/p&gt;&lt;p size="4"&gt;item3&lt;/p&gt;'
html3 = '&lt;p data="5" size="4" &gt;item1&lt;/p&gt;&lt;p size="4"&gt;item2&lt;/p&gt;&lt;p size="4"&gt;item3&lt;/p&gt;'
html4 = '&lt;p data="5" size="12"&gt;item1&lt;/p&gt;&lt;p size="4"&gt;item2&lt;/p&gt;&lt;p size="4"&gt;item3&lt;/p&gt;'

# This BeautifulSoup code works for all the examples.
paragraphs = BeautifulSoup(html).findAll('p')
items = [''.join(p.findAll(text=True)) for p in paragraphs]
</snippet></ROW><ROW><id>973567</id><snippet>&gt;&gt;&gt; from sqlalchemy import create_engine
&gt;&gt;&gt; engine = create_engine('sqlite:///:memory:', echo=True)
&gt;&gt;&gt; from sqlalchemy import Table, Column, Integer, String, MetaData
&gt;&gt;&gt; metadata = MetaData()
</snippet></ROW><ROW><id>973567</id><snippet>&gt;&gt;&gt; players_table = Table('players', metadata,
...   Column('id', Integer, primary_key=True),
...   Column('name', String),
...   Column('score', Integer)
... )
&gt;&gt;&gt; metadata.create_all(engine) # create the table
</snippet></ROW><ROW><id>973567</id><snippet>&gt;&gt;&gt; class Player(object):
...     def __init__(self, name, score):
...         self.name = name
...         self.score = score
...
...     def __repr__(self):
...        return "&lt;Player('%s','%s')&gt;" % (self.name, self.score)
</snippet></ROW><ROW><id>973567</id><snippet>&gt;&gt;&gt; from sqlalchemy.orm import mapper
&gt;&gt;&gt; mapper(Player, players_table) 
&lt;Mapper at 0x...; Player&gt;
</snippet></ROW><ROW><id>973567</id><snippet>&gt;&gt;&gt; a_player = Player('monty', 0)
&gt;&gt;&gt; a_player.name
'monty'
&gt;&gt;&gt; a_player.score
0
</snippet></ROW><ROW><id>974229</id><snippet>import signal

def quit_gracefully(*args):
    print 'quitting loop'
    exit(0);

if __name__ == "__main__":
    signal.signal(signal.SIGINT, quit_gracefully)

    try:
        print 'starting loop'
        while True:
            pass
    except KeyboardInterrupt:
        quit_gracefully()
</snippet></ROW><ROW><id>974286</id><snippet>clojure.contrib.test-is</snippet></ROW><ROW><id>974286</id><snippet>clojure.contrib.test-is/run-tests</snippet></ROW><ROW><id>974286</id><snippet>foo.clj</snippet></ROW><ROW><id>974286</id><snippet>(ns foo)

(defn hello [x] (println "Hello," x))

(if *command-line-args*
  (hello "command line")
  (hello "REPL"))
</snippet></ROW><ROW><id>974286</id><snippet>$ java -cp ~/path/to/clojure.jar:. clojure.main foo.clj --
Hello, command line
$ java -cp ~/path/to/clojure.jar:. clojure.main
Clojure 1.1.0-alpha-SNAPSHOT
user=&gt; (use 'foo)
Hello, REPL
nil
user=&gt;
</snippet></ROW><ROW><id>974286</id><snippet>src/clj/clojure/main.clj</snippet></ROW><ROW><id>974286</id><snippet>.class</snippet></ROW><ROW><id>974286</id><snippet>foo.clj</snippet></ROW><ROW><id>974286</id><snippet>(ns foo
  (:gen-class))

(defn hello [x] (println "Hello," x))

(defn -main [] (hello "command line"))
</snippet></ROW><ROW><id>974286</id><snippet>.class</snippet></ROW><ROW><id>974286</id><snippet>./classes</snippet></ROW><ROW><id>974286</id><snippet>$CLASSPATH</snippet></ROW><ROW><id>974286</id><snippet>./classes</snippet></ROW><ROW><id>974286</id><snippet>foo.clj</snippet></ROW><ROW><id>974286</id><snippet>$ mkdir classes
$ java -cp ~/path/to/clojure.jar:./classes:. clojure.main
Clojure 1.1.0-alpha-SNAPSHOT
user=&gt; (compile 'foo)
foo
</snippet></ROW><ROW><id>974286</id><snippet>classes</snippet></ROW><ROW><id>974286</id><snippet>.class</snippet></ROW><ROW><id>974286</id><snippet>-main</snippet></ROW><ROW><id>974286</id><snippet>$ java -cp ~/path/to/clojure.jar:./classes foo
Hello, command line.
</snippet></ROW><ROW><id>974291</id><snippet>&gt;&gt;&gt; import audiere
&gt;&gt;&gt; d = audiere.open_device()
&gt;&gt;&gt; t = d.create_tone(17000) # 17 KHz
&gt;&gt;&gt; t.play() # non-blocking call
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.sleep(5)
&gt;&gt;&gt; t.stop()
</snippet></ROW><ROW><id>974577</id><snippet>def alternate(i):
    i = iter(i)
    while True:
        yield(i.next(), i.next())

&gt;&gt;&gt; list(alternate(range(10)))
[(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]
</snippet></ROW><ROW><id>974692</id><snippet>&gt;&gt;&gt; dict((key, sum(d[key] for d in dictList)) for key in dictList[0])
{'a': 22, 'b': 56, 'c': 191}
</snippet></ROW><ROW><id>974692</id><snippet>import operator, itertools
dict((key, sum(itertools.imap(operator.itemgetter(key), dictList))) 
      for key in dictList[0])
</snippet></ROW><ROW><id>974692</id><snippet>List Size   Original      dict+generator       imap+itemgetter
      3      0.054          0.090                0.097
     30      0.473          0.255                0.236
    300      4.668          1.884                1.529
   3000     46.668         17.975               14.499
</snippet></ROW><ROW><id>974848</id><snippet>PATH</snippet></ROW><ROW><id>974848</id><snippet>PATH</snippet></ROW><ROW><id>974951</id><snippet>atexit</snippet></ROW><ROW><id>974951</id><snippet># db.py:
import sqlite3
import atexit

con = None

def get_connection():
    global con
    if not con:
        con = sqlite3.connect('somedb.sqlite')
    atexit.register(close_connection, con)
    return con

def close_connection(some_con):
    some_con.commit()
    some_con.close()

# your_program.py
import db
con = db.get_connection()
cur = con.cursor()
cur.execute("SELECT ...")
</snippet></ROW><ROW><id>974951</id><snippet>with</snippet></ROW><ROW><id>974951</id><snippet>delete</snippet></ROW><ROW><id>974951</id><snippet>new</snippet></ROW><ROW><id>974951</id><snippet>close()</snippet></ROW><ROW><id>974956</id><snippet>myinteger = 212345
number_string = str(myinteger)
</snippet></ROW><ROW><id>974956</id><snippet>for ch in number_string:
    print ch # will print each digit in order
</snippet></ROW><ROW><id>974956</id><snippet>print number_string[:2] # first two digits
print number_string[-3:] # last three digits
print number_string[3] # forth digit
</snippet></ROW><ROW><id>974956</id><snippet>isbn = raw_input()
for pos, ch in enumerate(reversed(isbn)):
    print "%d * %d is %d" % pos + 2, int(ch), int(ch) * (pos + 2)
</snippet></ROW><ROW><id>975024</id><snippet>innerList = [0] * 10
</snippet></ROW><ROW><id>975024</id><snippet>int</snippet></ROW><ROW><id>975024</id><snippet>0</snippet></ROW><ROW><id>975024</id><snippet>innerList[1] = 15
</snippet></ROW><ROW><id>975024</id><snippet>15</snippet></ROW><ROW><id>975024</id><snippet>int</snippet></ROW><ROW><id>975024</id><snippet>outerList = innerList * 5
</snippet></ROW><ROW><id>975024</id><snippet>list</snippet></ROW><ROW><id>975024</id><snippet>innerList</snippet></ROW><ROW><id>975024</id><snippet>list</snippet></ROW><ROW><id>975024</id><snippet>outerList[2].append('something')
</snippet></ROW><ROW><id>975024</id><snippet>innerList.append('something')
</snippet></ROW><ROW><id>975024</id><snippet>list</snippet></ROW><ROW><id>975024</id><snippet>list</snippet></ROW><ROW><id>975024</id><snippet>list</snippet></ROW><ROW><id>975024</id><snippet>outerList[1] = outerList[1] + ['something']
</snippet></ROW><ROW><id>975024</id><snippet>list</snippet></ROW><ROW><id>975024</id><snippet>+</snippet></ROW><ROW><id>975024</id><snippet>outerList</snippet></ROW><ROW><id>975024</id><snippet>innerList</snippet></ROW><ROW><id>976281</id><snippet>cleanMsg</snippet></ROW><ROW><id>976281</id><snippet>__init__</snippet></ROW><ROW><id>976281</id><snippet>import inspect
f = inspect.currentframe(N)
</snippet></ROW><ROW><id>976281</id><snippet>code = f.f_code
caller = '%s:%s' % (code.co_filename, code.co_name)
</snippet></ROW><ROW><id>976287</id><snippet>/cygdrive/c/Program\ Files/My\ Program/myprog.exe</snippet></ROW><ROW><id>976287</id><snippet>"C:\Program Files\My Program\myprog.exe"</snippet></ROW><ROW><id>976607</id><snippet>import random

hash = random.getrandbits(128)

print "hash value: %032x" % hash
</snippet></ROW><ROW><id>976691</id><snippet>b = wx.Button(self, 10, "Default Button", (20, 20))
b.myname = "default button"
self.Bind(wx.EVT_BUTTON, self.OnClick, b)
</snippet></ROW><ROW><id>976691</id><snippet>def OnClick(self, event):
    name = event.GetEventObject().myname
</snippet></ROW><ROW><id>976918</id><snippet>random.shuffle</snippet></ROW><ROW><id>976918</id><snippet>from random import shuffle
x = [[i] for i in range(10)]
shuffle(x)

# print x  gives  [[9], [2], [7], [0], [4], [5], [3], [1], [8], [6]]
# of course your results will vary
</snippet></ROW><ROW><id>977156</id><snippet>r"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=c:\myDb;
Extended Properties=Paradox 5.x;"
</snippet></ROW><ROW><id>977156</id><snippet>r"Driver={Microsoft Paradox Driver (*.db )};DriverID=538;Fil=Paradox 5.X;
DefaultDir=c:\pathToDb\;Dbq=c:\pathToDb\;CollatingSequence=ASCII;"
</snippet></ROW><ROW><id>977156</id><snippet>r"Provider=MSDASQL;Persist Security Info=False;Mode=Read;
Extended Properties='DSN=Paradox;DBQ=C:\myDb;DefaultDir=C:\myDb;DriverId=538;
FIL=Paradox 7.X;MaxBufferSize=2048;PageTimeout=600;';Initial Catalog=C:\myDb;"
</snippet></ROW><ROW><id>977476</id><snippet>1) Loop through every line in the log

    a)If line matches appropriate Regex:

      Display/Store Next Line as the item title.
      Look for the next line containing "Result 
      XXXX." and parse out that result for 
      including in the result set.
</snippet></ROW><ROW><id>977563</id><snippet># Like so
difflib.SequenceMatcher(None, str1, str2)

# Or just read the files in
difflib.SequenceMatcher(None, file1.read(), file2.read())
</snippet></ROW><ROW><id>978264</id><snippet>from fortran_code import fortran_function
import os

print "will run fortran function!"

# open 2 fds
null_fds = [os.open(os.devnull, os.O_RDWR) for x in xrange(2)]
# save the current file descriptors to a tuple
save = os.dup(1), os.dup(2)
# put /dev/null fds on 1 and 2
os.dup2(null_fds[0], 1)
os.dup2(null_fds[1], 2)

# *** run the function ***
fortran_function()

# restore file descriptors so I can print the results
os.dup2(save[0], 1)
os.dup2(save[1], 2)
# close the temporary fds
os.close(null_fds[0])
os.close(null_fds[1])

print "done!"
</snippet></ROW><ROW><id>978695</id><snippet>TCP_SERVICES</snippet></ROW><ROW><id>978695</id><snippet>&gt;&gt;&gt; TCP_REVERSE = dict((TCP_SERVICES[k], k) for k in TCP_SERVICES.keys())
&gt;&gt;&gt; TCP_REVERSE[80]
'www'
</snippet></ROW><ROW><id>978778</id><snippet>setup.py install</snippet></ROW><ROW><id>978778</id><snippet>PYSMELLTAGS</snippet></ROW><ROW><id>978778</id><snippet>site-packages/django</snippet></ROW><ROW><id>978778</id><snippet>pysmell . -o ~/PYSMELLTAGS.django</snippet></ROW><ROW><id>978778</id><snippet>pysmell .</snippet></ROW><ROW><id>978778</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>978778</id><snippet>export PYTHONPATH=${PYTHONPATH}:/path/to/pysmell/</snippet></ROW><ROW><id>978778</id><snippet>vim .</snippet></ROW><ROW><id>978778</id><snippet>pysmell.vim</snippet></ROW><ROW><id>978778</id><snippet>:source /path/to/pysmell/pysmell.vim</snippet></ROW><ROW><id>978778</id><snippet>:set omnifunc=pysmell#Complete</snippet></ROW><ROW><id>978778</id><snippet>autocmd FileType python set omnifunc=pysmell#Complete</snippet></ROW><ROW><id>978778</id><snippet>PYSMELLTAGS</snippet></ROW><ROW><id>978778</id><snippet>PYSMELLTAGS.django</snippet></ROW><ROW><id>978778</id><snippet>python &lt;&lt; EOF
import os
import sys
import vim
sys.path.append("/usr/local/python/lib/python2.5/site-packages")
EOF
exe ":source ~/src/pysmell/pysmell.vim"
autocmd FileType python set omnifunc=pysmell#Complete
</snippet></ROW><ROW><id>978816</id><snippet>import heapq, itertools
def intersect(*its):
    for key, values in itertools.groupby(heapq.merge(*its)):
    	if len(list(values)) == len(its):
    		yield key

&gt;&gt;&gt; list(intersect(*postings))
[100, 322]
</snippet></ROW><ROW><id>978868</id><snippet>client_address</snippet></ROW><ROW><id>978868</id><snippet>_dispatch</snippet></ROW><ROW><id>978868</id><snippet>self.client_address</snippet></ROW><ROW><id>978868</id><snippet>SimpleXMLRPCRequestHandler._dispatch</snippet></ROW><ROW><id>978868</id><snippet>client_address</snippet></ROW><ROW><id>978868</id><snippet>client_address</snippet></ROW><ROW><id>978868</id><snippet>self.client_address</snippet></ROW><ROW><id>979538</id><snippet>from datetime import datetime, timedelta
last_month = datetime.today() - timedelta(days=30)
items = Item.objects.filter(my_date__gte=last_month).order_by(...)
</snippet></ROW><ROW><id>979598</id><snippet>openssl-devel</snippet></ROW><ROW><id>979598</id><snippet>sudo apt-get build-dep python2.5</snippet></ROW><ROW><id>980339</id><snippet>class example:
    def GET(self):
        print web.ctx.ip
</snippet></ROW><ROW><id>980446</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>980446</id><snippet>__init__.py</snippet></ROW><ROW><id>980446</id><snippet>.pth</snippet></ROW><ROW><id>981224</id><snippet>a = 1.23040000
print str(a).rstrip('0')
</snippet></ROW><ROW><id>981347</id><snippet>os.seteuid</snippet></ROW><ROW><id>981347</id><snippet>capabilities(7)</snippet></ROW><ROW><id>981387</id><snippet>s.write()</snippet></ROW><ROW><id>981387</id><snippet># The pipe behaves like a file object in Python.
process = Popen(cmd, shell=True, stdout=PIPE)
process_output = ""
while process.poll():
     process_output += process.stdout.read(256)
s.write(process_output)

# Better yet.
process = Popen(cmd, shell=true, stdout=PIPE)
stdout, stderr = process.communicate() # will read and wait for process to end.
s.write(stdout)
</snippet></ROW><ROW><id>981387</id><snippet># ... snip ...
import subprocess
con, addr = s.accept()
while True:
    datagram = con.recv(1024)
    if not datagram:
        break
    print "Rx Cmd:", datagram
    if settings.has_key(datagram):
        print "Launch:", settings[datagram]
        process = subprocess.Popen(settings[datagram]+" &amp;", shell=True, stdout=subprocess.PIPE)
        stdout, stderr = process.communicate()
        con.send(stdout)
    con.close()
s.close()
</snippet></ROW><ROW><id>981624</id><snippet>vars(x)</snippet></ROW><ROW><id>981624</id><snippet>x.__dict__</snippet></ROW><ROW><id>981624</id><snippet>dir(x)</snippet></ROW><ROW><id>981624</id><snippet>x</snippet></ROW><ROW><id>981624</id><snippet>class C(object):
    def m(self):
        print "m"


x=C()
x.m()
</snippet></ROW><ROW><id>981624</id><snippet>__dict__</snippet></ROW><ROW><id>981624</id><snippet>x.m()</snippet></ROW><ROW><id>981624</id><snippet>x.__dict__</snippet></ROW><ROW><id>981624</id><snippet>__dict__</snippet></ROW><ROW><id>981624</id><snippet>['__class__', '__delattr__', '__dict__', '__doc__', '__getattribute__',
'__hash__', '__init__', '__module__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__setattr__', '__str__', '__weakref__', 'm']
</snippet></ROW><ROW><id>981705</id><snippet>python myscript.py</snippet></ROW><ROW><id>981802</id><snippet>order_by</snippet></ROW><ROW><id>981802</id><snippet>Author.objects.order_by('first_name', 'last_name')
</snippet></ROW><ROW><id>981802</id><snippet>sorted(Author.objects.all(), key=lambda a: a.full_name)
</snippet></ROW><ROW><id>981997</id><snippet>mod = __import__("mod")
for klass in vars(mod):
    o =  getattr(mod, klass)
    if type(o) == type:
        print o
</snippet></ROW><ROW><id>982310</id><snippet>import base64
# Encode password
encoded_pw = base64.b64encode(raw_pw)

# Decode password
decoded_pw = base64.b64decode(encoded_pw)
</snippet></ROW><ROW><id>983525</id><snippet>import sys
import ctypes

def zerome(string):
    location = id(string) + 20
    size     = sys.getsizeof(string) - 20

    memset =  ctypes.cdll.msvcrt.memset
    # For Linux, use the following. Change the 6 to whatever it is on your computer.
    # memset =  ctypes.CDLL("libc.so.6").memset

    print "Clearing 0x%08x size %i bytes" % (location, size)

    memset(location, 0, size)
</snippet></ROW><ROW><id>983727</id><snippet>[0]*10</snippet></ROW><ROW><id>983727</id><snippet>dict</snippet></ROW><ROW><id>983727</id><snippet>[{}]*10</snippet></ROW><ROW><id>983727</id><snippet>dict</snippet></ROW><ROW><id>983727</id><snippet>[{} for i in range(10)]</snippet></ROW><ROW><id>983727</id><snippet>dict</snippet></ROW><ROW><id>983879</id><snippet>lists</snippet></ROW><ROW><id>983879</id><snippet>arrays</snippet></ROW><ROW><id>983879</id><snippet>dict</snippet></ROW><ROW><id>983879</id><snippet>&gt;&gt;&gt; json.dumps({'apple': 'cat', 'banana':'dog', 'pear':'fish'})
'{"pear": "fish", "apple": "cat", "banana": "dog"}'
</snippet></ROW><ROW><id>983971</id><snippet>threading</snippet></ROW><ROW><id>983971</id><snippet>multiprocessing</snippet></ROW><ROW><id>983971</id><snippet>Thread</snippet></ROW><ROW><id>983971</id><snippet>Pool.map</snippet></ROW><ROW><id>983971</id><snippet>from multiprocessing import Pool

def fetch_url(url):
    # Fetch the URL contents and save it anywhere you need and
    # return something meaningful (like filename or error code),
    # if you wish.
    ...

pool = Pool(processes=4)
result = pool.map(f, image_url_list)
</snippet></ROW><ROW><id>984145</id><snippet>if len(sys.argv) &lt; 2:
    sys.exit('Usage: %s database-name' % sys.argv[0])

if not os.path.exists(sys.argv[1]):
    sys.exit('ERROR: Database %s was not found!' % sys.argv[1])
</snippet></ROW><ROW><id>984276</id><snippet>flatpage</snippet></ROW><ROW><id>984276</id><snippet>from django.contrib.flatpages.views import flatpage
</snippet></ROW><ROW><id>984276</id><snippet>else:</snippet></ROW><ROW><id>984276</id><snippet>return flatpage(request, '/path/to/your/flatpage/')
</snippet></ROW><ROW><id>984276</id><snippet>return flatpage(request, request.path)
</snippet></ROW><ROW><id>984409</id><snippet>import urllib, urllib2

def steam_login(username,password):
    data = urllib.urlencode({
      'action': 'doLogin',
      'goto': '',
      'steamAccountName': username,
      'steamPassword': password,
    })
    request = urllib2.Request('https://steamcommunity.com/',data)
    cookie_handler = urllib2.HTTPCookieProcessor()
    opener = urllib2.build_opener(cookie_handler)
    response = opener.open(request)
    if not 200 &lt;= response.code &lt; 300:
        raise Exception("HTTP error: %d %s" % (response.code,response.msg))
    else:
        return cookie_handler.cookiejar
</snippet></ROW><ROW><id>984409</id><snippet>HTTPCookieProcessor</snippet></ROW><ROW><id>984409</id><snippet>HTTPCookieProcessor</snippet></ROW><ROW><id>984447</id><snippet>from datetime import datetime
from django.shortcuts import render_to_response

def my_view(request):
    ws_date_as_string = ... get the webservice date
    the_date = datetime.strptime(ws_date, "%Y-%m-%d %H:%M:%S+0000")
    return render_to_response('my_template.html', {'date':the_date})
</snippet></ROW><ROW><id>984661</id><snippet>get_db_prep_value</snippet></ROW><ROW><id>984661</id><snippet>pre_save</snippet></ROW><ROW><id>984661</id><snippet>pre_save</snippet></ROW><ROW><id>984661</id><snippet>class Table1(models.Model):
    f = models.DateTimeField(auto_now=True)
</snippet></ROW><ROW><id>984661</id><snippet>pre_save</snippet></ROW><ROW><id>984661</id><snippet>auto_now</snippet></ROW><ROW><id>984661</id><snippet>/django/db/models/fields/__init__.py</snippet></ROW><ROW><id>984661</id><snippet>def pre_save(self, model_instance, add):
    if self.auto_now or (self.auto_now_add and add):
        value = datetime.datetime.now()
        setattr(model_instance, self.attname, value)
        return value
    else:
        return super(DateField, self).pre_save(model_instance, add)
</snippet></ROW><ROW><id>984682</id><snippet>def send_message(addr, to, msg):
    ## Connect to host
    try:
        server = smtplib.SMTP(host) #can throw an exception
    except smtplib.socket.gaierror:
        return False

    ## Login
    try:
        server.login(username, password)
    except SMTPAuthenticationError:
        server.quit()
        return False

    ## Send message
    try:
        server.sendmail(addr, [to], msg.as_string())
        return True
    except Exception: # try to avoid catching Exception unless you have too
        return False
    finally:
        server.quit()
</snippet></ROW><ROW><id>984682</id><snippet>sender = MyMailer("username", "password") # the except SocketError/AuthError could go here
try:
    sender.message("addr..", ["to.."], "message...")
except SocketError:
    print "Couldn't connect to server"
except AuthError:
    print "Invalid username and/or password!"
else:
    print "Message sent!"
</snippet></ROW><ROW><id>984682</id><snippet>message()</snippet></ROW><ROW><id>984682</id><snippet>class ConnectionError(Exception): pass
class AuthError(Exception): pass
class SendError(Exception): pass

class MyMailer:
    def __init__(self, host, username, password):
        self.host = host
        self.username = username
        self.password = password

    def connect(self):
        try:
            self.server = smtp.SMTP(self.host)
        except smtplib.socket.gaierror:
            raise ConnectionError("Error connecting to %s" % (self.host))

    def auth(self):
        try:
            self.server.login(self.username, self.password)
        except SMTPAuthenticationError:
            raise AuthError("Invalid username (%s) and/or password" % (self.username))

    def message(self, addr, to, msg):
        try:
            server.sendmail(addr, [to], msg.as_string())
        except smtplib.something.senderror, errormsg:
            raise SendError("Couldn't send message: %s" % (errormsg))
        except smtp.socket.timeout:
            raise ConnectionError("Socket error while sending message")
</snippet></ROW><ROW><id>985028</id><snippet>import threading
import subprocess

class MyClass(threading.Thread):
    def __init__(self):
        self.stdout = None
        self.stderr = None
        threading.Thread.__init__(self)

    def run(self):
        p = subprocess.Popen('rsync -av /etc/passwd /tmp'.split(),
                             shell=False,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)

        self.stdout, self.stderr = p.communicate()

myclass = MyClass()
myclass.start()
myclass.join()
print myclass.stdout
</snippet></ROW><ROW><id>985045</id><snippet>self.data = map(lambda x: list(x), data)
</snippet></ROW><ROW><id>985045</id><snippet>self.data = map(list, data)
</snippet></ROW><ROW><id>985045</id><snippet>map</snippet></ROW><ROW><id>985045</id><snippet>lambda x: somecallable(x)</snippet></ROW><ROW><id>985045</id><snippet>somecallable</snippet></ROW><ROW><id>985166</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>985166</id><snippet>import win32api, win32con
win32api.SetErrorMode(win32con.SEM_FAILCRITICALERRORS |
                      win32con.SEM_NOOPENFILEERRORBOX)
</snippet></ROW><ROW><id>985176</id><snippet>.so</snippet></ROW><ROW><id>985176</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>985268</id><snippet>{% block mydebugonly %}
    {% if debug %}
    &lt;p&gt;Something that will only appear if the DEBUG setting is True.&lt;/p&gt;
    {% endif %}
{% endblock %}
</snippet></ROW><ROW><id>985296</id><snippet>columns = dict()
columnsTitles = []
rows = dict()
colIdxCounter = 1 # Start with 1 because the first col are ids 
rowIdxCounter = 1 # Start with 1 because the columns titles

for i in dataset:
    if not rows.has_key(i[0]):
        rows[i[0]] = rowIdxCounter
        rowIdxCounter += 1
    if not columns.has_key(i[1]):
        columns[i[1]] = colIdxCounter
        colIdxCounter += 1
        columnsTitles.append(i[1])

toRet = [columnsTitles]
for i in range(len(rows)):
    toAppend = []
    for j in range(colIdxCounter):
        toAppend.append("")
    toRet.append(toAppend)

for i in dataset:
    toRet[rows[i[0]]][columns[i[1]]] = i[2]

for i in toRet:
    print i
</snippet></ROW><ROW><id>985331</id><snippet>def comparator(lop, rop):
    def comp(i, j, k):
        if j &lt;= k:
            return lop(j, i) and rop(i,k)
        return lop(j, i) or rop(i,k)

    return comp

from operator import le, lt

inRange = comparator(le, lt)
inStrictRange = comparator(lt, lt)
inRange2 = comparator(lt, le)
</snippet></ROW><ROW><id>985369</id><snippet>&gt;&gt;&gt; pickle.dumps({1: 0, 9: 0}) == pickle.dumps({9: 0, 1: 0})
False
</snippet></ROW><ROW><id>985369</id><snippet>&gt;&gt;&gt; a = object()
&gt;&gt;&gt; b = object()
&gt;&gt;&gt; a == b
False
&gt;&gt;&gt; pickle.dumps(b) == pickle.dumps(a)
True
</snippet></ROW><ROW><id>985369</id><snippet>def hashablize(obj):
    """Convert a container hierarchy into one that can be hashed.

    Don't use this with recursive structures!
    Also, this won't be useful if you pass dictionaries with
    keys that don't have a total order.
    Actually, maybe you're best off not using this function at all."""
    try:
        hash(obj)
    except TypeError:
        if isinstance(obj, dict):
            return tuple((k, hashablize(v)) for (k, v) in sorted(obj.iteritems()))
        elif hasattr(obj, '__iter__'):
            return tuple(hashablize(o) for o in obj)
        else:
            raise TypeError("Can't hashablize object of type %r" % type(obj))
    else:
        return obj
</snippet></ROW><ROW><id>985508</id><snippet>for i in line:
    print i,
</snippet></ROW><ROW><id>985508</id><snippet>import codecs
f = codecs.open('in', 'r', 'utf8')
</snippet></ROW><ROW><id>985508</id><snippet>sys.stdout</snippet></ROW><ROW><id>985508</id><snippet>sys.stdout = codecs.getwriter('utf8')(sys.stdout)
</snippet></ROW><ROW><id>985510</id><snippet> 0  1  2  3  4
 5  6  7  8  9
10 11 12 13 14
15 16 17 18 19
20 21 22 23 24
25 26 27 28 29
30 31 32 33 34
35 36 37 38 39
</snippet></ROW><ROW><id>985510</id><snippet> # Compute which of the 8 characters the pixel falls in, 0..7:
 char = int(number / 40)

 # Compute which pixel column the pixel is in, 0..4:
 col = number % 5

 # Compute which pixel row the pixel is in, 0..7:
 row = int((number - char * 40) / 5)
</snippet></ROW><ROW><id>985510</id><snippet>int()</snippet></ROW><ROW><id>985517</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; print time.strftime("%a, %d %b %Y %H:%M:%S")
Sun, 23 Oct 2005 20:38:56
&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_TIME, "sv_SE") # swedish
'sv_SE'
&gt;&gt;&gt; print time.strftime("%a, %d %b %Y %H:%M:%S")
sön, 23 okt 2005 20:39:15
</snippet></ROW><ROW><id>986128</id><snippet>push bx
xor ax, ax
inc ax
cpuid
pop bx
retn
</snippet></ROW><ROW><id>986145</id><snippet>def try_to_change_list_contents(the_list):
    print 'got', the_list
    the_list.append('four')
    print 'changed to', the_list

outer_list = ['one', 'two', 'three']

print 'before, outer_list =', outer_list
try_to_change_list_contents(outer_list)
print 'after, outer_list =', outer_list
</snippet></ROW><ROW><id>986145</id><snippet>before, outer_list = ['one', 'two', 'three']
got ['one', 'two', 'three']
changed to ['one', 'two', 'three', 'four']
after, outer_list = ['one', 'two', 'three', 'four']
</snippet></ROW><ROW><id>986145</id><snippet>outer_list</snippet></ROW><ROW><id>986145</id><snippet>def try_to_change_list_reference(the_list):
    print 'got', the_list
    the_list = ['and', 'we', 'can', 'not', 'lie']
    print 'set to', the_list

outer_list = ['we', 'like', 'proper', 'English']

print 'before, outer_list =', outer_list
try_to_change_list_reference(outer_list)
print 'after, outer_list =', outer_list
</snippet></ROW><ROW><id>986145</id><snippet>before, outer_list = ['we', 'like', 'proper', 'English']
got ['we', 'like', 'proper', 'English']
set to ['and', 'we', 'can', 'not', 'lie']
after, outer_list = ['we', 'like', 'proper', 'English']
</snippet></ROW><ROW><id>986145</id><snippet>the_list</snippet></ROW><ROW><id>986145</id><snippet>the_list</snippet></ROW><ROW><id>986145</id><snippet>outer_list</snippet></ROW><ROW><id>986145</id><snippet>the_list</snippet></ROW><ROW><id>986145</id><snippet>outer_list</snippet></ROW><ROW><id>986145</id><snippet>def try_to_change_string_reference(the_string):
    print 'got', the_string
    the_string = 'In a kingdom by the sea'
    print 'set to', the_string

outer_string = 'It was many and many a year ago'

print 'before, outer_string =', outer_string
try_to_change_string_reference(outer_string)
print 'after, outer_string =', outer_string
</snippet></ROW><ROW><id>986145</id><snippet>before, outer_string = It was many and many a year ago
got It was many and many a year ago
set to In a kingdom by the sea
after, outer_string = It was many and many a year ago
</snippet></ROW><ROW><id>986145</id><snippet>the_string</snippet></ROW><ROW><id>986145</id><snippet>the_string</snippet></ROW><ROW><id>986145</id><snippet>outer_string</snippet></ROW><ROW><id>986145</id><snippet>the_string</snippet></ROW><ROW><id>986145</id><snippet>outer_string</snippet></ROW><ROW><id>986145</id><snippet>def return_a_whole_new_string(the_string):
    new_string = something_to_do_with_the_old_string(the_string)
    return new_string

# then you could call it like
my_string = return_a_whole_new_string(my_string)
</snippet></ROW><ROW><id>986145</id><snippet>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):
    new_string = something_to_do_with_the_old_string(stuff_to_change[0])
    stuff_to_change[0] = new_string

# then you could call it like
wrapper = [my_string]
use_a_wrapper_to_simulate_pass_by_reference(wrapper)

do_something_with(wrapper[0])
</snippet></ROW><ROW><id>986395</id><snippet>if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>986949</id><snippet>conn.send(str(i), exchange=exchange, destination='')
</snippet></ROW><ROW><id>986949</id><snippet>import stomp
import sys
from amqplib import client_0_8 as amqp
#read in the exchange name so I can set up multiple recievers for different exchanges to tset
exchange = sys.argv[1]
conn = amqp.Connection(host="localhost:5672", userid="username", password="password",
 virtual_host="/", insist=False)

chan = conn.channel()

chan.access_request('/', active=True, write=True, read=True)

#declare my exchange
chan.exchange_declare(exchange, 'topic')
#not passing a queue name means I get a new unique one back
qname,_,_ = chan.queue_declare()
#bind the queue to the exchange
chan.queue_bind(qname, exchange=exchange)

class MyListener(object):
    def on_error(self, headers, message):
        print 'recieved an error %s' % message

    def on_message(self, headers, message):
        print 'recieved a message %s' % message

conn = stomp.Connection([('0.0.0.0', 61613), ('127.0.0.1', 61613)], 'browser', 'browser')
conn.set_listener('', MyListener())
conn.start()
conn.connect(username="username", password="password")
headers = {}

#subscribe to the queue
conn.subscribe(destination=qname, ack='auto')

while True:
    pass
conn.disconnect()
</snippet></ROW><ROW><id>987139</id><snippet>&gt;&gt;&gt; from threading import Thread
&gt;&gt;&gt; class MyThread(Thread):
    def run(self):
    	try:
    		Thread.run(self)
    	except Exception as self.err:
    		pass # or raise
    	else:
    		self.err = None


&gt;&gt;&gt; mt = MyThread(target=divmod, args=(3, 2))
&gt;&gt;&gt; mt.start()
&gt;&gt;&gt; mt.join()
&gt;&gt;&gt; mt.err
&gt;&gt;&gt; mt = MyThread(target=divmod, args=(3, 0))
&gt;&gt;&gt; mt.start()
&gt;&gt;&gt; mt.join()
&gt;&gt;&gt; mt.err
ZeroDivisionError('integer division or modulo by zero',)
</snippet></ROW><ROW><id>987268</id><snippet>if kwargs.has_key('bases_queryset'):
    bases_queryset = kwargs['bases_queryset']
    del kwargs['bases_queryset']
</snippet></ROW><ROW><id>987501</id><snippet>from suds.sax.element import Element
#create the nodes
q = Element('query')
where=Element('Where')
eq=Element('Eq')
fieldref=Element('FieldRef')
fieldref.set('Name', '_ows_ID')
value=Element('Value')
value.setText('66')

#append them
eq.append(fieldref)
eq.append(value)
where.append(eq)
q.append(where)
</snippet></ROW><ROW><id>987501</id><snippet>&lt;query&gt;   &lt;name&gt;Elmer Fudd&lt;/name&gt;</snippet></ROW><ROW><id>987501</id><snippet>&lt;age unit="years"&gt;33&lt;/age&gt;</snippet></ROW><ROW><id>987501</id><snippet>&lt;job&gt;Wabbit Hunter&lt;/job&gt; &lt;/query&gt;</snippet></ROW><ROW><id>987501</id><snippet>from suds.sax.element import Element
query = Element('query')
name = Element('name').setText('Elmer Fudd')
age = Element('age').setText('33')
age.set('units', 'years')
job = Element('job').setText('Wabbit Hunter')
query.append(name)
query.append(age)
query.append(job)
client.service.runQuery(query)
</snippet></ROW><ROW><id>988161</id><snippet># Your for loop should be rewritten as follows:
for index in xrange(len(a)):
    a[index] += 1
</snippet></ROW><ROW><id>988161</id><snippet>item</snippet></ROW><ROW><id>988161</id><snippet>a</snippet></ROW><ROW><id>988161</id><snippet>&gt;&gt;&gt; a = [[1], [2], [3], [4]]
&gt;&gt;&gt; for item in a: item += [1]
&gt;&gt;&gt; a
[[1,1], [2,1], [3,1], [4,1]]
</snippet></ROW><ROW><id>988251</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>988251</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("{'muffin' : 'lolz', 'foo' : 'kitty'}")
{'muffin': 'lolz', 'foo': 'kitty'}
</snippet></ROW><ROW><id>988251</id><snippet>eval</snippet></ROW><ROW><id>988251</id><snippet>&gt;&gt;&gt; eval("shutil.rmtree('mongo')")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 208, in rmtree
    onerror(os.listdir, path, sys.exc_info())
  File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 206, in rmtree
    names = os.listdir(path)
OSError: [Errno 2] No such file or directory: 'mongo'
&gt;&gt;&gt; ast.literal_eval("shutil.rmtree('mongo')")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 68, in literal_eval
    return _convert(node_or_string)
  File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
</snippet></ROW><ROW><id>988339</id><snippet>urllib2</snippet></ROW><ROW><id>988339</id><snippet>urllib</snippet></ROW><ROW><id>988339</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; resp = urllib2.urlopen("http://google.com/abc.jpg")
Traceback (most recent call last):
&lt;&lt;MANY LINES SKIPPED&gt;&gt;
urllib2.HTTPError: HTTP Error 404: Not Found
</snippet></ROW><ROW><id>988339</id><snippet>resp</snippet></ROW><ROW><id>988339</id><snippet>HTTPResponse</snippet></ROW><ROW><id>988339</id><snippet>&gt;&gt;&gt; resp = urllib2.urlopen("http://google.com/")
&gt;&gt;&gt; resp.code
200
&gt;&gt;&gt; resp.headers["content-type"]
'text/html; charset=windows-1251'
&gt;&gt;&gt; resp.read()
"&lt;&lt;ACTUAL HTML&gt;&gt;"
</snippet></ROW><ROW><id>989179</id><snippet>DATA = ['Hello', 'Python', 'World']
SEARCH_STRING = 'n'
print [s for s in DATA if SEARCH_STRING in s]
# Prints ['Python']
</snippet></ROW><ROW><id>989179</id><snippet>DATA</snippet></ROW><ROW><id>989179</id><snippet>SEARCH_STRING</snippet></ROW><ROW><id>989266</id><snippet>OSError</snippet></ROW><ROW><id>989266</id><snippet>error</snippet></ROW><ROW><id>989266</id><snippet>error</snippet></ROW><ROW><id>989266</id><snippet>OSError</snippet></ROW><ROW><id>989674</id><snippet>from calendar import Calendar, SUNDAY

cal = Calendar(SUNDAY)
month_dates = list(cal.itermonthdates(year, month))

month_start = month_dates[0]
month_end = month_dates[-1]
</snippet></ROW><ROW><id>989843</id><snippet>paramstyle</snippet></ROW><ROW><id>989843</id><snippet>pyformat</snippet></ROW><ROW><id>989843</id><snippet>%(the_id)s</snippet></ROW><ROW><id>989843</id><snippet>h</snippet></ROW><ROW><id>989920</id><snippet>from urllib2 import urlopen
from BeautifulSoup import BeautifulSoup
import sys

URL = "http://hiscore.runescape.com/hiscorepersonal.ws?user1=" + sys.argv[1]

# Grab page html, create BeatifulSoup object
html = urlopen(URL).read()
soup = BeautifulSoup(html)

# Grab the &lt;table id="mini_player"&gt; element
scores = soup.find('table', {'id':'mini_player'})

# Get a list of all the &lt;tr&gt;s in the table, skip the header row
rows = scores.findAll('tr')[1:]

# Helper function to return concatenation of all character data in an element
def parse_string(el):
   text = ''.join(el.findAll(text=True))
   return text.strip()

for row in rows:

   # Get all the text from the &lt;td&gt;s
   data = map(parse_string, row.findAll('td'))

   # Skip the first td, which is an image
   data = data[1:]

   # Do something with the data...
   print data
</snippet></ROW><ROW><id>989920</id><snippet>&gt; test.py bigdrizzle13
[u'Overall', u'87,417', u'1,784', u'78,772,017']
[u'Attack', u'140,903', u'88', u'4,509,031']
[u'Defence', u'123,057', u'85', u'3,449,751']
[u'Strength', u'325,883', u'84', u'3,057,628']
[u'Hitpoints', u'245,982', u'85', u'3,571,420']
[u'Ranged', u'583,645', u'71', u'856,428']
[u'Prayer', u'227,853', u'62', u'357,847']
[u'Magic', u'368,201', u'75', u'1,264,042']
[u'Cooking', u'34,754', u'99', u'13,192,745']
[u'Woodcutting', u'50,080', u'93', u'7,751,265']
[u'Fletching', u'53,269', u'99', u'13,051,939']
[u'Fishing', u'5,195', u'99', u'14,512,569']
[u'Firemaking', u'46,398', u'88', u'4,677,933']
[u'Crafting', u'328,268', u'62', u'343,143']
[u'Smithing', u'39,898', u'77', u'1,561,493']
[u'Mining', u'31,584', u'85', u'3,331,051']
[u'Herblore', u'247,149', u'52', u'135,215']
[u'Agility', u'225,869', u'60', u'276,753']
[u'Thieving', u'292,638', u'56', u'193,037']
[u'Slayer', u'113,245', u'73', u'998,607']
[u'Farming', u'204,608', u'51', u'115,507']
[u'Runecraft', u'38,369', u'71', u'880,789']
[u'Hunter', u'384,920', u'53', u'139,030']
[u'Construction', u'232,379', u'52', u'125,708']
[u'Summoning', u'87,236', u'64', u'419,086']
</snippet></ROW><ROW><id>990022</id><snippet>inspect</snippet></ROW><ROW><id>990022</id><snippet>inspect.getargspec(func)</snippet></ROW><ROW><id>990022</id><snippet>args, varargs, varkw, defaults</snippet></ROW><ROW><id>990022</id><snippet>len(args)</snippet></ROW><ROW><id>990022</id><snippet>varargs</snippet></ROW><ROW><id>990022</id><snippet>varkw</snippet></ROW><ROW><id>990022</id><snippet>None</snippet></ROW><ROW><id>990022</id><snippet>defaults</snippet></ROW><ROW><id>990022</id><snippet>None</snippet></ROW><ROW><id>990274</id><snippet>vtkMassProperties</snippet></ROW><ROW><id>990274</id><snippet>vol[2] += (area * (double)u[2] * (double)zavg); // 5.0.4
vol[2] += (area * u[2] * zavg); // 5.4.2
</snippet></ROW><ROW><id>990274</id><snippet>kxyz[0] = (munc[0] + (wxyz/3.0) + ((wxy+wxz)/2.0)) /(double)(numCells); // 5.0.4
kxyz[0] = (munc[0] + (wxyz/3.0) + ((wxy+wxz)/2.0)) /numCells; // 5.4.2
</snippet></ROW><ROW><id>990274</id><snippet>vtkMarchingCubes</snippet></ROW><ROW><id>990274</id><snippet>self-&gt;UpdateProgress ((double) k / ((double) dims[2] - 1)); // 5.0.4
self-&gt;UpdateProgress (k / static_cast&lt;double&gt;(dims[2] - 1)); // 5.4.2
</snippet></ROW><ROW><id>990274</id><snippet>estimatedSize = (int) pow ((double) (dims[0] * dims[1] * dims[2]), .75); // 5.0.4
estimatedSize = static_cast&lt;int&gt;(
     	     pow(static_cast&lt;double&gt;(dims[0]*dims[1]*dims[2]),0.75)); // 5.4.2
</snippet></ROW><ROW><id>990274</id><snippet>vtkImageThreshold</snippet></ROW><ROW><id>990274</id><snippet>lowerThreshold = (IT) inData-&gt;GetScalarTypeMin(); // 5.0.4
lowerThreshold = static_cast&lt;IT&gt;(inData-&gt;GetScalarTypeMin()); // 5.4.2
</snippet></ROW><ROW><id>990274</id><snippet>vtkTIFFReader</snippet></ROW><ROW><id>990274</id><snippet>maxthres=81</snippet></ROW><ROW><id>990630</id><snippet>doctest.OutputChecker.check_output()</snippet></ROW><ROW><id>990779</id><snippet>$ deactivate
</snippet></ROW><ROW><id>990933</id><snippet>config = ConfigParser()
fp = open('connections.cfg')
config.readfp(fp)
sections = config.sections()

fp.close()
</snippet></ROW><ROW><id>990940</id><snippet>s = "hello, world"
s = s[::-1]
print s  # prints "dlrow ,olleh"
</snippet></ROW><ROW><id>990940</id><snippet>x = 314159
x = int(str(x)[::-1])
print x  # prints 951413
</snippet></ROW><ROW><id>991034</id><snippet>%</snippet></ROW><ROW><id>991262</id><snippet>repo</snippet></ROW><ROW><id>991262</id><snippet>localrepo</snippet></ROW><ROW><id>991262</id><snippet>repo.__class__</snippet></ROW><ROW><id>991262</id><snippet>repo</snippet></ROW><ROW><id>991262</id><snippet>def reposetup(ui, repo):
    # ...

    class bookmark_repo(repo.__class__): 
        def rollback(self):
            if os.path.exists(self.join('undo.bookmarks')):
                util.rename(self.join('undo.bookmarks'), self.join('bookmarks'))
            return super(bookmark_repo, self).rollback() 

        # ...

    repo.__class__ = bookmark_repo
</snippet></ROW><ROW><id>991262</id><snippet>reposetup</snippet></ROW><ROW><id>991262</id><snippet>ui</snippet></ROW><ROW><id>991262</id><snippet>repo</snippet></ROW><ROW><id>991262</id><snippet>repo</snippet></ROW><ROW><id>991262</id><snippet>localrepo</snippet></ROW><ROW><id>991262</id><snippet>repo.__class__</snippet></ROW><ROW><id>991262</id><snippet>foo_repo</snippet></ROW><ROW><id>991262</id><snippet>repo.__class__</snippet></ROW><ROW><id>991262</id><snippet>foo_repo</snippet></ROW><ROW><id>991262</id><snippet>localrepo</snippet></ROW><ROW><id>991301</id><snippet>a=(0.5 + 2.5*(k %2))*k + k % 2
</snippet></ROW><ROW><id>991301</id><snippet>(0.5 + 2.5*(k %2))*k</snippet></ROW><ROW><id>991301</id><snippet>a=(1 + 5*(k %2))*k//2 + k % 2
</snippet></ROW><ROW><id>991379</id><snippet>chars = "abcdefghijklmnopqrstuvwxyz"
check_string = "i am checking this string to see how many times each character appears"

for char in chars:
  count = check_string.count(char)
  if count &gt; 1:
    print char, count
</snippet></ROW><ROW><id>991379</id><snippet>count = {}
for s in check_string:
  if count.has_key(s):
    count[s] += 1
  else:
    count[s] = 1

for key in count:
  if count[key] &gt; 1:
    print key, count[key]
</snippet></ROW><ROW><id>991380</id><snippet>import re
</snippet></ROW><ROW><id>991380</id><snippet>try</snippet></ROW><ROW><id>991380</id><snippet>except</snippet></ROW><ROW><id>991791</id><snippet>sub[random.randint(0,9)] = 1
</snippet></ROW><ROW><id>991791</id><snippet>sub[first] = 1
sub[second] = 1
</snippet></ROW><ROW><id>991791</id><snippet>second</snippet></ROW><ROW><id>991791</id><snippet>first</snippet></ROW><ROW><id>991791</id><snippet>first</snippet></ROW><ROW><id>991791</id><snippet>second</snippet></ROW><ROW><id>991980</id><snippet>el.findAll(text=True)</snippet></ROW><ROW><id>991980</id><snippet>&lt;b&gt;hello&lt;/b&gt;</snippet></ROW><ROW><id>991980</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>991980</id><snippet>&lt;/b&gt;</snippet></ROW><ROW><id>991980</id><snippet>findAll</snippet></ROW><ROW><id>991985</id><snippet>some_dict = { 
    1: "spam",
    2: "eggs",
    3: "foo",
    4: "bar",
    8: "anything",
    9: "nothing" }
</snippet></ROW><ROW><id>992141</id><snippet>multiprocessing</snippet></ROW><ROW><id>992141</id><snippet>threading</snippet></ROW><ROW><id>992199</id><snippet>qt4reactor</snippet></ROW><ROW><id>992243</id><snippet>{% for photos in gallery.photo_set|slice:":3" %}
</snippet></ROW><ROW><id>992291</id><snippet>ResultSet</snippet></ROW><ROW><id>992291</id><snippet>list</snippet></ROW><ROW><id>992291</id><snippet>get_rows</snippet></ROW><ROW><id>992291</id><snippet>ResultSet</snippet></ROW><ROW><id>992291</id><snippet>ResultSet</snippet></ROW><ROW><id>992291</id><snippet>list</snippet></ROW><ROW><id>992291</id><snippet>get_rows</snippet></ROW><ROW><id>992291</id><snippet>ResultSet</snippet></ROW><ROW><id>992291</id><snippet>findAll</snippet></ROW><ROW><id>992291</id><snippet>get_rows</snippet></ROW><ROW><id>992291</id><snippet>findAll</snippet></ROW><ROW><id>992291</id><snippet>create</snippet></ROW><ROW><id>992291</id><snippet>for row in get_rows:
    text = ''.join(row.findAll(text=True))
    data = text.strip()
    print data
</snippet></ROW><ROW><id>992314</id><snippet>&gt;&gt;&gt; name
'Christensen Sk\xf6ld'
&gt;&gt;&gt; unicode(name, 'latin-1')
u'Christensen Sk\xf6ld'
</snippet></ROW><ROW><id>992314</id><snippet>&gt;&gt;&gt; name.decode('latin-1')
u'Christensen Sk\xf6ld'
</snippet></ROW><ROW><id>992314</id><snippet>&gt;&gt;&gt; print name.decode('latin-1')
Christensen Sköld
</snippet></ROW><ROW><id>992314</id><snippet>&gt;&gt;&gt; name.decode('latin-1').encode('utf-8')
'Christensen Sk\xc3\xb6ld'
</snippet></ROW><ROW><id>993283</id><snippet>1/2 == 0
</snippet></ROW><ROW><id>993283</id><snippet>1.0/2
</snippet></ROW><ROW><id>993283</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>993367</id><snippet>base = datetime.datetime.today()
dateList = [ base - datetime.timedelta(days=x) for x in range(0,numdays) ]
</snippet></ROW><ROW><id>993947</id><snippet>class ControlPanel(wx.Panel):
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        self.Bind(wx.EVT_SIZE, self.OnResize)

    def OnResize(self, *args, **kwargs):
        print "Resizing"
</snippet></ROW><ROW><id>994218</id><snippet>&gt;&gt;&gt; number = re.search(" ([0-9]) ", "test test2 test_ 2 333")
&gt;&gt;&gt; print number.groups()
('2',)
</snippet></ROW><ROW><id>994218</id><snippet>\d</snippet></ROW><ROW><id>994218</id><snippet>&gt;&gt;&gt; number = re.search(r" (\d) ", "test test2 test_ 2 333")
&gt;&gt;&gt; print number.groups()
('2',)
</snippet></ROW><ROW><id>994311</id><snippet>configure</snippet></ROW><ROW><id>994482</id><snippet>NotImplementedError</snippet></ROW><ROW><id>994755</id><snippet>while</snippet></ROW><ROW><id>994755</id><snippet>False</snippet></ROW><ROW><id>994755</id><snippet>while</snippet></ROW><ROW><id>994755</id><snippet>while</snippet></ROW><ROW><id>994755</id><snippet>break</snippet></ROW><ROW><id>994755</id><snippet>while True:
    if (some_condition):
        break
    else:
        # Do stuff...
</snippet></ROW><ROW><id>994760</id><snippet>target_link_libraries(dbookpy dbook)
</snippet></ROW><ROW><id>994760</id><snippet>ADD_LIBRARY(dbookpy dbookpy)</snippet></ROW><ROW><id>994760</id><snippet>IMPORTED_LINK_INTERFACE_LIBRARIES</snippet></ROW><ROW><id>994760</id><snippet> Lists libraries whose interface is included when an IMPORTED library target is
 linked to another target.  The libraries will be included on the link line for
 the target.  Unlike the LINK_INTERFACE_LIBRARIES property, this property
 applies to all imported target types, including STATIC libraries.  This
 property is ignored for non-imported targets.
</snippet></ROW><ROW><id>994760</id><snippet> add_library(dbook SHARED IMPORTED)
</snippet></ROW><ROW><id>994760</id><snippet>find_library()</snippet></ROW><ROW><id>994760</id><snippet>find_library(DBOOK_LIBRARY dbook REQUIRED)
target_link_libraries(dbookpy ${DBOOK_LIBRARY})
</snippet></ROW><ROW><id>994805</id><snippet>#!/usr/bin/perl -w

use strict;

open FILE, "&lt;header.h" or die $!;
my @file = &lt;FILE&gt;;
close FILE or die $!;

my $in_block = 0;
my $regex = 'Some_Idx\[\]';
my $byte_line = '';
my @byte_entries;
foreach my $line (@file) {
    chomp $line;

    if ( $line =~ /$regex.*\{(.*)/ ) {
    	$in_block = 1;
    	my @digits = @{ match_digits($1) };
    	push @digits, @byte_entries;
    	next;
    }

    if ( $in_block ) {
    	my @digits = @{ match_digits($line) };
    	push @byte_entries, @digits;
    }

    if ( $line =~ /\}/ ) {
    	$in_block = 0;
    }
}

print "const BYTE Some_Idx_Mod_mul_2[] = {\n";
print join ",", map { $_ * 2 } @byte_entries;
print "};\n";

sub match_digits {
    my $text = shift;
    my @digits;
    while ( $text =~ /(\d+),*/g ) {
    	push @digits, $1;
    }

    return \@digits;
}
</snippet></ROW><ROW><id>994805</id><snippet>  use GCC::TranslationUnit;

  # echo '#include &lt;stdio.h&gt;' &gt; stdio.c
  # gcc -fdump-translation-unit -c stdio.c
  $node = GCC::TranslationUnit::Parser-&gt;parsefile('stdio.c.tu')-&gt;root;

  # list every function/variable name
  while($node) {
    if($node-&gt;isa('GCC::Node::function_decl') or
       $node-&gt;isa('GCC::Node::var_decl')) {
      printf "%s declared in %s\n",
        $node-&gt;name-&gt;identifier, $node-&gt;source;
    }
  } continue {
    $node = $node-&gt;chain;
  }
</snippet></ROW><ROW><id>994919</id><snippet>from subprocess import Popen, PIPE

(stdout, stderr) = Popen(["cat","foo.txt"], stdout=PIPE).communicate()
print stdout
</snippet></ROW><ROW><id>995238</id><snippet>errs = dict((f.auto_id, f.errors) for f in form if f.errors)
</snippet></ROW><ROW><id>995384</id><snippet>long max_range[]</snippet></ROW><ROW><id>995384</id><snippet>long</snippet></ROW><ROW><id>995384</id><snippet>long</snippet></ROW><ROW><id>995384</id><snippet>c_long()</snippet></ROW><ROW><id>995384</id><snippet>max_range</snippet></ROW><ROW><id>995384</id><snippet>0x00000000</snippet></ROW><ROW><id>995384</id><snippet>long</snippet></ROW><ROW><id>995384</id><snippet>max_range</snippet></ROW><ROW><id>995384</id><snippet>array_size = 3
ThreeLongsArrayType = c_long * array_size
</snippet></ROW><ROW><id>995384</id><snippet>array = ThreeLongsArrayType()
</snippet></ROW><ROW><id>995992</id><snippet>sites_list = Site.objects.filter(worker=worker)

for site in sites_list:
    new_sites_list = Site.objects.filter(name=site.name).filter(something else)
</snippet></ROW><ROW><id>996021</id><snippet>os.path.join(path, tfile)</snippet></ROW><ROW><id>996461</id><snippet>import pyparsing
string = pyparsing.CharsNotIn("{} \t\r\n")
group = pyparsing.Forward()
group &lt;&lt; pyparsing.Group(pyparsing.Literal("{").suppress() + 
                         pyparsing.ZeroOrMore(group) + 
                         pyparsing.Literal("}").suppress()) 
        | string

toplevel = pyparsing.OneOrMore(group)
</snippet></ROW><ROW><id>996461</id><snippet>&gt;&gt;&gt; toplevel.parseString(text)
['protocol', 'sample_thread', [['AUTOSTART', '0'], ['BITMAP', 'thread.gif'], 
['COORDS', ['0', '0']], ['DATAFORMAT', [['TYPE', 'hl7'], ['PREPROCS', 
[['ARGS', [[]]], ['PROCS', 'sample_proc']]]]]]]
</snippet></ROW><ROW><id>996613</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile(r"(\d{0,4}[1-9])0*$")
</snippet></ROW><ROW><id>996613</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile(r"^\d*?(\d{0,4}[1-9])0*$")
</snippet></ROW><ROW><id>996613</id><snippet>\d</snippet></ROW><ROW><id>996613</id><snippet>{0,4}</snippet></ROW><ROW><id>996613</id><snippet>+</snippet></ROW><ROW><id>996613</id><snippet>\d</snippet></ROW><ROW><id>996667</id><snippet>setup(service=["webserver.py"])
</snippet></ROW><ROW><id>997012</id><snippet>&gt;&gt;&gt; int('ffffffff',16)
4294967295L
</snippet></ROW><ROW><id>997012</id><snippet>subkey = int(hexkey[pos:pos+8], 16)
</snippet></ROW><ROW><id>997012</id><snippet>0xffffffff</snippet></ROW><ROW><id>997012</id><snippet>subkeys = []
while key:
    subkeys.append(key &amp; 0xffffffff)
    key &gt;&gt;= 32

if not subkeys: subkeys = [0] # Handle 0 case
subkeys.reverse() # Use same order as before (BUT SEE BELOW)
</snippet></ROW><ROW><id>997012</id><snippet>0x123456789</snippet></ROW><ROW><id>997012</id><snippet>0x12345678</snippet></ROW><ROW><id>997012</id><snippet>0x9</snippet></ROW><ROW><id>997012</id><snippet>0x00000001</snippet></ROW><ROW><id>997012</id><snippet>0x23456789</snippet></ROW><ROW><id>997467</id><snippet>import sqlalchemy
from sqlalchemy import Column, Table, create_engine, MetaData, Integer
from sqlalchemy import func, select
from sqlalchemy.pool import StaticPool
from random import randrange
import numpy
import sqlite3

class NumpyVarAggregate(object):
  def __init__(self):
    self.values = []
  def step(self, value):
    self.values.append(value)
  def finalize(self):
    return numpy.array(self.values).var()

def sqlite_memory_engine_creator():
    con = sqlite3.connect(':memory:')
    con.create_aggregate("np_var", 1, NumpyVarAggregate)
    return con

e = create_engine('sqlite://', echo=True, poolclass=StaticPool,
                  creator=sqlite_memory_engine_creator)
m = MetaData(bind=e)
t = Table('mytable', m, 
            Column('id', Integer, primary_key=True),
            Column('number', Integer)
          )
m.create_all()
</snippet></ROW><ROW><id>997467</id><snippet># insert 30 random-valued rows
t.insert().execute([{'number': randrange(100)} for x in xrange(30)])

for row in select([func.avg(t.c.number), func.np_var(t.c.number)]).execute():
    print 'RESULT ROW: ', row
</snippet></ROW><ROW><id>997467</id><snippet>2009-06-15 14:55:34,171 INFO sqlalchemy.engine.base.Engine.0x...d20c PRAGMA 
table_info("mytable")
2009-06-15 14:55:34,174 INFO sqlalchemy.engine.base.Engine.0x...d20c ()
2009-06-15 14:55:34,175 INFO sqlalchemy.engine.base.Engine.0x...d20c 
CREATE TABLE mytable (
    id INTEGER NOT NULL, 
    number INTEGER, 
    PRIMARY KEY (id)
)
2009-06-15 14:55:34,175 INFO sqlalchemy.engine.base.Engine.0x...d20c ()
2009-06-15 14:55:34,176 INFO sqlalchemy.engine.base.Engine.0x...d20c COMMIT
2009-06-15 14:55:34,177 INFO sqlalchemy.engine.base.Engine.0x...d20c INSERT
INTO mytable (number) VALUES (?)
2009-06-15 14:55:34,177 INFO sqlalchemy.engine.base.Engine.0x...d20c [[98], 
[94], [7], [1], [79], [77], [51], [28], [85], [26], [34], [68], [15], [43], 
[52], [97], [64], [82], [11], [71], [27], [75], [60], [85], [42], [40], 
[76], [12], [81], [69]]
2009-06-15 14:55:34,178 INFO sqlalchemy.engine.base.Engine.0x...d20c COMMIT
2009-06-15 14:55:34,180 INFO sqlalchemy.engine.base.Engine.0x...d20c SELECT
avg(mytable.number) AS avg_1, np_var(mytable.number) AS np_var_1 FROM mytable
2009-06-15 14:55:34,180 INFO sqlalchemy.engine.base.Engine.0x...d20c []
RESULT ROW: (55.0, 831.0)
</snippet></ROW><ROW><id>997807</id><snippet>%s</snippet></ROW><ROW><id>997807</id><snippet>name = raw_input("who are you?")
print "hello %s" % (name,)
</snippet></ROW><ROW><id>997807</id><snippet>%s</snippet></ROW><ROW><id>997807</id><snippet>%s</snippet></ROW><ROW><id>997807</id><snippet>%</snippet></ROW><ROW><id>998344</id><snippet>sys.argv[1]
</snippet></ROW><ROW><id>998344</id><snippet>range</snippet></ROW><ROW><id>998344</id><snippet>for i in range(int(sys.argv[1])):
</snippet></ROW><ROW><id>998598</id><snippet>ordered_attributes</snippet></ROW><ROW><id>998598</id><snippet>True</snippet></ROW><ROW><id>998743</id><snippet>from multiprocessing import Process

if __name__ == '__main__':
    print "tic"
    Process(target=longcalc).start()
    print "toc"
    Process(target=longtime).start()
    print "tic"
</snippet></ROW><ROW><id>998743</id><snippet>"pickle.PicklingError: Can't pickle &lt;type 'PySwigObject'&gt;: it's not found as __builtin__.PySwigObject"</snippet></ROW><ROW><id>998743</id><snippet>multiprocessing</snippet></ROW><ROW><id>998743</id><snippet>copy_reg module</snippet></ROW><ROW><id>998743</id><snippet>__main__</snippet></ROW><ROW><id>998933</id><snippet>urls.py</snippet></ROW><ROW><id>998933</id><snippet>mecore.views.index</snippet></ROW><ROW><id>998933</id><snippet>include('mecore.views')</snippet></ROW><ROW><id>998933</id><snippet>from django.conf.urls.defaults import *

# Uncomment the next two lines to enable the admin:
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    # Example:
    # (r'^****/', include('****.foo.urls')),

    # Uncomment the admin/doc line below and add 'django.contrib.admindocs' 
    # to INSTALLED_APPS to enable admin documentation:
    # (r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    (r'^admin/', include(admin.site.urls)),
    (r'^test/', 'mecore.views.test'),
    (r'^', 'mecore.views.index')
)
</snippet></ROW><ROW><id>999048</id><snippet>
</snippet></ROW><ROW><id>999048</id><snippet>&#16;</snippet></ROW><ROW><id>999048</id><snippet>Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
</snippet></ROW><ROW><id>999174</id><snippet>from PyKDE4.kdeui import *
icon = KIcon("*The Icon Name*")
</snippet></ROW><ROW><id>999174</id><snippet>from PyQt4 import QtGui
from gtk import icon_theme_get_default

iconTheme = icon_theme_get_default()
iconInfo = iconTheme.lookup_icon("*The Icon Name*", *Int of the icon size*, 0)
icon = QtGui.QIcon(iconInfo.get_filename())
</snippet></ROW><ROW><id>999278</id><snippet>def select_rows(to_select):
    if type(to_select) is not list: to_select = [ to_select ]

    for row in range(0, table.numRows()):
        if _table.item(row, 1).text() in to_select:
            table.selectRow(row)
</snippet></ROW><ROW><id>999278</id><snippet>def select_rows(to_select):
    if type(to_select) is list: to_select = set( to_select )
    elif type(to_select) is not set: to_select = set( [to_select] )

    for row in range(0, table.numRows()):
        if _table.item(row, 1).text() in to_select:
            table.selectRow(row)
</snippet></ROW><ROW><id>999485</id><snippet>xmlFailed.toxml()</snippet></ROW><ROW><id>1000425</id><snippet>class PyLogger:

  def __init__(self, source):
    self.file_handle = open('Python_Log.txt', 'a')
    self.source=source
    self.buf = []

  def write(self, data):
    self.buf.append(data)
    if data.endswith('\n'):
      self.file_handle = open('Python_Log.txt', 'a')
      self.file_handle.write('\t' * indent_level)
      self.file_handle.write(self.source + "::" + ''.join(self.buf))
      self.file_handle.close()
      self.buf = []

  def __del__(self):
    if self.buf != []:
      self.file_handle = open('Python_Log.txt', 'a')
      self.file_handle.write('\t' * indent_level)
      self.file_handle.write(self.source + "::" + ''.join(self.buf) + '\n')
      self.file_handle.close()      
    self.file_handle.close()

import sys
sys.stdout = PyLogger('stdout')
sys.stderr = PyLogger('stderr')
</snippet></ROW><ROW><id>1000519</id><snippet>return</snippet></ROW><ROW><id>1000519</id><snippet>list()</snippet></ROW><ROW><id>1000519</id><snippet>list_()</snippet></ROW><ROW><id>1000519</id><snippet>import re
value='   r.dushaynth@gmail.com, dash@ben,,  , abc@ac.com.edu    '
value = value.lower()

#value = list(set(re.split('^\s*|\s*,+\s*|\s*$', value)))
#if (value[0] == ''):
#    value.remove('')

value = set(re.findall(r'[\w\d\.\-_]+@[\w\d\.\-_]+', value))

print value
</snippet></ROW><ROW><id>1000519</id><snippet>re.findall()</snippet></ROW><ROW><id>1000519</id><snippet>list</snippet></ROW><ROW><id>1000968</id><snippet>python myscript.py
</snippet></ROW><ROW><id>1000968</id><snippet>C:\PYTHON26</snippet></ROW><ROW><id>1000968</id><snippet>raw_input()
</snippet></ROW><ROW><id>1000968</id><snippet>ENTER</snippet></ROW><ROW><id>1000968</id><snippet>python -i myscript.py</snippet></ROW><ROW><id>1001092</id><snippet>&lt;img src="someScript.php?param1=xyz"&gt;
</snippet></ROW><ROW><id>1001092</id><snippet>someScript.php?param1=xyz</snippet></ROW><ROW><id>1001092</id><snippet>from wsgiref.simple_server import make_server

def serveImage(environ, start_response):
    status = '200 OK'
    headers = [('Content-type', 'image/png')]
    start_response(status, headers)

    return open("about.png", "rb").read()

httpd = make_server('', 8000, serveImage)
httpd.serve_forever()
</snippet></ROW><ROW><id>1001092</id><snippet>img</snippet></ROW><ROW><id>1001587</id><snippet>from glob import iglob
import shutil
import os

PATH = r'C:\music'

destination = open('everything.mp3', 'wb')
for filename in iglob(os.path.join(PATH, '*.mp3')):
    shutil.copyfileobj(open(filename, 'rb'), destination)
destination.close()
</snippet></ROW><ROW><id>1001587</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>1001587</id><snippet>iglob(...)</snippet></ROW><ROW><id>1001625</id><snippet>def decorated_file(f, key):
    for line in f: 
        yield (key(line), line)

filenames = ['file1.txt','file2.txt','file3.txt']
files = map(open, filenames)
outfile = open('merged.txt')

for line in heapq.merge(*[decorated_file(f, keyfunc) for f in files]):
    outfile.write(line[1])
</snippet></ROW><ROW><id>1001625</id><snippet>from heapq26 import merge</snippet></ROW><ROW><id>1001658</id><snippet>splitted_line = line.rstrip("\n").split(";")
</snippet></ROW><ROW><id>1002018</id><snippet>def __insert_values(self, values):
    cursor = self.connection.cursor()
    cursor.executemany("""
        insert into `values` (ensg, value, sampleid)
        values (%s, %s, %s)""", values)
    cursor.close()
</snippet></ROW><ROW><id>1003253</id><snippet>from __future__ import with_statement
try:
    import cPickle as pickle
except ImportError:
    import pickle


class cached(object):
    """Decorator/context manager for caching function call results.
    All results are cached in one dictionary that is shared by all cached
    functions.

    To use this as a decorator:
        @cached
        def function(...):
            ...

    The results returned by a decorated function are not cleared from the
    cache until decorated_function.clear_my_cache() or cached.clear_cache()
    is called

    To use this as a context manager:

        with cached(function) as function:
            ...
            function(...)
            ...

    The function's return values will be cleared from the cache when the
    with block ends

    To clear all cached results, call the cached.clear_cache() class method
    """

    _CACHE = {}

    def __init__(self, fn):
        self._fn = fn

    def __call__(self, *args, **kwds):
        key = self._cache_key(*args, **kwds)
        function_cache = self._CACHE.setdefault(self._fn, {})
        try:
            return function_cache[key]
        except KeyError:
            function_cache[key] = result = self._fn(*args, **kwds)
            return result

    def clear_my_cache(self):
        """Clear the cache for a decorated function
        """
        try:
            del self._CACHE[self._fn]
        except KeyError:
            pass # no cached results

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self.clear_my_cache()

    def _cache_key(self, *args, **kwds):
        """Create a cache key for the given positional and keyword
        arguments. pickle.dumps() is used because there could be
        unhashable objects in the arguments, but passing them to 
        pickle.dumps() will result in a string, which is always hashable.

        I used this to make the cached class as generic as possible. Depending
        on your requirements, other key generating techniques may be more
        efficient
        """
        return pickle.dumps((args, sorted(kwds.items())), pickle.HIGHEST_PROTOCOL)

    @classmethod
    def clear_cache(cls):
        """Clear everything from all functions from the cache
        """
        cls._CACHE = {}


if __name__ == '__main__':
    # used as decorator
    @cached
    def fibonacci(n):
        print "calculating fibonacci(%d)" % n
        if n == 0:
            return 0
        if n == 1:
            return 1
        return fibonacci(n - 1) + fibonacci(n - 2)

    for n in xrange(10):
        print 'fibonacci(%d) = %d' % (n, fibonacci(n))


    def lucas(n):
        print "calculating lucas(%d)" % n
        if n == 0:
            return 2
        if n == 1:
            return 1
        return lucas(n - 1) + lucas(n - 2)

    # used as context manager
    with cached(lucas) as lucas:
        for i in xrange(10):
            print 'lucas(%d) = %d' % (i, lucas(i))

    for n in xrange(9, -1, -1):
        print 'fibonacci(%d) = %d' % (n, fibonacci(n))

    cached.clear_cache()

    for n in xrange(9, -1, -1):
        print 'fibonacci(%d) = %d' % (n, fibonacci(n))
</snippet></ROW><ROW><id>1003918</id><snippet>__init__.py</snippet></ROW><ROW><id>1003918</id><snippet>from GChartWrapper.GChart import *
</snippet></ROW><ROW><id>1003918</id><snippet>myview.py</snippet></ROW><ROW><id>1003918</id><snippet>myapp\view</snippet></ROW><ROW><id>1003918</id><snippet>GChartWrapper</snippet></ROW><ROW><id>1003918</id><snippet>import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'utils')))
</snippet></ROW><ROW><id>1004254</id><snippet>__dict__</snippet></ROW><ROW><id>1004477</id><snippet>&lt;tr&gt;
  &lt;td&gt;Yardage&lt;/td&gt;
  % for hole in range(9):
  &lt;td&gt;${h.text('hole-%s.yardage'%(hole), maxlength=3, size=3)}&lt;/td&gt;
  % endfor
&lt;/tr&gt;
</snippet></ROW><ROW><id>1004477</id><snippet>hole-1.yardage</snippet></ROW><ROW><id>1004477</id><snippet>&lt;a href="http://www.formencode.org/en/latest/modules/variabledecode.html" rel="nofollow"&gt;FormEncode.variabledecode&lt;/a&gt;</snippet></ROW><ROW><id>1004477</id><snippet>import formencode

class HoleSchema(formencode.Schema):
    allow_extra_fields = False
    yardage = formencode.validators.Int(not_empty=True)
    par = formencode.validators.Int(not_empty=True)

class CourseForm(formencode.Schema):
    allow_extra_fields = True
    filter_extra_fields = True
    name = formencode.validators.NotEmpty(messages={'empty': 'Name must not be empty'})
    hole = formencode.ForEach(HoleSchema())
</snippet></ROW><ROW><id>1004477</id><snippet>hole-#.par</snippet></ROW><ROW><id>1004477</id><snippet>hole-#.yardage</snippet></ROW><ROW><id>1004477</id><snippet>formencode.ForEach</snippet></ROW><ROW><id>1004477</id><snippet>HoleSchema</snippet></ROW><ROW><id>1004477</id><snippet>variable_decode=True</snippet></ROW><ROW><id>1004477</id><snippet>@validate</snippet></ROW><ROW><id>1004477</id><snippet>submit</snippet></ROW><ROW><id>1004477</id><snippet>@validate(schema=CourseForm(), form='add', post_only=False, on_get=True, 
          auto_error_formatter=custom_formatter,
          variable_decode=True)
def submit(self):
    # Do whatever here.
    return 'Submitted!'
</snippet></ROW><ROW><id>1004477</id><snippet>@validate</snippet></ROW><ROW><id>1004477</id><snippet>variable_decode=True</snippet></ROW><ROW><id>1004513</id><snippet>import Tkinter
tclsh = Tkinter.Tcl()
tclsh.eval("""
    proc unknown args {puts "Hello World!"}
    }"!dlroW olleH" stup{ sgra nwonknu corp
""")
</snippet></ROW><ROW><id>1004752</id><snippet> use MP3::Tag;

  $mp3 = MP3::Tag-&gt;new($filename);

  # get some information about the file in the easiest way
  ($title, $track, $artist, $album, $comment, $year, $genre) = $mp3-&gt;autoinfo();
  # Or:
  $comment = $mp3-&gt;comment();
  $dedicated_to
    = $mp3-&gt;select_id3v2_frame_by_descr('COMM(fre,fra,eng,#0)[dedicated to]');

  $mp3-&gt;title_set('New title');         # Edit in-memory copy
  $mp3-&gt;select_id3v2_frame_by_descr('TALB', 'New album name'); # Edit in memory
  $mp3-&gt;select_id3v2_frame_by_descr('RBUF', $n1, $n2, $n3);    # Edit in memory
  $mp3-&gt;update_tags(year =&gt; 1866);      # Edit in-memory, and commit to file
  $mp3-&gt;update_tags();                  # Commit to file
</snippet></ROW><ROW><id>1004947</id><snippet>wxreactor</snippet></ROW><ROW><id>1004947</id><snippet>wxsupport</snippet></ROW><ROW><id>1004947</id><snippet>wxSocket</snippet></ROW><ROW><id>1004947</id><snippet>Deferred.callback</snippet></ROW><ROW><id>1004947</id><snippet>Deferred.callback</snippet></ROW><ROW><id>1004947</id><snippet>Deferred</snippet></ROW><ROW><id>1004947</id><snippet>reactor.callFromThread(myDeferred.callback, myresult)</snippet></ROW><ROW><id>1005224</id><snippet>blank</snippet></ROW><ROW><id>1005224</id><snippet>null</snippet></ROW><ROW><id>1005674</id><snippet>enumerate</snippet></ROW><ROW><id>1005674</id><snippet>for i, item in enumerate(some_seq):
    bar(item, i)
</snippet></ROW><ROW><id>1005690</id><snippet>python -m trace --help
</snippet></ROW><ROW><id>1005813</id><snippet>#and this should get me the items that a user saved
useritems = db.get(saveditemkeys)
</snippet></ROW><ROW><id>1005958</id><snippet>for link in mysite.getallLinks():
    if link[0] == firstletter:
        print link
</snippet></ROW><ROW><id>1005958</id><snippet>import collections
d=collections.defaultdict(list)
for link in mysite.getallLinks():
    d[link[0]].append(link)             # Dict of first letter -&gt; list of links

# Print all links starting with firstletter
for link in d[firstletter]:
    print link
</snippet></ROW><ROW><id>1006301</id><snippet>multiprocessing.count</snippet></ROW><ROW><id>1006301</id><snippet>import os
import re
import subprocess


def available_cpu_count():
    """ Number of available virtual or physical CPUs on this system, i.e.
    user/real as output by time(1) when called with an optimally scaling
    userspace-only program"""

    # cpuset
    # cpuset may restrict the number of *available* processors
    try:
        m = re.search(r'(?m)^Cpus_allowed:\s*(.*)$',
                      open('/proc/self/status').read())
        if m:
            res = bin(int(m.group(1).replace(',', ''), 16)).count('1')
            if res &gt; 0:
                return res
    except IOError:
        pass

    # Python 2.6+
    try:
        import multiprocessing
        return multiprocessing.cpu_count()
    except (ImportError, NotImplementedError):
        pass

    # http://code.google.com/p/psutil/
    try:
        import psutil
        return psutil.NUM_CPUS
    except (ImportError, AttributeError):
        pass

    # POSIX
    try:
        res = int(os.sysconf('SC_NPROCESSORS_ONLN'))

        if res &gt; 0:
            return res
    except (AttributeError, ValueError):
        pass

    # Windows
    try:
        res = int(os.environ['NUMBER_OF_PROCESSORS'])

        if res &gt; 0:
            return res
    except (KeyError, ValueError):
        pass

    # jython
    try:
        from java.lang import Runtime
        runtime = Runtime.getRuntime()
        res = runtime.availableProcessors()
        if res &gt; 0:
            return res
    except ImportError:
        pass

    # BSD
    try:
        sysctl = subprocess.Popen(['sysctl', '-n', 'hw.ncpu'],
                                  stdout=subprocess.PIPE)
        scStdout = sysctl.communicate()[0]
        res = int(scStdout)

        if res &gt; 0:
            return res
    except (OSError, ValueError):
        pass

    # Linux
    try:
        res = open('/proc/cpuinfo').read().count('processor\t:')

        if res &gt; 0:
            return res
    except IOError:
        pass

    # Solaris
    try:
        pseudoDevices = os.listdir('/devices/pseudo/')
        res = 0
        for pd in pseudoDevices:
            if re.match(r'^cpuid@[0-9]+$', pd):
                res += 1

        if res &gt; 0:
            return res
    except OSError:
        pass

    # Other UNIXes (heuristic)
    try:
        try:
            dmesg = open('/var/run/dmesg.boot').read()
        except IOError:
            dmesgProcess = subprocess.Popen(['dmesg'], stdout=subprocess.PIPE)
            dmesg = dmesgProcess.communicate()[0]

        res = 0
        while '\ncpu' + str(res) + ':' in dmesg:
            res += 1

        if res &gt; 0:
            return res
    except OSError:
        pass

    raise Exception('Can not determine number of CPUs on this system')
</snippet></ROW><ROW><id>1007377</id><snippet>x = matrix([[0.],[0],[1]])
theta = matrix(zeros([3,1]))
for i in range(5):
  grad = matrix(zeros([3,1]))
  hess = matrix(zeros([3,3]))
  [xfile, yfile] = [open('q1'+a+'.dat', 'r') for a in 'xy']
  for xline, yline in zip(xfile, yfile):
    x.transpose()[0,:2] = [map(float, xline.split("  ")[1:3])]
    y = float(yline)
    hypoth = 1 / (1 + math.exp(theta.transpose() * x))
    grad += (y - hypoth) * x
    hess -= hypoth * (1 - hypoth) * x * x.transpose()
  theta += inv(hess) * grad
print "done"
print theta
</snippet></ROW><ROW><id>1007441</id><snippet>WWW::Selenium</snippet></ROW><ROW><id>1007499</id><snippet>mystring.replace (" ", "_")
</snippet></ROW><ROW><id>1007741</id><snippet>import itertools

group1 = ['a', 'b']
group2 = ['c', 'd']

print list(itertools.product(group1, group2))

#==&gt; [('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd')]
</snippet></ROW><ROW><id>1007770</id><snippet>[buildout]
find-links  = http://buildslave01/eggs/hostapi.core-1.0_r102-py2.4.egg
parts = mypython

[mypython]
recipe = zc.recipe.egg
interpreter = mypython
eggs = hostapi.core
</snippet></ROW><ROW><id>1007901</id><snippet>import subprocess
subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
# etc.
</snippet></ROW><ROW><id>1008223</id><snippet>stream = stream | Transformer('.//head/script["functionName()"]').remove()
</snippet></ROW><ROW><id>1008223</id><snippet>stream = stream | Transformer('.//head').append(tag.script(functionNameCode, type="text/javascript"))
</snippet></ROW><ROW><id>1008643</id><snippet>def loadDictionaryFromAFile( aFile ):
    dictionary = {}
    for line in aFile:
        fields = line.split('\t')
        dictionary[fields[0]]= fields

dict2 = loadDictionaryFromAFile( open("file2","r" )
dict3 = loadDictionaryFromAFile( open("file3","r" )

for line in open("file1","r"):
    fields = line.split("/t")
    d2= dict2.get( fields[0], None )
    d3= dict3.get( fields[0], None )
    print fields, d2, d3
</snippet></ROW><ROW><id>1008869</id><snippet>c = a.' / b
</snippet></ROW><ROW><id>1008869</id><snippet>c = numpy.linalg.lstsq(b.T, a.T)[0].T
</snippet></ROW><ROW><id>1009096</id><snippet>user=&gt; (map vector '(1 2 3) "abc")
([1 \a] [2 \b] [3 \c])
</snippet></ROW><ROW><id>1009837</id><snippet>getattr</snippet></ROW><ROW><id>1009837</id><snippet>&gt;&gt;&gt; class helloworld:
...     def world(self):
...         print("Hello World!")
... 
&gt;&gt;&gt; m = "world"
&gt;&gt;&gt; hello = helloworld()
&gt;&gt;&gt; getattr(hello, m)()
Hello World!
</snippet></ROW><ROW><id>1009837</id><snippet>class helloworld()</snippet></ROW><ROW><id>1009837</id><snippet>str</snippet></ROW><ROW><id>1009864</id><snippet>from optparse import OptionParser

parser = OptionParser()
parser.add_option("-f", "--file", dest="filename",
                  help="write report to FILE", metavar="FILE")
parser.add_option("-q", "--quiet",
                  action="store_false", dest="verbose", default=True,
                  help="don't print status messages to stdout")

(options, args) = parser.parse_args()
</snippet></ROW><ROW><id>1009942</id><snippet>gtk.Socket</snippet></ROW><ROW><id>1009942</id><snippet>import os
import gtk
from gtk import Socket, Button, Window, VBox, HBox

w = Window()
e = Button("Emacs")
x = Button("XTerm")
s = Socket()
v = VBox()
h = HBox()
w.add(v)
v.add(s)
h.add(e)
h.add(x)
v.pack_start(h, expand=False)

def runemacs(btn):
    x.set_sensitive(False); e.set_sensitive(False)
    os.spawnlp(os.P_NOWAIT, "emacs", 
        "emacs", "--parent-id", str(s.get_id()))

def runxterm(btn):
    x.set_sensitive(False); e.set_sensitive(False)
    os.spawnlp(os.P_NOWAIT, "xterm",
        "xterm", "-into", str(s.get_id()))

e.connect('clicked', runemacs)
x.connect('clicked', runxterm)
w.show_all()
gtk.main()
</snippet></ROW><ROW><id>1010109</id><snippet>login_required</snippet></ROW><ROW><id>1010109</id><snippet>hello</snippet></ROW><ROW><id>1010109</id><snippet>def login_required(f):

  # This function is what we "replace" hello with
  def wrapper(*args, **kw):
    args[0].client_session['test'] = True
    logged_in = 0
    if logged_in:
      return f(*args, **kw)  # Call hello
    else:
      return redirect(url_for('login'))

  return wrapper
</snippet></ROW><ROW><id>1010452</id><snippet>application=WSGIApplication([(r'.*',MyRequestHandler),])
</snippet></ROW><ROW><id>1010463</id><snippet>def genfactors(fdict):    
    factors = set([1])

    for factor, count in fdict.iteritems():
        for ignore in range(count):
            factors.update([n*factor for n in factors])
            # that line could also be:
            # factors.update(map(lambda e: e*factor, factors))

    return factors

factors = {2:3, 3:2, 5:1}

for factor in genfactors(factors):
    print factor
</snippet></ROW><ROW><id>1010463</id><snippet>(1,3) U (1,3)*2 = (1,2,3,6)</snippet></ROW><ROW><id>1010463</id><snippet>(1,2,3,6) U (1,2,3,6)*2 = (1,2,3,4,6,12)</snippet></ROW><ROW><id>1010463</id><snippet>(1,2,3,4,6,12)  U (1,2,3,4,6,12)*2 = (1,2,3,4,6,8,12,24)</snippet></ROW><ROW><id>1010463</id><snippet>(1,3) + (1,3)*2 = (1,2,3,6)</snippet></ROW><ROW><id>1010463</id><snippet>(1,2,3,6) + ((1,3)*2)*2 = (1,2,3,4,6,12)</snippet></ROW><ROW><id>1010463</id><snippet>(1,2,3,4,6,12) + (((1,3)*2)*2)*2 = (1,2,3,4,6,8,12,24)</snippet></ROW><ROW><id>1010463</id><snippet>def genfactors(fdict):
    factors = [1]

    for factor, count in fdict.iteritems():
        newfactors = factors
        for ignore in range(count):
            newfactors = map(lambda e: e*factor, newfactors)
            factors += newfactors

    return factors
</snippet></ROW><ROW><id>1010639</id><snippet>import cStringIO
from wsgiref import simple_server, util

input_string = """POST /mum/ble?q=huh HTTP/1.0
Content-Length: 18
Content-Type: application/json; charset="utf-8"
Host: localhost:80

["do", "re", "mi"]
"""

class FakeHandler(simple_server.WSGIRequestHandler):
    def __init__(self, rfile):
        self.rfile = rfile
        self.wfile = cStringIO.StringIO() # for error msgs
        self.server = self
        self.base_environ = {}
        self.client_address = ['?', 80]
        self.raw_requestline = self.rfile.readline()
        self.parse_request()

    def getenv(self):
        env = self.get_environ()
        util.setup_testing_defaults(env)
        env['wsgi.input'] = self.rfile
        return env

handler = FakeHandler(rfile=cStringIO.StringIO(input_string))
wsgi_env = handler.getenv()

print wsgi_env
</snippet></ROW><ROW><id>1010639</id><snippet>rfile</snippet></ROW><ROW><id>1010639</id><snippet>wfile</snippet></ROW><ROW><id>1010639</id><snippet>HTTP/1.0</snippet></ROW><ROW><id>1010639</id><snippet>POST</snippet></ROW><ROW><id>1010639</id><snippet>handler.wfile</snippet></ROW><ROW><id>1010798</id><snippet>verbose_name</snippet></ROW><ROW><id>1010798</id><snippet>verbose_name_plural</snippet></ROW><ROW><id>1010798</id><snippet>Meta</snippet></ROW><ROW><id>1010973</id><snippet>s = s[:-3] + s[-2:]
</snippet></ROW><ROW><id>1010973</id><snippet>s[:-3]</snippet></ROW><ROW><id>1010973</id><snippet>"this is a string"</snippet></ROW><ROW><id>1010973</id><snippet>s[-2:]</snippet></ROW><ROW><id>1010973</id><snippet>" a"</snippet></ROW><ROW><id>1010973</id><snippet>"this is a string a"</snippet></ROW><ROW><id>1011145</id><snippet>def categories_view(request):
    categories = Categories.objects.all()   #maybe put an order_by or filter here
    return render_to_response("your_template.html", {'categories':categories})
</snippet></ROW><ROW><id>1011145</id><snippet>{% for category in categories %}
    &lt;h1&gt;{{ category.name }}&lt;/h1&gt;
    {% for company in category.company_set.all %}
        &lt;h2&gt;{{ company.name }}&lt;/h2&gt;
        &lt;ul&gt;
        {% for video in company.video_set.all %}
            &lt;li&gt;{{ video.name }}&lt;/li&gt;
        {% endfor %}
        &lt;/ul&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>1011366</id><snippet>foo/package1/resources</snippet></ROW><ROW><id>1011366</id><snippet>__file__</snippet></ROW><ROW><id>1011366</id><snippet>foo/package1/__init__.py</snippet></ROW><ROW><id>1011366</id><snippet>from os import path
resources_dir = path.join(path.dirname(__file__), 'resources')
</snippet></ROW><ROW><id>1011962</id><snippet>foo = somevalue
previous = None
next = None
for index, obj in enumerate(objects):
    if obj == foo:
        # TODO Bounds-checking
        previous = objects[index - 1]
        next = objects[index + 1]
</snippet></ROW><ROW><id>1011962</id><snippet>enumerate</snippet></ROW><ROW><id>1012197</id><snippet>T = [L[i] for i in Idx]
</snippet></ROW><ROW><id>1012373</id><snippet>items()</snippet></ROW><ROW><id>1012373</id><snippet>keys()</snippet></ROW><ROW><id>1012373</id><snippet>values()</snippet></ROW><ROW><id>1012373</id><snippet>iteritems()</snippet></ROW><ROW><id>1012373</id><snippet>iterkeys()</snippet></ROW><ROW><id>1012373</id><snippet>itervalues()</snippet></ROW><ROW><id>1012373</id><snippet>(value, key)</snippet></ROW><ROW><id>1012373</id><snippet>zip(): pairs = zip(d.values(), d.keys()).</snippet></ROW><ROW><id>1012373</id><snippet>iterkeys()</snippet></ROW><ROW><id>1012373</id><snippet>itervalues()</snippet></ROW><ROW><id>1012373</id><snippet>pairs = zip(d.itervalues(), d.iterkeys())</snippet></ROW><ROW><id>1012373</id><snippet>pairs = [(v, k) for (k, v) in d.iteritems()]</snippet></ROW><ROW><id>1012373</id><snippet>keys()</snippet></ROW><ROW><id>1012373</id><snippet>values()</snippet></ROW><ROW><id>1012472</id><snippet>joined = '\x01'.join(data)
</snippet></ROW><ROW><id>1012472</id><snippet>\x01</snippet></ROW><ROW><id>1012559</id><snippet>sleep</snippet></ROW><ROW><id>1012559</id><snippet>elsif ( $item =~ /leftclick/i ) {
    SendLButtonDown ();
    SendLButtonUp ();
}
</snippet></ROW><ROW><id>1012559</id><snippet>mouse_event</snippet></ROW><ROW><id>1012559</id><snippet>SendInput</snippet></ROW><ROW><id>1012559</id><snippet>MOUSEINPUT</snippet></ROW><ROW><id>1013293</id><snippet>ERRORLEVEL</snippet></ROW><ROW><id>1013293</id><snippet>python somescript.py
echo %ERRORLEVEL%
</snippet></ROW><ROW><id>1013293</id><snippet>exit()</snippet></ROW><ROW><id>1013293</id><snippet>exit(15)
</snippet></ROW><ROW><id>1013293</id><snippet>exit()</snippet></ROW><ROW><id>1013293</id><snippet>sys</snippet></ROW><ROW><id>1013293</id><snippet>from sys import exit
exit(15)
</snippet></ROW><ROW><id>1013295</id><snippet>s[i:j:k]    slice of s from i to j with step k
</snippet></ROW><ROW><id>1013295</id><snippet>s</snippet></ROW><ROW><id>1013295</id><snippet>i</snippet></ROW><ROW><id>1013295</id><snippet>j</snippet></ROW><ROW><id>1013295</id><snippet>k</snippet></ROW><ROW><id>1013295</id><snippet>x = i + n*k</snippet></ROW><ROW><id>1013295</id><snippet>0 &lt;= n &lt; (j-i)/k</snippet></ROW><ROW><id>1013295</id><snippet>i</snippet></ROW><ROW><id>1013295</id><snippet>i+k</snippet></ROW><ROW><id>1013295</id><snippet>i+2*k</snippet></ROW><ROW><id>1013295</id><snippet>i+3*k</snippet></ROW><ROW><id>1013295</id><snippet>j</snippet></ROW><ROW><id>1013295</id><snippet>j</snippet></ROW><ROW><id>1013295</id><snippet>i</snippet></ROW><ROW><id>1013295</id><snippet>j</snippet></ROW><ROW><id>1013295</id><snippet>len(s)</snippet></ROW><ROW><id>1013295</id><snippet>len(s</snippet></ROW><ROW><id>1013295</id><snippet>i</snippet></ROW><ROW><id>1013295</id><snippet>j</snippet></ROW><ROW><id>1013295</id><snippet>None</snippet></ROW><ROW><id>1013295</id><snippet>k</snippet></ROW><ROW><id>1013295</id><snippet>k</snippet></ROW><ROW><id>1013295</id><snippet>k</snippet></ROW><ROW><id>1013295</id><snippet>None</snippet></ROW><ROW><id>1013799</id><snippet>size = 0
for line in f1:
  if str(line) == '&lt;/Service&gt;\n':
    break
  else:
    f2.write(line)
    size += len(line)
    print('size = ' + str(size))
</snippet></ROW><ROW><id>1013799</id><snippet>\r\n</snippet></ROW><ROW><id>1013870</id><snippet>C:\&gt; ppm install Win32::Process::Info
C:\&gt; ppm install Win32::Process::Memory
</snippet></ROW><ROW><id>1013870</id><snippet>ReadProcessMemory</snippet></ROW><ROW><id>1013870</id><snippet>#!/usr/bin/perl
use strict; use warnings;

use Win32;
use Win32::Process;
use Win32::Process::Memory;

my $process;

Win32::Process::Create(
    $process,
    'C:/opt/vim/vim72/gvim.exe',
    q{},
    0,
    NORMAL_PRIORITY_CLASS,
    q{.}
) or die ErrorReport();

my $mem = Win32::Process::Memory-&gt;new({
    pid =&gt; $process-&gt;GetProcessID(),
    access =&gt; 'read/query',
});

$mem-&gt;search_sub( 'VIM', sub {
    print $mem-&gt;hexdump($_[0], 0x20), "\n";
});

sub ErrorReport{
    Win32::FormatMessage( Win32::GetLastError() );
}

END { $process-&gt;Kill(0) if $process }
</snippet></ROW><ROW><id>1013870</id><snippet>C:\Temp&gt; proc
0052A580 : 56 49 4D 20 2D 20 56 69 20 49 4D 70 72 6F 76 65 : VIM - Vi IMprove
0052A590 : 64 20 37 2E 32 20 28 32 30 30 38 20 41 75 67 20 : d 7.2 (2008 Aug

0052A5F0 :       56 49 4D 52 55 4E 54 49 4D 45 3A 20 22 00 :   VIMRUNTIME: ".
0052A600 : 20 20 66 61 6C 6C 2D 62 61 63 6B 20 66 6F 72 20 :   fall-back for
0052A610 : 24 56                                           : $V
</snippet></ROW><ROW><id>1014450</id><snippet>#!/usr/bin/env python
#
# Copyright 2001-2009 by Vinay Sajip. All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies and that
# both that copyright notice and this permission notice appear in
# supporting documentation, and that the name of Vinay Sajip
# not be used in advertising or publicity pertaining to distribution
# of the software without specific, written prior permission.
# VINAY SAJIP DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
# VINAY SAJIP BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
# IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
# OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# This file is part of the standalone Python logging distribution. See
# http://www.red-dove.com/python_logging.html
#
"""
A test harness for the logging module. An example handler - DBHandler -
which writes to an Python DB API 2.0 data source. You'll need to set this
source up before you run the test.

Copyright (C) 2001-2009 Vinay Sajip. All Rights Reserved.
"""
import sys, string, time, logging

class DBHandler(logging.Handler):
    def __init__(self, dsn, uid='', pwd=''):
        logging.Handler.__init__(self)
        import mx.ODBC.Windows
        self.dsn = dsn
        self.uid = uid
        self.pwd = pwd
        self.conn = mx.ODBC.Windows.connect(self.dsn, self.uid, self.pwd)
        self.SQL = """INSERT INTO Events (
                        Created,
                        RelativeCreated,
                        Name,
                        LogLevel,
                        LevelText,
                        Message,
                        Filename,
                        Pathname,
                        Lineno,
                        Milliseconds,
                        Exception,
                        Thread
                   )
                   VALUES (
                        %(dbtime)s,
                        %(relativeCreated)d,
                        '%(name)s',
                        %(levelno)d,
                        '%(levelname)s',
                        '%(message)s',
                        '%(filename)s',
                        '%(pathname)s',
                        %(lineno)d,
                        %(msecs)d,
                        '%(exc_text)s',
                        '%(thread)s'
                   );
                   """
        self.cursor = self.conn.cursor()

    def formatDBTime(self, record):
        record.dbtime = time.strftime("#%m/%d/%Y#", time.localtime(record.created))

    def emit(self, record):
        try:
            #use default formatting
            self.format(record)
            #now set the database time up
            self.formatDBTime(record)
            if record.exc_info:
                record.exc_text = logging._defaultFormatter.formatException(record.exc_info)
            else:
                record.exc_text = ""
            sql = self.SQL % record.__dict__
            self.cursor.execute(sql)
            self.conn.commit()
        except:
            import traceback
            ei = sys.exc_info()
            traceback.print_exception(ei[0], ei[1], ei[2], None, sys.stderr)
            del ei

    def close(self):
        self.cursor.close()
        self.conn.close()
        logging.Handler.close(self)

dh = DBHandler('Logging')
logger = logging.getLogger("")
logger.setLevel(logging.DEBUG)
logger.addHandler(dh)
logger.info("Jackdaws love my big %s of %s", "sphinx", "quartz")
logger.debug("Pack my %s with five dozen %s", "box", "liquor jugs")
try:
    import math
    math.exp(1000)
except:
    logger.exception("Problem with %s", "math.exp")
</snippet></ROW><ROW><id>1014544</id><snippet>mylist.insert(0, mylist.pop(mylist.index(targetvalue)))
</snippet></ROW><ROW><id>1014596</id><snippet>cmd</snippet></ROW><ROW><id>1014596</id><snippet>list</snippet></ROW><ROW><id>1014596</id><snippet># Just removing the square brackets
cmd = exepath + '-j' + str(j) + '-n' + str(z)
</snippet></ROW><ROW><id>1014596</id><snippet># This returns a one-element list
cmd = [exepath + '-j' + str(j) + 
       '-n' + str(z)]

# This returns a string
cmd = (exepath + '-j' + str(j) + 
       '-n' + str(z))
</snippet></ROW><ROW><id>1014596</id><snippet>list</snippet></ROW><ROW><id>1014596</id><snippet>tuple</snippet></ROW><ROW><id>1014596</id><snippet># This is a string
str = ("I'm a string")

# This is a tuple
tup = ("I'm a string","me too")

# This is also a (one-element) tuple
tup = ("I'm a string",)
</snippet></ROW><ROW><id>1014610</id><snippet>{% for company in category.company_set.all %}
</snippet></ROW><ROW><id>1014669</id><snippet>def listit(t):
    return list(map(listit, t)) if isinstance(t, (list, tuple)) else t
</snippet></ROW><ROW><id>1015147</id><snippet>eval(string)</snippet></ROW><ROW><id>1015147</id><snippet>eval(code, globals=None, locals=None)</snippet></ROW><ROW><id>1015147</id><snippet>__builtins__</snippet></ROW><ROW><id>1015147</id><snippet>eval("print('Hello')")
</snippet></ROW><ROW><id>1015147</id><snippet>hello</snippet></ROW><ROW><id>1015147</id><snippet>eval("print('Hello, %s'%name)", {}, {'name':'person-b'})
</snippet></ROW><ROW><id>1015147</id><snippet>eval("import os;os.system('sudo rm -rf /')")
</snippet></ROW><ROW><id>1015147</id><snippet>eval("import os;...", {'os':None})
</snippet></ROW><ROW><id>1015147</id><snippet>eval</snippet></ROW><ROW><id>1015147</id><snippet>def hello() : print('Hello')
def world() : print('world')
CURRENT_MOOD = 'happy'

eval(get_code(), {'contrivedExample':__main__}, {'hi':hello}.update(locals()))
</snippet></ROW><ROW><id>1015147</id><snippet>contrivedExample</snippet></ROW><ROW><id>1015147</id><snippet>contrivedExample.hello()</snippet></ROW><ROW><id>1015147</id><snippet>hi</snippet></ROW><ROW><id>1015147</id><snippet>hello</snippet></ROW><ROW><id>1015147</id><snippet>exec</snippet></ROW><ROW><id>1015147</id><snippet>exec</snippet></ROW><ROW><id>1015147</id><snippet>exec "code" [in scope]</snippet></ROW><ROW><id>1015147</id><snippet>exec</snippet></ROW><ROW><id>1015147</id><snippet>exec "print('hello')"
</snippet></ROW><ROW><id>1015147</id><snippet>hello</snippet></ROW><ROW><id>1015147</id><snippet>eval "print('hello, '+name)" in {'name':'person-b'}
</snippet></ROW><ROW><id>1015147</id><snippet>exec</snippet></ROW><ROW><id>1015147</id><snippet>exec "import os;os.system('sudo rm -rf /')"
</snippet></ROW><ROW><id>1015147</id><snippet>print</snippet></ROW><ROW><id>1015147</id><snippet>from __future__ import print_statement</snippet></ROW><ROW><id>1015147</id><snippet>print "hello"
</snippet></ROW><ROW><id>1015147</id><snippet>print("hello")
</snippet></ROW><ROW><id>1015272</id><snippet>sys.excepthook</snippet></ROW><ROW><id>1015272</id><snippet>def my_excepthook(type, value, tback):
    # log the exception here

    # then call the default handler
    sys.__excepthook__(type, value, tback) 

sys.excepthook = my_excepthook
</snippet></ROW><ROW><id>1015332</id><snippet>ModelAdmin.delete_view()</snippet></ROW><ROW><id>1015332</id><snippet>class MyModelAdmin(ModelAdmin):
    def delete_view(self, request, object_id, extra_context=None):
        # if request.POST is set, the user already confirmed deletion
        if not request.POST:
            perform_my_action()
        super(MyModelAdmin, self).delete_view(request, object_id, extra_context)
</snippet></ROW><ROW><id>1015405</id><snippet>__get__</snippet></ROW><ROW><id>1015405</id><snippet>bound_handler = handler.__get__(self, MyWidget)
</snippet></ROW><ROW><id>1015602</id><snippet>__new__</snippet></ROW><ROW><id>1015602</id><snippet>__init__</snippet></ROW><ROW><id>1015602</id><snippet>class Test(object):
    def __new__(cls):
        return 5

t = Test()
print t
</snippet></ROW><ROW><id>1015602</id><snippet>5</snippet></ROW><ROW><id>1015602</id><snippet>__new__</snippet></ROW><ROW><id>1015602</id><snippet>__init__</snippet></ROW><ROW><id>1015602</id><snippet>__new__</snippet></ROW><ROW><id>1015602</id><snippet>__init__</snippet></ROW><ROW><id>1015602</id><snippet>__new__</snippet></ROW><ROW><id>1015602</id><snippet>__init__</snippet></ROW><ROW><id>1016651</id><snippet>startupinfo = None
if os.name == 'nt':
    startupinfo = subprocess.STARTUPINFO()
    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
proc = subprocess.Popen(command, startupinfo=startupinfo)
</snippet></ROW><ROW><id>1017105</id><snippet>def grandKids(generation, kidsFunc, val):
  layer = [val]
  for i in xrange(generation):
    layer = itertools.chain.from_iterable(itertools.imap(kidsFunc, layer))
  return layer
</snippet></ROW><ROW><id>1017105</id><snippet>def kids(x): # children indices in a 1-based binary heap
  yield x*2
  yield x*2+1

&gt;&gt;&gt; list(grandKids(3, kids, 2))
[16, 17, 18, 19, 20, 21, 22, 23]
</snippet></ROW><ROW><id>1017105</id><snippet>grandKids generation kidsFunc val =
  iterate (concatMap kidsFunc) [val] !! generation
</snippet></ROW><ROW><id>1017354</id><snippet>my_cgi.py</snippet></ROW><ROW><id>1017354</id><snippet>import cgi
print "status: 200 OK"
print "content-type: text/html"
print
print "&lt;!doctype...&gt;"
print "&lt;html&gt;"
etc.
</snippet></ROW><ROW><id>1017354</id><snippet>wsgi.py</snippet></ROW><ROW><id>1017354</id><snippet>import cStringIO
def my_cgi( environ, start_response ):
    page = cStringIO.StringIO()
    sys.stdout= page
    os.environ.update( environ ) 
    # you may have to do something like execfile( "my_cgi.py", globals=environ ) 
    execfile( "my_cgi.py" )
    status = '200 OK' # HTTP Status
    headers = [('Content-type', 'text/html')] # HTTP Headers
    start_response(status, headers)
    return page.getvalue()
</snippet></ROW><ROW><id>1017354</id><snippet>mod_wsgi</snippet></ROW><ROW><id>1017354</id><snippet>my_cgi</snippet></ROW><ROW><id>1017354</id><snippet>execfile</snippet></ROW><ROW><id>1017354</id><snippet>wsgi.py</snippet></ROW><ROW><id>1017354</id><snippet>from my_cgi import this_func, that_func
def my_cgi( environ, start_response ):

    result= this_func( some_args )
    page_text= that_func( result, some_other_args )

    status = '200 OK' # HTTP Status
    headers = [('Content-type', 'text/html')] # HTTP Headers
    start_response(status, headers)
    return page_text
</snippet></ROW><ROW><id>1017376</id><snippet>buf = open('the_file', 'rb').read()
len(buf)
ubuf = buf.decode('utf8')
# splat ... but it will give you the byte offset into the file
buf[offset-50:60] # should show you where/what the problem is
# By the way, from the error message, looks like a bad
# FOUR-byte UTF-8 character ... interesting
</snippet></ROW><ROW><id>1017473</id><snippet>self</snippet></ROW><ROW><id>1017473</id><snippet>me</snippet></ROW><ROW><id>1017473</id><snippet>if me.has_no_changeset(ticket):
</snippet></ROW><ROW><id>1017473</id><snippet>me</snippet></ROW><ROW><id>1017473</id><snippet>self</snippet></ROW><ROW><id>1017473</id><snippet>self</snippet></ROW><ROW><id>1017473</id><snippet>def validate_ticket(self, req, ticket):
    # [...]
    if self.has_no_changeset(ticket):
</snippet></ROW><ROW><id>1017655</id><snippet>0</snippet></ROW><ROW><id>1017655</id><snippet>1</snippet></ROW><ROW><id>1017655</id><snippet>def vacuum(self):
    old_isolation_level = self.conn.isolation_level
    self.conn.set_isolation_level(0)
    query = "VACUUM FULL"
    self._doQuery(query)
    self.conn.set_isolation_level(old_isolation_level)
</snippet></ROW><ROW><id>1017937</id><snippet>list</snippet></ROW><ROW><id>1018096</id><snippet>CLOB</snippet></ROW><ROW><id>1018096</id><snippet>BLOB</snippet></ROW><ROW><id>1018096</id><snippet>CLOB</snippet></ROW><ROW><id>1018096</id><snippet>CL8WIN1251</snippet></ROW><ROW><id>1018096</id><snippet>0xC0</snippet></ROW><ROW><id>1018096</id><snippet>AL16UTF16</snippet></ROW><ROW><id>1018096</id><snippet>0x0410</snippet></ROW><ROW><id>1018096</id><snippet>UTF16</snippet></ROW><ROW><id>1018096</id><snippet>BLOB</snippet></ROW><ROW><id>1018096</id><snippet>0xC0</snippet></ROW><ROW><id>1018372</id><snippet>self</snippet></ROW><ROW><id>1018372</id><snippet>  return self.createTable(self, tableName, schema, asType=asType)
</snippet></ROW><ROW><id>1018372</id><snippet>  return self.createTable(tableName, schema, asType=asType)
</snippet></ROW><ROW><id>1018480</id><snippet>from subprocess import Popen, STDOUT
stdout, stderr = Popen('echo ' + cmd, shell=True, stderr=STDOUT).communicate()
print stdout
</snippet></ROW><ROW><id>1019059</id><snippet>&gt;&gt;&gt; a.x
GET
(10, 100.0)
&gt;&gt;&gt; b.x
&lt;__main__.poweroftwo object at 0x00C57D10&gt;
&gt;&gt;&gt; type(a.x)
GET
&lt;type 'tuple'&gt;
&gt;&gt;&gt; type(b.x)
&lt;class '__main__.poweroftwo'&gt;
</snippet></ROW><ROW><id>1019059</id><snippet>a.x</snippet></ROW><ROW><id>1019059</id><snippet>__get__</snippet></ROW><ROW><id>1019059</id><snippet>__set__</snippet></ROW><ROW><id>1019059</id><snippet>b.x</snippet></ROW><ROW><id>1019265</id><snippet>for row in reader:
    row[-1] = row[-1].replace('/?', '?')
    writer.writerow(row)
</snippet></ROW><ROW><id>1019265</id><snippet>total</snippet></ROW><ROW><id>1019265</id><snippet>needchange</snippet></ROW><ROW><id>1019265</id><snippet>changeList</snippet></ROW><ROW><id>1019596</id><snippet>iter_1 = iter( sorted(list_1) ) # Essentially SELECT...ORDER BY
iter_2 = iter( sorted(list_2) )
eof_1 = False
eof_2 = False
try:
    item_1 = iter_1.next()
except StopIteration:
    eof_1= True
try:
    item_2 = iter_2.next()
except StopIteration:
    eof_2= True
while not eof_1 and not eof_2:
    if item_1 == item_2:
        # do your update to create the new master list.
        try:
            item_2 = iter_2.next()
        except StopIteration:
            eof_2= True
    elif item_1 &lt; item_2:
        try:
            item_1 = iter_1.next()
        except StopIteration:
            eof_1= True
    elif item_2 &lt; item_1:
        # Do your insert to create the new master list.
        try:
            item_2 = iter_2.next()
        except StopIteration:
            eof_2= True
assert eof_1 or eof_2
if eof_1:
    # item_2 and the rest of list_2 are inserts.
elif eof_2:
    pass
else:
    raise Error("What!?!?")
</snippet></ROW><ROW><id>1019596</id><snippet>StopIteration</snippet></ROW><ROW><id>1019852</id><snippet>"Counts answer"
Please update these counts and feel free to add/modify.

Do you usually read config options via:
- command-line/gui options : 1
- a config text file       : 0


How do multiple modules/objects have access to these options?
- they receive them from the caller as an argument: 1
- read them directly from the config text file:     0


When doing unit-testing of a single module (NOT the "main" module)
and the module uses one option, e.g. input filename:
- unit-test framework provides own "simplified" config functionality: 0
- unit-test framework invokes main app's config functionality:        1


Do you use:
- optparse:  1
- getopt:    0
- others?


Please list any config management "design pattern" 
(usable in Python) and add a count if you use it - thanks.
- 
-
</snippet></ROW><ROW><id>1019915</id><snippet>type</snippet></ROW><ROW><id>1019915</id><snippet>&gt;&gt;&gt; MySub = type("MySub", (DrvCrystalfontz, some_other_class), 
         {'some_extra method' : lamba self: do_something() })
</snippet></ROW><ROW><id>1019915</id><snippet>DrvCrystalfontz</snippet></ROW><ROW><id>1019915</id><snippet> some_other_class</snippet></ROW><ROW><id>1019915</id><snippet>some_extra_method</snippet></ROW><ROW><id>1020077</id><snippet>source = open("PALTemplateData.csv","rb")
reader = csv.reader(source , dialect)

target = open("AnotherFile.csv","wb")
writer = csv.writer(target , dialect)
</snippet></ROW><ROW><id>1020077</id><snippet>source = open("PALTemplateData.csv","rb")

target = open("AnotherFile.csv","wb")
</snippet></ROW><ROW><id>1020099</id><snippet>Python 2.5.4 (r254:67916, May 31 2009, 16:56:01)
[GCC 4.3.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import Image as I, ImageFont as IF, ImageDraw as ID
&gt;&gt;&gt; t= u"סֶפֶר ספר"
&gt;&gt;&gt; t
u'\u05e1\u05b6\u05e4\u05b6\u05e8 \u05e1\u05e4\u05e8'
&gt;&gt;&gt; i= I.new("L", (200, 200))
&gt;&gt;&gt; d= ID.Draw(i)
&gt;&gt;&gt; f= IF.truetype("/usr/share/fonts/dejavu/DejaVuSans.ttf", 20)
&gt;&gt;&gt; d1.text( (100, 40), t, fill=255, font=f)
&gt;&gt;&gt; i.save("/tmp/dummy.png", optimize=1)
</snippet></ROW><ROW><id>1020099</id><snippet>Deja Vu Sans</snippet></ROW><ROW><id>1020099</id><snippet>Arial Unicode MS</snippet></ROW><ROW><id>1020113</id><snippet>static PyObject* py_set_perlin_parameters(PyObject* self, PyObject* args)
{
    int octaves;
    double persistence;
    PyObject* zoom_list;
    int zoom_count = 0;
    std::vector&lt;double&gt; zoom_vector;

    if(!PyArg_ParseTuple(args, "idO!:set_perlin_parameters", &amp;octaves, &amp;persistence, &amp;PyList_Type, &amp;zoom_list))
    {
    	return NULL;
    }

    if(!PyList_Check(zoom_list)) 
    {
    	PyErr_SetString(PyExc_TypeError, "set_perlin_parameters: third parameter must be a list");
        return NULL;
    }

    zoom_count = PyList_Size(zoom_list);

    for(int i = 0; i &lt; zoom_count; i++)
    {
    	PyObject* list_val;
    	double val;

    	list_val = PyList_GetItem(zoom_list, i);

    	if(list_val == NULL)
    	{
    		return NULL;
    	}

    	val = PyFloat_AsDouble(list_val);

    	zoom_vector.push_back(val);
    }

    set_perlin_parameters(octaves, persistence, zoom_vector);

    return Py_None;
}
</snippet></ROW><ROW><id>1020431</id><snippet>subplan = ForeignKey('self')
</snippet></ROW><ROW><id>1020431</id><snippet>subplan = SelfReferenceProperty()
</snippet></ROW><ROW><id>1020431</id><snippet>__new__</snippet></ROW><ROW><id>1020482</id><snippet>class Animal(object):
    def speak(self):
        raise NotImplementedError()

    def speak_twice(self):
        self.speak()
        self.speak()

class Dog(Animal):
    def speak(self):
        print "woff!"

class Cat(Animal):
    def speak(self):
        print "meow"
</snippet></ROW><ROW><id>1020482</id><snippet>"speak_twice"</snippet></ROW><ROW><id>1020482</id><snippet>"speak_twice"</snippet></ROW><ROW><id>1020482</id><snippet>"number_of_legs"</snippet></ROW><ROW><id>1020482</id><snippet>"print_number_of_legs"</snippet></ROW><ROW><id>1020488</id><snippet>def fixedpoint(f, start, stop):
    while start != stop:
        yield start
        start = f(start)
</snippet></ROW><ROW><id>1020488</id><snippet>print ".".join(x.name for x in fixedpoint(lambda p:p.parent, self, None))
</snippet></ROW><ROW><id>1020724</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>1020724</id><snippet>&gt;&gt;&gt; my_list = [1, 2, 3]
&gt;&gt;&gt; dict.fromkeys(my_list)
{1: None, 2: None, 3: None}
</snippet></ROW><ROW><id>1020724</id><snippet>None</snippet></ROW><ROW><id>1020724</id><snippet>&gt;&gt;&gt; my_list = [1, 2, 3]
&gt;&gt;&gt; dict.fromkeys(my_list, 0)
{1: 0, 2: 0, 3: 0}
</snippet></ROW><ROW><id>1020931</id><snippet>&gt;&gt;&gt; req.headers['content-type']
'text/html; charset=windows-1251'
</snippet></ROW><ROW><id>1020931</id><snippet>&gt;&gt;&gt; encoding=req.headers['content-type'].split('charset=')[-1]
&gt;&gt;&gt; ucontent = unicode(content, encoding)
</snippet></ROW><ROW><id>1020931</id><snippet>ucontent</snippet></ROW><ROW><id>1020931</id><snippet>&gt;&gt;&gt; print ucontent[76:110].encode('utf-8')
&lt;title&gt;Lenta.ru: Главное: &lt;/title&gt;
</snippet></ROW><ROW><id>1020931</id><snippet>&gt;&gt;&gt; x=u'\u0413\u043b\u0430\u0432\u043d\u043e\u0435'
&gt;&gt;&gt; print x.encode('utf-8')
Главное
&gt;&gt;&gt; x in ucontent
True
&gt;&gt;&gt; ucontent.find(x)
93
</snippet></ROW><ROW><id>1021293</id><snippet>&gt;&gt;&gt; string = ("some text "
...           "more text "
...           "and even more")
&gt;&gt;&gt; string
'some text more text and even more'
</snippet></ROW><ROW><id>1021293</id><snippet>&gt;&gt;&gt; string = """some text
...             more text
...             and even more"""
</snippet></ROW><ROW><id>1021484</id><snippet>class FooBar(Foo):

    @property
    def bar(self):
        # return the same value
        # as in the base class
        return Foo.bar(self)
</snippet></ROW><ROW><id>1021484</id><snippet>class FooBar(Foo):

    @property
    def bar(self):
        # return the same value
        # as in the base class
        return Foo.bar.fget(self)
</snippet></ROW><ROW><id>1021506</id><snippet>re.split(',(?=(?:[^"]*"[^"]*")*[^"]*$)', str)
</snippet></ROW><ROW><id>1021930</id><snippet>db.djangoforms.ModelForm</snippet></ROW><ROW><id>1022132</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>1022132</id><snippet>inspect.getargspec(func)</snippet></ROW><ROW><id>1022151</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; x = [1, 2, 3, 4, 3, 4]
&gt;&gt;&gt; random.shuffle(x)
&gt;&gt;&gt; x
[4, 4, 3, 1, 2, 3]
&gt;&gt;&gt; random.shuffle(x)
&gt;&gt;&gt; x
[3, 4, 2, 1, 3, 4]
</snippet></ROW><ROW><id>1022505</id><snippet>__contains__</snippet></ROW><ROW><id>1022505</id><snippet>class A(object):
    def __init__(self):
       self.mydict = {}

    def __contains__(self, other):
       return self.mydict.__contains__(other)
</snippet></ROW><ROW><id>1022505</id><snippet>return other in self.mydict</snippet></ROW><ROW><id>1022505</id><snippet>class BlackMagic(object):
    def __init__(self):
        self.mydict = {}
        self.__class__ = type(self.__class__.__name__, (self.__class__,), {})
        self.__class__.__contains__ = self.mydict.__contains__
</snippet></ROW><ROW><id>1022505</id><snippet>self.__class__</snippet></ROW><ROW><id>1022505</id><snippet>self</snippet></ROW><ROW><id>1022505</id><snippet>self.__magicname__</snippet></ROW><ROW><id>1022505</id><snippet>self.__class__.__magicname__</snippet></ROW><ROW><id>1022505</id><snippet>staticmethod</snippet></ROW><ROW><id>1022505</id><snippet>self</snippet></ROW><ROW><id>1022505</id><snippet>in</snippet></ROW><ROW><id>1022505</id><snippet>BlackMagic</snippet></ROW><ROW><id>1022505</id><snippet>-mtimeit</snippet></ROW><ROW><id>1022505</id><snippet>built-in method</snippet></ROW><ROW><id>1022505</id><snippet>self.__class__</snippet></ROW><ROW><id>1022505</id><snippet>__new__</snippet></ROW><ROW><id>1022505</id><snippet>__setattr__</snippet></ROW><ROW><id>1022761</id><snippet>sqlite</snippet></ROW><ROW><id>1022761</id><snippet>import sqlite3

c = sqlite3.Connection(':memory:')
c.execute('CREATE TABLE data (a, b, c)')

c.executemany('INSERT INTO data VALUES (?, ?, ?)', [
    (1, None,    1),
    (1,    0,    3),
    (1,    0,    3),
    (1,    2,    3),
    (2, None,    1),
    (2,    0, None),
    (2,    2,    2),
    (2,    2,    4),
    (2,    2, None),
])

# queries
# ...
</snippet></ROW><ROW><id>1022793</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1022793</id><snippet>env=</snippet></ROW><ROW><id>1022921</id><snippet>mod_wsgi</snippet></ROW><ROW><id>1023088</id><snippet>os.nice</snippet></ROW><ROW><id>1023088</id><snippet>os.nice(increment)
Add increment to the process’s “niceness”. Return the new niceness. Availability: Unix.
</snippet></ROW><ROW><id>1023245</id><snippet>from cPickle import dumps
from cookielib import CookieJar
import threading

class MyCookieJar(CookieJar):
    def __getstate__(self):
        state = self.__dict__.copy()
        del state['_cookies_lock']
        return state

    def __setstate__(self, state):
        self.__dict__ = state
        self._cookies_lock = threading.RLock()

class Person(object):
    def __init__(self, name):
        self.name = name
        self.cookies = MyCookieJar()

bob = Person("bob")
print dumps(bob)
</snippet></ROW><ROW><id>1023872</id><snippet>def getAvgValues(data, avgSampleTime):
  lastTime = 0
  prevValsBuf = []
  prevValsStart = 0
  tot = 0
  for t, v in data:
    avgStart = t - avgSampleTime
    # remove too old values
    while prevValsStart &lt; len(prevValsBuf):
      pt, pv = prevValsBuf[prevValsStart]
      if pt &gt; avgStart:
        break
      tot -= pv
      prevValsStart += 1
    # add new item
    tot += v
    prevValsBuf.append((t, v))
    # yield result
    numItems = len(prevValsBuf) - prevValsStart
    yield (t, tot / numItems)
    # clean prevVals if it's time
    if prevValsStart * 2 &gt; len(prevValsBuf):
      prevValsBuf = prevValsBuf[prevValsStart:]
      prevValsStart = 0
      # recalculate tot for not accumulating float precision error
      tot = sum(v for (t, v) in prevValsBuf)
</snippet></ROW><ROW><id>1023909</id><snippet>(.)\1
</snippet></ROW><ROW><id>1023909</id><snippet>import re

regexp = re.compile(r"(.)\1")
data = ["parrot","follia","carrot","mattia","rettoo","melone"]

for str in data:
    match = re.search(regexp, str)
    if match:
        print str, "&lt;- match for double", match.group(1)
    else:
        print str, "&lt;- doesn't match"
</snippet></ROW><ROW><id>1024164</id><snippet>import urlparse
qsdata = "test=test&amp;test2=test2&amp;test2=test3"
qs = dict( (k, v if len(v)&gt;1 else v[0] ) 
           for k, v in urlparse.parse_qs(qsdata).iteritems() )
print qs
</snippet></ROW><ROW><id>1024426</id><snippet>doctest.ELLIPSIS</snippet></ROW><ROW><id>1024426</id><snippet>...</snippet></ROW><ROW><id>1024426</id><snippet>doctest</snippet></ROW><ROW><id>1024426</id><snippet>&gt;&gt;&gt; print range(20) # doctest:+ELLIPSIS
[0, 1, ..., 18, 19]
</snippet></ROW><ROW><id>1024426</id><snippet>optionflags=</snippet></ROW><ROW><id>1024426</id><snippet>doctest.testfile</snippet></ROW><ROW><id>1024426</id><snippet>|</snippet></ROW><ROW><id>1024449</id><snippet>def my_func(a, b='abc', c='def'):
    print a, b, c
</snippet></ROW><ROW><id>1024449</id><snippet>my_func('hello', c='world')
</snippet></ROW><ROW><id>1024449</id><snippet>hello abc world
</snippet></ROW><ROW><id>1024449</id><snippet>def my_other_func(a, *b, **c):
    print a, b, c
</snippet></ROW><ROW><id>1024449</id><snippet>*b</snippet></ROW><ROW><id>1024449</id><snippet>b</snippet></ROW><ROW><id>1024449</id><snippet>a</snippet></ROW><ROW><id>1024449</id><snippet>tuple</snippet></ROW><ROW><id>1024449</id><snippet>**c</snippet></ROW><ROW><id>1024449</id><snippet>c</snippet></ROW><ROW><id>1024449</id><snippet>dict</snippet></ROW><ROW><id>1024449</id><snippet>my_other_func('hello', 'world', 'what a', state='fine', what='day')
</snippet></ROW><ROW><id>1024449</id><snippet>hello ('world', 'what a') {'state': 'fine', 'what': 'day'}
</snippet></ROW><ROW><id>1024459</id><snippet>feof</snippet></ROW><ROW><id>1024459</id><snippet>+ " &amp;"</snippet></ROW><ROW><id>1024459</id><snippet>&amp;</snippet></ROW><ROW><id>1024459</id><snippet>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(("", port))
s.listen(5)
print "OK."
print "  Listening on port:", port
import subprocess
try:
    while 1:
        con, addr = s.accept()
        try:
            datagram = con.recv(1024)
            if not datagram:
                continue
            print "Rx Cmd:", datagram
            print "Launch:", datagram
            process = subprocess.Popen(datagram, shell=True, stdout=subprocess.PIPE)
            stdout, stderr = process.communicate()
            con.send(stdout)
        finally:
            print "closing connection"
            con.close()
except KeyboardInterrupt:
    pass
finally:
    print "closing socket"
    s.close()
</snippet></ROW><ROW><id>1024459</id><snippet>fgets</snippet></ROW><ROW><id>1024468</id><snippet>meta_path</snippet></ROW><ROW><id>1024489</id><snippet>reindent.py</snippet></ROW><ROW><id>1024489</id><snippet>Tools/scripts/</snippet></ROW><ROW><id>1024592</id><snippet>&lt;</snippet></ROW><ROW><id>1024592</id><snippet>my_script &lt; testcases.in
</snippet></ROW><ROW><id>1024765</id><snippet>select_related</snippet></ROW><ROW><id>1024765</id><snippet>select_related</snippet></ROW><ROW><id>1024765</id><snippet> GroupMembership.objects.filter( user="someUser" )
</snippet></ROW><ROW><id>1024765</id><snippet> groups = GroupMembership.objects.filter( user="someUser" )
</snippet></ROW><ROW><id>1024765</id><snippet>groups</snippet></ROW><ROW><id>1024846</id><snippet>import win32api

def get_version(filename):
    info = win32api.GetFileVersionInfo(filename, "\\")
    ms = info['ProductVersionMS']
    ls = info['ProductVersionLS']
    return win32api.HIWORD(ms), win32api.LOWORD(ms), win32api.HIWORD(ls), win32api.LOWORD(ls)

if __name__ == '__main__':
    print ".".join([str (i) for i in get_version(r"C:\Program Files\Mozilla Firefox\firefox.exe")])
</snippet></ROW><ROW><id>1024851</id><snippet>&gt;&gt;&gt; d = {'key':'value'}
&gt;&gt;&gt; print d
{'key': 'value'}
&gt;&gt;&gt; d['mynewkey'] = 'mynewvalue'
&gt;&gt;&gt; print d
{'mynewkey': 'mynewvalue', 'key': 'value'}
</snippet></ROW><ROW><id>1025206</id><snippet>import elementtree.ElementTree as ET

html = """&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;
&lt;p&gt;TEXT STRING HERE ......&lt;/p&gt; 
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;"""

for e in ET.fromstring(html).getiterator():
    if e.text.find('TEXT STRING HERE') != -1:
        print "Found string %r, element = %r" % (e.text, e)
</snippet></ROW><ROW><id>1025210</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>1025232</id><snippet>optparse</snippet></ROW><ROW><id>1025232</id><snippet>argparse</snippet></ROW><ROW><id>1025232</id><snippet>add_argument</snippet></ROW><ROW><id>1025232</id><snippet>nargs='*'</snippet></ROW><ROW><id>1025232</id><snippet>'+'</snippet></ROW><ROW><id>1025331</id><snippet>import win32file, win32api
import os


def ProgressRoutine(TotalFileSize, TotalBytesTransferred, StreamSize, StreamBytesTransferred,
    StreamNumber, CallbackReason, SourceFile, DestinationFile, Data):
    print Data
    print TotalFileSize, TotalBytesTransferred, StreamSize, StreamBytesTransferred, StreamNumber, CallbackReason, SourceFile, DestinationFile
    ##if TotalBytesTransferred &gt; 100000:
    ##    return win32file.PROGRESS_STOP
    return win32file.PROGRESS_CONTINUE

temp_dir=win32api.GetTempPath()
fsrc=win32api.GetTempFileName(temp_dir,'cfe')[0]
fdst=win32api.GetTempFileName(temp_dir,'cfe')[0]
print fsrc, fdst

f=open(fsrc,'w')
f.write('xxxxxxxxxxxxxxxx\n'*32768)
f.close()
## add a couple of extra data streams
f=open(fsrc+':stream_y','w')
f.write('yyyyyyyyyyyyyyyy\n'*32768)
f.close()
f=open(fsrc+':stream_z','w')
f.write('zzzzzzzzzzzzzzzz\n'*32768)
f.close()

operation_desc='Copying '+fsrc+' to '+fdst
win32file.CopyFileEx(fsrc, fdst, ProgressRoutine, operation_desc, False,   win32file.COPY_FILE_RESTARTABLE)
</snippet></ROW><ROW><id>1025355</id><snippet>threadsafety</snippet></ROW><ROW><id>1025369</id><snippet>gconftool-2 --type bool --set /apps/nautilus/preferences/media_automount false
</snippet></ROW><ROW><id>1025369</id><snippet>import subprocess

def setAutomount(value):
    """
    @type value: boolean
    """
    cmd = ['gconftool-2', '--type', 'bool', '--set', 
            '/apps/nautilus/preferences/media_automount']
    cmd.append(str(value).lower())
    subprocess.check_call(cmd)

setAutomount(False)
</snippet></ROW><ROW><id>1025528</id><snippet>import re
ut0 = re.compile(r'(\d)0+$')

thelist = [ut0.sub(r'\1', "%12f" % x) for x in a]

print '\n'.join(thelist)
</snippet></ROW><ROW><id>1025528</id><snippet>import re
import textwrap

a = [  5.50056103e+02,   6.77383566e+03,   6.01001513e+05,
         3.55425142e+08,   7.07254875e+05,   8.83174744e+02,
         8.22320510e+01,   4.25076609e+08,   6.28662635e+07,
         1.56503068e+02]

thelist = textwrap.dedent(
        '\n'.join(ut0.sub(r'\1', "%20f" % x) for x in a)).splitlines()

print '\n'.join(thelist)
</snippet></ROW><ROW><id>1025528</id><snippet>      550.056103
     6773.83566
   601001.513
355425142.0
   707254.875
      883.174744
       82.232051
425076609.0
 62866263.5
      156.503068
</snippet></ROW><ROW><id>1025904</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>1025904</id><snippet>import BaseHTTPServer

HOST_NAME = 'localhost'
PORT_NUMBER = 1337

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        s.send_response(200)
        s.send_header('Content-Type', 'text/html')
        s.end_headers()

        # Get parameters in query.
        params = {}
        index = s.path.rfind('?')
        if index &gt;= 0:
            parts = s.path[index + 1:].split('&amp;')
            for p in parts:
                try:
                    a, b = p.split('=', 2)
                    params[a] = b
                except:
                    params[p] = ''

        # !!!
        # Check if there is a color parameter and send to controller...
        if 'color' in params:
            print 'Send something to controller...'
        # !!!

        s.wfile.write('&lt;pre&gt;%s&lt;/pre&gt;' % params)

if __name__ == '__main__':
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), MyHandler)

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

    httpd.server_close()
</snippet></ROW><ROW><id>1025904</id><snippet>http://localhost:1337/?color=ffaabb</snippet></ROW><ROW><id>1026477</id><snippet>.extra(select={'is_staff': "%s.name='staff'" % Permission._meta.db_table, 'is_student': "%s.name='student'" % Permission._meta.db_table, })
</snippet></ROW><ROW><id>1026626</id><snippet>import ctypes, os
try:
 is_admin = os.getuid() == 0
except AttributeError:
 is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0

print is_admin
</snippet></ROW><ROW><id>1026985</id><snippet>print a
</snippet></ROW><ROW><id>1026985</id><snippet>in foo.py:

************* Module foo
C:  1: Black listed name "foo"
C:  1: Missing docstring
E:  1: Undefined variable 'a'


...

|error      |1      |1        |=          |
</snippet></ROW><ROW><id>1026985</id><snippet>bar = "Foo"
foo = "Bar"
def baz(X):
    return bar if X else fo0

print baz(input("True or False: "))
</snippet></ROW><ROW><id>1026985</id><snippet>Processing ternary...
True or False: True
Foo

Warnings...

ternary.py:6: No global (fo0) found
ternary.py:8: Using input() is a security problem, consider using raw_input()
</snippet></ROW><ROW><id>1027729</id><snippet>import</snippet></ROW><ROW><id>1027729</id><snippet>mod2</snippet></ROW><ROW><id>1027729</id><snippet>import mod2</snippet></ROW><ROW><id>1027729</id><snippet>mod2</snippet></ROW><ROW><id>1027729</id><snippet>import</snippet></ROW><ROW><id>1027729</id><snippet>import</snippet></ROW><ROW><id>1027729</id><snippet>mod2</snippet></ROW><ROW><id>1027729</id><snippet>mod2.foobar</snippet></ROW><ROW><id>1027729</id><snippet>foobar</snippet></ROW><ROW><id>1027729</id><snippet>mod2</snippet></ROW><ROW><id>1027729</id><snippet>import mod2</snippet></ROW><ROW><id>1027739</id><snippet>python someFile.py
</snippet></ROW><ROW><id>1027739</id><snippet>&gt;&gt;&gt; variables= {}
&gt;&gt;&gt; execfile( "someFile.py", variables )
&gt;&gt;&gt; print variables # globals from the someFile module
</snippet></ROW><ROW><id>1027784</id><snippet>ssh -L1521:localhost:1521 user@server.com
</snippet></ROW><ROW><id>1027850</id><snippet>flup</snippet></ROW><ROW><id>1027850</id><snippet>auth</snippet></ROW><ROW><id>1028189</id><snippet>myFile=open(r'C:\NEWMASTERLIST\FULLLIST.txt','r+')
</snippet></ROW><ROW><id>1028632</id><snippet>main</snippet></ROW><ROW><id>1028632</id><snippet>execfile</snippet></ROW><ROW><id>1028632</id><snippet>try</snippet></ROW><ROW><id>1028632</id><snippet>except</snippet></ROW><ROW><id>1028632</id><snippet>sys.exit</snippet></ROW><ROW><id>1028632</id><snippet>main</snippet></ROW><ROW><id>1028632</id><snippet>except</snippet></ROW><ROW><id>1028632</id><snippet>main.py</snippet></ROW><ROW><id>1028632</id><snippet>try:
  execfile('whatever.py')
except SystemExit:
  print "sys.exit was called but I'm proceeding anyway (so there!-)."
print "so I'll print this, etc, etc"
</snippet></ROW><ROW><id>1028632</id><snippet>whatever.py</snippet></ROW><ROW><id>1028632</id><snippet>sys.exit(0)</snippet></ROW><ROW><id>1028632</id><snippet>execfile</snippet></ROW><ROW><id>1028632</id><snippet>execfile</snippet></ROW><ROW><id>1028632</id><snippet>SystemExit</snippet></ROW><ROW><id>1029829</id><snippet>process_message</snippet></ROW><ROW><id>1029829</id><snippet>raise</snippet></ROW><ROW><id>1029829</id><snippet>raise</snippet></ROW><ROW><id>1029923</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>1029923</id><snippet>optparse</snippet></ROW><ROW><id>1029923</id><snippet>del sys.argv[1:]</snippet></ROW><ROW><id>1029923</id><snippet>unittest</snippet></ROW><ROW><id>1029923</id><snippet>unittest</snippet></ROW><ROW><id>1029975</id><snippet>${"%20s%10s" % ("string 1", "string 2")}
</snippet></ROW><ROW><id>1029975</id><snippet>&gt;&gt;&gt; from mako.template import Template
&gt;&gt;&gt; Template('${"%20s%10s" % ("string 1", "string 2")}').render()
'            string 1  string 2'
</snippet></ROW><ROW><id>1030227</id><snippet>import subprocess

text = raw_input("Enter text to be classified: ")
p1 = subprocess.Popen('bin/stupidfilter', 'data/c_trbf')
stupid = float(p1.communicate(text)[0])

if stupid:
    print "Text is likely to be stupid"
else:
    print "Text is not likely to be stupid"
</snippet></ROW><ROW><id>1030320</id><snippet>import pynotify
import sys
pynotify.init(sys.argv[0])
notification = pynotify.Notification("Title", "body", "dialog-info")
notification.set_urgency(pynotify.URGENCY_NORMAL)
notification.set_timeout(pynotify.EXPIRES_DEFAULT)
notification.show()
</snippet></ROW><ROW><id>1030578</id><snippet>'_x'</snippet></ROW><ROW><id>1030578</id><snippet>_</snippet></ROW><ROW><id>1030697</id><snippet>print</snippet></ROW><ROW><id>1030697</id><snippet>print</snippet></ROW><ROW><id>1031243</id><snippet>dict( [ (n, a.get(n, 0)+b.get(n, 0)) for n in set(a)|set(b) ] )
</snippet></ROW><ROW><id>1031243</id><snippet>dict( (n, a.get(n, 0)+b.get(n, 0)) for n in set(a)|set(b) )
</snippet></ROW><ROW><id>1031259</id><snippet>def application(environ, start_response):
    ...
</snippet></ROW><ROW><id>1031259</id><snippet>...
environ['REQUEST_URI'];
...
</snippet></ROW><ROW><id>1031510</id><snippet>x = [70, 80, 90, 100, 110]
y = [49.7, 80.6, 122.5, 153.8, 163.0]
f = interpolate.UnivariateSpline(x, y, s=0)
xnew = np.arange(70,111,1)

plt.plot(x,y,'x',xnew,f(xnew))
</snippet></ROW><ROW><id>1031510</id><snippet>yToFind = 140
yreduced = np.array(y) - yToFind
freduced = interpolate.UnivariateSpline(x, yreduced, s=0)
freduced.roots()
</snippet></ROW><ROW><id>1031724</id><snippet>cProfile.runctx("self.profileCommand(100)", globals(),locals())
</snippet></ROW><ROW><id>1031724</id><snippet>class A(object):
    def performProfile(self):
        import cProfile
        cProfile.runctx("self.profileCommand(100)", globals(),locals())

    def profileCommand(self, a):
        for i in xrange(a):
            pass
        print "end."

A().performProfile()
</snippet></ROW><ROW><id>1031780</id><snippet>recovery</snippet></ROW><ROW><id>1031780</id><snippet>service properties</snippet></ROW><ROW><id>1031780</id><snippet>Restart the Service</snippet></ROW><ROW><id>1031780</id><snippet>sys.exit()</snippet></ROW><ROW><id>1031780</id><snippet>self.iVal</snippet></ROW><ROW><id>1031780</id><snippet>5</snippet></ROW><ROW><id>1031785</id><snippet>?</snippet></ROW><ROW><id>1031785</id><snippet>!</snippet></ROW><ROW><id>1031785</id><snippet>%run</snippet></ROW><ROW><id>1031785</id><snippet>import</snippet></ROW><ROW><id>1031785</id><snippet>def</snippet></ROW><ROW><id>1031785</id><snippet>class</snippet></ROW><ROW><id>1031785</id><snippet>!</snippet></ROW><ROW><id>1031785</id><snippet>?</snippet></ROW><ROW><id>1031785</id><snippet>%run</snippet></ROW><ROW><id>1031878</id><snippet>res = dict((v,k) for k,v in a.iteritems())
</snippet></ROW><ROW><id>1032282</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)

        self.panel = wx.Panel(self)

        # create controls
        self.cntrlPanel = wx.Panel(self.panel)
        stc1 = wx.StaticText(self.cntrlPanel, label="wow it works")
        stc2 = wx.StaticText(self.cntrlPanel, label="yes it works")
        btn = wx.Button(self.cntrlPanel, label="help?")
        btn.Bind(wx.EVT_BUTTON, self._onShowHelp)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(stc1)
        sizer.Add(stc2)
        sizer.Add(btn)
        self.cntrlPanel.SetSizer(sizer)


        # create help panel
        self.helpPanel = wx.Panel(self.panel)
        self.stcHelp = wx.StaticText(self.helpPanel, label="help help help\n"*8)
        btn = wx.Button(self.helpPanel, label="close[x]")
        btn.Bind(wx.EVT_BUTTON, self._onShowCntrls)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.stcHelp)
        sizer.Add(btn)
        self.helpPanel.SetSizer(sizer)
        self.helpPanel.Hide()
        self.helpPanel.Raise()
        self.helpPanel.SetBackgroundColour((240,250,240))
        self.Bind(wx.EVT_SIZE, self._onSize)

        self._onShowCntrls(None)

    def _onShowHelp(self, event):
        self.helpPanel.SetPosition((0,0))
        self.helpPanel.Show()
        self.cntrlPanel.Hide()

    def _onShowCntrls(self, event):
        self.cntrlPanel.SetPosition((0,0))
        self.helpPanel.Hide()
        self.cntrlPanel.Show()

    def _onSize(self, event):
        event.Skip()
        self.helpPanel.SetSize(self.GetClientSizeTuple())
        self.cntrlPanel.SetSize(self.GetClientSizeTuple())

app = wx.PySimpleApp()
frame = MyFrame()
frame.Show()
app.SetTopWindow(frame)
app.MainLoop()
</snippet></ROW><ROW><id>1032442</id><snippet>def TrueXor(*args):
    return sum(args) == 1
</snippet></ROW><ROW><id>1032442</id><snippet>TrueXor(1, 0, 0)
TrueXor(True, False, False)
</snippet></ROW><ROW><id>1032442</id><snippet>sum( bool(x) for x in args ) == 1</snippet></ROW><ROW><id>1032444</id><snippet>countMap = {}
for v in a.itervalues():
    countMap[v] = countMap.get(v,0) + 1
uni = [ k for k, v in a.iteritems() if countMap[v] == 1]
</snippet></ROW><ROW><id>1033498</id><snippet>lambda</snippet></ROW><ROW><id>1033498</id><snippet>lambda</snippet></ROW><ROW><id>1033498</id><snippet>launchEmployee</snippet></ROW><ROW><id>1033498</id><snippet>eval</snippet></ROW><ROW><id>1033498</id><snippet>display</snippet></ROW><ROW><id>1033498</id><snippet>lambda</snippet></ROW><ROW><id>1033498</id><snippet>lambda</snippet></ROW><ROW><id>1033498</id><snippet>type(lambda:0)</snippet></ROW><ROW><id>1033498</id><snippet>'menuBar':[('File', 0, [('Save', 0, (lambda widget=None: widget.onSave()))])],
 'title': 'Employee Data Entry'}
</snippet></ROW><ROW><id>1033498</id><snippet>display = DisplayScreen(**config)</snippet></ROW><ROW><id>1033498</id><snippet>config</snippet></ROW><ROW><id>1033498</id><snippet>def place_widget(widget, mess):
  if isinstance(mess, (list, tuple)):
    for item in mess:
      place_widget(widget, item)
  elif isinstance(mess, type(lambda:0)):
    if mess.func_code.co_varnames[-1:] == ('widget',):
      mess.func_defaults = mess.func_defaults[:-1] + (widget,)
</snippet></ROW><ROW><id>1033498</id><snippet>eval</snippet></ROW><ROW><id>1033498</id><snippet>dict</snippet></ROW><ROW><id>1033498</id><snippet>lambda</snippet></ROW><ROW><id>1033498</id><snippet>inspect</snippet></ROW><ROW><id>1033498</id><snippet>func_defaults</snippet></ROW><ROW><id>1033498</id><snippet>inspect</snippet></ROW><ROW><id>1033498</id><snippet>class Bunch(object): pass
widgets = Bunch()
</snippet></ROW><ROW><id>1033498</id><snippet>widgets.foobar</snippet></ROW><ROW><id>1033498</id><snippet>foobar</snippet></ROW><ROW><id>1033498</id><snippet>eval</snippet></ROW><ROW><id>1033498</id><snippet>lambda</snippet></ROW><ROW><id>1033498</id><snippet>lambda: widgets.foobar.onSave()
</snippet></ROW><ROW><id>1033498</id><snippet>eval</snippet></ROW><ROW><id>1033498</id><snippet>lambda</snippet></ROW><ROW><id>1033516</id><snippet>lgrAdminObject.fields</snippet></ROW><ROW><id>1033516</id><snippet>class Photos(lgrAdminObject):
    fields = list(lgrAdminObject.fields)
</snippet></ROW><ROW><id>1033530</id><snippet>eval</snippet></ROW><ROW><id>1033530</id><snippet>...
def import_plugin(name):
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod

...
feed_parser = import_plugin('parsers.%s' % feed['format'])
data = feed_parser(...)
...
</snippet></ROW><ROW><id>1033530</id><snippet>parsers/csv.py</snippet></ROW><ROW><id>1033530</id><snippet>#!/usr/bin/python
from __future__ import absolute_import

import urllib2
import csv

def parse_feed(...):
    ...
</snippet></ROW><ROW><id>1033530</id><snippet>class BaseParser(object):
    ...

class CSVParser(BaseParser):
    ...
register_feed_parser(CSVParser, ['text/plain', 'text/csv'])
...

parsers = get_registered_feed_parsers(feed['mime_type'])
data = None
for parser in parsers:
    try:
        data = parser(feed['data'])
        if data is not None: break
    except ParsingError:
        pass
...
</snippet></ROW><ROW><id>1034453</id><snippet>duplicate = []
# Sort the list so we can compare adjacent values
fail.sort()
#if you didn't want to modify the list in place you can use:
#sortedFail = sorted(fail)
#      and then use sortedFail in the rest of the code instead of fail
for i, x in enumerate(fail):
    if i+1 == len(fail):
        #end of the list
        break
    if x[:2] == fail[i+1][:2]:
        if x not in duplicate:
            duplicate.add(x)
        if fail[i+1] not in duplicate:
            duplicate.add(fail[i+1])
# diff is just anything not in duplicate as far as I can tell from the explanation
diff = [d for d in fail if d not in duplicate]
</snippet></ROW><ROW><id>1034453</id><snippet>duplicate: [
              ['95d1543adea47e88923c3d4ad56e9f65c2b40c76', 'ron\\c', ['apa.txt']], 
              ['95d1543adea47e88923c3d4ad56e9f65c2b40c76', 'ron\\c', 'knark.txt']
           ]

diff: [
          ['b5cc17d3a35877ca8b76f0b2e07497039c250696', 'ron\\a', ['apa2.txt']], 
          ['b5cc17d3a35877ca8b76f0b2e07497039c250696', 'ron\\c', 'apa1.txt'], 
          ['da39a3ee5e6b4b0d3255bfef95601890afd80709', 'ron\\a\\include', ['svin.txt']],
          ['da39a3ee5e6b4b0d3255bfef95601890afd80709', 'ron\\b\\include', 'Test.java'],
          ['da39a3ee5e6b4b0d3255bfef95601890afd80709', 'ron\\d', 'Sourcecheck.py']
      ]
</snippet></ROW><ROW><id>1034455</id><snippet>sizer = wx.BoxSizer(wx.VERTICAL)
sizer.Add(self.canvas, 1, wx.EXPAND)
self.SetSizer(sizer)
</snippet></ROW><ROW><id>1034633</id><snippet>str()</snippet></ROW><ROW><id>1034633</id><snippet>def xstr(s):
    if s is None:
        return ''
    return str(s)
</snippet></ROW><ROW><id>1034661</id><snippet>$ type time
time is a shell keyword
</snippet></ROW><ROW><id>1034886</id><snippet>Partition-based selection</snippet></ROW><ROW><id>1034886</id><snippet>Quick select</snippet></ROW><ROW><id>1035329</id><snippet>transaction</snippet></ROW><ROW><id>1035329</id><snippet>DBSession.flush()</snippet></ROW><ROW><id>1035329</id><snippet>object1 = Model1(param)
DBSession.add(object1)
DBSession.flush()
assert object1.id != None # flushing the session populates the id

object2 = AnotherModel(object1.id)
</snippet></ROW><ROW><id>1035329</id><snippet>flush()</snippet></ROW><ROW><id>1035329</id><snippet>flush()</snippet></ROW><ROW><id>1035329</id><snippet>flush()</snippet></ROW><ROW><id>1035329</id><snippet>commit()</snippet></ROW><ROW><id>1035329</id><snippet>flush()</snippet></ROW><ROW><id>1035360</id><snippet>f = open("myfile", "rb")
try:
    byte = f.read(1)
    while byte != "":
        # Do stuff with byte.
        byte = f.read(1)
finally:
    f.close()
</snippet></ROW><ROW><id>1035360</id><snippet>with open("myfile", "rb") as f:
    byte = f.read(1)
    while byte != "":
        # Do stuff with byte.
        byte = f.read(1)
</snippet></ROW><ROW><id>1035360</id><snippet>from __future__ import with_statement
</snippet></ROW><ROW><id>1035360</id><snippet>with open("myfile", "rb") as f:
    byte = f.read(1)
    while byte != b"":
        # Do stuff with byte.
        byte = f.read(1)
</snippet></ROW><ROW><id>1035360</id><snippet>b""</snippet></ROW><ROW><id>1035360</id><snippet>with open("myfile", "rb") as f:
    byte = f.read(1)
    while byte:
        # Do stuff with byte.
        byte = f.read(1)
</snippet></ROW><ROW><id>1035392</id><snippet>pywin32</snippet></ROW><ROW><id>1035512</id><snippet>for x in range(100000):
  obj = " " * 10000000
</snippet></ROW><ROW><id>1035610</id><snippet>def f():
    stacks  = inspect.stack()
    grand_parent_locals = stacks[2][0].f_locals
    caller_name = stacks[1][3]
    candidate = grand_parent_locals[caller_name]
</snippet></ROW><ROW><id>1035610</id><snippet>class test(object):
    def f(self):
        stack = inspect.stack()
        parent_func_name = stack[1][3]
        parent_func = getattr(self, parent_func_name).im_func
</snippet></ROW><ROW><id>1035629</id><snippet>from multiprocessing import Process, Queue, current_process
import time

def f(q):
    name = current_process().name
    config = q.get()
    print "%s got config: %s" % (name, config)
    print "%s beginning processing at %s" % (name, time.asctime())
    time.sleep(5)
    print "%s completing processing at %s" % (name, time.asctime())

if __name__ == '__main__':
    q = Queue()
    processes = []
    cfg = { 'my' : 'config', 'data' : 'here' }
    for i in range(3):
        p = Process(target=f, args=(q,))
        processes.append(p)
        p.start()
        q.put(cfg)

    for p in processes:
        p.join()
</snippet></ROW><ROW><id>1035629</id><snippet>Process-1 got config: {'my': 'config', 'data': 'here'}
Process-1 beginning processing at Tue Jun 23 23:34:23 2009
Process-2 got config: {'my': 'config', 'data': 'here'}
Process-2 beginning processing at Tue Jun 23 23:34:23 2009
Process-3 got config: {'my': 'config', 'data': 'here'}
Process-3 beginning processing at Tue Jun 23 23:34:23 2009
Process-1 completing processing at Tue Jun 23 23:34:28 2009
Process-2 completing processing at Tue Jun 23 23:34:28 2009
Process-3 completing processing at Tue Jun 23 23:34:28 2009
</snippet></ROW><ROW><id>1035851</id><snippet>-E, --html-extension        save HTML documents with `.html' extension.
-m,  --mirror             shortcut for -N -r -l inf --no-remove-listing.
-k,  --convert-links      make links in downloaded HTML point to local files.
</snippet></ROW><ROW><id>1035922</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; from tokenize import tokenize
&gt;&gt;&gt; 
&gt;&gt;&gt; python_code = '''
... def foo(): # This is a comment
...     print 'foo'
... '''
&gt;&gt;&gt; 
&gt;&gt;&gt; fp = StringIO(python_code)
&gt;&gt;&gt; 
&gt;&gt;&gt; tokenize(fp.readline)
1,0-1,1:    NL	'\n'
2,0-2,3:    NAME	'def'
2,4-2,7:    NAME	'foo'
2,7-2,8:    OP	'('
2,8-2,9:    OP	')'
2,9-2,10:   OP	':'
2,11-2,30:  COMMENT	'# This is a comment'
2,30-2,31:  NEWLINE	'\n'
3,0-3,4:    INDENT	'    '
3,4-3,9:    NAME	'print'
3,10-3,15:  STRING	"'foo'"
3,15-3,16:  NEWLINE	'\n'
4,0-4,0:    DEDENT	''
4,0-4,0:    ENDMARKER	''
</snippet></ROW><ROW><id>1036152</id><snippet>gdata</snippet></ROW><ROW><id>1036152</id><snippet>gdata.alt.appengine.run_on_appengine</snippet></ROW><ROW><id>1037423</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; from urlgrabber.keepalive import HTTPHandler
&gt;&gt;&gt; keepalive_handler = HTTPHandler()
&gt;&gt;&gt; opener = urllib2.build_opener(keepalive_handler)
&gt;&gt;&gt; urllib2.install_opener(opener)
&gt;&gt;&gt; 
&gt;&gt;&gt; fo = urllib2.urlopen('http://www.python.org')
</snippet></ROW><ROW><id>1037542</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>1038154</id><snippet>default=</snippet></ROW><ROW><id>1038154</id><snippet>def generate_invoice_number():
    # special logic to generate a unique invoice number

class Invoice(DeclarativeBase):
    __tablename__ = 'invoice'
    number = Column(Integer, unique=True, default=generate_invoice_number)
    ...
</snippet></ROW><ROW><id>1038203</id><snippet>connection = sqlite3.connect(':memory:')
</snippet></ROW><ROW><id>1038203</id><snippet>sqlite3</snippet></ROW><ROW><id>1038203</id><snippet>import csv
import sqlite3

db = sqlite3.connect(':memory:')

def init_db(cur):
    cur.execute('''CREATE TABLE foo (
        Row INTEGER,
        Name TEXT,
        Year INTEGER,
        Priority INTEGER)''')

def populate_db(cur, csv_fp):
    rdr = csv.reader(csv_fp)
    cur.executemany('''
        INSERT INTO foo (Row, Name, Year, Priority)
        VALUES (?,?,?,?)''', rdr)

cur = db.cursor()
init_db(cur)
populate_db(cur, open('my_csv_input_file.csv'))
db.commit()
</snippet></ROW><ROW><id>1038203</id><snippet>lod = [ ] # "list of dicts"

def populate_lod(lod, csv_fp):
    rdr = csv.DictReader(csv_fp, ['Row', 'Name', 'Year', 'Priority'])
    lod.extend(rdr)

def query_lod(lod, filter=None, sort_keys=None):
    if filter is not None:
        lod = (r for r in lod if filter(r))
    if sort_keys is not None:
        lod = sorted(lod, key=lambda r:[r[k] for k in sort_keys])
    else:
        lod = list(lod)
    return lod

def lookup_lod(lod, **kw):
    for row in lod:
        for k,v in kw.iteritems():
            if row[k] != str(v): break
        else:
            return row
    return None
</snippet></ROW><ROW><id>1038203</id><snippet>&gt;&gt;&gt; lod = []
&gt;&gt;&gt; populate_lod(lod, csv_fp)
&gt;&gt;&gt; 
&gt;&gt;&gt; pprint(lookup_lod(lod, Row=1))
{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'}
&gt;&gt;&gt; pprint(lookup_lod(lod, Name='Aardvark'))
{'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'}
&gt;&gt;&gt; pprint(query_lod(lod, sort_keys=('Priority', 'Year')))
[{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'},
 {'Name': 'Dog', 'Priority': '1', 'Row': '3', 'Year': '1999'},
 {'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'},
 {'Name': 'Wallaby', 'Priority': '1', 'Row': '5', 'Year': '2000'},
 {'Name': 'Fish', 'Priority': '2', 'Row': '2', 'Year': '1998'},
 {'Name': 'Zebra', 'Priority': '3', 'Row': '6', 'Year': '2001'}]
&gt;&gt;&gt; pprint(query_lod(lod, sort_keys=('Year', 'Priority')))
[{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'},
 {'Name': 'Fish', 'Priority': '2', 'Row': '2', 'Year': '1998'},
 {'Name': 'Dog', 'Priority': '1', 'Row': '3', 'Year': '1999'},
 {'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'},
 {'Name': 'Wallaby', 'Priority': '1', 'Row': '5', 'Year': '2000'},
 {'Name': 'Zebra', 'Priority': '3', 'Row': '6', 'Year': '2001'}]
&gt;&gt;&gt; print len(query_lod(lod, lambda r:1997 &lt;= int(r['Year']) &lt;= 2002))
6
&gt;&gt;&gt; print len(query_lod(lod, lambda r:int(r['Year'])==1998 and int(r['Priority']) &gt; 2))
0
</snippet></ROW><ROW><id>1038569</id><snippet>from PIL import Image

img = Image.new('RGB', (width, height))
img.putdata(my_list)
img.save('image.png')
</snippet></ROW><ROW><id>1038845</id><snippet>url = 'abcdc.com'
if url.endswith('.com'):
    url = url[:-4]
</snippet></ROW><ROW><id>1038845</id><snippet>import re
url = 'abcdc.com'
url = re.sub('\.com$', '', url)
</snippet></ROW><ROW><id>1039897</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(json.loads("""
... {"node0":{
...     "node1":{
...         "attr0":"foo",
...         "attr1":"foo bar",
...         "attr2":"value with        long        spaces"
...     }
... }}
... """))
'{"node0": {"node1": {"attr2": "value with        long        spaces", "attr0": "foo", "attr1": "foo bar"}}}'
</snippet></ROW><ROW><id>1040821</id><snippet>Object.wait()</snippet></ROW><ROW><id>1040821</id><snippet>Object.notify()</snippet></ROW><ROW><id>1040821</id><snippet>Object.notifyAll()</snippet></ROW><ROW><id>1040821</id><snippet>Condition.await()</snippet></ROW><ROW><id>1040821</id><snippet>Condition.signal()</snippet></ROW><ROW><id>1040821</id><snippet>Condition.signalAll()</snippet></ROW><ROW><id>1040821</id><snippet>class Event {
    Lock lock = new ReentrantLock();
    Condition cond = lock.newCondition();
    boolean flag;
    public void doWait() throws InterruptedException {
        lock.lock();
        try {
            while (!flag) {
                cond.await();
            }
        } finally {
            lock.unlock();
        }
    }
    public void doWait(float seconds) throws InterruptedException {
        lock.lock();
        try {
            while (!flag) {
                cond.await((int)(seconds * 1000), TimeUnit.MILLISECONDS);
            }
        } finally {
            lock.unlock();
        }
    }
    public boolean isSet() {
        lock.lock();
        try {
            return flag;
        } finally {
            lock.unlock();
        }
    }
    public void set() {
        lock.lock();
        try {
            flag = true;
            cond.signalAll();
        } finally {
            lock.unlock();
        }
    }
    public void clear() {
        lock.lock();
        try {
            flag = false;
            cond.signalAll();
        } finally {
            lock.unlock();
        }
    }
}
</snippet></ROW><ROW><id>1040954</id><snippet>public class InheritedAce
{
    public static string GetDACLReport(string path)
    {
        StringBuilder result = new StringBuilder();
        FileSecurity fs = new FileSecurity(path, AccessControlSections.Access);
        foreach (var rule in fs.GetAccessRules(true, true, typeof(SecurityIdentifier)).OfType&lt;FileSystemAccessRule&gt;())
        {
            result.AppendFormat("{0}  --&gt;  IsInherited:  {1}", rule.FileSystemRights, rule.IsInherited);
            result.AppendLine();
        }

        return result.ToString();
    }
}
</snippet></ROW><ROW><id>1041375</id><snippet>import sys
number = int(sys.argv[1])
fact = 1
for x in range(1, number+1):
    fact *= x

print fact
</snippet></ROW><ROW><id>1041375</id><snippet>if</snippet></ROW><ROW><id>1041375</id><snippet>else</snippet></ROW><ROW><id>1041375</id><snippet>for</snippet></ROW><ROW><id>1041375</id><snippet>for</snippet></ROW><ROW><id>1041571</id><snippet>#!/bin/bash
sed "s/\(^[^#]\)/  \1/" $1 | \
sed "s/^##bind [a-z]*=\([a-z][a-z]*\)$/import \1/" | \
sed "s/^##parameters=\(.*\)/def foo(\1):/" | pyflakes
</snippet></ROW><ROW><id>1041576</id><snippet>&gt;&gt;&gt; 0.1
0.10000000000000001
</snippet></ROW><ROW><id>1041576</id><snippet>&gt;&gt;&gt; 0.1 + 0.2 == 0.3
False
</snippet></ROW><ROW><id>1041608</id><snippet>re.split('-(?=\d)', 'foo-bar-1.23-4', 1)
</snippet></ROW><ROW><id>1041753</id><snippet>__dict__</snippet></ROW><ROW><id>1041906</id><snippet>dict(globals(), **locals())</snippet></ROW><ROW><id>1041906</id><snippet>thefunction.func_code.co_freevars</snippet></ROW><ROW><id>1041906</id><snippet>thefunction.func_closure</snippet></ROW><ROW><id>1041906</id><snippet>cell_contents</snippet></ROW><ROW><id>1042422</id><snippet>initial</snippet></ROW><ROW><id>1042422</id><snippet>form = EditAdminForm(initial={'password':'abcdef'})
</snippet></ROW><ROW><id>1042471</id><snippet>def my_view(request, movie):
    return render_to_template('my_view.html',
                              {'movie': settings.MEDIA_URL + 'flash.swf?' + movie})
</snippet></ROW><ROW><id>1042471</id><snippet>urls.py</snippet></ROW><ROW><id>1042471</id><snippet>...
url(r'/flash/(?P&lt;movie&gt;.+)$', 'myapp.views.my_view'),
...
</snippet></ROW><ROW><id>1042471</id><snippet>my_view.html</snippet></ROW><ROW><id>1042471</id><snippet>...
&lt;object classid="clsid:XXXXXXXXX-YYYY-ZZZZ-AAAA-BBBBBBBBBB" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" width="100%" height="100%" id="main" align="middle"&gt;
&lt;param name="allowScriptAccess" value="all" /&gt;
&lt;param name="flashvars" value= /&gt;
&lt;param name="movie" value="{{ movie }}" /&gt;
&lt;param name="loop" value="false" /&gt;
&lt;param name="quality" value="high" /&gt;
&lt;param name="bgcolor" value="#eeeeee" /&gt;
&lt;embed src="{{ movie }}" loop="false" quality="high" bgcolor="#eeeeee" width="100%" height="100%" name="main" align="middle" allowScriptAccess="all" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;
&lt;/object&gt;
...
</snippet></ROW><ROW><id>1042471</id><snippet>def return_movie_html(environ, start_response):
    request_uri = environ.get('REQUEST_URI')
    movie_uri = request_uri[request_uri.rfind('/')+1:]
    start_response('200 OK', [('Content-Type', 'text/html')])
    return ['''
            &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
                                  "http://www.w3.org/TR/html4/strict.dtd"&gt;
            &lt;html&gt;
            ...
            &lt;object ...&gt;
            &lt;param name="allowScriptAccess" value="all" /&gt;
            &lt;param name="flashvars" value= /&gt;
            &lt;param name="movie" value="%(movie)s" /&gt;
            &lt;param name="loop" value="false" /&gt;
            &lt;param name="quality" value="high" /&gt;
            &lt;param name="bgcolor" value="#eeeeee" /&gt;
            &lt;embed src="%(movie)s" loop="false" ... /&gt;
            &lt;/object&gt;
            ...
            &lt;/html&gt;
            ''' % {'movie': movie_uri}]
</snippet></ROW><ROW><id>1042712</id><snippet># test_client.py
from poster.encode import multipart_encode
from poster.streaminghttp import register_openers
import urllib2

# Register the streaming http handlers with urllib2
register_openers()

# headers contains the necessary Content-Type and Content-Length
# datagen is a generator object that yields the encoded parameters
datagen, headers = multipart_encode({
    'categoryID' : 1,
    'cID'        : -3,
    'FileType'   : 'zip',
    'name'       : 'Kylie Minogue',
    'file1'      : open('At the Beach x8-8283.zip')
})

# Create the Request object
request = urllib2.Request("http://localhost:5000/upload_data", datagen, headers)

# Actually do the request, and get the response
print urllib2.urlopen(request).read()
</snippet></ROW><ROW><id>1042756</id><snippet>years, months, days = the_string.split('-')
days, time = days.split(' ')
time = time.split(':')
</snippet></ROW><ROW><id>1042756</id><snippet>date, time = the_string.split(' ')
years, months, days = date.split('-')
hours, minute, seconds = time.split(":")
</snippet></ROW><ROW><id>1042975</id><snippet>wexpect.py</snippet></ROW><ROW><id>1044393</id><snippet>from weakref import ref

pointers = set()

class Pointer(object):
    def __init__(self, cfun, ptr):
        pointers.add(self)
        self.ref = ref(ptr, self.cleanup)
        self.data = cast(ptr, c_void_p).value # python cast it so smart, but it can't be smarter than this.
        self.cfun = cfun

    def cleanup(self, obj):
        print 'cleanup 0x%x' % self.data
        self.cfun(self.data)
        pointers.remove(self)

def cleanup(cfun, ptr):
    Pointer(cfun, ptr)
</snippet></ROW><ROW><id>1044754</id><snippet>print "%2d. %8.2f %8.2f %8.2f" % (         # no mistake here
            i, lyhennys, korkoera, kuukausiera)
</snippet></ROW><ROW><id>1044866</id><snippet>2**3*2
</snippet></ROW><ROW><id>1044866</id><snippet>2*3*2
</snippet></ROW><ROW><id>1044866</id><snippet>**
</snippet></ROW><ROW><id>1045182</id><snippet>public class FibonacciAlgorithm {

    private int a = 0;

    private int b = 1;

    public FibonacciAlgorithm() {

    }

    public int increment() {
        int temp = b;
        b = a + b;
        a = temp;
        return value;
    }

    public int getValue() {
        return b;
    }
}
</snippet></ROW><ROW><id>1045182</id><snippet>Integers</snippet></ROW><ROW><id>1045182</id><snippet>ints</snippet></ROW><ROW><id>1045182</id><snippet>Integers</snippet></ROW><ROW><id>1045491</id><snippet>class C(): pass

x = C()
y = C()
print id(x), id(y)    #(4400352, 16982704)
</snippet></ROW><ROW><id>1045710</id><snippet>Selection.Find.ClearFormatting
Selection.Find.Replacement.ClearFormatting
With Selection.Find
    .Text = "test"
    .Replacement.Text = "test2"
    .Forward = True
    .Wrap = wdFindContinue
    .Format = False
    .MatchCase = False
    .MatchWholeWord = False
    .MatchKashida = False
    .MatchDiacritics = False
    .MatchAlefHamza = False
    .MatchControl = False
    .MatchWildcards = False
    .MatchSoundsLike = False
    .MatchAllWordForms = False
End With
Selection.Find.Execute Replace:=wdReplaceAll
</snippet></ROW><ROW><id>1045710</id><snippet>MSWord.Documents.Open(filename)
Selection = MSWord.Selection
</snippet></ROW><ROW><id>1045710</id><snippet>With Selection.Find
    .Text = "test"
    .Replacement.Text = "test2"
End With
</snippet></ROW><ROW><id>1045710</id><snippet>find = Selection.Find
find.Text = "test"
find.Replacement.Text = "test2"
</snippet></ROW><ROW><id>1045710</id><snippet>MSWord.Quit</snippet></ROW><ROW><id>1045774</id><snippet>dupedict = {}
for a, b, c in dupe:
  dupedict.setdefault((a,b),[]).append(c)
</snippet></ROW><ROW><id>1045774</id><snippet>for key, values in dupedict.iteritems():
  print ' '.join(key), ', '.join(values)
</snippet></ROW><ROW><id>1046226</id><snippet>class X(object):
  print("Loading X")
</snippet></ROW><ROW><id>1046418</id><snippet>class x:
    print "hello"
    def __init__(self): print "hello again"
</snippet></ROW><ROW><id>1046418</id><snippet>hello</snippet></ROW><ROW><id>1046418</id><snippet>x</snippet></ROW><ROW><id>1046418</id><snippet>hello again</snippet></ROW><ROW><id>1046418</id><snippet>def __init__(self): ...</snippet></ROW><ROW><id>1046418</id><snippet>__init__ = lambda self: ...</snippet></ROW><ROW><id>1046418</id><snippet>def</snippet></ROW><ROW><id>1046418</id><snippet>class X(models.Model):
    creator = Registry()
    creator.register(Y)
</snippet></ROW><ROW><id>1046418</id><snippet>Y</snippet></ROW><ROW><id>1046418</id><snippet>Y</snippet></ROW><ROW><id>1046418</id><snippet>class X</snippet></ROW><ROW><id>1046418</id><snippet>type</snippet></ROW><ROW><id>1046418</id><snippet>class X(models.Model):
    pass
class Y(models.Model):
    foo = something_that_uses_(X)
X.bar = something_which_uses(Y)
</snippet></ROW><ROW><id>1046418</id><snippet>X</snippet></ROW><ROW><id>1046418</id><snippet>Y</snippet></ROW><ROW><id>1046418</id><snippet>Y</snippet></ROW><ROW><id>1046418</id><snippet>Y</snippet></ROW><ROW><id>1046418</id><snippet>X</snippet></ROW><ROW><id>1046418</id><snippet>Y</snippet></ROW><ROW><id>1046418</id><snippet>X</snippet></ROW><ROW><id>1046522</id><snippet>cmd /c program name arguments | further stuff</snippet></ROW><ROW><id>1046522</id><snippet>"\p"</snippet></ROW><ROW><id>1046522</id><snippet>'\\p'</snippet></ROW><ROW><id>1046522</id><snippet>'\n'</snippet></ROW><ROW><id>1046522</id><snippet>proc = subprocess.Popen(
    ['C:/Program Files/GNU/GnuPG/gpg.exe',
    '--batch', '--passphrase-fd', '0',
    '--output ', 'c:/docume~1/usi/locals~1/temp/tmptlbxka.txt',
    '--decrypt', 'test.txt.gpg',],
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
   stderr=subprocess.STDOUT,
)
stdout_value, stderr_value = proc.communicate('bosco')
</snippet></ROW><ROW><id>1046611</id><snippet>year=['51-52', '53', '55' , '56' , '58', '59', '60', '61']
photo=[[70,72,73], [64,65,68],[79,80,81,82],[74,77,78],[60,61,62],[84,85,87],[57,58,59],[53,54,55,56]]

for i in range(len(year)):
   for j in range(len(photo[i])):
       print '&lt;img src=\"http://files.getdropbox.com/u/100000/Akuja/%s/P10104%s.JPG&gt;' % (year[i], photo[i][j])
</snippet></ROW><ROW><id>1046674</id><snippet>from os import *</snippet></ROW><ROW><id>1046689</id><snippet>heap[0]</snippet></ROW><ROW><id>1046837</id><snippet>agent/agent.py
checks.py
</snippet></ROW><ROW><id>1046837</id><snippet>path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if not path in sys.path:
    sys.path.insert(1, path)
del path
</snippet></ROW><ROW><id>1046837</id><snippet>__file__</snippet></ROW><ROW><id>1047013</id><snippet>key A</snippet></ROW><ROW><id>1047013</id><snippet>key B</snippet></ROW><ROW><id>1047034</id><snippet>__iadd__</snippet></ROW><ROW><id>1047034</id><snippet>def __iadd__(self, other):
    self.number += other.number
    return self
</snippet></ROW><ROW><id>1047335</id><snippet>import pickle
d = { "abc" : [1, 2, 3], "qwerty" : [4,5,6] }
afile = open(r'C:\d.pkl', 'wb')
pickle.dump(d, afile)
afile.close()

#reload object from file
file2 = open(r'C:\d.pkl', 'rb')
new_d = pickle.load(file2)
file2.close()

#print dictionary object loaded from file
print new_d
</snippet></ROW><ROW><id>1047365</id><snippet>debug.log</snippet></ROW><ROW><id>1047365</id><snippet>config.map</snippet></ROW><ROW><id>1047420</id><snippet>things</snippet></ROW><ROW><id>1047420</id><snippet>&gt;&gt; my_thing = [x for x in things if x[2]=="Blurgle"][0]
</snippet></ROW><ROW><id>1047420</id><snippet>my_things</snippet></ROW><ROW><id>1047420</id><snippet>dict</snippet></ROW><ROW><id>1047591</id><snippet>import pyodbc
db_file = r'''C:\x.mdb'''
user = 'admin'
password = ''
odbc_conn_str = 'DRIVER={Microsoft Access Driver (*.mdb)};DBQ=%s;UID=%s;PWD=%s' % \
                (db_file, user, password)
conn = pyodbc.connect(odbc_conn_str)
</snippet></ROW><ROW><id>1047692</id><snippet>readline()</snippet></ROW><ROW><id>1047692</id><snippet>from collections import defaultdict
try:
  from io import StringIO # 2.6+, 3.x
except ImportError:
  from StringIO import StringIO # 2.5

data = defaultdict(int)

#with open("filename", "r") as f: # if a real file
with StringIO("10\n5\n-1\n-1\n-1\n1\n1\n0\n2") as f:
  for line in f:
    data[int(line)] += 1

for number, count in data.iteritems():
  print number, "was found", count, "times"
</snippet></ROW><ROW><id>1048364</id><snippet>class Lesson(models.Model):
    contents = models.TextField()
    visit_count = models.IntegerField(default=0)

class StatLesson(models.Model):
    lesson = models.ForeignKey(Lesson)
    datetime = models.DateTimeField(default=datetime.datetime.now())

    def save(self, *args, **kwargs):
        if self.pk is None:
            self.lesson.visit_count += 1
            self.lesson.save()
        super(StatLesson, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>1048364</id><snippet>Lesson.objects.all().order_by('visit_count')
</snippet></ROW><ROW><id>1048556</id><snippet>re.compile(r'([^a-zA-Z0-9])(%s)([^a-zA-Z0-9])' % '\+test', re.I)
</snippet></ROW><ROW><id>1048556</id><snippet>re.compile(r'([^a-zA-Z0-9])(%s)([^a-zA-Z0-9])' % re.escape('+test'), re.I)
</snippet></ROW><ROW><id>1048886</id><snippet>foreign_key</snippet></ROW><ROW><id>1048886</id><snippet>subscription_set</snippet></ROW><ROW><id>1048886</id><snippet>class HardwareNode(models.Model):
    ip_address = models.CharField(max_length=15)
    port = models.IntegerField()
    location = models.CharField(max_length=50)
    hostname = models.CharField(max_length=30)
    subscription_count = lambda(self: self.subscription_set.count())
</snippet></ROW><ROW><id>1049375</id><snippet>class MockLoggingHandler(logging.Handler):
    """Mock logging handler to check for expected logs."""

    def __init__(self, *args, **kwargs):
        self.reset()
        logging.Handler.__init__(self, *args, **kwargs)

    def emit(self, record):
        self.messages[record.levelname.lower()].append(record.getMessage())

    def reset(self):
        self.messages = {
            'debug': [],
            'info': [],
            'warning': [],
            'error': [],
            'critical': [],
        }
</snippet></ROW><ROW><id>1049416</id><snippet>{{ somevariable }}</snippet></ROW><ROW><id>1049416</id><snippet>urls.py</snippet></ROW><ROW><id>1049416</id><snippet>views.py</snippet></ROW><ROW><id>1049416</id><snippet>models.py</snippet></ROW><ROW><id>1049416</id><snippet>tests.py</snippet></ROW><ROW><id>1049416</id><snippet>urls.py</snippet></ROW><ROW><id>1049416</id><snippet>views.py</snippet></ROW><ROW><id>1049563</id><snippet>class MonkeyTester(unittest.TestCase):
    def test_myfunc(self):
        without_timestamp = my_func()
        del without_timestamp["monkey_creation"]
        self.assertEqual(without_timestamp, {'monkey_head_count': 3})
</snippet></ROW><ROW><id>1049563</id><snippet>datetime.now()</snippet></ROW><ROW><id>1049563</id><snippet>import datetime
constant_now = datetime.datetime(2009,8,7,6,5,4)
old_datetime_class = datetime.datetime
class new_datetime(datetime.datetime):
    @staticmethod
    def now():
        return constant_now

datetime.datetime = new_datetime
</snippet></ROW><ROW><id>1049563</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>1049563</id><snippet>constant_now</snippet></ROW><ROW><id>1049563</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>1049563</id><snippet>datetime.datetime = old_datetime_class
</snippet></ROW><ROW><id>1050139</id><snippet># Reads in a config file, decides which feed to use, and passes
# the commands in to one of the classes below for import and export
class FeedManager

# Get data from db into a canonical format
class DbImport

# Put data into db from a canonical format
class DbExport

# Get data from ftp into a canonical format
class FtpImport

# Put data into ftp from canonical format
class FtpExport
</snippet></ROW><ROW><id>1050139</id><snippet>[GetVitalStats]
SourceUrl=ftp.myhost.com
SourceType=FTP

Destination=Host=mydbserver; Database=somedb
SourceType=Postgres
</snippet></ROW><ROW><id>1050139</id><snippet>process_feed.py --feed=GetVitalStats
</snippet></ROW><ROW><id>1051266</id><snippet>try:
 import mymodule
except ImportError, e:
 pass # module doesn't exist, deal with it.
</snippet></ROW><ROW><id>1051444</id><snippet>BufferedReader input = null;
try {
    input = new BufferedReader(new FileReader(inputFileName));
    // Stack of instruction blocks
    Stack&lt;Block&gt; stack = new Stack&lt;Block&gt;();
    // Push the root block
    stack.push(this.topLevelBlock);
    String line = null;
    Instruction prev = new Noop();
    while ((line = input.readLine()) != null) {
        // Difference between the indentation of the previous and this line
        // You do not need this you will be using {} to specify block boundaries
        int level = indent_level(line) - stack.size();
        // Parse the line (returns an instruction object)
        Instruction inst = Instruction.parse(line.trim().split(" +"));
        // If the previous instruction expects a block (for example repeat)
        if (prev.block_expected()) {
            if (level != 1) {
                // TODO handle error
                continue;
            }
            // Push the previous instruction and add the current instruction
            stack.push((Block)(prev));
            stack.peek().add(inst);
        } else {
            if (level &gt; 0) {
                // TODO handle error
                continue;
            } else if (level &lt; 0) {
                // Pop the stack at the end of blocks
                for (int i = 0; i &lt; -level; ++i)
                    stack.pop();
            }
            stack.peek().add(inst);
        }
        prev = inst;
    }
} finally {
    if (input != null)
        input.close();
}
</snippet></ROW><ROW><id>1052115</id><snippet>class _GetchUnix:
    def __init__(self):
        import tty, sys

    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


getch = _GetchUnix()

print getch()
</snippet></ROW><ROW><id>1052238</id><snippet>os.walk()</snippet></ROW><ROW><id>1052238</id><snippet>&gt;&gt;&gt; list(os.walk(r'C:\example'))          # Passing an ASCII string
[('C:\\example', [], ['file.txt'])]
&gt;&gt;&gt; 
&gt;&gt;&gt; list(os.walk(ur'C:\example'))        # Passing a Unicode string
[(u'C:\\example', [], [u'file.txt'])]
</snippet></ROW><ROW><id>1052581</id><snippet>def my_timer(*args):
    return True# do ur work here, but not for long

gtk.timeout_add(60*1000, my_timer) # call every min
</snippet></ROW><ROW><id>1052628</id><snippet>lines = open("/proc/net/dev", "r").readlines()

columnLine = lines[1]
_, receiveCols , transmitCols = columnLine.split("|")
receiveCols = map(lambda a:"recv_"+a, receiveCols.split())
transmitCols = map(lambda a:"trans_"+a, transmitCols.split())

cols = receiveCols+transmitCols

faces = {}
for line in lines[2:]:
    if line.find(":") &lt; 0: continue
    face, data = line.split(":")
    faceData = dict(zip(cols, data.split()))
    faces[face] = faceData

import pprint
pprint.pprint(faces)
</snippet></ROW><ROW><id>1052628</id><snippet>{'    lo': {'recv_bytes': '7056295',
            'recv_compressed': '0',
            'recv_drop': '0',
            'recv_errs': '0',
            'recv_fifo': '0',
            'recv_frame': '0',
            'recv_multicast': '0',
            'recv_packets': '12148',
            'trans_bytes': '7056295',
            'trans_carrier': '0',
            'trans_colls': '0',
            'trans_compressed': '0',
            'trans_drop': '0',
            'trans_errs': '0',
            'trans_fifo': '0',
            'trans_packets': '12148'},
 '  eth0': {'recv_bytes': '34084530',
            'recv_compressed': '0',
            'recv_drop': '0',
            'recv_errs': '0',
            'recv_fifo': '0',
            'recv_frame': '0',
            'recv_multicast': '0',
            'recv_packets': '30599',
            'trans_bytes': '6170441',
            'trans_carrier': '0',
            'trans_colls': '0',
            'trans_compressed': '0',
            'trans_drop': '0',
            'trans_errs': '0',
            'trans_fifo': '0',
            'trans_packets': '32377'}}
</snippet></ROW><ROW><id>1052993</id><snippet>openb</snippet></ROW><ROW><id>1052993</id><snippet>\k&lt;season&gt;</snippet></ROW><ROW><id>1052993</id><snippet>(P=season)</snippet></ROW><ROW><id>1052993</id><snippet>r = re.compile(r'^(?:(?P&lt;name&gt;.*?)[\/\s._-]*)?(?P&lt;openb&gt;\[)?(?P&lt;season&gt;\d{1,2})[x\/](?P&lt;episode&gt;\d{1,2})(?:-(?:(?P=season)x)?(?P&lt;endep&gt;\d{1,2}))?(?(openb)\])(?:[\s._-]*(?P&lt;epname&gt;[^\/]+?))?$')
</snippet></ROW><ROW><id>1052993</id><snippet>openb</snippet></ROW><ROW><id>1053361</id><snippet>Site

Category
  Sites = models.ManyToManyField(Site)
  IsCommon =   models.BooleanField()

Item
  Category = models.ForeignKey(Category)
</snippet></ROW><ROW><id>1053552</id><snippet>(\w+\).s(\d+)\.e(\d+)
</snippet></ROW><ROW><id>1053552</id><snippet>(?P&lt;showname&gt;\w+\).s(?P&lt;seasonnumber&gt;\d+)\.e(?P&lt;episodenumber&gt;\d+)
</snippet></ROW><ROW><id>1053552</id><snippet>startingepisodenumber</snippet></ROW><ROW><id>1053552</id><snippet>endingepisodenumber</snippet></ROW><ROW><id>1053552</id><snippet>showname.s01e01-03</snippet></ROW><ROW><id>1053552</id><snippet>(?P&lt;showname&gt;\w+\)\.s(?P&lt;seasonnumber&gt;\d+)\.e(?P&lt;startingepisodenumber&gt;\d+)-(?P&lt;endingepisodenumber&gt;e\d+)
</snippet></ROW><ROW><id>1053552</id><snippet>episodenumber\d+</snippet></ROW><ROW><id>1053552</id><snippet>episodenumber1</snippet></ROW><ROW><id>1053552</id><snippet>episodenumber2</snippet></ROW><ROW><id>1053552</id><snippet>(?P&lt;showname&gt;\w+\)\.
s(?P&lt;seasonnumber&gt;\d+)\.
e(?P&lt;episodenumber1&gt;\d+)
e(?P&lt;episodenumber2&gt;\d+)
e(?P&lt;episodenumber3&gt;\d+)
</snippet></ROW><ROW><id>1053552</id><snippet>e01</snippet></ROW><ROW><id>1053552</id><snippet>show.s01e01e03e04</snippet></ROW><ROW><id>1053552</id><snippet>starting/endingepisodenumber</snippet></ROW><ROW><id>1053552</id><snippet>episodenumber\d+</snippet></ROW><ROW><id>1053552</id><snippet>s01e23e24...e27</snippet></ROW><ROW><id>1053752</id><snippet>PyCrypto</snippet></ROW><ROW><id>1053752</id><snippet>PyMe</snippet></ROW><ROW><id>1053752</id><snippet>gnupg 1.4.9</snippet></ROW><ROW><id>1053752</id><snippet>gpg.exe</snippet></ROW><ROW><id>1053752</id><snippet>iconv.dll</snippet></ROW><ROW><id>1053752</id><snippet>GPG.py</snippet></ROW><ROW><id>1053752</id><snippet>os.fork()</snippet></ROW><ROW><id>1053752</id><snippet>PyCrypto</snippet></ROW><ROW><id>1053752</id><snippet>PyCrypto</snippet></ROW><ROW><id>1053752</id><snippet>gnupg.py</snippet></ROW><ROW><id>1053752</id><snippet>GPG.py</snippet></ROW><ROW><id>1053752</id><snippet>subprocess</snippet></ROW><ROW><id>1053752</id><snippet>PyCrypto</snippet></ROW><ROW><id>1053752</id><snippet>subprocess</snippet></ROW><ROW><id>1053752</id><snippet>SWIG</snippet></ROW><ROW><id>1053752</id><snippet>MinGW</snippet></ROW><ROW><id>1053752</id><snippet>MSYS</snippet></ROW><ROW><id>1053752</id><snippet>gpg.exe</snippet></ROW><ROW><id>1053752</id><snippet>iconv.dll</snippet></ROW><ROW><id>1053752</id><snippet>C#</snippet></ROW><ROW><id>1054011</id><snippet>print MyTestCase.suite # &lt;unbound method MyTestCase.suite&gt;
</snippet></ROW><ROW><id>1054011</id><snippet>MyTestCase.run</snippet></ROW><ROW><id>1054011</id><snippet>print MyTestCase.run # &lt;unbound method MyTestCase.run&gt;
</snippet></ROW><ROW><id>1054011</id><snippet>suite</snippet></ROW><ROW><id>1054011</id><snippet>run</snippet></ROW><ROW><id>1054011</id><snippet>MyTestCase.run() # ?
</snippet></ROW><ROW><id>1054011</id><snippet>run</snippet></ROW><ROW><id>1054011</id><snippet>self</snippet></ROW><ROW><id>1054011</id><snippet>suite</snippet></ROW><ROW><id>1054011</id><snippet>run</snippet></ROW><ROW><id>1054011</id><snippet>suite</snippet></ROW><ROW><id>1054011</id><snippet>import unittest

def average(values):
    return sum(values) / len(values)

class MyTestCase(unittest.TestCase):
    def testFoo(self):
        self.assertEqual(average([10,100]),55)

    def testBar(self):
        self.assertEqual(average([11]),11)

    def testBaz(self):
        self.assertEqual(average([20,20]),20)

def suite():
    suite = unittest.TestSuite()
    suite.addTest(MyTestCase('testFoo'))
    suite.addTest(MyTestCase('testBar'))
    suite.addTest(MyTestCase('testBaz'))
    return suite

print suite() # &lt;unittest.TestSuite tests=[&lt;__main__.MyTestCase testMethod=testFoo&gt;, &lt;__main__.MyTestCase testMethod=testBar&gt;, &lt;__main__.MyTestCase testMethod=testBaz&gt;]&gt;
</snippet></ROW><ROW><id>1054011</id><snippet>MyTestCase.suite()</snippet></ROW><ROW><id>1054011</id><snippet>suite</snippet></ROW><ROW><id>1054011</id><snippet>self</snippet></ROW><ROW><id>1054011</id><snippet>self</snippet></ROW><ROW><id>1054011</id><snippet>self</snippet></ROW><ROW><id>1054011</id><snippet>static</snippet></ROW><ROW><id>1054011</id><snippet>@staticmethod
def suite():
    suite = unittest.TestSuite()
    suite.addTest(MyTestCase('testFoo'))
    suite.addTest(MyTestCase('testBar'))
    suite.addTest(MyTestCase('testBaz'))
    return suite
</snippet></ROW><ROW><id>1054011</id><snippet>print MyTestCase.suite # &lt;function suite at 0x...&gt;
</snippet></ROW><ROW><id>1054011</id><snippet>MyTestCase.suite()</snippet></ROW><ROW><id>1054011</id><snippet>if __name__ == '__main__':
    s = MyTestCase.suite()
    unittest.TextTestRunner().run(s) # Ran 3 tests in 0.000s, OK
</snippet></ROW><ROW><id>1054062</id><snippet>__import__</snippet></ROW><ROW><id>1054062</id><snippet>__import__</snippet></ROW><ROW><id>1054062</id><snippet>def</snippet></ROW><ROW><id>1054062</id><snippet>call</snippet></ROW><ROW><id>1054062</id><snippet>assert</snippet></ROW><ROW><id>1054062</id><snippet>print</snippet></ROW><ROW><id>1054062</id><snippet>import this</snippet></ROW><ROW><id>1054062</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>1054062</id><snippet>sys.stdout</snippet></ROW><ROW><id>1054062</id><snippet>print</snippet></ROW><ROW><id>1054062</id><snippet>2to3</snippet></ROW><ROW><id>1054062</id><snippet>print</snippet></ROW><ROW><id>1054062</id><snippet>print</snippet></ROW><ROW><id>1054062</id><snippet>print</snippet></ROW><ROW><id>1054062</id><snippet>print</snippet></ROW><ROW><id>1054062</id><snippet>__print__</snippet></ROW><ROW><id>1054062</id><snippet>__print__</snippet></ROW><ROW><id>1054062</id><snippet>&gt;&gt; myfile</snippet></ROW><ROW><id>1054062</id><snippet>print</snippet></ROW><ROW><id>1054062</id><snippet>print</snippet></ROW><ROW><id>1054130</id><snippet>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; hex(ord('a'))
'0x61'
&gt;&gt;&gt; bin(ord('a'))
'0b1100001'
</snippet></ROW><ROW><id>1054283</id><snippet>@thisonetoo</snippet></ROW><ROW><id>1054465</id><snippet>def lineKey (line):
    keyStr, rest = line.split(' ', 1)
    a, b = keyStr.split('/', 1)
    return (a, int(b))

sorted(lines, key=lineKey)
</snippet></ROW><ROW><id>1054535</id><snippet>latest_poll_list</snippet></ROW><ROW><id>1054535</id><snippet>object</snippet></ROW><ROW><id>1054535</id><snippet>object_list</snippet></ROW><ROW><id>1054535</id><snippet>latest_poll_list</snippet></ROW><ROW><id>1054535</id><snippet>object_list</snippet></ROW><ROW><id>1054535</id><snippet>poll</snippet></ROW><ROW><id>1054535</id><snippet>object</snippet></ROW><ROW><id>1054986</id><snippet>import pythoncom

class HelloWorld:
    _reg_clsctx_ = pythoncom.CLSCTX_LOCAL_SERVER
    _reg_clsid_ = "{B83DD222-7750-413D-A9AD-01B37021B24B}"
    _reg_desc_ = "Python Test COM Server"
    _reg_progid_ = "Python.TestServer"
    _public_methods_ = ['Hello']
    _public_attrs_ = ['softspace', 'noCalls']
    _readonly_attrs_ = ['noCalls']

    def __init__(self):
        self.softspace = 1
        self.noCalls = 0

    def Hello(self, who):
        self.noCalls = self.noCalls + 1
        # insert "softspace" number of spaces
        return "Hello" + " " * self.softspace + str(who)

if __name__ == '__main__':
    if '--register' in sys.argv[1:]  or '--unregister' in sys.argv[1:]:
        import win32com.server.register
        win32com.server.register.UseCommandLine(HelloWorld)
    else:
        # start the server.
        from win32com.server import localserver
        localserver.serve('B83DD222-7750-413D-A9AD-01B37021B24B')
</snippet></ROW><ROW><id>1055173</id><snippet>[^\W\d]
</snippet></ROW><ROW><id>1055180</id><snippet>dat = mlab.csv2rec(args[0], delimiter=' ')
m_Obsr = dat.is_observed == 1
m_ZeroScale = dat[m_Obsr].scale_mean &lt; 0.01
the_copy = dat[m_Obsr][m_ZeroScale]

for d in the_copy:
    d.scale_mean = 1.0

newFile = args[0] + ".no-zero-scale"
mlab.rec2csv(the_copy, newFile, delimiter=' ')
</snippet></ROW><ROW><id>1055378</id><snippet>import types
if not isinstance(arg, types.StringTypes):
</snippet></ROW><ROW><id>1055378</id><snippet>class MyString(str):
    pass

isinstance(MyString("  "), types.StringTypes) # true
</snippet></ROW><ROW><id>1055440</id><snippet>dict</snippet></ROW><ROW><id>1055440</id><snippet>class MyDict(dict):
    def __getitem__(self, key):
        if key == 'density':
           return self['mass'] / self['volume']
        else:
            return dict.__getitem__(self,key)
    def keys(self):
        return ['density'] + dict.keys(self)

x = MyDict()
x['mass'] = 1.0
x['volume'] = 0.5

print x

print x.keys()

print x['density']

x['mass'] = 2.0

print x['density']
</snippet></ROW><ROW><id>1055440</id><snippet>{'volume': 0.5, 'mass': 1.0}
['density', 'volume', 'mass']
2.0
4.0
</snippet></ROW><ROW><id>1055662</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>1055662</id><snippet>from collections import defaultdict

LofD = [{'name': 'johnny', 'surname': 'smith', 'age': 53},
 {'name': 'johnny', 'surname': 'ryan', 'age': 13},
 {'name': 'jakob', 'surname': 'smith', 'age': 27},
 {'name': 'aaron', 'surname': 'specter', 'age': 22},
 {'name': 'max', 'surname': 'headroom', 'age': 108},
]

def counters():
  return defaultdict(int)

def freqs(LofD):
  r = defaultdict(counters)
  for d in LofD:
    for k, v in d.items():
      r[k][v] += 1
  return dict((k, dict(v)) for k, v in r.items())

print freqs(LofD)
</snippet></ROW><ROW><id>1055662</id><snippet>{'age': {27: 1, 108: 1, 53: 1, 22: 1, 13: 1}, 'surname': {'headroom': 1, 'smith': 2, 'specter': 1, 'ryan': 1}, 'name': {'jakob': 1, 'max': 1, 'aaron': 1, 'johnny': 2}}
</snippet></ROW><ROW><id>1055787</id><snippet>pydoc</snippet></ROW><ROW><id>1055787</id><snippet>python /path/to/pydoc.py -p 1234
</snippet></ROW><ROW><id>1055787</id><snippet>1234</snippet></ROW><ROW><id>1055787</id><snippet>http://localhost:1234/</snippet></ROW><ROW><id>1056057</id><snippet>Command</snippet></ROW><ROW><id>1056154</id><snippet>random.choice([k for k in d for x in d[k]])
</snippet></ROW><ROW><id>1057446</id><snippet>__all__</snippet></ROW><ROW><id>1057446</id><snippet>__init__.py</snippet></ROW><ROW><id>1057446</id><snippet>__all__ = ["bar", "spam", "eggs"]
</snippet></ROW><ROW><id>1057597</id><snippet>scriptA.py | scriptB.py
</snippet></ROW><ROW><id>1057597</id><snippet>scriptA.py</snippet></ROW><ROW><id>1057597</id><snippet>scriptB.py</snippet></ROW><ROW><id>1057597</id><snippet>scriptB.py</snippet></ROW><ROW><id>1057597</id><snippet>scriptA.py</snippet></ROW><ROW><id>1057597</id><snippet>scriptA.py</snippet></ROW><ROW><id>1057597</id><snippet>scriptB.py</snippet></ROW><ROW><id>1057597</id><snippet>scriptA.py</snippet></ROW><ROW><id>1057597</id><snippet>scriptB.py</snippet></ROW><ROW><id>1057597</id><snippet>json.dump( {}, sys.stdout )</snippet></ROW><ROW><id>1057597</id><snippet>pickle.dump( {}, sys.stdout )</snippet></ROW><ROW><id>1057597</id><snippet>json.load( sys.stdin )</snippet></ROW><ROW><id>1057597</id><snippet>pickle.load( sys.stdin )</snippet></ROW><ROW><id>1057601</id><snippet>def __init__(self):
    self.foo = 5
</snippet></ROW><ROW><id>1057601</id><snippet>Base</snippet></ROW><ROW><id>1057601</id><snippet>foo</snippet></ROW><ROW><id>1057601</id><snippet>Base</snippet></ROW><ROW><id>1057601</id><snippet>foo</snippet></ROW><ROW><id>1057601</id><snippet>super()</snippet></ROW><ROW><id>1057601</id><snippet>foobar = Derived()
</snippet></ROW><ROW><id>1057601</id><snippet>__init__()</snippet></ROW><ROW><id>1057601</id><snippet>self.foo = 5
</snippet></ROW><ROW><id>1057601</id><snippet>Derived</snippet></ROW><ROW><id>1057601</id><snippet>self.foo.fset(5)
</snippet></ROW><ROW><id>1057601</id><snippet>self._foo = 5</snippet></ROW><ROW><id>1057601</id><snippet>return 1 + self._foo
</snippet></ROW><ROW><id>1057601</id><snippet>self.foo</snippet></ROW><ROW><id>1057601</id><snippet>Base</snippet></ROW><ROW><id>1057601</id><snippet>_foo</snippet></ROW><ROW><id>1057601</id><snippet>@foo.setter</snippet></ROW><ROW><id>1057640</id><snippet>__init__</snippet></ROW><ROW><id>1057640</id><snippet>request</snippet></ROW><ROW><id>1057640</id><snippet>class MyForm(forms.Form):

    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request', None)
        super(MyForm, self).__init__(*args, **kwargs)


    def clean(self):
        ... access the request object via self.request ...
</snippet></ROW><ROW><id>1057640</id><snippet>myform = MyForm(request.POST, request=request)
</snippet></ROW><ROW><id>1057953</id><snippet>to_import_from.py</snippet></ROW><ROW><id>1057953</id><snippet>to_import_from.py</snippet></ROW><ROW><id>1057953</id><snippet>to_import_from.py</snippet></ROW><ROW><id>1057953</id><snippet>class InstrumentBase(object):
    def external_method(self, arg1, arg2):
        if self.flag:
            ...
</snippet></ROW><ROW><id>1057953</id><snippet>main_module.py</snippet></ROW><ROW><id>1057953</id><snippet>import to_import_from

class Instrument(to_import_from.InstrumentBase):
    def __init__(self):
        ...
</snippet></ROW><ROW><id>1058125</id><snippet>db.delete(Bottom.all(keys_only=True).filter("daddy =", top).fetch(1000))
</snippet></ROW><ROW><id>1058152</id><snippet>reputation</snippet></ROW><ROW><id>1058693</id><snippet>import BeautifulSoup
html = "&lt;html&gt;&lt;body&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='foo'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/body&gt;&lt;/html&gt;"
soup = BeautifulSoup.BeautifulSoup(html)
</snippet></ROW><ROW><id>1058693</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>1058693</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>1058693</id><snippet>for ana in soup.findAll('a'):
  if ana.parent.name == 'td':
    print ana["href"]
</snippet></ROW><ROW><id>1058727</id><snippet>import random
random.choice (mylist)
</snippet></ROW><ROW><id>1058922</id><snippet>''.join(list_of_strings)
</snippet></ROW><ROW><id>1058995</id><snippet>print str</snippet></ROW><ROW><id>1058995</id><snippet>import sys; print sys.stdout.encoding</snippet></ROW><ROW><id>1058995</id><snippet>print repr(str)</snippet></ROW><ROW><id>1058995</id><snippet>print str</snippet></ROW><ROW><id>1058995</id><snippet>\python26\python hockey.py</snippet></ROW><ROW><id>1058995</id><snippet>cp850</snippet></ROW><ROW><id>1058995</id><snippet>\python26\python hockey.py | more
</snippet></ROW><ROW><id>1058995</id><snippet>\python26\python hockey.py &gt;hockey.txt
</snippet></ROW><ROW><id>1058995</id><snippet>None</snippet></ROW><ROW><id>1058995</id><snippet>C:\junk&gt;\python26\python hockey.py &gt;hockey.txt
Traceback (most recent call last):
  File "hockey.py", line 18, in &lt;module&gt;
    print str
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe4' in position 2: ordinal not in range(128)
</snippet></ROW><ROW><id>1059488</id><snippet>SELECT id, table_name, ts_rank_cd(body, query) AS rank
    FROM search_view, to_tsquery('search&amp;words') query
    WHERE query @@ body
    ORDER BY rank DESC
    LIMIT 10;
</snippet></ROW><ROW><id>1059596</id><snippet>import re
DATA = "Hey, you - what are you doing here!?"
print re.findall(r"[\w']+", DATA)
# Prints ['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']
</snippet></ROW><ROW><id>1059596</id><snippet>'</snippet></ROW><ROW><id>1059716</id><snippet>&gt;&gt;&gt; n = 23
&gt;&gt;&gt; a = [n,n]
&gt;&gt;&gt; print id(n), id(a[0]), id(a[1])
8402048 8402048 8402048
&gt;&gt;&gt; n = 45
&gt;&gt;&gt; print id(n), id(a[0]), id(a[1])
8401784 8402048 8402048
</snippet></ROW><ROW><id>1059716</id><snippet>a</snippet></ROW><ROW><id>1059716</id><snippet>n</snippet></ROW><ROW><id>1059716</id><snippet>n</snippet></ROW><ROW><id>1059716</id><snippet>a</snippet></ROW><ROW><id>1059716</id><snippet>array.array</snippet></ROW><ROW><id>1059716</id><snippet>array.array('h')</snippet></ROW><ROW><id>1059716</id><snippet>list</snippet></ROW><ROW><id>1059716</id><snippet>arr</snippet></ROW><ROW><id>1059716</id><snippet>id(v)</snippet></ROW><ROW><id>1059716</id><snippet>array.array</snippet></ROW><ROW><id>1059845</id><snippet>class ClientForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        self.affiliate = kwargs.pop('affiliate')
        super(ClientForm, self).__init__(*args, **kwargs)
        self.fields["referral"].queryset = Referral.objects.filter(affiliate = self.affiliate)

    class Meta:
        model = Client
</snippet></ROW><ROW><id>1059845</id><snippet>form = ClientForm(affiliate=request.affiliate)
</snippet></ROW><ROW><id>1059981</id><snippet>d1 = {'a': 1, 'b': 2}
d2 = {'a': 1}
l = [d1, d2, d1, d2, d1, d2]
for d in l:
    d.pop('b',None)
print l
</snippet></ROW><ROW><id>1060244</id><snippet>from decorator import decorator
def substitute_args(arg_sub_dict):
  @decorator
  def wrapper(fun, arg):
    new_arg = arg_sub_dict.get(arg, arg)
    return fun(new_arg)
  return wrapper
</snippet></ROW><ROW><id>1060244</id><snippet>substitute_args</snippet></ROW><ROW><id>1060244</id><snippet>decorator</snippet></ROW><ROW><id>1060244</id><snippet>def substitute_args(arg_sub_dict):
  def my_decorator(fun):
    def wrapper(arg):
      new_arg = arg_sub_dict.get(arg, arg)
      return fun(new_arg)
    # magic to update __name__, etc.
    return wrapper
  return my_decorator
</snippet></ROW><ROW><id>1060244</id><snippet>@substitute_args({}) # this function is called and return value is the decorator
def f(x):
  return x
# that (anonymous) decorator is applied to f
</snippet></ROW><ROW><id>1060244</id><snippet>def f(x):
  return x
f = substitude_args({})(f) # notice the double call
</snippet></ROW><ROW><id>1060330</id><snippet>for single_date in (start_date + timedelta(n) for n in range(day_count)):
    print ...
</snippet></ROW><ROW><id>1060330</id><snippet>def daterange(start_date, end_date):
    for n in range(int ((end_date - start_date).days)):
        yield start_date + timedelta(n)

for single_date in daterange(start_date, end_date):
    print strftime("%Y-%m-%d", single_date.timetuple())
</snippet></ROW><ROW><id>1060330</id><snippet>range()</snippet></ROW><ROW><id>1060515</id><snippet>import subprocess

def php(script_path):
    p = subprocess.Popen(['php', script_path], stdout=subprocess.PIPE)
    result = p.communicate()[0]
    return result

# YOUR CODE BELOW:
page_html = "&lt;h1&gt;News and Updates&lt;/h1&gt;"
news_script_output = php("news-generator.php") 
print page_html + news_script_output
</snippet></ROW><ROW><id>1060547</id><snippet>type(obj)</snippet></ROW><ROW><id>1060547</id><snippet>type.__class__</snippet></ROW><ROW><id>1060547</id><snippet>&gt;&gt;&gt; class a(object):
...     pass
...
&gt;&gt;&gt; class b(a):
...     pass
...
&gt;&gt;&gt; class c:
...     pass
...
&gt;&gt;&gt; ai=a()
&gt;&gt;&gt; bi=b()
&gt;&gt;&gt; ci=c()
&gt;&gt;&gt; type(ai) is ai.__class__
True
&gt;&gt;&gt; type(bi) is bi.__class__
True
&gt;&gt;&gt; type(ci) is ci.__class__
False
</snippet></ROW><ROW><id>1060862</id><snippet>__call__</snippet></ROW><ROW><id>1060862</id><snippet>mod_call</snippet></ROW><ROW><id>1060862</id><snippet>&lt;type 'module'&gt;</snippet></ROW><ROW><id>1061350</id><snippet>__lt__</snippet></ROW><ROW><id>1061350</id><snippet>class ComparableMixin:
  def __eq__(self, other):
    return not self&lt;other and not other&lt;self
  def __ne__(self, other):
    return self&lt;other or other&lt;self
  def __gt__(self, other):
    return other&lt;self
  def __ge__(self, other):
    return not self&lt;other
  def __le__(self, other):
    return not other&lt;self
</snippet></ROW><ROW><id>1061350</id><snippet>__lt__</snippet></ROW><ROW><id>1061350</id><snippet>__eq__</snippet></ROW><ROW><id>1061350</id><snippet>__ne__</snippet></ROW><ROW><id>1061350</id><snippet>dict</snippet></ROW><ROW><id>1061350</id><snippet>__ne__</snippet></ROW><ROW><id>1061350</id><snippet>def __ne__(self, other):
  return not self == other
</snippet></ROW><ROW><id>1061350</id><snippet>&lt;</snippet></ROW><ROW><id>1061350</id><snippet>__cmp__</snippet></ROW><ROW><id>1061350</id><snippet>__lt__</snippet></ROW><ROW><id>1061350</id><snippet>__key__</snippet></ROW><ROW><id>1061350</id><snippet>class KeyedMixin:
  def __lt__(self, other):
    return self.__key__() &lt; other.__key__()
  # and so on for other comparators, as above, plus:
  def __hash__(self):
    return hash(self.__key__())
</snippet></ROW><ROW><id>1061350</id><snippet>__key__</snippet></ROW><ROW><id>1061378</id><snippet>runcall(main, self.argv)
</snippet></ROW><ROW><id>1061540</id><snippet>x = raw_input('How many numbers do you want to play?')
for i in xrange(int(x)):
   print random.randrange(1,81)
</snippet></ROW><ROW><id>1061540</id><snippet>xrange</snippet></ROW><ROW><id>1061540</id><snippet>int</snippet></ROW><ROW><id>1061540</id><snippet>raw_input</snippet></ROW><ROW><id>1061540</id><snippet>randrange</snippet></ROW><ROW><id>1061702</id><snippet>cgi.escape</snippet></ROW><ROW><id>1061702</id><snippet>&lt;</snippet></ROW><ROW><id>1061702</id><snippet>&lt;</snippet></ROW><ROW><id>1061702</id><snippet>&gt;</snippet></ROW><ROW><id>1061702</id><snippet>&gt;</snippet></ROW><ROW><id>1061702</id><snippet>&amp;</snippet></ROW><ROW><id>1061702</id><snippet>&amp;</snippet></ROW><ROW><id>1061702</id><snippet>data.encode('ascii', 'xmlcharrefreplace')
</snippet></ROW><ROW><id>1061702</id><snippet>data</snippet></ROW><ROW><id>1061702</id><snippet>unicode</snippet></ROW><ROW><id>1061702</id><snippet>unicode</snippet></ROW><ROW><id>1061702</id><snippet>utf-8</snippet></ROW><ROW><id>1061702</id><snippet>&gt;&gt;&gt; cgi.escape(u'&lt;a&gt;bá&lt;/a&gt;').encode('ascii', 'xmlcharrefreplace')
'&lt;a&gt;bá&lt;/a&gt;
</snippet></ROW><ROW><id>1061702</id><snippet>quote</snippet></ROW><ROW><id>1061702</id><snippet>cgi.escape</snippet></ROW><ROW><id>1061702</id><snippet>True</snippet></ROW><ROW><id>1061702</id><snippet>cgi.escape</snippet></ROW><ROW><id>1061702</id><snippet>"</snippet></ROW><ROW><id>1061702</id><snippet>html.escape</snippet></ROW><ROW><id>1061702</id><snippet>quote</snippet></ROW><ROW><id>1061806</id><snippet>...
t = 'application/xml';
if encoding != None:
  t += '; charset="%s"' % encoding
...
</snippet></ROW><ROW><id>1061899</id><snippet>from __future__ import division
from math import ceil

def make_combos(max_val,target_sum,n_cells):
    combos = []
    # The highest possible value of the next cell is whatever is 
    # largest of the max_val, or the target_sum minus the number 
    # of remaining cells (as you can't enter 0).
    highest = min(max_val, target_sum - n_cells + 1)
    # The lowest is the lowest number you can have that will add upp to 
    # target_sum if you multiply it with n_cells.
    lowest = int(ceil(target_sum/n_cells))
    for x in range(highest, lowest-1, -1):
        if n_cells == 1: # This is the last cell, no more recursion.
            combos.append((x,))
            break
        # Recurse to get the next cell:
        # Set the max to x (or we'll get duplicates like
        # (6,3,2,1) and (6,2,3,1), which is pointless.
        # Reduce the target_sum with x to keep the sum correct.
        # Reduce the number of cells with 1.
        for combo in make_combos(x, target_sum-x, n_cells-1):
            combos.append((x,)+combo)
    return combos

if __name__ == '__main__':
    import pprint
    # And by using pprint the output gets easier to read
    pprint.pprint(make_combos( 6,12,4))
</snippet></ROW><ROW><id>1061899</id><snippet>max_val=8, target_sum=20 and n_cells=5</snippet></ROW><ROW><id>1061899</id><snippet>(8,6,4,1,1,)</snippet></ROW><ROW><id>1061899</id><snippet>from __future__ import division
from math import ceil

def make_combos(max_val,target_sum,n_cells):
    highest = min(max_val, target_sum - n_cells + 1)
    lowest = int(ceil(target_sum/n_cells))
    for x in xrange(highest, lowest-1, -1):
        if n_cells == 1:
            yield (x,)
            break
        for combo in make_combos(x, target_sum-x, n_cells-1):
            yield (x,)+combo

if __name__ == '__main__':
    import pprint
    pprint.pprint(list(make_combos( 6,12,4)))
</snippet></ROW><ROW><id>1061960</id><snippet>for sublist in thelist:
  sublist.insert(0, 9)
</snippet></ROW><ROW><id>1061960</id><snippet>list</snippet></ROW><ROW><id>1061960</id><snippet>mylist</snippet></ROW><ROW><id>1061960</id><snippet>thelist</snippet></ROW><ROW><id>1061960</id><snippet>list</snippet></ROW><ROW><id>1061960</id><snippet>for sublist in thelist:
  sublist[0:0] = 8, 9
</snippet></ROW><ROW><id>1061960</id><snippet>sublist[0:0]</snippet></ROW><ROW><id>1061960</id><snippet>sublist</snippet></ROW><ROW><id>1062030</id><snippet>2.*</snippet></ROW><ROW><id>1062030</id><snippet>3.*</snippet></ROW><ROW><id>1062030</id><snippet>3.*</snippet></ROW><ROW><id>1062030</id><snippet>key=lambda x: str(type(x))</snippet></ROW><ROW><id>1062030</id><snippet>sort</snippet></ROW><ROW><id>1062030</id><snippet>&gt;&gt;&gt; decimal.Decimal('2.0') &gt; 1.2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: Decimal() &gt; float()
</snippet></ROW><ROW><id>1062030</id><snippet>2.*</snippet></ROW><ROW><id>1062030</id><snippet>'%.2f' % x</snippet></ROW><ROW><id>1062030</id><snippet>repr(x)</snippet></ROW><ROW><id>1062030</id><snippet>def to_decimal(float_price):
    return decimal.Decimal('%.2f' % float_price)
</snippet></ROW><ROW><id>1062124</id><snippet>NotImplemented</snippet></ROW><ROW><id>1062124</id><snippet>False</snippet></ROW><ROW><id>1062124</id><snippet>x.__op__(y)</snippet></ROW><ROW><id>1062124</id><snippet>y.__rop__(x)</snippet></ROW><ROW><id>1062124</id><snippet>__rop__()</snippet></ROW><ROW><id>1062124</id><snippet>__rop__()</snippet></ROW><ROW><id>1062124</id><snippet>__op__()</snippet></ROW><ROW><id>1062124</id><snippet>__op__()</snippet></ROW><ROW><id>1062267</id><snippet># To fetch and iterate over every Childs entity that refers to the
# Parent instance p:
for child in p.children:
# ...
</snippet></ROW><ROW><id>1062295</id><snippet>Framebuffer, XOrigin, YOrigin = display.getFrameBuffer(ScreenId)
</snippet></ROW><ROW><id>1062466</id><snippet>foo: do-foo.py
    python do-foo.py &gt; foo
</snippet></ROW><ROW><id>1062691</id><snippet>import atexit
atexit._exithandlers = []
</snippet></ROW><ROW><id>1062691</id><snippet>logging</snippet></ROW><ROW><id>1062691</id><snippet>atexit</snippet></ROW><ROW><id>1062691</id><snippet>my_handler_entries = [e for e in atexit._exithandlers if e[0] == my_handler_func]
for e in my_handler_entries:
    atexit._exithandlers.remove(e)
</snippet></ROW><ROW><id>1062691</id><snippet>my_handler_func</snippet></ROW><ROW><id>1062691</id><snippet>atexit</snippet></ROW><ROW><id>1062824</id><snippet>[x for x in a + b if (a + b).count(x) == 1]
</snippet></ROW><ROW><id>1062824</id><snippet>list(set(a).symmetric_difference(set(b)))
</snippet></ROW><ROW><id>1062824</id><snippet>list(set(a) ^ set(b))
</snippet></ROW><ROW><id>1063249</id><snippet>import exceptions
l=[]
try:
    l[1]
except exceptions.IndexError,e:
    print e

try:
    l[1]
except IndexError,e:
    print e
</snippet></ROW><ROW><id>1063249</id><snippet>import os
os.myerror = exceptions.IndexError
try:
    l[1]
except os.myerror,e:
    print e
</snippet></ROW><ROW><id>1063684</id><snippet>f = File.new("tracklist.txt", "r")
s = f.read
s.scan(/mmc.+?mp3/) do |track|
  puts track
end
</snippet></ROW><ROW><id>1063684</id><snippet>s</snippet></ROW><ROW><id>1063684</id><snippet>/mmc.+?mp3/</snippet></ROW><ROW><id>1063684</id><snippet>String#scan</snippet></ROW><ROW><id>1063862</id><snippet>&gt;&gt;&gt; "Return value: %c%c%c" % (5,6,7)
'Return value: \x05\x06\x07'
</snippet></ROW><ROW><id>1063862</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; foo, bar, kaka = struct.unpack("BBB", '\x06\x06\x06')
&gt;&gt;&gt; struct.pack("BBB", foo, bar+1, kaka+5)
'\x06\x07\x0b'
</snippet></ROW><ROW><id>1063888</id><snippet>type: //map
values:
  type: //rec
  required:
    exec: //str
  optional:
    aliases:
      type: //arr
      contents: //str
      length: {min: 1, max: 10}
    filter:
      type: //rec
      optional:
        sms: //str
        email: //str
        all: //str
</snippet></ROW><ROW><id>1064308</id><snippet>encodings</snippet></ROW><ROW><id>1064308</id><snippet>codecs</snippet></ROW><ROW><id>1064308</id><snippet>import codecs

def encalias(oldname, newname):
  old = codecs.lookup(oldname)
  new = codecs.CodecInfo(old.encode, old.decode, 
                         streamreader=old.streamreader,
                         streamwriter=old.streamwriter,
                         incrementalencoder=old.incrementalencoder,
                         incrementaldecoder=old.incrementaldecoder,
                         name=newname)
  def searcher(aname):
    if aname == newname:
      return new
    else:
      return None
  codecs.register(searcher)
</snippet></ROW><ROW><id>1064370</id><snippet>os.kill(process.pid, signal.SIGKILL)
</snippet></ROW><ROW><id>1064721</id><snippet>sys</snippet></ROW><ROW><id>1064721</id><snippet>stdin</snippet></ROW><ROW><id>1064721</id><snippet>Foo(String name, int size) {
</snippet></ROW><ROW><id>1064721</id><snippet>private final String name;
private final int size;

public String getName() {
  return name;
}

public int getSize() {
  return size;
}

@Override
public boolean equals(Object that) {
  return this == that
      || (that instanceof Foo &amp;&amp; equals((Foo) that));
}

public boolean equals(Foo that) {
  return Objects.equal(getName(), that.getName())
      &amp;&amp; this.getSize() == that.getSize();
}

@Override
public int hashCode() {
  return Objects.hashCode(
      getName(),
      getSize());
}

Foo(String name, int size) {
  this.name = Preconditions.checkNotNull(name);
  this.size = size;
</snippet></ROW><ROW><id>1064721</id><snippet>!jhelper.py</snippet></ROW><ROW><id>1064721</id><snippet>rev</snippet></ROW><ROW><id>1064721</id><snippet>tac</snippet></ROW><ROW><id>1065003</id><snippet>{{ thevar|slice:":-7" }}&lt;b&gt;{{ thevar|slice:"-7:" }}&lt;/b&gt;
</snippet></ROW><ROW><id>1065003</id><snippet>slice</snippet></ROW><ROW><id>1065003</id><snippet>s[:-7]</snippet></ROW><ROW><id>1065003</id><snippet>s[-7:]</snippet></ROW><ROW><id>1065351</id><snippet># aesthetically (so YMMV), I think the code would be better if it were ...
# (and I've asked some questions throughout)

j_map = {
  90: [0], # prefer lists [] to tuples (), I say...
  52.62263: [0,  72, 144, 216, 288],
  26.5651: [324, 36, 108, 180, 252],
  10.8123: [288,  0, 72, 144, 216]
   }
# have a look at dict() in http://docs.python.org/tutorial/datastructures.html
# to know what's going on here -- e.g. j_map['90'] is ['0',]

# then the following is cleaner
for j, k in j_map.iteritems():
  # first iteration j = '90', k=[0]
  # second iteration j = '52.62263'', k= [0,...,288]
  for b in k:
    # fixed the ordering of these statements so this may actually work
    cmd = "program_name -j %f -b %d" % (j, b)
      # where program_name is the program you're calling
      # be wary of the printf-style %f formatting and
      #     how program_name takes its input
    print cmd
    process = Popen(cmd, shell=True, stderr=STDOUT, stdout=PIPE)
    outputstring = process.communicate()[0]
    outputlist = outputstring.splitlines()
    blah = outputlist[53]
</snippet></ROW><ROW><id>1066027</id><snippet>^^</snippet></ROW><ROW><id>1066027</id><snippet>++</snippet></ROW><ROW><id>1066027</id><snippet>+*</snippet></ROW><ROW><id>1066027</id><snippet>&gt;&gt;&gt; from __future__ import braces
  File "&lt;stdin&gt;", line 1
SyntaxError: not a chance
</snippet></ROW><ROW><id>1066838</id><snippet>numpy</snippet></ROW><ROW><id>1066838</id><snippet>itertools</snippet></ROW><ROW><id>1066838</id><snippet>def runs_of_ones(bits):
  for bit, group in itertools.groupby(bits):
    if bit: yield sum(group)
</snippet></ROW><ROW><id>1066838</id><snippet>def runs_of_ones_list(bits):
  return [sum(g) for b, g in itertools.groupby(bits) if b]
</snippet></ROW><ROW><id>1066838</id><snippet>def runs_of_ones_array(bits):
  # make sure all runs of ones are well-bounded
  bounded = numpy.hstack(([0], bits, [0]))
  # get 1 at run starts and -1 at run ends
  difs = numpy.diff(bounded)
  run_starts, = numpy.where(difs &gt; 0)
  run_ends, = numpy.where(difs &lt; 0)
  return run_ends - run_starts
</snippet></ROW><ROW><id>1066873</id><snippet>[myTri.a, myTri.b, ...]</snippet></ROW><ROW><id>1066873</id><snippet>0</snippet></ROW><ROW><id>1066873</id><snippet>[0, 0, 0, 0, 0, 0]</snippet></ROW><ROW><id>1066873</id><snippet>sample[0]</snippet></ROW><ROW><id>1066873</id><snippet>myTri</snippet></ROW><ROW><id>1066873</id><snippet>random.sample</snippet></ROW><ROW><id>1066873</id><snippet>sample = random.sample(["a", "b", "c", "d", "e", "f"], 3)
</snippet></ROW><ROW><id>1066873</id><snippet>setattr</snippet></ROW><ROW><id>1066873</id><snippet>setattr(myTri, "b", 72)</snippet></ROW><ROW><id>1066873</id><snippet>myTri.b = 72</snippet></ROW><ROW><id>1066873</id><snippet>setattr(myTri, sample[0], random.randint(1, 100))
setattr(myTri, sample[1], random.randint(1, 100))
setattr(myTri, sample[2], random.randint(1, 100))
</snippet></ROW><ROW><id>1066947</id><snippet>zap.co.it</snippet></ROW><ROW><id>1066947</id><snippet>co.it</snippet></ROW><ROW><id>1066947</id><snippet>zap.co.uk</snippet></ROW><ROW><id>1066947</id><snippet>co.uk</snippet></ROW><ROW><id>1066947</id><snippet>zap.co.uk</snippet></ROW><ROW><id>1066999</id><snippet>content, mimetype = renderer().render(data=dataset)
return HttpResponse(content, mimetype=mimetype)
</snippet></ROW><ROW><id>1066999</id><snippet>format2renderer = dict(
  xml=XMLRenderer,
  rss=RSSRenderer,
  # ...etc...
)
</snippet></ROW><ROW><id>1066999</id><snippet>renderer = format2renderer.get(format)
if renderer is not None: ...
</snippet></ROW><ROW><id>1066999</id><snippet>None</snippet></ROW><ROW><id>1067151</id><snippet>import re, fileinput

def main():
  for line in fileinput.input():
    process = False
    for nope in ('BEGIN TRANSACTION','COMMIT',
                 'sqlite_sequence','CREATE UNIQUE INDEX'):
      if nope in line: break
    else:
      process = True
    if not process: continue
    m = re.search('CREATE TABLE "([a-z_]*)"(.*)', line)
    if m:
      name, sub = m.groups()
      line = '''DROP TABLE IF EXISTS %(name)s;
CREATE TABLE IF NOT EXISTS %(name)s%(sub)s
'''
      line = line % dict(name=name, sub=sub)
    else:
      m = re.search('INSERT INTO "([a-z_]*)"(.*)', line)
      if m:
        line = 'INSERT INTO %s%s\n' % m.groups()
        line = line.replace('"', r'\"')
        line = line.replace('"', "'")
    line = re.sub(r"([^'])'t'(.)", r"\1THIS_IS_TRUE\2", line)
    line = line.replace('THIS_IS_TRUE', '1')
    line = re.sub(r"([^'])'f'(.)", r"\1THIS_IS_FALSE\2", line)
    line = line.replace('THIS_IS_FALSE', '0')
    line = line.replace('AUTOINCREMENT', 'AUTO_INCREMENT')
    print line,

main()
</snippet></ROW><ROW><id>1067995</id><snippet>&gt;&gt;&gt; import tkMessageBox, Tkinter
&gt;&gt;&gt; Tkinter.Tk().withdraw()
&gt;&gt;&gt; tkMessageBox.askquestion(
...     title="Symbol Display",
...     message="Is the symbol visible on the console")
</snippet></ROW><ROW><id>1068303</id><snippet>&gt;&gt;&gt; import win32com.client
&gt;&gt;&gt; js = win32com.client.Dispatch('MSScriptControl.ScriptControl')
&gt;&gt;&gt; js.Language = 'JavaScript'
&gt;&gt;&gt; js.AddCode('function add(a, b) {return a+b;}')
&gt;&gt;&gt; js.Run('add', 1, 2)
3
</snippet></ROW><ROW><id>1068366</id><snippet>fast = TestSuite()
fast.addTests( TestFastThis )
fast.addTests( TestCastThat )
</snippet></ROW><ROW><id>1068366</id><snippet>slow = TestSuite()
slow.addTests( TestSlowAnother )
slow.addTests( TestSlowSomeMore )
</snippet></ROW><ROW><id>1068366</id><snippet>alltests = unittest.TestSuite([fast, slow])
</snippet></ROW><ROW><id>1068366</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>1068366</id><snippet>if __name__ == "__main__":
    suite = eval(sys.argv[1])
    unittest.TextTestRunner().run(suite)
</snippet></ROW><ROW><id>1068616</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>1068616</id><snippet>{% for date,state in the_date_list %}
    &lt;span class="{{state}}"&gt;date&lt;/span&gt;
{% endfor %}
</snippet></ROW><ROW><id>1069016</id><snippet>wx.MessageBox(messages.GREET_SO)
</snippet></ROW><ROW><id>1069016</id><snippet>wx.MessageBox(_("GREET_SO")) or wx.MessageBox(_("messages.GREET_SO"))
</snippet></ROW><ROW><id>1070222</id><snippet>django-extensions</snippet></ROW><ROW><id>1070222</id><snippet>shell_plus</snippet></ROW><ROW><id>1070222</id><snippet>python manage.py shell_plus
</snippet></ROW><ROW><id>1070756</id><snippet>&gt; ipython

# In [1]: 
import pipes

# In [2]: 
pipes.quote("hello stack overflow's quite cool")
# Out[2]: '"hello stack overflow\'s quite cool"'
</snippet></ROW><ROW><id>1070796</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>1070965</id><snippet>all()</snippet></ROW><ROW><id>1070965</id><snippet>def is_odd(x): 
    return x%2==1

result = all(is_odd(x) for x in [1,3,5,7])
</snippet></ROW><ROW><id>1070965</id><snippet>inject</snippet></ROW><ROW><id>1070965</id><snippet>reduce()</snippet></ROW><ROW><id>1070965</id><snippet>result = reduce(lambda x,y: x and y%2==1, [1,3,5,7], True)
</snippet></ROW><ROW><id>1070965</id><snippet>all()</snippet></ROW><ROW><id>1070965</id><snippet>False</snippet></ROW><ROW><id>1070965</id><snippet>reduce</snippet></ROW><ROW><id>1071115</id><snippet>paster server development.ini stop
</snippet></ROW><ROW><id>1071185</id><snippet>paster serve development.ini --daemon
</snippet></ROW><ROW><id>1071239</id><snippet>zip</snippet></ROW><ROW><id>1071239</id><snippet>myZip = list( zip ( funcTriple, (1, 3, 5) ) )
</snippet></ROW><ROW><id>1071294</id><snippet>sub</snippet></ROW><ROW><id>1071294</id><snippet>def encode_string_with_links(unencoded_string):
  return URL_REGEX.sub(r'&lt;a href="\1"&gt;\1&lt;/a&gt;', unencoded_string)
</snippet></ROW><ROW><id>1071294</id><snippet>URL_REGEX</snippet></ROW><ROW><id>1071294</id><snippet>URL_REGEX = re.compile(r'''((?:mailto:|ftp://|http://)[^ &lt;&gt;'"{}|\\^`[\]]*)''')
</snippet></ROW><ROW><id>1071823</id><snippet>class NameStrength {
    public String name;
    public String strength;
}
</snippet></ROW><ROW><id>1071823</id><snippet>Map&lt;Integer, NameStrength&gt; nodesMap = new HashMap&lt;Integer, NameStrength&gt;();
</snippet></ROW><ROW><id>1071823</id><snippet>for (NameStrength nameStrength : nodesMap.values()) {}
</snippet></ROW><ROW><id>1071823</id><snippet>for (Entry&lt;Integer, NameStrength&gt; entry : nodesMap.entrySet()) {}
</snippet></ROW><ROW><id>1071939</id><snippet>counter</snippet></ROW><ROW><id>1072576</id><snippet>&gt;&gt;&gt; import filecmp
&gt;&gt;&gt; filecmp.cmp('file1.txt', 'file1.txt')
True
&gt;&gt;&gt; filecmp.cmp('file1.txt', 'file2.txt')
False
</snippet></ROW><ROW><id>1072576</id><snippet>import random
import string
import hashlib
import time

def getRandText(N):
    return  "".join([random.choice(string.printable) for i in xrange(N)])

N=1000000
randText1 = getRandText(N)
randText2 = getRandText(N)

def cmpHash(text1, text2):
    hash1 = hashlib.md5()
    hash1.update(text1)
    hash1 = hash1.hexdigest()

    hash2 = hashlib.md5()
    hash2.update(text2)
    hash2 = hash2.hexdigest()

    return  hash1 == hash2

def cmpByteByByte(text1, text2):
    return text1 == text2

for cmpFunc in (cmpHash, cmpByteByByte):
    st = time.time()
    for i in range(10):
        cmpFunc(randText1, randText2)
    print cmpFunc.func_name,time.time()-st
</snippet></ROW><ROW><id>1072576</id><snippet>cmpHash 0.234999895096
cmpByteByByte 0.0
</snippet></ROW><ROW><id>1072669</id><snippet>__dict__</snippet></ROW><ROW><id>1072669</id><snippet>object</snippet></ROW><ROW><id>1072669</id><snippet>__slots__</snippet></ROW><ROW><id>1072669</id><snippet>__dict__</snippet></ROW><ROW><id>1072669</id><snippet>object</snippet></ROW><ROW><id>1072963</id><snippet>print 'computing %s %% %s' % (num1, num2)
</snippet></ROW><ROW><id>1073002</id><snippet>score += child.points*math.pow(.1, get_ancestors(child))
score += get_score(child)
</snippet></ROW><ROW><id>1073002</id><snippet>score += get_score(child)*.1
</snippet></ROW><ROW><id>1073002</id><snippet>def get_score(player):
    score = player.points
    for child in children:
        score += get_score(child)*.1
    return score
</snippet></ROW><ROW><id>1073230</id><snippet>import threading

class Foo(object):
    instance_count = 0

def inc_by(n):
    for i in xrange(n):
        Foo.instance_count += 1

threads = [threading.Thread(target=inc_by, args=(100000,)) for thread_nr in xrange(100)]
for thread in threads: thread.start()
for thread in threads: thread.join()

print(Foo.instance_count) # Expected 10M for threadsafe ops, I get around 5M
</snippet></ROW><ROW><id>1073230</id><snippet>Foo.lock = threading.Lock()

def interlocked_inc(n):
    for i in xrange(n):
        with Foo.lock:
            Foo.instance_count += 1

threads = [threading.Thread(target=interlocked_inc, args=(100000,)) for thread_nr in xrange(100)]
for thread in threads: thread.start()
for thread in threads: thread.join()

print(Foo.instance_count)
</snippet></ROW><ROW><id>1073582</id><snippet>g.next()</snippet></ROW><ROW><id>1073582</id><snippet>g.__next__()</snippet></ROW><ROW><id>1073582</id><snippet>__init__()</snippet></ROW><ROW><id>1073582</id><snippet>__del__</snippet></ROW><ROW><id>1073582</id><snippet>g.__next__()</snippet></ROW><ROW><id>1073582</id><snippet>next(g)</snippet></ROW><ROW><id>1073582</id><snippet>func_name</snippet></ROW><ROW><id>1073582</id><snippet>__name__</snippet></ROW><ROW><id>1073801</id><snippet>SET TEXTSIZE 2147483647</snippet></ROW><ROW><id>1073801</id><snippet>/etc/freetds/freetds.conf</snippet></ROW><ROW><id>1073801</id><snippet>cur.execute('SET TEXTSIZE 2147483647 SELECT myimage FROM testing WHERE id = 1')
</snippet></ROW><ROW><id>1073801</id><snippet>TEXTSIZE</snippet></ROW><ROW><id>1073801</id><snippet>text</snippet></ROW><ROW><id>1073801</id><snippet>image</snippet></ROW><ROW><id>1073801</id><snippet>set TEXTSIZE</snippet></ROW><ROW><id>1073801</id><snippet>T-SQL</snippet></ROW><ROW><id>1073801</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pyodbc
import urllib2

odbcstring = "SERVER=10.32.42.69;UID=sa;PWD=secret;DATABASE=Common;DRIVER=FreeTDS"
con = pyodbc.connect(odbcstring)
cur = con.cursor()

cur.execute("""
IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
      WHERE TABLE_NAME = 'testing')
   DROP TABLE testing
""")

cur.execute('''
CREATE TABLE testing (
    id INTEGER NOT NULL IDENTITY(1,1), 
    myimage IMAGE NULL,
    PRIMARY KEY (id)
)
    ''')

con.commit()
cur = con.cursor()
url = 'http://www.forestwander.com/wp-content/original/2009_02/west-virginia-mountains.jpg'
data = urllib2.urlopen(url).read()

sql = "INSERT INTO testing (myimage) VALUES (?)"
cur.execute(sql, (pyodbc.Binary(data),))
con.commit()

cur.execute('SELECT DATALENGTH(myimage) FROM testing WHERE id = 1')
data_inside = cur.fetchone()[0]
assert data_inside == len(data)

cur.execute('SET TEXTSIZE 2147483647 SELECT myimage FROM testing WHERE id = 1')
result = cur.fetchone()
returned_data = str(result[0])
print 'Original: %d; Returned; %d' % (len(data), len(returned_data))
assert data == returned_data
</snippet></ROW><ROW><id>1073935</id><snippet>import tw.forms
f = tw.forms.TableForm(fields=[tw.forms.CheckBoxTable("name",options=(("foo"),("bar")))]) 
f(value={"name":{"foo":True,"bar":False}})
&gt;&gt;&gt; u'&lt;form xmlns="http://www.w3.org/1999/xhtml" action="" method="post" class="tableform"&gt;\n    &lt;table border="0" cellspacing="0" cellpadding="2"&gt;\n&lt;tr id="name.container" class="even" title=""&gt;\n            &lt;td class="labelcol"&gt;\n                &lt;label id="name.label" for="name" class="fieldlabel"&gt;Name&lt;/label&gt;\n            &lt;/td&gt;\n            &lt;td class="fieldcol"&gt;\n                &lt;table id="name" class="checkboxtable"&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n
    &lt;input id="name_0" value="foo" name="name" type="checkbox" checked="checked" /&gt;\n            &lt;label for="name_0"&gt;foo&lt;/label&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;&lt;tr&gt;\n        &lt;td&gt;\n            &lt;input id="name_1" value="bar" name="name" type="checkbox" /&gt;\n            &lt;label for="name_1"&gt;bar&lt;/label&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n
&lt;/tbody&gt;\n&lt;/table&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;&lt;tr id="submit.container" class="odd" title=""&gt;\n            &lt;td class="labelcol"&gt;\n            &lt;/td&gt;\n
       &lt;td class="fieldcol"&gt;\n                &lt;input type="submit" class="submitbutton" value="Submit" /&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/form&gt;'
</snippet></ROW><ROW><id>1074277</id><snippet>response = HttpResponse(mimetype="image/png")
img.save(response, "PNG")
return response
</snippet></ROW><ROW><id>1074587</id><snippet># SConstruct
SConscript('SConscript', build_dir='build', src='.')
</snippet></ROW><ROW><id>1074587</id><snippet># SConscript
Program('main.c')
</snippet></ROW><ROW><id>1074750</id><snippet>importHook</snippet></ROW><ROW><id>1074750</id><snippet>iu.py</snippet></ROW><ROW><id>1074750</id><snippet>level=</snippet></ROW><ROW><id>1074750</id><snippet>svn log -r HEAD
</snippet></ROW><ROW><id>1074750</id><snippet>r685 | giovannibajo | 2009-06-30 05:19:59 -0700 (Tue, 30 Jun 2009) | 3 lines

Preliminar support for creating a bundle on Mac OSX.
Yet to be integrated into Makespec.py.
</snippet></ROW><ROW><id>1074750</id><snippet>svn up</snippet></ROW><ROW><id>1075089</id><snippet>import Image
import cStringIO
import math
import os
import stat

# try no more than 10 times, then give up
MAX_TRIES = 10

def getThumbnail(filename, max_bytes=(10*1024)):
    '''Get a thumbnail image of filename, &lt;max_bytes'''
    original_size = os.stat(filename)[stat.ST_SIZE]
    print "Original file size: %.1f KB" % (original_size/1024.)
    image = Image.open(filename)
    image.load()
    print "Original image size: %dx%d pixels" % image.size
    min_bytes = int(0.9 * max_bytes)
    largest_side = max(image.size)
    smallest_side = 16
    for attempt in range(MAX_TRIES):
        try_side = (largest_side + smallest_side) / 2
    print "Attempt #%d of %d" % (attempt+1, MAX_TRIES)
    print "Side must be within [%d:%d], now trying %d" % (
        smallest_side, largest_side, try_side)
    thumb = image.copy()
    thumb.thumbnail((try_side,try_side), Image.ANTIALIAS)
    afile = cStringIO.StringIO()
    thumb.save(afile, "PNG")
    resulting_size = len(afile.getvalue())
    afile.close()
    print "Reduced file size: %.1f KB" % (resulting_size/1024.)
    print "Reduced image size: %dx%d pixels" % thumb.size
    if min_bytes &lt;= resulting_size &lt;= max_bytes:
        print "Success!"
        return thumb
    elif resulting_size &gt; max_bytes:
        print "Too large (&gt;%d), reducing more" % max_bytes
        largest_side = try_side
    else:
        print "Too small (&lt;%d), reducing less" % min_bytes
        smallest_side = try_side
    print "too many attempts, returning what I've got!"
    return thumb

def main():
    thumb = getThumbnail("pyth.png")
    print "Reduced image size: %dx%d pixels" % thumb.size
    print "Saving to thumb.png"
    thumb.save("thumb.png")
    thumb_size = os.stat("thumb.png")[stat.ST_SIZE]
    print "Reduced file size: %.1f KB" % (thumb_size/1024.)
    print "Done, bye!"

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1075131</id><snippet>id()</snippet></ROW><ROW><id>1075131</id><snippet>is</snippet></ROW><ROW><id>1075131</id><snippet> if obj1 is obj2: 
     # Objects are identical.
</snippet></ROW><ROW><id>1075459</id><snippet>lsof</snippet></ROW><ROW><id>1075459</id><snippet>/proc/&lt;pid&gt;/fd/*</snippet></ROW><ROW><id>1075459</id><snippet>/proc/&lt;pid&gt;/fdinfo/*</snippet></ROW><ROW><id>1075459</id><snippet>lsof</snippet></ROW><ROW><id>1075700</id><snippet>if (self.a != 0) and (self.b != 0) :
</snippet></ROW><ROW><id>1075700</id><snippet>&amp;</snippet></ROW><ROW><id>1075700</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>1075700</id><snippet>if O not in (self.a, self.b) :
</snippet></ROW><ROW><id>1075700</id><snippet>"foo" in ("foo", 1, c, etc)</snippet></ROW><ROW><id>1075700</id><snippet>"foo" in ["foo", 1, c, etc]</snippet></ROW><ROW><id>1075700</id><snippet>"a" in "ago"</snippet></ROW><ROW><id>1075700</id><snippet>"foo" in {"foo" : "bar"}</snippet></ROW><ROW><id>1075700</id><snippet>O not in (self.a, self.b, self.c)
</snippet></ROW><ROW><id>1075700</id><snippet>(self.a != 0) and (self.b != 0) and (self.c != 0) 
</snippet></ROW><ROW><id>1075981</id><snippet>from django.db import models

class ArticleBase(models.Model):
    title = models.CharField()
    author = models.CharField()
    # Store the actual class name.
    class_name = models.CharField()

    # Define save to make sure class_name is set.
    def save(self, *args, **kwargs):
        self.class_name = self.__class__.__name__
        super(ArticleBase, self).save(*args, **kwargs)

    # Multi-table inheritance defines an attribute to fetch the child
    # from a parent instance given the lower case subclass name.
    def get_child(self):
        return getattr(self, self.class_name.lower())

    # If indeed you really need the class.
    def get_child_class(self):
        return self.get_child().__class__

    # Check the type against a subclass name or a subclass.
    # For instance, 'if article.child_is(News):'
    # or 'if article.child_is("News"):'.
    def child_is(self, cls):
        if isinstance(cls, basestring):
            return cls.lower() == self.class_name.lower()
        else:
            return self.get_child_class()  == cls

class Review(ArticleBase):
    rating = models.IntegerField()

class News(ArticleBase):
    source = models.CharField()
</snippet></ROW><ROW><id>1075981</id><snippet>def __unicode__(self)
    return self.get_child().__unicode__()
</snippet></ROW><ROW><id>1075981</id><snippet>__unicode__</snippet></ROW><ROW><id>1075981</id><snippet>__unicode__</snippet></ROW><ROW><id>1076577</id><snippet>DATA = {"records": [{"key1": "AAA", "key2": "BBB", "key3": "CCC", "key4": "AAA"}]}

for name, datalist in DATA.iteritems():  # Or items() in Python 3.x
    for datadict in datalist:
        for key, value in datadict.items():
            if value == "AAA":
                datadict[key] = "XXX"

print (DATA)
# Prints {'records': [{'key3': 'CCC', 'key2': 'BBB', 'key1': 'XXX', 'key4': 'XXX'}]}
</snippet></ROW><ROW><id>1076648</id><snippet>left = 2407
top = 804
width = 300
height = 200
box = (left, top, left+width, top+height)
area = img.crop(box)
</snippet></ROW><ROW><id>1076798</id><snippet>A</snippet></ROW><ROW><id>1076798</id><snippet>SIZE</snippet></ROW><ROW><id>1076798</id><snippet>A</snippet></ROW><ROW><id>1076798</id><snippet>A</snippet></ROW><ROW><id>1076798</id><snippet>class ClassWithSize(type):
    def __init__(cls, name, bases, attrs):
        if 'SIZE' not in attrs:
            raise NotImplementedError('The "%s" class does not implement a "SIZE" attribute' % name)
        super(ClassWithSize, cls).__init__(name, bases, attrs)

class A(object):
    __metaclass__ = ClassWithSize

    SIZE = 5
    def getsize(self):
        return self.SIZE

class B(A):
    SIZE = 6

class C(A):
    pass
</snippet></ROW><ROW><id>1076798</id><snippet>C</snippet></ROW><ROW><id>1077118</id><snippet>if sys.stdout.isatty():
    # You're running in a real terminal
else:
    # You're being piped or redirected
</snippet></ROW><ROW><id>1077205</id><snippet>[filename for path in dirs for filename in os.listdir(path)]
</snippet></ROW><ROW><id>1077253</id><snippet>class Order(models.Model):
  customer = models.foreignKey(Customer)
  total = models.charField(max_length=10)
  has_shipped = models.booleanField()
  products = models.ManyToManyField(Product)
</snippet></ROW><ROW><id>1077320</id><snippet>next</snippet></ROW><ROW><id>1077320</id><snippet>In [3]: (5*x for x in xrange(2,4)).next()
Out[3]: 10
</snippet></ROW><ROW><id>1077349</id><snippet>print("Hello, World!")
</snippet></ROW><ROW><id>1077349</id><snippet>print</snippet></ROW><ROW><id>1077362</id><snippet>struct_time</snippet></ROW><ROW><id>1077362</id><snippet>datetime.utctimetuple()</snippet></ROW><ROW><id>1077362</id><snippet>calendar.timegm()</snippet></ROW><ROW><id>1077362</id><snippet>calendar.timegm(parseddate.utctimetuple())
</snippet></ROW><ROW><id>1077362</id><snippet>utctimetuple()</snippet></ROW><ROW><id>1077370</id><snippet>import urllib2
proxy_handler = urllib2.ProxyHandler({'http': 'http://yourcorporateproxy:12345/'})
proxy_auth_handler = urllib2.HTTPBasicAuthHandler()
proxy_auth_handler.add_password('realm', 'host', 'username', 'password')

opener = build_opener(proxy_handler, proxy_auth_handler)
opener.open('http://www.stackoverflow.com')
</snippet></ROW><ROW><id>1077599</id><snippet>SCM_RIGHTS</snippet></ROW><ROW><id>1077599</id><snippet>multiprocessing</snippet></ROW><ROW><id>1077599</id><snippet>multiprocessing</snippet></ROW><ROW><id>1077599</id><snippet>file</snippet></ROW><ROW><id>1077646</id><snippet>self.response.headers['Location'] = urllib.quote(absolute_url.encode("utf-8"))
</snippet></ROW><ROW><id>1078077</id><snippet>import sys
sys.exc_info()
</snippet></ROW><ROW><id>1078282</id><snippet>.wsgi</snippet></ROW><ROW><id>1078282</id><snippet>touch</snippet></ROW><ROW><id>1078810</id><snippet>    menuBar = wx.MenuBar()
    fileMenu=wx.Menu()
    tempitem = fileMenu.Append(-1,"X")       # !!!
    tempitem.SetBitmap(getBmp())             # !!!
    item = fileMenu.Append(wx.ID_NEW, "New")
    fileMenu.Remove(tempitem.GetId())        # !!!
    item.SetBitmap(getBmp())
    item = fileMenu.Append(wx.ID_OPEN, "Open")
    item.SetBitmap(getBmp())
    item = fileMenu.Append(wx.ID_SAVE, "Save")
    item.SetBitmap(getBmp())
    menuBar.Append(fileMenu, "File")
    self.SetMenuBar(menuBar)
</snippet></ROW><ROW><id>1079007</id><snippet>import ctypes

winHttp = ctypes.windll.LoadLibrary("Winhttp.dll")

WINHTTP_ACCESS_TYPE_DEFAULT_PROXY=0
WINHTTP_NO_PROXY_NAME=WINHTTP_NO_PROXY_BYPASS=0
WINHTTP_FLAG_ASYNC=0x10000000
# http://msdn.microsoft.com/en-us/library/aa384098(VS.85).aspx
HINTERNET = winHttp.WinHttpOpen("PyWin32", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, WINHTTP_FLAG_ASYNC)

print HINTERNET
</snippet></ROW><ROW><id>1079284</id><snippet>x :: t -&gt; B
</snippet></ROW><ROW><id>1079284</id><snippet>B</snippet></ROW><ROW><id>1079284</id><snippet>apply</snippet></ROW><ROW><id>1079284</id><snippet>apply :: (t -&gt; B) -&gt; B
</snippet></ROW><ROW><id>1079803</id><snippet>cd /where/you/want/it; jar xf /path/to/jarfile.jar
</snippet></ROW><ROW><id>1079803</id><snippet>jar</snippet></ROW><ROW><id>1080010</id><snippet>if config:
    cherrypy.config.update(config)

tree.mount(root, script_name, config)

if hasattr(engine, "signal_handler"):
    engine.signal_handler.subscribe()
if hasattr(engine, "console_control_handler"):
    engine.console_control_handler.subscribe()

engine.start()
engine.block()
</snippet></ROW><ROW><id>1080010</id><snippet>Thread(target=cherrypy.quickstart, args=[Root()]).start()
</snippet></ROW><ROW><id>1080010</id><snippet>cherrypy.tree.mount(Root())
cherrypy.engine.start()
</snippet></ROW><ROW><id>1080056</id><snippet>#!/usr/bin/env python
y = 0
def myfunction(x):
  global y
  y += x

input = (1, 2, 3, 4)

print "Filter output: %s" % repr(filter(myfunction, input))
print "Side effect result: %d" % y
</snippet></ROW><ROW><id>1080056</id><snippet>Filter output: ()
Side effect result: 10
</snippet></ROW><ROW><id>1080192</id><snippet>self</snippet></ROW><ROW><id>1080192</id><snippet>self</snippet></ROW><ROW><id>1080192</id><snippet>this</snippet></ROW><ROW><id>1080192</id><snippet>self</snippet></ROW><ROW><id>1080192</id><snippet>this</snippet></ROW><ROW><id>1080422</id><snippet>master = list(daily)
random.shuffle(master)
</snippet></ROW><ROW><id>1080422</id><snippet>random.shuffle(endofday); master.extend(endofday)</snippet></ROW><ROW><id>1080422</id><snippet>def random_mix(seq_a, seq_b):
    iters = [iter(seq_a), iter(seq_b)]
    while True:
        it = random.choice(iters)
        try: yield it.next()
        except StopIteration:
            iters.remove(it)
            it = iters[0]
            for x in it: yield x
</snippet></ROW><ROW><id>1080422</id><snippet>master = list(random_mix(master, projects))</snippet></ROW><ROW><id>1080422</id><snippet>random.choice</snippet></ROW><ROW><id>1080422</id><snippet>def random_mix_rp(seq_a, seq_b):
    iters = [iter(seq_a), iter(seq_b)]
    lens = [len(seq_a), len(seq_b)]
    while True:
        r = random.randrange(sum(lens))
        itindex = r &lt; lens[0]
        it = iters[itindex]
        lens[itindex] -= 1

        try: yield it.next()
        except StopIteration:
            iters.remove(it)
            it = iters[0]
            for x in it: yield x
</snippet></ROW><ROW><id>1080422</id><snippet>def random_mix_rp1(seq_a, seq_b):
    iters = [iter(seq_a), iter(seq_b)]
    lens = [len(seq_a), len(seq_b)]
    while all(lens):
        r = random.randrange(sum(lens))
        itindex = r &lt; lens[0]
        it = iters[itindex]
        lens[itindex] -= 1
        yield it.next()
    for it in iters:
        for x in it: yield x
</snippet></ROW><ROW><id>1080439</id><snippet>^bar$</snippet></ROW><ROW><id>1080439</id><snippet>^.*(?&lt;!\.ml)$</snippet></ROW><ROW><id>1080444</id><snippet>point</snippet></ROW><ROW><id>1080444</id><snippet>converter= ( (0,) + 255*(255,) ).__getitem__
def black_or_white(img):
    return img.convert('L').point(converter)
</snippet></ROW><ROW><id>1080472</id><snippet>import httplib2
from BeautifulSoup import BeautifulSoup, SoupStrainer

http = httplib2.Http()
status, response = http.request('http://www.nytimes.com')

for link in BeautifulSoup(response, parseOnlyThese=SoupStrainer('a')):
    if link.has_attr('href'):
        print link['href']
</snippet></ROW><ROW><id>1080514</id><snippet>&gt;&gt;&gt; Foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot create 'foo.Foo' instances
&gt;&gt;&gt; Foo.__new__(Foo)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object.__new__(foo.Foo) is not safe, use foo.Foo.__new__()
</snippet></ROW><ROW><id>1080534</id><snippet>   def reload_module():
       import file2
       reload(file2)
</snippet></ROW><ROW><id>1080736</id><snippet>auto_id</snippet></ROW><ROW><id>1080736</id><snippet>f = ContactForm(auto_id=False)
</snippet></ROW><ROW><id>1081081</id><snippet>sys.exit</snippet></ROW><ROW><id>1081081</id><snippet>sys.exit</snippet></ROW><ROW><id>1081081</id><snippet>SystemExit</snippet></ROW><ROW><id>1081081</id><snippet>import sys
try:
    sys.exit()
except SystemExit:
    print "Somebody called sys.exit()."
print "Still running."
</snippet></ROW><ROW><id>1081081</id><snippet>finally</snippet></ROW><ROW><id>1081081</id><snippet>try:
    do_something()
finally:
    cleanup()
</snippet></ROW><ROW><id>1081150</id><snippet>class CommentForm(forms.Form):
    comment = forms.CharField(widget=forms.Textarea(), label='')
</snippet></ROW><ROW><id>1081150</id><snippet>comment = new CommentForm()
</snippet></ROW><ROW><id>1081252</id><snippet>for i in xrange(len(sequence)):
    val = sequence[i]
    pass
</snippet></ROW><ROW><id>1081252</id><snippet>for i, val in enumerate(iterable):
    pass
</snippet></ROW><ROW><id>1081252</id><snippet>return True</snippet></ROW><ROW><id>1081252</id><snippet>return 1</snippet></ROW><ROW><id>1081252</id><snippet>evens = (i for i in xrange(limit) if i % 2 == 0)
</snippet></ROW><ROW><id>1081252</id><snippet>assert [1, 2, 3, 4][::2] == [1, 3]
</snippet></ROW><ROW><id>1081252</id><snippet>pseudo_set = {'foo': None, 'bar': None}
assert 'foo' in pseudo_set
</snippet></ROW><ROW><id>1081252</id><snippet>set_ = set(['foo', 'bar'])
assert 'foo' in set_
</snippet></ROW><ROW><id>1081252</id><snippet>reversed(sequence)</snippet></ROW><ROW><id>1081252</id><snippet>sequence[::-1]</snippet></ROW><ROW><id>1081252</id><snippet>a and b or c
</snippet></ROW><ROW><id>1081252</id><snippet>b if a else c</snippet></ROW><ROW><id>1081252</id><snippet>with</snippet></ROW><ROW><id>1081252</id><snippet>with open(filename) as file:
    print file.read()
# File is closed outside the `with` block.
</snippet></ROW><ROW><id>1081252</id><snippet>str.format()</snippet></ROW><ROW><id>1081395</id><snippet>&gt;&gt;&gt; class Foo:
...     def bar(hello=None):
...          return hello
...     def baz(world=None):
...          return baz
...
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; members = inspect.getmembers(Foo)
&gt;&gt;&gt; print members
[('__doc__', None), ('__module__', '__main__'), ('bar', &lt;unbound method Foo.bar&gt;
), ('baz', &lt;unbound method Foo.baz&gt;)]
&gt;&gt;&gt; inspect.getargspec(members[2][1])
(['hello'], None, None, (None,))
&gt;&gt;&gt; inspect.getargspec(members[3][1])
(['world'], None, None, (None,))
</snippet></ROW><ROW><id>1081760</id><snippet>cursor.execute("UPDATE table_name SET field1=%s ... field10=%s WHERE id=%s", (var1,... var10, id))
</snippet></ROW><ROW><id>1081903</id><snippet>easy_install &lt;modulename&gt;
</snippet></ROW><ROW><id>1082203</id><snippet>D = project(AC,AB)
AD = vsub(D,A)
</snippet></ROW><ROW><id>1082203</id><snippet>AD = project(AC,AB)
D = vadd(A,AD)
</snippet></ROW><ROW><id>1082380</id><snippet>from twill.commands import go, showforms, formclear, fv, submit

go('http://issola.caltech.edu/~t/qwsgi/qwsgi-demo.cgi/')
go('./widgets')
showforms()

formclear('1')
fv("1", "name", "test")
fv("1", "password", "testpass")
fv("1", "confirm", "yes")
showforms()

submit('0')
</snippet></ROW><ROW><id>1082431</id><snippet>In [1]: def grp(pat, txt): 
   ...:     r = re.search(pat, txt)
   ...:     return r.group(0) if r else '&amp;'

In [2]: y
Out[2]: 
['random text random text, can be anything blabla %A blabla',
 'random text random text, can be anything blabla %D blabla',
 'random text random text, can be anything blabla blabla %F',
 'random text random text, can be anything blabla blabla',
 'random text random text, %C can be anything blabla blabla']

In [3]: y.sort(key=lambda l: grp("%\w", l))

In [4]: y
Out[4]: 
['random text random text, can be anything blabla %A blabla',
 'random text random text, %C can be anything blabla blabla',
 'random text random text, can be anything blabla %D blabla',
 'random text random text, can be anything blabla blabla %F',
 'random text random text, can be anything blabla blabla']
</snippet></ROW><ROW><id>1082817</id><snippet>file.__init__</snippet></ROW><ROW><id>1082817</id><snippet>write</snippet></ROW><ROW><id>1082817</id><snippet>print</snippet></ROW><ROW><id>1082817</id><snippet>file.write</snippet></ROW><ROW><id>1082817</id><snippet>sys.stdout</snippet></ROW><ROW><id>1082817</id><snippet>file</snippet></ROW><ROW><id>1082817</id><snippet>print</snippet></ROW><ROW><id>1082817</id><snippet>write</snippet></ROW><ROW><id>1082817</id><snippet>object</snippet></ROW><ROW><id>1082817</id><snippet>file</snippet></ROW><ROW><id>1082817</id><snippet>print</snippet></ROW><ROW><id>1083166</id><snippet>os.walk</snippet></ROW><ROW><id>1083166</id><snippet>os</snippet></ROW><ROW><id>1083166</id><snippet>os.system</snippet></ROW><ROW><id>1083166</id><snippet>os</snippet></ROW><ROW><id>1083166</id><snippet>start</snippet></ROW><ROW><id>1083166</id><snippet>filename</snippet></ROW><ROW><id>1083166</id><snippet>.pdf</snippet></ROW><ROW><id>1083166</id><snippet>urllib</snippet></ROW><ROW><id>1083166</id><snippet>HTMLParser</snippet></ROW><ROW><id>1083302</id><snippet>&gt;&gt;&gt; simplejson.loads('{"a":1, "b":2}')
{u'a': 1, u'b': 2}
&gt;&gt;&gt; eval('{"a":1, "b":2}')
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>1083302</id><snippet>&gt;&gt;&gt; simplejson.loads('{"X": "\uabcd"}')
{u'X': u'\uabcd'}
&gt;&gt;&gt; eval('{"X": "\uabcd"}')
{'X': '\\uabcd'}
&gt;&gt;&gt; simplejson.loads('{"X": "\uabcd"}') == eval('{"X": "\uabcd"}')
False
</snippet></ROW><ROW><id>1083302</id><snippet>&gt;&gt;&gt; simplejson.loads('[false, true, null]')
[False, True, None]
&gt;&gt;&gt; eval('[false, true, null]')
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'false' is not defined
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1083376</id><snippet>"1, 2, 3, 4\n 5, 6, 7, 8\n"</snippet></ROW><ROW><id>1083408</id><snippet>datetime</snippet></ROW><ROW><id>1084014</id><snippet>"""
Intended to run on Windows resume. Scans for bluetooth devices and if a 
particular device is not present, locks the computer.
"""
import bluetooth
import ctypes
import sys

# Bluetooth UID of "token" device
wanted = "XX:XX:XX:XX:XX:XX"

print "performing inquiry..."

# Hack.... if 0 devices are present, pybluez throws an exception
passed = False
try:
    discovered = bluetooth.discover_devices()
    if wanted in discovered:
        print "Found phone"
        passed = True
    else:
        passed = False
except:
    passed = False

if not passed:
    print "Locking"
    ctypes.windll.user32.LockWorkStation()
</snippet></ROW><ROW><id>1084522</id><snippet>import urllib2

class HTTPNxBasicAuthHandler(urllib2.HTTPBasicAuthHandler):

    def http_error_auth_reqed(self, authreq, host, req, headers):
        # host may be an authority (without userinfo) or a URL with an
        # authority
        # XXX could be multiple headers
        authreq = headers.get(authreq, None)
        if authreq:
            mo = AbstractBasicAuthHandler.rx.search(authreq)
            if mo:
                scheme, realm = mo.groups()
                if scheme.lower() == 'nxbasic':
                    return self.retry_http_basic_auth(host, req, realm)

    def retry_http_basic_auth(self, host, req, realm):
        user, pw = self.passwd.find_user_password(realm, host)
        if pw is not None:
            raw = "%s:%s" % (user, pw)
            auth = 'NxBasic %s' % base64.b64encode(raw).strip()
            if req.headers.get(self.auth_header, None) == auth:
                return None
            req.add_header(self.auth_header, auth)
            return self.parent.open(req)
        else:
            return None
</snippet></ROW><ROW><id>1084640</id><snippet>shell = False</snippet></ROW><ROW><id>1084640</id><snippet>from subprocess import Popen, PIPE

cmd = [
    r"C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\devenv", # in raw r"blah" string, you don't need to escape backslashes
    "solution.sln",
    "/build",
    "Debug|Win32"
]

p = Popen(cmd, stdout=PIPE, stderr=PIPE)
out = p.stdout.read() # reads full output into string, including line breaks

print out
</snippet></ROW><ROW><id>1084984</id><snippet>from a import *</snippet></ROW><ROW><id>1084984</id><snippet>&gt;&gt;&gt; from a import *
&gt;&gt;&gt; if name == "Michael" and age == 15:
...     print('Simple!')
...
Simple!
</snippet></ROW><ROW><id>1085059</id><snippet>import codecs
users = codecs.open( "users-16.txt", "r", "utf-16" )
</snippet></ROW><ROW><id>1085100</id><snippet>for line in proc.stdout:
    print("&gt;&gt;&gt; " + str(line.rstrip()))
</snippet></ROW><ROW><id>1085100</id><snippet>while True:
    line = proc.stdout.readline()
    if not line:
        break
    print "&gt;&gt;&gt; " + line.rstrip()
</snippet></ROW><ROW><id>1085246</id><snippet>__init__</snippet></ROW><ROW><id>1085246</id><snippet>import asyncore, socket
from tlslite.api import *

s = open("./clientX509Cert.pem").read()
x509 = X509()
x509.parse(s)
certChain = X509CertChain([x509])

s = open("./clientX509Key.pem").read()
privateKey = parsePEMKey(s, private=True)


class http_client(TLSAsyncDispatcherMixIn, asyncore.dispatcher):
    ac_in_buffer_size = 16384

    def __init__(self, host, path):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect( (host, 80) )

        TLSAsyncDispatcherMixIn.__init__(self, self.socket)
        self.tlsConnection.ignoreAbruptClose = True
        handshaker = self.tlsConnection.handshakeClientCert(
            certChain=certChain,
            privateKey=privateKey,
            async=True)
        self.setHandshakeOp(handshaker)

        self.buffer = 'GET %s HTTP/1.0\r\n\r\n' % path

    def handle_connect(self):
        pass

    def handle_close(self):
        self.close()

    def handle_read(self):
        print self.recv(8192)

    def writable(self):
        return (len(self.buffer) &gt; 0)

    def handle_write(self):
        sent = self.send(self.buffer)
        self.buffer = self.buffer[sent:]

c = http_client('www.readyhosting.com', '/')

asyncore.loop()
</snippet></ROW><ROW><id>1085313</id><snippet>(add-to-list 'load-path "~/.emacs.d/site-lisp/Pymacs-0.23")
</snippet></ROW><ROW><id>1085554</id><snippet>:memory:</snippet></ROW><ROW><id>1085554</id><snippet>.py</snippet></ROW><ROW><id>1085554</id><snippet>.pyc</snippet></ROW><ROW><id>1085718</id><snippet>cmd.exe</snippet></ROW><ROW><id>1085718</id><snippet>pythonw.exe</snippet></ROW><ROW><id>1085718</id><snippet>python.exe</snippet></ROW><ROW><id>1086496</id><snippet>import csv</snippet></ROW><ROW><id>1086496</id><snippet>writer = csv.writer(open("%s.csv" % filename, "wb"))
</snippet></ROW><ROW><id>1086496</id><snippet>values = (td.fetchText() for td in row)
writer.writerow(values)
</snippet></ROW><ROW><id>1086558</id><snippet>def custom_view(request, year, foo):
    context = RequestContext(request, {'foo': year})
    return render_to_response('my_template.tmpl', context)
</snippet></ROW><ROW><id>1086558</id><snippet>NameError</snippet></ROW><ROW><id>1086558</id><snippet>year</snippet></ROW><ROW><id>1086608</id><snippet>seekbar.connect("value-changed", control_changed, label)
seekbar.connect("notify::fraction", fraction_changed, label)
</snippet></ROW><ROW><id>1087165</id><snippet>__nonzero__</snippet></ROW><ROW><id>1087165</id><snippet>class foo(object):
    def __nonzero__( self) :
        return self.bar % 2 == 0

def a(foo):
    if foo:
        print "spam"
    else:
        print "eggs"

def main():
    myfoo = foo()
    myfoo.bar = 3
    a(myfoo)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>1087249</id><snippet>val = func()
</snippet></ROW><ROW><id>1087249</id><snippet>return</snippet></ROW><ROW><id>1087249</id><snippet>val</snippet></ROW><ROW><id>1087249</id><snippet>yield</snippet></ROW><ROW><id>1087249</id><snippet>func()</snippet></ROW><ROW><id>1087249</id><snippet>&lt;generator&gt;</snippet></ROW><ROW><id>1087249</id><snippet>val</snippet></ROW><ROW><id>1087249</id><snippet>val.next()</snippet></ROW><ROW><id>1087249</id><snippet>func</snippet></ROW><ROW><id>1087249</id><snippet>yield</snippet></ROW><ROW><id>1087249</id><snippet>return</snippet></ROW><ROW><id>1087249</id><snippet>val.next()</snippet></ROW><ROW><id>1087249</id><snippet>__someFunc</snippet></ROW><ROW><id>1087249</id><snippet>self.__someFunc().next()</snippet></ROW><ROW><id>1087249</id><snippet>self.__someFunc()</snippet></ROW><ROW><id>1087625</id><snippet>eval</snippet></ROW><ROW><id>1087625</id><snippet>exec</snippet></ROW><ROW><id>1087625</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>1087625</id><snippet>eval</snippet></ROW><ROW><id>1087625</id><snippet>node = ast.parse(source)</snippet></ROW><ROW><id>1087625</id><snippet>node</snippet></ROW><ROW><id>1087625</id><snippet>literal_eval</snippet></ROW><ROW><id>1087625</id><snippet>compile</snippet></ROW><ROW><id>1087625</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>1087625</id><snippet>eval</snippet></ROW><ROW><id>1087625</id><snippet>exec</snippet></ROW><ROW><id>1087625</id><snippet>eval</snippet></ROW><ROW><id>1087625</id><snippet>getattr</snippet></ROW><ROW><id>1087625</id><snippet>setattr</snippet></ROW><ROW><id>1087625</id><snippet>globals()</snippet></ROW><ROW><id>1087625</id><snippet>json</snippet></ROW><ROW><id>1087788</id><snippet>bin()</snippet></ROW><ROW><id>1087788</id><snippet>oct()</snippet></ROW><ROW><id>1087788</id><snippet>hex()</snippet></ROW><ROW><id>1087788</id><snippet>__index__</snippet></ROW><ROW><id>1087788</id><snippet>hex()</snippet></ROW><ROW><id>1087788</id><snippet>oct()</snippet></ROW><ROW><id>1087788</id><snippet>bin()</snippet></ROW><ROW><id>1087788</id><snippet>__oct__</snippet></ROW><ROW><id>1087788</id><snippet>__hex__</snippet></ROW><ROW><id>1087788</id><snippet>bin()</snippet></ROW><ROW><id>1087838</id><snippet>new_dict = dict (zip(my_dict.values(),my_dict.keys()))
</snippet></ROW><ROW><id>1087883</id><snippet>process=subprocess.Popen([PathToProcess],stdin=subprocess.PIPE,stdout=subprocess.PIPE);
for i in xrange(StepsToComplete):
    print "Forcing step # %s"%i
    process.stdin.write("\n")
    result=process.stdout.readline()
</snippet></ROW><ROW><id>1087978</id><snippet>import spidermonkey

def loadfile(fname):
    return open(fname).read()

rt = spidermonkey.Runtime()
cx = rt.new_context()
cx.add_global("loadfile", loadfile)
ret = cx.execute('var contents = loadfile("foo.js"); eval(contents);')
</snippet></ROW><ROW><id>1088111</id><snippet>RingBell</snippet></ROW><ROW><id>1088459</id><snippet>APPNAME = "MyApp"
import sys
from os import path, environ
if sys.platform == 'darwin':
    from AppKit import NSSearchPathForDirectoriesInDomains
    # http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Functions/Reference/reference.html#//apple_ref/c/func/NSSearchPathForDirectoriesInDomains
    # NSApplicationSupportDirectory = 14
    # NSUserDomainMask = 1
    # True for expanding the tilde into a fully qualified path
    appdata = path.join(NSSearchPathForDirectoriesInDomains(14, 1, True)[0], APPNAME)
elif sys.platform == 'win32':
    appdata = path.join(environ['APPDATA'], APPNAME)
else:
    appdata = path.expanduser(path.join("~", "." + APPNAME))
</snippet></ROW><ROW><id>1088498</id><snippet>&lt;</snippet></ROW><ROW><id>1088498</id><snippet>&lt;</snippet></ROW><ROW><id>1088498</id><snippet>==</snippet></ROW><ROW><id>1088498</id><snippet>&lt;</snippet></ROW><ROW><id>1088538</id><snippet>sort(key=XXX)</snippet></ROW><ROW><id>1088538</id><snippet>DATA = [
    { 'name' : 'A', 'value' : '10.0' },
    { 'name' : 'B', 'value' : '2.0' },
]

def get_attr(name):
    def inner_func(o):
        try:
            rv = float(o[name])
        except ValueError:
            rv = o[name]
        return rv
    return inner_func

for attrname in ('name', 'value'):
    DATA.sort(key=get_attr(attrname))
    print "%r-sorted: %s" % (attrname, DATA)
</snippet></ROW><ROW><id>1088538</id><snippet>'name'-sorted: [{'name': 'A', 'value': '10.0'}, {'name': 'B', 'value': '2.0'}]
'value'-sorted: [{'name': 'B', 'value': '2.0'}, {'name': 'A', 'value': '10.0'}]
</snippet></ROW><ROW><id>1088649</id><snippet>import django.db.models.options as options

options.DEFAULT_NAMES = options.DEFAULT_NAMES + ('schema',)
</snippet></ROW><ROW><id>1088766</id><snippet>class Label(db.Model)
   name = db.StringProperty()

   @property
   def members(self):
      return Task.gql("WHERE labels = :1", self.key())

class Task(db.Model)
   title = db.StringProperty();
   labels = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>1088766</id><snippet>foo_label = Label.gql("WHERE name = 'foo'").get()
task1 = Task.gql("WHERE title = 'task 1'").get()
if foo_label.key() not in task1.labels:
  task1.labels.append(foo_label.key())
task1.put()
</snippet></ROW><ROW><id>1088929</id><snippet>LOGIN_URL</snippet></ROW><ROW><id>1088929</id><snippet>settings.py</snippet></ROW><ROW><id>1088929</id><snippet>urls.py</snippet></ROW><ROW><id>1088929</id><snippet>from projectname.settings import LOGIN_URL
</snippet></ROW><ROW><id>1089052</id><snippet>import functools

def execonce(f):

    @functools.wraps(f)
    def donothing(*a, **k):
        pass

    @functools.wraps(f)
    def doit(self, *a, **k):
        try:
            return f(self, *a, **k)
        finally:
            setattr(self, f.__name__, donothing)

    return doit
</snippet></ROW><ROW><id>1089358</id><snippet>log = logging.getLogger(name)
while some_condition:
    try:
        handler = make_handler(filename)
        log.addHandler(handler)
        # do something and log

    finally:
        log.removeHandler(handler)
        handler.close()
</snippet></ROW><ROW><id>1089512</id><snippet>bottom</snippet></ROW><ROW><id>1089512</id><snippet>plot</snippet></ROW><ROW><id>1089512</id><snippet>#!/usr/bin/env python
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import lines

import random


deltas = [4, 6, 13, 18, 15, 14, 10, 13, 9, 6, 15, 9, 6, 1, 1, 2, 4, 4, 4, 4, 10, 11, 16, 17, 12, 10, 12, 15, 17, 16, 11, 10, 9, 9, 7, 10, 7, 16, 8, 12, 10, 14, 10, 15, 15, 16, 12, 8, 15, 16]
bases = [46, 49, 45, 45, 44, 49, 51, 52, 56, 58, 53, 57, 62, 63, 68, 66, 65, 66, 63, 63, 62, 61, 61, 57, 61, 64, 63, 58, 56, 56, 56, 60, 59, 54, 57, 54, 54, 50, 53, 51, 48, 43, 42, 38, 37, 39, 44, 49, 47, 43]


def rand_pt(bases, deltas):
    return [random.randint(base, base + delta) for base, delta in zip(bases, deltas)]

# randomly assign opening and closing prices 
openings = rand_pt(bases, deltas)
closings = rand_pt(bases, deltas)

# First we draw the bars which show the high and low prices
# bottom holds the low price while deltas holds the difference 
# between high and low.
width = 0
ax = plt.axes()
rects1 = ax.bar(np.arange(50), deltas, width, color='r', bottom=bases)

# Now draw the ticks indicating the opening and closing price
for opening, closing, bar in zip(openings, closings, rects1):
    x, w = bar.get_x(), 0.2

    args = {
    }

    ax.plot((x - w, x), (opening, opening), **args)
    ax.plot((x, x + w), (closing, closing), **args)


plt.show()
</snippet></ROW><ROW><id>1089512</id><snippet>(open, close, min, max)</snippet></ROW><ROW><id>1089945</id><snippet>timeit</snippet></ROW><ROW><id>1089945</id><snippet>AmAir:stko aleax$ python -mtimeit -s'def isodd(x): x &amp; 1' 'isodd(9)'
1000000 loops, best of 3: 0.446 usec per loop
AmAir:stko aleax$ python -mtimeit -s'def isodd(x): x &amp; 1' 'isodd(10)'
1000000 loops, best of 3: 0.443 usec per loop
AmAir:stko aleax$ python -mtimeit -s'def isodd(x): x % 2' 'isodd(10)'
1000000 loops, best of 3: 0.453 usec per loop
AmAir:stko aleax$ python -mtimeit -s'def isodd(x): x % 2' 'isodd(9)'
1000000 loops, best of 3: 0.461 usec per loop
</snippet></ROW><ROW><id>1089945</id><snippet>&amp;</snippet></ROW><ROW><id>1089945</id><snippet>%</snippet></ROW><ROW><id>1089945</id><snippet>timeit</snippet></ROW><ROW><id>1089945</id><snippet>timeit</snippet></ROW><ROW><id>1090361</id><snippet>http://www.chiramattel.com/george/blog/2007/09/09/deflatestream-block-length-does-not-match.html</snippet></ROW><ROW><id>1090361</id><snippet>http://www.ietf.org/rfc/rfc1950.txt</snippet></ROW><ROW><id>1090361</id><snippet>http://www.ietf.org/rfc/rfc1951.txt</snippet></ROW><ROW><id>1090361</id><snippet>Block length does not match with its complement</snippet></ROW><ROW><id>1090361</id><snippet>http://stackoverflow.com/questions/762614/how-do-you-use-a-deflatestream-on-part-of-a-file</snippet></ROW><ROW><id>1090361</id><snippet>http://java.sun.com/j2se/1.4.2/docs/api/java/util/zip/Deflater.html</snippet></ROW><ROW><id>1090361</id><snippet>uncompressed_string.encode('zlib')[2:-4]
or
zlib.compress(uncompressed_string)[2:-4]
# Throws away 2-byte zlib header and the 4-byte checksum.
# Version using encode vanishes in Python 3.x.
</snippet></ROW><ROW><id>1090463</id><snippet>Node</snippet></ROW><ROW><id>1090463</id><snippet>import sys

class Node(object):
  def __init__(self, title, indent):
    self.title = title
    self.indent = indent
    self.children = []
    self.notes = []
    self.parent = None
  def __repr__(self):
    return 'Node(%s, %s, %r, %s)' % (
        self.indent, self.parent, self.title, self.notes)
  def aspython(self):
    result = dict(title=self.title, children=topython(self.children))
    if self.notes:
      result['notes'] = self.notes
    return result

def print_tree(node):
  print ' ' * node.indent, node.title
  for subnode in node.children:
    print_tree(subnode)
  for note in node.notes:
    print ' ' * node.indent, 'Note:', note

def topython(nodelist):
  return [node.aspython() for node in nodelist]

def lines_to_tree(lines):
  nodes = []
  for line in lines:
    indent = len(line) - len(line.lstrip())
    marker, body = line.strip().split(None, 1)
    if marker == '*':
      nodes.append(Node(body, indent))
    elif marker == '-':
      nodes[-1].notes.append(body)
    else:
      print&gt;&gt;sys.stderr, "Invalid marker %r" % marker

  tree = Node('', -1)
  curr = tree
  for node in nodes:
    while node.indent &lt;= curr.indent:
      curr = curr.parent
    node.parent = curr
    curr.children.append(node)
    curr = node

  return tree


data = """\
* 1
 * 1.1
 * 1.2
  - Note for 1.2
* 2
* 3
- Note for root
""".splitlines()

def main():
  tree = lines_to_tree(data)
  print_tree(tree)
  print
  alist = topython(tree.children)
  print alist

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>1090463</id><snippet> 1
  1.1
  1.2
  Note: 1.2
 2
 3
 Note: 3

[{'children': [{'children': [], 'title': '1.1'}, {'notes': ['Note for 1.2'], 'children': [], 'title': '1.2'}], 'title': '1'}, {'children': [], 'title': '2'}, {'notes': ['Note for root'], 'children': [], 'title': '3'}]
</snippet></ROW><ROW><id>1090463</id><snippet>notes</snippet></ROW><ROW><id>1090656</id><snippet>glob</snippet></ROW><ROW><id>1090656</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('./[0-9].*')
['./1.gif', './2.txt']
&gt;&gt;&gt; glob.glob('*.gif')
['1.gif', 'card.gif']
&gt;&gt;&gt; glob.glob('?.gif')
['1.gif']
</snippet></ROW><ROW><id>1090766</id><snippet>import dbus
bus = dbus.SystemBus()
proxy = bus.get_object('org.freedesktop.NetworkManager',
                       '/org/freedesktop/NetworkManager/Devices/eth0')
# proxy is a dbus.proxies.ProxyObject
</snippet></ROW><ROW><id>1090886</id><snippet>operator</snippet></ROW><ROW><id>1090886</id><snippet>OperatorFunctions = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.div,
    # etc
}
</snippet></ROW><ROW><id>1090886</id><snippet>for char in postfix_expression:
    if char in OperatorFunctions:
        stack.append(OperatorFunctions[char](stack.pop(), stack.pop()))
    else:
        stack.append(char)
</snippet></ROW><ROW><id>1091288</id><snippet>def hasmethod(obj, name):
    return hasattr(obj, name) and type(getattr(obj, name)) == types.MethodType
</snippet></ROW><ROW><id>1091390</id><snippet>class Component(object):
    def __init__(self, **kwargs):
        assert type(self) != Component, "Component must not be instantiated directly"

class Leaf(Component):
    def __init__(self, some, args, **kwargs):
        # regular initialization
        Component.__init__(self, **kwargs)
</snippet></ROW><ROW><id>1091426</id><snippet>ps</snippet></ROW><ROW><id>1091426</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; data = [(int(p), c) for p, c in [x.rstrip('\n').split(' ', 1) \
...        for x in os.popen('ps h -eo pid:1,command')]]
</snippet></ROW><ROW><id>1091426</id><snippet>ps</snippet></ROW><ROW><id>1091426</id><snippet>man</snippet></ROW><ROW><id>1091426</id><snippet>pgrep</snippet></ROW><ROW><id>1091426</id><snippet>pkill</snippet></ROW><ROW><id>1092266</id><snippet>python -O game.py
</snippet></ROW><ROW><id>1092266</id><snippet>python -O game.py
</snippet></ROW><ROW><id>1092266</id><snippet>import subprocess
subprocess.Popen( "python -O game.py" )
</snippet></ROW><ROW><id>1092345</id><snippet>${PWD}</snippet></ROW><ROW><id>1092345</id><snippet>status, output = commands.getstatusoutput("mvn clean install -s./../../foo/bar/settings.xml -Dportal -Dmain.dir=%s/../.. -o" % os.getcwd ())
</snippet></ROW><ROW><id>1092753</id><snippet>appcfg.py update myapp/</snippet></ROW><ROW><id>1092753</id><snippet>--verbose</snippet></ROW><ROW><id>1092753</id><snippet>atom.py</snippet></ROW><ROW><id>1092753</id><snippet>atom</snippet></ROW><ROW><id>1092753</id><snippet>import</snippet></ROW><ROW><id>1092753</id><snippet>__init__.py</snippet></ROW><ROW><id>1092753</id><snippet>zip -r</snippet></ROW><ROW><id>1092753</id><snippet>.so</snippet></ROW><ROW><id>1092753</id><snippet>.pyd</snippet></ROW><ROW><id>1093178</id><snippet>userinfo = fb.users.getInfo(self.request.get('uid')...)
</snippet></ROW><ROW><id>1093331</id><snippet>&gt;&gt;&gt; import sys
</snippet></ROW><ROW><id>1093331</id><snippet>&gt;&gt;&gt; print (sys.version) #parentheses necessary in python 3.       
2.5.2 (r252:60911, Jul 31 2008, 17:28:52) 
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]
</snippet></ROW><ROW><id>1093331</id><snippet>&gt;&gt;&gt; sys.version_info
(2, 5, 2, 'final', 0)
</snippet></ROW><ROW><id>1093662</id><snippet>mtasic</snippet></ROW><ROW><id>1093662</id><snippet>inWaiting()</snippet></ROW><ROW><id>1093662</id><snippet>last_received</snippet></ROW><ROW><id>1093662</id><snippet>buffer</snippet></ROW><ROW><id>1093662</id><snippet>def receiving(ser):
    global last_received

    buffer = ''
    while True:
        buffer = buffer + ser.read(ser.inWaiting())
        if '\n' in buffer:
            lines = buffer.split('\n') # Guaranteed to have at least 2 entries
            last_received = lines[-2]
            #If the Arduino sends lots of empty lines, you'll lose the
            #last filled line, so you could make the above statement conditional
            #like so: if lines[-2]: last_received = lines[-2]
            buffer = lines[-1]
</snippet></ROW><ROW><id>1093662</id><snippet>readline()</snippet></ROW><ROW><id>1093851</id><snippet>[NSString stringWithFormat:]</snippet></ROW><ROW><id>1093851</id><snippet>NSString *str = [NSString stringWithFormat:@"%@ %@ %@",
                                  @"Hello", @"World", @"Yay!"];
</snippet></ROW><ROW><id>1093905</id><snippet>f = open("%s/%s" % (config['vsftp']['user_dir'], (vusername), 'wr'))
</snippet></ROW><ROW><id>1093905</id><snippet>f = open("%s/%s" % (config['vsftp']['user_dir'], (vusername)), 'wr')
</snippet></ROW><ROW><id>1094237</id><snippet>f = open(curdir + sep + self.path, 'rb')
</snippet></ROW><ROW><id>1094237</id><snippet>f = open(curdir + sep + self.path)
</snippet></ROW><ROW><id>1094721</id><snippet>&gt;&gt;&gt; s = '23.45678'
&gt;&gt;&gt; int(float(s))
23
</snippet></ROW><ROW><id>1094721</id><snippet>&gt;&gt;&gt; int(Decimal(s))
23
</snippet></ROW><ROW><id>1094721</id><snippet>&gt;&gt;&gt; int(s.split('.')[0])
23
</snippet></ROW><ROW><id>1094810</id><snippet>python code.py 80
</snippet></ROW><ROW><id>1094810</id><snippet>python WebServer start
</snippet></ROW><ROW><id>1094810</id><snippet>if __name__ == "__main__":
    if DEBUG:
        app.run()
    else:
        service = WebService(os.path.join(DIR_ACTUAL,'ElAdministrador.pid'))
        if len(sys.argv) == 2:
            if 'start' == sys.argv[1]:
                sys.argv[1] = '8080'
                service.start()
</snippet></ROW><ROW><id>1094845</id><snippet>&gt;&gt;&gt; from hurry.filesize import alternative
&gt;&gt;&gt; size(1, system=alternative)
'1 byte'
&gt;&gt;&gt; size(10, system=alternative)
'10 bytes'
&gt;&gt;&gt; size(1024, system=alternative)
'1 KB'
</snippet></ROW><ROW><id>1095058</id><snippet>&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; from csv import DictReader
&gt;&gt;&gt; fh = StringIO("""
... id,case1,case2,case3
... 
... 123,null,X,Y
... 
... 342,X,X,Y
... 
... 456,null,null,null
... 
... 789,null,null,X
... """.strip())
&gt;&gt;&gt; dr = DictReader(fh)
&gt;&gt;&gt; dr.next()
{'case1': 'null', 'case3': 'Y', 'case2': 'X', 'id': '123'}
</snippet></ROW><ROW><id>1095058</id><snippet>&gt;&gt;&gt; from csv import DictWriter
&gt;&gt;&gt; out_fh = StringIO()
&gt;&gt;&gt; writer = DictWriter(fh, fieldnames=dr.fieldnames)
&gt;&gt;&gt; for mapping in dr:
...     writer.write(dict((k, v) for k, v in mapping.items() if v != 'null'))
...
</snippet></ROW><ROW><id>1095058</id><snippet>dr.fieldnames</snippet></ROW><ROW><id>1095058</id><snippet>out_fh</snippet></ROW><ROW><id>1095621</id><snippet>inspect.stack()</snippet></ROW><ROW><id>1095621</id><snippet>inspect.stack()[1]</snippet></ROW><ROW><id>1095621</id><snippet>def info(msg):
    frm = inspect.stack()[1]
    mod = inspect.getmodule(frm[0])
    print '[%s] %s' % (mod.__name__, msg)
</snippet></ROW><ROW><id>1095706</id><snippet>try:
    obj = Model.objects.get(**kwargs)
except Model.DoesNotExist:
    obj = Model(**dict((k,v) for (k,v) in kwargs.items() if '__' not in k))
</snippet></ROW><ROW><id>1095706</id><snippet>get_or_create</snippet></ROW><ROW><id>1095862</id><snippet>&gt;&gt;&gt; import django
&gt;&gt;&gt; print django.__file__
/var/lib/python-support/python2.5/django/__init__.pyc
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1095862</id><snippet>import inspect
import django
print inspect.getabsfile(django)
</snippet></ROW><ROW><id>1095909</id><snippet>import re
grps = re.compile(r'CN=(\w+)').findall

def anyof(short_group_list, adu):
  all_groups_of_user = set(g for gs in adu.get('memberOf',()) for g in grps(gs))
  return sorted(all_groups_of_user.intersection(short_group_list))
</snippet></ROW><ROW><id>1095909</id><snippet>['group2', 'group16']</snippet></ROW><ROW><id>1095909</id><snippet>ADUser</snippet></ROW><ROW><id>1095909</id><snippet>short_group_list</snippet></ROW><ROW><id>1095909</id><snippet>  return any(g for g in short_group_list if g in all_groups_of_user)
</snippet></ROW><ROW><id>1095909</id><snippet>any</snippet></ROW><ROW><id>1095909</id><snippet>def anyof_v2(short_group_list, adu):
  gset = set(short_group_list)
  return any(g for gs in adu.get('memberOf',()) for g in grps(gs) if g in gset)
</snippet></ROW><ROW><id>1095909</id><snippet>any</snippet></ROW><ROW><id>1096014</id><snippet>sorted(thedict)</snippet></ROW><ROW><id>1096014</id><snippet>sorted(thedict, key=thedict.get)</snippet></ROW><ROW><id>1096346</id><snippet>import ctypes
import ctypes.wintypes

winHttp = ctypes.windll.LoadLibrary("Winhttp.dll")

# http://msdn.microsoft.com/en-us/library/aa384098(VS.85).aspx
# first get a handle to HTTP session
WINHTTP_ACCESS_TYPE_DEFAULT_PROXY=0
WINHTTP_NO_PROXY_NAME=WINHTTP_NO_PROXY_BYPASS=0
WINHTTP_FLAG_ASYNC=0x10000000
HINTERNET = winHttp.WinHttpOpen("PyWin32", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, WINHTTP_FLAG_ASYNC)
print HINTERNET

# now get proxy using HTTP session
# http://msdn.microsoft.com/en-us/library/aa384097(VS.85).aspx
"""
BOOL WinHttpGetProxyForUrl(
  __in   HINTERNET hSession,
  __in   LPCWSTR lpcwszUrl,
  __in   WINHTTP_AUTOPROXY_OPTIONS *pAutoProxyOptions,
  __out  WINHTTP_PROXY_INFO *pProxyInfo
);
"""
# create C structure for WINHTTP_AUTOPROXY_OPTIONS
#http://msdn.microsoft.com/en-us/library/aa384123(VS.85).aspx
"""
typedef struct {
  DWORD   dwFlags;
  DWORD   dwAutoDetectFlags;
  LPCWSTR lpszAutoConfigUrl;
  LPVOID  lpvReserved;
  DWORD   dwReserved;
  BOOL    fAutoLogonIfChallenged;
} WINHTTP_AUTOPROXY_OPTIONS;
"""
class WINHTTP_AUTOPROXY_OPTIONS(ctypes.Structure):
    _fields_ = [("dwFlags", ctypes.wintypes.DWORD),
                ("dwAutoDetectFlags", ctypes.wintypes.DWORD),
                ("lpszAutoConfigUrl", ctypes.wintypes.LPCWSTR),
                ("lpvReserved", ctypes.c_void_p ),
                ("dwReserved", ctypes.wintypes.DWORD),
                ("fAutoLogonIfChallenged",ctypes.wintypes.BOOL),]

WINHTTP_AUTOPROXY_AUTO_DETECT = 0x00000001;
WINHTTP_AUTO_DETECT_TYPE_DHCP = 0x00000001;
WINHTTP_AUTO_DETECT_TYPE_DNS_A = 0x00000002;
options = WINHTTP_AUTOPROXY_OPTIONS()
options.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT
options.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP|WINHTTP_AUTO_DETECT_TYPE_DNS_A
options.lpszAutoConfigUrl = 0
options.fAutoLogonIfChallenged = False

# create C structure for WINHTTP_AUTOPROXY_OPTIONS
# http://msdn.microsoft.com/en-us/library/aa383912(VS.85).aspx
"""
struct WINHTTP_PROXY_INFO {
  DWORD  dwAccessType;
  LPWSTR lpszProxy;
  LPWSTR lpszProxyBypass;
};
"""
class WINHTTP_PROXY_INFO(ctypes.Structure):
    _fields_ = [("dwAccessType", ctypes.wintypes.DWORD),
                ("lpszProxy", ctypes.wintypes.LPCWSTR),
                ("lpszProxyBypass", ctypes.wintypes.LPCWSTR),]

info = WINHTTP_PROXY_INFO()

ret = winHttp.WinHttpGetProxyForUrl(HINTERNET, "http://www.google.com", ctypes.pointer(options), ctypes.pointer(info) )
print "proxy success?",ret
if not ret:
    # some error lets see what is that?
    import win32api
    import win32con
    errorCode = win32api.GetLastError()
    print "win32 Error:",errorCode
    s = ""
    print win32api.FormatMessage(errorCode)

print info.dwAccessType, info.lpszProxy, info.lpszProxyBypass
</snippet></ROW><ROW><id>1097055</id><snippet>__call__</snippet></ROW><ROW><id>1097055</id><snippet>AdminSite</snippet></ROW><ROW><id>1097055</id><snippet>if not self.has_permission(request): 
    return self.login(request)
</snippet></ROW><ROW><id>1097055</id><snippet>__call__</snippet></ROW><ROW><id>1097055</id><snippet>has_permission</snippet></ROW><ROW><id>1097055</id><snippet>AdminSite</snippet></ROW><ROW><id>1097055</id><snippet>login</snippet></ROW><ROW><id>1097237</id><snippet>&gt;&gt;&gt; __import__('temp/a40bd22344')
&lt;module 'temp/a40bd22344' from 'temp/a40bd22344/__init__.py'&gt;
</snippet></ROW><ROW><id>1097237</id><snippet>project</snippet></ROW><ROW><id>1097237</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['project'] = sys.modules.pop('temp/a40bd22344')
</snippet></ROW><ROW><id>1097237</id><snippet>&gt;&gt;&gt; import project
&gt;&gt;&gt; project
&lt;module 'temp/a40bd22344' from 'temp/a40bd22344/__init__.py'&gt;
</snippet></ROW><ROW><id>1097237</id><snippet>&gt;&gt;&gt; import project.foobar
&gt;&gt;&gt; project.foobar
&lt;module 'project.foobar' from 'temp/a40bd22344/foobar.py'&gt;
</snippet></ROW><ROW><id>1097237</id><snippet>&gt;&gt;&gt; print sys.version
2.5.2 (r252:60911, Jul 31 2008, 17:28:52) 
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]
</snippet></ROW><ROW><id>1097943</id><snippet>/search</snippet></ROW><ROW><id>1097943</id><snippet>POST</snippet></ROW><ROW><id>1097943</id><snippet>GET</snippet></ROW><ROW><id>1098160</id><snippet>locale.strcoll</snippet></ROW><ROW><id>1098160</id><snippet>strcoll</snippet></ROW><ROW><id>1098240</id><snippet>del glist[:]</snippet></ROW><ROW><id>1098240</id><snippet>glist = []</snippet></ROW><ROW><id>1098556</id><snippet>get()</snippet></ROW><ROW><id>1098556</id><snippet>self.val2 = kwargs.get('val2',"default value")
</snippet></ROW><ROW><id>1098556</id><snippet>def __init__(self, val2="default value", **kwargs):
</snippet></ROW><ROW><id>1098598</id><snippet>from itertools import product
map("".join, product(*[['A', 'C'] if x == "M" else [x] for x in "GMTTMCA"]))
</snippet></ROW><ROW><id>1098598</id><snippet>import sys
from itertools import product

base_globs = {"M":['A','C'], "R":['A','G'], "W":['A','T'],
              "S":['C','G'], "Y":['C','T'], "K":['G','T'],

              "V":['A','C','G'], "H":['A','C','T'],
              "D":['A','G','T'], "B":['C','G','T'],
              }

def base_glob(glob_sequence):
    production_sequence = [base_globs.get(base, [base]) for base in glob_sequence]
    return map("".join, product(*production_sequence))

for line in sys.stdin.readlines():
    productions = base_glob(line.strip())
    print "\n".join(productions)
</snippet></ROW><ROW><id>1098657</id><snippet>PyJavaInstance</snippet></ROW><ROW><id>1098657</id><snippet>float_list = []
for item in instance_properties:
    try:
        float_list.append(float(item))
    except ValueError:
        pass
</snippet></ROW><ROW><id>1098660</id><snippet>thelist[52]</snippet></ROW><ROW><id>1098882</id><snippet>map</snippet></ROW><ROW><id>1098882</id><snippet>reduce</snippet></ROW><ROW><id>1098882</id><snippet>rot_points  = (i.rotated(self.orientation.get_angle()) for i in points)
real_points = [self.pos+i*self.scale for i in rot_points]
</snippet></ROW><ROW><id>1098882</id><snippet>(parentheses)</snippet></ROW><ROW><id>1098882</id><snippet>[brackets]</snippet></ROW><ROW><id>1098882</id><snippet>rot_points</snippet></ROW><ROW><id>1098882</id><snippet>rot_points</snippet></ROW><ROW><id>1099392</id><snippet>quad.scale= 10
</snippet></ROW><ROW><id>1099392</id><snippet>quad.scale= MySin()
</snippet></ROW><ROW><id>1099392</id><snippet>Quad</snippet></ROW><ROW><id>1099392</id><snippet>class Quad( object ):
    @property
    def scale( self ):
        return self._scale

    @scale.setter
    def set_scale( self, value ):
        # handle numeric and MySin() values appropriately.
</snippet></ROW><ROW><id>1099392</id><snippet>property</snippet></ROW><ROW><id>1099392</id><snippet>class Quad( object ):
    def get_scale( self ):
        return self._scale
    def set_scale( self, value )
        # Handle numeric and MySin() values 
    scale = property( get_scale, set_scale )
</snippet></ROW><ROW><id>1099392</id><snippet>scale</snippet></ROW><ROW><id>1099392</id><snippet>quad.scale * 2
</snippet></ROW><ROW><id>1099392</id><snippet>MySin</snippet></ROW><ROW><id>1099392</id><snippet>quad.scale * 2</snippet></ROW><ROW><id>1099484</id><snippet># Adapted from example on http://codespeak.net/lxml/tutorial.html
import lxml.etree as et
import StringIO
s = """&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE root SYSTEM "test" [ &lt;!ENTITY tasty "cheese"&gt; 
&lt;!ENTITY eacute "é"&gt; ]&gt;
&lt;root&gt;
&lt;a&gt;&amp;tasty; soufflé&lt;/a&gt;
&lt;/root&gt;
"""
tree = et.parse(StringIO.StringIO(s))
print et.tostring(tree, xml_declaration=True, encoding="utf-8")
</snippet></ROW><ROW><id>1099484</id><snippet>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;!DOCTYPE root SYSTEM "test" [
&lt;!ENTITY tasty "cheese"&gt;
&lt;!ENTITY eacute "é"&gt;
]&gt;
&lt;root&gt;
&lt;a&gt;cheese soufflé&lt;/a&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>1099484</id><snippet>xml = et.XML("&lt;root&gt;&lt;test/&gt;&lt;a&gt;whatever&lt;/a&gt;&lt;end_test/&gt;&lt;/root&gt;")
root = tree.getroot()
root[:] = xml
root.text, root.tail = xml.text, xml.tail
print et.tostring(tree, xml_declaration=True, encoding="utf-8")
</snippet></ROW><ROW><id>1099484</id><snippet>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;!DOCTYPE root SYSTEM "test" [
&lt;!ENTITY tasty "cheese"&gt;
&lt;!ENTITY eacute "é"&gt;
]&gt;
&lt;root&gt;&lt;test/&gt;&lt;a&gt;whatever&lt;/a&gt;&lt;end_test/&gt;&lt;/root&gt;
</snippet></ROW><ROW><id>1100047</id><snippet>try:
    iSoupList = BeautifulSoup(response, parseOnlyThese=SoupStrainer('img'))

except HTMLParseError:
    #Do something intelligent here
</snippet></ROW><ROW><id>1100571</id><snippet> function a(key) returns an ordered list of x.items
 function b(x.item) returns a single y.value
</snippet></ROW><ROW><id>1100578</id><snippet>i.find('The student says')</snippet></ROW><ROW><id>1100578</id><snippet>outputstring</snippet></ROW><ROW><id>1101046</id><snippet>from pyparsing import nestedExpr

data = "( (a ( ( c ) b ) ) ( d ) e )"
print nestedExpr().parseString(data).asList()
</snippet></ROW><ROW><id>1101046</id><snippet>[[['a', [['c'], 'b']], ['d'], 'e']]
</snippet></ROW><ROW><id>1101289</id><snippet>class AppScreenshots(db.Model):
     image_file     = db.StringProperty()
     description    = db.StringProperty()
     apps            = db.ReferenceProperty(Apps)

appsObject = db.Query(Apps).get()

ss = AppScreenshots(image_file = 'foo', description = 'bar',apps = appsObject)
</snippet></ROW><ROW><id>1101410</id><snippet>save</snippet></ROW><ROW><id>1101410</id><snippet>save</snippet></ROW><ROW><id>1101410</id><snippet>save</snippet></ROW><ROW><id>1101597</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; d = parse('2009/05/13 19:19:30 -0400')
&gt;&gt;&gt; d
datetime.datetime(2009, 5, 13, 19, 19, 30, tzinfo=tzoffset(None, -14400))
</snippet></ROW><ROW><id>1101743</id><snippet>&lt;br/&gt; cool</snippet></ROW><ROW><id>1101743</id><snippet>import calendar
import xml.etree.ElementTree as etree

myCal = calendar.HTMLCalendar(calendar.SUNDAY)
htmlStr = myCal.formatmonth(2009, 7)
htmlStr = htmlStr.replace(" "," ")

root = etree.fromstring(htmlStr)
for elem in root.findall("*//td"):
    if elem.get("class") != "tue":
        continue
    elem.text += "!"

    br = etree.SubElement(elem, "br")
    br.tail = "cool!"

print etree.tostring(root)
</snippet></ROW><ROW><id>1101765</id><snippet>None</snippet></ROW><ROW><id>1101765</id><snippet>...
entryBox=Entry(root,width=60)
entryBox.grid(row=2, column=1,sticky=W)
...
</snippet></ROW><ROW><id>1101939</id><snippet>oil_changes</snippet></ROW><ROW><id>1101939</id><snippet>itertools</snippet></ROW><ROW><id>1101939</id><snippet>next_oil</snippet></ROW><ROW><id>1101939</id><snippet>len(next_oil)</snippet></ROW><ROW><id>1101939</id><snippet>izip</snippet></ROW><ROW><id>1101939</id><snippet>izip</snippet></ROW><ROW><id>1101939</id><snippet>tee</snippet></ROW><ROW><id>1101939</id><snippet>  it = iter(oil_changes)
  a, b = itertools.tee(it)
  b.next()
  thesum = 0
  for thelen, (i, j) in enumerate(itertools.izip(a, b)):
    thesum += j - i
  last_one = j
  next_oil = last_one + thesum / (thelen + 1)
</snippet></ROW><ROW><id>1101939</id><snippet>b</snippet></ROW><ROW><id>1101939</id><snippet>tee</snippet></ROW><ROW><id>1101939</id><snippet>izip</snippet></ROW><ROW><id>1101939</id><snippet>enumerate</snippet></ROW><ROW><id>1101939</id><snippet>enumerate</snippet></ROW><ROW><id>1101939</id><snippet>+=</snippet></ROW><ROW><id>1101939</id><snippet>sum</snippet></ROW><ROW><id>1101939</id><snippet>last_one = a.next()</snippet></ROW><ROW><id>1101939</id><snippet>a</snippet></ROW><ROW><id>1101939</id><snippet>izip</snippet></ROW><ROW><id>1101939</id><snippet>a</snippet></ROW><ROW><id>1101939</id><snippet>b</snippet></ROW><ROW><id>1101939</id><snippet>j</snippet></ROW><ROW><id>1101939</id><snippet>b</snippet></ROW><ROW><id>1101939</id><snippet>izip</snippet></ROW><ROW><id>1101939</id><snippet>thelen</snippet></ROW><ROW><id>1101939</id><snippet>enumerate</snippet></ROW><ROW><id>1101939</id><snippet>last_one</snippet></ROW><ROW><id>1101939</id><snippet>j</snippet></ROW><ROW><id>1102089</id><snippet>    for item in menuitems:
        entry = menu.addAction(item)
        self.connect(entry,QtCore.SIGNAL('triggered()'), lambda: self.doStuff(item))
</snippet></ROW><ROW><id>1102089</id><snippet>    for item in menuitems:
        entry = menu.addAction(item)
        self.connect(entry,QtCore.SIGNAL('triggered()'), lambda item=item: self.doStuff(item))
</snippet></ROW><ROW><id>1102089</id><snippet>item</snippet></ROW><ROW><id>1102089</id><snippet>functools.partial(self.doStuff, item)</snippet></ROW><ROW><id>1102089</id><snippet>import functools</snippet></ROW><ROW><id>1102213</id><snippet>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
</snippet></ROW><ROW><id>1102213</id><snippet>&lt;meta charset=iso-8859-1"/&gt;.
</snippet></ROW><ROW><id>1102213</id><snippet>.info()</snippet></ROW><ROW><id>1102217</id><snippet>manage.py test
</snippet></ROW><ROW><id>1102217</id><snippet>def run_tests(test_labels, verbosity=1, interactive=True, extra_tests=[]):
    ...
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)
</snippet></ROW><ROW><id>1102217</id><snippet>def run_tests(test_labels, verbosity=1, interactive=True, extra_tests=[]):
    ...
    result = TeamcityTestRunner().run(suite)
</snippet></ROW><ROW><id>1102217</id><snippet>TEST_RUNNER = 'my_site.file_name_with_run_tests.run_tests'
</snippet></ROW><ROW><id>1102217</id><snippet>./manage.py test
</snippet></ROW><ROW><id>1102217</id><snippet>#teamcity....
</snippet></ROW><ROW><id>1102290</id><snippet>carrot</snippet></ROW><ROW><id>1102290</id><snippet>celery</snippet></ROW><ROW><id>1102872</id><snippet>os.rename("c:/a", "c:/b/a") 
</snippet></ROW><ROW><id>1102872</id><snippet>move c:\a c:\b
</snippet></ROW><ROW><id>1103116</id><snippet>import hashlib
m = hashlib.md5()
for line in open('data.txt', 'rb'):
    m.update(line)
print m.hexdigest()
##ouput
1ab8ad413648c44aa9b90ce5abe50eea
</snippet></ROW><ROW><id>1103293</id><snippet>python2.6</snippet></ROW><ROW><id>1103293</id><snippet>#!/usr/bin/python2.6
</snippet></ROW><ROW><id>1103497</id><snippet>import platform
platform.system()
</snippet></ROW><ROW><id>1104793</id><snippet>if True:
    print "long test long test long test long test long"\
    "test long test long test long test long test long test"
</snippet></ROW><ROW><id>1105111</id><snippet>QGraphicsView</snippet></ROW><ROW><id>1105111</id><snippet>scroll</snippet></ROW><ROW><id>1105111</id><snippet>translate</snippet></ROW><ROW><id>1105111</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>1105790</id><snippet>import urllib2

urllib2.urlopen("http://remotehost.com/myscript.php")
</snippet></ROW><ROW><id>1106289</id><snippet>def max_execs(n=5):
    def decorator(fn):
        fn.max = n
        fn.called = 0
        def wrapped(*args, **kwargs):
            fn.called += 1
            if fn.called &lt;= fn.max:
                return fn(*args, **kwargs)
            else:
                # Replace with your own exception, or something
                # else that you want to happen when the limit
                # is reached
                raise RuntimeError("max executions exceeded")
        return wrapped
    return decorator
</snippet></ROW><ROW><id>1106289</id><snippet>max_execs</snippet></ROW><ROW><id>1106289</id><snippet>decorator</snippet></ROW><ROW><id>1106289</id><snippet>wrapped</snippet></ROW><ROW><id>1106289</id><snippet>decoration</snippet></ROW><ROW><id>1106289</id><snippet>wrapped</snippet></ROW><ROW><id>1106289</id><snippet>@max_execs(5)
def f():
    print "hi!"
</snippet></ROW><ROW><id>1106289</id><snippet>f = max_execs(5)(f)
</snippet></ROW><ROW><id>1106383</id><snippet>&gt;&gt;&gt; Achievement.objects.get(name = u"Mirror's Edge\u2122")
&lt;Achievement: Mirror's Edge™&gt;
</snippet></ROW><ROW><id>1106383</id><snippet>&gt;&gt;&gt; b = BeautifulSoup(u"&lt;span&gt;Mirror's Edge\u2122&lt;/span&gt;").span.string
&gt;&gt;&gt; Achievement.objects.get(name = b)
... Exceptoins ...
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2122' in position 13: ordinal not in range(128)
</snippet></ROW><ROW><id>1106383</id><snippet>&gt;&gt;&gt; Achievement.objects.get(name = unicode(b))
&lt;Achievement: Mirror's Edge™&gt;
</snippet></ROW><ROW><id>1106449</id><snippet>#/usr/bin/python
# -*- coding: utf-8 -*-
class MyFile (file):
    def __init__(self, *arg, **kwarg):
        file.__init__(self, *arg, **kwarg)
        self.EOF = False
    def next(self, catchEOF = False):
        if self.EOF:
            raise StopIteration("End of file")
        try:
            nextLine= file.next(self)
        except StopIteration:
            self.EOF = True
            if not catchEOF:
                raise
            return ""
        if nextLine.decode("utf8")[-1] == u'\u2028':
            return nextLine+self.next(catchEOF = True)
        else:
            return nextLine

A = MyFile("someUnicode.txt")
for line in A:
    print line.strip("\n").decode("utf8")
</snippet></ROW><ROW><id>1106498</id><snippet>sys.modules['os.path'] = path
from os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,
    devnull)
</snippet></ROW><ROW><id>1106498</id><snippet>path</snippet></ROW><ROW><id>1106498</id><snippet>if 'posix' in _names:
    name = 'posix'
    linesep = '\n'
    from posix import *
    try:
        from posix import _exit
    except ImportError:
        pass
    import posixpath as path

    import posix
    __all__.extend(_get_exports_list(posix))
    del posix

elif 'nt' in _names:
# ...
</snippet></ROW><ROW><id>1106537</id><snippet>def open_socket(counter):
  sockets = []
  for i in range(counter):
     s = socket.socket()
     s.bind(('localhost', i+3000))
     s.listen(1)
     sockets.append(s)
  time.sleep(20)
</snippet></ROW><ROW><id>1106921</id><snippet>itertools.islice</snippet></ROW><ROW><id>1106921</id><snippet>import itertools
rows = list(itertools.islice(csvreader, 20))
</snippet></ROW><ROW><id>1106928</id><snippet>aList = ["a", "b", "c"]
listAndFlags = [ (item,item in aList) for item in someQuerySet ]
</snippet></ROW><ROW><id>1106928</id><snippet>{% for item, flag in someList %}
    &lt;tr&gt;&lt;td class="{{flag}}"&gt;{{item}}&lt;/td&gt;&lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>1107150</id><snippet>import sys, inspect

def is_mod_function(mod, func):
    return inspect.isfunction(func) and inspect.getmodule(func) == mod

def list_functions(mod):
    return [func.__name__ for func in mod.__dict__.itervalues() 
            if is_mod_function(mod, func)]


print 'functions in current module:\n', list_functions(sys.modules[__name__])
print 'functions in inspect module:\n', list_functions(inspect)
</snippet></ROW><ROW><id>1107243</id><snippet>import functools

def f(a,b):
    return a*b

funcs = []

for i in range(0,10):
    funcs.append(functools.partial(f,i))
</snippet></ROW><ROW><id>1107298</id><snippet>if text[j] != key[i]:
    if text[j] not in bcs.keys():
        j += len_key
        i = index
    else:
        j += bcs[text[j]]
        i = index
</snippet></ROW><ROW><id>1107298</id><snippet>if text[j] != key[i]:
    j += bcsget(text[j], len_key)
    i = index
</snippet></ROW><ROW><id>1107298</id><snippet>func_list = [searchv1, searchv2, searchv3]
def test():
    for text in text_list:    
        print '==== text is', repr(text)
        for func in func_list:
             for key in key_list:
                try:
                    result = func(text, key)
                except Exception, e:
                    print "EXCEPTION: %r expected:%d func:%s key:%r" % (e, expected, func.__name__, key)
                    continue
                expected = text.find(key)
                if result != expected:
                    print "ERROR actual:%d expected:%d func:%s key:%r" % (result, expected, func.__name__, key)
</snippet></ROW><ROW><id>1107303</id><snippet>db_connection = DatabaseConnection()
with db_connection as cursor:
    cursor.execute('insert into ...')
    cursor.execute('delete from ...')
    # ... more operations ...
</snippet></ROW><ROW><id>1107341</id><snippet>%016</snippet></ROW><ROW><id>1107640</id><snippet>python manage.py reset sessions
</snippet></ROW><ROW><id>1107640</id><snippet>DELETE FROM django_sessions
</snippet></ROW><ROW><id>1107828</id><snippet>obj.arr = Array[T]([f(x) for x in obj.arr])
</snippet></ROW><ROW><id>1107828</id><snippet>T</snippet></ROW><ROW><id>1107828</id><snippet>obj.arr = tuple([f(x) for x in obj.arr])
</snippet></ROW><ROW><id>1108142</id><snippet>import traceback
traceback.print_stack()
</snippet></ROW><ROW><id>1108157</id><snippet>book = db.get(bookkey)
q = book.updatepoint_set
q.order('date')
ups = q.fetch(50)
</snippet></ROW><ROW><id>1108400</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1108400</id><snippet>sys.path</snippet></ROW><ROW><id>1108400</id><snippet>library1.egg</snippet></ROW><ROW><id>1108400</id><snippet>foo</snippet></ROW><ROW><id>1108400</id><snippet>library1.egg</snippet></ROW><ROW><id>1108400</id><snippet>sys.path</snippet></ROW><ROW><id>1108400</id><snippet>import foo
</snippet></ROW><ROW><id>1108474</id><snippet>xldate_as_tuple</snippet></ROW><ROW><id>1108734</id><snippet>PYTHONHOME</snippet></ROW><ROW><id>1108734</id><snippet>set</snippet></ROW><ROW><id>1108734</id><snippet>PYTHONHOME=C:\Program Files\ActiveState Komodo Edit 5\lib\python
_KOMODO_HOSTUSERDATADIR=C:\Users\Dev\AppData\Roaming\ActiveState\KomodoEdit\5.1\host-host\
_KOMODO_VERUSERDATADIR=C:\Users\Dev\AppData\Roaming\ActiveState\KomodoEdit\5.1\
_XRE_USERAPPDATADIR=C:\Users\Dev\AppData\Roaming\ActiveState\KomodoEdit\5.1\host-host\XRE
</snippet></ROW><ROW><id>1108999</id><snippet>sudo apt-get install python-setuptools
</snippet></ROW><ROW><id>1108999</id><snippet>easy_install virtualenv
</snippet></ROW><ROW><id>1108999</id><snippet>virtualenv -p python2.6 --no-site-packages ~/env/NEW_DJANGO_PROJECT
</snippet></ROW><ROW><id>1108999</id><snippet>source ~/env/NEW_DJANGO_PROJECT/bin/activate
</snippet></ROW><ROW><id>1109442</id><snippet>HttpResponse</snippet></ROW><ROW><id>1109442</id><snippet>response = HttpResponse(mimetype="image/png")
# create your image as usual, e.g. pylab.plot(...)
pylab.savefig(response, format="png")
return response
</snippet></ROW><ROW><id>1109442</id><snippet>HttpResponse</snippet></ROW><ROW><id>1109548</id><snippet>UUU
UIU
UUU
</snippet></ROW><ROW><id>1110207</id><snippet>Friends</snippet></ROW><ROW><id>1110207</id><snippet>myFriends</snippet></ROW><ROW><id>1110207</id><snippet>Friend</snippet></ROW><ROW><id>1110207</id><snippet>MyClass</snippet></ROW><ROW><id>1110253</id><snippet>import sys
if sys.stdout.isatty():
    print "Running from command line"
else:
    print "Running from cron"
</snippet></ROW><ROW><id>1110298</id><snippet>import time;print time.clock()</snippet></ROW><ROW><id>1110298</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.clock()
0.11
&gt;&gt;&gt; time.clock()
0.11
&gt;&gt;&gt; time.clock()
0.11
&gt;&gt;&gt; for x in xrange(100000000): pass
... 
&gt;&gt;&gt; time.clock()
7.7800000000000002
&gt;&gt;&gt; time.clock()
7.7800000000000002
&gt;&gt;&gt; time.clock()
7.7800000000000002
</snippet></ROW><ROW><id>1110380</id><snippet>import os
for root, dirs, files in os.walk('path/to/local/dir'):
    for fname in files:
        full_fname = os.path.join(root, fname)
        ftp.storebinary('STOR remote/dir' + fname, open(full_fname, 'rb'))
</snippet></ROW><ROW><id>1110446</id><snippet>x.insert</snippet></ROW><ROW><id>1110446</id><snippet>bisect</snippet></ROW><ROW><id>1110446</id><snippet>x.insert</snippet></ROW><ROW><id>1110446</id><snippet>x.insert</snippet></ROW><ROW><id>1110492</id><snippet>im = Image.open('image.png')
bands = im.split()
isBlank = all(band.getextrema() == (255, 255) for band in bands)
</snippet></ROW><ROW><id>1111079</id><snippet>from time import gmtime, strftime
print strftime("%z", gmtime())
</snippet></ROW><ROW><id>1111345</id><snippet>eastern = timezone('US/Eastern')
</snippet></ROW><ROW><id>1111345</id><snippet>from datetime import datetime
import pytz
from tzlocal import get_localzone # $ pip install tzlocal

utc_dt = datetime(2009, 7, 10, 18, 44, 59, 193982, tzinfo=pytz.utc)
print(utc_dt.astimezone(get_localzone())) # print local time
# -&gt; 2009-07-10 14:44:59.193982-04:00
</snippet></ROW><ROW><id>1112200</id><snippet>a='a=%r;print a%%a';print a%a
</snippet></ROW><ROW><id>1112293</id><snippet>'__name__'</snippet></ROW><ROW><id>1112293</id><snippet>'__console__'</snippet></ROW><ROW><id>1112293</id><snippet>'__doc__'</snippet></ROW><ROW><id>1112293</id><snippet>None</snippet></ROW><ROW><id>1112293</id><snippet>__name__</snippet></ROW><ROW><id>1112293</id><snippet>__main__</snippet></ROW><ROW><id>1112293</id><snippet>if __name__ == '__main__'
to  
if __name__ in set(["__main__", "__console__"])
</snippet></ROW><ROW><id>1112350</id><snippet>signal.signal</snippet></ROW><ROW><id>1112350</id><snippet>#!/usr/bin/env python
import signal
import sys
def signal_handler(signal, frame):
        print 'You pressed Ctrl+C!'
        sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)
print 'Press Ctrl+C'
signal.pause()
</snippet></ROW><ROW><id>1112350</id><snippet>signal</snippet></ROW><ROW><id>1112462</id><snippet>grep</snippet></ROW><ROW><id>1112462</id><snippet>#!/usr/bin/env perl
use strict;
use warnings;

my %data = ( A =&gt; undef, B =&gt; 'yes', C =&gt; undef );

my @keys = grep { defined $data{$_} } keys %data;

print "Key: $_\n" for @keys;
</snippet></ROW><ROW><id>1112462</id><snippet>0</snippet></ROW><ROW><id>1112462</id><snippet>undef</snippet></ROW><ROW><id>1112462</id><snippet>undef</snippet></ROW><ROW><id>1112462</id><snippet>0</snippet></ROW><ROW><id>1112462</id><snippet>0</snippet></ROW><ROW><id>1112462</id><snippet>0</snippet></ROW><ROW><id>1112480</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>1112661</id><snippet>from . import</snippet></ROW><ROW><id>1112661</id><snippet>import mypackage</snippet></ROW><ROW><id>1112661</id><snippet>mypackage</snippet></ROW><ROW><id>1112661</id><snippet>sys.path</snippet></ROW><ROW><id>1112661</id><snippet>sys.path</snippet></ROW><ROW><id>1112661</id><snippet>sys.path</snippet></ROW><ROW><id>1112670</id><snippet>import re

pat1 = re.compile(r"(^|[\n ])(([\w]+?://[\w\#$%&amp;~.\-;:=,?@\[\]+]*)(/[\w\#$%&amp;~/.\-;:=,?@\[\]+]*)?)", re.IGNORECASE | re.DOTALL)

pat2 = re.compile(r"#(^|[\n ])(((www|ftp)\.[\w\#$%&amp;~.\-;:=,?@\[\]+]*)(/[\w\#$%&amp;~/.\-;:=,?@\[\]+]*)?)", re.IGNORECASE | re.DOTALL)


urlstr = 'http://www.example.com/foo/bar.html'

urlstr = pat1.sub(r'\1&lt;a href="\2" target="_blank"&gt;\3&lt;/a&gt;', urlstr)
urlstr = pat2.sub(r'\1&lt;a href="http:/\2" target="_blank"&gt;\3&lt;/a&gt;', urlstr)

print urlstr
</snippet></ROW><ROW><id>1112670</id><snippet>&lt;a href="http://www.example.com/foo/bar.html" target="_blank"&gt;http://www.example.com&lt;/a&gt;
</snippet></ROW><ROW><id>1112684</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>1112684</id><snippet>ast</snippet></ROW><ROW><id>1112684</id><snippet>eval</snippet></ROW><ROW><id>1112684</id><snippet>True</snippet></ROW><ROW><id>1112684</id><snippet>object</snippet></ROW><ROW><id>1112684</id><snippet>eval</snippet></ROW><ROW><id>1112701</id><snippet>os.path</snippet></ROW><ROW><id>1112701</id><snippet>$ python -c"import sys; import StringIO; x=StringIO.StringIO(); sys.stdout=x; import this; sys.stdout = sys.__stdout__; print x.getvalue().splitlines()[10][9:]"
</snippet></ROW><ROW><id>1113150</id><snippet>import Cocoa
manager = Cocoa.NSFontManager.sharedFontManager()
font_families = list(manager.availableFontFamilies())
</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113173</id><snippet>__enter__/__exit__</snippet></ROW><ROW><id>1113173</id><snippet>class A(object):
    def __init__(self):
        print('Constructing A')

    def __del__(self):
        print('Destructing A')

class B(object):
    a = A()
</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113173</id><snippet>__del__</snippet></ROW><ROW><id>1113496</id><snippet>os.path.join(os.environ['APPDATA'], 'appname')</snippet></ROW><ROW><id>1113496</id><snippet>os.path.join(os.environ['HOME'], '.appname')</snippet></ROW><ROW><id>1113613</id><snippet>class Kaka
  puts self
end
</snippet></ROW><ROW><id>1113984</id><snippet>memcached</snippet></ROW><ROW><id>1114332</id><snippet>subprocess</snippet></ROW><ROW><id>1114332</id><snippet>None</snippet></ROW><ROW><id>1114472</id><snippet>run?</snippet></ROW><ROW><id>1114472</id><snippet>__name__</snippet></ROW><ROW><id>1114472</id><snippet>globals()</snippet></ROW><ROW><id>1114472</id><snippet>run</snippet></ROW><ROW><id>1114472</id><snippet>globals()['myvar'] = [1,2,3]</snippet></ROW><ROW><id>1114472</id><snippet>export</snippet></ROW><ROW><id>1114472</id><snippet>import sys</snippet></ROW><ROW><id>1114472</id><snippet>sys.modules["originalmodule"].myvar = [1, 2, 3]</snippet></ROW><ROW><id>1114651</id><snippet>app.yaml
application: yourappname
version: 1
runtime: python
api_version: 1

handlers:

- url: /tasks/.*
  script: main.py

cron.yaml
cron:
    - description: daily mailing job
    url: /tasks/summary
    schedule: every 24 hours

main.py
#!/usr/bin/env python  

import cgi
from google.appengine.ext import webapp
from google.appengine.api import mail
from google.appengine.api import urlfetch 

class MailJob(webapp.RequestHandler):
    def get(self):

        # Call your website using URL Fetch service ...
        url = "http://www.yoursite.com/page_or_service"
        result = urlfetch.fetch(url)

        if result.status_code == 200:
                doSomethingWithResult(result.content)

        # Send emails using Mail service ...
        mail.send_mail(sender="admin@gmail.com",
                        to="someone@gmail.com",
                        subject="Your account on YourSite.com has expired",
                        body="Bla bla bla ...")
        return

application = webapp.WSGIApplication([
        ('/tasks/summary', MailJob)], debug=True)

def main():
    wsgiref.handlers.CGIHandler().run(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1114822</id><snippet>$ echo 'print "test"
def f1():
    print "f1"

def f2():
    print "f2"

' &gt; util.py

$ echo 'from util import f1
f1()
from util import f2
f2()
' &gt; test.py

$ python test.py 
test
f1
f2

$
</snippet></ROW><ROW><id>1115171</id><snippet>Restaurant</snippet></ROW><ROW><id>1115171</id><snippet>Place</snippet></ROW><ROW><id>1115171</id><snippet>Restaurant</snippet></ROW><ROW><id>1115171</id><snippet>Place</snippet></ROW><ROW><id>1115216</id><snippet>IOError</snippet></ROW><ROW><id>1115216</id><snippet>except IOError, e:</snippet></ROW><ROW><id>1115216</id><snippet>e.errno</snippet></ROW><ROW><id>1115216</id><snippet>errno.EPERM</snippet></ROW><ROW><id>1115216</id><snippet>errno.EACCES</snippet></ROW><ROW><id>1115216</id><snippet>errno.EROFS</snippet></ROW><ROW><id>1115216</id><snippet>errno.ENOSPC</snippet></ROW><ROW><id>1115216</id><snippet>except</snippet></ROW><ROW><id>1115216</id><snippet>except IOError, e:</snippet></ROW><ROW><id>1115252</id><snippet>$ #DON'T DO THIS UNLESS YOU CAN AFFORD TO LOSE ALL YOUR DATA!
$ python PROJECT_DIR/manage.py syncdb
</snippet></ROW><ROW><id>1115252</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>1115329</id><snippet>set</snippet></ROW><ROW><id>1115329</id><snippet>array.array</snippet></ROW><ROW><id>1116119</id><snippet>urllib.unquote_plus</snippet></ROW><ROW><id>1116243</id><snippet>def bracketed_find(s, start, end, startat=0):
    startloc=s.find(start, startat)
    if startloc==-1:
    	return []
    endloc=s.find(end, startloc+len(start))
    if endloc == -1:
    	return [s[startloc+len(start):]]
    return [s[startloc+len(start):endloc]] + bracketed_find(s, start, end, endloc+len(end))
</snippet></ROW><ROW><id>1116243</id><snippet>def bracketed_find(s, start, end, startat=0):
    startloc=s.find(start, startat)
    if startloc==-1:
    	return
    endloc=s.find(end, startloc+len(start))
    if endloc == -1:
    	yield s[startloc+len(start):]
    	return
    else:
    	yield s[startloc+len(start):endloc]

    for found in bracketed_find(s, start, end, endloc+len(end)):
    	yield found
</snippet></ROW><ROW><id>1116705</id><snippet>def _another_register(self, func, subst=None, needcleanup=1):
    ...

def change_register(self):
    self.register = self._another_register

def restore_register(self):
    self.register = self._register
</snippet></ROW><ROW><id>1117425</id><snippet>import os
print os.path.normpath(os.path.join(os.getcwd(), '../AnotherBook/Chap2.txt'))
</snippet></ROW><ROW><id>1117456</id><snippet>__add__</snippet></ROW><ROW><id>1117456</id><snippet>__radd__</snippet></ROW><ROW><id>1117456</id><snippet>class IntContainer(int):
    pass
i = IntContainer(3)
print i + 5 # 8 
print 4 + i # 7

class StrContainer(str):
    pass
s = StrContainer(3)
print s + '5' # 35
print '4' + s # 43
</snippet></ROW><ROW><id>1117496</id><snippet>reload</snippet></ROW><ROW><id>1117496</id><snippet>import</snippet></ROW><ROW><id>1117496</id><snippet>sys.modules[themodulename]</snippet></ROW><ROW><id>1117496</id><snippet>from ... import *</snippet></ROW><ROW><id>1117507</id><snippet>for app in apps:
    if app.split('.', 1)[0] != 'zc': #only look for cron in zc apps
        continue

    try:
        a = app + '.cron'
        __import__(a)
    except ImportError: #no cron jobs for this module
        continue

    # etc etc
</snippet></ROW><ROW><id>1117507</id><snippet>continue</snippet></ROW><ROW><id>1117528</id><snippet>easy_install</snippet></ROW><ROW><id>1117571</id><snippet>GET_MODULE_FUNCTION = """
def f():
    import %(parent)s
    try:
        from %(parent)s import %(child)s
    except ImportError:
        # one more time...
        reload(%(parent)s)
        from %(parent)s import %(child)s
    return %(child)s
"""
</snippet></ROW><ROW><id>1117571</id><snippet>exec</snippet></ROW><ROW><id>1117571</id><snippet>defn = GET_MODULE_FUNCTION % {"parent": parentname, "child": partname}
exec(defn)
</snippet></ROW><ROW><id>1117571</id><snippet>import sys

def f(parentname, partname):
    name = '%s.%s' % (parentname, partname)
    try:
        __import__(name)
    except ImportError:
        parent = __import__(parentname)
        reload(parent)
        __import__(name)
    return sys.modules[name]
</snippet></ROW><ROW><id>1117571</id><snippet>f</snippet></ROW><ROW><id>1117587</id><snippet>LOW = 0
NORMAL = 1
HIGH = 2
STATUS_CHOICES = (
    (LOW, 'Low'),
    (NORMAL, 'Normal'),
    (HIGH, 'High'),
)
</snippet></ROW><ROW><id>1117587</id><snippet>thing.priority = Thing.NORMAL</snippet></ROW><ROW><id>1117912</id><snippet>&lt;?php
      header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
      header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); // Date in the past
?&gt;
</snippet></ROW><ROW><id>1118035</id><snippet>__init__</snippet></ROW><ROW><id>1118035</id><snippet>__init__</snippet></ROW><ROW><id>1118035</id><snippet>__init__</snippet></ROW><ROW><id>1118035</id><snippet>CoolDog(True)
CoolDog(True, old=False)
CoolDog(bite=True, old=True)
CoolDog(old=True, bite=False)
</snippet></ROW><ROW><id>1118038</id><snippet>def todict(obj, classkey=None):
    if isinstance(obj, dict):
        for k in obj.keys():
            obj[k] = todict(obj[k], classkey)
        return obj
    elif hasattr(obj, "__iter__"):
        return [todict(v, classkey) for v in obj]
    elif hasattr(obj, "__dict__"):
        data = dict([(key, todict(value, classkey)) 
            for key, value in obj.__dict__.iteritems() 
            if not callable(value) and not key.startswith('_')])
        if classkey is not None and hasattr(obj, "__class__"):
            data[classkey] = obj.__class__.__name__
        return data
    else:
        return obj
</snippet></ROW><ROW><id>1118271</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>1118271</id><snippet>* return HttpResponse({variable to inspect})

* print {variable to inspect}

* raise Exception({variable to inspect})
</snippet></ROW><ROW><id>1118467</id><snippet>def f(a,b,c=None):
    if c is None:
        c = g(b)
</snippet></ROW><ROW><id>1118467</id><snippet>None</snippet></ROW><ROW><id>1118467</id><snippet>c</snippet></ROW><ROW><id>1118467</id><snippet>sentinel = object()
def f(a,b,c=sentinel):
    if c is sentinel:
        c = g(b)
</snippet></ROW><ROW><id>1118619</id><snippet>[phi, psi, x] = pywt.Wavelet('db2').wavefun(level=4)
</snippet></ROW><ROW><id>1118619</id><snippet>import pylab
pylab.plot(x, psi)
pylab.show()
</snippet></ROW><ROW><id>1118689</id><snippet>(?!^[0-9]*$)
</snippet></ROW><ROW><id>1118689</id><snippet>(?!^[a-zA-Z]*$)
</snippet></ROW><ROW><id>1118689</id><snippet>^([a-zA-Z0-9]{8,10})$
</snippet></ROW><ROW><id>1119769</id><snippet>ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

def base62_encode(num, alphabet=ALPHABET):
    """Encode a number in Base X

    `num`: The number to encode
    `alphabet`: The alphabet to use for encoding
    """
    if (num == 0):
        return alphabet[0]
    arr = []
    base = len(alphabet)
    while num:
        rem = num % base
        num = num // base
        arr.append(alphabet[rem])
    arr.reverse()
    return ''.join(arr)

def base62_decode(string, alphabet=ALPHABET):
    """Decode a Base X encoded string into the number

    Arguments:
    - `string`: The encoded string
    - `alphabet`: The alphabet to use for encoding
    """
    base = len(alphabet)
    strlen = len(string)
    num = 0

    idx = 0
    for char in string:
        power = (strlen - (idx + 1))
        num += alphabet.index(char) * (base ** power)
        idx += 1

    return num
</snippet></ROW><ROW><id>1119769</id><snippet>"23456789abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"</snippet></ROW><ROW><id>1119916</id><snippet>import time

last={}

def diff(col): return counters[col] - last[iface][col]

while True:
  print "\n%10s: %10s %10s %10s %10s"%("interface","bytes recv","bytes sent", "pkts recv", "pkts sent")
  for line in open('/proc/net/dev').readlines()[2:]:
    iface, counters = line.split(':')
    counters = map(int,counters.split())
    if iface in last:
      print "%10s: %10d %10d %10d %10d"%(iface,diff(0), diff(8), diff(1), diff(9))

    last[iface] = counters

  time.sleep(1)
</snippet></ROW><ROW><id>1120278</id><snippet>UnapprovedUser</snippet></ROW><ROW><id>1120278</id><snippet>User</snippet></ROW><ROW><id>1120278</id><snippet>UnapprovedUser.get()</snippet></ROW><ROW><id>1120278</id><snippet>User.get</snippet></ROW><ROW><id>1120278</id><snippet>cls</snippet></ROW><ROW><id>1120278</id><snippet>@classmethod
def get(cls, uid):
    ldap_data = LdapUtil.get(uid + ',' + self.base_dn)
    return cls._from_ldap(ldap_data)
</snippet></ROW><ROW><id>1120278</id><snippet>_from_ldap</snippet></ROW><ROW><id>1120278</id><snippet>_from_ldap</snippet></ROW><ROW><id>1120278</id><snippet>result = User(... blah ...)
</snippet></ROW><ROW><id>1120278</id><snippet>result = cls(... blah ...)
</snippet></ROW><ROW><id>1120278</id><snippet>cls</snippet></ROW><ROW><id>1120347</id><snippet>def unit_disabled(func):
    def wrapper(func):
         func.__test__ = False
         return func

    return wrapper

@unit_disabled
def test_my_sample_test():
    assert 1 &lt;&gt; 1

def test2_my_sample_test():
    assert 1 &lt;&gt; 1
</snippet></ROW><ROW><id>1120370</id><snippet>from __future__ import braces
</snippet></ROW><ROW><id>1120662</id><snippet>for line in open('infile'):
  if line[0] == '6':
    print ''
  print line.strip() ,
</snippet></ROW><ROW><id>1120662</id><snippet>newline = ''
for line in open('infile'):
    if line[0] == '6':
        if newline:
            print newline
            newline = ''
    newline += ' ' + line.strip()
if newline:
     print newline
</snippet></ROW><ROW><id>1120736</id><snippet>os.listdir()</snippet></ROW><ROW><id>1120736</id><snippet>import os
for filename in os.listdir('dirname'):
     callthecommandhere(blablahbla, filename, foo)
</snippet></ROW><ROW><id>1121068</id><snippet>del foo.bar</snippet></ROW><ROW><id>1121068</id><snippet>  2           0 LOAD_FAST                0 (foo)
              3 DELETE_ATTR              0 (bar)
</snippet></ROW><ROW><id>1121068</id><snippet>delattr(foo, "bar")</snippet></ROW><ROW><id>1121068</id><snippet>  2           0 LOAD_GLOBAL              0 (delattr)
              3 LOAD_FAST                0 (foo)
              6 LOAD_CONST               1 ('bar')
              9 CALL_FUNCTION            2
             12 POP_TOP
</snippet></ROW><ROW><id>1121068</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>1121068</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>1121166</id><snippet>HOST = raw_input('Enter Host: ')
PORT = int(raw_input('Enter Port: '))
</snippet></ROW><ROW><id>1121166</id><snippet>HOST = raw_input('Enter host: ')
print HOST

&gt;&gt;&gt; 
Enter host: stackoverflow.com
stackoverflow.com
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1122236</id><snippet>_unused_1</snippet></ROW><ROW><id>1122236</id><snippet>class Article(models.Model):
    title = models.CharField(blank=False, max_length=80)
    slug = models.SlugField(max_length=80)
    revision_1 = models.OneToOneField(ArticleRevision, related_name='_unused_1')
    revision_2 = models.OneToOneField(ArticleRevision, related_name='_unused_2')

    def __unicode__(self):
        return self.title
</snippet></ROW><ROW><id>1123026</id><snippet>dict</snippet></ROW><ROW><id>1123026</id><snippet>&gt;&gt;&gt; foo = dict(x=1, y=2)
&gt;&gt;&gt; bar = dict(y=2, x=1)
&gt;&gt;&gt; foo == bar
True
</snippet></ROW><ROW><id>1123026</id><snippet>foo['x']</snippet></ROW><ROW><id>1123026</id><snippet>foo.x</snippet></ROW><ROW><id>1123026</id><snippet>class Bunch(object):
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

    def __eq__(self, other):
        return self.__dict__ == other.__dict__
</snippet></ROW><ROW><id>1123026</id><snippet>class Bunch(dict):
    __getattr__, __setattr__ = dict.get, dict.__setitem__
</snippet></ROW><ROW><id>1123309</id><snippet>content()</snippet></ROW><ROW><id>1123309</id><snippet>protected_view</snippet></ROW><ROW><id>1123309</id><snippet>request</snippet></ROW><ROW><id>1123309</id><snippet>content</snippet></ROW><ROW><id>1123309</id><snippet>protected_view</snippet></ROW><ROW><id>1123309</id><snippet>content</snippet></ROW><ROW><id>1123375</id><snippet>from django.db import models
from datetime import datetime, timedelta
# Create your models here.
class yourTextLineGroup(models.Model):
    # fields go here    
    lock_time = models.DateTimeField(null=True)
    locked_by = models.ForeignKey()#Point me to your user model

    def lock(self):
        if self.is_locked(): #and code here to see if current user is not locked_by user
            #exception / bad return value here
            pass

        self.lock_time = datetime.now()

    def unlock(self):
        self.lock_time = None

    def is_locked(self):
        return self.lock_time and datetime.now() - self.lock_time &lt; timedelta(minutes=10)
</snippet></ROW><ROW><id>1123397</id><snippet>mymodel_obj_list</snippet></ROW><ROW><id>1123603</id><snippet>class DictModelAdaptor():
    def __init__(self, model):
        self.model = model

    def __getitem__(self, key):
        return self.model.objects.get(key=key)

    def __setitem__(self, key, item):
        pair = self.model()
        pair.key = key
        pair.value = item
        pair.save()

    def __contains__(self, key):
        ...
</snippet></ROW><ROW><id>1123603</id><snippet>modelDict = DictModelAdaptor(DictModel)
modelDict["name"] = "Bob Jones"
</snippet></ROW><ROW><id>1123637</id><snippet>$ wget http://www.biglickmedia.com/art/random/index.php
</snippet></ROW><ROW><id>1124233</id><snippet>IEnumerator&lt;T&gt;</snippet></ROW><ROW><id>1124233</id><snippet>var newList = oldList.Where(x =&gt; ShouldBeRetained(x)).ToList();
</snippet></ROW><ROW><id>1124233</id><snippet>ShouldBeRetained</snippet></ROW><ROW><id>1124233</id><snippet>ToList()</snippet></ROW><ROW><id>1124896</id><snippet>[buildout]
parts = instance

[zope2]
recipe = plone.recipe.zope2install
url = http://www.zope.org/Products/Zope/2.11.3/Zope-2.11.3-final.tgz

[instance]
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}
user = admin:admin
http-address = 127.0.0.1:8080
</snippet></ROW><ROW><id>1124896</id><snippet>instance</snippet></ROW><ROW><id>1124896</id><snippet>zope2</snippet></ROW><ROW><id>1124896</id><snippet>[buildout]
parts = scripts
extends = http://svn.zope.org/*checkout*/Zope/tags/2.12.0b3/versions.cfg

[versions]
Zope2 = 2.12.0b3

[scripts]
recipe = zc.recipe.egg:scripts
eggs = Zope2
</snippet></ROW><ROW><id>1125038</id><snippet>objects = B.objects.get(user=a.user)
objects += A.objects.get(user=user)
</snippet></ROW><ROW><id>1125038</id><snippet>user = models.ForeignKey(User)
</snippet></ROW><ROW><id>1125038</id><snippet>objects = C.objects.get(user=user)
</snippet></ROW><ROW><id>1125038</id><snippet>for object in objects:
    if object.A:
        #code
    if object.B:
        #code
</snippet></ROW><ROW><id>1125436</id><snippet>def removePrefix(path, prefix):
    plist = path.split(os.sep)
    pflist = prefix.split(os.sep)
    rest = plist[len(pflist):]
    return os.path.join(*rest)
</snippet></ROW><ROW><id>1125436</id><snippet>print removePrefix("this/is/the/basedir/path/b/include", "this/is/the/basedir/path")
b/include
</snippet></ROW><ROW><id>1125436</id><snippet>os.sep</snippet></ROW><ROW><id>1125645</id><snippet>curl</snippet></ROW><ROW><id>1125645</id><snippet>wget</snippet></ROW><ROW><id>1125645</id><snippet>$ wget http://cs.edu.com/u/user/TEST/one.py
$ python one.py
</snippet></ROW><ROW><id>1125645</id><snippet>one.py</snippet></ROW><ROW><id>1126137</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1126137</id><snippet>env</snippet></ROW><ROW><id>1126137</id><snippet>os.environ</snippet></ROW><ROW><id>1126137</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1126603</id><snippet>liblwgeom.so</snippet></ROW><ROW><id>1126737</id><snippet>from pylons import session
session["something"] = whatever()
session.save()

# somewhen later
something = session["something"]
</snippet></ROW><ROW><id>1127087</id><snippet>ipdb</snippet></ROW><ROW><id>1127087</id><snippet>import ipdb; ipdb.set_trace()
</snippet></ROW><ROW><id>1127087</id><snippet>easy_install ipdb</snippet></ROW><ROW><id>1127087</id><snippet>ipdb</snippet></ROW><ROW><id>1127087</id><snippet>ipdb.py</snippet></ROW><ROW><id>1127087</id><snippet>import sys
from IPython.Debugger import Pdb
from IPython.Shell import IPShell
from IPython import ipapi

shell = IPShell(argv=[''])

def set_trace():
    ip = ipapi.get()
    def_colors = ip.options.colors
    Pdb(def_colors).set_trace(sys._getframe().f_back)
</snippet></ROW><ROW><id>1127804</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>1128392</id><snippet>-U</snippet></ROW><ROW><id>1128392</id><snippet>typeset</snippet></ROW><ROW><id>1128452</id><snippet>verb, title, definition = myString.split (' ', 2)
</snippet></ROW><ROW><id>1128740</id><snippet>urlpatterns = patterns('',
   (r'^item/value/(?P&lt;value&gt;\d+\.\d{2})/$', 'myapp.views.byvalue'),
   ... more urls
)
</snippet></ROW><ROW><id>1128740</id><snippet>def byvalue(request,value='0.99'):
    try:
        value = float(value)
    except:
        ...
</snippet></ROW><ROW><id>1129387</id><snippet>import operator

ourtags = sorted(ourtags, key=operator.attrgetter('date_added'))
</snippet></ROW><ROW><id>1129486</id><snippet>def count(obj):
    total = 0
    for o in obj[1:]:
        # Add the node itself.
        total += 1

        if isinstance(o, list):
            total += count(o)
    return total
</snippet></ROW><ROW><id>1129486</id><snippet>def find_idx(tree, idx):
    """
    Return the node containing the idx'th function parameter, and the index of that
    parameter.  If the tree contains fewer than idx parameters, return (None, None).
    """
    if not isinstance(idx, list):
        # Stash this in a list, so recursive calls share the same value.
        idx = [idx]

    for i, o in enumerate(tree):
        # Skip the function itself.
        if i == 0:
            continue

        if idx[0] == 0:
            return tree, i

        idx[0] -= 1
        if isinstance(o, list):
            container, result_index = find_idx(o, idx)
            if container is not None:
                return container, result_index

    return None, None
</snippet></ROW><ROW><id>1129486</id><snippet>def random_swap(tree1, tree2):
    from random import randrange
    pos_in_1 = randrange(0, count(tree1))
    pos_in_2 = randrange(0, count(tree2))

    parent1, idx1 = find_idx(tree1, pos_in_1)
    parent2, idx2 = find_idx(tree2, pos_in_2)

    # Swap:
    parent1[idx1], parent2[idx2] = parent2[idx2], parent1[idx1]

c = 1
tree1 = ["f:2", c, ["f:1", c]]
tree2 = ["f:2", ["f:2", ["f:2", c, c], ["f:2", c, c]], ["f:3", ["f:4", c, c, c, c], ["f:2", c, c], c]]

while True:
    random_swap(tree1, tree2)
    print tree1
    print tree2
</snippet></ROW><ROW><id>1129730</id><snippet>(_foo_)</snippet></ROW><ROW><id>1129730</id><snippet>([_asdf_])  -&gt;  &lt;p&gt;(&lt;em&gt;asdf&lt;/em&gt;)&lt;/p&gt;
</snippet></ROW><ROW><id>1129730</id><snippet>(]_asdf_])
</snippet></ROW><ROW><id>1129730</id><snippet>Textile.span()</snippet></ROW><ROW><id>1129730</id><snippet>            (?:^|(?&lt;=[\s&gt;%(pnct)s])|([{[]))
</snippet></ROW><ROW><id>1129730</id><snippet>            (?:^|(?&lt;=[\s&gt;(%(pnct)s])|([{[]))
</snippet></ROW><ROW><id>1129730</id><snippet>(_foo_)</snippet></ROW><ROW><id>1129732</id><snippet>def perm(i, seq):
  seq = tuple(seq)
  n = len(seq)
  max = n # number of perms with 'digits' digits
  digits = 1
  last_max = 0
  while i &gt;= max:
    last_max = max
    max = n * (max + 1)
    digits += 1
  result = ''
  i -= last_max
  while digits:
    digits -= 1
    result = seq[i % n] + result
    i //= n
  return result
</snippet></ROW><ROW><id>1129905</id><snippet>class SpamMeta(type):

    def __new__(cls, name, bases, dct):
        SpamType = type.__new__(cls, name, bases, dct)
        SpamType.decorated = []
        return SpamType


class Spam(object):

    __metaclass__ = SpamMeta

    @classmethod
    def decorate(cls, funct):
        cls.decorated.append(funct)
        return funct


class Eggs(Spam):
    pass


@Eggs.decorate
def foo():
    print "spam and eggs"


print Eggs.decorated # [&lt;function foo at 0x...&gt;]
print Spam.decorated # []
</snippet></ROW><ROW><id>1130767</id><snippet>raise socket.error, msg</snippet></ROW><ROW><id>1130767</id><snippet>socket.error</snippet></ROW><ROW><id>1130767</id><snippet>import socket
...
try:
    ...
except socket.error:
    ...
</snippet></ROW><ROW><id>1131014</id><snippet>words</snippet></ROW><ROW><id>1131014</id><snippet>class Node(object):
    def __init__(self, letter='', final=False):
        self.letter = letter
        self.final = final
        self.children = {}
    def __contains__(self, letter):
        return letter in self.children
    def get(self, letter):
        return self.children[letter]
    def add(self, letters, n=-1, index=0):
        if n &lt; 0: n = len(letters)
        if index &gt;= n: return
        letter = letters[index]
        if letter in self.children:
            child = self.children[letter]
        else:
            child = Node(letter, index==n-1)
            self.children[letter] = child
        child.add(letters, n, index+1)

def load_dictionary(path):
    result = Node()
    for line in open(path, 'r'):
        word = line.strip().lower()
        result.add(word)
    return result

words = load_dictionary('dictionary.txt')
</snippet></ROW><ROW><id>1131238</id><snippet>update()</snippet></ROW><ROW><id>1131238</id><snippet>digest()</snippet></ROW><ROW><id>1131238</id><snippet>f = open(fileName)
while not endOfFile:
    f.read(128)
</snippet></ROW><ROW><id>1132247</id><snippet>import os
import unittest
from paste.fixture import TestApp

class RootTest (unittest.TestCase):

  def setUp(self):
    self.app = TestApp('config:%s/../development.ini' % os.path.dirname(os.path.abspath(__file__)))

  def tearDown(self):
    self.app = None

  def test_html(self):
    res = self.app.get('/')
    res.mustcontain('Hello from restest!')

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>1133190</id><snippet>import datetime
year = datetime.date.today().year
</snippet></ROW><ROW><id>1133190</id><snippet>import datetime
year = datetime.datetime.today().year
</snippet></ROW><ROW><id>1133316</id><snippet>reduce</snippet></ROW><ROW><id>1133316</id><snippet>In [13]: reduce(lambda s, t: (s[0]+t[0], s[1]+t[1]), [a, b, c], (0, 0))
Out[13]: (51, 73)
</snippet></ROW><ROW><id>1133316</id><snippet>map</snippet></ROW><ROW><id>1133316</id><snippet>zip</snippet></ROW><ROW><id>1133316</id><snippet>In [14]: map(sum, zip(a, b, c))
Out[14]: [51, 73]
</snippet></ROW><ROW><id>1133316</id><snippet>In [15]: tups = [a, b, c]

In [15]: map(sum, zip(*tups))
Out[15]: [51, 73]
</snippet></ROW><ROW><id>1133316</id><snippet>map</snippet></ROW><ROW><id>1133316</id><snippet>In [16]: [sum(z) for z in zip(*tups)]
Out[16]: [51, 73]
</snippet></ROW><ROW><id>1133329</id><snippet>bla</snippet></ROW><ROW><id>1133329</id><snippet>bla</snippet></ROW><ROW><id>1133329</id><snippet>Foo</snippet></ROW><ROW><id>1133329</id><snippet>class Foo:
    def __init__(self, bla=None):
        if bla is None:
            bla = {}
        self.task_defs = bla
    def __str__(self):
        return ''.join(str(self.task_defs))

a = Foo()
b = Foo()
a.task_defs['BAR'] = 1
print 'B is ==&gt; %s' % str(b)
print 'A is ==&gt; %s' % str(a)
</snippet></ROW><ROW><id>1133411</id><snippet>shell]$ find /my/source -name "*.py" -type f -exec cat {} + | wc -l
</snippet></ROW><ROW><id>1133470</id><snippet>class EditForm(forms.Form):
    summary = forms.CharField()
    description = forms.CharField(widget=forms.TextArea)


class CreateForm(EditForm):
    name = forms.CharField()

    def __init__(self, *args, **kwargs):
        super(CreateForm, self).__init__(*args, **kwargs)
        self.fields.keyOrder = ['name', 'summary', 'description']
</snippet></ROW><ROW><id>1133895</id><snippet>blog_post_list = blogPosts.objects.all().order_by('-pub_date')[:5]
</snippet></ROW><ROW><id>1134566</id><snippet>__init__</snippet></ROW><ROW><id>1134566</id><snippet>libc = ctypes.cdll.LoadLibrary("libc.so")
mask = '\x00' * 17 # 16 byte empty mask + null terminator 
libc.sigprocmask(3, mask, None) # '3' on FreeBSD is the value for SIG_SETMASK
</snippet></ROW><ROW><id>1134567</id><snippet>from formencode import FancyValidator, Invalid
from formencode.validators import Email

class EmailList(FancyValidator):
    """ Takes a delimited (default is comma) string and returns a list of validated e-mails
        Set the delimiter by passing delimiter="A_DELIMITER" to the constructor.
        Also takes all arguments a FancyValidator does.  
        The e-mails will always be stripped of whitespace.
    """
    def _to_python(self, value, state):
        try:
            values = str(value).split(self.delimiter)
        except AttributeError:
            values = str(value).split(',')
        validator = formencode.ForEach(validators.Email())
        validator.to_python(values, state)
        return [value.strip() for value in values]
</snippet></ROW><ROW><id>1134614</id><snippet>try:
    fp = open("nother")
except IOError, e:
    print e.errno
    print e
</snippet></ROW><ROW><id>1135035</id><snippet>input("Press Enter to continue...")
</snippet></ROW><ROW><id>1135035</id><snippet>import msvcrt as m
def wait():
    m.getch()
</snippet></ROW><ROW><id>1136248</id><snippet>django.db.transaction.commit_manually</snippet></ROW><ROW><id>1136248</id><snippet>from django.db import transaction

@transaction.commit_manually
def viewfunc(request):
    ...
    for item in items:
        entry = Entry(a1=item.a1, a2=item.a2)
        entry.save()
    transaction.commit()
</snippet></ROW><ROW><id>1136248</id><snippet>from django.db import transaction

def viewfunc(request):
    ...
    with transaction.commit_on_success():
        for item in items:
            entry = Entry(a1=item.a1, a2=item.a2)
            entry.save()
</snippet></ROW><ROW><id>1136248</id><snippet>bulk_create</snippet></ROW><ROW><id>1136248</id><snippet>&gt;&gt;&gt; Entry.objects.bulk_create([
...     Entry(headline="Django 1.0 Released"),
...     Entry(headline="Django 1.1 Announced"),
...     Entry(headline="Breaking: Django is awesome")
... ])
</snippet></ROW><ROW><id>1136248</id><snippet>commit_on_success</snippet></ROW><ROW><id>1136248</id><snippet>commit_manually</snippet></ROW><ROW><id>1136248</id><snippet>from django.db import transaction

@transaction.atomic
def viewfunc(request):
    # This code executes inside a transaction.
    do_stuff()
</snippet></ROW><ROW><id>1136248</id><snippet>from django.db import transaction

def viewfunc(request):
    # This code executes in autocommit mode (Django's default).
    do_stuff()

    with transaction.atomic():
        # This code executes inside a transaction.
        do_more_stuff()
</snippet></ROW><ROW><id>1136852</id><snippet>sys.intern(string)
</snippet></ROW><ROW><id>1136852</id><snippet>sys.intern</snippet></ROW><ROW><id>1136852</id><snippet>sys.intern</snippet></ROW><ROW><id>1136852</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; a = sys.intern('why do pangolins dream of quiche')
&gt;&gt;&gt; a
'why do pangolins dream of quiche'
</snippet></ROW><ROW><id>1136852</id><snippet>a</snippet></ROW><ROW><id>1136852</id><snippet>sys.intern</snippet></ROW><ROW><id>1136852</id><snippet>'why do pangolins dream of quiche'</snippet></ROW><ROW><id>1136852</id><snippet>&gt;&gt;&gt; b = sys.intern('why do pangolins dream of quiche')
&gt;&gt;&gt; b
'why do pangolins dream of quiche'
</snippet></ROW><ROW><id>1136852</id><snippet>'why do pangolins dream of quiche'</snippet></ROW><ROW><id>1136852</id><snippet>b</snippet></ROW><ROW><id>1136852</id><snippet>a</snippet></ROW><ROW><id>1136852</id><snippet>&gt;&gt;&gt; b is a
True
</snippet></ROW><ROW><id>1136852</id><snippet>&gt;&gt;&gt; c = 'why do pangolins dream of quiche'
&gt;&gt;&gt; c is a
False
&gt;&gt;&gt; c is b
False
</snippet></ROW><ROW><id>1136852</id><snippet>sys.intern</snippet></ROW><ROW><id>1137623</id><snippet>subprocess</snippet></ROW><ROW><id>1137623</id><snippet>**kwargs</snippet></ROW><ROW><id>1137861</id><snippet>subst</snippet></ROW><ROW><id>1137861</id><snippet>%path%</snippet></ROW><ROW><id>1137861</id><snippet>c:\python25\python.exe</snippet></ROW><ROW><id>1137912</id><snippet>gpg</snippet></ROW><ROW><id>1138051</id><snippet>next(s for s in list_of_string if s)
</snippet></ROW><ROW><id>1138261</id><snippet>for x in (1,2,3,4,5):
    fd.write(x + '\n')
</snippet></ROW><ROW><id>1138261</id><snippet>for x in (1,2,3,4,5):
    fd.write('%s\n' % x)
</snippet></ROW><ROW><id>1138411</id><snippet>Z:</snippet></ROW><ROW><id>1138411</id><snippet>\\hostname</snippet></ROW><ROW><id>1138411</id><snippet>r'...'</snippet></ROW><ROW><id>1138411</id><snippet>mountvol drive:path /L</snippet></ROW><ROW><id>1138411</id><snippet>mountvol</snippet></ROW><ROW><id>1138411</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1138474</id><snippet>SMTPChannel</snippet></ROW><ROW><id>1138474</id><snippet>smtp_</snippet></ROW><ROW><id>1138474</id><snippet>SMTPServer</snippet></ROW><ROW><id>1138757</id><snippet>^[A-Za-z0-9_.][A-Za-z0-9_ ]{0,31}$
</snippet></ROW><ROW><id>1139504</id><snippet>java -Djava.net.preferIPv4Stack=true -jar bridge.jar</snippet></ROW><ROW><id>1139731</id><snippet>importKey</snippet></ROW><ROW><id>1139731</id><snippet>key</snippet></ROW><ROW><id>1139731</id><snippet>k = key()
k.importKey(myKey, passphrase='PASSPHRASE')
</snippet></ROW><ROW><id>1139731</id><snippet>k = key(keyobj=myKey, passphrase='PASSPHRASE')
</snippet></ROW><ROW><id>1140199</id><snippet>os.environ</snippet></ROW><ROW><id>1140231</id><snippet>import sys    
sys._getframe(number)
</snippet></ROW><ROW><id>1140370</id><snippet>xlrd</snippet></ROW><ROW><id>1140370</id><snippet>xlwt</snippet></ROW><ROW><id>1140753</id><snippet>&lt;root&gt;</snippet></ROW><ROW><id>1140753</id><snippet>import urllib
from xml.etree import ElementTree

url = 'http://69.36.9.147:8090/clientes/SMS_API_OUT.jsp?codigo=ABCDEFGH&amp;cliente=XX'
xmldata = '&lt;root&gt;' + urllib.urlopen(url).read() + '&lt;/root&gt;'
tree = ElementTree.fromstring(xmldata)
codigo = tree.find('codigo').text

print codigo
</snippet></ROW><ROW><id>1140966</id><snippet>text = os.linesep.join([s for s in text.splitlines() if s])
</snippet></ROW><ROW><id>1140966</id><snippet>text</snippet></ROW><ROW><id>1141386</id><snippet>&gt;&gt;&gt; sent = nltk.corpus.treebank.tagged_sents()[22]
&gt;&gt;&gt; print nltk.ne_chunk(sent) 
(S
  The/DT
  (GPE U.S./NNP)
  is/VBZ
  one/CD
  ...
  according/VBG
  to/TO
  (PERSON Brooke/NNP T./NNP Mossman/NNP)
  ...)
</snippet></ROW><ROW><id>1141456</id><snippet>`&lt;?xml version="1.0" encoding="UTF-8"?&gt;`
</snippet></ROW><ROW><id>1141456</id><snippet>&lt;?xml version="1.0"?&gt;</snippet></ROW><ROW><id>1141456</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; from StringIO import StringIO as sio

&gt;&gt;&gt; raw_text = '&lt;root&gt;can\x92t&lt;/root&gt;' # text encoded in cp1252, no XML declaration

&gt;&gt;&gt; t = ET.parse(sio(raw_text))
[tracebacks omitted]
xml.parsers.expat.ExpatError: not well-formed (invalid token): line 1, column 9
# parser is expecting UTF-8

&gt;&gt;&gt; t = ET.parse(sio('&lt;?xml version="1.0" encoding="UTF-8"?&gt;' + raw_text))
xml.parsers.expat.ExpatError: not well-formed (invalid token): line 1, column 47
# parser is expecting UTF-8 again

&gt;&gt;&gt; t = ET.parse(sio('&lt;?xml version="1.0" encoding="cp1252"?&gt;' + raw_text))
&gt;&gt;&gt; t.getroot().text
u'can\u2019t'
# parser was told to expect cp1252; it works

&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.name(u'\u2019')
'RIGHT SINGLE QUOTATION MARK'
# not quite an apostrophe, but better than an exception

&gt;&gt;&gt; fixed_text = raw_text.decode('cp1252').encode('utf8')
# alternative: we transcode the data to UTF-8

&gt;&gt;&gt; t = ET.parse(sio(fixed_text))
&gt;&gt;&gt; t.getroot().text
u'can\u2019t'
# UTF-8 is the default; no declaration needed
</snippet></ROW><ROW><id>1141556</id><snippet>def sum(*args):
    result = 0
    for a in args:
        result += a
    return result

sum(1,2)
sum(9,5,7,8)
sum(1.7,2.3,8.9,3.4)
</snippet></ROW><ROW><id>1142123</id><snippet>import new

def with_bar(func):
    def bar(x):
        return x + 1
    f_globals = func.func_globals.copy()
    f_globals['bar'] = bar
    return new.function(func.func_code, f_globals,
                        func.func_name, func.func_defaults, func.func_closure)

@with_bar
def foo(x):
    return bar(x)

print foo(5) # prints 6
</snippet></ROW><ROW><id>1142186</id><snippet>myFoo.bar(someArgs)</snippet></ROW><ROW><id>1142929</id><snippet>note = GenericRelation('Comment', object_id_field='object_pk')
</snippet></ROW><ROW><id>1142929</id><snippet>Company</snippet></ROW><ROW><id>1142929</id><snippet>Person</snippet></ROW><ROW><id>1142929</id><snippet>Comment</snippet></ROW><ROW><id>1143432</id><snippet>dict((x[0], x) for x in L).values()
</snippet></ROW><ROW><id>1143432</id><snippet>def unique_items(L):
    found = set()
    for item in L:
        if item[0] not in found:
            yield item
            found.add(item[0])

print list(unique_items(L))
</snippet></ROW><ROW><id>1143459</id><snippet>def drawItems(painter, items, options):
    print len(items)
    for idx, i in enumerate(items):
        print idx, i
        if idx &gt; 5:
            raise ValueError()
</snippet></ROW><ROW><id>1143459</id><snippet>45
0 &lt;PyQt4.QtGui.QGraphicsPathItem object at 0x3585270&gt;
1 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356ca68&gt;
2 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356ce20&gt;
3 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356cc88&gt;
4 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356cc00&gt;
5 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356caf0&gt;
6 &lt;PyQt4.QtGui.QGraphicsSimpleTextItem object at 0x356cb78&gt;
</snippet></ROW><ROW><id>1143459</id><snippet>Exception ValueError: ValueError() in &lt;module 'threading' from '/usr/lib/python2.6/threading.pyc'&gt; ignored
</snippet></ROW><ROW><id>1143459</id><snippet>threading.currentThread()</snippet></ROW><ROW><id>1143459</id><snippet>drawItems</snippet></ROW><ROW><id>1143459</id><snippet>options</snippet></ROW><ROW><id>1143459</id><snippet>def drawItems(self, painter, items, options):
    for item, option in zip(items, options):
        print "Processing", item
        # ... Do checking ...
        item.paint(painter, option, self.target)
</snippet></ROW><ROW><id>1143459</id><snippet>self.target</snippet></ROW><ROW><id>1143459</id><snippet>paint()</snippet></ROW><ROW><id>1143459</id><snippet>QWidget*</snippet></ROW><ROW><id>1143459</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>1143459</id><snippet>QObject</snippet></ROW><ROW><id>1143568</id><snippet>bitstring</snippet></ROW><ROW><id>1143568</id><snippet>struct</snippet></ROW><ROW><id>1143568</id><snippet>array</snippet></ROW><ROW><id>1143568</id><snippet>from bitstring import BitString
s = BitString(filename='somefile')

# replace byte range with new values
# The step of '8' signifies byte rather than bit indicies.
s[10:15:8] = '0x001122'

# Search and replace byte value with two bytes
s.replace('0xcc', '0xddee', bytealigned=True)

# Different interpretations of the data are available through properties
if s[5:7:8].int &gt; 1000:
    s[5:7:8] = 1000

# Use the bytes property to get back to a Python string
open('newfile', 'wb').write(s.bytes)
</snippet></ROW><ROW><id>1143568</id><snippet>BitString</snippet></ROW><ROW><id>1143568</id><snippet>array</snippet></ROW><ROW><id>1143896</id><snippet>&gt;&gt;&gt; class Person:
...     def __init__(self): self.mid = True
... 
&gt;&gt;&gt; def is_midwestern(self): return self.mid
... 
&gt;&gt;&gt; Person.is_midwestern = is_midwestern
&gt;&gt;&gt; p = Person()
&gt;&gt;&gt; p.is_midwestern()

True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1144137</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>1144137</id><snippet>matplotlib.pyplot.xticks</snippet></ROW><ROW><id>1144137</id><snippet>tick_locs = [list of locations where you want your tick marks placed]
tick_lbls = [list of corresponding labels for each of the tick marks]
plt.xticks(tick_locs, tick_lbls)
</snippet></ROW><ROW><id>1144137</id><snippet>imshow</snippet></ROW><ROW><id>1144137</id><snippet>pcolor</snippet></ROW><ROW><id>1144137</id><snippet>x</snippet></ROW><ROW><id>1144137</id><snippet>y</snippet></ROW><ROW><id>1144137</id><snippet>Figure</snippet></ROW><ROW><id>1144137</id><snippet>Axes</snippet></ROW><ROW><id>1144137</id><snippet>Axes</snippet></ROW><ROW><id>1144137</id><snippet>Axis</snippet></ROW><ROW><id>1144137</id><snippet>x</snippet></ROW><ROW><id>1144137</id><snippet>y</snippet></ROW><ROW><id>1144137</id><snippet>pyplot</snippet></ROW><ROW><id>1144206</id><snippet>('a', 'b')[0] == 'a'</snippet></ROW><ROW><id>1144206</id><snippet>any()</snippet></ROW><ROW><id>1144206</id><snippet>True</snippet></ROW><ROW><id>1144206</id><snippet>&gt;&gt;&gt; t = (
...     ('dog', 'Dog'),
...     ('cat', 'Cat'),
...     ('fish', 'Fish'),
... )
&gt;&gt;&gt; def contains(w, t):
...     return any(w == e[0] for e in t)
... 
&gt;&gt;&gt; contains('fish', t)
True
&gt;&gt;&gt; contains('dish', t)
False
</snippet></ROW><ROW><id>1144405</id><snippet>def multikeysort(items, columns):
    from operator import itemgetter
    comparers = [ ((itemgetter(col[1:].strip()), -1) if col.startswith('-') else (itemgetter(col.strip()), 1)) for col in columns]  
    def comparer(left, right):
        for fn, mult in comparers:
            result = cmp(fn(left), fn(right))
            if result:
                return mult * result
        else:
            return 0
    return sorted(items, cmp=comparer)
</snippet></ROW><ROW><id>1144405</id><snippet>b = [{u'TOT_PTS_Misc': u'Utley, Alex', u'Total_Points': 96.0},
 {u'TOT_PTS_Misc': u'Russo, Brandon', u'Total_Points': 96.0},
 {u'TOT_PTS_Misc': u'Chappell, Justin', u'Total_Points': 96.0},
 {u'TOT_PTS_Misc': u'Foster, Toney', u'Total_Points': 80.0},
 {u'TOT_PTS_Misc': u'Lawson, Roman', u'Total_Points': 80.0},
 {u'TOT_PTS_Misc': u'Lempke, Sam', u'Total_Points': 80.0},
 {u'TOT_PTS_Misc': u'Gnezda, Alex', u'Total_Points': 78.0},
 {u'TOT_PTS_Misc': u'Kirks, Damien', u'Total_Points': 78.0},
 {u'TOT_PTS_Misc': u'Worden, Tom', u'Total_Points': 78.0},
 {u'TOT_PTS_Misc': u'Korecz, Mike', u'Total_Points': 78.0},
 {u'TOT_PTS_Misc': u'Swartz, Brian', u'Total_Points': 66.0},
 {u'TOT_PTS_Misc': u'Burgess, Randy', u'Total_Points': 66.0},
 {u'TOT_PTS_Misc': u'Smugala, Ryan', u'Total_Points': 66.0},
 {u'TOT_PTS_Misc': u'Harmon, Gary', u'Total_Points': 66.0},
 {u'TOT_PTS_Misc': u'Blasinsky, Scott', u'Total_Points': 60.0},
 {u'TOT_PTS_Misc': u'Carter III, Laymon', u'Total_Points': 60.0},
 {u'TOT_PTS_Misc': u'Coleman, Johnathan', u'Total_Points': 60.0},
 {u'TOT_PTS_Misc': u'Venditti, Nick', u'Total_Points': 60.0},
 {u'TOT_PTS_Misc': u'Blackwell, Devon', u'Total_Points': 60.0},
 {u'TOT_PTS_Misc': u'Kovach, Alex', u'Total_Points': 60.0},
 {u'TOT_PTS_Misc': u'Bolden, Antonio', u'Total_Points': 60.0},
 {u'TOT_PTS_Misc': u'Smith, Ryan', u'Total_Points': 60.0}]

a = multikeysort(b, ['-Total_Points', 'TOT_PTS_Misc'])
for item in a:
    print item
</snippet></ROW><ROW><id>1144597</id><snippet>import json
from pyparsing import *

data = """var txns = [
   { apples: '100', oranges: '20', type: 'SELL'}, 
   { apples: '200', oranges: '10', type: 'BUY'}]"""


def js_grammar():
    key = Word(alphas).setResultsName("key")
    value = QuotedString("'").setResultsName("value")
    pair = Group(key + Literal(":").suppress() + value)
    object_ = nestedExpr("{", "}", delimitedList(pair, ","))
    array = nestedExpr("[", "]", delimitedList(object_, ","))
    return array + StringEnd()

JS_GRAMMAR = js_grammar()

def parse(js):
    return JS_GRAMMAR.parseString(js[len("var txns = "):])[0]

def to_dict(object_):
    return dict((p.key, p.value) for p in object_)

result = [
    {"transaction": to_dict(object_)}
    for object_ in parse(data)]
print json.dumps(result)
</snippet></ROW><ROW><id>1144597</id><snippet>[{"transaction": {"type": "SELL", "apples": "100", "oranges": "20"}},
 {"transaction": {"type": "BUY", "apples": "200", "oranges": "10"}}]
</snippet></ROW><ROW><id>1144726</id><snippet>setattr</snippet></ROW><ROW><id>1144726</id><snippet>setattr(self, 'wavelength', wavelength_val)
</snippet></ROW><ROW><id>1144726</id><snippet>self.wavelength = wavelength_val
</snippet></ROW><ROW><id>1144726</id><snippet>for variable in self.variable_list:
       var_type,var_text_ctrl,var_name = variable
       if var_type == 'f' :
           setattr(self, var_name, var_text_ctrl.GetValue())
</snippet></ROW><ROW><id>1144987</id><snippet>path, dirs, files = walktoo('/home/damon/walktemp/%s' % path)
</snippet></ROW><ROW><id>1144987</id><snippet>walktoo</snippet></ROW><ROW><id>1144987</id><snippet>path</snippet></ROW><ROW><id>1144987</id><snippet>dirs</snippet></ROW><ROW><id>1144987</id><snippet>files</snippet></ROW><ROW><id>1144987</id><snippet>walktoo</snippet></ROW><ROW><id>1144987</id><snippet>walktoo()</snippet></ROW><ROW><id>1144987</id><snippet>next()</snippet></ROW><ROW><id>1144987</id><snippet>walkdeep()</snippet></ROW><ROW><id>1144987</id><snippet>walktoo()</snippet></ROW><ROW><id>1144987</id><snippet>for path, dirs, files in walktoo(...):
    # do something
</snippet></ROW><ROW><id>1145032</id><snippet>&lt;</snippet></ROW><ROW><id>1145032</id><snippet>&lt;</snippet></ROW><ROW><id>1145032</id><snippet>&lt;</snippet></ROW><ROW><id>1145032</id><snippet>xml.sax.saxutils.escape</snippet></ROW><ROW><id>1145032</id><snippet>&gt;&gt;&gt; from xml.sax.saxutils import escape
&gt;&gt;&gt; escape("&lt;fail/&gt;")
'&lt;fail/&gt;'
</snippet></ROW><ROW><id>1145418</id><snippet># ...
("^foo/(.*)$", "foo"), # or whatever
# ...
</snippet></ROW><ROW><id>1145418</id><snippet>fields = paramPassedInAccordingToThatUrl.split('/')
</snippet></ROW><ROW><id>1145434</id><snippet>import os
import stat

BUF_SIZE = 4096
size = os.stat("large_file")[stat.ST_SIZE]
chunk_size = size // N 
# or simply set a fixed chunk size based on your free disk space
c = 0

in_ = open("large_file", "r+")

while size &gt; 0:
    in_.seek(-min(size, chunk_size), 2)
    # now you have to find a safe place to split the file at somehow
    # just read forward until you found one
    ...
    old_pos = in_.tell()
    with open("small_chunk%2d" % (c, ), "w") as out:
        b = in_.read(BUF_SIZE)
        while len(b) &gt; 0:
            out.write(b)
            b = in_.read(BUF_SIZE)
    in_.truncate(old_pos)
    size = old_pos
    c += 1
</snippet></ROW><ROW><id>1145434</id><snippet>flush</snippet></ROW><ROW><id>1145611</id><snippet>zip_safe = False</snippet></ROW><ROW><id>1145725</id><snippet>c:\My App\MyApp.exe
c:\My App\Microsoft.VC90.CRT\Microsoft.VC90.CRT.manifest
c:\My App\Microsoft.VC90.CRT\msvcr90.dll
</snippet></ROW><ROW><id>1145777</id><snippet>Py_InspectFlag</snippet></ROW><ROW><id>1145777</id><snippet>Py_InteractiveFlag</snippet></ROW><ROW><id>1145777</id><snippet>int Py_InspectFlag; /* Needed to determine whether to exit at SystemError */
/* snip */
static void
handle_system_exit(void)
{
    PyObject *exception, *value, *tb;
    int exitcode = 0;

    if (Py_InspectFlag)
    	/* Don't exit if -i flag was given. This flag is set to 0
    	 * when entering interactive mode for inspecting. */
    	return;
    /* snip */
}
</snippet></ROW><ROW><id>1145777</id><snippet>SystemExit</snippet></ROW><ROW><id>1145777</id><snippet>int Py_InteractiveFlag; /* Needed by Py_FdIsInteractive() below */
/* snip */
/*
 * The file descriptor fd is considered ``interactive'' if either
 *   a) isatty(fd) is TRUE, or
 *   b) the -i flag was given, and the filename associated with
 *      the descriptor is NULL or "&lt;stdin&gt;" or "???".
 */
int
Py_FdIsInteractive(FILE *fp, const char *filename)
{
    if (isatty((int)fileno(fp)))
    	return 1;
    if (!Py_InteractiveFlag)
    	return 0;
    return (filename == NULL) ||
           (strcmp(filename, "&lt;stdin&gt;") == 0) ||
           (strcmp(filename, "???") == 0);
}
</snippet></ROW><ROW><id>1145777</id><snippet>-i</snippet></ROW><ROW><id>1145777</id><snippet>PYTHONINSPECT</snippet></ROW><ROW><id>1145777</id><snippet>PYTHONINSPECT</snippet></ROW><ROW><id>1145820</id><snippet>storm.locals</snippet></ROW><ROW><id>1145820</id><snippet>components.storm.locals</snippet></ROW><ROW><id>1145820</id><snippet>__name__</snippet></ROW><ROW><id>1145820</id><snippet>storm.locals</snippet></ROW><ROW><id>1145820</id><snippet>locals</snippet></ROW><ROW><id>1145820</id><snippet>properties</snippet></ROW><ROW><id>1145820</id><snippet>storm.locals</snippet></ROW><ROW><id>1145820</id><snippet>from properties import Bool
</snippet></ROW><ROW><id>1145848</id><snippet>class ref:
    def __init__(self, obj): self.obj = obj
    def get(self):    return self.obj
    def set(self, obj):      self.obj = obj

a = ref([1, 2])
b = a
print a.get()  # =&gt; [1, 2]
print b.get()  # =&gt; [1, 2]

b.set(2)
print a.get()  # =&gt; 2
print b.get()  # =&gt; 2
</snippet></ROW><ROW><id>1146404</id><snippet>user PATH == u
machine PATH == m
%PATH% == m;u

&gt; setx PATH %PATH%;new

Calling setx sets the USER path by default, hence now:
user PATH == m;u;new
machine PATH == m
%PATH% == m;m;u;new
</snippet></ROW><ROW><id>1146404</id><snippet>from os import system, environ
import win32con
from win32gui import SendMessage
from _winreg import (
    CloseKey, OpenKey, QueryValueEx, SetValueEx,
    HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE,
    KEY_ALL_ACCESS, KEY_READ, REG_EXPAND_SZ, REG_SZ
)

def env_keys(user=True):
    if user:
        root = HKEY_CURRENT_USER
        subkey = 'Environment'
    else:
        root = HKEY_LOCAL_MACHINE
        subkey = r'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'
    return root, subkey


def get_env(name, user=True):
    root, subkey = env_keys(user)
    key = OpenKey(root, subkey, 0, KEY_READ)
    try:
        value, _ = QueryValueEx(key, name)
    except WindowsError:
        return ''
    return value


def set_env(name, value):
    key = OpenKey(HKEY_CURRENT_USER, 'Environment', 0, KEY_ALL_ACCESS)
    SetValueEx(key, name, 0, REG_EXPAND_SZ, value)
    CloseKey(key)
    SendMessage(
        win32con.HWND_BROADCAST, win32con.WM_SETTINGCHANGE, 0, 'Environment')


def remove(paths, value):
    while value in paths:
        paths.remove(value)


def unique(paths):
    unique = []
    for value in paths:
        if value not in unique:
            unique.append(value)
    return unique


def prepend_env(name, values):
    for value in values:
        paths = get_env(name).split(';')
        remove(paths, '')
        paths = unique(paths)
        remove(paths, value)
        paths.insert(0, value)
        set_env(name, ';'.join(paths))


def prepend_env_pathext(values):
    prepend_env('PathExt_User', values)
    pathext = ';'.join([
        get_env('PathExt_User'),
        get_env('PathExt', user=False)
    ])
    set_env('PathExt', pathext)



set_env('Home', '%HomeDrive%%HomePath%')
set_env('Docs', '%HomeDrive%%HomePath%\docs')
set_env('Prompt', '$P$_$G$S')

prepend_env('Path', [
    r'%SystemDrive%\cygwin\bin', # Add cygwin binaries to path
    r'%HomeDrive%%HomePath%\bin', # shortcuts and 'pass-through' bat files
    r'%HomeDrive%%HomePath%\docs\bin\mswin', # copies of standalone executables
])

# allow running of these filetypes without having to type the extension
prepend_env_pathext(['.lnk', '.exe.lnk', '.py'])
</snippet></ROW><ROW><id>1146654</id><snippet>Py_NoSiteFlag = 1</snippet></ROW><ROW><id>1146654</id><snippet>PyInitialize</snippet></ROW><ROW><id>1147754</id><snippet>class Urlregex(db.Model):
    """
    the data field is structured as a newline separated record list
    and each record is a space separated list of regex's and 
    dispatch key. Example of one such record

    domain_tld: google.com
    data:
        ^(.*)google.com/search(.*) google-search

    """
    domain_tld = db.StringProperty()
    data = db.TextProperty()

class Urldispatch(db.Model):
    urlkey = db.StringProperty()
    data = db.TextProperty()
</snippet></ROW><ROW><id>1147791</id><snippet>python setup.py
</snippet></ROW><ROW><id>1147840</id><snippet>/* get sys.modules dict */
PyObject* sys_mod_dict PyImport_GetModuleDict();
/* get the __main__ module object */
PyObject* main_mod PyMapping_GetItemString(sys_mod_dict, "__main__");
/* call the class inside the __main__ module */
PyObject* instance = PyObject_CallMethod(main_mod, "MyClass", "");
</snippet></ROW><ROW><id>1147840</id><snippet>instance</snippet></ROW><ROW><id>1148039</id><snippet>import logging, logging.handlers
from django.conf import settings

LOGGING_INITIATED = False
LOGGER_NAME = 'project_logger'

def init_logging():
    logger = logging.getLogger(LOGGER_NAME)
    logger.setLevel(logging.INFO)
    handler = logging.handlers.TimedRotatingFileHandler(settings.LOG_FILENAME, when = 'midnight')
    formatter = logging.Formatter(LOG_MSG_FORMAT)
    handler.setFormatter(formatter)
    logger.addHandler(handler)

if not LOGGING_INITIATED:
    LOGGING_INITIATED = True
    init_logging()
</snippet></ROW><ROW><id>1148039</id><snippet>settings.py</snippet></ROW><ROW><id>1148039</id><snippet>LOG_FILENAME = '/path/to/log/file/in/development/environment
</snippet></ROW><ROW><id>1148039</id><snippet>production.py</snippet></ROW><ROW><id>1148039</id><snippet>from settings import *
LOG_FILENAME = '/path/to/log/file/in/production/environment'
</snippet></ROW><ROW><id>1148126</id><snippet>self.setDaemon(True)</snippet></ROW><ROW><id>1148126</id><snippet>__init__</snippet></ROW><ROW><id>1148126</id><snippet>self.start()</snippet></ROW><ROW><id>1148126</id><snippet>self.daemon = True</snippet></ROW><ROW><id>1148609</id><snippet>cx_Oracle</snippet></ROW><ROW><id>1148609</id><snippet>Connection</snippet></ROW><ROW><id>1148710</id><snippet>global SQLConnection
global cursor
</snippet></ROW><ROW><id>1148843</id><snippet>i</snippet></ROW><ROW><id>1148843</id><snippet>class klass(object):
    pass

for i in [1,2]:
    def f(self, i=i):
        print(i)
    setattr(klass, 'f' + str(i), f)
</snippet></ROW><ROW><id>1148843</id><snippet>class klass(object):
    pass

def fmaker(i):
    def f(self):
        print(i)
    return f

for i in [1,2]:
    setattr(klass, 'f' + str(i), fmaker(i))
</snippet></ROW><ROW><id>1149264</id><snippet>pid = os.fork()
if pid:
    # we are the parent, continue on
    print "This runs in a separate process from the else clause."

else:
    #child runs browser then quits.
    webbrowser.open_new(url)
    print "Exiting..."
    sys.exit()
</snippet></ROW><ROW><id>1149272</id><snippet>__new__</snippet></ROW><ROW><id>1149272</id><snippet>class point(object):
    memo = {}
    def __new__(cls, x, y):
        if (x, y) in cls.memo:         # if it already exists, 
            return cls.memo[(x, y)]    # return the existing instance
        else:                          # otherwise, 
            newPoint = object.__new__(cls) # create it, 
            newPoint.x = x             # initialize it, as you would in __init__
            newPoint.y = y             
            cls.memo[(x, y)] = newPoint # memoize it, 
            return newPoint            # and return it!
</snippet></ROW><ROW><id>1149336</id><snippet>connect</snippet></ROW><ROW><id>1149336</id><snippet>def connect(self, receiver, sender=None, weak=True, dispatch_uid=None)
</snippet></ROW><ROW><id>1149336</id><snippet>dispatch_uid</snippet></ROW><ROW><id>1149336</id><snippet>dispatch_uid</snippet></ROW><ROW><id>1149336</id><snippet>dispatch_uid</snippet></ROW><ROW><id>1149336</id><snippet>dispatch_uid</snippet></ROW><ROW><id>1149336</id><snippet>connect</snippet></ROW><ROW><id>1149997</id><snippet>with</snippet></ROW><ROW><id>1149997</id><snippet>__exit__</snippet></ROW><ROW><id>1149997</id><snippet>with</snippet></ROW><ROW><id>1149997</id><snippet>try:
    with file("hello.txt") as input_file:
        for line in input_file:
            if "hello" not in line:
                 raise ValueError("Every line must contain 'hello'!")
except IOError:
    print "Damnit, couldn't open the file."
except:
    raise
else:
    print "Everything went fine!"
</snippet></ROW><ROW><id>1150166</id><snippet>META</snippet></ROW><ROW><id>1150166</id><snippet>request</snippet></ROW><ROW><id>1150166</id><snippet>request.META['foo']</snippet></ROW><ROW><id>1150166</id><snippet>assert False</snippet></ROW><ROW><id>1150166</id><snippet>DEBUG=True</snippet></ROW><ROW><id>1150166</id><snippet>request</snippet></ROW><ROW><id>1150272</id><snippet>self.memberlist</snippet></ROW><ROW><id>1150272</id><snippet>self.memberlist[someindexA], self.memberlist[someindexB] = self.memberlist[someindexB], self.memberlist[someindexA]
</snippet></ROW><ROW><id>1150272</id><snippet>L = self.memberlist
L[someindexA], L[someindexB] = L[someindexB], L[someindexA]
</snippet></ROW><ROW><id>1150272</id><snippet>self.memberlist</snippet></ROW><ROW><id>1150272</id><snippet>&gt;=0</snippet></ROW><ROW><id>1150272</id><snippet>def slicer(a, b):
  return slice(a, b+cmp(b,a), b-a), slice(b, a+cmp(a,b), a-b)

back, forth = slicer(someindexA, someindexB)
self.memberlist[back] = self.memberlist[forth]
</snippet></ROW><ROW><id>1150272</id><snippet>+cmp</snippet></ROW><ROW><id>1150423</id><snippet>HTTPConnection.connect</snippet></ROW><ROW><id>1150423</id><snippet>socket.create_connection</snippet></ROW><ROW><id>1150423</id><snippet>sock</snippet></ROW><ROW><id>1150423</id><snippet>sock.connect</snippet></ROW><ROW><id>1150423</id><snippet>sock.bind</snippet></ROW><ROW><id>1150423</id><snippet>sock.connect</snippet></ROW><ROW><id>1150423</id><snippet>import socket
true_socket = socket.socket
def bound_socket(*a, **k):
    sock = true_socket(*a, **k)
    sock.bind((sourceIP, 0))
    return sock
socket.socket = bound_socket
</snippet></ROW><ROW><id>1150423</id><snippet>urllib2</snippet></ROW><ROW><id>1150423</id><snippet>socket.socket = true_socket</snippet></ROW><ROW><id>1150423</id><snippet>socket.create_connection</snippet></ROW><ROW><id>1150423</id><snippet>connect</snippet></ROW><ROW><id>1150423</id><snippet>create_connection</snippet></ROW><ROW><id>1150586</id><snippet>getattr</snippet></ROW><ROW><id>1150586</id><snippet>p.pcp = getattr(row, "LPPDR#")
</snippet></ROW><ROW><id>1150586</id><snippet>setattr(p, "&amp;)(@#$@!!~%&amp;", "Hello World!")
print getattr(p, "&amp;)(@#$@!!~%&amp;")  # prints "Hello World!"
</snippet></ROW><ROW><id>1150586</id><snippet>SELECT LPPDR# AS LPPDR ...
</snippet></ROW><ROW><id>1150746</id><snippet>httppost.addHeader("Referer", referer);
</snippet></ROW><ROW><id>1150746</id><snippet>import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpRequestInterceptor;
import org.apache.http.HttpRequest;
import org.apache.http.HttpException;
import org.apache.http.NameValuePair;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.HttpClient;
import org.apache.http.protocol.HttpContext;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.impl.client.DefaultHttpClient;

import java.util.ArrayList;
import java.util.List;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class HttpClientTest
{
    public static void main(String[] args) throws Exception
    {
        // initialize some variables
        String referer = "URL of referring web page goes here";
        String submitUrl = "https URL of form action goes here";
        List&lt;NameValuePair&gt; formparams = new ArrayList&lt;NameValuePair&gt;();
        formparams.add(new BasicNameValuePair("firstName", "John"));
        formparams.add(new BasicNameValuePair("lastName", "Doe"));

        // set up httppost
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");
        HttpPost httppost = new HttpPost(submitUrl);
        httppost.setEntity(entity);

        // add referer
        httppost.addHeader("Referer", referer);

        // create httpclient
        DefaultHttpClient httpclient = new DefaultHttpClient();

        // execute the request
        HttpResponse response = httpclient.execute(httppost);

        // display the response body
        HttpEntity responseEntity = response.getEntity();
        OutputStream out = new ByteArrayOutputStream();
        responseEntity.writeTo(out);
        System.out.println(out);
    }
}
</snippet></ROW><ROW><id>1150943</id><snippet>is</snippet></ROW><ROW><id>1150943</id><snippet>.func_code.co_consts</snippet></ROW><ROW><id>1151260</id><snippet>@property</snippet></ROW><ROW><id>1151260</id><snippet>class Base(object):

    @property
    def example(self):
        raise NotImplementedError("Subclasses should implement this!")
</snippet></ROW><ROW><id>1151260</id><snippet>NotImplementedError</snippet></ROW><ROW><id>1151260</id><snippet>b = Base()
print b.example
</snippet></ROW><ROW><id>1151508</id><snippet>def get_object_votes(self, obj, all=False):
    """
    Get a dictionary mapping vote to votecount
    """
    object_id = obj._get_pk_val()
    ctype = ContentType.objects.get_for_model(obj)
    queryset = self.filter(content_type=ctype, object_id=object_id)

    if not all:
        queryset = queryset.filter(is_archived=False) # only pick active votes

    queryset = queryset.values('vote')
    queryset = queryset.annotate(vcount=Count("vote")).order_by()

    votes = {}

    for count in queryset:
        votes[count['vote']] = count['vcount']

    return votes
</snippet></ROW><ROW><id>1151705</id><snippet>class hashabledict(dict):
    def __hash__(self):
        return hash(tuple(sorted(self.items())))
</snippet></ROW><ROW><id>1151900</id><snippet>tkMessageBox</snippet></ROW><ROW><id>1151900</id><snippet>askquestion()</snippet></ROW><ROW><id>1152106</id><snippet>using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Reflection;

namespace ConsoleApplication2

{

    class Program

    {
        static void Main(string[] args)

        {

              Type pythonServer;
              object pythonObject;
              pythonServer = Type.GetTypeFromProgID("PythonDemos.Utilities");
              pythonObject = Activator.CreateInstance(pythonServer);

        }
    }
}   `
</snippet></ROW><ROW><id>1152353</id><snippet>class foo(object):
    c = 0
    def __init__(self):
        self.next = self.next2

    def __iter__(self):
        return self

    def next(self):
        if self.c == 5: raise StopIteration
        self.c += 1
        return 1

    def next2(self):
        if self.c == 5: raise StopIteration
        self.c += 1
        return 2

it = iter(foo())
# Outputs: &lt;bound method foo.next2 of &lt;__main__.foo object at 0xb7d5030c&gt;&gt;
print it.next
# 2
print it.next()
# 1?!
for x in it:
    print x
</snippet></ROW><ROW><id>1152353</id><snippet>tp_iternext</snippet></ROW><ROW><id>1152353</id><snippet>class IteratorWrapper2(object):
    def __init__(self, otheriter):
        self.wrapped_iter_next = otheriter.next
    def __iter__(self):
        return self
    def next(self):
        return self.wrapped_iter_next()

for j in IteratorWrapper2(iter([1, 2, 3])):
    print j
</snippet></ROW><ROW><id>1152490</id><snippet>import re

def rematch(pattern, inp):
    matcher = re.compile(pattern)
    matches = matcher.match(inp)
    if matches:
        yield matches

if __name__ == '__main__':
    for m in rematch("(\d+)g", "123g"):
        print(m.group(1))
</snippet></ROW><ROW><id>1152499</id><snippet>$ easy_install -U Sphinx
</snippet></ROW><ROW><id>1153182</id><snippet>indexOf</snippet></ROW><ROW><id>1153182</id><snippet>href.index('/')</snippet></ROW><ROW><id>1153182</id><snippet>href.find('/')</snippet></ROW><ROW><id>1153182</id><snippet>find</snippet></ROW><ROW><id>1153182</id><snippet>-1</snippet></ROW><ROW><id>1153182</id><snippet>index</snippet></ROW><ROW><id>1153182</id><snippet>ValueError</snippet></ROW><ROW><id>1153182</id><snippet>index</snippet></ROW><ROW><id>1153442</id><snippet>Popen.terminate</snippet></ROW><ROW><id>1153442</id><snippet>.kill</snippet></ROW><ROW><id>1153461</id><snippet>import re
splitterForIndexing = re.compile(r"(?:[a-zA-Z0-9\-,]+[a-zA-Z0-9\-])|(?:[,.])")
source = "Hello. 1-methyl-4-phenylpyridinium is ultra-bad. However, 1-methyl-4-phenyl-1,2,3,6-tetrahydropyridine is worse."
print "\n".join( splitterForIndexing.findall(source))
</snippet></ROW><ROW><id>1153461</id><snippet>"""
Hello
.
1-methyl-4-phenylpyridinium
is
ultra-bad
.
However
,
1-methyl-4-phenyl-1,2,3,6-tetrahydropyridine
is
worse
.
"""
</snippet></ROW><ROW><id>1153461</id><snippet>import re
splitterForIndexing = re.compile(r"(?:[a-zA-Z]+)|(?:[a-zA-Z0-9][a-zA-Z0-9\-(),]+[a-zA-Z0-9\-()])|(?:[,.-])")
source = "Hello. 1-methyl-4-phenylpyridinium is ultra-bad. However, 1-methyl-4-phenyl-1,(2,3),6-tetrahydropyridine is worse."
print "\n".join( splitterForIndexing.findall(source))
</snippet></ROW><ROW><id>1153461</id><snippet>"""
Hello
.
1-methyl-4-phenylpyridinium
is
ultra
-
bad
.
However
,
1-methyl-4-phenyl-1,(2,3),6-tetrahydropyridine
is
worse
.
"""
</snippet></ROW><ROW><id>1153635</id><snippet>%</snippet></ROW><ROW><id>1154440</id><snippet>from mercurial import ui, hg
from mercurial.node import hex

repo = hg.repository('/path/to/repo/root', ui.ui())
fctx = repo.filectx('/path/to/file', 'tip')
hexnode = hex(fctx.node())
</snippet></ROW><ROW><id>1154440</id><snippet>   repo = hg.repository(ui.ui(), '/path/to/repo/root' )
</snippet></ROW><ROW><id>1154521</id><snippet>&gt;&gt;&gt; l = [[]] * 10
&gt;&gt;&gt; l
[[], [], [], [], [], [], [], [], [], []]
&gt;&gt;&gt; l[0].append(1)
&gt;&gt;&gt; l
[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]
&gt;&gt;&gt; l = [[] for i in range(10)]
&gt;&gt;&gt; l[0].append(1)
&gt;&gt;&gt; l
[[1], [], [], [], [], [], [], [], [], []]
</snippet></ROW><ROW><id>1154736</id><snippet>%WINDIR%\WinSxS</snippet></ROW><ROW><id>1154736</id><snippet>%WINDIR%\WinSxS\Manifests</snippet></ROW><ROW><id>1154736</id><snippet>setup.py</snippet></ROW><ROW><id>1154736</id><snippet>&lt;dependency&gt;
    &lt;dependentAssembly&gt;
        &lt;assemblyIdentity
            type="win32"
            name="Microsoft.VC90.CRT"
            version="9.0.30729.4918"
            processorArchitecture="X86"
            publicKeyToken="1fc8b3b9a1e18e3b"
            language="*"
        /&gt;
    &lt;/dependentAssembly&gt;
&lt;/dependency&gt;
</snippet></ROW><ROW><id>1154736</id><snippet>&lt;dependency&gt;</snippet></ROW><ROW><id>1154736</id><snippet>version</snippet></ROW><ROW><id>1154736</id><snippet>publicKeyToken</snippet></ROW><ROW><id>1155092</id><snippet>&lt;Python_Source&gt;/Modules/Setup
</snippet></ROW><ROW><id>1155092</id><snippet>&lt;Python_Source&gt;/Modules/Setup.dist
</snippet></ROW><ROW><id>1155092</id><snippet>Setup</snippet></ROW><ROW><id>1155092</id><snippet>README</snippet></ROW><ROW><id>1155092</id><snippet>./configure LDFLAGS="-static -static-libgcc" CPPFLAGS="-static"
</snippet></ROW><ROW><id>1155092</id><snippet>Modules/Setup</snippet></ROW><ROW><id>1155092</id><snippet>*static*
</snippet></ROW><ROW><id>1155092</id><snippet>make 2&amp;&gt;1 | grep 'renaming'
</snippet></ROW><ROW><id>1155407</id><snippet>
    def view1(request):
       import sqlalchemy
       data = sqlalchemy.complex_join_magic(...)
       ...
       payload = {'data': data, ...}
       return render_to_response('template', payload, ...)
</snippet></ROW><ROW><id>1155448</id><snippet>class CommonInfo(models.Model):
    ...
    class Meta:
        abstract = True
        ordering = ['name']

class Student(CommonInfo):
    ...
    class Meta(CommonInfo.Meta):
        db_table = 'student_info'
</snippet></ROW><ROW><id>1155647</id><snippet>sub</snippet></ROW><ROW><id>1155647</id><snippet>[start, end]</snippet></ROW><ROW><id>1155647</id><snippet>start</snippet></ROW><ROW><id>1155647</id><snippet>end</snippet></ROW><ROW><id>1155647</id><snippet>&gt;&gt;&gt; sentence = 'Mary had a little lamb'
&gt;&gt;&gt; sentence.count('a')
4
</snippet></ROW><ROW><id>1155805</id><snippet>re.findall</snippet></ROW><ROW><id>1155805</id><snippet>def getLongestSequenceSize(search_str, polymer_str):
    matches = re.findall(r'(?:\b%s\b\s?)+' % search_str, polymer_str)
    longest_match = max(matches)
    return longest_match.count(search_str)
</snippet></ROW><ROW><id>1155805</id><snippet>polymer_str</snippet></ROW><ROW><id>1155805</id><snippet>re.finditer</snippet></ROW><ROW><id>1155805</id><snippet>def getLongestSequenceSize(search_str, polymer_str):
    longest_match = ''
    for match in re.finditer(r'(?:\b%s\b\s?)+' % search_str, polymer_str):
        if len(match.group(0)) &gt; len(longest_match):
            longest_match = match.group(0)
    return longest_match.count(search_str)
</snippet></ROW><ROW><id>1155805</id><snippet>findall</snippet></ROW><ROW><id>1155805</id><snippet>finditer</snippet></ROW><ROW><id>1155805</id><snippet>finditer</snippet></ROW><ROW><id>1155892</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;rs:data xmlns="http://example.com" xmlns:rs="http://example.com/rs" xmlns:z="http://example.com/z"&gt;
  &lt;z:row Attribute1="1" Attribute2="1" /&gt;
  &lt;z:row Attribute1="2" Attribute2="2" /&gt;
  &lt;z:row Attribute1="3" Attribute2="3" /&gt;
  &lt;z:row Attribute1="4" Attribute2="4" /&gt;
  &lt;z:row Attribute1="5" Attribute2="5" /&gt;
  &lt;z:row Attribute1="6" Attribute2="6" /&gt;
&lt;/rs:data&gt;
</snippet></ROW><ROW><id>1155892</id><snippet>ElementTree.parse("r.xml").getroot().findall('{http://example.com/z}row')
# =&gt; [&lt;Element {http://example.com/z}row at 551ee0&gt;, &lt;Element {http://example.com/z}row at 551c60&gt;, &lt;Element {http://example.com/z}row at 551f08&gt;, &lt;Element {http://example.com/z}row at 551be8&gt;, &lt;Element {http://example.com/z}row at 551eb8&gt;, &lt;Element {http://example.com/z}row at 551f30&gt;]
</snippet></ROW><ROW><id>1155923</id><snippet># coding: latin1
</snippet></ROW><ROW><id>1155923</id><snippet>&gt;&gt;&gt; s = u'ééé'.encode('latin1') # a string you may get from the database
&gt;&gt;&gt; s.decode('latin1')
u'\xe9\xe9\xe9'
</snippet></ROW><ROW><id>1156048</id><snippet>import traceback

def f():
    g()

def g():
    for line in traceback.format_stack():
        print line.strip()

f()

# Prints:
# File "so-stack.py", line 10, in &lt;module&gt;
#     f()
# File "so-stack.py", line 4, in f
#     g()
# File "so-stack.py", line 7, in g
#     for line in traceback.format_stack():
</snippet></ROW><ROW><id>1156048</id><snippet>traceback.print_stack()
</snippet></ROW><ROW><id>1156048</id><snippet>traceback.print_stack(file=sys.stdout)
</snippet></ROW><ROW><id>1156048</id><snippet>traceback.format_stack()</snippet></ROW><ROW><id>1156114</id><snippet>map()</snippet></ROW><ROW><id>1156114</id><snippet>data = [['a','b'], ['a','c'], ['b','d']]
search = 'c'
for sublist in data:
    if sublist[1] == search:
        print "Found it!", sublist
        break
# Prints: Found it! ['a', 'c']
</snippet></ROW><ROW><id>1156114</id><snippet>['b''d']</snippet></ROW><ROW><id>1156507</id><snippet>year = member("1", "2") + digit*3
month = either("Jan", "Feb", "Mar")
day = digit*2
hour_mins = digit*2 + ":" + digit*2

date = month + " " + day + ", " + year + ", " + hour_mins
</snippet></ROW><ROW><id>1156507</id><snippet>DateR = date.compile()
</snippet></ROW><ROW><id>1156541</id><snippet>random.seed()</snippet></ROW><ROW><id>1156541</id><snippet>/dev/random</snippet></ROW><ROW><id>1156722</id><snippet>f = open("mdata.txt")

data_dict = {}
section = None
data_for_section = ""
for line in f:
    line = line.strip() #remove whitespace at start and end

    if section != None and (line[0] == "*" or line == "///"):
        # if we've just finished a section, put whatever we got into the data dict
        data_dict[section] = [bit for bit in data_for_section.split(",") if bit != ""]

    if line[0] == "*":
        # "*" denotes the start of a new section, probably, so remember the name
        section = line [2:]
        data_for_section = ""
        continue
    data_for_section += line

f.close()
#got the data, now for some output
print "loaded file. Found headings: %s"%(", ".join(data_dict.keys()))

for key in data_dict.keys():
    if len(data_dict[key])&gt;5:
        print key, ": array of %i entries"%len(data_dict[key])
    else:
        print key, ": ", data_dict[key]
</snippet></ROW><ROW><id>1156722</id><snippet>startingPosition = float(data_dict["Starting position"][0])
data_list_of_floats = map(float, data_dict["Data"])
</snippet></ROW><ROW><id>1157012</id><snippet>[instance.ticker for instance in Ticker.query.all()]
</snippet></ROW><ROW><id>1157012</id><snippet>Ticker.query.filter_by(ticker=new_ticker_value).first()
</snippet></ROW><ROW><id>1157012</id><snippet>if Ticker.query.filter_by(ticker=new_ticker_value).first() is None:
    Ticker(ticker=new_ticker_value)
    session.commit()
</snippet></ROW><ROW><id>1157160</id><snippet>&gt;&gt;&gt; x = [1,2,3,2,2,2,3,4]
&gt;&gt;&gt; filter(lambda a: a != 2, x)
[1, 3, 3, 4]
</snippet></ROW><ROW><id>1157160</id><snippet>&gt;&gt;&gt; list(filter((2).__ne__, x))
[1, 3, 3, 4]
</snippet></ROW><ROW><id>1157753</id><snippet>surface.h</snippet></ROW><ROW><id>1157753</id><snippet>#define BLEND_MULT(sR, sG, sB, sA, dR, dG, dB, dA) \
    dR = (dR &amp;&amp; sR) ? (dR * sR) &gt;&gt; 8 : 0;          \
    dG = (dG &amp;&amp; sG) ? (dG * sG) &gt;&gt; 8 : 0;          \
    dB = (dB &amp;&amp; sB) ? (dB * sB) &gt;&gt; 8 : 0;
</snippet></ROW><ROW><id>1157753</id><snippet>new_val = old_dest * old_source / 256
</snippet></ROW><ROW><id>1157753</id><snippet>new_val = old_dest * old_source / 255
</snippet></ROW><ROW><id>1157753</id><snippet>255 / 256</snippet></ROW><ROW><id>1157753</id><snippet>1</snippet></ROW><ROW><id>1157753</id><snippet>255 * 255 == 255</snippet></ROW><ROW><id>1157753</id><snippet>1</snippet></ROW><ROW><id>1157755</id><snippet>&lt;html&gt;
 &lt;body&gt;
  &amp; == &amp; in HTML
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>1157755</id><snippet>&amp;</snippet></ROW><ROW><id>1157755</id><snippet>&amp;</snippet></ROW><ROW><id>1157755</id><snippet>&lt;html&gt;
 &lt;body&gt;
  {{ msg }}
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>1157755</id><snippet>def view(request) :
  msg = "&amp; == &amp; in HTML"
</snippet></ROW><ROW><id>1157755</id><snippet>def view(request) :
  msg = '&lt;img src="http://example.com/pretty.jpg" /&gt;This picture is very pretty'
</snippet></ROW><ROW><id>1157755</id><snippet>&lt;html&gt;
 &lt;body&gt;
  {{ msg|safe }}
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW></DATA>