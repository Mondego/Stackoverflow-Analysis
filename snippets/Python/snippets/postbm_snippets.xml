<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>9116604</id><snippet>order_by()</snippet></ROW><ROW><id>9116604</id><snippet>books_w_author_count = Book.objects.annotate(num_authors=Count('authors'))

# just a filter by number of objects
books_w_author_count.filter(num_authors__gt=1)

# just ordering on the count
books_w_author_count.order_by('num_authors')

class Author(modules.Model):
   # ...

class Book(models.Model):
   # ...
   authors = models.ManyToManyField(Author)
</snippet></ROW><ROW><id>9116824</id><snippet>[[range(0, j) for j in range(3, i)] for i in range(5, 10)]
</snippet></ROW><ROW><id>9116824</id><snippet>&gt;&gt;&gt; pprint.pprint([[range(0, j) for j in range(3, i)] for i in range(5, 10)])
[[[0, 1, 2], [0, 1, 2, 3]],
 [[0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]],
 [[0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5]],
 [[0, 1, 2],
  [0, 1, 2, 3],
  [0, 1, 2, 3, 4],
  [0, 1, 2, 3, 4, 5],
  [0, 1, 2, 3, 4, 5, 6]],
 [[0, 1, 2],
  [0, 1, 2, 3],
  [0, 1, 2, 3, 4],
  [0, 1, 2, 3, 4, 5],
  [0, 1, 2, 3, 4, 5, 6],
  [0, 1, 2, 3, 4, 5, 6, 7]]]
</snippet></ROW><ROW><id>9116824</id><snippet>x = [range(0,i) for i in [j for j in [range(3,k) for k in [k for k in range(5,10)]]]]
# equivalent to
a, b, c, x = [], [], [], []
for k in range(5, 10):
    a.append(k)
for k in a:
    b.append(range(3, k))
for j in b:
    c.append(j)
for i in c:
    x.append(range(0, i))
</snippet></ROW><ROW><id>9116824</id><snippet>x</snippet></ROW><ROW><id>9116824</id><snippet>b</snippet></ROW><ROW><id>9116824</id><snippet>c</snippet></ROW><ROW><id>9116824</id><snippet>i</snippet></ROW><ROW><id>9116824</id><snippet>range(0, i)</snippet></ROW><ROW><id>9116824</id><snippet>for</snippet></ROW><ROW><id>9116824</id><snippet>x = [[range(0, j) for j in range(3, i)] for i in range(5, 10)]
# equivalent to
x = []
for i in range(5, 10):
    a = []
    for j in range(3, i):
        a.append(range(0, j)):
    x.append(a)
</snippet></ROW><ROW><id>9117172</id><snippet>def get_object(self, request, object_id):
    obj = super(YourModelAdmin, self).get_object(request, object_id)
    for key, value in request.GET.items():
        setattr(obj, key, value)
    return obj
</snippet></ROW><ROW><id>9118108</id><snippet>SWIG</snippet></ROW><ROW><id>9118108</id><snippet>Boost.Python</snippet></ROW><ROW><id>9118213</id><snippet>import numpy as np
from pylab import * 

data = { (3, 3): 1.7314, (3,4):-6.99, (4, 3):-17.3, (4, 4):-100.0 }
matrix = np.zeros((5, 5))
for (x, y), z in data.items():
    matrix[y,x] = z

imshow(matrix[3:, 3:], origin='lower', interpolation='none', extent=[2.5, 4.5, 2.5, 4.5])
show()
</snippet></ROW><ROW><id>9118213</id><snippet>extent</snippet></ROW><ROW><id>9118213</id><snippet>None</snippet></ROW><ROW><id>9118213</id><snippet>(-0.5, numcols-0.5, -0.5, numrows-0.5)</snippet></ROW><ROW><id>9118213</id><snippet>origin</snippet></ROW><ROW><id>9118213</id><snippet>interpolation='none'</snippet></ROW><ROW><id>9118348</id><snippet>defaultdict</snippet></ROW><ROW><id>9118348</id><snippet>from collections import defaultdict

def find_family(names):
    d = defaultdict(list)
    for fn, ln in names:
        d[ln].append(fn)
    return dict((k,v) for (k,v) in d.items() if len(v)&gt;1)

names = set([('John', 'Lee'), ('Mary', 'Miller'), ('Paul', 'Ryan'), 
             ('Bob', 'Ryan'), ('Tina', 'Lee'), ('Bob', 'Smith')])
print find_family(names)
</snippet></ROW><ROW><id>9118348</id><snippet>{'Lee': ['Tina', 'John'], 'Ryan': ['Bob', 'Paul']}
</snippet></ROW><ROW><id>9118895</id><snippet>def special_search(my_dict, pos, min, max):
    result = {}
    for item, tuples in my_dict.items():
        matches = []
        for i, t in enumerate(tuples):
            if min &lt;= t[pos] &lt;= max:
                matches.append(i)
        if matches:
            result[item] = tuple(matches)
    return result
</snippet></ROW><ROW><id>9118895</id><snippet>&gt;&gt;&gt; foo = {"item1": ((0.1, 0.03 , 0.7), (0.01, 0.01, 0.02), (0.3, 0.4, 0.05)),
...        "item2": ((0.5, 0.2 , 0.01), (0.1, 0.3, 1.0), (0.4, 0.2, 0.8))}
&gt;&gt;&gt; special_search(foo, 2, 0.7, 1.0)
{'item2': (1, 2), 'item1': (0,)}
</snippet></ROW><ROW><id>9119185</id><snippet>import random
for d1 in range(21):
    if table1[d1]: #1 evaluates to true in python
       table2[d1] = random.expovariate(x)
    else:
       table2[d1] = random.expovariate(y)
</snippet></ROW><ROW><id>9119356</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; stuff=OrderedDict({'age':26,'name':'Freddie Mercury', 'city':'Vladivostok'})
&gt;&gt;&gt; stuff[1]='first'
&gt;&gt;&gt; print stuff
OrderedDict([('city', 'Vladivostok'), ('age', 26), ('name', 'Freddie Mercury'), (1, 'first')])
&gt;&gt;&gt; stuff[2]='second'
&gt;&gt;&gt; print stuff
OrderedDict([('city', 'Vladivostok'), ('age', 26), ('name', 'Freddie Mercury'), (1, 'first'), (2, 'second')])
&gt;&gt;&gt; stuff[3]='wtf'
&gt;&gt;&gt; print stuff
OrderedDict([('city', 'Vladivostok'), ('age', 26), ('name', 'Freddie Mercury'), (1, 'first'), (2, 'second'), (3, 'wtf')])
</snippet></ROW><ROW><id>9119538</id><snippet>vmin</snippet></ROW><ROW><id>9119538</id><snippet>vmax</snippet></ROW><ROW><id>9119538</id><snippet>imshow</snippet></ROW><ROW><id>9119538</id><snippet>imshow</snippet></ROW><ROW><id>9119538</id><snippet>plt.imshow(k, vmin=0, vmax=1)
</snippet></ROW><ROW><id>9119538</id><snippet>0</snippet></ROW><ROW><id>9119538</id><snippet>1</snippet></ROW><ROW><id>9119742</id><snippet>int</snippet></ROW><ROW><id>9119742</id><snippet>&gt;&gt;&gt; "100" &lt;= "79"
True
&gt;&gt;&gt; 100 &lt;= 79
False
&gt;&gt;&gt; int("100") &lt;= int("79")
False
</snippet></ROW><ROW><id>9119764</id><snippet>from sqlalchemy import Integer, Table, Column, ForeignKey, \
    create_engine, String, select
from sqlalchemy.orm import Session, relationship
from sqlalchemy.ext.declarative import declarative_base

Base= declarative_base()

friendship = Table(
    'friendships', Base.metadata,
    Column('friend_a_id', Integer, ForeignKey('users.id'), 
                                        primary_key=True),
    Column('friend_b_id', Integer, ForeignKey('users.id'), 
                                        primary_key=True)
)


class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    name = Column(String)

    # this relationship is used for persistence
    friends = relationship("User", secondary=friendship, 
                           primaryjoin=id==friendship.c.friend_a_id,
                           secondaryjoin=id==friendship.c.friend_b_id,
    )

    def __repr__(self):
        return "User(%r)" % self.name

# this relationship is viewonly and selects across the union of all
# friends
friendship_union = select([
                        friendship.c.friend_a_id, 
                        friendship.c.friend_b_id
                        ]).union(
                            select([
                                friendship.c.friend_b_id, 
                                friendship.c.friend_a_id]
                            )
                    ).alias()
User.all_friends = relationship('User',
                       secondary=friendship_union,
                       primaryjoin=User.id==friendship_union.c.friend_a_id,
                       secondaryjoin=User.id==friendship_union.c.friend_b_id,
                       viewonly=True) 

e = create_engine("sqlite://",echo=True)
Base.metadata.create_all(e)
s = Session(e)

u1, u2, u3, u4, u5 = User(name='u1'), User(name='u2'), \
                    User(name='u3'), User(name='u4'), User(name='u5')

u1.friends = [u2, u3]
u4.friends = [u2, u5]
u3.friends.append(u5)
s.add_all([u1, u2, u3, u4, u5])
s.commit()

print u2.all_friends
print u5.all_friends
</snippet></ROW><ROW><id>9120082</id><snippet>win32clipboard.SetClipboardText(data)</snippet></ROW><ROW><id>9120082</id><snippet>win32clipboard.SetClipboardData(win32clipboard.CF_TEXT, data)</snippet></ROW><ROW><id>9120216</id><snippet>&gt;&gt;&gt; from construct import BitStruct, BitField
&gt;&gt;&gt; sample = "\xff\x01\x01\x01"
&gt;&gt;&gt; c = BitStruct("foo", BitField("status", 8), BitField("i", 24))
&gt;&gt;&gt; c.parse(sample)
Container({'status': 255, 'i': 65793})
</snippet></ROW><ROW><id>9120216</id><snippet>\x01\x01\x01</snippet></ROW><ROW><id>9120216</id><snippet>65536 + 256 + 1 = 65793</snippet></ROW><ROW><id>9120241</id><snippet>client.ssl = True</snippet></ROW><ROW><id>9120540</id><snippet>for row in reader:
    # Now to skip the mentioned columns just don't use those in your sql insert statement
    # for example column 25 is row[24]
    # Instead, put a blank in your SQL
    row[25]=""
    row[26]=""
    row[27]=""

    sql_insert = "INSERT INTO table_name   VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);"  
    cursor.execute(sql_insert , row)
</snippet></ROW><ROW><id>9120929</id><snippet>imshow</snippet></ROW><ROW><id>9120929</id><snippet>ax.axis('image')</snippet></ROW><ROW><id>9120929</id><snippet>limits = axes.axis()</snippet></ROW><ROW><id>9120929</id><snippet>axes.axis(limits)</snippet></ROW><ROW><id>9120929</id><snippet>axes.autoscale(False)</snippet></ROW><ROW><id>9120929</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, ax = plt.subplots()
ax.imshow(np.random.random((10,10)))
ax.plot(range(11))
plt.show()
</snippet></ROW><ROW><id>9120929</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, ax = plt.subplots()
ax.imshow(np.random.random((10,10)))
ax.autoscale(False)
ax.plot(range(11))
plt.show()
</snippet></ROW><ROW><id>9121285</id><snippet>def function200(pricelist):
    pricelist[0] = 50
</snippet></ROW><ROW><id>9121285</id><snippet>constList = ['foo']
</snippet></ROW><ROW><id>9121285</id><snippet>import moduleA
print constVal
# ['foo']
constVal.append('bar')
</snippet></ROW><ROW><id>9121618</id><snippet>validate</snippet></ROW><ROW><id>9121618</id><snippet>executor.map</snippet></ROW><ROW><id>9121618</id><snippet>(h, pci_ids, verbose)</snippet></ROW><ROW><id>9121618</id><snippet>def validate(arg):
    h, pci_ids, verbose = arg
    return validate_hostname(h, pci_ids, verbose)

with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
    for result in executor.map(validate, [(host, pci_ids, options.verbose)
                                          for host in get_all_hostnames()]):
</snippet></ROW><ROW><id>9121845</id><snippet>line.strip(' \n' '\r') 
</snippet></ROW><ROW><id>9121845</id><snippet>line</snippet></ROW><ROW><id>9121845</id><snippet>line = line.strip(' \n' '\r') 
</snippet></ROW><ROW><id>9121845</id><snippet>int</snippet></ROW><ROW><id>9121845</id><snippet>int</snippet></ROW><ROW><id>9121845</id><snippet>int</snippet></ROW><ROW><id>9121845</id><snippet>line = [int(num) for num in line]
</snippet></ROW><ROW><id>9121845</id><snippet>line = map(int, line)
</snippet></ROW><ROW><id>9121845</id><snippet>line.strip(' \n' '\r') 
line = line.split(',')
line = [int(num) for num in line]
Network.append(line)
</snippet></ROW><ROW><id>9121845</id><snippet>Network.append(map(int, line.split(',')))
</snippet></ROW><ROW><id>9121845</id><snippet>Node</snippet></ROW><ROW><id>9121845</id><snippet>index</snippet></ROW><ROW><id>9121845</id><snippet>&gt;&gt;&gt; class Node(object):
    baseindex = '@'  # sign before "A"
    def __init__(self):
        cls = self.__class__
        cls.baseindex = chr(ord(cls.baseindex) + 1)
        self.index = self.baseindex
        self.previousNode = 'invalid_node'
        self.distFromSource = 'infinity'
        self.visited = False


&gt;&gt;&gt; a = Node()
&gt;&gt;&gt; a.index
'A'
&gt;&gt;&gt; b = Node()
&gt;&gt;&gt; b.index
'B'
&gt;&gt;&gt; a.index
'A'
</snippet></ROW><ROW><id>9121845</id><snippet>baseindex</snippet></ROW><ROW><id>9121845</id><snippet>index</snippet></ROW><ROW><id>9121845</id><snippet>Node</snippet></ROW><ROW><id>9121845</id><snippet>as_list()</snippet></ROW><ROW><id>9121845</id><snippet>&gt;&gt;&gt; class Node(object):
    baseindex = '@'  # sign before "A"
    def __init__(self):
        cls = self.__class__
        cls.baseindex = chr(ord(cls.baseindex) + 1)
        self.index = self.baseindex
        self.previousNode = 'invalid_node'
        self.distFromSource = 'infinity'
        self.visited = False
    def as_list(self):
        return [self.index, self.previousNode, self.distFromSource,
            self.visited]


&gt;&gt;&gt; a = Node()
&gt;&gt;&gt; a.index
'A'
&gt;&gt;&gt; a.as_list()
['A', 'invalid_node', 'infinity', False]
</snippet></ROW><ROW><id>9121845</id><snippet>NodeTable.append(Node().as_list())
</snippet></ROW><ROW><id>9121845</id><snippet>Node</snippet></ROW><ROW><id>9121966</id><snippet>%</snippet></ROW><ROW><id>9121966</id><snippet>&amp;</snippet></ROW><ROW><id>9121966</id><snippet>r'(?i)^%(regex)s/%(regex)s-(\d+)/%(regex)s/%(regex)s-(\d+)/$' % {'regex': r'([-.%\w]+)'}
</snippet></ROW><ROW><id>9121966</id><snippet>&gt;&gt;&gt; pattern = re.compile(r'(?i)^%(regex)s/%(regex)s-(\d+)/%(regex)s/%(regex)s-(\d+)/$' % {'regex': r'([-.%\w]+)'})
&gt;&gt;&gt; s = 'united-states/boulder-21781/tool-%26-anchor/mulligan-21/'
&gt;&gt;&gt; match = pattern.match(s)
&gt;&gt;&gt; match.groups()
('united-states', 'boulder', '21781', 'tool-%26-anchor', 'mulligan', '21')
</snippet></ROW><ROW><id>9121966</id><snippet>(?i)</snippet></ROW><ROW><id>9121966</id><snippet>\w</snippet></ROW><ROW><id>9121966</id><snippet>(?i)</snippet></ROW><ROW><id>9121966</id><snippet>'(?i)...' % {'regex': '...'}</snippet></ROW><ROW><id>9121966</id><snippet>'...' % {'regex': '(?i)...'}</snippet></ROW><ROW><id>9121966</id><snippet>[\.\-\_\w]</snippet></ROW><ROW><id>9121966</id><snippet>[-.%\w]</snippet></ROW><ROW><id>9121966</id><snippet>\w</snippet></ROW><ROW><id>9121966</id><snippet>.</snippet></ROW><ROW><id>9121966</id><snippet>\w</snippet></ROW><ROW><id>9121966</id><snippet>%(regex)s</snippet></ROW><ROW><id>9121966</id><snippet>%(regex)s-(\d+)</snippet></ROW><ROW><id>9121991</id><snippet>def animal_name(animal):
  # here be dragons
  return some_string

cat = 5
animal = cat
print animal_name(animal)  # prints "cat"
</snippet></ROW><ROW><id>9121991</id><snippet>cat = 5</snippet></ROW><ROW><id>9121991</id><snippet>sys</snippet></ROW><ROW><id>9121991</id><snippet>gc</snippet></ROW><ROW><id>9121991</id><snippet>&gt;&gt;&gt; animal_name(cat)
['n_sequence_fields', 'ST_GID', 'cat', 'SIGTRAP', 'n_fields', 'EIO']
&gt;&gt;&gt; animal_name(dog)
['SIGQUIT', 'ST_NLINK', 'n_unnamed_fields', 'dog', '_abc_negative_cache_version', 'ESRCH']
&gt;&gt;&gt; animal_name(fish)
['E2BIG', '__plen', 'fish', 'ST_ATIME', '__egginsert', '_abc_negative_cache_version', 'SIGBUS', 'S_IRWXO']
</snippet></ROW><ROW><id>9121991</id><snippet>dict</snippet></ROW><ROW><id>9122849</id><snippet>import sys
from PyQt4 import QtGui

app = QtGui.QApplication(sys.argv)
widget = QtGui.QWidget()

unicode_font = QtGui.QLabel(u"Unicode Font: H\u2082O")
unicode_font.setStyleSheet("font-family: 'Arial Unicode MS', Arial, sans-serif; font-size: 15px;") 

normal_font = QtGui.QLabel(u"Normal Font: H\u2082O")
normal_font.setStyleSheet("font-family: Arial, sans-serif; font-size: 15px;")


layout = QtGui.QVBoxLayout()
layout.addWidget(unicode_font)
layout.addWidget(normal_font)
widget.setLayout(layout)
widget.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>9123555</id><snippet>foo.py</snippet></ROW><ROW><id>9123555</id><snippet>foo</snippet></ROW><ROW><id>9123555</id><snippet>import</snippet></ROW><ROW><id>9123555</id><snippet>__import__</snippet></ROW><ROW><id>9123555</id><snippet>foo_bar = __import__("foo bar")
</snippet></ROW><ROW><id>9123555</id><snippet>foo bar.py</snippet></ROW><ROW><id>9123555</id><snippet>foo_bar</snippet></ROW><ROW><id>9123555</id><snippet>import</snippet></ROW><ROW><id>9123603</id><snippet>self.dft</snippet></ROW><ROW><id>9123603</id><snippet>numpy</snippet></ROW><ROW><id>9123603</id><snippet>data3D[i, j, k]</snippet></ROW><ROW><id>9123603</id><snippet>data3D[:, j, k]</snippet></ROW><ROW><id>9123603</id><snippet>data3D[i, :, k]</snippet></ROW><ROW><id>9123603</id><snippet>data3D[:, :, k]</snippet></ROW><ROW><id>9123751</id><snippet>clean</snippet></ROW><ROW><id>9123751</id><snippet>class MyForm(forms.Form):
    def clean(self):
         return dict([(k, v.strip().upper()) for k, v in self.cleaned_data.items()])
</snippet></ROW><ROW><id>9123751</id><snippet>def clean(self):
     result = {}
     for k, v in self.cleaned_data.items():
         try:
             result[k] = v.strip().upper()
         except AttributeError:
             result[k] = v
     return result     
</snippet></ROW><ROW><id>9123751</id><snippet>isinstance(value, basestring)</snippet></ROW><ROW><id>9123949</id><snippet>data = collections.defaultdict(list)
for i in my_list:
    data[i['name']].append(i['score'])
output = [{'name': i, 'score': max(j)} for i,j in data.items()]
</snippet></ROW><ROW><id>9123949</id><snippet>[{'score': 2, 'name': 'Baz'},
 {'score': 3, 'name': 'Foo'},
 {'score': 3, 'name': 'Bar'}]
</snippet></ROW><ROW><id>9123961</id><snippet>from ctypes import windll
if windll.user32.OpenClipboard(None):
    windll.user32.EmptyClipboard()
    windll.user32.CloseClipboard()
</snippet></ROW><ROW><id>9124375</id><snippet>  def save():
     obj,created = Cours.objects.get_or_create(titre=self.titre, date=old_date)
     if created:
         obj.date = self.date
         obj.save()
</snippet></ROW><ROW><id>9124375</id><snippet>IntegrityError</snippet></ROW><ROW><id>9124375</id><snippet>try:
  obj,created = Cours.objects.get_or_create(titre=self.titre, date=old_date)
     if created:
        obj.date = self.date
        obj.save()
except IntegrityError:
   # do something
</snippet></ROW><ROW><id>9124556</id><snippet>COMMAND2='ssh -o StrictHostKeyChecking=no -t %s@%s "su - root -c \"chown root:root /tmp/id_rsa.pub; chmod 600 /tmp/id_rsa.pub; chown root:root /tmp/sshd_config; mkdir /root/.ssh; chown root:root /root/.ssh; chmod 700 /root/.ssh; mv /tmp/id_rsa.pub /root/.ssh/authorized_keys; mv /tmp/sshd_config /etc/ssh/; service sshd reload\""' % (USER, HOST)

COMMAND2="""ssh -o StrictHostKeyChecking=no -t %s@%s "su - root -c \"chown root:root /tmp/id_rsa.pub; chmod 600 /tmp/id_rsa.pub; chown root:root /tmp/sshd_config; mkdir /root/.ssh; chown root:root /root/.ssh; chmod 700 /root/.ssh; mv /tmp/id_rsa.pub /root/.ssh/authorized_keys; mv /tmp/sshd_config /etc/ssh/; service sshd reload\"" """ % (USER, HOST)

COMMAND2="ssh -o StrictHostKeyChecking=no -t %s@%s 'su - root -c \"chown root:root /tmp/id_rsa.pub; chmod 600 /tmp/id_rsa.pub; chown root:root /tmp/sshd_config; mkdir /root/.ssh; chown root:root /root/.ssh; chmod 700 /root/.ssh; mv /tmp/id_rsa.pub /root/.ssh/authorized_keys; mv /tmp/sshd_config /etc/ssh/; service sshd reload\"'" % (USER, HOST)
</snippet></ROW><ROW><id>9124556</id><snippet>COMMAND2='''ssh -o StrictHostKeyChecking=no -t %s@%s "su - root -c '
    chown root:root /tmp/id_rsa.pub
    chmod 600 /tmp/id_rsa.pub
    chown root:root /tmp/sshd_config
    mkdir /root/.ssh
    chown root:root /root/.ssh
    chmod 700 /root/.ssh
    mv /tmp/id_rsa.pub /root/.ssh/authorized_keys
    mv /tmp/sshd_config /etc/ssh/
    service sshd reload'"''' % (USER, HOST)
</snippet></ROW><ROW><id>9124614</id><snippet>__in</snippet></ROW><ROW><id>9124614</id><snippet>c = C.objects.filter(todays_treatment=medication, patient__in=b)
</snippet></ROW><ROW><id>9124614</id><snippet>b</snippet></ROW><ROW><id>9124614</id><snippet>C.patient</snippet></ROW><ROW><id>9124719</id><snippet>crontab -e</snippet></ROW><ROW><id>9124719</id><snippet>cron</snippet></ROW><ROW><id>9124837</id><snippet>pkg_resources.get_distribution("my_package").version</snippet></ROW><ROW><id>9124837</id><snippet>python3 setup.py egg_info -b -$(hg heads --template "{node|short}" `hg branch`) sdist
</snippet></ROW><ROW><id>9124837</id><snippet>python3 setup.py egg_info -b -$(hg heads --template "{node|short}" `hg branch`) setup
</snippet></ROW><ROW><id>9125105</id><snippet>f = open('filename')
fileList = f.readlines()
</snippet></ROW><ROW><id>9125105</id><snippet>fileList.pop(0)
fileList.pop(0)
</snippet></ROW><ROW><id>9125105</id><snippet>outFileContents = {} # This will be a dict, where number -&gt; content of test_number.dat
for outFileName in range(1,41): #outFileName will be the number going after the _ in your filename
    outFileContents[outFileName] = []
    for n in range(40): # Counting through the time blocks
        currentRowIndex = (42 * n) + outFileName # 42 to account for the Time = and blank row
        outFileContents[outFileName].append(fileList[currentRowIndex])
</snippet></ROW><ROW><id>9125563</id><snippet>     column = 0 #The column you want to sort by
     reader = list(csv.reader(open('input.xsl')))
     reader.sort(key=lambda x: x[column])
     writer = csv.writer(open('output.xsl', 'w'))
     writer.writerows(reader)
</snippet></ROW><ROW><id>9125563</id><snippet>    import xlwt
    from xlrd import open_workbook

    target_column = 0

    book = open_workbook('input.xls', formatting_info=True)
    sheet = book.sheets()[0]
    data = [sheet.row_values(i) for i in xrange(sheet.nrows)]
    labels = data[0]
    data = data[1:]
    data.sort(key=lambda x: x[target_column])

    wbk = xlwt.Workbook()
    sheet = wbk.add_sheet(sheet.name)

    for idx, label in enumerate(labels):
         sheet.write(0, idx, label)

    for idx_r, row in enumerate(data):
        for idx_c, value in enumerate(row):
            sheet.write(idx_r+1, idx_c, value)

    wbk.save('result.xls')
</snippet></ROW><ROW><id>9125857</id><snippet>posters = Poster.objects.filter(city__country=country)
poster_cities = {}
for poster in posters:
    if city not in poster_cities:
        poster_cities[city] = []
    poster_cities[city].append(poster)
</snippet></ROW><ROW><id>9125857</id><snippet>for city in sorted(poster_cities.keys()):
    city_posters = poster_cities[city]
    city_poster_count = len(poster_cities[city])
</snippet></ROW><ROW><id>9125909</id><snippet>attr_name</snippet></ROW><ROW><id>9125909</id><snippet>def addAttrs(attr_names):
  def deco(cls):
    for attr_name in attr_names:
      def getAttr(self, attr_name=attr_name):
        return getattr(self, "_" + attr_name)
      def setAttr(self, value, attr_name=attr_name):
        setattr(self, "_" + attr_name, value)
      prop = property(getAttr, setAttr)
      setattr(cls, attr_name, prop)
      setattr(cls, "_" + attr_name, None) # Default value for that attribute
    return cls
  return deco

@addAttrs(['x', 'y'])
class MyClass(object):
  pass
</snippet></ROW><ROW><id>9125909</id><snippet>&gt;&gt;&gt; a = MyClass()
&gt;&gt;&gt; a.x = 5
&gt;&gt;&gt; print a._x, a._y
5 None
&gt;&gt;&gt; a.y = 8
&gt;&gt;&gt; print a._x, a._y
5 8
</snippet></ROW><ROW><id>9125958</id><snippet>mutagen</snippet></ROW><ROW><id>9126214</id><snippet>  mapping = dict.fromkeys([1, 2, 3], [])
</snippet></ROW><ROW><id>9126214</id><snippet>[]</snippet></ROW><ROW><id>9126214</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>9126447</id><snippet>&gt;&gt;&gt; '[[0]*2]*2'
'[[0]*2]*2'

&gt;&gt;&gt; `[[0]*2]*2`
'[[0, 0], [0, 0]]'
</snippet></ROW><ROW><id>9126447</id><snippet>'[[0, 0], [0, 0]]'</snippet></ROW><ROW><id>9126447</id><snippet>[[0]*2]*2</snippet></ROW><ROW><id>9126447</id><snippet>[[1,0],[1,0]]</snippet></ROW><ROW><id>9126447</id><snippet>[[1,0],[0,0]]</snippet></ROW><ROW><id>9126863</id><snippet>Demo</snippet></ROW><ROW><id>9126863</id><snippet>new_package</snippet></ROW><ROW><id>9126863</id><snippet>new_package.temp</snippet></ROW><ROW><id>9126863</id><snippet>new_package/
├── __init__.py
│   #   from .temp import Demo
└── temp.py
    #   class Demo:
    #       pass
</snippet></ROW><ROW><id>9127257</id><snippet>class RegularShell(cmd.Cmd):
    do_search(self, arg):
        ...
    do_retrieve(self, arg):
        ...

class AdminShell(RegularShell):
    do_update(self, arg):
        ...
</snippet></ROW><ROW><id>9127459</id><snippet>#!/bin/python

data = """6          3
    12603        235          1
    37210        363          3
    64618        348          2
        4          4
    80073        560          1
    80560        504          1
    80875        807          1
    80917        636          1"""

lists = [line.split() for line in data.split("\n")]

print lists
</snippet></ROW><ROW><id>9127459</id><snippet>data.splitlines()</snippet></ROW><ROW><id>9127459</id><snippet>data.split("\n")</snippet></ROW><ROW><id>9127587</id><snippet># set up database cursor...
sql   = "INSERT foo (id, text) VALUES (%d, %s)"
elem  = ElementTree.fromstring(xmlstr)
nodes = elem.findall('xmlnode')
for row in nodes:
    valueList = (row.get('id'), row.get('text'))
    cursor.execute(sql, valueList)
</snippet></ROW><ROW><id>9127846</id><snippet>r = re.compile(r'^(?:[^\W\d_]|[\s-])+$', re.U)
</snippet></ROW><ROW><id>9127846</id><snippet>[^\W\d_]</snippet></ROW><ROW><id>9127846</id><snippet>[\s-]</snippet></ROW><ROW><id>9127849</id><snippet>newperson</snippet></ROW><ROW><id>9127849</id><snippet>newperson</snippet></ROW><ROW><id>9127849</id><snippet>newperson.py</snippet></ROW><ROW><id>9127849</id><snippet># newperson.py
class newperson():
    def __init__(self):
        self.name = ""
        self.dob = ""
</snippet></ROW><ROW><id>9127849</id><snippet>from newperson import newperson
</snippet></ROW><ROW><id>9127849</id><snippet>newperson</snippet></ROW><ROW><id>9128135</id><snippet>raw_data</snippet></ROW><ROW><id>9128135</id><snippet>data</snippet></ROW><ROW><id>9128135</id><snippet>class Thing(Base):
    __tablename__ = 'things'
    id = Column(Integer(), primary_key=True)
    raw_data = Column(String())

    @property
    def data(self):
        # add some checking here too
        return json.loads(self.raw_data)

    @data.setter
    def data(self, value):
        # dito
        self.raw_data = json.dumps(value)
</snippet></ROW><ROW><id>9128172</id><snippet>ctypes.CArgObject</snippet></ROW><ROW><id>9128172</id><snippet>ctypes.byref</snippet></ROW><ROW><id>9128172</id><snippet>adrresof</snippet></ROW><ROW><id>9128172</id><snippet>`ctypes.c_voidp</snippet></ROW><ROW><id>9128172</id><snippet>_lib.mymethod(ctypes.addressof(a))</snippet></ROW><ROW><id>9128172</id><snippet>mystruct_pointer = ctypes.POINTER(mystruct)
_lib.mymethod.argtypes = (mystruct_pointer,)
_lib.mymethod.restype = ctypes.c_int

s = mystruct()

_lib.mymethod(mystruct_pointer.from_address(ctypes.addressof(s)))
</snippet></ROW><ROW><id>9128191</id><snippet>os.system("C:\Users\Oulton\ 7z e C:\Users\Oulton\install.zip  ")
</snippet></ROW><ROW><id>9128191</id><snippet>os.system(r"C:\Users\Oulton\7z -e C:\Users\Oulton\install.zip")
</snippet></ROW><ROW><id>9128191</id><snippet>r</snippet></ROW><ROW><id>9128191</id><snippet>7z</snippet></ROW><ROW><id>9128191</id><snippet>traceback.print_exc</snippet></ROW><ROW><id>9128191</id><snippet>traceback.print_exc()</snippet></ROW><ROW><id>9128191</id><snippet>subprocess</snippet></ROW><ROW><id>9128191</id><snippet>os.system()</snippet></ROW><ROW><id>9128459</id><snippet>np.array(list(set(map(tuple, input))))
</snippet></ROW><ROW><id>9128459</id><snippet>array([[4, 5],
       [2, 3],
       [1, 1]])
</snippet></ROW><ROW><id>9128459</id><snippet>[1, 1]</snippet></ROW><ROW><id>9128459</id><snippet>from collections import Counter

np.array([k for k, v in Counter(map(tuple, input)).iteritems() if v == 1])
</snippet></ROW><ROW><id>9128459</id><snippet>array([[4, 5],
       [2, 3]])
</snippet></ROW><ROW><id>9128459</id><snippet>input=[[1,1,2], [1,1,3], [2,3,4], [4,5,5], [1,1,7]]</snippet></ROW><ROW><id>9128459</id><snippet>input=[[1,1,2], [1,1,3], [2,3,4], [4,5,5], [1,1,7]]

d = {}
for a in input:
    d.setdefault(tuple(a[:2]), []).append(a[2])
</snippet></ROW><ROW><id>9128459</id><snippet>d</snippet></ROW><ROW><id>9128459</id><snippet>{(1, 1): [2, 3, 7],
 (2, 3): [4],
 (4, 5): [5]}
</snippet></ROW><ROW><id>9128459</id><snippet>np.array([k+tuple(v) for k,v in d.iteritems() if len(v) == 1])
</snippet></ROW><ROW><id>9128459</id><snippet>array([[4, 5, 5],
       [2, 3, 4]])
</snippet></ROW><ROW><id>9128459</id><snippet>import numpy as np
input = [[1,1,3,5,6,6],[1,1,4,4,5,6],[1,3,4,5,6,7],[3,4,6,7,7,6],[1,1,4,6,88,7],[3,3,3,3,3,3],[456,6,5,343,435,5]]
d = {}
for a in input:
    d.setdefault(tuple(a[:2]), []).append(a)
np.array([v for v in d.itervalues() if len(v) == 1])
</snippet></ROW><ROW><id>9128459</id><snippet>array([[[456,   6,   5, 343, 435,   5]],
       [[  1,   3,   4,   5,   6,   7]],
       [[  3,   4,   6,   7,   7,   6]],
       [[  3,   3,   3,   3,   3,   3]]])
</snippet></ROW><ROW><id>9128512</id><snippet>import numpy as np
import matplotlib.pyplot as plt


#comment the next 2 lines to not hide top and right axis
fig = plt.figure()
ax = fig.add_subplot(111)

#uncomment next 2 lines to deal with ticks
#ax = fig.add_subplot(111)

#calculate data
x = np.arange(0.8,2.501,0.001)
y = 4*((1/x)**12 - (1/x)**6)

#plot
ax.plot(x,y)

#do not display top and right axes
#comment to deal with ticks
ax.spines["right"].set_visible(False)
ax.spines["top"].set_visible(False)

## the original answer:
## see  http://old.nabble.com/Ticks-direction-td30107742.html
#for tick in ax.xaxis.majorTicks:
#  tick._apply_params(tickdir="out")

# the OP way (better):
ax.tick_params(axis='both', direction='out')
ax.get_xaxis().tick_bottom()   # remove unneeded ticks 
ax.get_yaxis().tick_left()

plt.show()
</snippet></ROW><ROW><id>9128512</id><snippet>xtick.direction</snippet></ROW><ROW><id>9128864</id><snippet>from __future__ import division</snippet></ROW><ROW><id>9128864</id><snippet>A</snippet></ROW><ROW><id>9129035</id><snippet>address</snippet></ROW><ROW><id>9129035</id><snippet>    def lookup_allowed(self, lookup, *args, **kwargs):
        if lookup == 'address__dst':
            return True
        return super(ReportAdmin, self).lookup_allowed(lookup, args, **kwargs)
</snippet></ROW><ROW><id>9129035</id><snippet>def _filter_or_exclude(self, negate, *args, **kwargs):
    try:
        value = kwargs.pop('address__dst')
        matches = self.nearby(*map(float, value.split(',')))
        pks = [m.pk for m in matches]
        kwargs.update({ 'pk__in': pks })
    except:
        pass
    return super(ReportQuerySet, self)._filter_or_exclude(
            negate, *args, **kwargs)
</snippet></ROW><ROW><id>9129035</id><snippet>?address_dst=lat,lng,dst</snippet></ROW><ROW><id>9129707</id><snippet>'\n'</snippet></ROW><ROW><id>9129707</id><snippet>^</snippet></ROW><ROW><id>9129707</id><snippet>def getEpisode(filename):
    match = re.search(
        r'''(?ix)                 # Ignore case (i), and use verbose regex (x)
        (?:                       # non-grouping pattern
          e|x|episode|^           # e or x or episode or start of a line
          )                       # end non-grouping pattern 
        \s*                       # 0-or-more whitespaces
        (\d{2})                   # exactly 2 digits
        ''', filename)
    if match:
        return match.group(1)

tests = (
    'Series Name s01e01.avi',
    'Series Name 1x01.avi',
    'Series Name episode 01.avi',
    '01 Episode Title.avi'
    )
for filename in tests:
    print(getEpisode(filename))
</snippet></ROW><ROW><id>9129707</id><snippet>01
01
01
01
</snippet></ROW><ROW><id>9129707</id><snippet>else: return False</snippet></ROW><ROW><id>9129707</id><snippet>None</snippet></ROW><ROW><id>9129707</id><snippet>None</snippet></ROW><ROW><id>9129707</id><snippet>False</snippet></ROW><ROW><id>9129707</id><snippet>epsiode =  getEpisode(filename); if episode: ...</snippet></ROW><ROW><id>9129965</id><snippet>ThreadingMixIn</snippet></ROW><ROW><id>9129965</id><snippet>shutdown</snippet></ROW><ROW><id>9130208</id><snippet>print ' '.join(bench.cmd)</snippet></ROW><ROW><id>9130631</id><snippet>inspect</snippet></ROW><ROW><id>9130631</id><snippet>import inspect

def c():
    def a():
        frame = inspect.currentframe()
        print frame.f_back.f_locals

    def b():
        pass

    a()

c()
</snippet></ROW><ROW><id>9130631</id><snippet>frames</snippet></ROW><ROW><id>9130631</id><snippet>import sys
sys.modules['inspect'] = None
sys._getframe = None
</snippet></ROW><ROW><id>9130890</id><snippet>dates = numpy.array([datetime(2012,02,03,12,00,00), datetime(2012,02,03,15,00,00), datetime(2012,02,03,13,00,00)])
values = numpy.array([[1, 1], [3, 3], [2, 2]])
</snippet></ROW><ROW><id>9130890</id><snippet>unified = numpy.concatenate((dates.reshape(len(dates), 1), values), axis=1)
</snippet></ROW><ROW><id>9130890</id><snippet>unified = array([[2012-02-03 12:00:00, 1, 1],
                 [2012-02-03 15:00:00, 3, 3],
                 [2012-02-03 13:00:00, 2, 2]], dtype=object)
</snippet></ROW><ROW><id>9130890</id><snippet>unified = numpy.sort(unified, axis=0)
</snippet></ROW><ROW><id>9130890</id><snippet>unified[:, 0]

&gt;&gt;&gt; array([2012-02-03 12:00:00, 2012-02-03 13:00:00, 2012-02-03 15:00:00], dtype=object)

unified[:, 1:]

&gt;&gt;&gt; array([[1, 1],
           [2, 2],
           [3, 3]], dtype=object)
</snippet></ROW><ROW><id>9130890</id><snippet>   unified = numpy.sort(unified, axis=0)    
</snippet></ROW><ROW><id>9130890</id><snippet>   unified = numpy.array(sorted(unified, key= lambda x: x[0]))
</snippet></ROW><ROW><id>9130890</id><snippet>    unified = numpy.array([[datetime(2012,02,03,12,00,00), 4, 1],[datetime(2012,02,03,15,00,00), 5, 2],[datetime(2012,02,03,13,00,00), 2, 1]], dtype=object)
    &gt;&gt;&gt; unified
        array([[2012-02-03 12:00:00, 4, 1],
               [2012-02-03 15:00:00, 5, 2],
               [2012-02-03 13:00:00, 2, 1]], dtype=object)

    &gt;&gt;&gt; unified = numpy.array(sorted(unified, key=lambda x: x[0]))
    &gt;&gt;&gt; unified
        array([[2012-02-03 12:00:00, 4, 1],
               [2012-02-03 13:00:00, 2, 1],
               [2012-02-03 15:00:00, 5, 2]], dtype=object)
</snippet></ROW><ROW><id>9130986</id><snippet>flush()</snippet></ROW><ROW><id>9130986</id><snippet>seek()</snippet></ROW><ROW><id>9131157</id><snippet>Content-Type: text/html</snippet></ROW><ROW><id>9131157</id><snippet>smtplib</snippet></ROW><ROW><id>9131190</id><snippet>7z e C:\Users\Oulton\install.zip -oC:\Users\Oulton" *.shp -r</snippet></ROW><ROW><id>9131190</id><snippet>-ao (Overwrite mode) switch
Specifies the overwrite mode during extraction, to overwrite files already present on disk.
</snippet></ROW><ROW><id>9131190</id><snippet>-i</snippet></ROW><ROW><id>9131190</id><snippet>-x</snippet></ROW><ROW><id>9131190</id><snippet>7z e C:\Users\Oulton\install.zip -oC:\Users\Oulton -ir!*.shp -ir!*.mxd -ir!*.shx -ir!*.sbn -ir!*.dbf -ir!*.xml
</snippet></ROW><ROW><id>9131263</id><snippet>-mno-cygwin</snippet></ROW><ROW><id>9131308</id><snippet>if</snippet></ROW><ROW><id>9131308</id><snippet>if calendar.isleap(year):
    do_stuff
else:
   do_other_stuff
</snippet></ROW><ROW><id>9131445</id><snippet>file</snippet></ROW><ROW><id>9131445</id><snippet>import sys

def _call_for_all_streams(func_name):
    def wrapper(self, *args, **kwargs):
        result = []
        for stream in self._streams:
            func = getattr(stream, func_name)
            result.append(func(*args, **kwargs))
        return result
    return wrapper

class OStreamWrapper(object):
    def __init__(self, *streams):
        self._streams = streams

for method in filter(lambda x: not x.startswith('_'), dir(file)):
    setattr(OStreamWrapper, method, _call_for_all_streams(method))

if __name__ == '__main__':
    file1 = open("file1.txt", "w")
    file2 = open("file2.txt", "w")
    ostream = OStreamWrapper(file1, file2, sys.stdout)
    ostream.write("ECHO!")
    ostream.close()
</snippet></ROW><ROW><id>9131584</id><snippet>plot_date(dates, y1)
plot_date(dates, y2)
</snippet></ROW><ROW><id>9131930</id><snippet>re</snippet></ROW><ROW><id>9131930</id><snippet>2,</snippet></ROW><ROW><id>9131930</id><snippet>In [2]: re.search(r'(\d{2, 10})', '153')

In [4]: re.search(r'(\d{2,10})', '153')
Out[4]: &lt;_sre.SRE_Match object at 0x15c4648&gt;
</snippet></ROW><ROW><id>9131930</id><snippet>{2, 10}</snippet></ROW><ROW><id>9131930</id><snippet>In [11]: re.search(r'(\d{2, 10})', '1{2, 10}').group(0)
Out[11]: '1{2, 10}'
</snippet></ROW><ROW><id>9131986</id><snippet>catalog = getToolByName(context, 'portal_catalog')
for brain in catalog(portal_type='MyType'):
    obj = brain.getObject()
    if obj._ordering == 'unordered':
        obj.setOrdering(u'')
    order = obj.getOrdering()
    for id in obj._tree:
        if id not in order._order():
            order.notifyAdded(id)
</snippet></ROW><ROW><id>9132248</id><snippet>&gt;&gt;&gt; def neighbors(x, y):
...    return np.array([(x-1, y), (x, y-1), (x+1, y), (x, y+1)])
...
&gt;&gt;&gt; ind = zip(*np.where(x &gt; 10))
&gt;&gt;&gt; neighb = np.concatenate([neighbors(*i) for i in ind])
array([[1, 1],
       [2, 0],
       [3, 1],
       [2, 2],
       [2, 3],
       [3, 2],
       [4, 3],
       [3, 4]])
</snippet></ROW><ROW><id>9132320</id><snippet>__init__</snippet></ROW><ROW><id>9132498</id><snippet>import my_long_module_name as mlmn
import my_long_module_name.submodule

mlmn.submodule.function()
</snippet></ROW><ROW><id>9132498</id><snippet>import</snippet></ROW><ROW><id>9132506</id><snippet>import copy
B = copy.deepcopy(A)
</snippet></ROW><ROW><id>9132558</id><snippet>def makeFloor(Xmax, Ymax):
    return [[Cell(solid,None) for i in range(Xmax)]
            for j in range(Ymax)]
</snippet></ROW><ROW><id>9132562</id><snippet>&gt;&gt;&gt; my_list = range(10)
&gt;&gt;&gt; my_list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; my_list[::2]
[0, 2, 4, 6, 8]
&gt;&gt;&gt; my_list[1::2]
[1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>9132562</id><snippet>class AssignableSlice(list):
    def __setitem__(self, i, v):
        if isinstance(i, slice):
            for ii in xrange(*i.indices(len(self))):
                self[ii] = v
        else:
            super(AssignableSlice, self).__setitem__(i, v)

a = AssignableSlice(range(10))
print a
a[::2] = 3
print a
a[1::3] = 99
print a
</snippet></ROW><ROW><id>9132562</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[3, 1, 3, 3, 3, 5, 3, 7, 3, 9]
[3, 99, 3, 3, 99, 5, 3, 99, 3, 9]
</snippet></ROW><ROW><id>9132589</id><snippet>import *</snippet></ROW><ROW><id>9132589</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; start = time.time()
&gt;&gt;&gt; end = time.time()
&gt;&gt;&gt; end - start
5.504057168960571
</snippet></ROW><ROW><id>9132736</id><snippet>s = cv2.SURF()
mask = uint8(ones(gray.shape))
keypoints = s.detect(gray,mask)
</snippet></ROW><ROW><id>9132736</id><snippet>k,d = s.detect(gray,mask,False)
d = d.reshape((-1,128))
print d.shape, len(k)
</snippet></ROW><ROW><id>9132834</id><snippet>getFoo</snippet></ROW><ROW><id>9132834</id><snippet>class ClassA():
    class Foo():
        pass

    @classmethod
    def getFoo(cls):
        return cls.Foo
</snippet></ROW><ROW><id>9132994</id><snippet>from Tkinter import *
from time import time

start_time = end_time = 0
master = Tk()
e = Entry(master)
e.pack()
e.focus_set()

def key(event):
    if event.char == '\r':
        e.unbind("&lt;Key&gt;")
        return

    print "pressed", repr(event.char)
    end_time = time()
    print "measured time:", end_time-start_time

e.bind("&lt;Key&gt;", key)

start_time = time()
mainloop()
</snippet></ROW><ROW><id>9133002</id><snippet>LiveProcess</snippet></ROW><ROW><id>9133002</id><snippet>c.cmd = [c.executable] + ['-INFILE='+c_data, '-OUTPUT=OUT'] 
</snippet></ROW><ROW><id>9133002</id><snippet>c.cmd = [c.executable, '-INFILE='+c_data, '-OUTPUT=OUT'] 
</snippet></ROW><ROW><id>9133034</id><snippet>// extract uri from request
$request = explode("?", $_SERVER["REQUEST_URI"]);
$uri = explode("/", $request[0]);

// sanitize user input
foreach($_POST as $k =&gt; &amp;$v) $v = addslashes($v);

// prepare file input
foreach($_FILES as $k =&gt; $v)
{
  if (empty($k) or empty($v)) unset($_FILES[$k]);
}
</snippet></ROW><ROW><id>9133034</id><snippet>site.com?php_service/param1/param2/...
</snippet></ROW><ROW><id>9133450</id><snippet>hasattr()</snippet></ROW><ROW><id>9133450</id><snippet>def __setattr__(self, name, value):
    if hasattr(super(Clazz, self), name):
        setattr(super(Clazz, self), name, value)
    else:
        # implement *my* __setattr__
        pass
</snippet></ROW><ROW><id>9133792</id><snippet>def replaceAll(infilepath, outfilepath):
    infile = open(infilepath)
    outfile = open(outfilepath, 'w')
    for line in infile:
        outfile.write(line.replace('-', ','))
    infile.close()
    outfile.close()
</snippet></ROW><ROW><id>9133917</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; l.sort(key=itemgetter(1), reverse=True)
&gt;&gt;&gt; l
[('a', 'z'), ('b', 'z'), ('a', 'y'), ('b', 'y'), ('a', 'x'), ('b', 'x')]
</snippet></ROW><ROW><id>9133917</id><snippet>&gt;&gt;&gt; l.sort(key=itemgetter(0))
&gt;&gt;&gt; l
[('a', 'z'), ('a', 'y'), ('a', 'x'), ('b', 'z'), ('b', 'y'), ('b', 'x')]
</snippet></ROW><ROW><id>9134173</id><snippet>noun(sen)</snippet></ROW><ROW><id>9134173</id><snippet>noun(sen)</snippet></ROW><ROW><id>9134173</id><snippet>def noun(sen):
    for t in range(len(sen)):
        if (sen[t].split('/')[1].lower() == 'np'):
            w=sen[t].split('/')
            return w
    return []
</snippet></ROW><ROW><id>9134469</id><snippet>openerp.ui.tips.js</snippet></ROW><ROW><id>9134469</id><snippet>sudo find / -type f -name 'openerp.ui.tips.js'
</snippet></ROW><ROW><id>9134469</id><snippet>...

this.toolTitle = SPAN({'class': 'tipTitle'});
this.toolText = P({'class': 'tipText'});
this.toolModel = SPAN({'class': 'tipExtra'});
this.toolField = SPAN({'class': 'tipExtra'});
this. modelTitle = SPAN({'style': 'font-weight:bold;'}, _('Object')+' :: ')
this.fieldTitle = SPAN({'style': 'font-weight:bold;'}, _('Field')+' :: ')

...
</snippet></ROW><ROW><id>9134469</id><snippet>...

this.toolTitle = SPAN({'class': 'tipTitle'});
this.toolText = P({'class': 'tipText'});
this.toolModel = '';//SPAN({'class': 'tipExtra'});
this.toolField = '';//SPAN({'class': 'tipExtra'});
this. modelTitle = '';//SPAN({'style': 'font-weight:bold;'}, _('Object')+' :: ')
this.fieldTitle = '';//SPAN({'style': 'font-weight:bold;'}, _('Field')+' :: ')

...
</snippet></ROW><ROW><id>9134776</id><snippet>import sys
from PyQt4.QtGui import QPixmap, QApplication, QColor
app = QApplication(sys.argv)

# img is QImage type
img = QPixmap.grabWindow(
        QApplication.desktop().winId(),
        x=00,
        y=100,
        height=20,
        width=20,
        ).toImage()

for x in range(0,20):
    for y in range(0,20):
        c = img.pixel(x,y)
        colors = QColor(c).getRgbF()
        print "(%s,%s) = %s" % (x, y, colors)
</snippet></ROW><ROW><id>9134776</id><snippet>(0,0) = (0.60784313725490191, 0.6588235294117647, 0.70980392156862748, 1.0)
(0,1) = (0.60784313725490191, 0.6588235294117647, 0.70980392156862748, 1.0)
(0,2) = (0.61176470588235299, 0.6588235294117647, 0.71372549019607845, 1.0)
(0,3) = (0.61176470588235299, 0.66274509803921566, 0.71372549019607845, 1.0)
</snippet></ROW><ROW><id>9134820</id><snippet>if a == 0 or b == 0:
  return False

# Your actual code
</snippet></ROW><ROW><id>9134820</id><snippet>if not all([a, b]):
  return False

# Your actual code
</snippet></ROW><ROW><id>9134820</id><snippet>numpy.seterr(divide='ignore')
</snippet></ROW><ROW><id>9135166</id><snippet>class Replacement(object):

    def __init__(self, replacement):
        self.replacement = replacement
        self.matched = None
        self.replaced = None

    def __call__(self, match):
        self.matched = match.group(0)
        self.replaced = match.expand(self.replacement)
        return self.replaced

&gt;&gt;&gt; repl = Replacement('not the \\1')
&gt;&gt;&gt; re.sub('(orig.*?l)', repl, 'This is the original string.')
    'This is the not the original string.'
&gt;&gt;&gt; repl.matched
    'original'
&gt;&gt;&gt; repl.replaced
    'not the original'
</snippet></ROW><ROW><id>9135166</id><snippet>class Replacement(object):

    def __init__(self, replacement):
        self.replacement = replacement
        self.occurrences = []

    def __call__(self, match):
        matched = match.group(0)
        replaced = match.expand(self.replacement)
        self.occurrences.append((matched, replaced))
        return replaced

&gt;&gt;&gt; repl = Replacement('[\\1]')
&gt;&gt;&gt; re.sub('\s(\d)', repl, '1 2 3')
    '1[2][3]'

&gt;&gt;&gt; for matched, replaced in repl.occurrences:
   ....:     print matched, '=&gt;', replaced
   ....:     
 2 =&gt; [2]
 3 =&gt; [3]
</snippet></ROW><ROW><id>9135397</id><snippet>tw.wm_attributes("-topmost", 1)</snippet></ROW><ROW><id>9135397</id><snippet>showtip</snippet></ROW><ROW><id>9135643</id><snippet>yaml.dump(data, optional_args)</snippet></ROW><ROW><id>9135643</id><snippet>yaml.dump(dataMap, f, default_flow_style=False)
</snippet></ROW><ROW><id>9135643</id><snippet>yaml.load()</snippet></ROW><ROW><id>9135687</id><snippet>bzrlib.builtins.cmd_info
bzrlib.info.show_component_info
bzrlib.info.gather_location_info
</snippet></ROW><ROW><id>9135770</id><snippet>def __str__(self):
        from pprint import pprint
        return str((vars(self))</snippet></ROW><ROW><id>9135770</id><snippet>for i,line in enumerate(open(path+file_1,'r')):</snippet></ROW><ROW><id>9135770</id><snippet>    line=line.strip().split("|")
    if i==0:
    headers=line
if i==1:
    record=Report(line,headers)
    pprint record`
</snippet></ROW><ROW><id>9135770</id><snippet>def __str__(self):</snippet></ROW><ROW><id>9135770</id><snippet>    return "date added:   %s\nPrice:        %s\nReport:       %s\nretail price: %s\nuser:         %s" % tuple([str(i) for i in vars(self).values()])`
</snippet></ROW><ROW><id>9135778</id><snippet>count = int(raw_input("Enter number of cycles: "))
</snippet></ROW><ROW><id>9135778</id><snippet>count</snippet></ROW><ROW><id>9135778</id><snippet>1</snippet></ROW><ROW><id>9135778</id><snippet>'1'</snippet></ROW><ROW><id>9135778</id><snippet>False</snippet></ROW><ROW><id>9135778</id><snippet>while i &lt; counter:</snippet></ROW><ROW><id>9135778</id><snippet>False</snippet></ROW><ROW><id>9135778</id><snippet>i</snippet></ROW><ROW><id>9135778</id><snippet>counter</snippet></ROW><ROW><id>9135778</id><snippet>print repr(count)</snippet></ROW><ROW><id>9135778</id><snippet>count</snippet></ROW><ROW><id>9135778</id><snippet>'1'</snippet></ROW><ROW><id>9135778</id><snippet>1</snippet></ROW><ROW><id>9135989</id><snippet>datetime.strftime()</snippet></ROW><ROW><id>9135989</id><snippet>strftime()</snippet></ROW><ROW><id>9135989</id><snippet>&gt;&gt;&gt; datetime.now().strftime('mylogfile_%H_%M_%d_%m_%Y.log')
'mylogfile_08_48_04_02_2012.log'
</snippet></ROW><ROW><id>9136728</id><snippet>for line in f</snippet></ROW><ROW><id>9136728</id><snippet>line1</snippet></ROW><ROW><id>9136728</id><snippet>line</snippet></ROW><ROW><id>9136728</id><snippet>line1</snippet></ROW><ROW><id>9136728</id><snippet>line1</snippet></ROW><ROW><id>9136728</id><snippet>generated_hash</snippet></ROW><ROW><id>9136728</id><snippet>if generated_hash == Hash:</snippet></ROW><ROW><id>9136728</id><snippet>import hashlib

#Initialize an empty dictionary.  We'll add entries to this as we read the 
#dictionary file in
hash_table = {}

print('Generating hashes...')

#Using with on the file object means that it will be closed automatically
#when the block is finished
with open('dictionary.txt', 'r') as inp_file:

    for word in inp_file.readlines():

        #strip off the trailing whitespace ('\n' or '\n\r' depending on the platform)
        word = word.strip()

        #The requirement is for a salt to be prepended to the cleartext
        #dictionary word.  For each possible salt value...
        for salt in range(0,256):
            #convert the salt from an int to a string here so we don't have to
            #continually do it below
            salt = str(salt)

            #Store the hash/cleartext pair in the dictionary.  The key of the
            #dictionary is the hash and the value is the salted cleartext
            hash_table[hashlib.md5(salt+word).hexdigest()] = salt+word
</snippet></ROW><ROW><id>9136728</id><snippet>with fileobject as some_name:</snippet></ROW><ROW><id>9136728</id><snippet>if 'some_hex_hash' in hash_table: do stuff</snippet></ROW><ROW><id>9136728</id><snippet>hash_table['some_hex_hash']</snippet></ROW><ROW><id>9136743</id><snippet>&gt;&gt;&gt; l = [{'term': u'Video Blogging', 'scheme': None, 'label': None}, {'term': u'blogging', 'scheme': None, 'label': None}, {'term': u'stuff', 'scheme': None, 'label': None}, {'term': u'Videos', 'scheme': None, 'label': None}]
&gt;&gt;&gt; [a.get('term') for a in l]
[u'Video Blogging', u'blogging', u'stuff', u'Videos']
</snippet></ROW><ROW><id>9136743</id><snippet>&gt;&gt;&gt; ', '.join(a.get('term') for a in l)
u'Video Blogging, blogging, stuff, Videos'
</snippet></ROW><ROW><id>9136743</id><snippet>a.get('term')</snippet></ROW><ROW><id>9136743</id><snippet>a['term']</snippet></ROW><ROW><id>9136743</id><snippet>KeyError</snippet></ROW><ROW><id>9136743</id><snippet>term</snippet></ROW><ROW><id>9136807</id><snippet>def get_db_connection(database_name):
    return MySQLdb.connect('localhost', 'name', 'pwrd', database_name)
</snippet></ROW><ROW><id>9136807</id><snippet>db.select_db('my_new_databasename')</snippet></ROW><ROW><id>9136807</id><snippet>db</snippet></ROW><ROW><id>9136807</id><snippet>MySQLdb.connect()</snippet></ROW><ROW><id>9136825</id><snippet>sys.float_info.min</snippet></ROW><ROW><id>9136825</id><snippet>2.2250738585072014e-308</snippet></ROW><ROW><id>9136936</id><snippet>logger.info('the length of my list is %d' % len(mylist))
</snippet></ROW><ROW><id>9137345</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; f = urllib2.urlopen('http://facebook.com/')
&gt;&gt;&gt; print f.read()
</snippet></ROW><ROW><id>9137345</id><snippet>import urllib2
req = urllib2.Request('http://www.facebook.com/')
req.add_header('Referer', 'http://www.lastpage.com/')
r = urllib2.urlopen(req)
</snippet></ROW><ROW><id>9137359</id><snippet>start</snippet></ROW><ROW><id>9137359</id><snippet>subprocess.Popen('cmd /c start notepad.exe')
</snippet></ROW><ROW><id>9137359</id><snippet>subprocess.Popen('notepad.exe')
</snippet></ROW><ROW><id>9137541</id><snippet>&gt;&gt;&gt; import rpyc
&gt;&gt;&gt; def returnObject(objName, host, port):
...     conn = rpyc.connect(host, port)
...     print conn
...     attr = getattr(conn.root, 'get_' + objName)()
...     print attr
...     return conn, attr
... 
&gt;&gt;&gt; conn, share = returnObject('shared', 'localhost', 18861)
&lt;rpyc.core.protocol.Connection 'conn1' object at 0x10b0676d0&gt;
&lt;__main__.SharedClass object at 0x1091ff790&gt;
&gt;&gt;&gt; share
&lt;__main__.SharedClass object at 0x1091ff790&gt;
&gt;&gt;&gt; share.action()
</snippet></ROW><ROW><id>9137541</id><snippet>from versile.quick import *
from versile.vse.native.python import VPythonObject
VSEResolver.add_imports()

class SharedClass(object):
    def action(self):
        return u'I am doing something'

shared = SharedClass()

class Gateway(VExternal):
    @publish(show=True, ctx=False)
    def get_shared(self):
        return VPythonObject(shared)

service = VTPService(lambda: Gateway(), auth=None)
service.start()
</snippet></ROW><ROW><id>9137541</id><snippet>&gt;&gt;&gt; from versile.quick import *
&gt;&gt;&gt; VSEResolver.add_imports()
&gt;&gt;&gt; gw = VUrl.resolve('vtp://localhost/')
&gt;&gt;&gt; shared = gw.get_shared()
&gt;&gt;&gt; shared._v_activate() # required for activating as remote-python proxy
&gt;&gt;&gt; shared.action()
u'I am doing something'
&gt;&gt;&gt; gw._v_link.shutdown()
</snippet></ROW><ROW><id>9137605</id><snippet>import gdata.docs.data
import gdata.docs.client

client = gdata.docs.client.DocsClient(source='your-app')
client.api_version = "3"
client.ssl = True
client.ClientLogin("your@email.com", "password", client.source)

filePath = "/path/to/file"
newResource = gdata.docs.data.Resource(filePath, "document title")

media = gdata.data.MediaSource()
media.SetFileHandle(filePath, 'mime/type')

newDocument = client.CreateResource(newResource, create_uri=gdata.docs.client.RESOURCE_UPLOAD_URI, media=media)
</snippet></ROW><ROW><id>9137828</id><snippet>import sys
import os
from time import strftime

if len(sys.argv) != 2: # if CLi does not equal to 2 commands print
    print ("usage:progammename.py logname.ext")
    sys.exit(1)

logSys    = sys.argv[1]
newLogSys = "%s_%s.csv" % (logSys,strftime("%Y_%m_%d_ %H_%M_%S"))

with open(logSys,'rb') as log, open(newLogSys,'wb') as nL:
    nL.writelines(lineI.replace(':' if lineI[0]=='#' else ' ', ',')
                  for lineI in log)
</snippet></ROW><ROW><id>9137828</id><snippet>from time import strftime
import re

ss = ('--||  ||:|||:||--||| \r\n'
      '#10 23:30 abcdef : \r\n'
      '802 12:25 xyz  :  \r\n'
      '\r\n'
      '#:35 11:18+14:39 sunny vale : sunny sea\r\n'
      '  651454451 drh:hdb 54:1\r\n'
      '    \r\n'
      ': 541514 oi:npvert654165:8\r\n'
      '#5415:v541564zervt\r\n'
      '#     ::    \r\n'
      '#::: :::\r\n'
      ' E\r\n')

regx = re.compile('(\r?\n(?!$))|(\r?\n$)')

def smartdispl(com,smth,regx = regx):
    print '\n%s\n%s\n%s' %\
          ('{0:{fill}{align}70}'.format(' %s ' % com,fill='=',align='^'),
           '\n'.join(repr(el) for el in smth.splitlines(1)),
           '{0:{fill}{align}70}'.format('',fill='=',align='^'))

logSys = 'poiu.txt'

with open(logSys,'wb') as f:
    f.write(ss)

with open(logSys,'rb') as f:
    smartdispl('content of the file '+logSys,f.read())

newLogSys = "%s_%s.csv" % (logSys,strftime("%Y_%m_%d_ %H_%M_%S"))

with open(logSys,'rb') as log, open(newLogSys,'wb') as nL:
    nL.writelines(lineI.replace(':' if lineI[0]=='#' else ' ', ',')
                  for lineI in log)

with open(newLogSys,'rb') as f:
    smartdispl('content of the file '+newLogSys,f.read())
</snippet></ROW><ROW><id>9137828</id><snippet>==================== content of the file poiu.txt ====================
'--||  ||:|||:||--||| \r\n'
'#10 23:30 abcdef : \r\n'
'802 12:25 xyz  :  \r\n'
'\r\n'
'#:35 11:18+14:39 sunny vale : sunny sea\r\n'
'  651454451 drh:hdb 54:1\r\n'
'    \r\n'
': 541514 oi:npvert654165:8\r\n'
'#5415:v541564zervt\r\n'
'#     ::    \r\n'
'#::: :::\r\n'
' E\r\n'
======================================================================

======= content of the file poiu.txt_2012_02_07_ 00_48_55.csv ========
'--||,,||:|||:||--|||,\r\n'
'#10 23,30 abcdef , \r\n'
'802,12:25,xyz,,:,,\r\n'
'\r\n'
'#,35 11,18+14,39 sunny vale , sunny sea\r\n'
',,651454451,drh:hdb,54:1\r\n'
',,,,\r\n'
':,541514,oi:npvert654165:8\r\n'
'#5415,v541564zervt\r\n'
'#     ,,    \r\n'
'#,,, ,,,\r\n'
',E\r\n'
======================================================================
</snippet></ROW><ROW><id>9137928</id><snippet>__doc__</snippet></ROW><ROW><id>9137928</id><snippet>__doc__</snippet></ROW><ROW><id>9137928</id><snippet>help(object.attr)</snippet></ROW><ROW><id>9137928</id><snippet>help(object)</snippet></ROW><ROW><id>9137928</id><snippet>__getattr__</snippet></ROW><ROW><id>9137928</id><snippet>def __getattr__(self, attr):
    if attr == "foo":
        #function "foo" returns an integer
        return foo()
    ...
</snippet></ROW><ROW><id>9137928</id><snippet>__getattr__</snippet></ROW><ROW><id>9137928</id><snippet>def __getattr__(self, attr):
    if attr == "foo":
        #function "foo" returns an (whatever object)
        result = foo()
        res_type = type(result)
        wrapper_dict = res_type.__dict__.copy()
        wrapper_dict["__doc__"] = foo.__doc__ #(or "&lt;desired documentation for this attribute&gt;")
        new_type = type(res_type.__name__, (res_type,), wrapper_dict)
        # I will leave it as an "exercise for the reader" if the 
        # constructor of the returned object can't take an object
        # of the same instance (python native data types, like int, float, list, can)
        new_result = new_type(result)
    elif ...: 
        ...
    return new_result
</snippet></ROW><ROW><id>9137928</id><snippet>__getattr__</snippet></ROW><ROW><id>9137988</id><snippet>else</snippet></ROW><ROW><id>9137988</id><snippet>for</snippet></ROW><ROW><id>9137988</id><snippet>if</snippet></ROW><ROW><id>9138098</id><snippet>Popen</snippet></ROW><ROW><id>9138098</id><snippet>shell</snippet></ROW><ROW><id>9138642</id><snippet>def foo(x):
    if x == 6:
        print 'six'
    elif x == 3:
        print 'three'
    yield
    if x &gt; 4:
        print 'greater than four'
    else:
        print 'not greater than four'
    yield
</snippet></ROW><ROW><id>9138642</id><snippet>&gt;&gt;&gt; f = foo(6)
&gt;&gt;&gt; f
&lt;generator object foo at 0x1004b25a0&gt;
&gt;&gt;&gt; next(f)
six
&gt;&gt;&gt; next(f)
greater than four
&gt;&gt;&gt; next(f)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>9138965</id><snippet>y</snippet></ROW><ROW><id>9138965</id><snippet>len(MAP_HEIGHT) - 1</snippet></ROW><ROW><id>9138965</id><snippet>range</snippet></ROW><ROW><id>9138965</id><snippet>MAP_HEIGHT = len(MAP_FILE)</snippet></ROW><ROW><id>9138965</id><snippet>MAP_FILE</snippet></ROW><ROW><id>9138965</id><snippet>y</snippet></ROW><ROW><id>9139097</id><snippet>itertools.starmap</snippet></ROW><ROW><id>9139097</id><snippet>import itertools

def func1(a, b, c):
    return a+b+c

print list(itertools.starmap(func1, [[1,2,3],[4,5,6],[7,8,9]]))
</snippet></ROW><ROW><id>9139097</id><snippet>[6, 15, 24]
</snippet></ROW><ROW><id>9139234</id><snippet>x</snippet></ROW><ROW><id>9139234</id><snippet>x=sys.argv[1]</snippet></ROW><ROW><id>9139234</id><snippet>str</snippet></ROW><ROW><id>9139234</id><snippet>import sys
x = sys.argv[1]
print type(x)
</snippet></ROW><ROW><id>9139234</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>9139234</id><snippet>&gt;&gt;&gt; '0'&gt;1
True
</snippet></ROW><ROW><id>9139234</id><snippet>&gt;&gt;&gt; int('0')&gt;1
False
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9139349</id><snippet>\s</snippet></ROW><ROW><id>9139349</id><snippet>\w</snippet></ROW><ROW><id>9139765</id><snippet>stdout</snippet></ROW><ROW><id>9139765</id><snippet>with</snippet></ROW><ROW><id>9139765</id><snippet>import sys
from contextlib import contextmanager

@contextmanager
def redirected(stdout):
    saved_stdout = sys.stdout
    sys.stdout = open(stdout, 'w')
    yield
    sys.stdout = saved_stdout

with redirected(stdout='file.txt'):
    print 'Hello'
print 'Hello again'
</snippet></ROW><ROW><id>9139923</id><snippet>QDoubleValidator</snippet></ROW><ROW><id>9139923</id><snippet>QIntValidator</snippet></ROW><ROW><id>9139923</id><snippet>QRegExpValidator</snippet></ROW><ROW><id>9139961</id><snippet>defaultdict</snippet></ROW><ROW><id>9139961</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = {'foo': 123, 'bar': 456}
&gt;&gt;&gt; d['baz']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'baz'
&gt;&gt;&gt; d = defaultdict(lambda: -1, d)
&gt;&gt;&gt; d['baz']
-1
</snippet></ROW><ROW><id>9139961</id><snippet>defaultdict</snippet></ROW><ROW><id>9139961</id><snippet>dict</snippet></ROW><ROW><id>9139961</id><snippet>dict</snippet></ROW><ROW><id>9139961</id><snippet>&gt;&gt;&gt; d['foo']
123
</snippet></ROW><ROW><id>9140022</id><snippet>&gt;&gt;&gt; s = u'o\ufb03ce'
&gt;&gt;&gt; print s
oﬃce
&gt;&gt;&gt; print [s]
[u'o\ufb03ce']
&gt;&gt;&gt; print repr(s)
u'o\ufb03ce'
&gt;&gt;&gt; print '\n'.join([s])
oﬃce
</snippet></ROW><ROW><id>9140022</id><snippet>repr()</snippet></ROW><ROW><id>9140163</id><snippet>session.query(Foo).filter(tuple_(Foo.a, Foo.b, Foo.c).in_(items))
</snippet></ROW><ROW><id>9140163</id><snippet>and_</snippet></ROW><ROW><id>9140163</id><snippet>conditions = (and_(c1=x, c2=y, c3=z) for (x, y, z) in items)
</snippet></ROW><ROW><id>9140163</id><snippet>or_</snippet></ROW><ROW><id>9140163</id><snippet>q.filter(or_(*conditions))
</snippet></ROW><ROW><id>9140163</id><snippet>#/usr/bin/env python
from sqlalchemy import create_engine
from sqlalchemy import Column, Integer
from sqlalchemy.sql import and_, or_
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine('sqlite:///')
session = sessionmaker(bind=engine)()
Base = declarative_base()

class Foo(Base):
    __tablename__ = 'foo'

    id = Column(Integer, primary_key=True)
    a = Column(Integer)
    b = Column(Integer)
    c = Column(Integer)

    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __repr__(self):
        return '(%d %d %d)' % (self.a, self.b, self.c)

Base.metadata.create_all(engine)

session.add_all([Foo(1, 2, 3), Foo(3, 2, 1), Foo(3, 3, 3), Foo(1, 3, 4)])
session.commit()
items = ((1, 2, 3), (3, 3, 3))
conditions = (and_(Foo.a==x, Foo.b==y, Foo.c==z) for (x, y, z) in items)
q = session.query(Foo)
print q.all()
q = q.filter(or_(*conditions))
print q
print q.all()
</snippet></ROW><ROW><id>9140163</id><snippet>$ python test.py 
[(1 2 3), (3 2 1), (3 3 3), (1 3 4)]
SELECT foo.id AS foo_id, foo.a AS foo_a, foo.b AS foo_b, foo.c AS foo_c 
FROM foo 
WHERE foo.a = :a_1 AND foo.b = :b_1 AND foo.c = :c_1 OR foo.a = :a_2 AND foo.b = :b_2 AND foo.c = :c_2
[(1 2 3), (3 3 3)]
</snippet></ROW><ROW><id>9140782</id><snippet>url(r'service/(?P&lt;function&gt;\w+)/$', 'core.service.function_router')


def function_router(request, function):
    return globals()[function](request)
</snippet></ROW><ROW><id>9140906</id><snippet>for i, o in enumerate(obj_list):
    if o.attr == known_value:
        del obj_list[i]
        break
</snippet></ROW><ROW><id>9140934</id><snippet>""" Basic todo list using webpy 0.3 """
import web
import model

### Url mappings

urls = (
    '/', 'Index',
    '/login', 'Login',
    '/logout', 'Logout',
    '/del/(\d+)', 'Delete',
)


web.config.debug = False
render = web.template.render('templates', base='base')
app = web.application(urls, locals())
session = web.session.Session(app, web.session.DiskStore('sessions'))

allowed = (
    ('user','pass'),
)

class Login:

    login_form = web.form.Form( web.form.Textbox('username', web.form.notnull),
        web.form.Password('password', web.form.notnull),
        web.form.Button('Login'),
        )

    def GET(self):
        f = self.login_form()
        return render.login(f)

    def POST(self):
        if not self.login_form.validates():
            return render.login(self.login_form)

        username = self.login_form['username'].value
        password = self.login_form['password'].value
        if (username,password) in allowed:
            session.logged_in = True
            raise web.seeother('/')

        return render.login(self.login_form)


class Logout:
    def GET(self):
        session.logged_in = False
        raise web.seeother('/')

class Index:

    form = web.form.Form(
        web.form.Textbox('title', web.form.notnull, 
            description="I need to:"),
        web.form.Button('Add todo'),
    )

    def GET(self):
        if session.get('logged_in', False):
            """ Show page """
            todos = model.get_todos()
            form = self.form()
            return render.index(todos, form)
        else:
            raise web.seeother('/login')

    def POST(self):
        """ Add new entry """
        form = self.form()
        if not form.validates():
            todos = model.get_todos()
            return render.index(todos, form)
        model.new_todo(form.d.title)
        raise web.seeother('/')



class Delete:

    def POST(self, id):
        """ Delete based on ID """
        id = int(id)
        model.del_todo(id)
        raise web.seeother('/')


app = web.application(urls, globals())

if web.config.get('_session') is None:
    session = web.session.Session(app, web.session.DiskStore('sessions'), {'count': 0})
    web.config._session = session
else:
    session = web.config._session

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>9141054</id><snippet>&gt;&gt;&gt; sys.maxsize
9223372036854775807
&gt;&gt;&gt; size = 3000
&gt;&gt;&gt; c = numpysum(size)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9141054</id><snippet>&gt;&gt;&gt; numpy.arange(10, dtype=numpy.int8)**10
__main__:1: RuntimeWarning: invalid value encountered in power
array([  0,   1,   0, -87,   0,  -7,   0, -15,   0,   0], dtype=int8)
&gt;&gt;&gt; numpy.arange(10, dtype=numpy.int16)**10
array([     0,      1,   1024,  -6487,      0,    761, -23552,  15089,
            0,      0], dtype=int16)
&gt;&gt;&gt; numpy.arange(10, dtype=numpy.int32)**10
array([          0,           1,        1024,       59049,     1048576,
           9765625,    60466176,   282475249,  1073741824, -2147483648], dtype=int32)
&gt;&gt;&gt; numpy.arange(10, dtype=numpy.int64)**10
array([         0,          1,       1024,      59049,    1048576,
          9765625,   60466176,  282475249, 1073741824, 3486784401])
</snippet></ROW><ROW><id>9141054</id><snippet>&gt;&gt;&gt; numpy.arange(10, dtype=object)**20
array([0, 1, 1048576, 3486784401, 1099511627776, 95367431640625,
       3656158440062976, 79792266297612001, 1152921504606846976,
       12157665459056928801], dtype=object)
</snippet></ROW><ROW><id>9141192</id><snippet>import re

io = [
    ('my name is (?P&lt;name&gt;\w+)', 'Hi there, {name}'),
]

string = input('&gt; ')
for regex, output in io:
    match = re.match(regex, string)
    if match:
        print(output.format(**match.groupdict()))
        break
</snippet></ROW><ROW><id>9141192</id><snippet>'my name is (?P&lt;name&gt;\w+)'
</snippet></ROW><ROW><id>9141192</id><snippet>(?P&lt;name&gt;...)</snippet></ROW><ROW><id>9141192</id><snippet>\w+</snippet></ROW><ROW><id>9141192</id><snippet>name</snippet></ROW><ROW><id>9141192</id><snippet>match = re.match(regex, string)
</snippet></ROW><ROW><id>9141192</id><snippet>regex</snippet></ROW><ROW><id>9141192</id><snippet>re.match</snippet></ROW><ROW><id>9141192</id><snippet>re.search</snippet></ROW><ROW><id>9141192</id><snippet>output.format(**match.groupdict())
</snippet></ROW><ROW><id>9141192</id><snippet>match.groupdict</snippet></ROW><ROW><id>9141192</id><snippet>(?P&lt;name&gt;...)</snippet></ROW><ROW><id>9141192</id><snippet>**</snippet></ROW><ROW><id>9141192</id><snippet>.format</snippet></ROW><ROW><id>9141192</id><snippet>output.format(name='matchedname')</snippet></ROW><ROW><id>9141192</id><snippet>io</snippet></ROW><ROW><id>9141192</id><snippet>io = []
with open('input.txt') as file_:
    for line in file:
        key, value = line.rsplit(' | ', 1)
        io.append(tuple(key, value))
</snippet></ROW><ROW><id>9141373</id><snippet>Admin</snippet></ROW><ROW><id>9141373</id><snippet>class Item(models.Model): 
    ...
    class Admin: 
        pass
</snippet></ROW><ROW><id>9141373</id><snippet>admin.py</snippet></ROW><ROW><id>9141373</id><snippet>from django.contrib import admin
from gtd.todo.models import Item

admin.site.register(Item)
</snippet></ROW><ROW><id>9141609</id><snippet>@register.filter( name='safewrap' )
def safewrap( val, arg ):
    return val.format( arg )
safewrap.is_safe = True
</snippet></ROW><ROW><id>9141609</id><snippet>{% blocktrans with sum2="&lt;b&gt;{0}&lt;/b&gt;"|safewrap:sum %}PRODUCTS_WERE_ORDERED({{sum2}}){% endblocktrans %}
</snippet></ROW><ROW><id>9141609</id><snippet>msgid "PRODUCTS_WERE_ORDERED(%(sum2)s)"
msgstr "This costs %(sum2)s"
</snippet></ROW><ROW><id>9141652</id><snippet>from BeautifulSoup import BeautifulSoup
import mechanize

def get_page_mech_bs(url):
    """Takes a page url and returns the mech page and bs page"""
    while True:
        mech_page = get_mech_page(url)
        bs_page = BeautifulSoup(unicode(mech_page.response().read(), 'latin-1'))
        if not test_page(bs_page):
            print "Error in page, redownloading"
            log(unicode(bs_page))
            log(unicode(mech_page.response().read(), 'latin-1'))
            continue
        else:
            break
    return mech_page, bs_page

def get_mech_page(url):
    br = mechanize.Browser()
    br.open(url)
    return br

def test_page(bs_page):
    return True

if __name__ == '__main__':
    print get_page_mech_bs("http://google.com")
</snippet></ROW><ROW><id>9141652</id><snippet>test_page</snippet></ROW><ROW><id>9141652</id><snippet>test_page</snippet></ROW><ROW><id>9141822</id><snippet>histogram</snippet></ROW><ROW><id>9141822</id><snippet> np.histogram([1, 2, 1], bins=[0, 1, 2, 3])
</snippet></ROW><ROW><id>9141822</id><snippet>[0, 1, 2, 3]</snippet></ROW><ROW><id>9141822</id><snippet>bins=5</snippet></ROW><ROW><id>9141822</id><snippet>1</snippet></ROW><ROW><id>9141822</id><snippet>2</snippet></ROW><ROW><id>9141822</id><snippet>array([0, 2, 1])</snippet></ROW><ROW><id>9141822</id><snippet>hist</snippet></ROW><ROW><id>9141822</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; plt.hist([1, 2, 1], bins=[0, 1, 2, 3])
(array([0, 2, 1]), array([0, 1, 2, 3]), &lt;a list of 3 Patch objects&gt;)
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>9141890</id><snippet>import matplotlib.pyplot as plt
x = range(1,21)
plt.xlabel('1st X')
plt.ylabel('1st Y')
plt.plot(x,x,'r') # against 1st x, 1st y
plt.axis([0,50,0,25])
plt.twinx()
plt.ylabel('2nd Y')
plt.plot(x,x,'g') # against 1st x, 2nd y
plt.axis([0,50,0,20])
plt.twiny()
plt.xlabel('2nd X')
plt.plot(x,x,'b') # against 2nd x, 2nd y
plt.axis([0,10,0,20])
plt.show()
</snippet></ROW><ROW><id>9141905</id><snippet>int(tempFile1[i]+1)
</snippet></ROW><ROW><id>9141905</id><snippet>tmpFile[i]</snippet></ROW><ROW><id>9141905</id><snippet>1</snippet></ROW><ROW><id>9141905</id><snippet>int(tempFile1[i])+1
</snippet></ROW><ROW><id>9141905</id><snippet>new=word(word.id=i,word.data=str(tempFile1[i]), word.points=int(tempFile1[i])+1)
</snippet></ROW><ROW><id>9141905</id><snippet>@staticmethod
def impWords():
    with open('import.txt','r+') as f:
        for i, word in enumerate(re.findall(r'\w+', f.read())):
            Repo.words.append(word(id=i, data=word, points = int(word)+1))
</snippet></ROW><ROW><id>9142105</id><snippet>**kwargs</snippet></ROW><ROW><id>9142105</id><snippet>['key']</snippet></ROW><ROW><id>9142317</id><snippet>import itertools

def gene_erator2(gen):
    return itertools.product(*gen)
</snippet></ROW><ROW><id>9142317</id><snippet>&gt;&gt;&gt; i = gene_erator2([['A','a'],['B','b'],['X','Y']])
&gt;&gt;&gt; list(i)
[('A', 'B', 'X'), ('A', 'B', 'Y'), ('A', 'b', 'X'), ('A', 'b', 'Y'), ('a', 'B', 'X'), ('a', 'B', 'Y'), ('a', 'b', 'X'), ('a', 'b', 'Y')]
</snippet></ROW><ROW><id>9142529</id><snippet>query = Users.all()
cnt = query.filter('id =', user_id).count()
logging.info(cnt)
return int(cnt)
</snippet></ROW><ROW><id>9142529</id><snippet>return HttpResponse("1")</snippet></ROW><ROW><id>9142529</id><snippet>return HttpResponse(1)</snippet></ROW><ROW><id>9142637</id><snippet>\w</snippet></ROW><ROW><id>9142637</id><snippet>[A-Za-z]</snippet></ROW><ROW><id>9142637</id><snippet>r = re.compile('(consect\w*)')
</snippet></ROW><ROW><id>9142758</id><snippet>re.match(r"^[a-z]+[*]?$", s)
</snippet></ROW><ROW><id>9142758</id><snippet>^</snippet></ROW><ROW><id>9142758</id><snippet>[a-z]+</snippet></ROW><ROW><id>9142758</id><snippet>[*]?</snippet></ROW><ROW><id>9142758</id><snippet>$</snippet></ROW><ROW><id>9142771</id><snippet>ImageTk</snippet></ROW><ROW><id>9142771</id><snippet>PIL</snippet></ROW><ROW><id>9142771</id><snippet>from Tkinter import *
from PIL import Image, ImageTk

root = Tk()
canvas = Canvas(root, width=500, height=500)
canvas.pack()

im = Image.open("image.png")
cropped = im.crop((0, 0, 200, 200))
tk_im = ImageTk.PhotoImage(cropped)
canvas.create_image(250, 250, image=tk_im)

root.mainloop()
</snippet></ROW><ROW><id>9142983</id><snippet>default</snippet></ROW><ROW><id>9142983</id><snippet>__init__</snippet></ROW><ROW><id>9142983</id><snippet>setyear</snippet></ROW><ROW><id>9142983</id><snippet>Year = models.CharField(max_length=6, default=setyear)</snippet></ROW><ROW><id>9143346</id><snippet>import json
import urllib2
data = json.loads(urllib2.urlopen(url).read())
</snippet></ROW><ROW><id>9143401</id><snippet>word</snippet></ROW><ROW><id>9143401</id><snippet>Word</snippet></ROW><ROW><id>9143401</id><snippet>@staticmethod
def impWords():

    with open('import.txt','r+') as tempFile:
        #re
        tempFile1 = re.findall(r'\w+', tempFile.read())
        # using enumerate here is cleaner
        for i, w in enumerate(tempFile1): 
            word = Word() # here you're creating a new Word instance for each item in tempFile1
            word.ID = i 
            word.data = w
            word.points = 0
            Repo.words.append(word)
            word.prt(word) # here it would be better to implement Word.__str__() and do print word

    print Repo.words # print automatically calls __str__()
    UI.Controller.adminMenu()
</snippet></ROW><ROW><id>9143401</id><snippet>Word</snippet></ROW><ROW><id>9143401</id><snippet>__init__</snippet></ROW><ROW><id>9143401</id><snippet>ID</snippet></ROW><ROW><id>9143401</id><snippet>data</snippet></ROW><ROW><id>9143401</id><snippet>points</snippet></ROW><ROW><id>9143401</id><snippet>Repo.words</snippet></ROW><ROW><id>9143401</id><snippet>@staticmethod
def impWords():

    with open('import.txt','r+') as tempFile:
        #re
        tempFile1 = re.findall(r'\w+', tempFile.read())
        # using enumerate here is cleaner
        Repo.words.extend(Word(i, w, 0) for i, w in enumerate(tempFile1))

    print Repo.words # print automatically calls __str__()
    UI.Controller.adminMenu()
</snippet></ROW><ROW><id>9143411</id><snippet>QTreeView</snippet></ROW><ROW><id>9143411</id><snippet>psycopg2</snippet></ROW><ROW><id>9143411</id><snippet>QAbstractItemModel</snippet></ROW><ROW><id>9143411</id><snippet>QSql</snippet></ROW><ROW><id>9143411</id><snippet>QSqlTableModel</snippet></ROW><ROW><id>9143411</id><snippet>QSqlRelationalTableModel</snippet></ROW><ROW><id>9143411</id><snippet>QSqlQueryModel</snippet></ROW><ROW><id>9143411</id><snippet>QTreeView</snippet></ROW><ROW><id>9143486</id><snippet>&gt;&gt;&gt; nums = xrange(100000000)
&gt;&gt;&gt; -1 in nums
False (after  ~ 6.6 seconds)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9143486</id><snippet>&gt;&gt;&gt; nums = xrange(100000000)
&gt;&gt;&gt; -1 in nums
^C^C^C   (nothing happens, long pause)
...
KeyboardInterrupt
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9143486</id><snippet>while True:
    time.sleep(1)
</snippet></ROW><ROW><id>9143526</id><snippet>from PIL import Image
img = Image.open("a.png")
data = img.getdata()
for (r, g, b, a) in data:
    # do something with the pixel values
</snippet></ROW><ROW><id>9143526</id><snippet>Image.putdata</snippet></ROW><ROW><id>9143526</id><snippet>&gt;&gt;&gt; img = Image.new("L", (3, 3))
&gt;&gt;&gt; data = [0, 255, 0, 255, 0, 255, 0, 255, 0]
&gt;&gt;&gt; img.putdata(data)
&gt;&gt;&gt; img.save("checkerboard.png")
</snippet></ROW><ROW><id>9143564</id><snippet>"".join(str(i) for i in l)
</snippet></ROW><ROW><id>9143603</id><snippet>import nltk
pattern = 'NNP,CC,NNP'
pattern = [pat.strip() for pat in pattern.split(',')]
text = '''Tristan/NNP and/CC Isolde/NNP and/CC the/DT fatalistic/NN horns/VBZ
          The/DT passionate/JJ violins/NN And/CC ominous/JJ clarinet/NN ;/:'''
tagged_token = [nltk.tag.str2tuple(word) for word in nltk.word_tokenize(text)]
for ngram in nltk.ingrams(tagged_token,len(pattern)):
    if all(gram[1] == pat for gram,pat in zip(ngram,pattern)):
        print(' '.join(word for word, pos in ngram))      
</snippet></ROW><ROW><id>9143603</id><snippet>Tristan and Isolde
</snippet></ROW><ROW><id>9143678</id><snippet>PATH</snippet></ROW><ROW><id>9143678</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9143678</id><snippet>import sys
sys.path.append('/path/to/directory')
import your_module
</snippet></ROW><ROW><id>9143678</id><snippet>/path/to/directory/your_module.py</snippet></ROW><ROW><id>9143678</id><snippet>/usr/lib/pythonX.X/site-packages</snippet></ROW><ROW><id>9143766</id><snippet>worldlist</snippet></ROW><ROW><id>9143766</id><snippet>wordlist</snippet></ROW><ROW><id>9143766</id><snippet>self.con.execute('create table wordlist(word)')
</snippet></ROW><ROW><id>9143766</id><snippet>self.con.execute('create index wordidx on wordlist(word)')
</snippet></ROW><ROW><id>9143766</id><snippet>wordlist</snippet></ROW><ROW><id>9143766</id><snippet>import sqlite3
connection = sqlite3.connect(':memory:')
cursor = connection.cursor()
cursor.execute('create table urllist(url)')
cursor.execute('create table wordlist(word)')
</snippet></ROW><ROW><id>9143803</id><snippet>exceptions.IndexError: list index out of range
</snippet></ROW><ROW><id>9143803</id><snippet>title = hxs.select("//h3")[0].extract() 
</snippet></ROW><ROW><id>9143803</id><snippet>hxs.select("//h3")</snippet></ROW><ROW><id>9143803</id><snippet>[]</snippet></ROW><ROW><id>9143803</id><snippet>hxs.select("//h3")[0]</snippet></ROW><ROW><id>9143803</id><snippet>&lt;h3&gt;</snippet></ROW><ROW><id>9143803</id><snippet>a</snippet></ROW><ROW><id>9143803</id><snippet>(a,)</snippet></ROW><ROW><id>9143803</id><snippet>cur.execute("""Insert into heads(h2) Values(%s )""",(a,))
</snippet></ROW><ROW><id>9143803</id><snippet>(a)</snippet></ROW><ROW><id>9143803</id><snippet>a</snippet></ROW><ROW><id>9143803</id><snippet>(a,)</snippet></ROW><ROW><id>9143854</id><snippet>import</snippet></ROW><ROW><id>9143854</id><snippet>mymath.py</snippet></ROW><ROW><id>9143854</id><snippet>def foo(x):
    # Code goes here
</snippet></ROW><ROW><id>9143854</id><snippet>import mymath
print(mymath.foo(y))
</snippet></ROW><ROW><id>9144059</id><snippet>self.__class__</snippet></ROW><ROW><id>9144059</id><snippet>THRESHOLD = 1000

class Small(object):
    def __init__(self, n):
        if n &lt; THRESHOLD:
            self.n = n
        else:
            self.__class__ = Big
            self.__init__(n)

class Big(object):
    def __init__(self, n):
        if n &lt; THRESHOLD:
            self.__class__ = Small
            self.__init__(n)
        else:
            self.n = n
</snippet></ROW><ROW><id>9144059</id><snippet>&gt;&gt;&gt; a = Small(100)
&gt;&gt;&gt; type(a)
&lt;class 'Small'&gt;
&gt;&gt;&gt; b = Small(1234)
&gt;&gt;&gt; type(b)
&lt;class 'Big'&gt;
&gt;&gt;&gt; c = Big(2)
&gt;&gt;&gt; type(c)
&lt;class 'Small'&gt;
</snippet></ROW><ROW><id>9144059</id><snippet>self.__class__</snippet></ROW><ROW><id>9144059</id><snippet>__new__</snippet></ROW><ROW><id>9144059</id><snippet>__init__</snippet></ROW><ROW><id>9144059</id><snippet>THRESHOLD = 1000

class Switcher(object):
    def __new__(cls, n):
        if n &lt; THRESHOLD:
            new_cls = Small
        else:
            new_cls = Big
        instance = super(Switcher, new_cls).__new__(new_cls, n)
        if new_cls != cls:
            instance.__init__(n)
        return instance

class Small(Switcher):
    def __init__(self, n):
        self.n = n

class Big(Switcher):
    def __init__(self, n):
        self.n = n
</snippet></ROW><ROW><id>9144217</id><snippet>updater</snippet></ROW><ROW><id>9144290</id><snippet>lxml.sax</snippet></ROW><ROW><id>9144290</id><snippet>xml.sax</snippet></ROW><ROW><id>9144290</id><snippet>&gt;&gt;&gt; import lxml.sax
&gt;&gt;&gt; help(lxml.sax)
Help on module lxml.sax in lxml:

NAME
    lxml.sax - SAX-based adapter to copy trees from/to the Python standard libra
ry.

FILE
    c:\python27\lib\site-packages\lxml\sax.py

DESCRIPTION
    Use the `ElementTreeContentHandler` class to build an ElementTree from
    SAX events.

    Use the `ElementTreeProducer` class or the `saxify()` function to fire
    the SAX events of an ElementTree against a SAX ContentHandler.
[snip]
</snippet></ROW><ROW><id>9144290</id><snippet>def characters(self, content):
    # assert content is not None and len(content) &gt; 0
    assert content
    # if len(self.stack) == 0:
    if not self.stack:
        return
    if self.stack[-1] == "title":
        self.title += content
    elif self.stack[-1] == "text":
        # assert self.title is not None
        assert self.title # This assertion is gross overkill IMHO
        self.text += content
</snippet></ROW><ROW><id>9144290</id><snippet>iterparse</snippet></ROW><ROW><id>9144290</id><snippet>import xml.etree.ElementTree as et</snippet></ROW><ROW><id>9144290</id><snippet>import xml.etree.cElementTree as et</snippet></ROW><ROW><id>9144290</id><snippet>import lxml.etree as et</snippet></ROW><ROW><id>9144392</id><snippet>sys.stdout.flush()
</snippet></ROW><ROW><id>9144442</id><snippet>[app:main]
beaker.cache.type = ext:memcached
beaker.cache.url = 127.0.0.1:11211
# you can also store sessions in memcached, should you wish
# beaker.session.type = ext:memcached
# beaker.session.url = 127.0.0.1:11211
</snippet></ROW><ROW><id>9144442</id><snippet>def __init__(self, namespace, url=None, data_dir=None, lock_dir=None, **params):
    NamespaceManager.__init__(self, namespace)

    if not url:
        raise MissingCacheParameter("url is required") 
</snippet></ROW><ROW><id>9144442</id><snippet>lock_dir</snippet></ROW><ROW><id>9144442</id><snippet>data_dir</snippet></ROW><ROW><id>9144442</id><snippet>    if lock_dir:
        self.lock_dir = lock_dir
    elif data_dir:
        self.lock_dir = data_dir + "/container_mcd_lock"
    if self.lock_dir:
        verify_directory(self.lock_dir)
</snippet></ROW><ROW><id>9144442</id><snippet>class Foo(object):
    def __init__(self, lock_dir=None, data_dir=None):
        if lock_dir:
            self.lock_dir = lock_dir
        elif data_dir:
            self.lock_dir = data_dir + "/container_mcd_lock"
        if self.lock_dir:
            verify_directory(self.lock_dir)

f = Foo()
</snippet></ROW><ROW><id>9144442</id><snippet>&gt;&gt;&gt; f = Foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 7, in __init__
AttributeError: 'Foo' object has no attribute 'lock_dir'
</snippet></ROW><ROW><id>9144923</id><snippet>raw_input().split()</snippet></ROW><ROW><id>9144923</id><snippet>(int(x) for x in a)</snippet></ROW><ROW><id>9144923</id><snippet>int</snippet></ROW><ROW><id>9144923</id><snippet>sum</snippet></ROW><ROW><id>9144923</id><snippet>print</snippet></ROW><ROW><id>9145086</id><snippet>el = [0, ['~', '~', '~'], 1, ['~', '~', '~'], 2, ['~', '~', '~'] ]
for i in range(0, len(el), 2):
    print el[i], " ".join(el[i+1])
</snippet></ROW><ROW><id>9145155</id><snippet>import networkx as nx
D=nx.DiGraph()
D.add_weighted_edges_from([('A','B',0.5),('A','C',0.5)])
print nx.pagerank(D)

&gt;&gt; {'A': 0.259740259292235, 'C': 0.3701298703538825, 'B': 0.3701298703538825}
</snippet></ROW><ROW><id>9145155</id><snippet>D['A']['C']['weight']=1
print nx.pagerank(D)    

&gt;&gt; {'A': 0.259740259292235, 'C': 0.40692640737443164, 'B': 0.3333333333333333}
</snippet></ROW><ROW><id>9145214</id><snippet>button_Pressed</snippet></ROW><ROW><id>9145214</id><snippet>self.text_2</snippet></ROW><ROW><id>9145214</id><snippet>"First"</snippet></ROW><ROW><id>9145214</id><snippet>"Second"</snippet></ROW><ROW><id>9145214</id><snippet>text_2</snippet></ROW><ROW><id>9145214</id><snippet>StaticText</snippet></ROW><ROW><id>9145214</id><snippet>if self.text_2.GetLabelText() == 'First':
</snippet></ROW><ROW><id>9145291</id><snippet>__getitem__</snippet></ROW><ROW><id>9145291</id><snippet>__iter__</snippet></ROW><ROW><id>9145291</id><snippet>__getitem__</snippet></ROW><ROW><id>9145291</id><snippet>__iter__</snippet></ROW><ROW><id>9145291</id><snippet>iter</snippet></ROW><ROW><id>9145291</id><snippet>iter</snippet></ROW><ROW><id>9145291</id><snippet>__getitem__</snippet></ROW><ROW><id>9145524</id><snippet>this-&gt;</snippet></ROW><ROW><id>9145524</id><snippet>self</snippet></ROW><ROW><id>9145524</id><snippet>class Foo:
     def __bar(self, arg):
         #do something
     def baz(self, arg):
         self.__bar(arg)
</snippet></ROW><ROW><id>9145524</id><snippet>__bar</snippet></ROW><ROW><id>9145524</id><snippet>Foo</snippet></ROW><ROW><id>9145524</id><snippet>Foo._Foo__bar</snippet></ROW><ROW><id>9145524</id><snippet>f = Foo()
f._Foo__bar('a')
</snippet></ROW><ROW><id>9145524</id><snippet>here</snippet></ROW><ROW><id>9145587</id><snippet>import collections
result = collections.defaultdict(int) # works like a dictionary
# but all keys have a default value of zero
for key, value in mylist:
    result[key] += value 

print result
</snippet></ROW><ROW><id>9146002</id><snippet>#EXTM3U
#EXTINF:295,Tool - Intolerance
01 - Intolerance.mp3
#EXTINF:296,Tool - Prison Sex
02 - Prison Sex.mp3
#EXTINF:307,Tool - Sober
03 - Sober.mp3
#EXTINF:434,Tool - Bottom
04 - Bottom.mp3
#EXTINF:330,Tool - Crawl Away
05 - Crawl Away.mp3
#EXTINF:332,Tool - Swamp Song
06 - Swamp Song.mp3
#EXTINF:322,Tool - Undertow
07 - Undertow.mp3
#EXTINF:363,Tool - 4°
08 - 4°.mp3
#EXTINF:466,Tool - Flood
09 - Flood.mp3
#EXTINF:947,Tool - Disgustipated
69 - Disgustipated.mp3
</snippet></ROW><ROW><id>9146002</id><snippet>os</snippet></ROW><ROW><id>9146002</id><snippet>os.system("YOUR DOS COMMAND")</snippet></ROW><ROW><id>9146002</id><snippet>#EXTINF:&lt;song-time-in-seconds&gt;, &lt;Artist&gt; - &lt;Song&gt;
&lt;Track_Num&gt; - &lt;File name&gt;
</snippet></ROW><ROW><id>9146192</id><snippet>   data = {
        (17, 39, 9):  ([13, 37, 13], 0.13517353359),
        (17, 39, 9):  ([15, 38, 10], 0.055003044449),
        (13, 39, 13):  ([13, 37, 13], 0.0345037548204),
   }

   print "Other list:", d[(17, 39, 9)][0]
   print "Float", d[(17, 39, 9)][1]
</snippet></ROW><ROW><id>9146505</id><snippet>__init__</snippet></ROW><ROW><id>9146505</id><snippet>from xml.sax import make_parser, handler
class parserSAXHandler(handler.ContentHandler):

    def __init__(self, something):
        self.something = something

    def startElement(self, name, attrs):

    def endElement(self,name):
        ...
        do_something(self.something)
        ...

    def characters(self, content):


parser = make_parser()
parser.setContentHandler(parserSAXHandler(some_argument))

doc="PathToDocToBeParsed";
parser.parse(doc);
</snippet></ROW><ROW><id>9146525</id><snippet>if __name__ == "__main__":
    myfile = open("bar.txt", "rb")
    lines = myfile.readlines()
    myfile.close()

    myfile = open("bar.txt", "wb")
    for l in lines:
        ls = l.strip()
        myfile.write(ls + "\n")
        lsplit = ls.split("@")
        myfile.write(lsplit[1] + "@" + lsplit[0] + "\n")

    myfile.close()
</snippet></ROW><ROW><id>9146681</id><snippet>def pendingOrders(request):
    userprof = UserProfile.objects.get(user= request.user)
    if userprof.is_student:
        student_account = request.user
        dish = Dishes.objects.all()
        #Getting all pending orders
        order_all_pending = Orders.objects.filter(student_id = student_account,delivered = False)
        pending_orders = Orders.objects.filter(~Q(status = 2),delivered = False)
        for order in order_all_pending:
            #Hack to change QuerySet to pass as JSON 
            order.quantity = pending_orders.filter(id__lt = order.id,counterid= order.counterid).count() + 1

        #Returning JSON response to the objects obtained in above statement
        return HttpResponse(serializers.serialize('json',order_all_pending,use_natural_keys=True),mimetype='application/json')
    else:
        return HttpResponse("Something went wrong")
</snippet></ROW><ROW><id>9146813</id><snippet>A.f = A.h # redefines instance method 'f' to print 'h'
</snippet></ROW><ROW><id>9146813</id><snippet>    if cache is None:
</snippet></ROW><ROW><id>9146813</id><snippet>cache_field</snippet></ROW><ROW><id>9146813</id><snippet>__init__</snippet></ROW><ROW><id>9146813</id><snippet>self.foo = 'bar'</snippet></ROW><ROW><id>9146813</id><snippet>init</snippet></ROW><ROW><id>9146813</id><snippet>cache_field</snippet></ROW><ROW><id>9146813</id><snippet>check_cache</snippet></ROW><ROW><id>9147010</id><snippet>return</snippet></ROW><ROW><id>9147010</id><snippet>return</snippet></ROW><ROW><id>9147010</id><snippet>   def calculate_attribute(params):
     #...
     if something:
       report_and_set(value, message)
     #...
     elif another_condition:
       report_and_set(value, message)
     #...     
</snippet></ROW><ROW><id>9147175</id><snippet>f = file('List.txt')
g = file('DataTable.txt')

for line in f:
    l = line.split()
    name = l[0]
    g.seek(0)
    for row in g:
        if row.startswith(name):
            data = row.split()
            print data[8]
</snippet></ROW><ROW><id>9147181</id><snippet>fork</snippet></ROW><ROW><id>9147181</id><snippet>exec</snippet></ROW><ROW><id>9147181</id><snippet>LD_PRELOAD</snippet></ROW><ROW><id>9147181</id><snippet>inotify</snippet></ROW><ROW><id>9147193</id><snippet>  #label to store value
  def gen():
      self.nums = []
      for x in range(0, 10):
          self.nums.append(random.randint(0, 100))
      # . . . . . . . . . .  .    &lt;- maybe here call sorting method on self.nums
      num = ''.join('%4i' % num for num in self.nums)
      self.label2 = Label( self, text=num, width=2, height=2)
      self.label2.grid(row=3, columnspan=10, sticky=W+E+N+S)
</snippet></ROW><ROW><id>9147193</id><snippet>self.nums</snippet></ROW><ROW><id>9147193</id><snippet>  self.nums = []
  for x in range(0, 10):
      self.nums.append(random.randint(0, 100))
</snippet></ROW><ROW><id>9147193</id><snippet>  self.nums = [random.randint(0, 100) for x in range(10)]
</snippet></ROW><ROW><id>9147210</id><snippet>timeit</snippet></ROW><ROW><id>9147210</id><snippet>stmt</snippet></ROW><ROW><id>9147210</id><snippet>import timeit

def timefunc(function, *args):
    def wrap():
        function(*args)
    t = timeit.Timer(wrap)
    return t.timeit(100)

def test(arg):
    foo = arg

print(timefunc(test, 'bar'))
</snippet></ROW><ROW><id>9147276</id><snippet>def z(contfrac, a=1, b=0, c=0, d=1):
    for x in contfrac:
        while a &gt; 0 and b &gt; 0 and c &gt; 0 and d &gt; 0:
            t = a // c
            t2 = b // d
            if not t == t2:
                break
            yield t
            a = (10 * (a - c*t))
            b = (10 * (b - d*t))
            # continue with same fraction, don't pull new x
        a, b = x*a+b, a
        c, d = x*c+d, c
    for digit in rdigits(a, c):
        yield digit

def rdigits(p, q):
    while p &gt; 0:
        if p &gt; q:
           d = p // q
           p = p - q * d
        else:
           d = (10 * p) // q
           p = 10 * p - q * d
        yield d
</snippet></ROW><ROW><id>9147276</id><snippet>def e_cf_expansion():
    yield 1
    k = 0
    while True:
        yield k
        k += 2
        yield 1
        yield 1
</snippet></ROW><ROW><id>9147276</id><snippet>def e_dec():
    return z(e_cf_expansion())
</snippet></ROW><ROW><id>9147276</id><snippet>&gt;&gt;&gt; gen = e_dec()
&gt;&gt;&gt; e = [str(gen.next()) for i in xrange(1000)]
&gt;&gt;&gt; e.insert(1, '.')
&gt;&gt;&gt; print ''.join(e)
2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035
</snippet></ROW><ROW><id>9147276</id><snippet>def sqrt_cf_expansion(S):
    """Generalized generator to compute continued
       fraction representation of sqrt(S)"""
    m = 0
    d = 1
    a = int(math.sqrt(S))
    a0 = a
    while True:
        yield a
        m = d*a-m
        d = (S-m**2)//d
        a = (a0+m)//d
</snippet></ROW><ROW><id>9147322</id><snippet>{% trans %}</snippet></ROW><ROW><id>9147322</id><snippet>{% endtrans %}</snippet></ROW><ROW><id>9147322</id><snippet>i18n</snippet></ROW><ROW><id>9147325</id><snippet>placeholderText</snippet></ROW><ROW><id>9147325</id><snippet>QObject</snippet></ROW><ROW><id>9147325</id><snippet>objectName</snippet></ROW><ROW><id>9147325</id><snippet>sender.text()</snippet></ROW><ROW><id>9147325</id><snippet>QLineEdit</snippet></ROW><ROW><id>9147325</id><snippet>textChanged</snippet></ROW><ROW><id>9147325</id><snippet>text</snippet></ROW><ROW><id>9147325</id><snippet>multiplier</snippet></ROW><ROW><id>9147325</id><snippet>multiplicand</snippet></ROW><ROW><id>9147325</id><snippet>class myGUI(QtGui.QWidget):

    def __init__(self, *args, **kwargs):
        QtGui.QWidget.__init__(self, *args, **kwargs)

        self.data = {"multiplier": 0,
                     "multiplicand": 0}

        self.myGUIInit()

    def myGUIInit(self):
        a1_label = QtGui.QLabel("a1")
        a1_edit = QtGui.QLineEdit()
        a1_edit.setObjectName("multiplicand")

        a2_label = QtGui.QLabel("a2")
        a2_edit = QtGui.QLineEdit()
        a2_edit.setObjectName("multiplier")

        # skipped the rest because same

    def TxtChanged(self, text):
        sender = self.sender()

        # casting to int while assigning seems logical.
        self.data[sender.objectName()] = int(text)

        product = self.data["multiplier"] * self.data["multiplicand"]

        print(self.data["multiplier"], self.data["multiplicand"], product)

        self.a1a2_edit.setText(str(product))
</snippet></ROW><ROW><id>9147471</id><snippet>import sqlalchemy
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, String, Integer
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy import sql
Base = declarative_base()
engine = sqlalchemy.create_engine('sqlite:///:memory:')
Session = sessionmaker(bind=engine)
session = Session()

class Info(Base):
    __tablename__ = 'info'
    id = Column(Integer(), primary_key=True)
    type = Column(String())
    item_id = Column(Integer())

    @property
    def item(self):
        if self.type == 'car':
            return self._car
        elif self.type == 'suv':
            return self._suv
        return None

    @item.setter
    def item(self, value):
        if value is not None:
            self.item_id = value.id
            self.type = value.__tablename__
        else:
            self.item_id = None

class Car(Base):
    __tablename__ = 'car'
    id = Column(Integer(), primary_key=True)
    info = relationship(Info, primaryjoin=sql.and_(id == Info.item_id, Info.type == 'car'), foreign_keys=Info.item_id, uselist=False, backref='_car')

class Suv(Base):
    __tablename__ = 'suv'
    id = Column(Integer(), primary_key=True)
    info = relationship(Info, primaryjoin=sql.and_(id == Info.item_id, Info.type == 'suv'), foreign_keys=Info.item_id, uselist=False, backref='_suv')
</snippet></ROW><ROW><id>9147518</id><snippet>&lt;opera&gt;</snippet></ROW><ROW><id>9147518</id><snippet>&lt;/opera&gt;</snippet></ROW><ROW><id>9147518</id><snippet>tags_pattern</snippet></ROW><ROW><id>9147518</id><snippet>finditer</snippet></ROW><ROW><id>9147518</id><snippet>findall</snippet></ROW><ROW><id>9147518</id><snippet>startTags = re.finditer("&lt;opera&gt;",text)
endTags   = re.finditer("&lt;/opera&gt;",text)

matches = re.finditer(tags_pattern,text)

# Now, [m.start() for m in matches] gives the starting index into `text`.
# if &lt;opera&gt; starts at subindices 0, 1000, 2345
# and you get a match starting at subindex 1100,
#  then it's in the 1000-2345 block.
for m in matches:
    # find first
    sec = [i for i in xrange(len(startTags)) if i&gt;startTags[i].start()]
    if len(sec)=0:
        print "err couldn't find it"
    else:
        sec = sec[0]
        print "found in\n" + text[startTags[sec].start():endTags[sec].end()]
</snippet></ROW><ROW><id>9147518</id><snippet>m.group()</snippet></ROW><ROW><id>9147518</id><snippet>()</snippet></ROW><ROW><id>9147518</id><snippet>m.group(i)</snippet></ROW><ROW><id>9147916</id><snippet>]</snippet></ROW><ROW><id>9147916</id><snippet>1F 8B 08</snippet></ROW><ROW><id>9147916</id><snippet>lines = [
    # extracted from the linked csv file 
    "[133,120,696,286]MmEAAB+LCAAAAAAABADtvQdg [BIG snip] a0bokyYQAA",
    "[73,65,564,263]bkgAAB+LCAAAAAAABADtvQdgHE [BIG snip] kgAAA==",
    ]
import zlib, struct
for line in lines:
    print
    b64 = line.split(']')[1]
    raw = b64.decode('base64')
    print "unknown:", repr(raw[:4])
    print "unknown as 32-bit LE int:", struct.unpack("&lt;I", raw[:4])[0]
    ungz = zlib.decompress(raw[4:], 31)
    print len(ungz), "bytes in decompressed data"
    print "first 100:", repr(ungz[:100])
</snippet></ROW><ROW><id>9147916</id><snippet>unknown: '2a\x00\x00'
unknown as 32-bit LE int: 24882
24882 bytes in decompressed data
first 100: '\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xf0\x00\x00\x00\x00\x00\x00\x00
\x00\x00\x00'

unknown: 'nH\x00\x00'
unknown as 32-bit LE int: 18542
18542 bytes in decompressed data
first 100: '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\xff
\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
\x00\x00\x00\x00\x07\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80
\x00\x00\x00'
</snippet></ROW><ROW><id>9147916</id><snippet>'0b'</snippet></ROW><ROW><id>9147916</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; ungz = '\x01\x80'
&gt;&gt;&gt; bin(int(binascii.hexlify(ungz), 16))
'0b110000000'
&gt;&gt;&gt; ''.join('{0:08b}'.format(ord(x)) for x in ungz)
'0000000110000000'
</snippet></ROW><ROW><id>9147916</id><snippet>'0000000110000000'</snippet></ROW><ROW><id>9147916</id><snippet>'1000000000000001'</snippet></ROW><ROW><id>9147986</id><snippet>__init__</snippet></ROW><ROW><id>9147986</id><snippet>vars()</snippet></ROW><ROW><id>9147986</id><snippet>defy = Default()
for name,value in vars(defy).items():
    if isinstance(value, Shape):
        # manipulate
</snippet></ROW><ROW><id>9147986</id><snippet>Base</snippet></ROW><ROW><id>9147986</id><snippet>import someModule

instances = []
for cls_name,cls in vars(someModule):
    if issubclass(cls, Base):
        obj = cls()
        for name,value in vars(cls).items():
            if isinstance(value, Shape):
                # manipulate
        instances.append(obj)
</snippet></ROW><ROW><id>9147986</id><snippet>Shape</snippet></ROW><ROW><id>9147986</id><snippet>class Default(Base):
    default_shapes = [Rectangle, Circle, Sphere]
    def __init__(self):
        self.shapes = [shape() for shape in self.__class__.default_shapes]
</snippet></ROW><ROW><id>9148014</id><snippet>def all_are_dark_around(image, r, c):
    # range gives the bounds [-1, 0, 1]
    # you could use the list directly. Probably better for this especific case
    for i in range(-1,2):              
        for j in range(-1,2):
            # if the pixel is clear return False.
            # note that image[r+0][c+0] is always dark by definition
            if image[r+i][c+j] &lt;= 128:  
                return False
    #the loop finished -&gt; all pixels in the 3x3 square were dark
    return True
</snippet></ROW><ROW><id>9148014</id><snippet>image[r][c]</snippet></ROW><ROW><id>9148014</id><snippet>r</snippet></ROW><ROW><id>9148014</id><snippet>c</snippet></ROW><ROW><id>9148014</id><snippet>0</snippet></ROW><ROW><id>9148014</id><snippet>height</snippet></ROW><ROW><id>9148014</id><snippet>width</snippet></ROW><ROW><id>9148217</id><snippet>#!/usr/bin/env python

#import the necessary modules.
import re #for regular expressions.
import sys #for parsing command line opts.

JNI_CPP_FUNC_PREFIX_INDEX = 1
JNI_METHOD_SIGNATURE_MAP = {
#basic type
'void':'V',
'boolean':'Z',
'int':'I',
'long':'J',
'double':'D',
'float':'F',
'byte':'B',
'char':'C',
'short':'S',
#array type
'int[]':'[I',
'float[]':'[F',
'byte[]':'[B',
'char[]':'[C',
'short[]':'[S',
'double[]':'[D',
'long[]':'[J',
'boolean[]':'[Z',
}

#param type = True; return type = False
def generateJniMethodTypeSignature(type, paramORreturnType = True):
    retParamSignature = None
    if type and type &gt; "":
    try:
        retParamSignature = JNI_METHOD_SIGNATURE_MAP[type]
    except:
        if type == "String" :
            retParamSignature = 'LJava/lang/String'
        else :
            retParamSignature = "Lnet/sf/jirr/" + type
        #if paramORreturnType :
        retParamSignature += ";"

    #print "retParamSignature: "
    #print retParamSignature
    return retParamSignature

#if sys.argv[1]:
#   print "File: %s" % (sys.argv[1])
#   logfile = raw_input("Please input a log file to parse, e.g /var/file: ");
try:
    jniMethodsFilePath = sys.argv[1]
    jniMethodsFile = open(jniMethodsFilePath, "r")

    outputFilePath = sys.argv[2]
    outputFile = open(outputFilePath, "w")

    for eachLine in jniMethodsFile.readlines() :
        eachLine = eachLine.strip()
        #print(eachLine)
    #                                               retType  name space (   param space  )
    regex = re.match('^public\sfinal\sstatic\snative\s(\w+)\s(\w+)(\s)*(\()([^)]*)(\s)*(\))', eachLine)
    if regex:
        #'''
        print "whole match: " + regex.group(0)  #whole match.
        '''
        print "retType: " + regex.group(1)      #retType
        print "name: " + regex.group(2)         #name
        print "left space: "
        print regex.group(3)                    #left space
        print "(: " + regex.group(4)            #(
        print "param: " + regex.group(5)        #param
        print "right space: "
        print regex.group(6)                    #right space
        print "): " + regex.group(7)            #)
        #print eachLine
        '''
        retType = regex.group(1).strip() 
        funcName = regex.group(2).strip()
        param = regex.group(5).strip()
        #java native function name
        command = "SET_A_JNI_METHOD(" + funcName + ", \"("

        #print "param: " + regex.group(5) 
        paramRegex = re.split('\s*,\s*', param)
        if paramRegex:
            for eachParam in paramRegex:
                eachParam = eachParam.strip()
                #print "eachParam: " + eachParam
                eachParamRegex = re.split('\s*', eachParam)
                if eachParamRegex:
                    eachParamType = eachParamRegex[0].strip()
                    #print "eachParamType: " + eachParamType
                    paramTypeSignature = generateJniMethodTypeSignature(eachParamType)
                    if paramTypeSignature:
                        #print "paramTypeSignature: " + paramTypeSignature
                        command = command + paramTypeSignature
            command = command + ")"
            retTypeSignature = generateJniMethodTypeSignature(retType, False)
            if retTypeSignature:
                #parameter type signature.
                command = command + retTypeSignature + "\", "
                #print "command: " + command
            #c/c++ jni function name
            funcNameRegex = re.split('_', funcName)
            if funcNameRegex:
                #print cppFuncNameRegex
                i = 0
                cppFuncName = "Java_net_sf_jirr_JirrJNI_"

                for eachFuncNamePart in funcNameRegex:
                    #print eachFuncNamePart
                    i = i + 1
                    if i == 1:
                        cppFuncName = cppFuncName + eachFuncNamePart
                        if i != len(funcNameRegex):
                            cppFuncName = cppFuncName + '_'
                        continue
                    cppFuncName = cppFuncName + str(JNI_CPP_FUNC_PREFIX_INDEX) + eachFuncNamePart
                    if i != len(funcNameRegex) :
                        cppFuncName = cppFuncName + '_'

                command = command + cppFuncName + "), "
                print "output: " + command + "\n"
                outputFile.write(command + '\n')
    outputFile.close()
    jniMethodsFile.close()          
except IOError, (errno, strerror):
    print "I/O Error(%s) : %s" % (errno, strerror)
</snippet></ROW><ROW><id>9148393</id><snippet>~/Workspace</snippet></ROW><ROW><id>9148393</id><snippet>. virtualenv_directory/bin/activate</snippet></ROW><ROW><id>9148393</id><snippet>DatabaseWritingApp*</snippet></ROW><ROW><id>9148393</id><snippet>PyramidApplication</snippet></ROW><ROW><id>9148393</id><snippet>DatabaseWritingApp*</snippet></ROW><ROW><id>9148393</id><snippet>PyramidApplication</snippet></ROW><ROW><id>9148393</id><snippet>setup.py</snippet></ROW><ROW><id>9148393</id><snippet>python setup.py develop</snippet></ROW><ROW><id>9148401</id><snippet>python-3.2</snippet></ROW><ROW><id>9148401</id><snippet>python-2.7</snippet></ROW><ROW><id>9148568</id><snippet>app_directories.Loader</snippet></ROW><ROW><id>9148725</id><snippet>nltk</snippet></ROW><ROW><id>9148725</id><snippet>[nltk.tag.str2tuple(t)[0] for t in sent.split()]
</snippet></ROW><ROW><id>9148725</id><snippet>['The', 'grand', 'jury'...
</snippet></ROW><ROW><id>9148725</id><snippet>('The',)</snippet></ROW><ROW><id>9148725</id><snippet>('The') == 'The'</snippet></ROW><ROW><id>9148804</id><snippet>class B(object):
    def __init__(self, creator):
        self._creator = creator   # or do something else with it
</snippet></ROW><ROW><id>9148804</id><snippet>class A(object):
    def somemethod(self):
        b = B(self)
</snippet></ROW><ROW><id>9148916</id><snippet>startapp</snippet></ROW><ROW><id>9148981</id><snippet>content = content.replace("ஜௌ", "n\[s");
</snippet></ROW><ROW><id>9148981</id><snippet>content = content.replace(u'ஜௌ', ur'n\[s');
</snippet></ROW><ROW><id>9148981</id><snippet>content = content.replace(u'\u0B9C\u0BCC', ur'n\[s');
</snippet></ROW><ROW><id>9148981</id><snippet>"ஜௌ"</snippet></ROW><ROW><id>9148981</id><snippet>u</snippet></ROW><ROW><id>9148981</id><snippet>r</snippet></ROW><ROW><id>9149104</id><snippet>any(str(i) in var for i in range(10))
</snippet></ROW><ROW><id>9149343</id><snippet>object</snippet></ROW><ROW><id>9149343</id><snippet>print(obj['a'][0], obj['b']['c'][0])
</snippet></ROW><ROW><id>9149343</id><snippet>print(obj['a'], obj['b']['c'])
</snippet></ROW><ROW><id>9149386</id><snippet>&gt;&gt;&gt; [a.split("|") for a in answers]
[['Human machine interface for lab abc computer applications', '3'], 
['A survey of user opinion of computer system response time', '4'], 
['The EPS user interface management system', '2'], 
['System and human system engineering testing of EPS', '1']]
</snippet></ROW><ROW><id>9149439</id><snippet>//</snippet></ROW><ROW><id>9149439</id><snippet>&gt;&gt;&gt; 
&gt;&gt;&gt; from Bio import SeqIO
&gt;&gt;&gt; arch = "C:/code/NC_008137.gbk"
&gt;&gt;&gt; record = SeqIO.parse(arch, "genbank")
&gt;&gt;&gt; rec = next(record)                       # there is only one record
&gt;&gt;&gt; for f in rec.features:
    if f.type == 'gene':
        print(f.qualifiers['gene'], f.location)


['ND1'] [2728:3685]
['ND2'] [3888:4932]
['COX1'] [5365:6919]
['COX2'] [7052:7737]
['ATP8'] [7798:8005]
['ATP6'] [7959:8640]
['COX3'] [8639:9423]
['ND3'] [9488:9837]
['ND4L'] [9906:10203]
['ND4'] [10196:11574]
['ND5'] [11773:13582]
['ND6'] [13578:14082]
['CYTB'] [14155:15301]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9149488</id><snippet>{{ value|default:backup_var }}
</snippet></ROW><ROW><id>9149488</id><snippet>&lt;i&gt;{{ my_var|default:user.username}}&lt;/i&gt;
</snippet></ROW><ROW><id>9149488</id><snippet>my_var</snippet></ROW><ROW><id>9149488</id><snippet>&lt;i&gt;admin&lt;/i&gt;
</snippet></ROW><ROW><id>9149488</id><snippet>{% with var=expr %} ... {% endwith %}</snippet></ROW><ROW><id>9149619</id><snippet>major</snippet></ROW><ROW><id>9149619</id><snippet>minor</snippet></ROW><ROW><id>9149619</id><snippet>In [9]: plot([23, 456, 676, 89, 906, 34, 2345])
Out[9]: [&lt;matplotlib.lines.Line2D at 0x6112f90&gt;]

In [10]: yscale('log')

In [11]: grid(b=True, which='major', color='b', linestyle='-')

In [12]: grid(b=True, which='minor', color='r', linestyle='--')
</snippet></ROW><ROW><id>9149880</id><snippet>A</snippet></ROW><ROW><id>9149880</id><snippet>QtCore.QObject.emit</snippet></ROW><ROW><id>9149880</id><snippet>QtCore.QObject.emit(self, QtCore.SIGNAL('mySignal'), "Hello World")
</snippet></ROW><ROW><id>9149880</id><snippet>self.emit(QtCore.SIGNAL('mySignal'), "Hello World")
</snippet></ROW><ROW><id>9149880</id><snippet>from PyQt4 import QtCore

class A(QtCore.QObject):
    mySignal = QtCore.SIGNAL('mySignal(QString)')
    def __init__(self):
        QtCore.QObject.__init__(self)

    def create_b(self):
        return B(self)

    def some_action(self):
        QtCore.QObject.emit(self, QtCore.SIGNAL('mySignal'), "Hello World")
        # this will work too
        self.emit(QtCore.SIGNAL('mySignal'), "Hello World")

class B(QtCore.QObject):
    def __init__(self, creator):
        QtCore.QObject.__init__(self)
        self._creator = creator
        self.connect(self._creator, QtCore.SIGNAL('mySignal'), self.mySlot)

    def mySlot(self, str):
        print str

a = A()
b = a.create_b()
a.some_action()
</snippet></ROW><ROW><id>9149880</id><snippet>from PyQt4 import QtCore

class A(QtCore.QObject):
    mySignal = QtCore.pyqtSignal(str)
    def __init__(self):
        QtCore.QObject.__init__(self)

    def create_b(self):
        return B(self)

    def some_action(self):
        self.mySignal.emit("Hello World")

class B(QtCore.QObject):
    def __init__(self, creator):
        QtCore.QObject.__init__(self)
        self._creator = creator
        self._creator.mySignal.connect(self.mySlot)

    def mySlot(self, str):
        print str

a = A()
b = a.create_b()
a.some_action()
</snippet></ROW><ROW><id>9150157</id><snippet>self.obj</snippet></ROW><ROW><id>9150157</id><snippet>string = ''.join('[%s]' % x for x in self.obj.itervalues())
</snippet></ROW><ROW><id>9150157</id><snippet>__getitem__</snippet></ROW><ROW><id>9150157</id><snippet>string = ''.join('[%s]' % self.obj[x] for x in self.obj)
</snippet></ROW><ROW><id>9150157</id><snippet>str</snippet></ROW><ROW><id>9150157</id><snippet>string = ''.join('[%s%s]' % (x[1:], self.obj[x]) for x in self.obj)
</snippet></ROW><ROW><id>9150157</id><snippet>format</snippet></ROW><ROW><id>9150157</id><snippet>string = ''.join('[{0}{1}]'.format(x[1:], self.obj[x]) for x in self.obj)
</snippet></ROW><ROW><id>9150237</id><snippet>-- questions/
 |-- models.py # holds common models, imports models from backend/models.py
 |-- admin.py # admin interface'
 |-- frontend/
 | |-- urls.py
 | |-- views.py
 | `-- ...
 `-- backend/
   |-- urls.py
   |-- views.py
   `-- models.py # holds specialist models. set Meta: app_label = 'questions.backend'
</snippet></ROW><ROW><id>9150389</id><snippet>list_=[5,4,6,3,7]
swap(list_[4],list_[2]) # this is absolutely the same as
swap(7,6)
</snippet></ROW><ROW><id>9150389</id><snippet>list_[4]</snippet></ROW><ROW><id>9150389</id><snippet>7</snippet></ROW><ROW><id>9150389</id><snippet>list_</snippet></ROW><ROW><id>9150389</id><snippet>def swap(data, i1, i2):
    data[i1], data[i2] = data[i2], data[i1]

swap(list_, 4,2) # swaps list index 4 and 2
</snippet></ROW><ROW><id>9150411</id><snippet>initial_data.json</snippet></ROW><ROW><id>9150481</id><snippet>import cStringIO
import base64

pixBuf = gtkImage.get_pixbuf()

fH = cStringIO.StringIO() 
pixBuf.save_to_callback(fH.write, "png") 
encodedBuffer = base64.b64encode(fH.getvalue()) #base64 encoded png
</snippet></ROW><ROW><id>9150806</id><snippet>f = open('file.pkl', 'w')
pickle.dump(cfd, f)
f.close()
</snippet></ROW><ROW><id>9150806</id><snippet>f = open('file.pkl', 'r')
cfd = pickle.load(cfd)
f.close()
</snippet></ROW><ROW><id>9150934</id><snippet>static void Main(string[] args)
{
    UInt64 EsnDec = 2161133276;
    Console.WriteLine(EsnDec);
    //Convert to String
    string Esn = EsnDec.ToString();
    Esn = "80" + Esn.Substring(Esn.Length - 6);
    //Convert back to UInt64
    EsnDec = Convert.ToUInt64(Esn);
    Console.WriteLine(EsnDec);
    Console.ReadKey();
}
</snippet></ROW><ROW><id>9151043</id><snippet>In [1]: import sq[TAB]
Caching the list of root modules, please wait!
(This will only be done once - type '%rehashx' to reset cache!)
</snippet></ROW><ROW><id>9151043</id><snippet>%rehashx</snippet></ROW><ROW><id>9151123</id><snippet>import   os

for xxx in EXl:
    filesize= os.path.getsize(xxx)
    print (filesize);
</snippet></ROW><ROW><id>9151126</id><snippet>documents = [sub_list[0] for sub_list in documents]
</snippet></ROW><ROW><id>9151126</id><snippet>temp = []
for sub_list in documents:
    temp.append(sub_list[0])
documents = temp
</snippet></ROW><ROW><id>9151206</id><snippet>from commandlog.models import CommandLogEntry
class LoggedBaseCommand(Command):

    def handle(self, *args, **options):
        # 'started' ought to be automatic, 'ended' and 'success' not yet determined.
        c = CommandLogEntry(name = __file__)
        result = "FAIL"
        try:
            result = self.handle_and_log(*args, **options)
        except: 
            pass
        c.success = result
        c.ended = datetime.datetime.now()
        c.save()

    def handle_and_log(self, *args, **options):
        # All of your child classes use this.
</snippet></ROW><ROW><id>9151206</id><snippet>__file__</snippet></ROW><ROW><id>9151206</id><snippet>re</snippet></ROW><ROW><id>9151206</id><snippet>handle_and_log()</snippet></ROW><ROW><id>9151653</id><snippet>replace</snippet></ROW><ROW><id>9151653</id><snippet>&gt;&gt;&gt; '1**0*'.replace('*', '[01]')
'1[01][01]0[01]'
</snippet></ROW><ROW><id>9151653</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = '1**0*'.replace('*', '[01]')
&gt;&gt;&gt; bool(re.match(pattern, '00000'))
False
&gt;&gt;&gt; bool(re.match(pattern, '10000'))
True
</snippet></ROW><ROW><id>9151653</id><snippet>[01]</snippet></ROW><ROW><id>9151726</id><snippet>class ClickLabel(QLabel):

    clicked = pyqtSignal()

    def __init__(self, *args, **kwargs)
        super(ClickLabel, self).__init__(*args, **kwargs)

    def mousePressEvent(self, event):
        event.accept()
        self.clicked.emit()
</snippet></ROW><ROW><id>9151796</id><snippet>if total &gt; 9:
    keepsumming(total)  # you need return here!
</snippet></ROW><ROW><id>9151796</id><snippet>while number &gt;= 10:
  number = sum(int(c) for c in str(number))
</snippet></ROW><ROW><id>9151796</id><snippet>while number &gt;= 10:
  total = 0
  while number:
    number, digit = divmod(number, 10)
    total += digit
  number = total
</snippet></ROW><ROW><id>9151796</id><snippet>def digits(number, base = 10):
  while number:
    yield number % base
    number //= base

number = 12345

# sum digits
print sum(digits(number))
# multiply digits
from operator import mul
print reduce(mul, digits(number), 1)
</snippet></ROW><ROW><id>9151796</id><snippet>def keepsumming(number, base = 10):
  if number &lt; base:
    return number
  return keepsumming(sum(digits(number, base)), base)
</snippet></ROW><ROW><id>9151796</id><snippet>def keepsumming(number, base = 10):
  while number &gt;= base:
    number = sum(digits(number, base))
</snippet></ROW><ROW><id>9151796</id><snippet>def keepsumming(number, base = 10):
  return 1 + (number - 1) % (b - 1)
</snippet></ROW><ROW><id>9151907</id><snippet>ca_certs</snippet></ROW><ROW><id>9151907</id><snippet>print httplib2.__version__</snippet></ROW><ROW><id>9152372</id><snippet>&lt;operation&gt; if &lt;condition&gt; else &lt;operation&gt;
</snippet></ROW><ROW><id>9152372</id><snippet>x = max(y, z)
</snippet></ROW><ROW><id>9152372</id><snippet>x = z if z &gt; y else y
</snippet></ROW><ROW><id>9152440</id><snippet>now = datetime.now()
previous_midnight = datetime.datetime( now.year, now.month, now.day )
</snippet></ROW><ROW><id>9152440</id><snippet>time.mktime</snippet></ROW><ROW><id>9152440</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; time_now = datetime.now()
&gt;&gt;&gt; time_at_start_of_today_local = datetime( n.year, n.month, n.day )
&gt;&gt;&gt; epochal_time_now = time.mktime( time_now.timetuple() )
&gt;&gt;&gt; epochal_time_at_start_of_today_local = time.mktime( time_at_start_of_today.timetuple() )
&gt;&gt;&gt; hours_since_start_of_day_today = (epochal_time_at_start_of_today_local - epochal_time_now) / 60 / 60
12.975833333333332
</snippet></ROW><ROW><id>9152440</id><snippet>&gt;&gt;&gt; time_at_start_of_today_utc = time_at_start_of_today_local - time.timezone
</snippet></ROW><ROW><id>9152486</id><snippet># Get a dictionary 
myList = [{'age':x} for x in range(1,10)]

# Enumerate ages
for i, age in enumerate(d['age'] for d in myList): 
    print i,age
</snippet></ROW><ROW><id>9152531</id><snippet>for word in words:
    if html.count(word)&gt;1:
        #your logic goes here
</snippet></ROW><ROW><id>9152531</id><snippet>&gt;&gt;&gt; words =['the.cat.and.hat']
&gt;&gt;&gt; html = 'the.cat.and.hat'
&gt;&gt;&gt; for w in words:
...       if html.count(w)&gt;1:
...           print 'more than one match'
...       elif html.count(w) == 1:
...           print 'only one match found'
...       else:
...           print 'no match found'
...
only one match found
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9152640</id><snippet>global</snippet></ROW><ROW><id>9152640</id><snippet>import ChangeVar

ChangeVar.Print()
ChangeVar.Print()

ChangeVar.Change()

ChangeVar.Print()
ChangeVar.Print()
</snippet></ROW><ROW><id>9152640</id><snippet>global</snippet></ROW><ROW><id>9152640</id><snippet># ChangeVar.py
class ChangeVar(object):
    def __init__(self):
        self.Print=self.Print1

    def Print1(self):
        print "1--"

    def Print2(self):
        print "2--"

    def Change(self):
        self.Print=self.Print2
</snippet></ROW><ROW><id>9152640</id><snippet>#UseVar.py
from ChangeVar import ChangeVar

cv = ChangeVar()
cv.Print()
cv.Print()

cv.Change()

cv.Print()
cv.Print()
</snippet></ROW><ROW><id>9152640</id><snippet>lowercase_with_underscores</snippet></ROW><ROW><id>9152640</id><snippet>lowercase</snippet></ROW><ROW><id>9152717</id><snippet>import urlparse

def url_rev(pubdate, slug):
    return urlparse.urljoin('http://mysite.com',
                            '/%s/%s/%s/%s/'%(pubdate.year, pubdate.month, pubdate.day, slug))
</snippet></ROW><ROW><id>9152717</id><snippet>uri_for</snippet></ROW><ROW><id>9152717</id><snippet>url_for</snippet></ROW><ROW><id>9152823</id><snippet>auto_import=True</snippet></ROW><ROW><id>9152823</id><snippet>db.define_table()</snippet></ROW><ROW><id>9152961</id><snippet>def map_failure(ff):
    return {'Test Suite': ff['Test Suite'], 'Test': ff['Test'],
            'Failure': failure, 'Project': 'project'}

mappedFailures = [map_failure(ff) for ff in fixedFailures]
</snippet></ROW><ROW><id>9153138</id><snippet>import numpy
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d

def peaks(x,y):
    return x * numpy.sin(y)

fig = plt.figure()
ax = fig.gca(projection='3d')
X = Y= numpy.arange(-3, 3, 0.1).tolist()
X, Y = numpy.meshgrid(X, Y)

Z = []
for i in range(len(X)):
    Z.append(peaks(X[i],Y[i]))

ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)
cset = ax.contour(X, Y, Z, zdir='z', offset=-8)
cset = ax.contour(X, Y, Z, zdir='x', offset=-8)
cset = ax.contour(X, Y, Z, zdir='y', offset=8)

ax.set_xlabel('X')
ax.set_xlim(-8, 8)
ax.set_ylabel('Y')
ax.set_ylim(-8, 8)
ax.set_zlabel('Z')
ax.set_zlim(-8, 8)

plt.show()
</snippet></ROW><ROW><id>9153465</id><snippet>open</snippet></ROW><ROW><id>9153465</id><snippet>import re

for path in paths:
    with open(path) as f:
        for line in f:
            if re.match('(.*)version(.*)', line):
                print line
</snippet></ROW><ROW><id>9153465</id><snippet>paths</snippet></ROW><ROW><id>9153630</id><snippet>import os
from os import path
</snippet></ROW><ROW><id>9153630</id><snippet>os.path</snippet></ROW><ROW><id>9153630</id><snippet>os</snippet></ROW><ROW><id>9153630</id><snippet>path</snippet></ROW><ROW><id>9153630</id><snippet># this will make your package available on your pythonpath
sys.path.append("/path/to/main_folder")
</snippet></ROW><ROW><id>9153630</id><snippet>from ui_sub_direcotory import menu

from domain_sub_directory import domain

import main
</snippet></ROW><ROW><id>9153682</id><snippet>zip(*your_list)[0]
</snippet></ROW><ROW><id>9153682</id><snippet>zip(*some_iterable)</snippet></ROW><ROW><id>9153682</id><snippet>[item[1:] for item in your_list]  # probably the best
zip(*zip(*your_list)[1:])  # tricky and probably slow one
</snippet></ROW><ROW><id>9153682</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; l = [[1, 23], [2, 34], [3, 45], [1, 45], [2, 44]]
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for item in l:
    d[item[0]] += item[1]

&gt;&gt;&gt; d.items()
[(1, 68), (2, 78), (3, 45)]
</snippet></ROW><ROW><id>9153682</id><snippet>defaultdict</snippet></ROW><ROW><id>9153682</id><snippet>d[item[0]] += item[1]</snippet></ROW><ROW><id>9153682</id><snippet>dict</snippet></ROW><ROW><id>9153682</id><snippet>KeyError</snippet></ROW><ROW><id>9153682</id><snippet>d</snippet></ROW><ROW><id>9153682</id><snippet>defaultdict</snippet></ROW><ROW><id>9153682</id><snippet>int()</snippet></ROW><ROW><id>9153682</id><snippet>0</snippet></ROW><ROW><id>9153849</id><snippet>\[(txt_.*?)\]
</snippet></ROW><ROW><id>9153863</id><snippet>Pool</snippet></ROW><ROW><id>9153863</id><snippet>multiprocessing</snippet></ROW><ROW><id>9153863</id><snippet>from multiprocessing import Pool
p = Pool(5)
def f(x):
     return x*x
p.map(f, [1,2,3])
</snippet></ROW><ROW><id>9153863</id><snippet>__name__</snippet></ROW><ROW><id>9153863</id><snippet>Process</snippet></ROW><ROW><id>9153863</id><snippet>def world_tick(self):
    if __name__ == '__main__':
        print "World tick"
        actor_chunk = len(self.actors)/self.numThreads
        if len(self.processes)==0:
            for _ in range(self.numThreads):
                new_process = multiprocessing.Process(WorldThread.WorldProcess.work, args=(_, self.actors[_*actor_chunk,(_+1)*actor_chunk]))
</snippet></ROW><ROW><id>9153863</id><snippet>class WorkArgs(object):
    ... many attributes follow ...

def proc_work(world_thread, work_args):
    world_thread.WorldProcess.work(work_args.a, work_args.b, ... etc)

p = Pool(5)
p.map(proc_work, [(world_thread, args0), (world_thread, args1), ...])
</snippet></ROW><ROW><id>9153863</id><snippet>__name__</snippet></ROW><ROW><id>9154101</id><snippet>import csv
spamReader = csv.reader(open('eggs.csv', 'rb'), delimiter=' ', quotechar='|')
for row in spamReader:
    print ', '.join(row)

Spam, Spam, Spam, Spam, Spam, Baked Beans
Spam, Lovely Spam, Wonderful Spam
</snippet></ROW><ROW><id>9154184</id><snippet>/([\[\(] *)?(RE|FWD?) *([-:;)\]][ :;\])-]*|$)|\]+ *$/igm
</snippet></ROW><ROW><id>9154184</id><snippet>m</snippet></ROW><ROW><id>9154184</id><snippet>$</snippet></ROW><ROW><id>9154184</id><snippet>([\[\(] *)?            # starting [ or (, followed by optional spaces
(RE|FWD?) *            # RE or FW or FWD, followed by optional spaces
([-:;)\]][ :;\])-]*|$) # only count it as a Re or FWD if it is followed by 
                       # : or - or ; or ] or ) or end of line
                       # (and after that you can have more of these symbols with
                       #  spaces in between)
|                      # OR
\]+ *$                 # match any trailing \] at end of line 
                       # (we assume the brackets () occur around a whole Re/Fwd
                       #  but the square brackets [] occur around the whole 
                       #  subject line)
</snippet></ROW><ROW><id>9154184</id><snippet>i</snippet></ROW><ROW><id>9154184</id><snippet>g</snippet></ROW><ROW><id>9154184</id><snippet>m</snippet></ROW><ROW><id>9154196</id><snippet>fliplr</snippet></ROW><ROW><id>9154196</id><snippet>import matplotlib.pyplot as plt
import numpy as np

im = np.flipud(plt.imread('so.jpg'))
plt.subplot(2, 1, 1)
plt.imshow(im)
plt.subplot(2, 1, 2)
plt.imshow(np.fliplr(im))
plt.show()
</snippet></ROW><ROW><id>9154521</id><snippet>for x in row: # NOT   in fileobj
    filesize = os.path.getsize(x)
</snippet></ROW><ROW><id>9154521</id><snippet>x = 0</snippet></ROW><ROW><id>9154548</id><snippet>enumerate</snippet></ROW><ROW><id>9154548</id><snippet>for idx, item in enumerate(iterable):
  pass
</snippet></ROW><ROW><id>9154548</id><snippet>xl = [item for item in xl if item not in yl]
</snippet></ROW><ROW><id>9154945</id><snippet>for word in lst:
    oldset.add(word)
    oldset = len(oldset)
</snippet></ROW><ROW><id>9154945</id><snippet>lst</snippet></ROW><ROW><id>9154945</id><snippet>oldset</snippet></ROW><ROW><id>9154945</id><snippet>oldset</snippet></ROW><ROW><id>9154945</id><snippet>int</snippet></ROW><ROW><id>9154945</id><snippet>oldset</snippet></ROW><ROW><id>9154945</id><snippet>oldset</snippet></ROW><ROW><id>9154945</id><snippet>set</snippet></ROW><ROW><id>9154945</id><snippet>int</snippet></ROW><ROW><id>9154945</id><snippet>set</snippet></ROW><ROW><id>9154945</id><snippet>int</snippet></ROW><ROW><id>9154997</id><snippet>set character_set_database = utf8;
set character_set_server = utf8;
set character_set_system = utf8;
set collation_database = utf8_general_ci;
set collation_server = utf8_general_ci;
set names utf8;
</snippet></ROW><ROW><id>9154997</id><snippet>db = MySQLdb.connect(host="localhost",
use_unicode = True, charset = "utf8",
user=username, passwd=password, db=database)
</snippet></ROW><ROW><id>9154997</id><snippet>print (yourStringFromDatabase).encode("iso-8859-1")
</snippet></ROW><ROW><id>9155099</id><snippet>variable = __import__('module').clazz.variable 
</snippet></ROW><ROW><id>9155489</id><snippet>import numpy

try:
  # your code that will (maybe) throw
except numpy.linalg.linalg.LinAlgError as err:
  if 'Singular matrix' in err.message:
    # your error handling block
  else:
    raise
</snippet></ROW><ROW><id>9155707</id><snippet>^</snippet></ROW><ROW><id>9155707</id><snippet>$</snippet></ROW><ROW><id>9155707</id><snippet>[]</snippet></ROW><ROW><id>9155707</id><snippet>^</snippet></ROW><ROW><id>9155707</id><snippet>-</snippet></ROW><ROW><id>9155707</id><snippet>\A</snippet></ROW><ROW><id>9155707</id><snippet>\Z</snippet></ROW><ROW><id>9155707</id><snippet>(^|[stuff])</snippet></ROW><ROW><id>9155707</id><snippet>($|[stuff])</snippet></ROW><ROW><id>9155909</id><snippet>'key' in dict</snippet></ROW><ROW><id>9155909</id><snippet>True</snippet></ROW><ROW><id>9155909</id><snippet>'key'</snippet></ROW><ROW><id>9155909</id><snippet>dict</snippet></ROW><ROW><id>9155909</id><snippet>False</snippet></ROW><ROW><id>9155909</id><snippet>raw = "test@example.com:Full Name:shortname\ntest2@example.com:Another Full Name:anothershortname\ntest@example.com:Foo:bar"
newlines = raw.split("\n")
merged = {}
for message in newlines:
    message = message.split(":")
    if message[0] in merged:
        merged[message[0]].append([message[1], message[2]])
    else:
        merged[message[0]]=[[message[1], message[2]]]    
print merged
</snippet></ROW><ROW><id>9156428</id><snippet>a*x[i]**(b*x[i])</snippet></ROW><ROW><id>9156428</id><snippet>np.power</snippet></ROW><ROW><id>9156428</id><snippet>def func(x,a,b):
    return a*np.power(x,b*x)
</snippet></ROW><ROW><id>9156428</id><snippet>x</snippet></ROW><ROW><id>9156428</id><snippet>y</snippet></ROW><ROW><id>9156428</id><snippet>np.array(x)</snippet></ROW><ROW><id>9156466</id><snippet>r</snippet></ROW><ROW><id>9156466</id><snippet>\</snippet></ROW><ROW><id>9156466</id><snippet>\\</snippet></ROW><ROW><id>9156466</id><snippet>data = json.loads(r"""{ "entry":{ "etag":"W/\"A0UGRK47eCp7I9B9WiRrYU0.\"" } }""")</snippet></ROW><ROW><id>9156829</id><snippet>concerts = Concert.objects.filter(...)

concerts.order_by('venue__attribute') # ordering beyond PK.
concerts.filter(venue__name='foo') # filter by a value across the relationship
concerts.values_list('venue__name') # get just venue names
concerts.values('venue__city').annotate() # get unique values across the venue

concerts.filter(venue__more__relationships='foo')

Venue.objects.filter(concert__name='Coachella') # reverse lookups work too

# with an integer field for Concert.venue, you'd have to do something like...
Venue.objects.filter(id__in=Concert.objects.filter(name='Coachella')) 
</snippet></ROW><ROW><id>9156829</id><snippet>class ConcertInline(admin.TabularInline):
    model = Concert

class VenueAdmin(admin.ModelAdmin):
    inlines = [ConcertInline]
    # that was quick!
</snippet></ROW><ROW><id>9157016</id><snippet>E-&gt;E+T.
T-&gt;T.*F
</snippet></ROW><ROW><id>9157052</id><snippet>i</snippet></ROW><ROW><id>9157052</id><snippet>project</snippet></ROW><ROW><id>9157052</id><snippet>{% for client in i.client.all %}
    {{ client }}
{% endfor %}
</snippet></ROW><ROW><id>9157195</id><snippet>dict</snippet></ROW><ROW><id>9157195</id><snippet>class</snippet></ROW><ROW><id>9157195</id><snippet>data = {}
# Parse file
data['id'] = id_value;
data['date'] = date_value;
# ... and so on
</snippet></ROW><ROW><id>9157195</id><snippet>data</snippet></ROW><ROW><id>9157195</id><snippet>str</snippet></ROW><ROW><id>9157195</id><snippet>unicode</snippet></ROW><ROW><id>9157195</id><snippet>TEXT</snippet></ROW><ROW><id>9157195</id><snippet>VARCHAR</snippet></ROW><ROW><id>9157277</id><snippet>try:
    try:
      raise ValueError;  # something bad...
    except ValueError as err:
      err.message=err.message+" hello"
      raise              # re-raise current exception
except ValueError as e:
    print(" got error of type "+ str(type(e))+" with message " +e.message)
</snippet></ROW><ROW><id>9157277</id><snippet>err</snippet></ROW><ROW><id>9157277</id><snippet>ValueError</snippet></ROW><ROW><id>9157277</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>9157277</id><snippet>err</snippet></ROW><ROW><id>9157277</id><snippet>err.problematic_array=[1,2,3]</snippet></ROW><ROW><id>9157277</id><snippet>.message</snippet></ROW><ROW><id>9157277</id><snippet>ValueError</snippet></ROW><ROW><id>9157277</id><snippet>try:
    try:
      raise ValueError;
    except ValueError as err:
       if not err.args: 
           err.args=('',)
       err.args = (err.args[0] + "hello",)+err.args[1:]
       raise 
except ValueError as e:
    print(" error was "+ str(type(e))+str(e.args))
</snippet></ROW><ROW><id>9157305</id><snippet>UnicodeEncodeError: 'latin-1' codec can't encode character u'\u2026' 
in position 35: ordinal not in range(256)
</snippet></ROW><ROW><id>9157305</id><snippet>\u2026</snippet></ROW><ROW><id>9157305</id><snippet>U+2026 HORIZONTAL ELLIPSIS</snippet></ROW><ROW><id>9157305</id><snippet>?charset=utf8</snippet></ROW><ROW><id>9157305</id><snippet>import sqlalchemy
from sqlalchemy import create_engine, MetaData, Table

db = create_engine('mysql://user:pass@localhost/db?charset=utf8')
</snippet></ROW><ROW><id>9157305</id><snippet>mysql</snippet></ROW><ROW><id>9157305</id><snippet>mysql-python</snippet></ROW><ROW><id>9157305</id><snippet>mysql-python</snippet></ROW><ROW><id>9157305</id><snippet>{charset: 'utf8'}</snippet></ROW><ROW><id>9157305</id><snippet>charset</snippet></ROW><ROW><id>9157305</id><snippet>latin-1</snippet></ROW><ROW><id>9157305</id><snippet>?charset=utf8</snippet></ROW><ROW><id>9157305</id><snippet>connect()</snippet></ROW><ROW><id>9157305</id><snippet>U+2026 HORIZONTAL ELLIPSIS</snippet></ROW><ROW><id>9157305</id><snippet>cp1252</snippet></ROW><ROW><id>9157305</id><snippet>\x85</snippet></ROW><ROW><id>9157305</id><snippet>U+2026 HORIZONTAL ELLIPSIS</snippet></ROW><ROW><id>9157305</id><snippet>literal</snippet></ROW><ROW><id>9157305</id><snippet>unicode_literal</snippet></ROW><ROW><id>9157338</id><snippet>StringIO</snippet></ROW><ROW><id>9157338</id><snippet>Dummy_Writer</snippet></ROW><ROW><id>9157338</id><snippet>StringIO</snippet></ROW><ROW><id>9157338</id><snippet>cStringIO</snippet></ROW><ROW><id>9157338</id><snippet>StringIO</snippet></ROW><ROW><id>9157475</id><snippet>http://ftp.gnome.org/pub/GNOME/binaries/win32/pygtk/2.24/pygtk-all-in-one-2.24.1.win32-py2.6.msi
</snippet></ROW><ROW><id>9157475</id><snippet>.sig</snippet></ROW><ROW><id>9158198</id><snippet>secondr_table = Candidate._descriptor.find_relationship('voters').secondary_table
cands_by_rank = (
    session.query(
        Candidate.id,
        func.count(secondr_table.c.candidate_id).label('total')
    )
    .join(secondr_table)
    .group_by(Candidate)
    .order_by('total DESC')
</snippet></ROW><ROW><id>9158203</id><snippet>\n</snippet></ROW><ROW><id>9158203</id><snippet>quoting=csv.QUOTE_NONNUMERIC</snippet></ROW><ROW><id>9158203</id><snippet>\r\n</snippet></ROW><ROW><id>9158203</id><snippet>dialect.lineterminator</snippet></ROW><ROW><id>9158203</id><snippet>\r\n</snippet></ROW><ROW><id>9158203</id><snippet>io.StringIO</snippet></ROW><ROW><id>9158203</id><snippet>&gt;&gt;&gt; from io import StringIO as S
&gt;&gt;&gt; import os
&gt;&gt;&gt; print(repr(os.linesep))
'\r\n'
&gt;&gt;&gt; ss = [S()] + [S(newline=nl) for nl in (None, '', '\n', '\r', '\r\n')]
&gt;&gt;&gt; for x, s in enumerate(ss):
...     m = s.write('foo\nbar\rzot\r\n')
...     v = s.getvalue()
...     print(x, m, len(v), repr(v))
...
0 13 13 'foo\nbar\rzot\r\n'
1 13 12 'foo\nbar\nzot\n'
2 13 13 'foo\nbar\rzot\r\n'
3 13 13 'foo\nbar\rzot\r\n'
4 13 13 'foo\rbar\rzot\r\r'
5 13 15 'foo\r\nbar\rzot\r\r\n'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9158203</id><snippet>newline</snippet></ROW><ROW><id>9158203</id><snippet>\n</snippet></ROW><ROW><id>9158203</id><snippet>'\n'</snippet></ROW><ROW><id>9158203</id><snippet>os.linesep</snippet></ROW><ROW><id>9158203</id><snippet>newline=None</snippet></ROW><ROW><id>9158203</id><snippet>newline=''</snippet></ROW><ROW><id>9158203</id><snippet>'\n'</snippet></ROW><ROW><id>9158203</id><snippet>''</snippet></ROW><ROW><id>9158203</id><snippet>'\n'</snippet></ROW><ROW><id>9158203</id><snippet>newline</snippet></ROW><ROW><id>9158203</id><snippet>open()</snippet></ROW><ROW><id>9158203</id><snippet>os.linesep</snippet></ROW><ROW><id>9158203</id><snippet>newline=''</snippet></ROW><ROW><id>9158203</id><snippet>open()</snippet></ROW><ROW><id>9158331</id><snippet>findfile.py</snippet></ROW><ROW><id>9158331</id><snippet>Argumentparser</snippet></ROW><ROW><id>9158331</id><snippet>parser.add_argument('debug', action='store_true')
</snippet></ROW><ROW><id>9158331</id><snippet>import findfile
findfile._args = parser.parse_args()
</snippet></ROW><ROW><id>9158331</id><snippet>_args.debug</snippet></ROW><ROW><id>9158331</id><snippet>False</snippet></ROW><ROW><id>9158331</id><snippet>AttributeError: 'dict' object has no attribute 'debug'</snippet></ROW><ROW><id>9158331</id><snippet>dict</snippet></ROW><ROW><id>9158331</id><snippet>Namespace</snippet></ROW><ROW><id>9158331</id><snippet>Namespace</snippet></ROW><ROW><id>9158331</id><snippet>&gt;&gt;&gt; d = {'apple': 'red'}
&gt;&gt;&gt; d['apple']
'red'
&gt;&gt;&gt; from argparse import Namespace
&gt;&gt;&gt; ns = Namespace(apple='red')
&gt;&gt;&gt; ns.apple
'red'
</snippet></ROW><ROW><id>9158407</id><snippet>sint32</snippet></ROW><ROW><id>9158407</id><snippet>sint64</snippet></ROW><ROW><id>9158407</id><snippet>int32</snippet></ROW><ROW><id>9158407</id><snippet>int64</snippet></ROW><ROW><id>9158407</id><snippet>uint32</snippet></ROW><ROW><id>9158407</id><snippet>uint64</snippet></ROW><ROW><id>9158407</id><snippet>message Naked {}</snippet></ROW><ROW><id>9158748</id><snippet>None</snippet></ROW><ROW><id>9158748</id><snippet>else</snippet></ROW><ROW><id>9158748</id><snippet> if re.match('(.*)4.30.1(.*)', line):
            print 'The version match: '+ line
 else:
            print 'incorrect version'
</snippet></ROW><ROW><id>9158748</id><snippet>      #first line
      with open(x) as f:
           try:
               #next(f) returns the first line of f, you have to handle the exception in case of empty file
               if re.match('(.*)4.30.1(.*)', next(f))):
                    print 'The version match: '+ line
               else:
                    print 'incorrect version'
           except StopIteration:
               print 'File %s is empty' % s


      #anything
      with open(x) as f:
           if re.match('(.*)4.30.1(.*)', f.read())):
                print 'The version match: '+ line
           else:
                print 'incorrect version'
</snippet></ROW><ROW><id>9159217</id><snippet>__range</snippet></ROW><ROW><id>9159217</id><snippet>import datetime
date = datetime.date.today()
start_week = date - datetime.timedelta(date.weekday())
end_week = start_week + datetime.timedelta(7)
entries = Entry.objects.filter(created_at__range=[start_week, end_week])
</snippet></ROW><ROW><id>9159633</id><snippet>ar = index = [0]*n
</snippet></ROW><ROW><id>9159633</id><snippet>ar = [0]*n
index = [0]*n
</snippet></ROW><ROW><id>9159633</id><snippet>&gt;&gt;&gt; a = b = [0] * 5
&gt;&gt;&gt; a
[0, 0, 0, 0, 0]
&gt;&gt;&gt; b
[0, 0, 0, 0, 0]
&gt;&gt;&gt; a[1] = 2
&gt;&gt;&gt; a
[0, 2, 0, 0, 0]
&gt;&gt;&gt; b
[0, 2, 0, 0, 0]
</snippet></ROW><ROW><id>9159633</id><snippet>;</snippet></ROW><ROW><id>9159633</id><snippet>s = raw_input().strip().split(' ')
ar = [(int(num),i) for i,num in enumerate(s)]
ar.sort()
print [a[1] for a in ar[:5]]
</snippet></ROW><ROW><id>9159809</id><snippet>chmod</snippet></ROW><ROW><id>9159809</id><snippet>C:\</snippet></ROW><ROW><id>9159834</id><snippet>words = ["Testing"]
br.open ('http://www.example.com/browse.php?psec=2&amp;search=%s' % words)
html = br.response().read()
soup = BeautifulSoup(html)
filtered = soup.findAll('b')
"""element.contents[0] gives you the  first element inside the &lt;b&gt; tags
If you want some other part of inside the b tag see  
BeatifulSoup documentation at the line below """
filteredcontents = [element.contents[0] for element in filtered]

for word in words:
    if any(word in filteredcontent for filteredcontent in filteredcontents):
        print "%s found." % word
    else:
        print "%s not found." % word
</snippet></ROW><ROW><id>9160208</id><snippet>json</snippet></ROW><ROW><id>9160208</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('["Newyork","Delhi","paris"]')
['Newyork', 'Delhi', 'paris']
</snippet></ROW><ROW><id>9160286</id><snippet>feedback</snippet></ROW><ROW><id>9160286</id><snippet>feedback=feedback+s.recv(1024)
</snippet></ROW><ROW><id>9160286</id><snippet>if feedback.find("say hello Data") != -1:</snippet></ROW><ROW><id>9160286</id><snippet>feedback=""</snippet></ROW><ROW><id>9160293</id><snippet>In [68]: re.match('((?P&lt;user&gt;.*):)((?P&lt;pass&gt;.*)@)((?P&lt;host&gt;.*)/)((?P&lt;db&gt;.*))', "username:p@ssword@host/data").groupdict()
Out[68]: {'db': 'data', 'host': 'host', 'pass': 'p@ssword', 'user': 'username'}
</snippet></ROW><ROW><id>9160426</id><snippet>python2.7</snippet></ROW><ROW><id>9160426</id><snippet>python2.7 setup.py install</snippet></ROW><ROW><id>9160431</id><snippet>_</snippet></ROW><ROW><id>9160431</id><snippet>_</snippet></ROW><ROW><id>9160431</id><snippet>&lt;_sre.SRE_Match object at 0x23cb238&gt;</snippet></ROW><ROW><id>9160431</id><snippet>rec.match</snippet></ROW><ROW><id>9160431</id><snippet>_</snippet></ROW><ROW><id>9160515</id><snippet>platform</snippet></ROW><ROW><id>9160759</id><snippet>"\x66\x89".decode("utf-8", "replace")</snippet></ROW><ROW><id>9160759</id><snippet>json_output</snippet></ROW><ROW><id>9160824</id><snippet>byte[] hashA, hashB, hashC;

using (var sha = new SHA256Managed())
{
    hashA = sha.ComputeHash(Encoding.UTF8.GetBytes(yy + xx));
    hashB = sha.ComputeHash(Encoding.UTF8.GetBytes(yy + xx + yy));
    hashC = sha.ComputeHash(Encoding.UTF8.GetBytes(yy + xx + yy + xx));
}
</snippet></ROW><ROW><id>9160824</id><snippet>hashlib</snippet></ROW><ROW><id>9160824</id><snippet>copy</snippet></ROW><ROW><id>9160824</id><snippet>update</snippet></ROW><ROW><id>9160824</id><snippet>digest</snippet></ROW><ROW><id>9160824</id><snippet>hashlib</snippet></ROW><ROW><id>9160942</id><snippet>pack</snippet></ROW><ROW><id>9160942</id><snippet>grid</snippet></ROW><ROW><id>9160942</id><snippet>place</snippet></ROW><ROW><id>9160942</id><snippet>Frame</snippet></ROW><ROW><id>9160942</id><snippet>pack_ forget</snippet></ROW><ROW><id>9160942</id><snippet>grid_forget</snippet></ROW><ROW><id>9160942</id><snippet>pack</snippet></ROW><ROW><id>9160942</id><snippet>grid</snippet></ROW><ROW><id>9160942</id><snippet>grid_remove</snippet></ROW><ROW><id>9161211</id><snippet>output, error = proc.communicate()
</snippet></ROW><ROW><id>9161269</id><snippet>re.search('e', file)
</snippet></ROW><ROW><id>9161269</id><snippet>re.search('e', line)
             # ^^^^
</snippet></ROW><ROW><id>9161290</id><snippet>import coverage</snippet></ROW><ROW><id>9161290</id><snippet>$ coverage run my_prog.py arg1 arg2 ...
</snippet></ROW><ROW><id>9161531</id><snippet>myvars = {}
with open("namelist.txt") as myfile:
    for line in myfile:
        name, var = line.partition("=")[::2]
        myvars[name.strip()] = float(var)
</snippet></ROW><ROW><id>9161531</id><snippet>myvars["var1"]</snippet></ROW><ROW><id>9161531</id><snippet>names = type("Names", [object], myvars)
</snippet></ROW><ROW><id>9161531</id><snippet>names.var1</snippet></ROW><ROW><id>9161666</id><snippet>import itertools as it    
[sum(r) for r in it.izip_longest(l[::2], l[1::2], fillvalue=0)]
</snippet></ROW><ROW><id>9161666</id><snippet>l = [1,2,3,4,5,6,7,8,9]    # [3, 7, 11, 15, 9]
l = [1,2,3,4,5,6,7,8,9,10] # [3, 7, 11, 15, 19]
</snippet></ROW><ROW><id>9161666</id><snippet>islice</snippet></ROW><ROW><id>9161666</id><snippet>[sum(r) for r in it.izip_longest(it.islice(l,0,None,2), it.islice(l,1,None,2), fillvalue=0)]
</snippet></ROW><ROW><id>9161666</id><snippet>l = [1,2,3,4,5,6,7,8,9,10]
n = 3

[sum(l[i:i+n]) for i in xrange(0, len(l), n)]
# returns: [6, 15, 24, 10]
</snippet></ROW><ROW><id>9162098</id><snippet>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; Template(r'\textbf{This and that} plus \textbf{$val}').substitute(val='6')
'\\textbf{This and that} plus \\textbf{6}'
</snippet></ROW><ROW><id>9162098</id><snippet>&gt;&gt;&gt; r'\textbf{This and that} plus \textbf{val}'.format(val='6')
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
KeyError: 'This and that'
&gt;&gt;&gt; r'\textbf{{This and that}} plus \textbf{{{val}}}'.format(val='6')
'\\textbf{This and that} plus \\textbf{6}'
</snippet></ROW><ROW><id>9162530</id><snippet>import re

def evaluatesimple(s):
  return eval(s)

def evaluate(s):
  while 1:
    simplesums=re.findall("\[([^\]\[]*)\]",s)
    if (len(simplesums) == 0):
      break
    replacements=[('[%s]' % item,str(evaluatesimple(item))) for item in simplesums]
    for r in replacements:
      s = s.replace(*r)
  return s

print evaluate("[9+[7*3+[1+2]]-5]")
</snippet></ROW><ROW><id>9162530</id><snippet>def tokengen():
  for c in 'abcdefghijklmnopqrstuvwyxz':
    yield c

def makeexpressiontree(s):
  d=dict()
  tokens = tokengen()
  while 1:
    simplesums=re.findall("\[([^\]\[]*)\]",s)
    if (len(simplesums) == 0):
      break
    for item in simplesums:
      t = tokens.next()
      d[t] = item
      s = s.replace("[%s]"% item,t)
  return d

def evaltree(d):
  """A simple dumb way to show in principle how to evaluate the tree"""
  result=0
  ev={}
  for i,t in zip(range(len(d)),tokengen()):
    ev[t] = eval(d[t],ev)
    result = ev[t]
  return result

s="[9+[7*3+[1+2]]-5]"
print evaluate(s)
tree=makeexpressiontree(s)
print tree
print evaltree(tree)
</snippet></ROW><ROW><id>9162546</id><snippet>total = 0.0
while total &lt; 10000.0:
    ... # your code
    total += mn
</snippet></ROW><ROW><id>9162583</id><snippet>if os.path.exists(path):
   # then create the widget
</snippet></ROW><ROW><id>9162633</id><snippet>type</snippet></ROW><ROW><id>9162633</id><snippet>br.form['type'] = '22'
</snippet></ROW><ROW><id>9162633</id><snippet>br.form['type'] = ['22',]
</snippet></ROW><ROW><id>9162789</id><snippet>django.db.backends.sqlite3</snippet></ROW><ROW><id>9162858</id><snippet>c.execute('select * from stocks where price &gt; ?', (50,))

c.execute('select * from stocks where price between ? and ?', (40, 70))

c.execute('select * from stocks where price &gt; ? and symbol = ?', (50, 'IBM'))
</snippet></ROW><ROW><id>9163606</id><snippet>__setattr__</snippet></ROW><ROW><id>9163606</id><snippet>__setattr__</snippet></ROW><ROW><id>9163606</id><snippet>def setattr_deco(setattr_func):
    def setattr_wrapper(self, attr, value):
        if attr in self._descriptors:
            return object.__setattr__(self, attr, value)
        return setattr_func(self, attr, value)
    return setattr_wrapper

class MiscSetattr(type):
    def __new__(metacls, name, bases, dct):
        descriptors = set()
        for key, obj in dct.items():
            if key == "__setattr__":
                dct[key] = setattr_deco(obj)
            elif hasattr(obj, "__get__"):
                descriptors.add(key)
        dct["_descriptors"] = descriptors
        return type.__new__(metacls, name, bases, dct)

# and use MiscSetattr as metaclass for your classes
</snippet></ROW><ROW><id>9163719</id><snippet>python SpeedCheck.py
http://speedtest.wdc01.softlayer.com/downloads/test500.zip 60 0 1024 0.5 None True False
6.16535544395e-05 , 1024
0.179219538346 , 519029
0.131760507822 , 1038058
0.218291172758 , 2076116
0.623112553731 , 4152232
0.0 , 4152232
3323051.00679
</snippet></ROW><ROW><id>9163840</id><snippet>lines = map(str.strip(' '),map(str.lower,f1.readlines()))
</snippet></ROW><ROW><id>9163840</id><snippet>lines = map( lambda x: x.strip(' '), map(str.lower, f1.readlines()))
</snippet></ROW><ROW><id>9163840</id><snippet>strip</snippet></ROW><ROW><id>9163840</id><snippet>map</snippet></ROW><ROW><id>9163840</id><snippet>str</snippet></ROW><ROW><id>9163909</id><snippet>os.listdir()</snippet></ROW><ROW><id>9163909</id><snippet> Data = ReadInFiles(os.path.join(dirName, files))
</snippet></ROW><ROW><id>9163909</id><snippet>files</snippet></ROW><ROW><id>9163909</id><snippet>except</snippet></ROW><ROW><id>9163909</id><snippet>except IOError: "Can't read files"
</snippet></ROW><ROW><id>9163913</id><snippet>dict_of_lists_values[(list_a, list_b)] = lista.index(list_a) *  listb.index(list_b)
</snippet></ROW><ROW><id>9163913</id><snippet>for lists_data in dict_of_lists_values:
    print lists_data[0], ' holds ', dict_of_lists_values[lists_data], lists_data[1]
</snippet></ROW><ROW><id>9164034</id><snippet>property([fget[, fset[, fdel[, doc]]]])</snippet></ROW><ROW><id>9164034</id><snippet>object</snippet></ROW><ROW><id>9164034</id><snippet>class A(object):
   ...

class B(object):
    ...
</snippet></ROW><ROW><id>9164036</id><snippet>ScriptEngine engine = Python.CreateEngine();
ScriptSource script = engine.CreateScriptSourceFromFile("testScript.py");
ScriptScope scope = engine.CreateScope();

engine.SetSearchPaths(new string[] { "C:\\Program Files (x86)\\IronPython 2.7.1\\Lib" });
script.Execute(scope);
</snippet></ROW><ROW><id>9164186</id><snippet>az1, el1, az2, el2, rfsspe = data_point.split(";")[:5]
</snippet></ROW><ROW><id>9164272</id><snippet>listchars</snippet></ROW><ROW><id>9164761</id><snippet>In [2]: List=[['XD',1],['XD',3],['XD',2],['X5',2],['X5',3],['XT',2]]

In [3]: SortByList={'XD': 'A', 'XT':'B', 'XQ': 'C','X5': 'D'}

In [4]: sorted(List, key=lambda x:(SortByList[x[0]],x[1]))
Out[4]: [['XD', 1], ['XD', 2], ['XD', 3], ['XT', 2], ['X5', 2], ['X5', 3]]
</snippet></ROW><ROW><id>9164831</id><snippet>IMAGES_STORE = 'you dir path where you want to download images'
ITEM_PIPELINES = ['scrapy.contrib.pipeline.images.ImagesPipeline'] #enable image pipline
</snippet></ROW><ROW><id>9165113</id><snippet>Y</snippet></ROW><ROW><id>9165113</id><snippet>deriv</snippet></ROW><ROW><id>9165113</id><snippet>y</snippet></ROW><ROW><id>9165113</id><snippet>def deriv(Y,t): # return derivatives of the array Y
    a = -2.0
    b = -0.1
    return array([ Y[1], a*Y[0]+b*Y[1] ])
</snippet></ROW><ROW><id>9165113</id><snippet>deriv</snippet></ROW><ROW><id>9165113</id><snippet>Y = [y, y']</snippet></ROW><ROW><id>9165113</id><snippet>[y', y'']</snippet></ROW><ROW><id>9165113</id><snippet>y' = Y[1]</snippet></ROW><ROW><id>9165113</id><snippet>y'' = a*Y[0]+b*Y[1]</snippet></ROW><ROW><id>9165361</id><snippet>a = np.arange(10)
print a.base
None

b = a[2:9]
print b.base is a
True

c = b[:2]
print c.base is b
True
print c.base is a
False
</snippet></ROW><ROW><id>9165448</id><snippet>p.stdout</snippet></ROW><ROW><id>9165448</id><snippet>p.stderr</snippet></ROW><ROW><id>9165448</id><snippet>p.stdout.read()</snippet></ROW><ROW><id>9165448</id><snippet>p.stderr.read()</snippet></ROW><ROW><id>9165448</id><snippet>IOError</snippet></ROW><ROW><id>9165448</id><snippet>import fcntl, os

p = subprocess.Popen(args = exe,
                     stdout = subprocess.PIPE,
                     stderr = subprocess.PIPE,
                     cwd = dir)
fcntl.fcntl(p.stdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)
fcntl.fcntl(p.stderr.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)

outdata, errdata = '', ''
while p.poll() is None:
    try:
        outdata += p.stdout.read()
    except IOError:
        pass
    try:
        errdata += p.stderr.read()
    except IOError:
        pass
    time.sleep(sleepDuration)
</snippet></ROW><ROW><id>9165448</id><snippet>except IOError</snippet></ROW><ROW><id>9165493</id><snippet>izip_longest</snippet></ROW><ROW><id>9165493</id><snippet>import itertools as it
s = [l[n-i::n] for i in range(n)]
[sum(r) for r in it.izip_longest(*s, fillvalue=0)]
</snippet></ROW><ROW><id>9165493</id><snippet>f = lambda n,l: [sum(r) for r in it.izip_longest(*[l[i::n] for i in range(n)], fillvalue=0)]

&gt;&gt;&gt;f(3, range(1,7))
[6,15]
&gt;&gt;&gt;f(3, range(1,8))
[6,15, 7]
&gt;&gt;&gt;f(3, range(1,9))
[6,15,15]
&gt;&gt;&gt;f(4, range(1,8))
[10,18]
</snippet></ROW><ROW><id>9165662</id><snippet>readlines()</snippet></ROW><ROW><id>9165662</id><snippet># actually no need for readline() here, the file object can be
# directly used to iterate over the lines
keywords = (line.strip().lower() for line in f0)
# ...
for word in keywords:
  if re.search(r"\b"+word+r"\b",line1):
</snippet></ROW><ROW><id>9165662</id><snippet>map</snippet></ROW><ROW><id>9165662</id><snippet>filter</snippet></ROW><ROW><id>9165662</id><snippet>keywords = (line.strip() for line in f0)
# use re.escape here in case the keyword contains a special regex character
regex = r'\b({0})\b'.format('|'.join(map(re.escape, keywords)))
# pre-compile the regex (build up the state machine)
regex = re.compile(regex, re.IGNORECASE)

# inside the loop over the lines
if regex.search(line1)
  print "ok"
</snippet></ROW><ROW><id>9165816</id><snippet>global s, host, port</snippet></ROW><ROW><id>9165816</id><snippet>s</snippet></ROW><ROW><id>9165816</id><snippet>host</snippet></ROW><ROW><id>9165816</id><snippet>port</snippet></ROW><ROW><id>9165816</id><snippet>global</snippet></ROW><ROW><id>9165816</id><snippet>client.run</snippet></ROW><ROW><id>9165816</id><snippet>self.run()</snippet></ROW><ROW><id>9165816</id><snippet>while</snippet></ROW><ROW><id>9165816</id><snippet>import argparse
import socket    
import threading
import thread
import time   

class server(threading.Thread):
    def __init__(self, port):
        threading.Thread.__init__(self)
        self.s = socket.socket()        
        self.host = socket.gethostname() 
        self.port = port

    def run(self):
        print 'Server started!'
        print 'Waiting for clients...'

        self.s.bind((self.host, self.port))       
        self.s.listen(5)                 
        c, addr = self.s.accept()     
        print 'Got connection from', addr
        while True:
            time.sleep(2)
            msg = c.recv(1024)
            if len(msg) == 0 :  break
            print addr, ' &gt;&gt; ', msg

class client(threading.Thread):
    def __init__(self, port):
        threading.Thread.__init__(self)
        self.s = socket.socket()         
        self.host = socket.gethostname() 
        self.port = port

    def run(self):
        while True:
            time.sleep(5)
            print 'Connecting to ', self.host, self.port
            try:
                self.s.connect((self.host, self.port))
                break
            except Exception as err:
                print "Waiting", err
        print "Connectd"
        while True:
            time.sleep(2)
            msg = raw_input('CLIENT &gt;&gt; ')
            if len(msg) == 0:break
            self.s.send(msg)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--server_port', type = int, default = 8888)
    parser.add_argument('--client_port', type = int, default = 7777)
    args = parser.parse_args()

    thread1 = server(args.server_port)
    thread2 = client(args.client_port)

    thread1.start()
    thread2.start()

    thread1.join()
    thread2.join()
</snippet></ROW><ROW><id>9165816</id><snippet>test.py --server 8888 --client 7777
test.py --server 7777 --client 8888
</snippet></ROW><ROW><id>9165855</id><snippet>old_a.__class__=M.A
old_a.f()
</snippet></ROW><ROW><id>9165855</id><snippet>__init__</snippet></ROW><ROW><id>9165855</id><snippet>jsbueno</snippet></ROW><ROW><id>9165855</id><snippet>__init__</snippet></ROW><ROW><id>9165855</id><snippet>__new__</snippet></ROW><ROW><id>9165855</id><snippet>__class__</snippet></ROW><ROW><id>9165855</id><snippet>__del__</snippet></ROW><ROW><id>9166163</id><snippet>takeItem()</snippet></ROW><ROW><id>9166163</id><snippet>from PyQt4 import QtCore, QtGui
from functools import partial

class Dialog(QtGui.QDialog):

    DOWN    = 1
    UP      = -1

    def __init__(self, parent=None):
        super(Dialog, self).__init__(parent)
        self.resize(800,600)

        self.table = QtGui.QTableView(self)
        self.table.setSelectionBehavior(self.table.SelectRows)

        self.model = QtGui.QStandardItemModel(20, 6, self)
        self.table.setModel(self.model)

        self.upBtn = QtGui.QPushButton('Up', self)
        self.downBtn = QtGui.QPushButton('Down', self)

        self.mainLayout = QtGui.QVBoxLayout(self)
        self.mainLayout.addWidget(self.table)

        self.buttonLayout = QtGui.QHBoxLayout()
        self.buttonLayout.addWidget(self.upBtn)
        self.buttonLayout.addWidget(self.downBtn)
        self.mainLayout.addLayout(self.buttonLayout)

        self.upBtn.clicked.connect(partial(self.moveCurrentRow, self.UP))
        self.downBtn.clicked.connect(partial(self.moveCurrentRow, self.DOWN))

        self._initTable()

    def _initTable(self):
        for row in xrange(self.model.rowCount()):
            for col in xrange(self.model.columnCount()):
                item = QtGui.QStandardItem('%d_%d' % (row+1, col+1))
                self.model.setItem(row, col, item)

    def moveCurrentRow(self, direction=DOWN):
        if direction not in (self.DOWN, self.UP):
            return

        model = self.model
        selModel = self.table.selectionModel()
        selected = selModel.selectedRows()
        if not selected:
            return

        items = []
        indexes = sorted(selected, key=lambda x: x.row(), reverse=(direction==self.DOWN))

        for idx in indexes:
            items.append(model.itemFromIndex(idx))
            rowNum = idx.row()
            newRow = rowNum+direction
            if not (0 &lt;= newRow &lt; model.rowCount()):
                continue

            rowItems = model.takeRow(rowNum)
            model.insertRow(newRow, rowItems)

        selModel.clear()
        for item in items:
            selModel.select(item.index(), selModel.Select|selModel.Rows)


if __name__ == "__main__":
    app = QtGui.QApplication([])
    d = Dialog()
    d.show()
    d.raise_()
    app.exec_()
</snippet></ROW><ROW><id>9166163</id><snippet>functools.partial</snippet></ROW><ROW><id>9166163</id><snippet>takeRow()</snippet></ROW><ROW><id>9166179</id><snippet>Model</snippet></ROW><ROW><id>9166179</id><snippet>ModelAdmin</snippet></ROW><ROW><id>9166179</id><snippet>list_display</snippet></ROW><ROW><id>9166179</id><snippet>Model</snippet></ROW><ROW><id>9166179</id><snippet>from django.db.models import Sum

class Data(models.Model):
    ...

    # Method used by `get_current_year_sales` and `get_last_year_sales`
    # to stay DRY. Not for use directly in admin.
    def get_year_sales(self, year):
        qs = self.model._default_manager.filter(year=year)
        sales_agg = qs.aggregate(Sum('sales'))
        return sales_agg['sales__sum']

    # Method used by `get_current_quarter_sales` and `get_last_quarter_sales`
    # to stay DRY. Not for use directly in admin.
    def get_quarter_sales(self, year, quarter):
        qs = self.model._default_manager.filter(year=year, quarter=quarter)
        sales_agg = qs.aggregate(Sum('sales'))
        return sales_agg['sales__sum']

    def get_current_year_sales(self):
        return self.get_year_sales(datetime.now().year)
    get_current_year_sales.short_description = 'Sales (Current Year)'

    def get_last_year_sales(self):
        return self.get_year_sales(datetime.now().year-1)
    get_last_year_sales.short_description = 'Sales (Last Year)'

    def get_current_quarter_sales(self):
        # Determine current quarter logic here as `current_quarter`
        # `quarter_year` will likely be same as current year here,
        # but will need to be calculated for previous quarter
        return self.get_quarter_sales(quarter_year, current_quarter)
    get_current_quarter_sales.short_description = 'Sales (Current Quarter)'

    def get_current_quarter_sales(self):
        # Logic here to determine last quarter as `last_quarter`
        # Logic to determine what year last quarter was in as `quarter_year`
        return self.get_quarter_sales(quarter_year, last_quarter)
    get_last_quarter_sales.short_description = 'Sales (Last Quarter)'
</snippet></ROW><ROW><id>9166179</id><snippet>short_description</snippet></ROW><ROW><id>9166179</id><snippet>ModelAdmin</snippet></ROW><ROW><id>9166179</id><snippet>list_display</snippet></ROW><ROW><id>9166179</id><snippet>class DataAdmin(admin.ModelAdmin):
    ...
    list_display = ('subject', 'get_current_year_sales', 'get_last_year_sales', 'get_current_quarter_sales', 'get_last_quarter_sales')
</snippet></ROW><ROW><id>9166212</id><snippet>[item for index, item in enumerate(lst) if index not in plist]
</snippet></ROW><ROW><id>9166592</id><snippet>classmethod</snippet></ROW><ROW><id>9166592</id><snippet>class Parent(object):
    class_attribute = "parent"

    @classmethod
    def class_method(cls):
        print cls.class_attribute

class Child(Parent):
    class_attribute = "child"


&gt;&gt;&gt; Parent.class_method()
parent
&gt;&gt;&gt; Child.class_method()
child
</snippet></ROW><ROW><id>9166737</id><snippet>scatter</snippet></ROW><ROW><id>9166737</id><snippet>x, y, z = randn(100), randn(100), randn(100)
fig = plt.figure()
from mpl_toolkits.mplot3d import Axes3D
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z, c=randn(100))
plt.show()
</snippet></ROW><ROW><id>9166737</id><snippet>python -pylab</snippet></ROW><ROW><id>9166737</id><snippet>plot3D</snippet></ROW><ROW><id>9166977</id><snippet>email.py</snippet></ROW><ROW><id>9167024</id><snippet>ROWS = 200000
COLS = 100
PATLEN = 20
#random data for example's sake
a = np.random.rand(ROWS,COLS)
pattern = np.random.rand(PATLEN)

tmp = np.empty([ROWS, COLS-PATLEN])
for i in xrange(COLS-PATLEN):
    window = a[:,i:i+PATLEN]
    tmp[:,i] = np.sum((window-pattern)**2, axis=1)

result = np.sqrt(tmp)
</snippet></ROW><ROW><id>9167044</id><snippet>obj</snippet></ROW><ROW><id>9167044</id><snippet>age</snippet></ROW><ROW><id>9167044</id><snippet>//views.py : 
 def home(request):
    obj = Age.objects.all()[0]
    return render_to_response("base.html",{'obj': obj})

//base.html code :
&lt;body&gt;
{{ obj.age }}
&lt;/body&gt;
</snippet></ROW><ROW><id>9167383</id><snippet>import sys&lt;/p&gt;

&lt;p&gt;def process_group(list_in):
    if len(list_in):
        for rec in list_in:
            if rec.startswith("Tastes"):
                print "Tastes found for", list_in[0]
                return
        print "Tastes NOT found for", list_in[0]&lt;/p&gt;

&lt;p&gt;open_file = open("filename.txt", "r")&lt;/p&gt;

&lt;p&gt;group_list=[]
start_list=["CHEESECAKE", "DONUT"]
for line in open_file:
    for st in start_list:
        if line.upper().startswith(st):  ## process this group
            print (line)
            process_group(group_list)
            group_list=[]      ## an empty list for the next group
            x = raw_input(" Continue? ")
            if x == "n":
                sys.exit()
    group_list.append(line)&lt;/p&gt;

&lt;p&gt;process_group(group_list)  # process the last group
</snippet></ROW><ROW><id>9167593</id><snippet>file stream -&gt; line stream -&gt; CSV record stream -&gt; [transformator -&gt;] data stream</snippet></ROW><ROW><id>9167593</id><snippet>import csv
from collections import namedtuple

def csv_rows(infile, header):
    reader = csv.reader(infile, delimiter="\t")
    if header: next(reader)
    return reader

def data_sets(infile, header):
    gene_data = namedtuple("Data", 'id, name, q, start, end, sym')
    for row in csv_rows(infile, header):
        yield gene_data(*row)

def read_file_type1(infile, header=True):
    # for this file type, we only need to pass the caller the raw 
    # data objects
    return data_sets(infile, header)

def read_file_type2(infile, header=True):
    # for this file type, we have to pre-process the data sets 
    # before yielding them. A good way to express this is using a
    # generator expression (we could also add a filtering condition here)
    return (transform_data_set(x) for x in data_sets(infile, header))

# Usage sample:
with open("...", "r") as f:
  for obj in read_file_type1(f):
    print obj
</snippet></ROW><ROW><id>9167593</id><snippet>header</snippet></ROW><ROW><id>9167738</id><snippet>def test(dynamic, filename):
    return dynamic[:3] in filename
</snippet></ROW><ROW><id>9167912</id><snippet>Boost.Python</snippet></ROW><ROW><id>9167953</id><snippet>shell=True</snippet></ROW><ROW><id>9168046</id><snippet>oOutlook = CREATEOBJECT("Outlook.Application")
oNS = oOutlook.GetNameSpace("MAPI")
* You'll probably have to drill in and grab a reference
* to some object before calling whatever the method is
</snippet></ROW><ROW><id>9168167</id><snippet>self.myComboList = ["some", "list"]
for row in rows:
   self.myComboList.Append(row[1])
self.ComboList.sort()
self.myComboBoxWidget.AppendItems(self.ComboList)
</snippet></ROW><ROW><id>9168404</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_URL</snippet></ROW><ROW><id>9168404</id><snippet>django.views.static.serve</snippet></ROW><ROW><id>9168404</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_URL</snippet></ROW><ROW><id>9168404</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    ...
    'django.core.context_processors.static',
)
</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_URL</snippet></ROW><ROW><id>9168404</id><snippet>{{ STATIC_URL }}css/style.css</snippet></ROW><ROW><id>9168404</id><snippet>collectstatic</snippet></ROW><ROW><id>9168404</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>9168404</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>9168404</id><snippet>STATICFILES_DIRS = (
    os.path.join(os.path.dirname(__file__), 'assets'), # or whatever you named it
)
</snippet></ROW><ROW><id>9168404</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>9168404</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>9168404</id><snippet>FileField</snippet></ROW><ROW><id>9168404</id><snippet>ImageField</snippet></ROW><ROW><id>9168404</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>9168404</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_URL</snippet></ROW><ROW><id>9168404</id><snippet>$ python manage.py collectstatic
</snippet></ROW><ROW><id>9168404</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>9168490</id><snippet>def myMain(key):
    def ExecP1():
        pass
    def ExecP2():
        pass
    def ExecP3():
        pass
    def ExecPn():
        pass 
    locals()['Exec' + key]()
</snippet></ROW><ROW><id>9168599</id><snippet>import re
pieces = 'Ka4Qb3Td7b4c4'
m = re.compile('[A-Za-z]{1,2}\d+')
print m.findall(pieces)
</snippet></ROW><ROW><id>9168599</id><snippet>['Ka4', 'Qb3', 'Td7', 'b4', 'c4']
</snippet></ROW><ROW><id>9168705</id><snippet># from a shell
python -c "from PyQt4 import QtCore; print QtCore.PYQT_VERSION_STR, QtCore.QT_VERSION_STR; print QtCore.__file__"
</snippet></ROW><ROW><id>9168705</id><snippet>import sys
sys.path.insert(0, "/usr/lib/pymodules/python2.6")

from PyQt4 import QtCore
</snippet></ROW><ROW><id>9168804</id><snippet>class AbstractCustomerData( object ):
   """Generic features common to all customer data."""
</snippet></ROW><ROW><id>9168804</id><snippet>from the_master_copy import AbstractCustomerData

class ThisCustomerData( AbstractCustomerData ):
    """All the various kinds of overrides and whatnot."""
    def the_matching_rule( self, master_data_object_or_collection_or_whatever ):
        """This customer's override."""
</snippet></ROW><ROW><id>9168804</id><snippet>ThisCustomerData</snippet></ROW><ROW><id>9168804</id><snippet>import generic_stuff
from customer_module import ThisCustomerData, other_feature, yet_more
</snippet></ROW><ROW><id>9168882</id><snippet>self.move()</snippet></ROW><ROW><id>9168882</id><snippet>move()</snippet></ROW><ROW><id>9168882</id><snippet>move()</snippet></ROW><ROW><id>9168882</id><snippet>self.move()</snippet></ROW><ROW><id>9168882</id><snippet>self.</snippet></ROW><ROW><id>9168941</id><snippet>from django.template import RequestContext

# in a view
return render_to_response('base.html', context_instance = RequestContext(request))
</snippet></ROW><ROW><id>9168941</id><snippet>user</snippet></ROW><ROW><id>9168941</id><snippet>render</snippet></ROW><ROW><id>9168987</id><snippet>str</snippet></ROW><ROW><id>9168987</id><snippet>isinstance()</snippet></ROW><ROW><id>9168987</id><snippet>for</snippet></ROW><ROW><id>9168987</id><snippet>def iterate_no_strings(item):
    if issubclass(item, str):   # issubclass(item, basestring) for Py 2.x
        return iter([item])
    else:
        return iter(item)

for thing in iterate_no_strings(things):
    # do something...
</snippet></ROW><ROW><id>9169160</id><snippet>pack</snippet></ROW><ROW><id>9169160</id><snippet>progressbar.pack(side="bottom", fill="x")
</snippet></ROW><ROW><id>9169228</id><snippet>gud-break</snippet></ROW><ROW><id>9169228</id><snippet>C-x SPC</snippet></ROW><ROW><id>9169228</id><snippet>SPC</snippet></ROW><ROW><id>9169289</id><snippet>try:
    limit_default_value = 10
    limit = int(self.request.get('limit', limit_default_value))
except ValueError: #catch a string that does not like decimal
    limit = limit_default_value
</snippet></ROW><ROW><id>9169489</id><snippet>Table 12-2. Blocks Containing Han Ideographs

Block                                   | Range       | Comment
----------------------------------------+-------------+-----------------------------------------------------
CJK Unified Ideographs                  | 4E00–9FFF   | Common
CJK Unified Ideographs Extension A      | 3400–4DBF   | Rare
CJK Unified Ideographs Extension B      | 20000–2A6DF | Rare, historic
CJK Unified Ideographs Extension C      | 2A700–2B73F | Rare, historic
CJK Unified Ideographs Extension D      | 2B740–2B81F | Uncommon, some in current use
CJK Compatibility Ideographs            | F900–FAFF   | Duplicates, unifiable variants, corporate characters
CJK Compatibility Ideographs Supplement | 2F800–2FA1F | Unifiable variants
</snippet></ROW><ROW><id>9169489</id><snippet>Table 12-3. Small Extensions to the URO

Range     | Version | Comment
----------+---------+-------------------------------------------------
9FA6–9FB3 | 4.1     | Interoperability with HKSCS standard
9FB4–9FBB | 4.1     | Interoperability with GB 18030 standard
9FBC–9FC2 | 5.1     | Interoperability with commercial implementations
9FC3      | 5.1     | Correction of mistaken unification
9FC4–9FC6 | 5.2     | Interoperability with ARIB standard
9FC7–9FCB | 5.2     | Interoperability with HKSCS standard
</snippet></ROW><ROW><id>9169489</id><snippet>chinese = set(range(0x4E00, 0xA000) +
              range(0x3400, 0x4DC0) +
              range(0x20000, 0x2A6E0) +
              range(0x2A700, 0x2B740) +
              range(0x2B740, 0x2B820) +
              range(0xF900, 0xFB00) +
              range(0x2F800, 0x2FA20) +
              range(0x9FA6, 0x9FCC))
</snippet></ROW><ROW><id>9169489</id><snippet>&gt;&gt;&gt; ord(u'\U00002F800')
194560
</snippet></ROW><ROW><id>9169553</id><snippet>SafeLoader</snippet></ROW><ROW><id>9169553</id><snippet>Loader</snippet></ROW><ROW><id>9169553</id><snippet>import yaml

class PrettySafeLoader(yaml.SafeLoader):
    def construct_python_tuple(self, node):
        return tuple(self.construct_sequence(node))

PrettySafeLoader.add_constructor(
    u'tag:yaml.org,2002:python/tuple',
    PrettySafeLoader.construct_python_tuple)

doc = yaml.dump(tuple("foo bar baaz".split()))
print repr(doc)
thing = yaml.load(doc, Loader=PrettySafeLoader)
print thing
</snippet></ROW><ROW><id>9169553</id><snippet>'!!python/tuple [foo, bar, baaz]\n'
('foo', 'bar', 'baaz')
</snippet></ROW><ROW><id>9169553</id><snippet>&gt;&gt;&gt; yaml.SafeLoader.yaml_constructors
{None: &lt;unbound method SafeConstructor.construct_undefined&gt;,
 u'tag:yaml.org,2002:binary': &lt;unbound method SafeConstructor.construct_yaml_binary&gt;,
 u'tag:yaml.org,2002:bool': &lt;unbound method SafeConstructor.construct_yaml_bool&gt;,
 u'tag:yaml.org,2002:float': &lt;unbound method SafeConstructor.construct_yaml_float&gt;,
 u'tag:yaml.org,2002:int': &lt;unbound method SafeConstructor.construct_yaml_int&gt;,
 u'tag:yaml.org,2002:map': &lt;unbound method SafeConstructor.construct_yaml_map&gt;,
 u'tag:yaml.org,2002:null': &lt;unbound method SafeConstructor.construct_yaml_null&gt;,
 u'tag:yaml.org,2002:omap': &lt;unbound method SafeConstructor.construct_yaml_omap&gt;,
 u'tag:yaml.org,2002:pairs': &lt;unbound method SafeConstructor.construct_yaml_pairs&gt;,
 u'tag:yaml.org,2002:seq': &lt;unbound method SafeConstructor.construct_yaml_seq&gt;,
 u'tag:yaml.org,2002:set': &lt;unbound method SafeConstructor.construct_yaml_set&gt;,
 u'tag:yaml.org,2002:str': &lt;unbound method SafeConstructor.construct_yaml_str&gt;,
 u'tag:yaml.org,2002:timestamp': &lt;unbound method SafeConstructor.construct_yaml_timestamp&gt;}

&gt;&gt;&gt; yaml.Loader.yaml_constructors
{None: &lt;unbound method SafeConstructor.construct_undefined&gt;,
 u'tag:yaml.org,2002:binary': &lt;unbound method SafeConstructor.construct_yaml_binary&gt;,
 u'tag:yaml.org,2002:bool': &lt;unbound method SafeConstructor.construct_yaml_bool&gt;,
 u'tag:yaml.org,2002:float': &lt;unbound method SafeConstructor.construct_yaml_float&gt;,
 u'tag:yaml.org,2002:int': &lt;unbound method SafeConstructor.construct_yaml_int&gt;,
 u'tag:yaml.org,2002:map': &lt;unbound method SafeConstructor.construct_yaml_map&gt;,
 u'tag:yaml.org,2002:null': &lt;unbound method SafeConstructor.construct_yaml_null&gt;,
 u'tag:yaml.org,2002:omap': &lt;unbound method SafeConstructor.construct_yaml_omap&gt;,
 u'tag:yaml.org,2002:pairs': &lt;unbound method SafeConstructor.construct_yaml_pairs&gt;,
 u'tag:yaml.org,2002:python/bool': &lt;unbound method Constructor.construct_yaml_bool&gt;,
 u'tag:yaml.org,2002:python/complex': &lt;unbound method Constructor.construct_python_complex&gt;,
 u'tag:yaml.org,2002:python/dict': &lt;unbound method Constructor.construct_yaml_map&gt;,
 u'tag:yaml.org,2002:python/float': &lt;unbound method Constructor.construct_yaml_float&gt;,
 u'tag:yaml.org,2002:python/int': &lt;unbound method Constructor.construct_yaml_int&gt;,
 u'tag:yaml.org,2002:python/list': &lt;unbound method Constructor.construct_yaml_seq&gt;,
 u'tag:yaml.org,2002:python/long': &lt;unbound method Constructor.construct_python_long&gt;,
 u'tag:yaml.org,2002:python/none': &lt;unbound method Constructor.construct_yaml_null&gt;,
 u'tag:yaml.org,2002:python/str': &lt;unbound method Constructor.construct_python_str&gt;,
 u'tag:yaml.org,2002:python/tuple': &lt;unbound method Constructor.construct_python_tuple&gt;,
 u'tag:yaml.org,2002:python/unicode': &lt;unbound method Constructor.construct_python_unicode&gt;,
 u'tag:yaml.org,2002:seq': &lt;unbound method SafeConstructor.construct_yaml_seq&gt;,
 u'tag:yaml.org,2002:set': &lt;unbound method SafeConstructor.construct_yaml_set&gt;,
 u'tag:yaml.org,2002:str': &lt;unbound method SafeConstructor.construct_yaml_str&gt;,
 u'tag:yaml.org,2002:timestamp': &lt;unbound method SafeConstructor.construct_yaml_timestamp&gt;}
</snippet></ROW><ROW><id>9170020</id><snippet>os.path.islink()</snippet></ROW><ROW><id>9170081</id><snippet>subprocess</snippet></ROW><ROW><id>9170093</id><snippet>import xml.dom.minidom as minidom

#open the input csv/xml file
inputPath = '/path/to/xml.csv'
xml_csv = open(inputPath)

#open a output file in write mode
outputPath = '/path/to/contributors.xml'
outxml = open(outputPath,'w')

#create a new xml document and top level element
impl = minidom.getDOMImplementation()
newxml = impl.createDocument(None,'contributors',None)
top = newxml.documentElement

#loop through each line in the file splitting on commas
for line in xml_csv:
    xmlFields = line.split(',')

    for fldxml in xmlFields:
        #double double quotes caused the parser to choke, I'm replacing them here
        fldxml = fldxml.replace('""','"')

        #parse the xml data from each field and 
        #find all contributor elements under the top level
        dom = minidom.parseString(xmlfld)
        contributors = entry.getElementByTagName('contributor')

        #add each contributor to the new xml document
        for contributor in contributors:
            top.appendChild(contributor)

#write out the new xml contributors document in pretty XML
outxml.write(newxml.toprettyxml())
outxml.close()
</snippet></ROW><ROW><id>9170354</id><snippet>new_pixel_0 = media.get_pixel(new_pic, width - x_org, y_org)
</snippet></ROW><ROW><id>9170409</id><snippet>import json
import sys
import string
from time import strftime

scan_results = open("scan_results.txt", "r")
saved = sys.stdout
f = file('report.json', 'wb')
sys.stdout = f
dict2 = {} #Create one output dict
for line in scan_results:
    if ".jpg" in line:
        lst = []
        result = line.split('\\')
        result_split = result[5].split(' ')
        filename = result_split[0]
        raw_status = result_split[3]
        if "OK" in raw_status:
            status = "Okay"
            status_code = "0"
        dict2[filename] = {'FileName': filename, 'DateTime': strftime("%Y-%m-%d %H:%M:%S"), 'statusCode': status_code, 'Description': status} #Add to that dict.
print json.dumps(dict2) #Print it out at the end.
sys.stdout = saved
f.close()
print "JSON report written"
</snippet></ROW><ROW><id>9170433</id><snippet>class Foo
{
public:
  Foo ();
  int bar ();
  ...
};
</snippet></ROW><ROW><id>9170433</id><snippet>extern "C" {
typedef void *FooPtr;
FooPtr foo_new () { return (FooPtr)new Foo(); }
int foo_bar (FooPtr foo) { return ((Foo*)foo)-&gt;bar(); }
...
}
</snippet></ROW><ROW><id>9170444</id><snippet>functools.partial</snippet></ROW><ROW><id>9170480</id><snippet>class a_daemon():
    def __init__(self,last_line):
        print "initilizing.."
        self.last_line=last_line

    def run_me(self):
        print "running.."
        #while true, process lines, set last_line to current line being processesed.
        self.last_line='blah'

from contextlib import contextmanager

@contextmanager
def run_new_daemon():
    print "getting last line"
    last_line=open("last_line.txt").read() #you should get a "file does not exist" error the first time running this unless you created the file already

    my_daemon=a_daemon(last_line)
    yield my_daemon

    print "shutting down, writing last line to file."
    with open("last_line.txt",'w') as last_line_file:
        last_line_file.write(my_daemon.last_line)

with run_new_daemon() as my_daemon:
    my_daemon.run_me()
</snippet></ROW><ROW><id>9170531</id><snippet>header, output = client.request(twitterRequest, method="GET", body=None,
                            headers=None, force_auth_header=True)

# now write output to a file
twitterDataFile = open("twitterData.json", "w")
# magic happens here to make it pretty-printed
twitterDataFile.write(simplejson.dumps(simplejson.loads(output), indent=4, sort_keys=True))
twitterDataFile.close()
</snippet></ROW><ROW><id>9170694</id><snippet>combi()</snippet></ROW><ROW><id>9170879</id><snippet>f(x, y) -&gt; z</snippet></ROW><ROW><id>9170879</id><snippet>import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import random

def fun(x, y):
  return x**2 + y

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = y = np.arange(-3.0, 3.0, 0.05)
X, Y = np.meshgrid(x, y)
zs = np.array([fun(x,y) for x,y in zip(np.ravel(X), np.ravel(Y))])
Z = zs.reshape(X.shape)

ax.plot_surface(X, Y, Z)

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

plt.show()
</snippet></ROW><ROW><id>9170881</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {})
&gt;&gt;&gt; d.default_factory
&lt;type 'int'&gt;
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d.default_factory 
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>9170881</id><snippet>&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; d[10] = 3+4j
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {10: (3+4j)})
&gt;&gt;&gt; d[30]
0
&gt;&gt;&gt; d["fred"]
0
</snippet></ROW><ROW><id>9170884</id><snippet>search = 'Tom Clancy'
for sublist in list_of_books:
    if search in sublist[1]:
        print sublist
</snippet></ROW><ROW><id>9170884</id><snippet>if search.lower() in sublist[1].lower():
</snippet></ROW><ROW><id>9171006</id><snippet>result = None
with open("filename", 'r') as fh:
    result = [json.loads(line) for line in fh]
</snippet></ROW><ROW><id>9171006</id><snippet>map</snippet></ROW><ROW><id>9171006</id><snippet>result = None
with open("filename", 'r') as fh:
    result = map(json.loads, fh)
</snippet></ROW><ROW><id>9171196</id><snippet>numpy.linalg.norm</snippet></ROW><ROW><id>9171196</id><snippet>x.norm()</snippet></ROW><ROW><id>9171196</id><snippet>import numpy as np
x = np.array([1,2,3,4,5])
np.linalg.norm(x)
</snippet></ROW><ROW><id>9171196</id><snippet>order</snippet></ROW><ROW><id>9171196</id><snippet>np.linalg.norm(x,order=1)
</snippet></ROW><ROW><id>9171339</id><snippet>ctype = ContentType.objects.get_for_model(BlogPost)
blog_items = BlogPost.objects.filter(user=user_id).extra(select={
        'comment_count': """
        SELECT COUNT(*) AS comment_count
        FROM django_comments
        WHERE
            content_type_id=%s AND
            object_pk=blog_post.id
        """
        }, select_params=[ctype.pk])
</snippet></ROW><ROW><id>9171390</id><snippet> .*?([0-9]{1,})Y.*
</snippet></ROW><ROW><id>9171623</id><snippet>def divis_through_twenty(n):
  return any(n % x for x in xrange(20,1,-1))

x = 20
while divis_through_twenty(x):
  x += 20

print x
</snippet></ROW><ROW><id>9171804</id><snippet>start sorting</snippet></ROW><ROW><id>9171804</id><snippet>  def sortit(self):
        function = self.function[self.v.get()]
        result = function()
        num = ''.join('%4i' % num for num in result)
        self.label3 = Label(self, text=num, width=2, height=2)
        self.label3.grid(row=5, columnspan=10, sticky=W+E+N+S )
</snippet></ROW><ROW><id>9171804</id><snippet>self.v.get()</snippet></ROW><ROW><id>9171804</id><snippet> self.function = {0:self.bubble, 1:self.quick, 2:self.shell}
</snippet></ROW><ROW><id>9171804</id><snippet>result = function()</snippet></ROW><ROW><id>9171804</id><snippet>    def bubble(self):
        print('bubble to be implemented')
        return sorted(self.nums)

    def shell(self):
        print('shell to be implemented')
        return sorted(self.nums)

    def quick(self):
        print('quick to be implemented')
        return sorted(self.nums)
</snippet></ROW><ROW><id>9171804</id><snippet>import random
from tkinter import *

class Sorting(Frame):
    def __init__(self):
        Frame.__init__(self)
        self.function = {0:self.bubble, 1:self.quick, 2:self.shell}
        self.master.title("Sorting")
        self.master.rowconfigure(5, weight=1)
        self.master.columnconfigure(5, weight=1)
        self.grid(sticky=W+E+N+S )

        #label for sort intro
        self.label1 = Label(self, text="Select Sort", width=25, height=2)
        self.label1.grid(row=0, column=1, sticky=N)

        #Radio buttons for sorts
        self.v = IntVar()
        for indx, button in enumerate(('Bubble', 'Quick', 'Shell')):
            name = "%s Sort" % button
            button = Radiobutton(self, text=name, variable=self.v, value=indx)
            button.grid(row=1, column=indx, sticky=W+E+N+S)
        button.deselect()

        #button to generate number
        self.button4 = Button(self,text='Generate no.',command=self.gen)
        self.button4.grid(row=2, column=1, sticky=W+E+N+S)
        self.rowconfigure(5, weight=1)
        self.columnconfigure(5, weight=1)

    def create_but2sort(self):
        self.button5 = Button(self, text='start sorting', command=self.sortit)
        self.button5.grid(row=4, column=1, sticky=W+E+N+S)
        self.rowconfigure(5, weight=1 )
        self.columnconfigure(5, weight=1)

    def gen(self):
        self.nums = [random.randint(0, 100) for x in range(10)]
        num = ''.join('%4i' % num for num in self.nums)
        self.label2 = Label(self, text=num, width=2, height=2)
        self.label2.grid(row =3, columnspan=10, sticky = W+E+N+S)
        self.create_but2sort()

    def sortit(self):
        function = self.function[self.v.get()]
        result = function()
        num = ''.join('%4i' % num for num in result)
        self.label3 = Label(self, text=num, width=2, height=2)
        self.label3.grid(row=5, columnspan=10, sticky=W+E+N+S )

    def bubble(self):
        print('bubble to be implemented')
        return sorted(self.nums)

    def shell(self):
        print('shell to be implemented')
        return sorted(self.nums)

    def quick(self):
        print('quick to be implemented')
        return sorted(self.nums)

def main():
    Sorting().mainloop()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9171925</id><snippet>[]</snippet></ROW><ROW><id>9171925</id><snippet>None</snippet></ROW><ROW><id>9172040</id><snippet>soup = BeautifulSoup(HTML_data)     #HTML_data is all html content
first_div = soup.find('div',{"class" : "content"})
second_div = first_div.find('div',{"class" : "utimate"})
div_list = second_div.findAll('div',{"class" : "utlimate"})
</snippet></ROW><ROW><id>9172040</id><snippet>findAll</snippet></ROW><ROW><id>9172040</id><snippet>findall</snippet></ROW><ROW><id>9172101</id><snippet>diff</snippet></ROW><ROW><id>9172101</id><snippet>def bracketCheck(myList):
    checkmyList = LinkedList()
    opencount=0
    closecount=0
    i=0
    isEqual = True
    while(i &lt; myList.length):
        i=i+1
        if myList.getNodeAtPosition(i-1).cargo == '(' or myList.getNodeAtPosition(i-1).cargo == '{' or myList.getNodeAtPosition(i-1).cargo == '[':
            checkmyList.addLast(myList.getNodeAtPosition(i-1))
            opencount = opencount + 1
        if myList.getNodeAtPosition(i-1).cargo == ')':
            closecount = closecount + 1
            if checkmyList.getLast().__str__() == openbrackets[0]:
                checkmyList.removeLast()
            else:
                isEqual = False

        if myList.getNodeAtPosition(i-1).cargo == '}':
            closecount = closecount + 1
            if checkmyList.getLast().__str__() == openbrackets[1]:
                checkmyList.removeLast()
            else:
                isEqual = False

        if myList.getNodeAtPosition(i-1).cargo == ']':
            closecount = closecount + 1
            if checkmyList.getLast().__str__() == openbrackets[2]:
                checkmyList.removeLast()
            else:
                isEqual = False
    '''print checkmyList'''
    print opencount
    print closecount
    if isEqual == False:
        print "an extra is missing."
    else:
        print "win!"

print "Enter myList:"
myList = LinkedList()
while input != "done":
    input = raw_input()
    if input == "done":
        break
    myList.addLast(input)

print myList
bracketCheck(myList)
</snippet></ROW><ROW><id>9172325</id><snippet>&gt;&gt;&gt; thing[0] += 'd'
</snippet></ROW><ROW><id>9172325</id><snippet>+=</snippet></ROW><ROW><id>9172325</id><snippet>+=</snippet></ROW><ROW><id>9172325</id><snippet>&gt;&gt;&gt; thing[0] = thing[0] + 'd'
</snippet></ROW><ROW><id>9172325</id><snippet>dis</snippet></ROW><ROW><id>9172325</id><snippet>+=</snippet></ROW><ROW><id>9172325</id><snippet>INPLACE_ADD</snippet></ROW><ROW><id>9172325</id><snippet>&gt;&gt;&gt; def f(some_list):
...     some_list += ["foo"]
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_FAST                0 (some_list)
              3 LOAD_CONST               1 ('foo')
              6 BUILD_LIST               1
              9 INPLACE_ADD         
             10 STORE_FAST               0 (some_list)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE        
</snippet></ROW><ROW><id>9172325</id><snippet>+</snippet></ROW><ROW><id>9172325</id><snippet>BINARY_ADD</snippet></ROW><ROW><id>9172325</id><snippet>&gt;&gt;&gt; def g(some_list):
...     some_list = some_list + ["foo"]
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_FAST                0 (some_list)
              3 LOAD_CONST               1 ('foo')
              6 BUILD_LIST               1
              9 BINARY_ADD          
             10 STORE_FAST               0 (some_list)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE        
</snippet></ROW><ROW><id>9172325</id><snippet>STORE_FAST</snippet></ROW><ROW><id>9172325</id><snippet>INPLACE_ADD</snippet></ROW><ROW><id>9172325</id><snippet>&gt;&gt;&gt; id(thing[0])
3074072428L
</snippet></ROW><ROW><id>9172325</id><snippet>INPLACE_ADD</snippet></ROW><ROW><id>9172325</id><snippet>STORE_FAST</snippet></ROW><ROW><id>9172325</id><snippet>&gt;&gt;&gt; thing[0] += 'd'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
</snippet></ROW><ROW><id>9172325</id><snippet>&gt;&gt;&gt; id(thing[0])
3074072428L
&gt;&gt;&gt; thing[0] 
['b', 'c', 'd']
</snippet></ROW><ROW><id>9172383</id><snippet>zip</snippet></ROW><ROW><id>9172383</id><snippet>data = [['a','b','c'],[1,2,3],[4,5,6],[7,8,9]]
print(data)
data = list(zip(*data))
print(data)
</snippet></ROW><ROW><id>9172383</id><snippet>[['a', 'b', 'c'], [1, 2, 3], [4, 5, 6], [7, 8, 9]]
[('a', 1, 4, 7), ('b', 2, 5, 8), ('c', 3, 6, 9)]
</snippet></ROW><ROW><id>9172383</id><snippet>print()</snippet></ROW><ROW><id>9172954</id><snippet>reduce()</snippet></ROW><ROW><id>9172954</id><snippet>In [4]: reduce(lambda x,y:['',x[1]+y[1],x[2]+y[2]], l)
Out[4]: ['', 37, 10]
</snippet></ROW><ROW><id>9172954</id><snippet>l</snippet></ROW><ROW><id>9173122</id><snippet>commit</snippet></ROW><ROW><id>9173122</id><snippet>   cursor.close ()
   conn.commit ()
   conn.close ()
</snippet></ROW><ROW><id>9173643</id><snippet>git clone</snippet></ROW><ROW><id>9173643</id><snippet>~/.vim/bundle</snippet></ROW><ROW><id>9173643</id><snippet>mkdir -p ~/.vim/autoload ~/.vim/bundle; \
curl -so ~/.vim/autoload/pathogen.vim \
    https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim
</snippet></ROW><ROW><id>9173822</id><snippet>Name = forms.CharField(required = False, label = "Имя ", widget = forms.TextInput(attrs = {'size': 15}))
</snippet></ROW><ROW><id>9173965</id><snippet>scikits-image</snippet></ROW><ROW><id>9173985</id><snippet>cache_size</snippet></ROW><ROW><id>9174498</id><snippet>curve_fit</snippet></ROW><ROW><id>9174498</id><snippet>try:
    popt,pcov = scipy.optimize.curve_fit(f, xdata, ydata, p0=None, sigma=None)

except RuntimeError:
    print("Error - curve_fit failed")
</snippet></ROW><ROW><id>9174498</id><snippet>curve_fit</snippet></ROW><ROW><id>9174556</id><snippet>&gt;&gt;&gt; state_license = {u'License ': u'29393, 25633',
...                  u'Expiration': u'08-01-2012, 04-02-2012',
...                  u'Trade': u'Registered Contractor, Plumber'}
&gt;&gt;&gt; {key: value.split(", ") for key, value in state_license.items()}
{u'License ': [u'29393', u'25633'], 
 u'Expiration': [u'08-01-2012', u'04-02-2012'], 
 u'Trade': [u'Registered Contractor', u'Plumber']}
</snippet></ROW><ROW><id>9174789</id><snippet>from PIL import Image

im = Image.open("test.png")
im.save("test-600.png", dpi=(600,600) )
</snippet></ROW><ROW><id>9174940</id><snippet>import signal

def handler(signum, frame):
    print 'Ctrl+Z pressed, but ignored'

signal.signal(signal.SIGTSTP, handler)

while True:
   pass 
</snippet></ROW><ROW><id>9175179</id><snippet> import numpy
 x = [0.0, 0.4, 0.6, 1.0]
 y = [0.0, 2.2, 1.5, 1.6]
 z = [0.0, 9.1, 1.0, 0.9]
 res = numpy.array([[x[i], y[i], z[i]] for i in xrange(len(x)) if x[i] &gt; 0.5])
 ax.plot3D(res[:,0], res[:,1], res[:,2], linestyle="None, marker='o'")
</snippet></ROW><ROW><id>9175305</id><snippet>already_inserted = all(bitfield[i] for i in indexes)
</snippet></ROW><ROW><id>9176713</id><snippet>    print time.time()
    try:
        print "about to look for element"
        def find(driver):
            e = driver.find_element_by_id("createFolderCreateBtn")
            if (e.get_attribute("disabled")=='true'):
                return False
            return e
        element = WebDriverWait(driver, 10).until(find)
        print "still looking?"
    finally: print 'yowp'
    print "ok, left the loop"
    print time.time()
</snippet></ROW><ROW><id>9177145</id><snippet>"nNcc"</snippet></ROW><ROW><id>9177145</id><snippet>"!HLbb"</snippet></ROW><ROW><id>9177145</id><snippet>"H*"</snippet></ROW><ROW><id>9177145</id><snippet>struct.unpack</snippet></ROW><ROW><id>9177145</id><snippet>*</snippet></ROW><ROW><id>9177145</id><snippet>struct.unpack</snippet></ROW><ROW><id>9177145</id><snippet>unpack</snippet></ROW><ROW><id>9177145</id><snippet>binascii.hexlify</snippet></ROW><ROW><id>9177145</id><snippet>import struct
import binascii

def unpack(fmt, data):
    """
    Return struct.unpack(fmt, data) with the optional single * in fmt replaced with
    the appropriate number, given the length of data.
    """
    # http://stackoverflow.com/a/7867892/190597
    try:
        return struct.unpack(fmt, data)
    except struct.error:
        flen = struct.calcsize(fmt.replace('*', ''))
        alen = len(data)
        idx = fmt.find('*')
        before_char = fmt[idx-1]
        n = (alen-flen)//struct.calcsize(before_char)+1
        fmt = ''.join((fmt[:idx-1], str(n), before_char, fmt[idx+1:]))
        return struct.unpack(fmt, data)

data = open('data').read()
x = list(unpack("!HLbbs*", data))
# x[-1].encode('hex') also works, but is not Python3 compatible
x[-1] = binascii.hexlify(x[-1])
print(x)
</snippet></ROW><ROW><id>9177145</id><snippet>$line = pack("nNccH*", 1,2,10,4,'1fba');
print "$line";
</snippet></ROW><ROW><id>9177145</id><snippet>[1, 2, 10, 4, '1fba']
</snippet></ROW><ROW><id>9177189</id><snippet>tabwidget.tabBar().setTabTextColor(index, color)
</snippet></ROW><ROW><id>9177196</id><snippet>"[mM]y name [Ii][sS] (\w*)"

"[Ii]n repertory (\w*) I [wW][aA][nN][tT] file (\w*)"

"[Ii] [wW][aA][nN][tT] to ([ \w]*)"
</snippet></ROW><ROW><id>9177196</id><snippet>import re

regi = ("[mM]y name [Ii][sS] (\w*)"
        "||Hi {0}!"
        "||You said that your name was {0} !!!",

        "[Ii]n repertory (\w*) I [wW][aA][nN][tT] file (\w*)"
        "||OK here's your file {0}\\{1} :"
        "||I already gave you the file {0}\\{1} !",

        "[Ii] [wW][aA][nN][tT] to ([ \w]*)"
        "||OK, I will do {0}"
        "||You already did {0}. Do yo really want again ?")


direg  = {}
memory = {}
def distr(regi,cnt = 0,di = direg,mem = memory,
          regnb = re.compile('{\d+}')):
    for i,el in enumerate(regi,start=1):
        sp = el.split('||')
        cnt += len(regnb.findall(sp[1]))
        di[cnt] = sp[1]
        mem[cnt] = sp[2]
        yield sp[0]

regx = re.compile('|'.join(distr(regi)))
print 'direg :\n',direg
print
print 'memory :\n',memory
for inp in ('I say that my name is Armano the 1st',
            'In repertory ONE I want file SPACE',
            'I want to record music',
            'In repertory ONE I want file SPACE',
            'I say that my name is Armstrong',
            'But my name IS Armstrong now !!!',
            'In repertory TWO I want file EARTH',
            'Now my name is Helena'):

    print '\ninput  ==',inp

    mat = regx.search(inp)
    if direg[mat.lastindex]:
        print 'output ==',direg[mat.lastindex]\
              .format(*(d for d in mat.groups() if d))
        direg[mat.lastindex] = None
        memory[mat.lastindex] = memory[mat.lastindex]\
                                .format(*(d for d in mat.groups() if d))
    else:
        print 'output ==',memory[mat.lastindex]\
              .format(*(d for d in mat.groups() if d))
        if not memory[mat.lastindex].startswith('Sorry'):
            memory[mat.lastindex] = 'Sorry, ' \
                                    + memory[mat.lastindex][0].lower()\
                                    + memory[mat.lastindex][1:]
</snippet></ROW><ROW><id>9177196</id><snippet>direg :
{1: 'Hi {0}!', 3: "OK here's your file {0}\\{1} :", 4: 'OK, I will do {0}'}

memory :
{1: 'You said that your name was {0} !!!', 3: 'I already gave you the file {0}\\{1} !', 4: 'You already did {0}. Do yo really want again ?'}

input  == I say that my name is Armano the 1st
output == Hi Armano!

input  == In repertory ONE I want file SPACE
output == OK here's your file ONE\SPACE :

input  == I want to record music
output == OK, I will do record music

input  == In repertory ONE I want file SPACE
output == I already gave you the file ONE\SPACE !

input  == I say that my name is Armstrong
output == You said that your name was Armano !!!

input  == But my name IS Armstrong now !!!
output == Sorry, you said that your name was Armano !!!

input  == In repertory TWO I want file EARTH
output == Sorry, i already gave you the file ONE\SPACE !

input  == Now my name is Helena
output == Sorry, you said that your name was Armano !!!
</snippet></ROW><ROW><id>9177414</id><snippet>1.__add__(1)</snippet></ROW><ROW><id>9177414</id><snippet>"1."</snippet></ROW><ROW><id>9177414</id><snippet>"__add__"</snippet></ROW><ROW><id>9177414</id><snippet>"("</snippet></ROW><ROW><id>9177414</id><snippet>"1"</snippet></ROW><ROW><id>9177414</id><snippet>")"</snippet></ROW><ROW><id>9177414</id><snippet>SyntaxError</snippet></ROW><ROW><id>9177414</id><snippet>&gt;&gt;&gt; 1 .__add__(1)
2
</snippet></ROW><ROW><id>9177620</id><snippet>GeneralCase</snippet></ROW><ROW><id>9177620</id><snippet>f</snippet></ROW><ROW><id>9177620</id><snippet>GeneralCase</snippet></ROW><ROW><id>9177620</id><snippet>GeneralCase</snippet></ROW><ROW><id>9177620</id><snippet>GeneralCase</snippet></ROW><ROW><id>9177620</id><snippet>GeneralCase</snippet></ROW><ROW><id>9177620</id><snippet>GeneralCase</snippet></ROW><ROW><id>9177620</id><snippet>SpecialCase</snippet></ROW><ROW><id>9177620</id><snippet>interface</snippet></ROW><ROW><id>9177729</id><snippet>dict1 = {(100, "A"): 22, (200,"B"): 33, (300, "C"): 44}
dict2 = {(100, "A"): 333, (200,"B"): 444, (500, "D"): 555}
</snippet></ROW><ROW><id>9177729</id><snippet>&gt;&gt;&gt; {k: (dict1.get(k, 0), dict2.get(k, 0))
...  for k in dict1.viewkeys() | dict2.viewkeys()}
{(100, 'A'): (22, 333), (200, 'B'): (33, 444), 
 (300, 'C'): (44, 0), (500, 'D'): (0, 555)}
</snippet></ROW><ROW><id>9177729</id><snippet>dict1 = {(k1, k2): v for k1, k2, v in list1}
dict2 = {(k1, k2): v for k1, k2, v in list2}
</snippet></ROW><ROW><id>9177745</id><snippet>re.escape(tag)</snippet></ROW><ROW><id>9177745</id><snippet>\w+/</snippet></ROW><ROW><id>9177745</id><snippet>[^/]+/</snippet></ROW><ROW><id>9177745</id><snippet>pattern = r'\s+'.join(r"^([^/]+)/{0}".format(re.escape(tag)) for tag in tags)
print re.findall(pattern, searchtext, re.M)
</snippet></ROW><ROW><id>9177745</id><snippet>[('is', 'in', 'it', ',')]
</snippet></ROW><ROW><id>9177849</id><snippet>shell = True</snippet></ROW><ROW><id>9177849</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9177849</id><snippet>shell = True</snippet></ROW><ROW><id>9177849</id><snippet>shell = True</snippet></ROW><ROW><id>9177849</id><snippet>shell = False</snippet></ROW><ROW><id>9177849</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9177849</id><snippet>shlex.split</snippet></ROW><ROW><id>9177849</id><snippet>import shlex
import subprocess

def filter_history(old, new, name, repoPath):
    """Change author info
    """
    # http://help.github.com/change-author-info/
    # http://stackoverflow.com/a/3880493/190597
    command = """git filter-branch -f --env-filter '
        an="$GIT_AUTHOR_NAME"
        am="$GIT_AUTHOR_EMAIL"
        cn="$GIT_COMMITTER_NAME"
        cm="$GIT_COMMITTER_EMAIL"

        if [[ "$GIT_COMMITTER_NAME" = "{old}" ]]
        then
            cn="{name}"
            cm="{new}"
        fi

        if [[ "$GIT_AUTHOR_NAME" = "{old}" ]]
        then
            an="{name}"
            am="{new}"
        fi

        export GIT_AUTHOR_NAME="$an"
        export GIT_AUTHOR_EMAIL="$am"
        export GIT_COMMITTER_NAME="$cn"
        export GIT_COMMITTER_EMAIL="$cm"
      '
      """.format(old = old, new = new, name = name)

    process = subprocess.Popen(
        shlex.split(command),
        cwd = os.path.dirname(repoPath))
    process.communicate()
</snippet></ROW><ROW><id>9177937</id><snippet>open</snippet></ROW><ROW><id>9177937</id><snippet># Python 3.x only
import csv
with open('utf16.csv', 'r', encoding='utf16') as csvf:
    for line in csv.reader(csvf):
        print(line) # do something with the line
</snippet></ROW><ROW><id>9177937</id><snippet># Python 2.x only
import codecs
import csv

class Recoder(object):
    def __init__(self, stream, decoder, encoder, eol='\r\n'):
        self._stream = stream
        self._decoder = decoder if isinstance(decoder, codecs.IncrementalDecoder) else codecs.getincrementaldecoder(decoder)()
        self._encoder = encoder if isinstance(encoder, codecs.IncrementalEncoder) else codecs.getincrementalencoder(encoder)()
        self._buf = ''
        self._eol = eol
        self._reachedEof = False

    def read(self, size=None):
        r = self._stream.read(size)
        raw = self._decoder.decode(r, size is None)
        return self._encoder.encode(raw)

    def __iter__(self):
        return self

    def __next__(self):
        if self._reachedEof:
            raise StopIteration()
        while True:
            line,eol,rest = self._buf.partition(self._eol)
            if eol == self._eol:
                self._buf = rest
                return self._encoder.encode(line + eol)
            raw = self._stream.read(1024)
            if raw == '':
                self._decoder.decode(b'', True)
                self._reachedEof = True
                return self._encoder.encode(self._buf)
            self._buf += self._decoder.decode(raw)
    next = __next__

    def close(self):
        return self._stream.close()

with open('test.csv','rb') as f:
    sr = Recoder(f, 'utf-16', 'utf-8')

    for row in csv.reader(sr):
        print (row)
</snippet></ROW><ROW><id>9177937</id><snippet>open</snippet></ROW><ROW><id>9177937</id><snippet>codecs.open</snippet></ROW><ROW><id>9177937</id><snippet>try:
    from io import BytesIO
except ImportError: # Python &lt; 2.6
    from StringIO import StringIO as BytesIO
import csv
with open('utf16.csv', 'rb') as binf:
    c = binf.read().decode('utf-16').encode('utf-8')
for line in csv.reader(BytesIO(c)):
    print(line) # do something with the line
</snippet></ROW><ROW><id>9178114</id><snippet># configuration dict, written by the user
categories = {
    'apple'  : [1, 2],
    'banana' : [3],
    'melon'  : [4, 5, 6]
}

# dynamically generate lookup table
lookup = {}
for cat, nums in categories.iteritems():
    for n in nums: lookup[n] = cat

# ... later:
from collections import defaultdict
categorized = defaultdict(list)
for n in numbers:
    cat = lookup.get(n)
    if not cat:
        continue
    categorized[cat].append(n)
    print "put %d in category %s" % (n, cat)
</snippet></ROW><ROW><id>9178114</id><snippet>lookup = [None]*256
for cat, nums in categories.iteritems():
    for n in nums: lookup[n] = cat

# ... later
categorized = defaultdict(list)
for n in numbers:
    categorized[lookup[n]].append(n)
    print "put %d in category %s" % (n, lookup[n])
</snippet></ROW><ROW><id>9178414</id><snippet>    firstline = next(f).split()
    delimiter = firstline[1][-1]
    fields = firstline[2:]
</snippet></ROW><ROW><id>9178414</id><snippet>csv.DictReader</snippet></ROW><ROW><id>9178414</id><snippet>f</snippet></ROW><ROW><id>9178414</id><snippet>skip_comments</snippet></ROW><ROW><id>9178414</id><snippet>import csv
def skip_comments(iterable):
    for line in iterable:
        if not line.startswith('#'):
            yield line

with open('data.csv','rb') as f:
    firstline = next(f).split()
    delimiter = firstline[1][-1]
    fields = firstline[2:]
    for line in csv.DictReader(skip_comments(f),
                               delimiter = delimiter, fieldnames = fields):
        print line
</snippet></ROW><ROW><id>9178414</id><snippet>{'field2': 'b', 'field3': 'c', 'field1': 'a'}
{'field2': 'e', 'field3': 'f', 'field1': 'd'}
{'field2': 'h', 'field3': 'i', 'field1': 'g'}
</snippet></ROW><ROW><id>9178414</id><snippet>header</snippet></ROW><ROW><id>9178414</id><snippet>def header(delimiter,fields):
    return '#h -F{d} {f}\n'.format(d = delimiter, f=' '.join(fields))

with open('data.csv', 'rb') as f:
    with open('output.csv', 'wb') as g:
        firstline = next(f).split()
        delimiter = firstline[1][-1]
        fields = firstline[2:]
        writer = csv.DictWriter(g, delimiter = delimiter, fieldnames = fields)
        g.write(header(delimiter,fields))
        for row in csv.DictReader(skip_comments(f),
                                   delimiter = delimiter, fieldnames = fields):
            writer.writerow(row)
            g.write('# comment\n')
</snippet></ROW><ROW><id>9178414</id><snippet>output.csv</snippet></ROW><ROW><id>9178414</id><snippet>g.write</snippet></ROW><ROW><id>9178414</id><snippet>writer.writerow</snippet></ROW><ROW><id>9178597</id><snippet>objAccess.DoCmd.RunMacro 'test'
objAccess.DoCmd.RunMacro('test')
</snippet></ROW><ROW><id>9178667</id><snippet>time.sleep()</snippet></ROW><ROW><id>9178667</id><snippet>time.sleep()</snippet></ROW><ROW><id>9178667</id><snippet>gevent.sleep()</snippet></ROW><ROW><id>9178667</id><snippet>jobs = []
for i in x:
    jobs.append(gevent.spawn(mytime, i))
</snippet></ROW><ROW><id>9178667</id><snippet>jobs = [gevent.spawn(mytime, i) for i in x]
</snippet></ROW><ROW><id>9178812</id><snippet>"front" or "forward" in next6
</snippet></ROW><ROW><id>9178812</id><snippet>"front"</snippet></ROW><ROW><id>9178812</id><snippet>if</snippet></ROW><ROW><id>9178812</id><snippet>"front" in next6 or "forward" in next6
</snippet></ROW><ROW><id>9178812</id><snippet>A or B
</snippet></ROW><ROW><id>9178812</id><snippet>A</snippet></ROW><ROW><id>9178812</id><snippet>A</snippet></ROW><ROW><id>9178812</id><snippet>B</snippet></ROW><ROW><id>9178886</id><snippet>requests</snippet></ROW><ROW><id>9178886</id><snippet>gevent</snippet></ROW><ROW><id>9178886</id><snippet>request</snippet></ROW><ROW><id>9178948</id><snippet>&gt;&gt;&gt; a = [4, 8, 16, 32, 9, 27, 81, 243, 16, 64, 256, 1024, 25, 125, 625, 3125]
&gt;&gt;&gt; sorted(set(a))
[4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125]
</snippet></ROW><ROW><id>9178948</id><snippet>dict</snippet></ROW><ROW><id>9178948</id><snippet>set</snippet></ROW><ROW><id>9179103</id><snippet>def send_mail(self, message):

    import smtplib
    from email.MIMEMultipart import MIMEMultipart
    from email.MIMEText import MIMEText

    gmailUser = 'something@gmail.com'
    gmailPassword = 'something'
    recipient = 'something@something.com'

    msg = MIMEMultipart()
    msg['From'] = gmailUser
    msg['To'] = recipient
    msg['Subject'] = "Subject"
    msg.attach(MIMEText(message))

    mailServer = smtplib.SMTP('smtp.gmail.com', 587)
    mailServer.ehlo()
    mailServer.starttls()
    mailServer.ehlo()
    mailServer.login(gmailUser, gmailPassword)
    mailServer.sendmail(gmailUser, recipient, msg.as_string())
    mailServer.close()
</snippet></ROW><ROW><id>9179251</id><snippet>__init__</snippet></ROW><ROW><id>9179251</id><snippet>self.__data[i].__len__()</snippet></ROW><ROW><id>9179251</id><snippet>len(self.__data[i])</snippet></ROW><ROW><id>9179251</id><snippet>if len(xx):</snippet></ROW><ROW><id>9179251</id><snippet>if xx:</snippet></ROW><ROW><id>9179251</id><snippet>__len__</snippet></ROW><ROW><id>9179251</id><snippet>len</snippet></ROW><ROW><id>9179251</id><snippet>__str__</snippet></ROW><ROW><id>9179251</id><snippet>prop.insert(prop.__len__(), x)</snippet></ROW><ROW><id>9179251</id><snippet>prop.append(x)</snippet></ROW><ROW><id>9179251</id><snippet>'\t%s: %s\n' % (i, obj[i])</snippet></ROW><ROW><id>9179699</id><snippet>MyClass.__dict__ = {}
MyClass.__dict__.__setitem__('_MyClass__protectedVariable','...but it is not')
</snippet></ROW><ROW><id>9179699</id><snippet>__dict__</snippet></ROW><ROW><id>9179699</id><snippet>MyClass._MyClass__protectedVariable = '...but it is not'
</snippet></ROW><ROW><id>9180047</id><snippet>math.ceil</snippet></ROW><ROW><id>9180047</id><snippet>ceil</snippet></ROW><ROW><id>9180047</id><snippet>int</snippet></ROW><ROW><id>9180047</id><snippet>&gt;&gt;&gt; math.ceil(1e23)
1e+23
&gt;&gt;&gt; int(math.ceil(1e23))
99999999999999991611392L
</snippet></ROW><ROW><id>9180263</id><snippet>settings.py</snippet></ROW><ROW><id>9180263</id><snippet>python manage.py inspectdb &gt; models.py</snippet></ROW><ROW><id>9180263</id><snippet>manage.py</snippet></ROW><ROW><id>9180263</id><snippet>models.py</snippet></ROW><ROW><id>9180263</id><snippet>money</snippet></ROW><ROW><id>9180263</id><snippet>currency</snippet></ROW><ROW><id>9180263</id><snippet>models.TextField()</snippet></ROW><ROW><id>9180263</id><snippet># This is a guess.</snippet></ROW><ROW><id>9180263</id><snippet>python manage.py inspectdb &gt; models.py</snippet></ROW><ROW><id>9180263</id><snippet>from django.db import models

class A(models.Model):
    name = models.TextField()
    description = models.TextField()
    isAdvanced = models.BooleanField()
    foos = # Dunno, a quick Google search doesn't turn up the equivalent
    bar = models.IntegerField()
</snippet></ROW><ROW><id>9180263</id><snippet>multiline</snippet></ROW><ROW><id>9180263</id><snippet>name</snippet></ROW><ROW><id>9180838</id><snippet>inner</snippet></ROW><ROW><id>9180838</id><snippet>Outer</snippet></ROW><ROW><id>9180838</id><snippet>__setattribute__</snippet></ROW><ROW><id>9180838</id><snippet>object</snippet></ROW><ROW><id>9180838</id><snippet>Outer</snippet></ROW><ROW><id>9180838</id><snippet>class Inner(object):
    def __init__(self, x):
        self.x = x

class Outer(object):    
    def __init__(self, z):
        object.__setattr__(self, 'inner', Inner(z))

    def __getattr__(self, name):
        return getattr(self.inner, name)

    def __setattr__(self, name, value):
        return setattr(self.inner, name, value)
</snippet></ROW><ROW><id>9180838</id><snippet>o = Outer(10)
print o.x        # 10
print o.inner.x  # 10
o.g = 3
print o.g        # 3
print o.inner.g  # 3
</snippet></ROW><ROW><id>9180838</id><snippet>Outer</snippet></ROW><ROW><id>9180838</id><snippet>Inner</snippet></ROW><ROW><id>9180851</id><snippet>nose</snippet></ROW><ROW><id>9180851</id><snippet>test_foo()</snippet></ROW><ROW><id>9180851</id><snippet>run()</snippet></ROW><ROW><id>9180851</id><snippet>run()</snippet></ROW><ROW><id>9180851</id><snippet>def test_foo():
    scenario = ScenarioHandler(__test_foo, [1, 2])
    for f, a in scenario.run():
        f(a)
</snippet></ROW><ROW><id>9180851</id><snippet>func.func_code.co_flags &amp; CO_GENERATOR != 0</snippet></ROW><ROW><id>9180851</id><snippet>def test_foo():
    scenario = ScenarioHandler(__test_foo, [1, 2])
    for f, a in scenario.run():
        yield f, a
</snippet></ROW><ROW><id>9180851</id><snippet>nose</snippet></ROW><ROW><id>9180851</id><snippet>test_meth = ScenarioHandler(__test_foo, [1, 2]).run
</snippet></ROW><ROW><id>9180851</id><snippet># as method:
    def make_test(self):
        def test_generator():
            for item in self.run():
                yield item
        return test_generator
</snippet></ROW><ROW><id>9180851</id><snippet>test_foo = ScenarioHandler(__test_foo, [1, 2]).make_test()
</snippet></ROW><ROW><id>9180851</id><snippet>nose</snippet></ROW><ROW><id>9180851</id><snippet>TestCase</snippet></ROW><ROW><id>9180851</id><snippet>TestSuite</snippet></ROW><ROW><id>9180897</id><snippet>$ python ~/PYTHON/untitled0.py</snippet></ROW><ROW><id>9180897</id><snippet>$ cat logging.log
</snippet></ROW><ROW><id>9180897</id><snippet>cat ~/PYTHON/logging.log
</snippet></ROW><ROW><id>9181014</id><snippet>*</snippet></ROW><ROW><id>9181014</id><snippet>zip(*['ab', 'cd', 'ef'])</snippet></ROW><ROW><id>9181014</id><snippet>zip('ab', 'cd', 'ef')</snippet></ROW><ROW><id>9181014</id><snippet>&gt;&gt;&gt; A = [ 1 ,  2 ,  3 ,  4 ,  5 ,  6]
&gt;&gt;&gt; B = ["A", "B", "C", "D", "E", "F"]
&gt;&gt;&gt; C = ["J", "K", "L", "M", "N", "O"]
&gt;&gt;&gt; d = {"One": A, "Two": B, "Three": C}
&gt;&gt;&gt; order = ["One", "Two", "Three"]
&gt;&gt;&gt; zip(*[d[k] for k in order])
[(1, 'A', 'J'), (2, 'B', 'K'), (3, 'C', 'L'), (4, 'D', 'M'), (5, 'E', 'N'), (6, 'F', 'O')]
</snippet></ROW><ROW><id>9181241</id><snippet>from xml.dom import minidom, getDOMImplementation

XML1 = """
&lt;sub1&gt;
 &lt;foo&gt;BAR1&lt;/foo&gt;
&lt;/sub1&gt;"""

XML2 = """
&lt;sub2&gt;
 &lt;foo&gt;BAR2&lt;/foo&gt;
&lt;/sub2&gt;"""

impl = getDOMImplementation()
doc = impl.createDocument(None, "root", None)

for s in [XML1, XML2]:
    elem = minidom.parseString(s).firstChild
    doc.firstChild.appendChild(elem)

print doc.toxml()
</snippet></ROW><ROW><id>9181241</id><snippet>&lt;?xml version="1.0" ?&gt;&lt;root&gt;&lt;sub1&gt;
 &lt;foo&gt;BAR1&lt;/foo&gt;
&lt;/sub1&gt;&lt;sub2&gt;
 &lt;foo&gt;BAR2&lt;/foo&gt;
&lt;/sub2&gt;&lt;/root&gt;
</snippet></ROW><ROW><id>9181241</id><snippet>Document</snippet></ROW><ROW><id>9181241</id><snippet>firstChild</snippet></ROW><ROW><id>9181241</id><snippet>Element</snippet></ROW><ROW><id>9181243</id><snippet>use Net::OpenSSH::Parallel;

my $pssh = Net::OpenSSH::Parallel-&gt;new;
$pssh-&gt;add_host($_) for @hosts;

$pssh-&gt;push('*', scp_get =&gt; '/remote/file/path', '/local/file/path-%HOST%');
$pssh-&gt;run;

# do whatever you want with the local files.
</snippet></ROW><ROW><id>9181461</id><snippet>site.addsitedir(os.path.join('/home/ubuntu/ve','project/lib/python2.6/site-packages'))
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '../../../'))
sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '../../'))

os.environ['DJANGO_SETTINGS_MODULE'] = 'project.configs.staging.settings'

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
</snippet></ROW><ROW><id>9181461</id><snippet># file: /etc/init/uwsgi.conf
description "uWSGI starter"

start on (local-filesystems and runlevel [2345])
stop on runlevel [016]

respawn

# home - is the path to our virtualenv directory
# pythonpath - the path to our django application
# module - the wsgi handler python script

exec /home/ubuntu/ve/project/bin/uwsgi \
--uid ubuntu \
--pythonpath /home/ubuntu/django-projects/project/project/configs/staging \
-H /home/ubuntu/ve/project \
--socket /tmp/uwsgi.sock \
--chmod-socket 644 \
--module wsgi \
--logdate \
--optimize 2 \
--processes 2 \
--master \
--logto /home/ubuntu/logs/project/uwsgi.log
</snippet></ROW><ROW><id>9181461</id><snippet># file: /etc/nginx/sites-available/yourdomain.com
# nginx configuration for project.maumercado.com

server {
        listen 80;
        charset utf-8;
        server_name project.maumercado.com;
        access_log /home/ubuntu/logs/project/nginx/access.log;
        error_log /home/ubuntu/logs/project/nginx/error.log;

        location ^~ /cache/ {
                root /home/ubuntu/django-projects/project/project/media;
                expires max;
        }

        location / {
                uwsgi_pass unix:/tmp/uwsgi.sock;
                include /etc/nginx/uwsgi_params;
        }
}
</snippet></ROW><ROW><id>9181601</id><snippet>dbus.bus.BusConnection</snippet></ROW><ROW><id>9181604</id><snippet>ndb.allocate_ids</snippet></ROW><ROW><id>9181604</id><snippet>ctx = tasklets.get_context()
model.Key('Foo', 1) # the id(1) here is ingnored
start_id, end_id = ctx.allocate_ids(key, max=3001) # allocate all ids up to 3001
if start_id &lt;= 3001:
    # it is safe to use 3001
    Foo(id=3001).put()
</snippet></ROW><ROW><id>9181604</id><snippet>start_id, end_id = Foo.allocate_ids(max=3001)
if start_id &lt;= 3001:
    Foo(id=3001).put()
</snippet></ROW><ROW><id>9181720</id><snippet>import subprocess
from Tkinter import *
import ttk

def btnCallback():
    #this is the path to your other script
    cmdpath = '/path/to/test.py'

    #extract the textbox variable
    var = stringadacercare.get()

    progressbar.start()

    #pass the variable to the command line
    proc = subprocess.popen([cmdpath,var])

    #block while the subprocess executes
    proc.wait()

    progressbar.stop()

app = Tk()
app.title('Myapp')
app.geometry('260x100+50+50')

labelText =StringVar()
labelText.set('Insert the version you want to check')
label1 = Label(app, textvar=labelText, height=4)
label1.pack()

stringadacercare = StringVar(None)
lastringa = Entry(app, textvar=stringadacercare)
lastringa.place(x=30, y=40, width=200)

progressbar = ttk.Progressbar(orient=HORIZONTAL, length=260, mode='determinate')
progressbar.pack(side='bottom')

#use a button to execute the subprocess
buttonOK = Button(app,text='GO',command=btnCallback)
buttonOK.pack(side='bottom')

app.mainloop() 
</snippet></ROW><ROW><id>9181720</id><snippet>import csv
import re
import os

#need the sys module to get the command line args
import sys

def main(testV):
    fileobj = csv.reader(open('c:\\paths1.csv', 'rb'), delimiter=' ', quotechar='|')

    for row in fileobj:
        for x in row:
            with open(x) as f:
                for line in f:
                    if re.match(testV, line):
                        print 'The version match: '+ line
                    else:
                        print 'wrong version'
                        filesize= os.path.getsize(x)
                        print 'The file size is :'+ str(filesize) +' bytes'

if __name__=='__main__':
    #get the first command line argument and pass it to main
    testV = sys.argv[1]
    main(testV)
</snippet></ROW><ROW><id>9181720</id><snippet>...
import mytestmodule

def btnCallback():
    #extract the textbox variable
    var = stringadacercare.get()

    progressbar.start()

    #call the main function from the test module
    mytestmodule.main(var)

    progressbar.stop()

...
</snippet></ROW><ROW><id>9181787</id><snippet>time myapp</snippet></ROW><ROW><id>9181787</id><snippet>time</snippet></ROW><ROW><id>9181787</id><snippet>help time</snippet></ROW><ROW><id>9181787</id><snippet>/usr/bin/time</snippet></ROW><ROW><id>9181787</id><snippet>man time</snippet></ROW><ROW><id>9181787</id><snippet>which time</snippet></ROW><ROW><id>9181787</id><snippet>import shlex
testPopen = subprocess.Popen(shlex.split('bash -c "time {a}"'.format(a = app)),
    stdout=subprocess.PIPE,stderr=subprocess.PIPE, shell=False) 
out,err = testPopen.communicate()
print(err)
</snippet></ROW><ROW><id>9181850</id><snippet>rapper</snippet></ROW><ROW><id>9181850</id><snippet>-c</snippet></ROW><ROW><id>9181850</id><snippet>lang</snippet></ROW><ROW><id>9181850</id><snippet>def rapper_count(f,lang):
    p=subprocess.Popen(["rapper","-i",lang,"-c",f],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()
    ret = p.poll()
    if ret &lt;&gt; 0:
        raise Exception, "Error parsing with rapper\n%s"%err
    return int(err.split()[-2])
</snippet></ROW><ROW><id>9181850</id><snippet>import RDF

test_file = "/some/file"

uri=RDF.Uri(string="file:"+test_file)

parser=RDF.Parser(name="turtle")
if parser is None:
  raise Exception("Failed to create RDF.Parser raptor")

count=0
for s in parser.parse_as_stream(uri,uri):
  count=count+1

print "Parsing added",count,"statements"
</snippet></ROW><ROW><id>9181881</id><snippet>update()</snippet></ROW><ROW><id>9181881</id><snippet>import hashlib
import os

def digest_with_progress(filename, chunk_size):
    read_size = 0
    last_percent_done = 0
    digest = hashlib.md5()
    total_size = os.path.getsize(filename)

    data = True
    f = open(filename)
    while data:
        # Read and update digest.
        data = f.read(chunk_size)
        read_size += len(data)
        digest.update(data)

        # Calculate progress.
        percent_done = 100 * read_size / total_size
        if percent_done &gt; last_percent_done:
            print '%d%% done' % percent_done
            last_percent_done = percent_done
    f.close()
    return digest.hexdigest()
</snippet></ROW><ROW><id>9181881</id><snippet>print digest_with_progress('/bin/bash', 1024)</snippet></ROW><ROW><id>9181881</id><snippet>1% done
2% done
3% done
4% done
5% done
6% done
7% done
8% done
9% done
10% done
11% done
12% done
13% done
14% done
15% done
16% done
17% done
18% done
19% done
20% done
21% done
22% done
23% done
24% done
25% done
26% done
27% done
28% done
29% done
30% done
31% done
32% done
33% done
34% done
35% done
36% done
37% done
38% done
39% done
40% done
41% done
42% done
43% done
44% done
45% done
46% done
47% done
48% done
49% done
50% done
51% done
52% done
53% done
54% done
55% done
56% done
57% done
58% done
59% done
60% done
61% done
62% done
63% done
64% done
65% done
66% done
67% done
68% done
69% done
70% done
71% done
72% done
73% done
74% done
75% done
76% done
77% done
78% done
79% done
80% done
81% done
82% done
83% done
84% done
85% done
86% done
87% done
88% done
89% done
90% done
91% done
92% done
93% done
94% done
95% done
96% done
97% done
98% done
99% done
100% done
b114ecaab65bc5b02f5a129bd29d1864
</snippet></ROW><ROW><id>9181881</id><snippet>$ ls -l /bin/bash; md5sum /bin/bash
-rwxr-xr-x 1 root root 971384 Nov 30 16:31 /bin/bash
b114ecaab65bc5b02f5a129bd29d1864  /bin/bash
</snippet></ROW><ROW><id>9181881</id><snippet>chunk_size</snippet></ROW><ROW><id>9181881</id><snippet>/bin/bash</snippet></ROW><ROW><id>9181881</id><snippet>10% done
21% done
31% done
42% done
52% done
63% done
73% done
84% done
94% done
100% done
b114ecaab65bc5b02f5a129bd29d1864
</snippet></ROW><ROW><id>9181988</id><snippet>__setattr__</snippet></ROW><ROW><id>9181988</id><snippet>&gt;&gt;&gt; n = NonWorkingSetAttr()
&gt;&gt;&gt; setattr(n, 'a', n.b)
&gt;&gt;&gt; print("n.a = %s, n.b = %s" % (n.a(), n.b()))
n.a = a, n.b = b
&gt;&gt;&gt; 
&gt;&gt;&gt; del NonWorkingSetAttr.__setattr__
&gt;&gt;&gt;
&gt;&gt;&gt; setattr(n, 'a', n.b)
&gt;&gt;&gt; print("n.a = %s, n.b = %s" % (n.a(), n.b()))
n.a = b, n.b = b
</snippet></ROW><ROW><id>9181988</id><snippet>NonWorkingSetAttr</snippet></ROW><ROW><id>9181988</id><snippet>__setattr__</snippet></ROW><ROW><id>9181988</id><snippet>object</snippet></ROW><ROW><id>9181988</id><snippet>&gt;&gt;&gt; class FixedNonWorkingSetAttr(NonWorkingSetAttr):
...     __setattr__ = object.__setattr__
... 
&gt;&gt;&gt; n = FixedNonWorkingSetAttr()
&gt;&gt;&gt; setattr(n, 'a', n.b)
&gt;&gt;&gt; print("n.a = %s, n.b = %s" % (n.a(), n.b()))
n.a = b, n.b = b
&gt;&gt;&gt; isinstance(n, NonWorkingSetAttr)
True
</snippet></ROW><ROW><id>9182101</id><snippet>[{'type':k, 'items':v} for k,v in res.items()]</snippet></ROW><ROW><id>9182101</id><snippet>for k,v in res.items()</snippet></ROW><ROW><id>9182101</id><snippet>res</snippet></ROW><ROW><id>9182101</id><snippet>k</snippet></ROW><ROW><id>9182101</id><snippet>v</snippet></ROW><ROW><id>9182101</id><snippet>{'type':k, 'items':v}</snippet></ROW><ROW><id>9182101</id><snippet>'type'</snippet></ROW><ROW><id>9182101</id><snippet>k</snippet></ROW><ROW><id>9182101</id><snippet>'items'</snippet></ROW><ROW><id>9182101</id><snippet>v</snippet></ROW><ROW><id>9182101</id><snippet>[...]</snippet></ROW><ROW><id>9182101</id><snippet>res</snippet></ROW><ROW><id>9182108</id><snippet>def has_vowels(string):
  if not string:  # check for empty string
    return False  # empty strings never have vowels
  # TODO we have a non-empty string at this point and can use recursion

def is_valid_password(string):
  return len(string) &gt; 0 and not has_vowels(string)

def request_password():
  while True:   # use an endless loop here, we don't won't to repeat
                # the "input" statement. We could also change this to
                # something like `for i in range(3)` to allow only a limited
                # number of tries.
    passwd = input('Please enter a password with no vowels in it: ')
    # TODO check if input is valid, if yes, return, if no, print an error
</snippet></ROW><ROW><id>9182195</id><snippet>from shared.datastore import *
</snippet></ROW><ROW><id>9182195</id><snippet>datetime</snippet></ROW><ROW><id>9182195</id><snippet>from datetime import datetime
print(datetime)
from shared.datastore import *
print(datetime)
</snippet></ROW><ROW><id>9182195</id><snippet>datetime</snippet></ROW><ROW><id>9182195</id><snippet>datetime</snippet></ROW><ROW><id>9182316</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>9182316</id><snippet>manage.py syncdb</snippet></ROW><ROW><id>9182438</id><snippet>Debug</snippet></ROW><ROW><id>9182438</id><snippet>Breakpoints</snippet></ROW><ROW><id>9182477</id><snippet>scn = Scanner("localhost", "8834", login="root", password="password123")
reports = scn.reportList()
for r in reports:
    if r["readableName"] == SOME_NAME:
        print r["status"]
</snippet></ROW><ROW><id>9182517</id><snippet>size/100</snippet></ROW><ROW><id>9182517</id><snippet>percentage</snippet></ROW><ROW><id>9182517</id><snippet>while chunk:
    chunk = f.read(size/100)
    read += len(chunk)
    m.update(chunk)
    if size &gt; 500000000:
        print '%s done for %s.'%(100.0 * read / size, name)
</snippet></ROW><ROW><id>9182547</id><snippet>div</snippet></ROW><ROW><id>9182547</id><snippet>div(24) == 5</snippet></ROW><ROW><id>9182547</id><snippet>3</snippet></ROW><ROW><id>9182547</id><snippet>1</snippet></ROW><ROW><id>9182547</id><snippet>div</snippet></ROW><ROW><id>9182547</id><snippet>import math
def divisors(n):
  return sum(1 for x in range(1, n+1) if n % x == 0)
</snippet></ROW><ROW><id>9182547</id><snippet>n</snippet></ROW><ROW><id>9182547</id><snippet>import itertools

s = 0
for i in itertools.count(1):
  s += i
  if div(s) &gt; 500:
    print s
    break
</snippet></ROW><ROW><id>9182603</id><snippet>import collections
histogram = collections.defaultdict(int)
</snippet></ROW><ROW><id>9182603</id><snippet>d_list</snippet></ROW><ROW><id>9182603</id><snippet>d</snippet></ROW><ROW><id>9182603</id><snippet>for d in d_list:
    histogram[d['age']] += 1
</snippet></ROW><ROW><id>9182603</id><snippet>user_records</snippet></ROW><ROW><id>9182603</id><snippet>(firstname, lastname)</snippet></ROW><ROW><id>9182603</id><snippet>user_records.itervalues()</snippet></ROW><ROW><id>9182603</id><snippet>user_id</snippet></ROW><ROW><id>9182603</id><snippet>(firstname, lastname)</snippet></ROW><ROW><id>9182603</id><snippet>user_id</snippet></ROW><ROW><id>9182603</id><snippet>histogram = collections.Counter(d['age'] for d in user_records.itervalues())
</snippet></ROW><ROW><id>9182603</id><snippet>record_list</snippet></ROW><ROW><id>9182603</id><snippet>&gt;&gt;&gt; record_list
[{'lastname': 'Mann', 'age': 23, 'firstname': 'Joe'}, 
 {'lastname': 'Moore', 'age': 23, 'firstname': 'Alex'}, 
 {'lastname': 'Sault', 'age': 33, 'firstname': 'Marie'}, 
 {'lastname': 'Mann', 'age': 23, 'firstname': 'Joe'}]
&gt;&gt;&gt; user_ages = dict(((d['firstname'], d['lastname']), d['age']) for d in record_list)
&gt;&gt;&gt; user_ages
{('Joe', 'Mann'): 23, ('Alex', 'Moore'): 23, ('Marie', 'Sault'): 33}
</snippet></ROW><ROW><id>9182603</id><snippet>record_list</snippet></ROW><ROW><id>9182603</id><snippet>user_ages</snippet></ROW><ROW><id>9182603</id><snippet>Counter</snippet></ROW><ROW><id>9182603</id><snippet>&gt;&gt;&gt; collections.Counter(user_ages.itervalues())
Counter({23: 2, 33: 1})
</snippet></ROW><ROW><id>9182663</id><snippet>csv</snippet></ROW><ROW><id>9182663</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; open('test.csv','w').write('1,one\n2,two\n3,three\n')
&gt;&gt;&gt; list(csv.reader(open('test.csv')))
[['1', 'one'], ['2', 'two'], ['3', 'three']]
</snippet></ROW><ROW><id>9182663</id><snippet>MySQL-python</snippet></ROW><ROW><id>9182663</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; conn = MySQLdb.connect(host, user, passwd, db)
&gt;&gt;&gt; cursor = conn.cursor()
&gt;&gt;&gt; cursor.executemany('INSERT INTO numbers (value, name) VALUES (%, %)',
...                    [['1', 'one'], ['2', 'two'], ['3', 'three']])
... 
&gt;&gt;&gt; cursor.commit()
</snippet></ROW><ROW><id>9182663</id><snippet>Model.save</snippet></ROW><ROW><id>9182668</id><snippet>$PATH</snippet></ROW><ROW><id>9182668</id><snippet>which pdb</snippet></ROW><ROW><id>9182668</id><snippet>pdb</snippet></ROW><ROW><id>9182668</id><snippet>$PATH</snippet></ROW><ROW><id>9182668</id><snippet>exec-path</snippet></ROW><ROW><id>9182668</id><snippet>(setenv "PATH" "/usr/local/bin:/usr/bin:/bin:/some/other/dir")
(setq exec-path (string-split (getenv "PATH") path-separator))
</snippet></ROW><ROW><id>9182668</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9182668</id><snippet>pdb</snippet></ROW><ROW><id>9182668</id><snippet>python-mode</snippet></ROW><ROW><id>9182668</id><snippet>#/bin/sh
exec python -m pdb "$@"
</snippet></ROW><ROW><id>9183367</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9183367</id><snippet>from BeautifulSoup import BeautifulStoneSoup as Soup

xml = """
&lt;TrdCaptRpt RptID="10000001" TransTyp="0"&gt;
    &lt;RptSide Side="1" Txt1="XXXXX"&gt;
        &lt;Pty ID="XXXXX" R="1"/&gt;
    &lt;/RptSide&gt;
&lt;/TrdCaptRpt&gt;
"""

soup = Soup(xml)
rpt_side = soup.trdcaptrpt.rptside
rpt_side['txt1'] = 'Updated'
rpt_side.pty['id'] = 'Updated'

print soup
</snippet></ROW><ROW><id>9183367</id><snippet>&lt;trdcaptrpt rptid="10000001" transtyp="0"&gt;
&lt;rptside side="1" txt1="Updated"&gt;
&lt;pty id="Updated" r="1"&gt;
&lt;/pty&gt;&lt;/rptside&gt;
&lt;/trdcaptrpt&gt;
</snippet></ROW><ROW><id>9183367</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>9183367</id><snippet>from xml.etree import ElementTree as etree

xml = """
&lt;TrdCaptRpt RptID="10000001" TransTyp="0"&gt;
    &lt;RptSide Side="1" Txt1="XXXXX"&gt;
        &lt;Pty ID="XXXXX" R="1"/&gt;
    &lt;/RptSide&gt;
&lt;/TrdCaptRpt&gt;
"""

root = etree.fromstring(xml)
rpt_side = root.find('RptSide')
rpt_side.set('Txt1', 'Updated')
pty = rpt_side.find('Pty')
pty.set('ID', 'Updated')
print etree.tostring(root)
</snippet></ROW><ROW><id>9183367</id><snippet>&lt;TrdCaptRpt RptID="10000001" TransTyp="0"&gt;
    &lt;RptSide Side="1" Txt1="Updated"&gt;
        &lt;Pty ID="Updated" R="1" /&gt;
    &lt;/RptSide&gt;
&lt;/TrdCaptRpt&gt;
</snippet></ROW><ROW><id>9183957</id><snippet>for i in pattern: 
    IDs.append( eval(i[0])(*i[1:],post=True) )

print IDs
</snippet></ROW><ROW><id>9183957</id><snippet>eval()</snippet></ROW><ROW><id>9183957</id><snippet>eval()</snippet></ROW><ROW><id>9183957</id><snippet>for i in pattern:
    # look up i[0] in the symbol dictionary of the current module
    fun = sys.modules[__name__].__dict__[ i[0] ]
    IDs.append( fun(*i[1:],post=True) )
</snippet></ROW><ROW><id>9183957</id><snippet>yourObject.__dict__[ functionName ]</snippet></ROW><ROW><id>9183998</id><snippet>action</snippet></ROW><ROW><id>9183998</id><snippet>store_true</snippet></ROW><ROW><id>9183998</id><snippet>store_false</snippet></ROW><ROW><id>9183998</id><snippet>action</snippet></ROW><ROW><id>9183998</id><snippet>--foo=true</snippet></ROW><ROW><id>9183998</id><snippet>--foo=false</snippet></ROW><ROW><id>9183998</id><snippet>parser.add_argument('-b', action='store_true', default=False)
</snippet></ROW><ROW><id>9184137</id><snippet>wb</snippet></ROW><ROW><id>9184137</id><snippet>w</snippet></ROW><ROW><id>9184137</id><snippet>open()</snippet></ROW><ROW><id>9184217</id><snippet>&gt;&gt;&gt; revdict = dict([(mydict[key],key) for key in mydict])
&gt;&gt;&gt; revdict['myValue']
'myKey'
</snippet></ROW><ROW><id>9184505</id><snippet>bytearray(100)
</snippet></ROW><ROW><id>9184514</id><snippet>zip</snippet></ROW><ROW><id>9184514</id><snippet>[peaks([x,y]) for x,y in zip(xscat,yscat)]
</snippet></ROW><ROW><id>9184621</id><snippet>tuple()</snippet></ROW><ROW><id>9184683</id><snippet>&amp;</snippet></ROW><ROW><id>9184683</id><snippet>__and__</snippet></ROW><ROW><id>9184683</id><snippet>P</snippet></ROW><ROW><id>9184683</id><snippet>P(is_divisible_by_13) &amp; P(is_palindrome)
</snippet></ROW><ROW><id>9184683</id><snippet>P(is_divisible_by_13) &amp; is_palindrome
</snippet></ROW><ROW><id>9184683</id><snippet>|</snippet></ROW><ROW><id>9184683</id><snippet>__or__</snippet></ROW><ROW><id>9184683</id><snippet>~</snippet></ROW><ROW><id>9184683</id><snippet>__not__</snippet></ROW><ROW><id>9184683</id><snippet>and</snippet></ROW><ROW><id>9184683</id><snippet>or</snippet></ROW><ROW><id>9184683</id><snippet>not</snippet></ROW><ROW><id>9184683</id><snippet>P</snippet></ROW><ROW><id>9184683</id><snippet>__iand__</snippet></ROW><ROW><id>9184683</id><snippet>__ior__</snippet></ROW><ROW><id>9184683</id><snippet>__rand__</snippet></ROW><ROW><id>9184683</id><snippet>__ror__</snippet></ROW><ROW><id>9184683</id><snippet>class P(object):
    def __init__(self, predicate):
        self.pred = predicate

    def __call__(self, obj):
        return self.pred(obj)

    def __copy_pred(self):
        return copy.copy(self.pred)

    def __and__(self, predicate):
        def func(obj):
            return self.pred(obj) and predicate(obj)
        return P(func)

    def __or__(self, predicate):
        def func(obj):
            return self.pred(obj) or predicate(obj)
        return P(func)
</snippet></ROW><ROW><id>9184683</id><snippet>from functools import update_wrapper

def predicate(func):
    """Decorator that constructs a predicate (``P``) instance from
    the given function."""
    result = P(func)
    update_wrapper(result, func)
    return result
</snippet></ROW><ROW><id>9184683</id><snippet>predicate</snippet></ROW><ROW><id>9184683</id><snippet>P</snippet></ROW><ROW><id>9184683</id><snippet>@predicate
def is_divisible_by_13(number):
    return number % 13 == 0

@predicate
def is_palindrome(number):
    return str(number) == str(number)[::-1]

&gt;&gt;&gt; pred = (is_divisible_by_13 &amp; is_palindrome)
&gt;&gt;&gt; print [x for x in xrange(1, 1000) if pred(x)]
[494, 585, 676, 767, 858, 949]
</snippet></ROW><ROW><id>9184848</id><snippet># Delete everything reachable from the directory named in "top",
# assuming there are no symbolic links.
# CAUTION:  This is dangerous!  For example, if top == '/', it
# could delete all your disk files.
import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
</snippet></ROW><ROW><id>9184902</id><snippet>?</snippet></ROW><ROW><id>9184902</id><snippet>paramstyle</snippet></ROW><ROW><id>9184902</id><snippet>format</snippet></ROW><ROW><id>9184902</id><snippet>pyformat</snippet></ROW><ROW><id>9184903</id><snippet>pip install --upgrade pip</snippet></ROW><ROW><id>9184906</id><snippet>all()</snippet></ROW><ROW><id>9184906</id><snippet>all(is_okay(s) for s in some_array)
</snippet></ROW><ROW><id>9185149</id><snippet>def printdnsfile(file):
    file= open (file,"r")
    import socket
    dest = open("/dnsfile.txt",'w')
    for line in file:
        line = line.strip()
        if line:
            print(socket.gethostbyname(str(line)))
            print&gt;&gt;dest, str(",".join([line,socket.gethostbyname(line)])+'\n')
</snippet></ROW><ROW><id>9185384</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>9185410</id><snippet>if include_already_seen or not data[person].get(item, 0):
</snippet></ROW><ROW><id>9185520</id><snippet>def span(lst):
  yield [lst]
  for i in range(1, len(lst)):
    for x in span(lst[i:]):
      yield [lst[:i]] + x
</snippet></ROW><ROW><id>9185520</id><snippet>[1,2,3,4] =&gt; [[1,2,3,4]]</snippet></ROW><ROW><id>9185520</id><snippet>1</snippet></ROW><ROW><id>9185520</id><snippet>[1,2,3] =&gt; 
  [[1]] + [[2], [3]]  # =&gt; [[1], [2], [3]]
  [[1]] + [[2,3]]     # =&gt; [[1], [2,3]]
</snippet></ROW><ROW><id>9185520</id><snippet>2</snippet></ROW><ROW><id>9185520</id><snippet>[1,2,3,4,5] =&gt;
  [[1,2]] + [[3], [4], [5]]  # =&gt; [[1,2], [3], [4], [5]]
  [[1,2]] + [[3,4], [5]]     # =&gt; [[1,2], [3,4], [5]]
  [[1,2]] + [[3], [4,5]]     # =&gt; [[1,2], [3], [4,5]]
  [[1,2]] + [[3,4,5]]        # =&gt; [[1,2], [3,4,5]]
</snippet></ROW><ROW><id>9185520</id><snippet>[3,4,5]</snippet></ROW><ROW><id>9185520</id><snippet>yield</snippet></ROW><ROW><id>9185520</id><snippet>list</snippet></ROW><ROW><id>9185520</id><snippet>list(span([1,2,3,4]))</snippet></ROW><ROW><id>9185718</id><snippet>first_column = [x[0] for x in mysql_rows]
</snippet></ROW><ROW><id>9185823</id><snippet>for file in glob.iglob(os.path.join(dir, '*.[xX][lL][sS]')):
</snippet></ROW><ROW><id>9185908</id><snippet>def inv(perm):
    inverse = [0] * len(perm)
    for i, p in enumerate(perm):
        inverse[p] = i
    return inverse

perm = [3, 0, 2, 1]
print(inv(perm))
for i in perm:
    print(inv(perm)[i])

[1, 3, 2, 0]
0
1
2
3
</snippet></ROW><ROW><id>9185952</id><snippet>last_line</snippet></ROW><ROW><id>9185952</id><snippet>last_line = None

with open("somefile.txt") as f:
    for line in f:
        if not last_line == None:
            do_stuff(last_line, extract_needed_part(line))
        last_line = line
do_stuff(last_line) #The final line without anything following it.
</snippet></ROW><ROW><id>9186030</id><snippet>cur3.execute("UPDATE recon SET Name = %s WHERE id = %s", (row[1], row[0]))
</snippet></ROW><ROW><id>9186030</id><snippet>cur3.execute("UPDATE recon SET Name = '%s' WHERE id = '%s'" % (row[1], row[0]))
</snippet></ROW><ROW><id>9186188</id><snippet>os.rename</snippet></ROW><ROW><id>9186188</id><snippet>$ ln -s target link
$ python -c "import os; os.rename('link', 'link.new')"
$ ls -l link.new
lrwxrwxrwx 1 phihag phihag 6 Feb  8 01:25 link.new -&gt; target
</snippet></ROW><ROW><id>9186188</id><snippet>/</snippet></ROW><ROW><id>9186188</id><snippet>link/</snippet></ROW><ROW><id>9186188</id><snippet>link/.</snippet></ROW><ROW><id>9186188</id><snippet>link</snippet></ROW><ROW><id>9186305</id><snippet>def test(vs, target_sum, current_total):
    counter = 0
    vranges = [range(0, target_sum+1, v) for v in vs]
    for ivec in itertools.product(*vranges):
        if sum(ivec) == current_total:
            counter += 1
    return counter
</snippet></ROW><ROW><id>9186507</id><snippet>screen = CreateDC("DISPLAY", NULL, NULL, NULL); 
</snippet></ROW><ROW><id>9186507</id><snippet>width = GetDeviceCaps(screen, HORZRES);
height = GetDeviceCaps(screen, VERTRES);
</snippet></ROW><ROW><id>9186507</id><snippet>width = GetSystemMetrics(SM_CXVIRTUALSCREEN);
height = GetSystemMetrics(SM_CYVIRTUALSCREEN);
</snippet></ROW><ROW><id>9186605</id><snippet>class MySub1(MySuper):
    pass

MySub1._meta.get_field('some_attr').help_text = 'sub1 help text'


class MySub2(MySuper):
    pass

MySub2._meta.get_field('some_attr').help_text = 'sub2 help text'
</snippet></ROW><ROW><id>9186671</id><snippet>int</snippet></ROW><ROW><id>9186671</id><snippet>&gt;&gt;&gt; int('9')
9
</snippet></ROW><ROW><id>9186832</id><snippet>import Queue, threading
def gen_multiplex(genlist):
    item_q = Queue.Queue()
    def run_one(source):
        for item in source: item_q.put(item)

    def run_all():
        thrlist = []
        for source in genlist:
            t = threading.Thread(target=run_one,args=(source,))
            t.start()
            thrlist.append(t)
        for t in thrlist: t.join()
        item_q.put(StopIteration)

    threading.Thread(target=run_all).start()
    while True:
        item = item_q.get()
        if item is StopIteration: return
        yield item
</snippet></ROW><ROW><id>9187022</id><snippet>import sys

class persistent_locals(object):
    def __init__(self, func):
        self._locals = {}
        self.func = func

    def __call__(self, *args, **kwargs):
        def tracer(frame, event, arg):
            if event=='return':
                self._locals = frame.f_locals.copy()

        # tracer is activated on next call, return or exception
        sys.setprofile(tracer)
        try:
            # trace the function call
            res = self.func(*args, **kwargs)
        finally:
            # disable tracer and replace with old one
            sys.setprofile(None)
        return res

    def clear_locals(self):
        self._locals = {}

    @property
    def locals(self):
        return self._locals

@persistent_locals
def func():
    local1 = 1
    local2 = 2

func()
print func.locals
</snippet></ROW><ROW><id>9187079</id><snippet>allocate_ids</snippet></ROW><ROW><id>9187117</id><snippet>&gt;&gt;&gt; '10' &lt; '9'
True
</snippet></ROW><ROW><id>9187129</id><snippet>QFrame:QPushButton</snippet></ROW><ROW><id>9187129</id><snippet>:QPushbutton</snippet></ROW><ROW><id>9187129</id><snippet>#btnName</snippet></ROW><ROW><id>9187129</id><snippet>QPushButton</snippet></ROW><ROW><id>9187129</id><snippet>objectName</snippet></ROW><ROW><id>9187129</id><snippet>QFrame</snippet></ROW><ROW><id>9187129</id><snippet>QFrame QPushButton#btnName { css: blah; }
</snippet></ROW><ROW><id>9187129</id><snippet>QFrame QPushButton#btnName:hover { css: hoverstuff; }
QFrame QPushButton#btnName:pressed { css: pressedstuff; }
</snippet></ROW><ROW><id>9187358</id><snippet>dateutil.rrule</snippet></ROW><ROW><id>9187358</id><snippet>import datetime
from dateutil import rrule


holidays = [
    datetime.date(2012, 5, 1,),
    datetime.date(2012, 6, 1,),
    # ...
]

# Create a rule to recur every weekday starting today
r = rrule.rrule(rrule.DAILY,
                byweekday=[rrule.MO, rrule.TU, rrule.WE, rrule.TH, rrule.FR],
                dtstart=datetime.date.today())

# Create a rruleset
rs = rrule.rruleset()

# Attach our rrule to it
rs.rrule(r)

# Add holidays as exclusion days
for exdate in holidays:
    rs.exdate(exdate)


print rs[0]
</snippet></ROW><ROW><id>9187568</id><snippet>&gt;&gt;&gt; class WhoMovedMyInit(object):
        class __metaclass__(type):
            def __init__(self, *args, **kw):
                super(type,self).__init__(*args, **kw)
                if self.__init__ is not WhoMovedMyInit.__init__:
                    raise Exception('Dude, I told not to override my __init__')


&gt;&gt;&gt; class IAmOk(WhoMovedMyInit):
        pass

&gt;&gt;&gt; class Lol(WhoMovedMyInit):
        def __init__(self):
            pass

Traceback (most recent call last):
  File "&lt;pyshell#35&gt;", line 1, in &lt;module&gt;
    class Lol(WhoMovedMyInit):
  File "&lt;pyshell#31&gt;", line 6, in __init__
    raise Exception('Dude, I told not to override my __init__')
Exception: Dude, I told not to override my __init__
</snippet></ROW><ROW><id>9187568</id><snippet>__init__</snippet></ROW><ROW><id>9187589</id><snippet>label</snippet></ROW><ROW><id>9187589</id><snippet>result = dbsession.query(Shares.price, \
                            func.sum(Shares.quantity).label("Total sold")) \
                            .filter(Shares.company== 'Google') \
                            .group_by(Shares.price).all()
</snippet></ROW><ROW><id>9187595</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>9187693</id><snippet>struct_time</snippet></ROW><ROW><id>9187693</id><snippet>time.strptime(string[, format])</snippet></ROW><ROW><id>9187693</id><snippet>import time
fifth_element_of_row = "2000-12-31 23:11:12"
my_time_struct = time.strptime(fifth_element_of_row, "%Y-%m-%d %H:%M:%S")
print my_time_struct
</snippet></ROW><ROW><id>9187693</id><snippet>time.struct_time(tm_year=2000, tm_mon=12, 
tm_mday=31, tm_hour=23, tm_min=11, tm_sec=12, 
tm_wday=6, tm_yday=366, tm_isdst=-1)
</snippet></ROW><ROW><id>9187693</id><snippet>print my_time_struct.tm_year
</snippet></ROW><ROW><id>9187693</id><snippet>2000
</snippet></ROW><ROW><id>9187951</id><snippet>range(num)</snippet></ROW><ROW><id>9187951</id><snippet>range(4)</snippet></ROW><ROW><id>9187951</id><snippet>result</snippet></ROW><ROW><id>9187951</id><snippet>result</snippet></ROW><ROW><id>9187951</id><snippet>num &gt; 10</snippet></ROW><ROW><id>9187951</id><snippet>result</snippet></ROW><ROW><id>9187951</id><snippet>range(num)</snippet></ROW><ROW><id>9188950</id><snippet>false</snippet></ROW><ROW><id>9188950</id><snippet>False</snippet></ROW><ROW><id>9188950</id><snippet>u</snippet></ROW><ROW><id>9189014</id><snippet>C:\Python27\Scripts</snippet></ROW><ROW><id>9189014</id><snippet>PATH</snippet></ROW><ROW><id>9189014</id><snippet>C:\Python27</snippet></ROW><ROW><id>9189014</id><snippet>PATH</snippet></ROW><ROW><id>9189014</id><snippet>C:\&gt;python django-admin.py startproject myproject</snippet></ROW><ROW><id>9189014</id><snippet>pgadmin III</snippet></ROW><ROW><id>9189014</id><snippet>Servers</snippet></ROW><ROW><id>9189014</id><snippet>Server Groups</snippet></ROW><ROW><id>9189014</id><snippet>PostgreSQL 9.0 (localhost:5432)</snippet></ROW><ROW><id>9189014</id><snippet>Login Roles</snippet></ROW><ROW><id>9189014</id><snippet>New Role..</snippet></ROW><ROW><id>9189014</id><snippet>Role name</snippet></ROW><ROW><id>9189014</id><snippet>Databases</snippet></ROW><ROW><id>9189014</id><snippet>New Database..</snippet></ROW><ROW><id>9189014</id><snippet>Owner</snippet></ROW><ROW><id>9189014</id><snippet>Role name</snippet></ROW><ROW><id>9189119</id><snippet> sed -i "/^class myClass2:/,/^class/s/f1 = '512kB'/f1 = '1MB'/" path/to/file.py
</snippet></ROW><ROW><id>9189132</id><snippet>wxPython</snippet></ROW><ROW><id>9189132</id><snippet>wxPython</snippet></ROW><ROW><id>9189132</id><snippet>Font</snippet></ROW><ROW><id>9189175</id><snippet>|</snippet></ROW><ROW><id>9189175</id><snippet>StringEnd</snippet></ROW><ROW><id>9189175</id><snippet>setDebug()</snippet></ROW><ROW><id>9189175</id><snippet>&gt;&gt;&gt; w = Word(alphas).setDebug() + (ws.setDebug() | dot.setDebug()) + StringEnd()
&gt;&gt;&gt; w.parseString('AMIT.')
Match W:(abcd...) at loc 0(1,1)
Matched W:(abcd...) -&gt; ['AMIT']
Match Re:('\\s*') at loc 4(1,5)
Matched Re:('\\s*') -&gt; ['']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\python26\lib\site-packages\pyparsing-1.5.6-py2.6.egg\pyparsing.py", line 1032, in parseString
    raise exc
pyparsing.ParseException: Expected end of text (at char 4), (line:1, col:5)
</snippet></ROW><ROW><id>9189175</id><snippet>|</snippet></ROW><ROW><id>9189175</id><snippet>^</snippet></ROW><ROW><id>9189175</id><snippet>\s+</snippet></ROW><ROW><id>9189175</id><snippet>\s*</snippet></ROW><ROW><id>9189175</id><snippet>Optional(dot)</snippet></ROW><ROW><id>9189193</id><snippet>X.replace("C:","c")</snippet></ROW><ROW><id>9189193</id><snippet>X</snippet></ROW><ROW><id>9189193</id><snippet>X.replace("C:","c")
</snippet></ROW><ROW><id>9189193</id><snippet>X = X.replace("C:","c")
</snippet></ROW><ROW><id>9189208</id><snippet>local_time = zone.localize(timestamp)
</snippet></ROW><ROW><id>9189320</id><snippet>readline()</snippet></ROW><ROW><id>9189320</id><snippet>lines = [0]
with open("testmat.txt") as f:
    while f.readline():
        lines.append(f.tell())
    # now you can read an arbitrary line:
    f.seek(lines[1235])
    line = f.readline()
</snippet></ROW><ROW><id>9189320</id><snippet>f.seek(linenumber*linelenght)</snippet></ROW><ROW><id>9189445</id><snippet>drunk=Drunk('Alexander')
</snippet></ROW><ROW><id>9189445</id><snippet>d = Drunk('Drunk'+str(trial))
</snippet></ROW><ROW><id>9189633</id><snippet>import string
good_characters= string.ascii_letters # a-z, A-Z
</snippet></ROW><ROW><id>9189633</id><snippet>for bad_char in special_chars:
    country = country.replace(bad_char, '')
</snippet></ROW><ROW><id>9189633</id><snippet>country = ''.join(s if s in good_characters else ' ' for s in country).strip()
</snippet></ROW><ROW><id>9189633</id><snippet>(s if s in good_characters else ' ' for s in country)
</snippet></ROW><ROW><id>9189633</id><snippet>''.join(...)</snippet></ROW><ROW><id>9189633</id><snippet>.strip()</snippet></ROW><ROW><id>9189726</id><snippet>[ partial(lambda x: x, x) for x in range(5) ]
</snippet></ROW><ROW><id>9189726</id><snippet>[ (lambda x: (lambda: x))(x) for x in range(5) ]
</snippet></ROW><ROW><id>9190132</id><snippet>% python -m timeit -c '
statement1 = True
statement2 = True
statement3 = True

def perform():
    pass

def check():
    if (statement1 and
        statement2 and
        statement3):
        return True
    else:
        return False

def doIt():
    if check():
        perform()

doIt()
'
1000000 loops, best of 3: 1.37 usec per loop
</snippet></ROW><ROW><id>9190383</id><snippet>time</snippet></ROW><ROW><id>9190383</id><snippet>ValueError</snippet></ROW><ROW><id>9190383</id><snippet>&gt;&gt;&gt; time.strptime('08:30', '%H:%M')
time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=30, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)
&gt;&gt;&gt; time.strptime('08:70', '%H:%M')
Traceback (most recent call last):
  (...)
ValueError: unconverted data remains: 0
&gt;&gt;&gt; time.strptime('0830', '%H:%M')
Traceback (most recent call last):
  (...)
ValueError: time data '0830' does not match format '%H:%M'
</snippet></ROW><ROW><id>9190383</id><snippet>len(time_string) == 5</snippet></ROW><ROW><id>9190383</id><snippet>def is_hh_mm_time(time_string):
    try:
        time.strptime(time_string, '%H:%M')
    except ValueError:
        return False
    return len(time_string) == 5
</snippet></ROW><ROW><id>9190605</id><snippet>&gt;&gt;&gt; p = u'&lt;tag&gt;((?:(?!&lt;/tag&gt;).)*cheese.*?)&lt;/tag&gt;'
&gt;&gt;&gt; patt = re.compile(p, re.UNICODE | re.DOTALL | re.IGNORECASE)
&gt;&gt;&gt; patt.findall(cheesetext)
[u'I love cheese.', u'Yeah, cheese is all I need.', u'Cheese is REALLY I need.', u'Everyone can like cheese.']
</snippet></ROW><ROW><id>9190785</id><snippet>from django.contrib import admin
from testapp.models import MyModel1, MyModle2


admin.site.register(MyModel1)
admin.site.register(MyModel2)
</snippet></ROW><ROW><id>9191027</id><snippet>k &amp; 255</snippet></ROW><ROW><id>9191027</id><snippet>&gt;&gt;&gt; k = 1048678
&gt;&gt;&gt; chr(k &amp; 255)
'f'
</snippet></ROW><ROW><id>9191027</id><snippet>chr(n)</snippet></ROW><ROW><id>9191274</id><snippet>for item_node in xmldoc.documentElement.childNodes:
    if (item_node.nodeName == "item"):
</snippet></ROW><ROW><id>9191274</id><snippet>item</snippet></ROW><ROW><id>9191274</id><snippet>channel</snippet></ROW><ROW><id>9191274</id><snippet>nodeName</snippet></ROW><ROW><id>9191331</id><snippet>from collections import defaultdict
colours = defaultdict(int)
for item in mylist:
   colours[item["colour"]] +=1
</snippet></ROW><ROW><id>9191331</id><snippet>defaultdict</snippet></ROW><ROW><id>9191419</id><snippet>int64</snippet></ROW><ROW><id>9191419</id><snippet>&gt;=</snippet></ROW><ROW><id>9191474</id><snippet>return</snippet></ROW><ROW><id>9191474</id><snippet>if</snippet></ROW><ROW><id>9191474</id><snippet>return</snippet></ROW><ROW><id>9191474</id><snippet>return A+1 if A &gt; B else A-1
</snippet></ROW><ROW><id>9191503</id><snippet>import re

results = {}
with open('example.txt', 'r') as f:
    for line in f.readlines():
        m = re.match(r'([^\d]+)(.*)', line.strip())
        if m and m.group(2):
            results[m.group(1).strip()] = [float(n) for n in m.group(2).split()]
</snippet></ROW><ROW><id>9191503</id><snippet>{'some var with (special-&gt;chars)': [13.0, 37.0, 95.0]
 'another var_with_underscores': [3.0]
 'some var with spaces': [52.0, 93.0]
 'someVar': [0.0, 1.0]
 'another char/slash': [132.0]
 'yet another var': [27.3, 9.0]}
</snippet></ROW><ROW><id>9191873</id><snippet>def __init__(self,nodeData, left = None, right = None, parent = None):
 self.nodeData = nodeData
 self.left = left
 self.right = right
 self.parent = self
</snippet></ROW><ROW><id>9191873</id><snippet>self.parent</snippet></ROW><ROW><id>9191873</id><snippet>parent</snippet></ROW><ROW><id>9192475</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; str = "&lt;20"
&gt;&gt;&gt; output = re.sub(r'&lt;(?=\d)', r'\r\n&lt;', str)
&gt;&gt;&gt; output
'\r\n&lt;20'
</snippet></ROW><ROW><id>9192908</id><snippet>conn.commit()</snippet></ROW><ROW><id>9192908</id><snippet>cur.execute('Insert into transform1 (Names) values (?)', [company])</snippet></ROW><ROW><id>9192908</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sqlite3

conn = sqlite3.connect('/tmp/example')
cur = conn.cursor()

companies = ['Theninthö ä ABå', 'Some åther company']

# Create table
cur.execute('Create table transform1 (Names varchar(255), Transformtype varchar(255))')

for company in companies:
    # Fix bad characters
    special_chars = ['å', 'ä', 'ö']
    for bad_char in special_chars:
        company =  company.replace(bad_char, '')

    # Add company
    cur.execute('Insert into transform1 (Names) values (?)', [company])
    conn.commit()

# Show data
cur.execute('Select * from transform1')
data = cur.fetchall()

print data
</snippet></ROW><ROW><id>9192929</id><snippet>gevent.sleep</snippet></ROW><ROW><id>9192929</id><snippet>#!/usr/bin/env python
from gevent import monkey, sleep
monkey.patch_all()
import threading

class ExampleThread(threading.Thread):
    def run(self):
        for i in xrange(10):
            print 'working'
            sleep()

if __name__ == '__main__':
    worker = ExampleThread()
    worker.start()
    print 'this will be printed after the first call to sleep'
</snippet></ROW><ROW><id>9193346</id><snippet>def login(browser, username, password):
  # ...

def search(browser, searchterm):
  # ...

br = mechanize.Browser()
cj = cookielib.LWPCookieJar()
br.set_cookiejar(cj)
cj.load('cookies.txt', ignore_discard=False, ignore_expires=False)
login(br, "user", "pw")
search(br, "searchterm")
</snippet></ROW><ROW><id>9193346</id><snippet>class Session(object):
  def __init__(browser):
    self.browser = browser

  def login(user, password):
    # ... can access self.browser here

  def search(searchterm):
    # ... can access self.browser here

br = mechanize.Browser()
cj = cookielib.LWPCookieJar()
br.set_cookiejar(cj)
cj.load('cookies.txt', ignore_discard=False, ignore_expires=False)
session = Session(br)
session.login("user", "pw")
session.search("searchterm")
</snippet></ROW><ROW><id>9193827</id><snippet>eval</snippet></ROW><ROW><id>9193827</id><snippet>F = eval('lambda x :'+fie)
DF = eval('lambda x :'+dfie)
</snippet></ROW><ROW><id>9193827</id><snippet>args</snippet></ROW><ROW><id>9193827</id><snippet>newton</snippet></ROW><ROW><id>9193827</id><snippet>args</snippet></ROW><ROW><id>9193827</id><snippet>def F(x,fie,dfie):
    y = eval(fie)
    return y 

def DF(x,fie,dfie):
    dy = eval(dfie)
    return dy

print newton(F,x0,DF,(fie,dfie))
</snippet></ROW><ROW><id>9193843</id><snippet>current_tax</snippet></ROW><ROW><id>9193843</id><snippet>price * qty</snippet></ROW><ROW><id>9193843</id><snippet>price * qty</snippet></ROW><ROW><id>9193843</id><snippet>total_price</snippet></ROW><ROW><id>9193864</id><snippet>--with-threads</snippet></ROW><ROW><id>9193864</id><snippet>import thread</snippet></ROW><ROW><id>9193864</id><snippet>python$version -m threading</snippet></ROW><ROW><id>9193864</id><snippet>--enable-shared</snippet></ROW><ROW><id>9193864</id><snippet>libpython$version.so</snippet></ROW><ROW><id>9193864</id><snippet>$prefix/lib</snippet></ROW><ROW><id>9193864</id><snippet>python$version</snippet></ROW><ROW><id>9193864</id><snippet>python$version</snippet></ROW><ROW><id>9193864</id><snippet>ldd</snippet></ROW><ROW><id>9193864</id><snippet>/usr/lib/python$version.so</snippet></ROW><ROW><id>9193864</id><snippet>/usr/bin/python$version</snippet></ROW><ROW><id>9193882</id><snippet>6.5235375356299998e-07</snippet></ROW><ROW><id>9193882</id><snippet>e</snippet></ROW><ROW><id>9193882</id><snippet>&gt;&gt;&gt; 6.5235375356299998e-07 * 10000000
6.5235375356300001

&gt;&gt;&gt; 6.5235375356299998e-07 + 10000000
10000000.000000652
</snippet></ROW><ROW><id>9193882</id><snippet>e</snippet></ROW><ROW><id>9193882</id><snippet>&gt;&gt;&gt; '{0:.20f}'.format(6.5235375356299998e-07)
'0.00000065235375356300'
</snippet></ROW><ROW><id>9194054</id><snippet>ipython</snippet></ROW><ROW><id>9194054</id><snippet>import</snippet></ROW><ROW><id>9194054</id><snippet>help('modules')</snippet></ROW><ROW><id>9194054</id><snippet>pydoc</snippet></ROW><ROW><id>9194054</id><snippet>modules</snippet></ROW><ROW><id>9194104</id><snippet>def __setattr__(self,name,value):
    self.__dict__[name] = value
    self.__dict__['_MyType__d']['Options'][name] = value
</snippet></ROW><ROW><id>9194104</id><snippet>print myType.Options['Minimum']
print myType.Minimum 
</snippet></ROW><ROW><id>9194243</id><snippet>RRGGBBAA</snippet></ROW><ROW><id>9194243</id><snippet>def rgba1(s, unpack=struct.unpack):
    return unpack("BBBB", s.decode("hex"))

def rgba2(s, int=int, xrange=xrange):
    return [int(s[i:i+2], 16) for i in xrange(0, 8, 2)]

def rgba3(s, int=int, xrange=xrange):
    x = int(s, 16)
    return [(x &gt;&gt; i) &amp; 255 for i in xrange(0, 32, 8)]
</snippet></ROW><ROW><id>9194243</id><snippet>In [6]: timeit rgba1("aabbccdd")
1000000 loops, best of 3: 1.44 us per loop

In [7]: timeit rgba2("aabbccdd")
100000 loops, best of 3: 2.43 us per loop

In [8]: timeit rgba3("aabbccdd")
100000 loops, best of 3: 2.44 us per loop
</snippet></ROW><ROW><id>9194485</id><snippet>def escape(s, replace=string.replace):
s = replace(s, "&amp;", "&amp;")
s = replace(s, "&lt;", "&lt;")
return replace(s, "&gt;", "&gt;",)
</snippet></ROW><ROW><id>9194485</id><snippet>connection</snippet></ROW><ROW><id>9194485</id><snippet>params = escape(params)
</snippet></ROW><ROW><id>9195063</id><snippet>&lt;%@ Language = Python%&gt;
&lt;%
def main():
    a = Request.QueryString["btnSubmit"]
main()
%&gt;
</snippet></ROW><ROW><id>9195318</id><snippet>with open('F:\DhcpSrvLog-Mon.log', 'rU') as f:
    for line in f:
        for t in tag:
            if t in line: break
        else:
            print line
</snippet></ROW><ROW><id>9195318</id><snippet>with</snippet></ROW><ROW><id>9195318</id><snippet>else:</snippet></ROW><ROW><id>9195332</id><snippet>JoinableQueue</snippet></ROW><ROW><id>9195332</id><snippet>import gevent
from gevent.queue import *
import time
import random

q = JoinableQueue()
workers = []

def do_work(wid, value):
    gevent.sleep(random.randint(0,2))
    print 'Task', value, 'done', wid

def worker(wid):
    while True:
        item = q.get()
        try:
            do_work(wid, item)
        finally:
            q.task_done()


def producer():
    for i in range(4):
        workers.append(gevent.spawn(worker, random.randint(1, 100000)))

    for item in range(1, 9):
         q.put(item)

producer()
q.join()
</snippet></ROW><ROW><id>9195367</id><snippet>ZipFile()</snippet></ROW><ROW><id>9195548</id><snippet>exec</snippet></ROW><ROW><id>9195548</id><snippet>foo()</snippet></ROW><ROW><id>9195548</id><snippet>x</snippet></ROW><ROW><id>9195548</id><snippet>y</snippet></ROW><ROW><id>9195548</id><snippet>bar()</snippet></ROW><ROW><id>9195548</id><snippet>echo</snippet></ROW><ROW><id>9195548</id><snippet>bar()</snippet></ROW><ROW><id>9195548</id><snippet>exec</snippet></ROW><ROW><id>9195548</id><snippet>exec</snippet></ROW><ROW><id>9195548</id><snippet>exec s in {}, d
</snippet></ROW><ROW><id>9195548</id><snippet>exec()</snippet></ROW><ROW><id>9195548</id><snippet>exec</snippet></ROW><ROW><id>9195576</id><snippet>def numc(n):
for a in range(1,n):
    c= a**n
    d=c%n  
</snippet></ROW><ROW><id>9195595</id><snippet>def handle_exception(self, frame, event, arg):
    if 'my_module' not in self._args[1]:
        return
    ...
    ...
</snippet></ROW><ROW><id>9195947</id><snippet>self.startDownload()</snippet></ROW><ROW><id>9195947</id><snippet>QTimer.singleShot</snippet></ROW><ROW><id>9195947</id><snippet>def ondownloadFinished(self):
    self.paintImage()
    print("download finished?")
    self.db.close()
    QtCore.QTimer.singleShot(0, self.startDownload)
</snippet></ROW><ROW><id>9195947</id><snippet>singleShot</snippet></ROW><ROW><id>9195947</id><snippet>msec</snippet></ROW><ROW><id>9195947</id><snippet>QtCore.QTimer.singleShot(0, self.startDownload)
</snippet></ROW><ROW><id>9195947</id><snippet>QtCore.QMetaObject.invokeMethod(self, 'startDownload',  QtCore.Qt.QueuedConnection)
</snippet></ROW><ROW><id>9196098</id><snippet>value=str('6,0865000000e-01')
value2=value.replace(',', '.')
float(value2)
0.60865000000000002
</snippet></ROW><ROW><id>9196101</id><snippet>&lt;symbol&gt; ::= __expression__ 
</snippet></ROW><ROW><id>9196101</id><snippet>&lt;symbol&gt;</snippet></ROW><ROW><id>9196101</id><snippet>__expression__</snippet></ROW><ROW><id>9196101</id><snippet>::=</snippet></ROW><ROW><id>9196132</id><snippet>re.findall(r"/\,\b", "/NN ,/, breeding/VBG Lilacs/NNP out/RB of/IN the/DT dead/JJ land/NN")
</snippet></ROW><ROW><id>9196192</id><snippet>Person</snippet></ROW><ROW><id>9196192</id><snippet>Card</snippet></ROW><ROW><id>9196192</id><snippet>def addLoan(session, data):

    loan = Loan()
    loan.date_due = data["loan"]["date_due"]
    loan.date_issued = data["loan"]["date_issued"]
    loan.issue_reason = data["loan"]["issue_reason"]

    person = session.query(Person).get(data["person"]["id"])
    if not person:
        person = Person()
        person.id = data["person"]["id"]
        person.fname = data["person"]["fname"]
        person.sname = data["person"]["sname"]
    loan.person = person

    card = session(Card).query.get(data["card"]["id"])
    if not card:
        card = Card()
        card.id = data["card"]["id"]
    loan.card = card

    session.add(loan)
    session.commit()
</snippet></ROW><ROW><id>9196192</id><snippet>get</snippet></ROW><ROW><id>9196192</id><snippet>get</snippet></ROW><ROW><id>9196455</id><snippet>def data_from_matrix(m):
    return [(len(m) - 1 - sum(row)) // 2 for row in m]
</snippet></ROW><ROW><id>9196455</id><snippet>range(len(m))</snippet></ROW><ROW><id>9196455</id><snippet>&gt;&gt;&gt; data_from_matrix([[ 0,  1,  1,  1,  1,  1],
...                   [-1,  0,  1, -1, -1, -1],
...                   [-1, -1,  0, -1, -1, -1],
...                   [-1,  1,  1,  0, -1,  1],
...                   [-1,  1,  1,  1,  0,  1],
...                   [-1,  1,  1, -1, -1,  0]])
[0, 4, 5, 2, 1, 3]
</snippet></ROW><ROW><id>9196697</id><snippet>Launch Settings</snippet></ROW><ROW><id>9196697</id><snippet>--address=0.0.0.0</snippet></ROW><ROW><id>9196697</id><snippet>Extra Flags</snippet></ROW><ROW><id>9196697</id><snippet>0.0.0.0</snippet></ROW><ROW><id>9196915</id><snippet>/project
/project/pybrain
/project/pybrain/__init__.py
</snippet></ROW><ROW><id>9197482</id><snippet>dict = {
    "a" : "Apple",
    "b" : "Banana",
}
</snippet></ROW><ROW><id>9197482</id><snippet>if (condition) {
    // do this
}
</snippet></ROW><ROW><id>9197801</id><snippet>boto.cfg</snippet></ROW><ROW><id>9197801</id><snippet>/etc</snippet></ROW><ROW><id>9197801</id><snippet>~/.boto</snippet></ROW><ROW><id>9197801</id><snippet>.boto</snippet></ROW><ROW><id>9197880</id><snippet>[(i, x) for i, x in enumerate(some_list, 1)]
</snippet></ROW><ROW><id>9197880</id><snippet>[(i, x) for i, x in enumerate(some_list, 1) if i &gt; 2]
</snippet></ROW><ROW><id>9197880</id><snippet>[(i, x) for i, x in enumerate(some_list, 1) if x != 'p']
</snippet></ROW><ROW><id>9197880</id><snippet>enumerate(some_list, 1)</snippet></ROW><ROW><id>9197880</id><snippet>for</snippet></ROW><ROW><id>9197929</id><snippet>keys.exportKey()</snippet></ROW><ROW><id>9197929</id><snippet>keys.publickey().exportKey()</snippet></ROW><ROW><id>9197929</id><snippet>format</snippet></ROW><ROW><id>9198129</id><snippet>to_csv</snippet></ROW><ROW><id>9198281</id><snippet>tracd</snippet></ROW><ROW><id>9198423</id><snippet>i++</snippet></ROW><ROW><id>9198423</id><snippet>i</snippet></ROW><ROW><id>9198423</id><snippet>i += 1</snippet></ROW><ROW><id>9198423</id><snippet>i</snippet></ROW><ROW><id>9198423</id><snippet>print ("micro \t\t", (mbase/100) * i ) + mfixed)
print ("regular \t", (rbase/100) * i ) + rfixed, "\n")
</snippet></ROW><ROW><id>9198596</id><snippet>lookup_value</snippet></ROW><ROW><id>9198596</id><snippet>cur</snippet></ROW><ROW><id>9198596</id><snippet>class DB():
    def __init__(self,database_name):
        db = MySQLdb.connect('localhost', 'user', 'pswrd', database_name)
        self.cur = db.cursor()


    def lookup_value(self,user_name):
        query = "SELECT COUNT(*) FROM x_user_%s"
        self.cur.execute(query, (user_name))
        self.result = self.cur.fetchone()
        return self.result
</snippet></ROW><ROW><id>9198596</id><snippet>....
db = DB(db_name)
value = db.lookup_value(user_name)
</snippet></ROW><ROW><id>9198596</id><snippet>from mod2 import DB</snippet></ROW><ROW><id>9198596</id><snippet>lookup_value</snippet></ROW><ROW><id>9198718</id><snippet>data = []

while(f&lt;50):
    f = ramp(fr,f,df)
    data.append(f)
</snippet></ROW><ROW><id>9198718</id><snippet>i</snippet></ROW><ROW><id>9198736</id><snippet>my_dict = {key1:{value1:value2}, key2:{value3:value4}, key3{value5:value6}, key4:{value7:value8}...}
result = []
for key1 in my_dict:
    if sum(my_dict[key1].keys() + my_dict[key1].values())==3:
        result[key1] = my_dict[key1].keys()[0]
</snippet></ROW><ROW><id>9199380</id><snippet>nextafter</snippet></ROW><ROW><id>9199527</id><snippet>__get__</snippet></ROW><ROW><id>9199527</id><snippet>__get__</snippet></ROW><ROW><id>9199527</id><snippet>def specialmethod(f):
    @functools.wraps(f)
    def wrapper(arg1, arg2):
        print arg1, arg2
        f(arg1, arg2)
    return wrapper
</snippet></ROW><ROW><id>9199527</id><snippet>class _specialmethod:
  def __init__(self,func):
     self.func = func

  def __call__(self,arg1,arg2):
     print arg1,arg2
     self.func(arg1,arg2)

def specialmethod(f):
    wrapper_class = _specialmethod(f)
    @functools.wraps(f)
    def wrapper(arg1, arg2):
        wrapper_class(arg1, arg2)
    return wrapper
</snippet></ROW><ROW><id>9199657</id><snippet>dictionaryWithDictionary_()</snippet></ROW><ROW><id>9199657</id><snippet>NSDictionary</snippet></ROW><ROW><id>9199657</id><snippet>NSDictionary</snippet></ROW><ROW><id>9199657</id><snippet>for PreferredNetwork in copy['Sets'][Set]['Network']['Interface'][enX][key]['PreferredNetworks']:
</snippet></ROW><ROW><id>9199657</id><snippet>del</snippet></ROW><ROW><id>9199657</id><snippet>del pl['Sets'][Set]['Network']['Interface'][enX][key]['PreferredNetworks'][index]
</snippet></ROW><ROW><id>9199657</id><snippet>for</snippet></ROW><ROW><id>9199657</id><snippet>id()</snippet></ROW><ROW><id>9199818</id><snippet>def getParam(p, tagName, index, post=None):
    post = post or lambda i: i
    try:
        return post(p.getElementsByTagName(tagname)[index])
    except AttributeError:
        print "informative message"
    return None # will happen anyway, but why not be explicit?
</snippet></ROW><ROW><id>9199818</id><snippet>parameter_id = getParam(parameter, "Parameter", m, lambda x: x.getAttribute("Id"))
parameter_name = getParam(parameter, "Name", m, lambda x: x.lastChild.data)
...
</snippet></ROW><ROW><id>9199905</id><snippet>warn_only=False</snippet></ROW><ROW><id>9199905</id><snippet>from fabric.api import *
from fabric.decorators import hosts, parallel, serial
import random

@task
@serial
@with_settings(warn_only=False)
def maybe_fail():
    if random.randint(0,3) == 0:
        run("/bin/false") 
    else:
        run("/bin/true")
</snippet></ROW><ROW><id>9200455</id><snippet>ip_oct = ip.split('.')
ip_oct[3] = str(int(ip_oct[3]) -1)
return '.'.join(ip_oct)
</snippet></ROW><ROW><id>9200455</id><snippet>gethostbyname_ex</snippet></ROW><ROW><id>9200455</id><snippet>getaddrinfo</snippet></ROW><ROW><id>9200548</id><snippet>__eq__</snippet></ROW><ROW><id>9200548</id><snippet>__ne__</snippet></ROW><ROW><id>9200548</id><snippet>class Position:
    def __init__(self, x, y):
        self.x = int(x)
        self.y = int(y)
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    def __ne__(self, other):
        return not self == other
</snippet></ROW><ROW><id>9200548</id><snippet>&gt;&gt;&gt; a = Position(1,2)
&gt;&gt;&gt; b = Position(1,2)
&gt;&gt;&gt; c = Position(2,3)
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a == c
False
&gt;&gt;&gt; b == c
False
&gt;&gt;&gt; a != a
False
&gt;&gt;&gt; a != b
False
&gt;&gt;&gt; a != c
True
</snippet></ROW><ROW><id>9200548</id><snippet>&gt;&gt;&gt; a &gt; c
True
</snippet></ROW><ROW><id>9200548</id><snippet>TypeError: unorderable types: Position() &gt; Position()
</snippet></ROW><ROW><id>9200621</id><snippet>my_list = [[1, 2, 3], ['a', 'b'], [5, 6, 7]]
</snippet></ROW><ROW><id>9200621</id><snippet>n = len(my_list[0])
if all(len(x) == n for x in my_list):
    # whatever
</snippet></ROW><ROW><id>9200757</id><snippet>rgb = numpy.fromstring(data, '3uint8')
</snippet></ROW><ROW><id>9200757</id><snippet>cumsum</snippet></ROW><ROW><id>9200757</id><snippet>out=</snippet></ROW><ROW><id>9200757</id><snippet>rgb.cumsum(axis=0,out=rgb)
</snippet></ROW><ROW><id>9200757</id><snippet>rgb = rgb.ravel()
</snippet></ROW><ROW><id>9200885</id><snippet># After your "Define model parameters" block

def compute_and_plot(ax, alpha):
    #Calculate grid values
    V, W = np.meshgrid(v,w)
    Z = (V**(beta))*(W**(1-beta))
    X = x_bar + a + b*Z
    U = alpha*np.log(V) + (1-alpha)*np.log(X) - c*(W+V)

    CS = QuadContourSet(ax, V, W, U, 200)
    pyl.clabel(CS, inline=1, fontsize=10)

# Plot
fig = pyl.figure()
pyl.title('Simplest default with labels')
ax = fig.add_subplot(221)
compute_and_plot(ax, alpha)

#Define slider for alpha
axcolor = 'lightgoldenrodyellow'
alpha_axis  = pyl.axes([0.25, 0.15, 0.65, 0.03], axisbg=axcolor)
alpha_slider = Slider(alpha_axis, 'Amp', 0, 1, valinit=.5)

def update(ax, val):
    alpha = alpha_slider.val
    ax.cla()
    compute_and_plot(ax, alpha)
    pyl.draw()

alpha_slider.on_changed(lambda val: update(ax, val))

pyl.show()
</snippet></ROW><ROW><id>9200923</id><snippet>test</snippet></ROW><ROW><id>9200923</id><snippet>import numpy
numpy.test('full')

import scipy
scipy.test('full')
</snippet></ROW><ROW><id>9201007</id><snippet>&lt;%
  import json
  myList['item1', 'item2', 'item3', 'item3']
%&gt;

&lt;input type="button" value="Upload" onclick="postCert('/support/upload.psp', &lt;%= json.dumps(myList) %&gt;, 'post');" /&gt;
</snippet></ROW><ROW><id>9201009</id><snippet> # assume that users is a list of users parsed from some JSON source
 # assume that each user is a dictionary, containing information about that user

 for user in users:
     print user['name']
</snippet></ROW><ROW><id>9201009</id><snippet># assume that idToUser is a dictionary mapping IDs to user objects

user = idToUser['0001a']
print user.name
</snippet></ROW><ROW><id>9201009</id><snippet>users = [userA, userB, userC] # makes sense
for user in users:
    print user.name           # especially later, in iteration
</snippet></ROW><ROW><id>9201027</id><snippet>Thread</snippet></ROW><ROW><id>9201027</id><snippet>import threading

class Dev(threading.Thread):

    def __init__(self, workQueue, queueLock, count):
        super(Dev, self).__init__()   # super() will call Thread.__init__ for you
        self.workQueue = workQueue
        self.queueLock= queueLock
        self.count = count

    def run(self):  # put inside run your loop
        data = ''
        while 1:
            with self.queueLock:
                if not self.workQueue.empty():
                    data = self.workQueue.get()
                    print data
                    print self.count

            if data == 'quit':
                break
</snippet></ROW><ROW><id>9201027</id><snippet>with</snippet></ROW><ROW><id>9201027</id><snippet>import Queue
import time

work_q = Queue.Queue()     # first create your "work object"
q_lock = threading.Lock()
count = 1

dev = Dev(work_q, q_lock, count)  # after instantiate like this your Thread
dev.setDaemon(True)
dev.start()

time.sleep(1)
with q_lock:
    work_q.put('word')
# word
# 1

time.sleep(1)
count = 10
with q_lock:
    work_q.put('dog')
# dog
# 1

count = 'foo'
with q_lock:
    work_q.put('quit')
# quit
# 1

dev.join()   # This will prevent the main to exit
             # while the dev thread is still running
</snippet></ROW><ROW><id>9201027</id><snippet>self.count</snippet></ROW><ROW><id>9201027</id><snippet>count</snippet></ROW><ROW><id>9201027</id><snippet>dev = Dev(work_q, q_lock, count)
</snippet></ROW><ROW><id>9201027</id><snippet>dev = Dev(work_q, q_lock, 1)
</snippet></ROW><ROW><id>9201027</id><snippet>self.count</snippet></ROW><ROW><id>9201027</id><snippet>class Dev(threading.Thread):

    def __init__(self, workQueue, queueLock, count):
        super(Dev, self).__init__()
        self.workQueue = workQueue
        self.queueLock= queueLock
        self.count = count

    def set_count(self, value):
        self.count = value

    def run(self):
        data = ''
        while 1:
            with self.queueLock:
                if not self.workQueue.empty():
                    data = self.workQueue.get()
                    print data
                    print self.count

            if data == 'quit':
                break
</snippet></ROW><ROW><id>9201027</id><snippet>set_count</snippet></ROW><ROW><id>9201027</id><snippet>self.count</snippet></ROW><ROW><id>9201027</id><snippet>time.sleep(1)
with q_lock:
    work_q.put('word')
# word
# 1

time.sleep(1)
count = dev.count + 9
dev.set_count(count)
with q_lock:
    work_q.put('dog')
# dog
# 10

count = 'foo'
with q_lock:
    work_q.put('quit')
# quit
# 10
dev.join()
</snippet></ROW><ROW><id>9201055</id><snippet>numbers = map(int, raw_input().split())
</snippet></ROW><ROW><id>9201304</id><snippet>def findnonempty(entry, arg):
    result = entry.find(arg):
    if result:
        return result.text
    else:
        return "" 
</snippet></ROW><ROW><id>9201304</id><snippet>tags = ['ns1:familyname', 'ns1:givenname', ... ] # your tags
s = map(lambda tag: findnonempty(entry, tag), tags)
"".join(s)
</snippet></ROW><ROW><id>9201483</id><snippet>draft_list</snippet></ROW><ROW><id>9201483</id><snippet>playernumber</snippet></ROW><ROW><id>9201483</id><snippet>python manage.py shell
</snippet></ROW><ROW><id>9201483</id><snippet>Player</snippet></ROW><ROW><id>9201483</id><snippet>playernumber</snippet></ROW><ROW><id>9201483</id><snippet>from acme.acmetest.models import Player
draft_list = Player.objects.all()
for draft in draft_list:
    print draft.playernumber
</snippet></ROW><ROW><id>9201860</id><snippet>(parameter, value) = line.split('=')
</snippet></ROW><ROW><id>9201860</id><snippet>'=' in line</snippet></ROW><ROW><id>9201860</id><snippet>line.find("[") == 1
</snippet></ROW><ROW><id>9201860</id><snippet>line.startswith("[")
</snippet></ROW><ROW><id>9201976</id><snippet>n &gt;&gt; 1</snippet></ROW><ROW><id>9201976</id><snippet>n</snippet></ROW><ROW><id>9201976</id><snippet>1</snippet></ROW><ROW><id>9201976</id><snippet>n &gt;&gt; m</snippet></ROW><ROW><id>9201976</id><snippet>n</snippet></ROW><ROW><id>9201976</id><snippet>m</snippet></ROW><ROW><id>9202004</id><snippet>    [cos(theta)  -sin(theta)  0]
R = [sin(theta)   cos(theta)  0]
    [0            0           1]
</snippet></ROW><ROW><id>9202004</id><snippet>    [1  0  -image_width/2]
T = [0  1  -image_height/2]
    [0  0   1]
</snippet></ROW><ROW><id>9202004</id><snippet>H = inv(T) * R * T
</snippet></ROW><ROW><id>9202004</id><snippet>    [x_scale 0       0]
S = [0       y_scale 0]
    [x_skew  y_skew  1]
</snippet></ROW><ROW><id>9202004</id><snippet>x_skew</snippet></ROW><ROW><id>9202004</id><snippet>y_skew</snippet></ROW><ROW><id>9202004</id><snippet>from skimage import data, transform
import numpy as np
import matplotlib.pyplot as plt

img = data.camera()

theta = np.deg2rad(10)
tx = 0
ty = 0

S, C = np.sin(theta), np.cos(theta)

# Rotation matrix, angle theta, translation tx, ty
H = np.array([[C, -S, tx],
              [S,  C, ty],
              [0,  0, 1]])

# Translation matrix to shift the image center to the origin
r, c = img.shape
T = np.array([[1, 0, -c / 2.],
              [0, 1, -r / 2.],
              [0, 0, 1]])

# Skew, for perspective
S = np.array([[1, 0, 0],
              [0, 1.3, 0],
              [0, 1e-3, 1]])

img_rot = transform.homography(img, H)
img_rot_center_skew = transform.homography(img, S.dot(np.linalg.inv(T).dot(H).dot(T)))

f, (ax0, ax1, ax2) = plt.subplots(1, 3)
ax0.imshow(img, cmap=plt.cm.gray, interpolation='nearest')
ax1.imshow(img_rot, cmap=plt.cm.gray, interpolation='nearest')
ax2.imshow(img_rot_center_skew, cmap=plt.cm.gray, interpolation='nearest')
plt.show()
</snippet></ROW><ROW><id>9202008</id><snippet>__import__</snippet></ROW><ROW><id>9202008</id><snippet>my_class = __import__("myproject.lib.mymodule.SomeClass")
</snippet></ROW><ROW><id>9202008</id><snippet>import myproject.lib.mymodule.SomeClass as my_class
</snippet></ROW><ROW><id>9202236</id><snippet>getpass.getpass()</snippet></ROW><ROW><id>9202821</id><snippet>page.info()</snippet></ROW><ROW><id>9202821</id><snippet>Set-Cookie: Prefs=FAVS:1|WXSN:1|PWSOBS:1|WPHO:1|PHOT:1|RADC:0|RADALL:0|HIST0:NULL|GIFT:1|SHOWMETAR:1|PHOTOTHUMBS:50|HISTICAO:KBUF*NULL|; path=/; expires=Fri, 01-Jan-2020 00:00:00 GMT; domain=.wunderground.com
</snippet></ROW><ROW><id>9202821</id><snippet>import urllib2
import cookielib

cookieJar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookieJar))

setmetar = 'http://www.wunderground.com/cgi-bin/findweather/getForecast?setpref=SHOWMETAR&amp;value=1'
request = urllib2.Request(setmetar)
response = opener.open(request)

url = "http://www.wunderground.com/history/airport/KBUF/2011/1/1/DailyHistory.html?theprefset=SHOWMETAR&amp;theprefvalue=1&amp;format=1"
request = urllib2.Request(url)
page = opener.open(request)
# print(page.info())
dailyData = page.read()                            
print dailyData
</snippet></ROW><ROW><id>9202821</id><snippet>TimeEST,TemperatureF,Dew PointF,Humidity,Sea Level PressureIn,VisibilityMPH,Wind Direction,Wind SpeedMPH,Gust SpeedMPH,PrecipitationIn,Events,Conditions,FullMetar,WindDirDegrees,DateUTC&lt;br /&gt;
12:54 AM,52.0,45.0,77,29.93,10.0,SSW,15.0,-,N/A,,Scattered Clouds,METAR KBUF 010554Z COR 20013KT 10SM FEW045 SCT140 11/07 A2992 RMK AO2 SLP134 60004 T01110072 10111 20078 58016,200,2011-01-01 05:54:00&lt;br /&gt;
1:54 AM,53.1,45.0,74,29.95,10.0,SSW,12.7,-,N/A,,Mostly Cloudy,METAR KBUF 010654Z 20011KT 10SM BKN055 BKN130 12/07 A2994 RMK AO2 SLP141 T01170072,200,2011-01-01 06:54:00&lt;br /&gt;
</snippet></ROW><ROW><id>9202861</id><snippet>sys.exit(not self.result.wasSuccessful())
</snippet></ROW><ROW><id>9203909</id><snippet>wim@wim-acer:~/sandpit/spam$ touch a
wim@wim-acer:~/sandpit/spam$ python
Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) 
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; with open('A', 'w') as f:
...   f.write('test')
... 
&gt;&gt;&gt; 
wim@wim-acer:~/sandpit/spam$ ll
total 12
drwxr-xr-x 2 wim wim 4096 2012-02-09 11:43 ./
drwxr-xr-x 4 wim wim 4096 2012-02-09 11:42 ../
-rw-r--r-- 1 wim wim    0 2012-02-09 11:42 a
-rw-r--r-- 1 wim wim    4 2012-02-09 11:43 A
</snippet></ROW><ROW><id>9204071</id><snippet>import traceback

def logerr(stmt, e):
    try:
        ##do something

    except:
        print '##EXCEPTION in logging: '
        for line in traceback.format_exception().splitlines():
            print '        ' + line
</snippet></ROW><ROW><id>9204186</id><snippet>(invid, stock, published, price, invtype, title, author) = read_one_file()

print "Item ID:", invid
</snippet></ROW><ROW><id>9204186</id><snippet>invid, stock, published, price, invtype, title, author = read_one_file()
</snippet></ROW><ROW><id>9204186</id><snippet>def read_one_file():
    with open('C:\Python27\inventory.dat', 'r') as f:
        return dict(invid = f.readline().strip(),
                    stock = f.readline().strip(),
                    published = f.readline().strip(),
                    price = f.readline().strip(),
                    invtype = f.readline().strip(),
                    title = f.readline().strip(),
                    author = f.readline().strip())

results = read_one_file()

print "Update Number In Stock"
print "----------------------"
print "Item ID: ", results['invid']
</snippet></ROW><ROW><id>9204404</id><snippet>inspect</snippet></ROW><ROW><id>9204404</id><snippet>for base in A.__bases__:
  print "A depends on module %s" % base.__module__
</snippet></ROW><ROW><id>9204404</id><snippet>for base in (obj.__class__,) + obj.__class__.__bases__:
  print "obj depends on module %s" % base.__module__
</snippet></ROW><ROW><id>9204501</id><snippet>data=f.read(256)
data=data.splitlines(True)
if data[-1]!=data[-1].splitlines()[-1]:
    #must be newline at end of last line
    data="".join(data)
else:
    data="".join(data[:-1])

print data
</snippet></ROW><ROW><id>9204506</id><snippet>from skimage import data, color, io, img_as_float
import numpy as np
import matplotlib.pyplot as plt

alpha = 0.6

img = img_as_float(data.camera())
rows, cols = img.shape

# Construct a colour image to superimpose
color_mask = np.zeros((rows, cols, 3))
color_mask[30:140, 30:140] = [1, 0, 0]  # Red block
color_mask[170:270, 40:120] = [0, 1, 0] # Green block
color_mask[200:350, 200:350] = [0, 0, 1] # Blue block

# Construct RGB version of grey-level image
img_color = np.dstack((img, img, img))

# Convert the input image and color mask to Hue Saturation Value (HSV)
# colorspace
img_hsv = color.rgb2hsv(img_color)
color_mask_hsv = color.rgb2hsv(color_mask)

# Replace the hue and saturation of the original image
# with that of the color mask
img_hsv[..., 0] = color_mask_hsv[..., 0]
img_hsv[..., 1] = color_mask_hsv[..., 1] * alpha

img_masked = color.hsv2rgb(img_hsv)

# Display the output
f, (ax0, ax1, ax2) = plt.subplots(1, 3,
                                  subplot_kw={'xticks': [], 'yticks': []})
ax0.imshow(img, cmap=plt.cm.gray)
ax1.imshow(color_mask)
ax2.imshow(img_masked)
plt.show()
</snippet></ROW><ROW><id>9204544</id><snippet>return HTMLString(u' '.join([subfield() for subfield in field]))
</snippet></ROW><ROW><id>9204544</id><snippet>widget=SingleLineWidget()</snippet></ROW><ROW><id>9204544</id><snippet>FormField</snippet></ROW><ROW><id>9204631</id><snippet>CELERY_ALWAYS_EAGER = True</snippet></ROW><ROW><id>9204676</id><snippet>def bubbleSort(numbers): # Bubble Sort Algorithm
    nums = list(numbers)
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if numbers[j] &lt; numbers[i]:
                numbers[j], numbers[i] = numbers[i], numbers[j]

    print numbers
</snippet></ROW><ROW><id>9204766</id><snippet>f.write()</snippet></ROW><ROW><id>9204766</id><snippet>invid</snippet></ROW><ROW><id>9204766</id><snippet>invtype</snippet></ROW><ROW><id>9204766</id><snippet>str()</snippet></ROW><ROW><id>9204766</id><snippet>"Number in stock%d"%nrStock
</snippet></ROW><ROW><id>9204766</id><snippet>d</snippet></ROW><ROW><id>9204766</id><snippet>nrStock</snippet></ROW><ROW><id>9204778</id><snippet>if budget &gt;= 0</snippet></ROW><ROW><id>9204778</id><snippet>while budget &gt;= 0</snippet></ROW><ROW><id>9204778</id><snippet>budget &gt;= 0</snippet></ROW><ROW><id>9204778</id><snippet>#!/usr/bin/env python
print("Welcome to the store!")

setup_price_list() #pseudocode

budget = 20

while budget &gt;= 0:
    buy = input("What would you like to buy?")
    if buy == 'apple':
        print("It cost 3 dollars")
        budget -= 3
        inventory.append('apple')
        print("Your inventory is below")
        print(inventory)

    #the rest of the if statements

    print("You bought", buy)
    print("Your inventory is below")
    print(inventory)
</snippet></ROW><ROW><id>9204778</id><snippet>print("Welcome to the store!")
price_list = {'apple':3, 'orange':2, 'grapefruit':5, 'bomb':15, 'gun':10}
print("You can buy:")
for key in price_list:
    item = key
    price = price_list[key]
    print(item, price)

budget = 20
while budget &gt; 0:
    buy = raw_input("What do you want to buy?")
    price = price_list[buy] #You will get an error if you give it a key it doesn't have
    budget -= price
    print("You bought: ", buy)
    print("It costed: $", price)
</snippet></ROW><ROW><id>9204942</id><snippet>matrix = [[4,5,6,7],[2,4,9,3]]
i=0
while i&lt;len(matrix):
    j=0
    while j&lt;len(matrix[i]):
        print 'i = {}, j = {}, element = {}'.format(i,j,matrix[i][j])
        print matrix[i][j]
        j=j+1
    i=i+1
</snippet></ROW><ROW><id>9204942</id><snippet>matrix = [[4,5,6,7],[2,4,9,3]]
for row in matrix:
  for element in row:
    print element
</snippet></ROW><ROW><id>9205029</id><snippet>class MyClass():
    def __init__(self):
        for var in 'a', 'b', 'c':
            setattr(self, var, dict())
</snippet></ROW><ROW><id>9205029</id><snippet>class MyClass():
    def __init__(self):
        vars(self).update(a=dict(), b=dict(), c=dict())
</snippet></ROW><ROW><id>9205050</id><snippet>__init__(self, parent, id, title, pos, size, style, name)
</snippet></ROW><ROW><id>9205050</id><snippet>def onNewFile(self,evt):

    dialog = wx.FileDialog(None,'Choose a file',os.getcwd(),"", "",wx.OPEN)
    if dialog.ShowModal() == wx.ID_OK:
        print dialog.GetPath()
    dialog.Destroy()
</snippet></ROW><ROW><id>9205091</id><snippet>foo</snippet></ROW><ROW><id>9205091</id><snippet>bar</snippet></ROW><ROW><id>9205091</id><snippet>dispatcher</snippet></ROW><ROW><id>9205091</id><snippet>dispatcher = {'foo': foo, 'bar': bar}
</snippet></ROW><ROW><id>9205091</id><snippet>foo</snippet></ROW><ROW><id>9205091</id><snippet>bar</snippet></ROW><ROW><id>9205091</id><snippet>foo()</snippet></ROW><ROW><id>9205091</id><snippet>bar()</snippet></ROW><ROW><id>9205091</id><snippet>foo</snippet></ROW><ROW><id>9205091</id><snippet>dispatcher['foo']()</snippet></ROW><ROW><id>9205091</id><snippet>dispatcher = {'foobar': [foo, bar], 'bazcat': [baz, cat]}

def fire_all(func_list):
    for f in func_list:
        f()

fire_all(dispatcher['foobar'])
</snippet></ROW><ROW><id>9205095</id><snippet>def rsum( seq ):
    if not seq:
        return 0
    else:
        return seq[0] + rsum(seq[1:])
</snippet></ROW><ROW><id>9205095</id><snippet>foldl</snippet></ROW><ROW><id>9205095</id><snippet>foldr</snippet></ROW><ROW><id>9205095</id><snippet>def foldl( f, z, xs ):
    if not xs:
        return z
    else:
        return foldl(f, f(z, xs[0]), xs[1:])

def foldr( f, z, xs ):
    if not xs:
        return z
    else:
        return f(xs[0], foldr(f, z, xs[1:]))
</snippet></ROW><ROW><id>9205095</id><snippet>rsum</snippet></ROW><ROW><id>9205095</id><snippet>def rsum(seq):
    return foldl( lambda a,b: a+b, 0, seq )
</snippet></ROW><ROW><id>9205095</id><snippet>def rsum(seq):
    return foldr( lambda a,b: a+b, 0, seq )
</snippet></ROW><ROW><id>9205117</id><snippet>import pygtk
pygtk.require('2.0')
import gtk
import gobject
import time

class MainWin(object):
    def destroy(self, widget, data=None):
        gtk.main_quit()
    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("destroy", self.destroy)
        self.window.set_border_width(10)
        self.button = gtk.Button("Reset")
        self.button.connect("clicked", self.onclick)
        self.window.add(self.button)
        self.button.show()
        self.window.show()
        self.reset_timer = False
        self.count = 0
        self.duration = 1000
        self.timer = gobject.timeout_add(self.duration, self.update)
    def reset(self):
        print('Resetting timer')
        gobject.source_remove(self.timer)
        # start a new period call to update
        self.count = 0        
        self.timer = gobject.timeout_add(self.duration, self.update) 
    def onclick(self, widget):
        # Every action which resets the timer should call self.reset_timer().
        self.reset()
    def update(self):
        print('{t:.1f}: count = {i}'.format(t=time.time() % 100, i=self.count))
        self.count += 1
        return True
    def main(self):
        gtk.main()

if __name__=='__main__':
    MainWin().main()
</snippet></ROW><ROW><id>9205177</id><snippet>render_to_response(template_name[, dictionary][, context_instance][, mimetype])</snippet></ROW><ROW><id>9205177</id><snippet>return render_to_response('vehicle.html', {}, context_instance= RequestContext(request))`
</snippet></ROW><ROW><id>9205882</id><snippet>url = xmldoc.getElementsByTagName('link')[1].firstChild.data
print url
</snippet></ROW><ROW><id>9206062</id><snippet>funcs = []
for x in range(5):
    def f(): return x
    funcs.append(f)
funcs[0]() # returns 4
</snippet></ROW><ROW><id>9206062</id><snippet>x</snippet></ROW><ROW><id>9206062</id><snippet>x</snippet></ROW><ROW><id>9206062</id><snippet>4</snippet></ROW><ROW><id>9206062</id><snippet>x</snippet></ROW><ROW><id>9206062</id><snippet>x = 32 
funcs[2]() # returns 32
</snippet></ROW><ROW><id>9206062</id><snippet>for</snippet></ROW><ROW><id>9206106</id><snippet>for line in fileName:
    if re.match("POLYLINE", line):
        for line in filename:
            if re.match(xcoord,line):
                dostuff()
            if re.match(ycoord,line):
                dostuff()
</snippet></ROW><ROW><id>9206432</id><snippet>In [1]: import urllib2

In [2]: from BeautifulSoup import BeautifulSoup

In [3]: url = 'http://www.sparklebox.co.uk/topic/creative-arts/art-and-design/colouring-pages.html'

In [4]: request = urllib2.Request(url=url, headers={ 'User-Agent' : 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT' })

In [5]: response = urllib2.urlopen(request)    
In [6]: HTML_response = response.read()    
In [7]: b1 = BeautifulSoup(HTML_response)    
In [8]: print type(b1)
&lt;class 'BeautifulSoup.BeautifulSoup'&gt;
</snippet></ROW><ROW><id>9206432</id><snippet>BeautifulSoup 3.2</snippet></ROW><ROW><id>9206521</id><snippet>add</snippet></ROW><ROW><id>9206521</id><snippet>zip</snippet></ROW><ROW><id>9206521</id><snippet>def add(a1, a2):
    for i,j in zip(a1, a2):
        yield i*j
</snippet></ROW><ROW><id>9206521</id><snippet>(i*j for i,j in zip(a1, a2))
</snippet></ROW><ROW><id>9206521</id><snippet>itertools.izip</snippet></ROW><ROW><id>9206521</id><snippet>zip</snippet></ROW><ROW><id>9206521</id><snippet>zip</snippet></ROW><ROW><id>9206595</id><snippet>word = unicode(line[0], "utf8")
</snippet></ROW><ROW><id>9206595</id><snippet>utf8</snippet></ROW><ROW><id>9206595</id><snippet>latin1</snippet></ROW><ROW><id>9206665</id><snippet>ord</snippet></ROW><ROW><id>9206665</id><snippet>&gt;&gt;&gt; letters = ['a','b','c','d','e','f','g']
&gt;&gt;&gt; [ord(x) for x in letters]
[97, 98, 99, 100, 101, 102, 103]
</snippet></ROW><ROW><id>9206665</id><snippet>ord(x)-96</snippet></ROW><ROW><id>9206665</id><snippet>a-z</snippet></ROW><ROW><id>9206665</id><snippet>1-26</snippet></ROW><ROW><id>9206665</id><snippet>l = ['a','b','a','c']
k = [ord(x)-96 for x in l] # [1,2,1,3]
</snippet></ROW><ROW><id>9206848</id><snippet>self.above.author.username</snippet></ROW><ROW><id>9206848</id><snippet>self.above</snippet></ROW><ROW><id>9206848</id><snippet>def resolve(obj, path):
    """Resolves an attribute path on an object, returning `None` 
       if any attribute is not found"""
    for name in path.split("."):
        obj = getattr(obj, name, None)
        if obj is None:
            break
    return obj

selfauthor  = resolve(self, "author.username")
aboveauthor = resolve(self, "above.author.username")

if not selfauthor or (selfauthor and selfauthor != aboveauthor):
    "notify about response"
</snippet></ROW><ROW><id>9206848</id><snippet>resolve()</snippet></ROW><ROW><id>9206848</id><snippet>self.resolve("above.author.username")   # etc
</snippet></ROW><ROW><id>9207003</id><snippet>warnings.showwarning()</snippet></ROW><ROW><id>9207026</id><snippet>&gt;&gt;&gt; v="This is a  string"

&gt;&gt;&gt; v.split()
['This', 'is', 'a', 'string']
</snippet></ROW><ROW><id>9207026</id><snippet>split()</snippet></ROW><ROW><id>9207511</id><snippet>pip freeze &gt; requirements.txt</snippet></ROW><ROW><id>9207511</id><snippet>requirements.txt</snippet></ROW><ROW><id>9207511</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>9207749</id><snippet>headless</snippet></ROW><ROW><id>9207749</id><snippet>xvfb</snippet></ROW><ROW><id>9207749</id><snippet>selenium</snippet></ROW><ROW><id>9207803</id><snippet>newsecond_row_data = (re.search('(?&lt;=&gt;)\d+.\d+|\d+',second_row_data[a]))
newsecond_row_data.group(0)
</snippet></ROW><ROW><id>9207982</id><snippet>inverted_list = [(int(numbers[2 + 3*i]),
                  float(numbers[3 + 3*i]),
                  float(numbers[4 + 3*i])) for i in range(0, (len(numbers) - 2)/3]
</snippet></ROW><ROW><id>9207982</id><snippet>map</snippet></ROW><ROW><id>9207982</id><snippet>lambda</snippet></ROW><ROW><id>9207982</id><snippet>range</snippet></ROW><ROW><id>9207982</id><snippet>i</snippet></ROW><ROW><id>9207982</id><snippet>3 + 3*i</snippet></ROW><ROW><id>9207982</id><snippet>map</snippet></ROW><ROW><id>9207982</id><snippet>reduce</snippet></ROW><ROW><id>9207982</id><snippet>zip</snippet></ROW><ROW><id>9208283</id><snippet>function_to_be_called(**option_dict)
</snippet></ROW><ROW><id>9208283</id><snippet>apply</snippet></ROW><ROW><id>9208283</id><snippet>*args</snippet></ROW><ROW><id>9208283</id><snippet>**keywords</snippet></ROW><ROW><id>9208283</id><snippet>def polly(cracker, wants):
    if wants:
       print 'polly wants a', cracker
f = polly
t = ('cracker', True)
</snippet></ROW><ROW><id>9208283</id><snippet>polly('cracker', True)
polly(*('cracker', True))
polly(*t)
f('cracker', True)
f(*t)
</snippet></ROW><ROW><id>9208283</id><snippet>polly(**{cracker: 'cracker', wants: True})
d = {cracker: 'biscuit', wants: True}
polly(**d)
</snippet></ROW><ROW><id>9208286</id><snippet>sys.exit()</snippet></ROW><ROW><id>9208286</id><snippet>SystemExit</snippet></ROW><ROW><id>9208286</id><snippet>spawn(important_greenlet).link_exception(lambda *args: sys.exit("important_greenlet died"))
</snippet></ROW><ROW><id>9208286</id><snippet>gevent.get_hub().parent.throw(SystemExit())
</snippet></ROW><ROW><id>9208462</id><snippet>os.exec*()</snippet></ROW><ROW><id>9208986</id><snippet>locals()</snippet></ROW><ROW><id>9208986</id><snippet>globals()</snippet></ROW><ROW><id>9208986</id><snippet>DATE</snippet></ROW><ROW><id>9208986</id><snippet>TIME</snippet></ROW><ROW><id>9208986</id><snippet>  f.writelines(template.safe_substitute( locals() ))
</snippet></ROW><ROW><id>9208986</id><snippet>''.join(f.readlines())
</snippet></ROW><ROW><id>9208986</id><snippet>f.read()
</snippet></ROW><ROW><id>9208986</id><snippet>f.read()</snippet></ROW><ROW><id>9209083</id><snippet>import re

def replacement_func(match, repl_pattern):
    match_str = match.group(0)
    repl = ''.join([r_char if m_char.islower() else r_char.upper()
                   for r_char, m_char in zip(repl_pattern, match_str)])
    repl += repl_pattern[len(match_str):]
    return repl

input_str = "myStrIngFullOfStUfFiWannAReplaCE_StUfFs"
print re.sub('stuff',
             lambda m: replacement_func(m, 'banana'),
             input_str, flags=re.I)
</snippet></ROW><ROW><id>9209608</id><snippet>"</snippet></ROW><ROW><id>9209608</id><snippet>csv</snippet></ROW><ROW><id>9209608</id><snippet>csv.reader(open('.info.csv'), skipinitialspace=True, quotechar=None)
</snippet></ROW><ROW><id>9209608</id><snippet>['test', '"test', '"test', 'test', 'test', 'test']
</snippet></ROW><ROW><id>9209642</id><snippet>manage.py</snippet></ROW><ROW><id>9209715</id><snippet>try:
    client = user.client
except Client.DoesNotExist:
    # handle exception
</snippet></ROW><ROW><id>9209755</id><snippet>getattr</snippet></ROW><ROW><id>9209755</id><snippet>for i in range(1,5):
    self.canvas.itemconfig(getattr(self, 'lamp_%s' % i),
                           fill=self.color_blink)
</snippet></ROW><ROW><id>9209755</id><snippet>self.lamps = [self.lamp_1, self.lamp_2, self.lamp_3, self.lamp_4]
for lamp in self.lamps:
    self.canvas.itemconfig(lamp, fill=self.color_blink)
</snippet></ROW><ROW><id>9209931</id><snippet>import httpagentparser
&gt;&gt;&gt; s = "Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Chrome/5.0.307.11 Safari/532.9"
&gt;&gt;&gt; print httpagentparser.simple_detect(s)
('Linux', 'Chrome 5.0.307.11')
&gt;&gt;&gt; print httpagentparser.detect(s)
{'os': {'name': 'Linux'},
 'browser': {'version': '5.0.307.11', 'name': 'Chrome'}}
</snippet></ROW><ROW><id>9210097</id><snippet>def shift_list(l, shift, empty=0):
    src_index = max(-shift, 0)
    dst_index = max(shift, 0)
    length = max(len(l) - abs(shift), 0)
    new_l = [empty] * len(l)
    new_l[dst_index:dst_index + length] = l[src_index:src_index + length]
    return new_l
</snippet></ROW><ROW><id>9210161</id><snippet>(rrule.SU, rrule.MO)
</snippet></ROW><ROW><id>9210161</id><snippet>dateutil.rrule.weekday</snippet></ROW><ROW><id>9210161</id><snippet>"rrule." + str(x.play_days)
</snippet></ROW><ROW><id>9210161</id><snippet>.n</snippet></ROW><ROW><id>9210161</id><snippet>weekday = {'MO': rrule.MO, 'TU': rrule.TU, … }
</snippet></ROW><ROW><id>9210161</id><snippet>playdays = weekday[str(x.play_days)]
</snippet></ROW><ROW><id>9210161</id><snippet>byweekday = (playdays)
</snippet></ROW><ROW><id>9210161</id><snippet>byweekday = playdays
</snippet></ROW><ROW><id>9210161</id><snippet>byweekday = (playdays,)
</snippet></ROW><ROW><id>9210558</id><snippet>s = "6a48f82d8e828ce82b82"
</snippet></ROW><ROW><id>9210558</id><snippet>i = int(s, 16)
</snippet></ROW><ROW><id>9210558</id><snippet>str(i)
</snippet></ROW><ROW><id>9210658</id><snippet>db.members.update(
    {"user_id" : "{1231mjnD-32JIjn-3213}", "campaigns.campaign_id": 3221},
    {$push:{"campaigns.$.messages":{"message_id":4213122, "email":"john@gmail.com"}}}
)
</snippet></ROW><ROW><id>9210870</id><snippet>&gt;&gt;&gt; test = {'a' : None, 'b' : None}
&gt;&gt;&gt; b = (','.join([k for k in test if test[k]])
...      or 'hello')
</snippet></ROW><ROW><id>9210997</id><snippet>__call__</snippet></ROW><ROW><id>9210997</id><snippet>&gt;&gt;&gt; class Multiplier(object):
...    def __init__(self, num):
...        self.num = num
...    def __call__(self, other):
...        return self.num*other
...
&gt;&gt;&gt; mul5 = Multiplier(5)
&gt;&gt;&gt; mul5(6)
30
</snippet></ROW><ROW><id>9211002</id><snippet>term</snippet></ROW><ROW><id>9211002</id><snippet>dct = { 'wassup' : {
            'termfreq' : 'daily',
            'docid' : 1,
            'pos' : [3,4] }}
</snippet></ROW><ROW><id>9211002</id><snippet>dct['wassup']['termfreq']
# 'daily'
</snippet></ROW><ROW><id>9211002</id><snippet>tf_idf</snippet></ROW><ROW><id>9211002</id><snippet>import nltk

# Given a corpus of texts
text1 = 'Lorem ipsum FOO dolor BAR sit amet'
text2 = 'Ut enim ad FOO minim veniam, '
text3 = 'Duis aute irure dolor BAR in reprehenderit '
text4 = 'Excepteur sint occaecat BAR cupidatat non proident'

# We split the texts into tokens, and form a TextCollection
mytexts = (
    [nltk.word_tokenize(text) for text in [text1, text2, text3, text4]])
mycollection = nltk.TextCollection(mytexts)

# Given a new text
text = 'et FOO tu BAR Brute'
tokens = nltk.word_tokenize(text)

# for each token (roughly, word) in the new text, we compute the tf_idf
for word in tokens:
    print('{w}: {s}'.format(w = word,
                            s = mycollection.tf_idf(word,tokens)))
</snippet></ROW><ROW><id>9211002</id><snippet>et: 0.0
FOO: 0.138629436112
tu: 0.0
BAR: 0.0575364144904
Brute: 0.0
</snippet></ROW><ROW><id>9211221</id><snippet>ax.text(x, y, z, label)
</snippet></ROW><ROW><id>9211221</id><snippet>text</snippet></ROW><ROW><id>9211221</id><snippet>text(x, y, s, fontdict=None, **kwargs)
</snippet></ROW><ROW><id>9211752</id><snippet>cj = cookielib.CookieJar()
opener = build_opener(ProxyHandler({'http': 'ip:port'}), HTTPCookieProcessor(cj))
</snippet></ROW><ROW><id>9212066</id><snippet>binary</snippet></ROW><ROW><id>9212066</id><snippet>import os, csv

path1 = os.path.abspath("../data/file1.txt")
path2 = os.path.abspath("../data/file2.txt")
merged_path = os.path.abspath('../data/output.txt')

#file1
fg = csv.DictReader(open(path1, 'rb'), delimiter = '\t')

fieldnames = fg.fieldnames
fieldnames.append('source')
# merge the two files for further processing
merged_file = csv.DictWriter(open(merged_path, 'ab'), delimiter = '\t', fieldnames=fieldnames)
merged_file.writeheader()

for row in fg:
    row['source'] = os.path.basename(path1)
    merged_file.writerow(row)

#file2
bg = csv.DictReader(open(path2, 'rb'), delimiter = '\t')

for row in bg:
    row['source'] = os.path.basename(path1)
    merged_file.writerow(row)
</snippet></ROW><ROW><id>9212387</id><snippet>@abstractproperty
def myproperty(self): 
    raise NotImplementedError
</snippet></ROW><ROW><id>9212387</id><snippet>[report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain if tests don't hit defensive assertion code:
    raise NotImplementedError
</snippet></ROW><ROW><id>9212476</id><snippet>#!/usr/bin/env python
import gio, gtk, os

    def get_icon_filename(filename,size):
        #final_filename = "default_icon.png"
        final_filename = ""
        if os.path.isfile(filename):
            # Get the icon name
            file = gio.File(filename)
            file_info = file.query_info('standard::icon')
            file_icon = file_info.get_icon().get_names()[0]
            # Get the icon file path
            icon_theme = gtk.icon_theme_get_default()
            icon_filename = icon_theme.lookup_icon(file_icon, size, 0)
            if icon_filename != None:
                final_filename = icon_filename.get_filename()

        return final_filename


    print get_icon_filename("/home/el7r/Music/test.mp3",64)
</snippet></ROW><ROW><id>9212485</id><snippet>db.posts.find({"$where": "this.text.indexOf('Hello') &gt; 0"})
</snippet></ROW><ROW><id>9212485</id><snippet>db.posts.find({'text':{'$regex':'Hello'}})
</snippet></ROW><ROW><id>9212485</id><snippet>db.posts.find({"_keywords": {"$in": "hello"});
</snippet></ROW><ROW><id>9212488</id><snippet>logging.addLevelName()</snippet></ROW><ROW><id>9212488</id><snippet>Logger.propagate</snippet></ROW><ROW><id>9212488</id><snippet>False</snippet></ROW><ROW><id>9212488</id><snippet>stderr</snippet></ROW><ROW><id>9212488</id><snippet>StreamHandler</snippet></ROW><ROW><id>9212488</id><snippet>%(name)s</snippet></ROW><ROW><id>9212488</id><snippet>stdout</snippet></ROW><ROW><id>9212488</id><snippet>print</snippet></ROW><ROW><id>9212488</id><snippet># at the very beginning
root = logging.getLogger()
fallback_handler = logging.StramHandler(stream=sys.stdout)
root.addHandler(fallback_handler)

# first.py
first_logger = logging.getLogger('first')
first_logger.parent = False
# ... set 'first' logger as you wish
class Foo:
    def __init__(self):
        self.logger = logging.getLogger('first.Foo')
    def baz(self):
        self.logger.info("I'm in baz")

# second.py
second_logger = logging.getLogger('first.second') # to use the same settings

# third.py
abstract_logger = logging.getLogger('abs')
abstract_logger.parent = False
# ... set 'abs' logger
third_logger = logging.getLogger('abs.third')
# ... set 'abs.third' particular settings

# fourth.py
fourth_logger = logging.getLogger('abs.fourth')
# [...]
</snippet></ROW><ROW><id>9212545</id><snippet>Prio</snippet></ROW><ROW><id>9212545</id><snippet>Prio = Hexline[16:18]
</snippet></ROW><ROW><id>9212587</id><snippet># Wait for all producers to finish producing
gevent.joinall(producers)
# *Now* we want to make sure there's no unfinished work
q.join()
# We don't care about workers. We weren't paying them anything, anyways
gevent.killall(workers)
# And, we're done.
</snippet></ROW><ROW><id>9212609</id><snippet>doc_hash = {}
doc_hash[doc.id] = doc
</snippet></ROW><ROW><id>9212609</id><snippet>docs = sorted(doc_hash.itervalues(), key=operator.attrgetter('score'), reverse=True)
for i, doc in enumerate(docs):
    doc.rank = i
</snippet></ROW><ROW><id>9212868</id><snippet>import distutils.sysconfig
print distutils.sysconfig.get_python_lib()
</snippet></ROW><ROW><id>9212868</id><snippet>C:\Path\to\first\directory
C:\Path\to\second\directory
</snippet></ROW><ROW><id>9212880</id><snippet>from numpy import *
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

n = 1000

fig = plt.figure()
ax = fig.gca(projection='3d')

for k in linspace(0, 5, 5):
    THETA = linspace(0, 2*pi, n)
    R     = ones(THETA.shape)*cos(THETA*k)

    # Convert to Cartesian coordinates
    X = R*cos(THETA)
    Y = R*sin(THETA)

    ax.plot(X, Y, k-2)

plt.show()
</snippet></ROW><ROW><id>9212880</id><snippet>ax.plot</snippet></ROW><ROW><id>9212880</id><snippet>ax.plot(X, Y, 0)</snippet></ROW><ROW><id>9212880</id><snippet>ax.plot(X, Y, -X**2+Y**2 )</snippet></ROW><ROW><id>9213223</id><snippet>&gt;&gt;&gt; u = {'flavor': {'version': u'X', 'name': 'MacOS'}, 'dist': {'version': u'AppleCoreMedia/1.0.0.8C148', 'name': 'iPad'}}
&gt;&gt;&gt; terminal = u['dist']['name']
&gt;&gt;&gt; terminal
'iPad'
</snippet></ROW><ROW><id>9213243</id><snippet>from foo import bar
</snippet></ROW><ROW><id>9213243</id><snippet>bar.baz()
</snippet></ROW><ROW><id>9213243</id><snippet>foo.bar.baz()
</snippet></ROW><ROW><id>9213243</id><snippet>parse(file).getAllElements()
</snippet></ROW><ROW><id>9213324</id><snippet>__str__()</snippet></ROW><ROW><id>9213324</id><snippet>class A(object):
    class __metaclass__(type):
        def __str__(self):
            return "plonk"
</snippet></ROW><ROW><id>9213324</id><snippet>print A</snippet></ROW><ROW><id>9213324</id><snippet>plonk</snippet></ROW><ROW><id>9213324</id><snippet>class Meta(type):
    def __str__(self):
        return "plonk"
class A(metaclass=Meta):
    pass
</snippet></ROW><ROW><id>9213553</id><snippet>@sdolan</snippet></ROW><ROW><id>9213553</id><snippet>localhost/site_media/mac_config.plist</snippet></ROW><ROW><id>9213652</id><snippet>client = smbclient.SambaClient(server="servername", share="sharename",
    username="foo", password="bar", domain="baz")
f = smb.open('/path/to/file')
data = f.read()
f.close()
</snippet></ROW><ROW><id>9213668</id><snippet>contextlib.ContextDecorator</snippet></ROW><ROW><id>9213668</id><snippet>class ContextDecorator(object):
    def __call__(self, f):
        @functools.wraps(f)
        def decorated(*args, **kwds):
            with self:
                return f(*args, **kwds)
        return decorated
</snippet></ROW><ROW><id>9213668</id><snippet>__enter__()</snippet></ROW><ROW><id>9213668</id><snippet>__exit__()</snippet></ROW><ROW><id>9213686</id><snippet>httpd_selinux(8)</snippet></ROW><ROW><id>9213695</id><snippet>np.select</snippet></ROW><ROW><id>9213695</id><snippet>condlist = [omega &lt; 0.0, omega &gt;= 2.0*np.pi]
choicelist = [omega + 2.0*np.pi, omega - 2.0*np.pi]
omega = np.select(condlist,choicelist,default=omega)
</snippet></ROW><ROW><id>9213886</id><snippet>from cherrypy.process.plugins import Monitor

def foo():
    my.store.collect_data('things', 'stuff')

Monitor(cherrypy.engine, foo, interval=300).subscribe()
</snippet></ROW><ROW><id>9213886</id><snippet>foo</snippet></ROW><ROW><id>9213886</id><snippet>engine.start</snippet></ROW><ROW><id>9213886</id><snippet>engine.stop</snippet></ROW><ROW><id>9213924</id><snippet>IllegalArgumentException</snippet></ROW><ROW><id>9213924</id><snippet>throw new IllegalArgumentException();
</snippet></ROW><ROW><id>9214046</id><snippet>add()</snippet></ROW><ROW><id>9214046</id><snippet>return</snippet></ROW><ROW><id>9214046</id><snippet>yield</snippet></ROW><ROW><id>9214046</id><snippet>def add(a, b):
    return a + b
</snippet></ROW><ROW><id>9214046</id><snippet>generator()</snippet></ROW><ROW><id>9214046</id><snippet>map(add, a1, a2)
</snippet></ROW><ROW><id>9214046</id><snippet>itertools.imap()</snippet></ROW><ROW><id>9214046</id><snippet>map()</snippet></ROW><ROW><id>9214114</id><snippet> elow = 2
 ehigh = 900
 stepsize = 2
 fp1 = []
 energy = [1, 2, 3]
 for e0 in energy:
     for i in range(elow, ehigh, stepsize):
          fp1 = numpy.append(fp1, 15)

 fp1
 array([ 15.,  15.,  15., ...,  15.,  15.,  15.])
 len(fp1)
 1347
</snippet></ROW><ROW><id>9214114</id><snippet>range(2, 900, 2)</snippet></ROW><ROW><id>9214114</id><snippet>elow &gt;= ehigh

energy = []

stepsize &lt; 0
</snippet></ROW><ROW><id>9214114</id><snippet>energy</snippet></ROW><ROW><id>9214114</id><snippet>length = len(energy) * 449</snippet></ROW><ROW><id>9214442</id><snippet>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; [x[a:b + 1] for a in range(len(x)) for b in range(a, len(x))]
[[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]
</snippet></ROW><ROW><id>9214442</id><snippet>&gt;&gt;&gt; [x[a : a + n] for n in range(1, len(x) + 1)
                  for a in range(0, len(x) - n + 1)]
[[1], [2], [3], [1, 2], [2, 3], [1, 2, 3]]
</snippet></ROW><ROW><id>9214442</id><snippet>&gt;&gt;&gt; {[1] : 'foo'}
Traceback (most recent call last):
  File "&lt;pyshell#16&gt;", line 1, in &lt;module&gt;
    {[1] : 'foo'}
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>9214791</id><snippet>{% autoescape off %} 
  {{ encoded }}
{% endautoescape %} 
</snippet></ROW><ROW><id>9215126</id><snippet>import matplotlib.pyplot as plt
import numpy as np

D = np.random.randn(12*72).reshape((12, 72))
D[4, :] = np.nan
D[6, 6] = np.nan

D = np.ma.masked_invalid(D)

cmap = plt.get_cmap('bwr')
cmap.set_bad(color = 'k', alpha = 1.)

xbin = np.linspace(0, 12, 13)
ybin = np.linspace(-90, 90, 73)

fig = plt.figure()
ax = fig.add_subplot(111)
pl = ax.pcolormesh(xbin, ybin, D.T, cmap = cmap, edgecolors = 'None',
                vmin = -5, vmax = 5)
plt.show()
</snippet></ROW><ROW><id>9215545</id><snippet>class A(object):
    foo = {}
</snippet></ROW><ROW><id>9215545</id><snippet>x = A() 
y = A()
x.foo['bar'] = "baz"
</snippet></ROW><ROW><id>9215781</id><snippet>(x, y)</snippet></ROW><ROW><id>9215781</id><snippet>T</snippet></ROW><ROW><id>9215781</id><snippet>T[x, y]</snippet></ROW><ROW><id>9215781</id><snippet>True</snippet></ROW><ROW><id>9215781</id><snippet>False</snippet></ROW><ROW><id>9215781</id><snippet>(x, y)</snippet></ROW><ROW><id>9215781</id><snippet>T = defaultdict(bool)</snippet></ROW><ROW><id>9215781</id><snippet>bool()</snippet></ROW><ROW><id>9215781</id><snippet>False</snippet></ROW><ROW><id>9215781</id><snippet>bool</snippet></ROW><ROW><id>9215781</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def on_missing():
...     print("missing key!")
...     return 'empty!'
... 
&gt;&gt;&gt; T = defaultdict(on_missing)
&gt;&gt;&gt; T[0, 0] = True     # Store 'True' for key (0, 0) in T
&gt;&gt;&gt; T[0, 0]            # Retrieve the stored value
True
&gt;&gt;&gt; T[1, 2]            # (1, 2) does not exist, so call on_missing()
missing key!
'empty!'       
&gt;&gt;&gt; T[1, 2] = True     # Now store a value for (1, 2)
&gt;&gt;&gt; T[1, 2]            # We can see 'True' is stored.
True
</snippet></ROW><ROW><id>9215781</id><snippet>True</snippet></ROW><ROW><id>9215781</id><snippet>if T[s - c * x, i]:</snippet></ROW><ROW><id>9215781</id><snippet>(s-c*x, i)</snippet></ROW><ROW><id>9215781</id><snippet>set()</snippet></ROW><ROW><id>9215915</id><snippet>clientsock.send(msg)</snippet></ROW><ROW><id>9215915</id><snippet>clientsock.sendall(image_data)</snippet></ROW><ROW><id>9215915</id><snippet>image = open('my_image.jpg', 'rb')
image_data = image.read()
image.close()
</snippet></ROW><ROW><id>9216229</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9216229</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>9216229</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>9216229</id><snippet>LD_PRELOAD_PATH=/usr/local/lib python &lt;yourapp.py&gt;
</snippet></ROW><ROW><id>9216418</id><snippet>memcpy</snippet></ROW><ROW><id>9216418</id><snippet>c_char_p</snippet></ROW><ROW><id>9216418</id><snippet>buffer</snippet></ROW><ROW><id>9216418</id><snippet>c_int</snippet></ROW><ROW><id>9216418</id><snippet>bufferlen</snippet></ROW><ROW><id>9216418</id><snippet>libc = ctypes.cdll.LoadLibrary('libc.so.6')
content = 'My new content'
bufcontent = ctypes.create_string_buffer(content)
libc.memcpy(buffer. newcontent, min(len(content) + 1, bufferlen))
</snippet></ROW><ROW><id>9216418</id><snippet>strncpy</snippet></ROW><ROW><id>9216422</id><snippet>import struct

def toU32(bits):
    return struct.unpack_from("&gt;I", bits)[0]

def toS32(bits):
    return struct.unpack_from("&gt;i", bits)[0]
</snippet></ROW><ROW><id>9216422</id><snippet>import struct

def toU32(bits):
        return ord(bits[0]) &lt;&lt; 24 | ord(bits[1]) &lt;&lt; 16 | ord(bits[2]) &lt;&lt; 8  | ord(bits[3])

def toS32(bits):
    candidate = toU32(bits);
    if (candidate &gt;&gt; 31): # is the sign bit set?
        return (-0x80000000 + (candidate &amp; 0x7fffffff)) # "cast" it to signed
    return candidate


for x in range(-5,5):
    bits = struct.pack("&gt;i", x)
    print toU32(bits)
    print toS32(bits)
</snippet></ROW><ROW><id>9216430</id><snippet>In [21]: re.findall(r'(?:^|\s)(\d+)(?=$|\s)', st)
Out[21]: ['12345', '7890']
</snippet></ROW><ROW><id>9216430</id><snippet>(?:^|\s)</snippet></ROW><ROW><id>9216430</id><snippet>(\d+)</snippet></ROW><ROW><id>9216430</id><snippet>(?=$|\s)</snippet></ROW><ROW><id>9216585</id><snippet>BaseInlineFormSet</snippet></ROW><ROW><id>9216585</id><snippet>from django.forms.models import BaseInlineFormset

class ComponentInlineFormSet(BaseInlineFormSet):
    def clean()
        """Check that sum of components is 100%"""
        if any(self.errors):
            # Don't bother validating the formset unless each form is valid on its own
            return
        total_sum = sum(form.cleaned_data['percentage'] for form in self.forms)
        if total_sum != 100:
            raise ValidationError('Sum of components must be 100%')
</snippet></ROW><ROW><id>9216585</id><snippet>ComponentInline</snippet></ROW><ROW><id>9216585</id><snippet>class ComponentInline(admin.TabularInline):
    model = Component
    extra = 1
    formset = ComponentInlineFormSet
</snippet></ROW><ROW><id>9216646</id><snippet>Circle</snippet></ROW><ROW><id>9216646</id><snippet>Artist</snippet></ROW><ROW><id>9216646</id><snippet>axes</snippet></ROW><ROW><id>9216646</id><snippet>add_artist</snippet></ROW><ROW><id>9216646</id><snippet>import matplotlib.pyplot as plt
circle1=plt.Circle((0,0),.2,color='r')
circle2=plt.Circle((.5,.5),.2,color='b')
circle3=plt.Circle((1,1),.2,color='g',clip_on=False)
fig = plt.gcf()
fig.gca().add_artist(circle1)
fig.gca().add_artist(circle2)
fig.gca().add_artist(circle3)
fig.savefig('plotcircles.png')
</snippet></ROW><ROW><id>9216646</id><snippet>clip_on</snippet></ROW><ROW><id>9216646</id><snippet>True</snippet></ROW><ROW><id>9216646</id><snippet>axes</snippet></ROW><ROW><id>9216646</id><snippet>Artist</snippet></ROW><ROW><id>9216646</id><snippet>fig.gca()</snippet></ROW><ROW><id>9216646</id><snippet>circle1=plt.Circle((0,0),2,color='r')
# now make a circle with no fill, which is good for hilighting key results
circle2=plt.Circle((5,5),.5,color='b',fill=False)
circle3=plt.Circle((10,10),2,color='g',clip_on=False)
ax = plt.gca()
ax.cla() # clear things for fresh plot
# change default range so that new circles will work
ax.set_xlim((0,10))
ax.set_ylim((0,10))
# some data
ax.plot(range(11),'o',color='black')
# key data point that we are encircling
ax.plot((5),(5),'o',color='y')

fig.gca().add_artist(circle1)
fig.gca().add_artist(circle2)
fig.gca().add_artist(circle3)
fig.savefig('plotcircles2.png')
</snippet></ROW><ROW><id>9216646</id><snippet>False</snippet></ROW><ROW><id>9217008</id><snippet>Text</snippet></ROW><ROW><id>9217008</id><snippet>Label</snippet></ROW><ROW><id>9217008</id><snippet>Text</snippet></ROW><ROW><id>9217008</id><snippet>from Tkinter import *

class Sorting(Frame):
    def __init__(self):
        Frame.__init__(self)
        self.master.title("Sorting")
        self.master.rowconfigure(5, weight=1)
        self.master.columnconfigure(5, weight=1)
        self.grid(sticky=W+E+N+S )

        nums = [10, 20, 8, 5, 7]       # example of entry
        result = sorted(nums)          # sorted result = [3 ,5 , 8, 10 ,20]

        # the color list holds the items changing position when sortened
        color = [ind for ind, (x, y) in enumerate(zip(nums, result)) if x != y]

        entry_num = ''.join('%4i' % num for num in nums)
        sort_nums = ''.join('%4i' % num for num in result)

        l1 = Label(self,  text="entry", width=25, height=1)
        l1.grid(row=0, column=1, sticky=N)

        t_entry = Text(self,  width=25, height=2)
        t_entry.grid(row=1, column=1, sticky=N)
        t_entry.insert(END, entry_num)

        l2 = Label(self, text='sorted', width=25, height=1)
        l2.grid(row=2, column=1, sticky=N)

        t_sorted = Text(self,  width=25, height=2)
        t_sorted.grid(row=3, column=1, sticky=N)
        t_sorted.insert(END, sort_nums)

        t_sorted.tag_config('red_tag', foreground='red')

        for pos in color:
            a = '1.%i' % (4 * pos)
            b = '1.%i' % (4 * pos + 4)
            t_sorted.tag_add('red_tag', a, b)


if __name__ == "__main__":
    Sorting().mainloop()
</snippet></ROW><ROW><id>9217233</id><snippet>iter()</snippet></ROW><ROW><id>9217233</id><snippet>for line in iter(p.stdout.readline, ''):
    ...
</snippet></ROW><ROW><id>9217233</id><snippet>iter(o[, sentinel])</snippet></ROW><ROW><id>9217233</id><snippet>next()</snippet></ROW><ROW><id>9217233</id><snippet>StopIteration</snippet></ROW><ROW><id>9217233</id><snippet>iter()</snippet></ROW><ROW><id>9217233</id><snippet>readline()</snippet></ROW><ROW><id>9217233</id><snippet>with open('mydata.txt') as fp:
    for line in iter(fp.readline, ''):
        process_line(line)
</snippet></ROW><ROW><id>9217233</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>9217233</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>9217233</id><snippet>p.stdout</snippet></ROW><ROW><id>9217233</id><snippet>p.communicate()</snippet></ROW><ROW><id>9217514</id><snippet>cd ~/Downloads/urwid-X.X.X</snippet></ROW><ROW><id>9217514</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>9217514</id><snippet>mitmproxy</snippet></ROW><ROW><id>9217667</id><snippet>minion</snippet></ROW><ROW><id>9217670</id><snippet>if (i != " ") and (i != "") and (i != "\t"):
    (...)
</snippet></ROW><ROW><id>9217670</id><snippet>if i != " " and i != "":
    (...)
</snippet></ROW><ROW><id>9217887</id><snippet>import networkx as nx
from math import *
import matplotlib.pylab as plt
import itertools as it

def draw_circle_around_clique(clique,coords):
    dist=0
    temp_dist=0
    center=[0 for i in range(2)]
    color=colors.next()
    for a in clique:
        for b in clique:
            temp_dist=(coords[a][0]-coords[b][0])**2+(coords[a][1]-coords[b][2])**2
            if temp_dist&gt;dist:
                dist=temp_dist
                for i in range(2):
                    center[i]=(coords[a][i]+coords[b][i])/2
    rad=dist**0.5/2
    cir = plt.Circle((center[0],center[1]),   radius=rad*1.3,fill=False,color=color,hatch=hatches.next())
    plt.gca().add_patch(cir)
    plt.axis('scaled')
    # return color of the circle, to use it as the color for vertices of the cliques
    return color

global colors, hatches
colors=it.cycle('bgrcmyk')# blue, green, red, ...
hatches=it.cycle('/\|-+*')

# create a random graph
G=nx.gnp_random_graph(n=7,p=0.6)
# remember the coordinates of the vertices
coords=nx.spring_layout(G)

# remove "len(clique)&gt;2" if you're interested in maxcliques with 2 edges
cliques=[clique for clique in nx.find_cliques(G) if len(clique)&gt;2]

#draw the graph
nx.draw(G,pos=coords)
for clique in cliques:
    print "Clique to appear: ",clique
nx.draw_networkx_nodes(G,pos=coords,nodelist=clique,node_color=draw_circle_around_clique(clique,coords))

plt.show()
</snippet></ROW><ROW><id>9217887</id><snippet>&gt;&gt; Clique to appear:  [0, 5, 1, 2, 3, 6]
&gt;&gt; Clique to appear:  [0, 5, 4]
</snippet></ROW><ROW><id>9217887</id><snippet>&gt;&gt; Clique to appear:  [1, 4, 5]
&gt;&gt; Clique to appear:  [2, 5, 4]
&gt;&gt; Clique to appear:  [2, 5, 6]
</snippet></ROW><ROW><id>9217912</id><snippet>lxml.html</snippet></ROW><ROW><id>9217912</id><snippet>//*[contains(text(),'name']/parent::*/following-sibling::*[1]/*[@class='name']/text()
</snippet></ROW><ROW><id>9217912</id><snippet>'name'</snippet></ROW><ROW><id>9217912</id><snippet>'name'</snippet></ROW><ROW><id>9217912</id><snippet>['This is also a tag to be retrieved']
</snippet></ROW><ROW><id>9217912</id><snippet>text = """
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;This tag includes 'name', so it should be retrieved&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1 class="name"&gt;This is also a tag to be retrieved&lt;/h1&gt;
    &lt;h2&gt;Generic h2 tag&lt;/h2&gt;
  &lt;/body&gt;
&lt;/html&gt;
"""

import lxml.html
doc = lxml.html.fromstring(text)
print doc.xpath('//*[contains(text(), $stuff)]/parent::*/'
    'following-sibling::*[1]/*[@class=$stuff]/text()', stuff='name')
</snippet></ROW><ROW><id>9218077</id><snippet>PARSE_COLNAMES</snippet></ROW><ROW><id>9218077</id><snippet>def adapt_datetime(dt):
    # Get the datetime for the POSIX epoch.
    epoch = datetime.datetime.utcfromtimestamp(0.0)
    elapsedtime = dt - epoch
    # Calculate the number of milliseconds.
    seconds = float(elapsedtime.days)*24.*60.*60. + float(elapsedtime.seconds) + float(elapsedtime.microseconds)/1000000.0
    return seconds


def convert_datetime(tf):
    # Note: strange math is used to account for daylight savings time and 
    #    times in the Eastern (US) time zone (e.g. EDT)
    tf = float(tf)
    edt_adjustment = 6 * 60. * 60.
    if time.localtime(tf).tm_isdst:
        edt_adjustment = 5 * 60. * 60.
    return datetime.datetime.fromtimestamp(tf+edt_adjustment)

sqlite3.register_adapter(datetime.datetime, adapt_datetime)
sqlite3.register_converter("datetime", convert_datetime)
</snippet></ROW><ROW><id>9218097</id><snippet>from math import sqrt
n = raw_input("Example Number? ")
n = float(n)
sqaureRootOfN = sqrt(n)

print '-'*75
print ' # of Decimals', ' ' * 8, 'New Root', ' ' * 10, 'Percent error'
print '-'*75
for a in range(0,10):
    preRoot = float(int(sqaureRootOfN * 10**a))
    newRoot = preRoot/10**a
    percentError = (n - newRoot**2)/n*100
    print " {: &lt;20}{: &lt;25}{: &lt;18}".format(a, newRoot, str(percentError) + ' %')
</snippet></ROW><ROW><id>9218097</id><snippet>---------------------------------------------------------------------------
 # of Decimals          New Root            Percent error
---------------------------------------------------------------------------
 0                   9.0                      18.1818181818 %   
 1                   9.9                      1.0 %             
 2                   9.94                     0.198383838384 %  
 3                   9.949                    0.0175747474747 % 
 4                   9.9498                   0.00149490909092 %
 5                   9.94987                  8.7861717162e-05 %
 6                   9.949874                 7.45871112931e-06 %
 7                   9.9498743                1.4284843602e-06 %
 8                   9.94987437               2.14314187048e-08 %
 9                   9.949874371              1.33066711409e-09 %
</snippet></ROW><ROW><id>9218261</id><snippet>dictConfig()</snippet></ROW><ROW><id>9218261</id><snippet>fileConfig()</snippet></ROW><ROW><id>9218261</id><snippet>fileConfig()</snippet></ROW><ROW><id>9218261</id><snippet>format</snippet></ROW><ROW><id>9218261</id><snippet>datefmt</snippet></ROW><ROW><id>9218261</id><snippet>value</snippet></ROW><ROW><id>9218261</id><snippet>custfmt.py</snippet></ROW><ROW><id>9218261</id><snippet>fcfgtest.py</snippet></ROW><ROW><id>9218261</id><snippet>fileConfig()</snippet></ROW><ROW><id>9218261</id><snippet>fcfgtest.py</snippet></ROW><ROW><id>9218261</id><snippet>20:17:59 debug message
20:17:59 info message
20:17:59 [WARNING] warning message
20:17:59 [ERROR] error message
20:17:59 [CRITICAL] critical message
</snippet></ROW><ROW><id>9218261</id><snippet>class AltCustomFormatter(logging.Formatter):
    def format(self, record):
        if record.levelno in (logging.WARNING,
                              logging.ERROR,
                              logging.CRITICAL):
            record.msg = '[%s] %s' % (record.levelname, record.msg)
        return super(AltCustomFormatter , self).format(record)
</snippet></ROW><ROW><id>9218261</id><snippet>class=custfmt.AltCustomFormatter
</snippet></ROW><ROW><id>9218261</id><snippet>class=custfmt.factory
</snippet></ROW><ROW><id>9218397</id><snippet>return</snippet></ROW><ROW><id>9218397</id><snippet>initiate_values</snippet></ROW><ROW><id>9218397</id><snippet>def initiate_values(directory):
    for file in glob.glob(os.path.join(directory, '*.[xX][lL][sS]')):
        title = os.path.basename(file).lower()
        if title == 'etc.xls':
            wb = xlrd.open_workbook(file)
            wb = wb.sheet_by_name(u'Sheet1')
            return get_values(file, wb)  # added `return'
    return {} # or some other value
</snippet></ROW><ROW><id>9218567</id><snippet>class URIString(str):
    _default_namespace = "default"

    def __init__(self, value, namespace=_default_namespace):
        self.namespace = namespace

    def __new__(cls, value, namespace=_default_namespace):
        return super().__new__(cls, value)      

    @property
    def local_name(self):
        return self[(self.find(self.namespace)+len(self.namespace)):]
</snippet></ROW><ROW><id>9218567</id><snippet>@property</snippet></ROW><ROW><id>9218567</id><snippet>getLocalName()</snippet></ROW><ROW><id>9218567</id><snippet>local_name</snippet></ROW><ROW><id>9218567</id><snippet>super(URIString, cls).__new__(cls, value)</snippet></ROW><ROW><id>9218800</id><snippet>syncdb</snippet></ROW><ROW><id>9218800</id><snippet>syncdb</snippet></ROW><ROW><id>9218800</id><snippet>syncdb</snippet></ROW><ROW><id>9218800</id><snippet>Model</snippet></ROW><ROW><id>9218800</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>9218800</id><snippet>syncdb</snippet></ROW><ROW><id>9218800</id><snippet>syncdb</snippet></ROW><ROW><id>9218800</id><snippet>python manage.py schemamigration --auto yourapp
</snippet></ROW><ROW><id>9218800</id><snippet>python manage.py migrate yourapp
</snippet></ROW><ROW><id>9218800</id><snippet>python manage.py syncdb
</snippet></ROW><ROW><id>9218881</id><snippet>k.set_metadata('Content-Type', mime)
k.set_contents_from_file(data, policy='public-read')
k.set_acl('public-read')
</snippet></ROW><ROW><id>9219195</id><snippet>operator</snippet></ROW><ROW><id>9219290</id><snippet>from itertools import product
product(range(2), repeat=3)
</snippet></ROW><ROW><id>9219306</id><snippet>allkeys = ...  # might be known; or obtained from available dicts by union;
               # 'xKey' can be removed at this stage to simplify the list
               # comprehension that follows
sortedKeys = sorted(allKeys)
list_of_values = [[d.get(k) for k in sortedKeys if k in d]
                                                   for d in list_of_dicts] 
</snippet></ROW><ROW><id>9219306</id><snippet>iteritems</snippet></ROW><ROW><id>9219306</id><snippet>if k in d</snippet></ROW><ROW><id>9219748</id><snippet>import wnck
screen = wnck.screen_get_default()
# BUG: There needs to be a small delay between the previous line and the next;
# otherwise get_windows returns an empty list.
windows = screen.get_windows()
panel = windows[1] # For example
panel_xid = panel.get_xid()

import gtk
window = gtk.Window()
window.show_all()
window.window.set_transient_for(gtk.gdk.window_foreign_new(panel_xid))
</snippet></ROW><ROW><id>9219895</id><snippet>type.__init__()</snippet></ROW><ROW><id>9219895</id><snippet>cls</snippet></ROW><ROW><id>9219895</id><snippet>super</snippet></ROW><ROW><id>9219895</id><snippet>return super(MyMeta, cls).__init__(name, bases, dct)
</snippet></ROW><ROW><id>9219895</id><snippet>super</snippet></ROW><ROW><id>9219895</id><snippet>return type.__init__(cls, name, bases, dct)
</snippet></ROW><ROW><id>9219895</id><snippet>type.__init__()</snippet></ROW><ROW><id>9219895</id><snippet>type(myobject)</snippet></ROW><ROW><id>9219895</id><snippet>myobject</snippet></ROW><ROW><id>9219895</id><snippet>&gt;&gt;&gt; number = 1
&gt;&gt;&gt; type(number)
&lt;type 'int'&gt;
&gt;&gt;&gt; type('my string')
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>9220197</id><snippet>collections.deque</snippet></ROW><ROW><id>9220197</id><snippet>from collections import deque

class Buffer(deque):
    def put(self, iterable):
        for i in iterable:
            self.append(i)

    def peek(self, how_many):
        return ''.join([self[i] for i in xrange(how_many)])

    def get(self, how_many):
        return ''.join([self.popleft() for _ in xrange(how_many)])



buf = Buffer()
buf.put('abcdefg')
print buf
print buf.peek(4)
print buf
print buf.get(5)
print buf
</snippet></ROW><ROW><id>9220197</id><snippet>deque(['a', 'b', 'c', 'd', 'e', 'f', 'g'])
abcd
deque(['a', 'b', 'c', 'd', 'e', 'f', 'g'])
abcde
deque(['f', 'g'])
</snippet></ROW><ROW><id>9220469</id><snippet>import os
import random
import string

directory = "C:\\whatever"
alphabet = string.ascii_lowercase

for item in os.listdir(directory):
  old_fn = os.path.join(directory, item)
  new_fn = ''.join(random.sample(alphabet, random.randint(5,15)))
  new_fn += os.path.splitext(old_fn)[1] #adds file extension
  if os.path.isfile(old_fn) and not os.path.exists(new_fn):
    os.rename(path, os.path.join(directory, new_fn))
  else:
    print 'error renaming {} -&gt; {}'.format(old_fn, new_fn)
</snippet></ROW><ROW><id>9220700</id><snippet>import numpy as np
x = np.arange(1000000).cumsum()
</snippet></ROW><ROW><id>9220700</id><snippet>a = np.array([0], dtype=object)
a[0] += 1232234234234324353453453
</snippet></ROW><ROW><id>9220823</id><snippet>./websockify --web ./ 21567 -- server.py
</snippet></ROW><ROW><id>9220823</id><snippet>./server.py
./websockify --web ./ 6080 localhost:21567
</snippet></ROW><ROW><id>9220823</id><snippet>./server.py
</snippet></ROW><ROW><id>9220823</id><snippet>./websockify --web ./ 6080 192.168.1.7:21567
</snippet></ROW><ROW><id>9221065</id><snippet>RecursivelyListAllThatWork()</snippet></ROW><ROW><id>9221065</id><snippet>coeff = [0]*len(data)
def RecursivelyListAllThatWork(k, sum): # Using last k variables, make sum
    # /* Base case: If we've assigned all the variables correctly, list this
    # * solution.
    # */
    if k == 0:
        # print what we have so far
        print(' + '.join("%2s*%s" % t for t in zip(coeff, data)))
        return
    x_k = data[k-1]
    # /* Recursive step: Try all coefficients, but only if they work. */
    for c in range(sum // x_k + 1):
       if T[sum - c * x_k, k - 1]:
           # mark the coefficient of x_k to be c
           coeff[k-1] = c
           RecursivelyListAllThatWork(k - 1, sum - c * x_k)
           # unmark the coefficient of x_k
           coeff[k-1] = 0

RecursivelyListAllThatWork(len(data), target_sum)
</snippet></ROW><ROW><id>9221065</id><snippet>10*1 +  0*2 +  0*4
 8*1 +  1*2 +  0*4
 6*1 +  2*2 +  0*4
 4*1 +  3*2 +  0*4
 2*1 +  4*2 +  0*4
 0*1 +  5*2 +  0*4
 6*1 +  0*2 +  1*4
 4*1 +  1*2 +  1*4
 2*1 +  2*2 +  1*4
 0*1 +  3*2 +  1*4
 2*1 +  0*2 +  2*4
 0*1 +  1*2 +  2*4
</snippet></ROW><ROW><id>9221114</id><snippet>$ python -c 'import sys; print sys.maxint'
9223372036854775807
$ export VERSIONER_PYTHON_PREFER_32_BIT=yes
$ python -c 'import sys; print sys.maxint'
2147483648
</snippet></ROW><ROW><id>9221114</id><snippet>man python</snippet></ROW><ROW><id>9221114</id><snippet>arch -i386</snippet></ROW><ROW><id>9221114</id><snippet>$ /usr/bin/python2.7 -c 'import sys; print sys.maxint'
9223372036854775807
$ arch -i386 /usr/bin/python2.7 -c 'import sys; print sys.maxint'
2147483648
</snippet></ROW><ROW><id>9221146</id><snippet>subprocess</snippet></ROW><ROW><id>9221146</id><snippet>shutil</snippet></ROW><ROW><id>9221146</id><snippet>&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil.move(src, dest)
</snippet></ROW><ROW><id>9221146</id><snippet>glob.glob</snippet></ROW><ROW><id>9221146</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('*ITunes*.XLS')
</snippet></ROW><ROW><id>9221374</id><snippet>//h1/following-sibling::div[1]
</snippet></ROW><ROW><id>9221615</id><snippet>&gt;&gt;&gt; mylist = "abc"
&gt;&gt;&gt; for m in mylist:
...    print m
...
a
b
c
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9221615</id><snippet>pathlist</snippet></ROW><ROW><id>9221615</id><snippet>pathList1 = []
pathList1.append(filename)

for fname in pathList1:
          print fname
</snippet></ROW><ROW><id>9221655</id><snippet>self.request.uri</snippet></ROW><ROW><id>9221655</id><snippet>/</snippet></ROW><ROW><id>9221800</id><snippet>&lt;UPDATE&gt;</snippet></ROW><ROW><id>9221800</id><snippet>&lt;/UPDATE&gt;</snippet></ROW><ROW><id>9221800</id><snippet>from selenium.webdriver import Firefox  
from selenium.webdriver.support.ui import WebDriverWait  

from selenium.common.exceptions import TimeoutException  
from selenium.common.exceptions import NoSuchElementException

class MyFirefox(Firefox):

    RETRIES = 3
    TIMEOUT_SECONDS = 10

    def find_element_by_id(self, id):
        tries = 0
        element = None

        while tries &lt; self.RETRIES:
            try:
                element = WebDriverWait(self, self.TIMEOUT_SECONDS).until(
                    lambda browser: super(MyFirefox, browser).find_element_by_id(id)
                )   
            except TimeoutException:
                tries = tries + 1
                self.switch_to_window(self.window_handles[0])
                continue
            else:
                return element

        raise NoSuchElementException("Element with id=%s was not found." % id)
</snippet></ROW><ROW><id>9222120</id><snippet>&gt;&gt;&gt; st = "alpha here is my text bravo"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'alpha(.*?)bravo',st)
[' here is my text ']
</snippet></ROW><ROW><id>9222120</id><snippet>alpha here is my line
yipee
bravo
</snippet></ROW><ROW><id>9222120</id><snippet>regular expressions</snippet></ROW><ROW><id>9222120</id><snippet>&gt;&gt;&gt; f = open('test.txt','r')
&gt;&gt;&gt; data = f.read()
&gt;&gt;&gt; x = re.findall(r'alpha(.*?)bravo',data,re.DOTALL)
&gt;&gt;&gt; x
[' here is my line\nyipee\n']
&gt;&gt;&gt; "".join(x).replace('\n',' ')
' here is my line yipee '
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9222121</id><snippet>import lxml

text = """                                                       
&lt;html&gt;
  &lt;body&gt;
    &lt;span&gt;This tag includes 'some_text'&lt;/span&gt;
    &lt;h2&gt;A h2 tag&lt;/h2&gt;
  &lt;/body&gt;
&lt;/html&gt;
"""

doc = lxml.etree.fromstring(text, parser=lxml.etree.HTMLParser())
doc.xpath("//*[contains(text(),'some_text')]/following-sibling::*")
# [&lt;Element h2 at 102eee100&gt;]

doc = lxml.html.fromstring(text)
doc.xpath("//*[contains(text(),'some_text')]/following-sibling::*")
# [&lt;Element h2 at 102f6f188&gt;]
</snippet></ROW><ROW><id>9222121</id><snippet>html</snippet></ROW><ROW><id>9222121</id><snippet>text = """                       
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;This tag includes 'some_text'&lt;/title&gt;
    &lt;h2&gt;A h2 tag&lt;/h2&gt;
  &lt;/head&gt;
&lt;/html&gt;
"""
doc = lxml.etree.fromstring(text)
doc.xpath("//*[contains(text(),'some_text')]/following-sibling::*[1]")
# [&lt;Element h2 at 102eeef70&gt;]
</snippet></ROW><ROW><id>9222157</id><snippet>python setup.py install
</snippet></ROW><ROW><id>9222365</id><snippet>create table</snippet></ROW><ROW><id>9222365</id><snippet>try:
    cur.execute("SELECT ouch FROM aargh;")
except Exception, e:
    pass

errorcodes.lookup(e.pgcode[:2])
# 'CLASS_SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION'
errorcodes.lookup(e.pgcode)
# 'UNDEFINED_TABLE'
</snippet></ROW><ROW><id>9222467</id><snippet>__init__.py</snippet></ROW><ROW><id>9222467</id><snippet>alice</snippet></ROW><ROW><id>9222467</id><snippet>bob</snippet></ROW><ROW><id>9222467</id><snippet>foo</snippet></ROW><ROW><id>9222467</id><snippet>__all__</snippet></ROW><ROW><id>9222467</id><snippet>__init__.py</snippet></ROW><ROW><id>9222467</id><snippet>__all__</snippet></ROW><ROW><id>9222467</id><snippet>alice</snippet></ROW><ROW><id>9222467</id><snippet>bob</snippet></ROW><ROW><id>9222467</id><snippet>`__all__` = ['alice', bob']
</snippet></ROW><ROW><id>9222467</id><snippet>alice</snippet></ROW><ROW><id>9222467</id><snippet>bob</snippet></ROW><ROW><id>9222467</id><snippet>__init__.py</snippet></ROW><ROW><id>9222663</id><snippet>d1 = d2 = {}</snippet></ROW><ROW><id>9222663</id><snippet>d1 = {}</snippet></ROW><ROW><id>9222663</id><snippet>d2 = {}</snippet></ROW><ROW><id>9222663</id><snippet>        d1 = {part[0] : xval}
        d2 = {part[0] : yval}
</snippet></ROW><ROW><id>9222663</id><snippet>        d1[part[0]] = xval
        d2[part[0]] = yval
</snippet></ROW><ROW><id>9222663</id><snippet>t = interpolate.UnivariateSpline(d1.values(), d2.values())
</snippet></ROW><ROW><id>9222663</id><snippet>keys = sorted(d1)
xs = [d1[k] for k in keys]
ys = [d2[k] for k in keys]
t = interpolate.UnivariateSpline(xs, ys)
</snippet></ROW><ROW><id>9222728</id><snippet>import numpy as np
import matplotlib.pyplot as plt
x = np.array([0,1,2,3,4,5,6])
y = np.array([0,2,0,4.5,0.5,2,3])

line = plt.plot(x,y,'o')[0]
line.set_clip_on(False)
plt.show()
</snippet></ROW><ROW><id>9222737</id><snippet>sys.getrecursionlimit()</snippet></ROW><ROW><id>9222737</id><snippet>status is False</snippet></ROW><ROW><id>9222737</id><snippet>while not status</snippet></ROW><ROW><id>9222737</id><snippet>def function_with_retries():
  while True:
    try:
      output = function()
    except SSHException:
      sleep(10)
    else:
      return output
</snippet></ROW><ROW><id>9222928</id><snippet>def concatenate_attributes(self):
    self.a = np.hstack([o.a for o in self.my_class_inst])
    self.arr = np.hstack([o.arr for o in self.my_class_inst])
</snippet></ROW><ROW><id>9223185</id><snippet>@functools.wraps
</snippet></ROW><ROW><id>9223185</id><snippet>&gt;&gt;&gt; from functools import wraps
&gt;&gt;&gt; def my_decorator(f):
...     @wraps(f)
...     def wrapper(*args, **kwds):
...         print('Calling decorated function')
...         return f(*args, **kwds)
...     return wrapper
...
&gt;&gt;&gt; @my_decorator
... def example():
...     """Docstring"""
...     print('Called example function')
...
&gt;&gt;&gt; example()
Calling decorated function
Called example function
&gt;&gt;&gt; example.__name__
'example'
&gt;&gt;&gt; example.__doc__
'Docstring'
</snippet></ROW><ROW><id>9223219</id><snippet>import gc
gc.collect()
</snippet></ROW><ROW><id>9223297</id><snippet>from PyQt4.QtGui import QApplication, QPixmap
desktop = QApplication.desktop()
screenRect = desktop.screenGeometry(1)   #2nd monitor
print screenRect.x(), screenRect.y()   #returns the x and y of that screen
</snippet></ROW><ROW><id>9223424</id><snippet>sizer.Fit(panel)</snippet></ROW><ROW><id>9223424</id><snippet>SetSizer</snippet></ROW><ROW><id>9223424</id><snippet>Layout</snippet></ROW><ROW><id>9223424</id><snippet>wxPython</snippet></ROW><ROW><id>9223424</id><snippet>Fit</snippet></ROW><ROW><id>9223424</id><snippet>    panel.SetSizer(sizer)
    sizer.Fit(panel)
    panel.Layout()
</snippet></ROW><ROW><id>9223526</id><snippet>longs = (np.random.rand(60, 1) + np.linspace(-np.pi, np.pi, 80000)).reshape(-1)
lats = np.sin(longs) + np.random.rand(len(longs)) * 0.1

bad_index = (longs&gt;0) &amp; (longs&lt;1)
bad_longs = longs[bad_index]
bad_lats = lats[bad_index]
</snippet></ROW><ROW><id>9223526</id><snippet>ranges = [[np.min(lats), np.max(lats)], [np.min(longs), np.max(longs)]]
h, lat_range, long_range = np.histogram2d(lats, longs, bins=(400,400), range=ranges)
bad_h, lat_range2, long_range2 = np.histogram2d(bad_lats, bad_longs, bins=(400,400), range=ranges)
</snippet></ROW><ROW><id>9223526</id><snippet>y, x = np.where(h)
count = h[y, x]
pl.scatter(long_range[x], lat_range[y], s=count/20, c=count, linewidths=0, cmap="Blues")

count = bad_h[y, x]
pl.scatter(long_range2[x], lat_range2[y], s=count/20, c=count, linewidths=0, cmap="Reds")

pl.show() 
</snippet></ROW><ROW><id>9223526</id><snippet>import numpy as np
import pylab as pl

longs = (np.random.rand(60, 1) + np.linspace(-np.pi, np.pi, 80000)).reshape(-1)
lats = np.sin(longs) + np.random.rand(len(longs)) * 0.1

bad_index = (longs&gt;0) &amp; (longs&lt;1)
bad_longs = longs[bad_index]
bad_lats = lats[bad_index]

ranges = [[np.min(lats), np.max(lats)], [np.min(longs), np.max(longs)]]
h, lat_range, long_range = np.histogram2d(lats, longs, bins=(300,300), range=ranges)
bad_h, lat_range2, long_range2 = np.histogram2d(bad_lats, bad_longs, bins=(300,300), range=ranges)

y, x = np.where(h)
count = h[y, x]
pl.scatter(long_range[x], lat_range[y], s=count/20, c=count, linewidths=0, cmap="Blues")

count = bad_h[y, x]
pl.scatter(long_range2[x], lat_range2[y], s=count/20, c=count, linewidths=0, cmap="Reds")

pl.show()
</snippet></ROW><ROW><id>9223796</id><snippet>if [ -x myproc.pid ] ; then
    pid=`cat myproc.pid`
else
    pid=1
fi
kill -0 $pid #check if process is still running
</snippet></ROW><ROW><id>9223796</id><snippet>kill -0</snippet></ROW><ROW><id>9223796</id><snippet>/proc</snippet></ROW><ROW><id>9223796</id><snippet>pid=1</snippet></ROW><ROW><id>9223796</id><snippet>root</snippet></ROW><ROW><id>9223796</id><snippet>os</snippet></ROW><ROW><id>9223796</id><snippet>kill</snippet></ROW><ROW><id>9223796</id><snippet>os.kill</snippet></ROW><ROW><id>9223796</id><snippet>OSError</snippet></ROW><ROW><id>9223796</id><snippet>try</snippet></ROW><ROW><id>9223796</id><snippet>catch</snippet></ROW><ROW><id>9223796</id><snippet>try</snippet></ROW><ROW><id>9223796</id><snippet>catch</snippet></ROW><ROW><id>9223841</id><snippet>ABC</snippet></ROW><ROW><id>9223841</id><snippet>__subclasshook__</snippet></ROW><ROW><id>9223841</id><snippet>issubclass()</snippet></ROW><ROW><id>9223841</id><snippet>isinstance()</snippet></ROW><ROW><id>9223988</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dt = datetime.datetime.strptime('2012-02-09', '%Y-%m-%d')
&gt;&gt;&gt; time.mktime(dt.timetuple())
1328774400.0
</snippet></ROW><ROW><id>9223988</id><snippet>&gt;&gt;&gt; dt = datetime.datetime(year=2012, month=2, day=9)
&gt;&gt;&gt; time.mktime(dt.timetuple())
1328774400.0
</snippet></ROW><ROW><id>9224314</id><snippet>def mail(receiver,Message):
    import smtplib
    try:
        s=smtplib.SMTP()
        s.connect("smtp.gmail.com",465)
        s.ehlo()
        s.starttls()
        s.ehlo()
        s.login("email@gmail.com", "password")
        s.sendmail("email@gmail.com", receiver, Message)
    except Exception,R:
            return R
</snippet></ROW><ROW><id>9224407</id><snippet>&gt;&gt;&gt; foo = {}
&gt;&gt;&gt; foo.setdefault(3, []).append('dsafdasf') # Appends to default value
&gt;&gt;&gt; foo[None] # Raises a KeyError exception
</snippet></ROW><ROW><id>9224407</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>9224407</id><snippet>setdefault</snippet></ROW><ROW><id>9224416</id><snippet>dict_with_ints = dict((k,int(v)) for k,v in dict_with_strs.iteritems())
</snippet></ROW><ROW><id>9224755</id><snippet>xxxStyleComment</snippet></ROW><ROW><id>9224755</id><snippet>ignore</snippet></ROW><ROW><id>9224755</id><snippet>cHeaderParser.ignore(cStyleComment)
</snippet></ROW><ROW><id>9224755</id><snippet>cHeaderParser</snippet></ROW><ROW><id>9224755</id><snippet>cStyleComment.setParseAction(commentHandler)</snippet></ROW><ROW><id>9224755</id><snippet>def commentHandler(inputString, locn, tokens):
def commentHandler(locn, tokens):
def commentHandler(tokens):
def commentHandler():
</snippet></ROW><ROW><id>9224755</id><snippet>def commentHandler(tokens):
    return tokens[0].upper()    
cStyleComment.setParseAction(commentHandler)
</snippet></ROW><ROW><id>9224755</id><snippet>cStyleComment.setParseAction(lambda t:t[0].upper())</snippet></ROW><ROW><id>9224755</id><snippet>transformString</snippet></ROW><ROW><id>9224755</id><snippet>parseString</snippet></ROW><ROW><id>9224755</id><snippet>print cStyleComment.transformString(source)
</snippet></ROW><ROW><id>9225253</id><snippet>subprocess.Popen("cmd.exe /k C:\full\path\to\file.cmd")
</snippet></ROW><ROW><id>9225253</id><snippet>cmd.exe</snippet></ROW><ROW><id>9225493</id><snippet>=?Windows-1252?Q?Factuur_751845.pdf?=</snippet></ROW><ROW><id>9225493</id><snippet>email.header.decode_header</snippet></ROW><ROW><id>9225581</id><snippet>sudo apt-get install python-imaging
</snippet></ROW><ROW><id>9226094</id><snippet>Element</snippet></ROW><ROW><id>9226094</id><snippet>&gt;&gt;&gt; Element = type(xml.etree.cElementTree.Element(None))
&gt;&gt;&gt; root = xml.etree.cElementTree.fromstring('&lt;xml&gt;&lt;/xml&gt;')
&gt;&gt;&gt; isinstance(root, Element)
True
</snippet></ROW><ROW><id>9226240</id><snippet>isinstance</snippet></ROW><ROW><id>9226240</id><snippet>type</snippet></ROW><ROW><id>9226240</id><snippet>def aFuncion(input):
  if isinstance(input, str):
    print 'you gave a string-like input'
  elif isinstance(input, dict):
    print 'you gave a dict-like input'

aFunction('test')
</snippet></ROW><ROW><id>9226362</id><snippet>self.request.headers(e + "&lt;br /&gt;")</snippet></ROW><ROW><id>9226362</id><snippet>request.headers</snippet></ROW><ROW><id>9226362</id><snippet>self.request.headers</snippet></ROW><ROW><id>9226362</id><snippet>dict</snippet></ROW><ROW><id>9226362</id><snippet>headers</snippet></ROW><ROW><id>9226362</id><snippet>self.request.headers.items()</snippet></ROW><ROW><id>9226362</id><snippet>self.request.headers.keys()</snippet></ROW><ROW><id>9226655</id><snippet>the_time= None
for f in FORMATS:
    try:
        the_time = time.mktime(time.strptime(t, f))
        return the_time # or break 
    except ValueError: 
        continue
if the_time is None:
    raise ValueError( "{0!r} is not a valid time".format(t) )
</snippet></ROW><ROW><id>9226977</id><snippet>d = {}
for k, v in tuples:
    d.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>9226977</id><snippet>d.keys()</snippet></ROW><ROW><id>9226977</id><snippet>k</snippet></ROW><ROW><id>9226977</id><snippet>d[k]</snippet></ROW><ROW><id>9226977</id><snippet>defaultdict</snippet></ROW><ROW><id>9227313</id><snippet>class SuperUserAdminSite( AdminSite ):
    def has_permission(self, request):
        return request.user.is_active and request.user.is_staff and request.user. is_superuser
</snippet></ROW><ROW><id>9227401</id><snippet>banner</snippet></ROW><ROW><id>9227401</id><snippet>aix@aix:~$ banner HELLO
#     # ####### #       #       #######
#     # #       #       #       #     #
#     # #       #       #       #     #
####### #####   #       #       #     #
#     # #       #       #       #     #
#     # #       #       #       #     #
#     # ####### ####### ####### #######
</snippet></ROW><ROW><id>9227458</id><snippet>date</snippet></ROW><ROW><id>9227458</id><snippet>strftime</snippet></ROW><ROW><id>9227458</id><snippet>date_oncall</snippet></ROW><ROW><id>9227458</id><snippet>&gt;&gt;&gt; '{d.day}-{d.month}-{d.year}'.format(d=date_oncall)
'17-1-2010'
</snippet></ROW><ROW><id>9227594</id><snippet>[]</snippet></ROW><ROW><id>9227594</id><snippet>()</snippet></ROW><ROW><id>9227594</id><snippet>{}</snippet></ROW><ROW><id>9227594</id><snippet>(8,
 {(2, 1): (1315840806,
'\x14\x00&amp;#nNWH\x00\x00\x06\x90\xb3\x00\... lostsa bytes),
</snippet></ROW><ROW><id>9227594</id><snippet>8</snippet></ROW><ROW><id>9227594</id><snippet>(2, 1)</snippet></ROW><ROW><id>9227594</id><snippet>1315840806</snippet></ROW><ROW><id>9227633</id><snippet>config.read('config.cfg')
</snippet></ROW><ROW><id>9227633</id><snippet>=</snippet></ROW><ROW><id>9227633</id><snippet>=</snippet></ROW><ROW><id>9227668</id><snippet>NineDoubles = c_double * 9

class RETARRAY(Structure):
    _fields_= [("data", POINTER(c_double)),
              ("row", c_int),
              ("col", c_int)]

#Initializing the matrix 
data = NineDoubles()
retArr = RETARRAY()
retArr.data = data

dll.mlfAddmatrixW(pointer(retArr))
</snippet></ROW><ROW><id>9227669</id><snippet>client[0]</snippet></ROW><ROW><id>9227669</id><snippet>socket</snippet></ROW><ROW><id>9227669</id><snippet>recv()</snippet></ROW><ROW><id>9227669</id><snippet>.decode()</snippet></ROW><ROW><id>9227669</id><snippet> data = client[0].recv(1).decode('utf-8')
</snippet></ROW><ROW><id>9227669</id><snippet>iter()</snippet></ROW><ROW><id>9227669</id><snippet> def read_socket():
      return client[0].recv(1)

 data = b''.join(iter(read_socket, b''))
</snippet></ROW><ROW><id>9227796</id><snippet>import re
import locale

# Remove anything not a digit, comma or period
no_cruft = re.sub(r'[^\d,.-]', '', st)

# Split the result into parts consisting purely of digits
parts = re.split(r'[,.]', no_cruft)

# ...and sew them back together
if len(parts) == 1:
    # No delimeters found
    float_str = parts[0]
elif len(parts[-1]) != 2:
    # &gt;= 1 delimeters found. If the length of last part is not equal to 2, assume it is not a decimal part
    float_str = ''.join(parts)
else:
    float_str = '%s%s%s' % (''.join(parts[0:-1]),
                            locale.localeconv()['decimal_point'],
                            parts[-1])

# Convert to float
my_float = float(float_str)
</snippet></ROW><ROW><id>9227923</id><snippet>["sqlite3 ", " -separator ',' ", dbLocation, "SELECT blah from argh"] # yours
["sqlite3", "-separator", ",", dbLocation, "SELECT blah from argh"] # mine
</snippet></ROW><ROW><id>9228117</id><snippet>from ctypes import cdll
os_encoding = 'cp' + str(cdll.kernel32.GetACP())
</snippet></ROW><ROW><id>9228117</id><snippet>import locale
os_encoding = locale.getpreferredencoding()
# This returns 'cp1252' on my system, yay!
</snippet></ROW><ROW><id>9228117</id><snippet>u_argv = [x.decode(os_encoding) for x in sys.argv]
u_env = os.getenv('myvar').decode(os_encoding)
</snippet></ROW><ROW><id>9228117</id><snippet>os_encoding = 'cp1252'</snippet></ROW><ROW><id>9228708</id><snippet>\uFEFF</snippet></ROW><ROW><id>9228708</id><snippet>\uFEFF</snippet></ROW><ROW><id>9228708</id><snippet>codecs.open()</snippet></ROW><ROW><id>9228708</id><snippet>"utf-8-sig"</snippet></ROW><ROW><id>9228708</id><snippet>import codecs
f = codecs.open('C:\Python26\text.txt', 'r', 'utf-8-sig')
text = f.read()
a = nltk.word_tokenize(text)
</snippet></ROW><ROW><id>9228708</id><snippet>&gt;&gt;&gt; open("x.txt", "r").read().decode("utf-8")
u'\ufeffm\xfcsli'
&gt;&gt;&gt; import codecs
&gt;&gt;&gt; codecs.open("x.txt", "r", "utf-8-sig").read()
u'm\xfcsli'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9229039</id><snippet>.readXXX()</snippet></ROW><ROW><id>9229039</id><snippet>.writeXXX()</snippet></ROW><ROW><id>9229039</id><snippet>ByteArray</snippet></ROW><ROW><id>9229039</id><snippet>struct.unpack</snippet></ROW><ROW><id>9229039</id><snippet>struct.pack</snippet></ROW><ROW><id>9229039</id><snippet>ByteArray</snippet></ROW><ROW><id>9229040</id><snippet>W</snippet></ROW><ROW><id>9229040</id><snippet>In [7]: W=array([[1],[2]])

In [8]: print W.shape
------&gt; print(W.shape)
(2, 1)
</snippet></ROW><ROW><id>9229040</id><snippet>In [9]: print dot(W.T,W)
------&gt; print(dot(W.T,W))
[[5]]

In [10]: print np.asscalar(dot(W.T,W))
-------&gt; print(np.asscalar(dot(W.T,W)))
5
</snippet></ROW><ROW><id>9229168</id><snippet>sets</snippet></ROW><ROW><id>9229168</id><snippet>set</snippet></ROW><ROW><id>9229168</id><snippet>&gt;&gt;&gt; rule_checker = {'any': lambda o, p: True, 
...                 'any-but-or': lambda o, p: not bool(set(p) - set(o)),
...                 'any-but-and': lambda o, p: len(set(p) - set(o)) != 0,}

&gt;&gt;&gt; lang_list = ['spanish','english','russian','persian']
&gt;&gt;&gt; rule_checker['any-but-and'](lang_list, ['english','chinese'])
True
&gt;&gt;&gt; rule_checker['any-but-or'](lang_list, ['english','chinese'])
False
</snippet></ROW><ROW><id>9229168</id><snippet>&gt;&gt;&gt; def check_rule(rule, o, p):
...     # o = original, p = pattern
...     if rule == 'any':
...         return True
...     elif rule == 'any-but-or':
...         return not bool(set(p)-set(o))
...     elif rule == 'any-but-and':
...         return len(set(p)-set(o)) != 0
... 
&gt;&gt;&gt; check_rule('any-but-and', lang_list, ['english','chinese'])
True
</snippet></ROW><ROW><id>9229950</id><snippet>sorted</snippet></ROW><ROW><id>9229950</id><snippet>list.sort()</snippet></ROW><ROW><id>9229950</id><snippet>sorted()</snippet></ROW><ROW><id>9229950</id><snippet>sort()</snippet></ROW><ROW><id>9229950</id><snippet>getDate</snippet></ROW><ROW><id>9230016</id><snippet>&gt;&gt;&gt; input = numpy.array(range(10))
&gt;&gt;&gt; data = numpy.zeros((2,2), dtype=numpy.ndarray)
&gt;&gt;&gt; data[1][1] = input
&gt;&gt;&gt; data
    array([[0, 0],
          [0, [0 1 2 3 4 5 6 7 8 9]]], dtype=object)
</snippet></ROW><ROW><id>9230033</id><snippet>res = numpy.empty_like(X) 
for i, A in enumerate(X):
    res[i] = numpy.linalg.inv(A)
</snippet></ROW><ROW><id>9230299</id><snippet>__reduce__()</snippet></ROW><ROW><id>9230299</id><snippet>ctypes.string_at(ctypes.addressof(hdr), ctypes.sizeof(hdr))
</snippet></ROW><ROW><id>9231171</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; print subprocess.Popen(['find', '.', '-iname', '*.sln'],
...     stdout=subprocess.PIPE, shell=False).communicate()[0]
</snippet></ROW><ROW><id>9231171</id><snippet>*.sln</snippet></ROW><ROW><id>9231171</id><snippet>shell</snippet></ROW><ROW><id>9231171</id><snippet>False</snippet></ROW><ROW><id>9231171</id><snippet>*.sln</snippet></ROW><ROW><id>9231171</id><snippet>find</snippet></ROW><ROW><id>9231171</id><snippet>&gt;&gt;&gt; print subprocess.Popen(['find . -iname "*.sln"'],
...     stdout=subprocess.PIPE, shell=True).communicate()[0]
</snippet></ROW><ROW><id>9231234</id><snippet>from sys import stdout
from time import sleep
for i in range(1,20):
    stdout.write("\r%d" % i)
    stdout.flush()
    sleep(1)
stdout.write("\r  \r\n") # clean up
</snippet></ROW><ROW><id>9231241</id><snippet>/etc/nova/api-paste.ini</snippet></ROW><ROW><id>9231241</id><snippet>noauth</snippet></ROW><ROW><id>9231241</id><snippet>ec2noauth</snippet></ROW><ROW><id>9231241</id><snippet>noauth</snippet></ROW><ROW><id>9231241</id><snippet>auth</snippet></ROW><ROW><id>9231456</id><snippet>list_of_lines</snippet></ROW><ROW><id>9231456</id><snippet>tuples = [('apples', 2, 'apple'), ('oranges', 3, 'orange')]
list_of_lines = list_of_lines = ['banana 1234', 'apple 5678', 'oranges 4321','apples 8765', 'orange 1111']
d = dict(l.split() for l in list_of_lines)
for t in tuples:
    print "'%s', %s, %s, '%s', %s" % (t[0], d[t[0]], t[1], t[2], d[t[2]])
</snippet></ROW><ROW><id>9231456</id><snippet>'apples', 8765, 2, 'apple', 5678
'oranges', 4321, 3, 'orange', 1111
</snippet></ROW><ROW><id>9231494</id><snippet>any()</snippet></ROW><ROW><id>9231494</id><snippet>str.endswith()</snippet></ROW><ROW><id>9231494</id><snippet>filename.endswith(('js','css','htm', 'html'))
</snippet></ROW><ROW><id>9231494</id><snippet>True</snippet></ROW><ROW><id>9231553</id><snippet>#!usr/bin/env python
import matplotlib.pyplot as plt
import numpy as np

x = np.arange(-180.0,190.0,10)
theta = (np.pi/180.0 )*x    # in radians

offset = 2.0

R1 = [-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\
-0.137,-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\
-0.137,-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\
-0.137,-0.358]

fig1 = plt.figure()
ax1 = fig1.add_axes([0.1,0.1,0.8,0.8],polar=True)
ax1.set_ylim(-2,2)
ax1.set_yticks(np.arange(-2,2,0.5))
ax1.plot(theta,R1,lw=2.5)
</snippet></ROW><ROW><id>9231603</id><snippet>.startswith()</snippet></ROW><ROW><id>9231603</id><snippet>&gt;&gt;&gt; HOSTS = ['backup-ros', 'backupa-files', 'print-server1','print-server2']
&gt;&gt;&gt; backups = [x for x in HOSTS if x.startswith('backup-')]
&gt;&gt;&gt; backups
['backup-ros']
</snippet></ROW><ROW><id>9231625</id><snippet>"""
this is a quick and dirty script to send HTML email - emphasis on dirty :)
python emailpage.py http://www.sente.cc
made to answer: http://stackoverflow.com/questions/9226719/sending-a-html-file-via-python
Stuart Powers
"""
import lxml.html
import smtplib
import sys
import os


page = sys.argv[1]  #the webpage to send

root = lxml.html.parse(page).getroot()
root.make_links_absolute()

content = lxml.html.tostring(root)

message = """From: Stuart Powers &lt;stuart.powers@gmail.com&gt;
To: Stuart Powers &lt;stuart.powers@gmail.com&gt;
MIME-Version: 1.0
Content-type: text/html
Subject: %s

%s""" %(page, content)


smtpserver = smtplib.SMTP("smtp.gmail.com",587)
smtpserver.starttls()
smtpserver.login("stuart.powers@gmail.com",os.environ["GPASS"])
smtpserver.sendmail('stuart.powers@gmail.com', ['stuart.powers@gmail.com'], message)
</snippet></ROW><ROW><id>9231698</id><snippet>lxml.etree.tostring</snippet></ROW><ROW><id>9231698</id><snippet>In [21]: r = lxml.objectify.fromstring('&lt;root&gt;&lt;item&gt;1&lt;/item&gt;&lt;item&gt;2&lt;/item&gt;&lt;/root&gt;')

In [22]: lxml.etree.tostring(r.item)
Out[22]: '&lt;item&gt;1&lt;/item&gt;'
</snippet></ROW><ROW><id>9231868</id><snippet>content</snippet></ROW><ROW><id>9231868</id><snippet>function onRequest(request, response) {
    request.content = "";
</snippet></ROW><ROW><id>9231868</id><snippet>data</snippet></ROW><ROW><id>9231868</id><snippet>request.content</snippet></ROW><ROW><id>9231868</id><snippet>"undefined"</snippet></ROW><ROW><id>9231868</id><snippet>request.content += chunk;</snippet></ROW><ROW><id>9231868</id><snippet>request.content += chunk;                    // is equivalent to
request.content = request.content + chunk;   // but request.content is undefined
request.content = undefined       + chunk;   // String concatenation, so
request.content = "undefined"     + chunk;   // &lt;-- This
// Example, chunk = '{}'  --&gt; request.content = "undefined{}"

// After this step, `request.content` is defined, and future calls to
//  request.content += chunk;   are plain string concatenations.
</snippet></ROW><ROW><id>9232147</id><snippet>__contains__</snippet></ROW><ROW><id>9232147</id><snippet>in</snippet></ROW><ROW><id>9232264</id><snippet>class BaseRequestHandler(webapp.RequestHandler):
    def __init__(self):
        self.user = None

    def setAuthUser(self):
        user = users.get_current_user()
        if not user:
            self.redirect(users.create_login_url(request.uri))
            return False
        self.user = user
        return True

class AnswerHandler(BaseRequestHandler):
    def get(self):
        if not self.setAuthUser():
            return
        answer = Answer.next_answer_by_user(self.user)
        self.write_template({"answer" : answer})
</snippet></ROW><ROW><id>9232264</id><snippet>class BaseRequestHandler(webapp.RequestHandler):
    def __init__(self):
        self.user = None

    def get(self):
        self.user = users.get_current_user()
        if not self.user:
          self.redirect(users.create_login_url(request.uri))
          return
        self.doGet()

    def doGet(self):
        raise Exception("doGet() needs to be implemented by a subclass.")

class AnswerHandler(BaseRequestHandler):
    def doGet(self):
        answer = Answer.next_answer_by_user(self.user)
        self.write_template({"answer" : answer})
</snippet></ROW><ROW><id>9232406</id><snippet>queue.task_done()</snippet></ROW><ROW><id>9232406</id><snippet>queue.join()</snippet></ROW><ROW><id>9232406</id><snippet>#!/usr/bin/env python
import socket
from Queue import Queue
from threading import Thread

def getips(queue):
    for site in iter(queue.get, None):
        try: # resolve hostname
            result = socket.gethostbyname_ex(site)
        except IOError, e:
            print("error %s reason: %s" % (site, e))
        else:
            print("done %s %s" % (site, result))

def main():
    websites = "youtube google non-existent.example facebook yahoo live".split()
    websites = [name+'.com' for name in websites]

    # Spawn thread pool
    queue = Queue()
    threads = [Thread(target=getips, args=(queue,)) for _ in range(20)]
    for t in threads:
        t.daemon = True
        t.start()

    # Place work in queue
    for site in websites: queue.put(site)
    # Put sentinel to signal the end
    for _ in threads: queue.put(None)
    # Wait for completion
    for t in threads: t.join()

main()
</snippet></ROW><ROW><id>9232406</id><snippet>gethostbyname_ex()</snippet></ROW><ROW><id>9232406</id><snippet>socket.getaddrinfo()</snippet></ROW><ROW><id>9232513</id><snippet>plt.axis("equal")</snippet></ROW><ROW><id>9232513</id><snippet>ax.axis("equal")</snippet></ROW><ROW><id>9232513</id><snippet>ax</snippet></ROW><ROW><id>9232513</id><snippet>Axes</snippet></ROW><ROW><id>9232513</id><snippet>Ellipse</snippet></ROW><ROW><id>9232513</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse, Circle


fig = plt.figure()
ax1 = fig.add_subplot(211)
# calculate asymmetry of x and y axes:
x0, y0 = ax1.transAxes.transform((0, 0)) # lower left in pixels
x1, y1 = ax1.transAxes.transform((1, 1)) # upper right in pixes
dx = x1 - x0
dy = y1 - y0
maxd = max(dx, dy)
width = .15 * maxd / dx
height = .15 * maxd / dy

# a circle you expect to be a circle, but it is not
ax1.add_artist(Circle((.5, .5), .15))
# an ellipse you expect to be an ellipse, but it's a circle
ax1.add_artist(Ellipse((.75, .75), width, height))
ax2 = fig.add_subplot(212)

ax2.axis('equal')
# a circle you expect to be a circle, and it is
ax2.add_artist(Circle((.5, .5), .15))
# an ellipse you expect to be an ellipse, and it is
ax2.add_artist(Ellipse((.75, .75), width, height))

fig.savefig('perfectCircle1.png')
</snippet></ROW><ROW><id>9232513</id><snippet>Axes</snippet></ROW><ROW><id>9232513</id><snippet># calculate dimensions of axes 1 in figure units
x0, y0, dx, dy = ax1.get_position().bounds
maxd = max(dx, dy)
width = 6 * maxd / dx
height = 6 * maxd / dy

fig.set_size_inches((width, height))

fig.savefig('perfectCircle2.png')
</snippet></ROW><ROW><id>9232513</id><snippet>axis("equal")</snippet></ROW><ROW><id>9232513</id><snippet>None</snippet></ROW><ROW><id>9233028</id><snippet>scipy.io.savemat</snippet></ROW><ROW><id>9233028</id><snippet>import scipy.io as io
import numpy as np

y1=np.array([1,2,3,4])
y2=np.array([10,20,30,40])
y3=np.array([100,200,300,400])

a={}
a['test1']=y1
a['test2']=y2
a['test3']=y3
io.savemat('temp',a)
b = io.loadmat('temp')

print b['test1']
print b['test2']
print b['test3']
</snippet></ROW><ROW><id>9233028</id><snippet>[[1]
 [2]
 [3]
 [4]]
[[10]
 [20]
 [30]
 [40]]
[[100]
 [200]
 [300]
 [400]]
</snippet></ROW><ROW><id>9233087</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; arrs = {'a': numpy.array([1,2]),
            'b': numpy.array([3,4]),
            'c': numpy.array([5,6])}
</snippet></ROW><ROW><id>9233087</id><snippet>&gt;&gt;&gt; numpy.savez('file.npz', **arrs)
</snippet></ROW><ROW><id>9233087</id><snippet>&gt;&gt;&gt; npzfile = numpy.load('file.npz')
&gt;&gt;&gt; npzfile
&lt;numpy.lib.npyio.NpzFile object at 0x1fa7610&gt;
&gt;&gt;&gt; npzfile['a']
array([1, 2])
&gt;&gt;&gt; npzfile['b']
array([3, 4])
&gt;&gt;&gt; npzfile['c']
array([5, 6])
</snippet></ROW><ROW><id>9233223</id><snippet>#ifdef __cplusplus
extern "C" {
#endif

//initspam goes here

#ifdef __cplusplus
}
#endif
</snippet></ROW><ROW><id>9233354</id><snippet>/*/*[local-name()='provider']</snippet></ROW><ROW><id>9233380</id><snippet>c = repeat(b, a)
</snippet></ROW><ROW><id>9234007</id><snippet>(gdb) define xxd
&gt;dump binary memory dump.bin $arg0 $arg0+$arg1
&gt;shell xxd dump.bin
&gt;end
(gdb) xxd &amp;j 10 
0000000: 0000 0000 0000 0000 0000 0000 4d8c a7f7  ............M...
0000010: ff7f 0000 0000 0000 0000 0000 c8d7 ffff  ................
0000020: ff7f 0000 0000 0000
</snippet></ROW><ROW><id>9234270</id><snippet>w</snippet></ROW><ROW><id>9234270</id><snippet>d</snippet></ROW><ROW><id>9234270</id><snippet>r'^uploadrawdata/(.+)/$'
</snippet></ROW><ROW><id>9234415</id><snippet>random_room(pot, chest, schest, ldoor, rdoor, fdoor)</snippet></ROW><ROW><id>9234415</id><snippet>pot, chest, schest, ldoor, rdoor, fdoor = random_room()</snippet></ROW><ROW><id>9234415</id><snippet>return</snippet></ROW><ROW><id>9234415</id><snippet>random_room</snippet></ROW><ROW><id>9234415</id><snippet> while loop &lt; 6:       
        rand = random.randint(0, 30)
        if rand  in range(1, 3, 1):
            chest += 1
            loop += 2
            return chest
</snippet></ROW><ROW><id>9234415</id><snippet>return chest</snippet></ROW><ROW><id>9234415</id><snippet>chest</snippet></ROW><ROW><id>9234415</id><snippet>pot</snippet></ROW><ROW><id>9234415</id><snippet>while</snippet></ROW><ROW><id>9234415</id><snippet>return pot, chest, schest, ldoor, rdoor, fdoor</snippet></ROW><ROW><id>9234415</id><snippet>random_room</snippet></ROW><ROW><id>9234415</id><snippet>room = 2
while room == 2:
</snippet></ROW><ROW><id>9234415</id><snippet>while</snippet></ROW><ROW><id>9234415</id><snippet>room</snippet></ROW><ROW><id>9234415</id><snippet>random_room</snippet></ROW><ROW><id>9234415</id><snippet>room = 0
while room &lt; 5: # Print five calls to random room
    pot, chest, schest, ldoor, rdoor, fdoor = random_room()
    # Code to print out values returned from random_room
    # ...
    room += 1
</snippet></ROW><ROW><id>9234460</id><snippet>python manage.py runserver 0.0.0.0:8000
</snippet></ROW><ROW><id>9234460</id><snippet>0.0.0.0</snippet></ROW><ROW><id>9234705</id><snippet>type</snippet></ROW><ROW><id>9234705</id><snippet>&gt;&gt;&gt; A = type('A', (object,), {'s': 'i am a member', 'double_s': lambda self: self.s * 2})
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a
&lt;__main__.A object at 0x01229F50&gt;
&gt;&gt;&gt; a.s
'i am a member'
&gt;&gt;&gt; a.double_s()
'i am a memberi am a member'
</snippet></ROW><ROW><id>9234917</id><snippet>goalFound = 0</snippet></ROW><ROW><id>9234917</id><snippet>def main():
        #... all previous lines used tabs
        #Repeat with next node in Frontier

    goalFound = 0
</snippet></ROW><ROW><id>9234981</id><snippet>In [1]: import datetime, time

In [2]: dt = datetime.datetime(2012, 2, 10, 15, 18, 15, 234567)

In [3]: seconds = time.mktime(dt.timetuple())

In [4]: seconds += (dt.microsecond/1000000.0)

In [5]: seconds
Out[5]: 1328908695.234567

In [6]: datetime.datetime.fromtimestamp(seconds)
Out[6]: datetime.datetime(2012, 2, 10, 15, 18, 15, 234567)
</snippet></ROW><ROW><id>9235137</id><snippet>&gt;&gt;&gt; s = 'a|b|more b|yet more b|c|d|e|f'
&gt;&gt;&gt; a, *b, c, d, e, f = s.split('|')
&gt;&gt;&gt; b = '|'.join(b)
&gt;&gt;&gt; 
&gt;&gt;&gt; a,b,c,d,e,f
('a', 'b|more b|yet more b', 'c', 'd', 'e', 'f')
</snippet></ROW><ROW><id>9235137</id><snippet>with open('somefile') as fp:
    for line in fp:
        a, *b, c, d, e, f = line.strip().split('|')
        b = '|'.join(b)
        # do something
</snippet></ROW><ROW><id>9235137</id><snippet>with open('somefile') as fp:
    for i, line in enumerate(fp):
        if i == some_number:
            a, *b, c, d, e, f = line.strip().split('|')
            b = '|'.join(b)
</snippet></ROW><ROW><id>9235137</id><snippet>def proc(filename, lineno):
    line = linecache.getline(filename, lineno)
    a, *b, c, d, e, f = line.strip().split('|')
    b = '|'.join(b)
    # do something
</snippet></ROW><ROW><id>9235244</id><snippet>/Users/bimemployee/Movies/ski_commute.m4v
</snippet></ROW><ROW><id>9235244</id><snippet>Users/bimemployee/Movies/ski_commute.m4v
</snippet></ROW><ROW><id>9235273</id><snippet>list_4 = [(list_3[list_2.index(item)] if item in list_2 else 0) for index,item in enumerate(list_1)]
</snippet></ROW><ROW><id>9235279</id><snippet>[^.]</snippet></ROW><ROW><id>9235279</id><snippet>.</snippet></ROW><ROW><id>9235279</id><snippet>.*</snippet></ROW><ROW><id>9235279</id><snippet>[^.]*</snippet></ROW><ROW><id>9235279</id><snippet>re.DOTALL</snippet></ROW><ROW><id>9235279</id><snippet>re.sub("&lt;start&gt;.*&lt;end&gt;", "foo", s, flags=re.DOTALL)
</snippet></ROW><ROW><id>9235649</id><snippet>close()</snippet></ROW><ROW><id>9235649</id><snippet>strace</snippet></ROW><ROW><id>9235777</id><snippet>foo</snippet></ROW><ROW><id>9235777</id><snippet>~</snippet></ROW><ROW><id>9235777</id><snippet>(phil@ute::~) touch foo
(phil@ute::~) virtualenv foo
" .... same output you saw ending with:"
OSError: [Errno 20] Not a directory: 'foo/lib'
</snippet></ROW><ROW><id>9235777</id><snippet>virtualenv not_so_foo</snippet></ROW><ROW><id>9235992</id><snippet>links=[dict(header='myfield', body=lambda row: row.myfield)]
</snippet></ROW><ROW><id>9236218</id><snippet>&gt;&gt;&gt; db_digest = u"'\x90\x017~1\xe0\xaf4\xf2\xec\xd5]:j\xef\xe6\x80\x88\x89\xfe\xf7\x99,c\xff\xb7\x06hXR\x99\xad\x91\x93lM:\xafT\xc9j\xec\xc3\xb7\xea[\x80\xe0e\xd6\\\xd8\x16'\xcb6\xc8\xaa\xdf\xc9 :\xff"
&gt;&gt;&gt; hash_digest = "'\x90\x017~1\xe0\xaf4\xf2\xec\xd5]:j\xef\xe6\x80\x88\x89\xfe\xf7\x99,c\xff\xb7\x06hXR\x99\xad\x91\x93lM:\xafT\xc9j\xec\xc3\xb7\xea[\x80\xe0e\xd6\\\xd8\x16'\xcb6\xc8\xaa\xdf\xc9 :\xff"
&gt;&gt;&gt; db_digest.encode('raw_unicode_escape')
"'\x90\x017~1\xe0\xaf4\xf2\xec\xd5]:j\xef\xe6\x80\x88\x89\xfe\xf7\x99,c\xff\xb7\x06hXR\x99\xad\x91\x93lM:\xafT\xc9j\xec\xc3\xb7\xea[\x80\xe0e\xd6\\\xd8\x16'\xcb6\xc8\xaa\xdf\xc9 :\xff"
&gt;&gt;&gt; db_digest.encode('raw_unicode_escape') == hash_digest
True
</snippet></ROW><ROW><id>9236236</id><snippet>print(s, end="", file=depend)
</snippet></ROW><ROW><id>9236236</id><snippet>print</snippet></ROW><ROW><id>9236236</id><snippet>depend.write(s)</snippet></ROW><ROW><id>9236236</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>9236311</id><snippet>O(n loglogn)</snippet></ROW><ROW><id>9236311</id><snippet>O(n^(3/2))</snippet></ROW><ROW><id>9236311</id><snippet>log log n</snippet></ROW><ROW><id>9236311</id><snippet>n = 2e6</snippet></ROW><ROW><id>9236391</id><snippet>executemany</snippet></ROW><ROW><id>9236391</id><snippet>c.executemany(
      """INSERT INTO breakfast (name, spam, eggs, sausage, price)
      VALUES (%s, %s, %s, %s, %s)""",
      [
      ("Spam and Sausage Lover's Plate", 5, 1, 8, 7.95 ),
      ("Not So Much Spam Plate", 3, 2, 0, 3.95 ),
      ("Don't Wany ANY SPAM! Plate", 0, 4, 3, 5.95 )
      ] )
</snippet></ROW><ROW><id>9236391</id><snippet>sql = "INSERT INTO isi_authors (article_id, name_first, name_last, email) VALUES (%s, %s, %s, %s)"
params = [(article.id, au.first_name, au.last_name, au.email) for au in article.authors]
cur.executemany(sql, params)
</snippet></ROW><ROW><id>9236391</id><snippet>executemany</snippet></ROW><ROW><id>9236426</id><snippet>class ActionNoYes(argparse.Action):
    def __init__(self, opt_name, dest, default=True, required=False, help=None):
        super(ActionNoYes, self).__init__(['--' + opt_name, '--no-' + opt_name], dest, nargs=0, const=None, default=default, required=required, help=help)
    def __call__(self, parser, namespace, values, option_string=None):
        if option_string.starts_with('--no-'):
            setattr(namespace, self.dest, False)
        else:
            setattr(namespace, self.dest, True)
</snippet></ROW><ROW><id>9236426</id><snippet>&gt;&gt;&gt; p = argparse.ArgumentParser()
&gt;&gt;&gt; p._add_action(ActionNoYes('foo', 'foo', help="Do (or do not) foo. (default do)"))
ActionNoYes(option_strings=['--foo', '--no-foo'], dest='foo', nargs=0, const=None, default=True, type=None, choices=None, help='Do (or do not) foo. (default do)', metavar=None)
&gt;&gt;&gt; p.parse_args(['--no-foo', '--foo', '--no-foo'])
Namespace(foo=False)
&gt;&gt;&gt; p.print_help()
usage: -c [-h] [--foo]

optional arguments:
  -h, --help       show this help message and exit
  --foo, --no-foo  Do (or do not) foo. (default do)
</snippet></ROW><ROW><id>9236426</id><snippet>_add_action</snippet></ROW><ROW><id>9236426</id><snippet>Action</snippet></ROW><ROW><id>9236426</id><snippet>--[no-]foo</snippet></ROW><ROW><id>9236426</id><snippet>Action</snippet></ROW><ROW><id>9236436</id><snippet>{2,32,33,55,13, ...}</snippet></ROW><ROW><id>9236436</id><snippet>Initialize max to 0
0 &lt; 2, so max = 2
2 &lt; 32, so max = 32
32 &lt; 33, so max = 33
33 &lt; 55, so max = 55
55 &gt; 13, so max = 55
...
return max
</snippet></ROW><ROW><id>9236641</id><snippet>class FibTree(object):
    def __init__(self, n):
        self.n = n
        if n &lt; 2:
            self.value = n
        else:
            self.left = FibTree(n - 1)
            self.right = FibTree(n - 2)
            self.value = self.left.value + self.right.value
</snippet></ROW><ROW><id>9236659</id><snippet>SITE_ID = 2</snippet></ROW><ROW><id>9236659</id><snippet>    TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    'C:/Projetos/templates/',
)
</snippet></ROW><ROW><id>9236684</id><snippet>$ php -a
Interactive shell

php &gt; echo hash('sha512', "hello\n");
e7c22b994c59d9cf2b48e549b1e24666636045930d3da7c1acb299d1c3b7f931f94aae41edda2c2b207a36e10f8bcb8d45223e54878f5b316e7ce3b6bc019629
</snippet></ROW><ROW><id>9236684</id><snippet>echo</snippet></ROW><ROW><id>9236684</id><snippet>echo -n</snippet></ROW><ROW><id>9236722</id><snippet>getSubject(record)</snippet></ROW><ROW><id>9236722</id><snippet>help(Formatter)</snippet></ROW><ROW><id>9236722</id><snippet>emit(record)</snippet></ROW><ROW><id>9236722</id><snippet>super(SMTPHandler,self).emit(record)</snippet></ROW><ROW><id>9236722</id><snippet>class MySMTPHandler(SMTPHandler):

    def getSubject(self, record):
        return "My Error Format from the record dict"

    def emit(self, record):
        #check for record in self.already_send or something
        if sendit:
           super(MySMTPHandler,self).emit(record)
</snippet></ROW><ROW><id>9236860</id><snippet>query = "SELECT * FROM `table` AS t WHERE t.`categoryID`={}".format(category_id)
if record_id:
    query += " AND t.`recordID`={}".format(record_id)
</snippet></ROW><ROW><id>9236860</id><snippet>cursor.execute("UPDATE Writers SET Name = %s WHERE Id = %s", ("Leo Tolstoy", "1"))    
</snippet></ROW><ROW><id>9236860</id><snippet>ps = db.prepare("SELECT * FROM information_schema.tables WHERE table_name = $1 LIMIT $2")
ps("tables", 1)
</snippet></ROW><ROW><id>9236970</id><snippet>numpy.concatenate([a,b])
</snippet></ROW><ROW><id>9236970</id><snippet>b</snippet></ROW><ROW><id>9237152</id><snippet>polymorphic_union</snippet></ROW><ROW><id>9237152</id><snippet>pjoin</snippet></ROW><ROW><id>9237152</id><snippet>AbstractConcreteBase</snippet></ROW><ROW><id>9237152</id><snippet>__delcare_last__</snippet></ROW><ROW><id>9237152</id><snippet>pjoin</snippet></ROW><ROW><id>9237152</id><snippet>polymorphic_union</snippet></ROW><ROW><id>9237152</id><snippet>after_configured</snippet></ROW><ROW><id>9237152</id><snippet>Entry</snippet></ROW><ROW><id>9237152</id><snippet>Post</snippet></ROW><ROW><id>9237152</id><snippet>Post</snippet></ROW><ROW><id>9237152</id><snippet>after_configured</snippet></ROW><ROW><id>9237152</id><snippet>__delcare_last__</snippet></ROW><ROW><id>9237152</id><snippet>pjoin</snippet></ROW><ROW><id>9237152</id><snippet>Entry</snippet></ROW><ROW><id>9237152</id><snippet>Post</snippet></ROW><ROW><id>9237152</id><snippet>Entry</snippet></ROW><ROW><id>9237152</id><snippet>__delcare_last__</snippet></ROW><ROW><id>9237152</id><snippet>Entry</snippet></ROW><ROW><id>9237152</id><snippet>class Post(db.Model):
    """An Post."""

    id = db.Column(db.Integer, primary_key=True, nullable=False)
    description = db.Column(db.Unicode(140), nullable=False)

    @classmethod
    def __declare_last__(cls):
        cls.entries = db.relationship(Entry, viewonly=True)

    def attach_entries(self, entries):
        """Attach Entries To This Post.

        Example:
            &gt;&gt;&gt; post = Post("An Interesting News", "Wow !!!")
            &gt;&gt;&gt; text_entry = TextEntry(*t_args)
            &gt;&gt;&gt; photo_entry = PhotoEntry(*p_args)
            &gt;&gt;&gt; post.attach_entries([text_entry, photo_entry])
            &gt;&gt;&gt; len(post.entries)
            2
            &gt;&gt;&gt; db.session.commit()
            &gt;&gt;&gt;
        """
        for entry in entries:
            self.entries.append(entry)
            entry.post = self
            db.session.add(entry)
</snippet></ROW><ROW><id>9237265</id><snippet>for line in f.read().split('\0'):
    print line
</snippet></ROW><ROW><id>9237265</id><snippet>def fileLineIter(inputFile,
                 inputNewline="\n",
                 outputNewline=None,
                 readSize=8192):
   """Like the normal file iter but you can set what string indicates newline.

   The newline string can be arbitrarily long; it need not be restricted to a
   single character. You can also set the read size and control whether or not
   the newline string is left on the end of the iterated lines.  Setting
   newline to '\0' is particularly good for use with an input file created with
   something like "os.popen('find -print0')".
   """
   if outputNewline is None: outputNewline = inputNewline
   partialLine = ''
   while True:
       charsJustRead = inputFile.read(readSize)
       if not charsJustRead: break
       partialLine += charsJustRead
       lines = partialLine.split(inputNewline)
       partialLine = lines.pop()
       for line in lines: yield line + outputNewline
   if partialLine: yield partialLine
</snippet></ROW><ROW><id>9237265</id><snippet>Dialect.lineterminator</snippet></ROW><ROW><id>9237429</id><snippet>str.upper()</snippet></ROW><ROW><id>9237429</id><snippet>str.title()</snippet></ROW><ROW><id>9237429</id><snippet>&gt;&gt;&gt; phrase = 'lexical semantics'
&gt;&gt;&gt; phrase.capitalize()
'Lexical semantics'
&gt;&gt;&gt; phrase.upper()
'LEXICAL SEMANTICS'
&gt;&gt;&gt; phrase.title()
'Lexical Semantics'
</snippet></ROW><ROW><id>9237429</id><snippet>&gt;&gt;&gt; phrase = ' lexical semantics'
&gt;&gt;&gt; phrase.strip().capitalize()
'Lexical semantics'
</snippet></ROW><ROW><id>9237600</id><snippet>import</snippet></ROW><ROW><id>9237600</id><snippet>python script.py &lt; 17.txt</snippet></ROW><ROW><id>9237600</id><snippet>import itertools

def has_monochromatic_rectangles(grid):
  # use range instead of xrange here (xrange is not in Python 3)
  points = list(itertools.product(range(len(grid)), range(len(grid[0]))))
  # check if for any rectangle, all 4 colors are equal
  # (this is more brute-force than necessary, but you placed simplicity
  # above efficiency. Also, for 17x17, it doesn't matter at all ;)
  return any(grid[x1][y1] == grid[x1][y2] == grid[x2][y1] == grid[x2][y2]
             for (x1,y1), (x2,y2) in itertools.product(points, points)
             if x1 != x2 and y1 != y2)

def has_max_colors(grid, most):
  # collect all grid values and uniquify them by creating a set
  return len(set(sum(grid, []))) &lt;= most

if __name__ == '__main__':
  # read from STDIN (could easily be adapted to read from file, URL, ...)
  import sys
  grid = [map(int, line.split(',')) for line in sys.stdin]

  assert has_max_colors(grid, 4)
  assert not has_monochromatic_rectangles(grid)
</snippet></ROW><ROW><id>9237787</id><snippet>import random

class Car:
    def __init__ (self, company, doors, id):
        self.company = company
        self.doors = doors
        self.id = id

    def printDoors(self, id):
        print 'Car ' + `self.id` + ' has ' + `self.doors` + ' doors.'

    def findSameDoors(self, id):
        for i in self.company.cars:
            if self.id != i.id and self.doors == i.doors:
                print 'Car ' + `i.id` + ' does too!'

class Company:
    def __init__ (self, types):
        self.types = types
        self.cars = []

    def typesToNum(self):
        result = []
        for i in self.types:
            if i == 'sedan':
                result.append(4)
            elif i == 'convertible':
                result.append(2)
            else:
                result.append(0)
        return result


porsche = Company(['sedan', 'convertible'])
honda = Company(['sedan', 'convertible', 'motorcycle'])

for i in range(10):
    porsche.cars.append(Car(porsche, random.choice(porsche.typesToNum()), i))

for i in range(10):
    honda.cars.append(Car(honda, random.choice(honda.typesToNum()), i))


porsche.cars[0].printDoors(0)
porsche.cars[0].findSameDoors(0)
</snippet></ROW><ROW><id>9238197</id><snippet>   &gt;&gt;&gt; class C(object):
...        pass
...
&gt;&gt;&gt; inspect.getmro(C)
(&lt;class '__main__.C'&gt;, &lt;type 'object'&gt;)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9238253</id><snippet>cp1252</snippet></ROW><ROW><id>9238253</id><snippet>codecs</snippet></ROW><ROW><id>9238253</id><snippet>import codecs
# ...
with codecs.open('complete', encoding='cp1252') as fin: # or utf-8 or whatever
  for line in fin:
    to_insert = (line.split('|')[1], line.split('|')[5])
    cur.execute('INSERT INTO magnets VALUES (?,?)', to_insert)
    conn.commit()
# ...
</snippet></ROW><ROW><id>9238362</id><snippet>globals()['clean']()
</snippet></ROW><ROW><id>9238565</id><snippet>import http.client

def chunk_data(data, chunk_size):
    dl = len(data)
    ret = ""
    for i in range(dl // chunk_size):
        ret += "%s\r\n" % (hex(chunk_size)[2:])
        ret += "%s\r\n\r\n" % (data[i * chunk_size : (i + 1) * chunk_size])

    if len(data) % chunk_size != 0:
        ret += "%s\r\n" % (hex(len(data) % chunk_size)[2:])
        ret += "%s\r\n" % (data[-(len(data) % chunk_size):])

    ret += "0\r\n\r\n"
    return ret


conn = http.client.HTTPConnection(host)
url = "/some_path"
conn.putrequest('POST', url)
conn.putheader('Transfer-Encoding', 'chunked')
conn.endheaders()
conn.send(chunk_data(body, size_per_chunk).encode('utf-8'))

resp = conn.getresponse()
print(resp.status, resp.reason)
conn.close()
</snippet></ROW><ROW><id>9238635</id><snippet>json.dumps()</snippet></ROW><ROW><id>9238635</id><snippet>indent</snippet></ROW><ROW><id>9238635</id><snippet>json.dumps(spam_and_eggs, indent=4)
</snippet></ROW><ROW><id>9238690</id><snippet>showError</snippet></ROW><ROW><id>9238690</id><snippet>dlg</snippet></ROW><ROW><id>9238690</id><snippet>show()</snippet></ROW><ROW><id>9238690</id><snippet>exec_()</snippet></ROW><ROW><id>9238722</id><snippet>wordlist</snippet></ROW><ROW><id>9238722</id><snippet>[]</snippet></ROW><ROW><id>9238722</id><snippet>{}</snippet></ROW><ROW><id>9238722</id><snippet>wordlist[0]</snippet></ROW><ROW><id>9238722</id><snippet>wordlist</snippet></ROW><ROW><id>9238722</id><snippet>wordlist = ['Candy', 'Monkey']
</snippet></ROW><ROW><id>9239299</id><snippet>x in some_dict(x)</snippet></ROW><ROW><id>9239299</id><snippet>(x)</snippet></ROW><ROW><id>9239299</id><snippet>some_count = sum(1 for x in some_list if x in whatever)</snippet></ROW><ROW><id>9239756</id><snippet>filedialog</snippet></ROW><ROW><id>9239756</id><snippet>filedialog</snippet></ROW><ROW><id>9239756</id><snippet>messagebox</snippet></ROW><ROW><id>9239756</id><snippet>from tkinter import *</snippet></ROW><ROW><id>9239756</id><snippet>&gt;&gt;&gt; from tkinter import *
&gt;&gt;&gt; filedialog
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
NameError: name 'filedialog' is not defined
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9239756</id><snippet>&gt;&gt;&gt; from tkinter import filedialog
&gt;&gt;&gt; filedialog
&lt;module 'tkinter.filedialog' from 'C:\Python32\lib\tkinter\filedialog.py'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9239756</id><snippet>&gt;&gt;&gt; import tkinter.filedialog as fdialog
</snippet></ROW><ROW><id>9239756</id><snippet>&gt;&gt;&gt; from tkinter.filedialog import askopenfilename
</snippet></ROW><ROW><id>9239756</id><snippet>from tkinter import *
from tkinter.filedialog import askopenfilename
from tkinter.messagebox import showerror

class MyFrame(Frame):
    def __init__(self):
        Frame.__init__(self)
        self.master.title("Example")
        self.master.rowconfigure(5, weight=1)
        self.master.columnconfigure(5, weight=1)
        self.grid(sticky=W+E+N+S)

        self.button = Button(self, text="Browse", command=self.load_file, width=10)
        self.button.grid(row=1, column=0, sticky=W)

    def load_file(self):
        fname = askopenfilename(filetypes=(("Template files", "*.tplate"),
                                           ("HTML files", "*.html;*.htm"),
                                           ("All files", "*.*") ))
        if fname:
            try:
                print("""here it comes: self.settings["template"].set(fname)""")
            except:                     # &lt;- naked except is a bad idea
                showerror("Open Source File", "Failed to read file\n'%s'" % fname)
            return


if __name__ == "__main__":
    MyFrame().mainloop()
</snippet></ROW><ROW><id>9239807</id><snippet>Tk.destroy()</snippet></ROW><ROW><id>9239807</id><snippet>Tk.quit()</snippet></ROW><ROW><id>9239807</id><snippet>from tkinter import * # &lt; Python3.x you will need Tkinter not tkinter.
from threading import Thread

def display(val1, val2):
    root =  Tk()
    clock = Label(root, font=('times', 20, 'bold'), bg='white')
    clock.pack(fill=BOTH, expand=0)
    def tick():
        time1 = val1 +'\n' + val2
        clock.config(text=time1)
    tick()
    root.after(3000, root.destroy)
    root.mainloop()

thread = Thread(target=display, args=("1", "2"))
thread.start()
</snippet></ROW><ROW><id>9239807</id><snippet>threading</snippet></ROW><ROW><id>9239807</id><snippet>from threading import Thread
...
thread = Thread(target=display, args=(val1, val2))
thread.start()
...
thread.join()
</snippet></ROW><ROW><id>9239807</id><snippet>multiprocessing</snippet></ROW><ROW><id>9239807</id><snippet>from multiprocessing import Process
...
process = Process(target=display, args=(val1, val2))
process.start()
...
process.join()
</snippet></ROW><ROW><id>9239807</id><snippet>threading</snippet></ROW><ROW><id>9239807</id><snippet>thread</snippet></ROW><ROW><id>9239807</id><snippet>multiprocessing</snippet></ROW><ROW><id>9239807</id><snippet>Process.terminate()</snippet></ROW><ROW><id>9239848</id><snippet>s = []
for p in range(0, total_byte_len, part_size_limit):
    last = min(total_byte_len - 1, p + part_size_limit - 1)
    s.append([p, last, last - p + 1])
</snippet></ROW><ROW><id>9240087</id><snippet>scipy.optimize</snippet></ROW><ROW><id>9240087</id><snippet>sc</snippet></ROW><ROW><id>9240087</id><snippet>sc.optimize.newton</snippet></ROW><ROW><id>9240087</id><snippet>scipy.optimize.optimize.newton</snippet></ROW><ROW><id>9240087</id><snippet>import scipy.optimize as opt
</snippet></ROW><ROW><id>9240087</id><snippet>import scipy.optimize as scopt
</snippet></ROW><ROW><id>9240424</id><snippet>/usr/lib/python2.7/dist-packages/scipy/ndimage/tests/test_io.py</snippet></ROW><ROW><id>9240424</id><snippet>def test_imread():
    lp = os.path.join(os.path.dirname(__file__), 'dots.png')
    img = ndi.imread(lp)
    assert_array_equal(img.shape, (300, 420, 3))

    img = ndi.imread(lp, flatten=True)
    assert_array_equal(img.shape, (300, 420))
</snippet></ROW><ROW><id>9240424</id><snippet>flatten=True</snippet></ROW><ROW><id>9240424</id><snippet>% file /usr/share/pyshared/scipy/ndimage/tests/dots.png
/usr/share/pyshared/scipy/ndimage/tests/dots.png: PNG image data, 420 x 300, 1-bit colormap, non-interlaced
</snippet></ROW><ROW><id>9240424</id><snippet>In [18]: z = ndi.imread('image.png')

In [20]: z.shape
Out[20]: (250, 250, 4)

In [24]: w = ndi.imread('image.png', flatten = True)

In [25]: w.shape
Out[25]: (250, 250)
</snippet></ROW><ROW><id>9240424</id><snippet>dots.png</snippet></ROW><ROW><id>9241115</id><snippet>def DelUser():

    # read the current files, and get one line per user/password
    with open('LogIn.txt',"r+") as fd:
        lines = fd.readlines()

    # ask the user which one he want to delete
    delete = raw_input("Input username to delete: ")

    # filter the lines without the line starting by the "user:"
    lines = [x for x in lines if not x.startswith('%s:' % delete)]

    # write the final file
    with open('LogIn.txt', 'w') as fd:
        fd.writelines(lines)
</snippet></ROW><ROW><id>9241179</id><snippet>bytes[0:2] == b'\xbe\xef'
</snippet></ROW><ROW><id>9241179</id><snippet>bytes</snippet></ROW><ROW><id>9241364</id><snippet>def to_short_hex(s):
    def shorten_match(match):
        hex_string = match.group(0)
        if hex_string[1::2]==hex_string[2::2]:
            return '#'+hex_string[1::2]
        return hex_string
    return re.sub(r"#[\da-fA-F]{6}\b", shorten_match, s)
</snippet></ROW><ROW><id>9241364</id><snippet>re.sub</snippet></ROW><ROW><id>9241392</id><snippet>split</snippet></ROW><ROW><id>9241392</id><snippet>&gt;&gt;&gt; names = 'Benjamin Franklin, Thomas Jefferson, Carl Sagan'
&gt;&gt;&gt; names.split(',')
['Benjamin Franklin', ' Thomas Jefferson', ' Carl Sagan']
</snippet></ROW><ROW><id>9241592</id><snippet>self.children</snippet></ROW><ROW><id>9241592</id><snippet>children</snippet></ROW><ROW><id>9241592</id><snippet>Container</snippet></ROW><ROW><id>9241592</id><snippet>children = []</snippet></ROW><ROW><id>9241592</id><snippet>__init__</snippet></ROW><ROW><id>9241592</id><snippet>class Container:
    tag = 'container'

    def __init__(self):
        self.children = []
[...]
</snippet></ROW><ROW><id>9241860</id><snippet>match_dates</snippet></ROW><ROW><id>9241860</id><snippet>None</snippet></ROW><ROW><id>9241860</id><snippet>False</snippet></ROW><ROW><id>9241860</id><snippet>if new_obj is not None:</snippet></ROW><ROW><id>9241860</id><snippet>__ne__</snippet></ROW><ROW><id>9241860</id><snippet>__nonzero__</snippet></ROW><ROW><id>9241860</id><snippet>for page in pages.find(timeout=False):</snippet></ROW><ROW><id>9241860</id><snippet>uu</snippet></ROW><ROW><id>9241860</id><snippet>fields=['uu']</snippet></ROW><ROW><id>9241860</id><snippet>find</snippet></ROW><ROW><id>9241860</id><snippet>archive_keep == None</snippet></ROW><ROW><id>9241860</id><snippet>archive_keep is None</snippet></ROW><ROW><id>9241860</id><snippet>archive_keep[attr]</snippet></ROW><ROW><id>9241860</id><snippet>keep_obj = archive_keep[attr]</snippet></ROW><ROW><id>9241860</id><snippet>keep_obj</snippet></ROW><ROW><id>9241860</id><snippet>ids_to_delete = []</snippet></ROW><ROW><id>9241860</id><snippet>ids_to_delete = set()</snippet></ROW><ROW><id>9241860</id><snippet>if archive['_id'] not in ids_to_delete:</snippet></ROW><ROW><id>9241863</id><snippet>itertools.chain()</snippet></ROW><ROW><id>9241863</id><snippet>import itertools
lst = [{'a': 1}, {'b': 2}, {'c': 3}] 
print ', '.join(itertools.chain(*lst))
</snippet></ROW><ROW><id>9241863</id><snippet>print ', '.join(set(itertools.chain(*lst)))
</snippet></ROW><ROW><id>9241891</id><snippet>AND</snippet></ROW><ROW><id>9241891</id><snippet>(...|...)</snippet></ROW><ROW><id>9241891</id><snippet>h</snippet></ROW><ROW><id>9241891</id><snippet>d</snippet></ROW><ROW><id>9241891</id><snippet>m</snippet></ROW><ROW><id>9241891</id><snippet>y</snippet></ROW><ROW><id>9241891</id><snippet>if (h &lt; 12)
    %dh = '(?:yesterday (?:1[2-9]|2[0-3])|today [0-9]{1,2})'
else
    %dh = '(?:tomorrow (?:[0-9]|1[0-1])|today [0-9]{1,2})'

if (d == 1)
    %m = '(?:lastmonth|thismonth)'
else if (d == 31 &amp;&amp; count of days in m == 31 ||
         d == 30 &amp;&amp; count of days in m == 30 ||
         m == 2 &amp;&amp; d == 28 ||
         m == 2 &amp;&amp; d == 29 &amp;&amp; y is leap year)
    %m = '(?:thismonth|nextmonth)'
else
    %m = 'thismonth'

if (m == 1)
    %y = '(lastyear|thisyear)'
else if (m == 12)
    %y = '(?:thisyear|nextyear)'
else
    %y = 'thisyear'
</snippet></ROW><ROW><id>9241891</id><snippet>yesterday</snippet></ROW><ROW><id>9241891</id><snippet>thisyear</snippet></ROW><ROW><id>9241891</id><snippet>%y-%m-%dh</snippet></ROW><ROW><id>9241891</id><snippet>%y</snippet></ROW><ROW><id>9241891</id><snippet>%m</snippet></ROW><ROW><id>9241891</id><snippet>%dh</snippet></ROW><ROW><id>9241891</id><snippet>O(n)</snippet></ROW><ROW><id>9241891</id><snippet>O(nlogn)</snippet></ROW><ROW><id>9241895</id><snippet>a</snippet></ROW><ROW><id>9241895</id><snippet>calculate_average_expenditure(...)</snippet></ROW><ROW><id>9241895</id><snippet>...</snippet></ROW><ROW><id>9242133</id><snippet>contextlib.nested</snippet></ROW><ROW><id>9242133</id><snippet>__init__</snippet></ROW><ROW><id>9242133</id><snippet>__new__</snippet></ROW><ROW><id>9242133</id><snippet>__exit__</snippet></ROW><ROW><id>9242133</id><snippet>True</snippet></ROW><ROW><id>9242133</id><snippet>__exit__</snippet></ROW><ROW><id>9242133</id><snippet>nested</snippet></ROW><ROW><id>9242133</id><snippet>RuntimeError</snippet></ROW><ROW><id>9242133</id><snippet>nested</snippet></ROW><ROW><id>9242133</id><snippet>*</snippet></ROW><ROW><id>9242133</id><snippet>nested</snippet></ROW><ROW><id>9242133</id><snippet>nested</snippet></ROW><ROW><id>9242133</id><snippet>with</snippet></ROW><ROW><id>9242133</id><snippet>iter_nested</snippet></ROW><ROW><id>9242133</id><snippet>def contexts():
    yield MyContext1()
    yield MyContext2()

with iter_nested(contexts()) as contexts:
    do_stuff(contexts[0])
    do_other_stuff(contexts[1])
</snippet></ROW><ROW><id>9242133</id><snippet>nested</snippet></ROW><ROW><id>9242133</id><snippet>from contextlib import contextmanager

@contextmanager
--- def nested(*managers):
+++ def iter_nested(mgr_iterator):
    --- #comments &amp; deprecation warning
    exits = []
    vars = []
    --- exc = (None, None, None)
    +++ exc = None # Python 3
    try:
        --- for mgr in managers:
        +++ for mgr in mgr_iterator:
            exit = mgr.__exit__
            enter = mgr.__enter__
            vars.append(enter())
            exits.append(exit)
        yield vars
# All of the following is new and fit for Python 3
except Exception as exception:
    exc = exception
    exc_tuple = (type(exc), exc, exc.__traceback__)
else:
    exc_tuple = (None, None, None)
finally:
    while exits:
        exit = exits.pop()
        try:
            if exit(*exc_tuple):
                exc = None
                exc_tuple = (None, None, None)
        except Exception as exception:
            exception.__context__ = exc
            exc = exception
            exc_tuple = (type(exc), exc, exc.__traceback__)
    if exc:
        raise exc
</snippet></ROW><ROW><id>9242202</id><snippet>fred</snippet></ROW><ROW><id>9242202</id><snippet>setattr</snippet></ROW><ROW><id>9242202</id><snippet>d[stringRESULTS].b = b
</snippet></ROW><ROW><id>9242202</id><snippet>d[stringRESULTS]["b"] = b
</snippet></ROW><ROW><id>9242317</id><snippet>static Action&lt;T[]&gt; ToArrayMethod&lt;T&gt;(Action&lt;T, T, T&gt; original)
{
    return array =&gt; original(array[0], array[1], array[2]);
}
</snippet></ROW><ROW><id>9242317</id><snippet>string[] array = {"b", "a", "r"};

var arrayFoo = ToArrayMethod(foo);

arrayFoo(array);
</snippet></ROW><ROW><id>9242317</id><snippet>void</snippet></ROW><ROW><id>9242317</id><snippet>ToArrayMethod()</snippet></ROW><ROW><id>9242317</id><snippet>var foo = typeof(SomeType)
    .GetMethod("foo", BindingFlags.Instance | BindingFlags.NonPublic);

object[] array = {"b", "a", "r"};

foo.Invoke(somTypeInstance, array);
</snippet></ROW><ROW><id>9242656</id><snippet>PyObject* os = PyImport_ImportModuleNoBlock("os");
if (os == NULL)
  return NULL;
someattr = PyObject_GetAttrString(os, "someattr");
Py_DECREF(os);
</snippet></ROW><ROW><id>9242656</id><snippet>init_yourmodule()</snippet></ROW><ROW><id>9242656</id><snippet>PyImport_ImportModule("os")</snippet></ROW><ROW><id>9242695</id><snippet>[dt, val for dt, val in zip(date2num(r['dt'], r['val'])) if '2000-01-01' &lt; r['dt'] &lt; '2000-03-01']
</snippet></ROW><ROW><id>9242723</id><snippet>heapq</snippet></ROW><ROW><id>9242723</id><snippet>top = []

with open('numbers.txt') as f:

    # the first ten numbers are going directly in
    for line in f:
        top.add(int(line.strip()))
        if len(top) == 10:
            break

    for line in f:
        num = int(line.strip())
        min_top = min(top)
        if num &gt; min_top:    # check if the new number is a top one
            top.remove(min_top)
            top.append(num)

print(sorted(top))
</snippet></ROW><ROW><id>9242723</id><snippet>sorted_top = []
while top:
    max_top = max(top)
    sorted_top.append(max_top)
    top.remove(max_top)
</snippet></ROW><ROW><id>9242850</id><snippet>   def _goto(self, end):
        """Move the pen to the point end, thereby drawing a line
        if pen is down. All other methodes for turtle movement depend
        on this one.

[...]

    ######    vererbung!!!!!!!!!!!!!!!!!!!!!!
    self._position = end
    if self._creatingPoly:
        self._poly.append(end)
    if len(self.currentLine) &gt; 42: # 42! answer to the ultimate question
                                   # of life, the universe and everything
        self._newLine()
    self._update() #count=True)
</snippet></ROW><ROW><id>9242850</id><snippet>def _newLine(self, usePos=True):
    """Closes current line item and starts a new one.                                              
       Remark: if current line became too long, animation                                          
       performance (via _drawline) slowed down considerably.                                       
    """
</snippet></ROW><ROW><id>9242858</id><snippet>&gt;&gt;&gt; tmp = sorted(zip(xVars, yVars),key=lambda x: x[1])
&gt;&gt;&gt; xVars = [x[0] for x in tmp]
&gt;&gt;&gt; yVars = [x[1] for x in tmp]
&gt;&gt;&gt; xVars
[3, 4, 5, 2, 1]
&gt;&gt;&gt; yVars
[1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>9242870</id><snippet>import itertools
import collections

def borda(ballot):
    n = len([c for c in ballot if c.isalpha()]) - 1
    score = itertools.count(n, step = -1)
    result = {}
    for group in [item.split('=') for item in ballot.split('&gt;')]:
        s = sum(next(score) for item in group)/float(len(group))
        for pref in group:
            result[pref] = s
    return result

def tally(ballots):
    result = collections.defaultdict(int)
    for ballot in ballots:
        for pref,score in borda(ballot).iteritems():
            result[pref]+=score
    result = dict(result)
    return result

ballots = ['A&gt;B&gt;C&gt;D&gt;E',
           'A&gt;B&gt;C=D=E',
           'A&gt;B=C&gt;D&gt;E', 
           ]

print(tally(ballots))
</snippet></ROW><ROW><id>9242870</id><snippet>{'A': 12.0, 'C': 5.5, 'B': 8.5, 'E': 1.0, 'D': 3.0}
</snippet></ROW><ROW><id>9242899</id><snippet>def my_input(prompt):
    #.. blah blah..
    return the_value

month = my_input("Please enter the month")
# etc.
</snippet></ROW><ROW><id>9243063</id><snippet>$("#caltag").attr('action'), 
</snippet></ROW><ROW><id>9243063</id><snippet>var values = $("#caltag").serializeArray();</snippet></ROW><ROW><id>9243063</id><snippet>console.log(values);</snippet></ROW><ROW><id>9243063</id><snippet>#datepicker</snippet></ROW><ROW><id>9243063</id><snippet>var values = { 'date':  $("#datepicker").val() };</snippet></ROW><ROW><id>9243101</id><snippet>x</snippet></ROW><ROW><id>9243101</id><snippet>True</snippet></ROW><ROW><id>9243101</id><snippet>   0  1  2  3  4  5  6  7
0  x     x        x 
1     x
2                       x
3              x
4
5
6        x        x
7
</snippet></ROW><ROW><id>9243101</id><snippet>rows = {0: [0, 2, 5], 1: [1], 2: [7], 3: [4], 6: [2, 5]}
</snippet></ROW><ROW><id>9243101</id><snippet>columns = {0: [0], 1: [1], 2: [0, 6], 4: [3], 5: [0, 6], 7: [2]}
</snippet></ROW><ROW><id>9243101</id><snippet>columns = {}
for row in rows:
    for column in rows[row]:
        columns.setdefault(column, []).append(row)
</snippet></ROW><ROW><id>9243101</id><snippet>sum(1 for x in column[2])</snippet></ROW><ROW><id>9243111</id><snippet>C:\Python27</snippet></ROW><ROW><id>9243111</id><snippet>C:\Program Files\ZF\bin</snippet></ROW><ROW><id>9243112</id><snippet>312 / 130 x 350 + 122 + 282   =&gt; (/, [312, 130]), (x, [350]), (+, [122, 282])
</snippet></ROW><ROW><id>9243112</id><snippet>-</snippet></ROW><ROW><id>9243112</id><snippet>+</snippet></ROW><ROW><id>9243112</id><snippet>/</snippet></ROW><ROW><id>9243112</id><snippet>*</snippet></ROW><ROW><id>9243112</id><snippet>+</snippet></ROW><ROW><id>9243112</id><snippet>*</snippet></ROW><ROW><id>9243112</id><snippet>+</snippet></ROW><ROW><id>9243112</id><snippet>*</snippet></ROW><ROW><id>9243112</id><snippet>/</snippet></ROW><ROW><id>9243112</id><snippet>-</snippet></ROW><ROW><id>9243112</id><snippet>+</snippet></ROW><ROW><id>9243112</id><snippet>+</snippet></ROW><ROW><id>9243112</id><snippet>-</snippet></ROW><ROW><id>9243112</id><snippet>import operator
import fractions
from itertools import permutations, product, count
from functools import reduce

vectors = [[87, 125, 209, 312],
           [29, 122, 254, 372],
           [15, 130, 277, 369],
           [142, 197, 282, 383],
           [64, 157, 256, 350]]
vectors = [[fractions.Fraction(x) for x in v] for v in vectors]

operators = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.div,
    }

def create_groupings(n, exclude = ()):
  if n &lt;= 0: yield ()
  for i in range(1, n+1):
    if not '+' in exclude:
      for rest in create_groupings(n - i, ('+',)):
        yield ((i, '+'),) + rest
    if not '-' in exclude:
      for rest in create_groupings(n - i, ('+', '-')):
        yield ((i, '-'),) + rest
    if not '*' in exclude:
      for rest in create_groupings(n - i, ('*',)):
        yield ((i, '*'),) + rest
    if not '/' in exclude:
      for rest in create_groupings(n - i, ('/', '*')):
        yield ((i, '/'),) + rest

def fill_grouping(groups, vectors):
  if len(groups) == 0:
    yield ()
    return

  (group_size, op), grest = groups[0], groups[1:]
  for vv in permutations(vectors):
    vecs, vrest = vectors[:group_size], vectors[group_size:]
    for operands in map(list, product(*vecs)):
      # enforce ascending ordering to avoid collisions
      # like A + B == B + A
      if operands != sorted(operands): continue
      for rest in fill_grouping(grest, vrest):
        yield ((op, operands),) + rest

groupings = create_groupings(5)
for g in groupings:
  for groups in fill_grouping(g, vectors):
    evaluated = ((op, reduce(operators[op], x)) for (op, x) in groups)
    _, value = reduce(lambda (_, x), (op, y): (None, operators[op](x,y)), evaluated)
    if 1000 == value:
      print groups
</snippet></ROW><ROW><id>9243142</id><snippet>python3</snippet></ROW><ROW><id>9243142</id><snippet>python</snippet></ROW><ROW><id>9243142</id><snippet>python</snippet></ROW><ROW><id>9243142</id><snippet>python2</snippet></ROW><ROW><id>9243142</id><snippet>with open('poem.txt', mode='r') as pfile:
    for line in pfile:
        print(line, end='')
</snippet></ROW><ROW><id>9243505</id><snippet>__init.py__</snippet></ROW><ROW><id>9243505</id><snippet>__init__.py</snippet></ROW><ROW><id>9243505</id><snippet>__init.py__</snippet></ROW><ROW><id>9243634</id><snippet>'Icon: %s' % venue.get('category', {}).get('icon', 'No Icon')
</snippet></ROW><ROW><id>9243634</id><snippet>'Icon: %s' % (venue['category'].get('icon', 'No Icon') if 'category' in venue else 'No Icon')
</snippet></ROW><ROW><id>9243634</id><snippet>'category'</snippet></ROW><ROW><id>9243755</id><snippet>pass</snippet></ROW><ROW><id>9244003</id><snippet>list.sort()</snippet></ROW><ROW><id>9244003</id><snippet>sorted()</snippet></ROW><ROW><id>9244003</id><snippet>key</snippet></ROW><ROW><id>9244003</id><snippet>structure</snippet></ROW><ROW><id>9244003</id><snippet>&gt;&gt;&gt; def keyfunc(k):
...     return structure[k]['sorting']
...
&gt;&gt;&gt; sorted(structure, key=keyfunc)
['baguettes', 'pizza', 'burger']
</snippet></ROW><ROW><id>9244047</id><snippet>tab</snippet></ROW><ROW><id>9244047</id><snippet>.</snippet></ROW><ROW><id>9244047</id><snippet>tab try:
....tab urllib2.urlopen(i, timeout = 1)
</snippet></ROW><ROW><id>9244047</id><snippet>\t</snippet></ROW><ROW><id>9244105</id><snippet># Start all the processes.
processes = []
for i in range(100):
    p = subprocess.Popen(['convert', '-background', 'black', '-fill', 'white', '-font', 'arial', '-size', '50x50', '-encoding', 'utf8', '-gravity', 'center', 'caption:"just stole your focus"', 'C:/testFile.png'])
    processes.append(p)

# Wait for all the processes to finish.
for p in processes:
    p.wait()
</snippet></ROW><ROW><id>9244230</id><snippet>.run()</snippet></ROW><ROW><id>9244230</id><snippet>while True:
    job = q.get()
    # ...
</snippet></ROW><ROW><id>9244268</id><snippet>for c in range(s / x + 1):  
</snippet></ROW><ROW><id>9244268</id><snippet>max_value = int(abs((target_sum * max_percent)/x))
for c in range(max_value + 1):
</snippet></ROW><ROW><id>9244268</id><snippet>for s in range(target_sum + 1):
</snippet></ROW><ROW><id>9244268</id><snippet>R=200 # Maximum size of any partial sum
for s in range(-R,R+1):
</snippet></ROW><ROW><id>9244268</id><snippet>from collections import defaultdict

data = [-2,10,5,50,20,25,40]

target_sum = 100
# T[x, i] is True if 'x' can be solved
# by a linear combination of data[:i+1]
T = defaultdict(bool)           # all values are False by default
T[0, 0] = True                # base case

R=200 # Maximum size of any partial sum
max_percent=0.8 # Maximum weight of any term

for i, x in enumerate(data):    # i is index, x is data[i]
    for s in range(-R,R+1): #set the range of one higher than sum to include sum itself
        max_value = int(abs((target_sum * max_percent)/x))
        for c in range(max_value + 1):  
            if T[s - c * x, i]:
                T[s, i+1] = True

coeff = [0]*len(data)
def RecursivelyListAllThatWork(k, sum): # Using last k variables, make sum
    # /* Base case: If we've assigned all the variables correctly, list this
    # * solution.
    # */
    if k == 0:
        # print what we have so far
        print(' + '.join("%2s*%s" % t for t in zip(coeff, data)))
        return
    x_k = data[k-1]
    # /* Recursive step: Try all coefficients, but only if they work. */
    max_value = int(abs((target_sum * max_percent)/x_k))
    for c in range(max_value + 1):
       if T[sum - c * x_k, k - 1]:
           # mark the coefficient of x_k to be c
           coeff[k-1] = c
           RecursivelyListAllThatWork(k - 1, sum - c * x_k)
           # unmark the coefficient of x_k
           coeff[k-1] = 0

RecursivelyListAllThatWork(len(data), target_sum)
</snippet></ROW><ROW><id>9244614</id><snippet>objectsToBeDeleted = request.POST['imagesToBeRemoved']
</snippet></ROW><ROW><id>9244614</id><snippet>objectsToBeDeleted = request.POST.getlist('imagesToBeRemoved')
</snippet></ROW><ROW><id>9244646</id><snippet>%</snippet></ROW><ROW><id>9244646</id><snippet>LIKE</snippet></ROW><ROW><id>9244646</id><snippet>execute</snippet></ROW><ROW><id>9244646</id><snippet>query = '%%%s%%' % (get_query(),)
cursor.execute("""
    SELECT *
      FROM users
     WHERE full_name LIKE ?
        OR email LIKE ?;""", (query, query))
</snippet></ROW><ROW><id>9244791</id><snippet>ordered = [item for item in ordered if item in unordered]
</snippet></ROW><ROW><id>9244791</id><snippet>unordered = set(unordered)
</snippet></ROW><ROW><id>9244895</id><snippet>data.decode('utf8') # where data is what you get from ur.read()
</snippet></ROW><ROW><id>9244895</id><snippet>print repr(data[offset-10:offset+60])</snippet></ROW><ROW><id>9244895</id><snippet>cp1252</snippet></ROW><ROW><id>9244895</id><snippet>&gt;&gt;&gt; guff = "\xEA\x76\x65\x73"
&gt;&gt;&gt; from unicodedata import name
&gt;&gt;&gt; [name(c) for c in guff.decode('1252')]
['LATIN SMALL LETTER E WITH CIRCUMFLEX', 'LATIN SMALL LETTER V', 'LATIN SMALL LE
TTER E', 'LATIN SMALL LETTER S']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9244895</id><snippet>ves</snippet></ROW><ROW><id>9244895</id><snippet>ves</snippet></ROW><ROW><id>9244895</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</snippet></ROW><ROW><id>9244895</id><snippet>data</snippet></ROW><ROW><id>9244895</id><snippet>lxml</snippet></ROW><ROW><id>9244895</id><snippet>data = data.replace('encoding="UTF-8"', 'encoding="iso-8859-1"')
</snippet></ROW><ROW><id>9244895</id><snippet>cp1252</snippet></ROW><ROW><id>9244925</id><snippet>&gt;&gt;&gt; gender= "male"
&gt;&gt;&gt; print "At least, that's what %s told me." %("he" if gender == "male" else "she")
At least, that's what he told me.
</snippet></ROW><ROW><id>9244925</id><snippet>&gt;&gt;&gt; s = "At least, that's what {pronoun} told me.".format(pronoun="he" if gender == "male" else "she")
&gt;&gt;&gt; s
"At least, that's what he told me."
</snippet></ROW><ROW><id>9245079</id><snippet>except</snippet></ROW><ROW><id>9245079</id><snippet>try:
    answers = dns.resolver.query(args.host)
except dns.resolver.NXDOMAIN:
    print "No such domain %s" % args.host
except dns.resolver.Timeout:
    print "Timed out while resolving %s" % args.host
except dns.exception.DNSException:
    print "Unhandled exception"
</snippet></ROW><ROW><id>9245218</id><snippet>for i in xrange(10000000):
    data = np.load('tmp.npz')
    del data.f
    data.close()  # avoid the "too many files are open" error
</snippet></ROW><ROW><id>9245218</id><snippet>import numpy as np
import gc
# here come the overflow:
for i in xrange(10000):
    data = np.load('tmp.npz')
    data.close()  # avoid the "too many files are open" error

d = dict()
for o in gc.get_objects():
    name = type(o).__name__
    if name not in d:
        d[name] = 1
    else:
        d[name] += 1

items = d.items()
items.sort(key=lambda x:x[1])
for key, value in items:
    print key, value
</snippet></ROW><ROW><id>9245218</id><snippet>...
wrapper_descriptor 1382
function 2330
tuple 9117
BagObj 10000
NpzFile 10000
list 20288
dict 21001
</snippet></ROW><ROW><id>9245218</id><snippet>class NpzFile(object):
    def __init__(self, fid, own_fid=False):
        ...
        self.zip = _zip
        self.f = BagObj(self)
        if own_fid:
            self.fid = fid
        else:
            self.fid = None

    def close(self):
        """
        Close the file.

        """
        if self.zip is not None:
            self.zip.close()
            self.zip = None
        if self.fid is not None:
            self.fid.close()
            self.fid = None

    def __del__(self):
        self.close()

class BagObj(object):
    def __init__(self, obj):
        self._obj = obj
    def __getattribute__(self, key):
        try:
            return object.__getattribute__(self, '_obj')[key]
        except KeyError:
            raise AttributeError, key
</snippet></ROW><ROW><id>9245305</id><snippet>crt</snippet></ROW><ROW><id>9245305</id><snippet>key</snippet></ROW><ROW><id>9245305</id><snippet>crt</snippet></ROW><ROW><id>9245305</id><snippet>csr</snippet></ROW><ROW><id>9245305</id><snippet>key</snippet></ROW><ROW><id>9245305</id><snippet>CN</snippet></ROW><ROW><id>9245305</id><snippet>bob</snippet></ROW><ROW><id>9245305</id><snippet>bob.crt</snippet></ROW><ROW><id>9245305</id><snippet>CN</snippet></ROW><ROW><id>9245443</id><snippet>Topic :: Text Processing :: Markup :: HTML
Topic :: Text Processing :: Markup :: XML 
</snippet></ROW><ROW><id>9245443</id><snippet>Programming Language :: Python :: 2</snippet></ROW><ROW><id>9245475</id><snippet>np.median</snippet></ROW><ROW><id>9245475</id><snippet>import numpy as np
a = np.random.rand(100,100)
b = np.random.rand(100,100)
c = np.random.rand(100,100)
d = np.dstack((a,b,c))
result = np.median(d,axis=2)
</snippet></ROW><ROW><id>9245567</id><snippet>str.isalpha()</snippet></ROW><ROW><id>9245567</id><snippet>&gt;&gt;&gt; 'KöLN'.isalpha()
False
&gt;&gt;&gt; 'K\xc3\xb6LN'.isalpha()
False
&gt;&gt;&gt; 'Cologne'.isalpha()
True
</snippet></ROW><ROW><id>9245567</id><snippet>&gt;&gt;&gt; [word for word in ('KöLN', 'K\xc3\xb6LN', 'Cologne') if word.isalpha()]
['Cologne']
</snippet></ROW><ROW><id>9245676</id><snippet>grupoHandler = GruposHandler
</snippet></ROW><ROW><id>9245676</id><snippet>grupoHandler = GruposHandler()
</snippet></ROW><ROW><id>9245676</id><snippet>GruposHandler.obtenerPagina()</snippet></ROW><ROW><id>9245676</id><snippet>self</snippet></ROW><ROW><id>9245676</id><snippet>pOpcion=None</snippet></ROW><ROW><id>9245676</id><snippet>pMensajeInformacion=None</snippet></ROW><ROW><id>9245676</id><snippet>TypeError: ... takes exactly 3 arguments (2 given)
</snippet></ROW><ROW><id>9245676</id><snippet>GruposHandler.obtenerPagina("gruposMios", 'Informacion: ...')
</snippet></ROW><ROW><id>9245676</id><snippet>GruposHandler.obtenerPagina()</snippet></ROW><ROW><id>9245676</id><snippet>self="gruposMios", pOpcion='Informacion: ...', pMensajeInformacion=None
</snippet></ROW><ROW><id>9245676</id><snippet>TypeError: ... must be called with instance (got str instance instead)
</snippet></ROW><ROW><id>9245676</id><snippet>GruposHandler().obtenerPagina("gruposMios", 'Informacion: ...')
</snippet></ROW><ROW><id>9245676</id><snippet>self</snippet></ROW><ROW><id>9245676</id><snippet>obtenerPagina</snippet></ROW><ROW><id>9245911</id><snippet>lst = [1,2,3,10]
dictionary = {}
def test(x):
    for xx in range(100):
        for xxx in range(100):
            dictionary[x]=xx*xxx

for x in lst:
    test(x) 
</snippet></ROW><ROW><id>9245911</id><snippet>NameError</snippet></ROW><ROW><id>9245953</id><snippet>id</snippet></ROW><ROW><id>9246096</id><snippet>import time
import sys

def delay_print(s):
    for c in s:
        sys.stdout.write( '%s' % c )
        sys.stdout.flush()
        time.sleep(0.25)

delay_print("hello world")
</snippet></ROW><ROW><id>9246179</id><snippet>#test.py
import lxml.html

# get the raw HTML
fruitsWebsite = lxml.html.parse('test.html')

# get all divs with class fruit 
fruits = fruitsWebsite.xpath('//div[@class="fruit"]')

# Print the name of this fruit (obtained from an &lt;em&gt; in the fruit div)
for fruit in fruits:
    #Use a relative path so we don't find ALL of the li/em elements several times. Note the .//
    for item in fruit.xpath('.//li[@class="fruit"]/em'):
        print(item.text)


#Alternatively
for item in fruit.xpath('//div[@class="fruit"]//li[@class="fruit"]/em'):
    print(item.text)
</snippet></ROW><ROW><id>9246179</id><snippet>&lt;html&gt;
&lt;body&gt;
Blah blah
&lt;div&gt;Ignore me&lt;/div&gt;
&lt;div&gt;Outer stuff
    &lt;div class='fruit'&gt;Some &lt;em&gt;FRUITY&lt;/em&gt; stuff.
    &lt;ol&gt;
        &lt;li class='fruit'&gt;&lt;em&gt;This&lt;/em&gt; should show&lt;/li&gt;
        &lt;li&gt;&lt;em&gt;Super&lt;/em&gt; Ignored LI&lt;/li&gt;
        &lt;li class='fruit'&gt;&lt;em&gt;Rawr&lt;/em&gt; Hear it roar.&lt;/li&gt;
    &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class='fruit'&gt;&lt;em&gt;Super&lt;/em&gt; fruity website of awesome&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9246218</id><snippet>with</snippet></ROW><ROW><id>9246218</id><snippet>__future__</snippet></ROW><ROW><id>9246290</id><snippet>root.mainloop()</snippet></ROW><ROW><id>9246314</id><snippet>operator</snippet></ROW><ROW><id>9246314</id><snippet>operator = OneOrMore(Word(alphas) + ~FollowedBy(StringEnd()))
</snippet></ROW><ROW><id>9246314</id><snippet>Word(nums) | Word(hexnums)</snippet></ROW><ROW><id>9246314</id><snippet>Word(hexnums)</snippet></ROW><ROW><id>9246314</id><snippet>'</snippet></ROW><ROW><id>9246314</id><snippet>"</snippet></ROW><ROW><id>9246314</id><snippet>value = singleValue ^ listValue</snippet></ROW><ROW><id>9246314</id><snippet>clause = fieldname("fieldname") + originalTextFor(operator)("operator") + value("value")</snippet></ROW><ROW><id>9246314</id><snippet>queryParts = clause.parseString('author is william')</snippet></ROW><ROW><id>9246314</id><snippet>print queryParts.fieldname</snippet></ROW><ROW><id>9246314</id><snippet>print queryParts.operator</snippet></ROW><ROW><id>9246358</id><snippet>XMAX = 800
YMAX = 570

NEIGHBOURS = [(-1, -1), (0, -1), (1, -1), (-1, 0), (1, 0), (-1, 1), (0, 1), (1, 1)]

matrix = range(XMAX * YMAX)

def all_neighbours(m):
    for i in xrange(len(m)):
        ns = []
        y, x = divmod(i, XMAX)
        for u, v in NEIGHBOURS:
            ux = u + x
            vy = v + y
            if 0 &lt;= ux &lt; XMAX and 0 &lt;= vy &lt; YMAX:
                ns.append(ux + vy * YMAX)
        yield i, ns

if __name__ == '__main__':

    for field, neighbours in all_neighbours(matrix):
        print field, neighbours
</snippet></ROW><ROW><id>9246634</id><snippet>&gt;&gt;&gt; s = ':foo [bar]'
&gt;&gt;&gt; ''.join(c for c in s if c.isalnum() or c.isspace())
'foo bar'
&gt;&gt;&gt; ''.join(c for c in s if c.isalnum() or c.isspace()).split()
['foo', 'bar']
</snippet></ROW><ROW><id>9246634</id><snippet>&gt;&gt;&gt; s = ':foo [bar]'
&gt;&gt;&gt; s.split()
[':foo', '[bar]']
&gt;&gt;&gt; [word.strip(':[]') for word in s.split()]
['foo', 'bar']
</snippet></ROW><ROW><id>9246791</id><snippet>cp1250</snippet></ROW><ROW><id>9246791</id><snippet>cp1258</snippet></ROW><ROW><id>9246791</id><snippet>&gt;&gt;&gt; guff = "\x97\x96\x94\x95"
&gt;&gt;&gt; uguff0 = guff.decode('1250')
&gt;&gt;&gt; all(guff.decode(str(e)) == uguff0 for e in xrange(1251, 1259))
True
</snippet></ROW><ROW><id>9246791</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.getpreferredencoding()
'cp1252'
</snippet></ROW><ROW><id>9246791</id><snippet>&gt;&gt;&gt; from unicodedata import name
&gt;&gt;&gt; for c in uguff0:
...     print repr(c), name(c)
...
u'\u2014' EM DASH
u'\u2013' EN DASH
u'\u201d' RIGHT DOUBLE QUOTATION MARK
u'\u2022' BULLET
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9246910</id><snippet>GET</snippet></ROW><ROW><id>9246910</id><snippet>POST</snippet></ROW><ROW><id>9246910</id><snippet>@app.route('/save_info/&lt;filepath&gt;', methods=['GET', 'POST'])
def save_info(filepath):
  if request.method == 'POST' or filepath:
    ...
</snippet></ROW><ROW><id>9246910</id><snippet>GET</snippet></ROW><ROW><id>9247012</id><snippet>rfind()</snippet></ROW><ROW><id>9247012</id><snippet>strip()</snippet></ROW><ROW><id>9247012</id><snippet>start = 'item: '
end = 'Other: '
should_append = False
the_list = []
for line in open('file').readlines():
    if line.startswith(start):
        data = line[len(start):]
        the_list.append(data)
        should_append = True
    elif line.startswith(end):
        should_append = False
        break
    elif should_append:
        the_list.append(line)

print the_list
</snippet></ROW><ROW><id>9247046</id><snippet>bar = [x for x in foo if x % 2 == 1]
</snippet></ROW><ROW><id>9247046</id><snippet>x</snippet></ROW><ROW><id>9247046</id><snippet>x</snippet></ROW><ROW><id>9247046</id><snippet>foo</snippet></ROW><ROW><id>9247083</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, style=wx.DEFAULT_FRAME_STYLE)
        self.button = wx.Button(self, -1, "Change")
        self.Bind(wx.EVT_BUTTON, self.ButtonPress, self.button)

        self.tc = wx.TextCtrl(self, -1)
        self.lb = wx.ListBox(self, -1, choices = ('One', 'Two'))

        box = wx.BoxSizer(wx.VERTICAL)
        box.Add(self.lb, 0, wx.EXPAND, 0)
        box.Add(self.tc, 0, wx.EXPAND, 0)
        box.Add(self.button, 0, wx.ADJUST_MINSIZE, 0)
        self.SetSizer(box)
        box.Fit(self)
        self.Layout()

    def ButtonPress(self, evt):
        txt = self.tc.GetValue()
        pos = self.lb.GetSelection()
        self.lb.Delete(pos)
        self.lb.Insert(txt, pos)

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    frame = MyFrame(None, -1, "")
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>9247083</id><snippet>style=wx.LB_MULTIPLE</snippet></ROW><ROW><id>9247083</id><snippet>        self.lb = wx.ListBox(self, -1, choices = ('One', 'Two'), style=wx.LB_MULTIPLE)
</snippet></ROW><ROW><id>9247083</id><snippet>    def ButtonPress(self, evt):
        txt = self.tc.GetValue()
        for pos in self.lb.GetSelections():
            self.lb.Delete(pos)
            self.lb.Insert(txt, pos)
</snippet></ROW><ROW><id>9247273</id><snippet>import django_tables2 as tables

class SimpleTable(tables.Table):
    class Meta:
        model = Simple 
</snippet></ROW><ROW><id>9247273</id><snippet>def simple_list(request):
    queryset = Simple.objects.all()
    table = SimpleTable(queryset)
    return render_to_response("simple_list.html", {"table": table},
                              context_instance=RequestContext(request))
</snippet></ROW><ROW><id>9247273</id><snippet>{% load django_tables2 %} 
{% render_table table %}
</snippet></ROW><ROW><id>9247309</id><snippet>csv</snippet></ROW><ROW><id>9247309</id><snippet>collections.Counter</snippet></ROW><ROW><id>9247309</id><snippet>import csv
import collections

grades = collections.Counter()
with open('file.csv') as input_file:
    for row in csv.reader(input_file, delimiter=';'):
        grades[row[1]] += 1

print 'Number of A grades: %s' % grades['A']
print grades.most_common()
</snippet></ROW><ROW><id>9247309</id><snippet>Number of A grades: 2055
[('A', 2055), ('B', 2034), ('D', 1995), ('E', 1977), ('C', 1939)]
</snippet></ROW><ROW><id>9247390</id><snippet>setuptools</snippet></ROW><ROW><id>9247390</id><snippet>setup.py</snippet></ROW><ROW><id>9247390</id><snippet>distutils.sysconfig</snippet></ROW><ROW><id>9247390</id><snippet>_config_vars</snippet></ROW><ROW><id>9247521</id><snippet>syncdb</snippet></ROW><ROW><id>9247725</id><snippet>from django.template import RequestContext

# In your view:
return render_to_response('index.html'
    {'files':os.listdir('/home/username/public_html/posters') },
    context_instance=RequestContext(request))
</snippet></ROW><ROW><id>9247725</id><snippet>csrf_protect</snippet></ROW><ROW><id>9247763</id><snippet>datetime</snippet></ROW><ROW><id>9247791</id><snippet>import networkx as nx

# Undirected Network
D = nx.Graph()
D.add_weighted_edges_from([('A', 'B', 0.5),('A', 'C', 1)])

# Default max number of iterations failed to converge for me
print nx.pagerank(D, max_iter=200)

# Outputs:
{'A': 0.48648648872844047, 'C': 0.32567567418103965, 'B': 0.18783783709051982}
</snippet></ROW><ROW><id>9247791</id><snippet>import networkx as nx

# Directed Network
D = nx.DiGraph()
D.add_weighted_edges_from([('A', 'B', 0.5), ('A', 'C', 1)])

# Convert to undirected
G = D.to_undirected()

# Default max number of iterations failed to converge for me
print nx.pagerank(G, max_iter=200)

# Outputs:
{'A': 0.48648648872844047, 'C': 0.32567567418103965, 'B': 0.18783783709051982}
</snippet></ROW><ROW><id>9247981</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; import shlex
&gt;&gt;&gt; cmd = 'wc -l test.txt'
&gt;&gt;&gt; cm = shlex.split(cmd)
&gt;&gt;&gt; subprocess.check_output(cm,shell=True)
'      1 test.txt\n'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9247997</id><snippet>PEP 3110: Catching exceptions. You must now use except SomeException as variable instead of except SomeException, variable. Moreover, the variable is explicitly deleted when the except block is left.
</snippet></ROW><ROW><id>9248432</id><snippet>Python-2.7.2/Objects/funcobject.c</snippet></ROW><ROW><id>9248432</id><snippet>__get__</snippet></ROW><ROW><id>9248432</id><snippet>class myclassmethod(object):
    def __init__(self, method):
        self.method = method
    def __get__(self, instance, cls):
        return lambda *args, **kw: self.method(cls, *args, **kw)
</snippet></ROW><ROW><id>9248432</id><snippet>&gt;&gt;&gt; class MyClass(object):
...     @myclassmethod
...     def method(cls):
...         print cls
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.method()
&lt;class '__main__.MyClass'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9248432</id><snippet>def myclasmethod(par1, par2, ...):
    class _myclassmethod(object):
        def __init__(self, method):
            self.method = method
        def __get__(self, instance, cls):
            # make use of par1, par2,... variables here at will
            return lambda *args, **kw: self.method(cls, *args, **kw)
    return _myclassmethod
</snippet></ROW><ROW><id>9248491</id><snippet>menuentry "&lt;name&gt;" [options] {
  ...
  set root='&lt;root&gt;'
  ...
}
</snippet></ROW><ROW><id>9248491</id><snippet>menuentry</snippet></ROW><ROW><id>9248491</id><snippet>}</snippet></ROW><ROW><id>9248491</id><snippet>set root=</snippet></ROW><ROW><id>9248542</id><snippet>'</snippet></ROW><ROW><id>9248542</id><snippet>&gt;&gt;&gt; l = ["'''b", "a", "a'ab", "aaa"]
&gt;&gt;&gt; l.sort()
&gt;&gt;&gt; l
["'''b", 'a', "a'ab", 'aaa']
&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; import string
&gt;&gt;&gt; keyfunc = partial(string.replace, old="'", new="")
&gt;&gt;&gt; l.sort(key=keyfunc)
&gt;&gt;&gt; l
['a', 'aaa', "a'ab", "'''b"]
</snippet></ROW><ROW><id>9248855</id><snippet>sys.path</snippet></ROW><ROW><id>9248855</id><snippet>.</snippet></ROW><ROW><id>9248855</id><snippet>sys.path</snippet></ROW><ROW><id>9248855</id><snippet>reddit</snippet></ROW><ROW><id>9248855</id><snippet>import reddit</snippet></ROW><ROW><id>9248855</id><snippet>import reddit.decorators as decorators
</snippet></ROW><ROW><id>9248855</id><snippet>from . import decorators
</snippet></ROW><ROW><id>9248855</id><snippet>import decorators
</snippet></ROW><ROW><id>9248855</id><snippet>/decorators.py</snippet></ROW><ROW><id>9248855</id><snippet>/reddit/decorators.py</snippet></ROW><ROW><id>9248946</id><snippet>&gt;&gt;&gt; lst = [(19, 0.97471237)]
&gt;&gt;&gt; lst[0]
(19, 0.97471237)
&gt;&gt;&gt; x, y = lst[0]
&gt;&gt;&gt; x
19
&gt;&gt;&gt; y
0.97471237
</snippet></ROW><ROW><id>9248993</id><snippet>&gt;&gt;&gt; def hello():
...     print("hi")
... 
&gt;&gt;&gt; import types
&gt;&gt;&gt; type(hello) is types.BuiltinFunctionType
False
&gt;&gt;&gt; type(hello) is types.FunctionType
True
</snippet></ROW><ROW><id>9248993</id><snippet>[ x for x in dir(yourclass) if (type(x) is types.FunctionType) ]
</snippet></ROW><ROW><id>9249008</id><snippet>repr(obj)</snippet></ROW><ROW><id>9249008</id><snippet>__repr__</snippet></ROW><ROW><id>9249008</id><snippet>object</snippet></ROW><ROW><id>9249008</id><snippet>id</snippet></ROW><ROW><id>9249008</id><snippet>&gt;&gt;&gt; o = object()
&gt;&gt;&gt; o
&lt;object object at 0x7fafd75d10a0&gt;
&gt;&gt;&gt; id(o)
140393209204896
&gt;&gt;&gt; "%x" % id(o)
'7fafd75d10a0'
</snippet></ROW><ROW><id>9249008</id><snippet>id</snippet></ROW><ROW><id>9249008</id><snippet>class MyClass(object):
  def __repr__(self):
    return "meaningful representation (or is it?)"
</snippet></ROW><ROW><id>9249155</id><snippet>psutil</snippet></ROW><ROW><id>9249281</id><snippet>lxml</snippet></ROW><ROW><id>9249281</id><snippet>iterparse</snippet></ROW><ROW><id>9249281</id><snippet>iterwalk</snippet></ROW><ROW><id>9249289</id><snippet>from BeautifulSoup import BeautifulSoup
from pprint import pprint

def parseList(tag):
    if tag.name == 'ul':
        return [parseList(item)
                for item in tag.findAll('li', recursive=False)]
    elif tag.name == 'li':
        if tag.ul is None:
            return tag.text
        else:
            return (tag.contents[0].string.strip(), parseList(tag.ul))

soup = BeautifulSoup(lista)
pprint(parseList(soup.ul))
</snippet></ROW><ROW><id>9249289</id><snippet>[(u'Arts &amp; Entertainment',
  [u'Celebrities &amp; Entertainment News',
   (u'Comics &amp; Animation',
    [u'Anime &amp; Manga', u'Cartoons', u'Comics'])])]
</snippet></ROW><ROW><id>9249513</id><snippet>i=0</snippet></ROW><ROW><id>9249513</id><snippet>while True</snippet></ROW><ROW><id>9249513</id><snippet>i += freq</snippet></ROW><ROW><id>9249513</id><snippet>equals</snippet></ROW><ROW><id>9249513</id><snippet>while True</snippet></ROW><ROW><id>9249513</id><snippet>subset = data[i:freq]</snippet></ROW><ROW><id>9249527</id><snippet>closeEvent</snippet></ROW><ROW><id>9249527</id><snippet>QWidget</snippet></ROW><ROW><id>9249527</id><snippet>class MainWindow(QWidget): # or QMainWindow
    ...

    def closeEvent(self, event):
        # do stuff
        if self.canExit()
            event.accept() # let the window close
        else:
            event.ignore()
</snippet></ROW><ROW><id>9249527</id><snippet>QApplication</snippet></ROW><ROW><id>9249527</id><snippet>aboutToQuit</snippet></ROW><ROW><id>9249527</id><snippet>app = QApplication(sys.argv)
app.aboutToQuit.connect(myExitHandler) # myExitHandler is a callable
</snippet></ROW><ROW><id>9249598</id><snippet>k</snippet></ROW><ROW><id>9249598</id><snippet>k-1</snippet></ROW><ROW><id>9249639</id><snippet>self</snippet></ROW><ROW><id>9249639</id><snippet>class FooClass(object):
    def my_method(self, arg):
        print self.my_method, arg
</snippet></ROW><ROW><id>9249639</id><snippet>type</snippet></ROW><ROW><id>9249639</id><snippet>FooClass.my_method</snippet></ROW><ROW><id>9249639</id><snippet>FooClass</snippet></ROW><ROW><id>9249639</id><snippet>self</snippet></ROW><ROW><id>9249639</id><snippet>FooClass.my_method(fooclass_instance, arg)</snippet></ROW><ROW><id>9249639</id><snippet>f = FooClass()</snippet></ROW><ROW><id>9249639</id><snippet>FooClass</snippet></ROW><ROW><id>9249639</id><snippet>f</snippet></ROW><ROW><id>9249639</id><snippet>self</snippet></ROW><ROW><id>9249639</id><snippet>f</snippet></ROW><ROW><id>9249639</id><snippet>f</snippet></ROW><ROW><id>9249639</id><snippet>FooClass.my_method(f, arg)</snippet></ROW><ROW><id>9249639</id><snippet>f.my_method(arg)</snippet></ROW><ROW><id>9249639</id><snippet>self</snippet></ROW><ROW><id>9249639</id><snippet>my_method</snippet></ROW><ROW><id>9249730</id><snippet>rsplit</snippet></ROW><ROW><id>9249730</id><snippet>OUT.write(identity.rsplit('/', 0)[0])
</snippet></ROW><ROW><id>9249730</id><snippet>identity.rsplit('/', 0')[0]</snippet></ROW><ROW><id>9249730</id><snippet>identity</snippet></ROW><ROW><id>9249730</id><snippet>identity.rsplit('/', 1)[1]</snippet></ROW><ROW><id>9249812</id><snippet>NuevoGrupoHandler.post</snippet></ROW><ROW><id>9249812</id><snippet>GruposHandler()</snippet></ROW><ROW><id>9249812</id><snippet>request</snippet></ROW><ROW><id>9249812</id><snippet>grupoHandler = GruposHandler()
grupoHandler.request = self.request # &lt;&lt;&lt; add this
grupoHandler.response = self.response # &lt;&lt;&lt; and this
grupoHandler.obtenerPagina("gruposMios", 'Informacion: un nuevo grupo fue agregado.')
</snippet></ROW><ROW><id>9249812</id><snippet>doRender</snippet></ROW><ROW><id>9249812</id><snippet>GruposHandler</snippet></ROW><ROW><id>9249812</id><snippet>NuevoGrupoHandler</snippet></ROW><ROW><id>9249812</id><snippet>class RenderRequestHandler(webapp.RequestHandler):
    def obtenerPagina(self, ...):
        pass

    def do_render(self):
        pass

class GruposHandler(RenderRequestHandler):
    pass

class NuevoGrupoHandler(RenderRequestHandler):
    pass
</snippet></ROW><ROW><id>9249979</id><snippet>&gt;&gt;&gt; a[999999]
('2', '7', '8', '3', '9', '1', '5', '4', '6', '0')
</snippet></ROW><ROW><id>9249979</id><snippet>999999</snippet></ROW><ROW><id>9250174</id><snippet>temp = x
while temp&gt;0:
    temp = temp % 10
</snippet></ROW><ROW><id>9250174</id><snippet>x=12345</snippet></ROW><ROW><id>9250174</id><snippet>temp = 12345
12345&gt;0
temp = 12345%10 = 5
5&gt;0
temp = 5%10 = 5
5&gt;0
temp = 5%10 = 5
...
</snippet></ROW><ROW><id>9250174</id><snippet>temp = x%10
</snippet></ROW><ROW><id>9250881</id><snippet>numpy.cross</snippet></ROW><ROW><id>9250881</id><snippet>a</snippet></ROW><ROW><id>9250881</id><snippet>b</snippet></ROW><ROW><id>9250881</id><snippet>a</snippet></ROW><ROW><id>9250881</id><snippet>b</snippet></ROW><ROW><id>9250881</id><snippet>In [17]: a = np.array([[1], [2], [3]])

In [18]: b = np.array([[4], [5], [6]])

In [19]: print a.shape,b.shape
(3, 1) (3, 1)
</snippet></ROW><ROW><id>9250881</id><snippet>In [20]: np.cross(a,b,axis=0)
Out[20]: 
array([[-3],
       [ 6],
       [-3]])
</snippet></ROW><ROW><id>9250881</id><snippet>cross</snippet></ROW><ROW><id>9251001</id><snippet>?:</snippet></ROW><ROW><id>9251001</id><snippet>re.match(r"^(.+)\n(?:(.*\n)*)\n",body,re.MULTILINE)
</snippet></ROW><ROW><id>9251001</id><snippet>re.match(r"^(.+)\n((?:.*\n)*)\n",body,re.MULTILINE)
</snippet></ROW><ROW><id>9251001</id><snippet>m.group('bd')
</snippet></ROW><ROW><id>9251001</id><snippet>group()</snippet></ROW><ROW><id>9251227</id><snippet>compose</snippet></ROW><ROW><id>9251227</id><snippet>def compose(*funcs):
    if len(funcs) == 1:
        return funcs[0]
    else:
        def composition(*args, **kwargs):
            return funcs[0](compose(*funcs[1:])(*args, **kwargs))
        return composition
</snippet></ROW><ROW><id>9251227</id><snippet>def compose_pair(f1, f2):
    def composition(*args, **kwargs):
        return f1(f2(*args, **kwargs))
    return composition

def compose_iterative(*funcs):
    iterfuncs = iter(funcs)
    comp = next(iterfuncs)
    for f in iterfuncs:
        comp = compose_pair(comp, f)
    return comp
</snippet></ROW><ROW><id>9251708</id><snippet>sigma.resize()</snippet></ROW><ROW><id>9251708</id><snippet>None</snippet></ROW><ROW><id>9251708</id><snippet>np.resize(sigma, shape)</snippet></ROW><ROW><id>9251708</id><snippet>shape()</snippet></ROW><ROW><id>9251708</id><snippet>import numpy as np
...
shape = (6, 6) #This will be some pre-determined size
sigma = np.diag(S) #diagonalise the matrix - this works
sigma.resize(shape) #Resize the matrix and fill with zeros
</snippet></ROW><ROW><id>9251708</id><snippet>resize()</snippet></ROW><ROW><id>9251708</id><snippet># This assumes that you have a 2-dimensional array
zeros = np.zeros(shape, dtype=np.int32)
zeros[:sigma.shape[0], :sigma.shape[1]] = sigma
</snippet></ROW><ROW><id>9251718</id><snippet>import posix_ipc # POSIX-specific IPC
import mmap      # From Python stdlib

class SharedMemory(object):
    """Python interface to shared memory. 
    The create argument tells the object to create a new SHM object,
    rather than attaching to an existing one.
    """

    def __init__(self, name, size=posix_ipc.PAGE_SIZE, create=True):
        self.name = name
        self.size = size
        if create:
            memory = posix_ipc.SharedMemory(self.name, posix_ipc.O_CREX,
                                            size=self.size)
        else:
            memory = posix_ipc.SharedMemory(self.name)
        self.mapfile = mmap.mmap(memory.fd, memory.size)
        os.close(memory.fd)
        return

    def put(self, item):
        """Put item in shared memory.
        """
        # TODO: Deal with the case where len(item) &gt; size(self.mapfile)
        # TODO: Guard this method with a named semaphore
        self.mapfile.seek(0)
        pickle.dump(item, self.mapfile, protocol=2)
        return

    def get(self):
        """Get a Python object from shared memory.
        """
        # TODO: Deal with the case where len(item) &gt; size(self.mapfile)
        # TODO: Guard this method with a named semaphore
        self.mapfile.seek(0)
        return pickle.load(self.mapfile)

    def __del__(self):
        try:
            self.mapfile.close()
            memory = posix_ipc.SharedMemory(self.name)
            memory.unlink()
        except:
            pass
        return    
</snippet></ROW><ROW><id>9251718</id><snippet>put</snippet></ROW><ROW><id>9251718</id><snippet>get</snippet></ROW><ROW><id>9251718</id><snippet>mmap</snippet></ROW><ROW><id>9251718</id><snippet>fd</snippet></ROW><ROW><id>9251718</id><snippet>import jtux.*;

class SHM {

    private String name;
    private int size;
    private long semaphore;
    private long mapfile; // File descriptor for mmap file

    /* Lookup flags and perms in your system docs */
    public SHM(String name, int size, boolean create, int flags, int perms) {
        this.name = name;
        this.size = size;
        int shm;
        if (create) {
            flags = flags | UConstant.O_CREAT;
            shm = UPosixIPC.shm_open(name, flags, UConstant.O_RDWR);
        } else {
            shm = UPosixIPC.shm_open(name, flags, UConstant.O_RDWR);
        }
        this.mapfile = UPosixIPC.mmap(..., this.size, ..., flags, shm, 0);
        return;
    }


    public void put(String item) {
        UFile.lseek(this.mapfile(this.mapfile, 0, 0));
        UFile.write(item.getBytes(), this.mapfile);
        return;
    }


    public String get() {    
        UFile.lseek(this.mapfile(this.mapfile, 0, 0));
        byte[] buffer = new byte[this.size];
        UFile.read(this.mapfile, buffer, buffer.length);
        return new String(buffer);
    }


    public void finalize() {
        UPosix.shm_unlink(this.name);
        UPosix.munmap(this.mapfile, this.size);
    }

}
</snippet></ROW><ROW><id>9252020</id><snippet>gevent.sleep()</snippet></ROW><ROW><id>9252020</id><snippet>urllib2.urlopen(url).read()</snippet></ROW><ROW><id>9252020</id><snippet>urllib2</snippet></ROW><ROW><id>9252020</id><snippet>gevent</snippet></ROW><ROW><id>9252020</id><snippet>gevent.monkey.patch_*()</snippet></ROW><ROW><id>9252020</id><snippet>#!/usr/bin/env python
concurrency_impl = 'gevent' # single process, single thread
##concurrency_impl = 'threading' # single process, multiple threads
##concurrency_impl = 'multiprocessing' # multiple processes

if concurrency_impl == 'gevent':
    import gevent.monkey; gevent.monkey.patch_all()

import logging
import time
import random
from itertools import count, islice

info = logging.info

if concurrency_impl in ['gevent', 'threading']:
    from Queue import Queue as JoinableQueue
    from threading import Thread
if concurrency_impl == 'multiprocessing':
    from multiprocessing import Process as Thread, JoinableQueue
</snippet></ROW><ROW><id>9252020</id><snippet>def do_work(wid, value):
    time.sleep(random.randint(0,2))
    info("%d Task %s done" % (wid, value))

def worker(wid, q):
    while True:
        item = q.get()
        try:
            info("%d Got item %s" % (wid, item))
            do_work(wid, item)
        finally:
            q.task_done()
            info("%d Done item %s" % (wid, item))

def producer(pid, q):
    for item in iter(lambda: random.randint(1, 11), 10):
        time.sleep(.1) # simulate a green blocking call that yields control
        info("%d Added item %s" % (pid, item))
        q.put(item)
    info("%d Signal Received" % (pid,))
</snippet></ROW><ROW><id>9252020</id><snippet>main()</snippet></ROW><ROW><id>9252020</id><snippet>def main():
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(process)d %(message)s")

    q = JoinableQueue()
    it = count(1)
    producers = [Thread(target=producer, args=(i, q)) for i in islice(it, 2)]
    workers = [Thread(target=worker, args=(i, q)) for i in islice(it, 4)]
    for t in producers+workers:
        t.daemon = True
        t.start()

    for t in producers: t.join() # put items in the queue
    q.join() # wait while it is empty
    # exit main thread (daemon workers die at this point)

if __name__=="__main__":    
   main()
</snippet></ROW><ROW><id>9252024</id><snippet>self.file_view.setRootIndex(self.filemodel.index(dir_path))
</snippet></ROW><ROW><id>9252093</id><snippet>conn.close()

data = re.read()
</snippet></ROW><ROW><id>9252093</id><snippet>data = re.read()
conn.close()
</snippet></ROW><ROW><id>9252115</id><snippet>a = [1, 2, 3]</snippet></ROW><ROW><id>9252115</id><snippet>a[0]</snippet></ROW><ROW><id>9252115</id><snippet>get_decimals(1, num)[2]</snippet></ROW><ROW><id>9252115</id><snippet>7</snippet></ROW><ROW><id>9252115</id><snippet>6</snippet></ROW><ROW><id>9252115</id><snippet>142856</snippet></ROW><ROW><id>9252115</id><snippet>max((get_decimals(1, num)[2], num) for num in xrange(2, 10))[1]</snippet></ROW><ROW><id>9252229</id><snippet>&gt;&gt;&gt; def inplace(seq):
...     seq[0] = 5
... 
&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; print a
[1, 2, 3]
&gt;&gt;&gt; inplace(a)
&gt;&gt;&gt; a
[5, 2, 3]
</snippet></ROW><ROW><id>9252317</id><snippet>/wiki/</snippet></ROW><ROW><id>9252317</id><snippet>    &lt;a\s+href=[\'"](\/wiki\/.*?)[\'"].*?&gt; 
</snippet></ROW><ROW><id>9252317</id><snippet>    &lt;a\s+href=[\'"](\/wiki\/)(.*?)[\'"].*?&gt; 
</snippet></ROW><ROW><id>9252317</id><snippet>MatchObject.group()</snippet></ROW><ROW><id>9252317</id><snippet>MatchObject.groups()</snippet></ROW><ROW><id>9252317</id><snippet>/wiki/</snippet></ROW><ROW><id>9252382</id><snippet>random.shuffle()</snippet></ROW><ROW><id>9252382</id><snippet>import random

r = list(range(1000))
random.shuffle(r)
for i in r:
  # do something with i
</snippet></ROW><ROW><id>9252382</id><snippet>for</snippet></ROW><ROW><id>9252382</id><snippet>i</snippet></ROW><ROW><id>9252382</id><snippet>lst = [1970, 1991, 2012]
random.shuffle(lst)
for x in lst:
  print x
</snippet></ROW><ROW><id>9252382</id><snippet>random.shuffle()</snippet></ROW><ROW><id>9252389</id><snippet>get_template(any_code_you_like()).render(context)
</snippet></ROW><ROW><id>9252389</id><snippet>get_template</snippet></ROW><ROW><id>9252389</id><snippet>render_to_response</snippet></ROW><ROW><id>9252389</id><snippet>def my_view(request):
    if request.user.is_authenticated():
        return render(request, 'template1.html')
    else:
        return render(request, 'template2.html')
</snippet></ROW><ROW><id>9252695</id><snippet>'f8'</snippet></ROW><ROW><id>9252695</id><snippet>'I8'</snippet></ROW><ROW><id>9252695</id><snippet>np.float</snippet></ROW><ROW><id>9252695</id><snippet>np.uint</snippet></ROW><ROW><id>9252695</id><snippet>'f9'</snippet></ROW><ROW><id>9252695</id><snippet>data = np.loadtxt("datafile.txt", skiprows=1)</snippet></ROW><ROW><id>9252695</id><snippet>data = np.genfromtxt("datafile.txt", names=True)</snippet></ROW><ROW><id>9252729</id><snippet>&gt;&gt;&gt; link = re.compile('&lt;link rel="alternate" type="text/html" href=(.*)')
&gt;&gt;&gt; find_link = re.findall(link, source)
&gt;&gt;&gt; find_link[1].strip()
'"http://www.huffingtonpost.com/andrew-brandt/the-peyton-predicament-pa_b_1271834.html" /&gt;'
&gt;&gt;&gt; len(find_link)
15
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9252729</id><snippet>html source</snippet></ROW><ROW><id>9252729</id><snippet>&lt;link&gt;&lt;/link&gt;</snippet></ROW><ROW><id>9252729</id><snippet>&lt;link rel="alternate" type="text/html" href= links here</snippet></ROW><ROW><id>9252831</id><snippet>&gt;&gt;&gt; titles
['Cost', 'Calories', 'Name']
&gt;&gt;&gt; titles[0]
'Cost'
&gt;&gt;&gt; titles[1]
'Calories'
&gt;&gt;&gt; titles[2]
'Name'
</snippet></ROW><ROW><id>9252831</id><snippet>lines = []
</snippet></ROW><ROW><id>9252832</id><snippet>gzip</snippet></ROW><ROW><id>9252832</id><snippet>with gzip.open(filename) as f:
    reader = csv.reader(f)
    #...
</snippet></ROW><ROW><id>9252944</id><snippet>file2.action()</snippet></ROW><ROW><id>9252944</id><snippet>import file2

username = "steven"

file2.action(username)
</snippet></ROW><ROW><id>9252944</id><snippet>def action(name):
    print name 
</snippet></ROW><ROW><id>9253022</id><snippet>mod_wsgi</snippet></ROW><ROW><id>9253135</id><snippet>Traceback (most recent call last):
  File "main.py", line 5, in &lt;module&gt;
    el.elgen(1, 1, 1, 2, 1, 1, 3)
  File "/home/snim2/Dropbox/scratch/so/fem_obj.py", line 86, in elgen
    for j in nd.nodes: # nd reference
NameError: global name 'nd' is not defined
</snippet></ROW><ROW><id>9253135</id><snippet>def elgen(self, slabel, dlabel, snl, enl, sndl, endl, num):
    for i in range(1, num + 1):                
        label = slabel + (i - 1)*dlabel 
        if self.elcheck(label) == True:
            return "Element %s already exists!" %label
        if self.elements != []:
            for j in self.elements:
                if j[1] == (snl + (i - 1)*sndl, enl + (i - 1)*endl):
                    return "Element %s endnodes already taken!" %label
        hlplst = []
        for j in nd.nodes: # nd reference
            hlplst = hlplst + [j[0]]
        if snl + (i - 1)*sndl not in hlplst:
            return "Node %s does not exist" %(snl + (i - 1)*sndl)
        if enl + (i - 1)*endl not in hlplst:
            return "Node %s does not exist" %(enl + (i - 1)*endl)                             
        self.elements = self.elements + [[label, (snl + (i - 1)*sndl, enl + (i - 1)*endl)]]
        self.elnum +=1
    self.ellen()
</snippet></ROW><ROW><id>9253135</id><snippet>elgen</snippet></ROW><ROW><id>9253135</id><snippet>Node</snippet></ROW><ROW><id>9253135</id><snippet>def elgen(self, nd, slabel, dlabel, snl, enl, sndl, endl, num):
    for i in range(1, num + 1):                
        label = slabel + (i - 1)*dlabel 
        if self.elcheck(label) == True:
            return "Element %s already exists!" %label
        if self.elements != []:
            for j in self.elements:
                if j[1] == (snl + (i - 1)*sndl, enl + (i - 1)*endl):
                    return "Element %s endnodes already taken!" %label
        hlplst = []
        for j in nd.nodes: # nd reference
            hlplst = hlplst + [j[0]]
        if snl + (i - 1)*sndl not in hlplst:
            return "Node %s does not exist" %(snl + (i - 1)*sndl)
        if enl + (i - 1)*endl not in hlplst:
            return "Node %s does not exist" %(enl + (i - 1)*endl)                             
        self.elements = self.elements + [[label, (snl + (i - 1)*sndl, enl + (i - 1)*endl)]]
        self.elnum +=1
    self.ellen()
</snippet></ROW><ROW><id>9253135</id><snippet>main.py</snippet></ROW><ROW><id>9253135</id><snippet>nd = Node()
nd.nodegen(1, 1, 0, 0, 4, 0, 4)
el = Element()
el.elgen(nd, 1, 1, 1, 2, 1, 1, 3)
</snippet></ROW><ROW><id>9253268</id><snippet>(s for s in span(lst) if max(len(g) for g in s) &lt;= 5)</snippet></ROW><ROW><id>9253268</id><snippet>def span(lst, most=float("inf")):
  if not lst:
    yield []
    return

  for i in range(1, min(len(lst), most) + 1):
    for x in span(lst[i:], most):
      yield [lst[:i]] + x

lst = [1,2,3,4,5,6,7]
n = 5
spannings = list(span(lst, n))         
print '\n'.join(map(str, spannings))

# proof that it produces the correct result
assert sorted(spannings) == sorted(s for s in span_orig(lst) if max(map(len, s)) &lt;= n)
# proof that it produces the same result as the old
# function if called without a second argument
assert sorted(span_orig(lst)) == sorted(span(lst))
</snippet></ROW><ROW><id>9253268</id><snippet>yield [lst]</snippet></ROW><ROW><id>9253268</id><snippet>len(lst) == 0</snippet></ROW><ROW><id>9253302</id><snippet>    i = 0
    while i &lt; len(aliens.sprites()): 
        check_alien = aliens.sprites()[i] #check alien 1.. alien 2.. etc

        aliens_except = pygame.sprite.Group() #here we create a new group
        n = 0 #without alien i, so we can use spritecollide while it doesnt collide
        for alien in aliens: #with itself
            if n != i: #exclude alien[i]
                aliens_except.add(alien)
            n += 1

        if not pygame.sprite.spritecollideany(check_alien, aliens_except):
            i += 1 #if theres no collision, move on to the next alien
        else:
            for alien in pygame.sprite.spritecollide(check_alien, aliens_except, 1):
                Explosion(alien) #remove all aliens that are colliding with check_alien
            for alien in pygame.sprite.spritecollide(check_alien, pygame.sprite.Group(check_alien), 1):
                Explosion(alien) #ugly way to remove check_alien
</snippet></ROW><ROW><id>9253478</id><snippet>pep8.py</snippet></ROW><ROW><id>9253478</id><snippet>mydict.py:2:28: E231 missing whitespace after ':'
mydict.py:1:15: E222 multiple spaces after operator
</snippet></ROW><ROW><id>9253478</id><snippet>initialstate = {
    'state': grid,
    'f': find_manhatten_distance(grid, goal),
    'g': 0,
    'h': find_manhatten_distance(grid, goal),
    'ancestor': None
}
</snippet></ROW><ROW><id>9253478</id><snippet>pep8.py</snippet></ROW><ROW><id>9253651</id><snippet>collections.Counter</snippet></ROW><ROW><id>9253651</id><snippet>def unique_items(iterable):
    tuples = map(tuple, iterable)
    counts = collections.Counter(tuples)
    unique = []
    non_unique = []
    for t in tuples:
        if counts[t] == 1:
            unique.append(t)
        else:
            non_unique.append(t)
    return unique, non_unique
</snippet></ROW><ROW><id>9253666</id><snippet>(.*?)</snippet></ROW><ROW><id>9253666</id><snippet>matcher.group(1)</snippet></ROW><ROW><id>9253666</id><snippet>while ( matcher.find() ) {
    System.out.println(matcher.group(1));
}
</snippet></ROW><ROW><id>9253666</id><snippet>while</snippet></ROW><ROW><id>9254210</id><snippet>&gt;&gt;&gt; a = [1,2,3,3]
&gt;&gt;&gt; help(a.index)
Help on built-in function index:

index(...)
    L.index(value, [start, [stop]]) -&gt; integer -- return first index of value.
    Raises ValueError if the value is not present.
</snippet></ROW><ROW><id>9254210</id><snippet>enumerate</snippet></ROW><ROW><id>9254210</id><snippet>&gt;&gt;&gt; for i, n in enumerate([10,5,30]):
...     print i,n
... 
0 10
1 5
2 30
</snippet></ROW><ROW><id>9254210</id><snippet>def convertVector(numbers):
    totes = []
    for i, number in enumerate(numbers):
        if number != 0:
            totes.append((i, number))
    return dict((totes))
</snippet></ROW><ROW><id>9254210</id><snippet>&gt;&gt;&gt; convertVector([1, 0, 1 , 0, 2, 0, 1, 0, 0, 1, 0])
{0: 1, 9: 1, 2: 1, 4: 2, 6: 1}
</snippet></ROW><ROW><id>9254210</id><snippet>totes = {}</snippet></ROW><ROW><id>9254210</id><snippet>totes[i] = number</snippet></ROW><ROW><id>9254288</id><snippet>1000 0000 0000 0000
0000 0100 0000 0000
0000 0000 0010 0000
0000 0000 0000 0001
</snippet></ROW><ROW><id>9254288</id><snippet>0.25 0    0    0
0    0.25 0    0
0    0    0.25 0
0    0    0    0.25
</snippet></ROW><ROW><id>9254288</id><snippet>1000
0100
0010
0001
</snippet></ROW><ROW><id>9254288</id><snippet>from PIL import ImageChops
import os, Image
files = os.listdir("./")
finalimage=Image.open("./"+files[0])
for i in range(1,len(files)):
    currentimage=Image.open("./"+files[i])
    finalimage=ImageChops.lighter(finalimage, currentimage)
finalimage.save("allblended.jpg","JPEG")
</snippet></ROW><ROW><id>9254288</id><snippet>import os, Image
import numpy as np
files = os.listdir("./")
image=Image.open("./"+files[0])
im=np.array(image,dtype=np.float32)
for i in range(1,len(files)):
    currentimage=Image.open("./"+files[i])
    im += np.array(currentimage, dtype=np.float32)
im /= len(files) * 0.25 # lowered brightness, with magic factor
# clip, convert back to uint8:
final_image = Image.fromarray(np.uint8(im.clip(0,255)))
final_image.save('all_averaged.jpg', 'JPEG')
</snippet></ROW><ROW><id>9254355</id><snippet>eval()</snippet></ROW><ROW><id>9254355</id><snippet>a = "/"
b = "6"
c = "3"
print eval(b + a + c)
</snippet></ROW><ROW><id>9254355</id><snippet>eval()</snippet></ROW><ROW><id>9254378</id><snippet>likes_metal()</snippet></ROW><ROW><id>9254378</id><snippet>metal_score</snippet></ROW><ROW><id>9254378</id><snippet>indie</snippet></ROW><ROW><id>9254411</id><snippet>subscription_to</snippet></ROW><ROW><id>9254411</id><snippet>Subscription</snippet></ROW><ROW><id>9254627</id><snippet>def to_list(x):
    if x == None:
        return ()
    if type(x) != tuple:
        return x
    a, b = x
    return (to_list(a),) + to_list(b)
</snippet></ROW><ROW><id>9254649</id><snippet>./pypy/translator/goal/translate.py pypy/translator/goal/targetpypystandalone.py --withmod-oracle
</snippet></ROW><ROW><id>9254698</id><snippet>import curses 

screen = curses.initscr() 
#curses.noecho() 
curses.curs_set(0) 
screen.keypad(1) 
curses.mousemask(1)

screen.addstr("This is a Sample Curses Script\n\n") 

while True:
    event = screen.getch() 
    if event == ord("q"): break 
    if event == curses.KEY_MOUSE:
    _, mx, my, _, _ = curses.getmouse()
    y, x = screen.getyx()
    screen.addstr(y, x, screen.instr(my, mx, 5))

curses.endwin()
</snippet></ROW><ROW><id>9254996</id><snippet>&gt;&gt;&gt; lol = [[1,2,3],[4,40],[10,20,30]]
&gt;&gt;&gt; 
&gt;&gt;&gt; for l in lol:
...     if max(l) &gt; 30:
...         continue
...     print l
... 
[1, 2, 3]
[10, 20, 30]
</snippet></ROW><ROW><id>9255007</id><snippet>    pygame.draw.aaline(screen, linecolor, (0, y), (width-1, y)
</snippet></ROW><ROW><id>9255007</id><snippet>aaline</snippet></ROW><ROW><id>9255007</id><snippet>line</snippet></ROW><ROW><id>9255025</id><snippet>print(hasattr(Foo,'bar'))</snippet></ROW><ROW><id>9255025</id><snippet>print dir(Foo)</snippet></ROW><ROW><id>9255025</id><snippet>False
['BAR', '__class__', ...
</snippet></ROW><ROW><id>9255025</id><snippet>__metaclass__</snippet></ROW><ROW><id>9255025</id><snippet>class Foo(object, metaclass=UpperAttrMetaclass):
    ...
</snippet></ROW><ROW><id>9255058</id><snippet>&lt;!-- form.html --&gt;
&lt;form&gt;&lt;input type="submit"/&gt;&lt;/form&gt;
</snippet></ROW><ROW><id>9255058</id><snippet>&lt;!-- listing.html --&gt;
&lt;ul&gt;
{% for item in items %}
&lt;li&gt;Item {{ item.name }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>9255058</id><snippet>&lt;!-- form_page.html --&gt;
&lt;html&gt;&lt;body&gt;
{% include "form.html" %}
&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>9255058</id><snippet>&lt;!-- listing_page.html --&gt;
&lt;html&gt;&lt;body&gt;
{% include "listing.html" %}
&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>9255058</id><snippet>&lt;!-- both_page.html --&gt;
&lt;html&gt;&lt;body&gt;
{% include "form.html" %}
{% include "listing.html" %}
&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>9255128</id><snippet>(^/d+$)
</snippet></ROW><ROW><id>9255128</id><snippet>(\d+)$
</snippet></ROW><ROW><id>9255128</id><snippet>^</snippet></ROW><ROW><id>9255159</id><snippet>return (related_object in [s.subscribed_to for s in subs])
</snippet></ROW><ROW><id>9255159</id><snippet>return subs.filter(subscribed_to=related_object).count() &gt; 0
</snippet></ROW><ROW><id>9255385</id><snippet>nummatches = checkmatch(guess)
</snippet></ROW><ROW><id>9255385</id><snippet>checkmatch</snippet></ROW><ROW><id>9255385</id><snippet>winning_numbers &amp; guess</snippet></ROW><ROW><id>9255385</id><snippet>&gt;&gt;&gt; def myfunc(str1,str2):
...   print str1+str2
...
&gt;&gt;&gt; myfunc('a','b') #takes 2 argument and concatenates
ab
&gt;&gt;&gt; myfunc('a') # only one given so ERROR
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: myfunc() takes exactly 2 arguments (1 given)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9255474</id><snippet>__eq__</snippet></ROW><ROW><id>9255474</id><snippet>__hash__</snippet></ROW><ROW><id>9255474</id><snippet>__eq__</snippet></ROW><ROW><id>9255474</id><snippet>__hash__</snippet></ROW><ROW><id>9255474</id><snippet>__eq__</snippet></ROW><ROW><id>9255474</id><snippet>__eq__</snippet></ROW><ROW><id>9255474</id><snippet>__hash__</snippet></ROW><ROW><id>9255474</id><snippet>__hash__</snippet></ROW><ROW><id>9255474</id><snippet>def __hash__(self):
    return hash(self.someattribute)
</snippet></ROW><ROW><id>9256062</id><snippet>BlobstoreLineInputReader</snippet></ROW><ROW><id>9256062</id><snippet>BlobstoreZipLineInputReader</snippet></ROW><ROW><id>9256062</id><snippet>map</snippet></ROW><ROW><id>9256062</id><snippet>start_position</snippet></ROW><ROW><id>9256062</id><snippet>map</snippet></ROW><ROW><id>9256062</id><snippet>def time_count_map(data):
    """Time count map function."""
    text = data[1]

    try:
        reader = csv.reader([text.replace('\0', '')], skipinitialspace=True)
        for s in reader:
            """Calculate time elapsed"""
            sdw = s[1]
            start_date = time.strptime(sdw,"%m/%d/%y %I:%M:%S%p")
            edw = s[2]
            end_date = time.strptime(edw,"%m/%d/%y %I:%M:%S%p")
            time_difference = time.mktime(end_date) - time.mktime(start_date)
            yield (s[0], time_difference)
    except IndexError, e:
        logging.debug(e)
</snippet></ROW><ROW><id>9256062</id><snippet>BlobstoreLineInputReader</snippet></ROW><ROW><id>9256230</id><snippet>test</snippet></ROW><ROW><id>9256230</id><snippet>def test(x, d):
    for xx in range(100):
        for xxx in range(100):
            d[x]=xx*xxx
</snippet></ROW><ROW><id>9256230</id><snippet>dictionary</snippet></ROW><ROW><id>9256553</id><snippet>report.applicationnumber</snippet></ROW><ROW><id>9256553</id><snippet>with arguments '('',)'</snippet></ROW><ROW><id>9256553</id><snippet>report.applicationnumber</snippet></ROW><ROW><id>9256553</id><snippet>url</snippet></ROW><ROW><id>9256553</id><snippet>^report/newreport//$</snippet></ROW><ROW><id>9256613</id><snippet>clean</snippet></ROW><ROW><id>9256613</id><snippet>clean</snippet></ROW><ROW><id>9256613</id><snippet>ages_list</snippet></ROW><ROW><id>9256613</id><snippet>parse_ages_argument</snippet></ROW><ROW><id>9256613</id><snippet>return</snippet></ROW><ROW><id>9256739</id><snippet>System.out.println(String.format("%10s", "").replace(' ', '*'));</snippet></ROW><ROW><id>9256739</id><snippet>**********</snippet></ROW><ROW><id>9256739</id><snippet>int yournumber = 10;
System.out.println(String.format("%" + yournumber + "s","*").replace(' ', '*'));
</snippet></ROW><ROW><id>9256850</id><snippet>class a(object):
    def __init__(self):
        super(a, self).__init__()
        print "In class a"
        self.a = 1

class b(object):
    def __init__(self):
        super(b, self).__init__()
        print "In class b"
        self.b = 2

class c(b, a):
    pass

obj = c()
</snippet></ROW><ROW><id>9257122</id><snippet>&gt;&gt;&gt; s = 'sdsd'
&gt;&gt;&gt; s.upper()
'SDSD'
</snippet></ROW><ROW><id>9257128</id><snippet>__hash__</snippet></ROW><ROW><id>9257128</id><snippet>Subscription</snippet></ROW><ROW><id>9257128</id><snippet>TipList</snippet></ROW><ROW><id>9257128</id><snippet>seen = set()
new_l = []
for item in l:
    obj = item['object']
    if obj not in seen:
        seen.add(obj)
        new_l.append(item)
</snippet></ROW><ROW><id>9257128</id><snippet>l</snippet></ROW><ROW><id>9257128</id><snippet>new_l</snippet></ROW><ROW><id>9257448</id><snippet>int(hex_str, 16)</snippet></ROW><ROW><id>9257448</id><snippet>write</snippet></ROW><ROW><id>9257448</id><snippet>%d</snippet></ROW><ROW><id>9257448</id><snippet>%s</snippet></ROW><ROW><id>9257448</id><snippet>str</snippet></ROW><ROW><id>9257448</id><snippet>f.write('lon = %d\n' % Lon)
</snippet></ROW><ROW><id>9257448</id><snippet>format</snippet></ROW><ROW><id>9257448</id><snippet>f.write('lon = {0}\n'.format(Lon))
</snippet></ROW><ROW><id>9257724</id><snippet>&gt;&gt;&gt; mystring = ['1      SLES11 SP1 64bit            [datastore1] SLES11 SP1 64bit/SLES11 SP1 64bit.vmx   sles11_64Guest          vmx-08  ']
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r"\s{2,}", mystring[0].strip())
['1', 'SLES11 SP1 64bit', '[datastore1] SLES11 SP1 64bit/SLES11 SP1 64bit.vmx',
'sles11_64Guest', 'vmx-08']
</snippet></ROW><ROW><id>9257768</id><snippet>set</snippet></ROW><ROW><id>9257768</id><snippet>dict</snippet></ROW><ROW><id>9257768</id><snippet>set</snippet></ROW><ROW><id>9257768</id><snippet>dict</snippet></ROW><ROW><id>9257768</id><snippet>set</snippet></ROW><ROW><id>9257768</id><snippet>dict</snippet></ROW><ROW><id>9257768</id><snippet>dict</snippet></ROW><ROW><id>9257768</id><snippet># list already contains names
unique_names = set(list_of_all_names)
unique_list = list(unique_names) # lst now contains only unique names

# extract record field from each record and make set
unique_names = set(x.name for x in list_of_all_records)
unique_list = list(unique_names) # lst now contains only unique names

# make dict mapping name to a complete record
d = dict((x.name, x) for x in list_of_records)
# insert complete record into database using name as key
for name in d:
    insert_into_database(d[name])
</snippet></ROW><ROW><id>9258192</id><snippet>BaseManager</snippet></ROW><ROW><id>9258192</id><snippet>AutoProxy</snippet></ROW><ROW><id>9258192</id><snippet>defaultdict</snippet></ROW><ROW><id>9258192</id><snippet>dict</snippet></ROW><ROW><id>9258192</id><snippet>DictProxy</snippet></ROW><ROW><id>9258192</id><snippet>from multiprocessing import Pool
from multiprocessing.managers import BaseManager, DictProxy
from collections import defaultdict

class MyManager(BaseManager):
    pass

MyManager.register('defaultdict', defaultdict, DictProxy)

def test(k, multi_dict):
    multi_dict[k] += 1

if __name__ == '__main__':
    pool = Pool(processes=4)
    mgr = MyManager()
    mgr.start()
    multi_d = mgr.defaultdict(int)
    for k in 'mississippi':
        pool.apply_async(test, (k, multi_d))
    pool.close()
    pool.join()
    print multi_d.items()
</snippet></ROW><ROW><id>9258274</id><snippet>&gt;&gt;&gt; os.environ.__class__
&lt;class os._Environ at 0xb7865e6c&gt;
</snippet></ROW><ROW><id>9258331</id><snippet>10.0</snippet></ROW><ROW><id>9258331</id><snippet>&gt;&gt;&gt; d = 10
&gt;&gt;&gt; print "Value: %.2f" % float(d)
Value: 10.00
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9258634</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.cumsum([1,2,3,4,5])
array([ 1,  3,  6, 10, 15])
</snippet></ROW><ROW><id>9258634</id><snippet>itertools</snippet></ROW><ROW><id>9258634</id><snippet>accumulate</snippet></ROW><ROW><id>9258634</id><snippet>def cumsum(it):
    total = 0
    for x in it:
        total += x
        yield total
</snippet></ROW><ROW><id>9258634</id><snippet>&gt;&gt;&gt; list(cumsum([1,2,3,4,5]))
&gt;&gt;&gt; [1, 3, 6, 10, 15]
</snippet></ROW><ROW><id>9258834</id><snippet>genre_name</snippet></ROW><ROW><id>9258834</id><snippet>q="""insert into genres (movieid,%(genre_name)s) values (%(movieid)i,1)""" % {'genre_name': 'horro\r', 'movieid': 12}

print q
</snippet></ROW><ROW><id>9258834</id><snippet>) values (12,1)res (movieid,horro</snippet></ROW><ROW><id>9258834</id><snippet>adventure(r)</snippet></ROW><ROW><id>9258922</id><snippet>    Args:
        max_workers: The maximum number of threads that can be used to
            execute the given calls.
</snippet></ROW><ROW><id>9258922</id><snippet>    if len(self._threads) &lt; self._max_workers:
        t = threading.Thread(target=_worker,
                             args=(weakref.ref(self, weakref_cb),
                                   self._work_queue))
</snippet></ROW><ROW><id>9258922</id><snippet>len(self._threads)</snippet></ROW><ROW><id>9259335</id><snippet>pk</snippet></ROW><ROW><id>9259335</id><snippet>SequenceField</snippet></ROW><ROW><id>9259542</id><snippet>$elemMatch</snippet></ROW><ROW><id>9259542</id><snippet>Agent.objects.filter(
    name='ashraf',  
    __raw__={"skills": {
        "$elemMatch": {
            "level": {"$gt": 5}, 
            "name": "Computer Skills"
        }
    }}
)
</snippet></ROW><ROW><id>9259638</id><snippet>for attr in dir(project):
    if not attr.startswith("_"):
        globals()[attr] = getattr(project, attr)
</snippet></ROW><ROW><id>9259638</id><snippet>import this</snippet></ROW><ROW><id>9259743</id><snippet>def srk_func(words):
    current = []
    lastc = []
    for x in words:
        if len(current) == 0: 
                current.append(int(x))
        elif len(current) == 1:
                if current[0] &lt; int(x):
                        current.append(int(x))
                else:          
                        if len(current) &gt;= len(lastc):
                                lastc = current
                        current[:] = []
                        current.append(int(x))
        elif len(current) &gt;= 2:
                if current[-1] &lt; int(x):
                        current.append(int(x))
                else:          
                        if len(current) &gt;= len(lastc):
                                lastc = current
                        elif len(current) &lt; len(lastc):
                                current[:] = []
                        current[:] = []
                        current.append(int(x))
    return lastc

def jm_func(words):
    current = []
    lastc = []
    for w in words:
        x = int(w)
        if not current:
            # this happens only on the first element
            current = [x]
            continue
        if x &gt; current[-1]:
            current.append(x)
        else:
            # no increase, so current is complete
            if len(current) &gt;= len(lastc):
                lastc = current
            current = [x]
    # end of input, so current is complete
    if len(current) &gt;= len(lastc):
        lastc = current
    return lastc

tests = """\
    1
    1 5
    5 1
    1 5 7
    7 5 1
    1 5 7 0
    1 5 7 0 3
    1 5 7 0 2 4 6 8
    1 3 5 7 9 11 0 2
    """

for test in tests.splitlines():
    wds = test.split()
    print wds
    print srk_func(wds)
    print jm_func(wds)
    print

8&lt;--------------------------------------------------

['1']
[]
[1]

['1', '5']
[]
[1, 5]

['5', '1']
[1]
[1]

['1', '5', '7']
[]
[1, 5, 7]

['7', '5', '1']
[1]
[1]

['1', '5', '7', '0']
[0]
[1, 5, 7]

['1', '5', '7', '0', '3']
[0, 3]
[1, 5, 7]

['1', '5', '7', '0', '2', '4', '6', '8']
[0, 2, 4, 6, 8]
[0, 2, 4, 6, 8]

['1', '3', '5', '7', '9', '11', '0', '2']
[0, 2]
[1, 3, 5, 7, 9, 11]

[]
[]
[]
</snippet></ROW><ROW><id>9259743</id><snippet>len(current) == 1</snippet></ROW><ROW><id>9259743</id><snippet>  elif len(current) &lt; len(lastc):
        current[:] = []
</snippet></ROW><ROW><id>9259743</id><snippet>&gt;&gt;&gt; current = [1, 2, 3, 4, 5]
&gt;&gt;&gt; lastc = current # lastc and current refer to THE SAME LIST; no copying!
&gt;&gt;&gt; print current
[1, 2, 3, 4, 5]
&gt;&gt;&gt; print lastc
[1, 2, 3, 4, 5]
&gt;&gt;&gt; current[:] = [] # The list to which current refers is cleared
&gt;&gt;&gt; print current
[]
&gt;&gt;&gt; print lastc # lastc refers to the same list
[]
</snippet></ROW><ROW><id>9259743</id><snippet>current</snippet></ROW><ROW><id>9259959</id><snippet>_hashlib</snippet></ROW><ROW><id>9259959</id><snippet>sys.builtin_module_names</snippet></ROW><ROW><id>9259959</id><snippet>_hashlib.so</snippet></ROW><ROW><id>9259959</id><snippet>lib/python/lib/python2.6/lib-dynload/_hashlib.so</snippet></ROW><ROW><id>9259959</id><snippet>export KOMODO_DIR=/home/davidf/Applications/Komodo-IDE-7
hg clone http://hg.python.org/cpython
cd cpython
hg checkout v2.6.5
(
    cd $KOMODO_DIR/lib/python/lib
    # handle no libssl.so
    ln -s /lib/libssl.so.0.9.8
    ln -s ./libssl.so.0.9.8 libssl.so
    # save the original _hashlib library
    cd python2.6/lib-dynload/
    mv _hashlib.so _hashlib.so.orig
)
# cd to python src for python 2.6.5
./configure --prefix $KOMODO_DIR/lib/python/

# step here to patch setup.py as @jalefkowit describes
# ...

# build and copy result to komodo's lib-dynload directory
$KOMODO_DIR/lib/python/bin/python setup.py build_ext
cp build/lib.linux-i686-2.6/_hashlib.so $KOMODO_DIR/lib/python/lib/python2.6/lib-dynload/
</snippet></ROW><ROW><id>9259959</id><snippet>libssl.so.0.9.8</snippet></ROW><ROW><id>9259959</id><snippet>libssl.so</snippet></ROW><ROW><id>9259981</id><snippet>array</snippet></ROW><ROW><id>9259981</id><snippet>a = array.array('f')
a.fromfile(f, n)
</snippet></ROW><ROW><id>9259981</id><snippet>tolist</snippet></ROW><ROW><id>9260020</id><snippet>allocateIds(max=)</snippet></ROW><ROW><id>9260020</id><snippet>999999999</snippet></ROW><ROW><id>9260020</id><snippet>allocate_ids</snippet></ROW><ROW><id>9260020</id><snippet>&gt;&gt;&gt; Foo.allocate_ids(max=26740080011040)
(26740080011031L, 26740080011040L)
</snippet></ROW><ROW><id>9260020</id><snippet>&gt;&gt;&gt; Foo.allocate_ids(max=26740080011040)
(26740080011041L, 26740080011040L)
</snippet></ROW><ROW><id>9260020</id><snippet>&gt;&gt;&gt; Foo.allocate_ids(max=26740080011050)
(26740080011041L, 26740080011050L)
</snippet></ROW><ROW><id>9260168</id><snippet>import random

def weighted_choice(weights):
    totals = []
    running_total = 0

    for w in weights:
        running_total += w
        totals.append(running_total)

    rnd = random.random() * running_total
    for i, total in enumerate(totals):
        if rnd &lt; total:
            return i
</snippet></ROW><ROW><id>9260232</id><snippet>t = mythread()
t.start()
</snippet></ROW><ROW><id>9260232</id><snippet>target</snippet></ROW><ROW><id>9260232</id><snippet>Thread</snippet></ROW><ROW><id>9260320</id><snippet>r'normal/api(?P&lt;json_flag&gt;/json/?)$'</snippet></ROW><ROW><id>9260320</id><snippet>json</snippet></ROW><ROW><id>9260912</id><snippet>{
'list1': {
    'title': "This is the title",
    'active': True,
    },
'list2: {
    'active': False,
    },
}
</snippet></ROW><ROW><id>9260912</id><snippet>for k, v in my_yaml.iteritems():
    if 'title' in v:
        # the title is present
    else:
        # it's not.
</snippet></ROW><ROW><id>9261390</id><snippet>make_server/serve_forever</snippet></ROW><ROW><id>9261390</id><snippet>application</snippet></ROW><ROW><id>9261471</id><snippet>celery.contrib.methods</snippet></ROW><ROW><id>9261583</id><snippet>**</snippet></ROW><ROW><id>9261583</id><snippet>tol=10**(-10)</snippet></ROW><ROW><id>9261583</id><snippet>1E-10</snippet></ROW><ROW><id>9261583</id><snippet>^</snippet></ROW><ROW><id>9261944</id><snippet>for event in eventset.order_by('-likes'):</snippet></ROW><ROW><id>9262150</id><snippet>__unicode__</snippet></ROW><ROW><id>9262150</id><snippet>ComponentType</snippet></ROW><ROW><id>9262150</id><snippet>ProductInline</snippet></ROW><ROW><id>9262150</id><snippet>queryset</snippet></ROW><ROW><id>9262150</id><snippet>select_related('ChipStepping')</snippet></ROW><ROW><id>9262150</id><snippet>ComponentType</snippet></ROW><ROW><id>9262150</id><snippet>objects</snippet></ROW><ROW><id>9262150</id><snippet>get_query_set</snippet></ROW><ROW><id>9262150</id><snippet>select_related</snippet></ROW><ROW><id>9262762</id><snippet>#Usage: response.set_cookie( 'cookie_name', 'cookie_value' )

class RefererMiddleware(object):
    def process_response(self, request, response):
        if not request.COOKIES.has_key( 'HTTP_REFERER' ):
            response.set_cookie( 'HTTP_REFERER', request.META.get('HTTP_REFERER') )
        return response
</snippet></ROW><ROW><id>9263288</id><snippet>add</snippet></ROW><ROW><id>9263288</id><snippet>class GroupMembers(models.Model):
    group = models.ForeignKey(Group)
    person = models.ForeignKey(Person)
</snippet></ROW><ROW><id>9263288</id><snippet>order</snippet></ROW><ROW><id>9263288</id><snippet>class GroupMembers(models.Model):
    class Meta:
        ordering = ['order']

    group = models.ForeignKey(Group)
    person = models.ForeignKey(Person)
    order = models.PositiveIntegerField(default=0)
</snippet></ROW><ROW><id>9263288</id><snippet>class GroupMembers(models.Model):
    group = models.ForeignKey(Group)
    person = models.ForeignKey(Person, through='GroupMembers')
</snippet></ROW><ROW><id>9263288</id><snippet>add</snippet></ROW><ROW><id>9263288</id><snippet>prs = Person.objects.create(name="Tom")
GroupMembers.objects.create(person=prs, group=grp, order=1)
prs = Person.objects.create(name="Dick")
GroupMembers.objects.create(person=prs, group=grp, order=2)
prs = Person.objects.create(name="Harry")
GroupMembers.objects.create(person=prs, group=grp, order=3)
</snippet></ROW><ROW><id>9263288</id><snippet>Group.objects.get(id=1).members.all()[0]
</snippet></ROW><ROW><id>9263288</id><snippet>BooleanField</snippet></ROW><ROW><id>9263288</id><snippet>class GroupMembers(models.Model):
    group = models.ForeignKey(Group)
    person = models.ForeignKey(Person)
    is_main_user = models.BooleanField(default=False)
</snippet></ROW><ROW><id>9263288</id><snippet>prs = Person.objects.create(name="Tom")
GroupMembers.objects.create(person=prs, group=grp, is_main_user=True)
</snippet></ROW><ROW><id>9263288</id><snippet>Group.objects.get(id=1).members.filter(is_main_user=True)[0]
</snippet></ROW><ROW><id>9263508</id><snippet>savez</snippet></ROW><ROW><id>9263508</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; import base64
&gt;&gt;&gt; arrs = {'data/a.text': numpy.array([1,2]),
            'data/b.text': numpy.array([3,4]),
            'data/c.text': numpy.array([5,6])}
&gt;&gt;&gt; numpy.savez('file.npz', **dict((base64.urlsafe_b64encode(k), v)
                                    for k,v in arrs.iteritems()))
&gt;&gt;&gt; npzfile = numpy.load('file.npz')
&gt;&gt;&gt; decoded = dict((base64.urlsafe_b64decode(k), v)
                   for k,v in npzfile.iteritems())
&gt;&gt;&gt; decoded
{'data/c.text': array([5, 6]),
 'data/a.text': array([1, 2]),
 'data/b.text': array([3, 4])}
</snippet></ROW><ROW><id>9263523</id><snippet>main</snippet></ROW><ROW><id>9263523</id><snippet> app_win.protocol("WM_DELETE_WINDOW", handler)
</snippet></ROW><ROW><id>9263523</id><snippet>handler</snippet></ROW><ROW><id>9263523</id><snippet>def handler():
    f = open("backup", "w")
    f.write(app_entry.get())
    f.close()
    app_win.quit()
</snippet></ROW><ROW><id>9263606</id><snippet>from django.utils import simplejson

some_data_to_dump = {
   'some_var_1': 'foo',
   'some_var_2': 'bar',
}

data = simplejson.dumps(some_data_to_dump)
</snippet></ROW><ROW><id>9263606</id><snippet>from django.core import serializers

foos = Foo.objects.all()

data = serializers.serialize('json', foos)
</snippet></ROW><ROW><id>9263606</id><snippet>return HttpResponse(data, mimetype='application/json')
</snippet></ROW><ROW><id>9263689</id><snippet>timer = TimerService(5, poller.poll)</snippet></ROW><ROW><id>9263689</id><snippet>timer = TimerService(0.1, poller.poll)</snippet></ROW><ROW><id>9263749</id><snippet>\b((xn--)?[a-z0-9\w]+(-[a-z0-9]+)*\.)+[a-z]{2,}\b 
</snippet></ROW><ROW><id>9263759</id><snippet>C:\Progra~1\Java\jrockit-jre1.6.0_29-R28.2.0' but if you open a command prompt and use</snippet></ROW><ROW><id>9263759</id><snippet>C:\&gt;dir /x c:\progr*
 Volume in drive C is XP System
 Volume Serial Number is D8B8-DBEB

 Directory of c:\

30/01/2012  16:16    &lt;DIR&gt;          PROGRA~1     Program Files
13/02/2012  13:51    &lt;DIR&gt;          PROGRA~2     Program Files (x86)
               0 File(s)              0 bytes
               2 Dir(s)  26,189,307,904 bytes free
</snippet></ROW><ROW><id>9263834</id><snippet>my_str.split()</snippet></ROW><ROW><id>9263834</id><snippet>my_str = "hello world"
words = my_str.split()
print words[1]
</snippet></ROW><ROW><id>9263834</id><snippet>my_str</snippet></ROW><ROW><id>9263834</id><snippet>my_str.split()</snippet></ROW><ROW><id>9263834</id><snippet>my_str</snippet></ROW><ROW><id>9263834</id><snippet>my_str.split()</snippet></ROW><ROW><id>9264248</id><snippet>os.getcwd()</snippet></ROW><ROW><id>9264293</id><snippet>__lt</snippet></ROW><ROW><id>9264293</id><snippet>__year</snippet></ROW><ROW><id>9264293</id><snippet>__month</snippet></ROW><ROW><id>9264293</id><snippet>year</snippet></ROW><ROW><id>9264293</id><snippet>date</snippet></ROW><ROW><id>9264293</id><snippet>date = datetime.date(year, month, 1)
news = News.objects.filter(date__lt=date)
</snippet></ROW><ROW><id>9264556</id><snippet>from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base= declarative_base()

tagging = Table('tagging',Base.metadata,
    Column('tag_id', Integer, ForeignKey('tag.id', ondelete='cascade'), primary_key=True),
    Column('role_id', Integer, ForeignKey('role.id', ondelete='cascade'), primary_key=True)
)

class Tag(Base):

    __tablename__ = 'tag'
    id = Column(Integer, primary_key=True)
    name = Column(String(100), unique=True, nullable=False)

    def __init__(self, name=None):
        self.name = name

class Role(Base):
    __tablename__ = 'role'

    id = Column(Integer, primary_key=True)
    tag_names = association_proxy('tags', 'name')

    tags = relationship('Tag', 
                        secondary=tagging, 
                        cascade='all,delete-orphan', 
                        backref=backref('roles', cascade='all'))


e = create_engine("sqlite://", echo=True)

Base.metadata.create_all(e)

s = Session(e)

r1 = Role()
r1.tag_names.extend(["t1", "t2", "t3"])
s.add(r1)
s.commit()
</snippet></ROW><ROW><id>9264556</id><snippet>... creates tables
/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/properties.py:918: SAWarning: On Role.tags, delete-orphan cascade is not supported on a many-to-many or many-to-one relationship when single_parent is not set.   Set single_parent=True on the relationship().
  self._determine_direction()
Traceback (most recent call last):
  ... stacktrace ...
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/attributes.py", line 349, in hasparent
    assert self.trackparent, "This AttributeImpl is not configured to track parents."
AssertionError: This AttributeImpl is not configured to track parents.
</snippet></ROW><ROW><id>9264556</id><snippet>tags = relationship('Tag', 
                    secondary=tagging, 
                    cascade='all,delete-orphan', 
                    single_parent=True,
                    backref=backref('roles', cascade='all'))
</snippet></ROW><ROW><id>9264556</id><snippet>r1 = Role()
r2 = Role()

t1, t2 = Tag("t1"), Tag("t2")
r1.tags.extend([t1, t2])
r2.tags.append(t1)
</snippet></ROW><ROW><id>9264556</id><snippet>sqlalchemy.exc.InvalidRequestError: Instance &lt;Tag at 0x101503a10&gt; is already associated with an instance of &lt;class '__main__.Role'&gt; via its Role.tags attribute, and is only allowed a single parent.
</snippet></ROW><ROW><id>9264556</id><snippet>r1.tags.remove(t1)</snippet></ROW><ROW><id>9264556</id><snippet>from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import event

Base= declarative_base()

tagging = Table('tagging',Base.metadata,
    Column('tag_id', Integer, ForeignKey('tag.id', ondelete='cascade'), primary_key=True),
    Column('role_id', Integer, ForeignKey('role.id', ondelete='cascade'), primary_key=True)
)

class Tag(Base):

    __tablename__ = 'tag'
    id = Column(Integer, primary_key=True)
    name = Column(String(100), unique=True, nullable=False)

    def __init__(self, name=None):
        self.name = name

class Role(Base):
    __tablename__ = 'role'

    id = Column(Integer, primary_key=True)
    tag_names = association_proxy('tags', 'name')

    tags = relationship('Tag', 
                        secondary=tagging,
                        backref='roles')

@event.listens_for(Session, 'after_flush')
def delete_tag_orphans(session, ctx):
    session.query(Tag).\
        filter(~Tag.roles.any()).\
        delete(synchronize_session=False)

e = create_engine("sqlite://", echo=True)

Base.metadata.create_all(e)

s = Session(e)

r1 = Role()
r2 = Role()
r3 = Role()
t1, t2, t3, t4 = Tag("t1"), Tag("t2"), Tag("t3"), Tag("t4")

r1.tags.extend([t1, t2])
r2.tags.extend([t2, t3])
r3.tags.extend([t4])
s.add_all([r1, r2, r3])

assert s.query(Tag).count() == 4

r2.tags.remove(t2)

assert s.query(Tag).count() == 4

r1.tags.remove(t2)

assert s.query(Tag).count() == 3

r1.tags.remove(t1)

assert s.query(Tag).count() == 2
</snippet></ROW><ROW><id>9264556</id><snippet>DELETE FROM tag WHERE NOT (EXISTS (SELECT 1 
FROM tagging, role 
WHERE tag.id = tagging.tag_id AND role.id = tagging.role_id))
</snippet></ROW><ROW><id>9264665</id><snippet>signal.setitimer()</snippet></ROW><ROW><id>9264760</id><snippet>from BeautifulSoup import BeautifulSoup

page = """
&lt;tr class="class1 class2 class3"&gt;1&lt;/tr&gt;
&lt;tr class="class1 class2 class3"&gt;2&lt;/tr&gt;
&lt;tr class="class1 class5"&gt;3&lt;/tr&gt;
&lt;tr class="class1_a class5_a"&gt;4&lt;/tr&gt;
&lt;tr class="class1 class5"&gt;5&lt;/tr&gt;
&lt;tr class="class1_a class5_a"&gt;6&lt;/tr&gt;
&lt;tr&gt;7&lt;/tr&gt;"""

def cond(x):
    if x:
        return x.startswith("class1") and not "class2 class3" in x
    else:
        return False

soup = BeautifulSoup(page)
rows = soup.findAll('tr', {'class': cond})

for row in rows:
    print row
</snippet></ROW><ROW><id>9264760</id><snippet>&lt;tr class="class1 class5"&gt;3&lt;/tr&gt;
&lt;tr class="class1_a class5_a"&gt;4&lt;/tr&gt;
&lt;tr class="class1 class5"&gt;5&lt;/tr&gt;
&lt;tr class="class1_a class5_a"&gt;6&lt;/tr&gt;
</snippet></ROW><ROW><id>9264760</id><snippet>import re
from bs4 import BeautifulSoup

page = """
&lt;tr class="class1 class2 class3"&gt;1&lt;/tr&gt;
&lt;tr class="class1 class2 class3"&gt;2&lt;/tr&gt;
&lt;tr class="class1 class5"&gt;3&lt;/tr&gt;
&lt;tr class="class1_a class5_a"&gt;4&lt;/tr&gt;
&lt;tr class="class1 class5"&gt;5&lt;/tr&gt;
&lt;tr class="class1_a class5_a"&gt;6&lt;/tr&gt;
&lt;tr&gt;7&lt;/tr&gt;"""

soup = BeautifulSoup(page)
rows = soup.find_all('tr', {'class': re.compile('class1.*')})

for row in rows:
    cls = row.attrs.get("class")
    if not ("class2" in cls or "class3" in cls):
        print row
</snippet></ROW><ROW><id>9264760</id><snippet>&lt;tr class="class1 class5"&gt;3&lt;/tr&gt;
&lt;tr class="class1_a class5_a"&gt;4&lt;/tr&gt;
&lt;tr class="class1 class5"&gt;5&lt;/tr&gt;
&lt;tr class="class1_a class5_a"&gt;6&lt;/tr&gt;
</snippet></ROW><ROW><id>9264760</id><snippet>class</snippet></ROW><ROW><id>9264845</id><snippet>counter += 1
</snippet></ROW><ROW><id>9264845</id><snippet>counter</snippet></ROW><ROW><id>9264845</id><snippet>increment()</snippet></ROW><ROW><id>9264845</id><snippet>counter</snippet></ROW><ROW><id>9264845</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>9264845</id><snippet>counter</snippet></ROW><ROW><id>9264845</id><snippet>global</snippet></ROW><ROW><id>9264845</id><snippet>increment()</snippet></ROW><ROW><id>9264845</id><snippet>counter</snippet></ROW><ROW><id>9264845</id><snippet>nonlocal</snippet></ROW><ROW><id>9265056</id><snippet>import os
import random
import shutil

def copy_sample(src, dst, size=500):
    files = [os.path.join(src, i) for i in random.sample(os.listdir(src), size)]
    count = len(files)
    for index, afile in enumerate(files):
        try:
           shutil.copy(afile, dst)
           print 'Copied file %s (%d/%d)' % (afile, index + 1, count)
        except Exception, msg:
           print 'Failed file %s (%d/%d) -- %s' % (afile, index + 1, count, msg)

src = '/home/mjanja/Desktop/Leaves'
dst = '/home/mjanja/Desktop/Positive Leaves'

copy_sample(src, dst)
</snippet></ROW><ROW><id>9265501</id><snippet>__init__</snippet></ROW><ROW><id>9265501</id><snippet>__new__</snippet></ROW><ROW><id>9265501</id><snippet>contract_types = ['item','vendor']</snippet></ROW><ROW><id>9265508</id><snippet>hours = int(time[:2])
minutes = int(time[3:])
</snippet></ROW><ROW><id>9265508</id><snippet>hours = int(time.split(":")[0])
minutes = int(time.split(":")[1])
</snippet></ROW><ROW><id>9265954</id><snippet>from numpy import genfromtxt
rdata = genfromtxt('AllcorrR.csv', skip_header=1)[:,1:]
Pdata = genfromtxt('AllcorrP.csv', skip_header=1)[:,1:]
</snippet></ROW><ROW><id>9265954</id><snippet>print Pdata &lt; 0.05
</snippet></ROW><ROW><id>9265954</id><snippet>print rdata[Pdata &lt; 0.05]
</snippet></ROW><ROW><id>9265980</id><snippet>import urllib2

opener = urllib2.build_opener()

headers = {
  'User-Agent': 'Mozilla/5.0 (Windows NT 5.1; rv:10.0.1) Gecko/20100101 Firefox/10.0.1',
}

opener.addheaders = headers.items()
response = opener.open("http://www.zdnet.co.kr/news/news_print.asp?artice_id=20110727092902")

print response.headers
print response.read()
</snippet></ROW><ROW><id>9265980</id><snippet>User-Agent</snippet></ROW><ROW><id>9266005</id><snippet>super()</snippet></ROW><ROW><id>9266005</id><snippet>Player</snippet></ROW><ROW><id>9266005</id><snippet>kwargs</snippet></ROW><ROW><id>9266005</id><snippet>__init__()</snippet></ROW><ROW><id>9266005</id><snippet>class Collidable(object):
    def handle_collision(other, incident_vector):
        pass

    def __init__(self, shape, **kwargs):
        self.shape = shape
        super(Collidable, self).__init__(**kwargs)

class Movable(object):
    def update_position(self):
        self.velocity += self.acceleration
        self.position += self.velocity

    def __init__(self, velocity, acceleration, **kwargs):
        self.velocity, self.acceleration = velocity, acceleration
        super(Movable, self).__init__(**kwargs)

class Drawable(object):
    def draw(self):
        pass

    def __init__(self, image, **kwargs):
        self.image = image
        super(Drawable, self).__init__(**kwargs)

class Controllable(object):
    def key_down(self, key):
        pass

    def __init__(self, **kwargs):
        super(Controllable, self).__init__(**kwargs)
</snippet></ROW><ROW><id>9266005</id><snippet>Player</snippet></ROW><ROW><id>9266005</id><snippet>class Player(Collidable, Movable, Drawable, Controllable):
    pass
</snippet></ROW><ROW><id>9266005</id><snippet>&gt;&gt;&gt; p = Player(shape='circle', velocity=0.0, acceleration=1.0, image='player.png')
&gt;&gt;&gt; p.shape
'circle'
&gt;&gt;&gt; p.velocity
0.0
&gt;&gt;&gt; p.acceleration
1.0
</snippet></ROW><ROW><id>9266005</id><snippet>Player</snippet></ROW><ROW><id>9266005</id><snippet>__init__()</snippet></ROW><ROW><id>9266005</id><snippet>class Player(Collidable, Movable, Drawable, Controllable):
    def __init__(name, **kwargs):
        self.name = name
        super(Player, self).__init__(**kwargs)
</snippet></ROW><ROW><id>9266219</id><snippet>typ, data = imap_server.search(None, '(SUBJECT "Whatever you are searching for")')
</snippet></ROW><ROW><id>9266398</id><snippet>"""</snippet></ROW><ROW><id>9266398</id><snippet>'''</snippet></ROW><ROW><id>9266398</id><snippet>sys.exit()</snippet></ROW><ROW><id>9266398</id><snippet>import sys</snippet></ROW><ROW><id>9266810</id><snippet>strptime()</snippet></ROW><ROW><id>9266810</id><snippet>out_ts</snippet></ROW><ROW><id>9266810</id><snippet>&gt;&gt;&gt; out_ts = 82128.668173
&gt;&gt;&gt; time.strptime(str(out_ts), '%H%M%S.%f')
time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=21, tm_sec=28, tm_wday=0, tm_yday=1, tm_isdst=-1)
&gt;&gt;&gt; datetime.strptime(str(out_ts), '%H%M%S.%f')
datetime.datetime(1900, 1, 1, 8, 21, 28, 668173)
</snippet></ROW><ROW><id>9266810</id><snippet>out_ts</snippet></ROW><ROW><id>9266810</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>9266810</id><snippet>datetime</snippet></ROW><ROW><id>9266810</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; out_ts = 82128.668173
&gt;&gt;&gt; dt = datetime.strptime(str(out_ts), '%H%M%S.%f')
&gt;&gt;&gt; td = timedelta(hours=dt.hour, minutes=dt.minute, seconds=dt.second)
&gt;&gt;&gt; td
datetime.timedelta(0, 30088)
&gt;&gt;&gt; date = datetime(2012, 2, 13)
&gt;&gt;&gt; full_time = date + td
&gt;&gt;&gt; full_time
datetime.datetime(2012, 2, 13, 8, 21, 28)
&gt;&gt;&gt; epoch = time.mktime(full_time.timetuple())
&gt;&gt;&gt; epoch
1329150088.0
</snippet></ROW><ROW><id>9266970</id><snippet>for line in myfile.readline():
</snippet></ROW><ROW><id>9266970</id><snippet>for line in myfile:
</snippet></ROW><ROW><id>9266970</id><snippet>myfile.readline()</snippet></ROW><ROW><id>9266970</id><snippet>for
line in myfile</snippet></ROW><ROW><id>9267262</id><snippet>datefmt = %s
</snippet></ROW><ROW><id>9267262</id><snippet>[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %s
</snippet></ROW><ROW><id>9267262</id><snippet>logging.Formatter</snippet></ROW><ROW><id>9267395</id><snippet>/usr/local/bin/python2.7</snippet></ROW><ROW><id>9267395</id><snippet>echo $PATH
</snippet></ROW><ROW><id>9267395</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>9267395</id><snippet>/Library/Frameworks/Python.frameworks/Version/2.7/bin</snippet></ROW><ROW><id>9267395</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>9267395</id><snippet>port select</snippet></ROW><ROW><id>9267395</id><snippet>$ sudo port select --list python
Available versions for python:
    none
    python25-apple
    python26-apple
    python27 (active)
    python27-apple
    python32
</snippet></ROW><ROW><id>9267419</id><snippet>&gt;&gt;&gt; x = ["Albert Einstein", "test 1 s 2", "Einstein Albert", "foo bar baz", "baz foo bar"]
&gt;&gt;&gt; list(set(' '.join(sorted(s.split())) for s in x))
['bar baz foo', '1 2 s test', 'Albert Einstein']
</snippet></ROW><ROW><id>9267715</id><snippet>.filter(player__playerinjury__returned=False).annotate(...)</snippet></ROW><ROW><id>9267735</id><snippet>delete()</snippet></ROW><ROW><id>9267735</id><snippet>ModelAdmin.delete_view</snippet></ROW><ROW><id>9267735</id><snippet>SomeModel</snippet></ROW><ROW><id>9267735</id><snippet>has_delete_permission</snippet></ROW><ROW><id>9267735</id><snippet>class SomeModelAdmin(admin.ModelAdmin):
    ...
    def has_delete_permission(self, request, obj=None):
        """
        Return False for events in the past
        """
        if obj is None:
            # obj is None in the model admin changelist view
            return False
        now = datetime.datetime.now()
        if obj.end &lt; now:
            return False # past events cannot be deleted
        else:
            return super(SomeModelAdmin, self).has_delete_permission(request, obj)
</snippet></ROW><ROW><id>9267735</id><snippet>SomeModel</snippet></ROW><ROW><id>9267735</id><snippet>has_delete_permission</snippet></ROW><ROW><id>9267735</id><snippet>InlineModelAdmin</snippet></ROW><ROW><id>9267906</id><snippet>server {
    listen 80;
    rewrite ^(.*) https://$host$1 permanent;
}

server {
    listen 443;
    # The rest of your original server config here
}
</snippet></ROW><ROW><id>9267934</id><snippet>email</snippet></ROW><ROW><id>9268106</id><snippet>class FlatIzip(object):
    def __init__(self, *args):
        self.generators = args
    def __iter__(self):
        iters = [iter(x) for x in self.generators]
        while True:
            result = []
            for iterator in iters:
                element = iterator.next()
                if isinstance(element, tuple):
                    result += list(element)
                else:
                    result.append(element)
            yield tuple(result)

#Example:

from itertools import izip

g1 = xrange(10)
g2 = xrange(10,20)
g3 = xrange(20, 30)
g4 = izip(xrange(40,50), xrange(50,60))


lg = [g1, g2, g3, g4]

for x in FlatIzip(*lg):
    print x
</snippet></ROW><ROW><id>9268741</id><snippet>progress_bar</snippet></ROW><ROW><id>9268741</id><snippet>import time, sys

# The print statement effectively treats '\r' as a newline, 
# so use sys.stdout.write() and .flush() instead ...
def carriage_return_a():
    sys.stdout.write('\r')
    sys.stdout.flush()

# ... or send a terminal control code to non-windows systems
# (this is what the `progress_bar` module does)
def carriage_return_b():
    if sys.platform.lower().startswith('win'):
        print '\r'
    else:
        print chr(27) + '[A'

bar_len = 10
for i in range(bar_len + 1):
    # Generate a fixed-length string of '*' and ' ' characters
    bar = ''.join(['*'] * i + [' '] * (bar_len - i))

    # Insert the above string and the current value of i into a format
    # string and print, suppressing the newline with a comma at the end
    print '[{0}] {1}'.format(bar, i),

    # Write a carriage return, sending the cursor back to the beginning
    # of the line without moving to a new line. 
    carriage_return_a()

    # Sleep
    time.sleep(1)
</snippet></ROW><ROW><id>9268741</id><snippet>update()</snippet></ROW><ROW><id>9268741</id><snippet>class SimpleProgressBar(object):
    def __init__(self, maximum, state=0):
        self.max = maximum
        self.state = state

    def _carriage_return(self):
        sys.stdout.write('\r')
        sys.stdout.flush()

    def _display(self):
        stars = ''.join(['*'] * self.state + [' '] * (self.max - self.state))
        print '[{0}] {1}/{2}'.format(stars, self.state, self.max),
        self._carriage_return()

    def update(self, value=None):
        if not value is None:
            self.state = value
        self._display()

spb = SimpleProgressBar(10)
for i in range(0, 11):
    time.sleep(.3)
    spb.update(i)
</snippet></ROW><ROW><id>9268866</id><snippet>import os
for root, dirs, files in os.walk('/root'):
    for basename in files:
        filename = os.path.join(root, basename)
        status = os.stat(filename)
        if status.st_mtime &gt; timestamp:
            print filename
</snippet></ROW><ROW><id>9268912</id><snippet>&gt;&gt;&gt;&gt; import mechanize

&gt;&gt;&gt;&gt; cj1 = mechanize.CookieJar()
&gt;&gt;&gt;&gt; cj2 = mechanize.CookieJar()
&gt;&gt;&gt;&gt; mech1 = mechanize.OpenerFactory().build_opener(mechanize.HTTPCookieProcessor(cj1))
&gt;&gt;&gt;&gt; mech2 = mechanize.OpenerFactory().build_opener(mechanize.HTTPCookieProcessor(cj2))

&gt;&gt;&gt;&gt; request = mechanize.Request('http://example.com') # testing shows they can share a request

&gt;&gt;&gt;&gt; response1 = mech1.open(request)
&gt;&gt;&gt;&gt; response2 = mech2.open(request)

&gt;&gt;&gt;&gt; print cj1
&lt;mechanize._clientcookie.CookieJar[&lt;Cookie JSESSIONID=54FBB2BE99E4CFDA8F8386F52FCF59C3&gt;]&gt;
&gt;&gt;&gt;&gt; print cj2
&lt;mechanize._clientcookie.CookieJar[&lt;Cookie JSESSIONID=350C0D544CDAD344A1272DA8D7B016B0&gt;]&gt;
</snippet></ROW><ROW><id>9269313</id><snippet>yield Request(a_url[0],
                meta={'item': aitem, 'dont_retry':1}, dont_filter=True,
                callback=self.redeem_url, 
                errback=lambda x:self.error_page(x,aitem))


def redeem_url(self, response):
   item = response.request.meta['item']
   item['Click_to_Redeem_URL'] = response.url
   yield item
</snippet></ROW><ROW><id>9269316</id><snippet>import re
pattern = re.compile(r"/(?P&lt;artist&gt;[a-zA-Z0-9 ]+?)/(?P&lt;release&gt;[a-zA-Z0-9 ]+?)/(?P&lt;tracknumber&gt;\d+?) - (?P&lt;title&gt;[a-zA-Z0-9 ]+?).flac")
s = "/The Prodigy/The Fat Of The Land/04 - Funky Stuff.flac"
m = pattern.search(s)
print m.group('artist')
print m.group('release')
print m.group('track number')
print m.group('title')
</snippet></ROW><ROW><id>9269316</id><snippet>[a-zA-Z0-9 ]</snippet></ROW><ROW><id>9269327</id><snippet>pymemcompat.h:10:20: error: Python.h: No such file or directory
_mysql.c:30:26: error: structmember.h: No such file or directory
</snippet></ROW><ROW><id>9269327</id><snippet>yum install python-devel mysql-devel
</snippet></ROW><ROW><id>9269342</id><snippet>def orderList2(item, level=0):
    for i in item:
        if isinstance(i, basestring):
            print level, i.encode('utf-8'), 'tuple &lt;br /&gt;'
        elif isinstance(i, tuple):
            orderList2(i, level)
        else:
            orderList2(i, level+1)
</snippet></ROW><ROW><id>9269342</id><snippet>&gt;&gt;&gt; item = [(u'Arts &amp; Entertainment', [u'Celebrities &amp; Entertainment News', (u'Comics &amp; Animation', [u'Anime &amp; Manga', u'Cartoons', u'Comics'])])]
&gt;&gt;&gt; orderList2(item)
0 Arts &amp; Entertainment tuple &lt;br /&gt;
1 Celebrities &amp; Entertainment News tuple &lt;br /&gt;
1 Comics &amp; Animation tuple &lt;br /&gt;
2 Anime &amp; Manga tuple &lt;br /&gt;
2 Cartoons tuple &lt;br /&gt;
2 Comics tuple &lt;br /&gt;
</snippet></ROW><ROW><id>9269342</id><snippet>orderList2(item)</snippet></ROW><ROW><id>9269342</id><snippet>i</snippet></ROW><ROW><id>9269342</id><snippet>isinstance(i, str)</snippet></ROW><ROW><id>9269342</id><snippet>basestring</snippet></ROW><ROW><id>9269357</id><snippet>index = 0
while index &lt; linCirc.length:
   if linCirc[index][0] == 0:
       index = index + linCirc[index][1]
   else:
       index = index + 1
</snippet></ROW><ROW><id>9269357</id><snippet>[0, i]</snippet></ROW><ROW><id>9269357</id><snippet>i</snippet></ROW><ROW><id>9269790</id><snippet>#!/usr/bin/python

print 'Content-Type: text/html'
print
print '&lt;html&gt;'
print '&lt;head&gt;&lt;title&gt;Hello from Python&lt;/title&gt;&lt;/head&gt;'
print '&lt;body&gt;'
print '&lt;h2&gt;Hello from Python&lt;/h2&gt;'
print '&lt;/body&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>9269790</id><snippet>python -m CGIHTTPServer</snippet></ROW><ROW><id>9269790</id><snippet>localhost:8000/cgi-bin/yourscript.py</snippet></ROW><ROW><id>9269847</id><snippet>new_instancemethod()</snippet></ROW><ROW><id>9269847</id><snippet>types.MethodType</snippet></ROW><ROW><id>9269847</id><snippet>type(DiscreteKey.baseData)</snippet></ROW><ROW><id>9269847</id><snippet>&lt;type 'instancemethod'&gt;</snippet></ROW><ROW><id>9269847</id><snippet>new_instancemethod()</snippet></ROW><ROW><id>9269964</id><snippet>type</snippet></ROW><ROW><id>9269964</id><snippet>SubClass = type('SubClass', (EntityResource,), {})
</snippet></ROW><ROW><id>9269964</id><snippet>type</snippet></ROW><ROW><id>9269964</id><snippet>type</snippet></ROW><ROW><id>9269964</id><snippet>class SubClass(EntityResource):
    A=1
    B=2
</snippet></ROW><ROW><id>9269964</id><snippet> SubClass = type('SubClass', (EntityResource,), {'A': 1, 'B': 2})
</snippet></ROW><ROW><id>9270007</id><snippet>g = open('test.gnuplot', 'w')
g.write("[snip]")
g.flush()
os.fsync(g.fileno()) 
os.system("gnuplot test.gnuplot")
</snippet></ROW><ROW><id>9270007</id><snippet>os.system("sleep 1")</snippet></ROW><ROW><id>9270010</id><snippet>./demo.py</snippet></ROW><ROW><id>9270010</id><snippet>bash demo.py</snippet></ROW><ROW><id>9270010</id><snippet>bash -c ./demo.py</snippet></ROW><ROW><id>9270010</id><snippet>demo.py</snippet></ROW><ROW><id>9270257</id><snippet>d=input();print[d*1.8+32,(d-32)/1.8][input('c?')]
</snippet></ROW><ROW><id>9270375</id><snippet>__repr__</snippet></ROW><ROW><id>9270375</id><snippet>__str__</snippet></ROW><ROW><id>9270375</id><snippet>Person</snippet></ROW><ROW><id>9270375</id><snippet>&gt;&gt;&gt; class Person:
...     def __init__(self,first,last,id,email):
...         self.firstName=first
...         self.lastName=last
...         self.id=id
...         self.email=email
...         self.friends=[]
...     def add_friend(self,friend):
...         if len(self.friends)&lt;5:
...             self.friends.append(friend)
...         if len(friend.friends)&lt;5:
...             friend.friends.append(self)
...     def __repr__(self):
...         return self.firstName + ' ' + self.lastName
</snippet></ROW><ROW><id>9270375</id><snippet>&gt;&gt;&gt; print p1.friends
[Bob Jones, James Smith, Tim Jack, Jim Johnston, Gina Relent]
</snippet></ROW><ROW><id>9270375</id><snippet>__repr__</snippet></ROW><ROW><id>9270375</id><snippet>__str__</snippet></ROW><ROW><id>9270375</id><snippet>__repr__</snippet></ROW><ROW><id>9270375</id><snippet>def __repr__(self):
    template = "Person('{0}', '{1}', '{2}', '{3}')"
    return template.format(self.firstName, self.lastName, self.id, self.email)
</snippet></ROW><ROW><id>9270375</id><snippet>friends</snippet></ROW><ROW><id>9270375</id><snippet>&gt;&gt;&gt; print p1
Person('David', 'Waver', '922-43-9873', 'dwaver@wsu.edu')
&gt;&gt;&gt; Person('David', 'Waver', '922-43-9873', 'dwaver@wsu.edu')
Person('David', 'Waver', '922-43-9873', 'dwaver@wsu.edu')
</snippet></ROW><ROW><id>9270749</id><snippet>&gt;&gt;&gt; b = '010000010100001001000011'
&gt;&gt;&gt; bin_chunks = [b[8*i:8*(i+1)] for i in xrange(len(b)//8)]
&gt;&gt;&gt; print bin_chunks
['01000001', '01000010', '01000011']
&gt;&gt;&gt; ints = [int(x, 2) for x in bin_chunks]
&gt;&gt;&gt; print ints
[65, 66, 67]
&gt;&gt;&gt; chars = [chr(x) for x in ints]
&gt;&gt;&gt; print chars
['A', 'B', 'C']
&gt;&gt;&gt; print ''.join(chars)
ABC
</snippet></ROW><ROW><id>9270940</id><snippet>rstrip</snippet></ROW><ROW><id>9270940</id><snippet>replace</snippet></ROW><ROW><id>9270940</id><snippet>rsplit</snippet></ROW><ROW><id>9270940</id><snippet>split</snippet></ROW><ROW><id>9270940</id><snippet>rpartition</snippet></ROW><ROW><id>9270940</id><snippet>float</snippet></ROW><ROW><id>9270940</id><snippet>def findFloat(stringArg):
    return float(stringArg.replace('-', ':').rpartition(':')[2])
</snippet></ROW><ROW><id>9270943</id><snippet>x</snippet></ROW><ROW><id>9270943</id><snippet>y</snippet></ROW><ROW><id>9270943</id><snippet>w</snippet></ROW><ROW><id>9270943</id><snippet>x</snippet></ROW><ROW><id>9270943</id><snippet>h</snippet></ROW><ROW><id>9270943</id><snippet>y</snippet></ROW><ROW><id>9270943</id><snippet>x</snippet></ROW><ROW><id>9270943</id><snippet>y</snippet></ROW><ROW><id>9270943</id><snippet>w</snippet></ROW><ROW><id>9270943</id><snippet>h</snippet></ROW><ROW><id>9270943</id><snippet>x + w</snippet></ROW><ROW><id>9270943</id><snippet>user2</snippet></ROW><ROW><id>9270943</id><snippet>y + h</snippet></ROW><ROW><id>9270943</id><snippet>user1</snippet></ROW><ROW><id>9271040</id><snippet>cacerts.txt</snippet></ROW><ROW><id>9271040</id><snippet>#!/usr/bin/env python3
import http.client
import ssl

context = ssl.SSLContext(ssl.PROTOCOL_SSLv3)
context.verify_mode = ssl.CERT_REQUIRED

context.load_verify_locations('cacert.pem') # works
#### context.set_default_verify_paths() # also might work
#### context.load_verify_locations('cacerts.txt') # ssl.SSLError

h = http.client.HTTPSConnection('api.instagram.com', 443, context=context)
h.request('POST', '/oauth/access_token')
resp = h.getresponse()
print(resp.status, resp.reason) # produce expected 400 http error
print(resp.headers) 
print(resp.read())
</snippet></ROW><ROW><id>9271078</id><snippet>result = dictionary(fin)
</snippet></ROW><ROW><id>9271078</id><snippet>dictionary</snippet></ROW><ROW><id>9271078</id><snippet>result</snippet></ROW><ROW><id>9271078</id><snippet>result</snippet></ROW><ROW><id>9271078</id><snippet>def dictionary(words):
    result = {}
    for word in words:
        word = word.strip()
        result[word] = 'yupp!'
    return result

with open('words.txt') as fin:
    result = dictionary(fin)
    print('the' in result)
</snippet></ROW><ROW><id>9271078</id><snippet>def dictionary(words):
    return dict.fromkeys((word.strip() for word in words), 'yupp')
</snippet></ROW><ROW><id>9271410</id><snippet>os.walk</snippet></ROW><ROW><id>9271410</id><snippet>subprocess</snippet></ROW><ROW><id>9271608</id><snippet>&gt;&gt;&gt; x = 1; if x: if x: print x
  File "&lt;stdin&gt;", line 1
    x = 1; if x: if x: print x
            ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>9271608</id><snippet>if</snippet></ROW><ROW><id>9271608</id><snippet>else</snippet></ROW><ROW><id>9271608</id><snippet>if test1: if test2: print x
</snippet></ROW><ROW><id>9271635</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; import re
&gt;&gt;&gt; soup = BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;img style="background:url(/theRealImage.jpg) no-repate 0 0; height:90px; width:92px;") src="notTheRealImage.jpg"/&gt;&lt;/body&gt;&lt;/html&gt;')
&gt;&gt;&gt; style = soup.find('img')['style']
&gt;&gt;&gt; urls = re.findall('url\((.*?)\)', style)
&gt;&gt;&gt; urls
[u'/theRealImage.jpg']
</snippet></ROW><ROW><id>9271635</id><snippet>img</snippet></ROW><ROW><id>9271722</id><snippet>create_upload_url</snippet></ROW><ROW><id>9271871</id><snippet>ser.baudrate = 115200
</snippet></ROW><ROW><id>9271922</id><snippet>self.txt = gtk.Entry()
...
self.txt.get_text()
</snippet></ROW><ROW><id>9272408</id><snippet>lista = ["Albert Eienstein","Neils Bohr"]
dictb = {}
for elem in lista:
    dictb[elem] = elem.split(' ')

print dictb

Output: {'Neils Bohr': ['Neils', 'Bohr'], 'Albert Eienstein': ['Albert', 'Eienstein']}
</snippet></ROW><ROW><id>9272879</id><snippet>set</snippet></ROW><ROW><id>9272879</id><snippet>rare = set(["word1","word4","word5"])
freq = set(["word1","word2","word3"])
</snippet></ROW><ROW><id>9272879</id><snippet>("this", "is", "a", "tuple")
("anotherone",)
</snippet></ROW><ROW><id>9273317</id><snippet>    while(1):
        # Get auction list
        auction_list = Auction.objects.all()

        # Checking auctions
        for auction in auction_list:
            auction.update_auction()


        # Remove connection statements
        db.reset_queries()

        # Release lock tables
        db.transaction.commit_unless_managed()

        # Pause
        sleep(1)
</snippet></ROW><ROW><id>9273493</id><snippet>fabric</snippet></ROW><ROW><id>9273493</id><snippet>logging</snippet></ROW><ROW><id>9273956</id><snippet>def go_multi(self, widget, data=None):
    p = Process(target = self.change_textview)
    p.start()
    p.join()
</snippet></ROW><ROW><id>9273956</id><snippet>change_textview</snippet></ROW><ROW><id>9273956</id><snippet>GLib.idle_add</snippet></ROW><ROW><id>9273956</id><snippet>GObject.idle_add</snippet></ROW><ROW><id>9273956</id><snippet>Gtk.main()</snippet></ROW><ROW><id>9273956</id><snippet> GObject.threads_init()
 Gdk.threads_init()
</snippet></ROW><ROW><id>9273956</id><snippet> Gdk.threads_enter()
 # your code here
 Gdk.threads_leave()
</snippet></ROW><ROW><id>9274039</id><snippet>print sumsqrt # print the address of the object in memory, similar to id(sumsqrt)
</snippet></ROW><ROW><id>9274039</id><snippet>print sumsqrt()  # call the function and print what it returns.
</snippet></ROW><ROW><id>9274151</id><snippet>any()</snippet></ROW><ROW><id>9274151</id><snippet>any(3 in t or 7 in t for t in a)
</snippet></ROW><ROW><id>9274344</id><snippet>IDs = {}

tables = ['Fruit','Colour'];
for table in tables:
  rows = db_conn.execute("SELECT ID FROM %s" % table)
  for row in rows:
    if IDs.has_key(row['ID']):
      print "Duplicate ID %s is present in both %s and %s" % (row['ID'], table, IDs[row['ID']])
    else:
      IDs[row['ID']] = table
</snippet></ROW><ROW><id>9274387</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
from email.header    import Header
from email.mime.text import MIMEText
from getpass         import getpass
from smtplib         import SMTP_SSL

login, password = 'user@gmail.com', getpass('Gmail password:')

# create message
msg = MIMEText('message body…', _charset='utf-8')
msg['Subject'] = Header('subject…', 'utf-8')
msg['From'] = login
msg['To'] = login

# send it via gmail
s = SMTP_SSL('smtp.gmail.com', 465, timeout=10)
s.set_debuglevel(0)
try:
    s.login(login, password)
    s.sendmail(msg['From'], msg['To'], msg.as_string())
finally:
    s.quit()
</snippet></ROW><ROW><id>9274764</id><snippet>'\xebE\xc2\xe4.\t312874@gg.com'</snippet></ROW><ROW><id>9274764</id><snippet>u'\xebE\xc2\xe4.\t312874@gg.com'</snippet></ROW><ROW><id>9274764</id><snippet>'\xebE\xc2\xe4.\t312874@gg.com'.decode("utf-8")</snippet></ROW><ROW><id>9274787</id><snippet>&gt; a = []
&gt;&gt;&gt; for i in xrange(3):
...     a.append([])
...     for j in xrange(3):
...             a[i].append(i+j)
</snippet></ROW><ROW><id>9274787</id><snippet>n = 7
a = [[0]*n for x in xrange(n)]
</snippet></ROW><ROW><id>9275090</id><snippet>file_path = "C:\\Users\\me\\myImg.tif"
color_settings = "North America General Purpose 2"


from win32com.client.dynamic import Dispatch

ps_app = Dispatch( "Photoshop.Application" )

# set photoshop to use pixels as dimensions
ps_app.Preferences.RulerUnits = 1               # 'for PsUnits --&gt; 1 (psPixels)         
ps_app.Preferences.TypeUnits = 1                # 'for PsTypeUnits --&gt; 1 (psPixels)

doc = ps_app.Open( file_path )                  # Open a file and store open file as doc
dpi     = doc.Resolution
width   = doc.Width         
height  = doc.Height            

cor_res = 1024

ps_app.ChangeColorSettings( color_settings )
doc.ResizeImage( cor_res , cor_res , 72 )


options = Dispatch('Photoshop.TiffSaveOptions')
options.ImageCompression = 1                    # ps_appNoTIFFCompression
options.Layers = False                          # no layers


doc.SaveAs( file_path , options )               # Save with specified options
doc.Close( 2 )                                  # psDoNotSaveChanges
</snippet></ROW><ROW><id>9275152</id><snippet>sha1</snippet></ROW><ROW><id>9275160</id><snippet>x_0 = (points[0].getX())
x_02 = (points[1].getX())
x_1 = (((points[0].getX())/3)*2 +  (points[1].getX())/3)
x_2 = (((points[0].getX())/3)   + ((points[1].getX())/3)*2)
</snippet></ROW><ROW><id>9275245</id><snippet>RFC822</snippet></ROW><ROW><id>9275245</id><snippet>RCF822</snippet></ROW><ROW><id>9275245</id><snippet>results, datas = imap_server.fetch(i, "(RCF822)")
</snippet></ROW><ROW><id>9275245</id><snippet>results, datas = imap_server.fetch(i, "(RFC822)")
</snippet></ROW><ROW><id>9275245</id><snippet>for i in response[0].split():
    results, datas = m.fetch(i, "(RFC822)")
</snippet></ROW><ROW><id>9275322</id><snippet>develop</snippet></ROW><ROW><id>9275451</id><snippet>foo_input = raw_input("Enter foo: ")

required_foo_type = float # aka type(3.0)
try:
     bar = required_foo_type(foo_input)
except TypeError:
     print "wrong input"
</snippet></ROW><ROW><id>9275579</id><snippet>property</snippet></ROW><ROW><id>9275579</id><snippet>@property
def my_attribute():
    if not hasattr(self, '_my_attribute'):
        do_expensive_operation_to_get_attribute()
    return self._my_attribute
</snippet></ROW><ROW><id>9275725</id><snippet>QSpinBox</snippet></ROW><ROW><id>9275725</id><snippet>textFromValue</snippet></ROW><ROW><id>9275725</id><snippet>QString MySpinBox::textFromValue(int value)
{
   return this-&gt;locale()-&gt;toString(value);
}
</snippet></ROW><ROW><id>9275785</id><snippet>[i[0] for i in taskscheduler.__dict__.items() if i[1] == 267008]
</snippet></ROW><ROW><id>9276036</id><snippet>adminform.form</snippet></ROW><ROW><id>9276036</id><snippet>img</snippet></ROW><ROW><id>9276036</id><snippet>{% block form_top %}
   &lt;img src="{{ adminform.form.img.value }}"/&gt;
{% endblock %}
</snippet></ROW><ROW><id>9276036</id><snippet>UserImage</snippet></ROW><ROW><id>9276036</id><snippet>user_image</snippet></ROW><ROW><id>9276036</id><snippet>show_user_image</snippet></ROW><ROW><id>9276129</id><snippet>ax.xaxis.set_major_locator(ticker.LogLocator(base = 1000.0))
</snippet></ROW><ROW><id>9276512</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; import time
&gt;&gt;&gt; import contextlib
&gt;&gt;&gt;
&gt;&gt;&gt; def timeit():
...   s = time.time()
...   try:
...     yield
...   except urllib2.URLError:
...     pass
...   print 'took %.3f secs' % (time.time() - s)
...
&gt;&gt;&gt; timeit = contextlib.contextmanager(timeit)
&gt;&gt;&gt; with timeit():
...   r = urllib2.urlopen('http://loc:8080', None, 2)
...
took 2.002 secs
&gt;&gt;&gt; with timeit():
...   r = urllib2.urlopen('http://loc:8080', None, 5)
...
took 5.003 secs
</snippet></ROW><ROW><id>9276687</id><snippet>class XyzParseError(Exception):
    pass
</snippet></ROW><ROW><id>9276687</id><snippet>XyzParser</snippet></ROW><ROW><id>9276687</id><snippet>HTMLParser</snippet></ROW><ROW><id>9276786</id><snippet>import gc

    class A(object):
        scope = 'a'

    class B(object):
        scope = 'b'
        contained = A()

    b = B()

    print gc.get_referrers(b.contained)[0]['scope']
</snippet></ROW><ROW><id>9276786</id><snippet>get_referrers()</snippet></ROW><ROW><id>9276904</id><snippet>clock = pygame.time.Clock()
while True:
    # limit the framerate and get the delta time
    dt = clock.tick(60)

    # convert the delta to seconds (for easier calculation)
    speed = 1 / float(dt)

    # do all your stuff, calculate your heroes vector movement
    # if heroes position is "px, py" and movement is "mx, my"
    # then multiply with speed
    px *= mx * speed
    py *= my * speed
</snippet></ROW><ROW><id>9277016</id><snippet>import</snippet></ROW><ROW><id>9277016</id><snippet>sqlite3</snippet></ROW><ROW><id>9277158</id><snippet>&gt;&gt;&gt; from django.forms.models import modelform_factory
&gt;&gt;&gt; modelform_factory(MyModel)
&lt;class 'django.forms.models.MyModelForm'&gt;
</snippet></ROW><ROW><id>9277158</id><snippet>def my_view(request):
    # ...
    MyForm = modelform_factory(MyModel)
    form = MyForm(request.POST) #  or however you would use a 'regular' form
</snippet></ROW><ROW><id>9277177</id><snippet>from ex48 import lexicon
result = lexicon.scan("north south east")
</snippet></ROW><ROW><id>9277177</id><snippet>lexicon.py</snippet></ROW><ROW><id>9277177</id><snippet>ex48</snippet></ROW><ROW><id>9277177</id><snippet>lexicon.py</snippet></ROW><ROW><id>9277177</id><snippet>scan</snippet></ROW><ROW><id>9277177</id><snippet>lexicon</snippet></ROW><ROW><id>9277177</id><snippet>lexicon</snippet></ROW><ROW><id>9277177</id><snippet>lexicon</snippet></ROW><ROW><id>9277177</id><snippet>from ex48.lexicon.lexicon import lexicon
</snippet></ROW><ROW><id>9277449</id><snippet>GET</snippet></ROW><ROW><id>9277449</id><snippet>def get_success_url(self):
   url = reverse('success')
   # maybe use urlencode for more complicated parameters
   return "%s?foo=%s" % (url, self.request.POST['bar'])
</snippet></ROW><ROW><id>9277449</id><snippet>foo: {{ request.GET.foo }}
</snippet></ROW><ROW><id>9277493</id><snippet>foobar</snippet></ROW><ROW><id>9277493</id><snippet>top</snippet></ROW><ROW><id>9277493</id><snippet>import top.foo.bar.foobar
</snippet></ROW><ROW><id>9277493</id><snippet>top</snippet></ROW><ROW><id>9278274</id><snippet>APPEND_SLASH = False</snippet></ROW><ROW><id>9278304</id><snippet>import re
try:
    from htmlentitydefs import name2codepoint
except ImportError:
    # Must be Python 3.x
    from html.entities import name2codepoint
    unichr = chr

name2codepoint = name2codepoint.copy()
name2codepoint['apos']=ord("'")

EntityPattern = re.compile('&amp;(?:#(\d+)|(?:#x([\da-fA-F]+))|([a-zA-Z]+));')

def decodeEntities(s, encoding='utf-8'):
    def unescape(match):
        code = match.group(1)
        if code:
            return unichr(int(code, 10))
        else:
            code = match.group(2)
            if code:
                return unichr(int(code, 16))
            else:
                code = match.group(3)
                if code in name2codepoint:
                    return unichr(name2codepoint[code])
        return match.group(0)

    return EntityPattern.sub(unescape, s.decode(encoding))

someText = decodeEntities(b"Ström")
print(someText)
</snippet></ROW><ROW><id>9278359</id><snippet>def appendDict(list1, list2, resultDict):
    for idx, val in enumerate(list1):
        if isinstance(val, list):       
            appendDict(val, list2[idx], resultDict)
        else:
            resultDict[val] = list2[idx]

list1=['k1','k2','k3',['k4','k5',['k6','k7']]]
list2=['v1','v2','v3',['v4','v5',['v6','v7']]]
resultDict = {}
appendDict(list1, list2, resultDict)
print resultDict

{'k3': 'v3', 'k2': 'v2', 'k1': 'v1', 'k7': 'v7', 'k6': 'v6', 'k5': 'v5', 'k4': 'v4'}
</snippet></ROW><ROW><id>9278412</id><snippet>(global-set-key [C-f10] 'gud-next)
(global-set-key [C-f11] 'gud-step)
(global-set-key [C-f5] 'gud-cont)
(global-set-key [C-f12] 'gud-break)
</snippet></ROW><ROW><id>9278593</id><snippet>isdir</snippet></ROW><ROW><id>9278593</id><snippet>import os

basedir = "V:/Inbox/"
dir = os.listdir(basedir)

for item in dir:
    itempath = os.path.join(basedir, item)
    if os.path.isdir(itempath):
        print "is Directory"
    else:
        print "is file"
</snippet></ROW><ROW><id>9278593</id><snippet>print</snippet></ROW><ROW><id>9279064</id><snippet>new_string = re.sub(r'\.(\d+\. )', '&lt;/p&gt;&lt;p style="text-align: justify;"&gt;\\1', old_string)
</snippet></ROW><ROW><id>9279218</id><snippet>except (TypeError, AttributeError), e:
    # e is the Exception object
    logger.exception(e)
</snippet></ROW><ROW><id>9279218</id><snippet>except TypeError, e:
    logger.exception('There was a Type Error; details are %s' % e)
    # Do something, or raise another exception
except AttributeError, e:
    logger.exception('There was an Attribute Error; details are %s' % e)
    # Do something, or raise another exception
</snippet></ROW><ROW><id>9279218</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>9279690</id><snippet>for character in line.rstrip():
</snippet></ROW><ROW><id>9279690</id><snippet>with open('townhall.map', 'r') as f:
    for line in f: 
        for character in line.rstrip():
            if character == "x":
                print "WALL"
            elif character == "a":
                print "LAND"
            else:
                print "Unexpected Error loading map!"
</snippet></ROW><ROW><id>9279690</id><snippet>char = {'x': 'WALL',
        'a': 'LAND'}
with open('townhall.map', 'r') as f:
    for line in f: 
        for character in line.rstrip():
            try:
                print char[character]
            except KeyError:
                print "Unexpected Error loading map!"
</snippet></ROW><ROW><id>9279847</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>9279847</id><snippet>RequestContext</snippet></ROW><ROW><id>9279847</id><snippet>render_to_response</snippet></ROW><ROW><id>9279847</id><snippet>view_cat</snippet></ROW><ROW><id>9279847</id><snippet>RequestContext</snippet></ROW><ROW><id>9279847</id><snippet>{{ static_url }}</snippet></ROW><ROW><id>9279847</id><snippet>RequestContext</snippet></ROW><ROW><id>9279847</id><snippet>return render_to_response('cats.html', {
    'cat': cat,
    'posts': Post.objects.filter(cat=cat)[:5]
},
context_instance=RequestContext(request))
</snippet></ROW><ROW><id>9279847</id><snippet>render</snippet></ROW><ROW><id>9279847</id><snippet>from django.shortcuts import render
...
    return render('cats.html', {        
        'cat': cat,
        'posts': Post.objects.filter(cat=cat)[:5]
    })
</snippet></ROW><ROW><id>9280052</id><snippet>urls.py</snippet></ROW><ROW><id>9280052</id><snippet>ListView</snippet></ROW><ROW><id>9280052</id><snippet>get_queryset</snippet></ROW><ROW><id>9280052</id><snippet>class PendingApplicationView(ListView):
    def get_queryset(self):
        return Application.objects.filter(status='IP', principle_investigator=self.request.user)

# url pattern
url(r'^application/pending/$', PendingApplicationView.as_view()),
</snippet></ROW><ROW><id>9280294</id><snippet>Popen</snippet></ROW><ROW><id>9280294</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9280294</id><snippet>import subprocess

child = subprocess.Popen([flash_filepath])
# At this point, the child process runs concurrently with the current process

# Do other stuff

# And later on, when you need the subprocess to finish or whatever
result = child.wait()
</snippet></ROW><ROW><id>9280294</id><snippet>Popen</snippet></ROW><ROW><id>9280294</id><snippet>child</snippet></ROW><ROW><id>9280506</id><snippet>s = "012345"
[s[i:i + 2] for i in range(0, len(s), 2)]
</snippet></ROW><ROW><id>9280506</id><snippet>tuple(s[i:i + 2] for i in range(0, len(s), 2))
</snippet></ROW><ROW><id>9280945</id><snippet>diff -r affaa93fad92 examples/beaker_caching/caching_query.py
--- a/examples/beaker_caching/caching_query.py  Tue Feb 14 10:16:16 2012 -0500
+++ b/examples/beaker_caching/caching_query.py  Tue Feb 14 11:57:59 2012 -0500
@@ -268,8 +268,5 @@
             value = bind.value

         v.append(value)
-    if query._criterion is not None:
-        visitors.traverse(query._criterion, {}, {'bindparam':visit_bindparam})
-    for f in query._from_obj:
-        visitors.traverse(f, {}, {'bindparam':visit_bindparam})
+    visitors.traverse(query.statement, {}, {'bindparam':visit_bindparam})
     return v
</snippet></ROW><ROW><id>9281059</id><snippet>Update()</snippet></ROW><ROW><id>9281059</id><snippet>u = u.where(...)
</snippet></ROW><ROW><id>9281076</id><snippet>TripleStore</snippet></ROW><ROW><id>9281076</id><snippet>Graph</snippet></ROW><ROW><id>9281076</id><snippet>Graph</snippet></ROW><ROW><id>9281076</id><snippet>Store</snippet></ROW><ROW><id>9281076</id><snippet>TripleStore</snippet></ROW><ROW><id>9281076</id><snippet>Graph</snippet></ROW><ROW><id>9281134</id><snippet>import pygame
from pygame.locals import *

pygame.init()
screen = pygame.display.set_mode((300, 300))

currtile_x = 0
currtile_y = 0
with open('townhall.map') as f:
    for line in f:
        for character in line:
            if character == '\n':
                currtile_y += 10
                currtile_x = 0
            elif character == 'x':
                pygame.draw.rect(screen, (0,0,0), (currtile_x, currtile_y, 10, 10), 0)
                currtile_x += 10
            elif character == 'a':
                pygame.draw.rect(screen, (0,255,255), (currtile_x, currtile_y, 10, 10), 0)
                currtile_x += 10

running = True
while running:
    for event in pygame.event.get():
        if event.type == QUIT:
            running = False
    pygame.display.update()
</snippet></ROW><ROW><id>9281273</id><snippet>def insertdata(db,tuplelist):
    i = db.insert()
    i.execute([dict(user=elem[0], password=elem[1]) for elem in tuplelist])
#-----main-------
tuplelist = readfile("C:/py/tst.txt")  #parse file is really fast
mydb = initdatabase()
insertdata(mydb,tuplelist)
</snippet></ROW><ROW><id>9281436</id><snippet>SELECT a.x, a.y, (SELECT b.id FROM b where a.id=b.a_id) AS b_id FROM a
</snippet></ROW><ROW><id>9281436</id><snippet>from sqlalchemy.ext.associationproxy import association_proxy

class A(object):
    # ... other things
    b_ids = association_proxy('b_s', 'id')
</snippet></ROW><ROW><id>9281542</id><snippet>object</snippet></ROW><ROW><id>9281548</id><snippet>randomacc@hotmail.com</snippet></ROW><ROW><id>9281548</id><snippet>Reply-To</snippet></ROW><ROW><id>9281548</id><snippet>email = EmailMessage('Subject', 'Body goes here', from_email='test@test.megiteam.pl',
        ['to@example.com',],
        headers = {'Reply-To': 'randomacc@hotmail.com'})
email.send()
</snippet></ROW><ROW><id>9281548</id><snippet>message</snippet></ROW><ROW><id>9281548</id><snippet>from_email</snippet></ROW><ROW><id>9281548</id><snippet>from_email</snippet></ROW><ROW><id>9281548</id><snippet>from_address</snippet></ROW><ROW><id>9281548</id><snippet>test@test.megiteam.pl</snippet></ROW><ROW><id>9281548</id><snippet>DEFAULT_FROM_EMAIL</snippet></ROW><ROW><id>9281548</id><snippet>EmailMessage</snippet></ROW><ROW><id>9281548</id><snippet>send_mail</snippet></ROW><ROW><id>9281548</id><snippet>from django.conf import settings

...
    if form.is_valid():
        cd = form.cleaned_data
        message = cd['message']
        # construct the message body from the form's cleaned data
        body = """\
from: %s
message: %s""" % (cd['email'], cd['message'])
        send_mail(
            cd['subject'],
            body,
            settings.DEFAULT_FROM_EMAIL, # use your email address, not the one from the form
            ['test@test.megiteam.pl'],
        )
</snippet></ROW><ROW><id>9281786</id><snippet>class Super:
   @classmethod
   def do_something(cls):
     print('Super doing something')

class Child(Super):
    def __init__(self):
        self.do_something = lambda: print('Child Doing Something')
</snippet></ROW><ROW><id>9281786</id><snippet>&gt;&gt;&gt; obj = Child()
&gt;&gt;&gt; obj.do_something()
Child Doing Something
&gt;&gt;&gt; Child.do_something()
Super doing something
&gt;&gt;&gt; obj.do_something()
Child Doing Something
</snippet></ROW><ROW><id>9281817</id><snippet>lambda</snippet></ROW><ROW><id>9281817</id><snippet>def GetMaxFlow(flows):        
    maks=max(flows, key=lambda k: len(flows[k]))
    return flows[maks],maks
</snippet></ROW><ROW><id>9281817</id><snippet>def GetMaxFlow(flows):        
    maks=max(flows, key=lambda k: len(flows[k]))
    return len(flows[maks]), maks
</snippet></ROW><ROW><id>9282113</id><snippet>fAlmostEqual</snippet></ROW><ROW><id>9282113</id><snippet>import math

def fAlmostEqual(a, b, rtol=1.0000000000000001e-05, atol=1e-08):
    """Checks if the given floats are almost equal. Uses the algorithm
    from numpy.allclose."""
    return math.fabs(a - b) &lt;= (atol + rtol * math.fabs(b))
</snippet></ROW><ROW><id>9282113</id><snippet>def fuzzyFloor(v):
    """Returns the floor of the given number, unless it is equal to its
    ceiling (within floating point error)."""
    floor = math.floor(v)
    if fAlmostEqual(floor+1, v):
        return floor+1
    return floor

print fuzzyFloor(14.9999999999999)
print fuzzyFloor(15)
print fuzzyFloor(14.99)
print fuzzyFloor(14.5)
</snippet></ROW><ROW><id>9282113</id><snippet>15.0
15.0
14.0
14.0
</snippet></ROW><ROW><id>9282330</id><snippet>/me/friends</snippet></ROW><ROW><id>9282330</id><snippet>installed</snippet></ROW><ROW><id>9282330</id><snippet>fql?q=SELECT uid, name, is_app_user FROM user WHERE uid IN (SELECT uid1 FROM friend WHERE uid2=me()) and is_app_user=1</snippet></ROW><ROW><id>9282330</id><snippet>&lt;?php
  $app_id = 'YOUR_APP_ID';
  $app_secret = 'YOUR_APP_SECRET';
  $my_url = 'POST_AUTH_URL';

  $code = $_REQUEST["code"];

 //auth user
 if(empty($code)) {
    $dialog_url = 'https://www.facebook.com/dialog/oauth?client_id=' 
    . $app_id . '&amp;redirect_uri=' . urlencode($my_url) ;
    echo("&lt;script&gt;top.location.href='" . $dialog_url . "'&lt;/script&gt;");
  }

  //get user access_token
  $token_url = 'https://graph.facebook.com/oauth/access_token?client_id='
    . $app_id . '&amp;redirect_uri=' . urlencode($my_url) 
    . '&amp;client_secret=' . $app_secret 
    . '&amp;code=' . $code;
  $access_token = file_get_contents($token_url);

  // Run fql query
  $fql_query_url = 'https://graph.facebook.com/'
    . '/fql?q=SELECT+uid2+FROM+friend+WHERE+uid1=me()'
    . '&amp;' . $access_token;
  $fql_query_result = file_get_contents($fql_query_url);
  $fql_query_obj = json_decode($fql_query_result, true);

  //display results of fql query
  echo '&lt;pre&gt;';
  print_r("query results:");
  print_r($fql_query_obj);
  echo '&lt;/pre&gt;';

  // Run fql multiquery
  $fql_multiquery_url = 'https://graph.facebook.com/'
    . 'fql?q={"all+friends":"SELECT+uid2+FROM+friend+WHERE+uid1=me()",'
    . '"my+name":"SELECT+name+FROM+user+WHERE+uid=me()"}'
    . '&amp;' . $access_token;
  $fql_multiquery_result = file_get_contents($fql_multiquery_url);
  $fql_multiquery_obj = json_decode($fql_multiquery_result, true);

  //display results of fql multiquery
  echo '&lt;pre&gt;';
  print_r("multi query results:");
  print_r($fql_multiquery_obj);
  echo '&lt;/pre&gt;';
?&gt;
</snippet></ROW><ROW><id>9282902</id><snippet>self._set_x(x)</snippet></ROW><ROW><id>9282902</id><snippet>Parent.__init__</snippet></ROW><ROW><id>9282902</id><snippet>self.x = x</snippet></ROW><ROW><id>9282902</id><snippet>Child._set_x</snippet></ROW><ROW><id>9282902</id><snippet>property.setter</snippet></ROW><ROW><id>9282902</id><snippet>class Child(Parent):
    @Parent.x.setter
    def x(self, arg):
        super()._set_x(arg)
</snippet></ROW><ROW><id>9282902</id><snippet>class Parent(object):
    # ...
    x = property(
        lambda self:    self._get_x(),
        lambda self, x: self._set_x(x)
    )
</snippet></ROW><ROW><id>9282902</id><snippet>Parent._get_x</snippet></ROW><ROW><id>9282902</id><snippet>Parent._set_x</snippet></ROW><ROW><id>9282902</id><snippet>self</snippet></ROW><ROW><id>9282938</id><snippet>text = el.text
text += ''.join(map(lxml.html.tostring, el.iterchildren()))
</snippet></ROW><ROW><id>9282938</id><snippet>el.attrib.clear()
el.tag = '|||'
text = lxml.html.tostring(el)
assert text.startswith('&lt;'+el.tag+'&gt;') and text.endswith('&lt;/'+el.tag+'&gt;')
text = text[len('&lt;'+el.tag+'&gt;'):-len('&lt;/'+el.tag+'&gt;')]
</snippet></ROW><ROW><id>9283052</id><snippet>open()</snippet></ROW><ROW><id>9283052</id><snippet>with</snippet></ROW><ROW><id>9283052</id><snippet>def filter(txt, oldfile, newfile):
    '''\
    Read a list of names from a file line by line into an output file.
    If a line begins with a particular name, insert a string of text
    after the name before appending the line to the output file.
    '''

    with open(newfile, 'w') as outfile, open(oldfile, 'r', encoding='utf-8') as infile:
        for line in infile:
            if line.startswith(txt):
                line = line[0:len(txt)] + ' - Truly a great person!\n'
            outfile.write(line)

# input the name you want to check against
text = input('Please enter the name of a great person: ')    
letsgo = filter(text,'Spanish', 'Spanish2')
</snippet></ROW><ROW><id>9283052</id><snippet>return</snippet></ROW><ROW><id>9283052</id><snippet>return</snippet></ROW><ROW><id>9283052</id><snippet>return</snippet></ROW><ROW><id>9283052</id><snippet>open()</snippet></ROW><ROW><id>9283052</id><snippet>with</snippet></ROW><ROW><id>9283052</id><snippet>with</snippet></ROW><ROW><id>9283052</id><snippet>with</snippet></ROW><ROW><id>9283052</id><snippet>contextlib.nested</snippet></ROW><ROW><id>9283137</id><snippet>access_token=AAABBBB&amp;expires=5173539
</snippet></ROW><ROW><id>9283309</id><snippet>/path/to/mount_point/path/on/remote/server/file.txt
^^^^^^^^^^^^^^^^^^^^- local on mac
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- remote on other machine
</snippet></ROW><ROW><id>9283309</id><snippet>//</snippet></ROW><ROW><id>9283309</id><snippet>//name_of_remote_machine/name_of_share/path/to/file.txt
</snippet></ROW><ROW><id>9283467</id><snippet>b = {v: k for k, v in a.iteritems()}
</snippet></ROW><ROW><id>9283484</id><snippet>/usr/local/bin/zxing.py in &lt;module&gt;()
      3 __requires__ = 'zxing==0.1'
      4 import pkg_resources
----&gt; 5 pkg_resources.run_script('zxing==0.1', 'zxing.py')
</snippet></ROW><ROW><id>9283484</id><snippet>/usr/local/bin/zxing.py</snippet></ROW><ROW><id>9283484</id><snippet>__init__.py</snippet></ROW><ROW><id>9283484</id><snippet>__init__.py</snippet></ROW><ROW><id>9283484</id><snippet>/usr/local/lib/python2.7/dist-packages/zxing</snippet></ROW><ROW><id>9283694</id><snippet>myurl?a=1&amp;b%5Bc%5D=2&amp;b%5Bd%5D=3
</snippet></ROW><ROW><id>9283694</id><snippet>myurl?a=1&amp;b[c]=2&amp;b[d]=3
</snippet></ROW><ROW><id>9283694</id><snippet>jQuery.getJSON("myurl",{data: JSON.stringify(data)}, callback);
</snippet></ROW><ROW><id>9283694</id><snippet>data</snippet></ROW><ROW><id>9283786</id><snippet>sys.executable</snippet></ROW><ROW><id>9283786</id><snippet>subprocess</snippet></ROW><ROW><id>9283786</id><snippet>os.system()</snippet></ROW><ROW><id>9283992</id><snippet>def sum_unique(label, weight):
    order = np.lexsort(label.T)
    label = label[order]
    weight = weight[order]
    unique = np.ones(len(label), 'bool')
    unique[:-1] = (label[1:] != label[:-1]).any(-1)
    totals = weight.cumsum()
    totals = totals[unique]
    totals[1:] = totals[1:] - totals[:-1]
    return label[unique], totals
</snippet></ROW><ROW><id>9283992</id><snippet>In [110]: coord = np.random.randint(0, 3, (10, 2))

In [111]: coord
Out[111]: 
array([[0, 2],
       [0, 2],
       [2, 1],
       [1, 2],
       [1, 0],
       [0, 2],
       [0, 0],
       [2, 1],
       [1, 2],
       [1, 2]])

In [112]: weights = np.ones(10)

In [113]: uniq_coord, sums = sum_unique(coord, weights)

In [114]: uniq_coord
Out[114]: 
array([[0, 0],
       [1, 0],
       [2, 1],
       [0, 2],
       [1, 2]])

In [115]: sums
Out[115]: array([ 1.,  1.,  2.,  3.,  3.])

In [116]: a = np.zeros((3,3))

In [117]: x, y = uniq_coord.T

In [118]: a[x, y] = sums

In [119]: a
Out[119]: 
array([[ 1.,  0.,  3.],
       [ 1.,  0.,  3.],
       [ 0.,  2.,  0.]])
</snippet></ROW><ROW><id>9283992</id><snippet>In [120]: flat_coord = np.ravel_multi_index(coord.T, (3,3))

In [121]: sums = np.bincount(flat_coord, weights)

In [122]: a = np.zeros((3,3))

In [123]: a.flat[:len(sums)] = sums

In [124]: a
Out[124]: 
array([[ 1.,  0.,  3.],
       [ 1.,  0.,  3.],
       [ 0.,  2.,  0.]])
</snippet></ROW><ROW><id>9283993</id><snippet>itemClicked(QListWidgetItem * item)
</snippet></ROW><ROW><id>9283993</id><snippet>itemDoubleClicked(QListWidgetItem * item)
</snippet></ROW><ROW><id>9283993</id><snippet>QtCore.QObject.connect(self.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem)"), self.test)
</snippet></ROW><ROW><id>9284063</id><snippet>import subprocess

def logcommunicate(self, s):
    self.logfilehandle.write("Input "+s)
    std = self.oldcommunicate(s)

    self.logfilehandle.write("Output "+std[0])
    return std

subprocess.Popen.oldcommunicate = subprocess.Popen.communicate
subprocess.Popen.communicate = logcommunicate
logfh = open("/tmp/communicate.log", "a")

proc = subprocess.Popen(['cat'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
proc.logfilehandle = logfh

result = proc.communicate("hello there\n")
print result 
</snippet></ROW><ROW><id>9284063</id><snippet> with open("file.log","wb") as in logfile:
 out = MyOutPutStringIO.StringIO() 
 in = MyInputStringIO.StringIO()
 subprocess.Popen(cmd, shell=True, universal_newlines = True, stdin=in, stdout=out)

 #Then after you are done
 linestotal = []
 for line in in.readlines():
     linestotal.append(line)
 for line in out.readlines():
     linestotal.append(line)

 linestotal.sort(customsortbasedontimestampandinput)

 for line in linestotal.readlines():
    logwrite.write(line)
</snippet></ROW><ROW><id>9284063</id><snippet> with open("file.log","wb") as in logfile:
 subprocess.Popen(cmd, shell=True, universal_newlines = True, stdin=logfile, stdout=logfile)
</snippet></ROW><ROW><id>9284063</id><snippet> with open("stdout.txt","wb") as out:
 with open("stderr.txt","wb") as err:
 with open("stdin.txt","wb") as in:
 subprocess.Popen(cmd, shell=True, universal_newlines = True, stdin=in,stdout=out,stderr=err)
</snippet></ROW><ROW><id>9284123</id><snippet>Axes</snippet></ROW><ROW><id>9284123</id><snippet>set_color_cycle</snippet></ROW><ROW><id>9284123</id><snippet>plot</snippet></ROW><ROW><id>9284123</id><snippet>import matplotlib.pyplot as plt
import numpy as np

X = np.arange(1990, 1994)
Y = [[  1.50615936e+08,   5.88252480e+07,   2.60363587e+08],
     [  1.53193798e+08,   5.91663430e+07,   2.63123995e+08],
     [  1.55704596e+08,   5.94899260e+07,   2.65840188e+08],
     [  1.58175186e+08,   5.97843680e+07,   2.68559452e+08]]
colors = [(0.99609375, 0.3984375, 0.3984375), 
          (0.796875, 0.0, 0.99609375),
          (0.59765625, 0.99609375, 0.0)]

fig = plt.figure()
ax1 = fig.add_subplot(211)
ax1.set_title('old way')
ax1.plot(X, Y)
[ax1.lines[i].set_color(color) for i, color in enumerate(colors)]

ax2 = fig.add_subplot(212)
ax2.set_title('new way')
ax2.set_color_cycle(colors)
ax2.plot(X, Y)

fig.savefig('manycolors.py')
plt.show()
</snippet></ROW><ROW><id>9284252</id><snippet>import Polygon, numpy

# Here I extracted and combined some contours and created a convex hull from it.
# Now I wanna check whether a contour acquired differently intersects with this hull or not.

for contour in contours:  # The result of cv2.findContours is a list of contours
    contour1 = contour.flatten()
    contour1 = numpy.reshape(contour1, (int(contour1.shape[0]/2),-1))
    poly1 = Polygon.Polygon(contour1)

    hull = hull.flatten()  # This is the hull is previously constructued
    hull = numpy.reshape(hull, (int(hull.shape[0]/2),-1))
    poly2 = Polygon.Polygon(hull)

    if (poly1 &amp; poly2).area()&lt;= some_max_val:
        some_operations
</snippet></ROW><ROW><id>9284410</id><snippet>(1 in [1, 0]) and ([1, 0] == True)
</snippet></ROW><ROW><id>9284410</id><snippet>False</snippet></ROW><ROW><id>9284410</id><snippet>a &lt; b &lt; c
</snippet></ROW><ROW><id>9284410</id><snippet>(a &lt; b) and (b &lt; c)
</snippet></ROW><ROW><id>9284410</id><snippet>b</snippet></ROW><ROW><id>9284454</id><snippet>offset</snippet></ROW><ROW><id>9284454</id><snippet>shift</snippet></ROW><ROW><id>9284454</id><snippet>ndimage.shift(img, (10.0, 10.0, 0.0), mode="wrap")</snippet></ROW><ROW><id>9284641</id><snippet>f = open('file.txt','w')
a = input('is python good?')
f.write('answer:'+str(a))
f.close()
</snippet></ROW><ROW><id>9285055</id><snippet>import subprocess32 as subprocess</snippet></ROW><ROW><id>9285069</id><snippet>Globals.blockArray</snippet></ROW><ROW><id>9285069</id><snippet>i</snippet></ROW><ROW><id>9285161</id><snippet>mydict.get('key', default)</snippet></ROW><ROW><id>9285161</id><snippet>None</snippet></ROW><ROW><id>9285238</id><snippet>menuRole</snippet></ROW><ROW><id>9285260</id><snippet>ossauiodev</snippet></ROW><ROW><id>9285395</id><snippet>from bar import Bar
</snippet></ROW><ROW><id>9285395</id><snippet>foo.py</snippet></ROW><ROW><id>9285395</id><snippet>__init.py__</snippet></ROW><ROW><id>9285436</id><snippet>def readRoute(file_name): 
    with open(file_name, 'r') as r:
        for line in r:
            yield (ord(line[0])-65, ord(line[2])-65)

filename = 'route.txt'

for startnode, endnode in readRoute(filename):
    print startnode, endnode
</snippet></ROW><ROW><id>9285489</id><snippet>row</snippet></ROW><ROW><id>9285489</id><snippet>row</snippet></ROW><ROW><id>9285489</id><snippet>gridList</snippet></ROW><ROW><id>9285489</id><snippet>gridList = []
for nlist in Neighbors_List:
    row = []
    for item in nlist:
       row.append(int(FID_GC_dict[item]))
    gridList.append(row)
</snippet></ROW><ROW><id>9285489</id><snippet>gridList = [[int(FID_GC_dict[item]) for item in nlist] 
            for nlist in Neighbors_List]
</snippet></ROW><ROW><id>9285489</id><snippet>list</snippet></ROW><ROW><id>9285600</id><snippet>thrift --gen py Hbase.thrift</snippet></ROW><ROW><id>9285779</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 100)
y1 = 2 * x
y2 = 3 * x

xthresh = 4.5
diff = np.abs(y1 - y2)
below = diff &lt; xthresh
above = diff &gt;= xthresh

# Plot lines below threshold as dotted...
plt.plot(x[below], y1[below], 'b--')
plt.plot(x[below], y2[below], 'g--')

# Plot lines above threshold as solid...
plt.plot(x[above], y1[above], 'b-')
plt.plot(x[above], y2[above], 'g-')

plt.show()
</snippet></ROW><ROW><id>9285779</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 100)
y1 = 2 * np.cos(x)
y2 = 3 * np.sin(x)

xthresh = 2.0
diff = np.abs(y1 - y2)
below = diff &lt; xthresh
above = diff &gt;= xthresh

# Plot lines below threshold as dotted...
plt.plot(np.ma.masked_where(below, x), np.ma.masked_where(below, y1), 'b--')
plt.plot(np.ma.masked_where(below, x), np.ma.masked_where(below, y2), 'g--')

# Plot lines above threshold as solid...
plt.plot(np.ma.masked_where(above, x), np.ma.masked_where(above, y1), 'b-')
plt.plot(np.ma.masked_where(above, x), np.ma.masked_where(above, y2), 'g-')

plt.show()
</snippet></ROW><ROW><id>9285989</id><snippet>lambda key: mydict[key]

def temp_function(key):
    return mydict[key]
</snippet></ROW><ROW><id>9286185</id><snippet>point.connect()</snippet></ROW><ROW><id>9286185</id><snippet>d.sendMessage(message)</snippet></ROW><ROW><id>9286185</id><snippet>d.addCallback(lambda p: p.sendMessage(message))
</snippet></ROW><ROW><id>9286185</id><snippet>transport.write()</snippet></ROW><ROW><id>9286185</id><snippet>self.transport.write(msg.encode('utf-8'))
</snippet></ROW><ROW><id>9286185</id><snippet>Listen.dataReceived()</snippet></ROW><ROW><id>9286185</id><snippet>LineReceiver.lineReceived</snippet></ROW><ROW><id>9286185</id><snippet>1234</snippet></ROW><ROW><id>9286185</id><snippet>8000</snippet></ROW><ROW><id>9286275</id><snippet>__init__.py</snippet></ROW><ROW><id>9286571</id><snippet>&lt;img src="/RH/images/tacha.png" class="myImage" /&gt;
</snippet></ROW><ROW><id>9286571</id><snippet>$('img.myImage').bind('click', function() { 
  alert('testing!'); 
  eliminarRenglon('eliminar','%s'); 
});
</snippet></ROW><ROW><id>9286589</id><snippet>gtk.FileChooser</snippet></ROW><ROW><id>9286589</id><snippet>gtk.RecentManager.add_item()</snippet></ROW><ROW><id>9286589</id><snippet>def log_n_recent_files():
    manager = gtk.recent_manager_get_default()
    manager.purge_items()
    while True:
        time.sleep(1)
        with gtk.gdk.lock:
            items = manager.get_items()
        with open('log.log','a') as f:
            f.write('%f %d\n'%(time.time(), len(items)))
</snippet></ROW><ROW><id>9286589</id><snippet>RecentManager</snippet></ROW><ROW><id>9286589</id><snippet>~/.local/share/recently-used.xbel</snippet></ROW><ROW><id>9286589</id><snippet>recently-used.xbel</snippet></ROW><ROW><id>9286589</id><snippet>recently-used.xbel</snippet></ROW><ROW><id>9286589</id><snippet>gtk.FileChooser</snippet></ROW><ROW><id>9286589</id><snippet>gtk.Settings</snippet></ROW><ROW><id>9286589</id><snippet>gtk-recent-files-limit</snippet></ROW><ROW><id>9286589</id><snippet>gtk-recent-files-max-age</snippet></ROW><ROW><id>9286589</id><snippet>~/.local/share/recently-used.xbel</snippet></ROW><ROW><id>9286589</id><snippet>recently-used.xbel</snippet></ROW><ROW><id>9286589</id><snippet>gtk.FileChooser</snippet></ROW><ROW><id>9286589</id><snippet>gtk.FileSelection</snippet></ROW><ROW><id>9286589</id><snippet>gtk.FileChooser</snippet></ROW><ROW><id>9286636</id><snippet>d = {w: s.count(w) for w in p_words if w in s}
# -&gt; {'cash': 1, 'limited time offer': 1}
</snippet></ROW><ROW><id>9286636</id><snippet>import re
from collections import Counter

p = re.compile('|'.join(map(re.escape, p_words)))
d = Counter(p.findall(s))
# -&gt; Counter({'limited time offer': 2, 'cash': 2})
</snippet></ROW><ROW><id>9286636</id><snippet>fgrep</snippet></ROW><ROW><id>9286636</id><snippet>$ grep -F -o -f  patternlist.txt largetextfile.txt  | sort | uniq -c
</snippet></ROW><ROW><id>9286636</id><snippet>  2 cash
  2 limited time offer
</snippet></ROW><ROW><id>9286676</id><snippet>stdout</snippet></ROW><ROW><id>9286676</id><snippet>with open(PATH, 'wb') as log_file:
    subprocess.check_call(cmd, stdout=log_file)
</snippet></ROW><ROW><id>9286676</id><snippet>cmd</snippet></ROW><ROW><id>9286676</id><snippet>log_file</snippet></ROW><ROW><id>9286702</id><snippet>from random import randint
def generator1():
    for i in range(10000):
        yield (randint(1,10), randint(1,100))
</snippet></ROW><ROW><id>9286702</id><snippet>from collections import defaultdict

tally = defaultdict(int)
for k,v in generator1():
    tally[k] += v

for k in sorted(tally):
    print k, tally[k]
</snippet></ROW><ROW><id>9286702</id><snippet>1 49030
2 51963
3 51396
4 49292
5 51908
6 49481
7 49645
8 49149
9 48523
10 50722
</snippet></ROW><ROW><id>9286702</id><snippet># define coroutine to update defaultdict for every
# key,value pair sent to it
def tallyAccumulator(t):
    try:
        while True:
            k,v = (yield)
            t[k] += v
    except GeneratorExit:
        pass
</snippet></ROW><ROW><id>9286702</id><snippet># init coroutine
tally = defaultdict(int)
c = tallyAccumulator(tally)
c.send(None)
</snippet></ROW><ROW><id>9286702</id><snippet>for val in generator1():
    c.send(val)
</snippet></ROW><ROW><id>9286702</id><snippet>[c.send(val) for val in generator1()]
</snippet></ROW><ROW><id>9286702</id><snippet># create generator expression consumer
from collections import deque
do_all = deque(maxlen=0).extend

# loop thru generator at C speed, instead of Python for-loop speed
do_all(c.send(val) for val in generator1())
</snippet></ROW><ROW><id>9286702</id><snippet>for k in sorted(tally):
    print k, tally[k]
</snippet></ROW><ROW><id>9286702</id><snippet>1 52236
2 49139
3 51848
4 51194
5 51275
6 50012
7 51875
8 46013
9 50955
10 52192
</snippet></ROW><ROW><id>9286736</id><snippet>if int(list[0][11:13])&gt;=17 and int(list[0][11:13])&lt;=19:
    #This is the correct way of printing for aggregate library
    #Print all as a string.
    print  "LongValueSum:" + "Express" + "\t" + list[3]
</snippet></ROW><ROW><id>9286805</id><snippet>"_id"</snippet></ROW><ROW><id>9286805</id><snippet>&gt;&gt;&gt; s = statuses[0] # save just the first one for now
&gt;&gt;&gt; tweet = s.AsDict()
&gt;&gt;&gt; tweet["_id"] = "%d" % tweet["id"]

&gt;&gt;&gt; # (Couch stuff same as before)
&gt;&gt;&gt; dbcouch.save(tweet)
</snippet></ROW><ROW><id>9287095</id><snippet>try:
    from markdown.util import etree
## replace markdown.etree with just etree

#el = markdown.etree.Element("a")
el = etree.Element("a")

## replace markdown.AtomicString with markdown.util.AtomicString

#el.text = markdown.AtomicString(text)
el.text = markdown.util.AtomicString(text)
</snippet></ROW><ROW><id>9287513</id><snippet>next(next_p)</snippet></ROW><ROW><id>9287513</id><snippet>StopIteration</snippet></ROW><ROW><id>9287513</id><snippet>p * 2</snippet></ROW><ROW><id>9287513</id><snippet>p ** 2</snippet></ROW><ROW><id>9287599</id><snippet>()</snippet></ROW><ROW><id>9287599</id><snippet>?</snippet></ROW><ROW><id>9287599</id><snippet>R[eE]</snippet></ROW><ROW><id>9287599</id><snippet>()</snippet></ROW><ROW><id>9287599</id><snippet>[a2geeks]</snippet></ROW><ROW><id>9287599</id><snippet>^</snippet></ROW><ROW><id>9287599</id><snippet>.*</snippet></ROW><ROW><id>9287599</id><snippet>^R[eE]:(\s\[a2geeks\](\sR[eE]:)?)?(.*)
</snippet></ROW><ROW><id>9287797</id><snippet>heapq</snippet></ROW><ROW><id>9287797</id><snippet>pq = []                         # list of entries arranged in a heap
entry_finder = {}               # mapping of tasks to entries
REMOVED = '&lt;removed-task&gt;'      # placeholder for a removed task
counter = itertools.count()     # unique sequence count

def add_task(task, priority=0):
    'Add a new task or update the priority of an existing task'
    if task in entry_finder:
        remove_task(task)
    count = next(counter)
    entry = [priority, count, task]
    entry_finder[task] = entry
    heappush(pq, entry)

def remove_task(task):
    'Mark an existing task as REMOVED.  Raise KeyError if not found.'
    entry = entry_finder.pop(task)
    entry[-1] = REMOVED

def pop_task():
    'Remove and return the lowest priority task. Raise KeyError if empty.'
    while pq:
        priority, count, task = heappop(pq)
        if task is not REMOVED:
            del entry_finder[task]
            return task
    raise KeyError('pop from an empty priority queue')
</snippet></ROW><ROW><id>9287981</id><snippet>&gt;&gt;&gt; ast.literal_eval(text.split(' ', 1)[1])
{'Plot': 'Spanning over one thousand years, and three parallel stories, The Fountain is a story of love, death, spirituality, and the fragility of our existence in this world.', 'Votes': '100139', 'Rated': 'R', 'Response': 'True', 'Title': 'The Fountain', 'Poster': 'http://ia.media-imdb.com/images/M/MV5BMTU5OTczMTcxMV5BMl5BanBnXkFtZTcwNDg3MTEzMw@@._V1_SX320.jpg', 'Writer': 'Darren Aronofsky, Darren Aronofsky', 'ID': 'tt0414993', 'Director': 'Darren Aronofsky', 'Released': '22 Nov 2006', 'Actors': 'Hugh Jackman, Rachel Weisz, Sean Patrick Thomas, Ellen Burstyn', 'Year': '2006', 'Genre': 'Drama, Romance, Sci-Fi', 'Runtime': '1 hr 36 mins', 'Rating': '7.4'}

&gt;&gt;&gt; json.loads(text.split(' ', 1)[1])
{u'Plot': u'Spanning over one thousand years, and three parallel stories, The Fountain is a story of love, death, spirituality, and the fragility of our existence in this world.', u'Votes': u'100139', u'Rated': u'R', u'Response': u'True', u'Title': u'The Fountain', u'Poster': u'http://ia.media-imdb.com/images/M/MV5BMTU5OTczMTcxMV5BMl5BanBnXkFtZTcwNDg3MTEzMw@@._V1_SX320.jpg', u'Writer': u'Darren Aronofsky, Darren Aronofsky', u'ID': u'tt0414993', u'Director': u'Darren Aronofsky', u'Released': u'22 Nov 2006', u'Actors': u'Hugh Jackman, Rachel Weisz, Sean Patrick Thomas, Ellen Burstyn', u'Year': u'2006', u'Genre': u'Drama, Romance, Sci-Fi', u'Runtime': u'1 hr 36 mins', u'Rating': u'7.4'}
</snippet></ROW><ROW><id>9288042</id><snippet>from visual import *
import math

def make_grid(unit, n):
    nunit = unit * n
    f = frame()
    for i in xrange(n+1):
        if i%5==0: 
            color = (1,1,1)
        else:
            color = (0.5, 0.5, 0.5)

        curve(pos=[(0,i*unit,0), (nunit, i*unit, 0)],color=color,frame=f)
        curve(pos=[(i*unit,0,0), (i*unit, nunit, 0)],color=color,frame=f)
    return f

arrow(pos=(0,0,0), axis=(5,0,0), color=(1,0,0), shaftwidth=0.1)    
arrow(pos=(0,0,0), axis=(0,5,0), color=(0,1,0), shaftwidth=0.1)    
arrow(pos=(0,0,0), axis=(0,0,5), color=(0,0,1), shaftwidth=0.1)    
grid_xy = make_grid(0.5, 10)
grid_xz = make_grid(0.5, 10)
grid_xz.rotate(angle=pi/2, axis=(1,0,0), origin=(0,0,0))
grid_yz = make_grid(0.5, 10)
grid_yz.rotate(angle=-pi/2, axis=(0,1,0), origin=(0,0,0))
sphere(radius=0.3)

obj = arrow(pos=(0,0,0), axis=(1,2,3), shaftwidth=0.3)
th = 0
while True:
    rate(20)
    obj.axis = (3*math.cos(th), 3*math.sin(th), 2)
    th += 0.04
</snippet></ROW><ROW><id>9288150</id><snippet>import Tkinter,Tix

r=Tix.Tk()
p=Tkinter.PanedWindow(r)

f1=Tix.Frame(p)
l1=Tix.Listbox(f1)
l1.pack(side=Tix.LEFT, expand=Tix.YES, fill=Tix.BOTH)
p.add(f1)

f2=Tix.Frame(p)
l2=Tix.Listbox(f2)
l2.pack(side=Tix.LEFT, expand=Tix.YES, fill=Tix.BOTH)
p.add(f2)

p.pack(side=Tix.LEFT, expand=Tix.YES, fill=Tix.BOTH)
r.mainloop()
</snippet></ROW><ROW><id>9288207</id><snippet>text.split()</snippet></ROW><ROW><id>9288207</id><snippet>words = text.split()
totalwords = len(words)
</snippet></ROW><ROW><id>9288207</id><snippet>'||'.join(['eggs','and','ham'])
# returns 'eggs||and||ham'
</snippet></ROW><ROW><id>9288338</id><snippet># Create the dict for the movies object.
id_movies = dict([(m.id, m) for m in movies])

# Get the data in order.
order_movies = [id_movies[i] for i in movie_ids]
</snippet></ROW><ROW><id>9288360</id><snippet>Py_Initialize();

// now time to insert the current working directory into the python path so module search can take advantage
// this must happen after python has been initialised
boost::filesystem::path workingDir = boost::filesystem::absolute("./").normalize();
PyObject* sysPath = PySys_GetObject("path");
PyList_Insert( sysPath, 0, PyString_FromString(workingDir.string().c_str()));
</snippet></ROW><ROW><id>9288480</id><snippet>theuser = UserTable.get_by_key_name(Theusername)
theuser.isVerified = True
theuser.put()
</snippet></ROW><ROW><id>9288770</id><snippet>import lxml.html

data = lxml.html.parse('test.html')

orders = data.xpath('//tr[@class="title"]/td')

for order in orders:
    print('Order text: ' + order.text)
    print('Parsed order number: ' + order.text.split(' ')[-1])
</snippet></ROW><ROW><id>9288770</id><snippet>&lt;html&gt;
&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
Blah blah
&lt;div&gt;Ignore me&lt;/div&gt;
&lt;div&gt;Outer stuff
    &lt;table border="1"&gt;
        &lt;tr&gt;&lt;td&gt;bogus stuff we don't care about&lt;/td&gt;&lt;/tr&gt;
        &lt;tr class='title'&gt;&lt;td color='grey'&gt;Order Number 6097279&lt;/td&gt;&lt;/tr&gt;
        &lt;tr class='something_else'&gt;&lt;td&gt;Boring stuff&lt;/td&gt;&lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9288770</id><snippet>Order text: Order Number 6097279
Parsed order number: 6097279
</snippet></ROW><ROW><id>9288875</id><snippet>def calculateFathersDayPrice(price, isMember):
    if isMember:
        return price * 0.85
    return price * 0.95

price = float(raw_input("Please Enter Price of Item: "))
isMember = raw_input("Are you a member?: ").lower() in ['true', '1', 't', 'y', 'yes']

print 'Member Status: %s' % isMember
print 'Price: %.2f' % calculateFathersDayPrice(price, isMember)
</snippet></ROW><ROW><id>9289467</id><snippet>slice(None, None, None)</snippet></ROW><ROW><id>9289720</id><snippet>HttpResponse</snippet></ROW><ROW><id>9289720</id><snippet>render</snippet></ROW><ROW><id>9289760</id><snippet>from Queue import PriorityQueue

class MyPriorityQueue(PriorityQueue):
    def __init__(self):
        PriorityQueue.__init__(self)
        self.counter = 0

    def put(self, item, priority):
        PriorityQueue.put(self, (priority, self.counter, item))
        self.counter += 1

    def get(self, *args, **kwargs):
        _, _, item = PriorityQueue.get(self, *args, **kwargs)
        return item


queue = MyPriorityQueue()
queue.put('item2', 1)
queue.put('item1', 1)

print queue.get()
print queue.get()
</snippet></ROW><ROW><id>9289760</id><snippet>item2
item1
</snippet></ROW><ROW><id>9289791</id><snippet>Lib/encodings/cp1252.py</snippet></ROW><ROW><id>9289907</id><snippet>pkg_resources</snippet></ROW><ROW><id>9289907</id><snippet>import pkg_resources
print pkg_resources.resource_filename('os.path', 'static/favicon.ico')
# 'C:\\Python27\\lib\\static\\favicon.ico'
</snippet></ROW><ROW><id>9289907</id><snippet>os.path</snippet></ROW><ROW><id>9289907</id><snippet>'static'</snippet></ROW><ROW><id>9289907</id><snippet>'MyPkg:static'</snippet></ROW><ROW><id>9289907</id><snippet>STATIC_ROUTES = {'static': 'MyPkg:static'}
for name, path in STATIC_ROUTES.iteritems():
    cfg.add_static_view(name=name, path=path)
</snippet></ROW><ROW><id>9289907</id><snippet>static_path = STATIC_ROUTES['static']
package, relative_path = static_path.split(':')
icon_path = pkg_resources.resource_filename(
    package, os.path.join(relative_path, 'favicon.ico'))
</snippet></ROW><ROW><id>9289907</id><snippet>cfg</snippet></ROW><ROW><id>9289907</id><snippet>route_prefix</snippet></ROW><ROW><id>9289907</id><snippet>def get_static_path(request, name):
    from pyramid.config.views import StaticURLInfo
    registrations = StaticURLInfo()._get_registrations(request.registry)
    if not name.endswith('/'):
        name = name + '/'
    route_name = '__%s' % name
    for _url, spec, reg_route_name in registrations:
        print ':', reg_route_name
        if reg_route_name == route_name:
            return spec
</snippet></ROW><ROW><id>9289907</id><snippet>&gt;&gt;&gt; get_static_path(request, 'static')
MyPkg:static/
</snippet></ROW><ROW><id>9289976</id><snippet>mechanize.Browser</snippet></ROW><ROW><id>9289976</id><snippet>class Browser(UserAgentBase):
class UserAgentBase(_opener.OpenerDirector):
class OpenerDirector(urllib2.OpenerDirector):
</snippet></ROW><ROW><id>9289976</id><snippet>mechanize.Browser</snippet></ROW><ROW><id>9289976</id><snippet>urllib2.OpenerDirector</snippet></ROW><ROW><id>9290108</id><snippet>str=""""jeff""""
</snippet></ROW><ROW><id>9290108</id><snippet>str= """ ("jeff) """ (")
</snippet></ROW><ROW><id>9290108</id><snippet>longstring      ::=  "'''" longstringitem* "'''"
                     | '"""' longstringitem* '"""'
</snippet></ROW><ROW><id>9290108</id><snippet>*</snippet></ROW><ROW><id>9290108</id><snippet> str = ''''''''jeff'''
</snippet></ROW><ROW><id>9290108</id><snippet>(''')(''')('')(jeff)(''') &lt;-- error, two quotes
</snippet></ROW><ROW><id>9290108</id><snippet> str = '''''''''jeff'''
</snippet></ROW><ROW><id>9290108</id><snippet> str = (''')(''')(''')(jeff)(''') &lt;-- no error, empty string + jeff
</snippet></ROW><ROW><id>9290906</id><snippet>@route('/')
</snippet></ROW><ROW><id>9290906</id><snippet>@route('/hello')</snippet></ROW><ROW><id>9290906</id><snippet>http://localhost:8080</snippet></ROW><ROW><id>9290906</id><snippet>bottle.py</snippet></ROW><ROW><id>9291068</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>9291068</id><snippet>html = '&lt;html&gt;&lt;body&gt;&lt;table border="1"&gt;'</snippet></ROW><ROW><id>9291068</id><snippet>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;</snippet></ROW><ROW><id>9291558</id><snippet>a</snippet></ROW><ROW><id>9291558</id><snippet>QString</snippet></ROW><ROW><id>9291558</id><snippet>a.split</snippet></ROW><ROW><id>9291558</id><snippet>QStringList</snippet></ROW><ROW><id>9291558</id><snippet>split</snippet></ROW><ROW><id>9291558</id><snippet>str</snippet></ROW><ROW><id>9291558</id><snippet>list</snippet></ROW><ROW><id>9291558</id><snippet>&gt;&gt;&gt; qstr = QString("t_0.survey")
&gt;&gt;&gt; slist = qstr.split(".")
&gt;&gt;&gt; slist
&lt;PyQt4.QtCore.QStringList object at 0x00BBCD88&gt;
</snippet></ROW><ROW><id>9291558</id><snippet>QStringList</snippet></ROW><ROW><id>9291558</id><snippet>&gt;&gt;&gt; list(slist)
[PyQt4.QtCore.QString(u't_0'), PyQt4.QtCore.QString(u'survey')]
</snippet></ROW><ROW><id>9291558</id><snippet>&gt;&gt;&gt; slist[1]
PyQt4.QtCore.QString(u'survey')
</snippet></ROW><ROW><id>9291558</id><snippet>QString</snippet></ROW><ROW><id>9291558</id><snippet>&gt;&gt;&gt; unicode(slist[1])
u'survey'
</snippet></ROW><ROW><id>9291608</id><snippet>  from twitter import Twitter
  # ...
  twitter = Twitter(
      auth=OAuth(token, token_key, con_secret, con_secret_key)))

  # Get the public timeline
  twitter.statuses.public_timeline()
</snippet></ROW><ROW><id>9291835</id><snippet>(gene_id, mature_miRNA)</snippet></ROW><ROW><id>9291835</id><snippet>autoload=True</snippet></ROW><ROW><id>9291835</id><snippet>db_table = Table("miranda", metadata,
                 Column("gene_id", Integer, primary_key=True),
                 Column("mature_miRNA", Integer, primary_key=True))
</snippet></ROW><ROW><id>9292352</id><snippet>InteractiveConsole</snippet></ROW><ROW><id>9292352</id><snippet>code</snippet></ROW><ROW><id>9292352</id><snippet>import code

console = code.InteractiveConsole()

more_input = False
with open('example.py') as source:
    for line in source:
        if not more_input:
            print('&gt;&gt;&gt; ' + line.rstrip())
        else:
            print('... ' + line.rstrip())

        more_input = console.push(line)
</snippet></ROW><ROW><id>9292352</id><snippet>more_input</snippet></ROW><ROW><id>9292352</id><snippet>InteractiveConsole.push(line):</snippet></ROW><ROW><id>9292352</id><snippet>runsource()</snippet></ROW><ROW><id>9292352</id><snippet>example.py</snippet></ROW><ROW><id>9292352</id><snippet>x = 1
x
y = 2
y + x

a = (
    1,
    2,
    3
    )
print(a)
</snippet></ROW><ROW><id>9292352</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; x
1
&gt;&gt;&gt; y = 2
&gt;&gt;&gt; y + x
3
&gt;&gt;&gt; 
&gt;&gt;&gt; a = (
...     1,
...     2,
...     3
...     )
&gt;&gt;&gt; print(a)
(1, 2, 3)
</snippet></ROW><ROW><id>9292381</id><snippet>configparser</snippet></ROW><ROW><id>9292400</id><snippet>&lt;meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate"&gt;
&lt;meta http-equiv="Pragma" content="no-cache"&gt;
&lt;meta http-equiv="Expires" content="0"&gt;
</snippet></ROW><ROW><id>9292573</id><snippet>base.pt</snippet></ROW><ROW><id>9292573</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    Welcome ${user_id}&lt;br&gt;
    &lt;a href="/foo"&gt;Foo&lt;/a&gt;&lt;br&gt;
    &lt;div id="content"&gt;
        &lt;tal:block metal:define-slot="content"&gt;
        &lt;/tal:block&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9292573</id><snippet>content</snippet></ROW><ROW><id>9292573</id><snippet>foo.pt</snippet></ROW><ROW><id>9292573</id><snippet>&lt;metal:main
    xmlns:tal="http://xml.zope.org/namespaces/tal"
    xmlns:metal="http://xml.zope.org/namespaces/metal"
    use-macro="load: base.pt"&gt;
    &lt;tal:block metal:fill-slot="content"&gt;
        &lt;div id="foo-content"&gt;Foo content&lt;/div&gt;
    &lt;/tal:block&gt;
&lt;/metal:main&gt;
</snippet></ROW><ROW><id>9292573</id><snippet>use-macro="load: base.pt</snippet></ROW><ROW><id>9292573</id><snippet>home.pt</snippet></ROW><ROW><id>9292573</id><snippet>user_id</snippet></ROW><ROW><id>9292573</id><snippet>user_id</snippet></ROW><ROW><id>9292573</id><snippet>USER</snippet></ROW><ROW><id>9292573</id><snippet>/foo</snippet></ROW><ROW><id>9292573</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    Welcome USER&lt;br&gt;
    &lt;a href="/foo"&gt;Foo&lt;/a&gt;&lt;br&gt;
    &lt;div id="content"&gt;
        &lt;div id="foo-content"&gt;Foo content&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9292717</id><snippet>#define EMFILE          24      /* Too many open files */
</snippet></ROW><ROW><id>9292855</id><snippet>import itertools

for x in itertools.product('12','12','23','23','23','345'):
    print(', '.join(x))
</snippet></ROW><ROW><id>9293306</id><snippet>python -c "import cherrypy;print cherrypy.__version__"
</snippet></ROW><ROW><id>9293367</id><snippet>fetchall()</snippet></ROW><ROW><id>9293367</id><snippet>SELECT</snippet></ROW><ROW><id>9293367</id><snippet>for row in c.fetchall():
    self.comboBox.addItem(row[0])
</snippet></ROW><ROW><id>9293403</id><snippet>&gt;&gt;&gt; G = {1:[("A",2),("B",3)]}
&gt;&gt;&gt; sum(y for v in G.itervalues() for (x, y) in v)
5
</snippet></ROW><ROW><id>9293403</id><snippet>[x for key in G for (_,x) in G[key]] + 1</snippet></ROW><ROW><id>9293403</id><snippet>TypeError</snippet></ROW><ROW><id>9293564</id><snippet>f</snippet></ROW><ROW><id>9293564</id><snippet>[f for f in filenames]</snippet></ROW><ROW><id>9293564</id><snippet>f.write</snippet></ROW><ROW><id>9293564</id><snippet>f</snippet></ROW><ROW><id>9293564</id><snippet>filenames</snippet></ROW><ROW><id>9293564</id><snippet>f</snippet></ROW><ROW><id>9293564</id><snippet>log</snippet></ROW><ROW><id>9293564</id><snippet>output</snippet></ROW><ROW><id>9293564</id><snippet>for file name in filenames:
</snippet></ROW><ROW><id>9293701</id><snippet># imported file
if __name__ == "__main__":
    raw_input()
</snippet></ROW><ROW><id>9293701</id><snippet>nosetests test_input.py &lt; input.txt
</snippet></ROW><ROW><id>9293701</id><snippet># test file
def test_input():
    s = raw_input()
    assert s.strip() == "Pass"
</snippet></ROW><ROW><id>9293701</id><snippet>c:\&gt;echo Pass | nosetests test_input.py
.
----------------------------------------------------------------------
Ran 1 test in 0.001s
OK

c:\&gt;echo Fail | nosetests test_input.py
F
======================================================================
FAIL: cgp.test.test_input.test_input
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Python27\lib\site-packages\nose\case.py", line 187, in runTest
    self.test(*self.arg)
  File "c:\test_input.py", line 3, in test_input
    assert s.strip() == "Pass"
AssertionError
----------------------------------------------------------------------
Ran 1 test in 0.002s
FAILED (failures=1)
</snippet></ROW><ROW><id>9293718</id><snippet>numpy.random.random() &lt; myprob
</snippet></ROW><ROW><id>9293718</id><snippet>True</snippet></ROW><ROW><id>9293718</id><snippet>myprob</snippet></ROW><ROW><id>9293718</id><snippet>False</snippet></ROW><ROW><id>9293718</id><snippet>True</snippet></ROW><ROW><id>9293718</id><snippet>0</snippet></ROW><ROW><id>9293718</id><snippet>1</snippet></ROW><ROW><id>9293718</id><snippet>[empty, full][numpy.random.random() &lt; myprob]
</snippet></ROW><ROW><id>9293718</id><snippet>empty</snippet></ROW><ROW><id>9293718</id><snippet>full</snippet></ROW><ROW><id>9293718</id><snippet>empty</snippet></ROW><ROW><id>9293718</id><snippet>full</snippet></ROW><ROW><id>9293718</id><snippet>0</snippet></ROW><ROW><id>9293718</id><snippet>1</snippet></ROW><ROW><id>9293787</id><snippet>echo %PATH% (windows)
echo $PATH (linux/cygwin/...)
</snippet></ROW><ROW><id>9294073</id><snippet>str.split()</snippet></ROW><ROW><id>9294073</id><snippet>a, b, c = ('foo,bar'.split(',', 2) + [None] * 3)[:3]
</snippet></ROW><ROW><id>9294640</id><snippet>def register_methods(cls):
    for name, method in cls.__dict__.items():
        # register the methods you are interested in

@register_methods
class Foo(object):
    def x(self):
        pass
</snippet></ROW><ROW><id>9294640</id><snippet>@classmethod</snippet></ROW><ROW><id>9294835</id><snippet>list_display</snippet></ROW><ROW><id>9294835</id><snippet>class YourClass(models.Model):
    ....

    @property
    def html_stripped(self):
       from django.utils.html import strip_tags
       return strip_tags(self.html_field)
</snippet></ROW><ROW><id>9294835</id><snippet>ModelAdmin</snippet></ROW><ROW><id>9294835</id><snippet>list_display = ['html_stripped', ...]
</snippet></ROW><ROW><id>9294835</id><snippet>list_display</snippet></ROW><ROW><id>9294983</id><snippet>class C(A):
    def c(self, num=self.data):
        print self.data
</snippet></ROW><ROW><id>9294983</id><snippet>&gt;&gt;&gt; def d(num, data=num):
...     print(num, data)
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'num' is not defined
</snippet></ROW><ROW><id>9294983</id><snippet>num</snippet></ROW><ROW><id>9294983</id><snippet>class C(A):
    def c(self, num=None):
        print num or self.data
</snippet></ROW><ROW><id>9294983</id><snippet>None</snippet></ROW><ROW><id>9294983</id><snippet>class C(A):
    def c(self, num=None):
        if num is None:
            num = self.data
        print num
</snippet></ROW><ROW><id>9295046</id><snippet>$ python
&gt;&gt;&gt; q = [[0,0,0,10],[1,2,6,1]]
&gt;&gt;&gt; B = [[float(j)/sum(i) for j in i] for i in q]
&gt;&gt;&gt; B
[[0.0, 0.0, 0.0, 1.0], [0.1, 0.2, 0.6, 0.1]]
</snippet></ROW><ROW><id>9295046</id><snippet>python3</snippet></ROW><ROW><id>9295046</id><snippet>float()</snippet></ROW><ROW><id>9295472</id><snippet>axis('off')</snippet></ROW><ROW><id>9295472</id><snippet>bbox_inches='tight'</snippet></ROW><ROW><id>9295472</id><snippet>savefig</snippet></ROW><ROW><id>9295472</id><snippet>from numpy import random
import matplotlib.pyplot as plt

data = random.random((5,5))
fig = plt.imshow(data,interpolation='nearest')
fig.set_cmap('hot')
plt.axis('off')
plt.savefig("test.png",bbox_inches='tight')
</snippet></ROW><ROW><id>9295518</id><snippet>PIL</snippet></ROW><ROW><id>9295518</id><snippet>.tiff</snippet></ROW><ROW><id>9295518</id><snippet>pydicom</snippet></ROW><ROW><id>9295518</id><snippet>PIL</snippet></ROW><ROW><id>9295597</id><snippet>\r</snippet></ROW><ROW><id>9295597</id><snippet>\n</snippet></ROW><ROW><id>9295597</id><snippet>&gt;&gt;&gt; json.loads(s.replace('\r\n', ''))
</snippet></ROW><ROW><id>9295597</id><snippet>&gt;&gt;&gt; json.loads(s.replace('\r\n', '\\r\\n'))
</snippet></ROW><ROW><id>9295652</id><snippet>def func_dec(foo, is_method=False):
    def wrapper(fun):
        @wraps(fun)
        def bar(*args, **kwds):
            val = args[1] if is_method else args[0]
            print foo, val
            return fun(*args, **kwds)
        return bar
    return wrapper
</snippet></ROW><ROW><id>9295652</id><snippet>__call__</snippet></ROW><ROW><id>9295652</id><snippet>def dec(foo):
    def wrapper(obj):
        if inspect.isclass(obj):
            obj.__call__ = func_dec(foo, is_method=True)(obj.__call__)
            return obj
        else:
            return func_dec(foo)(obj)
    return wrapper
</snippet></ROW><ROW><id>9295652</id><snippet>inspect.isclass</snippet></ROW><ROW><id>9296140</id><snippet>alphabet = set(['a', 'b', 'c'])
def T(x, y):
    return (alphabet - set([x, y])).pop()
</snippet></ROW><ROW><id>9296140</id><snippet>T('a', 'b')
&gt; 'c'
</snippet></ROW><ROW><id>9296205</id><snippet>cursor.execute("select database()")
db_name = cursor.fetchone()[0]
</snippet></ROW><ROW><id>9296205</id><snippet>cursor.execute("show tables")
for r in cursor.fetchall():
    print r[0]
</snippet></ROW><ROW><id>9296459</id><snippet>datetime.datetime.now</snippet></ROW><ROW><id>9296459</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>9296459</id><snippet>from datetime import datetime, timedelta

now = datetime.now()
seven_days_from_now = now + timedelta(days=7)
print now, seven_days_from_now
</snippet></ROW><ROW><id>9296611</id><snippet>python setup.py install</snippet></ROW><ROW><id>9296611</id><snippet>pserve</snippet></ROW><ROW><id>9296611</id><snippet>python setup.py develop</snippet></ROW><ROW><id>9296611</id><snippet>setup.py</snippet></ROW><ROW><id>9296645</id><snippet>blank3</snippet></ROW><ROW><id>9296645</id><snippet>a</snippet></ROW><ROW><id>9296645</id><snippet>b</snippet></ROW><ROW><id>9296645</id><snippet>a</snippet></ROW><ROW><id>9296645</id><snippet>b</snippet></ROW><ROW><id>9296645</id><snippet>map()</snippet></ROW><ROW><id>9296645</id><snippet>row_combine = map(lambda x, y: ((x or '') + ' ' + (y or '')).strip(), a, b)
</snippet></ROW><ROW><id>9296645</id><snippet>[u'ASSETS', u'GOVERNMENTAL ACTIVITIES', u'BUSINESS-TYPE ACTIVITIES', u'2009', u'2008', u'JEDO']
</snippet></ROW><ROW><id>9296696</id><snippet>a[f]
</snippet></ROW><ROW><id>9296696</id><snippet>a</snippet></ROW><ROW><id>9296696</id><snippet>f</snippet></ROW><ROW><id>9296696</id><snippet>f = np.array(f)</snippet></ROW><ROW><id>9296963</id><snippet>True</snippet></ROW><ROW><id>9296963</id><snippet>a</snippet></ROW><ROW><id>9296963</id><snippet>a.nonzero()
</snippet></ROW><ROW><id>9296963</id><snippet>False</snippet></ROW><ROW><id>9296963</id><snippet>(~a).nonzero()
</snippet></ROW><ROW><id>9297391</id><snippet>unittest</snippet></ROW><ROW><id>9297430</id><snippet>timeit</snippet></ROW><ROW><id>9297430</id><snippet>print timeit.timeit("counter += 1", "counter = 0", number=100000000)
</snippet></ROW><ROW><id>9297430</id><snippet>counter += 1</snippet></ROW><ROW><id>9297512</id><snippet>acco = self.accounts
del acco[0]
</snippet></ROW><ROW><id>9297512</id><snippet>del self.accounts[0]
</snippet></ROW><ROW><id>9297512</id><snippet>acco = self.accounts[:] # makes a shallow copy of self.accounts
del acco[0]
</snippet></ROW><ROW><id>9297536</id><snippet>foo.py &lt;path_to_run_script_on&gt;
</snippet></ROW><ROW><id>9297536</id><snippet>import sys
import os
if __name__=="__main__":
 if len(sys.argv) &gt; 1:
   p = sys.argv[1]
 else:
  p = os.path.abspath(os.path.curdir)

 print p
</snippet></ROW><ROW><id>9297587</id><snippet>a</snippet></ROW><ROW><id>9297587</id><snippet>w</snippet></ROW><ROW><id>9297587</id><snippet>with open('text.txt', 'a', encoding='utf-8') as file:
    file.write('Spam and eggs!')
</snippet></ROW><ROW><id>9297682</id><snippet>my_string</snippet></ROW><ROW><id>9297682</id><snippet>my_list</snippet></ROW><ROW><id>9297682</id><snippet>my_string in my_list
</snippet></ROW><ROW><id>9297682</id><snippet>any()</snippet></ROW><ROW><id>9297686</id><snippet>    access_token_key = 'access_token_%s' % user.user_id()
    access_token = gdata.gauth.ae_load(access_token_key)       
    # authenticating here
    #gdocs.auth_token = access_token
</snippet></ROW><ROW><id>9297686</id><snippet>    #gdocs.auth_token = gdata.gauth.OAuthHmacToken(SETTINGS['CONSUMER_KEY'], 
    #                                               SETTINGS['CONSUMER_SECRET'], 
    #                                               access_token,
    #                                               access_token_key, 
    #                                               gdata.gauth.ACCESS_TOKEN) 
</snippet></ROW><ROW><id>9297689</id><snippet>partnumber</snippet></ROW><ROW><id>9297689</id><snippet>from xml.etree.ElementTree import ElementTree

tree = ElementTree()
tree.parse(xmlFile)
actions = tree.findall('action')

parsed = [{field.tag: field.text for field in action} for action in actions]
</snippet></ROW><ROW><id>9297689</id><snippet>xmlFile</snippet></ROW><ROW><id>9297689</id><snippet>StringIO</snippet></ROW><ROW><id>9297689</id><snippet>import StringIO
from xml.etree.ElementTree import ElementTree

s = """&lt;?xml version="1.0"?&gt;
&lt;servicexml&gt;
    &lt;action&gt;
        &lt;command&gt;Add&lt;/command&gt;
        &lt;partnumber&gt;1223&lt;/partnumber&gt;
        &lt;partname&gt;Battery&lt;/partname&gt;
        &lt;partdescription&gt;Holds charge&lt;/partdescription&gt;
    &lt;/action&gt;

    &lt;action&gt;
        &lt;command&gt;Add&lt;/command&gt;
        &lt;partnumber&gt;4444&lt;/partnumber&gt;
        &lt;partname&gt;Pump&lt;/partname&gt;
        &lt;partdescription&gt;Pumps stuff&lt;/partdescription&gt;
    &lt;/action&gt;

&lt;/servicexml&gt;"""

st = StringIO.StringIO(s)

tree = ElementTree()
tree.parse(st)
actions = tree.findall('action')

parsed = [{field.tag: field.text for field in action} for action in actions]
</snippet></ROW><ROW><id>9297689</id><snippet>&gt;&gt;&gt; parsed
[{'command': 'Add',
  'partdescription': 'Holds charge',
  'partname': 'Battery',
  'partnumber': '1223'},
 {'command': 'Add',
  'partdescription': 'Pumps stuff',
  'partname': 'Pump',
  'partnumber': '4444'}]
</snippet></ROW><ROW><id>9298102</id><snippet>if request.method == 'POST':
        int_message = 1
        print "Data uploading"
        print request.headers
        for v in request.values:
          print v
        #logdata = request.stream.readline()
        #while(logdata):
        #    print "uploading"
        #    print logdata
        #    logdata = request.stream.readline()
        print "Uploading done"
        return Response(str(int_message), mimetype='text/plain')
</snippet></ROW><ROW><id>9298228</id><snippet>from __future__ import with_statement # needed in python 2.5 and earlier
import re
from itertools import ifilter

def count_root(file, regex=re.compile('root')):
   count = 0
   with open(file, 'r') as src:
       for i in ifilter(regex.search, src):
           count += 1
   return count

print count_root('file')
</snippet></ROW><ROW><id>9298238</id><snippet>(r, theta)</snippet></ROW><ROW><id>9298238</id><snippet>r</snippet></ROW><ROW><id>9298238</id><snippet>(x, y)</snippet></ROW><ROW><id>9298238</id><snippet>x = r cos(theta)</snippet></ROW><ROW><id>9298238</id><snippet>y = r sin(theta)</snippet></ROW><ROW><id>9298238</id><snippet>r</snippet></ROW><ROW><id>9298238</id><snippet>theta</snippet></ROW><ROW><id>9298238</id><snippet>x</snippet></ROW><ROW><id>9298238</id><snippet>y</snippet></ROW><ROW><id>9298308</id><snippet>re.match(r'9([0-2]|3[0-5]).+', zip)
</snippet></ROW><ROW><id>9298338</id><snippet>clean_'fieldname'()</snippet></ROW><ROW><id>9298338</id><snippet>class Job(models.Model):
    expression_field = models.CharField(...)
    ...
</snippet></ROW><ROW><id>9298338</id><snippet>forms.py</snippet></ROW><ROW><id>9298338</id><snippet>class JobForm(forms.ModelForm):
    pass
    class Meta:
        model = Job 

    def clean_expression_field(self):
         # You perform your custom validation on this field in here, 
         # raising any problems
         value = self.cleaned_data['expression_field']
         if value is 'really_bad':
              raise forms.ValidationError("bad bad bad")
         return value
</snippet></ROW><ROW><id>9298338</id><snippet>views.py</snippet></ROW><ROW><id>9299079</id><snippet>x and y</snippet></ROW><ROW><id>9299079</id><snippet>x</snippet></ROW><ROW><id>9299079</id><snippet>x</snippet></ROW><ROW><id>9299079</id><snippet>y</snippet></ROW><ROW><id>9299079</id><snippet>or</snippet></ROW><ROW><id>9299079</id><snippet>x or y</snippet></ROW><ROW><id>9299079</id><snippet>x</snippet></ROW><ROW><id>9299079</id><snippet>x</snippet></ROW><ROW><id>9299079</id><snippet>y</snippet></ROW><ROW><id>9299224</id><snippet>Entry.objects.all()[0].image.thumbnail.relative_url
</snippet></ROW><ROW><id>9299595</id><snippet>row_iter = iter(sheet)
keys = next(row_iter)[1:]
data = {}
for row in row_iter:
    data[row[0]] = dict(zip(keys, row[1:]))
</snippet></ROW><ROW><id>9299595</id><snippet>{'Account1': {'VALUE1': '3.4332', 'VALUE2': '2.524', 'VALUE3': '4,567.23'},
 'Account2': {'VALUE1': '1,235.67', 'VALUE2': '8.98', 'VALUE3': '4,321.78'}}
</snippet></ROW><ROW><id>9299595</id><snippet>data['Account1']['VALUE2']</snippet></ROW><ROW><id>9299729</id><snippet>.group()</snippet></ROW><ROW><id>9299729</id><snippet>import re
line = '(&lt;layerThickness&gt; 0.58 &lt;/layerThickness&gt;)'
L = re.search(r"([-+]?[0-9]*\.?[0-9]+)", line).group(0)
print(L)
</snippet></ROW><ROW><id>9299729</id><snippet>0.58
</snippet></ROW><ROW><id>9300028</id><snippet>    from socket import *
    s=socket(AF_INET, SOCK_STREAM)
    s.connect(("localhost", 6789))
    string = "This is my string\n\nAFTER_IT"
    s.sendall(string)
</snippet></ROW><ROW><id>9300028</id><snippet>    from socket import *
    s=socket(AF_INET, SOCK_STREAM)
    s.bind(("", 6789))
    s.listen(8)
    (c, a) = s.accept()
    data=c.recv(1000)
    data # Displays 'This is my string\n\nAFTER_IT'
</snippet></ROW><ROW><id>9300257</id><snippet>None</snippet></ROW><ROW><id>9300257</id><snippet>&gt;&gt;&gt; a_list = [3, 2, 1]
&gt;&gt;&gt; print a_list.sort()
None
&gt;&gt;&gt; a_list
[1, 2, 3]

&gt;&gt;&gt; a_dict = {}
&gt;&gt;&gt; print a_dict.__setitem__('a', 1)
None
&gt;&gt;&gt; a_dict
{'a': 1}

&gt;&gt;&gt; a_set = set()
&gt;&gt;&gt; print a_set.add(1)
None
&gt;&gt;&gt; a_set
set([1])
</snippet></ROW><ROW><id>9300257</id><snippet>list.sort(</snippet></ROW><ROW><id>9300257</id><snippet>list.sort()</snippet></ROW><ROW><id>9300257</id><snippet>sorted()</snippet></ROW><ROW><id>9300257</id><snippet>a = {1}</snippet></ROW><ROW><id>9300257</id><snippet>a = set([1])</snippet></ROW><ROW><id>9300883</id><snippet>sklearn.datasets</snippet></ROW><ROW><id>9300991</id><snippet>set_callback()</snippet></ROW><ROW><id>9300991</id><snippet>Testarino</snippet></ROW><ROW><id>9300991</id><snippet>def doodie(cls):
    print cls.teststr

class Testarino(object):
    def __init__(self):
        self.teststr = 'Yay!'
        self.callback = None

    def set_callback(self, callback):
        self.callback = callback

    def go(self):
         if self.callback is None:
             raise NotImplementedError
         self.callback(self)

tester = Testarino()
tester.set_callback(doodie)

tester.go()
</snippet></ROW><ROW><id>9300999</id><snippet>datetime.date.today()</snippet></ROW><ROW><id>9300999</id><snippet>import datetime
import pytz

IT = pytz.timezone('Europe/Rome')
oggi = datetime.now(IT).date()
</snippet></ROW><ROW><id>9301005</id><snippet>windows command prompt&gt;\python27\python -mtimeit -s"a=10**20;n=3" "(a&gt;&gt;n)&amp;1"
1000000 loops, best of 3: 0.238 usec per loop

-s"a=10**20;n=3" "(a&gt;&gt;n)&amp;1"
0.238 usec 

-s"a=10**20;n=3" "not not(a &amp; (1 &lt;&lt; n))"
0.154 usec 

-s"a=10**200;n=3" "(a&gt;&gt;n)&amp;1"
0.382 usec 

-s"a=10**200;n=3" "not not(a &amp; (1 &lt;&lt; n))"
0.155 usec 

-s"a=10**10;n=3" "(a&gt;&gt;n)&amp;1"
0.231 usec 

-s"a=10**10;n=3" "not not(a &amp; (1 &lt;&lt; n))"
0.156 usec 

-s"a=10**9;n=3" "(a&gt;&gt;n)&amp;1"
0.0801 usec

-s"a=10**9;n=3" "not not(a &amp; (1 &lt;&lt; n))"
0.0938 usec

-s"a=2**1000;n=64" "(a&gt;&gt;n)&amp;1"
0.446 usec

-s"a=2**1000;n=64" "not not(a &amp; (1 &lt;&lt; n))"
0.255 usec
</snippet></ROW><ROW><id>9301005</id><snippet>not not(foo)</snippet></ROW><ROW><id>9301005</id><snippet>int</snippet></ROW><ROW><id>9301005</id><snippet>bool</snippet></ROW><ROW><id>9301005</id><snippet>1 if foo else 0</snippet></ROW><ROW><id>9301220</id><snippet>for &lt;blah blah&gt;
    num3,num1,num2,num4,num5 = data
    outputData.append('\t'.join(map(str, [num1, num2, num3, num4, num5])))

outfile.write('\n'.join(outputData))
</snippet></ROW><ROW><id>9301220</id><snippet>'\t'.join(map(str, [num1, num2, num3, num4, num5]))</snippet></ROW><ROW><id>9301220</id><snippet>outputData</snippet></ROW><ROW><id>9301220</id><snippet>'\n'.join(outputData)</snippet></ROW><ROW><id>9301220</id><snippet>outputData</snippet></ROW><ROW><id>9301220</id><snippet>outputData</snippet></ROW><ROW><id>9301220</id><snippet>for &lt;blah blah&gt;
    num3,num1,num2,num4,num5 = data
    outfile.write('\t'.join(map(str, [num1, num2, num3, num4, num5])) + '\n')
</snippet></ROW><ROW><id>9301329</id><snippet>callFromThread</snippet></ROW><ROW><id>9301329</id><snippet>foo.sendString()</snippet></ROW><ROW><id>9301329</id><snippet>reactor.callFromThread(foo.sendString)</snippet></ROW><ROW><id>9301735</id><snippet>import textwrap

#...

    def getCalendarHeader(self):
        print textwrap.dedent("""\
            BEGIN:VCALENDAR
            PRODID:-//Atlassian Software Systems//Confluence Calendar Plugin//EN
            VERSION:2.0
            CALSCALE:GREGORIAN
            X-WR-CALNAME;VALUE=TEXT:
            X-WR-CALDESC;VALUE=TEXT:
            """)
</snippet></ROW><ROW><id>9301754</id><snippet>117.284999999999996589394868351519107818603515625
</snippet></ROW><ROW><id>9301754</id><snippet>decimal</snippet></ROW><ROW><id>9302057</id><snippet>try:
    user_code()
except:
    pass
</snippet></ROW><ROW><id>9302057</id><snippet>from twisted.internet.endpoints import TCP4ClientEndpoint
from twisted.internet import protocol, reactor

class Broken(protocol.Protocol):
    def connectionMade(self):
        buggy_user_code()


e = TCP4ClientEndpoint(reactor, "127.0.0.1", 22)
f = protocol.Factory()
f.protocol = Broken
e.connect(f)
reactor.run()
</snippet></ROW><ROW><id>9302057</id><snippet>connectionMade</snippet></ROW><ROW><id>9302057</id><snippet>Unhandled Error
Traceback (most recent call last):
  File "/usr/lib/python2.7/dist-packages/twisted/python/log.py", line 84, in callWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/lib/python2.7/dist-packages/twisted/python/log.py", line 69, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/usr/lib/python2.7/dist-packages/twisted/python/context.py", line 118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/usr/lib/python2.7/dist-packages/twisted/python/context.py", line 81, in callWithContext
    return func(*args,**kw)
--- &lt;exception caught here&gt; ---
  File "/usr/lib/python2.7/dist-packages/twisted/internet/selectreactor.py", line 146, in _doReadOrWrite
    why = getattr(selectable, method)()
  File "/usr/lib/python2.7/dist-packages/twisted/internet/tcp.py", line 674, in doConnect
    self._connectDone()
  File "/usr/lib/python2.7/dist-packages/twisted/internet/tcp.py", line 681, in _connectDone
    self.protocol.makeConnection(self)
  File "/usr/lib/python2.7/dist-packages/twisted/internet/protocol.py", line 461, in makeConnection
    self.connectionMade()
  File "/usr/lib/python2.7/dist-packages/twisted/internet/endpoints.py", line 64, in connectionMade
    self._wrappedProtocol.makeConnection(self.transport)
  File "/usr/lib/python2.7/dist-packages/twisted/internet/protocol.py", line 461, in makeConnection
    self.connectionMade()
  File "proderr.py", line 6, in connectionMade
    buggy_user_code()
exceptions.NameError: global name 'buggy_user_code' is not defined
</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>e.connect(f)
</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>$ python someprog.py
... wait ...
... wait ...
... wait ...
&lt;Control C&gt;
Unhandled error in Deferred:
Unhandled Error
Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionRefusedError: Connection was refused by other side: 111: Connection refused.
</snippet></ROW><ROW><id>9302057</id><snippet>twisted.internet.defer.setDebugging</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>from twisted.internet.defer import setDebugging
setDebugging(True)
</snippet></ROW><ROW><id>9302057</id><snippet>exarkun@top:/tmp$ python proderr.py
... wait ...
... wait ...
... wait ...
&lt;Control C&gt;
Unhandled error in Deferred:
(debug:  C: Deferred was created:
 C:  File "proderr.py", line 15, in &lt;module&gt;
 C:    e.connect(f)
 C:  File "/usr/lib/python2.7/dist-packages/twisted/internet/endpoints.py", line 240, in connect
 C:    wf = _WrappingFactory(protocolFactory, _canceller)
 C:  File "/usr/lib/python2.7/dist-packages/twisted/internet/endpoints.py", line 121, in __init__
 C:    self._onConnection = defer.Deferred(canceller=canceller)
 I: First Invoker was:
 I:  File "proderr.py", line 16, in &lt;module&gt;
 I:    reactor.run()
 I:  File "/usr/lib/python2.7/dist-packages/twisted/internet/base.py", line 1162, in run
 I:    self.mainLoop()
 I:  File "/usr/lib/python2.7/dist-packages/twisted/internet/base.py", line 1174, in mainLoop
 I:    self.doIteration(t)
 I:  File "/usr/lib/python2.7/dist-packages/twisted/internet/selectreactor.py", line 140, in doSelect
 I:    _logrun(selectable, _drdw, selectable, method, dict)
 I:  File "/usr/lib/python2.7/dist-packages/twisted/python/log.py", line 84, in callWithLogger
 I:    return callWithContext({"system": lp}, func, *args, **kw)
 I:  File "/usr/lib/python2.7/dist-packages/twisted/python/log.py", line 69, in callWithContext
 I:    return context.call({ILogContext: newCtx}, func, *args, **kw)
 I:  File "/usr/lib/python2.7/dist-packages/twisted/python/context.py", line 118, in callWithContext
 I:    return self.currentContext().callWithContext(ctx, func, *args, **kw)
 I:  File "/usr/lib/python2.7/dist-packages/twisted/python/context.py", line 81, in callWithContext
 I:    return func(*args,**kw)
 I:  File "/usr/lib/python2.7/dist-packages/twisted/internet/selectreactor.py", line 146, in _doReadOrWrite
 I:    why = getattr(selectable, method)()
 I:  File "/usr/lib/python2.7/dist-packages/twisted/internet/tcp.py", line 638, in doConnect
 I:    self.failIfNotConnected(error.getConnectError((err, strerror(err))))
 I:  File "/usr/lib/python2.7/dist-packages/twisted/internet/tcp.py", line 592, in failIfNotConnected
 I:    self.connector.connectionFailed(failure.Failure(err))
 I:  File "/usr/lib/python2.7/dist-packages/twisted/internet/base.py", line 1048, in connectionFailed
 I:    self.factory.clientConnectionFailed(self, reason)
 I:  File "/usr/lib/python2.7/dist-packages/twisted/internet/endpoints.py", line 144, in clientConnectionFailed
 I:    self._onConnection.errback(reason)
)
Unhandled Error
Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionRefusedError: Connection was refused by other side: 111: Connection refused.
</snippet></ROW><ROW><id>9302057</id><snippet>e.connect(f)</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>d = e.connect(f)
def errback(reason):
    reason.printTraceback()
d.addErrback(errback)
</snippet></ROW><ROW><id>9302057</id><snippet>from twisted.python.log import err
d = e.connect(f)
d.addErrback(err, "Problem fetching the foo from the bar")
</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>Deferred</snippet></ROW><ROW><id>9302057</id><snippet>d = e.connect(f)
def fatalError(reason):
    err(reason, "Absolutely needed the foo, could not get it")
    reactor.stop()

d.addErrback(fatalError)
</snippet></ROW><ROW><id>9302446</id><snippet>self</snippet></ROW><ROW><id>9302446</id><snippet>def parseList(tag):
</snippet></ROW><ROW><id>9302446</id><snippet>def parseList(self, tag):
</snippet></ROW><ROW><id>9302446</id><snippet>parseList</snippet></ROW><ROW><id>9302446</id><snippet>self</snippet></ROW><ROW><id>9302446</id><snippet>self.parseList(item)
</snippet></ROW><ROW><id>9302446</id><snippet> return [self.parseList(item)
</snippet></ROW><ROW><id>9302446</id><snippet> return (tag.contents[0].string.strip(), self.parseList(tag.ul))
</snippet></ROW><ROW><id>9302714</id><snippet>post_save.connect(create_user_profile, sender = User, dispatch_uid="create_user_profile")
</snippet></ROW><ROW><id>9302750</id><snippet>gtk.TreeView</snippet></ROW><ROW><id>9302750</id><snippet>gtk.TreeView.set_model</snippet></ROW><ROW><id>9302750</id><snippet>gtk.TreeView.{append,remove,insert}_column</snippet></ROW><ROW><id>9302750</id><snippet>gtk.ListStore</snippet></ROW><ROW><id>9302851</id><snippet>__double_underscore__</snippet></ROW><ROW><id>9302851</id><snippet>json()</snippet></ROW><ROW><id>9302851</id><snippet>__*__</snippet></ROW><ROW><id>9302851</id><snippet>__*__</snippet></ROW><ROW><id>9303081</id><snippet>def supplier_detail(request, supplier_id):
    s = get_object_or_404(Supplier, pk=supplier_id)
    for employee in s.supplieremployees_set.all():
        print employee.expe_fname
    return render_to_response('suppliersdb/supplier_detail.html', {'supplier': s})
</snippet></ROW><ROW><id>9303166</id><snippet>import re

def increment_repl(match):
    return str(int(match.group(0)) + 1)

def increment_ints(s):
    return re.sub(r'-?\d+', increment_repl, s)

&gt;&gt;&gt; increment_ints("STRING 2")
'STRING 3'
&gt;&gt;&gt; increment_ints("STRING 9 STRING")
'STRING 10 STRING'
&gt;&gt;&gt; increment_ints("-1 0 1 2")
'0 1 2 3'
</snippet></ROW><ROW><id>9303305</id><snippet>import foo.bar.baz</snippet></ROW><ROW><id>9303305</id><snippet>__init__.py</snippet></ROW><ROW><id>9303305</id><snippet>foo/bar/baz.py</snippet></ROW><ROW><id>9303375</id><snippet>from django.conf import settings
</snippet></ROW><ROW><id>9303375</id><snippet>settings</snippet></ROW><ROW><id>9303375</id><snippet>settings = sys.modules['django.conf'].settings
</snippet></ROW><ROW><id>9303922</id><snippet>ax = plt.gca()
ax.ticklabel_format(useOffset=False)
</snippet></ROW><ROW><id>9303960</id><snippet>import os
from subprocess import Popen, PIPE

outside, inside = os.pipe()

one = Popen(['/path/to/one'], stdout = inside)
two = Popen(['/path/to/two'], stdout = inside)

merge = Popen(['/path/to/merge'], stdin = outside)
</snippet></ROW><ROW><id>9304199</id><snippet>import urllib2
import cookielib
cookiejar = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookiejar))
urllib2.install_opener(opener)
return urllib2
</snippet></ROW><ROW><id>9304273</id><snippet>def referral_create(request):
    if request.method == 'POST':
        form = CashtextsForm(request.POST)
        if form.is_valid():
            form.save()
            return render_to_response('submitted_page.html')
    else:
        form = CashtextsForm()
    return render_to_response('CashTextsubmit.html')
</snippet></ROW><ROW><id>9304292</id><snippet>global</snippet></ROW><ROW><id>9304292</id><snippet>re</snippet></ROW><ROW><id>9304319</id><snippet>a[i:j] = map(f, a[i:j])
</snippet></ROW><ROW><id>9304351</id><snippet>reverse_lazy</snippet></ROW><ROW><id>9304424</id><snippet>dict</snippet></ROW><ROW><id>9304424</id><snippet>setdefault</snippet></ROW><ROW><id>9304424</id><snippet>phone_book.setdefault('name', []).append(number)
</snippet></ROW><ROW><id>9304426</id><snippet>g</snippet></ROW><ROW><id>9304426</id><snippet>f</snippet></ROW><ROW><id>9304542</id><snippet>&gt;&gt;&gt; print "my name is %s" %('foo','bar')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: not all arguments converted during string formatting
</snippet></ROW><ROW><id>9304542</id><snippet>('foo', 'bar')</snippet></ROW><ROW><id>9304542</id><snippet>one</snippet></ROW><ROW><id>9304542</id><snippet>(%s)</snippet></ROW><ROW><id>9304542</id><snippet>&gt;&gt;&gt; print "my name is %s %s" %('foo','bar')
    my name is foo bar
</snippet></ROW><ROW><id>9304542</id><snippet>&gt;&gt;&gt; print "my name is {0} {1}".format('foo','bar')
    my name is foo bar
</snippet></ROW><ROW><id>9304805</id><snippet>otool</snippet></ROW><ROW><id>9304805</id><snippet>nm</snippet></ROW><ROW><id>9304805</id><snippet>nm</snippet></ROW><ROW><id>9304805</id><snippet>libgsl.a</snippet></ROW><ROW><id>9304805</id><snippet>ld</snippet></ROW><ROW><id>9304805</id><snippet>-lgsl</snippet></ROW><ROW><id>9304805</id><snippet>libgsl.a</snippet></ROW><ROW><id>9304805</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>9304805</id><snippet>libgsl.dylib</snippet></ROW><ROW><id>9304805</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>9304805</id><snippet>-lgsl</snippet></ROW><ROW><id>9304805</id><snippet>cython cgibbs.pyx
gcc-4.0 -m32 -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c cgibbs.c -o cgibbs.o
gcc-4.0 -bundle -undefined dynamic_lookup -lgsl -arch i386 -g cgibbs.o -o cgibbs.so
</snippet></ROW><ROW><id>9304805</id><snippet>cgibbs.so</snippet></ROW><ROW><id>9304924</id><snippet>&gt;&gt;&gt; class Object(object):
...     speed = 0
... 
&gt;&gt;&gt; a = Object()
&gt;&gt;&gt; b = Object()
&gt;&gt;&gt; c = Object()
&gt;&gt;&gt; 
&gt;&gt;&gt; Object.speed = 5
&gt;&gt;&gt; print a.speed
5
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9304924</id><snippet>&gt;&gt;&gt; a.speed = 10
&gt;&gt;&gt; Object.speed = 20
&gt;&gt;&gt; print b.speed
20
&gt;&gt;&gt; print a.speed
10
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9304924</id><snippet>class Object(object):
  _speed = 0
  @property
  def speed(self):
     return self.__class__._speed
  @speed.setter
  def speed(self, value):
     self.__class__._speed = value
</snippet></ROW><ROW><id>9304924</id><snippet>&gt;&gt;&gt; 
&gt;&gt;&gt; a = Object()
&gt;&gt;&gt; b = Object()
&gt;&gt;&gt; a.speed, b.speed
(0, 0)
&gt;&gt;&gt; a.speed = 10
&gt;&gt;&gt; a.speed, b.speed
(10, 10)
</snippet></ROW><ROW><id>9304924</id><snippet>import gc

class Object(object):
    def __init__(self):
        self.speed = 0

    def set_all_speed(self, value):
        for instance in (obj for obj in gc.get_referrers(self.__class__) if isinstance(obj, self.__class__)):
            instance.speed = value
</snippet></ROW><ROW><id>9304924</id><snippet>&gt;&gt;&gt; a  =Object()
&gt;&gt;&gt; b = Object()
&gt;&gt;&gt; a.speed = 5
&gt;&gt;&gt; b.speed = 10
&gt;&gt;&gt; a.speed, b.speed
(5, 10)
&gt;&gt;&gt; a.set_all_speed(20)
&gt;&gt;&gt; a.speed, b.speed
(20, 20)
</snippet></ROW><ROW><id>9304968</id><snippet>Blog.objects.filter(pk__in=[1,4,7])
</snippet></ROW><ROW><id>9305048</id><snippet>{% if %}</snippet></ROW><ROW><id>9305048</id><snippet>{% if form.field.value %}
    ...
{% endif %}
</snippet></ROW><ROW><id>9305048</id><snippet>{% if not form.field.value %}
    ...
{% endif %}
</snippet></ROW><ROW><id>9305163</id><snippet># module start
from __future__ import with_statement # for python 2.5 and earlier

def readfile(path):
    with open(path) as src:
        return src.readlines()

if __name__ == '__main__':
    import sys
    print readfile(sys.argv[1])
# module end
</snippet></ROW><ROW><id>9305179</id><snippet>with</snippet></ROW><ROW><id>9305179</id><snippet>@contextlib.contextmanager
def container(self, name=None):
    self.AddWidget(name=name, type='container', push=True)
    yield
    self.PopParentWidget()
</snippet></ROW><ROW><id>9305179</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>9305179</id><snippet>SetupGUI</snippet></ROW><ROW><id>9305179</id><snippet>def SetupGUI(self):
    with self.container(name='root'):
        with self.container():
            for i in range(0,8):
                self.AddWidget(name='button%i' % i, type='button')
        with self.container():
            for i in range(0,8):
                self.AddWidget(name='slider%i' % i, type='slider')
</snippet></ROW><ROW><id>9305217</id><snippet>Parameters:
    range
               (type=RichTextRange)

    style
               (type=TextAttrEx)
</snippet></ROW><ROW><id>9305308</id><snippet>/opt/local</snippet></ROW><ROW><id>9305308</id><snippet>$PATH</snippet></ROW><ROW><id>9305308</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>9305709</id><snippet>export PYTHONPATH="/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:$PYTHONPATH"
</snippet></ROW><ROW><id>9305840</id><snippet>multiprocessing</snippet></ROW><ROW><id>9305972</id><snippet>import httplib2, urllib, json, pprint, getpass, string, time, MySQLdb
import sys
def usage():
    print "Usage: python26 mysql.py or ./mysql.py"
    sys.exit(1)

if len(sys.argv) != 1:
    usage()

# Connect to the database and create the tables
conn = MySQLdb.connect (host = "localhost",
                   user = "XXXXXXXXXX",
                   passwd = "XXXXXXXX")
cursor = conn.cursor ()
cursor.execute ("DROP DATABASE IF EXISTS tenable")
cursor.execute ("CREATE DATABASE tenable")
cursor.execute ("USE tenable")
cursor.execute ("""
CREATE TABLE cumvulndata
(
  offset         BIGINT(10),
  pluginName     TEXT,
  repositoryID   SMALLINT(3),
  severity       TINYINT(2),
  pluginID       MEDIUMINT(8),
  hasBeenMitigated   TINYINT(1),
  dnsName        VARCHAR(255),
  macAddress     VARCHAR(40),
  familyID       INT(4),
  recastRisk     TINYINT(1),
  firstSeen      DATETIME,
  ip             VARCHAR(15),
  acceptRisk     TINYINT(1),
  lastSeen       DATETIME,
  netbiosName    VARCHAR(255),
  port           MEDIUMINT(5),
  pluginText     MEDIUMTEXT,
  protocol       TINYINT(3)
  )
  """)
cursor.execute ("""INSERT INTO cumvulndata   (offset,pluginName,repositoryID,severity,pluginID,hasBeenMitigated,dnsName,macAddress,familyID,recastRisk,firstSeen,ip,acceptRisk,lastSeen,netbiosName,port,pluginText,protocol)
    VALUES
    (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""",   ('123','plugin','10','1','12','1',"dnsName","macAddress",'15','1','2011-2-2',"ip",'9','2012-5-2',"netbiosName",'123',"pluginText","2"))

#Commit the changes.
conn.commit()
cursor.close()
conn.close()
</snippet></ROW><ROW><id>9305972</id><snippet>commit</snippet></ROW><ROW><id>9306640</id><snippet>import unittest


class A:

    def __init__(self, num):
        self.num = num

    def __eq__(self, other):
        return self.num == other.num


class Test(unittest.TestCase):

    def test(self):
        a1 = A(1)
        a12 = A(1)
        a2 = A(2)

        self.assertEqual(a1, a1, 'a1 != a1')
        self.assertEqual(a1, a12, 'a1 != a12')
        self.assertEqual(a1, a2, 'a1 != a2')

def main():
    unittest.TestRunner(Test())

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>9306652</id><snippet>inspectdb</snippet></ROW><ROW><id>9306944</id><snippet>405</snippet></ROW><ROW><id>9306944</id><snippet>TaskOption</snippet></ROW><ROW><id>9306944</id><snippet>POST</snippet></ROW><ROW><id>9306944</id><snippet>Task</snippet></ROW><ROW><id>9306944</id><snippet>GET</snippet></ROW><ROW><id>9307317</id><snippet>print "Hello World"
</snippet></ROW><ROW><id>9307317</id><snippet>function(a) { return a * 2 }
</snippet></ROW><ROW><id>9307317</id><snippet>if (condition) then { branch_1 } else { branch_2 }
for (i = 0; i &lt; 10; i += 1) { ... }
</snippet></ROW><ROW><id>9307317</id><snippet>2 + 2
</snippet></ROW><ROW><id>9307470</id><snippet>]</snippet></ROW><ROW><id>9307470</id><snippet>+</snippet></ROW><ROW><id>9307470</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [4, 5, 6]
&gt;&gt;&gt; a + b
[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>9307470</id><snippet>for x in case_log_list:
    c_list = [item for item in x.C.all]          # turn x.C into a list
    output_list = [x.A, x.B] + c_list + [x.D,]   # assemble list
    writer.writerow( output_list )
</snippet></ROW><ROW><id>9307470</id><snippet>for x in case_log_list:
    writer.writerow ( [x.A, x.B] + [item for item in x.C.all] + [x.D,] )
</snippet></ROW><ROW><id>9307470</id><snippet>x.C.all</snippet></ROW><ROW><id>9307470</id><snippet>type(x.C.all) is list</snippet></ROW><ROW><id>9307470</id><snippet>True</snippet></ROW><ROW><id>9307470</id><snippet>[x.A, x.B] + x.C.all + [x.D,]</snippet></ROW><ROW><id>9307470</id><snippet>c_list = [item for item in x.C.all]</snippet></ROW><ROW><id>9307470</id><snippet>for</snippet></ROW><ROW><id>9307470</id><snippet>x</snippet></ROW><ROW><id>9307470</id><snippet>A</snippet></ROW><ROW><id>9307470</id><snippet>B</snippet></ROW><ROW><id>9307470</id><snippet>C</snippet></ROW><ROW><id>9307470</id><snippet>D</snippet></ROW><ROW><id>9307580</id><snippet>/Users/Kinnovate/Desktop/fsdjango/platformsite/common/fields/pickle.py</snippet></ROW><ROW><id>9307580</id><snippet>DATABASE_ENGINE</snippet></ROW><ROW><id>9307580</id><snippet>settings.DATABASES['default']['ENGINE']</snippet></ROW><ROW><id>9307957</id><snippet>api.write</snippet></ROW><ROW><id>9307957</id><snippet>api.write_regular(title, data=data)
</snippet></ROW><ROW><id>9307957</id><snippet>requests</snippet></ROW><ROW><id>9307957</id><snippet>import requests

url = 'https://www.tumblr.com/api/write'
data = {'email': your_email, 'password': your_password, 'type': 'photo'}
files = {'data': open('your_image.jpg')}

requests.post(url, data=data, files=files)
</snippet></ROW><ROW><id>9308051</id><snippet>newtask=sc_review_task.sc_review_task()</snippet></ROW><ROW><id>9308129</id><snippet>#!/usr/bin/python
import os
import fileinput

new_file_list=[]
all_files=os.listdir("/tmp")
for ff in all_files:
 if ff.endswith(".txt"):
    new_file_list.append(ff)

for files in new_file_list:
 print files
 if files == "a.txt":
   print "======================================="
   file_name="/tmp/"+str(files)
   print file_name

   f = fileinput.FileInput(file_name, inplace=1)

   print "======================================="
   for line in f:
        line = line.replace("hellohello","hello")
        print line,
   f.close()
</snippet></ROW><ROW><id>9308173</id><snippet>lines = fulltext.splitlines()
</snippet></ROW><ROW><id>9308173</id><snippet>\r</snippet></ROW><ROW><id>9308173</id><snippet>\n</snippet></ROW><ROW><id>9308173</id><snippet>&gt;&gt;&gt; 'a\rb\nc\r\nd'.splitlines()
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>9308608</id><snippet>Meta.app_label</snippet></ROW><ROW><id>9308687</id><snippet>/Developer/SDKs/MacOSX10.6.sdk/usr/include/stdarg.h:4:25: error: stdarg.h: No such file or directory
</snippet></ROW><ROW><id>9308687</id><snippet>stdarg.h.</snippet></ROW><ROW><id>9308687</id><snippet>libstdc</snippet></ROW><ROW><id>9308687</id><snippet>libstdc++</snippet></ROW><ROW><id>9308687</id><snippet>libstdc</snippet></ROW><ROW><id>9308687</id><snippet>stdarg.h: No such file or directory</snippet></ROW><ROW><id>9308780</id><snippet>class Wroker(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
    def run(self):
        my_file = open('example.txt')
        # operations
        my_file.close()   # without this line!
</snippet></ROW><ROW><id>9308780</id><snippet>#operations</snippet></ROW><ROW><id>9308780</id><snippet>try/finally</snippet></ROW><ROW><id>9308780</id><snippet>with</snippet></ROW><ROW><id>9308780</id><snippet>with open('example.txt') as my_file:
     # bunch of operations with the file
# other operations for which you don't need the file
</snippet></ROW><ROW><id>9308813</id><snippet>Private Function pvInitVbRuntime() As Boolean
'    Const FUNC_NAME     As String = "pvInitVbRuntime" '
    Const PROGID_DUMMY  As String = LIB_NAME &amp; ".cDummy"
    Dim lIdx            As Long

    lIdx = GetModuleHandle("MSVBVM60.DLL")
    lIdx = GetProcAddress(lIdx, "__vbaSetSystemError")
    Call RtlMoveMemory(lIdx, ByVal lIdx + 9, 4)
    Call RtlMoveMemory(lIdx, ByVal lIdx, 4)
    If TlsGetValue(lIdx) &lt;&gt; 0 Then
        Call CoCreateInstance(CLSIDFromProgID(PROGID_DUMMY), Nothing, CLSCTX_INPROC_SERVER, VBGUIDFromString("{00000000-0000-0000-C000-000000000046}"), Nothing)
        pvInitVbRuntime = True
    Else
'        Call APIOutputDebugString(GetCurrentThreadId() &amp; ": not a VB thread [" &amp; LIB_NAME &amp; "." &amp; MODULE_NAME &amp; "." &amp; FUNC_NAME &amp; "]" &amp; vbCrLf) '
    End If
End Function
</snippet></ROW><ROW><id>9308813</id><snippet>GetModuleHandle</snippet></ROW><ROW><id>9308813</id><snippet>GetProcAddress</snippet></ROW><ROW><id>9308813</id><snippet>RtlMoveMemory</snippet></ROW><ROW><id>9308813</id><snippet>TlsGetValue</snippet></ROW><ROW><id>9308813</id><snippet>CoCreateInstance</snippet></ROW><ROW><id>9308813</id><snippet>CLSIDFromProgID</snippet></ROW><ROW><id>9308813</id><snippet>VBGUIDFromString</snippet></ROW><ROW><id>9308813</id><snippet>APIOutputDebugString</snippet></ROW><ROW><id>9308813</id><snippet>cDummy</snippet></ROW><ROW><id>9308813</id><snippet>CoInitialize</snippet></ROW><ROW><id>9308871</id><snippet>Foo.bar</snippet></ROW><ROW><id>9308871</id><snippet>Foo.bar = 1</snippet></ROW><ROW><id>9308871</id><snippet>Foo.bar</snippet></ROW><ROW><id>9309206</id><snippet>In [15]: True &gt; 5
Out[15]: False
</snippet></ROW><ROW><id>9309206</id><snippet>In [14]: [1, 2] &gt; 5
Out[14]: True
</snippet></ROW><ROW><id>9309206</id><snippet>In [16]: (1, 2) &gt; [1, 2]
Out[16]: True
</snippet></ROW><ROW><id>9309206</id><snippet>In [17]: '1' &gt; 5
Out[17]: True
</snippet></ROW><ROW><id>9310187</id><snippet>getElementsByClassName</snippet></ROW><ROW><id>9310187</id><snippet>document.getElementsByClassName('classname')[0].style.display='block'</snippet></ROW><ROW><id>9310226</id><snippet>SearchValue = SearchValue.splitlines()
for targetValue in SearchValue:
    print LineText.get(targetValue, 'Error:' + targetValue)
</snippet></ROW><ROW><id>9310699</id><snippet>from distutils.sysconfig import get_config_vars</snippet></ROW><ROW><id>9310699</id><snippet>    library_dirs=["""zbarlibdirectory"""],
    include_dirs=[get_config_vars('INCLUDEDIR'),
                  get_config_vars('INCLUDEPY'),
                  """zbarincludedirectory"""]
</snippet></ROW><ROW><id>9310699</id><snippet>C:\zbar\lib</snippet></ROW><ROW><id>9310699</id><snippet>C:\zbar\include</snippet></ROW><ROW><id>9310699</id><snippet>python setup.py build --compiler=mingw32</snippet></ROW><ROW><id>9310699</id><snippet>python setup.py install</snippet></ROW><ROW><id>9310782</id><snippet>from gevent import monkey; monkey.patch_all()
</snippet></ROW><ROW><id>9311212</id><snippet>[tree position, pattern position]</snippet></ROW><ROW><id>9311315</id><snippet>time.sleep(2)</snippet></ROW><ROW><id>9311315</id><snippet>time.sleep(2)</snippet></ROW><ROW><id>9311315</id><snippet>time.sleep(2)</snippet></ROW><ROW><id>9311315</id><snippet>reactor.callLater</snippet></ROW><ROW><id>9311315</id><snippet>time.sleep(2)</snippet></ROW><ROW><id>9311315</id><snippet>twisted.internet.threads.deferToThread</snippet></ROW><ROW><id>9311406</id><snippet>class PostModelFormNormalUser(forms.ModelForm):
    class Meta:
        model = Post
        exclude = ('user', 'created', 'modified')
        widgets = {
            'tagfield': Textinput(),
        }
</snippet></ROW><ROW><id>9311489</id><snippet>def iterate_children(parent):
    child = parent.firstChild
    while child != None:
        yield child
        child = child.nextSibling
</snippet></ROW><ROW><id>9311489</id><snippet>for child in iterate_children(element):
    # foo
</snippet></ROW><ROW><id>9311941</id><snippet>data</snippet></ROW><ROW><id>9311941</id><snippet>sorted(data.items(), key=lambda i: i[1]['Offset'])
</snippet></ROW><ROW><id>9312299</id><snippet>from datetime import datetime
import calendar
import pytz

datestring = '20111122050940.086000'
ymdhms, usec = datestring.split('.')

dt = pytz.utc.localize(datetime.strptime(ymdhms, '%Y%m%d%H%M%S'))
calendar.timegm(dt.utctimetuple()) + float(usec) / 1000000.
</snippet></ROW><ROW><id>9312299</id><snippet>1321938580.086</snippet></ROW><ROW><id>9312299</id><snippet>dt_utc = pytz.utc.localize(datetime.utcfromtimestamp(1321938580.086))

# datetime.datetime(2011, 11, 22, 5, 9, 40, 86000, tzinfo=&lt;UTC&gt;)

dt_utc.strftime('%Y%m%d%H%M%S.%f')

# '20111122050940.086000'
</snippet></ROW><ROW><id>9312299</id><snippet>dt_hu = dt_utc.astimezone(pytz.timezone('Europe/Budapest'))

# datetime.datetime(2011, 11, 22, 6, 9, 40, 86000, tzinfo=&lt;DstTzInfo 'Europe/Budapest' CET+1:00:00 STD&gt;)
</snippet></ROW><ROW><id>9312299</id><snippet>dt_hu.strftime('%Y%m%d%H%M%S.%f')

# '20111122060940.086000'
</snippet></ROW><ROW><id>9312661</id><snippet>for c in s:
    if len(s)!= 4:
        valid = False
    if not c.isdigit():
        print (c, 'is not a valid input')
number = int(s)
</snippet></ROW><ROW><id>9312661</id><snippet>len()</snippet></ROW><ROW><id>9312661</id><snippet>if len(s)!= 4:
    valid = False
for c in s:
    ...
</snippet></ROW><ROW><id>9312661</id><snippet>valid</snippet></ROW><ROW><id>9312661</id><snippet>False</snippet></ROW><ROW><id>9312661</id><snippet>if not c.isdigit():
    print (c, 'is not a valid input')
    valid = False
</snippet></ROW><ROW><id>9312661</id><snippet>int</snippet></ROW><ROW><id>9312661</id><snippet>if valid:
    number = int(s)
    ...
</snippet></ROW><ROW><id>9312661</id><snippet>valid = True
s = input('please type a 4-digit integer \n')
if len(s)!= 4:
    valid = False
    print(len(s), 'is an invalid amount of digits')

if valid:
    for c in s:
        if not c.isdigit():
            valid = False
            print (c, 'is not a valid input')

if valid:
    number = int(s)
    firstOne = number // 100
    secondOne = number % 100
    sum = firstOne + secondOne
    x = '/'
    print('your integer is ' + str(number), x, 'first two digits are ' + str(firstOne), x, 'second two digits are ' + str(secondOne), x, 'sum of two new numbers is ' + str(sum))
</snippet></ROW><ROW><id>9312661</id><snippet>s = input('please type a 4-digit integer \n')
if len(s)!= 4:
    sys.exit(str(len(s)) + ' is an invalid amount of digits')
for c in s:
    if not c.isdigit():
        sys.exit(c + ' is not a valid input')
number = int(s)
firstOne = number // 100
secondOne = number % 100
sum = firstOne + secondOne
x = '/'
print('your integer is ' + str(number), x, 'first two digits are ' + str(firstOne), x, 'second two digits are ' + str(secondOne), x, 'sum of two new numbers is ' + str(sum))
</snippet></ROW><ROW><id>9312774</id><snippet>from PyQt4.QtGui import *
from PyQt4.QtCore import *

class MyListWidget(QListWidget):
    def __init__(self, parent=None):
        super(MyListWidget, self).__init__(parent)
        self.itemClicked.connect(self.on_item_clicked)

    def mousePressEvent(self, event):
        self._mouse_button = event.button()
        super(MyListWidget, self).mousePressEvent(event)

    def on_item_clicked(self, item):
        print item.text(), self._mouse_button

class Frame(QWidget):
    def __init__(self, parent=None):
        super(Frame, self).__init__(parent)    
        self.item_ctrl = items = MyListWidget(self)     
        self.item_ctrl.addItem("Item1")
        self.item_ctrl.addItem("Item2")
        box = QVBoxLayout()
        box.addWidget(self.item_ctrl)
        self.setLayout(box)

if __name__ == "__main__":
    import sys    
    app = QApplication(sys.argv)
    main = Frame()
    main.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9312774</id><snippet>import sys
from PyQt4.QtCore import * 
from PyQt4.QtGui import * 

def main(): 
    app = QApplication(sys.argv) 
    w = MyWindow() 
    w.show() 
    sys.exit(app.exec_()) 

class MyWindow(QWidget): 
    def __init__(self, *args): 
        QWidget.__init__(self, *args) 

        # create table
        list_data = [1,2,3,4]
        lm = MyListModel(list_data, self)
        lv = MyListView()
        lv.setModel(lm)
        lv.clicked.connect(self.item_clicked)
        self.lv = lv

        # layout
        layout = QVBoxLayout()
        layout.addWidget(lv) 
        self.setLayout(layout)

    def item_clicked(self, index):
        print "row=", index.row(), "button=", self.lv._mouse_button

class MyListView(QListView):
    def mousePressEvent(self, event):
        self._mouse_button = event.button()
        super(MyListView, self).mousePressEvent(event)

class MyListModel(QAbstractListModel): 
    def __init__(self, datain, parent=None, *args): 
        """ datain: a list where each item is a row
        """
        QAbstractListModel.__init__(self, parent, *args) 
        self.listdata = datain

    def rowCount(self, parent=QModelIndex()): 
        return len(self.listdata) 

    def data(self, index, role): 
        if index.isValid() and role == Qt.DisplayRole:
            return QVariant(self.listdata[index.row()])
        else: 
            return QVariant()

if __name__ == "__main__": 
    main()
</snippet></ROW><ROW><id>9312778</id><snippet>numpy.ptp()</snippet></ROW><ROW><id>9312833</id><snippet>class Word():
  def __init__(self, name):
    print 'You have just created me and I\'m called ' + name
    self.name = name
    self.wordType = None
  def setWordType(self, type_string):
    print "Hey, and the method works!"
    self.wordType = type_string

wordArray = ["spam","ni", "is","blue"]
count = 3
if count &gt; 0 and wordArray[count - 1] == 'is':
  title = wordArray[count]
  exec("%s = Word(title)" % (title)) #set class from list item.
  exec("%s.setWordType('verb')" % (title))
</snippet></ROW><ROW><id>9312833</id><snippet>&gt; python bla.py 
You have just created me and I'm called blue
Hey, and the method works!
</snippet></ROW><ROW><id>9312833</id><snippet>if title not in checkKeyWords()</snippet></ROW><ROW><id>9312833</id><snippet>blue</snippet></ROW><ROW><id>9314134</id><snippet>use_reloader=False</snippet></ROW><ROW><id>9314134</id><snippet>def run_server(dom):
        _run_on_start("%s" % dom)
        app.run(debug=True, use_reloader=False)

if __name__ == '__main__':
    if len(sys.argv) &lt; 2:
        raise Exception("Must provide domain for application execution.")
    else:
        DOM = sys.argv[1]
        run_server(DOM)
</snippet></ROW><ROW><id>9314139</id><snippet>os.walk</snippet></ROW><ROW><id>9314139</id><snippet>os.remove</snippet></ROW><ROW><id>9314139</id><snippet>os.walk</snippet></ROW><ROW><id>9314139</id><snippet>os.remove</snippet></ROW><ROW><id>9314139</id><snippet>os.path.join</snippet></ROW><ROW><id>9314325</id><snippet>from xml.dom import minidom
dom = minidom.parse('test1.wl.xml')


def print_arcs(from_list, to_list):
    '''
    Print arcs from every member of the from list, to every member of
    the to list
    '''
    for source in from_list:
        for target in to_list:
            print "%s -&gt; %s" % (source, target)

def parse(node, came_from):
    '''
    Descend an XML structure representing an AST
    '''
    if not node:
        return came_from

    if node.nodeName=="#text":
        return parse(node.nextSibling, came_from)

    if node.nodeName=="program":
        return parse(node.firstChild, came_from)

    if node.nodeName=="assignment":
        this = node.getAttribute('label')
        print_arcs(came_from, [this])
        return parse(node.nextSibling, [this])

    if node.nodeName=="while":
        loop_start = node.getAttribute('condition-label')
        print_arcs(came_from, [loop_start])
        next = [loop_start]
        for s in node.childNodes:
            if s.nodeName=="body":
                loop_end = parse(s, [loop_start])
                print_arcs(loop_end, [loop_start])
        return parse(node.nextSibling, next)

    if node.nodeName=="if":
        if_start = node.getAttribute('condition-label')
        print_arcs(came_from, [if_start])
        next = []
        for s in node.childNodes:
            if s.nodeName=="#text":
                continue
            item = parse(s, [if_start])
            if item:
                next.extend(item)
        return parse(node.nextSibling, next)

    if node.nodeName=="condition":
        return None

    if node.nodeName=="true-branch":
        return parse(node.firstChild, came_from)

    if node.nodeName=="false-branch":
        return parse(node.firstChild, came_from)

    if node.nodeName=="body":
        return parse(node.firstChild, came_from)


parse(dom.firstChild, [])
</snippet></ROW><ROW><id>9314325</id><snippet>if</snippet></ROW><ROW><id>9314325</id><snippet>while</snippet></ROW><ROW><id>9314325</id><snippet>parse</snippet></ROW><ROW><id>9314325</id><snippet>while</snippet></ROW><ROW><id>9314325</id><snippet>if</snippet></ROW><ROW><id>9314467</id><snippet>import signal
import time

class TimeOutException(Exception):
    pass

def timeout(seconds, *args, **kwargs):
    def fn(f):
        def wrapped_fn(*args, **kwargs):
            signal.signal(signal.SIGALRM, handler)
            signal.alarm(seconds)
            f(*args, **kwargs)
        return wrapped_fn
    return fn

def handler(signum, frame):
    raise TimeOutException("Timeout")

@timeout(5)
def my_function_that_takes_long(time_to_sleep):
    time.sleep(time_to_sleep)

if __name__ == '__main__':
    print 'Calling function that takes 2 seconds'
    try:
        my_function_that_takes_long(2)
    except TimeOutException:
        print 'Timed out'

    print 'Calling function that takes 10 seconds'
    try:
        my_function_that_takes_long(10)
    except TimeOutException:
        print 'Timed out'
</snippet></ROW><ROW><id>9314566</id><snippet>.netrc</snippet></ROW><ROW><id>9314566</id><snippet>ssh</snippet></ROW><ROW><id>9314566</id><snippet>username@somehost.com:/path/to/repo</snippet></ROW><ROW><id>9314708</id><snippet>__add__()</snippet></ROW><ROW><id>9314708</id><snippet>__radd__()</snippet></ROW><ROW><id>9314708</id><snippet>class Foo:
    def __init__(self, text):
        self.text = text
    def __str__(self):
        return self.text
    def __add__(self, other):
        return str(self) + other
    def __radd__(self, other):
        return other + str(self)
</snippet></ROW><ROW><id>9314708</id><snippet>Foo("b") + "a"</snippet></ROW><ROW><id>9314708</id><snippet>__add__()</snippet></ROW><ROW><id>9314708</id><snippet>"a" + Foo("b")</snippet></ROW><ROW><id>9314708</id><snippet>__radd__()</snippet></ROW><ROW><id>9314908</id><snippet>eval</snippet></ROW><ROW><id>9314908</id><snippet>dicts_from_file = []
with open('myfile.txt','r') as inf:
    for line in inf:
        dicts_from_file.append(eval(line))    
# dicts_from_file now contains the dictionaries created from the text file
</snippet></ROW><ROW><id>9314908</id><snippet>with open('myfile.txt','r') as inf:
    dict_from_file = eval(inf.read())
</snippet></ROW><ROW><id>9314908</id><snippet>eval</snippet></ROW><ROW><id>9314908</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>9314908</id><snippet>eval</snippet></ROW><ROW><id>9314908</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>9314908</id><snippet>ast</snippet></ROW><ROW><id>9314908</id><snippet>ast</snippet></ROW><ROW><id>9314908</id><snippet>with</snippet></ROW><ROW><id>9314908</id><snippet>inf = open('myfile.txt','r')
dict_from_file = eval(inf.read())
inf.close()
</snippet></ROW><ROW><id>9314908</id><snippet>inf.close()</snippet></ROW><ROW><id>9314908</id><snippet>with</snippet></ROW><ROW><id>9314908</id><snippet>with</snippet></ROW><ROW><id>9315013</id><snippet>itemClicked</snippet></ROW><ROW><id>9315013</id><snippet>QListWidgetItem</snippet></ROW><ROW><id>9315013</id><snippet>test</snippet></ROW><ROW><id>9315013</id><snippet>QListWidgetItem</snippet></ROW><ROW><id>9315013</id><snippet>from PyQt4.QtCore import QCoreApplication, Qt
from PyQt4.QtGui import QListWidget, QListWidgetItem, QApplication

import sys

class MyList(QListWidget):
    def __init__(self):
        QListWidget.__init__(self)
        self.add_items()
        self.itemClicked.connect(self.item_click)

    def add_items(self):
        for item_text in ['item1', 'item2', 'item3']:
            item = QListWidgetItem(item_text)
            self.addItem(item)

    def item_click(self, item):
        print item, str(item.text())

if __name__ == '__main__':
    app = QApplication([])
    myList = MyList()
    myList.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9315152</id><snippet>LD_PRELOAD=/path/to/libsqlite3.so.0 python ...
</snippet></ROW><ROW><id>9315152</id><snippet>_sqlite3</snippet></ROW><ROW><id>9315499</id><snippet>cPickle</snippet></ROW><ROW><id>9315499</id><snippet>pickle</snippet></ROW><ROW><id>9315499</id><snippet>&gt;&gt;&gt; pickle_file = open('pickle_foo', 'w')
&gt;&gt;&gt; anydbm_file = anydbm.open('anydbm_foo', 'c')
&gt;&gt;&gt; d = dict((str(i), str(j)) for i, j in zip(range(999999, -1, -1), range(0, 1000000)))
</snippet></ROW><ROW><id>9315499</id><snippet>anydbm_file</snippet></ROW><ROW><id>9315499</id><snippet>&gt;&gt;&gt; %timeit for k, v in d.iteritems(): anydbm_file[k] = v
1 loops, best of 3: 5.14 s per loop
</snippet></ROW><ROW><id>9315499</id><snippet>&gt;&gt;&gt; %timeit cPickle.dump(d, pickle_file)
1 loops, best of 3: 3.79 s per loop
&gt;&gt;&gt; pickle_file.close()
&gt;&gt;&gt; pickle_file = open('pickle_foo', 'r')
&gt;&gt;&gt; %timeit d = cPickle.load(pickle_file)
1 loops, best of 3: 2.03 s per loop
</snippet></ROW><ROW><id>9315499</id><snippet>anydbm_file</snippet></ROW><ROW><id>9315499</id><snippet>&gt;&gt;&gt; %timeit anydbm_file = anydbm.open('anydbm_foo', 'r')
10000 loops, best of 3: 74.3 us per loop
</snippet></ROW><ROW><id>9315499</id><snippet>anydbm</snippet></ROW><ROW><id>9315499</id><snippet>&gt;&gt;&gt; %timeit for i in range(1, 1000): x = anydbm_file[str(i)]
100 loops, best of 3: 3.15 ms per loop
&gt;&gt;&gt; %timeit for i in range(1, 1000): x = d[str(i)]
1000 loops, best of 3: 374 us per loop
</snippet></ROW><ROW><id>9315499</id><snippet>anydbm_file</snippet></ROW><ROW><id>9315499</id><snippet>SQLite3</snippet></ROW><ROW><id>9315499</id><snippet>psycopg2</snippet></ROW><ROW><id>9316160</id><snippet>print</snippet></ROW><ROW><id>9316160</id><snippet>__future__</snippet></ROW><ROW><id>9316160</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>9316160</id><snippet>print &gt;&gt;f1, 'This is a test'
</snippet></ROW><ROW><id>9316210</id><snippet>pim_calendar</snippet></ROW><ROW><id>9316210</id><snippet>pim_calendar.views</snippet></ROW><ROW><id>9316210</id><snippet>import pim_calendar
</snippet></ROW><ROW><id>9316210</id><snippet>import pim_calendar.views
</snippet></ROW><ROW><id>9316210</id><snippet>pim_scratchpad.views</snippet></ROW><ROW><id>9316413</id><snippet>int PyObject_IsTrue(PyObject *o)
</snippet></ROW><ROW><id>9316417</id><snippet>content_test()</snippet></ROW><ROW><id>9316417</id><snippet>def content_test(term):
    return any(c.isalpha() for c in term)
</snippet></ROW><ROW><id>9316417</id><snippet>list()</snippet></ROW><ROW><id>9316417</id><snippet>def read_valid_terms(filename):
    with open(filename) as f:
        for line in f:
            for term in line.split():
                if any(c.isalpha() for c in term):
                    yield term

terms = list(read_valid_terms("terms.txt"))
</snippet></ROW><ROW><id>9316417</id><snippet>for term in read_valid_terms("terms.txt"):
    print term,
print
</snippet></ROW><ROW><id>9316500</id><snippet>commands</snippet></ROW><ROW><id>9316500</id><snippet>subprocess</snippet></ROW><ROW><id>9316500</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>9316500</id><snippet>cd thrift-0.8.0</snippet></ROW><ROW><id>9316500</id><snippet>cwd</snippet></ROW><ROW><id>9316500</id><snippet>import subprocess, os
commands_to_run = [['yum', '-y', 'install',
                    'pypy', 'python', 'MySQL-python', 'mysqld', 'mysql-server',
                    'autocon', 'automake', 'libtool', 'flex', 'boost-devel',
                    'gcc-c++', 'perl-ExtUtils-MakeMaker', 'byacc', 'svn',
                    'openssl-devel', 'make', 'java-1.6.0-openjdk', 'git', 'wget'],
                   ['service', 'mysqld', 'start'],
                   ['wget', 'http://www.quickprepaidcard.com/apache//thrift/0.8.0/thrift-0.8.0.tar.gz'],
                   ['tar', 'zxvf', 'thrift-0.8.0.tar.gz']]
install_commands = [['./configure'], ['make'], ['make', 'install']]

for x in commands_to_run:
    print subprocess.check_output(x)

os.chdir('thrift-0.8.0')

for cmd in install_commands:
    print subprocess.check_output(cmd)
</snippet></ROW><ROW><id>9316500</id><snippet>check_call</snippet></ROW><ROW><id>9316613</id><snippet>&lt;html&gt;
&lt;head&gt;
    &lt;script&gt;
        some_client_specific_code();
    &lt;/script&gt;
&lt;/head&gt;
...
</snippet></ROW><ROW><id>9316614</id><snippet>Foo</snippet></ROW><ROW><id>9316614</id><snippet>f = Foo()
f.set(10)
f.get()    # Returns 10
</snippet></ROW><ROW><id>9316767</id><snippet>None</snippet></ROW><ROW><id>9316767</id><snippet>if x is not None and x.is_valid():
   ...
</snippet></ROW><ROW><id>9316767</id><snippet>or</snippet></ROW><ROW><id>9316767</id><snippet>and</snippet></ROW><ROW><id>9316767</id><snippet>x and y</snippet></ROW><ROW><id>9316767</id><snippet>y</snippet></ROW><ROW><id>9316767</id><snippet>x</snippet></ROW><ROW><id>9316767</id><snippet>false</snippet></ROW><ROW><id>9316767</id><snippet>y</snippet></ROW><ROW><id>9316784</id><snippet>env</snippet></ROW><ROW><id>9316784</id><snippet>pickle</snippet></ROW><ROW><id>9316784</id><snippet>import os
import sys
import pickle

pickle.dump(os.environ, sys.stdout)
</snippet></ROW><ROW><id>9316784</id><snippet>.py</snippet></ROW><ROW><id>9316784</id><snippet>python -c 'import os, sys, pickle; pickle.dump(os.environ, sys.stdout)'
</snippet></ROW><ROW><id>9316784</id><snippet>import os
import pprint
import subprocess
import pickle

command = [
      'bash',
      '-c',
      'source init_env &amp;&amp; ' +
         'python -c "import os, sys, pickle; ' +
                    'pickle.dump(os.environ, sys.stdout)"'
]

proc = subprocess.Popen(command, stdout = subprocess.PIPE)

for k, v in pickle.load(proc.stdout).iteritems():
    os.environ[k] = v

proc.communicate()
</snippet></ROW><ROW><id>9316790</id><snippet>PYTHONHOME</snippet></ROW><ROW><id>9316790</id><snippet>% setenv PYTHONHOME /a/b/python2.7.2/linux26_x86_64
% tar -xzf ActivePython-2.7.2.5-linux-x86_64.tar.gz
% cd ActivePython-2.7.2.5-linux-x86_64
% ./install.sh -I /a/b/python2.7.2/linux26_x86_64
</snippet></ROW><ROW><id>9316879</id><snippet>close</snippet></ROW><ROW><id>9316879</id><snippet>'r'</snippet></ROW><ROW><id>9316879</id><snippet>'g'</snippet></ROW><ROW><id>9316879</id><snippet>'b'</snippet></ROW><ROW><id>9316879</id><snippet>volume</snippet></ROW><ROW><id>9316879</id><snippet>brand</snippet></ROW><ROW><id>9316879</id><snippet>brandcolors = [brand[i].replace('HP','g').replace('Lenovo','r').replace('Dell','b') for i in range(len(brand))]
</snippet></ROW><ROW><id>9316879</id><snippet>scatter(cost, rating, c=brandcolors)
</snippet></ROW><ROW><id>9316879</id><snippet>pr = Rectangle((0, 0), 1, 1, fc='r')
pg = Rectangle((0, 0), 1, 1, fc='g')
pb = Rectangle((0, 0), 1, 1, fc='b')
legend([pr, pg, pb], ['Lenovo', 'HP', 'Dell'])
</snippet></ROW><ROW><id>9316879</id><snippet>plot([-100], 'ro', label='Lenovo')
...
ax.set_ylim(bottom=0)
legend()
</snippet></ROW><ROW><id>9317005</id><snippet>;</snippet></ROW><ROW><id>9317005</id><snippet>Py_DECREF(x); // ok
Py_DECREF(x) // error
</snippet></ROW><ROW><id>9317077</id><snippet>network = splitNet()
print network
</snippet></ROW><ROW><id>9317113</id><snippet>functions.py</snippet></ROW><ROW><id>9317113</id><snippet>from pim_accounts import UserProfile
</snippet></ROW><ROW><id>9317113</id><snippet>from pim_accounts.models import UserProfile
</snippet></ROW><ROW><id>9317526</id><snippet>tr</snippet></ROW><ROW><id>9317526</id><snippet>th</snippet></ROW><ROW><id>9317526</id><snippet>from lxml import html
theString=unicode(open('c:\\secexcel\\1314054-R20110331-C20101231-F60-SEQ132.xls').read(),'UTF-8','replace')
theTree=html.fromstring(theString)
for table in theTree.iter('table'):
    for row in table.findall('tr'):
        headerCells = list(row.findall('th'))
        if headerCells:
            #extract data from row and headerCells 
</snippet></ROW><ROW><id>9317544</id><snippet>colorsys</snippet></ROW><ROW><id>9317544</id><snippet>import colorsys

def rgb_range(color_num):
    h_rng = [ix / float(color_num) for ix in range(color_num)]
    return [colorsys.hsv_to_rgb(h, 1.0, 1.0) for h in h_rng]
</snippet></ROW><ROW><id>9317554</id><snippet>root = RootLogger(WARNING)
def getLogger(name=None):
    if name:
        return Logger.manager.getLogger(name)
    else:
        return root
</snippet></ROW><ROW><id>9317554</id><snippet>loggin.RootLogger</snippet></ROW><ROW><id>9317554</id><snippet>logging.setLoggerClass</snippet></ROW><ROW><id>9317554</id><snippet>_loggerClass = None
def setLoggerClass(klass):
    ...
    _loggerClass = klass
</snippet></ROW><ROW><id>9317554</id><snippet>logging.Manager</snippet></ROW><ROW><id>9317554</id><snippet>logging.getLogger</snippet></ROW><ROW><id>9317554</id><snippet>def getLogger(self, name):
    ...
            rv = (self.loggerClass or _loggerClass)(name)
</snippet></ROW><ROW><id>9317554</id><snippet>self.loggerClass</snippet></ROW><ROW><id>9317554</id><snippet>logging.RootLogger</snippet></ROW><ROW><id>9317589</id><snippet>%L</snippet></ROW><ROW><id>9317589</id><snippet>%1</snippet></ROW><ROW><id>9317589</id><snippet>%*</snippet></ROW><ROW><id>9317589</id><snippet>@</snippet></ROW><ROW><id>9317589</id><snippet>=</snippet></ROW><ROW><id>9317605</id><snippet>set()</snippet></ROW><ROW><id>9317605</id><snippet>itertools.product()</snippet></ROW><ROW><id>9317605</id><snippet>from itertools import product

def generate_edges(iterable, control):
    edges = []
    control_set = set(control)
    for e in iterable:
        e_set = set(e)
        common = e_set &amp; control_set
        to_pair = e_set - common
        edges.extend(product(to_pair, common))
    return edges
</snippet></ROW><ROW><id>9317605</id><snippet>&gt;&gt;&gt; L1 = [["cat","dog","apple"],
...       ["orange","green","red"],
...       ["hand","cat","red"]]
&gt;&gt;&gt; L2 = ["cat","red"]
&gt;&gt;&gt; generate_edges(L1, L2)
[('apple', 'cat'),
 ('dog', 'cat'),
 ('orange', 'red'),
 ('green', 'red'),
 ('hand', 'red'),
 ('hand', 'cat')]
</snippet></ROW><ROW><id>9317652</id><snippet>['-t']</snippet></ROW><ROW><id>9317652</id><snippet>args = parser.parse_args()
</snippet></ROW><ROW><id>9318042</id><snippet>&gt;&gt;&gt; import unidecode
&gt;&gt;&gt; somestring = u"äüÊÂ"
&gt;&gt;&gt; unidecode.unidecode(somestring)
'auEA'
</snippet></ROW><ROW><id>9318042</id><snippet>&gt;&gt;&gt; somestring = u"äüÊÂ"
&gt;&gt;&gt; somestring
u'\xe4\xfc\xca\xc2'
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.normalize('NFKD', somestring).encode('ascii', 'ignore')
'auEA'
</snippet></ROW><ROW><id>9318050</id><snippet>TGRParser</snippet></ROW><ROW><id>9318050</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9318066</id><snippet>from win32com.client Dispatch
xl = Dispatch("Excel.Application")
xl.Visible = 1
xl.Workbooks.Open("somefile.xls")
xl.Save("somefile.xls")
</snippet></ROW><ROW><id>9318351</id><snippet>None</snippet></ROW><ROW><id>9318510</id><snippet>* * * * * cd /home/yourdir; ./loader.py
</snippet></ROW><ROW><id>9318510</id><snippet>* * * * * /home/mc/dotasks.sh
</snippet></ROW><ROW><id>9318510</id><snippet>cd /home/yourdir
./loader.py
#anything else you need to do
</snippet></ROW><ROW><id>9318611</id><snippet>repr(x).decode("utf-8")</snippet></ROW><ROW><id>9318611</id><snippet>unicode(repr(x), "utf-8")</snippet></ROW><ROW><id>9318637</id><snippet>import subprocess
subprocess.call(["python", "myscript.py"])
subprocess.call(["python", "myscript2.py"])
</snippet></ROW><ROW><id>9318637</id><snippet>import myscript
import myscript2

myscript.function_from_script1()
myscript2.function_from_script2()
</snippet></ROW><ROW><id>9318637</id><snippet>function_from_script1()</snippet></ROW><ROW><id>9318867</id><snippet>Game("central_corridor")</snippet></ROW><ROW><id>9318867</id><snippet>Game.__init__()</snippet></ROW><ROW><id>9318867</id><snippet>self</snippet></ROW><ROW><id>9318867</id><snippet>"central_corridor"</snippet></ROW><ROW><id>9318867</id><snippet>a_game = Game(...)</snippet></ROW><ROW><id>9318867</id><snippet>a_game</snippet></ROW><ROW><id>9318867</id><snippet>__new__</snippet></ROW><ROW><id>9318867</id><snippet>__new__</snippet></ROW><ROW><id>9318867</id><snippet>__new__</snippet></ROW><ROW><id>9318867</id><snippet>__init__()</snippet></ROW><ROW><id>9318867</id><snippet>start</snippet></ROW><ROW><id>9318867</id><snippet>Game</snippet></ROW><ROW><id>9318867</id><snippet>a_game</snippet></ROW><ROW><id>9318867</id><snippet>a_game.play()</snippet></ROW><ROW><id>9318867</id><snippet>quips</snippet></ROW><ROW><id>9318867</id><snippet>quips</snippet></ROW><ROW><id>9318867</id><snippet>__init__()</snippet></ROW><ROW><id>9318867</id><snippet>class Game(object):
    quips = ["You died. Please try again.",
            "You lost, better luck next time.",
            "Things didn't work out well. You'll need to start over."
            "You might need to improve your skills. Try again." ]
    def __init__(self, start):
        self.start = start
</snippet></ROW><ROW><id>9318967</id><snippet>from win32com.client import Dispatch
wkbk1 = "...\workbook1.xlsx"
wkbk2 = "...\workbook2.xlsx"
excel = Dispatch("Excel.Application")
excel.Visible = 1
source = excel.Workbooks.Open(wkbk1)
excel.Range("A1:A3").Select()
excel.Selection.Copy()
copy = excel.Workbooks.Open(wkbk2)
excel.Range("A1:A3").Select()
excel.Selection.PasteSpecial(Paste=-4163)
</snippet></ROW><ROW><id>9318969</id><snippet>def print_table(lines, col_num, col_width):
    for line_ix in range(0, len(lines), col_num):
        print ' -- '.join([line.strip().ljust(col_width) for line in lines[line_ix:line_ix+col_num]])
</snippet></ROW><ROW><id>9319062</id><snippet>from celery.task import task
@task
def process(i):
    # do something with i
    i += 1
    # return a result
    return i
</snippet></ROW><ROW><id>9319062</id><snippet>results = []
todo = [1,2,3,4,5]
for arg in todo:
    res = process.apply_async(args=(arg))
    results.append(res)

all_results = [res.get() for res in results]
</snippet></ROW><ROW><id>9319275</id><snippet># To load only columns 1 (time), 19 (velocity x), and 21 (velocity z).
numpy.loadtxt('data.csv', delimiter=',', usecols=(1,19,21))
</snippet></ROW><ROW><id>9319303</id><snippet>import os

try:
    os.symlink("src", "dest")
except OSError:
    print "cant do it :("
</snippet></ROW><ROW><id>9319452</id><snippet>def sql_decorator(func):
    def decorated(table, user, limit):
        ... # do stuff with table
        return func(table, user, limit)
    return decorated

@sql_decorator
def user_records(table, user, limit):
    ...
</snippet></ROW><ROW><id>9319452</id><snippet>def sql_decorator(table_name):
    def the_actual_decorator(func):
        def decorated(user, limit):
            ... # do stuff with table_name
            return func(user, limit)
        return decorated
    return the_actual_decorator

@sql_decorator('some_table_name')
def user_records(user, limit):
    ...
</snippet></ROW><ROW><id>9319452</id><snippet>def sql_decorator(func):
    def decorated(user, limit):
        table = compute_the_table_somehow(user)
        return func(table, user, limit)
    return decorated

@sql_decorator
def user_records(table, user, limit):
    "sql to select records from %s with user=%s limit %s" % (table, user, limit)

data = user_records('joe', 100)
</snippet></ROW><ROW><id>9319488</id><snippet>app.models</snippet></ROW><ROW><id>9319488</id><snippet>app</snippet></ROW><ROW><id>9319488</id><snippet>__init__</snippet></ROW><ROW><id>9319488</id><snippet> from model_a import * 
 from model_b import * 
</snippet></ROW><ROW><id>9319488</id><snippet>app_label</snippet></ROW><ROW><id>9319488</id><snippet> __all__ = ["ModelA", "ModelA1"]

 class ModelA(models.Model):
      class Meta: 
          app_label = 'your_app'
</snippet></ROW><ROW><id>9319488</id><snippet>from model_a import *</snippet></ROW><ROW><id>9319488</id><snippet>__all__</snippet></ROW><ROW><id>9319715</id><snippet>dict</snippet></ROW><ROW><id>9319715</id><snippet>&gt;&gt;&gt; fields = {'a': 'A', 'b': '', 'c': 'C'}
&gt;&gt;&gt; [key for key, value in fields.iteritems() if not value]
['b']
</snippet></ROW><ROW><id>9319715</id><snippet>&gt;&gt;&gt; fields = ['a', 'b', '', 'd']
&gt;&gt;&gt; [index for index, value in enumerate(fields) if not value]
[2]
</snippet></ROW><ROW><id>9320137</id><snippet>import argparse

example = argparse.ArgumentParser(description='main parser')
example.add_argument('Kill')

subexample = example.add_subparsers()
person = subexample.add_parser('who')
person.add_argument('name')
person.add_argument('address')
person.set_defaults(kind = 'person')

animal = subexample.add_parser('what')
animal.add_argument('name')
animal.set_defaults(kind = 'animal')
args = example.parse_args()
print(args)
</snippet></ROW><ROW><id>9320137</id><snippet>% test.py 1 who bar baz
Namespace(Kill='1', address='baz', kind='person', name='bar')
% test.py 1 what foo
Namespace(Kill='1', kind='animal', name='foo')
17:31:52 cyrano@farmer:~/test% 
</snippet></ROW><ROW><id>9320375</id><snippet>&gt;&gt;&gt; key = "root.secondary.user2"
&gt;&gt;&gt; reduce(dict.get, key.split("."), my_dict)
{'age': 25, 'name': 'fred'}
</snippet></ROW><ROW><id>9320375</id><snippet>k</snippet></ROW><ROW><id>9320375</id><snippet>d</snippet></ROW><ROW><id>9320375</id><snippet>dict.get(d, k)</snippet></ROW><ROW><id>9320375</id><snippet>reduce()</snippet></ROW><ROW><id>9320375</id><snippet>def get_key(my_dict, key):
    return reduce(dict.get, key.split("."), my_dict)

def set_key(my_dict, key, value):
    key = key.split(".")
    my_dict = reduce(dict.get, key[:-1], my_dict)
    my_dict[key[-1]] = value

def del_key(my_dict, key):
    key = key.split(".")
    my_dict = reduce(dict.get, key[:-1], my_dict)
    del my_dict[key[-1]]
</snippet></ROW><ROW><id>9320397</id><snippet>x</snippet></ROW><ROW><id>9320397</id><snippet>x</snippet></ROW><ROW><id>9320397</id><snippet>P(x)</snippet></ROW><ROW><id>9320397</id><snippet>X={2,3,5,5,5}</snippet></ROW><ROW><id>9320397</id><snippet>x1</snippet></ROW><ROW><id>9320397</id><snippet>x2</snippet></ROW><ROW><id>9320397</id><snippet>x3</snippet></ROW><ROW><id>9320397</id><snippet>20%/20%/60%</snippet></ROW><ROW><id>9320397</id><snippet>W=(3/2, 1, 6/5)</snippet></ROW><ROW><id>9320397</id><snippet>x1*w1 = 20%</snippet></ROW><ROW><id>9320397</id><snippet>x2*w2 = 20%</snippet></ROW><ROW><id>9320397</id><snippet>x3*w3=60%</snippet></ROW><ROW><id>9320397</id><snippet>Z = w1+w2+w3 = 37/10</snippet></ROW><ROW><id>9320397</id><snippet> P(w1) = w1/Z = 30/68
 P(w2) = w2/Z = 20/68
 P(w3) = w3/Z = 18/68
</snippet></ROW><ROW><id>9320397</id><snippet>P(w1)+P(w2)+3*P(w3)=1</snippet></ROW><ROW><id>9320397</id><snippet>q=[0,1]</snippet></ROW><ROW><id>9320397</id><snippet>q&gt;(30/68)</snippet></ROW><ROW><id>9320397</id><snippet>X(w)</snippet></ROW><ROW><id>9320397</id><snippet>seek</snippet></ROW><ROW><id>9320397</id><snippet>import gzip, random

# Helper function to create some test data
def line(char,n): 
    return ''.join([("%s"%char)*n,"\n"])

# Create the test data as in the example
filename = "test.zip"
FOUT = gzip.open(filename,'wb')
FOUT.write(line('a',2))
FOUT.write(line('b',3))
FOUT.write(line('c',5))
FOUT.write(line('d',5))
FOUT.write(line('e',5))
FOUT.close()

# Since we know the distribution, we know the length
length = 2+3+3*5+5 # 5 newlines

# Print 7 random points in the file
FIN = gzip.open(filename,'rb')
for n in xrange(7):
    FIN.seek(random.randrange(length),0)
    print "Position %3i, char: %s" %(FIN.tell(), [FIN.read(1)])
</snippet></ROW><ROW><id>9320397</id><snippet>Position   8, char: ['c']
Position  23, char: ['e']
Position  15, char: ['d']
Position  10, char: ['c']
Position   4, char: ['b']
Position  16, char: ['d']
Position   2, char: ['\n']
</snippet></ROW><ROW><id>9320790</id><snippet>process_withdrawal</snippet></ROW><ROW><id>9320790</id><snippet>transaction_amount</snippet></ROW><ROW><id>9320790</id><snippet>previous_balance</snippet></ROW><ROW><id>9320790</id><snippet>previous_balance</snippet></ROW><ROW><id>9320790</id><snippet>transaction_amount</snippet></ROW><ROW><id>9320790</id><snippet>if code == "w" or code == "W":
  process_withdrawal(previous_balance, transaction_amount)
</snippet></ROW><ROW><id>9320799</id><snippet>lista = list.sort(lista)
</snippet></ROW><ROW><id>9320799</id><snippet>lista.sort()
</snippet></ROW><ROW><id>9320799</id><snippet>.sort()</snippet></ROW><ROW><id>9320799</id><snippet>sorted_list = sorted(lista)
</snippet></ROW><ROW><id>9320799</id><snippet>list</snippet></ROW><ROW><id>9320799</id><snippet>print str("value 1a")+str(" + ")+str("value 2")+str(" = ")+str("value 3a ")+str("value 4")+str("\n")
</snippet></ROW><ROW><id>9320799</id><snippet>print "value 1a + value 2 = value 3a value 4"
</snippet></ROW><ROW><id>9320799</id><snippet>print("something")</snippet></ROW><ROW><id>9320799</id><snippet>print "something"</snippet></ROW><ROW><id>9320910</id><snippet>easy_install ipython</snippet></ROW><ROW><id>9320970</id><snippet>django.forms.Field</snippet></ROW><ROW><id>9320970</id><snippet>class MyTagField(forms.Field):
    default_error_messages = {
        'some_error': _(u'This is a message re: the somr_error!'),
    }

    def to_python(self, value):
        # put code here to coerce 'value' (raw data from your TextInput)
        # into the form your code will want (a list of Tag objects, perhaps)

    def validate(self, value):
        if &lt;not valid for some reason&gt;:
            raise ValidationError(self.error_messages['some_error'])
</snippet></ROW><ROW><id>9320970</id><snippet>class PostModelFormNormalUser(forms.ModelForm):
    tag = MyTagField()

    class Meta:
        model = Post
        exclude = ('user', 'created', 'modified')

    def __init__(self, *args, **kwargs):
        super(PostModelFormNormalUser, self).__init__(*args, **kwargs)      
        self.fields['tag'].help_text = None
</snippet></ROW><ROW><id>9321093</id><snippet>bitwise XOR</snippet></ROW><ROW><id>9321093</id><snippet>A 11001100
B 10101010
</snippet></ROW><ROW><id>9321093</id><snippet>Q 01100110
</snippet></ROW><ROW><id>9321093</id><snippet>1</snippet></ROW><ROW><id>9321093</id><snippet>0</snippet></ROW><ROW><id>9321093</id><snippet>d.charCodeAt(i)</snippet></ROW><ROW><id>9321093</id><snippet>k.charCodeAt(i)</snippet></ROW><ROW><id>9321093</id><snippet>pow()</snippet></ROW><ROW><id>9321093</id><snippet>Math.pow(base, exponent)</snippet></ROW><ROW><id>9321687</id><snippet>with thread:
for image in files:
    if image.endswith(".jpg"):
        pixbuf = gtk.gdk.pixbuf_new_from_file_at_size("/home/pdk/Pictures/foto2/%s" %image, 128, 128) 
        model.append([image, pixbuf])
</snippet></ROW><ROW><id>9321887</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>9321887</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>9321887</id><snippet>str(f.read(), "cp1251")</snippet></ROW><ROW><id>9321887</id><snippet>writetemp.write()</snippet></ROW><ROW><id>9321887</id><snippet>str()</snippet></ROW><ROW><id>9321887</id><snippet>f.read()</snippet></ROW><ROW><id>9321887</id><snippet>cp1251</snippet></ROW><ROW><id>9321887</id><snippet>writetemp.write()</snippet></ROW><ROW><id>9321887</id><snippet>writetemp</snippet></ROW><ROW><id>9321887</id><snippet>encoding</snippet></ROW><ROW><id>9321887</id><snippet>cp1252</snippet></ROW><ROW><id>9321953</id><snippet>class Foo(object):
    def _get_bar(self):
        return self.__bar
    def _set_bar(self, value):
        if not isinstance(value, int):
            raise TypeError("bar must be set to an integer")
        self.__bar = value
    bar = property(_get_bar, _set_bar)
</snippet></ROW><ROW><id>9321953</id><snippet>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.bar = 3
&gt;&gt;&gt; f.bar
3
&gt;&gt;&gt; f.bar = "three"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in _set_bar
TypeError: bar must be set to an integer
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9321953</id><snippet>def getter_setter_gen(name, type_):
    def getter(self):
        return getattr(self, "__" + name)
    def setter(self, value):
        if not isinstance(value, type_):
            raise TypeError("%s attribute must be set to an instance of %s" % (name, type_))
        setattr(self, "__" + name, value)
    return property(getter, setter)

def auto_attr_check(cls):
    new_dct = {}
    for key, value in cls.__dict__.items():
        if isinstance(value, type):
            value = getter_setter_gen(key, value)
        new_dct[key] = value
    # Creates a new class, using the modified dictionary as the class dict:
    return type(cls)(cls.__name__, cls.__bases__, new_dct)
</snippet></ROW><ROW><id>9321953</id><snippet>auto_attr_check</snippet></ROW><ROW><id>9321953</id><snippet>...     
... @auto_attr_check
... class Foo(object):
...     bar = int
...     baz = str
...     bam = float
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.bar = 5; f.baz = "hello"; f.bam = 5.0
&gt;&gt;&gt; f.bar = "hello"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in setter
TypeError: bar attribute must be set to an instance of &lt;type 'int'&gt;
&gt;&gt;&gt; f.baz = 5
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in setter
TypeError: baz attribute must be set to an instance of &lt;type 'str'&gt;
&gt;&gt;&gt; f.bam = 3 + 2j
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in setter
TypeError: bam attribute must be set to an instance of &lt;type 'float'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9322200</id><snippet>&gt;&gt;&gt; a = 'xyz-abc'
&gt;&gt;&gt; a.find('-')  # return the index of the first instance of '-'
3
&gt;&gt;&gt; a[a.find('-'):]   # return the string of everything past that index
'-abc'
</snippet></ROW><ROW><id>9322200</id><snippet>.find</snippet></ROW><ROW><id>9322236</id><snippet>shell=True</snippet></ROW><ROW><id>9322277</id><snippet>opened_llist = open(locallist, "wt")
connection.retrlines("RETR %s" % "list.txt", opened_llist.write)
opened_llist.write(link + " ")
opened_llist.close()
opened_llist_r = open(locallist, "rb")
connection.storbinary("STOR %s" % "list.txt", opened_llist_r, 8192, print)
opened_llist_r.close()
</snippet></ROW><ROW><id>9322435</id><snippet>setCellWidget</snippet></ROW><ROW><id>9322435</id><snippet>possible_goals = self.ui.listOfGoals.cellWidget(r, 1)
</snippet></ROW><ROW><id>9322499</id><snippet>class TreeViewPrototype( gtk.TreeView ):
   def __init__(self):
       gtk.TreeView.__init__(self)
       self.columns = [str,str,str,str,str,str,str,str]
       #TreeView Initialization

   def set_list_model( self ):
       self.set_model(None)
       liststore = gtk.ListStore( *self.columns)
       for i in range( 50000 ):
           row = []
           for j in range( len( self.columns)):
               row.append( "%d[%d]"%(i,j))
           liststore.append( row )
       self.set_model( liststore )
</snippet></ROW><ROW><id>9322499</id><snippet>set_model(None)</snippet></ROW><ROW><id>9322688</id><snippet>class Example(QtGui.QMainWindow):
    def __init__(self):
        ...

        header = self.table.horizontalHeader()
        header.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        header.customContextMenuRequested.connect(self.handleHeaderMenu)

    def handleHeaderMenu(self, pos):
        print('column(%d)' % self.table.horizontalHeader().logicalIndexAt(pos))
        menu = QtGui.QMenu()
        menu.addAction('Add')
        menu.addAction('Delete')
        menu.exec_(QtGui.QCursor.pos())
</snippet></ROW><ROW><id>9322707</id><snippet>if __name__ == '__main__' :
  app = web.application(urls, globals())
  app.run()
</snippet></ROW><ROW><id>9322749</id><snippet>CREATE TABLE archive(customer integer references customer(id), week INTEGER,....)
</snippet></ROW><ROW><id>9322845</id><snippet>def receiving_function(f):
    f()

def parent_function():
    y=10
    def child_function():
        print y
    receiving_function(child_function)
</snippet></ROW><ROW><id>9322845</id><snippet>10</snippet></ROW><ROW><id>9322845</id><snippet>receiving_function</snippet></ROW><ROW><id>9322845</id><snippet>y</snippet></ROW><ROW><id>9322985</id><snippet>from PIL import Image

image_samples = []

im = Image.open("input.tif")
sample_dimensions = (16,16)

for box in get_all_corner_combinations(im, sample_dimensions):

    image_samples.append(im.crop(box))


classifier = YourClassifier()

classifications = []

for sample in image_samples:
    classifications.append (classifier (sample))

label = fuse_classifications (classifications)
</snippet></ROW><ROW><id>9322985</id><snippet>YourClassifier</snippet></ROW><ROW><id>9323020</id><snippet>import time
import numpy as np

#### create some sample data ####
np.random.seed(1)

V_NUM = 6000
P_NUM = 8000

size = 0.1

vertices = np.random.rand(V_NUM, 3)
points = np.random.rand(P_NUM, 3)

numpoints = np.zeros(V_NUM, np.int32)

#### brute force ####
start = time.clock()
for i in xrange(len(vertices)):        
    cube=((vertices[i,0]&lt;= points[:,0]) &amp; 
    (points[:,0]&lt;(vertices[i,0]+size)) &amp; 
    (vertices[i,1]&lt;= points[:,1]) &amp; 
    (points[:,1] &lt; (vertices[i,1]+size)) &amp;
    (vertices[i,2]&lt;= points[:,2]) &amp; 
    (points[:,2] &lt; (vertices[i,2]+size))
    )
    numpoints[i]=len(points[cube])

print time.clock() - start

#### KDTree ####
from scipy.spatial import cKDTree
center_vertices = vertices + [[size/2, size/2, size/2]]
start = time.clock()
tree_points = cKDTree(points)
_, result = tree_points.query(center_vertices, k=100, p = np.inf, distance_upper_bound=size/2)
numpoints2 = np.zeros(V_NUM, np.int32)
for i, neighbors in enumerate(result):
    numpoints2[i] = np.sum(neighbors!=P_NUM)

print time.clock() - start
print np.all(numpoints == numpoints2)
</snippet></ROW><ROW><id>9323020</id><snippet>center_vertices = vertices + [[size/2, size/2, size/2]]</snippet></ROW><ROW><id>9323020</id><snippet>tree_points = cKDTree(points)</snippet></ROW><ROW><id>9323020</id><snippet>_, result = tree_points.query(center_vertices, k=100, p = np.inf, distance_upper_bound=size/2)</snippet></ROW><ROW><id>9323020</id><snippet>2.04113164434
0.11087783696
True
</snippet></ROW><ROW><id>9323020</id><snippet>neighbors[-1] == P_NUM</snippet></ROW><ROW><id>9323067</id><snippet>&gt;&gt;&gt; def externalCode(two, first=1, second=2):
...     print two, first, second
... 
&gt;&gt;&gt; params = {'two': 9, 'first': 8, 'second': 7}
&gt;&gt;&gt; externalCode(**params)
9 8 7
</snippet></ROW><ROW><id>9323276</id><snippet>heapq</snippet></ROW><ROW><id>9323276</id><snippet>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; import random
&gt;&gt;&gt; l1 = [random.randrange(100) for _ in range(100)]
&gt;&gt;&gt; l2 = [random.randrange(100) for _ in range(100)]
&gt;&gt;&gt; heapq.nlargest(10, (((a - b), a, b) for a, b in zip(l1, l2)))
[(78, 99, 21), (75, 86, 11), (69, 90, 21), (69, 70, 1), (60, 86, 26), (55, 95, 40), (52, 56, 4), (48, 98, 50), (46, 80, 34), (44, 81, 37)]
</snippet></ROW><ROW><id>9323276</id><snippet>abs</snippet></ROW><ROW><id>9323276</id><snippet>&gt;&gt;&gt; heapq.nlargest(10, xrange(len(l1)), key=lambda i: abs(l1[i] - l2[i]))
[91, 3, 14, 27, 46, 67, 59, 39, 65, 36]
</snippet></ROW><ROW><id>9323731</id><snippet>os</snippet></ROW><ROW><id>9323731</id><snippet>os.path</snippet></ROW><ROW><id>9323731</id><snippet>dir()</snippet></ROW><ROW><id>9323769</id><snippet>all(item in superset.items() for item in subset.items())
</snippet></ROW><ROW><id>9324344</id><snippet>var loaded = true;
for (var i = 0 ; loaded ; i++) {
    var div = 'contentDiv' + i;
    $(body).append('&lt;div id=' + div + '&gt;&lt;/div&gt;');
    $('#contentDiv' + i).load('otherpage.html #' + div, function(response, status, xhr) { 
        if (status == 'error') {
            loaded=false;
        }});  // assumes you have the #contentDiv[i] already in otherpage.html
}
</snippet></ROW><ROW><id>9324521</id><snippet>SQLite is an embedded SQL database engine. Unlike most other SQL databases, SQLite does not have a separate server process. SQLite reads and writes directly to ordinary disk files.</snippet></ROW><ROW><id>9324560</id><snippet>lxml</snippet></ROW><ROW><id>9324560</id><snippet>ElementTree</snippet></ROW><ROW><id>9324560</id><snippet>lxml</snippet></ROW><ROW><id>9324560</id><snippet>lxml</snippet></ROW><ROW><id>9324560</id><snippet>libxml2</snippet></ROW><ROW><id>9324560</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9324560</id><snippet>lxml</snippet></ROW><ROW><id>9324560</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9324560</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9324560</id><snippet>lxml</snippet></ROW><ROW><id>9324560</id><snippet>html</snippet></ROW><ROW><id>9324560</id><snippet>xml</snippet></ROW><ROW><id>9324560</id><snippet>&gt;&gt;&gt; lxml.etree.fromstring('&lt;html&gt;')
...
XMLSyntaxError: Premature end of data in tag html line 1, line 1, column 7
</snippet></ROW><ROW><id>9324560</id><snippet>&gt;&gt;&gt; bs4.BeautifulSoup('&lt;html&gt;', 'lxml')
&lt;html&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>9324560</id><snippet>lxml</snippet></ROW><ROW><id>9324560</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9324560</id><snippet>&gt;&gt;&gt; lxml.html.soupparser.fromstring('&lt;html&gt;')
&lt;Element html at 0x13bd230&gt;
</snippet></ROW><ROW><id>9324560</id><snippet>lxml</snippet></ROW><ROW><id>9324560</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9324580</id><snippet>(x0,y0,x,1,y1)</snippet></ROW><ROW><id>9324580</id><snippet>create_oval</snippet></ROW><ROW><id>9324580</id><snippet>def enclosing_box(x, y, radius):
    """Given the coordinates of the circle center and its radius, return the top-left and bottom-right coordinates of the enclosing box."""
    return (x-radius, y-radius, x+radius, y+radius)
</snippet></ROW><ROW><id>9324580</id><snippet>*args</snippet></ROW><ROW><id>9324580</id><snippet>create_oval</snippet></ROW><ROW><id>9324580</id><snippet>coords = enclosing_box(x,y,radius)
w.create_oval(*coords)
</snippet></ROW><ROW><id>9324622</id><snippet>['1', '1']</snippet></ROW><ROW><id>9324622</id><snippet>['1', '0', '1']</snippet></ROW><ROW><id>9324622</id><snippet>'1'</snippet></ROW><ROW><id>9324622</id><snippet>'0'</snippet></ROW><ROW><id>9324622</id><snippet>def isvalid(a, n, k):
    if not isinstance(a, basestring):
       a = ''.join(a) # `a` is a list of '1', '0'
    return (len(a) == n and a.count('1') == k and a.count('0') == (n-k) and
            all(p not in a for p in ['11', '101']))
</snippet></ROW><ROW><id>9324622</id><snippet>def subsets(n, k):
    assert k &gt;= 0 and n &gt;= 0
    if k == 0: # no students, all seats are empty
        yield '0'*n
    elif k == 1 and (n == 1 or n == 2): # the last student at the end of the row
        yield '1' + '0'*(n-1) # either '1' or '10'
        if n == 2: yield '01'
    elif n &gt; 3*(k-1): # there are enough empty seats left for k students
        for s in subsets(n-3, k-1):
            yield '100' + s # place a student
        for s in subsets(n-1, k):
            yield '0' + s   # add empty seat
</snippet></ROW><ROW><id>9324622</id><snippet>n, k = 5, 2
for s in subsets(n, k):
    assert isvalid(s, n, k)
    print(s)
</snippet></ROW><ROW><id>9324622</id><snippet>10010
10001
01001
</snippet></ROW><ROW><id>9324649</id><snippet>get_model</snippet></ROW><ROW><id>9324649</id><snippet>django.db.models</snippet></ROW><ROW><id>9324649</id><snippet>project_phase = get_model('core', 'project_phase')
</snippet></ROW><ROW><id>9324811</id><snippet>#!/usr/bin/env python

import grp, pwd 

user = "myname"
groups = [g.gr_name for g in grp.getgrall() if user in g.gr_mem]
gid = pwd.getpwnam(user).pw_gid
groups.append(grp.getgrgid(gid).gr_name)
print groups
</snippet></ROW><ROW><id>9324885</id><snippet>colors.BoundaryNorm</snippet></ROW><ROW><id>9324885</id><snippet>x = np.arange(0,8,0.1)
y = np.arange(0,8,0.1)
z = (x[:,None]-4) ** 2 + (y[None,:]-4) ** 2

lev = [0.1,0.2,0.5,1.0,2.0,4.0,8.0,16.0,32.0]
norml = colors.BoundaryNorm(lev, 256)
cs = plt.contourf(x, y, z, cmap = cm.jet, levels = lev, norm = norml)
plt.show()
</snippet></ROW><ROW><id>9324885</id><snippet>Normalize</snippet></ROW><ROW><id>9324936</id><snippet>request.get('submitedform', 0)
</snippet></ROW><ROW><id>9325185</id><snippet>C</snippet></ROW><ROW><id>9325185</id><snippet>class PickalableC(C, PickalableSWIG):

    def __init__(self, *args):
        self.args = args
        C.__init__(self)
</snippet></ROW><ROW><id>9325185</id><snippet>PickalableSWIG</snippet></ROW><ROW><id>9325185</id><snippet>class PickalableSWIG:

    def __setstate__(self, state):
        self.__init__(*state['args'])

    def __getstate__(self):
        return {'args': self.args}
</snippet></ROW><ROW><id>9325185</id><snippet>pickle.loads(pickle.dumps(C()))
</snippet></ROW><ROW><id>9325185</id><snippet>pickle.loads(pickle.dumps(PickalableC()))
</snippet></ROW><ROW><id>9325320</id><snippet>HotelCheck.objects.filter(client=1, status='Complete').values('product','date_booked').annotate(Sum('quantity'))
</snippet></ROW><ROW><id>9326171</id><snippet>get_hexdigest</snippet></ROW><ROW><id>9326171</id><snippet>get_hexdigest</snippet></ROW><ROW><id>9326262</id><snippet>rpclib</snippet></ROW><ROW><id>9326262</id><snippet># File /home/myhome/test.wsgi
import logging

from rpclib.application import Application
from rpclib.decorator import srpc
from rpclib.interface.wsdl import Wsdl11
from rpclib.protocol.soap import Soap11
from rpclib.service import ServiceBase
from rpclib.model.complex import Iterable
from rpclib.model.primitive import Integer
from rpclib.model.primitive import String
from rpclib.server.wsgi import WsgiApplication

class HelloWorldService(ServiceBase):
    @srpc(String, Integer, _returns=Iterable(String))
    def say_hello(name, times):
        '''
        Docstrings for service methods appear as documentation in the wsdl
        &lt;b&gt;what fun&lt;/b&gt;
        @param name the name to say hello to
        @param the number of times to say hello
        @return the completed array
        '''

        for i in xrange(times):
            yield 'Hello, %s' % name

application = WsgiApplication(Application([HelloWorldService], 'rpclib.examples.hello.soap',
                interface=Wsdl11(), in_protocol=Soap11(), out_protocol=Soap11()))
</snippet></ROW><ROW><id>9326262</id><snippet>WSGIDaemonProcess example processes=5 threads=5
WSGIProcessGroup example

WSGIScriptAlias / /home/myhome/test.wsgi
&lt;Directory /home/myhome/&gt;
Order deny,allow
Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>9326739</id><snippet>def getFeatures(self):
    self.getFeaturesOnly = True
    self.getElements()
</snippet></ROW><ROW><id>9326739</id><snippet>def getFeatures(self):
    self.getFeaturesOnly = True
    return self.getElements()    # returning the generator
</snippet></ROW><ROW><id>9326739</id><snippet>Reader()</snippet></ROW><ROW><id>9326739</id><snippet>getElement</snippet></ROW><ROW><id>9326739</id><snippet>def getElements(self):
    inFile = open(self.path)
    for element in cElementTree.iterparse(inFile):
        yield element
    inFile.close()
</snippet></ROW><ROW><id>9326739</id><snippet>getFeatures()</snippet></ROW><ROW><id>9326739</id><snippet>def getFeatures(self):
    for element in self.getElements():
        if element.tag == 'feature':
            yield element
</snippet></ROW><ROW><id>9326863</id><snippet>exec('nohup python /home/process/script.py -i '.escapeshellarg($location).' &amp;&gt;/dev/null &amp;');
</snippet></ROW><ROW><id>9327098</id><snippet>list(itertools.combinations(range(5), 2))
</snippet></ROW><ROW><id>9327098</id><snippet>[(0, 1),
 (0, 2),
 (0, 3),
 (0, 4),
 (1, 2),
 (1, 3),
 (1, 4),
 (2, 3),
 (2, 4),
 (3, 4)]
</snippet></ROW><ROW><id>9327098</id><snippet>list(itertools.combinations(range(5), 2))
</snippet></ROW><ROW><id>9327098</id><snippet>def combiner(zeros=3, ones=2):
    for indices in itertools.combinations(range(zeros+ones), ones):
        item = ['0'] * (zeros+ones)
        for index in indices:
            item[index] = '1'
        yield ''.join(item)

print list(combiner(3, 2))

['11000',
 '01100',
 '01010',
 '01001',
 '00101',
 '00110',
 '10001',
 '10010',
 '00011',
 '10100']
</snippet></ROW><ROW><id>9327098</id><snippet>list(combiner(13, 2))
</snippet></ROW><ROW><id>9327241</id><snippet>with open(filename, mode='ab+') as fp:
    json.dump(obj_json,fp)
    s=json.load(fp)
</snippet></ROW><ROW><id>9327241</id><snippet>json.dump</snippet></ROW><ROW><id>9327241</id><snippet>fp.seek</snippet></ROW><ROW><id>9327241</id><snippet>import os
with open(filename, mode='rb+') as fp:
    fp.seek(0, os.SEEK_END)
    pos = fp.tell()
    json.dump(obj_json,fp)
    fp.seek(pos)
    s=json.load(fp)
</snippet></ROW><ROW><id>9327289</id><snippet>def myregex(pattern,text,dir=0):
    import re
    m = re.search(pattern, text)
    if m:
        yield m.group(0)
        if len(m.group('suffix')):
            for r in myregex(pattern, "%s%s%s" % (m.group('prefix'),m.group('suffix')[1:],m.group('end')),1):
                yield r
            if dir&lt;1 :
                for r in myregex(pattern, "%s%s%s" % (m.group('prefix'),m.group('suffix')[:-1],m.group('end')),-1):
                    yield r


def myprocess(pattern, text):    
    parts = pattern.split("*")    
    for i in range(0, len(parts)-1 ):
        res=""
        for j in range(0, len(parts) ):
            if j==0:
                res+="(?P&lt;prefix&gt;"
            if j==i:
                res+=")(?P&lt;suffix&gt;"
            res+=parts[j]
            if j==i+1:
                res+=")(?P&lt;end&gt;"
            if j&lt;len(parts)-1:
                if j==i:
                    res+=".*"
                else:
                    res+=".*?"
            else:
                res+=")"
        for r in myregex(res,text):
            yield r

def mycount(pattern, text):
    return set(myprocess(pattern, text))
</snippet></ROW><ROW><id>9327289</id><snippet>&gt;&gt;&gt; mycount('a*b*c','abc')
set(['abc'])
&gt;&gt;&gt; mycount('a*k','akka')
set(['akk', 'ak'])
&gt;&gt;&gt; mycount('b*o','bboo')
set(['bbo', 'bboo', 'bo', 'boo'])
&gt;&gt;&gt; mycount('b*o','bb123oo')
set(['b123o', 'bb123oo', 'bb123o', 'b123oo'])
&gt;&gt;&gt; mycount('b*o','ffbfbfffofoff')
set(['bfbfffofo', 'bfbfffo', 'bfffofo', 'bfffo'])
</snippet></ROW><ROW><id>9327405</id><snippet>&gt;&gt;&gt; d = {'mail':None, 'mobile':None, 'telephoneNumber':['01112512152']}
&gt;&gt;&gt; 
&gt;&gt;&gt; dict((k,v and v[0] or v) for k,v in d.items())
{'mail': None, 'mobile': None, 'telephoneNumber': '01112512152'}
</snippet></ROW><ROW><id>9327405</id><snippet>None</snippet></ROW><ROW><id>9327405</id><snippet>&gt;&gt;&gt; dict((k,v[0]) for k,v in d.items() if v)
{'telephoneNumber': '01112512152'}
</snippet></ROW><ROW><id>9327488</id><snippet>class CheckFileSize(formencode.validators.FormValidator):
    __unpackargs__ = ('upload_field', 'max_file_size')

    def validate_python(self, value_dict, state):
        log.info('test')
        if value_dict.get(self.upload_field) is None:
            return value_dict
        fileobj = getattr(value_dict.get(self.upload_field), 'file', None)
        fileobj.seek(0, os.SEEK_END)
        if int(fileobj.tell()) &gt; int(self.max_file_size):
            raise formencode.Invalid(
                _('File too big'),
                value_dict, state,
                error_dict={self.upload_field:
                    formencode.Invalid(_('File too big'), value_dict, state)})
        return value_dict

class CreateNewCaseForm(formencode.Schema):
    ...
    chained_validators = [
        CheckFileSize('file', max_upload_size),
    ]
</snippet></ROW><ROW><id>9327671</id><snippet>app.open.resource
</snippet></ROW><ROW><id>9327671</id><snippet>app.open_resource
</snippet></ROW><ROW><id>9327671</id><snippet>open</snippet></ROW><ROW><id>9327671</id><snippet>open_resource</snippet></ROW><ROW><id>9327733</id><snippet>FieldStorage</snippet></ROW><ROW><id>9327733</id><snippet>if request.params.get('logo') is not None:
    # do x
</snippet></ROW><ROW><id>9327830</id><snippet>&gt;&gt;&gt; datetime.datetime.now(pytz.utc).isoformat()
'2012-02-17T11:58:44.789024+00:00'

&gt;&gt;&gt; datetime.datetime.now(pytz.timezone('Europe/Paris')).isoformat()
'2012-02-17T13:00:10.885743+01:00'
</snippet></ROW><ROW><id>9327923</id><snippet>from subprocess import Popen, PIPE

# Run "cat", which is a simple Linux program that prints it's input.
process = Popen(['/bin/cat'], stdin=PIPE, stdout=PIPE)
process.stdin.write('Hello\n')
print repr(process.stdout.readline()) # Should print 'Hello\n'
process.stdin.write('World\n')
print repr(process.stdout.readline()) # Should print 'World\n'

# "cat" will exit when you close stdin.  (Not all programs do this!)
process.stdin.close()
print 'Waiting for cat to exit'
process.wait()
print 'cat finished with return code %d' % process.returncode
</snippet></ROW><ROW><id>9328645</id><snippet>comtypes</snippet></ROW><ROW><id>9328645</id><snippet>win32com</snippet></ROW><ROW><id>9328645</id><snippet>VT_ARRAY | VT_I2 or VT_ARRAY | VT_R8</snippet></ROW><ROW><id>9328645</id><snippet>InsertionPoint</snippet></ROW><ROW><id>9328645</id><snippet>comtypes</snippet></ROW><ROW><id>9328668</id><snippet>t</snippet></ROW><ROW><id>9328668</id><snippet>t</snippet></ROW><ROW><id>9328668</id><snippet>import t
inst = t.MyClass()
</snippet></ROW><ROW><id>9328668</id><snippet>t</snippet></ROW><ROW><id>9328668</id><snippet>from t import MyClass
inst = MyClass()
</snippet></ROW><ROW><id>9328826</id><snippet>instance_of.my_thing</snippet></ROW><ROW><id>9328826</id><snippet>help</snippet></ROW><ROW><id>9328826</id><snippet>1</snippet></ROW><ROW><id>9328826</id><snippet>help(MyClass.my_thing)</snippet></ROW><ROW><id>9328826</id><snippet>help(type(instance_of).my_thing)</snippet></ROW><ROW><id>9329097</id><snippet>a[np.arange(4)[:,None], idxs]
</snippet></ROW><ROW><id>9329474</id><snippet>self.switch</snippet></ROW><ROW><id>9329474</id><snippet>import weakref

class Ghost(object):
    def __init__(self):
        #pass
        self.switch = {'eat':self.eat, 'sleep':self.sleep}

    def eat(self):
        pass

    def sleep(self):
        pass

ghost = Ghost()

def callback(o):
    print 'callback', o

wref = weakref.ref(ghost, callback)
print 'del ghost'
del ghost
print 'after del ghost'
</snippet></ROW><ROW><id>9329474</id><snippet>del ghost
after del ghost
callback &lt;weakref at 00B55FC0; dead&gt;
</snippet></ROW><ROW><id>9329474</id><snippet>print 'gc.collect'
import gc
gc.collect()
print 'after gc.collect'
</snippet></ROW><ROW><id>9329474</id><snippet>del ghost
after del ghost
gc.collect
callback &lt;weakref at 00B55FC0; dead&gt;
after gc.collect
</snippet></ROW><ROW><id>9329474</id><snippet>ghost</snippet></ROW><ROW><id>9329503</id><snippet>hideEvent</snippet></ROW><ROW><id>9329503</id><snippet>showEvent</snippet></ROW><ROW><id>9329503</id><snippet>#!/usr/bin/env python
import sys
from PyQt4 import QtCore, QtGui


class CustomWidget(QtGui.QLabel):
    signal_hided = QtCore.pyqtSignal()
    signal_shown = QtCore.pyqtSignal()
    def hideEvent(self, event):
        print 'hideEvent'
        super(CustomWidget, self).hideEvent(event)
        self.signal_hided.emit()

    def showEvent(self, event):
        print 'showEvent'
        super(CustomWidget, self).showEvent(event)
        self.signal_shown.emit()


class MainWidget(QtGui.QWidget):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.widget1 = CustomWidget('Widget1')
        self.widget2 = CustomWidget('Widget2')

        # connect signals, so if one widget is hidden then other is shown
        self.widget1.signal_hided.connect(self.widget2.show)
        self.widget2.signal_hided.connect(self.widget1.show)
        self.widget2.signal_shown.connect(self.widget1.hide)
        self.widget1.signal_shown.connect(self.widget2.hide)

        # some test code
        self.button = QtGui.QPushButton('test')
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.button)
        layout.addWidget(self.widget1)
        layout.addWidget(self.widget2)
        self.setLayout(layout)
        self.button.clicked.connect(self.do_test)

    def do_test(self):
        if self.widget1.isHidden():
            self.widget1.show()
        else:
            self.widget2.show()


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    widget = MainWidget()
    widget.resize(640, 480)
    widget.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9329588</id><snippet>arr</snippet></ROW><ROW><id>9329588</id><snippet>&gt;&gt;&gt; arr = [1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; selected = [arr[i] for i in [0, 4, 2]]
&gt;&gt;&gt; selected
[1, 5, 3]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9329588</id><snippet>arr[i]</snippet></ROW><ROW><id>9330000</id><snippet>ImportError</snippet></ROW><ROW><id>9330000</id><snippet>init</snippet></ROW><ROW><id>9330000</id><snippet>void</snippet></ROW><ROW><id>9330000</id><snippet>PyErr_Occurred()</snippet></ROW><ROW><id>9330000</id><snippet>PyErr_Print()</snippet></ROW><ROW><id>9330000</id><snippet>Py_Initialize()</snippet></ROW><ROW><id>9330000</id><snippet>Py_Finalize()</snippet></ROW><ROW><id>9330000</id><snippet>iTunesPluginMain()</snippet></ROW><ROW><id>9330000</id><snippet>kPluginInitMessage</snippet></ROW><ROW><id>9330000</id><snippet>kPluginCleanupMessage</snippet></ROW><ROW><id>9330000</id><snippet>LoadLibrary()</snippet></ROW><ROW><id>9330000</id><snippet>FreeLibrary()</snippet></ROW><ROW><id>9330274</id><snippet>{% with picture = mymodel.picture %}

My Picture Size Large {{ picture }}
My Picture Size Medium {{ picture }}
My Picture Size Small  {{ picture }}

{% endwith %}
</snippet></ROW><ROW><id>9330332</id><snippet>scipy.stats.chisquare</snippet></ROW><ROW><id>9330332</id><snippet>&gt;&gt;&gt; observed = np.array([20., 20., 0., 0.])
&gt;&gt;&gt; expected = np.array([.25, .25, .25, .25]) * np.sum(observed)
&gt;&gt;&gt; chisquare(observed, expected)
(40.0, 1.065509033425585e-08)
</snippet></ROW><ROW><id>9330332</id><snippet>&gt;&gt;&gt; chisquare(observed)
(40.0, 1.065509033425585e-08)
</snippet></ROW><ROW><id>9330333</id><snippet>def printList(myList):
    maxDigits = len(str(len(myList)))
    str_format = '#{0:0' + str(maxDigits) + '}'
    for i, elem in enumerate(myList, 1):
        print str_format.format(i), elem
</snippet></ROW><ROW><id>9330333</id><snippet>def printList(myList):
    maxDigits = len(str(len(myList)))
    for i, elem in enumerate(myList, 1):
        print '#{1:0{0}} {2}'.format(maxDigits, i, elem)
</snippet></ROW></DATA>