<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>8901436</id><snippet>cList1</snippet></ROW><ROW><id>8901436</id><snippet>v</snippet></ROW><ROW><id>8901436</id><snippet>cList1 = []
for line in f:
    cList1.append(line.rstrip('\n'))
</snippet></ROW><ROW><id>8901436</id><snippet>cList1 = [line.rstrip('\n') for line in f]
</snippet></ROW><ROW><id>8901436</id><snippet>readlines()</snippet></ROW><ROW><id>8901436</id><snippet>def readFile1(file1):
    cList1 = [line.rstrip('\n') for line in file1]
    print cList1
</snippet></ROW><ROW><id>8901652</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; response = urllib.urlopen(
     'http://api.hostip.info/get_html.php?ip=12.215.42.19&amp;position=true').read()
&gt;&gt;&gt; print response
Country: UNITED STATES (US)
City: Aurora, TX

Latitude: 33.0582
Longitude: -97.5159
IP: 12.215.42.19
</snippet></ROW><ROW><id>8902032</id><snippet>str</snippet></ROW><ROW><id>8902032</id><snippet>'raw_unicode_escape'</snippet></ROW><ROW><id>8902032</id><snippet>In [25]: print str(x).decode('raw_unicode_escape')
(u'abc/αβγ',)
</snippet></ROW><ROW><id>8902295</id><snippet># when write action log
# 1. decide the prefix based on the data
prefix = decide_prefix(action)

# 2. random pick up a bulk for this data
index = random.choice(range(100))

# 3. write action into a queue
action_list = memceche.get("%s_%s"%(prefix, index))
action_list.append(action)
memcache.set("%s_%s"%(prefix,index), action_list)

# when read action log
action_lists = memcache.get_multi(["%s_%s"%(prefix, k) for k in range(100)])

# merge all action list together.
all_action_list = merge_action_list(action_lists)
</snippet></ROW><ROW><id>8902354</id><snippet>int</snippet></ROW><ROW><id>8902354</id><snippet>long</snippet></ROW><ROW><id>8902354</id><snippet>++</snippet></ROW><ROW><id>8902354</id><snippet>--</snippet></ROW><ROW><id>8902354</id><snippet>&gt;&gt;&gt; a = int(10)
&gt;&gt;&gt; b = a
&gt;&gt;&gt; print id(a), id(b)
166744132 166744132
&gt;&gt;&gt; a += 1
&gt;&gt;&gt; print id(a), id(b)
166744120 166744132
&gt;&gt;&gt; print a, b
11 10
</snippet></ROW><ROW><id>8902496</id><snippet>stdout</snippet></ROW><ROW><id>8902496</id><snippet>with open('temp.txt', 'w') as output:
    server = subprocess.Popen('./server.py', stdout=output)
    server.communicate()
</snippet></ROW><ROW><id>8902728</id><snippet>from pyo import *
s = Server().boot()
osc1 = Sine(freq=440).out()
osc2 = Sine(freq=810).out()
s.start()
s.gui(locals())
</snippet></ROW><ROW><id>8903263</id><snippet>import os
import re

pat = "No\. (\d\d\-\d\d\d\d)"
mydir = 'mydir'
for arch in os.listdir(mydir):
    archpath = os.path.join(mydir, arch)
    with open(archpath) as f:
        txt = f.read()
    s = re.search(pat, txt)
    name = s.group(1)
    newpath = os.path.join(mydir, name)
    os.rename(archpath, newpath)
</snippet></ROW><ROW><id>8903263</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pat = "No\. (\d\d\-\d\d\d\d)"
&gt;&gt;&gt; txt='nothing here or whatever No. 09-1159 you want, does not matter'
&gt;&gt;&gt; s = re.search(pat, txt)
&gt;&gt;&gt; s.group(1)
'09-1159'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8903263</id><snippet>\. -&gt; a dot
\d -&gt; a decimal digit
\- -&gt; a dash
</snippet></ROW><ROW><id>8903263</id><snippet>"No. "</snippet></ROW><ROW><id>8903263</id><snippet>s.group(1)</snippet></ROW><ROW><id>8903263</id><snippet>this is the first
file with a number
nothing here or whatever No. 09-1159 you want, does not matter
the number is
</snippet></ROW><ROW><id>8903346</id><snippet>import operator 
search_params = reduce(operator.or_, search_params, Q())
</snippet></ROW><ROW><id>8903346</id><snippet>|</snippet></ROW><ROW><id>8903346</id><snippet>search_params</snippet></ROW><ROW><id>8903346</id><snippet>Q()</snippet></ROW><ROW><id>8903442</id><snippet>def format_name(fname, lname):
    if lname:
        return "{0} {1}.".format(fname, lname)
    return fname
</snippet></ROW><ROW><id>8903442</id><snippet>return format_name(self.user.first_name, self.user.last_name)</snippet></ROW><ROW><id>8903442</id><snippet>__unicode__</snippet></ROW><ROW><id>8903642</id><snippet>("".join(s) for s in product(alphabet, repeat=n) if s[:n//2]!=s[n//2:])
</snippet></ROW><ROW><id>8903757</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '2011 Company'
&gt;&gt;&gt; removed = re.sub('(^\d{4})|(\d{4}$)','',s).strip()
&gt;&gt;&gt; print removed
</snippet></ROW><ROW><id>8903990</id><snippet>struct.pack("Bbh", 0, 1, 7)
</snippet></ROW><ROW><id>8903990</id><snippet>struct.pack("!Bbh", 0, 1, 7)
</snippet></ROW><ROW><id>8904144</id><snippet>data = bytes.fromhex('01AF23')
s.send(data)
</snippet></ROW><ROW><id>8904144</id><snippet>b'\x01\xAF\x23'
</snippet></ROW><ROW><id>8904144</id><snippet>data = '01AF23'.decode('hex')
</snippet></ROW><ROW><id>8904205</id><snippet>pygame.rect.Rect</snippet></ROW><ROW><id>8904300</id><snippet>zip</snippet></ROW><ROW><id>8904300</id><snippet>for letters in zip('hello', 'apple', 'green', 'paint', 'sting'):
     print letters
</snippet></ROW><ROW><id>8904300</id><snippet>&gt;&gt;&gt; for letters in zip('hello', 'apple', 'green', 'paint', 'sting'):
...   print letters
... 
('h', 'a', 'g', 'p', 's')
('e', 'p', 'r', 'a', 't')
('l', 'p', 'e', 'i', 'i')
('l', 'l', 'e', 'n', 'n')
('o', 'e', 'n', 't', 'g')
</snippet></ROW><ROW><id>8904388</id><snippet>from django.db import models

class Player(models.Model):
    user_name = models.CharField()
    real_name = models.CharField()
    site_played = models.CharField()
</snippet></ROW><ROW><id>8904388</id><snippet>from django import forms

MyForm(forms.Form):
   user_name = forms.CharField()
   real_name = forms.CharField()
   site_played = forms.CharField()
</snippet></ROW><ROW><id>8904388</id><snippet>from forms import MyForm
from models import Player

def new_player(request):
    #...
    if request.method == 'POST':
        form = MyForm(request.POST)

        if form.is_valid():
            player = Player()
            player.user_name = form.cleaned_data.get('user_name')
            player.real_name = form.cleaned_data.get('real_name')
            player.site_played = form.cleaned_data.get('site_played')
            player.save()
    #...
    return render_to_response('stakeme/new_player.html',
                              context_instance=RequestContext(request))
</snippet></ROW><ROW><id>8904467</id><snippet>slots = [1, 2, 3, 7]
for slot in slots:
    print cards[slot]
</snippet></ROW><ROW><id>8904467</id><snippet>slots = [1, 2, 3, 7]
for i in range(len(slots)):
    print cards[slots[i]]
</snippet></ROW><ROW><id>8904467</id><snippet>enumerate()</snippet></ROW><ROW><id>8904467</id><snippet>for i, slot in enumerate(slots):
    print cards[slot]
    slots[i] += 1
</snippet></ROW><ROW><id>8904501</id><snippet>is</snippet></ROW><ROW><id>8904501</id><snippet>a = "12 34'
b = a
</snippet></ROW><ROW><id>8904501</id><snippet>a is b</snippet></ROW><ROW><id>8904501</id><snippet>True</snippet></ROW><ROW><id>8904501</id><snippet>"1234"</snippet></ROW><ROW><id>8904501</id><snippet>a</snippet></ROW><ROW><id>8904501</id><snippet>b</snippet></ROW><ROW><id>8904762</id><snippet>row_sums = a.sum(axis=1)
new_matrix = a / row_sums[:, numpy.newaxis]
</snippet></ROW><ROW><id>8904762</id><snippet>row_sums[:, numpy.newaxis]</snippet></ROW><ROW><id>8904762</id><snippet>(3,)</snippet></ROW><ROW><id>8904762</id><snippet>(3, 1)</snippet></ROW><ROW><id>8904762</id><snippet>a / b</snippet></ROW><ROW><id>8904762</id><snippet>a</snippet></ROW><ROW><id>8904762</id><snippet>b</snippet></ROW><ROW><id>8904953</id><snippet>HttpResponse</snippet></ROW><ROW><id>8904953</id><snippet>from django.core.files.base import ContentFile

def test(request):
    http_response = export(request, app_name='ingredients', model_name='ingredient')
    file_ = ContentFile(http_response.content)
    file_.name = http_response['Content-Disposition'].split('=')[-1] 

    new_export = IngredientExportItem(file_name="x", slug="x", file=file_)
    new_export.save()
    return HttpResponseRedirect('/')
</snippet></ROW><ROW><id>8904964</id><snippet>liste = []
for primeCandidate in range (2,100):
    isPrime = True
    for divisor in range (2,primeCandidate):
        if primeCandidate % divisor == 0:
            isPrime = False
            break
    if isPrime:
        liste.append(primeCandidate)
        print(liste)
</snippet></ROW><ROW><id>8905252</id><snippet>,</snippet></ROW><ROW><id>8905252</id><snippet>f = open('mycsv.csv','rb')
fo = open('out.csv','wb')

# go through each line of the file
for line in f:
    bits = line.split(',')
    # change second column
    bits[1] = '"input"'
    # join it back together and write it out
    fo.write( ','.join(bits) )

f.close()
fo.close()
</snippet></ROW><ROW><id>8905368</id><snippet>mymatrix.diagonal()</snippet></ROW><ROW><id>8905368</id><snippet>numpy.all(mymatrix.diagonal() == 0)</snippet></ROW><ROW><id>8905368</id><snippet>not numpy.any(mymatrix.diagonal())</snippet></ROW><ROW><id>8905368</id><snippet>numpy.sum(numpy.abs(mymatrix.diagonal()))==0</snippet></ROW><ROW><id>8905529</id><snippet>numpy.triu</snippet></ROW><ROW><id>8905529</id><snippet>numpy.tril</snippet></ROW><ROW><id>8905729</id><snippet>db_utils.db_open()</snippet></ROW><ROW><id>8905729</id><snippet>db_utils.db_create_voltdrop()</snippet></ROW><ROW><id>8905729</id><snippet>db_utils.db</snippet></ROW><ROW><id>8905729</id><snippet>None</snippet></ROW><ROW><id>8905729</id><snippet>metadata.create_all(self.db)</snippet></ROW><ROW><id>8905729</id><snippet>db_utils.db_open()</snippet></ROW><ROW><id>8905729</id><snippet>db_utils.db_create_voltdrop()</snippet></ROW><ROW><id>8905729</id><snippet>metadata.create_all(None)</snippet></ROW><ROW><id>8905729</id><snippet>sqlalchemy.exc.UnboundExecutionError</snippet></ROW><ROW><id>8905729</id><snippet>ValueError</snippet></ROW><ROW><id>8905729</id><snippet>metadata.bind = self.db
metadata.create_all()
</snippet></ROW><ROW><id>8905900</id><snippet>In [1]: import urllib

In [2]: urllib.quote('%')
Out[2]: '%25'
</snippet></ROW><ROW><id>8905900</id><snippet>In [4]: urllib.quote_plus('a b')
Out[4]: 'a+b'
</snippet></ROW><ROW><id>8906201</id><snippet>VTK</snippet></ROW><ROW><id>8906201</id><snippet>tvtk</snippet></ROW><ROW><id>8906201</id><snippet>tvtk.MassProperties</snippet></ROW><ROW><id>8906201</id><snippet>mass.surface_area</snippet></ROW><ROW><id>8906201</id><snippet>mass</snippet></ROW><ROW><id>8906201</id><snippet>import numpy as np
from tvtk.api import tvtk

def main():
    # Generate some data with anisotropic cells...
    # x,y,and z will range from -2 to 2, but with a 
    # different (20, 15, and 5 for x, y, and z) number of steps
    x,y,z = np.mgrid[-2:2:20j, -2:2:15j, -2:2:5j]
    r = np.sqrt(x**2 + y**2 + z**2)

    dx, dy, dz = [np.diff(it, axis=a)[0,0,0] for it, a in zip((x,y,z),(0,1,2))]

    # Your actual data is a binary (logical) array
    max_radius = 1.5
    data = (r &lt;= max_radius).astype(np.int8)

    ideal_volume = 4.0 / 3 * max_radius**3 * np.pi
    coarse_volume = data.sum() * dx * dy * dz
    est_volume = vtk_volume(data, (dx, dy, dz), (x.min(), y.min(), z.min()))

    coarse_error = 100 * (coarse_volume - ideal_volume) / ideal_volume
    vtk_error = 100 * (est_volume - ideal_volume) / ideal_volume

    print 'Ideal volume', ideal_volume
    print 'Coarse approximation', coarse_volume, 'Error', coarse_error, '%'
    print 'VTK approximation', est_volume, 'Error', vtk_error, '%'

def vtk_volume(data, spacing=(1,1,1), origin=(0,0,0)):
    data[data == 0] = -1
    grid = tvtk.ImageData(spacing=spacing, origin=origin)
    grid.point_data.scalars = data.T.ravel() # It wants fortran order???
    grid.point_data.scalars.name = 'scalars'
    grid.dimensions = data.shape

    iso = tvtk.ImageMarchingCubes(input=grid)
    mass = tvtk.MassProperties(input=iso.output)
    return mass.volume

main()
</snippet></ROW><ROW><id>8906201</id><snippet>Ideal volume 14.1371669412
Coarse approximation 14.7969924812 Error 4.66731094565 %
VTK approximation 14.1954890878 Error 0.412544796894 %
</snippet></ROW><ROW><id>8906410</id><snippet>obj.second</snippet></ROW><ROW><id>8906410</id><snippet>getseconditem</snippet></ROW><ROW><id>8906410</id><snippet>obj.second</snippet></ROW><ROW><id>8906410</id><snippet>obj.second(obj.items)</snippet></ROW><ROW><id>8906410</id><snippet>second</snippet></ROW><ROW><id>8906410</id><snippet>class Items(object):
    def __init__(self, *items):
        self.items = items

    def __getitem__(self, i):
        return self.items[i]

    def second(self):
        return getseconditem(self.items)
</snippet></ROW><ROW><id>8906410</id><snippet>getseconditem</snippet></ROW><ROW><id>8906410</id><snippet>obj.second</snippet></ROW><ROW><id>8906410</id><snippet>docs</snippet></ROW><ROW><id>8906445</id><snippet>map = {
    'a': ['b', 'c'],
    'b': ['c', 'd'],
    'c': ['d', 'a'],
    'd': []
}

def print_paths(map, start, length, prefix = ''):
    if length == 0:
        print prefix
    else:
        for a in map[start]:
            print_paths(map, a, length - 1, prefix + start)

for a in map.keys():
    print_paths(map, a, 5)
</snippet></ROW><ROW><id>8907072</id><snippet>import re
def subStringMatchExact(target, key):
    regex = re.compile(re.escape(key))
    return tuple(match.start() for match in regex.finditer(target))
</snippet></ROW><ROW><id>8907072</id><snippet>def subStringMatchExact(target, key):
    regex = re.compile("(?=" + re.escape(key) + ")")
    return tuple(match.start() for match in regex.finditer(target))
</snippet></ROW><ROW><id>8907072</id><snippet>tuple</snippet></ROW><ROW><id>8907167</id><snippet>ZipFile</snippet></ROW><ROW><id>8907167</id><snippet>StringIO</snippet></ROW><ROW><id>8907167</id><snippet>import StringIO

myZipFile = base64.decodestring(base64ZipFile)

objZip = zipfile.ZipFile(StringIO.StringIO(myZipFile),'r')
</snippet></ROW><ROW><id>8907269</id><snippet>timedelta</snippet></ROW><ROW><id>8907269</id><snippet>def strfdelta(tdelta, fmt):
    d = {"days": tdelta.days}
    d["hours"], rem = divmod(tdelta.seconds, 3600)
    d["minutes"], d["seconds"] = divmod(rem, 60)
    return fmt.format(**d)
</snippet></ROW><ROW><id>8907269</id><snippet>&gt;&gt;&gt; print strfdelta(delta_obj, "{days} days {hours}:{minutes}:{seconds}")
1 days 20:18:12
&gt;&gt;&gt; print strfdelta(delta_obj, "{hours} hours and {minutes} to go")
20 hours and 18 to go
</snippet></ROW><ROW><id>8907269</id><snippet>strftime</snippet></ROW><ROW><id>8907269</id><snippet>string.Template</snippet></ROW><ROW><id>8907269</id><snippet>from string import Template

class DeltaTemplate(Template):
    delimiter = "%"

def strfdelta(tdelta, fmt):
    d = {"D": tdelta.days}
    d["H"], rem = divmod(tdelta.seconds, 3600)
    d["M"], d["S"] = divmod(rem, 60)
    t = DeltaTemplate(fmt)
    return t.substitute(**d)
</snippet></ROW><ROW><id>8907269</id><snippet>&gt;&gt;&gt; print strfdelta(delta_obj, "%D days %H:%M:%S")
1 days 20:18:12
&gt;&gt;&gt; print strfdelta(delta_obj, "%H hours and %M to go")
20 hours and 18 to go
</snippet></ROW><ROW><id>8907269</id><snippet>timedelta.days</snippet></ROW><ROW><id>8907692</id><snippet>add_view</snippet></ROW><ROW><id>8907692</id><snippet>ModelAdmin.save_model</snippet></ROW><ROW><id>8907692</id><snippet>obj.save()</snippet></ROW><ROW><id>8907707</id><snippet>sin</snippet></ROW><ROW><id>8907707</id><snippet>sqrt</snippet></ROW><ROW><id>8907707</id><snippet>cos</snippet></ROW><ROW><id>8907707</id><snippet>X</snippet></ROW><ROW><id>8907707</id><snippet>&gt;&gt;&gt; from scipy.sparse import csr_matrix
&gt;&gt;&gt; X = csr_matrix(np.arange(10).reshape(2, 5), dtype=np.float)
&gt;&gt;&gt; X.A
array([[ 0.,  1.,  2.,  3.,  4.],
       [ 5.,  6.,  7.,  8.,  9.]])
</snippet></ROW><ROW><id>8907707</id><snippet>X.data</snippet></ROW><ROW><id>8907707</id><snippet>&gt;&gt;&gt; X.data
array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
</snippet></ROW><ROW><id>8907707</id><snippet>&gt;&gt;&gt; X.data[:] = np.sqrt(X.data)
&gt;&gt;&gt; X.A
array([[ 0.        ,  1.        ,  1.41421356,  1.73205081,  2.        ],
       [ 2.23606798,  2.44948974,  2.64575131,  2.82842712,  3.        ]])
</snippet></ROW><ROW><id>8907707</id><snippet>X.sqrt()</snippet></ROW><ROW><id>8907707</id><snippet>X</snippet></ROW><ROW><id>8907707</id><snippet>X</snippet></ROW><ROW><id>8907977</id><snippet>G.node[route[i]]['position'] = list()</snippet></ROW><ROW><id>8907977</id><snippet>G.node[route[i]]['position']</snippet></ROW><ROW><id>8907977</id><snippet>del l[:]</snippet></ROW><ROW><id>8907977</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>8908094</id><snippet>__del__</snippet></ROW><ROW><id>8908094</id><snippet>__del__</snippet></ROW><ROW><id>8908094</id><snippet>class MyClass(object):
    def __enter__(self):
        return self
    def __exit__(self,ext_type,exc_value,traceback):
        if self.__fileHandle__ is not None:
                self.__fileHandle__.close()
</snippet></ROW><ROW><id>8908094</id><snippet>MyClass</snippet></ROW><ROW><id>8908094</id><snippet>with MyClass() as myobj:
    ...
</snippet></ROW><ROW><id>8908094</id><snippet>myobj.__exit__</snippet></ROW><ROW><id>8908094</id><snippet>self.__fileHandle__.close()</snippet></ROW><ROW><id>8908094</id><snippet>with-block</snippet></ROW><ROW><id>8908428</id><snippet>  def findparam (self, searchstr, startstr, endstr, occurancenr):
    start = searchstr.find(startstr)
    while start &gt;= 0 and occurancenr &gt; 1:
      ...
</snippet></ROW><ROW><id>8909233</id><snippet>base64</snippet></ROW><ROW><id>8909233</id><snippet>b''</snippet></ROW><ROW><id>8909233</id><snippet>&gt;&gt;&gt; encoded = base64.b64encode('data to be encoded')
</snippet></ROW><ROW><id>8909233</id><snippet>&gt;&gt;&gt; encoded = 'data to be encoded'.encode('ascii')
</snippet></ROW><ROW><id>8909233</id><snippet>&gt;&gt;&gt; encoded = b'data to be encoded'
</snippet></ROW><ROW><id>8909333</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = "John A, Smith, william tell, jacob oram"
&gt;&gt;&gt; re.sub(r"(?&lt;=\b\w),", ".", a)
'John A. Smith, william tell, jacob oram'
</snippet></ROW><ROW><id>8909333</id><snippet>\w</snippet></ROW><ROW><id>8909333</id><snippet>[A-Z]</snippet></ROW><ROW><id>8909706</id><snippet>class LanguageSpoken(models.Model):
     user = models.ForeignKey("UserProfile")
     language = models.CharField(max_length = 2, choices = LANGUAGES)
</snippet></ROW><ROW><id>8909915</id><snippet>tag.string</snippet></ROW><ROW><id>8909915</id><snippet>NavigableString</snippet></ROW><ROW><id>8909915</id><snippet>a</snippet></ROW><ROW><id>8909915</id><snippet>from BeautifulSoup import BeautifulSoup

s = """&lt;p&gt;   1. Content of the paragraph &lt;i&gt; in italic &lt;/i&gt; but not &lt;b&gt; strong &lt;/b&gt; &lt;a href="url"&gt;ignore&lt;/a&gt;.&lt;/p&gt;"""
soup = BeautifulSoup(s, convertEntities=BeautifulSoup.HTML_ENTITIES)

for p in soup.findAll('p'):
    for a in p.findAll('a'):
        a.extract()
    print ''.join(p.findAll(text=True))
</snippet></ROW><ROW><id>8909943</id><snippet>__nonzero__()</snippet></ROW><ROW><id>8909943</id><snippet>__bool__()</snippet></ROW><ROW><id>8909943</id><snippet>__nonzero__()</snippet></ROW><ROW><id>8909943</id><snippet>bool</snippet></ROW><ROW><id>8909963</id><snippet>cell = sh.cell(x,y)
print(cell.value)
</snippet></ROW><ROW><id>8909973</id><snippet>#!/usr/bin/env python
import sys
from contextlib import closing as C

import pycurl

class Writer:
   def __init__(self, file):
       self.file = file

   def write(self, data):
       sys.stderr.write(data)
       self.file.write(data)

   def close(self):
       self.file.close()

url = 'http://stackoverflow.com/questions/8909710/'
with C(pycurl.Curl()) as c, C(Writer(open('output','wb'))) as w:
    c.setopt(c.URL, url)
    c.setopt(c.WRITEFUNCTION, w.write)
    c.setopt(c.FOLLOWLOCATION, True)
    c.perform()
    print &gt;&gt;sys.stderr, c.getinfo(c.HTTP_CODE), c.getinfo(c.EFFECTIVE_URL)
</snippet></ROW><ROW><id>8910205</id><snippet>class ItemLoader(ItemLoader):

    default_output_processor = MapCompose(unicode.strip)
</snippet></ROW><ROW><id>8910208</id><snippet>&gt;&gt;&gt; reobj = re.compile("(?:auto|allow-|iface)(?:(?!(?:auto|allow-|iface)).)*(?&lt;!\s)", re.DOTALL)
&gt;&gt;&gt; result = reobj.findall(subject)
&gt;&gt;&gt; result
['auto lo eth0', 'allow-hotplug eth1', 'iface eth0-home inet static\n    address 192.168.1.1\n    netmask 255.255.255.0']
</snippet></ROW><ROW><id>8910208</id><snippet>(?:auto|allow-|iface)   # Match one of the search terms
(?:                     # Try to match...
 (?!                    #  (as long as we're not at the start of
  (?:auto|allow-|iface) #  the next search term):
 )                      #  
 .                      # any character.
)*                      # Do this any number of times.
(?&lt;!\s)                 # Assert that the match doesn't end in whitespace
</snippet></ROW><ROW><id>8910208</id><snippet>&gt;&gt;&gt; reobj = re.compile("(auto|allow-|iface)\s*((?:(?!(?:auto|allow-|iface)).)*)(?&lt;!\s)", re.DOTALL)
&gt;&gt;&gt; result = [tuple(match.groups()) for match in reobj.finditer(subject)]
&gt;&gt;&gt; result
[('auto', 'lo eth0'), ('allow-', 'hotplug eth1'), ('iface', 'eth0-home inet static\n    address 192.168.1.1\n    netmask 255.255.255.0')]
</snippet></ROW><ROW><id>8910919</id><snippet>ScriptAlias</snippet></ROW><ROW><id>8910919</id><snippet>.htaccess</snippet></ROW><ROW><id>8910919</id><snippet>Options +ExecCGI
AddHandler cgi-script py
</snippet></ROW><ROW><id>8911052</id><snippet>path\to\file\name(lineno) : error : text of the error
</snippet></ROW><ROW><id>8911052</id><snippet>c:\dev\myfile.ext(17) : error : 'foo' is not a valid configuration directive
</snippet></ROW><ROW><id>8911052</id><snippet>__main__</snippet></ROW><ROW><id>8911155</id><snippet>__init__</snippet></ROW><ROW><id>8911155</id><snippet>&gt;&gt;&gt; class Person:
...     showName = display['name']
...     showAge = display['age']
...     def __init__(self):
...             self.name = 'Bob'
...             self.age = 22
...
&gt;&gt;&gt; Person().showAge()
22
</snippet></ROW><ROW><id>8911155</id><snippet>MethodType</snippet></ROW><ROW><id>8911155</id><snippet>&gt;&gt;&gt; class Person:
...     def __init__(self):
...             self.name = 'Bob'
...             self.age = 22
...             self.showName = types.MethodType(display['name'], self)
...             self.showAge = types.MethodType(display['age'], self)
...
&gt;&gt;&gt; Person().showAge()
22
</snippet></ROW><ROW><id>8911155</id><snippet>object.attribute</snippet></ROW><ROW><id>8911155</id><snippet>self</snippet></ROW><ROW><id>8911155</id><snippet>MethodType</snippet></ROW><ROW><id>8911290</id><snippet>def text_file():
    return 'text.txt'

def show_log():  ##  Main log function, 
    filename = text_file()
    if os.path.exists(filename) and os.path.getsize(filename): # if text.txt is not empty show the menu
        log_menu()
    else: # no textfile there or its empty
        print
        print "  You have not draw anything yet!"
        print
        raw_input('  Press Enter to continue ')
    return
</snippet></ROW><ROW><id>8911655</id><snippet>from myModule import myFunction</snippet></ROW><ROW><id>8911655</id><snippet>show_name</snippet></ROW><ROW><id>8911655</id><snippet>class Person:
   def __init__(self):
      self.name = 'Bob'
      self.show_name = types.MethodType(container['show_name'], self)
</snippet></ROW><ROW><id>8911655</id><snippet>('show_name',&lt;bound_method&gt;)</snippet></ROW><ROW><id>8911655</id><snippet>self.__dict__</snippet></ROW><ROW><id>8911655</id><snippet>class Person:
   show_name = container['show_name']
   def __init__(self):
      self.name = 'Bob'
</snippet></ROW><ROW><id>8911769</id><snippet>list(starmap(create_foobar, repeat((), 10)))
</snippet></ROW><ROW><id>8911799</id><snippet># test1.py
try:
    import test2
except IndentationError as ex:
    print ex

# test2.py
def f():
    pass
        pass # error
</snippet></ROW><ROW><id>8911881</id><snippet>class NameShowMixin(object):
    def showName(self):
        openWindow()
        print self.name
</snippet></ROW><ROW><id>8911881</id><snippet>name</snippet></ROW><ROW><id>8912420</id><snippet>nonzero</snippet></ROW><ROW><id>8912420</id><snippet>diag_deg, _ = np.histogram(x.nonzero()[0], np.arange(x.shape[0]+1))

# generating a diagonal matrix with diag_deg
dim = x.shape[0]
diag_mat = np.zeros((dim**2, ))
diag_mat[np.arange(0, dim**2, dim+1)] = diag_deg
diag_mat.reshape((dim, dim))
</snippet></ROW><ROW><id>8912420</id><snippet>dim ~ 1 million</snippet></ROW><ROW><id>8912420</id><snippet>np.zeros((dim**2, ))</snippet></ROW><ROW><id>8912420</id><snippet>ValueError: Maximum allowed dimension exceeded</snippet></ROW><ROW><id>8912420</id><snippet>diag_mat = sparse.coo_matrix((dim, dim))
diag_mat.setdiag(diag_deg)
</snippet></ROW><ROW><id>8912969</id><snippet>bisect</snippet></ROW><ROW><id>8912969</id><snippet>import bisect

intervals = [(999, 2333, 'int1'), (0, 128, 'int2'), (235, 865, 'int3')]
intervals.sort()

def find_int(intervals, val):
   pos = bisect.bisect_left([interval[1] for interval in intervals], val)
   if pos &lt; len(intervals) and val &gt;= intervals[pos][0]:
      return intervals[pos]
   else:
      return None

print(find_int(intervals, 0))
print(find_int(intervals, 1))
print(find_int(intervals, 200))
print(find_int(intervals, 998))
print(find_int(intervals, 999))
print(find_int(intervals, 1000))
print(find_int(intervals, 2333))
print(find_int(intervals, 2334))
</snippet></ROW><ROW><id>8912969</id><snippet>[interval[1] for interval in intervals]</snippet></ROW><ROW><id>8913048</id><snippet>    [handler_simpleHandler]
    formatter=simpleFormatter
    class=handlers.RotatingFileHandler
    maxBytes=31457280
    level=DEBUG
    args=('/tmp/test.log',)
</snippet></ROW><ROW><id>8913061</id><snippet>data[:]</snippet></ROW><ROW><id>8913061</id><snippet>data</snippet></ROW><ROW><id>8913061</id><snippet>rev_data = copy.deepcopy(data)
</snippet></ROW><ROW><id>8913061</id><snippet>rev_data = [x[:] for x in data]
</snippet></ROW><ROW><id>8913098</id><snippet>bidsrc = string</snippet></ROW><ROW><id>8913098</id><snippet>$</snippet></ROW><ROW><id>8913098</id><snippet>()</snippet></ROW><ROW><id>8913098</id><snippet>.*?</snippet></ROW><ROW><id>8913098</id><snippet>[\d.]+</snippet></ROW><ROW><id>8913098</id><snippet>r"""value="full_review"&gt;Detailed review \(Up to \$([\d.]+)\)&lt;/option&gt;"""
</snippet></ROW><ROW><id>8913395</id><snippet>recvfrom(2)</snippet></ROW><ROW><id>8913395</id><snippet>connect(2)</snippet></ROW><ROW><id>8913646</id><snippet>lookup(Course, 14)</snippet></ROW><ROW><id>8913646</id><snippet>def lookup( the_model, item_id ):
    try:
        the_model.objects.get( pk=item_id )
    except the_model.DoesNotExist:
        return None
</snippet></ROW><ROW><id>8913646</id><snippet>lookup( "Course", 14)</snippet></ROW><ROW><id>8913646</id><snippet>return None</snippet></ROW><ROW><id>8913694</id><snippet>unicode_html = myfile.read().decode('utf-8', 'ignore')
soup = BeautifulSoup (unicode_html)
</snippet></ROW><ROW><id>8913706</id><snippet>In [1]: import re

In [2]: s = 'adsgasdlkgasYasdgjaUUalsdkjgaZsdalkjgalsdkjTlaksdjfgasdkgj'

In [3]: re.match(r'(?:.*?[A-Z]){3}.*?([A-Z].*)', s).group(1)
Out[3]: 'ZsdalkjgalsdkjTlaksdjfgasdkgj'
</snippet></ROW><ROW><id>8913706</id><snippet>.*?[A-Z]</snippet></ROW><ROW><id>8913706</id><snippet>(?:</snippet></ROW><ROW><id>8913706</id><snippet>){3}</snippet></ROW><ROW><id>8913706</id><snippet>.*?</snippet></ROW><ROW><id>8913706</id><snippet>([A-Z].*)</snippet></ROW><ROW><id>8913706</id><snippet>In [1]: import re

In [2]: s = 'adsgasdlkgasYasdgjaUUalsdkjgaZsdalkjgalsdkjTlaksdjfgasdkgj'

In [3]: ''.join(re.findall(r'[A-Z][^A-Z]*', s)[3:])
Out[3]: 'ZsdalkjgalsdkjTlaksdjfgasdkgj'
</snippet></ROW><ROW><id>8914064</id><snippet>class MyApp(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)

        self.drawer = Drawer(self)
        self.setCentralWidget(self.drawer)
</snippet></ROW><ROW><id>8914173</id><snippet>&gt;&gt;&gt; print(1, end=' '); print(2)
1 2
</snippet></ROW><ROW><id>8914173</id><snippet>&gt;&gt;&gt; help(print)
</snippet></ROW><ROW><id>8914227</id><snippet>import time
dt = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
</snippet></ROW><ROW><id>8914227</id><snippet>HTTPError: HTTP Error 403: Forbidden</snippet></ROW><ROW><id>8914227</id><snippet>... &lt;Error&gt;&lt;Code&gt;SignatureDoesNotMatch&lt;/Code&gt;&lt;Message&gt;The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.&lt;/Message&gt;&lt;/Error&gt; ...
</snippet></ROW><ROW><id>8914277</id><snippet>StartDrawingOnTop</snippet></ROW><ROW><id>8914329</id><snippet>mystruct</snippet></ROW><ROW><id>8914329</id><snippet>tp = mystruct.type
</snippet></ROW><ROW><id>8914329</id><snippet>tp.fields()</snippet></ROW><ROW><id>8914470</id><snippet># Let's suppose we have 30 observations with 5 variables each...
# The five variables are temp, pressure, x-velocity, y-velocity, and z-velocity
x = np.random.random((30, 5))

# Make a structured dtype to represent our variables...
dtype=dict(names=['temp', 'pressure', 'x_vel', 'y_vel', 'z_vel'],
           formats=5 * [np.float])

# Now view "x" as a structured array with the dtype we created...
data = x.view(dtype)

# Each measurement will now have the name fields we created...
print data[0]
print data[0]['temp']

# If we want, say, all the "temp" measurements:
print data['temp']

# Or all of the "temp" and "x_vel" measurements:
print data[['temp', 'x_vel']]
</snippet></ROW><ROW><id>8914470</id><snippet>data = np.rec.fromarrays(*x, 
              names=['temp', 'pressure', 'x_vel', 'y_vel', 'z_vel'])
print data.temp
</snippet></ROW><ROW><id>8914470</id><snippet>larry</snippet></ROW><ROW><id>8914470</id><snippet>pandas</snippet></ROW><ROW><id>8914770</id><snippet>t=0
while  t&lt;5:  #currently loop runs for 10 seconds
    print "in loop",t, repr(t)
    if (t&lt;5):
        print "true"
    t=t+0.1
</snippet></ROW><ROW><id>8914770</id><snippet>in loop 0 0
true
in loop 0.1 0.1
true
in loop 0.2 0.2
true
in loop 0.3 0.30000000000000004
</snippet></ROW><ROW><id>8914770</id><snippet>in loop 4.8 4.799999999999999
true
in loop 4.9 4.899999999999999
true
in loop 5.0 4.999999999999998
true
</snippet></ROW><ROW><id>8914881</id><snippet>/path/to/python virtualenv --no-site-packages hellodjango</snippet></ROW><ROW><id>8914907</id><snippet>i % N</snippet></ROW><ROW><id>8914907</id><snippet>i % N + N</snippet></ROW><ROW><id>8914907</id><snippet>i</snippet></ROW><ROW><id>8914907</id><snippet>data = 'Data to buffer'
N = 4
buf = 2*N*['\00']

for i,c in enumerate(data):
    j = i % N
    buf[j] = c
    buf[j+N] = c
    if i &gt;= N-1:
        print ''.join(buf[j+1:j+N+1]) 
</snippet></ROW><ROW><id>8914907</id><snippet>Data
ata 
ta t
a to
 to 
to b
o bu
 buf
buff
uffe
ffer
</snippet></ROW><ROW><id>8915117</id><snippet>pkgutil</snippet></ROW><ROW><id>8915117</id><snippet>import pkgutil

def usable_modules(package_name):
    modules = pkgutil.iter_modules([package_name])
    usable = []
    for importer, name, ispkg in modules:
        module = pkgutil.find_loader('{0}.{1}'.format(package_name, name)).\
                                                             load_module(name)
        if hasattr(module, 'CAN_USE') and module.CAN_USE:
            usable.append(module)
    return usable

print(usable_modules('functions'))
</snippet></ROW><ROW><id>8915117</id><snippet>__init__.py</snippet></ROW><ROW><id>8915117</id><snippet>if not name.startswith('func'): continue</snippet></ROW><ROW><id>8915267</id><snippet>import colorsys

def get_hsv(hexrgb):
    hexrgb = hexrgb.lstrip("#")   # in case you have Web color specs
    r, g, b = (int(hexrgb[i:i+2], 16) / 255.0 for i in xrange(0,5,2))
    return colorsys.rgb_to_hsv(r, g, b)
</snippet></ROW><ROW><id>8915267</id><snippet>color_list = ["000050", "005000", "500000"]  # GBR
color_list.sort(key=get_hsv)
print color_list
</snippet></ROW><ROW><id>8915529</id><snippet>super()</snippet></ROW><ROW><id>8915529</id><snippet>__init__()</snippet></ROW><ROW><id>8915529</id><snippet>class A(object):
    def __init__(self, param_a, **kwargs):
        self.param_a = param_a
        super(A, self).__init__(**kwargs)

class B(A):
    def __init__(self, param_b, **kwargs):
        self.param_b = param_b
        super(B, self).__init__(**kwargs)

class C(A):
    def __init__(self, param_c, **kwargs):
        self.param_c = param_c
        super(C, self).__init__(**kwargs)

class D(B, C):
    def __init__(self, param_d, **kwargs):
        self.param_d = param_d
        super(D, self).__init__(**kwargs)

d = D(param_a=1, param_b=2, param_c=3, param_d=4)
</snippet></ROW><ROW><id>8915529</id><snippet>super().__init__()</snippet></ROW><ROW><id>8915529</id><snippet>super()</snippet></ROW><ROW><id>8915529</id><snippet>__setattr__()</snippet></ROW><ROW><id>8915529</id><snippet>super()</snippet></ROW><ROW><id>8915529</id><snippet>B.__init__(self, param_a)</snippet></ROW><ROW><id>8915529</id><snippet>__init__()</snippet></ROW><ROW><id>8915529</id><snippet>super()</snippet></ROW><ROW><id>8915529</id><snippet>object</snippet></ROW><ROW><id>8915588</id><snippet>In [6]: data
Out[6]: 
{'file1.csv':    A       B     
0  1.0914 -1.3538
1  0.5775 -0.2392
2 -0.2157 -0.2253
3 -2.4924  1.0896
4  0.6910  0.8992
5 -1.6196  0.3009
6 -1.5500  0.1360
7 -0.2156  0.4530
8  1.7018  1.1169
9 -1.7378 -0.3373,
 'file2.csv':    A       B      
0 -0.4948 -0.15551
1  0.6987  0.85838
2 -1.3949  0.25995
3  1.5314  1.25364
4  1.8582  0.09912
5 -1.1717 -0.21276
6 -0.2603 -1.78605
7 -3.3247  1.26865
8  0.7741 -2.25362
9 -0.6956  1.08774}


In [10]: cdf = concat(data, axis=1)

In [11]: cdf
O    ut[11]: 
   file1.csv          file2.csv         
   A          B       A          B      
0  1.0914    -1.3538 -0.4948    -0.15551
1  0.5775    -0.2392  0.6987     0.85838
2 -0.2157    -0.2253 -1.3949     0.25995
3 -2.4924     1.0896  1.5314     1.25364
4      0.6910     0.8992  1.8582     0.09912
5 -1.6196     0.3009 -1.1717    -0.21276
6 -1.5500     0.1360 -0.2603    -1.78605
7 -0.2156     0.4530 -3.3247     1.26865
8  1.7018     1.1169  0.7741    -2.25362
9 -1.7378    -0.3373 -0.6956     1.08774
</snippet></ROW><ROW><id>8915588</id><snippet>In [14]: cdf.swaplevel(0, 1, axis=1)
Out[14]: 
   A          B          A          B        
   file1.csv  file1.csv  file2.csv  file2.csv
0  1.0914    -1.3538    -0.4948    -0.15551  
1  0.5775    -0.2392     0.6987     0.85838  
2 -0.2157    -0.2253    -1.3949     0.25995  
3 -2.4924     1.0896     1.5314     1.25364  
4  0.6910     0.8992     1.8582     0.09912  
5 -1.6196     0.3009    -1.1717    -0.21276  
6 -1.5500     0.1360    -0.2603    -1.78605  
7 -0.2156     0.4530    -3.3247     1.26865  
8  1.7018     1.1169     0.7741    -2.25362  
9 -1.7378    -0.3373    -0.6956     1.08774  
</snippet></ROW><ROW><id>8915588</id><snippet>In [16]: p = Panel(data)

In [17]: p
Out[17]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 2 (items) x 10 (major) x 2 (minor)
Items: file1.csv to file2.csv
Major axis: 0 to 9
Minor axis: A to B

In [18]: p = p.swapaxes(0, 2)

In [19]: p
Out[19]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 2 (items) x 10 (major) x 2 (minor)
Items: A to B
Major axis: 0 to 9
Minor axis: file1.csv to file2.csv

In [20]: p['A']
Out[20]: 
   file1.csv  file2.csv
0  1.0914    -0.4948   
1  0.5775     0.6987   
2 -0.2157    -1.3949   
3 -2.4924     1.5314   
4  0.6910     1.8582   
5 -1.6196    -1.1717   
6 -1.5500    -0.2603   
7 -0.2156    -3.3247   
8  1.7018     0.7741   
9 -1.7378    -0.6956   
</snippet></ROW><ROW><id>8915614</id><snippet>__doc__</snippet></ROW><ROW><id>8915614</id><snippet>def doc(docstr):
    def deco(f):
        f.__doc__ = docstr
        return f
    return deco
</snippet></ROW><ROW><id>8915614</id><snippet>__doc__</snippet></ROW><ROW><id>8915614</id><snippet>def doc(docstr):
    def deco(f):
        if isinstance(f, type):
            d = vars(f).copy()
            d["__doc__"] = docstr
            return type(f.__name__, f.__bases__, d)
        f.__doc__ = docstr
        return f
    return deco
</snippet></ROW><ROW><id>8915614</id><snippet>__doc__</snippet></ROW><ROW><id>8915614</id><snippet>type</snippet></ROW><ROW><id>8915614</id><snippet>f.__class__</snippet></ROW><ROW><id>8915736</id><snippet>super(SearchFormView, self).get(request, *args, **kwargs)</snippet></ROW><ROW><id>8915736</id><snippet>   def get(self, request, *args, **kwargs):
        form = SearchForm(self.request.GET or None)
        if form.is_valid():
            self.mystuff = Stuff.objects.filter(title__icontains=form.cleaned_data['query'])[:10]

        return self.render_to_response(self.get_context_data(form=form))
</snippet></ROW><ROW><id>8915736</id><snippet>def get(self, request, *args, **kwargs):
     self.form = SearchForm(self.request.GET or None)
     if self.form.is_valid():
         self.mystuff = Stuff.objects.filter(title__icontains=form.cleaned_data['query'])[:10]

     return super(SearchFormView, self).get(request, *args, **kwargs)


def get_form(self, form_class):
    """
    Returns an instance of the form to be used in this view.
    """
    return getattr(self, 'form', None) or form_class(**self.get_form_kwargs())
</snippet></ROW><ROW><id>8915956</id><snippet>manage.py changepassword</snippet></ROW><ROW><id>8915956</id><snippet>/var/www/project</snippet></ROW><ROW><id>8916343</id><snippet>def nested(flat, level=0):
    for k, it in itertools.groupby(flat, lambda x: x.split("-")[level]):
        yield next(it)
        remainder = list(nested(it, level + 1))
        if remainder:
            yield remainder
</snippet></ROW><ROW><id>8916343</id><snippet>&gt;&gt;&gt; list(nested(flat, 0))
['1', ['1-1', ['1-1-1'], '1-2'], '2', ['2-1', '2-2'], '3']
</snippet></ROW><ROW><id>8916400</id><snippet>$ cat foo.py
from mpi4py import MPI

comm = MPI.COMM_WORLD
nprocs = comm.Get_size()
rank   = comm.Get_rank()

if rank == 0:
   data = 'Hello!'
   comm.send(data, dest=nprocs-1, tag=1)
elif rank == nprocs-1:
   data = comm.recv(source=0, tag=1)
   print 'Rank ', rank, ' received ', data

$ mpiexec -np 4 python foo.py
Rank  3  received  Hello!
</snippet></ROW><ROW><id>8916429</id><snippet>import subprocess
import shlex
proc = subprocess.Popen(shlex.split('fdisk -l'))
proc.communicate()
proc = subprocess.Popen(shlex.split('fdisk -l'))
proc.communicate()
</snippet></ROW><ROW><id>8916429</id><snippet>% sudo python /path/to/test.py
</snippet></ROW><ROW><id>8916429</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8916454</id><snippet>.fetchall()</snippet></ROW><ROW><id>8916514</id><snippet>def __init__(self):
    self._previous_index = -1

def handleCurrentIndexChanged(self, index):
    # do stuff with previous_index (if valid)
    ...
    self._previous_index = index
</snippet></ROW><ROW><id>8916746</id><snippet>In [11]: df
Out[11]: 
            A        B        C        D      
2000-01-03 -0.59885 -0.18141 -0.68828 -0.77572
2000-01-04  0.83935  0.15993  0.95911 -1.12959
2000-01-05  2.80215 -0.10858 -1.62114 -0.20170
2000-01-06  0.71670 -0.26707  1.36029  1.74254
2000-01-07 -0.45749  0.22750  0.46291 -0.58431
2000-01-10 -0.78702  0.44006 -0.36881 -0.13884
2000-01-11  0.79577 -0.09198  0.14119  0.02668
2000-01-12 -0.32297  0.62332  1.93595  0.78024
2000-01-13  1.74683 -1.57738 -0.02134  0.11596
2000-01-14 -0.55613  0.92145 -0.22832  1.56631
2000-01-17 -0.55233 -0.28859 -1.18190 -0.80723
2000-01-18  0.73274  0.24387  0.88146 -0.94490
2000-01-19  0.56644 -0.49321  1.17584 -0.17585
2000-01-20  1.56441  0.62331 -0.26904  0.11952
2000-01-21  0.61834  0.17463 -1.62439  0.99103
2000-01-24  0.86378 -0.68111 -0.15788 -0.16670
2000-01-25 -1.12230 -0.16128  1.20401  1.08945
2000-01-26 -0.63115  0.76077 -0.92795 -2.17118
2000-01-27  1.37620 -1.10618 -0.37411  0.73780
2000-01-28 -1.40276  1.98372  1.47096 -1.38043
2000-01-31  0.54769  0.44100 -0.52775  0.84497
2000-02-01  0.12443  0.32880 -0.71361  1.31778
2000-02-02 -0.28986 -0.63931  0.88333 -2.58943
2000-02-03  0.54408  1.17928 -0.26795 -0.51681
2000-02-04 -0.07068 -1.29168 -0.59877 -1.45639
2000-02-07 -0.65483 -0.29584 -0.02722  0.31270
2000-02-08 -0.18529 -0.18701 -0.59132 -1.15239
2000-02-09 -2.28496  0.36352  1.11596  0.02293
2000-02-10  0.51054  0.97249  1.74501  0.20525
2000-02-11  0.10100  0.27722  0.65843  1.73591

In [12]: df[(df.values &gt; 1.5).any(1)]
Out[12]: 
            A       B       C        D     
2000-01-05  2.8021 -0.1086 -1.62114 -0.2017
2000-01-06  0.7167 -0.2671  1.36029  1.7425
2000-01-12 -0.3230  0.6233  1.93595  0.7802
2000-01-13  1.7468 -1.5774 -0.02134  0.1160
2000-01-14 -0.5561  0.9215 -0.22832  1.5663
2000-01-20  1.5644  0.6233 -0.26904  0.1195
2000-01-28 -1.4028  1.9837  1.47096 -1.3804
2000-02-10  0.5105  0.9725  1.74501  0.2052
2000-02-11  0.1010  0.2772  0.65843  1.7359
</snippet></ROW><ROW><id>8916746</id><snippet>&amp;</snippet></ROW><ROW><id>8916746</id><snippet>|</snippet></ROW><ROW><id>8916746</id><snippet>In [13]: df[(df['A'] &gt; 1) | (df['B'] &lt; -1)]
Out[13]: 
            A        B       C        D     
2000-01-05  2.80215 -0.1086 -1.62114 -0.2017
2000-01-13  1.74683 -1.5774 -0.02134  0.1160
2000-01-20  1.56441  0.6233 -0.26904  0.1195
2000-01-27  1.37620 -1.1062 -0.37411  0.7378
2000-02-04 -0.07068 -1.2917 -0.59877 -1.4564
</snippet></ROW><ROW><id>8916750</id><snippet>directory = session.nlst()
print(directory)
</snippet></ROW><ROW><id>8916750</id><snippet>print(str(...))</snippet></ROW><ROW><id>8917091</id><snippet>try</snippet></ROW><ROW><id>8917091</id><snippet>except</snippet></ROW><ROW><id>8917091</id><snippet>try:
    return dictionary[word]
except KeyError:
    print 'wrong'
    return None
</snippet></ROW><ROW><id>8917124</id><snippet>&gt;&gt;&gt; socket.getservbyport(80)
'www'
</snippet></ROW><ROW><id>8917257</id><snippet>1s</snippet></ROW><ROW><id>8917257</id><snippet>def ventilator():
    # Initialize a zeromq context
    context = zmq.Context()

    # Set up a channel to send work
    ventilator_send = context.socket(zmq.PUSH)
    ventilator_send.bind("tcp://127.0.0.1:5557")

    # Set up a channel to receive control messages
    control_receiver = context.socket(zmq.SUB)
    control_receiver.connect("tcp://127.0.0.1:5559")
    control_receiver.setsockopt(zmq.SUBSCRIBE, "")

    # Give everything a second to spin up and connect
    time.sleep(1)

    # Create the input array
    nelem = number_of_elements
    slen = string_length
    payloads = create_inputs(nelem, slen)

    # Send an array to each worker
    for num in range(np):
        work_message = { 'num' : payloads }
        ventilator_send.send_pyobj(work_message)

    # Poll for FINISH message, so we don't shutdown too early
    poller = zmq.Poller()
    poller.register(control_receiver, zmq.POLLIN)

    while True:
        socks = dict(poller.poll())

        if socks.get(control_receiver) == zmq.POLLIN:
            control_message = control_receiver.recv()
            if control_message == "FINISHED":
                print("Ventilator received FINSHED, quitting!")
                break
            # else: unhandled message
</snippet></ROW><ROW><id>8917311</id><snippet>[0] * n
</snippet></ROW><ROW><id>8917311</id><snippet>n</snippet></ROW><ROW><id>8917311</id><snippet>n</snippet></ROW><ROW><id>8917311</id><snippet>[[] for dummy in range(n)]
</snippet></ROW><ROW><id>8917508</id><snippet>R -= R.sum(0) / len(R)
</snippet></ROW><ROW><id>8917724</id><snippet>map(f, my_list)
</snippet></ROW><ROW><id>8917724</id><snippet>[f(x) for x in my_list]
</snippet></ROW><ROW><id>8918341</id><snippet>def some_function(data, format):
    result = []
    for row in data:
        lst = []
        for count, value in enumerate(row):
            if count in format:
                string = format[count].format(value)
                lst.append(string)
            else:
                lst.append(value)
        result.append(lst)
    return result


data = [['foo1', 'bar1'], ['foo2', 'bar2']]
format = {1: '{0} says Hello world'}
print(some_function(data, format))
# prints: [['foo1', 'bar1 says Hello world'], ['foo2', 'bar2 says Hello world']]
</snippet></ROW><ROW><id>8918341</id><snippet>docs</snippet></ROW><ROW><id>8918484</id><snippet>import socket

CRLF = "\r\n"

request = [
    "GET / HTTP/1.1",
    "Host: www.example.com",
    "Connection: Close",
    "",
    "",
]

# Connect to the server
s = socket.socket()
s.connect(('www.example.com', 80))

# Send an HTTP request
s.send(CRLF.join(request))

# Get the response (in several parts, if necessary)
response = ''
buffer = s.recv(4096)
while buffer:
    response += buffer
    buffer = s.recv(4096)

# HTTP headers will be separated from the body by an empty line
header_data, _, body = response.partition(CRLF + CRLF)

print header_data
</snippet></ROW><ROW><id>8918484</id><snippet>HTTP/1.0 302 Found
Location: http://www.iana.org/domains/example/
Server: BigIP
Connection: Keep-Alive
Content-Length: 0
</snippet></ROW><ROW><id>8918530</id><snippet>for x in foos:
   Bar.objects.filter(pk=x.pk).exists() # True if it's a Bar, too
   Corn.objects.filter(pk=x.pk).exists() # True if it's a Corn, too
</snippet></ROW><ROW><id>8918530</id><snippet>for x in foos:
    try:
        x.bar
        # it's a bar
    except Bar.DoesNotExist:
        # it's not a bar
        pass
    try:
        x.corn
        # it's a corn
    except Corn.DoesNotExist:
        # it's not a corn
        pass
</snippet></ROW><ROW><id>8918560</id><snippet>print</snippet></ROW><ROW><id>8918560</id><snippet>translate_word()</snippet></ROW><ROW><id>8918560</id><snippet>translate_word()</snippet></ROW><ROW><id>8918560</id><snippet>print</snippet></ROW><ROW><id>8918560</id><snippet>translate_word()</snippet></ROW><ROW><id>8918560</id><snippet>None</snippet></ROW><ROW><id>8918560</id><snippet>print</snippet></ROW><ROW><id>8918560</id><snippet>translate_word()</snippet></ROW><ROW><id>8918560</id><snippet>None</snippet></ROW><ROW><id>8918560</id><snippet>def translate_word(word):
    return dictionary.get(word, None)
</snippet></ROW><ROW><id>8918560</id><snippet>get()</snippet></ROW><ROW><id>8918560</id><snippet>dictionary.get(word, None)</snippet></ROW><ROW><id>8918560</id><snippet>translate_word(word)</snippet></ROW><ROW><id>8918560</id><snippet>None</snippet></ROW><ROW><id>8918560</id><snippet>None</snippet></ROW><ROW><id>8918560</id><snippet>translated_word = translate_word(word)
if translated_word is None:
    print "The Italian word for %s is not found" % word
else:
    print "The Italian word for %s is %s" % (word, translated_word)
</snippet></ROW><ROW><id>8918560</id><snippet>translated_word = translate_word(word)
print "The Italian word for %s is %s" % (word,
    translated_word if translated_word else "not found")
</snippet></ROW><ROW><id>8918786</id><snippet>f(a) = a</snippet></ROW><ROW><id>8918786</id><snippet>f(f(a)) = a</snippet></ROW><ROW><id>8918786</id><snippet>f^n(a) = a</snippet></ROW><ROW><id>8918786</id><snippet>f(a+1) = a+1</snippet></ROW><ROW><id>8918786</id><snippet>f(f(a+1)) = a+1</snippet></ROW><ROW><id>8918786</id><snippet>f^n(a+1) = a+1</snippet></ROW><ROW><id>8918786</id><snippet>f(b) = b</snippet></ROW><ROW><id>8918786</id><snippet>f(f(b)) = b</snippet></ROW><ROW><id>8918786</id><snippet>f^n(b) = b</snippet></ROW><ROW><id>8918813</id><snippet>lilypond</snippet></ROW><ROW><id>8918813</id><snippet>lilypond</snippet></ROW><ROW><id>8918813</id><snippet>os.system</snippet></ROW><ROW><id>8918813</id><snippet>stdin</snippet></ROW><ROW><id>8918813</id><snippet>lilypond</snippet></ROW><ROW><id>8918958</id><snippet>repr()</snippet></ROW><ROW><id>8918958</id><snippet>str()</snippet></ROW><ROW><id>8918958</id><snippet>repr()</snippet></ROW><ROW><id>8918958</id><snippet>str()</snippet></ROW><ROW><id>8918958</id><snippet>str()</snippet></ROW><ROW><id>8918986</id><snippet>formfield_for_foreignkey</snippet></ROW><ROW><id>8918986</id><snippet>ModelAdmin</snippet></ROW><ROW><id>8918986</id><snippet>Device</snippet></ROW><ROW><id>8918986</id><snippet>def formfield_for_foreignkey(self, db_field, request, **kwargs):
    if db_field.name == 'node':
        kwargs['queryset'] = Node.objects.order_by('name')
    return super(DeviceAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)
</snippet></ROW><ROW><id>8918986</id><snippet>formfield_for_manytomany</snippet></ROW><ROW><id>8919154</id><snippet>In [83]: import random

In [84]: '{:050b}'.format(random.randrange(1&lt;&lt;50))
Out[84]: '10011110110110000011111000011100101111101001001011'
</snippet></ROW><ROW><id>8919154</id><snippet>'{0:050b}'</snippet></ROW><ROW><id>8919154</id><snippet>'{:050b}'</snippet></ROW><ROW><id>8919154</id><snippet>string.format</snippet></ROW><ROW><id>8919154</id><snippet>'{:b}'</snippet></ROW><ROW><id>8919154</id><snippet>In [91]: '{:b}'.format(10)
Out[91]: '1010'
</snippet></ROW><ROW><id>8919154</id><snippet>'{:50b}'</snippet></ROW><ROW><id>8919154</id><snippet>In [92]: '{:50b}'.format(10)
Out[92]: '                                              1010'
</snippet></ROW><ROW><id>8919154</id><snippet>{:050b}</snippet></ROW><ROW><id>8919154</id><snippet>In [93]: '{:050b}'.format(10)
Out[93]: '00000000000000000000000000000000000000000000001010'
</snippet></ROW><ROW><id>8919154</id><snippet>http://docs.python.org/library/string.html#format-string-syntax
replacement_field ::= "{" field_name ["!" conversion] [":" format_spec] "}"
field_name        ::= (identifier|integer)("."attribute_name|"["element_index"]")* 
attribute_name    ::= identifier
element_index     ::= integer
conversion        ::= "r" | "s"
format_spec       ::= [[fill]align][sign][#][0][width][,][.precision][type]
fill              ::= &lt;a character other than '}'&gt;
align             ::= "&lt;" | "&gt;" | "=" | "^"
                      "=" forces the padding to be placed after the sign (if any)
                          but before the digits. (for numeric types)
                      "&lt;" left justification
                      "&gt;" right justification 
                      "^" center justification
sign              ::= "+" | "-" | " "
                      "+" places a plus/minus sign for all numbers    
                      "-" places a sign only for negative numbers
                      " " places a leading space for positive numbers
#                     for integers with type b,o,x, tells format to prefix
                      output with 0b, 0o, or 0x.
0                     enables zero-padding. equivalent to 0= fill align.
width             ::= integer
,                     tells format to use a comma for a thousands separator
precision         ::= integer
type              ::= "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" |
                      "o" | "x" | "X" | "%"
    c convert integer to corresponding unicode character
    n uses a locale-aware separator
    % multiplies number by 100, display in 'f' format, with percent sign
</snippet></ROW><ROW><id>8919327</id><snippet>local</snippet></ROW><ROW><id>8919327</id><snippet>env</snippet></ROW><ROW><id>8919327</id><snippet>env.path</snippet></ROW><ROW><id>8919327</id><snippet>--show=debug</snippet></ROW><ROW><id>8919327</id><snippet>fab --show=debug &lt;task&gt;
</snippet></ROW><ROW><id>8919393</id><snippet>.. literalinclude:: functions.xml
</snippet></ROW><ROW><id>8919404</id><snippet>''.join(random.sample(E*N, N))
</snippet></ROW><ROW><id>8919404</id><snippet>''.join(random.choice(E) for i in xrange(N))
</snippet></ROW><ROW><id>8919478</id><snippet>import socket, ssl, pprint

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# require a certificate from the server
ssl_sock = ssl.wrap_socket(s,
                           # http://curl.haxx.se/ca/cacert.pem
                           ca_certs="cacert.pem",
                           cert_reqs=ssl.CERT_REQUIRED)

ssl_sock.connect(('www.verisign.com', 443))

print repr(ssl_sock.getpeername())
print ssl_sock.cipher()
print pprint.pformat(ssl_sock.getpeercert())

# Set a simple HTTP request -- use httplib in actual code.
ssl_sock.write("""GET / HTTP/1.0\r
Host: www.verisign.com\r\n\r\n""")

# Read a chunk of data.  Will not necessarily
# read all the data returned by the server.
data = ssl_sock.read()
print repr(data)[:79]

# note that closing the SSLSocket will also close the underlying socket
ssl_sock.close()
</snippet></ROW><ROW><id>8919478</id><snippet>(ip, 443)
('DHE-RSA-AES256-SHA', 'TLSv1/SSLv3', 256)
{'notAfter': 'May 25 23:59:59 2012 GMT',
 'subject': ((('1.3.6.1.4.1.311.60.2.1.3', u'US'),),
             (('1.3.6.1.4.1.311.60.2.1.2', u'Delaware'),),
             (('businessCategory', u'V1.0, Clause 5.(b)'),),
             (('serialNumber', u'2497886'),),
             (('countryName', u'US'),),
             (('postalCode', u'94043'),),
             (('stateOrProvinceName', u'California'),),
             (('localityName', u'Mountain View'),),
             (('streetAddress', u'487 East Middlefield Road'),),
             (('organizationName', u'VeriSign, Inc.'),),
             (('organizationalUnitName', u' Production Security Services'),),
             (('commonName', u'www.verisign.com'),))}
'HTTP/1.1 200 OK\r\nDate: Thu, 19 Jan 2012 01:47:31 GMT\r\nServer: Apache\r\nSe
</snippet></ROW><ROW><id>8919555</id><snippet>from Tkinter import *; root=Tk()</snippet></ROW><ROW><id>8919555</id><snippet>import Tkinter; root=Tkinter.Tk()</snippet></ROW><ROW><id>8919555</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>8919555</id><snippet>import Tkinter as tk</snippet></ROW><ROW><id>8919581</id><snippet>put</snippet></ROW><ROW><id>8919581</id><snippet>get</snippet></ROW><ROW><id>8919581</id><snippet>Queue.py</snippet></ROW><ROW><id>8919581</id><snippet>class Queue:
    def __init__(self, maxsize=0):
        ...
        self.mutex = threading.Lock()
        self.not_empty = threading.Condition(self.mutex)
        self.not_full = threading.Condition(self.mutex)
        self.all_tasks_done = threading.Condition(self.mutex)
        self.unfinished_tasks = 0
</snippet></ROW><ROW><id>8919581</id><snippet>put</snippet></ROW><ROW><id>8919581</id><snippet>def put(self, item, block=True, timeout=None):
    ...
    self.not_full.acquire()
    try:
        if self.maxsize &gt; 0:
            ...
            elif timeout is None:
                while self._qsize() == self.maxsize:
                    self.not_full.wait()
        self._put(item)
        self.unfinished_tasks += 1
        self.not_empty.notify()
    finally:
        self.not_full.release()
</snippet></ROW><ROW><id>8919581</id><snippet>qsize</snippet></ROW><ROW><id>8919581</id><snippet>def qsize(self):
    """Return the approximate size of the queue (not reliable!)."""
    self.mutex.acquire()
    n = self._qsize()
    self.mutex.release()
    return n
</snippet></ROW><ROW><id>8919581</id><snippet>Queue.py</snippet></ROW><ROW><id>8919581</id><snippet>Python2.7</snippet></ROW><ROW><id>8919731</id><snippet>import urllib2, socket, urlparse

# set up your request as before, then:
data = urllib2.urlopen(request)
addr = socket.gethostbyname(urlparse.urlparse(data.geturl()).hostname)
</snippet></ROW><ROW><id>8919731</id><snippet>data.geturl()</snippet></ROW><ROW><id>8919731</id><snippet>urlparse</snippet></ROW><ROW><id>8919731</id><snippet>socket.gethostbyname</snippet></ROW><ROW><id>8919731</id><snippet>gethostbyname</snippet></ROW><ROW><id>8919731</id><snippet>lsof</snippet></ROW><ROW><id>8919731</id><snippet>urllib2</snippet></ROW><ROW><id>8919817</id><snippet>1.8.7</snippet></ROW><ROW><id>8919817</id><snippet>&lt; 1.8.7</snippet></ROW><ROW><id>8919817</id><snippet>Ruby 1.8.7</snippet></ROW><ROW><id>8919817</id><snippet>sass -v
</snippet></ROW><ROW><id>8919908</id><snippet>foo</snippet></ROW><ROW><id>8919908</id><snippet>self</snippet></ROW><ROW><id>8919908</id><snippet>staticmethod()</snippet></ROW><ROW><id>8919908</id><snippet>b</snippet></ROW><ROW><id>8919908</id><snippet>c</snippet></ROW><ROW><id>8919908</id><snippet>foo()</snippet></ROW><ROW><id>8919908</id><snippet>staticmethod()</snippet></ROW><ROW><id>8919908</id><snippet>class d(object):
    def foo():
       pass

d.foo = staticmethod(d.foo.im_func)
</snippet></ROW><ROW><id>8919908</id><snippet>staticmethod()</snippet></ROW><ROW><id>8919927</id><snippet>gzip.GzipFile</snippet></ROW><ROW><id>8919927</id><snippet>__exit__</snippet></ROW><ROW><id>8919927</id><snippet>__exit__</snippet></ROW><ROW><id>8919927</id><snippet>with</snippet></ROW><ROW><id>8919927</id><snippet>&gt;&gt;&gt; class C(object):
...   def __enter__(self):
...     return self
... 
&gt;&gt;&gt; with C() as c:
...   pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: __exit__
</snippet></ROW><ROW><id>8919927</id><snippet>CreateMockAnything()</snippet></ROW><ROW><id>8919927</id><snippet>mock_gzip_file</snippet></ROW><ROW><id>8919927</id><snippet>mock_gzip_file</snippet></ROW><ROW><id>8919927</id><snippet>__enter__()</snippet></ROW><ROW><id>8919927</id><snippet>__exit__(...)</snippet></ROW><ROW><id>8919927</id><snippet>import gzip
import mox
import unittest

class MyCode:
    def generate_gzip_file(self):
        with gzip.GzipFile('file_name.txt.gz', 'wb') as f:
             f.write('data')

class MyCodeTest(unittest.TestCase):
    def test_generate_gzip_file(self):
        mymox = mox.Mox()
        mock_gzip_file = mymox.CreateMockAnything()
        mymox.StubOutWithMock(gzip, 'GzipFile')
        gzip.GzipFile('file_name.txt.gz', 'wb').AndReturn(mock_gzip_file)
        mock_gzip_file.__enter__().AndReturn(mock_gzip_file)
        mock_gzip_file.write('data')
        mock_gzip_file.__exit__(None, None, None).AndReturn(None)
        mymox.ReplayAll()

        MyCode().generate_gzip_file()
        mymox.VerifyAll()

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>8919927</id><snippet>.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
</snippet></ROW><ROW><id>8919950</id><snippet>if bmi &gt;= 25.5:
    retv += " (High Risk)."
</snippet></ROW><ROW><id>8919972</id><snippet>data one;
 length name $50;
 infile datalines delimiter=','; 
 input name $ dt profit;
 datalines;                      
  Widget1,1,5
  Widget1,2,1
  Widget1,3,-2
  Widget1,4,0
  Widget1,5,-3
  Widget1,6,8
  Widget1,7,-2
  Widget1,8,1
  Widget2,1,-1
  Widget2,2,1
  Widget2,3,-3
  Widget2,4,1
  Widget2,5,-60
  Widget2,6,9
  Widget2,7,-2
  Widget2,8,20
;

proc sql;
create table two as
  select a.name, a.dt as start, b.dt as end, b.profit
    from one as a cross join one as b
    where start &lt;= end and a.name = b.name
  order by name, start, end;
quit;
run;

data two; set two;
  by name start;
  if first.start then sum=0;
  sum+profit;
  months = (end-start)+1;
run;

proc means noprint data=two(where=(months&gt;=3));
  by name;
  output out=three(drop=_:) maxid(sum(start) sum(end))=start end max(sum)=;
run;
</snippet></ROW><ROW><id>8920168</id><snippet>class Pool(object):

    def __init__(self, processes=None, initializer=None, initargs=(),
                 maxtasksperchild=None):
        ...
        if processes is None:
            try:
                processes = cpu_count()
            except NotImplementedError:
                processes = 1
        if processes &lt; 1:
            raise ValueError("Number of processes must be at least 1")

        if initializer is not None and not hasattr(initializer, '__call__'):
            raise TypeError('initializer must be a callable')
</snippet></ROW><ROW><id>8920168</id><snippet>processes = int(processes)
</snippet></ROW><ROW><id>8920168</id><snippet>ValueError</snippet></ROW><ROW><id>8920168</id><snippet>processes &lt; 1</snippet></ROW><ROW><id>8920168</id><snippet>initializer</snippet></ROW><ROW><id>8920168</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>8920168</id><snippet>class ClassWithThreads(object):
    def __init__(self, num_threads):
        self.num_threads = num_threads
        if self.num_threads &lt; 1:
            raise ValueError('Number of threads must be at least 1')
</snippet></ROW><ROW><id>8920180</id><snippet>printf('Hello %1$s. Your %1$s has just been created!', 'world'); 
</snippet></ROW><ROW><id>8920180</id><snippet>$s</snippet></ROW><ROW><id>8920403</id><snippet>egrep -oh '__[A-Za-z_][A-Za-z_0-9]*__' *.py | sort | uniq
</snippet></ROW><ROW><id>8920403</id><snippet>'__all__'
'__args__'
'__author__'
'__bases__'
'__builtin__'
'__builtins__'
'__cached__'
'__call__'
'__class__'
'__copy__'
'__credits__'
'__date__'
'__decimal_context__'
'__deepcopy__'
'__dict__'
'__doc__'
'__exception__'
'__file__'
'__flags__'
'__ge__'
'__getinitargs__'
'__getstate__'
'__gt__'
'__import__'
'__importer__'
'__init__'
'__ispkg__'
'__iter__'
'__le__'
'__len__'
'__loader__'
'__lt__'
'__main__'
'__module__'
'__mro__'
'__name__'
'__package__'
'__path__'
'__pkgdir__'
'__return__'
'__safe_for_unpickling__'
'__setstate__'
'__slots__'
'__temp__'
'__test__'
'__version__'
</snippet></ROW><ROW><id>8920416</id><snippet>MyVideo.avi</snippet></ROW><ROW><id>8920416</id><snippet>MyNamespace.MyVideo.avi</snippet></ROW><ROW><id>8920505</id><snippet>ax.set_ylim</snippet></ROW><ROW><id>8920505</id><snippet>marker = 'o'</snippet></ROW><ROW><id>8920505</id><snippet>plt.plot</snippet></ROW><ROW><id>8920505</id><snippet>import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)

xticks=['Jan','Feb','Mar','April','May']
x=[1,2,3,4,5]
yticks = ['Windy', 'Sunny', 'Rainy', 'Cloudy', 'Snowy']
y=[2,1,3,5,4]

plt.plot(x,y,'b-', marker = 'o') #.2,.1,.7,.8
plt.subplots_adjust(left =0.2)

plt.xticks(x,xticks)
plt.yticks(y,yticks)
ax.set_ylim(0.5,max(y))
plt.show()
</snippet></ROW><ROW><id>8920554</id><snippet>Queue.Queue</snippet></ROW><ROW><id>8920554</id><snippet>def runproc(queue):
    plist = []
    while True:
        try: cmdline = queue.get_nowait()
        except Empty: pass
        else: plist.append(Proc(cmdline))

        for p in plist:
            if not p.isRunning():
               p.run()
        time.sleep(1)

queue = Queue()            
t = Thread(target=runproc, args=(queue,))
t.daemon = True
t.start()

queue.put(cmdline)
# ...
</snippet></ROW><ROW><id>8920554</id><snippet>plist</snippet></ROW><ROW><id>8920891</id><snippet># ask user for an input until an integer is provided
prompt = "Please, enter the gematric value of the word: "
while True: # infinite loop
    try:        
        # ask user for an input; convert it to integer immediately
        userinput = int(raw_input(prompt))
    except ValueError: # `int()` can't parse user input as an integer
        print('the gematric value must be an integer. Try again')
    else:
        break # got an integer successfully; exit the loop

# use `with` statement to close the file automatically
# `'r'` is default; you don't need to specify it explicitly
with open(r'c:\school\dictionarytest.txt') as inputfile:
    #XXX inputfile.lower() # WRONG!!! file object doesn't have .lower() method

    # assuming `dictionarytest.txt` has one word per line
    for word in inputfile: # read the file line by line
        word = word.strip() # strip leading/trailing whitespace
        if gematric_value(word) == userinput:
           print(word) # print words that match user input
</snippet></ROW><ROW><id>8920891</id><snippet>gematric_value()</snippet></ROW><ROW><id>8920891</id><snippet>def gematric_value(word):
    """Sum of numerical values of word's characters.

    a -&gt; 1, b -&gt; 2, c -&gt; 3; A -&gt; 1, B -&gt; 2, etc
    """
    # word is a string; iterating over it produces individual "characters"
    # iterate over lowercased version of the word (due to A == a == 1)
    return sum(ord(c) - ord('a') + 1 for c in word.lower())
</snippet></ROW><ROW><id>8920947</id><snippet>mechanize</snippet></ROW><ROW><id>8921001</id><snippet>def visit(node,indent):
    # Load your node data
    print("{0} {1}".format("-" * indent, node.columns[0])) # Do something with your data
    # Unload your node data
    if len(node.children) &gt; 0 :
        return (node.children[0], indent+1) # Visit the first child, if there is one
    while node.next is None: # If no sibling, your parent is done
        node = node.parent
        indent -= 1
        if node is None: # Root node reached, end the traversal
            return None
    return (node.next, indent) # Visit your next sibling, if there is one

cursor = (root_node, 0)
while cursor is not None:
    cursor = visit(*cursor)
</snippet></ROW><ROW><id>8921001</id><snippet>next</snippet></ROW><ROW><id>8921001</id><snippet>prev</snippet></ROW><ROW><id>8921001</id><snippet>parent</snippet></ROW><ROW><id>8921001</id><snippet>children</snippet></ROW><ROW><id>8921001</id><snippet>Node</snippet></ROW><ROW><id>8921023</id><snippet>&gt;&gt;&gt; m = re.search('^!.*^!', text, re.MULTILINE | re.DOTALL)
&gt;&gt;&gt; m.group(0)
'!\n vserver XXXX\n virtual XX.xx.XX.XX tcp 389\n owner LDAP\n serverfarm XXX\n idle 5\n persistent rebalance\n inservice\n!'
</snippet></ROW><ROW><id>8921023</id><snippet>&gt;&gt;&gt; m = re.search('^!.*vserver\s+(\w+).*^!', text, re.MULTILINE | re.DOTALL)
&gt;&gt;&gt; m.group(0)
'!\n vserver XXXX\n virtual XX.xx.XX.XX tcp 389\n owner LDAP\n serverfarm XXX\n idle 5\n persistent rebalance\n inservice\n!'
&gt;&gt;&gt; m.group(1)
'XXXX'
</snippet></ROW><ROW><id>8921192</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>8921192</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>8921192</id><snippet>#!/usr/bin/env python
from collections import defaultdict
from BeautifulSoup import BeautifulSoup

d = defaultdict(list) # data structure to hold the result
soup = BeautifulSoup(html)
i = 0
for el in soup.p.contents:
    if getattr(el, 'name', None) == 'b':
       i += 1  # switch to next &lt;b&gt; element
    else:
       d[i].append(el)

import pprint
pprint.pprint(dict(d))
</snippet></ROW><ROW><id>8921192</id><snippet>{0: [u' '],
 1: [u' Apple '],
 2: [u' ', &lt;i&gt; Orange &lt;/i&gt;, u' '],
 3: [u' Pineapple ']}
</snippet></ROW><ROW><id>8921211</id><snippet>source</snippet></ROW><ROW><id>8921211</id><snippet>venv\Scripts\activate.bat</snippet></ROW><ROW><id>8921515</id><snippet>adb shell su -c cp /data/local/x /data/local/y
adb pull /data/local/y
</snippet></ROW><ROW><id>8921515</id><snippet>adb shell &lt;&lt;EOF
ls
date
cat /proc/version
exit
EOF
</snippet></ROW><ROW><id>8921565</id><snippet>step</snippet></ROW><ROW><id>8921565</id><snippet>import matplotlib.pyplot as plt

x = [1,2,3,4] 
y = [0.002871972681775004, 0.00514787917410944, 
     0.00863476098280219, 0.012003316194034325]

plt.step(x, y)
plt.show()
</snippet></ROW><ROW><id>8921884</id><snippet>select</snippet></ROW><ROW><id>8922105</id><snippet>l = [[], []]</snippet></ROW><ROW><id>8922105</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; thing = collections.defaultdict(list)
&gt;&gt;&gt; thing[0].append('spam')
&gt;&gt;&gt; thing[1].append('eggs')
&gt;&gt;&gt; print thing
defaultdict(&lt;type 'list'&gt;, {0: ['spam'], 1: ['eggs']})
&gt;&gt;&gt; thing[0]
['spam']
&gt;&gt;&gt; thing[69]
[]
</snippet></ROW><ROW><id>8922151</id><snippet># graph is in adjacent list representation
graph = {
        '1': ['2', '3', '4'],
        '2': ['5', '6'],
        '5': ['9', '10'],
        '4': ['7', '8'],
        '7': ['11', '12']
        }

def bfs(graph, start, end):
    # maintain a queue of paths
    queue = []
    # push the first path into the queue
    queue.append([start])
    while queue:
        # get the first path from the queue
        path = queue.pop(0)
        # get the last node from the path
        node = path[-1]
        # path found
        if node == end:
            return path
        # enumerate all adjacent nodes, construct a new path and push it into the queue
        for adjacent in graph.get(node, []):
            new_path = list(path)
            new_path.append(adjacent)
            queue.append(new_path)

print bfs(graph, '1', '11')
</snippet></ROW><ROW><id>8922151</id><snippet>graph = {
        '1': ['2', '3', '4'],
        '2': ['5', '6'],
        '5': ['9', '10'],
        '4': ['7', '8'],
        '7': ['11', '12']
        }

def backtrace(parent, start, end):
    path = [end]
    while path[-1] != start:
        path.append(parent[path[-1]])
    path.reverse()
    return path


def bfs(graph, start, end):
    parent = {}
    queue = []
    queue.append(start)
    while queue:
        node = queue.pop(0)
        if node == end:
            return backtrace(parent, start, end)
        for adjacent in graph.get(node, []):
            parent[adjacent] = node # &lt;&lt;&lt;&lt;&lt; record its parent 
            queue.append(adjacent)

print bfs(graph, '1', '11')
</snippet></ROW><ROW><id>8922243</id><snippet>import fnmatch
import os

start_urls = []
for root, dirnames, filenames in os.walk('/start/dir/'):
  for filename in fnmatch.filter(filenames, '*.html'):
      start_urls.append(os.path.join(root, filename))
</snippet></ROW><ROW><id>8922243</id><snippet>*.htm</snippet></ROW><ROW><id>8922243</id><snippet>[os.path.join(r, f) for r,ds,fs in os.walk('/start/dir/') for f in fnmatch.filter(fs, '*.html')]
</snippet></ROW><ROW><id>8922376</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>8922376</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>8922376</id><snippet>import urllib, urllib2

form_data = urllib.urlencode({'target': &lt;value&gt;, 'fact': &lt;value&gt;', ...})
urllib2.urlopen("np2.phtml", form_data)
</snippet></ROW><ROW><id>8922684</id><snippet>PATH</snippet></ROW><ROW><id>8922684</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8922684</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8922684</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8922773</id><snippet>xrange</snippet></ROW><ROW><id>8922773</id><snippet>range</snippet></ROW><ROW><id>8922773</id><snippet>&gt;&gt;&gt; s = u''.join(unichr(c) for c in xrange(0x10ffff+1))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;genexpr&gt;
ValueError: unichr() arg not in range(0x10000) (narrow Python build)
</snippet></ROW><ROW><id>8922773</id><snippet>sys.maxunicode</snippet></ROW><ROW><id>8922773</id><snippet>&gt;&gt;&gt; s = u''.join(unichr(c) for c in xrange(sys.maxunicode+1))
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\s', s)
[u'\t', u'\n', u'\x0b', u'\x0c', u'\r', u' ']
</snippet></ROW><ROW><id>8922773</id><snippet>&gt;&gt;&gt; re.findall(r'\s', chrs, re.UNICODE)
[u'\t', u'\n', u'\x0b', u'\x0c', u'\r', u'\x1c', u'\x1d', u'\x1e', u'\x1f', u' '
, u'\x85', u'\xa0', u'\u1680', u'\u180e', u'\u2000', u'\u2001', u'\u2002', u'\u2
003', u'\u2004', u'\u2005', u'\u2006', u'\u2007', u'\u2008', u'\u2009', u'\u200a
', u'\u2028', u'\u2029', u'\u202f', u'\u205f', u'\u3000']
</snippet></ROW><ROW><id>8922773</id><snippet>unicodedata.name</snippet></ROW><ROW><id>8922773</id><snippet>&gt;&gt;&gt; from unicodedata import name
&gt;&gt;&gt; for c in re.findall(r'\s', chrs, re.UNICODE):
...     print repr(c), name(c, '')
...
u'\t'
u'\n'
u'\x0b'
u'\x0c'
u'\r'
u'\x1c'
u'\x1d'
u'\x1e'
u'\x1f'
u' ' SPACE
u'\x85'
u'\xa0' NO-BREAK SPACE
u'\u1680' OGHAM SPACE MARK
u'\u180e' MONGOLIAN VOWEL SEPARATOR
u'\u2000' EN QUAD
u'\u2001' EM QUAD
u'\u2002' EN SPACE
u'\u2003' EM SPACE
u'\u2004' THREE-PER-EM SPACE
u'\u2005' FOUR-PER-EM SPACE
u'\u2006' SIX-PER-EM SPACE
u'\u2007' FIGURE SPACE
u'\u2008' PUNCTUATION SPACE
u'\u2009' THIN SPACE
u'\u200a' HAIR SPACE
u'\u2028' LINE SEPARATOR
u'\u2029' PARAGRAPH SEPARATOR
u'\u202f' NARROW NO-BREAK SPACE
u'\u205f' MEDIUM MATHEMATICAL SPACE
u'\u3000' IDEOGRAPHIC SPACE
</snippet></ROW><ROW><id>8922955</id><snippet>lfilter(np.ones(windowSize) / windowSize, 1, data)
</snippet></ROW><ROW><id>8923006</id><snippet>default_address = relationship('Address',
                       secondary=ACC_ADD_TABLE,
                       primaryjoin="acc.c.id==acc_add_rel.c.acc_id",
                       secondaryjoin="and_(address.c.id==acc_add_rel.c.add_id, address.c.type=='default')",
                       #uselist = True,
                       )
</snippet></ROW><ROW><id>8923006</id><snippet>uselist=True</snippet></ROW><ROW><id>8923006</id><snippet>Account</snippet></ROW><ROW><id>8923006</id><snippet>default_address_id</snippet></ROW><ROW><id>8923006</id><snippet>1-[0..1]</snippet></ROW><ROW><id>8923006</id><snippet>Address</snippet></ROW><ROW><id>8923006</id><snippet>Account.addresses</snippet></ROW><ROW><id>8923006</id><snippet>==</snippet></ROW><ROW><id>8923006</id><snippet>=</snippet></ROW><ROW><id>8923006</id><snippet>"Address.type='default'"</snippet></ROW><ROW><id>8923215</id><snippet>http://myapp.appspot.com</snippet></ROW><ROW><id>8923215</id><snippet>http://version.myapp.appspot.com</snippet></ROW><ROW><id>8923215</id><snippet>http://3.myapp.appspot.com</snippet></ROW><ROW><id>8923515</id><snippet>dict</snippet></ROW><ROW><id>8923515</id><snippet>Hash</snippet></ROW><ROW><id>8923515</id><snippet>dict</snippet></ROW><ROW><id>8923523</id><snippet>import re
mylist= re.split('\s+(?=\w+:)', searchString)
</snippet></ROW><ROW><id>8923523</id><snippet>(?=</snippet></ROW><ROW><id>8923523</id><snippet>\w+:</snippet></ROW><ROW><id>8923988</id><snippet>[^\W\d_]
</snippet></ROW><ROW><id>8923988</id><snippet>\w</snippet></ROW><ROW><id>8923988</id><snippet>[^\W]</snippet></ROW><ROW><id>8923988</id><snippet>\w</snippet></ROW><ROW><id>8923988</id><snippet>re.UNICODE</snippet></ROW><ROW><id>8924115</id><snippet>finalDict = dict([(k['id'], k['sigla']) for k in myDictList])
</snippet></ROW><ROW><id>8924115</id><snippet>finalDict = dict(((k['id'], k['sigla']) for k in myDictList))
</snippet></ROW><ROW><id>8924115</id><snippet>finalDict = dict((k['id'], k['sigla']) for k in myDictList)
</snippet></ROW><ROW><id>8924116</id><snippet>&gt;&gt;&gt; from celery.task.control import revoke
&gt;&gt;&gt; revoke(task_id, terminate=True)
</snippet></ROW><ROW><id>8924175</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>8924175</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>8924526</id><snippet>CREATE TABLE info (
id integer  PRIMARY KEY AUTOINCREMENT DEFAULT NULL,
name TEXT(20) DEFAULT NULL,
country TEXT(20) DEFAULT NULL,
age integer)
</snippet></ROW><ROW><id>8924526</id><snippet>INSERT INTO info (name,country,age) VALUES ('Leroy Hale','San Marino','46');
INSERT INTO info (name,country,age) VALUES ('William Coleman','Namibia','50');
INSERT INTO info (name,country,age) VALUES ('Phelan Waller','Belgium','43');
INSERT INTO info (name,country,age) VALUES ('Kato Martin','Virgin Islands, British','21');
INSERT INTO info (name,country,age) VALUES ('Jameson Mccoy','United Arab Emirates','45');
INSERT INTO info (name,country,age) VALUES ('Fulton Reeves','Belarus','34');
INSERT INTO info (name,country,age) VALUES ('Calvin Love','Morocco','28');
INSERT INTO info (name,country,age) VALUES ('Peter Solis','Bhutan','31');
INSERT INTO info (name,country,age) VALUES ('Connor Stephenson','Dominican Republic','26');
INSERT INTO info (name,country,age) VALUES ('Aristotle Smith','Chad','45');
</snippet></ROW><ROW><id>8924526</id><snippet>from PyQt4.QtSql import QSqlQueryModel,QSqlDatabase,QSqlQuery
from PyQt4.QtGui import QTableView,QApplication
import sys

app = QApplication(sys.argv)

db = QSqlDatabase.addDatabase("QSQLITE")
db.setDatabaseName("sqlitedb.rdb")
db.open()

projectModel = QSqlQueryModel()
projectModel.setQuery("select name,age from info",db)

projectView = QTableView()
projectView.setModel(projectModel)

projectView.show()
app.exec_()
</snippet></ROW><ROW><id>8924526</id><snippet>from PyQt4.QtSql import QSqlDatabase,QSqlQuery
from PyQt4.QtCore import QCoreApplication
import sys

app = QCoreApplication(sys.argv)

db = QSqlDatabase.addDatabase("QSQLITE")
db.setDatabaseName("sqlitedb.rdb")
db.open()

query = QSqlQuery()
query.exec_("select * from info")
while (query.next()):
    id = query.value(0).toInt()
    name = query.value(1).toString()
    country = query.value(2).toString()
    age = query.value(3).toInt()

    print "name = %s \ncountry = %s" % (name,country)

app.exec_()
</snippet></ROW><ROW><id>8925469</id><snippet>import functools

def chainable(func):
    @functools.wraps(func)
    def decorated(*args, **kwargs):
        func(*args, **kwargs)
        return args[0]
    return decorated
</snippet></ROW><ROW><id>8925469</id><snippet>class Foo(object):
    @chainable
    def show(self):
        self.visibility = True

    @chainable
    def go_blue(self):
        self.color = 'blue'
</snippet></ROW><ROW><id>8925469</id><snippet>return self</snippet></ROW><ROW><id>8925469</id><snippet>chainable</snippet></ROW><ROW><id>8925469</id><snippet>_</snippet></ROW><ROW><id>8925469</id><snippet>def all_chainable(klass):
    for k, v in klass.__dict__.items():
        if not k.startswith('_') and callable(v):
            setattr(klass, k, chainable(v))
    return klass
</snippet></ROW><ROW><id>8925469</id><snippet>@all_chainable
class Foo(object):
    def show(self):
        self.visibility = True
</snippet></ROW><ROW><id>8925469</id><snippet>return self</snippet></ROW><ROW><id>8925495</id><snippet>Model</snippet></ROW><ROW><id>8925495</id><snippet>ForeignKey</snippet></ROW><ROW><id>8925567</id><snippet>==</snippet></ROW><ROW><id>8925567</id><snippet>&gt;&gt;&gt; "maçã" == u"maçã"
__main__:1: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
False
</snippet></ROW><ROW><id>8925567</id><snippet>&gt;&gt;&gt; "maçã".decode("utf-8") == u"maçã"
True
</snippet></ROW><ROW><id>8925983</id><snippet>%0</snippet></ROW><ROW><id>8925983</id><snippet>%~dp0..</snippet></ROW><ROW><id>8925983</id><snippet>%*</snippet></ROW><ROW><id>8926158</id><snippet>Base</snippet></ROW><ROW><id>8926158</id><snippet>__init__.py</snippet></ROW><ROW><id>8926158</id><snippet>Base</snippet></ROW><ROW><id>8926158</id><snippet>model/__init__.py</snippet></ROW><ROW><id>8926166</id><snippet>testUrl.rsplit('?')
</snippet></ROW><ROW><id>8927173</id><snippet>WebElement</snippet></ROW><ROW><id>8927173</id><snippet>find_element</snippet></ROW><ROW><id>8927173</id><snippet>find_elements</snippet></ROW><ROW><id>8927173</id><snippet>&lt;span class="metadata"&gt;
    &lt;strong&gt;Photographer's Name: &lt;/strong&gt;
    &lt;strong&gt;Ansel Adams&lt;/strong&gt;
&lt;/span&gt;
</snippet></ROW><ROW><id>8927173</id><snippet>find_element_by_xpath('strong/following-sibling::*[1]').text</snippet></ROW><ROW><id>8927625</id><snippet>INCREF</snippet></ROW><ROW><id>8927625</id><snippet>DECREF</snippet></ROW><ROW><id>8927625</id><snippet>NewGlobalRef</snippet></ROW><ROW><id>8927625</id><snippet>DeleteGlobalRef</snippet></ROW><ROW><id>8927688</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>8927688</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; test = repr({"ham": True, 42: "spam", "foo": "bar"})
&gt;&gt;&gt; test
"{42: 'spam', 'foo': 'bar', 'ham': True}"
&gt;&gt;&gt; literal_eval(test)
{42: 'spam', 'foo': 'bar', 'ham': True}
</snippet></ROW><ROW><id>8927788</id><snippet>super()</snippet></ROW><ROW><id>8927788</id><snippet>class B(A):
    def __init__(self):
        super(B, self).__init__(10)

    @classmethod
    def construct(cls, filename):
        # should construct B from filename
        return super(B, cls).construct(filename, 10)
</snippet></ROW><ROW><id>8927788</id><snippet>B</snippet></ROW><ROW><id>8927788</id><snippet>A</snippet></ROW><ROW><id>8927788</id><snippet>A</snippet></ROW><ROW><id>8927788</id><snippet>class B(A):
    def __init__(self, x=10):
        # if you're paranoid insert `assert x==10` here
        super(B, self).__init__(x)

    @classmethod
    def construct(cls, filename):
        # should construct B from filename
        return super(B, cls).construct(filename, 10)
</snippet></ROW><ROW><id>8927788</id><snippet>B</snippet></ROW><ROW><id>8927788</id><snippet>x</snippet></ROW><ROW><id>8927788</id><snippet>__init__</snippet></ROW><ROW><id>8927864</id><snippet>url(r'^confirmemail/(?P&lt;code&gt;[a-zA-Z0-9]+)/', 'blog.views.confirmemail'),</snippet></ROW><ROW><id>8927864</id><snippet>url(r'^confirmemail/(?P&lt;code&gt;[a-zA-Z0-9]{10})/', 'blog.views.confirmemail'),</snippet></ROW><ROW><id>8928256</id><snippet>&lt;a href="http://docs.python.org/library/functions.html#int"&gt;int()</snippet></ROW><ROW><id>8928256</id><snippet>2</snippet></ROW><ROW><id>8928256</id><snippet>&gt;&gt;&gt; print int('11111111', 2)
255
</snippet></ROW><ROW><id>8928406</id><snippet>s.find(t)</snippet></ROW><ROW><id>8928406</id><snippet>t</snippet></ROW><ROW><id>8928406</id><snippet>s</snippet></ROW><ROW><id>8928406</id><snippet>t</snippet></ROW><ROW><id>8928406</id><snippet>s</snippet></ROW><ROW><id>8928406</id><snippet>if data.lower().count('invalid password') &gt; 1:
    # do something
</snippet></ROW><ROW><id>8928452</id><snippet>password == passwordrepeat</snippet></ROW><ROW><id>8928452</id><snippet>userf.is_valid()</snippet></ROW><ROW><id>8928710</id><snippet>import re

re.split(ur"[\u200b\s]+", "some string", flags=re.UNICODE)
</snippet></ROW><ROW><id>8928758</id><snippet>def clean_nameofdata(self):
    data = self.cleaned_data['nameofdata']
    # do some stuff
    return data
</snippet></ROW><ROW><id>8928758</id><snippet>def clean_password(self):
</snippet></ROW><ROW><id>8928758</id><snippet>def clean_passwordrepeat(self):
</snippet></ROW><ROW><id>8928758</id><snippet>def clean_password(self):
    data = self.clean_data['password']
    # cript stuff
    return data
</snippet></ROW><ROW><id>8929183</id><snippet>assertAlmostEqual</snippet></ROW><ROW><id>8929183</id><snippet>assertNotAlmostEqual</snippet></ROW><ROW><id>8929183</id><snippet>assertAlmostEqual(first, second, places=7, msg=None, delta=None)
</snippet></ROW><ROW><id>8929183</id><snippet>vec.normalize</snippet></ROW><ROW><id>8929283</id><snippet>url()</snippet></ROW><ROW><id>8929283</id><snippet>url(r'^confirmemail/([a-zA-Z0-9]{10})/$', 'blog.views.confirmemail'),
# or
url(r'^confirmemail/(?P&lt;token&gt;[a-zA-Z0-9]{10})/$', 'blog.views.confirmemail'),
</snippet></ROW><ROW><id>8929283</id><snippet>token</snippet></ROW><ROW><id>8929320</id><snippet>set</snippet></ROW><ROW><id>8929395</id><snippet>from urlparse import urlparse
query = urlparse(self.path).query
query_components = dict(qc.split("=") for qc in query.split("&amp;"))
imsi = query_components["imsi"]
# query_components = { "imsi" : "Hello" }

# Or use the parse_qs method
from urlparse import urlparse, parse_qs
query_components = parse_qs(urlparse(self.path).query)
imsi = query_components["imsi"] 
# query_components = { "imsi" : ["Hello"] }
</snippet></ROW><ROW><id>8929395</id><snippet> curl http://your.host/?imsi=Hello
</snippet></ROW><ROW><id>8929598</id><snippet>d = { "I0": [0,1,5,2], "I1": [1,3,5,2], "I2": [5,9,10,1]}
map(dict, zip(*map(lambda (k, v): map(lambda vv: (k, vv), v), d.iteritems())))
</snippet></ROW><ROW><id>8929598</id><snippet>ipython</snippet></ROW><ROW><id>8929598</id><snippet>_</snippet></ROW><ROW><id>8929598</id><snippet>In [1]: d = {'I0': [0, 1, 5, 2], 'I1': [1, 3, 5, 2], 'I2': [5, 9, 10, 1]}

In [2]: map(lambda (k, v): map(lambda vv: (k, vv), v), _.iteritems())
Out[2]: 
[[('I1', 1), ('I1', 3), ('I1', 5), ('I1', 2)],
 [('I0', 0), ('I0', 1), ('I0', 5), ('I0', 2)],
 [('I2', 5), ('I2', 9), ('I2', 10), ('I2', 1)]]

In [3]: zip(*_)
Out[3]: 
[(('I1', 1), ('I0', 0), ('I2', 5)),
 (('I1', 3), ('I0', 1), ('I2', 9)),
 (('I1', 5), ('I0', 5), ('I2', 10)),
 (('I1', 2), ('I0', 2), ('I2', 1))]

In [4]: map(dict, _)
Out[4]: 
[{'I0': 0, 'I1': 1, 'I2': 5},
 {'I0': 1, 'I1': 3, 'I2': 9},
 {'I0': 5, 'I1': 5, 'I2': 10},
 {'I0': 2, 'I1': 2, 'I2': 1}]
</snippet></ROW><ROW><id>8929674</id><snippet>from a import A
</snippet></ROW><ROW><id>8929674</id><snippet>A</snippet></ROW><ROW><id>8929674</id><snippet>a.A</snippet></ROW><ROW><id>8929674</id><snippet>a = 2
</snippet></ROW><ROW><id>8929674</id><snippet>a.A</snippet></ROW><ROW><id>8929674</id><snippet>import a
</snippet></ROW><ROW><id>8929674</id><snippet>a</snippet></ROW><ROW><id>8929674</id><snippet>a.A</snippet></ROW><ROW><id>8929674</id><snippet>a.A = 2
</snippet></ROW><ROW><id>8929744</id><snippet>import traceback
import sys

try:
    a = 1 /0


except Exception, inst:
    exc_traceback = sys.exc_info()[2]
    print str(inst) + "\n" + str(traceback.format_tb(exc_traceback)).replace('\\n', '\n')
</snippet></ROW><ROW><id>8929827</id><snippet>def find_closest(A, target):
    #A must be sorted
    idx = A.searchsorted(target)
    idx = np.clip(idx, 1, len(A)-1)
    left = A[idx-1]
    right = A[idx]
    idx -= target - left &lt; right - target
    return idx
</snippet></ROW><ROW><id>8929827</id><snippet>idx = A.searchsorted(target)</snippet></ROW><ROW><id>8929827</id><snippet>target</snippet></ROW><ROW><id>8929827</id><snippet>target</snippet></ROW><ROW><id>8929827</id><snippet>A[index - 1]</snippet></ROW><ROW><id>8929827</id><snippet>A[index]</snippet></ROW><ROW><id>8929827</id><snippet>left</snippet></ROW><ROW><id>8929827</id><snippet>right</snippet></ROW><ROW><id>8929827</id><snippet>left &lt; target &lt;= right</snippet></ROW><ROW><id>8929827</id><snippet>target - left &lt; right - target</snippet></ROW><ROW><id>8929827</id><snippet>True</snippet></ROW><ROW><id>8929827</id><snippet>left</snippet></ROW><ROW><id>8929827</id><snippet>False</snippet></ROW><ROW><id>8929827</id><snippet>right</snippet></ROW><ROW><id>8929827</id><snippet>target</snippet></ROW><ROW><id>8929827</id><snippet>A</snippet></ROW><ROW><id>8929827</id><snippet>idx = 0</snippet></ROW><ROW><id>8929827</id><snippet>idx = np.clip(idx, 1, len(A)-1)</snippet></ROW><ROW><id>8929827</id><snippet>idx</snippet></ROW><ROW><id>8929827</id><snippet>idx=1</snippet></ROW><ROW><id>8929827</id><snippet>left = A[0]</snippet></ROW><ROW><id>8929827</id><snippet>right = A[1]</snippet></ROW><ROW><id>8929827</id><snippet>target &lt;= left &lt;= right</snippet></ROW><ROW><id>8929827</id><snippet>target - left &lt;= 0</snippet></ROW><ROW><id>8929827</id><snippet>right - target &gt;= 0</snippet></ROW><ROW><id>8929827</id><snippet>target - left &lt; right - target</snippet></ROW><ROW><id>8929827</id><snippet>True</snippet></ROW><ROW><id>8929827</id><snippet>target == left == right</snippet></ROW><ROW><id>8929827</id><snippet>idx - True = 0</snippet></ROW><ROW><id>8929827</id><snippet>target</snippet></ROW><ROW><id>8929827</id><snippet>A</snippet></ROW><ROW><id>8929827</id><snippet>idx = A.searchsorted(target)</snippet></ROW><ROW><id>8929827</id><snippet>np.clip(idx, 1, len(A)-1)
</snippet></ROW><ROW><id>8929827</id><snippet>len(A)</snippet></ROW><ROW><id>8929827</id><snippet>len(A) - 1</snippet></ROW><ROW><id>8929827</id><snippet>idx=len(A) -1</snippet></ROW><ROW><id>8929827</id><snippet>target - left &lt; right - target</snippet></ROW><ROW><id>8929827</id><snippet>False</snippet></ROW><ROW><id>8929827</id><snippet>len(A) -1</snippet></ROW><ROW><id>8929827</id><snippet>In [163]: A = np.arange(0, 20.)

In [164]: target = np.array([-2, 100., 2., 2.4, 2.5, 2.6])

In [165]: find_closest(A, target)
Out[165]: array([ 0, 19,  2,  2,  3,  3])
</snippet></ROW><ROW><id>8930021</id><snippet>str(var)</snippet></ROW><ROW><id>8930021</id><snippet>s = 'Hello. ' + str(var)
</snippet></ROW><ROW><id>8930021</id><snippet>str</snippet></ROW><ROW><id>8930021</id><snippet>str</snippet></ROW><ROW><id>8930021</id><snippet>%</snippet></ROW><ROW><id>8930021</id><snippet>s = 'Hello. %s' % var
</snippet></ROW><ROW><id>8930515</id><snippet>next_room.proceed()
</snippet></ROW><ROW><id>8930515</id><snippet>next_room = next_room.proceed()
</snippet></ROW><ROW><id>8930515</id><snippet>while True:</snippet></ROW><ROW><id>8930609</id><snippet>screen.refresh()
</snippet></ROW><ROW><id>8930609</id><snippet>curses.endwin()
</snippet></ROW><ROW><id>8930609</id><snippet>screen.getch()
</snippet></ROW><ROW><id>8930910</id><snippet>if 1: import views
</snippet></ROW><ROW><id>8930969</id><snippet>orig.update(extra)
</snippet></ROW><ROW><id>8930969</id><snippet>orig</snippet></ROW><ROW><id>8930969</id><snippet>dest = dict(orig)     # or dict(**orig) or dict.copy()
dest.update(extra)
</snippet></ROW><ROW><id>8931136</id><snippet>os.walk</snippet></ROW><ROW><id>8931136</id><snippet>glob.iglob</snippet></ROW><ROW><id>8931136</id><snippet>os.listdir</snippet></ROW><ROW><id>8931396</id><snippet>jet</snippet></ROW><ROW><id>8931396</id><snippet>Colormap</snippet></ROW><ROW><id>8931396</id><snippet>import matplotlib.pyplot as plt
import matplotlib.colors as colors
import matplotlib.cm as cmx
import numpy as np

# define some random data that emulates your indeded code:
NCURVES = 10
np.random.seed(101)
curves = [np.random.random(20) for i in range(NCURVES)]
values = range(NCURVES)

fig = plt.figure()
ax = fig.add_subplot(111)
# replace the next line 
#jet = colors.Colormap('jet')
# with
jet = cm = plt.get_cmap('jet') 
cNorm  = colors.Normalize(vmin=0, vmax=values[-1])
scalarMap = cmx.ScalarMappable(norm=cNorm, cmap=jet)
print scalarMap.get_clim()

lines = []
for idx in range(len(curves)):
    line = curves[idx]
    colorVal = scalarMap.to_rgba(values[idx])
    colorText = (
        'color: (%4.2f,%4.2f,%4.2f)'%(colorVal[0],colorVal[1],colorVal[2])
        )
    retLine, = ax.plot(line,
                       color=colorVal,
                       label=colorText)
    lines.append(retLine)
#added this to get the legend to work
handles,labels = ax.get_legend_handles_labels()
ax.legend(handles, labels, loc='upper right')
ax.grid()
plt.show()
</snippet></ROW><ROW><id>8931396</id><snippet>ScalarMappable</snippet></ROW><ROW><id>8931887</id><snippet>import gtk


def inIta(col, cell, model, iter, mymodel):
    s = model.get_string_from_iter(iter)
    niter = mymodel.get_iter_from_string(s)
    obj = mymodel.get_value(niter, 0)
    cell.set_property('text', obj)


model = gtk.ListStore(str)
model2 = gtk.ListStore(str)
view = gtk.TreeView(model)
rend1 = gtk.CellRendererText()
col1 = gtk.TreeViewColumn('hello', rend1, text=0)
view.append_column(col1)
rend2 = gtk.CellRendererText()
col2 = gtk.TreeViewColumn('ciao', rend2)
col2.set_cell_data_func(rend2, inIta, model2)
view.append_column(col2)

model.append(['hello world'])
model2.append(['ciao mondo'])

win = gtk.Window()
win.connect('delete_event', gtk.main_quit)
win.add(view)
win.show_all()
gtk.main()
</snippet></ROW><ROW><id>8931949</id><snippet>counts</snippet></ROW><ROW><id>8931949</id><snippet>freq = defaultdict(int)
for word in text:
    freq[word] += 1

ranks = sorted(freq.keys(), key=lambda k: (-freq[k], text.index(k)))
ranks = dict(zip(ranks, range(1, len(ranks)+1)))

for (a, b), count in counts.iteritems():
    print ranks[a], ranks[b], count
</snippet></ROW><ROW><id>8931949</id><snippet>1 3 1
2 6 1
3 4 1
4 5 1
6 1 1
5 1 1
2 7 1
1 2 2
</snippet></ROW><ROW><id>8931949</id><snippet>&gt;&gt;&gt; dict(freq)
{'house': 1, 'jumped': 1, 'over': 1, 'dog': 2, 'cat': 1, 'in': 1, 'the': 3}
&gt;&gt;&gt; sorted(freq.keys(), key=lambda k: (-freq[k], text.index(k)))
['the', 'dog', 'cat', 'jumped', 'over', 'in', 'house']
&gt;&gt;&gt; dict(zip(ranks, range(1, len(ranks)+1)))
{'house': 7, 'jumped': 4, 'over': 5, 'dog': 2, 'cat': 3, 'in': 6, 'the': 1}
</snippet></ROW><ROW><id>8932066</id><snippet>utf8_text=open('text1.txt','r+').read()
unicode_data = utf8_text.decode('utf8')

print len(unicode_data)
</snippet></ROW><ROW><id>8932508</id><snippet>file.write</snippet></ROW><ROW><id>8932508</id><snippet>file.write("%s %s %s" % (ranks[a], ranks[b], count))
</snippet></ROW><ROW><id>8932516</id><snippet>SELECT whatever FROM comments_table c
WHERE c.id IN (SELECT id FROM comments_table c2 WHERE some_criteria_here LIMIT 10)
OR c.parent_id IN (SELECT id FROM comments_table c2 WHERE some_criteria_here LIMIT 10)
</snippet></ROW><ROW><id>8932598</id><snippet>zip</snippet></ROW><ROW><id>8932598</id><snippet>rows = zip(list1, list2, list3, list4)
</snippet></ROW><ROW><id>8932598</id><snippet>{% for row in rows %}
  {{row.0}} {{row.1}} {{row.2}} {{row.3}}
{% endfor %}
</snippet></ROW><ROW><id>8932605</id><snippet>file://</snippet></ROW><ROW><id>8932605</id><snippet>file://</snippet></ROW><ROW><id>8932954</id><snippet>facebook</snippet></ROW><ROW><id>8933073</id><snippet>read()</snippet></ROW><ROW><id>8933073</id><snippet>len()</snippet></ROW><ROW><id>8933073</id><snippet>data = response.read()
length = len(data)
</snippet></ROW><ROW><id>8933212</id><snippet>+</snippet></ROW><ROW><id>8933212</id><snippet>insert_at_end</snippet></ROW><ROW><id>8933212</id><snippet>tuple(1)</snippet></ROW><ROW><id>8933212</id><snippet>str</snippet></ROW><ROW><id>8933212</id><snippet>tuple(["a"])</snippet></ROW><ROW><id>8933212</id><snippet>("a",)</snippet></ROW><ROW><id>8933212</id><snippet>list(["a"])</snippet></ROW><ROW><id>8933212</id><snippet>["a"]</snippet></ROW><ROW><id>8933212</id><snippet>str(["a"]))</snippet></ROW><ROW><id>8933212</id><snippet>"['a']"</snippet></ROW><ROW><id>8933212</id><snippet>"a"</snippet></ROW><ROW><id>8933212</id><snippet>+</snippet></ROW><ROW><id>8933212</id><snippet>instanceof</snippet></ROW><ROW><id>8933212</id><snippet>type()</snippet></ROW><ROW><id>8933236</id><snippet>def foobar():
    msg='bar'
    if foo:
        msg='foo'
    return msg
</snippet></ROW><ROW><id>8933290</id><snippet>os.path.isdir</snippet></ROW><ROW><id>8933290</id><snippet>os.path.exists</snippet></ROW><ROW><id>8933290</id><snippet>import os
print(os.path.isdir("/home/el"))
print(os.path.exists("/home/el/myfile.txt"))
</snippet></ROW><ROW><id>8933299</id><snippet>def if_error(fn, fail_value, *args, **kwargs):
    try:
      return fn(*args, **kwargs)
    except:
        return fail_value

def test_fail(x):
    raise ValueError(x)

def test_pass(x):
    return x

if __name__=='__main__':
    print if_error(test_fail, 0, 4)
    print if_error(test_pass, 0, 5)
</snippet></ROW><ROW><id>8933818</id><snippet>statsmodels</snippet></ROW><ROW><id>8933829</id><snippet>fixdata = data[-1]
</snippet></ROW><ROW><id>8933829</id><snippet>fixdata</snippet></ROW><ROW><id>8933829</id><snippet>fixdata[10] = 'estimated'
</snippet></ROW><ROW><id>8933829</id><snippet>fixdata = data[-1][:]
</snippet></ROW><ROW><id>8933829</id><snippet>[:]</snippet></ROW><ROW><id>8933913</id><snippet>show()</snippet></ROW><ROW><id>8933913</id><snippet>start /wait</snippet></ROW><ROW><id>8933913</id><snippet>/wait</snippet></ROW><ROW><id>8933913</id><snippet>/wait</snippet></ROW><ROW><id>8933913</id><snippet>.bmp</snippet></ROW><ROW><id>8933944</id><snippet>basicConfig()</snippet></ROW><ROW><id>8933944</id><snippet>logging</snippet></ROW><ROW><id>8934124</id><snippet>soup = BeautifulSoup(html)
results = soup.findAll("td", {"valign" : "top"})
</snippet></ROW><ROW><id>8934124</id><snippet>attrs</snippet></ROW><ROW><id>8934124</id><snippet>from BeautifulSoup import BeautifulSoup

html = '&lt;td valign="top"&gt;.....&lt;/td&gt;\
        &lt;td width="580" valign="top"&gt;.......&lt;/td&gt;\
        &lt;td&gt;.....&lt;/td&gt;'

soup = BeautifulSoup(html)
results = soup.findAll("td", {"valign" : "top"})

for result in results :
    if len(result.attrs) == 1 :
        print result
</snippet></ROW><ROW><id>8934124</id><snippet>&lt;td valign="top"&gt;.....&lt;/td&gt;
</snippet></ROW><ROW><id>8934271</id><snippet>\xe2\x80\x93</snippet></ROW><ROW><id>8934332</id><snippet>cursor.execute("SELECT DISTINCT(provider) FROM raw_financials 
            WHERE vendor_id = %s OR title = %s", (vendor_id, title))
</snippet></ROW><ROW><id>8934332</id><snippet>%s</snippet></ROW><ROW><id>8934332</id><snippet>vendor_id</snippet></ROW><ROW><id>8934332</id><snippet>title</snippet></ROW><ROW><id>8934332</id><snippet>%s</snippet></ROW><ROW><id>8934332</id><snippet>?</snippet></ROW><ROW><id>8934344</id><snippet>from matplotlib import pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
import numpy as np

x = np.random.randint(0, 500, 100000)
y = np.random.randn(100000)

# definitions for the axes
left, width = 0.1, 0.65
bottom, height = 0.1, 0.65
bottom_h = left_h = left + width + 0.02

rect_scatter = [left, bottom, width, height]
rect_histx = [left, bottom_h, width, 0.2]
rect_histy = [left_h, bottom, 0.2, height]

fig = plt.figure(1, figsize=(5.5,5.5))

axScatter = plt.axes(rect_scatter)
axHistx = plt.axes(rect_histx)
axHisty = plt.axes(rect_histy)

# the scatter plot:
axScatter.scatter(x, y)

binwidth = 0.25
xymax = np.max( [np.max(np.fabs(x)), np.max(np.fabs(y))] )
lim = ( int(xymax/binwidth) + 1) * binwidth

axScatter.set_xlim((0, lim))
axScatter.set_ylim((-5, 10))       # &lt;-- controls y axis. Values should be calculated.

bins = np.arange(-lim, lim + binwidth, binwidth)
axHistx.hist(x, bins=bins)
axHisty.hist(y, bins=bins, orientation='horizontal')

axHistx.set_xlim(axScatter.get_xlim())
axHisty.set_ylim(axScatter.get_ylim())

#axHistx.axis["bottom"].major_ticklabels.set_visible(False)
for tl in axHistx.get_xticklabels():
    tl.set_visible(False)
axHistx.set_yticks([0, 50, 200])

#axHisty.axis["left"].major_ticklabels.set_visible(False)
for tl in axHisty.get_yticklabels():
    tl.set_visible(False)
axHisty.set_xticks([0, 10000, 20000])

plt.show()
</snippet></ROW><ROW><id>8934384</id><snippet>is_dir = lambda zipinfo: zipinfo.filename.endswith('/')
</snippet></ROW><ROW><id>8934553</id><snippet>hid = plt.pcolormesh(X,Y, data, antialiased=True)

#here we cover up the region that we just plotted in
r3 = [1 for i in range(360)]
theta3 = np.arange(360)*np.pi/180.
plt.fill(theta3, r3, 'w')

#now we can go through and fill in all the regions
for j in range(len(r)):
    rbox = np.array([r[j], r[j], r[j]+ rstep, r[j] + rstep])
    for i in range(len(theta)):
        thetabox = np.array([theta[i], theta[i] + tstep, theta[i] + tstep, theta[i]])
        x = rbox*np.cos(thetabox)
        y = rbox*np.sin(thetabox)
        colorv = np.sin(r[j]/10.*np.pi)
        plt.fill(thetabox,rbox, facecolor = my_cmap(colorv))
#And now we can plot the color bar that fits the data Tada :)
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>8934655</id><snippet>re.sub()</snippet></ROW><ROW><id>8934655</id><snippet> def upper_repl(match):
     return 'GOO' + match.group(1).upper() + 'GAR'
</snippet></ROW><ROW><id>8934655</id><snippet> &gt;&gt;&gt; re.sub(r'foo([a-z]+)bar', upper_repl, 'foobazbar')
 'GOOBAZGAR'
</snippet></ROW><ROW><id>8934667</id><snippet>if __name__ == '__main__':
  currtag = currentTag()
  newtag = newTag()
  compareTag(currtag,newtag)
</snippet></ROW><ROW><id>8934748</id><snippet>class Users(Base):
    __tablename__ = 'users'

    @classmethod
    def by_id(cls, userid):
        return Session.query(Users).filter(Users.id==userid).first()
</snippet></ROW><ROW><id>8934771</id><snippet>elif n &lt; 0:
    return False

elif is_buyable(n - 20) or is_buyable(n - 9) or is_buyable(n - 6):
    return True
</snippet></ROW><ROW><id>8934902</id><snippet>c += 3</snippet></ROW><ROW><id>8934902</id><snippet>tmp = c
c = tmp + 3
</snippet></ROW><ROW><id>8934902</id><snippet>c</snippet></ROW><ROW><id>8934902</id><snippet>c</snippet></ROW><ROW><id>8934902</id><snippet>funcB</snippet></ROW><ROW><id>8934902</id><snippet>c</snippet></ROW><ROW><id>8934902</id><snippet>+=</snippet></ROW><ROW><id>8934902</id><snippet>c</snippet></ROW><ROW><id>8934902</id><snippet>funcC</snippet></ROW><ROW><id>8934902</id><snippet>   def funcB():
      nonlocal c
      c += 3
      ...
</snippet></ROW><ROW><id>8934902</id><snippet>def funcA():
   print "funcA"
   c = [0]
   def funcB():
      c[0] += 3
      print "funcB", c[0]

   def funcC():
      c[0] = 5
      print "funcC", c[0]

   print "c", c[0]
   funcB()
   funcC()
   funcB()
   funcC()
   print "end"

funcA()
</snippet></ROW><ROW><id>8934902</id><snippet>funcA
c 0
funcB 3
funcC 5
funcB 8
funcC 5
end
</snippet></ROW><ROW><id>8935114</id><snippet>update_idletasks()</snippet></ROW><ROW><id>8935169</id><snippet>name</snippet></ROW><ROW><id>8935169</id><snippet>lookup</snippet></ROW><ROW><id>8935169</id><snippet>name('Ż') == 'LATIN CAPITAL LETTER Z WITH DOT ABOVE'
name('ł') == 'LATIN SMALL LETTER L WITH STROKE'
lookup('LATIN CAPITAL LETTER Z') == 'Z'
lookup('LATIN SMALL LETTER L') == 'l'
</snippet></ROW><ROW><id>8935169</id><snippet>import unicodedata

def normalize_char(c):
    try:
        cname = unicodedata.name(c)
        cname = cname[:cname.index(' WITH')]
        return unicodedata.lookup(cname)
    except (ValueError, KeyError):
        return c

normalize_char('ę') == 'e'
normalize_char('Ę') == 'E'
normalize_char('ś') == 's'
</snippet></ROW><ROW><id>8935169</id><snippet>lookup</snippet></ROW><ROW><id>8935169</id><snippet>ValueError</snippet></ROW><ROW><id>8935169</id><snippet>KeyError</snippet></ROW><ROW><id>8935169</id><snippet>def normalize(s):
    return ''.join(normalize_char(c) for c in s)

normalize('Móżdżek') == 'Mozdzek'
</snippet></ROW><ROW><id>8935169</id><snippet>unicodedata</snippet></ROW><ROW><id>8935169</id><snippet>normalize</snippet></ROW><ROW><id>8935169</id><snippet>'NFKD'</snippet></ROW><ROW><id>8935169</id><snippet>letters={'ł':'l', 'ą':'a', 'ń':'n', 'ć':'c', 'ó':'o', 'ę':'e', 'ś':'s', 'ź':'z', 'ż':'z'}
trans=str.maketrans(letters)
result=text.translate(trans)
</snippet></ROW><ROW><id>8935172</id><snippet>use = input("test input here: ")

for i in use:
    print(ord(i))
</snippet></ROW><ROW><id>8935172</id><snippet>\r</snippet></ROW><ROW><id>8935172</id><snippet>\r\n</snippet></ROW><ROW><id>8935172</id><snippet>\n</snippet></ROW><ROW><id>8935172</id><snippet>use = input("test input: ").strip("\r")
</snippet></ROW><ROW><id>8935172</id><snippet>strip()</snippet></ROW><ROW><id>8935172</id><snippet>ord()</snippet></ROW><ROW><id>8935172</id><snippet>print()</snippet></ROW><ROW><id>8935172</id><snippet>input()</snippet></ROW><ROW><id>8935239</id><snippet>msg</snippet></ROW><ROW><id>8935239</id><snippet>my_price_handler</snippet></ROW><ROW><id>8935239</id><snippet>TickPrice</snippet></ROW><ROW><id>8935239</id><snippet>print(type(msg))
</snippet></ROW><ROW><id>8935239</id><snippet>split</snippet></ROW><ROW><id>8935239</id><snippet>msg</snippet></ROW><ROW><id>8935331</id><snippet>email_token_expiry</snippet></ROW><ROW><id>8935331</id><snippet>email_token_expiry = models.DateTimeField(null=True, blank=True)
</snippet></ROW><ROW><id>8935331</id><snippet>email_token_expiry</snippet></ROW><ROW><id>8935331</id><snippet>user.email_token_expiry = None
</snippet></ROW><ROW><id>8935331</id><snippet>user.email_token_expiry = ''
</snippet></ROW><ROW><id>8935432</id><snippet>from boto.s3.connection import S3Connection

conn = S3Connection(AWS_ACCESS_KEY_ID,
                    AWS_SECRET_ACCESS_KEY, is_secure=False)

# The generated temp_url remains valid for 60 seconds in this case
temp_url = conn.generate_url(60, 'GET', bucket=bucket_name, 
                             key=file_name, force_http=True)
</snippet></ROW><ROW><id>8935617</id><snippet>spawnShip</snippet></ROW><ROW><id>8935617</id><snippet>testSpawnShip</snippet></ROW><ROW><id>8935745</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

x = np.arange(100).reshape(10,10)
y = np.zeros((10,10))

# Make a region in y that we're interested in...
y[4:6, 1:8] = 1

y = np.ma.masked_where(y == 0, y)

plt.imshow(x, cmap=mpl.cm.bone)
plt.imshow(y, cmap=mpl.cm.jet_r, interpolation='nearest')

plt.show()
</snippet></ROW><ROW><id>8935749</id><snippet>&gt;&gt;&gt; public_props = (name for name in dir(object) if not name.startswith('_'))
&gt;&gt;&gt; for name in public_props:
    print name
</snippet></ROW><ROW><id>8935749</id><snippet>dir()</snippet></ROW><ROW><id>8935749</id><snippet>dir()</snippet></ROW><ROW><id>8935749</id><snippet>__dir__()</snippet></ROW><ROW><id>8935749</id><snippet>dir(something)</snippet></ROW><ROW><id>8935749</id><snippet>something</snippet></ROW><ROW><id>8935817</id><snippet>function setBit($value, $position, $on = true) {
    if($on) {
        return $value | (1 &lt;&lt; $position);
    }
    return $value &amp; ~(1 &lt;&lt; $position);
}
</snippet></ROW><ROW><id>8935952</id><snippet>def index(request):
    latest_player_list = Player.objects.all().order_by('id')[:20]
    total_amount_won = Stakes.objects.filter(player__user_name).aggregate(Sum('amount_won'))
    return render_to_response('stakeme/index.html', {
        'latest_player_list':     latest_player_list, 
        'total_amount_won': total_amount_won
     })
</snippet></ROW><ROW><id>8935963</id><snippet>property</snippet></ROW><ROW><id>8935963</id><snippet>array</snippet></ROW><ROW><id>8935963</id><snippet>__setitem__</snippet></ROW><ROW><id>8935963</id><snippet>property</snippet></ROW><ROW><id>8935963</id><snippet>__getattribute__</snippet></ROW><ROW><id>8935963</id><snippet>__setattr__</snippet></ROW><ROW><id>8935963</id><snippet>class Person(object):
    def __init__(self, name):
        self.name = name
        self._friends = {}
    def __getattribute__(self, attr):
        if not attr.startswith("friend") or not attr[len("friend"):].isdigit():
            return super(Person, self).__getattribute__(attr)
        index = int(attr[len("friend"):])
        if index in self._friends:
            return self._friends[index]
        return None
    def __setattr__(self, attr, value):
        if not attr.startswith("friend") or not attr[len("friend"):].isdigit():
            return super(Person, self).__setattr__(attr, value)
        index = int(attr[len("friend"):])
        if index in self._friends:
            raise ValueError("%s already defined for %s " % (attr, self.name))
        if not isinstance(value, Person):
            raise TypeError("Friends have to be persons")
        self._friends[index] = value
</snippet></ROW><ROW><id>8935963</id><snippet>&gt;&gt;&gt; p = Person("Nick")
&gt;&gt;&gt; p2 = Person("Paul")
&gt;&gt;&gt; p.friend1 = p2
&gt;&gt;&gt; p.friend1 = p2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 17, in __setattr__
ValueError: friend1 already defined for Nick 
&gt;&gt;&gt; p.friend1.name
'Paul'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8936021</id><snippet>#foo module:

class Foo(object):
    sanitize = "value 1"
    @classmethod
    def parse(cls):
        print cls.sanitize

#foo2
from foo import Foo
class Foo2(Foo):
    sanitize = "value 2"

# code:
from foo import Foo
from foo2 import Foo2

Foo.parse()
Foo2.parse()
</snippet></ROW><ROW><id>8936021</id><snippet>import foo as _foo

SANITIZE = "value2"

class _FooWrapper(object):
    def __getattribute__(self, attr):
        self.change_vars()
        original_function = getattr(_foo, attr)
        if callable(original):
            def wrapper(func):
                def new_func(*args, **kw):
                    res = func(*args, **kw)
                    self.restore_vars()
                    return res
                return new_func
            return wrapper(original)
        return original

    def change_vars(self):
        self.original_sanitize = _foo.SANITIZE
        _foo.SANITIZE = SANITIZE
    def restore_vars(self):
        __foo.SANITIZE = self.original_sanitize

foo = _FooWrapper()
</snippet></ROW><ROW><id>8936021</id><snippet>from types import ModuleType, FunctionType

import foo as _foo

SANITIZE = "value 2"

def rebuild_function(func, glob):
    """Rebinds the globals in the given functions to globals in 
    this module  by default"""
    new_func = FunctionType(func.func_code,
                            glob,
                            func.func_name,
                            func.func_defaults,
                            func.func_closure)
    return new_func

def rebuild_class(cls, glob):
    metatype = type(cls)
    dct = cls.__dict__.copy()
    for key, value in dct.items():
        if isinstance(value, FunctionType):
            dct[key] = rebuild_function(value, glob)
    return metatype(cls.__name__, cls.__bases__, dct)

def rebuild_module(mod,glob):
    new_module = ModuleType(mod.__name__)
    for key, value in mod.__dict__.items():
        if isinstance(value, FunctionType):
            value = rebuild_function(value, glob)
        elif isinstance(value, type):
            value = rebuild_class(value, glob)
        setattr(new_module, key, value)
    return new_module

foo = rebuild_module(_foo, globals())

__all__ = ["foo", "SANITIZE"]
</snippet></ROW><ROW><id>8936021</id><snippet>#module "foo"
SANITIZE='foo'
def parse():
    print SANITIZE

class Parser(object):
    def __init__(self):
        print SANITIZE * 2
</snippet></ROW><ROW><id>8936021</id><snippet>#test script
import foo
import foo2
foo2.foo.parse() #i want this to print 'foo2'
foo2.foo.Parser()
foo.parse() #i want this to print 'foo'
foo.Parser()
</snippet></ROW><ROW><id>8936021</id><snippet>[gwidion@powerpuff tmp16]$ python test_foo.py 
foofoo
value 2
value 2value 2
foo
foofoo
[gwidion@powerpuff tmp16]$ 
</snippet></ROW><ROW><id>8936145</id><snippet>&lt;?php
$arr = array('test' =&gt; 1, 'ing' =&gt; 2, 'curveball' =&gt; array(1, 2, 3=&gt;4) );
echo json_encode($arr);
?&gt;

# elsewhere, in Python...
import simplejson
print simplejson.loads('{"test":1,"ing":2,"curveball":{"0":1,"1":2,"3":4}}')
</snippet></ROW><ROW><id>8936193</id><snippet>ValueError: invalid literal for int() with base 10: '1,019'
</snippet></ROW><ROW><id>8936235</id><snippet>&gt;&gt;&gt; soup.body.findAll(text='Python')
[]
</snippet></ROW><ROW><id>8936235</id><snippet>&gt;&gt;&gt; soup.body.findAll(text='Python Jobs') 
[u'Python Jobs']
</snippet></ROW><ROW><id>8936235</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; soup.body.findAll(text=re.compile('^Python$'))
[]
</snippet></ROW><ROW><id>8936243</id><snippet>index</snippet></ROW><ROW><id>8936243</id><snippet>linestart</snippet></ROW><ROW><id>8936243</id><snippet>lineend</snippet></ROW><ROW><id>8936243</id><snippet>+1c</snippet></ROW><ROW><id>8936243</id><snippet>+1l</snippet></ROW><ROW><id>8936243</id><snippet>wordstart</snippet></ROW><ROW><id>8936243</id><snippet>wordend</snippet></ROW><ROW><id>8936243</id><snippet>index("insert lineend +1c")</snippet></ROW><ROW><id>8936243</id><snippet>start = self.TextWidg("insert linestart")
end = self.TextWidg("insert lineend")
</snippet></ROW><ROW><id>8936380</id><snippet>from dis import dis

def f1():
 x = []
 for i in range(10000):
  x.append([])
  for j in range(10000):
   x[i].append(0)
 return x

dis(f1)

  2           0 BUILD_LIST               0
              3 STORE_FAST               0 (x)

  3           6 SETUP_LOOP              73 (to 82)
              9 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               1 (10000)
             15 CALL_FUNCTION            1
             18 GET_ITER
        &gt;&gt;   19 FOR_ITER                59 (to 81)
             22 STORE_FAST               1 (i)

  4          25 LOAD_FAST                0 (x)
             28 LOAD_ATTR                1 (append)
             31 BUILD_LIST               0
             34 CALL_FUNCTION            1
             37 POP_TOP

  5          38 SETUP_LOOP              37 (to 78)
             41 LOAD_GLOBAL              0 (range)
             44 LOAD_CONST               1 (10000)
             47 CALL_FUNCTION            1
             50 GET_ITER
        &gt;&gt;   51 FOR_ITER                23 (to 77)
             54 STORE_FAST               2 (j)

  6          57 LOAD_FAST                0 (x)
             60 LOAD_FAST                1 (i)
             63 BINARY_SUBSCR
             64 LOAD_ATTR                1 (append)
             67 LOAD_CONST               2 (0)
             70 CALL_FUNCTION            1
             73 POP_TOP
             74 JUMP_ABSOLUTE           51
        &gt;&gt;   77 POP_BLOCK
        &gt;&gt;   78 JUMP_ABSOLUTE           19
        &gt;&gt;   81 POP_BLOCK

  7     &gt;&gt;   82 LOAD_FAST                0 (x)
             85 RETURN_VALUE
</snippet></ROW><ROW><id>8936380</id><snippet>def f2():
 x = list()
 for i in range(10000):
  x.append([0]*10000)
 return x

dis(f2)

  2           0 LOAD_GLOBAL              0 (list)
              3 CALL_FUNCTION            0
              6 STORE_FAST               0 (x)

  3           9 SETUP_LOOP              40 (to 52)
             12 LOAD_GLOBAL              1 (range)
             15 LOAD_CONST               1 (10000)
             18 CALL_FUNCTION            1
             21 GET_ITER
        &gt;&gt;   22 FOR_ITER                26 (to 51)
             25 STORE_FAST               1 (i)

  4          28 LOAD_FAST                0 (x)
             31 LOAD_ATTR                2 (append)
             34 LOAD_CONST               2 (0)
             37 BUILD_LIST               1
             40 LOAD_CONST               1 (10000)
             43 BINARY_MULTIPLY
             44 CALL_FUNCTION            1
             47 POP_TOP
             48 JUMP_ABSOLUTE           22
        &gt;&gt;   51 POP_BLOCK

  5     &gt;&gt;   52 LOAD_FAST                0 (x)
             55 RETURN_VALUE
</snippet></ROW><ROW><id>8936431</id><snippet>players = Player.objects.annotate(total_amount_won=Sum('stakes__amount_won'))

players[0].total_amount_won # This will return the 'total amount won' for the 0th player
</snippet></ROW><ROW><id>8936431</id><snippet>players</snippet></ROW><ROW><id>8936431</id><snippet>def index(request):
    players = Player.objects.annotate(total_amount_won=Sum('stakes__amount_won'))
    return render_to_response('stakeme/index.html', {'players': players,})
</snippet></ROW><ROW><id>8936431</id><snippet>&lt;h1&gt; Players &lt;/h1&gt;
{% if players %}
&lt;ul&gt;
{% for player in players %}
&lt;li&gt;
    &lt;a href="/stakeme/{{ player.id }}/"&gt;{{ player.user_name }} &lt;/a&gt;&lt;br&gt;Total Won: {{ player.total_amount_won }}
&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;    
&lt;br /&gt;
{% else %}
&lt;p&gt;No players are available.&lt;/p&gt;
{% endif %}
&lt;h3&gt;&lt;a href="/stakeme/new/"&gt;New Player&lt;/a&gt;&lt;/h3&gt;
</snippet></ROW><ROW><id>8936702</id><snippet>try:
    userinput = raw_input(prompt)
    if len(userinput ) &gt; 8:
        raise ValueError()
    userinput = int(userinput)
except ValueError:
...
</snippet></ROW><ROW><id>8936927</id><snippet>'#S'</snippet></ROW><ROW><id>8936927</id><snippet>'#'</snippet></ROW><ROW><id>8936927</id><snippet>'##'</snippet></ROW><ROW><id>8936927</id><snippet>import re
import cPickle
from functools import partial
from cStringIO import StringIO

SENTINEL = '#S'

# when scanning look for #S, but NOT ##S
sentinel_pattern = '(?&lt;!#)#S' # uses negative look-behind
sentinel_re = re.compile(sentinel_pattern)
find_sentinel = sentinel_re.search

# when writing replace single # with double ##
write_pattern = '#'
write_re = re.compile(write_pattern)
fix_write = partial(write_re.sub, '##')

# when reading, replace double ## with single #
read_pattern = '##'
read_re = re.compile(read_pattern)
fix_read = partial(read_re.sub, '#') 

class RecordWriter(object):
    def __init__(self, stream):
        self._stream = stream
        self._write_buffer = None

    def __enter__(self):
        self._write_buffer = StringIO()
        return self

    def __exit__(self, et, ex, tb):
        if self._write_buffer.tell():
            self._stream.write(SENTINEL) # start
            cPickle.dump(self._write_buffer.tell(), self._stream, cPickle.HIGHEST_PROTOCOL) # byte length of user's original data
            self._stream.write(fix_write(self._write_buffer.getvalue()))
            self._write_buffer = None
        return False

    def write(self, data):
        if not self._write_buffer:
            raise ValueError("Must use StreamWriter as a context manager")
        self._write_buffer.write(data)

class BadBlock(Exception): pass

def verify_length(block):
    fobj = StringIO(block)
    try:
        stated_length = cPickle.load(fobj)
    except (ValueError, IndexError, cPickle.UnpicklingError):
        raise BadBlock
    data = fobj.read()
    if len(data) != stated_length:
        raise BadBlock
    return data

def RecordReader(stream):
    ' Read one record '
    accum = StringIO()
    seen_sentinel = False
    data = ''
    while True:
        m = find_sentinel(data)
        if not m:
            if seen_sentinel:
                accum.write(data)
            data = stream.read(80)
            if not data:
                if accum.tell():
                    try: yield verify_length(fix_read(accum.getvalue()))
                    except BadBlock: pass
                return
        else:
            if seen_sentinel:
                accum.write(data[:m.start()])
                try: yield verify_length(fix_read(accum.getvalue()))
                except BadBlock: pass
                accum = StringIO()
            else:
                seen_sentinel = True
            data = data[m.end():] # toss

if __name__ == '__main__':
    import random

    stream = StringIO()
    data = [str(random.random()) for _ in xrange(3)]
    # test with a string containing sentinel and almost-sentinel
    data.append('abc12#jeoht38#SoSooihetS#')
    count = len(data)
    for i in data:
        with RecordWriter(stream) as r:
            r.write(i)

    size = stream.tell()
    start_pos = random.random() * size
    stream.seek(start_pos, os.SEEK_SET)
    read_data = [s for s in RecordReader(stream)]
    print 'Original data: ', data
    print 'After seeking to %d, RecordReader returned: %s' % (start_pos, read_data)
</snippet></ROW><ROW><id>8937403</id><snippet>test</snippet></ROW><ROW><id>8937403</id><snippet>ctypes</snippet></ROW><ROW><id>8937403</id><snippet>_fields_</snippet></ROW><ROW><id>8937403</id><snippet>class test(Structure):
    pass
test._fields_ = [
    ('just_a_test', POINTER(test)),
    ('just_a_char', c_char_p),
]
</snippet></ROW><ROW><id>8937565</id><snippet>   from qgis.core import *
</snippet></ROW><ROW><id>8937854</id><snippet>var form = $("#emailaccount_form");
var domain = $("#id_domain");
</snippet></ROW><ROW><id>8937925</id><snippet>.ravel()</snippet></ROW><ROW><id>8937925</id><snippet>.reshape()</snippet></ROW><ROW><id>8937925</id><snippet>A.shape</snippet></ROW><ROW><id>8937925</id><snippet>np.unravel_index</snippet></ROW><ROW><id>8937925</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; A = np.ones((5,5), dtype=int)
&gt;&gt;&gt; B = [1, 3, 7, 23]
&gt;&gt;&gt; A
array([[1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1]])
&gt;&gt;&gt; A_ = A.ravel()
&gt;&gt;&gt; A_[B] = 0
&gt;&gt;&gt; A_.reshape(A.shape)
array([[1, 0, 1, 0, 1],
       [1, 1, 0, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1]])
</snippet></ROW><ROW><id>8937925</id><snippet>&gt;&gt;&gt; b_row, b_col = np.vstack([np.unravel_index(b, A.shape) for b in B]).T
&gt;&gt;&gt; A[b_row, b_col] = 0
&gt;&gt;&gt; A
array([[1, 0, 1, 0, 1],
       [1, 1, 0, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1]])
</snippet></ROW><ROW><id>8937925</id><snippet>numpy.put</snippet></ROW><ROW><id>8937925</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; A = np.ones((5,5), dtype=int)
&gt;&gt;&gt; B = [1, 3, 7, 23]
&gt;&gt;&gt; A.put(B, [0]*len(B))
&gt;&gt;&gt; A
array([[1, 0, 1, 0, 1],
       [1, 1, 0, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1]])
</snippet></ROW><ROW><id>8937932</id><snippet>class tagTest(ctypes.Structure):
    _fields_ = [
        ('item1', c_char*8), ('_item1',c_char),
        ('item2', c_char*1), ('_item2',c_char)
    ]
</snippet></ROW><ROW><id>8937932</id><snippet>utestblock=tagTest()
utestblock.item1=str("TESTSTRI")
utestblock.item2=str(1)

loadeddll.CSMessage(hwnd, "String", "Call", ctypes.byref(utestblock),
                    ctypes.sizeof(utestblock))
</snippet></ROW><ROW><id>8937932</id><snippet>"TESTSTRING"</snippet></ROW><ROW><id>8937932</id><snippet>csMessageParams=((1, "hWnd", 0), (1, "string1", ""), (1, "string2", ""),
                 (1, "ltagTest", ""), (1, "structlen", 0))
</snippet></ROW><ROW><id>8938033</id><snippet>cell = rows[0].find('td')</snippet></ROW><ROW><id>8938033</id><snippet>cell.contents</snippet></ROW><ROW><id>8938033</id><snippet>join</snippet></ROW><ROW><id>8938033</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>8938033</id><snippet>import re
s = re.sub('&lt;br\s*?&gt;', ' ', rows[0].text)
</snippet></ROW><ROW><id>8938033</id><snippet>s = re.sub('\s+', ' ', s)
</snippet></ROW><ROW><id>8938033</id><snippet>&gt;&gt;&gt; print s
&lt;tr&gt; &lt;td align="left"&gt;Foo Bar &lt;/td&gt; &lt;/tr&gt;
</snippet></ROW><ROW><id>8939010</id><snippet>gca().get_lines()[n].get_xydata()
</snippet></ROW><ROW><id>8939010</id><snippet>line = gca().get_lines()[n]
xd = line.get_xdata()
yd = line.get_ydata()
</snippet></ROW><ROW><id>8939065</id><snippet>from django.contrib.admin.widgets import AdminDateWidget

class MyForm(ModelForm):

    class Meta:
        widgets = {
            'date': AdminDateWidget(),
        }
</snippet></ROW><ROW><id>8939227</id><snippet>def description_page(self, response):
    l = XPathItemLoader(item=TvspiderItem(), response=response)
    l.add_xpath('title', '//div[@class="m show_head"]/h1/text()')
    1.add_xpath('tagLine', '//p[@class="tagline"]/text()')
    1.add_xpath('description', '//div[@class="description"]/span')
    1.add_xpath('rating', '//div[@class="score"]/text()')
    1.add_xpath('imageSrc', '//div[@class="image_bg"]/img/@src')
    return l.load_item()
</snippet></ROW><ROW><id>8939227</id><snippet>1</snippet></ROW><ROW><id>8939227</id><snippet>l</snippet></ROW><ROW><id>8939258</id><snippet>qgis_core.dll</snippet></ROW><ROW><id>8939258</id><snippet>set PYTHONHOME=C:\Python25\Lib\site-packages;C:\PATH\TO\QGIS\PYTHONDLL;
</snippet></ROW><ROW><id>8940753</id><snippet>connect</snippet></ROW><ROW><id>8940753</id><snippet>db</snippet></ROW><ROW><id>8940753</id><snippet>db = _mysql.connect('localhost', 'user', 'passwd')
</snippet></ROW><ROW><id>8940753</id><snippet>SELECT u.*, i.* FROM db1.users u LEFT JOIN db2.items i ON u.id = i.user_id
</snippet></ROW><ROW><id>8940984</id><snippet>from itertools import cycle, islice, dropwhile

L = [1, 2, 3, 4]

cycled = cycle(L)  # cycle thorugh the list 'L'
skipped = dropwhile(lambda x: x != 4, cycled)  # drop the values until x==4
sliced = islice(skipped, None, 10)  # take the first 10 values

result = list(sliced)  # create a list from iterator 'it'
print(result)
</snippet></ROW><ROW><id>8940984</id><snippet>[4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
</snippet></ROW><ROW><id>8941134</id><snippet>z_script</snippet></ROW><ROW><id>8941134</id><snippet>find_packages</snippet></ROW><ROW><id>8941134</id><snippet>z_script</snippet></ROW><ROW><id>8941134</id><snippet>py_modules</snippet></ROW><ROW><id>8941134</id><snippet>...
packages = find_packages(),
...
</snippet></ROW><ROW><id>8941134</id><snippet>...
py_modules = ['z_script'],
...
</snippet></ROW><ROW><id>8941175</id><snippet>from math import sqrt

def stat(lst):
    """Calculate mean and std deviation from the input list."""
    n = float(len(lst))
    mean = sum(lst) / n
    stdev = sqrt((sum(x*x for x in lst) / n) - (mean * mean)) 
    return mean, stdev

def parse(lst, n):
    cluster = []
    for i in lst:
        if len(cluster) &lt;= 1:    # the first two values are going directly in
            cluster.append(i)
            continue

        mean,stdev = stat(cluster)
        if abs(mean - i) &gt; n * stdev:    # check the "distance"
            yield cluster
            cluster[:] = []    # reset cluster to the empty list

        cluster.append(i)
    yield cluster           # yield the last cluster
</snippet></ROW><ROW><id>8941175</id><snippet>5 &lt; n &lt; 9</snippet></ROW><ROW><id>8941175</id><snippet>&gt;&gt;&gt; array = [1, 2, 3, 60, 70, 80, 100, 220, 230, 250]
&gt;&gt;&gt; for cluster in parse(array, 7):
...     print(cluster)
[1, 2, 3]
[60, 70, 80, 100]
[220, 230, 250]
</snippet></ROW><ROW><id>8941865</id><snippet>wx.Panel</snippet></ROW><ROW><id>8941865</id><snippet>mymediactrl</snippet></ROW><ROW><id>8941865</id><snippet>mypanel</snippet></ROW><ROW><id>8941865</id><snippet>mymediactrl=wx.Panel(...)</snippet></ROW><ROW><id>8941865</id><snippet>mymediactrl = MediaControl(...)</snippet></ROW><ROW><id>8942115</id><snippet>extra</snippet></ROW><ROW><id>8942115</id><snippet>MyTable.objects.extra(select={'int_name': 'CAST(t.name AS INTEGER)'},
                      order_by=['int_name'])
</snippet></ROW><ROW><id>8942480</id><snippet>if element.startswith(self.get().lower()):
</snippet></ROW><ROW><id>8942480</id><snippet>if element.lower().startswith(self.get().lower()):
</snippet></ROW><ROW><id>8942765</id><snippet>django.models</snippet></ROW><ROW><id>8942765</id><snippet>0002</snippet></ROW><ROW><id>8942765</id><snippet>orm</snippet></ROW><ROW><id>8942765</id><snippet>orders = orm.Order.objects.all()
</snippet></ROW><ROW><id>8942765</id><snippet>Order = orm.Order
</snippet></ROW><ROW><id>8943660</id><snippet>x += y
</snippet></ROW><ROW><id>8943660</id><snippet>x = x.__iadd__(y)
</snippet></ROW><ROW><id>8943660</id><snippet>x</snippet></ROW><ROW><id>8943660</id><snippet>__iadd__()</snippet></ROW><ROW><id>8943660</id><snippet>self</snippet></ROW><ROW><id>8943660</id><snippet>__iadd__()</snippet></ROW><ROW><id>8943660</id><snippet>__add__()</snippet></ROW><ROW><id>8943660</id><snippet>__radd__()</snippet></ROW><ROW><id>8943660</id><snippet>x += y</snippet></ROW><ROW><id>8943660</id><snippet>x</snippet></ROW><ROW><id>8943660</id><snippet>x += y</snippet></ROW><ROW><id>8943660</id><snippet>x</snippet></ROW><ROW><id>8943660</id><snippet>x</snippet></ROW><ROW><id>8943660</id><snippet>t = ([], 1)
t[0] += [1]
</snippet></ROW><ROW><id>8943660</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
</snippet></ROW><ROW><id>8943660</id><snippet>list.__iadd__()</snippet></ROW><ROW><id>8943660</id><snippet>t[0] = &lt;list object&gt;</snippet></ROW><ROW><id>8943736</id><snippet>fork()/exec()</snippet></ROW><ROW><id>8943998</id><snippet>python /usr/local/www/myapp/myapp.wsgi
</snippet></ROW><ROW><id>8943998</id><snippet>~/.bashrc</snippet></ROW><ROW><id>8943998</id><snippet># to wipe-out extra env
env -i bash
# try again
python /usr/local/www/myapp/myapp.wsgi
</snippet></ROW><ROW><id>8943998</id><snippet>myapp.wsgi</snippet></ROW><ROW><id>8943998</id><snippet>import os, sys
EXTRA_DIR = os.path.realpath(os.path.join(os.path.dirname(__file__), '..', '..'))
if EXTRA_DIR not in sys.path:
    sys.path.append(EXTRA_DIR)
</snippet></ROW><ROW><id>8944547</id><snippet>__init__</snippet></ROW><ROW><id>8944547</id><snippet>forms.ModelChoiceField</snippet></ROW><ROW><id>8944547</id><snippet>class MyForm(ModelForm):
    field1 = forms.ModelChoiceField(queryset=ReallyLargeTableModel.objects.all())
</snippet></ROW><ROW><id>8944550</id><snippet>class AutoSubclass(type):
    def __new__(metacls, name, bases, dct):
        new_bases = set()
        for base in bases:
            if hasattr(base, "_depends"):
                for dependence in base._depends:
                    if not dependence in bases:
                        new_bases.add(dependence)
        bases = bases + tuple(new_bases)
        return type.__new__(metacls, name, bases, dct)



__metaclass__ = AutoSubclass

def depends(*args):
    def decorator(cls):
        cls._depends = args
        return cls
    return decorator


class AtomicComponent:
    pass

@depends(AtomicComponent)  # &lt;- something like this?
class UnAtomicComponent:
    pass

class UserClass(UnAtomicComponent): #automatically includes AtomicComponent
    pass

class UserClass2(AtomicComponent, UnAtomicComponent): #also works without problem
    pass
</snippet></ROW><ROW><id>8944550</id><snippet>__metaclass__</snippet></ROW><ROW><id>8944550</id><snippet>__metaclass__</snippet></ROW><ROW><id>8944550</id><snippet>__metclass__</snippet></ROW><ROW><id>8944550</id><snippet>&gt;&gt;&gt; class A(object): pass
... 
&gt;&gt;&gt; class B(A, object): pass
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; class C(B): pass
... 
&gt;&gt;&gt; class D(B,A): pass
... 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8944880</id><snippet>from mocker import Mocker
mocker = Mocker()
commandGen = cmdgen.CommandGenerator()
commandGenMock = mocker.patch(commandGen)
commandGenMock.doSomething()
mocker.replay()
</snippet></ROW><ROW><id>8944886</id><snippet>class JobList(VirtualList):
  def __init__(self, parent, colref = 'job_columns'):
    VirtualList.__init__(self, parent, colref)

  def _bind(self):
    VirtualList._bind(self)
    self.Bind(wx.EVT_LIST_BEGIN_DRAG, self._startDrag)

  def _startDrag(self, evt):
    # Create a data object to pass around.
    data = wx.CustomDataObject('JobIdList')
    data.SetData(str([self.data[idx]['Id'] for idx in self.selected]))

    # Create the dropSource and begin the drag-and-drop.
    dropSource = wx.DropSource(self)
    dropSource.SetData(data)
    dropSource.DoDragDrop(flags = wx.Drag_DefaultMove)
</snippet></ROW><ROW><id>8944886</id><snippet>class ListDrop(wx.PyDropTarget):
  """
    Utility class - Required to support List Drag &amp; Drop.
    Using example code from http://wiki.wxpython.org/ListControls.
  """
  def __init__(self, setFn, dataType, acceptFiles = False):
    wx.PyDropTarget.__init__(self)

    self.setFn = setFn

    # Data type to accept.
    self.data = wx.CustomDataObject(dataType)

    self.comp = wx.DataObjectComposite()
    self.comp.Add(self.data)

    if acceptFiles:
      self.data2 = wx.FileDataObject()
      self.comp.Add(self.data2)

    self.SetDataObject(self.comp)

  def OnData(self, x, y, d):
    if self.GetData():
      if self.comp.GetReceivedFormat().GetType() == wx.DF_FILENAME:
        self.setFn(x, y, self.data2.GetFilenames())
      else:
        self.setFn(x, y, self.data.GetData())

    return d
</snippet></ROW><ROW><id>8944886</id><snippet>class QueueList(VirtualList):
  def __init__(self, parent, colref = 'queue_columns'):
    VirtualList.__init__(self, parent, colref)

    self.SetDropTarget(ListDrop(self.onJobDrop, 'JobIdList', True))

  def onJobDrop(self, x, y, data):
    idx, flags = self.HitTest((x, y)) #@UnusedVariable

    if idx == -1: # Not dropped on a list item in the target list.
      return 

    # Code here to handle incoming data.
</snippet></ROW><ROW><id>8945334</id><snippet>map(sum, zip(A, B))
</snippet></ROW><ROW><id>8945334</id><snippet>&gt;&gt;&gt; B = [1, 2, 3, 4]
&gt;&gt;&gt; C = [1, 2, 4, 8]
&gt;&gt;&gt; map(sum, zip(B, C))
[2, 4, 7, 12]
</snippet></ROW><ROW><id>8945702</id><snippet>read()</snippet></ROW><ROW><id>8945702</id><snippet>write</snippet></ROW><ROW><id>8945702</id><snippet>flush()</snippet></ROW><ROW><id>8945702</id><snippet>Flush()</snippet></ROW><ROW><id>8945702</id><snippet>truncate(0)</snippet></ROW><ROW><id>8945702</id><snippet>0</snippet></ROW><ROW><id>8945702</id><snippet>flush</snippet></ROW><ROW><id>8945702</id><snippet>truncate</snippet></ROW><ROW><id>8945702</id><snippet>flush</snippet></ROW><ROW><id>8945702</id><snippet>truncate</snippet></ROW><ROW><id>8945702</id><snippet>truncate</snippet></ROW><ROW><id>8945702</id><snippet>Python-3.2.2\Modules\_io\fileio.c:837</snippet></ROW><ROW><id>8945702</id><snippet>#ifdef HAVE_FTRUNCATE
static PyObject *
fileio_truncate(fileio *self, PyObject *args)
{
    PyObject *posobj = NULL; /* the new size wanted by the user */
#ifndef MS_WINDOWS
    Py_off_t pos;
#endif

...

#ifdef MS_WINDOWS
    /* MS _chsize doesn't work if newsize doesn't fit in 32 bits,
       so don't even try using it. */
    {
        PyObject *oldposobj, *tempposobj;
        HANDLE hFile;

////// THIS LINE //////////////////////////////////////////////////////////////
        /* we save the file pointer position */
        oldposobj = portable_lseek(fd, NULL, 1);
        if (oldposobj == NULL) {
            Py_DECREF(posobj);
            return NULL;
        }

        /* we then move to the truncation position */
        ...

        /* Truncate.  Note that this may grow the file! */
        ...

////// AND THIS LINE //////////////////////////////////////////////////////////
        /* we restore the file pointer position in any case */
        tempposobj = portable_lseek(fd, oldposobj, 0);
        Py_DECREF(oldposobj);
        if (tempposobj == NULL) {
            Py_DECREF(posobj);
            return NULL;
        }
        Py_DECREF(tempposobj);
    }
#else

...

#endif /* HAVE_FTRUNCATE */
</snippet></ROW><ROW><id>8945702</id><snippet>///// This Line /////</snippet></ROW><ROW><id>8945702</id><snippet>flush</snippet></ROW><ROW><id>8945702</id><snippet>fflush</snippet></ROW><ROW><id>8945702</id><snippet>Python-2.7.2\Objects\fileobject.c:812</snippet></ROW><ROW><id>8945702</id><snippet>truncate</snippet></ROW><ROW><id>8945702</id><snippet> /* Get current file position.  If the file happens to be open for
 * update and the last operation was an input operation, C doesn't
 * define what the later fflush() will do, but we promise truncate()
 * won't change the current position (and fflush() *does* change it
 * then at least on Windows).  The easiest thing is to capture
 * current pos now and seek back to it at the end.
 */
</snippet></ROW><ROW><id>8945818</id><snippet>Eclipse</snippet></ROW><ROW><id>8945818</id><snippet>PyDev</snippet></ROW><ROW><id>8945931</id><snippet>getClass1</snippet></ROW><ROW><id>8945931</id><snippet>getClass2</snippet></ROW><ROW><id>8945931</id><snippet>__metaclass__ = getClass1()</snippet></ROW><ROW><id>8945931</id><snippet>myMultiMeta</snippet></ROW><ROW><id>8945933</id><snippet>plt.scatter(range(len(y)), y, c=z, cmap=cm.hot)
</snippet></ROW><ROW><id>8945933</id><snippet>In [27]: z = [0.3,0.4,0.5,0.6,0.7,0.2,0.3,0.4,0.5,0.8,0.9]

In [28]: y = [3, 7, 5, 6, 4, 8, 3, 4, 5, 2, 9]

In [29]: plt.scatter(range(len(y)), y, s=60, c=z, cmap=cm.hot)
Out[29]: &lt;matplotlib.collections.PathCollection at 0x9ec8400&gt;
</snippet></ROW><ROW><id>8945933</id><snippet>&gt;&gt;&gt; from matplotlib import pyplot as plt
&gt;&gt;&gt; from matplotlib import cm
&gt;&gt;&gt; y = [3,7,5,6,4,8,3,4,5,2,9]
&gt;&gt;&gt; z = [0.3,0.4,0.5,0.6,0.7,0.2,0.3,0.4,0.5,0.8,0.9]
&gt;&gt;&gt; for x, (v, c) in enumerate(zip(y,z)):
...      plt.plot(x,v,marker='o', color=cm.hot(c))
...      
[&lt;matplotlib.lines.Line2D object at 0x0000000008C42518&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C426D8&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C42B38&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C452B0&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C45438&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C45898&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C45CF8&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C48198&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C485F8&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C48A58&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0000000008C4B1D0&gt;]
&gt;&gt;&gt; plt.show()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8945956</id><snippet>params_dict = query.params()
</snippet></ROW><ROW><id>8946153</id><snippet>if all(word in theTextContents.split() for word in myWords):
    ...
</snippet></ROW><ROW><id>8946153</id><snippet>all</snippet></ROW><ROW><id>8946321</id><snippet>mylist = map(int, raw_input('Enter the numbers: ').split(','))
</snippet></ROW><ROW><id>8946327</id><snippet>button-press-event</snippet></ROW><ROW><id>8946327</id><snippet>gdk</snippet></ROW><ROW><id>8946327</id><snippet>add_events</snippet></ROW><ROW><id>8946327</id><snippet>import gtk

def callback(window, event):
    assert event.type == gtk.gdk.BUTTON_PRESS
    print 'Clicked at x={0}, y={0}'.format(event.x, event.y)

window = gtk.Window()
window.add_events(gtk.gdk.BUTTON_PRESS_MASK)
window.connect('button-press-event', callback)
window.connect('destroy', lambda w: gtk.main_quit())
window.show_all()

gtk.main()
</snippet></ROW><ROW><id>8946403</id><snippet>history</snippet></ROW><ROW><id>8946403</id><snippet>_ip.system</snippet></ROW><ROW><id>8946403</id><snippet>def x(go):
    return _ip.system("ls -la {0}".format(go))
</snippet></ROW><ROW><id>8946403</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8946769</id><snippet>pop</snippet></ROW><ROW><id>8946769</id><snippet>next</snippet></ROW><ROW><id>8946952</id><snippet>l = []
for r in range(10):
    def foo(r = r):
        return r
    l.append(foo)

for f in l:
    print(f())
</snippet></ROW><ROW><id>8946952</id><snippet>0
1
2
3
4
5
6
7
8
9
</snippet></ROW><ROW><id>8946952</id><snippet>r</snippet></ROW><ROW><id>8946952</id><snippet>foo</snippet></ROW><ROW><id>8946952</id><snippet>foo</snippet></ROW><ROW><id>8946952</id><snippet>l = []
for r in range(10):
    def make_foo(r):
        def foo():
            return r
        return foo
    l.append(make_foo(r))

for f in l:
    print(f())
</snippet></ROW><ROW><id>8946952</id><snippet>r</snippet></ROW><ROW><id>8946952</id><snippet>make_foo</snippet></ROW><ROW><id>8946952</id><snippet>make_foo(r)</snippet></ROW><ROW><id>8946952</id><snippet>f()</snippet></ROW><ROW><id>8946952</id><snippet>r</snippet></ROW><ROW><id>8946952</id><snippet>r</snippet></ROW><ROW><id>8946952</id><snippet>foo</snippet></ROW><ROW><id>8946952</id><snippet>make_foo</snippet></ROW><ROW><id>8947288</id><snippet>cursor.execute</snippet></ROW><ROW><id>8947288</id><snippet>cursor.executemany</snippet></ROW><ROW><id>8947288</id><snippet>cursor = conn.cursor()   
user_args = []
perm_args = []

perms = '(read)(write)(view)(delete)(resume)(share)(slideshow)(rename)(makedir)(deletedir)'

with open(sys.argv[1], 'rt') as f:
    for id, row in enumerate(csv.reader(f), start = 24):
        username, password, path = row
        user_args.append((id, username, password, 'MainUsers'))
        perm_args.append((id, path, perms))

insert_users = '''
    INSERT IGNORE INTO `USERS`
    (`userid`, `username`, `password`, `server_group`)
    VALUES (%s, %s, %s, %s)
    '''

insert_vfs_permissions = '''
    INSERT IGNORE INTO `VFS_PERMISSIONS`
    (`userid`, `path`, `privs`)
    VALUES (%s, %s, %s)
    '''

cursor.executemany(insert_users,user_args)
cursor.executemany(insert_vfs_permissions,perm_args)
</snippet></ROW><ROW><id>8947288</id><snippet>INSERT IGNORE</snippet></ROW><ROW><id>8947288</id><snippet>INSERT IGNORE</snippet></ROW><ROW><id>8947288</id><snippet>IGNORE</snippet></ROW><ROW><id>8947288</id><snippet>cursor.executemany</snippet></ROW><ROW><id>8947288</id><snippet>INSERT IGNORE</snippet></ROW><ROW><id>8947288</id><snippet>cursor.executemany</snippet></ROW><ROW><id>8947288</id><snippet>INSERT ... ON DUPLICATE KEY UPDATE</snippet></ROW><ROW><id>8947288</id><snippet>ON DUPLICATE KEY</snippet></ROW><ROW><id>8947376</id><snippet>my_list = [('a1', 'b1', 'c1', 'd1', 'e1'), ('a2', 'b2', 'c2', 'd2', 'e2')]
keys = ('key1', 'key2', 'key3', 'key4', 'key5')
final = [dict(zip(keys, elems)) for elems in my_list]
</snippet></ROW><ROW><id>8947376</id><snippet>final</snippet></ROW><ROW><id>8947376</id><snippet>&gt;&gt;&gt; final
[{'key3': 'c1', 'key2': 'b1', 'key1': 'a1', 'key5': 'e1', 'key4': 'd1'},
{'key3': 'c2', 'key2': 'b2', 'key1': 'a2', 'key5': 'e2', 'key4': 'd2'}]
</snippet></ROW><ROW><id>8947376</id><snippet>&gt;&gt;&gt; final[0]['key1']
'a1'
</snippet></ROW><ROW><id>8947742</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8947742</id><snippet>import subprocess

cmd = ['/usr/bin/pyton', '/path/to/my/second/pythonscript.py']
subprocess.Popen(cmd)
</snippet></ROW><ROW><id>8947742</id><snippet>stdout</snippet></ROW><ROW><id>8947742</id><snippet>stderr</snippet></ROW><ROW><id>8947742</id><snippet>stdout=&lt;file_obj&gt;</snippet></ROW><ROW><id>8947742</id><snippet>Popen</snippet></ROW><ROW><id>8947780</id><snippet>  xxx
  x x
xxx xxx
x  y  x
xxx xxx
  x x
  xxx
</snippet></ROW><ROW><id>8947780</id><snippet>x</snippet></ROW><ROW><id>8947780</id><snippet>y</snippet></ROW><ROW><id>8947913</id><snippet>result.keys()</snippet></ROW><ROW><id>8947913</id><snippet>v.keys()</snippet></ROW><ROW><id>8947913</id><snippet>for</snippet></ROW><ROW><id>8947913</id><snippet>items()</snippet></ROW><ROW><id>8947913</id><snippet>for v in result:
    for column, value in v.items():
        print('{0}: {1}'.format(column, value))
</snippet></ROW><ROW><id>8948043</id><snippet>@patch('twilio.rest.resources.SmsMessages')
def test_send_msg_valid_args(self, MockClass):
    instance = MockClass.return_value
    instance.create.return_value = None
    to_number = '+15555555555'
    msg = 'Hello world'
    send_sms(to_number, msg)

    instance.create.assert_called_once_with(to=to_number, body=msg, from_=default_from_number)
</snippet></ROW><ROW><id>8948260</id><snippet>perms = []
items = [1, 2, 3]
random.shuffle(mylist)   # perhaps items is now [2, 1, 3]
perms.append(items)      # perms is now [[2, 1, 3]]
random.shuffle(mylist)   # perhaps items is now [1, 3, 2]
perms.append(items)      # now what is perms?
</snippet></ROW><ROW><id>8948260</id><snippet>perms</snippet></ROW><ROW><id>8948260</id><snippet>items</snippet></ROW><ROW><id>8948260</id><snippet>perms[0]</snippet></ROW><ROW><id>8948260</id><snippet>items</snippet></ROW><ROW><id>8948260</id><snippet>perms</snippet></ROW><ROW><id>8948260</id><snippet>perms.append(items[:])
</snippet></ROW><ROW><id>8948260</id><snippet>set</snippet></ROW><ROW><id>8948260</id><snippet>list</snippet></ROW><ROW><id>8948260</id><snippet>set</snippet></ROW><ROW><id>8948260</id><snippet>set</snippet></ROW><ROW><id>8948260</id><snippet>items = range(0, max)    # Python 3: items = list(range(0, max))
perms = set()
nump  = 10
while len(perms) &lt; nump:
    random.shuffle(items)
    perms.add(tuple(items)) 
</snippet></ROW><ROW><id>8948511</id><snippet>import urllib.request, json

response = urllib.request.urlopen('http://vimeo.com/api/v2/video/31161781.json')
content = response.read()
data = json.loads(content.decode('utf8'))
</snippet></ROW><ROW><id>8948511</id><snippet>import requests

data = requests.get('http://vimeo.com/api/v2/video/31161781.json').json()
</snippet></ROW><ROW><id>8948564</id><snippet>from django.db.models.signals import post_save
from yourapp.models import YourModel

def model_created(sender, **kwargs)
    the_instance = kwargs['instance']
    if kwargs['created']:
        do_some_stuff(the_instance)

post_save.connect(model_created, sender=YourModel)
</snippet></ROW><ROW><id>8948881</id><snippet>(oldcount, count)</snippet></ROW><ROW><id>8948881</id><snippet>anagramlist.append(inwords[oldcount:count])
</snippet></ROW><ROW><id>8948988</id><snippet>person.name = "Mike"
persom.age  = 25
person.sex  = "Male"
</snippet></ROW><ROW><id>8948988</id><snippet>person</snippet></ROW><ROW><id>8948988</id><snippet>persom</snippet></ROW><ROW><id>8948988</id><snippet>person</snippet></ROW><ROW><id>8948988</id><snippet>age</snippet></ROW><ROW><id>8948988</id><snippet>person.age</snippet></ROW><ROW><id>8948988</id><snippet>class sex:
    male   = "M"
    female = "F"

class person:
    name = "Mike"
    age  = 25
    sex  = sex.male
</snippet></ROW><ROW><id>8948988</id><snippet>person.name</snippet></ROW><ROW><id>8948988</id><snippet>sex</snippet></ROW><ROW><id>8948988</id><snippet>name</snippet></ROW><ROW><id>8948988</id><snippet>age</snippet></ROW><ROW><id>8948988</id><snippet>sex</snippet></ROW><ROW><id>8948988</id><snippet>class Person:
    def __init__(self, name, age=None, sex=None):
        self.name, self.age, self.sex = name, age, sex
</snippet></ROW><ROW><id>8948988</id><snippet>person = Person("Mike", 25, sex.male)
</snippet></ROW><ROW><id>8948988</id><snippet>person = Person("Mike", age=25, sex=sex.male)
</snippet></ROW><ROW><id>8949032</id><snippet>j = { name : "mongo" };
t = { x : 3 };
db.things.save(j);
db.things.save(t);
</snippet></ROW><ROW><id>8949032</id><snippet>SELECT * FROM things WHERE name like 'mon%'
</snippet></ROW><ROW><id>8949032</id><snippet>db.things.find({name:{$regex:'mon'}}).forEach(printjson);
</snippet></ROW><ROW><id>8949203</id><snippet>sorted</snippet></ROW><ROW><id>8949203</id><snippet>sorted(chain(posts_type1, posts_type2), 
       key=lambda x: x.created_date if isinstance(x, PostType1) 
                                    else x.publish_date)
</snippet></ROW><ROW><id>8949234</id><snippet>filter</snippet></ROW><ROW><id>8949234</id><snippet>queryset = Profile.objects.all()
strings = ['keith', 's', 'thompson']
for string in strings:
    queryset = queryset.filter(full_name__icontains=string)
</snippet></ROW><ROW><id>8949234</id><snippet>&amp;</snippet></ROW><ROW><id>8949234</id><snippet>Q</snippet></ROW><ROW><id>8949234</id><snippet>condition = Q(full_name__icontains=s[0])
for string in strings[1:]:
    condition &amp;= Q(full_name__icontains=string)
queryset = Profile.objects.filter(condition) 
</snippet></ROW><ROW><id>8949234</id><snippet>import operator
# ...
condition = reduce(operator.and_, [Q(full_name__icontains=s) for s in strings])
queryset = Profile.objects.filter(condition)
</snippet></ROW><ROW><id>8949265</id><snippet>None</snippet></ROW><ROW><id>8949299</id><snippet>RewriteEngine on
RewriteBase /

RewriteRule ^posts/(.+)/$ /cgi-bin/loadWebpage.py?thread=$1 [NC,L]
</snippet></ROW><ROW><id>8949524</id><snippet>getattr()</snippet></ROW><ROW><id>8949524</id><snippet>label = getattr(self, 'label%d' % i)
label.modify_font(self.__font_small)
</snippet></ROW><ROW><id>8949524</id><snippet>label</snippet></ROW><ROW><id>8949524</id><snippet>list</snippet></ROW><ROW><id>8949524</id><snippet>for index, label in enumerate(self.labels):
    if index == self.__actual_choice:
        label.modify_font(self.__font_big)
    else:
        label.modify_font(self.__font_small)
</snippet></ROW><ROW><id>8949674</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>8949704</id><snippet>Student</snippet></ROW><ROW><id>8949704</id><snippet>Teacher</snippet></ROW><ROW><id>8949704</id><snippet>user</snippet></ROW><ROW><id>8949704</id><snippet>new_user</snippet></ROW><ROW><id>8949704</id><snippet># ...
new_user.save()

if self.cleaned_data['teacher_or_student'] == 'teacher':
    teacher = Teacher(profile = new_user.get_profile(), user=new_user)
    teacher.save()
elif self.cleaned_data['teacher_or_student'] == 'student':
    student = Student(profile = new_user.get_profile(), user=new_user)
    student.save()
</snippet></ROW><ROW><id>8949851</id><snippet>{%for element in listDict%}
    {{ element.product }} - {{ element.price }}
{% endfor %}
</snippet></ROW><ROW><id>8949870</id><snippet>import sys
import tweepy

## OAuth keys go here.

auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_KEY, ACCESS_SECRET)
api = tweepy.API(auth)

printed_ids = []

def ask_bot():
    old_id = 0
    for tweet in api.mentions():
        if tweet.id not in printed_ids:
            print "@%s: %s" % (tweet.author.screen_name, tweet.text)
            printed_ids.append(tweet.id)
        else:
            pass      
</snippet></ROW><ROW><id>8949876</id><snippet>get</snippet></ROW><ROW><id>8949876</id><snippet>all</snippet></ROW><ROW><id>8949876</id><snippet>objects</snippet></ROW><ROW><id>8949876</id><snippet>all</snippet></ROW><ROW><id>8949876</id><snippet>Form.objects.all()</snippet></ROW><ROW><id>8949958</id><snippet>import random

def misspeller(word):
    characters = 'qwertyuioplkjhgfdsazxcvbnm,. '
    rand_word_position = random.randint(-1,len(word))
    rand_characters_position = random.randint(0,len(characters)-1)

    if rand_word_position == -1:
        misspelled_word = characters[rand_characters_position] + word 
    elif rand_word_position == len(word):
        misspelled_word = word + characters[rand_characters_position] 
    else:
        misspelled_word = list(word)
        misspelled_word[rand_word_position] = characters[rand_characters_position]
        misspelled_word = ''.join(misspelled_word)        
    return misspelled_word

s = 'Hello how are you today, [name]?'
misspelled_s = ''
misspelled_list = []
for item in s.split(' '):
    if '[name]' in item:
        misspelled_list.append(item)
    else:
        misspelled_list.append(misspeller(item))
misspelled_s = ' '.join(misspelled_list)
print misspelled_s
</snippet></ROW><ROW><id>8949958</id><snippet>misspelled_s</snippet></ROW><ROW><id>8949958</id><snippet>'Hellk howg ars youf poday, [name]?'
'Heylo how arer y,u todab, [name]?'
'Hrllo hfw  are zyou totay, [name]?'
</snippet></ROW><ROW><id>8949958</id><snippet>for item in s.split(' '):
    n = random.randint(0,1)
    if '[name]' in item:
        misspelled_list.append(item)
    elif n == 1:
        misspelled_list.append(misspeller(item))
    else:
        misspelled_list.append(item)
</snippet></ROW><ROW><id>8949958</id><snippet>n</snippet></ROW><ROW><id>8949958</id><snippet>n = random.randint(0,10)</snippet></ROW><ROW><id>8949960</id><snippet>fcntl.lockf(fd, fcntl.LOCK_EX | fcntl.LOCK_NB) 
</snippet></ROW><ROW><id>8949960</id><snippet>import fcntl
import time
fd = open('lock_file', 'w')
fcntl.lockf(fd, fcntl.LOCK_EX)
# optionally write pid to another file so you have an indicator
# of the currently running process
print 'Hello'
time.sleep(1)
</snippet></ROW><ROW><id>8950245</id><snippet>def separate(filename):
    all_integers = []
    all_strings = []
    with open(filename) as myfile:
        for line in myfile:
            for item in line.split(' '):
                try:
                    # Try converting the item to an integer
                    value = int(item, 10)
                    all_integers.append(value)
                except ValueError:
                    # if it fails, it's a string.
                    all_strings.append(item)
    return all_integers, all_strings
</snippet></ROW><ROW><id>8950245</id><snippet>100 20 the birds are flying
200 3 banana
hello 4
</snippet></ROW><ROW><id>8950245</id><snippet>&gt;&gt;&gt; myints, mystrings = separate(r'myfile.txt')
&gt;&gt;&gt; print myints
[100, 20, 200, 3, 4]
&gt;&gt;&gt; print mystrings
['the', 'birds', 'are', 'flying', 'banana', 'hello']
</snippet></ROW><ROW><id>8950536</id><snippet>while gtk.events_pending(): gtk.main_iteration()
</snippet></ROW><ROW><id>8950536</id><snippet>gtk.main_iteration()</snippet></ROW><ROW><id>8950594</id><snippet>class CrossTab(object):

    def __init__(
        self,
        missing=0, # what to return for an empty cell.
                   # Alternatives: '', 0.0, None, 'NULL'
        ):
        self.missing = missing
        self.col_key_set = set()
        self.cell_dict = {}
        self.headings_OK = False

    def add_item(self, row_key, col_key, value):
        self.col_key_set.add(col_key)
        try:
            self.cell_dict[row_key][col_key] += value
        except KeyError:
            try:
                self.cell_dict[row_key][col_key] = value
            except KeyError:
                self.cell_dict[row_key] = {col_key: value}

    def _process_headings(self):
        if self.headings_OK:
            return
        self.row_headings = list(sorted(self.cell_dict.keys()))
        self.col_headings = list(sorted(self.col_key_set))
        self.headings_OK = True

    def get_col_headings(self):
        self._process_headings()
        return self.col_headings

    def generate_row_info(self):
        self._process_headings()
        for row_key in self.row_headings:
            row_dict = self.cell_dict[row_key]
            row_vals = [
                row_dict.get(col_key, self.missing)
                for col_key in self.col_headings
                ]
            yield row_key, row_vals

if __name__ == "__main__":

    data = [["apples", 2, "New York"], 
      ["peaches", 6, "New York"],
      ["apples", 6, "New York"],
      ["peaches", 1, "Vermont"]]  

    ctab = CrossTab(missing='uh-oh')
    for s in data:
        ctab.add_item(row_key=s[2], col_key=s[0], value=s[1])
    print()
    print('Column headings:', ctab.get_col_headings())
    for row_heading, row_values in ctab.generate_row_info():
        print(repr(row_heading), row_values)
</snippet></ROW><ROW><id>8950594</id><snippet>Column headings: ['apples', 'peaches']
'New York' [8, 6]
'Vermont' ['uh-oh', 1]
</snippet></ROW><ROW><id>8950825</id><snippet>line = '20 30 i love you'.split()
a = int(line[0])
b = int(line[1])
word_list = line[2:]
</snippet></ROW><ROW><id>8950825</id><snippet>text = ''.join(word_list)
</snippet></ROW><ROW><id>8950886</id><snippet>from mock import Mock, patch

class MyClass(object):
    def __init__(self, a, b, c):
        pass

def method_to_test():
    m = MyClass(1, 'test', {'key' : 'value'})

@patch('__main__.MyClass')
def test_my_method(mock_class):
    method_to_test()
    mock_class.assert_called_with(1, 'test', {'key': 'value'})

test_my_method()
</snippet></ROW><ROW><id>8951035</id><snippet>for attr, value in info.items():
    setattr(me, attr, value)
</snippet></ROW><ROW><id>8951047</id><snippet>i = len(l) - 1
jIndex = (i - 1) % len(l)
kIndex = (i + 1) % len(l)

j = l[jIndex]
k = l[kIndex]
</snippet></ROW><ROW><id>8951047</id><snippet>k = l[(i + 1) % len(l)]
</snippet></ROW><ROW><id>8951066</id><snippet>identifier "=" expression</snippet></ROW><ROW><id>8951066</id><snippet>a</snippet></ROW><ROW><id>8951066</id><snippet>b</snippet></ROW><ROW><id>8951066</id><snippet>add_func(a=a, b=b)</snippet></ROW><ROW><id>8951066</id><snippet>a=</snippet></ROW><ROW><id>8951066</id><snippet>a</snippet></ROW><ROW><id>8951066</id><snippet>b</snippet></ROW><ROW><id>8951066</id><snippet>4</snippet></ROW><ROW><id>8951066</id><snippet>add_func(b, a)</snippet></ROW><ROW><id>8951066</id><snippet>b</snippet></ROW><ROW><id>8951066</id><snippet>a</snippet></ROW><ROW><id>8951066</id><snippet>add_func(b=b, a=a)</snippet></ROW><ROW><id>8951108</id><snippet>j = n - 1
for i in xrange(n):
    # do stuff
    # ...
    j = i
</snippet></ROW><ROW><id>8951290</id><snippet>lxml.html</snippet></ROW><ROW><id>8951290</id><snippet>parse</snippet></ROW><ROW><id>8951290</id><snippet>urllib</snippet></ROW><ROW><id>8951290</id><snippet>find</snippet></ROW><ROW><id>8951290</id><snippet>findall</snippet></ROW><ROW><id>8951290</id><snippet>xpath</snippet></ROW><ROW><id>8951290</id><snippet>find</snippet></ROW><ROW><id>8951290</id><snippet>invalid predicate</snippet></ROW><ROW><id>8951290</id><snippet>#!/usr/bin/env python

import lxml.html

url = "http://www.yellowpages.com.au/search/listings?clue=architects&amp;locationClue=New+South+Wales&amp;x=45&amp;y=12"
tree = lxml.html.parse(url)
listings = tree.xpath("//span[contains(@id,'listing-name-')]/text()")
print listings
</snippet></ROW><ROW><id>8951290</id><snippet>['Cape Cod Australia Pty Ltd',
'BHI',
'Fibrent Pty Ltd Building &amp; Engineering Assessments',
 ...
'Archicentre']
</snippet></ROW><ROW><id>8951290</id><snippet>&lt;div class="listingInfoContainer"&gt;...&lt;/div&gt;</snippet></ROW><ROW><id>8951290</id><snippet>container.xpath('.//span')</snippet></ROW><ROW><id>8951290</id><snippet>.</snippet></ROW><ROW><id>8951290</id><snippet>//span</snippet></ROW><ROW><id>8951290</id><snippet>#!/usr/bin/env python

import lxml.html

url = "http://www.yellowpages.com.au/search/listings?clue=architects&amp;locationClue=New+South+Wales&amp;x=45&amp;y=12"
tree = lxml.html.parse(url)
container = tree.xpath("//div[@class='listingInfoContainer']")
listings = []
for c in container:
    data = {}
    data['name'] = c.xpath('.//span[contains(@id,"listing")]/text()')
    data['address'] = c.xpath('.//span[@class="address"]/text()')
    listings.append(data)

print listings
</snippet></ROW><ROW><id>8951290</id><snippet>[{'name': ['Cape Cod Australia Pty Ltd'], 
  'address': ['4th Floor 410 Church St, North Parramatta NSW 2151']}, 
 {'name': ['BHI'], 
  'address': ['Suite 5, 65 Doody St, Alexandria NSW 2015']}, 
 {'name': ['Fibrent Pty Ltd Building &amp; Engineering Assessments'], 
  'address': ["Suite 3B, Level 1, 72 O'Riordan St, Alexandria NSW 2015"]}, 
  ...
 {'name': ['Archicentre'], 
  'address': ['\n                                         Level 3, 60 Collins St\n                                         ',
              '\n                                         Melbourne VIC 3000\n                                    ']}]
</snippet></ROW><ROW><id>8951290</id><snippet>name</snippet></ROW><ROW><id>8951290</id><snippet>address</snippet></ROW><ROW><id>8951290</id><snippet>text()</snippet></ROW><ROW><id>8951290</id><snippet>\n</snippet></ROW><ROW><id>8951290</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>8951290</id><snippet>&lt;span class="address"&gt;
     Level 3, 60 Collins St
     &lt;br/&gt;
     Melbourne VIC 3000
&lt;/span&gt;
</snippet></ROW><ROW><id>8951387</id><snippet>print('{1:&gt;{0}}: {2}'.format(line_number_max_digits, lineno + i, chunk))
</snippet></ROW><ROW><id>8951434</id><snippet>append</snippet></ROW><ROW><id>8951434</id><snippet>None</snippet></ROW><ROW><id>8951434</id><snippet>None</snippet></ROW><ROW><id>8951434</id><snippet>dest</snippet></ROW><ROW><id>8951434</id><snippet>dest.append(src + [4])
</snippet></ROW><ROW><id>8951563</id><snippet>toplevel_package/
├── __init__.py
├── moduleA.py
└── subpackage
    ├── __init__.py
    └── moduleB.py
</snippet></ROW><ROW><id>8951563</id><snippet>moduleB</snippet></ROW><ROW><id>8951563</id><snippet>from toplevel_package import moduleA
</snippet></ROW><ROW><id>8951563</id><snippet>moduleB.py</snippet></ROW><ROW><id>8951563</id><snippet>toplevel_package</snippet></ROW><ROW><id>8951563</id><snippet>sys.path</snippet></ROW><ROW><id>8951659</id><snippet>import atom
import gdata.auth
import gdata.contacts
import gdata.contacts.client
email = 'admin@domain.com'
password = 'password'
domain = 'domain.com'

gd_client = gdata.contacts.client.ContactsClient(domain=domain)
gd_client.ClientLogin(email, password, 'madeupgibberish')
def PrintFeed(feed):
  for i, entry in enumerate(feed.entry):
    print '\n%s %s' % (i+1, entry.title.text)

feed_link = atom.data.Link(gd_client.GetFeedUri(kind='profiles'))
while feed_link:
  profiles_feed = gd_client.GetProfilesFeed(uri=feed_link.href)
  PrintFeed(profiles_feed)
  feed_link = profiles_feed.GetNextLink()
</snippet></ROW><ROW><id>8951832</id><snippet>ModelA</snippet></ROW><ROW><id>8951832</id><snippet>class ModelA(models.Model):
    key = models.PositiveIntegerField()
    fk = models.ForeignKey(ModelB)

    def Meta(self):
        unique_together = ("key", "fk")

    def save(self, *args, **kwargs):
        key = cal_key(self.fk)
        self.key = key
        super(ModelA, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>8951832</id><snippet>overridden the default save method</snippet></ROW><ROW><id>8951832</id><snippet>cal_key</snippet></ROW><ROW><id>8951832</id><snippet>fk as argument</snippet></ROW><ROW><id>8951832</id><snippet>cal_key</snippet></ROW><ROW><id>8951832</id><snippet>def cal_key(fk):
    present_keys = ModelA.objects.filter(fk=fk).order_by('-key').values_list('key',flat=True)
    if present_keys:
        return present_keys[0]+1
    else:
        return 0
</snippet></ROW><ROW><id>8951832</id><snippet>cal_key</snippet></ROW><ROW><id>8951874</id><snippet>my_decorator</snippet></ROW><ROW><id>8951874</id><snippet>### Decorate all the above functions
import types
for k,v in globals().items():
    if isinstance(v, types.FunctionType):
        globals()[k] = my_decorator(v)
</snippet></ROW><ROW><id>8951874</id><snippet>import othermodule
import types
for k,v in vars(othermodule).items():
    if isinstance(v, types.FunctionType):
        vars(othermodule)[k] = my_decorator(v)
</snippet></ROW><ROW><id>8952140</id><snippet>dict</snippet></ROW><ROW><id>8952140</id><snippet>str.count()</snippet></ROW><ROW><id>8952140</id><snippet>abc = dict((c, string.count(c)) for c in string)
</snippet></ROW><ROW><id>8952140</id><snippet>set(string)</snippet></ROW><ROW><id>8952140</id><snippet>soulcheck</snippet></ROW><ROW><id>8952140</id><snippet>abc = dict((c, string.count(c)) for c in set(string))
</snippet></ROW><ROW><id>8952140</id><snippet>@time_me
def test_dict(string, iterations):
    """dict((c, string.count(c)) for c in string)"""
    for i in range(iterations):
        dict((c, string.count(c)) for c in string)

@time_me
def test_set(string, iterations):
    """dict((c, string.count(c)) for c in set(string))"""
    for i in range(iterations):
        dict((c, string.count(c)) for c in set(string))

@time_me
def test_counter(string, iterations):
    """Counter(string)"""
    for i in range(iterations):
        Counter(string)

@time_me
def test_for(string, iterations, d):
    """for loop from cha0site"""
    for i in range(iterations):
        for c in string:
            if c in d:
                d[c] += 1

@time_me
def test_default_dict(string, iterations):
    """defaultdict from joaquin"""
    for i in range(iterations):
        mydict = defaultdict(int)
        for mychar in string:
            mydict[mychar] += 1
</snippet></ROW><ROW><id>8952140</id><snippet>d_ini = dict((c, 0) for c in string.ascii_letters)
words = ['hand', 'marvelous', 'supercalifragilisticexpialidocious']

for word in words:
    print('-- {} --'.format(word))
    test_dict(word, 100000)
    test_set(word, 100000)
    test_counter(word, 100000)
    test_for(word, 100000, d_ini)
    test_default_dict(word, 100000)
    print()

print('-- {} --'.format('Pride and Prejudcie - Chapter 3 '))

test_dict(ch, 1000)
test_set(ch, 1000)
test_counter(ch, 1000)
test_for(ch, 1000, d_ini)
test_default_dict(ch, 1000)
</snippet></ROW><ROW><id>8952140</id><snippet>-- hand --
389.091 ms -  dict((c, string.count(c)) for c in string)
438.000 ms -  dict((c, string.count(c)) for c in set(string))
867.069 ms -  Counter(string)
100.204 ms -  for loop from cha0site
241.070 ms -  defaultdict from joaquin

-- marvelous --
654.826 ms -  dict((c, string.count(c)) for c in string)
729.153 ms -  dict((c, string.count(c)) for c in set(string))
1253.767 ms -  Counter(string)
201.406 ms -  for loop from cha0site
460.014 ms -  defaultdict from joaquin

-- supercalifragilisticexpialidocious --
1900.594 ms -  dict((c, string.count(c)) for c in string)
1104.942 ms -  dict((c, string.count(c)) for c in set(string))
2513.745 ms -  Counter(string)
703.506 ms -  for loop from cha0site
935.503 ms -  defaultdict from joaquin

# !!!: Do not compare this last result with the others because is timed
#      with 1000 iterations instead of 100000
-- Pride and Prejudcie - Chapter 3  --
155315.108 ms -  dict((c, string.count(c)) for c in string)
982.582 ms -  dict((c, string.count(c)) for c in set(string))
4371.579 ms -  Counter(string)
1609.623 ms -  for loop from cha0site
1300.643 ms -  defaultdict from joaquin
</snippet></ROW><ROW><id>8952266</id><snippet>setdefault</snippet></ROW><ROW><id>8952266</id><snippet>None</snippet></ROW><ROW><id>8952266</id><snippet># this is much more confinient and clearer
from collections import defaultdict

def get_location_list(self, lang_code, site=None):
    # this function is for building a list to be used in the posting process
    # TODO: tune the query to hit database only once
    list_choices = defaultdict(list)
    for parent in self.language(lang_code).filter(country__site=site, parent=None):
        list_child = self.language(lang_code).filter(parent=parent).values_list('id', 'name')
        list_choices[parent].extend(list_child)

    return list_choices
</snippet></ROW><ROW><id>8952356</id><snippet>currentItemsTable.horizontalHeader().setStretchLastSection(True)
currentItemsTable.verticalHeader().setStretchLastSection(True)
</snippet></ROW><ROW><id>8952356</id><snippet>currentItemsTable.verticalHeader().setStretchLastSection(False)
currentItemsTable.resizeRowsToContents()
currentItemsTable.verticalHeader().setStretchLastSection(True)
</snippet></ROW><ROW><id>8952467</id><snippet>states</snippet></ROW><ROW><id>8952467</id><snippet>symbols</snippet></ROW><ROW><id>8952467</id><snippet>symbols</snippet></ROW><ROW><id>8952467</id><snippet>observed_sequence = [5, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 4, 4, 4]
states = range(20) # experiment with this number
symbols = set(observed_clusters)
trainer = HiddenMarkovModelTrainer(states, symbols)
model = trainer.train_unsupervised([observed_sequence])
</snippet></ROW><ROW><id>8952528</id><snippet>re.UNICODE</snippet></ROW><ROW><id>8952528</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import re


data = u'temp1:        +31.0°C  (crit = +107.0°C)'
temp_re = re.compile(ur'(temp1:)\s+(\+|-)(\d+\.\d+)°C\s+' 
                     ur'\(crit\s+=\s+(\+|-)(\d+\.\d+)°C\).*', flags=re.UNICODE)

print temp_re.findall(data)
</snippet></ROW><ROW><id>8952528</id><snippet>[(u'temp1:', u'+', u'31.0', u'+', u'107.0')]
</snippet></ROW><ROW><id>8952528</id><snippet>check_output()</snippet></ROW><ROW><id>8952528</id><snippet>unicode</snippet></ROW><ROW><id>8952528</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>8952528</id><snippet>data = subprocess.check_output(...).decode(locale.getpreferredencoding())
</snippet></ROW><ROW><id>8952528</id><snippet>cp1251</snippet></ROW><ROW><id>8952528</id><snippet>preferredencoding</snippet></ROW><ROW><id>8952528</id><snippet>script.py</snippet></ROW><ROW><id>8952528</id><snippet>utf-8</snippet></ROW><ROW><id>8952528</id><snippet>#!/usr/bin/env python
# -*- coding: utf8 -*-

print u'temp1: +31.0°C  (crit = +107.0°C)'.encode('utf-8')
</snippet></ROW><ROW><id>8952528</id><snippet>subprocess.check_output(['python', 
                         'script.py']).decode(locale.getpreferredencoding())
</snippet></ROW><ROW><id>8952528</id><snippet>'В°'</snippet></ROW><ROW><id>8952528</id><snippet>°</snippet></ROW><ROW><id>8952649</id><snippet>&gt;&gt;&gt; e = Entity()
&gt;&gt;&gt; e.ref = None
&gt;&gt;&gt; e.put()
&gt;&gt;&gt; # wait few secs for datastore to complete write op
&gt;&gt;&gt; e.key() in [e.key() for e in Entity.all().filter('ref =', None)]
True
</snippet></ROW><ROW><id>8952849</id><snippet>mydict = {}
for idx, item in enumerate(reader):
    mydict['var%i' %idx] = item
</snippet></ROW><ROW><id>8952849</id><snippet>mydict['var0']
</snippet></ROW><ROW><id>8952849</id><snippet>mydict = {'var%i' %idx : item for idx, item in enumerate(reader)}
</snippet></ROW><ROW><id>8952849</id><snippet>mylist = list(reader)
</snippet></ROW><ROW><id>8952849</id><snippet>mylist[0] # instead of 'var0'
</snippet></ROW><ROW><id>8952849</id><snippet>mydict = {item[0] : item for item in reader}
</snippet></ROW><ROW><id>8952849</id><snippet>line = reader.next()
like_this = check_how_is_my(line)
if like_this == 'something_long':
    spaces = 23
else:
    spaces = 0

while True:
    try:
        print_with_spaces(line, spaces)
        reader.next()
    except StopIteration:
        break
</snippet></ROW><ROW><id>8953055</id><snippet>%pointer_class(float, floatp)
</snippet></ROW><ROW><id>8953055</id><snippet>print(testee.getIt().value())
</snippet></ROW><ROW><id>8953082</id><snippet>nargs = '+'</snippet></ROW><ROW><id>8953082</id><snippet>argparse</snippet></ROW><ROW><id>8953082</id><snippet>nargs = '+'</snippet></ROW><ROW><id>8953082</id><snippet>import argparse

def main():
    parser = argparse.ArgumentParser(
        description = 'three positional integer arguments.')
    parser.add_argument('picks', type = int, default = 10, nargs = '?',
                       help = 'number of selections per execution')
    parser.add_argument('minchunk', type = int, default = 2, nargs = '?',
                       help = 'min chunk size')
    parser.add_argument('maxchunk', type = int, default = 8, nargs = '?',
                       help = 'max chunk size')

    args = parser.parse_args()
    print args

main()
</snippet></ROW><ROW><id>8953082</id><snippet>Namespace(maxchunk=3, minchunk=2, picks=1)
</snippet></ROW><ROW><id>8953181</id><snippet>re.split('(?&lt;=\d)\s\s(?=for)',string)
</snippet></ROW><ROW><id>8953301</id><snippet>Key.from_path(kind, id_or_name, parent=none, namespace=None, **kwds)
</snippet></ROW><ROW><id>8953301</id><snippet>**kwds
Keyword arguments. The method supports one keyword argument, parent,
which specifies a parent entity to prepend to the given path.
Its value is the parent's Key.
</snippet></ROW><ROW><id>8953426</id><snippet>prog.py</snippet></ROW><ROW><id>8953426</id><snippet>import module
</snippet></ROW><ROW><id>8953459</id><snippet>for</snippet></ROW><ROW><id>8953459</id><snippet>ftplib</snippet></ROW><ROW><id>8953628</id><snippet>#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade HG on Sat Jan 21 15:09:27 2012

import wx

# begin wxGlade: extracode
# end wxGlade

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        self.notebook_2 = wx.Notebook(self.notebook_1_pane_1, -1, style=0)
        self.notebook_2_pane_1 = wx.Panel(self.notebook_2, -1)
        self.button_1 = wx.Button(self.notebook_2_pane_1, -1, "button_1")
        self.notebook_2_pane_2 = wx.Panel(self.notebook_2, -1)
        self.panel_1 = wx.Panel(self.notebook_1_pane_1, -1)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        self.panel_1.SetBackgroundColour(wx.Colour(255, 255, 0))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.button_1, 0, 0, 0)
        self.notebook_2_pane_1.SetSizer(sizer_3)
        self.notebook_2.AddPage(self.notebook_2_pane_1, "tab1")
        self.notebook_2.AddPage(self.notebook_2_pane_2, "tab2")

        sizer_2.Add(self.notebook_2, 0, wx.EXPAND, 0)      #&lt;- notebook,proportion 0
        sizer_2.Add(self.panel_1, 1, wx.EXPAND, 0)         #&lt;- panel,   proportion 1

        self.notebook_1_pane_1.SetSizer(sizer_2)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "tab1")
        self.notebook_1.AddPage(self.notebook_1_pane_2, "tab2")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "tab3")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8953642</id><snippet>fields</snippet></ROW><ROW><id>8953658</id><snippet>dict.keys</snippet></ROW><ROW><id>8953658</id><snippet>dict_keys</snippet></ROW><ROW><id>8953658</id><snippet>dict.iterkeys</snippet></ROW><ROW><id>8953658</id><snippet>list</snippet></ROW><ROW><id>8953658</id><snippet>&gt;&gt;&gt; b = { 'video':0, 'music':23 }
&gt;&gt;&gt; k = list(b.keys())
&gt;&gt;&gt; k
['music', 'video']
</snippet></ROW><ROW><id>8953658</id><snippet>&gt;&gt;&gt; list(b)
['music', 'video']
</snippet></ROW><ROW><id>8953964</id><snippet>CsrfResponseMiddleware</snippet></ROW><ROW><id>8954018</id><snippet>scipy</snippet></ROW><ROW><id>8954018</id><snippet>numpy</snippet></ROW><ROW><id>8954018</id><snippet>numpy</snippet></ROW><ROW><id>8954295</id><snippet>urlparse</snippet></ROW><ROW><id>8954295</id><snippet>lxml</snippet></ROW><ROW><id>8954295</id><snippet>doc.html</snippet></ROW><ROW><id>8954295</id><snippet>href</snippet></ROW><ROW><id>8954295</id><snippet>src</snippet></ROW><ROW><id>8954295</id><snippet>actions</snippet></ROW><ROW><id>8954295</id><snippet>import urlparse

import lxml.html


with open('doc.htm') as f:
    doc = lxml.html.parse(f)

for el in doc.xpath('//*[@href | @src | @action]'):
    tag = el.tag
    href = el.get('href', '')
    if not href:
        continue

    # not really need to check for '/' when using urljoin, but this is just example
    if href.startswith('/'): 
        el.attrib['href'] = urlparse.urljoin('http://stackoverflow.com/', href)

# then get string representation of tree back
result = lxml.html.tostring(doc)
</snippet></ROW><ROW><id>8954295</id><snippet>href</snippet></ROW><ROW><id>8954295</id><snippet>urlparse.urljoin</snippet></ROW><ROW><id>8954415</id><snippet>i</snippet></ROW><ROW><id>8954415</id><snippet>i</snippet></ROW><ROW><id>8954415</id><snippet>i</snippet></ROW><ROW><id>8954415</id><snippet>i</snippet></ROW><ROW><id>8954415</id><snippet>[0,1,2,3,4,5,6,7,8,9]</snippet></ROW><ROW><id>8954415</id><snippet>for (init; condition; term) ...
</snippet></ROW><ROW><id>8954415</id><snippet>init
while(condition) {
    ...
    term
}
</snippet></ROW><ROW><id>8954415</id><snippet>i = 0
while i &lt; 10:
    if i &gt; 5:
        i -= 1
    print i
    i += 1
</snippet></ROW><ROW><id>8954475</id><snippet>algo, salt, hsh = enc_password.split('$')</snippet></ROW><ROW><id>8954533</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8954533</id><snippet>sys.path</snippet></ROW><ROW><id>8954533</id><snippet>from dirFoo.dirFoo1.foo1 import Foo1
from dirFoo.dirFoo2.foo2 import Foo2
</snippet></ROW><ROW><id>8954533</id><snippet>from .dirfoo1.foo1 import Foo1
from .dirfoo1.foo1 import Foo2
</snippet></ROW><ROW><id>8954761</id><snippet>**</snippet></ROW><ROW><id>8954761</id><snippet>&gt;&gt;&gt; def foo(**args):
...     print(args)
...
&gt;&gt;&gt; foo(a=1, b=2)
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>8955474</id><snippet>a=pt1[0]
b=pt1[1]
c=pt2[0]-pt1[0]
d=pt2[1]-pt1[1]
face_region = cv.GetSubRect(image,(a,b,c,d))
cv.ShowImage("face",face_region) 
</snippet></ROW><ROW><id>8955757</id><snippet>print "r1"   # before first return
print "r2"   # at the end of the function, before second, implicit return
</snippet></ROW><ROW><id>8955757</id><snippet>n= 2 src= A inm= B dest= C
n= 1 src= A inm= C dest= B
n= 0 src= A inm= B dest= C
r1
A -&gt; B
1
n= 0 src= C inm= A dest= B
r1
r2
A -&gt; C
2
n= 1 src= B inm= A dest= C
n= 0 src= B inm= C dest= A
r1
B -&gt; C
1
n= 0 src= A inm= B dest= C
r1
r2
r2
</snippet></ROW><ROW><id>8955853</id><snippet>match = re.sub('([0-9])(!+)', r'\1 \2', input_string);
</snippet></ROW><ROW><id>8955853</id><snippet>\1</snippet></ROW><ROW><id>8955853</id><snippet>\2</snippet></ROW><ROW><id>8955853</id><snippet>r</snippet></ROW><ROW><id>8955853</id><snippet>\</snippet></ROW><ROW><id>8955878</id><snippet>__repr__</snippet></ROW><ROW><id>8955878</id><snippet>class Meta(type):
    def __repr__(cls):
        return 'My class %s' % cls.__name__

class A(object):
    __metaclass__ = Meta
</snippet></ROW><ROW><id>8955878</id><snippet>__repr__</snippet></ROW><ROW><id>8955878</id><snippet>__repr__</snippet></ROW><ROW><id>8955878</id><snippet>A</snippet></ROW><ROW><id>8955878</id><snippet>repr(A())</snippet></ROW><ROW><id>8955878</id><snippet>type</snippet></ROW><ROW><id>8955878</id><snippet>type</snippet></ROW><ROW><id>8955878</id><snippet>__repr__</snippet></ROW><ROW><id>8955878</id><snippet>&gt;&gt; repr(A)
My class A
</snippet></ROW><ROW><id>8955878</id><snippet>__repr__</snippet></ROW><ROW><id>8955878</id><snippet>class Meta(type):
    def __repr__(cls):
        if hasattr(cls, '_class_repr'):
            return getattr(cls, '_class_repr')()
        else:
            return super(Meta, cls).__repr__()

class A(object):
    __metaclass__ = Meta

    @classmethod
    def _class_repr(cls):
        return 'My class %s' % cls.__name__

class B(object):
    __metaclass__ = Meta
</snippet></ROW><ROW><id>8955878</id><snippet>&gt;&gt; repr(A)
My class A
&gt;&gt; repr(B)
&lt;__main__.B object at 0xb772068c&gt;
</snippet></ROW><ROW><id>8956032</id><snippet>import os

data_path = '/data'

# option 1 using nested list comprehensions**
data_files = (os.path.join(root,f) for (root, dirs, files) in os.walk(data_path)
                                   for f in files)   # can use [] instead of ()

# option 2 using nested for loops
data_files = []
for root, dirs, files in os.walk(data_path):
    for f in files:
        data_files.append(os.path.join(root, f))

for data_file in data_files:
    # ... process data_file ...
</snippet></ROW><ROW><id>8956088</id><snippet>x</snippet></ROW><ROW><id>8956088</id><snippet>y</snippet></ROW><ROW><id>8956088</id><snippet>if</snippet></ROW><ROW><id>8956088</id><snippet>True</snippet></ROW><ROW><id>8956088</id><snippet>found_pair = False
# MAX_X and MAX_Y would be have to be supplied by you
for x in range(0, MAX_X+1):
    for y in range(0, MAX_Y+1):
        if self.rank == self.cube.Get_cart_rank([x,y,0]):
            found_pair = True
            break

if found_pair:
    ...
</snippet></ROW><ROW><id>8956211</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import time

x = np.arange(0, 2*np.pi, 0.01)
y = np.sin(x)

fig, axes = plt.subplots(nrows=6)
styles = ['r-', 'g-', 'y-', 'm-', 'k-', 'c-']
lines = [ax.plot(x, y, style)[0] for ax, style in zip(axes, styles)]

fig.show()

tstart = time.time()
for i in xrange(1, 20):
    for j, line in enumerate(lines, start=1):
        line.set_ydata(np.sin(j*x + i/10.0))
    fig.canvas.draw()

print 'FPS:' , 20/(time.time()-tstart)
</snippet></ROW><ROW><id>8956211</id><snippet>fig.canvas.draw()</snippet></ROW><ROW><id>8956211</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import time

x = np.arange(0, 2*np.pi, 0.1)
y = np.sin(x)

fig, axes = plt.subplots(nrows=6)

styles = ['r-', 'g-', 'y-', 'm-', 'k-', 'c-']
def plot(ax, style):
    return ax.plot(x, y, style, animated=True)[0]
lines = [plot(ax, style) for ax, style in zip(axes, styles)]

# Let's capture the background of the figure
backgrounds = [fig.canvas.copy_from_bbox(ax.bbox) for ax in axes]

fig.show()

# We need to draw the canvas before we start animating...
fig.canvas.draw()

tstart = time.time()
for i in xrange(1, 2000):
    items = enumerate(zip(lines, axes, backgrounds), start=1)
    for j, (line, ax, background) in items:
        fig.canvas.restore_region(background)
        line.set_ydata(np.sin(j*x + i/10.0))
        ax.draw_artist(line)
        fig.canvas.blit(ax.bbox)

print 'FPS:' , 2000/(time.time()-tstart)
</snippet></ROW><ROW><id>8956211</id><snippet>animations</snippet></ROW><ROW><id>8956211</id><snippet>import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

x = np.arange(0, 2*np.pi, 0.1)
y = np.sin(x)

fig, axes = plt.subplots(nrows=6)

styles = ['r-', 'g-', 'y-', 'm-', 'k-', 'c-']
def plot(ax, style):
    return ax.plot(x, y, style, animated=True)[0]
lines = [plot(ax, style) for ax, style in zip(axes, styles)]

def animate(i):
    for j, line in enumerate(lines, start=1):
        line.set_ydata(np.sin(j*x + i/10.0))
    return lines

# We'd normally specify a reasonable "interval" here...
ani = animation.FuncAnimation(fig, animate, xrange(1, 200), 
                              interval=0, blit=True)
plt.show()
</snippet></ROW><ROW><id>8956437</id><snippet>extract(self, condition='*', path='.', withSubpath=True, overwrite=True)</snippet></ROW><ROW><id>8956437</id><snippet>rarfile module</snippet></ROW><ROW><id>8956437</id><snippet>extract</snippet></ROW><ROW><id>8956437</id><snippet>path</snippet></ROW><ROW><id>8956437</id><snippet>unrar</snippet></ROW><ROW><id>8956624</id><snippet>float</snippet></ROW><ROW><id>8956624</id><snippet>double</snippet></ROW><ROW><id>8956624</id><snippet>62.02</snippet></ROW><ROW><id>8956624</id><snippet>float</snippet></ROW><ROW><id>8956624</id><snippet>float x=62.02</snippet></ROW><ROW><id>8956649</id><snippet>.py</snippet></ROW><ROW><id>8956649</id><snippet>print</snippet></ROW><ROW><id>8956693</id><snippet>'type' object is not subscriptable</snippet></ROW><ROW><id>8956693</id><snippet>ipython</snippet></ROW><ROW><id>8956693</id><snippet>find()</snippet></ROW><ROW><id>8956693</id><snippet>filein</snippet></ROW><ROW><id>8956693</id><snippet>list index out of range</snippet></ROW><ROW><id>8956876</id><snippet>((t[1])/length) * t[1] += string
</snippet></ROW><ROW><id>8956876</id><snippet>string += str(((t[1])/length) * t[1])
</snippet></ROW><ROW><id>8956876</id><snippet>str</snippet></ROW><ROW><id>8956876</id><snippet>str</snippet></ROW><ROW><id>8956876</id><snippet>string</snippet></ROW><ROW><id>8956994</id><snippet>sleep</snippet></ROW><ROW><id>8956994</id><snippet>after</snippet></ROW><ROW><id>8956994</id><snippet>root.update</snippet></ROW><ROW><id>8956994</id><snippet>self.canvas.update_idletasks</snippet></ROW><ROW><id>8956994</id><snippet>update</snippet></ROW><ROW><id>8956994</id><snippet>update</snippet></ROW><ROW><id>8956994</id><snippet>update</snippet></ROW><ROW><id>8956994</id><snippet>update_idletasks</snippet></ROW><ROW><id>8956994</id><snippet>update_idletasks</snippet></ROW><ROW><id>8956994</id><snippet>pack_forget</snippet></ROW><ROW><id>8956994</id><snippet>pack_forget</snippet></ROW><ROW><id>8956994</id><snippet>move</snippet></ROW><ROW><id>8956994</id><snippet>coords</snippet></ROW><ROW><id>8956994</id><snippet>from Tkinter import *
import time

class Box:
    def __init__(self, canvas, type):
        self.canvas = canvas
        if type == "1":
            self.rect = canvas.create_rectangle(0, 0, 50, 50, fill="red")
        elif type == "2":
            self.rect = canvas.create_rectangle(50, 50, 100, 100, fill="blue")
        self.coords = canvas.coords(canvas, self.rect)

    def hide(self):
        # remember where this object was
        self.coords = canvas.coords(self.rect)
        # move it to an invisible part of the canvas
        self.canvas.move(self.rect, -1000, -1000)
    def unhide(self):
        # restore it to where it was
        self.canvas.coords(self.rect, *self.coords)

root = Tk()
frame = Frame(root)
frame.pack()
canvas = Canvas(frame, width=500, height=200)
canvas.pack()

a = Box(canvas, type="1")
b = Box(canvas, type="2")

root.after(1000, a.hide)
root.after(2000, a.unhide)
root.after(3000, b.hide)
root.after(4000, b.unhide)

root.mainloop()
</snippet></ROW><ROW><id>8956994</id><snippet>hide</snippet></ROW><ROW><id>8956994</id><snippet>unhide</snippet></ROW><ROW><id>8956994</id><snippet>    def hide(self):
        # remember where this object was
        self.coords = canvas.coords(self.rect)
        # move it to an invisible part of the canvas
        self.canvas.move(self.rect, -1000, -1000)
        # unhide after a second
        self.canvas.after(1000, self.unhide)

    def unhide(self):
        # restore it to where it was
        self.canvas.coords(self.rect, *self.coords)
        # re-hide after a second
        self.canvas.after(1000, self.hide)
</snippet></ROW><ROW><id>8957023</id><snippet>@staticmethod
def gettransaction(): return db.transaction
</snippet></ROW><ROW><id>8957023</id><snippet>  def methodB(cls):
    with cls.gettransaction():
       bla ...
</snippet></ROW><ROW><id>8957023</id><snippet>class transact:
    def __enter__(a): 
        print "enter"
    def __exit__(a,b,c,d): 
        print "exit"

class transact2:
    def __enter__(a): 
        print "enter2"
    def __exit__(a,b,c,d): 
        print "exit2"

class Parent():
    @staticmethod
    def gettrans(): 
        return transact()
    def methodA(cl):
        with cl.gettrans(): 
            print "A"

class Child(Parent): 
    pass
    @staticmethod
    def gettrans(): 
        return transact2()

p=Parent()
p.methodA()
c=Child()  
c.methodA()
</snippet></ROW><ROW><id>8957023</id><snippet>enter
A
exit
enter2
A
exit2
</snippet></ROW><ROW><id>8957037</id><snippet>__call__</snippet></ROW><ROW><id>8957037</id><snippet>xdata</snippet></ROW><ROW><id>8957037</id><snippet>ydata</snippet></ROW><ROW><id>8957037</id><snippet>xdata, ydata = event.artist.get_data()
</snippet></ROW><ROW><id>8957111</id><snippet>user = db.GqlQuery("SELECT * FROM Users WHERE login IS :1", login)</snippet></ROW><ROW><id>8957113</id><snippet>gc</snippet></ROW><ROW><id>8957113</id><snippet>__mro__</snippet></ROW><ROW><id>8957113</id><snippet>import gc
def find_subclasses(cls):
    all_refs = gc.get_referrers(cls)
    results = []
    for obj in all_refs:
        # __mro__ attributes are tuples
        # and if a tuple is found here, the given class is one of its members
        if (isinstance(obj, tuple) and
            # check if the found tuple is the __mro__ attribute of a class
            getattr(obj[0], "__mro__", None) is obj):
            results.append(obj[0])
    return results
</snippet></ROW><ROW><id>8957225</id><snippet>(x if cond else y)</snippet></ROW><ROW><id>8957225</id><snippet>&gt;&gt;&gt; x = 0
&gt;&gt;&gt; y = 1
&gt;&gt;&gt; print("a" if x &lt; y else "b")
a
</snippet></ROW><ROW><id>8957457</id><snippet>b</snippet></ROW><ROW><id>8957457</id><snippet>globals()["b"] = {'c': 5}
</snippet></ROW><ROW><id>8957457</id><snippet>b</snippet></ROW><ROW><id>8957457</id><snippet>c</snippet></ROW><ROW><id>8957495</id><snippet>O(N * M)</snippet></ROW><ROW><id>8957495</id><snippet>
pan = dict(pd.groupby('Member'))
</snippet></ROW><ROW><id>8957768</id><snippet>import os
import stat

executable = stat.S_IEXEC | stat.S_IXGRP | stat.S_IXOTH
for filename in os.listdir('.'):
    if os.path.isfile(filename):
        st = os.stat(filename)
        mode = st.st_mode
        if mode &amp; executable:
            print(filename,oct(mode))
</snippet></ROW><ROW><id>8957854</id><snippet>greatest</snippet></ROW><ROW><id>8957854</id><snippet>&gt;&gt;&gt; def greatest_orig(values):
...     value_generator = (v for k,v in values)
...     max_value = max(value_generator)
...     return (k for k,v in values if v == max_value)
... 
&gt;&gt;&gt; def greatest_max_key(values):
...     max_value = max(values, key=itemgetter(1))[1]
...     return (k for k,v in values if v == max_value)
... 
&gt;&gt;&gt; sample_data = tuple(('id' + str(i), random.randrange(0, 1000)) for i in range(10000))
&gt;&gt;&gt; list(greatest_orig(sample_data)) == list(greatest_max_key(sample_data))
True
&gt;&gt;&gt; %timeit list(greatest_orig(sample_data))
1000 loops, best of 3: 1.67 ms per loop
&gt;&gt;&gt; %timeit list(greatest_max_key(sample_data))
1000 loops, best of 3: 1.74 ms per loop
</snippet></ROW><ROW><id>8957854</id><snippet>max(values, key=itemgetter(1))[1]</snippet></ROW><ROW><id>8957854</id><snippet>&gt;&gt;&gt; def greatest_max_iter(values):
...     max_value = max((v for k, v in values))
...     return (k for k, v in values if v == max_value)
...                                                
&gt;&gt;&gt; list(greatest_orig(sample_data)) == list(greatest_max_iter(sample_data))
True
&gt;&gt;&gt; %timeit list(greatest_max_iter(sample_data))
1000 loops, best of 3: 1.67 ms per loop
</snippet></ROW><ROW><id>8957854</id><snippet>&gt;&gt;&gt; def greatest_max_iter(values):
...     max_value = max(v for k, v in values)
...     return (k for k, v in values if v == max_value)
... 
</snippet></ROW><ROW><id>8957854</id><snippet>&gt;&gt;&gt; %timeit list(greatest_max_iter(sample_data))
1000 loops, best of 3: 1.69 ms per loop
</snippet></ROW><ROW><id>8957854</id><snippet>max(v for k, v in values)</snippet></ROW><ROW><id>8957854</id><snippet>max((v for k, v in values))</snippet></ROW><ROW><id>8957854</id><snippet>max(values, key=itemgetter(1))[1]</snippet></ROW><ROW><id>8957891</id><snippet>self.db = Parent.sqlite3.connect("test.db")
</snippet></ROW><ROW><id>8957891</id><snippet>from Parent import *
</snippet></ROW><ROW><id>8957968</id><snippet>CPU profiler</snippet></ROW><ROW><id>8957968</id><snippet>cProfile.run(command[, filename])</snippet></ROW><ROW><id>8957968</id><snippet>  2706 function calls (2004 primitive calls) in 4.504 CPU seconds

Ordered by: standard name

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     2    0.006    0.003    0.953    0.477 pobject.py:75(save_objects)
  43/3    0.533    0.012    0.749    0.250 pobject.py:99(evaluate)
...
</snippet></ROW><ROW><id>8957968</id><snippet>memory</snippet></ROW><ROW><id>8958050</id><snippet>if phase == "NEWGAME":
    return tuple([i for i in info[1:]]) # Returns everything in info except "NEWGAME"
</snippet></ROW><ROW><id>8958209</id><snippet>getattr</snippet></ROW><ROW><id>8958209</id><snippet>v = 'videos'
getattr(userObj, v).filter(...)
</snippet></ROW><ROW><id>8958220</id><snippet>xmpp</snippet></ROW><ROW><id>8958220</id><snippet>add_friend</snippet></ROW><ROW><id>8958220</id><snippet>def add_friend(self, user):
    self._send(xmpp.Presence(to=user, typ='subscribed'))
    self._send(xmpp.Presence(to=user, typ='subscribe'))
    return True
</snippet></ROW><ROW><id>8958257</id><snippet>__get__</snippet></ROW><ROW><id>8958257</id><snippet>import types
from functools import partial

class APIWrapper(object):
    def __init__(self, apicls, instance):
        self._apicls = apicls
        self._instance = instance
    def __getattribute__(self, attr):
        apicls = object.__getattribute__(self, "_apicls")
        instance = object.__getattribute__(self,"_instance")
        obj = getattr(apicls, attr)
        if isinstance(obj, types.MethodType):
            return partial(obj,instance)
        return obj


class APIProperty(object):
    def __init__(self, cls):
        self.cls = cls
    def __get__(self, instance, cls):
        return APIWrapper(self.cls, instance)

class Y(object):
    @classmethod
    def method(cls, x, *args):
        print cls, x, args

class X(object):
    Y = APIProperty(Y)

#Example usage: 
x = X()
x.Y.method(1,2,3)
</snippet></ROW><ROW><id>8958257</id><snippet>&lt;class '__main__.Y'&gt; &lt;__main__.X object at 0x18ad090&gt; (1, 2, 3)</snippet></ROW><ROW><id>8958257</id><snippet>Y = APIWrapper(Y) 
</snippet></ROW><ROW><id>8958257</id><snippet>def auto_api(api_classes, glob_dict):
    for key, value in glob_dict.items():
        if isinstance(value, type) and hasattr(value, "auto_api"):
            for api_class in api_classes:
                setattr(value, api_class.__name__, APIProperty(api_class))


class X(object):
    auto_api = True

class Y(object):
    @classmethod
    def method(cls, x, *args):
        print cls, x, args

auto_api((Y,), globals())

#Example

x = X()
x.Y.method(1,2,3)
</snippet></ROW><ROW><id>8958293</id><snippet>formats</snippet></ROW><ROW><id>8958293</id><snippet>force_unicode</snippet></ROW><ROW><id>8958299</id><snippet>myStr.replace(","," ")
myStr.replace("'"," ")
myStr.replace("-","")
myStr.replace("_","")
myStr.replace("["," ")
myStr.replace("]"," ")
</snippet></ROW><ROW><id>8958299</id><snippet>re.sub(r"[,'\[\]]", " ", myStr)
re.sub(r"[-_]", "", myStr)
</snippet></ROW><ROW><id>8958393</id><snippet>Edit&gt;Profile Preferences&gt;Compatibility</snippet></ROW><ROW><id>8958393</id><snippet>ASCII DEL</snippet></ROW><ROW><id>8958393</id><snippet>xmodmap -e "keycode 22 = BackSpace"
</snippet></ROW><ROW><id>8958401</id><snippet>A ^ B</snippet></ROW><ROW><id>8958401</id><snippet>A - B</snippet></ROW><ROW><id>8958513</id><snippet>webclient.apps.myapp.library</snippet></ROW><ROW><id>8958513</id><snippet>LibraryClass</snippet></ROW><ROW><id>8958699</id><snippet>ZMQ::HWM option action</snippet></ROW><ROW><id>8958699</id><snippet>Block</snippet></ROW><ROW><id>8958699</id><snippet>Drop</snippet></ROW><ROW><id>8958699</id><snippet>ZMQ::PUB</snippet></ROW><ROW><id>8958699</id><snippet>Drop</snippet></ROW><ROW><id>8958781</id><snippet>python manage.py dbshell</snippet></ROW><ROW><id>8958781</id><snippet>settings.py</snippet></ROW><ROW><id>8958781</id><snippet>psql db_name -U user</snippet></ROW><ROW><id>8958853</id><snippet>psutil</snippet></ROW><ROW><id>8958853</id><snippet>&gt;&gt;&gt; psutil.network_io_counters(pernic=True)
{'lo': iostat(bytes_sent=799953745, bytes_recv=799953745, packets_sent=453698, packets_recv=453698), 
 'eth0': iostat(bytes_sent=734324837, bytes_recv=4163935363, packets_sent=3605828, packets_recv=4096685)}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8958853</id><snippet>linux</snippet></ROW><ROW><id>8958853</id><snippet>unix</snippet></ROW><ROW><id>8958853</id><snippet>subprocess</snippet></ROW><ROW><id>8958853</id><snippet>shutdown</snippet></ROW><ROW><id>8958853</id><snippet>reboot</snippet></ROW><ROW><id>8958896</id><snippet>import cv
resim = cv.LoadImage('image.jpg')
capture = cv.CaptureFromFile('video.avi')
while(1):
    frame = cv.QueryFrame(capture)
    cv.SetImageROI(frame,(100,100,resim.width,resim.height))
    cv.Add(frame,resim,frame)
    cv.ResetImageROI(frame)
    cv.ShowImage('frame',frame)
    if cv.WaitKey(33)==27:
        break
</snippet></ROW><ROW><id>8958959</id><snippet> # coding=utf8
 # ... do stuff here ...
</snippet></ROW><ROW><id>8958959</id><snippet>text = text.replace('½', '1/2')
</snippet></ROW><ROW><id>8958991</id><snippet>carls</snippet></ROW><ROW><id>8958991</id><snippet>[[(1,), (2,), (3,)], [(1,), (2,)]]</snippet></ROW><ROW><id>8958991</id><snippet>[carlid for carlid in c for c in carls]</snippet></ROW><ROW><id>8958991</id><snippet>c</snippet></ROW><ROW><id>8958991</id><snippet>Crush</snippet></ROW><ROW><id>8958991</id><snippet>similar_crushes</snippet></ROW><ROW><id>8958991</id><snippet>for c in carls:</snippet></ROW><ROW><id>8958991</id><snippet>c</snippet></ROW><ROW><id>8958991</id><snippet>carls</snippet></ROW><ROW><id>8958991</id><snippet>PK</snippet></ROW><ROW><id>8958991</id><snippet>for i in range(100):
   pass
print i
# out : 99
</snippet></ROW><ROW><id>8959107</id><snippet>app = Flask(__name__)
app.config.from_pyfile('config.py')
</snippet></ROW><ROW><id>8959107</id><snippet>DEBUG = True
</snippet></ROW><ROW><id>8959249</id><snippet>require "redis"

redis = Redis.new
# Your other code to build up command lists...
redis.lpush 'commands', command1, command2...
</snippet></ROW><ROW><id>8959249</id><snippet>redis.lpush 'jobs:machine1', command1
# etc.
</snippet></ROW><ROW><id>8959249</id><snippet>from redis import Redis
r = Redis(host="hostname-of-machine-running-redis")
while r.llen('jobs:machine1'):
    job = r.lpop('commands:machine1')
    os.system('sh ' + job + ' &amp;')
</snippet></ROW><ROW><id>8959249</id><snippet>require 'redis'
redis = Redis.new(:host =&gt; 'hostname-of-machine-running-redis')
while redis.llen('jobs:machine1')
    job = redis.lpop('commands:machine1')
    `sh #{job} &amp;`
end
</snippet></ROW><ROW><id>8959251</id><snippet>import subprocess
subprocess.call(('someprog.exe', str(i)))
</snippet></ROW><ROW><id>8959269</id><snippet>def</snippet></ROW><ROW><id>8959269</id><snippet>self</snippet></ROW><ROW><id>8959269</id><snippet>self</snippet></ROW><ROW><id>8959269</id><snippet>class SomeClass:
    def __init__(self):
        self.foo = 'I am an instance attribute called foo'
        self.foo_list = []

    bar = 'I am a class attribute called bar'
    bar_list = []
</snippet></ROW><ROW><id>8959269</id><snippet>SomeClass</snippet></ROW><ROW><id>8959269</id><snippet>__init__</snippet></ROW><ROW><id>8959269</id><snippet>bar</snippet></ROW><ROW><id>8959269</id><snippet>bar_list</snippet></ROW><ROW><id>8959269</id><snippet>instance = SomeClass()
</snippet></ROW><ROW><id>8959269</id><snippet>SomeClass</snippet></ROW><ROW><id>8959269</id><snippet>__init__</snippet></ROW><ROW><id>8959269</id><snippet>self</snippet></ROW><ROW><id>8959269</id><snippet>foo</snippet></ROW><ROW><id>8959269</id><snippet>foo_list</snippet></ROW><ROW><id>8959269</id><snippet>instance</snippet></ROW><ROW><id>8959269</id><snippet>foo</snippet></ROW><ROW><id>8959269</id><snippet>foo_list</snippet></ROW><ROW><id>8959269</id><snippet>print instance.bar
</snippet></ROW><ROW><id>8959269</id><snippet>I am a class attribute called bar
</snippet></ROW><ROW><id>8959269</id><snippet>bar</snippet></ROW><ROW><id>8959269</id><snippet>SomeClass</snippet></ROW><ROW><id>8959269</id><snippet>mylist.append(5)</snippet></ROW><ROW><id>8959269</id><snippet>mylist</snippet></ROW><ROW><id>8959269</id><snippet>append</snippet></ROW><ROW><id>8959269</id><snippet>mylist</snippet></ROW><ROW><id>8959269</id><snippet>mylist.append</snippet></ROW><ROW><id>8959269</id><snippet>(5)</snippet></ROW><ROW><id>8959269</id><snippet>5</snippet></ROW><ROW><id>8959269</id><snippet>SomeClass</snippet></ROW><ROW><id>8959269</id><snippet>bar</snippet></ROW><ROW><id>8959269</id><snippet>sc1 = SomeClass()
sc1.foo_list.append(1)
sc1.bar_list.append(2)

sc2 = SomeClass()
sc2.foo_list.append(10)
sc2.bar_list.append(20)

print sc1.foo_list
print sc1.bar_list

print sc2.foo_list
print sc2.bar_list
</snippet></ROW><ROW><id>8959269</id><snippet>[1]
[2, 20]
[10]
[2, 20]
</snippet></ROW><ROW><id>8959269</id><snippet>foo_list</snippet></ROW><ROW><id>8959269</id><snippet>bar_list</snippet></ROW><ROW><id>8959269</id><snippet>sc1.bar_list.append(2)</snippet></ROW><ROW><id>8959269</id><snippet>sc2</snippet></ROW><ROW><id>8959269</id><snippet>sc2</snippet></ROW><ROW><id>8959269</id><snippet>sc2.bar_list.append(20)</snippet></ROW><ROW><id>8959269</id><snippet>bar_list</snippet></ROW><ROW><id>8959269</id><snippet>sc1</snippet></ROW><ROW><id>8959269</id><snippet>type</snippet></ROW><ROW><id>8959269</id><snippet>type</snippet></ROW><ROW><id>8959269</id><snippet>type</snippet></ROW><ROW><id>8959269</id><snippet>class Foo(BaseFoo):
    def __init__(self, foo):
        self.foo = foo

    z = 28
</snippet></ROW><ROW><id>8959269</id><snippet>def __init__(self, foo):
    self.foo = foo

classdict = {'__init__': __init__, 'z': 28 }

Foo = type('Foo', (BaseFoo,) classdict)
</snippet></ROW><ROW><id>8959269</id><snippet>classdict</snippet></ROW><ROW><id>8959269</id><snippet>Class.attribute</snippet></ROW><ROW><id>8959269</id><snippet>i = Class(); i.attribute</snippet></ROW><ROW><id>8959269</id><snippet>i</snippet></ROW><ROW><id>8959269</id><snippet>Class</snippet></ROW><ROW><id>8959269</id><snippet>__class__</snippet></ROW><ROW><id>8959269</id><snippet>c = some_instance.__class__</snippet></ROW><ROW><id>8959269</id><snippet>c</snippet></ROW><ROW><id>8959269</id><snippet>i.__class__</snippet></ROW><ROW><id>8959269</id><snippet>__class__</snippet></ROW><ROW><id>8959269</id><snippet>__class__</snippet></ROW><ROW><id>8959329</id><snippet>break</snippet></ROW><ROW><id>8959329</id><snippet>while True:
    inp = raw_input('Enter a M/N or Q to quit:')

    if inp.lower() == 'q':
        break

    if inp.lower() == "m":
        key = raw_input("Enter the main number :")
        try:
            print(streetno[key])
        except KeyError:
            print("You picked an invalid street number")

    elif inp.lower() == 'n':
        key = raw_input("Enter the street name: ")
        try:
            print(streetname[key])
        except KeyError:
            print("You picked an invalid street name")

    else:
        print("{0} is an invalid choice.".format(inp))
</snippet></ROW><ROW><id>8959348</id><snippet>os.path.isfile(f)</snippet></ROW><ROW><id>8959348</id><snippet>f</snippet></ROW><ROW><id>8959348</id><snippet>path</snippet></ROW><ROW><id>8959348</id><snippet>True</snippet></ROW><ROW><id>8959348</id><snippet>    qualified_filenames = (os.path.join(path, filename) for filename in fnames)
    for f in qualified_filenames:
</snippet></ROW><ROW><id>8959348</id><snippet>os.chdir()</snippet></ROW><ROW><id>8959348</id><snippet>filterfiles</snippet></ROW><ROW><id>8959348</id><snippet>def filterfiles(f):
    ext = os.path.splitext(f)[1][1:]
    return ext in fileFilter
</snippet></ROW><ROW><id>8959348</id><snippet>return</snippet></ROW><ROW><id>8959399</id><snippet>setuptools</snippet></ROW><ROW><id>8959399</id><snippet>setuptools</snippet></ROW><ROW><id>8959399</id><snippet>Distribute</snippet></ROW><ROW><id>8959399</id><snippet>Distribute</snippet></ROW><ROW><id>8959399</id><snippet>cmd</snippet></ROW><ROW><id>8959399</id><snippet>run</snippet></ROW><ROW><id>8959399</id><snippet>distribute_setup.py</snippet></ROW><ROW><id>8959399</id><snippet>cd</snippet></ROW><ROW><id>8959399</id><snippet>cd C:\Users\Michael0x2a\Downloads</snippet></ROW><ROW><id>8959399</id><snippet>python distribute_setup.py</snippet></ROW><ROW><id>8959399</id><snippet>C:\Python32\python.exe distribute_setup.py</snippet></ROW><ROW><id>8959399</id><snippet>cd</snippet></ROW><ROW><id>8959399</id><snippet>cd C:\Users\Michael0x2a\Downloads\feedparser-5.1\feedparser-5.1
</snippet></ROW><ROW><id>8959399</id><snippet>feedparser-5.3</snippet></ROW><ROW><id>8959399</id><snippet>setup.py</snippet></ROW><ROW><id>8959399</id><snippet>dir</snippet></ROW><ROW><id>8959399</id><snippet>python setup.py install</snippet></ROW><ROW><id>8959399</id><snippet>C:\Python32\python.exe setup.py install</snippet></ROW><ROW><id>8959399</id><snippet>import feedparser</snippet></ROW><ROW><id>8959405</id><snippet>class Spam(object):
  @staticmethod
  def f1(x):
    # use x

  @classmethod
  def f2(cls, x):
    # use x and cls.f1
</snippet></ROW><ROW><id>8959614</id><snippet>null=True, blank=True</snippet></ROW><ROW><id>8959614</id><snippet>org_name</snippet></ROW><ROW><id>8959614</id><snippet>Organization</snippet></ROW><ROW><id>8959614</id><snippet>inspectdb</snippet></ROW><ROW><id>8959614</id><snippet>organization</snippet></ROW><ROW><id>8959623</id><snippet>myapp</snippet></ROW><ROW><id>8959623</id><snippet>-</snippet></ROW><ROW><id>8959623</id><snippet>from subprocess import PIPE, Popen

p = Popen(['/path/to/myapp', '-i', '-'], stdin=PIPE, stdout=PIPE)
stdout, _ = p.communicate('\n'.join(inbuff).encode('utf-8'))
outbuff = stdout.decode('utf-8').splitlines()
</snippet></ROW><ROW><id>8959623</id><snippet>-</snippet></ROW><ROW><id>8959623</id><snippet>import os
import tempfile

with tempfile.NamedTemporaryFile(delete=False) as f:
     f.write('\n'.join(inbuff).encode('utf-8'))

p = Popen(['/path/to/myapp', '-i', f.name], stdout=PIPE)
outbuff, conditionbuff = [], []
for line in iter(p.stdout.readline, ''):
    line = line.strip().decode('utf-8')
    if 'condition' in line:
        conditionbuff.append(line)
    else:
        outbuff.append(line)
p.stdout.close()
p.wait()
os.remove(f.name) #XXX add try/finally for proper cleanup
</snippet></ROW><ROW><id>8959623</id><snippet>stderr</snippet></ROW><ROW><id>8959623</id><snippet>open(os.devnull, 'wb')</snippet></ROW><ROW><id>8959623</id><snippet>stderr</snippet></ROW><ROW><id>8959623</id><snippet>Popen</snippet></ROW><ROW><id>8959699</id><snippet>Version      : 2.7.1
Compiler     : MSC v.1500 32 bit (Intel)
Platform     : Windows-7-6.1.7601-SP1
Processor    : Intel64 Family 6 Model 30 Stepping 5, GenuineIntel
Num Threads/Processes: 8 ; Num Items: 16000
mainMultiprocessAndThreaded exec time: 1134.00006294  ms
mainPureMultiprocessing exec time: 917.000055313  ms
mainPureThreaded exec time: 111.000061035  ms
mainSerial exec time: 41.0001277924  ms
Terminating
</snippet></ROW><ROW><id>8959699</id><snippet>def checkPrime(candidate):
    i = 0;
    for k in xrange(1,10000):
        i += k
    return i &lt; 5000
</snippet></ROW><ROW><id>8959699</id><snippet>Version      : 2.7.1
Compiler     : MSC v.1500 32 bit (Intel)
Platform     : Windows-7-6.1.7601-SP1
Processor    : Intel64 Family 6 Model 30 Stepping 5, GenuineIntel
Num Threads/Processes: 8 ; Num Items: 16000
mainMultiprocessAndThreaded exec time: 2190.99998474  ms
mainPureMultiprocessing exec time: 2154.99997139  ms
mainPureThreaded exec time: 16170.0000763  ms
mainSerial exec time: 9143.00012589  ms
Terminating
</snippet></ROW><ROW><id>8959699</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>8959699</id><snippet>@timeFunc
def mainPool(numThreads, numItems):
    jobQueue = ConcurrentQueue()
    fillQueueWithWork(jobQueue, numItems)

    pool = multiprocessing.Pool(processes=numThreads)
    results = []
    while True:
        dataItem = jobQueue.pop()
        if dataItem == None:
            break
        results.append(pool.apply_async(checkPrime, dataItem))

    pool.close()
    pool.join()
</snippet></ROW><ROW><id>8959699</id><snippet>checkPrime</snippet></ROW><ROW><id>8959699</id><snippet>Version      : 2.7.1
Compiler     : MSC v.1500 32 bit (Intel)
Platform     : Windows-7-6.1.7601-SP1
Processor    : Intel64 Family 6 Model 30 Stepping 5, GenuineIntel
Num Threads/Processes: 8 ; Num Items: 1600
mainPool exec time: 1530.99989891  ms
Terminating
</snippet></ROW><ROW><id>8959699</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>8959699</id><snippet>ConcurrentQueue</snippet></ROW><ROW><id>8959699</id><snippet>Pool</snippet></ROW><ROW><id>8959746</id><snippet>@Calculation
def f2():
    ...
</snippet></ROW><ROW><id>8959746</id><snippet>Calculation</snippet></ROW><ROW><id>8959746</id><snippet>f2</snippet></ROW><ROW><id>8959746</id><snippet>_decorator = Calculation # a fresh identifier
# not needed here, but in other cases (think properties) it's useful
def f2():
    ...
f2 = _decorator(f2)
</snippet></ROW><ROW><id>8960386</id><snippet>#!/usr/bin/env python
from contextlib import closing
from selenium.webdriver import Firefox # pip install selenium
from selenium.webdriver.support.ui import WebDriverWait

# use firefox to get page with javascript generated content
with closing(Firefox()) as browser:
     browser.get(url)
     button = browser.find_element_by_name('button')
     button.click()
     # wait for the page to load
     WebDriverWait(browser, timeout=10).until(
         lambda x: x.find_element_by_id('someId_that_must_be_on_new_page'))
     # store it to string variable
     page_source = browser.page_source
print(page_source)
</snippet></ROW><ROW><id>8960527</id><snippet>def after_bulk_delete(session, query, query_context, result):
    affected_table = query_context.statement.froms[0]
    affected_rows = query_context.statement.execute().fetchall() 

sqlalchemy.event.listen(Session, "after_bulk_delete", after_bulk_delete)
</snippet></ROW><ROW><id>8960700</id><snippet>listt3=[]

for i in listt1:
    if i in listt2:
        listt3.append(1)
    else:
        listt3.append(0)
</snippet></ROW><ROW><id>8960700</id><snippet>listt3=[ 1 if i in listt2 else 0 for i in listt1]</snippet></ROW><ROW><id>8960727</id><snippet>&gt;&gt;&gt; dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}
&gt;&gt;&gt; keys = dishes.keys()
&gt;&gt;&gt; values = dishes.values()

&gt;&gt;&gt; # view objects are dynamic and reflect dict changes
&gt;&gt;&gt; del dishes['eggs']
&gt;&gt;&gt; keys  # No eggs anymore!
dict_keys(['sausage', 'bacon', 'spam'])

&gt;&gt;&gt; values  # No eggs value (2) anymore!
dict_values([1, 1, 500])
</snippet></ROW><ROW><id>8960727</id><snippet>dishes.viewkeys()</snippet></ROW><ROW><id>8960727</id><snippet>dishes.viewvalues()</snippet></ROW><ROW><id>8960786</id><snippet>'10'</snippet></ROW><ROW><id>8960786</id><snippet>'1'</snippet></ROW><ROW><id>8960786</id><snippet>'7'</snippet></ROW><ROW><id>8960786</id><snippet>elif (choice &gt;= '1' and choice &lt;= '7'):
</snippet></ROW><ROW><id>8960786</id><snippet>'7'</snippet></ROW><ROW><id>8960786</id><snippet>1</snippet></ROW><ROW><id>8960786</id><snippet>2</snippet></ROW><ROW><id>8960786</id><snippet>3</snippet></ROW><ROW><id>8960786</id><snippet>4</snippet></ROW><ROW><id>8960786</id><snippet>5</snippet></ROW><ROW><id>8960786</id><snippet>6</snippet></ROW><ROW><id>8960786</id><snippet>choice</snippet></ROW><ROW><id>8960786</id><snippet>'x'</snippet></ROW><ROW><id>8960883</id><snippet> fab task:'hello'
 fab task:something='hello'
 fab task:foo=99,bar=True
</snippet></ROW><ROW><id>8961036</id><snippet>None</snippet></ROW><ROW><id>8961036</id><snippet>if obj is None:</snippet></ROW><ROW><id>8961036</id><snippet>if obj is not None:</snippet></ROW><ROW><id>8961036</id><snippet>&gt;&gt;&gt; "3" &lt; 4
False
</snippet></ROW><ROW><id>8961036</id><snippet>TypeError</snippet></ROW><ROW><id>8961036</id><snippet>str</snippet></ROW><ROW><id>8961036</id><snippet>int</snippet></ROW><ROW><id>8961036</id><snippet>None</snippet></ROW><ROW><id>8961036</id><snippet>&gt;&gt;&gt; None &lt; 0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: NoneType() &lt; int()
</snippet></ROW><ROW><id>8961036</id><snippet>False</snippet></ROW><ROW><id>8961036</id><snippet>"int"</snippet></ROW><ROW><id>8961036</id><snippet>"str"</snippet></ROW><ROW><id>8961058</id><snippet>root</snippet></ROW><ROW><id>8961058</id><snippet>GRANT ... TO username@'192.168.0.%'</snippet></ROW><ROW><id>8961109</id><snippet>lstrip</snippet></ROW><ROW><id>8961109</id><snippet>for line in old_file:
    stripped_line = line.lstrip()
    # do your matching here against `stripped_line` instead of `line`
    # `line` still contains the original, non-stripped line
</snippet></ROW><ROW><id>8961109</id><snippet>with open('filename') as new_file</snippet></ROW><ROW><id>8961343</id><snippet>"additionalProperties": False</snippet></ROW><ROW><id>8961343</id><snippet>#!/usr/bin/python

from jsonschema import Validator
checker = Validator()
schema = {
    "type" : "object",
    "properties" : {
        "source" : {
            "type" : "object",
            "properties" : {
                "name" : {"type" : "string" }
            },
            "additionalProperties": False, # add this
        }
    }
}
data ={
   "source":{
      "name":"blah",
      "bad_key":"This data is not allowed according to the schema."
   }
}
checker.validate(data,schema)
</snippet></ROW><ROW><id>8961488</id><snippet>Mailbox.lock()</snippet></ROW><ROW><id>8961488</id><snippet>Mailbox.lock()</snippet></ROW><ROW><id>8961488</id><snippet>Mailbox</snippet></ROW><ROW><id>8961712</id><snippet>for</snippet></ROW><ROW><id>8961712</id><snippet>a = [1,2,3]
b = []
for n in a:
    b.append(n*n)
</snippet></ROW><ROW><id>8961712</id><snippet>a = [1,2,3]
b = [n*n for n in a]
</snippet></ROW><ROW><id>8961742</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>8961742</id><snippet>...
reactor.callFromThread(pbRemote.callRemote, "someMethod", some, args)
</snippet></ROW><ROW><id>8961742</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>8961742</id><snippet>from twisted.internet.threads import blockingCallFromThread

...
result = blockingCallFromThread(reactor, pbRemote.callRemote, "someMethod", some, args)
</snippet></ROW><ROW><id>8961742</id><snippet>callRemote</snippet></ROW><ROW><id>8961742</id><snippet>Deferred</snippet></ROW><ROW><id>8961742</id><snippet>resultHolder = blockingCallFromThread(
    reactor, lambda: [pbRemote.callRemote("someMethod", some, args)])
</snippet></ROW><ROW><id>8961742</id><snippet>result = blockingCallFromThread(reactor, lambda: resultHolder[0])
</snippet></ROW><ROW><id>8961820</id><snippet>QTreeWidgetItem</snippet></ROW><ROW><id>8961820</id><snippet>root = self.treeWidget.invisibleRootItem()
child_count = root.childCount()
for i in range(child_count):
    item = root.child(i)
    url = item.text(0) # text at first (0) column
    item.setText(1, 'result from %s' % url) # update result column (1)
</snippet></ROW><ROW><id>8961820</id><snippet>self.treeWidget</snippet></ROW><ROW><id>8961820</id><snippet>self.treeWidget.setColumnCount(2) # two columns, url result
for i in range(10):
    self.treeWidget.insertTopLevelItem(i, QTreeWidgetItem(QStringList('url %s' % i)))
</snippet></ROW><ROW><id>8962064</id><snippet>self.assertRaises(HTTPError, pyport.get_item, test_type, test_id)
</snippet></ROW><ROW><id>8962064</id><snippet>assertRaises</snippet></ROW><ROW><id>8962064</id><snippet>assertRaises(exception, callable, *args, **kwds)
</snippet></ROW><ROW><id>8962064</id><snippet>pyport.get_item(test_type, test_id)</snippet></ROW><ROW><id>8962064</id><snippet>assertRaises</snippet></ROW><ROW><id>8962098</id><snippet>from sqlalchemy import Column, Integer, ForeignKey, Table, ForeignKeyConstraint, create_engine
from sqlalchemy.orm import relationship, backref, scoped_session, sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy
from itertools import chain

Base = declarative_base()

class SupervisionAssociation(Base):
    __tablename__ = 'supervision'

    supervisor_id = Column(Integer, ForeignKey('supervisor.id'), primary_key=True)
    client_id = Column(Integer, ForeignKey('client.id'), primary_key=True)

    supervisor = relationship("Supervisor", backref="client_associations")
    client = relationship("Client", backref="supervisor_associations")
    schedules = relationship("Schedule")

class User(Base):
    __tablename__ = 'user'

    id = Column(Integer, primary_key=True)

class Supervisor(User):
    __tablename__ = 'supervisor'
    __mapper_args__ = {'polymorphic_identity': 'supervisor'}

    id = Column(Integer, ForeignKey('user.id'), primary_key = True)

    clients = association_proxy("client_associations", "client", 
                        creator=lambda c: SupervisionAssociation(client=c))

    @property
    def schedules(self):
        return list(chain(*[c.schedules for c in self.client_associations]))

class Client(User):
    __tablename__ = 'client'
    __mapper_args__ = {'polymorphic_identity': 'client'}

    id = Column(Integer, ForeignKey('user.id'), primary_key = True)

    supervisors = association_proxy("supervisor_associations", "supervisor", 
                        creator=lambda s: SupervisionAssociation(supervisor=s))
    @property
    def schedules(self):
        return list(chain(*[s.schedules for s in self.supervisor_associations]))

class Schedule(Base):
    __tablename__ = 'schedule'
    __table_args__ = (
        ForeignKeyConstraint(['client_id', 'supervisor_id'], 
        ['supervision.client_id', 'supervision.supervisor_id']),
    )

    id = Column(Integer, primary_key=True)
    client_id = Column(Integer, nullable=False)
    supervisor_id = Column(Integer, nullable=False)
    client = association_proxy("supervisor_association", "client")

engine = create_engine('sqlite:///temp.db', echo=True)
db_session = scoped_session(sessionmaker(bind=engine))
Base.metadata.create_all(bind=engine)

c1, c2 = Client(), Client()
sp1, sp2 = Supervisor(), Supervisor()
sch1, sch2, sch3 = Schedule(), Schedule(), Schedule()

sp1.clients = [c1]
c2.supervisors = [sp2]
c2.supervisor_associations[0].schedules = [sch1, sch2]
c1.supervisor_associations[0].schedules = [sch3]

db_session.add_all([c1, c2, sp1, sp2, ])
db_session.commit()


print c1.schedules
print sp2.schedules
</snippet></ROW><ROW><id>8962116</id><snippet>In [1]: import networkx as nx

In [2]: import random

In [3]: G = nx.path_graph(10)

In [4]: for u,v in G.edges():
   ...:     G[u][v]['weight'] = random.paretovariate(2)
   ...:     
   ...:     

In [5]: print G.edges(data=True)
[(0, 1, {'weight': 1.6988521989583232}), (1, 2, {'weight': 1.0749963615177736}), (2, 3, {'weight': 1.1503859779558812}), (3, 4, {'weight': 1.675436575683888}), (4, 5, {'weight': 1.1948608572552846}), (5, 6, {'weight': 1.080152340891444}), (6, 7, {'weight': 1.0296667672332183}), (7, 8, {'weight': 2.0014384064255446}), (8, 9, {'weight': 2.2691612212058447})]
</snippet></ROW><ROW><id>8962461</id><snippet>#!/usr/bin/env python
import cgi
import fileinput
import os
import shutil
import sys

def textfiles(rootdir, extensions=('.txt',)):
    for dirpath, dirs, files in os.walk(rootdir):
        for f in files:
            if f.lower().endswith(extensions):
               yield os.path.join(dirpath, f)

def htmlfiles(files):
    for f in files:
        root, _ = os.path.splitext(f)
        newf = root + '.html'
        shutil.copy2(f, newf)
        yield newf

for line in fileinput.input(htmlfiles(textfiles(sys.argv[1])), inplace=True):
    if fileinput.isfirstline():
       klass = 'aaa' # start head part
    line = cgi.escape(line.decode('utf-8').strip())
    line = line.encode('ascii', 'xmlcharrefreplace')
    if not line: # empty line
       klass = 'bbb' # start tail part
       print(line)
    else:
       print('&lt;p class="%s"&gt;%s&lt;/p&gt;' % (klass, line))
</snippet></ROW><ROW><id>8962461</id><snippet>$ python txt2html.py c:\root\dir
</snippet></ROW><ROW><id>8962511</id><snippet>def display_menu():
    menu_text = """\
  Draw a Shape
  ============

  1 - Draw a triangle
  2 - Draw a square
  D - Display what was drawn
  X - Exit"""
    print menu_text
</snippet></ROW><ROW><id>8962511</id><snippet>display_menu</snippet></ROW><ROW><id>8962511</id><snippet>options = ['1', '2', 'D', 'X']

while 1:
    choice = raw_input('  Enter your choice: ')
    if choice in options:
        break
    else:
        print 'Try Again!'
</snippet></ROW><ROW><id>8962511</id><snippet>def exit():
    """Exit"""  # this is a docstring we'll use it later
    return 0

def display_drawn():
    """Display what was drawn"""
    print 'display what was drawn'

def draw_triangle():
    """Draw a triangle"""
    print 'triangle'

def draw_square():
    """Draw a square"""
    print 'square'
</snippet></ROW><ROW><id>8962511</id><snippet>def main():
    options = {'1': draw_triangle,
               '2': draw_square,
               'D': display_drawn,
               'X': exit}

    display_menu()
    while 1:
        choice = raw_input('  Enter your choice: ').upper()
        if choice in options:
            break
        else:
            print 'Try Again!'

    action = options[choice]   # here we get the right function
    action()     # here we call that function
</snippet></ROW><ROW><id>8962511</id><snippet>options</snippet></ROW><ROW><id>8962511</id><snippet>list</snippet></ROW><ROW><id>8962511</id><snippet>dict</snippet></ROW><ROW><id>8962511</id><snippet>if choice in options</snippet></ROW><ROW><id>8962511</id><snippet>['1', '2', 'D', 'X']</snippet></ROW><ROW><id>8962511</id><snippet>options['X']</snippet></ROW><ROW><id>8962511</id><snippet>options</snippet></ROW><ROW><id>8962511</id><snippet>options</snippet></ROW><ROW><id>8962511</id><snippet>display_manu</snippet></ROW><ROW><id>8962511</id><snippet>display_menu</snippet></ROW><ROW><id>8962511</id><snippet>__doc__</snippet></ROW><ROW><id>8962511</id><snippet>def display_menu(opt):
    header = """\
  Draw a Shape
  ============

"""
    menu = '\n'.join('{} - {}'.format(k,func.__doc__) for k,func in opt.items())
    print header + menu
</snippet></ROW><ROW><id>8962511</id><snippet>OrderedDict</snippet></ROW><ROW><id>8962511</id><snippet>dict</snippet></ROW><ROW><id>8962511</id><snippet>options</snippet></ROW><ROW><id>8962511</id><snippet>OrderedDict</snippet></ROW><ROW><id>8962511</id><snippet>def main():
    options = OrderedDict((('1', draw_triangle),
                           ('2', draw_square),
                           ('D', display_drawn),
                           ('X', exit)))

    display_menu(options)
    while 1:
        choice = raw_input('  Enter your choice: ').upper()
        if choice in options:
            break
        else:
            print 'Try Again!'

    action = options[choice]
    action()
</snippet></ROW><ROW><id>8962511</id><snippet>__call__</snippet></ROW><ROW><id>8962511</id><snippet>Action</snippet></ROW><ROW><id>8962717</id><snippet>out.py</snippet></ROW><ROW><id>8962717</id><snippet>import sys
import time

def main():
    while True:
        print "test"
        sys.stdout.flush()
        time.sleep(10)
main()
</snippet></ROW><ROW><id>8962717</id><snippet>arpwatch</snippet></ROW><ROW><id>8962760</id><snippet>&gt;&gt;&gt; re.findall(r'NAME (.+) VER (.+) DATE (.+)', 'NAME Test VER 2.00 DATE 1/2/12')
[('Test', '2.00', '1/2/12')]
</snippet></ROW><ROW><id>8963081</id><snippet>PyQt</snippet></ROW><ROW><id>8963081</id><snippet>QTableView</snippet></ROW><ROW><id>8963081</id><snippet>QAbstractItemView</snippet></ROW><ROW><id>8963081</id><snippet>clicked</snippet></ROW><ROW><id>8963081</id><snippet>QTableView</snippet></ROW><ROW><id>8963081</id><snippet>QAbstractItemView</snippet></ROW><ROW><id>8963081</id><snippet>index</snippet></ROW><ROW><id>8963081</id><snippet>QModelIndex</snippet></ROW><ROW><id>8963081</id><snippet>row</snippet></ROW><ROW><id>8963081</id><snippet>PySide</snippet></ROW><ROW><id>8963132</id><snippet>self.Bind(wx.EVT_LISTBOX_DCLICK, self.doubleclick, self.serverlistbox)
</snippet></ROW><ROW><id>8963132</id><snippet>serverfilelist</snippet></ROW><ROW><id>8963132</id><snippet>doubleclick</snippet></ROW><ROW><id>8963132</id><snippet>self.serverfilelist = serverfilelist
self.serverlistbox = wx.ListBox(panel1, -1, (300,80), (180,180), self.serverfilelist, wx.LB_SINGLE)
self.serverlistbox.SetSelection(0)

self.Bind(wx.EVT_LISTBOX_DCLICK, self.doubleclick, self.serverlistbox)

def doubleclick(self, event):
    index = event.GetSelection()
    downloadselect = self.serverfilelist[index]
    wx.MessageBox('Starting download of %s' % str(downloadselect)
</snippet></ROW><ROW><id>8963132</id><snippet>self.serverlistbox = wx.ListBox(panel1, ....  
</snippet></ROW><ROW><id>8963132</id><snippet>self.serverlistbox.GetSelection</snippet></ROW><ROW><id>8963132</id><snippet>downloadselect = self.serverlistbox.GetStringSelection()
</snippet></ROW><ROW><id>8963132</id><snippet>def doubleclick(self, event):
    downloadselect = self.serverlistbox.GetStringSelection()
    wx.MessageBox('Starting download of %s' % downloadselect
</snippet></ROW><ROW><id>8963229</id><snippet>HASH</snippet></ROW><ROW><id>8963229</id><snippet>shelve</snippet></ROW><ROW><id>8963239</id><snippet>QCoreApplication.processEvents()</snippet></ROW><ROW><id>8963239</id><snippet>for</snippet></ROW><ROW><id>8963650</id><snippet>from scipy.special import exp, erfc

def erfcx(x):
    if x &lt; 25:
        return erfc(x) * exp(x*x)
    else:
        y = 1. / x
        z = y * y
        s = y*(1.+z*(-0.5+z*(0.75+z*(-1.875+z*(6.5625-29.53125*z)))))
        return s * 0.564189583547756287
</snippet></ROW><ROW><id>8963812</id><snippet>utf-8</snippet></ROW><ROW><id>8963812</id><snippet>unicode</snippet></ROW><ROW><id>8963812</id><snippet>write</snippet></ROW><ROW><id>8963812</id><snippet>sys.stdout</snippet></ROW><ROW><id>8963812</id><snippet>encoding</snippet></ROW><ROW><id>8963854</id><snippet>cd C:\Users\Claire\Documents\Python_projects\Python_Open_Source\Whoosh-2.3.2\

python ./setup.py build
python ./setup.py install
</snippet></ROW><ROW><id>8963854</id><snippet>http://packages.python.org/Whoosh/</snippet></ROW><ROW><id>8964034</id><snippet>def parse(string):
    d = {'G' : 0, 'O' : 0, 'D' : 0}
    d = {s: string.count(s) for s in string if s in d }
    try:
        d['O'] /= 2
    except KeyError:
        return 0
    return min(d.values())

file = open("test1.py").read().split('\n')
print( "\n".join( [("Case #%d: %d" % (i, parse(file[i]))) for i in range(1, len(file))]))
</snippet></ROW><ROW><id>8964208</id><snippet>all(isinstance(n, int) for n in lst)
</snippet></ROW><ROW><id>8964208</id><snippet>In [3]: lst = (1,2,3)

In [4]: all(isinstance(n, int) for n in lst)
Out[4]: True

In [5]: lst = (1,2,'3')

In [6]: all(isinstance(n, int) for n in lst)
Out[6]: False
</snippet></ROW><ROW><id>8964208</id><snippet>isinstance(n, int)</snippet></ROW><ROW><id>8964208</id><snippet>type(n) is int</snippet></ROW><ROW><id>8964238</id><snippet>get_query_set</snippet></ROW><ROW><id>8964238</id><snippet>class MyClass(object):
   @classmethod
   def foo(cls):
       print "i'm a class: {0}".format(cls)
# i'm a class: __main__.MyClass

class MyClass(object):
   def foo(self):
       print "i'm a class instance: {0}".format(self)
# i'm a class instance: &lt;__main__.MyClass instance at 0x1064abef0&gt;
</snippet></ROW><ROW><id>8964254</id><snippet>redirect(to[, permanent=False], *args, **kwargs) 
</snippet></ROW><ROW><id>8964254</id><snippet>def someview(request):
    #Get your number
    #Add to total using total+=number
    return redirect('/your/desired/url')
</snippet></ROW><ROW><id>8964504</id><snippet># basic_test.py
class BasicTest(unittest.TestCase):

  @staticmethod
  def main():
     # Do optparse stuff
     unittest.main()

if __name__ == '__main__':
  BasicTest.main()



# some_basic_test.py
class SomeBasicTest(BasicTest):
   ...

if __name__ == '__main__':
  BasicTest.main()
</snippet></ROW><ROW><id>8964779</id><snippet>genfromtxt</snippet></ROW><ROW><id>8964779</id><snippet>loadtxt</snippet></ROW><ROW><id>8964779</id><snippet>loadtxt</snippet></ROW><ROW><id>8964779</id><snippet>numpy.fromiter</snippet></ROW><ROW><id>8964779</id><snippet>np.loadtxt('yourfile.txt', delimiter=',')</snippet></ROW><ROW><id>8964779</id><snippet>skiprows</snippet></ROW><ROW><id>8964779</id><snippet>loadtxt</snippet></ROW><ROW><id>8964779</id><snippet>genfromtxt</snippet></ROW><ROW><id>8964779</id><snippet>loadtxt</snippet></ROW><ROW><id>8964779</id><snippet>genfromtxt</snippet></ROW><ROW><id>8964779</id><snippet>import numpy as np

def generate_text_file(length=1e6, ncols=20):
    data = np.random.random((length, ncols))
    np.savetxt('large_text_file.csv', data, delimiter=',')

def iter_loadtxt(filename, delimiter=',', skiprows=0, dtype=float):
    def iter_func():
        with open(filename, 'r') as infile:
            for _ in range(skiprows):
                next(infile)
            for line in infile:
                line = line.rstrip().split(delimiter)
                for item in line:
                    yield dtype(item)
        iter_loadtxt.rowlength = len(line)

    data = np.fromiter(iter_func(), dtype=dtype)
    data = data.reshape((-1, iter_loadtxt.rowlength))
    return data

#generate_text_file()
data = iter_loadtxt('large_text_file.csv')
</snippet></ROW><ROW><id>8965126</id><snippet>string = ''.join(l)
</snippet></ROW><ROW><id>8965126</id><snippet>join()</snippet></ROW><ROW><id>8965126</id><snippet>', '.join(['a', 'b'])</snippet></ROW><ROW><id>8965126</id><snippet>'a, b'</snippet></ROW><ROW><id>8965126</id><snippet>join</snippet></ROW><ROW><id>8965126</id><snippet>''</snippet></ROW><ROW><id>8965126</id><snippet>list</snippet></ROW><ROW><id>8965126</id><snippet>l</snippet></ROW><ROW><id>8965196</id><snippet>inspectdb</snippet></ROW><ROW><id>8965276</id><snippet>class Foo:
    pass
</snippet></ROW><ROW><id>8965276</id><snippet>object</snippet></ROW><ROW><id>8965276</id><snippet>class Foo(object):
    pass
</snippet></ROW><ROW><id>8965314</id><snippet>collection.ensureIndex({"pricing.Date" : 1}) 
</snippet></ROW><ROW><id>8965314</id><snippet>update()</snippet></ROW><ROW><id>8965314</id><snippet>collection</snippet></ROW><ROW><id>8965314</id><snippet>collection</snippet></ROW><ROW><id>8965314</id><snippet>newpricingdata</snippet></ROW><ROW><id>8965314</id><snippet>collection.update({ "_id" : ObjectId("4f1c567d60de7d0908000000")}, { '$pushAll' : { 'pricing' : newpricingdata } }, false, false); 
</snippet></ROW><ROW><id>8965461</id><snippet># assuming which duplicate is removed doesn't matter...
for row in MyModel.objects.all():
    if MyModel.objects.filter(photo_id=row.photo_id).count() &gt; 1:
        row.delete()
</snippet></ROW><ROW><id>8965563</id><snippet>#include &lt;Python.h&gt;</snippet></ROW><ROW><id>8965563</id><snippet>/usr/lib/ao/plugins-4/libalsa.so</snippet></ROW><ROW><id>8965563</id><snippet>debug</snippet></ROW><ROW><id>8965563</id><snippet>~/.libao.conf</snippet></ROW><ROW><id>8965563</id><snippet>libalsa.so</snippet></ROW><ROW><id>8965563</id><snippet>$ ldd -r /usr/lib/ao/plugins-4/libalsa.so &gt; /dev/null
undefined symbol: ao_is_big_endian      (/usr/lib/ao/plugins-4/libalsa.so)
</snippet></ROW><ROW><id>8965563</id><snippet>libao-*/src/plugins/alsa/ao_alsa.c</snippet></ROW><ROW><id>8965563</id><snippet>ao_is_big_endian</snippet></ROW><ROW><id>8965574</id><snippet>cursor.execute("""INSERT into main_app_financialstatements
  (statement_id, provider_id, url, date)
VALUES (%s, (SELECT id FROM main_app_provider WHERE provider=%s), %s, %s)""",
  (statement_id, provider, url, date))
</snippet></ROW><ROW><id>8965753</id><snippet>PyList_GetItem</snippet></ROW><ROW><id>8965753</id><snippet>PyList_SetItem</snippet></ROW><ROW><id>8965753</id><snippet>NULL</snippet></ROW><ROW><id>8965753</id><snippet>PyObject *temp = PyList_GetItem(origList, *current_ptr);
if (temp == NULL) {
    Py_DECREF(shuffledList);
    return NULL;
}
</snippet></ROW><ROW><id>8965753</id><snippet>PyList_SET_ITEM(shuffledList, m, temp);
Py_INCREF(temp);
</snippet></ROW><ROW><id>8965753</id><snippet>PyList_SET_ITEM</snippet></ROW><ROW><id>8965753</id><snippet>shuffledList</snippet></ROW><ROW><id>8965753</id><snippet>shuffledList</snippet></ROW><ROW><id>8965753</id><snippet>return Py_BuildValue("O", shuffledList);
</snippet></ROW><ROW><id>8965753</id><snippet>Py_INCREF(shuffledList);
return shuffledList;
</snippet></ROW><ROW><id>8965753</id><snippet>return shuffledList;
</snippet></ROW><ROW><id>8966099</id><snippet>def whatever(input):
    """
    &gt;&gt;&gt; whatever(0)
    '0'
    &gt;&gt;&gt; whatever(1)
    '10'
    &gt;&gt;&gt; whatever(2)
    '1110'
    &gt;&gt;&gt; whatever(3)
    '3110'
    &gt;&gt;&gt; whatever(4)
    '132110'
    &gt;&gt;&gt; whatever(5)
    '1113122110'
    """
    def looksay(input, result):
        if not input:
            return result
        else:
            left, right = input[0], input[1:]
            if not result:
                result = '1' + left
            else:
                left_result, count, right_result = result[:-2], int(result[-2]), result[-1]
                if left == right_result:
                    result = left_result + str(count + 1) + right_result
                else:
                    result = result + '1' + left
            return looksay(right, result)
    def helper(number, result):
        if number == 0:
            return result
        else:
            return helper(number - 1, looksay(result, ''))
    return helper(input, '0')

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>8966494</id><snippet>filter_horizontal</snippet></ROW><ROW><id>8966494</id><snippet>class ChoicesAdmin(admin.ModelAdmin):
    list_display = ['description']

class ProfilesAdmin(admin.ModelAdmin):
    list_display = ['user']
    filter_horizontal = ['planguages']

admin.site.register(UserProfile, ProfilesAdmin)
admin.site.register(Choices, ChoicesAdmin)
</snippet></ROW><ROW><id>8966627</id><snippet>key</snippet></ROW><ROW><id>8966627</id><snippet>key</snippet></ROW><ROW><id>8966627</id><snippet>lambda</snippet></ROW><ROW><id>8966627</id><snippet>sorted</snippet></ROW><ROW><id>8966627</id><snippet>lambda</snippet></ROW><ROW><id>8966627</id><snippet>lambda</snippet></ROW><ROW><id>8966627</id><snippet>lambda</snippet></ROW><ROW><id>8966627</id><snippet>while</snippet></ROW><ROW><id>8966627</id><snippet>for,</snippet></ROW><ROW><id>8966627</id><snippet>adder_lambda = lambda parameter1,parameter2: parameter1+parameter2
def adder_regular(parameter1, parameter2): return parameter1+parameter2
</snippet></ROW><ROW><id>8966627</id><snippet>variable</snippet></ROW><ROW><id>8966844</id><snippet>from django.db.models.query import ValuesListQuerySet

def default(o):
    if isinstance(o, ValuesListQuerySet):
        return list(o)
    raise TypeError(repr(o) + " is not JSON serializable")

json.dumps(valueListObject, default=default)
</snippet></ROW><ROW><id>8967097</id><snippet>if (item in companies.keys()) or (item in companies.values()):
    append item
</snippet></ROW><ROW><id>8967097</id><snippet>(x in y)</snippet></ROW><ROW><id>8967097</id><snippet>or</snippet></ROW><ROW><id>8967097</id><snippet>item in companies.keys()</snippet></ROW><ROW><id>8967097</id><snippet>.keys()</snippet></ROW><ROW><id>8967097</id><snippet>if (item in companies) or (item in companies.values()):
    append item
</snippet></ROW><ROW><id>8967097</id><snippet>if item in companies or item in companies.values():
    append item
</snippet></ROW><ROW><id>8967126</id><snippet>  district=x[0]
  vote1=x[1]
  votemil=x[2]
  spaceindex=[m.start() for m in re.finditer(' ', votemil)][-1]
  vote2=votemil[:spaceindex]
  mills=votemil[spaceindex+1:]
  votetype=x[4]
  numyears=x[6]
  yearcom=x[8]
  yeardue=x[10]
  reason=x[11]
  data = [filename,county,district, vote1, vote2, mills, votetype, numyears, yearcom, yeardue, reason]
  print "data",data
</snippet></ROW><ROW><id>8967126</id><snippet>data = SomeSensibleName( 
    district= x[0], 
    vote1=x[1], ... etc.
)
</snippet></ROW><ROW><id>8967126</id><snippet>analyze</snippet></ROW><ROW><id>8967126</id><snippet>for p in ( some, list, of, functions ):
    match= p(data)
    if match: 
        return match
</snippet></ROW><ROW><id>8967126</id><snippet>None</snippet></ROW><ROW><id>8967179</id><snippet>d = {(dog, smurf): 40}
print d[(dog, smurf)] # 40
</snippet></ROW><ROW><id>8967254</id><snippet>"SELECT * FROM album WHERE artist LIKE '%Audiosl%'"</snippet></ROW><ROW><id>8967254</id><snippet>T Audios1</snippet></ROW><ROW><id>8967254</id><snippet>Audios123</snippet></ROW><ROW><id>8967254</id><snippet>T Audios123</snippet></ROW><ROW><id>8967258</id><snippet>in</snippet></ROW><ROW><id>8967258</id><snippet>pythonOperator</snippet></ROW><ROW><id>8967258</id><snippet>pythonOperator</snippet></ROW><ROW><id>8967258</id><snippet>Operator</snippet></ROW><ROW><id>8967258</id><snippet>Statement</snippet></ROW><ROW><id>8967258</id><snippet>Operator</snippet></ROW><ROW><id>8967258</id><snippet>Normal</snippet></ROW><ROW><id>8967258</id><snippet>+</snippet></ROW><ROW><id>8967258</id><snippet>*</snippet></ROW><ROW><id>8967258</id><snippet>Statement</snippet></ROW><ROW><id>8967258</id><snippet>pythonOperator</snippet></ROW><ROW><id>8967258</id><snippet>Statement</snippet></ROW><ROW><id>8967508</id><snippet>python setup.py build
sudo python setup.py install
</snippet></ROW><ROW><id>8967932</id><snippet>reverse</snippet></ROW><ROW><id>8967932</id><snippet>  kwargs = dict()
  kwargs['company_name'] = company_name
  kwargs['start_date'] = start_date
  kwargs['close_date'] = close_date
  kwargs['batch_no'] = batch_no
  return HttpResponse(reverse('charges_report',kwargs=kwargs))
</snippet></ROW><ROW><id>8967932</id><snippet>datetime.date(2012, 1, 3)</snippet></ROW><ROW><id>8967932</id><snippet>start_date</snippet></ROW><ROW><id>8967932</id><snippet>start_date</snippet></ROW><ROW><id>8967932</id><snippet>close_date</snippet></ROW><ROW><id>8967932</id><snippet>kwargs['start_date'] = "{}".format(start_date)
kwargs['close_date'] = "{}".format(close_date)
</snippet></ROW><ROW><id>8968296</id><snippet>Counter</snippet></ROW><ROW><id>8968296</id><snippet>from collections import Counter

ages = [23,23,43,54,34,22,43,23]

histogram = Counter(ages)

for age,count in sorted(histogram.items()):
    print "Age: %d Number of people: %d"%(age,count)
</snippet></ROW><ROW><id>8968296</id><snippet>dict</snippet></ROW><ROW><id>8968296</id><snippet>dict</snippet></ROW><ROW><id>8968296</id><snippet>histogram = dict(Counter(args))
</snippet></ROW><ROW><id>8968492</id><snippet>xargs</snippet></ROW><ROW><id>8968492</id><snippet>-P</snippet></ROW><ROW><id>8968492</id><snippet>ls files* | awk '{print $1,$1".out"}' | xargs -P 4 -n 2 python fastq_groom.py
</snippet></ROW><ROW><id>8968536</id><snippet>class B(A):
    def rec(self):
        return super().rec() + 1
</snippet></ROW><ROW><id>8968536</id><snippet>rec()</snippet></ROW><ROW><id>8968536</id><snippet>rec_gen()</snippet></ROW><ROW><id>8968536</id><snippet>class A(object):
    def rec(self):
        return 1

class B(A):
    def rec(self):
        # __class__ is a cell that is only created if super() is in the method
        super()
        return self.rec_gen(__class__)

    def rec_gen(self, rec_class):
        return super(rec_class, self).rec() + 1

class C(B):
    def rec(self):
        # __class__ is a cell that is only created if super() is in the method
        super()
        return self.rec_gen(__class__)
</snippet></ROW><ROW><id>8968536</id><snippet>super</snippet></ROW><ROW><id>8968536</id><snippet>class B(A):
    def __init__(self):
        self.__super = super(B)

    def rec(self):
        return self.__super.rec() + 1
</snippet></ROW><ROW><id>8968536</id><snippet>class B(A, autosuper):
    def rec(self):
        return self.super().rec() + 1
</snippet></ROW><ROW><id>8968536</id><snippet>class B(A, autosuper):
    def rec(self):
        return self.super() + 1
</snippet></ROW><ROW><id>8968536</id><snippet>rec_gen()</snippet></ROW><ROW><id>8968536</id><snippet>_getSuper()</snippet></ROW><ROW><id>8968657</id><snippet>if</snippet></ROW><ROW><id>8968657</id><snippet>for</snippet></ROW><ROW><id>8968657</id><snippet>while</snippet></ROW><ROW><id>8968657</id><snippet>module</snippet></ROW><ROW><id>8968657</id><snippet>i = path.rfind('.')
module, attr = path[:i], path[i+1:]

print i
#or
import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>8968690</id><snippet>from Crypto.Cipher import AES
import base64
import os

    # the block size for the cipher object; must be 16, 24, or 32 for AES
    BLOCK_SIZE = 16
    mode = AES.MODE_CBC
    secret = "1234567890123456" #os.urandom(BLOCK_SIZE)

    # create a cipher object using the random secret
    cipher = AES.new(secret,mode)

    # encode a string
    #tx=cipher.encrypt('1234567890123456')
    #print base64.b64encode(tx)

    myData='aaaaaaaaaaaaaaaa'
    #encoded = EncodeAES(cipher, myData)
    encoded = cipher.encrypt(myData)
    print 'Encrypted string:', base64.b64encode(encoded)
    mode = AES.MODE_ECB
    cipher=AES.new(secret,mode)
    decoded = cipher.decrypt(encoded)
    print 'Decrypted string:', decoded
</snippet></ROW><ROW><id>8968690</id><snippet>CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionECBMode,keyPtr, CCKeySizeAES128, NULL,[self bytes], dataLength,  buffer, bufferSize,  &amp;numBytesEncrypted);
</snippet></ROW><ROW><id>8968914</id><snippet>&gt;&gt;&gt; from unidecode import unidecode
&gt;&gt;&gt; unidecode(u"İstanbul")
'Istanbul'
</snippet></ROW><ROW><id>8968914</id><snippet>unidecode</snippet></ROW><ROW><id>8968914</id><snippet>&gt;&gt;&gt; unidecode(u"\u5317\u4EB0")
'Bei Jing '
</snippet></ROW><ROW><id>8968969</id><snippet>with open('filename', 'w') as f:
    var = {1 : 'a' , 2 : 'b'}
    pickle.dump(var, f)
</snippet></ROW><ROW><id>8968969</id><snippet>var</snippet></ROW><ROW><id>8968986</id><snippet>forEach</snippet></ROW><ROW><id>8968986</id><snippet>reduce</snippet></ROW><ROW><id>8968986</id><snippet>Object.keys</snippet></ROW><ROW><id>8968986</id><snippet>var word_groups = sentences.reduce(function (groups, sentence) {
  var val = sentence.actual_val
  var group = groups[val] = groups[val] || []
  stemmed_words(sentence.str_).forEach(function (t) {
    if (!(t in group)) group.push(t)
  })
  return groups
}, {})
</snippet></ROW><ROW><id>8969269</id><snippet>foreign key</snippet></ROW><ROW><id>8969269</id><snippet>reference property</snippet></ROW><ROW><id>8969269</id><snippet>None</snippet></ROW><ROW><id>8969269</id><snippet>import_transform: transform.create_foreign_key('MyOtherModel')
</snippet></ROW><ROW><id>8969269</id><snippet>value does not exist</snippet></ROW><ROW><id>8969269</id><snippet>'othercolumn','','anohtercolumn'</snippet></ROW><ROW><id>8969269</id><snippet>'othercolumn',,'anohtercolumn'</snippet></ROW><ROW><id>8969269</id><snippet>import-transform: "lambda x: [x, None][x=='']"
</snippet></ROW><ROW><id>8969667</id><snippet>import hashlib
class Image(models.Model):
#...
    def save(self, *args, **kwargs):
        super(Image, self).save(*args, **kwargs)
        f = self.image_file.open('rb')
        hash = hashlib.sha1()
        if f.multiple_chunks():
           for chunk in f.chunks():
              hash.update(chunk)
        else:    
              hash.update(f.read())
        f.close()
        self.sha1 =  hash.hexdigest()
        self.filesize = self.image_file.size 
</snippet></ROW><ROW><id>8970543</id><snippet>def open_spider(self, spider):
   print spider.name

def close_spider(self, spider):
   print spider.name

def item_scraped(self, item, spider):
   print spider.name
</snippet></ROW><ROW><id>8970565</id><snippet>re.split()</snippet></ROW><ROW><id>8970565</id><snippet>&gt;&gt;&gt; re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)
['aaa bbb ccc ', 'ddd', ' eee fff']
</snippet></ROW><ROW><id>8970565</id><snippet>&gt;&gt;&gt; 'aaa bbb ccc ddd eee fff'.partition('ddd')
('aaa bbb ccc ', 'ddd', ' eee fff')
</snippet></ROW><ROW><id>8970565</id><snippet>&gt;&gt;&gt; re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)
['aaa bbb ccc ', 'ddd', 'd', ' eee fff']
</snippet></ROW><ROW><id>8971046</id><snippet>data</snippet></ROW><ROW><id>8971046</id><snippet>&gt;&gt;&gt; data['notifications']
[{u'item': {u'unreadCount': 0}, u'type': u'notificationTray'}]

&gt;&gt;&gt; data['notifications']['item']['unreadCount']
0

&gt;&gt;&gt; data['response']['checkins']['count']
6

&gt;&gt;&gt; data['response']['checkins']['items'][0]
    {u'comments': {u'count': 0, u'items': []},
     u'createdAt': 1327307072,
     u'id': u'4f1d1940e4b0d1a657597d73',
     u'photos': {u'count': 0, u'items': []},
     u'timeZone': u'Asia/Colombo',
     u'type': u'checkin',
     u'venue': {u'categories': [],
                u'contact': {},
                u'id': u'4d217410b69c6dcbf1787995',
                u'location': {u'address': u'Highlevel Rd',
                              u'city': u'Colombo',
                             u'country': u'Sri Lanka',
                              u'lat': 6.8754399960498391,
                              u'lng': 79.881239696240982,
                              u'postalCode': u'00600',
                              u'state': u'Western Province'},
                u'name': u'ODEL Warehouse',
                u'stats': {u'checkinsCount': 76,
                           u'tipCount': 2,
                           u'usersCount': 25},
                u'verified': False}}
</snippet></ROW><ROW><id>8971046</id><snippet>id</snippet></ROW><ROW><id>8971046</id><snippet>&gt;&gt;&gt; data['response']['checkins']['items'][0]['id']
u'4f1d1940e4b0d1a657597d73'
</snippet></ROW><ROW><id>8971046</id><snippet>&gt;&gt;&gt; data['response']['checkins']['items'][0]['comments']['items'][0]
</snippet></ROW><ROW><id>8971113</id><snippet>line</snippet></ROW><ROW><id>8971113</id><snippet>line-segment</snippet></ROW><ROW><id>8971113</id><snippet>circle</snippet></ROW><ROW><id>8971113</id><snippet>sphere</snippet></ROW><ROW><id>8971113</id><snippet>3D</snippet></ROW><ROW><id>8971114</id><snippet>from logging.handlers import SysLogHandler
import logging

logger = logging.getLogger()
logger.addHandler(SysLogHandler('/dev/log'))
logger.addHandler(logging.FileHandler("filename.log"))

logging.warn("Hello world")
</snippet></ROW><ROW><id>8971412</id><snippet>Gtk.ScrolledWindow
  Gtk.Grid
    Gtk.Button
    Gtk.Button
    ...
    Gtk.Button
</snippet></ROW><ROW><id>8971412</id><snippet>Gtk.Grid</snippet></ROW><ROW><id>8971412</id><snippet>Gtk.Table</snippet></ROW><ROW><id>8971412</id><snippet>Gtk.Image</snippet></ROW><ROW><id>8971412</id><snippet>Gtk.Button</snippet></ROW><ROW><id>8971799</id><snippet>key_field</snippet></ROW><ROW><id>8971799</id><snippet>commit=False</snippet></ROW><ROW><id>8971799</id><snippet>key_field</snippet></ROW><ROW><id>8971799</id><snippet>class BBBForm(forms.ModelForm):
    class Meta:
        model = BBB
        exclude = ("key_field",)

def create_view(request, **kwargs):
    if request.method == "POST":
        aaa = # get aaa from url, session or somewhere else
        form = BBBForm(request.POST)
        if form.is_valid():
            bbb = form.save(commit=False)
            bbb.key_field = aaa
            bbb.save()
            return HttpResponseRedirect("/success-url/")
        ...
</snippet></ROW><ROW><id>8971878</id><snippet>[0]</snippet></ROW><ROW><id>8971878</id><snippet>[:1][0]</snippet></ROW><ROW><id>8972020</id><snippet>import matplotlib.pyplot as pyplot

x = [0, 1, 2, 3, 4]
y = [xx*xx for xx in x]

fig = pyplot.figure(figsize=(3,3))
ax  = fig.add_subplot(111)

#box = ax.get_position()
#ax.set_position([0.3, 0.4, box.width*0.3, box.height])
# you can set the position manually, with setting left,buttom, witdh, hight of the axis
# object
ax.set_position([0.1,0.1,0.5,0.8])
ax.plot(x, y)
leg = ax.legend(['abc'], loc = 'center left', bbox_to_anchor = (1.0, 0.5))

fig.savefig('aaa.png')
</snippet></ROW><ROW><id>8972026</id><snippet>normData = (data-data.mean(axis = 0))/data.std(axis = 0)
c = numpy.dot(numpy.linalg.pinv(normData),prices)
</snippet></ROW><ROW><id>8972026</id><snippet>i</snippet></ROW><ROW><id>8972104</id><snippet>range</snippet></ROW><ROW><id>8972104</id><snippet>xrange</snippet></ROW><ROW><id>8972104</id><snippet>long</snippet></ROW><ROW><id>8972104</id><snippet>range</snippet></ROW><ROW><id>8972104</id><snippet>xrange</snippet></ROW><ROW><id>8972104</id><snippet>range()</snippet></ROW><ROW><id>8972104</id><snippet>&gt;&gt;&gt; range(2**128)
range(0, 340282366920938463463374607431768211456)
</snippet></ROW><ROW><id>8972104</id><snippet>range()</snippet></ROW><ROW><id>8972104</id><snippet>xrange()</snippet></ROW><ROW><id>8972104</id><snippet>range()</snippet></ROW><ROW><id>8972104</id><snippet>xrange()</snippet></ROW><ROW><id>8972104</id><snippet>xrange</snippet></ROW><ROW><id>8972104</id><snippet>xrange()</snippet></ROW><ROW><id>8972104</id><snippet>2**128 in range(2**128)
</snippet></ROW><ROW><id>8972104</id><snippet>i = 0
while i&lt;N:
    doSomething(i)
    i += 1
</snippet></ROW><ROW><id>8972104</id><snippet>N</snippet></ROW><ROW><id>8972104</id><snippet>N</snippet></ROW><ROW><id>8972181</id><snippet>new_d = []
for x in d:
  if x not in new_d:
    new_d.append(x)
</snippet></ROW><ROW><id>8972248</id><snippet>def Bob():
    global gCharlie
    global gJeff
    Charlie=gCharlie
</snippet></ROW><ROW><id>8972248</id><snippet> x=5

 def useX():
     x=0     #this is a local variable
     print "in function: ", x

 def main():
     print "in main(1): ", x
     useX()
     print "in main(2): ", x

 main()
</snippet></ROW><ROW><id>8972248</id><snippet>in main(1):  5 
in function:  0
in main(2):  5
</snippet></ROW><ROW><id>8972547</id><snippet>class SimpleApp(object):
    def createGUI(self):
        ...
        self.txtName=Entry(sideframe)
        self.txtName.grid(row=0,column=1)

    def create(self):
        ...
        name=self.txtName.get()
</snippet></ROW><ROW><id>8972547</id><snippet>txtName</snippet></ROW><ROW><id>8972547</id><snippet>self</snippet></ROW><ROW><id>8972547</id><snippet>self.txtName</snippet></ROW><ROW><id>8972899</id><snippet>$_FILES</snippet></ROW><ROW><id>8972899</id><snippet>POST</snippet></ROW><ROW><id>8972899</id><snippet>request.POST</snippet></ROW><ROW><id>8972899</id><snippet># access the filename
filename = request.POST['Filedata'].filename

# access the actual file
input_file = request.POST['Filedata'].file
</snippet></ROW><ROW><id>8972899</id><snippet>$_FILES</snippet></ROW><ROW><id>8973063</id><snippet>env = Environment(..., ENV = os.environ)
</snippet></ROW><ROW><id>8973063</id><snippet>os.environ['PATH'] = matlabPath + '/bin:' +  os.environ['PATH'];
</snippet></ROW><ROW><id>8973063</id><snippet>/Applications/MATLAB_R2009b.app
</snippet></ROW><ROW><id>8973302</id><snippet>**kwargs</snippet></ROW><ROW><id>8973302</id><snippet>*args</snippet></ROW><ROW><id>8973302</id><snippet>Base</snippet></ROW><ROW><id>8973302</id><snippet>object</snippet></ROW><ROW><id>8973302</id><snippet>class Base(object):
    def __init__(self, *args, **kwargs): pass

class A(Base):
    def __init__(self, *args, **kwargs):
        print "A"
        super(A, self).__init__(*args, **kwargs)

class B(Base):
    def __init__(self, *args, **kwargs):
        print "B"
        super(B, self).__init__(*args, **kwargs)

class C(A):
    def __init__(self, arg, *args, **kwargs):
        print "C","arg=",arg
        super(C, self).__init__(arg, *args, **kwargs)

class D(B):
    def __init__(self, arg, *args, **kwargs):
        print "D", "arg=",arg
        super(D, self).__init__(arg, *args, **kwargs)

class E(C,D):
    def __init__(self, arg, *args, **kwargs):
        print "E", "arg=",arg
        super(E, self).__init__(arg, *args, **kwargs)

print "MRO:", [x.__name__ for x in E.__mro__]
E(10)
</snippet></ROW><ROW><id>8973302</id><snippet>MRO: ['E', 'C', 'A', 'D', 'B', 'Base', 'object']
E arg= 10
C arg= 10
A
D arg= 10
B
</snippet></ROW><ROW><id>8973302</id><snippet>Base</snippet></ROW><ROW><id>8973412</id><snippet>import numpy as np
def random_pick(choices, probs):
    '''
    &gt;&gt;&gt; a = ['Hit', 'Out']
    &gt;&gt;&gt; b = [.3, .7]
    &gt;&gt;&gt; random_pick(a,b)
    '''
    cutoffs = np.cumsum(probs)
    idx = cutoffs.searchsorted(np.random.uniform(0, cutoffs[-1]))
    return choices[idx]
</snippet></ROW><ROW><id>8973412</id><snippet>In [22]: import numpy as np
In [23]: probs = [0.1, 0.2, 0.5, 0.2]
</snippet></ROW><ROW><id>8973412</id><snippet>In [24]: cutoffs = np.cumsum(probs)
In [25]: cutoffs
Out[25]: array([ 0.1,  0.3,  0.8,  1. ])
</snippet></ROW><ROW><id>8973412</id><snippet>[0, cutoffs[-1])</snippet></ROW><ROW><id>8973412</id><snippet>In [26]: np.random.uniform(0, cutoffs[-1])
Out[26]: 0.9723114393023948
</snippet></ROW><ROW><id>8973412</id><snippet>cutoffs</snippet></ROW><ROW><id>8973412</id><snippet>In [27]: cutoffs.searchsorted(0.9723114393023948)
Out[27]: 3
</snippet></ROW><ROW><id>8973412</id><snippet>choices[idx]</snippet></ROW><ROW><id>8973412</id><snippet>idx</snippet></ROW><ROW><id>8973417</id><snippet>def settingsUrl(self):
    # this is odd... should be much more straightforward?
    # also, this is pretty slow.
    manager = self.manager
    context = self.context
    assignment = self.data

    allAss = []
    while not assignment in allAss:
        pam = getMultiAdapter((context,manager), IPortletAssignmentMapping)
        allAss = pam.values()
        if assignment in allAss:
            break

        if IAcquirer.providedBy(context):
            context=aq_parent(aq_inner(context))
        else:
            context = context.__parent__

    return '%s/++contextportlets++%s/%s' % (context.absolute_url(), 
                                            manager.__name__,
                                            assignment.__name__)
</snippet></ROW><ROW><id>8973728</id><snippet>pyramid.security.Everyone</snippet></ROW><ROW><id>8973728</id><snippet>Configurator</snippet></ROW><ROW><id>8973882</id><snippet>logging.warn</snippet></ROW><ROW><id>8974087</id><snippet>Patch3DCollection</snippet></ROW><ROW><id>8974087</id><snippet>changed</snippet></ROW><ROW><id>8974087</id><snippet>Patch3DCollection</snippet></ROW><ROW><id>8974087</id><snippet>ScalarMappable</snippet></ROW><ROW><id>8974087</id><snippet>canvas</snippet></ROW><ROW><id>8974087</id><snippet>mpl_connect</snippet></ROW><ROW><id>8974087</id><snippet>plt.show()</snippet></ROW><ROW><id>8974087</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Create Map
cm = plt.get_cmap("RdYlGn")

# added a seed so consistant plotting of points
np.random.seed(101)
x = np.random.rand(30)
y = np.random.rand(30)
z = np.random.rand(30)

col = np.arange(30)

fig = plt.figure()
#ax = fig.add_subplot(111)
#scatCollection = ax.scatter(x,y,
ax3D = fig.add_subplot(111, projection='3d')
# keep track of the Patch3DCollection:
scatCollection = ax3D.scatter(x, y, z, s=30, 
                            c=col, 
                            marker='o',
                            cmap=cm
                            )
def forceUpdate(event):
    global scatCollection
    scatCollection.changed()

fig.canvas.mpl_connect('draw_event',forceUpdate)

#plt.show()

plt.savefig('image1.png')

plt.savefig('image2.png')
</snippet></ROW><ROW><id>8974087</id><snippet>scatCollection</snippet></ROW><ROW><id>8974266</id><snippet>MAX_DELETE_KEYS</snippet></ROW><ROW><id>8974266</id><snippet>DeadlineExceededException</snippet></ROW><ROW><id>8974550</id><snippet>downloads = Downloads.objects.filter(date__range=(dat1, date2))
</snippet></ROW><ROW><id>8974550</id><snippet>downloads = Downloads.objects.filter(date__gt=date1, date__lt=date2)
</snippet></ROW><ROW><id>8974550</id><snippet>__gt</snippet></ROW><ROW><id>8974550</id><snippet>__lt</snippet></ROW><ROW><id>8975162</id><snippet>def list_concat(A, B):
    current = A
    while current.next != None:
        current = current.next
    current.next = B
    return A
</snippet></ROW><ROW><id>8975162</id><snippet>A</snippet></ROW><ROW><id>8975289</id><snippet>m = myModel(**jsondata)
m.full_clean()
</snippet></ROW><ROW><id>8975421</id><snippet>    from multiprocessing import Process
    import os,time

    class myThread(Process):
        def __init__(self):
            Process.__init__(self)

        def run(self):
            while True:
                os.system("sleep 5")


    if __name__ == '__main__':
         p = myThread()
         p.start()
         print "Main thread PID:",os.getpid()
         print "Launched process PID:",p.pid
         os.kill(p.pid,1)
         p.join()
</snippet></ROW><ROW><id>8975990</id><snippet>D:\\Workspace\\Python\\sp</snippet></ROW><ROW><id>8975990</id><snippet>sys.path</snippet></ROW><ROW><id>8976359</id><snippet>#!/usr/bin/python

from pylab import *
import matplotlib
import matplotlib.ticker as ticker

# Setting minor ticker size to 0, globally.
# Useful for our example, but may not be what
# you want, always
matplotlib.rcParams['xtick.minor.size'] = 0

# Create a figure with just one subplot.
# 111 means "1 row, 1 column, 1st subplot"
fig = figure()
ax = fig.add_subplot(111)
# Set both X and Y limits so that matplotlib
# don't determine it's own limits using the data
ax.set_xlim(0, 800)

# Fixes the major ticks to the places we want (one every hundred units)
# and removes the labels for the majors: we're not using them!
ax.xaxis.set_major_locator(ticker.FixedLocator(range(0, 801, 100)))
ax.xaxis.set_major_formatter(ticker.NullFormatter())
# Add minor tickers AND labels for them
ax.xaxis.set_minor_locator(ticker.AutoMinorLocator(n=2))
ax.xaxis.set_minor_formatter(ticker.FixedFormatter(['AB%d' % x for x in range(1, 9)]))

ax.set_ylim(-2000,6500, auto = False)
# And set the grid!
ax.grid(True, linestyle='-')

# common attributes for the bar plots
bcommon = dict(
    height = [8500],  # Height = 6500 - (-2000)
    bottom = -2000,   # Where to put the bottom of the plot (in Y)
    width = 100)      # This is the width of each bar, itself
                      # determined by the distance between X ticks

# Now, we create one separate bar plot pear colored column
# Each bar is a rectangle specified by its bottom left corner
# (left and bottom parameters), a width and a height. Also, in
# your case, the color. Three of those parameters are fixed: height,
# bottom and width; and we set them in the "bcommon" dictionary.
# So, we call bar with those two parameters, plus an expansion of
# the dictionary.

# Note that both "left" and "height" are lists, not single values.
# That's because each barplot could (potentially) have a number of
# bars, each one with a left starting point, along with its height.
# In this case, there's only one pair left-height per barplot.
bars = [[600, 'blue'],
        [700, 'orange']]
for left, clr in bars:
    bar([left], color=clr, **bcommon)

show()
</snippet></ROW><ROW><id>8976760</id><snippet>'''

....
&lt;table width="90%%"&gt;
&lt;tr&gt;
&lt;td width="60%%"&gt;HELLO&lt;/td&gt;
&lt;td width="40%%"&gt;GOOD BYE&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;input type="button" value="BUTTON" onclick="function(%s)" /&gt; ''' % variable
</snippet></ROW><ROW><id>8976815</id><snippet>helpers.py</snippet></ROW><ROW><id>8976842</id><snippet>extract()</snippet></ROW><ROW><id>8976842</id><snippet>infolist()</snippet></ROW><ROW><id>8976842</id><snippet>import UnRAR2

rarc = UnRAR2.RarFile('test.rar')
list = rarc.infolist()

if list[0].isdir:
    print 'Parent directory in archive: %r' % list[0].filename
</snippet></ROW><ROW><id>8976872</id><snippet>jinja2.Markup</snippet></ROW><ROW><id>8976872</id><snippet>import jinja2
import scrubber

def sanitize_html(text):
    return jinja2.Markup(scrubber.Scrubber().scrub(text))

jinja_env.filters['sanitize_html'] = sanitize_html
</snippet></ROW><ROW><id>8976884</id><snippet>*</snippet></ROW><ROW><id>8976884</id><snippet>*.txt</snippet></ROW><ROW><id>8976884</id><snippet>data</snippet></ROW><ROW><id>8976884</id><snippet>.txt</snippet></ROW><ROW><id>8976884</id><snippet>data</snippet></ROW><ROW><id>8976884</id><snippet>shell=True</snippet></ROW><ROW><id>8976884</id><snippet>subprocess.Popen('grep -i --line-buffered grave data/*.txt', shell=True)
</snippet></ROW><ROW><id>8976884</id><snippet>subprocess.Popen(['/bin/sh', '-c', 'grep -i --line-buffered "grave" data/*.txt'])
</snippet></ROW><ROW><id>8976884</id><snippet>Popen</snippet></ROW><ROW><id>8976884</id><snippet>/bin/sh -c "grep -i --line-buffered "grave" data/*.txt"</snippet></ROW><ROW><id>8976884</id><snippet>sh</snippet></ROW><ROW><id>8976884</id><snippet>/bin/sh -c grep -i --line-buffered "grave" data/*.txt</snippet></ROW><ROW><id>8976884</id><snippet>grep</snippet></ROW><ROW><id>8976983</id><snippet>import os; print(os.path.dirname(__file__))
</snippet></ROW><ROW><id>8976983</id><snippet>__file__</snippet></ROW><ROW><id>8977206</id><snippet>get_readonly_fields</snippet></ROW><ROW><id>8977206</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    ...

    def get_readonly_fields(self, request, obj=None):
        if request.user.is_superuser:
            return super(MyModelAdmin, self).get_readonly_fields(request, obj)
        else:
            return ('created_at', 'created_by')
</snippet></ROW><ROW><id>8977206</id><snippet>readonly_fields</snippet></ROW><ROW><id>8977206</id><snippet>ModelAdmin</snippet></ROW><ROW><id>8977206</id><snippet>else</snippet></ROW><ROW><id>8977311</id><snippet>unique_together</snippet></ROW><ROW><id>8977312</id><snippet>mode='w+'</snippet></ROW><ROW><id>8977312</id><snippet>seek(0)</snippet></ROW><ROW><id>8977321</id><snippet>django.db.models.query.QuerySet</snippet></ROW><ROW><id>8977321</id><snippet>class QuerySet(object):
    """
    Represents a lazy database lookup for a set of objects.
    """
    def __init__(self, model=None, query=None, using=None):
        ...
        self._result_cache = None
        ...

     def __len__(self):
        if self._result_cache is None:
          ...
        elif self._iter:
          ...
        return len(self._result_cache)

    def __iter__(self):
        if self._result_cache is None:
          ...
        if self._iter:
          ...
        return iter(self._result_cache)

    def __nonzero__(self):
        if self._result_cache is not None:
          ...

    def __contains__(self, val):
        if self._result_cache is not None:
          ...
        else:
          ...
        ...

    def __getitem__(self, k):
        ...
        if self._result_cache is not None:
        ...
        ...
</snippet></ROW><ROW><id>8977321</id><snippet>self._result_cache</snippet></ROW><ROW><id>8977623</id><snippet>kwargs</snippet></ROW><ROW><id>8977796</id><snippet>import subprocess
proc = subprocess.Popen('cmake', shell=True, stdout=subprocess.PIPE)
while proc.poll() is None:
    output = proc.stdout.readline()
    print output
</snippet></ROW><ROW><id>8977961</id><snippet>def count_positions(positions):
    positions = np.sort(positions)
    diff = np.ones(len(positions), 'bool')
    diff[:-1] = positions[1:] != positions[:-1]
    count = diff.nonzero()[0]
    count[1:] = count[1:] - count[:-1]
    count[0] += 1
    uniqPositions = positions[diff]
    return uniqPositions, count
</snippet></ROW><ROW><id>8977961</id><snippet>positions = np.concatenate((a['position'], b['position'], c['position']))
uinqPos, count = count_positions(positions)
uinqPos = uinqPos[count == 3]
</snippet></ROW><ROW><id>8977961</id><snippet>a.sort(order='position')
b.sort(order='position')
c.sort(order='position')
</snippet></ROW><ROW><id>8977961</id><snippet>new_array = np.empty((len(uinqPos), 4))
new_array[:, 0] = uinqPos
index = a['position'].searchsorted(uinqPos)
new_array[:, 1] = a['score'][index]
index = b['position'].searchsorted(uinqPos)
new_array[:, 2] = b['score'][index]
index = c['position'].searchsorted(uinqPos)
new_array[:, 3] = c['score'][index]
</snippet></ROW><ROW><id>8978056</id><snippet>path = r"\myhome\{}\modules\builds\date{}"
</snippet></ROW><ROW><id>8978056</id><snippet>str.format()</snippet></ROW><ROW><id>8978056</id><snippet>path.format("ireland", 1)</snippet></ROW><ROW><id>8978056</id><snippet>for country in ["ireland", "england", "scotland"]:
    for num in [1, 2]:
        parse_xml(path.format(country, num))
</snippet></ROW><ROW><id>8978056</id><snippet>parse_xml</snippet></ROW><ROW><id>8978153</id><snippet>import os

try:
    open('foo')
except IOError as err:
    print(err)
    print(err.args)
    print(err.filename)    
</snippet></ROW><ROW><id>8978153</id><snippet>[Errno 2] No such file or directory: 'foo'
(2, 'No such file or directory')
foo
</snippet></ROW><ROW><id>8978153</id><snippet>raise OSError(2, 'No such file or directory', 'foo')
</snippet></ROW><ROW><id>8978313</id><snippet>INSERT ... SELECT ... FROM</snippet></ROW><ROW><id>8978313</id><snippet>sql = """
    INSERT INTO raw_financials (provider, vendor_id)
    SELECT provider, %s
    FROM main_app_provider
    WHERE provider LIKE %s
    """ 
args = (vendor_id, '%'+provider+'%')
cursor.execute(sql, args)
</snippet></ROW><ROW><id>8978456</id><snippet>dirs</snippet></ROW><ROW><id>8978456</id><snippet>max(dirs)</snippet></ROW><ROW><id>8978567</id><snippet>images</snippet></ROW><ROW><id>8978567</id><snippet>file</snippet></ROW><ROW><id>8978567</id><snippet>histogram</snippet></ROW><ROW><id>8978567</id><snippet>import ImageChops
import math, operator

def rmsdiff(im1, im2):
    "Calculate the root-mean-square difference between two images"

    h = ImageChops.difference(im1, im2).histogram()

    # calculate rms
    return math.sqrt(reduce(operator.add,
        map(lambda h, i: h*(i**2), h, range(256))
    ) / (float(im1.size[0]) * im1.size[1]))
</snippet></ROW><ROW><id>8978567</id><snippet>def diff_folder(folder1, folder2):
    for path1 in glob.glob(folder1+"/*.png"):
        filename = os.path.basename(path1)
        path2 = os.path.join(folder2, filename)
        if not os.path.exists(path2):
            continue
        im1 = Image.open(path1)
        im2 = Image.open(path2)
        diff = rmsdiff(im1, im2)
        if diff &gt; threshold:
           print "different"
</snippet></ROW><ROW><id>8978679</id><snippet>class ProgrammingCategory(models.Model):
    name = models.CharField(max_length=200)

class ProgrammingLanguage(models.Model):
    category = models.ForeignKey(ProgrammingCategory, related_name='languages')
    name = models.CharField(max_length=300)

class UserProfile(models.Model):
    user = models.ForeignKey(User, unique=True)
    planguages = models.ManyToManyField(ProgrammingLanguage)
</snippet></ROW><ROW><id>8978679</id><snippet>ModelForm</snippet></ROW><ROW><id>8978679</id><snippet>class UserProfileForm(forms.ModelForm):
    ...
    category = forms.ModelChoiceField(queryset=ProgrammingCategory.objects.all(), required=False)
</snippet></ROW><ROW><id>8978679</id><snippet>from django.core import serializers
from django.http import HttpResponse, HttpResponseBadRequest

def ajax_get_languages_for_category(request):
    cat_id = request.GET.get('cat_id')
    if cat_id is not None:
        category = get_object_or_404(ProgrammingCategory, id=cat_id)
        data = serializers.serialize('json', category.languages.all())
        return HttpResponse(data, mimetype='application/json')
    else:
        return HttpResponseBadRequest()
</snippet></ROW><ROW><id>8978679</id><snippet>$(document).ready(function(){
    var $category = $('#id_category');
    function updateLanguageChoices() {
        var selected = $category.val();
        if (selected) {
            $.getJSON('/path/to/ajax/view/', { cat_id: selected }, function (data, jqXHR) {
                var output = [];
                $.each(data, function(i, item){
                    output.append('&lt;option value="'+item.id+'"&gt;'+item.name+'&lt;/option&gt;');
                });
                $('#id_planguage').html(output.join(''));
            });
        }
    }
    updateLanguageChoices();
    $category.change(updateLanguageChoices);
});
</snippet></ROW><ROW><id>8979256</id><snippet>;</snippet></ROW><ROW><id>8979256</id><snippet>,</snippet></ROW><ROW><id>8979256</id><snippet>output = open(to_file, 'w')
output.write(indata)

print "Alright, all done."

output.close()
</snippet></ROW><ROW><id>8979256</id><snippet>with open(to_file, 'w') as output: output.write(indata)
</snippet></ROW><ROW><id>8979504</id><snippet>callproc</snippet></ROW><ROW><id>8979504</id><snippet>curs.callproc['add_command_pkg.add_command',['7', 'sysdate + 7']]
orcl.commit()
</snippet></ROW><ROW><id>8979504</id><snippet>curs.callproc['add_command_pkg.add_command'
             , {'command_id' : '7', 'expiry_time' : 'sysdate + 7'}]
orcl.commit()
</snippet></ROW><ROW><id>8979504</id><snippet>curs.callproc['package_name.procedure_name'
             , ['list_argument1', 'list_argument2']
             , {'keyword_argument1' : 'keyword1'}
             ]
</snippet></ROW><ROW><id>8979504</id><snippet>begin
    package_name.procedure_name( 'list_argument1', 'list_argument2'
                               , keywork_argument1 =&gt; 'keyword1');
end;
</snippet></ROW><ROW><id>8979504</id><snippet>connect</snippet></ROW><ROW><id>8979504</id><snippet> cx_Oracle.connect(username, password, dsn)
</snippet></ROW><ROW><id>8979517</id><snippet>&gt;&gt;&gt; a = [0, 0, 0, 0, 0]
&gt;&gt;&gt; b = a[:]
</snippet></ROW><ROW><id>8979517</id><snippet>&gt;&gt;&gt; b[1:3] = [2, 3]
</snippet></ROW><ROW><id>8979517</id><snippet>&gt;&gt;&gt; a
[0, 0, 0, 0, 0]
&gt;&gt;&gt; b
[0, 2, 3, 0, 0]
</snippet></ROW><ROW><id>8979517</id><snippet>a[:]</snippet></ROW><ROW><id>8979517</id><snippet>put()</snippet></ROW><ROW><id>8979517</id><snippet>a[:]</snippet></ROW><ROW><id>8979517</id><snippet>[i for i in a]</snippet></ROW><ROW><id>8979517</id><snippet>&gt;&gt;&gt; def put(my_list, x, positions):
...     return [x if n in positions else i for n, i in enumerate(my_list)]
...
&gt;&gt;&gt; put(a, 1, [1, 2])
[0, 1, 1, 0, 0]
</snippet></ROW><ROW><id>8979517</id><snippet>&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b[1:3] = [1] * 2
&gt;&gt;&gt; b
[0, 1, 1, 0, 0]
</snippet></ROW><ROW><id>8979553</id><snippet>tempSite = preSite+'/contact_us/'
print tempSite
theTempSite = urlopen(tempSite).read()
soup = BeautifulSoup(theTempSite)
tag = soup.find("input", { "name" : "bb_recipient" })
print tag['value']
</snippet></ROW><ROW><id>8979744</id><snippet>lambda</snippet></ROW><ROW><id>8979744</id><snippet>lambda key: self.keyClick(key)
</snippet></ROW><ROW><id>8979744</id><snippet>def dummy(key):
    self.keyClick(key)
</snippet></ROW><ROW><id>8979744</id><snippet>clicked</snippet></ROW><ROW><id>8979744</id><snippet>checked</snippet></ROW><ROW><id>8979744</id><snippet>False</snippet></ROW><ROW><id>8979744</id><snippet>keyClick</snippet></ROW><ROW><id>8979744</id><snippet>keyClick</snippet></ROW><ROW><id>8979744</id><snippet>key</snippet></ROW><ROW><id>8979744</id><snippet>lambda</snippet></ROW><ROW><id>8979744</id><snippet>lambda checked, key=key: self.keyClick(key)
</snippet></ROW><ROW><id>8979744</id><snippet>key=key</snippet></ROW><ROW><id>8979934</id><snippet>import *</snippet></ROW><ROW><id>8979934</id><snippet>SPECIES = []
'''An automatically generated list of the available species types.'''

def _do_import():
    '''Automatically populates SPECIES with all the modules in this
    folder.

    :Note:
        Written as a function to prevent local variables from being
        imported.
    '''
    import os

    for _, _, files in os.walk(__path__[0]):
        for filename in (file for file in files if file[0] != '_' and file[-3:] == '.py'):
            modname = filename[:filename.find('.')]
            mod = __import__(modname, globals(), fromlist=[])
            for cls in (getattr(mod, s) for s in dir(mod)):
                if cls is not Species and type(cls) is type and issubclass(cls, Species):
                    if getattr(cls, '_include_automatically', True):
                        SPECIES.append(cls)
                        globals()[cls.__name__] = cls

_do_import()
</snippet></ROW><ROW><id>8979940</id><snippet>plt.setp</snippet></ROW><ROW><id>8979940</id><snippet>plot</snippet></ROW><ROW><id>8979940</id><snippet>plot(x, y, other=stuff)</snippet></ROW><ROW><id>8979940</id><snippet>plot</snippet></ROW><ROW><id>8979940</id><snippet>matplotlib.line.Line2D</snippet></ROW><ROW><id>8979940</id><snippet>matplotlib.line.Line2D.update(kwargs)</snippet></ROW><ROW><id>8979940</id><snippet>update</snippet></ROW><ROW><id>8979940</id><snippet>for key, value in kwargs.iteritems():
    func = getattr(self, 'set_'+key)
    func(value)
</snippet></ROW><ROW><id>8979940</id><snippet>set_*</snippet></ROW><ROW><id>8979940</id><snippet>Line2D</snippet></ROW><ROW><id>8979940</id><snippet>set_xdata</snippet></ROW><ROW><id>8979940</id><snippet>set_ydata</snippet></ROW><ROW><id>8979940</id><snippet>Line2D</snippet></ROW><ROW><id>8979940</id><snippet>plot</snippet></ROW><ROW><id>8979940</id><snippet>Line2D</snippet></ROW><ROW><id>8979940</id><snippet>xdata</snippet></ROW><ROW><id>8979940</id><snippet>ydata</snippet></ROW><ROW><id>8979940</id><snippet>set_xdata</snippet></ROW><ROW><id>8979940</id><snippet>set_ydata</snippet></ROW><ROW><id>8979940</id><snippet>Line2D</snippet></ROW><ROW><id>8979970</id><snippet>#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;map&gt;
#include&lt;iterator&gt;
#include&lt;list&gt;

using namespace std;

class MultiLevDict
{
private:
    list&lt;string&gt; lis;
    map&lt;string,list&lt;string&gt; &gt; MultiDict;
public:
    void Setter();
    void Display() const;
};

void MultiLevDict::Setter()
{
    string field;
    string cast;
    field="Abcd ";
    lis.push_back("Tom");
    lis.push_back("Eve");
    MultiDict[field]=lis;
// This works in C++11 :
    MultiDict["Efgh "]={"Joe","Lisa"};

}

void MultiLevDict::Display() const
{
   for(map&lt;string,list&lt;string&gt; &gt;::const_iterator it=MultiDict.begin();
       it!=MultiDict.end();++it){
      std::cout &lt;&lt; "key: was: "&lt;&lt;it-&gt;first&lt;&lt;std::endl;
      for (list&lt;string&gt;::const_iterator it2=it-&gt;second.begin();
       it2!=it-&gt;second.end();++it2){
     std::cout &lt;&lt; "   "&lt;&lt;it-&gt;first&lt;&lt; " contains " &lt;&lt;*it2&lt;&lt;std::endl;
      }
   }   
}

int main() {
   MultiLevDict myd;
   myd.Setter();
   myd.Display();   
}
</snippet></ROW><ROW><id>8979970</id><snippet>key: was: Abcd 
  Abcd  contains Tom
  Abcd  contains Eve
key: was: Efgh 
  Efgh  contains Joe
  Efgh  contains Lisa
</snippet></ROW><ROW><id>8980095</id><snippet>DigitalReadout</snippet></ROW><ROW><id>8980095</id><snippet>def __init__(self, width, y, x, label, digits, data_source, parent=None)
</snippet></ROW><ROW><id>8980095</id><snippet>DigitalReadout(each_dict['digits'] + len(each_dict['label']) + 1, # width
                                        1,                        # y
                                        y_readout_index,          # x
                                        1,                        # label
                                        function,                 # digits
                                        self.window)              # data_source
</snippet></ROW><ROW><id>8980095</id><snippet>height?</snippet></ROW><ROW><id>8980095</id><snippet>data_source</snippet></ROW><ROW><id>8980095</id><snippet>digits</snippet></ROW><ROW><id>8980156</id><snippet>.data</snippet></ROW><ROW><id>8980156</id><snippet>.indices</snippet></ROW><ROW><id>8980156</id><snippet>.indptr</snippet></ROW><ROW><id>8980156</id><snippet>numpy.save</snippet></ROW><ROW><id>8980156</id><snippet>numpy.save</snippet></ROW><ROW><id>8980156</id><snippet>numpy.savez</snippet></ROW><ROW><id>8980156</id><snippet>numpy.load</snippet></ROW><ROW><id>8980156</id><snippet>new_csr = csr_matrix((data, indices, indptr), shape=(M, N))
</snippet></ROW><ROW><id>8980358</id><snippet>def create_list(n):
    new_list = cell.Cell(0)
    last_a = new_list
    for i in (range(1,n)):
        a = cell.Cell(i)
        cell.list_concat(last_a, a)
        last_a = a
    return new_list
</snippet></ROW><ROW><id>8980450</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>8980450</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>8980450</id><snippet>Voter</snippet></ROW><ROW><id>8980450</id><snippet>BlobInfo</snippet></ROW><ROW><id>8980466</id><snippet>myprocess.stdin.write()</snippet></ROW><ROW><id>8980466</id><snippet>myprocess.stdout.read()</snippet></ROW><ROW><id>8980466</id><snippet>myprocess.stdout.readline()</snippet></ROW><ROW><id>8980466</id><snippet>&gt;&gt;&gt; p = subprocess.Popen(['cat'], bufsize=1, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
&gt;&gt;&gt; p.stdin.write('hello world\n')
&gt;&gt;&gt; p.stdout.readline()
'hello world\n'
&gt;&gt;&gt; p.stdout.readline()        # THIS CALL WILL BLOCK
</snippet></ROW><ROW><id>8980466</id><snippet>myprocess.stdout.read()</snippet></ROW><ROW><id>8980466</id><snippet>IOError</snippet></ROW><ROW><id>8980466</id><snippet>&gt;&gt;&gt; p = subprocess.Popen(['cat'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
&gt;&gt;&gt; import fcntl, os
&gt;&gt;&gt; fcntl.fcntl(p.stdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)
0
&gt;&gt;&gt; p.stdout.read()         # raises an exception instead of blocking
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 11] Resource temporarily unavailable
</snippet></ROW><ROW><id>8980466</id><snippet>fcntl.fcntl(p.stdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)
for text in textcollection:
    myprocess.stdin.write(text + '\n')
    while True:
        myoutputtext = ''
        try:
            myoutputtext += myprocess.stdout.read()
        except IOError:
            pass
        if validate_output(myoutputtext):
            break
        time.sleep(.1)    # short sleep before attempting another read
</snippet></ROW><ROW><id>8980466</id><snippet>validate_output()</snippet></ROW><ROW><id>8980466</id><snippet>True</snippet></ROW><ROW><id>8980562</id><snippet>/host wallmount/,/}/ d
</snippet></ROW><ROW><id>8980562</id><snippet>sed -i '/host wallmount/,/}/ d' thefile.cfg
</snippet></ROW><ROW><id>8980612</id><snippet>stdin</snippet></ROW><ROW><id>8980612</id><snippet>stdout</snippet></ROW><ROW><id>8980612</id><snippet>stdin</snippet></ROW><ROW><id>8980612</id><snippet>stdout</snippet></ROW><ROW><id>8980612</id><snippet>input()</snippet></ROW><ROW><id>8980612</id><snippet>stdin</snippet></ROW><ROW><id>8980612</id><snippet>sys.stdin.read()</snippet></ROW><ROW><id>8980612</id><snippet>input()</snippet></ROW><ROW><id>8980612</id><snippet>input()</snippet></ROW><ROW><id>8980612</id><snippet>print()</snippet></ROW><ROW><id>8980612</id><snippet>stdout</snippet></ROW><ROW><id>8980612</id><snippet>print()</snippet></ROW><ROW><id>8980612</id><snippet>sys.stdout</snippet></ROW><ROW><id>8980612</id><snippet>file=</snippet></ROW><ROW><id>8980848</id><snippet>defaultdict</snippet></ROW><ROW><id>8980848</id><snippet>dict</snippet></ROW><ROW><id>8980848</id><snippet>super()</snippet></ROW><ROW><id>8980848</id><snippet>super()</snippet></ROW><ROW><id>8980848</id><snippet>object</snippet></ROW><ROW><id>8980941</id><snippet># 0 results, it's wrong 
query = db.GqlQuery('SELECT * FROM Event WHERE dates in :dates', dates=[datetime.datetime.now()]) 
</snippet></ROW><ROW><id>8980941</id><snippet>now()</snippet></ROW><ROW><id>8980941</id><snippet>today = datetime.datetime.today()
today_date = datetime.datetime(year = today.year, month = today.month, day = today.day)
query = db.GqlQuery('SELECT * FROM Event WHERE dates in :dates', dates = [today_date]) 
</snippet></ROW><ROW><id>8980941</id><snippet>BadValueError: Unsupported type for property  : &lt;type 'datetime.date'&gt;
</snippet></ROW><ROW><id>8980941</id><snippet>datetime.datetime</snippet></ROW><ROW><id>8980941</id><snippet>datetime.date</snippet></ROW><ROW><id>8980941</id><snippet>today = datetime.datetime.today()
today_date = datetime.datetime(year = today.year, month = today.month, day = today.day)
dates = [today_date, today_date + datetime.timedelta(days = 7), today_date + datetime.timedelta(days = 14), today_date + datetime.timedelta(days = 24)]
query = db.GqlQuery('SELECT * FROM Event WHERE dates in :dates', dates = dates)
</snippet></ROW><ROW><id>8980974</id><snippet>def extract_fns(filename):
    with open(filename) as f:
        lines = f.readlines()
        return [line.split(' ', 1)[1].split('(')[0] for line in lines
            if line.strip().startswith('def')]
</snippet></ROW><ROW><id>8980982</id><snippet>from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import event
import datetime

Base= declarative_base()

def validate_int(value):
    if isinstance(value, basestring):
        value = int(value)
    else:
        assert isinstance(value, integer)
    return value

def validate_string(value):
    assert isinstance(value, basestring)
    return value

def validate_datetime(value):
    assert isinstance(value, datetime.datetime)
    return value

validators = {
    Integer:validate_int,
    String:validate_string,
    DateTime:validate_datetime,
}

# this event is called whenever an attribute
# on a class is instrumented
@event.listens_for(Base, 'attribute_instrument')
def configure_listener(class_, key, inst):
    if not hasattr(inst.property, 'columns'):
        return
    # this event is called whenever a "set" 
    # occurs on that instrumented attribute
    @event.listens_for(inst, "set", retval=True)
    def set_(instance, value, oldvalue, initiator):
        validator = validators.get(inst.property.columns[0].type.__class__)
        if validator:
            return validator(value)
        else:
            return value


class MyObject(Base):
    __tablename__ = 'mytable'

    id = Column(Integer, primary_key=True)
    svalue = Column(String)
    ivalue = Column(Integer)
    dvalue = Column(DateTime)


m = MyObject()
m.svalue = "ASdf"

m.ivalue = "45"

m.dvalue = "not a date"
</snippet></ROW><ROW><id>8981058</id><snippet>@with_slave
def my_view(...):
   # ...
</snippet></ROW><ROW><id>8981058</id><snippet>master = create_engine("some DB")
slave = create_engine("some other DB")
Session = scoped_session(sessionmaker(bind=master))

def with_slave(fn)
    def go(*arg, **kw):
        s = Session(bind=slave)
        return fn(*arg, **kw)
    return go
</snippet></ROW><ROW><id>8981058</id><snippet>Session(bind=slave)</snippet></ROW><ROW><id>8981058</id><snippet>Session.remove()</snippet></ROW><ROW><id>8981058</id><snippet>def with_slave(fn)
    def go(*arg, **kw):
        s = Session()
        oldbind = s.bind
        s.bind = slave
        try:
            return fn(*arg, **kw)
        finally:
            s.bind = oldbind
    return go
</snippet></ROW><ROW><id>8981094</id><snippet>heroku config:add LANG=en_US.UTF-8
</snippet></ROW><ROW><id>8981203</id><snippet>import sys
import types

def str_to_obj(astr):
    '''
    str_to_obj('scipy.stats.stats') returns the associated module
    str_to_obj('scipy.stats.stats.chisquare') returns the associated function
    '''
    try:
        return globals()[astr]
    except KeyError:
        try:
            __import__(astr)
            mod = sys.modules[astr]
            return mod
        except ImportError:
            modname, _, basename = astr.rpartition('.')
            if modname:
                mod = str_to_obj(modname)
                return getattr(mod, basename)
            else:
                raise

class ClassA(object):
    def __init__(self, methpath):
        super(ClassA, self).__init__()
        self.a = 1
        self.b = 2
        self.meth1 = types.MethodType(str_to_obj(methpath), self)

a = ClassA('moduleB.meth2')
print(a.meth1())
# 3
</snippet></ROW><ROW><id>8981292</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; od = collections.OrderedDict([
        ('Code', 122),
        ('Reference', 1311),
        ('Type', 'NT'),
        ('Amount', 100.00),
])

&gt;&gt;&gt; print od['Amount']
100.0

&gt;&gt;&gt; od.keys()
['Code', 'Reference', 'Type', 'Amount']
</snippet></ROW><ROW><id>8981643</id><snippet>x = 5
while True:
  if (some-condition):
    x = 3
  print x
</snippet></ROW><ROW><id>8981643</id><snippet>def changeX():
  global x
  x = 3

x = 5
import threading
threading.Timer(3, changeX).start()  # executes changeX after 3 seconds in a second thread

while True:
  print x
</snippet></ROW><ROW><id>8981790</id><snippet>def cv2numpy(cvarr, the_type):
  a = np.asarray(cv.GetMat(cvarr), dtype=the_type)
  return a
</snippet></ROW><ROW><id>8981813</id><snippet>get_input()</snippet></ROW><ROW><id>8981813</id><snippet>do_more_things()</snippet></ROW><ROW><id>8981813</id><snippet>sys.stdin</snippet></ROW><ROW><id>8981813</id><snippet>def get_input(stdin):
    for line in iter(stdin.readline, ''):
        print("hello", line, end='')
    stdin.close()

if __name__ == '__main__':
    p1 = mp.Process(target=do_more_things)
    p1.start()
    get_input(sys.stdin)
</snippet></ROW><ROW><id>8981813</id><snippet>Thread()</snippet></ROW><ROW><id>8981813</id><snippet>Process()</snippet></ROW><ROW><id>8981813</id><snippet>get_input()</snippet></ROW><ROW><id>8981813</id><snippet>if __name__ == '__main__':
    t = Thread(target=get_input, args=(sys.stdin,))
    t.start()
    do_more_things()
</snippet></ROW><ROW><id>8981813</id><snippet>os.dup()</snippet></ROW><ROW><id>8981813</id><snippet>newstdin = os.fdopen(os.dup(sys.stdin.fileno()))
try: 
   p = Process(target=get_input, args=(newstdin,))
   p.start()    
finally:
   newstdin.close() # close in the parent
do_more_things()
</snippet></ROW><ROW><id>8981989</id><snippet>"boundi"</snippet></ROW><ROW><id>8981989</id><snippet>"boundiConvexHull"</snippet></ROW><ROW><id>8981989</id><snippet>3:50</snippet></ROW><ROW><id>8981989</id><snippet>xrange(3,51)</snippet></ROW><ROW><id>8981989</id><snippet>51</snippet></ROW><ROW><id>8981989</id><snippet>xrange(n)</snippet></ROW><ROW><id>8981989</id><snippet>0:(n-1)</snippet></ROW><ROW><id>8981989</id><snippet>for i in xrange(3,51):
    arcpy.MinimumBoundingGeometry_management("bound%i" % i, "bound%iConvexHull" % i, ... )
</snippet></ROW><ROW><id>8981989</id><snippet>"bound%i" % i</snippet></ROW><ROW><id>8981989</id><snippet>xrange</snippet></ROW><ROW><id>8982511</id><snippet>import subprocess
import getpass

Oracle = r'\\server\z$\deploy\Install\Oracle\Oracle9i_Disk1\Oracle9i_Disk1\autorun\autorun.exe'

def Craft_Startup(COMPUTER, COMMAND):
    UNAME="DOMAIN\\"+getpass.getuser()
    PASSWD = getpass.getpass()
    subprocess.Popen("psexec -u "+ UNAME +" -p " + PASSWD + " \\\\"+COMPUTER+" -i " + COMMAND)


if __name__ == '__main__':
    COMPUTER = 'P04213'
    COMMAND = Oracle
    Craft_Startup(COMPUTER, 'cmd.exe /c start ' + COMMAND)
</snippet></ROW><ROW><id>8982858</id><snippet>dir/000.jpg</snippet></ROW><ROW><id>8982858</id><snippet>-O</snippet></ROW><ROW><id>8982858</id><snippet>wget</snippet></ROW><ROW><id>8982858</id><snippet>import subprocess
import os.path

subprocess.Popen(['wget', '-O', os.path.join(directory, filename), theImg])
</snippet></ROW><ROW><id>8982858</id><snippet>-O</snippet></ROW><ROW><id>8982858</id><snippet>/</snippet></ROW><ROW><id>8982858</id><snippet>wget</snippet></ROW><ROW><id>8982858</id><snippet>/</snippet></ROW><ROW><id>8982858</id><snippet>wget</snippet></ROW><ROW><id>8982858</id><snippet>os.mkdir</snippet></ROW><ROW><id>8982858</id><snippet>stdout=</snippet></ROW><ROW><id>8982858</id><snippet>stderr=</snippet></ROW><ROW><id>8982858</id><snippet>Popen</snippet></ROW><ROW><id>8982940</id><snippet>mylist.sort(key=lambda t: t[0] - t[1])
</snippet></ROW><ROW><id>8982940</id><snippet>reverse=True</snippet></ROW><ROW><id>8982940</id><snippet>mylist.sort(key=lambda t: t[1] - t[0], reverse=True)
</snippet></ROW><ROW><id>8983012</id><snippet>julian_date()</snippet></ROW><ROW><id>8983012</id><snippet>ephem</snippet></ROW><ROW><id>8983012</id><snippet>import ephem

az = 3.30084818 #rad
el = 0.94610742 #rad
lat = 34.64 #deg
lon = -103.7 #deg
alt = 35800.26 #m
ut = 2455822.20000367 #julian date

# Which Julian Date does Ephem start its own count at?
J0 = ephem.julian_date(0)

observer = ephem.Observer()
observer.lon = str(lon)  # str() forces deg -&gt; rad conversion
observer.lat = str(lat)  # deg -&gt; rad
observer.elevation = alt
observer.date = ut - J0

print observer.date
print observer.radec_of(az, el)
</snippet></ROW><ROW><id>8983012</id><snippet>2011/9/17 16:48:00
(9:16:24.95, -0:45:56.8)
</snippet></ROW><ROW><id>8983161</id><snippet>wx.TextCtrl</snippet></ROW><ROW><id>8983161</id><snippet>self.text</snippet></ROW><ROW><id>8983161</id><snippet>self.text</snippet></ROW><ROW><id>8983161</id><snippet>wx.TextCtrl</snippet></ROW><ROW><id>8983161</id><snippet>wx.TextCtrl</snippet></ROW><ROW><id>8983161</id><snippet>wx.Frame.FindFocus()</snippet></ROW><ROW><id>8983161</id><snippet>None</snippet></ROW><ROW><id>8983161</id><snippet>Cut</snippet></ROW><ROW><id>8983161</id><snippet>def OnCut(self, event):
    text = self.FindFocus()
    if text is not None:
        text.Cut()
</snippet></ROW><ROW><id>8983196</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; list_of_dts = [
              datetime.datetime(2012,1,1,0,0,0),
              datetime.datetime(2012,1,1,1,0,0),
              datetime.datetime(2012,1,2,0,0,0),
              datetime.datetime(2012,1,3,0,0,0),
              datetime.datetime(2012,1,5,0,0,0),
              ]

&gt;&gt;&gt; days = {}
&gt;&gt;&gt; for dt in list_of_dts:
        days.setdefault(dt.toordinal(), []).append(dt)

&gt;&gt;&gt; [days.get(day, []) for day in range(min(days), max(days)+1)]
[[datetime.datetime(2012, 1, 1, 0, 0), datetime.datetime(2012, 1, 1, 1, 0)], 
 [datetime.datetime(2012, 1, 2, 0, 0)],
 [datetime.datetime(2012, 1, 3, 0, 0)],
 [],
 [datetime.datetime(2012, 1, 5, 0, 0)]]
</snippet></ROW><ROW><id>8983196</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [list(group) for k, group in itertools.groupby(list_of_dts,
                                                   key=datetime.datetime.toordinal)]
[[datetime.datetime(2012, 1, 1, 0, 0), datetime.datetime(2012, 1, 1, 1, 0)], 
 [datetime.datetime(2012, 1, 2, 0, 0)],
 [datetime.datetime(2012, 1, 3, 0, 0)],
 [datetime.datetime(2012, 1, 5, 0, 0)]]
</snippet></ROW><ROW><id>8983526</id><snippet>RuntimeError: the session is unavailable because no secret key was set.
Set the secret_key on the application to something unique and secret.
</snippet></ROW><ROW><id>8983526</id><snippet>app.secret_key = 'why would I tell you my secret key?'
</snippet></ROW><ROW><id>8983662</id><snippet>python</snippet></ROW><ROW><id>8983662</id><snippet>conf.init_pyext()</snippet></ROW><ROW><id>8983662</id><snippet>features='pyext'</snippet></ROW><ROW><id>8983662</id><snippet>def options(opt):
        opt.load('python')

def configure(conf):
    conf.load('python')
    conf.check_python_version((2,4,2))
    conf.check_python_headers()

def build(bld):

    bld.shlib(
        features = 'pyext',
        source = "mymodule.cpp",
        target = "myfoo",
        use = "PYTHON BOOST_PYTHON")
</snippet></ROW><ROW><id>8983662</id><snippet>myfoo.so</snippet></ROW><ROW><id>8983662</id><snippet>import</snippet></ROW><ROW><id>8983671</id><snippet>import smtplib

username = "account@gmail.com"
password = "password"

vtext = "1112223333@vtext.com"
message = "this is the message to be sent"

msg = """From: %s
To: %s
Subject: text-message
%s""" % (username, vtext, message)

server = smtplib.SMTP('smtp.gmail.com',587)
server.starttls()
server.login(username,password)
server.sendmail(username, vtext, msg)
server.quit()
</snippet></ROW><ROW><id>8983720</id><snippet>(sudstest)mike-imac:sudstest mike$ ./main.py 
(OnlineResponse){
   TransactionID = 0
   TransactionType = 20
   MerchantReference = None
   ResponseCode = "ERMERC"
   ResponseShortDescription = "YESDEC"
   ResponseDescription = "Invalid Merchant Code"
   TimeStamp = "2012/01/24 17:21:37"
   CardData = 
      (YESCardData){
         CardID = 0
         ExpiryYear = 0
         ExpiryMonth = 0
      }
 }
</snippet></ROW><ROW><id>8983720</id><snippet>#!/usr/bin/env python
import os
from suds.client import Client

WSDL = 'DirectConnect.test.WSDL'

def test_api():
    url = 'file://' + os.path.join(os.path.abspath(os.path.dirname(__file__)), WSDL)
    client = Client(url)

    data = {
        'MerchantCode': 'HELLO',
        'MerchantReference':  '',
        'TransactionType': 20,
        'Amount': 100,
        'CurrencyCode': 'USD',
        'CardHolderName': 'RAUL O REVECHE',
        'CardNumber': 4005550000000001,
        'ExpiryMonth': 5,
        'ExpiryYear': 2013,
        'CardID': 0,
        'CardSecurityCode': 400,
        'CustomerAccountNumber': '',
        'BillNumber': 0,
        'CardHolderEmail': 'development@yespayments.com.ph',
        'ClientIPAddress': 'http://127.0.0.1:8000/',
        'Notes': 'This is test',
    }

    result = client.service.OnlineTransaction(**data)
    print result

if __name__ == '__main__':
    test_api()
</snippet></ROW><ROW><id>8983728</id><snippet>Widget.hide</snippet></ROW><ROW><id>8983728</id><snippet>glib.timeout_add_seconds</snippet></ROW><ROW><id>8983728</id><snippet>hide</snippet></ROW><ROW><id>8983728</id><snippet>hide</snippet></ROW><ROW><id>8983728</id><snippet>destroy</snippet></ROW><ROW><id>8983728</id><snippet>glib.timeout_add_seconds</snippet></ROW><ROW><id>8983728</id><snippet>glib.source_remove</snippet></ROW><ROW><id>8983786</id><snippet>prefs.js</snippet></ROW><ROW><id>8983786</id><snippet>user.js</snippet></ROW><ROW><id>8983786</id><snippet>user.js</snippet></ROW><ROW><id>8983786</id><snippet>user_pref(&lt;preference&gt;, &lt;value&gt;)
</snippet></ROW><ROW><id>8984361</id><snippet>wanted_size = 21
a = numpy.array([[1,2,3],[4,5,6],[7,8,9]])
b = numpy.zeros((wanted_size, wanted_size))

for i in range(wanted_size):
    for j in range(wanted_size):
        idx1 = i * len(a) / wanted_size
        idx2 = j * len(a) / wanted_size
        b[i][j] = a[idx1][idx2]
</snippet></ROW><ROW><id>8984536</id><snippet>import ModuleName
</snippet></ROW><ROW><id>8984536</id><snippet>ModuleName</snippet></ROW><ROW><id>8984536</id><snippet>%module</snippet></ROW><ROW><id>8984536</id><snippet>sdrts_reverse_burst_ff</snippet></ROW><ROW><id>8984536</id><snippet>import ModuleName

ModuleName.sdrts_reverse_burst_ff()
</snippet></ROW><ROW><id>8984536</id><snippet>sdrts_reverse_burst_ff()</snippet></ROW><ROW><id>8984596</id><snippet>&gt;&gt;&gt; import paramiko
&gt;&gt;&gt; ssh = paramiko.SSHClient()
&gt;&gt;&gt; ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
&gt;&gt;&gt; ssh.connect('tek')
&gt;&gt;&gt; stdin, stdout, stderr = ssh.exec_command('python --version')
&gt;&gt;&gt; stdin.flush()
&gt;&gt;&gt; data = stdout.readlines()
&gt;&gt;&gt; data
[]
&gt;&gt;&gt; data = stderr.readlines()
&gt;&gt;&gt; data
['Python 2.6.6\n']
</snippet></ROW><ROW><id>8984630</id><snippet>shares = parser.get('profile', 'shares')
for share in shares.split(', ')
    username = parser.get(share, 'username')
</snippet></ROW><ROW><id>8985740</id><snippet>functools.partial</snippet></ROW><ROW><id>8985740</id><snippet>import functools


def func(self, response):
    print self, response

def func_with_param(self, response, param):
    print self, response, param    

def caller(callback):
    callback('self', 'response')

caller(func)
caller(functools.partial(func_with_param, param='param'))
</snippet></ROW><ROW><id>8985740</id><snippet>make</snippet></ROW><ROW><id>8985740</id><snippet>model</snippet></ROW><ROW><id>8985740</id><snippet>self</snippet></ROW><ROW><id>8985740</id><snippet>def make (self, response, years):
    ...

def model (self, response, years, makes):
    ...
</snippet></ROW><ROW><id>8985740</id><snippet>import functools
...

def parse(self, response):
    ...
    return FormRequest(url="http://www.gasbuddy.com/Trip_Calculator.aspx",
                       formdata={'Year': '%s'%("2011")},
                       callback=functools.partial(self.make, years='2011'))
</snippet></ROW><ROW><id>8985740</id><snippet>meta</snippet></ROW><ROW><id>8985740</id><snippet>FormRequest</snippet></ROW><ROW><id>8985740</id><snippet>def parse(self, response):
    ...
    return FormRequest(url="http://www.gasbuddy.com/Trip_Calculator.aspx",
                       formdata={'Year': '%s'%("2011")},
                       meta={'years':'2011'},
                       callback=self.make)

def make (self, response):
    years = response.meta['years']
    ...
</snippet></ROW><ROW><id>8985740</id><snippet>models</snippet></ROW><ROW><id>8985740</id><snippet>FormRequest</snippet></ROW><ROW><id>8985740</id><snippet>parse</snippet></ROW><ROW><id>8985740</id><snippet>yield</snippet></ROW><ROW><id>8985740</id><snippet>for something in hxs.select(...).extract():
    yield FormRequest(...)
</snippet></ROW><ROW><id>8985839</id><snippet>__init__()</snippet></ROW><ROW><id>8985839</id><snippet>__init__</snippet></ROW><ROW><id>8986153</id><snippet>from lxml import etree

xml_snippet = '''&lt;topology&gt;
 &lt;switch id="10"&gt;
     &lt;port no="1"&gt;h1&lt;/port&gt;
     &lt;port no="2"&gt;h2&lt;/port&gt;
 &lt;/switch&gt;

 &lt;tunnel dpid="91"&gt;
 &lt;port no="1"&gt;s1&lt;/port&gt;
 &lt;port no="8"&gt;s8&lt;/port&gt;
 &lt;/tunnel&gt;
 &lt;/topology&gt;'''

root = etree.fromstring(xml_snippet)

for element in root.iter("*"):
  print element.tag, element.items()
</snippet></ROW><ROW><id>8986153</id><snippet>topology []
switch [('id', '10')]
port [('no', '1')]
port [('no', '2')]
tunnel [('dpid', '91')]
port [('no', '1')]
port [('no', '8')]
</snippet></ROW><ROW><id>8986153</id><snippet>attribute = '10'
element = root.find('.//switch[@id="%s"]' % attribute)
element.items()
</snippet></ROW><ROW><id>8986153</id><snippet>[('id', '10')]
</snippet></ROW><ROW><id>8986284</id><snippet>str</snippet></ROW><ROW><id>8986284</id><snippet>repr</snippet></ROW><ROW><id>8986284</id><snippet>str</snippet></ROW><ROW><id>8986284</id><snippet>repr</snippet></ROW><ROW><id>8986284</id><snippet>repr</snippet></ROW><ROW><id>8986285</id><snippet>&gt;&gt;&gt; pool = redis.ConnectionPool(host='localhost', port=6379, db=0)
&gt;&gt;&gt; r = redis.StrictRedis(connection_pool=pool)
</snippet></ROW><ROW><id>8986647</id><snippet>import pylab
import time

pylab.ion() # animation on

# Note the comma after line. This is placed here because 
# plot returns a list of lines that are drawn.
line, = pylab.plot(0,1,'ro',markersize=6) 
pylab.axis([0,1,0,1])

line.set_xdata([1,2,3])  # update the data
line.set_ydata([1,2,3])
pylab.draw() # draw the points again
time.sleep(6)

line1, = pylab.plot([4],[5],'g*',markersize=8) 
pylab.draw() 

for i in range(10):
    line.set_xdata([1,2,3])  # update the data
    line.set_ydata([1,2,3])
    pylab.draw() # draw the points again
    time.sleep(1)

print "done up there"
line2, = pylab.plot(3,2,'b^',markersize=6)     
pylab.draw() 

time.sleep(20)
</snippet></ROW><ROW><id>8986981</id><snippet>#!/usr/bin/env perl
use strict; use warnings;
use PDF::API2;

my $filename = shift;
my $oldpdf = PDF::API2-&gt;open($filename);
my $newpdf = PDF::API2-&gt;new;

for my $page_nb (1..$oldpdf-&gt;pages) {
  my ($page, @cropdata);

  $page = $newpdf-&gt;importpage($oldpdf, $page_nb);
  @cropdata = $page-&gt;get_mediabox;
  $cropdata[2] /= 2;
  $page-&gt;cropbox(@cropdata);
  $page-&gt;trimbox(@cropdata);
  $page-&gt;mediabox(@cropdata);

  $page = $newpdf-&gt;importpage($oldpdf, $page_nb);
  @cropdata = $page-&gt;get_mediabox;
  $cropdata[0] = $cropdata[2] / 2;
  $page-&gt;cropbox(@cropdata);
  $page-&gt;trimbox(@cropdata);
  $page-&gt;mediabox(@cropdata);
}

(my $newfilename = $filename) =~ s/(.*)\.(\w+)$/$1.clean.$2/;
$newpdf-&gt;saveas('destination_path/myfile.pdf');
</snippet></ROW><ROW><id>8987209</id><snippet>import numpy as np

# Test data
data = [
   (187, "ALA","GLU", "LEU", "C", 1, 119.47, 0.00),
   (187, "ALA","GLU", "LEU", "O", 1, 8.42, 0.00),
   (188, "ALA","GLU", "LYS", "C", 1, 120.67, 0.00),
   (188, "ALA","GLU", "LYS", "O", 1, 9.11, 0.00),
   (777, "ARG","GLN", "ARG", "C", 1, 117.13, 0.00),
   (777, "ARG","GLN", "ARG", "O", 1, 8.48, 0.00),
   ]

# Structure definition
my_dtype = [
    ('Number',  'i4'),
    (  'AA1',   'a3'),
    (  'AA2',   'a3'),
    (  'AA3',   'a3'),
    ( 'Atom',   'a1'),
    ( 'amou',   'i4'),
    ( 'mean',   'f4'),
    ( 'stddev', 'f4')
           ]

a = np.array(data, dtype = my_dtype)
</snippet></ROW><ROW><id>8987209</id><snippet>a</snippet></ROW><ROW><id>8987209</id><snippet>&gt;&gt;&gt; np.unique(a['AA2'])
array(['GLN', 'GLU'], 
      dtype='|S3')
</snippet></ROW><ROW><id>8987209</id><snippet># This gives you a mask
&gt;&gt;&gt; a['AA2'] == 'GLN'
array([False, False, False, False,  True,  True], dtype=bool)
# that you can apply to the array itself
&gt;&gt;&gt; a[a['AA2'] == 'GLN']
array([(777, 'ARG', 'GLN', 'ARG', 'C', 1, 117.12999725341797, 0.0),
       (777, 'ARG', 'GLN', 'ARG', 'O', 1, 8.4799995422363281, 0.0)], 
      dtype=[('Number', '&lt;i4'), ('AA1', '|S3'), ('AA2', '|S3'), ('AA3', '|S3'),
             ('Atom', '|S1'), ('amou', '&lt;i4'), ('mean', '&lt;f4'), ('stddev', '&lt;f4')])
</snippet></ROW><ROW><id>8987209</id><snippet>&gt;&gt;&gt; gln = a[a['AA2'] == 'GLN']
&gt;&gt;&gt; gln['mean'].mean()
62.805000305175781
</snippet></ROW><ROW><id>8987209</id><snippet>a['AA2'] == 'GLN'</snippet></ROW><ROW><id>8987209</id><snippet>&gt;&gt;&gt; a['Atom'] == 'C'
array([ True, False,  True, False,  True, False], dtype=bool)
&gt;&gt;&gt; np.logical_and(a['Atom'] == 'C', a['AA2'] == 'GLN')
array([False, False, False, False,  True, False], dtype=bool)

# Which of course would give us the only row that fits:
&gt;&gt;&gt; a[np.logical_and(a['Atom'] == 'C', a['AA2'] == 'GLN')]
array([(777, 'ARG', 'GLN', 'ARG', 'C', 1, 117.12999725341797, 0.0)], ...)
</snippet></ROW><ROW><id>8987209</id><snippet>itertools</snippet></ROW><ROW><id>8987443</id><snippet>results = []
for language in categories.language.all():
    results.append(Movie.objects.filter(title__istartswith=q, language=language)[:10])
</snippet></ROW><ROW><id>8987800</id><snippet>def findPeople(people, filter):
    ret = {}
    for k, v in people.items():
        if filter(v):
            ret[k] = v
    return ret
</snippet></ROW><ROW><id>8987800</id><snippet>findPeople( people, lambda x: x['age'] == 42 );
</snippet></ROW><ROW><id>8987866</id><snippet>if __name__ == "__main__":
    reload(sys)
    sys.setdefaultencoding("utf-8")
</snippet></ROW><ROW><id>8988419</id><snippet>&lt;devices&gt;
  &lt;device&gt;
    &lt;imsi&gt;01010101&lt;/imsi&gt;  
  &lt;/device&gt;
  &lt;device&gt;
    &lt;imsi&gt;123456&lt;/imsi&gt;
  &lt;/device&gt;
  &lt;device&gt;
    &lt;imsi&gt;9876543&lt;/imsi&gt;
  &lt;/device&gt;
&lt;/devices&gt;
</snippet></ROW><ROW><id>8988931</id><snippet>%Y</snippet></ROW><ROW><id>8988931</id><snippet>%y</snippet></ROW><ROW><id>8988931</id><snippet>try:</snippet></ROW><ROW><id>8988931</id><snippet>ValueError</snippet></ROW><ROW><id>8989090</id><snippet>HTTPS support is only available if the socket module was compiled with SSL support</snippet></ROW><ROW><id>8989333</id><snippet>"//TR/td/A" 
</snippet></ROW><ROW><id>8989333</id><snippet>"//TR/td/A@HREF"
</snippet></ROW><ROW><id>8989333</id><snippet>"//TR/td/A@ANYTHING"
</snippet></ROW><ROW><id>8989333</id><snippet>string innerValue = element.Text;
</snippet></ROW><ROW><id>8989333</id><snippet>string hrefValue = element.GetAttribute("href");
</snippet></ROW><ROW><id>8989779</id><snippet>#!/bin/sh

# load the virtual env
. $HOME/MY-VENV/bin/activate

# run the editor
/path/to/textmate "$@"
</snippet></ROW><ROW><id>8989817</id><snippet>Resolver</snippet></ROW><ROW><id>8989817</id><snippet>query()</snippet></ROW><ROW><id>8989817</id><snippet>dns.resolver.query()</snippet></ROW><ROW><id>8989817</id><snippet>Resolver</snippet></ROW><ROW><id>8989817</id><snippet>query()</snippet></ROW><ROW><id>8989817</id><snippet>Resolver</snippet></ROW><ROW><id>8989817</id><snippet>resolver = dns.resolver.Resolver()
resolver.timeout = 1
</snippet></ROW><ROW><id>8989817</id><snippet>try:
    domain = row[0]
    query = resolver.query(domain,'MX')
except:
    # etc.
</snippet></ROW><ROW><id>8989817</id><snippet>Resolver</snippet></ROW><ROW><id>8990026</id><snippet>os.path</snippet></ROW><ROW><id>8990026</id><snippet>if os.path.isdir(path):
    path = os.path.join(path, "")
</snippet></ROW><ROW><id>8990026</id><snippet>/</snippet></ROW><ROW><id>8990026</id><snippet>path</snippet></ROW><ROW><id>8990383</id><snippet>sys.getdefaultencoding()
</snippet></ROW><ROW><id>8990383</id><snippet>CREATE DATABASE new_db DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci
</snippet></ROW><ROW><id>8990408</id><snippet>classmethod</snippet></ROW><ROW><id>8990408</id><snippet>class</snippet></ROW><ROW><id>8990408</id><snippet>def cached_model(ttl=300):
    def closure(model_class):
        # ...
        # eventually:
        exists_decorator = cached(ttl=ttl, cache_key=exists_cache_key)
        model_class.exists = classmethod(exists_decorator(model_class.exists.im_func))

        return model_class
    return closure
</snippet></ROW><ROW><id>8990408</id><snippet>im_func</snippet></ROW><ROW><id>8990408</id><snippet>classmethod</snippet></ROW><ROW><id>8990408</id><snippet>classmethod</snippet></ROW><ROW><id>8990584</id><snippet>pip install gdata
</snippet></ROW><ROW><id>8990584</id><snippet>&gt;&gt;&gt; from gdata.contacts import client
&gt;&gt;&gt; gd_client = client.ContactsClient(source='YOUR_APPLICATION_NAME', domain='place.com')
&gt;&gt;&gt; profile = gd_client.GetProfile('https://www.google.com/m8/feeds/profiles/domain/place.com/full/pname')
</snippet></ROW><ROW><id>8990597</id><snippet>with</snippet></ROW><ROW><id>8990597</id><snippet>with open("x.txt") as fh:
    ...do something with the file handle fh
</snippet></ROW><ROW><id>8990597</id><snippet>with</snippet></ROW><ROW><id>8990597</id><snippet>with</snippet></ROW><ROW><id>8990597</id><snippet>try</snippet></ROW><ROW><id>8990597</id><snippet>finally</snippet></ROW><ROW><id>8990597</id><snippet>file_handles = []
try:
    for file in file_list:
        file_handles.append(open(file))

    # Do some calculations with open files

finally:
    for fh in file_handles:
        fh.close()
</snippet></ROW><ROW><id>8990597</id><snippet>try</snippet></ROW><ROW><id>8990597</id><snippet>except</snippet></ROW><ROW><id>8990597</id><snippet>else</snippet></ROW><ROW><id>8990597</id><snippet>finally</snippet></ROW><ROW><id>8990597</id><snippet>try</snippet></ROW><ROW><id>8990597</id><snippet>except</snippet></ROW><ROW><id>8990597</id><snippet>else</snippet></ROW><ROW><id>8990597</id><snippet>finally</snippet></ROW><ROW><id>8990597</id><snippet>finally</snippet></ROW><ROW><id>8990597</id><snippet>finally</snippet></ROW><ROW><id>8990597</id><snippet>finally</snippet></ROW><ROW><id>8990702</id><snippet>map(sum, itertools.izip_longest(self, other, fillvalue=0))
</snippet></ROW><ROW><id>8990702</id><snippet>itertools.starmap(operator.add, 
                  itertools.izip_longest(self, other, fillvalue=0))
</snippet></ROW><ROW><id>8990710</id><snippet>foo = staticmethod(foo)</snippet></ROW><ROW><id>8990710</id><snippet>__get__</snippet></ROW><ROW><id>8990710</id><snippet>class Foo(object):
    def __get__(self, obj, type=None):
        return self

    def __call__(self, x):
        print(x)

foo = Foo()

class A(object):
    def __init__(self):
        self.f = foo
class B(object):
    f = foo


foo(1) # 1
a = A()

a.f(1) # 1
print(a.f)               #&lt;function foo at 0x2321d10&gt;
print(a.f.__get__(a, A)) #&lt;function foo at 0x2321d10&gt;

b = B()
b.f(1) # 1


print(b.f)               #&lt;__main__.Foo object at 0x7fa8c260be10&gt;
</snippet></ROW><ROW><id>8990733</id><snippet>create_render_args</snippet></ROW><ROW><id>8990733</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>8990733</id><snippet>_</snippet></ROW><ROW><id>8990739</id><snippet>django.db.transaction.enter_transaction_management(using='primary')
django.db.transaction.managed(True, using='primary')

i = 0 
for record in records:
    i += 1
    r = PrimaryDBModel(**record)
    r.save() # This will no be committed until the end.
    if not i % 100:
        SecondaryDBModel.update()
        status = SecondaryDBModel(id=123)
        status.current_row = i
        status.save() # This will committed immediately.

django.db.transaction.commit(using='primary')
django.db.transaction.leave_transaction_management(using='primary')
</snippet></ROW><ROW><id>8990786</id><snippet>a = 1
</snippet></ROW><ROW><id>8990786</id><snippet>a</snippet></ROW><ROW><id>8990786</id><snippet>1</snippet></ROW><ROW><id>8990786</id><snippet>b = a
</snippet></ROW><ROW><id>8990786</id><snippet>b</snippet></ROW><ROW><id>8990786</id><snippet>a</snippet></ROW><ROW><id>8990786</id><snippet>tom = [a, b, c]
</snippet></ROW><ROW><id>8990786</id><snippet>a</snippet></ROW><ROW><id>8990786</id><snippet>b</snippet></ROW><ROW><id>8990786</id><snippet>c</snippet></ROW><ROW><id>8990786</id><snippet>a</snippet></ROW><ROW><id>8990786</id><snippet>b</snippet></ROW><ROW><id>8990786</id><snippet>c</snippet></ROW><ROW><id>8990786</id><snippet>a</snippet></ROW><ROW><id>8990786</id><snippet>tom[0]</snippet></ROW><ROW><id>8990786</id><snippet>tom[0]</snippet></ROW><ROW><id>8990786</id><snippet>a</snippet></ROW><ROW><id>8990786</id><snippet>exec</snippet></ROW><ROW><id>8990786</id><snippet>globals()</snippet></ROW><ROW><id>8990786</id><snippet>getattr</snippet></ROW><ROW><id>8990786</id><snippet>setattr</snippet></ROW><ROW><id>8990786</id><snippet>&gt;&gt;&gt; class Foo():
...     pass
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.a = 1
&gt;&gt;&gt; setattr(f, 'b', 2)
&gt;&gt;&gt; getattr(f, 'a')
1
&gt;&gt;&gt; f.b
2
</snippet></ROW><ROW><id>8990983</id><snippet>if request.method == 'GET':
</snippet></ROW><ROW><id>8990983</id><snippet>if request.GET:
</snippet></ROW><ROW><id>8990993</id><snippet>time.struct_time</snippet></ROW><ROW><id>8990993</id><snippet>strptime</snippet></ROW><ROW><id>8990993</id><snippet>sort</snippet></ROW><ROW><id>8990993</id><snippet>#!/usr/bin/python

import time

dates = [
    "Jan 16 18:35 2012",
    "Aug 16 21:14 2012",
    "Dec 05 22:27 2012",
    "Jan 22 19:42 2012",
    "Jan 24 00:49 2012",
    "Dec 15 22:41 2012",
    "Dec 13 01:41 2012",
    "Dec 24 01:23 2012",
    "Jan 21 00:35 2012",
    "Jan 16 18:35 2012",
]

def main():
    datelist = []
    for date in dates:
        date = time.strptime(date, '%b %d %H:%M %Y')
        datelist.append(date)

    print datelist
    datelist.sort()
    print datelist

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8991002</id><snippet>$&gt; apt-get install libapache2-mod-wsgi
</snippet></ROW><ROW><id>8991174</id><snippet>append()</snippet></ROW><ROW><id>8991174</id><snippet>None</snippet></ROW><ROW><id>8991174</id><snippet>all_subsets = []
subsets = [[], [2]]
left_most = 1 
for subset in subsets:
    print subset
    all_subsets.append(subset)
    all_subsets.append(subset + [left_most])
print all_subsets
</snippet></ROW><ROW><id>8991174</id><snippet>[[], [1], [2], [2, 1]]</snippet></ROW><ROW><id>8991493</id><snippet>ListView</snippet></ROW><ROW><id>8991493</id><snippet>raw_list</snippet></ROW><ROW><id>8991493</id><snippet>One</snippet></ROW><ROW><id>8991493</id><snippet>raw2new</snippet></ROW><ROW><id>8991493</id><snippet>One</snippet></ROW><ROW><id>8991493</id><snippet>Two</snippet></ROW><ROW><id>8991493</id><snippet>new2raw</snippet></ROW><ROW><id>8991493</id><snippet>Two</snippet></ROW><ROW><id>8991493</id><snippet>One</snippet></ROW><ROW><id>8991493</id><snippet>class ListView(list):
  def __init__(self, raw_list, raw2new, new2raw):
    self._data = raw_list
    self.converters = {'raw2new': raw2new,
        'new2raw': new2raw}

  def __repr__(self):
    repr_list = [self.converters['raw2new'](item) for item in self._data]
    repr_str = "["
    for element in repr_list:
      repr_str += element.__repr__() + ",\n "
    repr_str = repr_str[:-3] + "]"
    return repr_str

  def append(self, item):
    self._data.append(self.converters['new2raw'](item))

  def pop(self, index):
    self._data.pop(index)

  def __getitem__(self, index):
    return self.converters['raw2new'](self._data[index])

  def __setitem__(self, key, value):
    self._data.__setitem__(key, self.converters['new2raw'](value))

  def __delitem__(self, key):
    return self._data.__delitem__(key)

  def __getslice__(self, i, j):
    return ListView(self._data.__getslice__(i,j), **self.converters)

  def __contains__(self, item):
    return self._data.__contains__(self.converters['new2raw'](item))

  def __add__(self, other_list_view):
    assert self.converters == other_list_view.converters
    return ListView(
        self._data + other_list_view._data,
        **self.converters
        )

  def __len__(self):
    return len(self._data)

  def __eq__(self, other):
    return self._data == other._data

  def __iter__(self):
    return iter([self.converters['raw2new'](item) for item in self._data])
</snippet></ROW><ROW><id>8991493</id><snippet>DataUI</snippet></ROW><ROW><id>8991493</id><snippet>class DataUI(object):
  def __init__(self, list_of_ones):
    for one in list_of_ones:
      assert type(one) == One
    self.list_of_ones = list_of_ones
    self.list_of_twos = ListView(
        self.list_of_ones,
        Two.newByDTO,
        Two.getDTO
        )
</snippet></ROW><ROW><id>8991493</id><snippet>Two</snippet></ROW><ROW><id>8991493</id><snippet>def getDTO(self):
  return self._dto
</snippet></ROW><ROW><id>8991493</id><snippet>import unittest
import numpy as np

class ListView(list):
  def __init__(self, raw_list, raw2new, new2raw):
    self._data = raw_list
    self.converters = {'raw2new': raw2new,
        'new2raw': new2raw}

  def __repr__(self):
    repr_list = [self.converters['raw2new'](item) for item in self._data]
    repr_str = "["
    for element in repr_list:
      repr_str += element.__repr__() + ",\n "
    repr_str = repr_str[:-3] + "]"
    return repr_str

  def append(self, item):
    self._data.append(self.converters['new2raw'](item))

  def pop(self, index):
    self._data.pop(index)

  def __getitem__(self, index):
    return self.converters['raw2new'](self._data[index])

  def __setitem__(self, key, value):
    self._data.__setitem__(key, self.converters['new2raw'](value))

  def __delitem__(self, key):
    return self._data.__delitem__(key)

  def __getslice__(self, i, j):
    return ListView(self._data.__getslice__(i,j), **self.converters)

  def __contains__(self, item):
    return self._data.__contains__(self.converters['new2raw'](item))

  def __add__(self, other_list_view):
    assert self.converters == other_list_view.converters
    return ListView(
        self._data + other_list_view._data,
        **self.converters
        )

  def __len__(self):
    return len(self._data)

  def __iter__(self):
    return iter([self.converters['raw2new'](item) for item in self._data])

  def __eq__(self, other):
    return self._data == other._data


class One(object):
  """
  Data Transfere Object (DTO)
  """
  def __init__(self, name, data):
    assert type(name) == str
    assert type(data) == str
    self.name = name
    self.data = data

  def __repr__(self):
    return "%s(%r, %r)" %(self.__class__.__name__, self.name, self.data)


class Two(np.ndarray):
  _DTO = One
  def __new__(cls, name, data):
    dto = cls._DTO(name, data)
    return cls.newByDTO(dto)

  @classmethod
  def newByDTO(cls, dto):
    obj = np.fromstring(dto.data, dtype="float", sep=',').view(cls)
    obj.setflags(write=False) # Immutable
    obj._dto = dto
    return obj

  @property
  def name(self):
    return self._dto.name

  def getDTO(self):
    return self._dto


class DataUI(object):
  def __init__(self, list_of_ones):
    for one in list_of_ones:
      assert type(one) == One
    self.list_of_ones = list_of_ones
    self.list_of_twos = ListView(
        self.list_of_ones,
        Two.newByDTO,
        Two.getDTO
        )


class TestListView(unittest.TestCase):
  def testProperties(self):
    o1 = One('first object', "1, 3.0, 7, 8,1")
    o2 = One('second object', "3.7, 8, 10")
    my_data = DataUI ([o1, o2])

    t1 = Two('third object', "4.8, 8.2, 10.3")
    t2 = Two('forth object', "33, 1.8, 1.0")
    # append:
    my_data.list_of_twos.append(t1)
    # __getitem__:
    np.testing.assert_array_equal(my_data.list_of_twos[2], t1)
    # __add__:
    np.testing.assert_array_equal(
        (my_data.list_of_twos + my_data.list_of_twos)[5], t1)
    # __getslice__:
    np.testing.assert_array_equal(
        my_data.list_of_twos[1:],
        my_data.list_of_twos[1:2] + my_data.list_of_twos[2:]
        )
    # __contains__:
    self.assertEqual(my_data.list_of_twos.__contains__(t1), True)
    # __setitem__:
    my_data.list_of_twos.__setitem__(1, t1),
    np.testing.assert_array_equal(my_data.list_of_twos[1], t1)
    # __delitem__:
    l1 = len(my_data.list_of_twos)
    my_data.list_of_twos.__delitem__(1)
    l2 = len(my_data.list_of_twos)
    self.assertEqual(l1 - 1, l2)
    # __iter__:
    my_data_2 = DataUI ([])
    for two in my_data.list_of_twos:
      my_data_2.list_of_twos.append(two)


if __name__ == '__main__':
  unittest.main()
</snippet></ROW><ROW><id>8991536</id><snippet>dict</snippet></ROW><ROW><id>8991536</id><snippet>def hello(name):
    return 'Hello, ' + name

funcMap = {'greet' : hello}

greeting = funcMap['greet']('Peter')
print greeting # Hello, Peter
</snippet></ROW><ROW><id>8991553</id><snippet>grouper()</snippet></ROW><ROW><id>8991553</id><snippet>itertools</snippet></ROW><ROW><id>8991553</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>8991553</id><snippet>[my_list[i:i + chunk_size] for i in range(0, len(my_list), chunk_size)]
</snippet></ROW><ROW><id>8991553</id><snippet>def grouper(n, iterable):
    it = iter(iterable)
    while True:
       chunk = tuple(itertools.islice(it, n))
       if not chunk:
           return
       yield chunk
</snippet></ROW><ROW><id>8991864</id><snippet>def infinity(start):
    yield start
    for x in infinity(start + 1):
        yield x
</snippet></ROW><ROW><id>8991864</id><snippet>def infinity(start):
    yield start
    yield from infinity(start + 1)
</snippet></ROW><ROW><id>8991997</id><snippet>snmpWalk()</snippet></ROW><ROW><id>8991997</id><snippet>snmpWalk()</snippet></ROW><ROW><id>8991997</id><snippet>snmpWalk()</snippet></ROW><ROW><id>8992130</id><snippet>from django.db.models import Count

Player.objects.annotate(injury_count=Count('playerinjury')).order_by('-injury_count')[:5]
</snippet></ROW><ROW><id>8992714</id><snippet>data.table</snippet></ROW><ROW><id>8992714</id><snippet>data.table</snippet></ROW><ROW><id>8992726</id><snippet>__new__</snippet></ROW><ROW><id>8992726</id><snippet>__init__</snippet></ROW><ROW><id>8992726</id><snippet>object.__new__</snippet></ROW><ROW><id>8992726</id><snippet>class Borg(object):
    _state = {}
    def __new__(cls, *p, **k):
        self = object.__new__(cls)
        self.__dict__ = cls._state
        return self

    def __init__(self, foo):
        print(foo)
</snippet></ROW><ROW><id>8992726</id><snippet>&gt;&gt;&gt; import borg
&gt;&gt;&gt; b = borg.Borg(foo='bar')
bar
</snippet></ROW><ROW><id>8992850</id><snippet>import a.b.c</snippet></ROW><ROW><id>8992850</id><snippet>for module in ['a', 'a.b', 'a.b.c']:
    if module not in sys.modules:
        sys.modules[module] = (A new empty module object)
        run every line of code in module # this may recursively call import
        add the module to its parent's namespace
return module 'a'
</snippet></ROW><ROW><id>8992850</id><snippet>a</snippet></ROW><ROW><id>8992850</id><snippet>b</snippet></ROW><ROW><id>8992850</id><snippet>a.b</snippet></ROW><ROW><id>8992850</id><snippet>import a.b.c.d.e.f.g</snippet></ROW><ROW><id>8992850</id><snippet>a</snippet></ROW><ROW><id>8992850</id><snippet>a.b.c.d.e.f.g.some_function()</snippet></ROW><ROW><id>8992850</id><snippet>alpha/bravo/echo/__init__.py</snippet></ROW><ROW><id>8992850</id><snippet>import alpha.bravo.delta</snippet></ROW><ROW><id>8992850</id><snippet>['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__return__']</snippet></ROW><ROW><id>8992850</id><snippet>['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', 'delta']</snippet></ROW><ROW><id>8992850</id><snippet>['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__']</snippet></ROW><ROW><id>8992850</id><snippet>['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__return__', 'delta.foo']</snippet></ROW><ROW><id>8992850</id><snippet>['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__return__', 'alpha']</snippet></ROW><ROW><id>8992850</id><snippet>print alpha.bravo.delta.delta_foo(1)</snippet></ROW><ROW><id>8992850</id><snippet>alpha</snippet></ROW><ROW><id>8992850</id><snippet>alpha</snippet></ROW><ROW><id>8992850</id><snippet>alpha.bravo</snippet></ROW><ROW><id>8992850</id><snippet>import sys
sys.modules['alpha.bravo.delta'].delta_foo(1)
</snippet></ROW><ROW><id>8992850</id><snippet>from alpha.bravo.delta import delta_foo
</snippet></ROW><ROW><id>8992850</id><snippet>from alpha.bravo.delta</snippet></ROW><ROW><id>8992892</id><snippet>struct.data</snippet></ROW><ROW><id>8992892</id><snippet>test.StringIntMap</snippet></ROW><ROW><id>8992892</id><snippet>dict</snippet></ROW><ROW><id>8992892</id><snippet>struct.data = test.StringIntMap({ 'A':1, 'B':2 })
</snippet></ROW><ROW><id>8992980</id><snippet>result.group(0)</snippet></ROW><ROW><id>8992980</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.search('(?&lt;=abc)def', 'abcdef')
&gt;&gt;&gt; print m
&lt;_sre.SRE_Match object at 0x018ECF70&gt;
&gt;&gt;&gt; m.group(0)
'def'
</snippet></ROW><ROW><id>8993014</id><snippet>%run</snippet></ROW><ROW><id>8993014</id><snippet>In [#]: %run -i filename.py
</snippet></ROW><ROW><id>8993014</id><snippet>-i</snippet></ROW><ROW><id>8993014</id><snippet>%run?&lt;ENTER&gt;</snippet></ROW><ROW><id>8993053</id><snippet>most_injured = Player.objects.annotate(injury_count=Count('playerinjury')).order_by('-injury_count')[:5]
</snippet></ROW><ROW><id>8993692</id><snippet>:set foldignore=
</snippet></ROW><ROW><id>8993692</id><snippet>:help foldignore</snippet></ROW><ROW><id>8993692</id><snippet>'foldignore' 'fdi'  string (default: "#")

    Used only when 'foldmethod' is "indent".  Lines starting with
    characters in 'foldignore' will get their fold level from surrounding
    lines.  White space is skipped before checking for this character.
    The default "#" works well for C programs.  See |fold-indent|.
</snippet></ROW><ROW><id>8993759</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>8993759</id><snippet>__init__.py</snippet></ROW><ROW><id>8993759</id><snippet>from BeautifulSoup.BeautifulSoup import BeautifulSoup</snippet></ROW><ROW><id>8993840</id><snippet>import random
from operator import add, sub, mul

ops = (add, sub, mul)
op = random.choice(ops)

beg1, beg2 = random.randint(1,10), random.randint(1,10)

ans = op(beg1, beg2)
</snippet></ROW><ROW><id>8994008</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; reg = "(foo)(?i)"
&gt;&gt;&gt; re.split(reg, "fOO1foo2FOO3")
['', 'fOO', '1', 'foo', '2', 'FOO', '3']
</snippet></ROW><ROW><id>8994150</id><snippet>result = soup.find('div', {'class' :'flagPageTitle'}).text
</snippet></ROW><ROW><id>8994212</id><snippet>pymacs.el</snippet></ROW><ROW><id>8994212</id><snippet>python-mode.el</snippet></ROW><ROW><id>8994212</id><snippet>M-x apropos</snippet></ROW><ROW><id>8994212</id><snippet>C-h a</snippet></ROW><ROW><id>8994212</id><snippet>^py</snippet></ROW><ROW><id>8994212</id><snippet>^pymacs</snippet></ROW><ROW><id>8994212</id><snippet>elisp</snippet></ROW><ROW><id>8994521</id><snippet>data = '8/5/32'
data_list = data.split('/')

def yearCheck(data_list):
    # Years may be truncated to two digits and may in that case
    # also omit the leading 0 (if there is one), so 2000 could 
    # be given as "2000", "00" or "0" (but not as an empty string).
    # Further examples:
    #   if 2099, could be given as 99
    #   if 2005, could be given as 05 or 5
    #   199 will not happen i.e. doesn't say that years may be 
    #       truncated to three digits
    for index, item in enumerate(data_list):
        if len(item) &gt; 4:
            # e.g. 30000
            print item, '- Data is invalid'
            return
        if len(item) == 4 and int(item) not in xrange(2000, 3000):
            # e.g. 3015
            print item, '- Data is invalid'
            return        
        if len(item) == 3:
            # e.g. 199
            print item, '- Data is invalid'   
            return
        if len(item) &lt; 3 and int(item) in xrange(32, 100):
            data_list[index] = int(item) + 2000
    return data_list

def integer(data_list):
    int_data_list = [int(item) for item in data_list]
    return int_data_list.sort()

yearCheck(data_list)
integer(data_list)
print data_list
</snippet></ROW><ROW><id>8994954</id><snippet>fill_between</snippet></ROW><ROW><id>8994959</id><snippet>obj</snippet></ROW><ROW><id>8994959</id><snippet>each.put(obj,False)</snippet></ROW><ROW><id>8994959</id><snippet>obj.reset()</snippet></ROW><ROW><id>8995215</id><snippet>zip</snippet></ROW><ROW><id>8995215</id><snippet>return render_to_response('gallery/list_galleries.html',
                          {'galleries': zip(list_galleries,  g)})
</snippet></ROW><ROW><id>8995215</id><snippet>{% for gallery, latest in galleries %}
    &lt;!-- your html --&gt;
{% endfor %}
</snippet></ROW><ROW><id>8995215</id><snippet>gallery</snippet></ROW><ROW><id>8995215</id><snippet>list_galleries</snippet></ROW><ROW><id>8995215</id><snippet>g</snippet></ROW><ROW><id>8995215</id><snippet>Gallery</snippet></ROW><ROW><id>8995215</id><snippet>class Gallery(models.Model):
    # SQL columns

    @property
    def thumb(self):
        return self.latest(limit=1, public=True)
</snippet></ROW><ROW><id>8995215</id><snippet>g</snippet></ROW><ROW><id>8995215</id><snippet>gallery.thumb</snippet></ROW><ROW><id>8995713</id><snippet>index = str.find('!')
if index &gt; -1:
    str = str[index:] # or (index+1) to get rid of the '!', too
</snippet></ROW><ROW><id>8995726</id><snippet>{a =&gt; 0, b =&gt; 1, c =&gt; 2}</snippet></ROW><ROW><id>8995760</id><snippet>entries = ('a', 'b', 'c')
the_dict = {'b': 'foo'}

def entries_to_remove(entries, the_dict):
    for key in entries:
        if key in the_dict:
            del the_dict[key]
</snippet></ROW><ROW><id>8995776</id><snippet>imgur-api</snippet></ROW><ROW><id>8995776</id><snippet>Imgur-API</snippet></ROW><ROW><id>8995776</id><snippet>lxml</snippet></ROW><ROW><id>8995776</id><snippet>XPath expressions</snippet></ROW><ROW><id>8995776</id><snippet>from lxml import etree


xml = """&lt;foo&gt;baz!&lt;/foo&gt;"""

&gt;&gt;&gt; xml = """&lt;foo&gt;baz!&lt;/foo&gt;"""
&gt;&gt;&gt; xp = etree.fromstring(xml)
&gt;&gt;&gt; values = xp.xpath("//foo/text()")
&gt;&gt;&gt; values
['baz!']
</snippet></ROW><ROW><id>8995776</id><snippet># parse from file
et = etree.parse(source_xml)
value = et.xpath("your xpath xpr here")
</snippet></ROW><ROW><id>8995776</id><snippet># parse from URL
etree.parse("http://example.com/somefile.xml")
</snippet></ROW><ROW><id>8995776</id><snippet>firebug</snippet></ROW><ROW><id>8995776</id><snippet>firepath</snippet></ROW><ROW><id>8996104</id><snippet>json</snippet></ROW><ROW><id>8996104</id><snippet>simplejson</snippet></ROW><ROW><id>8996229</id><snippet>class MyModel(QtCore.QAbstractTableModel):
    __init__(self, data_structure):
        super().__init__()
        self.data_structure = data_structure

    # ...

    def sort_function(self):
        self.layoutAboutToBeChanged.emit()
        # custom_sort() is built into the data structure
        self.data_structure.custom_sort()
        self.layoutChanged.emit()
</snippet></ROW><ROW><id>8996448</id><snippet>&lt;type 'instance'&gt;</snippet></ROW><ROW><id>8996448</id><snippet>x.__class__</snippet></ROW><ROW><id>8996448</id><snippet>x[0].__class__.__name__</snippet></ROW><ROW><id>8996448</id><snippet>ObjectName</snippet></ROW><ROW><id>8996534</id><snippet>def getffdirs():

  dirs = {}
  path = os.curdir
  for d in os.listdir(path):      

    if os.path.isdir(d):
        print("Entering " + d)
        dirs[d] = [] # add directory with empty list

        curPath = os.path.join(path, d)
        for f in os.listdir(curPath):      

            if os.path.isfile(f):
                print("file " + f)  
                dirs[d].append(f) # add files to appropriate directory
  return dirs
</snippet></ROW><ROW><id>8996534</id><snippet>for dir,files in dirs.items(): # notice the call to dirs.items(), thats what was missing.
  print "directory: ",dir
  print "files:"
  for f in files:
    print f
</snippet></ROW><ROW><id>8996587</id><snippet>from datetime import datetime

string = '1856-00-00 00:00:00'

try:
    date = datetime.strptime(string, '%Y-%m-%d %H:%M:%S')
except ValueError:
    date = datetime(1960, 1, 1, 0, 0, 0)

print(date)
</snippet></ROW><ROW><id>8997122</id><snippet>#arcpy.Extent(293490,5898230,316430,5930230)

#use 'CURRENT' if running from arcmap, when published use MXD on disk
mxd = arcpy.mapping.MapDocument("CURRENT")

df = arcpy.mapping.ListDataFrames(mxd)[0]
newExtent = df.extent
newExtent.XMin, newExtent.YMin = 293490,5898230
newExtent.XMax, newExtent.YMax = 316430,5930230
df.extent = newExtent
</snippet></ROW><ROW><id>8997247</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>8997247</id><snippet>pip install virtualenv # if you don't have it.

virtualenv --no-site-packages env 
# this creates a virtual python environment that doesn't include system packages

source env/bin/activate
# this forces your bash session to use that environment

pip install django
# installs a fresh copy of django to your new environment

cd path_to_my_django_project    
# now go to your site directory

python manager.py runserver
# visit admin site.
</snippet></ROW><ROW><id>8997297</id><snippet>as</snippet></ROW><ROW><id>8997297</id><snippet>import my_module as some_other_name
from suds.client import Client as Spam
</snippet></ROW><ROW><id>8997342</id><snippet>info = {"author": request.form['author'], "title": request.form['title'], "text": request.form['text']}
</snippet></ROW><ROW><id>8997342</id><snippet>info = {"info": [request.form['author'], request.form['title'], request.form['text']]}
</snippet></ROW><ROW><id>8997538</id><snippet>#!/usr/bin/python2.7
</snippet></ROW><ROW><id>8997659</id><snippet>i = 0</snippet></ROW><ROW><id>8997659</id><snippet>i[0] = 0</snippet></ROW><ROW><id>8997659</id><snippet>i</snippet></ROW><ROW><id>8997659</id><snippet>i = 0</snippet></ROW><ROW><id>8997659</id><snippet>i</snippet></ROW><ROW><id>8997659</id><snippet>0</snippet></ROW><ROW><id>8997659</id><snippet>l[0]</snippet></ROW><ROW><id>8997659</id><snippet>l</snippet></ROW><ROW><id>8997659</id><snippet>i</snippet></ROW><ROW><id>8997659</id><snippet>i</snippet></ROW><ROW><id>8997659</id><snippet>i[0]</snippet></ROW><ROW><id>8997659</id><snippet>.__getitem__(0)</snippet></ROW><ROW><id>8997659</id><snippet>l</snippet></ROW><ROW><id>8997659</id><snippet>i</snippet></ROW><ROW><id>8998010</id><snippet>def hash(tuple):
    mult = 1000003
    x = 0x345678
    for index, item in enumerate(tuple):
        x = ((x ^ hash(item)) * mult) &amp; (1&lt;&lt;32)
        mult += (82520 + (len(tuple)-index)*2)
    return x + 97531
</snippet></ROW><ROW><id>8998010</id><snippet>def hash(string):
    x = string[0] &lt;&lt; 7
    for chr in string[1:]:
        x = ((1000003 * x) ^ chr) &amp; (1&lt;&lt;32)
    return x
</snippet></ROW><ROW><id>8998068</id><snippet>&gt;&gt;&gt; 'FOO'.lower() in set(('foo', 'bar', 'baz'))
True
&gt;&gt;&gt; 'Quux'.lower() in set(('foo', 'bar', 'baz'))
False
</snippet></ROW><ROW><id>8998456</id><snippet>exec()</snippet></ROW><ROW><id>8998456</id><snippet>vendor = get_vendor(hostname)
vendor_path = 'platform_%s.stats' % vendor
exec("import " + vendor_path)
stats = vendor_path.stats(constructor_args)
</snippet></ROW><ROW><id>8998541</id><snippet>axes.transData.transform(points)</snippet></ROW><ROW><id>8998541</id><snippet>import matplotlib.pyplot as plt

# set up a figure
fig = plt.figure()
ax = fig.add_subplot(111)
x = np.arange(0, 10, 0.005)
y = np.exp(-x/2.) * np.sin(2*np.pi*x)
ax.plot(x,y)

# what's one vertical unit &amp; one horizontal unit in pixels?
ax.transData.transform([(0,1),(1,0)])-ax.transData.transform((0,0))
# Returns:
# array([[   0.,  384.],   &lt;-- one y unit is 384 pixels (on my computer)
#        [ 496.,    0.]])  &lt;-- one x unit is 496 pixels.
</snippet></ROW><ROW><id>8998541</id><snippet>matplotlib.transforms.ScaledTransform</snippet></ROW><ROW><id>8998541</id><snippet>fig.dpi_scale_trans</snippet></ROW><ROW><id>8998773</id><snippet>ns0</snippet></ROW><ROW><id>8998773</id><snippet>ET.register_namespace('', "http://www.topografix.com/GPX/1/1")
ET.register_namespace('', "http://www.topografix.com/GPX/1/0")
</snippet></ROW><ROW><id>8998854</id><snippet>class B(A):
    b = 2
    y = b # works fine
    x = a # NameError: name 'a' is not defined
    x = A.a # works fine
</snippet></ROW><ROW><id>8998854</id><snippet>type</snippet></ROW><ROW><id>8998854</id><snippet>B = type('B', (A,), classdict_from_scope)
</snippet></ROW><ROW><id>8998854</id><snippet>B</snippet></ROW><ROW><id>8998854</id><snippet>B</snippet></ROW><ROW><id>8998854</id><snippet>x = a</snippet></ROW><ROW><id>8998854</id><snippet>a</snippet></ROW><ROW><id>8998854</id><snippet>A</snippet></ROW><ROW><id>8998854</id><snippet>A</snippet></ROW><ROW><id>8998854</id><snippet>class B(A):
    b = 2
    y = b

B.x = B.a
</snippet></ROW><ROW><id>8998854</id><snippet>B</snippet></ROW><ROW><id>8998854</id><snippet>x</snippet></ROW><ROW><id>8998854</id><snippet>B</snippet></ROW><ROW><id>8998854</id><snippet>x</snippet></ROW><ROW><id>8998854</id><snippet>B.x</snippet></ROW><ROW><id>8999406</id><snippet>from funcbuilder import OperatorMachinery

class FuncOperations(metaclass=OperatorMachinery):
     def __init__(self, function):
          self.func = function
     def __call__(self, *args, **kwargs):
          return self.func(*args, **kwargs)

def func(self, *n, oper=None):
    if not n:
        return type(self)(lambda x: oper(self.func(x)))
    return type(self)(lambda x: oper(self.func(x), n[0](x)))

FuncOperations.apply_operators([func, func])
</snippet></ROW><ROW><id>8999406</id><snippet>@FuncOperations
def f(x):
    return x + 1

@FuncOperations
def g(x):
    return x + 2
</snippet></ROW><ROW><id>8999406</id><snippet>&gt;&gt;&gt; z = f * g
&gt;&gt;&gt; z(3)
20
</snippet></ROW><ROW><id>8999406</id><snippet>FuncOperation</snippet></ROW><ROW><id>8999406</id><snippet>z = -f + g * h
</snippet></ROW><ROW><id>8999595</id><snippet>re.split(r"(?:^|(?:[^\S\n]*\n){2}(?m)^)[ \t]+\d+[ \t]+[\r\n]+", text)
</snippet></ROW><ROW><id>8999956</id><snippet>AttributeError</snippet></ROW><ROW><id>8999956</id><snippet>self.lineFlags[-1]
</snippet></ROW><ROW><id>8999956</id><snippet>lineFlag</snippet></ROW><ROW><id>8999956</id><snippet>self.smlData = [ 0 ] * SCompiler.RAMSIZE
</snippet></ROW><ROW><id>8999956</id><snippet>=</snippet></ROW><ROW><id>8999956</id><snippet>self.lineFlags[ -1 ] * SCompiler.RAMSIZE
</snippet></ROW><ROW><id>8999956</id><snippet>self.lineFlags = [ -1 ] * SCompiler.RAMSIZE
</snippet></ROW><ROW><id>9000152</id><snippet>except</snippet></ROW><ROW><id>9000216</id><snippet>id(object) 
Return the “identity” of an object. This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.
</snippet></ROW><ROW><id>9000216</id><snippet>&gt;&gt;&gt; class Foo:
...     pass
... 
&gt;&gt;&gt; x = Foo()
&gt;&gt;&gt; y = Foo()
&gt;&gt;&gt; id (x)
17385736
&gt;&gt;&gt; id (y)
20391336
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9000378</id><snippet>class filecmp.dircmp(a, b[, ignore[, hide]])
</snippet></ROW><ROW><id>9000429</id><snippet>urllib.quote()</snippet></ROW><ROW><id>9000429</id><snippet>urllib.quote_plus()</snippet></ROW><ROW><id>9000429</id><snippet>%xx</snippet></ROW><ROW><id>9000429</id><snippet>urllib.urlencode()</snippet></ROW><ROW><id>9000429</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.quote('New York')
'New%20York'
&gt;&gt;&gt; urllib.quote_plus('New York')
'New+York'
&gt;&gt;&gt; urllib.urlencode({'address': 'New York', 'sensor': 'false'})
'sensor=false&amp;address=New+York'
</snippet></ROW><ROW><id>9000442</id><snippet>tuple = # something ...
</snippet></ROW><ROW><id>9000442</id><snippet>tuple = 'one', two'
function('add this')
</snippet></ROW><ROW><id>9000442</id><snippet>function</snippet></ROW><ROW><id>9000442</id><snippet>tuple</snippet></ROW><ROW><id>9000442</id><snippet>tuple = 'one', 'two'

def function(string):
    global tuple
    if new_string not in tuple:
        tuple = (new_string,) + tuple

function('add this')
</snippet></ROW><ROW><id>9000442</id><snippet>tuple = 'one', two'
function(tuple, 'add this')
</snippet></ROW><ROW><id>9000442</id><snippet>function</snippet></ROW><ROW><id>9000442</id><snippet>tuple = 'one', 'two'

def function(old_tuple, string):
    global tuple
    if new_string not in old_tuple:
        tuple = (new_string,) + old_tuple

function(tuple, 'add this')
</snippet></ROW><ROW><id>9001030</id><snippet>urls = ('(.*)', 'hello')
</snippet></ROW><ROW><id>9001089</id><snippet>__iter__</snippet></ROW><ROW><id>9001089</id><snippet>__getitem__</snippet></ROW><ROW><id>9001089</id><snippet>&gt;&gt;&gt; def is_container_iterable(o):
...     return hasattr(o, '__iter__') and hasattr(o, '__getitem__')
... 
&gt;&gt;&gt; is_container_iterable([])
True
&gt;&gt;&gt; is_container_iterable(())
True
&gt;&gt;&gt; is_container_iterable({})
True
&gt;&gt;&gt; is_container_iterable(range(5))
True
&gt;&gt;&gt; is_container_iterable(iter([]))
False
</snippet></ROW><ROW><id>9001089</id><snippet>__iter__</snippet></ROW><ROW><id>9001089</id><snippet>__next__</snippet></ROW><ROW><id>9001089</id><snippet>__next__</snippet></ROW><ROW><id>9001089</id><snippet>__next__</snippet></ROW><ROW><id>9001089</id><snippet>&gt;&gt;&gt; def foo():
...    for x in range(5):
...        yield x
... 
&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f.__next__
&lt;method-wrapper '__next__' of generator object at 0xb73c02d4&gt;
</snippet></ROW><ROW><id>9001089</id><snippet>__next__</snippet></ROW><ROW><id>9001089</id><snippet>__iter__</snippet></ROW><ROW><id>9001089</id><snippet>&gt;&gt;&gt; r = range(5)
&gt;&gt;&gt; r.__next__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'range' object has no attribute '__next__'
&gt;&gt;&gt; ri = iter(r)
&gt;&gt;&gt; ri.__next__
&lt;method-wrapper '__next__' of range_iterator object at 0xb73bef80&gt;
</snippet></ROW><ROW><id>9001089</id><snippet>__iter__</snippet></ROW><ROW><id>9001089</id><snippet>__next__</snippet></ROW><ROW><id>9001089</id><snippet>&gt;&gt;&gt; def is_container_iterable(o):
...     return hasattr(o, '__iter__') and not hasattr(o, '__next__')
... 
&gt;&gt;&gt; is_container_iterable(())
True
&gt;&gt;&gt; is_container_iterable([])
True
&gt;&gt;&gt; is_container_iterable({})
True
&gt;&gt;&gt; is_container_iterable(range(5))
True
&gt;&gt;&gt; is_container_iterable(iter(range(5)))
False
</snippet></ROW><ROW><id>9001089</id><snippet>__iter__</snippet></ROW><ROW><id>9001089</id><snippet>&gt;&gt;&gt; iter(f) is f
True
&gt;&gt;&gt; iter(r) is r
False
&gt;&gt;&gt; iter(ri) is ri
True
</snippet></ROW><ROW><id>9001089</id><snippet>&gt;&gt;&gt; def is_container_iterable(o):
...     return iter(o) is not o
... 
&gt;&gt;&gt; is_container_iterable([])
True
&gt;&gt;&gt; is_container_iterable(())
True
&gt;&gt;&gt; is_container_iterable({})
True
&gt;&gt;&gt; is_container_iterable(range(5))
True
&gt;&gt;&gt; is_container_iterable(iter([]))
False
</snippet></ROW><ROW><id>9001089</id><snippet>__iter__</snippet></ROW><ROW><id>9001089</id><snippet>&gt;&gt;&gt; def is_container_iterable(o):
...     try:
...         object.__getattribute__(o, '__iter__')
...     except AttributeError:
...         return False
...     try:
...         object.__getattribute__(o, '__next__')
...     except AttributeError:
...         return True
...     return False
... 
&gt;&gt;&gt; is_container_iterable([])
True
&gt;&gt;&gt; is_container_iterable(())
True
&gt;&gt;&gt; is_container_iterable({})
True
&gt;&gt;&gt; is_container_iterable(range(5))
True
&gt;&gt;&gt; is_container_iterable(iter(range(5)))
False
</snippet></ROW><ROW><id>9001089</id><snippet>__next__</snippet></ROW><ROW><id>9001089</id><snippet>__iter__</snippet></ROW><ROW><id>9001089</id><snippet>__getattribute__</snippet></ROW><ROW><id>9001089</id><snippet>iter(o) is o</snippet></ROW><ROW><id>9001468</id><snippet>$ yum install openssl-devel
</snippet></ROW><ROW><id>9001468</id><snippet>$ apt-get install libssl-dev
</snippet></ROW><ROW><id>9001529</id><snippet>dict</snippet></ROW><ROW><id>9001529</id><snippet>OrderedDict</snippet></ROW><ROW><id>9001529</id><snippet>In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])
</snippet></ROW><ROW><id>9001529</id><snippet>od</snippet></ROW><ROW><id>9001529</id><snippet>In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5
</snippet></ROW><ROW><id>9002009</id><snippet>openssl-devel</snippet></ROW><ROW><id>9002009</id><snippet>libssl-dev</snippet></ROW><ROW><id>9002230</id><snippet>&gt;&gt;&gt; conditions = (lambda x: 10 &lt; x.cost &lt; 20, lambda x: 0 &lt; x.risk &lt; 10)
&gt;&gt;&gt; filter(lambda x: all(cond(x) for cond in conditions), result)
</snippet></ROW><ROW><id>9002230</id><snippet>&gt;&gt;&gt; conditions = lambda x: 10 &lt; x.cost &lt; 20 and 0 &lt; x.risk &lt; 10
&gt;&gt;&gt; filter(conditions, result)
</snippet></ROW><ROW><id>9002230</id><snippet>&gt;&gt;&gt; [r for r in result if 10 &lt; r.cost &lt; 20 and 0 &lt; r.risk &lt; 10]
</snippet></ROW><ROW><id>9002361</id><snippet>wm_geometry</snippet></ROW><ROW><id>9002361</id><snippet>def __init__(self,parent):
    ...
    self.b2 = Button(self, text="Reset", command=self.b2Press)
    self.b2.pack()

def b2Press(self):
    self.winfo_toplevel().wm_geometry("")
</snippet></ROW><ROW><id>9002476</id><snippet>try:
    cache
except NameError:
    cache = {}
</snippet></ROW><ROW><id>9002656</id><snippet>    import numpy.distutils.system_info as sysinfo
    sysinfo.get_info('atlas')
</snippet></ROW><ROW><id>9002926</id><snippet>message = u'%d) "%s" %s%s !!!' % (new_item_count,
            item[u'Title'],
            item[u'CurrencyID'],
            item[u'Value']))
print message.encode("utf-8")
</snippet></ROW><ROW><id>9002994</id><snippet>def where0(vec):
    a = where(vec)
    return a if a[0] else 0
    # The return above is equivalent to:
    # if len(a[0]) == 0:
    #     return 0  # or whatever you like
    # else:
    #     return a

a = array([1,5,7])
print where0(a==8)
</snippet></ROW><ROW><id>9002994</id><snippet>where()</snippet></ROW><ROW><id>9003220</id><snippet>cust1</snippet></ROW><ROW><id>9003220</id><snippet>cust2</snippet></ROW><ROW><id>9003220</id><snippet>__init__.py</snippet></ROW><ROW><id>9003220</id><snippet>import pkgutil
__path__ = pkgutil.extend_path(__path__, __name__)
</snippet></ROW><ROW><id>9003220</id><snippet>__init__.py</snippet></ROW><ROW><id>9003220</id><snippet>extend_path</snippet></ROW><ROW><id>9003220</id><snippet>sys.path</snippet></ROW><ROW><id>9003220</id><snippet>__path__</snippet></ROW><ROW><id>9003220</id><snippet>from cust1.proj1.pack1.mod1 import something
from cust3.proj4.pack1.mod4 import something_else
from cust3.proj1.pack4.mod4 import yet_something_else
</snippet></ROW><ROW><id>9003220</id><snippet>/path/
  to/
    projects/
      cust1/
        proj1/
          Development/
            code/
              python/
                cust1/
                  __init__.py   &lt;--- contains code as described above
                  proj1/
                    __init__.py &lt;--- empty
                    pack1/
                    __init__.py &lt;--- empty
                    mod1.py
</snippet></ROW><ROW><id>9003220</id><snippet>sys.path</snippet></ROW><ROW><id>9003220</id><snippet>/path/to/projects/cust1/proj1/Development/code/python</snippet></ROW><ROW><id>9003220</id><snippet>__init__.py</snippet></ROW><ROW><id>9003220</id><snippet>sys.path</snippet></ROW><ROW><id>9003254</id><snippet>for line in open("file.txt"):
 if "Hello" in line:
   print "Yes"
   break
</snippet></ROW><ROW><id>9003372</id><snippet>$</snippet></ROW><ROW><id>9003372</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search("1234$","lkjlkj1234") # matches
&lt;_sre.SRE_Match object at 0x6a10578&gt;
&gt;&gt;&gt; re.search("1234$","lkjlkj1234ff") # does not match
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9003372</id><snippet>s = re.search('([0-9a-f]{4})$',name)
</snippet></ROW><ROW><id>9003615</id><snippet>&gt;</snippet></ROW><ROW><id>9003615</id><snippet>$ ls /Users/user/Desktop &gt; out.txt
</snippet></ROW><ROW><id>9003615</id><snippet>os.system('ls /Users/user/Desktop &gt; out.txt')
</snippet></ROW><ROW><id>9003615</id><snippet>ls</snippet></ROW><ROW><id>9003615</id><snippet>os.listdir</snippet></ROW><ROW><id>9003615</id><snippet>path = '/Users/user/Desktop'
files = os.listdir(path)
print files
</snippet></ROW><ROW><id>9003638</id><snippet>Player</snippet></ROW><ROW><id>9003638</id><snippet>k = Key.from_path('Player', playerID)
player = Player(key = k, ...)
player.put()
</snippet></ROW><ROW><id>9003738</id><snippet>re.sub()</snippet></ROW><ROW><id>9003738</id><snippet>re.sub(r'(\d+)', lambda match:'%d' % (int(match.group(1))*2), 'test line 123')
</snippet></ROW><ROW><id>9004550</id><snippet>  for test in suite:
    print test._tests
</snippet></ROW><ROW><id>9004554</id><snippet>scores = {(True, True): 1, (True, False): 2, 
          (False, True): 3, (False, False): 4}
</snippet></ROW><ROW><id>9004554</id><snippet>scores[flag1, flag2]</snippet></ROW><ROW><id>9004554</id><snippet>for d in listA:
    d["score"] = scores[d["flag1"], d["flag2"]]
</snippet></ROW><ROW><id>9004860</id><snippet>inImg</snippet></ROW><ROW><id>9004860</id><snippet>inData</snippet></ROW><ROW><id>9004860</id><snippet>contour</snippet></ROW><ROW><id>9004860</id><snippet>contours</snippet></ROW><ROW><id>9004860</id><snippet>storage</snippet></ROW><ROW><id>9004893</id><snippet>--- ../A Problem-1/Game.pyw 2012-01-25 13:32:00.000000000 -0300
+++ Game.pyw    2012-01-25 11:55:56.000000000 -0300
@@ -11,6 +11,9 @@
 pygame.display.set_caption("MoeTM's UFO Game")

 class FlyingObject():
+    def __init__(self):
+        self.amount = 0
+        self.array = []
     def Restart(self):
         self.amount = 0
         self.array = []
@@ -233,6 +236,7 @@
     def __init__(self):
         self.sr = 5
         self.bg = [0,0,0]
+        self.amountOfStars = 0
     def New(self):
         self.amountOfStars = random.randrange(10,51,1)
         self.stars=[]
@@ -352,15 +356,15 @@
         self.Death = pygame.image.load("images\Death.png")
         self.Death = pygame.transform.scale(self.Death, (width2, height2))
         self.death = 0
+        self.TotalTime = 0
     def New(self):
-        while True:
-            self.Player.New()
-            Place = self.Player.DOA()
-            if Place != "New":
-                self.TotalTime = 0
-                self.Background.New()
-                self.Bullits.Restart()
-                self.Orbs.Restart()
+        self.Player.New()
+        Place = self.Player.DOA()
+        if Place != "New":
+            self.TotalTime = 0
+            self.Background.New()
+            self.Bullits.Restart()
+            self.Orbs.Restart()
     def Blit(self):
         self.Bullits.Convert()
         self.Orbs.Convert()
</snippet></ROW><ROW><id>9005026</id><snippet>table.cols.key.createIndex()
</snippet></ROW><ROW><id>9005026</id><snippet>key</snippet></ROW><ROW><id>9005026</id><snippet>search_key</snippet></ROW><ROW><id>9005026</id><snippet>[row['value'] for row in table.where('key == search_key')]
</snippet></ROW><ROW><id>9005163</id><snippet>def make_pi():
    q, r, t, k, m, x = 1, 0, 1, 1, 3, 3
    for j in range(1000):
        if 4 * q + r - t &lt; m * t:
            yield m
            q, r, t, k, m, x = 10*q, 10*(r-m*t), t, k, (10*(3*q+r))//t - 10*m, x
        else:
            q, r, t, k, m, x = q*k, (2*q+r)*x, t*x, k+1, (q*(7*k+2)+r*x)//(t*x), x+2


digits = make_pi()
pi_list = []
my_array = []

for i in make_pi():
    my_array.append(str(i))

my_array = my_array[:1] + ['.'] + my_array[1:]
big_string = "".join(my_array)
print "here is a big string:\n %s" % big_string 
</snippet></ROW><ROW><id>9005163</id><snippet>yield</snippet></ROW><ROW><id>9005163</id><snippet>3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337
</snippet></ROW><ROW><id>9005228</id><snippet>pool.map</snippet></ROW><ROW><id>9005228</id><snippet>map</snippet></ROW><ROW><id>9005228</id><snippet>ping()</snippet></ROW><ROW><id>9005228</id><snippet>list_of_values = pool.map(ping, host, 1)
</snippet></ROW><ROW><id>9005228</id><snippet>list_of_values</snippet></ROW><ROW><id>9005668</id><snippet>{ obj.pk:obj for obj in objs }
</snippet></ROW><ROW><id>9005916</id><snippet>python foo.py
</snippet></ROW><ROW><id>9005916</id><snippet>foo.py</snippet></ROW><ROW><id>9005916</id><snippet>"foo"</snippet></ROW><ROW><id>9005916</id><snippet>"__main__"</snippet></ROW><ROW><id>9005916</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>9005916</id><snippet>foo.py</snippet></ROW><ROW><id>9005916</id><snippet>"foo"</snippet></ROW><ROW><id>9005916</id><snippet>"__main__"</snippet></ROW><ROW><id>9005916</id><snippet>"__main__"</snippet></ROW><ROW><id>9005916</id><snippet>__main__.RemoteClass</snippet></ROW><ROW><id>9005916</id><snippet>RemoteClass</snippet></ROW><ROW><id>9005916</id><snippet>__main__</snippet></ROW><ROW><id>9005916</id><snippet>RemoteCopy</snippet></ROW><ROW><id>9005916</id><snippet>Copyable</snippet></ROW><ROW><id>9005916</id><snippet>RemoteCopy</snippet></ROW><ROW><id>9005916</id><snippet>pb.setUnjellyableForClass</snippet></ROW><ROW><id>9006024</id><snippet>dataTable.addRows( {{ answerjson1 | safe }} );
</snippet></ROW><ROW><id>9006191</id><snippet>&gt;&gt;&gt; sent = '''
... The/AT grand/JJ jury/NN commented/VBD on/IN a/AT number/NN of/IN
... other/AP topics/NNS ,/, AMONG/IN them/PPO the/AT Atlanta/NP and/CC
... Fulton/NP-tl County/NN-tl purchasing/VBG departments/NNS which/WDT it/PPS
... said/VBD ``/`` ARE/BER well/QL operated/VBN and/CC follow/VB generally/RB
... accepted/VBN practices/NNS which/WDT inure/VB to/IN the/AT best/JJT
... interest/NN of/IN both/ABX governments/NNS ''/'' ./.
... '''
&gt;&gt;&gt; [nltk.tag.str2tuple(t) for t in sent.split()]
[('The', 'AT'), ('grand', 'JJ'), ('jury', 'NN'), ('commented', 'VBD'),
('on', 'IN'), ('a', 'AT'), ('number', 'NN'), ... ('.', '.')]
</snippet></ROW><ROW><id>9006191</id><snippet>NN</snippet></ROW><ROW><id>9006191</id><snippet>&gt;&gt;&gt; [nltk.tag.str2tuple(t) for t in sent.split() if t.split('/')[1] == 'NN']
[('jury', 'NN'), ('number', 'NN'), ('interest', 'NN')]
</snippet></ROW><ROW><id>9006191</id><snippet>sent</snippet></ROW><ROW><id>9006191</id><snippet>sent = """The/AT grand/JJ jury/NN commented/VBD on/IN a/AT number/NN of/IN other/AP topics/NNS ,/, AMONG/IN them/PPO the/AT Atlanta/NP and/CC Fulton/NP-tl County/NN-tl purchasing/VBG departments/NNS which/WDT it/PPS said/VBD ``/`` ARE/BER well/QL operated/VBN and/CC follow/VB generally/RB accepted/VBN practices/NNS which/WDT inure/VB to/IN the/AT best/JJT interest/NN of/IN both/ABX governments/NNS ''/'' ./."""
</snippet></ROW><ROW><id>9006330</id><snippet>numpy.rollaxis(t.reshape(3, 3, 3, 3), 2, 1)
</snippet></ROW><ROW><id>9006330</id><snippet>numpy.lib.stride_tricks.as_strided</snippet></ROW><ROW><id>9006330</id><snippet>&gt;&gt;&gt; t = numpy.arange(81.).reshape((9,9))
&gt;&gt;&gt; numpy.lib.stride_tricks.as_strided(t, shape=(3,3,3,3), strides=(216,24,72,8))
array([[[[  0.,   1.,   2.],
         [  9.,  10.,  11.],
         [ 18.,  19.,  20.]],

        [[  3.,   4.,   5.],
         [ 12.,  13.,  14.],
         [ 21.,  22.,  23.]],

        [[  6.,   7.,   8.],
         [ 15.,  16.,  17.],
         [ 24.,  25.,  26.]]],


       [[[ 27.,  28.,  29.],
         [ 36.,  37.,  38.],
         [ 45.,  46.,  47.]],

        [[ 30.,  31.,  32.],
         [ 39.,  40.,  41.],
         [ 48.,  49.,  50.]],

        [[ 33.,  34.,  35.],
         [ 42.,  43.,  44.],
         [ 51.,  52.,  53.]]],


       [[[ 54.,  55.,  56.],
         [ 63.,  64.,  65.],
         [ 72.,  73.,  74.]],

        [[ 57.,  58.,  59.],
         [ 66.,  67.,  68.],
         [ 75.,  76.,  77.]],

        [[ 60.,  61.,  62.],
         [ 69.,  70.,  71.],
         [ 78.,  79.,  80.]]]])
</snippet></ROW><ROW><id>9006330</id><snippet>itemsize == 8</snippet></ROW><ROW><id>9006330</id><snippet>t</snippet></ROW><ROW><id>9006330</id><snippet>int</snippet></ROW><ROW><id>9006330</id><snippet>itemsize == 8</snippet></ROW><ROW><id>9006442</id><snippet>raise</snippet></ROW><ROW><id>9006442</id><snippet>raise</snippet></ROW><ROW><id>9006442</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>9006442</id><snippet>import sys

class MyError(Exception):
    pass

def try_except(fn):
    def wrapped(*args, **kwargs):
        try:
            return fn(*args, **kwargs)
        except Exception, e:
            et, ei, tb = sys.exc_info()
            raise MyError, MyError(e), tb
    return wrapped

def bottom():
   1 / 0

@try_except
def middle():
   bottom()

def top():
   middle()

&gt;&gt;&gt; top()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "tmp.py", line 24, in top
    middle()
  File "tmp.py", line 10, in wrapped
    return fn(*args, **kwargs)
  File "tmp.py", line 21, in middle
    bottom()
  File "tmp.py", line 17, in bottom
    1 / 0
__main__.MyError: integer division or modulo by zero
</snippet></ROW><ROW><id>9006442</id><snippet>with_traceback</snippet></ROW><ROW><id>9006442</id><snippet>raise MyError(e).with_traceback(tb)
</snippet></ROW><ROW><id>9006442</id><snippet>raise MyError(e) from e
</snippet></ROW><ROW><id>9006890</id><snippet>isinstance</snippet></ROW><ROW><id>9006890</id><snippet>response.context['form']</snippet></ROW><ROW><id>9006890</id><snippet>forms</snippet></ROW><ROW><id>9006890</id><snippet>app.forms</snippet></ROW><ROW><id>9006890</id><snippet>__class__.__module__</snippet></ROW><ROW><id>9006890</id><snippet>__module__</snippet></ROW><ROW><id>9006943</id><snippet>inspect</snippet></ROW><ROW><id>9006943</id><snippet>import inspect


inspect.getfile(some_func)
</snippet></ROW><ROW><id>9006976</id><snippet>&lt;?php
header('Content-type: image/jpeg');

$image = new Imagick('image.jpg');
$image-&gt;blurImage(5, 3);
echo $image;
?&gt;
</snippet></ROW><ROW><id>9007057</id><snippet>skip_archive</snippet></ROW><ROW><id>9007057</id><snippet>True</snippet></ROW><ROW><id>9007057</id><snippet>zipfile</snippet></ROW><ROW><id>9007057</id><snippet>foo</snippet></ROW><ROW><id>9007057</id><snippet>setup(  
    ...

    zipfile="foo/bar.zip", 
    options={"py2exe": {"skip_archive": True}})
</snippet></ROW><ROW><id>9007207</id><snippet>Data = namedtuple("Data", next(reader))
</snippet></ROW><ROW><id>9007207</id><snippet>next(reader)
</snippet></ROW><ROW><id>9007243</id><snippet>row.GetValue("LD_MCPI")</snippet></ROW><ROW><id>9007243</id><snippet>"123456"</snippet></ROW><ROW><id>9007243</id><snippet>value</snippet></ROW><ROW><id>9007243</id><snippet>"123456000"</snippet></ROW><ROW><id>9007243</id><snippet>"000"</snippet></ROW><ROW><id>9007243</id><snippet>row.GetValue("LD_MCPI")</snippet></ROW><ROW><id>9007243</id><snippet>value = row.GetValue("LD_MCPI") + "000"
</snippet></ROW><ROW><id>9007243</id><snippet>row.GetValue("LD_MCPI")</snippet></ROW><ROW><id>9007243</id><snippet>value = row.GetValue("LD_MCPI") * 1000
</snippet></ROW><ROW><id>9007249</id><snippet>    import numpy as np
    # grid is your image data, here...
    grid = np.random.random((10,10))

    nrows, ncols = grid.shape
    i,j = np.mgrid[:nrows, :ncols]
    coords = np.vstack((i.reshape(-1), j.reshape(-1), grid.reshape(-1))).T
    cov = np.cov(coords)
    eigvals, eigvecs = np.linalg.eigh(cov)
</snippet></ROW><ROW><id>9007249</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def main():
    data = generate_data()
    xbar, ybar, cov = intertial_axis(data)

    fig, ax = plt.subplots()
    ax.imshow(data)
    plot_bars(xbar, ybar, cov, ax)
    plt.show()

def generate_data():
    data = np.zeros((200, 200), dtype=np.float)
    cov = np.array([[200, 100], [100, 200]])
    ij = np.random.multivariate_normal((100,100), cov, int(1e5))
    for i,j in ij:
        data[int(i), int(j)] += 1
    return data 

def raw_moment(data, iord, jord):
    nrows, ncols = data.shape
    y, x = np.mgrid[:nrows, :ncols]
    data = data * x**iord * y**jord
    return data.sum()

def intertial_axis(data):
    """Calculate the x-mean, y-mean, and cov matrix of an image."""
    data_sum = data.sum()
    m10 = raw_moment(data, 1, 0)
    m01 = raw_moment(data, 0, 1)
    x_bar = m10 / data_sum
    y_bar = m01 / data_sum
    u11 = (raw_moment(data, 1, 1) - x_bar * m01) / data_sum
    u20 = (raw_moment(data, 2, 0) - x_bar * m10) / data_sum
    u02 = (raw_moment(data, 0, 2) - y_bar * m01) / data_sum
    cov = np.array([[u20, u11], [u11, u02]])
    return x_bar, y_bar, cov

def plot_bars(x_bar, y_bar, cov, ax):
    """Plot bars with a length of 2 stddev along the principal axes."""
    def make_lines(eigvals, eigvecs, mean, i):
        """Make lines a length of 2 stddev."""
        std = np.sqrt(eigvals[i])
        vec = 2 * std * eigvecs[:,i] / np.hypot(*eigvecs[:,i])
        x, y = np.vstack((mean-vec, mean, mean+vec)).T
        return x, y
    mean = np.array([x_bar, y_bar])
    eigvals, eigvecs = np.linalg.eigh(cov)
    ax.plot(*make_lines(eigvals, eigvecs, mean, 0), marker='o', color='white')
    ax.plot(*make_lines(eigvals, eigvecs, mean, -1), marker='o', color='red')
    ax.axis('image')

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9007507</id><snippet>es.refresh()
</snippet></ROW><ROW><id>9007749</id><snippet>findAll</snippet></ROW><ROW><id>9007749</id><snippet>import BeautifulSoup
import re

columns = soup.findAll('td', text = re.compile('your regex here'), attrs = {'class' : 'pos'})
</snippet></ROW><ROW><id>9007960</id><snippet>request.remote_addr</snippet></ROW><ROW><id>9007960</id><snippet>pyramid.request</snippet></ROW><ROW><id>9008081</id><snippet>from BeautifulSoup import BeautifulStoneSoup as Soup

soup = Soup(open(filename))
for tag in soup.findAll('ns1:name'):
    print tag.find('ns1:familyname').text
    print tag.find('ns1:fullname').text
    print tag.find('ns1:givenname').text
for tag in soup.findAll('ns1:organization'):
    print tag.find('ns1:orgtitle').text
    print tag.find('ns1:orgdepartment').text
    print tag.find('ns1:orgname').text
</snippet></ROW><ROW><id>9008081</id><snippet>Person
Name Person
Name
JobField
DepartmentField
CompanyField
</snippet></ROW><ROW><id>9008147</id><snippet>arr1inds = arr1.argsort()
sorted_arr1 = arr1[arr1inds[::-1]]
sorted_arr2 = arr2[arr1inds[::-1]]
</snippet></ROW><ROW><id>9008169</id><snippet>rlnorm</snippet></ROW><ROW><id>9008304</id><snippet>self</snippet></ROW><ROW><id>9008304</id><snippet>__iter__()</snippet></ROW><ROW><id>9008304</id><snippet>self</snippet></ROW><ROW><id>9008304</id><snippet>class Object:
    def __init__(self):
        self.Command = "Script Command"

    def printCommand(self):
        print(self.Command)

class ObjectList(list):
    def printCommand(self):
        for Object in self:
            Object.printCommand()

lst = ObjectList()
lst.append(Object())
lst.append(Object())

lst.printCommand()
</snippet></ROW><ROW><id>9008304</id><snippet>list</snippet></ROW><ROW><id>9008304</id><snippet>__iter__</snippet></ROW><ROW><id>9008304</id><snippet>&gt;&gt;&gt; for e in [1,2,3].__iter__():
...  print(e)
... 
1
2
3
&gt;&gt;&gt; for e in [1,2,3]:
...  print(e)
... 
1
2
3
</snippet></ROW><ROW><id>9008355</id><snippet>import win32con
import win32gui

def inText(haystack, needle, n):
    parts= haystack.split(needle, n+1)
    if len(parts)&lt;=n+1:
        return False
    if len(haystack)-len(parts[-1])-len(needle):
        return True

def isRealWindow(hWnd):
    '''Return True if given window is a real Windows application window.'''
    if not win32gui.IsWindowVisible(hWnd):
        return False
    if win32gui.GetParent(hWnd) != 0:
        return False
    hasNoOwner = win32gui.GetWindow(hWnd, win32con.GW_OWNER) == 0
    lExStyle = win32gui.GetWindowLong(hWnd, win32con.GWL_EXSTYLE)
    if (((lExStyle &amp; win32con.WS_EX_TOOLWINDOW) == 0 and hasNoOwner)
      or ((lExStyle &amp; win32con.WS_EX_APPWINDOW != 0) and not hasNoOwner)):
        if win32gui.GetWindowText(hWnd):
            return True
    return False

def getWindowSizes(text):
    '''Return a list of tuples (handler, (width, height)) for each real window.'''
    def callback(hWnd, extra):
        if not isRealWindow(hWnd):
            return
        title   = win32gui.GetWindowText(hWnd)
        rect    = win32gui.GetWindowRect(hWnd)
        isFrame = inText(title, text, 0)
        if(isFrame):
            windows.append((title, rect[2] - rect[0], rect[3] - rect[1], rect[0],rect[1]))
    windows = []
    win32gui.EnumWindows(callback, windows)
    return windows

def findWindow(text):
    window = getWindowSizes(text)
    name = window[0][0]
    w = window[0][1]
    h = window[0][2]
    x = window[0][3]
    y = window[0][4]

    return name,w,h,x,y
</snippet></ROW><ROW><id>9008509</id><snippet>def OldClsName(*args, **kwargs):
    from warnings import warn
    warn("get with the program!")
    return NewClsName(*args, **kwargs)
</snippet></ROW><ROW><id>9008509</id><snippet>OldClsName</snippet></ROW><ROW><id>9008509</id><snippet>class DeprecationHelper(object):
    def __init__(self, new_target):
        self.new_target = new_target

    def _warn(self):
        from warnings import warn
        warn("Get with the program!")

    def __call__(self, *args, **kwargs):
        self._warn()
        return self.new_target(*args, **kwargs)

    def __getattr__(self, attr):
        self._warn()
        return getattr(self.new_target, attr)

OldClsName = DeprecationHelper(NewClsName)
</snippet></ROW><ROW><id>9008509</id><snippet>__call__</snippet></ROW><ROW><id>9008509</id><snippet>__getattr__</snippet></ROW><ROW><id>9008576</id><snippet>rho</snippet></ROW><ROW><id>9008576</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import scipy.interpolate

# Generate data:
x, y, z = 10 * np.random.random((3,10))

# Set up a regular grid of interpolation points
xi, yi = np.linspace(x.min(), x.max(), 100), np.linspace(y.min(), y.max(), 100)
xi, yi = np.meshgrid(xi, yi)

# Interpolate
rbf = scipy.interpolate.Rbf(x, y, z, function='linear')
zi = rbf(xi, yi)

plt.imshow(zi, vmin=z.min(), vmax=z.max(), origin='lower',
           extent=[x.min(), x.max(), y.min(), y.max()])
plt.scatter(x, y, c=z)
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>9008581</id><snippet>messy</snippet></ROW><ROW><id>9008617</id><snippet>copy</snippet></ROW><ROW><id>9008617</id><snippet>import copy    
result_list.append(copy.copy(row))
</snippet></ROW><ROW><id>9009021</id><snippet>L = [L[i] for i in ndx]
</snippet></ROW><ROW><id>9009021</id><snippet>numpy.array</snippet></ROW><ROW><id>9009021</id><snippet>L = L[ndx]
</snippet></ROW><ROW><id>9009021</id><snippet>&gt;&gt;&gt; L = "abc"
&gt;&gt;&gt; [L[i] for i in [2,1,0]]
['c', 'b', 'a']
</snippet></ROW><ROW><id>9009306</id><snippet>Processing ZZZ\n OK</snippet></ROW><ROW><id>9009306</id><snippet>.</snippet></ROW><ROW><id>9009306</id><snippet>    """Retrieve data in binary mode.  A new port is created for you.

    Args:
      cmd: A RETR command.
      callback: A single parameter callable to be called on each
                block of data read.
      blocksize: The maximum number of bytes to read from the
                 socket at one time.  [default: 8192]
      rest: Passed to transfercmd().  [default: None]

    Returns:
      The response code.
    """
</snippet></ROW><ROW><id>9009306</id><snippet>import sys # At the top of your module.

# Modify your retrbinary    
ftp.retrbinary('RETR ' + h, lambda s: ftpfile.write(s) and sys.stdout.write('.'))
</snippet></ROW><ROW><id>9009624</id><snippet>rnd.seed(0)
print [rnd.randrange(5) for i in range(10)]
</snippet></ROW><ROW><id>9009624</id><snippet>random.seed(0)
print [random.randrange(5) for i in range(10)]
</snippet></ROW><ROW><id>9009785</id><snippet>_replace</snippet></ROW><ROW><id>9009785</id><snippet>&gt;&gt;&gt; p = Point(x=11, y=22)  
&gt;&gt;&gt; p._replace(x=33)  
Point(x=33, y=22)
</snippet></ROW><ROW><id>9009785</id><snippet>_replace</snippet></ROW><ROW><id>9009785</id><snippet>Node</snippet></ROW><ROW><id>9009785</id><snippet>namedtuples</snippet></ROW><ROW><id>9009785</id><snippet>for</snippet></ROW><ROW><id>9009785</id><snippet>Node</snippet></ROW><ROW><id>9009785</id><snippet>namedtuple</snippet></ROW><ROW><id>9009785</id><snippet>from collections import namedtuple

MyStruct = namedtuple('MyStruct', 'ThreadInstance ThreadName Mnemonic IpAddr IpGW Status Mode')

NodeDb = []
Node = MyStruct(None, '', '', '', '',  -1, 0)
for id in range(4):
    NodeDb.append(Node)

NodeDb[2] = NodeDb[2]._replace(ThreadName='T2',
                               Mnemonic='ABCD',
                               IpAddr='192.0.1.2',
                               IpGW='192.0.1.3',
                               Status=0,
                               Mode=2)

print(NodeDb)
</snippet></ROW><ROW><id>9010019</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; combined = hashlib.sha256()
&gt;&gt;&gt; combined.update(hashlib.md5('test1').digest())
&gt;&gt;&gt; combined.update(hashlib.md5('test2').digest())
&gt;&gt;&gt; combined.update(hashlib.md5('test3').digest())
</snippet></ROW><ROW><id>9010019</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; base64.b64encode(combined.digest())
'PeFC3irNFx8fuzwjAz+fE/up9cz6xujs2Z06IH2GdUM='
</snippet></ROW><ROW><id>9010019</id><snippet>&gt;&gt;&gt; base64.b64encode(combined.digest())[:32]
'PeFC3irNFx8fuzwjAz+fE/up9cz6xujs'
</snippet></ROW><ROW><id>9010019</id><snippet>+</snippet></ROW><ROW><id>9010019</id><snippet>/</snippet></ROW><ROW><id>9010019</id><snippet>&gt;&gt;&gt; base64.b64encode(combined.digest(), altchars="AA")[:32]
'PeFC3irNFx8fuzwjAzAfEAup9cz6xujs'
</snippet></ROW><ROW><id>9010458</id><snippet>from celery.task.control import discard_all
discard_all()
</snippet></ROW><ROW><id>9011212</id><snippet>.r</snippet></ROW><ROW><id>9011212</id><snippet>import re

# -snip-

    for f in files:
        if f.endswith(ZipFileTypes) or re.search(r'\.r\d+$', f):
            # do stuff
</snippet></ROW><ROW><id>9011212</id><snippet>re.search()</snippet></ROW><ROW><id>9011212</id><snippet>re.match()</snippet></ROW><ROW><id>9011212</id><snippet>re.search()</snippet></ROW><ROW><id>9011212</id><snippet>\.r</snippet></ROW><ROW><id>9011212</id><snippet>r</snippet></ROW><ROW><id>9011212</id><snippet>\</snippet></ROW><ROW><id>9011212</id><snippet>.</snippet></ROW><ROW><id>9011212</id><snippet>\d+</snippet></ROW><ROW><id>9011212</id><snippet>\d</snippet></ROW><ROW><id>9011212</id><snippet>+</snippet></ROW><ROW><id>9011212</id><snippet>$</snippet></ROW><ROW><id>9011212</id><snippet>\.r\d+$</snippet></ROW><ROW><id>9011242</id><snippet>In [83]: np.finfo(np.float32).eps
Out[83]: 1.1920929e-07

In [84]: np.finfo(np.float64).eps
Out[84]: 2.2204460492503131e-16

In [85]: np.finfo(np.float128).eps
Out[85]: 1.084202172485504434e-19
</snippet></ROW><ROW><id>9011487</id><snippet>#!/usr/bin/env python
from multiprocessing import Pool

def work_on(args):
    """Process a single file."""
    i, filename = args
    print("working on %s" % (filename,))
    return i

def files():
    """Generate input filenames to work on."""
    #NOTE: you could read the file list from a file, get it using glob.glob, etc
    yield "inputfile1"
    yield "inputfile2"

def process_files(pool, filenames):
    """Process filenames using pool of processes.

    Wait for results.
    """
    for result in pool.imap_unordered(work_on, enumerate(filenames)):
        #NOTE: in general the files won't be processed in the original order
        print(result) 

def main():
   p = Pool()

   # to do "successive" multiprocessing
   for filenames in [files(), ['other', 'bunch', 'of', 'files']]:
       process_files(p, filenames)

if __name__=="__main__":
   main()
</snippet></ROW><ROW><id>9011487</id><snippet>process_file()</snippet></ROW><ROW><id>9011487</id><snippet>process_files()</snippet></ROW><ROW><id>9011580</id><snippet>__main__</snippet></ROW><ROW><id>9011580</id><snippet>python in_dir2.py</snippet></ROW><ROW><id>9011580</id><snippet>__package__</snippet></ROW><ROW><id>9011580</id><snippet>import dir1
if __name__ == '__main__':
    __package__ = 'dir1.dir2'
    from .. import in_dir1
</snippet></ROW><ROW><id>9011580</id><snippet>dir1</snippet></ROW><ROW><id>9011580</id><snippet>sys.path</snippet></ROW><ROW><id>9011580</id><snippet>sys.path</snippet></ROW><ROW><id>9011710</id><snippet>includes = ['Panels.%s' % os.path.basename(os.path.splitext(filename)[0]) for filename in glob.glob('Panels//*.py')]
</snippet></ROW><ROW><id>9011879</id><snippet>  /* Add the daemon loop */
  timeout_id = g_timeout_add_full(G_PRIORITY_LOW,
                                  DAEMON_INTERVAL,
                                  (GSourceFunc)daemon_check,
                                  NULL,
                                  (GDestroyNotify)reset_daemon);
</snippet></ROW><ROW><id>9011993</id><snippet>from django.forms.models import model_to_dict
my_dict = model_to_dict(my_instance,fields=[],exclude=[])
</snippet></ROW><ROW><id>9011993</id><snippet>pickle.dumps</snippet></ROW><ROW><id>9011993</id><snippet>pickle.loads</snippet></ROW><ROW><id>9011993</id><snippet>my_instance = MyModel(**my_dict)
#add any customization for the new instance here
my_instance.save()
</snippet></ROW><ROW><id>9012064</id><snippet>import re
word = 'fubar'
regexp = re.compile(r'ba[r|z|d]')
if regexp.search(word) is not None:
  print 'matched'
</snippet></ROW><ROW><id>9012132</id><snippet>model</snippet></ROW><ROW><id>9012132</id><snippet>Model</snippet></ROW><ROW><id>9012132</id><snippet>class PickForm(ModelForm):
    class Meta:
        model = Car
</snippet></ROW><ROW><id>9012249</id><snippet>Out</snippet></ROW><ROW><id>9012249</id><snippet>_oh</snippet></ROW><ROW><id>9012249</id><snippet>Out.values()</snippet></ROW><ROW><id>9012749</id><snippet>T0 is not None</snippet></ROW><ROW><id>9012749</id><snippet>plt.subplot()</snippet></ROW><ROW><id>9012749</id><snippet>T0</snippet></ROW><ROW><id>9012749</id><snippet>plt.show()</snippet></ROW><ROW><id>9012749</id><snippet>plt.savefig('tessstttyyy.png', dpi=100)</snippet></ROW><ROW><id>9012749</id><snippet>plt.show()</snippet></ROW><ROW><id>9012749</id><snippet>show()</snippet></ROW><ROW><id>9012749</id><snippet>plt.gcf()</snippet></ROW><ROW><id>9012749</id><snippet>savefig()</snippet></ROW><ROW><id>9012749</id><snippet>Figure</snippet></ROW><ROW><id>9012749</id><snippet>fig1 = plt.gcf()
plt.show()
plt.draw()
fig1.savefig('tessstttyyy.png', dpi=100)
</snippet></ROW><ROW><id>9012830</id><snippet>from itertools import izip_longest

d = { 'a': ['s','b'], 'b': ['x1','y1','z1'] }

print([i for t in izip_longest(*[d[k] for k in sorted(d)])
                  for i in t if i is not None])
</snippet></ROW><ROW><id>9012830</id><snippet>izip_longest</snippet></ROW><ROW><id>9012830</id><snippet>zip_longest</snippet></ROW><ROW><id>9012830</id><snippet>izip_longest</snippet></ROW><ROW><id>9012830</id><snippet>[('s', 'x1'), ('b', 'y1'), (None, 'z1')]</snippet></ROW><ROW><id>9012830</id><snippet>None</snippet></ROW><ROW><id>9012830</id><snippet>izip_longest</snippet></ROW><ROW><id>9012830</id><snippet>zip</snippet></ROW><ROW><id>9012830</id><snippet>[('s', 'x1'), ('b', 'y1')]</snippet></ROW><ROW><id>9012830</id><snippet>sorted_lists = [d[k] for k in sorted(d)]
tuples = izip_longest(*sorted_lists)
result = [i for t in tuples for i in t if i is not None]
print(result)
</snippet></ROW><ROW><id>9012979</id><snippet>defaultdict</snippet></ROW><ROW><id>9012979</id><snippet>c.Y</snippet></ROW><ROW><id>9012979</id><snippet>from itertools import groupby
from operator import attrgetter
get_y = attrgetter('Y')
tuples = [(y, sum(c.Z for c in cs_with_y) for y, cs_with_y in 
           groupby(sorted(cs, key=get_y), get_y)]
</snippet></ROW><ROW><id>9012979</id><snippet>cs</snippet></ROW><ROW><id>9012979</id><snippet>cs.sort(key=get_y)</snippet></ROW><ROW><id>9012979</id><snippet>cs</snippet></ROW><ROW><id>9012979</id><snippet>cs</snippet></ROW><ROW><id>9012979</id><snippet>groupby</snippet></ROW><ROW><id>9012979</id><snippet>c.Y</snippet></ROW><ROW><id>9012979</id><snippet>defaultdict</snippet></ROW><ROW><id>9012979</id><snippet>TypeError</snippet></ROW><ROW><id>9012979</id><snippet>TypeError</snippet></ROW><ROW><id>9012979</id><snippet>key</snippet></ROW><ROW><id>9012979</id><snippet>key=lambda e: (e.real, e.imag) if isinstance(e, complex) else e</snippet></ROW><ROW><id>9012979</id><snippet>__lt__</snippet></ROW><ROW><id>9012979</id><snippet>groupby</snippet></ROW><ROW><id>9012979</id><snippet>c.Y</snippet></ROW><ROW><id>9012979</id><snippet>c</snippet></ROW><ROW><id>9012979</id><snippet>groupby</snippet></ROW><ROW><id>9012979</id><snippet>c.Y</snippet></ROW><ROW><id>9012979</id><snippet>__lt__</snippet></ROW><ROW><id>9012981</id><snippet>def trimmed_std(data, low, high):
    tmp = np.asarray(data)
    return tmp[(low &lt;= tmp) &amp; (tmp &lt; high)].std()
</snippet></ROW><ROW><id>9012981</id><snippet>def trimmed_std(data, percentile):
    data = np.array(data)
    data.sort()
    percentile = percentile / 2.
    low = int(percentile * len(data))
    high = int((1. - percentile) * len(data))
    return data[low:high].std(ddof=0)
</snippet></ROW><ROW><id>9013147</id><snippet>import threading
import time

value = 3

def process():
    while True:
        print(value)
        time.sleep(1)

thread = threading.Thread(target=process)
thread.start()

while True:
    value = input('Enter value: ')
</snippet></ROW><ROW><id>9013271</id><snippet>sudo apt-get install python2.7-dev
</snippet></ROW><ROW><id>9013272</id><snippet>compose</snippet></ROW><ROW><id>9013272</id><snippet>non_negative</snippet></ROW><ROW><id>9013272</id><snippet>non_negative(lambda x: x)(value)</snippet></ROW><ROW><id>9013273</id><snippet>.append</snippet></ROW><ROW><id>9013273</id><snippet>.insert</snippet></ROW><ROW><id>9013273</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; tree = etree.XML('&lt;a&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;&lt;d&gt;&lt;e&gt;&lt;f/&gt;&lt;/e&gt;&lt;/d&gt;&lt;/a&gt;')
&gt;&gt;&gt; node_b = tree.xpath('/a/b')[0]
&gt;&gt;&gt; node_d = tree.xpath('/a/d')[0]
&gt;&gt;&gt; node_d.append(node_b)
&gt;&gt;&gt; etree.tostring(tree) # complete 'b'-branch is now under 'd', after 'e'
'&lt;a&gt;&lt;d&gt;&lt;e&gt;&lt;f/&gt;&lt;/e&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;&lt;/d&gt;&lt;/a&gt;'
&gt;&gt;&gt; node_f = tree.xpath('/a/d/e/f')[0] # Nothing stops us from moving it again
&gt;&gt;&gt; node_f.append(node_a) # Now 'a' is deep under 'f'
&gt;&gt;&gt; etree.tostring(tree)
'&lt;a&gt;&lt;d&gt;&lt;e&gt;&lt;f&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;&lt;/f&gt;&lt;/e&gt;&lt;/d&gt;&lt;/a&gt;'
</snippet></ROW><ROW><id>9013273</id><snippet>&gt;&gt;&gt; tree = etree.XML('&lt;a&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;TAIL&lt;d&gt;&lt;e&gt;&lt;f/&gt;&lt;/e&gt;&lt;/d&gt;&lt;/a&gt;')
&gt;&gt;&gt; node_b = tree.xpath('/a/b')[0]
&gt;&gt;&gt; node_d = tree.xpath('/a/d')[0]
&gt;&gt;&gt; node_d.append(node_b)
&gt;&gt;&gt; etree.tostring(tree)
'&lt;a&gt;&lt;d&gt;&lt;e&gt;&lt;f/&gt;&lt;/e&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;TAIL&lt;/d&gt;&lt;/a&gt;'
</snippet></ROW><ROW><id>9013273</id><snippet>&gt;&gt;&gt; tree = etree.XML('&lt;a&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;TAIL&lt;d&gt;&lt;e&gt;&lt;f/&gt;&lt;/e&gt;&lt;/d&gt;&lt;/a&gt;')
&gt;&gt;&gt; node_b = tree.xpath('/a/b')[0]
&gt;&gt;&gt; node_d = tree.xpath('/a/d')[0]
&gt;&gt;&gt; node_a = tree.xpath('/a')[0]
&gt;&gt;&gt; # Manually move text
&gt;&gt;&gt; node_a.text = node_b.tail
&gt;&gt;&gt; node_b.tail = None
&gt;&gt;&gt; node_d.append(node_b)
&gt;&gt;&gt; etree.tostring(tree)
&gt;&gt;&gt; # Now TAIL text stays within its old place
'&lt;a&gt;TAIL&lt;d&gt;&lt;e&gt;&lt;f/&gt;&lt;/e&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;&lt;/d&gt;&lt;/a&gt;'
</snippet></ROW><ROW><id>9013316</id><snippet>data = urllib2.urlopen(url).read
</snippet></ROW><ROW><id>9013316</id><snippet>data = urllib2.urlopen(url).read()
#                               ^^
</snippet></ROW><ROW><id>9013316</id><snippet>502 Bad gateway</snippet></ROW><ROW><id>9013316</id><snippet>try..except</snippet></ROW><ROW><id>9013316</id><snippet>res = fetch_parallel()
reslist = []
while not res.empty():
  reslist.append(res.get_nowait()) # or get, doesn't matter here
print (reslist)
</snippet></ROW><ROW><id>9013410</id><snippet>a</snippet></ROW><ROW><id>9013410</id><snippet>a[a[:,0].searchsorted(b[:,0]),1] = b[:,1]
</snippet></ROW><ROW><id>9013410</id><snippet>import numpy as np

a = np.array([(1,0,0,0,0),
              (2,0,0,0,0),
              (3,0,0,0,0),
              (4,0,0,0,0),
              (5,0,0,0,0),
              (6,0,0,0,0),
              (7,0,0,0,0),
              (8,0,0,0,0),
              ])

b = np.array([(3, 1),
              (5, 18),
              (7, 2)])

a[a[:,0].searchsorted(b[:,0]),1] = b[:,1]
print(a)
</snippet></ROW><ROW><id>9013410</id><snippet>[[ 1  0  0  0  0]
 [ 2  0  0  0  0]
 [ 3  1  0  0  0]
 [ 4  0  0  0  0]
 [ 5 18  0  0  0]
 [ 6  0  0  0  0]
 [ 7  2  0  0  0]
 [ 8  0  0  0  0]]
</snippet></ROW><ROW><id>9013410</id><snippet>b</snippet></ROW><ROW><id>9013410</id><snippet>a[:,0]</snippet></ROW><ROW><id>9013410</id><snippet>np.argsort</snippet></ROW><ROW><id>9013410</id><snippet>a = np.array( [(1,0,0,0,0),
               (2,0,0,0,0),
               (5,0,0,0,0),
               (3,0,0,0,0),
               (4,0,0,0,0),
               (6,0,0,0,0),
               (7,0,0,0,0),
               (8,0,0,0,0),
               ])

b = np.array([(3, 1),
              (5, 18),
              (7, 2)])

perm = np.argsort(a[:,0])
a[:,1][perm[a[:,0][perm].searchsorted(b[:,0])]] = b[:,1]
print(a)
</snippet></ROW><ROW><id>9013410</id><snippet>[[ 1  0  0  0  0]
 [ 2  0  0  0  0]
 [ 5 18  0  0  0]
 [ 3  1  0  0  0]
 [ 4  0  0  0  0]
 [ 6  0  0  0  0]
 [ 7  2  0  0  0]
 [ 8  0  0  0  0]]
</snippet></ROW><ROW><id>9013425</id><snippet>iframe</snippet></ROW><ROW><id>9013425</id><snippet>sgmllib</snippet></ROW><ROW><id>9013425</id><snippet>xml.dom</snippet></ROW><ROW><id>9013687</id><snippet>debugtoolbar.hosts</snippet></ROW><ROW><id>9013771</id><snippet>import os, os.path
folder = 'folder'
os.makedirs(folder)
with open(os.path.join(folder, 'file1.txt'), 'w') as f:
  f.write('now my folder and file both exist!')
</snippet></ROW><ROW><id>9013810</id><snippet>admin.py</snippet></ROW><ROW><id>9013810</id><snippet>admin.site.unregister(FlatPage)
admin.site.register(FlatPage, FlatPageAdmin)
</snippet></ROW><ROW><id>9013867</id><snippet>-s</snippet></ROW><ROW><id>9013867</id><snippet>--nocapture</snippet></ROW><ROW><id>9013918</id><snippet>(r"(.)\1\1")</snippet></ROW><ROW><id>9013918</id><snippet>(r"(.)\1\1+")</snippet></ROW><ROW><id>9013918</id><snippet>.</snippet></ROW><ROW><id>9013918</id><snippet>\1</snippet></ROW><ROW><id>9014075</id><snippet>a = next(i for i in userInput if i in wordsTask)
</snippet></ROW><ROW><id>9014075</id><snippet>[i for i in userInput if i in wordsTask]
</snippet></ROW><ROW><id>9014075</id><snippet>next([i for i in userInput if i in wordsTask])
</snippet></ROW><ROW><id>9014075</id><snippet>a = next(i for i in userInput if i in wordsTask)
</snippet></ROW><ROW><id>9014075</id><snippet>StopIteration</snippet></ROW><ROW><id>9014075</id><snippet>a = next((i for i in userInput if i in wordsTask), 42)
</snippet></ROW><ROW><id>9014078</id><snippet>ORDER BY</snippet></ROW><ROW><id>9014111</id><snippet>from django.shortcuts import render
# from djengo.template import RequestContext &lt;- this is not valid.
</snippet></ROW><ROW><id>9014111</id><snippet>render</snippet></ROW><ROW><id>9014111</id><snippet># csrfContext = RequestContext(request)
# return render_to_response('makepick.html', csrfContext)
</snippet></ROW><ROW><id>9014111</id><snippet> # return render_to_response('makepick.html', {'form':form})
   return render(request,'makepick.html',{'form':form})
</snippet></ROW><ROW><id>9014405</id><snippet>getattr(ham, x).my_func()
</snippet></ROW><ROW><id>9014405</id><snippet>ham</snippet></ROW><ROW><id>9014405</id><snippet>x</snippet></ROW><ROW><id>9014405</id><snippet>x</snippet></ROW><ROW><id>9014405</id><snippet>'foo'</snippet></ROW><ROW><id>9014405</id><snippet>ham.foo</snippet></ROW><ROW><id>9014405</id><snippet>my_func</snippet></ROW><ROW><id>9014405</id><snippet>ham</snippet></ROW><ROW><id>9014405</id><snippet>ham.str.my_func()</snippet></ROW><ROW><id>9014405</id><snippet>getattr(ham, str).my_func()</snippet></ROW><ROW><id>9014405</id><snippet>imp</snippet></ROW><ROW><id>9014540</id><snippet>cursor.execute</snippet></ROW><ROW><id>9014540</id><snippet>conn.commit()
</snippet></ROW><ROW><id>9014540</id><snippet>MySQLdb.IntegrityError</snippet></ROW><ROW><id>9014540</id><snippet>sql_insert = """insert into new_files (videos_id, filename, is_processing)
values (%s,%s,1)"""

cursor = conn.cursor()
try:
    affected_count = cursor.execute(sql_insert, (id, filename))
    conn.commit()
    logging.warn("%d", affected_count)
    logging.info("inserted values %d, %s", id, filename)
except MySQLdb.IntegrityError:
    logging.warn("failed to insert values %d, %s", id, filename)
finally:
   cursor.close()
</snippet></ROW><ROW><id>9014850</id><snippet>db</snippet></ROW><ROW><id>9014850</id><snippet>iface</snippet></ROW><ROW><id>9014850</id><snippet>parent</snippet></ROW><ROW><id>9014850</id><snippet>__init__</snippet></ROW><ROW><id>9015119</id><snippet>results = SourceBusiness.objects.filter(resultbusiness__isnull=False).distinct().values_list('source', flat=True)
</snippet></ROW><ROW><id>9015233</id><snippet>raise</snippet></ROW><ROW><id>9015233</id><snippet>Exception</snippet></ROW><ROW><id>9015233</id><snippet>except Exception</snippet></ROW><ROW><id>9015233</id><snippet>Exception</snippet></ROW><ROW><id>9015233</id><snippet>except</snippet></ROW><ROW><id>9015233</id><snippet>except:
  raise
</snippet></ROW><ROW><id>9015233</id><snippet>e</snippet></ROW><ROW><id>9015233</id><snippet>logging.exception</snippet></ROW><ROW><id>9015233</id><snippet>try:
   &lt;something that raises an error&gt;
except Exception, e:
   logging.exception(e)
</snippet></ROW><ROW><id>9015350</id><snippet>html</snippet></ROW><ROW><id>9015350</id><snippet> &gt;&gt;&gt; import BeautifulSoup as bs
 &gt;&gt;&gt;  
 &gt;&gt;&gt;  html = bs.BeautifulSoup(html)
 &gt;&gt;&gt;  html.findAll('option')
</snippet></ROW><ROW><id>9015399</id><snippet>string.translate</snippet></ROW><ROW><id>9015399</id><snippet>import string
table = string.maketrans('()%', '   ')
li = string.translate(li, table)
</snippet></ROW><ROW><id>9015433</id><snippet>maplist=[{}]*11
</snippet></ROW><ROW><id>9015433</id><snippet>maplist=[{} for in xrange(11)]
</snippet></ROW><ROW><id>9015433</id><snippet>0</snippet></ROW><ROW><id>9015433</id><snippet>mylist=[0]*11
</snippet></ROW><ROW><id>9015961</id><snippet>import boto
import threading
import tempfile
import os

DEFAULT_CHUNK_SIZE = 2**20 * 64 # 64 MB per request

class BigFile(object):
    def __init__(self, file_obj, file_size, chunksize=DEFAULT_CHUNK_SIZE, start=True):
        self._file_obj = file_obj
        self._file_size = file_size
        self._lock = threading.RLock()
        self._load_condition = threading.Condition(self._lock)
        self._load_run = True
        self._loc = 0
        self._chunk_size = chunksize
        chunk_count = self._file_size // self._chunk_size
        chunk_count += 1 if self._file_size % self._chunk_size else 0
        self._chunks = [None for _ in xrange(chunk_count)]
        self._load_thread = threading.Thread(target=self._load)
        if start:
            self._load_thread.start()

    def _chunk_loc(self):
        ' Returns (chunk_num, chunk_offset) for a given location in the larger file '
        return self._loc // self._chunk_size, self._loc % self._chunk_size

    def _load_chunk(self, chunk_num):
        tf = tempfile.TemporaryFile()
        start_idx = chunk_num * self._chunk_size
        self._file_obj.seek(start_idx)
        tf.write(self._file_obj.read(self._chunk_size))
        with self._lock:
            self._chunks[chunk_num] = (tf, tf.tell()) # (tempfile, size)
            self._load_condition.notify()

    def _load(self):
        while self._load_run:
            # check current chunk, load if needed
            with self._lock:
                chunk_num, _ = self._chunk_loc()
                chunk_and_size = self._chunks[chunk_num]
            if chunk_and_size is None:
                self._load_chunk(chunk_num)

            # find next empty chunk
            for i in xrange(len(self._chunks)):
                cur_chunk = chunk_num + i
                    cur_chunk %= len(self._chunks) # loop around
                if self._chunks[cur_chunk] is None:
                    self._load_chunk(cur_chunk)
                    break
            else:
                # all done, stop thread
                break

    def seek(self, loc, rel=os.SEEK_SET):
        with self._lock:
            if rel == os.SEEK_CUR:
                self._loc += loc
            elif rel == os.SEEK_SET:
                self._loc = loc
            elif rel == os.SEEK_END:
                self._loc = self._file_size + loc

    def read(self, bytes_to_read):
        ret = []
        with self._lock:
            chunk_num, chunk_offset = self._chunk_loc()
            while (bytes_to_read &gt; 0 or bytes_to_read == -1) and chunk_num &lt; len(self._chunks):
                while not self._chunks[chunk_num]:
                    self._load_condition.wait()
                chunk, size = self._chunks[chunk_num]
                cur_chunk_bytes = min(self._chunk_size-chunk_offset, bytes_to_read, size)
                chunk.seek(chunk_offset, os.SEEK_SET)
                data = chunk.read(cur_chunk_bytes)
                ret.append(data)
                bytes_to_read -= len(data)
                chunk_num += 1
        return ''.join(ret)

    def start(self):
        self._load_thread.start()

    def join(self):
        self._load_thread.join()

    def stop(self):
        self._load_run = False

class S3RangeReader:
    def __init__(self, key_obj):
        self._key_obj = key_obj
        self.size = self._key_obj.size
        self._pos = 0

    def __len__(self):
        return self.size

    def seek(self, pos, rel=os.SEEK_SET):
        if rel == os.SEEK_CUR:
            self._pos += pos
        elif rel == os.SEEK_SET:
            self._pos = pos
        elif rel == os.SEEK_END:
            self._pos = self.size + pos

    def read(self, bytes=-1):
        if bytes == 0 or self._pos &gt;= self.size:
            return ''
        else:
            if bytes == -1:
                bytes = self.size
            headers = {'Range': 'bytes=%s-%s' % (self._pos, self._pos + bytes - 1)} # S3 ranges are closed ranges: [start,end]
            return self._key_obj.get_contents_as_string(headers=headers)

if __name__ == '__main__':
    key = boto.s3_connect().get_bucket('mybucket').get_key('my_key')
    reader = S3RangeReader(key)
    bf = BigFile(reader, len(reader)) # download starts by default
    bf.seek(1000000)
    bf.read(100) # blocks
    bf.seek(0)
    bf.read(100) # should not block
</snippet></ROW><ROW><id>9016036</id><snippet>__init__()</snippet></ROW><ROW><id>9016036</id><snippet>class MailThread(threading.Thread):
    def __init__(self, status_icon = None):
        threading.Thread.__init__(self)
        gtk.gdk.threads_init()
        self.status_icon = status_icon
</snippet></ROW><ROW><id>9016036</id><snippet>run()</snippet></ROW><ROW><id>9016036</id><snippet>def run(self):
    # &lt;...&gt;
    if num &lt; 1:
        gobject.idle_add(self.set_status_icon, False)
    else:
        gobject.idle_add(self.set_status_icon, True)
    # &lt;...&gt;

def set_status_icon(self, state = False):
    # code that changes icon state goes here
    pass
</snippet></ROW><ROW><id>9016036</id><snippet>idle_add</snippet></ROW><ROW><id>9016379</id><snippet>f()</snippet></ROW><ROW><id>9016379</id><snippet>f</snippet></ROW><ROW><id>9016379</id><snippet>E += f()</snippet></ROW><ROW><id>9016379</id><snippet>E</snippet></ROW><ROW><id>9016379</id><snippet>f</snippet></ROW><ROW><id>9016379</id><snippet>&gt;&gt;&gt; E = [1,2,3]
&gt;&gt;&gt; def f():
...  yield 4
...  yield 5
...
&gt;&gt;&gt; E += f()
&gt;&gt;&gt; E
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>9016379</id><snippet>E += [f()]</snippet></ROW><ROW><id>9016379</id><snippet>f</snippet></ROW><ROW><id>9016379</id><snippet>[f()]</snippet></ROW><ROW><id>9016379</id><snippet>E[-1]</snippet></ROW><ROW><id>9016379</id><snippet>yield</snippet></ROW><ROW><id>9016467</id><snippet>f = open("C:\Users\user\Desktop\Log.file","w");
</snippet></ROW><ROW><id>9016496</id><snippet>&lt;script type="text/javascript"&gt;
    $(document).bind("mobileinit", function(){
    ajaxEnabled:false;    
    });
    &lt;/script&gt; 
</snippet></ROW><ROW><id>9016570</id><snippet>dot</snippet></ROW><ROW><id>9016570</id><snippet>*</snippet></ROW><ROW><id>9016570</id><snippet>In [47]: import scipy.sparse as sp

In [48]: import numpy as np

In [49]: D=sp.csr.csr_matrix(np.diagflat(np.random.random(100)))

In [50]: A=sp.csr.csr_matrix(np.diagflat(np.random.random(100)))

In [51]: y=np.random.random(100)

In [52]: y_next = A*(D*y)

In [53]: print y_next.shape, type(y_next)
(100,) &lt;type 'numpy.ndarray'&gt;

In [54]: print y_next
[ 0.00478446  0.0234117   0.02234696  0.23123913  0.15545059  0.366065
  0.05674736  0.00238582  0.08701694  0.00099934  0.01687756  0.08190578
  0.17570485  0.08015175  0.00301985  0.00491663  0.09450794  0.1141585
  0.02753342  0.0462671   0.02075956  0.21261696  0.82611774  0.09058998
  0.33545702  0.31456356  0.00260624  0.0449429   0.2431993   0.06302444
  0.01901411  0.02553964  0.02442291  0.02169692  0.15085474  0.41331208
  0.09486585  0.01001604  0.48898697  0.03557272  0.22931588  0.0760863
  0.37686888  0.02801424  0.3280943   0.1695001   0.02890001  0.11712331
  0.02996858  0.43608624  0.00905409  0.00655408  0.01618681  0.1417559
  0.0057121   0.0010656   0.02067559  0.05223334  0.14035328  0.0457123
  0.1273495   0.17688214  0.39300249  0.00625762  0.05356745  0.26719959
  0.08349373  0.05969248  0.02332782  0.0218782   0.1716797   0.04823102
  0.03117486  0.00172426  0.08514879  0.09505655  0.17030885  0.00953221
  0.00134071  0.03951708  0.00243708  0.04247436  0.32152315  0.02039932
  0.00436897  0.00097858  0.08876351  0.00824626  0.12004067  0.01060241
  0.11929884  0.01207807  0.10467955  0.02536641  0.602902    0.04115373
  0.00472405  0.05108167  0.28946041  0.19071962]
</snippet></ROW><ROW><id>9016570</id><snippet>dot</snippet></ROW><ROW><id>9016570</id><snippet>In [55]: print D.dot(A.dot(y)) - (D*(A*y))

[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
</snippet></ROW><ROW><id>9016570</id><snippet>numpy.dot</snippet></ROW><ROW><id>9016570</id><snippet>ndarray</snippet></ROW><ROW><id>9016658</id><snippet>camera = Cameras.objects.get(pk=camID)</snippet></ROW><ROW><id>9016658</id><snippet>camera.delete()</snippet></ROW><ROW><id>9016900</id><snippet>package perso.tests.timer;

import java.util.Timer;
import java.util.TimerTask;

public class TimerExample  extends TimerTask{

      Timer timer;
      int executionsPerSecond;

      public TimerExample(int executionsPerSecond){
          this.executionsPerSecond = executionsPerSecond;
        timer = new Timer();
        long period = 1000/executionsPerSecond;
        timer.schedule(this, 200, period);
      }

      public void functionToRepeat(){
          System.out.println(executionsPerSecond);
      }
        public void run() {
          functionToRepeat();
        }   
      public static void main(String args[]) {
        System.out.println("About to schedule task.");
        new TimerExample(3);
        new TimerExample(6);
        new TimerExample(9);
        System.out.println("Tasks scheduled.");
      }
}
</snippet></ROW><ROW><id>9017464</id><snippet>In [45]: sys.path
Out[45]: 
['',
 '/usr/bin',
 '/usr/lib/python2.7/site-packages/django_debug_toolbar-0.9.1-py2.7.egg',
 '/usr/lib/python27.zip',
 '/usr/lib/python2.7',
 '/usr/lib/python2.7/plat-linux2',
 '/usr/lib/python2.7/lib-tk',
 '/usr/lib/python2.7/lib-old',
 '/usr/lib/python2.7/lib-dynload',
 '/usr/lib/python2.7/site-packages',
 '/usr/lib/python2.7/site-packages/Numeric',
 '/usr/lib/python2.7/site-packages/PIL',
 '/usr/lib/python2.7/site-packages/gst-0.10',
 '/usr/lib/python2.7/site-packages/gtk-2.0',
 '/usr/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg-info',
 '/usr/lib/python2.7/site-packages/wx-2.8-gtk2-unicode',
 '/usr/lib/python2.7/site-packages/IPython/Extensions',
 u'/home/alf/.ipython']
</snippet></ROW><ROW><id>9017610</id><snippet>environ</snippet></ROW><ROW><id>9017610</id><snippet>os.environ</snippet></ROW><ROW><id>9017610</id><snippet>SetEnv</snippet></ROW><ROW><id>9017610</id><snippet>os.environ</snippet></ROW><ROW><id>9017610</id><snippet>getenviron</snippet></ROW><ROW><id>9017610</id><snippet>os.environ['PWD']</snippet></ROW><ROW><id>9017610</id><snippet>MY_PATH</snippet></ROW><ROW><id>9017610</id><snippet>app.environ</snippet></ROW><ROW><id>9017610</id><snippet>werkzeug</snippet></ROW><ROW><id>9017610</id><snippet>MYAPP_CONF</snippet></ROW><ROW><id>9017610</id><snippet>request.environ.get('MYAPP_CONFIG')</snippet></ROW><ROW><id>9017799</id><snippet>def _rvs(self, *args):
    ## Use basic inverse cdf algorithm for RV generation as default.
    U = mtrand.sample(self._size)
    Y = self._ppf(U,*args)
    return Y
</snippet></ROW><ROW><id>9018204</id><snippet>itertools.dropwhile</snippet></ROW><ROW><id>9018204</id><snippet>import itertools
input_list = [u'12', u'23', u'hello', u'15', u'guys']
res = list(itertools.dropwhile(lambda s: s.isdigit(), input_list))
</snippet></ROW><ROW><id>9018395</id><snippet>python-call</snippet></ROW><ROW><id>9018395</id><snippet>clips.Build("""
(defrule duck
  (animal-is duck)
  =&gt;
  (assert (sound-is quack))
  (printout t "it's a duck" crlf))
  (python-call addf 40 2 )       ^
""")                      ^      |
                          |   this one
                          |
                      should go here
</snippet></ROW><ROW><id>9018395</id><snippet>addf</snippet></ROW><ROW><id>9018395</id><snippet>clips.Build("""
(defrule duck
  (animal-is duck)
  =&gt;
  (assert (sound-is quack))
  (printout t \"it's a duck\" crlf)
  (bind ?tot (python-call addf 40 2 ))
  (printout t ?tot crlf))
""")


clips.Assert("(animal-is duck)")
clips.Run()
t = clips.StdoutStream.Read()
print t
</snippet></ROW><ROW><id>9018858</id><snippet>library(intervals)

f &lt;- function(dd) with(dd, {
    r &lt;- reduce(Intervals(cbind(start, end)))
    data.frame(username = username[1],
         machine = machine[1],
         start = structure(r[, 1], class = class(start)),
         end = structure(r[, 2], class = class(end)))
})

do.call("rbind", by(d, d[1:2], f))
</snippet></ROW><ROW><id>9018858</id><snippet>   username          machine               start                 end
1     user1 D5599.domain.com 2011-01-03 02:44:18 2011-01-03 03:09:16
2     user1 D5599.domain.com 2011-01-03 07:07:36 2011-01-03 07:56:17
3     user1 D5599.domain.com 2011-01-05 08:03:17 2011-01-05 08:23:15
4     user1 D5599.domain.com 2011-02-14 07:33:39 2011-02-14 07:40:16
5     user1 D5599.domain.com 2011-02-23 06:54:30 2011-02-23 06:58:23
6     user1 D5599.domain.com 2011-03-21 04:10:18 2011-03-21 04:32:22
7     user1 D5645.domain.com 2011-06-09 03:12:41 2011-06-09 03:58:59
8     user1 D5682.domain.com 2011-01-03 05:03:45 2011-01-03 05:29:43
9     USER2 D5682.domain.com 2011-01-12 07:26:05 2011-01-12 07:32:53
10    USER2 D5682.domain.com 2011-01-17 08:06:19 2011-01-17 08:44:22
11    USER2 D5682.domain.com 2011-01-18 08:07:30 2011-01-18 08:42:43
12    USER2 D5682.domain.com 2011-01-25 08:20:55 2011-01-25 08:24:38
13    USER2 D5682.domain.com 2011-02-14 07:59:23 2011-02-14 08:14:47
</snippet></ROW><ROW><id>9018923</id><snippet>or</snippet></ROW><ROW><id>9018923</id><snippet>True</snippet></ROW><ROW><id>9018923</id><snippet>False</snippet></ROW><ROW><id>9018923</id><snippet>&gt;&gt;&gt; "" or 12
12

&gt;&gt;&gt; 27 or 9
27

&gt;&gt; None or "default"
'default'
</snippet></ROW><ROW><id>9018923</id><snippet>x = y or 1</snippet></ROW><ROW><id>9018923</id><snippet>x</snippet></ROW><ROW><id>9018923</id><snippet>y</snippet></ROW><ROW><id>9018923</id><snippet>y</snippet></ROW><ROW><id>9018923</id><snippet>False</snippet></ROW><ROW><id>9018923</id><snippet>1</snippet></ROW><ROW><id>9019043</id><snippet>re.search('^(.*?)(Arguments:.*?)?(Returns:.*)?$', s, re.DOTALL)
</snippet></ROW><ROW><id>9019043</id><snippet>?</snippet></ROW><ROW><id>9019043</id><snippet>?</snippet></ROW><ROW><id>9019043</id><snippet>.*</snippet></ROW><ROW><id>9019043</id><snippet>$</snippet></ROW><ROW><id>9019043</id><snippet>Arguments</snippet></ROW><ROW><id>9019043</id><snippet>Returns</snippet></ROW><ROW><id>9019043</id><snippet>Arguments:</snippet></ROW><ROW><id>9019043</id><snippet>Returns:</snippet></ROW><ROW><id>9019043</id><snippet>&lt;?P&lt;name&gt;</snippet></ROW><ROW><id>9019043</id><snippet>&gt;&gt;&gt; m = re.search('^(?P&lt;description&gt;.*?)(Arguments:(?P&lt;arguments&gt;.*?))?(Returns:(?P&lt;returns&gt;.*))?$', s, re.DOTALL)
&gt;&gt;&gt; m.groupdict()['description']
"Test if a column field is larger than a given value\n    This function can also be called as an operator using the '&gt;' syntax\n\n    "
&gt;&gt;&gt; m.groupdict()['arguments']
'\n        - DbColumn self\n        - string or float value: the value to compare to\n            in case of string: lexicographic comparison\n            in case of float: numeric comparison\n    '
&gt;&gt;&gt; m.groupdict()['returns']
'\n        DbWhere object'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9019222</id><snippet>http://</snippet></ROW><ROW><id>9019222</id><snippet>httpCon = HTTPConnection("www.podnapisi.net",80)
</snippet></ROW><ROW><id>9019673</id><snippet>string()</snippet></ROW><ROW><id>9019673</id><snippet>XPath</snippet></ROW><ROW><id>9019673</id><snippet># nested.html - your second html snippet
# $scrapy shell "nested.html" 

In [1]: row = hxs.select('//tr')

In [2]: row.select('td[2]').select('string()').extract()
Out[2]: [u'   some other text  ']

In [3]: row.select('td[2]').select('string()').extract()[0]
Out[3]: u'   some other text  '

In [4]: row.select('td[3]').select('string()').extract()[0]
Out[4]: u'  \r\n   yet some text  \r\n     '
</snippet></ROW><ROW><id>9019673</id><snippet>//text()</snippet></ROW><ROW><id>9019673</id><snippet>text</snippet></ROW><ROW><id>9019673</id><snippet>In [5]: row.select('td[3]//text()').extract()
Out[5]: [u' \r\n  ', u' yet some text ', u' \r\n    ', u' ']
</snippet></ROW><ROW><id>9019673</id><snippet>''.join(...)</snippet></ROW><ROW><id>9019673</id><snippet>In [6]: ''.join(row.select('td[3]//text()').extract())
Out[6]: u' \r\n   yet some text  \r\n     '
</snippet></ROW><ROW><id>9020157</id><snippet>apply_along_axis</snippet></ROW><ROW><id>9020157</id><snippet>new_func</snippet></ROW><ROW><id>9020157</id><snippet>In [20]: b = np.array([[1,2,3], [4,5,6], [7,8,9]])

In [21]: np.apply_along_axis(np.diff,0,b)
Out[21]: 
array([[3, 3, 3],
       [3, 3, 3]])

In [22]: np.apply_along_axis(np.diff,1,b)
Out[22]: 
array([[1, 1],
       [1, 1],
       [1, 1]])
</snippet></ROW><ROW><id>9020157</id><snippet>numpy.diff</snippet></ROW><ROW><id>9020327</id><snippet>from collections import defaultdict

input = [(1.2,2), (1.2, 6), (1.2, -2), (2,8), (2,7), (2,18)]

indices_dict = defaultdict(lambda: list([[], []]))

for idx, val in enumerate(input):
    indices_dict[val[0]][0].append(idx)
    indices_dict[val[0]][1].append(val[1])

for key in indices_dict:
    y_values = indices_dict[key][1]
    idx_values =  indices_dict[key][0]
    max_idx = idx_values[y_values.index(max(y_values))]
    min_idx = idx_values[y_values.index(min(y_values))]
    print 'Max diff for x=%s is found between points %s and %s' %(key, input[min_idx], input[max_idx])
</snippet></ROW><ROW><id>9020385</id><snippet>time.clock()
</snippet></ROW><ROW><id>9020435</id><snippet>Foo</snippet></ROW><ROW><id>9020435</id><snippet>othermod.py</snippet></ROW><ROW><id>9020435</id><snippet>class Foo(object):
    pass

f2 = Foo()
</snippet></ROW><ROW><id>9020435</id><snippet>Foo</snippet></ROW><ROW><id>9020435</id><snippet>script.py</snippet></ROW><ROW><id>9020435</id><snippet>import gc
import othermod

f = othermod.Foo()

objs = gc.get_objects()
# print(len(objs))
# 3519

print(len([obj for obj in objs if isinstance(obj,othermod.Foo)]))
# 2
</snippet></ROW><ROW><id>9020435</id><snippet>gc.get_objects</snippet></ROW><ROW><id>9020435</id><snippet>int</snippet></ROW><ROW><id>9020435</id><snippet>str</snippet></ROW><ROW><id>9020460</id><snippet>itertools</snippet></ROW><ROW><id>9020460</id><snippet>range</snippet></ROW><ROW><id>9020460</id><snippet>xrange</snippet></ROW><ROW><id>9020460</id><snippet>range</snippet></ROW><ROW><id>9020460</id><snippet>product</snippet></ROW><ROW><id>9020460</id><snippet>numpy</snippet></ROW><ROW><id>9020460</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; x=np.zeros((256,256,256))
&gt;&gt;&gt; for i, j, k in product(xrange(256), repeat=3):
...     x[i,j,k]= i*j*k
... 
</snippet></ROW><ROW><id>9020460</id><snippet>$ cat /proc/27240/status 
Name:   python
State:  S (sleeping)
...
VmPeak:   420808 kB
VmSize:   289732 kB
</snippet></ROW><ROW><id>9020716</id><snippet>&gt;&gt;&gt; base64.b64encode(combined.digest(), altchars="AB")
'PeFC3irNFx8fuzwjAzAfEAup9cz6xujsf2gAIH2GdUM='
</snippet></ROW><ROW><id>9020716</id><snippet>digest()</snippet></ROW><ROW><id>9021003</id><snippet>&gt;&gt;&gt; ':'.join(s.encode('hex') for s in '00163e2fbab7'.decode('hex'))
'00:16:3e:2f:ba:b7'
</snippet></ROW><ROW><id>9021069</id><snippet>self.rsyncRun.communicate()
</snippet></ROW><ROW><id>9021069</id><snippet>rsyncRun</snippet></ROW><ROW><id>9021069</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9021069</id><snippet>import threading

def worker():
    for share in shares.split(', '):
        ...
        rsyncRun = subprocess.Popen(...)
        out, err = rsyncRun.communicate()

t = threading.Thread(target = worker)
t.daemon = True
t.start()
t.join()
</snippet></ROW><ROW><id>9022299</id><snippet>if</snippet></ROW><ROW><id>9022299</id><snippet>else</snippet></ROW><ROW><id>9022299</id><snippet>if condition:
    pass
else:
    # do a lot of stuff here
</snippet></ROW><ROW><id>9022299</id><snippet>if</snippet></ROW><ROW><id>9022299</id><snippet>if not condition:
   # do all of your stuff here
</snippet></ROW><ROW><id>9022435</id><snippet>u</snippet></ROW><ROW><id>9022435</id><snippet>import re
haystack = u'Fixed unicode text:\n&lt;br&gt;&lt;strong&gt;\ntext I\nam looking for&lt;/strong&gt;'
match = re.search(ur'Fixed unicode text:(.*)', haystack, re.DOTALL)
print(match.group(1))
</snippet></ROW><ROW><id>9022616</id><snippet>&gt;&gt;&gt; range(-1,1)
[-1, 0]
&gt;&gt;&gt; range(-1, 2)
[-1, 0, 1]
</snippet></ROW><ROW><id>9022756</id><snippet>python3.2</snippet></ROW><ROW><id>9022846</id><snippet>itertools.product()</snippet></ROW><ROW><id>9022846</id><snippet>from itertools import product
def _combinations_for_record(d):
    for tmp, vlt, prs in product(d['Temp'], d['Voltage'], d['Pressure']):
        yield {"Temp": [tmp], "Voltage": [vlt], "Pressure": [prs]}
</snippet></ROW><ROW><id>9022915</id><snippet>energies</snippet></ROW><ROW><id>9022915</id><snippet>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; set([1,2,3]) &amp; set(range(2, 10))
set([2, 3])
&gt;&gt;&gt; set(array([1,2,3])) &amp; set(range(2,10))
set([2, 3])
&gt;&gt;&gt; set(array([[1,2,3],])) &amp; set(range(2,10))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'numpy.ndarray'
</snippet></ROW><ROW><id>9022915</id><snippet>&gt;&gt;&gt; data
array([[  1.,   2.,   3.],
       [  3.,   4.,   5.],
       [  5.,   6.,   7.],
       [  8.,   9.,  10.]])
&gt;&gt;&gt; hsplit(data,3)[0]
array([[ 1.],
       [ 3.],
       [ 5.],
       [ 8.]])
</snippet></ROW><ROW><id>9022915</id><snippet>&gt;&gt;&gt; data[:,0]
array([ 1.,  3.,  5.,  8.])
</snippet></ROW><ROW><id>9022915</id><snippet>data</snippet></ROW><ROW><id>9022915</id><snippet>elementdata</snippet></ROW><ROW><id>9023919</id><snippet>ntbk.GetPageText(evt.GetSelection())</snippet></ROW><ROW><id>9023919</id><snippet>class MyNotebook(AuiNotebook):
  def __init__(self, parent, id, *args, **kwds): #@ReservedAssignment
    AuiNotebook.__init__(self, parent, id, *args,
      style = NO_BORDER | AUI_NB_CLOSE_ON_ALL_TABS | AUI_NB_TAB_SPLIT, **kwds)

    self._tabs = ['Jobs', 'Devices', 'Actions', 'Transforms']

    self.Bind(EVT_AUINOTEBOOK_PAGE_CLOSE, self.OnPageClosed)

  def OnPageClosed(self, evt):
    page = self.GetPageText(evt.GetSelection())
</snippet></ROW><ROW><id>9023969</id><snippet>re.DOTALL</snippet></ROW><ROW><id>9023969</id><snippet>.*(Phone Number:).*?([-\d]+).*
</snippet></ROW><ROW><id>9023969</id><snippet>re.sub()</snippet></ROW><ROW><id>9023969</id><snippet>\1 \2</snippet></ROW><ROW><id>9023969</id><snippet>&gt;&gt;&gt; s = """&lt;tr valign="top"&gt;
... &lt;td&gt;&lt;p&gt;Phone Number:&lt;/p&gt;&lt;/td&gt;
... &lt;td&gt; &lt;/td&gt;
... &lt;td&gt;&lt;p&gt;706-878-8888&lt;/p&gt;&lt;/td&gt;
... &lt;/tr&gt;"""
&gt;&gt;&gt; regex = re.compile(r'.*(Phone Number:).*?([-\d]+).*', re.DOTALL)
&gt;&gt;&gt; regex.sub(r'\1 \2', s)
'Phone Number: 706-878-8888'
</snippet></ROW><ROW><id>9024114</id><snippet>./sage_server.py</snippet></ROW><ROW><id>9024114</id><snippet>[your-sage] -sh
</snippet></ROW><ROW><id>9024114</id><snippet>setup.py</snippet></ROW><ROW><id>9024114</id><snippet>[your-sage] -python setup.py install
</snippet></ROW><ROW><id>9024152</id><snippet>import numpy as np
def fucn():
    cdef float a
    a = 1
    return np.float32(a)
</snippet></ROW><ROW><id>9024152</id><snippet>import pyximport
pyximport.install()
import test_mod

a = test_mod.func()
print type(a) # &lt;type 'numpy.float32'&gt;
</snippet></ROW><ROW><id>9024362</id><snippet>class myClass():
  def __init__(self):
    self.modified = set([])
    self.lastrefresh = datetime.datetime.now()
    self.refreshinterval = datetime.timedelta(milliseconds = 250)

  def onModify(self, data):
    self.modified.add(data['job-id'])
    if datetime.datetime.now() - self.lastrefresh &lt; self.refreshinterval:
      return
    self.doModify()

  def doModify():
    if not self.modified:
      return
    ids = list(self.modified)
    self.lastrefresh = datetime.datetime.now()
    self.modified.clear()
    wx.CallAfter(self.purgeModifies)

  def purgeModifies(self):
    wx.CallLater(250, self.doModify)
</snippet></ROW><ROW><id>9024362</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>9024362</id><snippet>wx.CallLater</snippet></ROW><ROW><id>9024362</id><snippet>wx.CallLater</snippet></ROW><ROW><id>9024362</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>9024362</id><snippet>wx.CallLater</snippet></ROW><ROW><id>9024499</id><snippet>dict</snippet></ROW><ROW><id>9024499</id><snippet>class dd_dict(dict):    # the dd is for "deferred delete"
    _deletes = None
    def __delitem__(self, key):
        if key not in self:
            raise KeyError(str(key))
        dict.__delitem__(self, key) if self._deletes is None else self._deletes.add(key)
    def __enter__(self):
        self._deletes = set()
    def __exit__(self, type, value, tb):
        for key in self._deletes:
            try:
                dict.__delitem__(self, key)
            except KeyError:
                pass
        self._deletes = None
</snippet></ROW><ROW><id>9024499</id><snippet># make the dict and do whatever to it
ddd = dd_dict(a=1, b=2, c=3)

# now iterate over it, deferring deletes
with ddd:
    for k, v in ddd.iteritems():
        if k is "a":
            del ddd[k]
            print ddd     # shows that "a" is still there

print ddd                 # shows that "a" has been deleted
</snippet></ROW><ROW><id>9024499</id><snippet>with</snippet></ROW><ROW><id>9024499</id><snippet>dict</snippet></ROW><ROW><id>9024499</id><snippet>dict</snippet></ROW><ROW><id>9024499</id><snippet>class deferring_delete(object):
    def __init__(self, d):
        self._dict = d
    def __enter__(self):
        self._deletes = set()
        return self
    def __exit__(self, type, value, tb):
        for key in self._deletes:
            try:
                del self._dict[key]
            except KeyError:
                pass
        del self._deletes
    def __delitem__(self, key):
        if key not in self._dict:
            raise KeyError(str(key))
        self._deletes.add(key)

d = dict(a=1, b=2, c=3)

with deferring_delete(d) as dd:
    for k, v in d.iteritems():
        if k is "a":
            del dd[k]    # delete through wrapper

print d
</snippet></ROW><ROW><id>9024969</id><snippet>2.2.5</snippet></ROW><ROW><id>9024969</id><snippet>-f https://github.com/adieu/python-openid/downloads</snippet></ROW><ROW><id>9024969</id><snippet>requirements.txt</snippet></ROW><ROW><id>9024969</id><snippet>2.2.5-bouke1</snippet></ROW><ROW><id>9025258</id><snippet>private</snippet></ROW><ROW><id>9025258</id><snippet>make_A</snippet></ROW><ROW><id>9025258</id><snippet>def make_A():
    private = {
        'a' : 1,
        'b' : 2,
        'z' : 26,
        }
    class A:
        def __init__(self):
            self.catch = 100
            private['a'] = 2    # you can modify the private data
        def foo(self):
            print(private['a']) # you can access the private data 
    return A

A = make_A()

a=A()

a.foo()
# 2
</snippet></ROW><ROW><id>9025258</id><snippet>private</snippet></ROW><ROW><id>9025258</id><snippet>dir(a)</snippet></ROW><ROW><id>9025258</id><snippet>print('private' in dir(a))
# False
</snippet></ROW><ROW><id>9025258</id><snippet>private</snippet></ROW><ROW><id>9025258</id><snippet>A</snippet></ROW><ROW><id>9025258</id><snippet>self</snippet></ROW><ROW><id>9025258</id><snippet>def make_A():
    private = {}
    class A:
        def __init__(self):
            self.catch = 100
            private[self,'a'] = 1    # you can modify the private data
            private[self,'b'] = 2    
            private[self,'z'] = 26    
        def foo(self):
            print(private[self,'a']) # you can access the private data 
    return A
</snippet></ROW><ROW><id>9025353</id><snippet>import signal, sys
def handler(signal, frame):
    print "Canceled!"
    sys.exit(1)
signal.signal(signal.SIGINT, handler)
for x in large_list:
    function_that_catches_KeyboardInterrupt(x)
</snippet></ROW><ROW><id>9025353</id><snippet>SystemExit</snippet></ROW><ROW><id>9025353</id><snippet>os._exit(1)</snippet></ROW><ROW><id>9025353</id><snippet>os.kill(os.getpid(), signal.SIGTERM)</snippet></ROW><ROW><id>9025487</id><snippet>list</snippet></ROW><ROW><id>9025487</id><snippet>set</snippet></ROW><ROW><id>9025487</id><snippet>set</snippet></ROW><ROW><id>9025487</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; a = (random.randint(1, 50000) for _ in xrange(300))
&gt;&gt;&gt; b = (random.randint(3500, 3700) for _ in xrange(50))
&gt;&gt;&gt; set(a).intersection(set(b))
set([])
&gt;&gt;&gt; a = (random.randint(1, 50000) for _ in xrange(300))
&gt;&gt;&gt; b = (random.randint(3500, 3700) for _ in xrange(50))
&gt;&gt;&gt; set(a).intersection(set(b))
set([3634])
</snippet></ROW><ROW><id>9025632</id><snippet>logging.WARNING</snippet></ROW><ROW><id>9025632</id><snippet>info()</snippet></ROW><ROW><id>9025632</id><snippet>logging.INFO</snippet></ROW><ROW><id>9025632</id><snippet>def set_up_logging():
    log = logging.getLogger()
    log.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    log.addHandler(ch)
</snippet></ROW><ROW><id>9025762</id><snippet>print ' |' + ' | '.join(list) + '| '
</snippet></ROW><ROW><id>9026138</id><snippet>Obj.__del__()</snippet></ROW><ROW><id>9026138</id><snippet>with</snippet></ROW><ROW><id>9026138</id><snippet>class Foo(object):
    def __enter__(self):
        print 'Entered with block'
    def __exit__(self, *exc_info):
        print 'Exited with block'
        return False

with Foo():
    pass
</snippet></ROW><ROW><id>9026315</id><snippet>matches = []
for ip1 in phase1_hits:
    subdict1 = phase1_hits[ip1]
    internal_ips = [subdict1['internal']] + subdict1['internal_additional']
    hits = subdict1['hits']
    color_list = subdict1['list']
    for ip2 in phase2_hits:
        subdict2 = phase2_hits[ip2]
        phase2_ips = subdict2['ip.dst'] + subdict2['ip.src']
        overlap = [i for i in internal_ips if i in phase2_ips]
        if len(overlap) &gt; 0:
            temp = (ip1, overlap, hits, color_list, ip2, [i for i in phase2_ips if i in overlap])
            matches.append(temp)
</snippet></ROW><ROW><id>9026315</id><snippet>matches = []
</snippet></ROW><ROW><id>9026315</id><snippet>for ip1 in phase1_hits:
</snippet></ROW><ROW><id>9026315</id><snippet>.keys()</snippet></ROW><ROW><id>9026315</id><snippet>    subdict1 = phase1_hits[ip1]
    internal_ips = [subdict1['internal']] + subdict1['internal_additional']
    hits = subdict1['hits']
    color_list = subdict1['list']
</snippet></ROW><ROW><id>9026315</id><snippet>__add__</snippet></ROW><ROW><id>9026315</id><snippet>internal_ips</snippet></ROW><ROW><id>9026315</id><snippet>hits</snippet></ROW><ROW><id>9026315</id><snippet>'list'</snippet></ROW><ROW><id>9026315</id><snippet>color_list</snippet></ROW><ROW><id>9026315</id><snippet>list</snippet></ROW><ROW><id>9026315</id><snippet>    for ip2 in phase2_hits:
        subdict2 = phase2_hits[ip2]
        phase2_ips = subdict2['ip.dst'] + subdict2['ip.src']
        overlap = [i for i in internal_ips if i in phase2_ips]
</snippet></ROW><ROW><id>9026315</id><snippet>overlap</snippet></ROW><ROW><id>9026315</id><snippet>[i for i in L1 if i in L2]</snippet></ROW><ROW><id>9026315</id><snippet>L1</snippet></ROW><ROW><id>9026315</id><snippet>L2</snippet></ROW><ROW><id>9026315</id><snippet>        if len(overlap) &gt; 0:
            temp = (ip1, overlap, hits, color_list, ip2, [i for i in phase2_ips if i in overlap])
            matches.append(temp)
</snippet></ROW><ROW><id>9026315</id><snippet>if</snippet></ROW><ROW><id>9026315</id><snippet>phase1_hits</snippet></ROW><ROW><id>9026315</id><snippet>phase2_hits</snippet></ROW><ROW><id>9026315</id><snippet>matches</snippet></ROW><ROW><id>9027037</id><snippet>//fixed parameters

k = 2
</snippet></ROW><ROW><id>9027037</id><snippet>k</snippet></ROW><ROW><id>9027037</id><snippet>m = 256*8
</snippet></ROW><ROW><id>9027037</id><snippet>//the filter
byte[m/8] bloom   ## What is this part?
</snippet></ROW><ROW><id>9027037</id><snippet>bloom</snippet></ROW><ROW><id>9027037</id><snippet>m</snippet></ROW><ROW><id>9027037</id><snippet>bloom</snippet></ROW><ROW><id>9027037</id><snippet>function insertIP(byte[] ip) {

    byte[20] hash = sha1(ip)
</snippet></ROW><ROW><id>9027037</id><snippet>ip</snippet></ROW><ROW><id>9027037</id><snippet>    int index1 = hash[0] | hash[1] &lt;&lt; 8
    int index2 = hash[2] | hash[3] &lt;&lt; 8
</snippet></ROW><ROW><id>9027037</id><snippet>bloom</snippet></ROW><ROW><id>9027037</id><snippet>index1</snippet></ROW><ROW><id>9027037</id><snippet>hash</snippet></ROW><ROW><id>9027037</id><snippet>index2</snippet></ROW><ROW><id>9027037</id><snippet>hash</snippet></ROW><ROW><id>9027037</id><snippet>    // truncate index to m (11 bits required)
    index1 %= m  ## ?
    index2 %= m  ## ?
</snippet></ROW><ROW><id>9027037</id><snippet>bloom</snippet></ROW><ROW><id>9027037</id><snippet>%</snippet></ROW><ROW><id>9027037</id><snippet>    // set bits at index1 and index2
    bloom[index1 / 8] |= 0x01 &lt;&lt; index1 % 8   ## ??
    bloom[index2 / 8] |= 0x01 &lt;&lt; index2 % 8   ## ??
</snippet></ROW><ROW><id>9027037</id><snippet>bloom</snippet></ROW><ROW><id>9027037</id><snippet>indexA</snippet></ROW><ROW><id>9027037</id><snippet>indexA</snippet></ROW><ROW><id>9027037</id><snippet>%</snippet></ROW><ROW><id>9027037</id><snippet>}

// insert IP 192.168.1.1 into the filter:
insertIP(byte[4] {192,168,1,1})
</snippet></ROW><ROW><id>9027037</id><snippet>data-&gt;    001011000101110011000001001000100...

indices-&gt; 000000000011111111112222222222333...
          012345678901234567890123456789012...
</snippet></ROW><ROW><id>9027037</id><snippet>index1</snippet></ROW><ROW><id>9027037</id><snippet>5</snippet></ROW><ROW><id>9027037</id><snippet>index2</snippet></ROW><ROW><id>9027037</id><snippet>9</snippet></ROW><ROW><id>9027037</id><snippet>5</snippet></ROW><ROW><id>9027037</id><snippet>9</snippet></ROW><ROW><id>9027037</id><snippet>1</snippet></ROW><ROW><id>9027037</id><snippet>import hashlib
m = 2048
def hashes(s):
    index = [0, 0]
    #for c in s:
        #o = ord(c)
    index[0] = hashlib.sha224(index[0]).hexdigest ## This needs integer hash
    index[1] = hashlib.sha224(index[1]).hexdigest ## same as above 
</snippet></ROW><ROW><id>9027037</id><snippet>index[0]</snippet></ROW><ROW><id>9027037</id><snippet>index[1]</snippet></ROW><ROW><id>9027037</id><snippet>hashlib.sha224(index[0]).hexdigest</snippet></ROW><ROW><id>9027037</id><snippet>hashlib.sha224(index[0]).hexdigest()</snippet></ROW><ROW><id>9027037</id><snippet>int(x, 16)</snippet></ROW><ROW><id>9027037</id><snippet>&amp; 65535</snippet></ROW><ROW><id>9027037</id><snippet>&gt;&gt; 16</snippet></ROW><ROW><id>9027037</id><snippet>&amp; 65535</snippet></ROW><ROW><id>9027037</id><snippet>    return [x % m for x in index]

class BloomFilter(object):
    def __init__(self):
        self.bitarray = [0] * m

    def add(self, s):
        for x in hashes(s):
            self.bitarray[x] = 1
        #print self.bitarray
    def query(self, s):
        return all(self.bitarray[x] == 1 for x in hashes(s))

shazib=BloomFilter()
shazib.add('192.168.0.1')
print shazib.query('192.168.0.1')
</snippet></ROW><ROW><id>9027047</id><snippet>sh</snippet></ROW><ROW><id>9027047</id><snippet>'sh'</snippet></ROW><ROW><id>9027047</id><snippet>'bash'</snippet></ROW><ROW><id>9027047</id><snippet>sh</snippet></ROW><ROW><id>9027047</id><snippet>bash</snippet></ROW><ROW><id>9027047</id><snippet>shFile</snippet></ROW><ROW><id>9027047</id><snippet>decoder__</snippet></ROW><ROW><id>9027047</id><snippet>/bin/echo sh /export/hierMultiStream_audSpec_direct/tempScripts/decoder__20_eval.sh
/bin/echo sh /export/hierMultiStream_audSpec_direct/tempScripts/decoder__5_eval.sh
/bin/echo sh /export/hierMultiStream_audSpec_direct/tempScripts/decoder__20_eval.sh
/bin/echo sh /export/hierMultiStream_audSpec_direct/tempScripts/decoder__15_eval.sh
/bin/echo sh /export/hierMultiStream_audSpec_direct/tempScripts/decoder__10_eval.sh
echo "Done"
</snippet></ROW><ROW><id>9027157</id><snippet>od</snippet></ROW><ROW><id>9027157</id><snippet>setserial</snippet></ROW><ROW><id>9027187</id><snippet>parameter</snippet></ROW><ROW><id>9027187</id><snippet>parameter = pow("5", 5)</snippet></ROW><ROW><id>9027187</id><snippet>TypeError</snippet></ROW><ROW><id>9027187</id><snippet>def function(callable, args=()):
    try:
        callable(*args)
    except:
        print('Ops!')
</snippet></ROW><ROW><id>9027187</id><snippet>&gt;&gt;&gt; function(pow, args=("5", 5))
Ops!
</snippet></ROW><ROW><id>9027187</id><snippet>&gt;&gt;&gt; try:
...     param = pow('5', 5)
... except:
...     param = 10
... 
&gt;&gt;&gt; param
10
&gt;&gt;&gt; function(param)
</snippet></ROW><ROW><id>9027187</id><snippet>pow</snippet></ROW><ROW><id>9027187</id><snippet>function</snippet></ROW><ROW><id>9027187</id><snippet>try-except</snippet></ROW><ROW><id>9027517</id><snippet>import pytz, datetime, time
import os

originalTimeStamp = os.stat("/tmp/file-from-us-west-coast").st_mtime

# prints e.g. 2010-03-31 13:01:18
print "original:",datetime.datetime.fromtimestamp(originalTimeStamp)

# re-interpret 
originalTimeZone = "America/Los_Angeles"
targetTimeZone   = "Europe/Paris"

newTimeStamp = pytz.timezone(originalTimeZone).localize(datetime.datetime.fromtimestamp(originalTimeStamp)).astimezone(pytz.timezone(targetTimeZone))

# prints e.g. 2010-03-31 22:01:18+02:00
print "new:     ",newTimeStamp

# convert back to seconds since epoch
newTimeStamp = time.mktime(newTimeStamp.timetuple())

# print time difference in hours
print (newTimeStamp - originalTimeStamp) / 3600.0
</snippet></ROW><ROW><id>9027517</id><snippet>from datetime import *
from pytz import timezone
import pytz

[...]

if (not isinstance(pacificTime, int)):
    pacificTime = int(pacificTime)
originalTimeZone = "America/Los_Angeles"
print datetime.fromtimestamp(pacificTime, pytz.timezone(originalTimeZone))
</snippet></ROW><ROW><id>9027636</id><snippet>(?&lt;!\d),(?! )|(?&lt;=\d),(?![\d ])
</snippet></ROW><ROW><id>9027636</id><snippet>&gt;&gt;&gt; re.split(r'(?&lt;!\d),(?! )|(?&lt;=\d),(?![\d ])', s)
['2-Methyl-3-phythyl-1,4-naphthochinon', 'Vitamin, K1', 'Antihemorrhagic vitamin']
</snippet></ROW><ROW><id>9027636</id><snippet> (?&lt;!\d),   # match a comma that is not preceeded by a digit...
 (?! )      # ... as long as it is not followed by a space
|           # OR
 (?&lt;=\d),   # match a comma that is preceeded by a digit...
 (?![\d ])  # ... as long as it is not followed by a digit or a space
</snippet></ROW><ROW><id>9027636</id><snippet>(?&lt;=\d)</snippet></ROW><ROW><id>9027636</id><snippet>(?&lt;!\d),(?! )|,(?![\d ])
</snippet></ROW><ROW><id>9027725</id><snippet>from collections import defaultdict

places_by_state = defaultdict(list)
for place in Place.objects.all():
   places_by_state[place.state].append(place)
list_of_places_by_state = places_by_state.values()
</snippet></ROW><ROW><id>9027747</id><snippet>width</snippet></ROW><ROW><id>9027747</id><snippet>height</snippet></ROW><ROW><id>9027747</id><snippet>i</snippet></ROW><ROW><id>9027747</id><snippet>j</snippet></ROW><ROW><id>9027747</id><snippet>j*width</snippet></ROW><ROW><id>9027747</id><snippet>i*height</snippet></ROW><ROW><id>9027747</id><snippet>j*columns</snippet></ROW><ROW><id>9027747</id><snippet>i*rows</snippet></ROW><ROW><id>9027751</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulStoneSoup
&gt;&gt;&gt; xml = """&lt;ns0:feed ns1:etag="W/"LIESANDCRAPfyt7I2A9WhHERE."" xmlns:ns4="http://www.w3.org/2007/app" xmlns:ns3="http://schemas.google.com/contact/2008" xmlns:ns2="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns0="http://www.w3.org/2005/Atom"&gt;
...             &lt;ns0:updated&gt;2012-01-25T14:52:12.867Z&lt;/ns0:updated&gt;
...             &lt;ns0:category term="http://schemas.google.com/contact/2008#profile" scheme="http://schemas.google.com/g/2005#kind"/&gt;
...             &lt;ns0:id&gt;domain.com&lt;/ns0:id&gt;
...             &lt;ns0:generator version="1.0" uri="http://www.google.com/m8/feeds"&gt;Contacts&lt;/ns0:generator&gt;
...             &lt;ns0:author&gt;
...                 &lt;ns0:name&gt;domain.com&lt;/ns0:name&gt;
...             &lt;/ns0:author&gt;
...             &lt;ns0:link type="text/html" rel="alternate" href="http://www.google.com/"/&gt;
...             &lt;ns0:link type="application/atom+xml" rel="http://schemas.google.com/g/2005#feed" href="https://www.google.com/m8/feeds/profiles/domain/domain.com/full"/&gt;
...             &lt;ns0:link type="application/atom+xml" rel="http://schemas.google.com/g/2005#batch" href="https://www.google.com/m8/feeds/profiles/domain/domain.com/full/batch"/&gt;
...             &lt;ns0:link type="application/atom+xml" rel="self" href="https://www.google.com/m8/feeds/profiles/domain/domain.com/full?max-results=300"/&gt;
...             &lt;ns2:startIndex&gt;1&lt;/ns2:startIndex&gt;
...             &lt;ns2:itemsPerPage&gt;300&lt;/ns2:itemsPerPage&gt;
...             &lt;ns0:entry ns1:etag=""CRAPQR4KTit7I2A4""&gt;
...                 &lt;ns0:category term="http://schemas.google.com/contact/2008#profile" scheme="http://schemas.google.com/g/2005#kind"/&gt;
...                 &lt;ns0:id&gt;http://www.google.com/m8/feeds/profiles/domain/domain.com/full/nperson&lt;/ns0:id&gt;
...                 &lt;ns1:name&gt;
...                     &lt;ns1:familyName&gt;Person&lt;/ns1:familyName&gt;
...                     &lt;ns1:fullName&gt;Name Person&lt;/ns1:fullName&gt;
...                     &lt;ns1:givenName&gt;Name&lt;/ns1:givenName&gt;
...                 &lt;/ns1:name&gt;
...                 &lt;ns0:updated&gt;2012-01-25T14:52:13.081Z&lt;/ns0:updated&gt;
...                 &lt;ns1:organization rel="http://schemas.google.com/g/2005#work" primary="true"&gt;
...                     &lt;ns1:orgTitle&gt;JobField&lt;/ns1:orgTitle&gt;
...                     &lt;ns1:orgDepartment&gt;DepartmentField&lt;/ns1:orgDepartment&gt;
...                     &lt;ns1:orgName&gt;CompanyField&lt;/ns1:orgName&gt;
...                 &lt;/ns1:organization&gt;
...                 &lt;ns3:status indexed="true"/&gt;
...                 &lt;ns0:title&gt;Name Person&lt;/ns0:title&gt;
...                 &lt;ns0:link type="image/*" rel="http://schemas.google.com/contacts/2008/rel#photo" href="https://www.google.com/m8/feeds/photos/profile/domain.com/nperson"/&gt;
...                 &lt;ns0:link type="application/atom+xml" rel="self" href="https://www.google.com/m8/feeds/profiles/domain/domain.com/full/nperson"/&gt;
...                 &lt;ns0:link type="application/atom+xml" rel="edit" href="https://www.google.com/m8/feeds/profiles/domain/domain.com/full/nperson"/&gt;
...                 &lt;ns1:email rel="http://schemas.google.com/g/2005#other" address="nperson@gapps.domain.com"/&gt;
...                 &lt;ns1:email rel="http://schemas.google.com/g/2005#other" primary="true" address="nperson@domain.com"/&gt;
...                 &lt;ns4:edited&gt;2012-01-25T14:52:13.081Z&lt;/ns4:edited&gt;
...             &lt;/ns0:entry&gt;
...             &lt;ns0:title&gt;domain.com's Profiles&lt;/ns0:title&gt;
...         &lt;/ns0:feed&gt;"""
</snippet></ROW><ROW><id>9027751</id><snippet>&gt;&gt;&gt; soup = BeautifulStoneSoup(xml, selfClosingTags=['ns0:category','ns3:status', 'ns0:link','ns1:email'])
&gt;&gt;&gt; a = soup.findAll('ns0:entry')
&gt;&gt;&gt; a[0].find('ns1:familyname')
&lt;ns1:familyname&gt;Person&lt;/ns1:familyname&gt;
&gt;&gt;&gt; a[0].find('ns1:familyname').text
u'Person'
&gt;&gt;&gt; a[0].find('ns1:givenname')
&lt;ns1:givenname&gt;Name&lt;/ns1:givenname&gt;
&gt;&gt;&gt; a[0].find('ns1:givenname').text
u'Name'
&gt;&gt;&gt; for entry in a:
...     print ', '.join([entry.find('ns1:familyname').text, entry.find('ns1:givenname').text, entry.find('ns1:orgtitle').text, entry.find('ns1:orgname').text, entry.find('ns1:email')['address']])
...
Person, Name, JobField, CompanyField, nperson@gapps.domain.com
</snippet></ROW><ROW><id>9027819</id><snippet>get</snippet></ROW><ROW><id>9027819</id><snippet>&gt;&gt;&gt; soup2 = [option.get('value') for option in soup.findAll('option')]
&gt;&gt;&gt; soup2
['ufs_munic', 'ext_paises', '5', '6', '7', '8', '9', ...]
</snippet></ROW><ROW><id>9027819</id><snippet>option.get('value', 'There is no value!')
</snippet></ROW><ROW><id>9027898</id><snippet>x[startAt:endBefore:skip]
</snippet></ROW><ROW><id>9027898</id><snippet>skip = 2</snippet></ROW><ROW><id>9027898</id><snippet>startAt</snippet></ROW><ROW><id>9027898</id><snippet>endBefore</snippet></ROW><ROW><id>9027898</id><snippet>x = range(100)
</snippet></ROW><ROW><id>9027898</id><snippet>x[::2]
x[::3]
x[10:40:6]
</snippet></ROW><ROW><id>9028003</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; for frame_tuple in inspect.stack():
...    print frame_tuple[0].f_globals.keys()
... 
['frame_tuple', '__builtins__', 'inspect', '__package__', '__name__', 'readline', 'rlcompleter', '__doc__']
</snippet></ROW><ROW><id>9028003</id><snippet>.f_back</snippet></ROW><ROW><id>9028031</id><snippet>import argparse
class CustomAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if not 'ordered_args' in namespace:
            setattr(namespace, 'ordered_args', [])
        previous = namespace.ordered_args
        previous.append((self.dest, values))
        setattr(namespace, 'ordered_args', previous)
parser = argparse.ArgumentParser()
parser.add_argument('--test1', action=CustomAction)
parser.add_argument('--test2', action=CustomAction)
</snippet></ROW><ROW><id>9028031</id><snippet>&gt;&gt;&gt; parser.parse_args(['--test2', '2', '--test1', '1'])
Namespace(ordered_args=[('test2', '2'), ('test1', '1')], test1=None, test2=None)
</snippet></ROW><ROW><id>9028063</id><snippet>import</snippet></ROW><ROW><id>9028063</id><snippet>function.py</snippet></ROW><ROW><id>9028063</id><snippet>def func(a, b):
    return a+b
</snippet></ROW><ROW><id>9028063</id><snippet>main.py</snippet></ROW><ROW><id>9028063</id><snippet>import function

if __name__ == "__main__":
    ans = function.func(2, 3)
    print ans
</snippet></ROW><ROW><id>9028064</id><snippet>import random

class Human:
  def __init__(self):
    self.name = 'Human'
    self.wins = []
    self.losses = []
    self.bets = []
    self.total = 0

class Computer:
  def __init__(self):
    self.name = 'Computer'
    self.wins = []
    self.losses = []
    self.bets = []
    self.total = 0

class Game:
  def __init__(self):
    self.rolls = []
    self.currentPlayer = None

  def roll(self):
    self.rolls.append(random.randint(1, 6))

if __name__ == '__main__':
  human = Human()
  computer = Computer()
  game = Game()

  game.roll()
  print games.rolls
</snippet></ROW><ROW><id>9028236</id><snippet>-p /path/to/python-2.7.binary</snippet></ROW><ROW><id>9028236</id><snippet>pip</snippet></ROW><ROW><id>9028246</id><snippet>.xsd</snippet></ROW><ROW><id>9028246</id><snippet>.wsdl</snippet></ROW><ROW><id>9028246</id><snippet>.xsd</snippet></ROW><ROW><id>9028246</id><snippet>Client</snippet></ROW><ROW><id>9028246</id><snippet>file://</snippet></ROW><ROW><id>9028246</id><snippet>from suds.client import Client

a = Client(&lt;url_to_wsdl_file&gt;)
a.service.Method()
</snippet></ROW><ROW><id>9028432</id><snippet>chr(ord('\\') + 2</snippet></ROW><ROW><id>9028432</id><snippet>p.sub</snippet></ROW><ROW><id>9028432</id><snippet>p = re.compile(r'(\w)')
test = p.sub(lambda m: chr(ord(m.group(1)) + 2), text)
print test
</snippet></ROW><ROW><id>9028432</id><snippet>maketrans</snippet></ROW><ROW><id>9028432</id><snippet>import string

shift = 2

t = string.maketrans(string.ascii_lowercase, string.ascii_lowercase[shift:] +
                                             string.ascii_lowercase[:shift])
string.translate(text, t)
</snippet></ROW><ROW><id>9028893</id><snippet># ...
header_form == ItemForm(data=request.POST,instance=item)
details_form == ItemInfoForm(data=request.POST, instance=item_info)
</snippet></ROW><ROW><id>9028899</id><snippet>ID</snippet></ROW><ROW><id>9028899</id><snippet>#tab{color: #000000 ;background-color: #ff0000    } 
/* ... */
#{color: #000000 ;background-image: url(E:/ChemCalc ULTIMATE/ChemCalc ULTIMATE/Texture Files/Koala.jpg);background-repeat: repeat-xy;  } #
/* ... */
#Reaction_Element_Holder{color: #000000 ;background-image: url(E:/ChemCalc ULTIMATE/ChemCalc ULTIMATE/Texture Files/Penguins.jpg);background-repeat: repeat-xy; }
</snippet></ROW><ROW><id>9028899</id><snippet>ID</snippet></ROW><ROW><id>9028899</id><snippet>Parse Error  Lexical error at line 1, column 2. Encountered: "{" (123), after : "#"
</snippet></ROW><ROW><id>9028899</id><snippet>#{ color: blue; }
body { color: red; }
</snippet></ROW><ROW><id>9029001</id><snippet>username.yoursite.com</snippet></ROW><ROW><id>9029001</id><snippet>yoursite.com</snippet></ROW><ROW><id>9029001</id><snippet>request.META['SERVER_NAME'].lsplit('.')[0]</snippet></ROW><ROW><id>9029482</id><snippet>filter</snippet></ROW><ROW><id>9029482</id><snippet>def passed(item):
    try:
       return int(item) &gt; 28
    except ValueError:
       return False
result = [filter(passed, item) for item in a] 
</snippet></ROW><ROW><id>9029645</id><snippet>N</snippet></ROW><ROW><id>9029645</id><snippet>p</snippet></ROW><ROW><id>9029645</id><snippet>p</snippet></ROW><ROW><id>9029645</id><snippet>N</snippet></ROW><ROW><id>9029645</id><snippet>import numpy as np
a = np.arange(256)
p = a[:,np.newaxis,np.newaxis] * a[np.newaxis,:,np.newaxis] * a[np.newaxis,np.newaxis,:] 
N = p.flatten()
</snippet></ROW><ROW><id>9029645</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')
</snippet></ROW><ROW><id>9029645</id><snippet>X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)  # &lt;-- returns a 2D grid from initial 1D arrays
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)
</snippet></ROW><ROW><id>9029645</id><snippet>surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1)
plt.show()
</snippet></ROW><ROW><id>9029645</id><snippet>surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.jet)
plt.show()
</snippet></ROW><ROW><id>9029645</id><snippet>colortuple = ('y', 'k')  # only use two colors: yellow and black
xlen, ylen = X.shape  # get length of 
colors = np.empty(X.shape, dtype=str)  # make a 2D array of strings
for i in range(xlen):
    for j in range(ylen):
        index = (i + j) % 2  # alternating 0's and 1's
        colors[i,j] = colortuple[index]
surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, 
        facecolors=colors)
</snippet></ROW><ROW><id>9029645</id><snippet>xlen, ylen = X.shape
colors = np.zeros((xlen,ylen,3))
jspan = np.linspace(0., 1., ylen)
ispan = np.linspace(0., 1., xlen)
for i in range(xlen):
    colors[i,:,0] = jspan
for j in range(ylen):
    colors[:,j,1] = ispan

surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, facecolors=colors,)
</snippet></ROW><ROW><id>9029774</id><snippet>sys.stdout</snippet></ROW><ROW><id>9029774</id><snippet>.write</snippet></ROW><ROW><id>9029774</id><snippet>std::cout</snippet></ROW><ROW><id>9029774</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>9029774</id><snippet>std::cout &lt;&lt; frame.tostring();
</snippet></ROW><ROW><id>9029774</id><snippet>&lt;iostream&gt;</snippet></ROW><ROW><id>9029774</id><snippet>cout</snippet></ROW><ROW><id>9029774</id><snippet>std::ostream</snippet></ROW><ROW><id>9029774</id><snippet>ostream</snippet></ROW><ROW><id>9029774</id><snippet>printf</snippet></ROW><ROW><id>9029774</id><snippet>puts</snippet></ROW><ROW><id>9029774</id><snippet>&lt;cstdio&gt;</snippet></ROW><ROW><id>9029774</id><snippet>std::printf("%s", frame.tostring().c_str());
std::puts(frame.tostring().c_str()); // also writes '\n' afterward
</snippet></ROW><ROW><id>9029774</id><snippet>tostring</snippet></ROW><ROW><id>9029774</id><snippet>std::string</snippet></ROW><ROW><id>9029774</id><snippet>char</snippet></ROW><ROW><id>9029774</id><snippet>string</snippet></ROW><ROW><id>9029774</id><snippet>c_str</snippet></ROW><ROW><id>9029774</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>9029799</id><snippet>for s in ans:
  f.write(s)
</snippet></ROW><ROW><id>9030187</id><snippet>for item in folderContents:
    Beginn = int(item.Beginn.strftime('%Y'))
    Ende = int(item.Ende.strftime('%Y'))

    for year in range(Beginn, Ende + 1):
        print year
</snippet></ROW><ROW><id>9030358</id><snippet>def the_decorator(arg1, arg2):

    def _method_wrapper(view_method):

        def _arguments_wrapper(self, request, *args, **kwargs) :
            """
            Wrapper with arguments to invoke the method
            """

            #do something with arg1 and arg2

            return view_method(self, request, *args, **kwargs)

        return _arguments_wrapper

    return _method_wrapper
</snippet></ROW><ROW><id>9030358</id><snippet>@the_decorator("an_argument", "another_argument")
def event_dashboard(request, event_slug):
</snippet></ROW><ROW><id>9030372</id><snippet>import os, tempfile, shutil, subprocess

temp_dir = tempfile.mkdtemp()
filename = os.path.join(temp_dir, 'file.txt')
text = '&lt;text&gt;'
os.mkfifo(filename)

try:
    subprocess.Popen(('segment.sh', 'ctf', filename, 'utf-8', '0'))
    with open(filename, 'w') as f:
        f.write(text)
finally:
    shutil.rmtree(temp_dir)
</snippet></ROW><ROW><id>9030564</id><snippet>#!/usr/bin/env python
import urllib2
from contextlib import closing 

import regex # pip install regex
from BeautifulSoup import BeautifulSoup

with closing(urllib2.urlopen(URL)) as page:
     soup = BeautifulSoup(page)
     print soup(text=regex.compile(ur'(?fi)\L&lt;keywords&gt;',
                                   keywords=['your', 'keywords', 'go', 'here']))
</snippet></ROW><ROW><id>9030564</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import regex
from BeautifulSoup import BeautifulSoup, Comment

html = u'''&lt;div attr="PoSt in attribute should not be found"&gt;
&lt;!-- it must not find post inside a comment either --&gt;
&lt;ol&gt; &lt;li&gt; tag names must not match
&lt;li&gt; Post will be found
&lt;li&gt; the same with post
&lt;li&gt; and poﬆ
&lt;li&gt; and poﬅ
&lt;li&gt; this is ignored
&lt;/ol&gt;
&lt;/div&gt;'''

soup = BeautifulSoup(html)

# remove comments
comments = soup.findAll(text=lambda t: isinstance(t, Comment))
for comment in comments: comment.extract()

# find text with keywords (case-insensitive)
print ''.join(soup(text=regex.compile(ur'(?fi)\L&lt;opts&gt;', opts=['post', 'li'])))
# compare it with '.lower()'
print '.lower():'
print ''.join(soup(text=lambda t: any(k in t.lower() for k in ['post', 'li'])))
# or exact match
print 'exact match:'
print ''.join(soup(text=' the same with post\n'))
</snippet></ROW><ROW><id>9030564</id><snippet> Post will be found
 the same with post
 and poﬆ
 and poﬅ

.lower():
 Post will be found
 the same with post

exact match:
 the same with post
</snippet></ROW><ROW><id>9030589</id><snippet>import wx

from time import *

class MyFrame(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, wx.DefaultPosition, (550, 350))
        self.second_zones = []
        zone_list = ['CET', 'GMT', 'MSK', 'EST', 'PST', 'EDT']


        panel = wx.Panel(self, -1)
        self.time_zones = wx.ListBox(panel, -1, (10,100), (170, 130), zone_list, wx.LB_SINGLE)
        self.time_zones.SetSelection(0)

        self.time_zones2 = wx.ListBox(panel, -1, (10,200), (170, 400), '',wx.LB_SINGLE)

        self.Bind(wx.EVT_LISTBOX, self.OnSelectFirst, self.time_zones)
        self.Bind(wx.EVT_LISTBOX, self.OnSelectSecond, self.time_zones2)


    def OnSelectFirst(self, event):
        index = event.GetSelection()
        time_zone = str(self.time_zones.GetString(index))
        self.second_zones.append(time_zone)
        self.time_zones2.Set(self.second_zones)


    def OnSelectSecond(self, event):
        index = event.GetSelection()
        time_zone = str(self.time_zones2.GetString(index))
        self.second_zones.remove(time_zone)
        self.time_zones2.Set(self.second_zones)        


class MyApp(wx.App):
    def OnInit(self):
        frame = MyFrame(None, -1, 'listbox.py')
        frame.Centre()
        frame.Show(True)
        return True

app = MyApp(0)
app.MainLoop()
</snippet></ROW><ROW><id>9030621</id><snippet>.py</snippet></ROW><ROW><id>9030621</id><snippet>.pyc</snippet></ROW><ROW><id>9030621</id><snippet>from mako.template import Template
Template(filename='template.mako', module_directory='.')
</snippet></ROW><ROW><id>9030621</id><snippet>template.mako</snippet></ROW><ROW><id>9030621</id><snippet>template.mako.py</snippet></ROW><ROW><id>9030621</id><snippet>template.mako.pyc</snippet></ROW><ROW><id>9030621</id><snippet>pyramid.mako_templating.MakoLookupRenderer.__call__</snippet></ROW><ROW><id>9030621</id><snippet>TemplateLookup</snippet></ROW><ROW><id>9030621</id><snippet>pyramid.mako_templating.renderer_factory</snippet></ROW><ROW><id>9030621</id><snippet>mako.module_directory</snippet></ROW><ROW><id>9030621</id><snippet>mako</snippet></ROW><ROW><id>9030621</id><snippet>mako.module_directory</snippet></ROW><ROW><id>9030621</id><snippet>None</snippet></ROW><ROW><id>9030621</id><snippet>TemplateLookup</snippet></ROW><ROW><id>9030621</id><snippet>cache_impl</snippet></ROW><ROW><id>9030621</id><snippet>beaker</snippet></ROW><ROW><id>9030644</id><snippet>divmod</snippet></ROW><ROW><id>9030644</id><snippet>&gt;&gt;&gt; divmod(5, 2)
(2, 1)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9030644</id><snippet>&gt;&gt;&gt; divmod(12345, 6)
(2057, 3)
</snippet></ROW><ROW><id>9030644</id><snippet>&gt;&gt;&gt; divmod(12345, 5)
(2469, 0)
</snippet></ROW><ROW><id>9030644</id><snippet>def chunk_sizes(filesize, num_chunks):
    d, r = divmod(filesize, num_chunks)
    result = [d] * num_chunks
    result[-1] += r
    return result
</snippet></ROW><ROW><id>9031063</id><snippet>raw_input</snippet></ROW><ROW><id>9031063</id><snippet>eventlet</snippet></ROW><ROW><id>9031063</id><snippet>threading</snippet></ROW><ROW><id>9031063</id><snippet>eventlet</snippet></ROW><ROW><id>9031063</id><snippet>threading</snippet></ROW><ROW><id>9031063</id><snippet>eventlet.monkey_patch()
</snippet></ROW><ROW><id>9031063</id><snippet>eventlet.monkey_patch(os=True,
                     select=True,
                     socket=True,
                     thread=False,
                     time=True)
</snippet></ROW><ROW><id>9031063</id><snippet>thread</snippet></ROW><ROW><id>9031063</id><snippet>True</snippet></ROW><ROW><id>9031063</id><snippet>thread</snippet></ROW><ROW><id>9031063</id><snippet>threading</snippet></ROW><ROW><id>9031063</id><snippet>Queue</snippet></ROW><ROW><id>9031063</id><snippet>threading</snippet></ROW><ROW><id>9031063</id><snippet>raw_input</snippet></ROW><ROW><id>9031063</id><snippet>def raw_input(message):
    sys.stdout.write(message)

    select.select([sys.stdin], [], [])
    return sys.stdin.readline()
</snippet></ROW><ROW><id>9031063</id><snippet>sys.stdin</snippet></ROW><ROW><id>9031331</id><snippet>-</snippet></ROW><ROW><id>9031331</id><snippet>prefix_chars</snippet></ROW><ROW><id>9031331</id><snippet>#!/usr/bin/python
import argparse

parser = argparse.ArgumentParser(prefix_chars='@')
parser.add_argument('@@xlim', nargs = 2,
                  help = 'X axis limits',
                  action = 'store', type = float,
                  default = [-1.e-3, 1.e-3])
print parser.parse_args()
</snippet></ROW><ROW><id>9031331</id><snippet>$ ./blaa.py @@xlim -2.e-3 1e4
Namespace(xlim=[-0.002, 10000.0])
</snippet></ROW><ROW><id>9031331</id><snippet>-</snippet></ROW><ROW><id>9031331</id><snippet>xlim</snippet></ROW><ROW><id>9031331</id><snippet>type</snippet></ROW><ROW><id>9031331</id><snippet>#!/usr/bin/python
import argparse

def two_floats(value):
    values = value.split()
    if len(values) != 2:
        raise argparse.ArgumentError
    values = map(float, values)
    return values

parser = argparse.ArgumentParser()
parser.add_argument('--xlim', 
                  help = 'X axis limits',
                  action = 'store', type=two_floats,
                  default = [-1.e-3, 1.e-3])
print parser.parse_args()
</snippet></ROW><ROW><id>9031331</id><snippet>$ ./blaa.py --xlim "-2e-3 1e4"
Namespace(xlim=[-0.002, 10000.0])
</snippet></ROW><ROW><id>9031378</id><snippet>var=(POINTER(c_char)&lt;em&gt;size)()  /&lt;/em&gt; pointer_to_pointer */</snippet></ROW><ROW><id>9031378</id><snippet>var[index]</snippet></ROW><ROW><id>9031378</id><snippet>void test_fn(char*,char**,unsigned char);</snippet></ROW><ROW><id>9031701</id><snippet>REQUESTS_CA_BUNDLE</snippet></ROW><ROW><id>9031701</id><snippet>CURL_CA_BUNDLE</snippet></ROW><ROW><id>9031701</id><snippet>certifi</snippet></ROW><ROW><id>9031701</id><snippet>REQUESTS_CA_BUNDLE</snippet></ROW><ROW><id>9031701</id><snippet>CURL_CA_BUNDLE</snippet></ROW><ROW><id>9031701</id><snippet>env | egrep "REQUESTS_CA_BUNDLE|CURL_CA_BUNDLE"
</snippet></ROW><ROW><id>9031701</id><snippet>certifi</snippet></ROW><ROW><id>9031701</id><snippet>pip install -U certifi
</snippet></ROW><ROW><id>9031701</id><snippet>verify=False</snippet></ROW><ROW><id>9031701</id><snippet>requests.get</snippet></ROW><ROW><id>9031848</id><snippet>import warnings
warnings.filterwarnings('ignore')
</snippet></ROW><ROW><id>9031848</id><snippet>~/.ipython/profile_default/startup/disable-warnings.py</snippet></ROW><ROW><id>9032466</id><snippet>re.sub(r'[-\s]+', '-',
            unicode(
                re.sub(r'[^\w\s-]', '',
                    unicodedata.normalize('NFKD', string)
                    .encode('ascii', 'ignore'))
                .strip()
                .lower()))
</snippet></ROW><ROW><id>9032466</id><snippet>Text::Unidecode</snippet></ROW><ROW><id>9032840</id><snippet>key_name=bId</snippet></ROW><ROW><id>9032840</id><snippet>B</snippet></ROW><ROW><id>9032840</id><snippet>id</snippet></ROW><ROW><id>9032840</id><snippet>Model.get_by_key_name(list_of_b_ids)
</snippet></ROW><ROW><id>9032840</id><snippet>db.put(list_of_a_models)
</snippet></ROW><ROW><id>9032862</id><snippet>import sys
sys.stdout.flush()
</snippet></ROW><ROW><id>9032965</id><snippet>from MMD.misc import utils
</snippet></ROW><ROW><id>9032965</id><snippet>python</snippet></ROW><ROW><id>9032965</id><snippet>-m</snippet></ROW><ROW><id>9032965</id><snippet>python -m  MMD.actions.DummyAction
</snippet></ROW><ROW><id>9032965</id><snippet>MMD.py</snippet></ROW><ROW><id>9032965</id><snippet>__init__.py</snippet></ROW><ROW><id>9032965</id><snippet>MMD</snippet></ROW><ROW><id>9032965</id><snippet>MMD/
├── runner.py
└──  mmd
    ├── __init__.py
    ├── main.py
    ├── /actions
    │   ├── __init__.py
    │   ├── DummyAction.py
    ├── /misc
    │   ├── __init__.py
    │   ├── utils.py
    └── /triggers
        ├── DummyTrigger.py
        └── __init__.py
</snippet></ROW><ROW><id>9032965</id><snippet>mmd</snippet></ROW><ROW><id>9032965</id><snippet>mmd</snippet></ROW><ROW><id>9032965</id><snippet>from mmd.misc import utils
from mmd.actions import DummyActions
</snippet></ROW><ROW><id>9032965</id><snippet>MMD.py</snippet></ROW><ROW><id>9032965</id><snippet>Main</snippet></ROW><ROW><id>9032965</id><snippet>main.py</snippet></ROW><ROW><id>9032965</id><snippet># main.py
from mmd.misc import utils

class Main:
    def start_session(self):
        utils.function()
        # etc ...
</snippet></ROW><ROW><id>9032965</id><snippet>runner.py</snippet></ROW><ROW><id>9032965</id><snippet># runner.py
from mmd.main import Main

cli = Main()
cli.start_session()
</snippet></ROW><ROW><id>9032965</id><snippet>MMD</snippet></ROW><ROW><id>9032965</id><snippet>python runner.py</snippet></ROW><ROW><id>9032965</id><snippet>runner.py</snippet></ROW><ROW><id>9032965</id><snippet>./runner.py</snippet></ROW><ROW><id>9032965</id><snippet>python -m  mmd.actions.DummyAction
</snippet></ROW><ROW><id>9032965</id><snippet>__init__.py</snippet></ROW><ROW><id>9032965</id><snippet>MMD</snippet></ROW><ROW><id>9032973</id><snippet>(\w*(?:[^a-zA-Z0-9_ \t\n\r\f\v,.?!;:]\w*)+)
</snippet></ROW><ROW><id>9033671</id><snippet>Py_BEGIN_ALLOW_THREADS

// Your expensive computation goes here.

Py_END_ALLOW_THREADS
</snippet></ROW><ROW><id>9034302</id><snippet>GetFileSize</snippet></ROW><ROW><id>9034446</id><snippet>test.txt -&gt; Created: Tuesday, January 24, 2012 2:52 PM
         -&gt; Modified: Tuesday, January 24, 2012 2:52 PM

&gt;&gt;&gt; from shutil import *
&gt;&gt;&gt; copy('test.txt','test1.txt')
</snippet></ROW><ROW><id>9034446</id><snippet>test1.txt -&gt; Created: Today 8:54 AM
          -&gt; Modified: Today 8:54 AM
</snippet></ROW><ROW><id>9034446</id><snippet>&gt;&gt;&gt; copy2('test.txt','test1.txt')
</snippet></ROW><ROW><id>9034446</id><snippet>test1.txt -&gt; Created: Tuesday, January 24, 2012 2:52 PM
          -&gt; Modified: Tuesday, January 24, 2012 2:52 PM
</snippet></ROW><ROW><id>9034446</id><snippet>&gt;&gt;&gt; copy('test.txt','test1.txt')
</snippet></ROW><ROW><id>9034446</id><snippet>test1.txt -&gt; Created: Tuesday, January 24, 2012 2:52 PM
          -&gt; Modified: Today 9:00 AM
</snippet></ROW><ROW><id>9034446</id><snippet>&gt;&gt;&gt; copy('test.txt','test1.txt')
</snippet></ROW><ROW><id>9034446</id><snippet>test1.txt -&gt; Created: Tuesday, January 24, 2012 2:52 PM
          -&gt; Modified: Today 9:01 AM
</snippet></ROW><ROW><id>9034446</id><snippet>copy</snippet></ROW><ROW><id>9034446</id><snippet>copyfile</snippet></ROW><ROW><id>9034446</id><snippet>date created</snippet></ROW><ROW><id>9034446</id><snippet>copyfile</snippet></ROW><ROW><id>9034446</id><snippet>copy</snippet></ROW><ROW><id>9034446</id><snippet>date creation</snippet></ROW><ROW><id>9034755</id><snippet>a=b=c=d=e=f=g=h=""
</snippet></ROW><ROW><id>9034806</id><snippet>$ paster post development.ini /login/attempt email_address=me password=invalid

## It returns this JSON
{"status": "fail", "value": "me is not a registered email address."}
</snippet></ROW><ROW><id>9035114</id><snippet>str(number)[1]</snippet></ROW><ROW><id>9035114</id><snippet>(number // 100)%10</snippet></ROW><ROW><id>9035114</id><snippet>number</snippet></ROW><ROW><id>9035114</id><snippet>int</snippet></ROW><ROW><id>9035114</id><snippet>//</snippet></ROW><ROW><id>9035455</id><snippet>list(set(s))
</snippet></ROW><ROW><id>9035455</id><snippet>unique</snippet></ROW><ROW><id>9035455</id><snippet>set</snippet></ROW><ROW><id>9035455</id><snippet>unique</snippet></ROW><ROW><id>9035455</id><snippet>dict.keys</snippet></ROW><ROW><id>9035508</id><snippet>getattr(my_object, my_str)
</snippet></ROW><ROW><id>9035700</id><snippet>self.data[x*height + y]
</snippet></ROW><ROW><id>9035700</id><snippet>self.data[y*width + x]
</snippet></ROW><ROW><id>9035900</id><snippet>enumerate</snippet></ROW><ROW><id>9035900</id><snippet>sequence = [1, 45, 65, 7]
for i, val in enumerate(sequence):
    print i, val
</snippet></ROW><ROW><id>9035900</id><snippet>0 1
1 45
2 65
3 7
</snippet></ROW><ROW><id>9036034</id><snippet>span</snippet></ROW><ROW><id>9036034</id><snippet>div</snippet></ROW><ROW><id>9036034</id><snippet>allowed_tags</snippet></ROW><ROW><id>9036034</id><snippet>lxml.html.Cleaner</snippet></ROW><ROW><id>9036034</id><snippet>span</snippet></ROW><ROW><id>9036034</id><snippet>div</snippet></ROW><ROW><id>9036113</id><snippet>res = os.system(sys.argv(1)) sys.argv(2)
</snippet></ROW><ROW><id>9036113</id><snippet>sys.argv[1]
sys.argv[2]
</snippet></ROW><ROW><id>9036113</id><snippet>os.system</snippet></ROW><ROW><id>9036113</id><snippet>sys.argv(2)</snippet></ROW><ROW><id>9036113</id><snippet>res = os.system(sys.argv[1], sys.argv[2])
</snippet></ROW><ROW><id>9036472</id><snippet>def ascii_lines(iterable):
    for line in iterable:
        if all(ord(ch) &lt; 128 for ch in line):
            yield line

f = open('somefile.txt')
for line in ascii_lines(f):
    print line
</snippet></ROW><ROW><id>9036490</id><snippet>cookie</snippet></ROW><ROW><id>9036490</id><snippet>'name'</snippet></ROW><ROW><id>9036490</id><snippet>def sendCookie(self):
    cookies = cherrypy.response.cookie

    cookies['cookie1'] = 'Chips Ahoy!'
    cookies['cookie1']['path'] = '/the/red/bag/'
    cookies['cookie1']['comment'] = 'round'

    cookies['cookie2'] = 'Chocolate Chips'
    cookies['cookie2']['path'] = '/the/yellow/bag/'
    cookies['cookie2']['comment'] = 'thousands'

    return 'Cookies are now in your hands.'
setCookie.exposed = True
</snippet></ROW><ROW><id>9036490</id><snippet>morsel</snippet></ROW><ROW><id>9036490</id><snippet>'shape'</snippet></ROW><ROW><id>9036490</id><snippet>'count'</snippet></ROW><ROW><id>9036683</id><snippet>%s</snippet></ROW><ROW><id>9036683</id><snippet>%</snippet></ROW><ROW><id>9036683</id><snippet>my_friends = [0, 2, 666, 123132]
print "select uid1 from friends where uid1 in (%s)" % (",".join(my_friends))
</snippet></ROW><ROW><id>9036683</id><snippet>String.Format()</snippet></ROW><ROW><id>9036683</id><snippet>string formatString = "select uid1, uid2 from friends where uid1 in ({0}) and iud2 in ({1})"
string q = String.Format(formatString, yourReplacement1, yourReplacement2)
</snippet></ROW><ROW><id>9036683</id><snippet>format()</snippet></ROW><ROW><id>9036993</id><snippet>NOW = datetime.now()
last_monday = NOW+relativedelta(years=-1, weekday=MO)
last_sunday = NOW+relativedelta(years=-1, weekday=SU)
</snippet></ROW><ROW><id>9037490</id><snippet>multiprocessing</snippet></ROW><ROW><id>9037490</id><snippet>__main__</snippet></ROW><ROW><id>9037490</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>9037490</id><snippet>from multiprocessing import Process

def foo():
    print 'hello'

p = Process(target=foo)
p.start()
</snippet></ROW><ROW><id>9037490</id><snippet>RuntimeError</snippet></ROW><ROW><id>9037490</id><snippet>if __name__ == '__main__':    
    p = Process(target=foo)
    p.start()
</snippet></ROW><ROW><id>9037618</id><snippet>assoc .py=Python.File
ftype Python.File=c:\Python27\python.exe "%1" %*
</snippet></ROW><ROW><id>9037618</id><snippet>python yourscript.py</snippet></ROW><ROW><id>9037852</id><snippet>import argparse

parser=argparse.ArgumentParser(
    description='''My Description. And what a lovely description it is. ''',
    epilog="""All's well that ends well.""")
parser.add_argument('--foo', type=int, default=42, help='FOO!')
parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')
args=parser.parse_args()
</snippet></ROW><ROW><id>9037852</id><snippet>% test.py -h
</snippet></ROW><ROW><id>9037852</id><snippet>usage: test.py [-h] [--foo FOO] [bar [bar ...]]

My Description. And what a lovely description it is.

positional arguments:
  bar         BAR!

optional arguments:
  -h, --help  show this help message and exit
  --foo FOO   FOO!

All's well that ends well.
</snippet></ROW><ROW><id>9037871</id><snippet>sys.argv</snippet></ROW><ROW><id>9037871</id><snippet>sys-argv[-1]</snippet></ROW><ROW><id>9037871</id><snippet>'#%s' % magic</snippet></ROW><ROW><id>9037871</id><snippet>%</snippet></ROW><ROW><id>9037871</id><snippet>%s</snippet></ROW><ROW><id>9037871</id><snippet>magic</snippet></ROW><ROW><id>9037871</id><snippet>magic</snippet></ROW><ROW><id>9037871</id><snippet>str(magic)</snippet></ROW><ROW><id>9037871</id><snippet>'#--calling-python-from-/bin/sh--'</snippet></ROW><ROW><id>9037871</id><snippet>del sys.argv[-1]</snippet></ROW><ROW><id>9037871</id><snippet>sys.argv</snippet></ROW><ROW><id>9037871</id><snippet>#--calling-python-from-/bin/sh--</snippet></ROW><ROW><id>9037871</id><snippet>sys.argv</snippet></ROW><ROW><id>9037983</id><snippet>any</snippet></ROW><ROW><id>9037983</id><snippet>any</snippet></ROW><ROW><id>9037983</id><snippet>try:
    any
except NameError:
    def any(s):
        for v in s:
            if v:
                return True
        return False
</snippet></ROW><ROW><id>9038186</id><snippet>DailyLogFile</snippet></ROW><ROW><id>9038186</id><snippet>rotate</snippet></ROW><ROW><id>9038186</id><snippet>class DailyCompressedLogFile(DailyLogFile):
    def rotate(self):
        super(DailyCompressedLogFile, self).rotate()
        newpath = "%s.%s" % (self.path, self.suffix(self.lastDate))
        if os.path.exists(newpath):
            # compress newpath here
</snippet></ROW><ROW><id>9038199</id><snippet>break</snippet></ROW><ROW><id>9038199</id><snippet>import itertools
for i,j in itertools.product(range(1, 100), repeat=2):
  break
</snippet></ROW><ROW><id>9038199</id><snippet>return</snippet></ROW><ROW><id>9038199</id><snippet>def _helper():
   for i in range(1,100):
       for j in range(1,100):
           return
_helper()
</snippet></ROW><ROW><id>9038199</id><snippet>class BreakAllTheLoops(BaseException): pass
try:
   for i in range(1,100):
       for j in range(1,100):
           raise BreakAllTheLoops()
except BreakAllTheLoops:
    pass
</snippet></ROW><ROW><id>9038199</id><snippet>for i in range(1,100):
    for j in range(1,100):
       break
    else:
       continue
    break
</snippet></ROW><ROW><id>9038199</id><snippet>exitFlag = False
for i in range(1,100):
    for j in range(1,100):
        exitFlag = True
        break
    if exitFlag:
        break
</snippet></ROW><ROW><id>9038223</id><snippet>brew install pil
</snippet></ROW><ROW><id>9038227</id><snippet>x, y, z = np.mgrid[0:256, 0:256, 0:256]
</snippet></ROW><ROW><id>9038227</id><snippet>y</snippet></ROW><ROW><id>9038227</id><snippet>probability</snippet></ROW><ROW><id>9038227</id><snippet>probability[x[count]]</snippet></ROW><ROW><id>9038227</id><snippet>probability[count]</snippet></ROW><ROW><id>9038227</id><snippet>probability</snippet></ROW><ROW><id>9038482</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; b = ctypes.c_buffer("abc\0def", 16)
&gt;&gt;&gt; b.value
'abc'
&gt;&gt;&gt; b.raw
'abc\x00def\x00\x00\x00\x00\x00\x00\x00\x00\x00'
</snippet></ROW><ROW><id>9038492</id><snippet>i = 0
while i &lt; 1000:
     i = 1000
</snippet></ROW><ROW><id>9038492</id><snippet>for i in range(1000):
     if i == 10:
         break
</snippet></ROW><ROW><id>9038555</id><snippet>self.status.SetLabel</snippet></ROW><ROW><id>9038555</id><snippet>import wx
class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title = title, size = (200, -1))
        self.state = 'Yes'
        self.panel = wx.Panel(self) 
        self.status = wx.StaticText(self.panel, label = self.state,
                               pos = (95, 5), size = (50, 20))
        self.button = wx.Button(self.panel, label = 'Change',
                                pos = (115, 45), size = (50, 20))
        self.Bind(wx.EVT_BUTTON, self.changed, self.button)
    def changed(self, event):
        self.state = 'Yes' if self.state == 'No' else 'No'
        self.status.SetLabel(self.state)             

app = wx.App(False)
frame = MyFrame(None, "Hello")
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>9038741</id><snippet>kvps = {'1': 1, '2': 2}
theCopy = kvps.copy()

# the above is equivalent to:
kvps = {'1': 1, '2': 2}
theCopy = {'1': 1, '2': 2}
</snippet></ROW><ROW><id>9038741</id><snippet>kvps = {'1': aList, '2': bList}
theCopy = {'1': aList, '2': bList}
</snippet></ROW><ROW><id>9038741</id><snippet>kvps = {'1': aList, '2': bList}
theCopy = {'1': [1, 2], '2': [3, 4]}
</snippet></ROW><ROW><id>9038741</id><snippet>dict()</snippet></ROW><ROW><id>9038813</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9038846</id><snippet>def fb_credits_callback(request):
    # parse with your parse function
    # handle request
    return HttpResponse(json.dumps(data))
</snippet></ROW><ROW><id>9038888</id><snippet># ... skipped ...

if __name__ == "__main__":
    for i in range(5):
        unittest.main(exit=False)
</snippet></ROW><ROW><id>9039224</id><snippet>def status(options=[]):
    options.append('new_option')
    return options

print status()
print status()
print status()
</snippet></ROW><ROW><id>9039224</id><snippet>['new_option']
['new_option', 'new_option']
['new_option', 'new_option', 'new_option']
</snippet></ROW><ROW><id>9039286</id><snippet>self.io_loop.add_timeout(time.time() + 8, lambda: self.stop(True))
still_running = self.wait(timeout=9)
self.assert_(still_running)
</snippet></ROW><ROW><id>9039286</id><snippet>self.wait</snippet></ROW><ROW><id>9039286</id><snippet>self.stop</snippet></ROW><ROW><id>9039329</id><snippet>getFoos()
generateFoos()
yieldFoos()
allFoos()
</snippet></ROW><ROW><id>9039329</id><snippet>getActiveFoos()
getGreenFoos()
getFoosMatchingCriteria(someCriteria)
getFoosOverTheNetworkIfTheDatabaseIsntBeingAJerkface()
</snippet></ROW><ROW><id>9039366</id><snippet>getopt</snippet></ROW><ROW><id>9039366</id><snippet>import argparse
parser=argparse.ArgumentParser()
parser.add_argument('-o', help = 'outputfile')
parser.add_argument('-k', help = 'number of clusters')
parser.add_argument('-l', help = 'data to be clustered')
args=parser.parse_args()
print(args)
</snippet></ROW><ROW><id>9039366</id><snippet>test.py -o foo.txt -k 2 -l 2
</snippet></ROW><ROW><id>9039366</id><snippet>Namespace(k='2', l='2', o='foo.txt')
</snippet></ROW><ROW><id>9039396</id><snippet>import subprocess

script = """
for x in 1 2 3 ; do echo $x ; sleep 1 ; done
"""

subprocess.call(['sh', '-c', script])
</snippet></ROW><ROW><id>9039493</id><snippet>[u'\u041a\u0440\u0430\u0441\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0421\u0435\u0440\u0433\u0435\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447']
</snippet></ROW><ROW><id>9039493</id><snippet>" "</snippet></ROW><ROW><id>9039528</id><snippet>import xlwt
custom_fmts = (
    '_(* (#,##0);_(* "-");(@)',
    '_(#0_);(#0);"-"_)', # positive;negative;zero
    '#0;-#0;"-"', # positive;negative;zero
    )
xfs = [xlwt.easyxf('', fmt) for fmt in custom_fmts]
wb = xlwt.Workbook()
ws = wb.add_sheet('x')
for colx, xf in enumerate(xfs):
    for rowx, value in enumerate((1234567, 0, -1234567)):
        ws.write(rowx, colx, value, xf)

wb.save('demo_custom_format.xls') 
</snippet></ROW><ROW><id>9039528</id><snippet>custom formats</snippet></ROW><ROW><id>9039638</id><snippet>3.0</snippet></ROW><ROW><id>9039638</id><snippet>3</snippet></ROW><ROW><id>9039638</id><snippet>media = (grade1 + grade2 + grade3) / 3.0
</snippet></ROW><ROW><id>9039638</id><snippet>media</snippet></ROW><ROW><id>9039967</id><snippet>kcount</snippet></ROW><ROW><id>9039967</id><snippet>'int'</snippet></ROW><ROW><id>9039967</id><snippet>'str'</snippet></ROW><ROW><id>9039967</id><snippet>In [12]: 100 &gt;= '2'
Out[12]: False
</snippet></ROW><ROW><id>9039967</id><snippet>kcount</snippet></ROW><ROW><id>9039967</id><snippet>argparse</snippet></ROW><ROW><id>9039967</id><snippet>import argparse
parser=argparse.ArgumentParser()
parser.add_argument('-k', type = int, help = 'number of clusters')
args=parser.parse_args()
print(type(args.k))   
print(args.k)
</snippet></ROW><ROW><id>9039967</id><snippet>% test.py -k 2
</snippet></ROW><ROW><id>9039967</id><snippet>&lt;type 'int'&gt;
2
</snippet></ROW><ROW><id>9039967</id><snippet>int</snippet></ROW><ROW><id>9039967</id><snippet>str</snippet></ROW><ROW><id>9039979</id><snippet>class Worker(Process):
    def __init__(self, queue):
        super(Worker, self).__init__()
        self.queue= queue

    def run(self):
        print 'Worker started'
        # do some initialization here

        print 'Computing things!'
        for data in iter( self.queue.get, None ):
            # Use data
</snippet></ROW><ROW><id>9039979</id><snippet>request_queue = Queue()
for i in range(4):
    Worker( request_queue ).start()
for data in the_real_source:
    request_queue.put( data )
# Sentinel objects to allow clean shutdown: 1 per worker.
for i in range(4):
    request_queue.put( None ) 
</snippet></ROW><ROW><id>9039992</id><snippet>l = [15, 18, 2, 36, 12, 78, 5, 6, 9]
print reduce(lambda x, y: x + y, l) / len(l)
</snippet></ROW><ROW><id>9039992</id><snippet>sum(l)/len(l)</snippet></ROW><ROW><id>9039992</id><snippet>float(len(l))</snippet></ROW><ROW><id>9039992</id><snippet>len(l)</snippet></ROW><ROW><id>9040143</id><snippet># Creating a form to add an article.
&gt;&gt;&gt; form = ArticleForm()

# Creating a form to change an existing article.
&gt;&gt;&gt; article = Article.objects.get(pk=1)
&gt;&gt;&gt; form = ArticleForm(instance=article)
</snippet></ROW><ROW><id>9040143</id><snippet>person = Person.objects.get(pk=1)
form = PersonForm(instance=person)
</snippet></ROW><ROW><id>9040150</id><snippet>hashlib.sha1(str(1234)).digest()
</snippet></ROW><ROW><id>9040845</id><snippet>Admin</snippet></ROW><ROW><id>9040845</id><snippet>class UserProfile(models.Model):
    notes = models.TextField(db_name="Notes", max_length=15)
    # don't do this!
    class Admin:
        pass
</snippet></ROW><ROW><id>9040845</id><snippet>UserProfileAdmin</snippet></ROW><ROW><id>9040845</id><snippet>/static/admin/</snippet></ROW><ROW><id>9040845</id><snippet>appname_modelname</snippet></ROW><ROW><id>9040845</id><snippet>./manage.py startapp &lt;appname&gt;
</snippet></ROW><ROW><id>9040845</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>9040845</id><snippet>admin.py</snippet></ROW><ROW><id>9040845</id><snippet>utils</snippet></ROW><ROW><id>9040952</id><snippet>itertools.permutations()</snippet></ROW><ROW><id>9040952</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; list(permutations([2, 3, 4]))
[(2, 3, 4), (2, 4, 3), (3, 2, 4), (3, 4, 2), (4, 2, 3), (4, 3, 2)]
</snippet></ROW><ROW><id>9040952</id><snippet>&gt;&gt;&gt; map(list, permutations([2, 3, 4]))
[[2, 3, 4], [2, 4, 3], [3, 2, 4], [3, 4, 2], [4, 2, 3], [4, 3, 2]]
</snippet></ROW><ROW><id>9041071</id><snippet>\bbarbar
</snippet></ROW><ROW><id>9041071</id><snippet>&gt;&gt;&gt; s = u'baRbarus, semibarbarus: qui BARbari sunt, alteres BARBARos non sequuntur!'
&gt;&gt;&gt; re.findall(r'\bbarbar', s, re.IGNORECASE | re.UNICODE)
[u'baRbar', u'BARbar', u'BARBAR']
</snippet></ROW><ROW><id>9041071</id><snippet>\bbarbar</snippet></ROW><ROW><id>9041071</id><snippet>[\A\b]</snippet></ROW><ROW><id>9041071</id><snippet>\A</snippet></ROW><ROW><id>9041071</id><snippet>\b</snippet></ROW><ROW><id>9041071</id><snippet>\b</snippet></ROW><ROW><id>9041071</id><snippet>\A</snippet></ROW><ROW><id>9041071</id><snippet>[\A\b]*</snippet></ROW><ROW><id>9041071</id><snippet>*</snippet></ROW><ROW><id>9041071</id><snippet>*</snippet></ROW><ROW><id>9041071</id><snippet>([\A\b]*)(barbar)</snippet></ROW><ROW><id>9041071</id><snippet>re.findall()</snippet></ROW><ROW><id>9041146</id><snippet>all</snippet></ROW><ROW><id>9041146</id><snippet>return x != 0 and 10 / x == 2 and True and False and 7
</snippet></ROW><ROW><id>9041146</id><snippet>return all(f() for f in [lambda: x != 0, lambda: 10 / x == 2, 
                         lambda: True, lambda: False, lambda: 7])
</snippet></ROW><ROW><id>9041146</id><snippet>all</snippet></ROW><ROW><id>9041165</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>9041165</id><snippet>subprocess.call()</snippet></ROW><ROW><id>9041331</id><snippet>ZMQ_LINGER</snippet></ROW><ROW><id>9041475</id><snippet>IMG = ( random((X,Y)) * 255 ).astype('uint8')
</snippet></ROW><ROW><id>9041629</id><snippet>std::map&lt;string, string&gt;</snippet></ROW><ROW><id>9041629</id><snippet>.i</snippet></ROW><ROW><id>9041629</id><snippet>namespace std {
%template(map_string_string) map&lt;string, string&gt;;
}
</snippet></ROW><ROW><id>9041629</id><snippet>void foo(const std::map&lt;string, string&gt; &amp;arg);
</snippet></ROW><ROW><id>9041629</id><snippet>map_string_string({ 'a' : 'b' })
</snippet></ROW><ROW><id>9041629</id><snippet>foo(map_string_string({ 'a' : 'b' }))
</snippet></ROW><ROW><id>9041629</id><snippet>// test.i
%module test

%include "std_string.i"
%include "std_map.i"

namespace std {
    %template(map_string_string) map&lt;string, string&gt;;
}

void foo(const std::map&lt;std::string, std::string&gt; &amp;val);

%{
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;map&gt;

using namespace std;
void
foo(const map&lt;string, string&gt; &amp;val)
{
    map&lt;string, string&gt;::const_iterator i = val.begin();
    map&lt;string, string&gt;::const_iterator end = val.end();
    while (i != end) {
        cout &lt;&lt; i-&gt;first &lt;&lt; " : " &lt;&lt; i-&gt;second &lt;&lt; endl;
        ++i;
    }
}

%}
</snippet></ROW><ROW><id>9041629</id><snippet>#run_test.py
import test

x = test.map_string_string({ 'a' : 'b', 'c' : 'd' })
test.foo(x)
</snippet></ROW><ROW><id>9041629</id><snippet>% swig -python -c++ test.i
% g++ -fPIC -shared -I/usr/include/python2.7  -o _test.so test_wrap.cxx
% python run_test.py
a : b
c : d
</snippet></ROW><ROW><id>9041720</id><snippet>p_trash</snippet></ROW><ROW><id>9041720</id><snippet>def p_junk(p):
    '''statement | JUNK statement'''
</snippet></ROW><ROW><id>9041720</id><snippet>def p_statements(p):
    '''statements | statement statements
                  | empty'''
</snippet></ROW><ROW><id>9042081</id><snippet>while 1: # infinite loop
    name = raw_input("Name: ")
    if name == "":
        print "Ops! Retry"
    else:
        print "Hello", name
        break  # this will break the loop
</snippet></ROW><ROW><id>9042081</id><snippet>class Programs:

    def ask(self):
        while 1: # infinite loop
            name = raw_input("Name: ")
            if name == "":
                print "Ops! Retry"
            else:
                print "Hello", name
                break  # this will break the loop
</snippet></ROW><ROW><id>9042081</id><snippet>Program</snippet></ROW><ROW><id>9042081</id><snippet>class Programs:

    def __init__(self):  # class constructur (called at creation time)
        self.name = ""   # the default name is the empty string

    def ask(self):
        while 1: # infinite loop
            name = raw_input("Name: ")
            if name == "":
                print "Ops! Retry"
            else:
                print "Hello", name
                break  # this will break the loop

        self.name = name  # assign to self.name the value name
</snippet></ROW><ROW><id>9042081</id><snippet>&gt;&gt;&gt; prog = Programs()
&gt;&gt;&gt; prog.name
''
&gt;&gt;&gt; prog.ask()
Name: Rik
Hello Rik
&gt;&gt;&gt; prog.name
'Rik'
</snippet></ROW><ROW><id>9042081</id><snippet>__init__</snippet></ROW><ROW><id>9042081</id><snippet>prog.name</snippet></ROW><ROW><id>9042081</id><snippet>class Programs:

    def __init__(self):  # class constructur (called at creation time)
        self.name = ""   # the default name is the empty string

    def ask(self):
        while 1: # infinite loop
            name = raw_input("Name: ")
            if name == "":
                print "Ops! Retry"
            else:
                print "Hello ", name
                break  # this will break the loop

        self.name = name  # assign to self.name the value name


if __name__ == '__main__':
    prog = Programs()
    prog.ask()
    raw_input("\n\nPress enter to exit.")
</snippet></ROW><ROW><id>9042081</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>9042439</id><snippet>wave.open</snippet></ROW><ROW><id>9042439</id><snippet>StringIO</snippet></ROW><ROW><id>9042439</id><snippet>WAVE_OUTPUT_FILENAME</snippet></ROW><ROW><id>9042633</id><snippet>import re
from unicodedata import normalize

_punct_re = re.compile(r'[\t !"#$%&amp;\'()*\-/&lt;=&gt;?@\[\\\]^_`{|},.:]+')

def slugify(text, delim=u'-'):
    """Generates an slightly worse ASCII-only slug."""
    result = []
    for word in _punct_re.split(text.lower()):
        word = normalize('NFKD', word).encode('ascii', 'ignore')
        if word:
            result.append(word)
    return unicode(delim.join(result))
</snippet></ROW><ROW><id>9042633</id><snippet>&gt;&gt;&gt; slugify(u'My International Text: åäö')
u'my-international-text-aao'
</snippet></ROW><ROW><id>9042633</id><snippet>&gt;&gt;&gt; slugify(u'My International Text: åäö', delim='_')
u'my_international_text_aao'
</snippet></ROW><ROW><id>9042697</id><snippet>random.choice</snippet></ROW><ROW><id>9042697</id><snippet>import random

def print_mimic(mimic_dict, word):    

    l = []
    for i in range(200):
        word = random.choice(mimic_dict.get(word, ''))
        l.append(word)

    print(' '.join(l))            
</snippet></ROW><ROW><id>9042892</id><snippet>ElementTree</snippet></ROW><ROW><id>9042936</id><snippet>('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')</snippet></ROW><ROW><id>9042936</id><snippet>&gt;&gt;&gt; logging.addLevelName(5, "VERBOSE")
</snippet></ROW><ROW><id>9043414</id><snippet>bisect</snippet></ROW><ROW><id>9043414</id><snippet>&gt;&gt;&gt; def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
...     i = bisect(breakpoints, score)
...     return grades[i]
...
&gt;&gt;&gt; [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]
['F', 'A', 'C', 'C', 'B', 'A', 'A']
</snippet></ROW><ROW><id>9043414</id><snippet>grades</snippet></ROW><ROW><id>9043414</id><snippet>breakpoints</snippet></ROW><ROW><id>9043514</id><snippet>except</snippet></ROW><ROW><id>9043514</id><snippet>traceback</snippet></ROW><ROW><id>9043514</id><snippet>import traceback

try:
    int('string')
except:
    traceback.print_exc()
    print "returning 0"

# will print out an exception and execute everything in the 'except' clause:
# Traceback (most recent call last):
#   File "&lt;stdin&gt;", line 2, in &lt;module&gt;
# ValueError: invalid literal for int() with base 10: 'string'
# returning 0
</snippet></ROW><ROW><id>9043514</id><snippet>from selenium.webdriver.exceptions import NoSuchElementException

try:
    #...
except NoSuchElementException, err:
    #...
</snippet></ROW><ROW><id>9043514</id><snippet>try ... except</snippet></ROW><ROW><id>9043514</id><snippet>product_block = browser.find_element_by_xpath("//div[@class='page_content']");
</snippet></ROW><ROW><id>9043514</id><snippet>product_name = product_block.find_element_by_xpath("//h2[@class='page_title']");
</snippet></ROW><ROW><id>9043716</id><snippet>brew install jpeg
</snippet></ROW><ROW><id>9043716</id><snippet>sudo apt-get install libjpeg62-dev
</snippet></ROW><ROW><id>9043996</id><snippet>QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.showDial)
</snippet></ROW><ROW><id>9043996</id><snippet>self.pushButton.clicked.connect(self.showDial)
</snippet></ROW><ROW><id>9044111</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Range = namedtuple('Range', ['start', 'end'])
&gt;&gt;&gt; r1 = Range(start=datetime(2012, 1, 15), end=datetime(2012, 5, 10))
&gt;&gt;&gt; r2 = Range(start=datetime(2012, 3, 20), end=datetime(2012, 9, 15))
&gt;&gt;&gt; latest_start = max(r1.start, r2.start)
&gt;&gt;&gt; earliest_end = min(r1.end, r2.end)
&gt;&gt;&gt; overlap = (earliest_end - latest_start).days + 1
&gt;&gt;&gt; overlap
52
</snippet></ROW><ROW><id>9044159</id><snippet>import functools

def on_error(self):
    print 'error', self.errorString()
    QTimer.singleShot(2000, functools.partial(self.connectToHost, 'localhost', 9999))
    # 2000 - your prefered reconnect timeout in ms
</snippet></ROW><ROW><id>9044159</id><snippet>@QtCore.pyqtSlot()
def do_reconnect(self):
    print 'Trying to reconnect'
    self.connectToHost('localhost', 9999)

def on_error(self):
    print 'error', self.errorString()
    QtCore.QMetaObject.invokeMethod(self, 'do_reconnect',  QtCore.Qt.QueuedConnection)
</snippet></ROW><ROW><id>9044159</id><snippet>QTimer.singleShot(0, self.do_reconnect) # or any callable, slot is unnecessary 
</snippet></ROW><ROW><id>9044159</id><snippet>QtCore.QMetaObject.invokeMethod</snippet></ROW><ROW><id>9044159</id><snippet>QueuedConnection</snippet></ROW><ROW><id>9044234</id><snippet>imagelist[pagenumber: pagenumber+16]</snippet></ROW><ROW><id>9044339</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</snippet></ROW><ROW><id>9044339</id><snippet>for short_list in grouper(K, long_list):
      # blah
</snippet></ROW><ROW><id>9044343</id><snippet>defaultdict</snippet></ROW><ROW><id>9044343</id><snippet>list1</snippet></ROW><ROW><id>9044343</id><snippet>from collections import defaultdict

list1 = [6, 1, 8, 1, 2]
list2 = ["Mail Opened", "Mail Not Opened", "Mail Opened", "Mail Not Opened", "Mail Not Opened"]

added = defaultdict(int)

for i, k in enumerate(list2):
    added[k] += list1[i]
</snippet></ROW><ROW><id>9044343</id><snippet>defaultdict</snippet></ROW><ROW><id>9044343</id><snippet>0</snippet></ROW><ROW><id>9044343</id><snippet>int</snippet></ROW><ROW><id>9044343</id><snippet>enumerate()</snippet></ROW><ROW><id>9044350</id><snippet>Example</snippet></ROW><ROW><id>9044350</id><snippet>def initUI(self):
    # ...
    scene = QtGui.QGraphicsScene()
    self.scene = scene  # save reference to scene, or it will be destroyed
    scene.addText("Hello, world!")
    # ...
</snippet></ROW><ROW><id>9044350</id><snippet>def anotherFunction(self):     
    self.scene.addText("Another Hello, world!")
</snippet></ROW><ROW><id>9044365</id><snippet>getMibPath()</snippet></ROW><ROW><id>9044365</id><snippet>setMibPath()</snippet></ROW><ROW><id>9044365</id><snippet>getMibSources()</snippet></ROW><ROW><id>9044365</id><snippet>setMibSources()</snippet></ROW><ROW><id>9044365</id><snippet>mibPath = mibBuilder.getMibSources() + (builder.DirMibSource('/path/to/command/mibs'),)
mibBuilder.setMibSources(*mibPath)
mibBuilder.loadModules(
    'MIB-File',
)
</snippet></ROW><ROW><id>9044576</id><snippet>filename</snippet></ROW><ROW><id>9044576</id><snippet># ...
os.mkfifo(filename)

p = Popen([..., filename, ...], stdout=PIPE)
with open(filename, 'w') as f:
     while True:
         indata = read_input() # read text to segment from files/sockets, etc
         f.write(indata)
         # read response from java process
         outdata = p.stdout.readline()# you need to figure out when to stop reading
         write_output(outdata) # write response via files/sockets, etc
</snippet></ROW><ROW><id>9044601</id><snippet>&gt;&gt;&gt; print varBinds
[(ObjectName(1.3.6.1.2.1.1.1.0), OctetString('Example Command Responder'))]
&gt;&gt;&gt; print varBinds[0]
(ObjectName(1.3.6.1.2.1.1.1.0), OctetString('Example Command Responder'))
&gt;&gt;&gt; print varBinds[0][0]
1.3.6.1.2.1.1.1.0
&gt;&gt;&gt; print varBinds[0][1]
Example Command Responder
</snippet></ROW><ROW><id>9044601</id><snippet>&gt;&gt;&gt; print varBinds[0][1]
</snippet></ROW><ROW><id>9044659</id><snippet>templates/search/indexes/profiles/profile_text.txt</snippet></ROW><ROW><id>9044659</id><snippet>{{ object.name }}
{{ object.description }}
</snippet></ROW><ROW><id>9044659</id><snippet>{{ profile.name }}
{{ profile.description }}
</snippet></ROW><ROW><id>9044739</id><snippet>sizer = wx.BoxSizer(wx.VERTICAL)
text_sizer = wx.BoxSizer(wx.HORIZONTAL)
canvas_sizer = wx.BoxSizer(wx.HORIZONTAL)
stat = wx.StaticText(self, -1, "position")

# for testing I used a panel instead of your ogl object
canvas = wx.Panel(self, -1)    
canvas.SetMinSize((-1, 70))     # Needed here to give a min size to panel,
                                # otherwise the panel would not be seen.
                                # The sizer will occupy the minimal 
                                # to hold its contents.

canvas_sizer.Add(canvas, 1, wx.EXPAND, 0)
sizer.Add(canvas_sizer, 0, wx.EXPAND, 0)   # &lt;- note proportion 0 here
text_sizer.Add(stat, 1, wx.EXPAND, 0)
sizer.Add(text_sizer, 1, wx.EXPAND, 0)
self.SetSizer(sizer)
sizer.Fit(self)
self.Layout()
</snippet></ROW><ROW><id>9044742</id><snippet>import multiprocessing as mp
import subprocess
import shlex

def worker():
    proc = subprocess.Popen(shlex.split('''
        /bin/bash -c "grep -P 'foo' /tmp/test.txt"
        '''), stdout = subprocess.PIPE)
    line = proc.stdout.readline()
    print(line)
    # proc.terminate()   # This fixes the problem

if __name__=='__main__':
    N = 6000
    with open('/tmp/test.txt', 'w') as f:
        f.write('bar foo\n'*N)   # &lt;--- Increasing this number causes grep: writing output: Broken pipe
    p = mp.Process(target = worker)
    p.start()
    p.join()
</snippet></ROW><ROW><id>9044742</id><snippet>N</snippet></ROW><ROW><id>9044742</id><snippet>N</snippet></ROW><ROW><id>9044742</id><snippet>grep</snippet></ROW><ROW><id>9044742</id><snippet>grep: writing output: Broken pipe
</snippet></ROW><ROW><id>9044742</id><snippet>proc.terminate()</snippet></ROW><ROW><id>9044742</id><snippet>worker</snippet></ROW><ROW><id>9044964</id><snippet>def sort_by_type():
    maininput = iter("acdre2345ty")

    for char in maininput:
        if char.isalpha():
            print char
        elif char.isdigit():
            number = char
            while True:
                # try/except could take care of the StopIteration exception 
                # when a digit is last in the string
                #
                # try:
                #    char = maininput.next()
                # except StopIteration:
                #    char = ""
                #
                # however using next(iterator, default) is much better:
                #
                char = next(maininput, "")

                if char.isdigit():
                    number += char
                else:
                    break
            print number
            print char
</snippet></ROW><ROW><id>9044964</id><snippet>a
c
d
r
e
2345
t
y
</snippet></ROW><ROW><id>9045161</id><snippet>&gt;&gt;&gt; b = [1,2,3]
&gt;&gt;&gt; a = b
&gt;&gt;&gt; a[:] = []
&gt;&gt;&gt; print b
[]
</snippet></ROW><ROW><id>9045161</id><snippet>&gt;&gt;&gt; b = [1,2,3]
&gt;&gt;&gt; a = b
&gt;&gt;&gt; a = []
&gt;&gt;&gt; print b
[1,2,3]
</snippet></ROW><ROW><id>9045181</id><snippet>'1'</snippet></ROW><ROW><id>9045181</id><snippet>1</snippet></ROW><ROW><id>9045181</id><snippet>In [7]: a=[]

In [8]: a[:]='abc'
</snippet></ROW><ROW><id>9045181</id><snippet>In [9]: a
Out[9]: ['a', 'b', 'c']
</snippet></ROW><ROW><id>9045181</id><snippet>a</snippet></ROW><ROW><id>9045181</id><snippet>In [11]: a[:]=(1,) # single-element tuple

In [12]: a
Out[12]: [1]
</snippet></ROW><ROW><id>9045181</id><snippet>In [17]: a[:]=('abc',)

In [18]: a
Out[18]: ['abc']
</snippet></ROW><ROW><id>9045209</id><snippet>def sieve(n):
    m = (n-1) // 2
    b = [True]*m
    i,p,ps = 0,3,[2]
    while p*p &lt; n:
        if b[i]:
            ps.append(p)
            j = 2*i*i + 6*i + 3
            while j &lt; m:
                b[j] = False
                j = j + 2*i + 3
        i+=1; p+=2
    while i &lt; m:
        if b[i]:
            ps.append(p)
        i+=1; p+=2
    return ps
</snippet></ROW><ROW><id>9045572</id><snippet>https://docs.google.com/uc?export=download&amp;id=DOCIDGOESHERE
</snippet></ROW><ROW><id>9045615</id><snippet>if form.accepts(request, session):
    ....
</snippet></ROW><ROW><id>9045653</id><snippet>p = 1000000007</snippet></ROW><ROW><id>9045653</id><snippet>(a*b)%p</snippet></ROW><ROW><id>9045653</id><snippet>a,b</snippet></ROW><ROW><id>9045653</id><snippet>p</snippet></ROW><ROW><id>9045653</id><snippet>a,b</snippet></ROW><ROW><id>9045653</id><snippet>a,b</snippet></ROW><ROW><id>9045653</id><snippet>a*b</snippet></ROW><ROW><id>9045653</id><snippet>p &lt;&lt; 32</snippet></ROW><ROW><id>9045653</id><snippet>p</snippet></ROW><ROW><id>9045653</id><snippet>a,b</snippet></ROW><ROW><id>9045653</id><snippet>2*p</snippet></ROW><ROW><id>9045653</id><snippet>p</snippet></ROW><ROW><id>9045653</id><snippet>p</snippet></ROW><ROW><id>9045653</id><snippet>a,b</snippet></ROW><ROW><id>9045719</id><snippet>for tag in soup.findAll(attribute=True):
</snippet></ROW><ROW><id>9045719</id><snippet>tag</snippet></ROW><ROW><id>9045719</id><snippet>findAll</snippet></ROW><ROW><id>9045719</id><snippet>import BeautifulSoup
REMOVE_ATTRIBUTES = [
    'lang','language','onmouseover','onmouseout','script','style','font',
    'dir','face','size','color','style','class','width','height','hspace',
    'border','valign','align','background','bgcolor','text','link','vlink',
    'alink','cellpadding','cellspacing']

doc = '''&lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p id="firstpara" align="center"&gt;This is &lt;i&gt;paragraph&lt;/i&gt; &lt;a onmouseout=""&gt;one&lt;/a&gt;.&lt;p id="secondpara" align="blah"&gt;This is &lt;i&gt;paragraph&lt;/i&gt; &lt;b&gt;two&lt;/b&gt;.&lt;/html&gt;'''
soup = BeautifulSoup.BeautifulSoup(doc)
for tag in soup.recursiveChildGenerator():
    try:
        tag.attrs = [(key,value) for key,value in tag.attrs
                     if key not in REMOVE_ATTRIBUTES]
    except AttributeError: 
        # 'NavigableString' object has no attribute 'attrs'
        pass
print(soup.prettify())
</snippet></ROW><ROW><id>9045851</id><snippet>get_zeus_name_1()</snippet></ROW><ROW><id>9045851</id><snippet>zeus</snippet></ROW><ROW><id>9045851</id><snippet>get_zeus_name_1()</snippet></ROW><ROW><id>9045851</id><snippet>get_zeus_name_2()</snippet></ROW><ROW><id>9045851</id><snippet>scope</snippet></ROW><ROW><id>9045851</id><snippet>zeus</snippet></ROW><ROW><id>9045851</id><snippet>get_name_1()</snippet></ROW><ROW><id>9045851</id><snippet>get_name_2()</snippet></ROW><ROW><id>9045851</id><snippet>zeus=Zeus()
</snippet></ROW><ROW><id>9045851</id><snippet>Zeus()</snippet></ROW><ROW><id>9045851</id><snippet>__init__(self)</snippet></ROW><ROW><id>9045851</id><snippet>Zeus</snippet></ROW><ROW><id>9045851</id><snippet>zeus</snippet></ROW><ROW><id>9045851</id><snippet>Zeus()</snippet></ROW><ROW><id>9045851</id><snippet>&gt;&gt;&gt; class Foo:
...     def __init__(self):
...         self.name = 'foobar'
...         print self.name
...         print foo.name
... 
&gt;&gt;&gt; foo = Foo()
foobar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in __init__
NameError: global name 'foo' is not defined
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9045851</id><snippet>print self.name</snippet></ROW><ROW><id>9045851</id><snippet>print foo.name</snippet></ROW><ROW><id>9045901</id><snippet>Image.show</snippet></ROW><ROW><id>9045901</id><snippet>ImageShow.Viewer.show_image</snippet></ROW><ROW><id>9045901</id><snippet>/usr/lib/python2.7/dist-packages/PIL/ImageShow.py</snippet></ROW><ROW><id>9045901</id><snippet>class Viewer:
    def save_image(self, image):
        # save to temporary file, and return filename
        return image._dump(format=self.get_format(image))
    def show_image(self, image, **options):
        # display given image
        return self.show_file(self.save_image(image), **options)
    def show_file(self, file, **options):
        # display given file
        os.system(self.get_command(file, **options))
        return 1
</snippet></ROW><ROW><id>9045901</id><snippet>image._dump</snippet></ROW><ROW><id>9045901</id><snippet>Viewer.save_image</snippet></ROW><ROW><id>9045901</id><snippet>display</snippet></ROW><ROW><id>9045901</id><snippet>animate</snippet></ROW><ROW><id>9045901</id><snippet>animate /path/to/animated.gif
</snippet></ROW><ROW><id>9045901</id><snippet>img.show</snippet></ROW><ROW><id>9045901</id><snippet>import subprocess
import shlex

proc = subprocess.Popen(shlex.split('animate animation.gif'))
proc.communicate()
</snippet></ROW><ROW><id>9045901</id><snippet>animate</snippet></ROW><ROW><id>9045901</id><snippet>import subprocess
import shlex
import threading

def worker():
    proc = subprocess.Popen(shlex.split('animate animation.gif'))
    proc.communicate()

t = threading.Thread(target = worker)
t.daemon = True
t.start()
# do other stuff in main process
t.join()
</snippet></ROW><ROW><id>9046208</id><snippet>Task</snippet></ROW><ROW><id>9046208</id><snippet>.request</snippet></ROW><ROW><id>9046208</id><snippet>AsyncRequest</snippet></ROW><ROW><id>9046208</id><snippet>task</snippet></ROW><ROW><id>9046208</id><snippet>task.AsyncResult(task.request.id).state
</snippet></ROW><ROW><id>9046350</id><snippet>* count</snippet></ROW><ROW><id>9046350</id><snippet>for i in range(10):
    print(("\t"*count) + "Python is fun")
    count += 1
</snippet></ROW><ROW><id>9046468</id><snippet>gameF()</snippet></ROW><ROW><id>9046468</id><snippet>from my_file import gameF
</snippet></ROW><ROW><id>9046671</id><snippet>&gt;&gt;&gt; class C(object):
...     def foo(self):
...          return B()
... 
&gt;&gt;&gt; class B(object):
...     def __del__(self):
...         print 'deleting %r' %self
...     def bar(self):
...         print 'I am method bar of %r' %self
... 
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.foo().bar()
I am method bar of &lt;__main__.B object at 0xa187d2c&gt;
deleting &lt;__main__.B object at 0xa187d2c&gt;
</snippet></ROW><ROW><id>9046671</id><snippet>del</snippet></ROW><ROW><id>9046671</id><snippet>del</snippet></ROW><ROW><id>9046671</id><snippet>a = b = C()</snippet></ROW><ROW><id>9046671</id><snippet>del a</snippet></ROW><ROW><id>9046671</id><snippet>C()</snippet></ROW><ROW><id>9046671</id><snippet>b</snippet></ROW><ROW><id>9046731</id><snippet> variables = [] 
 path = "/your/path"
 for filename in os.listdir(path):
     variables.append(simplejson.load(open(os.path.join(path, filename))))
</snippet></ROW><ROW><id>9046893</id><snippet>bbox_inches</snippet></ROW><ROW><id>9046893</id><snippet>savefig</snippet></ROW><ROW><id>9046893</id><snippet>PIL</snippet></ROW><ROW><id>9046893</id><snippet>savefig</snippet></ROW><ROW><id>9046893</id><snippet>savefig</snippet></ROW><ROW><id>9046893</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

## Step 0: some points to plot
names = [u"Reykjavík", u"Höfn", u"Húsavík"]
lats = [64.133333, 64.25, 66.05]
lons = [-21.933333, -15.216667, -17.316667]

## Step 1: draw a map using matplotlib/Basemap
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt

# predefined dpi
FIGDPI=80

# set dpi of figure, so that all calculations use this value
plt.gcf().set_dpi(FIGDPI)

M = Basemap(projection='merc',resolution='c',
            llcrnrlat=63,urcrnrlat=67,
            llcrnrlon=-24,urcrnrlon=-13)

x, y = M(lons, lats) # transform coordinates according to projection
boxes = []
for xa, ya, name in zip(x, y, names):
    box = plt.text(xa, ya, name,
        bbox=dict(facecolor='white', alpha=0.5))
    boxes.append(box)

M.bluemarble() # a bit fuzzy at this resolution...

# predefine padding in inches
PADDING = 2
# force dpi to same value you used in your calculations
plt.savefig('test.png', bbox_inches="tight", pad_inches=PADDING,dpi=FIGDPI)

# document shift due to loss of white space and added padding
origin = plt.gca().transAxes.transform((0,0))
padding = [FIGDPI*PADDING,FIGDPI*PADDING]
</snippet></ROW><ROW><id>9046893</id><snippet># Step 3: use PIL to draw dots on top of the labels
from PIL import Image, ImageDraw

im = Image.open("test.png")
draw = ImageDraw.Draw(im)
for x, y in midpoints:
    #  deal with shift
    x = x-origin[0]+padding[0]
    y = y-origin[1]+padding[1]
    y = im.size[1] - y # PIL counts rows from top not bottom
    draw.ellipse((x-5, y-5, x+5, y+5), fill="#ff0000")
im.save("test.png", "PNG")
</snippet></ROW><ROW><id>9046893</id><snippet>PADDING</snippet></ROW><ROW><id>9047171</id><snippet>class SignDocTemplate(BaseDocTemplate):
   blocks_to_pages = {}
   def handle_flowable(self, flowables):
     f = flowables[0]
     BaseDocTemplate.handle_flowable(self, flowables)
     if hasattr(f,'flo_id'):
       if self.blocks_to_pages.has_key(self.canv._pageNumber):
          self.blocks_to_pages[self.canv._pageNumber].append(f.flo_id)
       else:
          self.blocks_to_pages[self.canv._pageNumber]= [f.flo_id,]
</snippet></ROW><ROW><id>9047211</id><snippet>v</snippet></ROW><ROW><id>9047211</id><snippet>v -= X</snippet></ROW><ROW><id>9047211</id><snippet>v = v - X</snippet></ROW><ROW><id>9047211</id><snippet>&gt;&gt;&gt; x = np.arange(6)
&gt;&gt;&gt; v = x[1:4]
&gt;&gt;&gt; v -= 1
&gt;&gt;&gt; v
array([0, 1, 2])
&gt;&gt;&gt; x
array([0, 0, 1, 2, 4, 5])
</snippet></ROW><ROW><id>9047211</id><snippet>v -= 1</snippet></ROW><ROW><id>9047211</id><snippet>&gt;&gt;&gt; x = np.arange(6)
&gt;&gt;&gt; v = x[1:4]
&gt;&gt;&gt; v = v - 1
&gt;&gt;&gt; v
array([0, 1, 2])
&gt;&gt;&gt; x
array([0, 1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>9047211</id><snippet>v = v - 1</snippet></ROW><ROW><id>9047211</id><snippet>v</snippet></ROW><ROW><id>9047211</id><snippet>x</snippet></ROW><ROW><id>9047211</id><snippet>-=</snippet></ROW><ROW><id>9047211</id><snippet>v[:] = v - 1
</snippet></ROW><ROW><id>9047395</id><snippet>key in dct</snippet></ROW><ROW><id>9047395</id><snippet>'ham'</snippet></ROW><ROW><id>9047395</id><snippet>(key, 'ham')</snippet></ROW><ROW><id>9047395</id><snippet>defaultdict</snippet></ROW><ROW><id>9047395</id><snippet>key</snippet></ROW><ROW><id>9047395</id><snippet>dct.get(key, 'ham')  # will return dct[key] or 'ham' but never stores anything
</snippet></ROW><ROW><id>9047483</id><snippet>sys.path</snippet></ROW><ROW><id>9047483</id><snippet>.class</snippet></ROW><ROW><id>9047483</id><snippet>javac</snippet></ROW><ROW><id>9047483</id><snippet>sys.path.append(d)</snippet></ROW><ROW><id>9047483</id><snippet>d</snippet></ROW><ROW><id>9047483</id><snippet>package foo.bar;</snippet></ROW><ROW><id>9047483</id><snippet>mydir/foo/bar/myclass.java</snippet></ROW><ROW><id>9047483</id><snippet>mydir</snippet></ROW><ROW><id>9047483</id><snippet>sys.path</snippet></ROW><ROW><id>9047483</id><snippet>mydir</snippet></ROW><ROW><id>9047483</id><snippet>from foo.bar import myclass</snippet></ROW><ROW><id>9047641</id><snippet>ALTER TABLE dbx.tablex MODIFY Link VARCHAR(255) CHARACTER SET utf8; COLLATE utf8_general_ci NOT NULL;
</snippet></ROW><ROW><id>9047641</id><snippet>[] * 10</snippet></ROW><ROW><id>9047641</id><snippet>for variable in variables:
    cursor.execute(sql, variable)
</snippet></ROW><ROW><id>9047641</id><snippet>cursor.executemany(sql, variables)
</snippet></ROW><ROW><id>9047738</id><snippet>sorted</snippet></ROW><ROW><id>9047738</id><snippet>scores = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>9047738</id><snippet>sorted</snippet></ROW><ROW><id>9047738</id><snippet>query.filter('countryCode =', somecode).order('-score').fetch(limit=100)
</snippet></ROW><ROW><id>9047762</id><snippet>__builtin__</snippet></ROW><ROW><id>9047762</id><snippet>builtins</snippet></ROW><ROW><id>9047762</id><snippet>'__builtins__'</snippet></ROW><ROW><id>9047762</id><snippet>'__builtin__'</snippet></ROW><ROW><id>9047762</id><snippet>__builtin__</snippet></ROW><ROW><id>9047762</id><snippet>__builtins__</snippet></ROW><ROW><id>9047762</id><snippet>__builtin__.__dict__</snippet></ROW><ROW><id>9047762</id><snippet>__builtin__</snippet></ROW><ROW><id>9047762</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; vars(globals()['__builtins__']) is vars(__builtin__)
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9047762</id><snippet>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; vars(globals()['__builtins__']) is vars(builtins)
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9047762</id><snippet>__builtins__</snippet></ROW><ROW><id>9047843</id><snippet>open</snippet></ROW><ROW><id>9047843</id><snippet>readline</snippet></ROW><ROW><id>9047843</id><snippet>readline</snippet></ROW><ROW><id>9047843</id><snippet>open</snippet></ROW><ROW><id>9047843</id><snippet>file</snippet></ROW><ROW><id>9047843</id><snippet>class File(object):
    """Instances of this class are returned by `open` (pretend)"""

    def __init__(self, filesystem_handle):
        """Called when the file object is initialized by `open`"""

        print "Starting up a new file instance for {file} pointing at position 0.".format(...)

        self.position = 0
        self.handle = filesystem_handle


    def readline(self):
        """Read a line. Terribly naive. Do not use at home"

        i = self.position
        c = None
        line = ""
        while c != "\n":
            c = self.handle.read_a_byte()
            line += c

        print "Read line from {p} to {end} ({i} + {p})".format(...)

        self.position += i
        return line
</snippet></ROW><ROW><id>9047843</id><snippet>Starting up a new file instance for /my-textfile.txt pointing at position 0.
Read line from 0 to 80 (80 + 0)
Read line from 80 to 160 (80 + 80)
</snippet></ROW><ROW><id>9047843</id><snippet>Starting up a new file instance for /my-textfile.txt pointing at position 0.
Read line from 0 to 80 (80 + 0)
Starting up a new file instance for /my-textfile.txt pointing at position 0.
Read line from 0 to 80 (80 + 0)
</snippet></ROW><ROW><id>9048006</id><snippet>for _ in range(3):
    do()
</snippet></ROW><ROW><id>9048006</id><snippet>_</snippet></ROW><ROW><id>9048006</id><snippet>[do() for _ in range(3)]
</snippet></ROW><ROW><id>9048006</id><snippet>do()</snippet></ROW><ROW><id>9048006</id><snippet>None</snippet></ROW><ROW><id>9048112</id><snippet>def action(self, stimType):
    pygame.draw.rect(*self.stim[stimType])
</snippet></ROW><ROW><id>9048112</id><snippet>self.stim = (
    (firstParam, secondparam, thirdparam),
    (firstParam2, secondparam2, thirdparam2),
    (firstParam3, secondParam3, thirdParam3)
)
</snippet></ROW><ROW><id>9048112</id><snippet>self.stim[stimType]</snippet></ROW><ROW><id>9048112</id><snippet>self.stim[stimType-1]</snippet></ROW><ROW><id>9048338</id><snippet>post_type</snippet></ROW><ROW><id>9048338</id><snippet>django.core.exceptions.ValidationError('error text')</snippet></ROW><ROW><id>9048338</id><snippet>'error text'</snippet></ROW><ROW><id>9048338</id><snippet>form.non_field_errors</snippet></ROW><ROW><id>9048338</id><snippet>ValidationError</snippet></ROW><ROW><id>9048552</id><snippet>re.split('(?:,)', 'a,b')
</snippet></ROW><ROW><id>9048561</id><snippet>import FooPackage.foo
</snippet></ROW><ROW><id>9048561</id><snippet>foo</snippet></ROW><ROW><id>9048561</id><snippet>FooPackage/__init__.py</snippet></ROW><ROW><id>9048561</id><snippet>import FooPackage.foo as foo</snippet></ROW><ROW><id>9048561</id><snippet>from . import foo</snippet></ROW><ROW><id>9048561</id><snippet>FooPackage/__init__.py</snippet></ROW><ROW><id>9048561</id><snippet>foo</snippet></ROW><ROW><id>9048691</id><snippet>from Tkinter import *

# Esempio di GUI

def main():
    w1=Tk()
    w1.title("Finestra 1")
    # Width, height in pixels
    f1=Frame(w1, height=50, width=50)
    f1.pack()
    w1.mainloop()

main()
</snippet></ROW><ROW><id>9048944</id><snippet>get_rgb()</snippet></ROW><ROW><id>9048970</id><snippet>get_cache_key</snippet></ROW><ROW><id>9048970</id><snippet>django.utils.cache</snippet></ROW><ROW><id>9048970</id><snippet>request.path</snippet></ROW><ROW><id>9048970</id><snippet>settings.LANGUAGE_CODE</snippet></ROW><ROW><id>9049002</id><snippet>grid_propagate</snippet></ROW><ROW><id>9049002</id><snippet>f1.grid_propagate()</snippet></ROW><ROW><id>9049002</id><snippet>pack</snippet></ROW><ROW><id>9049002</id><snippet>f1</snippet></ROW><ROW><id>9049002</id><snippet>f1.pack_propagate</snippet></ROW><ROW><id>9049002</id><snippet>False</snippet></ROW><ROW><id>9049002</id><snippet>f1</snippet></ROW><ROW><id>9049002</id><snippet>w1</snippet></ROW><ROW><id>9049002</id><snippet>w1.grid_propagate(False)</snippet></ROW><ROW><id>9049002</id><snippet>w1.wm_geometry("500x400")</snippet></ROW><ROW><id>9049039</id><snippet>&lt;h1&gt; New Play &lt;/h1&gt;
{% if error_message %}&lt;p&gt;&lt;strong&gt;{{ error_message }}&lt;/strong&gt;&lt;/p&gt;{% endif %}
&lt;form action="" method="post"&gt;
    {% csrf_token %}
    &lt;table&gt;{{form.as_table}}&lt;/table&gt;
    &lt;input type="submit" value="Add New Play" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>9049039</id><snippet>class StakeForm(forms.Form):
    stakes = forms.CharField(max_length=200)
    amount_won = forms.IntegerField()
    last_play_date = forms.DateTimeField()
</snippet></ROW><ROW><id>9049039</id><snippet>def new_stake(request, player_id):
    vars = {}
    player = get_object_or_404(Player, pk=player_id)
    if request.method == 'POST': # If the form has been submitted
        form = StakeForm(request.POST) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            # Process the data in form.cleaned_data
            stakes = form.cleaned_data['stakes']
            amount_won = form.cleaned_data['amount_won']
            last_play_date = form.cleaned_data['last_play_date']
            stakes_new = Stakes(player=player, stakes=stakes,
                amount_won=amount_won, last_play_date=last_play_date)
            stakes_new.save()
            return HttpResponseRedirect(reverse('stake_added')) # redirect after POST
    else:
        form = StakeForm() # An unbound form
    # Package up some variables to return
    vars['player'] = player
    vars['form'] = form
    context = RequestContext(request)
    return render_to_response('stakeme/new_stake.html', vars, context_instance=context)
</snippet></ROW><ROW><id>9049039</id><snippet>urlpatterns = patterns('',
    url(r'^(\d+)/new_stake/$', new_stake, name='new_stake'),
    url(r'^stake_added/$', direct_to_template, {'template':'stakeme/stake_added.html'}, name="stake_added"),
    url(r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>9049058</id><snippet>_</snippet></ROW><ROW><id>9049058</id><snippet>id,value,_ = zip(*ans) # only works for exactly three values
</snippet></ROW><ROW><id>9049058</id><snippet>id, value, *_ = zip(*ans) # _ will be a list of zero or more args
</snippet></ROW><ROW><id>9049058</id><snippet>id,value = zip(*ans)[:2] # ignore all but first two values  
</snippet></ROW><ROW><id>9049476</id><snippet>p.childrenKeys</snippet></ROW><ROW><id>9049476</id><snippet>class Parent(db.Model):
    childrenKeys = db.ListProperty(str,indexed=False,default=[])

p = Parent.get_or_insert('somekey')
p.childrenKeys.append('newchkey')
p.put()
</snippet></ROW><ROW><id>9049549</id><snippet>import ast
from collections import namedtuple

Import = namedtuple("Import", ["module", "name", "alias"])

def get_imports(path):
    with open(path) as fh:        
       root = ast.parse(fh.read(), path)

    for node in ast.iter_child_nodes(root):
        if isinstance(node, ast.Import):
            module = []
        elif isinstance(node, ast.ImportFrom):  
            module = node.module.split('.')
        else:
            continue

        for n in node.names:
            yield Import(module, n.name.split('.'), n.asname)
</snippet></ROW><ROW><id>9049549</id><snippet>from coco import bunny
from coco.bungy import carrot
from meta import teta
from rocket import spaceship as sp
import bingo
import com.stackoverflow
import motorbike as car
import module1, module2

s="a random variable"

def func():
    """And a function"""
</snippet></ROW><ROW><id>9049549</id><snippet>&gt;&gt;&gt; for imp in get_imports("/path/to/file.py"): print imp
Import(module=['coco'], name=['bunny'], alias=None)
Import(module=['coco', 'bungy'], name=['carrot'], alias=None)
Import(module=['meta'], name=['teta'], alias=None)
Import(module=['rocket'], name=['spaceship'], alias='sp')
Import(module=[], name=['bingo'], alias=None)
Import(module=[], name=['com', 'stackoverflow'], alias=None)
Import(module=[], name=['motorbike'], alias='car')
Import(module=[], name=['module1'], alias=None)
Import(module=[], name=['module2'], alias=None)
</snippet></ROW><ROW><id>9049615</id><snippet># coding=utf-8
## \authors Cezary K. Wagner

from threading import Lock

__indent = 0
__patched = False

def logImports():
  global __patched
  if __patched == True:
    return

  import time
  import logging
#  import inspect
  import __builtin__

  original__import__ = __builtin__.__import__

  def patched__import__(name, *args):
    global __indent
    lock = Lock()
    lock.acquire()
    spaces = ' ' * (__indent * 2)
#    callerFrame = inspect.currentframe().f_back
#    moduleName = callerFrame.f_globals['__name__']
#    lineNumber = callerFrame.f_lineno
#    logging.debug('%simport start %s %s:%s.' % (spaces, name, moduleName, lineNumber))
    __indent += 1
    start = time.clock()
    try:
      module = original__import__(name, *args)
      delta = time.clock() - start
    # import could fail
    finally:
      lock.release
      __indent -= 1
    if delta &gt;= 1.0:
      logging.debug('%simport end %s in %ss' % (spaces, name, delta))
    return module

  __builtin__.__import__ = patched__import__
  __patched = True
</snippet></ROW><ROW><id>9049615</id><snippet>from module import logImports
logImports()

import math
</snippet></ROW><ROW><id>9049671</id><snippet>random.sample(range(52), 52)</snippet></ROW><ROW><id>9049671</id><snippet>range(52)</snippet></ROW><ROW><id>9049671</id><snippet>range(1, 53)</snippet></ROW><ROW><id>9049984</id><snippet>__get__</snippet></ROW><ROW><id>9049984</id><snippet>__set__</snippet></ROW><ROW><id>9049984</id><snippet>__del__</snippet></ROW><ROW><id>9049984</id><snippet>__getattr__</snippet></ROW><ROW><id>9049984</id><snippet>__getattribute__</snippet></ROW><ROW><id>9049984</id><snippet>__setattr__</snippet></ROW><ROW><id>9049984</id><snippet>__delattr__</snippet></ROW><ROW><id>9049984</id><snippet>x.name</snippet></ROW><ROW><id>9049984</id><snippet>class Foo:
    def __init__(self):
        self.x = 10
    def __getattr__(self, name):
        return name

f = Foo()
f.x    # -&gt; 10
f.bar   # -&gt; 'bar'
</snippet></ROW><ROW><id>9049984</id><snippet>class Foo:
    def __init__(self):
        self.x = 10
    def __getattr__(self,name):
        return name
    def __getattribute__(self, name):
        if name == 'bar':
            raise AttributeError
        return 'getattribute'

f = Foo()
f.x    # -&gt; 'getattribute'
f.baz    # -&gt; 'getattribute'
f.bar    # -&gt; 'bar'
</snippet></ROW><ROW><id>9049984</id><snippet>__getitem__</snippet></ROW><ROW><id>9049984</id><snippet>__setitem__</snippet></ROW><ROW><id>9049984</id><snippet>__delitem__</snippet></ROW><ROW><id>9049984</id><snippet>class MyColors:
    def __init__(self):
        self._colors = {'yellow': 1, 'red': 2, 'blue': 3}
    def __getitem__(self, name):
        return self._colors.get(name, 100)

colors = MyColors()
colors['yellow']   # -&gt; 1
colors['brown']    # -&gt; 100
</snippet></ROW><ROW><id>9050352</id><snippet>#!python
#!/usr/bin/python
#!/usr/local/bin/python
#!/usr/bin/python -t
</snippet></ROW><ROW><id>9050352</id><snippet>#!python</snippet></ROW><ROW><id>9050352</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>9050352</id><snippet>#!/usr/local/bin/python</snippet></ROW><ROW><id>9050352</id><snippet>#!/usr/bin/python -tt</snippet></ROW><ROW><id>9050352</id><snippet>-tt</snippet></ROW><ROW><id>9050352</id><snippet>$ python -t somescript.py
</snippet></ROW><ROW><id>9050352</id><snippet>#!</snippet></ROW><ROW><id>9050352</id><snippet>#!/usr/bin/php
&lt;?php
  ... php code here ...
</snippet></ROW><ROW><id>9050352</id><snippet>#!/usr/bin/perl</snippet></ROW><ROW><id>9050352</id><snippet>.c</snippet></ROW><ROW><id>9050352</id><snippet>.c</snippet></ROW><ROW><id>9050352</id><snippet>#!/bin/bash</snippet></ROW><ROW><id>9050352</id><snippet>/some/wonky/weird/path</snippet></ROW><ROW><id>9050352</id><snippet>/usr/bin</snippet></ROW><ROW><id>9050384</id><snippet>&gt;&gt;&gt; print '"A word that needs quotation marks"'
"A word that needs quotation marks"
</snippet></ROW><ROW><id>9050384</id><snippet>&gt;&gt;&gt; print "\"A word that needs quotation marks\""
"A word that needs quotation marks" 
</snippet></ROW><ROW><id>9050384</id><snippet>&gt;&gt;&gt; print """ "A word that needs quotation marks" """
"A word that needs quotation marks" 
</snippet></ROW><ROW><id>9050534</id><snippet>    C:\&gt;python flash.py COM7
</snippet></ROW><ROW><id>9050534</id><snippet>#'s</snippet></ROW><ROW><id>9050534</id><snippet>    SERIAL_PORT = "COM7"
</snippet></ROW><ROW><id>9050538</id><snippet>% git clone https://github.com/boto/boto.git
% cd boto/boto
% pydoc -w ./
% open s3.lifecycle.html
</snippet></ROW><ROW><id>9051467</id><snippet>celery</snippet></ROW><ROW><id>9051614</id><snippet>from timeit import Timer
from urllib2 import urlopen

def fetch():
    page = urlopen('http://www.google.com')
    return page.info()

timer = Timer(fetch)
print timer.timeit(1)
</snippet></ROW><ROW><id>9051679</id><snippet>ax.tick_params(axis='y', direction='out')
</snippet></ROW><ROW><id>9051679</id><snippet>ax.yaxis.tick_left()
</snippet></ROW><ROW><id>9051784</id><snippet>tl=es_MX</snippet></ROW><ROW><id>9051784</id><snippet>tl=es</snippet></ROW><ROW><id>9051951</id><snippet>int</snippet></ROW><ROW><id>9051951</id><snippet>1</snippet></ROW><ROW><id>9051951</id><snippet>datetime.datetime</snippet></ROW><ROW><id>9051951</id><snippet>x</snippet></ROW><ROW><id>9051951</id><snippet>list</snippet></ROW><ROW><id>9051951</id><snippet>datetime.datetime</snippet></ROW><ROW><id>9051951</id><snippet>fd</snippet></ROW><ROW><id>9051951</id><snippet>for x in fd:
    print fd[x-1]
</snippet></ROW><ROW><id>9051951</id><snippet>for x in fd:
    print x
</snippet></ROW><ROW><id>9051951</id><snippet>2012-01-29 19:47:23
2012-02-04 19:47:23
2012-02-05 19:47:23
2012-02-11 19:47:23
2012-02-12 19:47:23
[...]
2012-04-22 19:47:23
2012-04-28 19:47:23
2012-04-29 19:47:23
2012-05-05 19:47:23
2012-05-06 19:47:23
</snippet></ROW><ROW><id>9052006</id><snippet>iframe</snippet></ROW><ROW><id>9052006</id><snippet>GET</snippet></ROW><ROW><id>9052006</id><snippet>iframe</snippet></ROW><ROW><id>9052006</id><snippet>// in parent page
function receiveDataFromIFrame(data) {
    console.log("Received data from iframe:", data);
}
</snippet></ROW><ROW><id>9052006</id><snippet>// in child page
function onLoad() {
    var data = "data from iframe";
    window.parent.receiveDataFromIFrame(data);
}
</snippet></ROW><ROW><id>9052186</id><snippet>import sys
sys.path.append("/Library/Python/2.5/site-packages/simplejson-2.3.2-py2.5-macosx-10.7-x86_64.egg")
import simplejson
</snippet></ROW><ROW><id>9052472</id><snippet>repr</snippet></ROW><ROW><id>9052472</id><snippet>str</snippet></ROW><ROW><id>9052472</id><snippet>str</snippet></ROW><ROW><id>9052472</id><snippet>In [6]: import datetime as dt

In [7]: date_list = [dt.date(2011, 5, 31), dt.date(2011, 6, 15)]

In [8]: print('[{}]'.format(', '.join(map(str,date_list))))
[2011-05-31, 2011-06-15]
</snippet></ROW><ROW><id>9052887</id><snippet>prepopulated_fields</snippet></ROW><ROW><id>9052887</id><snippet>class MyModel(models.Model):
     video_id = ...
     embed_code = ...

     def save(self, *args, **kwargs):
         # If we have enetered a video id, but there is not saved embed code, generate it
         if not self.embed_code and self.video_id:
             self.embed_code = "http://youtube.com/%s" % self.video_id
         super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>9052887</id><snippet>save_model</snippet></ROW><ROW><id>9052887</id><snippet>ModelAdmin</snippet></ROW><ROW><id>9052887</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        video_id = forms.cleaned_data.get('video_id', None)
        # If we are creating the object, and the video id is present
        if video_id and not change:
            obj.embed_code = video_id
        obj.save()
</snippet></ROW><ROW><id>9052933</id><snippet>url(r^somepath/$', 'links.views.index_tag_query')
</snippet></ROW><ROW><id>9052933</id><snippet>def index_tag_query(request):
    tag = request.GET.get('tag', None)
    if tag == "Python":
         ...
</snippet></ROW><ROW><id>9053421</id><snippet>import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.axes3d as axes3d
import numpy as np

x = np.arange(6)
y = np.linspace(0, 11, 50)
z = x[:, np.newaxis] + y**2

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1, projection = '3d')
for xval, zrow in zip(x, z):
    ax.plot(xval*np.ones_like(y), y, zrow, color = 'black')
plt.show()
</snippet></ROW><ROW><id>9053423</id><snippet>MPI_Init</snippet></ROW><ROW><id>9053423</id><snippet>MPI_Init</snippet></ROW><ROW><id>9053423</id><snippet>PMPI_Init</snippet></ROW><ROW><id>9053423</id><snippet>MPI_Finalize</snippet></ROW><ROW><id>9053423</id><snippet>LD_PRELOAD</snippet></ROW><ROW><id>9053423</id><snippet>MPI_Init</snippet></ROW><ROW><id>9053576</id><snippet>document.getElementById('form_id').reset()</snippet></ROW><ROW><id>9053576</id><snippet>$('#FormID').each (function(){
  this.reset();
});</snippet></ROW><ROW><id>9053576</id><snippet>jQuery.fn.reset = function () {
  $(this).each (function() { this.reset(); });
}</snippet></ROW><ROW><id>9053576</id><snippet>$("#FormID").reset();</snippet></ROW><ROW><id>9053585</id><snippet>if value % 2 == 0: total += value</snippet></ROW><ROW><id>9053585</id><snippet>%</snippet></ROW><ROW><id>9053585</id><snippet>prev, cur = 0, 1
total = 0
while True:
    prev, cur = cur, prev + cur
    if cur &gt;= 4000000:
        break
    if cur % 2 == 0:
        total += cur
print(total)
</snippet></ROW><ROW><id>9053615</id><snippet>&lt;canvas&gt;</snippet></ROW><ROW><id>9053938</id><snippet>self.staticon.connect('activate', self.browser(output_text = 'text'))
</snippet></ROW><ROW><id>9053938</id><snippet>self.staticon.connect('activate', self.browser, 'text')
</snippet></ROW><ROW><id>9053938</id><snippet>def browser(self, window, output_text):
</snippet></ROW><ROW><id>9053938</id><snippet>def browser(self, window):
</snippet></ROW><ROW><id>9054040</id><snippet>source = re.sub(r'(\r\n|\r|\n)', '\n', source)
</snippet></ROW><ROW><id>9054260</id><snippet>i</snippet></ROW><ROW><id>9054260</id><snippet>CreateHistoryMenu</snippet></ROW><ROW><id>9054260</id><snippet>func</snippet></ROW><ROW><id>9054260</id><snippet>i</snippet></ROW><ROW><id>9054260</id><snippet>i</snippet></ROW><ROW><id>9054260</id><snippet>lambda</snippet></ROW><ROW><id>9054260</id><snippet>i</snippet></ROW><ROW><id>9054260</id><snippet>lambda</snippet></ROW><ROW><id>9054260</id><snippet>i</snippet></ROW><ROW><id>9054260</id><snippet>        func = lambda e, i = i: self.ChooseItem(i)
</snippet></ROW><ROW><id>9054293</id><snippet>]</snippet></ROW><ROW><id>9054293</id><snippet>VARFD[[value[0].split("/")[1]]
</snippet></ROW><ROW><id>9054505</id><snippet>def get_new_failures(list1, list2):
    check = set([(d['classname'], d['testname']) for d in list2])
    return [d for d in list1 if (d['classname'], d['testname']) not in check]
</snippet></ROW><ROW><id>9054608</id><snippet>d</snippet></ROW><ROW><id>9054608</id><snippet>d =[0] * 2048
d[2048/8] |= 0x01 &lt;&lt; 2048 % 8
</snippet></ROW><ROW><id>9054608</id><snippet>2048 % 8 == 0</snippet></ROW><ROW><id>9054608</id><snippet>and</snippet></ROW><ROW><id>9054608</id><snippet>or</snippet></ROW><ROW><id>9054608</id><snippet>101
</snippet></ROW><ROW><id>9054608</id><snippet>2 ^ 0 * 1 + 2 ^ 1 * 0 + 2 ^ 2 * 1 == 5</snippet></ROW><ROW><id>9054608</id><snippet>10
</snippet></ROW><ROW><id>9054608</id><snippet>|</snippet></ROW><ROW><id>9054608</id><snippet>0</snippet></ROW><ROW><id>9054608</id><snippet>5:     101
2:     010
</snippet></ROW><ROW><id>9054608</id><snippet>or</snippet></ROW><ROW><id>9054608</id><snippet>5:     101
2:     010
5 | 2: 111
</snippet></ROW><ROW><id>9054608</id><snippet>1</snippet></ROW><ROW><id>9054608</id><snippet>1 or 0 == 1</snippet></ROW><ROW><id>9054608</id><snippet>1</snippet></ROW><ROW><id>9054608</id><snippet>6:     110
2:     010
6 | 2: 110
</snippet></ROW><ROW><id>9054608</id><snippet>1</snippet></ROW><ROW><id>9054608</id><snippet>0</snippet></ROW><ROW><id>9054608</id><snippet>&amp;</snippet></ROW><ROW><id>9054608</id><snippet>and</snippet></ROW><ROW><id>9054608</id><snippet>or</snippet></ROW><ROW><id>9054608</id><snippet>5:     101
2:     010
5 &amp; 2: 000

6:     110
2:     010
6 &amp; 2: 010
</snippet></ROW><ROW><id>9054608</id><snippet>a &lt;&lt; b</snippet></ROW><ROW><id>9054608</id><snippet>a &gt;&gt; b</snippet></ROW><ROW><id>9054608</id><snippet>a</snippet></ROW><ROW><id>9054608</id><snippet>b</snippet></ROW><ROW><id>9054608</id><snippet>5 &lt;&lt; 1</snippet></ROW><ROW><id>9054608</id><snippet>5:        101
5 &lt;&lt; 1:  1010
5 &lt;&lt; 2: 10100
</snippet></ROW><ROW><id>9054608</id><snippet>5 &gt;&gt; 1</snippet></ROW><ROW><id>9054608</id><snippet>5 &gt;&gt; 1:    10
5 &gt;&gt; 2:     1
5 &gt;&gt; 3:     0
</snippet></ROW><ROW><id>9054608</id><snippet>0</snippet></ROW><ROW><id>9054608</id><snippet>1</snippet></ROW><ROW><id>9054608</id><snippet>1</snippet></ROW><ROW><id>9054608</id><snippet>1:            0001
1 &lt;&lt; 3:       1000
5:            0101
5 | (1 &lt;&lt; 3): 1101
</snippet></ROW><ROW><id>9054608</id><snippet>|=</snippet></ROW><ROW><id>9054608</id><snippet>a = 5</snippet></ROW><ROW><id>9054608</id><snippet>a += 2</snippet></ROW><ROW><id>9054608</id><snippet>a == 7</snippet></ROW><ROW><id>9054608</id><snippet>a = 5</snippet></ROW><ROW><id>9054608</id><snippet>a |= (1 &lt;&lt; 3)</snippet></ROW><ROW><id>9054608</id><snippet>a == 13</snippet></ROW><ROW><id>9054628</id><snippet>batch_size</snippet></ROW><ROW><id>9054628</id><snippet>del files[batch_size:]</snippet></ROW><ROW><id>9054650</id><snippet>dict</snippet></ROW><ROW><id>9054650</id><snippet>bisect</snippet></ROW><ROW><id>9054650</id><snippet>import bisect
class dictvs(dict):
    def __init__(self):
        self._list = []

    def __setitem__(self, key, value):
        old = self.get(key)
        if old is None:
            bisect.insort(self._list, value)
            dict.__setitem__(self, key, value)
        else:
            oldpos = bisect.bisect_left(self._list, old)
            newpos = bisect.bisect_left(self._list, value)
            if newpos &gt; oldpos:
                newpos -= 1
                for i in xrange(oldpos, newpos):
                    self._list[i] = self._list[i + 1]
            else:
                for i in xrange(oldpos, newpos, -1):
                    self._list[i] = self._list[i - 1]
            self._list[newpos] = value
            dict.__setitem__(self, key, value)

    def __delitem__(self, key):
        old = self.get(key)
        if old is not None:
            oldpos = bisect.bisect(self._list, old)
            del self._list[oldpos]
        dict.__delitem__(self, key)

    def values(self):
        return list(self._list)
</snippet></ROW><ROW><id>9054650</id><snippet>dict</snippet></ROW><ROW><id>9054650</id><snippet>values()</snippet></ROW><ROW><id>9054650</id><snippet>sorted(dict.values(instance))</snippet></ROW><ROW><id>9054650</id><snippet>bisect</snippet></ROW><ROW><id>9054712</id><snippet>def raise_window(widget, w2):
    w2.present()
</snippet></ROW><ROW><id>9054712</id><snippet>def raise_window(widget, w2):
    w2.set_keep_above(True)
</snippet></ROW><ROW><id>9054735</id><snippet>Label.set_text("new text")</snippet></ROW><ROW><id>9054735</id><snippet>gtk.Builder.get_object("objectname")</snippet></ROW><ROW><id>9054856</id><snippet>import requests</snippet></ROW><ROW><id>9054856</id><snippet>requests.ConnectionError</snippet></ROW><ROW><id>9054856</id><snippet>ConnectionError</snippet></ROW><ROW><id>9054856</id><snippet>requests</snippet></ROW><ROW><id>9054964</id><snippet>plot(np.linspace(0,3),spline([0,1,2,3],Epath,np.linspace(0,3)))
</snippet></ROW><ROW><id>9054964</id><snippet>plot(np.linspace(0,3),np.maximum(E_react,spline([0,1,2,3],Epath,np.linspace(0,3))))
</snippet></ROW><ROW><id>9055132</id><snippet>from traceback import format_exc
try:
    # current dispatch.fcgi code
except Exception:
    open("/path/you/can/write/to.txt", "w").write(format_exc())
    raise
</snippet></ROW><ROW><id>9055141</id><snippet>file://&lt;filename&gt;</snippet></ROW><ROW><id>9055141</id><snippet>file:///&lt;filename</snippet></ROW><ROW><id>9055141</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>9055141</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>9055186</id><snippet>sum()</snippet></ROW><ROW><id>9055186</id><snippet>sum(int(i) for i in str(155))
</snippet></ROW><ROW><id>9055186</id><snippet>sum()</snippet></ROW><ROW><id>9055186</id><snippet>birthday = raw_input("When is your birthday(mm/dd/yyyy)? ")
summ = sum(int(i) for i in birthday[0:2])
sumd = sum(int(i) for i in birthday[3:5])
sumy = sum(int(i) for i in birthday[6:10])
sumall = summ + sumd + sumy
print "The sum of your numbers is", sumall
sumln = sum(int(c) for c in str(sumall)))
print "Your lucky number is", sumln
</snippet></ROW><ROW><id>9055304</id><snippet>2**1000</snippet></ROW><ROW><id>9055304</id><snippet>math.log</snippet></ROW><ROW><id>9055304</id><snippet>math.pow</snippet></ROW><ROW><id>9055304</id><snippet>l = str(2**1000)
digits = [int(digit) for digit in l]
print sum(digits)
</snippet></ROW><ROW><id>9055705</id><snippet>newlist = sorted(input, key=lambda k: (k['age'], k['name'])) 
</snippet></ROW><ROW><id>9055705</id><snippet>In [13]: input = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}, {'name':'Milhouse', 'age':10}, {'name': 'Mr. Burns', 'age': 104}]

In [14]: sorted(input, key=lambda k: (k['age'], k['name']))
Out[14]: 
[{'age': 10, 'name': 'Bart'},
 {'age': 10, 'name': 'Milhouse'},
 {'age': 39, 'name': 'Homer'},
 {'age': 104, 'name': 'Mr. Burns'}]
</snippet></ROW><ROW><id>9055705</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>9055705</id><snippet>In [19]: sorted(input, key=operator.itemgetter('age','name'))
Out[19]: 
[{'age': 10, 'name': 'Bart'},
 {'age': 10, 'name': 'Milhouse'},
 {'age': 39, 'name': 'Homer'},
 {'age': 104, 'name': 'Mr. Burns'}]
</snippet></ROW><ROW><id>9055800</id><snippet>import string

numbers = 0
letters = 0

for letter in raw_input('Enter a password: '):
  if letter in string.ascii_letters:
    letters += 1
  elif letter in string.digits:
    numbers += 1

print numbers, letters
</snippet></ROW><ROW><id>9055976</id><snippet>plt.barh(bars, vals, align="center")
</snippet></ROW><ROW><id>9055976</id><snippet>plt.plot(vals, bars, 'o--')
</snippet></ROW><ROW><id>9055976</id><snippet>plt.plot(vals, bars, 'o')
plt.hlines(bars, [0], vals, linestyles='dotted', lw=2)
</snippet></ROW><ROW><id>9056007</id><snippet>A = [1, 2, 3]
B = [4, 5, 6]
C = [7, 8, 9]
MasterList = [A, B, C]

whichList = choice(MasterList)
print choice(whichList)
</snippet></ROW><ROW><id>9056007</id><snippet>A, B, C</snippet></ROW><ROW><id>9056398</id><snippet>dict</snippet></ROW><ROW><id>9056398</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>9056522</id><snippet>edge_list = []
delete_these = []
for point, edges in edges_per_point.items():
    edge_list.append(edges.pop(0))
    if edges:
        edges_per_point[point] = edges
    else:
        delete_these.append(point)

for point in delete_these:
    del edges_per_point[point]
</snippet></ROW><ROW><id>9056670</id><snippet>HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
</snippet></ROW><ROW><id>9056703</id><snippet>Popen</snippet></ROW><ROW><id>9056703</id><snippet>call</snippet></ROW><ROW><id>9056703</id><snippet>.communicate()</snippet></ROW><ROW><id>9056754</id><snippet>Sale</snippet></ROW><ROW><id>9056754</id><snippet>models.Model</snippet></ROW><ROW><id>9056754</id><snippet>Sale</snippet></ROW><ROW><id>9056754</id><snippet>*args</snippet></ROW><ROW><id>9056754</id><snippet>**kwargs</snippet></ROW><ROW><id>9056754</id><snippet>super(Sale, self).__init__</snippet></ROW><ROW><id>9056761</id><snippet>class Purchase(db.Model):
    items = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>9056761</id><snippet>p = Purchase()
p.items = [item1.key(), item2.key(), item3.key()]
</snippet></ROW><ROW><id>9056761</id><snippet>item1</snippet></ROW><ROW><id>9056761</id><snippet>Purchase.all().filter('items =', item1.key())
</snippet></ROW><ROW><id>9056761</id><snippet>item1</snippet></ROW><ROW><id>9056761</id><snippet>item2</snippet></ROW><ROW><id>9056761</id><snippet>Purchase.all().wilter('items IN', [item1.key(), item2.key()])
</snippet></ROW><ROW><id>9056842</id><snippet>app</snippet></ROW><ROW><id>9056842</id><snippet>app.create(WidgetClass)</snippet></ROW><ROW><id>9056842</id><snippet>a = App()

f = FrameWidget()
a.add(f) # sets FrameWidget's config to a's config

b = ButtonWidget()
f.add(b) # sets ButtonWidget's config to f's config, which happens to be a's

c = CheckboxWidget()
f.add(c) # sets CheckboxWidget's config to f's config, also a's
</snippet></ROW><ROW><id>9056851</id><snippet>cur.execute</snippet></ROW><ROW><id>9056851</id><snippet>con.execute</snippet></ROW><ROW><id>9056851</id><snippet>cur.rowcount</snippet></ROW><ROW><id>9056857</id><snippet>form.save()</snippet></ROW><ROW><id>9056857</id><snippet>profile = form.save(commit=False)
profile.user = request.user
profile.save()
</snippet></ROW><ROW><id>9056857</id><snippet>request.user</snippet></ROW><ROW><id>9056857</id><snippet>request.user</snippet></ROW><ROW><id>9056867</id><snippet>else</snippet></ROW><ROW><id>9056927</id><snippet>def closesturl(keyword, website):
    keylist = []
    urllist = []
    closest = []
    urls = []
    urlregex = "(http|https)://[-A-Za-z0-9\\./]+"
    urlmatches = re.finditer(urlregex, website, re.IGNORECASE)
    keymatches = re.finditer(keyword, website, re.IGNORECASE)
    for n in keymatches:
        keylist.append([n.start(), n.end()])
    if(len(keylist) &gt; 0):
        for m in urlmatches:
            urllist.append([m.start(), m.end()])
    if((len(keylist) &gt; 0) and (len(urllist) &gt; 0)):
        for i in range (0, len(keylist)):
            closest.append([abs(urllist[0][0]-keylist[i][0])])
            urls.append(website[urllist[0][0]:urllist[0][1]])
            if(len(urllist) &gt;= 1):
                for j in range (1, len(urllist)):
                    if((abs(urllist[j][0]-keylist[i][0]) &lt; closest[i])):
                        closest[i] = abs(keylist[i][0]-urllist[j][0])
                        urls[i] = website[urllist[j][0]:urllist[j][1]]
                        if((abs(urllist[j][0]-keylist[i][0]) &gt; closest[i])):
                            break # local minimum / inflection point break from url list                                                      
    if((len(keylist) &gt; 0) and (len(urllist) &gt; 0)):
        return urls #return website[urllist[index[0]][0]:urllist[index[0]][1]]                                                                
    else:
        return ""

    somestring = "hey whats up... http://www.firstlink.com some other test http://www.secondlink.com then mykeyword"
    keyword = "mykeyword"
    print closesturl(keyword, somestring)
</snippet></ROW><ROW><id>9056927</id><snippet>http://www.secondlink.com</snippet></ROW><ROW><id>9056942</id><snippet>if loadrect.collidepoint(mx,my) and mb[0]==1:
    filename = tkFileDialog.askopenfilename(filetypes=Formats,title="Choose an image to open")
    if filename!= None:
        surface = pygame.image.load(filename)
        screen.blit(surface,(203,44))
</snippet></ROW><ROW><id>9056964</id><snippet>b</snippet></ROW><ROW><id>9056964</id><snippet>a.remove(b)</snippet></ROW><ROW><id>9056964</id><snippet>b</snippet></ROW><ROW><id>9056964</id><snippet>a.remove(b)</snippet></ROW><ROW><id>9056964</id><snippet>a</snippet></ROW><ROW><id>9056964</id><snippet>b</snippet></ROW><ROW><id>9056964</id><snippet>KeyError</snippet></ROW><ROW><id>9056994</id><snippet>__init__</snippet></ROW><ROW><id>9056994</id><snippet>__init__</snippet></ROW><ROW><id>9056994</id><snippet>self</snippet></ROW><ROW><id>9056994</id><snippet>class MyClass:
    static_elem = 123

    def __init__(self):
        self.object_elem = 456

c1 = MyClass()
c2 = MyClass()

# Initial values of both elements
&gt;&gt;&gt; print c1.static_elem, c1.object_elem 
123 456
&gt;&gt;&gt; print c2.static_elem, c2.object_elem
123 456

# Nothing new so far ...

# Let's try changing the static element
MyClass.static_elem = 999

&gt;&gt;&gt; print c1.static_elem, c1.object_elem
999 456
&gt;&gt;&gt; print c2.static_elem, c2.object_elem
999 456

# Now, let's try changing the object element
c1.object_elem = 888

&gt;&gt;&gt; print c1.static_elem, c1.object_elem
999 888
&gt;&gt;&gt; print c2.static_elem, c2.object_elem
999 456
</snippet></ROW><ROW><id>9057333</id><snippet>AttributeError</snippet></ROW><ROW><id>9057333</id><snippet>try:
    a.foo
except AttributeError:
    ...
</snippet></ROW><ROW><id>9057390</id><snippet>reshape</snippet></ROW><ROW><id>9057390</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; b = numpy.array([[[1,2,3],[4,5,6]], [[10,11,12],[13,14,15]]])
&gt;&gt;&gt; b.reshape([2, 6])
array([[ 1,  2,  3,  4,  5,  6],
       [10, 11, 12, 13, 14, 15]])
</snippet></ROW><ROW><id>9057633</id><snippet>map</snippet></ROW><ROW><id>9057633</id><snippet>&gt;&gt;&gt; nums = map(lambda x : random.randint(0,7), range(50))
&gt;&gt;&gt; nums
[6, 6, 2, 4, 7, 6, 6, 7, 1, 4, 3, 2, 6, 1, 1, 2, 2, 0, 7, 
3, 6, 1, 5, 2, 1, 2, 6, 0, 3, 0, 2, 6, 0, 6, 3, 5, 0, 7, 
2, 5, 4, 1, 0, 0, 1, 4, 3, 3, 0, 3]
</snippet></ROW><ROW><id>9057633</id><snippet>x</snippet></ROW><ROW><id>9057633</id><snippet>&gt;&gt;&gt; cols = map(lambda i: colour[i], nums)
&gt;&gt;&gt; cols
['white', 'white', 'green', 'purple', 'black', 'white', 'white', 
'black', 'blue',     'purple', 'yellow', 'green', 'white', 
'blue', 'blue', 'green', 'green', 'red', 'black', 'yellow', 
'white', 'blue', 'orange', 'green', 'blue', 'green', 'white', 
'red', 'yellow', 'red', 'green', 'white', 'red', 'white', 
'yellow', 'orange', 'red', 'black', 'green', 'orange', 'purple', 
'blue', 'red', 'red', 'blue', 'purple', 'yellow', 'yellow', 'red', 
'yellow']
</snippet></ROW><ROW><id>9057633</id><snippet>random.choice()</snippet></ROW><ROW><id>9057723</id><snippet>#!/usr/bin/python

from BeautifulSoup import BeautifulSoup
import feedparser

feedurl = feedparser.parse('http://dustinheroin.chompblog.com/index.php?cat=22&amp;feed=rss2')
statusupdate = feedurl.entries[0].content


soup = BeautifulSoup(statusupdate[0]['value'])
print(soup.find("img")["src"])
</snippet></ROW><ROW><id>9057723</id><snippet>http://dustinheroin.chompblog.com/wp-content/uploads/2012/01/20120129-171134.jpg
</snippet></ROW><ROW><id>9057884</id><snippet>if a.has_key('href')
  links.append(a['href'])
</snippet></ROW><ROW><id>9057962</id><snippet>handle_connect</snippet></ROW><ROW><id>9058142</id><snippet>@media screen {
@font-face {
  font-family: 'Ubuntu';
  font-style: italic;
  font-weight: normal;
  src: local('Ubuntu Italic'), local('Ubuntu-Italic'), url('http://themes.googleusercontent.com/static/fonts/ubuntu/v4/kbP_6ONYVgE-bLa9ZRbvvvesZW2xOQ-xsNqO47m55DA.woff') format('woff');
}
}
@media screen {
@font-face {
  font-family: 'Ubuntu';
  font-style: normal;
  font-weight: normal;
  src: local('Ubuntu'), url('http://themes.googleusercontent.com/static/fonts/ubuntu/v4/_xyN3apAT_yRRDeqB3sPRg.woff') format('woff');
}
}
@media screen {
@font-face {
  font-family: 'Ubuntu';
  font-style: normal;
  font-weight: bold;
  src: local('Ubuntu Bold'), local('Ubuntu-Bold'), url('http://themes.googleusercontent.com/static/fonts/ubuntu/v4/0ihfXUL2emPh0ROJezvraD8E0i7KZn-EPnyo3HZu7kw.woff') format('woff');
}
}
</snippet></ROW><ROW><id>9058142</id><snippet>@media screen {
@font-face {
  font-family: 'Ubuntu';
  font-style: normal;
  font-weight: normal;
  src: local('Ubuntu'), url('/static/ubuntu_normal.woff') format('woff');
}
}
</snippet></ROW><ROW><id>9058166</id><snippet>pip uninstall BeautifulSoup
</snippet></ROW><ROW><id>9058166</id><snippet>python-pip</snippet></ROW><ROW><id>9058166</id><snippet>&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; BeautifulSoup
</snippet></ROW><ROW><id>9058322</id><snippet>getmembers</snippet></ROW><ROW><id>9058322</id><snippet>class MyClass(object):
    a = '12'
    b = '34'
    def myfunc(self):
        return self.a

&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getmembers(A, lambda a:not(inspect.isroutine(a)))
[('__class__', type),
 ('__dict__',
  &lt;dictproxy {'__dict__': &lt;attribute '__dict__' of 'A' objects&gt;,
   '__doc__': None,
   '__module__': '__main__',
   '__weakref__': &lt;attribute '__weakref__' of 'A' objects&gt;,
   'a': '34',
   'b': '12',
   'myfunc': &lt;function __main__.myfunc&gt;}&gt;),
 ('__doc__', None),
 ('__module__', '__main__'),
 ('__weakref__', &lt;attribute '__weakref__' of 'A' objects&gt;),
 ('a', '34'),
 ('b', '12')]
</snippet></ROW><ROW><id>9058322</id><snippet>&gt;&gt;&gt; attributes = inspect.getmembers(A, lambda a:not(inspect.isroutine(a)))
&gt;&gt;&gt; [a for a in attributes if not(a[0].startswith('__') and a[0].endswith('__'))]
[('a', '34'), ('b', '12')]
</snippet></ROW><ROW><id>9058335</id><snippet>add_plot</snippet></ROW><ROW><id>9058335</id><snippet>ar.add_plot(bar1, bar2, bar3)
</snippet></ROW><ROW><id>9058335</id><snippet>compactlist</snippet></ROW><ROW><id>9058335</id><snippet>bars = [interval_bar_plot.T(line_styles = [None, None],
                            fill_styles = [fill_style.red, None],
                            label=compactlist[n], cluster=(n,len(compactlist)))
        for n,item in enumerate(compactlist)]
</snippet></ROW><ROW><id>9058335</id><snippet>add_plot</snippet></ROW><ROW><id>9058335</id><snippet>bars</snippet></ROW><ROW><id>9058335</id><snippet>ar.add_plot(*bars)
</snippet></ROW><ROW><id>9058552</id><snippet>ravel</snippet></ROW><ROW><id>9058552</id><snippet>hstack</snippet></ROW><ROW><id>9058552</id><snippet>import numpy as np

myarray = np.empty((3,2),dtype = object)
myarray[:] = [[np.array([ 84,   0, 213, 232]), np.array([153, 0, 304, 363])],
 [np.array([ 33,   0,  56, 104]), np.array([ 83,   0,  77, 238])],
 [np.array([ 0, 0,  9, 61]), np.array([ 0,  0,  2, 74])]]

myarray = np.hstack(myarray.ravel()).reshape(3,2,4)
print(myarray)
# [[[ 84   0 213 232]
#   [153   0 304 363]]

#  [[ 33   0  56 104]
#   [ 83   0  77 238]]

#  [[  0   0   9  61]
#   [  0   0   2  74]]]

myarray = myarray.ravel().reshape(3,8)
print(myarray)
# [[ 84   0 213 232 153   0 304 363]
#  [ 33   0  56 104  83   0  77 238]
#  [  0   0   9  61   0   0   2  74]]
</snippet></ROW><ROW><id>9058552</id><snippet>import numpy as np

a = np.array([[1, 2, 3],
       [4, 5, 6]])
b = np.array([[ 7,  8,  9],
       [10, 11, 12]])
arr = np.array([a, b])
print(arr)
# [[[ 1  2  3]
#   [ 4  5  6]]

#  [[ 7  8  9]
#   [10 11 12]]]
</snippet></ROW><ROW><id>9058552</id><snippet>In [45]: arr[:,0,:]
Out[45]: 
array([[1, 2, 3],
       [7, 8, 9]])
</snippet></ROW><ROW><id>9058552</id><snippet>[1,2,3,7,8,9]</snippet></ROW><ROW><id>9058552</id><snippet>swapaxes</snippet></ROW><ROW><id>9058552</id><snippet>print(arr.swapaxes(0,1).reshape(2,6))
# [[ 1  2  3  7  8  9]
#  [ 4  5  6 10 11 12]]
</snippet></ROW><ROW><id>9058552</id><snippet>a</snippet></ROW><ROW><id>9058552</id><snippet>b</snippet></ROW><ROW><id>9058552</id><snippet>arr[0]</snippet></ROW><ROW><id>9058552</id><snippet>arr[1]</snippet></ROW><ROW><id>9058552</id><snippet>arr</snippet></ROW><ROW><id>9058552</id><snippet>hstack</snippet></ROW><ROW><id>9058552</id><snippet>arr = np.hstack([a, b])
# [[ 1  2  3  7  8  9]
#  [ 4  5  6 10 11 12]]
</snippet></ROW><ROW><id>9058835</id><snippet>:</snippet></ROW><ROW><id>9058835</id><snippet>with open('myfile.txt') as f:
  credentials = [x.strip().split(':') for x in f.readlines()]

for username,password in credentials:
  # your code here 
</snippet></ROW><ROW><id>9059268</id><snippet>itertools.repeat</snippet></ROW><ROW><id>9059268</id><snippet>(a) * n</snippet></ROW><ROW><id>9059268</id><snippet>[a] * n</snippet></ROW><ROW><id>9059268</id><snippet>itertools.repeat</snippet></ROW><ROW><id>9059268</id><snippet>itertools.repeat</snippet></ROW><ROW><id>9059268</id><snippet>func</snippet></ROW><ROW><id>9059268</id><snippet>itertools.repeat</snippet></ROW><ROW><id>9059268</id><snippet>repeat</snippet></ROW><ROW><id>9059268</id><snippet>itertools</snippet></ROW><ROW><id>9059268</id><snippet>itertools</snippet></ROW><ROW><id>9059268</id><snippet>repeat</snippet></ROW><ROW><id>9059268</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>9059268</id><snippet>repeat</snippet></ROW><ROW><id>9059268</id><snippet>class ZipExhausted(Exception):
    pass

def izip_longest(*args, **kwds):
    # izip_longest('ABCD', 'xy', fillvalue='-') --&gt; Ax By C- D-
    fillvalue = kwds.get('fillvalue')
    counter = [len(args) - 1]
    def sentinel():
        if not counter[0]:
            raise ZipExhausted
        counter[0] -= 1
        yield fillvalue
    fillers = repeat(fillvalue)
    iterators = [chain(it, sentinel(), fillers) for it in args]
    try:
        while iterators:
            yield tuple(map(next, iterators))
    except ZipExhausted:
        pass
</snippet></ROW><ROW><id>9059357</id><snippet>import os
import xml
from xml.etree import ElementTree as et 
path = r"/your/path/to/xml.file" 
tree = et.parse(path)
for node in tree.findall('.//northbc'):
    node.text = "New Value"
tree.write(path)
</snippet></ROW><ROW><id>9059407</id><snippet>def myfunction():
    v1 = get_a_value()
    raise Exception()

try:
    myfunction()
except:
    # can I access v1 from here?
    v1 = inspect.trace()[-1][0].f_locals['v1']
</snippet></ROW><ROW><id>9059407</id><snippet>trace</snippet></ROW><ROW><id>9059407</id><snippet>traceback</snippet></ROW><ROW><id>9059407</id><snippet>inspect</snippet></ROW><ROW><id>9059715</id><snippet>foo = "hey"
foo = foo or "what"
#foo is still "hey"

bar = None
bar = bar or "yeah"
#bar is "yeah"
</snippet></ROW><ROW><id>9059715</id><snippet>bar = None
bar = bar if bar else "yeah"
</snippet></ROW><ROW><id>9059715</id><snippet>||=</snippet></ROW><ROW><id>9059715</id><snippet>bar = locals()['bar'] if 'bar' in locals() else 'yeah'
</snippet></ROW><ROW><id>9059715</id><snippet>foo = foo if 'foo' in locals() else 'hey'
</snippet></ROW><ROW><id>9059715</id><snippet>NameError</snippet></ROW><ROW><id>9059715</id><snippet>//=</snippet></ROW><ROW><id>9059715</id><snippet>foo = locals().get('foo','hey')
</snippet></ROW><ROW><id>9059715</id><snippet>try:
   v
except NameError:
   v = 'bla bla'
</snippet></ROW><ROW><id>9059771</id><snippet>class FileUploadForm(Form)
    title = CharField()
    picture = FileField()

@logged_in_or_basicauth(realm="FileUpload")
def upload_view(request):
    if request.method == "POST"
        data = FileUploadForm(request.POST, request.FILES)
        if data.is_valid():
            #save out the file to the webserver here
        else:
            raise Exception('Data not valid! did you forget enctype="form/multipart"?')
    else:
       return HttpResponseForbidden("You do not have permission to access this resource")
</snippet></ROW><ROW><id>9059771</id><snippet>curl http://name:passwd@domain/upload/ -T uploadablepic.jpg -d title=holiday&amp;date=2012-10-02
</snippet></ROW><ROW><id>9059783</id><snippet>distutils</snippet></ROW><ROW><id>9059783</id><snippet>python setup.py install --user</snippet></ROW><ROW><id>9059783</id><snippet>python setup.py install</snippet></ROW><ROW><id>9059783</id><snippet>tweepy</snippet></ROW><ROW><id>9059783</id><snippet>tweepy</snippet></ROW><ROW><id>9059783</id><snippet>sys.path</snippet></ROW><ROW><id>9059783</id><snippet>sys.path</snippet></ROW><ROW><id>9059783</id><snippet>import sys
sys.path.append("/path/to/your/tweepy/directory")

import tweepy
</snippet></ROW><ROW><id>9059835</id><snippet>lists = List.objects.exclude(picture_url='') \
        .exclude(picture_url__icontains='google') \
        .select_related('city','city__country', 'user', 'user__profile') \
        .annotate(items_added=Count('item')) \
        .filter(items_added__gt=5)[:10]
</snippet></ROW><ROW><id>9059840</id><snippet>&gt;&gt;&gt; import topfolder.folder1.folder2.foo
&gt;&gt;&gt; foo.run()
</snippet></ROW><ROW><id>9059858</id><snippet>__dict__</snippet></ROW><ROW><id>9059858</id><snippet>class Wrapper(object):
    """Wrapper class that provides proxy access to an instance of some
       internal instance."""

    __wraps__  = None
    __ignore__ = "class mro new init setattr getattr getattribute"

    def __init__(self, obj):
        if self.__wraps__ is None:
            raise TypeError("base class Wrapper may not be instantiated")
        elif isinstance(obj, self.__wraps__):
            self._obj = obj
        else:
            raise ValueError("wrapped object must be of %s" % self.__wraps__)

    # provide proxy access to regular attributes of wrapped object
    def __getattr__(self, name):
        return getattr(self._obj, name)

    # create proxies for wrapped object's double-underscore attributes
    class __metaclass__(type):
        def __init__(cls, name, bases, dct):

            def make_proxy(name):
                def proxy(self, *args):
                    return getattr(self._obj, name)
                return proxy

            type.__init__(cls, name, bases, dct)
            if cls.__wraps__:
                ignore = set("__%s__" % n for n in cls.__ignore__.split())
                for name in dir(cls.__wraps__):
                    if name.startswith("__"):
                        if name not in ignore and name not in dct:
                            setattr(cls, name, property(make_proxy(name)))
</snippet></ROW><ROW><id>9059858</id><snippet>class DictWrapper(Wrapper):
    __wraps__ = dict

wrapped_dict = DictWrapper(dict(a=1, b=2, c=3))

# make sure it worked....
assert "b" in wrapped_dict                        # __contains__
assert wrapped_dict == dict(a=1, b=2, c=3)        # __eq__
assert "'a': 1" in str(wrapped_dict)              # __str__
assert wrapped_dict.__doc__.startswith("dict()")  # __doc__
</snippet></ROW><ROW><id>9060195</id><snippet>Paul_search_results.dot</snippet></ROW><ROW><id>9060195</id><snippet>f=sys.stdout</snippet></ROW><ROW><id>9060328</id><snippet>def write_to_file():
</snippet></ROW><ROW><id>9060455</id><snippet>subject = 'Email from',mcusername
</snippet></ROW><ROW><id>9060455</id><snippet>subject = 'Email from %s' % mcusername
</snippet></ROW><ROW><id>9060686</id><snippet>&gt;&gt;&gt;''.join( str(_) for _ in xrange(10) )
</snippet></ROW><ROW><id>9060686</id><snippet>''.join(map(str, xrange(10)))
</snippet></ROW><ROW><id>9060689</id><snippet>std::cin</snippet></ROW><ROW><id>9060689</id><snippet>char</snippet></ROW><ROW><id>9060689</id><snippet>struct State { unsigned i, j; };

State make();

void next(State&amp;);

bool isDone(State const&amp;);
</snippet></ROW><ROW><id>9060689</id><snippet>class PairSequence {
  typedef void (PairSequence::*BoolLike)();
  void non_comparable();
public:
  typedef std::input_iterator_tag iterator_category;
  typedef std::pair&lt;unsigned, unsigned&gt; value_type;
  typedef value_type const&amp; reference;
  typedef value_type const* pointer;
  typedef ptrdiff_t difference_type;

  PairSequence(): done(false) {}

  // Safe Bool idiom
  operator BoolLike() const {
    return done ? nullptr : &amp;PairSequence::non_comparable;
  }

  reference operator*() const { return ij; }
  pointer operator-&gt;() const { return &amp;ij; }

  PairSequence&amp; operator++() {
    static unsigned const Max = std::numeric_limts&lt;unsigned&gt;::max();

    assert(!done);

    if (ij.second != Max) { ++ij.second; return *this; }
    if (ij.first != Max) { ij.second = 0; ++ij.first; return *this; }

    done = true;
    return *this;
  }

  PairSequence operator++(int) {
    PairSequence const tmp(*this);
    ++*this;
    return tmp;
  }

private:
  bool done;
  value_type ij;
};
</snippet></ROW><ROW><id>9060766</id><snippet>a = {1: A}</snippet></ROW><ROW><id>9060766</id><snippet>A.x = 2</snippet></ROW><ROW><id>9060766</id><snippet>a[1].x</snippet></ROW><ROW><id>9060766</id><snippet>A</snippet></ROW><ROW><id>9061489</id><snippet>cv2</snippet></ROW><ROW><id>9061489</id><snippet>cv</snippet></ROW><ROW><id>9061489</id><snippet>simple.jpeg</snippet></ROW><ROW><id>9061489</id><snippet>FindContours</snippet></ROW><ROW><id>9061489</id><snippet>cv.FindContours</snippet></ROW><ROW><id>9061489</id><snippet>contours = cv.FindContours(imgg,storage,cv.CV_RETR_TREE,cv.CV_CHAIN_APPROX_SIMPLE,(0,0))
colours = [ (0,255,0,0),   # green
            (255,0,0,0),   # blue
            (255,255,0,0), # cyan
            (0,255,255,0), # yellow
            (255,0,255,0), # magenta
            (0,0,255,0)]   # red 
i=0
while contours:
    cv.DrawContours(img, contours, colours[i], colours[i], 0, thickness=-1)
    i = (i+1) % len(colours)
    contours = contours.h_next() # go to next contour
cv.ShowImage('img',img)
cv.WaitKey(0)
</snippet></ROW><ROW><id>9061489</id><snippet>list(contours)</snippet></ROW><ROW><id>9061489</id><snippet>cv.FindContours</snippet></ROW><ROW><id>9061489</id><snippet>contours = contours.h_next()</snippet></ROW><ROW><id>9061657</id><snippet>GetReport</snippet></ROW><ROW><id>9061657</id><snippet>Report</snippet></ROW><ROW><id>9061657</id><snippet>xs:string</snippet></ROW><ROW><id>9061657</id><snippet>string</snippet></ROW><ROW><id>9061657</id><snippet>S\xC3\xA3o</snippet></ROW><ROW><id>9061657</id><snippet>S\xE3o</snippet></ROW><ROW><id>9061657</id><snippet>encodeme = 'São Paulo'</snippet></ROW><ROW><id>9061657</id><snippet>encodeme.encode('utf-8)</snippet></ROW><ROW><id>9061657</id><snippet>'utf-8</snippet></ROW><ROW><id>9061657</id><snippet>&gt;&gt;&gt; reportbody = 'S\xc3\xa3o Paulo'   # UTF-8 encoded byte string
&gt;&gt;&gt; reportbody.decode('utf-8')        # returns a Unicode string, u'...'
u'S\xe3o Paulo'
</snippet></ROW><ROW><id>9061716</id><snippet>join</snippet></ROW><ROW><id>9061716</id><snippet>l = ['The','quick','brown','fox']
s = ''.join(l)
print(s)
</snippet></ROW><ROW><id>9061716</id><snippet>Thequickbrownfox
</snippet></ROW><ROW><id>9061815</id><snippet>[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
</snippet></ROW><ROW><id>9061815</id><snippet>for x in [1,2,3]:
    for y in [3,1,4]:
        if x != y:
            yield (x, y)
</snippet></ROW><ROW><id>9061815</id><snippet>[x for b in a for x in b]</snippet></ROW><ROW><id>9061815</id><snippet>for b in a:
    for x in b:
        yield x
</snippet></ROW><ROW><id>9061815</id><snippet>a = [[1,2,3],[4,5,6]]</snippet></ROW><ROW><id>9061815</id><snippet>[1, 2, 3, 4, 5, 6]</snippet></ROW><ROW><id>9061815</id><snippet>[[row[i] for row in matrix] for i in range(4)]</snippet></ROW><ROW><id>9061815</id><snippet>for i in range(4):
    yield [row[i] for row in matrix]
</snippet></ROW><ROW><id>9061815</id><snippet>for i in range(4):
    l = []

    for row in matrix:
        l.append(row[i])

    yield l
</snippet></ROW><ROW><id>9061866</id><snippet>html parsers</snippet></ROW><ROW><id>9061894</id><snippet>Flask/static/javascripts/*.js
Flask/static/stylesheets/*.css
</snippet></ROW><ROW><id>9062228</id><snippet>regex = u'(barbar)'
...
pattern.sub('TEXT1\\1TEXT2', oldstring)
# =&gt; u'TEXT1BarBaRTEXT2 TEXT1barbarTEXT2ian TEXT1BarbaRTEXT2ONt'
</snippet></ROW><ROW><id>9062228</id><snippet>barbar</snippet></ROW><ROW><id>9062228</id><snippet>\1</snippet></ROW><ROW><id>9062228</id><snippet>(...)</snippet></ROW><ROW><id>9062228</id><snippet>\number</snippet></ROW><ROW><id>9062228</id><snippet>pattern.sub(r'TEXT1\1TEXT2', oldstring)
</snippet></ROW><ROW><id>9062659</id><snippet>def update(self, id, data):
    return self.collection.update({"_id": _byid(id)}, data)       
</snippet></ROW><ROW><id>9062659</id><snippet>"$set"</snippet></ROW><ROW><id>9062668</id><snippet>os.walk()</snippet></ROW><ROW><id>9062668</id><snippet>topdown</snippet></ROW><ROW><id>9062668</id><snippet>True</snippet></ROW><ROW><id>9062668</id><snippet>dirs</snippet></ROW><ROW><id>9062668</id><snippet>import os
top='/home/aix'
for root, dirs, files in os.walk(top, topdown=True):
  print root
  dirs.sort(reverse=True)
</snippet></ROW><ROW><id>9062668</id><snippet>os.walk()</snippet></ROW><ROW><id>9062668</id><snippet>topdown</snippet></ROW><ROW><id>9062668</id><snippet>True</snippet></ROW><ROW><id>9062668</id><snippet>del</snippet></ROW><ROW><id>9062668</id><snippet>walk()</snippet></ROW><ROW><id>9062668</id><snippet>dirnames</snippet></ROW><ROW><id>9062668</id><snippet>walk()</snippet></ROW><ROW><id>9062668</id><snippet>walk()</snippet></ROW><ROW><id>9062779</id><snippet>environ</snippet></ROW><ROW><id>9062779</id><snippet>char**</snippet></ROW><ROW><id>9062779</id><snippet>from ctypes import *
libc = CDLL('libc.so.6')
environ = c_char_p.in_dll(libc, 'environ')
</snippet></ROW><ROW><id>9062779</id><snippet>char *</snippet></ROW><ROW><id>9062779</id><snippet>import os
print os.environ
</snippet></ROW><ROW><id>9062779</id><snippet>from ctypes import *
libc = CDLL('libc.so.6')
getenv = libc.getenv
getenv.restype = c_char_p
print getenv('HOME')
</snippet></ROW><ROW><id>9062837</id><snippet># My symmetric spectrum
spectrum = numpy.array( [0+0j,1+1j,2+2j,3+3j,0+0j,3-3j,2-2j,1-1j] )

# Perform the iFFT
print numpy.fft.ifft(spectrum)
</snippet></ROW><ROW><id>9062837</id><snippet>octave-3.4.0:1&gt; x = [1+1j,2+2j,3+3j,3-3j,2-2j];
octave-3.4.0:2&gt; y = ifft(x)
y =

   2.20000 + 0.20000i  -1.98979 + 0.20000i   0.59465 + 0.20000i  -0.74743 + 0.20000i   0.94258 + 0.20000i
</snippet></ROW><ROW><id>9062837</id><snippet>octave-3.4.0:3&gt; x = [0+0j,1+1j,2+2j,3+3j,0+0j,3-3j,2-2j,1-1j];
octave-3.4.0:4&gt; y = ifft(x)
y =

   1.50000  -1.56066   0.00000   0.14645  -0.50000   0.56066  -1.00000   0.85355
</snippet></ROW><ROW><id>9062919</id><snippet>ListProperty(db.Key)</snippet></ROW><ROW><id>9062919</id><snippet>db.get(userjournals.journals)</snippet></ROW><ROW><id>9062919</id><snippet>Journals</snippet></ROW><ROW><id>9062919</id><snippet>UserJournals</snippet></ROW><ROW><id>9063032</id><snippet>import re
re.sub(r',(\d\d)-', r',00\1-', '363898, Catullus,84-11-1 BC')
</snippet></ROW><ROW><id>9063032</id><snippet>r',(\d\d)-'</snippet></ROW><ROW><id>9063032</id><snippet>In [10]: entry = '363898,Catullus,84-11-1 BC'.split(',')
In [11]: numbers = entry[-1].split('-')
In [12]: numbers = '-'.join([numbers[0].zfill(4)] + numbers[1:])
In [13]: entry = entry = ','.join(entry[:-1] + [numbers])
In [14]: entry
Out[14]: '363898,Catullus,0084-11-1 BC'
</snippet></ROW><ROW><id>9063675</id><snippet>lambda</snippet></ROW><ROW><id>9063675</id><snippet>lambda</snippet></ROW><ROW><id>9063675</id><snippet>def set_it(x):
    x.attribute = new_value
map(set_it, li)
</snippet></ROW><ROW><id>9063675</id><snippet>for x in li:
    x.attribute = new_value
</snippet></ROW><ROW><id>9063675</id><snippet>map</snippet></ROW><ROW><id>9063675</id><snippet>for</snippet></ROW><ROW><id>9063675</id><snippet>map</snippet></ROW><ROW><id>9063675</id><snippet>map</snippet></ROW><ROW><id>9063675</id><snippet>for</snippet></ROW><ROW><id>9063675</id><snippet>map</snippet></ROW><ROW><id>9063927</id><snippet>clims</snippet></ROW><ROW><id>9063927</id><snippet>imagesc</snippet></ROW><ROW><id>9063927</id><snippet>imagesc(x,[0 8]);
</snippet></ROW><ROW><id>9063927</id><snippet>imagesc documentation</snippet></ROW><ROW><id>9064037</id><snippet>404 errors</snippet></ROW><ROW><id>9064037</id><snippet>urls.py</snippet></ROW><ROW><id>9064037</id><snippet>if settings.DEBUG:
    urlpatterns += patterns('',
        (r'^media/(?P&lt;path&gt;.*)$',
         'django.views.static.serve',
         {'document_root': settings.MEDIA_ROOT, 'show_indexes': True, }),
        (r'^static/(?P&lt;path&gt;.*)$',
         'django.views.static.serve',
         {'document_root': settings.STATIC_ROOT, 'show_indexes': True, }),
)
</snippet></ROW><ROW><id>9064037</id><snippet>&lt;script type="text/javascript" src="/tiny_mce/tiny_mce.js"&gt;&lt;/script&gt;</snippet></ROW><ROW><id>9064037</id><snippet>&lt;script type="text/javascript" src="{{ STATIC_URL }}/tiny_mce/tiny_mce.js"&gt;&lt;/script&gt;</snippet></ROW><ROW><id>9064295</id><snippet>build-pysnmp-mib</snippet></ROW><ROW><id>9064295</id><snippet>mibBuilder.importSymbols()</snippet></ROW><ROW><id>9064413</id><snippet>nmea-uploader</snippet></ROW><ROW><id>9064413</id><snippet>uploader</snippet></ROW><ROW><id>9064413</id><snippet>nmea</snippet></ROW><ROW><id>9064413</id><snippet>nmea</snippet></ROW><ROW><id>9064413</id><snippet>uploader</snippet></ROW><ROW><id>9064534</id><snippet>lxml.etree</snippet></ROW><ROW><id>9064534</id><snippet>xpath</snippet></ROW><ROW><id>9064534</id><snippet>from cStringIO import StringIO
from lxml import etree

xmlfile = StringIO("""
&lt;ThisIsMyData&gt;
  &lt;ITEM&gt;
    &lt;Number&gt;0&lt;/Number&gt;
    &lt;Flag1&gt;TRUE&lt;/Flag1&gt;
    &lt;Flag2&gt;FALSE&lt;/Flag2&gt;  
    &lt;Flag3&gt;FALSE&lt;/Flag3&gt;
    &lt;Label&gt;RED&lt;/Label&gt;
    &lt;Path&gt;C:\\test\\&lt;/Path&gt;
    &lt;file&gt;test.png&lt;/file&gt;
  &lt;/ITEM&gt;
  &lt;ITEM&gt;
    &lt;Number&gt;1&lt;/Number&gt;
    &lt;Flag1&gt;TRUE&lt;/Flag1&gt;
    &lt;Flag2&gt;FALSE&lt;/Flag2&gt;
    &lt;Flag3&gt;FALSE&lt;/Flag3&gt;
    &lt;Label&gt;Blue&lt;/Label&gt;
    &lt;Path&gt;c:\\test\\test2\\&lt;/Path&gt;
    &lt;file&gt;blue.png&lt;/file&gt;
  &lt;/ITEM&gt;
 &lt;/ThisIsMyData&gt;
""".strip())

datafile = StringIO("""
Label;FullPath
YELLOW;C:\\test\\test.png
YELLOW;c:\\test\\test2\\blue.png
""".strip())

# Read "csv". Simple, no error checking, skip first line.
filenameToLabel = {}
for l,f in (x.strip().split(';') for x in datafile.readlines()[1:]):
  filenameToLabel[f] = l

def first(seq,default=None):
  """xpath helper function"""
  for item in seq:
    return item
  return None

doc = etree.XML(xmlfile.read())

for item in doc.xpath('//ITEM'):
  item_filename = first(item.xpath('./Path/text()'),'').strip() + first(item.xpath('./file/text()'),'').strip()
  label = filenameToLabel.get(item_filename)
  if label is not None:
    first(item.xpath('./Flag1')).text = 'TRUE'
    first(item.xpath('./Flag2')).text = 'FALSE'
    first(item.xpath('./Flag3')).text = 'FALSE'
    first(item.xpath('./Label')).text = label

print etree.tostring(doc)
</snippet></ROW><ROW><id>9064534</id><snippet>&lt;ThisIsMyData&gt;
  &lt;ITEM&gt;
    &lt;Number&gt;0&lt;/Number&gt;
    &lt;Flag1&gt;TRUE&lt;/Flag1&gt;
    &lt;Flag2&gt;FALSE&lt;/Flag2&gt;
    &lt;Flag3&gt;FALSE&lt;/Flag3&gt;
    &lt;Label&gt;YELLOW&lt;/Label&gt;
    &lt;Path&gt;C:\test\&lt;/Path&gt;
    &lt;file&gt;test.png&lt;/file&gt;
  &lt;/ITEM&gt;
  &lt;ITEM&gt;
    &lt;Number&gt;1&lt;/Number&gt;
    &lt;Flag1&gt;TRUE&lt;/Flag1&gt;
    &lt;Flag2&gt;FALSE&lt;/Flag2&gt;
    &lt;Flag3&gt;FALSE&lt;/Flag3&gt;
    &lt;Label&gt;YELLOW&lt;/Label&gt;
    &lt;Path&gt;c:\test\test2\&lt;/Path&gt;
    &lt;file&gt;blue.png&lt;/file&gt;
  &lt;/ITEM&gt;
&lt;/ThisIsMyData&gt;
</snippet></ROW><ROW><id>9064582</id><snippet>LOGGING = { 
   'version': 1,
   'disable_existing_loggers': True,
   'formatters': {
       'simple': {
           'format': '%(levelname)s %(message)s',
       },  
   },  
   'handlers': {
       'console':{
           'level':'DEBUG',
           'class':'logging.StreamHandler',
           'formatter': 'simple'
       },  
   },  
   'loggers': {
       'django': {
           'handlers': ['console'],
           'level': 'DEBUG',
       },  
   }   
}
</snippet></ROW><ROW><id>9064582</id><snippet>runserver</snippet></ROW><ROW><id>9064582</id><snippet>/tmp</snippet></ROW><ROW><id>9064582</id><snippet>autocomplete_light_env/src/django-autocomplete-light/test_project</snippet></ROW><ROW><id>9064582</id><snippet>test_project/settings.py</snippet></ROW><ROW><id>9064582</id><snippet>LOGGING</snippet></ROW><ROW><id>9064582</id><snippet>Validating models...

0 errors found
Django version 1.4.1, using settings 'test_project.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
DEBUG (0.001) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = taggable  AND "django_content_type"."app_label" = charfield_autocomplete ); args=('taggable', 'charfield_autocomplete')
DEBUG (0.000) 
        SELECT DISTINCT "tagging_tag".id, "tagging_tag".name
        FROM
            "tagging_tag"
            INNER JOIN "tagging_taggeditem"
                ON "tagging_tag".id = "tagging_taggeditem".tag_id
            INNER JOIN "charfield_autocomplete_taggable"
                ON "tagging_taggeditem".object_id = "charfield_autocomplete_taggable"."id"

        WHERE "tagging_taggeditem".content_type_id = 11

        GROUP BY "tagging_tag".id, "tagging_tag".name

        ORDER BY "tagging_tag".name ASC; args=[]
</snippet></ROW><ROW><id>9065395</id><snippet>&gt;&gt;&gt; [ x for x in l if x[1] == "Plot" ]
[[8, 'Plot', 'Sunday'], [12, 'Plot', 'Monday'], [10, 'Plot', 'Tuesday'], [14, 'Plot', 'Wednesday'], [19, 'Plot', 'Thursday'], [28, 'Plot', 'Friday']]
&gt;&gt;&gt; [ x for x in l if x[1] == "unPlot" ]
[[1, 'unPlot', 'Monday'], [4, 'unPlot', 'Tuesday'], [6, 'unPlot', 'Wednesday'], [1, 'unPlot', 'Thursday'], [10, 'unPlot', 'Friday'], [3, 'unPlot', 'Saturday']]
</snippet></ROW><ROW><id>9065395</id><snippet>filter</snippet></ROW><ROW><id>9065395</id><snippet>&gt;&gt;&gt; filter(lambda x: x[1] == "Plot", l)
[[8, 'Plot', 'Sunday'], [12, 'Plot', 'Monday'], [10, 'Plot', 'Tuesday'], [14, 'Plot', 'Wednesday'], [19, 'Plot', 'Thursday'], [28, 'Plot', 'Friday']]
&gt;&gt;&gt; filter(lambda x: x[1] == "unPlot", l)
[[1, 'unPlot', 'Monday'], [4, 'unPlot', 'Tuesday'], [6, 'unPlot', 'Wednesday'], [1, 'unPlot', 'Thursday'], [10, 'unPlot', 'Friday'], [3, 'unPlot', 'Saturday']]
</snippet></ROW><ROW><id>9065590</id><snippet>from twisted.web import proxy, http
from twisted.internet import reactor
from twisted.python import log
import sys

log.startLogging(sys.stdout)

class MyProxy(proxy.Proxy):
    def dataReceived(self, data):

      # Modify the data here
      print data

      # perform the default functionality on modified data 
      return proxy.Proxy.dataReceived(self, data)

class ProxyFactory(http.HTTPFactory):
  protocol=MyProxy

factory = ProxyFactory()
reactor.listenTCP(8080, factory)
reactor.run()
</snippet></ROW><ROW><id>9065860</id><snippet>def test_index():
    tester = app.test_client()
    rv = tester.get('/', headers=[('X-Requested-With', 'XMLHttpRequest')])
    assert 'Hello world!' in rv.data
</snippet></ROW><ROW><id>9066165</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>9066165</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>9066165</id><snippet>&lt;body class="{% block body_class %}{% endblock %}"&gt;
</snippet></ROW><ROW><id>9066165</id><snippet>{% block body_class %}{% if block.super %}{{ block.super }} {% endblock %}maps{% endif %}{% endblock %}
</snippet></ROW><ROW><id>9066165</id><snippet>if</snippet></ROW><ROW><id>9066895</id><snippet>os.path.exists(r"C:\Users\mcmullma\Desktop\TestingDocuments\readListing.txt")
</snippet></ROW><ROW><id>9067012</id><snippet>print</snippet></ROW><ROW><id>9067012</id><snippet>cmp</snippet></ROW><ROW><id>9067012</id><snippet>sorted()</snippet></ROW><ROW><id>9067012</id><snippet>list.sort()</snippet></ROW><ROW><id>9067012</id><snippet>key</snippet></ROW><ROW><id>9067012</id><snippet>int</snippet></ROW><ROW><id>9067012</id><snippet>long</snippet></ROW><ROW><id>9067012</id><snippet>/</snippet></ROW><ROW><id>9067012</id><snippet>//</snippet></ROW><ROW><id>9067012</id><snippet>True</snippet></ROW><ROW><id>9067012</id><snippet>False</snippet></ROW><ROW><id>9067012</id><snippet>None</snippet></ROW><ROW><id>9067012</id><snippet>True, False = False, True</snippet></ROW><ROW><id>9067012</id><snippet>BaseException</snippet></ROW><ROW><id>9067050</id><snippet>from django.db import models
field_name = a.field_name
field = getattr(profile, field_name)
if isinstance(field, models.Model):
    # It's a model object
    # (accessing a foreign key returns a model object)
elif isinstance(field, models.manager.Manager):
    # It's a manager object
    # (accessing a many to many field returns a ManyRelatedManager)
else:
    raise ValueError("Unexpected field type")
</snippet></ROW><ROW><id>9067121</id><snippet>python manage.py &lt;command&gt;</snippet></ROW><ROW><id>9067149</id><snippet>cercle</snippet></ROW><ROW><id>9067149</id><snippet>def cercle(canv, x, y, rad):
    return canv.create_oval(x-rad, y-rad, x+rad, y+rad, width=2)
</snippet></ROW><ROW><id>9067149</id><snippet>self.ouvre</snippet></ROW><ROW><id>9067149</id><snippet>self.can.delete(self.ouvre)</snippet></ROW><ROW><id>9067205</id><snippet>my_tuple</snippet></ROW><ROW><id>9067205</id><snippet>.get()</snippet></ROW><ROW><id>9067205</id><snippet>&gt;&gt;&gt; my_lists = [[3,2,2,3,4,1,3,4], [1,2,3,4,5,6]]
&gt;&gt;&gt; my_tuple_list = [(3,5), (6, 7)]
&gt;&gt;&gt; my_dict = dict(my_tuple_list)
&gt;&gt;&gt; my_dict
{3: 5, 6: 7}
&gt;&gt;&gt; my_lists = [[my_dict.get(x,x) for x in somelist] for somelist in my_lists]
&gt;&gt;&gt; my_lists
[[5, 2, 2, 5, 4, 1, 5, 4], [1, 2, 5, 4, 5, 7]]
</snippet></ROW><ROW><id>9067371</id><snippet>webtable ={}
for frame in frames:
  for x, y in sources:
    if x_y_on_frame():
        keyTuple = (x,y,frame.filter.name)
        if not keyTuple in webtable:
            webtable[keyTuple] = {
            'ifile':frame.filename,
            'pFile':frame.pngfile,
            'fFile':frame.fitsfile,
            }
</snippet></ROW><ROW><id>9067708</id><snippet>from urllib import unquote
test_mailto = 'mailto:me@mail.com?subject=mysubject&amp;body=mybody'

def parse_mailto(mailto):
   result = dict()
   colon_split = mailto.split(':',1)
   quest_split = colon_split[1].split('?',1)
   result['email'] = quest_split[0]

   for pair in quest_split[1].split('&amp;'):
      name = unquote(pair.split('=')[0])
      value = unquote(pair.split('=')[1])
      result[name] = value

   return result

print parse_mailto(test_mailto)
</snippet></ROW><ROW><id>9067881</id><snippet>Congratulations $:Nome ! 
</snippet></ROW><ROW><id>9067973</id><snippet>hg pull</snippet></ROW><ROW><id>9067973</id><snippet>changegroup</snippet></ROW><ROW><id>9068306</id><snippet>HH______ LLLLLLLL QQQQQQQQ
</snippet></ROW><ROW><id>9068306</id><snippet>HH__IIII QQQQQQQQ
</snippet></ROW><ROW><id>9068306</id><snippet>HH__IIII QQQQQQQQ HH
</snippet></ROW><ROW><id>9068306</id><snippet>=</snippet></ROW><ROW><id>9068306</id><snippet>&gt;</snippet></ROW><ROW><id>9068306</id><snippet>&lt;</snippet></ROW><ROW><id>9068306</id><snippet>import struct
s = struct.Struct('=Q')
print s.size
s = struct.Struct('=HLQ')
print s.size
s = struct.Struct('=HIQ')
print s.size
s = struct.Struct('=HIQH')
print s.size
</snippet></ROW><ROW><id>9068706</id><snippet>[(16, 2)] + [(x,3) for x in range(14,19)] + [(x,4) for x in range(12,14)]
</snippet></ROW><ROW><id>9068749</id><snippet>#!/bin/sh
for x in `seq 1 22` X Y; do
   $samtools view -bh $bam $x | $bedtools bamtobed &gt; $bampath/$out/$x.bam
done
</snippet></ROW><ROW><id>9068749</id><snippet>bedtools</snippet></ROW><ROW><id>9068749</id><snippet>-i -</snippet></ROW><ROW><id>9068749</id><snippet>stdin</snippet></ROW><ROW><id>9068749</id><snippet>subprocess</snippet></ROW><ROW><id>9068749</id><snippet>cmd1 = [samtools, "view", "-bh", bam, x]
cmd2 = [bedtools, "bamtobed"]

c1 = subprocess.Popen(cmd1, stdout=subprocess.PIPE)
c2 = subprocess.Popen(cmd2, stdin=c1.stdout, stdout=open(outputfilename, "w"))
c1.stdout.close()
c2.communicate()
</snippet></ROW><ROW><id>9069009</id><snippet>read()</snippet></ROW><ROW><id>9069009</id><snippet>docx</snippet></ROW><ROW><id>9069009</id><snippet>in_file = open(os.path.join(settings.BASEPATH,'CompanyName.docx'), "rb")
</snippet></ROW><ROW><id>9069009</id><snippet>FileIO</snippet></ROW><ROW><id>9069131</id><snippet>HttpResponse(data, mimetype='application/json')</snippet></ROW><ROW><id>9069216</id><snippet>draw_graph</snippet></ROW><ROW><id>9069216</id><snippet>request</snippet></ROW><ROW><id>9069256</id><snippet>org.docx4j.convert.out.pdf.viaXSLFO.Conversion</snippet></ROW><ROW><id>9069256</id><snippet>requests</snippet></ROW><ROW><id>9069256</id><snippet>poster</snippet></ROW><ROW><id>9069694</id><snippet>sys.path</snippet></ROW><ROW><id>9069694</id><snippet>sys.path</snippet></ROW><ROW><id>9069694</id><snippet>import sys
sys.path.insert(0, '')
</snippet></ROW><ROW><id>9069722</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; BeautifulSoup(myString).text
u'Phone Number:706-878-8888'
</snippet></ROW><ROW><id>9069844</id><snippet>let timeSeries = dict [
             "20110131", 1.5; // ',' is tuple delimiter and ';' is list delimiter
             "20110228", 1.5;
             "20110331", 1.5; 
             "20110431", 1.5; 
             "20110531", 1.5; // The last ';' is optional
             ]
</snippet></ROW><ROW><id>9069844</id><snippet>:</snippet></ROW><ROW><id>9069844</id><snippet>let inline (=&gt;) a b = a, b

let timeSeries = dict [
         "20110131" =&gt; 1.5;
         "20110228" =&gt; 1.5;
         "20110331" =&gt; 1.5; 
         "20110431" =&gt; 1.5; 
         "20110531" =&gt; 1.5;
         ]
</snippet></ROW><ROW><id>9069900</id><snippet>try:
    func()          # call the function
except Exception:
    counter += 1    # this line is only executed if an exception was raised
</snippet></ROW><ROW><id>9070143</id><snippet>cd</snippet></ROW><ROW><id>9070143</id><snippet>cd transfer_dir
# execute the python scripts 
python merge.py
# restore old directory
cd ..                         
</snippet></ROW><ROW><id>9070173</id><snippet>filters</snippet></ROW><ROW><id>9070173</id><snippet>filters/__init__.py</snippet></ROW><ROW><id>9070173</id><snippet>filters/air.py</snippet></ROW><ROW><id>9070173</id><snippet>filters/__init__.py</snippet></ROW><ROW><id>9070173</id><snippet>from air import air</snippet></ROW><ROW><id>9070173</id><snippet>filters/air.py</snippet></ROW><ROW><id>9070173</id><snippet>air</snippet></ROW><ROW><id>9070173</id><snippet>$ python
Python 2.7.1+ (r271:86832, Apr 11 2011, 18:05:24) 
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from filters import air
&gt;&gt;&gt; air
&lt;class 'filters.air.air'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9070181</id><snippet>UserProfile</snippet></ROW><ROW><id>9070181</id><snippet>User</snippet></ROW><ROW><id>9070181</id><snippet>post_save</snippet></ROW><ROW><id>9070181</id><snippet>start_year</snippet></ROW><ROW><id>9070181</id><snippet>start_year = models.IntegerField(max_length=4, blank=False, null=True)
</snippet></ROW><ROW><id>9070181</id><snippet>ModelForm</snippet></ROW><ROW><id>9070181</id><snippet>class MyModelForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(MyModelForm, self).__init__(*args, **kwargs)
        self.fields['start_year'].required = True
</snippet></ROW><ROW><id>9070181</id><snippet>blank=False</snippet></ROW><ROW><id>9070181</id><snippet>start_year</snippet></ROW><ROW><id>9070181</id><snippet>ModelForm</snippet></ROW><ROW><id>9070181</id><snippet>ModelForm</snippet></ROW><ROW><id>9070347</id><snippet>a, b = x, y
</snippet></ROW><ROW><id>9070347</id><snippet>a = x
b = y
</snippet></ROW><ROW><id>9070347</id><snippet>call_command()</snippet></ROW><ROW><id>9070347</id><snippet>process.communicate()</snippet></ROW><ROW><id>9070347</id><snippet>output</snippet></ROW><ROW><id>9070347</id><snippet>_</snippet></ROW><ROW><id>9070381</id><snippet>numpy.load</snippet></ROW><ROW><id>9070381</id><snippet>.npy</snippet></ROW><ROW><id>9070381</id><snippet>.npz</snippet></ROW><ROW><id>9070381</id><snippet>numpy.save</snippet></ROW><ROW><id>9070381</id><snippet>numpy.savez</snippet></ROW><ROW><id>9070381</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>9070381</id><snippet>import numpy as np
mean_data = np.loadtxt("/Users/daydreamer/data/mean", delimiter=',')
</snippet></ROW><ROW><id>9070381</id><snippet>StringIO</snippet></ROW><ROW><id>9070381</id><snippet>import numpy as np
import StringIO

s = """0,0.104553357966
1,0.213014562052
2,0.280656379048
3,0.0654249076288
4,0.312223429689
5,0.0959008911106
6,0.114207780917
7,0.105294501195
8,0.0900673766572
9,0.23941317105
10,0.0598239513149
11,0.541701803956
12,0.093929580526"""

st = StringIO.StringIO(s)
a = np.loadtxt(st, delimiter=',')
</snippet></ROW><ROW><id>9070381</id><snippet>&gt;&gt;&gt; a
array([[  0.        ,   0.10455336],
       [  1.        ,   0.21301456],
       [  2.        ,   0.28065638],
       [  3.        ,   0.06542491],
       [  4.        ,   0.31222343],
       [  5.        ,   0.09590089],
       [  6.        ,   0.11420778],
       [  7.        ,   0.1052945 ],
       [  8.        ,   0.09006738],
       [  9.        ,   0.23941317],
       [ 10.        ,   0.05982395],
       [ 11.        ,   0.5417018 ],
       [ 12.        ,   0.09392958]])
</snippet></ROW><ROW><id>9070549</id><snippet>brew install pil</snippet></ROW><ROW><id>9070549</id><snippet>$(brew --prefix)/lib/python2.7/site-packages</snippet></ROW><ROW><id>9070549</id><snippet>PIL.pth</snippet></ROW><ROW><id>9070549</id><snippet>/usr/local/lib/python2.7/site-packages/PIL
</snippet></ROW><ROW><id>9070549</id><snippet>brew --prefix</snippet></ROW><ROW><id>9070549</id><snippet>/usr/local</snippet></ROW><ROW><id>9070549</id><snippet># download
curl -O -L http://effbot.org/media/downloads/Imaging-1.1.7.tar.gz
# extract
tar -xzf Imaging-1.1.7.tar.gz
cd Imaging-1.1.7
# build and install
python setup.py build
sudo python setup.py install
# or install it for just you without requiring admin permissions:
# python setup.py install --user
</snippet></ROW><ROW><id>9070769</id><snippet>&lt;project_root&gt;/templates/comments/posted.html
</snippet></ROW><ROW><id>9070983</id><snippet>q_str</snippet></ROW><ROW><id>9070983</id><snippet>stop_arr</snippet></ROW><ROW><id>9070983</id><snippet>sans_arr = [ x for x in q_str if x not in stop_arr ]
</snippet></ROW><ROW><id>9071002</id><snippet>ssh user@host.com -L 9990:localhost:3306
</snippet></ROW><ROW><id>9071204</id><snippet>open -a Terminal /path/to/python/script.py
</snippet></ROW><ROW><id>9071484</id><snippet>related_name</snippet></ROW><ROW><id>9071484</id><snippet>Action</snippet></ROW><ROW><id>9071484</id><snippet>FieldDiff</snippet></ROW><ROW><id>9071484</id><snippet>Action</snippet></ROW><ROW><id>9071484</id><snippet>Action_set</snippet></ROW><ROW><id>9071484</id><snippet>related_name</snippet></ROW><ROW><id>9071490</id><snippet>&lt;iframe style="display:none;" id="myiframe"/&gt;
</snippet></ROW><ROW><id>9071490</id><snippet>$("#myiframe").src(url);
</snippet></ROW><ROW><id>9072095</id><snippet>{}</snippet></ROW><ROW><id>9072095</id><snippet>dbm</snippet></ROW><ROW><id>9072193</id><snippet>def get_majority(a):
    a = a.ravel()
    a = np.sort(a)
    diff = np.empty(len(a)+1, 'bool')
    diff[0] = True
    diff[-1] = True
    diff[1:-1] = a[1:] != a[:-1]
    where = np.where(diff)[0]
    counts = where[1:] - where[:-1]
    argmax = counts.argmax()
    uniq_a = a[diff[1:]]
    return uniq_a[argmax]
</snippet></ROW><ROW><id>9072193</id><snippet>(n*n, x, y)</snippet></ROW><ROW><id>9072193</id><snippet>X, Y = a.shape
x = X // n
y = Y // n
a = a.reshape( (x, n, y, n) )
a = a.transpose( [1, 3, 0, 2] )
a = a.reshape( (n*n, x, y) )
</snippet></ROW><ROW><id>9072229</id><snippet>ProcessedImageField</snippet></ROW><ROW><id>9072229</id><snippet>from imagekit.models import ProcessedImageField

class Photo(models.Model):
    original = ProcessedImageField(etcetera)
</snippet></ROW><ROW><id>9072238</id><snippet>def resolve(path):
    "fully resolve a schema that includes other schemas"
    data = open(path).read()
    # fill in any while they remain
    while True:
        beg = data.find('`')
        end = data.find('`', beg + 1)
        if beg &lt; 0:
            break
        path = os.path.join(os.path.dirname(path), data[beg+1:end] + '.avsc')
        data = data[:beg] + resolve(path) + data[end+1:]
    return data
</snippet></ROW><ROW><id>9072259</id><snippet>p = re.compile('float\[[0-9]*\]')
</snippet></ROW><ROW><id>9072315</id><snippet>sys.path</snippet></ROW><ROW><id>9072315</id><snippet>sys.path</snippet></ROW><ROW><id>9072371</id><snippet>*</snippet></ROW><ROW><id>9072371</id><snippet>[here,none,none,none] 
</snippet></ROW><ROW><id>9072371</id><snippet>[[None for i in range(n)] for j in range(n)]
</snippet></ROW><ROW><id>9072371</id><snippet>[[None]*n for j in range(n)]. 
</snippet></ROW><ROW><id>9072371</id><snippet>None</snippet></ROW><ROW><id>9072704</id><snippet>str='test'
example={'test':'value',}
return example.get(str, None) or None
</snippet></ROW><ROW><id>9072704</id><snippet>return example.get(str) or None
</snippet></ROW><ROW><id>9072704</id><snippet>example = {
    'test' : 'value', 
    'test2': 0, 
    'test3': [],
}
test = lambda k: k in example and example[k] or None
print test('test')
# value
print test('test2')
# None
print test('test3')
# None
</snippet></ROW><ROW><id>9072835</id><snippet>MemoryError</snippet></ROW><ROW><id>9072862</id><snippet>&gt;&gt;&gt; string_1 = "(555).555-5555"
&gt;&gt;&gt; string_2 = "(555) 555 - 5555 ext. 5555"
&gt;&gt;&gt; any(c.isalpha() for c in string_1)
False
&gt;&gt;&gt; any(c.isalpha() for c in string_2)
True
</snippet></ROW><ROW><id>9072978</id><snippet>random</snippet></ROW><ROW><id>9072978</id><snippet>def mynonrandom():
 return 0.1

q
[1, 2, 3, 4]
random.shuffle(q, mynonrandom)
q
[2, 3, 4, 1]
random.shuffle(q, mynonrandom)
q
[3, 4, 1, 2]
</snippet></ROW><ROW><id>9073010</id><snippet>eval</snippet></ROW><ROW><id>9073010</id><snippet>dict</snippet></ROW><ROW><id>9073010</id><snippet>&gt;&gt;&gt; [eval(i, {"__builtins__":None}) for i in ['6.2', '"Hello, world!"', '7']]
[6.2, 'Hello, world!', 7]
</snippet></ROW><ROW><id>9073212</id><snippet>field_names = list(field_names)
field_names.sort()
</snippet></ROW><ROW><id>9073212</id><snippet>set &amp; set</snippet></ROW><ROW><id>9073212</id><snippet>field_names = [field.name for field in opts.fields]
if fields:
    field_names = filter(lambda field: field in fields, field_names)
elif exclude:
    field_names = filter(lambda field: field not in exclude, field_names)   
</snippet></ROW><ROW><id>9073224</id><snippet>public static String convertStreamToString(InputStream is) {
    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
    StringBuilder sb = new StringBuilder();

    String line = null;
    try {
        while ((line = reader.readLine()) != null) {

            sb.append(line + "\n");

        }
    } catch (IOException e) {


    } finally {
        try {
            is.close();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }
    return sb.toString();
}
</snippet></ROW><ROW><id>9073299</id><snippet>query_string = query_array[1:-1] #remove the parentheses with slicing
queries_with_whitespace = query_string.split(",") #split the string into a list
queries = [query.strip() for query in queries_with_whitespace] #remove whitespace
# queries = [item.strip() for item in query_array[1:-1].split(",")] #all in one
</snippet></ROW><ROW><id>9073299</id><snippet>def stem_and_syns(unformatted_string): #unformatted string is your stem_array
    stem_string = unformatted_string[1:-1] #same as before
    stem, synonyms_string = stem_string.split("|") #split the stem and synonyms
    stem = stem.strip() #clean the stem
    synonyms = [synonym.strip() for synonym in synonym_string.split(",")] #same as before
    return stem, synonyms
</snippet></ROW><ROW><id>9073299</id><snippet>stem_lookup = {}
for stem_string in stem_strings #stem_strings is the set of all of your non-formatted stem strings
    stem, synonyms = stem_and_syns(stem_string)
    for synonym in synonyms:
        #point all synonyms to a list of possible stems
        stem_lookup.setdefault(synonym, []).append(stem)) #make a new list if this synonym not used yet
</snippet></ROW><ROW><id>9073299</id><snippet>result = [stem_lookup.get(original,original) for original in queries] #uses original itself if it's not a synonym
</snippet></ROW><ROW><id>9073319</id><snippet>ghci</snippet></ROW><ROW><id>9073319</id><snippet>_</snippet></ROW><ROW><id>9073319</id><snippet>it</snippet></ROW><ROW><id>9073319</id><snippet>Prelude&gt; 2+2
4
Prelude&gt; it
4
</snippet></ROW><ROW><id>9073707</id><snippet>username</snippet></ROW><ROW><id>9073707</id><snippet>password</snippet></ROW><ROW><id>9073707</id><snippet>username[0]
</snippet></ROW><ROW><id>9073707</id><snippet>print username</snippet></ROW><ROW><id>9073707</id><snippet>credentials</snippet></ROW><ROW><id>9073707</id><snippet>[['username1', 'password1'], ['username2', 'password2'], ['username3', 'password3']]
</snippet></ROW><ROW><id>9073707</id><snippet>print credentials[0]</snippet></ROW><ROW><id>9073707</id><snippet>['username1', 'password1']
</snippet></ROW><ROW><id>9073707</id><snippet>print credentials[1]</snippet></ROW><ROW><id>9073707</id><snippet>['username2', 'password2']
</snippet></ROW><ROW><id>9073707</id><snippet>username, password = credentials[0]
print username, password
</snippet></ROW><ROW><id>9073707</id><snippet>username1 password1
</snippet></ROW><ROW><id>9073707</id><snippet>'username1'</snippet></ROW><ROW><id>9073707</id><snippet>username[0]
</snippet></ROW><ROW><id>9073707</id><snippet>u</snippet></ROW><ROW><id>9073732</id><snippet>libz.so</snippet></ROW><ROW><id>9073732</id><snippet>/usr/lib</snippet></ROW><ROW><id>9073732</id><snippet>/usr/lib/i386-linux-gnu/libz.so</snippet></ROW><ROW><id>9073732</id><snippet>find . -name libz.so</snippet></ROW><ROW><id>9073732</id><snippet>sudo ln -s /usr/lib/i386-linux-gnu/libz.so /usr/lib</snippet></ROW><ROW><id>9073823</id><snippet>random_colors = [random.choice(colors) for x in range(50)]

#because python's lambda is crappy, an extra local/global function must be defined
def count_color(di, color):
    di.setdefault(color, 0)
    di[color] = di[color]+1
    return di

result = reduce(count_color, random_colors, {})
#The result is what you want
</snippet></ROW><ROW><id>9073872</id><snippet>()</snippet></ROW><ROW><id>9073872</id><snippet>command</snippet></ROW><ROW><id>9073872</id><snippet>filemenu.add_command(label="New...", command=self.new())
</snippet></ROW><ROW><id>9073872</id><snippet>filemenu.add_command(label="New...", command=self.new)
</snippet></ROW><ROW><id>9073872</id><snippet>filemenu.add_command(label="Exit", command=app.quit)</snippet></ROW><ROW><id>9074141</id><snippet>f1</snippet></ROW><ROW><id>9074141</id><snippet>f2</snippet></ROW><ROW><id>9074141</id><snippet>b</snippet></ROW><ROW><id>9074141</id><snippet>b</snippet></ROW><ROW><id>9074141</id><snippet>f1</snippet></ROW><ROW><id>9074141</id><snippet>def f3(a, l= []):
   l = l + [a]
   return l
</snippet></ROW><ROW><id>9074141</id><snippet>f2</snippet></ROW><ROW><id>9074141</id><snippet>l</snippet></ROW><ROW><id>9074141</id><snippet>None</snippet></ROW><ROW><id>9074141</id><snippet>def f1(a, l = None):
   if l is None:
       l = []

   l.append(a)

   return l
</snippet></ROW><ROW><id>9074144</id><snippet>date_created</snippet></ROW><ROW><id>9074144</id><snippet>date_created</snippet></ROW><ROW><id>9074144</id><snippet>get_for_date</snippet></ROW><ROW><id>9074144</id><snippet>"date_created__lt"</snippet></ROW><ROW><id>9074144</id><snippet>"__lte"</snippet></ROW><ROW><id>9074144</id><snippet>def get_previous(object, date):
    """Returns the latest version of an object prior to the given date."""
    versions = reversion.get_for_object(object)
    versions = versions.filter(revision__date_created__lt=date)
    try:
        version = versions[0]
    except IndexError:
        raise Version.DoesNotExist
    else:
        return version
</snippet></ROW><ROW><id>9074245</id><snippet>chmod +x /full/path/to/file.py
</snippet></ROW><ROW><id>9074245</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>9074245</id><snippet>./file.py
</snippet></ROW><ROW><id>9074245</id><snippet>file.py</snippet></ROW><ROW><id>9074287</id><snippet>names = ['tom','mary','jessica','john']
fruits = ['oranges','apples','grapes','bananas']
hobbies = ['dancing','sitting','bicycling','watching tv']

for name in names:
    for fruit in fruits:
        for hobby in hobbies:
            print '%(name)s likes to eat %(fruit)s while %(hobby)s' % {'name':name, 'fruit':fruit, 'hobby':hobby}
</snippet></ROW><ROW><id>9074287</id><snippet>tom likes to eat oranges while dancing
tom likes to eat oranges while sitting
tom likes to eat oranges while bicycling
tom likes to eat oranges while watching tv
tom likes to eat apples while dancing
[etc.]
john likes to eat bananas while bicycling
john likes to eat bananas while watching tv
</snippet></ROW><ROW><id>9074287</id><snippet>product</snippet></ROW><ROW><id>9074287</id><snippet>import itertools

for name, fruit, hobby in itertools.product(names, fruits, hobbies):
    print '%(name)s likes to eat %(fruit)s while %(hobby)s' % {'name':name, 'fruit':fruit, 'hobby':hobby}
</snippet></ROW><ROW><id>9074361</id><snippet>LIBMEMCACHED=/opt/local pip install pylibmc</snippet></ROW><ROW><id>9074374</id><snippet>def minutes(s, e):
    secs = (e - s).seconds 
    return (s + datetime.timedelta(minutes = x) for x in xrange(secs / 60 + 1))
</snippet></ROW><ROW><id>9074374</id><snippet>&gt;&gt;&gt; today = datetime.datetime(2012, 1, 31, 15, 20)
&gt;&gt;&gt; for m in minutes(today, today + datetime.timedelta(minutes = 5)):
...     print m
2012-01-31 15:20:00
2012-01-31 15:21:00
2012-01-31 15:22:00
2012-01-31 15:23:00
2012-01-31 15:24:00
2012-01-31 15:25:00
</snippet></ROW><ROW><id>9074465</id><snippet>new = m[0, :12:2, :12:2]</snippet></ROW><ROW><id>9074465</id><snippet>In [3]: a = np.zeros((2, 3, 4))

In [4]: b = a[0, 1, ::2]

In [5]: b
Out[5]: array([ 0.,  0.])

In [6]: b[:] = 7

In [7]: a
Out[7]: 
array([[[ 0.,  0.,  0.,  0.],
        [ 7.,  0.,  7.,  0.],
        [ 0.,  0.,  0.,  0.]],

       [[ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.]]])
</snippet></ROW><ROW><id>9074465</id><snippet>In [10]: a = np.arange(9).reshape(3,3)

In [11]: a
Out[11]: 
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])

In [12]: index = np.array([0,1,2])

In [13]: b = a[index, index]

In [14]: b
Out[14]: array([0, 4, 8])
</snippet></ROW><ROW><id>9074465</id><snippet>In [22]: index1 = np.array([[0,0],[1,1]])

In [23]: index2 = np.array([[0,1],[0,1]])

In [24]: b = a[index1, index2]

In [25]: b
Out[25]: 
array([[0, 1],
       [3, 4]])
</snippet></ROW><ROW><id>9074465</id><snippet>In [28]: index = np.array([0,1])

In [29]: index1, index2 = np.ix_(index, index)

In [31]: index1
Out[31]: 
array([[0],
       [1]])

In [32]: index2
Out[32]: array([[0, 1]])

In [33]: a[index1, index2]
Out[33]: 
array([[0, 1],
       [3, 4]])

In [34]: a[np.ix_(index, index)]
Out[34]: 
array([[0, 1],
       [3, 4]])
</snippet></ROW><ROW><id>9074465</id><snippet>index1</snippet></ROW><ROW><id>9074465</id><snippet>(2, 1)</snippet></ROW><ROW><id>9074465</id><snippet>index2</snippet></ROW><ROW><id>9074465</id><snippet>(1, 2)</snippet></ROW><ROW><id>9074465</id><snippet>(2, 2)</snippet></ROW><ROW><id>9074479</id><snippet>if any(f.startswith(existingXML) and f.endswith('.xml') for f in check_meta):
   print "exists"
</snippet></ROW><ROW><id>9074479</id><snippet>any()</snippet></ROW><ROW><id>9074479</id><snippet>f.startswith(existingXML) and f.endswith('.xml')</snippet></ROW><ROW><id>9074479</id><snippet>f</snippet></ROW><ROW><id>9074479</id><snippet>check_meta</snippet></ROW><ROW><id>9074479</id><snippet>regex = re.compile(re.escape(existingXML) + '.*\.xml$')
if any(regex.match(f) for f in check_meta):
    print "exists"
</snippet></ROW><ROW><id>9074479</id><snippet>for f in check_meta:
    if f.startswith(existingXML) and f.endswith('.xml'):
        print "exists, file name:", f
</snippet></ROW><ROW><id>9074588</id><snippet>.8 alpha</snippet></ROW><ROW><id>9074887</id><snippet>&gt;&gt;&gt; class RBnode(object):
...   pass
... 
&gt;&gt;&gt; x = RBnode()
&gt;&gt;&gt; y = RBnode()
&gt;&gt;&gt; id(x), id(y)
(20552592, 20552528)
&gt;&gt;&gt; x,y = y,x
&gt;&gt;&gt; id(x), id(y)
(20552528, 20552592)
</snippet></ROW><ROW><id>9075548</id><snippet>conn.commit()
</snippet></ROW><ROW><id>9075801</id><snippet>&gt;&gt;&gt; o = Foo()
&gt;&gt;&gt; o
&lt;__main__.Foo object at 0x8ff6a8c&gt;
&gt;&gt;&gt; o()
'bar'
</snippet></ROW><ROW><id>9075801</id><snippet>__call__()</snippet></ROW><ROW><id>9076163</id><snippet>for item, qnt in request.POST:
    {do something with each item, for example where you can sum total}
</snippet></ROW><ROW><id>9076238</id><snippet>MyForm</snippet></ROW><ROW><id>9076238</id><snippet>MyForm</snippet></ROW><ROW><id>9076238</id><snippet>MyPopupDialog</snippet></ROW><ROW><id>9076238</id><snippet>popup</snippet></ROW><ROW><id>9076238</id><snippet>exec_()</snippet></ROW><ROW><id>9076238</id><snippet>show()</snippet></ROW><ROW><id>9076238</id><snippet># Necessary imports

class MyPopupDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        # Regular init stuff...
        # and other things you might want


class MyForm(QtGui.QDialog):
    def __init__(self, parent=None):
        # Here, you should call the inherited class' init, which is QDialog
        QtGui.QDialog.__init__(self, parent)

        # Usual setup stuff
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)

        # Use new style signal/slots
        self.ui.pushButton.clicked.connect(self.popup)     

        # Other things...

   def popup(self):
        self.dialog = MyPopupDialog()

        # For Modal dialogs
        self.dialog.exec_()

        # Or for modeless dialogs
        # self.dialog.show()

if __name__ == "__main__":
   app = QtGui.QApplication(sys.argv)
   myapp= MyForm()
   myapp.show()
   sys.exit(app.exec_())
</snippet></ROW><ROW><id>9076432</id><snippet>a</snippet></ROW><ROW><id>9076432</id><snippet>b</snippet></ROW><ROW><id>9076432</id><snippet>c</snippet></ROW><ROW><id>9076432</id><snippet>__call__</snippet></ROW><ROW><id>9076432</id><snippet>class quad:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __call__(x):
        return self.a * x**2 + self.b * x + self.c

q = quad(p, q, r)
q(x)
</snippet></ROW><ROW><id>9076432</id><snippet>def quad(a, b, c):
    def __quad(x):
        return a * x**2 + b * x + c

    return __quad
</snippet></ROW><ROW><id>9076432</id><snippet>lambda</snippet></ROW><ROW><id>9076432</id><snippet>def quad(a, b, c):
    return lambda x: a * x**2 + b * x + c
</snippet></ROW><ROW><id>9076432</id><snippet>q = quad(p, q, r)
q(x)
</snippet></ROW><ROW><id>9076522</id><snippet>SyntaxErrorException</snippet></ROW><ROW><id>9076522</id><snippet>GetObjectData()</snippet></ROW><ROW><id>9076522</id><snippet>SyntaxErrorException</snippet></ROW><ROW><id>9076522</id><snippet>[SecurityCritical]</snippet></ROW><ROW><id>9076544</id><snippet>def tau(n):
        sqroot,t = int(n**0.5),0
        for factor in range(1,sqroot+1):
                if n % factor == 0:
                        t += 2 # both factor and N/factor
        if sqroot*sqroot == n: t = t - 1 # if sqroot is a factor then we counted it twice, so subtract 1
        return t
</snippet></ROW><ROW><id>9076544</id><snippet>n</snippet></ROW><ROW><id>9076544</id><snippet>tau(n) = (e1+1)(e2+1)....(em+1)</snippet></ROW><ROW><id>9076544</id><snippet>n = p1^e1 * p2^e2 .... pm^em</snippet></ROW><ROW><id>9076544</id><snippet>p1,p2..pm are primes</snippet></ROW><ROW><id>9076544</id><snippet>tau</snippet></ROW><ROW><id>9076544</id><snippet>def sieve(N):
        t = [0]*(N+1)
        for factor in range(1,N+1):
                for multiple in range(factor,N+1,factor):
                        t[multiple]+=1
        return t[1:]
</snippet></ROW><ROW><id>9076655</id><snippet>ItemInfoForm</snippet></ROW><ROW><id>9076655</id><snippet>ItemForm</snippet></ROW><ROW><id>9076655</id><snippet>instance</snippet></ROW><ROW><id>9076655</id><snippet>ItemInfo</snippet></ROW><ROW><id>9076655</id><snippet>item_info_form = ItemInfoForm(instance=item_info)
</snippet></ROW><ROW><id>9076948</id><snippet>__doc__</snippet></ROW><ROW><id>9076948</id><snippet>doctest module</snippet></ROW><ROW><id>9077235</id><snippet>fcntl.LOCK_NB</snippet></ROW><ROW><id>9077235</id><snippet>import warnings
try:
    fcntl.flock(myfile, fcntl.LOCK_EX|fcntl.LOCK_NB)
except IOError:
    warnings.warn("can't immediately write-lock the file ($!), blocking ...")
    fcntl.flock(myfile, fcntl.LOCK_EX)
</snippet></ROW><ROW><id>9077441</id><snippet>class Wifi(...):
    def connect(...):
        ...
        us = NetworkManagerUserSettings([]) 
</snippet></ROW><ROW><id>9077475</id><snippet>input_dict = {1: [1,2,3,4], 2: [2,3,4], 3:[1,2,3]}
#Get key/length(list) type tuples
helper = [(key, len(input_dict[key])) for key in input_dict.keys()]
#Sort list by the second element of the tuple(the length of the list) 
helper.sort(key=lambda x: x[1])

#Now the first position hold the key to the shortest list from the dicitonary and the length
print input_dict[helper[0][0]]
</snippet></ROW><ROW><id>9077500</id><snippet>for val = {'Hello', 'world', '!'}
    disp(val)
end

for val = [1 3 6 9]
    disp(val)
end
</snippet></ROW><ROW><id>9077661</id><snippet>tuple</snippet></ROW><ROW><id>9077661</id><snippet>dict</snippet></ROW><ROW><id>9077661</id><snippet>defaultdict</snippet></ROW><ROW><id>9077661</id><snippet>from collections import defaultdict

lst = [(8L, 'Mail Opened', 'Saturday'), (4L, 'Mail Not Opened', 'Saturday'), (2L, 'Mail Not Opened', 'Sunday'), (8L, 'Mail Opened', 'Sunday'), (1L, 'Mail Not Opened', 'Monday'), (1L, 'Mail Not Opened', 'Monday'), (12L, 'Mail Opened', 'Monday'), (10L, 'Mail Opened', 'Tuesday'), (4L, 'Mail Not Opened', 'Tuesday'), (14L, 'Mail Opened', 'Wednesday'), (6L, 'Mail Not Opened', 'Wednesday'), (1L, 'Mail Not Opened', 'Thursday'), (19L, 'Mail Opened', 'Thursday'), (28L, 'Mail Opened', 'Friday'), (1L, 'Mail Opened', 'Friday')]

d = {'Mail Opened': defaultdict(list), 'Mail Not Opened': defaultdict(list)}

for num,mail,day in lst:
    d[mail][day].append(num)
</snippet></ROW><ROW><id>9077661</id><snippet>from collections import defaultdict

lst = [(8, 'Mail Opened', 'Saturday'), (4, 'Mail Not Opened', 'Saturday'), (2, 'Mail Not Opened', 'Sunday'), (8, 'Mail Opened', 'Sunday'), (1, 'Mail Not Opened', 'Monday'), (1, 'Mail Not Opened', 'Monday'), (12, 'Mail Opened', 'Monday'), (10, 'Mail Opened', 'Tuesday'), (4, 'Mail Not Opened', 'Tuesday'), (14, 'Mail Opened', 'Wednesday'), (6, 'Mail Not Opened', 'Wednesday'), (1, 'Mail Not Opened', 'Thursday'), (19, 'Mail Opened', 'Thursday'), (28, 'Mail Opened', 'Friday'), (1, 'Mail Opened', 'Friday')]


days = defaultdict(lambda : {'Mail Opened': [], 'Mail Not Opened': []})

for num,mail,day in lst:
    days[day][mail].append(num)
</snippet></ROW><ROW><id>9077661</id><snippet>for k,v in days.iteritems():
    print k, v

"""
Monday {'Mail Not Opened': [1, 1], 'Mail Opened': [12]}
Tuesday {'Mail Not Opened': [4], 'Mail Opened': [10]}
Friday {'Mail Not Opened': [], 'Mail Opened': [28, 1]}
Wednesday {'Mail Not Opened': [6], 'Mail Opened': [14]}
Thursday {'Mail Not Opened': [1], 'Mail Opened': [19]}
Sunday {'Mail Not Opened': [2], 'Mail Opened': [8]}
Saturday {'Mail Not Opened': [4], 'Mail Opened': [8]}
"""
</snippet></ROW><ROW><id>9077661</id><snippet>('Friday', 'Mail Opened', ..)</snippet></ROW><ROW><id>9077661</id><snippet>[('Friday', 1L, 0), ('Friday', 28L, 0)]
</snippet></ROW><ROW><id>9077661</id><snippet>Monday</snippet></ROW><ROW><id>9077661</id><snippet>Monday</snippet></ROW><ROW><id>9077661</id><snippet>lst = [(8, 'Mail Opened', 'Saturday'), (4, 'Mail Not Opened', 'Saturday'), (2, 'Mail Not Opened', 'Sunday'), (8, 'Mail Opened', 'Sunday'), (1, 'Mail Not Opened', 'Monday'), (12, 'Mail Opened', 'Monday'), (10, 'Mail Opened', 'Tuesday'), (4, 'Mail Not Opened', 'Tuesday'), (14, 'Mail Opened', 'Wednesday'), (6, 'Mail Not Opened', 'Wednesday'), (1, 'Mail Not Opened', 'Thursday'), (19, 'Mail Opened', 'Thursday'), (28, 'Mail Opened', 'Friday'), (1, 'Mail Opened', 'Friday')]

pos = {'Mail Opened': 1, 'Mail Not Opened': 2}
results = []

for num,mail,day in lst:
    found = False
    for x in results:
        if day == x[0]:
            found = True
            if x[pos[mail]] == 0:
                x[pos[mail]] = num
            else:                   # this will handle your special case
                new = [day, 0, 0]
                new[pos[mail]] = num
                results.append(new)
            break

    if not found:
        new = [day, 0, 0]
        new[pos[mail]] = num
        results.append(new)
</snippet></ROW><ROW><id>9077661</id><snippet>for r in results:
    print r

"""
['Saturday', 8, 4]
['Sunday', 8, 2]
['Monday', 12, 1]
['Tuesday', 10, 4]
['Wednesday', 14, 6]
['Thursday', 19, 1]
['Friday', 28, 0]
['Friday', 1, 0]
"""
</snippet></ROW><ROW><id>9077661</id><snippet>list</snippet></ROW><ROW><id>9077661</id><snippet>list = # something
</snippet></ROW><ROW><id>9077661</id><snippet>lst</snippet></ROW><ROW><id>9077679</id><snippet>post.comments[i] = new_comment
</snippet></ROW><ROW><id>9077679</id><snippet>post.save()</snippet></ROW><ROW><id>9077679</id><snippet>$set</snippet></ROW><ROW><id>9077679</id><snippet>$set</snippet></ROW><ROW><id>9077679</id><snippet>Post.objects(pk=post.pk).update(set__comments__i=comment)
</snippet></ROW><ROW><id>9077679</id><snippet>commit=False</snippet></ROW><ROW><id>9077679</id><snippet>save</snippet></ROW><ROW><id>9077679</id><snippet>def add_comment(request, id):
    post = Post.objects.with_id(id)
    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            post.comments.append(comment)
            post.save()
    return HttpResponseRedirect(post.get_absolute_url())
</snippet></ROW><ROW><id>9077938</id><snippet>command</snippet></ROW><ROW><id>9077938</id><snippet>senddata</snippet></ROW><ROW><id>9077938</id><snippet>sendbutton = Button(text, height, ..., command = Client().senddata)
</snippet></ROW><ROW><id>9077938</id><snippet>senddata</snippet></ROW><ROW><id>9077938</id><snippet>command</snippet></ROW><ROW><id>9077938</id><snippet>Client().senddata()</snippet></ROW><ROW><id>9077938</id><snippet>None</snippet></ROW><ROW><id>9077956</id><snippet>import this</snippet></ROW><ROW><id>9078225</id><snippet>class UserProfileResource(ModelResource):
    fullname = fields.CharField(attribute='_get_full_name', readonly=True)
    class Meta:
        queryset = models.UserProfile.objects.all()
        authorization = DjangoAuthorization()
        fields = ['gender',]
</snippet></ROW><ROW><id>9078225</id><snippet>set readonly=True</snippet></ROW><ROW><id>9078225</id><snippet>CharField</snippet></ROW><ROW><id>9078577</id><snippet>for</snippet></ROW><ROW><id>9078759</id><snippet>name = 'foo'
age = 42
print "Hi %s, you are %d years old\n" % (name, age)
</snippet></ROW><ROW><id>9078829</id><snippet>UserDict</snippet></ROW><ROW><id>9078829</id><snippet>__hash__ = None # Avoid Py3k warning
</snippet></ROW><ROW><id>9078829</id><snippet>UserDict</snippet></ROW><ROW><id>9078829</id><snippet>dict</snippet></ROW><ROW><id>9078829</id><snippet>__hash__</snippet></ROW><ROW><id>9078829</id><snippet>frozenset</snippet></ROW><ROW><id>9078829</id><snippet>&gt;&gt;&gt; a = UserDict.UserDict()
&gt;&gt;&gt; b[frozenset(a.items())]
</snippet></ROW><ROW><id>9079062</id><snippet>sys.version</snippet></ROW><ROW><id>9079062</id><snippet>sys.version_info</snippet></ROW><ROW><id>9079062</id><snippet>import sys
if sys.version_info[0] &lt; 3:
    raise "Must be using Python 3"
</snippet></ROW><ROW><id>9079062</id><snippet>sys.version_info[0]</snippet></ROW><ROW><id>9079062</id><snippet>sys.version_info[1]</snippet></ROW><ROW><id>9079062</id><snippet>sys.version_info</snippet></ROW><ROW><id>9079062</id><snippet>sys.version_info.major</snippet></ROW><ROW><id>9079380</id><snippet>i</snippet></ROW><ROW><id>9079587</id><snippet>&gt;&gt;&gt; print("{0}:&lt;15}}{1}:&lt;15}}{2}:&lt;8}}".format("1", "2", "3"))
1:&lt;15}2:&lt;15}3:&lt;8}
</snippet></ROW><ROW><id>9079587</id><snippet>print("{0:&lt;15}{1:&lt;15}{2:&lt;8}".format("1", "2", "3"))
</snippet></ROW><ROW><id>9079800</id><snippet>get_hostname</snippet></ROW><ROW><id>9079800</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>9079800</id><snippet>fab get_hostname run_cmd</snippet></ROW><ROW><id>9079800</id><snippet>from fabric.api import require


def run_cmd():
    require('hosts', provided_by=[get_hostname])
</snippet></ROW><ROW><id>9079823</id><snippet>  &lt;p tal:content="python:view.still_dreaming(item.publication_date)" /&gt;
</snippet></ROW><ROW><id>9079897</id><snippet>import re
def repetitions(s):
   r = re.compile(r"(.+?)\1+")
   for match in r.finditer(s):
       yield (match.group(1), len(match.group(0))/len(match.group(1)))
</snippet></ROW><ROW><id>9079897</id><snippet>&gt;&gt;&gt; list(repetitions("blablabla"))
[('bla', 3)]
&gt;&gt;&gt; list(repetitions("rablabla"))
[('abl', 2)]
&gt;&gt;&gt; list(repetitions("aaaaa"))
[('a', 5)]
&gt;&gt;&gt; list(repetitions("aaaaablablabla"))
[('a', 5), ('bla', 3)]
</snippet></ROW><ROW><id>9080237</id><snippet>myapp_teacher_subjects</snippet></ROW><ROW><id>9080308</id><snippet>load_source</snippet></ROW><ROW><id>9080660</id><snippet>            neuerGrauwert += filter[iii][jjj]*aktuellesFeld[iii][jjj]
</snippet></ROW><ROW><id>9080660</id><snippet>aktuellesFeld[iii][jjj] = im.getpixel((...))</snippet></ROW><ROW><id>9080660</id><snippet>In [8]: im.getpixel((125,125))
Out[8]: (11, 11, 11, 255)
</snippet></ROW><ROW><id>9080660</id><snippet>filter[iii][jjj]</snippet></ROW><ROW><id>9080660</id><snippet>In [9]: 2*im.getpixel((125,125))
Out[9]: (11, 11, 11, 255, 11, 11, 11, 255)
</snippet></ROW><ROW><id>9080660</id><snippet>neuerGrauwert</snippet></ROW><ROW><id>9080660</id><snippet>int</snippet></ROW><ROW><id>9080660</id><snippet>tuple</snippet></ROW><ROW><id>9080660</id><snippet>int</snippet></ROW><ROW><id>9080842</id><snippet>import operator
values = sorted(d.items(), key=operator.itemgetter(1))
</snippet></ROW><ROW><id>9080842</id><snippet>[('someText', 1), ('someText', 2), ...]
</snippet></ROW><ROW><id>9081531</id><snippet>page = BeautifulSoup(page)

while page.body = None:
    #redownload the page
    page = BeautifulSoup(page)
#now you can use the data
</snippet></ROW><ROW><id>9081537</id><snippet>__init__.py:

all = [ 'Events', 'Channels', 'Genres', 'Subgenres','EPGSections']
try:
    conn = MySQLdb.connect(host,user,passwd,db)
    cursor = conn.cursor(MySQLdb.cursors.DictCursor)
except:
    cursor = None
    environment = 'live
</snippet></ROW><ROW><id>9081537</id><snippet>_Framework.DB.__init__.cursor</snippet></ROW><ROW><id>9081537</id><snippet>_Framework.DB.__init__.environment</snippet></ROW><ROW><id>9081537</id><snippet> from _Framework.DB.__init__ import cursor
 from _Framework.DB.__init__ import environment
</snippet></ROW><ROW><id>9081537</id><snippet>import _Framework.DB

_Framework.DB.cursor = new_cursor
_Framework.DB.environment = new_environment
</snippet></ROW><ROW><id>9081537</id><snippet>_Framework.DB.cursor        #changes made in other module will have effect
_Framework.DB.environment   #changes made in other module will have effect
</snippet></ROW><ROW><id>9081537</id><snippet>#module Vars
a = 1

--------------------------

#module Do_change
import Vars
Vars.a = 2

--------------------------

#module A
from Vars import a


--------------------------

#module B
from Vars import a

--------------------------

#some random module
import A
import Do_change
import B
</snippet></ROW><ROW><id>9082003</id><snippet>tq = session.query(Tweet).order_by(desc(Tweet.tweet_id_uniq)).first()
</snippet></ROW><ROW><id>9082237</id><snippet>words = re.findall('\w+', open(os.path.join(root, file)).read().lower())
</snippet></ROW><ROW><id>9082237</id><snippet>path = raw_input("Enter file and path")
</snippet></ROW><ROW><id>9082266</id><snippet>t.split('/')[1] == 'NP'</snippet></ROW><ROW><id>9082266</id><snippet>f.split()</snippet></ROW><ROW><id>9082266</id><snippet>if t.split('/')[1].startswith('NP')</snippet></ROW><ROW><id>9082266</id><snippet>f.split()</snippet></ROW><ROW><id>9082266</id><snippet>t</snippet></ROW><ROW><id>9082266</id><snippet>split()</snippet></ROW><ROW><id>9082266</id><snippet>nltk</snippet></ROW><ROW><id>9082266</id><snippet>  import nltk
  from nltk.corpus import brown
  f = brown.raw('ca01')
  print f.split()

  ['The/at', 'Fulton/np-tl', 'County/nn-tl', 'Grand/jj-tl', 'Jury/nn-tl', 'said/vbd', 'Friday/nr', 'an/at', 'investigation/nn', 'of/in', "Atlanta's/np$", 'recent/jj', 'primary/nn', 'election/nn', 'produced/vbd', '``/``', 'no/at', 'evidence/nn', "''/''", 'that/cs', 'any/dti', 'irregularities/nns', 'took/vbd', 'place/nn', './.', 'The/at', 'jury/nn', 'further/rbr', 'said/vbd', 'in/in', 'term-end/nn', 'presentments/nns', 'that/cs', 'the/at', 'City/nn-tl', 'Executive/jj-tl', 'Committee/nn-tl', ',/,', 'which/wdt', 'had/hvd', 'over-all/jj', 'charge/nn', 'of/in', 'the/at', 'election/nn', ',/,', '``/``', 'deserves/vbz', 'the/at', 'praise/nn', 'and/cc', 'thanks/nns', 'of/in', 'the/at', 'City/nn-tl' .....]
</snippet></ROW><ROW><id>9082266</id><snippet>w=[nltk.tag.str2tuple(t) for t in f.split() if t.split('/')[1].lower() == 'np']
</snippet></ROW><ROW><id>9082266</id><snippet>[('September-October', 'NP'), ('Durwood', 'NP'), ('Pye', 'NP'), ('Ivan', 'NP'), ('Allen', 'NP'), ('Jr.', 'NP'), ('Fulton', 'NP'), ('Atlanta', 'NP'), ('Fulton', 'NP'), ('Fulton', 'NP'), ('Jan.', 'NP'), ('Fulton', 'NP'), ('Bellwood', 'NP'), ('Alpharetta', 'NP'), ('William', 'NP'), ('B.', 'NP'), ('Hartsfield', 'NP'), ('Pearl', 'NP'), ('Williams', 'NP'), ('Hartsfield', 'NP'), ('Aug.', 'NP'), ('William', 'NP'), ('Berry', 'NP'), ('Jr.', 'NP'), ('Mrs.', 'NP'), ('J.', 'NP'), ('M.', 'NP'), ('Cheshire', 'NP'), ('Griffin', 'NP'), ('Opelika', 'NP'), ('Ala.', 'NP'), ('Hartsfield', 'NP'), ('E.', 'NP'), ('Pelham', 'NP'), ('Henry', 'NP'), ('L.', 'NP'), ('Bowden', 'NP'), ('Hartsfield', 'NP'), ('Atlanta', 'NP'), ('Jan.', 'NP'), ('Ivan', 'NP'), ....]
</snippet></ROW><ROW><id>9082655</id><snippet>import numpy as np

fig = figure()
ax = fig.add_subplot(111)
dx_in_points = np.diff(ax.transData.transform(zip([0]*len(dx), dx))) 
scatter(x,y,c=z,s=dx_in_points**2,marker='s', edgecolors='none')
</snippet></ROW><ROW><id>9082675</id><snippet>import numpy as np
import matplotlib.pyplot as plt

np.random.seed(1)
x, y = np.random.random((2,500))

fig, ax = plt.subplots()
ax.plot(x, y, 'bo')

# The key option here is `bbox`. I'm just going a bit crazy with it.
ax.annotate('Something', xy=(x[0], y[0]), xytext=(-20,20), 
            textcoords='offset points', ha='center', va='bottom',
            bbox=dict(boxstyle='round,pad=0.2', fc='yellow', alpha=0.3),
            arrowprops=dict(arrowstyle='-&gt;', connectionstyle='arc3,rad=0.5', 
                            color='red'))

plt.show()
</snippet></ROW><ROW><id>9082878</id><snippet>itertools.product()</snippet></ROW><ROW><id>9082878</id><snippet>from itertools import product
coordinates = list(product(xrange(width), xrange(height)))
</snippet></ROW><ROW><id>9083017</id><snippet>ax.contour</snippet></ROW><ROW><id>9083017</id><snippet>ax.contourf</snippet></ROW><ROW><id>9083017</id><snippet>r, theta</snippet></ROW><ROW><id>9083017</id><snippet>theta, r</snippet></ROW><ROW><id>9083017</id><snippet>import numpy as np
import matplotlib.pyplot as plt

#-- Generate Data -----------------------------------------
# Using linspace so that the endpoint of 360 is included...
azimuths = np.radians(np.linspace(0, 360, 20))
zeniths = np.arange(0, 70, 10)

r, theta = np.meshgrid(zeniths, azimuths)
values = np.random.random((azimuths.size, zeniths.size))

#-- Plot... ------------------------------------------------
fig, ax = plt.subplots(subplot_kw=dict(projection='polar'))
ax.contourf(theta, r, values)

plt.show()
</snippet></ROW><ROW><id>9083099</id><snippet>'32?'</snippet></ROW><ROW><id>9083134</id><snippet>def geometric(p):
    # p should be in (0.0, 1.0].
    if ((p &lt;= 0.0) or (p &gt;=1.0)):
        raise ValueError("p must be in the interval (0.0, 1.0]")
    elif p == 1.0:
        # If p is exactly 1.0, then the only possible generated value is 1.
        # Recognizing this case early means that we can avoid a log(0.0) later.
        # The exact floating point comparison should be fine. log(eps) works just
        # dandy.
        return 1
</snippet></ROW><ROW><id>9083161</id><snippet>with open("testdata.xls") as inf:
    next(inf)
    lines = [l[:-1].split("\t") for l in inf]

date_array_list = [l[0] for l in lines]
values_matrix = [map(int, l[1:]) for l in lines]

print date_array_list
print values_matrix
</snippet></ROW><ROW><id>9083161</id><snippet>['01/01/2012', '02/01/2012', '03/01/2012']
[[105, 101, 100], [101, 101, 95], [98, 95, 97]]
</snippet></ROW><ROW><id>9083178</id><snippet>exporters</snippet></ROW><ROW><id>9083178</id><snippet>spider</snippet></ROW><ROW><id>9083178</id><snippet>class XmlExportPipeline(object):

    def __init__(self):
        dispatcher.connect(self.spider_opened, signals.spider_opened)
        dispatcher.connect(self.spider_closed, signals.spider_closed)
        self.files = {}
        self.exporters = {}

    def spider_opened(self, spider):
        file = open('%s_products.xml' % spider.name, 'w+b')
        self.files[spider] = file
        self.exporters[spider] = XmlItemExporter(file)
        self.exporters[spider].start_exporting()

    def spider_closed(self, spider):
        self.exporters[spider].finish_exporting()
        file = self.files.pop(spider)
        file.close()

    def process_item(self, item, spider):
        self.exporters[spider].export_item(item)
        return item
</snippet></ROW><ROW><id>9083218</id><snippet>break</snippet></ROW><ROW><id>9083218</id><snippet>answer</snippet></ROW><ROW><id>9083218</id><snippet>('yes',)</snippet></ROW><ROW><id>9083218</id><snippet>while True</snippet></ROW><ROW><id>9083218</id><snippet>answer in ('no')</snippet></ROW><ROW><id>9083218</id><snippet>answer in 'no'</snippet></ROW><ROW><id>9083218</id><snippet>answer</snippet></ROW><ROW><id>9083218</id><snippet>'n'</snippet></ROW><ROW><id>9083218</id><snippet>'o'</snippet></ROW><ROW><id>9083218</id><snippet>'no'</snippet></ROW><ROW><id>9083218</id><snippet>answer == 'no'</snippet></ROW><ROW><id>9083218</id><snippet>answer in ('no',)</snippet></ROW><ROW><id>9083218</id><snippet>('no',)</snippet></ROW><ROW><id>9083218</id><snippet>answer</snippet></ROW><ROW><id>9083218</id><snippet>def add_country():
    while True:
        new_short=raw_input('Country Name in short:')
        new_full=raw_input('Country Name in full:')
        countries[new_short]=new_full
        answer=raw_input('want to add more?')
        if answer == 'no':
            break
    print countries
</snippet></ROW><ROW><id>9083361</id><snippet>os.popen</snippet></ROW><ROW><id>9083361</id><snippet>&gt;&gt;&gt; echo_stdout = os.popen('echo foo', 'r')
&gt;&gt;&gt; echo_stdout.read()
'foo\n'
</snippet></ROW><ROW><id>9083361</id><snippet>popen</snippet></ROW><ROW><id>9083361</id><snippet>os</snippet></ROW><ROW><id>9083361</id><snippet>stdin</snippet></ROW><ROW><id>9083361</id><snippet>stdout</snippet></ROW><ROW><id>9083361</id><snippet>stdin</snippet></ROW><ROW><id>9083361</id><snippet>stdout</snippet></ROW><ROW><id>9083361</id><snippet>stderr</snippet></ROW><ROW><id>9083361</id><snippet>popen2</snippet></ROW><ROW><id>9083361</id><snippet>&gt;&gt;&gt; cat_stdin, cat_stdout = os.popen2('cat')
&gt;&gt;&gt; cat_stdin.write('foo\n')
&gt;&gt;&gt; cat_stdin.close()
&gt;&gt;&gt; cat_stdout.read()
'foo\n'
</snippet></ROW><ROW><id>9083435</id><snippet>import json
myfile = open('data.json","w+")

#create your dict

json.dump(mydict,myfile)
myfile.close()
</snippet></ROW><ROW><id>9083435</id><snippet>$data = json_decode(file_get_contents('data.json'));
</snippet></ROW><ROW><id>9083823</id><snippet>D=(0.133e-4,0.243e-4,0.283e-4)
for i in D:
    dx[i]=sc.sqrt(D[i]*dt/M)
</snippet></ROW><ROW><id>9083823</id><snippet>i</snippet></ROW><ROW><id>9083823</id><snippet>D</snippet></ROW><ROW><id>9083823</id><snippet>D[i]</snippet></ROW><ROW><id>9083823</id><snippet>D=(0.133e-4,0.243e-4,0.283e-4)
for i, dval in enumerate(D):
    dx[i] = sc.sqrt(dval*dt/M)
</snippet></ROW><ROW><id>9083823</id><snippet>import scipy as sc
D = sc.array([0.133e-4,0.243e-4,0.283e-4])
dx = sc.sqrt(D*dt/M)
</snippet></ROW><ROW><id>9083823</id><snippet>plt.plot</snippet></ROW><ROW><id>9083823</id><snippet>plt.plot</snippet></ROW><ROW><id>9083823</id><snippet>plt.plot</snippet></ROW><ROW><id>9083823</id><snippet>plt.show()</snippet></ROW><ROW><id>9083823</id><snippet>while not flag</snippet></ROW><ROW><id>9083823</id><snippet>1</snippet></ROW><ROW><id>9083823</id><snippet>x</snippet></ROW><ROW><id>9083823</id><snippet>if x==2</snippet></ROW><ROW><id>9083823</id><snippet>elif x==2</snippet></ROW><ROW><id>9083823</id><snippet>plt.plot</snippet></ROW><ROW><id>9083823</id><snippet>plt.plot</snippet></ROW><ROW><id>9083823</id><snippet>Line2D</snippet></ROW><ROW><id>9083823</id><snippet>line.set_xdata</snippet></ROW><ROW><id>9083823</id><snippet>line.set_ydata</snippet></ROW><ROW><id>9083823</id><snippet>import scipy as sc
import matplotlib.pyplot as plt

def graph(x):
    plt.ion()
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    lines = []
    D = (0.133e-4, 0.243e-4, 0.283e-4)
    temperatures = ('T = 273','T = 293','T = 298')
    N = 2000
    linestyles = ('ob', '-r', '+m')
    for dval, linestyle, temp in zip(D, linestyles, temperatures):
        line, = ax.plot([], [], linestyle, label = temp) 
        lines.append(line)
    plt.xlim((0, N*0.02*1000))        
    if x == 1:
        plt.ylim((0.7, 1.0))
    else:
        plt.ylim((1.0, 1.6))
    plt.legend(loc = 'best')        
    for dval, line in zip(D, lines):
        A = 1.67e-6
        V0 = 88e-12
        Vw_n1 = 71.7/100*V0
        Pw = 0.22
        L = 4e-4
        B1 = V0-Vw_n1
        C7 = 0.447e-3
        dt = 0.2e-4
        M = 0.759e-1
        C_n1 = sc.zeros(7)
        C_n1[0:6] = 0.290e-3
        C_n1[6] = 0.447e-3
        C0 = C_n1[0]
        Vw_0 = Vw_n1

        tvals = []
        yvals = []
        dx = sc.sqrt(dval*dt/M)
        for n in range(1, N+1, 1):
            Vw_n = Vw_n1
            C_n = C_n1
            R2 = (Vw_n+B1)/(Vw_0+B1)
            Cc = C_n1[0]/C0
            F2_1 = 10000/3*Pw*A*(C0*Vw_0/Vw_n1-C_n[1])
            dV = F2_1*dt
            Vw_n1 = Vw_n+dV
            C_n1[0] = C0*Vw_0/Vw_n1
            F_i_2 = -dval/dx*(C_n[1:7]-C_n[0:6])
            C_n1[0:6] = C_n[0:6]-F_i_2*A*dt/(L/(V0/A)*V0/5)
            tvals.append(n*0.02*1000)
            yvals.append(R2 if x == 1 else Cc)
            if not len(yvals) % 50:
                line.set_xdata(tvals)
                line.set_ydata(yvals)
                fig.canvas.draw()

if __name__ == "__main__":
    flag = False
    while not flag:
        try:
            x = int(raw_input("Give a choice 1  or 2  : "))
            flag = True
            if x == 1:
                plt.title('Change in cell volume ratio as a function of time \n\
                at various temperatures')
                plt.xlabel('Time')
                plt.ylabel('Ceil volume ratio (V/V0)')
                graph(x)
            elif x == 2:
                plt.title('Increase of solute concentration at various temperatures')
                plt.xlabel('Time')
                plt.ylabel('Solute concentration in the Ceil (Cc)')
                graph(x)
            else:
                flag = False
                print("You must input 1 or 2")
        except ValueError:
            print("You must input 1 or 2")
    raw_input('Press a key when done')
</snippet></ROW><ROW><id>9083959</id><snippet>/usr/bin/python ./RunScriptPython.py
</snippet></ROW><ROW><id>9083959</id><snippet>import site # precompiled from /usr/local/lib/python2.6/site.pyc
</snippet></ROW><ROW><id>9083995</id><snippet>Gtk.Spinner</snippet></ROW><ROW><id>9084137</id><snippet>argparse</snippet></ROW><ROW><id>9084137</id><snippet>--</snippet></ROW><ROW><id>9084137</id><snippet>python [PYTHONOPTS] yourfile.py [YOURFILEOPT] -- [ANYTHINGELSE]
</snippet></ROW><ROW><id>9084451</id><snippet>subprocess.call(['cat' + 'xaa' + '&gt;' + fileName])
</snippet></ROW><ROW><id>9084451</id><snippet>&gt;</snippet></ROW><ROW><id>9084451</id><snippet>subprocess.call('cat xaa &gt; ' + fileName, shell=True)
</snippet></ROW><ROW><id>9084451</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>9084451</id><snippet>shutil.copyfile('xaa', fileName)
</snippet></ROW><ROW><id>9084501</id><snippet>Document</snippet></ROW><ROW><id>9084501</id><snippet>EmbeddedDocument</snippet></ROW><ROW><id>9084501</id><snippet>Document</snippet></ROW><ROW><id>9084501</id><snippet>def get_theme_messages(section_id, theme_id, page = 1):
    section = Section.objects(id = section_id, themes__id = theme_id).first()
    for theme in section.themes:
        if theme.id == int(theme_id):
            return theme.messages
</snippet></ROW><ROW><id>9084526</id><snippet>&lt;r&gt;,&lt;/r&gt;
</snippet></ROW><ROW><id>9084526</id><snippet>&lt;</snippet></ROW><ROW><id>9084526</id><snippet>import xml.sax,csv
def getType(filename):
  with open(filename, 'rb') as fh:
    try:
      xml.sax.parse(fh, xml.sax.ContentHandler())
      return 'xml'
    except: # SAX' exceptions are not public
      pass
    fh.seek(0)

    try:
      for line in csv.reader(fh):
        pass
      return 'csv'
    except csv.Error:
      pass

    return 'txt'
</snippet></ROW><ROW><id>9084555</id><snippet>re</snippet></ROW><ROW><id>9084555</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; match = re.search('(\d+) ooo(\w+)', '12 ooops')
&gt;&gt;&gt; match.group(1), match.group(2)
('12', 'ps')
</snippet></ROW><ROW><id>9084555</id><snippet>'%d ooo%s'</snippet></ROW><ROW><id>9084555</id><snippet>import re

def python_scanf(my_str, pattern):
    D = ('%d',      '(\d+?)')
    F = ('%f', '(\d+\.\d+?)')
    S = ('%s',       '(.+?)')
    re_pattern = pattern.replace(*D).replace(*F).replace(*S)
    match = re.match(re_pattern, my_str)
    if match:
        return match.groups()
    raise ValueError("String doesn't match pattern")
</snippet></ROW><ROW><id>9084555</id><snippet>&gt;&gt;&gt; python_scanf("12 ooops", "%d ooo%s")
('12', 'p')
&gt;&gt;&gt; python_scanf("12 ooops", "%d uuu%s")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 10, in python_scanf
ValueError: String doesn't match pattern
</snippet></ROW><ROW><id>9084555</id><snippet>python_scanf</snippet></ROW><ROW><id>9084555</id><snippet>%.4f</snippet></ROW><ROW><id>9084555</id><snippet>%r</snippet></ROW><ROW><id>9084727</id><snippet>glob</snippet></ROW><ROW><id>9084727</id><snippet>import os, glob
files = [f for f in glob.glob('./*') if os.path.isfile(f)]</snippet></ROW><ROW><id>9085147</id><snippet>f.close
</snippet></ROW><ROW><id>9085147</id><snippet>f.close()
</snippet></ROW><ROW><id>9085156</id><snippet>class Availability(models.Model):
    WEEKDAY_CHOICES = (
        (0, 'Monday'),
        (1, 'Tuesday'),
        (2, 'Wednesday'),
        (3, 'Thursday'),
        (4, 'Friday'),
        (5, 'Saturday'),
        (6, 'Sunday'),
    )

    weekday = models.PositiveSmallIntegerField(choices=WEEKDAY_CHOICES)
    start_time = models.TimeField()
    end_time = moels.TimeField()

class Tutor(models.Model):
    available_times = models.ManyToManyField(Availability)
</snippet></ROW><ROW><id>9085156</id><snippet>Tutor.objects.filter(
    available_times__weekday=datetime.weekday(),
    available_times__start_time__lte=time.time(),
    available_times__end_time__gt=time.time()
)
</snippet></ROW><ROW><id>9085206</id><snippet># Set the default spec to use -- uglier is better than broken.
hour_fmt = '%I'

# If we're running on a platform that has an hour spec w/o leading zero
# then use that one instead.
if sys.platform.startswith('linux'):
    hour_fmt = '%l'
elif sys.platform.startswith('win'):
    hour_fmt = '%#I'
# etc

mydateformatter = DateFormatter("%b %d " + hour_fmt + ":%M %p", self._tz)
</snippet></ROW><ROW><id>9085206</id><snippet>%l</snippet></ROW><ROW><id>9085274</id><snippet>BOOL SetSystemTime(CONST SYSTEMTIME *lpSystemTime);
</snippet></ROW><ROW><id>9085274</id><snippet>win32api.SetSystemTime
</snippet></ROW><ROW><id>9085365</id><snippet>itertools.islice</snippet></ROW><ROW><id>9085365</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; import collections
&gt;&gt;&gt; c = collections.Counter({'a': 2, 'b': 1})
&gt;&gt;&gt; i = random.randrange(sum(c.values()))
&gt;&gt;&gt; next(itertools.islice(c.elements(), i, None))
'a'
</snippet></ROW><ROW><id>9085630</id><snippet>match</snippet></ROW><ROW><id>9085630</id><snippet>search</snippet></ROW><ROW><id>9085630</id><snippet>#!/usr/bin/env python

import re

text = 'Hello, "find.me-_/\\" please help with python regex'
pattern = r'"([A-Za-z0-9_\./\\-]*)"'
m = re.search(pattern, text)

print m.group()
</snippet></ROW><ROW><id>9085630</id><snippet>match</snippet></ROW><ROW><id>9085630</id><snippet>search</snippet></ROW><ROW><id>9085630</id><snippet>None</snippet></ROW><ROW><id>9085630</id><snippet>AttributeError: 'NoneType' object has no attribute 'group'</snippet></ROW><ROW><id>9085630</id><snippet>re.match</snippet></ROW><ROW><id>9085678</id><snippet>symtable</snippet></ROW><ROW><id>9085678</id><snippet>def describe_symtable(st, recursive=True, indent=0):
    def print_d(s, *args):
            prefix = ' ' *indent
            print prefix + s + ' ' + ' '.join(args)

    print_d('Symtable: type=%s, id=%s, name=%s' % (
            st.get_type(), st.get_id(), st.get_name()))
    print_d('  nested:', str(st.is_nested()))
    print_d('  has children:', str(st.has_children()))
    print_d('  identifiers:', str(list(st.get_identifiers())))

    if recursive:
            for child_st in st.get_children():
                    describe_symtable(child_st, recursive, indent + 5)
</snippet></ROW><ROW><id>9085874</id><snippet># car.py
import cv,sys
print "usage: python car.py &lt;videofile&gt;"

box=[0,0,0,0]
i = 0
global image
#   creating mouse callback function
def my_mouse_callback(event,x,y,flags,param):
    global drawing_box,i
    if event==cv.CV_EVENT_LBUTTONDOWN:
        events = event
        #print event
        drawing_box=True
        [box[0],box[1],box[2],box[3]]=[x,y,0,0]
        print x,y
    if event==cv.CV_EVENT_LBUTTONUP:
        events = event
        drawing_box=False
        events= event
        if box[2]&lt;0:
            box[0]+=box[2]
            box[2]*=-1
        if box[3]&lt;0:
            box[1]+=box[3]
            box[3]*=-1
        rect = (box[0],box[1],box[2],box[3])
        #print rect
        roi = cv.GetSubRect(image,rect)
        filename = str(i)+'.jpg'
        #save(image,rect,filename)
        cv.SaveImage(filename,roi)
        i = i+1 

    if event==cv.CV_EVENT_MOUSEMOVE:
        if (drawing_box==True):
            box[2]=x-box[0]
            box[3]=y-box[1] 


#   function to draw the rectangle, added flag -1 to fill rectangle. If you don't want to fill, just delete it.     
def draw_box(img,box):
    cv.Rectangle(img,(box[0],box[1]),(box[0]+box[2],box[1]+box[3]),(255,0,0),2)

#   main program    
capture = cv.CaptureFromFile(sys.argv[1])
image2 = cv.QueryFrame(capture)
drawing_box=False

#   make a clone of image
temp=cv.CloneImage(image2)

cv.NamedWindow("Box Example")
cv.SetMouseCallback("Box Example",my_mouse_callback,temp)

while(1):
#   global image
    image = cv.QueryFrame(capture)
    while(1):
        roi = 0
        save = False
        events = 0
        boxsaver = 0
        cv.Copy(image,temp)

        if drawing_box==True:
            draw_box(temp,box)

            i = i+1

        cv.ShowImage("Box Example",temp)
        if cv.WaitKey(20)==27:
            sys.exit()
        elif cv.WaitKey(20)==32:
            break
</snippet></ROW><ROW><id>9086069</id><snippet>setup.py</snippet></ROW><ROW><id>9086316</id><snippet>&lt;html&gt;
  &lt;head&gt;
    &lt;!--Load the AJAX API--&gt;
    &lt;script type="text/javascript" src="https://www.google.com/jsapi"&gt;&lt;/script&gt;
    &lt;script type="text/javascript"&gt;

var  list1= [[1, "Saturday"], [6, "Sunday"], [12 ,"Wednesday"], [31, "Monday"], [14, "Monday"], [1, "Tuesday"], [1, "Sunday"]]
var list2= [[11, "Saturday"], [26, "Sunday"], [22 ,"Wednesday"], [41, "Monday"], [15, "Monday"], [16, "Tuesday"], [51, "Sunday"]]

//load the Google Visualization API and the chart
google.load('visualization', '1', {'packages': ['columnchart']});

//set callback
google.setOnLoadCallback (createChart);

//callback function
function createChart() {

    //create data table object
    var dataTable = new google.visualization.DataTable();
    dataTable.addColumn('string','Number Stats');
    dataTable.addColumn('number', 'passed');
    dataTable.addColumn('number', 'failed');

    for(var i = 0; i &lt; list1.length; i++){
        var row =  [ list1[i][1], list1[i][0], list2[i][0] ];
        dataTable.addRow( row );
    }

    //instantiate our chart object
    var chart = new google.visualization.ColumnChart (document.getElementById('chart'));


    //define options for visualization  
    var options = {width: 400, height: 240, is3D: true, title: 'Bar Chart'};

    //draw our chart
    chart.draw(dataTable, options);

}
    &lt;/script&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;!--Div that will hold the pie chart--&gt;
    &lt;div id="chart"&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9086472</id><snippet>&lt;link rel="stylesheet" href="${request.static_url('app:static/css/app.css')}"&gt;
</snippet></ROW><ROW><id>9086814</id><snippet>Receive notification of character data.
</snippet></ROW><ROW><id>9086814</id><snippet>startElement</snippet></ROW><ROW><id>9086814</id><snippet>characters</snippet></ROW><ROW><id>9086814</id><snippet>endElement</snippet></ROW><ROW><id>9087041</id><snippet>#include &lt;windows.h&gt;
#include &lt;Python.h&gt;
#include &lt;pythonwin/win32win.h&gt; // Make sure this is in the include path

static PyObject *g_pModule = NULL;

PyObject* PyObject_fromHWND(HWND window)
{
    PyObject *pName, *pArgs, *pValue;
    if (g_pModule == NULL) {
        char name[] = "pythonwin/win32gui.py";  // Replace with the full path
        pName = PyString_FromString(name);
        g_pModule = PyImport_Import(pName);
        py_DECREF(pName);
        if (g_pModule == NULL) {
            // Report an error
        }
    }
    pArgs = PyTuple_New(1);
    pValue = PyInt_FromLong(static_cast&lt;long&gt;(window));
    PyTuple_SetItem(pArgs, 0, pValue);
    PyObject *pWindow = PyCWnd::CreateWindowFromHandle(g_pModule, pArgs);
    Py_DECREF(pValue);
    Py_DECREF(pArgs);
    return pWindow;
} 
</snippet></ROW><ROW><id>9087165</id><snippet>def mixinFactory(name, base, mixin):
    class _tmp(base, mixin):
        pass
    _tmp.__name__ = name
    return _tmp
</snippet></ROW><ROW><id>9087165</id><snippet>type</snippet></ROW><ROW><id>9087165</id><snippet>def mixinFactory(name, base, mixin):
    return type(name, (base, mixin), {})
</snippet></ROW><ROW><id>9087165</id><snippet>type</snippet></ROW><ROW><id>9087165</id><snippet>type</snippet></ROW><ROW><id>9087165</id><snippet>type</snippet></ROW><ROW><id>9087165</id><snippet>type</snippet></ROW><ROW><id>9087165</id><snippet>object</snippet></ROW><ROW><id>9087165</id><snippet>type</snippet></ROW><ROW><id>9087165</id><snippet>base</snippet></ROW><ROW><id>9087165</id><snippet>def mixinFactory(name, base, mixin):
    return base.__class__(name, (base, mixin), {})
</snippet></ROW><ROW><id>9087165</id><snippet>class NewClass(base, mixin):
    pass
</snippet></ROW><ROW><id>9087489</id><snippet>def test(myList=[]):

    myList.append(1)
    other_stuff, using myList
</snippet></ROW><ROW><id>9087489</id><snippet>if myList</snippet></ROW><ROW><id>9087489</id><snippet>test</snippet></ROW><ROW><id>9087489</id><snippet>if myList</snippet></ROW><ROW><id>9087489</id><snippet>myList</snippet></ROW><ROW><id>9087489</id><snippet>test</snippet></ROW><ROW><id>9087489</id><snippet>test</snippet></ROW><ROW><id>9087489</id><snippet>def test(myList = None):
    if myList is None:
        myList = []
</snippet></ROW><ROW><id>9087489</id><snippet>test</snippet></ROW><ROW><id>9087650</id><snippet>'%+06.2f'</snippet></ROW><ROW><id>9087650</id><snippet>'{:+06.2f}'.format(n)</snippet></ROW><ROW><id>9087650</id><snippet>'{0:+06.2f}'</snippet></ROW><ROW><id>9087879</id><snippet>elt.toprettyxml(indent = '  ')
</snippet></ROW><ROW><id>9087879</id><snippet>import xml.dom.minidom as minidom
doc = minidom.Document()
foo = doc.createElement("foo")
doc.appendChild(foo)
print(foo.__class__)
# xml.dom.minidom.Element

print(foo.toprettyxml(indent = '  '))
# &lt;foo/&gt;
</snippet></ROW><ROW><id>9088060</id><snippet>print a[0]
</snippet></ROW><ROW><id>9088060</id><snippet>for item in a:
    print item
</snippet></ROW><ROW><id>9088208</id><snippet>buffer = StringIO()</snippet></ROW><ROW><id>9088208</id><snippet>onPage=</snippet></ROW><ROW><id>9088208</id><snippet>@check_requirments
def pdf(request) :
    """
    Download a PDF
    """
    response = HttpResponse(mimetype='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=new.pdf'

    pdf = MyPdf(response)
    pdf.add_first_page()
    pdf.add_second_page()
    pdf.add_disclosures()
    pdf.build()

    return response
</snippet></ROW><ROW><id>9088208</id><snippet># Page Setup
PAGE_WIDTH, PAGE_HEIGHT = landscape(letter)

class MyPdf():
    """
    My PDF
    """
    document            = None

    def __init__(self, file_like_handle=None):
        self.document = BaseDocTemplate(file_like_handle, pagesize=landscape(letter))

        self.build_templates()

    def build_templates(self):

        first_page_frames = []

        #First Page Title Frame
        frame_title = Frame(.25*inch, PAGE_HEIGHT-(1.75*inch), PAGE_WIDTH-(inch*.5), inch*.5, id="frame_title", showBoundary=0)
        first_page_frames.append(frame_title)

        # First Page Body Frames
        frame_body = Frame(.5*inch, PAGE_HEIGHT-(8*inch), PAGE_WIDTH-(inch), inch*6.25, id="frame_body", showBoundary=0)
        first_page_frames.append(frame_body)

        # Second Page Body Frame
        frame_body_full = Frame(.5*inch, PAGE_HEIGHT-(8*inch), PAGE_WIDTH-(inch), inch*7, id="frame_body_full", showBoundary=0)

        templates = []
        templates.append(PageTemplate(frames=first_page_frames, id="first_page", onPage=self.first_page))
        templates.append(PageTemplate(frames=[frame_body_full], id="child_pages", onPage=self.child_pages))
        templates.append(PageTemplate(frames=[frame_body_full], id="child_pages", onPage=self.last_page))
        self.document.addPageTemplates(templates)


    def first_page(self, canvas, doc):
        """
        First page has an image header and footer
        """
        canvas.saveState()
        canvas.drawInlineImage(settings.MEDIA_ROOT + "../static/pdf-header-landscape.png", inch*.25, PAGE_HEIGHT-(1.25 * inch), PAGE_WIDTH-(.5*inch), ((11/8)*inch))
        canvas.drawInlineImage(settings.MEDIA_ROOT + "../static/pdf-footer-landscape.png", inch*.25, inch*.25, PAGE_WIDTH-(.5*inch), (.316*inch))
        canvas.restoreState()


    def child_pages(self, canvas, doc): 
        """
        Second page has a smaller header and the same footer
        """
        canvas.saveState()  
        canvas.setFillColor(HexColor("#f4f3f1"))
        canvas.rect(inch*.25, PAGE_HEIGHT-(.25 * inch), PAGE_WIDTH-(.5*inch), -(.5*inch), fill=1, stroke=0)
        canvas.setFillColor(HexColor("#e5b53b"))
        canvas.setFont('Gotham-Bold', 16)
        canvas.drawString(inch*.5, PAGE_HEIGHT-((.6)*inch), "PAGE")
        canvas.setFillColor(HexColor("#00355f"))
        canvas.drawString(inch*1.75, PAGE_HEIGHT-((.6)*inch), "OVERVIEW")
        canvas.drawInlineImage(settings.MEDIA_ROOT + "../static/pdf-footer-landscape.png", inch*.25, inch*.25, PAGE_WIDTH-(.5*inch), (.316*inch))
        canvas.restoreState()


    def build(self):
        return self.document.build(self.elements)


    def add_first_page(self):

        sample = getSampleStyleSheet()
        style_title = copy.deepcopy(sample['BodyText'])
        style_title.fontSize = 18
        style_title.textColor = HexColor("#00355f")

        style_body  = copy.deepcopy(sample['BodyText'])
        style_body.fontSize = 10
        style_body.alignment = reportlab.lib.enums.TA_LEFT
        style_body.spaceBefore = 25
        style_body.spaceAfter = 15
        style_body.textColor = HexColor("#000000")
        style_body.leading = 14

        self.elements.append(Paragraph("""&lt;font color="#e5b53b"&gt;PAGE&lt;/font&gt;OVERVIEW""", style_title))
        self.elements.append(FrameBreak())

        self.elements.append(Paragraph("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean elementum malesuada euismod. Praesent ut ante risus. Aenean eleifend massa elit, non adipiscing ipsum. Integer et arcu tortor, a bibendum metus. Maecenas eget nulla id sem placerat dignissim sit amet et ligula. Donec vitae mi mauris. Praesent lacinia, mauris at malesuada bibendum, metus eros molestie ipsum, sed consequat dolor diam interdum ipsum. Phasellus consectetur auctor laoreet. Suspendisse vel nisl lacus, vitae auctor dui.""", style_body))

        # ADD A CUSTOM REPORTLAB CANVAS OBJECT
        self.elements.append(SomeGraph())

        self.elements.append(Paragraph("""Our strategic allocations for each strategy are determined by our Dynamic Strategic Asset Allocation process - the Science of Dynamic Investing. Our proprietary mathematical model uses updated Price Matters&lt;super&gt;®&lt;/super&gt; capital market assumptions (expected return, risk and correlation figures) to determine the optimal allocation to each asset class to achieve the goals of each strategy within the assigned risk tolerance and time horizon. The Art of Dynamic Investing enables us to adapt to changing economic and political realities as we reposition strategies with tactical tilts to the strategic allocations as we see value and momentum of various asset classes being affected during the year. &lt;font color="#e5b53b"&gt;The chart below&lt;/font&gt; shows the strategic weightings and the tactical allocations to each asset class as of the close of business on the date cited.""", style_body))

        self.elements.append(NextPageTemplate("child_pages"))
        self.elements.append(PageBreak())       

    def add_second_page(self):
        sample = getSampleStyleSheet()
        style_title = copy.deepcopy(sample['BodyText'])
        style_title.fontSize = 18
        style_title.textColor = HexColor("#00355f")

        style_body  = copy.deepcopy(sample['BodyText'])
        style_body.fontSize = 10
        style_body.alignment = reportlab.lib.enums.TA_LEFT
        style_body.spaceBefore = 25
        style_body.spaceAfter = 15
        style_body.textColor = HexColor("#000000")
        style_body.leading = 14

        self.elements.append(Paragraph("""Morbi posuere erat non nunc faucibus rhoncus. Donec at ante at tellus vehicula gravida. Praesent vulputate viverra neque, ut consectetur turpis vestibulum at. Integer interdum diam sed leo vehicula in viverra mauris venenatis. Morbi tristique pretium nunc vel ultrices. Fusce vitae augue lorem, et feugiat lorem. Donec sit amet nulla eget elit feugiat euismod rutrum ut magna. Pellentesque condimentum, tellus at rutrum egestas, dui neque dapibus risus, malesuada mollis risus eros id ligula. Fusce id cursus nulla. Etiam porttitor vulputate tellus eu blandit. Donec elementum erat sed tellus dapibus eleifend. Pellentesque sagittis, libero ac sodales laoreet, erat turpis fringilla est, vel accumsan nunc nisi eget orci. Integer condimentum libero in tellus lacinia ultricies quis ac odio. Vivamus justo urna, faucibus vitae bibendum dapibus, condimentum et ligula. Nullam interdum velit at orci blandit nec suscipit lorem lobortis. Pellentesque purus nunc, pulvinar vitae ullamcorper id, rhoncus sit amet diam.""", style_body))

    def add_disclosures(self):

        sample = getSampleStyleSheet()
        style_d = copy.deepcopy(sample['BodyText'])
        style_d.fontSize        = 8
        style_d.alignment   = reportlab.lib.enums.TA_LEFT
        style_d.textColor   = HexColor("#9D8D85")

        self.elements.append(NextPageTemplate("last_page"))
        self.elements.append(PageBreak())

        self.elements.append(Paragraph("""Important Disclosures""", style_d))

        self.elements.append(Paragraph("""Copyright 2012 Francis Yaconiello All Rights Reserved.""", style_d))
</snippet></ROW><ROW><id>9088520</id><snippet>getBytes("UTF-8")</snippet></ROW><ROW><id>9088520</id><snippet>message.decode('utf-8')</snippet></ROW><ROW><id>9088545</id><snippet>def split_list(data, n):
    from itertools import combinations, chain
    for splits in combinations(range(1, len(data)), n-1):
        result = []
        prev = None
        for split in chain(splits, [None]):
            result.append(data[prev:split])
            prev = split
        yield result

&gt;&gt;&gt; list(split_list([1, 2, 3, 4], 2))
[[[1], [2, 3, 4]], [[1, 2], [3, 4]], [[1, 2, 3], [4]]]
&gt;&gt;&gt; list(split_list([1, 2, 3, 4], 3))
[[[1], [2], [3, 4]], [[1], [2, 3], [4]], [[1, 2], [3], [4]]]
</snippet></ROW><ROW><id>9088545</id><snippet>[[1], [2, 3, 4]]</snippet></ROW><ROW><id>9088545</id><snippet>[1, 234]</snippet></ROW><ROW><id>9088545</id><snippet>def list_to_int(data):
    result = 0
    for i, v in enumerate(reversed(data)):
        result += 10**i * v
    return result

&gt;&gt;&gt; map(list_to_int, [[1], [2, 3], [4, 5, 6]])
[1, 23, 456]
</snippet></ROW><ROW><id>9088545</id><snippet>reduce()</snippet></ROW><ROW><id>9088545</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; reduce(operator.add, [1, 23, 456])  # or int.__add__ instead of operator.add
480
</snippet></ROW><ROW><id>9088545</id><snippet>def op_iter_reduce(ops, values):
    op_dict = {'+': int.__add__, '-': int.__sub__,
               '*': int.__mul__, '/': int.__div__}
    op_iter = lambda a, (i, b): op_dict[ops[i]](a, b)
    return reduce(op_iter, enumerate(values[1:]), values[0])

def group_and_map(data, num_groups):
    from itertools import combinations_with_replacement
    op_dict = {'+': int.__add__, '-': int.__sub__,
               '*': int.__mul__, '/': int.__div__}
    template = ['']*(num_groups*2 - 1) + ['=', '']
    op_iter = lambda a, (i, b): op_dict[ops[i]](a, b)
    for groups in split_list(data, num_groups):
        ints = map(list_to_int, groups)
        template[:-2:2] = map(str, ints)
        for ops in combinations_with_replacement('+-*/', num_groups-1):
            template[1:-2:2] = ops
            template[-1] = str(op_iter_reduce(ops, ints))
            print ' '.join(template)

&gt;&gt;&gt; group_and_map([1, 2, 3, 4], 2)
1 + 234 = 235
1 - 234 = -233
1 * 234 = 234
1 / 234 = 0
12 + 34 = 46
12 - 34 = -22
12 * 34 = 408
12 / 34 = 0
123 + 4 = 127
123 - 4 = 119
123 * 4 = 492
123 / 4 = 30
</snippet></ROW><ROW><id>9088545</id><snippet>itertools.combinations_with_replacement()</snippet></ROW><ROW><id>9088667</id><snippet>&gt;&gt;&gt; def distribute2(available, weights):
...     distributed_amounts = []
...     total_weights = sum(weights)
...     for weight in weights:
...         weight = float(weight)
...         p = weight / total_weights
...         distributed_amount = round(p * available)
...         distributed_amounts.append(distributed_amount)
...         total_weights -= weight
...         available -= distributed_amount
...     return distributed_amounts
...
&gt;&gt;&gt; for x in xrange(100):
...     d = distribute2(x, (1,2,3))
...     if x != sum(d):
...         print x, sum(d), d
...
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9088688</id><snippet>#create the pdf
os.system("start wkhtmltopdf.exe result.html %s%s" %(output_directory, pdf_document_name))

#loop until pdf exists, but add some timer to avoid endless repetition
maxiterations = 60
exists = False
for i in range(maxiterations):
    if os.path.exists(os.path.join(output_directory, pdf_document_name)):
        exists = True
        break;
    time.sleep(1)
#open the current pdf
if exists:
    os.system("start %s%s" %(output_directory, pdf_document_name))
else:
    print 'Could not find file %s to open' % os.path.join(output_directory, pdf_document_name)
</snippet></ROW><ROW><id>9088768</id><snippet>foo</snippet></ROW><ROW><id>9088768</id><snippet>foo</snippet></ROW><ROW><id>9088768</id><snippet>export C {}</snippet></ROW><ROW><id>9088768</id><snippet>ctypes</snippet></ROW><ROW><id>9088768</id><snippet>Cython</snippet></ROW><ROW><id>9088768</id><snippet>boost.python</snippet></ROW><ROW><id>9088991</id><snippet>gconftool-2</snippet></ROW><ROW><id>9089018</id><snippet>set_1 = set(["dog", "cat", "bird", "rabbit", "rabbit"])
set_2 = set(["fly", "monkey", "bird", "rabbit", "bear", "rabbit"])

&gt;&gt;&gt; set_1 &amp; set_2   # elements common to both
set(['bird', 'rabbit'])
&gt;&gt;&gt; set_1 - set_2   # elements in set_1 that are not in set_2
set(['dog', 'cat'])
&gt;&gt;&gt; set_2 - set_1   # elements in set_2 that are not in set_1
set(['fly', 'monkey', 'bear'])
</snippet></ROW><ROW><id>9089018</id><snippet>set_1 = set(["dog", "cat", ("bird", "rabbit"), "rabbit"])
set_2 = set(["fly", "monkey", ("bird", "rabbit"), "bear", "rabbit"])

&gt;&gt;&gt; set_1 &amp; set_2
set([('bird', 'rabbit'), 'rabbit'])
&gt;&gt;&gt; set_1 - set_2
set(['dog', 'cat'])
&gt;&gt;&gt; set_2 - set_1
set(['fly', 'monkey', 'bear'])
</snippet></ROW><ROW><id>9089058</id><snippet>items = [item for item in container if item.attribute == value]
</snippet></ROW><ROW><id>9089163</id><snippet>.text</snippet></ROW><ROW><id>9089163</id><snippet>from BeautifulSoup import BeautifulSoup as BS

html = """
&lt;table id="empty"&gt;
  &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;table id="with_text"&gt;
  &lt;tr&gt;&lt;td&gt;hey!&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;table id="with_text_in_one_row"&gt;
  &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;hey!&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;table id="no_text_but_img"&gt;
  &lt;tr&gt;&lt;td&gt;&lt;img&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;table id="no_text_but_a"&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;table id="text_in_a"&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a&gt;hey!&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

"""

soup = BS(html)
for table in soup.findAll("table" ,text=None,recursive=True):
    if table.text:
        print table["id"]
</snippet></ROW><ROW><id>9089163</id><snippet>with_text
with_text_in_one_row
text_in_a
</snippet></ROW><ROW><id>9089173</id><snippet>*</snippet></ROW><ROW><id>9089173</id><snippet>[0,0 ]</snippet></ROW><ROW><id>9089173</id><snippet>v[0] = [0,44]</snippet></ROW><ROW><id>9089173</id><snippet>v[1][1]</snippet></ROW><ROW><id>9089433</id><snippet>__hash__</snippet></ROW><ROW><id>9089433</id><snippet>class A(object):
    def __hash__(self):
        print '__hash__'
        return 42

    def __cmp__(self):
        print '__cmp__'
        return object.__cmp__(self)

    def __eq__(self, rhs):
        print '__eq__'
        return True

a1 = A()
a2 = A()
print a1 in set([a1])
print a1 in set([a2])
</snippet></ROW><ROW><id>9089433</id><snippet>__cmp__</snippet></ROW><ROW><id>9089433</id><snippet>__hash__</snippet></ROW><ROW><id>9089433</id><snippet>x</snippet></ROW><ROW><id>9089433</id><snippet>y</snippet></ROW><ROW><id>9089433</id><snippet>x == y</snippet></ROW><ROW><id>9089433</id><snippet>x.__hash__() == y.__hash__()</snippet></ROW><ROW><id>9089608</id><snippet>void ff(int x, int y)
{
    std::cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;std::endl;
}
</snippet></ROW><ROW><id>9089608</id><snippet>import hello
def foo(x, y)
    hello.ff(x, y)
</snippet></ROW><ROW><id>9089608</id><snippet>BOOST_PYTHON_MODULE(hello)
{
    boost::python::def("ff", ff, boost::python::arg("x"), boost::python::arg("y"));
}
</snippet></ROW><ROW><id>9089608</id><snippet>BOOST_PYTHON_MODULE(__main__)
{
    boost::python::def("ff", ff, boost::python::arg("x"), boost::python::arg("y"));
}
</snippet></ROW><ROW><id>9089608</id><snippet>def foo(x, y)
   ff(x, y)
</snippet></ROW><ROW><id>9089634</id><snippet>LOGGING = {
...
...
...
}
</snippet></ROW><ROW><id>9089853</id><snippet>PySequence_Contains</snippet></ROW><ROW><id>9089853</id><snippet>Objects/abstract.c</snippet></ROW><ROW><id>9089853</id><snippet>operator.contains</snippet></ROW><ROW><id>9089853</id><snippet>Modules/operator.c</snippet></ROW><ROW><id>9089886</id><snippet>import numpy as np

N = 4601
data = np.arange(N*58).reshape(-1, 58)
np.random.shuffle(data)

a = data[:int(N*0.6)]
b = data[int(N*0.6):int(N*0.8)]
c = data[int(N*0.8):]
</snippet></ROW><ROW><id>9090099</id><snippet>def generate(ast):
    if ast[0] == '+':
        return generate(ast[1]) + " + " + generate(ast[2])
    elif ast[0] == 'for':
        return "for %s in %s:\n" % (ast[1], generate(ast[2])) + generate(ast[3])
    ...
</snippet></ROW><ROW><id>9090099</id><snippet>[+, 4, [*, 'x', 5]]</snippet></ROW><ROW><id>9090099</id><snippet>def traverse_preorder(ast):
    yield ast[0]
    for arg in ast[1:]:
        for x in traverse_preorder(arg):
            yield x
</snippet></ROW><ROW><id>9090099</id><snippet>ast</snippet></ROW><ROW><id>9090136</id><snippet>puzzle = __import__('8puzzle')
</snippet></ROW><ROW><id>9090136</id><snippet>import *</snippet></ROW><ROW><id>9090221</id><snippet>t</snippet></ROW><ROW><id>9090221</id><snippet>t - 1</snippet></ROW><ROW><id>9090221</id><snippet>pow</snippet></ROW><ROW><id>9090221</id><snippet>math.pow</snippet></ROW><ROW><id>9090228</id><snippet>QSystemTrayIcon</snippet></ROW><ROW><id>9090228</id><snippet>trayiconContextMenu = QtGui.QMenu()
trayiconContextMenu.setAttribute(QtCore.Qt.WA_DeleteOnClose)
...
trayiconContextMenu.close()
QtGui.qApp.quit()
</snippet></ROW><ROW><id>9090309</id><snippet>error_handlers</snippet></ROW><ROW><id>9090309</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>9090309</id><snippet>app.yaml</snippet></ROW><ROW><id>9090309</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>9090309</id><snippet>localhost:8080</snippet></ROW><ROW><id>9090309</id><snippet>GETs</snippet></ROW><ROW><id>9090309</id><snippet>PUTs</snippet></ROW><ROW><id>9090309</id><snippet>/foo</snippet></ROW><ROW><id>9090309</id><snippet>&gt;&gt;&gt; def test_foo():
&gt;&gt;&gt;   response = requests.get('/foo')
&gt;&gt;&gt;   assert response.status_code == 404
</snippet></ROW><ROW><id>9090309</id><snippet>over_quota</snippet></ROW><ROW><id>9090309</id><snippet>apiproxy_errors.OverQuotaError</snippet></ROW><ROW><id>9090309</id><snippet>raise</snippet></ROW><ROW><id>9090309</id><snippet>apiproxy_stub_map</snippet></ROW><ROW><id>9090309</id><snippet>from google.appengine.runtime import apiproxy_errors

def test_foo():
  raise apiproxy_errors.OverQuotaError
</snippet></ROW><ROW><id>9090367</id><snippet>os.chdir</snippet></ROW><ROW><id>9090367</id><snippet>os.walk</snippet></ROW><ROW><id>9090367</id><snippet>with</snippet></ROW><ROW><id>9090367</id><snippet>chdir</snippet></ROW><ROW><id>9090818</id><snippet>model</snippet></ROW><ROW><id>9090818</id><snippet>Node</snippet></ROW><ROW><id>9090818</id><snippet>__init__</snippet></ROW><ROW><id>9090818</id><snippet>Model</snippet></ROW><ROW><id>9090818</id><snippet>bits = token.contents.split()
...
return LatestContentNode(bits[1], bits[2], bits[4])
...
class LatestContentNode(template.Node):
    def __init__(self, model, num, varname):
    self.model = model
...
context[self.varname] = self.model._default_manager.all()[:self.num]
</snippet></ROW><ROW><id>9090818</id><snippet>return LatestContentNode(model, bits[2], bits[4])
</snippet></ROW><ROW><id>9090914</id><snippet>&gt;&gt;&gt; headers = {'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.77 Safari/535.7'}
&gt;&gt;&gt; request = urllib2.Request(url, '', headers)
&gt;&gt;&gt; response = urllib2.urlopen(request)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python25\lib\urllib2.py", line 124, in urlopen
    return _opener.open(url, data)
  File "C:\Python25\lib\urllib2.py", line 387, in open
    response = meth(req, response)
  File "C:\Python25\lib\urllib2.py", line 498, in http_response
    'http', request, response, code, msg, hdrs)
  File "C:\Python25\lib\urllib2.py", line 425, in error
    return self._call_chain(*args)
  File "C:\Python25\lib\urllib2.py", line 360, in _call_chain
    result = func(*args)
  File "C:\Python25\lib\urllib2.py", line 506, in http_error_default
    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)
urllib2.HTTPError: HTTP Error 405: Method Not Allowed
</snippet></ROW><ROW><id>9090914</id><snippet>''</snippet></ROW><ROW><id>9090914</id><snippet>data</snippet></ROW><ROW><id>9090914</id><snippet>POST</snippet></ROW><ROW><id>9090914</id><snippet>GET</snippet></ROW><ROW><id>9090914</id><snippet>request = urllib2.Request(url, headers=headers)
</snippet></ROW><ROW><id>9091091</id><snippet>&gt;&gt;&gt; range(10)
range(0, 10)
</snippet></ROW><ROW><id>9091091</id><snippet>&gt;&gt;&gt; range(10)[5]
5
&gt;&gt;&gt; r = range(10)
&gt;&gt;&gt; r[:3] = []
Traceback (most recent call last):
  File "&lt;pyshell#8&gt;", line 1, in &lt;module&gt;
    r[:3] = []
TypeError: 'range' object does not support item assignment
</snippet></ROW><ROW><id>9091091</id><snippet>&gt;&gt;&gt; list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; r = list(range(10))
&gt;&gt;&gt; r[:3] = [2,3,4]
&gt;&gt;&gt; r
[2, 3, 4, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>9091093</id><snippet>True</snippet></ROW><ROW><id>9091093</id><snippet>False</snippet></ROW><ROW><id>9091093</id><snippet>KEYUP</snippet></ROW><ROW><id>9091093</id><snippet>KEYDOWN</snippet></ROW><ROW><id>9091093</id><snippet>True</snippet></ROW><ROW><id>9091228</id><snippet>self</snippet></ROW><ROW><id>9091228</id><snippet>&gt;&gt;&gt; class A(object):
...   def b(self):
...      pass
...   @classmethod
...   def c(cls):
...      pass
... 
&gt;&gt;&gt; A.b
&lt;unbound method A.b&gt;
&gt;&gt;&gt; A.c
&lt;bound method type.c of &lt;class '__main__.A'&gt;&gt;
&gt;&gt;&gt; A.c()
&gt;&gt;&gt; A.b()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method b() must be called with A instance as first argument (got nothing instead)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9091228</id><snippet>type</snippet></ROW><ROW><id>9091228</id><snippet>__get__</snippet></ROW><ROW><id>9091228</id><snippet>__set__</snippet></ROW><ROW><id>9091228</id><snippet>__del__</snippet></ROW><ROW><id>9091228</id><snippet>__get__</snippet></ROW><ROW><id>9091228</id><snippet>property</snippet></ROW><ROW><id>9091228</id><snippet>__set__</snippet></ROW><ROW><id>9091228</id><snippet>__get__</snippet></ROW><ROW><id>9091228</id><snippet>__del__</snippet></ROW><ROW><id>9091228</id><snippet>__get__</snippet></ROW><ROW><id>9091228</id><snippet>method</snippet></ROW><ROW><id>9091228</id><snippet>&gt;&gt;&gt; class B(object):
...    def c(self):
...      pass
...    print c
... 
&lt;function c at 0x1927398&gt;
&gt;&gt;&gt; print B.c
&lt;unbound method B.c&gt;
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; b.c
&lt;bound method B.c of &lt;__main__.B object at 0x1930a10&gt;
</snippet></ROW><ROW><id>9091228</id><snippet>__dict__</snippet></ROW><ROW><id>9091228</id><snippet>&gt;&gt;&gt; B.__dict__["c"]
&lt;function c at 0x1927398&gt;
&gt;&gt;&gt; B.__dict__["c"].__get__
&lt;method-wrapper '__get__' of function object at 0x1927398&gt;
&gt;&gt;&gt; B.__dict__["c"].__get__(b, B)
&lt;bound method B.c of &lt;__main__.B object at 0x1930a10&gt;&gt;
&gt;&gt;&gt; B.__dict__["c"].__get__(None, B)
&lt;unbound method B.c&gt;
</snippet></ROW><ROW><id>9091228</id><snippet>classmethod</snippet></ROW><ROW><id>9091228</id><snippet>__get__</snippet></ROW><ROW><id>9091228</id><snippet>cls</snippet></ROW><ROW><id>9091460</id><snippet>getHost</snippet></ROW><ROW><id>9091460</id><snippet>getPeer</snippet></ROW><ROW><id>9091460</id><snippet>class SomeProtocol(Protocol):
    def connectionMade(self):
        print 'Connection made to', self.transport.getHost(),
        print 'from', self.transport.getPeer()
</snippet></ROW><ROW><id>9091690</id><snippet>dom.getElementsByTagName("plaintext").length
</snippet></ROW><ROW><id>9091690</id><snippet>getElementsByTagName()</snippet></ROW><ROW><id>9091690</id><snippet>length</snippet></ROW><ROW><id>9091702</id><snippet>PrintOut</snippet></ROW><ROW><id>9091702</id><snippet>ExportAsFixedFormat</snippet></ROW><ROW><id>9091702</id><snippet>ws.ExportAsFixedFormat(0, 'c:\users\alex\foo.pdf')
</snippet></ROW><ROW><id>9091770</id><snippet>#self.audioOutput = Phonon.AudioOutput(Phonon.VideoCategory, self)
#Phonon.createPath(self.ui.videoPlayer.mediaObject(), self.audioOutput) 
self.ui.volumeSlider.setAudioOutput(self.ui.videoPlayer.audioOutput())
</snippet></ROW><ROW><id>9091861</id><snippet>.text</snippet></ROW><ROW><id>9091861</id><snippet>.contents</snippet></ROW><ROW><id>9091862</id><snippet>def some_html():
    return render('my_template.tpl')
</snippet></ROW><ROW><id>9091862</id><snippet>&lt;script type="text/javascript"&gt;
('#result_from_server').load('/some_html');
&lt;/script&gt;
</snippet></ROW><ROW><id>9091862</id><snippet>&lt;div id="result_from_server"&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>9092490</id><snippet>compose</snippet></ROW><ROW><id>9092490</id><snippet>map</snippet></ROW><ROW><id>9092490</id><snippet>filter</snippet></ROW><ROW><id>9092490</id><snippet>id</snippet></ROW><ROW><id>9092490</id><snippet>id</snippet></ROW><ROW><id>9092490</id><snippet>lambda x: x</snippet></ROW><ROW><id>9092490</id><snippet>itertools</snippet></ROW><ROW><id>9092490</id><snippet>functools</snippet></ROW><ROW><id>9092490</id><snippet>partial</snippet></ROW><ROW><id>9092490</id><snippet>reduce</snippet></ROW><ROW><id>9092490</id><snippet>foldl</snippet></ROW><ROW><id>9092490</id><snippet>from functools import reduce

def flip(f):
    if not callable(f):
        raise TypeError("Cannot filp a non-callable object")
    def result(*args, **kw):
        args = list(args)
        args.reverse()
        return f(*args, **kw)
    return result

def ilast(i):
    return reduce(lambda _, x: x, i)

def iscanl(f, v, seq):
    yield v
    for a in seq:
        v = f(v, a)
        yield v

def scanl(*args, **kw):
    return list(iscanl(*args, **kw))

def foldl(*args, **kw):
    return ilast(iscanl(*args, **kw))
# Or using reduce
#def foldl(f, v, seq):
#    return reduce(f, seq, v)

def iscanr_reverse(f, v, seq):
    return iscanl(flip(f), v, seq)

def scanr(*args, **kw):
    result = list(iscanr_reverse(*args, **kw))
    result.reverse()
    return result

def foldr(*args, **kw):
    return ilast(iscanr_reverse(*args, **kw))
</snippet></ROW><ROW><id>9092565</id><snippet>gcc</snippet></ROW><ROW><id>9092767</id><snippet>__new__</snippet></ROW><ROW><id>9092767</id><snippet>return super(&lt;currentclass&gt;, cls).__new__(subcls, *args, **kwargs)
</snippet></ROW><ROW><id>9092767</id><snippet>new</snippet></ROW><ROW><id>9092767</id><snippet>return super(&lt;currentclass&gt;, cls).new(*args, **kwargs)
</snippet></ROW><ROW><id>9092767</id><snippet>subcls</snippet></ROW><ROW><id>9092866</id><snippet>sklearn.metrics.classification_report</snippet></ROW><ROW><id>9092866</id><snippet>&gt;&gt;&gt; from sklearn.metrics import classification_report
&gt;&gt;&gt; from sklearn.linear_model import SGDClassifier
&gt;&gt;&gt; from sklearn.datasets import load_digits

&gt;&gt;&gt; digits = load_digits()
&gt;&gt;&gt; n_samples, n_features = digits.data.shape
&gt;&gt;&gt; n_split = n_samples / 2

&gt;&gt;&gt; clf = SGDClassifier().fit(digits.data[:n_split], digits.target[:n_split])

&gt;&gt;&gt; predictions = clf.predict(digits.data[n_split:])
&gt;&gt;&gt; expected = digits.target[n_split:]

&gt;&gt;&gt; print classification_report(expected, predictions)
             precision    recall  f1-score   support

          0       0.90      0.98      0.93        88
          1       0.81      0.69      0.75        91
          2       0.94      0.98      0.96        86
          3       0.94      0.85      0.89        91
          4       0.90      0.93      0.91        92
          5       0.92      0.92      0.92        91
          6       0.92      0.97      0.94        91
          7       1.00      0.85      0.92        89
          8       0.71      0.89      0.79        88
          9       0.89      0.83      0.86        92

avg / total       0.89      0.89      0.89       899
</snippet></ROW><ROW><id>9093748</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; a = json.loads('{"X":"value1","Y":"value2","Z":[{"A":"value3","B":"value4"}]}')
&gt;&gt;&gt; a
{'Y': 'value2', 'X': 'value1', 'Z': [{'A': 'value3', 'B': 'value4'}]}
&gt;&gt;&gt; a["Z"][0]["A"]
'value3'
</snippet></ROW><ROW><id>9094799</id><snippet>manager = mp.Manager()
d = manager.dict()
</snippet></ROW><ROW><id>9095070</id><snippet>with</snippet></ROW><ROW><id>9095070</id><snippet>sys.stdin</snippet></ROW><ROW><id>9095070</id><snippet>with open('/tmp/redirect.log', 'a') as log:
    while True: #If you need to continuously check for more.
        for line in sys.stdin:
            if line.startswith(("GET", "User-Agent")):
                log.write(line)
</snippet></ROW><ROW><id>9095070</id><snippet>with open('/tmp/redirect.log', 'a') as log:
    while True: #If you need to continuously check for more.
        needed = {"GET", "User-Agent"}
        for line in sys.stdin:
            for item in needed:
                if line.startswith(item):
                    log.write(line)
                    break
            needed.remove(item)
            if not needed: #The set is empty, we have found all the lines we need.
                break
</snippet></ROW><ROW><id>9095434</id><snippet>This     is a           test


to see what  happens.
</snippet></ROW><ROW><id>9095434</id><snippet>This     is a           test\n\n\nto see what  happens.
</snippet></ROW><ROW><id>9095434</id><snippet>&lt;pre&gt;&lt;/pre&gt;</snippet></ROW><ROW><id>9095434</id><snippet>&lt;pre&gt;&lt;/pre&gt;</snippet></ROW><ROW><id>9095434</id><snippet> </snippet></ROW><ROW><id>9095434</id><snippet>{{ foo }}</snippet></ROW><ROW><id>9095434</id><snippet>test\nbar</snippet></ROW><ROW><id>9095434</id><snippet>{{ foo|linebreaksbr }}</snippet></ROW><ROW><id>9095434</id><snippet>test&lt;br /&gt;bar</snippet></ROW><ROW><id>9095434</id><snippet>__init__.py</snippet></ROW><ROW><id>9095434</id><snippet>{% load replace_tag %}</snippet></ROW><ROW><id>9095434</id><snippet>{{ foo|linebreaksbr|replace:" "," " }}</snippet></ROW><ROW><id>9095463</id><snippet>C:\Users\max&gt;python base-install.py</snippet></ROW><ROW><id>9095463</id><snippet>python</snippet></ROW><ROW><id>9095463</id><snippet>python.exe</snippet></ROW><ROW><id>9095463</id><snippet>base-install.py</snippet></ROW><ROW><id>9095463</id><snippet>max</snippet></ROW><ROW><id>9095463</id><snippet>Scripts</snippet></ROW><ROW><id>9095463</id><snippet>(test2) D:\www\test2&gt;python Scripts\django-admin.py</snippet></ROW><ROW><id>9095819</id><snippet>decode</snippet></ROW><ROW><id>9095819</id><snippet>encode</snippet></ROW><ROW><id>9095819</id><snippet>decode</snippet></ROW><ROW><id>9095819</id><snippet>encode</snippet></ROW><ROW><id>9096104</id><snippet>shell=True</snippet></ROW><ROW><id>9096104</id><snippet>subprocess.check_output("bin/test --help",  stderr=subprocess.STDOUT, shell=True)
</snippet></ROW><ROW><id>9096104</id><snippet>shell</snippet></ROW><ROW><id>9096104</id><snippet>False</snippet></ROW><ROW><id>9096143</id><snippet>django.test.TestCase</snippet></ROW><ROW><id>9096143</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>9096213</id><snippet>&gt;&gt;&gt; import redis
&gt;&gt;&gt; r = redis.StrictRedis(host='localhost', port=6379, db=0)
&gt;&gt;&gt; for e in yourlist:
...     r.rpush('yourlist', e)
</snippet></ROW><ROW><id>9096213</id><snippet>&gt;&gt;&gt; r.set('key', val)
</snippet></ROW><ROW><id>9096555</id><snippet>-+- dir1
 |   |
 |   +- execute.py
 |
 +- dir2
 |   |
 |   +- execute.py
 |
 +- __init__.py
 |
 +- suite.py
</snippet></ROW><ROW><id>9096555</id><snippet>__init__.py</snippet></ROW><ROW><id>9096555</id><snippet>dir1</snippet></ROW><ROW><id>9096555</id><snippet>dir2</snippet></ROW><ROW><id>9096555</id><snippet>suite.py</snippet></ROW><ROW><id>9096555</id><snippet>from dir1 import execute as execute1
from dir2 import execute as execute2
</snippet></ROW><ROW><id>9096555</id><snippet>execute.py</snippet></ROW><ROW><id>9096555</id><snippet>reload()</snippet></ROW><ROW><id>9096555</id><snippet>reload(execute1)</snippet></ROW><ROW><id>9096555</id><snippet>__init__.py</snippet></ROW><ROW><id>9096555</id><snippet>dir1</snippet></ROW><ROW><id>9096555</id><snippet>dir2</snippet></ROW><ROW><id>9096555</id><snippet>dir1</snippet></ROW><ROW><id>9096555</id><snippet>dir2</snippet></ROW><ROW><id>9096555</id><snippet>execute</snippet></ROW><ROW><id>9096717</id><snippet>self.thread.run()
</snippet></ROW><ROW><id>9096717</id><snippet>self.thread.start()
</snippet></ROW><ROW><id>9096717</id><snippet>thread_run()</snippet></ROW><ROW><id>9096717</id><snippet>thread_run()</snippet></ROW><ROW><id>9096717</id><snippet>self.isrunning</snippet></ROW><ROW><id>9096717</id><snippet>print</snippet></ROW><ROW><id>9096741</id><snippet>if (not cond2 or not cond3) and cond1
</snippet></ROW><ROW><id>9096763</id><snippet>    from sqlalchemy import create_engine
    try:
        engine = create_engine(url)           
        connection = engine.connect()
        connection.close()
    except Exception, e:
        LOGGER.exception(e)
        raise MyCusomException('Could not initialize db. Invalid URL.') 
</snippet></ROW><ROW><id>9097585</id><snippet>import itertools as it

a = [{'apples': 99}, {'bananas': 556685}, {'apples': 88}, {'apples': 2345566}]


max((sum(i.values()[0] for i in v), k) for k,v in it.groupby(sorted(a), key=lambda x: x.keys()[0]))[1]

# 'apples'
</snippet></ROW><ROW><id>9097585</id><snippet>[1]</snippet></ROW><ROW><id>9097585</id><snippet># (2345753, 'apples')
</snippet></ROW><ROW><id>9097748</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>9097748</id><snippet>b</snippet></ROW><ROW><id>9097748</id><snippet>&gt;&gt;&gt; from __future__ import unicode_literals
&gt;&gt;&gt; "sss"
u'sss'
&gt;&gt;&gt; b"x"
'x'
</snippet></ROW><ROW><id>9098038</id><snippet>a</snippet></ROW><ROW><id>9098038</id><snippet>a</snippet></ROW><ROW><id>9098295</id><snippet>itertools.product([1, 2, 3], [1, 2])</snippet></ROW><ROW><id>9098295</id><snippet>[1,2,3]</snippet></ROW><ROW><id>9098295</id><snippet>[1,2]</snippet></ROW><ROW><id>9098295</id><snippet>output.foo</snippet></ROW><ROW><id>9098295</id><snippet>output.bar</snippet></ROW><ROW><id>9098295</id><snippet>**items</snippet></ROW><ROW><id>9098295</id><snippet>from itertools import product, starmap
from collections import namedtuple

def named_product(**items):
    Product = namedtuple('Product', items.keys())
    return starmap(Product, product(*items.values()))
</snippet></ROW><ROW><id>9098295</id><snippet>&gt;&gt;&gt; for output in named_product(foo=[1,2,3], bar=[1,2]):
        print output

Product(foo=1, bar=1)
Product(foo=1, bar=2)
Product(foo=2, bar=1)
Product(foo=2, bar=2)
Product(foo=3, bar=1)
Product(foo=3, bar=2)
</snippet></ROW><ROW><id>9098312</id><snippet>Bar::b</snippet></ROW><ROW><id>9098312</id><snippet>BOOST_PYTHON_MODULE(foobar)
{
    class_&lt;FooWrap, boost::noncopyable&gt;("Foo")
        .def("a", pure_virtual(&amp;Foo::a));

    class_&lt;BarWrap, boost::noncopyable&gt;("Bar")
        .def("b", pure_virtual(&amp;Bar::b),
             return_internal_reference&lt;&gt;());
}
</snippet></ROW><ROW><id>9098312</id><snippet>Bar::b</snippet></ROW><ROW><id>9098312</id><snippet>Bar</snippet></ROW><ROW><id>9098312</id><snippet>error: no match for call to ‘(const boost::python::detail::specify_a_return_value_policy_to_wrap_functions_returning&lt;const Foo&amp;&gt;) (const Foo&amp;)’
</snippet></ROW><ROW><id>9098604</id><snippet>pip install numpy
pip install scipy
easy_install matplotlib
</snippet></ROW><ROW><id>9098771</id><snippet>list</snippet></ROW><ROW><id>9098771</id><snippet>tuple</snippet></ROW><ROW><id>9098771</id><snippet>None</snippet></ROW><ROW><id>9098771</id><snippet>else:
    return []
</snippet></ROW><ROW><id>9098771</id><snippet>load_product</snippet></ROW><ROW><id>9098771</id><snippet>list</snippet></ROW><ROW><id>9098771</id><snippet>tuple</snippet></ROW><ROW><id>9098771</id><snippet>Item</snippet></ROW><ROW><id>9098771</id><snippet>Request</snippet></ROW><ROW><id>9099017</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser(
...     description='This is my utility description.',
...     epilog='The exit status will be 0 if everything is fine, '
...            'and 1 if an input-file or an output-directory does not exist')
&gt;&gt;&gt; 
&gt;&gt;&gt; parser.print_help()
usage: [-h]

This is my utility description.

optional arguments:
  -h, --help  show this help message and exit

The exit status will be 0 if everything is fine, and 1 when an input-file or
an output-directory does not exist
</snippet></ROW><ROW><id>9099150</id><snippet>getlist()</snippet></ROW><ROW><id>9099150</id><snippet>foo=bar&amp;foo=test</snippet></ROW><ROW><id>9099150</id><snippet>{u'foo': [u'bar', u'test']}</snippet></ROW><ROW><id>9099150</id><snippet>?foo=bar&amp;foo=test&amp;x=y</snippet></ROW><ROW><id>9099150</id><snippet>ipdb&gt; request.GET
&lt;QueryDict: {u'x': [u'y'], u'foo': [u'bar', u'test']}&gt;
ipdb&gt; request.GET['x']
u'y'
ipdb&gt; request.GET.getlist('x')
[u'y']
ipdb&gt; request.GET['foo']
u'test'
ipdb&gt; request.GET.getlist('foo')
[u'bar', u'test']
</snippet></ROW><ROW><id>9099150</id><snippet>$.post(url, {'foo':['bar', 'test']})</snippet></ROW><ROW><id>9099337</id><snippet>bytearray</snippet></ROW><ROW><id>9099337</id><snippet>str</snippet></ROW><ROW><id>9099337</id><snippet>bytes</snippet></ROW><ROW><id>9099337</id><snippet>bytearray</snippet></ROW><ROW><id>9099337</id><snippet>list</snippet></ROW><ROW><id>9099337</id><snippet>bytearray</snippet></ROW><ROW><id>9099337</id><snippet>hash</snippet></ROW><ROW><id>9099337</id><snippet>str</snippet></ROW><ROW><id>9099337</id><snippet>bytes</snippet></ROW><ROW><id>9099337</id><snippet>bytearray</snippet></ROW><ROW><id>9099456</id><snippet>static PyLongObject *
x_add(PyLongObject *a, PyLongObject *b)
{
    Py_ssize_t size_a = ABS(a-&gt;ob_size), size_b = ABS(b-&gt;ob_size);
    PyLongObject *z;
    int i;
    digit carry = 0;

    /* Ensure a is the larger of the two: */
    if (size_a &lt; size_b) {
        { PyLongObject *temp = a; a = b; b = temp; }
        { Py_ssize_t size_temp = size_a;
          size_a = size_b;
          size_b = size_temp; }
    }
    z = _PyLong_New(size_a+1);
    if (z == NULL)
        return NULL;
    for (i = 0; i &lt; size_b; ++i) {
        carry += a-&gt;ob_digit[i] + b-&gt;ob_digit[i];
        z-&gt;ob_digit[i] = carry &amp; MASK;
        carry &gt;&gt;= SHIFT;
    }
    for (; i &lt; size_a; ++i) {
        carry += a-&gt;ob_digit[i];
        z-&gt;ob_digit[i] = carry &amp; MASK;
        carry &gt;&gt;= SHIFT;
    }
    z-&gt;ob_digit[i] = carry;
    return long_normalize(z);
}

/* Subtract the absolute values of two integers. */

static PyLongObject *
x_sub(PyLongObject *a, PyLongObject *b)
{
    Py_ssize_t size_a = ABS(a-&gt;ob_size), size_b = ABS(b-&gt;ob_size);
    PyLongObject *z;
    Py_ssize_t i;
    int sign = 1;
    digit borrow = 0;

    /* Ensure a is the larger of the two: */
    if (size_a &lt; size_b) {
        sign = -1;
        { PyLongObject *temp = a; a = b; b = temp; }
        { Py_ssize_t size_temp = size_a;
          size_a = size_b;
          size_b = size_temp; }
    }
    else if (size_a == size_b) {
        /* Find highest digit where a and b differ: */
        i = size_a;
        while (--i &gt;= 0 &amp;&amp; a-&gt;ob_digit[i] == b-&gt;ob_digit[i])
            ;
        if (i &lt; 0)
            return _PyLong_New(0);
        if (a-&gt;ob_digit[i] &lt; b-&gt;ob_digit[i]) {
            sign = -1;
            { PyLongObject *temp = a; a = b; b = temp; }
        }
        size_a = size_b = i+1;
    }
    z = _PyLong_New(size_a);
    if (z == NULL)
        return NULL;
    for (i = 0; i &lt; size_b; ++i) {
        /* The following assumes unsigned arithmetic
           works module 2**N for some N&gt;SHIFT. */
        borrow = a-&gt;ob_digit[i] - b-&gt;ob_digit[i] - borrow;
        z-&gt;ob_digit[i] = borrow &amp; MASK;
        borrow &gt;&gt;= SHIFT;
        borrow &amp;= 1; /* Keep only one sign bit */
    }
    for (; i &lt; size_a; ++i) {
        borrow = a-&gt;ob_digit[i] - borrow;
        z-&gt;ob_digit[i] = borrow &amp; MASK;
        borrow &gt;&gt;= SHIFT;
        borrow &amp;= 1; /* Keep only one sign bit */
    }
    assert(borrow == 0);
    if (sign &lt; 0)
        z-&gt;ob_size = -(z-&gt;ob_size);
    return long_normalize(z);
}
</snippet></ROW><ROW><id>9099456</id><snippet>PyLongObject *</snippet></ROW><ROW><id>9099456</id><snippet>long</snippet></ROW><ROW><id>9099456</id><snippet>long</snippet></ROW><ROW><id>9099456</id><snippet>&gt;&gt;&gt; 3L + 4L
7L
</snippet></ROW><ROW><id>9099456</id><snippet>x.__add__(y)</snippet></ROW><ROW><id>9099456</id><snippet>NotImplemented</snippet></ROW><ROW><id>9099456</id><snippet>y.__add__(x)</snippet></ROW><ROW><id>9099456</id><snippet>i - 10</snippet></ROW><ROW><id>9099456</id><snippet>i</snippet></ROW><ROW><id>9099456</id><snippet>long</snippet></ROW><ROW><id>9099456</id><snippet>long</snippet></ROW><ROW><id>9099626</id><snippet>unicode()</snippet></ROW><ROW><id>9099626</id><snippet>.lowercase()</snippet></ROW><ROW><id>9099626</id><snippet>.lower()</snippet></ROW><ROW><id>9099626</id><snippet>NavigableString</snippet></ROW><ROW><id>9099626</id><snippet>unicode</snippet></ROW><ROW><id>9099626</id><snippet>unicode</snippet></ROW><ROW><id>9099626</id><snippet>.lower()</snippet></ROW><ROW><id>9099712</id><snippet>def recursiveadd(x,sum1):
    if x &gt; 0:
        sum1 += x
        return recursiveadd(x-1,sum1)
    else:
        return sum1

print recursiveadd(100,0)
</snippet></ROW><ROW><id>9099822</id><snippet>from htmlparser import HTMLParser, BfsHTMLParser
</snippet></ROW><ROW><id>9099822</id><snippet>HTMLParser.HTMLParser</snippet></ROW><ROW><id>9099822</id><snippet>BfsHTMLParser.BfsHtmlParser</snippet></ROW><ROW><id>9100049</id><snippet>  def _EncodeVariable(self, arg):
    """Converts a variable to a type and value.

    Args:
      arg: Any tuple, string, numeric, or datetime object.

    Returns:
      A (int, str) tuple, representing a JDBC type and encoded value.

    Raises:
      TypeError: The argument is not a recognized type.
    """
    arg_jdbc_type = self._GetJdbcTypeForArg(arg)
    value = self._conn.encoders[type(arg)](arg, self._conn.encoders)
</snippet></ROW><ROW><id>9100049</id><snippet>self._conn.encoders[type(arg)]
</snippet></ROW><ROW><id>9100049</id><snippet>Any tuple, string, numeric, or datetime object</snippet></ROW><ROW><id>9100271</id><snippet>null</snippet></ROW><ROW><id>9100271</id><snippet>integer</snippet></ROW><ROW><id>9100271</id><snippet>real</snippet></ROW><ROW><id>9100271</id><snippet>float</snippet></ROW><ROW><id>9100271</id><snippet>text</snippet></ROW><ROW><id>9100271</id><snippet>blob</snippet></ROW><ROW><id>9100271</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>9100271</id><snippet>real</snippet></ROW><ROW><id>9100271</id><snippet>float</snippet></ROW><ROW><id>9100271</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>9100271</id><snippet>float</snippet></ROW><ROW><id>9100271</id><snippet>float</snippet></ROW><ROW><id>9100348</id><snippet>chr()</snippet></ROW><ROW><id>9100348</id><snippet>ord()</snippet></ROW><ROW><id>9100348</id><snippet>data = registers[sNum&gt;&gt;8]
memory[addressI] = chr(data/100)
memory[addressI + 1] = chr((data/10) % 10)
memory[addressI + 2] = chr(data % 10)
</snippet></ROW><ROW><id>9100348</id><snippet>int</snippet></ROW><ROW><id>9100348</id><snippet>ord_ = lambda c: c if isinstance(c, int) else ord(c)
</snippet></ROW><ROW><id>9100348</id><snippet>p = ord_(memory[addressI + i])
</snippet></ROW><ROW><id>9100348</id><snippet>ord_(memory[addressI + i])</snippet></ROW><ROW><id>9100348</id><snippet>ord()</snippet></ROW><ROW><id>9100348</id><snippet>byte = rom.read(1)
while byte:
    memory.append(byte)
    byte = rom.read(1)
</snippet></ROW><ROW><id>9100348</id><snippet>rom.read(1)</snippet></ROW><ROW><id>9100348</id><snippet>memory</snippet></ROW><ROW><id>9100348</id><snippet>while</snippet></ROW><ROW><id>9100421</id><snippet>from urllib import urlopen
from BeautifulSoup import BeautifulSoup

handle = urlopen("http://jobsearch.monster.com/search/Engineer_5?q=Software&amp;where=AZ&amp;rad=20&amp;sort=rv.di.dt")
responce = handle.read()
soup = BeautifulSoup( responce )

job_urls = soup.findAll(name = 'a', attrs = { 'class': 'jobTitle fnt11_js' })
for job_url in job_urls:
    print job_url.text
    print
</snippet></ROW><ROW><id>9100718</id><snippet>__init__()</snippet></ROW><ROW><id>9100718</id><snippet>__init__()</snippet></ROW><ROW><id>9100718</id><snippet>__init__()</snippet></ROW><ROW><id>9100956</id><snippet>import random
random.sample(votes_selected, int(len(votes_selected) * DATA_PERCENTAGE / 100))
</snippet></ROW><ROW><id>9100956</id><snippet>dict(random.sample(votes_selected.iteritems(), int(len(votes_selected) * DATA_PERCENTAGE / 100)))
</snippet></ROW><ROW><id>9100970</id><snippet>from numpy import cumsum
from operator import itemgetter

d={'dan':7, 'mike':2, 'john':3}

#unzip keys from values in a sorted order
keys, values = zip(*sorted(d.items(), key=itemgetter(1)))
total = sum(values)

# calculate cumsum and zip with keys into new dict
d_cump = dict(zip(keys, (100*subtotal/total for subtotal in cumsum(values))))
</snippet></ROW><ROW><id>9100970</id><snippet>{'dan': 100, 'john': 41, 'mike': 16}
</snippet></ROW><ROW><id>9100998</id><snippet>errBack</snippet></ROW><ROW><id>9100998</id><snippet>Deferred</snippet></ROW><ROW><id>9100998</id><snippet>addErrback</snippet></ROW><ROW><id>9101153</id><snippet>itertools.product()</snippet></ROW><ROW><id>9101153</id><snippet>for l in itertools.product(*letters):
    print ''.join(l)
</snippet></ROW><ROW><id>9101268</id><snippet>multiprocessing</snippet></ROW><ROW><id>9101268</id><snippet>multiprocessing</snippet></ROW><ROW><id>9101268</id><snippet>threading</snippet></ROW><ROW><id>9101268</id><snippet>multiprocessing</snippet></ROW><ROW><id>9101557</id><snippet>serialize</snippet></ROW><ROW><id>9101557</id><snippet>json</snippet></ROW><ROW><id>9101557</id><snippet>import json

def serialize(data):
    _data = {}
    for k, v in data.items():
        if isinstance(v, int):
            _data[k] = hex(v)
        else:
            _data[k] = v
    return json.dumps(_data, indent=4)


if __name__ == "__main__":
    data = {"a":1, "b":2.0, "c":3}
    print serialize(data)
</snippet></ROW><ROW><id>9101557</id><snippet>{
    "a": "0x1", 
    "c": "0x3", 
    "b": 2.0
}
</snippet></ROW><ROW><id>9101773</id><snippet>foldername</snippet></ROW><ROW><id>9101773</id><snippet>$ python -mfoldername.main
</snippet></ROW><ROW><id>9101773</id><snippet>main.py</snippet></ROW><ROW><id>9101773</id><snippet>__main__.py</snippet></ROW><ROW><id>9101773</id><snippet>$ python -mfoldername
</snippet></ROW><ROW><id>9101773</id><snippet>python -m</snippet></ROW><ROW><id>9101773</id><snippet>sys.path</snippet></ROW><ROW><id>9101773</id><snippet>Parent Folder/
└── foldername
    ├── __init__.py
    │   #    flags="test"
    └── __main__.py
        #    import foldername
        #   
        #    def main():
        #        print foldername.flags
        #   
        #    if __name__=="__main__":
        #        main()
</snippet></ROW><ROW><id>9101773</id><snippet>foldername</snippet></ROW><ROW><id>9101943</id><snippet>twisted.py</snippet></ROW><ROW><id>9101943</id><snippet>import twisted</snippet></ROW><ROW><id>9101943</id><snippet>twistd</snippet></ROW><ROW><id>9101943</id><snippet>twisted</snippet></ROW><ROW><id>9102307</id><snippet>'a'</snippet></ROW><ROW><id>9102307</id><snippet>'a' * 16</snippet></ROW><ROW><id>9102307</id><snippet>nSentences = len(re.findall(pat, shortText))
</snippet></ROW><ROW><id>9102629</id><snippet>argparse</snippet></ROW><ROW><id>9102629</id><snippet>argparse</snippet></ROW><ROW><id>9102629</id><snippet>import argparse

if __name__ == '__main__':
    parser=argparse.ArgumentParser()
    parser.add_argument('locations', nargs = '+')
    args=parser.parse_args()
    print(args.locations)
</snippet></ROW><ROW><id>9102629</id><snippet>% test.py /path/to/repo
['/path/to/repo']

% test.py /home/joe/hg /home/joe/test
['/home/joe/hg', '/home/joe/test']
</snippet></ROW><ROW><id>9102629</id><snippet>argparse</snippet></ROW><ROW><id>9102629</id><snippet>import argparse
import shlex
response = raw_input('Enter repo PATHs (e.g. /path/to/repo1 /path/to/repo2)')
parser=argparse.ArgumentParser()
parser.add_argument('locations', nargs = '+')
args=parser.parse_args(shlex.split(response))
print(args.locations)
</snippet></ROW><ROW><id>9102629</id><snippet>argparse</snippet></ROW><ROW><id>9102677</id><snippet>while</snippet></ROW><ROW><id>9102677</id><snippet>if</snippet></ROW><ROW><id>9102677</id><snippet>iter()</snippet></ROW><ROW><id>9102677</id><snippet>for line in iter(lambda: raw_input("&gt;&gt;&gt;"), ""):
    line_list.append(line)
</snippet></ROW><ROW><id>9102810</id><snippet>var s = "Home of the gods. Elysium, Avalon, earthly paradise.--Celtic (general): MacCulloch Celtic 14; Irish: ibid. 37f., 114ff., Cross; Welsh: ibid. 193; Icel.: MacCulloch Eddic 312ff.; Hindu: Penzer I 125 n. 1.; Jewish: Neuman.--Hawaii: Beckwith Myth 67; So. Am. Indian (Apapocuv\xe1-Guarani): M\xe9traux RMLP XXXIII 122; Africa (Fang): Trilles 130."
var rx = /(?:\-{2}|\;\s)((?:\w+\.\s)*\w+)(?:\s\(([^\)]+)\))?\:/g

while(m = rx.exec(s)){
    console.log(m[1] + ', ' + m[2]);
}
</snippet></ROW><ROW><id>9102810</id><snippet>Celtic, general
Irish, undefined
Welsh, undefined
Hindu, undefined
Jewish, undefined
Hawaii, undefined
So. Am. Indian, Apapocuvá-Guarani
Africa, Fang
</snippet></ROW><ROW><id>9103051</id><snippet>import multiprocessing
import numpy as np
import thread

class Sum: #again, this class is from ParallelPython's example code (I modified for an array and added comments)
    def __init__(self):
        self.value = np.zeros((1,512*512)) #this is the initialization of the sum
        self.lock = thread.allocate_lock()
        self.count = 0

    def add(self,value):
        self.count += 1
        self.lock.acquire() #lock so sum is correct if two processes return at same time
        self.value += value #the actual summation
        self.lock.release()

def computation(index):
    array1 = np.ones((1,512*512))*index #this is where the array-returning computation goes
    return array1

def summers(num_iters):
    pool = multiprocessing.Pool(processes=8)

    sumArr = Sum() #create an instance of callback class and zero the sum
    for index in range(num_iters):
        singlepoolresult = pool.apply_async(computation,(index,),callback=sumArr.add)

    pool.close()
    pool.join() #waits for all the processes to finish

    return sumArr.value
</snippet></ROW><ROW><id>9103051</id><snippet>def summers(num_iters):
    pool = multiprocessing.Pool(processes=8)

    outputArr = np.zeros((num_iters,1,512*512)) #you wouldn't have to initialize these
    sumArr = np.zeros((1,512*512))              #but I do to make sure I have the memory

    outputArr = np.array(pool.map(computation, range(num_iters)))
    sumArr = outputArr.sum(0)

    pool.close() #not sure if this is still needed since map waits for all iterations

    return sumArr
</snippet></ROW><ROW><id>9103163</id><snippet>xargs</snippet></ROW><ROW><id>9103163</id><snippet>--max-args</snippet></ROW><ROW><id>9103163</id><snippet>--max-chars</snippet></ROW><ROW><id>9103163</id><snippet>xargs</snippet></ROW><ROW><id>9103163</id><snippet>--max-chars</snippet></ROW><ROW><id>9103464</id><snippet>from mpl_toolkits.axes_grid1 import host_subplot
import mpl_toolkits.axisartist as AA
import matplotlib.pyplot as plt

if 1:

    host = host_subplot(111, axes_class=AA.Axes)
    plt.subplots_adjust(right=0.75)

    par1 = host.twinx()
    par2 = host.twinx()

    offset = 60
    new_fixed_axis = par2.get_grid_helper().new_fixed_axis
    par2.axis["right"] = new_fixed_axis(loc="right",
                                        axes=par2,
                                        offset=(offset, 0))

    par2.axis["right"].toggle(all=True)

    host.set_xlim(0, 2)
    host.set_ylim(0, 2)

    host.set_xlabel("Distance")
    host.set_ylabel("Density")
    par1.set_ylabel("Temperature")
    par2.set_ylabel("Velocity")

    p1, = host.plot([0, 1, 2], [0, 1, 2], label="Density")
    p2, = par1.plot([0, 1, 2], [0, 3, 2], label="Temperature")
    p3, = par2.plot([0, 1, 2], [50, 30, 15], label="Velocity")

    par1.set_ylim(0, 4)
    par2.set_ylim(1, 65)

    host.legend()

    host.axis["left"].label.set_color(p1.get_color())
    par1.axis["right"].label.set_color(p2.get_color())
    par2.axis["right"].label.set_color(p3.get_color())

    plt.draw()
    plt.show()

    #plt.savefig("Test")
</snippet></ROW><ROW><id>9103783</id><snippet>#!/usr/bin/env python

from PIL import Image, ImageChops

F_IN = "/path/to/image_in.jpg"
F_OUT = "/path/to/image_out.jpg"

size = (80,80)

image = Image.open(F_IN)
image.thumbnail(size, Image.ANTIALIAS)
image_size = image.size

thumb = image.crop( (0, 0, size[0], size[1]) )

offset_x = max( (size[0] - image_size[0]) / 2, 0 )
offset_y = max( (size[1] - image_size[1]) / 2, 0 )

thumb = ImageChops.offset(thumb, offset_x, offset_y)
thumb.save(F_OUT)
</snippet></ROW><ROW><id>9103783</id><snippet>#!/usr/bin/env python

from PIL import Image, ImageChops, ImageOps

def makeThumb(f_in, f_out, size=(80,80), pad=False):

    image = Image.open(f_in)
    image.thumbnail(size, Image.ANTIALIAS)
    image_size = image.size

    if pad:
        thumb = image.crop( (0, 0, size[0], size[1]) )

        offset_x = max( (size[0] - image_size[0]) / 2, 0 )
        offset_y = max( (size[1] - image_size[1]) / 2, 0 )

        thumb = ImageChops.offset(thumb, offset_x, offset_y)

    else:
        thumb = ImageOps.fit(image, size, Image.ANTIALIAS, (0.5, 0.5))

    thumb.save(f_out)


source = "/path/to/source/image.JPG"

makeThumb(source, "/path/to/source/image_padded.JPG", pad=True)
makeThumb(source, "/path/to/source/image_centerCropped.JPG", pad=False)
</snippet></ROW><ROW><id>9104136</id><snippet>'.'.join([''] + args[f(n):f(n+1)] + [suffix])
</snippet></ROW><ROW><id>9104136</id><snippet>from itertools import chain, islice
string = '.'.join(chain([string],  islice(args, f(n), f(n+1)), [suffix]))
</snippet></ROW><ROW><id>9104136</id><snippet>args</snippet></ROW><ROW><id>9104136</id><snippet>(string,)</snippet></ROW><ROW><id>9104136</id><snippet>[string]</snippet></ROW><ROW><id>9104136</id><snippet>args</snippet></ROW><ROW><id>9104136</id><snippet>islice</snippet></ROW><ROW><id>9104136</id><snippet>[f(n):f(n+1)]</snippet></ROW><ROW><id>9104136</id><snippet>args</snippet></ROW><ROW><id>9104136</id><snippet>islice</snippet></ROW><ROW><id>9104167</id><snippet>import os
import shutil


source = '/tmp/src/'
destinations = []

def copy_files_multiple_dest(source,destinations):
  sfiles = os.listdir(source) # list of all files in source
  for f in sfiles:
    for dest in destinations:
      shutil.copy(os.path.join(source,f), dest)
</snippet></ROW><ROW><id>9104169</id><snippet>thing1</snippet></ROW><ROW><id>9104169</id><snippet>&gt;&gt;&gt; st = "www.a.com/thing1.html"
&gt;&gt;&gt; filename = re.findall(r"/(\w+).",st)
&gt;&gt;&gt; filename
['thing1']
&gt;&gt;&gt; filename = "".join(filename) + '.txt'
&gt;&gt;&gt; filename
'thing1.txt'
&gt;&gt;&gt; f = open(filename,'w')
&gt;&gt;&gt; f.writelines(st)
</snippet></ROW><ROW><id>9104169</id><snippet>list</snippet></ROW><ROW><id>9104169</id><snippet>writelines</snippet></ROW><ROW><id>9104169</id><snippet>mylist = ["some static text common to all files",st,"more static content"]
f.writelines(mylist)
</snippet></ROW><ROW><id>9104306</id><snippet>prior_available = available
allocated = [i[1] for i in weights_and_mins]
available = available - sum(allocated)
if available &lt; 0:
    The hell breaks loose
total_weight = float(sum([i[0] for i in weights_and_mins]))
for i in len(weights_and_min):
    v = round( weights_and_min[i][0]*prior_available/total_weight )
    nv = min( available, max(v-allocated[i],0) )
    allocated[i] += nv
    available -= nv
</snippet></ROW><ROW><id>9104807</id><snippet>dx, dy = -dy, dx
</snippet></ROW><ROW><id>9104819</id><snippet>d = {u'a': u'a', u'c': None, u'b': u'b', u'e': None, u'd': None, u'g': u'g', u'f': u'f', u'i': u'i', u'h': u'h', u'k': u'k', u'j': u'j', u'm': None, u'l': u'l', u'o': u'o', u'n': None, u'p': u'p'}

resolve = ''.join((value for value in d.itervalues() if value is not None))
print resolve
# u'abgfihkjlop'
</snippet></ROW><ROW><id>9104819</id><snippet>keys = ('c', 'g', 'f', 'm')
''.join([v for v in (d[k] for k in keys) if v is not None])
</snippet></ROW><ROW><id>9104819</id><snippet>from time import time

d = {}
for i in xrange(1000):
    v = u'v%d' % i
    d[v] = v

def test1():
    return ''.join(v for v in d.itervalues() if v is not None)

def test2():
    result = []
    for v in d.itervalues():
        if v is not None:
            result.append(v)
    return ''.join(result)

def test3():
    result = ''
    for v in d.itervalues():
        if v is not None:
            result += v
    return result

def timeit(fn):
    start = time()
    r = fn()
    end = time() - start
    print "Sec:", end, "msec:", end*1000


&gt;&gt;&gt; timeit(test1)
Sec: 0.000195980072021 msec: 0.195980072021
&gt;&gt;&gt; timeit(test2)
Sec: 0.000204086303711 msec: 0.204086303711
&gt;&gt;&gt; timeit(test3)
Sec: 0.000397920608521 msec: 0.397920608521
</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>cls</snippet></ROW><ROW><id>9104864</id><snippet>ClassName.methodName</snippet></ROW><ROW><id>9104864</id><snippet>self</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>&gt;&gt;&gt; class Foo(object):
    def __new__(cls, *args, **kwargs):
        return object.__new__(cls)
    def method(self):
        pass

&gt;&gt;&gt; class Bar(object):
    pass

&gt;&gt;&gt; Foo.method
&lt;unbound method Foo.method&gt;

&gt;&gt;&gt; Foo.__new__
&lt;function __new__ at 0x0000000002DB1C88&gt;

&gt;&gt;&gt; Foo.method(Bar())
Traceback (most recent call last):
  File "&lt;pyshell#36&gt;", line 1, in &lt;module&gt;
    Foo.method(Bar())
TypeError: unbound method method() must be called with Foo instance as first argument (got Bar instance instead)

&gt;&gt;&gt; Foo.__new__(Bar)
&lt;__main__.Bar object at 0x0000000002DB4F28&gt;
</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>Bar</snippet></ROW><ROW><id>9104864</id><snippet>Foo.__new__</snippet></ROW><ROW><id>9104864</id><snippet>Bar.__new__</snippet></ROW><ROW><id>9104864</id><snippet>object.__new__</snippet></ROW><ROW><id>9104864</id><snippet>Model</snippet></ROW><ROW><id>9104864</id><snippet>ModelBase</snippet></ROW><ROW><id>9104864</id><snippet>ModelBase.__new__</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>__module__</snippet></ROW><ROW><id>9104864</id><snippet>    # Add all attributes to the class.
    for obj_name, obj in attrs.items():
        new_class.add_to_class(obj_name, obj)
</snippet></ROW><ROW><id>9104864</id><snippet>attrs</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>add_to_class</snippet></ROW><ROW><id>9104864</id><snippet>setattr</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>staticmethod</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>setattr</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>staticmethod</snippet></ROW><ROW><id>9104864</id><snippet>Test</snippet></ROW><ROW><id>9104864</id><snippet>Test</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>@staticmethod</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104864</id><snippet>staticmethod</snippet></ROW><ROW><id>9104864</id><snippet>__new__</snippet></ROW><ROW><id>9104872</id><snippet>def enter(event): root.after(500,show(event))
</snippet></ROW><ROW><id>9104872</id><snippet>after</snippet></ROW><ROW><id>9104872</id><snippet>def enter(event): root.after(500,show,event)
</snippet></ROW><ROW><id>9104872</id><snippet>root.after(500, show(event))</snippet></ROW><ROW><id>9104872</id><snippet>show(event)</snippet></ROW><ROW><id>9104872</id><snippet>None</snippet></ROW><ROW><id>9104872</id><snippet>root.after(500, None)</snippet></ROW><ROW><id>9105030</id><snippet>&gt;&gt;&gt; import yaml
&gt;&gt;&gt; s = '{foo: 8}'
&gt;&gt;&gt; yaml.load(s)
{'foo': 8}
</snippet></ROW><ROW><id>9105196</id><snippet>Chair.objects.filter(datetime__isnull=False)
</snippet></ROW><ROW><id>9105445</id><snippet>from Queue import Queue
import threading

class workingthread(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self._queue = Queue()

    def run(self):
        while True:

            item = self._queue.get(block=True)
            if item is None:
                return

            name, message = item
            chat = skype.CreateChatWith(name)
            chat.SendMessage(message)

    def processOne(self, data):
        self._queue.put_nowait(data)

    def stop(self):
        self._queue.put(None)
</snippet></ROW><ROW><id>9105502</id><snippet>D1CD...</snippet></ROW><ROW><id>9105502</id><snippet>1</snippet></ROW><ROW><id>9105502</id><snippet>ValidChars</snippet></ROW><ROW><id>9105502</id><snippet>1</snippet></ROW><ROW><id>9105502</id><snippet>0</snippet></ROW><ROW><id>9105502</id><snippet>0-9A-F</snippet></ROW><ROW><id>9105502</id><snippet>hashlib.sha1('user@me.com').hexdigest().upper()</snippet></ROW><ROW><id>9105502</id><snippet>D1CDF40BB39DB82315DD515A93CE160C3FB5FA2B</snippet></ROW><ROW><id>9105502</id><snippet>Encoding.UTF8.GetBytes</snippet></ROW><ROW><id>9105516</id><snippet>cursor.execute("update new_files set is_youtube = 1 where id=%s",(id,))
</snippet></ROW><ROW><id>9105996</id><snippet>from distutils.core import setup
import py2exe

setup(
     console = [
         {
             "script": "yourscipt.py",
             "icon_resources": [(1, "youricon.ico")]
         }
     ],
)
</snippet></ROW><ROW><id>9105996</id><snippet>setup.py py2exe install
</snippet></ROW><ROW><id>9106247</id><snippet>import traceback
try:
    filename,line_number,function_name,text = traceback.extract_stack()[-2]
    print(filename,line_number,function_name,text)
except IndexError:
    pass
</snippet></ROW><ROW><id>9106247</id><snippet>('/home/unutbu/pybin/foo.py', 4, '&lt;module&gt;', 'import bar')
</snippet></ROW><ROW><id>9106261</id><snippet>values_list</snippet></ROW><ROW><id>9106261</id><snippet>flat</snippet></ROW><ROW><id>9106261</id><snippet>ValuesQuerySet</snippet></ROW><ROW><id>9106261</id><snippet>MyModel.objects.values_list('product', flat=True)
# Out: [6, 1]  # this is a ValuesQuerySet that behaves like a list
</snippet></ROW><ROW><id>9106279</id><snippet>def DictAccess(kls):
    kls.__getitem__ = lambda self, attr: getattr(self, attr)
    kls.__setitem__ = lambda self, attr, value: setattr(self, attr, value)
    return kls
</snippet></ROW><ROW><id>9106279</id><snippet>class bar:
    pass

@DictAccess
class foo(bar):
    x = 1
    y = 2

myfoo = foo()
print myfoo.x # gives 1
print myfoo['y'] # gives 2
myfoo['z'] = 3
print myfoo.z # gives 3
</snippet></ROW><ROW><id>9106279</id><snippet>1
2
3
</snippet></ROW><ROW><id>9106312</id><snippet>def findRegions(self,data):
    #define the shifts for the kernel window
    shifts = [(-1,0),(0,-1),(0,1),(1,0)]

    #make the base array of zeros 
    #  array size by 2 in both dimensions
    acc = numpy.zeros(data.shape[:2])

    #compute the square root of the sum of squared color 
    # differences between a pixel and it's 
    # four cardinal neighbors
    for dx,dy in shifts:
        xstop = -1+dx or None
        ystop = -1+dy or None
        #per @Bago's comment, use the sum method to add up the color dimension
        #  instead of the list comprehension
        acc += ((data[1:-1,1:-1] - data[1+dx:xstop, 1+dy:ystop])**2).sum(-1)**.5

    #compute the average 
    acc /= (len(shifts) + 1)

    #build a mask array the same size as the original
    ret = numpy.zeros(data.shape[:2],dtype=numpy.bool)

    #apply the threshold
    #  note that the edges will be False
    ret[1:-1,1:-1] acc &lt; self.threshold    

    return ret
</snippet></ROW><ROW><id>9106324</id><snippet>optparse</snippet></ROW><ROW><id>9106324</id><snippet>argparse</snippet></ROW><ROW><id>9106324</id><snippet>from the_app import the_function_or_class_that_does_real_work</snippet></ROW><ROW><id>9106324</id><snippet>class Test_With_File( TestCase ):
    def assertFileMatches( self, expected, actual, error=None ):
        # use difflib or whatever to compare the two files.

class TestMain_Sample_File1( Test_With_File ):
    def test_should_produce_known_output( self ):
        with open("temp","w") as target:
            the_function_that_does_real_work( 'config1.txt', arg2=100, arg3=15, out=target )
        self.assertFileMatches( "output/config1.100.15.201202011733", "temp" )
</snippet></ROW><ROW><id>9106694</id><snippet>set_verify()</snippet></ROW><ROW><id>9106694</id><snippet>from OpenSSL.SSL import Context, Connection, SSLv23_METHOD
from OpenSSL.SSL import VERIFY_PEER, VERIFY_FAIL_IF_NO_PEER_CERT, VERIFY_CLIENT_ONCE

class SecureAJAXServer(BaseServer):
    def verify_callback(connection, x509, errnum, errdepth, ok):
        if not ok:
            print "Bad Certs"
        else:
            print "Certs are fine"
        return ok

    def __init__(self, server_address, HandlerClass):
        BaseServer.__init__(self, server_address, HandlerClass)
        ctx = Context(SSLv23_METHOD)
        ctx.use_privatekey_file ('keys/server.key')
        ctx.use_certificate_file('keys/server.crt')
        ctx.set_session_id("My_experimental_AJAX_Server")
        ctx.set_verify( VERIFY_PEER | VERIFY_FAIL_IF_NO_PEER_CERT | VERIFY_CLIENT_ONCE, verify_callback )
        self.socket = Connection(ctx, socket.socket(self.address_family, self.socket_type))
        self.server_bind()
        self.server_activate()
</snippet></ROW><ROW><id>9106694</id><snippet>from OpenSSL.SSL import ...</snippet></ROW><ROW><id>9106694</id><snippet>SSL.</snippet></ROW><ROW><id>9106979</id><snippet>__doc__</snippet></ROW><ROW><id>9106979</id><snippet>__name__</snippet></ROW><ROW><id>9106979</id><snippet>__doc__</snippet></ROW><ROW><id>9106979</id><snippet>import functools

def coroutine(func):
    @functools.wraps(func)
    def start(*args, **kwargs):
        cr = func(*args, **kwargs)
        cr.next()
        return cr
    return start
</snippet></ROW><ROW><id>9106979</id><snippet>functools.wraps</snippet></ROW><ROW><id>9106979</id><snippet>func</snippet></ROW><ROW><id>9106979</id><snippet>start</snippet></ROW><ROW><id>9106979</id><snippet>@coroutine
def leader_tracking():
    """
    Tracks 'leader' status - only returns transitions

    &gt;&gt;&gt; lt=leader_tracking()
    &gt;&gt;&gt; print lt.send(True)
    ('tr', 'up')
    &gt;&gt;&gt; print lt.send(False)
    ('tr', 'down')
    &gt;&gt;&gt; print lt.send(False)
    ('nop', None)
    """
    last_status = False
    result = ("nop", None)

    while True:
        status = yield result

        if status != last_status:
            direction = "up" if last_status == False else "down"
            last_status = status
            result = ("tr", direction)
        else:
            result = ("nop", None)
</snippet></ROW><ROW><id>9107181</id><snippet>print "Thank you for joining keywords " + ",".join(keywords) + "!"
</snippet></ROW><ROW><id>9107181</id><snippet>if notkeywords == ['join']:</snippet></ROW><ROW><id>9107181</id><snippet>&gt;&gt;&gt; mylist = [1,2]
&gt;&gt;&gt; mylist == 1
False
</snippet></ROW><ROW><id>9107181</id><snippet>in</snippet></ROW><ROW><id>9107181</id><snippet>&gt;&gt;&gt; mylist = [1,2]
&gt;&gt;&gt; 1 in mylist
True
</snippet></ROW><ROW><id>9107283</id><snippet>im_self</snippet></ROW><ROW><id>9107283</id><snippet>im_class</snippet></ROW><ROW><id>9107283</id><snippet>type</snippet></ROW><ROW><id>9107283</id><snippet>im_self</snippet></ROW><ROW><id>9107283</id><snippet>im_class</snippet></ROW><ROW><id>9107283</id><snippet>@classmethod</snippet></ROW><ROW><id>9107283</id><snippet>type</snippet></ROW><ROW><id>9107360</id><snippet>import os
os.environ['PYTHON_EGG_CACHE'] = '/usr/local/pylons/python-eggs'
</snippet></ROW><ROW><id>9107761</id><snippet>omit_optional_tags=False</snippet></ROW><ROW><id>9107761</id><snippet>parser = html5lib.HTMLParser(tree = html5lib.treebuilders.getTreeBuilder("lxml"))
document = parser.parse(html)    
walker = html5lib.treewalkers.getTreeWalker("lxml")
stream = walker(document)
s = serializer.htmlserializer.HTMLSerializer(omit_optional_tags=False)
output_generator = s.serialize(stream)
for item in output_generator:
         print item


&lt;!DOCTYPE html&gt;
&lt;html lang=en&gt;
&lt;head&gt;


&lt;title&gt;
Hi
&lt;/title&gt;


&lt;/head&gt;


&lt;body&gt;


&lt;script src=a.js&gt;
&lt;/script&gt;


&lt;script src=b.js&gt;
&lt;/script&gt;




&lt;/body&gt;
&lt;/html&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9108028</id><snippet>dict_to_entity</snippet></ROW><ROW><id>9108028</id><snippet>create_entity</snippet></ROW><ROW><id>9108028</id><snippet>dict_to_entity</snippet></ROW><ROW><id>9108028</id><snippet>__track_max_id</snippet></ROW><ROW><id>9108028</id><snippet>__track_max_id</snippet></ROW><ROW><id>9108028</id><snippet>def __track_max_id(self, entity):
  """Check the entity to see it has a numeric ID higher than any seen so far.

  High IDs are stored in self.high_ids[path-to-entity-kind].
  They are not tracked if self.increment_id is None.

  Args:
    entity: An entity with a key.
  """
  if not self.increment_id:
    return
  if not entity:
    return

  if isinstance(entity, datastore.Entity):
    entities = [entity]
  else:
    entities = entity

  for entity in entities:
    if not entity.key():
      continue
    key = entity.key()
    key_id = key.id()
    if not key_id:
      continue
    path = tuple(key.to_path()[:-1])
    if self.high_ids.get(path, 0) &lt; key_id:
      self.high_ids[path] = key_id
</snippet></ROW><ROW><id>9108030</id><snippet>class Node(...):
    def get_children(self, order='new'):
        if order == 'new':
            orderby = Node.created.desc()
        elif order == 'old':
            orderby = Node.created.asc()
        return DBSession.query(Node).filter(Node.parent_id == self.id).order_by(orderby).all()
</snippet></ROW><ROW><id>9108109</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; a = range(100)
&gt;&gt;&gt; itemgetter(5,13,25)(a)
(5, 13, 25)
</snippet></ROW><ROW><id>9108504</id><snippet>memo.get(n, sentinel)</snippet></ROW><ROW><id>9108603</id><snippet>Content-Transfer-Encoding</snippet></ROW><ROW><id>9108603</id><snippet>is_multipart()</snippet></ROW><ROW><id>9108603</id><snippet>Content-Type</snippet></ROW><ROW><id>9108603</id><snippet>multipart/alternative</snippet></ROW><ROW><id>9108603</id><snippet>Content-Type: multipart/alternative; boundary="=_d6644db1a848db3cb25f2a8973539487"
Subject: multipart sample
From: Foo Bar &lt;foo@example.net&gt;
To: Fred Flintstone &lt;fred@example.net&gt;

--=_d6644db1a848db3cb25f2a8973539487
Content-Transfer-Encoding: base64
Content-Type: text/plain; charset=utf-8

SOME BASE64 HERE
--=_d6644db1a848db3cb25f2a8973539487
Content-Transfer-Encoding: base64
Content-Type: text/html; charset=utf-8

AND SOME OTHER BASE64 HERE
</snippet></ROW><ROW><id>9108648</id><snippet>root.mainloop() 
</snippet></ROW><ROW><id>9108648</id><snippet>def print_it(event):
    print var.get()
    root.quit()
</snippet></ROW><ROW><id>9108662</id><snippet>mako</snippet></ROW><ROW><id>9108662</id><snippet>Undefined</snippet></ROW><ROW><id>9108662</id><snippet>__nonzero__</snippet></ROW><ROW><id>9108662</id><snippet>class Undefined(object):
    """Represents an undefined value in a template.

    All template modules have a constant value 
    ``UNDEFINED`` present which is an instance of this
    object.

    """
    def __str__(self):
        raise NameError("Undefined")
    def __nonzero__(self):
        return False

UNDEFINED = Undefined()
</snippet></ROW><ROW><id>9108662</id><snippet>strict_undefined</snippet></ROW><ROW><id>9108662</id><snippet>&gt;&gt;&gt; from mako.template import Template
&gt;&gt;&gt; mytemplate = Template("""%if x&gt;5:
...     &lt;h1&gt;helloworld&lt;/h1&gt;
... %endif""", strict_undefined=True)
&gt;&gt;&gt; mytemplate.render()
...
NameError: 'x' is not defined
</snippet></ROW><ROW><id>9108662</id><snippet>strict_undefined</snippet></ROW><ROW><id>9108662</id><snippet>mako.template.Template</snippet></ROW><ROW><id>9108662</id><snippet>mako.lookup.TemplateLookup</snippet></ROW><ROW><id>9108843</id><snippet>def send_everyone(message):
    for i in range(len(peers)):
        chunk = (str(my_id)+":"+message).rjust(32, '0')
        peers[i].send(chunk)
</snippet></ROW><ROW><id>9108843</id><snippet>def message_listener(conn, address, terminate_e):
    while (not terminate_e.isSet()):
        try:
            msg_in = conn.recv(32)

            ...
</snippet></ROW><ROW><id>9108851</id><snippet>impmodule = __import__('%s.models' % module.__name__)
__import__('%s.forms' % module.__name__)    

   ...

    setattr(impmodule.forms, form_name, form_class)
</snippet></ROW><ROW><id>9108851</id><snippet>__import__</snippet></ROW><ROW><id>9108931</id><snippet>lst_fact = map(fact, lst)
reduce(operator.mul, lst_fact)
</snippet></ROW><ROW><id>9109127</id><snippet>subprocess</snippet></ROW><ROW><id>9109127</id><snippet>from subprocess import check_output as qx

output = qx(['sqlite3', 'foo.db', 'select * from sqlite_master'])
print output
</snippet></ROW><ROW><id>9109127</id><snippet>sqlite3</snippet></ROW><ROW><id>9109127</id><snippet>import sqlite3

conn = sqlite3.connect('foo.db')
for row in conn.execute('select * from sqlite_master'):
    print row
</snippet></ROW><ROW><id>9109127</id><snippet>envoy</snippet></ROW><ROW><id>9109127</id><snippet>import envoy

r = envoy.run([["sqlite3", "foo.db", "select * from sqlite_master"]])
print r.std_out
</snippet></ROW><ROW><id>9109174</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re

text = "aaaa[ab][cd][ef]"

var = []
if re.match("^(\w+)(\[\w+\])*$", text):
        a = re.findall("^\w+", text)[0]
        var.append(a)
        b = re.findall("\[\w+\]", text)
        for i in b:
                var.append(i)
print var
</snippet></ROW><ROW><id>9109174</id><snippet>['aaaa', '[ab]', '[cd]', '[ef]']
</snippet></ROW><ROW><id>9109626</id><snippet>STRING</snippet></ROW><ROW><id>9109626</id><snippet>object</snippet></ROW><ROW><id>9109626</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; mydf = np.empty( (2,), dtype=[('file_name',object),('file_size_mb',float)] )
&gt;&gt;&gt; mydf['file_name'][0]='foobarasdf.tif'
&gt;&gt;&gt; mydf['file_name'][1]='arghtidlsarbda.jpg'
&gt;&gt;&gt; mydf
array([('foobarasdf.tif', 0.0), ('arghtidlsarbda.jpg', 0.0)], 
      dtype=[('file_name', '|O8'), ('file_size_mb', '&lt;f8')])
</snippet></ROW><ROW><id>9109699</id><snippet>import threading
import queue

def console(q):
    while 1:
        cmd = input('&gt; ')
        q.put(cmd)
        if cmd == 'quit':
            break

def action_foo():
    print('--&gt; action foo')

def action_bar():
    print('--&gt; action bar')

def invalid_input():
    print('---&gt; Unknown command')

def main():
    cmd_actions = {'foo': action_foo, 'bar': action_bar}
    cmd_queue = queue.Queue()

    dj = threading.Thread(target=console, args=(cmd_queue,))
    dj.start()

    while 1:
        cmd = cmd_queue.get()
        if cmd == 'quit':
            break
        action = cmd_actions.get(cmd, invalid_input)
        action()

main()
</snippet></ROW><ROW><id>9109699</id><snippet>&gt; foo
&gt; --&gt; action foo
bar
&gt; --&gt; action bar
cat
&gt; --&gt; Unknown command
quit
</snippet></ROW><ROW><id>9109699</id><snippet>lock</snippet></ROW><ROW><id>9109699</id><snippet>import threading
import queue

def console(q, lock):
    while 1:
        input()   # Afther pressing Enter you'll be in "input mode"
        with lock:
            cmd = input('&gt; ')

        q.put(cmd)
        if cmd == 'quit':
            break

def action_foo(lock):
    with lock:
        print('--&gt; action foo')
    # other actions

def action_bar(lock):
    with lock:
        print('--&gt; action bar')

def invalid_input(lock):
    with lock:
        print('--&gt; Unknown command')

def main():
    cmd_actions = {'foo': action_foo, 'bar': action_bar}
    cmd_queue = queue.Queue()
    stdout_lock = threading.Lock()

    dj = threading.Thread(target=console, args=(cmd_queue, stdout_lock))
    dj.start()

    while 1:
        cmd = cmd_queue.get()
        if cmd == 'quit':
            break
        action = cmd_actions.get(cmd, invalid_input)
        action(stdout_lock)

main()
</snippet></ROW><ROW><id>9109699</id><snippet>    # press Enter
&gt; foo
--&gt; action foo
    # press Enter
&gt; bar
--&gt; action bar
    # press Enter
&gt; cat
--&gt; Unknown command
    # press Enter
&gt; quit
</snippet></ROW><ROW><id>9109699</id><snippet>Enter</snippet></ROW><ROW><id>9109723</id><snippet>main.py</snippet></ROW><ROW><id>9109723</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp import util

class MainHandler(webapp.RequestHandler):
    def get(self):
        self.redirect('http://jacob.bearce.me/')

application = webapp.WSGIApplication([('/.*', MainHandler)],
                                     debug=True)

def main():
    util.run_wsgi_app(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9109723</id><snippet>app.yaml</snippet></ROW><ROW><id>9109723</id><snippet>application: myapp
version: 1
runtime: python
api_version: 1

handlers:
- url: .*
  script: main.py
</snippet></ROW><ROW><id>9109723</id><snippet>myapp</snippet></ROW><ROW><id>9109816</id><snippet>import sys
sys.path.append('/home/ching')
from maindir import constants
</snippet></ROW><ROW><id>9110785</id><snippet>unique=True</snippet></ROW><ROW><id>9110785</id><snippet>IntegrityError</snippet></ROW><ROW><id>9110785</id><snippet>a = MyObject(name="Max")
b = MyObject(name="Moritz")
session.add_all([a, b])
session.commit()

# Now: switch names!
atmp = a.name
btemp = b.name

a.name = a.name+btemp # Temp set the any random name
session.commit()

b.name = atemp
a.name = btemp
session.commit() # Run the update query for update the record.
</snippet></ROW><ROW><id>9110838</id><snippet>import re

m = """01-someText151645.txt,Wed Feb 1 16:15:18 2012,1328112918.57801-HalfMeg151646.txt,Wed Feb 1 16:15:18 2012,1328112918.578"""

print(m)

addNewLineBefore = lambda matchObject: "\n" + matchObject.group(0)

print ( re.sub(r'\d{2}-',addNewLineBefore,m) )
</snippet></ROW><ROW><id>9110838</id><snippet>\d{2}-</snippet></ROW><ROW><id>9110838</id><snippet>import re
input = open("infile","r")
output = open("outfile","w")

oneLine = re.compile(r"""(
        \d{2}-  # the beginning of the line
        .+?     # the middle of the line
        \.\d{3} # the dot and three digits at the end
)""", re.X)

while buffer:
    buffer = input.read(6000) # adjust this to suit
    #newbuffer = re.split(r'(\d{2}-.+?\.\d{3})',buffer) # I'll use the commented re object above
    newbuffer = oneLine.split(buffer)
    newbuffer = filter(None,newbuffer)
    output.write( "\n".join(newbuffer) )
input.close()
output.close()
</snippet></ROW><ROW><id>9111275</id><snippet>os.environ</snippet></ROW><ROW><id>9111275</id><snippet>matan@swarm ~ $ python
Python 2.7.2+ (default, Jan 20 2012, 17:51:10) 
[GCC 4.6.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.environ
{'LOGNAME': 'matan', 'WINDOWID': '25165833', 'DM_CONTROL': '/var/run/xdmctl', 'PATH': '/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games', 'DISPLAY': ':0', 'SSH_AGENT_PID': '3648', 'LANG': 'en_GB.UTF-8', ... }
</snippet></ROW><ROW><id>9111424</id><snippet>unquote()</snippet></ROW><ROW><id>9111694</id><snippet>class TestModel(models.Model):
    enb_id = models.IntegerField(null=True, verbose_name=" eNB ID", blank=True)
</snippet></ROW><ROW><id>9111710</id><snippet>ConfigParser</snippet></ROW><ROW><id>9111710</id><snippet>_read()</snippet></ROW><ROW><id>9111710</id><snippet>ConfigParser</snippet></ROW><ROW><id>9111710</id><snippet>class ValuesWithCommentsConfigParser(ConfigParser.ConfigParser):

    def _read(self, fp, fpname):
        from ConfigParser import DEFAULTSECT, MissingSectionHeaderError, ParsingError

        cursect = None                        # None, or a dictionary
        optname = None
        lineno = 0
        e = None                              # None, or an exception
        while True:
            line = fp.readline()
            if not line:
                break
            lineno = lineno + 1
            # comment or blank line?
            if line.strip() == '' or line[0] in '#;':
                continue
            if line.split(None, 1)[0].lower() == 'rem' and line[0] in "rR":
                # no leading whitespace
                continue
                # continuation line?
            if line[0].isspace() and cursect is not None and optname:
                value = line.strip()
                if value:
                    cursect[optname].append(value)
            # a section header or option header?
            else:
                # is it a section header?
                mo = self.SECTCRE.match(line)
                if mo:
                    sectname = mo.group('header')
                    if sectname in self._sections:
                        cursect = self._sections[sectname]
                    elif sectname == DEFAULTSECT:
                        cursect = self._defaults
                    else:
                        cursect = self._dict()
                        cursect['__name__'] = sectname
                        self._sections[sectname] = cursect
                        # So sections can't start with a continuation line
                    optname = None
                # no section header in the file?
                elif cursect is None:
                    raise MissingSectionHeaderError(fpname, lineno, line)
                # an option line?
                else:
                    mo = self._optcre.match(line)
                    if mo:
                        optname, vi, optval = mo.group('option', 'vi', 'value')
                        optname = self.optionxform(optname.rstrip())
                        # This check is fine because the OPTCRE cannot
                        # match if it would set optval to None
                        if optval is not None:
                            optval = optval.strip()
                            # allow empty values
                            if optval == '""':
                                optval = ''
                            cursect[optname] = [optval]
                        else:
                            # valueless option handling
                            cursect[optname] = optval
                    else:
                        # a non-fatal parsing error occurred.  set up the
                        # exception but keep going. the exception will be
                        # raised at the end of the file and will contain a
                        # list of all bogus lines
                        if not e:
                            e = ParsingError(fpname)
                        e.append(lineno, repr(line))
            # if any parsing errors occurred, raise an exception
        if e:
            raise e

        # join the multi-line values collected while reading
        all_sections = [self._defaults]
        all_sections.extend(self._sections.values())
        for options in all_sections:
            for name, val in options.items():
                if isinstance(val, list):
                    options[name] = '\n'.join(val)
</snippet></ROW><ROW><id>9111710</id><snippet>ValuesWithCommentsConfigParser</snippet></ROW><ROW><id>9111710</id><snippet>config.ini</snippet></ROW><ROW><id>9111710</id><snippet>config = ValuesWithCommentsConfigParser()
config.read('config.ini')
assert config.get('local', 'variable1') == 'value1 ; comment1'
assert config.get('local', 'variable2') == 'value2 # comment2'
</snippet></ROW><ROW><id>9111772</id><snippet>Accept</snippet></ROW><ROW><id>9111772</id><snippet>Accept: text/plain
</snippet></ROW><ROW><id>9112133</id><snippet>from django.contrib.comments.forms import CommentForm

# views.py
dev my_view(request):
    my_obj = MyModel.objects.get(id=1)
    form = CommentForm(my_obj)
    return render(request, 'comment-template.html', {'form': form})

# comment_template.html
&lt;form action="{% comment_form_target %}" method="post"&gt;
    {% csrf token %}
    {{ form.as_p }}
    &lt;input type="submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>9112213</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>9112293</id><snippet>from osutils import call</snippet></ROW><ROW><id>9112293</id><snippet>yourmodule.call</snippet></ROW><ROW><id>9112293</id><snippet>test_ib6_check</snippet></ROW><ROW><id>9112364</id><snippet>glEnable(GL_TEXTURE_2D)
</snippet></ROW><ROW><id>9112364</id><snippet>def paintGL(self):
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture)

    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    glTranslate(0.0, 0.0, -50.0)
    glScale(20.0, 20.0, 20.0)
    glRotate(self.yRotDeg, 0.2, 1.0, 0.3)
    glTranslate(-0.5, -0.5, -0.5)

    glBegin(GL_TRIANGLES)
    for vert in self.poly_verts:
        glTexCoord2f (vert[6], vert[7]);
        glVertex3f(vert[0], vert[1], vert[2])

    glEnd()
    glDisable(GL_TEXTURE_2D)
</snippet></ROW><ROW><id>9112373</id><snippet>findall</snippet></ROW><ROW><id>9112373</id><snippet>track</snippet></ROW><ROW><id>9112373</id><snippet>api_results = ElementTree.parse(response).findall('.//track')
</snippet></ROW><ROW><id>9112542</id><snippet>net localgroup administrators "DOMAIN\Domain Users" /delete
</snippet></ROW><ROW><id>9112588</id><snippet>def merge(lsts):
  sets = [set(lst) for lst in lsts if lst]
  merged = 1
  while merged:
    merged = 0
    results = []
    while sets:
      common, rest = sets[0], sets[1:]
      sets = []
      for x in rest:
        if x.isdisjoint(common):
          sets.append(x)
        else:
          merged = 1
          common |= x
      results.append(common)
    sets = results
  return sets

lst = [[65, 17, 5, 30, 79, 56, 48, 62],
       [6, 97, 32, 93, 55, 14, 70, 32],
       [75, 37, 83, 34, 9, 19, 14, 64],
       [43, 71],
       [],
       [89, 49, 1, 30, 28, 3, 63],
       [35, 21, 68, 94, 57, 94, 9, 3],
       [16],
       [29, 9, 97, 43],
       [17, 63, 24]]
print merge(lst)
</snippet></ROW><ROW><id>9112588</id><snippet>import random

# adapt parameters to your own usage scenario   
class_count = 50
class_size = 1000
list_count_per_class = 100
large_list_sizes = list(range(100, 1000))
small_list_sizes = list(range(0, 100))
large_list_probability = 0.5

if False:  # change to true to generate the test data file (takes a while)
  with open("/tmp/test.txt", "w") as f:
    lists = []
    classes = [range(class_size*i, class_size*(i+1)) for i in range(class_count)]
    for c in classes:
      # distribute each class across ~300 lists
      for i in xrange(list_count_per_class):
        lst = []
        if random.random() &lt; large_list_probability:
          size = random.choice(large_list_sizes)
        else:
          size = random.choice(small_list_sizes)
        nums = set(c)
        for j in xrange(size):
          x = random.choice(list(nums))
          lst.append(x)
          nums.remove(x)
        random.shuffle(lst)
        lists.append(lst)
    random.shuffle(lists)
    for lst in lists:
      f.write(" ".join(str(x) for x in lst) + "\n")

setup = """
# Niklas'
def merge_niklas(lsts):
  sets = [set(lst) for lst in lsts if lst]
  merged = 1
  while merged:
    merged = 0
    results = []
    while sets:
      common, rest = sets[0], sets[1:]
      sets = []
      for x in rest:
        if x.isdisjoint(common):
          sets.append(x)
        else:
          merged = 1
          common |= x
      results.append(common)
    sets = results
  return sets

# Rik's
def merge_rik(data):
  sets = (set(e) for e in data if e)
  results = [next(sets)]
  for e_set in sets:
    to_update = []
    for i,res in enumerate(results):
      if not e_set.isdisjoint(res):
        to_update.insert(0,i)

    if not to_update:
      results.append(e_set)
    else:
      last = results[to_update.pop(-1)]
      for i in to_update:
        last |= results[i]
        del results[i]
      last |= e_set
  return results

# katrielalex's
def pairs(lst):
  i = iter(lst)
  first = prev = item = i.next()
  for item in i:
    yield prev, item
    prev = item
  yield item, first

import networkx
def merge_katrielalex(lsts):
  g = networkx.Graph()
  for lst in lsts:
    for edge in pairs(lst):
      g.add_edge(*edge)
  return networkx.connected_components(g)

# agf's (optimized)
from collections import deque
def merge_agf_optimized(lists):
  sets = deque(set(lst) for lst in lists if lst)
  results = []
  disjoint = 0
  current = sets.pop()
  while True:
    merged = False
    newsets = deque()
    for _ in xrange(disjoint, len(sets)):
      this = sets.pop()
      if not current.isdisjoint(this):
        current.update(this)
        merged = True
        disjoint = 0
      else:
        newsets.append(this)
        disjoint += 1
    if sets:
      newsets.extendleft(sets)
    if not merged:
      results.append(current)
      try:
        current = newsets.pop()
      except IndexError:
        break
      disjoint = 0
    sets = newsets
  return results

# agf's (simple)
def merge_agf_simple(lists):
  newsets, sets = [set(lst) for lst in lists if lst], []
  while len(sets) != len(newsets):
    sets, newsets = newsets, []
    for aset in sets:
      for eachset in newsets:
        if not aset.isdisjoint(eachset):
          eachset.update(aset)
          break
      else:
        newsets.append(aset)
  return newsets

# alexis'
def merge_alexis(data):
  bins = range(len(data))  # Initialize each bin[n] == n
  nums = dict()

  data = [set(m) for m in data ]  # Convert to sets
  for r, row in enumerate(data):
    for num in row:
      if num not in nums:
        # New number: tag it with a pointer to this row's bin
        nums[num] = r
        continue
      else:
        dest = locatebin(bins, nums[num])
        if dest == r:
          continue # already in the same bin

        if dest &gt; r:
          dest, r = r, dest   # always merge into the smallest bin

        data[dest].update(data[r])
        data[r] = None
        # Update our indices to reflect the move
        bins[r] = dest
        r = dest

  # Filter out the empty bins
  have = [ m for m in data if m ]
  return have


def locatebin(bins, n):
  while bins[n] != n:
    n = bins[n]
  return n

lsts = []
size = 0
num = 0
max = 0
for line in open("/tmp/test.txt", "r"):
  lst = [int(x) for x in line.split()]
  size += len(lst)
  if len(lst) &gt; max: max = len(lst)
  num += 1
  lsts.append(lst)
"""

setup += """
print "%i lists, {class_count} equally distributed classes, average size %i, max size %i" % (num, size/num, max)
""".format(class_count=class_count)

import timeit
print "niklas"
print timeit.timeit("merge_niklas(lsts)", setup=setup, number=3)
print "rik"
print timeit.timeit("merge_rik(lsts)", setup=setup, number=3)
print "katrielalex"
print timeit.timeit("merge_katrielalex(lsts)", setup=setup, number=3)
print "agf (1)"
print timeit.timeit("merge_agf_optimized(lsts)", setup=setup, number=3)
print "agf (2)"
print timeit.timeit("merge_agf_simple(lsts)", setup=setup, number=3)
print "alexis"
print timeit.timeit("merge_alexis(lsts)", setup=setup, number=3)
</snippet></ROW><ROW><id>9112588</id><snippet>=====================
# many disjoint classes, large lists
class_count = 50
class_size = 1000
list_count_per_class = 100
large_list_sizes = list(range(100, 1000))
small_list_sizes = list(range(0, 100))
large_list_probability = 0.5
=====================

niklas
5000 lists, 50 equally distributed classes, average size 298, max size 999
4.80084705353
rik
5000 lists, 50 equally distributed classes, average size 298, max size 999
9.49251699448
katrielalex
5000 lists, 50 equally distributed classes, average size 298, max size 999
21.5317108631
agf (1)
5000 lists, 50 equally distributed classes, average size 298, max size 999
8.61671280861
agf (2)
5000 lists, 50 equally distributed classes, average size 298, max size 999
5.18117713928
=&gt; alexis
=&gt; 5000 lists, 50 equally distributed classes, average size 298, max size 999
=&gt; 3.73504281044

===================
# less number of classes, large lists
class_count = 15
class_size = 1000
list_count_per_class = 300
large_list_sizes = list(range(100, 1000))
small_list_sizes = list(range(0, 100))
large_list_probability = 0.5
===================

niklas
4500 lists, 15 equally distributed classes, average size 296, max size 999
1.79993700981
rik
4500 lists, 15 equally distributed classes, average size 296, max size 999
2.58237695694
katrielalex
4500 lists, 15 equally distributed classes, average size 296, max size 999
19.5465381145
agf (1)
4500 lists, 15 equally distributed classes, average size 296, max size 999
2.75445604324
=&gt; agf (2)
=&gt; 4500 lists, 15 equally distributed classes, average size 296, max size 999
=&gt; 1.77850699425
alexis
4500 lists, 15 equally distributed classes, average size 296, max size 999
3.23530197144

===================
# less number of classes, smaller lists
class_count = 15
class_size = 1000
list_count_per_class = 300
large_list_sizes = list(range(100, 1000))
small_list_sizes = list(range(0, 100))
large_list_probability = 0.1
===================

niklas
4500 lists, 15 equally distributed classes, average size 95, max size 997
0.773697137833
rik
4500 lists, 15 equally distributed classes, average size 95, max size 997
1.0523750782
katrielalex
4500 lists, 15 equally distributed classes, average size 95, max size 997
6.04466891289
agf (1)
4500 lists, 15 equally distributed classes, average size 95, max size 997
1.20285701752
=&gt; agf (2)
=&gt; 4500 lists, 15 equally distributed classes, average size 95, max size 997
=&gt; 0.714507102966
alexis
4500 lists, 15 equally distributed classes, average size 95, max size 997
1.1286110878
</snippet></ROW><ROW><id>9112590</id><snippet># decorator for logging
def logging(func):
    def wrapper(*args, **kwargs):
        print func.__name__, args, kwargs
        res = func(*args, **kwargs)
        return res
    return wrapper

# this is some example class you do not want to/can not modify
class Working:
    def Do(c):
        print("I am working")
    def pr(c,printit):   # other example method
        print(printit)
    def bla(c):          # other example method
        c.pr("saybla")

# this is how to make a new class with some methods logged:
class MutantWorking(Working):
    pr=logging(Working.pr)
    bla=logging(Working.bla)
    Do=logging(Working.Do)

h=MutantWorking()
h.bla()
h.pr("Working")                                                  
h.Do()
</snippet></ROW><ROW><id>9112590</id><snippet>h.bla()
bla (&lt;__main__.MutantWorking instance at 0xb776b78c&gt;,) {}
pr (&lt;__main__.MutantWorking instance at 0xb776b78c&gt;, 'saybla') {}
saybla

pr (&lt;__main__.MutantWorking instance at 0xb776b78c&gt;, 'Working') {}
Working

Do (&lt;__main__.MutantWorking instance at 0xb776b78c&gt;,) {}
I am working
</snippet></ROW><ROW><id>9112590</id><snippet>Working.Do=logging(Working.Do)
ReturnStatement.Act=logging(ReturnStatement.Act)
</snippet></ROW><ROW><id>9112590</id><snippet>import types
def hasmethod(obj, name):
    return hasattr(obj, name) and type(getattr(obj, name)) == types.MethodType

def loggify(theclass):
  for x in filter(lambda x:"__" not in x, dir(theclass)):
     if hasmethod(theclass,x):
        print(x)
        setattr(theclass,x,logging(getattr(theclass,x)))
  return theclass
</snippet></ROW><ROW><id>9112590</id><snippet>@loggify
class loggedWorker(Working): pass
</snippet></ROW><ROW><id>9112590</id><snippet>loggify(Working)
</snippet></ROW><ROW><id>9112682</id><snippet>"xmlcharrefreplace"</snippet></ROW><ROW><id>9112682</id><snippet>unicode.encode</snippet></ROW><ROW><id>9112682</id><snippet>&amp;</snippet></ROW><ROW><id>9112682</id><snippet>&amp;</snippet></ROW><ROW><id>9112682</id><snippet>&gt;&gt;&gt; x = "a &amp; 日本語:  enči hallöle".decode("utf-8")
&gt;&gt;&gt; x.replace("&amp;", "&amp;").encode("latin-1", "xmlcharrefreplace")
'a &amp; 日本語:  enči hall\xf6le'
</snippet></ROW><ROW><id>9113205</id><snippet>import envoy
r = envoy.run('unrar e {0}'.format(zfilename))
if r.status_code &gt; 0:
    print r.std_err
print r.std_out
</snippet></ROW><ROW><id>9113205</id><snippet>import subprocess
r = subprocess.call('unrar e {0}'.format(zfilename), shell=True)
print "Return code for {0}: {1}".format(zfilename, r)
</snippet></ROW><ROW><id>9113227</id><snippet>import numpy as np
import scipy
import scipy.ndimage as ndimage
import scipy.ndimage.filters as filters
import matplotlib.pyplot as plt

fname = '/tmp/slice0000.png'
neighborhood_size = 5
threshold = 1500

data = scipy.misc.imread(fname)

data_max = filters.maximum_filter(data, neighborhood_size)
maxima = (data == data_max)
data_min = filters.minimum_filter(data, neighborhood_size)
diff = ((data_max - data_min) &gt; threshold)
maxima[diff == 0] = 0

labeled, num_objects = ndimage.label(maxima)
slices = ndimage.find_objects(labeled)
x, y = [], []
for dy,dx in slices:
    x_center = (dx.start + dx.stop - 1)/2
    x.append(x_center)
    y_center = (dy.start + dy.stop - 1)/2    
    y.append(y_center)

plt.imshow(data)
plt.savefig('/tmp/data.png', bbox_inches = 'tight')

plt.autoscale(False)
plt.plot(x,y, 'ro')
plt.savefig('/tmp/result.png', bbox_inches = 'tight')
</snippet></ROW><ROW><id>9113227</id><snippet>threshold = 1500</snippet></ROW><ROW><id>9113227</id><snippet>threshold</snippet></ROW><ROW><id>9113313</id><snippet>session.query(model.Entry).join((model.Blog, model.Entry.blogid==model.Blog.id)).filter(model.Blog.name=='Beatles Blog').all()
</snippet></ROW><ROW><id>9113333</id><snippet>env</snippet></ROW><ROW><id>9113333</id><snippet>log = subprocess.check_output("env")
</snippet></ROW><ROW><id>9113997</id><snippet>"</snippet></ROW><ROW><id>9113997</id><snippet>\"</snippet></ROW><ROW><id>9113997</id><snippet>&gt;&gt;&gt; c.execute("SELECT %s, %s", ('"', MySQLdb.escape_string('"')))
1L
&gt;&gt;&gt; c.fetchall()
((u'"', u'\\"'),)
</snippet></ROW><ROW><id>9113997</id><snippet>\</snippet></ROW><ROW><id>9113997</id><snippet>"</snippet></ROW><ROW><id>9114194</id><snippet>import urlparse
access_token = urlparse.parse_qs(urlparse.urlsplit(url).fragment).get('access_token')
</snippet></ROW><ROW><id>9114345</id><snippet>enumerate</snippet></ROW><ROW><id>9114345</id><snippet>for index, value in enumerate(lines):
    # do something with the value and the index
</snippet></ROW><ROW><id>9114752</id><snippet>\0</snippet></ROW><ROW><id>9114752</id><snippet>"$first\0$second" =~ m/^(.*).*\0\1/s;
</snippet></ROW><ROW><id>9114752</id><snippet>$1</snippet></ROW><ROW><id>9114752</id><snippet>.*</snippet></ROW><ROW><id>9114752</id><snippet>[^\0]*</snippet></ROW><ROW><id>9114752</id><snippet>[^\0]*</snippet></ROW><ROW><id>9114752</id><snippet>(?&gt;…)</snippet></ROW><ROW><id>9114752</id><snippet>"$first\0$second" =~ m/^([^\0]*)(?&gt;[^\0]*)\0\1/s;
</snippet></ROW><ROW><id>9114993</id><snippet>start_new_thread</snippet></ROW><ROW><id>9115069</id><snippet>updateWidgets()</snippet></ROW><ROW><id>9115145</id><snippet>(question_id, question_text)</snippet></ROW><ROW><id>9115145</id><snippet>(question id, answer_text)</snippet></ROW><ROW><id>9115145</id><snippet>(question_id, audio_blob)</snippet></ROW><ROW><id>9115301</id><snippet>import cookielib, urllib2
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
request = urllib2.Request(url)
response = opener.open(request)
</snippet></ROW><ROW><id>9115366</id><snippet>select.select</snippet></ROW><ROW><id>9115366</id><snippet>proc.stdout</snippet></ROW><ROW><id>9115366</id><snippet>proc.stderr</snippet></ROW><ROW><id>9115366</id><snippet>/tmp/test.log</snippet></ROW><ROW><id>9115366</id><snippet>ls -laR /tmp</snippet></ROW><ROW><id>9115366</id><snippet>ls -laR /tmp</snippet></ROW><ROW><id>9115366</id><snippet>import logging
import subprocess
import shlex
import select
import fcntl
import os
import errno
import contextlib

logger = logging.getLogger(__name__)

def make_async(fd):
    '''add the O_NONBLOCK flag to a file descriptor'''
    fcntl.fcntl(fd, fcntl.F_SETFL, fcntl.fcntl(fd, fcntl.F_GETFL) | os.O_NONBLOCK)

def read_async(fd):
    '''read some data from a file descriptor, ignoring EAGAIN errors'''
    try:
        return fd.read()
    except IOError, e:
        if e.errno != errno.EAGAIN:
            raise e
        else:
            return ''

def log_fds(fds):
    for fd in fds:
        out = read_async(fd)
        if out:
            logger.info(out)

@contextlib.contextmanager
def plain_logger():
    root = logging.getLogger()    
    hdlr = root.handlers[0]
    formatter_orig = hdlr.formatter
    hdlr.setFormatter(logging.Formatter('%(message)s'))
    yield 
    hdlr.setFormatter(formatter_orig)

def main():
    # fmt = '%(name)-12s: %(levelname)-8s %(message)s'
    logging.basicConfig(filename = '/tmp/test.log', mode = 'w',
                        level = logging.DEBUG)

    logger.info("Started")
    cmdStr = 'ls -laR /tmp'

    with plain_logger():
        proc = subprocess.Popen(shlex.split(cmdStr),
                                stdout = subprocess.PIPE, stderr = subprocess.PIPE)
        # without `make_async`, `fd.read` in `read_async` blocks.
        make_async(proc.stdout)
        make_async(proc.stderr)
        while True:
            # Wait for data to become available 
            rlist, wlist, xlist = select.select([proc.stdout, proc.stderr], [], [])
            log_fds(rlist)
            if proc.poll() is not None:
                # Corner case: check if more output was created
                # between the last call to read_async and now                
                log_fds([proc.stdout, proc.stderr])                
                break

    logger.info("Done")

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9115366</id><snippet>stdout</snippet></ROW><ROW><id>9115366</id><snippet>stderr</snippet></ROW><ROW><id>9115366</id><snippet>logfile = open('/tmp/test.log', 'a')</snippet></ROW><ROW><id>9115366</id><snippet>/tmp/test.log</snippet></ROW><ROW><id>9115366</id><snippet>handler.stream.seek(0, 2)
</snippet></ROW><ROW><id>9115366</id><snippet>import logging
import subprocess
import contextlib
import shlex

logger = logging.getLogger(__name__)

@contextlib.contextmanager
def suspended_logger():
    root = logging.getLogger()    
    handler = root.handlers[0]
    yield 
    handler.stream.seek(0, 2)

def main():
    logging.basicConfig(filename = '/tmp/test.log', filemode = 'w',
                        level = logging.DEBUG)

    logger.info("Started")
    with suspended_logger():
        cmdStr = 'test2.py 1&gt;&gt;/tmp/test.log 2&gt;&amp;1'
        logfile = open('/tmp/test.log', 'a')
        proc = subprocess.Popen(shlex.split(cmdStr),
                                stdout = logfile,
                                stderr = logfile)
        proc.communicate()
    logger.info("Done")

if __name__ == '__main__':
    main()
</snippet></ROW></DATA>