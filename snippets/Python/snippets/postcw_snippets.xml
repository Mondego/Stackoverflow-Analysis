<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>16382879</id><snippet>&lt;input type="text" name="os_username" id="os_username" class="text   " data-focus="0"&gt;
&lt;input type="password" name="os_password" id="os_password" class="password "&gt;
</snippet></ROW><ROW><id>16382879</id><snippet>user</snippet></ROW><ROW><id>16382879</id><snippet>os_username</snippet></ROW><ROW><id>16382879</id><snippet>passwrd</snippet></ROW><ROW><id>16382879</id><snippet>os_password</snippet></ROW><ROW><id>16383142</id><snippet>&gt;&gt;&gt; l = [0.01, 0.1, 0.4, 0.034, 0.6, 0.7, 0.9, 1]
&gt;&gt;&gt; [0.4 if (0. &lt; f &lt; 0.5) else 0.7 for f in l]
[0.4, 0.4, 0.4, 0.4, 0.7, 0.7, 0.7, 0.7]
</snippet></ROW><ROW><id>16383191</id><snippet>x</snippet></ROW><ROW><id>16383191</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as ticker

fig, ax = plt.subplots()
x = [0, 10, 100, 1000]
y = [100, 20, 10, 50]
x = np.asarray(x) + 1 
y = np.asarray(y)
ax.plot(x, y)
ax.set_xscale('log')
ax.set_xlim(x.min(), x.max())
ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x-1)))
ax.xaxis.set_major_locator(ticker.FixedLocator(x))
plt.show()
</snippet></ROW><ROW><id>16383191</id><snippet>ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x-1)))
ax.xaxis.set_major_locator(ticker.FixedLocator(x))
</snippet></ROW><ROW><id>16383191</id><snippet>x</snippet></ROW><ROW><id>16383191</id><snippet>plt.xticks(x, x-1)</snippet></ROW><ROW><id>16383191</id><snippet>ax</snippet></ROW><ROW><id>16383191</id><snippet>plt</snippet></ROW><ROW><id>16383191</id><snippet>matplotlib</snippet></ROW><ROW><id>16383191</id><snippet>NaN</snippet></ROW><ROW><id>16383191</id><snippet>inf</snippet></ROW><ROW><id>16383191</id><snippet>-inf</snippet></ROW><ROW><id>16383191</id><snippet>log(0)</snippet></ROW><ROW><id>16383191</id><snippet>-inf</snippet></ROW><ROW><id>16383191</id><snippet>x=0</snippet></ROW><ROW><id>16383191</id><snippet>log(1) = 0</snippet></ROW><ROW><id>16383191</id><snippet>x=0</snippet></ROW><ROW><id>16383191</id><snippet>x=log(1)=0</snippet></ROW><ROW><id>16383191</id><snippet>log(x+1)</snippet></ROW><ROW><id>16383191</id><snippet>log(x)</snippet></ROW><ROW><id>16383191</id><snippet>x</snippet></ROW><ROW><id>16383295</id><snippet>f.read()</snippet></ROW><ROW><id>16383295</id><snippet>print</snippet></ROW><ROW><id>16383295</id><snippet>import os
f = open(os.path.join(os.getcwd(), 'test1.txt'), 'r')
print f.read()  # use print(f.read()) in Python 3
f.close()
</snippet></ROW><ROW><id>16383295</id><snippet>with</snippet></ROW><ROW><id>16383295</id><snippet>import os
with open(os.path.join(os.getcwd(), 'test1.txt'), 'r') as f:
    print f.read()
</snippet></ROW><ROW><id>16383302</id><snippet>MySQLdb</snippet></ROW><ROW><id>16383302</id><snippet>sprintf()</snippet></ROW><ROW><id>16383302</id><snippet>%</snippet></ROW><ROW><id>16383302</id><snippet>%%</snippet></ROW><ROW><id>16383302</id><snippet>timeList = ['09:31', '09:32', '09:33', '09:34', '09:35']
for z, val in enumerate(timeList):
   selectToday = dbConnect.cursor()
   selectToday.execute("""SELECT sec_code, date, time, price_nom, price_change_percent, vol \
        FROM tab_metrics \
        WHERE date = '2013-04-30' \
        AND time_format(time, '%%H:%%i') = %s \
        AND price_nom &gt; 1 \
        ORDER BY sec_code""", (val))
</snippet></ROW><ROW><id>16383577</id><snippet>stdin</snippet></ROW><ROW><id>16383577</id><snippet>stdin</snippet></ROW><ROW><id>16383577</id><snippet>ssh</snippet></ROW><ROW><id>16383577</id><snippet>subprocess.Popen(proxy_cmd,
                 shell=True,
                 stdin=subprocess.PIPE,
                 stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>16383577</id><snippet>subprocess</snippet></ROW><ROW><id>16383577</id><snippet>Popen</snippet></ROW><ROW><id>16383577</id><snippet>subprocess._active</snippet></ROW><ROW><id>16383577</id><snippet>Popen</snippet></ROW><ROW><id>16383739</id><snippet>base64</snippet></ROW><ROW><id>16383739</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; secret = base64.b64encode('bob')
&gt;&gt;&gt; secret
'Ym9i'
&gt;&gt;&gt; print base64.b64decode('Ym9i')
bob
</snippet></ROW><ROW><id>16383810</id><snippet>    cw = boto.cloudwatch.connect_to_region(Region)
    cw.get_metric_statistics(
        300,
        datetime.datetime.&lt;b&gt;utcnow()&lt;/b&gt; - datetime.timedelta(seconds=600),
        datetime.datetime.&lt;b&gt;utcnow()&lt;/b&gt;,
        'CPUUtilization',
        'AWS/EC2',
        'Average',
        dimensions={'InstanceId':['i-11111111']}
   )
</snippet></ROW><ROW><id>16383810</id><snippet>InstanceId</snippet></ROW><ROW><id>16383828</id><snippet>import random

nouns = ["random_noun1","random_noun2","random_noun3"]
adverbs = ["random_adverb1","random_adverb2","random_adverb3"]
verbs = ["random_verb1","random_verb2","random_verb3"]
</snippet></ROW><ROW><id>16383828</id><snippet>random_n()</snippet></ROW><ROW><id>16383828</id><snippet>random_av()</snippet></ROW><ROW><id>16383828</id><snippet>random_v()</snippet></ROW><ROW><id>16383828</id><snippet>def rnd(l):
    return random.choice(l)
</snippet></ROW><ROW><id>16383828</id><snippet>str.join</snippet></ROW><ROW><id>16383828</id><snippet>rnd()</snippet></ROW><ROW><id>16383828</id><snippet>def sentence():
    return ' '.join([rnd(nouns).capitalize(), rnd(adverbs), rnd(verbs)+'.'])
</snippet></ROW><ROW><id>16383828</id><snippet>def generate(n, filename):
    """Write a number of random sentences to a file and standard output.

    Arguments:
    n -- the number of random sentences to write.
    filename -- the name of the file to write the sentences to.
    """
    with open(filename, 'w+') as outf:
        for generate in range(n):
            s = sentence()
            print(generate + 1, s)
            outf.write(s + '\n')
</snippet></ROW><ROW><id>16383918</id><snippet>itertools.ifilter(lambda x:x.startswith('&lt;!--'), open('test')).next()
</snippet></ROW><ROW><id>16384126</id><snippet>itertools.product</snippet></ROW><ROW><id>16384126</id><snippet>&gt;&gt;&gt; list(itertools.product([1, 5, 8], [0.5, 4]))
[(1, 0.5), (1, 4), (5, 0.5), (5, 4), (8, 0.5), (8, 4)]
</snippet></ROW><ROW><id>16384126</id><snippet>itertools.product</snippet></ROW><ROW><id>16384126</id><snippet>for x in itertools.product([1, 5, 8], [0.5, 4]):
    # do stuff
</snippet></ROW><ROW><id>16384287</id><snippet>python assignment1.py</snippet></ROW><ROW><id>16384287</id><snippet>$ python -c 'python assignment1.py'
  File "&lt;string&gt;", line 1
    python assignment1.py
                     ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>16384416</id><snippet>from collections import defaultdict

class _defaultdict(defaultdict):
    def __add__(self, other):
        return other

def CountTree():
    return _defaultdict(CountTree)
</snippet></ROW><ROW><id>16384416</id><snippet>&gt;&gt;&gt; t = CountTree()
&gt;&gt;&gt; t['a']
defaultdict(&lt;function CountTree at 0x9e5c3ac&gt;, {})
&gt;&gt;&gt; t['a']['b']['c'] += 1
&gt;&gt;&gt; print t['a']['b']['c']
1
</snippet></ROW><ROW><id>16384454</id><snippet>source_files = ['source1.py', 'source2.py']
new_files = ['new1.py', 'new2.py']

old_lines, new_lines = set(), set()
for source in source_files:
   with open(source) as sf:
       old_lines.update(sf)
for new in new_files:
   with open(new) as nf:
       new_lines.update(nf)
for line in old_lines - new_lines:
    print line + " does not exist in refactored code" 
</snippet></ROW><ROW><id>16384849</id><snippet>count = 0
phrase = "hello, world"
for iteration in range(5): #iterate 5 times
    while True:
        #count = count + len(phrase)
        count += len(phrase)  # add the length of phrase to current value of count.
        break                 # break out of while loop, while loop 
                              # runs only once for each iteration
    #print the value of current count
    print("Iteration " + str(iteration) + "; count is: " + str(count))
</snippet></ROW><ROW><id>16384849</id><snippet>phrase</snippet></ROW><ROW><id>16384849</id><snippet>count</snippet></ROW><ROW><id>16384849</id><snippet>Iteration 0; count is: 12   # 0+12
Iteration 1; count is: 24   # 12+12
Iteration 2; count is: 36   # 24+12
Iteration 3; count is: 48   # 36+12
Iteration 4; count is: 60   # 48+12
</snippet></ROW><ROW><id>16384849</id><snippet>count = 0
phrase = "hello, world"
for iteration in range(5):
    count = count + len(phrase)
    print("Iteration " + str(iteration) + "; count is: " + str(count))
</snippet></ROW><ROW><id>16384901</id><snippet>&gt;&gt;&gt; (bob_pub, bob_priv) = rsa.newkeys(512)
</snippet></ROW><ROW><id>16384901</id><snippet>&gt;&gt;&gt; message = 'hello Bob!'
</snippet></ROW><ROW><id>16384901</id><snippet>&gt;&gt;&gt; crypto = rsa.encrypt(message, bob_pub)
</snippet></ROW><ROW><id>16384901</id><snippet>&gt;&gt;&gt; message = rsa.decrypt(crypto, bob_priv)
&gt;&gt;&gt; print message
</snippet></ROW><ROW><id>16385039</id><snippet>sys.stdin</snippet></ROW><ROW><id>16385039</id><snippet>sys.stdin</snippet></ROW><ROW><id>16385039</id><snippet>/Applications/Sublime\ Text\ 2.app/Contents/MacOS/Sublime\ Text\ 2
</snippet></ROW><ROW><id>16385039</id><snippet>"C:\Program Files\Sublime Text 2\sublime_text.exe"
</snippet></ROW><ROW><id>16385039</id><snippet>sys.stdout</snippet></ROW><ROW><id>16385039</id><snippet>stdout</snippet></ROW><ROW><id>16385039</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>16385039</id><snippet>import pdb, sys; pdb.Pdb(stdout=sys.__stdout__).set_trace()
</snippet></ROW><ROW><id>16385039</id><snippet>stdout</snippet></ROW><ROW><id>16385039</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>16385039</id><snippet>pdb.Pdb()</snippet></ROW><ROW><id>16385039</id><snippet>pdb</snippet></ROW><ROW><id>16385169</id><snippet>main()</snippet></ROW><ROW><id>16385169</id><snippet>argc</snippet></ROW><ROW><id>16385169</id><snippet>argv</snippet></ROW><ROW><id>16385169</id><snippet>librdaxi.main.argtypes = [c_int,POINTER(c_char_p)]
argv=(c_char_p*2)()
argv[0]='rdaxi'
argv[1]='0x5a000008'
librdaxi.main(2,argv)
</snippet></ROW><ROW><id>16385180</id><snippet>get_locale</snippet></ROW><ROW><id>16385245</id><snippet>range(x)</snippet></ROW><ROW><id>16385245</id><snippet>[0,1,2, ... ,x]</snippet></ROW><ROW><id>16385245</id><snippet>datum</snippet></ROW><ROW><id>16385245</id><snippet>datum</snippet></ROW><ROW><id>16385245</id><snippet>while</snippet></ROW><ROW><id>16385245</id><snippet>datum = 0
end = len(lists)
while datum &lt; end:
    # do stuff

    # don't forget to increment datum
    datum += 1
</snippet></ROW><ROW><id>16385762</id><snippet>python</snippet></ROW><ROW><id>16385762</id><snippet>:w !python -
</snippet></ROW><ROW><id>16385796</id><snippet>print len(set(re.findall('\w+', dataString.lower()))) # Number of unique words
print len(re.findall('\w+', dataString.lower())) # Total number of words
</snippet></ROW><ROW><id>16385796</id><snippet>words = re.findall('\w+', dataString.lower())
print len([word for word in words if word == 'hello'])
</snippet></ROW><ROW><id>16385796</id><snippet>print words.count('hello')
</snippet></ROW><ROW><id>16385814</id><snippet>&gt;&gt;&gt; import datetime
... from dateutil import relativedelta
... 
... today = datetime.date.today()
... past = today + relativedelta.relativedelta(years=-25)
... print(today, past, sep='\t')
2013-05-05  1988-05-05
</snippet></ROW><ROW><id>16385853</id><snippet>shift</snippet></ROW><ROW><id>16385853</id><snippet>DATE</snippet></ROW><ROW><id>16385853</id><snippet>timedelta</snippet></ROW><ROW><id>16385853</id><snippet>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; df.head()
                                 ID                DATE
8  0103bd73af66e5a44f7867c0bb2203cc 2001-02-01 00:00:00
0  002691c9cec109e64558848f1358ac16 2003-08-13 00:00:00
1  002691c9cec109e64558848f1358ac16 2003-08-13 00:00:00
5  00d34668025906d55ae2e529615f530a 2006-03-09 00:00:00
4  00d34668025906d55ae2e529615f530a 2006-03-09 00:00:00
&gt;&gt;&gt; df["X_DATE"] = df["DATE"] + timedelta(days=180)
&gt;&gt;&gt; df.head()
                                 ID                DATE              X_DATE
8  0103bd73af66e5a44f7867c0bb2203cc 2001-02-01 00:00:00 2001-07-31 00:00:00
0  002691c9cec109e64558848f1358ac16 2003-08-13 00:00:00 2004-02-09 00:00:00
1  002691c9cec109e64558848f1358ac16 2003-08-13 00:00:00 2004-02-09 00:00:00
5  00d34668025906d55ae2e529615f530a 2006-03-09 00:00:00 2006-09-05 00:00:00
4  00d34668025906d55ae2e529615f530a 2006-03-09 00:00:00 2006-09-05 00:00:00
</snippet></ROW><ROW><id>16385952</id><snippet>GetJob</snippet></ROW><ROW><id>16385952</id><snippet>def __init__(self,name…):
    self.name = Jobs.GetJob(self, name)
    …
</snippet></ROW><ROW><id>16385952</id><snippet>class Jobs:   
    def __init__(self, name, category, salary):
        self.name = name
        self.category = category
        self.salary = salary

    def __repr__(self):
        return "Jobs&lt;%s,%s,%s&gt;" % (self.name, self.category, self.salary)

def GetJob():
    name = raw_input('Enter a Job Title: ')
    category = raw_input('Enter what Category that Job is: ')
    salary = raw_input('Enter the salary of that Job: ')
    return Jobs(name, category, salary)

print GetJob()
</snippet></ROW><ROW><id>16385960</id><snippet>rowspan</snippet></ROW><ROW><id>16385960</id><snippet>columnspan</snippet></ROW><ROW><id>16385984</id><snippet>key, value = line.rsplit('\t', 1)
try:
    dict_output[key] = float(value)
except ValueError:
    print 'Unexpected line: {!r}'.format(line)
</snippet></ROW><ROW><id>16385984</id><snippet>\t</snippet></ROW><ROW><id>16386210</id><snippet>eval</snippet></ROW><ROW><id>16386210</id><snippet>eval</snippet></ROW><ROW><id>16386210</id><snippet>&gt;&gt;&gt; eval("("*100+'3'+")"*100)
s_push: parser stack overflow
Traceback (most recent call last):
  File "&lt;ipython-input-46-1ce3bf24ce9d&gt;", line 1, in &lt;module&gt;
    eval("("*100+'3'+")"*100)
MemoryError
</snippet></ROW><ROW><id>16386210</id><snippet>MAXSTACK</snippet></ROW><ROW><id>16386492</id><snippet>import os
imagedir = "C:\Users\Sthitadhi Roy\Documents\Pixel Data Encryption"

OrigImg.save(os.path.join(imagedir, "Modified.jpg"))
</snippet></ROW><ROW><id>16386517</id><snippet>elif option == 3:
        print("in command 3 -brute force \n")
        string = input("please enter string to decrypt: ")
        offsetvalue = -0
    while offsetvalue != -26:
</snippet></ROW><ROW><id>16386517</id><snippet>elif option == 3:
        print("in command 3 -brute force \n")
        string = input("please enter string to decrypt: ")
        offsetvalue = -0
        while offsetvalue != -26:
</snippet></ROW><ROW><id>16386517</id><snippet>elif option == 3:
        print("in command 3 -brute force \n")
        string = input("please enter string to decrypt: ")
        offsetvalue = -0
while offsetvalue != -26:
</snippet></ROW><ROW><id>16386732</id><snippet>L</snippet></ROW><ROW><id>16386732</id><snippet>None</snippet></ROW><ROW><id>16386732</id><snippet>def foo(L=None):
    if L is None:
        L = []
    L.append('x')
    return L

&gt;&gt;&gt; my_list = []
&gt;&gt;&gt; foo(my_list)
&gt;&gt;&gt; my_list
['x']
</snippet></ROW><ROW><id>16386732</id><snippet>def foo(L=None):
    L = L or []
    L.append('x')
    return L

&gt;&gt;&gt; my_list = []
&gt;&gt;&gt; foo(my_list)
&gt;&gt;&gt; my_list
[]
</snippet></ROW><ROW><id>16386765</id><snippet>urllib</snippet></ROW><ROW><id>16386765</id><snippet>import sys
from PyQt4 import QtWebKit
from PyQt4 import QtCore
from PyQt4 import QtGui

class Render(QtWebKit.QWebPage):
    def __init__(self, url):
        self.app = QtGui.QApplication(sys.argv)
        QtWebKit.QWebPage.__init__(self)
        self.loadFinished.connect(self._loadFinished)
        self.mainFrame().load(QtCore.QUrl(url))
        self.app.exec_()

    def _loadFinished(self, result):
        self.frame = self.mainFrame()
        self.app.quit()

url = 'http://www.scoreboard.com/game/6LeqhPJd/#game-summary'
r = Render(url)
content = unicode(r.frame.toHtml())
</snippet></ROW><ROW><id>16386765</id><snippet>content</snippet></ROW><ROW><id>16386765</id><snippet>import lxml.html as LH

def clean(text):
    return text.replace(u'\xa0', u'')

doc = LH.fromstring(content)   
result = []
for tr in doc.xpath('//tr[td[@class="left summary-horizontal"]]'):
    row = []
    for elt in tr.xpath('td'):
        row.append(clean(elt.text_content()))
    result.append(u', '.join(row[1:]))
print(u'\n'.join(result))
</snippet></ROW><ROW><id>16386765</id><snippet>Chardy J. (Fra), 2, 6, 77, , , , 
Zeballos H. (Arg), 0, 4, 63, , , , 
</snippet></ROW><ROW><id>16386765</id><snippet>import selenium.webdriver as webdriver
import contextlib
import os
import lxml.html as LH

# define path to the phantomjs binary
phantomjs = os.path.expanduser('~/bin/phantomjs')
url = 'http://www.scoreboard.com/game/6LeqhPJd/#game-summary'
with contextlib.closing(webdriver.PhantomJS(phantomjs)) as driver:
    driver.get(url)
    content = driver.page_source
    doc = LH.fromstring(content)   
    result = []
    for tr in doc.xpath('//tr[td[@class="left summary-horizontal"]]'):
        row = []
        for elt in tr.xpath('td'):
            row.append(elt.text_content())
        result.append(u', '.join(row[1:]))
    print(u'\n'.join(result))
</snippet></ROW><ROW><id>16387194</id><snippet>DateField</snippet></ROW><ROW><id>16387194</id><snippet>django.db.models</snippet></ROW><ROW><id>16387194</id><snippet>django.forms.models</snippet></ROW><ROW><id>16387194</id><snippet>django.db.models</snippet></ROW><ROW><id>16387194</id><snippet>from django.db import models as db_models

formfield_overrides = {
    db_models.DateField: {
        'widget': AdminDateWidget,
        'input_formats': settings.VALID_DATE_FORMATS,
    },
}
</snippet></ROW><ROW><id>16387293</id><snippet>app</snippet></ROW><ROW><id>16387293</id><snippet>foo</snippet></ROW><ROW><id>16387293</id><snippet>__init__.py</snippet></ROW><ROW><id>16387293</id><snippet>settings</snippet></ROW><ROW><id>16387293</id><snippet>config</snippet></ROW><ROW><id>16387293</id><snippet>mypackage/
    __init__.py
    app.py
    foo.py
    config.py
</snippet></ROW><ROW><id>16387293</id><snippet>GLOBVAR = 'something'
</snippet></ROW><ROW><id>16387293</id><snippet>from mypackage.config import GLOBVAR
</snippet></ROW><ROW><id>16387293</id><snippet>from mypackage.config import GLOBVAR
</snippet></ROW><ROW><id>16387293</id><snippet>__init__.py</snippet></ROW><ROW><id>16387293</id><snippet>from mypackage import GLOBVAR</snippet></ROW><ROW><id>16387525</id><snippet>for</snippet></ROW><ROW><id>16387525</id><snippet>iter()</snippet></ROW><ROW><id>16387525</id><snippet>next()</snippet></ROW><ROW><id>16387525</id><snippet>iterable = iter(cases):
while True:
    try:
        case = next(iterable)
    except StopIteration:
        break

    # blah
</snippet></ROW><ROW><id>16387525</id><snippet>iter()</snippet></ROW><ROW><id>16387525</id><snippet>&gt;&gt;&gt; iter([])
&lt;list_iterator object at 0x10fcc6a90&gt;
</snippet></ROW><ROW><id>16387525</id><snippet>cases</snippet></ROW><ROW><id>16387619</id><snippet>&gt;&gt;&gt; re.search(r'([\d.]+)\s+#', text).group(1)
'0.0612'
</snippet></ROW><ROW><id>16387635</id><snippet>pandas.get_dummies</snippet></ROW><ROW><id>16387635</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; pd.get_dummies(listings['color'], 'color')
</snippet></ROW><ROW><id>16387689</id><snippet>with open("oldfile", "rb") as old, open("newfile", "wb") as new:
    new.write(string)
    new.write(old.read())
</snippet></ROW><ROW><id>16387689</id><snippet>with open("oldfile", "rb") as old, open("newfile", "wb") as new:
    for chunk in iter(lambda: old.read(1024), b""):
        new.write(chunk)
</snippet></ROW><ROW><id>16387689</id><snippet>1024</snippet></ROW><ROW><id>16387802</id><snippet>self._Thread__stop()</snippet></ROW><ROW><id>16387802</id><snippet>run()</snippet></ROW><ROW><id>16387802</id><snippet>download_file()</snippet></ROW><ROW><id>16387802</id><snippet>download_file()</snippet></ROW><ROW><id>16387802</id><snippet>Semaphore</snippet></ROW><ROW><id>16387802</id><snippet>import concurrent.futures # on Python 2.x: pip install futures 
from threading import BoundedSemaphore

def download_file(args):
    nconcurrent.acquire(timeout=args['timeout']) # block if too many connections
    # ...
    nconcurrent.release() #NOTE: don't release it on exception,
                          #      allow the caller to handle it

# you can put it into a dictionary: server -&gt; semaphore instead of the global
nconcurrent = BoundedSemaphore(5) # start with at most 5 concurrent connections
with concurrent.futures.ThreadPoolExecutor(max_workers=NUM_THREADS) as executor:
    future_to_args = dict((executor.submit(download_file, args), args)
                           for args in generate_initial_download_tasks())

    while future_to_args:
        for future in concurrent.futures.as_completed(dict(**future_to_args)):
            args = future_to_args.pop(future)
            try: 
                result = future.result()
            except Exception as e:
                print('%r generated an exception: %s' % (args, e))
                if getattr(e, 'code') != 503:
                   # don't decrease number of concurrent connections
                   nconcurrent.release() 
                # resubmit
                args['timeout'] *= 2                    
                future_to_args[executor.submit(download_file, args)] = args
            else: # successfully downloaded `args`
                print('f%r returned %r' % (args, result))
</snippet></ROW><ROW><id>16387802</id><snippet>ThreadPoolExecutor()</snippet></ROW><ROW><id>16387814</id><snippet>wholeproject/
    __init__.py
    main.py
    package1/
        __init__.py
        stuff1.py
        stuff2.py
    package2/
        __init__.py
        moar1.py
        moar2.py
    database/
        __init__.py
        dbfunctions.py
</snippet></ROW><ROW><id>16387814</id><snippet>from wholeproject.package1 import stuff1
from wholeproject.package2 import moar1
</snippet></ROW><ROW><id>16387814</id><snippet>from wholeproject.database import dbfunctions
</snippet></ROW><ROW><id>16387950</id><snippet>import sys

for index,line in enumerate(sys.stdin):
    if index == 0:
        print line
    else:
        values = line.split(',')
        values[-2:] = [str(int(x)%12) for x in values[-2:]]
        print ','.join(values)
</snippet></ROW><ROW><id>16387950</id><snippet>$ time (cat test.txt | python foo.py &gt; /dev/null)

real    0m0.363s
user    0m0.339s
sys     0m0.032s
</snippet></ROW><ROW><id>16387950</id><snippet>pyp</snippet></ROW><ROW><id>16388171</id><snippet>hasattr()</snippet></ROW><ROW><id>16388171</id><snippet>callable</snippet></ROW><ROW><id>16388171</id><snippet>&gt;&gt;&gt; class X(object):
...     def __getattr__(self, name):
...         return name
...
&gt;&gt;&gt; i = X()
&gt;&gt;&gt; from collections import Callable
&gt;&gt;&gt; isinstance(i, Callable)
False
&gt;&gt;&gt; callable(i)
False
&gt;&gt;&gt; hasattr(i, '__call__')
True
&gt;&gt;&gt; i()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'X' object is not callable
</snippet></ROW><ROW><id>16388171</id><snippet>callable</snippet></ROW><ROW><id>16388171</id><snippet>hasattr</snippet></ROW><ROW><id>16388171</id><snippet>hasattr()</snippet></ROW><ROW><id>16388279</id><snippet>tweepy</snippet></ROW><ROW><id>16388279</id><snippet>python-twitter</snippet></ROW><ROW><id>16388479</id><snippet>$ python
Python 2.7.3 (default, Mar 12 2013, 16:26:07) 
[GCC 4.2.1 20070831 patched [FreeBSD]] on freebsd9
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; input()
11
11
&gt;&gt;&gt; input()
ABC123
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'ABC123' is not defined
</snippet></ROW><ROW><id>16388479</id><snippet>raw_input()</snippet></ROW><ROW><id>16388479</id><snippet>input</snippet></ROW><ROW><id>16388721</id><snippet>"break"</snippet></ROW><ROW><id>16388721</id><snippet>tree.bind('&lt;Double-1&gt;', lambda e: 'break')
</snippet></ROW><ROW><id>16388783</id><snippet>sorl.thumbnail</snippet></ROW><ROW><id>16388783</id><snippet>pip install sorl-thumbnail==11.05.2</snippet></ROW><ROW><id>16388884</id><snippet>class App:
    def __init__(self):
        self.root = tk()

    def SendValues(self,event):
        # Code that sends the values of all the scales upon a button press

    def ReceiveValues(self):
        # Code that receives the values and sets the according Tkinter variables
        self.root.after(1000, self.ReceiveValues)
</snippet></ROW><ROW><id>16388910</id><snippet>&gt;&gt;&gt; from pyzipcode import ZipCodeDatabase
&gt;&gt;&gt; zcdb = ZipCodeDatabase() 
&gt;&gt;&gt; zipcode = zcdb[54115]
&gt;&gt;&gt; zipcode.zip
u'54115'
&gt;&gt;&gt; zipcode.city
u'De Pere' 
&gt;&gt;&gt; zipcode.state
u'WI'
&gt;&gt;&gt; zipcode.longitude
-88.078959999999995
&gt;&gt;&gt; zipcode.latitude
44.42042
&gt;&gt;&gt; zipcode.timezone
-6
</snippet></ROW><ROW><id>16388961</id><snippet>n14=[[]]
for line in nodes:
    if int(line[1])*2 &lt;= maxX and int(line[2])*2 &lt;= maxY:
        if len(n14[-1]) == 16:
            n14.append([])
        n14[-1].append(line[0])
</snippet></ROW><ROW><id>16388961</id><snippet>s = [line[0] for line in nodes if int(line[1])*2 &lt;= maxX and int(line[2])*2 &lt;= maxY]
n14 = [s[i:i+16] for i in range(0, len(s), 16)]
</snippet></ROW><ROW><id>16389006</id><snippet>xml</snippet></ROW><ROW><id>16389006</id><snippet>from lxml.html import parse
import sys

def process(htmlpage):
    tree = parse(htmlpage).getroot()

    # Helper function
    xpath_to_column = lambda expr: [el.text for el in tree.xpath(expr)]

    symbol = xpath_to_column('//*[@id="idcquoteholder"]/table/tr/td[1]/a')
    price  = xpath_to_column('//*[@id="idcquoteholder"]/table/tr/td[3]')
    volume = xpath_to_column('//*[@id="idcquoteholder"]/table/tr/td[6]')

    return zip(symbol, price, volume)


def main():
    for filename in sys.argv[1:]:
        with open(filename, 'r') as page:
            print process(page)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16389006</id><snippet>span</snippet></ROW><ROW><id>16389006</id><snippet>a</snippet></ROW><ROW><id>16389006</id><snippet>for</snippet></ROW><ROW><id>16389006</id><snippet>main()</snippet></ROW><ROW><id>16389049</id><snippet>import numpy as np
Y = [10, 20, 40, 80, 110]
N = len(Y)
X = np.arange(0, 2*N, 2)
X_new = np.arange(2*N-1)       # Where you want to interpolate
Y_new = np.interp(X_new, X, Y) 
print(Y_new)
</snippet></ROW><ROW><id>16389049</id><snippet>[  10.   15.   20.   30.   40.   60.   80.   95.  110.]
</snippet></ROW><ROW><id>16389055</id><snippet>sender()</snippet></ROW><ROW><id>16389055</id><snippet>QObject</snippet></ROW><ROW><id>16389055</id><snippet>Manager</snippet></ROW><ROW><id>16389055</id><snippet>QObject</snippet></ROW><ROW><id>16389055</id><snippet>sender()</snippet></ROW><ROW><id>16389055</id><snippet>QObject</snippet></ROW><ROW><id>16389111</id><snippet>mygen</snippet></ROW><ROW><id>16389111</id><snippet>mygen()</snippet></ROW><ROW><id>16389111</id><snippet>next()</snippet></ROW><ROW><id>16389111</id><snippet>yield</snippet></ROW><ROW><id>16389270</id><snippet>&gt;&gt;&gt; help(window.get_position)

Help on method set_position in module gi.repository.Gtk:

set_position(*args, **kwargs) method of gi.overrides.Gtk.Window instance
    set_position(self, position:Gtk.WindowPosition)
</snippet></ROW><ROW><id>16389270</id><snippet>Gtk.WindowPosition</snippet></ROW><ROW><id>16389270</id><snippet>window.set_position(Gtk.WindowPosition.CENTER)
</snippet></ROW><ROW><id>16389358</id><snippet>w / (w + l)</snippet></ROW><ROW><id>16389358</id><snippet>float</snippet></ROW><ROW><id>16389358</id><snippet>float(w) / (w + 1)
</snippet></ROW><ROW><id>16389358</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>16389358</id><snippet>averages = []

for wins, losses, team in teams:
    average = sum(win / float(win + loss) for win, loss in zip(wins, losses))

    averages.append(average)
</snippet></ROW><ROW><id>16389370</id><snippet>PSIR_FileWriter::DeleteExistingInfo()</snippet></ROW><ROW><id>16389370</id><snippet>std::_Rb_tree&lt;unsigned short, std::pair&lt;unsigned short const, PSIR_FileWriter::InternalRsrcInfo&gt;…&gt;::_M_erase(…)</snippet></ROW><ROW><id>16389370</id><snippet>PSIR_FileWriter</snippet></ROW><ROW><id>16389370</id><snippet>std::map&lt;unsigned short, PSIR_FileWriter::InternalRsrcInfo&gt;</snippet></ROW><ROW><id>16389370</id><snippet>_ZNSt8_Rb_treeItSt4pairIKtN15PSIR_FileWriter16InternalRsrcInfoEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E
_ZN15PSIR_FileWriter18DeleteExistingInfoEv
</snippet></ROW><ROW><id>16389435</id><snippet>for i in range(len(accountlist())):</snippet></ROW><ROW><id>16389435</id><snippet>accountlist()</snippet></ROW><ROW><id>16389435</id><snippet>accountlist</snippet></ROW><ROW><id>16389435</id><snippet>list</snippet></ROW><ROW><id>16389435</id><snippet>()</snippet></ROW><ROW><id>16389435</id><snippet>for i in range(len(accountlist)):</snippet></ROW><ROW><id>16389435</id><snippet> TypeError: 'list' object is not callable
</snippet></ROW><ROW><id>16389444</id><snippet>c.post('http://fruro.com/login.php', data=self.payload)
</snippet></ROW><ROW><id>16389444</id><snippet>dict</snippet></ROW><ROW><id>16389444</id><snippet>data</snippet></ROW><ROW><id>16389444</id><snippet>Entry</snippet></ROW><ROW><id>16389444</id><snippet>Requests</snippet></ROW><ROW><id>16389444</id><snippet>len</snippet></ROW><ROW><id>16389444</id><snippet>Entry</snippet></ROW><ROW><id>16389444</id><snippet>__len__</snippet></ROW><ROW><id>16389444</id><snippet>self.payload</snippet></ROW><ROW><id>16389444</id><snippet>self.payload = {
        'action': 'login',
        'email': self.email.get(),      # call get method to return
        'password': self.password.get() # the value in the Entry widgets
    }
</snippet></ROW><ROW><id>16389496</id><snippet>&lt;form action="/i18n/setlang/" method="post" style="display: none" id="change_language_form"&gt;
    {% csrf_token %}
    &lt;input type="hidden" value="" name="language" id="language" /&gt;
&lt;/form&gt;

{% get_language_info_list for LANGUAGES as languages %}
{% for language in languages %}
    &lt;a href="#" lang_code="{{ language.code }}" class="change_language"&gt;{{ language.name_local }} ({{ language.code }})&lt;/a&gt;
{% endfor %}

&lt;script&gt;
    $('.change_language').click(function(e){
        e.preventDefault();
        $('#language').val($(this).attr('lang_code'));
        $('#change_language_form').submit();
    });
&lt;/script&gt;
</snippet></ROW><ROW><id>16389667</id><snippet>A(2)</snippet></ROW><ROW><id>16389667</id><snippet>__hash__</snippet></ROW><ROW><id>16389667</id><snippet>import numpy as np
from functools import total_ordering

@total_ordering
class A(object):
    def __init__(self, a):
        self.a = a
    def __lt__(self, other):
        return self.a &lt; other.a
    def __eq__(self, other):
        return self.a == other.a
    def __ne__(self, other):
        return self.a != other.a
    def __hash__(self):
        return hash(self.a)
    def __repr__(self):
        return "A({})".format(self.a)
    def __str__(self):
       return repr(self)
</snippet></ROW><ROW><id>16389667</id><snippet>&gt;&gt;&gt; map(A, range(3)+range(3))
[A(0), A(1), A(2), A(0), A(1), A(2)]
&gt;&gt;&gt; set(map(A, range(3)+range(3)))
set([A(0), A(1), A(2)])
&gt;&gt;&gt; np.unique(map(A, range(3)+range(3)))
array([A(0), A(1), A(2)], dtype=object)
</snippet></ROW><ROW><id>16389667</id><snippet>total_ordering</snippet></ROW><ROW><id>16389667</id><snippet>__ne__</snippet></ROW><ROW><id>16389975</id><snippet>from igraph import Graph
from random import randint
g = Graph.GRG(100, 0.2)        # generate a geometric random graph
g.es["capacity"] = [randint(0, 1000) for i in xrange(g.ecount())]
cut = g.maxflow(0, 99, "capacity")
</snippet></ROW><ROW><id>16390005</id><snippet>(opp1 or opp2) == 'rock'
</snippet></ROW><ROW><id>16390005</id><snippet>(opp1 == 'rock' or opp2 == 'rock')
</snippet></ROW><ROW><id>16390005</id><snippet>(opp1 or opp2) == 'rock'</snippet></ROW><ROW><id>16390005</id><snippet>(opp1 or opp2)</snippet></ROW><ROW><id>16390005</id><snippet>'rock'</snippet></ROW><ROW><id>16390005</id><snippet>opp1</snippet></ROW><ROW><id>16390005</id><snippet>opp2</snippet></ROW><ROW><id>16390005</id><snippet>(opp1 or opp2)</snippet></ROW><ROW><id>16390005</id><snippet>True</snippet></ROW><ROW><id>16390005</id><snippet>True == 'rock'</snippet></ROW><ROW><id>16390083</id><snippet>find_element_by_id</snippet></ROW><ROW><id>16390083</id><snippet>find_element_by_xpath</snippet></ROW><ROW><id>16390083</id><snippet>find_element_by_css_selector</snippet></ROW><ROW><id>16390083</id><snippet>elem = driver.find_element_by_name("session[username_or_email]")</snippet></ROW><ROW><id>16390083</id><snippet>&lt;label class="username js-username"&gt;
    &lt;span&gt;Username or email&lt;/span&gt;
    &lt;input class="session[username_or_email]" type="text" autocomplete="on" /&gt;
&lt;/label&gt;
</snippet></ROW><ROW><id>16390083</id><snippet># I suspect this won't work?
driver.find_element_by_class_name("session[username_or_email]")

# won't work, as the special meaning of square brackets in css selector
driver.find_element_by_css_selector(".session[username_or_email]")

# use these
driver.find_element_by_css_selector("[class='session[username_or_email]']")
driver.find_element_by_xpath("//*[@class='session[username_or_email]']") # same as usual
</snippet></ROW><ROW><id>16390130</id><snippet>driver = webdriver.PhantomJS("./phantomjs") # path to phantomjs binary
driver.get("https://ps.rsd.edu/public/")

elem = driver.find_element_by_name("account")
elem.send_keys("Username")
elem2 = driver.find_element_by_name("pw")
elem2.send_keys("Password")
elem.send_keys(Keys.RETURN)

driver.quit()
</snippet></ROW><ROW><id>16390341</id><snippet>import os
cdir=os.getcwd().split(os.sep)[-1]
print cdir
</snippet></ROW><ROW><id>16390341</id><snippet>import os
sdir=os.path.dirname(os.path.abspath(__file__)).split(os.sep)[-1]
print sdir
</snippet></ROW><ROW><id>16390345</id><snippet>|</snippet></ROW><ROW><id>16390345</id><snippet>lst = re.split(r'(\d*\.\d*[Ee]*[+-]*\d*)', ".1**2 + x/(10.0 - 2.E-4)*n_elts")
</snippet></ROW><ROW><id>16390345</id><snippet>lst = re.split(r'((?:\d+\.\d*|\.?\d+)(?:[Ee][+-]?\d+)?)', ".1**2 + x/(10.0 - 2.E-4)*n_elts")
</snippet></ROW><ROW><id>16390345</id><snippet>?:</snippet></ROW><ROW><id>16390345</id><snippet>split</snippet></ROW><ROW><id>16390345</id><snippet>?:</snippet></ROW><ROW><id>16390345</id><snippet>r</snippet></ROW><ROW><id>16390679</id><snippet>settings.py</snippet></ROW><ROW><id>16390679</id><snippet>import os
settings_dir = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.dirname(settings_dir))

STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static/mysite/'),
)
</snippet></ROW><ROW><id>16390679</id><snippet>urls.py</snippet></ROW><ROW><id>16390679</id><snippet>from django.conf.urls.static import static
from django.contrib.staticfiles.urls import staticfiles_urlpatterns
urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>16390863</id><snippet>&gt;&gt;&gt; strs= "Hello world"
&gt;&gt;&gt; [y for x in strs.split() for y in (x[:i] for i in  xrange(2,len(x)+1)) ]
['He', 'Hel', 'Hell', 'Hello', 'wo', 'wor', 'worl', 'world']
</snippet></ROW><ROW><id>16390943</id><snippet>taskset</snippet></ROW><ROW><id>16391080</id><snippet>for cell in driver.find_elements_by_css_selector(".grid tr a[href$='fg=S2']"):
    print cell.text
    # if you want the number only, you need to strip the grades here
    # also need to check if S2 cell is empty or not
</snippet></ROW><ROW><id>16391155</id><snippet>import sys
import os
filename= sys.argv[1]
lines = [int(x) for x in sys.argv[2:]]

#open two files one for reading and one for writing

with open(filename) as f,open("newfile","w") as f2:

#use enumerate to get the line as well as line number, use enumerate(f,1) to start index from 1
    for i,line in enumerate(f):  
        if i not in lines:     #`if i not in lines` is more clear than `if not i in line`
            f2.write(line)   
os.rename("newfile",filename)  #rename the newfile to original one    
</snippet></ROW><ROW><id>16391155</id><snippet>tempfile</snippet></ROW><ROW><id>16391468</id><snippet>python -c 'import os,numpy;print(numpy.__file__)'
</snippet></ROW><ROW><id>16391468</id><snippet>$ python -c 'import numpy;print(numpy.__file__)'
/usr/lib/pymodules/python2.7/numpy/__init__.pyc
$ readlink -f /usr/lib/pymodules/python2.7/numpy/__init__.py
/usr/share/pyshared/numpy/__init__.py
$ dpkg -S /usr/share/pyshared/numpy/__init__.py
python-numpy: /usr/share/pyshared/numpy/__init__.py
$ sudo apt-get remove python-numpy
</snippet></ROW><ROW><id>16391678</id><snippet>cell.text</snippet></ROW><ROW><id>16391678</id><snippet>grades = """--
B
84
--
A-
90
--
C+
79
--
A
95
--
B
82
--
B
81"""

gradesList = grades.split('\n')
letterGrade = gradesList[1::3]
pctGrade = [int(x) for x in gradesList[2::3]]

for i in range(len(letterGrade)):
    print ("%s\t%d" % (letterGrade[i],pctGrade[i]))
</snippet></ROW><ROW><id>16391678</id><snippet>B       84
A-      90
C+      79
A       95
B       82
B       81
</snippet></ROW><ROW><id>16391714</id><snippet>in</snippet></ROW><ROW><id>16391714</id><snippet>categoryChoice = input("what is your category choice?")
if categoryChoice not in ("category1", "category 2", "category 3"):
    print("not a valid choice")
</snippet></ROW><ROW><id>16391714</id><snippet>raw_input</snippet></ROW><ROW><id>16391714</id><snippet>input</snippet></ROW><ROW><id>16392172</id><snippet>seek</snippet></ROW><ROW><id>16392172</id><snippet>import csv
import json

scores = {}  # empty dictionary to store scores for each word

with open('sentimentfile.txt') as f:
    reader = csv.reader(f, delimiter='\t')
    for row in reader:
        scores[row[0].strip()] = int(row[1].strip()) 


with open('tweetsfile.txt') as f:
    for line in f:
        tweet = json.loads(line)
        text = tweet.get('text','').encode('utf-8')
        if text:
            total_sentiment = sum(scores.get(word,0) for word in text.split())
            print("{}: {}".format(text,score))
</snippet></ROW><ROW><id>16392172</id><snippet>with statement</snippet></ROW><ROW><id>16392172</id><snippet>csv</snippet></ROW><ROW><id>16392172</id><snippet>total_sentiment = sum(scores.get(word,0) for word in text.split())
</snippet></ROW><ROW><id>16392172</id><snippet>tweet_score = []
for word in text.split():
    if word in scores:
        tweet_score[word] = scores[word]

total_score = sum(tweet_score)
</snippet></ROW><ROW><id>16392172</id><snippet>get</snippet></ROW><ROW><id>16392172</id><snippet>None</snippet></ROW><ROW><id>16392227</id><snippet>.split</snippet></ROW><ROW><id>16392227</id><snippet>for cell in driver.find_elements_by_css_selector(".grid tr a[href$='fg=S2']"):
    gradesList = cell.text.split('\n')
    if len(gradesList) &lt; 2:
        continue

    letter_grade, score = gradesList

    # Use variables...
</snippet></ROW><ROW><id>16392227</id><snippet>grade_elements = driver.find_elements_by_css_selector(".grid tr a[href$='fg=S2']")
grades = [g.text.split('\n') for g in grade_elements]
</snippet></ROW><ROW><id>16392599</id><snippet>[
    {"key": "One",   "y": 5},
    {"key": "Two",   "y": 2},
    {"key": "Three", "y": 9},
    {"key": "Four",  "y": 7},
    {"key": "Five",  "y": 4},
    {"key": "Six",   "y": 3},
    {"key": "Seven", "y": 0.5}
]
</snippet></ROW><ROW><id>16393023</id><snippet>fig, axs = plt.subplots(1,2)

df['korisnika'].plot(ax=axs[0])
df['osiguranika'].plot(ax=axs[1])
</snippet></ROW><ROW><id>16393120</id><snippet>with open("test.txt", 'br') as f:
    for line in f.readlines():
        # process lines
</snippet></ROW><ROW><id>16393120</id><snippet>struct</snippet></ROW><ROW><id>16393120</id><snippet>print struct.unpack('BBHHHBBH100s', line)
</snippet></ROW><ROW><id>16393120</id><snippet>ip_src</snippet></ROW><ROW><id>16393120</id><snippet>ip_dst</snippet></ROW><ROW><id>16393120</id><snippet>(ip_hl, ip_v) = (value &gt;&gt; 4, value &amp; 15)
</snippet></ROW><ROW><id>16393204</id><snippet>qualification = request.POST.getlist('qualification')
</snippet></ROW><ROW><id>16393435</id><snippet>&gt;&gt;&gt; l1 = [d1,d2,d3]
&gt;&gt;&gt; for d in l1:
        for k,v in d.items():
              print(k,v)
</snippet></ROW><ROW><id>16393435</id><snippet>d1 = {"a":"A"}
d2 = {"b":"B"}
d3 = {"c":"C"}
l1 = [d1,d2,d3]
for d in l1:
    for k,v in d.items():
        print("Key = {0}, Value={1}".format(k,v))
</snippet></ROW><ROW><id>16393435</id><snippet>&gt;&gt;&gt; 
Key = a, Value=A
Key = b, Value=B
Key = c, Value=C
</snippet></ROW><ROW><id>16393435</id><snippet>"d1"</snippet></ROW><ROW><id>16393435</id><snippet>d1 = {"a":"A"}
d2 = {"b":"B"}
d3 = {"c":"C"}
l1 = ['d1','d2','d3']
for dname in l1:
    for k,v in globals()[dname].items():
        print("Key = {0}, Value={1}".format(k,v))
</snippet></ROW><ROW><id>16393435</id><snippet>d1 = {"a":[1,2,3]}
d2 = {"b":[4,5,6]}
l1=["d1","d2"]

for d in l1:
    for k,v in globals()[d].items(): #or simply d.items() if the values in l1 are references to the dictionaries
        print("Dictionray {0}, under key {1} contains:".format(d,k))
        for e in v:
            print("\t{0}".format(e))
</snippet></ROW><ROW><id>16393435</id><snippet>Dictionray d1, under key a contains:
    1
    2
    3
Dictionray d2, under key b contains:
    4
    5
    6
</snippet></ROW><ROW><id>16393496</id><snippet>str.join</snippet></ROW><ROW><id>16393496</id><snippet>with open('file.txt') as f:
    print " ".join(line.strip() for line in f)  
</snippet></ROW><ROW><id>16393496</id><snippet>line.strip()</snippet></ROW><ROW><id>16393496</id><snippet>line.rstrip("\n")</snippet></ROW><ROW><id>16393496</id><snippet>"\n"</snippet></ROW><ROW><id>16393496</id><snippet>file.txt</snippet></ROW><ROW><id>16393496</id><snippet>Hello my name is blah. What is your name?
Hello your name is blah. What is my name?
</snippet></ROW><ROW><id>16393496</id><snippet>Hello my name is blah. What is your name? Hello your name is blah. What is my name?
</snippet></ROW><ROW><id>16393758</id><snippet>from_input = raw_input()
print int(from_input) * '^'
</snippet></ROW><ROW><id>16393758</id><snippet>ValueError</snippet></ROW><ROW><id>16393758</id><snippet>from_input = raw_input()
try:
   int(from_input) * '^'
except ValueError:
   print "Can't cast {0} to int".format(from_input)
</snippet></ROW><ROW><id>16393790</id><snippet>words = set(['hello','there']) #have the words available as a set
sentance = ['hello','monkey','theres','there']
rep = [ 1 if w in words else 0 for w in sentance ]
&gt;&gt;&gt; 
[1, 0, 0, 1]
</snippet></ROW><ROW><id>16393790</id><snippet>w</snippet></ROW><ROW><id>16393790</id><snippet>words</snippet></ROW><ROW><id>16393790</id><snippet>rep = [ w in words for w in sentance ]
&gt;&gt;&gt; 
[True, False, False, True]
</snippet></ROW><ROW><id>16394095</id><snippet>python mysecondscript.py heeey</snippet></ROW><ROW><id>16394095</id><snippet>myscript.py</snippet></ROW><ROW><id>16394095</id><snippet>myscript = __import__('myscript')
myscript.mainfunction()
</snippet></ROW><ROW><id>16394095</id><snippet>import sys
def mainfunction():
    print sys.argv
</snippet></ROW><ROW><id>16394095</id><snippet>python script_one.py parameter</snippet></ROW><ROW><id>16394690</id><snippet>mod_wsgi</snippet></ROW><ROW><id>16394739</id><snippet>get</snippet></ROW><ROW><id>16394739</id><snippet>&gt;&gt;&gt; d = {'key': 1}
&gt;&gt;&gt; d['foo']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'foo'
&gt;&gt;&gt; d.get('foo')
</snippet></ROW><ROW><id>16394739</id><snippet>get</snippet></ROW><ROW><id>16394739</id><snippet>None</snippet></ROW><ROW><id>16394739</id><snippet>KeyError</snippet></ROW><ROW><id>16394739</id><snippet>&gt;&gt;&gt; d.get('foo',{})
{}
</snippet></ROW><ROW><id>16394845</id><snippet>busybox</snippet></ROW><ROW><id>16394845</id><snippet>python</snippet></ROW><ROW><id>16394845</id><snippet>busybox</snippet></ROW><ROW><id>16394845</id><snippet>ash</snippet></ROW><ROW><id>16394970</id><snippet>110    # Methods to override for specific actions
111
112    def fill_menu(self):
113        pass
114
115    def on_select(self, index):
116        pass
117
118    def on_double(self, index):
119        pass
</snippet></ROW><ROW><id>16395182</id><snippet>min="0"</snippet></ROW><ROW><id>16395182</id><snippet>max=""</snippet></ROW><ROW><id>16395182</id><snippet>if condition: return True</snippet></ROW><ROW><id>16395182</id><snippet>True</snippet></ROW><ROW><id>16395182</id><snippet>def check(value, min="0", max=""):
    regex = "[a-z]{" + min + "," + max + "}$"
    return re.match(regex, value)
</snippet></ROW><ROW><id>16395182</id><snippet>^</snippet></ROW><ROW><id>16395182</id><snippet>re.match()</snippet></ROW><ROW><id>16395198</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16395198</id><snippet>&gt;&gt;&gt; myList = [['Red', 'Tomato'], ['Green', 'Pear'], ['Red', 'Strawberry'], ['Yellow', 'Lemon']]
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dic = defaultdict(list)
&gt;&gt;&gt; for k,v in myList:
    dic[k].append(v)
...     
&gt;&gt;&gt; dic['Red'][0] #first instance
'Tomato'
&gt;&gt;&gt; dic['Red'][-1] #last instance
'Strawberry'
&gt;&gt;&gt; dic["Yellow"][0] #first instance of Yellow
'Lemon'
</snippet></ROW><ROW><id>16395198</id><snippet>&gt;&gt;&gt; def solve(n, color, dic):
    try:
        return dic[color][n]
    except IndexError:
        return "Error: {0} has only {1} instances".format(color,len(dic[color]))
...     
&gt;&gt;&gt; dic = defaultdict(list)
&gt;&gt;&gt; for k,v in myList:
    dic[k].append(v)
...     
&gt;&gt;&gt; solve(0, "Red", dic)
'Tomato'
&gt;&gt;&gt; solve(-1, "Red", dic)
'Strawberry'
&gt;&gt;&gt; solve(0, "Yellow", dic)
'Lemon'
&gt;&gt;&gt; solve(1, "Yellow", dic)
'Error: Yellow has only 1 instances'
</snippet></ROW><ROW><id>16395289</id><snippet>resultaten.writerrow(lijst2)</snippet></ROW><ROW><id>16395355</id><snippet>db_column</snippet></ROW><ROW><id>16395355</id><snippet>class myClass(models.Model):
    addr_housename = models.TextField(blank=True, db_column="addr:housename")
</snippet></ROW><ROW><id>16395733</id><snippet>nonlocal</snippet></ROW><ROW><id>16395733</id><snippet>i += 1</snippet></ROW><ROW><id>16395733</id><snippet>i = i + 1</snippet></ROW><ROW><id>16395733</id><snippet>i</snippet></ROW><ROW><id>16395733</id><snippet>i</snippet></ROW><ROW><id>16395733</id><snippet>def method1():
  i = 0
  def _method1(i):
    i += 1
    print 'i=', i
    return i     #return the updated value

  i=_method1(i)  #update i
  print i

method1()
</snippet></ROW><ROW><id>16395733</id><snippet>def method1():
  method1.i = 0       #create a function attribute
  def _method1():
    method1.i += 1
    print 'i=', method1.i

  _method1()

method1()
</snippet></ROW><ROW><id>16395733</id><snippet>def method1():
  i =0 
  def _method1():
    nonlocal i  
    i += 1
    print ('i=', i)
  _method1()

method1()
</snippet></ROW><ROW><id>16395809</id><snippet>d.apply()</snippet></ROW><ROW><id>16395809</id><snippet>result</snippet></ROW><ROW><id>16395811</id><snippet>stderr</snippet></ROW><ROW><id>16395811</id><snippet>stdout</snippet></ROW><ROW><id>16395845</id><snippet>'present'</snippet></ROW><ROW><id>16395845</id><snippet>'absent'</snippet></ROW><ROW><id>16395845</id><snippet>In [17]: df.values == 'present'
Out[17]: 
array([[ True, False, False,  True],
       [False,  True,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>16395845</id><snippet>^</snippet></ROW><ROW><id>16395845</id><snippet>import pandas as pd
df = pd.DataFrame(['present absent absent present'.split(),
                   'absent present present absent'.split()],
                  columns='elem_1_pre elem_1_post elem_2_pre elem_2_post'.split(),
                  index='Observation1 Observation2'.split(),)
df = pd.DataFrame(df.values == 'present',
                  columns=df.columns,
                  index=df.index)
print(df)
#              elem_1_pre elem_1_post elem_2_pre elem_2_post
# Observation1       True       False      False        True
# Observation2      False        True       True       False

for i in range(1,3):
    elem = ['elem_{i}_{s}'.format(i=i, s=suf) for suf in ('pre', 'post')]
    change = 'elem_{i}_change'.format(i=i)
    df[change] = df[elem[0]] ^ df[elem[1]]
print(df.ix[:, 'elem_1_change elem_2_change'.split()])
</snippet></ROW><ROW><id>16395845</id><snippet>             elem_1_change elem_2_change
Observation1          True          True
Observation2          True          True
</snippet></ROW><ROW><id>16396203</id><snippet>In [1]: import numpy as np
In [2]: a = np.array([[2,0],[3,0],[3,1],[5,0],[5,1],[5,2]])
In [3]: b = np.zeros((6,3), dtype='int32')

In [4]: b[a[:,0], a[:,1]] = 10

In [5]: b
Out[5]: 
array([[ 0,  0,  0],
       [ 0,  0,  0],
       [10,  0,  0],
       [10, 10,  0],
       [ 0,  0,  0],
       [10, 10, 10]])
</snippet></ROW><ROW><id>16396203</id><snippet>b</snippet></ROW><ROW><id>16396203</id><snippet>b[x, y] = z
</snippet></ROW><ROW><id>16396203</id><snippet>x</snippet></ROW><ROW><id>16396203</id><snippet>y</snippet></ROW><ROW><id>16396203</id><snippet>z</snippet></ROW><ROW><id>16396203</id><snippet>xval</snippet></ROW><ROW><id>16396203</id><snippet>yval</snippet></ROW><ROW><id>16396203</id><snippet>zval</snippet></ROW><ROW><id>16396203</id><snippet>zval</snippet></ROW><ROW><id>16396203</id><snippet>z</snippet></ROW><ROW><id>16396203</id><snippet>z</snippet></ROW><ROW><id>16396203</id><snippet>x</snippet></ROW><ROW><id>16396203</id><snippet>a</snippet></ROW><ROW><id>16396203</id><snippet>y</snippet></ROW><ROW><id>16396203</id><snippet>a</snippet></ROW><ROW><id>16396203</id><snippet>x = a[:, 0]</snippet></ROW><ROW><id>16396203</id><snippet>y = a[:, 1]</snippet></ROW><ROW><id>16396203</id><snippet>b[a[:,0], a[:,1]] = 10
</snippet></ROW><ROW><id>16396203</id><snippet>b[a] = 10</snippet></ROW><ROW><id>16396203</id><snippet>b[a]</snippet></ROW><ROW><id>16396203</id><snippet>a</snippet></ROW><ROW><id>16396203</id><snippet>idx</snippet></ROW><ROW><id>16396203</id><snippet>b[idx]</snippet></ROW><ROW><id>16396203</id><snippet>idx</snippet></ROW><ROW><id>16396203</id><snippet>a</snippet></ROW><ROW><id>16396203</id><snippet>idx</snippet></ROW><ROW><id>16396203</id><snippet>a</snippet></ROW><ROW><id>16396203</id><snippet>b</snippet></ROW><ROW><id>16396203</id><snippet>b[idx]</snippet></ROW><ROW><id>16396203</id><snippet>b</snippet></ROW><ROW><id>16396203</id><snippet>idx</snippet></ROW><ROW><id>16396203</id><snippet>In [37]: a[1,1]
Out[37]: 0
</snippet></ROW><ROW><id>16396203</id><snippet>b[a[1,1]]</snippet></ROW><ROW><id>16396203</id><snippet>In [38]: b[a[1,1]]
Out[38]: array([0, 0, 0])
</snippet></ROW><ROW><id>16396203</id><snippet>In [33]: b[a].shape
Out[33]: (6, 2, 3)
</snippet></ROW><ROW><id>16396203</id><snippet>a</snippet></ROW><ROW><id>16396203</id><snippet>b[idx]</snippet></ROW><ROW><id>16396203</id><snippet>idx</snippet></ROW><ROW><id>16396203</id><snippet>a</snippet></ROW><ROW><id>16396203</id><snippet>idx</snippet></ROW><ROW><id>16396203</id><snippet>a</snippet></ROW><ROW><id>16396203</id><snippet>b[idx]</snippet></ROW><ROW><id>16396203</id><snippet>b[a] = 10
</snippet></ROW><ROW><id>16396203</id><snippet>b[a]</snippet></ROW><ROW><id>16396203</id><snippet>b</snippet></ROW><ROW><id>16396203</id><snippet>b</snippet></ROW><ROW><id>16396457</id><snippet>&gt;&gt;&gt; lst = [{'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5, 'c': 6}]
&gt;&gt;&gt; [dct[i] for dct in lst for i in ('b', 'c')]
[2, 3, 5, 6]
</snippet></ROW><ROW><id>16396531</id><snippet># content is a str that stores the content of the link
query = urllib.parse.parse_qs(content)

fullurls = query['url_encoded_fmt_stream_map'][0].split(',')
data = [urllib.parse.parse_qs(i) for i in fullurls]
print(data)
</snippet></ROW><ROW><id>16396531</id><snippet>dict</snippet></ROW><ROW><id>16396531</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>16396531</id><snippet>urllib.parse.parse_qs</snippet></ROW><ROW><id>16396531</id><snippet>url_encoded_fmt_stream_map</snippet></ROW><ROW><id>16396531</id><snippet>,</snippet></ROW><ROW><id>16396531</id><snippet>urllib.parse.parse_qs</snippet></ROW><ROW><id>16396593</id><snippet>"json"</snippet></ROW><ROW><id>16396593</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>16396593</id><snippet>bottle</snippet></ROW><ROW><id>16396593</id><snippet>application/json</snippet></ROW><ROW><id>16396593</id><snippet>function post() {
    $.ajax({
        url: "/report",
        type: "POST",
        data: JSON.stringify({"id": 1}),
        contentType: "application/json",
        dataType: "json",
        success: function(data) {
            alert(data);
        }
    });
}
</snippet></ROW><ROW><id>16396656</id><snippet>*</snippet></ROW><ROW><id>16396656</id><snippet>str1</snippet></ROW><ROW><id>16396656</id><snippet>my_print</snippet></ROW><ROW><id>16396656</id><snippet>*</snippet></ROW><ROW><id>16396656</id><snippet>print str1[0]</snippet></ROW><ROW><id>16396656</id><snippet>*</snippet></ROW><ROW><id>16396656</id><snippet>&gt;&gt;&gt; def func(*a):
...     print type(a)
...     print a
...     
&gt;&gt;&gt; func(1)
&lt;type 'tuple'&gt;
(1,)
&gt;&gt;&gt; func(1,2,3)
&lt;type 'tuple'&gt;
(1, 2, 3)
</snippet></ROW><ROW><id>16396656</id><snippet>def my_print(str1):
  print '---------------'
  print str1
  print '---------------'


my_print('1fdsfd %s -- %s' % (12, 18))
</snippet></ROW><ROW><id>16396656</id><snippet>def my_print(*str1):
  print '---------------'
  print str1[0]
  print '---------------'


my_print('1fdsfd %s -- %s' % (12, 18))
</snippet></ROW><ROW><id>16396948</id><snippet>protocol = input.readLine()
connectUrlHttp = 'http'
connectUrlHttps = 'https'

if protocol == "t3s":
    connectUrl = connectUrlHttps
elif protocol == "iiops":
    connectUrl = connectUrlHttps
else:
    connectUrl = connectUrlHttp

# Note the `+` after `connectUrl` on the next line:
sca_deployComposite(connectUrl + "://" + host + ":" + port, emdroot + "/" +
                    compositeLoc, owrite, user, password, default)
</snippet></ROW><ROW><id>16396985</id><snippet># start with this
students = Student.objects.filter(sales=current_user)

value = form.cleaned_data.get('nickname', None)
if value is not None:
    students = students.filter(nickname=value)

# etc, etc ...

# end with that
students = students.order_by(register_order, remaining_order, level_order)
</snippet></ROW><ROW><id>16396985</id><snippet>students = Student.objects.filter(sales=current_user)
    
fields = ['nickname', 'mobile', 'gender', ....]
for field in fields:
    value = form.cleaned_data.get(field, None)
    if value is not None:
        students = students.filter(**{field: value})
    
students = students.order_by(register_order, remaining_order, level_order)
</snippet></ROW><ROW><id>16396985</id><snippet>students = Student.objects.filter(sales=current_user)
    
for key, value in form.cleaned_data.items():
    if value is not None:
        students = students.filter(**{key: value})
    
students = students.order_by(register_order, remaining_order, level_order)
</snippet></ROW><ROW><id>16396985</id><snippet>if value is not None</snippet></ROW><ROW><id>16396985</id><snippet>if value</snippet></ROW><ROW><id>16397013</id><snippet>from subproccess import *
x = Popen('sh /root/script.sh', stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=True)
print x.stdout.readline()
print x.stderr.readline()
</snippet></ROW><ROW><id>16397013</id><snippet>from subprocess import PIPE, Popen
x = Popen(['ls', '-l'], stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=False)
while 1:
    if x.poll() != None:
        break
    _queue.put(x.stdout.readline())
    sleep(0.2)
</snippet></ROW><ROW><id>16397013</id><snippet>x = Popen(['ls', '-l'], stdout=PIPE, stderr=STDOUT, stdin=PIPE, shell=False)
</snippet></ROW><ROW><id>16397013</id><snippet>from threading import Thread, enumerate
from subprocess import Popen, PIPE
from time import sleep

class nonBlockingStderr(Thread):
    def __init__(self, handle):
        self.handle = handle
        self.stderrOutput = []
        Thread.__init__(self)
        self.start()
    def stderr(self):
        if len(self.stderrOutput) &lt;= 0:
            return ''
        else:
            ret = self.stderrOutput[0]
            self.stderrOutput = self.stderrOutput[1:]
            return ret
    def run(self):
        while 1:
            line = self.handle.readline()
            if len(line) &gt; 0:
                self.stderrOutput.append(line)
            sleep(0.1)

from subprocess import PIPE, Popen
x = Popen(['ls', '-l'], stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=False)
errHandle = nonBlockingStderr(x.stderr)
while 1:
    if x.poll() != None:
        break
    _queue.put(errHandle.stderr())
    _queue.put(x.stdout.readline())
    sleep(0.2)
</snippet></ROW><ROW><id>16397041</id><snippet>auto_now_add = True</snippet></ROW><ROW><id>16397108</id><snippet>[1,2,3]</snippet></ROW><ROW><id>16397108</id><snippet>1</snippet></ROW><ROW><id>16397289</id><snippet>csv.Writer</snippet></ROW><ROW><id>16397289</id><snippet>sourcepath = "/home/julien/csv/ABORD.csv"
destpath =  "/home/julien/csv/ABORD-fixed.csv"

with open(sourcepath, "rb") as source, open(destpath, "wb") as dest:
    # XXX are you sure you want this as quotechar ???
    reader = csv.reader(source, delimiter = ';', quotechar=' ')
    writer = csv.writer(dest,  delimiter = ';', quotechar=' ')

    # first copy the (augmented) headers
    headers = reader.next()
    headers.append("CONTROL")
    writer.writerow(headers)

    # then let's loop on the content
    for rownum, row in enumerate(reader):
        # we need to convert data to int             
        # adding proper error handling here might help...
        # status = "result OK" if (int(row[1]) &gt; 10 and int(row[2]) &lt; 20) else "result fail"
        try:
            l1 = int(row[1])
            l2 = int(row[2])
        except (TypeError, ValueError), e:
            err = "non integer value for l1 and or l2 in row %s line %s - got : %s" % (
                rownum, reader.linenum, row
                )
            print &gt;&gt; sys.stderr, err
            result = "invalid values"
        else:
            if l1 &gt; 10 and l2 &lt; 20:
                result = "result OK"
            elif rownum == 42: # stupid value for if/elif/else exemple
                result = "what's the question ?"
            else:
                result = "result fail"

        row.append(result)
        writer.writerow(row)
</snippet></ROW><ROW><id>16397470</id><snippet>multiprocessing/process.py</snippet></ROW><ROW><id>16397470</id><snippet>Process.start()</snippet></ROW><ROW><id>16397470</id><snippet>_current_process._children.add(self)</snippet></ROW><ROW><id>16397470</id><snippet>_cleanup()</snippet></ROW><ROW><id>16397470</id><snippet>start()</snippet></ROW><ROW><id>16397588</id><snippet>return</snippet></ROW><ROW><id>16397588</id><snippet>for</snippet></ROW><ROW><id>16397588</id><snippet>spread()</snippet></ROW><ROW><id>16397588</id><snippet>spread()</snippet></ROW><ROW><id>16397874</id><snippet>AT+CGDCONT?</snippet></ROW><ROW><id>16397874</id><snippet>AT+CGATT=1</snippet></ROW><ROW><id>16397874</id><snippet>AT+CGDATA=?</snippet></ROW><ROW><id>16397874</id><snippet>AT+CGACT=1</snippet></ROW><ROW><id>16397874</id><snippet>OK</snippet></ROW><ROW><id>16397874</id><snippet>AT+CMMSINIT # Initialize the MMS method
AT+CMMSCURL="some.url.com" # the MMS center URL
AT+CMMSCID=1 # Set bearer
AT+CMMSPROTO="1.1.1.1",8080 # MMS Proxy information
AT+SAPBR=3,1,"Contype","GPRS" # How you are sending
AT+SAPBR=3,1,"APN","foobar" # Set the APN
AT+SAPBR=1,1 # Activate the bearer context
</snippet></ROW><ROW><id>16397874</id><snippet>&gt; AT+CMMSEDIT=1  # Enter edit mode
OK
&gt; AT+CMMSDOWN="PIC",54321,30000 # Download a pic that is 54321 bytes
                                # and set the latency
                                # for the download to 30000 ms
CONNECT                         # This means, ready to receive data
                                # so send your file
OK                              # Data received
&gt; AT+CMMSRECP="123456789"       # Set the recipient
OK
&gt; AT+CMMSVIEW                   # View your message
(your message)
OK
&gt; AT+CMMSSEND                   # Send the message
OK                              # Message sent
&gt; AT+CMMSEDIT=0                 # Exit edit mode, and clear the buffer
OK
</snippet></ROW><ROW><id>16397904</id><snippet>def printTree(parent, tree, indent=''):
  print parent
  if parent not in tree:
    return
  for child in tree[parent][:-1]:
    sys.stdout.write(indent + '|-')
    printTree(child, tree, indent + '| ')
  child = tree[parent][-1]
  sys.stdout.write(indent + '`-')
  printTree(child, tree, indent + '  ')

tree = {
  0       : [0, 4],
  4       : [360],
  272     : [3460],
  368     : [4184],
  472     : [504, 576, 7016],
  568     : [584, 640],
  576     : [664, 672],
  640     : [1048],
  664     : [368, 372, 512, 788],
  788     : [2120, 2720, 2976, 2996, 3956, 3980]
}

printTree(472, tree)

printTree(472, tree)
472
|-504
|-576
| |-664
| | |-368
| | | `-4184
| | |-372
| | |-512
| | `-788
| |   |-2120
| |   |-2720
| |   |-2976
| |   |-2996
| |   |-3956
| |   `-3980
| `-672
`-7016
</snippet></ROW><ROW><id>16397904</id><snippet>0</snippet></ROW><ROW><id>16397970</id><snippet>if len(tr.cssselect("td.ranking")) &gt; 0 and len(tr.cssselect("td.rankingname")) &gt; 0:
</snippet></ROW><ROW><id>16398323</id><snippet>:myvar</snippet></ROW><ROW><id>16398323</id><snippet>project_code = ':jobno'</snippet></ROW><ROW><id>16398323</id><snippet>project_code</snippet></ROW><ROW><id>16398323</id><snippet>:jobno</snippet></ROW><ROW><id>16398323</id><snippet>jobno</snippet></ROW><ROW><id>16398323</id><snippet>project_code = :jobno</snippet></ROW><ROW><id>16398323</id><snippet>jobno</snippet></ROW><ROW><id>16398323</id><snippet>LIKE</snippet></ROW><ROW><id>16398323</id><snippet>||</snippet></ROW><ROW><id>16398323</id><snippet>':workarea%'</snippet></ROW><ROW><id>16398323</id><snippet>:workarea || '%'</snippet></ROW><ROW><id>16398323</id><snippet>':jobno_:qcActivity%'</snippet></ROW><ROW><id>16398323</id><snippet>:jobno || '_' || :qcActivity || '%'</snippet></ROW><ROW><id>16398323</id><snippet>    cursor.execute("""
        SELECT A.MARKERID, D.COMMENTS, A.STATUS, A.X1, A.Y1, A.X2, A.Y2, C.ERRGROUP, C.ERRDESC, c.category
          FROM MDP_ERR_MASTER A,
               (SELECT MARKERID, MAX(RECNO) maxRECNO
                  FROM MDP_ERR_MASTER
                 WHERE project_code = :jobno
                   AND errorcode like :jobno || '_' || :qcActivity || '%'
                   AND WORKAREA LIKE :workarea || '%'
                 GROUP BY MARKERID) B,
               MDP_ERR_CONFIG C,
               (SELECT MARKERID, COMMENTS
                  FROM MDP_ERR_MASTER
                 WHERE PROJECT_CODE = :jobno
                   AND RECNO = 1
                   AND errorcode like :jobno || '_' || :qcActivity || '%'
                   AND WORKAREA LIKE :workarea || '%') D
         WHERE A.MARKERID = B.MARKERID
           AND A.RECNO = B.maxRECNO
           AND A.Markerid = D.MARKERID
           AND A.PROJECT_CODE = :jobno
           AND A.ERRORCODE LIKE :jobno || '_' || :qcActivity || '%'
           AND A.WORKAREA LIKE :workarea || '%'
           AND A.ERRORCODE = C.ERRCODE""",
        {"jobno" : str(self.jobNo),
         "qcActivity" : str(qcActivity),
         "workarea" : str(self.wrkArea)
        })
</snippet></ROW><ROW><id>16398462</id><snippet>import wx
app=wx.App()
dc=wx.ScreenDC()
panel = wx.Panel(self)
dc.DrawLine(100,100,500,500)
dc.Clear()

# and then
dc.Refresh()

app.MainLoop()
</snippet></ROW><ROW><id>16398462</id><snippet>clear()</snippet></ROW><ROW><id>16398462</id><snippet>Refresh()</snippet></ROW><ROW><id>16398462</id><snippet>RefreshRect()</snippet></ROW><ROW><id>16398462</id><snippet>import wx

class DrawPanel(wx.Frame):

    """Draw a line to a panel."""

    def __init__(self):
        wx.Frame.__init__(self, title="Draw on Panel")
        self.Bind(wx.EVT_PAINT, self.OnPaint)

    def OnPaint(self, event=None):
        dc = wx.PaintDC(self)
        dc.Clear()
        dc.SetPen(wx.Pen(wx.BLACK, 4))
        dc.DrawLine(0, 0, 50, 50)

app = wx.App(False)
frame = DrawPanel()
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>16398636</id><snippet>from subprocess import PIPE, Popen
x = Popen('egrep --only-match \'111\' /home/gwvm/Openvas/var/lib/openvas/plugins/*.nasl', stdout=PIPE, stderr=PIPE, shell=True)
y = Popen('cut -d ":" -f1', stdin=x.stdout, stdout=PIPE, stderr=PIPE, shell=True)

for row in y.stdout.readline():
    print row
</snippet></ROW><ROW><id>16398636</id><snippet>check_output()</snippet></ROW><ROW><id>16398636</id><snippet>|</snippet></ROW><ROW><id>16398636</id><snippet>Popen</snippet></ROW><ROW><id>16398636</id><snippet>shell=True</snippet></ROW><ROW><id>16398636</id><snippet>Popen</snippet></ROW><ROW><id>16398636</id><snippet>['ls, '-l']</snippet></ROW><ROW><id>16398636</id><snippet>shell=False</snippet></ROW><ROW><id>16398636</id><snippet>Popen</snippet></ROW><ROW><id>16398636</id><snippet>|</snippet></ROW><ROW><id>16398669</id><snippet>parent</snippet></ROW><ROW><id>16398669</id><snippet>self</snippet></ROW><ROW><id>16398669</id><snippet>PlotApp</snippet></ROW><ROW><id>16398669</id><snippet>master</snippet></ROW><ROW><id>16398669</id><snippet>self.master</snippet></ROW><ROW><id>16398669</id><snippet>PlotApp</snippet></ROW><ROW><id>16398669</id><snippet>PlotApp</snippet></ROW><ROW><id>16398669</id><snippet>self</snippet></ROW><ROW><id>16398669</id><snippet>ButtonFrame</snippet></ROW><ROW><id>16398888</id><snippet>epoch2num</snippet></ROW><ROW><id>16398888</id><snippet>y.append(np.divide(timelist[j], 1000))
</snippet></ROW><ROW><id>16398888</id><snippet>from matplotlib.dates import epoch2num
y.append(epoch2num(timelist[j]))
</snippet></ROW><ROW><id>16399002</id><snippet>withdraw()</snippet></ROW><ROW><id>16399433</id><snippet>codecs.register_error('myerrorhandler', function)</snippet></ROW><ROW><id>16399433</id><snippet>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; codecs.register_error('silly', lambda e: ('X', e.start+1))
&gt;&gt;&gt; 'foöbar'.encode('ascii', 'silly')
b'foXbar'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16399478</id><snippet>ast</snippet></ROW><ROW><id>16399478</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.array(ast.literal_eval(test))
array([['mat_huehne_2008', '0.125', '24.0'],
       ['', '', '-24.0'],
       ['', '', '41.0'],
       ['', '', '-41.0'],
       ...
</snippet></ROW><ROW><id>16399776</id><snippet>str.isdigit()</snippet></ROW><ROW><id>16399776</id><snippet>any()</snippet></ROW><ROW><id>16399776</id><snippet>if any(c.isdigit() for c in name):
    # there is a digit in the name
</snippet></ROW><ROW><id>16399776</id><snippet>.isdigit()</snippet></ROW><ROW><id>16399776</id><snippet>True</snippet></ROW><ROW><id>16399776</id><snippet>any()</snippet></ROW><ROW><id>16399776</id><snippet>True</snippet></ROW><ROW><id>16399776</id><snippet>True</snippet></ROW><ROW><id>16399776</id><snippet>False</snippet></ROW><ROW><id>16399776</id><snippet>False</snippet></ROW><ROW><id>16399776</id><snippet>&gt;&gt;&gt; any(c.isdigit() for c in 'Martijn Pieters')
False
&gt;&gt;&gt; any(c.isdigit() for c in 'The answer is 42')
True
</snippet></ROW><ROW><id>16399822</id><snippet>clean_email</snippet></ROW><ROW><id>16399822</id><snippet>ACCOUNT_ADAPTER</snippet></ROW><ROW><id>16399905</id><snippet>sort()</snippet></ROW><ROW><id>16399905</id><snippet>sort()</snippet></ROW><ROW><id>16399976</id><snippet>try:
    # filter data
    fdata = []
    fdata1 = PropertyValue()
    fdata1.Name = "UseTaggedPDF"
    fdata1.Value = True
    fdata.append(fdata1)

    fdata.append(fdata1)

    args = []
    arg1 = PropertyValue()
    arg1.Name = "FilterName"
    arg1.Value = "writer_pdf_Export"
    arg2 = PropertyValue()
    arg2.Name = "FilterData"
    arg2.Value = uno.Any("[]com.sun.star.beans.PropertyValue", tuple(fdata) )
    args.append(arg1)
    args.append(arg2)

    document.storeToURL(outputUrl, tuple(args))
finally:
    document.close(True)
</snippet></ROW><ROW><id>16400188</id><snippet>import re, sys, md5

def p(s, pos, callBack):
  while pos &lt; len(s):
    m = re.match(r'(d+)[', s[pos:])
    if m:  # repetition?
      number = m.group(1)
      for i in range(int(number)):
        endPos = p(s, pos+len(number)+1, callBack)
      pos = endPos
    elif s[pos] == ']':
      return pos + 1
    else:
      callBack(s[pos])
      pos += 1
  return pos + 1

digest = md5.new()
def feed(s):
  digest.update(s)
  sys.stdout.write(s)
  sys.stdout.flush()

end = p(sys.argv[1], 0, feed)
print
print "MD5:", digest.hexdigest()
print "finished parsing input at pos", end
</snippet></ROW><ROW><id>16400507</id><snippet>IcePy.so</snippet></ROW><ROW><id>16400507</id><snippet>/usr/lib/pyshared/python2.7/</snippet></ROW><ROW><id>16400507</id><snippet>python -c 'import sys; print(sys.path)'
</snippet></ROW><ROW><id>16400956</id><snippet>plist = []
for i in range(10):
    p = multiprocessing.Process(target=func)
    p.start()
    plist.append(p)
    sleep(5)
for p in plist:
    p.join()
do_something()
</snippet></ROW><ROW><id>16400956</id><snippet>join()</snippet></ROW><ROW><id>16401126</id><snippet>None</snippet></ROW><ROW><id>16401126</id><snippet>Py_None</snippet></ROW><ROW><id>16401126</id><snippet>result = Py_BuildValue("");
</snippet></ROW><ROW><id>16401126</id><snippet>Py_None</snippet></ROW><ROW><id>16401126</id><snippet>Py_INCREF(Py_None);
result = Py_None;
</snippet></ROW><ROW><id>16401126</id><snippet>None</snippet></ROW><ROW><id>16401126</id><snippet>Py_INCREF(Py_None);
return Py_None;
</snippet></ROW><ROW><id>16401126</id><snippet>Py_RETURN_NONE;
</snippet></ROW><ROW><id>16401126</id><snippet>return Py_BuildValue("(O)", Py_None);
</snippet></ROW><ROW><id>16401126</id><snippet>Py_BuildValue()</snippet></ROW><ROW><id>16401126</id><snippet>PyObject* tuple = PyTuple_New(1);
Py_INCREF(Py_None);
PyTuple_SetItem(tuple, 0, Py_None);
return tuple;
</snippet></ROW><ROW><id>16401126</id><snippet>PyTuple_SetItem()</snippet></ROW><ROW><id>16401183</id><snippet>set_under</snippet></ROW><ROW><id>16401183</id><snippet>set_bad</snippet></ROW><ROW><id>16401183</id><snippet>my_cmap = matplotlib.cm.get_cmap('rainbow')
my_cmap.set_under('w')
imshow(np.arange(25).reshape(5, 5),
       interpolation='none',
       cmap=my_cmap,
       vmin=.001)
</snippet></ROW><ROW><id>16401183</id><snippet>extend</snippet></ROW><ROW><id>16401342</id><snippet>gevent</snippet></ROW><ROW><id>16401342</id><snippet>grequests</snippet></ROW><ROW><id>16401342</id><snippet>threading</snippet></ROW><ROW><id>16401501</id><snippet>np.unique</snippet></ROW><ROW><id>16401501</id><snippet>else:
    ar.sort()
    flag = np.concatenate(([True], ar[1:] != ar[:-1]))
    return ar[flag]
</snippet></ROW><ROW><id>16401501</id><snippet>__ne__</snippet></ROW><ROW><id>16401501</id><snippet>total_ordering</snippet></ROW><ROW><id>16401501</id><snippet>&gt;&gt;&gt; UniqueObject(1) == UniqueObject(1)
True
&gt;&gt;&gt; UniqueObject(1) != UniqueObject(1)
True
</snippet></ROW><ROW><id>16401501</id><snippet>__ne__</snippet></ROW><ROW><id>16401501</id><snippet>&gt;&gt;&gt; UniqueObject(1) != UniqueObject(1)
False
&gt;&gt;&gt; np.array(map(UniqueObject, [1,1,2,2]))
array([UniqueObject(1), UniqueObject(1), UniqueObject(2), UniqueObject(2)], dtype=object)
&gt;&gt;&gt; np.unique(np.array(map(UniqueObject, [1,1,2,2])))
array([UniqueObject(1), UniqueObject(2)], dtype=object)
</snippet></ROW><ROW><id>16401759</id><snippet>from suds.client import Client
url = 'http://localhost:7080/webservices/WebServiceTestBean?wsdl'
client = Client(url)
</snippet></ROW><ROW><id>16401759</id><snippet>print client</snippet></ROW><ROW><id>16401759</id><snippet>Suds - version: 0.3.3 build: (beta) R397-20081121

Service (WebServiceTestBeanService) tns="http://test.server.enterprise.rhq.org/"
   Prefixes (1):
     ns0 = "http://test.server.enterprise.rhq.org/"
   Ports (1):
     (Soap)
       Methods:
         addPerson(Person person, )
         echo(xs:string arg0, )
         getList(xs:string str, xs:int length, )
         getPercentBodyFat(xs:string name, xs:int height, xs:int weight)
         getPersonByName(Name name, )
         hello()
         testExceptions()
         testListArg(xs:string[] list, )
         testVoid()
         updatePerson(AnotherPerson person, name name, )
   Types (23):
     Person
     Name
     Phone
     AnotherPerson
</snippet></ROW><ROW><id>16401920</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def bland_altman_plot(data1, data2, *args, **kwargs):
    data1     = np.asarray(data1)
    data2     = np.asarray(data2)
    mean      = np.mean([data1, data2], axis=0)
    diff      = data1 - data2                   # Difference between data1 and data2
    md        = np.mean(diff)                   # Mean of the difference
    sd        = np.std(diff, axis=0)            # Standard deviation of the difference

    plt.scatter(mean, diff, *args, **kwargs)
    plt.axhline(md,        color='gray', linestyle='--')
    plt.axhline(md + 2*sd, color='gray', linestyle='--')
    plt.axhline(md - 2*sd, color='gray', linestyle='--')
</snippet></ROW><ROW><id>16401920</id><snippet>data1</snippet></ROW><ROW><id>16401920</id><snippet>data2</snippet></ROW><ROW><id>16401920</id><snippet>from numpy.random import random

bland_altman_plot(random(10), random(10))
plt.title('Bland-Altman Plot')
plt.show()
</snippet></ROW><ROW><id>16401966</id><snippet>import re

pattern = re.compile(u"&lt;.*?&gt;| |&amp;|\u260e",re.DOTALL|re.M)
s = u"bla ble \u260e blo"
re.sub(pattern, "", s)
</snippet></ROW><ROW><id>16401966</id><snippet>u'bla ble  blo'
</snippet></ROW><ROW><id>16401966</id><snippet>\u260e</snippet></ROW><ROW><id>16401966</id><snippet>\u260e</snippet></ROW><ROW><id>16402029</id><snippet>s</snippet></ROW><ROW><id>16402029</id><snippet>c</snippet></ROW><ROW><id>16402029</id><snippet>index</snippet></ROW><ROW><id>16402029</id><snippet>output</snippet></ROW><ROW><id>16402029</id><snippet>output</snippet></ROW><ROW><id>16402029</id><snippet>s</snippet></ROW><ROW><id>16402029</id><snippet>c</snippet></ROW><ROW><id>16402029</id><snippet>output[s] = c</snippet></ROW><ROW><id>16402029</id><snippet>rows</snippet></ROW><ROW><id>16402029</id><snippet>cols</snippet></ROW><ROW><id>16402029</id><snippet>values</snippet></ROW><ROW><id>16402029</id><snippet>import numpy as np
dx = 8
dy = 10
bx = 5.34
by = 1.09
index = np.zeros(dx+dy,dtype = 'int32')
rows = []
cols = []
vals = []
for i in np.arange(2,dy+1):
    for j in np.arange(1,dx+1):
        theta = 180*np.arctan(abs(j-bx)/(i-by))/np.pi
        if theta &lt; 10:
            r = np.around(np.sqrt((j-bx)**2+(i-by)**2))
            r = r.astype(int) 
            if r &gt; 0:
                index[r] += 1
                rows.append(r-1)
                cols.append(index[r]-1)
                vals.append(i+(j-1)*dy)

outshape = max(rows)+1, max(cols)+1  # now you know the size
output = np.zeros(outshape, np.int)  
output[rows, cols] = vals
</snippet></ROW><ROW><id>16402029</id><snippet>output</snippet></ROW><ROW><id>16402029</id><snippet>In [60]: output
Out[60]: 
array([[ 0,  0,  0],
       [ 0,  0,  0],
       [44,  0,  0],
       [45, 55,  0],
       [46, 56,  0],
       [47, 57,  0],
       [48, 58,  0],
       [39, 49, 59],
       [40, 50, 60]])
</snippet></ROW><ROW><id>16402029</id><snippet>import numpy as np
dx = 8
dy = 10
bx = 5.34
by = 1.09
index = np.zeros(dx+dy,dtype = 'int32')
outshape = (nrows, ncols)                        # if you know the size
output = np.zeros(outshape, np.int)              # initialize the output matrix
for i in np.arange(2,dy+1):
    for j in np.arange(1,dx+1):
        theta = 180*np.arctan(abs(j-bx)/(i-by))/np.pi
        if theta &lt; 10:
            r = np.around(np.sqrt((j-bx)**2+(i-by)**2))
            r = r.astype(int) 
            if r &gt; 0:
                index[r] += 1
                output[r-1, index[r]-1] = i+(j-1)*dy  # no need to set `s` or `c`
</snippet></ROW><ROW><id>16402192</id><snippet>STATIC_</snippet></ROW><ROW><id>16402192</id><snippet>MEDIA_</snippet></ROW><ROW><id>16402192</id><snippet># Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = '/path/to/mydjangosite/media/'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = 'http://www.mydjangosite.com/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = '/path/to/mydjangosite/static/'

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = 'http://www.mydjangosite.com/static/'
</snippet></ROW><ROW><id>16402192</id><snippet>STATICFILES_FINDERS</snippet></ROW><ROW><id>16402192</id><snippet># List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)
</snippet></ROW><ROW><id>16402192</id><snippet>static/</snippet></ROW><ROW><id>16402192</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>16402192</id><snippet>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    # DJANGO SOUTH
    'south',
    # MY APPS
    'my_django_app',
)
</snippet></ROW><ROW><id>16402192</id><snippet>manage.py</snippet></ROW><ROW><id>16402192</id><snippet>collectstatic</snippet></ROW><ROW><id>16402192</id><snippet>python manage.py collectstatic
</snippet></ROW><ROW><id>16402192</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>16402192</id><snippet>settings.py</snippet></ROW><ROW><id>16402192</id><snippet>/etc/apache2/sites-available/my_django_site.conf</snippet></ROW><ROW><id>16402192</id><snippet>&lt;VirtualHost *:80&gt;
      ServerName www.mydjangosite.com
      ServerAlias mydjangosite.com
      ServerAdmin fake@mydjangosite.com

      DocumentRoot /path/to/mydjangosite
      &lt;Directory /path/to/mydjangosite&gt;
             Options FollowSymLinks
             AllowOverride None
             Order allow,deny
             allow from all
      &lt;/Directory&gt;

      Alias /static/ /path/to/mydjangosite/static/
      &lt;Directory /path/to/mydjangosite/static&gt;
              Order allow,deny
              allow from all
      &lt;/Directory&gt;

      Alias /media/ /path/to/mydjangosite/media/
      &lt;Directory /path/to/mydjangosite/media&gt;
              Order allow,deny
              allow from all
      &lt;/Directory&gt;

      # The following installs the Django WSGI app
      WSGIDaemonProcess www.mydjangosite.com processes=2 threads=15 display-name=%{GROUP}
      WSGIProcessGroup www.mydjangosite.com
      WSGIScriptAlias / /path/to/mydjangosite/wsgi.py

&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>16402192</id><snippet>Alias</snippet></ROW><ROW><id>16402192</id><snippet>Directory</snippet></ROW><ROW><id>16402192</id><snippet>sudo service apache2 restart</snippet></ROW><ROW><id>16402493</id><snippet>1</snippet></ROW><ROW><id>16402493</id><snippet>-1</snippet></ROW><ROW><id>16402493</id><snippet>np.dot</snippet></ROW><ROW><id>16402493</id><snippet>&gt;&gt;&gt; haystack = np.array([[1, -1, 1, -1],
...                      [1, 1, -1, 1],
...                      [1, -1, 1, -1]])
&gt;&gt;&gt; needle = np.array([1, -1, 1, -1])
&gt;&gt;&gt; haystack.dot(needle)
array([ 4, -2,  4])
&gt;&gt;&gt; np.sum(haystack.dot(needle) == len(needle))
2
</snippet></ROW><ROW><id>16402545</id><snippet>def read_by_tokens(fileobj):
    for line in fileobj:
        for token in line.split():
            yield token
</snippet></ROW><ROW><id>16402545</id><snippet>.readline()</snippet></ROW><ROW><id>16402545</id><snippet>with open('somefilename') as f:
    for token in read_by_tokens(f):
        print(token)
</snippet></ROW><ROW><id>16402545</id><snippet>read_by_tokens()</snippet></ROW><ROW><id>16402545</id><snippet>next()</snippet></ROW><ROW><id>16402545</id><snippet>with open('somefilename') as f:
    tokenized = read_by_tokens(f)

    # read first two tokens separately
    first_token = next(tokenized)
    second_token = next(tokenized)

    for token in tokenized:
        # loops over all tokens *except the first two*
        print(token)
</snippet></ROW><ROW><id>16402600</id><snippet>def GetMarketData(fr, cr, dct1, dct2, dict3, dct5, dct5):
    md = MarketData()

    ques = [Queue() for _ in range(7)]
    procs = [Process(target=getattr(md,'GetMD%d'%(i),args=(q,)) 
             for i,q in enumerate(ques,1)]
    for p in procs:
        p.start()

    fr.append(ques[0].get())
    dct1.update(ques[1].get())
    dct2.update(ques[2].get())
    dct3.update(ques[3].get())
    cr.append(ques[4].get())
    dct4.update(ques[5].get())
    dct5.update(ques[6].get())

    for p in procs:
        p.join()
</snippet></ROW><ROW><id>16402646</id><snippet>class Spam(models.Model):
    foo_type = models.WhateverFieldType(editable=False, choices=FOO_TYPE_CHOICES)
    # ... other fields
</snippet></ROW><ROW><id>16402646</id><snippet>foo_type</snippet></ROW><ROW><id>16402646</id><snippet>Spam</snippet></ROW><ROW><id>16402646</id><snippet>foo_type</snippet></ROW><ROW><id>16402646</id><snippet>class SpamForm(forms.ModelForm):
    class Meta:
        exclude = ('foo_type',)
</snippet></ROW><ROW><id>16402646</id><snippet>UpdateView</snippet></ROW><ROW><id>16402646</id><snippet>ListView</snippet></ROW><ROW><id>16402646</id><snippet>tye_type</snippet></ROW><ROW><id>16402646</id><snippet>Auto</snippet></ROW><ROW><id>16402646</id><snippet>class SpamUpdateView(UpdateView):
    def get_queryset(self):
        return super(SpamUpdateView, self).get_queryset().filter(foo_type=FOO_TYPE_AUTO)

class SpamListView(ListView):
    def get_queryset(self):
        return super(SpamListView, self).get_queryset().filter(foo_type=FOO_TYPE_AUTO)
</snippet></ROW><ROW><id>16402913</id><snippet>tif = Image.open('e:/orthoData/test-PIL/a1.tif')
</snippet></ROW><ROW><id>16402932</id><snippet>pywin32</snippet></ROW><ROW><id>16402932</id><snippet>import os, win32com.client

def runScreensaver():
    strComputer = "."
    objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
    objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
    colItems = objSWbemServices.ExecQuery("Select * from Win32_Desktop")
    for objItem in colItems:
        if objItem.ScreenSaverExecutable:
            os.system(objItem.ScreenSaverExecutable + " /start")
            break
</snippet></ROW><ROW><id>16402932</id><snippet>os.system()</snippet></ROW><ROW><id>16403012</id><snippet>def split_up_into_sixteen_chars():
</snippet></ROW><ROW><id>16403012</id><snippet>split_up_into_sixteen_chars(x_str)
</snippet></ROW><ROW><id>16403012</id><snippet>def split_up_into_sixteen_chars(x_str):
</snippet></ROW><ROW><id>16403012</id><snippet>def split_up_into_sixteen_chars(some_string):
    while len(some_string) &gt; 0:
        v = some_string[:16]
        print(v)
</snippet></ROW><ROW><id>16403012</id><snippet>some_string</snippet></ROW><ROW><id>16403012</id><snippet>some_string</snippet></ROW><ROW><id>16403012</id><snippet>def split_up_into_sixteen_chars(some_string):
    while len(some_string) &gt; 0:
        v = some_string[:16]
        print(v)
        some_string = some_string[16:]
</snippet></ROW><ROW><id>16403012</id><snippet>some_string</snippet></ROW><ROW><id>16403012</id><snippet>None</snippet></ROW><ROW><id>16403012</id><snippet>print()</snippet></ROW><ROW><id>16403012</id><snippet>yield</snippet></ROW><ROW><id>16403012</id><snippet>map()</snippet></ROW><ROW><id>16403012</id><snippet>def split_up_into_sixteen_chars(some_string):
    while len(some_string) &gt; 0:
        v = some_string[:16]
        yield v
        some_string = some_string[16:]
</snippet></ROW><ROW><id>16403012</id><snippet>def split_up_into_sixteen_chars(some_string):
    while some_string:
        yield some_string[:16]
        some_string = some_string[16:]
</snippet></ROW><ROW><id>16403012</id><snippet>while</snippet></ROW><ROW><id>16403012</id><snippet>if</snippet></ROW><ROW><id>16403012</id><snippet>map(Decrypt.get, ...)</snippet></ROW><ROW><id>16403012</id><snippet>split_up_into_sixteen_chars()</snippet></ROW><ROW><id>16403012</id><snippet>Dycrypt</snippet></ROW><ROW><id>16403012</id><snippet>None</snippet></ROW><ROW><id>16403012</id><snippet>dict.get()</snippet></ROW><ROW><id>16403012</id><snippet>''.join()</snippet></ROW><ROW><id>16403012</id><snippet>''.join(map(lambda chunk: Decrypt.get(chunk, ''), split_up_into_sixteen_chars(x_str)))
</snippet></ROW><ROW><id>16403012</id><snippet>''</snippet></ROW><ROW><id>16403012</id><snippet>Decrypt</snippet></ROW><ROW><id>16403012</id><snippet>&gt;&gt;&gt; x_str='Hello world!'
&gt;&gt;&gt; ''.join(map(lambda chunk: Decrypt.get(chunk, ''), split_up_into_sixteen_chars(x_str)))
''
&gt;&gt;&gt; x_str = '1s25FF5ML10IF7aC'
&gt;&gt;&gt; ''.join(map(lambda chunk: Decrypt.get(chunk, ''), split_up_into_sixteen_chars(x_str)))
'A'
</snippet></ROW><ROW><id>16403166</id><snippet>pickle.dump(len(objects), fileobj)
for ob in objects:
    pickle.dump(ob, fileobj)
</snippet></ROW><ROW><id>16403279</id><snippet>http://localhost/api/v2/foo/</snippet></ROW><ROW><id>16403279</id><snippet>http://localhost/api/v2/foo/24/</snippet></ROW><ROW><id>16403279</id><snippet>foo.id = 24</snippet></ROW><ROW><id>16403279</id><snippet>localhostRESTfulApi</snippet></ROW><ROW><id>16403279</id><snippet>localhostRESTfulApi.POST([endpoint URL], [new object data])</snippet></ROW><ROW><id>16403279</id><snippet>null</snippet></ROW><ROW><id>16403279</id><snippet>id</snippet></ROW><ROW><id>16403279</id><snippet>localhostRESTfulApi.GET</snippet></ROW><ROW><id>16403279</id><snippet>save()</snippet></ROW><ROW><id>16403279</id><snippet>get</snippet></ROW><ROW><id>16403279</id><snippet>set</snippet></ROW><ROW><id>16403279</id><snippet>save()</snippet></ROW><ROW><id>16403356</id><snippet>from os import *
</snippet></ROW><ROW><id>16403356</id><snippet>os</snippet></ROW><ROW><id>16403356</id><snippet>os.open()</snippet></ROW><ROW><id>16403356</id><snippet>r</snippet></ROW><ROW><id>16403356</id><snippet>open()</snippet></ROW><ROW><id>16403569</id><snippet>In [11]: df.pivot_table(rows='admit', cols='prestige', aggfunc='size')
Out[11]: 
prestige   1   2   3   4
admit                   
0         28  97  93  55
1         33  54  28  12
</snippet></ROW><ROW><id>16403590</id><snippet>In [11]: df = df.sort('STK_ID') # skip this if you're sure it's sorted

In [12]: df['STK_ID'].searchsorted('A0003', 'left')
Out[12]: 6000

In [13]: df['STK_ID'].searchsorted('A0003', 'right')
Out[13]: 8000

In [14]: timeit df[6000:8000]
10000 loops, best of 3: 134 µs per loop
</snippet></ROW><ROW><id>16403594</id><snippet>for (int i=0;…)</snippet></ROW><ROW><id>16403594</id><snippet>int</snippet></ROW><ROW><id>16403594</id><snippet>INT_MIN % (-1)</snippet></ROW><ROW><id>16403594</id><snippet>(0,i++,j) + (0,j++,i)</snippet></ROW><ROW><id>16403594</id><snippet>//</snippet></ROW><ROW><id>16403628</id><snippet>plone.recipe.command</snippet></ROW><ROW><id>16403628</id><snippet>[buildout]
parts = 
    some_console_script
    command

[some_console_script]
recipe = zc.recipe.egg:scripts
scriptname = some_console_script
eggs =
    foo_egg
    bar_egg
scripts = console_entry_point=${:scriptname}

[command]
recipe = plone.recipe.command
command = ${buildout:bin-directory}/${some_console_script:scriptname}
update-command = command
</snippet></ROW><ROW><id>16403628</id><snippet>command</snippet></ROW><ROW><id>16403628</id><snippet>command</snippet></ROW><ROW><id>16403628</id><snippet>update-command</snippet></ROW><ROW><id>16403628</id><snippet>[command]</snippet></ROW><ROW><id>16403628</id><snippet>command</snippet></ROW><ROW><id>16403628</id><snippet>zc.buildout.extension</snippet></ROW><ROW><id>16403628</id><snippet>zc.buildout.unloadextension</snippet></ROW><ROW><id>16403628</id><snippet>buildout</snippet></ROW><ROW><id>16403839</id><snippet>str.splitlines</snippet></ROW><ROW><id>16403839</id><snippet>for line in data.splitlines():
    # Do things.
</snippet></ROW><ROW><id>16403870</id><snippet>json</snippet></ROW><ROW><id>16403870</id><snippet>cls()</snippet></ROW><ROW><id>16403870</id><snippet>default</snippet></ROW><ROW><id>16403870</id><snippet>cls=JSONEncoder</snippet></ROW><ROW><id>16403870</id><snippet>json.DjangoJSONEncoder</snippet></ROW><ROW><id>16403870</id><snippet>django_tastypie</snippet></ROW><ROW><id>16403870</id><snippet>default</snippet></ROW><ROW><id>16403870</id><snippet>JSONEncoder</snippet></ROW><ROW><id>16403870</id><snippet>.default()</snippet></ROW><ROW><id>16403870</id><snippet>cls</snippet></ROW><ROW><id>16403870</id><snippet>JSONEncoder</snippet></ROW><ROW><id>16404038</id><snippet>email</snippet></ROW><ROW><id>16404038</id><snippet>email.parser</snippet></ROW><ROW><id>16404065</id><snippet>html_item = lambda nv: '&lt;div&gt;{nv[0]}:{nv[1]}&lt;/div&gt;'.format(**vars())
</snippet></ROW><ROW><id>16404065</id><snippet>\</snippet></ROW><ROW><id>16404065</id><snippet>somevar = some_function_call(arg1, arg2) + \
          some_other_function_call(arg3, arg4)
</snippet></ROW><ROW><id>16404065</id><snippet>&gt;&gt;&gt; test = dict(foo='bar')
&gt;&gt;&gt; '{foo}'.format(\*\*test)
  File "&lt;stdin&gt;", line 1
    '{foo}'.format(\*\*test)
                           ^
SyntaxError: unexpected character after line continuation character
&gt;&gt;&gt; '{foo}'.format(**test)
'bar'
</snippet></ROW><ROW><id>16404091</id><snippet>package_name</snippet></ROW><ROW><id>16404091</id><snippet>package_dir</snippet></ROW><ROW><id>16404091</id><snippet>import os
import package_name

package_dir = os.path.dirname(package_name.__file__)
theme_dir = os.path.join(package_dir, 'themes')
</snippet></ROW><ROW><id>16404147</id><snippet>create_engine('mysql+mysqldb://USER:@SERVER:PORT/DB?charset=utf8', encoding='utf-8')
</snippet></ROW><ROW><id>16404147</id><snippet>sqlalchemy.engine.url.URL</snippet></ROW><ROW><id>16404147</id><snippet>create engine</snippet></ROW><ROW><id>16404147</id><snippet>import sqlalchemy.engine.url as url

engine_url = url.URL(
    drivername='mysql+' + cfg['MYSQL_PYTHON_DRIVER'],
    host=cfg['MYSQL_HOST'],
    port=cfg['MYSQL_PORT'],
    username=cfg['MYSQL_USER'],
    password=cfg['MYSQL_PWD'],
    database=cfg['MYSQL_DB'],
    query={'charset': 'utf8'}
)
db = create_engine(engine_url, encoding='utf-8')
</snippet></ROW><ROW><id>16404355</id><snippet>minidom</snippet></ROW><ROW><id>16404355</id><snippet>unicode</snippet></ROW><ROW><id>16404355</id><snippet>page = doc.createElement('Page')
if not isinstance(title, unicode):
    title = title.decode('latin1', 'ignore')
page.setAttribute('Title', title)
</snippet></ROW><ROW><id>16404355</id><snippet>doc.toprettyxml()</snippet></ROW><ROW><id>16404355</id><snippet>doc.writexml()</snippet></ROW><ROW><id>16404355</id><snippet>import codecs
with codecs.open('pageText.xml', 'w', encoding='utf8') as f1:
    doc.writexml(f1, indent='\t', newl='\n')
</snippet></ROW><ROW><id>16404392</id><snippet>Names_Text_full_clean.csv</snippet></ROW><ROW><id>16404392</id><snippet>match[0]</snippet></ROW><ROW><id>16404392</id><snippet>match[0]</snippet></ROW><ROW><id>16404392</id><snippet>match</snippet></ROW><ROW><id>16404392</id><snippet>import collections
by_sender = collections.defaultdict(list)
file_read = open('Names_Text_full_clean.csv', 'rU')
reader = csv.reader(file_read)
for match in reader:
    by_sender[match[0]].append(match)
</snippet></ROW><ROW><id>16404392</id><snippet>    for match in reader:
        if sender[1] == match [0]:
</snippet></ROW><ROW><id>16404392</id><snippet>    for match in by_sender[sender[1]]:
</snippet></ROW><ROW><id>16404392</id><snippet>match</snippet></ROW><ROW><id>16404392</id><snippet>by_sender[match[0]]</snippet></ROW><ROW><id>16404392</id><snippet>set(match[1:])</snippet></ROW><ROW><id>16404392</id><snippet>word[1]</snippet></ROW><ROW><id>16404392</id><snippet>match[1:]</snippet></ROW><ROW><id>16404392</id><snippet>word[1] in my_set</snippet></ROW><ROW><id>16404527</id><snippet>isFree()</snippet></ROW><ROW><id>16404527</id><snippet>return True</snippet></ROW><ROW><id>16404527</id><snippet>return False</snippet></ROW><ROW><id>16404564</id><snippet>/etc/alternatives/x-terminal-emulator</snippet></ROW><ROW><id>16404564</id><snippet>gsettings get org.gnome.desktop.default-applications.terminal</snippet></ROW><ROW><id>16404832</id><snippet>self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
self.notebook = gtk.Notebook()
self.singleFilePane = gtk.Label("Single File")
self.notebook.append_page(self.singleFilePane, gtk.Label("Single File"))
self.multiFilePane = gtk.Label("Multiple Files")
self.notebook.append_page(self.multiFilePane, gtk.Label("Multiple Files"))
self.window.add(self.notebook)
self.window.show_all()
print self.notebook.get_n_pages(), self.notebook.get_current_page()
</snippet></ROW><ROW><id>16404832</id><snippet>2 0
</snippet></ROW><ROW><id>16404929</id><snippet>weapons = { 'Sword': 10, 'Pike': 13 }
armors = { 'Crude': 2, 'Heavy': 5 }
</snippet></ROW><ROW><id>16404929</id><snippet>weapons['Sword']</snippet></ROW><ROW><id>16404929</id><snippet>weapons[User_Weapon]</snippet></ROW><ROW><id>16404929</id><snippet>weapons[User_stats[0]]</snippet></ROW><ROW><id>16404987</id><snippet>import urllib2
from lxml import html

url = "http://www.reuters.com/article/2013/04/17/us-usa-immigration-tech-idUSBRE93F1DL20130417?feedType=RSS&amp;feedName=technologyNews"
response = urllib2.urlopen(url).read().decode("utf-8")
test = html.fromstring(response)

for p in test.body.iter('p'):
    print p.text_content()
</snippet></ROW><ROW><id>16405037</id><snippet>import os

os.chdir('/home/Desktop/songs')
letter = {d : [child 
                  for child in os.listdir('./' + d) 
                  if os.path.isdir('./' + d)
              ] 
              for d in os.listdir('.') 
              if os.path.isdir(d)
         }
print letter
</snippet></ROW><ROW><id>16405037</id><snippet>{'A': ['1', '2'], 'B': ['1', '2']}
</snippet></ROW><ROW><id>16405079</id><snippet>s = " - ".join(s.split(' - ')[:-1])
</snippet></ROW><ROW><id>16405156</id><snippet>msg += message_body
</snippet></ROW><ROW><id>16405156</id><snippet>httplib.py</snippet></ROW><ROW><id>16405156</id><snippet>.decode('ascii')</snippet></ROW><ROW><id>16405156</id><snippet>msg</snippet></ROW><ROW><id>16405156</id><snippet>msg = "\r\n".join(self._buffer)
</snippet></ROW><ROW><id>16405156</id><snippet>self._buffer</snippet></ROW><ROW><id>16405156</id><snippet>unicode_literals</snippet></ROW><ROW><id>16405156</id><snippet>__future__</snippet></ROW><ROW><id>16405156</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>16405156</id><snippet>saxutils.escape</snippet></ROW><ROW><id>16405156</id><snippet>root = ET.Element(u'ActionCommand')
value = ET.SubElement(root, u'value')
value.text = complex_value)
request = ET.tostring(root, encoding='utf-8').decode('utf-8')
client.service.ProcessAction(request)
</snippet></ROW><ROW><id>16405167</id><snippet>&gt;&gt;&gt; line = '&gt; AY538167 1 1411 1411bp rna Acholeplasma hippikon Acholeplasmataceae'
&gt;&gt;&gt; regex = re.compile(r'(&gt;)\s(\w+).+[rna]\s+([A-Z].+)')
&gt;&gt;&gt; regex.findall(line)
[('&gt;', 'AY538167', 'Acholeplasmataceae')]
</snippet></ROW><ROW><id>16405167</id><snippet>[rna]\s+</snippet></ROW><ROW><id>16405167</id><snippet>r</snippet></ROW><ROW><id>16405167</id><snippet>n</snippet></ROW><ROW><id>16405167</id><snippet>a</snippet></ROW><ROW><id>16405167</id><snippet>n</snippet></ROW><ROW><id>16405167</id><snippet>hippikon</snippet></ROW><ROW><id>16405167</id><snippet>rna</snippet></ROW><ROW><id>16405167</id><snippet>&gt;&gt;&gt; regex = re.compile(r'(&gt;)\s(\w+).+rna\s+([A-Z].+)')
</snippet></ROW><ROW><id>16405167</id><snippet>1409bp</snippet></ROW><ROW><id>16405167</id><snippet>rna</snippet></ROW><ROW><id>16405167</id><snippet>rna</snippet></ROW><ROW><id>16405167</id><snippet>&gt;&gt;&gt; regex = re.compile(r'(&gt;)\s(\w+).+\s+rna\s+([A-Z].+)')
</snippet></ROW><ROW><id>16405167</id><snippet>(&gt;)\s(\w+).+[rna]\s+([A-Z].+)
</snippet></ROW><ROW><id>16405167</id><snippet>(&gt;)(\s)(\w+)(.+[rna]\s+)([A-Z].+)
</snippet></ROW><ROW><id>16405167</id><snippet>\1\3 \5</snippet></ROW><ROW><id>16405167</id><snippet>\1\2 \3</snippet></ROW><ROW><id>16405167</id><snippet>\4</snippet></ROW><ROW><id>16405167</id><snippet>[('&gt;', ' ', 'AY538167', ' 1 1411 1411bp Acholeplasma hippikon ', 'Acholeplasmataceae')]
</snippet></ROW><ROW><id>16405167</id><snippet>.+[rna]\s+</snippet></ROW><ROW><id>16405167</id><snippet>'1 1411 1411bp Acholeplasma hippikon '</snippet></ROW><ROW><id>16405167</id><snippet>$</snippet></ROW><ROW><id>16405167</id><snippet>\1</snippet></ROW><ROW><id>16405263</id><snippet>my_data_dict = {'first_name':'','last_name':'','blah':'','something_else':''} #defaults with all values from format string
my_data_dict.update(form) #replace any values we got
 msg = """&lt;html&gt;&lt;p&gt;%(Frist_Name)s&lt;/p&gt;&lt;p&gt;%(Last_Name)s&lt;/p&gt;&lt;/html&gt; """ % my_data_dict
</snippet></ROW><ROW><id>16405263</id><snippet>from collections import defaultdict
my_dict = defaultdict(str)
print my_dict['some_key_that_doesnt_exist']  #should print empty string
my_dict.update(form)
msg = """&lt;html&gt;&lt;p&gt;%(Frist_Name)s&lt;/p&gt;&lt;p&gt;%(Last_Name)s&lt;/p&gt;&lt;/html&gt; """ % my_data_dict
</snippet></ROW><ROW><id>16405263</id><snippet>from collections import defaultdict
my_dict = defaultdict(str,form)
msg = """&lt;html&gt;&lt;p&gt;%(Frist_Name)s&lt;/p&gt;&lt;p&gt;%(Last_Name)s&lt;/p&gt;&lt;/html&gt; """ % my_dict
</snippet></ROW><ROW><id>16405263</id><snippet>&gt;&gt;&gt; d = defaultdict(str,{'fname':'bob','lname':'smith','zipcode':11111})
&gt;&gt;&gt; format_str = "Name: %(fname)s  %(lname)s\nPhone: %(telephone)s\nZipcode: %(z
ipcode)s"
&gt;&gt;&gt; d
defaultdict(&lt;type 'str'&gt;, {'lname': 'smith', 'zipcode': 11111, 'fname': 'bob'})
&gt;&gt;&gt; #notice no telephone here
...
&gt;&gt;&gt; d['extra_unneeded_argument'] =' just for show'
&gt;&gt;&gt; d
defaultdict(&lt;type 'str'&gt;, {'lname': 'smith', 'extra_unneeded_argument': ' just f
or show', 'zipcode': 11111, 'fname': 'bob'})
&gt;&gt;&gt; print format_str%d
Name: bob  smith
Phone:
Zipcode: 11111
</snippet></ROW><ROW><id>16405304</id><snippet>^(07[\d]{8,12}|447[\d]{7,11})$</snippet></ROW><ROW><id>16405304</id><snippet>^(07\d{8,12}|447\d{7,11})$</snippet></ROW><ROW><id>16405400</id><snippet>&amp;</snippet></ROW><ROW><id>16405400</id><snippet>1 &amp; 1 == 1
1 &amp; 0 == 0
0 &amp; 1 == 0
0 &amp; 0 == 0
</snippet></ROW><ROW><id>16405400</id><snippet>2 &amp; 1 == 0
2 &amp; 2 == 2
</snippet></ROW><ROW><id>16405400</id><snippet>&amp; 0x10</snippet></ROW><ROW><id>16405400</id><snippet>0b00010000 &amp; 0x10 == 0x10
</snippet></ROW><ROW><id>16405400</id><snippet>0x10</snippet></ROW><ROW><id>16405400</id><snippet>00010000</snippet></ROW><ROW><id>16405400</id><snippet>0x20</snippet></ROW><ROW><id>16405400</id><snippet>0x40</snippet></ROW><ROW><id>16405400</id><snippet>0x80</snippet></ROW><ROW><id>16405400</id><snippet>0</snippet></ROW><ROW><id>16405400</id><snippet>==</snippet></ROW><ROW><id>16405400</id><snippet>def lcd_byte(bits, mode):
    if bits &amp; 0x10:
        GPIO.output(LCD_D4, True)
    if bits &amp; 0x20:
        GPIO.output(LCD_D5, True)
    if bits &amp; 0x40:
        GPIO.output(LCD_D6, True)
    if bits &amp; 0x80:
        GPIO.output(LCD_D7, True)
</snippet></ROW><ROW><id>16405400</id><snippet>&amp;</snippet></ROW><ROW><id>16405400</id><snippet>|</snippet></ROW><ROW><id>16405400</id><snippet>^</snippet></ROW><ROW><id>16405400</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>16405400</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>16405619</id><snippet>_</snippet></ROW><ROW><id>16405619</id><snippet>line.split('_', 1)[-1]
</snippet></ROW><ROW><id>16405619</id><snippet>&gt;&gt;&gt; 'Grp25_QTY47               5'.split('_', 1)[-1]
'QTY47               5'
&gt;&gt;&gt; 'No underscore'.split('_', 1)[-1]
'No underscore'
</snippet></ROW><ROW><id>16405619</id><snippet>import textwrap

ta_to = ta_from.copyta(status=endstatus)
with botslib.opendata(ta_from.filename,'r') as infile:
    with botslib.opendata(str(ta_to.idta),'wb') as tofile:
        for line in textwrap.wrap(next(infile), 640):
            line = line.split('_', 1)[-1]
            tofile.write(line + '\r\n')
</snippet></ROW><ROW><id>16405653</id><snippet>for i, url in enumerate(urls):
    c.setopt(pycurl.URL, url)
    with open("output%d.html" % i, "w") as f:
        c.setopt(c.WRITEDATA, f) # c.setopt(c.WRITEFUNCTION, f.write) also works
        c.perform()
</snippet></ROW><ROW><id>16405653</id><snippet>storage.getvalue()</snippet></ROW><ROW><id>16405653</id><snippet>storage</snippet></ROW><ROW><id>16405653</id><snippet>open(filename, "w")</snippet></ROW><ROW><id>16405653</id><snippet>update.html</snippet></ROW><ROW><id>16405653</id><snippet>content</snippet></ROW><ROW><id>16405743</id><snippet>applyCoder</snippet></ROW><ROW><id>16405743</id><snippet>buildCoder</snippet></ROW><ROW><id>16405743</id><snippet>dict</snippet></ROW><ROW><id>16405743</id><snippet>applyCoder</snippet></ROW><ROW><id>16405743</id><snippet>in string.punctuation</snippet></ROW><ROW><id>16405743</id><snippet>== ' '</snippet></ROW><ROW><id>16405743</id><snippet>in str(range(10))</snippet></ROW><ROW><id>16405743</id><snippet>string.digits</snippet></ROW><ROW><id>16405743</id><snippet>str(range(10))</snippet></ROW><ROW><id>16405743</id><snippet>'[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]'</snippet></ROW><ROW><id>16405743</id><snippet>story.txt</snippet></ROW><ROW><id>16405743</id><snippet>l in string.ascii_uppercase or l in string.ascii_lowercase</snippet></ROW><ROW><id>16405743</id><snippet>for l in text:
    new_text += coder.get(l, l)
</snippet></ROW><ROW><id>16405743</id><snippet>coder[l]</snippet></ROW><ROW><id>16405743</id><snippet>l</snippet></ROW><ROW><id>16405743</id><snippet>l</snippet></ROW><ROW><id>16405743</id><snippet>if currentMatch&gt;wordsFound:
    currentMatch=wordsFound
    bestShift=i
</snippet></ROW><ROW><id>16405743</id><snippet>wordsFound</snippet></ROW><ROW><id>16405743</id><snippet>currentMatch</snippet></ROW><ROW><id>16405743</id><snippet>wordsFound</snippet></ROW><ROW><id>16405743</id><snippet>wordsFound = currentMatch</snippet></ROW><ROW><id>16405743</id><snippet>$ ln -s /usr/share/dict/words words.txt
$ echo -e "This is a test.\n\nIs it good enough? Let's see.\n" | rot13 &gt; story.txt
$ python caesar.py
Loading word list from file...
   235886 words loaded.
Loading word list from file...
   235886 words loaded.
18
Loading word list from file...
   235886 words loaded.
This is a test. 

Here's some text. Is it enough? Let's see.
</snippet></ROW><ROW><id>16405743</id><snippet>print</snippet></ROW><ROW><id>16405743</id><snippet>if currentMatch&gt;wordsFound:
    print i, currentMatch, wordsFound
    currentMatch=wordsFound
    bestShift=i
</snippet></ROW><ROW><id>16405743</id><snippet>wordsFound</snippet></ROW><ROW><id>16405743</id><snippet>print</snippet></ROW><ROW><id>16405743</id><snippet>logging</snippet></ROW><ROW><id>16405743</id><snippet>applyShift</snippet></ROW><ROW><id>16405931</id><snippet>p =&gt; q</snippet></ROW><ROW><id>16405931</id><snippet>not(p) or q</snippet></ROW><ROW><id>16405965</id><snippet>app.yaml</snippet></ROW><ROW><id>16405965</id><snippet>main.py</snippet></ROW><ROW><id>16405965</id><snippet>script: main.app
</snippet></ROW><ROW><id>16405965</id><snippet>WSGIApplication</snippet></ROW><ROW><id>16405965</id><snippet>application</snippet></ROW><ROW><id>16405965</id><snippet>app</snippet></ROW><ROW><id>16406025</id><snippet>/</snippet></ROW><ROW><id>16406025</id><snippet>&lt;body background="/static/landscape.jpg"&gt;</snippet></ROW><ROW><id>16406039</id><snippet>import smtplib
smtp_client = smtplib.SMTP('smtp.gmail.com', 587)
smtp_client.starttls()
smtp_client.login(username, password)
</snippet></ROW><ROW><id>16406164</id><snippet>import operator

...

search_fields = {'contact_name', 'company', 'position', 'country'}

conditions = []
for name in search_fields:
    value = self.request.GET.get(name, None)
    if value:
        conditions.append(Q(**{name + "__in": value.split(',')}))

qs = qs.filter(reduce(operator.and_, conditions))
</snippet></ROW><ROW><id>16406164</id><snippet>__in</snippet></ROW><ROW><id>16406164</id><snippet>in</snippet></ROW><ROW><id>16406168</id><snippet>axes = { 'DA': 0, 'DB':1 }
a.sum(axes['DA'])
</snippet></ROW><ROW><id>16406168</id><snippet>DA, DB, DC = range(3)
a.sum(DA)
</snippet></ROW><ROW><id>16406168</id><snippet>-1</snippet></ROW><ROW><id>16406168</id><snippet>-2</snippet></ROW><ROW><id>16406168</id><snippet>a.shape
#(2,3,4)

np.all(a.sum(2) == a.sum(-1))
#True
np.all(a.sum(0) == a.sum(-3))
#True
</snippet></ROW><ROW><id>16406257</id><snippet>n1.body += n2.body
</snippet></ROW><ROW><id>16406257</id><snippet>&gt;&gt;&gt; a=ast.parse("i=1")
&gt;&gt;&gt; b=ast.parse("j=2")
&gt;&gt;&gt; a.body += b.body
&gt;&gt;&gt; exec compile(a, "&lt;string&gt;", "exec")
&gt;&gt;&gt; print i
1
&gt;&gt;&gt; print j
2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16406285</id><snippet>__del__</snippet></ROW><ROW><id>16406285</id><snippet>cache</snippet></ROW><ROW><id>16406402</id><snippet>df.Col</snippet></ROW><ROW><id>16406402</id><snippet>df['Col']</snippet></ROW><ROW><id>16406402</id><snippet>mydf['D'] = 4</snippet></ROW><ROW><id>16406402</id><snippet>D</snippet></ROW><ROW><id>16406402</id><snippet>&gt;&gt;&gt; d = pandas.DataFrame(np.random.randn(3, 2), columns=["A", "B"])
&gt;&gt;&gt; d
          A         B
0 -0.931675  1.029137
1 -0.363033 -0.227672
2  0.058903 -0.362436
&gt;&gt;&gt; d.Col = 8
&gt;&gt;&gt; d.Col    # Attribute is there
8
&gt;&gt;&gt; d['Col']    # But it is not a columns, just a simple attribute
Traceback (most recent call last):
  File "&lt;pyshell#8&gt;", line 1, in &lt;module&gt;
    d['Col']
  File "c:\users\brenbarn\documents\python\extensions\pandas\pandas\core\frame.py", line 1906, in __getitem__
    return self._get_item_cache(key)
  File "c:\users\brenbarn\documents\python\extensions\pandas\pandas\core\generic.py", line 570, in _get_item_cache
    values = self._data.get(item)
  File "c:\users\brenbarn\documents\python\extensions\pandas\pandas\core\internals.py", line 1383, in get
    _, block = self._find_block(item)
  File "c:\users\brenbarn\documents\python\extensions\pandas\pandas\core\internals.py", line 1525, in _find_block
    self._check_have(item)
  File "c:\users\brenbarn\documents\python\extensions\pandas\pandas\core\internals.py", line 1532, in _check_have
    raise KeyError('no item named %s' % com.pprint_thing(item))
KeyError: u'no item named Col'
&gt;&gt;&gt; d['Col'] = 100    # Create a real column
&gt;&gt;&gt; d.Col    # Attribute blocks access to column
8
&gt;&gt;&gt; d['Col']    # Column is available via item access
0    100
1    100
2    100
Name: Col, dtype: int64
&gt;&gt;&gt; del d.Col    # Delete the attribute
&gt;&gt;&gt; d.Col     # Columns is now available as an attribute (!)
0    100
1    100
2    100
Name: Col, dtype: int64
&gt;&gt;&gt; d['Col']    # And still as an item
5: 0    100
1    100
2    100
Name: Col, dtype: int64
</snippet></ROW><ROW><id>16406402</id><snippet>d.Col</snippet></ROW><ROW><id>16406402</id><snippet>del d.Col</snippet></ROW><ROW><id>16406402</id><snippet>d.Col</snippet></ROW><ROW><id>16406402</id><snippet>__getattr__</snippet></ROW><ROW><id>16406675</id><snippet>df_masked = df[(df.time &lt;= t1) &amp; (df.time &gt;= t0)]
</snippet></ROW><ROW><id>16406729</id><snippet>kwargs</snippet></ROW><ROW><id>16406729</id><snippet>kwargs</snippet></ROW><ROW><id>16406729</id><snippet>.get()</snippet></ROW><ROW><id>16406729</id><snippet>value_that_might_be_missing = kwargs.get('myvalue', 'mydefault')
</snippet></ROW><ROW><id>16406736</id><snippet>sys.exit()</snippet></ROW><ROW><id>16406736</id><snippet>import sys
import time

for i in range(100):
    time.sleep(0.3)
    print i
    if i == 5:
      sys.exit()
</snippet></ROW><ROW><id>16406819</id><snippet>CreateProcess</snippet></ROW><ROW><id>16406819</id><snippet>ZwCreateProcess</snippet></ROW><ROW><id>16406819</id><snippet>NtCreateProcess</snippet></ROW><ROW><id>16406819</id><snippet>fd, path = tempfile.mkstemp(suffix='.exe')
code = base64.b64decode(encoded_code)
os.write(fd, code)
os.fchmod(fd, 0o711)
os.close(fd)
try:
    result = subprocess.call(path)
finally:
    os.remove(path)
</snippet></ROW><ROW><id>16406819</id><snippet>remove</snippet></ROW><ROW><id>16406859</id><snippet>&gt;&gt;&gt; [s for (i,s) in enumerate(['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh']) if i%3]
['second', 'third', 'fifth', 'sixth']
</snippet></ROW><ROW><id>16406859</id><snippet>enumerate</snippet></ROW><ROW><id>16406859</id><snippet>&gt;&gt;&gt; list(enumerate(['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh']))
[(0, 'first'), (1, 'second'), (2, 'third'), (3, 'fourth'), (4, 'fifth'), (5, 'sixth'), (6, 'seventh')]
</snippet></ROW><ROW><id>16406968</id><snippet>&gt;&gt;&gt; a = np.arange(9).reshape(3,3)
&gt;&gt;&gt; b = np.transpose(a)
&gt;&gt;&gt; a
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&gt;&gt;&gt; b
array([[0, 3, 6],
       [1, 4, 7],
       [2, 5, 8]])
&gt;&gt;&gt; b[0,1] = 100
&gt;&gt;&gt; b
array([[  0, 100,   6],
       [  1,   4,   7],
       [  2,   5,   8]])
&gt;&gt;&gt; a
array([[  0,   1,   2],
       [100,   4,   5],
       [  6,   7,   8]])
</snippet></ROW><ROW><id>16406968</id><snippet>a</snippet></ROW><ROW><id>16406968</id><snippet>c</snippet></ROW><ROW><id>16406968</id><snippet>numpy.dot(a, a, out=c)
</snippet></ROW><ROW><id>16407088</id><snippet>self.view_functions[rule.endpoint]</snippet></ROW><ROW><id>16407088</id><snippet>(...)</snippet></ROW><ROW><id>16407088</id><snippet>@app.route</snippet></ROW><ROW><id>16407088</id><snippet>self.view_functions[rule.endpoint]</snippet></ROW><ROW><id>16407442</id><snippet>new_list = [x[1] for x in my_list]
</snippet></ROW><ROW><id>16407465</id><snippet>config.get(section, data)</snippet></ROW><ROW><id>16407465</id><snippet>...
config = ConfigParser()
config.read(filename)
...
configOptions.port = config.getint('Server', 'port')
configOptions.host = config.get('Server', 'host')
configOptions.quoteFile = config.get('Quotes', 'file')
</snippet></ROW><ROW><id>16407465</id><snippet>...
def setValue(parser, sect, index, value):
    cfgfile = open(filename, 'w')
    parser.set(sect, index, value)
    parser.write(cfgfile)
    cfgfile.close()
</snippet></ROW><ROW><id>16407648</id><snippet>ord()</snippet></ROW><ROW><id>16407648</id><snippet>str.join</snippet></ROW><ROW><id>16407648</id><snippet>list comprehension</snippet></ROW><ROW><id>16407648</id><snippet>&gt;&gt;&gt; def upper_case(s):
    return "".join([ chr(ord(x)-32) if 97&lt;=ord(x)&lt;=122 else x for x in s ])

&gt;&gt;&gt; upper_case("foo bar")
'FOO BAR'
</snippet></ROW><ROW><id>16407648</id><snippet>&gt;&gt;&gt; def upper_case(s):
    new_strs = []
    for char in s:
        ordi = ord(char)
        if 97 &lt;= ordi &lt;= 122:
            new_strs .append( chr(ordi-32) )
        else:    
            new_strs.append(char)
    return "".join(new_strs)     #join the list using str.join and return
... 
&gt;&gt;&gt; upper_case("foo bar")
'FOO BAR'

&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt; upper_case(ascii_lowercase)
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
</snippet></ROW><ROW><id>16407756</id><snippet># input dictionary
d=[{"abc":"movies"}, {"abc": "sports"}, {"abc": "music"}, {"xyz": "music"}, {"pqr":"music"}, {"pqr":"movies"},{"pqr":"sports"}, {"pqr":"news"}, {"pqr":"sports"}]

# fetch keys
b=[j[0] for i in d for j in i.items()]

# print output
for k in list(set(b)):
    print "{0}: {1}".format(k, b.count(k))
</snippet></ROW><ROW><id>16408269</id><snippet>&gt;&gt;&gt; x = [u'B', u'84']
&gt;&gt;&gt; x
[u'B', u'84']
&gt;&gt;&gt; x[0]
u'B'
&gt;&gt;&gt; x[1]
u'84'
&gt;&gt;&gt; str(x[0])
'B'
&gt;&gt;&gt; str(x[1])
'84'
</snippet></ROW><ROW><id>16408269</id><snippet>&gt;&gt;&gt; y = [str(i) for i in x] 
&gt;&gt;&gt; y
['B', '84']
</snippet></ROW><ROW><id>16408269</id><snippet>&gt;&gt;&gt; z = map(str, x)
&gt;&gt;&gt; z
['B', '84']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16408480</id><snippet># foo.py
def bar():
    1/0

$ ipython
In [1]: import foo
In [2]: os.chdir('/tmp')
In [3]: foo.baz()
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
&lt;ipython-input-5-a70d319d0d05&gt; in &lt;module&gt;()
----&gt; 1 foo.baz()

/private/tmp/foo.pyc in baz()

ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>16408480</id><snippet>foo.__file__</snippet></ROW><ROW><id>16408480</id><snippet>'foo.py'</snippet></ROW><ROW><id>16408480</id><snippet>inspect.stack()[0][1]</snippet></ROW><ROW><id>16408480</id><snippet>'foo.py'</snippet></ROW><ROW><id>16408480</id><snippet>os.path.abspath(foo.__file__)</snippet></ROW><ROW><id>16408480</id><snippet>os.path.abspath(__file__)</snippet></ROW><ROW><id>16408480</id><snippet>__abspath__</snippet></ROW><ROW><id>16408480</id><snippet>__file__</snippet></ROW><ROW><id>16408480</id><snippet>importlib</snippet></ROW><ROW><id>16408480</id><snippet>abspathimporter</snippet></ROW><ROW><id>16408480</id><snippet>import imppath</snippet></ROW><ROW><id>16408480</id><snippet>import</snippet></ROW><ROW><id>16408480</id><snippet>__file__</snippet></ROW><ROW><id>16408480</id><snippet>FileFinder</snippet></ROW><ROW><id>16408480</id><snippet>FileFinder</snippet></ROW><ROW><id>16408480</id><snippet>sys.path_hooks</snippet></ROW><ROW><id>16408542</id><snippet>id</snippet></ROW><ROW><id>16408542</id><snippet>hex(id(variable_here))</snippet></ROW><ROW><id>16408542</id><snippet>x = 4
print hex(id(x))
</snippet></ROW><ROW><id>16408542</id><snippet>0x9cf10c
</snippet></ROW><ROW><id>16408542</id><snippet>int</snippet></ROW><ROW><id>16408542</id><snippet>x = 4
y = 4
w = 9999
v = 9999
a = 12345678
b = 12345678
print hex(id(x))
print hex(id(y))
print hex(id(w))
print hex(id(v))
print hex(id(a))
print hex(id(b))
</snippet></ROW><ROW><id>16408648</id><snippet>import poplib
while True:
    email = checkEmail()
    if email['sender'] = 'senderiwant@domain.com':
        doJunk()
</snippet></ROW><ROW><id>16408655</id><snippet>tuple</snippet></ROW><ROW><id>16408655</id><snippet>&gt;&gt;&gt; [word for word,pos in test.pos() if pos=='NN']
['stranger', 'date']
</snippet></ROW><ROW><id>16408655</id><snippet>[0]</snippet></ROW><ROW><id>16408655</id><snippet>[-1]</snippet></ROW><ROW><id>16408655</id><snippet>subtrees</snippet></ROW><ROW><id>16408655</id><snippet>'NP'</snippet></ROW><ROW><id>16408655</id><snippet>&gt;&gt;&gt; NPs = list(test.subtrees(filter=lambda x: x.node=='NP'))
&gt;&gt;&gt; NPs
[Tree('NP', [Tree('PRP', ['you'])]), Tree('NP', [Tree('DT', ['a']), Tree('JJ', ['total']), Tree('NN', ['stranger'])]), Tree('NP', [Tree('DT', ['a']), Tree('NN', ['date'])])]
</snippet></ROW><ROW><id>16408655</id><snippet>'NN'</snippet></ROW><ROW><id>16408655</id><snippet>&gt;&gt;&gt; NNs_inside_NPs = map(lambda x: list(x.subtrees(filter=lambda x: x.node=='NN')), NPs)
&gt;&gt;&gt; NNs_inside_NPs
[[], [Tree('NN', ['stranger'])], [Tree('NN', ['date'])]]
</snippet></ROW><ROW><id>16408655</id><snippet>list</snippet></ROW><ROW><id>16408655</id><snippet>list</snippet></ROW><ROW><id>16408655</id><snippet>'NN'</snippet></ROW><ROW><id>16408655</id><snippet>'NP'</snippet></ROW><ROW><id>16408655</id><snippet>'NP'</snippet></ROW><ROW><id>16408655</id><snippet>leaves</snippet></ROW><ROW><id>16408655</id><snippet>'stranger'</snippet></ROW><ROW><id>16408655</id><snippet>Tree('NN', ['stranger'])</snippet></ROW><ROW><id>16408655</id><snippet>&gt;&gt;&gt; [noun.leaves()[0] for nouns in NNs_inside_NPs for noun in nouns]
['stranger', 'date']
</snippet></ROW><ROW><id>16408673</id><snippet>connection.send(random_line(configOptions.quoteFile + "\n")
</snippet></ROW><ROW><id>16408673</id><snippet>connection.send(random_line(configOptions.quoteFile + "\n") connection.close()
</snippet></ROW><ROW><id>16408673</id><snippet>connection.close()</snippet></ROW><ROW><id>16408673</id><snippet>connection.send(random_line(configOptions.quoteFile + "\n"))
</snippet></ROW><ROW><id>16408881</id><snippet>@property
def Teacher(self):
    return self.Class.Teacher
</snippet></ROW><ROW><id>16408881</id><snippet>s1.Class.Teacher
</snippet></ROW><ROW><id>16408903</id><snippet>import numpy as np
np.where((qv == qt).all(-1))
</snippet></ROW><ROW><id>16408903</id><snippet>import numpy as np
tol = 1e-8
diff = (qv - qt)
np.where((abs(diff) &lt; tol).all(-1))
</snippet></ROW><ROW><id>16408903</id><snippet>qt</snippet></ROW><ROW><id>16408903</id><snippet>scipy.spatial.KDTree</snippet></ROW><ROW><id>16409111</id><snippet>self.souped_text = product_page</snippet></ROW><ROW><id>16409357</id><snippet>griddata</snippet></ROW><ROW><id>16409357</id><snippet>data = data.reshape(81, 201, 3)
x = data[...,0]
y = data[...,1]
z = data[...,2]

CS = plt.contourf(x,y,z,200,cmap=plt.cm.jet,rasterized=True)
plt.colorbar()

plt.show() 
</snippet></ROW><ROW><id>16409413</id><snippet>new_artist = models.Artist(
    name = artist_name,
    )
db.session.add(new_artist)

new_song = models.Song(
    name = song_name,
    artist = new_artist,
    )
db.session.add(new_song)

new_media = models.Media(
    song = new_song,
    media_id = media_id,
    user=user
    )
db.session.add(new_media)
db.session.commit()
</snippet></ROW><ROW><id>16409460</id><snippet>float</snippet></ROW><ROW><id>16409460</id><snippet>object</snippet></ROW><ROW><id>16409460</id><snippet>In [8]: obs['latitude']+obs['longitude']
Out[8]: 
0    degrees_northdegrees_east
1                -1.82-142.842
2                 39.87-25.389
3                27.114-37.704

In [9]: obs['latitude'][1]
Out[9]: '-1.82'
</snippet></ROW><ROW><id>16409460</id><snippet>pd.read_csv</snippet></ROW><ROW><id>16409460</id><snippet>import pandas as pd
from StringIO import StringIO

x = '''
longitude,latitude
degrees_east,degrees_north
-142.842,-1.82
-25.389,39.87
-37.704,27.114
'''

content = StringIO(x.strip())

def read_csv(content):
    columns = next(content).strip().split(',')
    units = next(content).strip().split(',')
    obs = pd.read_table(content, sep=",\s*", header=None)
    obs.columns = ['{c} ({u})'.format(c=col, u=unit)
                   for col, unit in zip(columns, units)]
    return obs

obs = read_csv(content)
print(obs)
#    longitude (degrees_east)  latitude (degrees_north)
# 0                  -142.842                    -1.820
# 1                   -25.389                    39.870
# 2                   -37.704                    27.114
print(obs.dtypes)
# longitude (degrees_east)    float64
# latitude (degrees_north)    float64
</snippet></ROW><ROW><id>16409499</id><snippet>import linecache
linecache.clearcache()
</snippet></ROW><ROW><id>16409652</id><snippet>from collections import defaultdict

def topological_sort(dependency_pairs):
    'Sort values subject to dependency constraints'
    num_heads = defaultdict(int)   # num arrows pointing in
    tails = defaultdict(list)      # list of arrows going out
    for h, t in dependency_pairs:
        num_heads[t] += 1
        tails[h].append(t)

    ordered = [h for h in tails if h not in num_heads]
    for h in ordered:
        for t in tails[h]:
            num_heads[t] -= 1
            if not num_heads[t]:
                ordered.append(t)
    cyclic = [n for n, heads in num_heads.iteritems() if heads]
    return ordered, cyclic

if __name__ == '__main__':
    connections = [(3, 7), (6, 5), (4, 6), (5, 3), (7, 8), (1, 2), (2, 1)]
    print topological_sort(connections)
</snippet></ROW><ROW><id>16409652</id><snippet>([4, 6, 5, 3, 7, 8], [1, 2])
</snippet></ROW><ROW><id>16409652</id><snippet>a-&gt;h  b-&gt;g  c-&gt;f  c-&gt;h  d-&gt;i  e-&gt;d  f-&gt;b  f-&gt;g  h-&gt;d  h-&gt;e  i-&gt;b</snippet></ROW><ROW><id>16409652</id><snippet>node  number of incoming edges
----  ------------------------
 a       0
 b       2
 c       0
 d       2
 e       1
 f       1  
 g       2
 h       2
 i       1
</snippet></ROW><ROW><id>16409652</id><snippet>a</snippet></ROW><ROW><id>16409652</id><snippet>c</snippet></ROW><ROW><id>16409652</id><snippet>a</snippet></ROW><ROW><id>16409652</id><snippet>h</snippet></ROW><ROW><id>16409652</id><snippet>h 2</snippet></ROW><ROW><id>16409652</id><snippet>h 1</snippet></ROW><ROW><id>16409652</id><snippet>c</snippet></ROW><ROW><id>16409652</id><snippet>f</snippet></ROW><ROW><id>16409652</id><snippet>h</snippet></ROW><ROW><id>16409652</id><snippet>f 1</snippet></ROW><ROW><id>16409652</id><snippet>f 0</snippet></ROW><ROW><id>16409652</id><snippet>h 1</snippet></ROW><ROW><id>16409652</id><snippet>h 0</snippet></ROW><ROW><id>16409652</id><snippet>f</snippet></ROW><ROW><id>16409652</id><snippet>h</snippet></ROW><ROW><id>16409652</id><snippet>a c f h e d i b g
</snippet></ROW><ROW><id>16409695</id><snippet>find_element_by_link_text
</snippet></ROW><ROW><id>16409856</id><snippet>index = 0</snippet></ROW><ROW><id>16409962</id><snippet>i, a[i] = i + 1, i
</snippet></ROW><ROW><id>16409962</id><snippet>i</snippet></ROW><ROW><id>16409962</id><snippet>a[i]</snippet></ROW><ROW><id>16409962</id><snippet>a[i]</snippet></ROW><ROW><id>16409962</id><snippet>a[1]</snippet></ROW><ROW><id>16409962</id><snippet>a[i]</snippet></ROW><ROW><id>16409962</id><snippet>a[0]</snippet></ROW><ROW><id>16409962</id><snippet>i</snippet></ROW><ROW><id>16409962</id><snippet>&gt;&gt;&gt; a = [0,0,0,0]
&gt;&gt;&gt; i, a[i], i, a[i] = range(4)
&gt;&gt;&gt; a
[1, 0, 3, 0]
</snippet></ROW><ROW><id>16409970</id><snippet>zip</snippet></ROW><ROW><id>16409970</id><snippet>def compare_team(teams):
   lis = []
   for team in teams:
       #zip fetches items from the same index one by one from the lists passed to it
       avg = sum( (x*1.0)/(x+y) for x,y in zip(team[0],team[1]))/ len(team[0])
       lis.append([team[-1],avg])

   lis.sort(key = lambda x:x[1],reverse = True) #reverse sort based on the second item
   return lis



&gt;&gt;&gt; compare_team(([teamA, teamB, teamC]))
[['C', 1.0], ['A', 0.5561904761904761], ['B', 0.5]]
</snippet></ROW><ROW><id>16410041</id><snippet>class Item(models.Model):
""" Represents a device or accessory. """  
    name = models.models.CharField(max_length=50)

class Person(models.Model):
""" Represent a person who has credentials. The person may have
    devices and/or accessories. """ 

    #basic information
    name = models.models.CharField(max_length=50)
    item = models.ManyToManyField(Item)
</snippet></ROW><ROW><id>16410041</id><snippet>item = Item.objects.create(name='itemname')
</snippet></ROW><ROW><id>16410041</id><snippet>person = Person.objects.get(name="the person's name")
person.add(item)
person.save
</snippet></ROW><ROW><id>16410050</id><snippet>write</snippet></ROW><ROW><id>16410050</id><snippet>data[::-1]</snippet></ROW><ROW><id>16410050</id><snippet>def reverse_file(of, rf):
    with open(of) as oldfile:
        with open(rf, "w") as reversefile:
            reversefile.write(oldfile.read()[::-1])
</snippet></ROW><ROW><id>16410050</id><snippet>% cat testdata
line1
line2
line3
% cat reverse_file.py
def reverse_file(of, rf):
    with open(of) as oldfile:
        with open(rf, "w") as reversefile:
            reversefile.write(oldfile.read()[::-1])

if __name__ == "__main__":
    reverse_file("testdata", "newdata")
% python reverse_file.py
% cat newdata

3enil
2enil
1enil
</snippet></ROW><ROW><id>16410098</id><snippet>ans = ['\x03C?01FF00\r']</snippet></ROW><ROW><id>16410098</id><snippet>ans[0].strip()[-4:]</snippet></ROW><ROW><id>16410329</id><snippet>import multiprocessing
def ProcessCreator(pipe):
    pipe.send("hello from other process")

if __name__ == "__main__":
    multiprocessing.freeze_support()
    p1, p2 = multiprocessing.Pipe()
    proc = multiprocessing.Process(target = ProcessCreator, args = (p2,))
    proc.start()
    print p1.recv()
</snippet></ROW><ROW><id>16410473</id><snippet>params</snippet></ROW><ROW><id>16410473</id><snippet>data</snippet></ROW><ROW><id>16410473</id><snippet>Content-Type</snippet></ROW><ROW><id>16410473</id><snippet>json.dumps</snippet></ROW><ROW><id>16410473</id><snippet>import requests

login_payload = {'device_info': {'app-id': 'fc', 'os-type': 'os'}}
authentication = (login, password)  # Anyone who sees your authorization will be able to get this anyway
url = 'http://example.com/login'
response = requests.post(url, data=login_payload, auth=authentication)
</snippet></ROW><ROW><id>16410708</id><snippet>$.post('/request', {inputText: fbNum,key_pressed: fbType.toString()}).done(function (reply) {
    if (/^Count\s*=/.test(reply)) {
        $('#status_table tr #'+eachStatus).empty().append(reply.replace(/Count\s*=\s*/, ''));
    } 
});
</snippet></ROW><ROW><id>16410865</id><snippet>rlist.append(list[i])
</snippet></ROW><ROW><id>16410865</id><snippet>rlist.append(list1[i])
</snippet></ROW><ROW><id>16410865</id><snippet>i</snippet></ROW><ROW><id>16410865</id><snippet>list</snippet></ROW><ROW><id>16410958</id><snippet>def show_most_informative_features(self, n=10):
    strlist = []
    # Determine the most relevant features, and display them.
    cpdist = self._feature_probdist
    # print('Most Informative Features')
    strlist.append('Most Informative Features')

    for (fname, fval) in self.most_informative_features(n):
            def labelprob(l):
                return cpdist[l,fname].prob(fval)
            labels = sorted([l for l in self._labels
                     if fval in cpdist[l,fname].samples()],
                    key=labelprob)
            if len(labels) == 1: continue
            l0 = labels[0]
            l1 = labels[-1]
            if cpdist[l0,fname].prob(fval) == 0:
                ratio = 'INF'
            else:
                ratio = '%8.1f' % (cpdist[l1,fname].prob(fval) /
                          cpdist[l0,fname].prob(fval))
            # print(('%24s = %-14r %6s : %-6s = %s : 1.0' %
            #      (fname, fval, ("%s" % l1)[:6], ("%s" % l0)[:6], ratio)))
            strlist.append(('%24s = %-14r %6s : %-6s = %s : 1.0' %
                          (fname, fval, ("%s" % l1)[:6], ("%s" % l0)[:6], ratio)))

    return strlist

# Useage
list = show_most_informative_features(classifier, 100)
file.writelines(list)
</snippet></ROW><ROW><id>16410989</id><snippet>&gt;&gt;&gt; a = np.array([[1,3,5], [2,4,3], [1,2,0]])
&gt;&gt;&gt; a[a &gt; 1]  = (a[a &gt; 1] - 3) * 5
&gt;&gt;&gt; a
array([[ 1,  0, 10],
       [-5,  5,  0],
       [ 1, -5,  0]])
</snippet></ROW><ROW><id>16410989</id><snippet>a &gt; 1</snippet></ROW><ROW><id>16410989</id><snippet>a</snippet></ROW><ROW><id>16410989</id><snippet>np.where</snippet></ROW><ROW><id>16410989</id><snippet>&gt;&gt;&gt; a = np.array([[1,3,5], [2,4,3], [1,2,0]])
&gt;&gt;&gt; np.where(a &gt; 1, (a-3)*5, a)
array([[ 1,  0, 10],
       [-5,  5,  0],
       [ 1, -5,  0]])
</snippet></ROW><ROW><id>16410989</id><snippet>a &gt; 1</snippet></ROW><ROW><id>16410989</id><snippet>(ax-3)*5</snippet></ROW><ROW><id>16410989</id><snippet>ax</snippet></ROW><ROW><id>16410989</id><snippet>a</snippet></ROW><ROW><id>16411105</id><snippet>FreqDist</snippet></ROW><ROW><id>16411105</id><snippet>dict</snippet></ROW><ROW><id>16411105</id><snippet>csv</snippet></ROW><ROW><id>16411105</id><snippet>from nltk import FreqDist
import csv

fdist = FreqDist("aaa b cccc dd e")

with open("fdist.csv", "wb") as fp:
    writer = csv.writer(fp, quoting=csv.QUOTE_ALL)
    writer.writerows(fdist.items())
</snippet></ROW><ROW><id>16411105</id><snippet>&gt;&gt;&gt; !cat fdist.csv
" ","4"
"c","4"
"a","3"
"d","2"
"b","1"
"e","1"
</snippet></ROW><ROW><id>16411489</id><snippet>import os, fnmatch

def find_files(directory, pattern):
    for root, dirs, files in os.walk(directory):
        for basename in files:
            if fnmatch.fnmatch(basename, pattern):
                filename = os.path.join(root, basename)

                yield filename
</snippet></ROW><ROW><id>16411489</id><snippet>for filename in find_files('/home/', '*.html')
    # do something
</snippet></ROW><ROW><id>16411812</id><snippet>tkinter</snippet></ROW><ROW><id>16411812</id><snippet>mainloop()</snippet></ROW><ROW><id>16411812</id><snippet>tkinter</snippet></ROW><ROW><id>16411812</id><snippet>from Tkinter import *
import ttk

import time
import threading

def foo():
    time.sleep(5) # simulate some work

def start_foo_thread():
    global foo_thread
    foo_thread = threading.Thread(target=foo)
    foo_thread.daemon = True
    progressbar.start()
    foo_thread.start()
    root.after(20, check_foo_thread)

def check_foo_thread():
    if foo_thread.is_alive():
        root.after(20, check_foo_thread)
    else:
        progressbar.stop()

root = Tk()
mainframe = ttk.Frame(root, padding="3 3 12 12")
mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
mainframe.columnconfigure(0, weight=1)
mainframe.rowconfigure(0, weight=1)
progressbar = ttk.Progressbar(mainframe, mode='indeterminate')
progressbar.grid(column=1, row=100, sticky=W)

ttk.Button(mainframe, text="Check",
           command=start_foo_thread).grid(column=1, row=200, sticky=E)

for child in mainframe.winfo_children():
    child.grid_configure(padx=5, pady=5)
root.bind('&lt;Return&gt;', start_foo_thread)

root.mainloop()
</snippet></ROW><ROW><id>16412365</id><snippet>./nltk_data/corpora/brown/
</snippet></ROW><ROW><id>16412365</id><snippet>``/`` These/dts actions/nns should/md serve/vb to/to protect/vb in/in fact/nn and/cc in/in effect/nn the/at court's/nn$ wards/nns from/in undue/jj costs/nns and/cc its/pp$ appointed/vbn and/cc elected/vbn servants/nns from/in unmeritorious/jj criticisms/nns ''/'' ,/, the/at jury/nn said/vbd ./.


Regarding/in Atlanta's/np$ new/jj multi-million-dollar/jj airport/nn ,/, the/at jury/nn recommended/vbd ``/`` that/cs when/wrb the/at new/jj management/nn takes/vbz charge/nn Jan./np 1/cd the/at airport/nn be/be operated/vbn in/in a/at manner/nn that/wps will/md eliminate/vb political/jj influences/nns ''/'' ./.
</snippet></ROW><ROW><id>16412365</id><snippet>categories.pickle
cat.txt
</snippet></ROW><ROW><id>16412365</id><snippet>('ce21', ['hobbies']), ('ce28', ['hobbies']), ('ce29', ['hobbies'])]
</snippet></ROW><ROW><id>16412373</id><snippet>__unicode__</snippet></ROW><ROW><id>16412373</id><snippet>import datetime # standard python datetime module
from django.db import models # Djangos time-zone-related utilities
from django.utils import timezone

class Name(models.Model):
    name = models.CharField(max_length=200)

    def __unicode__(self):  # Python 3: def __str__(self):
        return str(self.name)
</snippet></ROW><ROW><id>16412457</id><snippet>setWindowOpacity</snippet></ROW><ROW><id>16412601</id><snippet>&gt;&gt;&gt; dic = {'i': {'Fisher': -0.2222222222222222, '#': 1}, 'of': {'Fisher': 2.0, '#': 1}, 'will': {'Fisher': 3.5, '#': 1}, 'course': {'Fisher': 4.0, '#': 1}}

&gt;&gt;&gt; sorted(dic.items(),key = lambda x :x[1]['Fisher'],reverse = True)
[('course', {'Fisher': 4.0, '#': 1}),
 ('will', {'Fisher': 3.5, '#': 1}),
 ('of', {'Fisher': 2.0, '#': 1}),
 ('i', {'Fisher': -0.2222222222222222, '#': 1})
]
</snippet></ROW><ROW><id>16412601</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>16412601</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; od = OrderedDict(sorted(dic.items(),key = lambda x :x[1]['Fisher'],reverse = True))
&gt;&gt;&gt; od
OrderedDict([
('course', {'Fisher': 4.0, '#': 1}),
('will', {'Fisher': 3.5, '#': 1}),
('of', {'Fisher': 2.0, '#': 1}),
('i', {'Fisher': -0.2222222222222222, '#': 1})
])
</snippet></ROW><ROW><id>16412601</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; dic = wd[wc][dist][True]
&gt;&gt;&gt; wd[wc][dist][True]= OrderedDict(sorted(dic.items(),key = lambda x :x[1]['Fisher'],reverse = True))
</snippet></ROW><ROW><id>16412607</id><snippet>&gt;&gt;&gt; oct(16877)
'040755'
&gt;&gt;&gt; oct(33188)
'0100644'
</snippet></ROW><ROW><id>16412607</id><snippet>&gt;&gt;&gt; int('040755', 8)
16877
&gt;&gt;&gt; int('0100644', 8)
33188
</snippet></ROW><ROW><id>16413144</id><snippet>from selenium.webdriver.firefox.firefox_profile import FirefoxProfile

    def disableImages(self):
        ## Firefox profile object
        firefoxProfile = FirefoxProfile()

        ## Disable Flash
        firefoxProfile.set_preference('dom.ipc.plugins.enabled.libflashplayer.so',
                                      'false')
        ## Set the modified profile while creating the browser object 
        self.browserHandle = webdriver.Firefox(firefoxProfile)
</snippet></ROW><ROW><id>16413193</id><snippet>foo.pyd</snippet></ROW><ROW><id>16413193</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16413193</id><snippet>foo.dll</snippet></ROW><ROW><id>16413193</id><snippet>.pyd</snippet></ROW><ROW><id>16413193</id><snippet>site-packages</snippet></ROW><ROW><id>16413193</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16413193</id><snippet>.pyd</snippet></ROW><ROW><id>16413193</id><snippet>.pth</snippet></ROW><ROW><id>16413193</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16413365</id><snippet>import ast
ast.literal_eval(data)
</snippet></ROW><ROW><id>16413365</id><snippet>json.load</snippet></ROW><ROW><id>16413365</id><snippet>json.loads</snippet></ROW><ROW><id>16413365</id><snippet>import json
json.loads(query)
</snippet></ROW><ROW><id>16414219</id><snippet>website.csv</snippet></ROW><ROW><id>16414219</id><snippet>facebook.com,a social network website
twitter.com,another social network website
facebook.com,a social website
facebook.com,a website
twitter.com,another network website 
youtube.com,a website like facebook but to share videos
youtube.com,a video sharing website
</snippet></ROW><ROW><id>16414219</id><snippet>&gt;&gt;&gt; from collections import defaultdict, Counter
&gt;&gt;&gt; d = defaultdict(Counter)
&gt;&gt;&gt; with open('website.csv') as f:
        for name, desc in csv.reader(f):
            words = desc.split()
            d[name].update(words)
            d[name]['TOTAL'] += len(words)


&gt;&gt;&gt; d
defaultdict(&lt;class 'collections.Counter'&gt;, {'facebook.com': Counter({'TOTAL': 9, 'a': 3, 'website': 3, 'social': 2, 'network': 1}), 'twitter.com': Counter({'TOTAL': 7, 'website': 2, 'network': 2, 'another': 2, 'social': 1}), 'youtube.com': Counter({'TOTAL': 12, 'a': 2, 'website': 2, 'sharing': 1, 'like': 1, 'videos': 1, 'share': 1, 'but': 1, 'to': 1, 'facebook': 1, 'video': 1})})
</snippet></ROW><ROW><id>16414457</id><snippet>forms.CharField(...,required = False)
</snippet></ROW><ROW><id>16414545</id><snippet>instance</snippet></ROW><ROW><id>16414545</id><snippet>None</snippet></ROW><ROW><id>16414545</id><snippet>instance</snippet></ROW><ROW><id>16414545</id><snippet>None</snippet></ROW><ROW><id>16414545</id><snippet>object.__set__(self, instance, value)
</snippet></ROW><ROW><id>16414545</id><snippet>instance</snippet></ROW><ROW><id>16414545</id><snippet>value</snippet></ROW><ROW><id>16414545</id><snippet>instance</snippet></ROW><ROW><id>16414545</id><snippet>None</snippet></ROW><ROW><id>16414545</id><snippet>__get__</snippet></ROW><ROW><id>16414545</id><snippet>__set__</snippet></ROW><ROW><id>16414603</id><snippet>&gt;&gt;&gt; format(3735928559, 'x')
'deadbeef'
</snippet></ROW><ROW><id>16414807</id><snippet>.replace()</snippet></ROW><ROW><id>16414807</id><snippet>dt.fromtimestamp(ts[0]).replace(microsecond=ts[1])
</snippet></ROW><ROW><id>16414807</id><snippet>&gt;&gt;&gt; from datetime import datetime as dt
&gt;&gt;&gt; ts = (1296770576, 247792)
&gt;&gt;&gt; dt.fromtimestamp(ts[0]).replace(microsecond=ts[1])
datetime.datetime(2011, 2, 3, 23, 2, 56, 247792)
</snippet></ROW><ROW><id>16414807</id><snippet>(seconds, microseconds)</snippet></ROW><ROW><id>16414807</id><snippet>&gt;&gt;&gt; ts_float = float(ts[0]) + float(ts[1]) / 1000000
&gt;&gt;&gt; dt.fromtimestamp(ts_float)
datetime.datetime(2011, 2, 3, 23, 2, 56, 247792)
</snippet></ROW><ROW><id>16414892</id><snippet>try:
    v = {}['a']
except KeyError as e:
    raise ValueError('failed') from e
</snippet></ROW><ROW><id>16414892</id><snippet>Traceback (most recent call last):
  File "t.py", line 2, in &lt;module&gt;
    v = {}['a']
KeyError: 'a'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "t.py", line 4, in &lt;module&gt;
    raise ValueError('failed') from e
ValueError: failed
</snippet></ROW><ROW><id>16414892</id><snippet>from</snippet></ROW><ROW><id>16414892</id><snippet>Traceback (most recent call last):
  File "t.py", line 2, in &lt;module&gt;
    v = {}['a']
KeyError: 'a'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "t.py", line 4, in &lt;module&gt;
    raise ValueError('failed')
ValueError: failed
</snippet></ROW><ROW><id>16414892</id><snippet>class MyError(Exception):
    def __init__(self, message, cause):
        super(MyError, self).__init__(message + u', caused by ' + repr(cause))
        self.cause = cause

try:
    v = {}['a']
except KeyError as e:
    raise MyError('failed', e)
</snippet></ROW><ROW><id>16415253</id><snippet>1.1e-16</snippet></ROW><ROW><id>16415261</id><snippet>StringIO.StringIO()</snippet></ROW><ROW><id>16415311</id><snippet>list.insert</snippet></ROW><ROW><id>16415311</id><snippet>for i,j in dictCaseId.iteritems():
    listItems=[None]*6
    for x,y in j:
        if x=='cond':
            tuppo = y
            listItems[0]=tuppo
        if x=='act':
            tuppo = y
            listItems[1]=tuppo
        if x=='correc':
            tuppo = y
            listItems[2]=tuppo
</snippet></ROW><ROW><id>16415311</id><snippet>&gt;&gt;&gt; lis = [None]*6
&gt;&gt;&gt; lis[1] = "foo"   #change the 2nd element
&gt;&gt;&gt; lis[4] = "bar"   #change the fifth element
&gt;&gt;&gt; lis
[None, 'foo', None, None, 'bar', None]
</snippet></ROW><ROW><id>16415311</id><snippet>&gt;&gt;&gt; lis = [[] for _ in xrange(6)] # don't use  [[]]*6
&gt;&gt;&gt; lis[1].append("foo")
&gt;&gt;&gt; lis[4].append("bar")
&gt;&gt;&gt; lis[1].append("py")
&gt;&gt;&gt; lis
[[], ['foo', 'py'], [], [], ['bar'], []]
</snippet></ROW><ROW><id>16415349</id><snippet>from maya import cmds as mc


sel = mc.ls(sl=True)#here you get the selected vertex
mc.polyMergeVertex(sel)#Merge those vertex

mc.select(sel)#if you run this you will see that the selected vertex are diferent from the ones you made the merge.
</snippet></ROW><ROW><id>16415356</id><snippet>SyncManager.register()</snippet></ROW><ROW><id>16415356</id><snippet>SyncManager.register('set', set)
</snippet></ROW><ROW><id>16415356</id><snippet>from multiprocessing.managers import MakeProxyType

BaseSetProxy = MakeProxyType('BaseSetProxy', (
    '__and__', '__contains__', '__iand__', '__ior__', 
    '__isub__', '__ixor__', '__len__', '__or__', '__rand__', '__ror__', '__rsub__',
    '__rxor__', '__sub__', '__xor__', 'add', 'clear', 'copy', 'difference',
    'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint',
    'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 
    'symmetric_difference_update', 'union', 'update']
    ))
class SetProxy(BaseSetProxy):
    # in-place hooks need to return `self`, specify these manually
    def __iand__(self, value):
        self._callmethod('__iand__', (value,))
        return self
    def __ior__(self, value):
        self._callmethod('__ior__', (value,))
        return self
    def __isub__(self, value):
        self._callmethod('__isub__', (value,))
        return self
    def __ixor__(self, value):
        self._callmethod('__ixor__', (value,))
        return self

SyncManager.register('set', set, SetProxy)
</snippet></ROW><ROW><id>16415595</id><snippet>numpy.argsort</snippet></ROW><ROW><id>16415595</id><snippet>argsortx = np.argsort(x)
x, y, z = x[argsortx], y[argsortx], z[argsortx]
</snippet></ROW><ROW><id>16415907</id><snippet>def print_monthly_totals(input_csv_filename):
    with open(input_csv_filename) as csv_file:
        data = csv_file.readlines()
        print('Rainfall totals for each month')
        for line in data:
            manage_line(line)


def manage_line(line):
        columns = line.split(',')
        month = int(columns[0])
        num_days = int(columns[1])     
        trf = rainfall_total(columns, num_days)  
        print('Month {:2}: {:.1f}'.format(month, trf))  

def rainfall_total(columns, num_days):
    total_rainfall = 0
    for col in columns[2 : 2 + num_days]:
        total_rainfall += float(col)      
    return total_rainfall

print_monthly_totals('rainfalls2011.csv')
</snippet></ROW><ROW><id>16416061</id><snippet>with open('workfile', 'w') as fout:
    fout.write(result)
</snippet></ROW><ROW><id>16416263</id><snippet>if len(set(tuple(i) for i in d.values())) == 1
</snippet></ROW><ROW><id>16416263</id><snippet>1</snippet></ROW><ROW><id>16416661</id><snippet>line = '"RUn.exe O" "" "   2ne, " two! . " "'
import re
regex = re.compile(r'"[^"]*"|[^\s]+')
matches = [el.strip('"') for el in regex.findall(line)]

print '\n'.join(matches)
</snippet></ROW><ROW><id>16416816</id><snippet>import csv
import random

class Node(object):
    _index = 0
    __slots__ = ('id', 'name', 'parent')

    def __init__(self, name, parent=None):
        self.id = Node._index
        Node._index += 1

        self.name = name
        self.parent = parent

def write_roots(roots, writer):
    nodes = []
    for x in xrange(roots):
        node = Node('root{}'.format(x))
        root_nodes.append(node)
        writer.writerow([node.id, node.name, ''])
    return nodes

def write_row(parent_nodes, writer, children):
    nodes = []
    for parent_node in parent_nodes:
        for x in xrange(children):
            node = Node('cat{}-{}'.format(parent_node.id, x), parent_node.id)
            nodes.append(node)
            writer.writerow([node.id, node.name, node.parent])
    return nodes

roots = 1000

with open("data.csv", "wb") as f:
    writer = csv.writer(f)

    nodes = write_roots(roots, writer)

    for i in xrange(9):
        print 'Writing row {}'.format(i + 1)
        nodes = write_row(nodes, writer, random.randrange(1, 11))
</snippet></ROW><ROW><id>16416816</id><snippet>Node</snippet></ROW><ROW><id>16416816</id><snippet>Node._index</snippet></ROW><ROW><id>16416816</id><snippet>__slots__</snippet></ROW><ROW><id>16416816</id><snippet>write_roots</snippet></ROW><ROW><id>16416816</id><snippet>write_row</snippet></ROW><ROW><id>16416816</id><snippet>csv</snippet></ROW><ROW><id>16416816</id><snippet>csv.writer()</snippet></ROW><ROW><id>16416816</id><snippet>randrange(1, 11)</snippet></ROW><ROW><id>16416816</id><snippet>xrange(9)</snippet></ROW><ROW><id>16416816</id><snippet>import collections

def write_roots(roots, writer):
    for x in xrange(roots):
        node = Node('root{}'.format(x))
        writer.writerow([node.id, node.name, ''])
        yield node

def write_row(parent_nodes, writer, children):
    for parent_node in parent_nodes:
        for x in xrange(children):
            node = Node('cat{}-{}'.format(parent_node.id, x), parent_node.id)
            writer.writerow([node.id, node.name, node.parent])
            yield node

roots = 1000

with open("data.csv", "wb") as f:
    writer = csv.writer(f)

    nodes = write_roots(roots, writer)

    expected_total = leaf_nodes = roots
    for i in xrange(9):
        childcount = random.randrange(1, 11)
        leaf_nodes *= childcount
        expected_total += leaf_nodes
        print 'Generating row {} with {} nodes per parent'.format(i + 1, childcount)
        nodes = write_row(nodes, writer, childcount)

    print 'Writing out {} nodes'.format(expected_total)
    # we need to loop over the last `nodes` generator to have everything written to a file:
    collections.deque(nodes, maxlen=0)  # empty generator without storing anything
</snippet></ROW><ROW><id>16416816</id><snippet>randrange()</snippet></ROW><ROW><id>16417014</id><snippet>dict_values = {z[length_arr]:list(z[:length_arr]) for z in zip(*list_of_lists)} 
</snippet></ROW><ROW><id>16417014</id><snippet>dict</snippet></ROW><ROW><id>16417014</id><snippet>dict_values = dict((z[length_arr], list(z[:length_arr])) for z in zip(*list_of_lists))
</snippet></ROW><ROW><id>16417127</id><snippet>.refresh()</snippet></ROW><ROW><id>16417127</id><snippet>.refresh()</snippet></ROW><ROW><id>16417127</id><snippet>account.refresh_balance()
account.save()
</snippet></ROW><ROW><id>16417127</id><snippet>.refresh_balance()</snippet></ROW><ROW><id>16417127</id><snippet>.save()</snippet></ROW><ROW><id>16417355</id><snippet>value = 3
lst = [[0, 3], [1, 2], [2, 1], [3, 0]]
items = [x for x in lst if value in x]
print(items)
#[[0, 3], [3, 0]]
</snippet></ROW><ROW><id>16417355</id><snippet>enumerate</snippet></ROW><ROW><id>16417355</id><snippet>indexes = [n for n, x in enumerate(lst) if value in x]
</snippet></ROW><ROW><id>16417371</id><snippet>line()</snippet></ROW><ROW><id>16417371</id><snippet>line</snippet></ROW><ROW><id>16417371</id><snippet>line</snippet></ROW><ROW><id>16417371</id><snippet>drugbank.txt</snippet></ROW><ROW><id>16417371</id><snippet>drug_id</snippet></ROW><ROW><id>16417371</id><snippet>drug_id</snippet></ROW><ROW><id>16417371</id><snippet>split()</snippet></ROW><ROW><id>16417371</id><snippet>drugbank.txt</snippet></ROW><ROW><id>16417371</id><snippet>import re    
regex = r'#BEGIN_DRUGCARD\s*(.*)\s*# Generic_Name:\s*(.*)'

with open ('drugbank.txt', 'r') as infile:
    drugs = infile.read()
    results = re.findall(regex,drugs)

with open('Drug_output.txt', 'w') as outfile:
    for match in results:
        outfile.write(match[0] + "\n" + match[1] + "\n\n")
</snippet></ROW><ROW><id>16417554</id><snippet>i</snippet></ROW><ROW><id>16417554</id><snippet>(i - 1) // 2</snippet></ROW><ROW><id>16417554</id><snippet>def is_heap(A):
    return all(A[i] &gt;= A[(i - 1) // 2] for i in range(1, len(A)))
</snippet></ROW><ROW><id>16417900</id><snippet>data2_nodes.add(int(datas[0]))
data2_nodes.add(int(datas[1]))
</snippet></ROW><ROW><id>16418021</id><snippet>d={'a':0.2, 'b':0.3}
factor=1.0/sum(d.itervalues())
for k in d:
  d[k] = d[k]*factor
</snippet></ROW><ROW><id>16418021</id><snippet>&gt;&gt;&gt; d
{'a': 0.4, 'b': 0.6}
</snippet></ROW><ROW><id>16418021</id><snippet>d={'a':0.2, 'b':0.3}
factor=1.0/sum(d.itervalues())
normalised_d = {k: v*factor for k, v in d.iteritems() }
</snippet></ROW><ROW><id>16418021</id><snippet>import math
import operator

def really_safe_normalise_in_place(d):
    factor=1.0/math.fsum(d.itervalues())
    for k in d:
        d[k] = d[k]*factor
    key_for_max = max(d.iteritems(), key=operator.itemgetter(1))[0]
    diff = 1.0 - math.fsum(d.itervalues())
    #print "discrepancy = " + str(diff)
    d[key_for_max] += diff

d={v: v+1.0/v for v in xrange(1, 1000001)}
really_safe_normalise_in_place(d)
print math.fsum(d.itervalues())
</snippet></ROW><ROW><id>16418143</id><snippet>range()</snippet></ROW><ROW><id>16418143</id><snippet>&gt;&gt;&gt; print(range(10))
range(0, 10)
</snippet></ROW><ROW><id>16418143</id><snippet>&gt;&gt;&gt; print(list(range(10)))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>16418492</id><snippet>import pickle
</snippet></ROW><ROW><id>16418492</id><snippet>with open('database.db', 'rb') as fh:
    db = pickle.load(fh)
</snippet></ROW><ROW><id>16418492</id><snippet>db = {}
db['new_user'] = 'password'

with open('database.db', 'wb') as fh:
    pickle.dump(db, fh)
</snippet></ROW><ROW><id>16418493</id><snippet>DATABASE_URL</snippet></ROW><ROW><id>16418493</id><snippet>HEROKU_POSTGRESQL_OLIVE_URL</snippet></ROW><ROW><id>16418493</id><snippet>$ heroku pg:promote HEROKU_POSTGRESQL_OLIVE_URL
</snippet></ROW><ROW><id>16418493</id><snippet>import dj_database_url

DATABASES = {
    'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
}
</snippet></ROW><ROW><id>16418493</id><snippet>$ heroku run python manage.py shell
</snippet></ROW><ROW><id>16418493</id><snippet>&gt;&gt;&gt; from django.conf import settings
&gt;&gt;&gt; print settings.DATABASES['default']
</snippet></ROW><ROW><id>16418769</id><snippet>python-magic</snippet></ROW><ROW><id>16418769</id><snippet>import magic
magic.from_buffer(start_data_from_something)
</snippet></ROW><ROW><id>16418769</id><snippet>libmagic</snippet></ROW><ROW><id>16418769</id><snippet>file</snippet></ROW><ROW><id>16418923</id><snippet>pkg_resources</snippet></ROW><ROW><id>16418923</id><snippet>google_api_python_client</snippet></ROW><ROW><id>16418923</id><snippet>setuptools</snippet></ROW><ROW><id>16418923</id><snippet>google_api_python_client</snippet></ROW><ROW><id>16418923</id><snippet>pip</snippet></ROW><ROW><id>16418923</id><snippet>google_api_python_client</snippet></ROW><ROW><id>16419082</id><snippet>{key: {'count':0, 'basePrice': 0} for key in my_keys}
</snippet></ROW><ROW><id>16419082</id><snippet>dict()</snippet></ROW><ROW><id>16419082</id><snippet>dict((key, {'count':0, 'basePrice': 0}) for key in my_keys)
</snippet></ROW><ROW><id>16419082</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>16419640</id><snippet>items= [['F','G'], ['B','C'], ['A','B'], ['C','D'], ['E','F']]
mydict = dict(items)
for prev,next in items:
    if next in mydict:
        mydict[prev] = mydict[next]
        del mydict[next]
print(list(mydict.items()))
</snippet></ROW><ROW><id>16419640</id><snippet>[('A', 'D'), ('E', 'G')]
</snippet></ROW><ROW><id>16419709</id><snippet>pip</snippet></ROW><ROW><id>16419709</id><snippet>/opt/local/bin/pip</snippet></ROW><ROW><id>16419709</id><snippet>/usr/local/share/python</snippet></ROW><ROW><id>16419709</id><snippet>.profile</snippet></ROW><ROW><id>16419709</id><snippet>#PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
#export PATH
</snippet></ROW><ROW><id>16419709</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>16419709</id><snippet>.profile</snippet></ROW><ROW><id>16419709</id><snippet># MacPorts Installer addition on 2012-03-07_at_18:55:26: adding an appropriate PATH variable for use with MacPorts.
#export PATH=/opt/local/bin:/opt/local/sbin:$PATH    # &lt;- comment out
# Set /usr/local/bin explicitly for Homebrew
export PATH=/usr/local/bin:$PATH
</snippet></ROW><ROW><id>16419734</id><snippet>if key in data</snippet></ROW><ROW><id>16419734</id><snippet>def remove_sensitive(data,key):
    if key in data:
         data[key] = "Not Stored!"
    return data
</snippet></ROW><ROW><id>16419734</id><snippet>if key == "Name":</snippet></ROW><ROW><id>16419734</id><snippet>def remove_sensitive(data):
    for key in data:
        if key == "Name":
            data[key] = "Not Stored!"
    return data
</snippet></ROW><ROW><id>16419734</id><snippet>&gt;&gt;&gt; for key in data:
...     print key
...     
URL
Currency
Amount
Name
</snippet></ROW><ROW><id>16419734</id><snippet>def remove_sensitive(data):
    for key in data:
        if key == "Name":
            data[key] = "Not Stored!"
    return data

&gt;&gt;&gt; data = {                   
  "URL" : "http:\/\/www.test.com",
  "Name" : "James",
  "Currency" : "GBP",
  "Amount" : 5.880000000000001,
}
&gt;&gt;&gt; remove_sensitive(data)
{'URL': 'http:\\/\\/www.test.com',
 'Currency': 'GBP',
 'Amount': 5.880000000000001,
 'Name': 'Not Stored!'}
</snippet></ROW><ROW><id>16419805</id><snippet>isinstance</snippet></ROW><ROW><id>16419805</id><snippet>def add(a,b):
    if isinstance(a,int) and isinstance(b,int):
        return a + b
    else:
        raise ValueError
</snippet></ROW><ROW><id>16419805</id><snippet>add(1.0,2)
</snippet></ROW><ROW><id>16419805</id><snippet>3</snippet></ROW><ROW><id>16419805</id><snippet>1.0</snippet></ROW><ROW><id>16419805</id><snippet>isinstance</snippet></ROW><ROW><id>16419805</id><snippet>def read(f):
    if isinstance(f,basestring):
        with open(f) as fin
            return fin.read()
    else:
        return f.read()
</snippet></ROW><ROW><id>16419856</id><snippet>struct</snippet></ROW><ROW><id>16419856</id><snippet>=</snippet></ROW><ROW><id>16419856</id><snippet>4s</snippet></ROW><ROW><id>16419856</id><snippet>l</snippet></ROW><ROW><id>16419856</id><snippet>mreq</snippet></ROW><ROW><id>16419856</id><snippet>struct ip_mreq {
    struct in_addr imr_multiaddr;   /* IP multicast address of group */
    struct in_addr imr_interface;   /* local IP address of interface */
};
</snippet></ROW><ROW><id>16419856</id><snippet>mreq</snippet></ROW><ROW><id>16419856</id><snippet>setsockopt</snippet></ROW><ROW><id>16420006</id><snippet>control</snippet></ROW><ROW><id>16420006</id><snippet>TaskPane</snippet></ROW><ROW><id>16420006</id><snippet>control</snippet></ROW><ROW><id>16420006</id><snippet>QGLWidget</snippet></ROW><ROW><id>16420006</id><snippet>control</snippet></ROW><ROW><id>16420006</id><snippet>paintGL()</snippet></ROW><ROW><id>16420031</id><snippet>%f</snippet></ROW><ROW><id>16420031</id><snippet>%.2f</snippet></ROW><ROW><id>16420031</id><snippet>%.3f</snippet></ROW><ROW><id>16420031</id><snippet>def add(a, b):
    print "ADDING %.2f + %.2f" % (a, b)
    return a + b

number_a = float(raw_input())
number_b = float(raw_input())

add(number_a, number_b)
</snippet></ROW><ROW><id>16420140</id><snippet>start/stop/restart</snippet></ROW><ROW><id>16420140</id><snippet>python myscript.py start
python myscript.py stop
python myscript.py restart
</snippet></ROW><ROW><id>16420140</id><snippet>run</snippet></ROW><ROW><id>16420140</id><snippet>MyDeamon</snippet></ROW><ROW><id>16420140</id><snippet>import sys
import time
from daemon import Daemon

class YourCode:
        def run(self):
         .....

class MyDaemon(Daemon):
        def run(self):
               # Or simply merge your code with MyDaemon.
               your_code = YourCode()
               your_code.run()

if __name__ == "__main__":
        daemon = MyDaemon('/tmp/daemon-example.pid')
        if len(sys.argv) == 2:
                if 'start' == sys.argv[1]:
                        daemon.start()
                elif 'stop' == sys.argv[1]:
                        daemon.stop()
                elif 'restart' == sys.argv[1]:
                        daemon.restart()
                else:
                        print "Unknown command"
                        sys.exit(2)
                sys.exit(0)
        else:
                print "usage: %s start|stop|restart" % sys.argv[0]
                sys.exit(2)
</snippet></ROW><ROW><id>16420213</id><snippet>datetime</snippet></ROW><ROW><id>16420213</id><snippet>df_masked = df[(df.date &gt; '2012-04-01') &amp; (df.date &lt; '2012-04-04')]
</snippet></ROW><ROW><id>16420213</id><snippet>df_masked = df[(df.date &gt; datetime.date(2012,4,1)) &amp; (df.date &lt; datetime.date(2012,4,4))]
</snippet></ROW><ROW><id>16420339</id><snippet>Counter</snippet></ROW><ROW><id>16420339</id><snippet>from collections import Counter
from random import randint

def roll(ndice,nsides=9):
    return [randint(1,nsides) for _ in range(ndice)]

def count_it():
    c = Counter(roll(5))
    return c.most_common(1)[0][1] &gt;= 3

ntries = 100000
print (sum(1 for _ in range(ntries) if count_it())/ntries)
</snippet></ROW><ROW><id>16420339</id><snippet>ntries</snippet></ROW><ROW><id>16420339</id><snippet>ntries</snippet></ROW><ROW><id>16420449</id><snippet>json</snippet></ROW><ROW><id>16420449</id><snippet>import json

for res in results:
    page = result[0]
    print "====={}======".format(page.encode('utf8')
    ans['items'].append({
        'td0':page
    })

print json.dumps(ans)
</snippet></ROW><ROW><id>16420449</id><snippet>json</snippet></ROW><ROW><id>16420449</id><snippet>\x..</snippet></ROW><ROW><id>16420449</id><snippet>&gt;&gt;&gt; print '/\xd7\x9e\xd7\xa4\xd7\xaa-\xd7\x96\xd7\xa8\xd7\x96\xd7\x99\xd7\xa8/\xd7\x92\xd7\xa8\xd7\x99\xd7\xa4\xd7\x90\xd7\xaa/1/'.decode('utf8')
/מפת-זרזיר/גריפאת/1/
</snippet></ROW><ROW><id>16420449</id><snippet>json</snippet></ROW><ROW><id>16420449</id><snippet>&gt;&gt;&gt; ans = {'count': 0, 'items': []}
&gt;&gt;&gt; ans['items'].append('/\xd7\x9e\xd7\xa4\xd7\xaa-\xd7\x96\xd7\xa8\xd7\x96\xd7\x99\xd7\xa8/\xd7\x92\xd7\xa8\xd7\x99\xd7\xa4\xd7\x90\xd7\xaa/1/'.decode('utf8'))
&gt;&gt;&gt; import json
&gt;&gt;&gt; print json.dumps(ans)
{"count": 0, "items": ["/\u05de\u05e4\u05ea-\u05d6\u05e8\u05d6\u05d9\u05e8/\u05d2\u05e8\u05d9\u05e4\u05d0\u05ea/1/"]}
</snippet></ROW><ROW><id>16420449</id><snippet>\u....</snippet></ROW><ROW><id>16420545</id><snippet>A = np.ones((3,4))
B = np.arange(3)
print A * B[:,None]

&gt;&gt;&gt; array([[ 0.,  0.,  0.,  0.],
       [ 1.,  1.,  1.,  1.],
       [ 2.,  2.,  2.,  2.]])

A = np.ones((4,3))
B = np.arange(3)
print A * B[None,:]
&gt;&gt;&gt; array([[ 0.,  1.,  2.],
       [ 0.,  1.,  2.],
       [ 0.,  1.,  2.],
       [ 0.,  1.,  2.]])
</snippet></ROW><ROW><id>16420635</id><snippet>text</snippet></ROW><ROW><id>16420635</id><snippet>#ax = plt.gca()
ttl = ax.title
ttl.set_posistion([.5, 1.05])
#plt.draw()
</snippet></ROW><ROW><id>16420635</id><snippet>1.05</snippet></ROW><ROW><id>16420725</id><snippet>format</snippet></ROW><ROW><id>16420725</id><snippet>%</snippet></ROW><ROW><id>16420725</id><snippet>'%4f %s' % (5, myobj.str('&lt;'))
</snippet></ROW><ROW><id>16420749</id><snippet>&amp;</snippet></ROW><ROW><id>16420749</id><snippet>index_range1 = np.where((data[:,0] &gt; x1) &amp; (data[:,0] &lt; x2))
index_range2 = np.where((data[:,0] &gt; x3) &amp; (data[:,0] &lt; x4))
</snippet></ROW><ROW><id>16420749</id><snippet>where</snippet></ROW><ROW><id>16420749</id><snippet>range1 = data[(data[:,0] &gt; x1) &amp; (data[:,0] &lt; x2)]
range2 = data[(data[:,0] &gt; x3) &amp; (data[:,0] &lt; x4)]
</snippet></ROW><ROW><id>16420749</id><snippet>x, y = data.T
range1 = data[(x &gt; x1) &amp; (x &lt; x2)]
range2 = data[(x &gt; x3) &amp; (x &lt; x4)]
</snippet></ROW><ROW><id>16420749</id><snippet>x</snippet></ROW><ROW><id>16420749</id><snippet>y</snippet></ROW><ROW><id>16420749</id><snippet>x</snippet></ROW><ROW><id>16420749</id><snippet>y</snippet></ROW><ROW><id>16420749</id><snippet>data</snippet></ROW><ROW><id>16420749</id><snippet>range</snippet></ROW><ROW><id>16420749</id><snippet>x</snippet></ROW><ROW><id>16420749</id><snippet>y</snippet></ROW><ROW><id>16420749</id><snippet>data</snippet></ROW><ROW><id>16421079</id><snippet>In [202]: line = "Teacher   =  Small   |1-2|   Student"

In [203]: line = line.split()

In [204]: line[0] += "Short"

In [205]: line[-1] += "Short"

In [206]: line = "  ".join(line)

In [207]: line
Out[207]: 'TeacherShort  =  Small  |1-2|  StudentShort'
</snippet></ROW><ROW><id>16421079</id><snippet>def customize_string(string,add_on):
    if "small" in string:
        line = string.split()
        line[0] += add_on
        line[-1] += add_on
        return "  ".join(line)
    else:
        return string
</snippet></ROW><ROW><id>16421079</id><snippet>In [219]: customize_string(line,"Short")
Out[219]: 'TeacherShort  =  Small  |1-2|  StudentShort'
</snippet></ROW><ROW><id>16421245</id><snippet>np.sum</snippet></ROW><ROW><id>16421245</id><snippet>add.reduce</snippet></ROW><ROW><id>16421245</id><snippet>add.reduce</snippet></ROW><ROW><id>16421245</id><snippet>np.sum</snippet></ROW><ROW><id>16421245</id><snippet>np.sum</snippet></ROW><ROW><id>16421245</id><snippet>numpy/core/fromnumeric.py</snippet></ROW><ROW><id>16421245</id><snippet>np.sum</snippet></ROW><ROW><id>16421245</id><snippet>_methods._sum</snippet></ROW><ROW><id>16421245</id><snippet>_methods.py</snippet></ROW><ROW><id>16421245</id><snippet>def _sum(a, axis=None, dtype=None, out=None, keepdims=False):
    return um.add.reduce(a, axis=axis, dtype=dtype,
                            out=out, keepdims=keepdims)
</snippet></ROW><ROW><id>16421245</id><snippet>um</snippet></ROW><ROW><id>16421245</id><snippet>add</snippet></ROW><ROW><id>16421470</id><snippet>find_all</snippet></ROW><ROW><id>16421470</id><snippet>find_all</snippet></ROW><ROW><id>16421470</id><snippet>.text</snippet></ROW><ROW><id>16421470</id><snippet>re.findall("Hookups: (.*)", open('doc.html').read())
</snippet></ROW><ROW><id>16421652</id><snippet>Meta</snippet></ROW><ROW><id>16421652</id><snippet>models.py</snippet></ROW><ROW><id>16421652</id><snippet>class Aerodrome(models.Model):
    Name = models.CharField(max_length=48)
    Latitude = models.DecimalField(decimal_places=4, max_digits=7)
    Longitude = models.DecimalField(decimal_places=4, max_digits=7)

    class Meta:
        db_table = 'AERODROMES'
</snippet></ROW><ROW><id>16421652</id><snippet>managed</snippet></ROW><ROW><id>16421652</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>16421652</id><snippet>python manage.py flush</snippet></ROW><ROW><id>16421652</id><snippet>class Aerodrome(models.Model):
    # ...

    class Meta:
        db_table = 'AERODROMES'
        managed = False
</snippet></ROW><ROW><id>16421652</id><snippet>syncdb</snippet></ROW><ROW><id>16421707</id><snippet>x *= (x**2)...</snippet></ROW><ROW><id>16421707</id><snippet>x*=</snippet></ROW><ROW><id>16421707</id><snippet>x=</snippet></ROW><ROW><id>16421707</id><snippet>def power(g_base,a,p_mod):
  x=1
  bits = "{0:b}".format(a)
  for i, bit in enumerate(bits):
    if bit=='1': x = (((x**2)*g_base)%p_mod)
    elif bit=='0': x = ((x**2)%p_mod)
  return x%p_mod
</snippet></ROW><ROW><id>16421707</id><snippet>;</snippet></ROW><ROW><id>16421997</id><snippet>raw_input</snippet></ROW><ROW><id>16421997</id><snippet>input</snippet></ROW><ROW><id>16421997</id><snippet>foundTeamFlag = False
teamName = ("Bills", "Dolphins", "Patriots", "Jets", "Ravens", "Bengals", "Browns", "Steelers", "Texans", "Colts", "Jaguars", "Titans", "Broncos", "Chiefs", "Raiders", "Chargers") 
finalScores = ("6-10", "7-9", "12-4", "6-10", "10-6", "10-6", "5-11", "8-8", "12-4", "11-5", "2-14", "6-10", "13-3", "2-14", "4-12", "7-9") 
userInput = raw_input("To find your team's final record for last season please type in their name (Ravens, Texans and etc) :")
for name, score in zip(teamName, finalScores):
    if userInput == name:
        foundTeamFlag = True
        print("The ", userInput, "final record for 2012-2013 was ", score)
        break
if (foundTeamFlag == False):
    print("Oops, check your team name and try again!")
</snippet></ROW><ROW><id>16422116</id><snippet>socket.error</snippet></ROW><ROW><id>16422116</id><snippet>AuthenticationFailedError</snippet></ROW><ROW><id>16422116</id><snippet>BaseException</snippet></ROW><ROW><id>16422116</id><snippet>BaseException</snippet></ROW><ROW><id>16422116</id><snippet>SystemExit</snippet></ROW><ROW><id>16422116</id><snippet>GeneratorExit</snippet></ROW><ROW><id>16422116</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>16422116</id><snippet>Exception</snippet></ROW><ROW><id>16422116</id><snippet>&gt;&gt;&gt; class Test:
...     pass
... 
&gt;&gt;&gt; raise Test()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: exceptions must derive from BaseException
</snippet></ROW><ROW><id>16422116</id><snippet>&gt;&gt;&gt; class Test(object):
...     pass
... 
&gt;&gt;&gt; raise Test()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: exceptions must be old-style classes or derived from BaseException, not Test
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16422116</id><snippet>UnhandledException</snippet></ROW><ROW><id>16422116</id><snippet>Exception</snippet></ROW><ROW><id>16422116</id><snippet>Exception</snippet></ROW><ROW><id>16422116</id><snippet>try:
    yourapi.call_me()
except APIKnownError as error:
    report(error)
except Exception as error:
    pass
    # Or whatever
</snippet></ROW><ROW><id>16422116</id><snippet>warnings</snippet></ROW><ROW><id>16422141</id><snippet>&gt;&gt;&gt; class StatsObject(object):
...     def addScore(self, score):
...         print score
...
&gt;&gt;&gt; file_stats = {"/path/to-something/hyphenated": StatsObject()}
&gt;&gt;&gt; file_stats["/path/to-something/hyphenated"].addScore(10)
&gt;&gt;&gt; file_stats["/another/hyphenated-path"] = 10
10
&gt;&gt;&gt; file_stats["/another/hyphenated-path"].addScore(10)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'int' object has no attribute 'addScore'
</snippet></ROW><ROW><id>16422141</id><snippet>import os

class FileStats(object):
    def addScore(self, score):
        print score

score = 10
file_stats = {}
for root, directories, files in os.walk ("/tmp", followlinks=False):
    for filename in files:
        filePath = os.path.join(root,filename)
        if not filePath in file_stats:
            file_stats[filePath] = FileStats()
            file_stats[filePath].addScore(score)
</snippet></ROW><ROW><id>16422217</id><snippet>import xml.etree.ElementTree as ET

list_of_files = ["tree1.xml", "tree2.xml", ...]

new_tree = ET.Element("a")
i = 1
for file in list_of_files:
  original_tree = ET.parse(file)
  sub_tree = ET.SubElement(new_tree, str(i))
  i += 1
  sub_tree.append (original_tree)
new_tree.write("merged_tree.xml")
</snippet></ROW><ROW><id>16422380</id><snippet>\r</snippet></ROW><ROW><id>16422380</id><snippet>sys.stdout.flush</snippet></ROW><ROW><id>16422380</id><snippet>import sys
import time  # for invoking time.sleep(n_seconds) inside loop

counter = 0
while counter &lt;= 100:
    time.sleep(1)
    counter += 1
    sys.stdout.write("\rTesting (%ss elapsed)" % counter)
    sys.stdout.flush()
</snippet></ROW><ROW><id>16422695</id><snippet>elt.getAttribute("attribute_name")</snippet></ROW><ROW><id>16422695</id><snippet>print(sym.getAttribute("afg"), sym.getAttribute("ID"))
</snippet></ROW><ROW><id>16422695</id><snippet>sym</snippet></ROW><ROW><id>16422695</id><snippet>sym = ag.getElementsByTagName('Instrmt')
for e in sym:
    print e.getAttribute("afg")
</snippet></ROW><ROW><id>16422695</id><snippet>print sym[0].getAttribute("afg")
</snippet></ROW><ROW><id>16422695</id><snippet>e.tagName == 'Instrmt'
</snippet></ROW><ROW><id>16422743</id><snippet>segmentation='none'</snippet></ROW><ROW><id>16422743</id><snippet>oneshotsearch_results = service.jobs.oneshot(search_string,segmentation='none')</snippet></ROW><ROW><id>16422977</id><snippet>df1.columns = df1.columns.droplevel(0)

In [12]: df1
Out[12]:
status    Amber   Red  White  Yellow
SELECTOR
BOTDWG     2652  8453   1577    4636
STRSUB      387  1236    218     595
</snippet></ROW><ROW><id>16422977</id><snippet>df1.plot(kind='bar')
</snippet></ROW><ROW><id>16422977</id><snippet>df1['Red Amber Yellow White'.split()].plot(kind='bar')
# equivalently:  df1[['Red', 'Amber', 'Yellow', 'White']].plot(kind='bar')
</snippet></ROW><ROW><id>16423012</id><snippet>#-*- coding: UTF-8 -*-
from gi.repository import Gtk

class App(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title='ComboBox Test')

        model = Gtk.ListStore(int, str)
        for i in [[1, 'One'], [2, 'Two'], [3, 'Three'], [4, 'Four']]:
            model.append(i)

        combo = Gtk.ComboBox.new_with_model(model)
        renderer = Gtk.CellRendererText()

        combo.set_active(0)
        combo.pack_start(renderer, True)
        combo.add_attribute(renderer, 'text', 1)
        combo.connect('changed', self._changed_cb)

        self.add(combo)

        # Variables
        self.combo = combo
        self.model = model

    def _changed_cb(self, widget, param=None):
        comboiter = self.combo.get_active_iter()
        if comboiter:
            print("Changed to {}".format(
                     self.model.get_value(comboiter, 0)
            ))
        else:
            print("Nothing selected!")

win = App()
win.connect('delete-event', Gtk.main_quit)
win.show_all()
Gtk.main()
</snippet></ROW><ROW><id>16423012</id><snippet>#-*- coding: UTF-8 -*-
from gi.repository import Gtk

class App(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title='ComboBox Test')

        model = Gtk.ListStore(int, str, str)
        for i in [[1, 'One', '#FF0000'], [2, 'Two', '#00FF00'], [3, 'Three', '#0000FF'], [4, 'Four', '#FFFF00']]:
            model.append(i)

        combo = Gtk.ComboBox.new_with_model(model)
        renderer = Gtk.CellRendererText()

        combo.set_active(0)
        combo.pack_start(renderer, True)
        combo.add_attribute(renderer, 'text', 1)
        combo.add_attribute(renderer, 'foreground', 2)
        combo.connect('changed', self._changed_cb)

        self.add(combo)

    def _changed_cb(self, combo, param=None):
        comboiter = combo.get_active_iter()
        if comboiter:
            print("Changed to {}".format(
                     combo.get_model().get_value(comboiter, 0)
            ))
        else:
            print("Nothing selected!")

win = App()
win.connect('delete-event', Gtk.main_quit)
win.show_all()
Gtk.main()
</snippet></ROW><ROW><id>16423307</id><snippet>df.columns = range(4)
</snippet></ROW><ROW><id>16423307</id><snippet>In [10]: pd.MultiIndex.from_tuples(map(lambda X: [float(x) 
                                                  for x in X.split(',')],
                                        df.columns),
                                   names=['lat', 'long'])

Out[11]:
MultiIndex
[(0.36813255, 37.5913675), (1.33731422941, 103.965656679), (1.36110856929, 103.886645147), (10.0001097537, 76.3023939556)

In [12]: df1.columns = Out[11]

In [13]: df1
Out[13]:
lat                          0.368133    1.337314    1.361109    10.000110
long                        37.591367   103.965657  103.886645  76.302394
date
2013-04-02 00:24:14.655000           0           0           0           0
2013-04-02 08:05:39.719000           0           0           0           0
2013-04-02 08:16:56.986000           0           0           0           0
2013-04-02 08:18:00.408000           0           0           0           0
2013-04-02 08:18:38.530000           0           0           0           0
2013-04-02 08:24:02.663000           0           0           0           0
2013-04-02 08:24:27.286000           0           0           0           0
2013-04-02 08:24:46.466000           0           0           0           0
2013-04-02 08:25:32.366000           0           0           0           0
2013-04-02 08:25:52.018000           0           0           0           0
</snippet></ROW><ROW><id>16423447</id><snippet>combinations_with_replacement</snippet></ROW><ROW><id>16423447</id><snippet>set()</snippet></ROW><ROW><id>16423447</id><snippet>values</snippet></ROW><ROW><id>16423447</id><snippet>combos = combinations_with_replacement(a, 4)
product_strings = ['*'.join(c) for c in combos]
products = [eval(s, globals(), values) for s in product_strings]
</snippet></ROW><ROW><id>16423447</id><snippet>eval</snippet></ROW><ROW><id>16423447</id><snippet>a</snippet></ROW><ROW><id>16423447</id><snippet>a = ['from os import', '; system("rm -rf .");']</snippet></ROW><ROW><id>16423764</id><snippet>peakthree = float(peaktwo) - float(peakone)
</snippet></ROW><ROW><id>16423764</id><snippet>raw_input</snippet></ROW><ROW><id>16423764</id><snippet>float</snippet></ROW><ROW><id>16423764</id><snippet>int</snippet></ROW><ROW><id>16423764</id><snippet>def get_next_peak():
    return float(raw_input("Where is the next large peak?: "))

next_peak = []
next_peak.append(get_next_peak())
next_peak.append(get_next_peak())
next_peak.append(next_peak[1] - next_peak[0])
</snippet></ROW><ROW><id>16423791</id><snippet>DataFrame.prod()</snippet></ROW><ROW><id>16423791</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(np.random.randint(1, 10, (5, 3)))
&gt;&gt;&gt; df
   0  1  2
0  7  7  5
1  1  8  6
2  4  8  4
3  2  9  5
4  3  8  7
&gt;&gt;&gt; df.prod(axis=1)
0    245
1     48
2    128
3     90
4    168
dtype: int64
</snippet></ROW><ROW><id>16423791</id><snippet>apply</snippet></ROW><ROW><id>16423791</id><snippet>np.prod</snippet></ROW><ROW><id>16423791</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(np.random.randint(1, 10, (5, 3)))
&gt;&gt;&gt; df
   0  1  2
0  9  3  3
1  8  5  4
2  3  6  7
3  9  8  5
4  7  1  2
&gt;&gt;&gt; df.apply(np.prod, axis=1)
0     81
1    160
2    126
3    360
4     14
dtype: int64
</snippet></ROW><ROW><id>16423805</id><snippet>repr</snippet></ROW><ROW><id>16423805</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; points = np.array([[-468.927,  -11.299,   76.271, -536.723],
...                    [-429.379, -694.915, -214.689,  745.763],
...                    [   0.,       0.,       0.,       0.   ]])
&gt;&gt;&gt; print repr(points)
array([[-468.927,  -11.299,   76.271, -536.723],
       [-429.379, -694.915, -214.689,  745.763],
       [   0.   ,    0.   ,    0.   ,    0.   ]])
</snippet></ROW><ROW><id>16423809</id><snippet>import wx

########################################################################
class LoginPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        self.mainSizer = wx.BoxSizer(wx.VERTICAL)
        userSizer = wx.BoxSizer(wx.HORIZONTAL)
        pwdSizer = wx.BoxSizer(wx.HORIZONTAL)

        userLbl = wx.StaticText(self, label="Username:")
        userSizer.Add(userLbl, 0, wx.CENTER|wx.ALL, 5)
        self.userTxt = wx.TextCtrl(self)
        userSizer.Add(self.userTxt, 1, wx.EXPAND|wx.ALL, 5)

        pwdLbl = wx.StaticText(self, label="Password:")
        pwdSizer.Add(pwdLbl, 0, wx.CENTER|wx.ALL, 5)
        self.pwdTxt = wx.TextCtrl(self, style=wx.TE_PASSWORD)
        pwdSizer.Add(self.pwdTxt, 1, wx.EXPAND|wx.ALL, 5)

        loginBtn = wx.Button(self, label="Login") 
        loginBtn.Bind(wx.EVT_BUTTON, self.onLogin)

        self.mainSizer.Add(userSizer, 0, wx.EXPAND)
        self.mainSizer.Add(pwdSizer, 0, wx.EXPAND)
        self.mainSizer.Add(loginBtn, 0, wx.CENTER|wx.ALL, 5)
        self.SetSizer(self.mainSizer)

    #----------------------------------------------------------------------
    def onLogin(self, event):
        """
        Login or show msg box if password wrong
        """
        username = self.userTxt.GetValue()
        pwd = self.pwdTxt.GetValue()

        if pwd == "password":
            print "logging in"
        else:
            msg = "Wrong password or username!"
            wx.MessageBox(msg, "Error", wx.OK|wx.ICON_INFORMATION)


########################################################################
class LoginFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Login")
        panel = LoginPanel(self)
        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = LoginFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>16423878</id><snippet>style='custom'</snippet></ROW><ROW><id>16423914</id><snippet>`$cmd`
</snippet></ROW><ROW><id>16423948</id><snippet>ret = os.system('cp -fr "%s" "%s"' % (src_abs_path, dst_abs_path))
</snippet></ROW><ROW><id>16423969</id><snippet>urlpatterns = patterns('',
    ...
    (r'^comments/', include('django.contrib.comments.urls')),
    ...
)
</snippet></ROW><ROW><id>16423969</id><snippet>django.contrib.comments.urls.comments</snippet></ROW><ROW><id>16424023</id><snippet>h</snippet></ROW><ROW><id>16424023</id><snippet>!</snippet></ROW><ROW><id>16424023</id><snippet>!h = Http()
</snippet></ROW><ROW><id>16424023</id><snippet>urllib</snippet></ROW><ROW><id>16424023</id><snippet>urllib.urlopen('http://' + url).read()
</snippet></ROW><ROW><id>16424023</id><snippet>requests</snippet></ROW><ROW><id>16424023</id><snippet>import requests
r = requests.get('http://abc.myshopify.com/admin/shop.json', auth=("3b8138fedf8", "1d697a75c7e50"))
data = r.json()  # interpret the response as JSON data.
</snippet></ROW><ROW><id>16424029</id><snippet>patterns = set(line.strip() for line in open(r'C:\Python27\testHex.txt'))
max_pattern_len = max([len(p) for p in patterns])
with open(r'C:\Python27\testHexData.txt') as hex_file:
    prev_segment_part = ''
    for segment in hex_file.read(2000):
         seg = prev_segment_part + segment
         for pattern in list(patterns):
            if pattern in seg:
                print "Found:", pattern
                patterns.remove(pattern)
         prev_segment_part = seg[-max_pattern_len:]
</snippet></ROW><ROW><id>16424553</id><snippet>photo</snippet></ROW><ROW><id>16424553</id><snippet>self.photo = tkinter.PhotoImage(...)
</snippet></ROW><ROW><id>16424639</id><snippet>if (PAB &gt; BAC and PAB&lt; PAC) or (PAB &gt; BAC and PAC&gt;BAC): 
</snippet></ROW><ROW><id>16424639</id><snippet>if (BAC &lt; PAB &lt; PAC) or min(PAB,PAC)&gt;BAC:
</snippet></ROW><ROW><id>16424910</id><snippet>import time
import datetime

class timer():
    def start(self):
        while 1:
            x = datetime.datetime.utcnow()
            print(x.strftime('%M.%S.%f'))
            time.sleep(0.1)

worker = timer()
worker.start()
</snippet></ROW><ROW><id>16424910</id><snippet>while 1</snippet></ROW><ROW><id>16424910</id><snippet>start()</snippet></ROW><ROW><id>16424910</id><snippet>import time
import datetime

def getTime():
    return int(round(time.time() * 1000))

class timer():
    def start(self):
        lastRun = getTime()
        while 1:
            while getTime() - lastRun &lt; 100:
                pass
            lastRun = getTime()
            x = datetime.datetime.utcnow()
            print(x.strftime('%M.%S.%f'))

worker = timer()
worker.start()
</snippet></ROW><ROW><id>16424910</id><snippet>x = datetime.datetime.utcnow()</snippet></ROW><ROW><id>16424910</id><snippet>x</snippet></ROW><ROW><id>16424910</id><snippet>strftime</snippet></ROW><ROW><id>16424910</id><snippet>strftime</snippet></ROW><ROW><id>16424910</id><snippet>%M</snippet></ROW><ROW><id>16424910</id><snippet>%S</snippet></ROW><ROW><id>16424910</id><snippet>%f</snippet></ROW><ROW><id>16424910</id><snippet>time.time() - self.time</snippet></ROW><ROW><id>16424910</id><snippet>datetime.datetime</snippet></ROW><ROW><id>16424910</id><snippet>utcnow()</snippet></ROW><ROW><id>16424910</id><snippet>import time
import datetime

def getTime():
    return int(round(time.time() * 1000))

class timer():
    def __init__(self):
        self.time = datetime.datetime.today()

    def start(self):
        lastRun = getTime()
        while 1:
            while getTime() - lastRun &lt; 100:
                pass
            lastRun = getTime()
            x = datetime.datetime.today() - self.time
            print(x)

worker = timer()
worker.start()
</snippet></ROW><ROW><id>16424910</id><snippet>self.time</snippet></ROW><ROW><id>16424910</id><snippet>now</snippet></ROW><ROW><id>16424910</id><snippet>startup time</snippet></ROW><ROW><id>16424997</id><snippet>function pminus1(n, b)
    c := 2
    for p in primes(b)
        pp := p
        while pp &lt; b
            c := powerMod(c, p, n)
            pp := pp * p
    g := gcd(c-1, n)
    if 1 &lt; g &lt; n return g
    error "factorization failed"
</snippet></ROW><ROW><id>16424997</id><snippet>function pminus1(n, b1, b2)
    c := 2
    for p in primes(b1)
        pp := p
        while pp &lt; b
            c := powerMod(c, p, n)
            pp := pp * p
    g := gcd(c-1, n)
    if 1 &lt; g &lt; n return g
    k := 0
    for q in primes(b1, b2)
        d := q - p
        if d is not in cache
            x := powerMod(c, d, n)
            store d, x in cache
        c := (c * x(d)) % n
        p := q
        k := k + 1
        if k % 100 == 0
            g := gcd(c-1, n)
            if 1 &lt; g &lt; n return g
    g := gcd(c-1, n)
    if 1 &lt; g &lt; n return g
    error "factorization failed"
</snippet></ROW><ROW><id>16425091</id><snippet>import urllib
import httplib

server='myserver.com'
get_data='/link/with/get/data.php?test=1'

data = urllib.urlencode({'a': 2})
h = httplib.HTTPConnection('enfenion.com')
headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}
h.request('POST', get_data, data, headers)
r = h.getresponse()
print r.read()
</snippet></ROW><ROW><id>16425241</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>16425241</id><snippet>import multiprocessing

def myFunction(arguments):
    item1, item2 = arguments
    ...

nb_cpus = 2
pool = multiprocessing.Pool(processes=nb_cpus)
results = pool.map(myFunction, zip(list1, list2))
</snippet></ROW><ROW><id>16425360</id><snippet>re.findall()</snippet></ROW><ROW><id>16425360</id><snippet>@</snippet></ROW><ROW><id>16425360</id><snippet>re.findall(r'(?&lt;=@)\w+', inputtext)
</snippet></ROW><ROW><id>16425360</id><snippet>(?&lt;=..)</snippet></ROW><ROW><id>16425360</id><snippet>@</snippet></ROW><ROW><id>16425360</id><snippet>\w</snippet></ROW><ROW><id>16425360</id><snippet>@</snippet></ROW><ROW><id>16425360</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'(?&lt;=@)\w+', 'This is @lame')
['lame']
&gt;&gt;&gt; re.findall(r'(?&lt;=@)\w+', 'This is lame')
[]
&gt;&gt;&gt; re.findall(r'(?&lt;=@)\w+', 'This is @lame but that is @not')
['lame', 'not']
</snippet></ROW><ROW><id>16425360</id><snippet>.findall()</snippet></ROW><ROW><id>16425360</id><snippet>at_words = re.compile(r'(?&lt;=@)\w+')

at_words.findall(inputtext)
</snippet></ROW><ROW><id>16425360</id><snippet>.findall()</snippet></ROW><ROW><id>16425413</id><snippet>itertools.accumulate()</snippet></ROW><ROW><id>16425413</id><snippet>zip()</snippet></ROW><ROW><id>16425413</id><snippet>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; lst = [(0, 0), (2, 3), (4, 3), (5, 1)]
&gt;&gt;&gt; list(zip(*map(accumulate, zip(*lst))))
[(0, 0), (2, 3), (6, 6), (11, 7)]
</snippet></ROW><ROW><id>16425413</id><snippet>zip()</snippet></ROW><ROW><id>16425413</id><snippet>itertools.accumulate()</snippet></ROW><ROW><id>16425413</id><snippet>zip()</snippet></ROW><ROW><id>16425413</id><snippet>def accumulate(iterator):
    total = 0
    for item in iterator:
        total += item
        yield total
</snippet></ROW><ROW><id>16425442</id><snippet>RedirectStandardError = true</snippet></ROW><ROW><id>16425442</id><snippet>ErrorDataReceived</snippet></ROW><ROW><id>16425463</id><snippet>try:
    ...
except Exception, e:
    print(e)
</snippet></ROW><ROW><id>16425463</id><snippet>try:
    ...
except Exception as e:
    print(e)
</snippet></ROW><ROW><id>16425463</id><snippet>import traceback
try:
    ...
except Exception, e:
    print traceback.format_exc()
</snippet></ROW><ROW><id>16425484</id><snippet>__init__.py</snippet></ROW><ROW><id>16425484</id><snippet>ClassA</snippet></ROW><ROW><id>16425484</id><snippet>ClassB</snippet></ROW><ROW><id>16425484</id><snippet>import mypackage</snippet></ROW><ROW><id>16425484</id><snippet>mypackage.ClassA</snippet></ROW><ROW><id>16425484</id><snippet>from mypackage import ClassA</snippet></ROW><ROW><id>16425484</id><snippet>ClassA</snippet></ROW><ROW><id>16425484</id><snippet>import foo</snippet></ROW><ROW><id>16425484</id><snippet>foo.py</snippet></ROW><ROW><id>16425484</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>16425484</id><snippet>__init__.py</snippet></ROW><ROW><id>16425484</id><snippet>__all__</snippet></ROW><ROW><id>16425484</id><snippet>from mypackage import *</snippet></ROW><ROW><id>16425487</id><snippet>self</snippet></ROW><ROW><id>16425487</id><snippet>tkSimpleDialog.Dialog</snippet></ROW><ROW><id>16425487</id><snippet>validate()</snippet></ROW><ROW><id>16425487</id><snippet>apply()</snippet></ROW><ROW><id>16425487</id><snippet>__init__()</snippet></ROW><ROW><id>16425487</id><snippet>import Tkinter, ttk, tkFileDialog, tkSimpleDialog, time, threading

class App:
    def __init__(self, master):
        self.progress_line(master)

    def progress_line(self, master):
        # the value of "maximum" determines how fast progressbar moves
        self._progressbar = ttk.Progressbar(master, mode='indeterminate', 
                                            maximum=4) # speed of progressbar
        self._progressbar.place(anchor='ne', height="20", width="150", 
                                x="175", y="30")
    @property
    def progressbar(self):
        return self._progressbar # return value of private member

class AppMenu(object):
  def __init__(self, master, progressbar):
      self.master = master
      self.menu_bar()
      self.progressbar = progressbar

  def menu_bar(self):
      self.menu_bar = Tkinter.Menu(self.master)
      self.master.config(menu=self.menu_bar)
      self.create_menu = Tkinter.Menu(self.menu_bar, tearoff=False)
      self.create_menu.add_command(label="do", command=self.do)
      self.menu_bar.add_cascade(label="now", menu=self.create_menu)

  def do(self):
      Dialog(self.master, self.progressbar) # display the dialog box

class Dialog(tkSimpleDialog.Dialog):
    def __init__(self, parent, progressbar):
        self.progressbar = progressbar
        tkSimpleDialog.Dialog.__init__(self, parent, title="Do foo?")

    def apply(self):
        self.start_foo_thread()

    # added dialog methods...
    def start_foo_thread(self):
        self.foo_thread = threading.Thread(target=self.foo)
        self.foo_thread.daemon = True
        self.progressbar.start()
        self.foo_thread.start()
        master.after(20, self.check_foo_thread)

    def check_foo_thread(self):
        if self.foo_thread.is_alive():
            master.after(20, self.check_foo_thread)
        else:
            self.progressbar.stop()

    def foo(self): # some time-consuming function...
        time.sleep(3)


master = Tkinter.Tk()
master.title("Foo runner")
app = App(master)
appmenu = AppMenu(master, app.progressbar)
master.mainloop()
</snippet></ROW><ROW><id>16425759</id><snippet>47 49 46 38 37 61</snippet></ROW><ROW><id>16425759</id><snippet>G..I..F..8..7..a.</snippet></ROW><ROW><id>16425759</id><snippet>47 49 46 38 39 61</snippet></ROW><ROW><id>16425759</id><snippet>G..I..F..8..9..a.</snippet></ROW><ROW><id>16425759</id><snippet>FF D8</snippet></ROW><ROW><id>16425759</id><snippet>FF D9</snippet></ROW><ROW><id>16425759</id><snippet>4A 46 49 46</snippet></ROW><ROW><id>16425759</id><snippet>45 78 69 66</snippet></ROW><ROW><id>16425771</id><snippet>str.rjust(100)</snippet></ROW><ROW><id>16425771</id><snippet>&gt;&gt;&gt; x = [ 'charles dickens','shakespeare','j k rowling']
&gt;&gt;&gt; for name in x:
...     print(name.rjust(50))
... 
                                   charles dickens
                                       shakespeare
                                       j k rowling
</snippet></ROW><ROW><id>16425797</id><snippet>defaultdict</snippet></ROW><ROW><id>16425797</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>16425797</id><snippet>defaultdict</snippet></ROW><ROW><id>16425797</id><snippet>itertools.groupby</snippet></ROW><ROW><id>16425797</id><snippet>from itertools import groupby

user = lambda item: item[0][1]

{user: {key[0]: value for key, value in grouped}
    for user, grouped in groupby(sorted(my_dict.items(), key=user), key=user)}
</snippet></ROW><ROW><id>16425797</id><snippet>&gt;&gt;&gt; {user: {key[0]: value for key, value in grouped}
...     for user, grouped in groupby(sorted(my_dict.items(), key=user), key=user)}
{'user2': {'name': 'bat', 'user': 'baz'}, 'user1': {'name': 'foo', 'user': 'bar'}}
</snippet></ROW><ROW><id>16425797</id><snippet>defaultdict</snippet></ROW><ROW><id>16425797</id><snippet>from collections import defaultdict

output = defaultdict(dict)

for (key, user), value in my_dict.iteritems():
    output[user][key] = value
</snippet></ROW><ROW><id>16425964</id><snippet>run</snippet></ROW><ROW><id>16425964</id><snippet>execute</snippet></ROW><ROW><id>16425964</id><snippet>execute</snippet></ROW><ROW><id>16425964</id><snippet>start</snippet></ROW><ROW><id>16425964</id><snippet>t1.execute(print_time,5,1)
t2.execute(print_time,5,2)
with contextlib.nested(t1, t2):
    pass
</snippet></ROW><ROW><id>16425964</id><snippet>execute</snippet></ROW><ROW><id>16425964</id><snippet>start</snippet></ROW><ROW><id>16425964</id><snippet>start</snippet></ROW><ROW><id>16425964</id><snippet>_f</snippet></ROW><ROW><id>16425964</id><snippet>_f</snippet></ROW><ROW><id>16425964</id><snippet>sleep</snippet></ROW><ROW><id>16425964</id><snippet>sleep</snippet></ROW><ROW><id>16425964</id><snippet>Lock</snippet></ROW><ROW><id>16425964</id><snippet>Event</snippet></ROW><ROW><id>16425964</id><snippet>Barrier</snippet></ROW><ROW><id>16425964</id><snippet>class Mythread(threading.Thread):
    def __init__(self, threadID, name, condition):
        self.condition = condition
        # ... same as before

    def run(self):
        # ... setup before checking for _f

        with self.condition:
            while not self._f:
                self.condition.wait()
        self._f()

        # ... anything else you want
</snippet></ROW><ROW><id>16425964</id><snippet>Condition</snippet></ROW><ROW><id>16425964</id><snippet>notify</snippet></ROW><ROW><id>16425964</id><snippet>Condition</snippet></ROW><ROW><id>16425964</id><snippet>condition = threading.Condition()
t1 = Mythread(1, "Thread1", condition)
t2 = Mythread(2, "Thread2", condition)
with contextlib.nested(t1,t2):
    with condition:
        t1.execute(print_time, 5, 1)
        t2.execute(print_time, 5, 2)
        condition.notify_all()
</snippet></ROW><ROW><id>16425964</id><snippet>Condition</snippet></ROW><ROW><id>16425964</id><snippet>class Mythread(threading.Thread):
    def __init__(self, threadID, name):
        self.condition = Condition()
        # ... same as before

# ...

t1 = Mythread(1, "Thread1")
t2 = Mythread(2, "Thread2")
with contextlib.nested(t1,t2):
    with t1.condition:
        t1.execute(print_time, 5, 1)
        t1.condition.notify()
    with t2.condition:
        t2.execute(print_time, 5, 1)
        t2.condition.notify()
</snippet></ROW><ROW><id>16425964</id><snippet>_f</snippet></ROW><ROW><id>16425964</id><snippet>_f_set</snippet></ROW><ROW><id>16425964</id><snippet>_f</snippet></ROW><ROW><id>16425964</id><snippet>execute(None)</snippet></ROW><ROW><id>16425964</id><snippet>notify</snippet></ROW><ROW><id>16425964</id><snippet>_f</snippet></ROW><ROW><id>16426064</id><snippet>def gen_y_strings(data):
    counter_1 = counter_other = 0
    for item in data:
        if sum(item) == 1:
            counter_1 += 1
            yield "y_{}".format(counter_1)
        else:
            counter_other += 1
            yield "yx{}".format(counter_other)
</snippet></ROW><ROW><id>16426064</id><snippet>for result in gen_y_strings(gcounter):
    print(result)
</snippet></ROW><ROW><id>16426064</id><snippet>y_1
y_2
yx1
yx2
yx3
yx4
yx5
yx6
yx7
</snippet></ROW><ROW><id>16426065</id><snippet>transport.write</snippet></ROW><ROW><id>16426065</id><snippet>transport.write</snippet></ROW><ROW><id>16426194</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.arange(0,10,0.1)

# The lines to plot
y1 = 4 - 2*x
y2 = 3 - 0.5*x
y3 = 1 -x

# The upper edge of polygon (min of lines y1 &amp; y2)
y4 = np.minimum(y1, y2)

# Set y-limit, making neg y-values not show in plot
plt.ylim(0, 5)

# Plotting of lines
plt.plot(x, y1,
         x, y2,
         x, y3)

# Filling between line y3 and line y4
plt.fill_between(x, y3, y4, color='grey', alpha='0.5')
plt.show()
</snippet></ROW><ROW><id>16426200</id><snippet>pyx</snippet></ROW><ROW><id>16426200</id><snippet>pyximport</snippet></ROW><ROW><id>16426200</id><snippet>import pyximport; pyximport.install(pyimport = True)
</snippet></ROW><ROW><id>16426200</id><snippet>reader.py</snippet></ROW><ROW><id>16426200</id><snippet>main.py</snippet></ROW><ROW><id>16426200</id><snippet>test_imports</snippet></ROW><ROW><id>16426200</id><snippet>reader.pyx</snippet></ROW><ROW><id>16426200</id><snippet>writer.pyx</snippet></ROW><ROW><id>16426200</id><snippet>from test_imports import reader, writer
</snippet></ROW><ROW><id>16426200</id><snippet>test_imports</snippet></ROW><ROW><id>16426200</id><snippet>__init__.py</snippet></ROW><ROW><id>16426253</id><snippet>def binPackingFast(words, limit, sep=" "):
    if max(map(len, words)) &gt; limit:
        raise ValueError("limit is too small")
    words.sort(key=len, reverse=True)
    res, part, others = [], words[0], words[1:]
    for word in others:
        if len(sep)+len(word) &gt; limit-len(part):
            res.append(part)
            part = word
        else:
            part += sep+word
    if part:
        res.append(part)
    return res
</snippet></ROW><ROW><id>16426253</id><snippet>/usr/share/dict/words</snippet></ROW><ROW><id>16426253</id><snippet>words-3.0-20.fc18.noarch</snippet></ROW><ROW><id>16426253</id><snippet>limit = max(map(len, words))
sep = ""
</snippet></ROW><ROW><id>16426253</id><snippet>limit *= 1.5</snippet></ROW><ROW><id>16426253</id><snippet>limit *= 2</snippet></ROW><ROW><id>16426253</id><snippet>math.ceil(len(sep.join(words))/limit)</snippet></ROW><ROW><id>16426288</id><snippet>numpy</snippet></ROW><ROW><id>16426288</id><snippet>dtypes</snippet></ROW><ROW><id>16426288</id><snippet>import numpy
myDtype = numpy.dtype([('name', numpy.str_), ('age', numpy.int32), ('score', numpy.float64)])
myData = numpy.empty(10, dtype=myDtype) # Create empty data sets
print myData['age'] # prints all ages
</snippet></ROW><ROW><id>16426288</id><snippet>tofile</snippet></ROW><ROW><id>16426288</id><snippet>with open('myfile.txt', 'wb') as f:
    numpy.ndarray.tofile(myData, f)

with open('myfile.txt', 'rb') as f:
    loadedData = numpy.fromfile(f, dtype=myDtype)
    print loadedData['age']
</snippet></ROW><ROW><id>16426403</id><snippet> validators = {'full_name': UTF8_TYPE,
              'email': UTF8_TYPE,
              'state': UTF8_TYPE,
              'gender': UTF8_TYPE,
              'birth_year': LONG_TYPE}
 sys.create_column_family('TestKeyspace', 'TestCF', super=False,
              comparator_type=UTF8Type,
              key_validation_class=UTF8Type, 
              column_validation_classes=validators)
</snippet></ROW><ROW><id>16426447</id><snippet>__init__</snippet></ROW><ROW><id>16426447</id><snippet>__setattr__</snippet></ROW><ROW><id>16426447</id><snippet>class Foo(object):
    __initialized = False
    def __init__(self, a, b):
        try:
            self.a = a
            self.b = b
            # ...
        finally:
            self.__initialized = True

    def __setattr__(self, attr, value):
        if self.__initialzed:
            print(self.b)
        super(Foo, self).__setattr__(attr, value)
</snippet></ROW><ROW><id>16426447</id><snippet>class AssignableSetattr(type):
    def __new__(mcls, name, bases, attrs):
        def __setattr__(self, attr, value):
            object.__setattr__(self, attr, value)

        init_attrs = dict(attrs)
        init_attrs['__setattr__'] = __setattr__

        init_cls = super(AssignableSetattr, mcls).__new__(mcls, name, bases, init_attrs)

        real_cls = super(AssignableSetattr, mcls).__new__(mcls, name, (init_cls,), attrs)
        init_cls.__real_cls = real_cls

        return init_cls

    def __call__(cls, *args, **kwargs):
        self = super(AssignableSetattr, cls).__call__(*args, **kwargs)
        print "Created", self
        real_cls = cls.__real_cls
        self.__class__ = real_cls
        return self


class Foo(object):
    __metaclass__ = AssignableSetattr

    def __init__(self, a, b):
        self.a = a
        self.b = b
        for key, value in process(a).items():
            setattr(self, key, value)

    def __setattr__(self, attr, value):
        frob(self.b)
        super(Foo, self).__setattr__(attr, value)


def process(a):
    print "processing"
    return {'c': 3 * a}


def frob(x):
    print "frobbing", x


myfoo = Foo(1, 2)
myfoo.d = myfoo.c + 1
</snippet></ROW><ROW><id>16426586</id><snippet>import sys
sys.path.insert(0, "C:/temp/Volpe_Final_Project/ReUsable")
import GRHE_proj  as GRHE
output=GRHE.TimeDeltaToTime(data)
</snippet></ROW><ROW><id>16426648</id><snippet>for part in mail.walk():
    if part.get_content_type() == 'text/plain':
        content = part.get_payload()
        message = re.compile(r'\%(.+?)\%', re.DOTALL).findall(content)
        # This will just substitue the '=\r\' with nothing.
        message = re.sub(r'=\\r\\', '', message)
        print message
</snippet></ROW><ROW><id>16426918</id><snippet>scipy.special.kv</snippet></ROW><ROW><id>16426918</id><snippet>In [9]: x = numpy.array([[1,2,3],[4,5,6]])

In [10]: x
Out[10]: 
array([[1, 2, 3],
       [4, 5, 6]])

In [11]: special.kv(0, x)
Out[11]: 
array([[ 0.42102444,  0.11389387,  0.0347395 ],
       [ 0.01115968,  0.0036911 ,  0.00124399]])
</snippet></ROW><ROW><id>16427074</id><snippet>groupby</snippet></ROW><ROW><id>16427074</id><snippet>0</snippet></ROW><ROW><id>16427074</id><snippet>'0'</snippet></ROW><ROW><id>16427074</id><snippet>&gt;&gt;&gt; grouped = df.reset_index().groupby(((df.index == 0)*1).cumsum())
&gt;&gt;&gt; for n,g in grouped:
...     print g
...     
   index    distkm     modlat     modlon  reallat  reallon         time
0      0  9.325590  42.423024 -70.512309  42.5040 -70.5419  731800.5514
1      1  9.286476  42.416112 -70.519175  42.4956 -70.5539  731800.6319
   index    distkm     modlat     modlon  reallat  reallon         time
2      0  4.456535  42.423877 -70.408784  42.4292 -70.4626  731802.0660
3      1  6.393979  42.405980 -70.367245  42.4297 -70.4382  731802.1556
4      2  7.447289  42.389719 -70.343267  42.4259 -70.4196  731802.2312
   index    distkm     modlat     modlon  reallat  reallon         time
5      0  4.456535  42.423877 -70.408784  42.4292 -70.4626  731802.0660
6      1  6.393979  42.405980 -70.367245  42.4297 -70.4382  731802.1556
7      2  7.447289  42.389719 -70.343267  42.4259 -70.4196  731802.2312
8      3  7.329755  42.370420 -70.340029  42.4134 -70.4077  731802.3208
9      4  6.817408  42.355624 -70.337595  42.3942 -70.4021  731802.3972
</snippet></ROW><ROW><id>16427074</id><snippet>&gt;&gt;&gt; g.set_index("index")
         distkm     modlat     modlon  reallat  reallon         time
index                                                               
0      4.456535  42.423877 -70.408784  42.4292 -70.4626  731802.0660
1      6.393979  42.405980 -70.367245  42.4297 -70.4382  731802.1556
2      7.447289  42.389719 -70.343267  42.4259 -70.4196  731802.2312
3      7.329755  42.370420 -70.340029  42.4134 -70.4077  731802.3208
4      6.817408  42.355624 -70.337595  42.3942 -70.4021  731802.3972
</snippet></ROW><ROW><id>16427150</id><snippet>import scraperwiki
superdictionary = {}
superlist       = []
superdictionary['1'] = {"a":1, "b":"Foo"}
superdictionary['1'].update({"c":"Bar"})
superdictionary['2'] = {"a":2, "b":"Grue", "c":"Gnu"}

for subdictionary in superdictionary:
    superlist.append(superdictionary[subdictionary])
scraperwiki.sqlite.save(["a"], superlist)
</snippet></ROW><ROW><id>16427150</id><snippet>a  b     c
1  Foo   Bar
2  Grue  Gnu
</snippet></ROW><ROW><id>16427169</id><snippet>zipfile = file+'.zip'
</snippet></ROW><ROW><id>16427169</id><snippet>zipfile</snippet></ROW><ROW><id>16427169</id><snippet>output = zipfile.ZipFile(zipfile, 'wb')
</snippet></ROW><ROW><id>16427169</id><snippet>ZipFile</snippet></ROW><ROW><id>16427169</id><snippet>AttributeError: 'str' object has no attribute 'ZipFile'
</snippet></ROW><ROW><id>16427169</id><snippet>zipfile</snippet></ROW><ROW><id>16427169</id><snippet>zip</snippet></ROW><ROW><id>16427169</id><snippet>-0</snippet></ROW><ROW><id>16427169</id><snippet>-9</snippet></ROW><ROW><id>16427169</id><snippet>-9</snippet></ROW><ROW><id>16427169</id><snippet>.tar.bz2</snippet></ROW><ROW><id>16427169</id><snippet>.zip</snippet></ROW><ROW><id>16427169</id><snippet>p7zip</snippet></ROW><ROW><id>16427169</id><snippet>zip</snippet></ROW><ROW><id>16427169</id><snippet>class zipfile.ZipFile(file[, mode[, compression[, allowZip64]]])</snippet></ROW><ROW><id>16427169</id><snippet>write</snippet></ROW><ROW><id>16427169</id><snippet>writestr</snippet></ROW><ROW><id>16427169</id><snippet>zlib.compress</snippet></ROW><ROW><id>16427169</id><snippet>ZipInfo</snippet></ROW><ROW><id>16427169</id><snippet>writestr</snippet></ROW><ROW><id>16427237</id><snippet>def int_to_hex_string(value, bits):
    return "{0:0{1}X}".format(value &amp; ((1&lt;&lt;bits) - 1), bits//4)

if __name__ == '__main__':
  x, y = 280, -54
  print(int_to_hex_string(x, 16), int_to_hex_string(y, 8))
</snippet></ROW><ROW><id>16427392</id><snippet>import lxml.html
import scraperwiki
from unidecode import unidecode
from BeautifulSoup import UnicodeDammit

def decode_html(html_string):
    converted = UnicodeDammit(html_string, isHTML=True)
    if not converted.unicode:
        raise UnicodeDecodeError(
            "Failed to detect encoding, tried [%s]",
            ', '.join(converted.triedEncodings))
    return converted.unicode

html = scraperwiki.scrape("http://www.timeshighereducation.co.uk/world-university-rankings/2012-13/world-ranking/range/001-200")
root = lxml.html.fromstring(decode_html(html))
for tr in root.cssselect("table.ranking tr"):
    if len(tr.cssselect("td.rank")) &gt; 0 and len(tr.cssselect("td.uni")) &gt; 0:
        university = unidecode(tr.cssselect("td.uni")[0].text_content()).strip().title()
        if 'cole' in university:
            print university
</snippet></ROW><ROW><id>16427513</id><snippet>search = advancedsearch()</snippet></ROW><ROW><id>16427513</id><snippet>advancedsearch()</snippet></ROW><ROW><id>16427513</id><snippet>class AdvancedSearchForm(forms.Form):
    choices = forms.ChoiceField (label="choices", choices = ((1, 1),(2, 2),(2, 3)), required= False)
</snippet></ROW><ROW><id>16427513</id><snippet>search = AdvancedSearchForm()
</snippet></ROW><ROW><id>16427540</id><snippet>if cv.WaitKey(10) == 27:
    break
</snippet></ROW><ROW><id>16427540</id><snippet>cv.SetMouseCallback</snippet></ROW><ROW><id>16427540</id><snippet>self.on_mouse</snippet></ROW><ROW><id>16427540</id><snippet>cv.WaitKey()</snippet></ROW><ROW><id>16427540</id><snippet>cv.ShowImage</snippet></ROW><ROW><id>16427540</id><snippet>cv.SetMouseCallback</snippet></ROW><ROW><id>16427540</id><snippet>self.on_mouse</snippet></ROW><ROW><id>16427540</id><snippet>import cv

class CallBack:

    def __init__(self):
        cv.NamedWindow("Camera", cv.CV_WINDOW_AUTOSIZE );
        self.capture = cv.CaptureFromCAM(0)

    def on_mouse(self,event, x, y, flag, param):
        if(event == cv.CV_EVENT_MOUSEMOVE):
           print param
           print x,y

    def callback(self):
        while True:
             src = cv.QueryFrame(self.capture)
             s = "Hello World"
             cv.SetMouseCallback("Camera",self.on_mouse, param = s)
             cv.ShowImage("Camera", src)

             if cv.WaitKey(10) == 27:
                  break

if __name__ == '__main__':
    cb = CallBack()
    cb.callback()
</snippet></ROW><ROW><id>16427584</id><snippet>get_param</snippet></ROW><ROW><id>16427584</id><snippet>__init__</snippet></ROW><ROW><id>16427584</id><snippet>get_param</snippet></ROW><ROW><id>16427744</id><snippet>x=0
if isinstance(a,(dict,list,tuple)):
    x=sum(similarity(i,j) for i in a for j in b)
</snippet></ROW><ROW><id>16427744</id><snippet>x=(sum(similarity(i,j) for i in a for j in b) if isinstance(a,(dict,list,tuple)) 
   else 0)
</snippet></ROW><ROW><id>16427744</id><snippet>try:
   x=sum(similarity(i,j) for i in a for j in b)
except TypeError:
   x=0
</snippet></ROW><ROW><id>16427744</id><snippet>from collections import Iterable
if isinstance(e, Iterable):
   ...
</snippet></ROW><ROW><id>16427744</id><snippet>if isinstance(e, Iterable) and not isinstance(el, str):
   # an iterable that is not a string...
</snippet></ROW><ROW><id>16427939</id><snippet>for file in allFiles:</snippet></ROW><ROW><id>16427939</id><snippet>allFiles</snippet></ROW><ROW><id>16427939</id><snippet>allFiles</snippet></ROW><ROW><id>16427944</id><snippet>#ifdef CDLL_EXPORTS
#define CDLL_API __declspec(dllexport) 
#else
#define CDLL_API __declspec(dllimport) 
#endif

typedef struct testResult_t {
    int testId;
    int TT; 
    double fB;
    double mD;
    double mDL;
    int nS;
    int nL;
} TestResult;

TestResult CDLL_API __stdcall dummyTest();
</snippet></ROW><ROW><id>16427944</id><snippet>#include "stdafx.h"
#include "CDll.h"

TestResult __stdcall dummyTest() {
    TestResult a = {0};
    a.testId = 3;
    return a;
};
</snippet></ROW><ROW><id>16427944</id><snippet>from ctypes import Structure, c_int, c_double, windll

astdll = windll.CDll

class TestResult(Structure):
    _fields_ = [
        ("testId", c_int),
        ("TT", c_int),
        ("fB", c_double),
        ("mD", c_double),
        ("mDL", c_double),
        ("nS", c_int),
        ("nL", c_int)
    ]

astdll.dummyTest.restype = TestResult
result = astdll.dummyTest()
print "Test ID: %d" % (result.testId)
</snippet></ROW><ROW><id>16427944</id><snippet>Test ID: 3</snippet></ROW><ROW><id>16427944</id><snippet>CDLL</snippet></ROW><ROW><id>16427944</id><snippet>windll</snippet></ROW><ROW><id>16427944</id><snippet>CDLL</snippet></ROW><ROW><id>16427944</id><snippet>windll</snippet></ROW><ROW><id>16428125</id><snippet>import time
# Your code as above
time.sleep(30)
</snippet></ROW><ROW><id>16428125</id><snippet>img.save("C:\Users\User\Pictures\test.jpg")</snippet></ROW><ROW><id>16428125</id><snippet>save</snippet></ROW><ROW><id>16428178</id><snippet>input()</snippet></ROW><ROW><id>16428178</id><snippet>python -V</snippet></ROW><ROW><id>16428178</id><snippet>input()</snippet></ROW><ROW><id>16428178</id><snippet>raw_input()</snippet></ROW><ROW><id>16428245</id><snippet>tests</snippet></ROW><ROW><id>16428245</id><snippet>python tests/sources_test.py</snippet></ROW><ROW><id>16428245</id><snippet>test/__init__.py</snippet></ROW><ROW><id>16428245</id><snippet>python -m tests.sources_test</snippet></ROW><ROW><id>16428245</id><snippet>PYTHONPATH=.. python sources_test.py</snippet></ROW><ROW><id>16428245</id><snippet>tests</snippet></ROW><ROW><id>16428245</id><snippet>tests</snippet></ROW><ROW><id>16428245</id><snippet>PYTHONPATH=. python tests/sources_test.py</snippet></ROW><ROW><id>16428245</id><snippet>import __init__</snippet></ROW><ROW><id>16428245</id><snippet>__init__</snippet></ROW><ROW><id>16428245</id><snippet>test</snippet></ROW><ROW><id>16428245</id><snippet>test.sources_test</snippet></ROW><ROW><id>16428245</id><snippet>test</snippet></ROW><ROW><id>16428245</id><snippet>sys.path</snippet></ROW><ROW><id>16428645</id><snippet>prop_list.append({'i': 1, 'props': props,})
</snippet></ROW><ROW><id>16428645</id><snippet>props</snippet></ROW><ROW><id>16428645</id><snippet>props.append(new_prop)
</snippet></ROW><ROW><id>16428645</id><snippet>prop_list[0]</snippet></ROW><ROW><id>16428645</id><snippet>In [23]: x = []

In [24]: y = {'foo': x}

In [25]: y
Out[25]: {'foo': []}

In [26]: z = {'baz': x}

In [27]: x.append('bar')    # x is mutated

In [28]: y                 
Out[28]: {'foo': ['bar']}   # both y and z are affected

In [29]: z
Out[29]: {'baz': ['bar']}
</snippet></ROW><ROW><id>16428645</id><snippet>props</snippet></ROW><ROW><id>16428645</id><snippet>props[:]</snippet></ROW><ROW><id>16428645</id><snippet>prop_list.append({'i': 1, 'props': props[:]})
</snippet></ROW><ROW><id>16428645</id><snippet>props[:]</snippet></ROW><ROW><id>16428645</id><snippet>props</snippet></ROW><ROW><id>16428645</id><snippet>props</snippet></ROW><ROW><id>16428645</id><snippet>props</snippet></ROW><ROW><id>16428645</id><snippet>props</snippet></ROW><ROW><id>16428645</id><snippet>import copy
prop_list.append({'i': 1, 'props': copy.deepcopy(props)})
</snippet></ROW><ROW><id>16428799</id><snippet>name = property(fget=name, fset=set_name)
</snippet></ROW><ROW><id>16428799</id><snippet>name = property(name, set_name)
</snippet></ROW><ROW><id>16428799</id><snippet>property</snippet></ROW><ROW><id>16428799</id><snippet>@</snippet></ROW><ROW><id>16428799</id><snippet>@decorator_expression
def function_name(...):
    ...
</snippet></ROW><ROW><id>16428799</id><snippet>def function_name(...):
    ...
function_name = decorator_expression(function_name)
</snippet></ROW><ROW><id>16428799</id><snippet>decorator_expression</snippet></ROW><ROW><id>16428799</id><snippet>property()</snippet></ROW><ROW><id>16428799</id><snippet>name</snippet></ROW><ROW><id>16428799</id><snippet>name</snippet></ROW><ROW><id>16428799</id><snippet>property</snippet></ROW><ROW><id>16428799</id><snippet>.setter()</snippet></ROW><ROW><id>16428799</id><snippet>@name.setter</snippet></ROW><ROW><id>16428799</id><snippet>.setter()</snippet></ROW><ROW><id>16428799</id><snippet>property</snippet></ROW><ROW><id>16428799</id><snippet>name = property(name)
name = name.setter(set_name)
</snippet></ROW><ROW><id>16428799</id><snippet>name</snippet></ROW><ROW><id>16429299</id><snippet>C:\&gt;Python script.py &lt; train.txt &gt; train.result.txt
</snippet></ROW><ROW><id>16429315</id><snippet>templates</snippet></ROW><ROW><id>16429315</id><snippet>mytable.html</snippet></ROW><ROW><id>16429315</id><snippet>if</snippet></ROW><ROW><id>16429315</id><snippet>table.paginator.num_pages</snippet></ROW><ROW><id>16429315</id><snippet>table.page.number</snippet></ROW><ROW><id>16429428</id><snippet>z</snippet></ROW><ROW><id>16429428</id><snippet>z</snippet></ROW><ROW><id>16429428</id><snippet>z = np.array([14.56, 12.46, 1.56])
</snippet></ROW><ROW><id>16429428</id><snippet>append</snippet></ROW><ROW><id>16429428</id><snippet>def push(a, n):
     a = np.roll(a, 1)
     a[0] = n
     return a
</snippet></ROW><ROW><id>16429428</id><snippet>n</snippet></ROW><ROW><id>16429428</id><snippet>a</snippet></ROW><ROW><id>16429428</id><snippet>def push_sum(a):
     a = np.roll(a, 1)
     a[0] = a.sum()
     return a
</snippet></ROW><ROW><id>16429428</id><snippet>In [19]: z = np.array([14.56, 12.46, 1.56])

In [20]: push(z, 14)
Out[20]: array([ 14.  ,  14.56,  12.46])

In [29]: push_sum(z)
Out[29]: array([ 28.58,  14.56,  12.46])
</snippet></ROW><ROW><id>16429473</id><snippet>awk 'NR&gt;1{s=$2+$3+$4;if(($1 in a &amp;&amp; s&gt;m[$1])|| !($1 in a)){m[$1]=s;a[$1]=$0}}END{for(x in a)print a[x]}' file|sort -V
</snippet></ROW><ROW><id>16429473</id><snippet>gene1   0.000000E+00    0.000000E+00    1.138501E-01
gene2   0.000000E+00    0.000000E+00    9.550272E-02
gene3   0.000000E+00    1.851936E-02    1.019907E-01
gene4   8.212816E-02    0.000000E+00    6.570984E+00
gene5   1.282434E-01    0.000000E+00    6.240799E+00
gene6   2.918929E-01    8.453281E-01    3.387610E+00
gene7   0.000000E+00    1.923038E-01    0.000000E+00
gene8   1.135057E+00    0.000000E+00    2.491100E+00
gene9   7.935625E-01    1.070320E-01    2.439292E+00
gene10  5.046790E+00    0.000000E+00    2.459273E+00
gene11  3.293614E-01    0.000000E+00    2.380152E+00
gene12  0.000000E+00    0.000000E+00    1.474757E-01
gene13  0.000000E+00    0.000000E+00    1.521591E-01
gene14  0.000000E+00    9.968809E-02    8.387166E-01
gene15  0.000000E+00    1.065761E-01    0.000000E+00
</snippet></ROW><ROW><id>16429473</id><snippet>awk 'NR&gt;1{s=$2+$3+$4;
    if(($1 in a &amp;&amp; s&gt;m[$1])|| !($1 in a)){m[$1]=s;a[$1]=$0}
}END{for(x in a)print a[x]}' file|sort -V
</snippet></ROW><ROW><id>16429474</id><snippet>Frame = Tkinter.Frame(root)
Frame.pack()
</snippet></ROW><ROW><id>16429629</id><snippet>N</snippet></ROW><ROW><id>16429629</id><snippet>0</snippet></ROW><ROW><id>16429629</id><snippet>import tornado.ioloop
import tornado.web
from tornado.httpserver import HTTPServer

import time


class MainHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def get(self):
        print("Starting")
        time.sleep(4)
        print("Done!")
        self.write("There now, that wasn't so bad, was it?")
        self.finish("All done")

application = tornado.web.Application([(r'/', MainHandler)])
server = HTTPServer(application)
server.bind(8888)
server.start(0) #replace with N for moar threads!
tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>16429629</id><snippet>os.fork()</snippet></ROW><ROW><id>16430216</id><snippet>textwrap</snippet></ROW><ROW><id>16430216</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; strs = "In my project, I have a bunch of strings that are read in from a file. Most of them, when printed in the command console, exceed 80 characters in length and wrap around, looking ugly."
&gt;&gt;&gt; print textwrap.fill(strs,20)
In my project, I
have a bunch of
strings that are
read in from a file.
Most of them, when
printed in the
command console,
exceed 80 characters
in length and wrap
around, looking
ugly.
</snippet></ROW><ROW><id>16430216</id><snippet>textwrap.fill</snippet></ROW><ROW><id>16430216</id><snippet>&gt;&gt;&gt; textwrap.fill?

Definition: textwrap.fill(text, width=70, **kwargs)
Docstring:
Fill a single paragraph of text, returning a new string.

Reformat the single paragraph in 'text' to fit in lines of no more
than 'width' columns, and return a new string containing the entire
wrapped paragraph.  As with wrap(), tabs are expanded and other
whitespace characters converted to space.  See TextWrapper class for
available keyword args to customize wrapping behaviour.
</snippet></ROW><ROW><id>16430216</id><snippet>regex</snippet></ROW><ROW><id>16430216</id><snippet>import re
strs = """In my project, I have a bunch of strings that are.
Read in from a file.
Most of them, when printed in the command console, exceed 80.
Characters in length and wrap around, looking ugly."""
print '\n'.join(line.strip() for line in re.findall(r'.{1,40}(?:\s+|$)', strs))
"""
Reading a single line at once:
for x in strs.splitlines():
    print '\n'.join(line.strip() for line in re.findall(r'.{1,40}(?:\s+|$)', x))
"""
</snippet></ROW><ROW><id>16430216</id><snippet>In my project, I have a bunch of strings
that are.
Read in from a file.
Most of them, when printed in the
command console, exceed 80.
Characters in length and wrap around,
looking ugly.
</snippet></ROW><ROW><id>16430302</id><snippet>input_list = [4.0, 4.1, 4.2, 4.0, 9.0, 9.4, 8.9, 4.3]

results = {input_list[0]: [input_list[0]]}    # Start with first value
for value in input_list[1:]:         # loop through our entire list after first value
    hi = value * 1.1
    low = value * 0.9
    print("Value: {0}\tHi: {1}\tLow:{2}".format(value, hi, low))
    for existing in results:     # search through our result set
        found_similar = False
        if low &lt; existing &lt; hi:  # if we find a match
            results[existing].append(value)    # we add our value to the list for that set
            found_similar = True
            break
    if not found_similar:        # if we looped through our entire results without a match
        results[value] = [value] # Create a new entry in our results dictionary

for entry in results:
    print(results[entry])
</snippet></ROW><ROW><id>16430302</id><snippet>results = { 9.0: [9.0, 9.4, 8.9],
            4.0: [4.0, 4.1, 4.2, 4.0, 4.3] }
</snippet></ROW><ROW><id>16430302</id><snippet>results</snippet></ROW><ROW><id>16430302</id><snippet>9.0</snippet></ROW><ROW><id>16430356</id><snippet>__pycache__</snippet></ROW><ROW><id>16430680</id><snippet>self.wbk = xlwt.Workbook()
self.sheet = self.wbk.add_sheet(self.timer_window.get_title())
self.sheet.write(0,0,self.time1.get_text())
self.sheet.write(0,1,self.time2.get_text())
self.sheet.write(0,2,self.time3.get_text())
self.wbk.save(self.save.get_filename())
</snippet></ROW><ROW><id>16430680</id><snippet>Workbook</snippet></ROW><ROW><id>16430680</id><snippet>def __init__(self):
    # ... existing code
    self.wbk = xlwt.Workbook()
    self.sheet = self.wbk.add_sheet(self.timer_window.get_title())
    self.next_row = 0

def save_box(self,widget):
    # ... existing code
    if self.response == gtk.RESPONSE_OK:
        self.sheet.write(self.next_row, 0,self.time1.get_text())
        self.sheet.write(self.next_row, 1,self.time2.get_text())
        self.sheet.write(self.next_row, 2,self.time3.get_text())
        self.next_row += 1
</snippet></ROW><ROW><id>16430709</id><snippet>DeprecationWarning</snippet></ROW><ROW><id>16430709</id><snippet>urls.py</snippet></ROW><ROW><id>16430709</id><snippet>import warnings
warnings.simplefilter('error', DeprecationWarning)
</snippet></ROW><ROW><id>16430709</id><snippet>DeprecationWarning</snippet></ROW><ROW><id>16430709</id><snippet>debug=True</snippet></ROW><ROW><id>16430813</id><snippet>subprocess.call([sys.executable, 'yourscript.py'], env=os.environ.copy())
</snippet></ROW><ROW><id>16431279</id><snippet>cmd</snippet></ROW><ROW><id>16431279</id><snippet>'\r'</snippet></ROW><ROW><id>16431279</id><snippet>"\r"</snippet></ROW><ROW><id>16431279</id><snippet>repr(attempt)</snippet></ROW><ROW><id>16431279</id><snippet>str.strip()</snippet></ROW><ROW><id>16431279</id><snippet>str.rstrip("\r")</snippet></ROW><ROW><id>16431279</id><snippet>attempt = input("Type your Password: ").rstrip("\r")
</snippet></ROW><ROW><id>16431380</id><snippet>str.split</snippet></ROW><ROW><id>16431380</id><snippet>&gt;&gt;&gt; strs = "United Kingdom, United Kingdoms, United States, Kingdmo"
&gt;&gt;&gt; strs.split(",")
['United Kingdom', ' United Kingdoms', ' United States', ' Kingdmo']
</snippet></ROW><ROW><id>16431380</id><snippet>str.split</snippet></ROW><ROW><id>16431380</id><snippet>&gt;&gt;&gt; str.split?
Namespace:  Python builtin
Docstring:
S.split([sep [,maxsplit]]) -&gt; list of strings

Return a list of the words in the string S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are removed
from the result.
</snippet></ROW><ROW><id>16431517</id><snippet>)</snippet></ROW><ROW><id>16431517</id><snippet>ang1=math.degrees(math.asin((math.sin(ang2)*v1)/v2))
</snippet></ROW><ROW><id>16431744</id><snippet>x</snippet></ROW><ROW><id>16431744</id><snippet>openfile</snippet></ROW><ROW><id>16431744</id><snippet>x</snippet></ROW><ROW><id>16431744</id><snippet>Text</snippet></ROW><ROW><id>16431744</id><snippet>from Tkinter import *
from tkFileDialog import askopenfilename

def openfile():
    filename = askopenfilename(parent=root)
    f = open(filename)
    x = f.read()
    text.insert(INSERT,(x,))

root = Tk()
menubar = Menu(root)
filemenu = Menu(menubar, tearoff=0)
filemenu.add_command(label="Open", command=openfile)
filemenu.add_separator()
filemenu.add_command(label="Exit", command=root.quit)
menubar.add_cascade(label="File", menu=filemenu)

text = Text(root)
text.pack()

root.config(menu=menubar)
root.mainloop()
</snippet></ROW><ROW><id>16431841</id><snippet>VariableDoesNotExist</snippet></ROW><ROW><id>16431841</id><snippet>None</snippet></ROW><ROW><id>16431841</id><snippet>True</snippet></ROW><ROW><id>16431841</id><snippet>True</snippet></ROW><ROW><id>16431841</id><snippet>True</snippet></ROW><ROW><id>16431841</id><snippet>{"True": True}</snippet></ROW><ROW><id>16431848</id><snippet>f = open(filename)</snippet></ROW><ROW><id>16431848</id><snippet>print f.read()</snippet></ROW><ROW><id>16431848</id><snippet>for line in f:
    print line
</snippet></ROW><ROW><id>16431848</id><snippet>from Tkinter import Frame, Tk, BOTH, Text, Menu, END
import tkFileDialog 

class Example(Frame):

    def __init__(self, parent):
        Frame.__init__(self, parent)   

        self.parent = parent        
        self.initUI()

    def initUI(self):

        self.parent.title("File dialog")
        self.pack(fill=BOTH, expand=1)

        menubar = Menu(self.parent)
        self.parent.config(menu=menubar)

        fileMenu = Menu(menubar)
        fileMenu.add_command(label="Open", command=self.onOpen)
        menubar.add_cascade(label="File", menu=fileMenu)        

        self.txt = Text(self)
        self.txt.pack(fill=BOTH, expand=1)


    def onOpen(self):

        ftypes = [('Python files', '*.py'), ('All files', '*')]
        dlg = tkFileDialog.Open(self, filetypes = ftypes)
        fl = dlg.show()

        if fl != '':
            text = self.readFile(fl)
            self.txt.insert(END, text)

    def readFile(self, filename):

        f = open(filename, "r")
        text = f.read()
        return text


def main():

    root = Tk()
    ex = Example(root)
    root.geometry("300x250+300+300")
    root.mainloop()  


if __name__ == '__main__':
    main()  
</snippet></ROW><ROW><id>16432228</id><snippet>import re
def check_string():
    #no need to pass arguments to function if you're not using them
    w = raw_input("Input the English word: ")

    #open the file using `with` context manager, it'll automatically close the file for you
    with open("example.txt") as f:
        found = False
        for line in f:  #iterate over the file one line at a time(memory efficient)
            if re.search("\b{0}\b".format(w),line):    #if string found is in current line then print it
                print line
                found = True
        if not found:
            print('The translation cannot be found!')

check_string() #now call the function
</snippet></ROW><ROW><id>16432228</id><snippet>regex</snippet></ROW><ROW><id>16432228</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = "foo bar spamm"
&gt;&gt;&gt; "spam" in strs        
True
&gt;&gt;&gt; bool(re.search("\b{0}\b".format("spam"),strs))
False
</snippet></ROW><ROW><id>16432449</id><snippet>C</snippet></ROW><ROW><id>16432449</id><snippet>resultsDirectory = os.path.join('C:','08 May 2013 11 34','myname.png')
                                  ^
</snippet></ROW><ROW><id>16432483</id><snippet>rcParams</snippet></ROW><ROW><id>16432483</id><snippet>toolbar: None
</snippet></ROW><ROW><id>16432483</id><snippet>matplotlibrc</snippet></ROW><ROW><id>16432483</id><snippet>rcParams['toolbar'] = 'None'
</snippet></ROW><ROW><id>16432581</id><snippet>if xsize==1:
        return xpts[0][0]
</snippet></ROW><ROW><id>16432581</id><snippet>float</snippet></ROW><ROW><id>16432627</id><snippet>last_login</snippet></ROW><ROW><id>16432627</id><snippet>last_login,</snippet></ROW><ROW><id>16432644</id><snippet>url = "http://api.nytimes.com/svc/search/v1/article?format=json&amp;query=US+des_facet%3A%5BPOLITICS+AND+GOVERNMENT%5D&amp;api-key=##
</snippet></ROW><ROW><id>16432644</id><snippet>facets</snippet></ROW><ROW><id>16432644</id><snippet>articles</snippet></ROW><ROW><id>16432644</id><snippet>[]</snippet></ROW><ROW><id>16432644</id><snippet>for story in articles["results"]: 
</snippet></ROW><ROW><id>16432832</id><snippet>application = mysite.app.APP()
</snippet></ROW><ROW><id>16433101</id><snippet>isUpper</snippet></ROW><ROW><id>16433101</id><snippet>isUpper(x)</snippet></ROW><ROW><id>16433101</id><snippet>isUpper</snippet></ROW><ROW><id>16433101</id><snippet>x</snippet></ROW><ROW><id>16433101</id><snippet>def letterSplit(strng):
  return (filter(isUpper,strng),filter(isLower,strng)) if strng else 0
</snippet></ROW><ROW><id>16433101</id><snippet>def letterSplit(strng):
    if not strng:
        return 0
    uppers = filter(isUpper,strng)
    lowers = filter(isLower,strng)
    return uppers,lowers
</snippet></ROW><ROW><id>16433398</id><snippet>forloop.counter</snippet></ROW><ROW><id>16433398</id><snippet>forloop.parentloop.counter</snippet></ROW><ROW><id>16433398</id><snippet>list1 = [
    {'list2': [
        {'name': 'd1 o1'},
        {'name': 'd1 o2'}]},
    {'list2': [
        {'name': 'd2 o1'},
        {'name': 'd2 o2'},
        {'name': 'd2 o3'}]},
    {'list2': [
        {'name': 'd3 o1'},
        {'name': 'd3 o2'}]}
]
</snippet></ROW><ROW><id>16433398</id><snippet>&lt;tr&gt;&lt;td&gt;1 &lt;/td&gt;&lt;td&gt; d1 o1 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2 &lt;/td&gt;&lt;td&gt; d1 o2 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3 &lt;/td&gt;&lt;td&gt; d2 o1 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4 &lt;/td&gt;&lt;td&gt; d2 o2 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5 &lt;/td&gt;&lt;td&gt; d2 o3 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6 &lt;/td&gt;&lt;td&gt; d3 o1 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7 &lt;/td&gt;&lt;td&gt; d3 o2 &lt;/td&gt;&lt;/tr&gt;
</snippet></ROW><ROW><id>16433398</id><snippet>flat_list = list({'d': d, 'o': o} for d in list1 for o in d['list2'])
</snippet></ROW><ROW><id>16433398</id><snippet>{% for i in flat_list %}
      &lt;tr&gt;
        &lt;td&gt;{{ forloop.counter}} &lt;/td&gt;
        &lt;td&gt;{{ i.o.name}}&lt;/td&gt;
      &lt;/tr&gt;
{% endfor  %}
</snippet></ROW><ROW><id>16433398</id><snippet>{% load counter_tags %}
{% counter_from 1 as counter %}
{% for d in list1 %}
    {% for o in d.list2 %}
          &lt;tr&gt;
            &lt;td&gt;{{ counter }} &lt;/td&gt;
            &lt;td&gt;{{ o.name}}&lt;/td&gt;
          &lt;/tr&gt;
    {% endfor  %}
{% endfor %}
</snippet></ROW><ROW><id>16433398</id><snippet>templatetags/counter_tags.py</snippet></ROW><ROW><id>16433398</id><snippet>import itertools


class Counter(object):
    def __init__(self, start, step=1):
        self.count = itertools.count(start, step)

    def next(self):
        return self.count.next()

    def __iter__(self):
        return self

    def __unicode__(self):
        return unicode(self.next())


@register.assignment_tag
def counter_from(start, step=1):
    return Counter(int(start), int(step))
</snippet></ROW><ROW><id>16433943</id><snippet>%</snippet></ROW><ROW><id>16433943</id><snippet>?</snippet></ROW><ROW><id>16433943</id><snippet>add_contact = "INSERT INTO contacts (id, name, industry, phone, fax, url, pobox, emirate,ranking) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)"
</snippet></ROW><ROW><id>16433943</id><snippet>?</snippet></ROW><ROW><id>16433943</id><snippet>sqlite3</snippet></ROW><ROW><id>16433943</id><snippet>psycopg2</snippet></ROW><ROW><id>16433943</id><snippet>MySQLdb</snippet></ROW><ROW><id>16433943</id><snippet>%</snippet></ROW><ROW><id>16433953</id><snippet>pd.set_option('display.height', 500)
pd.set_option('display.max_rows', 500)
</snippet></ROW><ROW><id>16433953</id><snippet>pd.describe_option('display')</snippet></ROW><ROW><id>16434344</id><snippet>dict_number = {}  # an empty dictionary

for term,score in list_number:
    dict_number[term] = int(score)
</snippet></ROW><ROW><id>16434344</id><snippet>int x;
x = 1;
</snippet></ROW><ROW><id>16434504</id><snippet>import re
out_info = "value is approximately 34p55"
re.sub(r'(\d+)p(\d+)', r'\1.\2', out_info)
</snippet></ROW><ROW><id>16434504</id><snippet>'value is approximately 34.55'</snippet></ROW><ROW><id>16434504</id><snippet>p</snippet></ROW><ROW><id>16434504</id><snippet>.</snippet></ROW><ROW><id>16434663</id><snippet>django-multilingual-model</snippet></ROW><ROW><id>16435055</id><snippet>json</snippet></ROW><ROW><id>16435055</id><snippet>.loads()</snippet></ROW><ROW><id>16435055</id><snippet>json = json.loads(handle.read())
</snippet></ROW><ROW><id>16435055</id><snippet>data</snippet></ROW><ROW><id>16435055</id><snippet>data = json.loads(handle.read())
if command == 'list':
    print str(data['keys'])
else:
    print str(data[output])
</snippet></ROW><ROW><id>16435055</id><snippet>json</snippet></ROW><ROW><id>16435055</id><snippet>.load()</snippet></ROW><ROW><id>16435055</id><snippet>s</snippet></ROW><ROW><id>16435055</id><snippet>handle</snippet></ROW><ROW><id>16435055</id><snippet>json.load()</snippet></ROW><ROW><id>16435055</id><snippet>data = json.load(handle)
if command == 'list':
    print str(data['keys'])
else:
    print str(data[output])
</snippet></ROW><ROW><id>16435055</id><snippet>.read()</snippet></ROW><ROW><id>16435215</id><snippet>elem</snippet></ROW><ROW><id>16435215</id><snippet>cursor.execute("SELECT PHRASE,COUNT(ID) FROM TEST.NERD WHERE LABEL LIKE '%PRT%' \
    AND ID IN (SELECT DISTINCT ID FROM TEST.NERD WHERE LABEL LIKE '%COND%' \
    AND PHRASE LIKE %s", (elem,))
</snippet></ROW><ROW><id>16435507</id><snippet>local_settings</snippet></ROW><ROW><id>16435507</id><snippet>production_settings</snippet></ROW><ROW><id>16435507</id><snippet>try</snippet></ROW><ROW><id>16435507</id><snippet>except</snippet></ROW><ROW><id>16435507</id><snippet>production_settings</snippet></ROW><ROW><id>16435507</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>16435507</id><snippet>settings.py</snippet></ROW><ROW><id>16435507</id><snippet>PROD_APPS</snippet></ROW><ROW><id>16435507</id><snippet>TypeError</snippet></ROW><ROW><id>16435507</id><snippet>try:
    from local_settings import *
    INSTALLED_APPS += LS_APPS
    MIDDLEWARE_CLASSES += LS_MIDDLEWARE_CLASSES
except ImportError:
    from production_settings import *
    INSTALLED_APPS += PROD_APPS
</snippet></ROW><ROW><id>16435554</id><snippet>refresh</snippet></ROW><ROW><id>16435554</id><snippet>file_count</snippet></ROW><ROW><id>16435554</id><snippet>def refresh():
    global path,dirs,files,file_count,dirList
    path, dirs, files = os.walk(os.path.join(os.getcwd(), 'Input')).next()
    file_count = len(files)
    dirList = os.listdir(path)
</snippet></ROW><ROW><id>16435554</id><snippet>file_count_string = StringVar()
counter = Label(textvariable=file_count_string)
counter.pack()
file_count_string.set("Input Directory: " + str(file_count) + " files.")
</snippet></ROW><ROW><id>16435554</id><snippet>file_count_string.set("Input Directory: " + str(file_count) + " files.")
</snippet></ROW><ROW><id>16435670</id><snippet>val1 = dict(fooblah=[], xy=[])
</snippet></ROW><ROW><id>16435670</id><snippet>exec "val1 = dict(fooblah=[], xy=[])"
</snippet></ROW><ROW><id>16435670</id><snippet>exec</snippet></ROW><ROW><id>16435699</id><snippet>&gt;&gt;&gt; import pydot
&gt;&gt;&gt; pydot.find_graphviz()
{'dot': 'C:\\Program Files (x86)\\Graphviz 2.28\\bin\\dot.exe'} #...
&gt;&gt;&gt; print pydot.find_graphviz.__doc__
"""
Locate Graphviz's executables in the system.

    Tries three methods:

    First: Windows Registry (Windows only)
    This requires Mark Hammond's pywin32 is installed.

    Secondly: Search the path
    It will look for 'dot', 'twopi' and 'neato' in all the directories
    specified in the PATH environment variable.

    Thirdly: Default install location (Windows only)
    It will look for 'dot', 'twopi' and 'neato' in the default install
    location under the "Program Files" directory.

    It will return a dictionary containing the program names as keys
    and their paths as values.

    If this fails, it returns None.
"""
</snippet></ROW><ROW><id>16435722</id><snippet>filename</snippet></ROW><ROW><id>16435722</id><snippet>processed_set = set() #initialize set outside of loop
for filename in filenames: #loop over some collection of filenames
    if filename not in processed_set: #check for non-membership
        processed_set.add(filename) #add to set since filename wasn't in the set
        create_folder(filename) #repositioned based on implied semantics of the name
        createdata(filename)
</snippet></ROW><ROW><id>16435722</id><snippet>createdata</snippet></ROW><ROW><id>16435722</id><snippet>create_folder</snippet></ROW><ROW><id>16435722</id><snippet>def run_once(f):
    f.processed = set()
    def wrapper(filename):
        if filename not in f.processed:
        f.processed.add(filename)
        f(filename)
    return wrapper
</snippet></ROW><ROW><id>16435722</id><snippet>@run_once</snippet></ROW><ROW><id>16435752</id><snippet>In [90]: s[s==12]
Out[90]: 
d    12
dtype: int64
</snippet></ROW><ROW><id>16435752</id><snippet>In [91]: s[s==12].index
Out[91]: Index([d], dtype=object)
</snippet></ROW><ROW><id>16435975</id><snippet>Symbol(..., positive=True)</snippet></ROW><ROW><id>16435975</id><snippet>with assume(...):</snippet></ROW><ROW><id>16435975</id><snippet>Abs</snippet></ROW><ROW><id>16435975</id><snippet>positive</snippet></ROW><ROW><id>16436030</id><snippet>%P</snippet></ROW><ROW><id>16436030</id><snippet>%PART%</snippet></ROW><ROW><id>16436030</id><snippet>%%</snippet></ROW><ROW><id>16436030</id><snippet>for elem in phraseList:
    cursor.execute("""SELECT PHRASE,COUNT(CASEID) FROM TEST.NER WHERE LABEL LIKE '%%PART%%' \
    AND CASEID IN (SELECT DISTINCT CASEID FROM TEST.NER WHERE LABEL LIKE '%%CONDITION%%'\
    AND PHRASE LIKEPHRASE LIKE %s""",(elem,))
</snippet></ROW><ROW><id>16436166</id><snippet>json.loads(request.POST.get('mydata', '{}'))
</snippet></ROW><ROW><id>16436166</id><snippet>data = json.loads(request.POST['mydata']) if 'mydata' in request.POST else {}
</snippet></ROW><ROW><id>16436166</id><snippet>if 'mydata' in request.POST:
    data = json.loads(request.POST['mydata'])
else:
    data = {} # or data = None
</snippet></ROW><ROW><id>16436254</id><snippet>setdefault()</snippet></ROW><ROW><id>16436254</id><snippet>value</snippet></ROW><ROW><id>16436254</id><snippet>0</snippet></ROW><ROW><id>16436254</id><snippet>KeyError</snippet></ROW><ROW><id>16436254</id><snippet>&gt;&gt;&gt; d = {'a': 1}
&gt;&gt;&gt; d['b']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'b'
&gt;&gt;&gt; d.setdefault('b',2)
2
&gt;&gt;&gt; d
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>16436254</id><snippet>stats[value] = stats[value] + 1</snippet></ROW><ROW><id>16436380</id><snippet>&gt;&gt;&gt; a = [[5,5,5,4,6],[3,2,6,6,5],[7,2,2,5,6]]

&gt;&gt;&gt; minn = min(min(x) for x in a) #find the min value

&gt;&gt;&gt; [(i,j) for i,x in enumerate(a) for j,y in enumerate(x) if y==minn]
[(1, 1), (2, 1), (2, 2)]
</snippet></ROW><ROW><id>16436691</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; my_src_str = '"""hello"""'
&gt;&gt;&gt; ast.literal_eval(my_src_str)
'hello'
</snippet></ROW><ROW><id>16436912</id><snippet>&gt;&gt;&gt; d = {"foo":0, "spam":0}
&gt;&gt;&gt; test = "This is a string with many words, including foo and bar"
&gt;&gt;&gt; any(word in d for word in test.split())
True
</snippet></ROW><ROW><id>16436912</id><snippet>"This is foo."</snippet></ROW><ROW><id>16436912</id><snippet>foo</snippet></ROW><ROW><id>16436912</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; test = "This is foo."
&gt;&gt;&gt; any(word in d for word in re.findall("[A-Za-z0-9]+", test))
</snippet></ROW><ROW><id>16437103</id><snippet>numpy.interp</snippet></ROW><ROW><id>16437103</id><snippet>xp</snippet></ROW><ROW><id>16437103</id><snippet>xp</snippet></ROW><ROW><id>16437103</id><snippet>np.all(np.diff(xp) &gt; 0)
</snippet></ROW><ROW><id>16437103</id><snippet>f(x)=-38</snippet></ROW><ROW><id>16437103</id><snippet>p(x)</snippet></ROW><ROW><id>16437103</id><snippet>p(x)-(-38)</snippet></ROW><ROW><id>16437110</id><snippet>for rec in your_list_of_dictionary:
    print rec #this rec variable contains dictionary
</snippet></ROW><ROW><id>16437110</id><snippet>daily_transaction_master = self.pool.get('bpl.daily.transaction.master')
for record in work_update_obj.selected_tea_workers_update_line_ids:
    vals = {'bpl_company_id': record.work_id.bpl_company_id.id, 'bpl_estate_id': record.work_id.bpl_estate_id.id, 'bpl_division_id': record.work_id.bpl_division_id.id, 'worker_id': record.worker_id.id, 'date': record.work_id.offered_date, 'type':'tea', 'names': 6.00, 'output':record.tea_total_kgs, 'over_kgs':2, 'scrap':3, 'pss':30.00}
    daily_transaction_master.create(cr, uid, vals, context=context)`
</snippet></ROW><ROW><id>16437297</id><snippet>itertools.product</snippet></ROW><ROW><id>16437297</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; strs = "123**7*9"
&gt;&gt;&gt; c = strs.count("*")              #count the number of "*"'s
&gt;&gt;&gt; strs = strs.replace("*","{}")    #replace '*'s with '{}' for formatting
&gt;&gt;&gt; for x in product("0123456789",repeat=c):
...     print strs.format(*x)               #use `int()` to get an integer

12300709
12300719
12300729
12300739
12300749
12300759
12300769
12300779
12300789
12300799
....
</snippet></ROW><ROW><id>16437728</id><snippet>import numpy as np

mat = np.arange(16.0).reshape((4,4))

mat_out = np.zeros_like(mat)

mat_out[mat &lt; 6] = 0.2 * mat[mat &lt; 6]  # using a conditional for indexing
# or use a variable for the boolean 'masking' index array
mask1 = np.logical_and(mat &gt;= 6, mat &lt; 10)
mat_out[mask1] = 0.3 * mat[mask1]
mask2 = mat &gt;= 10
mat_out[mask2] = 0.5 * mat[mask2]

print mat
print mat &lt; 6
print mask1
print mat_out
</snippet></ROW><ROW><id>16437780</id><snippet>import itertools as it

class ColourGun(object):

    def __init__(self):
        self._colourgen = it.cycle(['predefined_colour1', 'predefined_colour2', 'predefined_colour3'])

    def load(self, colours):
        self._colourgen = it.cycle(colours)

    @property
    def colour(self):
        return next(self._colourgen)

    def __str__(self):
      return self.colour

gun = ColourGun()
print gun
print gun
print gun
gun.load(['potato', 'spam', 'eggs'])
print gun
print gun
</snippet></ROW><ROW><id>16438100</id><snippet>getattr()</snippet></ROW><ROW><id>16438100</id><snippet>def do_stuff(self, attr):
    for item in self._my_objects:
        print getattr(item, attr)
</snippet></ROW><ROW><id>16438100</id><snippet>self.do_stuff('b')</snippet></ROW><ROW><id>16438100</id><snippet>b</snippet></ROW><ROW><id>16438100</id><snippet>self.my_objects</snippet></ROW><ROW><id>16438100</id><snippet>getattr(x, 'foobar')</snippet></ROW><ROW><id>16438100</id><snippet>x.foobar</snippet></ROW><ROW><id>16438167</id><snippet>urls = [key.generate_url(100) for key in keys]
</snippet></ROW><ROW><id>16438167</id><snippet>new_urls = [urllib.quote(url) for url in urls]
</snippet></ROW><ROW><id>16438285</id><snippet>abbr</snippet></ROW><ROW><id>16438285</id><snippet>text</snippet></ROW><ROW><id>16438285</id><snippet>def find_acronym():

    found = False

    # if search term in database returns acronym and expansion
    for abbr, text in acronyms.items():
        if abbr == search_analyte.get():
            expansion.insert(0.0,'{0:&gt;6}: {1: &lt;10}\n'.format(abbr, text))
            found = True
        elif str(search_analyte.get()) in text:
            expansion.insert(0.0,'{0:&gt;6}: {1: &lt;10}\n'.format(abbr, text))
            found = True

    # if search term not in database    
    if not found:
        expansion.insert(0.0,'"{0}"{1} \n {2}\n'.format(search_analyte.get(),' is  not in the database.','Add,if appropriate'))
</snippet></ROW><ROW><id>16438645</id><snippet>PyThreadState</snippet></ROW><ROW><id>16438645</id><snippet>tick_counter</snippet></ROW><ROW><id>16438645</id><snippet>tick_counter</snippet></ROW><ROW><id>16438682</id><snippet>&gt;&gt;&gt; m = ('ring', 5)
</snippet></ROW><ROW><id>16438682</id><snippet>&gt;&gt;&gt; print "%s %f" % m
ring 5.000000
</snippet></ROW><ROW><id>16438682</id><snippet>%f</snippet></ROW><ROW><id>16438682</id><snippet>float</snippet></ROW><ROW><id>16438682</id><snippet>%d</snippet></ROW><ROW><id>16438682</id><snippet>int</snippet></ROW><ROW><id>16438682</id><snippet>&gt;&gt;&gt; print "%s %d" % m
ring 5
</snippet></ROW><ROW><id>16438781</id><snippet>print</snippet></ROW><ROW><id>16438781</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print('hel', end=''); print('lo', end='')
hello
</snippet></ROW><ROW><id>16438781</id><snippet>end</snippet></ROW><ROW><id>16438781</id><snippet>print</snippet></ROW><ROW><id>16438781</id><snippet>'\n'</snippet></ROW><ROW><id>16438781</id><snippet>''</snippet></ROW><ROW><id>16439280</id><snippet>In [121]: arr1 = np.array([dt.datetime(2013, 1, 1), dt.datetime(2013, 1, 1), dt.datetime(2013, 1, 2)]) 

In [122]: arr2 = np.array([1, 2, 3]) 

In [123]: df = pd.DataFrame({'date': arr1, 'value': arr2})

In [124]: df
Out[124]: 
                 date  value
0 2013-01-01 00:00:00      1   
1 2013-01-01 00:00:00      2   
2 2013-01-02 00:00:00      3   

In [125]: df.drop_duplicates('date')
Out[125]: 
                 date  value
0 2013-01-01 00:00:00      1   
2 2013-01-02 00:00:00      3 
</snippet></ROW><ROW><id>16439280</id><snippet>In [74]: now = dt.datetime.utcnow()
In [75]: datetimes = [now - dt.timedelta(hours=6) * i for i in range(10)]

In [76]: datetimes
Out[76]:
[datetime.datetime(2013, 5, 8, 16, 47, 32, 60500),
 datetime.datetime(2013, 5, 8, 10, 47, 32, 60500),
 datetime.datetime(2013, 5, 8, 4, 47, 32, 60500),
 datetime.datetime(2013, 5, 7, 22, 47, 32, 60500),
 datetime.datetime(2013, 5, 7, 16, 47, 32, 60500),
 datetime.datetime(2013, 5, 7, 10, 47, 32, 60500),
 datetime.datetime(2013, 5, 7, 4, 47, 32, 60500),
 datetime.datetime(2013, 5, 6, 22, 47, 32, 60500),
 datetime.datetime(2013, 5, 6, 16, 47, 32, 60500),
 datetime.datetime(2013, 5, 6, 10, 47, 32, 60500)]
</snippet></ROW><ROW><id>16439280</id><snippet>DataFrame</snippet></ROW><ROW><id>16439280</id><snippet>datetimes</snippet></ROW><ROW><id>16439280</id><snippet>date</snippet></ROW><ROW><id>16439280</id><snippet>In [81]: df = pd.DataFrame(datetimes, columns=['date'])

In [82]: df
Out[82]:
                        date
0 2013-05-08 16:47:32.060500
1 2013-05-08 10:47:32.060500
2 2013-05-08 04:47:32.060500
3 2013-05-07 22:47:32.060500
4 2013-05-07 16:47:32.060500
5 2013-05-07 10:47:32.060500
6 2013-05-07 04:47:32.060500
7 2013-05-06 22:47:32.060500
8 2013-05-06 16:47:32.060500
9 2013-05-06 10:47:32.060500
</snippet></ROW><ROW><id>16439280</id><snippet>DataFrame</snippet></ROW><ROW><id>16439280</id><snippet>date</snippet></ROW><ROW><id>16439280</id><snippet>In [83]: df = df.sort('date')
</snippet></ROW><ROW><id>16439280</id><snippet>index</snippet></ROW><ROW><id>16439280</id><snippet>In [85]: df['index'] = df['date'].apply(lambda x:x.day)

In [86]: df
Out[86]:
                        date  index
9 2013-05-06 10:47:32.060500      6
8 2013-05-06 16:47:32.060500      6
7 2013-05-06 22:47:32.060500      6
6 2013-05-07 04:47:32.060500      7
5 2013-05-07 10:47:32.060500      7
4 2013-05-07 16:47:32.060500      7
3 2013-05-07 22:47:32.060500      7
2 2013-05-08 04:47:32.060500      8
1 2013-05-08 10:47:32.060500      8
0 2013-05-08 16:47:32.060500      8
</snippet></ROW><ROW><id>16439280</id><snippet>index</snippet></ROW><ROW><id>16439280</id><snippet>SELECT FIRST(*) FROM table GROUP BY table.index</snippet></ROW><ROW><id>16439280</id><snippet>In [87]: df = df.groupby('index').first()
In [88]: df
Out[88]: 
                            date
index                           
6     2013-05-06 10:47:32.060500
7     2013-05-07 04:47:32.060500
8     2013-05-08 04:47:32.060500
</snippet></ROW><ROW><id>16439280</id><snippet>In [91]: df.index.values
Out[91]: array([6, 7, 8])
</snippet></ROW><ROW><id>16439280</id><snippet>In [92]: df['date'].values
Out[92]: 
array(['2013-05-06T18:47:32.060500000+0800',
   '2013-05-07T12:47:32.060500000+0800',
   '2013-05-08T12:47:32.060500000+0800'], dtype='datetime64[ns]')
</snippet></ROW><ROW><id>16439408</id><snippet>['1', '2']</snippet></ROW><ROW><id>16439408</id><snippet>&gt;&gt;&gt; ['1', '2'] + random.sample(arr[2:], 7)
['1', '2', '6', '3', '8', '7', '9', '5', '4']
</snippet></ROW><ROW><id>16439588</id><snippet>new</snippet></ROW><ROW><id>16439588</id><snippet>old</snippet></ROW><ROW><id>16439588</id><snippet>tmp</snippet></ROW><ROW><id>16439588</id><snippet>tmp</snippet></ROW><ROW><id>16439588</id><snippet>\n</snippet></ROW><ROW><id>16439588</id><snippet>tmp</snippet></ROW><ROW><id>16439588</id><snippet>newtext</snippet></ROW><ROW><id>16439588</id><snippet>tmp</snippet></ROW><ROW><id>16439588</id><snippet>\n</snippet></ROW><ROW><id>16439588</id><snippet>tmp</snippet></ROW><ROW><id>16439588</id><snippet>tmp</snippet></ROW><ROW><id>16439588</id><snippet>tmp</snippet></ROW><ROW><id>16439588</id><snippet>old</snippet></ROW><ROW><id>16439588</id><snippet>with open('oldfile') as old:
    with open('newfile') as new:
        with open('tmpfile') as tmp:
            …
</snippet></ROW><ROW><id>16439596</id><snippet>PyQt4.QtCore.QString()</snippet></ROW><ROW><id>16439596</id><snippet>unicode()</snippet></ROW><ROW><id>16439596</id><snippet>QString()</snippet></ROW><ROW><id>16439596</id><snippet>def changeOpgave(self, opgaveName):
    opgaveName = unicode(opgaveName)
</snippet></ROW><ROW><id>16439596</id><snippet>QString()</snippet></ROW><ROW><id>16439596</id><snippet>opgaveName</snippet></ROW><ROW><id>16439596</id><snippet>.update()</snippet></ROW><ROW><id>16439596</id><snippet>Programmer = {
    u'v': ["1","2x","3","4","5"],
    u'x': ["1","2x","3","4","5"],
    u'y': ["1","2x","3","4","5"],
    u'z': ["1","2x","3","4","5"],
    u'æ': ["1","2x","3","4","5"],
    u'ø': ["1","2x","3","4","5"],
    u'å': ["1","2x","3","4","5"],
}
</snippet></ROW><ROW><id>16439596</id><snippet>global</snippet></ROW><ROW><id>16439720</id><snippet>defaultdict</snippet></ROW><ROW><id>16439720</id><snippet>def dd():
    return defaultdict(int)

dict1 = defaultdict(dd) # dd is a module-level function
</snippet></ROW><ROW><id>16439720</id><snippet>tmp = pickle.dumps(dict1) # no exception
new = pickle.loads(tmp)
</snippet></ROW><ROW><id>16440110</id><snippet>[1::2]</snippet></ROW><ROW><id>16440110</id><snippet>&gt;&gt;&gt; [x for x in itertools.imap(complex,a,b)][1::2]

[(8+6j), (8+6j), (8+6j)]
</snippet></ROW><ROW><id>16440179</id><snippet>x</snippet></ROW><ROW><id>16440179</id><snippet>Car</snippet></ROW><ROW><id>16440179</id><snippet>getattr</snippet></ROW><ROW><id>16440179</id><snippet>for x in ['condition', 'model', 'color', 'mpg']:
    print(getattr(my_car, x))
</snippet></ROW><ROW><id>16440295</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "I was searching my source to make a big desk yesterday."
&gt;&gt;&gt; re.findall(r'\bs\w+', text)
['searching', 'source']
</snippet></ROW><ROW><id>16440295</id><snippet>s</snippet></ROW><ROW><id>16440295</id><snippet>r'\b[sS]\w+'</snippet></ROW><ROW><id>16440337</id><snippet>tuple(map(next, iterators)) 
</snippet></ROW><ROW><id>16440337</id><snippet>tuple(i.next() for i in iterators) 
</snippet></ROW><ROW><id>16440465</id><snippet>g++</snippet></ROW><ROW><id>16440465</id><snippet>gcc</snippet></ROW><ROW><id>16440465</id><snippet>gcc</snippet></ROW><ROW><id>16440835</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>16440835</id><snippet>ALIGN="RIGHT"</snippet></ROW><ROW><id>16440835</id><snippet>hxs.select('//tbody//td[@ALIGN="RIGHT"]//text()').extract()
</snippet></ROW><ROW><id>16440930</id><snippet>next((x for x in testSet if x["ID"] == 230), None)
</snippet></ROW><ROW><id>16440930</id><snippet>None</snippet></ROW><ROW><id>16440956</id><snippet>ChildClass</snippet></ROW><ROW><id>16440956</id><snippet>Wrapper.method()</snippet></ROW><ROW><id>16440956</id><snippet>Wrapper.method()</snippet></ROW><ROW><id>16440956</id><snippet>ChildClass</snippet></ROW><ROW><id>16440956</id><snippet>ChildClass</snippet></ROW><ROW><id>16440956</id><snippet>class Wrapper():
    @classmethod
    def method(cls, child_class=ChildClass):
        cls.wrapped = child_class()
</snippet></ROW><ROW><id>16440956</id><snippet>def createClasses(parent):
    class ChildClass(parent):
        pass

    class Wrapper():
        @classmethod
        def method(cls):
            cls.wrapped = ChildClass()

    return ChildClass, Wrapper

for c in parents:
    child, wrapper = createClasses(c)

    children.append(child)
    wrappers.append(wrapper)
</snippet></ROW><ROW><id>16440956</id><snippet>Wrapper.method</snippet></ROW><ROW><id>16440956</id><snippet>ChildClass</snippet></ROW><ROW><id>16440956</id><snippet>createClasses</snippet></ROW><ROW><id>16441190</id><snippet>os.walk</snippet></ROW><ROW><id>16441190</id><snippet>import os
for root, dirs, files in os.walk(os.path.abspath("/parent/dir/")):
  for file in files:
    if os.path.splitext(file)[1] == '.py':
      print os.path.join(root, file)
</snippet></ROW><ROW><id>16441190</id><snippet>fnmatch</snippet></ROW><ROW><id>16441190</id><snippet>import os
import fnmatch

for root, dirnames, filenames in os.walk("/parent/dir/"):
  for filename in fnmatch.filter(filenames, '*.py'):
    # do your thing here .. execfile(filename) or whatever
</snippet></ROW><ROW><id>16441255</id><snippet>map(dict(bar).get, foo)
</snippet></ROW><ROW><id>16441743</id><snippet>for link in linklist:
    print link.firstChild.nodeValue
</snippet></ROW><ROW><id>16441743</id><snippet>http://www.water.com
http://www.fire.com
</snippet></ROW><ROW><id>16441743</id><snippet># the variable fire_link is a DOM Element of the second link in the xml file
fire_link = linklist[1]
</snippet></ROW><ROW><id>16441743</id><snippet># fire_link is a list where each element is a DOM Element containing the http://www.fire.com link
fire_links = [l for l in linklist if l.firstChild.nodeValue == 'http://www.fire.com']

# take the first element
fire_link = fire_links[0]
</snippet></ROW><ROW><id>16442115</id><snippet>#  byte str (you probably get from GAE)
In [1]: s = """Chinese (汉语/漢語 Hànyǔ or 中文 Zhōngwén) is a group of related
        language varieties, several of which are not mutually intelligible,"""

#  unicode str
In [2]: us = u"""Chinese (汉语/漢語 Hànyǔ or 中文 Zhōngwén) is a group of related
        language varieties, several of which are not mutually intelligible,"""

#  convert to unicode using str.decode('utf-8')    
In [3]: print ''.join(c for c in s.decode('utf-8') 
                   if u'\u4e00' &lt;= c &lt;= u'\u9fff')
汉语漢語中文

In [4]: print ''.join(c for c in us if u'\u4e00' &lt;= c &lt;= u'\u9fff')
汉语漢語中文
</snippet></ROW><ROW><id>16442115</id><snippet>all(u'\u4e00' &lt;= c &lt;= u'\u9fff' for c in name.decode('utf-8'))
</snippet></ROW><ROW><id>16442306</id><snippet>session token</snippet></ROW><ROW><id>16442306</id><snippet>session token</snippet></ROW><ROW><id>16442306</id><snippet>shop_url</snippet></ROW><ROW><id>16442306</id><snippet>shopify_python_api</snippet></ROW><ROW><id>16442444</id><snippet>def generate_timeline(file):
    for line in file:
         time1 = extract_time_from_line(line)
         yield time1, line


for (time1, line) in heapq.merge(generate_timeline(file1), generate_timeline(file2)):
    process(line)
</snippet></ROW><ROW><id>16442532</id><snippet>from xml.dom import minidom
import urllib

url_str = 'http://www.newyorkfed.org/markets/omo/dmm/fftoXML.cfm?type=daily'
xml_str = urllib.urlopen(xml_str).read()
xmldoc = minidom.parseString(xml_str)

obs_values = xmldoc.getElementsByTagName('base:OBS_VALUE')
# prints the first base:OBS_VALUE it finds
print obs_values[0].firstChild.nodeValue

# prints the second base:OBS_VALUE it finds
print obs_values[1].firstChild.nodeValue

# prints all base:OBS_VALUE in the XML doc
for obs_val in obs_values:
    print obs_val.firstChild.nodeValue
</snippet></ROW><ROW><id>16442732</id><snippet>def addNewAttribute(entity, *args, **kwargs):
    try:
        if not entity.get("newattribute"):
            entity["newattribute"] = False
            yield op.db.Put(entity) # save the entity back to datastore
            yield op.counters.Increment("touched") # use mapreduce counter to track operations
    except: 
        yield op.counters.Increment("touchFail")
</snippet></ROW><ROW><id>16442962</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>16442962</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>16443585</id><snippet>^</snippet></ROW><ROW><id>16443585</id><snippet>**</snippet></ROW><ROW><id>16443585</id><snippet>^</snippet></ROW><ROW><id>16443585</id><snippet>1/10</snippet></ROW><ROW><id>16443585</id><snippet>0</snippet></ROW><ROW><id>16443585</id><snippet>1.0/10</snippet></ROW><ROW><id>16443585</id><snippet>def round_down(num, prec):
    uod = round(num, prec)
    if uod &gt; num:
        return uod - 1.0/10 ** prec  
    return uod
</snippet></ROW><ROW><id>16443956</id><snippet>pshell</snippet></ROW><ROW><id>16443956</id><snippet>sqlalchemy.echo</snippet></ROW><ROW><id>16444291</id><snippet>COLOR_RGB2YCR_CB</snippet></ROW><ROW><id>16444291</id><snippet>COLOR_BGR2YCR_CB</snippet></ROW><ROW><id>16444291</id><snippet>img = cv2.imread('img1.jpg')
imgYCC = cv2.cvtColor(img, cv2.COLOR_BGR2YCR_CB)
</snippet></ROW><ROW><id>16444355</id><snippet>def progress(self):
    aggregate = self.issues.aggregate(models.Avg('progress'))
    return aggregate['progress_avg']
</snippet></ROW><ROW><id>16444355</id><snippet>for project in Project.objects.annotate(progress_avg=models.Avg('issues__progress')):
    print project.progress_avg
</snippet></ROW><ROW><id>16444427</id><snippet>for s, c in zip(date_list, count_list):
    self.cursor.execute(
        'INSERT INTO ufo_info(date, count) VALUES (%s, %s);'
        , (s, c)
    )
</snippet></ROW><ROW><id>16444514</id><snippet>map(numpy.all, range(-2,3))</snippet></ROW><ROW><id>16444514</id><snippet>[numpy.all(-2), numpy.all(-1), numpy.all(0), numpy.all(1), numpy.all(2)]
</snippet></ROW><ROW><id>16444514</id><snippet>[-2, -1, 0, 1, 2]
</snippet></ROW><ROW><id>16444514</id><snippet>map(lambda x: numpy.all([x]), range(-2,3))</snippet></ROW><ROW><id>16444514</id><snippet>[numpy.all([-2]), numpy.all([-1]), numpy.all([0]), numpy.all([1]), numpy.all([2])]
</snippet></ROW><ROW><id>16444514</id><snippet>[True, True, False, True, True]
</snippet></ROW><ROW><id>16444514</id><snippet>numpy.all</snippet></ROW><ROW><id>16444514</id><snippet>True</snippet></ROW><ROW><id>16444514</id><snippet>False</snippet></ROW><ROW><id>16444514</id><snippet>map(numpy.all, [False, True])</snippet></ROW><ROW><id>16444635</id><snippet>import re

key_value = re.compile('(?P&lt;key&gt;[A-Z]+)=(?P&lt;value&gt;\[^\s=;]+)(?:(?=;)|$)')
</snippet></ROW><ROW><id>16444635</id><snippet>key_value = re.compile('([A-Z]+)=([^\s=;])(?:(?=;)|$)')
</snippet></ROW><ROW><id>16444635</id><snippet>(?:..)</snippet></ROW><ROW><id>16444635</id><snippet>|</snippet></ROW><ROW><id>16444635</id><snippet>=</snippet></ROW><ROW><id>16444635</id><snippet>=</snippet></ROW><ROW><id>16444635</id><snippet>;</snippet></ROW><ROW><id>16444635</id><snippet>;</snippet></ROW><ROW><id>16444635</id><snippet>&gt;&gt;&gt; key_value = re.compile('(?P&lt;key&gt;[A-Z]+)=(?P&lt;value&gt;[^\s=;]+)(?:(?=;)|$)')
&gt;&gt;&gt; key_value.findall('Person1\tHEIGHT=60;WEIGHT=100;AGE=22')
[('HEIGHT', '60'), ('WEIGHT', '100'), ('AGE', '22')]
</snippet></ROW><ROW><id>16444635</id><snippet>&gt;&gt;&gt; dict(key_value.findall('Person1\tHEIGHT=60;WEIGHT=100;AGE=22'))
{'AGE': '22', 'WEIGHT': '100', 'HEIGHT': '60'}
</snippet></ROW><ROW><id>16444635</id><snippet>csv.DictWriter()</snippet></ROW><ROW><id>16444635</id><snippet>import csv
import re

key_value = re.compile('(?P&lt;key&gt;[A-Z]+)=(?P&lt;value&gt;[^\s=;]+)(?:(?=;)|$)')

with open(inputfilename) as infile, open(outputfilename, 'wb') as outfile:
    writer = csv.DictWriter(outfile, ('PERSON', 'HEIGHT', 'WEIGHT', 'AGE'), delimiter='\t')
    writer.writeheader()

    for line in infile:
        person = line.split('\t', 1)[0]
        row = dict(key_value.findall(line))
        row['PERSON'] = person
        writer.writerow(row)
</snippet></ROW><ROW><id>16444635</id><snippet>&gt;&gt;&gt; dict(key_value.findall('       P=0.9626;IPU=.$.+1T.+1T.+;IRF=ncRNA;IUC=UTR3;IGN=NCRNA00115;IGI=NCRNA00115,RP11-206L10.16-001;IET=0;IEO=0;IEN=.;IHT=0;IHVC=0;IHD=.;IHI=.;IHN=.;IDI=.;IDN=.;ITMAF=.;ITAMR=.;ITASN=.;ITAFR=.;ITEUR=.;ITNRB=+A;ISF=.;ISD=.;ISM=.;ISX=.;\n'))
{'ISX': '.', 'ITAMR': '.', 'IDN': '.', 'ISM': '.', 'IDI': '.', 'ISF': '.', 'ISD': '.', 'ITMAF': '.', 'IUC': 'UTR3', 'IGI': 'NCRNA00115,RP11-206L10.16-001', 'ITNRB': '+A', 'IHVC': '0', 'IET': '0', 'ITASN': '.', 'ITEUR': '.', 'ITAFR': '.', 'IEO': '0', 'IEN': '.', 'IGN': 'NCRNA00115', 'IRF': 'ncRNA', 'P': '0.9626', 'IHT': '0', 'IHI': '.', 'IHN': '.', 'IPU': '.$.+1T.+1T.+', 'IHD': '.'}
</snippet></ROW><ROW><id>16444748</id><snippet>POST</snippet></ROW><ROW><id>16444748</id><snippet>PUT</snippet></ROW><ROW><id>16444748</id><snippet>request.form</snippet></ROW><ROW><id>16444748</id><snippet>request.args</snippet></ROW><ROW><id>16444778</id><snippet>struct</snippet></ROW><ROW><id>16444778</id><snippet>import struct
def binary(num):
    return ''.join(bin(ord(c)).replace('0b', '').rjust(8, '0') for c in struct.pack('!f', num))
</snippet></ROW><ROW><id>16444778</id><snippet>&gt;&gt;&gt; binary(1)
'00111111100000000000000000000000'
</snippet></ROW><ROW><id>16445172</id><snippet>for i in range(num_rows):
    for j in range(i, num_cols):
        matrix[j][i] = matrix[i][j]
</snippet></ROW><ROW><id>16445333</id><snippet>from cmathimport rect,pi
from itertools import imap
b = b*pi/180                   # convert from deg to rad
c = [x for x in imap(rect,a,b)]
</snippet></ROW><ROW><id>16445542</id><snippet>dir()</snippet></ROW><ROW><id>16445542</id><snippet>getattr()</snippet></ROW><ROW><id>16445542</id><snippet>for i in dir(foo):
    attr = getattr(foo, i)
    print type(attr)
</snippet></ROW><ROW><id>16445542</id><snippet>inspect</snippet></ROW><ROW><id>16445542</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>16445542</id><snippet>from inspect import getmembers

for name, attr in getmembers(foo):
    print '{}: {}'.format(name, type(attr))
</snippet></ROW><ROW><id>16445542</id><snippet>getmembers()</snippet></ROW><ROW><id>16445542</id><snippet>from inspect import getmembers, ismethod

for name, attr in getmembers(foo, ismethod):
    print '{}: {}'.format(name, type(attr))
</snippet></ROW><ROW><id>16445542</id><snippet>foo</snippet></ROW><ROW><id>16445617</id><snippet>while</snippet></ROW><ROW><id>16445617</id><snippet>for</snippet></ROW><ROW><id>16445617</id><snippet>seek</snippet></ROW><ROW><id>16445617</id><snippet>range</snippet></ROW><ROW><id>16445617</id><snippet>range(start, stop, step)</snippet></ROW><ROW><id>16445617</id><snippet>for</snippet></ROW><ROW><id>16445617</id><snippet>seek</snippet></ROW><ROW><id>16445617</id><snippet>chunk = 10
sz = 235

lst = list(range(sz - chunk, 0, -chunk))
print(lst)
</snippet></ROW><ROW><id>16445617</id><snippet>sz - chunk</snippet></ROW><ROW><id>16445617</id><snippet>list()</snippet></ROW><ROW><id>16445617</id><snippet>for pos in range(sz - chunk, 0, -chunk):
    print('seek({}) and read({})'.format(pos, chunk))

if pos &gt; 0:
    print('seek({}) and read({})'.format(0, pos))
</snippet></ROW><ROW><id>16445617</id><snippet>if</snippet></ROW><ROW><id>16445617</id><snippet>chunk</snippet></ROW><ROW><id>16445617</id><snippet>c:\tmp\_Python\wikicsm\so16443185&gt;py a.py
[225, 215, 205, 195, 185, 175, 165, 155, 145, 135, 125, 115, 105, 95,
85, 75, 65, 55, 45, 35, 25, 15, 5]
seek(225) and read(10)
seek(215) and read(10)
seek(205) and read(10)
seek(195) and read(10)
seek(185) and read(10)
seek(175) and read(10)
seek(165) and read(10)
seek(155) and read(10)
seek(145) and read(10)
seek(135) and read(10)
seek(125) and read(10)
seek(115) and read(10)
seek(105) and read(10)
seek(95) and read(10)
seek(85) and read(10)
seek(75) and read(10)
seek(65) and read(10)
seek(55) and read(10)
seek(45) and read(10)
seek(35) and read(10)
seek(25) and read(10)
seek(15) and read(10)
seek(5) and read(10)
seek(0) and read(5)
</snippet></ROW><ROW><id>16445617</id><snippet>print</snippet></ROW><ROW><id>16445617</id><snippet>#!python3
import os

def processChunk(f, pos, chunk_size):
    print('faked f: seek({}) and read({})'.format(pos, chunk_size))


fname = 'a.txt'
sz = os.path.getsize(fname)     # not checking existence for simplicity
chunk = 16

with open(fname, 'rb') as f:
    for pos in range(sz - chunk, 0, -chunk):
        processChunk(f, pos, chunk)

    if pos &gt; 0:
        processChunk(f, 0, pos)
</snippet></ROW><ROW><id>16445617</id><snippet>with</snippet></ROW><ROW><id>16445617</id><snippet>with</snippet></ROW><ROW><id>16445617</id><snippet>with</snippet></ROW><ROW><id>16445617</id><snippet>processChunk</snippet></ROW><ROW><id>16445617</id><snippet>def processChunk(f, pos, chunk_size):
    f.seek(pos)
    s = binascii.hexlify(f.read(chunk_size))
    print(s)
</snippet></ROW><ROW><id>16445617</id><snippet>#!python3

import binascii
import os

def processChunk(f, pos, chunk_size):
    f.seek(pos)
    b = f.read(chunk_size)
    b1 = b[:8]                  # first 8 bytes
    b2 = b[8:]                  # the rest
    s1 = ' '.join('{:02x}'.format(x) for x in b1)
    s2 = ' '.join('{:02x}'.format(x) for x in b2)
    print('{:08x}:'.format(pos), s1, '|', s2)


fname = 'a.txt'
sz = os.path.getsize(fname)     # not checking existence for simplicity
chunk = 16

with open(fname, 'rb') as f:

    for pos in range(sz - chunk, 0, -chunk):
        processChunk(f, pos, chunk)

    if pos &gt; 0:
        processChunk(f, 0, pos)
</snippet></ROW><ROW><id>16445617</id><snippet>a.txt</snippet></ROW><ROW><id>16445617</id><snippet>c:\tmp\_Python\wikicsm\so16443185&gt;py d.py
00000274: 75 6e 6b 28 66 2c 20 30 | 2c 20 70 6f 73 29 0d 0a
00000264: 20 20 20 20 20 20 20 70 | 72 6f 63 65 73 73 43 68
00000254: 20 20 69 66 20 70 6f 73 | 20 3e 20 30 3a 0d 0a 20
00000244: 6f 73 2c 20 63 68 75 6e | 6b 29 0d 0a 0d 0a 20 20
00000234: 72 6f 63 65 73 73 43 68 | 75 6e 6b 28 66 2c 20 70
00000224: 75 6e 6b 29 3a 0d 0a 20 | 20 20 20 20 20 20 20 70
00000214: 20 2d 20 63 68 75 6e 6b | 2c 20 30 2c 20 2d 63 68
00000204: 20 70 6f 73 20 69 6e 20 | 72 61 6e 67 65 28 73 7a
000001f4: 61 73 20 66 3a 0d 0a 0d | 0a 20 20 20 20 66 6f 72
000001e4: 65 6e 28 66 6e 61 6d 65 | 2c 20 27 72 62 27 29 20
000001d4: 20 3d 20 31 36 0d 0a 0d | 0a 77 69 74 68 20 6f 70
000001c4: 69 6d 70 6c 69 63 69 74 | 79 0d 0a 63 68 75 6e 6b
000001b4: 20 65 78 69 73 74 65 6e | 63 65 20 66 6f 72 20 73
000001a4: 20 20 23 20 6e 6f 74 20 | 63 68 65 63 6b 69 6e 67
00000194: 65 74 73 69 7a 65 28 66 | 6e 61 6d 65 29 20 20 20
00000184: 0d 0a 73 7a 20 3d 20 6f | 73 2e 70 61 74 68 2e 67
00000174: 0a 66 6e 61 6d 65 20 3d | 20 27 61 2e 74 78 74 27
00000164: 31 2c 20 27 7c 27 2c 20 | 73 32 29 0d 0a 0d 0a 0d
00000154: 27 2e 66 6f 72 6d 61 74 | 28 70 6f 73 29 2c 20 73
00000144: 20 20 70 72 69 6e 74 28 | 27 7b 3a 30 38 78 7d 3a
00000134: 66 6f 72 20 78 20 69 6e | 20 62 32 29 0d 0a 20 20
00000124: 30 32 78 7d 27 2e 66 6f | 72 6d 61 74 28 78 29 20
00000114: 32 20 3d 20 27 20 27 2e | 6a 6f 69 6e 28 27 7b 3a
00000104: 20 78 20 69 6e 20 62 31 | 29 0d 0a 20 20 20 20 73
000000f4: 7d 27 2e 66 6f 72 6d 61 | 74 28 78 29 20 66 6f 72
000000e4: 20 27 20 27 2e 6a 6f 69 | 6e 28 27 7b 3a 30 32 78
000000d4: 65 20 72 65 73 74 0d 0a | 20 20 20 20 73 31 20 3d
000000c4: 20 20 20 20 20 20 20 20 | 20 20 20 20 23 20 74 68
000000b4: 62 32 20 3d 20 62 5b 38 | 3a 5d 20 20 20 20 20 20
000000a4: 73 74 20 38 20 62 79 74 | 65 73 0d 0a 20 20 20 20
00000094: 20 20 20 20 20 20 20 20 | 20 20 20 23 20 66 69 72
00000084: 31 20 3d 20 62 5b 3a 38 | 5d 20 20 20 20 20 20 20
00000074: 75 6e 6b 5f 73 69 7a 65 | 29 0d 0a 20 20 20 20 62
00000064: 20 20 20 62 20 3d 20 66 | 2e 72 65 61 64 28 63 68
00000054: 20 20 66 2e 73 65 65 6b | 28 70 6f 73 29 0d 0a 20
00000044: 63 68 75 6e 6b 5f 73 69 | 7a 65 29 3a 0d 0a 20 20
00000034: 73 73 43 68 75 6e 6b 28 | 66 2c 20 70 6f 73 2c 20
00000024: 20 6f 73 0d 0a 0d 0a 64 | 65 66 20 70 72 6f 63 65
00000014: 62 69 6e 61 73 63 69 69 | 0d 0a 69 6d 70 6f 72 74
00000004: 74 68 6f 6e 33 0d 0a 0d | 0a 69 6d 70 6f 72 74 20
00000000: 23 21 70 79 |
</snippet></ROW><ROW><id>16445617</id><snippet>src_file_path = 'd:\\src\\python\\test\\main.zip'</snippet></ROW><ROW><id>16445617</id><snippet>src_file_path = 'd:/src/python/test/main.zip'</snippet></ROW><ROW><id>16445729</id><snippet>/dev/mem</snippet></ROW><ROW><id>16445729</id><snippet>stat()</snippet></ROW><ROW><id>16445729</id><snippet>/dev/zero</snippet></ROW><ROW><id>16445729</id><snippet>/dev/kbd</snippet></ROW><ROW><id>16445729</id><snippet>/dev/urandom</snippet></ROW><ROW><id>16445931</id><snippet>\r</snippet></ROW><ROW><id>16445931</id><snippet>.rstrip('\r')</snippet></ROW><ROW><id>16445931</id><snippet>image_type = imghdr.what(os.path.normpath(filename.rstrip('\r')))
</snippet></ROW><ROW><id>16445931</id><snippet>.rstrip()</snippet></ROW><ROW><id>16445931</id><snippet>.strip()</snippet></ROW><ROW><id>16445931</id><snippet>image_type = imghdr.what(os.path.normpath(filename.strip()))
</snippet></ROW><ROW><id>16445946</id><snippet>import codecs
h = codecs.open('yyyy.txt', 'w', 'utf-8')
</snippet></ROW><ROW><id>16446006</id><snippet>&lt;form action="/makequestion" method="post" class="form-inline pull-left"&gt;
   &lt;div class="input-append"&gt;
     &lt;input type="text" required name="askquestion" class="span5"/&gt;
     &lt;button type="submit" name="askbutton"  class="btn-u" value="askbutton"&gt;Ask&lt;/button&gt;
   &lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>16446006</id><snippet>/makequestion</snippet></ROW><ROW><id>16446101</id><snippet>or</snippet></ROW><ROW><id>16446101</id><snippet>if move_upper in ('X', 'R'):
</snippet></ROW><ROW><id>16446101</id><snippet>move_upper == 'X' or 'R'</snippet></ROW><ROW><id>16446101</id><snippet>(move_upper == 'X') or 'R'</snippet></ROW><ROW><id>16446101</id><snippet>True</snippet></ROW><ROW><id>16446101</id><snippet>(move_upper == 'X') or True</snippet></ROW><ROW><id>16446101</id><snippet>move_upper</snippet></ROW><ROW><id>16446101</id><snippet>done</snippet></ROW><ROW><id>16446101</id><snippet>break</snippet></ROW><ROW><id>16446101</id><snippet>while True:
    # ...

    if move_upper in ('X', 'R'):
        break
</snippet></ROW><ROW><id>16446510</id><snippet>csv</snippet></ROW><ROW><id>16446510</id><snippet>zip(*rows)</snippet></ROW><ROW><id>16446510</id><snippet>itertools.izip(*rows)</snippet></ROW><ROW><id>16446510</id><snippet>with open(somecsv, 'rb') as infile:
    reader = csv.reader(infile, delimiter=';')
    headers = next(reader)
    data = list(reader)
    data = dict(zip(headers, zip(*data)))
</snippet></ROW><ROW><id>16446510</id><snippet>data</snippet></ROW><ROW><id>16446510</id><snippet>''</snippet></ROW><ROW><id>16446510</id><snippet>data</snippet></ROW><ROW><id>16446510</id><snippet>{'': ('term1', 'term2'), 'label1': ('1', '0'), 'label2': ('0', '0'), 'label3': ('8', '3')}
</snippet></ROW><ROW><id>16446566</id><snippet>.ini</snippet></ROW><ROW><id>16446566</id><snippet>production.example.ini</snippet></ROW><ROW><id>16446566</id><snippet>[app:main]

sqlalchemy.url = ${SQLALCHEMY_URL}
</snippet></ROW><ROW><id>16446566</id><snippet>SQLALCHEMY_URL</snippet></ROW><ROW><id>16446566</id><snippet>os.path.expandvars</snippet></ROW><ROW><id>16446566</id><snippet>sqlalchemy_url = os.path.expandvars(settings.get('sqlalchemy.url'))
engine = create_engine(sqlalchemy_url)
</snippet></ROW><ROW><id>16446566</id><snippet>def expandvars_dict(settings):
    """Expands all environment variables in a settings dictionary."""
    return dict((key, os.path.expandvars(value)) for
                key, value in settings.iteritems())
</snippet></ROW><ROW><id>16446566</id><snippet>main</snippet></ROW><ROW><id>16446566</id><snippet>settings = expandvars_dict(settings)
</snippet></ROW><ROW><id>16446621</id><snippet>&gt;&gt;&gt; from slimit import lexer
&gt;&gt;&gt; L = Lexer()
&gt;&gt;&gt; L.input("02")
&gt;&gt;&gt; L.token() 
LexToken(NUMBER,'02',1,0)
&gt;&gt;&gt; L.input("08")
&gt;&gt;&gt; L.token()  
LexToken(NUMBER,'0',1,0)
&gt;&gt;&gt; L.token()
LexToken(NUMBER,'8',1,1)
</snippet></ROW><ROW><id>16446621</id><snippet>t_NUMBER = r"""
(?:
    0[xX][0-9a-fA-F]+              # hex_integer_literal
 |  0[0-7]+                        # or octal_integer_literal (spec B.1.1)
 |  (?:                            # or decimal_literal
        (?:0|[1-9][0-9]*)          # decimal_integer_literal
        \.                         # dot
        [0-9]*                     # decimal_digits_opt
        (?:[eE][+-]?[0-9]+)?       # exponent_part_opt
     |
        \.                         # dot
        [0-9]+                     # decimal_digits
        (?:[eE][+-]?[0-9]+)?       # exponent_part_opt
     |
        (?:0|[1-9][0-9]*)          # decimal_integer_literal
        (?:[eE][+-]?[0-9]+)?       # exponent_part_opt
     )
)
"""
</snippet></ROW><ROW><id>16446653</id><snippet>import numpy as np


def lorenz95(x, t):
    return np.roll(x, 1) * (np.roll(x, -1) - np.roll(x, 2)) - x + F

if __name__ == '__main__':
    import matplotlib.pyplot as plt
    from scipy.integrate import odeint
    SIZE = 40
    F = 8
    t = np.linspace(0, 10, 1001)
    x0 = np.random.random(SIZE)
    for perturbation in 0.1 * np.random.randn(5):
        x0i = x0.copy()
        x0i[0] += perturbation
        x = odeint(lorenz95, x0i, t)
        plt.plot(t, x[:, 0])
    plt.show()
</snippet></ROW><ROW><id>16446653</id><snippet>np.random.seed(7)</snippet></ROW><ROW><id>16446653</id><snippet>dt = 0.01</snippet></ROW><ROW><id>16446653</id><snippet>dt</snippet></ROW><ROW><id>16446653</id><snippet>odeint</snippet></ROW><ROW><id>16446653</id><snippet>odeint</snippet></ROW><ROW><id>16446906</id><snippet>loadtxt</snippet></ROW><ROW><id>16446906</id><snippet>f = open("/Users/groenera/Desktop/file.csv")
</snippet></ROW><ROW><id>16446906</id><snippet>loadtxt</snippet></ROW><ROW><id>16446906</id><snippet>f = open(u"/Users/groenera/Desktop/file.csv")
</snippet></ROW><ROW><id>16447060</id><snippet>stdin</snippet></ROW><ROW><id>16447060</id><snippet>stdout</snippet></ROW><ROW><id>16447060</id><snippet>subprocess</snippet></ROW><ROW><id>16447060</id><snippet>io.TextIOWrapper()</snippet></ROW><ROW><id>16447060</id><snippet>child.stdout</snippet></ROW><ROW><id>16447060</id><snippet>sys.stdin = io.TextIOWrapper(child.stdout, encoding='utf8')
</snippet></ROW><ROW><id>16447217</id><snippet>call</snippet></ROW><ROW><id>16447217</id><snippet>scrapy</snippet></ROW><ROW><id>16447217</id><snippet>call scrapy crawl mySpider -o outputData.json -t json
</snippet></ROW><ROW><id>16447232</id><snippet>zip</snippet></ROW><ROW><id>16447232</id><snippet>[sum(x) for x in zip(*my_dict.values())[1:]]
</snippet></ROW><ROW><id>16447232</id><snippet>[12576, 12483, 93]
</snippet></ROW><ROW><id>16447342</id><snippet>descrobject.c</snippet></ROW><ROW><id>16447342</id><snippet>bltinmodule.c</snippet></ROW><ROW><id>16447342</id><snippet>property()</snippet></ROW><ROW><id>16447342</id><snippet>SETBUILTIN("property",              &amp;PyProperty_Type);
</snippet></ROW><ROW><id>16447342</id><snippet>PyProperty_Type</snippet></ROW><ROW><id>16447342</id><snippet>Objects</snippet></ROW><ROW><id>16447683</id><snippet>zlib1g-dev</snippet></ROW><ROW><id>16447683</id><snippet>sudo apt-get install zlib1g-dev
</snippet></ROW><ROW><id>16447683</id><snippet>build-essential
libncursesw5-dev
libreadline5-dev
libssl-dev
libgdbm-dev
libc6-dev
libsqlite3-dev
tk-dev
</snippet></ROW><ROW><id>16447737</id><snippet>users</snippet></ROW><ROW><id>16447737</id><snippet>posts</snippet></ROW><ROW><id>16447737</id><snippet>def add():
    cursor = g.db.cursor()
    cursor.execute("INSERT INTO users(username) VALUES(?)", [request.form['name']])
    g.db.execute("INSERT INTO posts(body, user_id) VALUES(?,?)",
                 [request.form['body'], cursor.lastrowid])
    g.db.commit()
    ...
</snippet></ROW><ROW><id>16447763</id><snippet>brew up</snippet></ROW><ROW><id>16448445</id><snippet>print</snippet></ROW><ROW><id>16448445</id><snippet>bltinmodule.c</snippet></ROW><ROW><id>16448572</id><snippet>FetchedValue</snippet></ROW><ROW><id>16448572</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class A(Base):
    __tablename__ = 'a'

    id = Column(Integer, autoincrement=False, primary_key=True)
    firstname = Column(String(50))
    lastname = Column(String(50))
    fullname = Column(String(100), FetchedValue())

e = create_engine("mssql+pyodbc://scott:tiger@ms_2005", echo=True)
Base.metadata.drop_all(e)

e.execute("""
    CREATE TABLE a (
            id INTEGER PRIMARY KEY,
            firstname VARCHAR(50),
            lastname VARCHAR(50)
        )
""")
e.execute("ALTER TABLE a ADD fullname AS firstname + ' ' + lastname")

sess = Session(e)

sess.add_all([
    A(id=1, firstname='ed', lastname='jones'),
    A(id=2, firstname='wendy', lastname='smith'),
    A(id=3, firstname='jack', lastname='bean')
])
sess.commit()

assert [
    fname for fname, in
    sess.query(A.fullname).order_by(A.id)
] == ['ed jones', 'wendy smith', 'jack bean']


e.execute("DROP TABLE a")
</snippet></ROW><ROW><id>16448575</id><snippet>def common_substr(a, b, k):
  for substr in (a[i:i+k] for i in range(len(a)-k+1)):
    if substr in b:
      return substr
</snippet></ROW><ROW><id>16448575</id><snippet>k</snippet></ROW><ROW><id>16448575</id><snippet>k</snippet></ROW><ROW><id>16448575</id><snippet>def common_substr(a, b, k):
  substrs = set(a[i:i+k] for i in range(len(a)-k+1))
  for substr in (b[i:i+k] for i in range(len(b)-k+1)):
    if substr in substrs:
      return substr
</snippet></ROW><ROW><id>16448575</id><snippet>strstr()</snippet></ROW><ROW><id>16448581</id><snippet>IAPWS_1995</snippet></ROW><ROW><id>16448581</id><snippet>n_0, n_1, n_2, n_3 = ...
d_0, d_1, d_2 = ...
t_0, t_1, t_2 = ...
c_1, = ...
b_3, = ...
alpha_2, beta_2, gamma_2, epsilon_2 = ...
dpsi_ddelta = ...
dDeltab_ddelta = ...

def dAr_ddelta(delta, tau, Delta, theta, psi):
    _dAr_ddelta = (
        sum(n_0 * d_0 * pow(delta, d_0-1) * pow(tau, t_0)) +
        sum(n_1 * exp(-pow(delta, c_1)) * (pow(delta, d_1-1) * pow(tau, t_1) * (d_1 - c_1*pow(delta, c_1)))) +
        sum(n_2 * pow(delta, d_2)*pow(tau, t_2) * exp(-alpha_2*(delta-epsilon_2)**2 - beta_2*(tau-gamma_2)**2) * (d_2/delta - 2*alpha_2*(delta-epsilon_2))) + \
        sum(n_3 * (pow(Delta, b_3)*(psi + delta*dpsi_ddelta(psi, delta)) + dDeltab_ddelta(delta, Delta, theta)*delta*psi)))
        return _dAr_ddelta
</snippet></ROW><ROW><id>16448581</id><snippet>import IAPW2_1995

x = IAPW2_1995.dAr_ddelta( arg1, arg2, arg3, arg4, arg5 )
</snippet></ROW><ROW><id>16448625</id><snippet>select()</snippet></ROW><ROW><id>16448625</id><snippet>FromClause</snippet></ROW><ROW><id>16448625</id><snippet>as_scalar()</snippet></ROW><ROW><id>16448625</id><snippet>ColumnElement</snippet></ROW><ROW><id>16448625</id><snippet>x = bbc.alias().c
w = bbc.alias().c
select([func.distinct(x.region)]).where(
    select([func.sum(w.population)]).where(w.region == x.region).as_scalar() &gt; 100000000
)
</snippet></ROW><ROW><id>16448739</id><snippet>Bimg = img[:,:,0]
Gimg = img[:,:,1]
Rimg = img[:,:,2]
</snippet></ROW><ROW><id>16448739</id><snippet>B,G,R = cv2.split(img)
</snippet></ROW><ROW><id>16448826</id><snippet>ion()
fig = figure()
ax = fig.add_subplot(111, projection='3d')
count = 0
plotting = True
# doesn't need to be in loop
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

lin = None
while plotting:
    df2 = df.ix[count]
    count += 1
    xs = df2['x.mean']
    ys = df2['y.mean']
    zs = df2['z.mean']
    t = df2['time']
    if lin is not None:
        lin.remove()
    lin = ax.scatter(xs, ys, zs)
    ax.set_title(t)
    draw()
    pause(0.01)
    if count &gt; 50:
        plotting = False
ioff()
show()
</snippet></ROW><ROW><id>16448826</id><snippet>plot</snippet></ROW><ROW><id>16448826</id><snippet>scatter</snippet></ROW><ROW><id>16448854</id><snippet>url(r'^hello/$', spec_form, health_form)</snippet></ROW><ROW><id>16448854</id><snippet>url(r'^hello/$', spec_form)</snippet></ROW><ROW><id>16448854</id><snippet>class Health_plan(models.Model):
    name = models.CharField(max_length=15)
    def __unicode__(self):
        return "%s"%(self.name)
</snippet></ROW><ROW><id>16449052</id><snippet>import csv

with open('filename') as f:
    reader = csv.reader(f, delimiter=' ', skipinitialspace=True)
    first_row = next(reader)
    num_cols = len(first_row)
</snippet></ROW><ROW><id>16449121</id><snippet>[[y if i &lt; len(x)-2 else inc(y)
  for i, y in enumerate(x)]
  for x in my_array]
</snippet></ROW><ROW><id>16449189</id><snippet>(a,)</snippet></ROW><ROW><id>16449189</id><snippet>tuple(a)</snippet></ROW><ROW><id>16449189</id><snippet>a</snippet></ROW><ROW><id>16449189</id><snippet>a</snippet></ROW><ROW><id>16449412</id><snippet>np.nan</snippet></ROW><ROW><id>16449412</id><snippet>r(theta)</snippet></ROW><ROW><id>16449412</id><snippet>r</snippet></ROW><ROW><id>16449412</id><snippet>theta</snippet></ROW><ROW><id>16449412</id><snippet>r(theta)</snippet></ROW><ROW><id>16449412</id><snippet>np.nan</snippet></ROW><ROW><id>16449412</id><snippet>np.nan</snippet></ROW><ROW><id>16449412</id><snippet>rt = r(theta)
ext = [np.argmin(rt), np.argmax(rt)]
rt[ext] = np.nan
</snippet></ROW><ROW><id>16449412</id><snippet>rt</snippet></ROW><ROW><id>16449412</id><snippet>ax2.plot(rt * np.cos(theta), rt * np.sin(theta))
</snippet></ROW><ROW><id>16449589</id><snippet>?</snippet></ROW><ROW><id>16449589</id><snippet>/course/([a-zA-Z][-a-zA-Z]*)/([a-zA-Z][-a-zA-Z]*/)?
#                                                 ^
</snippet></ROW><ROW><id>16449589</id><snippet>[a-zA-Z]+[-a-zA-Z]*</snippet></ROW><ROW><id>16449589</id><snippet>[a-zA-Z][-a-zA-Z]*</snippet></ROW><ROW><id>16449589</id><snippet>(?:…)</snippet></ROW><ROW><id>16449589</id><snippet>/</snippet></ROW><ROW><id>16449589</id><snippet>/course/([a-zA-Z][-a-zA-Z]*)/(?:([a-zA-Z][-a-zA-Z]*)/)?
#                            ~~~                     ~^
</snippet></ROW><ROW><id>16449589</id><snippet>  /course/([a-zA-Z]+[-a-zA-Z]*)/*([a-zA-Z]+[-a-zA-Z]*)/
          ^^^^^^^^^^^^^^^^^^^^^  ~~~~~~~~~~~~~~~~~~~~~
        this matches 'computer'  and this matches the 's'.
</snippet></ROW><ROW><id>16449589</id><snippet>+</snippet></ROW><ROW><id>16449668</id><snippet>else</snippet></ROW><ROW><id>16449668</id><snippet>if</snippet></ROW><ROW><id>16449724</id><snippet>xml.etree.ElementTree.Element</snippet></ROW><ROW><id>16449724</id><snippet>lxml.etree._Element</snippet></ROW><ROW><id>16449724</id><snippet>parent = elt.getparent()
</snippet></ROW><ROW><id>16449724</id><snippet>import lxml.etree as ET
# import xml.etree.ElementTree as ET
text = '''\
&lt;root&gt;
&lt;foo&gt;
    &lt;bar/&gt;
    &lt;bar/&gt;
&lt;/foo&gt;
&lt;/root&gt;'''

root = ET.fromstring(text)
for elt in root.findall('foo/bar'):
    parent = elt.getparent()
    print(parent)
</snippet></ROW><ROW><id>16449724</id><snippet>&lt;Element foo at 0xb7415c34&gt;
&lt;Element foo at 0xb7415c34&gt;
</snippet></ROW><ROW><id>16449753</id><snippet>logging.Formatter</snippet></ROW><ROW><id>16449753</id><snippet>class MyFormatter(logging.Formatter):   
    def format(self, record):
       return record.msg.replace("test", "")

#...
console.setFormatter(MyFormatter())
#...
</snippet></ROW><ROW><id>16449920</id><snippet>&gt;&gt;&gt; d = {'foo': 32, 'bar': 64}
&gt;&gt;&gt; d['bar']
64
</snippet></ROW><ROW><id>16449920</id><snippet>weight = 0

for word in sentence.split():
    weight += weights[word]
</snippet></ROW><ROW><id>16449920</id><snippet>for word in re.finditer(r'(\w+)', sentence):
    ...
</snippet></ROW><ROW><id>16449920</id><snippet>sum</snippet></ROW><ROW><id>16449920</id><snippet>weight = sum(weights[word] for word in sentence.split())
</snippet></ROW><ROW><id>16449920</id><snippet>dict.get()</snippet></ROW><ROW><id>16449920</id><snippet>0</snippet></ROW><ROW><id>16449920</id><snippet>weight = sum(weights.get(word, 0) for word in sentence.split())
</snippet></ROW><ROW><id>16449936</id><snippet>db</snippet></ROW><ROW><id>16449936</id><snippet>nbd</snippet></ROW><ROW><id>16449936</id><snippet>str(key)</snippet></ROW><ROW><id>16449936</id><snippet>ndb</snippet></ROW><ROW><id>16449936</id><snippet>key.urlsafe()</snippet></ROW><ROW><id>16449936</id><snippet>ndb.Key(urlsafe=value)</snippet></ROW><ROW><id>16449936</id><snippet>db</snippet></ROW><ROW><id>16449936</id><snippet>str(key)</snippet></ROW><ROW><id>16449936</id><snippet>db.Key(string_value)</snippet></ROW><ROW><id>16449936</id><snippet>key.id()</snippet></ROW><ROW><id>16449936</id><snippet>ndb</snippet></ROW><ROW><id>16449936</id><snippet>db</snippet></ROW><ROW><id>16449936</id><snippet>db</snippet></ROW><ROW><id>16449936</id><snippet>key.name()</snippet></ROW><ROW><id>16449936</id><snippet>ndb</snippet></ROW><ROW><id>16449936</id><snippet>key.integer_id()</snippet></ROW><ROW><id>16449936</id><snippet>key.string_id()</snippet></ROW><ROW><id>16449936</id><snippet>MyModel.get_by_id(int(value))</snippet></ROW><ROW><id>16449936</id><snippet>protorpc.messages.IntegerField</snippet></ROW><ROW><id>16449936</id><snippet>db</snippet></ROW><ROW><id>16449936</id><snippet>ndb</snippet></ROW><ROW><id>16449949</id><snippet>a = int(a)
h = float(h)
</snippet></ROW><ROW><id>16449949</id><snippet>try:
  h = int(h)
except ValueError:
  print 'the input couldnt be converted into an integer'
</snippet></ROW><ROW><id>16449949</id><snippet>a = input("Enter pyramid base size ")
h = input ("Enter pyramid height size ")

try:
  a = int(a)
  h = int(a)
  p = a*a + 2*a*h

  print (p)
except: ValueError:
  print 'Input cannot be converted to an integer'
</snippet></ROW><ROW><id>16450031</id><snippet>def countVowels(s):
    s = s.lower() #so you don't have to worry about upper and lower cases
    vowels = 'aeiou'
    return {vowel:s.count(vowel) for vowel in vowels} #a bit inefficient, but easy to understand
</snippet></ROW><ROW><id>16450031</id><snippet>def countVowels(s):
    s = s.lower()
    vowels = {'a':0,'e':0,'i':0,'o':0,'u':0}
    for char in s:
        if char in vowels:
            vowels[char]+=1
    return vowels
</snippet></ROW><ROW><id>16450031</id><snippet>def printResults(result_dict):
    print "a, e, i, o, u, appear, respectively, {a},{e},{i},{o},{u} times".format(**result_dict)
</snippet></ROW><ROW><id>16450268</id><snippet>input.xls</snippet></ROW><ROW><id>16450268</id><snippet>from xlrd import open_workbook

input_wb = open_workbook('input.xls', formatting_info=True)
</snippet></ROW><ROW><id>16450268</id><snippet>from xlutils.copy import copy as copy_workbook

output_wb = copy_workbook(input_wb)
</snippet></ROW><ROW><id>16450268</id><snippet>from xlwt import easyxf

red_background = easyxf("pattern: pattern solid, fore_color red;")
black_with_white_font = easyxf('pattern: pattern solid, fore_color black; font: color-index white, bold on;")
</snippet></ROW><ROW><id>16450268</id><snippet>input_ws = input_wb.sheet_by_name('StackOverflow')
output_ws = output_wb.get_sheet(0)

for rindex in range(0, input_ws.nrows):
   for cindex in range(0, input_ws.ncols):
       input_cell = input_ws.cell(rindex, cindex)
       if input_cell.value[ input_cell.value.rfind('.'): ] == 'pf':
           output_ws.write(rindex, cindex, input_cell.value, red_background)
       elif input_cell.value.find('deleted') &gt;= 0:
           output_ws.write(rindex, cindex, input_cell.value, black_with_white_font)
       else:
           pass  # we don't need to modify it
</snippet></ROW><ROW><id>16450268</id><snippet>output_wb.save('output.xls')
</snippet></ROW><ROW><id>16450268</id><snippet>easyxf</snippet></ROW><ROW><id>16450268</id><snippet>def changeCell(worksheet, row, col, text):
    """ Changes a worksheet cell text while preserving formatting """
    # Adapted from http://stackoverflow.com/a/7686555/1545769
    previousCell = worksheet._Worksheet__rows.get(row)._Row__cells.get(col)
    worksheet.write(row, col, text)
    newCell = worksheet._Worksheet__rows.get(row)._Row__cells.get(col)
    newCell.xf_idx = previousCell.xf_idx

# ...

changeCell(worksheet_instance, 155, 2, "New Value")
</snippet></ROW><ROW><id>16450268</id><snippet>find</snippet></ROW><ROW><id>16450268</id><snippet>rfind</snippet></ROW><ROW><id>16450268</id><snippet>-1</snippet></ROW><ROW><id>16450268</id><snippet>input_cell.value.find('deleted') &gt;= 0</snippet></ROW><ROW><id>16450268</id><snippet>.pf</snippet></ROW><ROW><id>16450268</id><snippet>rfind</snippet></ROW><ROW><id>16450281</id><snippet>__str__</snippet></ROW><ROW><id>16450281</id><snippet>print(self.player.hand)
</snippet></ROW><ROW><id>16450281</id><snippet>for card in self.player.hand:
    print(card)
</snippet></ROW><ROW><id>16450281</id><snippet>class Card</snippet></ROW><ROW><id>16450281</id><snippet>def __str__(self):
    return '%s%s' % (self.number, self.suit)
</snippet></ROW><ROW><id>16450281</id><snippet>__eq__</snippet></ROW><ROW><id>16450281</id><snippet>__eq__()</snippet></ROW><ROW><id>16450281</id><snippet>==</snippet></ROW><ROW><id>16450281</id><snippet>def __eq__(self, other):
    return self.number == other.number and self.suit == other.suit
</snippet></ROW><ROW><id>16450378</id><snippet>def grouped(l, n):
    # Yield successive n-sized chunks from l.
    for i in xrange(0, len(l), n):
        yield l[i:i+n]
</snippet></ROW><ROW><id>16450378</id><snippet>@register.filter
def group_by(value, arg):
    return grouped(value, arg)
</snippet></ROW><ROW><id>16450378</id><snippet>{% for group in objects|group_by:2 %}
    &lt;div class="row"&gt;
        {% for obj in group %}
            &lt;div class="span6"&gt;
                foo
            &lt;/div&gt;
        {% endfor %}
    &lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>16450453</id><snippet>def combine(lists, peak=None):
  if not lists:
    yield []
  else:
    for i in lists[0]:
      if peak is None or i &gt; peak:
        for tail in combine(lists[1:], i):
          yield [ i ] + tail

for x in combine([[3,17,19,4],[4,18,10,1],[11,15,13],[7,9,12,16]]): print x

[3, 4, 11, 12]
[3, 4, 11, 16]
[3, 4, 15, 16]
[3, 4, 13, 16]
[3, 10, 11, 12]
[3, 10, 11, 16]
[3, 10, 15, 16]
[3, 10, 13, 16]
[4, 10, 11, 12]
[4, 10, 11, 16]
[4, 10, 15, 16]
[4, 10, 13, 16]
</snippet></ROW><ROW><id>16450549</id><snippet>test = re.compile(r'[T]\d[A-Z] *\d[A-Z]\d')
addr = '12345-67 Ave, Edmonton, AB T1A 2B3, Canada'
test.search(addr).group()
</snippet></ROW><ROW><id>16450549</id><snippet>test.search</snippet></ROW><ROW><id>16450559</id><snippet>import peewee as pw

myDB = pw.MySQLDatabase("mydb", host="mydb.crhauek3cxfw.us-west-2.rds.amazonaws.com", port=3306, user="user", passwd="password")

class MySQLModel(pw.Model):
    """A base model that will use our MySQL database"""
    class Meta:
        database = myDB

class User(MySQLModel):
    username = pw.CharField()
    # etc, etc


# when you're ready to start querying, remember to connect
myDB.connect()
</snippet></ROW><ROW><id>16450642</id><snippet>where (' ' || StringB || ' ') LIKE '% stringa %'
</snippet></ROW><ROW><id>16450642</id><snippet>StringB</snippet></ROW><ROW><id>16450953</id><snippet>'f'</snippet></ROW><ROW><id>16450953</id><snippet>'d'</snippet></ROW><ROW><id>16450953</id><snippet>&gt;&gt;&gt; float_array = array('d', [1, 1.2, 0.34, 9.8, 0.13, 1.1, 0.88, 72])
&gt;&gt;&gt; float_array.byteswap()
&gt;&gt;&gt; s = float_array.tostring()
&gt;&gt;&gt; new_float_array = array('f')
&gt;&gt;&gt; new_float_array.fromstring(s)
&gt;&gt;&gt; new_float_array
array('f', [8.618405945136922e-41, 0.0, 4.189791624753525e-08, 4.17232506322307e-08, -1.9212016359104883e-29, -490.3153076171875, -1.5834066576694083e-23, -6.352746725754018e-23, -360092172025856.0, -5.209340637631123e-17, -1.5917267736367743e-23, -6.352746725754018e-23, -2.141351348326541e+32, 4.89745031096063e-14, 2.950574046482335e-41, 0.0])
</snippet></ROW><ROW><id>16450953</id><snippet>byteswap</snippet></ROW><ROW><id>16450953</id><snippet>&gt;&gt;&gt; float_array = array('d', [1, 1.2, 0.34, 9.8, 0.13, 1.1, 0.88, 72])
&gt;&gt;&gt; s = float_array.tostring()
&gt;&gt;&gt; new_float_array = array('f')
&gt;&gt;&gt; new_float_array.fromstring(s)
&gt;&gt;&gt; new_float_array
array('f', [0.0, 1.875, 4.17232506322307e-08, 1.899999976158142, 1.902320558192722e+17, 1.6699999570846558, -1.5881868392106856e-23, 2.5562498569488525, 9.121204334167384e-33, 1.5049999952316284, -1.5881868392106856e-23, 1.8874999284744263, -71.68000030517578, 1.84499990940094, 0.0, 3.28125])
</snippet></ROW><ROW><id>16450953</id><snippet>tostring</snippet></ROW><ROW><id>16450953</id><snippet>fromstring</snippet></ROW><ROW><id>16450953</id><snippet>tofile</snippet></ROW><ROW><id>16450953</id><snippet>fromfile</snippet></ROW><ROW><id>16450953</id><snippet>&gt;&gt;&gt; print '\n'.join('Val = {}'.format(val) for val in new_float_array[8])
Val = 8.6184E-41
Val = 0.0
Val = 4.1897916E-8
Val = 4.172325E-8
Val = -1.9212016E-29
Val = -490.3153
Val = -1.5834067E-23
</snippet></ROW><ROW><id>16450971</id><snippet>In [1]: class New(object):
   ...:    names = ['foo', 'bar']
   ...:    def __init__(self, *args):
   ...:        for k, v in zip(New.names, args):
   ...:            setattr(self, k, v)
   ...:             

In [2]: a = New(1, 2)

In [3]: a.foo
Out[3]: 1
</snippet></ROW><ROW><id>16450971</id><snippet>In [1]: class New(object):
   ...:     def __init__(self, **kwargs):
   ...:         for k, v in kwargs.iteritems():
   ...:             setattr(self, k, v)
   ...: 

In [2]: a = New(foo=1, bar=2)

In [3]: a.foo
Out[3]: 1
</snippet></ROW><ROW><id>16451084</id><snippet>with open('visit_summary.csv', 'r') as f1, open('clinics.csv', 'w') as f2:
    for line in f1:
        line = line.replace('Calendar: ', '')
        line = line.replace('Something else', '')
        f2.write(line)
</snippet></ROW><ROW><id>16451084</id><snippet>open</snippet></ROW><ROW><id>16451084</id><snippet>close</snippet></ROW><ROW><id>16451084</id><snippet>with</snippet></ROW><ROW><id>16451103</id><snippet>q = Queue.Queue()
result = {}  # used to store the results
for fileName in fileNames:
  q.put(fileName)

def worker():
  while True:
    fileName = q.get()
    if fileName is None:  # EOF?
      return
    subprocess_stuff_using(fileName)
    wait_for_finishing_subprocess()
    checksum = collect_md5_result_for(fileName)
    result[fileName] = checksum  # store it

threads = [ threading.Thread(target=worker) for _i in range(20) ]
for thread in threads:
  thread.start()
  q.put(None)  # one EOF marker for each thread
</snippet></ROW><ROW><id>16451103</id><snippet>result</snippet></ROW><ROW><id>16451106</id><snippet>--update</snippet></ROW><ROW><id>16451106</id><snippet>schemamigration southtut --auto</snippet></ROW><ROW><id>16451106</id><snippet>--update</snippet></ROW><ROW><id>16451130</id><snippet>In [3]: import re
In [4]: re.sub("\([^)]*","(x",'(1) item 1. \n(2) item 2')
Out[4]: '(x) item 1. \n(x) item 2'
</snippet></ROW><ROW><id>16451285</id><snippet>try</snippet></ROW><ROW><id>16451285</id><snippet>except</snippet></ROW><ROW><id>16451285</id><snippet>if not entityExists(id):</snippet></ROW><ROW><id>16451285</id><snippet>if key in mapping: return mapping[key]</snippet></ROW><ROW><id>16451478</id><snippet>backref</snippet></ROW><ROW><id>16451478</id><snippet>Office</snippet></ROW><ROW><id>16451478</id><snippet>user.offices.address</snippet></ROW><ROW><id>16451530</id><snippet>class MyValidationError(Exception):
    pass

def my_function():
    if not foo():
        raise MyValidationError("Error message")
    return 4
</snippet></ROW><ROW><id>16451530</id><snippet>try:
    result = my_function()
except MyValidationError as exception:
    # handle exception here and get error message
    print exception.message
</snippet></ROW><ROW><id>16451549</id><snippet>body</snippet></ROW><ROW><id>16451549</id><snippet>body[i]</snippet></ROW><ROW><id>16451549</id><snippet>body</snippet></ROW><ROW><id>16451549</id><snippet>body</snippet></ROW><ROW><id>16451549</id><snippet>body</snippet></ROW><ROW><id>16451549</id><snippet>bodies</snippet></ROW><ROW><id>16451549</id><snippet>bodies = [body("test_name", i, 1.) for i in range(0, 10)]
bodies[3].L = 2
</snippet></ROW><ROW><id>16451549</id><snippet>body</snippet></ROW><ROW><id>16451549</id><snippet>Body</snippet></ROW><ROW><id>16451595</id><snippet>In [1]: s='[text], text, {text}, itextm'
In [2]: import re
In [3]: re.sub(r'([[{])[^\]}]*',r'\1replaced',s)
Out[3]: '[replaced], text, {replaced}, itextm'
</snippet></ROW><ROW><id>16451595</id><snippet>ireplacedm</snippet></ROW><ROW><id>16451595</id><snippet>In [8]: re.sub(r'([^ ,])text([^ ,])',r'\1replaced\2',s)                                                                                                                     
Out[8]: '[replaced], text, {replaced}, ireplacedm'
</snippet></ROW><ROW><id>16451650</id><snippet>break</snippet></ROW><ROW><id>16451650</id><snippet>else</snippet></ROW><ROW><id>16451650</id><snippet>break</snippet></ROW><ROW><id>16451650</id><snippet>else</snippet></ROW><ROW><id>16451650</id><snippet>break</snippet></ROW><ROW><id>16451650</id><snippet>else</snippet></ROW><ROW><id>16451905</id><snippet>System.out</snippet></ROW><ROW><id>16451905</id><snippet>result</snippet></ROW><ROW><id>16451905</id><snippet>p = subprocess.Popen("java -cp MyProgram.jar package.MyMainClass",
    shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
p.stdin.write(command1)
p.stdin.flush()  # this should trigger the processing in the Java process
result = p.stdout.readline()  # this only proceeds if the Java process flushes
p.stdin.write(command2)
p.stdin.flush()
result = p.stdout.readline()
# and afterwards:
p.stdin.close()
p.stdout.close()
</snippet></ROW><ROW><id>16452055</id><snippet>#</snippet></ROW><ROW><id>16452055</id><snippet>def test_function():
  x = 1 + 2
  y = x - 1
#
  if x &gt; y:
    print('x &gt; y')
#
  return(y)
</snippet></ROW><ROW><id>16452250</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>16452250</id><snippet>array</snippet></ROW><ROW><id>16452250</id><snippet>array</snippet></ROW><ROW><id>16452250</id><snippet>list</snippet></ROW><ROW><id>16452250</id><snippet>mean2 = list(numpy.loadtxt("table_mean.txt"))
return json.dumps({"mean": mean})
</snippet></ROW><ROW><id>16452250</id><snippet>numpy</snippet></ROW><ROW><id>16452300</id><snippet>[variable] = request.GET.get([key])
</snippet></ROW><ROW><id>16452347</id><snippet>hash()</snippet></ROW><ROW><id>16452406</id><snippet>Name,LastName
Andy,Blue
Joe,Smith 
</snippet></ROW><ROW><id>16452406</id><snippet>df = pandas.read_csv('filee.csv') # load trades from csv file       

def updateDataframe(row):
    if row['Name'] == "Joe":
        return "Black"
    else:
        return row['LastName']

df['LastName'] = df.apply(updateDataframe,axis=1)
print df
</snippet></ROW><ROW><id>16452406</id><snippet>   Name LastName
0  Andy     Blue
1   Joe    Black
</snippet></ROW><ROW><id>16452422</id><snippet>import sys
print('\n'.join(sorted(sys.path))) #to know which pythonpath you're using
</snippet></ROW><ROW><id>16452647</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; url_list = ['http://www.google.com', 'http://www.yahoo.com']
&gt;&gt;&gt; json.dumps({'entry': [{'url': v} for v in url_list]})
'{"entry": [{"url": "http://www.google.com"}, {"url": "http://www.yahoo.com"}]}'

&gt;&gt;&gt; print json.dumps({'entry': [{'url': v} for v in url_list]}, indent=4)
{
    "entry": [
        {
            "url": "http://www.google.com"
        }, 
        {
            "url": "http://www.yahoo.com"
        }
    ]
}
</snippet></ROW><ROW><id>16452674</id><snippet>CallAfter</snippet></ROW><ROW><id>16452674</id><snippet>Publisher</snippet></ROW><ROW><id>16452674</id><snippet>Condition</snippet></ROW><ROW><id>16452674</id><snippet>Queue</snippet></ROW><ROW><id>16452674</id><snippet>EVT_RESULT</snippet></ROW><ROW><id>16452674</id><snippet>from queue import Queue
# ...

class TestThread(Thread):
# ...
    def run(self):
        for i in range(6):
            # ...
            wx.PostEvent(self.wxObject, ResultEvent(amtOfTime)
            result_from_gui = self.wxObject.q.get(True, None)
# ...

class MyForm(wx.Frame):
# ...
    def __init__(self):
        # ...
        self.q = Queue()
    # ...
    def updateDisplay(self, msg):
        # ...
        t = msg.data
        if isinstance(t, int):
            text = "Time since thread started: %s seconds" % t
        else:
            text = "%s" % t
            self.btn.Enable()
        self.displayLbl.SetLabel(text)
        self.q.put(text)
</snippet></ROW><ROW><id>16452674</id><snippet>self.q.put(text)</snippet></ROW><ROW><id>16452674</id><snippet>updateDisplay</snippet></ROW><ROW><id>16452674</id><snippet>updateDisplay</snippet></ROW><ROW><id>16452674</id><snippet>self.q.put</snippet></ROW><ROW><id>16452734</id><snippet>"&lt;"</snippet></ROW><ROW><id>16452734</id><snippet>"&gt;"</snippet></ROW><ROW><id>16452899</id><snippet>import ctypes

def int32_to_uint32(i):
    return ctypes.c_uint32(i).value
</snippet></ROW><ROW><id>16453031</id><snippet>conn = lite.connect("source")
</snippet></ROW><ROW><id>16453031</id><snippet>"source"</snippet></ROW><ROW><id>16453031</id><snippet>conn = lite.connect(source)</snippet></ROW><ROW><id>16453124</id><snippet>import subprocess
import os

def is_filesys_fat32(path):

    try:
        subprocess.check_call(['df', '--type=fat32', path], stdout=os.devnull)
    except:
        return False

    return True
</snippet></ROW><ROW><id>16453124</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>16453198</id><snippet>f.write(root)</snippet></ROW><ROW><id>16453198</id><snippet>root.write(f)</snippet></ROW><ROW><id>16453234</id><snippet>import operator
from collections import Counter
from math import factorial
def npermutations(l):
    num = factorial(len(l))
    mults = Counter(l).values()
    den = reduce(operator.mul, (factorial(v) for v in mults), 1)
    return num / den
</snippet></ROW><ROW><id>16453234</id><snippet>&gt;&gt;&gt; npermutations([1,1,1])
1
&gt;&gt;&gt; npermutations([1,2,3])
6
&gt;&gt;&gt; npermutations([1,3,1,2,1,3,1,2])
420
</snippet></ROW><ROW><id>16453334</id><snippet>def main():
  x = 10     #&lt;---x in enclosing scope

  def f():
    print x    #&lt;-----

    x = x + 1
</snippet></ROW><ROW><id>16453334</id><snippet>def dostuff ():
    x = 10 

    def f():
        print x

        if False:  #The body of the if will never execute...
            a b c  #...yet the parser finds a syntax error here


    return f

f = dostuff()
f()



--output:--
File "1.py", line 8
     a b c
      ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>16453334</id><snippet>def dostuff ():
    x = 10 

    def f():
        print x

        if False:  #The body of the if will never execute...
            x = 0  #..yet the parser marks x as a local variable

    return f

f = dostuff()
f()
</snippet></ROW><ROW><id>16453334</id><snippet>Traceback (most recent call last):
  File "1.py", line 11, in &lt;module&gt;
    f()
  File "1.py", line 4, in f
    print x
UnboundLocalError: local variable 'x' referenced before assignment
</snippet></ROW><ROW><id>16453334</id><snippet>x[0] = x[0] + 1
</snippet></ROW><ROW><id>16453385</id><snippet>def print_monthly_totals (input_csv_filename):
    data = open(input_csv_filename).readlines()
    print('Rainfall totals for each month')
    for line in data:
        columns = line.split(',')
        month, num_days = int(columns[0]), int(columns[1])
        daily_rainfalls = [float(x) for x in columns[2:2+num_days]]
        total_rainfall = sum(daily_rainfalls)

        print('Month {:2}: {:.1f}'.format(month, total_rainfall))
</snippet></ROW><ROW><id>16453385</id><snippet>def line_to_rainfall(line):
    cols = line.split(",")
    month, num_days = int(cols[0]), int(cols[1])
    daily_rainfalls = [float(x) for x in cols[2:2+num_days]]
    return month, daily_rainfalls


def print_monthly_totals (input_csv_filename):
    data = open(input_csv_filename).readlines()
    print('Rainfall totals for each month')
    for line in data:
        month, daily_rainfalls = line_to_rainfall(line)
        total_rainfall = sum(daily_rainfalls)
        print('Month {:2}: {:.1f}'.format(month, total_rainfall))
</snippet></ROW><ROW><id>16453828</id><snippet>cat /proc/sys/fs/file-max
</snippet></ROW><ROW><id>16453914</id><snippet>Main().main</snippet></ROW><ROW><id>16453914</id><snippet>Main().main()</snippet></ROW><ROW><id>16454036</id><snippet>pdb</snippet></ROW><ROW><id>16454036</id><snippet>gdb</snippet></ROW><ROW><id>16454036</id><snippet>gdb</snippet></ROW><ROW><id>16454036</id><snippet>gdb python
</snippet></ROW><ROW><id>16454036</id><snippet>(gdb) run &lt;myscript&gt;.py
</snippet></ROW><ROW><id>16454048</id><snippet>def moveForward():
   global angle, angle_speed, world_loc, maxSize
   rad = (angle+90) * (pi/180)
   world_loc = (world_loc[0] - speed * cos(rad), world_loc[1], world_loc[2] - speed *    sin(rad))
</snippet></ROW><ROW><id>16454195</id><snippet>db.online_users.insert(user)
</snippet></ROW><ROW><id>16454196</id><snippet>np.nan</snippet></ROW><ROW><id>16454196</id><snippet>scatter</snippet></ROW><ROW><id>16454196</id><snippet>ax.plot(x, y, linestyle='none', marker='o')
</snippet></ROW><ROW><id>16454204</id><snippet>d = {x[:2]:'item'+str(i+1) for i, x in enumerate(my_list)}
</snippet></ROW><ROW><id>16454204</id><snippet>x[:2]</snippet></ROW><ROW><id>16454204</id><snippet>x</snippet></ROW><ROW><id>16454204</id><snippet>enumerate</snippet></ROW><ROW><id>16454204</id><snippet>enumerate</snippet></ROW><ROW><id>16454204</id><snippet>&gt;&gt;&gt; for enum in enumerate(my_list): 
        print(enum)

(0, (1, 2, 3, 4))
(1, (5, 6, 7, 8))
</snippet></ROW><ROW><id>16454204</id><snippet>tuple</snippet></ROW><ROW><id>16454204</id><snippet>&gt;&gt;&gt; for i, x in enumerate(my_list):
        print(str(i) + " : " + str(x))

0 : (1, 2, 3, 4)
1 : (5, 6, 7, 8)
</snippet></ROW><ROW><id>16454364</id><snippet>range</snippet></ROW><ROW><id>16454364</id><snippet>for i in list2:
    if i &gt; list1[0] and i &lt; list1[1]:
        print i
</snippet></ROW><ROW><id>16454364</id><snippet>&gt;</snippet></ROW><ROW><id>16454364</id><snippet>&gt;=</snippet></ROW><ROW><id>16454364</id><snippet>&lt;</snippet></ROW><ROW><id>16454364</id><snippet>&lt;=</snippet></ROW><ROW><id>16454364</id><snippet>list3 = [i for i in list2 if i &gt; list1[0] and i &lt; list1[1]]
</snippet></ROW><ROW><id>16454364</id><snippet>list3 = [i for i in list2 if list1[0] &lt; i &lt; list1[1]]
</snippet></ROW><ROW><id>16454614</id><snippet>#include &lt;Python/Python.h&gt;
</snippet></ROW><ROW><id>16454614</id><snippet>gcc</snippet></ROW><ROW><id>16454614</id><snippet>-framework</snippet></ROW><ROW><id>16454614</id><snippet>gcc -shared -o sample.so sample.c -framework Python
</snippet></ROW><ROW><id>16454779</id><snippet>if match:
    print "Hash: %s" % match[0]
</snippet></ROW><ROW><id>16454969</id><snippet>from tkinter import *

class App():
    def __init__(self):
        root = Tk()

        self.last_point = (0, 0)

        self.prev_var = StringVar(value='-:-')
        self.curr_var = StringVar(value='-:-')

        labels = Frame(root)
        labels.pack()

        Label(labels, text='Last Point Clicked: ').pack(side=LEFT)
        prev = Label(labels, textvariable=self.prev_var)
        prev.pack(side=LEFT)
        Label(labels, text='Current point: ').pack(side=LEFT)
        curr = Label(labels, textvariable=self.curr_var)
        curr.pack(side=LEFT)

        self.canvas = Canvas(root, background='white')
        self.canvas.pack()
        self.canvas.bind('&lt;Button-1&gt;', self.on_click)

        self.canvas.bind('&lt;Motion&gt;', self.on_motion)
        self.line = self.canvas.create_line(0, 0, 0, 0)
        self.curr_text = self.canvas.create_text(0, 0)

        root.mainloop()
    def on_click(self, event):
        # Last click in absolute coordinates
        self.prev_var.set('%s:%s' % self.last_point)
        # Current point in relative coordinates
        self.curr_var.set('%s:%s' % (event.x - self.last_point[0], event.y - self.last_point[1]))
        self.last_point = event.x, event.y
    def on_motion(self, event):
        self.canvas.coords(self.line, self.last_point[0], self.last_point[1], event.x, event.y)
        self.canvas.coords(self.curr_text, event.x, event.y)
        self.canvas.itemconfigure(self.curr_text, text="%s\n%s\n\n\n" % (event.x - self.last_point[0], event.y - self.last_point[1]))

App()
</snippet></ROW><ROW><id>16455009</id><snippet>doc = search.Document(fields=[
    search.TextField(name='tags', value='tag1 tag2 tag3'),
])
search.Index(name='tags').put(doc)
</snippet></ROW><ROW><id>16455009</id><snippet>doc = search.Document(fields=[
    search.TextField(name='tags', value='123 456 789'),
])
</snippet></ROW><ROW><id>16455009</id><snippet>index = search.Index(name='tags')
results = index.search('tags:(("tag1" AND "tag2") OR ("tag3" AND "tag4"))')
</snippet></ROW><ROW><id>16455261</id><snippet>datasources.google</snippet></ROW><ROW><id>16455261</id><snippet>import whatevermodule</snippet></ROW><ROW><id>16455261</id><snippet>datasources.google.dowhatever(thing)
</snippet></ROW><ROW><id>16455261</id><snippet>datasources.google</snippet></ROW><ROW><id>16455261</id><snippet>as google</snippet></ROW><ROW><id>16455261</id><snippet>google.dowhatever(thing)
</snippet></ROW><ROW><id>16455328</id><snippet>os.listdir</snippet></ROW><ROW><id>16455328</id><snippet>import os
path = r"\users\temp"   #use raw string as otherwise \t will be converted to tab space
folder = [x for x in os.listdir(path) if os.path.isdir(os.path.join(path,x))]
</snippet></ROW><ROW><id>16455629</id><snippet>&gt;&gt;&gt; lis = ['gold', 'diamond', 'wood']
&gt;&gt;&gt; points = dict.fromkeys(lis,0)     #create a dict from the list with initial value as 0
&gt;&gt;&gt; with open("abc") as f:            #use with context manger to open filees
...     for line in f: 
...         key,val = line.split()   # no need of regex     
...         if key in points:        #if key is present in points then increment it's value
...             points[key] += int(val)   #use points[key] syntax to access a dict
...             
&gt;&gt;&gt; points
{'gold': 4, 'wood': 3, 'diamond': 1}
</snippet></ROW><ROW><id>16455690</id><snippet>__unicode__</snippet></ROW><ROW><id>16455718</id><snippet>j</snippet></ROW><ROW><id>16455718</id><snippet>i</snippet></ROW><ROW><id>16455718</id><snippet>line = line.replace('i', 'j').split()
</snippet></ROW><ROW><id>16455718</id><snippet>line=line.split()</snippet></ROW><ROW><id>16455718</id><snippet>.split()</snippet></ROW><ROW><id>16455718</id><snippet>array</snippet></ROW><ROW><id>16455718</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>16455792</id><snippet>struct</snippet></ROW><ROW><id>16455792</id><snippet>import struct
int_no = struct.unpack('&gt;H', v)[0]
print int_no
</snippet></ROW><ROW><id>16455792</id><snippet>44718
</snippet></ROW><ROW><id>16455812</id><snippet>class Person:
    def __init__(self, Name, Age, Gender):
        self.Name = Name
        self.Age = Age
        self.Gender = Gender


&gt;&gt;&gt; PeopleList = [Person("Joan", 15, "F"), 
              Person("Henry", 18, "M"), 
              Person("Marg", 21, "F")]
&gt;&gt;&gt; sum(p.Gender == "F" for p in PeopleList)
2
&gt;&gt;&gt; sum(p.Age &lt; 20 for p in PeopleList)
2
</snippet></ROW><ROW><id>16456275</id><snippet>settings.py</snippet></ROW><ROW><id>16456275</id><snippet>flag</snippet></ROW><ROW><id>16456275</id><snippet>1,2 or 3</snippet></ROW><ROW><id>16456275</id><snippet>flag</snippet></ROW><ROW><id>16456275</id><snippet>templates and static DIR</snippet></ROW><ROW><id>16456275</id><snippet>views.py,urls.py,models.py</snippet></ROW><ROW><id>16456510</id><snippet>port</snippet></ROW><ROW><id>16456510</id><snippet>str</snippet></ROW><ROW><id>16456510</id><snippet>port = int(input())</snippet></ROW><ROW><id>16456510</id><snippet>b'0x2E'</snippet></ROW><ROW><id>16456510</id><snippet>chr(0x2E)</snippet></ROW><ROW><id>16456510</id><snippet>'\x2E'</snippet></ROW><ROW><id>16456531</id><snippet>conditions = {'title':{'$regex':'test'},'status':{'$regex':'active'} ..... other conditions }
data = db.entry.find(conditions).limit(3);
</snippet></ROW><ROW><id>16456681</id><snippet>if first == 'a' or 'e' or 'i' or 'o' or 'u':
</snippet></ROW><ROW><id>16456681</id><snippet>if (first == 'a') or 'e' or 'i' or 'o' or 'u':
</snippet></ROW><ROW><id>16456681</id><snippet>if first == 'a' or first == 'e' or first == 'i' or first == 'o' or first == 'u':
</snippet></ROW><ROW><id>16456681</id><snippet>if first in "aeiou":
</snippet></ROW><ROW><id>16457484</id><snippet>input</snippet></ROW><ROW><id>16457484</id><snippet>e</snippet></ROW><ROW><id>16457484</id><snippet>raw_input</snippet></ROW><ROW><id>16457484</id><snippet>input</snippet></ROW><ROW><id>16457573</id><snippet>pandas.lib.fast_zip</snippet></ROW><ROW><id>16457573</id><snippet>import pandas as pd
df = pd.DataFrame({'x': [1, 1, 2, 2, 1, 1], 'y':[1, 2, 2, 2, 2, 1]})
print pd.factorize(pd.lib.fast_zip([df.x, df.y]))[0]
</snippet></ROW><ROW><id>16457573</id><snippet>[0 1 2 2 1 0]
</snippet></ROW><ROW><id>16458028</id><snippet>handles = pywinauto.findwindows.find_windows()
for w_handle in handles:
    wind = app.window_(handle=w_handle)
    print wind.Texts()
</snippet></ROW><ROW><id>16458028</id><snippet>find_windows</snippet></ROW><ROW><id>16458098</id><snippet>Serial.write()</snippet></ROW><ROW><id>16458098</id><snippet>Serial.write()</snippet></ROW><ROW><id>16458430</id><snippet>In [1]: from string import Formatter

In [2]: value = { 
   ...:     'a': '100', 
   ...:     'bits': {
   ...:         1: 'alpha', 
   ...:         2: 'beta', 
   ...:         3: ['31', '32', 901]}}

In [3]: class YourFormatter(Formatter):
   ...:     def get_value(self, field_name, args, kwargs):
   ...:         return kwargs.get(field_name, '')
   ...: 
   ...:     def get_field(self, field_name, args, kwargs):
   ...:         first, rest = field_name._formatter_field_name_split() 
   ...:         obj = self.get_value(first, args, kwargs) 
   ...:         
   ...:         for is_attr, i in rest:
   ...:             if is_attr:
   ...:                 obj = getattr(obj, i)
   ...:             else:
   ...:                 obj = obj.get(i, '')
   ...:         return obj, first
   ...:     


In [4]: fmt = YourFormatter()

In [5]: fmt.format("a={a}, b1={bits[1]}, b31={bits[3]}, b9={bits[9]}", **value)
Out[5]: "a=100, b1=alpha, b31=['31', '32', 901], b9="
</snippet></ROW><ROW><id>16458514</id><snippet>stmt = """
INSERT INTO Entries (PForm, WForm, Code, Freq, Pattern)
    VALUES ('%s', '%s', '%s', %s, '%s')
"""

params = tuple(t for t in tokens)

conn.execute(stmt % params)
</snippet></ROW><ROW><id>16458514</id><snippet>INSERT</snippet></ROW><ROW><id>16458514</id><snippet>conn.execute("INSERT INTO Foo VALUES (?, ?, ?)", (foo, bar, baz))
</snippet></ROW><ROW><id>16458780</id><snippet>def common_entries(*dcts):
    for i in set(dcts[0]).intersection(*dcts[1:]):
        yield (i,) + tuple(d[i] for d in dcts)
</snippet></ROW><ROW><id>16458780</id><snippet>zip</snippet></ROW><ROW><id>16458780</id><snippet>&gt;&gt;&gt; da = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; db = {'a': 4, 'b': 5, 'c': 6}
&gt;&gt;&gt; list(common_entries(da, db))
[('c', 3, 6), ('b', 2, 5), ('a', 1, 4)]
</snippet></ROW><ROW><id>16458780</id><snippet>dct.items()</snippet></ROW><ROW><id>16458780</id><snippet>&gt;&gt;&gt; list(common_entries(da))
[('c', 3), ('b', 2), ('a', 1)]
</snippet></ROW><ROW><id>16459064</id><snippet>def post(self, *a, **kw):
        answer = self.request.get("answer")
        sURL = self.request.url.split("-")
        question = Questions.get_by_id(long(sURL[-1]))
        question.answers.append(answer)
        **question.put()** &lt;-- add this
</snippet></ROW><ROW><id>16459315</id><snippet>sales = models.ForeignKey(User)</snippet></ROW><ROW><id>16459315</id><snippet>student_student.sales_id</snippet></ROW><ROW><id>16459315</id><snippet>sales_id</snippet></ROW><ROW><id>16459315</id><snippet>blank=True</snippet></ROW><ROW><id>16459315</id><snippet>null=True</snippet></ROW><ROW><id>16459658</id><snippet>def ClearText123(self, event):
    if self.Savings_TermYears.GetValue() == 'Years': # if the control isn't blank, clear it
        self.Savings_TermYears.Clear()
        self.Savings_TermYears.Unbind(wx.EVT_LEFT_DOWN)
    self.Savings_TermYears.SetFocus()
</snippet></ROW><ROW><id>16459780</id><snippet>patch</snippet></ROW><ROW><id>16459780</id><snippet>from mock import patch

with patch('module1.function1') as function1:
    function1.side_effect = function_object
    # Do stuff
</snippet></ROW><ROW><id>16459780</id><snippet>function1</snippet></ROW><ROW><id>16459780</id><snippet>with</snippet></ROW><ROW><id>16459780</id><snippet>function_object</snippet></ROW><ROW><id>16459780</id><snippet>@patch('module1.function1')
def my_test(function1):
    function1.side_effect = function_object
    # Do stuff
</snippet></ROW><ROW><id>16459786</id><snippet>[expr for variable in iterable]</snippet></ROW><ROW><id>16459786</id><snippet>iterable</snippet></ROW><ROW><id>16459786</id><snippet>variable</snippet></ROW><ROW><id>16459786</id><snippet>expr</snippet></ROW><ROW><id>16459786</id><snippet>WordLenLi = [len(word) for word in st.split()]
print(WordLenLi)
</snippet></ROW><ROW><id>16459786</id><snippet>&gt;&gt;&gt; 
[5, 2, 3, 7, 6, 8, 6, 3, 2, 3, 4, 5, 6, 6, 3, 7, 8, 4, 5, 4, 6, 5]
</snippet></ROW><ROW><id>16459786</id><snippet>WordLenLi = []
for word in st.split(): #for each word in a list of words
    WordLenLi.append(len(word)) #insert the length of the word into WordLenLi
</snippet></ROW><ROW><id>16459786</id><snippet>WordLenLi = [(word,len(word)) for word in st.split()]
print(WordLenLi)
&gt;&gt;&gt; 
[('April', 5), ('is', 2), ('the', 3), ('crueles', 7), ('month,', 6), ('breeding', 8), ('Lilacs', 6), ('out', 3), ('of', 2), ('the', 3), ('dead', 4), ('land,', 5), ('mixing', 6), ('Memory', 6), ('and', 3), ('desire,', 7), ('stirring', 8), ('Dull', 4), ('roots', 5), ('with', 4), ('spring', 6), ('rain.', 5)]
</snippet></ROW><ROW><id>16459786</id><snippet>WordLenLi = map(len,st.split())
</snippet></ROW><ROW><id>16459786</id><snippet>st.split()</snippet></ROW><ROW><id>16459786</id><snippet>re.findall(r'\b[\w\d%s]+\b' % string.punctuation,st)
</snippet></ROW><ROW><id>16459786</id><snippet>import re,string</snippet></ROW><ROW><id>16459900</id><snippet># Fibonacci Series.
def Fibonacci(num) :
    F_1 = 0
    F_2 = 1
    Fibo = 0
    for i in list(range(num)) :
        Fibo = F_1 + F_2
        F_1 = F_2
        F_2 = Fibo
    return Fibo

print(Fibonacci(7))
</snippet></ROW><ROW><id>16460100</id><snippet>for record in data:
    new_rec = [record[0], " ".join(record[1:])]
</snippet></ROW><ROW><id>16460139</id><snippet>sentences = re.findall(r'([A-Z].*?)[.!?;]', stripped_value, re.MULTILINE | re.DOTALL | re.UNICODE)
</snippet></ROW><ROW><id>16460139</id><snippet>.findall()</snippet></ROW><ROW><id>16460139</id><snippet>&gt;&gt;&gt; stripped_value = '''Some sentence. And another.
... Multiline text works too! And commas, they are included; but not the semicolon?
... '''
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'([A-Z].*?)[.!?;]', stripped_value, re.MULTILINE | re.DOTALL | re.UNICODE)
['Some sentence', 'And another', 'Multiline text works too', 'And commas, they are included']
</snippet></ROW><ROW><id>16460139</id><snippet>re.findall()</snippet></ROW><ROW><id>16460139</id><snippet>sentences = re.findall("[A-Z].*?(?=[\.!?;])", stripped_value, re.MULTILINE | re.DOTALL | re.UNICODE)
</snippet></ROW><ROW><id>16460139</id><snippet>(?=..)</snippet></ROW><ROW><id>16460139</id><snippet>.findall()</snippet></ROW><ROW><id>16460480</id><snippet>~/.bashrc</snippet></ROW><ROW><id>16460480</id><snippet>export PIP_REQUIRE_VIRTUALENV=true
</snippet></ROW><ROW><id>16460480</id><snippet>false</snippet></ROW><ROW><id>16460480</id><snippet>source ~/.bashrc
</snippet></ROW><ROW><id>16460480</id><snippet>export PIP_REQUIRE_VIRTUALENV=false</snippet></ROW><ROW><id>16460795</id><snippet>UniqueConstraint</snippet></ROW><ROW><id>16460795</id><snippet>__table_args__</snippet></ROW><ROW><id>16460795</id><snippet>class Bar(Base):
    __tablename__ = "bar"
    __table_args__ = (UniqueConstraint("baz", "qux"),)

    id = Column(Integer, primary_key=True)
    baz = Column(Integer, ForeignKey("foo.id"))
    qux = Column(Integer, ForeignKey("foo.id"))

class Cruft(Base):
    __tablename__ = "cruft"
    __table_args__ = (UniqueConstraint("bar", "qux"),)

    id = Column(Integer, primary_key=True)
    bar = Column(Integer, ForeignKey("foo.id"))
    qux = Column(Integer, ForeignKey("foo.id"))
</snippet></ROW><ROW><id>16460795</id><snippet>2013-05-09 13:38:44,180 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE cruft (
    id INTEGER NOT NULL, 
    bar INTEGER, 
    qux INTEGER, 
    PRIMARY KEY (id), 
    UNIQUE (bar, qux), 
    FOREIGN KEY(bar) REFERENCES foo (id), 
    FOREIGN KEY(qux) REFERENCES foo (id)
)

...

2013-05-09 13:38:44,181 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE bar (
    id INTEGER NOT NULL, 
    baz INTEGER, 
    qux INTEGER, 
    PRIMARY KEY (id), 
    UNIQUE (baz, qux), 
    FOREIGN KEY(baz) REFERENCES foo (id), 
    FOREIGN KEY(qux) REFERENCES foo (id)
)
</snippet></ROW><ROW><id>16460857</id><snippet>frameLine = Frame(...)
frameMatrix = Frame(...)
frameImage = Frame(...)
...
frameLink.pack(side="bottom", fill="x")
frameMatrix.pack(side="left", fill="both")
frameImage.pack(side="right", fill="both")
</snippet></ROW><ROW><id>16460857</id><snippet>expand=True</snippet></ROW><ROW><id>16461208</id><snippet>PyCObject_FromVoidPtrAndDesc</snippet></ROW><ROW><id>16461208</id><snippet>###### example.pyx ######

from libc.stdlib cimport malloc, free
from cpython.cobject cimport PyCObject_FromVoidPtrAndDesc

cdef int _shift_function(int *output_coordinates, double* input_coordinates,
            int output_rank, int input_rank, double *shift_data):
    cdef double shift = shift_data[0]
    cdef int ii
    for ii in range(input_rank):
        input_coordinates[ii] = output_coordinates[ii] - shift
    return 1

cdef void _shift_destructor(void* cobject, void *shift_data):
    free(shift_data)

def shift_function(double shift):
    """This is the function callable from python."""
    cdef double* shift_data = &lt;double*&gt;malloc(sizeof(shift))
    shift_data[0] = shift
    return PyCObject_FromVoidPtrAndDesc(&amp;_shift_function,
                                        shift_data,
                                        &amp;_shift_destructor)
</snippet></ROW><ROW><id>16461208</id><snippet>&amp;</snippet></ROW><ROW><id>16461208</id><snippet>*</snippet></ROW><ROW><id>16461208</id><snippet>*ptr</snippet></ROW><ROW><id>16461208</id><snippet>ptr[0]</snippet></ROW><ROW><id>16461227</id><snippet>/admin/shops</snippet></ROW><ROW><id>16461227</id><snippet>shop_url</snippet></ROW><ROW><id>16461227</id><snippet>shopify.Shop.get()</snippet></ROW><ROW><id>16461227</id><snippet>.get()</snippet></ROW><ROW><id>16461227</id><snippet>shopify.Shop.get_current()</snippet></ROW><ROW><id>16461227</id><snippet>.attributes</snippet></ROW><ROW><id>16461227</id><snippet>shop = shopify.Shop.get_current()
print shop.attributes.keys()
print shop.name 
</snippet></ROW><ROW><id>16461594</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>16461594</id><snippet>close()</snippet></ROW><ROW><id>16461630</id><snippet>with open("/tmp/myfile.html", "w") as my_file:
  my_file.write("&lt;html&gt;&lt;body&gt;&lt;table&gt;")
  for x in range(5):
    my_file.write("&lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;&lt;/tr&gt;" % x)
  my_file.write("&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;")
</snippet></ROW><ROW><id>16461814</id><snippet>try:</snippet></ROW><ROW><id>16461814</id><snippet>except</snippet></ROW><ROW><id>16461814</id><snippet>try:
    # ...
except SomeException as e:
    # log information about `e`
    raise
</snippet></ROW><ROW><id>16461898</id><snippet>Button</snippet></ROW><ROW><id>16461898</id><snippet>command</snippet></ROW><ROW><id>16461898</id><snippet>self.check_number()</snippet></ROW><ROW><id>16461898</id><snippet>Button(self,
       text = "Click to submit",
       command = self.check_number
       ).grid(row = 2, column = 0, sticky = W)
</snippet></ROW><ROW><id>16462031</id><snippet>from tkinter import *

text = r"""
        .---.
       |   '.|  __
       | ___.--'  )
     _.-'_` _%%%_/
  .-'%%% a: a %%%
      %%  L   %%_
      _%\'-' |  /-.__
   .-' / )--' #/     '\
  /'  /  /---'(    :   \
 /   |  /( /|##|  \     |
/   ||# | / | /|   \    \
|   ||##| I \/ |   |   _|
|   ||: | o  |#|   |  / |
|   ||  / I  |:/  /   |/
|   ||  | o   /  /    /
|   \|  | I  |. /    /
 \  /|##| o  |.|    /
  \/ \::|/\_ /  ---'|
  """

root = Tk()
Label(root, justify=LEFT, text=text).pack()
root.mainloop()
</snippet></ROW><ROW><id>16462437</id><snippet>def add_path(root, path):
    if path:
        child = root.setdefault(path[0], {})
        add_path(child, path[1:])

root = {}
with open('tree.txt') as f:
    for p in f:
        add_path(root, p.strip().split('.'))

import json
print json.dumps(root,  indent=4)
</snippet></ROW><ROW><id>16462437</id><snippet>{
    "a": {
        "x": {
            "y": {
                "a": {}, 
                "z": {}, 
                "b": {}
            }
        }, 
        "c": {}, 
        "b": {
            "c": {
                "d": {}
            }
        }, 
        "d": {}, 
        "subtree": {}
    }
}
</snippet></ROW><ROW><id>16462565</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>16462565</id><snippet>asyncLoad()</snippet></ROW><ROW><id>16462763</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>16462763</id><snippet>&lt;form action="." method="post"&gt;{% csrf_token %}
</snippet></ROW><ROW><id>16462997</id><snippet>Canvas</snippet></ROW><ROW><id>16462997</id><snippet>import tkinter

frame = tkinter.Tk()
frame.config(height = 370, width = 670, bg = "#C2C2D6")
user_name = tkinter.Entry(frame, exportselection = 0,)
user_name.pack(padx=100, pady=100, expand=True, fill=tkinter.X)
frame.mainloop()
</snippet></ROW><ROW><id>16463386</id><snippet>quad()</snippet></ROW><ROW><id>16463386</id><snippet>&gt;&gt;&gt; from scipy.integrate import quad
&gt;&gt;&gt; def f(x):
...     return x**2
... 
&gt;&gt;&gt; quad(f, 0, 1)
(0.33333333333333337, 3.700743415417189e-15)
</snippet></ROW><ROW><id>16463386</id><snippet>f()</snippet></ROW><ROW><id>16463386</id><snippet>&gt;&gt;&gt; from scipy.integrate import simps
&gt;&gt;&gt; x_grid = numpy.linspace(0, 1, 101)  # 101 numbers between 0 and 1
&gt;&gt;&gt; simps(x_grid**2, dx=x_grid[1]-x_grid[0])  # x_grid**2 is an *array*.  dx=0.01 between x_grid values
0.33333333333333337
</snippet></ROW><ROW><id>16463386</id><snippet>cumtrapz()</snippet></ROW><ROW><id>16463386</id><snippet>simps()</snippet></ROW><ROW><id>16463386</id><snippet>romb()</snippet></ROW><ROW><id>16463488</id><snippet>yield</snippet></ROW><ROW><id>16463488</id><snippet>yield</snippet></ROW><ROW><id>16463497</id><snippet>w = Frame ( master, option, ... )

Parameters:
    master: This represents the parent window.
</snippet></ROW><ROW><id>16463497</id><snippet>self.frame_type</snippet></ROW><ROW><id>16463951</id><snippet>hashcompat</snippet></ROW><ROW><id>16464130</id><snippet>fathers = Fathers.objects.all()
sons = Son.objects.filter(father__in=fathers, age=20)
</snippet></ROW><ROW><id>16464130</id><snippet>sons = Son.objects.filter(age=20)
</snippet></ROW><ROW><id>16464130</id><snippet>father = Fathers.objects.get(id=101)
sons = Son.objects.filter(father=father, age=20)
</snippet></ROW><ROW><id>16464294</id><snippet>'bee foo zee bar bee'</snippet></ROW><ROW><id>16464294</id><snippet>['bee', 'foo', 'zee', 'bar', 'bee']</snippet></ROW><ROW><id>16464294</id><snippet>from itertools import product

repl = {
    'bee': 'BETA',
    'zee': 'ZETA',
    'dee': 'DELTA'
}
source_string = 'bee foo zee bar bee'
p = product(*((x, repl[x]) if x in repl else (x,) for x in source_string.split()))
for x in p:
    print(x)
</snippet></ROW><ROW><id>16464294</id><snippet>('bee', 'foo', 'zee', 'bar', 'bee')
('bee', 'foo', 'zee', 'bar', 'BETA')
('bee', 'foo', 'ZETA', 'bar', 'bee')
('bee', 'foo', 'ZETA', 'bar', 'BETA')
('BETA', 'foo', 'zee', 'bar', 'bee')
('BETA', 'foo', 'zee', 'bar', 'BETA')
('BETA', 'foo', 'ZETA', 'bar', 'bee')
('BETA', 'foo', 'ZETA', 'bar', 'BETA')
</snippet></ROW><ROW><id>16464296</id><snippet>stat</snippet></ROW><ROW><id>16464296</id><snippet>.st_atime</snippet></ROW><ROW><id>16464296</id><snippet>print time.ctime(os.stat('my_path/test.txt').st_atime)
</snippet></ROW><ROW><id>16464296</id><snippet>os.stat()</snippet></ROW><ROW><id>16464296</id><snippet>st_atime</snippet></ROW><ROW><id>16464296</id><snippet>atime</snippet></ROW><ROW><id>16464296</id><snippet>relatime</snippet></ROW><ROW><id>16464296</id><snippet>atime</snippet></ROW><ROW><id>16464296</id><snippet>strictatime</snippet></ROW><ROW><id>16464296</id><snippet>fstab</snippet></ROW><ROW><id>16464296</id><snippet>atime</snippet></ROW><ROW><id>16464555</id><snippet>import json

def persist_to_file(file_name):

    def decorator(original_func):

        try:
            cache = json.load(open(file_name, 'r'))
        except (IOError, ValueError):
            cache = {}

        def new_func(param):
            if param not in cache:
                cache[param] = original_func(param)
                json.dump(cache, open(file_name, 'w'))
            return cache[param]

        return new_func

    return decorator
</snippet></ROW><ROW><id>16464555</id><snippet>@persist_to_file('cache.dat')
def html_of_url(url):
    your function code...
</snippet></ROW><ROW><id>16464555</id><snippet>import json, atexit

def persist_to_file(file_name):

    try:
        cache = json.load(open(file_name, 'r'))
    except (IOError, ValueError):
        cache = {}

    atexit.register(lambda: json.dump(cache, open(file_name, 'w')))

    def decorator(func):
        def new_func(param):
            if param not in cache:
                cache[param] = func(param)
            return cache[param]
        return new_func

    return decorator
</snippet></ROW><ROW><id>16464629</id><snippet>x*y &lt; max_seen</snippet></ROW><ROW><id>16464629</id><snippet>is_palindrome</snippet></ROW><ROW><id>16464629</id><snippet>x</snippet></ROW><ROW><id>16464629</id><snippet>y</snippet></ROW><ROW><id>16464629</id><snippet>x*y &lt; max_seen</snippet></ROW><ROW><id>16464629</id><snippet>x</snippet></ROW><ROW><id>16464629</id><snippet>continue</snippet></ROW><ROW><id>16464629</id><snippet>y</snippet></ROW><ROW><id>16464629</id><snippet>break</snippet></ROW><ROW><id>16464629</id><snippet>x</snippet></ROW><ROW><id>16464629</id><snippet>x * 999 &lt; max_seen</snippet></ROW><ROW><id>16464629</id><snippet>def biggest():
    big_x, big_y, max_seen = 0, 0, 0
    for x in xrange(999,99,-1):
        if x*x &lt; max_seen:
            break # breaks out of outer loop, as no later x value can be better
        for y in xrange(x, 99,-1): 
            if x*y &lt; max_seen:
                break # breaks out of inner loop, no later y value can be better
            if is_palindrome(x*y):
                big_x, big_y, max_seen = x,y, x*y
    return big_x, big_y, max_seen
</snippet></ROW><ROW><id>16464704</id><snippet>BitVecVal(value, bits)</snippet></ROW><ROW><id>16464704</id><snippet>Extract(7, 0, BitVecVal(0x87654, 32))
</snippet></ROW><ROW><id>16464752</id><snippet>with open("users.txt") as f:
    for line in f:
        # do whatever with the line
</snippet></ROW><ROW><id>16464752</id><snippet># import our required modules
import json
import urllib2

# declare some initial variables
input_file = "users.txt"
output_file = "available_tags.txt"
available_tags = [] # an empty list to hold our available gamertags

# open the file
with open(input_file) as input_f:
    # loop through each line
    for line in input_f:
        # strip any new line character from the line
        tag = line.strip()
        # set up our URL and open a connection to the API
        url = "http://360api.chary.us/?gamertag=%s" % tag
        u = urllib2.urlopen(url)
        # load the returned data as a JSON object
        data = json.loads(u.read())
        # check if the gamertag is available
        if not data['GamertagExists']:
            # print it and add it to our list of available tags if so
            print "Tag %s is available." % tag
            available_tags.append(tag)
        else:
            print "Tag %s is not available." % tag #otherwise

# check that we have at least one valid tag to store
if len(available_tags) &gt; 0:
    # open our output file
    with open(output_file, "w") as output_f:
            # loop through our available tags
            for tag in available_tags:
                # write each one to the file
                output_f.write("%s\n" % tag)
else:
    print "No valid tags to be written to output file."
</snippet></ROW><ROW><id>16465031</id><snippet>for i in range(len(mylist)):
    if i &gt;= len(mylist):
       break
    item = mylist[i]
    mylist.remove(item)
</snippet></ROW><ROW><id>16465031</id><snippet>i</snippet></ROW><ROW><id>16465031</id><snippet>i</snippet></ROW><ROW><id>16465031</id><snippet>for item in reversed(mylist):
    mylist.remove(item)
</snippet></ROW><ROW><id>16465031</id><snippet>del mylist[:]
</snippet></ROW><ROW><id>16465031</id><snippet>mylist[:] = []
</snippet></ROW><ROW><id>16465067</id><snippet>reversed</snippet></ROW><ROW><id>16465067</id><snippet>iterator</snippet></ROW><ROW><id>16465067</id><snippet>&gt;&gt;&gt; lis = range(10)
&gt;&gt;&gt; lis[::-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
&gt;&gt;&gt; reversed(lis)
&lt;listreverseiterator object at 0x909dd0c&gt;
</snippet></ROW><ROW><id>16465067</id><snippet>list()</snippet></ROW><ROW><id>16465067</id><snippet>&gt;&gt;&gt; lis = range(10**5)
&gt;&gt;&gt; %timeit lis[::-1]
100 loops, best of 3: 2.8 ms per loop
&gt;&gt;&gt; %timeit list(reversed(lis))
100 loops, best of 3: 3.13 ms per loop
</snippet></ROW><ROW><id>16465067</id><snippet>reversed</snippet></ROW><ROW><id>16465067</id><snippet>&gt;&gt;&gt; reversed?
Type:       type
String Form:&lt;type 'reversed'&gt;
Namespace:  Python builtin
Docstring:
reversed(sequence) -&gt; reverse iterator over values of the sequence

Return a reverse iterator
</snippet></ROW><ROW><id>16465091</id><snippet>pass</snippet></ROW><ROW><id>16465091</id><snippet>engine = create_engine('mysql://root:pass@192.168.129.139/home/karthik.sharma/ms_thesis/nwtopology.db', echo=False)
</snippet></ROW><ROW><id>16465091</id><snippet>mysql -u root -p</snippet></ROW><ROW><id>16465091</id><snippet>'mysql://root:pass@192.168.129.139/nwtopology'
</snippet></ROW><ROW><id>16465271</id><snippet>td['frameId']
</snippet></ROW><ROW><id>16465271</id><snippet>foo = (1) #integer
foo = (1,) #1 element tuple
foo = 1, #1 element tuple
</snippet></ROW><ROW><id>16465271</id><snippet>foo(1,2,3)
</snippet></ROW><ROW><id>16465271</id><snippet>foo(1,(2,3))
</snippet></ROW><ROW><id>16465271</id><snippet>tuple</snippet></ROW><ROW><id>16465271</id><snippet>td[0]['frameId']
</snippet></ROW><ROW><id>16465439</id><snippet>os.walk</snippet></ROW><ROW><id>16465439</id><snippet>os.path.join()</snippet></ROW><ROW><id>16465439</id><snippet>shpfiles = []
for dirpath, subdirs, files in os.walk(path):
    for x in files:
        if x.endswith(".shp"):
            shpfiles.append(os.path.join(dirpath, x))
</snippet></ROW><ROW><id>16465439</id><snippet>path</snippet></ROW><ROW><id>16465439</id><snippet>dirpath</snippet></ROW><ROW><id>16465439</id><snippet>path</snippet></ROW><ROW><id>16465439</id><snippet>os.walk()</snippet></ROW><ROW><id>16465439</id><snippet>.endswith() == True</snippet></ROW><ROW><id>16465439</id><snippet>if</snippet></ROW><ROW><id>16465439</id><snippet>== True</snippet></ROW><ROW><id>16465439</id><snippet>.extend()</snippet></ROW><ROW><id>16465439</id><snippet>shpfiles = []
for dirpath, subdirs, files in os.walk(path):
    shpfile.extend(os.path.join(dirpath, x) for x in files if x.endswith(".shp"))
</snippet></ROW><ROW><id>16465439</id><snippet>shpfiles = [os.path.join(d, x)
            for d, dirs, files in os.walk(path)
            for x in files if x.endswith(".shp")]
</snippet></ROW><ROW><id>16465861</id><snippet>nginx</snippet></ROW><ROW><id>16465861</id><snippet>/etc/nginx/sites-available/default</snippet></ROW><ROW><id>16465861</id><snippet>    #SSL Support added
    listen   443 ssl;
    ssl_certificate     /etc/ssl/ssl/nginx/server.crt;
    ssl_certificate_key /etc/ssl/ssl/nginx/server.key;
    ssl_protocols       SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
</snippet></ROW><ROW><id>16465861</id><snippet>class SecureRequiredMiddleware(object):
    def __init__(self):
        self.paths = getattr(settings, 'SECURE_REQUIRED_PATHS')
        self.enabled = self.paths and getattr(settings, 'HTTPS_SUPPORT')

    def process_request(self, request):
        if self.enabled and not request.is_secure():
            for path in self.paths:
                if request.get_full_path().startswith(path):
                    request_url = request.build_absolute_uri(request.get_full_path())
                    secure_url = request_url.replace('http://', 'https://')
                    print self.paths, request_url, secure_url
                    return HttpResponsePermanentRedirect(secure_url)
        return None
</snippet></ROW><ROW><id>16465861</id><snippet>....
MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'djo.middleware.SecureRequiredMiddleware',
....
HTTPS_SUPPORT = True
SECURE_REQUIRED_PATHS = (
    r'/admin/',
)
</snippet></ROW><ROW><id>16466346</id><snippet>call</snippet></ROW><ROW><id>16466355</id><snippet>with open ("my.ini", "r") as myfile:
    my_config = myfile.read()

lines = my_config.splitlines(True)
replacements = {"path_jamjs": {"changeUsername": "Te"},
                "path_php": {"changeUsername": "TeS"}}

for path, reps in replacements.items():
    for i, line in enumerate(lines):
        if line.startswith(path + ':'):
            for key, value in reps.items():
                line = line.replace('[' + key + ']', value)
            lines[i] = line

result = ''.join(lines)
</snippet></ROW><ROW><id>16466407</id><snippet>%extend nite::Array&lt;nite::UserData&gt; {
    nite::UserData __getitem__(unsigned int i) {
        return (*($self))[i];
    }
}
</snippet></ROW><ROW><id>16466463</id><snippet>text</snippet></ROW><ROW><id>16466463</id><snippet>args</snippet></ROW><ROW><id>16466463</id><snippet>try:
    ...
except FailedPostException as r:
    print r.args[0]
</snippet></ROW><ROW><id>16466463</id><snippet>str(r)</snippet></ROW><ROW><id>16466463</id><snippet>r.args[0]</snippet></ROW><ROW><id>16466463</id><snippet>str(r)</snippet></ROW><ROW><id>16466463</id><snippet>str(r.args[0])</snippet></ROW><ROW><id>16466463</id><snippet>str(r.args)</snippet></ROW><ROW><id>16466463</id><snippet>text</snippet></ROW><ROW><id>16466463</id><snippet>FailedPostException</snippet></ROW><ROW><id>16466463</id><snippet>class FailedPostException(Exception):
    def __init__(self, text, *args):
        super(FailedPostException, self).__init__(text, *args)
        self.text = text
</snippet></ROW><ROW><id>16466463</id><snippet>super().__init__(text, *args)</snippet></ROW><ROW><id>16466551</id><snippet>BaseException</snippet></ROW><ROW><id>16466551</id><snippet>Exception</snippet></ROW><ROW><id>16466551</id><snippet>BaseException</snippet></ROW><ROW><id>16466551</id><snippet>except:</snippet></ROW><ROW><id>16466551</id><snippet>except Exception:</snippet></ROW><ROW><id>16466637</id><snippet>current_hero_health</snippet></ROW><ROW><id>16466637</id><snippet>Hero_Health</snippet></ROW><ROW><id>16466637</id><snippet>class Hero_Health():

    def __init__(self, current_h):
        self.current_hero_health = current_h

    def current_hero_health(self):
        self.current_hero_health = 3 ; # this is stored total of hero health
</snippet></ROW><ROW><id>16466637</id><snippet>self.current_hero_health</snippet></ROW><ROW><id>16466768</id><snippet>for line in old_network: new_network.write(line) if not re.match(("HOSTNAME"), line)
for line in old_network: new_network.write(replacement) if re.match(("HOSTNAME"), line)
</snippet></ROW><ROW><id>16466768</id><snippet>if</snippet></ROW><ROW><id>16466768</id><snippet>if</snippet></ROW><ROW><id>16466768</id><snippet>for line in old_network:
    if not re.match("HOSTNAME", line):
        new_network.write(line) 
    else:
        new_network.write(replacement)
</snippet></ROW><ROW><id>16466768</id><snippet>with</snippet></ROW><ROW><id>16466768</id><snippet>+</snippet></ROW><ROW><id>16466768</id><snippet>'HOSTNAME' in line</snippet></ROW><ROW><id>16466768</id><snippet>line.strip().startswith('HOSTNAME')</snippet></ROW><ROW><id>16466768</id><snippet>HOSTNAME</snippet></ROW><ROW><id>16466768</id><snippet>tempfile</snippet></ROW><ROW><id>16466768</id><snippet>from tempfile import NamedTemporaryFile

shutil.copyfile('/etc/sysconfig/network', '/etc/sysconfig/network.setup_bak')

replacement = "HOSTNAME={}\n".format(sys.argv[1])
new_network = NamedTemporaryFile(mode='w', delete=False)

with open("/etc/sysconfig/network", "r") as old_network, new_network:
    for line in old_network:
        if line.lstrip().startswith('HOSTNAME'):
            line = replacement
        new_network.write(line) 

os.rename(new_network.name, "/etc/sysconfig/network")
print 'Hostname set to {}'.format(sys.argv[1])
</snippet></ROW><ROW><id>16466768</id><snippet>fileinput</snippet></ROW><ROW><id>16466768</id><snippet>import fileinput
import sys

replacement = "HOSTNAME={}\n".format(sys.argv[1])

for line in fileinput('/etc/sysconfig/network', inplace=True, backup='.setup_bak'):
    if line.lstrip().startswith('HOSTNAME'):
        line = replacement
    sys.stdout.write(line)

print 'Hostname set to {}'.format(sys.argv[1])
</snippet></ROW><ROW><id>16466768</id><snippet>for line in fileinput('/etc/sysconfig/network', inplace=True, backup='.setup_bak'):
    sys.stdout.write(replacement if line.lstrip().startswith('HOSTNAME') else line)
</snippet></ROW><ROW><id>16466917</id><snippet>view.set_status(key, value)</snippet></ROW><ROW><id>16466917</id><snippet>window.views()</snippet></ROW><ROW><id>16467181</id><snippet>--backends</snippet></ROW><ROW><id>16467212</id><snippet>hasattr()</snippet></ROW><ROW><id>16467212</id><snippet>try: ... except AttributeError:</snippet></ROW><ROW><id>16467212</id><snippet>if not hasattr(...):</snippet></ROW><ROW><id>16467212</id><snippet>isinstance()</snippet></ROW><ROW><id>16467346</id><snippet>In [20]: df = DataFrame(randn(10,3),index=date_range('20130101',periods=10,freq='min'),
            columns=list('ABC'))

In [21]: df.iloc[1:3,:] = np.nan

In [22]: df.iloc[5:8,1:3] = np.nan

In [23]: df
Out[23]: 
                            A         B         C
2013-01-01 00:00:00 -0.486149  0.156894 -0.272362
2013-01-01 00:01:00       NaN       NaN       NaN
2013-01-01 00:02:00       NaN       NaN       NaN
2013-01-01 00:03:00  1.788240 -0.593195  0.059606
2013-01-01 00:04:00  1.097781  0.835491 -0.855468
2013-01-01 00:05:00  0.753991       NaN       NaN
2013-01-01 00:06:00 -0.456790       NaN       NaN
2013-01-01 00:07:00 -0.479704       NaN       NaN
2013-01-01 00:08:00  1.332830  1.276571 -0.480007
2013-01-01 00:09:00 -0.759806 -0.815984  2.699401
</snippet></ROW><ROW><id>16467346</id><snippet>In [24]: mask_0 = pd.isnull(df).all(axis=1)

In [25]: mask_0
Out[25]: 
2013-01-01 00:00:00    False
2013-01-01 00:01:00     True
2013-01-01 00:02:00     True
2013-01-01 00:03:00    False
2013-01-01 00:04:00    False
2013-01-01 00:05:00    False
2013-01-01 00:06:00    False
2013-01-01 00:07:00    False
2013-01-01 00:08:00    False
2013-01-01 00:09:00    False
Freq: T, dtype: bool
</snippet></ROW><ROW><id>16467346</id><snippet>In [26]: mask_fill = pd.isnull(df['B']) &amp; pd.isnull(df['C'])

In [27]: mask_fill
Out[27]: 
2013-01-01 00:00:00    False
2013-01-01 00:01:00     True
2013-01-01 00:02:00     True
2013-01-01 00:03:00    False
2013-01-01 00:04:00    False
2013-01-01 00:05:00     True
2013-01-01 00:06:00     True
2013-01-01 00:07:00     True
2013-01-01 00:08:00    False
2013-01-01 00:09:00    False
Freq: T, dtype: bool
</snippet></ROW><ROW><id>16467346</id><snippet>In [28]: df.loc[mask_fill,'C'] = df['A']

In [29]: df.loc[mask_fill,'B'] = df['A']
</snippet></ROW><ROW><id>16467346</id><snippet>In [30]: df.loc[mask_0] = 0
</snippet></ROW><ROW><id>16467346</id><snippet>In [31]: df
Out[31]: 
                            A         B         C
2013-01-01 00:00:00 -0.486149  0.156894 -0.272362
2013-01-01 00:01:00  0.000000  0.000000  0.000000
2013-01-01 00:02:00  0.000000  0.000000  0.000000
2013-01-01 00:03:00  1.788240 -0.593195  0.059606
2013-01-01 00:04:00  1.097781  0.835491 -0.855468
2013-01-01 00:05:00  0.753991  0.753991  0.753991
2013-01-01 00:06:00 -0.456790 -0.456790 -0.456790
2013-01-01 00:07:00 -0.479704 -0.479704 -0.479704
2013-01-01 00:08:00  1.332830  1.276571 -0.480007
2013-01-01 00:09:00 -0.759806 -0.815984  2.699401
</snippet></ROW><ROW><id>16467505</id><snippet>unicodedata</snippet></ROW><ROW><id>16467505</id><snippet>.normalize()</snippet></ROW><ROW><id>16467505</id><snippet>&gt;&gt;&gt; unicodedata.normalize('NFC', u'\u0061\u0301')
u'\xe1'
&gt;&gt;&gt; unicodedata.normalize('NFD', u'\u00e1')
u'a\u0301'
</snippet></ROW><ROW><id>16467505</id><snippet>&gt;&gt;&gt; unicodedata.normalize('NFC', u'\u2167')  # roman numeral VIII
u'\u2167'
&gt;&gt;&gt; unicodedata.normalize('NFKC', u'\u2167') # roman numeral VIII
u'VIII'
</snippet></ROW><ROW><id>16467590</id><snippet>&gt;&gt;&gt; messages = Table('messages', meta, autoload=True, autoload_with=engine)
&gt;&gt;&gt; [c.name for c in messages.columns]
['message_id', 'message_name', 'date']
</snippet></ROW><ROW><id>16467806</id><snippet>from xml.etree import cElementTree as etree
import xml.etree.ElementTree as ET

croot = etree.Element('root')
child = ET.Element('child')
croot.append(child)
# TypeError: must be Element, not Element
</snippet></ROW><ROW><id>16467806</id><snippet>cElementTree</snippet></ROW><ROW><id>16467806</id><snippet>ElementTree</snippet></ROW><ROW><id>16467806</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>16467806</id><snippet>ElementTree</snippet></ROW><ROW><id>16467806</id><snippet>etree</snippet></ROW><ROW><id>16467806</id><snippet>ET</snippet></ROW><ROW><id>16467806</id><snippet>etree</snippet></ROW><ROW><id>16467810</id><snippet>**kwargs</snippet></ROW><ROW><id>16468082</id><snippet>import web

urls = (
    '/', 'index'
)

class index:
    def GET(self):
        return "Hello, world!"

if __name__ == "__main__":
    app = web.application(urls, globals())
    app.run()
</snippet></ROW><ROW><id>16468082</id><snippet>python hello.py
</snippet></ROW><ROW><id>16468317</id><snippet>text</snippet></ROW><ROW><id>16468317</id><snippet>print lines.parseString(text)
</snippet></ROW><ROW><id>16468317</id><snippet>[['y ', '=', [' 3']], ['x ', '=', [' 2']]]
</snippet></ROW><ROW><id>16468317</id><snippet>EOL = LineEnd().suppress()
EQ  = Literal("=").suppress()
val = Word(alphanums)
line = Group(val('key') + EQ + val('val') + EOL)
grammar = OneOrMore(line)

for x in grammar.parseString(text):
    print x.dump()
</snippet></ROW><ROW><id>16468317</id><snippet>['y', '3']
- key: y
- val: 3
['x', '2']
- key: x
- val: 2
</snippet></ROW><ROW><id>16468353</id><snippet>\w+( \w+)*
</snippet></ROW><ROW><id>16468353</id><snippet>[a-zA-Z]+( [a-zA-Z]+)*</snippet></ROW><ROW><id>16468448</id><snippet>f.write</snippet></ROW><ROW><id>16468448</id><snippet>Sniffed</snippet></ROW><ROW><id>16468448</id><snippet>sniff</snippet></ROW><ROW><id>16468448</id><snippet>f.write(str(packets))
</snippet></ROW><ROW><id>16468448</id><snippet>packets</snippet></ROW><ROW><id>16468448</id><snippet>f</snippet></ROW><ROW><id>16468620</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>16468620</id><snippet>repr(x)</snippet></ROW><ROW><id>16468620</id><snippet>str()</snippet></ROW><ROW><id>16468620</id><snippet>repr()</snippet></ROW><ROW><id>16468620</id><snippet>for char, count in counted_chars:
    print char, count
</snippet></ROW><ROW><id>16468682</id><snippet>rel_freq2 = [c.get(word, 0) for word in top]
</snippet></ROW><ROW><id>16468682</id><snippet>c.values()</snippet></ROW><ROW><id>16468682</id><snippet>get</snippet></ROW><ROW><id>16468682</id><snippet>counter</snippet></ROW><ROW><id>16468682</id><snippet>collections.Counter</snippet></ROW><ROW><id>16468682</id><snippet>0</snippet></ROW><ROW><id>16468682</id><snippet>c[word]</snippet></ROW><ROW><id>16468866</id><snippet>addWigdet()</snippet></ROW><ROW><id>16468866</id><snippet>layout.addWidget(pushbutton_1, 1)
</snippet></ROW><ROW><id>16468866</id><snippet>layout.addWidget(pushbutton_1, 2)
layout.addWidget(pushbutton_2, 1)
layout.addWidget(pushbutton_3, 1)
</snippet></ROW><ROW><id>16469046</id><snippet>def together</snippet></ROW><ROW><id>16469046</id><snippet>generate</snippet></ROW><ROW><id>16469061</id><snippet>get_query_set</snippet></ROW><ROW><id>16469061</id><snippet>get_query_set</snippet></ROW><ROW><id>16469061</id><snippet>get_queryset</snippet></ROW><ROW><id>16469061</id><snippet>Manager</snippet></ROW><ROW><id>16469061</id><snippet>django/db/models/manager.py</snippet></ROW><ROW><id>16469089</id><snippet>ctypes.c_void_p</snippet></ROW><ROW><id>16469089</id><snippet>ctypes.c_char * 32</snippet></ROW><ROW><id>16469089</id><snippet>restype</snippet></ROW><ROW><id>16469089</id><snippet>ctypes.POINTER</snippet></ROW><ROW><id>16469089</id><snippet>bytes</snippet></ROW><ROW><id>16469089</id><snippet>value</snippet></ROW><ROW><id>16469089</id><snippet>raw</snippet></ROW><ROW><id>16469089</id><snippet>contents</snippet></ROW><ROW><id>16469089</id><snippet>crypt(3)</snippet></ROW><ROW><id>16469089</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; crypt = ctypes.CDLL('libcrypt.so').crypt
&gt;&gt;&gt; crypt.argtypes = ctypes.c_char_p, ctypes.c_char_p
&gt;&gt;&gt; crypt.restype = ctypes.POINTER(ctypes.c_char * 13)
&gt;&gt;&gt; crypt('tea', 'ea')
&lt;__main__.LP_c_char_Array_13 object at 0x7f7d464f2200&gt;
&gt;&gt;&gt; crypt('tea', 'ea').contents
&lt;__main__.c_char_Array_13 object at 0x7f7d464f2290&gt;
&gt;&gt;&gt; crypt('tea', 'ea').contents.value
b'eauWokonZwxw2'
</snippet></ROW><ROW><id>16469114</id><snippet>numpy.apply_along_axis()</snippet></ROW><ROW><id>16469114</id><snippet>import numpy as np
mymatrix = np.matrix([[11,12,13],
                      [21,22,23],
                      [31,32,33]])
def myfunction( x ):
    return sum(x)

print np.apply_along_axis( myfunction, axis=1, arr=mymatrix )
#[36 66 96]
</snippet></ROW><ROW><id>16469218</id><snippet>Flask-Login</snippet></ROW><ROW><id>16469218</id><snippet>def login_required():
    def wrapper(fn):
        @wraps(fn)
        def decorated_view(*args, **kwargs):
            if not current_user.is_authenticated():
                abort(401)
                # return jsonify(status='logged_off')
            return fn(*args, **kwargs)
        return decorated_view
    return wrapper
</snippet></ROW><ROW><id>16469218</id><snippet>login_required</snippet></ROW><ROW><id>16469218</id><snippet>401 Unauthorized</snippet></ROW><ROW><id>16469255</id><snippet>list</snippet></ROW><ROW><id>16469255</id><snippet>list</snippet></ROW><ROW><id>16469255</id><snippet>str</snippet></ROW><ROW><id>16469255</id><snippet>list.__str__</snippet></ROW><ROW><id>16469255</id><snippet>repr</snippet></ROW><ROW><id>16469255</id><snippet>str</snippet></ROW><ROW><id>16469255</id><snippet>rep</snippet></ROW><ROW><id>16469255</id><snippet>__str__</snippet></ROW><ROW><id>16469255</id><snippet>__repr__</snippet></ROW><ROW><id>16469255</id><snippet>str</snippet></ROW><ROW><id>16469255</id><snippet>map</snippet></ROW><ROW><id>16469255</id><snippet>print(self.player.name + ' , your hand has:' + str(self.player.hand))
</snippet></ROW><ROW><id>16469255</id><snippet>print(self.player.name + ' , your hand has:' + [str(card) for card in self.player.hand])
</snippet></ROW><ROW><id>16469255</id><snippet>['8', '9']</snippet></ROW><ROW><id>16469255</id><snippet>[&lt;__main__.Card object at 0x1007aaad0&gt;, &lt;__main__.Card object at 0x1007aaaf0&gt;]</snippet></ROW><ROW><id>16469255</id><snippet>print(self.player.name + ' , your hand has:' + 
      ' '.join(str(card) for card in self.player.hand))
</snippet></ROW><ROW><id>16469255</id><snippet>Player.__str__</snippet></ROW><ROW><id>16469255</id><snippet>for y in range(len(self.hand)):
    x +=self.hand[y].face + self.hand[y].suit + " "
</snippet></ROW><ROW><id>16469255</id><snippet>AttributeError</snippet></ROW><ROW><id>16469255</id><snippet>face</snippet></ROW><ROW><id>16469255</id><snippet>number</snippet></ROW><ROW><id>16469255</id><snippet>Card.__str__</snippet></ROW><ROW><id>16469255</id><snippet>str(Card)</snippet></ROW><ROW><id>16469255</id><snippet>range(len(foo))</snippet></ROW><ROW><id>16469255</id><snippet>foo[y]</snippet></ROW><ROW><id>16469255</id><snippet>foo</snippet></ROW><ROW><id>16469255</id><snippet>for card in self.hand:
    x += str(card) + " "
</snippet></ROW><ROW><id>16469255</id><snippet>join</snippet></ROW><ROW><id>16469255</id><snippet>x += " ".join(str(card) for card in self.hand) + " "
</snippet></ROW><ROW><id>16469255</id><snippet>Card.__str__</snippet></ROW><ROW><id>16469255</id><snippet>8H 9C</snippet></ROW><ROW><id>16469255</id><snippet>8 9</snippet></ROW><ROW><id>16469255</id><snippet>list</snippet></ROW><ROW><id>16469255</id><snippet>def str_hand(hand):
    return " ".join(str(card) for card in self.hand)
</snippet></ROW><ROW><id>16469255</id><snippet>Hand</snippet></ROW><ROW><id>16469255</id><snippet>list</snippet></ROW><ROW><id>16469439</id><snippet>json.encoder.encode_basestring*()</snippet></ROW><ROW><id>16469439</id><snippet>import json

class RawJson(unicode):
    pass

# patch json.encoder module
for name in ['encode_basestring', 'encode_basestring_ascii']:
    def encode(o, _encode=getattr(json.encoder, name)):
        return o if isinstance(o, RawJson) else _encode(o)
    setattr(json.encoder, name, encode)


print(json.dumps([1, RawJson(u'["abc", 2]'), u'["def", 3]']))
# -&gt; [1, ["abc", 2], "[\"def\", 3]"]
</snippet></ROW><ROW><id>16469497</id><snippet>fn(self, args, kwargs)</snippet></ROW><ROW><id>16469497</id><snippet>args</snippet></ROW><ROW><id>16469497</id><snippet>kwargs</snippet></ROW><ROW><id>16469497</id><snippet>work(1, x=2)</snippet></ROW><ROW><id>16469497</id><snippet>func(self, (1,), {'x': 2})</snippet></ROW><ROW><id>16469497</id><snippet>fn(self, *args, **kwargs)
</snippet></ROW><ROW><id>16469497</id><snippet>work(1, x=2)</snippet></ROW><ROW><id>16469497</id><snippet>fn(self, 1, x=2)</snippet></ROW><ROW><id>16469529</id><snippet>flask.g</snippet></ROW><ROW><id>16469545</id><snippet>class Printer(dict):
    def __missing__(self, key):
        def wrapped(*args, **kwargs):
            print('{} called: args={}, kwargs={}'.format(key, args, kwargs))
        return wrapped

code = '''
foo()
bar(1, 2, baz=3)
'''

exec(code, Printer())
</snippet></ROW><ROW><id>16469545</id><snippet>foo called: args=(), kwargs={}
bar called: args=(1, 2), kwargs={'baz': 3}
</snippet></ROW><ROW><id>16469790</id><snippet>ErrorDict</snippet></ROW><ROW><id>16469790</id><snippet>django.forms.utils</snippet></ROW><ROW><id>16469790</id><snippet>dict</snippet></ROW><ROW><id>16469790</id><snippet>non_field_errors</snippet></ROW><ROW><id>16469790</id><snippet>&lt;ul class="errorlist"&gt;
  {% if form.non_field_errors %}
    &lt;li&gt;{{ form.non_field_errors }}&lt;/li&gt;
  {% endif %}
  {% for field in form %}
    {% if field.errors %}
      &lt;li&gt;
        {{ field.label }}
        &lt;ul class="errorlist"&gt;
          {% for error in field.errors %}
            &lt;li&gt;{{ error }}&lt;/li&gt;
          {% endfor %}
        &lt;/ul&gt;
      &lt;/li&gt;
    {% endif %}
  {% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>16469841</id><snippet>        counter = 1

    if not filename:
        filename = 'part-%03d%s' % (counter, 'bin')
        counter += 1
</snippet></ROW><ROW><id>16469841</id><snippet>for part in mail.walk():
</snippet></ROW><ROW><id>16469841</id><snippet>    allFiles = [f for f in os.listdir('.')]
    for file in allFiles:
        archive = zipfile.ZipFile(token+'.zip', mode='a')
        archive.write(file)
        archive.close()
        os.unlink(file)
</snippet></ROW><ROW><id>16469841</id><snippet>allFiles = [f for f in os.listdir(detach_dir) if not f.endswith(".zip")]
for file in allFiles:
    archive = zipfile.ZipFile(token+'.zip', mode='a')
    archive.write(file)
    archive.close()
    os.unlink(file)
</snippet></ROW><ROW><id>16469928</id><snippet>{{ block.super }}</snippet></ROW><ROW><id>16470091</id><snippet>matplotlib.pyplot.fill(lon,lat,fill=False)</snippet></ROW><ROW><id>16470091</id><snippet>plot()</snippet></ROW><ROW><id>16470091</id><snippet>plt.fill(lon, lat, edgecolor='r', fill=False)
</snippet></ROW><ROW><id>16470091</id><snippet>plot()</snippet></ROW><ROW><id>16470326</id><snippet>setattr</snippet></ROW><ROW><id>16470326</id><snippet>setitem</snippet></ROW><ROW><id>16470326</id><snippet>class AttributeReassigner:
    def __init__(self, obj, attr):
        # use your imagination
    def reassign(self, val):
        setattr(self.obj, self.attr, val)

class ItemReassigner:
    def __init__(self, obj, key):
        # use your imagination
    def reassign(self, val):
        self.obj[self.key] = val

f = Foo()
rStandalone = AttributeReassigner(f, 'standalone')
rIndex = ItemReassigner(f.lst, 1)
rStandalone.reassign(7)
rIndex.reassign(9)
</snippet></ROW><ROW><id>16470326</id><snippet>globals()</snippet></ROW><ROW><id>16470326</id><snippet>locals()</snippet></ROW><ROW><id>16470390</id><snippet>apt-get install  postgresql-plpython-9.1</snippet></ROW><ROW><id>16470390</id><snippet>CREATE EXTENSION plpythonu
</snippet></ROW><ROW><id>16470390</id><snippet>CREATE FUNCTION eval_python(code text) RETURNS integer AS $$
    eval(code)
    return 1
$$ LANGUAGE plpythonu;
</snippet></ROW><ROW><id>16470390</id><snippet>code</snippet></ROW><ROW><id>16470390</id><snippet>my_table</snippet></ROW><ROW><id>16470390</id><snippet>SELECT eval_python(code) FROM my_table;
</snippet></ROW><ROW><id>16470781</id><snippet>@login_manager.user_loader
def load_user(id):
    c = g.db.execute("SELECT username from users where username = (?)", [id])
    userrow = c.fetchone()
    userid = userrow[0] # or whatever the index position is
    return userid
</snippet></ROW><ROW><id>16470792</id><snippet>if (boxObject(NULL, arg, obj) &lt; 0) return -1;
</snippet></ROW><ROW><id>16470824</id><snippet>del _fred</snippet></ROW><ROW><id>16470824</id><snippet>_fred</snippet></ROW><ROW><id>16470824</id><snippet>None</snippet></ROW><ROW><id>16470824</id><snippet>_fred</snippet></ROW><ROW><id>16470824</id><snippet>None</snippet></ROW><ROW><id>16470824</id><snippet>_fred = None
</snippet></ROW><ROW><id>16470908</id><snippet>%1</snippet></ROW><ROW><id>16470908</id><snippet>fg 1</snippet></ROW><ROW><id>16470908</id><snippet>bg 1</snippet></ROW><ROW><id>16470908</id><snippet>fg 1</snippet></ROW><ROW><id>16470908</id><snippet>ps</snippet></ROW><ROW><id>16470908</id><snippet>kill</snippet></ROW><ROW><id>16470908</id><snippet>man</snippet></ROW><ROW><id>16470908</id><snippet>man bash</snippet></ROW><ROW><id>16470908</id><snippet>bash</snippet></ROW><ROW><id>16470908</id><snippet>man</snippet></ROW><ROW><id>16471026</id><snippet>link_lists</snippet></ROW><ROW><id>16471026</id><snippet>all_lists = []</snippet></ROW><ROW><id>16471026</id><snippet>for x in range(m_num)</snippet></ROW><ROW><id>16471026</id><snippet>all_lists.append([link.get("title") for link in links])</snippet></ROW><ROW><id>16471026</id><snippet>m_num</snippet></ROW><ROW><id>16471026</id><snippet>all_lists = []
for name in iter(lambda: input("monster name"), ""): # loop until empty name
    # ...
    titles = [link["title"] for link in content.findAll('a', title=True)]
    all_lists.append(titles)
</snippet></ROW><ROW><id>16471183</id><snippet>zip</snippet></ROW><ROW><id>16471183</id><snippet>results</snippet></ROW><ROW><id>16471183</id><snippet>settings</snippet></ROW><ROW><id>16471183</id><snippet>for n, m in zip(results, settings):
    if m - 0.1 &lt;= n &lt;= m + 0.1:
        print 'ok'
    else:
        print 'fail'
print 'Done' 
</snippet></ROW><ROW><id>16471192</id><snippet>--system-site-packages</snippet></ROW><ROW><id>16471192</id><snippet>ImportError</snippet></ROW><ROW><id>16471192</id><snippet>requirements.txt</snippet></ROW><ROW><id>16471361</id><snippet>tox</snippet></ROW><ROW><id>16471361</id><snippet>setenv =
    PIP_USE_MIRRORS=...
</snippet></ROW><ROW><id>16471361</id><snippet>indexserver = 
    default = http://mypypi.org
    foobar = http://otherpypi.org
</snippet></ROW><ROW><id>16471361</id><snippet>default</snippet></ROW><ROW><id>16471361</id><snippet>deps</snippet></ROW><ROW><id>16471361</id><snippet>deps = 
    :foobar:ham-spam-pkg
</snippet></ROW><ROW><id>16471399</id><snippet>if compressedFile or mediaFile in line:
</snippet></ROW><ROW><id>16471399</id><snippet>compressedFile</snippet></ROW><ROW><id>16471399</id><snippet>mediaFile</snippet></ROW><ROW><id>16471399</id><snippet>line</snippet></ROW><ROW><id>16471399</id><snippet>or</snippet></ROW><ROW><id>16471399</id><snippet>compressedFile</snippet></ROW><ROW><id>16471399</id><snippet>mediaFile</snippet></ROW><ROW><id>16471399</id><snippet>True</snippet></ROW><ROW><id>16471399</id><snippet>False</snippet></ROW><ROW><id>16471399</id><snippet>True</snippet></ROW><ROW><id>16471399</id><snippet>False</snippet></ROW><ROW><id>16471399</id><snippet>line</snippet></ROW><ROW><id>16471453</id><snippet>''.join(map(str, foo))
</snippet></ROW><ROW><id>16471453</id><snippet>str</snippet></ROW><ROW><id>16471453</id><snippet>', '.join(map(str, foo))
</snippet></ROW><ROW><id>16471461</id><snippet>.keys()</snippet></ROW><ROW><id>16471461</id><snippet>data = json.loads(response)
myList = [item for item in data if item == "number1"]  
</snippet></ROW><ROW><id>16471461</id><snippet>u"number1"</snippet></ROW><ROW><id>16471461</id><snippet>data = json.loads(response)
myList = [item for item in data if item == u"number1"]  
</snippet></ROW><ROW><id>16471461</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; data = json.loads('{"number1":"first", "number2":"second"}')
&gt;&gt;&gt; [item for item in data if item == "number1"]
[u'number1']
&gt;&gt;&gt; [item for item in data if item == u"number1"]
[u'number1']
</snippet></ROW><ROW><id>16471461</id><snippet>us</snippet></ROW><ROW><id>16471461</id><snippet>json</snippet></ROW><ROW><id>16471461</id><snippet>True</snippet></ROW><ROW><id>16471461</id><snippet>&gt;&gt;&gt; us = u'MyString'
&gt;&gt;&gt; us
u'MyString'
&gt;&gt;&gt; type(us)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; us.encode('utf8') == 'MyString'
True
&gt;&gt;&gt; type(us.encode('utf8'))
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>16471461</id><snippet>myComp = [elem for elem in json_data if elem == u"MyString"]
</snippet></ROW><ROW><id>16471534</id><snippet>curve_fit</snippet></ROW><ROW><id>16471534</id><snippet>optimize.leastsq</snippet></ROW><ROW><id>16471534</id><snippet>import scipy.optimize
p,cov,infodict,mesg,ier = optimize.leastsq(
        residuals,a_guess,args=(x,y),full_output=True,warning=True)
</snippet></ROW><ROW><id>16471534</id><snippet>residuals</snippet></ROW><ROW><id>16471534</id><snippet>def residuals(a,x,y):
    return y-f(x,a)
</snippet></ROW><ROW><id>16471534</id><snippet>residuals</snippet></ROW><ROW><id>16471534</id><snippet>y</snippet></ROW><ROW><id>16471534</id><snippet>f</snippet></ROW><ROW><id>16471534</id><snippet>a</snippet></ROW><ROW><id>16471534</id><snippet>x</snippet></ROW><ROW><id>16471534</id><snippet>optimize.leastsq</snippet></ROW><ROW><id>16471534</id><snippet>ssErr = (infodict['fvec']**2).sum()
ssTot = ((y-y.mean())**2).sum()
rsquared = 1-(ssErr/ssTot )
</snippet></ROW><ROW><id>16471534</id><snippet>infodict['fvec']</snippet></ROW><ROW><id>16471534</id><snippet>In [48]: optimize.leastsq?
...
      infodict -- a dictionary of optional outputs with the keys:
                  'fvec' : the function evaluated at the output
</snippet></ROW><ROW><id>16472079</id><snippet>example_list = ['turtle','cow','goat','pig','swag']
number_of_ones = 1
for item in example_list:
    globals()['a'+('1'*number_of_ones)] = item
    number_of_ones += 1

print(a11111) # prints 'swag'
</snippet></ROW><ROW><id>16472079</id><snippet>example_list = ['turtle','cow','goat','pig','swag']
for number_of_ones, item in enumerate(example_list, 1):
    globals()['a'+('1'*i)] = item

print(a11111) # prints 'swag'
</snippet></ROW><ROW><id>16472264</id><snippet>url(r'^base_url/(?P&lt;serial&gt;[^/]{13}/$', view_method),
</snippet></ROW><ROW><id>16472264</id><snippet>end</snippet></ROW><ROW><id>16472264</id><snippet>start</snippet></ROW><ROW><id>16472264</id><snippet># Optional, non-capturing group surrounding the named group for each (so you don't have to capture the slashes or the "e" or "s"
(?:e(?P&lt;end&gt;\d{8})/)
</snippet></ROW><ROW><id>16472264</id><snippet>((?:s(?P&lt;start&gt;\d{8})/)|(?:e(?P&lt;end&gt;\d{8})/)){0,2}
</snippet></ROW><ROW><id>16472264</id><snippet>url(r'^base_url/((?:s(?P&lt;start&gt;\d{8})/)|(?:e(?P&lt;end&gt;\d{8})/)){0,2}(?P&lt;serial&gt;[^/]{13})/$', view_method),
</snippet></ROW><ROW><id>16472264</id><snippet>http://127.0.0.1:8080/base_url/e77777777/s88888888/1234567890123/
http://127.0.0.1:8080/base_url/s88888888/e77777777/1234567890123/
http://127.0.0.1:8080/base_url/s88888888/1234567890123/
http://127.0.0.1:8080/base_url/e77777777/1234567890123/
http://127.0.0.1:8080/base_url/1234567890123/
</snippet></ROW><ROW><id>16472264</id><snippet>get</snippet></ROW><ROW><id>16472264</id><snippet>View</snippet></ROW><ROW><id>16472264</id><snippet>None</snippet></ROW><ROW><id>16472264</id><snippet>{'start': u'88888888', 'serial': u'1234567890123', 'end': u'77777777'}
</snippet></ROW><ROW><id>16472354</id><snippet>&gt;&gt;&gt; width = 5
&gt;&gt;&gt; value = 2
&gt;&gt;&gt; '%0*d' % (width, value)
'00002'
</snippet></ROW><ROW><id>16472354</id><snippet>&gt;&gt;&gt; width = 5
&gt;&gt;&gt; value = 2
&gt;&gt;&gt; '{1:0{0}}'.format(width, value)
'00002'
</snippet></ROW><ROW><id>16472354</id><snippet>&gt;&gt;&gt; values = 3, 100, 50000
&gt;&gt;&gt; width = max(len('%0d' % value) for value in values)
&gt;&gt;&gt; ', '.join('%0*d' % (width, value) for value in values)
'00003, 00100, 50000'
</snippet></ROW><ROW><id>16472354</id><snippet>fx = lambda z,y=999: [ "%0*d" % (len('%0d' % y), x) for x in range(y) if str(z) in str(x) ]
</snippet></ROW><ROW><id>16472354</id><snippet>y</snippet></ROW><ROW><id>16472354</id><snippet>lambda</snippet></ROW><ROW><id>16472354</id><snippet>lambda</snippet></ROW><ROW><id>16472354</id><snippet>lambda</snippet></ROW><ROW><id>16472354</id><snippet>def</snippet></ROW><ROW><id>16472354</id><snippet>def fx(z, y=999):
    width = len('%0d' % y)
    return ["0%*d" % (width, x) for x in range(y) if str(z) in str(x)]
</snippet></ROW><ROW><id>16472441</id><snippet>countries = {}

country_list = Country.objects.all()

for c in country_list:
    # check the stories that has the country
    stories = Story.objects.filter(country_set__name__exact=c.name)

    # only if the country have stories
    if stories.count() &gt; 0:
        ## check for initialize list
        if not countries.has_key(c.continent.name):
            countries[c.continent.name] = []

        ## finally we add the country
        countries[c.continent.name].append(c)
</snippet></ROW><ROW><id>16472458</id><snippet>subprocess</snippet></ROW><ROW><id>16472458</id><snippet>class myClass( wx.Frame ):
    def __init__(self):
        print "Executing... Do you like this app?"
        self.child = subprocess.Popen([sys.executable, './child.py', '--username', 'root'])
    def onClose( self , evt ):
        self.child.wait()
        self.exit();
</snippet></ROW><ROW><id>16472458</id><snippet>child.py</snippet></ROW><ROW><id>16472458</id><snippet>sys.executable</snippet></ROW><ROW><id>16472458</id><snippet>python</snippet></ROW><ROW><id>16472458</id><snippet>#!</snippet></ROW><ROW><id>16472458</id><snippet>shell=True</snippet></ROW><ROW><id>16472458</id><snippet>./child.py</snippet></ROW><ROW><id>16472488</id><snippet>sys.argv</snippet></ROW><ROW><id>16472488</id><snippet>GetCommandLineA</snippet></ROW><ROW><id>16472488</id><snippet>GetCommandLineW</snippet></ROW><ROW><id>16472488</id><snippet>GetCommandLineW</snippet></ROW><ROW><id>16472488</id><snippet>CommandLineToArgvW</snippet></ROW><ROW><id>16472488</id><snippet>win32</snippet></ROW><ROW><id>16472488</id><snippet>ctypes</snippet></ROW><ROW><id>16472586</id><snippet>import requests
symbol = "mtgoxUSD"
url = 'http://api.bitcoincharts.com/v1/trades.csv?symbol={}'.format(symbol)
data = requests.get(url)

# dump resulting text to file
with open("trades_{}.csv".format(symbol), "w") as out_f:
    out_f.write(data.text)
</snippet></ROW><ROW><id>16472630</id><snippet>update_idletasks</snippet></ROW><ROW><id>16472760</id><snippet>String</snippet></ROW><ROW><id>16472760</id><snippet>src_address = Column(String(16), index=True)
</snippet></ROW><ROW><id>16472795</id><snippet>telnet 192.168.129.139 3306</snippet></ROW><ROW><id>16472795</id><snippet>/etc/mysql/my.cnf</snippet></ROW><ROW><id>16472795</id><snippet>bind-address            = 192.168.0.5
</snippet></ROW><ROW><id>16472795</id><snippet>sudo service mysql restart
</snippet></ROW><ROW><id>16472967</id><snippet>geocoder = new google.maps.Geocoder();</snippet></ROW><ROW><id>16473007</id><snippet>x</snippet></ROW><ROW><id>16473007</id><snippet>y</snippet></ROW><ROW><id>16473007</id><snippet>x</snippet></ROW><ROW><id>16473007</id><snippet>y</snippet></ROW><ROW><id>16473007</id><snippet>pandas/core/frame.py</snippet></ROW><ROW><id>16473007</id><snippet>    if isinstance(other, (Series, DataFrame)):
        common = self.columns.union(other.index)
        if (len(common) &gt; len(self.columns) or
            len(common) &gt; len(other.index)):
            raise ValueError('matrices are not aligned')
</snippet></ROW><ROW><id>16473007</id><snippet>x</snippet></ROW><ROW><id>16473007</id><snippet>y</snippet></ROW><ROW><id>16473007</id><snippet>np.dot(x, y)
</snippet></ROW><ROW><id>16473007</id><snippet>x</snippet></ROW><ROW><id>16473007</id><snippet>y</snippet></ROW><ROW><id>16473007</id><snippet>dot</snippet></ROW><ROW><id>16473007</id><snippet>x</snippet></ROW><ROW><id>16473007</id><snippet>y</snippet></ROW><ROW><id>16473007</id><snippet>x</snippet></ROW><ROW><id>16473007</id><snippet>y</snippet></ROW><ROW><id>16473007</id><snippet>left = self.reindex(columns=common, copy=False)
right = other.reindex(index=common, copy=False)
</snippet></ROW><ROW><id>16473007</id><snippet>dot</snippet></ROW><ROW><id>16473007</id><snippet>import pandas as pd
import numpy as np

columns = ['col{}'.format(i) for i in range(36)]
x = pd.DataFrame(np.random.random((1062, 36)), columns=columns)
y = pd.DataFrame(np.random.random((36, 36)))

print(np.dot(x, y).shape)
# (1062, 36)

print(x.dot(y).shape)
# ValueError: matrices are not aligned
</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>gen</snippet></ROW><ROW><id>16473009</id><snippet>itertools.tee</snippet></ROW><ROW><id>16473009</id><snippet>tee</snippet></ROW><ROW><id>16473009</id><snippet>yield</snippet></ROW><ROW><id>16473009</id><snippet>generator</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>return</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>None</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>def simple_generator():
    yield "foo"
    yield "bar"
    # StopIteration will be raised here automatically
</snippet></ROW><ROW><id>16473009</id><snippet>&gt;&gt;&gt; g = simple_generator()
&gt;&gt;&gt; next(g)
'foo'
&gt;&gt;&gt; next(g)
'bar'
&gt;&gt;&gt; next(g)
Traceback (most recent call last):
  File "&lt;pyshell#6&gt;", line 1, in &lt;module&gt;
    next(g)
StopIteration
</snippet></ROW><ROW><id>16473009</id><snippet>simple_generator</snippet></ROW><ROW><id>16473009</id><snippet>generator</snippet></ROW><ROW><id>16473009</id><snippet>next</snippet></ROW><ROW><id>16473009</id><snippet>yield</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>for</snippet></ROW><ROW><id>16473009</id><snippet>for</snippet></ROW><ROW><id>16473009</id><snippet>next</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>try</snippet></ROW><ROW><id>16473009</id><snippet>except</snippet></ROW><ROW><id>16473009</id><snippet>for</snippet></ROW><ROW><id>16473009</id><snippet>for item in iterable: do_suff(item)</snippet></ROW><ROW><id>16473009</id><snippet>while</snippet></ROW><ROW><id>16473009</id><snippet>for</snippet></ROW><ROW><id>16473009</id><snippet>iterator = iter(iterable)
try:
    while True:
        item = next(iterator)
        do_stuff(item)
except StopIteration:
    pass
finally:
    del iterator
</snippet></ROW><ROW><id>16473009</id><snippet>gen</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>StopIteration</snippet></ROW><ROW><id>16473009</id><snippet>next</snippet></ROW><ROW><id>16473009</id><snippet>iterable</snippet></ROW><ROW><id>16473009</id><snippet>next</snippet></ROW><ROW><id>16473009</id><snippet>iterator</snippet></ROW><ROW><id>16473009</id><snippet>iterable</snippet></ROW><ROW><id>16473009</id><snippet>container</snippet></ROW><ROW><id>16473009</id><snippet>iter</snippet></ROW><ROW><id>16473009</id><snippet>iterable</snippet></ROW><ROW><id>16473009</id><snippet>next</snippet></ROW><ROW><id>16473009</id><snippet>for</snippet></ROW><ROW><id>16473009</id><snippet>iter</snippet></ROW><ROW><id>16473009</id><snippet>next</snippet></ROW><ROW><id>16473027</id><snippet>import time
print "Think of a number between 1 and 100"
print "Then I shall guess the number"

time.sleep(3)

print "I guess", computerguess
raw_input ("Is it lower or higher?")
</snippet></ROW><ROW><id>16473086</id><snippet>&gt;&gt;&gt; np.vstack(([1,2,3],[4,5,6]))
array([[1, 2, 3],
       [4, 5, 6]])
&gt;&gt;&gt; np.column_stack(([1,2,3],[4,5,6]))
array([[1, 4],
       [2, 5],
       [3, 6]])
&gt;&gt;&gt; np.hstack(([1,2,3],[4,5,6]))
array([1, 2, 3, 4, 5, 6])
</snippet></ROW><ROW><id>16473086</id><snippet>hstack</snippet></ROW><ROW><id>16473086</id><snippet>column_stack</snippet></ROW><ROW><id>16473086</id><snippet>vstack</snippet></ROW><ROW><id>16473086</id><snippet>column_stack</snippet></ROW><ROW><id>16473086</id><snippet>hstack</snippet></ROW><ROW><id>16473086</id><snippet>&gt;&gt;&gt; np.hstack(([[1],[2],[3]],[[4],[5],[6]]))
array([[1, 4],
       [2, 5],
       [3, 6]])
</snippet></ROW><ROW><id>16473086</id><snippet>column_stack</snippet></ROW><ROW><id>16473335</id><snippet>'URL has an invalid label.'</snippet></ROW><ROW><id>16473335</id><snippet>requests</snippet></ROW><ROW><id>16473335</id><snippet>idna</snippet></ROW><ROW><id>16473335</id><snippet>netloc = netloc.encode('idna').decode('utf-8')
</snippet></ROW><ROW><id>16473335</id><snippet>a:b@example.com</snippet></ROW><ROW><id>16473335</id><snippet>requests.get('https://a:b@example.com')</snippet></ROW><ROW><id>16473335</id><snippet>requests.get('https://example.com', auth=('a', 'b'))</snippet></ROW><ROW><id>16473335</id><snippet>[-A-Za-z0-9._~!$&amp;'()*+,;=]</snippet></ROW><ROW><id>16473335</id><snippet>curl</snippet></ROW><ROW><id>16473335</id><snippet>requests</snippet></ROW><ROW><id>16473335</id><snippet>https://a:%C3%80@example.com</snippet></ROW><ROW><id>16473335</id><snippet>curl</snippet></ROW><ROW><id>16473335</id><snippet>Authorization: Basic YTrDgA==
</snippet></ROW><ROW><id>16473335</id><snippet>requests</snippet></ROW><ROW><id>16473335</id><snippet>Authorization: Basic YTolQzMlODA=
</snippet></ROW><ROW><id>16473335</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; base64.b64decode('YTrDgA==')
'a:\xc3\x80'
&gt;&gt;&gt; print _
a:À
&gt;&gt;&gt; base64.b64decode('YTolQzMlODA=')
'a:%C3%80'
</snippet></ROW><ROW><id>16473766</id><snippet>import csv

headers = None
records = {}

reader = csv.reader(open(csvFile))

# So we can have lists as entries by default
from collections import defaultdict
index = {}

for row in reader:
    if reader.line_num == 1:
        headers = row
        # We'll set up rows to be a dictionary with one defaultdict
        # for each of the headers, mapping the unique values to the
        # rows that match
        index = dict((header, defaultdict(list)) for header in headers)
    else:
        for header, value in zip(headers, row):
            index[header][value].append(reader.line_num)

# Now, you can find out which rows have, say, 'Location' set to a given value
index['Location']['201682']

# Or all the rows with 'Time' set to '1:00:00 AM'
index['Time']['1:00:00 AM']
</snippet></ROW><ROW><id>16473923</id><snippet>itunes = win32com.client.Dispatch("iTunes")
track = itunes.CurrentTrack()
return track.Name(), track.Artist(), track.Album()
</snippet></ROW><ROW><id>16473923</id><snippet>_IiTunesEvents.OnPlayerPlayEvent</snippet></ROW><ROW><id>16473923</id><snippet>IITTrack</snippet></ROW><ROW><id>16473923</id><snippet>CurrentTrack</snippet></ROW><ROW><id>16474211</id><snippet>print</snippet></ROW><ROW><id>16474211</id><snippet>return</snippet></ROW><ROW><id>16474211</id><snippet>print</snippet></ROW><ROW><id>16474211</id><snippet>return</snippet></ROW><ROW><id>16474211</id><snippet>&gt;&gt;&gt; seqA = 'ATTCGT'
&gt;&gt;&gt; matches = '||   |'
&gt;&gt;&gt; seqB = 'ATCTAT'
&gt;&gt;&gt; score = 2
&gt;&gt;&gt; print '%s\n%s\n%s\nScore: %d' % (seqA, matches, seqB, score)
ATTCGT
||   |
ATCTAT
Score: 2
</snippet></ROW><ROW><id>16474217</id><snippet>file.readline([size])</snippet></ROW><ROW><id>16474217</id><snippet>file.readlines([sizehint])</snippet></ROW><ROW><id>16474271</id><snippet>while len(rain_info) &gt; 1:
        date = rain_info[1]
        month = int(date[4:6])   # Month
        rainfall = float(rain_info[2])
        rfs[month - 1] += rainfall
</snippet></ROW><ROW><id>16474271</id><snippet>len(rain_info) &gt; 1</snippet></ROW><ROW><id>16474271</id><snippet>rain_info</snippet></ROW><ROW><id>16474271</id><snippet>print()</snippet></ROW><ROW><id>16474271</id><snippet>while len(stuff) &gt; 1:
    # ...lines omitted...
    line = f.readline()
    stuff = line.split(',')
</snippet></ROW><ROW><id>16474271</id><snippet>len(stuff)</snippet></ROW><ROW><id>16474391</id><snippet>primesFound</snippet></ROW><ROW><id>16474391</id><snippet>primeList</snippet></ROW><ROW><id>16474391</id><snippet>isprime()</snippet></ROW><ROW><id>16474391</id><snippet>True</snippet></ROW><ROW><id>16474391</id><snippet>sqrt(n) + 1</snippet></ROW><ROW><id>16474391</id><snippet>i</snippet></ROW><ROW><id>16474391</id><snippet>while</snippet></ROW><ROW><id>16474391</id><snippet>primesFound</snippet></ROW><ROW><id>16474391</id><snippet>len(primeList)</snippet></ROW><ROW><id>16474391</id><snippet>userinput = int(sys.argv[1])</snippet></ROW><ROW><id>16474476</id><snippet>import csv
import operator as op
import requests

symbol = "mtgoxUSD"
url = 'http://api.bitcoincharts.com/v1/trades.csv?symbol={}'.format(symbol)
csv_file = "trades_{}.csv".format(symbol)

data = requests.get(url)
with open(csv_file, "w") as f:
    f.write(data.text)

with open(csv_file) as f:
    next(f) # discard first row from file -- see notes
    max_value = max(row[0] for row in csv.reader(f))

with open(csv_file) as f:
    next(f) # discard first row from file -- see notes
    max_row = max(csv.reader(f), key=op.itemgetter(0))
</snippet></ROW><ROW><id>16474476</id><snippet>max()</snippet></ROW><ROW><id>16474476</id><snippet>csv.reader()</snippet></ROW><ROW><id>16474476</id><snippet>islice()</snippet></ROW><ROW><id>16474476</id><snippet>itertools</snippet></ROW><ROW><id>16474476</id><snippet>max()</snippet></ROW><ROW><id>16474476</id><snippet>max()</snippet></ROW><ROW><id>16474476</id><snippet>key=</snippet></ROW><ROW><id>16474476</id><snippet>max()</snippet></ROW><ROW><id>16474476</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>16474476</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>16474476</id><snippet>def get_col_0(row):
    return row[0]
max_row = max(csv.reader(f), key=get_col_0)
</snippet></ROW><ROW><id>16474476</id><snippet>lambda</snippet></ROW><ROW><id>16474476</id><snippet>max_row = max(csv.reader(f), key=lambda row: row[0])</snippet></ROW><ROW><id>16474476</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>16474476</id><snippet>text = data.text
rows = [line.split(',') for line in text.split("\n") if line]
rows.pop(0)  # get rid of first row from data
max_value = max(row[0] for row in rows)
max_row = max(rows, key=op.itemgetter(0))
</snippet></ROW><ROW><id>16474926</id><snippet>is_active</snippet></ROW><ROW><id>16474926</id><snippet># Equals user ID if active; otherwise null.
is_active = models.IntegerField(null = True, unique = True)
</snippet></ROW><ROW><id>16474928</id><snippet>In [32]: import string

In [33]: def compare(s1, s2):
    ...:     remove = string.punctuation + string.whitespace
    ...:     return s1.translate(None, remove) == s2.translate(None, remove)

In [34]: compare('Hai, this is a test', 'Hai ! this is a test')
Out[34]: True
</snippet></ROW><ROW><id>16475033</id><snippet>tasks.py</snippet></ROW><ROW><id>16475033</id><snippet>taskname.delay()</snippet></ROW><ROW><id>16475148</id><snippet>range()</snippet></ROW><ROW><id>16475148</id><snippet>xrange()</snippet></ROW><ROW><id>16475148</id><snippet>range()</snippet></ROW><ROW><id>16475148</id><snippet>xrange()</snippet></ROW><ROW><id>16475148</id><snippet>def createBinKeyFromKey(key):
    for x in range(key):
         yield "{0:b}".format(x) #use yield as return will end the loop after first iteration
</snippet></ROW><ROW><id>16475148</id><snippet>yield</snippet></ROW><ROW><id>16475148</id><snippet>&gt;&gt;&gt; list(createBinKeyFromKey(10))
['0', '1', '10', '11', '100', '101', '110', '111', '1000', '1001']
&gt;&gt;&gt; for x in createBinKeyFromKey(5):
...     print x

0
1
10
11
100
</snippet></ROW><ROW><id>16475148</id><snippet>range</snippet></ROW><ROW><id>16475148</id><snippet>&gt;&gt;&gt; range?
range(stop) -&gt; list of integers
range(start, stop[, step]) -&gt; list of integers

Return a list containing an arithmetic progression of integers.
range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
When step is given, it specifies the increment (or decrement).
For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
These are exactly the valid indices for a list of 4 elements.
</snippet></ROW><ROW><id>16475170</id><snippet>package/__init__.py</snippet></ROW><ROW><id>16475170</id><snippet>import subpackage1
import subpackage2
</snippet></ROW><ROW><id>16475170</id><snippet>package</snippet></ROW><ROW><id>16475170</id><snippet>subpackageX</snippet></ROW><ROW><id>16475170</id><snippet>package.subpackageX</snippet></ROW><ROW><id>16475170</id><snippet>subpackageX/__init__.py</snippet></ROW><ROW><id>16475170</id><snippet>package.subpackageX.moduleX</snippet></ROW><ROW><id>16475170</id><snippet>from package.subpackage1 import module1</snippet></ROW><ROW><id>16475170</id><snippet>package.subpackage1._&lt;TAB&gt;</snippet></ROW><ROW><id>16475170</id><snippet>subpackage1/__init__.py</snippet></ROW><ROW><id>16475170</id><snippet>from .module1 import x,y</snippet></ROW><ROW><id>16475170</id><snippet>package.subpackage1.x</snippet></ROW><ROW><id>16475170</id><snippet>package.subpackage1.module1.x</snippet></ROW><ROW><id>16475170</id><snippet>__all__</snippet></ROW><ROW><id>16475170</id><snippet>from package.subpackage1 import *</snippet></ROW><ROW><id>16475186</id><snippet>settings.py</snippet></ROW><ROW><id>16475186</id><snippet>CsrfViewMiddleware</snippet></ROW><ROW><id>16475186</id><snippet>MIDDLEWARE_CLASSES = (
...
‘django.middleware.csrf.CsrfViewMiddleware’,
‘django.middleware.csrf.CsrfResponseMiddleware’,
)
</snippet></ROW><ROW><id>16475472</id><snippet>&gt;&gt;&gt; with open('nums.txt') as f:
        nums = [int(n) for n in f.readline().split(', ')]


&gt;&gt;&gt; nums
[1, 2, 4, 5, 6, 7, 8, 9, 2, 1, 2, 3, 4]
</snippet></ROW><ROW><id>16475472</id><snippet>csv</snippet></ROW><ROW><id>16475472</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open('nums.txt') as f:
        r = csv.reader(f)
        nums = [int(n) for n in next(r)]


&gt;&gt;&gt; nums
[1, 2, 4, 5, 6, 7, 8, 9, 2, 1, 2, 3, 4]
</snippet></ROW><ROW><id>16475532</id><snippet>ManyToManyField</snippet></ROW><ROW><id>16475532</id><snippet>class Store(models.Model):
    ...

class Applicant(models.Model):
    name = models.CharField(max_length=200)
    ...
    was_completed = models.BooleanField(default=False)

    stores = ManyToManyField(Store, related_name='applicants')
</snippet></ROW><ROW><id>16475532</id><snippet>MultipleSelectField</snippet></ROW><ROW><id>16475537</id><snippet>Net::HTTP</snippet></ROW><ROW><id>16475537</id><snippet>require 'net/http'
require 'json'
require 'uri'

uri = URI('https://keychain.oneid.com/validate/')
req = Net::HTTP::Post.new uri.path
# ruby 2.0: req = Net::HTTP::Post.new uri
req.basic_auth 'username', 'password'
req.body = {:some =&gt; 'data', :fun =&gt; 'times'}.to_json

res = Net::HTTP.start(uri.host, uri.port, :use_ssl =&gt; true) do |http|
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  http.ssl_version = :SSLv3
  http.request req
end

puts res.body
# =&gt; {"errorcode": -99, "error": "Invalid API credentials. Please verify and try again"}

json = JSON.parse res.body
puts json['errorcode']
# =&gt; -99
</snippet></ROW><ROW><id>16475607</id><snippet>float</snippet></ROW><ROW><id>16475607</id><snippet>Rect</snippet></ROW><ROW><id>16475921</id><snippet>insert_something()</snippet></ROW><ROW><id>16475921</id><snippet>Menu</snippet></ROW><ROW><id>16475921</id><snippet>from tkinter import *
import bisect

...
                else:                                                                       # Dropdown menu option addition
                    index = bisect.bisect(self.myOptions, self.numToAdd)
                    self.myOptions.insert(index, self.numToAdd)
                    self.optMenu['menu'].insert_command(index, label=self.numToAdd)
                    self.selOpt.set(self.numToAdd)
                    print("Added succesfully!", self.myOptions)
                    self.counter += 2
</snippet></ROW><ROW><id>16476149</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; text = '''
for x in range(100):
    print x
'''

&gt;&gt;&gt; m = ast.parse(text)
&gt;&gt;&gt; ast.dump(m)
"Module(body=[For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()),
       args=[Num(n=100)], keywords=[], starargs=None, kwargs=None), 
       body=[Print(dest=None, values=[Name(id='x', ctx=Load())], nl=True)], orelse=[])])"
</snippet></ROW><ROW><id>16476313</id><snippet>re</snippet></ROW><ROW><id>16476313</id><snippet>myre = re.compile('"{0}"' "|'{0}'" .format('(\w+)=(\w+)'))
</snippet></ROW><ROW><id>16476313</id><snippet>myre = re.compile(r'([\'"])(\w+)=(\w+)\1')  
</snippet></ROW><ROW><id>16476313</id><snippet>groups()[1:]</snippet></ROW><ROW><id>16476466</id><snippet>class MyStudent(Student):
    class Meta:
        proxy=True

class MyStudentAdmin(ModelAdmin):
    list_display = ('id', 'user', 'created')
    search_fields = ('username',)

site.register(Student, ModelAdmin)
site.register(MyStudent, MyStudentAdmin)
</snippet></ROW><ROW><id>16476496</id><snippet>int(limit)</snippet></ROW><ROW><id>16476496</id><snippet>limit = int(limit)
</snippet></ROW><ROW><id>16476496</id><snippet>limit</snippet></ROW><ROW><id>16476496</id><snippet>if 'limit' in user_data :
    limit = int(user_data['limit'])
</snippet></ROW><ROW><id>16476611</id><snippet>astpp</snippet></ROW><ROW><id>16476611</id><snippet>import ast
import astpp

tree = ast.parse(
"""
print "Hello World!"
s = "I'm a string!"
print s
""")
print astpp.dump(tree)
</snippet></ROW><ROW><id>16476611</id><snippet>Module(body=[
    Print(dest=None, values=[
        Str(s='Hello World!'),
      ], nl=True),
    Assign(targets=[
        Name(id='s', ctx=Store()),
      ], value=Str(s="I'm a string!")),
    Print(dest=None, values=[
        Name(id='s', ctx=Load()),
      ], nl=True),
  ])
</snippet></ROW><ROW><id>16476647</id><snippet>def __place_widgets(self)</snippet></ROW><ROW><id>16476647</id><snippet>self._calendar = ttk.Treeview(show='', selectmode='none', height=7)
</snippet></ROW><ROW><id>16476647</id><snippet>self._calendar = ttk.Treeview(self, show='', selectmode='none', height=7)
</snippet></ROW><ROW><id>16476647</id><snippet>self._calendar.bind('&lt;Map&gt;', self.__minsize)
</snippet></ROW><ROW><id>16476647</id><snippet>__minsize</snippet></ROW><ROW><id>16476647</id><snippet>root2</snippet></ROW><ROW><id>16476647</id><snippet>def myfunction():
    root2=Tkinter.Toplevel(root)
    ttkcal = Calendar(root2,firstweekday=calendar.SUNDAY)
    ttkcal.pack(expand=1, fill='both')
    root2.update()
    root2.minsize(root2.winfo_reqwidth(), root2.winfo_reqheight())
</snippet></ROW><ROW><id>16476790</id><snippet>domain</snippet></ROW><ROW><id>16476790</id><snippet>row</snippet></ROW><ROW><id>16476790</id><snippet>account = EmailAccount(**row)
</snippet></ROW><ROW><id>16476790</id><snippet>row</snippet></ROW><ROW><id>16476790</id><snippet>domain</snippet></ROW><ROW><id>16476790</id><snippet>EmailAccount</snippet></ROW><ROW><id>16476790</id><snippet>domain</snippet></ROW><ROW><id>16476790</id><snippet>Domain</snippet></ROW><ROW><id>16476790</id><snippet>string</snippet></ROW><ROW><id>16476790</id><snippet>AttributeError: 'str' object has no attribute '_sa_instance_state'</snippet></ROW><ROW><id>16476790</id><snippet>for row in csv_file:
    account_values = {}
    for key, value in row.items():
        if key == 'domain':
            mdomain = Domain.query.filter_by(domain_name = value).first()
            account_values['domain'] = mdomain
        else:
            account_values[key] = value
    account = EmailAccount(account_values)
    db.session.add(account)
    db.session.commit()
</snippet></ROW><ROW><id>16476820</id><snippet>value</snippet></ROW><ROW><id>16476820</id><snippet>pressure</snippet></ROW><ROW><id>16476820</id><snippet>temperature</snippet></ROW><ROW><id>16476820</id><snippet>property</snippet></ROW><ROW><id>16476820</id><snippet>.value</snippet></ROW><ROW><id>16476820</id><snippet>__init__()</snippet></ROW><ROW><id>16476820</id><snippet>.combine()</snippet></ROW><ROW><id>16476820</id><snippet>property</snippet></ROW><ROW><id>16476841</id><snippet>http://192.168.23.73/mysite/ns_list/</snippet></ROW><ROW><id>16476841</id><snippet>&lt;Location "/mysite/"&gt;</snippet></ROW><ROW><id>16476841</id><snippet>&lt;Location /private2/&gt;
    # ...
&lt;/Location&gt;
</snippet></ROW><ROW><id>16476841</id><snippet>mod_python</snippet></ROW><ROW><id>16476974</id><snippet>In [18]: for index, row in df.iterrows():
   ....:     print row['c1'], row['c2']
   ....:     
10 100
11 110
12 120
</snippet></ROW><ROW><id>16477135</id><snippet>ts = ts.ix[ts.index.map(BDay())]
</snippet></ROW><ROW><id>16477135</id><snippet>indexer_between_time</snippet></ROW><ROW><id>16477135</id><snippet>ts = ts.ix[ts.index.indexer_between_time(time(7), time(18))]
</snippet></ROW><ROW><id>16477196</id><snippet>t1 = [L.pop(random.randrange(len(L))) for _ in xrange(2)]
</snippet></ROW><ROW><id>16477196</id><snippet>L</snippet></ROW><ROW><id>16477306</id><snippet># Tells django where your static files are
STATICFILES_DIRS = (
    os.path.join(os.path.dirname(__file__), '../static/generated'),
    os.path.join(os.path.dirname(__file__), '../static/fixed'),
)

# Only for developpement
# Tells to django build in web server where to host your files ("http://localhost/static")
STATIC_URL = '/static/'

# for production, tell django how do {% static %} template tags and "./manage collectstatic" behave (collect files to a single directory, upload them to a CDN, etc)
# 
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Only for production when using default value for STATICFILES_STORAGE
# Tell django where to collect files when you run "./manage.py collectstatic".
# This is only used if you host your static files in the same machine as the rest of your application
STATIC_ROOT = '/var/www/static.mydomain.com/'
</snippet></ROW><ROW><id>16477328</id><snippet>keepdims</snippet></ROW><ROW><id>16477328</id><snippet>np.sum((x - [1, 1, 1])**2, axis=-1, keepdims=True)**0.5
</snippet></ROW><ROW><id>16477328</id><snippet>[[[ 0.        ]
  [ 0.        ]
  [ 0.        ]]

 [[ 1.73205081]
  [ 1.73205081]
  [ 1.73205081]]

 [[ 3.46410162]
  [ 3.46410162]
  [ 0.        ]]]
</snippet></ROW><ROW><id>16477328</id><snippet>np.sum((x - x[0])**2, axis=-1, keepdims=True)**0.5
</snippet></ROW><ROW><id>16477328</id><snippet>array([[[ 0.        ],
        [ 0.        ],
        [ 0.        ]],

       [[ 1.73205081],
        [ 1.73205081],
        [ 3.46410162]],

       [[ 3.46410162],
        [ 3.46410162],
        [ 1.73205081]]])
</snippet></ROW><ROW><id>16477358</id><snippet>delta = 0.25
x = np.arange(-3.0, 3.0, delta)
y = np.arange(-2.0, 2.0, delta)
X, Y = np.meshgrid(x, y)
Z1 = X*np.exp(-X**2-Y**2)
Z2 = Y*np.exp(-X**2-Y**2)

fig, ax = plt.subplots()

CS1 = ax.contour(X, Y, Z1, colors='k')
ax.clabel(CS1, inline=1, fontsize=10)

CS2 = ax.contour(X, Y, Z2, colors='r')
ax.clabel(CS2, inline=1, fontsize=10)

lines = [ CS1.collections[0], CS1.collections[-1], CS2.collections[0], CS2.collections[-1]]
labels = ['CS1_neg','CS1_pos','CS2_neg','CS2_pos']

plt.legend(lines, labels)
</snippet></ROW><ROW><id>16477358</id><snippet>plt.legend(CS2.legend_elements()[0], CS2.legend_elements()[1])</snippet></ROW><ROW><id>16477603</id><snippet>from pandas.io import sql
import MySQLdb

con = MySQLdb.connect()  # may need to add some other options to connect
</snippet></ROW><ROW><id>16477603</id><snippet>flavor</snippet></ROW><ROW><id>16477603</id><snippet>write_frame</snippet></ROW><ROW><id>16477603</id><snippet>'mysql'</snippet></ROW><ROW><id>16477603</id><snippet>sql.write_frame(df, con=con, name='table_name_for_df', 
                if_exists='replace', flavor='mysql')
</snippet></ROW><ROW><id>16477603</id><snippet>if_exists</snippet></ROW><ROW><id>16477603</id><snippet>if_exists: {'fail', 'replace', 'append'}</snippet></ROW><ROW><id>16477603</id><snippet>'fail'</snippet></ROW><ROW><id>16477603</id><snippet>fail</snippet></ROW><ROW><id>16477603</id><snippet>replace</snippet></ROW><ROW><id>16477603</id><snippet>append</snippet></ROW><ROW><id>16477603</id><snippet>write_frame</snippet></ROW><ROW><id>16477672</id><snippet>&gt;&gt;&gt; for x in set(list2).intersection(list1):
        print x
</snippet></ROW><ROW><id>16477672</id><snippet>&gt;&gt;&gt; from bisect import bisect_left
&gt;&gt;&gt; list2.sort()
&gt;&gt;&gt; n = len(list2)
&gt;&gt;&gt; for x in list1:
        i = bisect_left(list2, x)
        if i != n and list2[i] == x:
            print x
</snippet></ROW><ROW><id>16477672</id><snippet>&gt;&gt;&gt; for x in list1:
        if x in list2:
            print x
</snippet></ROW><ROW><id>16477672</id><snippet>O(n1 + n2)</snippet></ROW><ROW><id>16477672</id><snippet>O((n1 + n2) * log(n2))</snippet></ROW><ROW><id>16477672</id><snippet>O(n1 * n2)</snippet></ROW><ROW><id>16477767</id><snippet>start /min</snippet></ROW><ROW><id>16477767</id><snippet>final_cmds = 'cmd.exe /c echo ' + final_cmds + '&gt; runme.bat &amp; runme.bat'
[...]
channel.exec_command(final_cmds)
</snippet></ROW><ROW><id>16477767</id><snippet>start /min</snippet></ROW><ROW><id>16477767</id><snippet>&gt;</snippet></ROW><ROW><id>16477767</id><snippet>&amp;</snippet></ROW><ROW><id>16477767</id><snippet>final_cmds.replace('&gt;','^&gt;')</snippet></ROW><ROW><id>16478173</id><snippet>(row,old_time,current_time)
</snippet></ROW><ROW><id>16478264</id><snippet>for line in tagfile:
    tag_name = line.strip("&lt;&gt;\n")
    print tag_name
</snippet></ROW><ROW><id>16478264</id><snippet>for line in tagfile:
    line = line.rstrip()
    tag_name = line.strip("&lt;&gt;")
    print tag_name
</snippet></ROW><ROW><id>16478396</id><snippet>key</snippet></ROW><ROW><id>16478396</id><snippet>min()</snippet></ROW><ROW><id>16478396</id><snippet>min(l, key=d.__getitem__)
</snippet></ROW><ROW><id>16478396</id><snippet>key</snippet></ROW><ROW><id>16478396</id><snippet>'b'</snippet></ROW><ROW><id>16478396</id><snippet>d</snippet></ROW><ROW><id>16478396</id><snippet>2</snippet></ROW><ROW><id>16478396</id><snippet>'a'</snippet></ROW><ROW><id>16478396</id><snippet>3</snippet></ROW><ROW><id>16478396</id><snippet>&gt;&gt;&gt; d = { "a":3, "b":2, "c":7 }
&gt;&gt;&gt; l = ["a","b"]
&gt;&gt;&gt; min(l, key=d.__getitem__)
'b'
</snippet></ROW><ROW><id>16478396</id><snippet>l</snippet></ROW><ROW><id>16478396</id><snippet>d</snippet></ROW><ROW><id>16478396</id><snippet>d.__getitem__</snippet></ROW><ROW><id>16478396</id><snippet>KeyError</snippet></ROW><ROW><id>16478396</id><snippet>&gt;&gt;&gt; min(['a', 'b', 'e'], key=d.__getitem__)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'e'
</snippet></ROW><ROW><id>16478396</id><snippet>lambda i: d[i]</snippet></ROW><ROW><id>16478396</id><snippet>min(['a', 'b', 'e'], key=lambda i: d.get(i, float('inf'))
</snippet></ROW><ROW><id>16478396</id><snippet>float('inf')</snippet></ROW><ROW><id>16478396</id><snippet>'e'</snippet></ROW><ROW><id>16478396</id><snippet>d</snippet></ROW><ROW><id>16478776</id><snippet>&gt;&gt;&gt; LL.insert(0,LL.pop([x for x, y in enumerate(LL) if y[1] == 'c'][0]))
&gt;&gt;&gt; LL
[('a', 'c'), ('a', 'a'), ('a', 'b'), ('a', 'd')]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16478789</id><snippet>def tester(args):
    if (isinstance(args, str)):
        return "String"
    elif (isinstance(args, list)):
        return"List"
    else:
        return "You dun goofed"
</snippet></ROW><ROW><id>16478789</id><snippet>def tester(*args):
    if (isinstance(args[0], str)):
        return "String"
    elif (isinstance(args[0], list)):
        return"List"
    else:
        return "You dun goofed"
</snippet></ROW><ROW><id>16479030</id><snippet>def emptyline(self):
        """Called when an empty line is entered in response to the prompt.

        If this method is not overridden, it repeats the last nonempty
        command entered.

        """
        if self.lastcmd:
            return self.onecmd(self.lastcmd)
</snippet></ROW><ROW><id>16479030</id><snippet>def emptyline(self):
        """Called when an empty line is entered in response to the prompt.

        If this method is not overridden, it repeats the last nonempty
        command entered.

        """
        if self.lastcmd:
            self.lastcmd = ""
            return self.onecmd('\n')
</snippet></ROW><ROW><id>16479123</id><snippet>app</snippet></ROW><ROW><id>16479123</id><snippet>importlib</snippet></ROW><ROW><id>16479123</id><snippet>my_module = importlib.import_module(app, 'view')
</snippet></ROW><ROW><id>16479344</id><snippet>[[[ 0  6 12 18]
  [24 30  1  7]
  [13 19 25 31]
  [ 2  8 14 20]
  [26 32  3  9]
  [15 21 27 33]]

 [[ 4 10 16 22]
  [28 34  5 11]
  [17 23 29 35]
  [ 0  0  0  0]
  [ 0  0  0  0]
  [ 0  0  0  0]]
…]]]
</snippet></ROW><ROW><id>16479344</id><snippet>img = np.dstack((arr, np.zeros((arr.shape[0], arr.shape[1], 3), dtype=np.uint8))).copy()
</snippet></ROW><ROW><id>16479573</id><snippet>for i,v in enumerate (['item0', 'item01', 'item02']):
    print (i, ":", v)
</snippet></ROW><ROW><id>16479607</id><snippet>import itertools as it

def func(s):
   if not s:
       return [s]
   binary = it.product(['',' '], repeat=len(s)-1)
   zipped = (it.izip_longest(s , comb, fillvalue='') for comb in binary)
   return [''.join(it.chain.from_iterable(x)) for x in zipped]

func('foobar')
</snippet></ROW><ROW><id>16479607</id><snippet>['foobar',
 'fooba r',
 'foob ar',
 'foob a r',
 'foo bar',
 'foo ba r',
 'foo b ar',
 'foo b a r',
 'fo obar',
 'fo oba r',
 'fo ob ar',
 'fo ob a r',
 'fo o bar',
 'fo o ba r',
 'fo o b ar',
 'fo o b a r',
 'f oobar',
 'f ooba r',
 'f oob ar',
 'f oob a r',
 'f oo bar',
 'f oo ba r',
 'f oo b ar',
 'f oo b a r',
 'f o obar',
 'f o oba r',
 'f o ob ar',
 'f o ob a r',
 'f o o bar',
 'f o o ba r',
 'f o o b ar',
 'f o o b a r']
</snippet></ROW><ROW><id>16479613</id><snippet> def playAudioFile(request):
    fname="C:\\test\\audio\\audio.mp3"
    f = open(fname,"rb") 
    response = HttpResponse()
    response.write(f.read())
    response['Content-Type'] ='audio/mp3'
    response['Content-Length'] =os.path.getsize(fname )
    return response
</snippet></ROW><ROW><id>16479682</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>16479682</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.urlretrieve('http://www.example.com/myfile.zip', 'path/to/download/dir/myfile.zip')
</snippet></ROW><ROW><id>16479682</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>16479784</id><snippet>results</snippet></ROW><ROW><id>16479784</id><snippet>dict</snippet></ROW><ROW><id>16479784</id><snippet>if 'result' in j:
     .... 
</snippet></ROW><ROW><id>16479784</id><snippet>None</snippet></ROW><ROW><id>16479784</id><snippet>if 'result' in j and j['result']:
    ...
</snippet></ROW><ROW><id>16480130</id><snippet>str.format()</snippet></ROW><ROW><id>16480130</id><snippet>&lt;6</snippet></ROW><ROW><id>16480130</id><snippet>format</snippet></ROW><ROW><id>16480130</id><snippet>'{0:&lt;6} {1}'</snippet></ROW><ROW><id>16480130</id><snippet>table_row = '{label:&lt;{lwidth}} {row[0]:&lt;{cwidth}} {row[1]:&lt;{cwidth}} {row[2]:&lt;{cwidth}} {row[3]:&lt;{cwidth}}'
</snippet></ROW><ROW><id>16480130</id><snippet>cwidth</snippet></ROW><ROW><id>16480130</id><snippet>labels = ('', 'UARFCN', 'DL/UL', 'RSSI')
lwidth = max(len(l) for l in labels)
table = []

channel_numbers = [int(cname[7:]) if cname.startswith('channel') else None for cname in band3]
if None in channel_numbers:
    raise ValueError("channel name doesn't follow pattern")
channel_numbers.sort()

cwidth = 0
for channel_number in channel_numbers:
    channel_data = band2['channel{}'.format(channel_number)]
    entry = dict(zip(labels, (
        'Channel {}'.format(channel_number),
        channel_data[0],
        '{}/{}'.format(*channel_data[1:3]),
        channel_data[3]
    )))
    cwidth = max(cwidth, max(len(str(v)) for v in entry.values()))
    table.append(entry)
</snippet></ROW><ROW><id>16480130</id><snippet>itertools</snippet></ROW><ROW><id>16480130</id><snippet>grouper</snippet></ROW><ROW><id>16480130</id><snippet>from itertools import izip_longest

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

# use a empty dictionary as filler at the end
for group in grouper(table, 4, dict.fromkeys(labels, '')):
    for label in labels:
        print(table_row.format(label=label, cwidth=cwidth, lwidth=lwidth,
            row=[entry[label] for entry in group]))
    print()
</snippet></ROW><ROW><id>16480130</id><snippet>band2</snippet></ROW><ROW><id>16480130</id><snippet>band3</snippet></ROW><ROW><id>16480130</id><snippet>       Channel 1  Channel 2  Channel 3  Channel 4 
UARFCN 10564      10589      10612      10637     
DL/UL  2112/1922  2117/1927  2122/1932  2127/1937 
RSSI   20         0          0          26        

       Channel 5  Channel 6  Channel 7  Channel 8 
UARFCN 10662      10687      10712      10737     
DL/UL  2132/1942  2137/1947  2142/1952  2147/1957 
RSSI   32         0          26         0         

       Channel 9  Channel 10 Channel 11 Channel 12
UARFCN 10762      10787      10812      10837     
DL/UL  2152/1962  2157/1967  2162/1972  2167/1977 
RSSI   0          0          0          15        
</snippet></ROW><ROW><id>16480130</id><snippet>dict.fromkeys(labels, '')</snippet></ROW><ROW><id>16480130</id><snippet>       Channel 1  Channel 2  Channel 3  Channel 4 
UARFCN 10564      10589      10612      10637     
DL/UL  2112/1922  2117/1927  2122/1932  2127/1937 
RSSI   20         0          0          26        

       Channel 5  Channel 6  Channel 7  Channel 8 
UARFCN 10662      10687      10712      10737     
DL/UL  2132/1942  2137/1947  2142/1952  2147/1957 
RSSI   32         0          26         0         

       Channel 9  Channel 10 Channel 11           
UARFCN 10762      10787      10812                
DL/UL  2152/1962  2157/1967  2162/1972            
RSSI   0          0          0                    
</snippet></ROW><ROW><id>16480504</id><snippet>**</snippet></ROW><ROW><id>16480504</id><snippet>d = {}
for a in sys.argv[1:]:
    k, v = a.split('=')
    d[k] = int(v)
func(**d)
</snippet></ROW><ROW><id>16480504</id><snippet>csv</snippet></ROW><ROW><id>16480504</id><snippet>import csv
func(**{k: int(v) for k, v in csv.reader(sys.argv[1:], delimiter='=')})
</snippet></ROW><ROW><id>16480504</id><snippet>argparse</snippet></ROW><ROW><id>16480504</id><snippet>parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('-a', type=int)
parser.add_argument('-b', type=int)

args = parser.parse_args()
fun(**dict(args._get_kwargs()))
</snippet></ROW><ROW><id>16480521</id><snippet>abc = {"type":"insecure","id":"1","name":"peter"}
black_list = {"type"}
rename ={"id":"identity"}  #use a mapping dictionary in case you want to rename multiple items
dic = {rename.get(key,key) : val for key ,val in abc.items() if key not in black_list}
print dic
</snippet></ROW><ROW><id>16480521</id><snippet>{'name': 'peter', 'identity': '1'}
</snippet></ROW><ROW><id>16480574</id><snippet>import Pillow._imaging as core</snippet></ROW><ROW><id>16480605</id><snippet>with open("data.txt") as fin:
    for line in fin:
        line = line.rstrip('\n')
        while line.endswith('\\'):
            line = line[:-1] + next(fin).rstrip('\n')
        print line
        ...
</snippet></ROW><ROW><id>16480605</id><snippet>def continuation_lines(fin):
    for line in fin:
        line = line.rstrip('\n')
        while line.endswith('\\'):
            line = line[:-1] + next(fin).rstrip('\n')
        yield line


with open("long.txt") as fin:
    for line in continuation_lines(fin):
        ...
</snippet></ROW><ROW><id>16480706</id><snippet>aaa.py</snippet></ROW><ROW><id>16480706</id><snippet>AA = 'Foo'
</snippet></ROW><ROW><id>16480706</id><snippet>bbb.py</snippet></ROW><ROW><id>16480706</id><snippet>import aaa
print aaa.AA # Or print(aaa.AA) for Python 3
# Prints Foo
</snippet></ROW><ROW><id>16480706</id><snippet>from aaa import AA
print AA
# Prints Foo
</snippet></ROW><ROW><id>16480776</id><snippet>array</snippet></ROW><ROW><id>16480776</id><snippet>from array import array

data = array('d')
CHUNKSIZE = 8192
rowcount = CHUNKSIZE / data.itemsize  # number of doubles we find in CHUNKSIZE bytes

with open('eigenvalues.bin', 'rb') as eg:
    data.fromfile(eg, rowcount)
</snippet></ROW><ROW><id>16480776</id><snippet>array.array</snippet></ROW><ROW><id>16480776</id><snippet>float</snippet></ROW><ROW><id>16480776</id><snippet>data.byteswap()</snippet></ROW><ROW><id>16480776</id><snippet>sys.byteorder</snippet></ROW><ROW><id>16480776</id><snippet>import sys

if sys.byteorder == 'big':
    # data was written in little-endian form, so swap the bytes to match
    data.byteswap()
</snippet></ROW><ROW><id>16481047</id><snippet>sys.path.append</snippet></ROW><ROW><id>16481047</id><snippet>sys.path.append("/Project/src/")
import root
import root.nested.tests
</snippet></ROW><ROW><id>16481145</id><snippet>&gt;&gt;&gt; lis = [[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0]]
&gt;&gt;&gt; lis1 = [[0, 3], [3, 0]]
#generate lis2 from lis1 based on a condition
&gt;&gt;&gt; lis2 = [[y if y!=3 else y-2 for y in x] for x in lis1]
&gt;&gt;&gt; lis2
[[0, 1], [1, 0]]
#use sets to improve time complexity
&gt;&gt;&gt; s = set(tuple(x) for x in lis2)

#Now use set intersection  or a list comprehension to get the
#common elements between lis2 and lis1. Note that set only contains unique items 
#so prefer list comprehension if you want all elements from lis that are in lis2 
#as well.

&gt;&gt;&gt; [x for x in lis if tuple(x) in s]
[[0, 1], [1, 0]]
&gt;&gt;&gt; s.intersection(map(tuple,lis))
{(0, 1), (1, 0)}
</snippet></ROW><ROW><id>16481348</id><snippet>facecolor</snippet></ROW><ROW><id>16481348</id><snippet>zorder</snippet></ROW><ROW><id>16481348</id><snippet>facecolor='none'</snippet></ROW><ROW><id>16481348</id><snippet>"none"</snippet></ROW><ROW><id>16481348</id><snippet>None</snippet></ROW><ROW><id>16481372</id><snippet>class Person (object):
    def __init__ (self, xyz, a):
        self.name = xyz
        self.address = a
</snippet></ROW><ROW><id>16481372</id><snippet>x = Person("poke", "My address")
x.phoneNumber = "012345679"
</snippet></ROW><ROW><id>16481635</id><snippet>In [20]: import numpy as np

In [21]: test = np.array([[1,2,3]])

In [22]: test
Out[22]: array([[1, 2, 3]])

In [23]: print(test)
[[1 2 3]]

In [24]: test.shape
Out[24]: (1, 3)

In [26]: type(test)
Out[26]: &lt;type 'numpy.ndarray'&gt;
</snippet></ROW><ROW><id>16482017</id><snippet>f</snippet></ROW><ROW><id>16482017</id><snippet>a</snippet></ROW><ROW><id>16482017</id><snippet>b</snippet></ROW><ROW><id>16482017</id><snippet>c</snippet></ROW><ROW><id>16482017</id><snippet>f(a,b,c)
</snippet></ROW><ROW><id>16482017</id><snippet>d</snippet></ROW><ROW><id>16482017</id><snippet>d = f(a,b,c)
</snippet></ROW><ROW><id>16482079</id><snippet>def halved(n):
    while n:
        yield n
        n &gt;&gt;= 1
</snippet></ROW><ROW><id>16482079</id><snippet>list(halved(32))
</snippet></ROW><ROW><id>16482079</id><snippet>sum(halved(32))
</snippet></ROW><ROW><id>16482079</id><snippet>math.log()</snippet></ROW><ROW><id>16482079</id><snippet>range()</snippet></ROW><ROW><id>16482079</id><snippet>import math
sum(n &gt;&gt; i for i in range(int(math.log(n, 2)) + 1))
</snippet></ROW><ROW><id>16482125</id><snippet>itertools</snippet></ROW><ROW><id>16482125</id><snippet>product</snippet></ROW><ROW><id>16482125</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; [''.join(items) for items in product(array1 + array2, repeat=3)]
['aaa', 'aab', 'aac', 'aax', 'aay', 'aaz', 'aba', 'abb', 'abc', 'abx', 'aby', 'abz', 'aca', 'acb', 'acc', 'acx', 'acy', 'acz', 'axa', 'axb', 'axc', 'axx', 'axy', 'axz', 'aya', 'ayb', 'ayc', 'ayx', 'ayy', 'ayz', 'aza', 'azb', 'azc', 'azx', 'azy', 'azz', 'baa', 'bab', 'bac', 'bax', 'bay', 'baz', 'bba', 'bbb', 'bbc', 'bbx', 'bby', 'bbz', 'bca', 'bcb', 'bcc', 'bcx', 'bcy', 'bcz', 'bxa', 'bxb', 'bxc', 'bxx', 'bxy', 'bxz', 'bya', 'byb', 'byc', 'byx', 'byy', 'byz', 'bza', 'bzb', 'bzc', 'bzx', 'bzy', 'bzz', 'caa', 'cab', 'cac', 'cax', 'cay', 'caz', 'cba', 'cbb', 'cbc', 'cbx', 'cby', 'cbz', 'cca', 'ccb', 'ccc', 'ccx', 'ccy', 'ccz', 'cxa', 'cxb', 'cxc', 'cxx', 'cxy', 'cxz', 'cya', 'cyb', 'cyc', 'cyx', 'cyy', 'cyz', 'cza', 'czb', 'czc', 'czx', 'czy', 'czz', 'xaa', 'xab', 'xac', 'xax', 'xay', 'xaz', 'xba', 'xbb', 'xbc', 'xbx', 'xby', 'xbz', 'xca', 'xcb', 'xcc', 'xcx', 'xcy', 'xcz', 'xxa', 'xxb', 'xxc', 'xxx', 'xxy', 'xxz', 'xya', 'xyb', 'xyc', 'xyx', 'xyy', 'xyz', 'xza', 'xzb', 'xzc', 'xzx', 'xzy', 'xzz', 'yaa', 'yab', 'yac', 'yax', 'yay', 'yaz', 'yba', 'ybb', 'ybc', 'ybx', 'yby', 'ybz', 'yca', 'ycb', 'ycc', 'ycx', 'ycy', 'ycz', 'yxa', 'yxb', 'yxc', 'yxx', 'yxy', 'yxz', 'yya', 'yyb', 'yyc', 'yyx', 'yyy', 'yyz', 'yza', 'yzb', 'yzc', 'yzx', 'yzy', 'yzz', 'zaa', 'zab', 'zac', 'zax', 'zay', 'zaz', 'zba', 'zbb', 'zbc', 'zbx', 'zby', 'zbz', 'zca', 'zcb', 'zcc', 'zcx', 'zcy', 'zcz', 'zxa', 'zxb', 'zxc', 'zxx', 'zxy', 'zxz', 'zya', 'zyb', 'zyc', 'zyx', 'zyy', 'zyz', 'zza', 'zzb', 'zzc', 'zzx', 'zzy', 'zzz']
</snippet></ROW><ROW><id>16482357</id><snippet>import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()
</snippet></ROW><ROW><id>16482357</id><snippet>import matplotlib.pyplot as plt
plt.plot(l1)
plt.plot(l2)
plt.plot(l3)
plt.show()
</snippet></ROW><ROW><id>16482357</id><snippet>imshow()</snippet></ROW><ROW><id>16482357</id><snippet>imshow()</snippet></ROW><ROW><id>16482357</id><snippet>from pylab import *
import pywt
import scipy.io.wavfile as wavfile

# Find the highest power of two less than or equal to the input.
def lepow2(x):
    return 2 ** floor(log2(x))

# Make a scalogram given an MRA tree.
def scalogram(data):
    bottom = 0

    vmin = min(map(lambda x: min(abs(x)), data))
    vmax = max(map(lambda x: max(abs(x)), data))

    gca().set_autoscale_on(False)

    for row in range(0, len(data)):
        scale = 2.0 ** (row - len(data))

        imshow(
            array([abs(data[row])]),
            interpolation = 'nearest',
            vmin = vmin,
            vmax = vmax,
            extent = [0, 1, bottom, bottom + scale])

        bottom += scale

# Load the signal, take the first channel, limit length to a power of 2 for simplicity.
rate, signal = wavfile.read('kitten.wav')
signal = signal[0:lepow2(len(signal)),0]
tree = pywt.wavedec(signal, 'db5')

# Plotting.
gray()
scalogram(tree)
show()
</snippet></ROW><ROW><id>16482545</id><snippet>line.split()[1]
</snippet></ROW><ROW><id>16482545</id><snippet>line.split(None,2)[1:]
</snippet></ROW><ROW><id>16482545</id><snippet>list</snippet></ROW><ROW><id>16482545</id><snippet>file1_data = [line.split()[1] for line in file1 if line.strip()]
</snippet></ROW><ROW><id>16482545</id><snippet>file1_data.keys()</snippet></ROW><ROW><id>16482795</id><snippet>import collections

counter = collections.Counter()

with open("data.json") as f:
    for line in f:
        result = json.loads(line)
        if 'text' in result.keys():
            response = result['text']
            words = response.encode("utf-8").split()
            counter.update(words)
print(counter)
</snippet></ROW><ROW><id>16482973</id><snippet>fileinput</snippet></ROW><ROW><id>16482973</id><snippet>inplace=1</snippet></ROW><ROW><id>16482973</id><snippet>fileinput.input()</snippet></ROW><ROW><id>16482973</id><snippet>FileInput</snippet></ROW><ROW><id>16482973</id><snippet>myPOST.txt</snippet></ROW><ROW><id>16482973</id><snippet>abc
de:f
ghi
</snippet></ROW><ROW><id>16482973</id><snippet>import fileinput
for line in fileinput.input('myPOST.txt', inplace=True): 
    if ':' in line:
        continue # skip it
    print line.rstrip('\n') # stdout redirected to file
</snippet></ROW><ROW><id>16482973</id><snippet>myPOST.txt</snippet></ROW><ROW><id>16482973</id><snippet>abc
ghi
</snippet></ROW><ROW><id>16482973</id><snippet>.readlines()</snippet></ROW><ROW><id>16483135</id><snippet>response = DeviceView.as_view()(request, pk=1)
</snippet></ROW><ROW><id>16483149</id><snippet>join</snippet></ROW><ROW><id>16483149</id><snippet>VIstring = ','.join(['%.5f' % num for num in VI])
</snippet></ROW><ROW><id>16483149</id><snippet>numpy.fromstring</snippet></ROW><ROW><id>16483149</id><snippet>np.fromstring(VIstring, sep=',')
</snippet></ROW><ROW><id>16483270</id><snippet>app
    static (css, js)
    templates (html)
    __init__.py
    config.py
    run.py
    schema.sql # your sql script
</snippet></ROW><ROW><id>16483270</id><snippet>sqlite3 /tmp/flaskr.db &lt; schema.sql
</snippet></ROW><ROW><id>16483270</id><snippet>touch /tmp/flaskr.db
</snippet></ROW><ROW><id>16483705</id><snippet>yield</snippet></ROW><ROW><id>16483705</id><snippet>for</snippet></ROW><ROW><id>16483705</id><snippet>spinning_cursor()</snippet></ROW><ROW><id>16483705</id><snippet>spinning_cursor()</snippet></ROW><ROW><id>16483705</id><snippet>yield</snippet></ROW><ROW><id>16483705</id><snippet>for</snippet></ROW><ROW><id>16483705</id><snippet>next()</snippet></ROW><ROW><id>16483705</id><snippet>StopIteration</snippet></ROW><ROW><id>16483705</id><snippet>next()</snippet></ROW><ROW><id>16483705</id><snippet>c</snippet></ROW><ROW><id>16483705</id><snippet>&gt;&gt;&gt; def spinning_cursor():
...     cursor='/-\|'
...     i = 0
...     while 1:
...         yield cursor[i]
...         i = (i + 1) % len(cursor)
... 
&gt;&gt;&gt; sc = spinning_cursor()
&gt;&gt;&gt; sc
&lt;generator object spinning_cursor at 0x107a55eb0&gt;
&gt;&gt;&gt; next(sc)
'/'
&gt;&gt;&gt; next(sc)
'-'
&gt;&gt;&gt; next(sc)
'\\'
&gt;&gt;&gt; next(sc)
'|'
</snippet></ROW><ROW><id>16483705</id><snippet>StopIteration</snippet></ROW><ROW><id>16483705</id><snippet>for</snippet></ROW><ROW><id>16484285</id><snippet>def mark_right(answer_id):
  try:
    answer = Answer.objects.get(pk=answer_id)
  except Answer.DoesNotExist:
    raise Http404
  answer.is_right = True
  answer.save()
</snippet></ROW><ROW><id>16484420</id><snippet>tagnames_map = {t['id']: t['name'] for t in tagnames}
</snippet></ROW><ROW><id>16484420</id><snippet>for d in myjson:
    d['tagnames'] = [tagnames_map[t] for t in tagnames_map.viewkeys() &amp; d['tags']]
</snippet></ROW><ROW><id>16484420</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>16484420</id><snippet>tagnames_map</snippet></ROW><ROW><id>16484420</id><snippet>tagnames_map.keys()</snippet></ROW><ROW><id>16484420</id><snippet>.keys()</snippet></ROW><ROW><id>16484420</id><snippet>.values()</snippet></ROW><ROW><id>16484420</id><snippet>items()</snippet></ROW><ROW><id>16484420</id><snippet>d.copy()</snippet></ROW><ROW><id>16484420</id><snippet>data = []
for d in myjson:
    d = d.copy()
    d['tagnames'] = [tagnames_map[t] for t in tagnames_map.viewkeys() &amp; d['tags']]
    data.append(d)
</snippet></ROW><ROW><id>16484420</id><snippet>dict.copy()</snippet></ROW><ROW><id>16484420</id><snippet>&gt;&gt;&gt; pprint(data)
[{'otherdata': 'blah', 'tagnames': ['bassoon', 'paw paw'], 'tags': ['1', '3']},
 {'otherdata': 'blah blah',
  'tagnames': ['banjo', 'foxes'],
  'tags': ['2', '4']}]
</snippet></ROW><ROW><id>16484583</id><snippet>plt.autoscale(False)</snippet></ROW><ROW><id>16484583</id><snippet>plt.axhline</snippet></ROW><ROW><id>16484583</id><snippet>plt.plot</snippet></ROW><ROW><id>16484583</id><snippet>axhline</snippet></ROW><ROW><id>16484583</id><snippet>import scipy.stats       as stat
import matplotlib.pyplot as plt
import matplotlib.cm     as cm
import numpy             as np

data = stat.uniform.rvs(size=2400).reshape((40,60))

plt.figure(figsize=(12, 4))
plt.axes([.05,.1,.4,.8])
plt.imshow(data,cmap=cm.jet,vmin=0,vmax=1)
plt.colorbar(fraction=.03)
plt.autoscale(False)
plt.axhline(y=20, c='w', lw=3)
plt.title('the damn white line')
</snippet></ROW><ROW><id>16484607</id><snippet>import zipfile
with zipfile.ZipFile('example.zip', 'r') as zf:
    zf.extract(filename)
</snippet></ROW><ROW><id>16484607</id><snippet>path</snippet></ROW><ROW><id>16484607</id><snippet>extract()</snippet></ROW><ROW><id>16484607</id><snippet>zf.extract(filename, path)
</snippet></ROW><ROW><id>16484765</id><snippet>cicles</snippet></ROW><ROW><id>16484765</id><snippet>def circle(symbol):

    def lines1(aa):
        print(symbol * 20)
        aa()
        print(symbol * 20)
    return(lines1)
</snippet></ROW><ROW><id>16484765</id><snippet>aa()</snippet></ROW><ROW><id>16484765</id><snippet>lines2()</snippet></ROW><ROW><id>16484765</id><snippet>lines5()</snippet></ROW><ROW><id>16484765</id><snippet>None</snippet></ROW><ROW><id>16484765</id><snippet>lines4()</snippet></ROW><ROW><id>16484765</id><snippet>lines4()</snippet></ROW><ROW><id>16484765</id><snippet>def circle(symbol):

    def lines1(inner):
        def wrapper():
            print(symbol * 20)
            inner()
            print(symbol * 20)
        return wrapper

    def lines2(inner):
        def wrapper():
            print(symbol * 7 + ' ' * 6 + symbol * 7)
            inner()
            print(symbol * 7 + ' ' * 6 + symbol * 7)
        return wrapper

    def lines3(inner):
        def wrapper():
            print(symbol * 4 + ' ' * 12 + symbol * 4)
            inner()
            print(symbol * 4 + ' ' * 12 + symbol * 4)
        return wrapper

    def lines4(inner):
        def wrapper():
            print(symbol * 2 + ' ' * 16 + symbol * 2)
            inner()
            print(symbol * 2 + ' ' * 16 + symbol * 2)
        return wrapper

    def lines5():
        print(symbol + ' ' * 18 + symbol)
        print(symbol + ' ' * 18 + symbol)

    lines1(lines2(lines3(lines4(lines5))))()
</snippet></ROW><ROW><id>16484765</id><snippet>lines1</snippet></ROW><ROW><id>16484765</id><snippet>lines4</snippet></ROW><ROW><id>16484765</id><snippet>lines5</snippet></ROW><ROW><id>16484765</id><snippet>lines5</snippet></ROW><ROW><id>16484765</id><snippet>@decorator</snippet></ROW><ROW><id>16484765</id><snippet>    @lines1
    @lines2
    @lines3
    @lines4
    def lines5():
        print(symbol + ' ' * 18 + symbol)
        print(symbol + ' ' * 18 + symbol)

    line5()
</snippet></ROW><ROW><id>16484869</id><snippet>&gt;&gt;&gt; L = ['1,9', '3,10', '5,8', '8,11', '2,7', '4,5', '2,6']
&gt;&gt;&gt; [int(y) for x in L for y in x.split(',')]
[1, 9, 3, 10, 5, 8, 8, 11, 2, 7, 4, 5, 2, 6]
</snippet></ROW><ROW><id>16484869</id><snippet>res = []
for x in L:
    for y in x.split(','):
        res.append(int(y))
</snippet></ROW><ROW><id>16484869</id><snippet>[int(y) 
 for x in L 
 for y in x.split(',')]
</snippet></ROW><ROW><id>16484869</id><snippet>for</snippet></ROW><ROW><id>16484869</id><snippet>&gt;&gt;&gt; [int(x) for x in ','.join(L).split(',')]
[1, 9, 3, 10, 5, 8, 8, 11, 2, 7, 4, 5, 2, 6]
</snippet></ROW><ROW><id>16485256</id><snippet>alter table source_to_port modify src_address varchar(32);
</snippet></ROW><ROW><id>16485379</id><snippet>from gi.repository import Gtk
from os.path import abspath, dirname, join

WHERE_AM_I = abspath(dirname(__file__))

# My Model map
mm = {
    'name'        : 0,
    'catalog_num' : 1,
    'comment'     : 2,
    'component'   : 3,
    'is_top'      : 4,
    'is_child'    : 5,
}

class MyApp(object):

    def __init__(self):
        """
        Build GUI
        """

        # Build GUI from Glade file
        self.builder = Gtk.Builder()
        self.glade_file = join(WHERE_AM_I, 'gui.glade')
        self.builder.add_from_file(self.glade_file)

        # Get objects
        go = self.builder.get_object
        self.window = go('window')
        self.treestore = go('treestore')

        # Fill model
        self._load_model()

        # Connect signals
        self.builder.connect_signals(self)
        self.window.connect('delete-event', lambda x,y: Gtk.main_quit())

        # Everything is ready
        self.window.show()


    def _load_model(self):

        my_data = [
                ['Cheese', 'F001', 'This is the best cheese ever!', '', True, False],
                ['Pepperoni', 'F002', 'Delicious pepperoni :}', '', True, False],
                ['Pepperonni Pizza', 'P001', 'Yes, I\'m hungry :(', '', True, False],
                ['', '', None, 'Cheese', False, True],
                ['', '', None, 'Pepperonni', False, True],
            ]

        parent = None
        for i in my_data:
            if i[mm['is_child']]:
                self.treestore.append(parent, i)
            else:
                parent = self.treestore.append(None, i)


if __name__ == '__main__':
    gui = MyApp()
    Gtk.main()
</snippet></ROW><ROW><id>16485379</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;interface&gt;
  &lt;!-- interface-requires gtk+ 3.0 --&gt;
  &lt;object class="GtkTreeStore" id="treestore"&gt;
    &lt;columns&gt;
      &lt;!-- column-name name --&gt;
      &lt;column type="gchararray"/&gt;
      &lt;!-- column-name catalog_num --&gt;
      &lt;column type="gchararray"/&gt;
      &lt;!-- column-name comment --&gt;
      &lt;column type="gchararray"/&gt;
      &lt;!-- column-name component --&gt;
      &lt;column type="gchararray"/&gt;
      &lt;!-- column-name is_top --&gt;
      &lt;column type="gboolean"/&gt;
      &lt;!-- column-name is_child --&gt;
      &lt;column type="gboolean"/&gt;
    &lt;/columns&gt;
  &lt;/object&gt;
  &lt;object class="GtkWindow" id="window"&gt;
    &lt;property name="can_focus"&gt;False&lt;/property&gt;
    &lt;property name="border_width"&gt;10&lt;/property&gt;
    &lt;property name="title" translatable="yes"&gt;TreeView test&lt;/property&gt;
    &lt;property name="window_position"&gt;center-always&lt;/property&gt;
    &lt;property name="default_width"&gt;400&lt;/property&gt;
    &lt;property name="default_height"&gt;300&lt;/property&gt;
    &lt;child&gt;
      &lt;object class="GtkScrolledWindow" id="scrolledwindow"&gt;
        &lt;property name="visible"&gt;True&lt;/property&gt;
        &lt;property name="can_focus"&gt;True&lt;/property&gt;
        &lt;property name="shadow_type"&gt;in&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="GtkTreeView" id="treeview"&gt;
            &lt;property name="visible"&gt;True&lt;/property&gt;
            &lt;property name="can_focus"&gt;True&lt;/property&gt;
            &lt;property name="model"&gt;treestore&lt;/property&gt;
            &lt;property name="headers_visible"&gt;False&lt;/property&gt;
            &lt;property name="headers_clickable"&gt;False&lt;/property&gt;
            &lt;property name="search_column"&gt;1&lt;/property&gt;
            &lt;property name="tooltip_column"&gt;2&lt;/property&gt;
            &lt;child internal-child="selection"&gt;
              &lt;object class="GtkTreeSelection" id="treeview-selection"/&gt;
            &lt;/child&gt;
            &lt;child&gt;
              &lt;object class="GtkTreeViewColumn" id="treeviewcolumn_name"&gt;
                &lt;property name="title" translatable="yes"&gt;Name&lt;/property&gt;
                &lt;child&gt;
                  &lt;object class="GtkCellRendererText" id="cellrenderertext_name"/&gt;
                  &lt;attributes&gt;
                    &lt;attribute name="visible"&gt;4&lt;/attribute&gt;
                    &lt;attribute name="text"&gt;0&lt;/attribute&gt;
                  &lt;/attributes&gt;
                &lt;/child&gt;
                &lt;child&gt;
                  &lt;object class="GtkCellRendererText" id="cellrenderertext_component"/&gt;
                  &lt;attributes&gt;
                    &lt;attribute name="visible"&gt;5&lt;/attribute&gt;
                    &lt;attribute name="text"&gt;3&lt;/attribute&gt;
                  &lt;/attributes&gt;
                &lt;/child&gt;
              &lt;/object&gt;
            &lt;/child&gt;
            &lt;child&gt;
              &lt;object class="GtkTreeViewColumn" id="treeviewcolumn_catalog_num"&gt;
                &lt;property name="title" translatable="yes"&gt;Catalog #&lt;/property&gt;
                &lt;child&gt;
                  &lt;object class="GtkCellRendererText" id="cellrenderertext_catalog"/&gt;
                  &lt;attributes&gt;
                    &lt;attribute name="visible"&gt;4&lt;/attribute&gt;
                    &lt;attribute name="text"&gt;1&lt;/attribute&gt;
                  &lt;/attributes&gt;
                &lt;/child&gt;
              &lt;/object&gt;
            &lt;/child&gt;
          &lt;/object&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</snippet></ROW><ROW><id>16485386</id><snippet>with open(bom_filename, 'r') as my_file:
    file_array = [word.strip() for word in my_file if word.startswith("/")]
</snippet></ROW><ROW><id>16485386</id><snippet>.readlines()</snippet></ROW><ROW><id>16485466</id><snippet>Circle(img, center, radius, color, thickness=1, lineType=8, shift=0) → None
Draws a circle.

Parameters: 
img (CvArr) – Image where the circle is drawn
center (CvPoint) – Center of the circle
radius (int) – Radius of the circle
color (CvScalar) – Circle color
thickness (int) – Thickness of the circle outline if positive, otherwise this indicates that a filled circle is to be drawn
lineType (int) – Type of the circle boundary, see Line description
shift (int) – Number of fractional bits in the center coordinates and radius value
</snippet></ROW><ROW><id>16485507</id><snippet>from itertools import groupby
from operator import itemgetter

def extract_keys(mapping, prefix):
    prefix = '{}_'.format(prefix)

    # test for the `.._count` key first, if it's not there, bail out early
    if prefix + 'count' not in mapping:
        return None

    # find all matching keys, split out the counter for sorting and grouping
    keys = [(k, int(k.split('_', 2)[1]))
        for k in mapping if k.startswith(prefix) and k != prefix + 'count']
    keys.sort(key=itemgetter(1))

    # group keys on the counter, then generate a dictionary per counter value
    return [{k[0].split('_', 2)[-1]: mapping[k[0]] for k in group}
        for c, group in groupby(keys, itemgetter(1))]
</snippet></ROW><ROW><id>16485507</id><snippet>&gt;&gt;&gt; extract_keys(abc, 's')
[{'id': '2', 'name': 'melisa'}, {'name': 'graham', 'id': '4'}]
&gt;&gt;&gt; extract_keys(abc, 'b')
[{'name': 'henrik', 'id': '9'}]
</snippet></ROW><ROW><id>16485507</id><snippet>xyz = {k: v for k, v in abc.iteritems() if not k.startswith('s_') and not k.startswith('b_')}
s_values = extract_keys(abc, 's')
if s_values is not None:
    xyz['s'] = s_values
b_values = extract_keys(abc, 'b')
if b_values is not None:
    xyz['b'] = b_values
</snippet></ROW><ROW><id>16485507</id><snippet>abc</snippet></ROW><ROW><id>16485507</id><snippet>&gt;&gt;&gt; pprint(xyz)
{'b': [{'id': '9', 'name': 'henrik'}],
 'id': '1',
 'name': 'peter',
 's': [{'id': '2', 'name': 'melisa'}, {'id': '4', 'name': 'graham'}],
 'type': 'insecure'}
</snippet></ROW><ROW><id>16485566</id><snippet>authenticate</snippet></ROW><ROW><id>16485566</id><snippet>authenticate</snippet></ROW><ROW><id>16485566</id><snippet>class CustomNCPAuthBackend(object):
    """
    This is custom authentication backend.
    Authenticate against the webservices call.

    The method below would override authenticate() of django.contrib.auth    
    """
    def authenticate_password(self, username=None, password=None):
        print "inside authenticate of username and password with username being : "+username
        return None

    def authenticate_token(self,token=None):
        print "inside authenticate of token with token being : "+token
        return None

    def authenticate(self, token=None, username=None, password=None):
        if token is not None:
             return self.authenticate_token(token)
        else:
             return self.authenticate_password(username, password)
</snippet></ROW><ROW><id>16485566</id><snippet>AuthMiddleWare</snippet></ROW><ROW><id>16485633</id><snippet>rdata = rdata.reshape(-1, 2)
mask = (rdata != -1).all(1)

# remove every x, y pair that is after a pair with a -1.
mask[1:][mask[:-1] == False] = False
# remove first x, y pair
mask[0] = False

rdata = rdata[mask]

# Now need to use bincount, [::-1], since you use data[y,x]:
flat_rdata = np.ravel_multi_index(tuple(rdata.T)[::-1], (data_height, data_width))

res = np.bincount(flat_rdata, minlength=data_height * data_width)
res = res.reshape(data_height, data_width)
</snippet></ROW><ROW><id>16485805</id><snippet>datetime.today()</snippet></ROW><ROW><id>16485805</id><snippet>tzinfo</snippet></ROW><ROW><id>16485805</id><snippet>10 May 2013 13:00 +0200  &gt;  10 May 2013 12:00
</snippet></ROW><ROW><id>16485805</id><snippet>13:00</snippet></ROW><ROW><id>16485805</id><snippet>12:00</snippet></ROW><ROW><id>16485805</id><snippet>-0100</snippet></ROW><ROW><id>16485805</id><snippet>11:00Z  &gt; 13:00Z</snippet></ROW><ROW><id>16485805</id><snippet>datetime.now(timezone.utc)</snippet></ROW><ROW><id>16485883</id><snippet>__init__</snippet></ROW><ROW><id>16485883</id><snippet>MyClass</snippet></ROW><ROW><id>16486080</id><snippet>Ctrl + C</snippet></ROW><ROW><id>16486080</id><snippet>if __name__ == '__main__':
    import signal
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    your_application_main()
</snippet></ROW><ROW><id>16486305</id><snippet>(-np.array(avgDists)).argsort()[:n]
</snippet></ROW><ROW><id>16486423</id><snippet>django-admin.py compilemessages</snippet></ROW><ROW><id>16486423</id><snippet>_</snippet></ROW><ROW><id>16486423</id><snippet>ugettext</snippet></ROW><ROW><id>16486423</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>16486561</id><snippet>In [28]: df = DataFrame(randn(10,10),columns=[ 'c_%s' % i for i in range(3)] + ['d_%s' % i for i in range(3) ] + ['e_%s' % i for i in range(4)])

In [3]: df.filter(regex='d_|e_')
Out[3]: 
        d_0       d_1       d_2       e_0       e_1       e_2       e_3
0 -0.022661 -0.504317  0.279227  0.286951 -0.126999 -1.658422  1.577863
1  0.501654  0.145550 -0.864171 -0.374261 -0.399360  1.217679  1.357648
2 -0.608580  1.138143  1.228663  0.427360  0.256808  0.105568 -0.037422
3 -0.993896 -0.581638 -0.937488  0.038593 -2.012554 -0.182407  0.689899
4  0.424005 -0.913518  0.405155 -1.111424 -0.180506  1.211730  0.118168
5  0.701127  0.644692 -0.188302 -0.561400  0.748692 -0.585822  1.578240
6  0.475958 -0.901369 -0.734969  1.090093  1.297208  1.140128  0.173941
7 -0.679514 -0.790529 -2.057733  0.420175  1.766671 -0.797129 -0.825583
8 -0.918645  0.916237  0.992001 -0.440573 -1.875960 -1.223502  0.084821
9  1.096687 -1.414057 -0.268211  0.253461 -0.175931  1.481261 -0.200600
</snippet></ROW><ROW><id>16486830</id><snippet>ldconfig</snippet></ROW><ROW><id>16486830</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>16486830</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>16486830</id><snippet>ldconfig
</snippet></ROW><ROW><id>16486950</id><snippet>.all()</snippet></ROW><ROW><id>16486950</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(np.random.randint(0, 2, (2, 8)))
&gt;&gt;&gt; df
   0  1  2  3  4  5  6  7
0  0  0  0  1  0  0  1  0
1  1  1  0  0  0  1  1  1
&gt;&gt;&gt; df == 0
       0      1     2      3     4      5      6      7
0   True   True  True  False  True   True  False   True
1  False  False  True   True  True  False  False  False
&gt;&gt;&gt; (df == 0).all()
0    False
1    False
2     True
3    False
4     True
5    False
6    False
7    False
dtype: bool
&gt;&gt;&gt; df.columns[(df == 0).all()]
Int64Index([u'2', u'4'], dtype=int64)
&gt;&gt;&gt; df.ix[:, (df == 0).all()]
   2  4
0  0  0
1  0  0
</snippet></ROW><ROW><id>16486966</id><snippet>mainloop()</snippet></ROW><ROW><id>16486966</id><snippet>winfo_width()</snippet></ROW><ROW><id>16486966</id><snippet>winfo_height()</snippet></ROW><ROW><id>16486966</id><snippet>geometry()</snippet></ROW><ROW><id>16486966</id><snippet>def center(win):
    win.update()
    w_req, h_req = win.winfo_width(), win.winfo_height()
    w_form = win.winfo_rootx() - win.winfo_x()
    w = w_req + w_form*2
    h = h_req + (win.winfo_rooty() - win.winfo_y()) + w_form
    x = (win.winfo_screenwidth() // 2) - (w // 2)
    y = (win.winfo_screenheight() // 2) - (h // 2)
    win.geometry('{0}x{1}+{2}+{3}'.format(w_req, h_req, x, y))
</snippet></ROW><ROW><id>16487038</id><snippet>(value1, value2)</snippet></ROW><ROW><id>16487038</id><snippet>str([value1, value2])
</snippet></ROW><ROW><id>16487038</id><snippet>import hashlib

value1 = 'coconut'
value2 = 1.23

m = hashlib.sha1()
m.update(str([value1, value2]))
print(m.hexdigest())            
# 1381ae81c8a5b660cca5b8d4607aa378320e25e8
</snippet></ROW><ROW><id>16487276</id><snippet>HeaderTable = doc.Sections(1).Headers(1).Range.Tables(1)
FooterTable = doc.Sections(1).Footers(1).Range.Tables(1)
</snippet></ROW><ROW><id>16487276</id><snippet>HeaderTablesCount = doc.Sections(1).Headers(1).Range.Tables.Count
FooterTablesCount = doc.Sections(1).Footers(1).Range.Tables.Count
</snippet></ROW><ROW><id>16487276</id><snippet>HeaderTable.Cell(1,1).Range.Text
FooterTable.Cell(1,1).Range.Text
</snippet></ROW><ROW><id>16487357</id><snippet>t_l[-1]</snippet></ROW><ROW><id>16487357</id><snippet>sorted(t_l, key=lambda i: (-i[-1], i[1]))
</snippet></ROW><ROW><id>16487357</id><snippet>lambda</snippet></ROW><ROW><id>16487357</id><snippet>sorted(t_l, key=lambda i: (i[-1], -i[1]), reverse=True)
</snippet></ROW><ROW><id>16487357</id><snippet>ord()</snippet></ROW><ROW><id>16487357</id><snippet>ord()</snippet></ROW><ROW><id>16487357</id><snippet>sorted(t_l, key=lambda i: (-ord(i[-1]), i[1]))
</snippet></ROW><ROW><id>16487497</id><snippet>type = "text only"
</snippet></ROW><ROW><id>16487497</id><snippet>if type(chunk)...
</snippet></ROW><ROW><id>16487497</id><snippet>*** TypeError: 'str' object is not callable
</snippet></ROW><ROW><id>16487503</id><snippet>copied = copy.deepcopy(my_obj)(b=77)
</snippet></ROW><ROW><id>16487503</id><snippet>__call__()</snippet></ROW><ROW><id>16487772</id><snippet>&gt;&gt;&gt; s = 'this is the string that Luci want to parse for a dataset uci at web'
&gt;&gt;&gt; s.split(' ').count('uci')
1
</snippet></ROW><ROW><id>16487886</id><snippet>open</snippet></ROW><ROW><id>16487886</id><snippet>with open('file.txt', 'r') as fin:
    # Access fin like normal

# No matter what happens, after the block, it's closed!
</snippet></ROW><ROW><id>16487886</id><snippet>open</snippet></ROW><ROW><id>16487886</id><snippet>close</snippet></ROW><ROW><id>16487886</id><snippet>def my_open(filename, *args):
    logger.debug('Opening %s' % filename)
    return open(filename, *args)

def my_close(file_obj):
    logger.debug('Closing %s' % file_obj.name)
    return file_obj.close()
</snippet></ROW><ROW><id>16487886</id><snippet>import traceback
class MyFile(file):
    @staticmethod
    def open(*args, **kwargs):
        return MyFile(*args, **kwargs)

    def __init__(self, *args, **kwargs):
        self._file = self._open(*args, **kwargs)
        print('Opening %s from %s' % (
            self._file.name, ''.join(traceback.format_stack())))

    def close(self):
        print('Closing file %s from %s' % (
            self._file.name, ''.join(traceback.format_stack())))
        self._file.close()

# Now the monkey-patching
file = MyFile
MyFile._open = open
open = MyFile.open

o = open('hello', 'w+')
</snippet></ROW><ROW><id>16487952</id><snippet>__repr__</snippet></ROW><ROW><id>16487952</id><snippet>class FrozenDict(dict):
    def __init__(self,default=None):
        if default: self.update(default)
    def __hash__(self):
        return id(self)
    def __repr__(self):
        return "FrozenDict(%s)" % dict.__repr__(self)


print FrozenDict({"dsa":"saas"})

dictionary={FrozenDict({"dsa":"saas"}):"Hi"}

print eval(str(dictionary))
</snippet></ROW><ROW><id>16487952</id><snippet>FrozenDict({'dsa': 'saas'})
{FrozenDict({'dsa': 'saas'}): 'Hi'}
</snippet></ROW><ROW><id>16488187</id><snippet>.exclude</snippet></ROW><ROW><id>16488187</id><snippet>def get_object_list(self, request):
     return super(FollowingPhoto, self).get_object_list(request).filter(photographer__user__in = request.user.relationships.following()).exclude(photographer__user__in=request.user.relationships.blocking())
</snippet></ROW><ROW><id>16488187</id><snippet>def get_object_list(self, request):
    return super(FollowingPhoto, self).get_object_list(request).filter(photographer__user__in = request.user.relationships.following()).exclude(photographer__user__in=request.user.relationships.blockers())
</snippet></ROW><ROW><id>16488383</id><snippet>int</snippet></ROW><ROW><id>16488383</id><snippet>try:
    value = int(value)
except ValueError:
    pass  # it was a string, not an int.
</snippet></ROW><ROW><id>16488383</id><snippet>value.isdigit()
</snippet></ROW><ROW><id>16488383</id><snippet>str.isdigit()</snippet></ROW><ROW><id>16488383</id><snippet>True</snippet></ROW><ROW><id>16488383</id><snippet>0</snippet></ROW><ROW><id>16488383</id><snippet>9</snippet></ROW><ROW><id>16488383</id><snippet>int()</snippet></ROW><ROW><id>16488383</id><snippet>+</snippet></ROW><ROW><id>16488383</id><snippet>-</snippet></ROW><ROW><id>16488383</id><snippet>int()</snippet></ROW><ROW><id>16488383</id><snippet>'  +10  '</snippet></ROW><ROW><id>16488544</id><snippet>label=..</snippet></ROW><ROW><id>16488544</id><snippet>plot</snippet></ROW><ROW><id>16488544</id><snippet>from StringIO import StringIO

myDatacsv = StringIO("""a, b, c
1, 2, 3
2, 3, 4
3, 4, 5""")
</snippet></ROW><ROW><id>16488544</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>16488544</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; dataArray = np.genfromtxt(myDatacsv, delimiter = ',', names = True)
&gt;&gt;&gt; dataArray
array([(1.0, 2.0, 3.0), (2.0, 3.0, 4.0), (3.0, 4.0, 5.0)], 
      dtype=[('a', '&lt;f8'), ('b', '&lt;f8'), ('c', '&lt;f8')])
</snippet></ROW><ROW><id>16488544</id><snippet>"myData.csv"</snippet></ROW><ROW><id>16488544</id><snippet>myDatacsv</snippet></ROW><ROW><id>16488544</id><snippet>import matplotlib.pyplot as plt

plt.figure()
for col_name in dataArray.dtype.names:
    plt.plot(dataArray[col_name], label=col_name)

plt.legend()
plt.show()
</snippet></ROW><ROW><id>16488544</id><snippet>import pandas as pd

# one of the following will do (reading it with pandas, or converting 
# from the numpy array to pandas dataframe)
data_df = pd.read_csv(myDatacsv)
data_df = pd.DataFrame(dataArray)

data_df.plot()
</snippet></ROW><ROW><id>16489011</id><snippet>['hello', '', '', '', '', '', '', '', 'there']
</snippet></ROW><ROW><id>16489011</id><snippet>-</snippet></ROW><ROW><id>16489011</id><snippet>+=</snippet></ROW><ROW><id>16489011</id><snippet>+=</snippet></ROW><ROW><id>16489011</id><snippet>==</snippet></ROW><ROW><id>16489011</id><snippet>(\-|\+\=|\=\=|\=|\+)</snippet></ROW><ROW><id>16489011</id><snippet>(?:\-|\+\=|\=\=|\=|\+)</snippet></ROW><ROW><id>16489011</id><snippet>['hello', '-', '', '+=', '', '==', '', '=', '', None, '', '=', '', '+', '', None, 'there']
</snippet></ROW><ROW><id>16489011</id><snippet>None</snippet></ROW><ROW><id>16489011</id><snippet>\s+</snippet></ROW><ROW><id>16489011</id><snippet>None</snippet></ROW><ROW><id>16489011</id><snippet>def tokenize(s):
  import re
  pattern = re.compile("(\-|\+\=|\=\=|\=|\+)|\s+")
  return [ x for x in pattern.split(s) if x ]
</snippet></ROW><ROW><id>16489356</id><snippet>bisect</snippet></ROW><ROW><id>16489356</id><snippet>return bisect(list[:split],target)</snippet></ROW><ROW><id>16489356</id><snippet>split</snippet></ROW><ROW><id>16489356</id><snippet>list</snippet></ROW><ROW><id>16489356</id><snippet>list[:split]</snippet></ROW><ROW><id>16489356</id><snippet>list[:len(list)//2]</snippet></ROW><ROW><id>16489356</id><snippet>list[split:]</snippet></ROW><ROW><id>16489356</id><snippet>list[len(list)//2:]</snippet></ROW><ROW><id>16489576</id><snippet>get_serving_url</snippet></ROW><ROW><id>16489576</id><snippet>from google.appengine.api.images import get_serving_url

url = get_serving_url(blob_key, size=None, crop=False, secure_url=None)
</snippet></ROW><ROW><id>16489576</id><snippet>BlobstoreDownloadHandler</snippet></ROW><ROW><id>16489589</id><snippet>b.click('button[value="enter"]', True)
</snippet></ROW><ROW><id>16489727</id><snippet>ses.post(url, data=payload)</snippet></ROW><ROW><id>16489727</id><snippet>User-Agent</snippet></ROW><ROW><id>16489727</id><snippet>ses.headers['User-Agent'] = '...'
response = ses.post(url, data=payload)
final_response = ses.get(final_url)
</snippet></ROW><ROW><id>16489730</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    version="1.0"&gt;
    &lt;xsl:output method="text" encoding="ISO-8859-1" /&gt;
    &lt;xsl:variable name="newline" select="'
'"/&gt;
    &lt;xsl:template match="Fruit"&gt;
        &lt;xsl:for-each select="Customer"&gt;
            &lt;xsl:value-of select="preceding-sibling::FruitId" /&gt;
            &lt;xsl:text&gt;,&lt;/xsl:text&gt;
            &lt;xsl:value-of select="Numbereaten" /&gt;
            &lt;xsl:text&gt;,&lt;/xsl:text&gt;
            &lt;xsl:value-of select="Weight" /&gt;
            &lt;xsl:value-of select="$newline" /&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>16489730</id><snippet>   Source xmlSource = new StreamSource(new File("xmlFile"));
   Source xsltSource = new StreamSource(new File("xsltFile"));
   Transformer transformer = TransformerFactory.newInstance().newTransformer();
   StreamResult csvResult = new StreamResult(new File("file.csv"));
   transformer.transform(xmlSource, csvResult);
</snippet></ROW><ROW><id>16489890</id><snippet>with open("txt_files/input_data_set.txt") as f:
    reading_file_info = f.read()#reading lines exact content
    reading_file_info=f.read 
    tdm = textmining.TermDocumentMatrix()
    tdm.add_doc(reading_file_info)

    tdm.write_csv('txt_files/input_data_set_result.txt', cutoff=1)
    for row in tdm.rows(cutoff=1):
        print row
</snippet></ROW><ROW><id>16489912</id><snippet>fh = open("arduino.txt")
for line in fh:
    pass
last = line
</snippet></ROW><ROW><id>16489912</id><snippet>#You might want to split based on specific delimiters, but I am using the default
split_line = last.split() #T:  55% 27.50   12% 90% N
</snippet></ROW><ROW><id>16489912</id><snippet>#!/usr/bin/python

import time

f = open("arduino.txt")
while line in f:
    pass
f.close();
#line is the last line now

items = line.strip().split()

print time.strftime("%Y-%m-%d %H:%M:%S"), items[2]
#Write to the new file here. 
</snippet></ROW><ROW><id>16490094</id><snippet>import inspect,dis

def expecting():
    """Return how many values the caller is expecting"""
    f = inspect.currentframe()
    f = f.f_back.f_back
    c = f.f_code
    i = f.f_lasti
    bytecode = c.co_code
    instruction = bytecode[i+3]
    if instruction == dis.opmap['UNPACK_SEQUENCE']:
        howmany = bytecode[i+4]
        return howmany
    elif instruction == dis.opmap['POP_TOP']:
        return 0
    return 1

def cleverfunc():
    howmany = expecting()
    if howmany == 0:
        print("return value discarded")
    if howmany == 2:
        return 1,2
    elif howmany == 3:
        return 1,2,3
    return 1

def test():
    cleverfunc()
    x = cleverfunc()
    print(x)
    x,y = cleverfunc()
    print(x,y)
    x,y,z = cleverfunc()
    print(x,y,z)

test()
</snippet></ROW><ROW><id>16490210</id><snippet>csv</snippet></ROW><ROW><id>16490210</id><snippet>import csv

total = count = 0

with open('3114644b.csv', newline='') as f:
    reader = csv.reader(f)
    next(reader, None)  # skip the first row of headers

    for row in reader:
        total += float(row[4])
        count += 1

if count:
    # only calculate the average if there was actually anything in the file
    average = total / count
    print('The average of the values is {}'.format(average))
</snippet></ROW><ROW><id>16490210</id><snippet>with</snippet></ROW><ROW><id>16490210</id><snippet>with</snippet></ROW><ROW><id>16490210</id><snippet>.close()</snippet></ROW><ROW><id>16490212</id><snippet>import re

cleared_subtitles = [subtitle for subtitle in subtitles if not re.match(r'\d*\r')]
</snippet></ROW><ROW><id>16490244</id><snippet>r'(?:^|[\b_\.%s-])[Tt]est' % os.sep</snippet></ROW><ROW><id>16490244</id><snippet>nose/selector.py</snippet></ROW><ROW><id>16490244</id><snippet>Selector.matches(self, name)</snippet></ROW><ROW><id>16490244</id><snippet>re.match</snippet></ROW><ROW><id>16490244</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; import os
&gt;&gt;&gt; testMatch = r'(?:^|[\b_\.%s-])[Tt]est' % os.sep
&gt;&gt;&gt; re.match(testMatch, 'populate_test_data')
&gt;&gt;&gt; re.search(testMatch, 'populate_test_data')
&lt;_sre.SRE_Match object at 0x7f3512569238&gt;
</snippet></ROW><ROW><id>16490244</id><snippet>populate_test_data</snippet></ROW><ROW><id>16490441</id><snippet>meta.common</snippet></ROW><ROW><id>16490441</id><snippet>sys.modules</snippet></ROW><ROW><id>16490441</id><snippet>meta.common.__dict__</snippet></ROW><ROW><id>16490441</id><snippet>import meta.common.fileutils as fu2</snippet></ROW><ROW><id>16490441</id><snippet>fu2</snippet></ROW><ROW><id>16490441</id><snippet>meta.common.__dict__</snippet></ROW><ROW><id>16490441</id><snippet>sys.modules</snippet></ROW><ROW><id>16490441</id><snippet>&gt;&gt;&gt; import meta.common
&gt;&gt;&gt; meta.common.fileutils = fu1
</snippet></ROW><ROW><id>16490441</id><snippet>sys.modules["meta.common.fileutils"] = fu1</snippet></ROW><ROW><id>16490455</id><snippet>print "Content-type: application/json\n\n";</snippet></ROW><ROW><id>16490575</id><snippet>Level</snippet></ROW><ROW><id>16490575</id><snippet>Level</snippet></ROW><ROW><id>16490575</id><snippet>level</snippet></ROW><ROW><id>16490575</id><snippet>Level</snippet></ROW><ROW><id>16490575</id><snippet>Name</snippet></ROW><ROW><id>16490575</id><snippet>string</snippet></ROW><ROW><id>16490575</id><snippet>name</snippet></ROW><ROW><id>16490575</id><snippet>Name</snippet></ROW><ROW><id>16490575</id><snippet>string</snippet></ROW><ROW><id>16490575</id><snippet>string</snippet></ROW><ROW><id>16490575</id><snippet>Level</snippet></ROW><ROW><id>16490575</id><snippet>int</snippet></ROW><ROW><id>16490575</id><snippet>exp</snippet></ROW><ROW><id>16490575</id><snippet>player.level</snippet></ROW><ROW><id>16490575</id><snippet>exp</snippet></ROW><ROW><id>16490575</id><snippet>player.level.exp</snippet></ROW><ROW><id>16490575</id><snippet>exp</snippet></ROW><ROW><id>16490575</id><snippet>player.level.increase()</snippet></ROW><ROW><id>16490575</id><snippet>player.level += 1</snippet></ROW><ROW><id>16490575</id><snippet>Level.__add__(self, value)</snippet></ROW><ROW><id>16490575</id><snippet>required_exp</snippet></ROW><ROW><id>16490678</id><snippet>Counter</snippet></ROW><ROW><id>16490678</id><snippet>import numpy as np
def drop_zeros(a_list):
    return [i for i in a_list if i&gt;0]

def log_binning(counter_dict,bin_count=35):

    max_x = log10(max(counter_dict.keys()))
    max_y = log10(max(counter_dict.values()))
    max_base = max([max_x,max_y])

    min_x = log10(min(drop_zeros(counter_dict.keys())))

    bins = np.logspace(min_x,max_base,num=bin_count)

    # Based off of: http://stackoverflow.com/questions/6163334/binning-data-in-python-with-scipy-numpy
    bin_means_y = (np.histogram(counter_dict.keys(),bins,weights=counter_dict.values())[0] / np.histogram(counter_dict.keys(),bins)[0])
    bin_means_x = (np.histogram(counter_dict.keys(),bins,weights=counter_dict.keys())[0] / np.histogram(counter_dict.keys(),bins)[0])

    return bin_means_x,bin_means_y
</snippet></ROW><ROW><id>16490678</id><snippet>NetworkX</snippet></ROW><ROW><id>16490678</id><snippet>import networkx as nx
ba_g = nx.barabasi_albert_graph(10000,2)
ba_c = nx.degree_centrality(ba_g)
# To convert normalized degrees to raw degrees
#ba_c = {k:int(v*(len(ba_g)-1)) for k,v in ba_c.iteritems()}
ba_c2 = dict(Counter(ba_c.values()))

ba_x,ba_y = log_binning(ba_c2,50)

plt.xscale('log')
plt.yscale('log')
plt.scatter(ba_x,ba_y,c='r',marker='s',s=50)
plt.scatter(ba_c2.keys(),ba_c2.values(),c='b',marker='x')
plt.xlim((1e-4,1e-1))
plt.ylim((.9,1e4))
plt.xlabel('Connections (normalized)')
plt.ylabel('Frequency')
plt.show()
</snippet></ROW><ROW><id>16490691</id><snippet>csvreader.line_num</snippet></ROW><ROW><id>16490691</id><snippet>None</snippet></ROW><ROW><id>16490691</id><snippet>with open(parafile, "rb") as paracsv:         
    #Read in parameter values as a dictionary
    paradict = csv.DictReader(paracsv)
    has_rows = False
    for line in paradict:
        has_rows = True

    if not has_rows:
        return None
</snippet></ROW><ROW><id>16490807</id><snippet>ALLOWED_ARGS = {"repr", "str", "unicode"}
funcs = {f: getattr(__builtins__, f) for f in ALLOWED_ARGS}
# funcs.update({"custom": custom_func})

# I'd also assert on all functions having the same arity,
# but this is tricky with builtins...

func = funcs[sys.argv[1]]
</snippet></ROW><ROW><id>16490807</id><snippet>__builtins__[name]</snippet></ROW><ROW><id>16490807</id><snippet>getattr(__builtins__, name)</snippet></ROW><ROW><id>16491079</id><snippet>float</snippet></ROW><ROW><id>16491079</id><snippet>Decimal</snippet></ROW><ROW><id>16491079</id><snippet>numpy</snippet></ROW><ROW><id>16491079</id><snippet>dtype=object</snippet></ROW><ROW><id>16491079</id><snippet>numpy</snippet></ROW><ROW><id>16491079</id><snippet>Decimal</snippet></ROW><ROW><id>16491079</id><snippet>Decimal</snippet></ROW><ROW><id>16491108</id><snippet>import re

data = '''[name]bill billy [email]bill.billy@hotmail.com [dob]01.01.81
[name]mark hilly [email]mark.hilly@hotmail.com [dob]02.11.80
[name]gill silly [email]gill.silly@hotmail.com [dob]03.12.79'''

group_matcher = re.compile(r'\[(.*?)\]([^\[]+)')

for line in data.split('\n'):
    o = dict(group_matcher.findall(line))
    print o['email']
</snippet></ROW><ROW><id>16491108</id><snippet>\[</snippet></ROW><ROW><id>16491108</id><snippet>[</snippet></ROW><ROW><id>16491108</id><snippet>(.*?)</snippet></ROW><ROW><id>16491108</id><snippet>\]</snippet></ROW><ROW><id>16491108</id><snippet>]</snippet></ROW><ROW><id>16491108</id><snippet>(</snippet></ROW><ROW><id>16491108</id><snippet>[^\[]</snippet></ROW><ROW><id>16491108</id><snippet>[</snippet></ROW><ROW><id>16491108</id><snippet>+</snippet></ROW><ROW><id>16491108</id><snippet>)</snippet></ROW><ROW><id>16491409</id><snippet>data.ix(whatever)</snippet></ROW><ROW><id>16491409</id><snippet>numpy.correlate</snippet></ROW><ROW><id>16491554</id><snippet>import itertools

# from itertools recipes in the docs
def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return itertools.izip_longest(fillvalue=fillvalue, *args)

def shouldbesimple(originalfile):
    with open(originalfile) as inputfile, open('finaloutput.txt', "w") as outputfile:
        client = next(inputfile).rstrip()
        count = int(next(inputfile).rstrip())
        groups = grouper(inputfile, 4)

        Header = "stuff at beginning of each record in output"
        Insertclient = "NEEDED {1} CHANGES"
        Line1 = "THINGS I {0} MUST ADD"
        Footer = "stuff at end of each record in output"
        thingstoadd = [Header, Line1, Insertclient, Footer]

        for _ in range(count):
            for fmt, line in zip(thingstoadd, next(groups)):
                outputfile.write(fmt.format(line.rstrip(), Client) + '\n')
</snippet></ROW><ROW><id>16491554</id><snippet>Client
2
Line1ofrecord1
Line2ofrecord1
Line3ofrecord1
Line4ofrecord1
Line1ofrecord2
Line2ofrecord2
Line3ofrecord2
Line4ofrecord2
End
</snippet></ROW><ROW><id>16491554</id><snippet>THINGS I Line2ofrecord1 MUST ADD
NEEDED Client CHANGES
stuff at end of each record in output
stuff at beginning of each record in output
THINGS I Line2ofrecord2 MUST ADD
NEEDED Client CHANGES
stuff at end of each record in output
</snippet></ROW><ROW><id>16491612</id><snippet>cursor.execute("SELECT MIN(id) FROM title WHERE provider=%s"
               "AND vendor_id LIKE '%s%%'", (provider, vendor_id_stem))
</snippet></ROW><ROW><id>16491677</id><snippet>def run(filename):
    for directoy,files,dirs in os.walk("C:\\"):
        if filename in files:
           return os.startfile(os.path.join(directory,filename))
</snippet></ROW><ROW><id>16491694</id><snippet>date = "08/02/2012 02:35p"
print date.split()[0]
</snippet></ROW><ROW><id>16491694</id><snippet>import time

date = "08/02/2012 02:35p"
t = time.strptime(date.replace("p","pm").replace("a","am"),"%m/%d/%y %I:%M%p")
my_desired_time_format = "%m/%d/%Y"
print time.strftime(my_desired_time_format,t)
</snippet></ROW><ROW><id>16491694</id><snippet>import re
with open('some.csv','r') as fin:
     data = re.sub("(\d{2}/\d{2}/\d{4}) \d{2}:\d{2}[ap]","\\1",fin.read())
with open('fixed.csv','w') as fout:
     fout.write(data)
</snippet></ROW><ROW><id>16491782</id><snippet>def get_files_to_add(some_directory):
  addq = QFileDialog()
  addq.setFileMode(QFileDialog.ExistingFiles)
  addq.setDirectory(some_directory)
  addq.setFilter(QDir.Files)
  addq.setAcceptMode(QFileDialog.AcceptOpen)
  new_files = list()
  if addq.exec_() == QDialog.Accepted:
    for horrible_name in addq.selectedFiles():
      ### CONVERSION HERE ###
      temp = str(QDir.toNativeSeparators(horrible_name)
      ### 
      # temp is now as the os module expects it to be
      # let's strip off the path and the extension
      no_path = temp.rsplit(os.sep,1)[1]
      no_ext = no_path.split(".")[0]
      #... do some magic with the file name that has had path stripped and extension stripped
      new_files.append(no_ext)
      pass
    pass
  else:
    #not loading  anything
    pass
  return new_files
</snippet></ROW><ROW><id>16491858</id><snippet>def recursiveSplit(chunk,boundary):
    if type(chunk) is types.StringType:
        #ar = re.split(r'(?P&lt;boundary&gt;)(?!--)',chunk)
        searchString = "--%s" % boundary
        print searchString
        ar = re.split(searchString,chunk)
        return ar
    if type(chunk) is types.ListType:
        i = 0
        while i &lt; len(chunk):
            chunk[i] = recursiveSplit(chunk[i],boundary)
            i += 1
        return obj
</snippet></ROW><ROW><id>16491862</id><snippet>print</snippet></ROW><ROW><id>16491862</id><snippet>…</snippet></ROW><ROW><id>16491862</id><snippet>'ascii'</snippet></ROW><ROW><id>16491862</id><snippet>utf-8</snippet></ROW><ROW><id>16491862</id><snippet>cp1252</snippet></ROW><ROW><id>16491862</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>16491862</id><snippet>encode</snippet></ROW><ROW><id>16491862</id><snippet>errors</snippet></ROW><ROW><id>16491862</id><snippet>print</snippet></ROW><ROW><id>16491862</id><snippet>print u.encode(sys.stdout.encoding, 'replace')
</snippet></ROW><ROW><id>16491862</id><snippet>sys.stdout</snippet></ROW><ROW><id>16491862</id><snippet>errors</snippet></ROW><ROW><id>16491862</id><snippet>sys.stdout</snippet></ROW><ROW><id>16491862</id><snippet>&gt;&gt;&gt; u = 'RT @afgansyah_reza: Lagi ngantri. Ada ibu2 &amp; temennya. "Ih dia mukanya mirip banget sama Afgan.", trus ngedeketin gw, "Tuh kan.. Mirip bang\xe2\x80\xa6'.decode('utf8')
&gt;&gt;&gt; print u
UnicodeEncodeError: 'charmap' codec can't encode characters in position 13-63: character maps to &lt;undefined&gt;
&gt;&gt;&gt; sys.stdout = codecs.getwriter(sys.stdout.encoding)(sys.stdout, errors='replace')
&gt;&gt;&gt; print u
RT @afgansyah_reza: Lagi ngantri. Ada ibu2 &amp; temennya. "Ih dia mukanya mirip banget sama Afgan.", trus ngedeketin gw, "Tuh kan.. Mirip bang?
</snippet></ROW><ROW><id>16491862</id><snippet>print</snippet></ROW><ROW><id>16491862</id><snippet>unicode</snippet></ROW><ROW><id>16491862</id><snippet>print</snippet></ROW><ROW><id>16491862</id><snippet>write</snippet></ROW><ROW><id>16491862</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>16491862</id><snippet>str</snippet></ROW><ROW><id>16491862</id><snippet>unicode</snippet></ROW><ROW><id>16491862</id><snippet>codecs</snippet></ROW><ROW><id>16491862</id><snippet>io</snippet></ROW><ROW><id>16491862</id><snippet>codecs</snippet></ROW><ROW><id>16491862</id><snippet>io</snippet></ROW><ROW><id>16492098</id><snippet>application</snippet></ROW><ROW><id>16492098</id><snippet>TypeError: sequence of byte string values expected, value of type int found
</snippet></ROW><ROW><id>16492098</id><snippet>return</snippet></ROW><ROW><id>16492098</id><snippet>return [repr(row)]
</snippet></ROW><ROW><id>16492196</id><snippet>oauth2</snippet></ROW><ROW><id>16492196</id><snippet>python-oauth2</snippet></ROW><ROW><id>16492196</id><snippet>oauth2.py</snippet></ROW><ROW><id>16492196</id><snippet>import oauth2</snippet></ROW><ROW><id>16492196</id><snippet>imp</snippet></ROW><ROW><id>16492196</id><snippet>oauth2.py</snippet></ROW><ROW><id>16492196</id><snippet>import oauth2</snippet></ROW><ROW><id>16492196</id><snippet>script_path = os.path.abspath(os.path.dirname(__file__))
f, path, desc = imp.find_module('oauth2', [script_path])
oauth2 = imp.load_module('oauth2', f, path, desc)
</snippet></ROW><ROW><id>16492196</id><snippet>sys.path</snippet></ROW><ROW><id>16492196</id><snippet>sys.path = ['.'] + sys.path
import oauth2
</snippet></ROW><ROW><id>16492196</id><snippet>python-oauth2</snippet></ROW><ROW><id>16492196</id><snippet>oauth2.py</snippet></ROW><ROW><id>16492196</id><snippet>google_oauth2.py</snippet></ROW><ROW><id>16492196</id><snippet>import google_oauth2</snippet></ROW><ROW><id>16492196</id><snippet>oauth2.py</snippet></ROW><ROW><id>16492196</id><snippet>import googletools.oauth2</snippet></ROW><ROW><id>16492242</id><snippet>print(Towers(n,fr,to,spare))</snippet></ROW><ROW><id>16492242</id><snippet>Towers(n,fr,to,spare)</snippet></ROW><ROW><id>16492242</id><snippet>Towers</snippet></ROW><ROW><id>16492251</id><snippet>for i in range(numrows):
    row =  cursor.fetchone()
</snippet></ROW><ROW><id>16492251</id><snippet>row</snippet></ROW><ROW><id>16492251</id><snippet>cursor.fetchone()</snippet></ROW><ROW><id>16492251</id><snippet>numrows</snippet></ROW><ROW><id>16492251</id><snippet>rows = cursor.fetchall()</snippet></ROW><ROW><id>16492333</id><snippet>dict.get</snippet></ROW><ROW><id>16492333</id><snippet>[]</snippet></ROW><ROW><id>16492333</id><snippet>entries['extensions'].get('telephone', '')
</snippet></ROW><ROW><id>16492333</id><snippet>entries['extensions'].get('telephone')
</snippet></ROW><ROW><id>16492333</id><snippet>get</snippet></ROW><ROW><id>16492333</id><snippet>None</snippet></ROW><ROW><id>16492333</id><snippet>KeyError</snippet></ROW><ROW><id>16492395</id><snippet>Thread.objects.raw('SELECT ... FROM myapp_thread WHERE ...')
</snippet></ROW><ROW><id>16492619</id><snippet>key = Key(bucket=bucket, name=my_key_id)
data = key.get_contents_as_string()
</snippet></ROW><ROW><id>16492634</id><snippet>"http:://localhost:27080/json"
</snippet></ROW><ROW><id>16492634</id><snippet>success: function(response) {
            alert(response);

            // Clear out the posted message...
            $("#nickname").val('');
        }
</snippet></ROW><ROW><id>16492634</id><snippet> $.ajax({
        type: "POST",
        url: "/json",
        data: postData,
        dataType: "json"            
    }).done(function(data){
        console.log(data);
    });
</snippet></ROW><ROW><id>16492634</id><snippet>import json ## we'll get to this below
import logging
class JSONInterface(webapp2.RequestHandler):
def post(self):
    name = self.request.get('name')
    logging.info(name) ## will print the value of 'name'
</snippet></ROW><ROW><id>16492634</id><snippet>import json
import logging
class JSONInterface(webapp2.RequestHandler):
    def post(self):
        callback = self.request.get('callback')
        logging.info(callback) # will print correctly
        self.response.out.write(json.dumps(callback)) 
</snippet></ROW><ROW><id>16492822</id><snippet>SyntaxWarning: name 'n1' is assigned to before global declaration
</snippet></ROW><ROW><id>16492822</id><snippet>n1</snippet></ROW><ROW><id>16492822</id><snippet>global n1</snippet></ROW><ROW><id>16492822</id><snippet>global n1</snippet></ROW><ROW><id>16492822</id><snippet>n1</snippet></ROW><ROW><id>16492822</id><snippet>def replacen1():
    global n1

    N1 = int(raw_input("Enter n1 replacement here"))
    n1 = N1
</snippet></ROW><ROW><id>16492822</id><snippet>n2</snippet></ROW><ROW><id>16492862</id><snippet>sizeof(thelist) ≅ sizeof(reference_to_a_python_object) * 6000000
</snippet></ROW><ROW><id>16492862</id><snippet>del thing1 
del thing2
</snippet></ROW><ROW><id>16492880</id><snippet>pcolormesh</snippet></ROW><ROW><id>16492880</id><snippet>imshow</snippet></ROW><ROW><id>16492880</id><snippet>import numpy as np
import matplotlib as ml
import matplotlib.pyplot as plt

H = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]])  # added some commas and array creation code

fig = plt.figure(figsize=(6, 3.2))

ax = fig.add_subplot(111)
ax.set_title('colorMap')
plt.imshow(H)
ax.set_aspect('equal')

cax = fig.add_axes([0.12, 0.1, 0.78, 0.8])
cax.get_xaxis().set_visible(False)
cax.get_yaxis().set_visible(False)
cax.patch.set_alpha(0)
cax.set_frame_on(False)
plt.colorbar(orientation='vertical')
plt.show()
</snippet></ROW><ROW><id>16492949</id><snippet>while 1</snippet></ROW><ROW><id>16492949</id><snippet>leaving = False
while not leaving:

    user_ip = raw_input("Do you want to continue sniffing???(y/n)")
    if user_ip.lower() == 'y':
        new_thread = Thread(target=sniffer, args=(ip,))
        new_thread.start()
        new_thread.join()
    elif user_ip.lower() == 'n':
        print "Leaving sniffer"
        leaving = True
return  
</snippet></ROW><ROW><id>16493336</id><snippet>&gt;&gt;&gt; a = rb"\x3cdiv\x3e"
&gt;&gt;&gt; a.decode('unicode_escape')
'&lt;div&gt;'
</snippet></ROW><ROW><id>16493494</id><snippet>y</snippet></ROW><ROW><id>16493494</id><snippet>import random, itertools

voks = frozenset('aeiouy')
abc = 'abcdefghijklmnopqrstuvwxyz'

def r_gen():
    last=None #both classes ok
    while 1:
        new = random.choice(abc)
        if (new in voks) != last:
            yield new
            last = (new in voks)

def name(): #Final product
    length = random.randrange(4, 8)
    return ''.join(itertools.islice(r_gen(), length))
</snippet></ROW><ROW><id>16493551</id><snippet>all()</snippet></ROW><ROW><id>16493551</id><snippet>36</snippet></ROW><ROW><id>16493551</id><snippet>63</snippet></ROW><ROW><id>16493551</id><snippet>seen = set()

def allEvenDigits(numb): # This is the issue one
    return all( int(n)%2 == 0 for n in str(numb))

for i in range(1, 1000): # its 1000 to save a few minutes
    revNumb = reversed(i);
    total = revNumb+i;

    if i not in seen and revNumb not in seen:
        if (allEvenDigits(total)):
            print(i, "+" , revNumb, "=",total);
            seen.add(i)
            seen.add(revNumb)
</snippet></ROW><ROW><id>16493551</id><snippet>(1, '+', 1, '=', 2)
(2, '+', 2, '=', 4)
(3, '+', 3, '=', 6)
(4, '+', 4, '=', 8)
(11, '+', 11, '=', 22)
(13, '+', 31, '=', 44)
(15, '+', 51, '=', 66)
(17, '+', 71, '=', 88)
(22, '+', 22, '=', 44)
(24, '+', 42, '=', 66)
(26, '+', 62, '=', 88)
(33, '+', 33, '=', 66)
(35, '+', 53, '=', 88)
(44, '+', 44, '=', 88)
...
</snippet></ROW><ROW><id>16493551</id><snippet>all</snippet></ROW><ROW><id>16493551</id><snippet>&gt;&gt;&gt; all?
Type:       builtin_function_or_method
String Form:&lt;built-in function all&gt;
Namespace:  Python builtin
Docstring:
all(iterable) -&gt; bool

Return True if bool(x) is True for all values x in the iterable.
If the iterable is empty, return True.
</snippet></ROW><ROW><id>16493736</id><snippet>y</snippet></ROW><ROW><id>16493736</id><snippet>x</snippet></ROW><ROW><id>16493736</id><snippet>y = re.sub(p, "z3Sigs", x)
</snippet></ROW><ROW><id>16493736</id><snippet>x</snippet></ROW><ROW><id>16493736</id><snippet>x = re.sub(p, "z3Sigs", x)
</snippet></ROW><ROW><id>16493736</id><snippet>y</snippet></ROW><ROW><id>16493736</id><snippet>x</snippet></ROW><ROW><id>16493736</id><snippet>y</snippet></ROW><ROW><id>16493736</id><snippet>y = x

for signs in SigOnDecision:
    y = re.sub(p, "z3Sigs", y)
</snippet></ROW><ROW><id>16493824</id><snippet>revoke</snippet></ROW><ROW><id>16493824</id><snippet>signal</snippet></ROW><ROW><id>16493824</id><snippet>signal</snippet></ROW><ROW><id>16493875</id><snippet>e</snippet></ROW><ROW><id>16494276</id><snippet>glob</snippet></ROW><ROW><id>16494276</id><snippet>import glob
import os
files = []
for x in os.listdir(path_to_top_folder):
    if os.path.isdir(x):
        for fil in glob.glob("{0}/*.txt".format(x)):
            files += [os.path.split(fil)[-1]]
print files  
</snippet></ROW><ROW><id>16494276</id><snippet>import glob
import os
files = [os.path.split(x)[-1] for x in  glob.glob(path to tip_folder/*/*.txt)]
</snippet></ROW><ROW><id>16494276</id><snippet>os.path.split</snippet></ROW><ROW><id>16494276</id><snippet>&gt;&gt;&gt; os.path.split?
Definition: os.path.split(p)
Docstring:
Split a pathname.  Returns tuple "(head, tail)" where "tail" is
everything after the final slash.  Either part may be empty.
</snippet></ROW><ROW><id>16494659</id><snippet>import subprocess
import wx

def main():
    p = subprocess.Popen(['ls', '-a'], stdout = subprocess.PIPE)
    text = p.stdout.readlines()
    text = "".join(text)

    wx.MessageBox("file names:\n%s" % text, "info")

if __name__ == '__main__':
    app = wx.PySimpleApp()
    main()
</snippet></ROW><ROW><id>16494749</id><snippet>sorted</snippet></ROW><ROW><id>16494749</id><snippet>from collections import Counter
counter = Counter()
import ast
keywords = []
with open("abc") as f:
    for line in f:
        #strip {} and split the line at ", " 
        line = line.strip("{}\n").split(", ")
        counter += Counter(x.strip('"') for x in line)

le = len(counter)    
for key,val in sorted(counter.items()):
    print "%s: %.1f%s" %(key, (val*1.0 / le)*100, '%')

print

for key,val in sorted(counter.items(), key = lambda x :(x[1],x[0]) ):
    print "%s: %.1f%s" %(key, (val*1.0 / le)*100, '%')
</snippet></ROW><ROW><id>16494749</id><snippet>'gold': 33.3%
'iron': 33.3%
'silver': 16.7%
'timber': 16.7%
'tungsten': 16.7%
'wood': 16.7%

'silver': 16.7%
'timber': 16.7%
'tungsten': 16.7%
'wood': 16.7%
'gold': 33.3%
'iron': 33.3%
</snippet></ROW><ROW><id>16494847</id><snippet>p3 = Popen(cmd, stdin=p2.stdout, stdout=PIPE)
...
print p3.communicate()[0]
</snippet></ROW><ROW><id>16494847</id><snippet>subprocess.call(cmd, stdin=p2.stdout)
</snippet></ROW><ROW><id>16494904</id><snippet>&gt;&gt;&gt; '42'.upper().isupper()
False
&gt;&gt;&gt; '-'.upper().isupper()
False
</snippet></ROW><ROW><id>16494904</id><snippet>&gt;&gt;&gt; '42a'.upper().isupper()
True
</snippet></ROW><ROW><id>16495025</id><snippet>string</snippet></ROW><ROW><id>16495025</id><snippet>'db.json'</snippet></ROW><ROW><id>16495025</id><snippet>'db.json'</snippet></ROW><ROW><id>16495025</id><snippet>parser = parse("db.json")                                                             
</snippet></ROW><ROW><id>16495025</id><snippet>buffer = f.read(buf_size)</snippet></ROW><ROW><id>16495025</id><snippet>parse</snippet></ROW><ROW><id>16495025</id><snippet>f = open('db.json', 'r')
parser = parse(f)
</snippet></ROW><ROW><id>16495025</id><snippet>f.close()
</snippet></ROW><ROW><id>16495025</id><snippet>with</snippet></ROW><ROW><id>16495025</id><snippet>with open('db.json') as f:
    parser = parse(f)
    # use your parser and after leaving this block indent you're done
</snippet></ROW><ROW><id>16495371</id><snippet>#!/usr/bin/env python

import sys

mypath = "D:\\inetpub\\wwwroot"

if mypath:
        try:
                print "Path: %s" % mypath
                if mypath.find("/") &gt;= 0:
                        print "OS: Linux/Unix"
                elif mypath.find(":"):
                        print "OS: Windows"
                else:
                        print "OS: Unknown"
        except:
                print "Error"
else:
        print "[?] OS detection failure."
</snippet></ROW><ROW><id>16495371</id><snippet>\</snippet></ROW><ROW><id>16495371</id><snippet>\n´,</snippet></ROW><ROW><id>16495371</id><snippet>mypath = r'D:\inetpub\wwwroot'
</snippet></ROW><ROW><id>16495371</id><snippet>from os.path import abspath
print abspath('D:/inetpub/')
</snippet></ROW><ROW><id>16495371</id><snippet>import os
if os.name == 'nt':
    print 'Windows'
else:
    print 'Linux/Unix'
</snippet></ROW><ROW><id>16495396</id><snippet>#!/usr/bin/env python
from random import randrange
import datetime

now = datetime.datetime.now()

#generate random temperature
temperature = randrange(50, 100)

#database structure
structure = "{'last_hour': [], 'last_3_hours': [], 'last_12_hours': [], " \
            "'last_24_hours': [], 'last_7_days': []}"

#file for the database
database = 'temperature_database.txt' #use absolute path when running from cron

#check database file exists, if not write the database structure
try:
    with open(database): pass
except IOError:
    with open(database, 'w') as handler:
        handler.write(structure)

#read the contents of the database
with open(database, 'r') as handler:
    db_contents = eval(handler.read())

#first save every minute
db_contents['last_hour'].append(temperature)
if len(db_contents['last_hour']) &gt; 60:
    db_contents['last_hour'] = db_contents['last_hour'][-60:] #get the last 60 elements

if now.minute in [10, 0]: #every ten minutes
    db_contents['last_3_hours'].append(temperature)
    if len(db_contents['last_3_hours']) &gt; 18:
        db_contents['last_3_hours'] = db_contents['last_3_hours'][-18:]

    db_contents['last_12_hours'].append(temperature)
    if len(db_contents['last_12_hours']) &gt; 72:
        db_contents['last_12_hours'] = db_contents['last_12_hours'][-72:]

    db_contents['last_24_hours'].append(temperature)
    if len(db_contents['last_24_hours']) &gt; 144:
        db_contents['last_24_hours'] = db_contents['last_24_hours'][-144:]

if now.minute == 1: #every hour
    db_contents['last_7_days'].append(temperature)
    if len(db_contents['last_7_days']) &gt; 168:
        db_contents['last_7_days'] = db_contents['last_7_days'][-168:]

#save the contents to the database
with open(database, 'w') as handler:
    handler.write(str(db_contents))
</snippet></ROW><ROW><id>16495396</id><snippet>{'last_hour': [62, 99, 83, 71], 'last_12_hours': [], 'last_24_hours': [], 'last_3_hours': [], 'last_7_days': []}
</snippet></ROW><ROW><id>16495415</id><snippet>)</snippet></ROW><ROW><id>16495415</id><snippet>retstring = retstring + (" "*(max - len(string)+1,))
                                                        ^ 
                                                        | 
</snippet></ROW><ROW><id>16495415</id><snippet>&gt;&gt;&gt; 'retstring = retstring + (" "*(max - len(string)+1,)'.count("(")
3
&gt;&gt;&gt; 'retstring = retstring + (" "*(max - len(string)+1,)'.count(")")
2
</snippet></ROW><ROW><id>16495529</id><snippet>import numpy as np

y = np.array([2,1,5,2])          # y axis
x = np.array([1,2,3,4])          # x axis
m = np.ma.masked_where(y&gt;2, y)   # filter out values larger than 5
print list(m)
print np.ma.compressed(m)

# mask x the same way
m_ = np.ma.masked_where(y&gt;2, x)   # filter out values larger than 5
# print here the list
print list(m_) 
print np.ma.compressed(m_)
</snippet></ROW><ROW><id>16495529</id><snippet>new_x = x[~m.mask].copy()</snippet></ROW><ROW><id>16495529</id><snippet>&gt;&gt;&gt; new_x
array([1, 2, 4])
</snippet></ROW><ROW><id>16495611</id><snippet>def getatt(self, number):
    return getattr(self, 'att%d' % number)
</snippet></ROW><ROW><id>16495611</id><snippet>def getatt(self, number):
    return getattr(self, 'att{}'.format(number))
</snippet></ROW><ROW><id>16495617</id><snippet>csvreader = csv.reader(textfile, delimiter='\t')
</snippet></ROW><ROW><id>16495617</id><snippet>LOAD DATA INFILE 'externaldatabase.txt'
INTO TABLE database_name.externaldatabase
FIELDS TERMINATED BY '\t';
</snippet></ROW><ROW><id>16495742</id><snippet>void World::greet(){
    printf("hello");
}
</snippet></ROW><ROW><id>16495765</id><snippet>import HTMLParser
h = HTMLParser.HTMLParser()
print h.unescape('£682m')
£682m
</snippet></ROW><ROW><id>16495765</id><snippet>import html.parser
h = html.parser.HTMLParser()
print(h.unescape('£682m'))
£682m
</snippet></ROW><ROW><id>16495765</id><snippet>print 'å'.decode('iso-8859-1')
u'\x86'
</snippet></ROW><ROW><id>16495765</id><snippet>å</snippet></ROW><ROW><id>16495875</id><snippet>import Tkinter as tk

root = tk.Tk()
root.geometry("500x500")
root.title("Drawing lines to a canvas")

cv = tk.Canvas(root,height="500",width="500",bg="white")
cv.pack()

def linemaker(screen_points):
    """ Function to take list of points and make them into lines
    """
    is_first = True
    # Set up some variables to hold x,y coods
    x0 = y0 = 0
    # Grab each pair of points from the input list
    for (x,y) in screen_points:
        # If its the first point in a set, set x0,y0 to the values
        if is_first:
            x0 = x
            y0 = y
            is_first = False
        else:
            # If its not the fist point yeild previous pair and current pair
            yield x0,y0,x,y
            # Set current x,y to start coords of next line
            x0,y0 = x,y

list_of_screen_coods = [(50,250),(150,100),(250,250),(350,100)]

for (x0,y0,x1,y1) in linemaker(list_of_screen_coods):
    cv.create_line(x0,y0,x1,y1, width=1,fill="red")

root.mainloop()
</snippet></ROW><ROW><id>16495934</id><snippet>img = np.hstack((I1, I2))</snippet></ROW><ROW><id>16495934</id><snippet>img = np.array(np.hstack((I1, I2)))</snippet></ROW><ROW><id>16496159</id><snippet>crypto</snippet></ROW><ROW><id>16496159</id><snippet>crypt (3)</snippet></ROW><ROW><id>16496159</id><snippet>crypto</snippet></ROW><ROW><id>16496260</id><snippet>&gt;&gt;&gt; import optparse
&gt;&gt;&gt; parser = optparse.OptionParser()
&gt;&gt;&gt; (options, args) = parser.parse_args()
&gt;&gt;&gt; type(options)
&lt;class 'optparse.Values'&gt;
&gt;&gt;&gt; help(optparse.Values)
Help on class Values in module optparse:

class Values(builtins.object)
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |  
 |  __init__(self, defaults=None)
 |  
 |  __repr__ = _repr(self)
 |  
 |  __str__(self)
 |  
 |  ensure_value(self, attr, value)
 |  
 |  read_file(self, filename, mode='careful')
 |  
 |  read_module(self, modname, mode='careful')
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None
</snippet></ROW><ROW><id>16496436</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
###patch start###
from mpl_toolkits.mplot3d.axis3d import Axis
if not hasattr(Axis, "_get_coord_info_old"):
    def _get_coord_info_new(self, renderer):
        mins, maxs, centers, deltas, tc, highs = self._get_coord_info_old(renderer)
        mins += deltas / 4
        maxs -= deltas / 4
        return mins, maxs, centers, deltas, tc, highs
    Axis._get_coord_info_old = Axis._get_coord_info  
    Axis._get_coord_info = _get_coord_info_new
###patch end###

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
for c, z in zip(['r', 'g', 'b', 'y'], [30, 20, 10, 0]):
    xs = np.arange(20)
    ys = np.random.rand(20)

    # You can provide either a single color or an array. To demonstrate this,
    # the first bar of each set will be colored cyan.
    cs = [c] * len(xs)
    cs[0] = 'c'
    ax.bar(xs, ys, zs=z, zdir='y', color=cs, alpha=0.8)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()
</snippet></ROW><ROW><id>16496436</id><snippet>for axis in (ax.xaxis, ax.yaxis, ax.zaxis):
    axis._axinfo['grid']['color']  = 0.7, 1.0, 0.7, 1.0
</snippet></ROW><ROW><id>16496436</id><snippet>ax.set_ylim3d(-1, 31)
ax.set_xlim3d(-1, 21)
</snippet></ROW><ROW><id>16496572</id><snippet>raw</snippet></ROW><ROW><id>16496572</id><snippet>{% raw %}
    &lt;div class="title"&gt;
         Hello {{ user }}
    &lt;/div&gt;
    &lt;div class="content"&gt;
         Some content
        &lt;table&gt;
          &lt;tr&gt;
            &lt;td&gt;
              {{ data }}
           &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/div&gt;
{% endraw %}
</snippet></ROW><ROW><id>16496573</id><snippet>x and y</snippet></ROW><ROW><id>16496573</id><snippet>x</snippet></ROW><ROW><id>16496573</id><snippet>x</snippet></ROW><ROW><id>16496573</id><snippet>y</snippet></ROW><ROW><id>16496573</id><snippet>x or y</snippet></ROW><ROW><id>16496573</id><snippet>x</snippet></ROW><ROW><id>16496573</id><snippet>x</snippet></ROW><ROW><id>16496573</id><snippet>y</snippet></ROW><ROW><id>16496573</id><snippet>0</snippet></ROW><ROW><id>16496573</id><snippet>False</snippet></ROW><ROW><id>16496573</id><snippet>None</snippet></ROW><ROW><id>16496573</id><snippet>0 and False</snippet></ROW><ROW><id>16496573</id><snippet>0</snippet></ROW><ROW><id>16496573</id><snippet>False</snippet></ROW><ROW><id>16496573</id><snippet>True and 0</snippet></ROW><ROW><id>16496573</id><snippet>True</snippet></ROW><ROW><id>16496573</id><snippet>0</snippet></ROW><ROW><id>16496573</id><snippet>if</snippet></ROW><ROW><id>16496573</id><snippet>while</snippet></ROW><ROW><id>16496573</id><snippet>0</snippet></ROW><ROW><id>16496573</id><snippet>foo = bar or 'default'
</snippet></ROW><ROW><id>16496573</id><snippet>bool()</snippet></ROW><ROW><id>16496573</id><snippet>&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(0.0)
False
&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool(True and 0)
False
&gt;&gt;&gt; bool(1)
True
</snippet></ROW><ROW><id>16496573</id><snippet>.__nonzero__()</snippet></ROW><ROW><id>16496573</id><snippet>.__len__()</snippet></ROW><ROW><id>16496573</id><snippet>True</snippet></ROW><ROW><id>16496573</id><snippet>True</snippet></ROW><ROW><id>16496631</id><snippet>for button in buttonslist: 
    button.connect("clicked",button_function)
</snippet></ROW><ROW><id>16496670</id><snippet>import re
pattern = r"""
          \b(?P&lt;first_part&gt;\w*(?P&lt;splitter&gt;\w))   # matches starting at a word boundary
          (?P&lt;last_part&gt;(?P=splitter)er\b)        # matches the last letter of the first group
                                                  # plus 'er' if followed by a word boundary
          """
matcher = re.compile(pattern, re.X)
print matcher.search('letter').groupdict()
# out: {'first_part': 'let', 'last_part': 'ter', 'splitter': 't'}
</snippet></ROW><ROW><id>16496675</id><snippet>#-*- coding: utf-8 -*-
from Tkinter import *
master = Tk()
def callback():
    execfile("script.py")
b = Button(master, text="OK", command=callback)
b.pack()
mainloop()
</snippet></ROW><ROW><id>16496746</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.getrandbits(10)
688L
</snippet></ROW><ROW><id>16497009</id><snippet>do_that()</snippet></ROW><ROW><id>16497009</id><snippet>self.B = B.do_that()</snippet></ROW><ROW><id>16497009</id><snippet>B</snippet></ROW><ROW><id>16497009</id><snippet>mything = B(your_parameters)
mything.do_that()
</snippet></ROW><ROW><id>16497009</id><snippet>do_that()</snippet></ROW><ROW><id>16497009</id><snippet>def do_that(self):  
    return (1, 2)
</snippet></ROW><ROW><id>16497009</id><snippet>class A(B): # Inherits Class B
    def __init__(self,master):
        """Some work here""" 
    def do_this(self):
        print self.do_that()[1] # This is assuming the do_that() function returns that tuple
</snippet></ROW><ROW><id>16497009</id><snippet>&gt;&gt;&gt; class B:
...     def __init__(self, master):
...         """Some work here"""
...     def do_that(self):
...         return (1,2)
... 
&gt;&gt;&gt; class A(B):
...     def __init__(self, master):
...         """Some work here"""
...     def do_this(self):
...         print self.do_that()[1] 
...
&gt;&gt;&gt; mything = A('placeholder')
&gt;&gt;&gt; mything.do_this()
2
</snippet></ROW><ROW><id>16497052</id><snippet>if (article.stillAvailable):
</snippet></ROW><ROW><id>16497076</id><snippet>cur.executemany(query, [t[:1] for t in listOfTuples])
</snippet></ROW><ROW><id>16497076</id><snippet>&gt;&gt;&gt; listOfTuples = [('a', 'b'), ('c', 'd')]
&gt;&gt;&gt; [t[:1] for t in listOfTuples]
[('a',), ('c',)]
</snippet></ROW><ROW><id>16497076</id><snippet>cur.executemany(query, (t[:1] for t in listOfTuples))
</snippet></ROW><ROW><id>16497139</id><snippet>uuid.uuid1()</snippet></ROW><ROW><id>16497139</id><snippet>uuid.UUID</snippet></ROW><ROW><id>16497139</id><snippet>re.sub</snippet></ROW><ROW><id>16497139</id><snippet>uuid1()</snippet></ROW><ROW><id>16497139</id><snippet>str(uuid1())</snippet></ROW><ROW><id>16497139</id><snippet>re.sub(r'guid="([0-9a-f-]{36})"', str(uuid1()), contents)
</snippet></ROW><ROW><id>16497301</id><snippet>import email

filename = 'xxx.eml'

with open(filename, 'rb') as f:
    msg = email.message_from_file(f)

    # count number of attachments in an email
    #
    totalattachments = 0
    firsttextattachmentseen = False
    lastseenboundary = ''
    # .walk steps through all the parts of an email including boundaries and attachments
    alternativetextplainfound = False
    alternativetexthtmlfound = False
    for part in msg.walk():
        if part.is_multipart():
            # this is a boundary, so we record what the last seen boundary was and continue to next part
            lastseenboundary = part.get_content_type()
            continue
        if lastseenboundary == 'multipart/alternative':
            #for HTML emails, the multipart/alternative part contains the HTML and its alternative text representation
            #BUT it seems that plenty of messages add file attachments after the txt and html, so we'll have to account for that
            if part.get_content_type() == 'text/plain' and alternativetextplainfound == False:
                alternativetextplainfound = True
                continue
            if part.get_content_type() == 'text/html' and alternativetexthtmlfound == False:
                alternativetexthtmlfound = True
                continue
        if (part.get_content_type() == 'text/plain') and (lastseenboundary != 'multipart/alternative'):
            #if this is a plain text email, then the first txt attachment is the message body so we do not 
            #count it as an attachment
            if firsttextattachmentseen == False:
                firsttextattachmentseen = True
                continue
            else:
                totalattachments += 1
                continue
        # any other part we encounter we shall assume is a user added attachment
        totalattachments += 1

    print(totalattachments, ': ', filename)
</snippet></ROW><ROW><id>16497354</id><snippet>''</snippet></ROW><ROW><id>16497725</id><snippet>register.inclusion_tag</snippet></ROW><ROW><id>16497725</id><snippet>{% search %}</snippet></ROW><ROW><id>16497725</id><snippet>def search(request):
    query = request.GET.get('q')
    if query:
        # There was a query entered.
        results = SomeModel.objects.filter(somefield=query)
    else:
        # If no query was entered, simply return all objects
        results = SomeModel.objects.all()
    return render(request, 'search_result.html', {'results': results})
</snippet></ROW><ROW><id>16497725</id><snippet>urls.py</snippet></ROW><ROW><id>16497725</id><snippet>url(r'^search/$', 'app.views.search','search'),
</snippet></ROW><ROW><id>16497725</id><snippet>&lt;form method="GET" action="{% url 'search' %}"&gt;
      &lt;input type="text" name="q" /&gt;
      &lt;input type="submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>16497871</id><snippet>global variablename</snippet></ROW><ROW><id>16497871</id><snippet>global newtext</snippet></ROW><ROW><id>16497871</id><snippet>newtext</snippet></ROW><ROW><id>16497871</id><snippet>ord(i.upper()) - ord('A')</snippet></ROW><ROW><id>16498402</id><snippet>from ... import *</snippet></ROW><ROW><id>16498402</id><snippet>models2</snippet></ROW><ROW><id>16498402</id><snippet>LogBase</snippet></ROW><ROW><id>16498402</id><snippet>models.py</snippet></ROW><ROW><id>16498402</id><snippet>Base</snippet></ROW><ROW><id>16498402</id><snippet>import models2</snippet></ROW><ROW><id>16498402</id><snippet>from models2 import *</snippet></ROW><ROW><id>16498402</id><snippet>models2</snippet></ROW><ROW><id>16498446</id><snippet>php -S localhost:8008
</snippet></ROW><ROW><id>16498769</id><snippet>set_1 |= dic_1.viewkeys() &amp; list_1
</snippet></ROW><ROW><id>16498769</id><snippet>dic_1.viewkeys()</snippet></ROW><ROW><id>16498769</id><snippet>&amp;</snippet></ROW><ROW><id>16498769</id><snippet>|=</snippet></ROW><ROW><id>16498769</id><snippet>set.update()</snippet></ROW><ROW><id>16498769</id><snippet>.add()</snippet></ROW><ROW><id>16498769</id><snippet>&gt;&gt;&gt; list_1 = "if looks kill then i'm murdering".split()
&gt;&gt;&gt; dic_1 = {"kill": -2, "murdering": -3, "monty": 5}
&gt;&gt;&gt; set_1 = set()
&gt;&gt;&gt; set_1 |= dic_1.viewkeys() &amp; list_1
&gt;&gt;&gt; set_1
set(['murdering', 'kill'])
&gt;&gt;&gt; set_1 |= dic_1.viewkeys() &amp; "monty python's flying circus".split()
&gt;&gt;&gt; set_1
set(['murdering', 'kill', 'monty'])
</snippet></ROW><ROW><id>16498955</id><snippet>user</snippet></ROW><ROW><id>16498955</id><snippet>kind</snippet></ROW><ROW><id>16498955</id><snippet>from django.db.models import Count

events_this_month = Event.objects.values('created_by', 'kind') \
                         .filter(created_at__year=2013, created_at__month=5) \
                         .annotate(cc=Count('kind'))
</snippet></ROW><ROW><id>16498972</id><snippet>.fragment_fromstring()</snippet></ROW><ROW><id>16498972</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>16498972</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>16498972</id><snippet>.fromstring()</snippet></ROW><ROW><id>16498972</id><snippet>.fragment_fromstring()</snippet></ROW><ROW><id>16498972</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>16498972</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>16498972</id><snippet>.fragment_fromstring()</snippet></ROW><ROW><id>16498972</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>16498972</id><snippet>&gt;&gt;&gt; lxml.html.fragment_fromstring('&lt;body&gt;&lt;h1&gt;a&lt;/h1&gt;&lt;/body&gt;', create_parent='body')
&lt;Element body at 0x10d06fbf0&gt;
</snippet></ROW><ROW><id>16498972</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>16498972</id><snippet>.document_fromstring()</snippet></ROW><ROW><id>16498972</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>16498972</id><snippet>&gt;&gt;&gt; lxml.html.document_fromstring('&lt;body&gt;&lt;h1&gt;a&lt;/h1&gt;&lt;/body&gt;')[0]
&lt;Element body at 0x10d06fcb0&gt;
</snippet></ROW><ROW><id>16498972</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>16498972</id><snippet>&gt;&gt;&gt; lxml.html.document_fromstring('&lt;body class="foo"&gt;&lt;h1&gt;a&lt;/h1&gt;&lt;/body&gt;')[0].attrib
{'class': 'foo'}
</snippet></ROW><ROW><id>16498972</id><snippet>.document_fromstring()</snippet></ROW><ROW><id>16498972</id><snippet>&gt;&gt;&gt; body = lxml.html.document_fromstring('&lt;body&gt;&lt;h1&gt;title&lt;/h1&gt;&lt;img src=""&gt;&lt;/body&gt;')[0]
&gt;&gt;&gt; lxml.html.tostring(body)
'&lt;body&gt;&lt;h1&gt;title&lt;/h1&gt;&lt;img src=""&gt;&lt;/body&gt;'
</snippet></ROW><ROW><id>16498972</id><snippet>lxml.html.fromstring()</snippet></ROW><ROW><id>16498972</id><snippet>htmltest = lxml.html._looks_like_full_html_bytes if isinstance(inputtext, str) else lxml.html._looks_like_full_html_unicode
if htmltest(inputtext):
    tree = lxml.html.fromstring(inputtext)
else:
    tree = lxml.html.document_fromstring(inputtext)[0]
</snippet></ROW><ROW><id>16499067</id><snippet>requests.post(url, data=[('name', 'test'), ('language', 'eng'), ('type', 'stream')], files={'chaos_handdrums.wav': &lt;file-like-object&gt;})</snippet></ROW><ROW><id>16499106</id><snippet>std::pair</snippet></ROW><ROW><id>16499106</id><snippet>class_&lt;std::pair&lt;int, int&gt; &gt;("IntPair")
    .def_readwrite("first", &amp;std::pair&lt;int, int&gt;::first);
    .def_readwrite("second", &amp;std::pair&lt;int, int&gt;::second);
</snippet></ROW><ROW><id>16499288</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>16499288</id><snippet>&lt;/html&gt;</snippet></ROW><ROW><id>16499288</id><snippet>base.html</snippet></ROW><ROW><id>16499288</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;!-- Some stuff here which should be included in all templates for example js or css --&gt;
        {% block extra_css %}
            &lt;!-- to included app-template dependent css --&gt;
        {% endblock extra_css %}

        {% block extra_js %}
            &lt;!-- to included app-template dependent js --&gt;
        {% endblock extra_js %}

        {% block extra_head %}
            &lt;!-- for anything else inside head --&gt;
        {% endblock extra_head %}

    &lt;/head&gt;
    &lt;body&gt;
        {% block menu %}
            &lt;!-- Default menu here --&gt;
            {% block extra_menu %}
                &lt;!-- extend menu based on template --&gt;
            {% endblock extra_menu %}
        {% endblock menu %}

        {% block content %}
            &lt;div&gt;This is good&lt;/div&gt;
        {% endblock content %}

        {% include "footer.html" %}

        {% block bottom_js %}
            &lt;!-- if you want to have manual js scripts at bottom --&gt;
        {% endblock bottom_js %}
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>16499288</id><snippet>base.html</snippet></ROW><ROW><id>16499288</id><snippet>base.html</snippet></ROW><ROW><id>16499288</id><snippet>content</snippet></ROW><ROW><id>16499288</id><snippet>{% extends "base.html" %}

{% block content %}
    &lt;div&gt;This is really good&lt;/div&gt;
{% endblock content %}
</snippet></ROW><ROW><id>16499288</id><snippet>this is really good</snippet></ROW><ROW><id>16499288</id><snippet>this is good</snippet></ROW><ROW><id>16499288</id><snippet>base.html</snippet></ROW><ROW><id>16499288</id><snippet>{% extends "base.html" %}

{% block content %}
    {{ block.super }}
    &lt;div&gt;This is really good&lt;/div&gt;
{% endblock content %}
</snippet></ROW><ROW><id>16499288</id><snippet>this is good</snippet></ROW><ROW><id>16499288</id><snippet>this is really good</snippet></ROW><ROW><id>16499713</id><snippet>    valid_input = ('EUR', 'GBP', 'USD', 'JPY')

    while True:
        # Obtain user data

        # Make sure all its in caps
        currency = currency.upper()
        exchange = exchange.upper()

        if currency in valid_input and exchange in valid_input:
            break 

         print ("Error Invalid input, try again...")

    # Proccess data...
</snippet></ROW><ROW><id>16499762</id><snippet>sys.exit()</snippet></ROW><ROW><id>16499762</id><snippet>argparse</snippet></ROW><ROW><id>16499762</id><snippet>def exit(status=0, message=None):
    if message:
        _print_message(message, sys.stderr)
    sys.exit(status)
</snippet></ROW><ROW><id>16499762</id><snippet>_print_message()</snippet></ROW><ROW><id>16499762</id><snippet>sys.stderr</snippet></ROW><ROW><id>16499762</id><snippet>print</snippet></ROW><ROW><id>16499844</id><snippet>mylist = [function1, function2]
</snippet></ROW><ROW><id>16499844</id><snippet>.append()</snippet></ROW><ROW><id>16499844</id><snippet>mylist.append(function1)
mylist.append(function2)
</snippet></ROW><ROW><id>16499844</id><snippet>globals()</snippet></ROW><ROW><id>16499844</id><snippet>inspect.isfunction()</snippet></ROW><ROW><id>16499844</id><snippet>import inspect
mylist = [v for v globals().itervalues() if inspect.isfunction(v) and v.__module__ == __name__]
</snippet></ROW><ROW><id>16499844</id><snippet>v.__module__ == __name__</snippet></ROW><ROW><id>16499844</id><snippet>mylist.append(functionname)</snippet></ROW><ROW><id>16499844</id><snippet>mylist = []
def listed(func):
    mylist.append(func)
    return func

@listed
def function1():
    pass

@listed
def function2():
    pass
</snippet></ROW><ROW><id>16499844</id><snippet>@listed</snippet></ROW><ROW><id>16499844</id><snippet>mylist</snippet></ROW><ROW><id>16499870</id><snippet> math.log1p(x)
</snippet></ROW><ROW><id>16499870</id><snippet>numpy.logaddexp(logA, logB)
</snippet></ROW><ROW><id>16499880</id><snippet>for</snippet></ROW><ROW><id>16499880</id><snippet>else</snippet></ROW><ROW><id>16499880</id><snippet>for thing in things:
    ...
    if (thing == 'something'):
        break
else:
    ... # Do something
</snippet></ROW><ROW><id>16500098</id><snippet>def happyPrime(n):
     **more blah blah blah**
            if n == 1:
                print ("Number is happy%s!"  %  prime(n))
                break
            if n in visited:
                print ("Number is happy%s!"  %  prime(n))
            visited.add(n)
</snippet></ROW><ROW><id>16500098</id><snippet>prime(n)</snippet></ROW><ROW><id>16500098</id><snippet>%s</snippet></ROW><ROW><id>16500098</id><snippet>&gt;&gt;&gt; def foo(n):
        if n == True:
            return "yay"
        else:
            return "boo"

&gt;&gt;&gt; def happyPrime(n):
        print "bar " + foo(n)

&gt;&gt;&gt; happyPrime(True)
bar yay

&gt;&gt;&gt; happyPrime(False)
bar boo
</snippet></ROW><ROW><id>16500158</id><snippet>*</snippet></ROW><ROW><id>16500158</id><snippet>*</snippet></ROW><ROW><id>16500158</id><snippet>foo(*li)
</snippet></ROW><ROW><id>16500158</id><snippet>&gt;&gt;&gt; def foo(*args): print (args)
&gt;&gt;&gt; foo(*range(10))
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
</snippet></ROW><ROW><id>16500282</id><snippet>&gt;&gt;&gt; from datetime import date, timedelta
&gt;&gt;&gt; from pprint import pprint

&gt;&gt;&gt; def next_month(x):
        'Advance the first of the month, wrapping the year if necessary'
        if x.month &lt; 12:
            return x.replace(month=x.month+1, day=1)
        return x.replace(year=x.year+1, month=1)

&gt;&gt;&gt; def getMonthRanges(startDate, endDate):
        result = []
        first = startDate
        while first &lt; endDate:
            nm = next_month(first)
            last = min(endDate, nm - timedelta(days=1))
            result.append([str(first), str(last)])
            first = nm
        return result

&gt;&gt;&gt; pprint(getMonthRanges(date(2011, 9, 11), date(2013, 4, 24)))
[['2011-09-11', '2011-09-30'],
 ['2011-10-01', '2011-10-31'],
 ['2011-11-01', '2011-11-30'],
 ['2011-12-01', '2011-12-31'],
 ['2012-01-01', '2012-01-31'],
 ['2012-02-01', '2012-02-29'],
 ['2012-03-01', '2012-03-31'],
 ['2012-04-01', '2012-04-30'],
 ['2012-05-01', '2012-05-31'],
 ['2012-06-01', '2012-06-30'],
 ['2012-07-01', '2012-07-31'],
 ['2012-08-01', '2012-08-31'],
 ['2012-09-01', '2012-09-30'],
 ['2012-10-01', '2012-10-31'],
 ['2012-11-01', '2012-11-30'],
 ['2012-12-01', '2012-12-31'],
 ['2013-01-01', '2013-01-31'],
 ['2013-02-01', '2013-02-28'],
 ['2013-03-01', '2013-03-31'],
 ['2013-04-01', '2013-04-24']]
</snippet></ROW><ROW><id>16500314</id><snippet>import os</snippet></ROW><ROW><id>16500314</id><snippet>__init__.py</snippet></ROW><ROW><id>16500314</id><snippet>os</snippet></ROW><ROW><id>16500314</id><snippet>os</snippet></ROW><ROW><id>16500314</id><snippet>NameError</snippet></ROW><ROW><id>16500314</id><snippet>os</snippet></ROW><ROW><id>16500535</id><snippet>browser</snippet></ROW><ROW><id>16500535</id><snippet>Firefox</snippet></ROW><ROW><id>16500535</id><snippet>class Test(unittest.TestCase):
    def setUp(self):
        self.browser = Browser()
    def test_Can_Login(self):
        self.browser.GoTo("http://www.google.co.in")
</snippet></ROW><ROW><id>16500535</id><snippet>Firefox</snippet></ROW><ROW><id>16500535</id><snippet>class Browser(webdriver.Firefox):
    def GoTo(self, url):
        self.get(url)
</snippet></ROW><ROW><id>16500609</id><snippet>x = np.array([[1,2], [3,4]])
y = np.array([[5,6], [7,8]])

x[:,:,np.newaxis] * y[:,np.newaxis,:]

array([[[ 5,  6],
        [10, 12]],

       [[21, 24],
        [28, 32]]])
</snippet></ROW><ROW><id>16500609</id><snippet>np.outer</snippet></ROW><ROW><id>16500609</id><snippet>return a.ravel()[:,newaxis]*b.ravel()[newaxis,:]
</snippet></ROW><ROW><id>16500609</id><snippet>[np.outer(x[i],y[i]) for i in xrange(x.shape[0])]
</snippet></ROW><ROW><id>16500609</id><snippet>[np.outer(xx,yy) for xx,yy in izip(x,y)]
</snippet></ROW><ROW><id>16500683</id><snippet>self</snippet></ROW><ROW><id>16500683</id><snippet>def check_angles(self):
</snippet></ROW><ROW><id>16500683</id><snippet>angle1</snippet></ROW><ROW><id>16500683</id><snippet>angle2</snippet></ROW><ROW><id>16500683</id><snippet>angle3</snippet></ROW><ROW><id>16500683</id><snippet>self.</snippet></ROW><ROW><id>16500683</id><snippet>self.angle1 + self.angle2 + self.angle3 == 180</snippet></ROW><ROW><id>16500701</id><snippet>by</snippet></ROW><ROW><id>16500701</id><snippet>boxplot</snippet></ROW><ROW><id>16500701</id><snippet>subplots</snippet></ROW><ROW><id>16500701</id><snippet>ax</snippet></ROW><ROW><id>16500701</id><snippet>by</snippet></ROW><ROW><id>16500701</id><snippet>df.boxplot(['col1', 'col2'])</snippet></ROW><ROW><id>16500701</id><snippet>df.boxplot('col1', 'grouper1')</snippet></ROW><ROW><id>16500701</id><snippet>df.pivot('val', 'day', 'val').boxplot(ax=ax)
</snippet></ROW><ROW><id>16500701</id><snippet>val</snippet></ROW><ROW><id>16500701</id><snippet>day</snippet></ROW><ROW><id>16500755</id><snippet>In [1]: m = 'college'

In [2]: s = 'col'

In [3]: if any(m[i:i+len(s)] == s for i in range(len(m)-len(s)+1)):
   ...:     print 'Present'
   ...: else:
   ...:     print 'Not present'
   ...:     
Present
</snippet></ROW><ROW><id>16500755</id><snippet>any</snippet></ROW><ROW><id>16500755</id><snippet>m</snippet></ROW><ROW><id>16500755</id><snippet>len(s)</snippet></ROW><ROW><id>16500755</id><snippet>s</snippet></ROW><ROW><id>16500755</id><snippet>True</snippet></ROW><ROW><id>16500755</id><snippet>break</snippet></ROW><ROW><id>16500755</id><snippet>any</snippet></ROW><ROW><id>16500755</id><snippet>In [4]: [m[i:i+len(s)] for i in range(len(m)-len(s)+1)]
Out[4]: ['col', 'oll', 'lle', 'leg', 'ege']
</snippet></ROW><ROW><id>16500810</id><snippet>int</snippet></ROW><ROW><id>16500810</id><snippet>&gt;&gt;&gt; int('0xd3b2178c', 16)
3551664012
</snippet></ROW><ROW><id>16501122</id><snippet>Gtk.Dialog</snippet></ROW><ROW><id>16501122</id><snippet>gtk_dialog_set_default_response ()</snippet></ROW><ROW><id>16501395</id><snippet>from show_graph import display</snippet></ROW><ROW><id>16501395</id><snippet>ImportError</snippet></ROW><ROW><id>16501395</id><snippet>from pylab import *
from numpy import outer
rc('text', usetex=False)
a=outer(arange(0,1,0.01),ones(10))
figure(figsize=(10,5))
subplots_adjust(top=0.8,bottom=0.05,left=0.01,right=0.99)
maps=[m for m in cm.datad if not m.endswith("_r")]
maps.sort()
l=len(maps)+1
for i, m in enumerate(maps):
    subplot(1,l,i+1)
    axis("off")
    imshow(a,aspect='auto',cmap=get_cmap(m),origin="lower")
    title(m,rotation=90,fontsize=10)
savefig("colormaps.png",dpi=100,facecolor='gray')
show()
</snippet></ROW><ROW><id>16501617</id><snippet>urllib</snippet></ROW><ROW><id>16501617</id><snippet>urllib.quote_plus</snippet></ROW><ROW><id>16501617</id><snippet>&gt;&gt;&gt; urllib.quote_plus('hello how\'re you?')
'hello+how%27re+you%3F'
</snippet></ROW><ROW><id>16501630</id><snippet>txt</snippet></ROW><ROW><id>16501630</id><snippet>"... MATCH ('%s')" % txt</snippet></ROW><ROW><id>16501630</id><snippet>" ... MATCH ('{}')".format(txt)</snippet></ROW><ROW><id>16501630</id><snippet>txt</snippet></ROW><ROW><id>16501695</id><snippet>processListener</snippet></ROW><ROW><id>16501695</id><snippet>server.py</snippet></ROW><ROW><id>16501695</id><snippet>processListener.py</snippet></ROW><ROW><id>16501695</id><snippet>processListener</snippet></ROW><ROW><id>16501695</id><snippet>None</snippet></ROW><ROW><id>16501695</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>16501695</id><snippet>threading.Thread</snippet></ROW><ROW><id>16501695</id><snippet>None</snippet></ROW><ROW><id>16501873</id><snippet>try:
    response_data = urllib2.urlopen('the_url').read()
except httplib.IncompleteRead:
    pass # handle the error
</snippet></ROW><ROW><id>16501966</id><snippet>HTMLParser</snippet></ROW><ROW><id>16501966</id><snippet>class MyHTMLParser(HTMLParser):

    def handle_starttag(self, tag, attrs):
        # Only parse the 'anchor' tag.
        if tag == "a":
           # Check the list of defined attributes.
           for name, value in attrs:
               # If href is defined, print it.
               if name == "href":
                   print name, "=", value
</snippet></ROW><ROW><id>16501966</id><snippet>feed</snippet></ROW><ROW><id>16501966</id><snippet>your_html_string='&lt;li class="yt-lockup2 clearfix yt-uix-tile result-item- \
                  padding has-hover-effects yt-lockup2-video yt-lockup2-tile  \
                  context-data-item" data-context-item-title="Harry Nilsson - \
                  Coconut (1971)" data-context-item-views="2,930,881 views"  \
                  data-context-item-type="video" data-context-item- \
                  id="Tbgv8PkO9eo" data-context-item-time="4:32" \
                  data-context-item-user="Zoltán Makk"&gt;\
                  &lt;div class="yt-lockup2-thumbnail"&gt;\
                  &lt;a href="/watch?v=Tbgv8PkO9eo" class="ux-thumb-wrap \
                  yt-uix-sessionlink yt-uix-contextlink contains-addto" data-\
                  sessionlink="ved=CDIQwBs&amp;ei=prWOUZT9KIK8igLtyICAAQ"&gt;\
                  &lt;span class="video-thumb  yt-thumb yt-thumb-185" &gt;\
                  &lt;span class="yt-thumb-default"&gt; \
                  &lt;span class="yt-thumb-clip" \
                  &lt;span class="yt-thumb-clip-inner"&gt; \
                  &lt;img alt="Thumbnail" \         
                  src="//i1.ytimg.com/vi/Tbgv8PkO9eo/mqdefault.jpg"  \
                  width="185" &gt; &lt;span class="vertical-align"&gt;&lt;/span&gt; \
                  &lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; \
                  &lt;span class="video-time"&gt;4:32&lt;/span&gt;'

parser = MyHTMLParser()
parser.feed(your_html_string)
</snippet></ROW><ROW><id>16501966</id><snippet>&gt;&gt;&gt; 
href = /watch?v=Tbgv8PkO9eo
</snippet></ROW><ROW><id>16502005</id><snippet>import requests
from requests.packages.urllib3 import add_stderr_logger

add_stderr_logger()
s = requests.Session()

s.headers['User-Agent'] = 'Mozilla/5.0'

# after examining the HTML of the website you're trying to log into
# set name_form to the name of the form element that contains the name and
# set password_form to the name of the form element that will contain the password
login = {name_form: username, password_form: password}
login_response = s.post(url, data=login)
for r in login_response.history:
    if r.status_code == 401:  # 401 means authentication failed
        sys.exit(1)  # abort

pdf_response = s.get(pdf_url)  # Your cookies and headers are automatically included
</snippet></ROW><ROW><id>16502005</id><snippet>loginuser</snippet></ROW><ROW><id>16502005</id><snippet>loginpswd</snippet></ROW><ROW><id>16502110</id><snippet>time.sleep</snippet></ROW><ROW><id>16502110</id><snippet>import time
import os, sys
import wx
import arcpy

mp = os.path.dirname(__file__)
sys.path.append(mp)

WATCHER = None

class LibLoader1(object):
    """Extension Implementation"""
    def __init__(self):
        self.enabled = True

    def startup(self):
        global WATCHER
        WATCHER = watcherDialog()

class ButtonClass5(object):
    """Button Implementation"""
    def __init__(self):
        self.enabled = True
        self.checked = False
    def onClick(self):
        if not WATCHER.timer.IsRunning():
            WATCHER.timer.Start(5000)
        else:
            WATCHER.timer.Stop()

class watcherDialog(wx.Frame):
    '''Frame subclass, just used as a timer event.'''
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "timer_event")
        #set up timer
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onTimer, self.timer)

    def onTimer(self, event):
        localtime = time.asctime( time.localtime(time.time()) )
        print "Refresh at :", localtime
        arcpy.RefreshActiveView()

    app = wx.App(False)
</snippet></ROW><ROW><id>16502110</id><snippet>startup</snippet></ROW><ROW><id>16502110</id><snippet>startup</snippet></ROW><ROW><id>16502110</id><snippet>onClick</snippet></ROW><ROW><id>16502110</id><snippet>def onClick(self):

    if WATCHER is None:
        global WATCHER
        WATCHER = watcherDialog()

    if not WATCHER.timer.IsRunning():
        WATCHER.timer.Start(5000)
    else:
        WATCHER.timer.Stop()
</snippet></ROW><ROW><id>16502110</id><snippet>watcherDialog</snippet></ROW><ROW><id>16502110</id><snippet>None</snippet></ROW><ROW><id>16502140</id><snippet>setattr(newM, p, choice(list)
</snippet></ROW><ROW><id>16502175</id><snippet> re.findall('ABC-[0-9]+', string)
</snippet></ROW><ROW><id>16502188</id><snippet>property</snippet></ROW><ROW><id>16502188</id><snippet>object</snippet></ROW><ROW><id>16502188</id><snippet>class Progress(object):
    # ...
</snippet></ROW><ROW><id>16502390</id><snippet>global</snippet></ROW><ROW><id>16502490</id><snippet># patch_twitter.py
import twitter

TwitterStatus = twitter.Status

class Status(TwitterStatus):
     def __init__(self, *args, **kwargs):
        TwitterStatus.__init__(self, *args, **kwargs)
        self.args = args
        self.time = parseTime(self.created_at)
        self.phrase = ...

    def prettyprint(self):
        # something

twitter.Status = Status

# use api
</snippet></ROW><ROW><id>16502490</id><snippet>twitter.Status</snippet></ROW><ROW><id>16502490</id><snippet>twitter.py</snippet></ROW><ROW><id>16502602</id><snippet>moveToThread</snippet></ROW><ROW><id>16502602</id><snippet>mainThread = QtCore.QThread.currentThread()</snippet></ROW><ROW><id>16502602</id><snippet>self.moveToThread(mainThread)</snippet></ROW><ROW><id>16502602</id><snippet>finished</snippet></ROW><ROW><id>16502750</id><snippet>math.floor(abs(x))*sgn(x)</snippet></ROW><ROW><id>16502750</id><snippet>sgn(x)</snippet></ROW><ROW><id>16502829</id><snippet>from scrapy.http import Request
from scrapy.item import Item, Field
from scrapy.selector import HtmlXPathSelector
from scrapy.spider import BaseSpider


class VoucherItem(Item):
    voucher_id = Field()
    code = Field()


class CuponationSpider(BaseSpider):
    name = "cuponation"
    allowed_domains = ["cuponation.in"]
    start_urls = ["https://www.cuponation.in/babyoye-coupons"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)

        crawled_items = hxs.select('//div[@class="six columns voucher-btn"]/a')
        for button in crawled_items:
            voucher_id = button.select('@data-voucher-id').extract()[0]

            item = VoucherItem()
            item['voucher_id'] = voucher_id
            request = Request("https://www.cuponation.in/clickout/index/id/%s" % voucher_id,
                              callback=self.parse_code,
                              meta={'item': item})
            yield request

    def parse_code(self, response):
        hxs = HtmlXPathSelector(response)

        item = response.meta['item']
        item['code'] = hxs.select('//div[@class="code-field"]/span/text()').extract()

        return item
</snippet></ROW><ROW><id>16502829</id><snippet>scrapy runspider &lt;script_name.py&gt; --output output.json
</snippet></ROW><ROW><id>16502829</id><snippet>output.json</snippet></ROW><ROW><id>16502829</id><snippet>{"voucher_id": "5735", "code": ["MUM10"]}
{"voucher_id": "3634", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "5446", "code": ["APP20"]}
{"voucher_id": "5558", "code": ["No code for this deal"]}
{"voucher_id": "1673", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "3963", "code": ["CNATION150"]}
{"voucher_id": "5515", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "4313", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "4309", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "1540", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "4310", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "1539", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "4312", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "4311", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "2785", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "3631", "code": ["Deal Activated. Enjoy Shopping"]}
{"voucher_id": "4496", "code": ["Deal Activated. Enjoy Shopping"]}
</snippet></ROW><ROW><id>16502896</id><snippet>array()</snippet></ROW><ROW><id>16502896</id><snippet>import numpy as np

B = np.random.rand(3, 32, 128)
a = np.random.rand(32, 32)

def f1(a, B):
    Y   = dot(a,B[0])
    dY  = dot(a,B[1])
    ddY = dot(a,B[2]) 
    return array([Y,dY,ddY])

def f2(a, B):
    result = np.empty((B.shape[0], a.shape[0], B.shape[-1]))
    for i in xrange(B.shape[0]):
        np.dot(a, B[i], result[i])
    return result

r1 = f1(a, B)
r2 = f2(a, B)
print np.allclose(r1, r2)
</snippet></ROW><ROW><id>16502896</id><snippet>f1()</snippet></ROW><ROW><id>16502896</id><snippet>f2()</snippet></ROW><ROW><id>16502896</id><snippet>%timeit f1(a, B)
%timeit f2(a, B)
</snippet></ROW><ROW><id>16502896</id><snippet>1000 loops, best of 3: 1.34 ms per loop
10000 loops, best of 3: 135 µs per loop
</snippet></ROW><ROW><id>16502998</id><snippet>%include "common.h"</snippet></ROW><ROW><id>16502998</id><snippet>using</snippet></ROW><ROW><id>16502998</id><snippet>.cpp</snippet></ROW><ROW><id>16502998</id><snippet>using</snippet></ROW><ROW><id>16502998</id><snippet>.cpp</snippet></ROW><ROW><id>16503001</id><snippet>from itertools import groupby, accumulate
from collections import defaultdict

def sub_seq(li, n):
    d = defaultdict(list)
    rle = [(k, len(list(g))) for k, g in groupby(li)]
    endpoints = accumulate(size for k, size in rle)
    for end_index, (value, count) in zip(endpoints, rle):
        for index in range(end_index - count, end_index - n + 1):
            d[value].append(index)
    return dict(d)
</snippet></ROW><ROW><id>16503103</id><snippet>user = Session.query(User).first()
print user.addresses
</snippet></ROW><ROW><id>16503103</id><snippet>first()</snippet></ROW><ROW><id>16503103</id><snippet>user.addresses</snippet></ROW><ROW><id>16503103</id><snippet>.addresses</snippet></ROW><ROW><id>16503103</id><snippet>def execute(connection, statement):
     cursor = connection.cursor()
     cursor.execute(statement)
     results = cursor.fetchall()
     cursor.close()
     return results
</snippet></ROW><ROW><id>16503222</id><snippet>&gt;&gt;&gt;from time import mktime, strptime
&gt;&gt;&gt;from datetime import datetime
...
&gt;&gt;&gt;datestring = doc.info[0]['CreationDate'][2:-7]
&gt;&gt;&gt;ts = strptime(datestring, "%Y%m%d%H%M%S")
&gt;&gt;&gt;dt = datetime.fromtimestamp(mktime(ts))
datetime(2013, 5, 1, 20, 4, 30)
</snippet></ROW><ROW><id>16503409</id><snippet>with open('file.txt','r') as f:
    #file is opened and accessible via f 
    pass
#file will be closed before here 
</snippet></ROW><ROW><id>16503461</id><snippet>0</snippet></ROW><ROW><id>16503461</id><snippet>if len("original") &gt; 0:
</snippet></ROW><ROW><id>16503461</id><snippet>if len(original) &gt; 0:
</snippet></ROW><ROW><id>16503523</id><snippet>{% for choice in poll.choice_set.all %}
    &lt;input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" /&gt;

    {% if forloop.counter0 == 0 %}
        &lt;label class="right" for="choice{{ forloop.counter }}"&gt;{{ choice.choice_text }}&lt;/label&gt;&lt;br /&gt;

    {% elif forloop.counter0 == 1 %}
        &lt;label class="left" for="choice{{ forloop.counter }}"&gt;{{ choice.choice_text }}&lt;/label&gt;&lt;br /&gt;

    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>16503523</id><snippet>{% for choice in poll.choice_set.all %}
    &lt;input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" /&gt;
    &lt;label class="{% cycle 'right' 'left' %}" for="choice{{ forloop.counter }}"&gt;{{ choice.choice_text }}&lt;/label&gt;&lt;br /&gt;

{% endfor %}
</snippet></ROW><ROW><id>16503536</id><snippet>SomeClass.other_class.my_sweet_property
</snippet></ROW><ROW><id>16503536</id><snippet>OtherClass</snippet></ROW><ROW><id>16503536</id><snippet>.filter()</snippet></ROW><ROW><id>16503536</id><snippet>from foo import Bar
def baz():
    Bar.quux()
</snippet></ROW><ROW><id>16503536</id><snippet>import foo
def baz()
    foo.Bar.quux()
</snippet></ROW><ROW><id>16503536</id><snippet>foo.Bar</snippet></ROW><ROW><id>16503536</id><snippet>baz()</snippet></ROW><ROW><id>16503600</id><snippet>import re

title_regex = re.compile(r'\*{3} START OF THIS PROJECT GUTENBERG EBOOK (.*?) \*{3}')

for index, line in enumerate(finalLines):
    match = title_regex.match(line)

    if match:
        book_name = match.group(1)
        print(index, book_name)
</snippet></ROW><ROW><id>16503600</id><snippet>import urllib.request

url = 'http://www.gutenberg.org/cache/epub/1342/pg1342.txt'
book = urllib.request.urlopen(url)
lines = book.readlines()
book.close()

reached_start = False
metadata = {}

for index, line in enumerate(lines):
    if line.startswith('***'):
        if not reached_start:
            reached_start = True
        else:
            break

    if not reached_start and ':' in line:
        key, _, value = line.partition(':')
        metadata[key.lower()] = value
</snippet></ROW><ROW><id>16503635</id><snippet>from scipy.sparse.csgraph import _validation  
</snippet></ROW><ROW><id>16503651</id><snippet>def myfunc():
    print("I forgot the closing parenthesis here---&gt;"

def lineSub():
  while True:
    print("This is the Linear Equation submenu")
</snippet></ROW><ROW><id>16503651</id><snippet>def lineSub()</snippet></ROW><ROW><id>16503707</id><snippet>request.args(0)</snippet></ROW><ROW><id>16503707</id><snippet>deletable=True</snippet></ROW><ROW><id>16503707</id><snippet>redirect(URL(r=request, f='form_a’))</snippet></ROW><ROW><id>16503707</id><snippet>f='form_a'</snippet></ROW><ROW><id>16503707</id><snippet>f="form_a"</snippet></ROW><ROW><id>16503768</id><snippet>modules</snippet></ROW><ROW><id>16503768</id><snippet>resources</snippet></ROW><ROW><id>16503768</id><snippet>system path</snippet></ROW><ROW><id>16503768</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16503768</id><snippet>modules</snippet></ROW><ROW><id>16503768</id><snippet>resources</snippet></ROW><ROW><id>16503768</id><snippet>__init__.py</snippet></ROW><ROW><id>16503768</id><snippet>import modules
from modules import some_module
import modules.some_module
</snippet></ROW><ROW><id>16503768</id><snippet>with open("../resources/file.txt") as f:
    #do something with file
</snippet></ROW><ROW><id>16503768</id><snippet>..</snippet></ROW><ROW><id>16503768</id><snippet>import os
cwd = os.path.dirname(os.path.realpath(__file__))      #path to current file
par_dir = os.path.split(cwd)[0]                        #path to parent directory
my_file =  os.path.join(par_dir,"resources/file.txt")  #path to file in resources dir
with open(myfile) as f:
    #do something
</snippet></ROW><ROW><id>16503807</id><snippet>for</snippet></ROW><ROW><id>16503807</id><snippet>for row in reader:
    content = list(row[i] for i in included_cols)
print content
</snippet></ROW><ROW><id>16503807</id><snippet>for row in reader:
        content = list(row[i] for i in included_cols)
        print content
</snippet></ROW><ROW><id>16503807</id><snippet>import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']
</snippet></ROW><ROW><id>16503807</id><snippet>Names</snippet></ROW><ROW><id>16503807</id><snippet>names = df.Names
</snippet></ROW><ROW><id>16503807</id><snippet>for</snippet></ROW><ROW><id>16503816</id><snippet>zip</snippet></ROW><ROW><id>16503816</id><snippet>&gt;&gt;&gt; result = [('a', 1), ('b', 2), ('c', 3)]
&gt;&gt;&gt; r1, r2 = zip(*result)
&gt;&gt;&gt; r1
('a', 'b', 'c')
&gt;&gt;&gt; r2
(1, 2, 3)
</snippet></ROW><ROW><id>16503816</id><snippet>zip(*result)</snippet></ROW><ROW><id>16503816</id><snippet>result</snippet></ROW><ROW><id>16503816</id><snippet>zip</snippet></ROW><ROW><id>16503816</id><snippet>r1</snippet></ROW><ROW><id>16503816</id><snippet>r2</snippet></ROW><ROW><id>16503889</id><snippet>[map(str.rstrip, f.readlines()) for f in files]

[[line.rstrip() for line in f] for f in files]
</snippet></ROW><ROW><id>16503981</id><snippet>student[item] * weight
</snippet></ROW><ROW><id>16503981</id><snippet>def get_average(student):
    weight = 0
    total = 0
    for item,val in student.items(): #use dict.items() if you need to wrk on both key and values
        if item == "homework":
            weight = .1
        elif item == "quizzes":
            weight = .3
        elif item == "tests":
            weight = .6
        else:
            continue    # no need of weight = 0 simple move on to next item
                        # continue statement jumps the loop to next iteration
        total += (float(sum(val)) / len(val)) * weight
    return total

print get_average(tyler)  #prints 79.9
</snippet></ROW><ROW><id>16504014</id><snippet>Here is an example of how to instantiate the client, and retrieve the Root List Resource resource:
</snippet></ROW><ROW><id>16504014</id><snippet>client = RBClient('http://monty_python:5050/')
</snippet></ROW><ROW><id>16504087</id><snippet>&gt;&gt;&gt; parser.parse("20130501200439+01'00'".replace("'", ""))
datetime.datetime(2013, 5, 1, 20, 4, 39, tzinfo=tzoffset(None, 3600))
</snippet></ROW><ROW><id>16504199</id><snippet>input()</snippet></ROW><ROW><id>16504199</id><snippet>int</snippet></ROW><ROW><id>16504199</id><snippet>n = int(input("Which do you choose?"))
</snippet></ROW><ROW><id>16504199</id><snippet>&gt;&gt;&gt; '1' == 1
False
&gt;&gt;&gt; int('1') == 1
True
</snippet></ROW><ROW><id>16504373</id><snippet>virtualenv</snippet></ROW><ROW><id>16504373</id><snippet>#!/Library/Frameworks/Python.framework/Versions/Current/bin/python
</snippet></ROW><ROW><id>16504373</id><snippet>virtualenv</snippet></ROW><ROW><id>16504373</id><snippet>mkvirtualenv</snippet></ROW><ROW><id>16504373</id><snippet>#! /usr/bin/env python
</snippet></ROW><ROW><id>16504784</id><snippet>_classes</snippet></ROW><ROW><id>16504784</id><snippet>global</snippet></ROW><ROW><id>16504784</id><snippet>def populateClasses():
    global _classes   # &lt;&lt;&lt;&lt;&lt;&lt; THIS
    print "Classes Exist"
    cp = Preferences(''.join([resource_path,"resources.ini"]))
    print cp
    _classes = cp.getPreferences()['Classes']
</snippet></ROW><ROW><id>16504784</id><snippet>_classes</snippet></ROW><ROW><id>16504917</id><snippet>from flask import session
from dropbox import session
</snippet></ROW><ROW><id>16504917</id><snippet>from flask import session as fsession
from dropbox import session as dbsession
</snippet></ROW><ROW><id>16504917</id><snippet>session</snippet></ROW><ROW><id>16504917</id><snippet>fsession</snippet></ROW><ROW><id>16504917</id><snippet>session</snippet></ROW><ROW><id>16504917</id><snippet>dbsession</snippet></ROW><ROW><id>16505001</id><snippet>mapper.py</snippet></ROW><ROW><id>16505001</id><snippet>chmod a+x mapper.py</snippet></ROW><ROW><id>16505001</id><snippet>   EACCES Execute permission is denied for the file or a script or ELF
          interpreter.

   EACCES The file system is mounted noexec.
</snippet></ROW><ROW><id>16505058</id><snippet>a[i][j]</snippet></ROW><ROW><id>16505058</id><snippet>a[i]</snippet></ROW><ROW><id>16505058</id><snippet>a[i,j]</snippet></ROW><ROW><id>16505058</id><snippet>a</snippet></ROW><ROW><id>16505058</id><snippet>In [9]: a = np.random.rand(1000,1000)

In [10]: %timeit a[123][456]
1000000 loops, best of 3: 586 ns per loop

In [11]: %timeit a[123,456]
1000000 loops, best of 3: 234 ns per loop
</snippet></ROW><ROW><id>16505131</id><snippet>dict</snippet></ROW><ROW><id>16505131</id><snippet>from collections import OrderedDict

my_dict = OrderedDict([((255,0,0),'red'), ((0,255,0),'green'), ((0,0,255),'blue')]) #[(key,val),(key2,val2),..]
my_list = [[1,2,3], [4,5,6], [7,8,9]]

new_dict = dict(zip(my_dict, my_list))
print(new_dict)

&gt;&gt;&gt; 
{(0, 0, 255): [7, 8, 9], (0, 255, 0): [4, 5, 6], (255, 0, 0): [1, 2, 3]}
</snippet></ROW><ROW><id>16505301</id><snippet>radius = 2
abs(sqrt((p[0] - c[0]) ** 2 + (p[1] - c[1]) ** 2) - radius)
</snippet></ROW><ROW><id>16505475</id><snippet>libraries</snippet></ROW><ROW><id>16505590</id><snippet>any(lst)</snippet></ROW><ROW><id>16505590</id><snippet>lst</snippet></ROW><ROW><id>16505590</id><snippet>[0, False, '', 0.0, [], {}]</snippet></ROW><ROW><id>16505590</id><snippet>any(lst)</snippet></ROW><ROW><id>16505590</id><snippet>lst</snippet></ROW><ROW><id>16505590</id><snippet>[-1, -2, 10, -4, 20]</snippet></ROW><ROW><id>16505590</id><snippet>any(lst)</snippet></ROW><ROW><id>16505590</id><snippet>x &gt; 0 for x in lst</snippet></ROW><ROW><id>16505590</id><snippet>generator expression</snippet></ROW><ROW><id>16505590</id><snippet>list comprehension</snippet></ROW><ROW><id>16505590</id><snippet>[x &gt; 0 for x in lst]</snippet></ROW><ROW><id>16505590</id><snippet>[-1, -2, 10, -4, 20]</snippet></ROW><ROW><id>16505590</id><snippet>[False, False, True, False, True]</snippet></ROW><ROW><id>16505590</id><snippet>any</snippet></ROW><ROW><id>16505590</id><snippet>any</snippet></ROW><ROW><id>16505590</id><snippet>any</snippet></ROW><ROW><id>16505590</id><snippet>lst</snippet></ROW><ROW><id>16505590</id><snippet>lst = range(-1,int(1e9))</snippet></ROW><ROW><id>16505590</id><snippet>any</snippet></ROW><ROW><id>16505590</id><snippet>x&gt;0</snippet></ROW><ROW><id>16505590</id><snippet>any</snippet></ROW><ROW><id>16505590</id><snippet>any</snippet></ROW><ROW><id>16505590</id><snippet>any</snippet></ROW><ROW><id>16505590</id><snippet>all</snippet></ROW><ROW><id>16505603</id><snippet>line.split(None, 2)[1:]</snippet></ROW><ROW><id>16505603</id><snippet>[1:]</snippet></ROW><ROW><id>16505603</id><snippet>:</snippet></ROW><ROW><id>16505603</id><snippet>line.split(None, 2)[1]</snippet></ROW><ROW><id>16505603</id><snippet>csv.writer</snippet></ROW><ROW><id>16505603</id><snippet>.csv</snippet></ROW><ROW><id>16505603</id><snippet>with open('second.txt', 'rb') as file2, open('output.txt', 'wb') as outputfile:
    output = ""
    file2lines = file2.readlines()
    for i in range(len(file2lines)):
        line = file2lines[i]
        if line[0] == '?':
            row = line.strip().split('|')
            key = row[0][1:]
            if key in file1_data:
                output += line + "\t" + file2lines[i+1]
    outputfile.write(output)
</snippet></ROW><ROW><id>16505606</id><snippet>def insert(item, tree):
    if (item &lt; tree.entry):
        if (tree.left != None):
            insert(item, tree.left)
        else:
            tree.left = Tree(item)
    else:
        if (tree.right != None):
            insert(item, tree.right)
        else:
            tree.right = Tree(item)
</snippet></ROW><ROW><id>16505824</id><snippet>re.split</snippet></ROW><ROW><id>16505824</id><snippet>from string import punctuation
import re

puncrx = re.compile(r'[{}\s]'.format(re.escape(punctuation)))
print filter(None, puncrx.split(your_tweet))
</snippet></ROW><ROW><id>16505824</id><snippet>print re.findall(re.findall('[\w#@]+', s), your_tweet)
</snippet></ROW><ROW><id>16505824</id><snippet>print re.findall(r'[\w@#]+', 'talking about #python with @someone is so much fun! Is there a     140 char limit? So not cool!')
# ['talking', 'about', '#python', 'with', '@someone', 'is', 'so', 'much', 'fun', 'Is', 'there', 'a', '140', 'char', 'limit', 'So', 'not', 'cool']
</snippet></ROW><ROW><id>16505859</id><snippet>python-config --includes</snippet></ROW><ROW><id>16505859</id><snippet>python-config</snippet></ROW><ROW><id>16505859</id><snippet>python-dev</snippet></ROW><ROW><id>16505859</id><snippet>cc -c example.c example_wrap.c $(python-config --cflags) -fPIC
</snippet></ROW><ROW><id>16506039</id><snippet>eval()</snippet></ROW><ROW><id>16506039</id><snippet>z[0]</snippet></ROW><ROW><id>16506039</id><snippet>((1 &amp; z[0]) != 0)</snippet></ROW><ROW><id>16506039</id><snippet>eval()</snippet></ROW><ROW><id>16506039</id><snippet>BoolRef: 1 &amp; v__a != 0</snippet></ROW><ROW><id>16506039</id><snippet>__repr__()</snippet></ROW><ROW><id>16506048</id><snippet>import csv

class client(threading.Thread):
    Username_List = []
    def __init__(self, conn):
        super(client, self).__init__()
        self.conn = conn

    def run(self):
        print "Client thread started"
        data = self.conn.recv(1024)
        print "Received: {0}".format(data)
        if data in client.Username_List:
            self.send_msg("Welcome Back!")
        else:
            for cnt in threadz:
                cnt.send_msg(data)
            print("Sent new username to everyone")
            client.Username_List.append(data)
        while True:
            # dont need nothing now
            pass

    def send_msg(self,msg):
        self.conn.send(msg)

host = input("Host: ")
port = input("Port: ")

ss = socket() #AF_INET,SOCK_STREAM)
ss.bind((host,int(port)))
print "Server Opening on port: {0}".format(port)
ss.listen(2)
threadz = []
print "Begining Wait for connections"

while True:      
    try:
        connection, address = ss.accept()
        print "Got ONE!"
        c = client(connection)
        print "Recevied connection from:{0} On port:{1}".format(address[0],address[1])
        c.start()
        threadz.append(c)
        print "Client appended to threadz, currently {0} threadz active".format(len(threadz))

    except IOError,KeyboardInterrupt:
        connection.close()
        print("An exception with a connected user occured")
        break
</snippet></ROW><ROW><id>16506048</id><snippet># Sample Username Client Service Handler.
from socket import *
import threading
import os
import csv

Username = ("ShyGuy")
host = input("Host: ")
port = input("Port: ")
try:
    ss = socket() #AF_INET,SOCK_STREAM)
    ss.connect((host,int(port))) #I was using ("localhost",1234) for testing
    ss.send(Username)
except IOError:
    print("Aw no man")


print("Waiting to Recieve Data")
while True:
    try:
        data = ss.recv(1024)
        if data:
            translated_data = data.decode()
            print(translated_data)
            if translated_data == Username:
                print"Name: {0} has been registered on server!".format(translated_data)
            else:
                Client_Username = translated_data
                print "New client name received: {0}".format(Client_Username)


    except Exception as e:
        print (vars(e))
</snippet></ROW><ROW><id>16506078</id><snippet>break</snippet></ROW><ROW><id>16506078</id><snippet>sys.exit</snippet></ROW><ROW><id>16506078</id><snippet>pass</snippet></ROW><ROW><id>16506078</id><snippet>break</snippet></ROW><ROW><id>16506168</id><snippet>class GetBlobstoreUrl(BaseHandler):
    def get(self):
        upload_url = blobstore.create_upload_url('/upload/')
        self.response.out.write(upload_url)

class UploadHandler(blobstore_handlers.BlobstoreUploadHandler):
    def post(self):
        upload_files = self.get_uploads()
        blob_info = upload_files[0]
</snippet></ROW><ROW><id>16506168</id><snippet>class SomeModel(ndb.Model):
  avatar = ndb.BlobProperty()
</snippet></ROW><ROW><id>16506181</id><snippet>make_default_app_wrapper</snippet></ROW><ROW><id>16506181</id><snippet>wrapper</snippet></ROW><ROW><id>16506181</id><snippet>wrapper</snippet></ROW><ROW><id>16506181</id><snippet>wrapper</snippet></ROW><ROW><id>16506181</id><snippet>route</snippet></ROW><ROW><id>16506181</id><snippet>app</snippet></ROW><ROW><id>16506181</id><snippet>wrapper</snippet></ROW><ROW><id>16506181</id><snippet>return getattr(app(), name)(*a, **ka)
</snippet></ROW><ROW><id>16506181</id><snippet>app</snippet></ROW><ROW><id>16506181</id><snippet>app</snippet></ROW><ROW><id>16506181</id><snippet>wrapper</snippet></ROW><ROW><id>16506181</id><snippet>app</snippet></ROW><ROW><id>16506181</id><snippet>wrapper</snippet></ROW><ROW><id>16506181</id><snippet>return getattr(app(), name)(*a, **ka)
</snippet></ROW><ROW><id>16506181</id><snippet>app</snippet></ROW><ROW><id>16506181</id><snippet>app</snippet></ROW><ROW><id>16506181</id><snippet>wrapper</snippet></ROW><ROW><id>16506181</id><snippet>app</snippet></ROW><ROW><id>16506181</id><snippet>wrapper</snippet></ROW><ROW><id>16506186</id><snippet>def palindrome(listnum):
    for j in range(0, len(listnum)):
        t = len(listnum) - j - 1
        if listnum[j] != listnum[t]:
            return False            

    return True

assert palindrome([9,0,6,6,0,9])
assert palindrome("ABBA")
assert palindrome([])
assert palindrome("1")
assert palindrome([1.0, 2, 1])
assert not palindrome("lolz")
assert not palindrome([1,2,3])
</snippet></ROW><ROW><id>16506213</id><snippet>find</snippet></ROW><ROW><id>16506213</id><snippet>as_class</snippet></ROW><ROW><id>16506371</id><snippet>&gt;&gt;&gt; print(r'text \" text2')
text \" text2
</snippet></ROW><ROW><id>16506394</id><snippet>coList = []
for comment in comments:
    coList.append(comment.author.name)
</snippet></ROW><ROW><id>16506394</id><snippet>for comment in comments:
    coList = [comment.author.name]
</snippet></ROW><ROW><id>16506394</id><snippet>colist = [comment.author.name for comment in comments]
</snippet></ROW><ROW><id>16506527</id><snippet>Queue</snippet></ROW><ROW><id>16506527</id><snippet>_init</snippet></ROW><ROW><id>16506527</id><snippet>_qsize</snippet></ROW><ROW><id>16506527</id><snippet>_put</snippet></ROW><ROW><id>16506527</id><snippet>_get</snippet></ROW><ROW><id>16506527</id><snippet>deque</snippet></ROW><ROW><id>16506527</id><snippet>set</snippet></ROW><ROW><id>16506527</id><snippet>class SetQueue(Queue.Queue):
    def _init(self, maxsize):
        self.queue = set()
    def _put(self, item):
        self.queue.add(item)
    def _get(self):
        return self.queue.pop()
</snippet></ROW><ROW><id>16506527</id><snippet>_qsize</snippet></ROW><ROW><id>16506527</id><snippet>return len(self.queue)</snippet></ROW><ROW><id>16506527</id><snippet>OrderedSet</snippet></ROW><ROW><id>16506527</id><snippet>OrderedDict</snippet></ROW><ROW><id>16506527</id><snippet>collections</snippet></ROW><ROW><id>16506527</id><snippet>collections</snippet></ROW><ROW><id>16506527</id><snippet>class OrderedSetQueue(Queue.Queue):
    def _init(self, maxsize):
        self.queue = OrderedSet()
    def _put(self, item):
        self.queue.add(item)
    def _get(self):
        return self.queue.pop()
</snippet></ROW><ROW><id>16506527</id><snippet>class CheckableQueue(Queue.Queue): # or OrderedSetQueue
    def __contains__(self, item):
        with self.mutex:
            return item in self.queue
</snippet></ROW><ROW><id>16506527</id><snippet>if x not in my_queue:
    my_queue.put(x)
</snippet></ROW><ROW><id>16506527</id><snippet>x</snippet></ROW><ROW><id>16506527</id><snippet>put</snippet></ROW><ROW><id>16506527</id><snippet>Queue.full()</snippet></ROW><ROW><id>16506527</id><snippet>with my_queue.mutex:
    if x not in my_queue:
        my_queue.put(x)
</snippet></ROW><ROW><id>16506527</id><snippet>Queue</snippet></ROW><ROW><id>16506527</id><snippet>Queue.mutex</snippet></ROW><ROW><id>16506527</id><snippet>Queue</snippet></ROW><ROW><id>16506527</id><snippet>OrderedSetQueue</snippet></ROW><ROW><id>16506564</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>16506564</id><snippet>time()</snippet></ROW><ROW><id>16506564</id><snippet>format = '%m/%d/%Y' if month_first else '%d/%m/%Y'
datetime.combine(datetime.strptime(item[index_field], format).date(), time())
</snippet></ROW><ROW><id>16506564</id><snippet>month_first</snippet></ROW><ROW><id>16506564</id><snippet>.date()</snippet></ROW><ROW><id>16506564</id><snippet>.strptime()</snippet></ROW><ROW><id>16506564</id><snippet>00:00:00</snippet></ROW><ROW><id>16506564</id><snippet>.date()</snippet></ROW><ROW><id>16506780</id><snippet>cursor.execute(loggit[0], loggit[1])
</snippet></ROW><ROW><id>16506780</id><snippet>*</snippet></ROW><ROW><id>16506780</id><snippet>cursor.execute(*loggit)
</snippet></ROW><ROW><id>16506780</id><snippet>.execute()</snippet></ROW><ROW><id>16506780</id><snippet>loggit = """
        INSERT INTO logger (logged_info, dummy)
        VALUES
            (%s, %s)
    """
cursor.execute(loggit, (bob, dummyVar))
</snippet></ROW><ROW><id>16507298</id><snippet>nam</snippet></ROW><ROW><id>16507298</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>16507298</id><snippet>open_db()</snippet></ROW><ROW><id>16507298</id><snippet>def open_db(nam):
    conn = sqlite3.connect(sys.argv[1])
</snippet></ROW><ROW><id>16507298</id><snippet>src_conn</snippet></ROW><ROW><id>16507298</id><snippet>dest_conn</snippet></ROW><ROW><id>16507298</id><snippet>nam</snippet></ROW><ROW><id>16507298</id><snippet>def open_db(nam):
    conn = sqlite3.connect(nam)
</snippet></ROW><ROW><id>16507360</id><snippet>#!/usr/bin/env python
import sys
import threading

try:
    from PySide import QtGui
    from PySide import QtCore
    from PySide.QtCore import Signal
except:
    from PyQt4.QtCore import pyqtSignal as Signal
    from PyQt4 import QtGui
    from PyQt4 import QtCore


class MyUI(QtGui.QWidget):
# Add Signal
    text_edit_evt = Signal(str)

    def __init__(self):
        super(MyUI, self).__init__()
        self.initUI()

# Connect the signal
        self.text_edit_evt.connect(self.textEdit.append)

    def initUI(self):

        someValues = [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200]

        self.setGeometry(100, 300, 640, 450) #window's geometry

        lblValueChoice = QtGui.QLabel(self)
        lblValueChoice.setGeometry(10, 10, (self.width() - 20), 27)
        lblValueChoice.setText("Select your value:")

        cmbValueChoice = QtGui.QComboBox(self)
        cmbValueChoice.setObjectName("valueChoice")
        cmbValueChoice.setGeometry(10, (lblValueChoice.y() + lblValueChoice.height() + 5), (self.width() - 20), 27)

        for item in someValues: cmbSerialPorts.addItem(item)
        cmbSerialPorts.setCurrentIndex(len(someValues)-1)

        pbStartReading = QtGui.QPushButton("Start doing the magic!", self)
        pbStartReading.setGeometry(10, (cmbValueChoice.y() + cmbValueChoice.height() + 10), (self.width() - 20), 27)
        pbStartReading.setCheckable(True)
        pbStartReading.clicked[bool].connect(lambda: self.startReading(bool, str(cmbValueChoice.currentText())))

# Use self.textEdit so it can be referenced from other functions
        self.textEdit = QtGui.QTextEdit(self)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setGeometry(10, (pbStartReading.y() + pbStartReading.height() + 10), (self.width() - 20), (self.height() - (pbStartReading.y() + pbStartReading.height() + 10) - 10) )

        self.textEdit.append(add_env())

        self.setWindowTitle(u'MyMiserableUIFailure')

        self.show()

    def startReading(self, bool, myvalue):

        threading.Thread(target=self.readingLoop, args=(bool, myvalue, )).start()

    def readingLoop(self, bool, myvalue):

        while bool:
            # the error happens in the line below, when I
            # try to reference the textEdit control
            # -------------------------------------------
# Emit the Signal we created
            self.text_edit_evt.emit("this actually works!\n")


def main():
    app = QtGui.QApplication(sys.argv)

    theui = MyUI()

    sys.exit(app.exec_())

def add_env():
    newLine = QtCore.QString("\n")
    env_info = "The system is:" + newLine
    env_info += newLine + "System/OS name:            " + str(platform.system())
    env_info += newLine + "System release:          " + str(platform.release())
    env_info += newLine + "System release version:  " + str(platform.version())
    env_info += newLine + "Machine type:              " + str(platform.machine())
    env_info += newLine + "Platform:                  " + str(platform.platform(aliased=0, terse=1))
    env_info += newLine + "Processor:                 " + str(platform.processor())
    env_info += newLine + "Network name:              " + str(platform.node())
    env_info += newLine + "Python ver(maj,min,patch): " + str(platform.python_version_tuple())
    env_info += newLine + "Python build:              " + str(platform.python_build())
    env_info += newLine + "Python implementation:     " + str(platform.python_implementation())
    env_info += newLine
    env_info += newLine + "***************************"
    return env_info

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16507361</id><snippet>class Vector(object): # subclass object for new style class

    def __init__(self):
        self.x = 1
        self.y = 1
        self.z = 1

    @property
    def sum(self):
        return self.x + self.y + self.z
</snippet></ROW><ROW><id>16507361</id><snippet>&gt;&gt;&gt; v = Vector()
&gt;&gt;&gt; v.sum
3
</snippet></ROW><ROW><id>16507400</id><snippet>import sys
import serial

port = serial.Serial('COM4', 115200, timeout=0)
data = b''

while(1):
    data = port.read()
    print(data)
    if data != b'':
        fileID = open('output.txt', 'a')
        fileID.write(str(ord(data)))
        fileID.write(',')
        fileID.close()

port.close()
</snippet></ROW><ROW><id>16507471</id><snippet>self</snippet></ROW><ROW><id>16507471</id><snippet>setLayout</snippet></ROW><ROW><id>16507471</id><snippet>self.hBox</snippet></ROW><ROW><id>16507471</id><snippet>QGroupBox</snippet></ROW><ROW><id>16507471</id><snippet>self</snippet></ROW><ROW><id>16507471</id><snippet>parent</snippet></ROW><ROW><id>16507513</id><snippet>Decompress</snippet></ROW><ROW><id>16507513</id><snippet>unused_data</snippet></ROW><ROW><id>16507513</id><snippet>data</snippet></ROW><ROW><id>16507513</id><snippet>Decompress</snippet></ROW><ROW><id>16507513</id><snippet>unused_data</snippet></ROW><ROW><id>16507513</id><snippet>unused_data</snippet></ROW><ROW><id>16507513</id><snippet>import zlib

# FILL IN: ZHEAD is two bytes with the actual ZLIB settings in the input
ZHEAD = CMF+FLG  

def findstart(header, buf, source):
    """Find `header` in str `buf`, reading more from `source` if necessary"""

    while buf.find(header) == -1:
        more = source.read(2**12)
        if len(more) == 0:  # EOF without finding the header
            return ''
        buf += more

    offset = buf.find(header)
    return buf[offset:]
</snippet></ROW><ROW><id>16507513</id><snippet>try</snippet></ROW><ROW><id>16507513</id><snippet>except</snippet></ROW><ROW><id>16507513</id><snippet>source = open(datafile, 'rb')
skip_ = source.read(32) # Skip non-zlib header

buf = ''
while True:
    decomp = zlib.decompressobj()
    # Find the start of the next stream
    buf = findstart(ZHEAD, buf, source)
    try:    
        stream = decomp.decompress(buf)
    except zlib.error:
        print "Spurious match(?) at output offset %d." % outfile.tell(),
        print "Skipping 2 bytes"
        buf = buf[2:]
        continue

    # Read until zlib decides it's seen a complete file
    while decomp.unused_data == '':
        block = source.read(2**12)
        if len(block) &gt; 0:       
            stream += decomp.decompress(block)
        else:
            break # We've reached EOF

    outfile.write(stream)
    buf = decomp.unused_data # Save for the next stream
    if len(block) == 0:
        break  # EOF

outfile.close()
</snippet></ROW><ROW><id>16507655</id><snippet>0xffffffffff600000L</snippet></ROW><ROW><id>16507655</id><snippet>-0x8000000000000000</snippet></ROW><ROW><id>16507655</id><snippet>0x7fffffffffffffff</snippet></ROW><ROW><id>16507655</id><snippet>fseeko</snippet></ROW><ROW><id>16507655</id><snippet>off_t</snippet></ROW><ROW><id>16507655</id><snippet>mem_len = os.fstat(mem_file.fileno()).st_size

if start &gt;= 1&lt;&lt;63L:
    mem_file.seek(mem_len - start, os.SEEK_END)
else:
    mem_file.seek(start)
</snippet></ROW><ROW><id>16507655</id><snippet>if start &gt;= 1&lt;&lt;63L:
    start -= 1&lt;&lt;64L
</snippet></ROW><ROW><id>16507655</id><snippet>0xffffffffff600000L</snippet></ROW><ROW><id>16507655</id><snippet>-0xa00000</snippet></ROW><ROW><id>16507655</id><snippet>long</snippet></ROW><ROW><id>16507655</id><snippet>long</snippet></ROW><ROW><id>16507655</id><snippet>0xffffffffff600000L</snippet></ROW><ROW><id>16507655</id><snippet>mmap</snippet></ROW><ROW><id>16507655</id><snippet>seek</snippet></ROW><ROW><id>16507655</id><snippet>read</snippet></ROW><ROW><id>16507655</id><snippet>ctypes</snippet></ROW><ROW><id>16507655</id><snippet>cffi</snippet></ROW><ROW><id>16507655</id><snippet>fseeko</snippet></ROW><ROW><id>16507655</id><snippet>start = int(m.group(1), 16)
end = int(m.group(2), 16)
if start &lt;= sys.maxint:
    mem_file.seek(start)  # seek to region start
    chunk = mem_file.read(end - start)  # read region contents
    # ...
</snippet></ROW><ROW><id>16507655</id><snippet>continue</snippet></ROW><ROW><id>16507655</id><snippet>start = int(m.group(1), 16)
end = int(m.group(2), 16)
if start &gt; sys.maxint:
    continue
mem_file.seek(start)  # seek to region start
chunk = mem_file.read(end - start)  # read region contents
# ...
</snippet></ROW><ROW><id>16507655</id><snippet>break</snippet></ROW><ROW><id>16507655</id><snippet>continue</snippet></ROW><ROW><id>16507655</id><snippet>try</snippet></ROW><ROW><id>16507655</id><snippet>seek</snippet></ROW><ROW><id>16507655</id><snippet>read</snippet></ROW><ROW><id>16507655</id><snippet>if m.group(3) == 'r':  # if this is a readable region
    start = int(m.group(1), 16)
    end = int(m.group(2), 16)
    try:
        mem_file.seek(start)  # seek to region start
        chunk = mem_file.read(end - start)  # read region co
    except Exception as e:
        print('Skipping region {:#018x} because of error {}'.format(start, e))
        continue
    mem_dump = open(working_dir+"/%s.bin"%pid, "ab")
    # ...
</snippet></ROW><ROW><id>16507688</id><snippet>str.split()</snippet></ROW><ROW><id>16507688</id><snippet>&gt;&gt;&gt; 'TEXT           123.34645\n'.split()
['TEXT', '123.34645']
</snippet></ROW><ROW><id>16507688</id><snippet>.split()</snippet></ROW><ROW><id>16507688</id><snippet>\n</snippet></ROW><ROW><id>16507688</id><snippet>str.rsplit()</snippet></ROW><ROW><id>16507688</id><snippet>&gt;&gt;&gt; 'TEXT WITH WHITESPACE           123.34645'.rsplit(None, 1)
['TEXT WITH WHITESPACE', '123.34645']
</snippet></ROW><ROW><id>16507688</id><snippet>None</snippet></ROW><ROW><id>16507688</id><snippet>.rsplit()</snippet></ROW><ROW><id>16507688</id><snippet>.split()</snippet></ROW><ROW><id>16507688</id><snippet>1</snippet></ROW><ROW><id>16507838</id><snippet>class ComeUpWithAGoodName(object):
    def __init__(self, user):
        self.user = user
    def function1(self):
        do_stuff_with(self.user)
    # etc.
</snippet></ROW><ROW><id>16507893</id><snippet>dict</snippet></ROW><ROW><id>16507893</id><snippet>list</snippet></ROW><ROW><id>16507893</id><snippet>dict</snippet></ROW><ROW><id>16507893</id><snippet>hostname</snippet></ROW><ROW><id>16507893</id><snippet>print config_params[0]['hostname']
</snippet></ROW><ROW><id>16507893</id><snippet>for row in config_params:
    print row['hostname']
</snippet></ROW><ROW><id>16507893</id><snippet>print '\n'.join(row['hostname'] for row in config_params)
</snippet></ROW><ROW><id>16507893</id><snippet>fetchone</snippet></ROW><ROW><id>16507893</id><snippet>fetchall</snippet></ROW><ROW><id>16507893</id><snippet>row = cur.fetchone()
config_params = dict(
    hostname=row[0], syslocation=row[1],
    ipaddress=socket.inet_ntoa(struct.pack('!L', row[2])),
    netmask=socket.inet_ntoa(struct.pack('!L', row[3])),
    username=row[4], password=row[5], bri1=row[6], bri2=row[7],
    bri3=row[8], bri4=row[9])
</snippet></ROW><ROW><id>16507893</id><snippet>dict</snippet></ROW><ROW><id>16507893</id><snippet>sqlite3</snippet></ROW><ROW><id>16507893</id><snippet>con = sqlite3.connect(dbpath, factory=sqlite3.Row)
cur = con.execute('SELECT * FROM Config')
config_params = cur.fetchone()
print config_params['hostname']
</snippet></ROW><ROW><id>16507927</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>16507927</id><snippet>datetime</snippet></ROW><ROW><id>16507927</id><snippet>time.time()</snippet></ROW><ROW><id>16507927</id><snippet>time.clock()</snippet></ROW><ROW><id>16507927</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>16507943</id><snippet># resize your img

# create file
file_name = files.blobstore.create(mime_type='application/octet-stream')
with files.open(file_name, 'a') as f:
    f.write(img)    

# Finalize the file. Do this before attempting to read it.
files.finalize(file_name)

# Get the file's blob key
blob_key = files.blobstore.get_blob_key(file_name)
</snippet></ROW><ROW><id>16507969</id><snippet>global</snippet></ROW><ROW><id>16507969</id><snippet>if</snippet></ROW><ROW><id>16507969</id><snippet>globals()</snippet></ROW><ROW><id>16507969</id><snippet>def foo(a):
    if a:
        globals()['g'] = 10
    else:
        g = 20
</snippet></ROW><ROW><id>16508114</id><snippet>items</snippet></ROW><ROW><id>16508114</id><snippet>items = ['a','b','c']
print(items[0])
</snippet></ROW><ROW><id>16508114</id><snippet>a</snippet></ROW><ROW><id>16508114</id><snippet>se=int(raw_input())

if se &lt; len(items):
    item = items[se-1]
    the_path = "/var/mobile/TP/{}".format(item)
else:
    print("Please enter a value between 1 and {}".format(len(items)))
</snippet></ROW><ROW><id>16508296</id><snippet>scanf("%s%*[^\n]", line);
</snippet></ROW><ROW><id>16508298</id><snippet>sent_file.seek(0)
</snippet></ROW><ROW><id>16508298</id><snippet>&gt;&gt;&gt; fileobj = open('names.txt')
&gt;&gt;&gt; fileobj.close()
&gt;&gt;&gt; fileobj.read()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: I/O operation on closed file
</snippet></ROW><ROW><id>16508556</id><snippet>menuBar()</snippet></ROW><ROW><id>16508556</id><snippet>QMainWindow</snippet></ROW><ROW><id>16508556</id><snippet>from PyQt4 import QtGui

import sys
class SRM(QtGui.QWidget):
    def __init__(self):
        self.app = QtGui.QApplication(sys.argv)
        self.MainWindow = QtGui.QMainWindow()
        self.menubar = self.MainWindow.menuBar()
        self.MainWindow.show()
        self.addAdminMenu()
        sys.exit(self.app.exec_())

    def addAdminMenu(self):
        self.menubar.addMenu('&amp;Admin');

if __name__ == '__main__':
        srm = SRM()
</snippet></ROW><ROW><id>16508609</id><snippet>import mimetypes

class StaticFileHandler(webapp2.RequestHandler):
    def get(self, path):
        # edit the next line to change the static files directory
        abs_path = os.path.join(os.path.dirname(__file__), path)
        try:
            f = open(abs_path, 'r')
            self.response.headers.add_header('Content-Type', mimetypes.guess_type(abs_path)[0])
            self.response.out.write(f.read())
            f.close()
        except IOError: # file doesn't exist
            self.response.set_status(404)
</snippet></ROW><ROW><id>16508609</id><snippet>app</snippet></ROW><ROW><id>16508609</id><snippet>StaticFileHandler</snippet></ROW><ROW><id>16508609</id><snippet>app = webapp2.WSGIApplication([('/', MainHandler), # or whatever it's called
                               (r'/static/(.+)', StaticFileHandler), # add this
                               # other routes
                              ])
</snippet></ROW><ROW><id>16508609</id><snippet>http://localhost:8080/static/mydata.json</snippet></ROW><ROW><id>16508609</id><snippet>mydata.json</snippet></ROW><ROW><id>16508714</id><snippet>downloads</snippet></ROW><ROW><id>16508714</id><snippet>songs</snippet></ROW><ROW><id>16508714</id><snippet>from datetime import datetime
# fetch all songs with a download with a date on or after 2013-05-01.
songs = song.objects.filter(downloads__date__gte=datetime(2013,5,1))
</snippet></ROW><ROW><id>16508714</id><snippet>downloads</snippet></ROW><ROW><id>16508714</id><snippet>songs.downloads</snippet></ROW><ROW><id>16508714</id><snippet>related_name</snippet></ROW><ROW><id>16508714</id><snippet>class downloads(models.Model):
    song = models.ForeignKey(songs, related_name="related_downloads")
</snippet></ROW><ROW><id>16508714</id><snippet>song.downloads</snippet></ROW><ROW><id>16508714</id><snippet>class songs(models.Model):
    ...
    num_downloads = models.IntegerField(max_length = 11)
</snippet></ROW><ROW><id>16508714</id><snippet>Singer</snippet></ROW><ROW><id>16508714</id><snippet>Song</snippet></ROW><ROW><id>16508714</id><snippet>Download</snippet></ROW><ROW><id>16508833</id><snippet>QuerySequence</snippet></ROW><ROW><id>16508833</id><snippet>get_response</snippet></ROW><ROW><id>16508833</id><snippet>query1 = """START n=node(*)
         MATCH n-[r?]-()
         WHERE ID(n) &lt;&gt; 0
         DELETE n,r
         RETURN COUNT(n)"""

print gdb.query(query1).get_response()
# something like {u'columns': [u'COUNT(n)'], u'data': [[3]]}
</snippet></ROW><ROW><id>16508841</id><snippet>from selenium import webdriver

driver = webdriver.Firefox()
elements =  driver.find_elements_by_css_selector("div.skuCol&gt;div.priceBox&gt;div.bFont)
#iterate the array and do something with the elements after this
</snippet></ROW><ROW><id>16509044</id><snippet>import itertools

def permute(f,string):
    permutation_list = []
    permutations = itertools.permutations(string)
    for item in permutations:
        permutation_list.append(''.join(item))
        for item in permutation_list:                  
            if f in item:                         # unindentation error
                print "YES"
                break
            else:
                print "NO"
                break  

if __name__ == "__main__":
    t1=input()
    for i in range(0,t1):
        a=raw_input()
        b=raw_input()
        c=a+b
        print c
        t2=input()
        f=""
        for j in range(0,t2):
            d=raw_input()
            f=f+d
        permute(f,c)
</snippet></ROW><ROW><id>16509565</id><snippet>import requests
r = requests.get('http://site.com/source.json', params={'s': 'somevalue/or other here'})
json_result = r.json()
</snippet></ROW><ROW><id>16509749</id><snippet>statusChanged(*args)</snippet></ROW><ROW><id>16509749</id><snippet>args</snippet></ROW><ROW><id>16509749</id><snippet>args[0]</snippet></ROW><ROW><id>16509756</id><snippet>validNumbers = [4, 6, 12]
repeat = True
while repeat:
    userNum = input("Enter a number ") # input returns a string
    try: # try to convert it to an integer
        userNum = int(userNum)
    except ValueError:
        pass
    if userNum in validNumbers:
        repeat = False
# do everything else
</snippet></ROW><ROW><id>16509794</id><snippet>-</snippet></ROW><ROW><id>16509794</id><snippet>x</snippet></ROW><ROW><id>16509794</id><snippet>plt.ticklabel_format(useOffset=False)</snippet></ROW><ROW><id>16509794</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.array([-142.8916729, -142.89161936, -142.89161954, -142.89162066,
              -142.89162031, -142.89162033, -142.89162049, -142.89162055,
              -142.89162054, -142.89162084, -142.89162155, -142.89162204,
              -142.89162172, -142.89162157, -142.89162164, -142.89162162,
              -142.89162163, -142.89162165, -142.89162166, -142.89162166,
              -142.89162166, -142.89162167, -142.89162167, -142.89162167,
              -142.89162167, -142.89162167, -142.89162167, -142.89162167,
              -142.89162167, -142.89162167, -142.89162167, -142.89162167,
              -142.89162152])
fig, ax = plt.subplots()
ax.plot(x)
ax.ticklabel_format(useOffset=False)
plt.show()
</snippet></ROW><ROW><id>16510013</id><snippet>import serial

with serial.Serial("/dev/ttyACM0", 9600) as ser:
    for line in ser:
        print line.rstrip('\n')
</snippet></ROW><ROW><id>16510013</id><snippet>import serial

with serial.Serial("/dev/ttyACM0", 9600) as ser:
    for line in ser:
        print line,
</snippet></ROW><ROW><id>16510097</id><snippet>index</snippet></ROW><ROW><id>16510097</id><snippet>&gt;&gt;&gt; s = 'hello'
&gt;&gt;&gt; s.index('h')
0
</snippet></ROW><ROW><id>16510381</id><snippet>limit</snippet></ROW><ROW><id>16510381</id><snippet>z</snippet></ROW><ROW><id>16510381</id><snippet>np.vectorize</snippet></ROW><ROW><id>16510381</id><snippet>&gt;&gt;&gt; h = np.vectorize(harmonic)
&gt;&gt;&gt; h(1, 1)
array(1.0)
&gt;&gt;&gt; h(2, 1)
array(1.5)
&gt;&gt;&gt; h([[1,2], [3,4]], 1)
array([[ 1.        ,  1.5       ],
       [ 1.83333333,  2.08333333]])
&gt;&gt;&gt; h([[1,2], [3,4]], 2)
array([[ 1.        ,  1.25      ],
       [ 1.36111111,  1.42361111]])
</snippet></ROW><ROW><id>16510381</id><snippet>z</snippet></ROW><ROW><id>16510381</id><snippet>&gt;&gt;&gt; h([[2,2], [2,2]], [[1,2],[3,4]])
array([[ 1.5   ,  1.25  ],
       [ 1.125 ,  1.0625]])
</snippet></ROW><ROW><id>16510454</id><snippet>cmd = (
    'xgettext -d %s -L Python %s %s --keyword=gettext_noop '
    '--keyword=gettext_lazy --keyword=ngettext_lazy:1,2 '
    '--keyword=ugettext_noop --keyword=ugettext_lazy '
    '--keyword=ungettext_lazy:1,2 --keyword=pgettext:1c,2 '
    '--keyword=npgettext:1c,2,3 --keyword=pgettext_lazy:1c,2 '
    '--keyword=npgettext_lazy:1c,2,3 --from-code UTF-8 '
    '--add-comments=Translators -o - "%s"' %
    (domain, wrap, location, work_file))
</snippet></ROW><ROW><id>16510502</id><snippet>time</snippet></ROW><ROW><id>16510502</id><snippet>from serial import Serial
import sys,time
ser = Serial('/dev/ttyACM0', 9600, 7, 'E', 1)

t1 = time.time()
while time.time() - t1 &lt;= 3:
    # Read a line and convert it from b'xxx\r\n' to xxx
    line = ser.readline().decode('utf-8')[:-2]
    print line
sys.exit()     #exit script
</snippet></ROW><ROW><id>16510502</id><snippet>time.time</snippet></ROW><ROW><id>16510502</id><snippet>&gt;&gt;&gt; time.time?
Type:       builtin_function_or_method
String Form:&lt;built-in function time&gt;
Docstring:
time() -&gt; floating point number

Return the current time in seconds since the Epoch.
Fractions of a second may be present if the system clock provides them.
</snippet></ROW><ROW><id>16510526</id><snippet>df[columnA].map(lambda v: v['Revenue'])</snippet></ROW><ROW><id>16510804</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>16510804</id><snippet>offset = current_time.utcoffset()
</snippet></ROW><ROW><id>16510804</id><snippet>import datetime as DT
import dateutil.tz as tz
import dateutil

current_time = DT.datetime.utcnow().replace(tzinfo=tz.gettz('Asia/Calcutta'))
print(current_time)
# 2013-05-12 18:33:19.368122+05:30

offset = current_time.utcoffset()
naive_time = current_time.replace(tzinfo=None)
print(naive_time)
# 2013-05-12 18:33:19.368122
print(naive_time + offset)
# 2013-05-13 00:03:19.368122
</snippet></ROW><ROW><id>16510804</id><snippet>print(naive_time - offset)
# 2013-05-12 13:03:19.368122
</snippet></ROW><ROW><id>16510804</id><snippet>astimezone</snippet></ROW><ROW><id>16510804</id><snippet>utc = dateutil.tz.tzutc()
print(current_time.astimezone(utc))
# 2013-05-12 13:03:19.368122+00:00
</snippet></ROW><ROW><id>16510804</id><snippet>dateutil</snippet></ROW><ROW><id>16510804</id><snippet>replace</snippet></ROW><ROW><id>16510804</id><snippet>import pytz
calcutta = pytz.timezone('Asia/Calcutta')
utc = pytz.utc
current_time = calcutta.localize(DT.datetime.utcnow())
print(current_time)
# 2013-05-12 18:33:19.368705+05:30
print(current_time.astimezone(utc))
# 2013-05-12 13:03:19.368705+00:00
</snippet></ROW><ROW><id>16510971</id><snippet>.u1conflict</snippet></ROW><ROW><id>16511271</id><snippet>os.listdir</snippet></ROW><ROW><id>16511271</id><snippet>for filename in os.listdir(u'/path/to/files'):
    if filename.startswith(u'\u25b6'):
        os.rename(filename, filename[2:])
</snippet></ROW><ROW><id>16511309</id><snippet>einsum</snippet></ROW><ROW><id>16511309</id><snippet>%timeit np.array([np.dot(np.dot(vecs[i, ...], mats[i, ...]), vecs[i, ...].T) for i in range(N)])
%timeit np.einsum('...i,...ij,...j-&gt;...', vecs, mats, vecs)
np.allclose(np.array([np.dot(np.dot(vecs[i, ...], mats[i, ...]), vecs[i, ...].T) for i in range(N)]),
            np.einsum('...i,...ij,...j-&gt;...', vecs, mats, vecs))
1 loops, best of 3: 640 ms per loop
100 loops, best of 3: 7.02 ms per loop
Out[45]: True
</snippet></ROW><ROW><id>16511313</id><snippet>//div[@class='filter offices']/div[@class='header']
</snippet></ROW><ROW><id>16511338</id><snippet>collections.Counter</snippet></ROW><ROW><id>16511338</id><snippet>from collections import Counter
master_wordlist = ['dog', 'cat', 'hat', 'bat', 'big']
article_a = ['dog', 'cat', 'dog','big']
article_b = ['dog', 'hat', 'big', 'big', 'big']

c_a = Counter(article_a)
c_b = Counter(article_b)

print [c_a[x] for x in master_wordlist]
print [c_b[x] for x in master_wordlist]
</snippet></ROW><ROW><id>16511338</id><snippet>[2, 1, 0, 0, 1]
[1, 0, 1, 0, 3]
</snippet></ROW><ROW><id>16511341</id><snippet>In [3]: b,c,t = symbols('b c t')

In [4]: g = 1/(1+exp(c*(b-t)))

In [5]: integrate(g,t)
Out[5]:
       ⎛ c⋅(b - t)    ⎞
    log⎝ℯ          + 1⎠
t + ───────────────────
             c

In [9]: g = 1/(1+exp(c*b-c*t))

In [11]: integrate(g, t)
Out[11]:
       ⎛ b⋅c - c⋅t    ⎞
    log⎝ℯ          + 1⎠
t + ───────────────────
             c
</snippet></ROW><ROW><id>16511522</id><snippet>Y</snippet></ROW><ROW><id>16511522</id><snippet>X</snippet></ROW><ROW><id>16511522</id><snippet>Y</snippet></ROW><ROW><id>16511522</id><snippet>X</snippet></ROW><ROW><id>16511569</id><snippet>w</snippet></ROW><ROW><id>16511569</id><snippet>r</snippet></ROW><ROW><id>16511569</id><snippet>wb</snippet></ROW><ROW><id>16511626</id><snippet>re.search()</snippet></ROW><ROW><id>16511626</id><snippet>MatchObject.end()</snippet></ROW><ROW><id>16511626</id><snippet>m = re.search('_\d{4}', x)
print x[:m.end(0)]
</snippet></ROW><ROW><id>16511626</id><snippet>split()</snippet></ROW><ROW><id>16511626</id><snippet>re.split('(?&lt;=_\d{4}).', x)
</snippet></ROW><ROW><id>16511626</id><snippet>split()</snippet></ROW><ROW><id>16511802</id><snippet>with open('txt2.txt', 'rb') as file2, open('output.txt', 'wb') as outputfile:
    output = []
    do_block = False
    for line in file2:
        line = line.rstrip()
        if not line: continue
        if line[0] == '?':
            key = line.strip().split('|')[0][1:]
            do_block = key in file1_data
        if do_block:
            output.append(line)
    outputfile.write("\n".join(output))
</snippet></ROW><ROW><id>16511970</id><snippet>adtprice  = [19.99, 49.99]
chldprice = [p * (3./4) - 7.5
             for p in adtprice]
</snippet></ROW><ROW><id>16511970</id><snippet>map</snippet></ROW><ROW><id>16511970</id><snippet>adtprice  = [19.99, 49.99]
chldprice = map(lambda p: p * (3./4) - 7.5,
                adtprice)
</snippet></ROW><ROW><id>16511970</id><snippet>adtprice  = numpy.array([19.99, 49.99])
chldprice = adtprice * (3./4) - 7.5
</snippet></ROW><ROW><id>16511985</id><snippet>logging.info("removing ...
</snippet></ROW><ROW><id>16512012</id><snippet>import os
from selenium import webdriver
from selenium.webdriver.chrome.options import Options


executable_path = "path_to_webdriver"
os.environ["webdriver.chrome.driver"] = executable_path

chrome_options = Options()
chrome_options.add_extension('path_to_extension')

driver = webdriver.Chrome(executable_path=executable_path, chrome_options=chrome_options)
driver.get("http://stackoverflow.com")
driver.quit()
</snippet></ROW><ROW><id>16512014</id><snippet>for</snippet></ROW><ROW><id>16512014</id><snippet>for cnt in cnts:
    new = cnt.split("_")
    modified = new[0] + "_" + new[1] + "_" + "001" + "_" + new[2]
</snippet></ROW><ROW><id>16512014</id><snippet>modified</snippet></ROW><ROW><id>16512014</id><snippet>for</snippet></ROW><ROW><id>16512014</id><snippet>for cnt in cnts:
    new = cnt.split("_")
    modified = new[0] + "_" + new[1] + "_" + "001" + "_" + new[2]
    os.rename(cnt, modified)
</snippet></ROW><ROW><id>16512014</id><snippet>map</snippet></ROW><ROW><id>16512014</id><snippet>def modify_cnt(cnt):
    new = cnt.split("_")
    return new[0] + "_" + new[1] + "_" + "001" + "_" + new[2]

modified_cnts = [modify_cnt(cnt) for cnt in cnts]
</snippet></ROW><ROW><id>16512123</id><snippet>easy_install gdata</snippet></ROW><ROW><id>16512341</id><snippet>8</snippet></ROW><ROW><id>16512341</id><snippet>struct.unpack('&lt;8s', bytearray(fp.read(8)))
</snippet></ROW><ROW><id>16512341</id><snippet>fp.read(8)</snippet></ROW><ROW><id>16512341</id><snippet>bytes</snippet></ROW><ROW><id>16512341</id><snippet>bytes</snippet></ROW><ROW><id>16512341</id><snippet>Data4 = fp.read(8)
</snippet></ROW><ROW><id>16512341</id><snippet>bytes</snippet></ROW><ROW><id>16512341</id><snippet>bytearray</snippet></ROW><ROW><id>16512341</id><snippet>bytes</snippet></ROW><ROW><id>16512341</id><snippet>struct.unpack</snippet></ROW><ROW><id>16512341</id><snippet>tuple</snippet></ROW><ROW><id>16512341</id><snippet>bytes</snippet></ROW><ROW><id>16512341</id><snippet>Data4 = (fp.read(8),)
</snippet></ROW><ROW><id>16512341</id><snippet>Data1[0]</snippet></ROW><ROW><id>16512341</id><snippet>Data1, Data2, Data3, Data4 = struct.unpack('&lt;LHH8s', fp.read(16))
</snippet></ROW><ROW><id>16512341</id><snippet>uuid</snippet></ROW><ROW><id>16512341</id><snippet>data = uuid.UUID(bytes_le=fp.read(16))
</snippet></ROW><ROW><id>16512341</id><snippet>uuid</snippet></ROW><ROW><id>16512341</id><snippet>struct</snippet></ROW><ROW><id>16512350</id><snippet>print</snippet></ROW><ROW><id>16512350</id><snippet>print ('Test with data: ', args, ' failed result: ', result, ' answer: ', answer)
</snippet></ROW><ROW><id>16512485</id><snippet>assert</snippet></ROW><ROW><id>16512485</id><snippet>def read_from_file(filename):
    f = open(filename, 'rU') # allow IOError if file doesn't exist / invalid permissions
</snippet></ROW><ROW><id>16512559</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; letters = [random.choice('BCDFGHJKMPQRTVWXYZ') for x in range(18)]
&gt;&gt;&gt; numbers = [random.choice('2346789') for x in range(7)]
&gt;&gt;&gt; s = letters + numbers
&gt;&gt;&gt; random.shuffle(s)
&gt;&gt;&gt; s
['J', 'P', 'F', 'M', '3', 'Q', 'K', 'P', '2', 'K', '7', 'J', 'B', 'P', 'X', 'G', 'M', 'B', 'K', '9', '9', 'B', '8', 'V', '8']
</snippet></ROW><ROW><id>16512559</id><snippet>random.shuffle(letters+numbers)</snippet></ROW><ROW><id>16512559</id><snippet>shuffle</snippet></ROW><ROW><id>16512559</id><snippet>None</snippet></ROW><ROW><id>16512559</id><snippet>&gt;&gt;&gt; ''.join(s)
'JPFM3QKP2K7JBPXGMBK99B8V8'
</snippet></ROW><ROW><id>16512595</id><snippet>return lines + pts
return time_text
</snippet></ROW><ROW><id>16512595</id><snippet>return lines + pts + [time_txt,]
</snippet></ROW><ROW><id>16512801</id><snippet>words = line.split(" ")
s = words.select {|w| words.length &gt;=4}
result = s[1...6].join(" ") + "\n" + s[6..-1].join(" ")
</snippet></ROW><ROW><id>16512855</id><snippet>RE_WORD</snippet></ROW><ROW><id>16512855</id><snippet>re.findall()</snippet></ROW><ROW><id>16512855</id><snippet>re.compile()</snippet></ROW><ROW><id>16512855</id><snippet>frozenset()</snippet></ROW><ROW><id>16512855</id><snippet>#!/usr/bin/env python2.7

import re

RE_WORD = re.compile(r'\b[a-zA-Z]+\b')

keywords = frozenset(['foo', 'bar', 'joe', 'mauer'])
listOfStrings = ['I am frustrated', 'this task is foobar', 'mauer is awesome']

for i in listOfStrings:
    for word in RE_WORD.findall(i):
        if word in keywords:
            print i
            continue
</snippet></ROW><ROW><id>16513015</id><snippet>group()</snippet></ROW><ROW><id>16513015</id><snippet>.group(1)</snippet></ROW><ROW><id>16513015</id><snippet>&gt;&gt;&gt; a = "\"abcbc\" lol"
&gt;&gt;&gt; re.search(r'\A"(.*?)"',a).group(1)
'abcbc'
</snippet></ROW><ROW><id>16513015</id><snippet>*?</snippet></ROW><ROW><id>16513015</id><snippet>*</snippet></ROW><ROW><id>16513015</id><snippet>*?</snippet></ROW><ROW><id>16513015</id><snippet>&gt;&gt;&gt; re.search(r'\A"(.*)',a).group()
'"abcbc" lol'
</snippet></ROW><ROW><id>16513243</id><snippet>&gt;&gt;&gt; df = pd.read_fwf("weekend.dat", widths=(26, 20, 9), parse_dates=[0])
&gt;&gt;&gt; df = df.fillna(method="ffill")
&gt;&gt;&gt; df
        WEEK_END_DATE    TITLE_SHORT  SALES
0 2012-02-25 00:00:00    "Bob" (EBK)      1
1 2012-02-25 00:00:00    "Bob" (EBK)      1
2 2012-03-31 00:00:00    "Bob" (EBK)      1
3 2012-03-31 00:00:00    "Bob" (EBK)      1
4 2012-03-03 00:00:00  "Sally" (EBK)      1
5 2012-03-10 00:00:00  "Sally" (EBK)      1
6 2012-03-17 00:00:00  "Sally" (EBK)      1
7 2012-03-17 00:00:00  "Sally" (EBK)      1
8 2012-04-07 00:00:00  "Sally" (EBK)      1
</snippet></ROW><ROW><id>16513243</id><snippet>&gt;&gt;&gt; g = df.groupby(["WEEK_END_DATE", "TITLE_SHORT"]).sum().reset_index()
&gt;&gt;&gt; g
        WEEK_END_DATE    TITLE_SHORT  SALES
0 2012-02-25 00:00:00    "Bob" (EBK)      2
1 2012-03-03 00:00:00  "Sally" (EBK)      1
2 2012-03-10 00:00:00  "Sally" (EBK)      1
3 2012-03-17 00:00:00  "Sally" (EBK)      2
4 2012-03-31 00:00:00    "Bob" (EBK)      2
5 2012-04-07 00:00:00  "Sally" (EBK)      1
</snippet></ROW><ROW><id>16513243</id><snippet>cov</snippet></ROW><ROW><id>16513243</id><snippet>cov</snippet></ROW><ROW><id>16513243</id><snippet>np.cov</snippet></ROW><ROW><id>16513281</id><snippet>{word: score_tweet(tweet) for tweet in tweets for word in tweet}
</snippet></ROW><ROW><id>16513286</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>16513286</id><snippet>idToActor = {a['personid']:a for a in actor_info}

for award in award_list:
    actor = idToActor[award['personid']]
    actor.setdefault('awards',[]).append(award)
</snippet></ROW><ROW><id>16513392</id><snippet>def none(*args):
    """Converts any arguments to None."""
    return None
</snippet></ROW><ROW><id>16513392</id><snippet>None</snippet></ROW><ROW><id>16513392</id><snippet>eval</snippet></ROW><ROW><id>16513392</id><snippet>ast</snippet></ROW><ROW><id>16513392</id><snippet>eval</snippet></ROW><ROW><id>16513595</id><snippet>not</snippet></ROW><ROW><id>16513595</id><snippet>var = False
if not var:
print 'learnt stuff'
</snippet></ROW><ROW><id>16513650</id><snippet>__exit__</snippet></ROW><ROW><id>16513650</id><snippet>return</snippet></ROW><ROW><id>16513650</id><snippet>class ContextTest(object):
    def __enter__(self):
        print('Enter')

    def __exit__(self, type, value, traceback):
        print('Exit')

def test():
    with ContextTest() as foo:
        print('Inside')
        return
</snippet></ROW><ROW><id>16513650</id><snippet>test()</snippet></ROW><ROW><id>16513650</id><snippet>Enter
Inside
Exit
</snippet></ROW><ROW><id>16513706</id><snippet>url(r'^/mypage.html', 'httpi.views.index'),</snippet></ROW><ROW><id>16513706</id><snippet>url(r'^mypage.html/$', 'httpi.views.index'),</snippet></ROW><ROW><id>16513706</id><snippet>http://localhost:8000/</snippet></ROW><ROW><id>16513762</id><snippet>translate</snippet></ROW><ROW><id>16513762</id><snippet>None</snippet></ROW><ROW><id>16513762</id><snippet>string2 = string1.translate(None, ";.,:")
</snippet></ROW><ROW><id>16513762</id><snippet>filter</snippet></ROW><ROW><id>16513762</id><snippet>string2 = filter(lambda x: x not in ";,.:", string1)
</snippet></ROW><ROW><id>16513810</id><snippet>.py</snippet></ROW><ROW><id>16513810</id><snippet>.pyc</snippet></ROW><ROW><id>16513810</id><snippet>NotImplementedError</snippet></ROW><ROW><id>16513810</id><snippet>.pyc</snippet></ROW><ROW><id>16513810</id><snippet>.py</snippet></ROW><ROW><id>16513810</id><snippet>Distance</snippet></ROW><ROW><id>16513810</id><snippet>GreatCircleDistance</snippet></ROW><ROW><id>16513810</id><snippet>VincentyDistance</snippet></ROW><ROW><id>16513810</id><snippet># Set the default distance formula to the most generally accurate.
distance = VincentyDistance
</snippet></ROW><ROW><id>16513826</id><snippet>python -c '
a = 4
if a &lt; 5:
    print "ye"
'
</snippet></ROW><ROW><id>16513826</id><snippet>python -c '
a = 4
if a &lt; 5:
    print '\''ye'\''
'
</snippet></ROW><ROW><id>16513935</id><snippet>import statsmodels.api as sm

data = sm.datasets.longley.load_pandas()

data.exog['constant'] = 1

results = sm.OLS(data.endog, data.exog).fit()
results.save("longley_results.pickle")

# we should probably add a generic load to the main namespace
from statsmodels.regression.linear_model import OLSResults
new_results = OLSResults.load("longley_results.pickle")

# or more generally
from statsmodels.iolib.smpickle import load_pickle
new_results = load_pickle("longley_results.pickle")
</snippet></ROW><ROW><id>16513935</id><snippet>load</snippet></ROW><ROW><id>16513935</id><snippet>new_results = sm.load('longley_results.pickle')
</snippet></ROW><ROW><id>16514143</id><snippet>food = driver.find_element_by_xpath("//a[contains(@href, 'category/food/')]/..")
hov = ActionChains(driver).move_to_element(food).move_by_offset(5, 45).perform()
# 45 is the Height of the 'FOOD' link plus 5

recipes = WebDriverWait(driver, 5).until(lambda driver: driver.find_element_by_xpath("//a[contains(@href, 'category/recipes-2/')]/.."))
recipes.click()
</snippet></ROW><ROW><id>16514143</id><snippet>driver.Navigate().GoToUrl("http://www.yumandyummer.com");
IWebElement food = driver.FindElement(By.XPath("//a[contains(@href, 'category/food/')]/.."));
new Actions(driver).MoveToElement(food).MoveByOffset(5, food.Size.Height + 5).Perform();

WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(5));
IWebElement recipes = wait.Until(ExpectedConditions.ElementExists(By.XPath("//a[contains(@href, 'category/recipes-2/')]/..")));
recipes.Click();
</snippet></ROW><ROW><id>16514307</id><snippet>map(ord,command+'\n')</snippet></ROW><ROW><id>16514307</id><snippet>bytearray(command+'\n',"UTF-8")</snippet></ROW><ROW><id>16514307</id><snippet>&gt;&gt;&gt; for b in bytearray("message\n","UTF-8"):
...     port.write(b)
</snippet></ROW><ROW><id>16514323</id><snippet>OrderedDict</snippet></ROW><ROW><id>16514323</id><snippet>from collections import OrderedDict

class EnumMeta(type):

    def __new__(mcls, cls, bases, d):
        print(d)
        return type.__new__(mcls, cls, bases, d)

    @classmethod
    def __prepare__(mcls, cls, bases):
        return OrderedDict()


class Color(metaclass=EnumMeta):
    red = 1
    green = 2
    blue = 3
</snippet></ROW><ROW><id>16514323</id><snippet>OrderedDict([('__module__', '__main__'), ('red', 1), ('green', 2), ('blue', 3)])
</snippet></ROW><ROW><id>16514483</id><snippet>wx.Frame.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>16514592</id><snippet>plt.show()</snippet></ROW><ROW><id>16514609</id><snippet>dict.setdefault</snippet></ROW><ROW><id>16514609</id><snippet>for key in list_of_possibly_new_keys:
      dict_list.setdefault(key,[]).extend([list0, list1])
</snippet></ROW><ROW><id>16514609</id><snippet>dict.setdefault</snippet></ROW><ROW><id>16514609</id><snippet>&gt;&gt;&gt; dict.setdefault?
Type:       method_descriptor
String Form:&lt;method 'setdefault' of 'dict' objects&gt;
Namespace:  Python builtin
Docstring:  D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D
</snippet></ROW><ROW><id>16514668</id><snippet>N=2</snippet></ROW><ROW><id>16514668</id><snippet>N=4</snippet></ROW><ROW><id>16514668</id><snippet>N=6</snippet></ROW><ROW><id>16514668</id><snippet>n=8</snippet></ROW><ROW><id>16514668</id><snippet>import sys

def pairings(remainder, partial = None):
    partial = partial or []

    if len(remainder) == 0:
        yield partial

    else:
        for i in xrange(1, len(remainder)):
            pair = [[remainder[0], remainder[i]]]
            r1   = remainder[1:i]
            r2   = remainder[i+1:]
            for p in pairings(r1 + r2, partial + pair):
                yield p

def main():
    n = int(sys.argv[1])
    items = list(range(n))
    for p in pairings(items):
        print p

main()
</snippet></ROW><ROW><id>16514676</id><snippet>old_min = min(input)
old_range = max(input) - old_min
</snippet></ROW><ROW><id>16514676</id><snippet>new_min = -5
new_range = 5 + 0.9999999999 - new_min
output = [int((n - old_min) / old_range * new_range + new_min) for n in input]
</snippet></ROW><ROW><id>16514714</id><snippet>cnx</snippet></ROW><ROW><id>16515164</id><snippet>range</snippet></ROW><ROW><id>16515164</id><snippet>join</snippet></ROW><ROW><id>16515164</id><snippet>for</snippet></ROW><ROW><id>16515164</id><snippet>list</snippet></ROW><ROW><id>16515164</id><snippet>In [1]: def tri(size, row = 0, col = 0):
   ...:     if row &lt; size:
   ...:         num = row + col + 1
   ...:         if num == size + 1:
   ...:             print '\n',
   ...:             tri(size, row + 1, 0)
   ...:         if num &lt;= size:
   ...:             print num, '',
   ...:             tri(size, row, col + 1)
   ...:

In [2]: tri(6)
1  2  3  4  5  6
2  3  4  5  6
3  4  5  6
4  5  6
5  6
6
</snippet></ROW><ROW><id>16515164</id><snippet>range</snippet></ROW><ROW><id>16515164</id><snippet>def tri2(size):
    row = map(str, range(1, size + 1))
    print '\n'.join(map(lambda n: ' '.join(row[n:]), range(size)))
</snippet></ROW><ROW><id>16515211</id><snippet>float(line[1])</snippet></ROW><ROW><id>16515211</id><snippet>line[1]</snippet></ROW><ROW><id>16515211</id><snippet>connect</snippet></ROW><ROW><id>16515220</id><snippet>__dict__</snippet></ROW><ROW><id>16515220</id><snippet>type.__new__</snippet></ROW><ROW><id>16515220</id><snippet>__dict__</snippet></ROW><ROW><id>16515220</id><snippet>__slots__</snippet></ROW><ROW><id>16515220</id><snippet>__dict__</snippet></ROW><ROW><id>16515220</id><snippet>__module__</snippet></ROW><ROW><id>16515220</id><snippet>inst.__module__ is cls.__module__</snippet></ROW><ROW><id>16515220</id><snippet>inst</snippet></ROW><ROW><id>16515220</id><snippet>cls</snippet></ROW><ROW><id>16515220</id><snippet>cls.__module__</snippet></ROW><ROW><id>16515220</id><snippet>inst.__module__</snippet></ROW><ROW><id>16515220</id><snippet>inst.__module__</snippet></ROW><ROW><id>16515220</id><snippet>cls.__module__</snippet></ROW><ROW><id>16515220</id><snippet>__weakref__</snippet></ROW><ROW><id>16515220</id><snippet>object</snippet></ROW><ROW><id>16515220</id><snippet>int</snippet></ROW><ROW><id>16515220</id><snippet>list</snippet></ROW><ROW><id>16515220</id><snippet>set</snippet></ROW><ROW><id>16515220</id><snippet>tuple</snippet></ROW><ROW><id>16515220</id><snippet>__weakref__</snippet></ROW><ROW><id>16515220</id><snippet>class C:</snippet></ROW><ROW><id>16515220</id><snippet>class C(object):</snippet></ROW><ROW><id>16515220</id><snippet>class C:</snippet></ROW><ROW><id>16515220</id><snippet>__weakref__</snippet></ROW><ROW><id>16515220</id><snippet>object</snippet></ROW><ROW><id>16515399</id><snippet>import os</snippet></ROW><ROW><id>16515399</id><snippet>import os
from random import Random

class TestData(object, Random):

    def FetchDataFromFile(self, filename):
        """ Open the file as read only """
        myfile = open(os.path.join(os.getcwd(),filename), 'r')
        """ read the information in the file """
        lines = myfile.read()
        ''' Remove the header as this will not be used '''
        header = lines[0] 
        lines.remove(header)
        return lines
</snippet></ROW><ROW><id>16515399</id><snippet>def FetchDataFromFile(self, filename):
        """ Open the file as read only """
        return list(open(os.path.join(os.getcwd(),filename), 'r'))[1:]
</snippet></ROW><ROW><id>16515424</id><snippet>compound</snippet></ROW><ROW><id>16515424</id><snippet>tab1 = note.add_tab(text = "Tab One",image=scheduledimage, compound=TOP)
</snippet></ROW><ROW><id>16515424</id><snippet>ttk.Notebook</snippet></ROW><ROW><id>16515424</id><snippet>from Tkinter import *
from ttk import *

root = Tk()
scheduledimage=PhotoImage(...)
note = Notebook(root)

tab1 = Frame(note)
tab2 = Frame(note)
tab3 = Frame(note)
Button(tab1, text='Exit', command=root.destroy).pack(padx=100, pady=100)

note.add(tab1, text = "Tab One",image=scheduledimage, compound=TOP)
note.add(tab2, text = "Tab Two")
note.add(tab3, text = "Tab Three")
note.pack()
root.mainloop()
exit()
</snippet></ROW><ROW><id>16515763</id><snippet>len(str)</snippet></ROW><ROW><id>16515763</id><snippet>In [1]: ls = ['foo','bar','foobar','barbar']

In [2]: sorted(ls, key=lambda s: (len(s), s))
Out[2]: ['bar', 'foo', 'barbar', 'foobar']
</snippet></ROW><ROW><id>16516008</id><snippet>setUp</snippet></ROW><ROW><id>16516119</id><snippet>xlim(0-barwidth,len(number)-0.5)
</snippet></ROW><ROW><id>16516127</id><snippet>import re
sub = '(\w*)\W*(\w*)\W*(name)\W*(\w*)\W*(\w*)'
str1 = '''My name is Avi. Name identifies who you are. It is important to have a name starting with the letter A.'''
for i in re.findall(sub, str1, re.I):
    print " ".join([x for x in i if x != ""])
</snippet></ROW><ROW><id>16516127</id><snippet>My name is Avi
Name identifies who
have a name starting with
</snippet></ROW><ROW><id>16516127</id><snippet>sub = '\w*\W*\w*\W*name\W*\w*\W*\w*'
for i in re.findall(sub, str1, re.I):
    i=i.strip(" .")
    print i
</snippet></ROW><ROW><id>16516130</id><snippet>re.sub(r"\={3}([^\$]+?)\={3}", r"&lt;b&gt; \\1 &lt;/b&gt;", z, re.M)
</snippet></ROW><ROW><id>16516130</id><snippet>*?, +?, ?? The '*', '+', and '?' qualifiers are all greedy; they match as much text as 
      possible. Sometimes this behaviour isn’t desired; if the RE &lt;.*&gt; is matched against 
      '&lt;H1&gt;title&lt;/H1&gt;', it will match the entire string, and not just '&lt;H1&gt;'. Adding '?' after the
       qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as 
      possible will be matched. Using .*? in the previous expression will match only '&lt;H1&gt;'.</snippet></ROW><ROW><id>16516334</id><snippet>'w'</snippet></ROW><ROW><id>16516334</id><snippet>r+</snippet></ROW><ROW><id>16516334</id><snippet>target = open(filename, 'r+')
</snippet></ROW><ROW><id>16516334</id><snippet>with</snippet></ROW><ROW><id>16516334</id><snippet>option = raw_input('What to do? (r/d/w)')

with  open(filename, "r+")  as target:
    if option == 'r':
        print(target.read())

    elif option == 'd':
        target.truncate()

    elif option == 'w':
        print('Input new content')
        content = raw_input('&gt;')
        target.write(content)
</snippet></ROW><ROW><id>16516334</id><snippet>'r+'</snippet></ROW><ROW><id>16516334</id><snippet>option = raw_input('What to do? (r/d/w)')

if option == 'r':
    with open(filename,option) as target:
        print(target.read())

elif option == 'd':
    #for read only files use Exception handling to catch the errors
    with open(filename,'w') as target:
        pass

elif option == 'w':
    #for read only files use Exception handling to catch the errors
    print('Input new content')
    content = raw_input('&gt;')
    with open(filename,option) as target:
        target.write(content)
</snippet></ROW><ROW><id>16516653</id><snippet>str.replace</snippet></ROW><ROW><id>16516653</id><snippet>str.join()</snippet></ROW><ROW><id>16516653</id><snippet>&gt;&gt;&gt; segmenter = {'foobar':'foo bar', 'withoutspace':'without space', 'barbar': 'bar bar'}
&gt;&gt;&gt; sentence = "this is a foobar in a barbar withoutspace"

&gt;&gt;&gt; " ".join( [ segmenter.get(word,word) for word in sentence.split()] )
'this is a foo bar in a bar bar without space'
</snippet></ROW><ROW><id>16516653</id><snippet>str.replace</snippet></ROW><ROW><id>16516653</id><snippet>"abarbarb"</snippet></ROW><ROW><id>16516653</id><snippet>"abar barb"</snippet></ROW><ROW><id>16516802</id><snippet>from gevent import monkey
monkey.patch_all(thread=False)
</snippet></ROW><ROW><id>16516808</id><snippet>Joe</snippet></ROW><ROW><id>16516808</id><snippet>"Hello"</snippet></ROW><ROW><id>16516808</id><snippet>Joe</snippet></ROW><ROW><id>16516808</id><snippet>NameError</snippet></ROW><ROW><id>16516808</id><snippet>username = "Joe"
</snippet></ROW><ROW><id>16516864</id><snippet>workers_list.append({'worker_id': record.id, 'start_date': time.strftime('%Y-%m-%d'), 'selected':True})
</snippet></ROW><ROW><id>16517273</id><snippet>datetime64[s]</snippet></ROW><ROW><id>16517273</id><snippet>np.array([1368431149, 1368431150]).astype('datetime64[s]')
# array([2013-05-13 07:45:49, 2013-05-13 07:45:50], dtype=datetime64[s])
</snippet></ROW><ROW><id>16517307</id><snippet>FileField</snippet></ROW><ROW><id>16517695</id><snippet>import cv2
import cv2.cv as cv
import getopt, sys

def detect(img, cascade):
    for scale in [float(i)/10 for i in range(11, 15)]:
        for neighbors in range(2,5):
            rects = cascade.detectMultiScale(img, scaleFactor=scale, minNeighbors=neighbors,
                                             minSize=(20, 20), flags=cv2.cv.CV_HAAR_SCALE_IMAGE)

            print 'scale: %s, neighbors: %s, len rects: %d' % (scale, neighbors, len(rects))


def find_face_from_img(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    gray = cv2.equalizeHist(gray)
    rects = detect(gray, cascade)


if __name__ == '__main__':

    args, video_src = getopt.getopt(sys.argv[1:], '', ['cascade=', 'nested-cascade='])
    try: video_src = video_src[0]
    except: video_src = 0
    args = dict(args)


    cascade_fn = args.get('--cascade', "cascades/haarcascade_frontalface_alt.xml")
    cascade = cv2.CascadeClassifier(cascade_fn)

    c=cv2.VideoCapture(0)
    while(1):
        ret, frame = c.read()
        rects = find_face_from_img(frame)
        if 0xFF &amp; cv2.waitKey(5) == 27:
                break
</snippet></ROW><ROW><id>16517695</id><snippet>scale: 1.2, neighbors: 2, len rects: 1
scale: 1.2, neighbors: 3, len rects: 1
scale: 1.2, neighbors: 4, len rects: 1
scale: 1.3, neighbors: 2, len rects: 1
scale: 1.3, neighbors: 3, len rects: 1
scale: 1.3, neighbors: 4, len rects: 0
scale: 1.4, neighbors: 2, len rects: 1
scale: 1.4, neighbors: 3, len rects: 0
scale: 1.4, neighbors: 4, len rects: 0
scale: 1.1, neighbors: 2, len rects: 1
scale: 1.1, neighbors: 3, len rects: 1
scale: 1.1, neighbors: 4, len rects: 1
scale: 1.2, neighbors: 2, len rects: 1
scale: 1.2, neighbors: 3, len rects: 1
scale: 1.2, neighbors: 4, len rects: 1
scale: 1.3, neighbors: 2, len rects: 1
</snippet></ROW><ROW><id>16517830</id><snippet>class childclass(parentclass):
    def somefunction(self):
        with patch('somemodule.parentclass', childclass):
            super(childclass, self).somefunction()
</snippet></ROW><ROW><id>16517869</id><snippet>__eq__</snippet></ROW><ROW><id>16517869</id><snippet>In [18]: class A(object):
    ...:     def __init__(self, n):
    ...:         self.n = n
    ...:    

In [19]: class B(object):
    ...:     def __init__(self, n):
    ...:         self.n = n
    ...:     def __eq__(self, other):
    ...:         return self.n == other
    ...:     

In [20]: a = A(1) 

In [21]: b = B(1)

In [22]: a in [A(n) for n in range(10)]
Out[22]: False

In [23]: b in [B(n) for n in range(10)]
Out[23]: True

In [24]: b in [B(n) for n in range(10, 20)]
Out[24]: False
</snippet></ROW><ROW><id>16517899</id><snippet>missing = set(required) - some_dict.viewkeys()
optional_present = some_dict.viewkeys() &amp; optional
</snippet></ROW><ROW><id>16517899</id><snippet>required</snippet></ROW><ROW><id>16517899</id><snippet>optional</snippet></ROW><ROW><id>16517899</id><snippet>missing</snippet></ROW><ROW><id>16517899</id><snippet>required</snippet></ROW><ROW><id>16517899</id><snippet>&amp;</snippet></ROW><ROW><id>16517899</id><snippet>optional_present</snippet></ROW><ROW><id>16517899</id><snippet>optional</snippet></ROW><ROW><id>16517899</id><snippet>key in some_dict</snippet></ROW><ROW><id>16517899</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>16517899</id><snippet>.keys()</snippet></ROW><ROW><id>16517899</id><snippet>.values()</snippet></ROW><ROW><id>16517899</id><snippet>.items()</snippet></ROW><ROW><id>16517899</id><snippet>.view*()</snippet></ROW><ROW><id>16518134</id><snippet>list1</snippet></ROW><ROW><id>16518134</id><snippet>set1 = set(list1)
newlist = [key for key, value in dict_a.iteritems() if value.viewkeys() &amp; set1]
</snippet></ROW><ROW><id>16518134</id><snippet>value.keys()</snippet></ROW><ROW><id>16518134</id><snippet>dict_a.items</snippet></ROW><ROW><id>16518134</id><snippet>&gt;&gt;&gt; dict_a = {'one': {'bird':2, 'tree':6, 'sky':1, 'TOTAL':9},
...           'two': {'apple':3, 'sky':1, 'TOTAL':4},
...           'three': {'tree':6, 'TOTAL':6},
...           'four': {'nada':1, 'TOTAL':1},
...           'five': {'orange':2, 'bird':3, 'TOTAL':5}
...           }
&gt;&gt;&gt; set1 = {'bird','tree'}
&gt;&gt;&gt; [key for key, value in dict_a.iteritems() if value.viewkeys() &amp; set1]
['three', 'five', 'one']
</snippet></ROW><ROW><id>16518134</id><snippet>value.viewkeys() &amp; list1</snippet></ROW><ROW><id>16518856</id><snippet>name, ext = os.path.splitext(path)
ext = ext[1:]
</snippet></ROW><ROW><id>16518856</id><snippet>def extension(path):
    name, ext = os.path.splitext(path)
    return ext[1:]
</snippet></ROW><ROW><id>16518856</id><snippet>&gt;&gt;&gt; os.path.splitext('ham.')
('ham', '.')
</snippet></ROW><ROW><id>16518856</id><snippet>ham</snippet></ROW><ROW><id>16518856</id><snippet>splitext</snippet></ROW><ROW><id>16518992</id><snippet>$.ajaxSetup({
    beforeSend: function(xhr, settings) {
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie &amp;&amp; document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i &lt; cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
        if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {
            // Only send the token to relative URLs i.e. locally.
            xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));
        }
    }
});
</snippet></ROW><ROW><id>16519256</id><snippet>email.header</snippet></ROW><ROW><id>16519256</id><snippet>&gt;&gt;&gt; subject = '''\
... =?UTF-8?B?15bXkNeqINeR15PXmden15Qg15HXodeZ16HXmdeqINeR15vXk9eZINec15TXkdeZ158g?=
...  =?UTF-8?B?157Xk9eV16Ig15TXp9eZ15PXldeTINeU15bXlCDXnNeQINei15XXkdeTINeQ150g15DXoNeZINeo15U=?=
...  =?UTF-8?B?16nXnSDXlNeo15HXlA==?='''
&gt;&gt;&gt; from email.header import decode_header
&gt;&gt;&gt; for line in subject.splitlines():
...     bytes, encoding = decode_header(line)[0]
...     print bytes.decode(encoding)
... 
זאת בדיקה בסיסית בכדי להבין 
מדוע הקידוד הזה לא עובד אם אני רו
שם הרבה
</snippet></ROW><ROW><id>16519341</id><snippet>np.savetxt(r"C:\ASCII\%s.txt" % count,s)
</snippet></ROW><ROW><id>16519459</id><snippet>collections.Counter</snippet></ROW><ROW><id>16519459</id><snippet>from collections import Counter, defaultdict

hello = ["hello","hi","hello","hello"]
counter= Counter(hello)
bye = defaultdict(int)
print"&lt;table&gt;"
for word in counter.keys():
    print "&lt;tr&gt;"
    print "&lt;td&gt;" + str(word) + ":" + str(counter[word]) + "&lt;/td&gt;"
    print "&lt;/tr&gt;"
    bye[word] = counter[word]
print"&lt;/table&gt;"
</snippet></ROW><ROW><id>16519459</id><snippet>&gt;&gt;&gt; &lt;table&gt;
&gt;&gt;&gt; &lt;tr&gt;
&gt;&gt;&gt; &lt;td&gt;hi:1&lt;/td&gt;
&gt;&gt;&gt; &lt;/tr&gt;
&gt;&gt;&gt; &lt;tr&gt;
&gt;&gt;&gt; &lt;td&gt;hello:3&lt;/td&gt;
&gt;&gt;&gt; &lt;/tr&gt;
&gt;&gt;&gt; &lt;/table&gt;
</snippet></ROW><ROW><id>16519531</id><snippet>psutil.get_pid_list()</snippet></ROW><ROW><id>16519531</id><snippet>process = psutil.Process(pid)</snippet></ROW><ROW><id>16519531</id><snippet>process.kill</snippet></ROW><ROW><id>16519531</id><snippet>process.terminate()</snippet></ROW><ROW><id>16519531</id><snippet>pip</snippet></ROW><ROW><id>16519798</id><snippet>for row in range(posR, posR+3):
    for col in range (posC, posC+3):
        if array[row::][col::] in possible:
            possible.remove(array[row][col])
</snippet></ROW><ROW><id>16519798</id><snippet>block = ((posR/3)*3,(posC/3)*3) # get the top left cell of the 3x3 block
for row in range(block[0], block[0]+3):
    for col in range (block[1], block[1]+3):
        if array[row][col] in possible:
            possible.remove(array[row][col])
</snippet></ROW><ROW><id>16519798</id><snippet>for row in range(9):
    for col in range (9):
        if grid[row][col] == '0':
            r = row
            c = col
            newV = solveOne (grid,r,c)
            grid[row][col] = newV
</snippet></ROW><ROW><id>16520099</id><snippet>\s*$</snippet></ROW><ROW><id>16520099</id><snippet>(?:\s+|$)</snippet></ROW><ROW><id>16520099</id><snippet>(?:)</snippet></ROW><ROW><id>16520152</id><snippet>re.finditer()</snippet></ROW><ROW><id>16520152</id><snippet>[match.start() for match in re.finditer(re.escape(s2), string)]
</snippet></ROW><ROW><id>16520152</id><snippet>re.finditer()</snippet></ROW><ROW><id>16520152</id><snippet>re.MatchObject.start()</snippet></ROW><ROW><id>16520152</id><snippet>re.escape()</snippet></ROW><ROW><id>16520152</id><snippet>s2</snippet></ROW><ROW><id>16520152</id><snippet>str.find()</snippet></ROW><ROW><id>16520152</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = """
... for i in x:
...     for y in z[i]:
...         print y
... """
&gt;&gt;&gt; s2 = "for"
&gt;&gt;&gt; [match.start() for match in re.finditer(re.escape(s2), string)]
[1, 17]
</snippet></ROW><ROW><id>16520176</id><snippet>zip()</snippet></ROW><ROW><id>16520176</id><snippet>&gt;&gt;&gt; list1 = ['hello', 'goodbye', 'no', 'yes', 'if you say so']
&gt;&gt;&gt; list2 = ['a', 'b', 'c', 'd; e; f', 'g']
&gt;&gt;&gt; dict(zip(list1,list2))
{'if you say so': 'g', 'yes': 'd; e; f', 'hello': 'a', 'goodbye': 'b', 'no': 'c'}
</snippet></ROW><ROW><id>16520176</id><snippet>'yes' 'if you say so'</snippet></ROW><ROW><id>16520176</id><snippet>,</snippet></ROW><ROW><id>16520176</id><snippet>&gt;&gt;&gt; 'yes' 'if you say so'
'yesif you say so'
</snippet></ROW><ROW><id>16520176</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>16520176</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; OrderedDict(zip(list1,list2))

OrderedDict([('hello', 'a'), ('goodbye', 'b'), ('no', 'c'), ('yes', 'd; e; f'), ('if you say so', 'g')])
</snippet></ROW><ROW><id>16520240</id><snippet>import logging
import time
import pymongo
import hashlib
import random

DEBUG_MODE = True

class logger(object):

        def __new__(cls, *args, **kwargs):
                if DEBUG_MODE:
                        return object.__new__(cls, *args, **kwargs)
                else:
                        return args[0]

        def __init__(self, foo):
                self.foo = foo
                logging.basicConfig(filename='exceptions.log', format='%(levelname)s %(asctime)s: %(message)s')
                self.log = logging.getLogger(__name__)

        def __call__(self, *args, **kwargs):
                def _log():
                        try:
                                t = time.time()
                                func_hash = self._make_hash(t)
                                col = self._make_db_connection()
                                log_record = {'func_name':self.foo.__name__, 'start_time':t, 'func_hash':func_hash}
                                col.insert(log_record)
                                res = self.foo(*args, **kwargs)
                                log_record = {'func_name':self.foo.__name__, 'exc_time':round(time.time() - t,4), 'end_time':time.time(),'func_hash':func_hash}
                                col.insert(log_record)
                                return res
                        except Exception as e:
                                self.log.error(e)
                return _log()

        def _make_db_connection(self):
                connection = pymongo.Connection()
                db = connection.logger
                collection = db.log
                return collection

        def _make_hash(self, t):
                m = hashlib.md5()
                m.update(str(t)+str(random.randrange(1,10)))
                return m.hexdigest()
</snippet></ROW><ROW><id>16520529</id><snippet>print dir(request.user)
</snippet></ROW><ROW><id>16520529</id><snippet>print request.user.__dict__
</snippet></ROW><ROW><id>16520529</id><snippet>__dict__</snippet></ROW><ROW><id>16520529</id><snippet>print ["{0}: {1}".format(field.name, getattr(request.user, field.name)) for field in request.user._meta.fields]
</snippet></ROW><ROW><id>16520529</id><snippet>print [attr for attr in dir(request.user) if callable(attr)]
</snippet></ROW><ROW><id>16520673</id><snippet>for i in range(len(L))):
    L[i]+='.txt'
</snippet></ROW><ROW><id>16520673</id><snippet>L = [s+'.txt' for s in L]
</snippet></ROW><ROW><id>16520673</id><snippet>&gt;&gt;&gt; L=['a', 'b', 'c']
&gt;&gt;&gt; def addtxt():
...     print(L)
...     L = [s+'.txt' for s in L]
...
&gt;&gt;&gt; addtxt()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in addtxt
UnboundLocalError: local variable 'L' referenced before assignment
</snippet></ROW><ROW><id>16520673</id><snippet>global</snippet></ROW><ROW><id>16520673</id><snippet>nonlocal</snippet></ROW><ROW><id>16520673</id><snippet>L[:] = [s+'.txt' for s in L]
</snippet></ROW><ROW><id>16520673</id><snippet>[:]</snippet></ROW><ROW><id>16520972</id><snippet>$in</snippet></ROW><ROW><id>16520972</id><snippet>$and</snippet></ROW><ROW><id>16520972</id><snippet>conditions['tag.slug'] = { '$in': tags }
</snippet></ROW><ROW><id>16521063</id><snippet>server_((?!secure)[a-zA-Z]+)</snippet></ROW><ROW><id>16521349</id><snippet>y</snippet></ROW><ROW><id>16521349</id><snippet>z</snippet></ROW><ROW><id>16521349</id><snippet>In [9]: y.nonzero()
Out[9]: (array([2, 4]), array([1, 3]))

In [10]: z.nonzero()
Out[10]: (array([0, 2]), array([3, 2]))
</snippet></ROW><ROW><id>16521349</id><snippet>In [11]: y[y.nonzero()]
Out[11]: array([2891, 2891])
</snippet></ROW><ROW><id>16521349</id><snippet>x</snippet></ROW><ROW><id>16521349</id><snippet>In [13]: x[y.nonzero()] = y[y.nonzero()]
</snippet></ROW><ROW><id>16521349</id><snippet>import numpy as np
x = np.array([[ 1,  1,  2,  0,  4],
              [ 5,  6,  7,  8,  9],
              [10,  0,  0, 13, 14],
              [15, 16, 17, 18, 19],
              [20, 21, 22,  0, 24],
              [25, 26, 27, 28, 29],
              [30, 31, 32, 33, 34],
              [35, 36, 37, 38, 39],
              [40, 41, 42, 43, 44],
              [45, 46, 47, 48, 49]])

y = np.array([[   0,    0,    0,    0],
              [   0,    0,    0,    0],
              [   0, 2891,    0,    0],
              [   0,    0,    0,    0],
              [   0,    0,    0, 2891]])

z = np.array([[  0,   0,   0, 643],
              [  0,   0,   0,   0],
              [  0,   0, 643,   0],
              [  0,   0,   0,   0],
              [  0,   0,   0,   0]])

x[y.nonzero()] = y[y.nonzero()]
x[z.nonzero()] = z[z.nonzero()]
print(x)
</snippet></ROW><ROW><id>16521349</id><snippet>[[   1    1    2  643    4]
 [   5    6    7    8    9]
 [  10 2891  643   13   14]
 [  15   16   17   18   19]
 [  20   21   22 2891   24]
 [  25   26   27   28   29]
 [  30   31   32   33   34]
 [  35   36   37   38   39]
 [  40   41   42   43   44]
 [  45   46   47   48   49]]
</snippet></ROW><ROW><id>16521375</id><snippet>{% if field.type =='street' %}
</snippet></ROW><ROW><id>16521375</id><snippet>{% if field.type == 'street' %}
</snippet></ROW><ROW><id>16521375</id><snippet>ifequal</snippet></ROW><ROW><id>16521375</id><snippet>{% ifequal field.type 'street' %}
    Hello world.
{% else %}
    Apocalypse
{% endifequal %}
</snippet></ROW><ROW><id>16521889</id><snippet>input()</snippet></ROW><ROW><id>16521889</id><snippet>int</snippet></ROW><ROW><id>16521889</id><snippet>userLength = int(input ("Please tell us how long word you want to play : "))
</snippet></ROW><ROW><id>16521889</id><snippet>readlines</snippet></ROW><ROW><id>16521889</id><snippet>with</snippet></ROW><ROW><id>16521889</id><snippet>with open("test.txt") as f:
    for line in f:         #fetches  a single line each time
       line = line.strip() #remove newline or other whitespace charcters
       wl = len(line)
       print (wl)
       if wl == userLength:
         words = line
         print (words)
</snippet></ROW><ROW><id>16522017</id><snippet>with open('spiders.txt') as fh:
    words = set(re.split(r'[ \n\r]+', fh.read())) # set of searched words

with open('access.log.13') as file_in, \
     open('hits.txt', 'w') as file_out:
    for line in file_in:
        if any(word in line for word in words): # look for any of the words
            file_out.write(line)
</snippet></ROW><ROW><id>16522017</id><snippet>with open(...) as file_in, open (...) as file_out: # same as previously
    good_lines = (line for line in file_in if any(word in line for word in words))
    for good_line in good_lines:
        file_out.write(good_line)
</snippet></ROW><ROW><id>16522027</id><snippet>winfo_rgb</snippet></ROW><ROW><id>16522194</id><snippet>if (not a or not b or not c) and (a or b or c):
</snippet></ROW><ROW><id>16522194</id><snippet>if (a or b or c) and not (a and b and c):
</snippet></ROW><ROW><id>16522234</id><snippet>PyQt</snippet></ROW><ROW><id>16522234</id><snippet>WebView</snippet></ROW><ROW><id>16522234</id><snippet>spidermonkey</snippet></ROW><ROW><id>16522234</id><snippet>window</snippet></ROW><ROW><id>16522234</id><snippet>document</snippet></ROW><ROW><id>16522369</id><snippet>str.join()</snippet></ROW><ROW><id>16522369</id><snippet>s = ''.join(l)
</snippet></ROW><ROW><id>16522369</id><snippet>l</snippet></ROW><ROW><id>16522369</id><snippet>&gt;&gt;&gt; l=['a', 'b', 'c']
&gt;&gt;&gt; ''.join(l)
'abc'
&gt;&gt;&gt; '-'.join(l)
'a-b-c'
&gt;&gt;&gt; ' - spam ham and eggs - '.join(l)
'a - spam ham and eggs - b - spam ham and eggs - c'
</snippet></ROW><ROW><id>16522369</id><snippet>str.join()</snippet></ROW><ROW><id>16522369</id><snippet>str.join()</snippet></ROW><ROW><id>16522369</id><snippet>str.join()</snippet></ROW><ROW><id>16522369</id><snippet>slower_gen_expr = ' - '.join('{}: {}'.format(key, value) for key, value in some_dict)
faster_list_comp = ' - '.join(['{}: {}'.format(key, value) for key, value in some_dict])
</snippet></ROW><ROW><id>16522374</id><snippet>authheader =  'Basic ' + base64.encodestring("restuser:restbpm")
</snippet></ROW><ROW><id>16522374</id><snippet>[:-1]</snippet></ROW><ROW><id>16522374</id><snippet>import base64
authheader =  'Basic ' + base64.encodestring("restuser:restbpm")
authheader
'Basic cmVzdHVzZXI6cmVzdGJwbQ==\n'
authheader =  'Basic ' + base64.encodestring("restuser:restbpm")[:-1]
authheader
'Basic cmVzdHVzZXI6cmVzdGJwbQ=='
</snippet></ROW><ROW><id>16522374</id><snippet>\n</snippet></ROW><ROW><id>16522374</id><snippet>[:-1]</snippet></ROW><ROW><id>16522530</id><snippet>import re

value = "123456.33"

regex = re.search("^(\d\d\d)(\d\d\d)(?:\.(\d\d)){0,1}$", value)

if regex:
    print regex.group(1)
    print regex.group(2)
    if regex.group(3):
        print regex.group(3)
    else:
        print "3rd group not found"
else:
    print "value don't match regex"
</snippet></ROW><ROW><id>16522626</id><snippet>import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>16522626</id><snippet>plt.show()
</snippet></ROW><ROW><id>16522714</id><snippet>&lt;field name="user_id" domain="[('is_user', '=', True)]"/&gt;</snippet></ROW><ROW><id>16522714</id><snippet>fields_view_get</snippet></ROW><ROW><id>16522973</id><snippet>class Country(db.Model):
    name = db.StringProperty()
    count = db.IntegerProperty()
</snippet></ROW><ROW><id>16522973</id><snippet>Country</snippet></ROW><ROW><id>16522973</id><snippet>count</snippet></ROW><ROW><id>16522973</id><snippet>all_nodes.filter(...)</snippet></ROW><ROW><id>16522973</id><snippet>n</snippet></ROW><ROW><id>16522973</id><snippet>all_nodes</snippet></ROW><ROW><id>16522973</id><snippet>from collections import defaultdict

country_nodes = defaultdict(int)
for n in Nodes.query():
    country_nodes[n.country] += 1
</snippet></ROW><ROW><id>16522980</id><snippet>boost::python::object</snippet></ROW><ROW><id>16522980</id><snippet>attr</snippet></ROW><ROW><id>16522980</id><snippet>aMethod.func_code.co_varnames
</snippet></ROW><ROW><id>16522980</id><snippet>aMethod.attr("func_code").attr("co_varnames")
</snippet></ROW><ROW><id>16522980</id><snippet>#include &lt;iostream&gt;
#include &lt;vector&gt;

#include &lt;boost/foreach.hpp&gt;
#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/stl_iterator.hpp&gt;

void print_varnames(boost::python::object fn)
{
  namespace python = boost::python;
  typedef python::stl_input_iterator&lt;std::string&gt; iterator;

  std::vector&lt;std::string&gt; var_names(
    iterator(fn.attr("func_code").attr("co_varnames")),
    iterator());

  BOOST_FOREACH(const std::string&amp; varname, var_names)
    std::cout &lt;&lt; varname &lt;&lt; std::endl;
}

BOOST_PYTHON_MODULE(example)
{
  def("print_varnames", &amp;print_varnames);
}
</snippet></ROW><ROW><id>16522980</id><snippet>&gt;&gt;&gt; def test1(a,b,c): pass
... 
&gt;&gt;&gt; def test2(spam, eggs): pass
... 
&gt;&gt;&gt; def test3(): pass
... 
&gt;&gt;&gt; from example import print_varnames
&gt;&gt;&gt; print_varnames(test1)
a
b
c
&gt;&gt;&gt; print_varnames(test2)
spam
eggs
&gt;&gt;&gt; print_varnames(test3)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16523148</id><snippet>&gt;&gt;&gt; cursor = connection.cursor().execute(sql)
&gt;&gt;&gt; columns = [column[0] for column in cursor.description]
&gt;&gt;&gt; print columns
['name', 'create_date']
&gt;&gt;&gt; results = []
&gt;&gt;&gt; for row in cursor.fetchall():
...     results.append(dict(zip(columns, row)))
...
&gt;&gt;&gt; print results
[{'create_date': datetime.datetime(2003, 4, 8, 9, 13, 36, 390000), 'name': u'master'},   
 {'create_date': datetime.datetime(2013, 1, 30, 12, 31, 40, 340000), 'name': u'tempdb'},
 {'create_date': datetime.datetime(2003, 4, 8, 9, 13, 36, 390000), 'name': u'model'},     
 {'create_date': datetime.datetime(2010, 4, 2, 17, 35, 8, 970000), 'name': u'msdb'}]
</snippet></ROW><ROW><id>16523245</id><snippet>#!/bin/env python
import csv
from itertools import islice

total = count = 0

with open('3111111a.csv', newline='') as f:
    reader = csv.reader(f)
    # `isslice` will skip any header/title row.
    # Generates a list of integers from the fourth CSV value
    numbers = (int(row[4]) for row in islice(reader, 1, None))
    # Generates another list of values that are &gt;= 337
    gt337 = [i for i in numbers if i &gt;= 337]

# Sums all the numbers in our list then divides by the number to get the average
print (sum(gt337)/len(gt337))
</snippet></ROW><ROW><id>16523245</id><snippet>with</snippet></ROW><ROW><id>16523245</id><snippet>Python</snippet></ROW><ROW><id>16523614</id><snippet>matshow</snippet></ROW><ROW><id>16523614</id><snippet>imshow</snippet></ROW><ROW><id>16523614</id><snippet>import pylab as plt
a = [[1,0,1],[1,1,1]]
plt.matshow(a)
plt.show()
</snippet></ROW><ROW><id>16523614</id><snippet>interpolation</snippet></ROW><ROW><id>16523620</id><snippet>#Also include Regular Expression module, re
import os,sys,re

#Set root to the folder you want to check
folder = "%PATH_TO_YOUR_FOLDER%"

#Walk through the folder checking all files
for root, dirs, filenames in os.walk(folder):
    #For each file in the folder
    for filename in filenames:
        #Create blank strink for servername
        servername = ''
        #Get the full path to the file
        fullpath=os.path.join(root,filename)
        #Open the file as read only in tempfile
        with open (fullpath, "r") as tempfile:
            #Iterate through the lines in the file
            for line in tempfile.readlines():
                #Check if this line contains "Server: XXXXX"
                serverline= re.findall("Server: [a-zA-Z0-9]+", line)
                #If the line was found
                if serverline:
                    #Split the line around ": " and take second part as server name
                    sname = serverline[0].split(": ")
                    #Set servername variable so isn't lost outside scope of with block
                    servername = sname[1]
        #If a servername was found for that text file
        if len(servername) &gt; 0:
            #Rename the file
            os.rename(fullpath,root+'\\'+servername+filename)
</snippet></ROW><ROW><id>16523652</id><snippet>def t_format(tt):
    sec = tt / 10
    return '%02d:%02d.%01d' % (sec / 60, sec % 60, tt % 10)
</snippet></ROW><ROW><id>16523652</id><snippet>TICK += 1
to_sleep = (start_time + TICK / 10.0) - time.time()
if to_sleep &gt; 0:
    time.sleep(to_sleep)
</snippet></ROW><ROW><id>16523813</id><snippet>__builtins__.list</snippet></ROW><ROW><id>16523813</id><snippet>list</snippet></ROW><ROW><id>16523813</id><snippet>del list</snippet></ROW><ROW><id>16523813</id><snippet>&gt;&gt;&gt; __builtins__.list
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>16523813</id><snippet>__builtins__</snippet></ROW><ROW><id>16523813</id><snippet>__builtin__</snippet></ROW><ROW><id>16523813</id><snippet>builtins</snippet></ROW><ROW><id>16523888</id><snippet>boxscores = soup.findAll('a', href=re.compile('boxscore'))
basepath =  "http://www.covers.com"
pages=[]
for a in boxscores:
   pages.append(urllib2.urlopen(basepath + a['href']).read())
</snippet></ROW><ROW><id>16524034</id><snippet>from django.db import models

class PersonManager(models.Manager):
    def get_by_natural_key(self, first_name, last_name):
        return self.get(name=first_name)

class Person(models.Model):
    objects = PersonManager()

    name = models.CharField(max_length=100)

    birthdate = models.DateField()

class Meta:
    unique_together = (('name'),)
</snippet></ROW><ROW><id>16524388</id><snippet>threading</snippet></ROW><ROW><id>16524388</id><snippet>threading</snippet></ROW><ROW><id>16524388</id><snippet>def thread_for_ident(ident):
    return threading._active.get(ident)
</snippet></ROW><ROW><id>16524388</id><snippet>None</snippet></ROW><ROW><id>16524426</id><snippet>pytest-cov</snippet></ROW><ROW><id>16524426</id><snippet>coverage run --source jedi -m py.test
coverage report
</snippet></ROW><ROW><id>16524426</id><snippet>py.test</snippet></ROW><ROW><id>16524426</id><snippet>coverage</snippet></ROW><ROW><id>16524426</id><snippet>pytest-cov</snippet></ROW><ROW><id>16524456</id><snippet>baas()</snippet></ROW><ROW><id>16524456</id><snippet>if __name__=="__main__":</snippet></ROW><ROW><id>16524456</id><snippet>baas()</snippet></ROW><ROW><id>16524566</id><snippet>None</snippet></ROW><ROW><id>16524585</id><snippet>dict3 = dict(dict2, **dict1)
</snippet></ROW><ROW><id>16524585</id><snippet>dict3 = dict2.copy()
dict3.update(dict1)
</snippet></ROW><ROW><id>16524593</id><snippet>In [1]: def f(*args): return args

In [2]: f(1,2,3)
Out[2]: (1, 2, 3)

In [3]: f(*[1,2,3,4])
Out[3]: (1, 2, 3, 4)
</snippet></ROW><ROW><id>16524593</id><snippet>*</snippet></ROW><ROW><id>16524593</id><snippet>args</snippet></ROW><ROW><id>16524593</id><snippet>In [1]</snippet></ROW><ROW><id>16524593</id><snippet>**</snippet></ROW><ROW><id>16524593</id><snippet>In [5]: def g(foo=None, bar=42): return foo,bar

In [6]: g()
Out[6]: (None, 42)

In [7]: g(*[1,2])
Out[7]: (1, 2)

In [8]: g(**{'foo': 'FOO', 'bar': 'BAR'})
Out[8]: ('FOO', 'BAR')
</snippet></ROW><ROW><id>16524748</id><snippet>User</snippet></ROW><ROW><id>16524748</id><snippet>User.id</snippet></ROW><ROW><id>16524748</id><snippet>ShopifyUserProfile.get_or_create</snippet></ROW><ROW><id>16524748</id><snippet>int</snippet></ROW><ROW><id>16524748</id><snippet>User</snippet></ROW><ROW><id>16524748</id><snippet>User</snippet></ROW><ROW><id>16524748</id><snippet>User</snippet></ROW><ROW><id>16524748</id><snippet>ShopifyUserProfile.objects.get_or_create(user=user_object, ...)
</snippet></ROW><ROW><id>16524760</id><snippet>from . import glob</snippet></ROW><ROW><id>16524760</id><snippet>glob</snippet></ROW><ROW><id>16524760</id><snippet>setup()</snippet></ROW><ROW><id>16524760</id><snippet>setup()</snippet></ROW><ROW><id>16524760</id><snippet>glob</snippet></ROW><ROW><id>16524760</id><snippet>__init__.py</snippet></ROW><ROW><id>16524760</id><snippet>test_mymod.py</snippet></ROW><ROW><id>16524760</id><snippet>glob</snippet></ROW><ROW><id>16524760</id><snippet>package.glob</snippet></ROW><ROW><id>16524760</id><snippet>glob</snippet></ROW><ROW><id>16524772</id><snippet>import string

s = "@John, It's a fantastic #week-end%, How about () you"
for c in "!@#%&amp;*()[]{}/?&lt;&gt;":
    s = string.replace(s, c, "")

print s
</snippet></ROW><ROW><id>16524819</id><snippet>collections.Counter()</snippet></ROW><ROW><id>16524819</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; code_list= ['ab','ca','gc','ab','we','ca']
&gt;&gt;&gt; points = [30, 20, 40, 20, 10, -10]
&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; for key, val in zip(code_list, points):
...     c[key] += val
... 
&gt;&gt;&gt; c.most_common(1)
[('ab', 50)]
</snippet></ROW><ROW><id>16524819</id><snippet>zip()</snippet></ROW><ROW><id>16524819</id><snippet>Counter()</snippet></ROW><ROW><id>16524819</id><snippet>.most_common()</snippet></ROW><ROW><id>16524819</id><snippet>max()</snippet></ROW><ROW><id>16524819</id><snippet>heapq.nlargest()</snippet></ROW><ROW><id>16524819</id><snippet>len(c)</snippet></ROW><ROW><id>16524819</id><snippet>sorted()</snippet></ROW><ROW><id>16524849</id><snippet>while</snippet></ROW><ROW><id>16524849</id><snippet>for</snippet></ROW><ROW><id>16524849</id><snippet>symbolslist = ["aapl","spy", "goog","nflx"]
for symbol in symbolslist:
    # Do logic here...
</snippet></ROW><ROW><id>16524849</id><snippet>import requests
import lxml

url = "http://www.google.co.uk/finance?q="+symbol+"&amp;q1=1"
r = requests.get(url)
xpath = '//your/xpath'
root = lxml.html.fromstring(r.content)
</snippet></ROW><ROW><id>16524849</id><snippet>regex = '&lt;span id="yfs_l84_' + symbolslist[i] + '"&gt;(.+?)&lt;/span&gt;'
pattern = re.compile(regex)

for symbol in symbolslist:
    # do logic
</snippet></ROW><ROW><id>16524849</id><snippet>drewk</snippet></ROW><ROW><id>16524849</id><snippet>#!/bin/env python
import ystockquote

symbolslist = ["aapl","spy", "goog","nflx"]
for symbol in symbolslist:
    print (ystockquote.get_price(symbol))
</snippet></ROW><ROW><id>16524872</id><snippet>y - rf.predict(X)</snippet></ROW><ROW><id>16524996</id><snippet>if "a" in args:
    print "x"
elif "b" in args:
    print "y"
else:
    raise ValueError("must specify at least a or b")
</snippet></ROW><ROW><id>16524996</id><snippet>"a" in args and "b" in args</snippet></ROW><ROW><id>16524996</id><snippet>"a"</snippet></ROW><ROW><id>16524996</id><snippet>elif</snippet></ROW><ROW><id>16525273</id><snippet>published = time.strptime(str(published),"%a, %d %b %Y %H:%M:%S")
</snippet></ROW><ROW><id>16525370</id><snippet>sys.path</snippet></ROW><ROW><id>16525370</id><snippet>sys.path.append('/path/to/project')
</snippet></ROW><ROW><id>16525370</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16525418</id><snippet>import csv
import tempfile
import shutil
from itertools import izip

with open(filename, 'rb') as infile1, open(outfilename, 'r+b') as infile2:
    outfile = tempfile.TemporaryFile()
    outcsv = csv.writer(outfile, delimiter=' ')

    for line1, line2 in izip(infile1, infile2):
        row1, row2 = line1.split(), line2.split()
        outcsv.writerow(row2 + [row1[2]])

    # rewind files to start; alternative is to close both and use `shutil.copyfile()`
    outfile.seek(0)
    infile2.seek(0)
    shutil.copyfileobj(outfile, infile2)
    outfile.close()
</snippet></ROW><ROW><id>16525418</id><snippet>outfilename</snippet></ROW><ROW><id>16525418</id><snippet>r+b</snippet></ROW><ROW><id>16525418</id><snippet>filename</snippet></ROW><ROW><id>16525418</id><snippet>outfilename</snippet></ROW><ROW><id>16525418</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>16525418</id><snippet>\123</snippet></ROW><ROW><id>16525418</id><snippet>filename = 'E:\\AirborneLidarData\\IntensFirst\\325115401.asc'
outfilename = 'E:\\AirborneLidarData\\LaserFirst\\325115401.asc'
</snippet></ROW><ROW><id>16525418</id><snippet>filename = r'E:\AirborneLidarData\IntensFirst\325115401.asc'
outfilename = r'E:\AirborneLidarData\LaserFirst\325115401.asc'
</snippet></ROW><ROW><id>16525418</id><snippet>filename = 'E:/AirborneLidarData/IntensFirst/325115401.asc'
outfilename = 'E:/AirborneLidarData/LaserFirst/325115401.asc'
</snippet></ROW><ROW><id>16525485</id><snippet>file_type = models.CharField(category=CATEGORY_CHOICES, help_select="Please select a file type", default=IMAGE)</snippet></ROW><ROW><id>16525485</id><snippet>category=CATEGORY_CHOICES
</snippet></ROW><ROW><id>16525485</id><snippet>choices=CATEGORY_CHOICES
</snippet></ROW><ROW><id>16525492</id><snippet>__foo__</snippet></ROW><ROW><id>16525492</id><snippet>__unicode__</snippet></ROW><ROW><id>16525492</id><snippet>__dict__</snippet></ROW><ROW><id>16525585</id><snippet>ydot[1]</snippet></ROW><ROW><id>16525585</id><snippet>ode_rhs</snippet></ROW><ROW><id>16525585</id><snippet>if t &lt; 30000:
    ydot[1] = 0.0
else:
    ydot[1] = -p[7]*y[0]*y[1] + p[8]*y[8]
</snippet></ROW><ROW><id>16525585</id><snippet>y[1]</snippet></ROW><ROW><id>16525585</id><snippet>odeint</snippet></ROW><ROW><id>16525585</id><snippet>p</snippet></ROW><ROW><id>16525585</id><snippet>t1</snippet></ROW><ROW><id>16525585</id><snippet>ode_rhs</snippet></ROW><ROW><id>16525585</id><snippet>t1</snippet></ROW><ROW><id>16525585</id><snippet>import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


def ode_rhs(y, t, p, t1):
    ydot[0] = -p[0]*y[0]*y[1] + p[1]*y[2] + p[2]*y[2]
    if t &lt; t1:
        ydot[1] = 0.0
    else:
        ydot[1] = -p[0]*y[0]*y[1] + p[1]*y[2]
    ydot[2] = p[0]*y[0]*y[1] - p[1]*y[2] - p[2]*y[2]
    return ydot


ydot = np.zeros(3)
p = np.array([0.01, 0.25, 0.1])
y0 = [20.0, 100.0, 0.0]
t = np.linspace(0, 200, 2001)
t1 = 20.0

sol = odeint(ode_rhs, y0, t, args=(p, t1))


plt.figure(1)
plt.clf()

plt.subplot(3, 1, 1)
plt.plot(t, sol[:, 0])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[0]')


plt.subplot(3, 1, 2)
plt.plot(t, sol[:, 1])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[1]')
plt.ylim(0, 110)

plt.subplot(3, 1, 3)
plt.plot(t, sol[:, 2])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[2]')
plt.xlabel('t')

plt.show()
</snippet></ROW><ROW><id>16525585</id><snippet>ydot[1]</snippet></ROW><ROW><id>16525585</id><snippet>ydot[1] = full * (-p[0]*y[0]*y[1] + p[1]*y[2])
</snippet></ROW><ROW><id>16525585</id><snippet>full</snippet></ROW><ROW><id>16525585</id><snippet>full=0</snippet></ROW><ROW><id>16525585</id><snippet>full=1</snippet></ROW><ROW><id>16525585</id><snippet>import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


def ode_rhs(y, t, p, full):
    ydot[0] = -p[0]*y[0]*y[1] + p[1]*y[2] + p[2]*y[2]
    ydot[1] = full * (-p[0]*y[0]*y[1] + p[1]*y[2])
    ydot[2] = p[0]*y[0]*y[1] - p[1]*y[2] - p[2]*y[2]
    return ydot


ydot = np.zeros(3)
p = np.array([0.01, 0.25, 0.1])
y0 = [20.0, 100.0, 0.0]
t1 = 20.0  # Equilibration time
tf = 200.0  # Final time

# Solve the equilibration phase.
teq = np.linspace(0, t1, 100)
full = 0
soleq = odeint(ode_rhs, y0, teq, args=(p, full))

# Solve the full system, using the final point of the
# equilibration phase as the initial condition.
y0 = soleq[-1]
# Note: the system is autonomous, so we could just as well start
# at t0=0.  But starting at t1 makes the plots (below) align without
# any additional shifting of the time arrays.
t = np.linspace(t1, tf, 2000)
full = 1
sol = odeint(ode_rhs, y0, t, args=(p, full))

plt.figure(2)
plt.clf()
plt.subplot(3, 1, 1)
plt.plot(teq, soleq[:, 0], t, sol[:, 0])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[0]')

plt.subplot(3, 1, 2)
plt.plot(teq, soleq[:, 1], t, sol[:, 1])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[1]')
plt.ylim(0, 110)

plt.subplot(3, 1, 3)
plt.plot(teq, soleq[:, 2], t, sol[:, 2])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[2]')
plt.xlabel('t')

plt.show()
</snippet></ROW><ROW><id>16525943</id><snippet>write()</snippet></ROW><ROW><id>16525943</id><snippet>html_str = """
&lt;table border=1&gt;
     &lt;tr&gt;
       &lt;th&gt;Number&lt;/th&gt;
       &lt;th&gt;Square&lt;/th&gt;
     &lt;/tr&gt;
     &lt;indent&gt;
     &lt;% for i in range(10): %&gt;
       &lt;tr&gt;
         &lt;td&gt;&lt;%= i %&gt;&lt;/td&gt;
         &lt;td&gt;&lt;%= i**2 %&gt;&lt;/td&gt;
       &lt;/tr&gt;
     &lt;/indent&gt;
&lt;/table&gt;
"""

Html_file= open("filename","w")
Html_file.write(html_str)
Html_file.close()
</snippet></ROW><ROW><id>16526075</id><snippet>print re.split('(\(%[oi]\d+\))', a)
</snippet></ROW><ROW><id>16526271</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>16526424</id><snippet>def removeFromList(elementsToRemove):
    def closure(list):
        for element in elementsToRemove:
            if list[0] != element:
                return
            else:
               list.pop(0)
    return closure

def func(listOfLists):
    result = []
    for i, thisList in enumerate(listOfLists):
        result.append(thisList)
        map(removeFromList(thisList), listOfLists[i+1:])
    return result
</snippet></ROW><ROW><id>16526424</id><snippet>from itertools import combinations

def isSubsetOrDisjointTo(listA, listB):
    return all(item in listB for item in listA) or all(item not in listB for item in listA)

def func(nodesToJoin):
    #flatten list, extracting duplicates
    allNodes = sorted(set(itertools.chain(*nodesToJoin)))

    result = []

    seen = set()

    for length in xrange(max(map(len, nodesToJoin)), 0, -1): 
        #start with longest possible, work to shortest
        for sublist in combinations(allNodes, length):
            if any(item in seen for item in sublist):
                #skip possible sublists with options we've already seen in the result
                continue

            if all(isSubsetOrDisjointTo(sublist, node) for node in nodesToJoin):
                result.append(sublist)
                seen.update(sublist)

    return result
</snippet></ROW><ROW><id>16526472</id><snippet>base.html</snippet></ROW><ROW><id>16526472</id><snippet>Page.html</snippet></ROW><ROW><id>16526472</id><snippet>{% extends "base.html" %}</snippet></ROW><ROW><id>16526472</id><snippet>base.html</snippet></ROW><ROW><id>16526472</id><snippet>settings.py</snippet></ROW><ROW><id>16526472</id><snippet>TEMPLATE_DIRS = ()</snippet></ROW><ROW><id>16526472</id><snippet>project/template</snippet></ROW><ROW><id>16526472</id><snippet>base.html</snippet></ROW><ROW><id>16526472</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>16526472</id><snippet>allauthbase.html</snippet></ROW><ROW><id>16526472</id><snippet>{% extends "allauthbase.html" %}</snippet></ROW><ROW><id>16526472</id><snippet>project/template/allauth</snippet></ROW><ROW><id>16526472</id><snippet>base.html</snippet></ROW><ROW><id>16526472</id><snippet>{% extends "allauth/base.html" %}</snippet></ROW><ROW><id>16526881</id><snippet>delete</snippet></ROW><ROW><id>16526881</id><snippet>import os
class File(models.Model):
    title = models.CharField(max_length=400, help_text="Enter the title of the file, this will appear on the listings page")
    CATEGORY_CHOICES = (
        ('Image', 'Image'),
        ('PDF', 'PDF')
    )
    file_type = models.CharField(choices=CATEGORY_CHOICES, help_text="Please select a file type", max_length=200)
    file_upload = models.FileField(upload_to=get_upload_to)

    def delete(self, *args, **kwargs):
        path=self.file_upload.path
        os.remove(path)
        super(File,self).delete(*args, **kwargs)
</snippet></ROW><ROW><id>16526881</id><snippet>bulk_delete</snippet></ROW><ROW><id>16526881</id><snippet>from django.contrib import admin
from models import *


def delete_selected(modeladmin, request, queryset):
    for element in queryset:
        element.delete()
delete_selected.short_description = "Delete selected elements"

class FileAdmin(admin.ModelAdmin):
    model = File
    actions = [delete_selected]

    list_display = ('title', 'file_type')

admin.site.register(File, FileAdmin)
</snippet></ROW><ROW><id>16527027</id><snippet>result = [590.0, 600.0, 590.0, 580.0, 570.0, 560.0, 570.0]
avrg = [580.0, 590.0, 593.33, 590.0, 580.0, 570.0, 566.67]
signal = []
for i in range(len(result)):
  if (result[i] &gt; avrg[i]):
    signal.append('BUY')
  else:
    signal.append('SELL')
</snippet></ROW><ROW><id>16527027</id><snippet>&gt;&gt;&gt; signal
['BUY', 'BUY', 'SELL', 'SELL', 'SELL', 'SELL', 'BUY']
</snippet></ROW><ROW><id>16527216</id><snippet>figure</snippet></ROW><ROW><id>16527216</id><snippet>matplotlib</snippet></ROW><ROW><id>16527216</id><snippet>matplotlib.figure.Figure</snippet></ROW><ROW><id>16527216</id><snippet>from matplotlib import *
import sys
from pylab import *

f = figure.Figure( figsize =(7,7) )
</snippet></ROW><ROW><id>16527216</id><snippet>from matplotlib import figure
f = figure.Figure( figsize =(7,7) )
</snippet></ROW><ROW><id>16527216</id><snippet>from matplotlib.figure import Figure
f = Figure( figsize =(7,7) )
</snippet></ROW><ROW><id>16527216</id><snippet>pylab</snippet></ROW><ROW><id>16527216</id><snippet>matplotlib</snippet></ROW><ROW><id>16527216</id><snippet>from matplotlib import *
import sys
import pylab as pl

f = pl.figure( figsize =(7,7) )
</snippet></ROW><ROW><id>16527552</id><snippet>operator</snippet></ROW><ROW><id>16527552</id><snippet>import operator
ops = {'&lt;=': operator.le, '&gt;=': operator.ge}

In [3]: ops['&gt;='](2, 1)
Out[3]: True
</snippet></ROW><ROW><id>16527751</id><snippet>strings</snippet></ROW><ROW><id>16527751</id><snippet>datetime.datetime</snippet></ROW><ROW><id>16527751</id><snippet>strptime</snippet></ROW><ROW><id>16527751</id><snippet>datetime.datetime</snippet></ROW><ROW><id>16527751</id><snippet>&gt;&gt;&gt; delta = datetime.datetime.strptime('2012-04-07 18:54:40', '%Y-%m-%d %H:%M:%S') \
            - datetime.datetime.strptime('2012-04-07 18:54:39', '%Y-%m-%d %H:%M:%S')
&gt;&gt;&gt; delta
datetime.timedelta(0, 1)
</snippet></ROW><ROW><id>16527803</id><snippet>str.format</snippet></ROW><ROW><id>16527803</id><snippet>fList=[lambda t: "&lt;td&gt;{}&lt;/td&gt;".format(time.strftime("%a %H:%M %d %b %y", time.localtime(t)))]
</snippet></ROW><ROW><id>16527803</id><snippet>lambda</snippet></ROW><ROW><id>16527803</id><snippet>t</snippet></ROW><ROW><id>16527803</id><snippet>t</snippet></ROW><ROW><id>16527803</id><snippet>time.localtime()</snippet></ROW><ROW><id>16527803</id><snippet>time.strftime</snippet></ROW><ROW><id>16527803</id><snippet>str.format()</snippet></ROW><ROW><id>16527803</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; vList=[1236745404]
&gt;&gt;&gt; fList=[lambda t: "&lt;td&gt;{}&lt;/td&gt;".format(time.strftime("%a %H:%M %d %b %y", time.localtime(t)))]
&gt;&gt;&gt; [f(x) for f, x in zip(fList, vList)]
['&lt;td&gt;Wed 05:23 11 Mar 09&lt;/td&gt;']
</snippet></ROW><ROW><id>16527833</id><snippet>len</snippet></ROW><ROW><id>16527833</id><snippet>len(result_list)</snippet></ROW><ROW><id>16527919</id><snippet>import re
if re.match('\d{2}:\d{2}:\d{2}', line):
</snippet></ROW><ROW><id>16527919</id><snippet>line</snippet></ROW><ROW><id>16527919</id><snippet>import time

try:
    time.strptime(line[:8], '%H:%M:%S')
except ValueError:
    print('Not a timestamp')
else:
    print('Found a timestamp')
</snippet></ROW><ROW><id>16527919</id><snippet>ValueError</snippet></ROW><ROW><id>16528223</id><snippet>def getname(self):
    return "child : {} .. parent : {}".format(self._childname, super().name)
</snippet></ROW><ROW><id>16528223</id><snippet>super().name</snippet></ROW><ROW><id>16528223</id><snippet>super()</snippet></ROW><ROW><id>16528223</id><snippet>name()</snippet></ROW><ROW><id>16528223</id><snippet>name</snippet></ROW><ROW><id>16528223</id><snippet>name()</snippet></ROW><ROW><id>16528223</id><snippet>_name</snippet></ROW><ROW><id>16528223</id><snippet>_name</snippet></ROW><ROW><id>16528223</id><snippet>__init__</snippet></ROW><ROW><id>16528223</id><snippet>__init__</snippet></ROW><ROW><id>16528223</id><snippet>__init__</snippet></ROW><ROW><id>16528223</id><snippet>class child(parent):
    def __init__(self, childname):
        super().__init__()
        self._childname = childname
</snippet></ROW><ROW><id>16528312</id><snippet>db.collection.ensureIndex({c: 1})
</snippet></ROW><ROW><id>16528312</id><snippet>{ "_id" : ObjectId("518d51c808beda0b70cffffa"),
  "a" : [ 0.00037, 0.00009 ],
  "b" : "Some long str",
  "c" : [ "element1", "element2", "element3", "element4" ]
}
</snippet></ROW><ROW><id>16528312</id><snippet>results = collection.find({"c": {"$all": query, "$size": len(query)}}).sort("a", -1)
</snippet></ROW><ROW><id>16528323</id><snippet>mmap</snippet></ROW><ROW><id>16528323</id><snippet>mmap</snippet></ROW><ROW><id>16528323</id><snippet>offset</snippet></ROW><ROW><id>16528323</id><snippet>length</snippet></ROW><ROW><id>16528323</id><snippet>PAGESIZE</snippet></ROW><ROW><id>16528323</id><snippet>try:
    PAGESIZE = mmap.PAGESIZE
except NameError:
    PAGESIZE = mmap.ALLOCATION_GRANULARITY

def overwrite(fileobj, start, end, newbytes):
    startoffset, startremainder = divmod(start, PAGESIZE)
    offset = startoffset * PAGESIZE
    endoffset, endremainder = divmod(end, PAGESIZE)
    length = (endoffset + 1) * PAGESIZE - offset
    map = mmap.mmap(fileobj.fileno(), offset=offset, length=length,
                    access=mmap.ACCESS_WRITE)
    map[startremainder:startremainder+end-start] = newbytes
</snippet></ROW><ROW><id>16528323</id><snippet>len(newbytes) != end - start</snippet></ROW><ROW><id>16528323</id><snippet>mmap</snippet></ROW><ROW><id>16528323</id><snippet>seek</snippet></ROW><ROW><id>16528323</id><snippet>seek</snippet></ROW><ROW><id>16528323</id><snippet>def overwrite(fileobj, start, end, newbytes):
    if len(newbytes) != end - start:
        raise ValueError('overwrite cannot expand or contract a file')
    fileobj.seek(start)
    fileobj.write(newbytes)    
</snippet></ROW><ROW><id>16528323</id><snippet>mmap</snippet></ROW><ROW><id>16528323</id><snippet>seek</snippet></ROW><ROW><id>16528323</id><snippet>/proc/*/map</snippet></ROW><ROW><id>16528323</id><snippet>1&lt;&lt;64</snippet></ROW><ROW><id>16528323</id><snippet>fseeko</snippet></ROW><ROW><id>16528323</id><snippet>1&lt;&lt;63</snippet></ROW><ROW><id>16528323</id><snippet>os.lseek</snippet></ROW><ROW><id>16528323</id><snippet>mmap</snippet></ROW><ROW><id>16528485</id><snippet>dateutil</snippet></ROW><ROW><id>16528485</id><snippet>&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; parser.parse('April 29, 2013, 7:52 p.m.')
datetime.datetime(2013, 4, 29, 19, 52)
&gt;&gt;&gt; parser.parse('April 30, 2013, 4 p.m.')
datetime.datetime(2013, 4, 30, 16, 0)
</snippet></ROW><ROW><id>16528530</id><snippet>f</snippet></ROW><ROW><id>16528530</id><snippet>f.find('h2')</snippet></ROW><ROW><id>16528530</id><snippet>'h2'</snippet></ROW><ROW><id>16528530</id><snippet>find</snippet></ROW><ROW><id>16528530</id><snippet>str.find</snippet></ROW><ROW><id>16528530</id><snippet>str</snippet></ROW><ROW><id>16528530</id><snippet>&gt;&gt;&gt; s = 'A string with an h2 in it'
&gt;&gt;&gt; i = s.find('h2')
&gt;&gt;&gt; str(i)
'17'
</snippet></ROW><ROW><id>16528530</id><snippet>&gt;&gt;&gt; f = 'C:\\python\\training\\offline\\somehtml.html'
&gt;&gt;&gt; headline = f.find('h2')
&gt;&gt;&gt; str(headline)
'-1'
</snippet></ROW><ROW><id>16528530</id><snippet>soup</snippet></ROW><ROW><id>16528530</id><snippet>f</snippet></ROW><ROW><id>16528530</id><snippet>BeautifulSoup.find</snippet></ROW><ROW><id>16528530</id><snippet>f</snippet></ROW><ROW><id>16528530</id><snippet>headline</snippet></ROW><ROW><id>16528530</id><snippet>headline2</snippet></ROW><ROW><id>16528530</id><snippet>headline3</snippet></ROW><ROW><id>16528530</id><snippet>f</snippet></ROW><ROW><id>16528530</id><snippet>soup</snippet></ROW><ROW><id>16528530</id><snippet>find</snippet></ROW><ROW><id>16528530</id><snippet>h2</snippet></ROW><ROW><id>16528530</id><snippet>headline</snippet></ROW><ROW><id>16528530</id><snippet>None</snippet></ROW><ROW><id>16528530</id><snippet>url</snippet></ROW><ROW><id>16528530</id><snippet>&lt;p&gt;about&lt;/p&gt;</snippet></ROW><ROW><id>16528530</id><snippet>&lt;html&gt;&lt;body&gt;&lt;p&gt;about&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</snippet></ROW><ROW><id>16528530</id><snippet>&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</snippet></ROW><ROW><id>16528530</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>16528530</id><snippet>"Email"</snippet></ROW><ROW><id>16528530</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>16528530</id><snippet>id</snippet></ROW><ROW><id>16528530</id><snippet>"email"</snippet></ROW><ROW><id>16528642</id><snippet># -*- coding: utf-8 -*-
import re

s = '你好 hello, world'
s = s.decode('utf-8')

# First find all 'normal' words and interpunction
# '[\x21-\x2f]' includes most interpunction, change it to ',' if you only need to match a comma
count = len(re.findall(r'\w+|[\x21-\x2]', s))

for word in s:
    for ch in word:
        # see http://stackoverflow.com/a/11415841/1248554 for additional ranges if needed
        if 0x4e00 &lt; ord(ch) &lt; 0x9fcc:
            count += 1

print count
</snippet></ROW><ROW><id>16528737</id><snippet>circ.center = new_x, new_y</snippet></ROW><ROW><id>16528737</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Circle

class InteractiveCircle(object):
    def __init__(self):
        self.fig, self.ax = plt.subplots()
        self.ax.axis('equal')

        self.circ = Circle((0.5, 0.5), 0.1)
        self.ax.add_artist(self.circ)
        self.ax.set_title('Click to move the circle')

        self.fig.canvas.mpl_connect('button_press_event', self.on_click)

    def on_click(self, event):
        if event.inaxes is None:
            return
        self.circ.center = event.xdata, event.ydata
        self.fig.canvas.draw()

    def show(self):
        plt.show()


InteractiveCircle().show()
</snippet></ROW><ROW><id>16528775</id><snippet>popt, pcov, infodict, errmsg, ier = curve_fit(func, xdata, ydata, sigma = SD, full_output = True)
</snippet></ROW><ROW><id>16529023</id><snippet>l[start:end:step] 
</snippet></ROW><ROW><id>16529023</id><snippet>In [1]: l = [1, 2, 3, 4, 5, 6, 7, 8, 9]

In [2]: [l[start::3] for start in range(3)]
Out[2]: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</snippet></ROW><ROW><id>16529023</id><snippet>first_list, second_list, third_list = [l[i::3]for i in range(3)]
</snippet></ROW><ROW><id>16529059</id><snippet>import pandas as pd
from itertools import product

node_names = ['%s%d' % t for t in product('abcd', range(1, 5))]
nodes = pd.DataFrame({'node': node_names})
nodes.index.name = 'id'

path_nodes = pd.DataFrame({'path_id': [0, 0, 0],
                           'node_id': [0, 4, 8],
                           'position':[0, 1, 2]})

data = pd.DataFrame({'path_id': [0],
                     'case': [1],
                     'data': [True]})
In [113]: nodes
Out[113]: 
   node
id     
0    a1
1    a2
2    a3
3    a4
4    b1
5    b2
6    b3
7    b4
8    c1
...

In [114]: path_nodes
Out[114]: 
   node_id  path_id  position
0        0        0         0
1        4        0         1
2        8        0         2

In [115]: data
Out[115]: 
   case  data  path_id
0     1  True        0
</snippet></ROW><ROW><id>16529076</id><snippet>from subprocess import Popen, PIPE
from getpass import getpass

x = Popen('ssh root@host', stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True)

print x.stdout.readline()
_pass = getpass('Enter your superduper password:')
x.stdin.write(_pass)
print x.stdout.readline()
</snippet></ROW><ROW><id>16529076</id><snippet>x.stdin.write(...)</snippet></ROW><ROW><id>16529076</id><snippet>C:\Users&gt;python
Python 2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.

&gt;&gt;&gt; from getpass import getpass
&gt;&gt;&gt; getpass('test: ')
test:
'This is a test'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16529231</id><snippet>pwd.py</snippet></ROW><ROW><id>16529231</id><snippet>winpwd.py</snippet></ROW><ROW><id>16529231</id><snippet>try:
    import pwd
except ImportError:
    import winpwd as pwd
</snippet></ROW><ROW><id>16529231</id><snippet>pwd</snippet></ROW><ROW><id>16529231</id><snippet>pwd</snippet></ROW><ROW><id>16529231</id><snippet>winpwd</snippet></ROW><ROW><id>16529317</id><snippet>cmd = "enerCHARMM.pl -par param=x,xtop=topology_modified.rtf,xpar=lipid27_modified.par,nobuildall -out vdwaals {0}".format(cmtup[1])
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
</snippet></ROW><ROW><id>16529317</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>16529384</id><snippet>type.__init__</snippet></ROW><ROW><id>16529384</id><snippet>metaclass.__init__</snippet></ROW><ROW><id>16529384</id><snippet>cls</snippet></ROW><ROW><id>16529384</id><snippet>type.__init__(cls, name, bases, dict)
</snippet></ROW><ROW><id>16529384</id><snippet>dict</snippet></ROW><ROW><id>16529384</id><snippet>type.__init__(cls, name, bases, clsdict)
</snippet></ROW><ROW><id>16529417</id><snippet>np.sqrt(x[...,0]**2 + x[...,1]**2 + x[...,2]**2)
</snippet></ROW><ROW><id>16529417</id><snippet>...</snippet></ROW><ROW><id>16529589</id><snippet>db.collection.aggregate({$unwind:"$messages"},
                        {$group:{_id:"$_id", msgCount:{$sum:1}}},
                        {$match:{msgCount:{$gte:&lt;SIZE&gt;}}}
);
</snippet></ROW><ROW><id>16529589</id><snippet>&lt;SIZE&gt;</snippet></ROW><ROW><id>16529599</id><snippet>enc='utf-8'
log  =  open('/Users/Owner/Desktop/Exodus Logs/DIRTYLOGS/serverlog_20130430_00.15.21.txt', 'r', encoding=enc)
</snippet></ROW><ROW><id>16529599</id><snippet>enc='utf-16'
log  =  open('/Users/Owner/Desktop/Exodus Logs/DIRTYLOGS/serverlog_20130430_00.15.21.txt', 'r', encoding=enc)
</snippet></ROW><ROW><id>16529599</id><snippet>enc='iso-8859-15'
</snippet></ROW><ROW><id>16529599</id><snippet>enc = 'cp437'
</snippet></ROW><ROW><id>16529656</id><snippet>open('myfile.dat', 'rb')</snippet></ROW><ROW><id>16530122</id><snippet>numpy</snippet></ROW><ROW><id>16530122</id><snippet>def neighbors(matrix, row, col):
    for i in row-1, row, row+1:
        if i &lt; 0 or i == len(matrix): continue
        for j in col-1, col, col+1:
            if j &lt; 0 or j == len(matrix[i]): continue
            if i == row and j == col: continue
            yield matrix[i][j]

matrix = [[0,1,1,1,0,1], [1,1,1,0,0,1], [1,1,0,0,0,1], [1,1,1,1,1,1]]

for i, row in enumerate(matrix):
    for j, cell in enumerate(cell):
        for neighbor in neighbors(matrix, i, j):
            do_stuff(cell, neighbor)
</snippet></ROW><ROW><id>16530122</id><snippet>a</snippet></ROW><ROW><id>16530122</id><snippet>a</snippet></ROW><ROW><id>16530122</id><snippet>a[1:]</snippet></ROW><ROW><id>16530122</id><snippet>a[2:]</snippet></ROW><ROW><id>16530122</id><snippet>neighbors</snippet></ROW><ROW><id>16530122</id><snippet>for</snippet></ROW><ROW><id>16530122</id><snippet>numpy</snippet></ROW><ROW><id>16530122</id><snippet>numpy</snippet></ROW><ROW><id>16530122</id><snippet>multiprocessing</snippet></ROW><ROW><id>16530122</id><snippet>numpy</snippet></ROW><ROW><id>16530122</id><snippet>numpy</snippet></ROW><ROW><id>16530122</id><snippet>numpy</snippet></ROW><ROW><id>16530122</id><snippet>[row[col] for row in matrix]</snippet></ROW><ROW><id>16530122</id><snippet>numpy</snippet></ROW><ROW><id>16530122</id><snippet>numpy.matrix</snippet></ROW><ROW><id>16530122</id><snippet>ufunc</snippet></ROW><ROW><id>16530122</id><snippet>def neighbors(matrix):
    for i in -1, 0, 1:
        for j in -1, 0, 1:
            if i == 0 and j == 0: continue
            yield np.roll(np.roll(matrix, i, 0), j, 1)

matrix = np.matrix([[0,0,0,0,0,0,0,0],
                    [0,0,1,1,1,0,1,0],
                    [0,1,1,1,0,0,1,0],
                    [0,1,1,0,0,0,1,0],
                    [0,1,1,1,1,1,1,0],
                    [0,0,0,0,0,0,0,0]])
while True:
    livecount = sum(neighbors(matrix))
    matrix = (matrix &amp; (livecount==2)) | (livecount==3)
</snippet></ROW><ROW><id>16530308</id><snippet>sort</snippet></ROW><ROW><id>16530308</id><snippet>bisect</snippet></ROW><ROW><id>16530308</id><snippet>blist</snippet></ROW><ROW><id>16530308</id><snippet>bintrees</snippet></ROW><ROW><id>16530308</id><snippet>bisect</snippet></ROW><ROW><id>16530308</id><snippet>key</snippet></ROW><ROW><id>16530308</id><snippet>for Line in FileB:
    LineB = Line.strip('\n').split('\t')
    Ranges[Chr].append(int(LineB[1]), int(LineB[2]), [LineB[0])

for r in Ranges:
    r.sort()
</snippet></ROW><ROW><id>16530308</id><snippet>for i, r in enumerate(Ranges[Chr]):
    # ...
</snippet></ROW><ROW><id>16530308</id><snippet>i = bisect.bisect(Ranges[Chr], (Location, Location, None))
if i:
    r = Ranges[Chr][i-1]
    if r[0] &lt;= Location &lt; r[1]:
        # do whatever you wanted with r
    else:
        # there is no range that includes Location
else:
    # Location is before all ranges
</snippet></ROW><ROW><id>16530308</id><snippet>bisect</snippet></ROW><ROW><id>16530308</id><snippet>bisect</snippet></ROW><ROW><id>16530308</id><snippet>bisect</snippet></ROW><ROW><id>16530308</id><snippet>bisect</snippet></ROW><ROW><id>16530308</id><snippet>numpy</snippet></ROW><ROW><id>16530308</id><snippet>RangeArrays = [np.array(a[:2] for a in value) for value in Ranges]
</snippet></ROW><ROW><id>16530308</id><snippet>Ranges</snippet></ROW><ROW><id>16530308</id><snippet>RangeArrays = {key: np.array(a[:2] for a in value) for key, value in Ranges.items()}
</snippet></ROW><ROW><id>16530308</id><snippet>for i, r in enumerate(Ranges[Chr]):
    # ...
</snippet></ROW><ROW><id>16530308</id><snippet>comparisons = Location &lt; RangeArrays[Chr]
matches = comparisons[:,0] &lt; comparisons[:,1]
indices = matches.nonzero()[0]
for index in indices:
    r = Ranges[indices[0]]
    # Do stuff with r
</snippet></ROW><ROW><id>16530308</id><snippet>cur = db.execute('''SELECT Start, Stop, Chr FROM Ranges 
                    WHERE Start &lt;= ? AND Stop &gt; ?''', (Location, Location))
for (Start, Stop, Chr) in cur:
    # do stuff
</snippet></ROW><ROW><id>16530471</id><snippet>import re

integers = re.compile(r'(?&lt;!\S)\d+(?!\S)')
integers.findall(stringy)
</snippet></ROW><ROW><id>16530471</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; stringy = "If y0u can 66.6 r34d 25 this, you're 29 t00 close."
&gt;&gt;&gt; integers = re.compile(r'(?&lt;!\S)\d+(?!\S)')
&gt;&gt;&gt; integers.findall(stringy)
['25', '29']
</snippet></ROW><ROW><id>16530471</id><snippet>.split()</snippet></ROW><ROW><id>16530471</id><snippet>.isdigit()</snippet></ROW><ROW><id>16530471</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('[item for item in stringy.split() if item.isdigit()]', 'from __main__ import stringy')
3.1379640102386475
&gt;&gt;&gt; timeit.timeit('integers.findall(stringy)', 'from __main__ import stringy, integers')
4.119225978851318
</snippet></ROW><ROW><id>16530471</id><snippet>&gt;&gt;&gt; stringy = ''.join([stringy for _ in range(100)])
&gt;&gt;&gt; timeit.timeit('[item for item in stringy.split() if item.isdigit()]', 'from __main__ import stringy', number=10000)
2.5325310230255127
&gt;&gt;&gt; timeit.timeit('integers.findall(stringy)', 'from __main__ import stringy, integers', number=10000)
4.044284105300903
</snippet></ROW><ROW><id>16530529</id><snippet>def sel():
   selection = "You selected the option " + str(var.get())
   label.config(text = selection)


root = Tk()
frame = Frame(root)
frame.pack()

labelframe = LabelFrame(frame, text="This is a LabelFrame")
labelframe.pack(fill="both", expand="yes")


var = IntVar()
R1 = Radiobutton(labelframe, text="Option 1", variable=var, value=1,
                  command=sel)
R1.pack( anchor = W )

R2 = Radiobutton(labelframe, text="Option 2", variable=var, value=2,
                  command=sel)
R2.pack( anchor = W )

R3 = Radiobutton(labelframe, text="Option 3", variable=var, value=3,
                  command=sel)
R3.pack( anchor = W)


label = Label(labelframe)
label.pack()
</snippet></ROW><ROW><id>16530573</id><snippet> python script.py file1.txt file2.txt file3.txt
</snippet></ROW><ROW><id>16530682</id><snippet>Site</snippet></ROW><ROW><id>16530682</id><snippet>$ python manage.py shell
&gt;&gt;&gt; from django.contrib.sites.models import Site
&gt;&gt;&gt; Site.objects.create(domain='example.com', name='example.com')
</snippet></ROW><ROW><id>16530682</id><snippet>example.com</snippet></ROW><ROW><id>16530682</id><snippet>Site</snippet></ROW><ROW><id>16530682</id><snippet>syncdb</snippet></ROW><ROW><id>16530706</id><snippet>input = [server_socket, sys.stdin]
inputready, outputready, exceptready = select.select(input,[],[])
for sock in inputready:
    if sock == server_socket:
        ...
    else:
        data = sock.recv(RECV_BUFFER)
</snippet></ROW><ROW><id>16530706</id><snippet>sys.stdin</snippet></ROW><ROW><id>16530706</id><snippet>server_socket</snippet></ROW><ROW><id>16530706</id><snippet>else</snippet></ROW><ROW><id>16530706</id><snippet>recv</snippet></ROW><ROW><id>16530706</id><snippet>stdin</snippet></ROW><ROW><id>16530706</id><snippet>read</snippet></ROW><ROW><id>16530706</id><snippet>recv</snippet></ROW><ROW><id>16530706</id><snippet>if sock == server_socket:
    ...
elif sock == sys.stdin:
    data = sock.readline()
    for s in input:
        if s not in (server_socket, sys.stdin):
            s.send(data)
else:
    ...
</snippet></ROW><ROW><id>16530756</id><snippet>&gt;&gt;&gt; tst =  {'taste': ('sweet', 'sour', 'juicy', 'melon-like')}
&gt;&gt;&gt; tst.get('taste', ()) #default to () if does not exist.  
('sweet', 'sour', 'juicy', 'melon-like')
&gt;&gt;&gt; key_list=['yuck!','tasty','smoothie']
&gt;&gt;&gt; tst['taste'] = tst.get('taste') + tuple(key_list)
&gt;&gt;&gt; tst
{'taste': ('sweet', 'sour', 'juicy', 'melon-like', 'yuck!', 'tasty', 'smoothie')}
</snippet></ROW><ROW><id>16530756</id><snippet>&gt;&gt;&gt; tst = {'taste': ('sweet', 'sour', 'juicy', 'melon-like', 'yuck!', 'tasty', 'smoothie')}
&gt;&gt;&gt; taste = tst.get('taste')
&gt;&gt;&gt; taste
('sweet', 'sour', 'juicy', 'melon-like', 'yuck!', 'tasty', 'smoothie')
&gt;&gt;&gt; 'sour' in taste
True
&gt;&gt;&gt; 'sour1' in taste
False
</snippet></ROW><ROW><id>16530841</id><snippet>mport numpy as np
import matplotlib.pyplot as plt
band = np.linspace(0,10**12,100)
y = band

plt.plot(band,y)
plt.xlabel("Frequencies")

plt.vlines(10**3, min(y), max(y),colors = 'black', label = 'kilo Hz')
plt.vlines(10**6, min(y), max(y),colors = 'black', label = 'mega Hz')

string_labels = []
for i in range(0,len(y),10):
    string_labels.append(r"$10^{%02d}$" % (i/10.0))

plt.xticks(np.linspace(0,10**12,10),string_labels)

plt.legend()
plt.show()
</snippet></ROW><ROW><id>16531073</id><snippet>ax1 = fig.add_subplot(111)

ax1.xlim(-.5,2) # Set it in axis 1 coords

ax1.plot(x1, y1,'b--')
ax2 = ax1.twiny()
ax2.plot(x2, y1, 'go')
ax2.set_xlabel('Temperature')
ax2.invert_xaxis()

ax2.xlim(-2, 3) # Set it in axis 2 coords
</snippet></ROW><ROW><id>16531144</id><snippet>%%</snippet></ROW><ROW><id>16531144</id><snippet>"...." % table,
</snippet></ROW><ROW><id>16531144</id><snippet>%%</snippet></ROW><ROW><id>16531144</id><snippet>%</snippet></ROW><ROW><id>16531144</id><snippet>%</snippet></ROW><ROW><id>16531144</id><snippet>%s</snippet></ROW><ROW><id>16531144</id><snippet>'%Y-%m-%d'</snippet></ROW><ROW><id>16531144</id><snippet>db.execute("SELECT DATE_FORMAT(snapdate,'%%%%Y-%%%%m-%%%%d') AS date, SUM( population ) AS accountpopulation, count( blockid ) AS number_block FROM %s WHERE blockid = %%s GROUP BY snapdate ORDER BY snapdate DESC LIMIT 7" % table, (blockid,))
</snippet></ROW><ROW><id>16531144</id><snippet>str.format()</snippet></ROW><ROW><id>16531144</id><snippet>db.execute("SELECT DATE_FORMAT(snapdate,'%%Y-%%m-%%d') AS date, SUM( population ) AS accountpopulation, count( blockid ) AS number_block FROM {0} WHERE blockid = %s GROUP BY snapdate ORDER BY snapdate DESC LIMIT 7".format(table), (blockid,))
</snippet></ROW><ROW><id>16531144</id><snippet>{0}</snippet></ROW><ROW><id>16531144</id><snippet>%%</snippet></ROW><ROW><id>16531144</id><snippet>%s</snippet></ROW><ROW><id>16531144</id><snippet>blockid</snippet></ROW><ROW><id>16531144</id><snippet>%%</snippet></ROW><ROW><id>16531144</id><snippet>%</snippet></ROW><ROW><id>16531156</id><snippet>return floatformat(float(price) / product_amount, 2)
</snippet></ROW><ROW><id>16531156</id><snippet>floatformat</snippet></ROW><ROW><id>16531157</id><snippet>from datetime import datetime

line = '[03/Feb/2013:02:52:05 +0000]'
date = line[1:line.find(' ')]   #  take the string from the second character to the first blank
line_timestamp = datetime.strptime(date, "%d/%b/%Y:%H:%M:%S")

print repr(line_timestamp)
# datetime.datetime(2013, 2, 3, 2, 52, 5)
</snippet></ROW><ROW><id>16531175</id><snippet>from projectname.app.helpers.methodhelper import function1</snippet></ROW><ROW><id>16531175</id><snippet>PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))</snippet></ROW><ROW><id>16531175</id><snippet>settings.py</snippet></ROW><ROW><id>16531175</id><snippet>/home/kyle/django_project_name/</snippet></ROW><ROW><id>16531175</id><snippet>manage.py</snippet></ROW><ROW><id>16531175</id><snippet>settings.py</snippet></ROW><ROW><id>16531175</id><snippet>sys.path.append(os.path.join(PROJECT_ROOT, 'django_project_name'))</snippet></ROW><ROW><id>16531303</id><snippet>g = open(file,'r')
names = {}
for line in g.readlines():
    name = line.split('\t')[1] #Name is in the second tab
    names[name] = 1 #create a dictionary with the names

#names.keys() returns a list of all the names here
# change the file handle here if needed, or the original file would be overwritten. 
h = open(file,'w+')
for name in names.keys():
    h.write("%s\n"%name)
</snippet></ROW><ROW><id>16531320</id><snippet>del</snippet></ROW><ROW><id>16531320</id><snippet>del</snippet></ROW><ROW><id>16531320</id><snippet>append</snippet></ROW><ROW><id>16531390</id><snippet>from PySide.QtCore import *
from PySide.QtGui import *
import sys

def createMask(size):
    w=size.width()
    h=size.height()
    img=QImage(size, QImage.Format_MonoLSB)
    qp=QPainter()
    qp.begin(img)
    qp.fillRect(QRect(QPoint(0, 0), size), QColor(255,255,255))
    path=QPainterPath()
    path.moveTo(0, h-1)
    path.lineTo(w-1,0)
    path.lineTo(h-1, 0)
    path.lineTo(0, h-1)
    qp.fillPath(path, QBrush(QColor(0, 0, 0)))
    qp.end()
    return img

def createRoundedRectRegion(rect, radius):
    r=QRegion(rect.adjusted(radius, 0, -radius, 0))
    r|=QRegion(rect.adjusted(0, radius, 0, -radius))
    r|=QRegion(rect.left(), rect.top(), 2*radius, 2*radius, QRegion.Ellipse)
    r|=QRegion(rect.right()-2*radius, rect.top(), 2*radius, 2*radius, QRegion.Ellipse)
    r|=QRegion(rect.left(), rect.bottom()-2*radius, 2*radius, 2*radius, QRegion.Ellipse)
    r|=QRegion(rect.right()-2*radius, rect.bottom()-2*radius, 2*radius, 2*radius, QRegion.Ellipse)
    return r

def createRegion(bubbleSize, pointSize, offset):
    r=createRoundedRectRegion(QRect(QPoint(0, 0), bubbleSize), 10)
    t=QRegion(QPixmap(createMask(pointSize)))
    t.translate(offset, bubbleSize.height())
    r|=t
    return r

class Callout(QWidget):
    def __init__(self, text, parent=None):
        super(Callout, self).__init__(parent)
        w=100+len(text)*5
        self.setMinimumSize(w, 100)
        self.setMaximumSize(w, 100)
        self.text=text
        self.setWindowFlags(Qt.FramelessWindowHint|Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setMask(createRegion(QSize(w, 50), QSize(75, 50), 75))

    def paintEvent(self, event):
        qp=QPainter()
        qp.begin(self)
        qp.fillRect(0, 0, self.width(), 200, QColor(192, 192, 192))
        qp.drawText(QRect(0, 0, self.width(), 50), Qt.AlignCenter, self.text)
        qp.end()

def main():
    app=QApplication(sys.argv)
    w=Callout('Bla Bla Bla')
    w.move(200, 100)
    w.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16531392</id><snippet>field</snippet></ROW><ROW><id>16531392</id><snippet>&lt;form action="" method="post"&gt;{% csrf_token %}
     {% for field in form %}
         {% if field.name == 'last_name' or field.name == 'another_field' %}
            &lt;p&gt;Hello world.&lt;/p&gt;
            {{ field }}
         {% else %}
            &lt;p&gt;This is not Custom&lt;/p&gt;
            {{ field }}
         {% endif %}
     {% endfor %}
 &lt;input type="submit" value="Submit" /&gt;
 &lt;/form&gt;
</snippet></ROW><ROW><id>16531410</id><snippet>i ++</snippet></ROW><ROW><id>16531410</id><snippet>i++</snippet></ROW><ROW><id>16531410</id><snippet>i ++</snippet></ROW><ROW><id>16531410</id><snippet>++</snippet></ROW><ROW><id>16531410</id><snippet>+= 1</snippet></ROW><ROW><id>16531410</id><snippet>while</snippet></ROW><ROW><id>16531410</id><snippet>while i &lt; dataGroup.count
  dataString += dataGroup[i]
  i += 1
end
</snippet></ROW><ROW><id>16531410</id><snippet>dataString = dataGroup.join</snippet></ROW><ROW><id>16531414</id><snippet>widget_set = {tuple(sorted(widget.items()))}  # {..} is a set literal, Python 2.7 and newer
</snippet></ROW><ROW><id>16531414</id><snippet>tuple(sorted(somedict.items())) in widget_set</snippet></ROW><ROW><id>16531414</id><snippet>dict</snippet></ROW><ROW><id>16531414</id><snippet>dict</snippet></ROW><ROW><id>16531414</id><snippet>dict(widget_set.pop())
</snippet></ROW><ROW><id>16531414</id><snippet>&gt;&gt;&gt; widget = {
...      'lunch':  'eggs',
...      'dunner': 'steak'
... }
&gt;&gt;&gt; widget_set = {tuple(sorted(widget.items()))}
&gt;&gt;&gt; tuple(sorted(widget.items())) in widget_set
True
&gt;&gt;&gt; dict(widget_set.pop())
{'lunch': 'eggs', 'dunner': 'steak'}
</snippet></ROW><ROW><id>16531438</id><snippet>streamplot</snippet></ROW><ROW><id>16531438</id><snippet>import numpy as np
from scipy.interpolate import Rbf
import matplotlib.pyplot as plt
# Make data repeatable
np.random.seed(1981)

# Generate some random wells with random head (water table) observations
x, y, z = np.random.random((3, 10))

# Interpolate these onto a regular grid
xi, yi = np.mgrid[0:1:100j, 0:1:100j]
func = Rbf(x, y, z, function='linear')
zi = func(xi, yi)

# -- Plot --------------------------
fig, ax = plt.subplots()

# Plot flowlines
dy, dx = np.gradient(-zi.T) # Flow goes down gradient (thus -zi)
ax.streamplot(xi[:,0], yi[0,:], dx, dy, color='0.8', density=2)

# Contour gridded head observations
contours = ax.contour(xi, yi, zi, linewidths=2)
ax.clabel(contours)

# Plot well locations
ax.plot(x, y, 'ko')

plt.show()
</snippet></ROW><ROW><id>16531594</id><snippet>print os.path.abspath(r"C:\users\bob\nothing.png")
</snippet></ROW><ROW><id>16531594</id><snippet>&gt;&gt;&gt; a = raw_input("Enter Path:")
Enter Path:C:\www\a\nothing.jpg
&gt;&gt;&gt; a
'C:\\www\\a\\nothing.jpg'
</snippet></ROW><ROW><id>16531601</id><snippet>lst = pots[0]

# solution using a for loop
for i, member in enumerate(lst):
    # i is the position in the list
    # member is the data item from the list
    assert lst[i] == member  # cannot ever fail
    if member == the_one_we_want:
        break  # exit loop, variables i and member are set
else:
    # the_one_we_want was never found
    i = -1  # signal that we never found it

# solution using .index() method function on a list
try:
    i = lst.index(the_one_we_want)
except ValueError:
    # the_one_we_want was not found in lst
    i = -1  # signal that we never found it
</snippet></ROW><ROW><id>16531601</id><snippet>else</snippet></ROW><ROW><id>16531601</id><snippet>for</snippet></ROW><ROW><id>16531601</id><snippet>for</snippet></ROW><ROW><id>16531601</id><snippet>else</snippet></ROW><ROW><id>16531601</id><snippet>when_no_break</snippet></ROW><ROW><id>16531601</id><snippet>else</snippet></ROW><ROW><id>16531601</id><snippet>break</snippet></ROW><ROW><id>16531601</id><snippet>for</snippet></ROW><ROW><id>16531601</id><snippet>break</snippet></ROW><ROW><id>16531601</id><snippet>else</snippet></ROW><ROW><id>16531601</id><snippet>for</snippet></ROW><ROW><id>16531601</id><snippet>break</snippet></ROW><ROW><id>16531601</id><snippet>else</snippet></ROW><ROW><id>16531601</id><snippet>if</snippet></ROW><ROW><id>16531601</id><snippet>else</snippet></ROW><ROW><id>16531601</id><snippet>if</snippet></ROW><ROW><id>16531601</id><snippet>else</snippet></ROW><ROW><id>16531601</id><snippet>if</snippet></ROW><ROW><id>16531601</id><snippet>for</snippet></ROW><ROW><id>16531612</id><snippet>[[] for _ in range(3)]
</snippet></ROW><ROW><id>16531612</id><snippet>xrange</snippet></ROW><ROW><id>16531612</id><snippet>Operation       Result                              Notes
s * n, n * s    n shallow copies of s concatenated  (2)
</snippet></ROW><ROW><id>16531837</id><snippet>df = pd.pivot_table(df, rows='WEEK_END_DATE', cols='TITLE_SHORT', values='SALES', aggfunc="sum")
</snippet></ROW><ROW><id>16531905</id><snippet>KeyError</snippet></ROW><ROW><id>16531910</id><snippet>django.contrib.admin.filters.SimpleListFilter</snippet></ROW><ROW><id>16531910</id><snippet>from datetime import date

from django.utils.translation import ugettext_lazy as _
from django.contrib.admin import SimpleListFilter

class IsClosedFilter(SimpleListFilter):
    title = _('Closed')

    parameter_name = 'closed'

    def lookups(self, request, model_admin):
        return (
            (None, _('No')),
            ('yes', _('Yes')),
            ('all', _('All')),
        )

    def choices(self, cl):
        for lookup, title in self.lookup_choices:
            yield {
                'selected': self.value() == lookup,
                'query_string': cl.get_query_string({
                    self.parameter_name: lookup,
                }, []),
                'display': title,
            }

    def queryset(self, request, queryset):
        if self.value() == 'closed':
            return queryset.filter(isClosed=True)    
        elif self.value() == None:
            return queryset.filter(isClosed=False)


class Admin(admin.ModelAdmin): 
    list_filter = [isClosedFilter] 
</snippet></ROW><ROW><id>16532101</id><snippet>row</snippet></ROW><ROW><id>16532101</id><snippet>filelist.append(row[0])
</snippet></ROW><ROW><id>16532101</id><snippet>filelist = [row[0] for row in csv.reader(expenses)]
</snippet></ROW><ROW><id>16532148</id><snippet>import win32com.client as client

xl = client.Dispatch("Excel.Application")
xl.Visible = True
wb = xl.Workbooks.Open("c:/1temp/badacres.xls")
ws = wb.Sheets(1)

tb = ws.Shapes.AddTextbox(1, 570, 45, 171, 80)
tb.TextFrame2.TextRange.Characters.Text = 'This is a great big test.'
</snippet></ROW><ROW><id>16532345</id><snippet>subprocess</snippet></ROW><ROW><id>16532345</id><snippet>subprocess</snippet></ROW><ROW><id>16532345</id><snippet>&amp;</snippet></ROW><ROW><id>16532345</id><snippet>Popen</snippet></ROW><ROW><id>16532345</id><snippet>jobs = []

# ... each time you want to run it on a file ...

jobs.append(subprocess.Popen(['sudo', 'update_file', file],
                             stdout=open(os.path.join('logs', file), 'w'))

# ... at exit time ...

for job in jobs:
    job.wait()
    job.stdout.close()
</snippet></ROW><ROW><id>16532515</id><snippet>insert</snippet></ROW><ROW><id>16532515</id><snippet>?</snippet></ROW><ROW><id>16532515</id><snippet>values</snippet></ROW><ROW><id>16532515</id><snippet>query = 'INSERT INTO {} ({}) VALUES({})'.format(self.table, ', '.join(kwargs), ','.join(['?'] * len(kwargs)))
</snippet></ROW><ROW><id>16532515</id><snippet>self.__db.execute(query, list(kwargs.values()))
</snippet></ROW><ROW><id>16532553</id><snippet>from scipy.sparse import coo_matrix


def reshape(a, shape):
    """Reshape the sparse matrix `a`.

    Returns a coo_matrix with shape `shape`.
    """
    if not hasattr(shape, '__len__') or len(shape) != 2:
        raise ValueError('`shape` must be a sequence of two integers')

    c = a.tocoo()
    nrows, ncols = c.shape
    size = nrows * ncols

    new_size =  shape[0] * shape[1]
    if new_size != size:
        raise ValueError('total size of new array must be unchanged')

    flat_indices = ncols * c.row + c.col
    new_row, new_col = divmod(flat_indices, shape[1])

    b = coo_matrix((c.data, (new_row, new_col)), shape=shape)
    return b
</snippet></ROW><ROW><id>16532553</id><snippet>In [43]: a = coo_matrix([[0,10,0,0],[0,0,0,0],[0,20,30,40]])

In [44]: a.A
Out[44]: 
array([[ 0, 10,  0,  0],
       [ 0,  0,  0,  0],
       [ 0, 20, 30, 40]])

In [45]: b = reshape(a, (2,6))

In [46]: b.A
Out[46]: 
array([[ 0, 10,  0,  0,  0,  0],
       [ 0,  0,  0, 20, 30, 40]])
</snippet></ROW><ROW><id>16532557</id><snippet>num_dec = int(raw_input("Num Decimal Places?")
print "%0.*f"%(num_dec,3.145678923678)
</snippet></ROW><ROW><id>16532557</id><snippet>*</snippet></ROW><ROW><id>16532557</id><snippet>'{}'.Format</snippet></ROW><ROW><id>16532557</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; print "%0.*f"%(3,math.pi)
3.142
&gt;&gt;&gt; print "%0.*f"%(13,math.pi)
3.1415926535898
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16532725</id><snippet>multiprocessing</snippet></ROW><ROW><id>16532725</id><snippet>from multiprocessing import Pool

WORKERS = 10
p = Pool(WORKERS)
p.map(tr, skulist)
</snippet></ROW><ROW><id>16532725</id><snippet>WORKERS</snippet></ROW><ROW><id>16532832</id><snippet>tuple(max(0, min(tupleone[x] - tupletwo[x], 255)) for x in range(3))
</snippet></ROW><ROW><id>16532852</id><snippet>class PrintGList</snippet></ROW><ROW><id>16532852</id><snippet>"""print fields of a struct: wzd struct_object
Iterate through the fields of a struct, and display
a human-readable form of the objects."""
</snippet></ROW><ROW><id>16532852</id><snippet>PrintGList</snippet></ROW><ROW><id>16532852</id><snippet>import gdb

def _type_is_container(t):
    return t.code == gdb.TYPE_CODE_STRUCT

class WZD(gdb.Command):
    '''print fields of a struct: wzd struct_object

Iterate through the fields of a struct, and display
a human-readable form of the objects.'''

    def __init__(self):
        gdb.Command.__init__(self, "wzd", gdb.COMMAND_DATA, gdb.COMPLETE_SYMBOL, True)

    def invoke(self, arg, from_tty):

        arg_list = gdb.string_to_argv(arg)
        if len(arg_list) &lt; 1:
            print "usage: wzd struct"
            return

        n = arg_list[0]
        l = gdb.parse_and_eval(arg_list[0])
        (t, m) = (l.type, l.type.tag)

        print "  variable %s " % n, " type %s " % t

        if l.type.code == gdb.TYPE_CODE_STRUCT:
            print "Found a struct  %s " % n
            self._print_fields(n, t)
        else:
            print "Found no struct"

    def _print_fields(self, n, typeobject):
        print typeobject
        flds = typeobject.fields()
        for x in flds:
            sn = n + "." + x.name
            if _type_is_container(x.type):
                tag_msg = ', tag: %r' % (x.type.tag,)
            else:
                tag_msg = ''
            print '  field %r type %s (code: %s%s)' % (sn, x.type, x.type.code, tag_msg)
            if _type_is_container(x.type):
                print "Found sub level struct  %s " % sn
                sl = gdb.parse_and_eval(sn)
                sm = sl.type.tag
                st = sl.type
                self._print_fields(sn, x.type)

    def _deep_items (self, type_):
        for k, v in type_.iteritems():
            if k:
                print " k v %s " % k , " %s " % v
            else:
                print "   v    ",      " %s " % v

WZD()
</snippet></ROW><ROW><id>16532852</id><snippet>#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;

/* https://github.com/scottt/debugbreak */
#include &lt;debugbreak/debugbreak.h&gt;

struct T {
    int x, y;
};

struct S {
    struct T t;
    char b;
};

int main()
{
    int r;
    struct S s;
    r = scanf("%d%d%c", &amp;s.t.x, &amp;s.t.y, &amp;s.b);
    assert(r == 3);
    debug_break();

    return 0;
}
</snippet></ROW><ROW><id>16532852</id><snippet>$ echo 1 2 x &gt; in
$ gdb -q -x wzd.py struct-read
&lt;...&gt;

(gdb) run &lt; in
&lt;...&gt;
Program received signal SIGTRAP, Trace/breakpoint trap.
main () at struct-read.c:25
25  }

(gdb) wzd s
  variable s   type struct S 
Found a struct  s 
struct S
  field 's.t' type struct T (code: 3, tag: 'T')
Found sub level struct  s.t 
struct T
  field 's.t.x' type int (code: 8)
  field 's.t.y' type int (code: 8)
  field 's.b' type char (code: 8)
</snippet></ROW><ROW><id>16533063</id><snippet>long_description</snippet></ROW><ROW><id>16533063</id><snippet>setup.py</snippet></ROW><ROW><id>16533063</id><snippet>setup(
    # ...
    long_description = urllib.request.urlopen('http://example.com/path/to/mydocs').read()
)
</snippet></ROW><ROW><id>16533063</id><snippet>pythonhosted.org</snippet></ROW><ROW><id>16533063</id><snippet>pkg_edit</snippet></ROW><ROW><id>16533063</id><snippet>upload_docs</snippet></ROW><ROW><id>16533063</id><snippet>distribute</snippet></ROW><ROW><id>16533063</id><snippet>setuptools</snippet></ROW><ROW><id>16533278</id><snippet>def some_view(request):
    context = {
        'a': 5
    }

    return render_to_response(
        'my_template.html',
        context,
        context_instance=RequestContext(request)
    )
</snippet></ROW><ROW><id>16533318</id><snippet>literal_eval</snippet></ROW><ROW><id>16533318</id><snippet>ast</snippet></ROW><ROW><id>16533318</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = "((1, u'Central Plant 1', u'http://egauge.com/'),(2, u'Central Plant 2', u'http://egauge2.com/'))"
&gt;&gt;&gt; ast.literal_eval(s)
((1, u'Central Plant 1', u'http://egauge.com/'), (2, u'Central Plant 2', u'http://egauge2.com/'))
</snippet></ROW><ROW><id>16533374</id><snippet>import</snippet></ROW><ROW><id>16533374</id><snippet>__init__.py</snippet></ROW><ROW><id>16533374</id><snippet>string</snippet></ROW><ROW><id>16533374</id><snippet>__init__.py</snippet></ROW><ROW><id>16533374</id><snippet>__all__</snippet></ROW><ROW><id>16533410</id><snippet>global bookStartLine
global bookEndLine


def grabLine(currentUrl):
    ### blah blah defines what lines is
    currentBookStartLine,currentBookEndLine = False,False #needed to define these before use below
    for index,line in enumerate(lines,start=1): #start = 1 so index gets 1 on first iteration
        if "*** START OF THE PROJECT" in line:
            currentBookStartLine = index
        if "*** END OF THE PROJECT" in line:
            currentBookEndLine = index

    bookStartLine = currentBookStartLine
    bookEndLine   = currentBookEndLine


grabLine('http://www.gutenberg.org/cache/epub/768/pg768.txt') #grabLine not grabline

print(bookStartLine)
print(bookEndLine)
</snippet></ROW><ROW><id>16533580</id><snippet>append</snippet></ROW><ROW><id>16533580</id><snippet>extend</snippet></ROW><ROW><id>16533580</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>16533580</id><snippet>[[1, 2], [3, 4]]</snippet></ROW><ROW><id>16533580</id><snippet>extend</snippet></ROW><ROW><id>16533580</id><snippet>parent</snippet></ROW><ROW><id>16533580</id><snippet>return [parent]</snippet></ROW><ROW><id>16533580</id><snippet>parent</snippet></ROW><ROW><id>16533580</id><snippet>r = []</snippet></ROW><ROW><id>16533580</id><snippet>r = [parent]</snippet></ROW><ROW><id>16533580</id><snippet>if</snippet></ROW><ROW><id>16533580</id><snippet>[parent]</snippet></ROW><ROW><id>16533580</id><snippet>def nodes_from_tree(tree, parent, r=[]):
    r = [parent]
    for child in tree.get_children(parent):
        r.extend(nodes_from_tree(tree, child, r))
    return r
</snippet></ROW><ROW><id>16533580</id><snippet>r</snippet></ROW><ROW><id>16533580</id><snippet>r</snippet></ROW><ROW><id>16533580</id><snippet>def nodes_from_tree(tree, parent):
    r = [parent]
    for child in tree.get_children(parent):
        r.extend(nodes_from_tree(tree, child))
    return r
</snippet></ROW><ROW><id>16533620</id><snippet>elif (computerAnswer == "" and userAnswer == "paper"):  
    print("You lost(rock beats scissors)");
    c = c + 1;
</snippet></ROW><ROW><id>16533620</id><snippet>computerAnswer == ""</snippet></ROW><ROW><id>16533648</id><snippet>import requests
r = requests.get('https://github.com/timeline.json')
</snippet></ROW><ROW><id>16533648</id><snippet>import urllib2
f = urllib2.urlopen('http://www.python.org/')
print f.read(100)
</snippet></ROW><ROW><id>16533648</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;?xml-stylesheet href="./css/ht2html
</snippet></ROW><ROW><id>16533692</id><snippet>try:
    x,y = nontest()
except TypeError:
    # do the None-thing here or pass
</snippet></ROW><ROW><id>16533692</id><snippet>res = nontest()

if res is None:
    ....
else:
    x, y = res
</snippet></ROW><ROW><id>16534218</id><snippet>&gt;&gt;&gt;import sys
&gt;&gt;&gt;sys.getdefaultencoding()
</snippet></ROW><ROW><id>16534514</id><snippet>xlim</snippet></ROW><ROW><id>16534514</id><snippet>ax.set_xlim</snippet></ROW><ROW><id>16534514</id><snippet>plt.xlim((5,10))</snippet></ROW><ROW><id>16534514</id><snippet>import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_ylim((0, 2100))
ax.bar(0, 2000, width=5)
ax.bar(100, 500, width=5)
ax.bar(40, 1500, width=5)
</snippet></ROW><ROW><id>16534514</id><snippet>set_xlim</snippet></ROW><ROW><id>16534514</id><snippet>ax.set_xlim((-50,150))
ax.set_xticks(np.arange(-50, 150, 20))
plt.show()
</snippet></ROW><ROW><id>16534514</id><snippet>plt.xlim(left, right)</snippet></ROW><ROW><id>16534514</id><snippet>xlim</snippet></ROW><ROW><id>16534514</id><snippet>(0, 100)</snippet></ROW><ROW><id>16534514</id><snippet>(0, 10**2)</snippet></ROW><ROW><id>16534514</id><snippet>ax.set_xscale("log")</snippet></ROW><ROW><id>16534523</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>16534523</id><snippet>from bs4 import BeautifulSoup as BS
# given your html as the variable 'html'
soup = BS(html, "xml")
pages = soup.find_all('page')
for page in pages:
    if page.ns.text == '0':
        print page.title.text
</snippet></ROW><ROW><id>16534523</id><snippet>int</snippet></ROW><ROW><id>16534523</id><snippet>&lt;ns&gt;</snippet></ROW><ROW><id>16534523</id><snippet>== 0</snippet></ROW><ROW><id>16534523</id><snippet>'0'</snippet></ROW><ROW><id>16534536</id><snippet>float(line)</snippet></ROW><ROW><id>16534536</id><snippet>float</snippet></ROW><ROW><id>16534536</id><snippet>float_line = float(line)
</snippet></ROW><ROW><id>16534536</id><snippet>float(line)</snippet></ROW><ROW><id>16534536</id><snippet>float_line = None
if line.isdigit():
    float_line = float(line)
else:
    print 'ERROR: Input needs to be a DIGIT or FLOAT.'
</snippet></ROW><ROW><id>16534536</id><snippet>ValueError</snippet></ROW><ROW><id>16534536</id><snippet>line</snippet></ROW><ROW><id>16534536</id><snippet>except</snippet></ROW><ROW><id>16534536</id><snippet>try:
    float_line = float(line)
except ValueError:
    float_line = None
</snippet></ROW><ROW><id>16534758</id><snippet>import numpy as np

e = np.arange(0, 1, 0.1)
vvals = []
nu = np.linspace(0, 2 * np.pi, 5000)
for i in e:
    v = np.sqrt(i ** 2 + 2 * i * np.cos(nu) + 1)
    vvals.append(v)

for v in vvals:
    pylab.plot(nu, v)

pylab.show()
</snippet></ROW><ROW><id>16534758</id><snippet>numpy</snippet></ROW><ROW><id>16534758</id><snippet>import numpy as np

e = np.arange(0, 1, 0.1).reshape(-1, 1)
nu = np.linspace(0, 2 * np.pi, 5000).reshape(1, -1)
vvals = np.sqrt((e ** 2) * np.ones(nu.shape) + 2 * e * np.cos(nu) + 1)

for v, _e in zip(vvals, e.ravel()):
    pylab.plot(nu.ravel(), v, label=str(_e))

pylab.legend()    

pylab.show()
</snippet></ROW><ROW><id>16534838</id><snippet>json</snippet></ROW><ROW><id>16535221</id><snippet>import threading
import time
t = threading.Thread(target=TheStepBuffer.Buffer30m, args=(TheLines,TheBuffer,size))
t.start()

while (t.is_alive()):
    time.sleep(2)  ## sleep so that we don't execute the print statement too often
    print "I'm alive!"
</snippet></ROW><ROW><id>16535221</id><snippet>TheStepBuffer.Buffer30m</snippet></ROW><ROW><id>16535221</id><snippet>print</snippet></ROW><ROW><id>16535453</id><snippet>cv2</snippet></ROW><ROW><id>16535453</id><snippet>.copy()</snippet></ROW><ROW><id>16535453</id><snippet>In [1]: import numpy as np

In [2]: x = np.arange(10*10).reshape((10,10))

In [4]: y = x[3:7,3:7].copy()

In [6]: y[2,2] = 1000

In [8]: 1000 in x
Out[8]: False     # see, 1000 in y doesn't change values in x, parent array.
</snippet></ROW><ROW><id>16535467</id><snippet>identifier ::= (letter|"_") (letter | digit | "_")* 
</snippet></ROW><ROW><id>16535467</id><snippet>2if</snippet></ROW><ROW><id>16535467</id><snippet>2</snippet></ROW><ROW><id>16535467</id><snippet>if</snippet></ROW><ROW><id>16535467</id><snippet>2if-1e1else 1</snippet></ROW><ROW><id>16535467</id><snippet>2if</snippet></ROW><ROW><id>16535467</id><snippet>2</snippet></ROW><ROW><id>16535467</id><snippet>digit ::= "0"..."9"</snippet></ROW><ROW><id>16535467</id><snippet>if</snippet></ROW><ROW><id>16535467</id><snippet>-1e1else</snippet></ROW><ROW><id>16535467</id><snippet>-1</snippet></ROW><ROW><id>16535467</id><snippet>u_expr ::= power | "-" u_expr | "+" u_expr | "~" u_expr</snippet></ROW><ROW><id>16535467</id><snippet>1</snippet></ROW><ROW><id>16535467</id><snippet>intpart</snippet></ROW><ROW><id>16535467</id><snippet>exponentfloat ::= (intpart | pointfloat) | exponent</snippet></ROW><ROW><id>16535467</id><snippet>e1</snippet></ROW><ROW><id>16535467</id><snippet>exponent ::= ("e" | "E") ["+" | "-"] digit+</snippet></ROW><ROW><id>16535467</id><snippet>Ne+|-x</snippet></ROW><ROW><id>16535467</id><snippet>&gt;&gt;&gt; type(2e3)
&lt;type 'float'&gt;
</snippet></ROW><ROW><id>16535467</id><snippet>else</snippet></ROW><ROW><id>16535467</id><snippet>-1</snippet></ROW><ROW><id>16535503</id><snippet>def textSearch(substring,overlapping):
    def parametrisedTextSearch(text):
        # Do Stuff. Can refer to substring and overlapping here.
        return index
    return parametrisedTextSearch

mySearch = textSearch(substring = whatever, overlapping = whatever)

mySearch("Pancakes")
</snippet></ROW><ROW><id>16536081</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>16536081</id><snippet>from copy import deepcopy
new_list = deepcopy([[1], [1, 2], [1, 2, 3]])
</snippet></ROW><ROW><id>16536081</id><snippet>&gt;&gt;&gt; lis = [[1], [1, 2], [1, 2, 3]]
&gt;&gt;&gt; new_lis = lis[:]                    # creates a shallow copy
&gt;&gt;&gt; [id(x)==id(y) for x,y in zip(lis,new_lis)]
[True, True, True]                     #inner lists are still the same object

&gt;&gt;&gt; new_lis1 = deepcopy(lis)           # create a deep copy
&gt;&gt;&gt; [id(x)==id(y) for x,y in zip(lis,new_lis1)]
[False, False, False]                 #inner lists are now different object
</snippet></ROW><ROW><id>16536129</id><snippet>open(filename, "rb")</snippet></ROW><ROW><id>16536129</id><snippet>'\r\n'</snippet></ROW><ROW><id>16536129</id><snippet>'\n'</snippet></ROW><ROW><id>16536129</id><snippet>'\r\n'</snippet></ROW><ROW><id>16536129</id><snippet>b</snippet></ROW><ROW><id>16536290</id><snippet>class A(object):
    v = []               # Class attribute, shared across all instances!
</snippet></ROW><ROW><id>16536290</id><snippet>class A(object):
    def __init__(self):  # Instance attribute, created anew for each new object
        self.v = []
</snippet></ROW><ROW><id>16536622</id><snippet>.decode('utf8')</snippet></ROW><ROW><id>16536622</id><snippet>p.communicate()</snippet></ROW><ROW><id>16536622</id><snippet>check_output()</snippet></ROW><ROW><id>16536622</id><snippet>check_output(['date','+%m/%d/%y'])</snippet></ROW><ROW><id>16536622</id><snippet>import subprocess
result = subprocess.check_output(['date', '+%m/%d/%y']).decode('utf8').rstrip()
print (result)
</snippet></ROW><ROW><id>16536622</id><snippet>subprocess</snippet></ROW><ROW><id>16536622</id><snippet>time.strftime()</snippet></ROW><ROW><id>16536622</id><snippet>import time
print(time.strftime('%m/%d/%y'))
</snippet></ROW><ROW><id>16536622</id><snippet> import datetime 
 print datetime.date.today().strftime('%m/%d/%y') 
</snippet></ROW><ROW><id>16536735</id><snippet>StringIO</snippet></ROW><ROW><id>16536735</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; string=r'"20568078","240431","jpg","St, Carolina 1920",,'
&gt;&gt;&gt; for r in csv.reader(StringIO(string)):
        print (r)


['20568078', '240431', 'jpg', 'St, Carolina 1920', '', '']
</snippet></ROW><ROW><id>16536735</id><snippet>csv.reader(csvfile, dialect='excel', **fmtparams)</snippet></ROW><ROW><id>16536735</id><snippet>csvfile</snippet></ROW><ROW><id>16536735</id><snippet>csvfile</snippet></ROW><ROW><id>16536735</id><snippet>next()</snippet></ROW><ROW><id>16536735</id><snippet>file</snippet></ROW><ROW><id>16536735</id><snippet>list</snippet></ROW><ROW><id>16536735</id><snippet>reader</snippet></ROW><ROW><id>16536735</id><snippet>&gt;&gt;&gt; string=r'"20568078","240431","jpg","St, Carolina 1920",,'
&gt;&gt;&gt; i = iter(string)
&gt;&gt;&gt; next(i)
'"'
&gt;&gt;&gt; next(i)
'2'
</snippet></ROW><ROW><id>16536735</id><snippet>csv</snippet></ROW><ROW><id>16536735</id><snippet>next</snippet></ROW><ROW><id>16537629</id><snippet>for word in ignoreWords:
    if word not in inputFileName.lower():
</snippet></ROW><ROW><id>16537629</id><snippet>if not any(word in inputFileName.lower() for word in ignoreWords):
</snippet></ROW><ROW><id>16537701</id><snippet>print sorted(student_tuples, key=lambda t: (-t[2], t[0]))
# [('john', 'A', 15), ('dave', 'C', 12), ('peter', 'B', 12)]
</snippet></ROW><ROW><id>16537769</id><snippet>name = 'Project_Name'
glob.glob(os.path.join(directory, '{}_*.txt'.format(name)))
</snippet></ROW><ROW><id>16538272</id><snippet>class C(A):
    def abstract_function(self):
        print 'his is not an abstract class'
</snippet></ROW><ROW><id>16538272</id><snippet>c = C()
c.random_function()
</snippet></ROW><ROW><id>16538272</id><snippet>class A(object):
    name = None
    def random_function(self):
        print self.name
</snippet></ROW><ROW><id>16538487</id><snippet>__init__</snippet></ROW><ROW><id>16538487</id><snippet>super(...).__init__</snippet></ROW><ROW><id>16538487</id><snippet>class DropDownList(forms.Form):
    switch = forms.ModelChoiceField(queryset=Book.objects.none().order_by('name'), widget=forms.Select(attrs={"onChange": 'submit()'}), required=False, initial=0)

    def __init__(self, u, *args, **kwargs):
        super(DropDownList, self).__init__(*args, **kwargs)
        self.fields['switch'].queryset = Book.objects.filter(owner=u)
</snippet></ROW><ROW><id>16538487</id><snippet>max_length</snippet></ROW><ROW><id>16538487</id><snippet>max_lenght</snippet></ROW><ROW><id>16538487</id><snippet>class Book(models.Model):
    name = models.CharField(max_length=200, default='')
    owner = models.CharField(max_length=200, default='')

    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>16538630</id><snippet>__code__</snippet></ROW><ROW><id>16538630</id><snippet>__code__.co_argcount</snippet></ROW><ROW><id>16538630</id><snippet>eval</snippet></ROW><ROW><id>16538630</id><snippet>locals</snippet></ROW><ROW><id>16538630</id><snippet>code_str = """
print "this is my global x = " + x
print "And another line is done"
print param
"""

compiled = compile(code_str, "&lt;string&gt;", "exec")
func_template = lambda p=None: eval(compiled, globals(), {'param': p})

x = "1"
func_template()
func_template("2")
</snippet></ROW><ROW><id>16538630</id><snippet>func_template = lambda **kwargs: eval(compiled, globals(), **kwargs)
</snippet></ROW><ROW><id>16538630</id><snippet>'eval'</snippet></ROW><ROW><id>16539241</id><snippet>extend_access_token</snippet></ROW><ROW><id>16539382</id><snippet>   def edit_kmz(kmz,output,image):

        ##Read the doc.kml file in the kmz and rewrite the doc.kml file

        zf = zipfile.ZipFile(kmz)
        temp = r'tempfolder\doc.kml'
        for line in zf.read("doc.kml").split("\n"):
            with open(temp,'a') as wf: #Create the doc.kml
                if "&lt;/body&gt;" in line:
                    wf.write("&lt;/body&gt;\n&lt;img src='files/Ovr0.png' width = 750 height=500&lt;/img&gt;\n") 
                else:
                    wf.write('%s\n'%(line))
        zf.close()

        ##Rezip the file

        zf = zipfile.ZipFile(output,'a')
        zf.write(image,arcname='files/Ovr0.png') ##Relative Path to the Image
        zf.write(temp,arcname='doc.kml') ##Add revised doc.kml file
        zf.close()
</snippet></ROW><ROW><id>16539542</id><snippet>def get(selt):
    greeting = self.get_argument('greeting', 'Hello')
    self.write(greeting+', friendly user!')
</snippet></ROW><ROW><id>16539542</id><snippet>def get(self): #change
    greeting = self.get_argument('greeting', 'Hello')
    self.write(greeting+', friendly user!')
</snippet></ROW><ROW><id>16539545</id><snippet>import codecs

def opener(filename):
    try:
        f = codecs.open(filename, encoding='utf-8')
    except UnicodeError:
        f = open(filename)
    return f
</snippet></ROW><ROW><id>16539554</id><snippet>changelist_view</snippet></ROW><ROW><id>16539554</id><snippet>TemplateResponse()</snippet></ROW><ROW><id>16539554</id><snippet>def changelist_view(self, request, extra_context=None):
    # a lot of stuff happen here
    return TemplateResponse(request, self.change_list_template or [
        'admin/%s/%s/change_list.html' % (app_label, opts.object_name.lower()),
        'admin/%s/change_list.html' % app_label,
        'admin/change_list.html'
    ], context, current_app=self.admin_site.name)
</snippet></ROW><ROW><id>16539554</id><snippet>def changelist(self, request, extra_context=None):
    if request.GET['foo']:
        self.change_list_template = "students/student_change_list_other.html"

    return super(STUDENTAdmin, self).changelist_view(request, extra_context)
</snippet></ROW><ROW><id>16539667</id><snippet>import codecs
rfil = codecs.open(fil, "r", "utf_8_sig")
</snippet></ROW><ROW><id>16539667</id><snippet>wfil = codecs.open(txtFil, "w", "utf_8")
</snippet></ROW><ROW><id>16539776</id><snippet>bge</snippet></ROW><ROW><id>16539776</id><snippet>cam = bge.logic.getCurrentScene().active_camera</snippet></ROW><ROW><id>16539776</id><snippet>import bge

def main():
    cam = bge.logic.getCurrentScene().active_camera
    obj = bge.logic.getCurrentController().owner
    obj.worldPosition.y = cam.worldPosition.y
    obj.worldPosition.z = cam.worldPosition.z

main()
</snippet></ROW><ROW><id>16539806</id><snippet>created==True</snippet></ROW><ROW><id>16539806</id><snippet>m2m_changed</snippet></ROW><ROW><id>16539868</id><snippet>logging.exception()</snippet></ROW><ROW><id>16539868</id><snippet>log = logging.getLogger('some-identifier')

try:
    #
except DataCollectorError:
    log.exception('An error occurred')
</snippet></ROW><ROW><id>16539868</id><snippet>.args</snippet></ROW><ROW><id>16539868</id><snippet>== False</snippet></ROW><ROW><id>16539868</id><snippet>not</snippet></ROW><ROW><id>16539868</id><snippet>if not isinstance(regIndex, int):
</snippet></ROW><ROW><id>16539868</id><snippet>raise ParamNullError("register index is null")
</snippet></ROW><ROW><id>16539868</id><snippet>raise class, message</snippet></ROW><ROW><id>16539941</id><snippet>list.sort()</snippet></ROW><ROW><id>16539941</id><snippet>sorted</snippet></ROW><ROW><id>16539941</id><snippet>&gt;&gt;&gt; L = [{'status': 1, 'country': 'France'}, {'status': 1, 'country': 'canada'}, {'status': 1, 'country': 'usa'}]
&gt;&gt;&gt; L.sort(key= lambda x:x['country'])
&gt;&gt;&gt; L
[{'status': 1, 'country': 'France'}, {'status': 1, 'country': 'canada'}, {'status': 1, 'country': 'usa'}]
</snippet></ROW><ROW><id>16539941</id><snippet>reverse = True</snippet></ROW><ROW><id>16539941</id><snippet>sort</snippet></ROW><ROW><id>16539941</id><snippet>sorted</snippet></ROW><ROW><id>16539941</id><snippet>str.lower</snippet></ROW><ROW><id>16539941</id><snippet>&gt;&gt;&gt; L.sort(key= lambda x:x['country'].lower())
&gt;&gt;&gt; L
[{'status': 1, 'country': 'canada'}, {'status': 1, 'country': 'France'}, {'status': 1, 'country': 'usa'}]
</snippet></ROW><ROW><id>16540002</id><snippet>list_filter</snippet></ROW><ROW><id>16540219</id><snippet>modelsgert</snippet></ROW><ROW><id>16540219</id><snippet>modelsgert</snippet></ROW><ROW><id>16540219</id><snippet>Diagnose</snippet></ROW><ROW><id>16540219</id><snippet>listofdiagnoses = [d.id for d in diagnose]
</snippet></ROW><ROW><id>16540219</id><snippet>Diagnose</snippet></ROW><ROW><id>16540346</id><snippet>from django.contrib.auth.admin import UserAdmin as DjangoUserAdmin
from django.contrib.auth.models import User

class UserAdmin(DjangoUserAdmin):
    list_display = ('email', 'first_name', 'last_name','is_active','date_joined', 'is_staff', 'user_type', 'salary')

    def user_type(self, instance):
        try:
            instance.student
            return "student"
        except Student.DoesNotExist:
            return "professor"

    def salary(self, instance):
        try:
            return instance.professor.salary
        except Professor.DoesNotExist:
            return "N/A"

    def queryset(self, request):
        qs = super(UserAdmin, self).queryset(request)
        # To reduce database calls
        return qs.select_related('student', 'professor')


admin.site.unregister(User)
admin.site.register(User, UserAdmin)
</snippet></ROW><ROW><id>16540346</id><snippet>user_type</snippet></ROW><ROW><id>16540346</id><snippet>salary</snippet></ROW><ROW><id>16540504</id><snippet>QtGui.QApplication</snippet></ROW><ROW><id>16540504</id><snippet>QtCore.QCoreApplication</snippet></ROW><ROW><id>16540504</id><snippet>#from utils import sigint

import functools
from PyQt4.QtCore import QTimer, QCoreApplication
app = QCoreApplication([])

def onTimer(initParams):
    print initParams
    print "HERE"
    # your code here...
def update():
    print "Upd"
myInitParams = "Init!"
timerCallback = functools.partial(onTimer, myInitParams)
myTimer = QTimer()
myTimer.timeout.connect(timerCallback)
myTimer.start(1000) #once a sec

t = QTimer()

t.start(500)
t.timeout.connect(update)

# use a timer to stop the event loop after some time
stopTimer = QTimer(timeout=app.quit, singleShot=True)
stopTimer.start(4000)

app.exec_()
</snippet></ROW><ROW><id>16540504</id><snippet>PlayMarkerCall</snippet></ROW><ROW><id>16540504</id><snippet>myTimer</snippet></ROW><ROW><id>16540504</id><snippet>QTimer</snippet></ROW><ROW><id>16540504</id><snippet>timerEvent</snippet></ROW><ROW><id>16540536</id><snippet>if a + b + c ==  1000 and a**2 + b**2 == c**2:
</snippet></ROW><ROW><id>16540536</id><snippet>c = 1000 - b - a</snippet></ROW><ROW><id>16540536</id><snippet>for</snippet></ROW><ROW><id>16540536</id><snippet>while</snippet></ROW><ROW><id>16540536</id><snippet>def getValue():
    for a in range(1, 1000):
        for b in range(a, 1000):
            c = 1000 - a - b
            if a ** 2 + b ** 2 == c ** 2:
                print("A : {} B : {} C:{}".format(a, b, c))
                return a * b * c
</snippet></ROW><ROW><id>16540623</id><snippet>entry</snippet></ROW><ROW><id>16540623</id><snippet>CustomerDetail.__init__</snippet></ROW><ROW><id>16540623</id><snippet>class CustomerDetail ( wx.Dialog ):
    def __init__( self, parent,entry ):
        wx.Dialog.__init__ ( self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = wx.Size( 690,500 ), style = wx.DEFAULT_DIALOG_STYLE )
        self.entry = entry
        # &lt;rest of code here&gt;
</snippet></ROW><ROW><id>16540623</id><snippet>__init__</snippet></ROW><ROW><id>16540654</id><snippet>A[-1] += B[0]  # update the last element of A to tag on contents of B[0]
A.extend(B[1:])  # extend A with B but exclude the first element
</snippet></ROW><ROW><id>16540654</id><snippet>&gt;&gt;&gt; A = ['1633437.0413', '5417978.6108', '1633433.2865', '54']
&gt;&gt;&gt; B = ['79770.3904', '1633434.364', '5417983.127', '1633435.2672']
&gt;&gt;&gt; A[-1] += B[0]
&gt;&gt;&gt; A.extend(B[1:])
&gt;&gt;&gt; A
['1633437.0413', '5417978.6108', '1633433.2865', '5479770.3904', '1633434.364', '5417983.127', '1633435.2672']
</snippet></ROW><ROW><id>16541013</id><snippet>collections.Counter</snippet></ROW><ROW><id>16541013</id><snippet>from collections import Counter
lis1 = []
lis2 = []
with open("abc") as f:
    c = Counter(line.split()[0] for line in f)

for key,val in c.items():
    if val == 1:
        lis1.append(key)
    else:
        lis2.extend([key]*val)
print lis1
print lis2
</snippet></ROW><ROW><id>16541013</id><snippet>['Meni45', 'Meni22']
['Meni32_2', 'Meni32_2', 'Meni45_1', 'Meni45_1']
</snippet></ROW><ROW><id>16541013</id><snippet>from collections import defaultdict
lis1 = []
lis2 = []

with open("abc") as f:
    dic = defaultdict(list)
    for line in f:
        spl =line.split()
        dic[spl[0]].append(spl[1:])

for key,val in dic.items():
    if len(val) == 1:
        lis1.append(key)
    else:
        lis2.append(key)
print lis1
print lis2

print dic["Meni32_2"]  #access columns related to any key from the the dict
</snippet></ROW><ROW><id>16541013</id><snippet>['Meni45', 'Meni22']
['Meni32_2', 'Meni45_1']
[['xxxx', 'xxxx'], ['xxxx', 'xxxx']]
</snippet></ROW><ROW><id>16541057</id><snippet># -*- coding: utf-8 -*- # &lt;nbformat&gt;3.0&lt;/nbformat&gt;

import paramiko
import os


savefile = 'dump.sql'
mykey = paramiko.RSAKey.from_private_key_file("/users/me/my-host.pem")

client = paramiko.SSHClient()
client.load_system_host_keys()
client.connect('hungry.turtles.com', username = "turtles", pkey = mykey)


def ssh(cmd):
    out = []
    msg = [stdin, stdout, stderr] = client.exec_command(cmd)
    for item in msg:
        try:
            for line in item:
                out.append(line.strip('\n'))
        except: pass

    return(list(out))

dump = ssh('mysqldump -u root -ppassword turtleturds')

file = open(savefile, 'w')
file.write(str(dump))
file.close()
print 'The dump had '+ str(len(dump))+ ' lines and was saved to '+ str(os.path.realpath('dump.sql'))
</snippet></ROW><ROW><id>16541092</id><snippet>google_appengine_1.8.0.zip
71b5f3ee06dce0a7d6af32d65ae27272eac038cb
</snippet></ROW><ROW><id>16541092</id><snippet>.
├── app.py
├── app.pyc
├── app.yaml
└── static
    └── hi.txt
</snippet></ROW><ROW><id>16541092</id><snippet>import webapp2
import os

class MainPage(webapp2.RequestHandler):
    def get(self):
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.out.write('Hello, webapp World!\n\n')

        path = os.path.join(os.path.split(__file__)[0], 'static/hi.txt')
        self.response.out.write(open(path).readlines()[0])

application = webapp2.WSGIApplication([('/.*', MainPage)])
</snippet></ROW><ROW><id>16541092</id><snippet>application: myapp
version: 1
runtime: python27
api_version: 1
threadsafe: yes

handlers:
- url: /static
  static_dir: static
  application_readable: true
- url: /.*
  script: app.application
</snippet></ROW><ROW><id>16541092</id><snippet>Ezra can see this text fine; I'm not sure why you can't... Hi!
</snippet></ROW><ROW><id>16541092</id><snippet> dev_appserver.py --port 80 .
</snippet></ROW><ROW><id>16541092</id><snippet>http://localhost/</snippet></ROW><ROW><id>16541092</id><snippet>INFO     2013-05-14 09:45:57,372 server.py:585] default: "GET / HTTP/1.1" 200 85
</snippet></ROW><ROW><id>16541092</id><snippet>http://localhost/static/hi.txt</snippet></ROW><ROW><id>16541092</id><snippet>INFO     2013-05-14 09:48:42,785 server.py:585] default: "GET /static/hi.txt HTTP/1.1" 200 63
</snippet></ROW><ROW><id>16541092</id><snippet>application_readable: true</snippet></ROW><ROW><id>16541092</id><snippet>http://localhost/</snippet></ROW><ROW><id>16541092</id><snippet>ERROR    2013-05-14 09:51:13,290 webapp2.py:1528] [Errno 13] file not accessible: '.../static/hi.txt'
</snippet></ROW><ROW><id>16541223</id><snippet>.py</snippet></ROW><ROW><id>16541223</id><snippet>.pyw</snippet></ROW><ROW><id>16541223</id><snippet>.pyw</snippet></ROW><ROW><id>16541304</id><snippet>Tk</snippet></ROW><ROW><id>16541304</id><snippet>Tk</snippet></ROW><ROW><id>16541304</id><snippet>mainloop</snippet></ROW><ROW><id>16541304</id><snippet>Toplevel</snippet></ROW><ROW><id>16541304</id><snippet>Frame</snippet></ROW><ROW><id>16541304</id><snippet>Toplevel</snippet></ROW><ROW><id>16541304</id><snippet>Tk</snippet></ROW><ROW><id>16541304</id><snippet># module1.py
import Tkinter as tk
class Module1(tk.Frame):
    def __init__(self, *args, **kwargs):
        label = tk.Label(self, text="I am module 1")
        label.pack(side="top", fill="both", expand=True)

# this code will not run if this module is imported
if __name__ == "__main__":
    root = tk.Tk()
    m1 = Module1(root)
    m1.pack(side="top", fill="both", expand=True)
</snippet></ROW><ROW><id>16541304</id><snippet>python module1.py</snippet></ROW><ROW><id>16541304</id><snippet>Tk</snippet></ROW><ROW><id>16541304</id><snippet># main.py
import Tkinter as tk
from module1 import Module1
from module2 import Module2

# create the main window; every Tkinter app needs
# exactly one instance of this class
root = tk.Tk()
m1 = Module1(root)
m1.pack(side="top", fill="both", expand=True)

# create a second window
second = tk.Toplevel(root)
m2 = Module2(second)
m2.pack(side="top", fill="both", expand=True)

# run the event loop
root.mainloop()
</snippet></ROW><ROW><id>16541516</id><snippet>googlemaps.py</snippet></ROW><ROW><id>16541516</id><snippet>GoogleMaps</snippet></ROW><ROW><id>16541726</id><snippet>np.cumsum(x[::-1])[::-1] 
</snippet></ROW><ROW><id>16542039</id><snippet>get_all_regions()</snippet></ROW><ROW><id>16542136</id><snippet>&gt;&gt;&gt; def printMatrix(testMatrix):
        print ' ',
        for i in range(len(matrix[1])):  # Make it work with non square matrices.
              print i,
        print
        for i, element in enumerate(testMatrix):
              print i, ' '.join(element)
&gt;&gt;&gt; matrix = [['A']*4 for i in range(4)]
&gt;&gt;&gt; printMatrix(matrix)
  0 1 2 3
0 A A A A
1 A A A A
2 A A A A
3 A A A A
&gt;&gt;&gt; matrix = [['A']*6 for i in range(4)]
&gt;&gt;&gt; printMatrix(matrix)
  0 1 2 3 4 5
0 A A A A A A
1 A A A A A A
2 A A A A A A
3 A A A A A A
</snippet></ROW><ROW><id>16542136</id><snippet>&amp;</snippet></ROW><ROW><id>16542136</id><snippet>&gt;&gt;&gt; def printMatrix2(testMatrix):
    print ' ',
    for i in range(len(matrix[1])):
        print i,
    print
    for i, element in enumerate(testMatrix):
        print i, ' '.join([elem if len(elem) == 1 else '&amp;' for elem in element])
&gt;&gt;&gt; matrix = [['A']*6 for i in range(4)]
&gt;&gt;&gt; matrix[1][1] = 'AB'
&gt;&gt;&gt; printMatrix(matrix)
  0 1 2 3 4 5
0 A A A A A A
1 A AB A A A A
2 A A A A A A
3 A A A A A A
&gt;&gt;&gt; printMatrix2(matrix)
  0 1 2 3 4 5
0 A A A A A A
1 A &amp; A A A A
2 A A A A A A
3 A A A A A A
</snippet></ROW><ROW><id>16542268</id><snippet>.communicate()</snippet></ROW><ROW><id>16542268</id><snippet>test.py</snippet></ROW><ROW><id>16542268</id><snippet>import sys
from subprocess import Popen, PIPE

CREATE_NEW_PROCESS_GROUP = 0x00000200
DETACHED_PROCESS = 0x00000008

p = Popen('grandchild', stdin=PIPE, stdout=PIPE, stderr=PIPE,
          creationflags=DETACHED_PROCESS | CREATE_NEW_PROCESS_GROUP)
</snippet></ROW><ROW><id>16542555</id><snippet>/w/</snippet></ROW><ROW><id>16542555</id><snippet>/</snippet></ROW><ROW><id>16542555</id><snippet>Site</snippet></ROW><ROW><id>16542555</id><snippet>path</snippet></ROW><ROW><id>16542555</id><snippet>site = mwclient.Site('192.168.1.143', path='/')
</snippet></ROW><ROW><id>16542792</id><snippet>keys = {"hello":{"postfix":"bonjour", "count":0}, 
        "hi":{"postfix":"kiss", "count":0}}

frequencies = ["hello","hi","hello","hello"]

for item in frequencies:
    keys[item]["count"] += 1

print('&lt;table&gt;')
for k,v in keys.items():
    print("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;"
          .format(k, v["count"], v["postfix"]))
print('&lt;/table&gt;')
</snippet></ROW><ROW><id>16542827</id><snippet>path=GtkTreeStore.get_path(name)
path_value=str(path)
</snippet></ROW><ROW><id>16542827</id><snippet>number_title_path=GtkTreeStore.get_iter(path_value[:1])
number_header_path=GtkTreeStore.get_iter(path_value[:3])
number_path=GtkTreeStore.get_iter(path_value)
</snippet></ROW><ROW><id>16542827</id><snippet>model=GtkTreeView.get_model()
number_title=model.get_value(number_title_path,0)
number_header=model.get_value(number_header_path,0)
number=model.get_value(number_path,0)
</snippet></ROW><ROW><id>16542941</id><snippet>call/cc</snippet></ROW><ROW><id>16543056</id><snippet>import traceback
from collections import defaultdict
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.orm.interfaces import SessionExtension


# TODO cleanup commited sessions
class MySessionUsageInspector(SessionExtension):

    def __init__(self):
        self.connections = defaultdict(list)

    def after_begin(self, session, transaction, connection):
        self.connections[connection].append(traceback.format_stack()[0])

    def repr_usage(self):
        for cnn, callers in self.connections.items():
            print(cnn)
            for index, caller in enumerate(callers):
                print('\t', index, caller)


if __name__ == '__main__':
    engine = create_engine('sqlite://')
    session_inspector = MySessionUsageInspector()
    Session = scoped_session(sessionmaker(bind=engine, 
        extension=session_inspector)
    )
    session = Session()

    session.execute('select 1;')
    session.commit()
    session.execute('select 2;')

    print('Session usage:')
    session_inspector.repr_usage()
</snippet></ROW><ROW><id>16543094</id><snippet>exec</snippet></ROW><ROW><id>16543094</id><snippet>subprocess.call(['find', DIRECTORY, '-mtime', '+5', '-exec', 'rm', '{}', ';'])
</snippet></ROW><ROW><id>16543509</id><snippet>reactor.stop()</snippet></ROW><ROW><id>16543509</id><snippet>DeferredList</snippet></ROW><ROW><id>16543509</id><snippet>def thing_that_does_http():
    # create semaphore to manage the deferreds
    semaphore = twisted.internet.defer.DeferredSemaphore(2)

    # create a list with all urls to check
    dl = DeferredList()
    # append deferreds to list
    for url in self._urls:
        # returns deferred
        dl.append(semaphore.run(self._getPage, url))

    # get a DefferedList
    dl = twisted.internet.defer.DeferredList(dl)
    # add some callbacks for error handling
    dl.addErrback(self._handleError)
    return dl
</snippet></ROW><ROW><id>16543509</id><snippet>reactor.listenTCP(8123, TCPEventReceiverFactory())
loop_http = twisted.intertnet.task.LoopingCall(thing_that_does_http)
# run once per minute, starting now.
loop_http.start(60)
</snippet></ROW><ROW><id>16543509</id><snippet>LoopingCall</snippet></ROW><ROW><id>16543509</id><snippet>getPage</snippet></ROW><ROW><id>16543509</id><snippet>twisted.internet.reactor</snippet></ROW><ROW><id>16543509</id><snippet>LoopingCall</snippet></ROW><ROW><id>16543509</id><snippet>start()</snippet></ROW><ROW><id>16543509</id><snippet>clock</snippet></ROW><ROW><id>16543509</id><snippet>from twisted.internet.task import Clock
fake_reactor = Clock()
loop_http.clock = fake_reactor
fake_reactor.advance(120)  # move time forward two minutes...
</snippet></ROW><ROW><id>16543509</id><snippet>getPage()</snippet></ROW><ROW><id>16543509</id><snippet>t.w.c.Agent</snippet></ROW><ROW><id>16543509</id><snippet>Agent</snippet></ROW><ROW><id>16543509</id><snippet>Producer</snippet></ROW><ROW><id>16543509</id><snippet>Protocol</snippet></ROW><ROW><id>16543509</id><snippet>FileBodyProducer</snippet></ROW><ROW><id>16543509</id><snippet>getPage</snippet></ROW><ROW><id>16543509</id><snippet>Agent</snippet></ROW><ROW><id>16543509</id><snippet>from cStringIO import StringIO
from twisted.internet.defer import Deferred
from twisted.internet.protocol import Protocol
from twisted.web.client import ResponseDone
from twisted.web.client import FileBodyProducer


class GetPageProtocol(Protocol):
    def __init__(self):
        self.deferred = Deferred()
        self.data = []

    def dataReceived(self, data):
        self.data.append(data)

    def connectionLost(self, reason):
        reason.trap(ResponseDone)
        data = ''.join(self.data)
        del self.data
        self.deferred.callback(data)


def agentGetPage(agent, url,
                 method="GET",
                 headers=None,
                 postdata=None):
    if postdata is not None:
        bodyProducer = FileBodyProducer(StringIO(postdata))
    else:
        bodyProducer = None

    def _getPageResponded(response):
        if response.length != 0:
            proto = GetPageProtocol()
            response.deliverBody(proto)
            return proto.deferred
        else:
            return None

    d = agent.request(method, url, headers, bodyProducer)
    d.addCallback(_getPageResponded)
    return d
</snippet></ROW><ROW><id>16543509</id><snippet>from twisted.test.proto_helpers import MemoryReactor
from twisted.web.client import Agent
fake_reactor = MemoryReactor()
agent = Agent(fake_reactor)
d = agentGetPage(agent, "http://example.com")

assert fake_reactor.tcpClients  # or some such, exercise the code by manipulating the reactor
</snippet></ROW><ROW><id>16543546</id><snippet>age = models.IntegerField(blank=True, null=True)
</snippet></ROW><ROW><id>16543546</id><snippet>age = models.IntegerField()
</snippet></ROW><ROW><id>16543546</id><snippet>blank=True, null=True
</snippet></ROW><ROW><id>16543764</id><snippet>from sympy import symarray

m1 = symarray('', 2)
m1[0] = [1, 0]
</snippet></ROW><ROW><id>16543868</id><snippet>class MyClass(object):
   ...
   def model_fun(self,x,par): ...

obj = MyClass(...)
curve_fit(obj.model_fun, ...)
</snippet></ROW><ROW><id>16543888</id><snippet>class Command(object):
  def __init__(self, cmd):
    self.cmd = cmd
    self.process = None

  def run(self, timeout):
    def target():
      print('Thread started')
      # May want/need to skip the shlex.split() when using shell=True
      # See Popen() constructor docs on 'shell' argument for more detail.
      args = shlex.split(self.cmd)
      self.process = subprocess.Popen(args, shell=True)
      self.timer.start()
      self.process.wait()
      self.timer.cancel()

    def timer_callback():
        print('Terminating process (timed out)')
        self.process.terminate()

    thread = threading.Thread(target=target)
    self.timer = threading.Timer(timeout, timer_callback)
    thread.start()
</snippet></ROW><ROW><id>16543913</id><snippet>show</snippet></ROW><ROW><id>16544271</id><snippet>str.split(delimiter)</snippet></ROW><ROW><id>16544271</id><snippet>[1]</snippet></ROW><ROW><id>16544271</id><snippet>&gt;&gt;&gt; foo = "Hello, this is the string I want, blabla"
&gt;&gt;&gt; foo.split(',')
['Hello', ' this is the string I want', ' blabla']
&gt;&gt;&gt; foo.split(',')[1]
' this is the string I want'
</snippet></ROW><ROW><id>16544271</id><snippet>str.lstrip()</snippet></ROW><ROW><id>16544271</id><snippet>str.strip()</snippet></ROW><ROW><id>16544271</id><snippet>&gt;&gt;&gt; foo.split(',')[1].lstrip()
'this is the string I want'
</snippet></ROW><ROW><id>16544421</id><snippet>if yn in ("y", "Y"):
</snippet></ROW><ROW><id>16544421</id><snippet>if yn.lower() == 'y':
</snippet></ROW><ROW><id>16544472</id><snippet>prefetch_related</snippet></ROW><ROW><id>16544472</id><snippet>Parent.objects.filter(children__first=True).prefetch_related('children')
</snippet></ROW><ROW><id>16544472</id><snippet>select_related</snippet></ROW><ROW><id>16544472</id><snippet>Child.objects.filter(first=True).select_related('parent')
</snippet></ROW><ROW><id>16544565</id><snippet>self.teardown_appcontext_funcs</snippet></ROW><ROW><id>16544565</id><snippet>Flask</snippet></ROW><ROW><id>16544565</id><snippet>app</snippet></ROW><ROW><id>16544565</id><snippet>Flask.do_teardown_appcontext()</snippet></ROW><ROW><id>16544787</id><snippet>with open(bom_filename, 'r') as my_file:
    file_array = [word.strip() for word in my_file if (word.startswith("/") and not(word.strip().endswith("/")))]
</snippet></ROW><ROW><id>16544787</id><snippet>if (word.startswith("/")) &amp; not(word.endswith("/"))
</snippet></ROW><ROW><id>16544787</id><snippet>if (word.startswith("/") and not(word.strip().endswith("/"))) 
</snippet></ROW><ROW><id>16544787</id><snippet>if word.startswith("/") and not word.strip().endswith("/") 
</snippet></ROW><ROW><id>16544787</id><snippet>if(...)</snippet></ROW><ROW><id>16544787</id><snippet>...</snippet></ROW><ROW><id>16544787</id><snippet>if(word.startswith("/"))</snippet></ROW><ROW><id>16544787</id><snippet>&amp;</snippet></ROW><ROW><id>16544787</id><snippet>and</snippet></ROW><ROW><id>16544957</id><snippet>deb</snippet></ROW><ROW><id>16544957</id><snippet>rpm</snippet></ROW><ROW><id>16544996</id><snippet>ico = 'ico' + file[3:]
</snippet></ROW><ROW><id>16545552</id><snippet>filter(None,output.decode('utf8').rstrip().split('\n'))
</snippet></ROW><ROW><id>16545552</id><snippet>&gt;&gt;&gt; filter(None, ["Ford", "Nissan", ""])
['Ford', 'Nissan']
</snippet></ROW><ROW><id>16545552</id><snippet>filter</snippet></ROW><ROW><id>16545552</id><snippet>list(filter(..))</snippet></ROW><ROW><id>16545556</id><snippet>Axes</snippet></ROW><ROW><id>16545556</id><snippet>ax</snippet></ROW><ROW><id>16545556</id><snippet>ax.text(x, y, 'test')
</snippet></ROW><ROW><id>16545556</id><snippet>ax.annotate('test', (x, y))
</snippet></ROW><ROW><id>16545606</id><snippet>dataReading</snippet></ROW><ROW><id>16545606</id><snippet>read_data.split()</snippet></ROW><ROW><id>16545606</id><snippet>def convert(self):
        dataReading = []
        with open(self.fileName, 'r') as openFile:
            dataReading = openFile.readlines()
        for data in dataReading:
            print data
</snippet></ROW><ROW><id>16545619</id><snippet>re</snippet></ROW><ROW><id>16545619</id><snippet>import re

def main():
    term = re.compile("foo")
    re = 0

main()
</snippet></ROW><ROW><id>16545695</id><snippet>for process in pool:
    processId = process.pid
    print "attempting to terminate "+str(processId)
    command = " ps -o pid,ppid -ax | grep "+str(processId)+" | cut -f 1 -d \" \" | tail -1"
    ps_command = Popen(command, shell=True, stdout=PIPE)
    ps_output = ps_command.stdout.read()
    retcode = ps_command.wait()
    assert retcode == 0, "ps command returned %d" % retcode
    print "child process pid: "+ str(ps_output)
    os.kill(int(ps_output), signal.SIGTERM)
    os.kill(int(processId), signal.SIGTERM)
</snippet></ROW><ROW><id>16545718</id><snippet>def __unicode__(self):
        return self.organisation, self.countryofLocation, self.telNr, self.address
</snippet></ROW><ROW><id>16545718</id><snippet>def __unicode__(self):
        return "%s - %s - %s - %s" % (self.organisation self.countryofLocation, self.telNr, self.address)
</snippet></ROW><ROW><id>16545856</id><snippet>import pandas as pd
ts = pd.TimeSeries(range(86400), index=pd.DatetimeIndex(start='2013-05-14 00:00:00', freq='1S', periods=86400))
</snippet></ROW><ROW><id>16545856</id><snippet>ts.between_time('2013-05-14 15:48:13', '2013-05-14 15:49:13').min()
</snippet></ROW><ROW><id>16545856</id><snippet>&gt; pd.TimeSeries([1,2,3], index=pd.DatetimeIndex([datetime(2013,5,14,0,0,0,100000), datetime(2013,5,14,0,0,0,200000), datetime(2013,5,14,0,0,0,900000)]))

2013-05-14 00:00:00.100000    1
2013-05-14 00:00:00.200000    2
2013-05-14 00:00:00.900000    3
</snippet></ROW><ROW><id>16546080</id><snippet>kwargs</snippet></ROW><ROW><id>16546080</id><snippet>borderpad</snippet></ROW><ROW><id>16546080</id><snippet>handletextpad</snippet></ROW><ROW><id>16546382</id><snippet>django-admin.py runserver --noreload
</snippet></ROW><ROW><id>16546404</id><snippet>social_auth</snippet></ROW><ROW><id>16546404</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>16546404</id><snippet>settings.py</snippet></ROW><ROW><id>16546404</id><snippet>social_auth</snippet></ROW><ROW><id>16546404</id><snippet>urls.py</snippet></ROW><ROW><id>16546404</id><snippet>urlpatterns = patterns('',
    ...
    url(r'', include('social_auth.urls')),
    ...
)
</snippet></ROW><ROW><id>16546466</id><snippet>row</snippet></ROW><ROW><id>16546466</id><snippet>zip5, zip4, strname, strnumber, strsuite, city, state, busname, lname, fname = row
</snippet></ROW><ROW><id>16546466</id><snippet>zip5</snippet></ROW><ROW><id>16546466</id><snippet>zip5, zip4, strname, strnumber, strsuite, city, state, busname, lname, fname = '85123'
</snippet></ROW><ROW><id>16546466</id><snippet>'85123'</snippet></ROW><ROW><id>16546485</id><snippet>str.join</snippet></ROW><ROW><id>16546485</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; dic =  OrderedDict([(u'b1', OrderedDict([(u'ip', u'199.0.0.1'), (u'port', u'1122')])), (u'b2', OrderedDict([(u'ip', u'199.0.0.1'), (u'port', u'1123')]))])
&gt;&gt;&gt; ":".join(dic)
u'b1:b2'
</snippet></ROW><ROW><id>16546877</id><snippet>&gt;&gt;&gt; import mymath
&gt;&gt;&gt; m = mymath.math()
&gt;&gt;&gt; print '1 + 2 = %d' % m.add(1, 2)
</snippet></ROW><ROW><id>16546877</id><snippet>test</snippet></ROW><ROW><id>16546877</id><snippet>mymath</snippet></ROW><ROW><id>16546877</id><snippet>test</snippet></ROW><ROW><id>16546877</id><snippet>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;assert.h&gt;
#include &lt;python2.7/Python.h&gt;

int main()
{
    setenv("PYTHONPATH", ".", 1);

    Py_Initialize();

    PyObject* module = PyImport_ImportModule("mymath");
    assert(module != NULL);

    PyObject* klass = PyObject_GetAttrString(module, "math");
    assert(klass != NULL);

    PyObject* instance = PyInstance_New(klass, NULL, NULL);
    assert(instance != NULL);

    PyObject* result = PyObject_CallMethod(instance, "add", "(ii)", 1, 2);
    assert(result != NULL);

    printf("1 + 2 = %ld\n", PyInt_AsLong(result));

    Py_Finalize();

    return 0;
}
</snippet></ROW><ROW><id>16546877</id><snippet>$ gcc foo.c -lpython2.7 &amp;&amp; ./a.out
1 + 2 = 3
</snippet></ROW><ROW><id>16546877</id><snippet>Py_Initialize</snippet></ROW><ROW><id>16546877</id><snippet>Py_Finalize</snippet></ROW><ROW><id>16546877</id><snippet>Py_INCREF</snippet></ROW><ROW><id>16546877</id><snippet>Py_DECREF</snippet></ROW><ROW><id>16546965</id><snippet>m1 = sympy.symarray('', 2)

m2 = list(m1)
x = sympy.symbols('x')
m2.append(x)

print m2
</snippet></ROW><ROW><id>16546965</id><snippet>&gt;&gt;&gt; [_0, _1, x]
</snippet></ROW><ROW><id>16547181</id><snippet>{ item }</snippet></ROW><ROW><id>16547181</id><snippet>set([item])</snippet></ROW><ROW><id>16547181</id><snippet>out = {"response": {"status": 200, "message": STATUS_CODES["200"], "data": set([article]) }}
</snippet></ROW><ROW><id>16547655</id><snippet>import sys
for line in sys.stdin.readlines():
    print line
</snippet></ROW><ROW><id>16547655</id><snippet>import sys, select, tty, termios
class NonBlockingConsole(object):
    def __enter__(self):
        self.old_settings = termios.tcgetattr(sys.stdin)
        tty.setcbreak(sys.stdin.fileno())
        return self

    def __exit__(self, type, value, traceback):
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)

    def get_data(self):
        try:
            if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
                return sys.stdin.read(1)
        except:
            return '[CTRL-C]'
        return False

data = ''
printed = ''
last = ''
with NonBlockingConsole() as nbc:
    while 1:
        c = nbc.get_data()
        if c:
            if c == '\x1b': # x1b is ESC
                break
            elif c == '\x7f': # backspace
                data = data[:-1]
                printed = data[:-1]
                last = ''
                sys.stdout.write('\b')
            elif c == '[CTRL-C]':
                data = ''
                last = ''
                sys.stdout.write('\n')
            elif c == '\n': # it's RETURN
                sys.stdout.write('\n')
                # parse data here
                data = ''
            else:
                data += (c)
                last = c
                sys.stdout.write(c)
</snippet></ROW><ROW><id>16547685</id><snippet>ls = ['one.two.three.four', 'one.six.seven.eight', 'five.nine.ten', 'twelve.zero']
tree = {}

for item in ls:
    t = tree
    for part in item.split('.'):
        t = t.setdefault(part, {})
</snippet></ROW><ROW><id>16547685</id><snippet>{
 "twelve": {
  "zero": {}
 }, 
 "five": {
  "nine": {
   "ten": {}
  }
 }, 
 "one": {
  "six": {
   "seven": {
    "eight": {}
   }
  }, 
  "two": {
   "three": {
    "four": {}
   }
  }
 }
}
</snippet></ROW><ROW><id>16547744</id><snippet>print request.get_full_path()
</snippet></ROW><ROW><id>16547854</id><snippet>Tab</snippet></ROW><ROW><id>16547854</id><snippet>Edit &gt; Untabify Region</snippet></ROW><ROW><id>16547875</id><snippet>patterns</snippet></ROW><ROW><id>16547875</id><snippet>urls.py</snippet></ROW><ROW><id>16547875</id><snippet>urlpatterns = patterns('',
    url(r'^$', views.index, name='index')
)
</snippet></ROW><ROW><id>16547875</id><snippet>urlpatterns = patterns('',
    url(r'^$', views.index, name='index'),
    url(r'^homepage$', views.homepage, name='index'),
    url(r'^lists$', views.lists, name='index'),
    url(r'^detail$', views.detail, name='index'),
)
</snippet></ROW><ROW><id>16547875</id><snippet>urlpatterns = patterns('views',
    url(r'^$', index, name='index'),
    url(r'^homepage$', homepage, name='index'),
    url(r'^lists$', lists, name='index'),
    url(r'^detail$', detail, name='index'),
)
</snippet></ROW><ROW><id>16547875</id><snippet>urlpatterns</snippet></ROW><ROW><id>16547875</id><snippet>urlpatterns = patterns('views',
    url(r'^$', index, name='index'),
    url(r'^homepage$', homepage, name='index'),
    url(r'^lists$', lists, name='index'),
    url(r'^detail$', detail, name='index'),
)

urlpatterns += patterns('more_views',
    url(r'^extra_page$', extra_page, name='index'),
    url(r'^more_stuff$', something_else, name='index'),
)
</snippet></ROW><ROW><id>16547891</id><snippet>import datetime

def unix_time(dt):
    epoch = datetime.datetime.utcfromtimestamp(0)
    delta = dt - epoch
    return delta.total_seconds()

def unix_time_millis(dt):
    return long(unix_time(dt) * 1000.0)
</snippet></ROW><ROW><id>16547891</id><snippet>cql_statement = "update test set last_sent = :last_sent where id =:id"
rename_dict = {}
rename_dict['id'] = 'someid'
rename_dict['last_sent'] = unix_time_millis(datetime.datetime.now())
cursor.execute (cql_statement, rename_dict)
</snippet></ROW><ROW><id>16548104</id><snippet>(\S*\d+\S*)
</snippet></ROW><ROW><id>16548326</id><snippet>print u"this" == "this"
</snippet></ROW><ROW><id>16548575</id><snippet>yield</snippet></ROW><ROW><id>16548607</id><snippet>place</snippet></ROW><ROW><id>16548607</id><snippet>place</snippet></ROW><ROW><id>16548607</id><snippet>grid</snippet></ROW><ROW><id>16548607</id><snippet>pack</snippet></ROW><ROW><id>16548607</id><snippet>import Tkinter as tk
from Tkconstants import *
r=tk.Tk()

def set_aspect(content_frame, pad_frame, aspect_ratio):
    # a function which places a frame within a containing frame, and
    # then forces the inner frame to keep a specific aspect ratio

    def enforce_aspect_ratio(event):
        # when the pad window resizes, fit the content into it,
        # either by fixing the width or the height and then
        # adjusting the height or width based on the aspect ratio.

        # start by using the width as the controlling dimension
        desired_width = event.width
        desired_height = int(event.width / aspect_ratio)

        # if the window is too tall to fit, use the height as
        # the controlling dimension
        if desired_height &gt; event.height:
            desired_height = event.height
            desired_width = int(event.height * aspect_ratio)

        # place the window, giving it an explicit size
        content_frame.place(in_=pad_frame, x=0, y=0, 
            width=desired_width, height=desired_height)

    pad_frame.bind("&lt;Configure&gt;", enforce_aspect_ratio)

pad_frame = tk.Frame(borderwidth=0, background="bisque", width=200, height=200)
pad_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=20)
content_frame=tk.Frame(r,borderwidth=5,relief=GROOVE, background="blue")
tk.Label(content_frame,text='content').pack()
set_aspect(content_frame, pad_frame, aspect_ratio=2.0/1.0) 
r.rowconfigure(0, weight=1)
r.columnconfigure(0, weight=1)

r.mainloop()
</snippet></ROW><ROW><id>16548659</id><snippet>cmd = "sudo twidge update \"{0}\"".format(tweet)
print cmd
os.system(cmd)
</snippet></ROW><ROW><id>16548659</id><snippet>import subprocess
subprocess.call(["sudo","twidge","update",tweet])
</snippet></ROW><ROW><id>16548686</id><snippet>aspnetForm</snippet></ROW><ROW><id>16548686</id><snippet>&lt;form</snippet></ROW><ROW><id>16548686</id><snippet>&lt;input</snippet></ROW><ROW><id>16548686</id><snippet>&lt;/form</snippet></ROW><ROW><id>16548686</id><snippet>&lt;form ...&gt;

*all &lt;input&gt; objects*

&lt;/form&gt;
</snippet></ROW><ROW><id>16548714</id><snippet>zip</snippet></ROW><ROW><id>16548714</id><snippet>itertools.chain</snippet></ROW><ROW><id>16548714</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; l = chain.from_iterable(zip(*l))
&lt;itertools.chain object at 0x104612610&gt;
&gt;&gt;&gt; list(l)
['0,0', '1,0', '2,0', '0,1', '1,1', '2,1']
</snippet></ROW><ROW><id>16548738</id><snippet>[sum(x) for x in zip(a,b)]
</snippet></ROW><ROW><id>16548738</id><snippet>from itertools import starmap, islice, izip

a = [1, 2, 3]
b = [3, 4, 5]
w = [0.5, 1.5] # weights =&gt; a*0.5 + b*1.5

products = [m for m in starmap(lambda i,j:i*j, [y for x in zip(a,b) for y in zip(x,w)])]

sums = [sum(x) for x in izip(*[islice(products, i, None, 2) for i in range(2)])]

print sums # should be [5.0, 7.0, 9.0]
</snippet></ROW><ROW><id>16548813</id><snippet>import numpy as np
x = np.arange(30).reshape(10,3)
searchKey = [4,5,8]
x[[0,3,7],:] = searchKey
x
</snippet></ROW><ROW><id>16548813</id><snippet> array([[ 4,  5,  8],
        [ 3,  4,  5],
        [ 6,  7,  8],
        [ 4,  5,  8],
        [12, 13, 14],
        [15, 16, 17],
        [18, 19, 20],
        [ 4,  5,  8],
        [24, 25, 26],
        [27, 28, 29]])
</snippet></ROW><ROW><id>16548813</id><snippet>ismember = [row==searchKey for row in x.tolist()]
</snippet></ROW><ROW><id>16548813</id><snippet>[True, False, False, True, False, False, False, True, False, False]
</snippet></ROW><ROW><id>16548813</id><snippet>searchKey = [2,4,10,5,8,9]  # Add more elements for testing
setSearchKey = set(searchKey)
ismember = [setSearchKey.issuperset(row) for row in x.tolist()]
</snippet></ROW><ROW><id>16548813</id><snippet>np.where(ismember)[0]
</snippet></ROW><ROW><id>16548813</id><snippet>array([0, 3, 7])
</snippet></ROW><ROW><id>16548892</id><snippet>with open('the_CSV_file.csv','r') as f:
  box = f.readlines()

result_box = []
for line in box[1:]:
  items = line.split(';') # adjust the separator character in the CSV as needed
  result_box.append(items[1:])

print result_box
</snippet></ROW><ROW><id>16548990</id><snippet>#!/usr/bin/python
import pyglet
from time import time, sleep

class Window(pyglet.window.Window):
    def __init__(self, refreshrate):
        super(Window, self).__init__(vsync = False)
        self.frames = 0
        self.framerate = pyglet.text.Label(text='Unknown', font_name='Verdana', font_size=8, x=10, y=10, color=(255,255,255,255))
        self.last = time()
        self.alive = 1
        self.refreshrate = refreshrate
        self.click = None
        self.drag = False

    def on_draw(self):
        self.render()

    def on_mouse_press(self, x, y, button, modifiers):
        self.click = x,y

    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers):
        if self.click:
            self.drag = True
            print 'Drag offset:',(dx,dy)

    def on_mouse_release(self, x, y, button, modifiers):
        if not self.drag and self.click:
            print 'You clicked here', self.click, 'Relese point:',(x,y)
        else:
            print 'You draged from', self.click, 'to:',(x,y)
        self.click = None
        self.drag = False

    def render(self):
        self.clear()
        if time() - self.last &gt;= 1:
            self.framerate.text = str(self.frames)
            self.frames = 0
            self.last = time()
        else:
            self.frames += 1
        self.framerate.draw()
        self.flip()

    def on_close(self):
        self.alive = 0

    def run(self):
        while self.alive:
            self.render()
            # ----&gt; Note: &lt;----
            #  Without self.dispatc_events() the screen will freeze
            #  due to the fact that i don't call pyglet.app.run(),
            #  because i like to have the control when and what locks
            #  the application, since pyglet.app.run() is a locking call.
            event = self.dispatch_events()
            sleep(1.0/self.refreshrate)

win = Window(23) # set the fps
win.run()
</snippet></ROW><ROW><id>16548990</id><snippet>glEnable(GL_TEXTURE_2D)
</snippet></ROW><ROW><id>16548990</id><snippet>glClear(GL_COLOR_BUFFER_BIT)
glLoadIdentity()
glBegin(GL_TRIANGLES)
glVertex2f(0, 0)
glVertex2f(window.width, 0)
glVertex2f(window.width, window.height)
glEnd()
</snippet></ROW><ROW><id>16549025</id><snippet>'innings'</snippet></ROW><ROW><id>16549025</id><snippet>innings</snippet></ROW><ROW><id>16549025</id><snippet>wickets</snippet></ROW><ROW><id>16549025</id><snippet>for entry in data:
    for inning in entry['innings']:
        print inning['wickets']
</snippet></ROW><ROW><id>16549025</id><snippet>&gt;&gt;&gt; for entry in data:
...     for inning in entry['innings']:
...         print inning['wickets']
... 
10
9
0
0
</snippet></ROW><ROW><id>16549025</id><snippet>&gt;&gt;&gt; for entry in data:
...     print entry['description']
...     for i, inning in enumerate(entry['innings']):
...         print 'Innings {}: {} wickets'.format(i + 1, inning['wickets'])
... 
Rest of Sri Lanka v Sri Lanka A at Pallekele, May 14, 2013
Innings 1: 10 wickets
Innings 2: 9 wickets
63rd match: Royal Challengers Bangalore v Kings XI Punjab at Bangalore, May 14, 2013
Innings 1: 0 wickets
Innings 2: 0 wickets
64th match: Chennai Super Kings v Delhi Daredevils at Chennai, May 14, 2013
</snippet></ROW><ROW><id>16549114</id><snippet>def dehydrate(self, bundle):
    transaction = TTransaction.objects.filter(bucket_id=bundle.data['id']).values('bucket').order_by('bucket').annotate(Sum('amount'))
    bundle.data['transaction_total'] = transaction
    return bundle
</snippet></ROW><ROW><id>16549224</id><snippet>s = 'a.b.c.d'

items = s.split('.')
print [items[:i] for i in xrange(1, len(items) + 1)]
# [['a'], ['a', 'b'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']]
</snippet></ROW><ROW><id>16549381</id><snippet>sys.stdin</snippet></ROW><ROW><id>16549381</id><snippet>stdin</snippet></ROW><ROW><id>16549381</id><snippet>ASCII</snippet></ROW><ROW><id>16549381</id><snippet>sys.stdin</snippet></ROW><ROW><id>16549381</id><snippet>sys.stdin</snippet></ROW><ROW><id>16549381</id><snippet>io.TextIOBase</snippet></ROW><ROW><id>16549381</id><snippet>.buffer</snippet></ROW><ROW><id>16549381</id><snippet>.raw</snippet></ROW><ROW><id>16549381</id><snippet>sys.stdin.buffer</snippet></ROW><ROW><id>16549381</id><snippet>io.TextIOWrapper()</snippet></ROW><ROW><id>16549381</id><snippet>import io
import sys

input_stream = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')
</snippet></ROW><ROW><id>16549381</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>16549517</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>16549517</id><snippet>python</snippet></ROW><ROW><id>16549517</id><snippet>-u</snippet></ROW><ROW><id>16549517</id><snippet>python -u</snippet></ROW><ROW><id>16549517</id><snippet>python</snippet></ROW><ROW><id>16549517</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>16549517</id><snippet>#!/usr/bin/python -u
</snippet></ROW><ROW><id>16549531</id><snippet>GET https://10.6.75.98/wapi/v1.0/network?{\"network\": \"10.233.84.0/22\"}
</snippet></ROW><ROW><id>16549531</id><snippet>POST https://10.6.75.98/wapi/v1.0/network

Content: {
   "_method": "GET",
   "network": "10.233.84.0/22"
}

Content-Type: application/json
</snippet></ROW><ROW><id>16549531</id><snippet>GET https://10.6.75.98/wapi/v1.0/network?network=10.233.84.0/22
</snippet></ROW><ROW><id>16549639</id><snippet>import numpy as np
x =  np.array([0, 1, 2, 3, 4, 5])

for i in range(1,len(x) + 1):
    print(x[1:i])
</snippet></ROW><ROW><id>16549687</id><snippet>&lt;ButtonPress&gt;</snippet></ROW><ROW><id>16549687</id><snippet>&lt;ButtonRelease&gt;</snippet></ROW><ROW><id>16549687</id><snippet>import Tkinter as tk
import time

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.button = tk.Button(self, text="Press me!")
        self.text = tk.Text(self, width=40, height=6)
        self.vsb = tk.Scrollbar(self, command=self.text.yview)
        self.text.configure(yscrollcommand=self.vsb.set)

        self.button.pack(side="top")
        self.vsb.pack(side="right", fill="y")
        self.text.pack(side="bottom", fill="x")

        self.button.bind("&lt;ButtonPress&gt;", self.on_press)
        self.button.bind("&lt;ButtonRelease&gt;", self.on_release)

    def on_press(self, event):
        self.log("button was pressed")

    def on_release(self, event):
        self.log("button was released")

    def log(self, message):
        now = time.strftime("%I:%M:%S", time.localtime())
        self.text.insert("end", now + " " + message.strip() + "\n")
        self.text.see("end")

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>16549766</id><snippet>import csv
import math
import os
import re

LOCATION = os.path.dirname(os.path.abspath(__file__))
afinn_filename = os.path.join(LOCATION, '/AFINN/AFINN-111DK.txt')

pattern_split = re.compile(r"\W+")

with open(afinn_filename, encoding='utf8', newline='') as infile:
    reader = csv.reader(infile, delimiter='\t')
    afinn = {key: int(score) for key, score in reader}


def sentiment(text):
    words = pattern_split.split(text.lower().strip())
    if not words:
        return 0
    sentiments = [afinn.get(word, 0) for word in words]
    return sum(sentiments) / math.sqrt(len(sentiments))


# Print result
text = "ånd ånd med fløde... :)asd "
id = 999
split = "###"
print('{sentiment:6.2f}{split}{id}{split}{text}'.format(
    sentiment=sentiment(text), id=id, split=split, text=text))
</snippet></ROW><ROW><id>16549766</id><snippet>text</snippet></ROW><ROW><id>16549766</id><snippet>re.UNICODE</snippet></ROW><ROW><id>16549766</id><snippet>text = u"ånd ånd med fløde... :)asd "
</snippet></ROW><ROW><id>16549766</id><snippet>u</snippet></ROW><ROW><id>16549766</id><snippet>pattern_split = re.compile(ur"\W+", re.UNICODE)
</snippet></ROW><ROW><id>16549766</id><snippet>key</snippet></ROW><ROW><id>16549766</id><snippet>with open(afinn_filename, 'rb') as infile:
    reader = csv.reader(infile, delimiter='\t')
    afinn = {key.decode('utf8'): int(score) for key, score in reader}
</snippet></ROW><ROW><id>16549929</id><snippet>&gt;&gt;&gt; def foo(bar, spam=[]):
...     spam.append(bar)
...     print(spam)
... 
&gt;&gt;&gt; foo
&lt;function foo at 0x1088b9d70&gt;
&gt;&gt;&gt; foo('Monty')
['Monty']
&gt;&gt;&gt; foo('Python')
['Monty', 'Python']
&gt;&gt;&gt; foo.func_defaults
(['Monty', 'Python'],)
&gt;&gt;&gt; del foo
&gt;&gt;&gt; foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined
</snippet></ROW><ROW><id>16549929</id><snippet>func_defaults</snippet></ROW><ROW><id>16549929</id><snippet>__defaults__</snippet></ROW><ROW><id>16550039</id><snippet>for x in popped:
    print 'Popping',x,'from the stack.'
</snippet></ROW><ROW><id>16550039</id><snippet>popped</snippet></ROW><ROW><id>16550161</id><snippet>location_list = Locations.objects\
                 .filter(organisation=organisation_id)\
                 .order_by('country_of_location')
output = '&lt;br /&gt;'.join([str(loc.organisation)+' from '+str(loc.organisation.country_of_origin) for loc in location_list])
</snippet></ROW><ROW><id>16550161</id><snippet>localization.organisation</snippet></ROW><ROW><id>16550161</id><snippet>return render_to_response</snippet></ROW><ROW><id>16550232</id><snippet>__getslice__</snippet></ROW><ROW><id>16550232</id><snippet>[i:j]</snippet></ROW><ROW><id>16550445</id><snippet>def callback(self,evt=None): #not sure if kivy sends event info so added optional arg just in case
    return self.add_widget(Label(text=self.text_input.text))
</snippet></ROW><ROW><id>16550445</id><snippet>self.printbutton.bind(on_press=self.callback)
</snippet></ROW><ROW><id>16550565</id><snippet>In [22]: lst = [[1,2,3],[1,2],[1,2,3],[2,3],[4,5],[2,3],[2,4],[4,2]]

In [23]: set(frozenset(item) for item in lst)
Out[23]: 
set([frozenset([2, 4]),
     frozenset([1, 2]),
     frozenset([2, 3]),
     frozenset([1, 2, 3]),
     frozenset([4, 5])])
</snippet></ROW><ROW><id>16550640</id><snippet>o</snippet></ROW><ROW><id>16550640</id><snippet>TypeError</snippet></ROW><ROW><id>16550640</id><snippet>for k1 in g.keys():
    for k2 in g[k1].keys():
        for k3 in g[k1][k2].keys():
            if 12 in g[k1][k2][k3]:
                del g[k1][k2][k3]
</snippet></ROW><ROW><id>16550640</id><snippet>.keys()</snippet></ROW><ROW><id>16550640</id><snippet>.iterkeys()</snippet></ROW><ROW><id>16550640</id><snippet>RuntimeError: dictionary changed size during iteration</snippet></ROW><ROW><id>16550640</id><snippet>.items()</snippet></ROW><ROW><id>16550640</id><snippet>.iteritems()</snippet></ROW><ROW><id>16550679</id><snippet>for row in range(1,5)+range(4,0,-1):
    print "." * (row -1) + row * "*" + (16 - row * 4) * "." + row * "*"
</snippet></ROW><ROW><id>16550679</id><snippet>In [8]: range(1,5)
Out[8]: [1, 2, 3, 4]

In [9]: range(4,0,-1)
Out[9]: [4, 3, 2, 1]

In [10]: range(1,5) + range(4,0,-1)
Out[10]: [1, 2, 3, 4, 4, 3, 2, 1]
</snippet></ROW><ROW><id>16550679</id><snippet>for row in range(1,5)+range(4,0,-1):
    print " " * (row -1) + row * "*" + (16 - row * 4) * "." + row * "*"

*............*
 **........**
  ***....***
   ********
   ********
  ***....***
 **........**
*............*
</snippet></ROW><ROW><id>16550679</id><snippet>X = []
for row in range(1,5):
    X.append(" " * (row -1) + row * "*" + (16 - row * 4) * "." + row * "*")
</snippet></ROW><ROW><id>16550679</id><snippet>X = X + list(reversed(X))
</snippet></ROW><ROW><id>16550679</id><snippet>print X
#['*............*', ' **........**', '  ***....***', '   ********', '   ********', '  ***....***', ' **........**', '*............*']
</snippet></ROW><ROW><id>16550679</id><snippet>print '\n'.join(X)

*............*
 **........**
  ***....***
   ********
   ********
  ***....***
 **........**
*............*
</snippet></ROW><ROW><id>16550765</id><snippet>$</snippet></ROW><ROW><id>16550765</id><snippet>...
url(r'^(?P&lt;pk&gt;[0-9]+)/comments/', include('comment.urls')),
...
</snippet></ROW><ROW><id>16551045</id><snippet>animals = Animal.objects.filter(subcategory__category__id=category_id)
</snippet></ROW><ROW><id>16551045</id><snippet>animals = Animal.objects.filter(subcategory__category=category)
</snippet></ROW><ROW><id>16551045</id><snippet>class &lt;ClassName&gt;</snippet></ROW><ROW><id>16551045</id><snippet>Model &lt;ClassName&gt;</snippet></ROW><ROW><id>16551045</id><snippet>Model Animal</snippet></ROW><ROW><id>16551045</id><snippet>class Animal</snippet></ROW><ROW><id>16551099</id><snippet>p.communicate</snippet></ROW><ROW><id>16551099</id><snippet>result.txt</snippet></ROW><ROW><id>16551099</id><snippet>java</snippet></ROW><ROW><id>16551099</id><snippet>PATH</snippet></ROW><ROW><id>16551099</id><snippet>import os
import shlex
from subprocess import Popen, PIPE
import subprocess

print "Content-type:text/html\r\n\r\n"
p = subprocess.Popen(shlex.split("java weka.filters.unsupervised.attribute.StringToWordVector -b -i data_new.arff -o data_new_std.arff -r tweetin.arff -s tweetin_std.arff"), 
    stdout = subprocess.PIPE, stderr = subprocess.PIPE)
out, error = p.communicate()
return_code = subprocess.call(shlex.split("java weka.classifiers.functions.SMO -T tweetin_std.arff -t data_new_std.arff -p 2 -c first &gt; result.txt"))
print out
print "DONE!"
</snippet></ROW><ROW><id>16551150</id><snippet>from decimal import Decimal
print Decimal("0.3")
</snippet></ROW><ROW><id>16551150</id><snippet>"%0.2f"%2.030000000000034
</snippet></ROW><ROW><id>16551150</id><snippet>if num1 - num2 &lt; 1e-3 : print "Equal Enough For Me!"
</snippet></ROW><ROW><id>16551152</id><snippet>import curses
import time

mywindow = curses.initscr()

matrix = [[3,2,3],[1,2,1],[2,8,6]]

def updateMatrix(m):
    m[1][1] = m[1][1] * 2
    return m

def getMarixString(m):
    x = ''
    for row in m:
        x += ' '.join(str(item) for item in row)
        x += "\n"
    return x

z = 10
while z &gt; 1:
    matrix = updateMatrix(matrix)
    mywindow.addstr(0,0, getMarixString(matrix))
    mywindow.refresh()
    z -= 1
    time.sleep(3)

curses.endwin()
quit()
</snippet></ROW><ROW><id>16551281</id><snippet>sqlalchemy</snippet></ROW><ROW><id>16551281</id><snippet>execute</snippet></ROW><ROW><id>16551281</id><snippet>sqlalchemy</snippet></ROW><ROW><id>16551281</id><snippet>sqlalchemy</snippet></ROW><ROW><id>16551281</id><snippet>echo=True</snippet></ROW><ROW><id>16551281</id><snippet>create_engine</snippet></ROW><ROW><id>16551281</id><snippet>sqlalchemy</snippet></ROW><ROW><id>16551281</id><snippet>connect</snippet></ROW><ROW><id>16551281</id><snippet>sqlalchemy</snippet></ROW><ROW><id>16551281</id><snippet>PRAGMA</snippet></ROW><ROW><id>16551546</id><snippet>myset = set([3,4,5,6,2])
while myset:
    myset.pop()
    print myset
</snippet></ROW><ROW><id>16551546</id><snippet>&gt;&gt;&gt; 
set([3, 4, 5, 6])
set([4, 5, 6])
set([5, 6])
set([6])
set([])
</snippet></ROW><ROW><id>16551546</id><snippet>l = list(myset)
l_copy = [x for x in l]
for k in l_copy:
    l = l[1:]
    print l
</snippet></ROW><ROW><id>16551546</id><snippet>&gt;&gt;&gt; 
[3, 4, 5, 6]
[4, 5, 6]
[5, 6]
[6]
[]
</snippet></ROW><ROW><id>16551688</id><snippet>verbose_name</snippet></ROW><ROW><id>16551688</id><snippet>verbose_name_plural</snippet></ROW><ROW><id>16551688</id><snippet>s</snippet></ROW><ROW><id>16551688</id><snippet>verbose_name</snippet></ROW><ROW><id>16551688</id><snippet>class Recipes(models.Model):
    name = models.CharField(max_length=100)
    ingredients = models.CharField(max_length=1000)

    def __unicode__(self):
        return self.name + " / " + self.ingredients

    class Meta:
        verbose_name = "Recipe"
        verbose_name_plural = "Recipies"
</snippet></ROW><ROW><id>16551938</id><snippet>do.conf</snippet></ROW><ROW><id>16551938</id><snippet>do.out</snippet></ROW><ROW><id>16551938</id><snippet>do_conf</snippet></ROW><ROW><id>16551938</id><snippet>do_out</snippet></ROW><ROW><id>16551938</id><snippet>r("adjboxStats")</snippet></ROW><ROW><id>16551938</id><snippet>r("adjboxStats")(result, coef = 2.5, a = -4, b = 3, do_conf = True, do_out = True)
</snippet></ROW><ROW><id>16552179</id><snippet>ax.scatter(paleta[0],paleta[1],paleta[2], c=[(r[0] / 255., r[1] / 255., r[2] / 255.) for r in RGBlist])</snippet></ROW><ROW><id>16552179</id><snippet>import random
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d, Axes3D

RGBlist = [(random.randint(0,255), random.randint(0,255), random.randint(0,255)) for i in range(100)]
paleta=zip(*RGBlist)
fig = plt.figure()
ax = Axes3D(fig)
ax.scatter(paleta[0],paleta[1],paleta[2], c=[(r[0] / 255., r[1] / 255., r[2] / 255.) for r in RGBlist])
ax.grid(False)
ax.set_title('grid on')
plt.savefig('blah.png')
</snippet></ROW><ROW><id>16552376</id><snippet>from matplotlib.path import Path
path = Path(polygonVerts)
isInside = path.contains_point(point)
</snippet></ROW><ROW><id>16552422</id><snippet>firefox[.exe] -CreateProfile &lt;profile_name&gt;
</snippet></ROW><ROW><id>16552422</id><snippet>.exe</snippet></ROW><ROW><id>16552470</id><snippet>vcvarsall.bat</snippet></ROW><ROW><id>16552470</id><snippet>vcvarshall.bat</snippet></ROW><ROW><id>16552470</id><snippet>vcvarsall.bat</snippet></ROW><ROW><id>16552470</id><snippet>mingw</snippet></ROW><ROW><id>16552470</id><snippet>C:\MinGW\bin</snippet></ROW><ROW><id>16552470</id><snippet>-c mingw32</snippet></ROW><ROW><id>16552470</id><snippet>setup.py</snippet></ROW><ROW><id>16552470</id><snippet>easy_install</snippet></ROW><ROW><id>16552470</id><snippet>pip</snippet></ROW><ROW><id>16552470</id><snippet>distutils.cfg</snippet></ROW><ROW><id>16552470</id><snippet>[build]</snippet></ROW><ROW><id>16552470</id><snippet>compiler=mingw32</snippet></ROW><ROW><id>16552574</id><snippet>zip</snippet></ROW><ROW><id>16552574</id><snippet>for i, j in zip([1,2,3], [3,2,1]):
    print i, j

for i, j in zip(f_iterate1(), f_iterate2()):
    print i, j
</snippet></ROW><ROW><id>16552574</id><snippet>for i, j, k in zip([1,2,3], [3,2,1], [13, 22, 31]):
    print i, j, k
</snippet></ROW><ROW><id>16552574</id><snippet>for i in [1,2,3], j in [3,2,1]:
    print i,j
</snippet></ROW><ROW><id>16552574</id><snippet>print [1,2,3], j in [3,2,1]
</snippet></ROW><ROW><id>16552574</id><snippet>j</snippet></ROW><ROW><id>16552574</id><snippet>[1, 2, 3] False</snippet></ROW><ROW><id>16552574</id><snippet>[1, 2, 3] True</snippet></ROW><ROW><id>16552574</id><snippet>NameError</snippet></ROW><ROW><id>16552574</id><snippet>[1,2,3]</snippet></ROW><ROW><id>16552574</id><snippet>j in [3,2,1]</snippet></ROW><ROW><id>16552574</id><snippet>j=0
for i in [1,2,3], j in [3,2 1]:
    print i, j
</snippet></ROW><ROW><id>16552574</id><snippet>j=0
for i in ([1,2,3], False):
    print i, 0
</snippet></ROW><ROW><id>16552574</id><snippet>[1, 2, 3] 0
False 0
</snippet></ROW><ROW><id>16552649</id><snippet>SELECT %(t1)s.*, %(t2)s.id, %(t2)s.street
FROM %(t1)s, %(t2)s 
             ^^^^^^ Already declared in the LEFT OUTER JOIN
LEFT OUTER JOIN %(t2)s
ON %(t2)s.id = %(t1)s.location_id
</snippet></ROW><ROW><id>16552649</id><snippet>, %(t2)s</snippet></ROW><ROW><id>16552649</id><snippet>FROM</snippet></ROW><ROW><id>16552649</id><snippet>LEFT OUTER JOIN</snippet></ROW><ROW><id>16552927</id><snippet>built-in</snippet></ROW><ROW><id>16552927</id><snippet>type</snippet></ROW><ROW><id>16552927</id><snippet>class MyModelMetaClass(type(BaseModel)):
    def __new__(cls, *args, **kwargs):
        new_class = super(MyModelMetaClass, cls).__new__(cls, *args, **kwargs)
        field = new_class._meta.get_field('field_with_choices')
        choices = field._choices = []
        choices.extend(get_choices())
        return new_class
</snippet></ROW><ROW><id>16552927</id><snippet>type(ModelBase) is type</snippet></ROW><ROW><id>16552927</id><snippet>type</snippet></ROW><ROW><id>16552927</id><snippet>Model.__metaclass__</snippet></ROW><ROW><id>16552927</id><snippet>ModelBase</snippet></ROW><ROW><id>16552927</id><snippet>ModelBase</snippet></ROW><ROW><id>16552927</id><snippet>type</snippet></ROW><ROW><id>16553076</id><snippet>table=Gtk.Table(1,4,True)
table.attach(label,0,1,0,1)
table.attach(entry,1,3,0,1)
table.attach(button,3,4,0,1)
window.add(table)
window.show_all()
</snippet></ROW><ROW><id>16553197</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>16553197</id><snippet>-</snippet></ROW><ROW><id>16553197</id><snippet>import os
from subprocess import Popen, PIPE
def strip_comments(text):
    p = Popen(['gcc', '-fpreprocessed', '-dD', '-E', '-x', 'c++', '-'], 
            stdin=PIPE, stdout=PIPE, stderr=PIPE)
    p.stdin.write(text)
    p.stdin.close()
    return_code = p.wait()
    print p.stdout.read()
</snippet></ROW><ROW><id>16553228</id><snippet>import socket
serversocket = socket.socket()
serversocket.bind(('',8000))
serversocket.listen(5)
while True:
    client,addr = serversocket.accept()
    while True:
        data = client.recv(1024)
        if not data: break
        print(data.decode('utf8') # Note this might not contain a complete UTF-8 char.
    client.close()
</snippet></ROW><ROW><id>16553345</id><snippet>python</snippet></ROW><ROW><id>16553345</id><snippet>python
import sys 
sys.path.insert(0, '/home/cmannett85/PrettyPrinters')

...

end
</snippet></ROW><ROW><id>16553503</id><snippet>Query()</snippet></ROW><ROW><id>16553503</id><snippet>select()</snippet></ROW><ROW><id>16553503</id><snippet>Connection</snippet></ROW><ROW><id>16553503</id><snippet>compiled_cache</snippet></ROW><ROW><id>16553503</id><snippet>compiled_cache</snippet></ROW><ROW><id>16553503</id><snippet>Query</snippet></ROW><ROW><id>16553503</id><snippet>Query</snippet></ROW><ROW><id>16553503</id><snippet>query.bake()</snippet></ROW><ROW><id>16553503</id><snippet>Session</snippet></ROW><ROW><id>16553503</id><snippet>q = s.query(Foo).filter(Foo.data==bindparam('foo')).bake()

for i in range(10):
    result = q.from_session(s).params(foo='data 12').all()
</snippet></ROW><ROW><id>16553551</id><snippet>update()</snippet></ROW><ROW><id>16553551</id><snippet>**kwargs</snippet></ROW><ROW><id>16553830</id><snippet>def fun_fun(some_int): # function that takes hopefully an int/float
    try: # not sure if we got the correct value
        return_value = some_int + 4 % 4 # mathz
        return return_value # return mathz
    except TypeError: # if we didn't get an int/float we'd get this
        return None # So you can return None or do what you like
</snippet></ROW><ROW><id>16553830</id><snippet>def fun_bottom(arg):
    if arg &gt; 0:
        #blah blah
    else:
        #foo
</snippet></ROW><ROW><id>16553887</id><snippet>xl.ActiveChart.Type = win32com.client.constants.xlColumn
</snippet></ROW><ROW><id>16553958</id><snippet>print [procinfo for procinfo in procinfos]
</snippet></ROW><ROW><id>16554011</id><snippet>"#BBC covers the latest issues with G&amp;F. See bbc.co.uk/gf"</snippet></ROW><ROW><id>16554011</id><snippet>#</snippet></ROW><ROW><id>16554011</id><snippet>mod_data = "BBC covers the latest issues with G&amp;F. See bbc.co.uk/gf"</snippet></ROW><ROW><id>16554011</id><snippet>&amp;</snippet></ROW><ROW><id>16554011</id><snippet>mod_data = "#BBC covers the latest issues with GF. See bbc.co.uk/gf"</snippet></ROW><ROW><id>16554011</id><snippet>/</snippet></ROW><ROW><id>16554011</id><snippet>mod_data = "#BBC covers the latest issues with G&amp;F. See bbc.co.ukgf"</snippet></ROW><ROW><id>16554011</id><snippet>/</snippet></ROW><ROW><id>16554011</id><snippet>import re

string = "#BBC covers the latest issues with G&amp;F. See bbc.co.uk/gf"
mod_data = re.sub(r"[#&amp;/]", " ", string)
print(mod_data)
system('say ' + mod_data)
</snippet></ROW><ROW><id>16554014</id><snippet>site</snippet></ROW><ROW><id>16554014</id><snippet>url</snippet></ROW><ROW><id>16554014</id><snippet>set</snippet></ROW><ROW><id>16554014</id><snippet>get</snippet></ROW><ROW><id>16554014</id><snippet>__init__</snippet></ROW><ROW><id>16554015</id><snippet>--user</snippet></ROW><ROW><id>16554015</id><snippet>sys.path</snippet></ROW><ROW><id>16554015</id><snippet>python setup.py install --user
</snippet></ROW><ROW><id>16554015</id><snippet>--prefix</snippet></ROW><ROW><id>16554015</id><snippet>sys.path</snippet></ROW><ROW><id>16554090</id><snippet>os.system</snippet></ROW><ROW><id>16554090</id><snippet>stdout</snippet></ROW><ROW><id>16554090</id><snippet>last_run_start</snippet></ROW><ROW><id>16554090</id><snippet>Popen</snippet></ROW><ROW><id>16554090</id><snippet>check_output</snippet></ROW><ROW><id>16554090</id><snippet>subprocess</snippet></ROW><ROW><id>16554090</id><snippet>0</snippet></ROW><ROW><id>16554090</id><snippet>last_run_start</snippet></ROW><ROW><id>16554206</id><snippet>import ldap.sasl</snippet></ROW><ROW><id>16554206</id><snippet>ldap</snippet></ROW><ROW><id>16554206</id><snippet>import ldap</snippet></ROW><ROW><id>16554206</id><snippet>import ldap</snippet></ROW><ROW><id>16554206</id><snippet>import ldap.sasl</snippet></ROW><ROW><id>16554206</id><snippet>import ldap.sasl</snippet></ROW><ROW><id>16554206</id><snippet>import ldap.sasl</snippet></ROW><ROW><id>16554206</id><snippet>import ldap</snippet></ROW><ROW><id>16554206</id><snippet>__init__.py</snippet></ROW><ROW><id>16554206</id><snippet>ni</snippet></ROW><ROW><id>16554206</id><snippet>import</snippet></ROW><ROW><id>16554206</id><snippet>importlib</snippet></ROW><ROW><id>16554278</id><snippet>dict</snippet></ROW><ROW><id>16554278</id><snippet># This may not work exactly right for your file format, but you get the idea.
lookup = {}
for line in f:
    if line:
        value, key = line.trim().split():
        lookup[key] = value
</snippet></ROW><ROW><id>16554278</id><snippet>def get_value(word):
    return lookup.get(word)
</snippet></ROW><ROW><id>16554278</id><snippet>import bisect

# Define searchable (word, value) tuples for every word in the file.
# I'm assuming your files are sorted, but if not, sort this list (SLOW!!)
words = [(w[1], w[0]) for w in (line.strip().split() for line in f if line)]

# Binary search for the word and return its associated value.
def get_value(word):
    idx = bisect.bisect_left(words, (word,None)) # Tuples compare element-wise
    if idx != len(words) and words[idx][0] == word:
        return words[idx][1]
    raise ValueError('word not found')
</snippet></ROW><ROW><id>16554278</id><snippet>for line in file</snippet></ROW><ROW><id>16554324</id><snippet>download_url = ("Download link")
filename, headers = urllib.urlretrieve(download_url)
print filename
</snippet></ROW><ROW><id>16554403</id><snippet>calculate_button = Button(text='Calculate', command=solfield())
</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>command</snippet></ROW><ROW><id>16554403</id><snippet>calculate_button = Button(text='Calculate', command=solfield)
</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>None</snippet></ROW><ROW><id>16554403</id><snippet>calculate_button</snippet></ROW><ROW><id>16554403</id><snippet>command=None</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>NameError</snippet></ROW><ROW><id>16554403</id><snippet>pass</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>solfield</snippet></ROW><ROW><id>16554403</id><snippet>solfield()</snippet></ROW><ROW><id>16554403</id><snippet>command</snippet></ROW><ROW><id>16554403</id><snippet>calculate_button</snippet></ROW><ROW><id>16554512</id><snippet>echo $LC_CTYPE
</snippet></ROW><ROW><id>16554512</id><snippet>export LC_ALL=es_ES.utf8 
export LANG="$LC_ALL"
</snippet></ROW><ROW><id>16554512</id><snippet>print s.encode("utf-8")
</snippet></ROW><ROW><id>16554512</id><snippet>locale -a
</snippet></ROW><ROW><id>16554565</id><snippet>goto</snippet></ROW><ROW><id>16554565</id><snippet>goto</snippet></ROW><ROW><id>16554565</id><snippet>print "1) Add"
print "2) Substract"
print "3) Multiply"
print "4) Divide"
print "5) Exit"
while True:
    x=input("Choose an operation: ")
    # ...
</snippet></ROW><ROW><id>16554565</id><snippet>import operator

print "1) Add"
print "2) Substract"
print "3) Multiply"
print "4) Divide"
print "5) Exit"
while True:
    x=input("Choose an operation: ")
    if x==5:
        break
    y=input("How many numbers do you need to operate: ")
    operands=[input('Value {}'.format(i+1)) for i in range(count)]
    if x==1:
        op, value = operator.add, 0
    elif x==2:
        op, value = operator.sub, 0
    elif x==3:
        op, value = operator.mul, 1
    elif x==4:
        op, value = operator.truediv, 1
    for operand in operands:
        value = op(value, operand)
    print value
</snippet></ROW><ROW><id>16554565</id><snippet>import operator</snippet></ROW><ROW><id>16554565</id><snippet>add</snippet></ROW><ROW><id>16554565</id><snippet>sub</snippet></ROW><ROW><id>16554565</id><snippet>def add(x, y):
    return x+y
# etc.
</snippet></ROW><ROW><id>16554565</id><snippet>op, value = operator.add, 0
</snippet></ROW><ROW><id>16554565</id><snippet>op, value = add, 0
</snippet></ROW><ROW><id>16554565</id><snippet>lambda</snippet></ROW><ROW><id>16554565</id><snippet>op, value = (lambda x, y: x+y), 0
</snippet></ROW><ROW><id>16554565</id><snippet>add</snippet></ROW><ROW><id>16554565</id><snippet>sub</snippet></ROW><ROW><id>16554565</id><snippet>mul</snippet></ROW><ROW><id>16554565</id><snippet>truediv</snippet></ROW><ROW><id>16554813</id><snippet>•</snippet></ROW><ROW><id>16554813</id><snippet># -*- coding: utf-8 -*-
pattern = re.compile(ur'•')
</snippet></ROW><ROW><id>16554970</id><snippet>blist=blist+[b()]</snippet></ROW><ROW><id>16554970</id><snippet>blist</snippet></ROW><ROW><id>16554970</id><snippet>blist</snippet></ROW><ROW><id>16554970</id><snippet>.append</snippet></ROW><ROW><id>16554970</id><snippet>blist.append(b())
</snippet></ROW><ROW><id>16555131</id><snippet>time.sleep</snippet></ROW><ROW><id>16555131</id><snippet>import time

for i in l:
    print i
    time.sleep(1)
</snippet></ROW><ROW><id>16555245</id><snippet>'{:.17f} {:.17f}'.format(X, Y)
</snippet></ROW><ROW><id>16555245</id><snippet>[10, 100)</snippet></ROW><ROW><id>16555245</id><snippet>{:.64f}</snippet></ROW><ROW><id>16555245</id><snippet>Decimal</snippet></ROW><ROW><id>16555245</id><snippet>X &gt; Y</snippet></ROW><ROW><id>16555245</id><snippet>X</snippet></ROW><ROW><id>16555245</id><snippet>Y</snippet></ROW><ROW><id>16555245</id><snippet>abs(X-Y) &lt; EPSILON</snippet></ROW><ROW><id>16555245</id><snippet>abs((X-Y) / (X+Y)) &lt; EPSILON</snippet></ROW><ROW><id>16555245</id><snippet>X == Y</snippet></ROW><ROW><id>16555245</id><snippet>&gt;&gt;&gt; str(1.000000000000001), repr(1.000000000000001)
</snippet></ROW><ROW><id>16555245</id><snippet>'1.0', '1.000000000000001'
</snippet></ROW><ROW><id>16555245</id><snippet>'1.000000000000001', '1.000000000000001'
</snippet></ROW><ROW><id>16555265</id><snippet>from spiderA import theMethod
</snippet></ROW><ROW><id>16555463</id><snippet>dmg</snippet></ROW><ROW><id>16555463</id><snippet>site-packages</snippet></ROW><ROW><id>16555463</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/</snippet></ROW><ROW><id>16555463</id><snippet>/Library/Python/2.7/site-packages/</snippet></ROW><ROW><id>16555463</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>16555463</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python</snippet></ROW><ROW><id>16555463</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>16555463</id><snippet>/usr/bin</snippet></ROW><ROW><id>16555463</id><snippet>PATH</snippet></ROW><ROW><id>16555463</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>16555618</id><snippet>(i,j)</snippet></ROW><ROW><id>16555618</id><snippet>w = 5    # half-size of the window around i, j
p = np.nditer(plan[i-w:i+w, j-w:j+w], flags=...)
</snippet></ROW><ROW><id>16555618</id><snippet>a = array([[ 0,  1,  2,  3,  4],
           [ 5,  6,  7,  8,  9],
           [10, 11, 12, 13, 14],
           [15, 16, 17, 18, 19],
           [20, 21, 22, 23, 24]])
</snippet></ROW><ROW><id>16555618</id><snippet>w = 1
i, j = 2,2
print a[i-w:i+w+1, j-w:j+w+1]
#array([[ 6,  7,  8],
#       [11, 12, 13],
#       [16, 17, 18]])
</snippet></ROW><ROW><id>16555636</id><snippet>JSON.stringify()</snippet></ROW><ROW><id>16555636</id><snippet>example.com#stateData</snippet></ROW><ROW><id>16555723</id><snippet>geometry</snippet></ROW><ROW><id>16555723</id><snippet>w.geometry("+100+200")</snippet></ROW><ROW><id>16555723</id><snippet>w</snippet></ROW><ROW><id>16555723</id><snippet>geometry</snippet></ROW><ROW><id>16555893</id><snippet>(2,)</snippet></ROW><ROW><id>16555893</id><snippet>(1,2)</snippet></ROW><ROW><id>16555893</id><snippet>np.newaxis</snippet></ROW><ROW><id>16555893</id><snippet>a = np.array([1,2])

a.shape
#(2,)

b = a[np.newaxis, :]

print b
#array([[1,2]])

b.shape
#(1,2)
</snippet></ROW><ROW><id>16555893</id><snippet>(N,2)</snippet></ROW><ROW><id>16555893</id><snippet>(1,2)</snippet></ROW><ROW><id>16555893</id><snippet>1</snippet></ROW><ROW><id>16555893</id><snippet>a = np.array([[1,2], [3,4], [5,6]])

a[0:1]
#array([[1, 2]])

a[0:1].shape
#(1,2)
</snippet></ROW><ROW><id>16555893</id><snippet>keepdims</snippet></ROW><ROW><id>16555893</id><snippet>a
#array([[1, 2],
#       [3, 4],
#       [5, 6]])

a.sum(1)
#array([ 3,  7, 11])

a.sum(1, keepdims=True)
#array([[ 3],
#       [ 7],
#       [11]])
</snippet></ROW><ROW><id>16555953</id><snippet>[i if i not in ListB else 'X' for i in ListA]
</snippet></ROW><ROW><id>16555953</id><snippet>in</snippet></ROW><ROW><id>16555953</id><snippet>ListB</snippet></ROW><ROW><id>16555953</id><snippet>for item in ListA:
    if item in ListB:
        ListC.append('X')
    else:
        ListC.append(item)
</snippet></ROW><ROW><id>16556043</id><snippet>range(1,3)</snippet></ROW><ROW><id>16556043</id><snippet>&gt;&gt;&gt; for i in range(len(results)):
...   print str(i) + ": "+ results[x]["text"]

&lt;a few results print successfully&gt;

UnicodeEncodeError: 'latin-1' codec can't encode character u'\U0001f611' 
in position 121: ordinal not in range(256)
</snippet></ROW><ROW><id>16556043</id><snippet>&gt;&gt;&gt; for i in range(len(results)):
...   print str(i) + ": "+ results[i]["text"].encode('utf-8')
&lt;success&gt;
</snippet></ROW><ROW><id>16556152</id><snippet>for i in [begin+1, begin+2, begin] + range(begin+3, end):
</snippet></ROW><ROW><id>16556379</id><snippet>__init__.py</snippet></ROW><ROW><id>16556379</id><snippet>from django.contrib.auth.models import User

if User.objects.filter(username="hello").count() == 0:
  user = User.objects.create_user(username='hello', password='hellotest')
  user.save()
</snippet></ROW><ROW><id>16556379</id><snippet>auth_user</snippet></ROW><ROW><id>16556379</id><snippet>auth_group</snippet></ROW><ROW><id>16556473</id><snippet>collections.Counter</snippet></ROW><ROW><id>16556473</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>16556473</id><snippet>Counter.subtract()</snippet></ROW><ROW><id>16556473</id><snippet>Counter</snippet></ROW><ROW><id>16556473</id><snippet>Counter.elements()</snippet></ROW><ROW><id>16556473</id><snippet>from collections import Counter

def normalize_list(L, threshold):
    cntr = Counter(L)
    least_count = cntr.most_common()[-1][1]
    if least_count &gt; threshold:
        least_count -= 1
    cntr.subtract([item for k in cntr.keys() for item in [k] * least_count])
    return list(cntr.elements())
</snippet></ROW><ROW><id>16556473</id><snippet>&gt;&gt;&gt; a, b, c, d, e = 'abcde'
&gt;&gt;&gt; normalize_list([a, a, a, a, a, b, b, b, b, c, c, c, d, d], 10)
['a', 'a', 'a', 'c', 'b', 'b']

&gt;&gt;&gt; normalize_list(your_list, 6)
[u'laboratori', u'releas', u'want', u'want', u'want', u'want', u'want', u'want', u'want', u'crime', u'crime', u'crime', u'crime', u'crime', u'crime', u'crime', u'crime', u'crime', u'crime', u'crime', u'boston', u'boston', u'boston', u'boston', u'boston', u'boston', u'boston', u'2011', u'2011', u'2011', u'tsarnaev', u'tsarnaev', u'tsarnaev', u'tsarnaev', u'tsarnaev', u'tsarnaev', u'tsarnaev', u'tsarnaev', u'tsarnaev', u'investig', u'investig', u'investig', u'investig', u'investig', u'investig', u'investig', u'may', u'govern', u'govern', u'govern', u'govern', u'govern', u'press', u'press', u'press', u'press', u'press', u'press', u'press', u'press', u'news', u'news', u'news', u'news', u'news', u'news', u'news', u'news', u'news', u'tamerlan', u'tamerlan', u'tamerlan', u'tamerlan', u'tamerlan', u'servic', u'servic', u'servic', u'servic', u'servic', u'servic', u'servic', u'servic', u'servic', u'servic', u'foreign', u'foreign', u'foreign', u'foreign', u'inform', u'inform', u'inform', u'inform', u'inform', u'inform', u'inform', u'inform', u'inform', u'inform', u'inform', u'inform']
</snippet></ROW><ROW><id>16556508</id><snippet>__repr__</snippet></ROW><ROW><id>16556508</id><snippet>string</snippet></ROW><ROW><id>16556508</id><snippet>list</snippet></ROW><ROW><id>16556508</id><snippet>return</snippet></ROW><ROW><id>16556508</id><snippet>return '\n'.join(new)</snippet></ROW><ROW><id>16556565</id><snippet>In [35]: a = ((37,),)

In [36]: a
Out[36]: ((37,),)

In [37]: a[0]
Out[37]: (37,)

In [38]: a[0][0]
Out[38]: 37
</snippet></ROW><ROW><id>16556799</id><snippet>list</snippet></ROW><ROW><id>16556799</id><snippet>iter</snippet></ROW><ROW><id>16556799</id><snippet>__iter__</snippet></ROW><ROW><id>16556799</id><snippet>dict</snippet></ROW><ROW><id>16556799</id><snippet>list</snippet></ROW><ROW><id>16556799</id><snippet>dict</snippet></ROW><ROW><id>16556799</id><snippet>&gt;&gt;&gt; class A(object):
    def __init__(self,lst):
        self.lst = lst
    def __iter__(self):
        print 'iter on A'
        return iter(self.lst)


&gt;&gt;&gt; a = A(range(10))
&gt;&gt;&gt; list(a)
iter on A
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>16556799</id><snippet>items</snippet></ROW><ROW><id>16556799</id><snippet>__iter__</snippet></ROW><ROW><id>16556799</id><snippet>O(n)</snippet></ROW><ROW><id>16556799</id><snippet>O(1)</snippet></ROW><ROW><id>16556799</id><snippet>O(n)</snippet></ROW><ROW><id>16556799</id><snippet>class myDict(dict):
    def __iter__(self):
        return self.iteritems()
</snippet></ROW><ROW><id>16556799</id><snippet>list</snippet></ROW><ROW><id>16556799</id><snippet>myDict</snippet></ROW><ROW><id>16556817</id><snippet>attr_name = 'employer_id'

if getattr(employee, attr_name) == 3:
    ...
</snippet></ROW><ROW><id>16556940</id><snippet>cursor.execute ("update `1` set `2`=aaa where `1`='5'")
</snippet></ROW><ROW><id>16556940</id><snippet>cursor.execute ("update `1` set `2`= '" + aaa + "' where `1`='5'")
</snippet></ROW><ROW><id>16556940</id><snippet>str(aaa)
</snippet></ROW><ROW><id>16557616</id><snippet>def whWordExtractor(inputFile):
    try:
        whPattern = re.compile(r'who|what|how|where|when|why|which|whom|whose', re.IGNORECASE)
        with open(inputFile, "r") as infile:
            for line in infile:
                whMatch = whPattern.search(line)
                if whMatch:
                    whWord = whMatch.group()
                    print whWord
                    # save to file
                else:
                    # no match
    except IOError:
        pass
</snippet></ROW><ROW><id>16557750</id><snippet>def _get_project(self, cr, uid, context=None):
        #ADD YOUR LOGIC
        return result[0]

'project_id': _get_project
</snippet></ROW><ROW><id>16557750</id><snippet>domain="[('analytic_account_id.user_id','=',uid)]" 
</snippet></ROW><ROW><id>16557799</id><snippet>x = "\\u2018f\\u2019fdsfs..."; j = json.loads('"' + x + '"'); print j.encode('cp1252')
‘f’fdsfs...
</snippet></ROW><ROW><id>16557799</id><snippet>&gt;&gt;&gt; import unicodecsv as csv #https://github.com/jdunck/python-unicodecsv
&gt;&gt;&gt; x = "\\u2018f\\u2019fdsfs..."; j = json.loads('"' + x + '"');
&gt;&gt;&gt; with open("some_file.csv","wb") as f:
...      w = csv.writer(f,encoding="cp1252")
...      w.writerow([j,"normal"])
...
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16557897</id><snippet>str.split()</snippet></ROW><ROW><id>16557897</id><snippet>map</snippet></ROW><ROW><id>16557897</id><snippet>list comprehension</snippet></ROW><ROW><id>16557897</id><snippet>&gt;&gt;&gt; n1,n2 = map(int,raw_input().split())
100 20
&gt;&gt;&gt; n1
100
&gt;&gt;&gt; n2
20

&gt;&gt;&gt; n1,n2 = [int(x) for x in raw_input().split()]
123 43
&gt;&gt;&gt; n1
123
&gt;&gt;&gt; n2
43
</snippet></ROW><ROW><id>16557913</id><snippet>from interface.modules import Wiki, Search, Web, Default

modules = {'wiki': Wiki, 'search': Search, 'Internet': Web, 'browser': Web}

module_to_load = modules.get(user_input, Default)

view.load(module_to_load)
</snippet></ROW><ROW><id>16558145</id><snippet>subprocess.call</snippet></ROW><ROW><id>16558145</id><snippet>subprocess.call("export DISPLAY=:0; feh --bg-scale " + random.choice(select_files), shell=True)
</snippet></ROW><ROW><id>16558145</id><snippet>DISPLAY</snippet></ROW><ROW><id>16558234</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r'(?P&lt;foo&gt;foo)|(?P&lt;bar&gt;bar)|(?P&lt;baz&gt;baz)')
&gt;&gt;&gt; data = {}
&gt;&gt;&gt; for match in regex.finditer('bar baz foo something'):
...     data.update((k, v) for k, v in match.groupdict().items() if v is not None)
... 
&gt;&gt;&gt; data
{'baz': 'baz', 'foo': 'foo', 'bar': 'bar'}
</snippet></ROW><ROW><id>16558394</id><snippet>form1</snippet></ROW><ROW><id>16558394</id><snippet>self</snippet></ROW><ROW><id>16558600</id><snippet>.readlines()</snippet></ROW><ROW><id>16558600</id><snippet>for line in result.stdout:
    print line
</snippet></ROW><ROW><id>16558998</id><snippet>tableUserDetailsList = []
for row in tableUserDetails.findAll('tr'):
    for col in row.findAll('td'):
        contents = list(col.stripped_strings)
        if contents:
            contentTd = contents[0]
            print "TD Number %d : %s" % (i, contentTd)
            tableUserDetailsList.append(contentTd)
            i += 1
</snippet></ROW><ROW><id>16558998</id><snippet>spans</snippet></ROW><ROW><id>16558998</id><snippet>span</snippet></ROW><ROW><id>16558998</id><snippet>col.contents</snippet></ROW><ROW><id>16559118</id><snippet>\u</snippet></ROW><ROW><id>16559118</id><snippet>a = u'\u0D05'</snippet></ROW><ROW><id>16559118</id><snippet>print a.decode('unicode-escape')</snippet></ROW><ROW><id>16559219</id><snippet>logdir = r"/cygdrive/c/bob/logs.txt"

with open(logdir) as fin:
    for line in fin:
        with open(line.strip()) as log:
            print log.readlines()
</snippet></ROW><ROW><id>16559219</id><snippet>print</snippet></ROW><ROW><id>16559219</id><snippet>print "".join(log.readlines())
</snippet></ROW><ROW><id>16559741</id><snippet>var = 10

for x in range(var):
    print(' '*x+'v'+'v'*(var-1-x)*2+' '*(2*x+1)+'v'+'v'*(var-1-x)*2)

for p in range(var):
    print(' '*var+' '*p+'v'+'v'*(var-1-p)*2)
</snippet></ROW><ROW><id>16559741</id><snippet>vvvvvvvvvvvvvvvvvvv vvvvvvvvvvvvvvvvvvv
 vvvvvvvvvvvvvvvvv   vvvvvvvvvvvvvvvvv
  vvvvvvvvvvvvvvv     vvvvvvvvvvvvvvv
   vvvvvvvvvvvvv       vvvvvvvvvvvvv
    vvvvvvvvvvv         vvvvvvvvvvv
     vvvvvvvvv           vvvvvvvvv
      vvvvvvv             vvvvvvv
       vvvvv               vvvvv
        vvv                 vvv
         v                   v
          vvvvvvvvvvvvvvvvvvv
           vvvvvvvvvvvvvvvvv
            vvvvvvvvvvvvvvv
             vvvvvvvvvvvvv
              vvvvvvvvvvv
               vvvvvvvvv
                vvvvvvv
                 vvvvv
                  vvv
                   v
</snippet></ROW><ROW><id>16559973</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import sqlite3

import unicodecsv


con = sqlite3.connect('mycorpus.db')
cur = con.cursor()
cur.execute("CREATE TABLE Corpus(sid INT, scid INT, sent TEXT, PRIMARY KEY (sid))")

with open('corpus.tab', 'rb') as input_file:
    reader = unicodecsv.reader(input_file, delimiter="\t")
    data = [row for row in reader]

cur.executemany("INSERT INTO Corpus (sid, scid, sent) VALUES (?, ?, ?);", data)
con.commit()
</snippet></ROW><ROW><id>16560026</id><snippet>%s</snippet></ROW><ROW><id>16560026</id><snippet>%(name)s</snippet></ROW><ROW><id>16560026</id><snippet>argument['name']</snippet></ROW><ROW><id>16560026</id><snippet>self._logger.info('Device channels set: %s' % str(self._device_channels))
</snippet></ROW><ROW><id>16560367</id><snippet>result = ""
for char in string:
    if not (char.isalpha() and char in result):
        result += char
</snippet></ROW><ROW><id>16560568</id><snippet>replace_with = """
set filelid [open "C:/Sanity_Automation/Work_Project/Output/smokeTestResult" w+]
puts $filelid
close $filelid
"""
search = "AgtQtl::CloseAllOutputFiles"

fd1 = open('so.tcl')
fd2 = open('so1.tcl', 'w')

for line in fd1.readlines():
    if line.find(search) &gt; -1:
        fd2.write(replace_with)
    else:
        fd2.write(line)

fd1.close()
fd2.close() 
</snippet></ROW><ROW><id>16560774</id><snippet>GET http://www.website-your-are-crawling.com/men/shoes/?page=2 # 2,3,4,5,6 etc...
</snippet></ROW><ROW><id>16560774</id><snippet>&lt;li id="PH969SH70HPTINDFAS" class="itm hasOverlay unit size1of4 "&gt;
  &lt;div id="qa-quick-view-btn" class="quickviewZoom itm-quickview ui-buttonQuickview l-absolute pos-t" title="Quick View" data-url ="phosphorus-Black-Moccasins-233629.html" data-sku="PH969SH70HPTINDFAS" onClick="_gaq.push(['_trackEvent', 'BadgeQV','Shown','OFFER INSIDE']);"&gt;Quick view&lt;/div&gt;

                                    &lt;div class="itm-qlInsert tooltip-qlist  highlightStar"
                     onclick="javascript:Rocket.QuickList.insert('PH969SH70HPTINDFAS', 'catalog');
                                             return false;" &gt;
                                              &lt;div class="starHrMsg"&gt;
                         &lt;span class="starHrMsgArrow"&gt; &lt;/span&gt;
                         Save for later                         &lt;/div&gt;
                                        &lt;/div&gt;
                &lt;a id='cat_105_PH969SH70HPTINDFAS' class="itm-link sobrTxt" href="/phosphorus-Black-Moccasins-233629.html" 
                                    onclick="fireGaq('_trackEvent', 'Catalog to PDP', 'men--Shoes--Moccasins', 'PH969SH70HPTINDFAS--1699.00--', this),fireGaq('_trackEvent', 'BadgePDP','Shown','OFFER INSIDE', this);"&gt;
                    &lt;span class="lazyImage"&gt;
                        &lt;span style="width:176px;height:255px;" class="itm-imageWrapper itm-imageWrapper-PH969SH70HPTINDFAS" id="http://static4.jassets.com/p/Phosphorus-Black-Moccasins-6668-926332-1-catalog.jpg" itm-img-width="176" itm-img-height="255" itm-img-sprites="4"&gt;
                            &lt;noscript&gt;&lt;img src="http://static4.jassets.com/p/Phosphorus-Black-Moccasins-6668-926332-1-catalog.jpg" width="176" height="255" class="itm-img"&gt;&lt;/noscript&gt;
                        &lt;/span&gt;                            
                    &lt;/span&gt;

                                            &lt;span class="itm-budgeFlag offInside"&gt;&lt;span class="flagBrdLeft"&gt;&lt;/span&gt;OFFER INSIDE&lt;/span&gt;                       
                                            &lt;span class="itm-Catbrand strong"&gt;Phosphorus&lt;/span&gt;
                    &lt;span class="itm-title"&gt;
                                                                                Black Moccasins                        &lt;/span&gt;
</snippet></ROW><ROW><id>16560774</id><snippet>Request</snippet></ROW><ROW><id>16560774</id><snippet>parse</snippet></ROW><ROW><id>16560774</id><snippet>def parse(self, response):
    # ... Extract items in the page using extractors
    n = number of the next "page" to parse
    # You get get n by using response.url, extracting the number
    # at the end and adding 1

    # It is VERY IMPORTANT to set the Referer and X-Requested-With headers
    # here because that's how the website detects if the request was made by javascript
    # or direcly by following a link.
    req = Request(url="http://www.website-your-are-crawling.com/men/shoes/?page=" + n,
       headers = {"Referer": "http://www.website-your-are-crawling.com/men/shoes/",
          "X-Requested-With": "XMLHttpRequest"})
    return req # and your items
</snippet></ROW><ROW><id>16560774</id><snippet>http://www.website-your-are-crawling.com/men/shoes/?page=2</snippet></ROW><ROW><id>16560774</id><snippet>http://www.website-your-are-crawling.com/men/shoes/</snippet></ROW><ROW><id>16560774</id><snippet>X-Requested-With</snippet></ROW><ROW><id>16560774</id><snippet>XMLHttpRequest</snippet></ROW><ROW><id>16560860</id><snippet>å</snippet></ROW><ROW><id>16560860</id><snippet>\w</snippet></ROW><ROW><id>16560860</id><snippet>re</snippet></ROW><ROW><id>16560860</id><snippet>\w</snippet></ROW><ROW><id>16560860</id><snippet>LOCALE</snippet></ROW><ROW><id>16560860</id><snippet>UNICODE</snippet></ROW><ROW><id>16560860</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>16560860</id><snippet>LOCALE</snippet></ROW><ROW><id>16560860</id><snippet>[0-9_]</snippet></ROW><ROW><id>16560860</id><snippet>UNICODE</snippet></ROW><ROW><id>16560860</id><snippet>[0-9_]</snippet></ROW><ROW><id>16560860</id><snippet>u''</snippet></ROW><ROW><id>16560860</id><snippet>re.sub(ur'...')</snippet></ROW><ROW><id>16560860</id><snippet>re.UNICODE</snippet></ROW><ROW><id>16560860</id><snippet>\w</snippet></ROW><ROW><id>16560860</id><snippet>re</snippet></ROW><ROW><id>16560860</id><snippet>&gt;&gt;&gt; print re.sub(ur'(\w)\1+', r'\1\1', text, re.UNICODE)
ånd ånd ååååånd dd flløde... :)asd 
</snippet></ROW><ROW><id>16560860</id><snippet>å</snippet></ROW><ROW><id>16560860</id><snippet>&gt;&gt;&gt; print re.sub(ur'\w', '', text, re.UNICODE)
å å ååååå  ø... :) 
</snippet></ROW><ROW><id>16560860</id><snippet>regex</snippet></ROW><ROW><id>16560860</id><snippet>re</snippet></ROW><ROW><id>16560860</id><snippet>&gt;&gt;&gt; import regex
&gt;&gt;&gt; print regex.sub(ur'(\w)\1+', r'\1\1', text, re.UNICODE)
ånd ånd åånd dd flløde... :)asd 
</snippet></ROW><ROW><id>16560901</id><snippet>from django.contrib.auth import login as auth_login
auth_login(request, user)
</snippet></ROW><ROW><id>16560975</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>16560975</id><snippet>def merge(A, B, f):
    # Start with symmetric difference; keys either in A or B, but not both
    merged = {k: A.get(k, B.get(k)) for k in A.viewkeys() ^ B.viewkeys()}
    # Update with `f()` applied to the intersection
    merged.update({k: f(A[k], B[k]) for k in A.viewkeys() &amp; B.viewkeys()})
    return merged
</snippet></ROW><ROW><id>16560975</id><snippet>.viewkeys()</snippet></ROW><ROW><id>16560975</id><snippet>.keys()</snippet></ROW><ROW><id>16560975</id><snippet>.keys()</snippet></ROW><ROW><id>16560975</id><snippet>merge()</snippet></ROW><ROW><id>16560975</id><snippet>f()</snippet></ROW><ROW><id>16560975</id><snippet>&gt;&gt;&gt; def f(x, y):
...     return x * y
... 
&gt;&gt;&gt; A = {1:1, 2:3}
&gt;&gt;&gt; B = {7:3, 2:2}
&gt;&gt;&gt; merge(A, B, f)
{1: 1, 2: 6, 7: 3}
&gt;&gt;&gt; merge(A, B, lambda a, b: '{} merged with {}'.format(a, b))
{1: 1, 2: '3 merged with 2', 7: 3}
</snippet></ROW><ROW><id>16561343</id><snippet>unique_everseen</snippet></ROW><ROW><id>16561343</id><snippet>def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in ifilterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element

&gt;&gt;&gt; from itertools import *
&gt;&gt;&gt; lis = ["i","k"]
&gt;&gt;&gt; mydict = OrderedDict([('a', '1'), ('d', '2'), ('f', '1'), ('i', '2'), ('k', '2'), ('m', '1')])
# A list is used in creating the OrderedDict, a dict would lose initial order
&gt;&gt;&gt; OrderedDict((key,mydict[key]) for key in unique_everseen(chain(lis,mydict)))
OrderedDict([('i', '2'), ('k', '2'), ('a', '1'), ('d', '2'), ('f', '1'), ('m', '1')])
</snippet></ROW><ROW><id>16561370</id><snippet>xls</snippet></ROW><ROW><id>16561370</id><snippet>import xlwt
import xlrd

workbook = xlrd.open_workbook('input.xls')
sheet = workbook.sheet_by_index(0)

data = [sheet.cell_value(0, col) for col in range(sheet.ncols)]

workbook = xlwt.Workbook()
sheet = workbook.add_sheet('test')

for index, value in enumerate(data):
    sheet.write(0, index, value)

workbook.save('output.xls')
</snippet></ROW><ROW><id>16561405</id><snippet>cursor.rowcount</snippet></ROW><ROW><id>16561405</id><snippet>INSERT</snippet></ROW><ROW><id>16561405</id><snippet>SELECT ... INTO</snippet></ROW><ROW><id>16561405</id><snippet>.fetchall()</snippet></ROW><ROW><id>16561405</id><snippet>.execute()</snippet></ROW><ROW><id>16561806</id><snippet>str.title()</snippet></ROW><ROW><id>16561806</id><snippet>for i, word in enumerate(split):
    split[i] = word[0].upper() + word[1:]

result = ' '.join(split)
</snippet></ROW><ROW><id>16561806</id><snippet>enumerate()</snippet></ROW><ROW><id>16561806</id><snippet>split</snippet></ROW><ROW><id>16561940</id><snippet>app.py</snippet></ROW><ROW><id>16561940</id><snippet>app.py</snippet></ROW><ROW><id>16562019</id><snippet>In [129]: a = ['A_1', 'A_2', 'A_3']

In [130]: b = ['B_1', 'B_2', 'B_3']

In [131]: ina = (df[a] == 'yes').any(axis=1)

In [132]: inb = (df[b] == 'yes').any(axis=1)

In [133]: ina &amp; ~inb
Out[133]:
Observation
Obs1            True
Obs2           False
Obs3           False
dtype: bool

In [134]: ~ina &amp; inb
Out[134]:
Observation
Obs1           False
Obs2            True
Obs3           False
dtype: bool

In [135]: ina &amp; inb
Out[135]:
Observation
Obs1           False
Obs2           False
Obs3            True
dtype: bool
</snippet></ROW><ROW><id>16562180</id><snippet>boxes_out</snippet></ROW><ROW><id>16562180</id><snippet>6 * division_factor ** 3</snippet></ROW><ROW><id>16562180</id><snippet>division_factor</snippet></ROW><ROW><id>16562180</id><snippet>numpy</snippet></ROW><ROW><id>16562246</id><snippet>lambda</snippet></ROW><ROW><id>16562246</id><snippet>&gt;&gt;&gt; y = 1
&gt;&gt;&gt; f = lambda x: x + y
&gt;&gt;&gt; f(1)
2
&gt;&gt;&gt; y = 2
&gt;&gt;&gt; f(1)
3
</snippet></ROW><ROW><id>16562246</id><snippet>var</snippet></ROW><ROW><id>16562246</id><snippet>lambda</snippet></ROW><ROW><id>16562246</id><snippet>y</snippet></ROW><ROW><id>16562246</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_GLOBAL              0 (y)
              6 BINARY_ADD
              7 RETURN_VALUE
</snippet></ROW><ROW><id>16562246</id><snippet>y</snippet></ROW><ROW><id>16562246</id><snippet>lambda</snippet></ROW><ROW><id>16562246</id><snippet>&gt;&gt;&gt; y = 1
&gt;&gt;&gt; f = lambda x, y=y: x + y
&gt;&gt;&gt; f(1)
2
&gt;&gt;&gt; y = 2
&gt;&gt;&gt; f(1)
2
</snippet></ROW><ROW><id>16562246</id><snippet>y</snippet></ROW><ROW><id>16562246</id><snippet>lambda</snippet></ROW><ROW><id>16562246</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_FAST                1 (y)
              6 BINARY_ADD
              7 RETURN_VALUE
</snippet></ROW><ROW><id>16562250</id><snippet>function</snippet></ROW><ROW><id>16562250</id><snippet>__init__</snippet></ROW><ROW><id>16562250</id><snippet>def __init__(self, master):
    function = Entry(self, width=35).pack(side=LEFT, padx=2)
</snippet></ROW><ROW><id>16562250</id><snippet>function</snippet></ROW><ROW><id>16562250</id><snippet>__init__</snippet></ROW><ROW><id>16562250</id><snippet>def __init__(self, master):
    self.function = Entry(self, width=35).pack(side=LEFT, padx=2)
</snippet></ROW><ROW><id>16562250</id><snippet>ButtonFrame</snippet></ROW><ROW><id>16562250</id><snippet>FunctionFrame</snippet></ROW><ROW><id>16562250</id><snippet>def add_function(self):
    make_function(FunctionFrame(self).function)
</snippet></ROW><ROW><id>16562317</id><snippet>y</snippet></ROW><ROW><id>16562317</id><snippet>1.e-324</snippet></ROW><ROW><id>16562317</id><snippet>y += 1e-100
</snippet></ROW><ROW><id>16562317</id><snippet>x = rand.normal(size=(300,50000)).astype('longdouble')
y = rand.normal(size=(300,50000)).astype('longdouble')
</snippet></ROW><ROW><id>16562566</id><snippet>str.split()</snippet></ROW><ROW><id>16562566</id><snippet>row = line.split()
</snippet></ROW><ROW><id>16562566</id><snippet>csv.writer()</snippet></ROW><ROW><id>16562566</id><snippet>str.split()</snippet></ROW><ROW><id>16562566</id><snippet>None</snippet></ROW><ROW><id>16562566</id><snippet>&gt;&gt;&gt; 'foobar   1234.569    7890.125     12356.789   -236.4569   236.9874   -569.9844\n'.split()
['foobar', '1234.569', '7890.125', '12356.789', '-236.4569', '236.9874', '-569.9844']
</snippet></ROW><ROW><id>16562566</id><snippet>import csv

with open(inputfilename, 'r') as infile, open(outputcsv, 'wb') as outfile:
    writer = csv.writer(outfile)

    for line in infile:
        row = line.split()
        inverted_nums = [-float(val) for val in row[-3:]]
        writer.writerow(row[:-3] + inverted_nums)
</snippet></ROW><ROW><id>16562590</id><snippet>itertools.combinations(9_cards, 5)</snippet></ROW><ROW><id>16562590</id><snippet>max(all_5_cards_hands, key=hand_score)</snippet></ROW><ROW><id>16562590</id><snippet>STRAIGHT_FLUSH = 9
...
TWO_PAIR = 2
ONE_PAIR = 1
HIGH_CARD = 0

hand_score('A7532')  # I omit suits here
# =&gt; (HIGH_CARD, 14,7,5,3,2)
hand_score('KK333')
# =&gt; (FULL_HOUSE, 3, 13)
hand_score('33444')
# =&gt; (FULL_HOUSE, 4, 3)
hand_score('AKQJ0')
# =&gt; (STRAIGHT, 14)

# Tuples can be easily compared:
(HIGH_CARD, 14,7,5,3,2) &lt; (STRAIGHT, 14)
# =&gt; True
</snippet></ROW><ROW><id>16562854</id><snippet>f.seek(0)
</snippet></ROW><ROW><id>16562854</id><snippet>print list(f)</snippet></ROW><ROW><id>16562854</id><snippet>mylist=list(f)</snippet></ROW><ROW><id>16562854</id><snippet>f</snippet></ROW><ROW><id>16563354</id><snippet>u</snippet></ROW><ROW><id>16563354</id><snippet>u[i]</snippet></ROW><ROW><id>16563354</id><snippet>NameError</snippet></ROW><ROW><id>16563354</id><snippet>u</snippet></ROW><ROW><id>16563354</id><snippet>u[i]</snippet></ROW><ROW><id>16563354</id><snippet>IndexError</snippet></ROW><ROW><id>16563354</id><snippet>u[i]</snippet></ROW><ROW><id>16563354</id><snippet>import numpy as np
u = []
for i in range(5):
    u.append(np.array(input(" ")))
    print u[i]
</snippet></ROW><ROW><id>16563400</id><snippet>res = {}

a=open('a.csv')
for line in a:
    (id, rest) = line.split(',', 1)
    res[id] = rest
a.close()

b=open('b.csv')
for line in b:
    (id, rest) = line.split(',', 1)
    res[id] = rest
b.close()

c=open('c.csv', 'w')
for id, rest in res.items():
    f.write(id+","+rest)
f.close()
</snippet></ROW><ROW><id>16563400</id><snippet>res</snippet></ROW><ROW><id>16563400</id><snippet>key</snippet></ROW><ROW><id>16563400</id><snippet>rest</snippet></ROW><ROW><id>16563400</id><snippet>res = {}
files_to_merge = ['a.csv', 'b.csv']
for filename in files_to_merge:
    f=open(filename)
    for line in f:
        (id, rest) = line.split(',', 1)
        if rest[-1] != '\n': #last line may be missing a newline
            rest = rest + '\n'
        res[id] = rest
    f.close()

f=open('c.csv', 'w')
f.write("\"id\","+res["\"id\""])
del res["\"id\""]
for id, rest in sorted(res.iteritems()):
    f.write(id+","+rest)
f.close()
</snippet></ROW><ROW><id>16563503</id><snippet>import zmq
import socket



context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.setsockopt(zmq.SUBSCRIBE, "")

socket.bind("tcp://*:5000")
print "socket bound"

while True:
    print "Waiting for message"
    message = socket.recv()
    print "message received: " + str(message)
</snippet></ROW><ROW><id>16563559</id><snippet>dol</snippet></ROW><ROW><id>16563559</id><snippet>from itertools import chain
dol_values = set(chain.from_iterable(dol.itervalues()))
</snippet></ROW><ROW><id>16563559</id><snippet>[tup + (True,) if tup[0] in dol_values else tup for tup in lot]
</snippet></ROW><ROW><id>16563559</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; dol_values = set(chain.from_iterable(dol.itervalues()))
&gt;&gt;&gt; dol_values
set(['Item 3', 'Item 2', 'Item 1', 'Item 21', 'Item 4'])
&gt;&gt;&gt; [tup + (True,) if tup[0] in dol_values else tup for tup in lot]
[('Item 1', 43, True), ('Item 4', 82, True), ('Item 12', 33), ('Item 10', 21)]
</snippet></ROW><ROW><id>16563564</id><snippet>CATEGORY_CHOICES = (
    ('Image', 'Image'),
    ('Document', 'Document')
)

title = models.CharField(max_length=400, help_text="Enter the title of the file, this will appear on the listings page")




file_type = models.CharField(choices=CATEGORY_CHOICES, help_text="Optional, but will help with filtering on listings page.", max_length=200, blank=True, null=True, default=None)


image_upload = models.ImageField(upload_to="images/filesApp", height_field="image_height", width_field="image_width", blank=True, null=True)

file_upload = models.FileField(upload_to="pdf/filesApp", blank=True, null=True)

image_height = models.PositiveIntegerField(null=True, blank=True, editable=False)

image_width = models.PositiveIntegerField(null=True, blank=True, editable=False)



def slide_thumbnail(self, width=300, height=200):
    if self.image_upload:
        thumb = DjangoThumbnail(self.image_upload, (width, height))
        return '&lt;img src="%s" /&gt;' % thumb.absolute_url
    return '{img src="/media/img/admin/icon-no.gif" alt="False"}'
slide_thumbnail.allow_tags = True

def __unicode__(self):
    return u'File: %s - %sx%s' % (self.title, self.image_height, self.image_width)
</snippet></ROW><ROW><id>16563564</id><snippet>from django.contrib import admin
from models import *


def delete_selected(modeladmin, request, queryset):
    for element in queryset:
        element.delete()
delete_selected.short_description = "Delete selected elements"

class FileAdmin(admin.ModelAdmin):
    model = File
    actions = [delete_selected]

    list_display = ('title', 'file_type', 'slide_thumbnail')

admin.site.register(File, FileAdmin)
</snippet></ROW><ROW><id>16563747</id><snippet>for line in sys.stdin:
    # ...
</snippet></ROW><ROW><id>16563747</id><snippet>sys.stdin</snippet></ROW><ROW><id>16563747</id><snippet>sys.stdin</snippet></ROW><ROW><id>16563747</id><snippet>sys.stdin.readlines()</snippet></ROW><ROW><id>16563747</id><snippet>a.py</snippet></ROW><ROW><id>16563747</id><snippet>b.py</snippet></ROW><ROW><id>16563747</id><snippet>#!/usr/bin/env python
import sys
while 1:
    line = sys.stdin.readline()
    if not line:
        break
    sys.stdout.write(line.capitalize())
    sys.stdout.flush()
</snippet></ROW><ROW><id>16563747</id><snippet>readline()</snippet></ROW><ROW><id>16563747</id><snippet>a.py</snippet></ROW><ROW><id>16563847</id><snippet>general_values.py</snippet></ROW><ROW><id>16563847</id><snippet>dictionaries</snippet></ROW><ROW><id>16563847</id><snippet>dict</snippet></ROW><ROW><id>16563847</id><snippet>list</snippet></ROW><ROW><id>16563847</id><snippet>main_values.py

    my_dict = {1:1}

some.py

    import main_values
    main_values.my_dict[2] = 2

other.py

    import main_values
    print  main_values.my_dict

    &gt;&gt; {1:1, 2:2}
</snippet></ROW><ROW><id>16564232</id><snippet>class Final(type):
    def __new__(cls, name, bases, classdict):
        for b in bases:
            if isinstance(b, Final):
                raise TypeError("type '{0}' is not an acceptable base type".format(b.__name__))
        return type.__new__(cls, name, bases, dict(classdict))

class Foo:
    __metaclass__ = Final

class Bar(Foo):
    pass
</snippet></ROW><ROW><id>16564232</id><snippet>&gt;&gt;&gt; class Bar(Foo):
...     pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in __new__
TypeError: type 'Foo' is not an acceptable base type
</snippet></ROW><ROW><id>16564232</id><snippet>__metaclass__ = Final</snippet></ROW><ROW><id>16564232</id><snippet>Foo</snippet></ROW><ROW><id>16564363</id><snippet>r"\2".upper() + r", \1"</snippet></ROW><ROW><id>16564363</id><snippet>"\\2, \\1"</snippet></ROW><ROW><id>16564363</id><snippet>re.sub()</snippet></ROW><ROW><id>16564363</id><snippet>.sub()</snippet></ROW><ROW><id>16564363</id><snippet>def uppercase_last(match):
    return "{}, {}".format(match.group(2).upper(), match.group(1))

re.sub("([^ ]+) (.+)", uppercase_last, "Bill Gates")
</snippet></ROW><ROW><id>16564363</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def uppercase_last(match):
...     return "{}, {}".format(match.group(2).upper(), match.group(1))
... 
&gt;&gt;&gt; re.sub("([^ ]+) (.+)", uppercase_last, "Bill Gates")
'GATES, Bill'
</snippet></ROW><ROW><id>16564363</id><snippet>&gt;&gt;&gt; name = 'Bill Gates'
&gt;&gt;&gt; first, rest = name.split(None, 1)
&gt;&gt;&gt; "{}, {}".format(rest.upper(), first)
</snippet></ROW><ROW><id>16564524</id><snippet>with open('titles_file.txt') as f:
    titlelist = f.readlines()
</snippet></ROW><ROW><id>16564524</id><snippet>matplotlib.Axes</snippet></ROW><ROW><id>16564524</id><snippet>set_title</snippet></ROW><ROW><id>16564524</id><snippet>for count,i in enumerate(I_phase):
    F = sum(m*np.cos(2*np.pi*l*x/D) for m,l in zip(i,n))
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_title(titlelist[count])
    ax.plot(x,F)
    fig.savefig(str(count)+'.png')
</snippet></ROW><ROW><id>16564601</id><snippet>import redis

N_PIPE = 50 # number of MGET commands per pipeline execution
N_MGET = 20 # number of keys per MGET command

# Return a dictionary from the input array containing the keys
def massive_get( r, array ):
    res = {}
    pipe = r.pipeline(transaction=False)
    i = 0
    while i &lt; len(array):
        keys = []
        for n in range(0,N_PIPE):
            k = array[i:i+N_MGET]
            keys.append( k )
            pipe.mget( k )
            i += N_MGET
            if i&gt;len(array):
                break
        for k,v in zip( keys, pipe.execute() ):
            res.update( dict(zip(k,v)) )
    return res

# Example: retrieve all keys from 0 to 1022:
pool = redis.ConnectionPool(host='localhost', port=6379, db=0)
r = redis.Redis(connection_pool=pool)
array = range(0,1023)
print massive_get(r,array)
</snippet></ROW><ROW><id>16564636</id><snippet>&gt;&gt;&gt; rR = "3,28,2"
&gt;&gt;&gt; rR = re.split(r"[\W]+", rR)
&gt;&gt;&gt; map(int, xrange(*map(int, rR)))
[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16564648</id><snippet>\</snippet></ROW><ROW><id>16564648</id><snippet>\\</snippet></ROW><ROW><id>16564648</id><snippet>"$\\mathbb{R}$.\\\\"</snippet></ROW><ROW><id>16564648</id><snippet>$\mathbb{R}$.\\</snippet></ROW><ROW><id>16564804</id><snippet>zip</snippet></ROW><ROW><id>16564804</id><snippet>mylist</snippet></ROW><ROW><id>16564804</id><snippet>zippedLists = zip(mylist, mylist[12:], mylist[2:], mylist[13:])
</snippet></ROW><ROW><id>16564804</id><snippet>slicedList = zippedLists[::12]
</snippet></ROW><ROW><id>16564804</id><snippet>for elt1, elt13, elt2, elt14 in slicedList:
    if elt1 == elt13 and elt2 == elt14:
        print elt1
</snippet></ROW><ROW><id>16564804</id><snippet>#prints out samenodes
f = open('newerfile.txt')
mylist = list(f)

zippedLists = zip(mylist, mylist[12:], mylist[2:], mylist[13:])
slicedList = zippedLists[::12]

for elt1, elt13, elt2, elt14 in slicedList:
    if elt1 == elt13 and elt2 == elt14:
        print elt1
</snippet></ROW><ROW><id>16564804</id><snippet>itertools</snippet></ROW><ROW><id>16564804</id><snippet>from itertools import islice, izip

#prints out samenodes
f = open('newerfile.txt')
mylist = list(f)

zippedLists = itertools.izip(mylist, islice(mylist, 12), islice(mylist, 2), islice(mylist, 13))
slicedList = itertools.islice(zippedLists, 0, None, 12)

for elt1, elt13, elt2, elt14 in slicedList:
    if elt1 == elt13 and elt2 == elt14:
        print elt1
</snippet></ROW><ROW><id>16564804</id><snippet>itertools</snippet></ROW><ROW><id>16564804</id><snippet>mylist</snippet></ROW><ROW><id>16564804</id><snippet>itertools.tee</snippet></ROW><ROW><id>16565155</id><snippet>sudo su
</snippet></ROW><ROW><id>16565155</id><snippet>crontab -e
</snippet></ROW><ROW><id>16565155</id><snippet>/ 0 * * * * /home/pi/yourscript.py
</snippet></ROW><ROW><id>16565499</id><snippet>root</snippet></ROW><ROW><id>16565499</id><snippet>/usr/sbin/</snippet></ROW><ROW><id>16565499</id><snippet>/etc/</snippet></ROW><ROW><id>16565499</id><snippet>/var/log/</snippet></ROW><ROW><id>16565499</id><snippet>/usr/share/pyshared/</snippet></ROW><ROW><id>16565499</id><snippet>/usr/bin/</snippet></ROW><ROW><id>16565499</id><snippet>/usr/sbin/</snippet></ROW><ROW><id>16565670</id><snippet>import heapq
heapq.nlargest(10, (k for k in d if d[k][1] &gt; n), key=lambda k: d[k][0])
</snippet></ROW><ROW><id>16566026</id><snippet>response</snippet></ROW><ROW><id>16566026</id><snippet>response()</snippet></ROW><ROW><id>16566026</id><snippet>def get_response():
    # ...


response = get_response()
</snippet></ROW><ROW><id>16566026</id><snippet>def response():
    # ....

received_response = response()
</snippet></ROW><ROW><id>16566128</id><snippet>url=urllib.unquote(url).decode('utf8') 
</snippet></ROW><ROW><id>16566128</id><snippet>&gt;&gt;&gt; import urllib 
&gt;&gt;&gt; url='some-site.com?title=%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D0%B2%D0%B0%D1%8F+%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0'
&gt;&gt;&gt; urllib.unquote(url).decode('utf8') 
u'some-site.com?title=\u043f\u0440\u0430\u0432\u043e\u0432\u0430\u044f+\u0437\u0430\u0449\u0438\u0442\u0430'
&gt;&gt;&gt; print urllib.unquote(url).decode('utf8')
some-site.com?title=правовая+защита
</snippet></ROW><ROW><id>16566267</id><snippet>'page'</snippet></ROW><ROW><id>16566267</id><snippet>'{http://www.mediawiki.org/xml/export-0.8/}page'</snippet></ROW><ROW><id>16566267</id><snippet>'{http://www.mediawiki.org/xml/export-0.8/}ns'</snippet></ROW><ROW><id>16566267</id><snippet>lxml</snippet></ROW><ROW><id>16566267</id><snippet>iterparse()</snippet></ROW><ROW><id>16566267</id><snippet>.iterparse()</snippet></ROW><ROW><id>16566267</id><snippet>page</snippet></ROW><ROW><id>16566267</id><snippet>context = etree.iterparse('test.xml', events=('end',), tag='{http://www.mediawiki.org/xml/export-0.8/}page')
</snippet></ROW><ROW><id>16566267</id><snippet>.find()</snippet></ROW><ROW><id>16566267</id><snippet>ns</snippet></ROW><ROW><id>16566267</id><snippet>title</snippet></ROW><ROW><id>16566267</id><snippet>xpath()</snippet></ROW><ROW><id>16566267</id><snippet>def process_element(elem):
    if elem.xpath("./*[local-name()='ns']/text()=0"):
        print elem.xpath("./*[local-name()='title']/text()")[0]
</snippet></ROW><ROW><id>16566267</id><snippet>&gt;&gt;&gt; fast_iter(context, process_element)
MediaWiki:Category
</snippet></ROW><ROW><id>16566356</id><snippet>raw_input</snippet></ROW><ROW><id>16566356</id><snippet>replace</snippet></ROW><ROW><id>16566356</id><snippet>&gt;&gt;&gt; str = raw_input('please enter string: ')
please enter string: hello world, how do i enter line breaks?
&gt;&gt;&gt; # pressing enter didn't work...
...
&gt;&gt;&gt; str
'hello world, how do i enter line breaks?'
&gt;&gt;&gt; str.replace(' ', '')
'helloworld,howdoienterlinebreaks?'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16566356</id><snippet>'\n'</snippet></ROW><ROW><id>16566356</id><snippet>\r</snippet></ROW><ROW><id>16566356</id><snippet>replace</snippet></ROW><ROW><id>16566356</id><snippet># you probably want to use a space ' ' to replace `\n`
mystring = mystring.replace('\n', ' ').replace('\r', '')
</snippet></ROW><ROW><id>16566356</id><snippet>string</snippet></ROW><ROW><id>16566356</id><snippet>string</snippet></ROW><ROW><id>16566356</id><snippet>file</snippet></ROW><ROW><id>16566358</id><snippet>All operations (*, /, +, ** etc.) are elementwise</snippet></ROW><ROW><id>16566433</id><snippet>datetime</snippet></ROW><ROW><id>16566433</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; now
datetime.datetime(2013, 5, 15, 15, 30, 17, 908152)
&gt;&gt;&gt; onehour = datetime.timedelta(hours=1)
&gt;&gt;&gt; oneminute = datetime.timedelta(minutes=1)
&gt;&gt;&gt; now + onehour
datetime.datetime(2013, 5, 15, 16, 30, 17, 908152)
&gt;&gt;&gt; now + oneminute
datetime.datetime(2013, 5, 15, 15, 31, 17, 908152)
&gt;&gt;&gt; now.strftime("%b %d %Y %H:%M:%S")
'May 15 2013 15:30:17'
&gt;&gt;&gt; (now - onehour).strftime("%b %d %Y %H:%M:%S")
'May 15 2013 14:30:17'
</snippet></ROW><ROW><id>16566750</id><snippet>f = d * e[:,np.newaxis,np.newaxis]

d.shape
(3, 2, 2)
e.shape
(3,)
e[:,np.newaxis,np.newaxis].shape
(3, 1, 1)
</snippet></ROW><ROW><id>16566750</id><snippet>d</snippet></ROW><ROW><id>16566750</id><snippet>e</snippet></ROW><ROW><id>16566750</id><snippet>d</snippet></ROW><ROW><id>16566750</id><snippet>d *= e[:,np.newaxis,np.newaxis]
</snippet></ROW><ROW><id>16566974</id><snippet>import os   
import shutil
from time import strftime
import subprocess

logsdir="c:\logs"
zipdir="c:\logs\puttylogs\zipped_logs"
zip_program="zip.exe"

for files in os.listdir(logsdir): 
    if files.endswith(".log"):
        files1=files+"."+strftime("%Y%m%d")+".zip"
        os.chdir(logsdir)
        subprocess.call([zip_program,files1, files])
        shutil.move(files1, zipdir)
        os.remove(files)
</snippet></ROW><ROW><id>16567353</id><snippet>cursor = connections["mam"].cursor()        
cursor.execute("SELECT B.name, A.category_id, A.brand_id, SUM(A.answer) AS total, C.name FROM category_answers A INNER JOIN category B ON A.category_id = B.id INNER JOIN brand C ON A.brand_id = C.id WHERE A.brand_id = %s AND A.category_id = %s AND B.segment_category_id = %s", [cat["brand"],cat["category"],cat["category__segment_category"]])
c_answers = cursor.fetchone()
</snippet></ROW><ROW><id>16567359</id><snippet>random.shuffle()</snippet></ROW><ROW><id>16567359</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; listOne = ['Blue', 'Red', 'Green']
&gt;&gt;&gt; listTwo = [1, 2, 3]
&gt;&gt;&gt; random.shuffle(listTwo)
&gt;&gt;&gt; zip(listOne, listTwo)
[('Blue', 3), ('Red', 2), ('Green', 1)]
&gt;&gt;&gt; random.shuffle(listTwo)
&gt;&gt;&gt; zip(listOne, listTwo)
[('Blue', 2), ('Red', 1), ('Green', 3)]
</snippet></ROW><ROW><id>16567410</id><snippet>&gt;&gt;&gt; 'Hello world with an em-dash: \u2014\n'.encode('utf8')
b'Hello world with an em-dash: \xe2\x80\x94\n'
</snippet></ROW><ROW><id>16567410</id><snippet>bytes</snippet></ROW><ROW><id>16567410</id><snippet>\x..</snippet></ROW><ROW><id>16567410</id><snippet>\n</snippet></ROW><ROW><id>16567410</id><snippet>&gt;&gt;&gt; '\u0015\u0123'
'\x15ģ'
</snippet></ROW><ROW><id>16567410</id><snippet>NEGATIVE ACKNOWLEDGE</snippet></ROW><ROW><id>16567410</id><snippet>0x00</snippet></ROW><ROW><id>16567410</id><snippet>0xFF</snippet></ROW><ROW><id>16567410</id><snippet>\x..</snippet></ROW><ROW><id>16567410</id><snippet>&gt;&gt;&gt; input_text = 'Hello World!'
&gt;&gt;&gt; print(''.join('\\u{:04x}'.format(ord(c)) for c in input_text))
\u0048\u0065\u006c\u006c\u006f\u0020\u0057\u006f\u0072\u006c\u0064\u0021
&gt;&gt;&gt; input_text = 'Hello world with an em-dash: \u2014\n'
&gt;&gt;&gt; print(''.join('\\u{:04x}'.format(ord(c)) for c in input_text))
\u0048\u0065\u006c\u006c\u006f\u0020\u0077\u006f\u0072\u006c\u0064\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006e\u0020\u0065\u006d\u002d\u0064\u0061\u0073\u0068\u003a\u0020\u2014\u000a
</snippet></ROW><ROW><id>16567552</id><snippet>Pillow</snippet></ROW><ROW><id>16567607</id><snippet>a = [3,2]</snippet></ROW><ROW><id>16567607</id><snippet>[3,2,1]</snippet></ROW><ROW><id>16567607</id><snippet>[3, 2, 2]</snippet></ROW><ROW><id>16567607</id><snippet>accum = 0</snippet></ROW><ROW><id>16567607</id><snippet>a[0]</snippet></ROW><ROW><id>16567607</id><snippet>np.maximum.accumulate</snippet></ROW><ROW><id>16567607</id><snippet>&gt;&gt;&gt; a
array([6, 0, 7, 9, 9, 6, 9, 5, 1, 8])
&gt;&gt;&gt; your_code(a)
array([6, 0, 7, 9, 9, 9, 9, 9, 9, 9])
&gt;&gt;&gt; np.maximum.accumulate(a)
array([6, 6, 7, 9, 9, 9, 9, 9, 9, 9])
</snippet></ROW><ROW><id>16567607</id><snippet>np.maximum.accumulate</snippet></ROW><ROW><id>16567607</id><snippet>a[0]</snippet></ROW><ROW><id>16567607</id><snippet>nan</snippet></ROW><ROW><id>16567607</id><snippet>&gt;&gt;&gt; a
array([  2.,   1.,  nan,   3.,   4.,   1.])
&gt;&gt;&gt; np.maximum.accumulate(a)
array([  2.,   2.,  nan,  nan,  nan,  nan])
</snippet></ROW><ROW><id>16567607</id><snippet>fmax</snippet></ROW><ROW><id>16567607</id><snippet>&gt;&gt;&gt; np.fmax.accumulate(a)
array([ 2.,  2.,  2.,  3.,  4.,  4.])
</snippet></ROW><ROW><id>16567607</id><snippet>np.nan_to_num()</snippet></ROW><ROW><id>16567607</id><snippet>nan</snippet></ROW><ROW><id>16567607</id><snippet>&gt;&gt;&gt; np.maximum.accumulate(np.nan_to_num(a))
array([ 2.,  2.,  2.,  3.,  4.,  4.])
</snippet></ROW><ROW><id>16567607</id><snippet>nan</snippet></ROW><ROW><id>16567607</id><snippet>&gt;&gt;&gt; np.fmax.accumulate(a) + (a*0)
array([  2.,   2.,  nan,   3.,   4.,   4.])
</snippet></ROW><ROW><id>16567691</id><snippet>open()</snippet></ROW><ROW><id>16567691</id><snippet>readlines()</snippet></ROW><ROW><id>16567691</id><snippet>read()</snippet></ROW><ROW><id>16567691</id><snippet>import os
out =   [1020,1022]
with open('c:\xml1.txt') as f1,open('c:\somefile.txt',"w") as f2:
    #somefile.txt is temporary file
    text = f1.read()
    for item in out:
        text = text.replace("1029",str(item),1)
    f2.write(text)
#rename that temporary file to real file
os.rename('c:\somefile.txt','c:\xml1.txt')
</snippet></ROW><ROW><id>16567727</id><snippet>\r</snippet></ROW><ROW><id>16567727</id><snippet>CR</snippet></ROW><ROW><id>16567727</id><snippet>\n</snippet></ROW><ROW><id>16567727</id><snippet>LF</snippet></ROW><ROW><id>16567727</id><snippet>LF</snippet></ROW><ROW><id>16567727</id><snippet>CR</snippet></ROW><ROW><id>16567727</id><snippet>\r</snippet></ROW><ROW><id>16567727</id><snippet>\r</snippet></ROW><ROW><id>16567727</id><snippet>\n</snippet></ROW><ROW><id>16567727</id><snippet>\r\n</snippet></ROW><ROW><id>16567727</id><snippet>SCI_SETEOLMODE()</snippet></ROW><ROW><id>16567727</id><snippet>os.linesep</snippet></ROW><ROW><id>16567727</id><snippet>QsciScintilla.setEolMode()</snippet></ROW><ROW><id>16567727</id><snippet>EOLMode</snippet></ROW><ROW><id>16567727</id><snippet>.setEolMode()</snippet></ROW><ROW><id>16568130</id><snippet>ModelForms</snippet></ROW><ROW><id>16568130</id><snippet>User</snippet></ROW><ROW><id>16568130</id><snippet>save()</snippet></ROW><ROW><id>16568130</id><snippet>ModelForm</snippet></ROW><ROW><id>16568145</id><snippet>[x + y for x in l2 for y in l1 ]
</snippet></ROW><ROW><id>16568145</id><snippet>for x in l2:
    for y in l1:
       x + y
</snippet></ROW><ROW><id>16568341</id><snippet>if any('L_' in key for key in dict) and any('R_' in key for key in dict):
    print 'has both'
</snippet></ROW><ROW><id>16568341</id><snippet>L_</snippet></ROW><ROW><id>16568341</id><snippet>R_</snippet></ROW><ROW><id>16568341</id><snippet>"...L_...R_..."</snippet></ROW><ROW><id>16568341</id><snippet>if any('L_' in key and 'R_' in key for key in dict):
    print 'has both'
</snippet></ROW><ROW><id>16568341</id><snippet>RS=False
LS=False
for each in dict:
    if "L_" in each:
        LS=True
    if "R_" in dict:
        RS=True
    if LS and RS:
        print 'has both'
        break
</snippet></ROW><ROW><id>16568396</id><snippet>&gt;&gt;&gt; a = 1029108219821082904444333322221111
&gt;&gt;&gt; a % 10**16
4444333322221111
</snippet></ROW><ROW><id>16568396</id><snippet>&gt;&gt;&gt; int(str(a)[-16:])
4444333322221111
</snippet></ROW><ROW><id>16568396</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; a % 10 ** int(math.log10(a)/2)
4444333322221111
&gt;&gt;&gt; int(str(a)[-int(math.log10(a)/2):])
4444333322221111
</snippet></ROW><ROW><id>16568396</id><snippet>&gt;&gt;&gt; a // 10 ** int(math.log10(a)/2)   # Use a single / with Python 2
102910821982108290
</snippet></ROW><ROW><id>16568396</id><snippet>&gt;&gt;&gt; a = "\x00*\x10\x01\x00\x13\xa2\x00@J\xfd\x15\xff\xfe\x00\x000013A200402D5DF9"
&gt;&gt;&gt; half = len(a)//2
&gt;&gt;&gt; front, back = a[:half], a[half:]
&gt;&gt;&gt; front
'\x00*\x10\x01\x00\x13¢\x00@Jý\x15ÿþ\x00\x00'
&gt;&gt;&gt; back
'0013A200402D5DF9'
</snippet></ROW><ROW><id>16568426</id><snippet>class X:
    def __init__(self):
        self.a = 1
        self.b = 2
        self.lock = threading.RLock()

    def changeA(self):
        with self.lock:
            self.a = self.a + 1

    def changeB(self):
        with self.lock:
            self.b = self.b + self.a

    def changeAandB(self):
        # you can use chanceA and changeB threadsave!
        with self.lock:
            self.changeA() # a usual lock would block in here
            self.changeB()
</snippet></ROW><ROW><id>16568426</id><snippet>lock = threading.RLock()
def a(...):
     with lock:

         a(...) # somewhere inside
</snippet></ROW><ROW><id>16568426</id><snippet>a</snippet></ROW><ROW><id>16568426</id><snippet>Lock = _allocate_lock # line 98 threading.py

def RLock(*args, **kwargs):
    return _RLock(*args, **kwargs)

class _RLock(_Verbose):

    def __init__(self, verbose=None):
        _Verbose.__init__(self, verbose)
        self.__block = _allocate_lock()
</snippet></ROW><ROW><id>16568426</id><snippet>RLock</snippet></ROW><ROW><id>16568426</id><snippet>Lock</snippet></ROW><ROW><id>16568426</id><snippet>import threading
a = 0 
b = 0
lock = threading.RLock()
def changeAandB(): 
    # this function works with an RLock and Lock
    with lock:
        global a, b
        a += 1
        b += 2
        return a, b

def changeAandB2(callback):
    # this function can return wrong results with RLock and can block with Lock
    with lock:
        global a, b
        a += 1
        callback() # this callback gets a wrong value when calling changeAandB2
        b += 2
        return a, b
</snippet></ROW><ROW><id>16568426</id><snippet>changeAandB2</snippet></ROW><ROW><id>16568426</id><snippet>RLock._is_owned()</snippet></ROW><ROW><id>16568426</id><snippet>changeAandB2</snippet></ROW><ROW><id>16568880</id><snippet>QTextEdit</snippet></ROW><ROW><id>16568880</id><snippet>setReadOnly()</snippet></ROW><ROW><id>16568880</id><snippet>append()</snippet></ROW><ROW><id>16568880</id><snippet>insertPlainText()</snippet></ROW><ROW><id>16568880</id><snippet>...
logOutput = QTextEdit(parent)
logOutput.setReadOnly(True)
logOutput.setLineWrapMode(QTextEdit.NoWrap);

font = logOutput.font()
font.setFamily("Courier")
font.setPointSize(10)

theLayout.addWidget(logOutput)
...
</snippet></ROW><ROW><id>16568880</id><snippet>...
logOutput.moveCursor(QTextCursor.End)
logOutput.setCurrentFont(font)
logOutput.setTextColor(color)

logOutput.insertPlainText(text)

sb = logOutput.verticalScrollBar()
sb.setValue(sb.maximum())
...
</snippet></ROW><ROW><id>16569130</id><snippet>re.search</snippet></ROW><ROW><id>16569130</id><snippet>re.findall</snippet></ROW><ROW><id>16569347</id><snippet>def polysemy(word): 
    return wn.synsets(word)
</snippet></ROW><ROW><id>16569347</id><snippet>len()</snippet></ROW><ROW><id>16569352</id><snippet>import sys
from lxml import etree
from StringIO import StringIO
import psycopg2
import psycopg2.extras
</snippet></ROW><ROW><id>16569352</id><snippet>for row in rows:
  parser = etree.HTMLParser()
  root = etree.parse(template)

  p_class_aboutmaterials = root.find(".//p[@class='about_materials']")
  div_class_aboutmaterials = p_class_aboutmaterials.getparent()
  div_class_aboutmaterials.remove(p_class_aboutmaterials)
  div_class_aboutmaterials.append(etree.XML(row['p_class_aboutmaterials']))
</snippet></ROW><ROW><id>16569367</id><snippet>delattr(self.__class__, 'TestProperty')
</snippet></ROW><ROW><id>16569367</id><snippet>__dict__</snippet></ROW><ROW><id>16569367</id><snippet>setattr(self.__class__, symbol, d[symbol])
</snippet></ROW><ROW><id>16569367</id><snippet>&gt;&gt;&gt; class A(object):
    class Property(object):
        def __get__(*args):
            print 'get:', args
        def __set__(*args):
            print 'set:', args
        def __delete__(*args):
            print 'del:', args
    p = Property()


&gt;&gt;&gt; A.p
get: (&lt;__main__.Property object at 0x7f3e16da4690&gt;, None, &lt;class '__main__.A'&gt;)
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.p
get: (&lt;__main__.Property object at 0x7f3e16da4690&gt;, &lt;__main__.A object at 0x7f3e16da4910&gt;, &lt;class '__main__.A'&gt;)
&gt;&gt;&gt; a.p = 3
set: (&lt;__main__.Property object at 0x7f3e16da4690&gt;, &lt;__main__.A object at 0x7f3e16da4910&gt;, 3)
&gt;&gt;&gt; del a.p
del: (&lt;__main__.Property object at 0x7f3e16da4690&gt;, &lt;__main__.A object at 0x7f3e16da4910&gt;)
</snippet></ROW><ROW><id>16569367</id><snippet>&gt;&gt;&gt; A.p = 2 
&gt;&gt;&gt; a.p
2
</snippet></ROW><ROW><id>16569367</id><snippet>&gt;&gt;&gt; A.p = A.Property()
&gt;&gt;&gt; del A.p
</snippet></ROW><ROW><id>16569584</id><snippet>maxval = max(dict.iteritems(), key=operator.itemgetter(1))[1]
keys = [k for k,v in dict.items() if v==maxval]
</snippet></ROW><ROW><id>16569626</id><snippet>os.environ['HOMEDRIVE'] = 'D:'
</snippet></ROW><ROW><id>16569680</id><snippet>rpy</snippet></ROW><ROW><id>16569680</id><snippet>rpy2</snippet></ROW><ROW><id>16569680</id><snippet>from rpy import *
r.library("robustbase")
r("adjboxStats")(r.c(11232.1, 234.2, 3445532344.3, 34302.3, 203.9, 232223.3, 3434.55), coef = 2.5, a = -4, b = 3, do_conf = True, do_out = True)
</snippet></ROW><ROW><id>16569940</id><snippet>i(i+1)
</snippet></ROW><ROW><id>16569940</id><snippet>i</snippet></ROW><ROW><id>16569940</id><snippet>i+1</snippet></ROW><ROW><id>16569940</id><snippet>i</snippet></ROW><ROW><id>16569940</id><snippet>i * (i+1)
</snippet></ROW><ROW><id>16570014</id><snippet>function()</snippet></ROW><ROW><id>16570014</id><snippet>function(d[0])
function('a')
</snippet></ROW><ROW><id>16570014</id><snippet>k</snippet></ROW><ROW><id>16570014</id><snippet>'a'</snippet></ROW><ROW><id>16570014</id><snippet>def function(key, mapping):
    k = mapping[key]

function(0, d)
</snippet></ROW><ROW><id>16570171</id><snippet>new IntRange(0, 3).toArray();
</snippet></ROW><ROW><id>16570256</id><snippet>start()</snippet></ROW><ROW><id>16570286</id><snippet>from __future__ import division

maxval = a[-1]
weights = [elem / maxval for elem in a]
</snippet></ROW><ROW><id>16570286</id><snippet>&gt;&gt;&gt; maxval = a[-1]
&gt;&gt;&gt; [elem / maxval for elem in a]
[0.2, 0.4, 0.6, 0.8, 1.0]
</snippet></ROW><ROW><id>16570286</id><snippet>from __future__ import division</snippet></ROW><ROW><id>16570286</id><snippet>maxval = float(a[-1])</snippet></ROW><ROW><id>16570396</id><snippet>l = [u'&lt;span class="price" id="old-price-8963"&gt;\n                    \u20b9 8,990                &lt;/span&gt;',
 u'&lt;span class="price" id="product-price-8963"&gt;\n                    \u20b9 5,990                &lt;/span&gt;',
 u'&lt;span class="price" id="old-price-8940"&gt;\n                    \u20b9 8,990                &lt;/span&gt;',
 u'&lt;span class="price" id="product-price-8940"&gt;\n                    \u20b9 5,990                &lt;/span&gt;',
 u'&lt;span class="price"&gt;\u20b9 7,990&lt;/span&gt;',
 u'&lt;span class="price"&gt;\u20b9 7,990&lt;/span&gt;',
 u'&lt;span class="price"&gt;\u20b9 7,990&lt;/span&gt;',
 u'&lt;span class="price"&gt;\u20b9 7,990&lt;/span&gt;',
 u'&lt;span class="price"&gt;\u20b9 7,990&lt;/span&gt;',
 u'&lt;span class="price"&gt;\u20b9 2,990&lt;/span&gt;']
&gt;&gt;&gt; s =set()
&gt;&gt;&gt; for x in l:
    import re
    if not 'old-price' in x:
        m = re.match('&lt;span[^&gt;]*&gt;([^&lt;]*)&lt;/span&gt;', x)
        if m is None:
            print x
        s.add(m.group(1).strip())


&gt;&gt;&gt; s
set([u'\u20b9 5,990', u'\u20b9 2,990', u'\u20b9 7,990'])
</snippet></ROW><ROW><id>16570417</id><snippet>numpy.linalg.inv(A)</snippet></ROW><ROW><id>16570417</id><snippet>numpy.linalg.solve(A,I)</snippet></ROW><ROW><id>16570417</id><snippet>I</snippet></ROW><ROW><id>16570417</id><snippet>A * A.T = I</snippet></ROW></DATA>